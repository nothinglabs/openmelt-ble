
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
		k_mutex_unlock(&button_handler_mut);
	}
}

static void buttons_scan_fn(struct k_work *work)
{
   0:	40 49 00 20 01 49 01 00 f1 4e 02 00 d5 48 01 00     @I. .I...N...H..
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
  10:	d5 48 01 00 d5 48 01 00 d5 48 01 00 00 00 00 00     .H...H...H......
	...

	button_scan = get_buttons();
	atomic_set(&my_buttons, (atomic_val_t)button_scan);

	if (!initial_run) {
		if (button_scan != last_button_scan) {
  2c:	79 43 01 00 d5 48 01 00 00 00 00 00 25 43 01 00     yC...H......%C..
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
  3c:	d5 48 01 00                                         .H..

00000040 <_irq_vector_table>:
  40:	29 44 01 00 c3 74 02 00 29 44 01 00 29 44 01 00     )D...t..)D..)D..
			handler->cb(button_state, has_changed);
  50:	29 44 01 00 29 44 01 00 29 44 01 00 29 44 01 00     )D..)D..)D..)D..
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
  60:	8b 74 02 00 29 44 01 00 29 44 01 00 a9 74 02 00     .t..)D..)D...t..
	}

	last_button_scan = button_scan;

	if (button_scan != 0) {
		k_work_reschedule(&buttons_scan,
  70:	29 44 01 00 29 44 01 00 29 44 01 00 29 44 01 00     )D..)D..)D..)D..
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
  80:	29 44 01 00 29 44 01 00 29 44 01 00 29 44 01 00     )D..)D..)D..)D..
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();

#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
  90:	29 44 01 00 29 44 01 00 29 44 01 00 29 44 01 00     )D..)D..)D..)D..
  a0:	29 44 01 00 29 44 01 00 29 44 01 00 29 44 01 00     )D..)D..)D..)D..
		/* If no button is pressed module can switch to callbacks */
		int err = 0;

		k_spinlock_key_t key = k_spin_lock(&lock);

		switch (state) {
  b0:	29 44 01 00 29 44 01 00 29 44 01 00 29 44 01 00     )D..)D..)D..)D..
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
  c0:	29 44 01 00 29 44 01 00 29 44 01 00 29 44 01 00     )D..)D..)D..)D..
  d0:	29 44 01 00 29 44 01 00 29 44 01 00                 )D..)D..)D..

Disassembly of section text:

000000e0 <__aeabi_drsub>:
			break;
		}

		k_spin_unlock(&lock, key);

		if (err) {
      e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
			LOG_ERR("Cannot enable callbacks");
		}
	}
}
      e4:	e002      	b.n	ec <__adddf3>
			LOG_ERR("Cannot enable callbacks");
      e6:	bf00      	nop

000000e8 <__aeabi_dsub>:
      e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000000ec <__adddf3>:
      ec:	b530      	push	{r4, r5, lr}
			__ASSERT_NO_MSG(false);
      ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
      f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
      f6:	ea94 0f05 	teq	r4, r5
      fa:	bf08      	it	eq
      fc:	ea90 0f02 	teqeq	r0, r2
		int err = 0;
     100:	bf1f      	itttt	ne
			break;
     102:	ea54 0c00 	orrsne.w	ip, r4, r0
}
     106:	ea55 0c02 	orrsne.w	ip, r5, r2
     10a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     10e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     112:	f000 80e2 	beq.w	2da <CONFIG_FLASH_SIZE+0xda>
     116:	ea4f 5454 	mov.w	r4, r4, lsr #21
     11a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     11e:	bfb8      	it	lt
     120:	426d      	neglt	r5, r5
     122:	dd0c      	ble.n	13e <CONFIG_KOBJECT_TEXT_AREA+0x3e>
     124:	442c      	add	r4, r5
     126:	ea80 0202 	eor.w	r2, r0, r2
     12a:	ea81 0303 	eor.w	r3, r1, r3
     12e:	ea82 0000 	eor.w	r0, r2, r0
     132:	ea83 0101 	eor.w	r1, r3, r1
     136:	ea80 0202 	eor.w	r2, r0, r2
     13a:	ea81 0303 	eor.w	r3, r1, r3
     13e:	2d36      	cmp	r5, #54	; 0x36
     140:	bf88      	it	hi
     142:	bd30      	pophi	{r4, r5, pc}
     144:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     148:	ea4f 3101 	mov.w	r1, r1, lsl #12
     14c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     150:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     154:	d002      	beq.n	15c <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x12>
     156:	4240      	negs	r0, r0
     158:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     15c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     160:	ea4f 3303 	mov.w	r3, r3, lsl #12
     164:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     168:	d002      	beq.n	170 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x3>
     16a:	4252      	negs	r2, r2
     16c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     170:	ea94 0f05 	teq	r4, r5
     174:	f000 80a7 	beq.w	2c6 <CONFIG_FLASH_SIZE+0xc6>
     178:	f1a4 0401 	sub.w	r4, r4, #1
     17c:	f1d5 0e20 	rsbs	lr, r5, #32
     180:	db0d      	blt.n	19e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x31>
     182:	fa02 fc0e 	lsl.w	ip, r2, lr
     186:	fa22 f205 	lsr.w	r2, r2, r5
     18a:	1880      	adds	r0, r0, r2
     18c:	f141 0100 	adc.w	r1, r1, #0
     190:	fa03 f20e 	lsl.w	r2, r3, lr
     194:	1880      	adds	r0, r0, r2
     196:	fa43 f305 	asr.w	r3, r3, r5
     19a:	4159      	adcs	r1, r3
     19c:	e00e      	b.n	1bc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x4f>
     19e:	f1a5 0520 	sub.w	r5, r5, #32
     1a2:	f10e 0e20 	add.w	lr, lr, #32
     1a6:	2a01      	cmp	r2, #1
     1a8:	fa03 fc0e 	lsl.w	ip, r3, lr
     1ac:	bf28      	it	cs
     1ae:	f04c 0c02 	orrcs.w	ip, ip, #2
     1b2:	fa43 f305 	asr.w	r3, r3, r5
     1b6:	18c0      	adds	r0, r0, r3
     1b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     1bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     1c0:	d507      	bpl.n	1d2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x65>
     1c2:	f04f 0e00 	mov.w	lr, #0
     1c6:	f1dc 0c00 	rsbs	ip, ip, #0
     1ca:	eb7e 0000 	sbcs.w	r0, lr, r0
     1ce:	eb6e 0101 	sbc.w	r1, lr, r1
     1d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     1d6:	d31b      	bcc.n	210 <CONFIG_FLASH_SIZE+0x10>
     1d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     1dc:	d30c      	bcc.n	1f8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x8b>
     1de:	0849      	lsrs	r1, r1, #1
     1e0:	ea5f 0030 	movs.w	r0, r0, rrx
     1e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
     1e8:	f104 0401 	add.w	r4, r4, #1
     1ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
     1f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     1f4:	f080 809a 	bcs.w	32c <CONFIG_FLASH_SIZE+0x12c>
     1f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     1fc:	bf08      	it	eq
     1fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     202:	f150 0000 	adcs.w	r0, r0, #0
     206:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     20a:	ea41 0105 	orr.w	r1, r1, r5
     20e:	bd30      	pop	{r4, r5, pc}
     210:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     214:	4140      	adcs	r0, r0
     216:	eb41 0101 	adc.w	r1, r1, r1
     21a:	3c01      	subs	r4, #1
     21c:	bf28      	it	cs
     21e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     222:	d2e9      	bcs.n	1f8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x8b>
     224:	f091 0f00 	teq	r1, #0
     228:	bf04      	itt	eq
     22a:	4601      	moveq	r1, r0
     22c:	2000      	moveq	r0, #0
     22e:	fab1 f381 	clz	r3, r1
     232:	bf08      	it	eq
     234:	3320      	addeq	r3, #32
     236:	f1a3 030b 	sub.w	r3, r3, #11
     23a:	f1b3 0220 	subs.w	r2, r3, #32
     23e:	da0c      	bge.n	25a <CONFIG_FLASH_SIZE+0x5a>
     240:	320c      	adds	r2, #12
     242:	dd08      	ble.n	256 <CONFIG_FLASH_SIZE+0x56>
     244:	f102 0c14 	add.w	ip, r2, #20
     248:	f1c2 020c 	rsb	r2, r2, #12
     24c:	fa01 f00c 	lsl.w	r0, r1, ip
     250:	fa21 f102 	lsr.w	r1, r1, r2
     254:	e00c      	b.n	270 <CONFIG_FLASH_SIZE+0x70>
     256:	f102 0214 	add.w	r2, r2, #20
     25a:	bfd8      	it	le
     25c:	f1c2 0c20 	rsble	ip, r2, #32
     260:	fa01 f102 	lsl.w	r1, r1, r2
     264:	fa20 fc0c 	lsr.w	ip, r0, ip
     268:	bfdc      	itt	le
     26a:	ea41 010c 	orrle.w	r1, r1, ip
     26e:	4090      	lslle	r0, r2
     270:	1ae4      	subs	r4, r4, r3
     272:	bfa2      	ittt	ge
     274:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     278:	4329      	orrge	r1, r5
     27a:	bd30      	popge	{r4, r5, pc}
     27c:	ea6f 0404 	mvn.w	r4, r4
     280:	3c1f      	subs	r4, #31
     282:	da1c      	bge.n	2be <CONFIG_FLASH_SIZE+0xbe>
     284:	340c      	adds	r4, #12
     286:	dc0e      	bgt.n	2a6 <CONFIG_FLASH_SIZE+0xa6>
     288:	f104 0414 	add.w	r4, r4, #20
     28c:	f1c4 0220 	rsb	r2, r4, #32
     290:	fa20 f004 	lsr.w	r0, r0, r4
     294:	fa01 f302 	lsl.w	r3, r1, r2
     298:	ea40 0003 	orr.w	r0, r0, r3
     29c:	fa21 f304 	lsr.w	r3, r1, r4
     2a0:	ea45 0103 	orr.w	r1, r5, r3
     2a4:	bd30      	pop	{r4, r5, pc}
     2a6:	f1c4 040c 	rsb	r4, r4, #12
     2aa:	f1c4 0220 	rsb	r2, r4, #32
     2ae:	fa20 f002 	lsr.w	r0, r0, r2
     2b2:	fa01 f304 	lsl.w	r3, r1, r4
     2b6:	ea40 0003 	orr.w	r0, r0, r3
     2ba:	4629      	mov	r1, r5
     2bc:	bd30      	pop	{r4, r5, pc}
     2be:	fa21 f004 	lsr.w	r0, r1, r4
     2c2:	4629      	mov	r1, r5
     2c4:	bd30      	pop	{r4, r5, pc}
     2c6:	f094 0f00 	teq	r4, #0
     2ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     2ce:	bf06      	itte	eq
     2d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     2d4:	3401      	addeq	r4, #1
     2d6:	3d01      	subne	r5, #1
     2d8:	e74e      	b.n	178 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xb>
     2da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     2de:	bf18      	it	ne
     2e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     2e4:	d029      	beq.n	33a <CONFIG_FLASH_SIZE+0x13a>
     2e6:	ea94 0f05 	teq	r4, r5
     2ea:	bf08      	it	eq
     2ec:	ea90 0f02 	teqeq	r0, r2
     2f0:	d005      	beq.n	2fe <CONFIG_FLASH_SIZE+0xfe>
     2f2:	ea54 0c00 	orrs.w	ip, r4, r0
     2f6:	bf04      	itt	eq
     2f8:	4619      	moveq	r1, r3
     2fa:	4610      	moveq	r0, r2
     2fc:	bd30      	pop	{r4, r5, pc}
     2fe:	ea91 0f03 	teq	r1, r3
     302:	bf1e      	ittt	ne
     304:	2100      	movne	r1, #0
     306:	2000      	movne	r0, #0
     308:	bd30      	popne	{r4, r5, pc}
     30a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     30e:	d105      	bne.n	31c <CONFIG_FLASH_SIZE+0x11c>
     310:	0040      	lsls	r0, r0, #1
     312:	4149      	adcs	r1, r1
     314:	bf28      	it	cs
     316:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     31a:	bd30      	pop	{r4, r5, pc}
     31c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     320:	bf3c      	itt	cc
     322:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     326:	bd30      	popcc	{r4, r5, pc}
     328:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     32c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     330:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     334:	f04f 0000 	mov.w	r0, #0
     338:	bd30      	pop	{r4, r5, pc}
     33a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     33e:	bf1a      	itte	ne
     340:	4619      	movne	r1, r3
     342:	4610      	movne	r0, r2
     344:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     348:	bf1c      	itt	ne
     34a:	460b      	movne	r3, r1
     34c:	4602      	movne	r2, r0
     34e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     352:	bf06      	itte	eq
     354:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     358:	ea91 0f03 	teqeq	r1, r3
     35c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     360:	bd30      	pop	{r4, r5, pc}
     362:	bf00      	nop

00000364 <__aeabi_ui2d>:
     364:	f090 0f00 	teq	r0, #0
     368:	bf04      	itt	eq
     36a:	2100      	moveq	r1, #0
     36c:	4770      	bxeq	lr
     36e:	b530      	push	{r4, r5, lr}
     370:	f44f 6480 	mov.w	r4, #1024	; 0x400
     374:	f104 0432 	add.w	r4, r4, #50	; 0x32
     378:	f04f 0500 	mov.w	r5, #0
     37c:	f04f 0100 	mov.w	r1, #0
     380:	e750      	b.n	224 <CONFIG_FLASH_SIZE+0x24>
     382:	bf00      	nop

00000384 <__aeabi_i2d>:
     384:	f090 0f00 	teq	r0, #0
     388:	bf04      	itt	eq
     38a:	2100      	moveq	r1, #0
     38c:	4770      	bxeq	lr
     38e:	b530      	push	{r4, r5, lr}
     390:	f44f 6480 	mov.w	r4, #1024	; 0x400
     394:	f104 0432 	add.w	r4, r4, #50	; 0x32
     398:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     39c:	bf48      	it	mi
     39e:	4240      	negmi	r0, r0
     3a0:	f04f 0100 	mov.w	r1, #0
     3a4:	e73e      	b.n	224 <CONFIG_FLASH_SIZE+0x24>
     3a6:	bf00      	nop

000003a8 <__aeabi_f2d>:
     3a8:	0042      	lsls	r2, r0, #1
     3aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
     3ae:	ea4f 0131 	mov.w	r1, r1, rrx
     3b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
     3b6:	bf1f      	itttt	ne
     3b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     3bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     3c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     3c4:	4770      	bxne	lr
     3c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     3ca:	bf08      	it	eq
     3cc:	4770      	bxeq	lr
     3ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     3d2:	bf04      	itt	eq
     3d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     3d8:	4770      	bxeq	lr
     3da:	b530      	push	{r4, r5, lr}
     3dc:	f44f 7460 	mov.w	r4, #896	; 0x380
     3e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     3e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     3e8:	e71c      	b.n	224 <CONFIG_FLASH_SIZE+0x24>
     3ea:	bf00      	nop

000003ec <__aeabi_ul2d>:
     3ec:	ea50 0201 	orrs.w	r2, r0, r1
     3f0:	bf08      	it	eq
     3f2:	4770      	bxeq	lr
     3f4:	b530      	push	{r4, r5, lr}
     3f6:	f04f 0500 	mov.w	r5, #0
     3fa:	e00a      	b.n	412 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x12>

000003fc <__aeabi_l2d>:
     3fc:	ea50 0201 	orrs.w	r2, r0, r1
     400:	bf08      	it	eq
     402:	4770      	bxeq	lr
     404:	b530      	push	{r4, r5, lr}
     406:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     40a:	d502      	bpl.n	412 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x12>
     40c:	4240      	negs	r0, r0
     40e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     412:	f44f 6480 	mov.w	r4, #1024	; 0x400
     416:	f104 0432 	add.w	r4, r4, #50	; 0x32
     41a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     41e:	f43f aed8 	beq.w	1d2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x65>
     422:	f04f 0203 	mov.w	r2, #3
     426:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     42a:	bf18      	it	ne
     42c:	3203      	addne	r2, #3
     42e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     432:	bf18      	it	ne
     434:	3203      	addne	r2, #3
     436:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     43a:	f1c2 0320 	rsb	r3, r2, #32
     43e:	fa00 fc03 	lsl.w	ip, r0, r3
     442:	fa20 f002 	lsr.w	r0, r0, r2
     446:	fa01 fe03 	lsl.w	lr, r1, r3
     44a:	ea40 000e 	orr.w	r0, r0, lr
     44e:	fa21 f102 	lsr.w	r1, r1, r2
     452:	4414      	add	r4, r2
     454:	e6bd      	b.n	1d2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x65>
     456:	bf00      	nop

00000458 <__aeabi_dmul>:
     458:	b570      	push	{r4, r5, r6, lr}
     45a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     45e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     462:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     466:	bf1d      	ittte	ne
     468:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     46c:	ea94 0f0c 	teqne	r4, ip
     470:	ea95 0f0c 	teqne	r5, ip
     474:	f000 f8de 	bleq	634 <CONFIG_BT_HCI_TX_STACK_SIZE+0x34>
     478:	442c      	add	r4, r5
     47a:	ea81 0603 	eor.w	r6, r1, r3
     47e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     482:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     486:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     48a:	bf18      	it	ne
     48c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     490:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     494:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     498:	d038      	beq.n	50c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x24>
     49a:	fba0 ce02 	umull	ip, lr, r0, r2
     49e:	f04f 0500 	mov.w	r5, #0
     4a2:	fbe1 e502 	umlal	lr, r5, r1, r2
     4a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     4aa:	fbe0 e503 	umlal	lr, r5, r0, r3
     4ae:	f04f 0600 	mov.w	r6, #0
     4b2:	fbe1 5603 	umlal	r5, r6, r1, r3
     4b6:	f09c 0f00 	teq	ip, #0
     4ba:	bf18      	it	ne
     4bc:	f04e 0e01 	orrne.w	lr, lr, #1
     4c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     4c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     4c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     4cc:	d204      	bcs.n	4d8 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x64>
     4ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     4d2:	416d      	adcs	r5, r5
     4d4:	eb46 0606 	adc.w	r6, r6, r6
     4d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     4dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     4e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     4e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     4e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     4ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     4f0:	bf88      	it	hi
     4f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     4f6:	d81e      	bhi.n	536 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4e>
     4f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     4fc:	bf08      	it	eq
     4fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     502:	f150 0000 	adcs.w	r0, r0, #0
     506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     50a:	bd70      	pop	{r4, r5, r6, pc}
     50c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     510:	ea46 0101 	orr.w	r1, r6, r1
     514:	ea40 0002 	orr.w	r0, r0, r2
     518:	ea81 0103 	eor.w	r1, r1, r3
     51c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     520:	bfc2      	ittt	gt
     522:	ebd4 050c 	rsbsgt	r5, r4, ip
     526:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     52a:	bd70      	popgt	{r4, r5, r6, pc}
     52c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     530:	f04f 0e00 	mov.w	lr, #0
     534:	3c01      	subs	r4, #1
     536:	f300 80ab 	bgt.w	690 <CONFIG_BT_HCI_TX_STACK_SIZE+0x90>
     53a:	f114 0f36 	cmn.w	r4, #54	; 0x36
     53e:	bfde      	ittt	le
     540:	2000      	movle	r0, #0
     542:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     546:	bd70      	pople	{r4, r5, r6, pc}
     548:	f1c4 0400 	rsb	r4, r4, #0
     54c:	3c20      	subs	r4, #32
     54e:	da35      	bge.n	5bc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xd4>
     550:	340c      	adds	r4, #12
     552:	dc1b      	bgt.n	58c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa4>
     554:	f104 0414 	add.w	r4, r4, #20
     558:	f1c4 0520 	rsb	r5, r4, #32
     55c:	fa00 f305 	lsl.w	r3, r0, r5
     560:	fa20 f004 	lsr.w	r0, r0, r4
     564:	fa01 f205 	lsl.w	r2, r1, r5
     568:	ea40 0002 	orr.w	r0, r0, r2
     56c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     570:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     574:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     578:	fa21 f604 	lsr.w	r6, r1, r4
     57c:	eb42 0106 	adc.w	r1, r2, r6
     580:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     584:	bf08      	it	eq
     586:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     58a:	bd70      	pop	{r4, r5, r6, pc}
     58c:	f1c4 040c 	rsb	r4, r4, #12
     590:	f1c4 0520 	rsb	r5, r4, #32
     594:	fa00 f304 	lsl.w	r3, r0, r4
     598:	fa20 f005 	lsr.w	r0, r0, r5
     59c:	fa01 f204 	lsl.w	r2, r1, r4
     5a0:	ea40 0002 	orr.w	r0, r0, r2
     5a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5ac:	f141 0100 	adc.w	r1, r1, #0
     5b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5b4:	bf08      	it	eq
     5b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5ba:	bd70      	pop	{r4, r5, r6, pc}
     5bc:	f1c4 0520 	rsb	r5, r4, #32
     5c0:	fa00 f205 	lsl.w	r2, r0, r5
     5c4:	ea4e 0e02 	orr.w	lr, lr, r2
     5c8:	fa20 f304 	lsr.w	r3, r0, r4
     5cc:	fa01 f205 	lsl.w	r2, r1, r5
     5d0:	ea43 0302 	orr.w	r3, r3, r2
     5d4:	fa21 f004 	lsr.w	r0, r1, r4
     5d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5dc:	fa21 f204 	lsr.w	r2, r1, r4
     5e0:	ea20 0002 	bic.w	r0, r0, r2
     5e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     5e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5ec:	bf08      	it	eq
     5ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5f2:	bd70      	pop	{r4, r5, r6, pc}
     5f4:	f094 0f00 	teq	r4, #0
     5f8:	d10f      	bne.n	61a <CONFIG_BT_HCI_TX_STACK_SIZE+0x1a>
     5fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     5fe:	0040      	lsls	r0, r0, #1
     600:	eb41 0101 	adc.w	r1, r1, r1
     604:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     608:	bf08      	it	eq
     60a:	3c01      	subeq	r4, #1
     60c:	d0f7      	beq.n	5fe <CONFIG_BT_COMPANY_ID+0xd>
     60e:	ea41 0106 	orr.w	r1, r1, r6
     612:	f095 0f00 	teq	r5, #0
     616:	bf18      	it	ne
     618:	4770      	bxne	lr
     61a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     61e:	0052      	lsls	r2, r2, #1
     620:	eb43 0303 	adc.w	r3, r3, r3
     624:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     628:	bf08      	it	eq
     62a:	3d01      	subeq	r5, #1
     62c:	d0f7      	beq.n	61e <CONFIG_BT_HCI_TX_STACK_SIZE+0x1e>
     62e:	ea43 0306 	orr.w	r3, r3, r6
     632:	4770      	bx	lr
     634:	ea94 0f0c 	teq	r4, ip
     638:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     63c:	bf18      	it	ne
     63e:	ea95 0f0c 	teqne	r5, ip
     642:	d00c      	beq.n	65e <CONFIG_BT_HCI_TX_STACK_SIZE+0x5e>
     644:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     648:	bf18      	it	ne
     64a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     64e:	d1d1      	bne.n	5f4 <CONFIG_BT_COMPANY_ID+0x3>
     650:	ea81 0103 	eor.w	r1, r1, r3
     654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     658:	f04f 0000 	mov.w	r0, #0
     65c:	bd70      	pop	{r4, r5, r6, pc}
     65e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     662:	bf06      	itte	eq
     664:	4610      	moveq	r0, r2
     666:	4619      	moveq	r1, r3
     668:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     66c:	d019      	beq.n	6a2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xa2>
     66e:	ea94 0f0c 	teq	r4, ip
     672:	d102      	bne.n	67a <CONFIG_BT_HCI_TX_STACK_SIZE+0x7a>
     674:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     678:	d113      	bne.n	6a2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xa2>
     67a:	ea95 0f0c 	teq	r5, ip
     67e:	d105      	bne.n	68c <CONFIG_BT_HCI_TX_STACK_SIZE+0x8c>
     680:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     684:	bf1c      	itt	ne
     686:	4610      	movne	r0, r2
     688:	4619      	movne	r1, r3
     68a:	d10a      	bne.n	6a2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xa2>
     68c:	ea81 0103 	eor.w	r1, r1, r3
     690:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     694:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     698:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     69c:	f04f 0000 	mov.w	r0, #0
     6a0:	bd70      	pop	{r4, r5, r6, pc}
     6a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     6aa:	bd70      	pop	{r4, r5, r6, pc}

000006ac <__aeabi_ddiv>:
     6ac:	b570      	push	{r4, r5, r6, lr}
     6ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
     6b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     6b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     6ba:	bf1d      	ittte	ne
     6bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     6c0:	ea94 0f0c 	teqne	r4, ip
     6c4:	ea95 0f0c 	teqne	r5, ip
     6c8:	f000 f8a7 	bleq	81a <__data_size+0x19>
     6cc:	eba4 0405 	sub.w	r4, r4, r5
     6d0:	ea81 0e03 	eor.w	lr, r1, r3
     6d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     6d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
     6dc:	f000 8088 	beq.w	7f0 <__aeabi_ddiv+0x144>
     6e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
     6e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     6e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     6ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     6f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
     6f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     6f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     6fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
     700:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     704:	429d      	cmp	r5, r3
     706:	bf08      	it	eq
     708:	4296      	cmpeq	r6, r2
     70a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     70e:	f504 7440 	add.w	r4, r4, #768	; 0x300
     712:	d202      	bcs.n	71a <__aeabi_ddiv+0x6e>
     714:	085b      	lsrs	r3, r3, #1
     716:	ea4f 0232 	mov.w	r2, r2, rrx
     71a:	1ab6      	subs	r6, r6, r2
     71c:	eb65 0503 	sbc.w	r5, r5, r3
     720:	085b      	lsrs	r3, r3, #1
     722:	ea4f 0232 	mov.w	r2, r2, rrx
     726:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     72a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     72e:	ebb6 0e02 	subs.w	lr, r6, r2
     732:	eb75 0e03 	sbcs.w	lr, r5, r3
     736:	bf22      	ittt	cs
     738:	1ab6      	subcs	r6, r6, r2
     73a:	4675      	movcs	r5, lr
     73c:	ea40 000c 	orrcs.w	r0, r0, ip
     740:	085b      	lsrs	r3, r3, #1
     742:	ea4f 0232 	mov.w	r2, r2, rrx
     746:	ebb6 0e02 	subs.w	lr, r6, r2
     74a:	eb75 0e03 	sbcs.w	lr, r5, r3
     74e:	bf22      	ittt	cs
     750:	1ab6      	subcs	r6, r6, r2
     752:	4675      	movcs	r5, lr
     754:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     758:	085b      	lsrs	r3, r3, #1
     75a:	ea4f 0232 	mov.w	r2, r2, rrx
     75e:	ebb6 0e02 	subs.w	lr, r6, r2
     762:	eb75 0e03 	sbcs.w	lr, r5, r3
     766:	bf22      	ittt	cs
     768:	1ab6      	subcs	r6, r6, r2
     76a:	4675      	movcs	r5, lr
     76c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     770:	085b      	lsrs	r3, r3, #1
     772:	ea4f 0232 	mov.w	r2, r2, rrx
     776:	ebb6 0e02 	subs.w	lr, r6, r2
     77a:	eb75 0e03 	sbcs.w	lr, r5, r3
     77e:	bf22      	ittt	cs
     780:	1ab6      	subcs	r6, r6, r2
     782:	4675      	movcs	r5, lr
     784:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     788:	ea55 0e06 	orrs.w	lr, r5, r6
     78c:	d018      	beq.n	7c0 <__aeabi_ddiv+0x114>
     78e:	ea4f 1505 	mov.w	r5, r5, lsl #4
     792:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     796:	ea4f 1606 	mov.w	r6, r6, lsl #4
     79a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     79e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     7a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     7a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     7aa:	d1c0      	bne.n	72e <__aeabi_ddiv+0x82>
     7ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7b0:	d10b      	bne.n	7ca <__aeabi_ddiv+0x11e>
     7b2:	ea41 0100 	orr.w	r1, r1, r0
     7b6:	f04f 0000 	mov.w	r0, #0
     7ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     7be:	e7b6      	b.n	72e <__aeabi_ddiv+0x82>
     7c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7c4:	bf04      	itt	eq
     7c6:	4301      	orreq	r1, r0
     7c8:	2000      	moveq	r0, #0
     7ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     7ce:	bf88      	it	hi
     7d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     7d4:	f63f aeaf 	bhi.w	536 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4e>
     7d8:	ebb5 0c03 	subs.w	ip, r5, r3
     7dc:	bf04      	itt	eq
     7de:	ebb6 0c02 	subseq.w	ip, r6, r2
     7e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     7e6:	f150 0000 	adcs.w	r0, r0, #0
     7ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     7ee:	bd70      	pop	{r4, r5, r6, pc}
     7f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     7f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     7f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     7fc:	bfc2      	ittt	gt
     7fe:	ebd4 050c 	rsbsgt	r5, r4, ip
     802:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     806:	bd70      	popgt	{r4, r5, r6, pc}
     808:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     80c:	f04f 0e00 	mov.w	lr, #0
     810:	3c01      	subs	r4, #1
     812:	e690      	b.n	536 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4e>
     814:	ea45 0e06 	orr.w	lr, r5, r6
     818:	e68d      	b.n	536 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4e>
     81a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     81e:	ea94 0f0c 	teq	r4, ip
     822:	bf08      	it	eq
     824:	ea95 0f0c 	teqeq	r5, ip
     828:	f43f af3b 	beq.w	6a2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xa2>
     82c:	ea94 0f0c 	teq	r4, ip
     830:	d10a      	bne.n	848 <__data_size+0x47>
     832:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     836:	f47f af34 	bne.w	6a2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xa2>
     83a:	ea95 0f0c 	teq	r5, ip
     83e:	f47f af25 	bne.w	68c <CONFIG_BT_HCI_TX_STACK_SIZE+0x8c>
     842:	4610      	mov	r0, r2
     844:	4619      	mov	r1, r3
     846:	e72c      	b.n	6a2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xa2>
     848:	ea95 0f0c 	teq	r5, ip
     84c:	d106      	bne.n	85c <__data_size+0x5b>
     84e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     852:	f43f aefd 	beq.w	650 <CONFIG_BT_HCI_TX_STACK_SIZE+0x50>
     856:	4610      	mov	r0, r2
     858:	4619      	mov	r1, r3
     85a:	e722      	b.n	6a2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xa2>
     85c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     860:	bf18      	it	ne
     862:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     866:	f47f aec5 	bne.w	5f4 <CONFIG_BT_COMPANY_ID+0x3>
     86a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     86e:	f47f af0d 	bne.w	68c <CONFIG_BT_HCI_TX_STACK_SIZE+0x8c>
     872:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     876:	f47f aeeb 	bne.w	650 <CONFIG_BT_HCI_TX_STACK_SIZE+0x50>
     87a:	e712      	b.n	6a2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xa2>

0000087c <__aeabi_d2f>:
     87c:	ea4f 0241 	mov.w	r2, r1, lsl #1
     880:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
     884:	bf24      	itt	cs
     886:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
     88a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
     88e:	d90d      	bls.n	8ac <CONFIG_BT_RX_STACK_SIZE+0x14>
     890:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     894:	ea4f 02c0 	mov.w	r2, r0, lsl #3
     898:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
     89c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
     8a0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
     8a4:	bf08      	it	eq
     8a6:	f020 0001 	biceq.w	r0, r0, #1
     8aa:	4770      	bx	lr
     8ac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
     8b0:	d121      	bne.n	8f6 <CONFIG_BT_RX_STACK_SIZE+0x5e>
     8b2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
     8b6:	bfbc      	itt	lt
     8b8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     8bc:	4770      	bxlt	lr
     8be:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     8c2:	ea4f 5252 	mov.w	r2, r2, lsr #21
     8c6:	f1c2 0218 	rsb	r2, r2, #24
     8ca:	f1c2 0c20 	rsb	ip, r2, #32
     8ce:	fa10 f30c 	lsls.w	r3, r0, ip
     8d2:	fa20 f002 	lsr.w	r0, r0, r2
     8d6:	bf18      	it	ne
     8d8:	f040 0001 	orrne.w	r0, r0, #1
     8dc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     8e0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     8e4:	fa03 fc0c 	lsl.w	ip, r3, ip
     8e8:	ea40 000c 	orr.w	r0, r0, ip
     8ec:	fa23 f302 	lsr.w	r3, r3, r2
     8f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
     8f4:	e7cc      	b.n	890 <__aeabi_d2f+0x14>
     8f6:	ea7f 5362 	mvns.w	r3, r2, asr #21
     8fa:	d107      	bne.n	90c <CONFIG_BT_RX_STACK_SIZE+0x74>
     8fc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     900:	bf1e      	ittt	ne
     902:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     906:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     90a:	4770      	bxne	lr
     90c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     910:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     914:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     918:	4770      	bx	lr
     91a:	bf00      	nop

0000091c <__aeabi_frsub>:
     91c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
     920:	e002      	b.n	928 <__addsf3>
     922:	bf00      	nop

00000924 <__aeabi_fsub>:
     924:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00000928 <__addsf3>:
     928:	0042      	lsls	r2, r0, #1
     92a:	bf1f      	itttt	ne
     92c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
     930:	ea92 0f03 	teqne	r2, r3
     934:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
     938:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     93c:	d06a      	beq.n	a14 <__addsf3+0xec>
     93e:	ea4f 6212 	mov.w	r2, r2, lsr #24
     942:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
     946:	bfc1      	itttt	gt
     948:	18d2      	addgt	r2, r2, r3
     94a:	4041      	eorgt	r1, r0
     94c:	4048      	eorgt	r0, r1
     94e:	4041      	eorgt	r1, r0
     950:	bfb8      	it	lt
     952:	425b      	neglt	r3, r3
     954:	2b19      	cmp	r3, #25
     956:	bf88      	it	hi
     958:	4770      	bxhi	lr
     95a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     95e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     962:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     966:	bf18      	it	ne
     968:	4240      	negne	r0, r0
     96a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     96e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     972:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     976:	bf18      	it	ne
     978:	4249      	negne	r1, r1
     97a:	ea92 0f03 	teq	r2, r3
     97e:	d03f      	beq.n	a00 <__addsf3+0xd8>
     980:	f1a2 0201 	sub.w	r2, r2, #1
     984:	fa41 fc03 	asr.w	ip, r1, r3
     988:	eb10 000c 	adds.w	r0, r0, ip
     98c:	f1c3 0320 	rsb	r3, r3, #32
     990:	fa01 f103 	lsl.w	r1, r1, r3
     994:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     998:	d502      	bpl.n	9a0 <__addsf3+0x78>
     99a:	4249      	negs	r1, r1
     99c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     9a0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     9a4:	d313      	bcc.n	9ce <__addsf3+0xa6>
     9a6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
     9aa:	d306      	bcc.n	9ba <__addsf3+0x92>
     9ac:	0840      	lsrs	r0, r0, #1
     9ae:	ea4f 0131 	mov.w	r1, r1, rrx
     9b2:	f102 0201 	add.w	r2, r2, #1
     9b6:	2afe      	cmp	r2, #254	; 0xfe
     9b8:	d251      	bcs.n	a5e <__addsf3+0x136>
     9ba:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     9be:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     9c2:	bf08      	it	eq
     9c4:	f020 0001 	biceq.w	r0, r0, #1
     9c8:	ea40 0003 	orr.w	r0, r0, r3
     9cc:	4770      	bx	lr
     9ce:	0049      	lsls	r1, r1, #1
     9d0:	eb40 0000 	adc.w	r0, r0, r0
     9d4:	3a01      	subs	r2, #1
     9d6:	bf28      	it	cs
     9d8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
     9dc:	d2ed      	bcs.n	9ba <__addsf3+0x92>
     9de:	fab0 fc80 	clz	ip, r0
     9e2:	f1ac 0c08 	sub.w	ip, ip, #8
     9e6:	ebb2 020c 	subs.w	r2, r2, ip
     9ea:	fa00 f00c 	lsl.w	r0, r0, ip
     9ee:	bfaa      	itet	ge
     9f0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
     9f4:	4252      	neglt	r2, r2
     9f6:	4318      	orrge	r0, r3
     9f8:	bfbc      	itt	lt
     9fa:	40d0      	lsrlt	r0, r2
     9fc:	4318      	orrlt	r0, r3
     9fe:	4770      	bx	lr
     a00:	f092 0f00 	teq	r2, #0
     a04:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     a08:	bf06      	itte	eq
     a0a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     a0e:	3201      	addeq	r2, #1
     a10:	3b01      	subne	r3, #1
     a12:	e7b5      	b.n	980 <__addsf3+0x58>
     a14:	ea4f 0341 	mov.w	r3, r1, lsl #1
     a18:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     a1c:	bf18      	it	ne
     a1e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     a22:	d021      	beq.n	a68 <__addsf3+0x140>
     a24:	ea92 0f03 	teq	r2, r3
     a28:	d004      	beq.n	a34 <__addsf3+0x10c>
     a2a:	f092 0f00 	teq	r2, #0
     a2e:	bf08      	it	eq
     a30:	4608      	moveq	r0, r1
     a32:	4770      	bx	lr
     a34:	ea90 0f01 	teq	r0, r1
     a38:	bf1c      	itt	ne
     a3a:	2000      	movne	r0, #0
     a3c:	4770      	bxne	lr
     a3e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     a42:	d104      	bne.n	a4e <__addsf3+0x126>
     a44:	0040      	lsls	r0, r0, #1
     a46:	bf28      	it	cs
     a48:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     a4c:	4770      	bx	lr
     a4e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     a52:	bf3c      	itt	cc
     a54:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     a58:	4770      	bxcc	lr
     a5a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     a5e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     a62:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     a66:	4770      	bx	lr
     a68:	ea7f 6222 	mvns.w	r2, r2, asr #24
     a6c:	bf16      	itet	ne
     a6e:	4608      	movne	r0, r1
     a70:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     a74:	4601      	movne	r1, r0
     a76:	0242      	lsls	r2, r0, #9
     a78:	bf06      	itte	eq
     a7a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     a7e:	ea90 0f01 	teqeq	r0, r1
     a82:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     a86:	4770      	bx	lr

00000a88 <__aeabi_ui2f>:
     a88:	f04f 0300 	mov.w	r3, #0
     a8c:	e004      	b.n	a98 <__aeabi_i2f+0x8>
     a8e:	bf00      	nop

00000a90 <__aeabi_i2f>:
     a90:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     a94:	bf48      	it	mi
     a96:	4240      	negmi	r0, r0
     a98:	ea5f 0c00 	movs.w	ip, r0
     a9c:	bf08      	it	eq
     a9e:	4770      	bxeq	lr
     aa0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     aa4:	4601      	mov	r1, r0
     aa6:	f04f 0000 	mov.w	r0, #0
     aaa:	e01c      	b.n	ae6 <__aeabi_l2f+0x2a>

00000aac <__aeabi_ul2f>:
     aac:	ea50 0201 	orrs.w	r2, r0, r1
     ab0:	bf08      	it	eq
     ab2:	4770      	bxeq	lr
     ab4:	f04f 0300 	mov.w	r3, #0
     ab8:	e00a      	b.n	ad0 <__aeabi_l2f+0x14>
     aba:	bf00      	nop

00000abc <__aeabi_l2f>:
     abc:	ea50 0201 	orrs.w	r2, r0, r1
     ac0:	bf08      	it	eq
     ac2:	4770      	bxeq	lr
     ac4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     ac8:	d502      	bpl.n	ad0 <__aeabi_l2f+0x14>
     aca:	4240      	negs	r0, r0
     acc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     ad0:	ea5f 0c01 	movs.w	ip, r1
     ad4:	bf02      	ittt	eq
     ad6:	4684      	moveq	ip, r0
     ad8:	4601      	moveq	r1, r0
     ada:	2000      	moveq	r0, #0
     adc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     ae0:	bf08      	it	eq
     ae2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     ae6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     aea:	fabc f28c 	clz	r2, ip
     aee:	3a08      	subs	r2, #8
     af0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     af4:	db10      	blt.n	b18 <__aeabi_l2f+0x5c>
     af6:	fa01 fc02 	lsl.w	ip, r1, r2
     afa:	4463      	add	r3, ip
     afc:	fa00 fc02 	lsl.w	ip, r0, r2
     b00:	f1c2 0220 	rsb	r2, r2, #32
     b04:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     b08:	fa20 f202 	lsr.w	r2, r0, r2
     b0c:	eb43 0002 	adc.w	r0, r3, r2
     b10:	bf08      	it	eq
     b12:	f020 0001 	biceq.w	r0, r0, #1
     b16:	4770      	bx	lr
     b18:	f102 0220 	add.w	r2, r2, #32
     b1c:	fa01 fc02 	lsl.w	ip, r1, r2
     b20:	f1c2 0220 	rsb	r2, r2, #32
     b24:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     b28:	fa21 f202 	lsr.w	r2, r1, r2
     b2c:	eb43 0002 	adc.w	r0, r3, r2
     b30:	bf08      	it	eq
     b32:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     b36:	4770      	bx	lr

00000b38 <__aeabi_fmul>:
     b38:	f04f 0cff 	mov.w	ip, #255	; 0xff
     b3c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     b40:	bf1e      	ittt	ne
     b42:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     b46:	ea92 0f0c 	teqne	r2, ip
     b4a:	ea93 0f0c 	teqne	r3, ip
     b4e:	d06f      	beq.n	c30 <__aeabi_fmul+0xf8>
     b50:	441a      	add	r2, r3
     b52:	ea80 0c01 	eor.w	ip, r0, r1
     b56:	0240      	lsls	r0, r0, #9
     b58:	bf18      	it	ne
     b5a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
     b5e:	d01e      	beq.n	b9e <__aeabi_fmul+0x66>
     b60:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     b64:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
     b68:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
     b6c:	fba0 3101 	umull	r3, r1, r0, r1
     b70:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     b74:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
     b78:	bf3e      	ittt	cc
     b7a:	0049      	lslcc	r1, r1, #1
     b7c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
     b80:	005b      	lslcc	r3, r3, #1
     b82:	ea40 0001 	orr.w	r0, r0, r1
     b86:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
     b8a:	2afd      	cmp	r2, #253	; 0xfd
     b8c:	d81d      	bhi.n	bca <__aeabi_fmul+0x92>
     b8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     b92:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     b96:	bf08      	it	eq
     b98:	f020 0001 	biceq.w	r0, r0, #1
     b9c:	4770      	bx	lr
     b9e:	f090 0f00 	teq	r0, #0
     ba2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     ba6:	bf08      	it	eq
     ba8:	0249      	lsleq	r1, r1, #9
     baa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     bae:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
     bb2:	3a7f      	subs	r2, #127	; 0x7f
     bb4:	bfc2      	ittt	gt
     bb6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     bba:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     bbe:	4770      	bxgt	lr
     bc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     bc4:	f04f 0300 	mov.w	r3, #0
     bc8:	3a01      	subs	r2, #1
     bca:	dc5d      	bgt.n	c88 <__aeabi_fmul+0x150>
     bcc:	f112 0f19 	cmn.w	r2, #25
     bd0:	bfdc      	itt	le
     bd2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
     bd6:	4770      	bxle	lr
     bd8:	f1c2 0200 	rsb	r2, r2, #0
     bdc:	0041      	lsls	r1, r0, #1
     bde:	fa21 f102 	lsr.w	r1, r1, r2
     be2:	f1c2 0220 	rsb	r2, r2, #32
     be6:	fa00 fc02 	lsl.w	ip, r0, r2
     bea:	ea5f 0031 	movs.w	r0, r1, rrx
     bee:	f140 0000 	adc.w	r0, r0, #0
     bf2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
     bf6:	bf08      	it	eq
     bf8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     bfc:	4770      	bx	lr
     bfe:	f092 0f00 	teq	r2, #0
     c02:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     c06:	bf02      	ittt	eq
     c08:	0040      	lsleq	r0, r0, #1
     c0a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     c0e:	3a01      	subeq	r2, #1
     c10:	d0f9      	beq.n	c06 <__aeabi_fmul+0xce>
     c12:	ea40 000c 	orr.w	r0, r0, ip
     c16:	f093 0f00 	teq	r3, #0
     c1a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     c1e:	bf02      	ittt	eq
     c20:	0049      	lsleq	r1, r1, #1
     c22:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     c26:	3b01      	subeq	r3, #1
     c28:	d0f9      	beq.n	c1e <__aeabi_fmul+0xe6>
     c2a:	ea41 010c 	orr.w	r1, r1, ip
     c2e:	e78f      	b.n	b50 <__aeabi_fmul+0x18>
     c30:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     c34:	ea92 0f0c 	teq	r2, ip
     c38:	bf18      	it	ne
     c3a:	ea93 0f0c 	teqne	r3, ip
     c3e:	d00a      	beq.n	c56 <__aeabi_fmul+0x11e>
     c40:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     c44:	bf18      	it	ne
     c46:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     c4a:	d1d8      	bne.n	bfe <__aeabi_fmul+0xc6>
     c4c:	ea80 0001 	eor.w	r0, r0, r1
     c50:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     c54:	4770      	bx	lr
     c56:	f090 0f00 	teq	r0, #0
     c5a:	bf17      	itett	ne
     c5c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
     c60:	4608      	moveq	r0, r1
     c62:	f091 0f00 	teqne	r1, #0
     c66:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
     c6a:	d014      	beq.n	c96 <__aeabi_fmul+0x15e>
     c6c:	ea92 0f0c 	teq	r2, ip
     c70:	d101      	bne.n	c76 <__aeabi_fmul+0x13e>
     c72:	0242      	lsls	r2, r0, #9
     c74:	d10f      	bne.n	c96 <__aeabi_fmul+0x15e>
     c76:	ea93 0f0c 	teq	r3, ip
     c7a:	d103      	bne.n	c84 <__aeabi_fmul+0x14c>
     c7c:	024b      	lsls	r3, r1, #9
     c7e:	bf18      	it	ne
     c80:	4608      	movne	r0, r1
     c82:	d108      	bne.n	c96 <__aeabi_fmul+0x15e>
     c84:	ea80 0001 	eor.w	r0, r0, r1
     c88:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     c94:	4770      	bx	lr
     c96:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     c9a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
     c9e:	4770      	bx	lr

00000ca0 <__aeabi_fdiv>:
     ca0:	f04f 0cff 	mov.w	ip, #255	; 0xff
     ca4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     ca8:	bf1e      	ittt	ne
     caa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     cae:	ea92 0f0c 	teqne	r2, ip
     cb2:	ea93 0f0c 	teqne	r3, ip
     cb6:	d069      	beq.n	d8c <__aeabi_fdiv+0xec>
     cb8:	eba2 0203 	sub.w	r2, r2, r3
     cbc:	ea80 0c01 	eor.w	ip, r0, r1
     cc0:	0249      	lsls	r1, r1, #9
     cc2:	ea4f 2040 	mov.w	r0, r0, lsl #9
     cc6:	d037      	beq.n	d38 <__aeabi_fdiv+0x98>
     cc8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     ccc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
     cd0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
     cd4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     cd8:	428b      	cmp	r3, r1
     cda:	bf38      	it	cc
     cdc:	005b      	lslcc	r3, r3, #1
     cde:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
     ce2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
     ce6:	428b      	cmp	r3, r1
     ce8:	bf24      	itt	cs
     cea:	1a5b      	subcs	r3, r3, r1
     cec:	ea40 000c 	orrcs.w	r0, r0, ip
     cf0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
     cf4:	bf24      	itt	cs
     cf6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
     cfa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     cfe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
     d02:	bf24      	itt	cs
     d04:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
     d08:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     d0c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
     d10:	bf24      	itt	cs
     d12:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
     d16:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     d1a:	011b      	lsls	r3, r3, #4
     d1c:	bf18      	it	ne
     d1e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
     d22:	d1e0      	bne.n	ce6 <__aeabi_fdiv+0x46>
     d24:	2afd      	cmp	r2, #253	; 0xfd
     d26:	f63f af50 	bhi.w	bca <__aeabi_fmul+0x92>
     d2a:	428b      	cmp	r3, r1
     d2c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     d30:	bf08      	it	eq
     d32:	f020 0001 	biceq.w	r0, r0, #1
     d36:	4770      	bx	lr
     d38:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     d3c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     d40:	327f      	adds	r2, #127	; 0x7f
     d42:	bfc2      	ittt	gt
     d44:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     d48:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     d4c:	4770      	bxgt	lr
     d4e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     d52:	f04f 0300 	mov.w	r3, #0
     d56:	3a01      	subs	r2, #1
     d58:	e737      	b.n	bca <__aeabi_fmul+0x92>
     d5a:	f092 0f00 	teq	r2, #0
     d5e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     d62:	bf02      	ittt	eq
     d64:	0040      	lsleq	r0, r0, #1
     d66:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     d6a:	3a01      	subeq	r2, #1
     d6c:	d0f9      	beq.n	d62 <__aeabi_fdiv+0xc2>
     d6e:	ea40 000c 	orr.w	r0, r0, ip
     d72:	f093 0f00 	teq	r3, #0
     d76:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     d7a:	bf02      	ittt	eq
     d7c:	0049      	lsleq	r1, r1, #1
     d7e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     d82:	3b01      	subeq	r3, #1
     d84:	d0f9      	beq.n	d7a <__aeabi_fdiv+0xda>
     d86:	ea41 010c 	orr.w	r1, r1, ip
     d8a:	e795      	b.n	cb8 <__aeabi_fdiv+0x18>
     d8c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     d90:	ea92 0f0c 	teq	r2, ip
     d94:	d108      	bne.n	da8 <__aeabi_fdiv+0x108>
     d96:	0242      	lsls	r2, r0, #9
     d98:	f47f af7d 	bne.w	c96 <__aeabi_fmul+0x15e>
     d9c:	ea93 0f0c 	teq	r3, ip
     da0:	f47f af70 	bne.w	c84 <__aeabi_fmul+0x14c>
     da4:	4608      	mov	r0, r1
     da6:	e776      	b.n	c96 <__aeabi_fmul+0x15e>
     da8:	ea93 0f0c 	teq	r3, ip
     dac:	d104      	bne.n	db8 <__aeabi_fdiv+0x118>
     dae:	024b      	lsls	r3, r1, #9
     db0:	f43f af4c 	beq.w	c4c <__aeabi_fmul+0x114>
     db4:	4608      	mov	r0, r1
     db6:	e76e      	b.n	c96 <__aeabi_fmul+0x15e>
     db8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     dbc:	bf18      	it	ne
     dbe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     dc2:	d1ca      	bne.n	d5a <__aeabi_fdiv+0xba>
     dc4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
     dc8:	f47f af5c 	bne.w	c84 <__aeabi_fmul+0x14c>
     dcc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
     dd0:	f47f af3c 	bne.w	c4c <__aeabi_fmul+0x114>
     dd4:	e75f      	b.n	c96 <__aeabi_fmul+0x15e>
     dd6:	bf00      	nop

00000dd8 <__gesf2>:
     dd8:	f04f 3cff 	mov.w	ip, #4294967295
     ddc:	e006      	b.n	dec <__cmpsf2+0x4>
     dde:	bf00      	nop

00000de0 <__lesf2>:
     de0:	f04f 0c01 	mov.w	ip, #1
     de4:	e002      	b.n	dec <__cmpsf2+0x4>
     de6:	bf00      	nop

00000de8 <__cmpsf2>:
     de8:	f04f 0c01 	mov.w	ip, #1
     dec:	f84d cd04 	str.w	ip, [sp, #-4]!
     df0:	ea4f 0240 	mov.w	r2, r0, lsl #1
     df4:	ea4f 0341 	mov.w	r3, r1, lsl #1
     df8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     dfc:	bf18      	it	ne
     dfe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     e02:	d011      	beq.n	e28 <__cmpsf2+0x40>
     e04:	b001      	add	sp, #4
     e06:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
     e0a:	bf18      	it	ne
     e0c:	ea90 0f01 	teqne	r0, r1
     e10:	bf58      	it	pl
     e12:	ebb2 0003 	subspl.w	r0, r2, r3
     e16:	bf88      	it	hi
     e18:	17c8      	asrhi	r0, r1, #31
     e1a:	bf38      	it	cc
     e1c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
     e20:	bf18      	it	ne
     e22:	f040 0001 	orrne.w	r0, r0, #1
     e26:	4770      	bx	lr
     e28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     e2c:	d102      	bne.n	e34 <__cmpsf2+0x4c>
     e2e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
     e32:	d105      	bne.n	e40 <__cmpsf2+0x58>
     e34:	ea7f 6c23 	mvns.w	ip, r3, asr #24
     e38:	d1e4      	bne.n	e04 <__cmpsf2+0x1c>
     e3a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
     e3e:	d0e1      	beq.n	e04 <__cmpsf2+0x1c>
     e40:	f85d 0b04 	ldr.w	r0, [sp], #4
     e44:	4770      	bx	lr
     e46:	bf00      	nop

00000e48 <__aeabi_cfrcmple>:
     e48:	4684      	mov	ip, r0
     e4a:	4608      	mov	r0, r1
     e4c:	4661      	mov	r1, ip
     e4e:	e7ff      	b.n	e50 <__aeabi_cfcmpeq>

00000e50 <__aeabi_cfcmpeq>:
     e50:	b50f      	push	{r0, r1, r2, r3, lr}
     e52:	f7ff ffc9 	bl	de8 <__cmpsf2>
     e56:	2800      	cmp	r0, #0
     e58:	bf48      	it	mi
     e5a:	f110 0f00 	cmnmi.w	r0, #0
     e5e:	bd0f      	pop	{r0, r1, r2, r3, pc}

00000e60 <__aeabi_fcmpeq>:
     e60:	f84d ed08 	str.w	lr, [sp, #-8]!
     e64:	f7ff fff4 	bl	e50 <__aeabi_cfcmpeq>
     e68:	bf0c      	ite	eq
     e6a:	2001      	moveq	r0, #1
     e6c:	2000      	movne	r0, #0
     e6e:	f85d fb08 	ldr.w	pc, [sp], #8
     e72:	bf00      	nop

00000e74 <__aeabi_fcmplt>:
     e74:	f84d ed08 	str.w	lr, [sp, #-8]!
     e78:	f7ff ffea 	bl	e50 <__aeabi_cfcmpeq>
     e7c:	bf34      	ite	cc
     e7e:	2001      	movcc	r0, #1
     e80:	2000      	movcs	r0, #0
     e82:	f85d fb08 	ldr.w	pc, [sp], #8
     e86:	bf00      	nop

00000e88 <__aeabi_fcmple>:
     e88:	f84d ed08 	str.w	lr, [sp, #-8]!
     e8c:	f7ff ffe0 	bl	e50 <__aeabi_cfcmpeq>
     e90:	bf94      	ite	ls
     e92:	2001      	movls	r0, #1
     e94:	2000      	movhi	r0, #0
     e96:	f85d fb08 	ldr.w	pc, [sp], #8
     e9a:	bf00      	nop

00000e9c <__aeabi_fcmpge>:
     e9c:	f84d ed08 	str.w	lr, [sp, #-8]!
     ea0:	f7ff ffd2 	bl	e48 <__aeabi_cfrcmple>
     ea4:	bf94      	ite	ls
     ea6:	2001      	movls	r0, #1
     ea8:	2000      	movhi	r0, #0
     eaa:	f85d fb08 	ldr.w	pc, [sp], #8
     eae:	bf00      	nop

00000eb0 <__aeabi_fcmpgt>:
     eb0:	f84d ed08 	str.w	lr, [sp, #-8]!
     eb4:	f7ff ffc8 	bl	e48 <__aeabi_cfrcmple>
     eb8:	bf34      	ite	cc
     eba:	2001      	movcc	r0, #1
     ebc:	2000      	movcs	r0, #0
     ebe:	f85d fb08 	ldr.w	pc, [sp], #8
     ec2:	bf00      	nop

00000ec4 <__aeabi_f2iz>:
     ec4:	ea4f 0240 	mov.w	r2, r0, lsl #1
     ec8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
     ecc:	d30f      	bcc.n	eee <__aeabi_f2iz+0x2a>
     ece:	f04f 039e 	mov.w	r3, #158	; 0x9e
     ed2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
     ed6:	d90d      	bls.n	ef4 <__aeabi_f2iz+0x30>
     ed8:	ea4f 2300 	mov.w	r3, r0, lsl #8
     edc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     ee0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     ee4:	fa23 f002 	lsr.w	r0, r3, r2
     ee8:	bf18      	it	ne
     eea:	4240      	negne	r0, r0
     eec:	4770      	bx	lr
     eee:	f04f 0000 	mov.w	r0, #0
     ef2:	4770      	bx	lr
     ef4:	f112 0f61 	cmn.w	r2, #97	; 0x61
     ef8:	d101      	bne.n	efe <__aeabi_f2iz+0x3a>
     efa:	0242      	lsls	r2, r0, #9
     efc:	d105      	bne.n	f0a <__aeabi_f2iz+0x46>
     efe:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
     f02:	bf08      	it	eq
     f04:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     f08:	4770      	bx	lr
     f0a:	f04f 0000 	mov.w	r0, #0
     f0e:	4770      	bx	lr

00000f10 <__aeabi_f2uiz>:
     f10:	0042      	lsls	r2, r0, #1
     f12:	d20e      	bcs.n	f32 <__aeabi_f2uiz+0x22>
     f14:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
     f18:	d30b      	bcc.n	f32 <__aeabi_f2uiz+0x22>
     f1a:	f04f 039e 	mov.w	r3, #158	; 0x9e
     f1e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
     f22:	d409      	bmi.n	f38 <__aeabi_f2uiz+0x28>
     f24:	ea4f 2300 	mov.w	r3, r0, lsl #8
     f28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     f2c:	fa23 f002 	lsr.w	r0, r3, r2
     f30:	4770      	bx	lr
     f32:	f04f 0000 	mov.w	r0, #0
     f36:	4770      	bx	lr
     f38:	f112 0f61 	cmn.w	r2, #97	; 0x61
     f3c:	d101      	bne.n	f42 <__aeabi_f2uiz+0x32>
     f3e:	0242      	lsls	r2, r0, #9
     f40:	d102      	bne.n	f48 <__aeabi_f2uiz+0x38>
     f42:	f04f 30ff 	mov.w	r0, #4294967295
     f46:	4770      	bx	lr
     f48:	f04f 0000 	mov.w	r0, #0
     f4c:	4770      	bx	lr
     f4e:	bf00      	nop

00000f50 <__aeabi_uldivmod>:
     f50:	b953      	cbnz	r3, f68 <__aeabi_uldivmod+0x18>
     f52:	b94a      	cbnz	r2, f68 <__aeabi_uldivmod+0x18>
     f54:	2900      	cmp	r1, #0
     f56:	bf08      	it	eq
     f58:	2800      	cmpeq	r0, #0
     f5a:	bf1c      	itt	ne
     f5c:	f04f 31ff 	movne.w	r1, #4294967295
     f60:	f04f 30ff 	movne.w	r0, #4294967295
     f64:	f000 b80c 	b.w	f80 <__aeabi_idiv0>
     f68:	f1ad 0c08 	sub.w	ip, sp, #8
     f6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     f70:	f00b fdd2 	bl	cb18 <__udivmoddi4>
     f74:	f8dd e004 	ldr.w	lr, [sp, #4]
     f78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     f7c:	b004      	add	sp, #16
     f7e:	4770      	bx	lr

00000f80 <__aeabi_idiv0>:
     f80:	4770      	bx	lr
     f82:	bf00      	nop

00000f84 <__gedf2>:
     f84:	f04f 3cff 	mov.w	ip, #4294967295
     f88:	e006      	b.n	f98 <__cmpdf2+0x4>
     f8a:	bf00      	nop

00000f8c <__ledf2>:
     f8c:	f04f 0c01 	mov.w	ip, #1
     f90:	e002      	b.n	f98 <__cmpdf2+0x4>
     f92:	bf00      	nop

00000f94 <__cmpdf2>:
     f94:	f04f 0c01 	mov.w	ip, #1
     f98:	f84d cd04 	str.w	ip, [sp, #-4]!
     f9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     fa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     fa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     fa8:	bf18      	it	ne
     faa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     fae:	d01b      	beq.n	fe8 <__cmpdf2+0x54>
     fb0:	b001      	add	sp, #4
     fb2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     fb6:	bf0c      	ite	eq
     fb8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     fbc:	ea91 0f03 	teqne	r1, r3
     fc0:	bf02      	ittt	eq
     fc2:	ea90 0f02 	teqeq	r0, r2
     fc6:	2000      	moveq	r0, #0
     fc8:	4770      	bxeq	lr
     fca:	f110 0f00 	cmn.w	r0, #0
     fce:	ea91 0f03 	teq	r1, r3
     fd2:	bf58      	it	pl
     fd4:	4299      	cmppl	r1, r3
     fd6:	bf08      	it	eq
     fd8:	4290      	cmpeq	r0, r2
     fda:	bf2c      	ite	cs
     fdc:	17d8      	asrcs	r0, r3, #31
     fde:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     fe2:	f040 0001 	orr.w	r0, r0, #1
     fe6:	4770      	bx	lr
     fe8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     fec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     ff0:	d102      	bne.n	ff8 <__cmpdf2+0x64>
     ff2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     ff6:	d107      	bne.n	1008 <CONFIG_FPROTECT_BLOCK_SIZE+0x8>
     ff8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     ffc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    1000:	d1d6      	bne.n	fb0 <__cmpdf2+0x1c>
    1002:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    1006:	d0d3      	beq.n	fb0 <__cmpdf2+0x1c>
    1008:	f85d 0b04 	ldr.w	r0, [sp], #4
    100c:	4770      	bx	lr
    100e:	bf00      	nop

00001010 <__aeabi_cdrcmple>:
    1010:	4684      	mov	ip, r0
    1012:	4610      	mov	r0, r2
    1014:	4662      	mov	r2, ip
    1016:	468c      	mov	ip, r1
    1018:	4619      	mov	r1, r3
    101a:	4663      	mov	r3, ip
    101c:	e000      	b.n	1020 <__aeabi_cdcmpeq>
    101e:	bf00      	nop

00001020 <__aeabi_cdcmpeq>:
    1020:	b501      	push	{r0, lr}
    1022:	f7ff ffb7 	bl	f94 <__cmpdf2>
    1026:	2800      	cmp	r0, #0
    1028:	bf48      	it	mi
    102a:	f110 0f00 	cmnmi.w	r0, #0
    102e:	bd01      	pop	{r0, pc}

00001030 <__aeabi_dcmpeq>:
    1030:	f84d ed08 	str.w	lr, [sp, #-8]!
    1034:	f7ff fff4 	bl	1020 <__aeabi_cdcmpeq>
    1038:	bf0c      	ite	eq
    103a:	2001      	moveq	r0, #1
    103c:	2000      	movne	r0, #0
    103e:	f85d fb08 	ldr.w	pc, [sp], #8
    1042:	bf00      	nop

00001044 <__aeabi_dcmplt>:
    1044:	f84d ed08 	str.w	lr, [sp, #-8]!
    1048:	f7ff ffea 	bl	1020 <__aeabi_cdcmpeq>
    104c:	bf34      	ite	cc
    104e:	2001      	movcc	r0, #1
    1050:	2000      	movcs	r0, #0
    1052:	f85d fb08 	ldr.w	pc, [sp], #8
    1056:	bf00      	nop

00001058 <__aeabi_dcmple>:
    1058:	f84d ed08 	str.w	lr, [sp, #-8]!
    105c:	f7ff ffe0 	bl	1020 <__aeabi_cdcmpeq>
    1060:	bf94      	ite	ls
    1062:	2001      	movls	r0, #1
    1064:	2000      	movhi	r0, #0
    1066:	f85d fb08 	ldr.w	pc, [sp], #8
    106a:	bf00      	nop

0000106c <__aeabi_dcmpge>:
    106c:	f84d ed08 	str.w	lr, [sp, #-8]!
    1070:	f7ff ffce 	bl	1010 <__aeabi_cdrcmple>
    1074:	bf94      	ite	ls
    1076:	2001      	movls	r0, #1
    1078:	2000      	movhi	r0, #0
    107a:	f85d fb08 	ldr.w	pc, [sp], #8
    107e:	bf00      	nop

00001080 <__aeabi_dcmpgt>:
    1080:	f84d ed08 	str.w	lr, [sp, #-8]!
    1084:	f7ff ffc4 	bl	1010 <__aeabi_cdrcmple>
    1088:	bf34      	ite	cc
    108a:	2001      	movcc	r0, #1
    108c:	2000      	movcs	r0, #0
    108e:	f85d fb08 	ldr.w	pc, [sp], #8
    1092:	bf00      	nop

00001094 <ocrypto_bigint_add256>:
    1094:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    1098:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    109c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    10a0:	185b      	adds	r3, r3, r1
    10a2:	eb54 040c 	adcs.w	r4, r4, ip
    10a6:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    10aa:	414d      	adcs	r5, r1
    10ac:	eb56 060c 	adcs.w	r6, r6, ip
    10b0:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    10b4:	414f      	adcs	r7, r1
    10b6:	eb58 080c 	adcs.w	r8, r8, ip
    10ba:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    10be:	eb59 0901 	adcs.w	r9, r9, r1
    10c2:	eb5a 0a0c 	adcs.w	sl, sl, ip
    10c6:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    10ca:	4180      	sbcs	r0, r0
    10cc:	3001      	adds	r0, #1
    10ce:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    10d2:	4770      	bx	lr

000010d4 <ocrypto_bigint_sub256>:
    10d4:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    10d8:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    10dc:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    10e0:	1a5b      	subs	r3, r3, r1
    10e2:	eb74 040c 	sbcs.w	r4, r4, ip
    10e6:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    10ea:	418d      	sbcs	r5, r1
    10ec:	eb76 060c 	sbcs.w	r6, r6, ip
    10f0:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    10f4:	418f      	sbcs	r7, r1
    10f6:	eb78 080c 	sbcs.w	r8, r8, ip
    10fa:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    10fe:	eb79 0901 	sbcs.w	r9, r9, r1
    1102:	eb7a 0a0c 	sbcs.w	sl, sl, ip
    1106:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    110a:	4180      	sbcs	r0, r0
    110c:	4240      	negs	r0, r0
    110e:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    1112:	4770      	bx	lr

00001114 <ocrypto_bigint_cadd256>:
    1114:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    1118:	4252      	negs	r2, r2
    111a:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
    111e:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
    1122:	4017      	ands	r7, r2
    1124:	19db      	adds	r3, r3, r7
    1126:	ea18 0802 	ands.w	r8, r8, r2
    112a:	eb54 0408 	adcs.w	r4, r4, r8
    112e:	ea19 0902 	ands.w	r9, r9, r2
    1132:	eb55 0509 	adcs.w	r5, r5, r9
    1136:	ea1a 0a02 	ands.w	sl, sl, r2
    113a:	eb56 060a 	adcs.w	r6, r6, sl
    113e:	c078      	stmia	r0!, {r3, r4, r5, r6}
    1140:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
    1144:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
    1148:	4017      	ands	r7, r2
    114a:	417b      	adcs	r3, r7
    114c:	ea18 0802 	ands.w	r8, r8, r2
    1150:	eb54 0408 	adcs.w	r4, r4, r8
    1154:	ea19 0902 	ands.w	r9, r9, r2
    1158:	eb55 0509 	adcs.w	r5, r5, r9
    115c:	ea1a 0a02 	ands.w	sl, sl, r2
    1160:	eb56 060a 	adcs.w	r6, r6, sl
    1164:	c078      	stmia	r0!, {r3, r4, r5, r6}
    1166:	4180      	sbcs	r0, r0
    1168:	3001      	adds	r0, #1
    116a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    116e:	4770      	bx	lr

00001170 <ocrypto_bigint_csub256>:
    1170:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    1174:	4252      	negs	r2, r2
    1176:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
    117a:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
    117e:	4017      	ands	r7, r2
    1180:	1bdb      	subs	r3, r3, r7
    1182:	ea18 0802 	ands.w	r8, r8, r2
    1186:	eb74 0408 	sbcs.w	r4, r4, r8
    118a:	ea19 0902 	ands.w	r9, r9, r2
    118e:	eb75 0509 	sbcs.w	r5, r5, r9
    1192:	ea1a 0a02 	ands.w	sl, sl, r2
    1196:	eb76 060a 	sbcs.w	r6, r6, sl
    119a:	c078      	stmia	r0!, {r3, r4, r5, r6}
    119c:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
    11a0:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
    11a4:	4017      	ands	r7, r2
    11a6:	41bb      	sbcs	r3, r7
    11a8:	ea18 0802 	ands.w	r8, r8, r2
    11ac:	eb74 0408 	sbcs.w	r4, r4, r8
    11b0:	ea19 0902 	ands.w	r9, r9, r2
    11b4:	eb75 0509 	sbcs.w	r5, r5, r9
    11b8:	ea1a 0a02 	ands.w	sl, sl, r2
    11bc:	eb76 060a 	sbcs.w	r6, r6, sl
    11c0:	c078      	stmia	r0!, {r3, r4, r5, r6}
    11c2:	4180      	sbcs	r0, r0
    11c4:	4240      	negs	r0, r0
    11c6:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    11ca:	4770      	bx	lr

000011cc <ocrypto_bigint_cswap256>:
    11cc:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
    11d0:	4252      	negs	r2, r2
    11d2:	f04f 0804 	mov.w	r8, #4

000011d6 <cswap256_loop>:
    11d6:	e890 0030 	ldmia.w	r0, {r4, r5}
    11da:	e891 00c0 	ldmia.w	r1, {r6, r7}
    11de:	1ba3      	subs	r3, r4, r6
    11e0:	4013      	ands	r3, r2
    11e2:	1ae4      	subs	r4, r4, r3
    11e4:	18f6      	adds	r6, r6, r3
    11e6:	1beb      	subs	r3, r5, r7
    11e8:	4013      	ands	r3, r2
    11ea:	1aed      	subs	r5, r5, r3
    11ec:	18ff      	adds	r7, r7, r3
    11ee:	c030      	stmia	r0!, {r4, r5}
    11f0:	c1c0      	stmia	r1!, {r6, r7}
    11f2:	f1b8 0801 	subs.w	r8, r8, #1
    11f6:	d1ee      	bne.n	11d6 <cswap256_loop>
    11f8:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
    11fc:	4770      	bx	lr
    11fe:	bf00      	nop

00001200 <ocrypto_mul256_noframe>:
    1200:	b500      	push	{lr}
    1202:	e892 07dc 	ldmia.w	r2, {r2, r3, r4, r6, r7, r8, r9, sl}
    1206:	e92d 07dc 	stmdb	sp!, {r2, r3, r4, r6, r7, r8, r9, sl}
    120a:	e8b1 5780 	ldmia.w	r1!, {r7, r8, r9, sl, ip, lr}
    120e:	b402      	push	{r1}
    1210:	fba7 5102 	umull	r5, r1, r7, r2
    1214:	950a      	str	r5, [sp, #40]	; 0x28
    1216:	fba8 0b02 	umull	r0, fp, r8, r2
    121a:	fbe7 1063 	umaal	r1, r0, r7, r3
    121e:	fbe9 b062 	umaal	fp, r0, r9, r2
    1222:	910b      	str	r1, [sp, #44]	; 0x2c
    1224:	fba8 5103 	umull	r5, r1, r8, r3
    1228:	fbea 0162 	umaal	r0, r1, sl, r2
    122c:	fbe7 b564 	umaal	fp, r5, r7, r4
    1230:	fbe7 0566 	umaal	r0, r5, r7, r6
    1234:	fbe8 1566 	umaal	r1, r5, r8, r6
    1238:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
    123c:	fba9 b603 	umull	fp, r6, r9, r3
    1240:	fbea 1663 	umaal	r1, r6, sl, r3
    1244:	fbec 5663 	umaal	r5, r6, ip, r3
    1248:	fbe8 0b64 	umaal	r0, fp, r8, r4
    124c:	fbe9 1b64 	umaal	r1, fp, r9, r4
    1250:	fbea 5b64 	umaal	r5, fp, sl, r4
    1254:	fbec 6b64 	umaal	r6, fp, ip, r4
    1258:	900d      	str	r0, [sp, #52]	; 0x34
    125a:	fbac 3002 	umull	r3, r0, ip, r2
    125e:	9c05      	ldr	r4, [sp, #20]
    1260:	fbee 5062 	umaal	r5, r0, lr, r2
    1264:	fbe9 6064 	umaal	r6, r0, r9, r4
    1268:	fbea b064 	umaal	fp, r0, sl, r4
    126c:	fbe7 3164 	umaal	r3, r1, r7, r4
    1270:	fbe8 5164 	umaal	r5, r1, r8, r4
    1274:	9c06      	ldr	r4, [sp, #24]
    1276:	fbe8 6164 	umaal	r6, r1, r8, r4
    127a:	fbe9 b164 	umaal	fp, r1, r9, r4
    127e:	fbea 0164 	umaal	r0, r1, sl, r4
    1282:	930e      	str	r3, [sp, #56]	; 0x38
    1284:	fba7 3204 	umull	r3, r2, r7, r4
    1288:	9c07      	ldr	r4, [sp, #28]
    128a:	fbe7 6264 	umaal	r6, r2, r7, r4
    128e:	fbe8 b264 	umaal	fp, r2, r8, r4
    1292:	fbe9 0264 	umaal	r0, r2, r9, r4
    1296:	fbea 1264 	umaal	r1, r2, sl, r4
    129a:	9c04      	ldr	r4, [sp, #16]
    129c:	fbe9 5364 	umaal	r5, r3, r9, r4
    12a0:	fbea 6364 	umaal	r6, r3, sl, r4
    12a4:	9c08      	ldr	r4, [sp, #32]
    12a6:	fbe7 b364 	umaal	fp, r3, r7, r4
    12aa:	fbe8 0364 	umaal	r0, r3, r8, r4
    12ae:	fbe9 1364 	umaal	r1, r3, r9, r4
    12b2:	fbea 2364 	umaal	r2, r3, sl, r4
    12b6:	950f      	str	r5, [sp, #60]	; 0x3c
    12b8:	f85d 9b04 	ldr.w	r9, [sp], #4
    12bc:	e899 0600 	ldmia.w	r9, {r9, sl}
    12c0:	f8dd 8000 	ldr.w	r8, [sp]
    12c4:	fba9 5408 	umull	r5, r4, r9, r8
    12c8:	fbea b468 	umaal	fp, r4, sl, r8
    12cc:	f8dd 8010 	ldr.w	r8, [sp, #16]
    12d0:	fbec 0468 	umaal	r0, r4, ip, r8
    12d4:	fbee 1468 	umaal	r1, r4, lr, r8
    12d8:	fbe9 2468 	umaal	r2, r4, r9, r8
    12dc:	fbea 3468 	umaal	r3, r4, sl, r8
    12e0:	f8dd 8004 	ldr.w	r8, [sp, #4]
    12e4:	fbee 6568 	umaal	r6, r5, lr, r8
    12e8:	fbe9 b568 	umaal	fp, r5, r9, r8
    12ec:	fbea 0568 	umaal	r0, r5, sl, r8
    12f0:	f8dd 8014 	ldr.w	r8, [sp, #20]
    12f4:	fbec 1568 	umaal	r1, r5, ip, r8
    12f8:	fbee 2568 	umaal	r2, r5, lr, r8
    12fc:	fbe9 3568 	umaal	r3, r5, r9, r8
    1300:	fbea 4568 	umaal	r4, r5, sl, r8
    1304:	960f      	str	r6, [sp, #60]	; 0x3c
    1306:	f8dd 8008 	ldr.w	r8, [sp, #8]
    130a:	fbae 7608 	umull	r7, r6, lr, r8
    130e:	fbe9 0668 	umaal	r0, r6, r9, r8
    1312:	fbea 1668 	umaal	r1, r6, sl, r8
    1316:	f8dd 8018 	ldr.w	r8, [sp, #24]
    131a:	fbec 2668 	umaal	r2, r6, ip, r8
    131e:	fbee 3668 	umaal	r3, r6, lr, r8
    1322:	fbe9 4668 	umaal	r4, r6, r9, r8
    1326:	fbea 5668 	umaal	r5, r6, sl, r8
    132a:	f8dd 800c 	ldr.w	r8, [sp, #12]
    132e:	fbec b768 	umaal	fp, r7, ip, r8
    1332:	fbee 0768 	umaal	r0, r7, lr, r8
    1336:	fbe9 1768 	umaal	r1, r7, r9, r8
    133a:	fbea 2768 	umaal	r2, r7, sl, r8
    133e:	f8dd 801c 	ldr.w	r8, [sp, #28]
    1342:	fbec 3768 	umaal	r3, r7, ip, r8
    1346:	fbee 4768 	umaal	r4, r7, lr, r8
    134a:	fbe9 5768 	umaal	r5, r7, r9, r8
    134e:	fbea 6768 	umaal	r6, r7, sl, r8
    1352:	b008      	add	sp, #32
    1354:	bd00      	pop	{pc}
    1356:	bf00      	nop

00001358 <ocrypto_bigint_mul256>:
    1358:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    135c:	b087      	sub	sp, #28
    135e:	f7ff ff4f 	bl	1200 <ocrypto_mul256_noframe>
    1362:	f8dd 801c 	ldr.w	r8, [sp, #28]
    1366:	f108 0820 	add.w	r8, r8, #32
    136a:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
    136e:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
    1370:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
    1374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00001378 <ocrypto_sqr256_noframe>:
    1378:	b500      	push	{lr}
    137a:	e891 5798 	ldmia.w	r1, {r3, r4, r7, r8, r9, sl, ip, lr}
    137e:	fba3 5203 	umull	r5, r2, r3, r3
    1382:	9501      	str	r5, [sp, #4]
    1384:	fba3 0104 	umull	r0, r1, r3, r4
    1388:	fbe3 2064 	umaal	r2, r0, r3, r4
    138c:	fbe3 1067 	umaal	r1, r0, r3, r7
    1390:	9202      	str	r2, [sp, #8]
    1392:	fba3 5207 	umull	r5, r2, r3, r7
    1396:	fbe3 0268 	umaal	r0, r2, r3, r8
    139a:	fbe4 1564 	umaal	r1, r5, r4, r4
    139e:	fbe3 0568 	umaal	r0, r5, r3, r8
    13a2:	fbe3 2569 	umaal	r2, r5, r3, r9
    13a6:	9103      	str	r1, [sp, #12]
    13a8:	fba4 b607 	umull	fp, r6, r4, r7
    13ac:	fbe3 2669 	umaal	r2, r6, r3, r9
    13b0:	fbe3 566a 	umaal	r5, r6, r3, sl
    13b4:	fbe4 0b67 	umaal	r0, fp, r4, r7
    13b8:	fbe4 2b68 	umaal	r2, fp, r4, r8
    13bc:	fbe3 5b6a 	umaal	r5, fp, r3, sl
    13c0:	fbe3 6b6c 	umaal	r6, fp, r3, ip
    13c4:	9004      	str	r0, [sp, #16]
    13c6:	fba4 1008 	umull	r1, r0, r4, r8
    13ca:	fbe4 5069 	umaal	r5, r0, r4, r9
    13ce:	fbe3 606c 	umaal	r6, r0, r3, ip
    13d2:	fbe3 b06e 	umaal	fp, r0, r3, lr
    13d6:	fbe7 2167 	umaal	r2, r1, r7, r7
    13da:	fbe4 5169 	umaal	r5, r1, r4, r9
    13de:	fbe4 616a 	umaal	r6, r1, r4, sl
    13e2:	fbe3 b16e 	umaal	fp, r1, r3, lr
    13e6:	fbe4 016e 	umaal	r0, r1, r4, lr
    13ea:	9205      	str	r2, [sp, #20]
    13ec:	fba7 3208 	umull	r3, r2, r7, r8
    13f0:	fbe4 626a 	umaal	r6, r2, r4, sl
    13f4:	fbe4 b26c 	umaal	fp, r2, r4, ip
    13f8:	fbe4 026e 	umaal	r0, r2, r4, lr
    13fc:	fbe7 126e 	umaal	r1, r2, r7, lr
    1400:	fbe7 5368 	umaal	r5, r3, r7, r8
    1404:	fbe7 6369 	umaal	r6, r3, r7, r9
    1408:	fbe4 b36c 	umaal	fp, r3, r4, ip
    140c:	fbe7 036c 	umaal	r0, r3, r7, ip
    1410:	fbe7 136e 	umaal	r1, r3, r7, lr
    1414:	fbe8 236e 	umaal	r2, r3, r8, lr
    1418:	9506      	str	r5, [sp, #24]
    141a:	fba7 5409 	umull	r5, r4, r7, r9
    141e:	fbe7 b46a 	umaal	fp, r4, r7, sl
    1422:	fbe7 046c 	umaal	r0, r4, r7, ip
    1426:	fbe8 146c 	umaal	r1, r4, r8, ip
    142a:	fbe8 246e 	umaal	r2, r4, r8, lr
    142e:	fbe9 346e 	umaal	r3, r4, r9, lr
    1432:	fbe8 6568 	umaal	r6, r5, r8, r8
    1436:	fbe7 b56a 	umaal	fp, r5, r7, sl
    143a:	fbe8 056a 	umaal	r0, r5, r8, sl
    143e:	fbe8 156c 	umaal	r1, r5, r8, ip
    1442:	fbe9 256c 	umaal	r2, r5, r9, ip
    1446:	fbe9 356e 	umaal	r3, r5, r9, lr
    144a:	fbea 456e 	umaal	r4, r5, sl, lr
    144e:	9607      	str	r6, [sp, #28]
    1450:	fba8 7609 	umull	r7, r6, r8, r9
    1454:	fbe8 066a 	umaal	r0, r6, r8, sl
    1458:	fbe9 166a 	umaal	r1, r6, r9, sl
    145c:	fbe9 266c 	umaal	r2, r6, r9, ip
    1460:	fbea 366c 	umaal	r3, r6, sl, ip
    1464:	fbea 466e 	umaal	r4, r6, sl, lr
    1468:	fbec 566e 	umaal	r5, r6, ip, lr
    146c:	fbe8 b769 	umaal	fp, r7, r8, r9
    1470:	fbe9 0769 	umaal	r0, r7, r9, r9
    1474:	fbe9 176a 	umaal	r1, r7, r9, sl
    1478:	fbea 276a 	umaal	r2, r7, sl, sl
    147c:	fbea 376c 	umaal	r3, r7, sl, ip
    1480:	fbec 476c 	umaal	r4, r7, ip, ip
    1484:	fbec 576e 	umaal	r5, r7, ip, lr
    1488:	fbee 676e 	umaal	r6, r7, lr, lr
    148c:	bd00      	pop	{pc}
    148e:	bf00      	nop

00001490 <ocrypto_bigint_sqr256>:
    1490:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1494:	b087      	sub	sp, #28
    1496:	f7ff ff6f 	bl	1378 <ocrypto_sqr256_noframe>
    149a:	f8dd 801c 	ldr.w	r8, [sp, #28]
    149e:	f108 0820 	add.w	r8, r8, #32
    14a2:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
    14a6:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
    14a8:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
    14ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000014b0 <ocrypto_constant_time_equal>:
    14b0:	b430      	push	{r4, r5}
    14b2:	f04f 0300 	mov.w	r3, #0

000014b6 <constant_time_equal_loop>:
    14b6:	f810 4b01 	ldrb.w	r4, [r0], #1
    14ba:	f811 5b01 	ldrb.w	r5, [r1], #1
    14be:	3a01      	subs	r2, #1
    14c0:	ea84 0405 	eor.w	r4, r4, r5
    14c4:	ea43 0304 	orr.w	r3, r3, r4
    14c8:	d1f5      	bne.n	14b6 <constant_time_equal_loop>
    14ca:	f1a3 0301 	sub.w	r3, r3, #1
    14ce:	ea4f 70d3 	mov.w	r0, r3, lsr #31
    14d2:	bc30      	pop	{r4, r5}
    14d4:	4770      	bx	lr
    14d6:	bf00      	nop

000014d8 <ocrypto_constant_time_is_zero>:
    14d8:	f04f 0300 	mov.w	r3, #0

000014dc <constant_time_is_zero_loop>:
    14dc:	f810 2b01 	ldrb.w	r2, [r0], #1
    14e0:	3901      	subs	r1, #1
    14e2:	ea43 0302 	orr.w	r3, r3, r2
    14e6:	d1f9      	bne.n	14dc <constant_time_is_zero_loop>
    14e8:	f1a3 0301 	sub.w	r3, r3, #1
    14ec:	ea4f 70d3 	mov.w	r0, r3, lsr #31
    14f0:	4770      	bx	lr
    14f2:	bf00      	nop

000014f4 <ocrypto_constant_time_xor>:
    14f4:	b430      	push	{r4, r5}

000014f6 <constant_time_xor_loop>:
    14f6:	f811 4b01 	ldrb.w	r4, [r1], #1
    14fa:	f812 5b01 	ldrb.w	r5, [r2], #1
    14fe:	406c      	eors	r4, r5
    1500:	f800 4b01 	strb.w	r4, [r0], #1
    1504:	3b01      	subs	r3, #1
    1506:	d1f6      	bne.n	14f6 <constant_time_xor_loop>
    1508:	bc30      	pop	{r4, r5}
    150a:	4770      	bx	lr

0000150c <ocrypto_mod_p256_add>:
    150c:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    1510:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    1514:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    1518:	185b      	adds	r3, r3, r1
    151a:	eb54 040c 	adcs.w	r4, r4, ip
    151e:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    1522:	414d      	adcs	r5, r1
    1524:	eb56 060c 	adcs.w	r6, r6, ip
    1528:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    152c:	414f      	adcs	r7, r1
    152e:	eb58 080c 	adcs.w	r8, r8, ip
    1532:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    1536:	eb59 0901 	adcs.w	r9, r9, r1
    153a:	eb5a 0a0c 	adcs.w	sl, sl, ip
    153e:	4189      	sbcs	r1, r1
    1540:	f1b3 33ff 	subs.w	r3, r3, #4294967295
    1544:	f174 34ff 	sbcs.w	r4, r4, #4294967295
    1548:	f175 35ff 	sbcs.w	r5, r5, #4294967295
    154c:	f176 0600 	sbcs.w	r6, r6, #0
    1550:	f177 0700 	sbcs.w	r7, r7, #0
    1554:	f178 0800 	sbcs.w	r8, r8, #0
    1558:	f179 0901 	sbcs.w	r9, r9, #1
    155c:	f17a 3aff 	sbcs.w	sl, sl, #4294967295
    1560:	f151 0100 	adcs.w	r1, r1, #0
    1564:	185b      	adds	r3, r3, r1
    1566:	414c      	adcs	r4, r1
    1568:	414d      	adcs	r5, r1
    156a:	f156 0600 	adcs.w	r6, r6, #0
    156e:	f157 0700 	adcs.w	r7, r7, #0
    1572:	f158 0800 	adcs.w	r8, r8, #0
    1576:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
    157a:	eb5a 0a01 	adcs.w	sl, sl, r1
    157e:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    1582:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    1586:	4770      	bx	lr

00001588 <ocrypto_mod_p256_sub>:
    1588:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    158c:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    1590:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    1594:	1a5b      	subs	r3, r3, r1
    1596:	eb74 040c 	sbcs.w	r4, r4, ip
    159a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    159e:	418d      	sbcs	r5, r1
    15a0:	eb76 060c 	sbcs.w	r6, r6, ip
    15a4:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    15a8:	418f      	sbcs	r7, r1
    15aa:	eb78 080c 	sbcs.w	r8, r8, ip
    15ae:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    15b2:	eb79 0901 	sbcs.w	r9, r9, r1
    15b6:	eb7a 0a0c 	sbcs.w	sl, sl, ip
    15ba:	4189      	sbcs	r1, r1
    15bc:	185b      	adds	r3, r3, r1
    15be:	414c      	adcs	r4, r1
    15c0:	414d      	adcs	r5, r1
    15c2:	f156 0600 	adcs.w	r6, r6, #0
    15c6:	f157 0700 	adcs.w	r7, r7, #0
    15ca:	f158 0800 	adcs.w	r8, r8, #0
    15ce:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
    15d2:	eb5a 0a01 	adcs.w	sl, sl, r1
    15d6:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    15da:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    15de:	4770      	bx	lr

000015e0 <mul_reduce>:
    15e0:	eb18 0804 	adds.w	r8, r8, r4
    15e4:	eb59 0905 	adcs.w	r9, r9, r5
    15e8:	eb5a 0a06 	adcs.w	sl, sl, r6
    15ec:	eb5b 0b07 	adcs.w	fp, fp, r7
    15f0:	f05f 0c00 	movs.w	ip, #0
    15f4:	f14c 0c00 	adc.w	ip, ip, #0
    15f8:	eb18 0805 	adds.w	r8, r8, r5
    15fc:	eb59 0906 	adcs.w	r9, r9, r6
    1600:	eb5a 0a07 	adcs.w	sl, sl, r7
    1604:	eb5b 0b07 	adcs.w	fp, fp, r7
    1608:	eb50 000c 	adcs.w	r0, r0, ip
    160c:	f05f 0c00 	movs.w	ip, #0
    1610:	eb51 010c 	adcs.w	r1, r1, ip
    1614:	eb52 020c 	adcs.w	r2, r2, ip
    1618:	4163      	adcs	r3, r4
    161a:	f14c 0c00 	adc.w	ip, ip, #0
    161e:	ebb8 0807 	subs.w	r8, r8, r7
    1622:	f179 0900 	sbcs.w	r9, r9, #0
    1626:	f17a 0a00 	sbcs.w	sl, sl, #0
    162a:	eb7b 0b04 	sbcs.w	fp, fp, r4
    162e:	41a8      	sbcs	r0, r5
    1630:	41b1      	sbcs	r1, r6
    1632:	41a2      	sbcs	r2, r4
    1634:	41b3      	sbcs	r3, r6
    1636:	f16c 0c00 	sbc.w	ip, ip, #0
    163a:	ebbb 0b05 	subs.w	fp, fp, r5
    163e:	41b0      	sbcs	r0, r6
    1640:	41b9      	sbcs	r1, r7
    1642:	41aa      	sbcs	r2, r5
    1644:	41bb      	sbcs	r3, r7
    1646:	f16c 0c00 	sbc.w	ip, ip, #0
    164a:	ea6f 74ec 	mvn.w	r4, ip, asr #31
    164e:	ebb8 0804 	subs.w	r8, r8, r4
    1652:	eb79 0904 	sbcs.w	r9, r9, r4
    1656:	eb7a 0a04 	sbcs.w	sl, sl, r4
    165a:	f17b 0b00 	sbcs.w	fp, fp, #0
    165e:	f170 0000 	sbcs.w	r0, r0, #0
    1662:	f171 0100 	sbcs.w	r1, r1, #0
    1666:	eb72 72d4 	sbcs.w	r2, r2, r4, lsr #31
    166a:	41a3      	sbcs	r3, r4
    166c:	f16c 0c00 	sbc.w	ip, ip, #0
    1670:	eb18 78ec 	adds.w	r8, r8, ip, asr #31
    1674:	eb59 79ec 	adcs.w	r9, r9, ip, asr #31
    1678:	eb5a 7aec 	adcs.w	sl, sl, ip, asr #31
    167c:	f15b 0b00 	adcs.w	fp, fp, #0
    1680:	f150 0400 	adcs.w	r4, r0, #0
    1684:	f151 0500 	adcs.w	r5, r1, #0
    1688:	eb52 76dc 	adcs.w	r6, r2, ip, lsr #31
    168c:	eb53 77ec 	adcs.w	r7, r3, ip, asr #31
    1690:	f14c 0c00 	adc.w	ip, ip, #0
    1694:	eb18 70ec 	adds.w	r0, r8, ip, asr #31
    1698:	eb59 71ec 	adcs.w	r1, r9, ip, asr #31
    169c:	eb5a 72ec 	adcs.w	r2, sl, ip, asr #31
    16a0:	f15b 0300 	adcs.w	r3, fp, #0
    16a4:	f154 0400 	adcs.w	r4, r4, #0
    16a8:	f155 0500 	adcs.w	r5, r5, #0
    16ac:	eb56 76dc 	adcs.w	r6, r6, ip, lsr #31
    16b0:	eb57 77ec 	adcs.w	r7, r7, ip, asr #31
    16b4:	4770      	bx	lr
    16b6:	bf00      	nop

000016b8 <ocrypto_mod_p256_mul>:
    16b8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    16bc:	b087      	sub	sp, #28
    16be:	f7ff fd9f 	bl	1200 <ocrypto_mul256_noframe>
    16c2:	f8dd 8010 	ldr.w	r8, [sp, #16]
    16c6:	f8dd 9014 	ldr.w	r9, [sp, #20]
    16ca:	f8dd a018 	ldr.w	sl, [sp, #24]
    16ce:	f7ff ff87 	bl	15e0 <mul_reduce>
    16d2:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
    16d6:	f7ff ff83 	bl	15e0 <mul_reduce>
    16da:	b003      	add	sp, #12
    16dc:	f85d 8b04 	ldr.w	r8, [sp], #4
    16e0:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
    16e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000016e8 <ocrypto_mod_p256_sqr>:
    16e8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    16ec:	b087      	sub	sp, #28
    16ee:	f7ff fe43 	bl	1378 <ocrypto_sqr256_noframe>
    16f2:	f8dd 8010 	ldr.w	r8, [sp, #16]
    16f6:	f8dd 9014 	ldr.w	r9, [sp, #20]
    16fa:	f8dd a018 	ldr.w	sl, [sp, #24]
    16fe:	f7ff ff6f 	bl	15e0 <mul_reduce>
    1702:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
    1706:	f7ff ff6b 	bl	15e0 <mul_reduce>
    170a:	b003      	add	sp, #12
    170c:	f85d 8b04 	ldr.w	r8, [sp], #4
    1710:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
    1714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00001718 <__aeabi_dcmpun>:
    1718:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    171c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    1720:	d102      	bne.n	1728 <__aeabi_dcmpun+0x10>
    1722:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    1726:	d10a      	bne.n	173e <__aeabi_dcmpun+0x26>
    1728:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    172c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    1730:	d102      	bne.n	1738 <__aeabi_dcmpun+0x20>
    1732:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    1736:	d102      	bne.n	173e <__aeabi_dcmpun+0x26>
    1738:	f04f 0000 	mov.w	r0, #0
    173c:	4770      	bx	lr
    173e:	f04f 0001 	mov.w	r0, #1
    1742:	4770      	bx	lr

00001744 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>:
    1744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1746:	4615      	mov	r5, r2
    1748:	4a0a      	ldr	r2, [pc, #40]	; (1774 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x30>)
    174a:	461c      	mov	r4, r3
    174c:	6856      	ldr	r6, [r2, #4]
    174e:	b12e      	cbz	r6, 175c <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x18>
    1750:	b001      	add	sp, #4
    1752:	462a      	mov	r2, r5
    1754:	46b4      	mov	ip, r6
    1756:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    175a:	4760      	bx	ip
    175c:	2000      	movs	r0, #0
    175e:	f88d 0000 	strb.w	r0, [sp]
    1762:	4668      	mov	r0, sp
    1764:	f00b fb3d 	bl	cde2 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>
    1768:	f89d 0000 	ldrb.w	r0, [sp]
    176c:	1a28      	subs	r0, r5, r0
    176e:	7020      	strb	r0, [r4, #0]
    1770:	2000      	movs	r0, #0
    1772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1774:	20000008 	.word	0x20000008
    1778:	2800      	cmp	r0, #0
    177a:	d019      	beq.n	17b0 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x6c>
    177c:	7803      	ldrb	r3, [r0, #0]
    177e:	4913      	ldr	r1, [pc, #76]	; (17cc <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x88>)
    1780:	4a13      	ldr	r2, [pc, #76]	; (17d0 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x8c>)
    1782:	b113      	cbz	r3, 178a <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x46>
    1784:	2b01      	cmp	r3, #1
    1786:	d00e      	beq.n	17a6 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x62>
    1788:	e011      	b.n	17ae <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x6a>
    178a:	7903      	ldrb	r3, [r0, #4]
    178c:	2b01      	cmp	r3, #1
    178e:	d000      	beq.n	1792 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x4e>
    1790:	b96b      	cbnz	r3, 17ae <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x6a>
    1792:	7943      	ldrb	r3, [r0, #5]
    1794:	b10b      	cbz	r3, 179a <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x56>
    1796:	2b01      	cmp	r3, #1
    1798:	d109      	bne.n	17ae <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x6a>
    179a:	6883      	ldr	r3, [r0, #8]
    179c:	3b64      	subs	r3, #100	; 0x64
    179e:	428b      	cmp	r3, r1
    17a0:	d205      	bcs.n	17ae <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x6a>
    17a2:	68c0      	ldr	r0, [r0, #12]
    17a4:	e00e      	b.n	17c4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x80>
    17a6:	7903      	ldrb	r3, [r0, #4]
    17a8:	2b01      	cmp	r3, #1
    17aa:	d002      	beq.n	17b2 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x6e>
    17ac:	b10b      	cbz	r3, 17b2 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x6e>
    17ae:	2000      	movs	r0, #0
    17b0:	4770      	bx	lr
    17b2:	7943      	ldrb	r3, [r0, #5]
    17b4:	b10b      	cbz	r3, 17ba <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x76>
    17b6:	2b01      	cmp	r3, #1
    17b8:	d1f9      	bne.n	17ae <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x6a>
    17ba:	68c3      	ldr	r3, [r0, #12]
    17bc:	3b64      	subs	r3, #100	; 0x64
    17be:	428b      	cmp	r3, r1
    17c0:	d2f5      	bcs.n	17ae <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x6a>
    17c2:	6880      	ldr	r0, [r0, #8]
    17c4:	4290      	cmp	r0, r2
    17c6:	d8f2      	bhi.n	17ae <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x6a>
    17c8:	2001      	movs	r0, #1
    17ca:	4770      	bx	lr
    17cc:	0001863d 	.word	0x0001863d
    17d0:	0f423fff 	.word	0x0f423fff
    17d4:	b510      	push	{r4, lr}
    17d6:	4c05      	ldr	r4, [pc, #20]	; (17ec <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0xa8>)
    17d8:	6820      	ldr	r0, [r4, #0]
    17da:	b110      	cbz	r0, 17e2 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x9e>
    17dc:	4780      	blx	r0
    17de:	2000      	movs	r0, #0
    17e0:	6020      	str	r0, [r4, #0]
    17e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    17e6:	f001 bfcd 	b.w	3784 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    17ea:	0000      	.short	0x0000
    17ec:	20000010 	.word	0x20000010

000017f0 <mpsl_timeslot_session_open>:
    17f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    17f4:	460e      	mov	r6, r1
    17f6:	0005      	movs	r5, r0
    17f8:	d004      	beq.n	1804 <mpsl_timeslot_session_open+0x14>
    17fa:	f000 f845 	bl	1888 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    17fe:	4607      	mov	r7, r0
    1800:	2400      	movs	r4, #0
    1802:	e00a      	b.n	181a <mpsl_timeslot_session_open+0x2a>
    1804:	f06f 0015 	mvn.w	r0, #21
    1808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    180c:	4620      	mov	r0, r4
    180e:	f000 f841 	bl	1894 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    1812:	7880      	ldrb	r0, [r0, #2]
    1814:	b138      	cbz	r0, 1826 <mpsl_timeslot_session_open+0x36>
    1816:	1c64      	adds	r4, r4, #1
    1818:	b2e4      	uxtb	r4, r4
    181a:	42bc      	cmp	r4, r7
    181c:	d3f6      	bcc.n	180c <mpsl_timeslot_session_open+0x1c>
    181e:	bf00      	nop
    1820:	f06f 000b 	mvn.w	r0, #11
    1824:	e7f0      	b.n	1808 <mpsl_timeslot_session_open+0x18>
    1826:	4627      	mov	r7, r4
    1828:	2cff      	cmp	r4, #255	; 0xff
    182a:	d0f9      	beq.n	1820 <mpsl_timeslot_session_open+0x30>
    182c:	4620      	mov	r0, r4
    182e:	f000 f831 	bl	1894 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    1832:	4604      	mov	r4, r0
    1834:	f00b fc78 	bl	d128 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x346>
    1838:	7127      	strb	r7, [r4, #4]
    183a:	4621      	mov	r1, r4
    183c:	4807      	ldr	r0, [pc, #28]	; (185c <mpsl_timeslot_session_open+0x6c>)
    183e:	f001 ff79 	bl	3734 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    1842:	70e0      	strb	r0, [r4, #3]
    1844:	2820      	cmp	r0, #32
    1846:	d005      	beq.n	1854 <mpsl_timeslot_session_open+0x64>
    1848:	2001      	movs	r0, #1
    184a:	60a5      	str	r5, [r4, #8]
    184c:	70a0      	strb	r0, [r4, #2]
    184e:	7037      	strb	r7, [r6, #0]
    1850:	2000      	movs	r0, #0
    1852:	e7d9      	b.n	1808 <mpsl_timeslot_session_open+0x18>
    1854:	f06f 0022 	mvn.w	r0, #34	; 0x22
    1858:	e7d6      	b.n	1808 <mpsl_timeslot_session_open+0x18>
    185a:	0000      	.short	0x0000
    185c:	0000ce89 	.word	0x0000ce89

00001860 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q>:
    1860:	b510      	push	{r4, lr}
    1862:	0782      	lsls	r2, r0, #30
    1864:	d002      	beq.n	186c <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0xc>
    1866:	f06f 000d 	mvn.w	r0, #13
    186a:	bd10      	pop	{r4, pc}
    186c:	4a05      	ldr	r2, [pc, #20]	; (1884 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0x24>)
    186e:	7011      	strb	r1, [r2, #0]
    1870:	6050      	str	r0, [r2, #4]
    1872:	b128      	cbz	r0, 1880 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0x20>
    1874:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
    1878:	008a      	lsls	r2, r1, #2
    187a:	2100      	movs	r1, #0
    187c:	f00b feda 	bl	d634 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    1880:	2000      	movs	r0, #0
    1882:	bd10      	pop	{r4, pc}
    1884:	20000014 	.word	0x20000014

00001888 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
    1888:	4801      	ldr	r0, [pc, #4]	; (1890 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
    188a:	7800      	ldrb	r0, [r0, #0]
    188c:	4770      	bx	lr
    188e:	0000      	.short	0x0000
    1890:	20000014 	.word	0x20000014

00001894 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
    1894:	4905      	ldr	r1, [pc, #20]	; (18ac <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
    1896:	780a      	ldrb	r2, [r1, #0]
    1898:	4290      	cmp	r0, r2
    189a:	d301      	bcc.n	18a0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
    189c:	2000      	movs	r0, #0
    189e:	4770      	bx	lr
    18a0:	6849      	ldr	r1, [r1, #4]
    18a2:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    18a6:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    18aa:	4770      	bx	lr
    18ac:	20000014 	.word	0x20000014
    18b0:	b570      	push	{r4, r5, r6, lr}
    18b2:	4605      	mov	r5, r0
    18b4:	2a20      	cmp	r2, #32
    18b6:	d027      	beq.n	1908 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x74>
    18b8:	4819      	ldr	r0, [pc, #100]	; (1920 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8c>)
    18ba:	4c1a      	ldr	r4, [pc, #104]	; (1924 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x90>)
    18bc:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
    18c0:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
    18c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    18c8:	2920      	cmp	r1, #32
    18ca:	d022      	beq.n	1912 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7e>
    18cc:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
    18d0:	7840      	ldrb	r0, [r0, #1]
    18d2:	784c      	ldrb	r4, [r1, #1]
    18d4:	7048      	strb	r0, [r1, #1]
    18d6:	4620      	mov	r0, r4
    18d8:	4601      	mov	r1, r0
    18da:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
    18de:	4291      	cmp	r1, r2
    18e0:	7005      	strb	r5, [r0, #0]
    18e2:	7840      	ldrb	r0, [r0, #1]
    18e4:	d1f8      	bne.n	18d8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x44>
    18e6:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
    18ea:	2a20      	cmp	r2, #32
    18ec:	bf1a      	itte	ne
    18ee:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
    18f2:	7054      	strbne	r4, [r2, #1]
    18f4:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
    18f8:	2220      	movs	r2, #32
    18fa:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
    18fe:	f88c 2001 	strb.w	r2, [ip, #1]
    1902:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
    1906:	bd70      	pop	{r4, r5, r6, pc}
    1908:	f240 218a 	movw	r1, #650	; 0x28a
    190c:	2070      	movs	r0, #112	; 0x70
    190e:	f003 f97b 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1912:	f893 4020 	ldrb.w	r4, [r3, #32]
    1916:	7840      	ldrb	r0, [r0, #1]
    1918:	f883 0020 	strb.w	r0, [r3, #32]
    191c:	e7db      	b.n	18d6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x42>
    191e:	0000      	.short	0x0000
    1920:	20000e80 	.word	0x20000e80
    1924:	20000f00 	.word	0x20000f00
    1928:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    192c:	b085      	sub	sp, #20
    192e:	4615      	mov	r5, r2
    1930:	460c      	mov	r4, r1
    1932:	f002 f8f1 	bl	3b18 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1936:	4428      	add	r0, r5
    1938:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    193c:	9002      	str	r0, [sp, #8]
    193e:	6821      	ldr	r1, [r4, #0]
    1940:	1a08      	subs	r0, r1, r0
    1942:	0200      	lsls	r0, r0, #8
    1944:	17c1      	asrs	r1, r0, #31
    1946:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    194a:	1200      	asrs	r0, r0, #8
    194c:	2800      	cmp	r0, #0
    194e:	f300 80d5 	bgt.w	1afc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x268>
    1952:	48ac      	ldr	r0, [pc, #688]	; (1c04 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x370>)
    1954:	9f08      	ldr	r7, [sp, #32]
    1956:	4eac      	ldr	r6, [pc, #688]	; (1c08 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x374>)
    1958:	eb00 0087 	add.w	r0, r0, r7, lsl #2
    195c:	9003      	str	r0, [sp, #12]
    195e:	f890 5020 	ldrb.w	r5, [r0, #32]
    1962:	2020      	movs	r0, #32
    1964:	46e9      	mov	r9, sp
    1966:	f10d 0804 	add.w	r8, sp, #4
    196a:	f88d 0000 	strb.w	r0, [sp]
    196e:	f506 7a40 	add.w	sl, r6, #768	; 0x300
    1972:	2d20      	cmp	r5, #32
    1974:	bf18      	it	ne
    1976:	eb0a 1b87 	addne.w	fp, sl, r7, lsl #6
    197a:	d025      	beq.n	19c8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x134>
    197c:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    1980:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
    1984:	6822      	ldr	r2, [r4, #0]
    1986:	68c1      	ldr	r1, [r0, #12]
    1988:	1a51      	subs	r1, r2, r1
    198a:	0209      	lsls	r1, r1, #8
    198c:	17ca      	asrs	r2, r1, #31
    198e:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1992:	3008      	adds	r0, #8
    1994:	1209      	asrs	r1, r1, #8
    1996:	d417      	bmi.n	19c8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x134>
    1998:	8961      	ldrh	r1, [r4, #10]
    199a:	b171      	cbz	r1, 19ba <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x126>
    199c:	8941      	ldrh	r1, [r0, #10]
    199e:	b961      	cbnz	r1, 19ba <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x126>
    19a0:	f000 fda6 	bl	24f0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x4f0>
    19a4:	f002 f8b8 	bl	3b18 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    19a8:	6821      	ldr	r1, [r4, #0]
    19aa:	1a08      	subs	r0, r1, r0
    19ac:	0200      	lsls	r0, r0, #8
    19ae:	17c1      	asrs	r1, r0, #31
    19b0:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    19b4:	1200      	asrs	r0, r0, #8
    19b6:	2833      	cmp	r0, #51	; 0x33
    19b8:	db06      	blt.n	19c8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x134>
    19ba:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    19be:	f889 5000 	strb.w	r5, [r9]
    19c2:	7845      	ldrb	r5, [r0, #1]
    19c4:	2d20      	cmp	r5, #32
    19c6:	d1d9      	bne.n	197c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xe8>
    19c8:	f899 0000 	ldrb.w	r0, [r9]
    19cc:	f888 0000 	strb.w	r0, [r8]
    19d0:	46a1      	mov	r9, r4
    19d2:	2d20      	cmp	r5, #32
    19d4:	bf1c      	itt	ne
    19d6:	488d      	ldrne	r0, [pc, #564]	; (1c0c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x378>)
    19d8:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
    19dc:	f000 810e 	beq.w	1bfc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    19e0:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    19e4:	eb06 0ac1 	add.w	sl, r6, r1, lsl #3
    19e8:	f8d9 2004 	ldr.w	r2, [r9, #4]
    19ec:	f8da 1008 	ldr.w	r1, [sl, #8]
    19f0:	4648      	mov	r0, r9
    19f2:	1a89      	subs	r1, r1, r2
    19f4:	0209      	lsls	r1, r1, #8
    19f6:	17ca      	asrs	r2, r1, #31
    19f8:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    19fc:	f10a 0708 	add.w	r7, sl, #8
    1a00:	1209      	asrs	r1, r1, #8
    1a02:	d415      	bmi.n	1a30 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x19c>
    1a04:	8979      	ldrh	r1, [r7, #10]
    1a06:	2900      	cmp	r1, #0
    1a08:	f000 80f8 	beq.w	1bfc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    1a0c:	8941      	ldrh	r1, [r0, #10]
    1a0e:	2900      	cmp	r1, #0
    1a10:	f040 80f4 	bne.w	1bfc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    1a14:	f000 fd6c 	bl	24f0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x4f0>
    1a18:	f002 f87e 	bl	3b18 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1a1c:	6839      	ldr	r1, [r7, #0]
    1a1e:	1a08      	subs	r0, r1, r0
    1a20:	0200      	lsls	r0, r0, #8
    1a22:	17c1      	asrs	r1, r0, #31
    1a24:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1a28:	1200      	asrs	r0, r0, #8
    1a2a:	2833      	cmp	r0, #51	; 0x33
    1a2c:	f280 80e6 	bge.w	1bfc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    1a30:	f888 5000 	strb.w	r5, [r8]
    1a34:	f89a 1014 	ldrb.w	r1, [sl, #20]
    1a38:	f899 000c 	ldrb.w	r0, [r9, #12]
    1a3c:	4281      	cmp	r1, r0
    1a3e:	d906      	bls.n	1a4e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1ba>
    1a40:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1a44:	7845      	ldrb	r5, [r0, #1]
    1a46:	2d20      	cmp	r5, #32
    1a48:	d1ca      	bne.n	19e0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x14c>
    1a4a:	f000 b8d7 	b.w	1bfc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    1a4e:	f89d 0004 	ldrb.w	r0, [sp, #4]
    1a52:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1a56:	eb06 05c0 	add.w	r5, r6, r0, lsl #3
    1a5a:	8a68      	ldrh	r0, [r5, #18]
    1a5c:	68ef      	ldr	r7, [r5, #12]
    1a5e:	2800      	cmp	r0, #0
    1a60:	d143      	bne.n	1aea <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x256>
    1a62:	8960      	ldrh	r0, [r4, #10]
    1a64:	b3e8      	cbz	r0, 1ae2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x24e>
    1a66:	68a8      	ldr	r0, [r5, #8]
    1a68:	f00b fbfc 	bl	d264 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1a6c:	8a69      	ldrh	r1, [r5, #18]
    1a6e:	7c2a      	ldrb	r2, [r5, #16]
    1a70:	4b67      	ldr	r3, [pc, #412]	; (1c10 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x37c>)
    1a72:	4411      	add	r1, r2
    1a74:	1c49      	adds	r1, r1, #1
    1a76:	1842      	adds	r2, r0, r1
    1a78:	4298      	cmp	r0, r3
    1a7a:	d904      	bls.n	1a86 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1f2>
    1a7c:	f240 51d6 	movw	r1, #1494	; 0x5d6
    1a80:	2070      	movs	r0, #112	; 0x70
    1a82:	f003 f8c1 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1a86:	4863      	ldr	r0, [pc, #396]	; (1c14 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x380>)
    1a88:	4281      	cmp	r1, r0
    1a8a:	dd04      	ble.n	1a96 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x202>
    1a8c:	f240 51d7 	movw	r1, #1495	; 0x5d7
    1a90:	2070      	movs	r0, #112	; 0x70
    1a92:	f003 f8b9 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1a96:	4860      	ldr	r0, [pc, #384]	; (1c18 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x384>)
    1a98:	4281      	cmp	r1, r0
    1a9a:	da04      	bge.n	1aa6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x212>
    1a9c:	f44f 61bb 	mov.w	r1, #1496	; 0x5d8
    1aa0:	2070      	movs	r0, #112	; 0x70
    1aa2:	f003 f8b1 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1aa6:	485d      	ldr	r0, [pc, #372]	; (1c1c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x388>)
    1aa8:	4290      	cmp	r0, r2
    1aaa:	bfdc      	itt	le
    1aac:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    1ab0:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    1ab4:	dd05      	ble.n	1ac2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x22e>
    1ab6:	2a00      	cmp	r2, #0
    1ab8:	bfbc      	itt	lt
    1aba:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    1abe:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    1ac2:	4610      	mov	r0, r2
    1ac4:	f002 f828 	bl	3b18 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1ac8:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1acc:	1a78      	subs	r0, r7, r1
    1ace:	0200      	lsls	r0, r0, #8
    1ad0:	17c2      	asrs	r2, r0, #31
    1ad2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1ad6:	1200      	asrs	r0, r0, #8
    1ad8:	2833      	cmp	r0, #51	; 0x33
    1ada:	bfb8      	it	lt
    1adc:	f101 0033 	addlt.w	r0, r1, #51	; 0x33
    1ae0:	e000      	b.n	1ae4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x250>
    1ae2:	e002      	b.n	1aea <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x256>
    1ae4:	bfb8      	it	lt
    1ae6:	f020 477f 	biclt.w	r7, r0, #4278190080	; 0xff000000
    1aea:	9802      	ldr	r0, [sp, #8]
    1aec:	1a38      	subs	r0, r7, r0
    1aee:	0200      	lsls	r0, r0, #8
    1af0:	17c1      	asrs	r1, r0, #31
    1af2:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1af6:	1200      	asrs	r0, r0, #8
    1af8:	2800      	cmp	r0, #0
    1afa:	dd03      	ble.n	1b04 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x270>
    1afc:	b009      	add	sp, #36	; 0x24
    1afe:	2000      	movs	r0, #0
    1b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1b04:	e9d4 1000 	ldrd	r1, r0, [r4]
    1b08:	1a40      	subs	r0, r0, r1
    1b0a:	4438      	add	r0, r7
    1b0c:	f027 417f 	bic.w	r1, r7, #4278190080	; 0xff000000
    1b10:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1b14:	e9c4 1000 	strd	r1, r0, [r4]
    1b18:	9803      	ldr	r0, [sp, #12]
    1b1a:	f8dd 8020 	ldr.w	r8, [sp, #32]
    1b1e:	466f      	mov	r7, sp
    1b20:	f890 5020 	ldrb.w	r5, [r0, #32]
    1b24:	2020      	movs	r0, #32
    1b26:	f10d 0a04 	add.w	sl, sp, #4
    1b2a:	f88d 0000 	strb.w	r0, [sp]
    1b2e:	2d20      	cmp	r5, #32
    1b30:	bf1c      	itt	ne
    1b32:	4836      	ldrne	r0, [pc, #216]	; (1c0c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x378>)
    1b34:	eb00 1988 	addne.w	r9, r0, r8, lsl #6
    1b38:	d025      	beq.n	1b86 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2f2>
    1b3a:	bf00      	nop
    1b3c:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    1b40:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
    1b44:	6822      	ldr	r2, [r4, #0]
    1b46:	68c1      	ldr	r1, [r0, #12]
    1b48:	1a51      	subs	r1, r2, r1
    1b4a:	0209      	lsls	r1, r1, #8
    1b4c:	17ca      	asrs	r2, r1, #31
    1b4e:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1b52:	3008      	adds	r0, #8
    1b54:	1209      	asrs	r1, r1, #8
    1b56:	d416      	bmi.n	1b86 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2f2>
    1b58:	8961      	ldrh	r1, [r4, #10]
    1b5a:	b171      	cbz	r1, 1b7a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2e6>
    1b5c:	8941      	ldrh	r1, [r0, #10]
    1b5e:	b961      	cbnz	r1, 1b7a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2e6>
    1b60:	f000 fcc6 	bl	24f0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x4f0>
    1b64:	f001 ffd8 	bl	3b18 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1b68:	6821      	ldr	r1, [r4, #0]
    1b6a:	1a08      	subs	r0, r1, r0
    1b6c:	0200      	lsls	r0, r0, #8
    1b6e:	17c1      	asrs	r1, r0, #31
    1b70:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1b74:	1200      	asrs	r0, r0, #8
    1b76:	2833      	cmp	r0, #51	; 0x33
    1b78:	db05      	blt.n	1b86 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2f2>
    1b7a:	eb09 0045 	add.w	r0, r9, r5, lsl #1
    1b7e:	703d      	strb	r5, [r7, #0]
    1b80:	7845      	ldrb	r5, [r0, #1]
    1b82:	2d20      	cmp	r5, #32
    1b84:	d1da      	bne.n	1b3c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2a8>
    1b86:	7838      	ldrb	r0, [r7, #0]
    1b88:	f88a 0000 	strb.w	r0, [sl]
    1b8c:	4627      	mov	r7, r4
    1b8e:	2d20      	cmp	r5, #32
    1b90:	bf1c      	itt	ne
    1b92:	481e      	ldrne	r0, [pc, #120]	; (1c0c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x378>)
    1b94:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
    1b98:	d030      	beq.n	1bfc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    1b9a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    1b9e:	eb06 09c1 	add.w	r9, r6, r1, lsl #3
    1ba2:	6879      	ldr	r1, [r7, #4]
    1ba4:	f8d9 2008 	ldr.w	r2, [r9, #8]
    1ba8:	4638      	mov	r0, r7
    1baa:	1a51      	subs	r1, r2, r1
    1bac:	0209      	lsls	r1, r1, #8
    1bae:	17ca      	asrs	r2, r1, #31
    1bb0:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1bb4:	f109 0808 	add.w	r8, r9, #8
    1bb8:	1209      	asrs	r1, r1, #8
    1bba:	d412      	bmi.n	1be2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x34e>
    1bbc:	f8b8 100a 	ldrh.w	r1, [r8, #10]
    1bc0:	b1e1      	cbz	r1, 1bfc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    1bc2:	8941      	ldrh	r1, [r0, #10]
    1bc4:	b9d1      	cbnz	r1, 1bfc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    1bc6:	f000 fc93 	bl	24f0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x4f0>
    1bca:	f001 ffa5 	bl	3b18 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1bce:	f8d8 1000 	ldr.w	r1, [r8]
    1bd2:	1a08      	subs	r0, r1, r0
    1bd4:	0200      	lsls	r0, r0, #8
    1bd6:	17c1      	asrs	r1, r0, #31
    1bd8:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1bdc:	1200      	asrs	r0, r0, #8
    1bde:	2833      	cmp	r0, #51	; 0x33
    1be0:	da0c      	bge.n	1bfc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    1be2:	f88a 5000 	strb.w	r5, [sl]
    1be6:	f899 0014 	ldrb.w	r0, [r9, #20]
    1bea:	7b39      	ldrb	r1, [r7, #12]
    1bec:	4288      	cmp	r0, r1
    1bee:	f67f af2e 	bls.w	1a4e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1ba>
    1bf2:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1bf6:	7845      	ldrb	r5, [r0, #1]
    1bf8:	2d20      	cmp	r5, #32
    1bfa:	d1ce      	bne.n	1b9a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x306>
    1bfc:	b009      	add	sp, #36	; 0x24
    1bfe:	2001      	movs	r0, #1
    1c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1c04:	20000f00 	.word	0x20000f00
    1c08:	20000b80 	.word	0x20000b80
    1c0c:	20000e80 	.word	0x20000e80
    1c10:	1e847fff 	.word	0x1e847fff
    1c14:	0f424000 	.word	0x0f424000
    1c18:	f0bdc000 	.word	0xf0bdc000
    1c1c:	1e848000 	.word	0x1e848000
    1c20:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    1c24:	4604      	mov	r4, r0
    1c26:	483c      	ldr	r0, [pc, #240]	; (1d18 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x484>)
    1c28:	460e      	mov	r6, r1
    1c2a:	eb00 0086 	add.w	r0, r0, r6, lsl #2
    1c2e:	4f3b      	ldr	r7, [pc, #236]	; (1d1c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x488>)
    1c30:	f890 5020 	ldrb.w	r5, [r0, #32]
    1c34:	2020      	movs	r0, #32
    1c36:	4698      	mov	r8, r3
    1c38:	4692      	mov	sl, r2
    1c3a:	7010      	strb	r0, [r2, #0]
    1c3c:	f507 7940 	add.w	r9, r7, #768	; 0x300
    1c40:	2d20      	cmp	r5, #32
    1c42:	bf18      	it	ne
    1c44:	eb09 1b86 	addne.w	fp, r9, r6, lsl #6
    1c48:	d028      	beq.n	1c9c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x408>
    1c4a:	bf00      	nop
    1c4c:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    1c50:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
    1c54:	f100 0108 	add.w	r1, r0, #8
    1c58:	68c0      	ldr	r0, [r0, #12]
    1c5a:	6822      	ldr	r2, [r4, #0]
    1c5c:	1a10      	subs	r0, r2, r0
    1c5e:	0200      	lsls	r0, r0, #8
    1c60:	17c2      	asrs	r2, r0, #31
    1c62:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1c66:	1200      	asrs	r0, r0, #8
    1c68:	d418      	bmi.n	1c9c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x408>
    1c6a:	8960      	ldrh	r0, [r4, #10]
    1c6c:	b178      	cbz	r0, 1c8e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3fa>
    1c6e:	8948      	ldrh	r0, [r1, #10]
    1c70:	b968      	cbnz	r0, 1c8e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3fa>
    1c72:	4608      	mov	r0, r1
    1c74:	f000 fc3c 	bl	24f0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x4f0>
    1c78:	f001 ff4e 	bl	3b18 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1c7c:	6821      	ldr	r1, [r4, #0]
    1c7e:	1a08      	subs	r0, r1, r0
    1c80:	0200      	lsls	r0, r0, #8
    1c82:	17c1      	asrs	r1, r0, #31
    1c84:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1c88:	1200      	asrs	r0, r0, #8
    1c8a:	2833      	cmp	r0, #51	; 0x33
    1c8c:	db06      	blt.n	1c9c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x408>
    1c8e:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1c92:	f88a 5000 	strb.w	r5, [sl]
    1c96:	7845      	ldrb	r5, [r0, #1]
    1c98:	2d20      	cmp	r5, #32
    1c9a:	d1d7      	bne.n	1c4c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3b8>
    1c9c:	f89a 0000 	ldrb.w	r0, [sl]
    1ca0:	f888 0000 	strb.w	r0, [r8]
    1ca4:	2d20      	cmp	r5, #32
    1ca6:	bf18      	it	ne
    1ca8:	eb09 1a86 	addne.w	sl, r9, r6, lsl #6
    1cac:	d030      	beq.n	1d10 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x47c>
    1cae:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    1cb2:	eb07 09c1 	add.w	r9, r7, r1, lsl #3
    1cb6:	6861      	ldr	r1, [r4, #4]
    1cb8:	f8d9 2008 	ldr.w	r2, [r9, #8]
    1cbc:	4620      	mov	r0, r4
    1cbe:	1a51      	subs	r1, r2, r1
    1cc0:	0209      	lsls	r1, r1, #8
    1cc2:	17ca      	asrs	r2, r1, #31
    1cc4:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1cc8:	f109 0608 	add.w	r6, r9, #8
    1ccc:	1209      	asrs	r1, r1, #8
    1cce:	d410      	bmi.n	1cf2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x45e>
    1cd0:	8971      	ldrh	r1, [r6, #10]
    1cd2:	b1e9      	cbz	r1, 1d10 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x47c>
    1cd4:	8941      	ldrh	r1, [r0, #10]
    1cd6:	b9d9      	cbnz	r1, 1d10 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x47c>
    1cd8:	f000 fc0a 	bl	24f0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x4f0>
    1cdc:	f001 ff1c 	bl	3b18 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1ce0:	6831      	ldr	r1, [r6, #0]
    1ce2:	1a08      	subs	r0, r1, r0
    1ce4:	0200      	lsls	r0, r0, #8
    1ce6:	17c1      	asrs	r1, r0, #31
    1ce8:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1cec:	1200      	asrs	r0, r0, #8
    1cee:	2833      	cmp	r0, #51	; 0x33
    1cf0:	da0e      	bge.n	1d10 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x47c>
    1cf2:	f888 5000 	strb.w	r5, [r8]
    1cf6:	f899 0014 	ldrb.w	r0, [r9, #20]
    1cfa:	7b21      	ldrb	r1, [r4, #12]
    1cfc:	4288      	cmp	r0, r1
    1cfe:	d802      	bhi.n	1d06 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x472>
    1d00:	2000      	movs	r0, #0
    1d02:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1d06:	eb0a 0045 	add.w	r0, sl, r5, lsl #1
    1d0a:	7845      	ldrb	r5, [r0, #1]
    1d0c:	2d20      	cmp	r5, #32
    1d0e:	d1ce      	bne.n	1cae <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x41a>
    1d10:	2001      	movs	r0, #1
    1d12:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1d16:	0000      	.short	0x0000
    1d18:	20000f00 	.word	0x20000f00
    1d1c:	20000b80 	.word	0x20000b80
    1d20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1d24:	b096      	sub	sp, #88	; 0x58
    1d26:	4615      	mov	r5, r2
    1d28:	468a      	mov	sl, r1
    1d2a:	2600      	movs	r6, #0
    1d2c:	f002 f97c 	bl	4028 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
    1d30:	4604      	mov	r4, r0
    1d32:	f1ba 0f01 	cmp.w	sl, #1
    1d36:	bf18      	it	ne
    1d38:	f1ba 0f02 	cmpne.w	sl, #2
    1d3c:	d005      	beq.n	1d4a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x4b6>
    1d3e:	f640 1163 	movw	r1, #2403	; 0x963
    1d42:	f04f 0070 	mov.w	r0, #112	; 0x70
    1d46:	f002 ff5f 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d4a:	49ff      	ldr	r1, [pc, #1020]	; (2148 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x148>)
    1d4c:	2001      	movs	r0, #1
    1d4e:	6008      	str	r0, [r1, #0]
    1d50:	49fe      	ldr	r1, [pc, #1016]	; (214c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x14c>)
    1d52:	68c9      	ldr	r1, [r1, #12]
    1d54:	6008      	str	r0, [r1, #0]
    1d56:	f04f 0b00 	mov.w	fp, #0
    1d5a:	f88d b046 	strb.w	fp, [sp, #70]	; 0x46
    1d5e:	1e80      	subs	r0, r0, #2
    1d60:	900c      	str	r0, [sp, #48]	; 0x30
    1d62:	49fb      	ldr	r1, [pc, #1004]	; (2150 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x150>)
    1d64:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    1d68:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    1d6c:	3308      	adds	r3, #8
    1d6e:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
    1d72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    1d74:	af0d      	add	r7, sp, #52	; 0x34
    1d76:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    1d7a:	a80d      	add	r0, sp, #52	; 0x34
    1d7c:	f000 fbb8 	bl	24f0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x4f0>
    1d80:	900b      	str	r0, [sp, #44]	; 0x2c
    1d82:	48f3      	ldr	r0, [pc, #972]	; (2150 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x150>)
    1d84:	f8bd 803e 	ldrh.w	r8, [sp, #62]	; 0x3e
    1d88:	f8b0 039c 	ldrh.w	r0, [r0, #924]	; 0x39c
    1d8c:	f8ad 0044 	strh.w	r0, [sp, #68]	; 0x44
    1d90:	f1b8 0f00 	cmp.w	r8, #0
    1d94:	bf14      	ite	ne
    1d96:	f04f 0901 	movne.w	r9, #1
    1d9a:	f04f 0900 	moveq.w	r9, #0
    1d9e:	980d      	ldr	r0, [sp, #52]	; 0x34
    1da0:	9014      	str	r0, [sp, #80]	; 0x50
    1da2:	f1b9 0f00 	cmp.w	r9, #0
    1da6:	d009      	beq.n	1dbc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x70>
    1da8:	48ea      	ldr	r0, [pc, #936]	; (2154 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x154>)
    1daa:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    1dae:	b928      	cbnz	r0, 1dbc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x70>
    1db0:	f002 feb2 	bl	4b18 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1db4:	2800      	cmp	r0, #0
    1db6:	bf08      	it	eq
    1db8:	2701      	moveq	r7, #1
    1dba:	d000      	beq.n	1dbe <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x72>
    1dbc:	2700      	movs	r7, #0
    1dbe:	48e6      	ldr	r0, [pc, #920]	; (2158 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x158>)
    1dc0:	2100      	movs	r1, #0
    1dc2:	460d      	mov	r5, r1
    1dc4:	7800      	ldrb	r0, [r0, #0]
    1dc6:	2801      	cmp	r0, #1
    1dc8:	bf18      	it	ne
    1dca:	2803      	cmpne	r0, #3
    1dcc:	d13b      	bne.n	1e46 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xfa>
    1dce:	48e2      	ldr	r0, [pc, #904]	; (2158 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x158>)
    1dd0:	8846      	ldrh	r6, [r0, #2]
    1dd2:	4546      	cmp	r6, r8
    1dd4:	d937      	bls.n	1e46 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xfa>
    1dd6:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1dd8:	43f3      	mvns	r3, r6
    1dda:	f8df e380 	ldr.w	lr, [pc, #896]	; 215c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x15c>
    1dde:	18c8      	adds	r0, r1, r3
    1de0:	f10d 0c0c 	add.w	ip, sp, #12
    1de4:	aa15      	add	r2, sp, #84	; 0x54
    1de6:	4571      	cmp	r1, lr
    1de8:	d904      	bls.n	1df4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xa8>
    1dea:	f240 51d6 	movw	r1, #1494	; 0x5d6
    1dee:	2070      	movs	r0, #112	; 0x70
    1df0:	f002 ff0a 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1df4:	49da      	ldr	r1, [pc, #872]	; (2160 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x160>)
    1df6:	428b      	cmp	r3, r1
    1df8:	dd04      	ble.n	1e04 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb8>
    1dfa:	f240 51d7 	movw	r1, #1495	; 0x5d7
    1dfe:	2070      	movs	r0, #112	; 0x70
    1e00:	f002 ff02 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e04:	49d7      	ldr	r1, [pc, #860]	; (2164 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x164>)
    1e06:	428b      	cmp	r3, r1
    1e08:	da04      	bge.n	1e14 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc8>
    1e0a:	f44f 61bb 	mov.w	r1, #1496	; 0x5d8
    1e0e:	2070      	movs	r0, #112	; 0x70
    1e10:	f002 fefa 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e14:	49d4      	ldr	r1, [pc, #848]	; (2168 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x168>)
    1e16:	4281      	cmp	r1, r0
    1e18:	bfdc      	itt	le
    1e1a:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    1e1e:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1e22:	dd05      	ble.n	1e30 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xe4>
    1e24:	2800      	cmp	r0, #0
    1e26:	bfbc      	itt	lt
    1e28:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    1e2c:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    1e30:	4661      	mov	r1, ip
    1e32:	f001 fe8d 	bl	3b50 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1e36:	9803      	ldr	r0, [sp, #12]
    1e38:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1e3c:	9003      	str	r0, [sp, #12]
    1e3e:	990d      	ldr	r1, [sp, #52]	; 0x34
    1e40:	1a08      	subs	r0, r1, r0
    1e42:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1e46:	2f00      	cmp	r7, #0
    1e48:	bf18      	it	ne
    1e4a:	2532      	movne	r5, #50	; 0x32
    1e4c:	d104      	bne.n	1e58 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x10c>
    1e4e:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    1e52:	2800      	cmp	r0, #0
    1e54:	bf18      	it	ne
    1e56:	2502      	movne	r5, #2
    1e58:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    1e5c:	d008      	beq.n	1e70 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x124>
    1e5e:	980d      	ldr	r0, [sp, #52]	; 0x34
    1e60:	1b00      	subs	r0, r0, r4
    1e62:	0200      	lsls	r0, r0, #8
    1e64:	17c2      	asrs	r2, r0, #31
    1e66:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1e6a:	1200      	asrs	r0, r0, #8
    1e6c:	2801      	cmp	r0, #1
    1e6e:	da02      	bge.n	1e76 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x12a>
    1e70:	2203      	movs	r2, #3
    1e72:	9816      	ldr	r0, [sp, #88]	; 0x58
    1e74:	e00b      	b.n	1e8e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x142>
    1e76:	b147      	cbz	r7, 1e8a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x13e>
    1e78:	48b6      	ldr	r0, [pc, #728]	; (2154 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x154>)
    1e7a:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
    1e7e:	b120      	cbz	r0, 1e8a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x13e>
    1e80:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    1e84:	1c05      	adds	r5, r0, #0
    1e86:	bf18      	it	ne
    1e88:	2502      	movne	r5, #2
    1e8a:	4620      	mov	r0, r4
    1e8c:	2200      	movs	r2, #0
    1e8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1e90:	442a      	add	r2, r5
    1e92:	1a5b      	subs	r3, r3, r1
    1e94:	f023 4c7f 	bic.w	ip, r3, #4278190080	; 0xff000000
    1e98:	f1ac 0301 	sub.w	r3, ip, #1
    1e9c:	f023 457f 	bic.w	r5, r3, #4278190080	; 0xff000000
    1ea0:	1a2b      	subs	r3, r5, r0
    1ea2:	021b      	lsls	r3, r3, #8
    1ea4:	ea4f 7ee3 	mov.w	lr, r3, asr #31
    1ea8:	eb03 631e 	add.w	r3, r3, lr, lsr #24
    1eac:	121b      	asrs	r3, r3, #8
    1eae:	4293      	cmp	r3, r2
    1eb0:	db04      	blt.n	1ebc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x170>
    1eb2:	2900      	cmp	r1, #0
    1eb4:	bf18      	it	ne
    1eb6:	f8cd c034 	strne.w	ip, [sp, #52]	; 0x34
    1eba:	e027      	b.n	1f0c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1c0>
    1ebc:	b189      	cbz	r1, 1ee2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x196>
    1ebe:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
    1ec2:	b91b      	cbnz	r3, 1ecc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x180>
    1ec4:	4ba4      	ldr	r3, [pc, #656]	; (2158 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x158>)
    1ec6:	781b      	ldrb	r3, [r3, #0]
    1ec8:	2b03      	cmp	r3, #3
    1eca:	d00a      	beq.n	1ee2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x196>
    1ecc:	b927      	cbnz	r7, 1ed8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x18c>
    1ece:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
    1ed2:	2900      	cmp	r1, #0
    1ed4:	bf18      	it	ne
    1ed6:	1e92      	subne	r2, r2, #2
    1ed8:	2100      	movs	r1, #0
    1eda:	f88d b044 	strb.w	fp, [sp, #68]	; 0x44
    1ede:	460e      	mov	r6, r1
    1ee0:	e007      	b.n	1ef2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1a6>
    1ee2:	b937      	cbnz	r7, 1ef2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1a6>
    1ee4:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
    1ee8:	2b00      	cmp	r3, #0
    1eea:	bf1c      	itt	ne
    1eec:	f88d b044 	strbne.w	fp, [sp, #68]	; 0x44
    1ef0:	1e92      	subne	r2, r2, #2
    1ef2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1ef4:	1a59      	subs	r1, r3, r1
    1ef6:	1e49      	subs	r1, r1, #1
    1ef8:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    1efc:	1a28      	subs	r0, r5, r0
    1efe:	0200      	lsls	r0, r0, #8
    1f00:	17c1      	asrs	r1, r0, #31
    1f02:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1f06:	1200      	asrs	r0, r0, #8
    1f08:	4290      	cmp	r0, r2
    1f0a:	db7c      	blt.n	2006 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x6>
    1f0c:	9709      	str	r7, [sp, #36]	; 0x24
    1f0e:	465f      	mov	r7, fp
    1f10:	f001 ff80 	bl	3e14 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1f14:	1a28      	subs	r0, r5, r0
    1f16:	0200      	lsls	r0, r0, #8
    1f18:	17c1      	asrs	r1, r0, #31
    1f1a:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1f1e:	1200      	asrs	r0, r0, #8
    1f20:	283d      	cmp	r0, #61	; 0x3d
    1f22:	da20      	bge.n	1f66 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x21a>
    1f24:	f1ba 0f01 	cmp.w	sl, #1
    1f28:	d002      	beq.n	1f30 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1e4>
    1f2a:	9809      	ldr	r0, [sp, #36]	; 0x24
    1f2c:	b140      	cbz	r0, 1f40 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1f4>
    1f2e:	e012      	b.n	1f56 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x20a>
    1f30:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    1f34:	d11c      	bne.n	1f70 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x224>
    1f36:	f44f 610e 	mov.w	r1, #2272	; 0x8e0
    1f3a:	2070      	movs	r0, #112	; 0x70
    1f3c:	f002 fe64 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1f40:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    1f44:	d007      	beq.n	1f56 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x20a>
    1f46:	1b60      	subs	r0, r4, r5
    1f48:	0200      	lsls	r0, r0, #8
    1f4a:	17c1      	asrs	r1, r0, #31
    1f4c:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1f50:	1200      	asrs	r0, r0, #8
    1f52:	2804      	cmp	r0, #4
    1f54:	dd04      	ble.n	1f60 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x214>
    1f56:	462c      	mov	r4, r5
    1f58:	4620      	mov	r0, r4
    1f5a:	f001 ff61 	bl	3e20 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    1f5e:	e007      	b.n	1f70 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x224>
    1f60:	2800      	cmp	r0, #0
    1f62:	dc6d      	bgt.n	2040 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x40>
    1f64:	e004      	b.n	1f70 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x224>
    1f66:	462c      	mov	r4, r5
    1f68:	4620      	mov	r0, r4
    1f6a:	f001 ff59 	bl	3e20 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    1f6e:	464f      	mov	r7, r9
    1f70:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    1f74:	d05f      	beq.n	2036 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x36>
    1f76:	980d      	ldr	r0, [sp, #52]	; 0x34
    1f78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1f7a:	1b00      	subs	r0, r0, r4
    1f7c:	1b12      	subs	r2, r2, r4
    1f7e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1f82:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1f86:	2801      	cmp	r0, #1
    1f88:	d35a      	bcc.n	2040 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x40>
    1f8a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    1f8e:	bf98      	it	ls
    1f90:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    1f94:	d854      	bhi.n	2040 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x40>
    1f96:	4620      	mov	r0, r4
    1f98:	f00b f964 	bl	d264 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1f9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1f9e:	4b70      	ldr	r3, [pc, #448]	; (2160 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x160>)
    1fa0:	1a0d      	subs	r5, r1, r0
    1fa2:	1aeb      	subs	r3, r5, r3
    1fa4:	465a      	mov	r2, fp
    1fa6:	f17b 0300 	sbcs.w	r3, fp, #0
    1faa:	d319      	bcc.n	1fe0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x294>
    1fac:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 2160 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x160>
    1fb0:	1a43      	subs	r3, r0, r1
    1fb2:	ebb3 0c0c 	subs.w	ip, r3, ip
    1fb6:	f172 0c00 	sbcs.w	ip, r2, #0
    1fba:	d311      	bcc.n	1fe0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x294>
    1fbc:	f8df c19c 	ldr.w	ip, [pc, #412]	; 215c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x15c>
    1fc0:	45ac      	cmp	ip, r5
    1fc2:	bf3e      	ittt	cc
    1fc4:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    1fc8:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    1fcc:	1845      	addcc	r5, r0, r1
    1fce:	d307      	bcc.n	1fe0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x294>
    1fd0:	459c      	cmp	ip, r3
    1fd2:	d239      	bcs.n	2048 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x48>
    1fd4:	f5c1 2190 	rsb	r1, r1, #294912	; 0x48000
    1fd8:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    1fdc:	4408      	add	r0, r1
    1fde:	4245      	negs	r5, r0
    1fe0:	f8df b170 	ldr.w	fp, [pc, #368]	; 2154 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x154>
    1fe4:	f89b 001e 	ldrb.w	r0, [fp, #30]
    1fe8:	b398      	cbz	r0, 2052 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x52>
    1fea:	4650      	mov	r0, sl
    1fec:	f04f 0a00 	mov.w	sl, #0
    1ff0:	2801      	cmp	r0, #1
    1ff2:	d005      	beq.n	2000 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE>
    1ff4:	2002      	movs	r0, #2
    1ff6:	f002 f96f 	bl	42d8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1ffa:	2001      	movs	r0, #1
    1ffc:	f002 f96c 	bl	42d8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2000:	45b0      	cmp	r8, r6
    2002:	d232      	bcs.n	206a <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x6a>
    2004:	e000      	b.n	2008 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x8>
    2006:	e01b      	b.n	2040 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x40>
    2008:	eba5 0106 	sub.w	r1, r5, r6
    200c:	f04f 0301 	mov.w	r3, #1
    2010:	f04f 0203 	mov.w	r2, #3
    2014:	f04f 0002 	mov.w	r0, #2
    2018:	f002 f88a 	bl	4130 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    201c:	2800      	cmp	r0, #0
    201e:	bf08      	it	eq
    2020:	f04f 0a01 	moveq.w	sl, #1
    2024:	f1b8 0f00 	cmp.w	r8, #0
    2028:	d039      	beq.n	209e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x9e>
    202a:	2301      	movs	r3, #1
    202c:	eba5 0108 	sub.w	r1, r5, r8
    2030:	2203      	movs	r2, #3
    2032:	4618      	mov	r0, r3
    2034:	e027      	b.n	2086 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x86>
    2036:	f640 11fd 	movw	r1, #2557	; 0x9fd
    203a:	2070      	movs	r0, #112	; 0x70
    203c:	f002 fde4 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2040:	b019      	add	sp, #100	; 0x64
    2042:	2000      	movs	r0, #0
    2044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2048:	f640 21dd 	movw	r1, #2781	; 0xadd
    204c:	2070      	movs	r0, #112	; 0x70
    204e:	f002 fddb 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2052:	45b0      	cmp	r8, r6
    2054:	bf34      	ite	cc
    2056:	4630      	movcc	r0, r6
    2058:	4640      	movcs	r0, r8
    205a:	301e      	adds	r0, #30
    205c:	42a8      	cmp	r0, r5
    205e:	dbc4      	blt.n	1fea <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x29e>
    2060:	f44f 6121 	mov.w	r1, #2576	; 0xa10
    2064:	2070      	movs	r0, #112	; 0x70
    2066:	f002 fdcf 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    206a:	d910      	bls.n	208e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x8e>
    206c:	2301      	movs	r3, #1
    206e:	eba5 0108 	sub.w	r1, r5, r8
    2072:	2203      	movs	r2, #3
    2074:	4618      	mov	r0, r3
    2076:	f002 f85b 	bl	4130 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    207a:	b3e0      	cbz	r0, 20f6 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xf6>
    207c:	b17e      	cbz	r6, 209e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x9e>
    207e:	1ba9      	subs	r1, r5, r6
    2080:	2301      	movs	r3, #1
    2082:	2203      	movs	r2, #3
    2084:	2002      	movs	r0, #2
    2086:	f002 f853 	bl	4130 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    208a:	b3a0      	cbz	r0, 20f6 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xf6>
    208c:	e007      	b.n	209e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x9e>
    208e:	ea56 0008 	orrs.w	r0, r6, r8
    2092:	d004      	beq.n	209e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x9e>
    2094:	f640 1147 	movw	r1, #2375	; 0x947
    2098:	2070      	movs	r0, #112	; 0x70
    209a:	f002 fdb5 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    209e:	2301      	movs	r3, #1
    20a0:	2203      	movs	r2, #3
    20a2:	4629      	mov	r1, r5
    20a4:	2000      	movs	r0, #0
    20a6:	f002 f843 	bl	4130 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    20aa:	b320      	cbz	r0, 20f6 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xf6>
    20ac:	2601      	movs	r6, #1
    20ae:	f1ba 0f00 	cmp.w	sl, #0
    20b2:	d004      	beq.n	20be <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xbe>
    20b4:	9814      	ldr	r0, [sp, #80]	; 0x50
    20b6:	900d      	str	r0, [sp, #52]	; 0x34
    20b8:	2000      	movs	r0, #0
    20ba:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
    20be:	f1b9 0f00 	cmp.w	r9, #0
    20c2:	bf04      	itt	eq
    20c4:	f89b 002d 	ldrbeq.w	r0, [fp, #45]	; 0x2d
    20c8:	2800      	cmpeq	r0, #0
    20ca:	d000      	beq.n	20ce <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xce>
    20cc:	b32f      	cbz	r7, 211a <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x11a>
    20ce:	f89b 002c 	ldrb.w	r0, [fp, #44]	; 0x2c
    20d2:	b120      	cbz	r0, 20de <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xde>
    20d4:	f002 fbf6 	bl	48c4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    20d8:	2000      	movs	r0, #0
    20da:	f88b 002c 	strb.w	r0, [fp, #44]	; 0x2c
    20de:	b1ff      	cbz	r7, 2120 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x120>
    20e0:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
    20e4:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    20e8:	2301      	movs	r3, #1
    20ea:	2203      	movs	r2, #3
    20ec:	2005      	movs	r0, #5
    20ee:	f002 f81f 	bl	4130 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    20f2:	b340      	cbz	r0, 2146 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x146>
    20f4:	e000      	b.n	20f8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xf8>
    20f6:	e006      	b.n	2106 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x106>
    20f8:	f89b 002d 	ldrb.w	r0, [fp, #45]	; 0x2d
    20fc:	2800      	cmp	r0, #0
    20fe:	bf08      	it	eq
    2100:	f88b 602d 	strbeq.w	r6, [fp, #45]	; 0x2d
    2104:	e015      	b.n	2132 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x132>
    2106:	2002      	movs	r0, #2
    2108:	f002 f8e6 	bl	42d8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    210c:	2001      	movs	r0, #1
    210e:	f002 f8e3 	bl	42d8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2112:	b019      	add	sp, #100	; 0x64
    2114:	2000      	movs	r0, #0
    2116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    211a:	f89b 002c 	ldrb.w	r0, [fp, #44]	; 0x2c
    211e:	b328      	cbz	r0, 216c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x16c>
    2120:	f89b 002d 	ldrb.w	r0, [fp, #45]	; 0x2d
    2124:	b128      	cbz	r0, 2132 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x132>
    2126:	2005      	movs	r0, #5
    2128:	f002 f8d6 	bl	42d8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    212c:	2000      	movs	r0, #0
    212e:	f88b 002d 	strb.w	r0, [fp, #45]	; 0x2d
    2132:	eba5 0008 	sub.w	r0, r5, r8
    2136:	f1a0 0119 	sub.w	r1, r0, #25
    213a:	2900      	cmp	r1, #0
    213c:	dc23      	bgt.n	2186 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x186>
    213e:	f640 2142 	movw	r1, #2626	; 0xa42
    2142:	2070      	movs	r0, #112	; 0x70
    2144:	e013      	b.n	216e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x16e>
    2146:	e019      	b.n	217c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x17c>
    2148:	40000508 	.word	0x40000508
    214c:	2000001c 	.word	0x2000001c
    2150:	20000b80 	.word	0x20000b80
    2154:	20000f00 	.word	0x20000f00
    2158:	20000024 	.word	0x20000024
    215c:	1e847fff 	.word	0x1e847fff
    2160:	0f424000 	.word	0x0f424000
    2164:	f0bdc000 	.word	0xf0bdc000
    2168:	1e848000 	.word	0x1e848000
    216c:	e001      	b.n	2172 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x172>
    216e:	f002 fd4b 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2172:	f002 fbc3 	bl	48fc <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    2176:	f88b 602c 	strb.w	r6, [fp, #44]	; 0x2c
    217a:	e7b0      	b.n	20de <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xde>
    217c:	f240 3112 	movw	r1, #786	; 0x312
    2180:	2070      	movs	r0, #112	; 0x70
    2182:	f002 fd41 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2186:	2203      	movs	r2, #3
    2188:	2301      	movs	r3, #1
    218a:	4610      	mov	r0, r2
    218c:	f001 ffd0 	bl	4130 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    2190:	b300      	cbz	r0, 21d4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1d4>
    2192:	4913      	ldr	r1, [pc, #76]	; (21e0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1e0>)
    2194:	2000      	movs	r0, #0
    2196:	68c9      	ldr	r1, [r1, #12]
    2198:	6008      	str	r0, [r1, #0]
    219a:	4912      	ldr	r1, [pc, #72]	; (21e4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1e4>)
    219c:	6008      	str	r0, [r1, #0]
    219e:	ac0a      	add	r4, sp, #40	; 0x28
    21a0:	4811      	ldr	r0, [pc, #68]	; (21e8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1e8>)
    21a2:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    21a6:	f8c0 1380 	str.w	r1, [r0, #896]	; 0x380
    21aa:	f8c0 2384 	str.w	r2, [r0, #900]	; 0x384
    21ae:	f8c0 3388 	str.w	r3, [r0, #904]	; 0x388
    21b2:	f8c0 c38c 	str.w	ip, [r0, #908]	; 0x38c
    21b6:	ac0e      	add	r4, sp, #56	; 0x38
    21b8:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    21bc:	f8c0 1390 	str.w	r1, [r0, #912]	; 0x390
    21c0:	f8c0 2394 	str.w	r2, [r0, #916]	; 0x394
    21c4:	f8c0 3398 	str.w	r3, [r0, #920]	; 0x398
    21c8:	f8c0 c39c 	str.w	ip, [r0, #924]	; 0x39c
    21cc:	b019      	add	sp, #100	; 0x64
    21ce:	2001      	movs	r0, #1
    21d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    21d4:	f640 214a 	movw	r1, #2634	; 0xa4a
    21d8:	2070      	movs	r0, #112	; 0x70
    21da:	f002 fd15 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    21de:	0000      	.short	0x0000
    21e0:	2000001c 	.word	0x2000001c
    21e4:	40000508 	.word	0x40000508
    21e8:	20000b80 	.word	0x20000b80
    21ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    21f0:	4606      	mov	r6, r0
    21f2:	b083      	sub	sp, #12
    21f4:	7808      	ldrb	r0, [r1, #0]
    21f6:	7390      	strb	r0, [r2, #14]
    21f8:	7acf      	ldrb	r7, [r1, #11]
    21fa:	7357      	strb	r7, [r2, #13]
    21fc:	7a88      	ldrb	r0, [r1, #10]
    21fe:	7310      	strb	r0, [r2, #12]
    2200:	8908      	ldrh	r0, [r1, #8]
    2202:	4614      	mov	r4, r2
    2204:	8150      	strh	r0, [r2, #10]
    2206:	460d      	mov	r5, r1
    2208:	780a      	ldrb	r2, [r1, #0]
    220a:	495f      	ldr	r1, [pc, #380]	; (2388 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x388>)
    220c:	4699      	mov	r9, r3
    220e:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    2212:	424b      	negs	r3, r1
    2214:	f1ac 0801 	sub.w	r8, ip, #1
    2218:	b15a      	cbz	r2, 2232 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x232>
    221a:	43c0      	mvns	r0, r0
    221c:	f8d5 8004 	ldr.w	r8, [r5, #4]
    2220:	f104 0208 	add.w	r2, r4, #8
    2224:	4288      	cmp	r0, r1
    2226:	dd3d      	ble.n	22a4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2a4>
    2228:	f240 51d7 	movw	r1, #1495	; 0x5d7
    222c:	2070      	movs	r0, #112	; 0x70
    222e:	f002 fceb 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2232:	68ee      	ldr	r6, [r5, #12]
    2234:	686d      	ldr	r5, [r5, #4]
    2236:	ea6f 0900 	mvn.w	r9, r0
    223a:	f104 0208 	add.w	r2, r4, #8
    223e:	eb06 0009 	add.w	r0, r6, r9
    2242:	4546      	cmp	r6, r8
    2244:	d904      	bls.n	2250 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x250>
    2246:	f240 51d6 	movw	r1, #1494	; 0x5d6
    224a:	2070      	movs	r0, #112	; 0x70
    224c:	f002 fcdc 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2250:	4589      	cmp	r9, r1
    2252:	dce9      	bgt.n	2228 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x228>
    2254:	4599      	cmp	r9, r3
    2256:	db28      	blt.n	22aa <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2aa>
    2258:	4584      	cmp	ip, r0
    225a:	bfdc      	itt	le
    225c:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    2260:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    2264:	dd05      	ble.n	2272 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x272>
    2266:	2800      	cmp	r0, #0
    2268:	bfbc      	itt	lt
    226a:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    226e:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    2272:	4621      	mov	r1, r4
    2274:	f001 fc6c 	bl	3b50 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2278:	6820      	ldr	r0, [r4, #0]
    227a:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    227e:	1970      	adds	r0, r6, r5
    2280:	1c40      	adds	r0, r0, #1
    2282:	6021      	str	r1, [r4, #0]
    2284:	2f00      	cmp	r7, #0
    2286:	bf08      	it	eq
    2288:	307a      	addeq	r0, #122	; 0x7a
    228a:	d003      	beq.n	2294 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x294>
    228c:	2f01      	cmp	r7, #1
    228e:	bf08      	it	eq
    2290:	3048      	addeq	r0, #72	; 0x48
    2292:	d12d      	bne.n	22f0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2f0>
    2294:	f001 fc40 	bl	3b18 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    2298:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    229c:	6060      	str	r0, [r4, #4]
    229e:	b003      	add	sp, #12
    22a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    22a4:	4601      	mov	r1, r0
    22a6:	4298      	cmp	r0, r3
    22a8:	da04      	bge.n	22b4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2b4>
    22aa:	f44f 61bb 	mov.w	r1, #1496	; 0x5d8
    22ae:	2070      	movs	r0, #112	; 0x70
    22b0:	f002 fcaa 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    22b4:	4584      	cmp	ip, r0
    22b6:	bfdc      	itt	le
    22b8:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
    22bc:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
    22c0:	dd05      	ble.n	22ce <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2ce>
    22c2:	2800      	cmp	r0, #0
    22c4:	bfbc      	itt	lt
    22c6:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
    22ca:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
    22ce:	4621      	mov	r1, r4
    22d0:	f001 fc3e 	bl	3b50 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    22d4:	6820      	ldr	r0, [r4, #0]
    22d6:	2f00      	cmp	r7, #0
    22d8:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    22dc:	f108 0001 	add.w	r0, r8, #1
    22e0:	6021      	str	r1, [r4, #0]
    22e2:	bf08      	it	eq
    22e4:	307a      	addeq	r0, #122	; 0x7a
    22e6:	d008      	beq.n	22fa <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2fa>
    22e8:	2f01      	cmp	r7, #1
    22ea:	bf08      	it	eq
    22ec:	3048      	addeq	r0, #72	; 0x48
    22ee:	d004      	beq.n	22fa <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2fa>
    22f0:	f240 617e 	movw	r1, #1662	; 0x67e
    22f4:	2070      	movs	r0, #112	; 0x70
    22f6:	f002 fc87 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    22fa:	f001 fc0d 	bl	3b18 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    22fe:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    2302:	6061      	str	r1, [r4, #4]
    2304:	8960      	ldrh	r0, [r4, #10]
    2306:	aa01      	add	r2, sp, #4
    2308:	4669      	mov	r1, sp
    230a:	f001 fc21 	bl	3b50 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    230e:	481f      	ldr	r0, [pc, #124]	; (238c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x38c>)
    2310:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
    2314:	2920      	cmp	r1, #32
    2316:	d023      	beq.n	2360 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x360>
    2318:	6900      	ldr	r0, [r0, #16]
    231a:	1d40      	adds	r0, r0, #5
    231c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2320:	e9d4 2100 	ldrd	r2, r1, [r4]
    2324:	1a89      	subs	r1, r1, r2
    2326:	6020      	str	r0, [r4, #0]
    2328:	4408      	add	r0, r1
    232a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    232e:	6060      	str	r0, [r4, #4]
    2330:	464b      	mov	r3, r9
    2332:	4632      	mov	r2, r6
    2334:	4621      	mov	r1, r4
    2336:	68e8      	ldr	r0, [r5, #12]
    2338:	f7ff faf6 	bl	1928 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x94>
    233c:	2800      	cmp	r0, #0
    233e:	bf1c      	itt	ne
    2340:	b003      	addne	sp, #12
    2342:	e8bd 83f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2346:	e9d4 1000 	ldrd	r1, r0, [r4]
    234a:	1a40      	subs	r0, r0, r1
    234c:	4430      	add	r0, r6
    234e:	f026 417f 	bic.w	r1, r6, #4278190080	; 0xff000000
    2352:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2356:	e9c4 1000 	strd	r1, r0, [r4]
    235a:	b003      	add	sp, #12
    235c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2360:	8960      	ldrh	r0, [r4, #10]
    2362:	f106 0709 	add.w	r7, r6, #9
    2366:	b120      	cbz	r0, 2372 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x372>
    2368:	f002 fbd6 	bl	4b18 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    236c:	2800      	cmp	r0, #0
    236e:	bf08      	it	eq
    2370:	3732      	addeq	r7, #50	; 0x32
    2372:	4807      	ldr	r0, [pc, #28]	; (2390 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x390>)
    2374:	7841      	ldrb	r1, [r0, #1]
    2376:	9800      	ldr	r0, [sp, #0]
    2378:	4281      	cmp	r1, r0
    237a:	bf84      	itt	hi
    237c:	1a08      	subhi	r0, r1, r0
    237e:	4407      	addhi	r7, r0
    2380:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
    2384:	e7cc      	b.n	2320 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x320>
    2386:	0000      	.short	0x0000
    2388:	0f424000 	.word	0x0f424000
    238c:	20000f00 	.word	0x20000f00
    2390:	20000024 	.word	0x20000024
    2394:	b570      	push	{r4, r5, r6, lr}
    2396:	4d1e      	ldr	r5, [pc, #120]	; (2410 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x410>)
    2398:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    239c:	2820      	cmp	r0, #32
    239e:	bf18      	it	ne
    23a0:	bd70      	popne	{r4, r5, r6, pc}
    23a2:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
    23a6:	eb05 0082 	add.w	r0, r5, r2, lsl #2
    23aa:	f890 4020 	ldrb.w	r4, [r0, #32]
    23ae:	2c20      	cmp	r4, #32
    23b0:	d029      	beq.n	2406 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x406>
    23b2:	4b18      	ldr	r3, [pc, #96]	; (2414 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x414>)
    23b4:	eb03 1182 	add.w	r1, r3, r2, lsl #6
    23b8:	eb01 0144 	add.w	r1, r1, r4, lsl #1
    23bc:	7849      	ldrb	r1, [r1, #1]
    23be:	f880 1020 	strb.w	r1, [r0, #32]
    23c2:	21ff      	movs	r1, #255	; 0xff
    23c4:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    23c8:	f885 102b 	strb.w	r1, [r5, #43]	; 0x2b
    23cc:	f885 402f 	strb.w	r4, [r5, #47]	; 0x2f
    23d0:	4621      	mov	r1, r4
    23d2:	2002      	movs	r0, #2
    23d4:	f000 f8c6 	bl	2564 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x564>
    23d8:	2000      	movs	r0, #0
    23da:	f885 002a 	strb.w	r0, [r5, #42]	; 0x2a
    23de:	77a8      	strb	r0, [r5, #30]
    23e0:	490d      	ldr	r1, [pc, #52]	; (2418 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x418>)
    23e2:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    23e6:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    23ea:	7d00      	ldrb	r0, [r0, #20]
    23ec:	2800      	cmp	r0, #0
    23ee:	bf08      	it	eq
    23f0:	f002 fd60 	bleq	4eb4 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>
    23f4:	4809      	ldr	r0, [pc, #36]	; (241c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x41c>)
    23f6:	6841      	ldr	r1, [r0, #4]
    23f8:	2900      	cmp	r1, #0
    23fa:	bf08      	it	eq
    23fc:	bd70      	popeq	{r4, r5, r6, pc}
    23fe:	2000      	movs	r0, #0
    2400:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2404:	4708      	bx	r1
    2406:	f240 3152 	movw	r1, #850	; 0x352
    240a:	2070      	movs	r0, #112	; 0x70
    240c:	f002 fbfc 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2410:	20000f00 	.word	0x20000f00
    2414:	20000e80 	.word	0x20000e80
    2418:	20000b80 	.word	0x20000b80
    241c:	2000001c 	.word	0x2000001c
    2420:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    2424:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 24e0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x4e0>
    2428:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    242c:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    2430:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    2434:	2c20      	cmp	r4, #32
    2436:	bf08      	it	eq
    2438:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    243c:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 24e4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x4e4>
    2440:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 24e8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x4e8>
    2444:	f5aa 7940 	sub.w	r9, sl, #768	; 0x300
    2448:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
    244c:	2607      	movs	r6, #7
    244e:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    2452:	2801      	cmp	r0, #1
    2454:	d00e      	beq.n	2474 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x474>
    2456:	2804      	cmp	r0, #4
    2458:	bf08      	it	eq
    245a:	2602      	moveq	r6, #2
    245c:	d00a      	beq.n	2474 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x474>
    245e:	2805      	cmp	r0, #5
    2460:	bf0c      	ite	eq
    2462:	2603      	moveq	r6, #3
    2464:	2806      	cmpne	r0, #6
    2466:	d005      	beq.n	2474 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x474>
    2468:	f640 01aa 	movw	r1, #2218	; 0x8aa
    246c:	f04f 0070 	mov.w	r0, #112	; 0x70
    2470:	f002 fbca 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2474:	f1bb 0f00 	cmp.w	fp, #0
    2478:	bf18      	it	ne
    247a:	f3af 8000 	nopne.w
    247e:	f3ef 8010 	mrs	r0, PRIMASK
    2482:	b672      	cpsid	i
    2484:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    2488:	784a      	ldrb	r2, [r1, #1]
    248a:	eb08 0185 	add.w	r1, r8, r5, lsl #2
    248e:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    2492:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    2496:	42a2      	cmp	r2, r4
    2498:	bf04      	itt	eq
    249a:	2220      	moveq	r2, #32
    249c:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    24a0:	b1b8      	cbz	r0, 24d2 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x4d2>
    24a2:	462a      	mov	r2, r5
    24a4:	4621      	mov	r1, r4
    24a6:	2001      	movs	r0, #1
    24a8:	f000 f85c 	bl	2564 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x564>
    24ac:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    24b0:	eb09 00c1 	add.w	r0, r9, r1, lsl #3
    24b4:	f859 2031 	ldr.w	r2, [r9, r1, lsl #3]
    24b8:	6840      	ldr	r0, [r0, #4]
    24ba:	4631      	mov	r1, r6
    24bc:	4790      	blx	r2
    24be:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    24c2:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    24c6:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    24ca:	2c20      	cmp	r4, #32
    24cc:	d1bc      	bne.n	2448 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x448>
    24ce:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    24d2:	4806      	ldr	r0, [pc, #24]	; (24ec <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x4ec>)
    24d4:	2800      	cmp	r0, #0
    24d6:	bf18      	it	ne
    24d8:	f3af 8000 	nopne.w
    24dc:	b662      	cpsie	i
    24de:	e7e0      	b.n	24a2 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x4a2>
    24e0:	20000f00 	.word	0x20000f00
    24e4:	00000000 	.word	0x00000000
    24e8:	20000e80 	.word	0x20000e80
    24ec:	00000000 	.word	0x00000000
    24f0:	b510      	push	{r4, lr}
    24f2:	4604      	mov	r4, r0
    24f4:	6800      	ldr	r0, [r0, #0]
    24f6:	f00a feb5 	bl	d264 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    24fa:	4602      	mov	r2, r0
    24fc:	8960      	ldrh	r0, [r4, #10]
    24fe:	7a21      	ldrb	r1, [r4, #8]
    2500:	4b14      	ldr	r3, [pc, #80]	; (2554 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x554>)
    2502:	4408      	add	r0, r1
    2504:	1c41      	adds	r1, r0, #1
    2506:	1850      	adds	r0, r2, r1
    2508:	429a      	cmp	r2, r3
    250a:	d904      	bls.n	2516 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x516>
    250c:	f240 51d6 	movw	r1, #1494	; 0x5d6
    2510:	2070      	movs	r0, #112	; 0x70
    2512:	f002 fb79 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2516:	4a10      	ldr	r2, [pc, #64]	; (2558 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x558>)
    2518:	4291      	cmp	r1, r2
    251a:	dd04      	ble.n	2526 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x526>
    251c:	f240 51d7 	movw	r1, #1495	; 0x5d7
    2520:	2070      	movs	r0, #112	; 0x70
    2522:	f002 fb71 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2526:	4a0d      	ldr	r2, [pc, #52]	; (255c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x55c>)
    2528:	4291      	cmp	r1, r2
    252a:	da04      	bge.n	2536 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x536>
    252c:	f44f 61bb 	mov.w	r1, #1496	; 0x5d8
    2530:	2070      	movs	r0, #112	; 0x70
    2532:	f002 fb69 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2536:	490a      	ldr	r1, [pc, #40]	; (2560 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x560>)
    2538:	4281      	cmp	r1, r0
    253a:	bfde      	ittt	le
    253c:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    2540:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    2544:	bd10      	pople	{r4, pc}
    2546:	2800      	cmp	r0, #0
    2548:	bfbc      	itt	lt
    254a:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    254e:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    2552:	bd10      	pop	{r4, pc}
    2554:	1e847fff 	.word	0x1e847fff
    2558:	0f424000 	.word	0x0f424000
    255c:	f0bdc000 	.word	0xf0bdc000
    2560:	1e848000 	.word	0x1e848000
    2564:	f8df c054 	ldr.w	ip, [pc, #84]	; 25bc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x5bc>
    2568:	b510      	push	{r4, lr}
    256a:	2300      	movs	r3, #0
    256c:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    2570:	2807      	cmp	r0, #7
    2572:	d21e      	bcs.n	25b2 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x5b2>
    2574:	e8df f000 	tbb	[pc, r0]
    2578:	05050505 	.word	0x05050505
    257c:	00040404 	.word	0x00040404
    2580:	2301      	movs	r3, #1
    2582:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    2586:	2b00      	cmp	r3, #0
    2588:	bf08      	it	eq
    258a:	bd10      	popeq	{r4, pc}
    258c:	480c      	ldr	r0, [pc, #48]	; (25c0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x5c0>)
    258e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    2592:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    2596:	2820      	cmp	r0, #32
    2598:	bf0e      	itee	eq
    259a:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    259e:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    25a2:	7041      	strbne	r1, [r0, #1]
    25a4:	2020      	movs	r0, #32
    25a6:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    25aa:	7058      	strb	r0, [r3, #1]
    25ac:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    25b0:	bd10      	pop	{r4, pc}
    25b2:	f44f 7118 	mov.w	r1, #608	; 0x260
    25b6:	2070      	movs	r0, #112	; 0x70
    25b8:	f002 fb26 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    25bc:	20000e80 	.word	0x20000e80
    25c0:	20000f00 	.word	0x20000f00
    25c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    25c8:	4681      	mov	r9, r0
    25ca:	4856      	ldr	r0, [pc, #344]	; (2724 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x724>)
    25cc:	4688      	mov	r8, r1
    25ce:	eb00 0088 	add.w	r0, r0, r8, lsl #2
    25d2:	9000      	str	r0, [sp, #0]
    25d4:	f890 4020 	ldrb.w	r4, [r0, #32]
    25d8:	f1b9 0f01 	cmp.w	r9, #1
    25dc:	4625      	mov	r5, r4
    25de:	bf18      	it	ne
    25e0:	f1b9 0f02 	cmpne.w	r9, #2
    25e4:	d005      	beq.n	25f2 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x5f2>
    25e6:	f640 2181 	movw	r1, #2689	; 0xa81
    25ea:	f04f 0070 	mov.w	r0, #112	; 0x70
    25ee:	f002 fb0b 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    25f2:	2700      	movs	r7, #0
    25f4:	2d20      	cmp	r5, #32
    25f6:	d044      	beq.n	2682 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x682>
    25f8:	484a      	ldr	r0, [pc, #296]	; (2724 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x724>)
    25fa:	2600      	movs	r6, #0
    25fc:	7f80      	ldrb	r0, [r0, #30]
    25fe:	2800      	cmp	r0, #0
    2600:	bf08      	it	eq
    2602:	2602      	moveq	r6, #2
    2604:	f001 fc06 	bl	3e14 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2608:	f8df a11c 	ldr.w	sl, [pc, #284]	; 2728 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x728>
    260c:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    2610:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
    2614:	688a      	ldr	r2, [r1, #8]
    2616:	68c9      	ldr	r1, [r1, #12]
    2618:	1a12      	subs	r2, r2, r0
    261a:	1a09      	subs	r1, r1, r0
    261c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    2620:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2624:	4296      	cmp	r6, r2
    2626:	bf99      	ittee	ls
    2628:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    262c:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    2630:	4a3e      	ldrhi	r2, [pc, #248]	; (272c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x72c>)
    2632:	eb02 1b88 	addhi.w	fp, r2, r8, lsl #6
    2636:	d922      	bls.n	267e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x67e>
    2638:	4622      	mov	r2, r4
    263a:	eb0b 0142 	add.w	r1, fp, r2, lsl #1
    263e:	784c      	ldrb	r4, [r1, #1]
    2640:	2c20      	cmp	r4, #32
    2642:	d014      	beq.n	266e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x66e>
    2644:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    2648:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
    264c:	f8d1 c008 	ldr.w	ip, [r1, #8]
    2650:	68c9      	ldr	r1, [r1, #12]
    2652:	ebac 0c00 	sub.w	ip, ip, r0
    2656:	1a09      	subs	r1, r1, r0
    2658:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    265c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2660:	4566      	cmp	r6, ip
    2662:	bf9c      	itt	ls
    2664:	f5bc 0f00 	cmpls.w	ip, #8388608	; 0x800000
    2668:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    266c:	d8e4      	bhi.n	2638 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x638>
    266e:	2a20      	cmp	r2, #32
    2670:	d005      	beq.n	267e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x67e>
    2672:	4643      	mov	r3, r8
    2674:	2120      	movs	r1, #32
    2676:	2004      	movs	r0, #4
    2678:	f7ff f91a 	bl	18b0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    267c:	4604      	mov	r4, r0
    267e:	42ac      	cmp	r4, r5
    2680:	d116      	bne.n	26b0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x6b0>
    2682:	482b      	ldr	r0, [pc, #172]	; (2730 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x730>)
    2684:	2800      	cmp	r0, #0
    2686:	bf18      	it	ne
    2688:	f3af 8000 	nopne.w
    268c:	f001 fbc2 	bl	3e14 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2690:	4c24      	ldr	r4, [pc, #144]	; (2724 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x724>)
    2692:	4603      	mov	r3, r0
    2694:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
    2698:	2820      	cmp	r0, #32
    269a:	d00c      	beq.n	26b6 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x6b6>
    269c:	68e0      	ldr	r0, [r4, #12]
    269e:	1c99      	adds	r1, r3, #2
    26a0:	1a08      	subs	r0, r1, r0
    26a2:	0200      	lsls	r0, r0, #8
    26a4:	17c1      	asrs	r1, r0, #31
    26a6:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    26aa:	1200      	asrs	r0, r0, #8
    26ac:	2800      	cmp	r0, #0
    26ae:	dd02      	ble.n	26b6 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x6b6>
    26b0:	2000      	movs	r0, #0
    26b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    26b6:	2d20      	cmp	r5, #32
    26b8:	d00d      	beq.n	26d6 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x6d6>
    26ba:	462a      	mov	r2, r5
    26bc:	4649      	mov	r1, r9
    26be:	4618      	mov	r0, r3
    26c0:	f7ff fb2e 	bl	1d20 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x48c>
    26c4:	b320      	cbz	r0, 2710 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x710>
    26c6:	9800      	ldr	r0, [sp, #0]
    26c8:	f880 7023 	strb.w	r7, [r0, #35]	; 0x23
    26cc:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    26d0:	2001      	movs	r0, #1
    26d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    26d6:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    26da:	b118      	cbz	r0, 26e4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x6e4>
    26dc:	f002 f8f2 	bl	48c4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    26e0:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
    26e4:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    26e8:	b120      	cbz	r0, 26f4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x6f4>
    26ea:	2005      	movs	r0, #5
    26ec:	f001 fdf4 	bl	42d8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    26f0:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
    26f4:	2004      	movs	r0, #4
    26f6:	f001 fdef 	bl	42d8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    26fa:	f001 fe5d 	bl	43b8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    26fe:	2020      	movs	r0, #32
    2700:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    2704:	480b      	ldr	r0, [pc, #44]	; (2734 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x734>)
    2706:	68c0      	ldr	r0, [r0, #12]
    2708:	6007      	str	r7, [r0, #0]
    270a:	480b      	ldr	r0, [pc, #44]	; (2738 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x738>)
    270c:	6007      	str	r7, [r0, #0]
    270e:	e7df      	b.n	26d0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x6d0>
    2710:	4643      	mov	r3, r8
    2712:	462a      	mov	r2, r5
    2714:	2120      	movs	r1, #32
    2716:	2004      	movs	r0, #4
    2718:	f7ff f8ca 	bl	18b0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    271c:	2000      	movs	r0, #0
    271e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2722:	0000      	.short	0x0000
    2724:	20000f00 	.word	0x20000f00
    2728:	20000b80 	.word	0x20000b80
    272c:	20000e80 	.word	0x20000e80
    2730:	00000000 	.word	0x00000000
    2734:	2000001c 	.word	0x2000001c
    2738:	40000508 	.word	0x40000508

0000273c <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    273c:	4906      	ldr	r1, [pc, #24]	; (2758 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    273e:	b510      	push	{r4, lr}
    2740:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
    2744:	2a20      	cmp	r2, #32
    2746:	bf1c      	itt	ne
    2748:	7788      	strbne	r0, [r1, #30]
    274a:	bd10      	popne	{r4, pc}
    274c:	f240 31b1 	movw	r1, #945	; 0x3b1
    2750:	2070      	movs	r0, #112	; 0x70
    2752:	f002 fa59 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2756:	0000      	.short	0x0000
    2758:	20000f00 	.word	0x20000f00

0000275c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    275c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2760:	4e5e      	ldr	r6, [pc, #376]	; (28dc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x180>)
    2762:	4607      	mov	r7, r0
    2764:	b085      	sub	sp, #20
    2766:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    276a:	4688      	mov	r8, r1
    276c:	2820      	cmp	r0, #32
    276e:	d051      	beq.n	2814 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xb8>
    2770:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    2774:	f106 040c 	add.w	r4, r6, #12
    2778:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    277c:	f5a6 7960 	sub.w	r9, r6, #896	; 0x380
    2780:	eb09 0ac0 	add.w	sl, r9, r0, lsl #3
    2784:	2020      	movs	r0, #32
    2786:	f88d 0000 	strb.w	r0, [sp]
    278a:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    278e:	aa03      	add	r2, sp, #12
    2790:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    2794:	a901      	add	r1, sp, #4
    2796:	f890 5020 	ldrb.w	r5, [r0, #32]
    279a:	6930      	ldr	r0, [r6, #16]
    279c:	9002      	str	r0, [sp, #8]
    279e:	6830      	ldr	r0, [r6, #0]
    27a0:	4438      	add	r0, r7
    27a2:	f001 f9d5 	bl	3b50 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    27a6:	f8da 000c 	ldr.w	r0, [sl, #12]
    27aa:	9901      	ldr	r1, [sp, #4]
    27ac:	2f65      	cmp	r7, #101	; 0x65
    27ae:	4408      	add	r0, r1
    27b0:	d335      	bcc.n	281e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc2>
    27b2:	4b4b      	ldr	r3, [pc, #300]	; (28e0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x184>)
    27b4:	2100      	movs	r1, #0
    27b6:	1bdb      	subs	r3, r3, r7
    27b8:	4189      	sbcs	r1, r1
    27ba:	d330      	bcc.n	281e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc2>
    27bc:	6821      	ldr	r1, [r4, #0]
    27be:	1a41      	subs	r1, r0, r1
    27c0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    27c4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    27c8:	d829      	bhi.n	281e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc2>
    27ca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    27ce:	6060      	str	r0, [r4, #4]
    27d0:	4630      	mov	r0, r6
    27d2:	f884 800c 	strb.w	r8, [r4, #12]
    27d6:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
    27da:	46ea      	mov	sl, sp
    27dc:	2d20      	cmp	r5, #32
    27de:	bf1c      	itt	ne
    27e0:	4940      	ldrne	r1, [pc, #256]	; (28e4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x188>)
    27e2:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    27e6:	d03e      	beq.n	2866 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x10a>
    27e8:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    27ec:	eb09 08c0 	add.w	r8, r9, r0, lsl #3
    27f0:	6860      	ldr	r0, [r4, #4]
    27f2:	f8d8 2008 	ldr.w	r2, [r8, #8]
    27f6:	4621      	mov	r1, r4
    27f8:	1a10      	subs	r0, r2, r0
    27fa:	0200      	lsls	r0, r0, #8
    27fc:	17c2      	asrs	r2, r0, #31
    27fe:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    2802:	f108 0608 	add.w	r6, r8, #8
    2806:	1200      	asrs	r0, r0, #8
    2808:	d41b      	bmi.n	2842 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xe6>
    280a:	8970      	ldrh	r0, [r6, #10]
    280c:	b358      	cbz	r0, 2866 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x10a>
    280e:	8948      	ldrh	r0, [r1, #10]
    2810:	b148      	cbz	r0, 2826 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    2812:	e028      	b.n	2866 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x10a>
    2814:	f640 314c 	movw	r1, #2892	; 0xb4c
    2818:	2070      	movs	r0, #112	; 0x70
    281a:	f002 f9f5 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    281e:	b005      	add	sp, #20
    2820:	2001      	movs	r0, #1
    2822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2826:	4620      	mov	r0, r4
    2828:	f7ff fe62 	bl	24f0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x4f0>
    282c:	f001 f974 	bl	3b18 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    2830:	6831      	ldr	r1, [r6, #0]
    2832:	1a08      	subs	r0, r1, r0
    2834:	0200      	lsls	r0, r0, #8
    2836:	17c1      	asrs	r1, r0, #31
    2838:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    283c:	1200      	asrs	r0, r0, #8
    283e:	2833      	cmp	r0, #51	; 0x33
    2840:	da11      	bge.n	2866 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x10a>
    2842:	f88a 5000 	strb.w	r5, [sl]
    2846:	f898 1014 	ldrb.w	r1, [r8, #20]
    284a:	7b20      	ldrb	r0, [r4, #12]
    284c:	4281      	cmp	r1, r0
    284e:	d805      	bhi.n	285c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    2850:	9802      	ldr	r0, [sp, #8]
    2852:	6060      	str	r0, [r4, #4]
    2854:	b005      	add	sp, #20
    2856:	2002      	movs	r0, #2
    2858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    285c:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    2860:	7845      	ldrb	r5, [r0, #1]
    2862:	2d20      	cmp	r5, #32
    2864:	d1c0      	bne.n	27e8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x8c>
    2866:	2005      	movs	r0, #5
    2868:	f001 fd36 	bl	42d8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    286c:	4c1b      	ldr	r4, [pc, #108]	; (28dc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x180>)
    286e:	f04f 30ff 	mov.w	r0, #4294967295
    2872:	60a0      	str	r0, [r4, #8]
    2874:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    2878:	f89d 2000 	ldrb.w	r2, [sp]
    287c:	2120      	movs	r1, #32
    287e:	2a20      	cmp	r2, #32
    2880:	bf13      	iteet	ne
    2882:	2005      	movne	r0, #5
    2884:	eb04 0083 	addeq.w	r0, r4, r3, lsl #2
    2888:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    288c:	f7ff f810 	blne	18b0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    2890:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    2894:	4913      	ldr	r1, [pc, #76]	; (28e4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x188>)
    2896:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    289a:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
    289e:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    28a2:	7048      	strb	r0, [r1, #1]
    28a4:	6820      	ldr	r0, [r4, #0]
    28a6:	4438      	add	r0, r7
    28a8:	6020      	str	r0, [r4, #0]
    28aa:	20ff      	movs	r0, #255	; 0xff
    28ac:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    28b0:	7e60      	ldrb	r0, [r4, #25]
    28b2:	2801      	cmp	r0, #1
    28b4:	d105      	bne.n	28c2 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x166>
    28b6:	6920      	ldr	r0, [r4, #16]
    28b8:	1e40      	subs	r0, r0, #1
    28ba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    28be:	f001 fb51 	bl	3f64 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    28c2:	f89d 0000 	ldrb.w	r0, [sp]
    28c6:	2820      	cmp	r0, #32
    28c8:	d003      	beq.n	28d2 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x176>
    28ca:	4807      	ldr	r0, [pc, #28]	; (28e8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x18c>)
    28cc:	7840      	ldrb	r0, [r0, #1]
    28ce:	f002 fa6b 	bl	4da8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    28d2:	b005      	add	sp, #20
    28d4:	2000      	movs	r0, #0
    28d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    28da:	0000      	.short	0x0000
    28dc:	20000f00 	.word	0x20000f00
    28e0:	0f424000 	.word	0x0f424000
    28e4:	20000e80 	.word	0x20000e80
    28e8:	2000001c 	.word	0x2000001c

000028ec <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
    28ec:	4806      	ldr	r0, [pc, #24]	; (2908 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA+0x1c>)
    28ee:	b510      	push	{r4, lr}
    28f0:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
    28f4:	2920      	cmp	r1, #32
    28f6:	bf1c      	itt	ne
    28f8:	7e00      	ldrbne	r0, [r0, #24]
    28fa:	bd10      	popne	{r4, pc}
    28fc:	f640 3145 	movw	r1, #2885	; 0xb45
    2900:	2070      	movs	r0, #112	; 0x70
    2902:	f002 f981 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2906:	0000      	.short	0x0000
    2908:	20000f00 	.word	0x20000f00

0000290c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>:
    290c:	4602      	mov	r2, r0
    290e:	4b14      	ldr	r3, [pc, #80]	; (2960 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x54>)
    2910:	b510      	push	{r4, lr}
    2912:	4408      	add	r0, r1
    2914:	429a      	cmp	r2, r3
    2916:	d904      	bls.n	2922 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x16>
    2918:	f240 51d6 	movw	r1, #1494	; 0x5d6
    291c:	2070      	movs	r0, #112	; 0x70
    291e:	f002 f973 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2922:	4a10      	ldr	r2, [pc, #64]	; (2964 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x58>)
    2924:	4291      	cmp	r1, r2
    2926:	dd04      	ble.n	2932 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x26>
    2928:	f240 51d7 	movw	r1, #1495	; 0x5d7
    292c:	2070      	movs	r0, #112	; 0x70
    292e:	f002 f96b 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2932:	4a0d      	ldr	r2, [pc, #52]	; (2968 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x5c>)
    2934:	4291      	cmp	r1, r2
    2936:	da04      	bge.n	2942 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x36>
    2938:	f44f 61bb 	mov.w	r1, #1496	; 0x5d8
    293c:	2070      	movs	r0, #112	; 0x70
    293e:	f002 f963 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2942:	490a      	ldr	r1, [pc, #40]	; (296c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x60>)
    2944:	4281      	cmp	r1, r0
    2946:	bfde      	ittt	le
    2948:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    294c:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    2950:	bd10      	pople	{r4, pc}
    2952:	2800      	cmp	r0, #0
    2954:	bfbc      	itt	lt
    2956:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    295a:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    295e:	bd10      	pop	{r4, pc}
    2960:	1e847fff 	.word	0x1e847fff
    2964:	0f424000 	.word	0x0f424000
    2968:	f0bdc000 	.word	0xf0bdc000
    296c:	1e848000 	.word	0x1e848000

00002970 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>:
    2970:	4b15      	ldr	r3, [pc, #84]	; (29c8 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x58>)
    2972:	1a0a      	subs	r2, r1, r0
    2974:	f04f 0c00 	mov.w	ip, #0
    2978:	1ad3      	subs	r3, r2, r3
    297a:	f17c 0300 	sbcs.w	r3, ip, #0
    297e:	bf3c      	itt	cc
    2980:	4610      	movcc	r0, r2
    2982:	4770      	bxcc	lr
    2984:	b510      	push	{r4, lr}
    2986:	1a43      	subs	r3, r0, r1
    2988:	4c0f      	ldr	r4, [pc, #60]	; (29c8 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x58>)
    298a:	1b1c      	subs	r4, r3, r4
    298c:	f17c 0c00 	sbcs.w	ip, ip, #0
    2990:	bf3c      	itt	cc
    2992:	4610      	movcc	r0, r2
    2994:	bd10      	popcc	{r4, pc}
    2996:	f8df c034 	ldr.w	ip, [pc, #52]	; 29cc <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x5c>
    299a:	4594      	cmp	ip, r2
    299c:	bf3f      	itttt	cc
    299e:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    29a2:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    29a6:	4408      	addcc	r0, r1
    29a8:	bd10      	popcc	{r4, pc}
    29aa:	459c      	cmp	ip, r3
    29ac:	d206      	bcs.n	29bc <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x4c>
    29ae:	f5c1 2190 	rsb	r1, r1, #294912	; 0x48000
    29b2:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    29b6:	4408      	add	r0, r1
    29b8:	4240      	negs	r0, r0
    29ba:	bd10      	pop	{r4, pc}
    29bc:	f640 21dd 	movw	r1, #2781	; 0xadd
    29c0:	2070      	movs	r0, #112	; 0x70
    29c2:	f002 f921 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    29c6:	0000      	.short	0x0000
    29c8:	0f424000 	.word	0x0f424000
    29cc:	1e847fff 	.word	0x1e847fff

000029d0 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>:
    29d0:	4907      	ldr	r1, [pc, #28]	; (29f0 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x20>)
    29d2:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
    29d6:	4282      	cmp	r2, r0
    29d8:	bf04      	itt	eq
    29da:	6848      	ldreq	r0, [r1, #4]
    29dc:	4770      	bxeq	lr
    29de:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    29e2:	4904      	ldr	r1, [pc, #16]	; (29f4 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x24>)
    29e4:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    29e8:	3008      	adds	r0, #8
    29ea:	f7ff bd81 	b.w	24f0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x4f0>
    29ee:	0000      	.short	0x0000
    29f0:	20000f00 	.word	0x20000f00
    29f4:	20000b80 	.word	0x20000b80

000029f8 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>:
    29f8:	490e      	ldr	r1, [pc, #56]	; (2a34 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x3c>)
    29fa:	b510      	push	{r4, lr}
    29fc:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    2a00:	2820      	cmp	r0, #32
    2a02:	d012      	beq.n	2a2a <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x32>
    2a04:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    2a08:	f5a1 7260 	sub.w	r2, r1, #896	; 0x380
    2a0c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2a10:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    2a14:	f891 102f 	ldrb.w	r1, [r1, #47]	; 0x2f
    2a18:	6840      	ldr	r0, [r0, #4]
    2a1a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2a1e:	f852 2031 	ldr.w	r2, [r2, r1, lsl #3]
    2a22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2a26:	2104      	movs	r1, #4
    2a28:	4710      	bx	r2
    2a2a:	f640 018d 	movw	r1, #2189	; 0x88d
    2a2e:	2070      	movs	r0, #112	; 0x70
    2a30:	f002 f8ea 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2a34:	20000f00 	.word	0x20000f00

00002a38 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    2a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a3a:	4d6c      	ldr	r5, [pc, #432]	; (2bec <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b4>)
    2a3c:	4a6c      	ldr	r2, [pc, #432]	; (2bf0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b8>)
    2a3e:	f505 7460 	add.w	r4, r5, #896	; 0x380
    2a42:	2601      	movs	r6, #1
    2a44:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
    2a48:	2808      	cmp	r0, #8
    2a4a:	d26e      	bcs.n	2b2a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xf2>
    2a4c:	e8df f000 	tbb	[pc, r0]
    2a50:	ab997304 	.word	0xab997304
    2a54:	b5b043c9 	.word	0xb5b043c9
    2a58:	b919      	cbnz	r1, 2a62 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a>
    2a5a:	f001 ff4f 	bl	48fc <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    2a5e:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    2a62:	8ae0      	ldrh	r0, [r4, #22]
    2a64:	b110      	cbz	r0, 2a6c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x34>
    2a66:	f002 f857 	bl	4b18 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2a6a:	b190      	cbz	r0, 2a92 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x5a>
    2a6c:	f7ff fc92 	bl	2394 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x394>
    2a70:	20ff      	movs	r0, #255	; 0xff
    2a72:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    2a76:	68a1      	ldr	r1, [r4, #8]
    2a78:	f1b1 3fff 	cmp.w	r1, #4294967295
    2a7c:	d005      	beq.n	2a8a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x52>
    2a7e:	2301      	movs	r3, #1
    2a80:	2203      	movs	r2, #3
    2a82:	2005      	movs	r0, #5
    2a84:	f001 fb54 	bl	4130 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    2a88:	b140      	cbz	r0, 2a9c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x64>
    2a8a:	7e60      	ldrb	r0, [r4, #25]
    2a8c:	2801      	cmp	r0, #1
    2a8e:	d110      	bne.n	2ab2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x7a>
    2a90:	e009      	b.n	2aa6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6e>
    2a92:	f640 013d 	movw	r1, #2109	; 0x83d
    2a96:	2070      	movs	r0, #112	; 0x70
    2a98:	f002 f8b6 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2a9c:	f640 0142 	movw	r1, #2114	; 0x842
    2aa0:	2070      	movs	r0, #112	; 0x70
    2aa2:	f002 f8b1 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2aa6:	6920      	ldr	r0, [r4, #16]
    2aa8:	1e40      	subs	r0, r0, #1
    2aaa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2aae:	f001 fa59 	bl	3f64 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    2ab2:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2ab6:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    2aba:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2abe:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    2ac2:	6840      	ldr	r0, [r0, #4]
    2ac4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2ac8:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    2acc:	b001      	add	sp, #4
    2ace:	2101      	movs	r1, #1
    2ad0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    2ad4:	4710      	bx	r2
    2ad6:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2ada:	b140      	cbz	r0, 2aee <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xb6>
    2adc:	b919      	cbnz	r1, 2ae6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xae>
    2ade:	f001 ff0d 	bl	48fc <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    2ae2:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    2ae6:	2000      	movs	r0, #0
    2ae8:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    2aec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2aee:	f7ff fc51 	bl	2394 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x394>
    2af2:	f04f 30ff 	mov.w	r0, #4294967295
    2af6:	60a0      	str	r0, [r4, #8]
    2af8:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    2afc:	f88d 0000 	strb.w	r0, [sp]
    2b00:	f89d 0000 	ldrb.w	r0, [sp]
    2b04:	b190      	cbz	r0, 2b2c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xf4>
    2b06:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2b0a:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    2b0e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2b12:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    2b16:	6840      	ldr	r0, [r0, #4]
    2b18:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2b1c:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    2b20:	b001      	add	sp, #4
    2b22:	2106      	movs	r1, #6
    2b24:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    2b28:	4710      	bx	r2
    2b2a:	e05a      	b.n	2be2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1aa>
    2b2c:	f640 015a 	movw	r1, #2138	; 0x85a
    2b30:	2070      	movs	r0, #112	; 0x70
    2b32:	f002 f869 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2b36:	f7ff fc2d 	bl	2394 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x394>
    2b3a:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    2b3e:	f001 ffeb 	bl	4b18 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2b42:	b118      	cbz	r0, 2b4c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x114>
    2b44:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    2b48:	b128      	cbz	r0, 2b56 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x11e>
    2b4a:	e008      	b.n	2b5e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x126>
    2b4c:	f640 0168 	movw	r1, #2152	; 0x868
    2b50:	2070      	movs	r0, #112	; 0x70
    2b52:	f002 f859 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2b56:	f001 fed1 	bl	48fc <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    2b5a:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    2b5e:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2b62:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    2b66:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2b6a:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    2b6e:	6840      	ldr	r0, [r0, #4]
    2b70:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2b74:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    2b78:	b001      	add	sp, #4
    2b7a:	2100      	movs	r1, #0
    2b7c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    2b80:	4710      	bx	r2
    2b82:	f001 fc63 	bl	444c <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    2b86:	8ae0      	ldrh	r0, [r4, #22]
    2b88:	b110      	cbz	r0, 2b90 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x158>
    2b8a:	f001 ffc5 	bl	4b18 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2b8e:	b128      	cbz	r0, 2b9c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x164>
    2b90:	4818      	ldr	r0, [pc, #96]	; (2bf4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1bc>)
    2b92:	7800      	ldrb	r0, [r0, #0]
    2b94:	2803      	cmp	r0, #3
    2b96:	bf08      	it	eq
    2b98:	7766      	strbeq	r6, [r4, #29]
    2b9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2b9c:	f640 0172 	movw	r1, #2162	; 0x872
    2ba0:	2070      	movs	r0, #112	; 0x70
    2ba2:	f002 f831 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2ba6:	4814      	ldr	r0, [pc, #80]	; (2bf8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c0>)
    2ba8:	6006      	str	r6, [r0, #0]
    2baa:	68d0      	ldr	r0, [r2, #12]
    2bac:	6006      	str	r6, [r0, #0]
    2bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2bb0:	7810      	ldrb	r0, [r2, #0]
    2bb2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    2bb6:	f002 b8f7 	b.w	4da8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2bba:	f7ff fbeb 	bl	2394 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x394>
    2bbe:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2bc2:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    2bc6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2bca:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    2bce:	6840      	ldr	r0, [r0, #4]
    2bd0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2bd4:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    2bd8:	b001      	add	sp, #4
    2bda:	2105      	movs	r1, #5
    2bdc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    2be0:	4710      	bx	r2
    2be2:	f640 0185 	movw	r1, #2181	; 0x885
    2be6:	2070      	movs	r0, #112	; 0x70
    2be8:	f002 f80e 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2bec:	20000b80 	.word	0x20000b80
    2bf0:	2000001c 	.word	0x2000001c
    2bf4:	20000024 	.word	0x20000024
    2bf8:	40000508 	.word	0x40000508

00002bfc <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
    2bfc:	4803      	ldr	r0, [pc, #12]	; (2c0c <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI+0x10>)
    2bfe:	b510      	push	{r4, lr}
    2c00:	7840      	ldrb	r0, [r0, #1]
    2c02:	f00a fb2f 	bl	d264 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2c06:	b280      	uxth	r0, r0
    2c08:	bd10      	pop	{r4, pc}
    2c0a:	0000      	.short	0x0000
    2c0c:	20000024 	.word	0x20000024

00002c10 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    2c10:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2c14:	4682      	mov	sl, r0
    2c16:	48e0      	ldr	r0, [pc, #896]	; (2f98 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x388>)
    2c18:	b08b      	sub	sp, #44	; 0x2c
    2c1a:	6800      	ldr	r0, [r0, #0]
    2c1c:	4ddf      	ldr	r5, [pc, #892]	; (2f9c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x38c>)
    2c1e:	05c0      	lsls	r0, r0, #23
    2c20:	0dc0      	lsrs	r0, r0, #23
    2c22:	d00e      	beq.n	2c42 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    2c24:	3810      	subs	r0, #16
    2c26:	b240      	sxtb	r0, r0
    2c28:	2800      	cmp	r0, #0
    2c2a:	bfb8      	it	lt
    2c2c:	f000 000f 	andlt.w	r0, r0, #15
    2c30:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    2c34:	bfac      	ite	ge
    2c36:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    2c3a:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    2c3e:	0940      	lsrs	r0, r0, #5
    2c40:	d00d      	beq.n	2c5e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    2c42:	980c      	ldr	r0, [sp, #48]	; 0x30
    2c44:	f04f 0b00 	mov.w	fp, #0
    2c48:	7800      	ldrb	r0, [r0, #0]
    2c4a:	2800      	cmp	r0, #0
    2c4c:	bf18      	it	ne
    2c4e:	2801      	cmpne	r0, #1
    2c50:	d018      	beq.n	2c84 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    2c52:	f240 711c 	movw	r1, #1820	; 0x71c
    2c56:	f04f 0070 	mov.w	r0, #112	; 0x70
    2c5a:	f001 ffd5 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c5e:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    2c62:	f04f 0b01 	mov.w	fp, #1
    2c66:	2820      	cmp	r0, #32
    2c68:	d007      	beq.n	2c7a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    2c6a:	980c      	ldr	r0, [sp, #48]	; 0x30
    2c6c:	7800      	ldrb	r0, [r0, #0]
    2c6e:	b148      	cbz	r0, 2c84 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    2c70:	f44f 61e3 	mov.w	r1, #1816	; 0x718
    2c74:	2070      	movs	r0, #112	; 0x70
    2c76:	f001 ffc7 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c7a:	f240 7115 	movw	r1, #1813	; 0x715
    2c7e:	2070      	movs	r0, #112	; 0x70
    2c80:	f001 ffc2 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c84:	4cc6      	ldr	r4, [pc, #792]	; (2fa0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x390>)
    2c86:	b124      	cbz	r4, 2c92 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    2c88:	2100      	movs	r1, #0
    2c8a:	f240 701f 	movw	r0, #1823	; 0x71f
    2c8e:	f3af 8000 	nop.w
    2c92:	49c4      	ldr	r1, [pc, #784]	; (2fa4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x394>)
    2c94:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    2c98:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    2c9c:	f04f 0801 	mov.w	r8, #1
    2ca0:	9000      	str	r0, [sp, #0]
    2ca2:	b124      	cbz	r4, 2cae <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9e>
    2ca4:	2100      	movs	r1, #0
    2ca6:	f240 7027 	movw	r0, #1831	; 0x727
    2caa:	f3af 8000 	nop.w
    2cae:	f1b8 0f00 	cmp.w	r8, #0
    2cb2:	d009      	beq.n	2cc8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xb8>
    2cb4:	f895 602e 	ldrb.w	r6, [r5, #46]	; 0x2e
    2cb8:	f04f 0900 	mov.w	r9, #0
    2cbc:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
    2cc0:	f1bb 0f00 	cmp.w	fp, #0
    2cc4:	d007      	beq.n	2cd6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc6>
    2cc6:	e032      	b.n	2d2e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x11e>
    2cc8:	48b7      	ldr	r0, [pc, #732]	; (2fa8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x398>)
    2cca:	2800      	cmp	r0, #0
    2ccc:	bf18      	it	ne
    2cce:	f3af 8000 	nopne.w
    2cd2:	b662      	cpsie	i
    2cd4:	e7ee      	b.n	2cb4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
    2cd6:	4637      	mov	r7, r6
    2cd8:	2001      	movs	r0, #1
    2cda:	ea20 0607 	bic.w	r6, r0, r7
    2cde:	48b3      	ldr	r0, [pc, #716]	; (2fac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x39c>)
    2ce0:	2240      	movs	r2, #64	; 0x40
    2ce2:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    2ce6:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    2cea:	f00a fc29 	bl	d540 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2cee:	b124      	cbz	r4, 2cfa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xea>
    2cf0:	2100      	movs	r1, #0
    2cf2:	f240 509a 	movw	r0, #1434	; 0x59a
    2cf6:	f3af 8000 	nop.w
    2cfa:	eb05 0187 	add.w	r1, r5, r7, lsl #2
    2cfe:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    2d02:	6a09      	ldr	r1, [r1, #32]
    2d04:	6201      	str	r1, [r0, #32]
    2d06:	b124      	cbz	r4, 2d12 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x102>
    2d08:	2100      	movs	r1, #0
    2d0a:	f240 509e 	movw	r0, #1438	; 0x59e
    2d0e:	f3af 8000 	nop.w
    2d12:	b124      	cbz	r4, 2d1e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x10e>
    2d14:	2100      	movs	r1, #0
    2d16:	f240 7031 	movw	r0, #1841	; 0x731
    2d1a:	f3af 8000 	nop.w
    2d1e:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    2d22:	f88d 0004 	strb.w	r0, [sp, #4]
    2d26:	f89d 0004 	ldrb.w	r0, [sp, #4]
    2d2a:	2800      	cmp	r0, #0
    2d2c:	d1b9      	bne.n	2ca2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    2d2e:	b124      	cbz	r4, 2d3a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x12a>
    2d30:	2100      	movs	r1, #0
    2d32:	f240 703b 	movw	r0, #1851	; 0x73b
    2d36:	f3af 8000 	nop.w
    2d3a:	f001 f86b 	bl	3e14 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2d3e:	4680      	mov	r8, r0
    2d40:	4633      	mov	r3, r6
    2d42:	aa06      	add	r2, sp, #24
    2d44:	990c      	ldr	r1, [sp, #48]	; 0x30
    2d46:	f7ff fa51 	bl	21ec <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1ec>
    2d4a:	b124      	cbz	r4, 2d56 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x146>
    2d4c:	2100      	movs	r1, #0
    2d4e:	f240 7042 	movw	r0, #1858	; 0x742
    2d52:	f3af 8000 	nop.w
    2d56:	4995      	ldr	r1, [pc, #596]	; (2fac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x39c>)
    2d58:	a806      	add	r0, sp, #24
    2d5a:	eb01 1786 	add.w	r7, r1, r6, lsl #6
    2d5e:	f817 101a 	ldrb.w	r1, [r7, sl, lsl #1]
    2d62:	2901      	cmp	r1, #1
    2d64:	bf18      	it	ne
    2d66:	2902      	cmpne	r1, #2
    2d68:	d136      	bne.n	2dd8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1c8>
    2d6a:	9906      	ldr	r1, [sp, #24]
    2d6c:	9a07      	ldr	r2, [sp, #28]
    2d6e:	eba1 0108 	sub.w	r1, r1, r8
    2d72:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2d76:	eba2 0208 	sub.w	r2, r2, r8
    2d7a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    2d7e:	2902      	cmp	r1, #2
    2d80:	d370      	bcc.n	2e64 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x254>
    2d82:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    2d86:	bf98      	it	ls
    2d88:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    2d8c:	d86a      	bhi.n	2e64 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x254>
    2d8e:	f04f 0901 	mov.w	r9, #1
    2d92:	ab01      	add	r3, sp, #4
    2d94:	aa05      	add	r2, sp, #20
    2d96:	4631      	mov	r1, r6
    2d98:	f7fe ff42 	bl	1c20 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x38c>
    2d9c:	2800      	cmp	r0, #0
    2d9e:	d069      	beq.n	2e74 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x264>
    2da0:	f89d 1014 	ldrb.w	r1, [sp, #20]
    2da4:	f89d 2004 	ldrb.w	r2, [sp, #4]
    2da8:	4633      	mov	r3, r6
    2daa:	428a      	cmp	r2, r1
    2dac:	d066      	beq.n	2e7c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x26c>
    2dae:	2005      	movs	r0, #5
    2db0:	f7fe fd7e 	bl	18b0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    2db4:	eb07 014a 	add.w	r1, r7, sl, lsl #1
    2db8:	7048      	strb	r0, [r1, #1]
    2dba:	f89d 0014 	ldrb.w	r0, [sp, #20]
    2dbe:	2820      	cmp	r0, #32
    2dc0:	bf1c      	itt	ne
    2dc2:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    2dc6:	f880 a001 	strbne.w	sl, [r0, #1]
    2dca:	d061      	beq.n	2e90 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x280>
    2dcc:	4632      	mov	r2, r6
    2dce:	4651      	mov	r1, sl
    2dd0:	f05f 0003 	movs.w	r0, #3
    2dd4:	f7ff fbc6 	bl	2564 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x564>
    2dd8:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    2ddc:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
    2de0:	f88d 0004 	strb.w	r0, [sp, #4]
    2de4:	f89d 0004 	ldrb.w	r0, [sp, #4]
    2de8:	2800      	cmp	r0, #0
    2dea:	bf14      	ite	ne
    2dec:	2701      	movne	r7, #1
    2dee:	2700      	moveq	r7, #0
    2df0:	b124      	cbz	r4, 2dfc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ec>
    2df2:	2100      	movs	r1, #0
    2df4:	f240 7049 	movw	r0, #1865	; 0x749
    2df8:	f3af 8000 	nop.w
    2dfc:	486c      	ldr	r0, [pc, #432]	; (2fb0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a0>)
    2dfe:	2800      	cmp	r0, #0
    2e00:	bf18      	it	ne
    2e02:	f3af 8000 	nopne.w
    2e06:	f3ef 8810 	mrs	r8, PRIMASK
    2e0a:	b672      	cpsid	i
    2e0c:	b124      	cbz	r4, 2e18 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x208>
    2e0e:	2100      	movs	r1, #0
    2e10:	f240 704f 	movw	r0, #1871	; 0x74f
    2e14:	f3af 8000 	nop.w
    2e18:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    2e1c:	f88d 0004 	strb.w	r0, [sp, #4]
    2e20:	f89d 0004 	ldrb.w	r0, [sp, #4]
    2e24:	2800      	cmp	r0, #0
    2e26:	f47f af3c 	bne.w	2ca2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    2e2a:	b124      	cbz	r4, 2e36 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x226>
    2e2c:	2100      	movs	r1, #0
    2e2e:	f240 7057 	movw	r0, #1879	; 0x757
    2e32:	f3af 8000 	nop.w
    2e36:	f10d 0e18 	add.w	lr, sp, #24
    2e3a:	9800      	ldr	r0, [sp, #0]
    2e3c:	e89e 100e 	ldmia.w	lr, {r1, r2, r3, ip}
    2e40:	f100 0008 	add.w	r0, r0, #8
    2e44:	f1b9 0f00 	cmp.w	r9, #0
    2e48:	e880 100e 	stmia.w	r0, {r1, r2, r3, ip}
    2e4c:	d04c      	beq.n	2ee8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d8>
    2e4e:	b124      	cbz	r4, 2e5a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x24a>
    2e50:	2100      	movs	r1, #0
    2e52:	f240 7064 	movw	r0, #1892	; 0x764
    2e56:	f3af 8000 	nop.w
    2e5a:	f1bb 0f00 	cmp.w	fp, #0
    2e5e:	d134      	bne.n	2eca <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ba>
    2e60:	e01e      	b.n	2ea0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x290>
    2e62:	e7ff      	b.n	2e64 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x254>
    2e64:	4632      	mov	r2, r6
    2e66:	4651      	mov	r1, sl
    2e68:	2004      	movs	r0, #4
    2e6a:	f7ff fb7b 	bl	2564 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x564>
    2e6e:	f04f 0901 	mov.w	r9, #1
    2e72:	e7b1      	b.n	2dd8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1c8>
    2e74:	4632      	mov	r2, r6
    2e76:	4651      	mov	r1, sl
    2e78:	2004      	movs	r0, #4
    2e7a:	e7ab      	b.n	2dd4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1c4>
    2e7c:	2920      	cmp	r1, #32
    2e7e:	bf19      	ittee	ne
    2e80:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    2e84:	7840      	ldrbne	r0, [r0, #1]
    2e86:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    2e8a:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    2e8e:	e791      	b.n	2db4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1a4>
    2e90:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    2e94:	f880 a020 	strb.w	sl, [r0, #32]
    2e98:	21ff      	movs	r1, #255	; 0xff
    2e9a:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    2e9e:	e795      	b.n	2dcc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1bc>
    2ea0:	b19f      	cbz	r7, 2eca <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ba>
    2ea2:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    2ea6:	2820      	cmp	r0, #32
    2ea8:	d10f      	bne.n	2eca <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ba>
    2eaa:	b124      	cbz	r4, 2eb6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2a6>
    2eac:	2100      	movs	r1, #0
    2eae:	f240 7069 	movw	r0, #1897	; 0x769
    2eb2:	f3af 8000 	nop.w
    2eb6:	4631      	mov	r1, r6
    2eb8:	2002      	movs	r0, #2
    2eba:	f7ff fb83 	bl	25c4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x5c4>
    2ebe:	b920      	cbnz	r0, 2eca <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ba>
    2ec0:	980c      	ldr	r0, [sp, #48]	; 0x30
    2ec2:	7800      	ldrb	r0, [r0, #0]
    2ec4:	b3f0      	cbz	r0, 2f44 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x334>
    2ec6:	2801      	cmp	r0, #1
    2ec8:	d04c      	beq.n	2f64 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x354>
    2eca:	b124      	cbz	r4, 2ed6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2c6>
    2ecc:	2100      	movs	r1, #0
    2ece:	f240 7086 	movw	r0, #1926	; 0x786
    2ed2:	f3af 8000 	nop.w
    2ed6:	f1bb 0f00 	cmp.w	fp, #0
    2eda:	bf1c      	itt	ne
    2edc:	20ff      	movne	r0, #255	; 0xff
    2ede:	f885 002b 	strbne.w	r0, [r5, #43]	; 0x2b
    2ee2:	d048      	beq.n	2f76 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x366>
    2ee4:	f04f 0901 	mov.w	r9, #1
    2ee8:	b124      	cbz	r4, 2ef4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2e4>
    2eea:	2100      	movs	r1, #0
    2eec:	f240 7097 	movw	r0, #1943	; 0x797
    2ef0:	f3af 8000 	nop.w
    2ef4:	f1b8 0f00 	cmp.w	r8, #0
    2ef8:	d047      	beq.n	2f8a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x37a>
    2efa:	b124      	cbz	r4, 2f06 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f6>
    2efc:	2100      	movs	r1, #0
    2efe:	f240 709b 	movw	r0, #1947	; 0x79b
    2f02:	f3af 8000 	nop.w
    2f06:	f1b9 0f00 	cmp.w	r9, #0
    2f0a:	d011      	beq.n	2f30 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x320>
    2f0c:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    2f10:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    2f14:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    2f18:	2820      	cmp	r0, #32
    2f1a:	d009      	beq.n	2f30 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x320>
    2f1c:	b124      	cbz	r4, 2f28 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x318>
    2f1e:	2100      	movs	r1, #0
    2f20:	f240 70a2 	movw	r0, #1954	; 0x7a2
    2f24:	f3af 8000 	nop.w
    2f28:	4822      	ldr	r0, [pc, #136]	; (2fb4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a4>)
    2f2a:	7840      	ldrb	r0, [r0, #1]
    2f2c:	f001 ff3c 	bl	4da8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2f30:	b124      	cbz	r4, 2f3c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32c>
    2f32:	2100      	movs	r1, #0
    2f34:	f240 70a7 	movw	r0, #1959	; 0x7a7
    2f38:	f3af 8000 	nop.w
    2f3c:	b00d      	add	sp, #52	; 0x34
    2f3e:	4648      	mov	r0, r9
    2f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2f44:	e7ff      	b.n	2f46 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x336>
    2f46:	b124      	cbz	r4, 2f52 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x342>
    2f48:	2100      	movs	r1, #0
    2f4a:	f240 7071 	movw	r0, #1905	; 0x771
    2f4e:	f3af 8000 	nop.w
    2f52:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
    2f56:	4651      	mov	r1, sl
    2f58:	2004      	movs	r0, #4
    2f5a:	f7ff fb03 	bl	2564 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x564>
    2f5e:	f04f 0901 	mov.w	r9, #1
    2f62:	e7c1      	b.n	2ee8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d8>
    2f64:	2c00      	cmp	r4, #0
    2f66:	f43f ae9c 	beq.w	2ca2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    2f6a:	2100      	movs	r1, #0
    2f6c:	f240 707c 	movw	r0, #1916	; 0x77c
    2f70:	f3af 8000 	nop.w
    2f74:	e695      	b.n	2ca2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    2f76:	f895 102e 	ldrb.w	r1, [r5, #46]	; 0x2e
    2f7a:	2001      	movs	r0, #1
    2f7c:	4388      	bics	r0, r1
    2f7e:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
    2f82:	20ff      	movs	r0, #255	; 0xff
    2f84:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
    2f88:	e7ac      	b.n	2ee4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d4>
    2f8a:	4807      	ldr	r0, [pc, #28]	; (2fa8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x398>)
    2f8c:	2800      	cmp	r0, #0
    2f8e:	bf18      	it	ne
    2f90:	f3af 8000 	nopne.w
    2f94:	b662      	cpsie	i
    2f96:	e7b0      	b.n	2efa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ea>
    2f98:	e000ed04 	.word	0xe000ed04
    2f9c:	20000f00 	.word	0x20000f00
    2fa0:	00000000 	.word	0x00000000
    2fa4:	20000b80 	.word	0x20000b80
    2fa8:	00000000 	.word	0x00000000
    2fac:	20000e80 	.word	0x20000e80
    2fb0:	00000000 	.word	0x00000000
    2fb4:	2000001c 	.word	0x2000001c

00002fb8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    2fb8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2fbc:	48a4      	ldr	r0, [pc, #656]	; (3250 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x298>)
    2fbe:	b086      	sub	sp, #24
    2fc0:	6800      	ldr	r0, [r0, #0]
    2fc2:	05c0      	lsls	r0, r0, #23
    2fc4:	0dc0      	lsrs	r0, r0, #23
    2fc6:	d011      	beq.n	2fec <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x34>
    2fc8:	3810      	subs	r0, #16
    2fca:	b240      	sxtb	r0, r0
    2fcc:	2800      	cmp	r0, #0
    2fce:	bfb8      	it	lt
    2fd0:	f000 000f 	andlt.w	r0, r0, #15
    2fd4:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    2fd8:	bfac      	ite	ge
    2fda:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    2fde:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    2fe2:	0940      	lsrs	r0, r0, #5
    2fe4:	bf08      	it	eq
    2fe6:	f04f 0901 	moveq.w	r9, #1
    2fea:	d001      	beq.n	2ff0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x38>
    2fec:	f04f 0900 	mov.w	r9, #0
    2ff0:	9806      	ldr	r0, [sp, #24]
    2ff2:	7800      	ldrb	r0, [r0, #0]
    2ff4:	2800      	cmp	r0, #0
    2ff6:	bf1e      	ittt	ne
    2ff8:	2000      	movne	r0, #0
    2ffa:	b007      	addne	sp, #28
    2ffc:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3000:	f04f 0b00 	mov.w	fp, #0
    3004:	4d93      	ldr	r5, [pc, #588]	; (3254 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x29c>)
    3006:	4c94      	ldr	r4, [pc, #592]	; (3258 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a0>)
    3008:	46da      	mov	sl, fp
    300a:	b125      	cbz	r5, 3016 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x5e>
    300c:	2100      	movs	r1, #0
    300e:	f240 6025 	movw	r0, #1573	; 0x625
    3012:	f3af 8000 	nop.w
    3016:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
    301a:	f884 a02b 	strb.w	sl, [r4, #43]	; 0x2b
    301e:	f04f 0800 	mov.w	r8, #0
    3022:	b125      	cbz	r5, 302e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x76>
    3024:	2100      	movs	r1, #0
    3026:	f240 602a 	movw	r0, #1578	; 0x62a
    302a:	f3af 8000 	nop.w
    302e:	f1b9 0f00 	cmp.w	r9, #0
    3032:	d11d      	bne.n	3070 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xb8>
    3034:	4637      	mov	r7, r6
    3036:	2001      	movs	r0, #1
    3038:	ea20 0607 	bic.w	r6, r0, r7
    303c:	4887      	ldr	r0, [pc, #540]	; (325c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a4>)
    303e:	2240      	movs	r2, #64	; 0x40
    3040:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    3044:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    3048:	f00a fa7a 	bl	d540 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    304c:	b125      	cbz	r5, 3058 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xa0>
    304e:	2100      	movs	r1, #0
    3050:	f240 509a 	movw	r0, #1434	; 0x59a
    3054:	f3af 8000 	nop.w
    3058:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    305c:	eb04 0086 	add.w	r0, r4, r6, lsl #2
    3060:	6a09      	ldr	r1, [r1, #32]
    3062:	6201      	str	r1, [r0, #32]
    3064:	b125      	cbz	r5, 3070 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xb8>
    3066:	2100      	movs	r1, #0
    3068:	f240 509e 	movw	r0, #1438	; 0x59e
    306c:	f3af 8000 	nop.w
    3070:	b125      	cbz	r5, 307c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc4>
    3072:	2100      	movs	r1, #0
    3074:	f240 6032 	movw	r0, #1586	; 0x632
    3078:	f3af 8000 	nop.w
    307c:	f000 feca 	bl	3e14 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    3080:	4607      	mov	r7, r0
    3082:	4633      	mov	r3, r6
    3084:	466a      	mov	r2, sp
    3086:	9906      	ldr	r1, [sp, #24]
    3088:	f7ff f8b0 	bl	21ec <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1ec>
    308c:	b125      	cbz	r5, 3098 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xe0>
    308e:	2100      	movs	r1, #0
    3090:	f44f 60c7 	mov.w	r0, #1592	; 0x638
    3094:	f3af 8000 	nop.w
    3098:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    309c:	2820      	cmp	r0, #32
    309e:	d014      	beq.n	30ca <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x112>
    30a0:	6920      	ldr	r0, [r4, #16]
    30a2:	9900      	ldr	r1, [sp, #0]
    30a4:	1a09      	subs	r1, r1, r0
    30a6:	0209      	lsls	r1, r1, #8
    30a8:	17ca      	asrs	r2, r1, #31
    30aa:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    30ae:	1209      	asrs	r1, r1, #8
    30b0:	d50b      	bpl.n	30ca <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x112>
    30b2:	e9dd 1200 	ldrd	r1, r2, [sp]
    30b6:	1a51      	subs	r1, r2, r1
    30b8:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    30bc:	4408      	add	r0, r1
    30be:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    30c2:	e9cd 2000 	strd	r2, r0, [sp]
    30c6:	f04f 0801 	mov.w	r8, #1
    30ca:	b14d      	cbz	r5, 30e0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x128>
    30cc:	2100      	movs	r1, #0
    30ce:	f240 6042 	movw	r0, #1602	; 0x642
    30d2:	f3af 8000 	nop.w
    30d6:	2100      	movs	r1, #0
    30d8:	f44f 60c9 	mov.w	r0, #1608	; 0x648
    30dc:	f3af 8000 	nop.w
    30e0:	9800      	ldr	r0, [sp, #0]
    30e2:	9901      	ldr	r1, [sp, #4]
    30e4:	1bc0      	subs	r0, r0, r7
    30e6:	1bc9      	subs	r1, r1, r7
    30e8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    30ec:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    30f0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    30f4:	bf98      	it	ls
    30f6:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    30fa:	d803      	bhi.n	3104 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x14c>
    30fc:	f1b9 0f00 	cmp.w	r9, #0
    3100:	d10c      	bne.n	311c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x164>
    3102:	e003      	b.n	310c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x154>
    3104:	f1b9 0f00 	cmp.w	r9, #0
    3108:	d038      	beq.n	317c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1c4>
    310a:	e094      	b.n	3236 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x27e>
    310c:	4633      	mov	r3, r6
    310e:	463a      	mov	r2, r7
    3110:	4669      	mov	r1, sp
    3112:	4853      	ldr	r0, [pc, #332]	; (3260 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a8>)
    3114:	f7fe fc08 	bl	1928 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x94>
    3118:	ea48 0800 	orr.w	r8, r8, r0
    311c:	f1b8 0f00 	cmp.w	r8, #0
    3120:	d022      	beq.n	3168 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1b0>
    3122:	9800      	ldr	r0, [sp, #0]
    3124:	f00a f89e 	bl	d264 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    3128:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    312c:	f89d 2008 	ldrb.w	r2, [sp, #8]
    3130:	4b4c      	ldr	r3, [pc, #304]	; (3264 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2ac>)
    3132:	4411      	add	r1, r2
    3134:	1c49      	adds	r1, r1, #1
    3136:	1842      	adds	r2, r0, r1
    3138:	4298      	cmp	r0, r3
    313a:	d841      	bhi.n	31c0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x208>
    313c:	4848      	ldr	r0, [pc, #288]	; (3260 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a8>)
    313e:	4281      	cmp	r1, r0
    3140:	dc5a      	bgt.n	31f8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x240>
    3142:	4240      	negs	r0, r0
    3144:	4281      	cmp	r1, r0
    3146:	db5f      	blt.n	3208 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x250>
    3148:	1c58      	adds	r0, r3, #1
    314a:	4290      	cmp	r0, r2
    314c:	bfdc      	itt	le
    314e:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    3152:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    3156:	dd05      	ble.n	3164 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ac>
    3158:	2a00      	cmp	r2, #0
    315a:	bfbc      	itt	lt
    315c:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    3160:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    3164:	9806      	ldr	r0, [sp, #24]
    3166:	60c2      	str	r2, [r0, #12]
    3168:	f04f 0b01 	mov.w	fp, #1
    316c:	2d00      	cmp	r5, #0
    316e:	d062      	beq.n	3236 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x27e>
    3170:	2100      	movs	r1, #0
    3172:	f240 605b 	movw	r0, #1627	; 0x65b
    3176:	f3af 8000 	nop.w
    317a:	e05c      	b.n	3236 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x27e>
    317c:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    3180:	aa05      	add	r2, sp, #20
    3182:	a904      	add	r1, sp, #16
    3184:	f000 fce4 	bl	3b50 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    3188:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    318c:	2820      	cmp	r0, #32
    318e:	d01c      	beq.n	31ca <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x212>
    3190:	6920      	ldr	r0, [r4, #16]
    3192:	1d40      	adds	r0, r0, #5
    3194:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3198:	e9dd 2100 	ldrd	r2, r1, [sp]
    319c:	1a89      	subs	r1, r1, r2
    319e:	4401      	add	r1, r0
    31a0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    31a4:	e9cd 0100 	strd	r0, r1, [sp]
    31a8:	f00a f85c 	bl	d264 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    31ac:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    31b0:	f89d 2008 	ldrb.w	r2, [sp, #8]
    31b4:	4b2b      	ldr	r3, [pc, #172]	; (3264 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2ac>)
    31b6:	4411      	add	r1, r2
    31b8:	1c4a      	adds	r2, r1, #1
    31ba:	1881      	adds	r1, r0, r2
    31bc:	4298      	cmp	r0, r3
    31be:	d918      	bls.n	31f2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x23a>
    31c0:	f240 51d6 	movw	r1, #1494	; 0x5d6
    31c4:	2070      	movs	r0, #112	; 0x70
    31c6:	f001 fd1f 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    31ca:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    31ce:	f107 0609 	add.w	r6, r7, #9
    31d2:	b120      	cbz	r0, 31de <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x226>
    31d4:	f001 fca0 	bl	4b18 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    31d8:	2800      	cmp	r0, #0
    31da:	bf08      	it	eq
    31dc:	3632      	addeq	r6, #50	; 0x32
    31de:	4822      	ldr	r0, [pc, #136]	; (3268 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b0>)
    31e0:	9904      	ldr	r1, [sp, #16]
    31e2:	7840      	ldrb	r0, [r0, #1]
    31e4:	4288      	cmp	r0, r1
    31e6:	bf84      	itt	hi
    31e8:	1a40      	subhi	r0, r0, r1
    31ea:	4406      	addhi	r6, r0
    31ec:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    31f0:	e7d2      	b.n	3198 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1e0>
    31f2:	481b      	ldr	r0, [pc, #108]	; (3260 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a8>)
    31f4:	4282      	cmp	r2, r0
    31f6:	dd04      	ble.n	3202 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x24a>
    31f8:	f240 51d7 	movw	r1, #1495	; 0x5d7
    31fc:	2070      	movs	r0, #112	; 0x70
    31fe:	f001 fd03 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3202:	481a      	ldr	r0, [pc, #104]	; (326c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b4>)
    3204:	4282      	cmp	r2, r0
    3206:	da04      	bge.n	3212 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x25a>
    3208:	f44f 61bb 	mov.w	r1, #1496	; 0x5d8
    320c:	2070      	movs	r0, #112	; 0x70
    320e:	f001 fcfb 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3212:	4817      	ldr	r0, [pc, #92]	; (3270 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b8>)
    3214:	4288      	cmp	r0, r1
    3216:	bfdc      	itt	le
    3218:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    321c:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    3220:	dd05      	ble.n	322e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x276>
    3222:	2900      	cmp	r1, #0
    3224:	bfbc      	itt	lt
    3226:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    322a:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    322e:	9806      	ldr	r0, [sp, #24]
    3230:	f04f 0b01 	mov.w	fp, #1
    3234:	60c1      	str	r1, [r0, #12]
    3236:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
    323a:	f88d 0010 	strb.w	r0, [sp, #16]
    323e:	f89d 0010 	ldrb.w	r0, [sp, #16]
    3242:	2800      	cmp	r0, #0
    3244:	f47f aee1 	bne.w	300a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x52>
    3248:	b007      	add	sp, #28
    324a:	4658      	mov	r0, fp
    324c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3250:	e000ed04 	.word	0xe000ed04
    3254:	00000000 	.word	0x00000000
    3258:	20000f00 	.word	0x20000f00
    325c:	20000e80 	.word	0x20000e80
    3260:	0f424000 	.word	0x0f424000
    3264:	1e847fff 	.word	0x1e847fff
    3268:	20000024 	.word	0x20000024
    326c:	f0bdc000 	.word	0xf0bdc000
    3270:	1e848000 	.word	0x1e848000

00003274 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    3274:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3278:	4d8a      	ldr	r5, [pc, #552]	; (34a4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>)
    327a:	b08c      	sub	sp, #48	; 0x30
    327c:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    3280:	2000      	movs	r0, #0
    3282:	4c89      	ldr	r4, [pc, #548]	; (34a8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x234>)
    3284:	2701      	movs	r7, #1
    3286:	4681      	mov	r9, r0
    3288:	f1a5 0880 	sub.w	r8, r5, #128	; 0x80
    328c:	9008      	str	r0, [sp, #32]
    328e:	b124      	cbz	r4, 329a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x26>
    3290:	2100      	movs	r1, #0
    3292:	f240 70b6 	movw	r0, #1974	; 0x7b6
    3296:	f3af 8000 	nop.w
    329a:	2f00      	cmp	r7, #0
    329c:	d039      	beq.n	3312 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x9e>
    329e:	bf00      	nop
    32a0:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
    32a4:	b124      	cbz	r4, 32b0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x3c>
    32a6:	2100      	movs	r1, #0
    32a8:	f240 70bb 	movw	r0, #1979	; 0x7bb
    32ac:	f3af 8000 	nop.w
    32b0:	f895 a02e 	ldrb.w	sl, [r5, #46]	; 0x2e
    32b4:	2001      	movs	r0, #1
    32b6:	ea20 060a 	bic.w	r6, r0, sl
    32ba:	eb08 1086 	add.w	r0, r8, r6, lsl #6
    32be:	eb08 118a 	add.w	r1, r8, sl, lsl #6
    32c2:	4683      	mov	fp, r0
    32c4:	2240      	movs	r2, #64	; 0x40
    32c6:	f00a f93b 	bl	d540 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    32ca:	b124      	cbz	r4, 32d6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x62>
    32cc:	2100      	movs	r1, #0
    32ce:	f240 509a 	movw	r0, #1434	; 0x59a
    32d2:	f3af 8000 	nop.w
    32d6:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    32da:	eb05 018a 	add.w	r1, r5, sl, lsl #2
    32de:	9000      	str	r0, [sp, #0]
    32e0:	6a09      	ldr	r1, [r1, #32]
    32e2:	6201      	str	r1, [r0, #32]
    32e4:	b124      	cbz	r4, 32f0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x7c>
    32e6:	2100      	movs	r1, #0
    32e8:	f240 509e 	movw	r0, #1438	; 0x59e
    32ec:	f3af 8000 	nop.w
    32f0:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    32f4:	f88d 0008 	strb.w	r0, [sp, #8]
    32f8:	f89d 0008 	ldrb.w	r0, [sp, #8]
    32fc:	b180      	cbz	r0, 3320 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xac>
    32fe:	2c00      	cmp	r4, #0
    3300:	bf1c      	itt	ne
    3302:	2100      	movne	r1, #0
    3304:	f240 70c1 	movwne	r0, #1985	; 0x7c1
    3308:	d0c1      	beq.n	328e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a>
    330a:	bf00      	nop
    330c:	f3af 8000 	nop.w
    3310:	e7bd      	b.n	328e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a>
    3312:	4866      	ldr	r0, [pc, #408]	; (34ac <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x238>)
    3314:	2800      	cmp	r0, #0
    3316:	bf18      	it	ne
    3318:	f3af 8000 	nopne.w
    331c:	b662      	cpsie	i
    331e:	e7bf      	b.n	32a0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2c>
    3320:	b124      	cbz	r4, 332c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xb8>
    3322:	2100      	movs	r1, #0
    3324:	f240 70c5 	movw	r0, #1989	; 0x7c5
    3328:	f3af 8000 	nop.w
    332c:	980c      	ldr	r0, [sp, #48]	; 0x30
    332e:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    3332:	2803      	cmp	r0, #3
    3334:	d178      	bne.n	3428 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1b4>
    3336:	f8dd a000 	ldr.w	sl, [sp]
    333a:	f8cd a014 	str.w	sl, [sp, #20]
    333e:	990c      	ldr	r1, [sp, #48]	; 0x30
    3340:	f89a 0020 	ldrb.w	r0, [sl, #32]
    3344:	4288      	cmp	r0, r1
    3346:	bf14      	ite	ne
    3348:	f04f 0b00 	movne.w	fp, #0
    334c:	f04f 0b01 	moveq.w	fp, #1
    3350:	f10a 0c20 	add.w	ip, sl, #32
    3354:	4686      	mov	lr, r0
    3356:	2220      	movs	r2, #32
    3358:	eb08 1386 	add.w	r3, r8, r6, lsl #6
    335c:	e003      	b.n	3366 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf2>
    335e:	4602      	mov	r2, r0
    3360:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    3364:	7840      	ldrb	r0, [r0, #1]
    3366:	4288      	cmp	r0, r1
    3368:	d002      	beq.n	3370 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xfc>
    336a:	2820      	cmp	r0, #32
    336c:	d00a      	beq.n	3384 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x110>
    336e:	e7f6      	b.n	335e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xea>
    3370:	2820      	cmp	r0, #32
    3372:	d007      	beq.n	3384 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x110>
    3374:	4586      	cmp	lr, r0
    3376:	d107      	bne.n	3388 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x114>
    3378:	eb03 004e 	add.w	r0, r3, lr, lsl #1
    337c:	7840      	ldrb	r0, [r0, #1]
    337e:	f88c 0000 	strb.w	r0, [ip]
    3382:	e007      	b.n	3394 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x120>
    3384:	4648      	mov	r0, r9
    3386:	e00c      	b.n	33a2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x12e>
    3388:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    338c:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    3390:	7840      	ldrb	r0, [r0, #1]
    3392:	7048      	strb	r0, [r1, #1]
    3394:	b124      	cbz	r4, 33a0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x12c>
    3396:	2100      	movs	r1, #0
    3398:	f240 5004 	movw	r0, #1284	; 0x504
    339c:	f3af 8000 	nop.w
    33a0:	2001      	movs	r0, #1
    33a2:	ea10 0f0b 	tst.w	r0, fp
    33a6:	bf1c      	itt	ne
    33a8:	21ff      	movne	r1, #255	; 0xff
    33aa:	f88a 1023 	strbne.w	r1, [sl, #35]	; 0x23
    33ae:	2800      	cmp	r0, #0
    33b0:	d058      	beq.n	3464 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f0>
    33b2:	b124      	cbz	r4, 33be <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x14a>
    33b4:	2100      	movs	r1, #0
    33b6:	f240 70ca 	movw	r0, #1994	; 0x7ca
    33ba:	f3af 8000 	nop.w
    33be:	4632      	mov	r2, r6
    33c0:	2001      	movs	r0, #1
    33c2:	990c      	ldr	r1, [sp, #48]	; 0x30
    33c4:	f7ff f8ce 	bl	2564 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x564>
    33c8:	9805      	ldr	r0, [sp, #20]
    33ca:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
    33ce:	f88d 0008 	strb.w	r0, [sp, #8]
    33d2:	f89d 0008 	ldrb.w	r0, [sp, #8]
    33d6:	2800      	cmp	r0, #0
    33d8:	bf14      	ite	ne
    33da:	f04f 0a01 	movne.w	sl, #1
    33de:	f04f 0a00 	moveq.w	sl, #0
    33e2:	b124      	cbz	r4, 33ee <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x17a>
    33e4:	2100      	movs	r1, #0
    33e6:	f240 70d5 	movw	r0, #2005	; 0x7d5
    33ea:	f3af 8000 	nop.w
    33ee:	4830      	ldr	r0, [pc, #192]	; (34b0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x23c>)
    33f0:	2800      	cmp	r0, #0
    33f2:	bf18      	it	ne
    33f4:	f3af 8000 	nopne.w
    33f8:	f3ef 8710 	mrs	r7, PRIMASK
    33fc:	b672      	cpsid	i
    33fe:	b124      	cbz	r4, 340a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x196>
    3400:	2100      	movs	r1, #0
    3402:	f240 70da 	movw	r0, #2010	; 0x7da
    3406:	f3af 8000 	nop.w
    340a:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    340e:	f88d 0008 	strb.w	r0, [sp, #8]
    3412:	f89d 0008 	ldrb.w	r0, [sp, #8]
    3416:	b140      	cbz	r0, 342a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1b6>
    3418:	2c00      	cmp	r4, #0
    341a:	bf1c      	itt	ne
    341c:	2100      	movne	r1, #0
    341e:	f240 70de 	movwne	r0, #2014	; 0x7de
    3422:	f43f af34 	beq.w	328e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a>
    3426:	e771      	b.n	330c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x98>
    3428:	e01c      	b.n	3464 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f0>
    342a:	f1ba 0f00 	cmp.w	sl, #0
    342e:	d008      	beq.n	3442 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ce>
    3430:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    3434:	2820      	cmp	r0, #32
    3436:	d104      	bne.n	3442 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ce>
    3438:	4631      	mov	r1, r6
    343a:	2002      	movs	r0, #2
    343c:	f7ff f8c2 	bl	25c4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x5c4>
    3440:	b308      	cbz	r0, 3486 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x212>
    3442:	b124      	cbz	r4, 344e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1da>
    3444:	2100      	movs	r1, #0
    3446:	f240 70f2 	movw	r0, #2034	; 0x7f2
    344a:	f3af 8000 	nop.w
    344e:	f895 102e 	ldrb.w	r1, [r5, #46]	; 0x2e
    3452:	2001      	movs	r0, #1
    3454:	4388      	bics	r0, r1
    3456:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
    345a:	20ff      	movs	r0, #255	; 0xff
    345c:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
    3460:	2001      	movs	r0, #1
    3462:	9008      	str	r0, [sp, #32]
    3464:	b124      	cbz	r4, 3470 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1fc>
    3466:	2100      	movs	r1, #0
    3468:	f240 70fb 	movw	r0, #2043	; 0x7fb
    346c:	f3af 8000 	nop.w
    3470:	b18f      	cbz	r7, 3496 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x222>
    3472:	b124      	cbz	r4, 347e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20a>
    3474:	2100      	movs	r1, #0
    3476:	f240 70ff 	movw	r0, #2047	; 0x7ff
    347a:	f3af 8000 	nop.w
    347e:	9808      	ldr	r0, [sp, #32]
    3480:	b00d      	add	sp, #52	; 0x34
    3482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3486:	2c00      	cmp	r4, #0
    3488:	d0f2      	beq.n	3470 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1fc>
    348a:	2100      	movs	r1, #0
    348c:	f240 70ed 	movw	r0, #2029	; 0x7ed
    3490:	f3af 8000 	nop.w
    3494:	e7e7      	b.n	3466 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f2>
    3496:	4805      	ldr	r0, [pc, #20]	; (34ac <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x238>)
    3498:	2800      	cmp	r0, #0
    349a:	bf18      	it	ne
    349c:	f3af 8000 	nopne.w
    34a0:	b662      	cpsie	i
    34a2:	e7e6      	b.n	3472 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1fe>
    34a4:	20000f00 	.word	0x20000f00
	...

000034b4 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>:
    34b4:	2820      	cmp	r0, #32
    34b6:	bf24      	itt	cs
    34b8:	2000      	movcs	r0, #0
    34ba:	4770      	bxcs	lr
    34bc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    34c0:	4b03      	ldr	r3, [pc, #12]	; (34d0 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI+0x1c>)
    34c2:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
    34c6:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    34ca:	6042      	str	r2, [r0, #4]
    34cc:	2001      	movs	r0, #1
    34ce:	4770      	bx	lr
    34d0:	20000b80 	.word	0x20000b80

000034d4 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    34d4:	b510      	push	{r4, lr}
    34d6:	2820      	cmp	r0, #32
    34d8:	d211      	bcs.n	34fe <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    34da:	490e      	ldr	r1, [pc, #56]	; (3514 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    34dc:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    34e0:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    34e4:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    34e8:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    34ec:	b13b      	cbz	r3, 34fe <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    34ee:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    34f2:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    34f6:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    34fa:	2a01      	cmp	r2, #1
    34fc:	d001      	beq.n	3502 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    34fe:	2000      	movs	r0, #0
    3500:	bd10      	pop	{r4, pc}
    3502:	f891 202e 	ldrb.w	r2, [r1, #46]	; 0x2e
    3506:	4601      	mov	r1, r0
    3508:	2000      	movs	r0, #0
    350a:	f7ff f82b 	bl	2564 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x564>
    350e:	2001      	movs	r0, #1
    3510:	bd10      	pop	{r4, pc}
    3512:	0000      	.short	0x0000
    3514:	20000f00 	.word	0x20000f00

00003518 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    3518:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    351c:	4e81      	ldr	r6, [pc, #516]	; (3724 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x20c>)
    351e:	4680      	mov	r8, r0
    3520:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    3524:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    3528:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    352c:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    3530:	2800      	cmp	r0, #0
    3532:	d068      	beq.n	3606 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xee>
    3534:	f896 902e 	ldrb.w	r9, [r6, #46]	; 0x2e
    3538:	4d7b      	ldr	r5, [pc, #492]	; (3728 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>)
    353a:	b125      	cbz	r5, 3546 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    353c:	2100      	movs	r1, #0
    353e:	f640 3092 	movw	r0, #2962	; 0xb92
    3542:	f3af 8000 	nop.w
    3546:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    354a:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    354e:	2801      	cmp	r0, #1
    3550:	d018      	beq.n	3584 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    3552:	b2c0      	uxtb	r0, r0
    3554:	2804      	cmp	r0, #4
    3556:	bf1c      	itt	ne
    3558:	2805      	cmpne	r0, #5
    355a:	2806      	cmpne	r0, #6
    355c:	d058      	beq.n	3610 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    355e:	b12d      	cbz	r5, 356c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    3560:	f04f 0100 	mov.w	r1, #0
    3564:	f640 309e 	movw	r0, #2974	; 0xb9e
    3568:	f3af 8000 	nop.w
    356c:	f001 fc72 	bl	4e54 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    3570:	b125      	cbz	r5, 357c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    3572:	2100      	movs	r1, #0
    3574:	f640 30a2 	movw	r0, #2978	; 0xba2
    3578:	f3af 8000 	nop.w
    357c:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    3580:	2801      	cmp	r0, #1
    3582:	d1e6      	bne.n	3552 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    3584:	2401      	movs	r4, #1
    3586:	b125      	cbz	r5, 3592 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    3588:	2100      	movs	r1, #0
    358a:	f640 30a9 	movw	r0, #2985	; 0xba9
    358e:	f3af 8000 	nop.w
    3592:	2c00      	cmp	r4, #0
    3594:	d042      	beq.n	361c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x104>
    3596:	2000      	movs	r0, #0
    3598:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    359c:	b125      	cbz	r5, 35a8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    359e:	2100      	movs	r1, #0
    35a0:	f640 30ae 	movw	r0, #2990	; 0xbae
    35a4:	f3af 8000 	nop.w
    35a8:	f896 b02e 	ldrb.w	fp, [r6, #46]	; 0x2e
    35ac:	2001      	movs	r0, #1
    35ae:	ea20 090b 	bic.w	r9, r0, fp
    35b2:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    35b6:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    35ba:	2240      	movs	r2, #64	; 0x40
    35bc:	f009 ffc0 	bl	d540 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    35c0:	b125      	cbz	r5, 35cc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    35c2:	2100      	movs	r1, #0
    35c4:	f240 509a 	movw	r0, #1434	; 0x59a
    35c8:	f3af 8000 	nop.w
    35cc:	eb06 008b 	add.w	r0, r6, fp, lsl #2
    35d0:	eb06 0a89 	add.w	sl, r6, r9, lsl #2
    35d4:	6a00      	ldr	r0, [r0, #32]
    35d6:	f8ca 0020 	str.w	r0, [sl, #32]
    35da:	b125      	cbz	r5, 35e6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xce>
    35dc:	2100      	movs	r1, #0
    35de:	f240 509e 	movw	r0, #1438	; 0x59e
    35e2:	f3af 8000 	nop.w
    35e6:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    35ea:	f88d 0000 	strb.w	r0, [sp]
    35ee:	f89d 0000 	ldrb.w	r0, [sp]
    35f2:	b1d0      	cbz	r0, 362a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x112>
    35f4:	2d00      	cmp	r5, #0
    35f6:	bf1c      	itt	ne
    35f8:	2100      	movne	r1, #0
    35fa:	f640 30b4 	movwne	r0, #2996	; 0xbb4
    35fe:	d0c2      	beq.n	3586 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    3600:	f3af 8000 	nop.w
    3604:	e7bf      	b.n	3586 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    3606:	f640 3189 	movw	r1, #2953	; 0xb89
    360a:	2070      	movs	r0, #112	; 0x70
    360c:	f001 fafc 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3610:	464a      	mov	r2, r9
    3612:	4641      	mov	r1, r8
    3614:	2001      	movs	r0, #1
    3616:	f7fe ffa5 	bl	2564 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x564>
    361a:	e7a9      	b.n	3570 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    361c:	4843      	ldr	r0, [pc, #268]	; (372c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x214>)
    361e:	2800      	cmp	r0, #0
    3620:	bf18      	it	ne
    3622:	f3af 8000 	nopne.w
    3626:	b662      	cpsie	i
    3628:	e7b5      	b.n	3596 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    362a:	b125      	cbz	r5, 3636 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x11e>
    362c:	2100      	movs	r1, #0
    362e:	f640 30b8 	movw	r0, #3000	; 0xbb8
    3632:	f3af 8000 	nop.w
    3636:	f89a 3021 	ldrb.w	r3, [sl, #33]	; 0x21
    363a:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    363e:	4640      	mov	r0, r8
    3640:	461c      	mov	r4, r3
    3642:	f04f 0b20 	mov.w	fp, #32
    3646:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    364a:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    364e:	e004      	b.n	365a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x142>
    3650:	46a3      	mov	fp, r4
    3652:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    3656:	f89c 4001 	ldrb.w	r4, [ip, #1]
    365a:	4284      	cmp	r4, r0
    365c:	d002      	beq.n	3664 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x14c>
    365e:	2c20      	cmp	r4, #32
    3660:	d02b      	beq.n	36ba <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a2>
    3662:	e7f5      	b.n	3650 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x138>
    3664:	2c20      	cmp	r4, #32
    3666:	d028      	beq.n	36ba <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a2>
    3668:	42a3      	cmp	r3, r4
    366a:	d104      	bne.n	3676 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15e>
    366c:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    3670:	7840      	ldrb	r0, [r0, #1]
    3672:	7008      	strb	r0, [r1, #0]
    3674:	e005      	b.n	3682 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x16a>
    3676:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    367a:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    367e:	7840      	ldrb	r0, [r0, #1]
    3680:	7048      	strb	r0, [r1, #1]
    3682:	f1ba 0f00 	cmp.w	sl, #0
    3686:	d011      	beq.n	36ac <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x194>
    3688:	b125      	cbz	r5, 3694 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x17c>
    368a:	2100      	movs	r1, #0
    368c:	f240 40fc 	movw	r0, #1276	; 0x4fc
    3690:	f3af 8000 	nop.w
    3694:	f89a 0000 	ldrb.w	r0, [sl]
    3698:	42a0      	cmp	r0, r4
    369a:	d107      	bne.n	36ac <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x194>
    369c:	b125      	cbz	r5, 36a8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x190>
    369e:	2100      	movs	r1, #0
    36a0:	f240 40ff 	movw	r0, #1279	; 0x4ff
    36a4:	f3af 8000 	nop.w
    36a8:	f88a b000 	strb.w	fp, [sl]
    36ac:	b15d      	cbz	r5, 36c6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ae>
    36ae:	2100      	movs	r1, #0
    36b0:	f240 5004 	movw	r0, #1284	; 0x504
    36b4:	f3af 8000 	nop.w
    36b8:	e000      	b.n	36bc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a4>
    36ba:	b125      	cbz	r5, 36c6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ae>
    36bc:	2100      	movs	r1, #0
    36be:	f640 30bc 	movw	r0, #3004	; 0xbbc
    36c2:	f3af 8000 	nop.w
    36c6:	481a      	ldr	r0, [pc, #104]	; (3730 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x218>)
    36c8:	2800      	cmp	r0, #0
    36ca:	bf18      	it	ne
    36cc:	f3af 8000 	nopne.w
    36d0:	f3ef 8410 	mrs	r4, PRIMASK
    36d4:	b672      	cpsid	i
    36d6:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    36da:	f88d 0000 	strb.w	r0, [sp]
    36de:	f89d 0000 	ldrb.w	r0, [sp]
    36e2:	b138      	cbz	r0, 36f4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1dc>
    36e4:	2d00      	cmp	r5, #0
    36e6:	bf1c      	itt	ne
    36e8:	2100      	movne	r1, #0
    36ea:	f640 30c2 	movwne	r0, #3010	; 0xbc2
    36ee:	f43f af4a 	beq.w	3586 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    36f2:	e785      	b.n	3600 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe8>
    36f4:	f886 902e 	strb.w	r9, [r6, #46]	; 0x2e
    36f8:	20ff      	movs	r0, #255	; 0xff
    36fa:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    36fe:	b154      	cbz	r4, 3716 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fe>
    3700:	2d00      	cmp	r5, #0
    3702:	bf08      	it	eq
    3704:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3708:	2100      	movs	r1, #0
    370a:	f640 30cf 	movw	r0, #3023	; 0xbcf
    370e:	f3af 8000 	nop.w
    3712:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3716:	4805      	ldr	r0, [pc, #20]	; (372c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x214>)
    3718:	2800      	cmp	r0, #0
    371a:	bf18      	it	ne
    371c:	f3af 8000 	nopne.w
    3720:	b662      	cpsie	i
    3722:	e7ed      	b.n	3700 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1e8>
    3724:	20000f00 	.word	0x20000f00
	...

00003734 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    3734:	b570      	push	{r4, r5, r6, lr}
    3736:	460d      	mov	r5, r1
    3738:	4606      	mov	r6, r0
    373a:	f001 f9db 	bl	4af4 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    373e:	480f      	ldr	r0, [pc, #60]	; (377c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    3740:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
    3744:	2400      	movs	r4, #0
    3746:	3880      	subs	r0, #128	; 0x80
    3748:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    374c:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    3750:	b129      	cbz	r1, 375e <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    3752:	1c61      	adds	r1, r4, #1
    3754:	b2cc      	uxtb	r4, r1
    3756:	2c20      	cmp	r4, #32
    3758:	d3f8      	bcc.n	374c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    375a:	2020      	movs	r0, #32
    375c:	bd70      	pop	{r4, r5, r6, pc}
    375e:	4808      	ldr	r0, [pc, #32]	; (3780 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    3760:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    3764:	f840 6031 	str.w	r6, [r0, r1, lsl #3]
    3768:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    376c:	4621      	mov	r1, r4
    376e:	6045      	str	r5, [r0, #4]
    3770:	2001      	movs	r0, #1
    3772:	f7fe fef7 	bl	2564 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x564>
    3776:	4620      	mov	r0, r4
    3778:	bd70      	pop	{r4, r5, r6, pc}
    377a:	0000      	.short	0x0000
    377c:	20000f00 	.word	0x20000f00
    3780:	20000b80 	.word	0x20000b80

00003784 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    3784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3788:	b082      	sub	sp, #8
    378a:	f000 fb43 	bl	3e14 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    378e:	4605      	mov	r5, r0
    3790:	f000 fe12 	bl	43b8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    3794:	4c66      	ldr	r4, [pc, #408]	; (3930 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1ac>)
    3796:	68a0      	ldr	r0, [r4, #8]
    3798:	f1b0 3fff 	cmp.w	r0, #4294967295
    379c:	bf1c      	itt	ne
    379e:	f04f 30ff 	movne.w	r0, #4294967295
    37a2:	60a0      	strne	r0, [r4, #8]
    37a4:	7fa0      	ldrb	r0, [r4, #30]
    37a6:	4f63      	ldr	r7, [pc, #396]	; (3934 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b0>)
    37a8:	b990      	cbnz	r0, 37d0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x4c>
    37aa:	e9d4 1003 	ldrd	r1, r0, [r4, #12]
    37ae:	1a40      	subs	r0, r0, r1
    37b0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    37b4:	f44f 710c 	mov.w	r1, #560	; 0x230
    37b8:	f009 fd81 	bl	d2be <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    37bc:	6921      	ldr	r1, [r4, #16]
    37be:	4408      	add	r0, r1
    37c0:	1a28      	subs	r0, r5, r0
    37c2:	0200      	lsls	r0, r0, #8
    37c4:	17c1      	asrs	r1, r0, #31
    37c6:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    37ca:	1200      	asrs	r0, r0, #8
    37cc:	0fc0      	lsrs	r0, r0, #31
    37ce:	d013      	beq.n	37f8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x74>
    37d0:	7e60      	ldrb	r0, [r4, #25]
    37d2:	b328      	cbz	r0, 3820 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x9c>
    37d4:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    37d8:	f88d 0000 	strb.w	r0, [sp]
    37dc:	f89d 0000 	ldrb.w	r0, [sp]
    37e0:	b1f0      	cbz	r0, 3820 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x9c>
    37e2:	f000 fc27 	bl	4034 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    37e6:	bf00      	nop
    37e8:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    37ec:	b1f0      	cbz	r0, 382c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa8>
    37ee:	f240 4111 	movw	r1, #1041	; 0x411
    37f2:	2070      	movs	r0, #112	; 0x70
    37f4:	f001 fa08 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    37f8:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    37fc:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    3800:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    3804:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
    3808:	6840      	ldr	r0, [r0, #4]
    380a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    380e:	f857 2031 	ldr.w	r2, [r7, r1, lsl #3]
    3812:	2108      	movs	r1, #8
    3814:	4790      	blx	r2
    3816:	f240 31f9 	movw	r1, #1017	; 0x3f9
    381a:	2070      	movs	r0, #112	; 0x70
    381c:	f001 f9f4 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3820:	1ce8      	adds	r0, r5, #3
    3822:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3826:	f000 fafb 	bl	3e20 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    382a:	e7dd      	b.n	37e8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x64>
    382c:	2001      	movs	r0, #1
    382e:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
    3832:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    3836:	2820      	cmp	r0, #32
    3838:	d024      	beq.n	3884 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x100>
    383a:	f894 802f 	ldrb.w	r8, [r4, #47]	; 0x2f
    383e:	2020      	movs	r0, #32
    3840:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    3844:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    3848:	2600      	movs	r6, #0
    384a:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    384e:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    3852:	4839      	ldr	r0, [pc, #228]	; (3938 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b4>)
    3854:	6026      	str	r6, [r4, #0]
    3856:	7800      	ldrb	r0, [r0, #0]
    3858:	2802      	cmp	r0, #2
    385a:	bf16      	itet	ne
    385c:	2803      	cmpne	r0, #3
    385e:	2001      	moveq	r0, #1
    3860:	2000      	movne	r0, #0
    3862:	7720      	strb	r0, [r4, #28]
    3864:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
    3868:	eb04 0a89 	add.w	sl, r4, r9, lsl #2
    386c:	f89a 0020 	ldrb.w	r0, [sl, #32]
    3870:	2820      	cmp	r0, #32
    3872:	d02f      	beq.n	38d4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x150>
    3874:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    3878:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
    387c:	7d81      	ldrb	r1, [r0, #22]
    387e:	2901      	cmp	r1, #1
    3880:	d005      	beq.n	388e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x10a>
    3882:	e027      	b.n	38d4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x150>
    3884:	f240 4114 	movw	r1, #1044	; 0x414
    3888:	2070      	movs	r0, #112	; 0x70
    388a:	f001 f9bd 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    388e:	462f      	mov	r7, r5
    3890:	f100 0508 	add.w	r5, r0, #8
    3894:	8a40      	ldrh	r0, [r0, #18]
    3896:	aa01      	add	r2, sp, #4
    3898:	4669      	mov	r1, sp
    389a:	f000 f959 	bl	3b50 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    389e:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    38a2:	2820      	cmp	r0, #32
    38a4:	d004      	beq.n	38b0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x12c>
    38a6:	6920      	ldr	r0, [r4, #16]
    38a8:	1d40      	adds	r0, r0, #5
    38aa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    38ae:	e009      	b.n	38c4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x140>
    38b0:	8968      	ldrh	r0, [r5, #10]
    38b2:	3709      	adds	r7, #9
    38b4:	b120      	cbz	r0, 38c0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x13c>
    38b6:	f001 f92f 	bl	4b18 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    38ba:	2800      	cmp	r0, #0
    38bc:	bf08      	it	eq
    38be:	3732      	addeq	r7, #50	; 0x32
    38c0:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
    38c4:	e9d5 2100 	ldrd	r2, r1, [r5]
    38c8:	1a89      	subs	r1, r1, r2
    38ca:	6028      	str	r0, [r5, #0]
    38cc:	4408      	add	r0, r1
    38ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    38d2:	6068      	str	r0, [r5, #4]
    38d4:	4649      	mov	r1, r9
    38d6:	2001      	movs	r0, #1
    38d8:	f7fe fe74 	bl	25c4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x5c4>
    38dc:	2800      	cmp	r0, #0
    38de:	d0f9      	beq.n	38d4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x150>
    38e0:	4816      	ldr	r0, [pc, #88]	; (393c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b8>)
    38e2:	eb00 1089 	add.w	r0, r0, r9, lsl #6
    38e6:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    38ea:	2802      	cmp	r0, #2
    38ec:	d104      	bne.n	38f8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x174>
    38ee:	464a      	mov	r2, r9
    38f0:	4641      	mov	r1, r8
    38f2:	2006      	movs	r0, #6
    38f4:	f7fe fe36 	bl	2564 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x564>
    38f8:	20ff      	movs	r0, #255	; 0xff
    38fa:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    38fe:	f89a 0021 	ldrb.w	r0, [sl, #33]	; 0x21
    3902:	4d0f      	ldr	r5, [pc, #60]	; (3940 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1bc>)
    3904:	2820      	cmp	r0, #32
    3906:	bf1c      	itt	ne
    3908:	7868      	ldrbne	r0, [r5, #1]
    390a:	f001 fa4d 	blne	4da8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    390e:	7f20      	ldrb	r0, [r4, #28]
    3910:	b118      	cbz	r0, 391a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x196>
    3912:	f000 fd9b 	bl	444c <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    3916:	7726      	strb	r6, [r4, #28]
    3918:	7766      	strb	r6, [r4, #29]
    391a:	6869      	ldr	r1, [r5, #4]
    391c:	2900      	cmp	r1, #0
    391e:	bf04      	itt	eq
    3920:	b002      	addeq	sp, #8
    3922:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3926:	2064      	movs	r0, #100	; 0x64
    3928:	b002      	add	sp, #8
    392a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    392e:	4708      	bx	r1
    3930:	20000f00 	.word	0x20000f00
    3934:	20000b80 	.word	0x20000b80
    3938:	20000024 	.word	0x20000024
    393c:	20000e80 	.word	0x20000e80
    3940:	2000001c 	.word	0x2000001c

00003944 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    3944:	b510      	push	{r4, lr}
    3946:	4c32      	ldr	r4, [pc, #200]	; (3a10 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xcc>)
    3948:	b082      	sub	sp, #8
    394a:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    394e:	2920      	cmp	r1, #32
    3950:	d008      	beq.n	3964 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x20>
    3952:	68a1      	ldr	r1, [r4, #8]
    3954:	f1b1 3fff 	cmp.w	r1, #4294967295
    3958:	d009      	beq.n	396e <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2a>
    395a:	f640 21ba 	movw	r1, #2746	; 0xaba
    395e:	2070      	movs	r0, #112	; 0x70
    3960:	f001 f952 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3964:	f640 21b9 	movw	r1, #2745	; 0xab9
    3968:	2070      	movs	r0, #112	; 0x70
    396a:	f001 f94d 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    396e:	6862      	ldr	r2, [r4, #4]
    3970:	4601      	mov	r1, r0
    3972:	4b28      	ldr	r3, [pc, #160]	; (3a14 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd0>)
    3974:	1850      	adds	r0, r2, r1
    3976:	429a      	cmp	r2, r3
    3978:	d904      	bls.n	3984 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x40>
    397a:	f240 51d6 	movw	r1, #1494	; 0x5d6
    397e:	2070      	movs	r0, #112	; 0x70
    3980:	f001 f942 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3984:	4a24      	ldr	r2, [pc, #144]	; (3a18 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd4>)
    3986:	4291      	cmp	r1, r2
    3988:	dd04      	ble.n	3994 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x50>
    398a:	f240 51d7 	movw	r1, #1495	; 0x5d7
    398e:	2070      	movs	r0, #112	; 0x70
    3990:	f001 f93a 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3994:	4a21      	ldr	r2, [pc, #132]	; (3a1c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd8>)
    3996:	4291      	cmp	r1, r2
    3998:	da04      	bge.n	39a4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x60>
    399a:	f44f 61bb 	mov.w	r1, #1496	; 0x5d8
    399e:	2070      	movs	r0, #112	; 0x70
    39a0:	f001 f932 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    39a4:	491e      	ldr	r1, [pc, #120]	; (3a20 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xdc>)
    39a6:	4281      	cmp	r1, r0
    39a8:	bfdc      	itt	le
    39aa:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    39ae:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    39b2:	dd05      	ble.n	39c0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    39b4:	2800      	cmp	r0, #0
    39b6:	bfbc      	itt	lt
    39b8:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    39bc:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    39c0:	aa01      	add	r2, sp, #4
    39c2:	4669      	mov	r1, sp
    39c4:	f000 f8c4 	bl	3b50 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    39c8:	f89d 0004 	ldrb.w	r0, [sp, #4]
    39cc:	280f      	cmp	r0, #15
    39ce:	bf8c      	ite	hi
    39d0:	2001      	movhi	r0, #1
    39d2:	2000      	movls	r0, #0
    39d4:	9900      	ldr	r1, [sp, #0]
    39d6:	4408      	add	r0, r1
    39d8:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    39dc:	60a1      	str	r1, [r4, #8]
    39de:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    39e2:	f88d 0000 	strb.w	r0, [sp]
    39e6:	f89d 0000 	ldrb.w	r0, [sp]
    39ea:	2800      	cmp	r0, #0
    39ec:	bf04      	itt	eq
    39ee:	b002      	addeq	sp, #8
    39f0:	bd10      	popeq	{r4, pc}
    39f2:	2301      	movs	r3, #1
    39f4:	2203      	movs	r2, #3
    39f6:	2005      	movs	r0, #5
    39f8:	f000 fb9a 	bl	4130 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    39fc:	2800      	cmp	r0, #0
    39fe:	bf1c      	itt	ne
    3a00:	b002      	addne	sp, #8
    3a02:	bd10      	popne	{r4, pc}
    3a04:	f640 21c2 	movw	r1, #2754	; 0xac2
    3a08:	2070      	movs	r0, #112	; 0x70
    3a0a:	f001 f8fd 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3a0e:	0000      	.short	0x0000
    3a10:	20000f00 	.word	0x20000f00
    3a14:	1e847fff 	.word	0x1e847fff
    3a18:	0f424000 	.word	0x0f424000
    3a1c:	f0bdc000 	.word	0xf0bdc000
    3a20:	1e848000 	.word	0x1e848000

00003a24 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    3a24:	b570      	push	{r4, r5, r6, lr}
    3a26:	4c1e      	ldr	r4, [pc, #120]	; (3aa0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8>)
    3a28:	2120      	movs	r1, #32
    3a2a:	f884 1020 	strb.w	r1, [r4, #32]
    3a2e:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    3a32:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    3a36:	2000      	movs	r0, #0
    3a38:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    3a3c:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    3a40:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    3a44:	1e42      	subs	r2, r0, #1
    3a46:	60a2      	str	r2, [r4, #8]
    3a48:	6020      	str	r0, [r4, #0]
    3a4a:	77a0      	strb	r0, [r4, #30]
    3a4c:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    3a50:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    3a54:	7720      	strb	r0, [r4, #28]
    3a56:	7760      	strb	r0, [r4, #29]
    3a58:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    3a5c:	4911      	ldr	r1, [pc, #68]	; (3aa4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc>)
    3a5e:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    3a62:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    3a66:	7008      	strb	r0, [r1, #0]
    3a68:	7048      	strb	r0, [r1, #1]
    3a6a:	8048      	strh	r0, [r1, #2]
    3a6c:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    3a70:	2210      	movs	r2, #16
    3a72:	7088      	strb	r0, [r1, #2]
    3a74:	f801 0f04 	strb.w	r0, [r1, #4]!
    3a78:	1e52      	subs	r2, r2, #1
    3a7a:	d1fa      	bne.n	3a72 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x4e>
    3a7c:	4d0a      	ldr	r5, [pc, #40]	; (3aa8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10>)
    3a7e:	2601      	movs	r6, #1
    3a80:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    3a84:	20ff      	movs	r0, #255	; 0xff
    3a86:	7028      	strb	r0, [r5, #0]
    3a88:	4808      	ldr	r0, [pc, #32]	; (3aac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x14>)
    3a8a:	f001 f96f 	bl	4d6c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    3a8e:	7068      	strb	r0, [r5, #1]
    3a90:	f001 f9ca 	bl	4e28 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    3a94:	60e8      	str	r0, [r5, #12]
    3a96:	f000 fd21 	bl	44dc <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    3a9a:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    3a9e:	bd70      	pop	{r4, r5, r6, pc}
    3aa0:	20000f00 	.word	0x20000f00
    3aa4:	20000024 	.word	0x20000024
    3aa8:	2000001c 	.word	0x2000001c
    3aac:	00002421 	.word	0x00002421

00003ab0 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>:
    3ab0:	b570      	push	{r4, r5, r6, lr}
    3ab2:	4604      	mov	r4, r0
    3ab4:	4615      	mov	r5, r2
    3ab6:	4608      	mov	r0, r1
    3ab8:	f009 fbd4 	bl	d264 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    3abc:	4b14      	ldr	r3, [pc, #80]	; (3b10 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x60>)
    3abe:	1b01      	subs	r1, r0, r4
    3ac0:	2200      	movs	r2, #0
    3ac2:	1acb      	subs	r3, r1, r3
    3ac4:	f172 0300 	sbcs.w	r3, r2, #0
    3ac8:	d318      	bcc.n	3afc <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x4c>
    3aca:	f8df c044 	ldr.w	ip, [pc, #68]	; 3b10 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x60>
    3ace:	1a23      	subs	r3, r4, r0
    3ad0:	ebb3 0c0c 	subs.w	ip, r3, ip
    3ad4:	f172 0200 	sbcs.w	r2, r2, #0
    3ad8:	d310      	bcc.n	3afc <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x4c>
    3ada:	4a0e      	ldr	r2, [pc, #56]	; (3b14 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x64>)
    3adc:	428a      	cmp	r2, r1
    3ade:	bf3e      	ittt	cc
    3ae0:	f5c4 2190 	rsbcc	r1, r4, #294912	; 0x48000
    3ae4:	f101 51f4 	addcc.w	r1, r1, #511705088	; 0x1e800000
    3ae8:	4401      	addcc	r1, r0
    3aea:	d307      	bcc.n	3afc <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x4c>
    3aec:	429a      	cmp	r2, r3
    3aee:	d209      	bcs.n	3b04 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x54>
    3af0:	f5c0 2090 	rsb	r0, r0, #294912	; 0x48000
    3af4:	f100 50f4 	add.w	r0, r0, #511705088	; 0x1e800000
    3af8:	4420      	add	r0, r4
    3afa:	4241      	negs	r1, r0
    3afc:	f101 000f 	add.w	r0, r1, #15
    3b00:	1a28      	subs	r0, r5, r0
    3b02:	bd70      	pop	{r4, r5, r6, pc}
    3b04:	f640 21dd 	movw	r1, #2781	; 0xadd
    3b08:	2070      	movs	r0, #112	; 0x70
    3b0a:	f001 f87d 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3b0e:	0000      	.short	0x0000
    3b10:	0f424000 	.word	0x0f424000
    3b14:	1e847fff 	.word	0x1e847fff

00003b18 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    3b18:	0b41      	lsrs	r1, r0, #13
    3b1a:	f248 6237 	movw	r2, #34359	; 0x8637
    3b1e:	4351      	muls	r1, r2
    3b20:	0c0a      	lsrs	r2, r1, #16
    3b22:	4b09      	ldr	r3, [pc, #36]	; (3b48 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    3b24:	0251      	lsls	r1, r2, #9
    3b26:	fb02 0203 	mla	r2, r2, r3, r0
    3b2a:	4808      	ldr	r0, [pc, #32]	; (3b4c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    3b2c:	4350      	muls	r0, r2
    3b2e:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    3b32:	306e      	adds	r0, #110	; 0x6e
    3b34:	0d40      	lsrs	r0, r0, #21
    3b36:	425b      	negs	r3, r3
    3b38:	fb10 f303 	smulbb	r3, r0, r3
    3b3c:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    3b40:	bf88      	it	hi
    3b42:	1c49      	addhi	r1, r1, #1
    3b44:	4408      	add	r0, r1
    3b46:	4770      	bx	lr
    3b48:	ffffc2f7 	.word	0xffffc2f7
    3b4c:	00010c6f 	.word	0x00010c6f

00003b50 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    3b50:	0b43      	lsrs	r3, r0, #13
    3b52:	f248 6c37 	movw	ip, #34359	; 0x8637
    3b56:	fb03 f30c 	mul.w	r3, r3, ip
    3b5a:	b430      	push	{r4, r5}
    3b5c:	0c1b      	lsrs	r3, r3, #16
    3b5e:	f8df c044 	ldr.w	ip, [pc, #68]	; 3ba4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    3b62:	025c      	lsls	r4, r3, #9
    3b64:	fb03 030c 	mla	r3, r3, ip, r0
    3b68:	480f      	ldr	r0, [pc, #60]	; (3ba8 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    3b6a:	4358      	muls	r0, r3
    3b6c:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    3b70:	eb04 000c 	add.w	r0, r4, ip
    3b74:	f643 5409 	movw	r4, #15625	; 0x3d09
    3b78:	fb1c f404 	smulbb	r4, ip, r4
    3b7c:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    3b80:	f643 5508 	movw	r5, #15624	; 0x3d08
    3b84:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    3b88:	442c      	add	r4, r5
    3b8a:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    3b8e:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    3b92:	bf84      	itt	hi
    3b94:	f04f 0c00 	movhi.w	ip, #0
    3b98:	1c40      	addhi	r0, r0, #1
    3b9a:	6008      	str	r0, [r1, #0]
    3b9c:	f882 c000 	strb.w	ip, [r2]
    3ba0:	bc30      	pop	{r4, r5}
    3ba2:	4770      	bx	lr
    3ba4:	ffffc2f7 	.word	0xffffc2f7
    3ba8:	00010c6f 	.word	0x00010c6f

00003bac <MPSL_IRQ_RTC0_Handler>:
    3bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3bb0:	4c38      	ldr	r4, [pc, #224]	; (3c94 <MPSL_IRQ_RTC0_Handler+0xe8>)
    3bb2:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    3bb6:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 3c98 <MPSL_IRQ_RTC0_Handler+0xec>
    3bba:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    3bbe:	f44f 6600 	mov.w	r6, #2048	; 0x800
    3bc2:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    3bc6:	f04f 0500 	mov.w	r5, #0
    3bca:	d019      	beq.n	3c00 <MPSL_IRQ_RTC0_Handler+0x54>
    3bcc:	4833      	ldr	r0, [pc, #204]	; (3c9c <MPSL_IRQ_RTC0_Handler+0xf0>)
    3bce:	6800      	ldr	r0, [r0, #0]
    3bd0:	b1b0      	cbz	r0, 3c00 <MPSL_IRQ_RTC0_Handler+0x54>
    3bd2:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    3bd6:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    3bda:	f8d4 0540 	ldr.w	r0, [r4, #1344]	; 0x540
    3bde:	f8d8 1000 	ldr.w	r1, [r8]
    3be2:	1a40      	subs	r0, r0, r1
    3be4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3be8:	2802      	cmp	r0, #2
    3bea:	d302      	bcc.n	3bf2 <MPSL_IRQ_RTC0_Handler+0x46>
    3bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3bf0:	d906      	bls.n	3c00 <MPSL_IRQ_RTC0_Handler+0x54>
    3bf2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    3bf6:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    3bfa:	2004      	movs	r0, #4
    3bfc:	f7fe ff1c 	bl	2a38 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3c00:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    3c04:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    3c08:	d01a      	beq.n	3c40 <MPSL_IRQ_RTC0_Handler+0x94>
    3c0a:	4825      	ldr	r0, [pc, #148]	; (3ca0 <MPSL_IRQ_RTC0_Handler+0xf4>)
    3c0c:	6800      	ldr	r0, [r0, #0]
    3c0e:	b1b8      	cbz	r0, 3c40 <MPSL_IRQ_RTC0_Handler+0x94>
    3c10:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
    3c14:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    3c18:	4822      	ldr	r0, [pc, #136]	; (3ca4 <MPSL_IRQ_RTC0_Handler+0xf8>)
    3c1a:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    3c1e:	f8d8 1000 	ldr.w	r1, [r8]
    3c22:	1a40      	subs	r0, r0, r1
    3c24:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3c28:	2802      	cmp	r0, #2
    3c2a:	d302      	bcc.n	3c32 <MPSL_IRQ_RTC0_Handler+0x86>
    3c2c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3c30:	d906      	bls.n	3c40 <MPSL_IRQ_RTC0_Handler+0x94>
    3c32:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    3c36:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    3c3a:	2005      	movs	r0, #5
    3c3c:	f7fe fefc 	bl	2a38 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3c40:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    3c44:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    3c48:	bf08      	it	eq
    3c4a:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    3c4e:	4816      	ldr	r0, [pc, #88]	; (3ca8 <MPSL_IRQ_RTC0_Handler+0xfc>)
    3c50:	6800      	ldr	r0, [r0, #0]
    3c52:	2800      	cmp	r0, #0
    3c54:	bf08      	it	eq
    3c56:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    3c5a:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
    3c5e:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    3c62:	4812      	ldr	r0, [pc, #72]	; (3cac <MPSL_IRQ_RTC0_Handler+0x100>)
    3c64:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    3c68:	f8d8 1000 	ldr.w	r1, [r8]
    3c6c:	1a40      	subs	r0, r0, r1
    3c6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3c72:	2802      	cmp	r0, #2
    3c74:	d304      	bcc.n	3c80 <MPSL_IRQ_RTC0_Handler+0xd4>
    3c76:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3c7a:	bf98      	it	ls
    3c7c:	e8bd 81f0 	ldmials.w	sp!, {r4, r5, r6, r7, r8, pc}
    3c80:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    3c84:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    3c88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3c8c:	2006      	movs	r0, #6
    3c8e:	f7fe bed3 	b.w	2a38 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3c92:	0000      	.short	0x0000
    3c94:	4000b000 	.word	0x4000b000
    3c98:	4000b504 	.word	0x4000b504
    3c9c:	4000b140 	.word	0x4000b140
    3ca0:	4000b144 	.word	0x4000b144
    3ca4:	4000b004 	.word	0x4000b004
    3ca8:	4000b148 	.word	0x4000b148
    3cac:	4000b008 	.word	0x4000b008

00003cb0 <MPSL_IRQ_TIMER0_Handler>:
    3cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3cb4:	4d38      	ldr	r5, [pc, #224]	; (3d98 <MPSL_IRQ_TIMER0_Handler+0xe8>)
    3cb6:	7828      	ldrb	r0, [r5, #0]
    3cb8:	2804      	cmp	r0, #4
    3cba:	d068      	beq.n	3d8e <MPSL_IRQ_TIMER0_Handler+0xde>
    3cbc:	1ce8      	adds	r0, r5, #3
    3cbe:	2201      	movs	r2, #1
    3cc0:	7801      	ldrb	r1, [r0, #0]
    3cc2:	b159      	cbz	r1, 3cdc <MPSL_IRQ_TIMER0_Handler+0x2c>
    3cc4:	2901      	cmp	r1, #1
    3cc6:	bf08      	it	eq
    3cc8:	706a      	strbeq	r2, [r5, #1]
    3cca:	d002      	beq.n	3cd2 <MPSL_IRQ_TIMER0_Handler+0x22>
    3ccc:	7869      	ldrb	r1, [r5, #1]
    3cce:	2900      	cmp	r1, #0
    3cd0:	d058      	beq.n	3d84 <MPSL_IRQ_TIMER0_Handler+0xd4>
    3cd2:	2102      	movs	r1, #2
    3cd4:	7001      	strb	r1, [r0, #0]
    3cd6:	7840      	ldrb	r0, [r0, #1]
    3cd8:	f000 fafe 	bl	42d8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    3cdc:	4c2f      	ldr	r4, [pc, #188]	; (3d9c <MPSL_IRQ_TIMER0_Handler+0xec>)
    3cde:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    3ce2:	f04f 0800 	mov.w	r8, #0
    3ce6:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    3cea:	f44f 7780 	mov.w	r7, #256	; 0x100
    3cee:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    3cf2:	d00a      	beq.n	3d0a <MPSL_IRQ_TIMER0_Handler+0x5a>
    3cf4:	482a      	ldr	r0, [pc, #168]	; (3da0 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    3cf6:	6800      	ldr	r0, [r0, #0]
    3cf8:	b138      	cbz	r0, 3d0a <MPSL_IRQ_TIMER0_Handler+0x5a>
    3cfa:	2003      	movs	r0, #3
    3cfc:	f000 faec 	bl	42d8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    3d00:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    3d04:	2003      	movs	r0, #3
    3d06:	f7fe fe97 	bl	2a38 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3d0a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    3d0e:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    3d12:	d00a      	beq.n	3d2a <MPSL_IRQ_TIMER0_Handler+0x7a>
    3d14:	4823      	ldr	r0, [pc, #140]	; (3da4 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    3d16:	6800      	ldr	r0, [r0, #0]
    3d18:	b138      	cbz	r0, 3d2a <MPSL_IRQ_TIMER0_Handler+0x7a>
    3d1a:	2002      	movs	r0, #2
    3d1c:	f000 fadc 	bl	42d8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    3d20:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    3d24:	2002      	movs	r0, #2
    3d26:	f7fe fe87 	bl	2a38 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3d2a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    3d2e:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    3d32:	d00a      	beq.n	3d4a <MPSL_IRQ_TIMER0_Handler+0x9a>
    3d34:	481c      	ldr	r0, [pc, #112]	; (3da8 <MPSL_IRQ_TIMER0_Handler+0xf8>)
    3d36:	6800      	ldr	r0, [r0, #0]
    3d38:	b138      	cbz	r0, 3d4a <MPSL_IRQ_TIMER0_Handler+0x9a>
    3d3a:	2001      	movs	r0, #1
    3d3c:	f000 facc 	bl	42d8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    3d40:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    3d44:	2001      	movs	r0, #1
    3d46:	f7fe fe77 	bl	2a38 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3d4a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    3d4e:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    3d52:	bf08      	it	eq
    3d54:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    3d58:	4814      	ldr	r0, [pc, #80]	; (3dac <MPSL_IRQ_TIMER0_Handler+0xfc>)
    3d5a:	6800      	ldr	r0, [r0, #0]
    3d5c:	2800      	cmp	r0, #0
    3d5e:	bf08      	it	eq
    3d60:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    3d64:	2000      	movs	r0, #0
    3d66:	f000 fab7 	bl	42d8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    3d6a:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    3d6e:	2004      	movs	r0, #4
    3d70:	7028      	strb	r0, [r5, #0]
    3d72:	f8c5 8008 	str.w	r8, [r5, #8]
    3d76:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    3d7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3d7e:	2000      	movs	r0, #0
    3d80:	f7fe be5a 	b.w	2a38 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3d84:	f240 412b 	movw	r1, #1067	; 0x42b
    3d88:	206c      	movs	r0, #108	; 0x6c
    3d8a:	f000 ff3d 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3d8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3d92:	2007      	movs	r0, #7
    3d94:	f7fe be50 	b.w	2a38 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3d98:	2000002c 	.word	0x2000002c
    3d9c:	40008000 	.word	0x40008000
    3da0:	4000814c 	.word	0x4000814c
    3da4:	40008148 	.word	0x40008148
    3da8:	40008144 	.word	0x40008144
    3dac:	40008140 	.word	0x40008140
    3db0:	2201      	movs	r2, #1
    3db2:	0211      	lsls	r1, r2, #8
    3db4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3db8:	2000      	movs	r0, #0
    3dba:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    3dbe:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    3dc2:	f3bf 8f4f 	dsb	sy
    3dc6:	f3bf 8f6f 	isb	sy
    3dca:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    3dce:	490e      	ldr	r1, [pc, #56]	; (3e08 <MPSL_IRQ_TIMER0_Handler+0x158>)
    3dd0:	f841 2f04 	str.w	r2, [r1, #4]!
    3dd4:	1e43      	subs	r3, r0, #1
    3dd6:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    3dda:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    3dde:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    3de2:	4b0a      	ldr	r3, [pc, #40]	; (3e0c <MPSL_IRQ_TIMER0_Handler+0x15c>)
    3de4:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    3de8:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    3dec:	1d1b      	adds	r3, r3, #4
    3dee:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    3df2:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    3df6:	1d1b      	adds	r3, r3, #4
    3df8:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    3dfc:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    3e00:	60ca      	str	r2, [r1, #12]
    3e02:	4903      	ldr	r1, [pc, #12]	; (3e10 <MPSL_IRQ_TIMER0_Handler+0x160>)
    3e04:	7048      	strb	r0, [r1, #1]
    3e06:	4770      	bx	lr
    3e08:	40008000 	.word	0x40008000
    3e0c:	40008004 	.word	0x40008004
    3e10:	2000002c 	.word	0x2000002c

00003e14 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    3e14:	4801      	ldr	r0, [pc, #4]	; (3e1c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    3e16:	6800      	ldr	r0, [r0, #0]
    3e18:	4770      	bx	lr
    3e1a:	0000      	.short	0x0000
    3e1c:	4000b504 	.word	0x4000b504

00003e20 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    3e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3e24:	4e48      	ldr	r6, [pc, #288]	; (3f48 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x128>)
    3e26:	4605      	mov	r5, r0
    3e28:	1ef7      	subs	r7, r6, #3
    3e2a:	7833      	ldrb	r3, [r6, #0]
    3e2c:	68f9      	ldr	r1, [r7, #12]
    3e2e:	2b01      	cmp	r3, #1
    3e30:	bf04      	itt	eq
    3e32:	42a9      	cmpeq	r1, r5
    3e34:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3e38:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    3e3c:	4a43      	ldr	r2, [pc, #268]	; (3f4c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x12c>)
    3e3e:	6010      	str	r0, [r2, #0]
    3e40:	4a43      	ldr	r2, [pc, #268]	; (3f50 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x130>)
    3e42:	f46f 2080 	mvn.w	r0, #262144	; 0x40000
    3e46:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    3e4a:	f102 0004 	add.w	r0, r2, #4
    3e4e:	f04f 0400 	mov.w	r4, #0
    3e52:	2b00      	cmp	r3, #0
    3e54:	d063      	beq.n	3f1e <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfe>
    3e56:	f46f 2ca0 	mvn.w	ip, #327680	; 0x50000
    3e5a:	f8c2 c348 	str.w	ip, [r2, #840]	; 0x348
    3e5e:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    3e62:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    3e66:	483b      	ldr	r0, [pc, #236]	; (3f54 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x134>)
    3e68:	6800      	ldr	r0, [r0, #0]
    3e6a:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    3e6e:	f04f 0801 	mov.w	r8, #1
    3e72:	2800      	cmp	r0, #0
    3e74:	bf04      	itt	eq
    3e76:	f44f 6000 	moveq.w	r0, #2048	; 0x800
    3e7a:	f8c9 0280 	streq.w	r0, [r9, #640]	; 0x280
    3e7e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    3e82:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    3e86:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    3e8a:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    3e8e:	4832      	ldr	r0, [pc, #200]	; (3f58 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x138>)
    3e90:	f8d0 c000 	ldr.w	ip, [r0]
    3e94:	eba5 0c0c 	sub.w	ip, r5, ip
    3e98:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    3e9c:	f1bc 0f02 	cmp.w	ip, #2
    3ea0:	d34a      	bcc.n	3f38 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x118>
    3ea2:	f5bc 0f00 	cmp.w	ip, #8388608	; 0x800000
    3ea6:	d847      	bhi.n	3f38 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x118>
    3ea8:	f8c2 5540 	str.w	r5, [r2, #1344]	; 0x540
    3eac:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
    3eb0:	f8c2 c344 	str.w	ip, [r2, #836]	; 0x344
    3eb4:	b12b      	cbz	r3, 3ec2 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xa2>
    3eb6:	6802      	ldr	r2, [r0, #0]
    3eb8:	1a8a      	subs	r2, r1, r2
    3eba:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    3ebe:	2a02      	cmp	r2, #2
    3ec0:	d3f9      	bcc.n	3eb6 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x96>
    3ec2:	f8c7 8008 	str.w	r8, [r7, #8]
    3ec6:	703c      	strb	r4, [r7, #0]
    3ec8:	f7ff ff72 	bl	3db0 <MPSL_IRQ_TIMER0_Handler+0x100>
    3ecc:	4823      	ldr	r0, [pc, #140]	; (3f5c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x13c>)
    3ece:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    3ed2:	f364 0101 	bfi	r1, r4, #0, #2
    3ed6:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    3eda:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    3ede:	2102      	movs	r1, #2
    3ee0:	f361 0201 	bfi	r2, r1, #0, #2
    3ee4:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    3ee8:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
    3eec:	2104      	movs	r1, #4
    3eee:	f361 0203 	bfi	r2, r1, #0, #4
    3ef2:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    3ef6:	f8c0 800c 	str.w	r8, [r0, #12]
    3efa:	68b9      	ldr	r1, [r7, #8]
    3efc:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    3f00:	1580      	asrs	r0, r0, #22
    3f02:	f8c9 0280 	str.w	r0, [r9, #640]	; 0x280
    3f06:	f8c9 0100 	str.w	r0, [r9, #256]	; 0x100
    3f0a:	4915      	ldr	r1, [pc, #84]	; (3f60 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x140>)
    3f0c:	05c0      	lsls	r0, r0, #23
    3f0e:	6008      	str	r0, [r1, #0]
    3f10:	2004      	movs	r0, #4
    3f12:	60fd      	str	r5, [r7, #12]
    3f14:	7070      	strb	r0, [r6, #1]
    3f16:	f886 8000 	strb.w	r8, [r6]
    3f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3f1e:	f46f 2c80 	mvn.w	ip, #262144	; 0x40000
    3f22:	f8c2 c348 	str.w	ip, [r2, #840]	; 0x348
    3f26:	f8c2 4540 	str.w	r4, [r2, #1344]	; 0x540
    3f2a:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    3f2e:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    3f32:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    3f36:	e796      	b.n	3e66 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x46>
    3f38:	2000      	movs	r0, #0
    3f3a:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    3f3e:	f240 2169 	movw	r1, #617	; 0x269
    3f42:	206c      	movs	r0, #108	; 0x6c
    3f44:	f000 fe60 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3f48:	2000002f 	.word	0x2000002f
    3f4c:	4001f508 	.word	0x4001f508
    3f50:	4000b000 	.word	0x4000b000
    3f54:	4000b148 	.word	0x4000b148
    3f58:	4000b504 	.word	0x4000b504
    3f5c:	40008000 	.word	0x40008000
    3f60:	4001f504 	.word	0x4001f504

00003f64 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    3f64:	b570      	push	{r4, r5, r6, lr}
    3f66:	4c2a      	ldr	r4, [pc, #168]	; (4010 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xac>)
    3f68:	68e1      	ldr	r1, [r4, #12]
    3f6a:	4281      	cmp	r1, r0
    3f6c:	bf14      	ite	ne
    3f6e:	2201      	movne	r2, #1
    3f70:	2200      	moveq	r2, #0
    3f72:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 4014 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb0>
    3f76:	f89c 5000 	ldrb.w	r5, [ip]
    3f7a:	2d02      	cmp	r5, #2
    3f7c:	d002      	beq.n	3f84 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x20>
    3f7e:	2a00      	cmp	r2, #0
    3f80:	d034      	beq.n	3fec <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x88>
    3f82:	e002      	b.n	3f8a <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x26>
    3f84:	2a00      	cmp	r2, #0
    3f86:	bf08      	it	eq
    3f88:	bd70      	popeq	{r4, r5, r6, pc}
    3f8a:	7862      	ldrb	r2, [r4, #1]
    3f8c:	b39a      	cbz	r2, 3ff6 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x92>
    3f8e:	4b22      	ldr	r3, [pc, #136]	; (4018 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    3f90:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3f94:	601a      	str	r2, [r3, #0]
    3f96:	4b21      	ldr	r3, [pc, #132]	; (401c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>)
    3f98:	1392      	asrs	r2, r2, #14
    3f9a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    3f9e:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
    3fa2:	2200      	movs	r2, #0
    3fa4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    3fa8:	4a1d      	ldr	r2, [pc, #116]	; (4020 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    3faa:	6816      	ldr	r6, [r2, #0]
    3fac:	1b86      	subs	r6, r0, r6
    3fae:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
    3fb2:	2e02      	cmp	r6, #2
    3fb4:	d324      	bcc.n	4000 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    3fb6:	f5b6 0f00 	cmp.w	r6, #8388608	; 0x800000
    3fba:	d821      	bhi.n	4000 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    3fbc:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    3fc0:	f44f 3680 	mov.w	r6, #65536	; 0x10000
    3fc4:	f8c3 6344 	str.w	r6, [r3, #836]	; 0x344
    3fc8:	b12d      	cbz	r5, 3fd6 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x72>
    3fca:	6813      	ldr	r3, [r2, #0]
    3fcc:	1acb      	subs	r3, r1, r3
    3fce:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    3fd2:	2b02      	cmp	r3, #2
    3fd4:	d3f9      	bcc.n	3fca <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x66>
    3fd6:	4b13      	ldr	r3, [pc, #76]	; (4024 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    3fd8:	2102      	movs	r1, #2
    3fda:	074a      	lsls	r2, r1, #29
    3fdc:	601a      	str	r2, [r3, #0]
    3fde:	60e0      	str	r0, [r4, #12]
    3fe0:	2004      	movs	r0, #4
    3fe2:	f88c 0001 	strb.w	r0, [ip, #1]
    3fe6:	f88c 1000 	strb.w	r1, [ip]
    3fea:	bd70      	pop	{r4, r5, r6, pc}
    3fec:	f240 2177 	movw	r1, #631	; 0x277
    3ff0:	206c      	movs	r0, #108	; 0x6c
    3ff2:	f000 fe09 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3ff6:	f240 217b 	movw	r1, #635	; 0x27b
    3ffa:	206c      	movs	r0, #108	; 0x6c
    3ffc:	f000 fe04 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4000:	2000      	movs	r0, #0
    4002:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    4006:	f240 2187 	movw	r1, #647	; 0x287
    400a:	206c      	movs	r0, #108	; 0x6c
    400c:	f000 fdfc 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4010:	2000002c 	.word	0x2000002c
    4014:	2000002f 	.word	0x2000002f
    4018:	4001f508 	.word	0x4001f508
    401c:	4000b000 	.word	0x4000b000
    4020:	4000b504 	.word	0x4000b504
    4024:	4001f504 	.word	0x4001f504

00004028 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    4028:	4801      	ldr	r0, [pc, #4]	; (4030 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    402a:	68c0      	ldr	r0, [r0, #12]
    402c:	4770      	bx	lr
    402e:	0000      	.short	0x0000
    4030:	2000002c 	.word	0x2000002c

00004034 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    4034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4038:	4836      	ldr	r0, [pc, #216]	; (4114 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    403a:	f46f 2180 	mvn.w	r1, #262144	; 0x40000
    403e:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    4042:	4a35      	ldr	r2, [pc, #212]	; (4118 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>)
    4044:	f100 0c04 	add.w	ip, r0, #4
    4048:	2100      	movs	r1, #0
    404a:	7813      	ldrb	r3, [r2, #0]
    404c:	b16b      	cbz	r3, 406a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x36>
    404e:	f46f 24a0 	mvn.w	r4, #327680	; 0x50000
    4052:	f8c0 4348 	str.w	r4, [r0, #840]	; 0x348
    4056:	f8cc 1540 	str.w	r1, [ip, #1344]	; 0x540
    405a:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    405e:	482f      	ldr	r0, [pc, #188]	; (411c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    4060:	6800      	ldr	r0, [r0, #0]
    4062:	f04f 0c01 	mov.w	ip, #1
    4066:	b998      	cbnz	r0, 4090 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x5c>
    4068:	e00c      	b.n	4084 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x50>
    406a:	f46f 2480 	mvn.w	r4, #262144	; 0x40000
    406e:	f8c0 4348 	str.w	r4, [r0, #840]	; 0x348
    4072:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    4076:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    407a:	f8cc 1540 	str.w	r1, [ip, #1344]	; 0x540
    407e:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    4082:	e7ec      	b.n	405e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x2a>
    4084:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    4088:	f44f 6000 	mov.w	r0, #2048	; 0x800
    408c:	f8c4 0280 	str.w	r0, [r4, #640]	; 0x280
    4090:	2b02      	cmp	r3, #2
    4092:	d004      	beq.n	409e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x6a>
    4094:	f240 2193 	movw	r1, #659	; 0x293
    4098:	206c      	movs	r0, #108	; 0x6c
    409a:	f000 fdb5 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    409e:	4e20      	ldr	r6, [pc, #128]	; (4120 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    40a0:	6830      	ldr	r0, [r6, #0]
    40a2:	4c20      	ldr	r4, [pc, #128]	; (4124 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    40a4:	1cc0      	adds	r0, r0, #3
    40a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    40aa:	68e3      	ldr	r3, [r4, #12]
    40ac:	4d1e      	ldr	r5, [pc, #120]	; (4128 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf4>)
    40ae:	4298      	cmp	r0, r3
    40b0:	d00b      	beq.n	40ca <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x96>
    40b2:	6837      	ldr	r7, [r6, #0]
    40b4:	1bdf      	subs	r7, r3, r7
    40b6:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    40ba:	2f04      	cmp	r7, #4
    40bc:	d305      	bcc.n	40ca <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x96>
    40be:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
    40c2:	d802      	bhi.n	40ca <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x96>
    40c4:	f7ff feac 	bl	3e20 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    40c8:	e01e      	b.n	4108 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd4>
    40ca:	6830      	ldr	r0, [r6, #0]
    40cc:	1a18      	subs	r0, r3, r0
    40ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    40d2:	2802      	cmp	r0, #2
    40d4:	d315      	bcc.n	4102 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xce>
    40d6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    40da:	d812      	bhi.n	4102 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xce>
    40dc:	4b13      	ldr	r3, [pc, #76]	; (412c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf8>)
    40de:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    40e2:	6018      	str	r0, [r3, #0]
    40e4:	f8c4 c008 	str.w	ip, [r4, #8]
    40e8:	7021      	strb	r1, [r4, #0]
    40ea:	f8c5 c004 	str.w	ip, [r5, #4]
    40ee:	f8c5 c00c 	str.w	ip, [r5, #12]
    40f2:	0040      	lsls	r0, r0, #1
    40f4:	1f19      	subs	r1, r3, #4
    40f6:	6008      	str	r0, [r1, #0]
    40f8:	2004      	movs	r0, #4
    40fa:	7050      	strb	r0, [r2, #1]
    40fc:	f882 c000 	strb.w	ip, [r2]
    4100:	e002      	b.n	4108 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd4>
    4102:	f8c4 c008 	str.w	ip, [r4, #8]
    4106:	7021      	strb	r1, [r4, #0]
    4108:	68a0      	ldr	r0, [r4, #8]
    410a:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    410e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4112:	0000      	.short	0x0000
    4114:	4000b000 	.word	0x4000b000
    4118:	2000002f 	.word	0x2000002f
    411c:	4000b148 	.word	0x4000b148
    4120:	4000b504 	.word	0x4000b504
    4124:	2000002c 	.word	0x2000002c
    4128:	40008000 	.word	0x40008000
    412c:	4001f508 	.word	0x4001f508

00004130 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    4130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4134:	4c63      	ldr	r4, [pc, #396]	; (42c4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x194>)
    4136:	2700      	movs	r7, #0
    4138:	2601      	movs	r6, #1
    413a:	f894 c000 	ldrb.w	ip, [r4]
    413e:	7865      	ldrb	r5, [r4, #1]
    4140:	f44f 74a0 	mov.w	r4, #320	; 0x140
    4144:	2807      	cmp	r0, #7
    4146:	d27b      	bcs.n	4240 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x110>
    4148:	e8df f000 	tbb	[pc, r0]
    414c:	04040404 	.word	0x04040404
    4150:	006a6a6a 	.word	0x006a6a6a
    4154:	f8df 8170 	ldr.w	r8, [pc, #368]	; 42c8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x198>
    4158:	f8d8 900c 	ldr.w	r9, [r8, #12]
    415c:	f1b9 7f80 	cmp.w	r9, #16777216	; 0x1000000
    4160:	bf04      	itt	eq
    4162:	f898 8001 	ldrbeq.w	r8, [r8, #1]
    4166:	f1b8 0f00 	cmpeq.w	r8, #0
    416a:	d003      	beq.n	4174 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x44>
    416c:	f1bc 0f02 	cmp.w	ip, #2
    4170:	d005      	beq.n	417e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x4e>
    4172:	e02c      	b.n	41ce <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x9e>
    4174:	f240 21d6 	movw	r1, #726	; 0x2d6
    4178:	206c      	movs	r0, #108	; 0x6c
    417a:	f000 fd45 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    417e:	f1a5 0804 	sub.w	r8, r5, #4
    4182:	f008 08ff 	and.w	r8, r8, #255	; 0xff
    4186:	eb04 0488 	add.w	r4, r4, r8, lsl #2
    418a:	f104 4880 	add.w	r8, r4, #1073741824	; 0x40000000
    418e:	f508 4830 	add.w	r8, r8, #45056	; 0xb000
    4192:	2400      	movs	r4, #0
    4194:	f1bc 0f01 	cmp.w	ip, #1
    4198:	d003      	beq.n	41a2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x72>
    419a:	f1bc 0f02 	cmp.w	ip, #2
    419e:	d00a      	beq.n	41b6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x86>
    41a0:	e012      	b.n	41c8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x98>
    41a2:	2d04      	cmp	r5, #4
    41a4:	bf24      	itt	cs
    41a6:	f8d8 9000 	ldrcs.w	r9, [r8]
    41aa:	f1b9 0f00 	cmpcs.w	r9, #0
    41ae:	bf08      	it	eq
    41b0:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
    41b4:	e008      	b.n	41c8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x98>
    41b6:	2d04      	cmp	r5, #4
    41b8:	bf24      	itt	cs
    41ba:	f8d8 9000 	ldrcs.w	r9, [r8]
    41be:	f1b9 0f00 	cmpcs.w	r9, #0
    41c2:	bf08      	it	eq
    41c4:	f044 4480 	orreq.w	r4, r4, #1073741824	; 0x40000000
    41c8:	f014 4f80 	tst.w	r4, #1073741824	; 0x40000000
    41cc:	d1e1      	bne.n	4192 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x62>
    41ce:	4c3f      	ldr	r4, [pc, #252]	; (42cc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x19c>)
    41d0:	f100 0c10 	add.w	ip, r0, #16
    41d4:	fa06 fc0c 	lsl.w	ip, r6, ip
    41d8:	f8c4 c308 	str.w	ip, [r4, #776]	; 0x308
    41dc:	eb04 0580 	add.w	r5, r4, r0, lsl #2
    41e0:	b1aa      	cbz	r2, 420e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xde>
    41e2:	f04f 0840 	mov.w	r8, #64	; 0x40
    41e6:	eb08 0880 	add.w	r8, r8, r0, lsl #2
    41ea:	f008 08ff 	and.w	r8, r8, #255	; 0xff
    41ee:	44a0      	add	r8, r4
    41f0:	f8c8 6000 	str.w	r6, [r8]
    41f4:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    41f8:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    41fc:	eba1 0000 	sub.w	r0, r1, r0
    4200:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    4204:	4290      	cmp	r0, r2
    4206:	bf38      	it	cc
    4208:	f8c5 7540 	strcc.w	r7, [r5, #1344]	; 0x540
    420c:	d351      	bcc.n	42b2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x182>
    420e:	f8c5 1540 	str.w	r1, [r5, #1344]	; 0x540
    4212:	2b01      	cmp	r3, #1
    4214:	bf08      	it	eq
    4216:	f8c4 c304 	streq.w	ip, [r4, #772]	; 0x304
    421a:	2001      	movs	r0, #1
    421c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4220:	f1bc 0f00 	cmp.w	ip, #0
    4224:	d006      	beq.n	4234 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x104>
    4226:	4285      	cmp	r5, r0
    4228:	d104      	bne.n	4234 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x104>
    422a:	f240 21f9 	movw	r1, #761	; 0x2f9
    422e:	206c      	movs	r0, #108	; 0x6c
    4230:	f000 fcea 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4234:	f1a0 0c04 	sub.w	ip, r0, #4
    4238:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    423c:	2b01      	cmp	r3, #1
    423e:	e000      	b.n	4242 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x112>
    4240:	e03a      	b.n	42b8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x188>
    4242:	bf0c      	ite	eq
    4244:	2501      	moveq	r5, #1
    4246:	2500      	movne	r5, #0
    4248:	f1bc 0f03 	cmp.w	ip, #3
    424c:	d304      	bcc.n	4258 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x128>
    424e:	f240 11bd 	movw	r1, #445	; 0x1bd
    4252:	206c      	movs	r0, #108	; 0x6c
    4254:	f000 fcd8 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4258:	f10c 0310 	add.w	r3, ip, #16
    425c:	fa06 f303 	lsl.w	r3, r6, r3
    4260:	4e1b      	ldr	r6, [pc, #108]	; (42d0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x1a0>)
    4262:	f8c6 3308 	str.w	r3, [r6, #776]	; 0x308
    4266:	f8c6 3348 	str.w	r3, [r6, #840]	; 0x348
    426a:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
    426e:	f846 700c 	str.w	r7, [r6, ip]
    4272:	1f00      	subs	r0, r0, #4
    4274:	b2c0      	uxtb	r0, r0
    4276:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    427a:	b17a      	cbz	r2, 429c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x16c>
    427c:	f8df c054 	ldr.w	ip, [pc, #84]	; 42d4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x1a4>
    4280:	f8dc c000 	ldr.w	ip, [ip]
    4284:	eba1 0c0c 	sub.w	ip, r1, ip
    4288:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    428c:	4562      	cmp	r2, ip
    428e:	bf92      	itee	ls
    4290:	f5bc 0f00 	cmpls.w	ip, #8388608	; 0x800000
    4294:	2100      	movhi	r1, #0
    4296:	f8c0 1540 	strhi.w	r1, [r0, #1344]	; 0x540
    429a:	d80a      	bhi.n	42b2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x182>
    429c:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    42a0:	2d00      	cmp	r5, #0
    42a2:	bf18      	it	ne
    42a4:	f8c6 3304 	strne.w	r3, [r6, #772]	; 0x304
    42a8:	f8c6 3344 	str.w	r3, [r6, #836]	; 0x344
    42ac:	2001      	movs	r0, #1
    42ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    42b2:	2000      	movs	r0, #0
    42b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    42b8:	f240 21fe 	movw	r1, #766	; 0x2fe
    42bc:	206c      	movs	r0, #108	; 0x6c
    42be:	f000 fca3 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    42c2:	0000      	.short	0x0000
    42c4:	2000002f 	.word	0x2000002f
    42c8:	2000002c 	.word	0x2000002c
    42cc:	40008000 	.word	0x40008000
    42d0:	4000b000 	.word	0x4000b000
    42d4:	4000b504 	.word	0x4000b504

000042d8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    42d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    42dc:	2601      	movs	r6, #1
    42de:	2700      	movs	r7, #0
    42e0:	f44f 78a0 	mov.w	r8, #320	; 0x140
    42e4:	2807      	cmp	r0, #7
    42e6:	d251      	bcs.n	438c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>
    42e8:	e8df f000 	tbb	[pc, r0]
    42ec:	04040404 	.word	0x04040404
    42f0:	00191919 	.word	0x00191919
    42f4:	f100 0110 	add.w	r1, r0, #16
    42f8:	fa06 f201 	lsl.w	r2, r6, r1
    42fc:	4926      	ldr	r1, [pc, #152]	; (4398 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    42fe:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    4302:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    4306:	2200      	movs	r2, #0
    4308:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    430c:	eb08 0280 	add.w	r2, r8, r0, lsl #2
    4310:	508f      	str	r7, [r1, r2]
    4312:	4922      	ldr	r1, [pc, #136]	; (439c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    4314:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    4318:	9000      	str	r0, [sp, #0]
    431a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    431e:	4d20      	ldr	r5, [pc, #128]	; (43a0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    4320:	1f01      	subs	r1, r0, #4
    4322:	b2cc      	uxtb	r4, r1
    4324:	7829      	ldrb	r1, [r5, #0]
    4326:	b179      	cbz	r1, 4348 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    4328:	786a      	ldrb	r2, [r5, #1]
    432a:	4282      	cmp	r2, r0
    432c:	d10c      	bne.n	4348 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    432e:	4a1d      	ldr	r2, [pc, #116]	; (43a4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    4330:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    4334:	6010      	str	r0, [r2, #0]
    4336:	2901      	cmp	r1, #1
    4338:	bf08      	it	eq
    433a:	f7ff fd39 	bleq	3db0 <MPSL_IRQ_TIMER0_Handler+0x100>
    433e:	702f      	strb	r7, [r5, #0]
    4340:	4919      	ldr	r1, [pc, #100]	; (43a8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd0>)
    4342:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    4346:	60c8      	str	r0, [r1, #12]
    4348:	4918      	ldr	r1, [pc, #96]	; (43ac <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd4>)
    434a:	f104 0010 	add.w	r0, r4, #16
    434e:	fa06 f000 	lsl.w	r0, r6, r0
    4352:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    4356:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
    435a:	00a0      	lsls	r0, r4, #2
    435c:	4408      	add	r0, r1
    435e:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    4362:	4a13      	ldr	r2, [pc, #76]	; (43b0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd8>)
    4364:	6812      	ldr	r2, [r2, #0]
    4366:	1a80      	subs	r0, r0, r2
    4368:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    436c:	2802      	cmp	r0, #2
    436e:	d307      	bcc.n	4380 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa8>
    4370:	eb01 0284 	add.w	r2, r1, r4, lsl #2
    4374:	2000      	movs	r0, #0
    4376:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    437a:	eb08 0084 	add.w	r0, r8, r4, lsl #2
    437e:	500f      	str	r7, [r1, r0]
    4380:	480c      	ldr	r0, [pc, #48]	; (43b4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xdc>)
    4382:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    4386:	9000      	str	r0, [sp, #0]
    4388:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    438c:	f240 317f 	movw	r1, #895	; 0x37f
    4390:	206c      	movs	r0, #108	; 0x6c
    4392:	f000 fc39 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4396:	0000      	.short	0x0000
    4398:	40008000 	.word	0x40008000
    439c:	40008140 	.word	0x40008140
    43a0:	2000002f 	.word	0x2000002f
    43a4:	4001f508 	.word	0x4001f508
    43a8:	2000002c 	.word	0x2000002c
    43ac:	4000b000 	.word	0x4000b000
    43b0:	4000b504 	.word	0x4000b504
    43b4:	4000b140 	.word	0x4000b140

000043b8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    43b8:	4920      	ldr	r1, [pc, #128]	; (443c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x84>)
    43ba:	f46f 2080 	mvn.w	r0, #262144	; 0x40000
    43be:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    43c2:	481f      	ldr	r0, [pc, #124]	; (4440 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x88>)
    43c4:	1d0a      	adds	r2, r1, #4
    43c6:	7803      	ldrb	r3, [r0, #0]
    43c8:	2000      	movs	r0, #0
    43ca:	b15b      	cbz	r3, 43e4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x2c>
    43cc:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    43d0:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    43d4:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    43d8:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    43dc:	4919      	ldr	r1, [pc, #100]	; (4444 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x8c>)
    43de:	6809      	ldr	r1, [r1, #0]
    43e0:	b999      	cbnz	r1, 440a <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x52>
    43e2:	e00c      	b.n	43fe <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x46>
    43e4:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    43e8:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    43ec:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    43f0:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    43f4:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    43f8:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    43fc:	e7ee      	b.n	43dc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x24>
    43fe:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    4402:	f44f 6100 	mov.w	r1, #2048	; 0x800
    4406:	f8c2 1280 	str.w	r1, [r2, #640]	; 0x280
    440a:	490f      	ldr	r1, [pc, #60]	; (4448 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x90>)
    440c:	f04f 32ff 	mov.w	r2, #4294967295
    4410:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    4414:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    4418:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    441c:	1d0a      	adds	r2, r1, #4
    441e:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    4422:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    4426:	1d12      	adds	r2, r2, #4
    4428:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    442c:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    4430:	1d12      	adds	r2, r2, #4
    4432:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    4436:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    443a:	4770      	bx	lr
    443c:	4000b000 	.word	0x4000b000
    4440:	2000002f 	.word	0x2000002f
    4444:	4000b148 	.word	0x4000b148
    4448:	40008000 	.word	0x40008000

0000444c <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>:
    444c:	4808      	ldr	r0, [pc, #32]	; (4470 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I+0x24>)
    444e:	f990 0002 	ldrsb.w	r0, [r0, #2]
    4452:	2800      	cmp	r0, #0
    4454:	bfb8      	it	lt
    4456:	4770      	bxlt	lr
    4458:	f000 011f 	and.w	r1, r0, #31
    445c:	2201      	movs	r2, #1
    445e:	fa02 f101 	lsl.w	r1, r2, r1
    4462:	0940      	lsrs	r0, r0, #5
    4464:	0080      	lsls	r0, r0, #2
    4466:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    446a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    446e:	4770      	bx	lr
    4470:	2000002c 	.word	0x2000002c

00004474 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>:
    4474:	b510      	push	{r4, lr}
    4476:	2807      	cmp	r0, #7
    4478:	d20d      	bcs.n	4496 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x22>
    447a:	e8df f000 	tbb	[pc, r0]
    447e:	0404      	.short	0x0404
    4480:	06060404 	.word	0x06060404
    4484:	0006      	.short	0x0006
    4486:	4906      	ldr	r1, [pc, #24]	; (44a0 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x2c>)
    4488:	e002      	b.n	4490 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x1c>
    448a:	1f00      	subs	r0, r0, #4
    448c:	4905      	ldr	r1, [pc, #20]	; (44a4 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x30>)
    448e:	b2c0      	uxtb	r0, r0
    4490:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    4494:	bd10      	pop	{r4, pc}
    4496:	f240 3122 	movw	r1, #802	; 0x322
    449a:	206c      	movs	r0, #108	; 0x6c
    449c:	f000 fbb4 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    44a0:	40008140 	.word	0x40008140
    44a4:	4000b140 	.word	0x4000b140

000044a8 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>:
    44a8:	b510      	push	{r4, lr}
    44aa:	2807      	cmp	r0, #7
    44ac:	d20d      	bcs.n	44ca <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x22>
    44ae:	e8df f000 	tbb	[pc, r0]
    44b2:	0404      	.short	0x0404
    44b4:	06060404 	.word	0x06060404
    44b8:	0006      	.short	0x0006
    44ba:	4906      	ldr	r1, [pc, #24]	; (44d4 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x2c>)
    44bc:	e002      	b.n	44c4 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x1c>
    44be:	1f00      	subs	r0, r0, #4
    44c0:	4905      	ldr	r1, [pc, #20]	; (44d8 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x30>)
    44c2:	b2c0      	uxtb	r0, r0
    44c4:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    44c8:	bd10      	pop	{r4, pc}
    44ca:	f240 3122 	movw	r1, #802	; 0x322
    44ce:	206c      	movs	r0, #108	; 0x6c
    44d0:	f000 fb9a 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    44d4:	40008140 	.word	0x40008140
    44d8:	4000b140 	.word	0x4000b140

000044dc <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    44dc:	b570      	push	{r4, r5, r6, lr}
    44de:	481a      	ldr	r0, [pc, #104]	; (4548 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x6c>)
    44e0:	2400      	movs	r4, #0
    44e2:	2104      	movs	r1, #4
    44e4:	7004      	strb	r4, [r0, #0]
    44e6:	1ec0      	subs	r0, r0, #3
    44e8:	7001      	strb	r1, [r0, #0]
    44ea:	0589      	lsls	r1, r1, #22
    44ec:	60c1      	str	r1, [r0, #12]
    44ee:	f7ff fc5f 	bl	3db0 <MPSL_IRQ_TIMER0_Handler+0x100>
    44f2:	2301      	movs	r3, #1
    44f4:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    44f8:	02dd      	lsls	r5, r3, #11
    44fa:	f8cc 5180 	str.w	r5, [ip, #384]	; 0x180
    44fe:	f3bf 8f4f 	dsb	sy
    4502:	f3bf 8f6f 	isb	sy
    4506:	f8cc 5280 	str.w	r5, [ip, #640]	; 0x280
    450a:	4a10      	ldr	r2, [pc, #64]	; (454c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x70>)
    450c:	6053      	str	r3, [r2, #4]
    450e:	6093      	str	r3, [r2, #8]
    4510:	480f      	ldr	r0, [pc, #60]	; (4550 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x74>)
    4512:	6801      	ldr	r1, [r0, #0]
    4514:	2900      	cmp	r1, #0
    4516:	d1fc      	bne.n	4512 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x36>
    4518:	1e48      	subs	r0, r1, #1
    451a:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    451e:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    4522:	f8c2 4540 	str.w	r4, [r2, #1344]	; 0x540
    4526:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    452a:	480a      	ldr	r0, [pc, #40]	; (4554 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x78>)
    452c:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    4530:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    4534:	1d00      	adds	r0, r0, #4
    4536:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    453a:	f8c2 4148 	str.w	r4, [r2, #328]	; 0x148
    453e:	f8cc 5100 	str.w	r5, [ip, #256]	; 0x100
    4542:	6013      	str	r3, [r2, #0]
    4544:	bd70      	pop	{r4, r5, r6, pc}
    4546:	0000      	.short	0x0000
    4548:	2000002f 	.word	0x2000002f
    454c:	4000b000 	.word	0x4000b000
    4550:	4000b504 	.word	0x4000b504
    4554:	4000b004 	.word	0x4000b004

00004558 <MPSL_IRQ_CLOCK_Handler>:
    4558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    455c:	4c16      	ldr	r4, [pc, #88]	; (45b8 <MPSL_IRQ_CLOCK_Handler+0x60>)
    455e:	7a60      	ldrb	r0, [r4, #9]
    4560:	2800      	cmp	r0, #0
    4562:	d027      	beq.n	45b4 <MPSL_IRQ_CLOCK_Handler+0x5c>
    4564:	f44f 7180 	mov.w	r1, #256	; 0x100
    4568:	058d      	lsls	r5, r1, #22
    456a:	4628      	mov	r0, r5
    456c:	f008 fecb 	bl	d306 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    4570:	4680      	mov	r8, r0
    4572:	f44f 7182 	mov.w	r1, #260	; 0x104
    4576:	4628      	mov	r0, r5
    4578:	f008 fec5 	bl	d306 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    457c:	2600      	movs	r6, #0
    457e:	4607      	mov	r7, r0
    4580:	f1b8 0f00 	cmp.w	r8, #0
    4584:	d009      	beq.n	459a <MPSL_IRQ_CLOCK_Handler+0x42>
    4586:	2001      	movs	r0, #1
    4588:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    458c:	7920      	ldrb	r0, [r4, #4]
    458e:	b120      	cbz	r0, 459a <MPSL_IRQ_CLOCK_Handler+0x42>
    4590:	7126      	strb	r6, [r4, #4]
    4592:	69e0      	ldr	r0, [r4, #28]
    4594:	b108      	cbz	r0, 459a <MPSL_IRQ_CLOCK_Handler+0x42>
    4596:	4780      	blx	r0
    4598:	61e6      	str	r6, [r4, #28]
    459a:	b137      	cbz	r7, 45aa <MPSL_IRQ_CLOCK_Handler+0x52>
    459c:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    45a0:	2002      	movs	r0, #2
    45a2:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    45a6:	f000 fa63 	bl	4a70 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    45aa:	4640      	mov	r0, r8
    45ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    45b0:	f000 b858 	b.w	4664 <MPSL_IRQ_CLOCK_Handler+0x10c>
    45b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    45b8:	2000003c 	.word	0x2000003c
    45bc:	b510      	push	{r4, lr}
    45be:	f008 ff4c 	bl	d45a <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    45c2:	b930      	cbnz	r0, 45d2 <MPSL_IRQ_CLOCK_Handler+0x7a>
    45c4:	f008 ff6a 	bl	d49c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    45c8:	b918      	cbnz	r0, 45d2 <MPSL_IRQ_CLOCK_Handler+0x7a>
    45ca:	f008 ff9d 	bl	d508 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    45ce:	2800      	cmp	r0, #0
    45d0:	d002      	beq.n	45d8 <MPSL_IRQ_CLOCK_Handler+0x80>
    45d2:	4902      	ldr	r1, [pc, #8]	; (45dc <MPSL_IRQ_CLOCK_Handler+0x84>)
    45d4:	2002      	movs	r0, #2
    45d6:	6008      	str	r0, [r1, #0]
    45d8:	bd10      	pop	{r4, pc}
    45da:	0000      	.short	0x0000
    45dc:	40000c34 	.word	0x40000c34
    45e0:	b570      	push	{r4, r5, r6, lr}
    45e2:	f000 f98b 	bl	48fc <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    45e6:	f000 fa97 	bl	4b18 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    45ea:	4c09      	ldr	r4, [pc, #36]	; (4610 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    45ec:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    45f0:	b130      	cbz	r0, 4600 <MPSL_IRQ_CLOCK_Handler+0xa8>
    45f2:	f7ff ffe3 	bl	45bc <MPSL_IRQ_CLOCK_Handler+0x64>
    45f6:	2001      	movs	r0, #1
    45f8:	6128      	str	r0, [r5, #16]
    45fa:	2004      	movs	r0, #4
    45fc:	72a0      	strb	r0, [r4, #10]
    45fe:	e004      	b.n	460a <MPSL_IRQ_CLOCK_Handler+0xb2>
    4600:	2003      	movs	r0, #3
    4602:	72a0      	strb	r0, [r4, #10]
    4604:	2001      	movs	r0, #1
    4606:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    460a:	2000      	movs	r0, #0
    460c:	71e0      	strb	r0, [r4, #7]
    460e:	bd70      	pop	{r4, r5, r6, pc}
    4610:	2000003c 	.word	0x2000003c
    4614:	b570      	push	{r4, r5, r6, lr}
    4616:	4c12      	ldr	r4, [pc, #72]	; (4660 <MPSL_IRQ_CLOCK_Handler+0x108>)
    4618:	79a0      	ldrb	r0, [r4, #6]
    461a:	b1e0      	cbz	r0, 4656 <MPSL_IRQ_CLOCK_Handler+0xfe>
    461c:	79e1      	ldrb	r1, [r4, #7]
    461e:	1e40      	subs	r0, r0, #1
    4620:	4281      	cmp	r1, r0
    4622:	da18      	bge.n	4656 <MPSL_IRQ_CLOCK_Handler+0xfe>
    4624:	f000 fa78 	bl	4b18 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    4628:	4605      	mov	r5, r0
    462a:	f000 fb5d 	bl	4ce8 <mpsl_temperature_get>
    462e:	79a1      	ldrb	r1, [r4, #6]
    4630:	2901      	cmp	r1, #1
    4632:	d902      	bls.n	463a <MPSL_IRQ_CLOCK_Handler+0xe2>
    4634:	79e1      	ldrb	r1, [r4, #7]
    4636:	1c49      	adds	r1, r1, #1
    4638:	71e1      	strb	r1, [r4, #7]
    463a:	b10d      	cbz	r5, 4640 <MPSL_IRQ_CLOCK_Handler+0xe8>
    463c:	6961      	ldr	r1, [r4, #20]
    463e:	e000      	b.n	4642 <MPSL_IRQ_CLOCK_Handler+0xea>
    4640:	6921      	ldr	r1, [r4, #16]
    4642:	1a41      	subs	r1, r0, r1
    4644:	2902      	cmp	r1, #2
    4646:	da02      	bge.n	464e <MPSL_IRQ_CLOCK_Handler+0xf6>
    4648:	f111 0f02 	cmn.w	r1, #2
    464c:	dc07      	bgt.n	465e <MPSL_IRQ_CLOCK_Handler+0x106>
    464e:	b10d      	cbz	r5, 4654 <MPSL_IRQ_CLOCK_Handler+0xfc>
    4650:	6160      	str	r0, [r4, #20]
    4652:	e000      	b.n	4656 <MPSL_IRQ_CLOCK_Handler+0xfe>
    4654:	6120      	str	r0, [r4, #16]
    4656:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    465a:	f7ff bfc1 	b.w	45e0 <MPSL_IRQ_CLOCK_Handler+0x88>
    465e:	bd70      	pop	{r4, r5, r6, pc}
    4660:	2000003c 	.word	0x2000003c
    4664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4668:	4606      	mov	r6, r0
    466a:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    466e:	f44f 7186 	mov.w	r1, #268	; 0x10c
    4672:	4628      	mov	r0, r5
    4674:	f008 fe47 	bl	d306 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    4678:	4680      	mov	r8, r0
    467a:	f44f 7188 	mov.w	r1, #272	; 0x110
    467e:	4628      	mov	r0, r5
    4680:	f008 fe41 	bl	d306 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    4684:	4c27      	ldr	r4, [pc, #156]	; (4724 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    4686:	4682      	mov	sl, r0
    4688:	7827      	ldrb	r7, [r4, #0]
    468a:	f104 0008 	add.w	r0, r4, #8
    468e:	f008 feae 	bl	d3ee <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4692:	b110      	cbz	r0, 469a <MPSL_IRQ_CLOCK_Handler+0x142>
    4694:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    4698:	e016      	b.n	46c8 <MPSL_IRQ_CLOCK_Handler+0x170>
    469a:	f04f 0901 	mov.w	r9, #1
    469e:	b146      	cbz	r6, 46b2 <MPSL_IRQ_CLOCK_Handler+0x15a>
    46a0:	7aa0      	ldrb	r0, [r4, #10]
    46a2:	2803      	cmp	r0, #3
    46a4:	d105      	bne.n	46b2 <MPSL_IRQ_CLOCK_Handler+0x15a>
    46a6:	2004      	movs	r0, #4
    46a8:	72a0      	strb	r0, [r4, #10]
    46aa:	f7ff ff87 	bl	45bc <MPSL_IRQ_CLOCK_Handler+0x64>
    46ae:	f8c5 9010 	str.w	r9, [r5, #16]
    46b2:	2600      	movs	r6, #0
    46b4:	f1b8 0f00 	cmp.w	r8, #0
    46b8:	d018      	beq.n	46ec <MPSL_IRQ_CLOCK_Handler+0x194>
    46ba:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    46be:	7aa0      	ldrb	r0, [r4, #10]
    46c0:	2804      	cmp	r0, #4
    46c2:	d004      	beq.n	46ce <MPSL_IRQ_CLOCK_Handler+0x176>
    46c4:	f44f 71de 	mov.w	r1, #444	; 0x1bc
    46c8:	206d      	movs	r0, #109	; 0x6d
    46ca:	f000 fa9d 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    46ce:	f008 fec4 	bl	d45a <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    46d2:	b928      	cbnz	r0, 46e0 <MPSL_IRQ_CLOCK_Handler+0x188>
    46d4:	f008 fee2 	bl	d49c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    46d8:	b910      	cbnz	r0, 46e0 <MPSL_IRQ_CLOCK_Handler+0x188>
    46da:	f008 ff15 	bl	d508 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    46de:	b108      	cbz	r0, 46e4 <MPSL_IRQ_CLOCK_Handler+0x18c>
    46e0:	4811      	ldr	r0, [pc, #68]	; (4728 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    46e2:	6006      	str	r6, [r0, #0]
    46e4:	2002      	movs	r0, #2
    46e6:	72a0      	strb	r0, [r4, #10]
    46e8:	f000 f8ec 	bl	48c4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    46ec:	f1ba 0f00 	cmp.w	sl, #0
    46f0:	d008      	beq.n	4704 <MPSL_IRQ_CLOCK_Handler+0x1ac>
    46f2:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    46f6:	7aa0      	ldrb	r0, [r4, #10]
    46f8:	2802      	cmp	r0, #2
    46fa:	d101      	bne.n	4700 <MPSL_IRQ_CLOCK_Handler+0x1a8>
    46fc:	f7ff ff8a 	bl	4614 <MPSL_IRQ_CLOCK_Handler+0xbc>
    4700:	f8c5 9014 	str.w	r9, [r5, #20]
    4704:	b13f      	cbz	r7, 4716 <MPSL_IRQ_CLOCK_Handler+0x1be>
    4706:	7026      	strb	r6, [r4, #0]
    4708:	7aa0      	ldrb	r0, [r4, #10]
    470a:	2802      	cmp	r0, #2
    470c:	d101      	bne.n	4712 <MPSL_IRQ_CLOCK_Handler+0x1ba>
    470e:	f7ff ff67 	bl	45e0 <MPSL_IRQ_CLOCK_Handler+0x88>
    4712:	f000 f8d7 	bl	48c4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    4716:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    471a:	4802      	ldr	r0, [pc, #8]	; (4724 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    471c:	3008      	adds	r0, #8
    471e:	f008 be7d 	b.w	d41c <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    4722:	0000      	.short	0x0000
    4724:	2000003c 	.word	0x2000003c
    4728:	40000c34 	.word	0x40000c34
    472c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4730:	4c5f      	ldr	r4, [pc, #380]	; (48b0 <MPSL_IRQ_CLOCK_Handler+0x358>)
    4732:	2700      	movs	r7, #0
    4734:	4606      	mov	r6, r0
    4736:	61a7      	str	r7, [r4, #24]
    4738:	7842      	ldrb	r2, [r0, #1]
    473a:	7881      	ldrb	r1, [r0, #2]
    473c:	7800      	ldrb	r0, [r0, #0]
    473e:	72e0      	strb	r0, [r4, #11]
    4740:	7162      	strb	r2, [r4, #5]
    4742:	71a1      	strb	r1, [r4, #6]
    4744:	71e7      	strb	r7, [r4, #7]
    4746:	f04f 0801 	mov.w	r8, #1
    474a:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    474e:	2805      	cmp	r0, #5
    4750:	d225      	bcs.n	479e <MPSL_IRQ_CLOCK_Handler+0x246>
    4752:	e8df f000 	tbb	[pc, r0]
    4756:	0310      	.short	0x0310
    4758:	00222006 	.word	0x00222006
    475c:	f8c4 8018 	str.w	r8, [r4, #24]
    4760:	e009      	b.n	4776 <MPSL_IRQ_CLOCK_Handler+0x21e>
    4762:	f000 f8cb 	bl	48fc <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    4766:	2101      	movs	r1, #1
    4768:	4628      	mov	r0, r5
    476a:	f008 fdd1 	bl	d310 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    476e:	2800      	cmp	r0, #0
    4770:	d0f9      	beq.n	4766 <MPSL_IRQ_CLOCK_Handler+0x20e>
    4772:	2002      	movs	r0, #2
    4774:	61a0      	str	r0, [r4, #24]
    4776:	f008 fdf7 	bl	d368 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    477a:	b1b0      	cbz	r0, 47aa <MPSL_IRQ_CLOCK_Handler+0x252>
    477c:	f000 f9e6 	bl	4b4c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    4780:	7e21      	ldrb	r1, [r4, #24]
    4782:	f001 0103 	and.w	r1, r1, #3
    4786:	4288      	cmp	r0, r1
    4788:	d10f      	bne.n	47aa <MPSL_IRQ_CLOCK_Handler+0x252>
    478a:	79b0      	ldrb	r0, [r6, #6]
    478c:	b150      	cbz	r0, 47a4 <MPSL_IRQ_CLOCK_Handler+0x24c>
    478e:	2002      	movs	r0, #2
    4790:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    4794:	e070      	b.n	4878 <MPSL_IRQ_CLOCK_Handler+0x320>
    4796:	4847      	ldr	r0, [pc, #284]	; (48b4 <MPSL_IRQ_CLOCK_Handler+0x35c>)
    4798:	e7ec      	b.n	4774 <MPSL_IRQ_CLOCK_Handler+0x21c>
    479a:	4847      	ldr	r0, [pc, #284]	; (48b8 <MPSL_IRQ_CLOCK_Handler+0x360>)
    479c:	e7ea      	b.n	4774 <MPSL_IRQ_CLOCK_Handler+0x21c>
    479e:	f240 312b 	movw	r1, #811	; 0x32b
    47a2:	e04d      	b.n	4840 <MPSL_IRQ_CLOCK_Handler+0x2e8>
    47a4:	f000 f9a6 	bl	4af4 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    47a8:	e066      	b.n	4878 <MPSL_IRQ_CLOCK_Handler+0x320>
    47aa:	f8c5 800c 	str.w	r8, [r5, #12]
    47ae:	f44f 7a82 	mov.w	sl, #260	; 0x104
    47b2:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    47b6:	69a0      	ldr	r0, [r4, #24]
    47b8:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    47bc:	f008 fe39 	bl	d432 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    47c0:	b940      	cbnz	r0, 47d4 <MPSL_IRQ_CLOCK_Handler+0x27c>
    47c2:	f008 fe40 	bl	d446 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    47c6:	b928      	cbnz	r0, 47d4 <MPSL_IRQ_CLOCK_Handler+0x27c>
    47c8:	f008 fe54 	bl	d474 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    47cc:	b910      	cbnz	r0, 47d4 <MPSL_IRQ_CLOCK_Handler+0x27c>
    47ce:	f008 fe65 	bl	d49c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    47d2:	b138      	cbz	r0, 47e4 <MPSL_IRQ_CLOCK_Handler+0x28c>
    47d4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    47d8:	f8d0 0244 	ldr.w	r0, [r0, #580]	; 0x244
    47dc:	4937      	ldr	r1, [pc, #220]	; (48bc <MPSL_IRQ_CLOCK_Handler+0x364>)
    47de:	f3c0 3042 	ubfx	r0, r0, #13, #3
    47e2:	6008      	str	r0, [r1, #0]
    47e4:	f008 fe25 	bl	d432 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    47e8:	b940      	cbnz	r0, 47fc <MPSL_IRQ_CLOCK_Handler+0x2a4>
    47ea:	f008 fe2c 	bl	d446 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    47ee:	b928      	cbnz	r0, 47fc <MPSL_IRQ_CLOCK_Handler+0x2a4>
    47f0:	f008 fe40 	bl	d474 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    47f4:	b910      	cbnz	r0, 47fc <MPSL_IRQ_CLOCK_Handler+0x2a4>
    47f6:	f008 fe51 	bl	d49c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    47fa:	b118      	cbz	r0, 4804 <MPSL_IRQ_CLOCK_Handler+0x2ac>
    47fc:	492f      	ldr	r1, [pc, #188]	; (48bc <MPSL_IRQ_CLOCK_Handler+0x364>)
    47fe:	3110      	adds	r1, #16
    4800:	f8c1 8000 	str.w	r8, [r1]
    4804:	f8c5 8008 	str.w	r8, [r5, #8]
    4808:	2002      	movs	r0, #2
    480a:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    480e:	79b0      	ldrb	r0, [r6, #6]
    4810:	bb90      	cbnz	r0, 4878 <MPSL_IRQ_CLOCK_Handler+0x320>
    4812:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    4816:	f010 0f02 	tst.w	r0, #2
    481a:	d00f      	beq.n	483c <MPSL_IRQ_CLOCK_Handler+0x2e4>
    481c:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 48c0 <MPSL_IRQ_CLOCK_Handler+0x368>
    4820:	f8d9 1000 	ldr.w	r1, [r9]
    4824:	43c9      	mvns	r1, r1
    4826:	f341 1100 	sbfx	r1, r1, #4, #1
    482a:	f101 0801 	add.w	r8, r1, #1
    482e:	f8d9 1000 	ldr.w	r1, [r9]
    4832:	f041 0110 	orr.w	r1, r1, #16
    4836:	f8c9 1000 	str.w	r1, [r9]
    483a:	e007      	b.n	484c <MPSL_IRQ_CLOCK_Handler+0x2f4>
    483c:	f44f 713b 	mov.w	r1, #748	; 0x2ec
    4840:	206d      	movs	r0, #109	; 0x6d
    4842:	f000 f9e1 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4846:	bf00      	nop
    4848:	f000 fb04 	bl	4e54 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    484c:	4651      	mov	r1, sl
    484e:	4628      	mov	r0, r5
    4850:	f008 fd59 	bl	d306 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    4854:	2800      	cmp	r0, #0
    4856:	d0f7      	beq.n	4848 <MPSL_IRQ_CLOCK_Handler+0x2f0>
    4858:	f000 f94c 	bl	4af4 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    485c:	f1b8 0f00 	cmp.w	r8, #0
    4860:	d105      	bne.n	486e <MPSL_IRQ_CLOCK_Handler+0x316>
    4862:	f8d9 1000 	ldr.w	r1, [r9]
    4866:	f021 0110 	bic.w	r1, r1, #16
    486a:	f8c9 1000 	str.w	r1, [r9]
    486e:	2002      	movs	r0, #2
    4870:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    4874:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    4878:	79a0      	ldrb	r0, [r4, #6]
    487a:	b170      	cbz	r0, 489a <MPSL_IRQ_CLOCK_Handler+0x342>
    487c:	7830      	ldrb	r0, [r6, #0]
    487e:	b960      	cbnz	r0, 489a <MPSL_IRQ_CLOCK_Handler+0x342>
    4880:	f000 f94a 	bl	4b18 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    4884:	4606      	mov	r6, r0
    4886:	f000 fa2f 	bl	4ce8 <mpsl_temperature_get>
    488a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    488e:	b116      	cbz	r6, 4896 <MPSL_IRQ_CLOCK_Handler+0x33e>
    4890:	e9c4 1004 	strd	r1, r0, [r4, #16]
    4894:	e001      	b.n	489a <MPSL_IRQ_CLOCK_Handler+0x342>
    4896:	e9c4 0104 	strd	r0, r1, [r4, #16]
    489a:	2101      	movs	r1, #1
    489c:	4628      	mov	r0, r5
    489e:	f008 fd37 	bl	d310 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    48a2:	b108      	cbz	r0, 48a8 <MPSL_IRQ_CLOCK_Handler+0x350>
    48a4:	f000 f932 	bl	4b0c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    48a8:	72a7      	strb	r7, [r4, #10]
    48aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    48ae:	0000      	.short	0x0000
    48b0:	2000003c 	.word	0x2000003c
    48b4:	00020001 	.word	0x00020001
    48b8:	00030001 	.word	0x00030001
    48bc:	4000053c 	.word	0x4000053c
    48c0:	e000ed10 	.word	0xe000ed10

000048c4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    48c4:	b510      	push	{r4, lr}
    48c6:	f3ef 8410 	mrs	r4, PRIMASK
    48ca:	b672      	cpsid	i
    48cc:	480a      	ldr	r0, [pc, #40]	; (48f8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    48ce:	7841      	ldrb	r1, [r0, #1]
    48d0:	b129      	cbz	r1, 48de <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    48d2:	7841      	ldrb	r1, [r0, #1]
    48d4:	1e49      	subs	r1, r1, #1
    48d6:	7041      	strb	r1, [r0, #1]
    48d8:	7841      	ldrb	r1, [r0, #1]
    48da:	b129      	cbz	r1, 48e8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    48dc:	e008      	b.n	48f0 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    48de:	f240 110d 	movw	r1, #269	; 0x10d
    48e2:	206d      	movs	r0, #109	; 0x6d
    48e4:	f000 f990 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    48e8:	7880      	ldrb	r0, [r0, #2]
    48ea:	b908      	cbnz	r0, 48f0 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    48ec:	f000 f922 	bl	4b34 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    48f0:	2c00      	cmp	r4, #0
    48f2:	d100      	bne.n	48f6 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    48f4:	b662      	cpsie	i
    48f6:	bd10      	pop	{r4, pc}
    48f8:	2000003c 	.word	0x2000003c

000048fc <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    48fc:	b510      	push	{r4, lr}
    48fe:	f3ef 8410 	mrs	r4, PRIMASK
    4902:	b672      	cpsid	i
    4904:	4806      	ldr	r0, [pc, #24]	; (4920 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    4906:	7841      	ldrb	r1, [r0, #1]
    4908:	1c49      	adds	r1, r1, #1
    490a:	7041      	strb	r1, [r0, #1]
    490c:	7840      	ldrb	r0, [r0, #1]
    490e:	2801      	cmp	r0, #1
    4910:	d101      	bne.n	4916 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    4912:	f008 fd14 	bl	d33e <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    4916:	2c00      	cmp	r4, #0
    4918:	d100      	bne.n	491c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    491a:	b662      	cpsie	i
    491c:	bd10      	pop	{r4, pc}
    491e:	0000      	.short	0x0000
    4920:	2000003c 	.word	0x2000003c

00004924 <mpsl_clock_hfclk_release>:
    4924:	4805      	ldr	r0, [pc, #20]	; (493c <mpsl_clock_hfclk_release+0x18>)
    4926:	b510      	push	{r4, lr}
    4928:	78c1      	ldrb	r1, [r0, #3]
    492a:	b121      	cbz	r1, 4936 <mpsl_clock_hfclk_release+0x12>
    492c:	2100      	movs	r1, #0
    492e:	7101      	strb	r1, [r0, #4]
    4930:	70c1      	strb	r1, [r0, #3]
    4932:	f7ff ffc7 	bl	48c4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    4936:	2000      	movs	r0, #0
    4938:	bd10      	pop	{r4, pc}
    493a:	0000      	.short	0x0000
    493c:	2000003c 	.word	0x2000003c

00004940 <mpsl_clock_hfclk_request>:
    4940:	b570      	push	{r4, r5, r6, lr}
    4942:	4c0c      	ldr	r4, [pc, #48]	; (4974 <mpsl_clock_hfclk_request+0x34>)
    4944:	78e1      	ldrb	r1, [r4, #3]
    4946:	b961      	cbnz	r1, 4962 <mpsl_clock_hfclk_request+0x22>
    4948:	2501      	movs	r5, #1
    494a:	70e5      	strb	r5, [r4, #3]
    494c:	61e0      	str	r0, [r4, #28]
    494e:	f7ff ffd5 	bl	48fc <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    4952:	f000 f8e1 	bl	4b18 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    4956:	b130      	cbz	r0, 4966 <mpsl_clock_hfclk_request+0x26>
    4958:	69e0      	ldr	r0, [r4, #28]
    495a:	b110      	cbz	r0, 4962 <mpsl_clock_hfclk_request+0x22>
    495c:	4780      	blx	r0
    495e:	2000      	movs	r0, #0
    4960:	61e0      	str	r0, [r4, #28]
    4962:	2000      	movs	r0, #0
    4964:	bd70      	pop	{r4, r5, r6, pc}
    4966:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    496a:	7125      	strb	r5, [r4, #4]
    496c:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    4970:	e7f7      	b.n	4962 <mpsl_clock_hfclk_request+0x22>
    4972:	0000      	.short	0x0000
    4974:	2000003c 	.word	0x2000003c

00004978 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    4978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    497c:	0004      	movs	r4, r0
    497e:	f06f 0015 	mvn.w	r0, #21
    4982:	d03c      	beq.n	49fe <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    4984:	7821      	ldrb	r1, [r4, #0]
    4986:	2904      	cmp	r1, #4
    4988:	d839      	bhi.n	49fe <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    498a:	2900      	cmp	r1, #0
    498c:	7861      	ldrb	r1, [r4, #1]
    498e:	d038      	beq.n	4a02 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8a>
    4990:	2900      	cmp	r1, #0
    4992:	d134      	bne.n	49fe <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    4994:	78a1      	ldrb	r1, [r4, #2]
    4996:	2900      	cmp	r1, #0
    4998:	d131      	bne.n	49fe <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    499a:	2000      	movs	r0, #0
    499c:	f008 fc7e 	bl	d29c <MPSL_IRQ_RADIO_Handler+0x1e>
    49a0:	2000      	movs	r0, #0
    49a2:	f008 fc6e 	bl	d282 <MPSL_IRQ_RADIO_Handler+0x4>
    49a6:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    49aa:	f04f 31ff 	mov.w	r1, #4294967295
    49ae:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    49b2:	2500      	movs	r5, #0
    49b4:	f8c8 5100 	str.w	r5, [r8, #256]	; 0x100
    49b8:	f8c8 5104 	str.w	r5, [r8, #260]	; 0x104
    49bc:	f8c8 510c 	str.w	r5, [r8, #268]	; 0x10c
    49c0:	f8c8 5110 	str.w	r5, [r8, #272]	; 0x110
    49c4:	4e13      	ldr	r6, [pc, #76]	; (4a14 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x9c>)
    49c6:	7075      	strb	r5, [r6, #1]
    49c8:	88a0      	ldrh	r0, [r4, #4]
    49ca:	81b0      	strh	r0, [r6, #12]
    49cc:	f008 fcae 	bl	d32c <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    49d0:	2701      	movs	r7, #1
    49d2:	b108      	cbz	r0, 49d8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    49d4:	70f7      	strb	r7, [r6, #3]
    49d6:	7077      	strb	r7, [r6, #1]
    49d8:	2101      	movs	r1, #1
    49da:	4640      	mov	r0, r8
    49dc:	f008 fc98 	bl	d310 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    49e0:	b108      	cbz	r0, 49e6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    49e2:	f000 f893 	bl	4b0c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    49e6:	4620      	mov	r0, r4
    49e8:	f7ff fea0 	bl	472c <MPSL_IRQ_CLOCK_Handler+0x1d4>
    49ec:	7277      	strb	r7, [r6, #9]
    49ee:	2000      	movs	r0, #0
    49f0:	f008 fc47 	bl	d282 <MPSL_IRQ_RADIO_Handler+0x4>
    49f4:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    49f8:	4628      	mov	r0, r5
    49fa:	f8c1 7100 	str.w	r7, [r1, #256]	; 0x100
    49fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4a02:	2900      	cmp	r1, #0
    4a04:	d0fb      	beq.n	49fe <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    4a06:	2920      	cmp	r1, #32
    4a08:	d8f9      	bhi.n	49fe <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    4a0a:	78a1      	ldrb	r1, [r4, #2]
    4a0c:	2921      	cmp	r1, #33	; 0x21
    4a0e:	d9c4      	bls.n	499a <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    4a10:	e7f5      	b.n	49fe <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    4a12:	0000      	.short	0x0000
    4a14:	2000003c 	.word	0x2000003c

00004a18 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    4a18:	4801      	ldr	r0, [pc, #4]	; (4a20 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    4a1a:	8980      	ldrh	r0, [r0, #12]
    4a1c:	4770      	bx	lr
    4a1e:	0000      	.short	0x0000
    4a20:	2000003c 	.word	0x2000003c

00004a24 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>:
    4a24:	b510      	push	{r4, lr}
    4a26:	480d      	ldr	r0, [pc, #52]	; (4a5c <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    4a28:	f008 fce1 	bl	d3ee <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4a2c:	490b      	ldr	r1, [pc, #44]	; (4a5c <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    4a2e:	3908      	subs	r1, #8
    4a30:	b148      	cbz	r0, 4a46 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x22>
    4a32:	2001      	movs	r0, #1
    4a34:	7008      	strb	r0, [r1, #0]
    4a36:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    4a3a:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    4a3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4a42:	f7ff bf5b 	b.w	48fc <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    4a46:	7a88      	ldrb	r0, [r1, #10]
    4a48:	2802      	cmp	r0, #2
    4a4a:	d101      	bne.n	4a50 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x2c>
    4a4c:	f7ff fdc8 	bl	45e0 <MPSL_IRQ_CLOCK_Handler+0x88>
    4a50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4a54:	4801      	ldr	r0, [pc, #4]	; (4a5c <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    4a56:	f008 bce1 	b.w	d41c <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    4a5a:	0000      	.short	0x0000
    4a5c:	20000044 	.word	0x20000044

00004a60 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    4a60:	4802      	ldr	r0, [pc, #8]	; (4a6c <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    4a62:	7a80      	ldrb	r0, [r0, #10]
    4a64:	2800      	cmp	r0, #0
    4a66:	d000      	beq.n	4a6a <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    4a68:	2001      	movs	r0, #1
    4a6a:	4770      	bx	lr
    4a6c:	2000003c 	.word	0x2000003c

00004a70 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    4a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4a72:	4d1f      	ldr	r5, [pc, #124]	; (4af0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    4a74:	7ae8      	ldrb	r0, [r5, #11]
    4a76:	2800      	cmp	r0, #0
    4a78:	d10f      	bne.n	4a9a <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    4a7a:	7e28      	ldrb	r0, [r5, #24]
    4a7c:	f000 0003 	and.w	r0, r0, #3
    4a80:	f008 fc62 	bl	d348 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    4a84:	2800      	cmp	r0, #0
    4a86:	d008      	beq.n	4a9a <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    4a88:	f3ef 8110 	mrs	r1, PRIMASK
    4a8c:	b672      	cpsid	i
    4a8e:	f7ff ffe7 	bl	4a60 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    4a92:	b118      	cbz	r0, 4a9c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    4a94:	2900      	cmp	r1, #0
    4a96:	d100      	bne.n	4a9a <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    4a98:	b662      	cpsie	i
    4a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4a9c:	2601      	movs	r6, #1
    4a9e:	72ae      	strb	r6, [r5, #10]
    4aa0:	b901      	cbnz	r1, 4aa4 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    4aa2:	b662      	cpsie	i
    4aa4:	2018      	movs	r0, #24
    4aa6:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    4aaa:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    4aae:	61a6      	str	r6, [r4, #24]
    4ab0:	f44f 7020 	mov.w	r0, #640	; 0x280
    4ab4:	f8ad 0000 	strh.w	r0, [sp]
    4ab8:	f8bd 0000 	ldrh.w	r0, [sp]
    4abc:	1e41      	subs	r1, r0, #1
    4abe:	f8ad 1000 	strh.w	r1, [sp]
    4ac2:	d2f9      	bcs.n	4ab8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    4ac4:	2700      	movs	r7, #0
    4ac6:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    4aca:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    4ace:	4808      	ldr	r0, [pc, #32]	; (4af0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    4ad0:	3008      	adds	r0, #8
    4ad2:	f008 fc9f 	bl	d414 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    4ad6:	702f      	strb	r7, [r5, #0]
    4ad8:	f7ff fd82 	bl	45e0 <MPSL_IRQ_CLOCK_Handler+0x88>
    4adc:	6166      	str	r6, [r4, #20]
    4ade:	7968      	ldrb	r0, [r5, #5]
    4ae0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    4ae4:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    4ae8:	2018      	movs	r0, #24
    4aea:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    4aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4af0:	2000003c 	.word	0x2000003c

00004af4 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    4af4:	b510      	push	{r4, lr}
    4af6:	4c04      	ldr	r4, [pc, #16]	; (4b08 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    4af8:	7e20      	ldrb	r0, [r4, #24]
    4afa:	f000 0003 	and.w	r0, r0, #3
    4afe:	f008 fc23 	bl	d348 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    4b02:	2800      	cmp	r0, #0
    4b04:	d0f8      	beq.n	4af8 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    4b06:	bd10      	pop	{r4, pc}
    4b08:	2000003c 	.word	0x2000003c

00004b0c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    4b0c:	4901      	ldr	r1, [pc, #4]	; (4b14 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    4b0e:	2001      	movs	r0, #1
    4b10:	7008      	strb	r0, [r1, #0]
    4b12:	4770      	bx	lr
    4b14:	200002b0 	.word	0x200002b0

00004b18 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    4b18:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    4b1c:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    4b20:	b918      	cbnz	r0, 4b2a <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    4b22:	4803      	ldr	r0, [pc, #12]	; (4b30 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    4b24:	7800      	ldrb	r0, [r0, #0]
    4b26:	2800      	cmp	r0, #0
    4b28:	d000      	beq.n	4b2c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    4b2a:	2001      	movs	r0, #1
    4b2c:	4770      	bx	lr
    4b2e:	0000      	.short	0x0000
    4b30:	200002b0 	.word	0x200002b0

00004b34 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    4b34:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    4b38:	2101      	movs	r1, #1
    4b3a:	6041      	str	r1, [r0, #4]
    4b3c:	2100      	movs	r1, #0
    4b3e:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    4b42:	4801      	ldr	r0, [pc, #4]	; (4b48 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    4b44:	7001      	strb	r1, [r0, #0]
    4b46:	4770      	bx	lr
    4b48:	200002b0 	.word	0x200002b0

00004b4c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    4b4c:	4802      	ldr	r0, [pc, #8]	; (4b58 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    4b4e:	6800      	ldr	r0, [r0, #0]
    4b50:	f000 0003 	and.w	r0, r0, #3
    4b54:	4770      	bx	lr
    4b56:	0000      	.short	0x0000
    4b58:	4000041c 	.word	0x4000041c
    4b5c:	b510      	push	{r4, lr}
    4b5e:	b131      	cbz	r1, 4b6e <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    4b60:	2901      	cmp	r1, #1
    4b62:	d007      	beq.n	4b74 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    4b64:	f240 3102 	movw	r1, #770	; 0x302
    4b68:	a005      	add	r0, pc, #20	; (adr r0, 4b80 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    4b6a:	f000 f821 	bl	4bb0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    4b6e:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    4b72:	e001      	b.n	4b78 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    4b74:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    4b78:	f000 0001 	and.w	r0, r0, #1
    4b7c:	bd10      	pop	{r4, pc}
    4b7e:	0000      	.short	0x0000
    4b80:	5f66726e 	.word	0x5f66726e
    4b84:	636f6c63 	.word	0x636f6c63
    4b88:	00682e6b 	.word	0x00682e6b
    4b8c:	f3bf 8f4f 	dsb	sy
    4b90:	4805      	ldr	r0, [pc, #20]	; (4ba8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
    4b92:	6801      	ldr	r1, [r0, #0]
    4b94:	4a05      	ldr	r2, [pc, #20]	; (4bac <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
    4b96:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    4b9a:	4311      	orrs	r1, r2
    4b9c:	6001      	str	r1, [r0, #0]
    4b9e:	f3bf 8f4f 	dsb	sy
    4ba2:	bf00      	nop
    4ba4:	e7fd      	b.n	4ba2 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
    4ba6:	0000      	.short	0x0000
    4ba8:	e000ed0c 	.word	0xe000ed0c
    4bac:	05fa0004 	.word	0x05fa0004

00004bb0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    4bb0:	b672      	cpsid	i
    4bb2:	4a03      	ldr	r2, [pc, #12]	; (4bc0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    4bb4:	6852      	ldr	r2, [r2, #4]
    4bb6:	b102      	cbz	r2, 4bba <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    4bb8:	4790      	blx	r2
    4bba:	f7ff ffe7 	bl	4b8c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    4bbe:	0000      	.short	0x0000
    4bc0:	2000005c 	.word	0x2000005c
    4bc4:	4806      	ldr	r0, [pc, #24]	; (4be0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    4bc6:	b510      	push	{r4, lr}
    4bc8:	2100      	movs	r1, #0
    4bca:	6001      	str	r1, [r0, #0]
    4bcc:	2101      	movs	r1, #1
    4bce:	6001      	str	r1, [r0, #0]
    4bd0:	4608      	mov	r0, r1
    4bd2:	f008 fbe0 	bl	d396 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    4bd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4bda:	2001      	movs	r0, #1
    4bdc:	f008 bbce 	b.w	d37c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    4be0:	40001ffc 	.word	0x40001ffc
    4be4:	4807      	ldr	r0, [pc, #28]	; (4c04 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    4be6:	b510      	push	{r4, lr}
    4be8:	2101      	movs	r1, #1
    4bea:	6041      	str	r1, [r0, #4]
    4bec:	1e89      	subs	r1, r1, #2
    4bee:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    4bf2:	200c      	movs	r0, #12
    4bf4:	f008 fbcf 	bl	d396 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    4bf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4bfc:	200c      	movs	r0, #12
    4bfe:	f008 bbbd 	b.w	d37c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    4c02:	0000      	.short	0x0000
    4c04:	4000c000 	.word	0x4000c000

00004c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    4c08:	b50e      	push	{r1, r2, r3, lr}
    4c0a:	b672      	cpsid	i
    4c0c:	4a0f      	ldr	r2, [pc, #60]	; (4c4c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    4c0e:	6855      	ldr	r5, [r2, #4]
    4c10:	b1d5      	cbz	r5, 4c48 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    4c12:	2200      	movs	r2, #0
    4c14:	4603      	mov	r3, r0
    4c16:	466e      	mov	r6, sp
    4c18:	240a      	movs	r4, #10
    4c1a:	e003      	b.n	4c24 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    4c1c:	fbb0 f0f4 	udiv	r0, r0, r4
    4c20:	1c52      	adds	r2, r2, #1
    4c22:	b2d2      	uxtb	r2, r2
    4c24:	2800      	cmp	r0, #0
    4c26:	d1f9      	bne.n	4c1c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    4c28:	54b0      	strb	r0, [r6, r2]
    4c2a:	e009      	b.n	4c40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    4c2c:	fbb3 f0f4 	udiv	r0, r3, r4
    4c30:	fb04 3010 	mls	r0, r4, r0, r3
    4c34:	fbb3 f3f4 	udiv	r3, r3, r4
    4c38:	1e52      	subs	r2, r2, #1
    4c3a:	b2d2      	uxtb	r2, r2
    4c3c:	3030      	adds	r0, #48	; 0x30
    4c3e:	54b0      	strb	r0, [r6, r2]
    4c40:	2a00      	cmp	r2, #0
    4c42:	d1f3      	bne.n	4c2c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    4c44:	4630      	mov	r0, r6
    4c46:	47a8      	blx	r5
    4c48:	f7ff ffa0 	bl	4b8c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    4c4c:	2000005c 	.word	0x2000005c

00004c50 <mpsl_init>:
    4c50:	b570      	push	{r4, r5, r6, lr}
    4c52:	4c17      	ldr	r4, [pc, #92]	; (4cb0 <mpsl_init+0x60>)
    4c54:	4606      	mov	r6, r0
    4c56:	460d      	mov	r5, r1
    4c58:	7860      	ldrb	r0, [r4, #1]
    4c5a:	b110      	cbz	r0, 4c62 <mpsl_init+0x12>
    4c5c:	f04f 30ff 	mov.w	r0, #4294967295
    4c60:	bd70      	pop	{r4, r5, r6, pc}
    4c62:	b906      	cbnz	r6, 4c66 <mpsl_init+0x16>
    4c64:	4e13      	ldr	r6, [pc, #76]	; (4cb4 <mpsl_init+0x64>)
    4c66:	6062      	str	r2, [r4, #4]
    4c68:	7025      	strb	r5, [r4, #0]
    4c6a:	f7ff ffab 	bl	4bc4 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    4c6e:	f7ff ffb9 	bl	4be4 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    4c72:	4630      	mov	r0, r6
    4c74:	f7ff fe80 	bl	4978 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    4c78:	0006      	movs	r6, r0
    4c7a:	d1f1      	bne.n	4c60 <mpsl_init+0x10>
    4c7c:	f7fe fed2 	bl	3a24 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    4c80:	f7ff fef6 	bl	4a70 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    4c84:	f008 fa55 	bl	d132 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    4c88:	4628      	mov	r0, r5
    4c8a:	f008 fb77 	bl	d37c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    4c8e:	2001      	movs	r0, #1
    4c90:	2d00      	cmp	r5, #0
    4c92:	db09      	blt.n	4ca8 <mpsl_init+0x58>
    4c94:	f005 011f 	and.w	r1, r5, #31
    4c98:	fa00 f101 	lsl.w	r1, r0, r1
    4c9c:	096a      	lsrs	r2, r5, #5
    4c9e:	0092      	lsls	r2, r2, #2
    4ca0:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    4ca4:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    4ca8:	7060      	strb	r0, [r4, #1]
    4caa:	4630      	mov	r0, r6
    4cac:	bd70      	pop	{r4, r5, r6, pc}
    4cae:	0000      	.short	0x0000
    4cb0:	2000005c 	.word	0x2000005c
    4cb4:	0000d3b8 	.word	0x0000d3b8

00004cb8 <mpsl_is_initialized>:
    4cb8:	4801      	ldr	r0, [pc, #4]	; (4cc0 <mpsl_is_initialized+0x8>)
    4cba:	7840      	ldrb	r0, [r0, #1]
    4cbc:	4770      	bx	lr
    4cbe:	0000      	.short	0x0000
    4cc0:	2000005c 	.word	0x2000005c

00004cc4 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    4cc4:	4807      	ldr	r0, [pc, #28]	; (4ce4 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    4cc6:	f990 0000 	ldrsb.w	r0, [r0]
    4cca:	2800      	cmp	r0, #0
    4ccc:	db09      	blt.n	4ce2 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    4cce:	f000 021f 	and.w	r2, r0, #31
    4cd2:	2101      	movs	r1, #1
    4cd4:	4091      	lsls	r1, r2
    4cd6:	0940      	lsrs	r0, r0, #5
    4cd8:	0080      	lsls	r0, r0, #2
    4cda:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    4cde:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    4ce2:	4770      	bx	lr
    4ce4:	2000005c 	.word	0x2000005c

00004ce8 <mpsl_temperature_get>:
    4ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4cec:	2601      	movs	r6, #1
    4cee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    4cf2:	0331      	lsls	r1, r6, #12
    4cf4:	f04f 0800 	mov.w	r8, #0
    4cf8:	4640      	mov	r0, r8
    4cfa:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    4cfe:	f3bf 8f4f 	dsb	sy
    4d02:	f3bf 8f6f 	isb	sy
    4d06:	4c16      	ldr	r4, [pc, #88]	; (4d60 <mpsl_temperature_get+0x78>)
    4d08:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    4d0c:	200c      	movs	r0, #12
    4d0e:	f008 fb61 	bl	d3d4 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    4d12:	4d14      	ldr	r5, [pc, #80]	; (4d64 <mpsl_temperature_get+0x7c>)
    4d14:	6828      	ldr	r0, [r5, #0]
    4d16:	43c0      	mvns	r0, r0
    4d18:	f340 1700 	sbfx	r7, r0, #4, #1
    4d1c:	6828      	ldr	r0, [r5, #0]
    4d1e:	f040 0010 	orr.w	r0, r0, #16
    4d22:	6028      	str	r0, [r5, #0]
    4d24:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    4d28:	6026      	str	r6, [r4, #0]
    4d2a:	1c7f      	adds	r7, r7, #1
    4d2c:	e002      	b.n	4d34 <mpsl_temperature_get+0x4c>
    4d2e:	bf00      	nop
    4d30:	f000 f890 	bl	4e54 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    4d34:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    4d38:	2800      	cmp	r0, #0
    4d3a:	d0f9      	beq.n	4d30 <mpsl_temperature_get+0x48>
    4d3c:	b91f      	cbnz	r7, 4d46 <mpsl_temperature_get+0x5e>
    4d3e:	6828      	ldr	r0, [r5, #0]
    4d40:	f020 0010 	bic.w	r0, r0, #16
    4d44:	6028      	str	r0, [r5, #0]
    4d46:	4808      	ldr	r0, [pc, #32]	; (4d68 <mpsl_temperature_get+0x80>)
    4d48:	6805      	ldr	r5, [r0, #0]
    4d4a:	6066      	str	r6, [r4, #4]
    4d4c:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    4d50:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    4d54:	200c      	movs	r0, #12
    4d56:	f008 fb3d 	bl	d3d4 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    4d5a:	4628      	mov	r0, r5
    4d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4d60:	4000c000 	.word	0x4000c000
    4d64:	e000ed10 	.word	0xe000ed10
    4d68:	4000c508 	.word	0x4000c508

00004d6c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    4d6c:	b510      	push	{r4, lr}
    4d6e:	4602      	mov	r2, r0
    4d70:	2005      	movs	r0, #5
    4d72:	490c      	ldr	r1, [pc, #48]	; (4da4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    4d74:	e004      	b.n	4d80 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    4d76:	bf00      	nop
    4d78:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    4d7c:	791b      	ldrb	r3, [r3, #4]
    4d7e:	b133      	cbz	r3, 4d8e <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    4d80:	1e40      	subs	r0, r0, #1
    4d82:	b2c0      	uxtb	r0, r0
    4d84:	d2f8      	bcs.n	4d78 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    4d86:	2148      	movs	r1, #72	; 0x48
    4d88:	2069      	movs	r0, #105	; 0x69
    4d8a:	f7ff ff3d 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4d8e:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    4d92:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    4d96:	2200      	movs	r2, #0
    4d98:	714a      	strb	r2, [r1, #5]
    4d9a:	718a      	strb	r2, [r1, #6]
    4d9c:	2201      	movs	r2, #1
    4d9e:	710a      	strb	r2, [r1, #4]
    4da0:	bd10      	pop	{r4, pc}
    4da2:	0000      	.short	0x0000
    4da4:	20000f34 	.word	0x20000f34

00004da8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    4da8:	b510      	push	{r4, lr}
    4daa:	2805      	cmp	r0, #5
    4dac:	d301      	bcc.n	4db2 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    4dae:	2158      	movs	r1, #88	; 0x58
    4db0:	e006      	b.n	4dc0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    4db2:	490a      	ldr	r1, [pc, #40]	; (4ddc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    4db4:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    4db8:	7901      	ldrb	r1, [r0, #4]
    4dba:	2901      	cmp	r1, #1
    4dbc:	d003      	beq.n	4dc6 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    4dbe:	2159      	movs	r1, #89	; 0x59
    4dc0:	2069      	movs	r0, #105	; 0x69
    4dc2:	f7ff ff21 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4dc6:	7941      	ldrb	r1, [r0, #5]
    4dc8:	7982      	ldrb	r2, [r0, #6]
    4dca:	1c49      	adds	r1, r1, #1
    4dcc:	b2c9      	uxtb	r1, r1
    4dce:	428a      	cmp	r2, r1
    4dd0:	d000      	beq.n	4dd4 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    4dd2:	7141      	strb	r1, [r0, #5]
    4dd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4dd8:	f7ff bf74 	b.w	4cc4 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    4ddc:	20000f34 	.word	0x20000f34

00004de0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    4de0:	b570      	push	{r4, r5, r6, lr}
    4de2:	2505      	movs	r5, #5
    4de4:	4e0e      	ldr	r6, [pc, #56]	; (4e20 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    4de6:	4c0f      	ldr	r4, [pc, #60]	; (4e24 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    4de8:	e016      	b.n	4e18 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    4dea:	7821      	ldrb	r1, [r4, #0]
    4dec:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    4df0:	7902      	ldrb	r2, [r0, #4]
    4df2:	2a01      	cmp	r2, #1
    4df4:	d108      	bne.n	4e08 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    4df6:	7942      	ldrb	r2, [r0, #5]
    4df8:	7983      	ldrb	r3, [r0, #6]
    4dfa:	429a      	cmp	r2, r3
    4dfc:	d004      	beq.n	4e08 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    4dfe:	7942      	ldrb	r2, [r0, #5]
    4e00:	7182      	strb	r2, [r0, #6]
    4e02:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    4e06:	4780      	blx	r0
    4e08:	7820      	ldrb	r0, [r4, #0]
    4e0a:	1c40      	adds	r0, r0, #1
    4e0c:	b2c0      	uxtb	r0, r0
    4e0e:	7020      	strb	r0, [r4, #0]
    4e10:	2805      	cmp	r0, #5
    4e12:	d301      	bcc.n	4e18 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    4e14:	2000      	movs	r0, #0
    4e16:	7020      	strb	r0, [r4, #0]
    4e18:	1e6d      	subs	r5, r5, #1
    4e1a:	b2ed      	uxtb	r5, r5
    4e1c:	d2e5      	bcs.n	4dea <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    4e1e:	bd70      	pop	{r4, r5, r6, pc}
    4e20:	20000f34 	.word	0x20000f34
    4e24:	200002b1 	.word	0x200002b1

00004e28 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    4e28:	b500      	push	{lr}
    4e2a:	f008 fb02 	bl	d432 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    4e2e:	b940      	cbnz	r0, 4e42 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    4e30:	f008 fb09 	bl	d446 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    4e34:	b928      	cbnz	r0, 4e42 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    4e36:	f008 fb1d 	bl	d474 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    4e3a:	b910      	cbnz	r0, 4e42 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    4e3c:	f008 fb2e 	bl	d49c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4e40:	b108      	cbz	r0, 4e46 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    4e42:	4802      	ldr	r0, [pc, #8]	; (4e4c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    4e44:	bd00      	pop	{pc}
    4e46:	4802      	ldr	r0, [pc, #8]	; (4e50 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    4e48:	bd00      	pop	{pc}
    4e4a:	0000      	.short	0x0000
    4e4c:	4000050c 	.word	0x4000050c
    4e50:	4001e700 	.word	0x4001e700

00004e54 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    4e54:	b510      	push	{r4, lr}
    4e56:	f008 fb21 	bl	d49c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4e5a:	b330      	cbz	r0, 4eaa <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x56>
    4e5c:	f3ef 8010 	mrs	r0, PRIMASK
    4e60:	b1c8      	cbz	r0, 4e96 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x42>
    4e62:	2100      	movs	r1, #0
    4e64:	b672      	cpsid	i
    4e66:	4812      	ldr	r0, [pc, #72]	; (4eb0 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x5c>)
    4e68:	6802      	ldr	r2, [r0, #0]
    4e6a:	6803      	ldr	r3, [r0, #0]
    4e6c:	f3c2 1200 	ubfx	r2, r2, #4, #1
    4e70:	f043 0310 	orr.w	r3, r3, #16
    4e74:	6003      	str	r3, [r0, #0]
    4e76:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    4e7a:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    4e7e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    4e82:	431c      	orrs	r4, r3
    4e84:	d000      	beq.n	4e88 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x34>
    4e86:	bf40      	sev
    4e88:	bf20      	wfe
    4e8a:	bf00      	nop
    4e8c:	bf00      	nop
    4e8e:	bf00      	nop
    4e90:	bf00      	nop
    4e92:	b112      	cbz	r2, 4e9a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x46>
    4e94:	e005      	b.n	4ea2 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x4e>
    4e96:	2101      	movs	r1, #1
    4e98:	e7e4      	b.n	4e64 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x10>
    4e9a:	6802      	ldr	r2, [r0, #0]
    4e9c:	f022 0210 	bic.w	r2, r2, #16
    4ea0:	6002      	str	r2, [r0, #0]
    4ea2:	2900      	cmp	r1, #0
    4ea4:	d000      	beq.n	4ea8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x54>
    4ea6:	b662      	cpsie	i
    4ea8:	bd10      	pop	{r4, pc}
    4eaa:	bf20      	wfe
    4eac:	bd10      	pop	{r4, pc}
    4eae:	0000      	.short	0x0000
    4eb0:	e000ed10 	.word	0xe000ed10

00004eb4 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>:
    4eb4:	4901      	ldr	r1, [pc, #4]	; (4ebc <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q+0x8>)
    4eb6:	2001      	movs	r0, #1
    4eb8:	7088      	strb	r0, [r1, #2]
    4eba:	4770      	bx	lr
    4ebc:	20000064 	.word	0x20000064

00004ec0 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    4ec0:	0000d70d 0000d73d 0000d729 0000d717     ....=...).......
    4ed0:	0000d723 0000d711 0000d70b 0000d709     #...............
    4ee0:	0000d739 0000d72f 0000d71d 0000d703     9.../...........
    4ef0:	0000d6fb 0000d6ff 0000d6f5              ............

00004efc <mpsl_fem_disable>:
    4efc:	4801      	ldr	r0, [pc, #4]	; (4f04 <mpsl_fem_disable+0x8>)
    4efe:	6800      	ldr	r0, [r0, #0]
    4f00:	6800      	ldr	r0, [r0, #0]
    4f02:	4700      	bx	r0
    4f04:	20000078 	.word	0x20000078

00004f08 <mpsl_fem_lna_configuration_clear>:
    4f08:	4801      	ldr	r0, [pc, #4]	; (4f10 <mpsl_fem_lna_configuration_clear+0x8>)
    4f0a:	6800      	ldr	r0, [r0, #0]
    4f0c:	6940      	ldr	r0, [r0, #20]
    4f0e:	4700      	bx	r0
    4f10:	20000078 	.word	0x20000078

00004f14 <mpsl_fem_lna_configuration_set>:
    4f14:	4a01      	ldr	r2, [pc, #4]	; (4f1c <mpsl_fem_lna_configuration_set+0x8>)
    4f16:	6812      	ldr	r2, [r2, #0]
    4f18:	68d2      	ldr	r2, [r2, #12]
    4f1a:	4710      	bx	r2
    4f1c:	20000078 	.word	0x20000078

00004f20 <mpsl_fem_pa_configuration_clear>:
    4f20:	4801      	ldr	r0, [pc, #4]	; (4f28 <mpsl_fem_pa_configuration_clear+0x8>)
    4f22:	6800      	ldr	r0, [r0, #0]
    4f24:	6900      	ldr	r0, [r0, #16]
    4f26:	4700      	bx	r0
    4f28:	20000078 	.word	0x20000078

00004f2c <mpsl_fem_pa_configuration_set>:
    4f2c:	4a01      	ldr	r2, [pc, #4]	; (4f34 <mpsl_fem_pa_configuration_set+0x8>)
    4f2e:	6812      	ldr	r2, [r2, #0]
    4f30:	6892      	ldr	r2, [r2, #8]
    4f32:	4710      	bx	r2
    4f34:	20000078 	.word	0x20000078

00004f38 <mpsl_fem_pa_is_configured>:
    4f38:	4901      	ldr	r1, [pc, #4]	; (4f40 <mpsl_fem_pa_is_configured+0x8>)
    4f3a:	6809      	ldr	r1, [r1, #0]
    4f3c:	6a89      	ldr	r1, [r1, #40]	; 0x28
    4f3e:	4708      	bx	r1
    4f40:	20000078 	.word	0x20000078

00004f44 <mpsl_fem_device_config_254_apply_get>:
    4f44:	4801      	ldr	r0, [pc, #4]	; (4f4c <mpsl_fem_device_config_254_apply_get+0x8>)
    4f46:	7800      	ldrb	r0, [r0, #0]
    4f48:	4770      	bx	lr
    4f4a:	0000      	.short	0x0000
    4f4c:	200002b2 	.word	0x200002b2
    4f50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    4f52:	4c17      	ldr	r4, [pc, #92]	; (4fb0 <mpsl_fem_device_config_254_apply_get+0x6c>)
    4f54:	7a20      	ldrb	r0, [r4, #8]
    4f56:	2802      	cmp	r0, #2
    4f58:	d200      	bcs.n	4f5c <mpsl_fem_device_config_254_apply_get+0x18>
    4f5a:	2002      	movs	r0, #2
    4f5c:	f88d 0001 	strb.w	r0, [sp, #1]
    4f60:	79e0      	ldrb	r0, [r4, #7]
    4f62:	2803      	cmp	r0, #3
    4f64:	d200      	bcs.n	4f68 <mpsl_fem_device_config_254_apply_get+0x24>
    4f66:	2003      	movs	r0, #3
    4f68:	f88d 0000 	strb.w	r0, [sp]
    4f6c:	79a0      	ldrb	r0, [r4, #6]
    4f6e:	f8ad 0004 	strh.w	r0, [sp, #4]
    4f72:	7960      	ldrb	r0, [r4, #5]
    4f74:	f8ad 0002 	strh.w	r0, [sp, #2]
    4f78:	4668      	mov	r0, sp
    4f7a:	f006 f9bb 	bl	b2f4 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    4f7e:	b108      	cbz	r0, 4f84 <mpsl_fem_device_config_254_apply_get+0x40>
    4f80:	2183      	movs	r1, #131	; 0x83
    4f82:	e010      	b.n	4fa6 <mpsl_fem_device_config_254_apply_get+0x62>
    4f84:	68e0      	ldr	r0, [r4, #12]
    4f86:	9002      	str	r0, [sp, #8]
    4f88:	a802      	add	r0, sp, #8
    4f8a:	f006 f9c9 	bl	b320 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    4f8e:	b108      	cbz	r0, 4f94 <mpsl_fem_device_config_254_apply_get+0x50>
    4f90:	2187      	movs	r1, #135	; 0x87
    4f92:	e008      	b.n	4fa6 <mpsl_fem_device_config_254_apply_get+0x62>
    4f94:	4807      	ldr	r0, [pc, #28]	; (4fb4 <mpsl_fem_device_config_254_apply_get+0x70>)
    4f96:	6800      	ldr	r0, [r0, #0]
    4f98:	9003      	str	r0, [sp, #12]
    4f9a:	a803      	add	r0, sp, #12
    4f9c:	f00b fcd3 	bl	10946 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    4fa0:	2800      	cmp	r0, #0
    4fa2:	d003      	beq.n	4fac <mpsl_fem_device_config_254_apply_get+0x68>
    4fa4:	218b      	movs	r1, #139	; 0x8b
    4fa6:	2003      	movs	r0, #3
    4fa8:	f000 f8e2 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4fac:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    4fae:	0000      	.short	0x0000
    4fb0:	20000f5c 	.word	0x20000f5c
    4fb4:	00005258 	.word	0x00005258

00004fb8 <sdc_build_revision_get>:
    4fb8:	b510      	push	{r4, lr}
    4fba:	b128      	cbz	r0, 4fc8 <sdc_build_revision_get+0x10>
    4fbc:	2214      	movs	r2, #20
    4fbe:	4904      	ldr	r1, [pc, #16]	; (4fd0 <sdc_build_revision_get+0x18>)
    4fc0:	f008 fabe 	bl	d540 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4fc4:	2000      	movs	r0, #0
    4fc6:	bd10      	pop	{r4, pc}
    4fc8:	f06f 0015 	mvn.w	r0, #21
    4fcc:	bd10      	pop	{r4, pc}
    4fce:	0000      	.short	0x0000
    4fd0:	00005274 	.word	0x00005274

00004fd4 <sdc_cfg_set>:
    4fd4:	b570      	push	{r4, r5, r6, lr}
    4fd6:	0003      	movs	r3, r0
    4fd8:	f06f 002c 	mvn.w	r0, #44	; 0x2c
    4fdc:	d103      	bne.n	4fe6 <sdc_cfg_set+0x12>
    4fde:	4c29      	ldr	r4, [pc, #164]	; (5084 <sdc_cfg_set+0xb0>)
    4fe0:	7863      	ldrb	r3, [r4, #1]
    4fe2:	b10b      	cbz	r3, 4fe8 <sdc_cfg_set+0x14>
    4fe4:	1180      	asrs	r0, r0, #6
    4fe6:	bd70      	pop	{r4, r5, r6, pc}
    4fe8:	b309      	cbz	r1, 502e <sdc_cfg_set+0x5a>
    4fea:	f06f 0515 	mvn.w	r5, #21
    4fee:	b37a      	cbz	r2, 5050 <sdc_cfg_set+0x7c>
    4ff0:	4b25      	ldr	r3, [pc, #148]	; (5088 <sdc_cfg_set+0xb4>)
    4ff2:	290c      	cmp	r1, #12
    4ff4:	d241      	bcs.n	507a <sdc_cfg_set+0xa6>
    4ff6:	e8df f001 	tbb	[pc, r1]
    4ffa:	0640      	.short	0x0640
    4ffc:	13100c09 	.word	0x13100c09
    5000:	2616231b 	.word	0x2616231b
    5004:	312c      	.short	0x312c
    5006:	7810      	ldrb	r0, [r2, #0]
    5008:	7018      	strb	r0, [r3, #0]
    500a:	e02b      	b.n	5064 <sdc_cfg_set+0x90>
    500c:	7810      	ldrb	r0, [r2, #0]
    500e:	7058      	strb	r0, [r3, #1]
    5010:	e028      	b.n	5064 <sdc_cfg_set+0x90>
    5012:	6810      	ldr	r0, [r2, #0]
    5014:	f8c3 0005 	str.w	r0, [r3, #5]
    5018:	e024      	b.n	5064 <sdc_cfg_set+0x90>
    501a:	6810      	ldr	r0, [r2, #0]
    501c:	60d8      	str	r0, [r3, #12]
    501e:	e021      	b.n	5064 <sdc_cfg_set+0x90>
    5020:	7810      	ldrb	r0, [r2, #0]
    5022:	7098      	strb	r0, [r3, #2]
    5024:	e01e      	b.n	5064 <sdc_cfg_set+0x90>
    5026:	7811      	ldrb	r1, [r2, #0]
    5028:	2900      	cmp	r1, #0
    502a:	d1dc      	bne.n	4fe6 <sdc_cfg_set+0x12>
    502c:	70d9      	strb	r1, [r3, #3]
    502e:	e019      	b.n	5064 <sdc_cfg_set+0x90>
    5030:	78e0      	ldrb	r0, [r4, #3]
    5032:	b110      	cbz	r0, 503a <sdc_cfg_set+0x66>
    5034:	7810      	ldrb	r0, [r2, #0]
    5036:	2802      	cmp	r0, #2
    5038:	d31f      	bcc.n	507a <sdc_cfg_set+0xa6>
    503a:	7810      	ldrb	r0, [r2, #0]
    503c:	7418      	strb	r0, [r3, #16]
    503e:	e011      	b.n	5064 <sdc_cfg_set+0x90>
    5040:	8810      	ldrh	r0, [r2, #0]
    5042:	8258      	strh	r0, [r3, #18]
    5044:	e00e      	b.n	5064 <sdc_cfg_set+0x90>
    5046:	7811      	ldrb	r1, [r2, #0]
    5048:	2900      	cmp	r1, #0
    504a:	d1cc      	bne.n	4fe6 <sdc_cfg_set+0x12>
    504c:	7119      	strb	r1, [r3, #4]
    504e:	e009      	b.n	5064 <sdc_cfg_set+0x90>
    5050:	e013      	b.n	507a <sdc_cfg_set+0xa6>
    5052:	7810      	ldrb	r0, [r2, #0]
    5054:	2802      	cmp	r0, #2
    5056:	d310      	bcc.n	507a <sdc_cfg_set+0xa6>
    5058:	7518      	strb	r0, [r3, #20]
    505a:	e003      	b.n	5064 <sdc_cfg_set+0x90>
    505c:	7811      	ldrb	r1, [r2, #0]
    505e:	2900      	cmp	r1, #0
    5060:	d1c1      	bne.n	4fe6 <sdc_cfg_set+0x12>
    5062:	7559      	strb	r1, [r3, #21]
    5064:	2201      	movs	r2, #1
    5066:	4908      	ldr	r1, [pc, #32]	; (5088 <sdc_cfg_set+0xb4>)
    5068:	2000      	movs	r0, #0
    506a:	f008 fb88 	bl	d77e <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x28>
    506e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    5072:	db04      	blt.n	507e <sdc_cfg_set+0xaa>
    5074:	f06f 000b 	mvn.w	r0, #11
    5078:	bd70      	pop	{r4, r5, r6, pc}
    507a:	4628      	mov	r0, r5
    507c:	bd70      	pop	{r4, r5, r6, pc}
    507e:	2101      	movs	r1, #1
    5080:	70a1      	strb	r1, [r4, #2]
    5082:	bd70      	pop	{r4, r5, r6, pc}
    5084:	2000007c 	.word	0x2000007c
    5088:	20000f5c 	.word	0x20000f5c

0000508c <sdc_enable>:
    508c:	b570      	push	{r4, r5, r6, lr}
    508e:	460c      	mov	r4, r1
    5090:	0005      	movs	r5, r0
    5092:	d019      	beq.n	50c8 <sdc_enable+0x3c>
    5094:	b1c4      	cbz	r4, 50c8 <sdc_enable+0x3c>
    5096:	f000 f913 	bl	52c0 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
    509a:	b1c0      	cbz	r0, 50ce <sdc_enable+0x42>
    509c:	4628      	mov	r0, r5
    509e:	f7ff fe65 	bl	4d6c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    50a2:	4d0c      	ldr	r5, [pc, #48]	; (50d4 <sdc_enable+0x48>)
    50a4:	2200      	movs	r2, #0
    50a6:	490c      	ldr	r1, [pc, #48]	; (50d8 <sdc_enable+0x4c>)
    50a8:	7028      	strb	r0, [r5, #0]
    50aa:	4620      	mov	r0, r4
    50ac:	f008 fb67 	bl	d77e <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x28>
    50b0:	f00c f948 	bl	11344 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    50b4:	2100      	movs	r1, #0
    50b6:	7828      	ldrb	r0, [r5, #0]
    50b8:	f006 faee 	bl	b698 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    50bc:	f7ff ff48 	bl	4f50 <mpsl_fem_device_config_254_apply_get+0xc>
    50c0:	2001      	movs	r0, #1
    50c2:	7068      	strb	r0, [r5, #1]
    50c4:	2000      	movs	r0, #0
    50c6:	bd70      	pop	{r4, r5, r6, pc}
    50c8:	f06f 0015 	mvn.w	r0, #21
    50cc:	bd70      	pop	{r4, r5, r6, pc}
    50ce:	f04f 30ff 	mov.w	r0, #4294967295
    50d2:	bd70      	pop	{r4, r5, r6, pc}
    50d4:	2000007c 	.word	0x2000007c
    50d8:	20000f5c 	.word	0x20000f5c

000050dc <sdc_init>:
    50dc:	b530      	push	{r4, r5, lr}
    50de:	b087      	sub	sp, #28
    50e0:	0005      	movs	r5, r0
    50e2:	d00c      	beq.n	50fe <sdc_init+0x22>
    50e4:	f7ff fde8 	bl	4cb8 <mpsl_is_initialized>
    50e8:	f04f 34ff 	mov.w	r4, #4294967295
    50ec:	b120      	cbz	r0, 50f8 <sdc_init+0x1c>
    50ee:	f7ff fc93 	bl	4a18 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    50f2:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    50f6:	d905      	bls.n	5104 <sdc_init+0x28>
    50f8:	4620      	mov	r0, r4
    50fa:	b007      	add	sp, #28
    50fc:	bd30      	pop	{r4, r5, pc}
    50fe:	f06f 0015 	mvn.w	r0, #21
    5102:	e7fa      	b.n	50fa <sdc_init+0x1e>
    5104:	4c15      	ldr	r4, [pc, #84]	; (515c <sdc_init+0x80>)
    5106:	4816      	ldr	r0, [pc, #88]	; (5160 <sdc_init+0x84>)
    5108:	6065      	str	r5, [r4, #4]
    510a:	f000 f9e9 	bl	54e0 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    510e:	2000      	movs	r0, #0
    5110:	7060      	strb	r0, [r4, #1]
    5112:	70a0      	strb	r0, [r4, #2]
    5114:	70e0      	strb	r0, [r4, #3]
    5116:	4601      	mov	r1, r0
    5118:	2218      	movs	r2, #24
    511a:	4668      	mov	r0, sp
    511c:	f008 fa8a 	bl	d634 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5120:	2218      	movs	r2, #24
    5122:	4910      	ldr	r1, [pc, #64]	; (5164 <sdc_init+0x88>)
    5124:	4668      	mov	r0, sp
    5126:	f008 fa0b 	bl	d540 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    512a:	2218      	movs	r2, #24
    512c:	4669      	mov	r1, sp
    512e:	480e      	ldr	r0, [pc, #56]	; (5168 <sdc_init+0x8c>)
    5130:	f008 fa06 	bl	d540 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5134:	f3ef 8410 	mrs	r4, PRIMASK
    5138:	b672      	cpsid	i
    513a:	f06f 000c 	mvn.w	r0, #12
    513e:	f000 fd47 	bl	5bd0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    5142:	480a      	ldr	r0, [pc, #40]	; (516c <sdc_init+0x90>)
    5144:	f000 fe12 	bl	5d6c <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    5148:	b118      	cbz	r0, 5152 <sdc_init+0x76>
    514a:	2198      	movs	r1, #152	; 0x98
    514c:	2003      	movs	r0, #3
    514e:	f000 f80f 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5152:	b904      	cbnz	r4, 5156 <sdc_init+0x7a>
    5154:	b662      	cpsie	i
    5156:	2000      	movs	r0, #0
    5158:	e7cf      	b.n	50fa <sdc_init+0x1e>
    515a:	0000      	.short	0x0000
    515c:	2000007c 	.word	0x2000007c
    5160:	00004f51 	.word	0x00004f51
    5164:	0000525c 	.word	0x0000525c
    5168:	20000f5c 	.word	0x20000f5c
    516c:	000052ed 	.word	0x000052ed

00005170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    5170:	b50e      	push	{r1, r2, r3, lr}
    5172:	b672      	cpsid	i
    5174:	4a15      	ldr	r2, [pc, #84]	; (51cc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    5176:	6855      	ldr	r5, [r2, #4]
    5178:	b1d5      	cbz	r5, 51b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x40>
    517a:	2200      	movs	r2, #0
    517c:	4603      	mov	r3, r0
    517e:	466e      	mov	r6, sp
    5180:	240a      	movs	r4, #10
    5182:	e003      	b.n	518c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    5184:	fbb0 f0f4 	udiv	r0, r0, r4
    5188:	1c52      	adds	r2, r2, #1
    518a:	b2d2      	uxtb	r2, r2
    518c:	2800      	cmp	r0, #0
    518e:	d1f9      	bne.n	5184 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    5190:	54b0      	strb	r0, [r6, r2]
    5192:	e009      	b.n	51a8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x38>
    5194:	fbb3 f0f4 	udiv	r0, r3, r4
    5198:	fb04 3010 	mls	r0, r4, r0, r3
    519c:	fbb3 f3f4 	udiv	r3, r3, r4
    51a0:	1e52      	subs	r2, r2, #1
    51a2:	b2d2      	uxtb	r2, r2
    51a4:	3030      	adds	r0, #48	; 0x30
    51a6:	54b0      	strb	r0, [r6, r2]
    51a8:	2a00      	cmp	r2, #0
    51aa:	d1f3      	bne.n	5194 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    51ac:	4630      	mov	r0, r6
    51ae:	47a8      	blx	r5
    51b0:	f3bf 8f4f 	dsb	sy
    51b4:	4806      	ldr	r0, [pc, #24]	; (51d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    51b6:	6801      	ldr	r1, [r0, #0]
    51b8:	4a06      	ldr	r2, [pc, #24]	; (51d4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    51ba:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    51be:	4311      	orrs	r1, r2
    51c0:	6001      	str	r1, [r0, #0]
    51c2:	f3bf 8f4f 	dsb	sy
    51c6:	bf00      	nop
    51c8:	e7fd      	b.n	51c6 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x56>
    51ca:	0000      	.short	0x0000
    51cc:	2000007c 	.word	0x2000007c
    51d0:	e000ed0c 	.word	0xe000ed0c
    51d4:	05fa0004 	.word	0x05fa0004

000051d8 <sdc_support_adv>:
    51d8:	4806      	ldr	r0, [pc, #24]	; (51f4 <sdc_support_adv+0x1c>)
    51da:	b510      	push	{r4, lr}
    51dc:	7881      	ldrb	r1, [r0, #2]
    51de:	7840      	ldrb	r0, [r0, #1]
    51e0:	4301      	orrs	r1, r0
    51e2:	d002      	beq.n	51ea <sdc_support_adv+0x12>
    51e4:	f04f 30ff 	mov.w	r0, #4294967295
    51e8:	bd10      	pop	{r4, pc}
    51ea:	f006 fa71 	bl	b6d0 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>
    51ee:	2000      	movs	r0, #0
    51f0:	bd10      	pop	{r4, pc}
    51f2:	0000      	.short	0x0000
    51f4:	2000007c 	.word	0x2000007c

000051f8 <sdc_support_dle>:
    51f8:	4806      	ldr	r0, [pc, #24]	; (5214 <sdc_support_dle+0x1c>)
    51fa:	b510      	push	{r4, lr}
    51fc:	7881      	ldrb	r1, [r0, #2]
    51fe:	7840      	ldrb	r0, [r0, #1]
    5200:	4301      	orrs	r1, r0
    5202:	d002      	beq.n	520a <sdc_support_dle+0x12>
    5204:	f04f 30ff 	mov.w	r0, #4294967295
    5208:	bd10      	pop	{r4, pc}
    520a:	f006 f8a1 	bl	b350 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>
    520e:	2000      	movs	r0, #0
    5210:	bd10      	pop	{r4, pc}
    5212:	0000      	.short	0x0000
    5214:	2000007c 	.word	0x2000007c

00005218 <sdc_support_le_2m_phy>:
    5218:	4806      	ldr	r0, [pc, #24]	; (5234 <sdc_support_le_2m_phy+0x1c>)
    521a:	b510      	push	{r4, lr}
    521c:	7881      	ldrb	r1, [r0, #2]
    521e:	7840      	ldrb	r0, [r0, #1]
    5220:	4301      	orrs	r1, r0
    5222:	d002      	beq.n	522a <sdc_support_le_2m_phy+0x12>
    5224:	f04f 30ff 	mov.w	r0, #4294967295
    5228:	bd10      	pop	{r4, pc}
    522a:	f00b fd5f 	bl	10cec <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
    522e:	2000      	movs	r0, #0
    5230:	bd10      	pop	{r4, pc}
    5232:	0000      	.short	0x0000
    5234:	2000007c 	.word	0x2000007c

00005238 <sdc_support_peripheral>:
    5238:	4806      	ldr	r0, [pc, #24]	; (5254 <sdc_support_peripheral+0x1c>)
    523a:	b510      	push	{r4, lr}
    523c:	7881      	ldrb	r1, [r0, #2]
    523e:	7840      	ldrb	r0, [r0, #1]
    5240:	4301      	orrs	r1, r0
    5242:	d002      	beq.n	524a <sdc_support_peripheral+0x12>
    5244:	f04f 30ff 	mov.w	r0, #4294967295
    5248:	bd10      	pop	{r4, pc}
    524a:	f006 fa53 	bl	b6f4 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>
    524e:	2000      	movs	r0, #0
    5250:	bd10      	pop	{r4, pc}
    5252:	0000      	.short	0x0000
    5254:	2000007c 	.word	0x2000007c
    5258:	00000001 	.word	0x00000001
    525c:	00010101 	.word	0x00010101
    5260:	031b1b00 	.word	0x031b1b00
    5264:	00000002 	.word	0x00000002
    5268:	00001d4c 	.word	0x00001d4c
    526c:	001f0003 	.word	0x001f0003
    5270:	00000000 	.word	0x00000000
    5274:	182a7833 	.word	0x182a7833
    5278:	6161f520 	.word	0x6161f520
    527c:	60778ba6 	.word	0x60778ba6
    5280:	2a398362 	.word	0x2a398362
    5284:	e414f17c 	.word	0xe414f17c

00005288 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
    5288:	4a05      	ldr	r2, [pc, #20]	; (52a0 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
    528a:	b510      	push	{r4, lr}
    528c:	6852      	ldr	r2, [r2, #4]
    528e:	b112      	cbz	r2, 5296 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
    5290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5294:	4710      	bx	r2
    5296:	2192      	movs	r1, #146	; 0x92
    5298:	2004      	movs	r0, #4
    529a:	f7ff ff69 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    529e:	0000      	.short	0x0000
    52a0:	20000f74 	.word	0x20000f74

000052a4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
    52a4:	4a05      	ldr	r2, [pc, #20]	; (52bc <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
    52a6:	b510      	push	{r4, lr}
    52a8:	6892      	ldr	r2, [r2, #8]
    52aa:	b112      	cbz	r2, 52b2 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
    52ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    52b0:	4710      	bx	r2
    52b2:	2198      	movs	r1, #152	; 0x98
    52b4:	2004      	movs	r0, #4
    52b6:	f7ff ff5b 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    52ba:	0000      	.short	0x0000
    52bc:	20000f74 	.word	0x20000f74

000052c0 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
    52c0:	4805      	ldr	r0, [pc, #20]	; (52d8 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
    52c2:	6801      	ldr	r1, [r0, #0]
    52c4:	b129      	cbz	r1, 52d2 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    52c6:	6841      	ldr	r1, [r0, #4]
    52c8:	b119      	cbz	r1, 52d2 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    52ca:	6880      	ldr	r0, [r0, #8]
    52cc:	b108      	cbz	r0, 52d2 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    52ce:	2001      	movs	r0, #1
    52d0:	4770      	bx	lr
    52d2:	2000      	movs	r0, #0
    52d4:	4770      	bx	lr
    52d6:	0000      	.short	0x0000
    52d8:	20000f74 	.word	0x20000f74

000052dc <sdc_rand_source_register>:
    52dc:	4902      	ldr	r1, [pc, #8]	; (52e8 <sdc_rand_source_register+0xc>)
    52de:	c80d      	ldmia	r0, {r0, r2, r3}
    52e0:	e881 000d 	stmia.w	r1, {r0, r2, r3}
    52e4:	2000      	movs	r0, #0
    52e6:	4770      	bx	lr
    52e8:	20000f74 	.word	0x20000f74

000052ec <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    52ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    52ee:	4c12      	ldr	r4, [pc, #72]	; (5338 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    52f0:	2600      	movs	r6, #0
    52f2:	6825      	ldr	r5, [r4, #0]
    52f4:	e011      	b.n	531a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    52f6:	9800      	ldr	r0, [sp, #0]
    52f8:	2802      	cmp	r0, #2
    52fa:	d002      	beq.n	5302 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    52fc:	2803      	cmp	r0, #3
    52fe:	d10c      	bne.n	531a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    5300:	e006      	b.n	5310 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    5302:	6820      	ldr	r0, [r4, #0]
    5304:	b110      	cbz	r0, 530c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    5306:	2000      	movs	r0, #0
    5308:	6026      	str	r6, [r4, #0]
    530a:	e005      	b.n	5318 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    530c:	2128      	movs	r1, #40	; 0x28
    530e:	e00c      	b.n	532a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    5310:	6820      	ldr	r0, [r4, #0]
    5312:	b168      	cbz	r0, 5330 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    5314:	2001      	movs	r0, #1
    5316:	6026      	str	r6, [r4, #0]
    5318:	47a8      	blx	r5
    531a:	4668      	mov	r0, sp
    531c:	f000 fcf8 	bl	5d10 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    5320:	2800      	cmp	r0, #0
    5322:	d0e8      	beq.n	52f6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    5324:	2805      	cmp	r0, #5
    5326:	d005      	beq.n	5334 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    5328:	2135      	movs	r1, #53	; 0x35
    532a:	2004      	movs	r0, #4
    532c:	f7ff ff20 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5330:	212d      	movs	r1, #45	; 0x2d
    5332:	e7fa      	b.n	532a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    5334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5336:	0000      	.short	0x0000
    5338:	20000084 	.word	0x20000084
    533c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    533e:	4c1f      	ldr	r4, [pc, #124]	; (53bc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd0>)
    5340:	4605      	mov	r5, r0
    5342:	7820      	ldrb	r0, [r4, #0]
    5344:	b140      	cbz	r0, 5358 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x6c>
    5346:	78a2      	ldrb	r2, [r4, #2]
    5348:	1c61      	adds	r1, r4, #1
    534a:	4628      	mov	r0, r5
    534c:	1c92      	adds	r2, r2, #2
    534e:	f008 f8f7 	bl	d540 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5352:	2000      	movs	r0, #0
    5354:	7020      	strb	r0, [r4, #0]
    5356:	e021      	b.n	539c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb0>
    5358:	4819      	ldr	r0, [pc, #100]	; (53c0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    535a:	f001 ffe1 	bl	7320 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    535e:	2800      	cmp	r0, #0
    5360:	d01d      	beq.n	539e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    5362:	4c17      	ldr	r4, [pc, #92]	; (53c0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    5364:	7820      	ldrb	r0, [r4, #0]
    5366:	2811      	cmp	r0, #17
    5368:	d104      	bne.n	5374 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x88>
    536a:	210a      	movs	r1, #10
    536c:	203e      	movs	r0, #62	; 0x3e
    536e:	f008 faa9 	bl	d8c4 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    5372:	b118      	cbz	r0, 537c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x90>
    5374:	7820      	ldrb	r0, [r4, #0]
    5376:	2808      	cmp	r0, #8
    5378:	d005      	beq.n	5386 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x9a>
    537a:	e009      	b.n	5390 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa4>
    537c:	4910      	ldr	r1, [pc, #64]	; (53c0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    537e:	4628      	mov	r0, r5
    5380:	f008 fcaa 	bl	dcd8 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>
    5384:	e00a      	b.n	539c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb0>
    5386:	2105      	movs	r1, #5
    5388:	203e      	movs	r0, #62	; 0x3e
    538a:	f008 fa9b 	bl	d8c4 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    538e:	b138      	cbz	r0, 53a0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb4>
    5390:	490b      	ldr	r1, [pc, #44]	; (53c0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    5392:	4628      	mov	r0, r5
    5394:	f008 faf4 	bl	d980 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    5398:	2800      	cmp	r0, #0
    539a:	d000      	beq.n	539e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    539c:	2001      	movs	r0, #1
    539e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    53a0:	88a0      	ldrh	r0, [r4, #4]
    53a2:	f8ad 0000 	strh.w	r0, [sp]
    53a6:	a901      	add	r1, sp, #4
    53a8:	4668      	mov	r0, sp
    53aa:	f008 fdb3 	bl	df14 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
    53ae:	2800      	cmp	r0, #0
    53b0:	d0f5      	beq.n	539e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    53b2:	219c      	movs	r1, #156	; 0x9c
    53b4:	2008      	movs	r0, #8
    53b6:	f7ff fedb 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    53ba:	0000      	.short	0x0000
    53bc:	20001112 	.word	0x20001112
    53c0:	20001010 	.word	0x20001010
    53c4:	b570      	push	{r4, r5, r6, lr}
    53c6:	780a      	ldrb	r2, [r1, #0]
    53c8:	7082      	strb	r2, [r0, #2]
    53ca:	b33a      	cbz	r2, 541c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x130>
    53cc:	2a01      	cmp	r2, #1
    53ce:	d825      	bhi.n	541c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x130>
    53d0:	2313      	movs	r3, #19
    53d2:	7003      	strb	r3, [r0, #0]
    53d4:	2300      	movs	r3, #0
    53d6:	e00a      	b.n	53ee <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x102>
    53d8:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    53dc:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    53e0:	78a6      	ldrb	r6, [r4, #2]
    53e2:	70ee      	strb	r6, [r5, #3]
    53e4:	8864      	ldrh	r4, [r4, #2]
    53e6:	0a24      	lsrs	r4, r4, #8
    53e8:	1c5b      	adds	r3, r3, #1
    53ea:	712c      	strb	r4, [r5, #4]
    53ec:	b2db      	uxtb	r3, r3
    53ee:	4293      	cmp	r3, r2
    53f0:	d3f2      	bcc.n	53d8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xec>
    53f2:	2300      	movs	r3, #0
    53f4:	e00b      	b.n	540e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x122>
    53f6:	bf00      	nop
    53f8:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    53fc:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    5400:	792e      	ldrb	r6, [r5, #4]
    5402:	7166      	strb	r6, [r4, #5]
    5404:	88ad      	ldrh	r5, [r5, #4]
    5406:	0a2d      	lsrs	r5, r5, #8
    5408:	1c5b      	adds	r3, r3, #1
    540a:	71a5      	strb	r5, [r4, #6]
    540c:	b2db      	uxtb	r3, r3
    540e:	4293      	cmp	r3, r2
    5410:	d3f2      	bcc.n	53f8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x10c>
    5412:	2101      	movs	r1, #1
    5414:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    5418:	b2c0      	uxtb	r0, r0
    541a:	bd70      	pop	{r4, r5, r6, pc}
    541c:	2000      	movs	r0, #0
    541e:	bd70      	pop	{r4, r5, r6, pc}

00005420 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    5420:	2101      	movs	r1, #1
    5422:	4a0c      	ldr	r2, [pc, #48]	; (5454 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x34>)
    5424:	2840      	cmp	r0, #64	; 0x40
    5426:	d20c      	bcs.n	5442 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x22>
    5428:	2820      	cmp	r0, #32
    542a:	d803      	bhi.n	5434 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x14>
    542c:	1e40      	subs	r0, r0, #1
    542e:	4081      	lsls	r1, r0
    5430:	6810      	ldr	r0, [r2, #0]
    5432:	e002      	b.n	543a <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    5434:	3821      	subs	r0, #33	; 0x21
    5436:	4081      	lsls	r1, r0
    5438:	6850      	ldr	r0, [r2, #4]
    543a:	4201      	tst	r1, r0
    543c:	d107      	bne.n	544e <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    543e:	2000      	movs	r0, #0
    5440:	4770      	bx	lr
    5442:	28ff      	cmp	r0, #255	; 0xff
    5444:	d003      	beq.n	544e <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    5446:	3840      	subs	r0, #64	; 0x40
    5448:	4081      	lsls	r1, r0
    544a:	6890      	ldr	r0, [r2, #8]
    544c:	e7f5      	b.n	543a <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    544e:	2001      	movs	r0, #1
    5450:	4770      	bx	lr
    5452:	0000      	.short	0x0000
    5454:	20000088 	.word	0x20000088

00005458 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    5458:	2101      	movs	r1, #1
    545a:	1e40      	subs	r0, r0, #1
    545c:	4081      	lsls	r1, r0
    545e:	4804      	ldr	r0, [pc, #16]	; (5470 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x18>)
    5460:	68c0      	ldr	r0, [r0, #12]
    5462:	4201      	tst	r1, r0
    5464:	d001      	beq.n	546a <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x12>
    5466:	2001      	movs	r0, #1
    5468:	4770      	bx	lr
    546a:	2000      	movs	r0, #0
    546c:	4770      	bx	lr
    546e:	0000      	.short	0x0000
    5470:	20000088 	.word	0x20000088

00005474 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    5474:	4901      	ldr	r1, [pc, #4]	; (547c <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x8>)
    5476:	6800      	ldr	r0, [r0, #0]
    5478:	60c8      	str	r0, [r1, #12]
    547a:	4770      	bx	lr
    547c:	20000088 	.word	0x20000088

00005480 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    5480:	4904      	ldr	r1, [pc, #16]	; (5494 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x14>)
    5482:	6802      	ldr	r2, [r0, #0]
    5484:	6840      	ldr	r0, [r0, #4]
    5486:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
    548a:	600a      	str	r2, [r1, #0]
    548c:	4a02      	ldr	r2, [pc, #8]	; (5498 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
    548e:	4310      	orrs	r0, r2
    5490:	6048      	str	r0, [r1, #4]
    5492:	4770      	bx	lr
    5494:	20000088 	.word	0x20000088
    5498:	024007f8 	.word	0x024007f8

0000549c <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
    549c:	4901      	ldr	r1, [pc, #4]	; (54a4 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0x8>)
    549e:	6800      	ldr	r0, [r0, #0]
    54a0:	6088      	str	r0, [r1, #8]
    54a2:	4770      	bx	lr
    54a4:	20000088 	.word	0x20000088

000054a8 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    54a8:	4805      	ldr	r0, [pc, #20]	; (54c0 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x18>)
    54aa:	f04f 31ff 	mov.w	r1, #4294967295
    54ae:	6001      	str	r1, [r0, #0]
    54b0:	0cc9      	lsrs	r1, r1, #19
    54b2:	6041      	str	r1, [r0, #4]
    54b4:	2100      	movs	r1, #0
    54b6:	6081      	str	r1, [r0, #8]
    54b8:	211f      	movs	r1, #31
    54ba:	60c1      	str	r1, [r0, #12]
    54bc:	4770      	bx	lr
    54be:	0000      	.short	0x0000
    54c0:	20000088 	.word	0x20000088

000054c4 <sdc_hci_cmd_cb_reset>:
    54c4:	b510      	push	{r4, lr}
    54c6:	f7ff ffef 	bl	54a8 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    54ca:	f00b fb80 	bl	10bce <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    54ce:	4604      	mov	r4, r0
    54d0:	4802      	ldr	r0, [pc, #8]	; (54dc <sdc_hci_cmd_cb_reset+0x18>)
    54d2:	6800      	ldr	r0, [r0, #0]
    54d4:	b100      	cbz	r0, 54d8 <sdc_hci_cmd_cb_reset+0x14>
    54d6:	4780      	blx	r0
    54d8:	4620      	mov	r0, r4
    54da:	bd10      	pop	{r4, pc}
    54dc:	20000098 	.word	0x20000098

000054e0 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    54e0:	4901      	ldr	r1, [pc, #4]	; (54e8 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    54e2:	6008      	str	r0, [r1, #0]
    54e4:	4770      	bx	lr
    54e6:	0000      	.short	0x0000
    54e8:	20000098 	.word	0x20000098

000054ec <sdc_hci_cmd_vs_zephyr_read_version_info>:
    54ec:	2102      	movs	r1, #2
    54ee:	8001      	strh	r1, [r0, #0]
    54f0:	8041      	strh	r1, [r0, #2]
    54f2:	2100      	movs	r1, #0
    54f4:	7101      	strb	r1, [r0, #4]
    54f6:	2133      	movs	r1, #51	; 0x33
    54f8:	7141      	strb	r1, [r0, #5]
    54fa:	f642 2178 	movw	r1, #10872	; 0x2a78
    54fe:	80c1      	strh	r1, [r0, #6]
    5500:	4901      	ldr	r1, [pc, #4]	; (5508 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    5502:	6081      	str	r1, [r0, #8]
    5504:	2000      	movs	r0, #0
    5506:	4770      	bx	lr
    5508:	61f52018 	.word	0x61f52018

0000550c <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    550c:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    550e:	4604      	mov	r4, r0
    5510:	4669      	mov	r1, sp
    5512:	f009 f861 	bl	e5d8 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    5516:	b170      	cbz	r0, 5536 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    5518:	f240 215a 	movw	r1, #602	; 0x25a
    551c:	e008      	b.n	5530 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x24>
    551e:	bf00      	nop
    5520:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    5524:	4621      	mov	r1, r4
    5526:	f000 f8ab 	bl	5680 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    552a:	b120      	cbz	r0, 5536 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    552c:	f240 215f 	movw	r1, #607	; 0x25f
    5530:	2017      	movs	r0, #23
    5532:	f7ff fe1d 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5536:	4668      	mov	r0, sp
    5538:	f000 f852 	bl	55e0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    553c:	2800      	cmp	r0, #0
    553e:	d0ef      	beq.n	5520 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x14>
    5540:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

00005544 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
    5544:	b510      	push	{r4, lr}
    5546:	2802      	cmp	r0, #2
    5548:	d304      	bcc.n	5554 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x10>
    554a:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    554e:	2017      	movs	r0, #23
    5550:	f7ff fe0e 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5554:	4901      	ldr	r1, [pc, #4]	; (555c <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x18>)
    5556:	5c08      	ldrb	r0, [r1, r0]
    5558:	bd10      	pop	{r4, pc}
    555a:	0000      	.short	0x0000
    555c:	20000f80 	.word	0x20000f80

00005560 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    5560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5562:	0005      	movs	r5, r0
    5564:	9500      	str	r5, [sp, #0]
    5566:	d010      	beq.n	558a <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2a>
    5568:	2600      	movs	r6, #0
    556a:	7808      	ldrb	r0, [r1, #0]
    556c:	7849      	ldrb	r1, [r1, #1]
    556e:	4604      	mov	r4, r0
    5570:	42a1      	cmp	r1, r4
    5572:	d900      	bls.n	5576 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x16>
    5574:	460c      	mov	r4, r1
    5576:	1cea      	adds	r2, r5, #3
    5578:	f022 0203 	bic.w	r2, r2, #3
    557c:	42aa      	cmp	r2, r5
    557e:	d006      	beq.n	558e <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2e>
    5580:	f240 1179 	movw	r1, #377	; 0x179
    5584:	2017      	movs	r0, #23
    5586:	f7ff fdf3 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    558a:	2601      	movs	r6, #1
    558c:	e7ed      	b.n	556a <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xa>
    558e:	4f13      	ldr	r7, [pc, #76]	; (55dc <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x7c>)
    5590:	7038      	strb	r0, [r7, #0]
    5592:	7079      	strb	r1, [r7, #1]
    5594:	4631      	mov	r1, r6
    5596:	4668      	mov	r0, sp
    5598:	f000 f8ee 	bl	5778 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf8>
    559c:	2100      	movs	r1, #0
    559e:	460b      	mov	r3, r1
    55a0:	9800      	ldr	r0, [sp, #0]
    55a2:	1cc0      	adds	r0, r0, #3
    55a4:	f020 0003 	bic.w	r0, r0, #3
    55a8:	9000      	str	r0, [sp, #0]
    55aa:	b96e      	cbnz	r6, 55c8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x68>
    55ac:	eb07 0281 	add.w	r2, r7, r1, lsl #2
    55b0:	60d0      	str	r0, [r2, #12]
    55b2:	2000      	movs	r0, #0
    55b4:	e006      	b.n	55c4 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x64>
    55b6:	bf00      	nop
    55b8:	f8d2 c00c 	ldr.w	ip, [r2, #12]
    55bc:	f84c 3020 	str.w	r3, [ip, r0, lsl #2]
    55c0:	1c40      	adds	r0, r0, #1
    55c2:	b2c0      	uxtb	r0, r0
    55c4:	42a0      	cmp	r0, r4
    55c6:	d3f7      	bcc.n	55b8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x58>
    55c8:	9800      	ldr	r0, [sp, #0]
    55ca:	1c49      	adds	r1, r1, #1
    55cc:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    55d0:	b2c9      	uxtb	r1, r1
    55d2:	9000      	str	r0, [sp, #0]
    55d4:	2902      	cmp	r1, #2
    55d6:	d3e3      	bcc.n	55a0 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x40>
    55d8:	1b40      	subs	r0, r0, r5
    55da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    55dc:	20000f80 	.word	0x20000f80

000055e0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    55e0:	b570      	push	{r4, r5, r6, lr}
    55e2:	4604      	mov	r4, r0
    55e4:	f009 f9a4 	bl	e930 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    55e8:	b108      	cbz	r0, 55ee <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0xe>
    55ea:	2010      	movs	r0, #16
    55ec:	bd70      	pop	{r4, r5, r6, pc}
    55ee:	7825      	ldrb	r5, [r4, #0]
    55f0:	f000 f8fe 	bl	57f0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    55f4:	4602      	mov	r2, r0
    55f6:	480c      	ldr	r0, [pc, #48]	; (5628 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x48>)
    55f8:	8861      	ldrh	r1, [r4, #2]
    55fa:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    55fe:	e00e      	b.n	561e <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3e>
    5600:	68c3      	ldr	r3, [r0, #12]
    5602:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    5606:	b143      	cbz	r3, 561a <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    5608:	1c4a      	adds	r2, r1, #1
    560a:	8062      	strh	r2, [r4, #2]
    560c:	80a1      	strh	r1, [r4, #4]
    560e:	68c0      	ldr	r0, [r0, #12]
    5610:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    5614:	60a0      	str	r0, [r4, #8]
    5616:	2000      	movs	r0, #0
    5618:	bd70      	pop	{r4, r5, r6, pc}
    561a:	1c49      	adds	r1, r1, #1
    561c:	b289      	uxth	r1, r1
    561e:	4291      	cmp	r1, r2
    5620:	d3ee      	bcc.n	5600 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x20>
    5622:	8061      	strh	r1, [r4, #2]
    5624:	2005      	movs	r0, #5
    5626:	bd70      	pop	{r4, r5, r6, pc}
    5628:	20000f80 	.word	0x20000f80

0000562c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    562c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5630:	b121      	cbz	r1, 563c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
    5632:	2901      	cmp	r1, #1
    5634:	d002      	beq.n	563c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
    5636:	2000      	movs	r0, #0
    5638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    563c:	4c0f      	ldr	r4, [pc, #60]	; (567c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>)
    563e:	2700      	movs	r7, #0
    5640:	463b      	mov	r3, r7
    5642:	f64f 76ff 	movw	r6, #65535	; 0xffff
    5646:	eb04 0581 	add.w	r5, r4, r1, lsl #2
    564a:	f814 c001 	ldrb.w	ip, [r4, r1]
    564e:	e00a      	b.n	5666 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x3a>
    5650:	19dc      	adds	r4, r3, r7
    5652:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    5656:	b2a4      	uxth	r4, r4
    5658:	f85e e024 	ldr.w	lr, [lr, r4, lsl #2]
    565c:	f1be 0f00 	cmp.w	lr, #0
    5660:	d004      	beq.n	566c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x40>
    5662:	1c5b      	adds	r3, r3, #1
    5664:	b29b      	uxth	r3, r3
    5666:	459c      	cmp	ip, r3
    5668:	d8f2      	bhi.n	5650 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x24>
    566a:	4634      	mov	r4, r6
    566c:	8004      	strh	r4, [r0, #0]
    566e:	4620      	mov	r0, r4
    5670:	42b4      	cmp	r4, r6
    5672:	d0e0      	beq.n	5636 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xa>
    5674:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5678:	f000 b834 	b.w	56e4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>
    567c:	20000f80 	.word	0x20000f80

00005680 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    5680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5684:	4606      	mov	r6, r0
    5686:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    568a:	460c      	mov	r4, r1
    568c:	f243 0702 	movw	r7, #12290	; 0x3002
    5690:	38ff      	subs	r0, #255	; 0xff
    5692:	d020      	beq.n	56d6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    5694:	2c02      	cmp	r4, #2
    5696:	d302      	bcc.n	569e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1e>
    5698:	2007      	movs	r0, #7
    569a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    569e:	4630      	mov	r0, r6
    56a0:	f000 f85a 	bl	5758 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>
    56a4:	0005      	movs	r5, r0
    56a6:	d016      	beq.n	56d6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    56a8:	480c      	ldr	r0, [pc, #48]	; (56dc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x5c>)
    56aa:	4629      	mov	r1, r5
    56ac:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
    56b0:	4630      	mov	r0, r6
    56b2:	4790      	blx	r2
    56b4:	480a      	ldr	r0, [pc, #40]	; (56e0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x60>)
    56b6:	2100      	movs	r1, #0
    56b8:	eb00 0784 	add.w	r7, r0, r4, lsl #2
    56bc:	68f8      	ldr	r0, [r7, #12]
    56be:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
    56c2:	4620      	mov	r0, r4
    56c4:	f000 f88a 	bl	57dc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    56c8:	4602      	mov	r2, r0
    56ca:	4629      	mov	r1, r5
    56cc:	6878      	ldr	r0, [r7, #4]
    56ce:	f008 ff62 	bl	e596 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    56d2:	2000      	movs	r0, #0
    56d4:	e7e1      	b.n	569a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    56d6:	4638      	mov	r0, r7
    56d8:	e7df      	b.n	569a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    56da:	0000      	.short	0x0000
    56dc:	00005810 	.word	0x00005810
    56e0:	20000f80 	.word	0x20000f80
    56e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    56e8:	4690      	mov	r8, r2
    56ea:	460d      	mov	r5, r1
    56ec:	4607      	mov	r7, r0
    56ee:	f008 ff84 	bl	e5fa <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    56f2:	b148      	cbz	r0, 5708 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x88>
    56f4:	4816      	ldr	r0, [pc, #88]	; (5750 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd0>)
    56f6:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    56fa:	68f0      	ldr	r0, [r6, #12]
    56fc:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
    5700:	b128      	cbz	r0, 570e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x8e>
    5702:	f44f 719d 	mov.w	r1, #314	; 0x13a
    5706:	e015      	b.n	5734 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    5708:	f240 1139 	movw	r1, #313	; 0x139
    570c:	e012      	b.n	5734 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    570e:	6870      	ldr	r0, [r6, #4]
    5710:	2800      	cmp	r0, #0
    5712:	d01a      	beq.n	574a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xca>
    5714:	4628      	mov	r0, r5
    5716:	f000 f861 	bl	57dc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    571a:	4601      	mov	r1, r0
    571c:	6870      	ldr	r0, [r6, #4]
    571e:	f008 feec 	bl	e4fa <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    5722:	0004      	movs	r4, r0
    5724:	d010      	beq.n	5748 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc8>
    5726:	68f0      	ldr	r0, [r6, #12]
    5728:	2d02      	cmp	r5, #2
    572a:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
    572e:	d304      	bcc.n	573a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xba>
    5730:	f240 1145 	movw	r1, #325	; 0x145
    5734:	2017      	movs	r0, #23
    5736:	f7ff fd1b 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    573a:	4806      	ldr	r0, [pc, #24]	; (5754 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd4>)
    573c:	4642      	mov	r2, r8
    573e:	4621      	mov	r1, r4
    5740:	f850 3025 	ldr.w	r3, [r0, r5, lsl #2]
    5744:	4638      	mov	r0, r7
    5746:	4798      	blx	r3
    5748:	4620      	mov	r0, r4
    574a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    574e:	0000      	.short	0x0000
    5750:	20000f80 	.word	0x20000f80
    5754:	00005808 	.word	0x00005808
    5758:	b570      	push	{r4, r5, r6, lr}
    575a:	460c      	mov	r4, r1
    575c:	4605      	mov	r5, r0
    575e:	f008 ff4c 	bl	e5fa <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    5762:	2800      	cmp	r0, #0
    5764:	d005      	beq.n	5772 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf2>
    5766:	4803      	ldr	r0, [pc, #12]	; (5774 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf4>)
    5768:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    576c:	68c0      	ldr	r0, [r0, #12]
    576e:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    5772:	bd70      	pop	{r4, r5, r6, pc}
    5774:	20000f80 	.word	0x20000f80
    5778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    577c:	4e16      	ldr	r6, [pc, #88]	; (57d8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x158>)
    577e:	4688      	mov	r8, r1
    5780:	4605      	mov	r5, r0
    5782:	2400      	movs	r4, #0
    5784:	6828      	ldr	r0, [r5, #0]
    5786:	1cc0      	adds	r0, r0, #3
    5788:	f020 0003 	bic.w	r0, r0, #3
    578c:	6028      	str	r0, [r5, #0]
    578e:	4620      	mov	r0, r4
    5790:	f000 f824 	bl	57dc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    5794:	5d31      	ldrb	r1, [r6, r4]
    5796:	4348      	muls	r0, r1
    5798:	f1b8 0f00 	cmp.w	r8, #0
    579c:	d001      	beq.n	57a2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x122>
    579e:	2200      	movs	r2, #0
    57a0:	e000      	b.n	57a4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x124>
    57a2:	682a      	ldr	r2, [r5, #0]
    57a4:	4601      	mov	r1, r0
    57a6:	9200      	str	r2, [sp, #0]
    57a8:	b132      	cbz	r2, 57b8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    57aa:	2700      	movs	r7, #0
    57ac:	ea4f 000d 	mov.w	r0, sp
    57b0:	f008 fed0 	bl	e554 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    57b4:	b11f      	cbz	r7, 57be <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x13e>
    57b6:	e006      	b.n	57c6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x146>
    57b8:	2701      	movs	r7, #1
    57ba:	2000      	movs	r0, #0
    57bc:	e7f8      	b.n	57b0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x130>
    57be:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    57c2:	9a00      	ldr	r2, [sp, #0]
    57c4:	604a      	str	r2, [r1, #4]
    57c6:	6829      	ldr	r1, [r5, #0]
    57c8:	1c64      	adds	r4, r4, #1
    57ca:	4408      	add	r0, r1
    57cc:	b2e4      	uxtb	r4, r4
    57ce:	6028      	str	r0, [r5, #0]
    57d0:	2c02      	cmp	r4, #2
    57d2:	d3d7      	bcc.n	5784 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x104>
    57d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    57d8:	20000f80 	.word	0x20000f80
    57dc:	4903      	ldr	r1, [pc, #12]	; (57ec <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x16c>)
    57de:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    57e2:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    57e6:	1cc0      	adds	r0, r0, #3
    57e8:	4008      	ands	r0, r1
    57ea:	4770      	bx	lr
    57ec:	00005804 	.word	0x00005804
    57f0:	4903      	ldr	r1, [pc, #12]	; (5800 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x180>)
    57f2:	7808      	ldrb	r0, [r1, #0]
    57f4:	7849      	ldrb	r1, [r1, #1]
    57f6:	4288      	cmp	r0, r1
    57f8:	d200      	bcs.n	57fc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x17c>
    57fa:	4608      	mov	r0, r1
    57fc:	4770      	bx	lr
    57fe:	0000      	.short	0x0000
    5800:	20000f80 	.word	0x20000f80
    5804:	00d40228 	.word	0x00d40228
    5808:	0000e60f 	.word	0x0000e60f
    580c:	0000e60f 	.word	0x0000e60f
    5810:	00010181 	.word	0x00010181
    5814:	0000f64f 	.word	0x0000f64f

00005818 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    5818:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    581c:	4c26      	ldr	r4, [pc, #152]	; (58b8 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0xa0>)
    581e:	4680      	mov	r8, r0
    5820:	b081      	sub	sp, #4
    5822:	6820      	ldr	r0, [r4, #0]
    5824:	469a      	mov	sl, r3
    5826:	4693      	mov	fp, r2
    5828:	b158      	cbz	r0, 5842 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    582a:	7a02      	ldrb	r2, [r0, #8]
    582c:	4542      	cmp	r2, r8
    582e:	d903      	bls.n	5838 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    5830:	6841      	ldr	r1, [r0, #4]
    5832:	f851 0028 	ldr.w	r0, [r1, r8, lsl #2]
    5836:	b140      	cbz	r0, 584a <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    5838:	f243 0002 	movw	r0, #12290	; 0x3002
    583c:	b005      	add	sp, #20
    583e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5842:	21a5      	movs	r1, #165	; 0xa5
    5844:	2018      	movs	r0, #24
    5846:	f7ff fc93 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    584a:	4619      	mov	r1, r3
    584c:	9802      	ldr	r0, [sp, #8]
    584e:	f008 fef6 	bl	e63e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    5852:	b286      	uxth	r6, r0
    5854:	4658      	mov	r0, fp
    5856:	990e      	ldr	r1, [sp, #56]	; 0x38
    5858:	f008 fee8 	bl	e62c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    585c:	b285      	uxth	r5, r0
    585e:	1970      	adds	r0, r6, r5
    5860:	1d00      	adds	r0, r0, #4
    5862:	b287      	uxth	r7, r0
    5864:	6820      	ldr	r0, [r4, #0]
    5866:	46a1      	mov	r9, r4
    5868:	4639      	mov	r1, r7
    586a:	6800      	ldr	r0, [r0, #0]
    586c:	f008 fe45 	bl	e4fa <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    5870:	0004      	movs	r4, r0
    5872:	d01f      	beq.n	58b4 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x9c>
    5874:	8067      	strh	r7, [r4, #2]
    5876:	8025      	strh	r5, [r4, #0]
    5878:	4629      	mov	r1, r5
    587a:	1d20      	adds	r0, r4, #4
    587c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    587e:	4607      	mov	r7, r0
    5880:	465a      	mov	r2, fp
    5882:	2301      	movs	r3, #1
    5884:	9500      	str	r5, [sp, #0]
    5886:	f008 fd98 	bl	e3ba <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    588a:	8820      	ldrh	r0, [r4, #0]
    588c:	4631      	mov	r1, r6
    588e:	4438      	add	r0, r7
    5890:	2301      	movs	r3, #1
    5892:	9a02      	ldr	r2, [sp, #8]
    5894:	f8cd a000 	str.w	sl, [sp]
    5898:	f008 fd8f 	bl	e3ba <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    589c:	8820      	ldrh	r0, [r4, #0]
    589e:	19c1      	adds	r1, r0, r7
    58a0:	4638      	mov	r0, r7
    58a2:	f008 fdbb 	bl	e41c <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>
    58a6:	f8d9 0000 	ldr.w	r0, [r9]
    58aa:	6841      	ldr	r1, [r0, #4]
    58ac:	2000      	movs	r0, #0
    58ae:	f841 4028 	str.w	r4, [r1, r8, lsl #2]
    58b2:	e7c3      	b.n	583c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    58b4:	2004      	movs	r0, #4
    58b6:	e7c1      	b.n	583c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    58b8:	2000009c 	.word	0x2000009c

000058bc <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    58bc:	b570      	push	{r4, r5, r6, lr}
    58be:	4c14      	ldr	r4, [pc, #80]	; (5910 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    58c0:	6823      	ldr	r3, [r4, #0]
    58c2:	b18b      	cbz	r3, 58e8 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    58c4:	7a19      	ldrb	r1, [r3, #8]
    58c6:	4281      	cmp	r1, r0
    58c8:	d912      	bls.n	58f0 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    58ca:	685a      	ldr	r2, [r3, #4]
    58cc:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    58d0:	b171      	cbz	r1, 58f0 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    58d2:	2500      	movs	r5, #0
    58d4:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    58d8:	884a      	ldrh	r2, [r1, #2]
    58da:	6818      	ldr	r0, [r3, #0]
    58dc:	f008 fe5b 	bl	e596 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    58e0:	6821      	ldr	r1, [r4, #0]
    58e2:	2000      	movs	r0, #0
    58e4:	7a0a      	ldrb	r2, [r1, #8]
    58e6:	e00c      	b.n	5902 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    58e8:	21c8      	movs	r1, #200	; 0xc8
    58ea:	2018      	movs	r0, #24
    58ec:	f7ff fc40 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    58f0:	f243 0002 	movw	r0, #12290	; 0x3002
    58f4:	bd70      	pop	{r4, r5, r6, pc}
    58f6:	684b      	ldr	r3, [r1, #4]
    58f8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    58fc:	b933      	cbnz	r3, 590c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    58fe:	1c40      	adds	r0, r0, #1
    5900:	b2c0      	uxtb	r0, r0
    5902:	4282      	cmp	r2, r0
    5904:	d8f7      	bhi.n	58f6 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    5906:	6808      	ldr	r0, [r1, #0]
    5908:	f008 fe3a 	bl	e580 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    590c:	2000      	movs	r0, #0
    590e:	bd70      	pop	{r4, r5, r6, pc}
    5910:	2000009c 	.word	0x2000009c

00005914 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    5914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5918:	460d      	mov	r5, r1
    591a:	0004      	movs	r4, r0
    591c:	4690      	mov	r8, r2
    591e:	f04f 0600 	mov.w	r6, #0
    5922:	d009      	beq.n	5938 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x24>
    5924:	2700      	movs	r7, #0
    5926:	1ce0      	adds	r0, r4, #3
    5928:	f020 0003 	bic.w	r0, r0, #3
    592c:	42a0      	cmp	r0, r4
    592e:	d005      	beq.n	593c <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x28>
    5930:	2186      	movs	r1, #134	; 0x86
    5932:	2018      	movs	r0, #24
    5934:	f7ff fc1c 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5938:	2701      	movs	r7, #1
    593a:	e7f4      	b.n	5926 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    593c:	b1cd      	cbz	r5, 5972 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    593e:	4611      	mov	r1, r2
    5940:	2000      	movs	r0, #0
    5942:	f008 fe07 	bl	e554 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    5946:	300c      	adds	r0, #12
    5948:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    594c:	b98f      	cbnz	r7, 5972 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    594e:	4f0a      	ldr	r7, [pc, #40]	; (5978 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x64>)
    5950:	f104 000c 	add.w	r0, r4, #12
    5954:	00aa      	lsls	r2, r5, #2
    5956:	603c      	str	r4, [r7, #0]
    5958:	7225      	strb	r5, [r4, #8]
    595a:	6060      	str	r0, [r4, #4]
    595c:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    5960:	6020      	str	r0, [r4, #0]
    5962:	2100      	movs	r1, #0
    5964:	6860      	ldr	r0, [r4, #4]
    5966:	f007 fe65 	bl	d634 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    596a:	4641      	mov	r1, r8
    596c:	6838      	ldr	r0, [r7, #0]
    596e:	f008 fdf1 	bl	e554 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    5972:	4630      	mov	r0, r6
    5974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5978:	2000009c 	.word	0x2000009c

0000597c <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    597c:	b570      	push	{r4, r5, r6, lr}
    597e:	4d08      	ldr	r5, [pc, #32]	; (59a0 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    5980:	6828      	ldr	r0, [r5, #0]
    5982:	2800      	cmp	r0, #0
    5984:	d00a      	beq.n	599c <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    5986:	2400      	movs	r4, #0
    5988:	e004      	b.n	5994 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    598a:	4620      	mov	r0, r4
    598c:	f7ff ff96 	bl	58bc <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    5990:	1c64      	adds	r4, r4, #1
    5992:	b2e4      	uxtb	r4, r4
    5994:	6828      	ldr	r0, [r5, #0]
    5996:	7a00      	ldrb	r0, [r0, #8]
    5998:	42a0      	cmp	r0, r4
    599a:	d8f6      	bhi.n	598a <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    599c:	bd70      	pop	{r4, r5, r6, pc}
    599e:	0000      	.short	0x0000
    59a0:	2000009c 	.word	0x2000009c

000059a4 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    59a4:	4909      	ldr	r1, [pc, #36]	; (59cc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    59a6:	b510      	push	{r4, lr}
    59a8:	4602      	mov	r2, r0
    59aa:	6809      	ldr	r1, [r1, #0]
    59ac:	2000      	movs	r0, #0
    59ae:	b149      	cbz	r1, 59c4 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    59b0:	7a0b      	ldrb	r3, [r1, #8]
    59b2:	4293      	cmp	r3, r2
    59b4:	d905      	bls.n	59c2 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    59b6:	6849      	ldr	r1, [r1, #4]
    59b8:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    59bc:	2900      	cmp	r1, #0
    59be:	d000      	beq.n	59c2 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    59c0:	1d08      	adds	r0, r1, #4
    59c2:	bd10      	pop	{r4, pc}
    59c4:	21ee      	movs	r1, #238	; 0xee
    59c6:	2018      	movs	r0, #24
    59c8:	f7ff fbd2 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    59cc:	2000009c 	.word	0x2000009c

000059d0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    59d0:	490a      	ldr	r1, [pc, #40]	; (59fc <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    59d2:	b510      	push	{r4, lr}
    59d4:	4602      	mov	r2, r0
    59d6:	6809      	ldr	r1, [r1, #0]
    59d8:	2000      	movs	r0, #0
    59da:	b159      	cbz	r1, 59f4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    59dc:	7a0b      	ldrb	r3, [r1, #8]
    59de:	4293      	cmp	r3, r2
    59e0:	d907      	bls.n	59f2 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    59e2:	6849      	ldr	r1, [r1, #4]
    59e4:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    59e8:	2900      	cmp	r1, #0
    59ea:	d002      	beq.n	59f2 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    59ec:	f831 0b04 	ldrh.w	r0, [r1], #4
    59f0:	4408      	add	r0, r1
    59f2:	bd10      	pop	{r4, pc}
    59f4:	21fc      	movs	r1, #252	; 0xfc
    59f6:	2018      	movs	r0, #24
    59f8:	f7ff fbba 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    59fc:	2000009c 	.word	0x2000009c
    5a00:	b570      	push	{r4, r5, r6, lr}
    5a02:	4b1e      	ldr	r3, [pc, #120]	; (5a7c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xac>)
    5a04:	6845      	ldr	r5, [r0, #4]
    5a06:	4604      	mov	r4, r0
    5a08:	2200      	movs	r2, #0
    5a0a:	b1a1      	cbz	r1, 5a36 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x66>
    5a0c:	2001      	movs	r0, #1
    5a0e:	7060      	strb	r0, [r4, #1]
    5a10:	8858      	ldrh	r0, [r3, #2]
    5a12:	0881      	lsrs	r1, r0, #2
    5a14:	f05f 0000 	movs.w	r0, #0
    5a18:	eb04 0340 	add.w	r3, r4, r0, lsl #1
    5a1c:	eb04 0680 	add.w	r6, r4, r0, lsl #2
    5a20:	831a      	strh	r2, [r3, #24]
    5a22:	8419      	strh	r1, [r3, #32]
    5a24:	fb00 5301 	mla	r3, r0, r1, r5
    5a28:	6073      	str	r3, [r6, #4]
    5a2a:	1823      	adds	r3, r4, r0
    5a2c:	1c40      	adds	r0, r0, #1
    5a2e:	751a      	strb	r2, [r3, #20]
    5a30:	2804      	cmp	r0, #4
    5a32:	d3f1      	bcc.n	5a18 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x48>
    5a34:	bd70      	pop	{r4, r5, r6, pc}
    5a36:	7062      	strb	r2, [r4, #1]
    5a38:	f05f 0000 	movs.w	r0, #0
    5a3c:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    5a40:	830a      	strh	r2, [r1, #24]
    5a42:	840a      	strh	r2, [r1, #32]
    5a44:	eb04 0180 	add.w	r1, r4, r0, lsl #2
    5a48:	604a      	str	r2, [r1, #4]
    5a4a:	1821      	adds	r1, r4, r0
    5a4c:	1c40      	adds	r0, r0, #1
    5a4e:	750a      	strb	r2, [r1, #20]
    5a50:	2804      	cmp	r0, #4
    5a52:	d3f3      	bcc.n	5a3c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x6c>
    5a54:	8858      	ldrh	r0, [r3, #2]
    5a56:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    5a5a:	d201      	bcs.n	5a60 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x90>
    5a5c:	0846      	lsrs	r6, r0, #1
    5a5e:	e000      	b.n	5a62 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x92>
    5a60:	26ff      	movs	r6, #255	; 0xff
    5a62:	f008 fe5f 	bl	e724 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x114>
    5a66:	6065      	str	r5, [r4, #4]
    5a68:	8420      	strh	r0, [r4, #32]
    5a6a:	1829      	adds	r1, r5, r0
    5a6c:	60a1      	str	r1, [r4, #8]
    5a6e:	8466      	strh	r6, [r4, #34]	; 0x22
    5a70:	60e5      	str	r5, [r4, #12]
    5a72:	84a0      	strh	r0, [r4, #36]	; 0x24
    5a74:	6121      	str	r1, [r4, #16]
    5a76:	84e6      	strh	r6, [r4, #38]	; 0x26
    5a78:	bd70      	pop	{r4, r5, r6, pc}
    5a7a:	0000      	.short	0x0000
    5a7c:	200000a0 	.word	0x200000a0

00005a80 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>:
    5a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5a84:	b170      	cbz	r0, 5aa4 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x24>
    5a86:	2500      	movs	r5, #0
    5a88:	4411      	add	r1, r2
    5a8a:	b2cc      	uxtb	r4, r1
    5a8c:	4e24      	ldr	r6, [pc, #144]	; (5b20 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0xa0>)
    5a8e:	1cc1      	adds	r1, r0, #3
    5a90:	2700      	movs	r7, #0
    5a92:	f021 0103 	bic.w	r1, r1, #3
    5a96:	7034      	strb	r4, [r6, #0]
    5a98:	4281      	cmp	r1, r0
    5a9a:	d005      	beq.n	5aa8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x28>
    5a9c:	214e      	movs	r1, #78	; 0x4e
    5a9e:	2009      	movs	r0, #9
    5aa0:	f7ff fb66 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5aa4:	2501      	movs	r5, #1
    5aa6:	e7ef      	b.n	5a88 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8>
    5aa8:	2b1f      	cmp	r3, #31
    5aaa:	d804      	bhi.n	5ab6 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x36>
    5aac:	f64f 71ff 	movw	r1, #65535	; 0xffff
    5ab0:	ea01 0183 	and.w	r1, r1, r3, lsl #2
    5ab4:	e009      	b.n	5aca <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x4a>
    5ab6:	0059      	lsls	r1, r3, #1
    5ab8:	2bff      	cmp	r3, #255	; 0xff
    5aba:	d90b      	bls.n	5ad4 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x54>
    5abc:	f103 02ff 	add.w	r2, r3, #255	; 0xff
    5ac0:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    5ac4:	d200      	bcs.n	5ac8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
    5ac6:	4611      	mov	r1, r2
    5ac8:	b289      	uxth	r1, r1
    5aca:	1cc9      	adds	r1, r1, #3
    5acc:	f021 0303 	bic.w	r3, r1, #3
    5ad0:	b135      	cbz	r5, 5ae0 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x60>
    5ad2:	e007      	b.n	5ae4 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x64>
    5ad4:	227c      	movs	r2, #124	; 0x7c
    5ad6:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    5ada:	d3f5      	bcc.n	5ac8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
    5adc:	217c      	movs	r1, #124	; 0x7c
    5ade:	e7f3      	b.n	5ac8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
    5ae0:	6070      	str	r0, [r6, #4]
    5ae2:	8073      	strh	r3, [r6, #2]
    5ae4:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    5ae8:	eb07 02c1 	add.w	r2, r7, r1, lsl #3
    5aec:	2100      	movs	r1, #0
    5aee:	6876      	ldr	r6, [r6, #4]
    5af0:	f04f 0c01 	mov.w	ip, #1
    5af4:	e00d      	b.n	5b12 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x92>
    5af6:	b94d      	cbnz	r5, 5b0c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8c>
    5af8:	eb01 0781 	add.w	r7, r1, r1, lsl #2
    5afc:	eb00 0e02 	add.w	lr, r0, r2
    5b00:	f806 c037 	strb.w	ip, [r6, r7, lsl #3]
    5b04:	eb06 07c7 	add.w	r7, r6, r7, lsl #3
    5b08:	f8c7 e004 	str.w	lr, [r7, #4]
    5b0c:	1c49      	adds	r1, r1, #1
    5b0e:	441a      	add	r2, r3
    5b10:	b2c9      	uxtb	r1, r1
    5b12:	42a1      	cmp	r1, r4
    5b14:	d3ef      	bcc.n	5af6 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x76>
    5b16:	1dd2      	adds	r2, r2, #7
    5b18:	f022 0007 	bic.w	r0, r2, #7
    5b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5b20:	200000a0 	.word	0x200000a0

00005b24 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>:
    5b24:	b570      	push	{r4, r5, r6, lr}
    5b26:	4a10      	ldr	r2, [pc, #64]	; (5b68 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x44>)
    5b28:	2000      	movs	r0, #0
    5b2a:	6851      	ldr	r1, [r2, #4]
    5b2c:	7812      	ldrb	r2, [r2, #0]
    5b2e:	e014      	b.n	5b5a <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x36>
    5b30:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    5b34:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
    5b38:	b16b      	cbz	r3, 5b56 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x32>
    5b3a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    5b3e:	eb11 04c0 	adds.w	r4, r1, r0, lsl #3
    5b42:	d00c      	beq.n	5b5e <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x3a>
    5b44:	2500      	movs	r5, #0
    5b46:	70a5      	strb	r5, [r4, #2]
    5b48:	2101      	movs	r1, #1
    5b4a:	4620      	mov	r0, r4
    5b4c:	f7ff ff58 	bl	5a00 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    5b50:	7025      	strb	r5, [r4, #0]
    5b52:	4620      	mov	r0, r4
    5b54:	bd70      	pop	{r4, r5, r6, pc}
    5b56:	1c40      	adds	r0, r0, #1
    5b58:	b2c0      	uxtb	r0, r0
    5b5a:	4290      	cmp	r0, r2
    5b5c:	d3e8      	bcc.n	5b30 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xc>
    5b5e:	21a9      	movs	r1, #169	; 0xa9
    5b60:	2009      	movs	r0, #9
    5b62:	f7ff fb05 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5b66:	0000      	.short	0x0000
    5b68:	200000a0 	.word	0x200000a0

00005b6c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>:
    5b6c:	4804      	ldr	r0, [pc, #16]	; (5b80 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x14>)
    5b6e:	b510      	push	{r4, lr}
    5b70:	8840      	ldrh	r0, [r0, #2]
    5b72:	0884      	lsrs	r4, r0, #2
    5b74:	f008 fdd6 	bl	e724 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x114>
    5b78:	4284      	cmp	r4, r0
    5b7a:	d300      	bcc.n	5b7e <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x12>
    5b7c:	4620      	mov	r0, r4
    5b7e:	bd10      	pop	{r4, pc}
    5b80:	200000a0 	.word	0x200000a0
    5b84:	b530      	push	{r4, r5, lr}
    5b86:	490d      	ldr	r1, [pc, #52]	; (5bbc <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x50>)
    5b88:	2001      	movs	r0, #1
    5b8a:	6048      	str	r0, [r1, #4]
    5b8c:	1e82      	subs	r2, r0, #2
    5b8e:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    5b92:	490b      	ldr	r1, [pc, #44]	; (5bc0 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x54>)
    5b94:	6088      	str	r0, [r1, #8]
    5b96:	2300      	movs	r3, #0
    5b98:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    5b9c:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    5ba0:	4c08      	ldr	r4, [pc, #32]	; (5bc4 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x58>)
    5ba2:	6023      	str	r3, [r4, #0]
    5ba4:	1d25      	adds	r5, r4, #4
    5ba6:	6028      	str	r0, [r5, #0]
    5ba8:	6088      	str	r0, [r1, #8]
    5baa:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    5bae:	6023      	str	r3, [r4, #0]
    5bb0:	6028      	str	r0, [r5, #0]
    5bb2:	4906      	ldr	r1, [pc, #24]	; (5bcc <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x60>)
    5bb4:	4804      	ldr	r0, [pc, #16]	; (5bc8 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x5c>)
    5bb6:	6008      	str	r0, [r1, #0]
    5bb8:	bd30      	pop	{r4, r5, pc}
    5bba:	0000      	.short	0x0000
    5bbc:	4000e000 	.word	0x4000e000
    5bc0:	4000f000 	.word	0x4000f000
    5bc4:	4000f500 	.word	0x4000f500
    5bc8:	3ff60000 	.word	0x3ff60000
    5bcc:	4001f508 	.word	0x4001f508

00005bd0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    5bd0:	b510      	push	{r4, lr}
    5bd2:	4604      	mov	r4, r0
    5bd4:	f7ff ffd6 	bl	5b84 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    5bd8:	f008 fe77 	bl	e8ca <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x42>
    5bdc:	f000 f888 	bl	5cf0 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    5be0:	4905      	ldr	r1, [pc, #20]	; (5bf8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x28>)
    5be2:	4804      	ldr	r0, [pc, #16]	; (5bf4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x24>)
    5be4:	6008      	str	r0, [r1, #0]
    5be6:	4620      	mov	r0, r4
    5be8:	f000 f8b8 	bl	5d5c <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    5bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5bf0:	f000 b8d0 	b.w	5d94 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    5bf4:	3ff60000 	.word	0x3ff60000
    5bf8:	4001f508 	.word	0x4001f508
    5bfc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5c00:	4682      	mov	sl, r0
    5c02:	4838      	ldr	r0, [pc, #224]	; (5ce4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>)
    5c04:	f007 fbf3 	bl	d3ee <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    5c08:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 5ce4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>
    5c0c:	b128      	cbz	r0, 5c1a <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x4a>
    5c0e:	2601      	movs	r6, #1
    5c10:	f10b 0001 	add.w	r0, fp, #1
    5c14:	21ff      	movs	r1, #255	; 0xff
    5c16:	7001      	strb	r1, [r0, #0]
    5c18:	e000      	b.n	5c1c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x4c>
    5c1a:	2600      	movs	r6, #0
    5c1c:	f44f 7580 	mov.w	r5, #256	; 0x100
    5c20:	4c31      	ldr	r4, [pc, #196]	; (5ce8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x118>)
    5c22:	f04f 0800 	mov.w	r8, #0
    5c26:	1d2f      	adds	r7, r5, #4
    5c28:	2101      	movs	r1, #1
    5c2a:	6061      	str	r1, [r4, #4]
    5c2c:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    5c30:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    5c34:	f8c4 a504 	str.w	sl, [r4, #1284]	; 0x504
    5c38:	6021      	str	r1, [r4, #0]
    5c3a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 5cec <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x11c>
    5c3e:	e01c      	b.n	5c7a <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
    5c40:	f8d9 0000 	ldr.w	r0, [r9]
    5c44:	06c0      	lsls	r0, r0, #27
    5c46:	d518      	bpl.n	5c7a <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
    5c48:	200e      	movs	r0, #14
    5c4a:	f008 fe4d 	bl	e8e8 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    5c4e:	f3ef 8010 	mrs	r0, PRIMASK
    5c52:	9000      	str	r0, [sp, #0]
    5c54:	b672      	cpsid	i
    5c56:	2103      	movs	r1, #3
    5c58:	4620      	mov	r0, r4
    5c5a:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
    5c5e:	4629      	mov	r1, r5
    5c60:	f008 fe4f 	bl	e902 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    5c64:	b930      	cbnz	r0, 5c74 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa4>
    5c66:	4639      	mov	r1, r7
    5c68:	4620      	mov	r0, r4
    5c6a:	f008 fe4a 	bl	e902 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    5c6e:	b908      	cbnz	r0, 5c74 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa4>
    5c70:	f7ff f8f0 	bl	4e54 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    5c74:	9800      	ldr	r0, [sp, #0]
    5c76:	b900      	cbnz	r0, 5c7a <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
    5c78:	b662      	cpsie	i
    5c7a:	4629      	mov	r1, r5
    5c7c:	4620      	mov	r0, r4
    5c7e:	f008 fe40 	bl	e902 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    5c82:	b928      	cbnz	r0, 5c90 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xc0>
    5c84:	4639      	mov	r1, r7
    5c86:	4620      	mov	r0, r4
    5c88:	f008 fe3b 	bl	e902 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    5c8c:	2800      	cmp	r0, #0
    5c8e:	d0d7      	beq.n	5c40 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x70>
    5c90:	4639      	mov	r1, r7
    5c92:	4620      	mov	r0, r4
    5c94:	f008 fe35 	bl	e902 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    5c98:	2800      	cmp	r0, #0
    5c9a:	d1c5      	bne.n	5c28 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x58>
    5c9c:	bb06      	cbnz	r6, 5ce0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
    5c9e:	f89b 1001 	ldrb.w	r1, [fp, #1]
    5ca2:	f88d 1000 	strb.w	r1, [sp]
    5ca6:	9900      	ldr	r1, [sp, #0]
    5ca8:	9100      	str	r1, [sp, #0]
    5caa:	f89d 1000 	ldrb.w	r1, [sp]
    5cae:	b109      	cbz	r1, 5cb4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe4>
    5cb0:	2501      	movs	r5, #1
    5cb2:	e000      	b.n	5cb6 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe6>
    5cb4:	2500      	movs	r5, #0
    5cb6:	f10b 0001 	add.w	r0, fp, #1
    5cba:	f880 8000 	strb.w	r8, [r0]
    5cbe:	2003      	movs	r0, #3
    5cc0:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    5cc4:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    5cc8:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    5ccc:	200e      	movs	r0, #14
    5cce:	f008 fe0b 	bl	e8e8 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    5cd2:	4804      	ldr	r0, [pc, #16]	; (5ce4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>)
    5cd4:	f007 fba2 	bl	d41c <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    5cd8:	b115      	cbz	r5, 5ce0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
    5cda:	2011      	movs	r0, #17
    5cdc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5ce0:	2000      	movs	r0, #0
    5ce2:	e7fb      	b.n	5cdc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
    5ce4:	200002b3 	.word	0x200002b3
    5ce8:	4000e000 	.word	0x4000e000
    5cec:	e000ed10 	.word	0xe000ed10

00005cf0 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    5cf0:	b510      	push	{r4, lr}
    5cf2:	4806      	ldr	r0, [pc, #24]	; (5d0c <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    5cf4:	f007 fb8e 	bl	d414 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    5cf8:	b118      	cbz	r0, 5d02 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x12>
    5cfa:	2127      	movs	r1, #39	; 0x27
    5cfc:	201d      	movs	r0, #29
    5cfe:	f7ff fa37 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5d02:	4802      	ldr	r0, [pc, #8]	; (5d0c <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    5d04:	2100      	movs	r1, #0
    5d06:	7041      	strb	r1, [r0, #1]
    5d08:	bd10      	pop	{r4, pc}
    5d0a:	0000      	.short	0x0000
    5d0c:	200002b3 	.word	0x200002b3

00005d10 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    5d10:	b570      	push	{r4, r5, r6, lr}
    5d12:	4911      	ldr	r1, [pc, #68]	; (5d58 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    5d14:	680a      	ldr	r2, [r1, #0]
    5d16:	b1ea      	cbz	r2, 5d54 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    5d18:	2300      	movs	r3, #0
    5d1a:	461d      	mov	r5, r3
    5d1c:	2401      	movs	r4, #1
    5d1e:	684a      	ldr	r2, [r1, #4]
    5d20:	1c52      	adds	r2, r2, #1
    5d22:	604a      	str	r2, [r1, #4]
    5d24:	2a09      	cmp	r2, #9
    5d26:	d300      	bcc.n	5d2a <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    5d28:	604d      	str	r5, [r1, #4]
    5d2a:	790e      	ldrb	r6, [r1, #4]
    5d2c:	fa04 f206 	lsl.w	r2, r4, r6
    5d30:	680e      	ldr	r6, [r1, #0]
    5d32:	4216      	tst	r6, r2
    5d34:	d00b      	beq.n	5d4e <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    5d36:	f3ef 8310 	mrs	r3, PRIMASK
    5d3a:	b672      	cpsid	i
    5d3c:	680c      	ldr	r4, [r1, #0]
    5d3e:	4394      	bics	r4, r2
    5d40:	600c      	str	r4, [r1, #0]
    5d42:	b903      	cbnz	r3, 5d46 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    5d44:	b662      	cpsie	i
    5d46:	6849      	ldr	r1, [r1, #4]
    5d48:	6001      	str	r1, [r0, #0]
    5d4a:	2000      	movs	r0, #0
    5d4c:	bd70      	pop	{r4, r5, r6, pc}
    5d4e:	1c5b      	adds	r3, r3, #1
    5d50:	2b09      	cmp	r3, #9
    5d52:	d3e4      	bcc.n	5d1e <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    5d54:	2005      	movs	r0, #5
    5d56:	bd70      	pop	{r4, r5, r6, pc}
    5d58:	200000a8 	.word	0x200000a8

00005d5c <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    5d5c:	4802      	ldr	r0, [pc, #8]	; (5d68 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    5d5e:	2100      	movs	r1, #0
    5d60:	6001      	str	r1, [r0, #0]
    5d62:	6041      	str	r1, [r0, #4]
    5d64:	4770      	bx	lr
    5d66:	0000      	.short	0x0000
    5d68:	200000a8 	.word	0x200000a8

00005d6c <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    5d6c:	b510      	push	{r4, lr}
    5d6e:	4c08      	ldr	r4, [pc, #32]	; (5d90 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    5d70:	7861      	ldrb	r1, [r4, #1]
    5d72:	b109      	cbz	r1, 5d78 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    5d74:	200f      	movs	r0, #15
    5d76:	bd10      	pop	{r4, pc}
    5d78:	f7fe fff8 	bl	4d6c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    5d7c:	7020      	strb	r0, [r4, #0]
    5d7e:	28ff      	cmp	r0, #255	; 0xff
    5d80:	d001      	beq.n	5d86 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    5d82:	2000      	movs	r0, #0
    5d84:	bd10      	pop	{r4, pc}
    5d86:	2178      	movs	r1, #120	; 0x78
    5d88:	201f      	movs	r0, #31
    5d8a:	f7ff f9f1 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5d8e:	0000      	.short	0x0000
    5d90:	200000b0 	.word	0x200000b0

00005d94 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    5d94:	4901      	ldr	r1, [pc, #4]	; (5d9c <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    5d96:	2000      	movs	r0, #0
    5d98:	7048      	strb	r0, [r1, #1]
    5d9a:	4770      	bx	lr
    5d9c:	200000b0 	.word	0x200000b0

00005da0 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    5da0:	4806      	ldr	r0, [pc, #24]	; (5dbc <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    5da2:	4a07      	ldr	r2, [pc, #28]	; (5dc0 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    5da4:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    5da6:	8852      	ldrh	r2, [r2, #2]
    5da8:	4291      	cmp	r1, r2
    5daa:	d104      	bne.n	5db6 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    5dac:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    5db0:	b108      	cbz	r0, 5db6 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    5db2:	2000      	movs	r0, #0
    5db4:	4770      	bx	lr
    5db6:	2001      	movs	r0, #1
    5db8:	4770      	bx	lr
    5dba:	0000      	.short	0x0000
    5dbc:	20001214 	.word	0x20001214
    5dc0:	20000298 	.word	0x20000298

00005dc4 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    5dc4:	4901      	ldr	r1, [pc, #4]	; (5dcc <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    5dc6:	8048      	strh	r0, [r1, #2]
    5dc8:	4770      	bx	lr
    5dca:	0000      	.short	0x0000
    5dcc:	20000298 	.word	0x20000298

00005dd0 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    5dd0:	4808      	ldr	r0, [pc, #32]	; (5df4 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    5dd2:	4a09      	ldr	r2, [pc, #36]	; (5df8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    5dd4:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    5dd6:	8852      	ldrh	r2, [r2, #2]
    5dd8:	4291      	cmp	r1, r2
    5dda:	d109      	bne.n	5df0 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    5ddc:	f64f 71ff 	movw	r1, #65535	; 0xffff
    5de0:	8481      	strh	r1, [r0, #36]	; 0x24
    5de2:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    5de6:	b119      	cbz	r1, 5df0 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    5de8:	2100      	movs	r1, #0
    5dea:	7001      	strb	r1, [r0, #0]
    5dec:	2001      	movs	r0, #1
    5dee:	4770      	bx	lr
    5df0:	2000      	movs	r0, #0
    5df2:	4770      	bx	lr
    5df4:	20001214 	.word	0x20001214
    5df8:	20000298 	.word	0x20000298

00005dfc <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    5dfc:	4807      	ldr	r0, [pc, #28]	; (5e1c <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    5dfe:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    5e02:	2901      	cmp	r1, #1
    5e04:	d007      	beq.n	5e16 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    5e06:	2101      	movs	r1, #1
    5e08:	7001      	strb	r1, [r0, #0]
    5e0a:	4805      	ldr	r0, [pc, #20]	; (5e20 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    5e0c:	4903      	ldr	r1, [pc, #12]	; (5e1c <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    5e0e:	8800      	ldrh	r0, [r0, #0]
    5e10:	8488      	strh	r0, [r1, #36]	; 0x24
    5e12:	2001      	movs	r0, #1
    5e14:	4770      	bx	lr
    5e16:	2000      	movs	r0, #0
    5e18:	4770      	bx	lr
    5e1a:	0000      	.short	0x0000
    5e1c:	20001214 	.word	0x20001214
    5e20:	20000298 	.word	0x20000298

00005e24 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    5e24:	4906      	ldr	r1, [pc, #24]	; (5e40 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    5e26:	4b07      	ldr	r3, [pc, #28]	; (5e44 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    5e28:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    5e2a:	885b      	ldrh	r3, [r3, #2]
    5e2c:	429a      	cmp	r2, r3
    5e2e:	d105      	bne.n	5e3c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    5e30:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    5e34:	b112      	cbz	r2, 5e3c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    5e36:	6001      	str	r1, [r0, #0]
    5e38:	2001      	movs	r0, #1
    5e3a:	4770      	bx	lr
    5e3c:	2000      	movs	r0, #0
    5e3e:	4770      	bx	lr
    5e40:	20001214 	.word	0x20001214
    5e44:	20000298 	.word	0x20000298

00005e48 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    5e48:	4909      	ldr	r1, [pc, #36]	; (5e70 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    5e4a:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    5e4c:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    5e50:	3bff      	subs	r3, #255	; 0xff
    5e52:	d002      	beq.n	5e5a <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    5e54:	2100      	movs	r1, #0
    5e56:	6001      	str	r1, [r0, #0]
    5e58:	e007      	b.n	5e6a <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    5e5a:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    5e5e:	4904      	ldr	r1, [pc, #16]	; (5e70 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    5e60:	2a01      	cmp	r2, #1
    5e62:	d002      	beq.n	5e6a <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    5e64:	6001      	str	r1, [r0, #0]
    5e66:	2001      	movs	r0, #1
    5e68:	4770      	bx	lr
    5e6a:	2000      	movs	r0, #0
    5e6c:	4770      	bx	lr
    5e6e:	0000      	.short	0x0000
    5e70:	20001214 	.word	0x20001214

00005e74 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    5e74:	4901      	ldr	r1, [pc, #4]	; (5e7c <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    5e76:	8008      	strh	r0, [r1, #0]
    5e78:	4770      	bx	lr
    5e7a:	0000      	.short	0x0000
    5e7c:	20000298 	.word	0x20000298

00005e80 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    5e80:	4905      	ldr	r1, [pc, #20]	; (5e98 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    5e82:	2000      	movs	r0, #0
    5e84:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    5e88:	f64f 70ff 	movw	r0, #65535	; 0xffff
    5e8c:	8488      	strh	r0, [r1, #36]	; 0x24
    5e8e:	4903      	ldr	r1, [pc, #12]	; (5e9c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    5e90:	8008      	strh	r0, [r1, #0]
    5e92:	8048      	strh	r0, [r1, #2]
    5e94:	4770      	bx	lr
    5e96:	0000      	.short	0x0000
    5e98:	20001214 	.word	0x20001214
    5e9c:	20000298 	.word	0x20000298
    5ea0:	4905      	ldr	r1, [pc, #20]	; (5eb8 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    5ea2:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    5ea4:	4282      	cmp	r2, r0
    5ea6:	d105      	bne.n	5eb4 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    5ea8:	2000      	movs	r0, #0
    5eaa:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    5eae:	f64f 70ff 	movw	r0, #65535	; 0xffff
    5eb2:	8488      	strh	r0, [r1, #36]	; 0x24
    5eb4:	4770      	bx	lr
    5eb6:	0000      	.short	0x0000
    5eb8:	20001214 	.word	0x20001214

00005ebc <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    5ebc:	4a0a      	ldr	r2, [pc, #40]	; (5ee8 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    5ebe:	b110      	cbz	r0, 5ec6 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    5ec0:	2801      	cmp	r0, #1
    5ec2:	d007      	beq.n	5ed4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    5ec4:	e00e      	b.n	5ee4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    5ec6:	7850      	ldrb	r0, [r2, #1]
    5ec8:	b160      	cbz	r0, 5ee4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    5eca:	f8d2 0002 	ldr.w	r0, [r2, #2]
    5ece:	6008      	str	r0, [r1, #0]
    5ed0:	88d0      	ldrh	r0, [r2, #6]
    5ed2:	e004      	b.n	5ede <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    5ed4:	7810      	ldrb	r0, [r2, #0]
    5ed6:	b128      	cbz	r0, 5ee4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    5ed8:	6890      	ldr	r0, [r2, #8]
    5eda:	6008      	str	r0, [r1, #0]
    5edc:	8990      	ldrh	r0, [r2, #12]
    5ede:	8088      	strh	r0, [r1, #4]
    5ee0:	2001      	movs	r0, #1
    5ee2:	4770      	bx	lr
    5ee4:	2000      	movs	r0, #0
    5ee6:	4770      	bx	lr
    5ee8:	200002b5 	.word	0x200002b5

00005eec <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    5eec:	4a08      	ldr	r2, [pc, #32]	; (5f10 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    5eee:	2301      	movs	r3, #1
    5ef0:	b138      	cbz	r0, 5f02 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    5ef2:	2801      	cmp	r0, #1
    5ef4:	d104      	bne.n	5f00 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    5ef6:	7013      	strb	r3, [r2, #0]
    5ef8:	6808      	ldr	r0, [r1, #0]
    5efa:	6090      	str	r0, [r2, #8]
    5efc:	8888      	ldrh	r0, [r1, #4]
    5efe:	8190      	strh	r0, [r2, #12]
    5f00:	4770      	bx	lr
    5f02:	7053      	strb	r3, [r2, #1]
    5f04:	6808      	ldr	r0, [r1, #0]
    5f06:	f8c2 0002 	str.w	r0, [r2, #2]
    5f0a:	8888      	ldrh	r0, [r1, #4]
    5f0c:	80d0      	strh	r0, [r2, #6]
    5f0e:	4770      	bx	lr
    5f10:	200002b5 	.word	0x200002b5

00005f14 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    5f14:	4906      	ldr	r1, [pc, #24]	; (5f30 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    5f16:	b110      	cbz	r0, 5f1e <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    5f18:	2801      	cmp	r0, #1
    5f1a:	d002      	beq.n	5f22 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    5f1c:	e005      	b.n	5f2a <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    5f1e:	7848      	ldrb	r0, [r1, #1]
    5f20:	e000      	b.n	5f24 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    5f22:	7808      	ldrb	r0, [r1, #0]
    5f24:	b108      	cbz	r0, 5f2a <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    5f26:	2001      	movs	r0, #1
    5f28:	4770      	bx	lr
    5f2a:	2000      	movs	r0, #0
    5f2c:	4770      	bx	lr
    5f2e:	0000      	.short	0x0000
    5f30:	200002b5 	.word	0x200002b5

00005f34 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    5f34:	4901      	ldr	r1, [pc, #4]	; (5f3c <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    5f36:	7748      	strb	r0, [r1, #29]
    5f38:	4770      	bx	lr
    5f3a:	0000      	.short	0x0000
    5f3c:	20000b62 	.word	0x20000b62

00005f40 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>:
    5f40:	4801      	ldr	r0, [pc, #4]	; (5f48 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ+0x8>)
    5f42:	78c0      	ldrb	r0, [r0, #3]
    5f44:	4770      	bx	lr
    5f46:	0000      	.short	0x0000
    5f48:	200000cc 	.word	0x200000cc

00005f4c <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>:
    5f4c:	4801      	ldr	r0, [pc, #4]	; (5f54 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY+0x8>)
    5f4e:	7900      	ldrb	r0, [r0, #4]
    5f50:	4770      	bx	lr
    5f52:	0000      	.short	0x0000
    5f54:	200000cc 	.word	0x200000cc

00005f58 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I>:
    5f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5f5c:	4c14      	ldr	r4, [pc, #80]	; (5fb0 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x58>)
    5f5e:	4606      	mov	r6, r0
    5f60:	7f60      	ldrb	r0, [r4, #29]
    5f62:	b318      	cbz	r0, 5fac <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x54>
    5f64:	7f20      	ldrb	r0, [r4, #28]
    5f66:	f88d 0000 	strb.w	r0, [sp]
    5f6a:	9800      	ldr	r0, [sp, #0]
    5f6c:	9000      	str	r0, [sp, #0]
    5f6e:	f89d 0000 	ldrb.w	r0, [sp]
    5f72:	2700      	movs	r7, #0
    5f74:	b1d0      	cbz	r0, 5fac <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x54>
    5f76:	f104 051c 	add.w	r5, r4, #28
    5f7a:	f04f 081a 	mov.w	r8, #26
    5f7e:	f104 090e 	add.w	r9, r4, #14
    5f82:	7f20      	ldrb	r0, [r4, #28]
    5f84:	f88d 0000 	strb.w	r0, [sp]
    5f88:	9800      	ldr	r0, [sp, #0]
    5f8a:	9000      	str	r0, [sp, #0]
    5f8c:	f89d 0000 	ldrb.w	r0, [sp]
    5f90:	b148      	cbz	r0, 5fa6 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4e>
    5f92:	702f      	strb	r7, [r5, #0]
    5f94:	7077      	strb	r7, [r6, #1]
    5f96:	f886 8000 	strb.w	r8, [r6]
    5f9a:	220e      	movs	r2, #14
    5f9c:	4649      	mov	r1, r9
    5f9e:	1d30      	adds	r0, r6, #4
    5fa0:	f007 face 	bl	d540 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5fa4:	e7ed      	b.n	5f82 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x2a>
    5fa6:	2001      	movs	r0, #1
    5fa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5fac:	2000      	movs	r0, #0
    5fae:	e7fb      	b.n	5fa8 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x50>
    5fb0:	20000b62 	.word	0x20000b62

00005fb4 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
    5fb4:	b510      	push	{r4, lr}
    5fb6:	4604      	mov	r4, r0
    5fb8:	f000 f950 	bl	625c <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    5fbc:	b118      	cbz	r0, 5fc6 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x12>
    5fbe:	21be      	movs	r1, #190	; 0xbe
    5fc0:	2027      	movs	r0, #39	; 0x27
    5fc2:	f7ff f8d5 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5fc6:	4803      	ldr	r0, [pc, #12]	; (5fd4 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x20>)
    5fc8:	2101      	movs	r1, #1
    5fca:	f009 f881 	bl	f0d0 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    5fce:	4802      	ldr	r0, [pc, #8]	; (5fd8 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x24>)
    5fd0:	62c4      	str	r4, [r0, #44]	; 0x2c
    5fd2:	bd10      	pop	{r4, pc}
    5fd4:	20000b40 	.word	0x20000b40
    5fd8:	200000cc 	.word	0x200000cc

00005fdc <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    5fdc:	4901      	ldr	r1, [pc, #4]	; (5fe4 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    5fde:	2001      	movs	r0, #1
    5fe0:	7188      	strb	r0, [r1, #6]
    5fe2:	4770      	bx	lr
    5fe4:	200000cc 	.word	0x200000cc

00005fe8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    5fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5fec:	4c5d      	ldr	r4, [pc, #372]	; (6164 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x17c>)
    5fee:	9d06      	ldr	r5, [sp, #24]
    5ff0:	7826      	ldrb	r6, [r4, #0]
    5ff2:	2e00      	cmp	r6, #0
    5ff4:	d16a      	bne.n	60cc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe4>
    5ff6:	2a00      	cmp	r2, #0
    5ff8:	d068      	beq.n	60cc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe4>
    5ffa:	2b00      	cmp	r3, #0
    5ffc:	d066      	beq.n	60cc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe4>
    5ffe:	2d00      	cmp	r5, #0
    6000:	d064      	beq.n	60cc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe4>
    6002:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    6006:	f104 0614 	add.w	r6, r4, #20
    600a:	2000      	movs	r0, #0
    600c:	e886 002c 	stmia.w	r6, {r2, r3, r5}
    6010:	71a0      	strb	r0, [r4, #6]
    6012:	7160      	strb	r0, [r4, #5]
    6014:	70e0      	strb	r0, [r4, #3]
    6016:	70a0      	strb	r0, [r4, #2]
    6018:	7120      	strb	r0, [r4, #4]
    601a:	81a0      	strh	r0, [r4, #12]
    601c:	81e0      	strh	r0, [r4, #14]
    601e:	f000 f955 	bl	62cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    6022:	4606      	mov	r6, r0
    6024:	f000 f94c 	bl	62c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    6028:	4605      	mov	r5, r0
    602a:	f005 ffeb 	bl	c004 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    602e:	f005 fd1d 	bl	ba6c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    6032:	f995 0072 	ldrsb.w	r0, [r5, #114]	; 0x72
    6036:	f006 f86b 	bl	c110 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    603a:	f105 001c 	add.w	r0, r5, #28
    603e:	f006 f951 	bl	c2e4 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    6042:	6968      	ldr	r0, [r5, #20]
    6044:	f006 f944 	bl	c2d0 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    6048:	f896 0023 	ldrb.w	r0, [r6, #35]	; 0x23
    604c:	f006 f97e 	bl	c34c <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    6050:	f104 0038 	add.w	r0, r4, #56	; 0x38
    6054:	6840      	ldr	r0, [r0, #4]
    6056:	f890 0184 	ldrb.w	r0, [r0, #388]	; 0x184
    605a:	b108      	cbz	r0, 6060 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x78>
    605c:	f005 ff42 	bl	bee4 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>
    6060:	f895 106f 	ldrb.w	r1, [r5, #111]	; 0x6f
    6064:	2001      	movs	r0, #1
    6066:	f005 fe75 	bl	bd54 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    606a:	2800      	cmp	r0, #0
    606c:	d073      	beq.n	6156 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x16e>
    606e:	483e      	ldr	r0, [pc, #248]	; (6168 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x180>)
    6070:	f005 fee8 	bl	be44 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    6074:	8828      	ldrh	r0, [r5, #0]
    6076:	f7ff fcab 	bl	59d0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    607a:	6320      	str	r0, [r4, #48]	; 0x30
    607c:	8828      	ldrh	r0, [r5, #0]
    607e:	f7ff fc91 	bl	59a4 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    6082:	6360      	str	r0, [r4, #52]	; 0x34
    6084:	f106 0168 	add.w	r1, r6, #104	; 0x68
    6088:	4838      	ldr	r0, [pc, #224]	; (616c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x184>)
    608a:	c98e      	ldmia	r1, {r1, r2, r3, r7}
    608c:	f100 0808 	add.w	r8, r0, #8
    6090:	e888 008e 	stmia.w	r8, {r1, r2, r3, r7}
    6094:	6fb1      	ldr	r1, [r6, #120]	; 0x78
    6096:	f8c0 1021 	str.w	r1, [r0, #33]	; 0x21
    609a:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
    609c:	f8c0 1025 	str.w	r1, [r0, #37]	; 0x25
    60a0:	f000 f99a 	bl	63d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x160>
    60a4:	4601      	mov	r1, r0
    60a6:	8fa8      	ldrh	r0, [r5, #60]	; 0x3c
    60a8:	f008 fda5 	bl	ebf6 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    60ac:	8f29      	ldrh	r1, [r5, #56]	; 0x38
    60ae:	4281      	cmp	r1, r0
    60b0:	d200      	bcs.n	60b4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xcc>
    60b2:	4608      	mov	r0, r1
    60b4:	7220      	strb	r0, [r4, #8]
    60b6:	46a0      	mov	r8, r4
    60b8:	f895 106f 	ldrb.w	r1, [r5, #111]	; 0x6f
    60bc:	f8b5 0042 	ldrh.w	r0, [r5, #66]	; 0x42
    60c0:	7cf7      	ldrb	r7, [r6, #19]
    60c2:	f8b5 4040 	ldrh.w	r4, [r5, #64]	; 0x40
    60c6:	2908      	cmp	r1, #8
    60c8:	d104      	bne.n	60d4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xec>
    60ca:	e002      	b.n	60d2 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xea>
    60cc:	f240 1115 	movw	r1, #277	; 0x115
    60d0:	e045      	b.n	615e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x176>
    60d2:	2104      	movs	r1, #4
    60d4:	f008 fd8f 	bl	ebf6 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    60d8:	b90f      	cbnz	r7, 60de <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xf6>
    60da:	1d00      	adds	r0, r0, #4
    60dc:	b280      	uxth	r0, r0
    60de:	4284      	cmp	r4, r0
    60e0:	d200      	bcs.n	60e4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfc>
    60e2:	4620      	mov	r0, r4
    60e4:	b2c4      	uxtb	r4, r0
    60e6:	f888 4009 	strb.w	r4, [r8, #9]
    60ea:	7cf1      	ldrb	r1, [r6, #19]
    60ec:	2900      	cmp	r1, #0
    60ee:	d001      	beq.n	60f4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x10c>
    60f0:	f04f 0104 	mov.w	r1, #4
    60f4:	4421      	add	r1, r4
    60f6:	f888 1007 	strb.w	r1, [r8, #7]
    60fa:	d014      	beq.n	6126 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x13e>
    60fc:	481b      	ldr	r0, [pc, #108]	; (616c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x184>)
    60fe:	f04f 0701 	mov.w	r7, #1
    6102:	f100 0008 	add.w	r0, r0, #8
    6106:	7607      	strb	r7, [r0, #24]
    6108:	e9d6 1218 	ldrd	r1, r2, [r6, #96]	; 0x60
    610c:	e9c0 1204 	strd	r1, r2, [r0, #16]
    6110:	f895 006f 	ldrb.w	r0, [r5, #111]	; 0x6f
    6114:	f008 fc75 	bl	ea02 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    6118:	4914      	ldr	r1, [pc, #80]	; (616c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x184>)
    611a:	4603      	mov	r3, r0
    611c:	4622      	mov	r2, r4
    611e:	3108      	adds	r1, #8
    6120:	4638      	mov	r0, r7
    6122:	f005 fc0f 	bl	b944 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    6126:	2001      	movs	r0, #1
    6128:	f000 fb7e 	bl	6828 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5b0>
    612c:	4810      	ldr	r0, [pc, #64]	; (6170 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x188>)
    612e:	6800      	ldr	r0, [r0, #0]
    6130:	2803      	cmp	r0, #3
    6132:	d012      	beq.n	615a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x172>
    6134:	280b      	cmp	r0, #11
    6136:	d010      	beq.n	615a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x172>
    6138:	480c      	ldr	r0, [pc, #48]	; (616c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x184>)
    613a:	220e      	movs	r2, #14
    613c:	2100      	movs	r1, #0
    613e:	3052      	adds	r0, #82	; 0x52
    6140:	f007 fa78 	bl	d634 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6144:	4809      	ldr	r0, [pc, #36]	; (616c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x184>)
    6146:	88b1      	ldrh	r1, [r6, #4]
    6148:	3052      	adds	r0, #82	; 0x52
    614a:	8041      	strh	r1, [r0, #2]
    614c:	8829      	ldrh	r1, [r5, #0]
    614e:	8001      	strh	r1, [r0, #0]
    6150:	f896 1023 	ldrb.w	r1, [r6, #35]	; 0x23
    6154:	7101      	strb	r1, [r0, #4]
    6156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    615a:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
    615e:	2027      	movs	r0, #39	; 0x27
    6160:	f7ff f806 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6164:	200000cc 	.word	0x200000cc
    6168:	00006a28 	.word	0x00006a28
    616c:	20000b10 	.word	0x20000b10
    6170:	40001550 	.word	0x40001550

00006174 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    6174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6178:	4605      	mov	r5, r0
    617a:	f000 f8a7 	bl	62cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    617e:	4e32      	ldr	r6, [pc, #200]	; (6248 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xd4>)
    6180:	4604      	mov	r4, r0
    6182:	f04f 0800 	mov.w	r8, #0
    6186:	6a70      	ldr	r0, [r6, #36]	; 0x24
    6188:	7847      	ldrb	r7, [r0, #1]
    618a:	b10d      	cbz	r5, 6190 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x1c>
    618c:	2d01      	cmp	r5, #1
    618e:	d101      	bne.n	6194 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x20>
    6190:	f886 8001 	strb.w	r8, [r6, #1]
    6194:	7870      	ldrb	r0, [r6, #1]
    6196:	f04f 0901 	mov.w	r9, #1
    619a:	b150      	cbz	r0, 61b2 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x3e>
    619c:	2801      	cmp	r0, #1
    619e:	d01a      	beq.n	61d6 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x62>
    61a0:	2802      	cmp	r0, #2
    61a2:	d034      	beq.n	620e <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x9a>
    61a4:	2803      	cmp	r0, #3
    61a6:	d048      	beq.n	623a <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc6>
    61a8:	f240 4114 	movw	r1, #1044	; 0x414
    61ac:	2027      	movs	r0, #39	; 0x27
    61ae:	f7fe ffdf 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    61b2:	2d01      	cmp	r5, #1
    61b4:	d032      	beq.n	621c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa8>
    61b6:	f000 f8fb 	bl	63b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x138>
    61ba:	4639      	mov	r1, r7
    61bc:	2201      	movs	r2, #1
    61be:	6b70      	ldr	r0, [r6, #52]	; 0x34
    61c0:	f007 ff85 	bl	e0ce <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    61c4:	e028      	b.n	6218 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa4>
    61c6:	bf00      	nop
    61c8:	f884 8008 	strb.w	r8, [r4, #8]
    61cc:	e031      	b.n	6232 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xbe>
    61ce:	bf00      	nop
    61d0:	f884 9008 	strb.w	r9, [r4, #8]
    61d4:	e02d      	b.n	6232 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xbe>
    61d6:	2d01      	cmp	r5, #1
    61d8:	d008      	beq.n	61ec <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x78>
    61da:	f000 f8e9 	bl	63b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x138>
    61de:	4639      	mov	r1, r7
    61e0:	2200      	movs	r2, #0
    61e2:	6b70      	ldr	r0, [r6, #52]	; 0x34
    61e4:	f007 ff73 	bl	e0ce <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    61e8:	2d02      	cmp	r5, #2
    61ea:	d00b      	beq.n	6204 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x90>
    61ec:	e9d4 0118 	ldrd	r0, r1, [r4, #96]	; 0x60
    61f0:	1c40      	adds	r0, r0, #1
    61f2:	f141 0100 	adc.w	r1, r1, #0
    61f6:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
    61fa:	7a20      	ldrb	r0, [r4, #8]
    61fc:	2801      	cmp	r0, #1
    61fe:	d003      	beq.n	6208 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    6200:	f884 9008 	strb.w	r9, [r4, #8]
    6204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6208:	f884 8008 	strb.w	r8, [r4, #8]
    620c:	e7fa      	b.n	6204 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x90>
    620e:	2d01      	cmp	r5, #1
    6210:	d004      	beq.n	621c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa8>
    6212:	6b70      	ldr	r0, [r6, #52]	; 0x34
    6214:	f008 f96c 	bl	e4f0 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    6218:	2d02      	cmp	r5, #2
    621a:	d0f3      	beq.n	6204 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x90>
    621c:	e9d4 0118 	ldrd	r0, r1, [r4, #96]	; 0x60
    6220:	1c40      	adds	r0, r0, #1
    6222:	f141 0100 	adc.w	r1, r1, #0
    6226:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
    622a:	7a20      	ldrb	r0, [r4, #8]
    622c:	2801      	cmp	r0, #1
    622e:	d1cf      	bne.n	61d0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x5c>
    6230:	e7ca      	b.n	61c8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x54>
    6232:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6236:	f001 b8d1 	b.w	73dc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    623a:	2d01      	cmp	r5, #1
    623c:	d0e2      	beq.n	6204 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x90>
    623e:	6b70      	ldr	r0, [r6, #52]	; 0x34
    6240:	f008 f956 	bl	e4f0 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    6244:	e7f5      	b.n	6232 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xbe>
    6246:	0000      	.short	0x0000
    6248:	200000cc 	.word	0x200000cc

0000624c <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>:
    624c:	4802      	ldr	r0, [pc, #8]	; (6258 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI+0xc>)
    624e:	89c0      	ldrh	r0, [r0, #14]
    6250:	f3c0 2080 	ubfx	r0, r0, #10, #1
    6254:	4770      	bx	lr
    6256:	0000      	.short	0x0000
    6258:	200000cc 	.word	0x200000cc

0000625c <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
    625c:	4804      	ldr	r0, [pc, #16]	; (6270 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x14>)
    625e:	7800      	ldrb	r0, [r0, #0]
    6260:	b108      	cbz	r0, 6266 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0xa>
    6262:	200c      	movs	r0, #12
    6264:	4770      	bx	lr
    6266:	4903      	ldr	r1, [pc, #12]	; (6274 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x18>)
    6268:	2000      	movs	r0, #0
    626a:	7748      	strb	r0, [r1, #29]
    626c:	4770      	bx	lr
    626e:	0000      	.short	0x0000
    6270:	200000cc 	.word	0x200000cc
    6274:	20000b62 	.word	0x20000b62

00006278 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    6278:	480c      	ldr	r0, [pc, #48]	; (62ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34>)
    627a:	b510      	push	{r4, lr}
    627c:	7801      	ldrb	r1, [r0, #0]
    627e:	b149      	cbz	r1, 6294 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c>
    6280:	f100 0138 	add.w	r1, r0, #56	; 0x38
    6284:	7800      	ldrb	r0, [r0, #0]
    6286:	2802      	cmp	r0, #2
    6288:	d008      	beq.n	629c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24>
    628a:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
    628e:	2027      	movs	r0, #39	; 0x27
    6290:	f7fe ff6e 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6298:	f000 b9e6 	b.w	6668 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f0>
    629c:	6848      	ldr	r0, [r1, #4]
    629e:	f8d0 0118 	ldr.w	r0, [r0, #280]	; 0x118
    62a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    62a6:	f005 bdd5 	b.w	be54 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>
    62aa:	0000      	.short	0x0000
    62ac:	200000cc 	.word	0x200000cc
    62b0:	4a02      	ldr	r2, [pc, #8]	; (62bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44>)
    62b2:	8993      	ldrh	r3, [r2, #12]
    62b4:	4303      	orrs	r3, r0
    62b6:	8193      	strh	r3, [r2, #12]
    62b8:	6952      	ldr	r2, [r2, #20]
    62ba:	4710      	bx	r2
    62bc:	200000cc 	.word	0x200000cc
    62c0:	4801      	ldr	r0, [pc, #4]	; (62c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>)
    62c2:	6840      	ldr	r0, [r0, #4]
    62c4:	4770      	bx	lr
    62c6:	0000      	.short	0x0000
    62c8:	20000104 	.word	0x20000104
    62cc:	4801      	ldr	r0, [pc, #4]	; (62d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c>)
    62ce:	6840      	ldr	r0, [r0, #4]
    62d0:	3078      	adds	r0, #120	; 0x78
    62d2:	4770      	bx	lr
    62d4:	20000104 	.word	0x20000104
    62d8:	4a01      	ldr	r2, [pc, #4]	; (62e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68>)
    62da:	2100      	movs	r1, #0
    62dc:	6952      	ldr	r2, [r2, #20]
    62de:	4710      	bx	r2
    62e0:	200000cc 	.word	0x200000cc
    62e4:	b570      	push	{r4, r5, r6, lr}
    62e6:	f7ff fff1 	bl	62cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    62ea:	4604      	mov	r4, r0
    62ec:	f7ff ffe8 	bl	62c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    62f0:	4605      	mov	r5, r0
    62f2:	4621      	mov	r1, r4
    62f4:	f008 fd02 	bl	ecfc <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>
    62f8:	f895 102a 	ldrb.w	r1, [r5, #42]	; 0x2a
    62fc:	2901      	cmp	r1, #1
    62fe:	d114      	bne.n	632a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb2>
    6300:	2800      	cmp	r0, #0
    6302:	d012      	beq.n	632a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb2>
    6304:	4809      	ldr	r0, [pc, #36]	; (632c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb4>)
    6306:	6842      	ldr	r2, [r0, #4]
    6308:	8828      	ldrh	r0, [r5, #0]
    630a:	f8a2 0206 	strh.w	r0, [r2, #518]	; 0x206
    630e:	7a60      	ldrb	r0, [r4, #9]
    6310:	f882 0208 	strb.w	r0, [r2, #520]	; 0x208
    6314:	7aa0      	ldrb	r0, [r4, #10]
    6316:	f882 0209 	strb.w	r0, [r2, #521]	; 0x209
    631a:	f502 7201 	add.w	r2, r2, #516	; 0x204
    631e:	20ff      	movs	r0, #255	; 0xff
    6320:	7010      	strb	r0, [r2, #0]
    6322:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6326:	f001 b859 	b.w	73dc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    632a:	bd70      	pop	{r4, r5, r6, pc}
    632c:	20000104 	.word	0x20000104
    6330:	b570      	push	{r4, r5, r6, lr}
    6332:	4605      	mov	r5, r0
    6334:	2901      	cmp	r1, #1
    6336:	d818      	bhi.n	636a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    6338:	4c12      	ldr	r4, [pc, #72]	; (6384 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>)
    633a:	69a1      	ldr	r1, [r4, #24]
    633c:	4788      	blx	r1
    633e:	b1a0      	cbz	r0, 636a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    6340:	7960      	ldrb	r0, [r4, #5]
    6342:	b990      	cbnz	r0, 636a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    6344:	b9e5      	cbnz	r5, 6380 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x108>
    6346:	f104 0010 	add.w	r0, r4, #16
    634a:	7801      	ldrb	r1, [r0, #0]
    634c:	06c8      	lsls	r0, r1, #27
    634e:	d405      	bmi.n	635c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe4>
    6350:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    6352:	7800      	ldrb	r0, [r0, #0]
    6354:	06c0      	lsls	r0, r0, #27
    6356:	d401      	bmi.n	635c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe4>
    6358:	2001      	movs	r0, #1
    635a:	e000      	b.n	635e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe6>
    635c:	2000      	movs	r0, #0
    635e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    6360:	b92a      	cbnz	r2, 636e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf6>
    6362:	8962      	ldrh	r2, [r4, #10]
    6364:	b11a      	cbz	r2, 636e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf6>
    6366:	06c9      	lsls	r1, r1, #27
    6368:	d401      	bmi.n	636e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf6>
    636a:	2001      	movs	r0, #1
    636c:	bd70      	pop	{r4, r5, r6, pc}
    636e:	89a1      	ldrh	r1, [r4, #12]
    6370:	078a      	lsls	r2, r1, #30
    6372:	d503      	bpl.n	637c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x104>
    6374:	6a22      	ldr	r2, [r4, #32]
    6376:	78d2      	ldrb	r2, [r2, #3]
    6378:	2a02      	cmp	r2, #2
    637a:	d001      	beq.n	6380 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x108>
    637c:	4308      	orrs	r0, r1
    637e:	d1f4      	bne.n	636a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    6380:	2000      	movs	r0, #0
    6382:	bd70      	pop	{r4, r5, r6, pc}
    6384:	200000cc 	.word	0x200000cc
    6388:	b530      	push	{r4, r5, lr}
    638a:	4b08      	ldr	r3, [pc, #32]	; (63ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x134>)
    638c:	88dd      	ldrh	r5, [r3, #6]
    638e:	891c      	ldrh	r4, [r3, #8]
    6390:	b12a      	cbz	r2, 639e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x126>
    6392:	b908      	cbnz	r0, 6398 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x120>
    6394:	b905      	cbnz	r5, 6398 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x120>
    6396:	b114      	cbz	r4, 639e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x126>
    6398:	8958      	ldrh	r0, [r3, #10]
    639a:	1c40      	adds	r0, r0, #1
    639c:	8158      	strh	r0, [r3, #10]
    639e:	b111      	cbz	r1, 63a6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x12e>
    63a0:	1c6d      	adds	r5, r5, #1
    63a2:	80dd      	strh	r5, [r3, #6]
    63a4:	bd30      	pop	{r4, r5, pc}
    63a6:	1c64      	adds	r4, r4, #1
    63a8:	811c      	strh	r4, [r3, #8]
    63aa:	bd30      	pop	{r4, r5, pc}
    63ac:	20000b62 	.word	0x20000b62
    63b0:	b510      	push	{r4, lr}
    63b2:	4c08      	ldr	r4, [pc, #32]	; (63d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x15c>)
    63b4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    63b6:	b138      	cbz	r0, 63c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x150>
    63b8:	8962      	ldrh	r2, [r4, #10]
    63ba:	6a61      	ldr	r1, [r4, #36]	; 0x24
    63bc:	1cd2      	adds	r2, r2, #3
    63be:	f007 f8bf 	bl	d540 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    63c2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    63c4:	6260      	str	r0, [r4, #36]	; 0x24
    63c6:	bd10      	pop	{r4, pc}
    63c8:	f240 415a 	movw	r1, #1114	; 0x45a
    63cc:	2027      	movs	r0, #39	; 0x27
    63ce:	f7fe fecf 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    63d2:	0000      	.short	0x0000
    63d4:	200000cc 	.word	0x200000cc
    63d8:	b510      	push	{r4, lr}
    63da:	f7ff ff71 	bl	62c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    63de:	4604      	mov	r4, r0
    63e0:	f7ff ff74 	bl	62cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    63e4:	4601      	mov	r1, r0
    63e6:	7b42      	ldrb	r2, [r0, #13]
    63e8:	4815      	ldr	r0, [pc, #84]	; (6440 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c8>)
    63ea:	2a24      	cmp	r2, #36	; 0x24
    63ec:	d00e      	beq.n	640c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x194>
    63ee:	7b89      	ldrb	r1, [r1, #14]
    63f0:	2924      	cmp	r1, #36	; 0x24
    63f2:	d00b      	beq.n	640c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x194>
    63f4:	2a1f      	cmp	r2, #31
    63f6:	d00d      	beq.n	6414 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x19c>
    63f8:	2a20      	cmp	r2, #32
    63fa:	d00b      	beq.n	6414 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x19c>
    63fc:	2922      	cmp	r1, #34	; 0x22
    63fe:	d00f      	beq.n	6420 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1a8>
    6400:	f894 006e 	ldrb.w	r0, [r4, #110]	; 0x6e
    6404:	2804      	cmp	r0, #4
    6406:	d100      	bne.n	640a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x192>
    6408:	2008      	movs	r0, #8
    640a:	bd10      	pop	{r4, pc}
    640c:	6840      	ldr	r0, [r0, #4]
    640e:	f890 11a6 	ldrb.w	r1, [r0, #422]	; 0x1a6
    6412:	e00e      	b.n	6432 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ba>
    6414:	2922      	cmp	r1, #34	; 0x22
    6416:	d003      	beq.n	6420 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1a8>
    6418:	6840      	ldr	r0, [r0, #4]
    641a:	f890 01c0 	ldrb.w	r0, [r0, #448]	; 0x1c0
    641e:	e005      	b.n	642c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1b4>
    6420:	6841      	ldr	r1, [r0, #4]
    6422:	f891 01c0 	ldrb.w	r0, [r1, #448]	; 0x1c0
    6426:	f891 1067 	ldrb.w	r1, [r1, #103]	; 0x67
    642a:	4008      	ands	r0, r1
    642c:	f008 fadf 	bl	e9ee <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    6430:	4601      	mov	r1, r0
    6432:	f894 006e 	ldrb.w	r0, [r4, #110]	; 0x6e
    6436:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    643a:	f008 baf0 	b.w	ea1e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    643e:	0000      	.short	0x0000
    6440:	20000104 	.word	0x20000104
    6444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6448:	4689      	mov	r9, r1
    644a:	4607      	mov	r7, r0
    644c:	f7ff ff3e 	bl	62cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    6450:	4c55      	ldr	r4, [pc, #340]	; (65a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x330>)
    6452:	f04f 0800 	mov.w	r8, #0
    6456:	4605      	mov	r5, r0
    6458:	f88d 8000 	strb.w	r8, [sp]
    645c:	7820      	ldrb	r0, [r4, #0]
    645e:	4646      	mov	r6, r8
    6460:	2802      	cmp	r0, #2
    6462:	d004      	beq.n	646e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1f6>
    6464:	f240 41de 	movw	r1, #1246	; 0x4de
    6468:	2027      	movs	r0, #39	; 0x27
    646a:	f7fe fe81 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    646e:	7ba0      	ldrb	r0, [r4, #14]
    6470:	0640      	lsls	r0, r0, #25
    6472:	d406      	bmi.n	6482 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x20a>
    6474:	2040      	movs	r0, #64	; 0x40
    6476:	f7ff ff2f 	bl	62d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    647a:	89e0      	ldrh	r0, [r4, #14]
    647c:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    6480:	81e0      	strh	r0, [r4, #14]
    6482:	7ce8      	ldrb	r0, [r5, #19]
    6484:	b3d7      	cbz	r7, 64fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x284>
    6486:	b180      	cbz	r0, 64aa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x232>
    6488:	f005 fb2a 	bl	bae0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    648c:	f005 fb04 	bl	ba98 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    6490:	b958      	cbnz	r0, 64aa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x232>
    6492:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6494:	7841      	ldrb	r1, [r0, #1]
    6496:	b141      	cbz	r1, 64aa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x232>
    6498:	7800      	ldrb	r0, [r0, #0]
    649a:	7a29      	ldrb	r1, [r5, #8]
    649c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    64a0:	4288      	cmp	r0, r1
    64a2:	d102      	bne.n	64aa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x232>
    64a4:	2001      	movs	r0, #1
    64a6:	70a0      	strb	r0, [r4, #2]
    64a8:	e060      	b.n	656c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f4>
    64aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
    64ac:	7841      	ldrb	r1, [r0, #1]
    64ae:	8161      	strh	r1, [r4, #10]
    64b0:	b121      	cbz	r1, 64bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x244>
    64b2:	6b60      	ldr	r0, [r4, #52]	; 0x34
    64b4:	f007 ffe9 	bl	e48a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    64b8:	62a0      	str	r0, [r4, #40]	; 0x28
    64ba:	e000      	b.n	64be <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x246>
    64bc:	62a6      	str	r6, [r4, #40]	; 0x28
    64be:	89e0      	ldrh	r0, [r4, #14]
    64c0:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    64c4:	81e0      	strh	r0, [r4, #14]
    64c6:	6a60      	ldr	r0, [r4, #36]	; 0x24
    64c8:	79e9      	ldrb	r1, [r5, #7]
    64ca:	7800      	ldrb	r0, [r0, #0]
    64cc:	f3c0 0080 	ubfx	r0, r0, #2, #1
    64d0:	4288      	cmp	r0, r1
    64d2:	d006      	beq.n	64e2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x26a>
    64d4:	f000 f95a 	bl	678c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x514>
    64d8:	89e0      	ldrh	r0, [r4, #14]
    64da:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    64de:	81e0      	strh	r0, [r4, #14]
    64e0:	e001      	b.n	64e6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x26e>
    64e2:	f04f 0801 	mov.w	r8, #1
    64e6:	6a60      	ldr	r0, [r4, #36]	; 0x24
    64e8:	7a29      	ldrb	r1, [r5, #8]
    64ea:	7800      	ldrb	r0, [r0, #0]
    64ec:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    64f0:	4288      	cmp	r0, r1
    64f2:	d10e      	bne.n	6512 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x29a>
    64f4:	4668      	mov	r0, sp
    64f6:	f000 f90b 	bl	6710 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x498>
    64fa:	e00a      	b.n	6512 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x29a>
    64fc:	e7ff      	b.n	64fe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x286>
    64fe:	b108      	cbz	r0, 6504 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x28c>
    6500:	f005 fae8 	bl	bad4 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    6504:	78e0      	ldrb	r0, [r4, #3]
    6506:	1c40      	adds	r0, r0, #1
    6508:	70e0      	strb	r0, [r4, #3]
    650a:	89e0      	ldrh	r0, [r4, #14]
    650c:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    6510:	81e0      	strh	r0, [r4, #14]
    6512:	7ca8      	ldrb	r0, [r5, #18]
    6514:	b188      	cbz	r0, 653a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2c2>
    6516:	f7ff fed3 	bl	62c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    651a:	4924      	ldr	r1, [pc, #144]	; (65ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x334>)
    651c:	760e      	strb	r6, [r1, #24]
    651e:	e9d5 2316 	ldrd	r2, r3, [r5, #88]	; 0x58
    6522:	e9c1 2304 	strd	r2, r3, [r1, #16]
    6526:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
    652a:	f008 fa6a 	bl	ea02 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    652e:	4603      	mov	r3, r0
    6530:	22fb      	movs	r2, #251	; 0xfb
    6532:	491e      	ldr	r1, [pc, #120]	; (65ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x334>)
    6534:	4630      	mov	r0, r6
    6536:	f005 fa05 	bl	b944 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    653a:	f1b9 0f00 	cmp.w	r9, #0
    653e:	d104      	bne.n	654a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d2>
    6540:	78e1      	ldrb	r1, [r4, #3]
    6542:	2001      	movs	r0, #1
    6544:	f7ff fef4 	bl	6330 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb8>
    6548:	b1a0      	cbz	r0, 6574 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2fc>
    654a:	f005 fead 	bl	c2a8 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
    654e:	f89d 0000 	ldrb.w	r0, [sp]
    6552:	b110      	cbz	r0, 655a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2e2>
    6554:	2000      	movs	r0, #0
    6556:	f7ff fe0d 	bl	6174 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    655a:	88a8      	ldrh	r0, [r5, #4]
    655c:	4642      	mov	r2, r8
    655e:	4639      	mov	r1, r7
    6560:	f7ff ff12 	bl	6388 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x110>
    6564:	b117      	cbz	r7, 656c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f4>
    6566:	70e6      	strb	r6, [r4, #3]
    6568:	f7ff febc 	bl	62e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    656c:	f000 f87c 	bl	6668 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f0>
    6570:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6574:	f89d 0000 	ldrb.w	r0, [sp]
    6578:	b110      	cbz	r0, 6580 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x308>
    657a:	2001      	movs	r0, #1
    657c:	f7ff fdfa 	bl	6174 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    6580:	2000      	movs	r0, #0
    6582:	f000 f98d 	bl	68a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x628>
    6586:	f89d 0000 	ldrb.w	r0, [sp]
    658a:	b110      	cbz	r0, 6592 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x31a>
    658c:	2002      	movs	r0, #2
    658e:	f7ff fdf1 	bl	6174 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    6592:	88a8      	ldrh	r0, [r5, #4]
    6594:	4642      	mov	r2, r8
    6596:	4639      	mov	r1, r7
    6598:	f7ff fef6 	bl	6388 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x110>
    659c:	2f00      	cmp	r7, #0
    659e:	d0e7      	beq.n	6570 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f8>
    65a0:	70e6      	strb	r6, [r4, #3]
    65a2:	f7ff fe9f 	bl	62e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    65a6:	e7e3      	b.n	6570 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f8>
    65a8:	200000cc 	.word	0x200000cc
    65ac:	20000b18 	.word	0x20000b18
    65b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    65b4:	460f      	mov	r7, r1
    65b6:	4680      	mov	r8, r0
    65b8:	f7ff fe88 	bl	62cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    65bc:	4d28      	ldr	r5, [pc, #160]	; (6660 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e8>)
    65be:	4604      	mov	r4, r0
    65c0:	7828      	ldrb	r0, [r5, #0]
    65c2:	2801      	cmp	r0, #1
    65c4:	d004      	beq.n	65d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x358>
    65c6:	f240 4169 	movw	r1, #1129	; 0x469
    65ca:	2027      	movs	r0, #39	; 0x27
    65cc:	f7fe fdd0 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    65d0:	7861      	ldrb	r1, [r4, #1]
    65d2:	2000      	movs	r0, #0
    65d4:	2601      	movs	r6, #1
    65d6:	b129      	cbz	r1, 65e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x36c>
    65d8:	7060      	strb	r0, [r4, #1]
    65da:	2100      	movs	r1, #0
    65dc:	2004      	movs	r0, #4
    65de:	f7ff fe67 	bl	62b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    65e2:	70e6      	strb	r6, [r4, #3]
    65e4:	6a29      	ldr	r1, [r5, #32]
    65e6:	7808      	ldrb	r0, [r1, #0]
    65e8:	43c0      	mvns	r0, r0
    65ea:	0780      	lsls	r0, r0, #30
    65ec:	d109      	bne.n	6602 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38a>
    65ee:	79a0      	ldrb	r0, [r4, #6]
    65f0:	bb78      	cbnz	r0, 6652 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3da>
    65f2:	2002      	movs	r0, #2
    65f4:	f7ff fe5c 	bl	62b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    65f8:	6a28      	ldr	r0, [r5, #32]
    65fa:	7800      	ldrb	r0, [r0, #0]
    65fc:	43c0      	mvns	r0, r0
    65fe:	0780      	lsls	r0, r0, #30
    6600:	d027      	beq.n	6652 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3da>
    6602:	6a28      	ldr	r0, [r5, #32]
    6604:	7840      	ldrb	r0, [r0, #1]
    6606:	b110      	cbz	r0, 660e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x396>
    6608:	2002      	movs	r0, #2
    660a:	71a0      	strb	r0, [r4, #6]
    660c:	e000      	b.n	6610 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x398>
    660e:	71a6      	strb	r6, [r4, #6]
    6610:	7ce0      	ldrb	r0, [r4, #19]
    6612:	b190      	cbz	r0, 663a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3c2>
    6614:	f7ff fe54 	bl	62c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    6618:	4912      	ldr	r1, [pc, #72]	; (6664 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3ec>)
    661a:	7a6d      	ldrb	r5, [r5, #9]
    661c:	760e      	strb	r6, [r1, #24]
    661e:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
    6622:	e9c1 2304 	strd	r2, r3, [r1, #16]
    6626:	f890 006f 	ldrb.w	r0, [r0, #111]	; 0x6f
    662a:	f008 f9ea 	bl	ea02 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    662e:	4603      	mov	r3, r0
    6630:	462a      	mov	r2, r5
    6632:	490c      	ldr	r1, [pc, #48]	; (6664 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3ec>)
    6634:	4630      	mov	r0, r6
    6636:	f005 f985 	bl	b944 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    663a:	ea37 0708 	bics.w	r7, r7, r8
    663e:	d004      	beq.n	664a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d2>
    6640:	2100      	movs	r1, #0
    6642:	4608      	mov	r0, r1
    6644:	f7ff fe74 	bl	6330 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb8>
    6648:	b128      	cbz	r0, 6656 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3de>
    664a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    664e:	f000 b80b 	b.w	6668 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f0>
    6652:	2003      	movs	r0, #3
    6654:	e7d9      	b.n	660a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x392>
    6656:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    665a:	2000      	movs	r0, #0
    665c:	f000 b8e4 	b.w	6828 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5b0>
    6660:	200000cc 	.word	0x200000cc
    6664:	20000b18 	.word	0x20000b18
    6668:	b510      	push	{r4, lr}
    666a:	f005 fad7 	bl	bc1c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    666e:	f005 f9fd 	bl	ba6c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    6672:	4c0c      	ldr	r4, [pc, #48]	; (66a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x42c>)
    6674:	89e0      	ldrh	r0, [r4, #14]
    6676:	f7ff fe2f 	bl	62d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    667a:	69e2      	ldr	r2, [r4, #28]
    667c:	7961      	ldrb	r1, [r4, #5]
    667e:	78a0      	ldrb	r0, [r4, #2]
    6680:	4790      	blx	r2
    6682:	4809      	ldr	r0, [pc, #36]	; (66a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x430>)
    6684:	7f40      	ldrb	r0, [r0, #29]
    6686:	b150      	cbz	r0, 669e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x426>
    6688:	4907      	ldr	r1, [pc, #28]	; (66a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x430>)
    668a:	220e      	movs	r2, #14
    668c:	f101 000e 	add.w	r0, r1, #14
    6690:	f006 ff56 	bl	d540 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6694:	4804      	ldr	r0, [pc, #16]	; (66a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x430>)
    6696:	21ff      	movs	r1, #255	; 0xff
    6698:	7701      	strb	r1, [r0, #28]
    669a:	f000 fe9f 	bl	73dc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    669e:	2000      	movs	r0, #0
    66a0:	7020      	strb	r0, [r4, #0]
    66a2:	bd10      	pop	{r4, pc}
    66a4:	200000cc 	.word	0x200000cc
    66a8:	20000b62 	.word	0x20000b62
    66ac:	4808      	ldr	r0, [pc, #32]	; (66d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x458>)
    66ae:	b510      	push	{r4, lr}
    66b0:	7800      	ldrb	r0, [r0, #0]
    66b2:	2802      	cmp	r0, #2
    66b4:	d004      	beq.n	66c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x448>
    66b6:	f44f 7108 	mov.w	r1, #544	; 0x220
    66ba:	2027      	movs	r0, #39	; 0x27
    66bc:	f7fe fd58 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    66c0:	4904      	ldr	r1, [pc, #16]	; (66d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x45c>)
    66c2:	2001      	movs	r0, #1
    66c4:	7308      	strb	r0, [r1, #12]
    66c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    66ca:	f7ff bfcd 	b.w	6668 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f0>
    66ce:	0000      	.short	0x0000
    66d0:	200000cc 	.word	0x200000cc
    66d4:	20000b62 	.word	0x20000b62
    66d8:	4b0c      	ldr	r3, [pc, #48]	; (670c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x494>)
    66da:	b430      	push	{r4, r5}
    66dc:	79db      	ldrb	r3, [r3, #7]
    66de:	b93a      	cbnz	r2, 66f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x478>
    66e0:	2bff      	cmp	r3, #255	; 0xff
    66e2:	d105      	bne.n	66f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x478>
    66e4:	f890 206f 	ldrb.w	r2, [r0, #111]	; 0x6f
    66e8:	f890 406e 	ldrb.w	r4, [r0, #110]	; 0x6e
    66ec:	42a2      	cmp	r2, r4
    66ee:	d00a      	beq.n	6706 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48e>
    66f0:	b129      	cbz	r1, 66fe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x486>
    66f2:	f890 106f 	ldrb.w	r1, [r0, #111]	; 0x6f
    66f6:	bc30      	pop	{r4, r5}
    66f8:	4618      	mov	r0, r3
    66fa:	f005 bdfd 	b.w	c2f8 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    66fe:	23ff      	movs	r3, #255	; 0xff
    6700:	f890 106e 	ldrb.w	r1, [r0, #110]	; 0x6e
    6704:	e7f7      	b.n	66f6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x47e>
    6706:	bc30      	pop	{r4, r5}
    6708:	4770      	bx	lr
    670a:	0000      	.short	0x0000
    670c:	200000cc 	.word	0x200000cc
    6710:	b570      	push	{r4, r5, r6, lr}
    6712:	4606      	mov	r6, r0
    6714:	f7ff fdda 	bl	62cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    6718:	4a1b      	ldr	r2, [pc, #108]	; (6788 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x510>)
    671a:	4604      	mov	r4, r0
    671c:	2501      	movs	r5, #1
    671e:	6a51      	ldr	r1, [r2, #36]	; 0x24
    6720:	7808      	ldrb	r0, [r1, #0]
    6722:	f000 0003 	and.w	r0, r0, #3
    6726:	2801      	cmp	r0, #1
    6728:	d00c      	beq.n	6744 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4cc>
    672a:	2802      	cmp	r0, #2
    672c:	d00a      	beq.n	6744 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4cc>
    672e:	2803      	cmp	r0, #3
    6730:	d121      	bne.n	6776 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4fe>
    6732:	7065      	strb	r5, [r4, #1]
    6734:	89d0      	ldrh	r0, [r2, #14]
    6736:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    673a:	81d0      	strh	r0, [r2, #14]
    673c:	2001      	movs	r0, #1
    673e:	f7ff fdb7 	bl	62b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    6742:	e018      	b.n	6776 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4fe>
    6744:	7848      	ldrb	r0, [r1, #1]
    6746:	b1b0      	cbz	r0, 6776 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4fe>
    6748:	89d1      	ldrh	r1, [r2, #14]
    674a:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    674e:	81d1      	strh	r1, [r2, #14]
    6750:	6a91      	ldr	r1, [r2, #40]	; 0x28
    6752:	2900      	cmp	r1, #0
    6754:	d009      	beq.n	676a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4f2>
    6756:	28fb      	cmp	r0, #251	; 0xfb
    6758:	d808      	bhi.n	676c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4f4>
    675a:	7990      	ldrb	r0, [r2, #6]
    675c:	b120      	cbz	r0, 6768 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4f0>
    675e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6762:	2020      	movs	r0, #32
    6764:	f7ff bdb8 	b.w	62d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    6768:	7035      	strb	r5, [r6, #0]
    676a:	bd70      	pop	{r4, r5, r6, pc}
    676c:	7950      	ldrb	r0, [r2, #5]
    676e:	f040 0010 	orr.w	r0, r0, #16
    6772:	7150      	strb	r0, [r2, #5]
    6774:	bd70      	pop	{r4, r5, r6, pc}
    6776:	7a20      	ldrb	r0, [r4, #8]
    6778:	2801      	cmp	r0, #1
    677a:	d001      	beq.n	6780 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x508>
    677c:	7225      	strb	r5, [r4, #8]
    677e:	bd70      	pop	{r4, r5, r6, pc}
    6780:	2000      	movs	r0, #0
    6782:	7220      	strb	r0, [r4, #8]
    6784:	bd70      	pop	{r4, r5, r6, pc}
    6786:	0000      	.short	0x0000
    6788:	200000cc 	.word	0x200000cc
    678c:	b538      	push	{r3, r4, r5, lr}
    678e:	f7ff fd9d 	bl	62cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    6792:	4604      	mov	r4, r0
    6794:	7980      	ldrb	r0, [r0, #6]
    6796:	2800      	cmp	r0, #0
    6798:	d02f      	beq.n	67fa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x582>
    679a:	2802      	cmp	r0, #2
    679c:	d10e      	bne.n	67bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x544>
    679e:	481c      	ldr	r0, [pc, #112]	; (6810 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x598>)
    67a0:	4669      	mov	r1, sp
    67a2:	6b00      	ldr	r0, [r0, #48]	; 0x30
    67a4:	f007 fc68 	bl	e078 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    67a8:	b340      	cbz	r0, 67fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x584>
    67aa:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    67ae:	1c40      	adds	r0, r0, #1
    67b0:	f141 0100 	adc.w	r1, r1, #0
    67b4:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    67b8:	f000 fe10 	bl	73dc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    67bc:	2500      	movs	r5, #0
    67be:	71a5      	strb	r5, [r4, #6]
    67c0:	78e0      	ldrb	r0, [r4, #3]
    67c2:	b120      	cbz	r0, 67ce <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x556>
    67c4:	70e5      	strb	r5, [r4, #3]
    67c6:	2100      	movs	r1, #0
    67c8:	2010      	movs	r0, #16
    67ca:	f7ff fd71 	bl	62b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    67ce:	78a0      	ldrb	r0, [r4, #2]
    67d0:	b170      	cbz	r0, 67f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x578>
    67d2:	70a5      	strb	r5, [r4, #2]
    67d4:	f7ff fafc 	bl	5dd0 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    67d8:	b198      	cbz	r0, 6802 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x58a>
    67da:	2100      	movs	r1, #0
    67dc:	2008      	movs	r0, #8
    67de:	f7ff fd67 	bl	62b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    67e2:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    67e6:	1c40      	adds	r0, r0, #1
    67e8:	f141 0100 	adc.w	r1, r1, #0
    67ec:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    67f0:	79e0      	ldrb	r0, [r4, #7]
    67f2:	2801      	cmp	r0, #1
    67f4:	d00a      	beq.n	680c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x594>
    67f6:	2001      	movs	r0, #1
    67f8:	71e0      	strb	r0, [r4, #7]
    67fa:	bd38      	pop	{r3, r4, r5, pc}
    67fc:	f240 31af 	movw	r1, #943	; 0x3af
    6800:	e001      	b.n	6806 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x58e>
    6802:	f240 31c7 	movw	r1, #967	; 0x3c7
    6806:	2027      	movs	r0, #39	; 0x27
    6808:	f7fe fcb2 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    680c:	71e5      	strb	r5, [r4, #7]
    680e:	bd38      	pop	{r3, r4, r5, pc}
    6810:	200000cc 	.word	0x200000cc
    6814:	4803      	ldr	r0, [pc, #12]	; (6824 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5ac>)
    6816:	7800      	ldrb	r0, [r0, #0]
    6818:	2800      	cmp	r0, #0
    681a:	d001      	beq.n	6820 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5a8>
    681c:	f7ff bf24 	b.w	6668 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f0>
    6820:	4770      	bx	lr
    6822:	0000      	.short	0x0000
    6824:	200000cc 	.word	0x200000cc
    6828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    682c:	4606      	mov	r6, r0
    682e:	f7ff fd47 	bl	62c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    6832:	4680      	mov	r8, r0
    6834:	f7ff fd4a 	bl	62cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    6838:	4c16      	ldr	r4, [pc, #88]	; (6894 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x61c>)
    683a:	4605      	mov	r5, r0
    683c:	4632      	mov	r2, r6
    683e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    6840:	6260      	str	r0, [r4, #36]	; 0x24
    6842:	2101      	movs	r1, #1
    6844:	4640      	mov	r0, r8
    6846:	f7ff ff47 	bl	66d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x460>
    684a:	7ce8      	ldrb	r0, [r5, #19]
    684c:	2700      	movs	r7, #0
    684e:	b170      	cbz	r0, 686e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5f6>
    6850:	4811      	ldr	r0, [pc, #68]	; (6898 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x620>)
    6852:	f005 fc7f 	bl	c154 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6856:	4811      	ldr	r0, [pc, #68]	; (689c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x624>)
    6858:	2101      	movs	r1, #1
    685a:	7601      	strb	r1, [r0, #24]
    685c:	e9d5 1218 	ldrd	r1, r2, [r5, #96]	; 0x60
    6860:	e9c0 1204 	strd	r1, r2, [r0, #16]
    6864:	490c      	ldr	r1, [pc, #48]	; (6898 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x620>)
    6866:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6868:	f005 f8be 	bl	b9e8 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    686c:	e004      	b.n	6878 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x600>
    686e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6870:	f005 fc70 	bl	c154 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6874:	f005 f8fa 	bl	ba6c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    6878:	b916      	cbnz	r6, 6880 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x608>
    687a:	4638      	mov	r0, r7
    687c:	f005 fb0e 	bl	be9c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    6880:	2100      	movs	r1, #0
    6882:	f898 206e 	ldrb.w	r2, [r8, #110]	; 0x6e
    6886:	4608      	mov	r0, r1
    6888:	f005 fcf0 	bl	c26c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    688c:	2002      	movs	r0, #2
    688e:	7020      	strb	r0, [r4, #0]
    6890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6894:	200000cc 	.word	0x200000cc
    6898:	20000a10 	.word	0x20000a10
    689c:	20000b18 	.word	0x20000b18
    68a0:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    68a4:	4604      	mov	r4, r0
    68a6:	f7ff fd11 	bl	62cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    68aa:	4605      	mov	r5, r0
    68ac:	f7ff fd08 	bl	62c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    68b0:	2700      	movs	r7, #0
    68b2:	4606      	mov	r6, r0
    68b4:	f8df 9164 	ldr.w	r9, [pc, #356]	; 6a1c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7a4>
    68b8:	f88d 7000 	strb.w	r7, [sp]
    68bc:	4622      	mov	r2, r4
    68be:	4639      	mov	r1, r7
    68c0:	f7ff ff0a 	bl	66d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x460>
    68c4:	79a8      	ldrb	r0, [r5, #6]
    68c6:	f04f 0801 	mov.w	r8, #1
    68ca:	f1a9 0420 	sub.w	r4, r9, #32
    68ce:	b140      	cbz	r0, 68e2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x66a>
    68d0:	2801      	cmp	r0, #1
    68d2:	d020      	beq.n	6916 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x69e>
    68d4:	2802      	cmp	r0, #2
    68d6:	d02f      	beq.n	6938 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c0>
    68d8:	2803      	cmp	r0, #3
    68da:	d03b      	beq.n	6954 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6dc>
    68dc:	f240 21cb 	movw	r1, #715	; 0x2cb
    68e0:	e057      	b.n	6992 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x71a>
    68e2:	7a20      	ldrb	r0, [r4, #8]
    68e4:	2154      	movs	r1, #84	; 0x54
    68e6:	f8ad 0004 	strh.w	r0, [sp, #4]
    68ea:	5388      	strh	r0, [r1, r6]
    68ec:	4648      	mov	r0, r9
    68ee:	f7ff fa99 	bl	5e24 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    68f2:	b130      	cbz	r0, 6902 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68a>
    68f4:	2080      	movs	r0, #128	; 0x80
    68f6:	6a21      	ldr	r1, [r4, #32]
    68f8:	f7ff fcda 	bl	62b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    68fc:	f885 8002 	strb.w	r8, [r5, #2]
    6900:	e02c      	b.n	695c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6e4>
    6902:	466a      	mov	r2, sp
    6904:	a901      	add	r1, sp, #4
    6906:	6b20      	ldr	r0, [r4, #48]	; 0x30
    6908:	f008 f893 	bl	ea32 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    690c:	6220      	str	r0, [r4, #32]
    690e:	b110      	cbz	r0, 6916 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x69e>
    6910:	f895 1043 	ldrb.w	r1, [r5, #67]	; 0x43
    6914:	b111      	cbz	r1, 691c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a4>
    6916:	4842      	ldr	r0, [pc, #264]	; (6a20 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7a8>)
    6918:	6220      	str	r0, [r4, #32]
    691a:	e01f      	b.n	695c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6e4>
    691c:	f89d 1000 	ldrb.w	r1, [sp]
    6920:	b921      	cbnz	r1, 692c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6b4>
    6922:	8007      	strh	r7, [r0, #0]
    6924:	7087      	strb	r7, [r0, #2]
    6926:	2101      	movs	r1, #1
    6928:	f008 fbd2 	bl	f0d0 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    692c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    6930:	6a20      	ldr	r0, [r4, #32]
    6932:	f008 fb91 	bl	f058 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>
    6936:	e011      	b.n	695c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6e4>
    6938:	f8b6 0054 	ldrh.w	r0, [r6, #84]	; 0x54
    693c:	f8ad 0004 	strh.w	r0, [sp, #4]
    6940:	466a      	mov	r2, sp
    6942:	a901      	add	r1, sp, #4
    6944:	6b20      	ldr	r0, [r4, #48]	; 0x30
    6946:	f008 f874 	bl	ea32 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    694a:	6220      	str	r0, [r4, #32]
    694c:	b930      	cbnz	r0, 695c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6e4>
    694e:	f44f 712f 	mov.w	r1, #700	; 0x2bc
    6952:	e01e      	b.n	6992 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x71a>
    6954:	4648      	mov	r0, r9
    6956:	f7ff fa65 	bl	5e24 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    695a:	b1c0      	cbz	r0, 698e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x716>
    695c:	6a20      	ldr	r0, [r4, #32]
    695e:	2308      	movs	r3, #8
    6960:	7801      	ldrb	r1, [r0, #0]
    6962:	f021 0108 	bic.w	r1, r1, #8
    6966:	7001      	strb	r1, [r0, #0]
    6968:	79ea      	ldrb	r2, [r5, #7]
    696a:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    696e:	4311      	orrs	r1, r2
    6970:	f021 0104 	bic.w	r1, r1, #4
    6974:	7001      	strb	r1, [r0, #0]
    6976:	7a2a      	ldrb	r2, [r5, #8]
    6978:	2304      	movs	r3, #4
    697a:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    697e:	4311      	orrs	r1, r2
    6980:	f021 0110 	bic.w	r1, r1, #16
    6984:	7001      	strb	r1, [r0, #0]
    6986:	43c9      	mvns	r1, r1
    6988:	0789      	lsls	r1, r1, #30
    698a:	d005      	beq.n	6998 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x720>
    698c:	e007      	b.n	699e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x726>
    698e:	f240 21c5 	movw	r1, #709	; 0x2c5
    6992:	2027      	movs	r0, #39	; 0x27
    6994:	f7fe fbec 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6998:	78c0      	ldrb	r0, [r0, #3]
    699a:	2802      	cmp	r0, #2
    699c:	d00f      	beq.n	69be <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x746>
    699e:	6b20      	ldr	r0, [r4, #48]	; 0x30
    69a0:	f007 fc96 	bl	e2d0 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    69a4:	b108      	cbz	r0, 69aa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x732>
    69a6:	2101      	movs	r1, #1
    69a8:	e00a      	b.n	69c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x748>
    69aa:	6a20      	ldr	r0, [r4, #32]
    69ac:	7800      	ldrb	r0, [r0, #0]
    69ae:	43c0      	mvns	r0, r0
    69b0:	0780      	lsls	r0, r0, #30
    69b2:	d004      	beq.n	69be <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x746>
    69b4:	f7ff f9f4 	bl	5da0 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    69b8:	f080 0101 	eor.w	r1, r0, #1
    69bc:	e000      	b.n	69c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x748>
    69be:	2100      	movs	r1, #0
    69c0:	6a20      	ldr	r0, [r4, #32]
    69c2:	7802      	ldrb	r2, [r0, #0]
    69c4:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    69c8:	7001      	strb	r1, [r0, #0]
    69ca:	7ca9      	ldrb	r1, [r5, #18]
    69cc:	b181      	cbz	r1, 69f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x778>
    69ce:	7841      	ldrb	r1, [r0, #1]
    69d0:	b171      	cbz	r1, 69f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x778>
    69d2:	4814      	ldr	r0, [pc, #80]	; (6a24 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7ac>)
    69d4:	f005 fbbe 	bl	c154 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    69d8:	4811      	ldr	r0, [pc, #68]	; (6a20 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7a8>)
    69da:	3828      	subs	r0, #40	; 0x28
    69dc:	7607      	strb	r7, [r0, #24]
    69de:	e9d5 1216 	ldrd	r1, r2, [r5, #88]	; 0x58
    69e2:	e9c0 1204 	strd	r1, r2, [r0, #16]
    69e6:	480f      	ldr	r0, [pc, #60]	; (6a24 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7ac>)
    69e8:	6a21      	ldr	r1, [r4, #32]
    69ea:	f004 fffd 	bl	b9e8 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    69ee:	e003      	b.n	69f8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x780>
    69f0:	f005 fbb0 	bl	c154 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    69f4:	f005 f83a 	bl	ba6c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    69f8:	f896 206f 	ldrb.w	r2, [r6, #111]	; 0x6f
    69fc:	2101      	movs	r1, #1
    69fe:	2000      	movs	r0, #0
    6a00:	f005 fc34 	bl	c26c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    6a04:	f884 8004 	strb.w	r8, [r4, #4]
    6a08:	6a21      	ldr	r1, [r4, #32]
    6a0a:	880a      	ldrh	r2, [r1, #0]
    6a0c:	8222      	strh	r2, [r4, #16]
    6a0e:	7889      	ldrb	r1, [r1, #2]
    6a10:	74a1      	strb	r1, [r4, #18]
    6a12:	f884 8000 	strb.w	r8, [r4]
    6a16:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    6a1a:	0000      	.short	0x0000
    6a1c:	200000ec 	.word	0x200000ec
    6a20:	20000b40 	.word	0x20000b40
    6a24:	20000a10 	.word	0x20000a10
    6a28:	000066ad 	.word	0x000066ad
    6a2c:	00006445 	.word	0x00006445
    6a30:	000065b1 	.word	0x000065b1
    6a34:	00006815 	.word	0x00006815

00006a38 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    6a38:	4800      	ldr	r0, [pc, #0]	; (6a3c <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    6a3a:	4770      	bx	lr
    6a3c:	2000140d 	.word	0x2000140d

00006a40 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    6a40:	4904      	ldr	r1, [pc, #16]	; (6a54 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    6a42:	788a      	ldrb	r2, [r1, #2]
    6a44:	4282      	cmp	r2, r0
    6a46:	d903      	bls.n	6a50 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    6a48:	4408      	add	r0, r1
    6a4a:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    6a4e:	4770      	bx	lr
    6a50:	2000      	movs	r0, #0
    6a52:	4770      	bx	lr
    6a54:	2000123a 	.word	0x2000123a

00006a58 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    6a58:	4904      	ldr	r1, [pc, #16]	; (6a6c <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    6a5a:	788a      	ldrb	r2, [r1, #2]
    6a5c:	4282      	cmp	r2, r0
    6a5e:	d903      	bls.n	6a68 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    6a60:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    6a64:	3083      	adds	r0, #131	; 0x83
    6a66:	4770      	bx	lr
    6a68:	2000      	movs	r0, #0
    6a6a:	4770      	bx	lr
    6a6c:	2000123a 	.word	0x2000123a

00006a70 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    6a70:	4a05      	ldr	r2, [pc, #20]	; (6a88 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    6a72:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    6a76:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    6a7a:	6802      	ldr	r2, [r0, #0]
    6a7c:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    6a80:	8880      	ldrh	r0, [r0, #4]
    6a82:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    6a86:	4770      	bx	lr
    6a88:	2000123a 	.word	0x2000123a

00006a8c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>:
    6a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6a90:	460e      	mov	r6, r1
    6a92:	4607      	mov	r7, r0
    6a94:	4615      	mov	r5, r2
    6a96:	2106      	movs	r1, #6
    6a98:	4630      	mov	r0, r6
    6a9a:	f008 f9b9 	bl	ee10 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    6a9e:	4c0d      	ldr	r4, [pc, #52]	; (6ad4 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x48>)
    6aa0:	b160      	cbz	r0, 6abc <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x30>
    6aa2:	2000      	movs	r0, #0
    6aa4:	e004      	b.n	6ab0 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x24>
    6aa6:	1821      	adds	r1, r4, r0
    6aa8:	1c40      	adds	r0, r0, #1
    6aaa:	f881 513b 	strb.w	r5, [r1, #315]	; 0x13b
    6aae:	b2c0      	uxtb	r0, r0
    6ab0:	78a1      	ldrb	r1, [r4, #2]
    6ab2:	4281      	cmp	r1, r0
    6ab4:	d8f7      	bhi.n	6aa6 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x1a>
    6ab6:	2001      	movs	r0, #1
    6ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6abc:	4631      	mov	r1, r6
    6abe:	4638      	mov	r0, r7
    6ac0:	f007 ffc6 	bl	ea50 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    6ac4:	2808      	cmp	r0, #8
    6ac6:	d003      	beq.n	6ad0 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x44>
    6ac8:	4420      	add	r0, r4
    6aca:	f880 513b 	strb.w	r5, [r0, #315]	; 0x13b
    6ace:	e7f2      	b.n	6ab6 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2a>
    6ad0:	2000      	movs	r0, #0
    6ad2:	e7f1      	b.n	6ab8 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2c>
    6ad4:	2000123a 	.word	0x2000123a

00006ad8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    6ad8:	4904      	ldr	r1, [pc, #16]	; (6aec <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    6ada:	788a      	ldrb	r2, [r1, #2]
    6adc:	4282      	cmp	r2, r0
    6ade:	d903      	bls.n	6ae8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    6ae0:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    6ae4:	1cc0      	adds	r0, r0, #3
    6ae6:	4770      	bx	lr
    6ae8:	2000      	movs	r0, #0
    6aea:	4770      	bx	lr
    6aec:	2000123a 	.word	0x2000123a

00006af0 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    6af0:	b510      	push	{r4, lr}
    6af2:	f240 12d3 	movw	r2, #467	; 0x1d3
    6af6:	2100      	movs	r1, #0
    6af8:	4808      	ldr	r0, [pc, #32]	; (6b1c <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    6afa:	f006 fd9b 	bl	d634 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6afe:	2208      	movs	r2, #8
    6b00:	21ff      	movs	r1, #255	; 0xff
    6b02:	4807      	ldr	r0, [pc, #28]	; (6b20 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    6b04:	f006 fd96 	bl	d634 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6b08:	4805      	ldr	r0, [pc, #20]	; (6b20 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    6b0a:	2100      	movs	r1, #0
    6b0c:	1f00      	subs	r0, r0, #4
    6b0e:	7001      	strb	r1, [r0, #0]
    6b10:	7041      	strb	r1, [r0, #1]
    6b12:	f44f 7161 	mov.w	r1, #900	; 0x384
    6b16:	8041      	strh	r1, [r0, #2]
    6b18:	bd10      	pop	{r4, pc}
    6b1a:	0000      	.short	0x0000
    6b1c:	2000123a 	.word	0x2000123a
    6b20:	200002a0 	.word	0x200002a0

00006b24 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>:
    6b24:	4901      	ldr	r1, [pc, #4]	; (6b2c <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA+0x8>)
    6b26:	7008      	strb	r0, [r1, #0]
    6b28:	4770      	bx	lr
    6b2a:	0000      	.short	0x0000
    6b2c:	2000029c 	.word	0x2000029c

00006b30 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>:
    6b30:	4801      	ldr	r0, [pc, #4]	; (6b38 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY+0x8>)
    6b32:	7800      	ldrb	r0, [r0, #0]
    6b34:	4770      	bx	lr
    6b36:	0000      	.short	0x0000
    6b38:	2000029c 	.word	0x2000029c

00006b3c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    6b3c:	4b0b      	ldr	r3, [pc, #44]	; (6b6c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    6b3e:	b510      	push	{r4, lr}
    6b40:	789c      	ldrb	r4, [r3, #2]
    6b42:	4284      	cmp	r4, r0
    6b44:	d90f      	bls.n	6b66 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2a>
    6b46:	4418      	add	r0, r3
    6b48:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    6b4c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    6b50:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    6b54:	700b      	strb	r3, [r1, #0]
    6b56:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    6b5a:	6011      	str	r1, [r2, #0]
    6b5c:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    6b60:	8090      	strh	r0, [r2, #4]
    6b62:	2001      	movs	r0, #1
    6b64:	bd10      	pop	{r4, pc}
    6b66:	2000      	movs	r0, #0
    6b68:	bd10      	pop	{r4, pc}
    6b6a:	0000      	.short	0x0000
    6b6c:	2000123a 	.word	0x2000123a

00006b70 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    6b70:	4907      	ldr	r1, [pc, #28]	; (6b90 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    6b72:	788a      	ldrb	r2, [r1, #2]
    6b74:	4282      	cmp	r2, r0
    6b76:	d909      	bls.n	6b8c <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x1c>
    6b78:	4408      	add	r0, r1
    6b7a:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    6b7e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    6b82:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    6b86:	f000 0001 	and.w	r0, r0, #1
    6b8a:	4770      	bx	lr
    6b8c:	2000      	movs	r0, #0
    6b8e:	4770      	bx	lr
    6b90:	2000123a 	.word	0x2000123a

00006b94 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>:
    6b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6b98:	4698      	mov	r8, r3
    6b9a:	4691      	mov	r9, r2
    6b9c:	460c      	mov	r4, r1
    6b9e:	4605      	mov	r5, r0
    6ba0:	f000 f936 	bl	6e10 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    6ba4:	4606      	mov	r6, r0
    6ba6:	2810      	cmp	r0, #16
    6ba8:	d006      	beq.n	6bb8 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    6baa:	f000 f901 	bl	6db0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    6bae:	2810      	cmp	r0, #16
    6bb0:	d002      	beq.n	6bb8 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    6bb2:	2012      	movs	r0, #18
    6bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6bb8:	4f18      	ldr	r7, [pc, #96]	; (6c1c <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x88>)
    6bba:	78b8      	ldrb	r0, [r7, #2]
    6bbc:	2808      	cmp	r0, #8
    6bbe:	d22a      	bcs.n	6c16 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x82>
    6bc0:	2e10      	cmp	r6, #16
    6bc2:	d105      	bne.n	6bd0 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x3c>
    6bc4:	2200      	movs	r2, #0
    6bc6:	4621      	mov	r1, r4
    6bc8:	4628      	mov	r0, r5
    6bca:	f000 f905 	bl	6dd8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    6bce:	4606      	mov	r6, r0
    6bd0:	78bc      	ldrb	r4, [r7, #2]
    6bd2:	2210      	movs	r2, #16
    6bd4:	1c60      	adds	r0, r4, #1
    6bd6:	70b8      	strb	r0, [r7, #2]
    6bd8:	eb07 1504 	add.w	r5, r7, r4, lsl #4
    6bdc:	1ce8      	adds	r0, r5, #3
    6bde:	4649      	mov	r1, r9
    6be0:	f008 f87f 	bl	ece2 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    6be4:	f105 0083 	add.w	r0, r5, #131	; 0x83
    6be8:	2210      	movs	r2, #16
    6bea:	4641      	mov	r1, r8
    6bec:	f008 f879 	bl	ece2 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    6bf0:	2110      	movs	r1, #16
    6bf2:	4640      	mov	r0, r8
    6bf4:	f008 f90c 	bl	ee10 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    6bf8:	443c      	add	r4, r7
    6bfa:	2110      	movs	r1, #16
    6bfc:	f884 0143 	strb.w	r0, [r4, #323]	; 0x143
    6c00:	4648      	mov	r0, r9
    6c02:	f504 7496 	add.w	r4, r4, #300	; 0x12c
    6c06:	f008 f903 	bl	ee10 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    6c0a:	77e0      	strb	r0, [r4, #31]
    6c0c:	f804 6c29 	strb.w	r6, [r4, #-41]
    6c10:	2000      	movs	r0, #0
    6c12:	73e0      	strb	r0, [r4, #15]
    6c14:	e7ce      	b.n	6bb4 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    6c16:	2007      	movs	r0, #7
    6c18:	e7cc      	b.n	6bb4 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    6c1a:	0000      	.short	0x0000
    6c1c:	2000123a 	.word	0x2000123a

00006c20 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>:
    6c20:	4806      	ldr	r0, [pc, #24]	; (6c3c <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x1c>)
    6c22:	b510      	push	{r4, lr}
    6c24:	7880      	ldrb	r0, [r0, #2]
    6c26:	1e40      	subs	r0, r0, #1
    6c28:	b244      	sxtb	r4, r0
    6c2a:	e004      	b.n	6c36 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x16>
    6c2c:	b2e0      	uxtb	r0, r4
    6c2e:	f000 f935 	bl	6e9c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x190>
    6c32:	1e64      	subs	r4, r4, #1
    6c34:	b264      	sxtb	r4, r4
    6c36:	2c00      	cmp	r4, #0
    6c38:	daf8      	bge.n	6c2c <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xc>
    6c3a:	bd10      	pop	{r4, pc}
    6c3c:	2000123a 	.word	0x2000123a

00006c40 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    6c40:	4801      	ldr	r0, [pc, #4]	; (6c48 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    6c42:	8840      	ldrh	r0, [r0, #2]
    6c44:	4770      	bx	lr
    6c46:	0000      	.short	0x0000
    6c48:	2000029c 	.word	0x2000029c

00006c4c <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>:
    6c4c:	b138      	cbz	r0, 6c5e <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    6c4e:	f24a 11b8 	movw	r1, #41400	; 0xa1b8
    6c52:	4288      	cmp	r0, r1
    6c54:	d803      	bhi.n	6c5e <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    6c56:	4903      	ldr	r1, [pc, #12]	; (6c64 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x18>)
    6c58:	8048      	strh	r0, [r1, #2]
    6c5a:	2001      	movs	r0, #1
    6c5c:	4770      	bx	lr
    6c5e:	2000      	movs	r0, #0
    6c60:	4770      	bx	lr
    6c62:	0000      	.short	0x0000
    6c64:	2000029c 	.word	0x2000029c

00006c68 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
    6c68:	4905      	ldr	r1, [pc, #20]	; (6c80 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x18>)
    6c6a:	788a      	ldrb	r2, [r1, #2]
    6c6c:	4282      	cmp	r2, r0
    6c6e:	d903      	bls.n	6c78 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x10>
    6c70:	4408      	add	r0, r1
    6c72:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    6c76:	b108      	cbz	r0, 6c7c <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x14>
    6c78:	2000      	movs	r0, #0
    6c7a:	4770      	bx	lr
    6c7c:	2001      	movs	r0, #1
    6c7e:	4770      	bx	lr
    6c80:	2000123a 	.word	0x2000123a

00006c84 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    6c84:	b570      	push	{r4, r5, r6, lr}
    6c86:	460d      	mov	r5, r1
    6c88:	4606      	mov	r6, r0
    6c8a:	f000 f8c1 	bl	6e10 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    6c8e:	4c10      	ldr	r4, [pc, #64]	; (6cd0 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x4c>)
    6c90:	2810      	cmp	r0, #16
    6c92:	d007      	beq.n	6ca4 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    6c94:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
    6c98:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    6c9c:	07c9      	lsls	r1, r1, #31
    6c9e:	d001      	beq.n	6ca4 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    6ca0:	2001      	movs	r0, #1
    6ca2:	bd70      	pop	{r4, r5, r6, pc}
    6ca4:	7861      	ldrb	r1, [r4, #1]
    6ca6:	2908      	cmp	r1, #8
    6ca8:	d210      	bcs.n	6ccc <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x48>
    6caa:	2810      	cmp	r0, #16
    6cac:	d008      	beq.n	6cc0 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3c>
    6cae:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    6cb2:	2101      	movs	r1, #1
    6cb4:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    6cb8:	7860      	ldrb	r0, [r4, #1]
    6cba:	1c40      	adds	r0, r0, #1
    6cbc:	7060      	strb	r0, [r4, #1]
    6cbe:	e7ef      	b.n	6ca0 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x1c>
    6cc0:	2201      	movs	r2, #1
    6cc2:	4629      	mov	r1, r5
    6cc4:	4630      	mov	r0, r6
    6cc6:	f000 f887 	bl	6dd8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    6cca:	e7f5      	b.n	6cb8 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x34>
    6ccc:	2000      	movs	r0, #0
    6cce:	bd70      	pop	{r4, r5, r6, pc}
    6cd0:	2000123a 	.word	0x2000123a

00006cd4 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    6cd4:	b570      	push	{r4, r5, r6, lr}
    6cd6:	4d0b      	ldr	r5, [pc, #44]	; (6d04 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x30>)
    6cd8:	7828      	ldrb	r0, [r5, #0]
    6cda:	1e40      	subs	r0, r0, #1
    6cdc:	b244      	sxtb	r4, r0
    6cde:	e00a      	b.n	6cf6 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x22>
    6ce0:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    6ce4:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    6ce8:	07c0      	lsls	r0, r0, #31
    6cea:	d002      	beq.n	6cf2 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x1e>
    6cec:	b2e0      	uxtb	r0, r4
    6cee:	f000 f91d 	bl	6f2c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x220>
    6cf2:	1e64      	subs	r4, r4, #1
    6cf4:	b264      	sxtb	r4, r4
    6cf6:	2c00      	cmp	r4, #0
    6cf8:	daf2      	bge.n	6ce0 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xc>
    6cfa:	4903      	ldr	r1, [pc, #12]	; (6d08 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x34>)
    6cfc:	2000      	movs	r0, #0
    6cfe:	7048      	strb	r0, [r1, #1]
    6d00:	bd70      	pop	{r4, r5, r6, pc}
    6d02:	0000      	.short	0x0000
    6d04:	2000123a 	.word	0x2000123a
    6d08:	2000029c 	.word	0x2000029c

00006d0c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    6d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6d10:	2400      	movs	r4, #0
    6d12:	4625      	mov	r5, r4
    6d14:	4e18      	ldr	r6, [pc, #96]	; (6d78 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x6c>)
    6d16:	e029      	b.n	6d6c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x60>
    6d18:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
    6d1c:	f897 015a 	ldrb.w	r0, [r7, #346]	; 0x15a
    6d20:	07c0      	lsls	r0, r0, #31
    6d22:	d021      	beq.n	6d68 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    6d24:	4628      	mov	r0, r5
    6d26:	f000 f843 	bl	6db0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    6d2a:	4603      	mov	r3, r0
    6d2c:	f7ff fed4 	bl	6ad8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    6d30:	4601      	mov	r1, r0
    6d32:	2000      	movs	r0, #0
    6d34:	2b10      	cmp	r3, #16
    6d36:	d009      	beq.n	6d4c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    6d38:	18f2      	adds	r2, r6, r3
    6d3a:	f892 c13b 	ldrb.w	ip, [r2, #315]	; 0x13b
    6d3e:	f1bc 0f01 	cmp.w	ip, #1
    6d42:	d002      	beq.n	6d4a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x3e>
    6d44:	f892 214b 	ldrb.w	r2, [r2, #331]	; 0x14b
    6d48:	b102      	cbz	r2, 6d4c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    6d4a:	2001      	movs	r0, #1
    6d4c:	1e40      	subs	r0, r0, #1
    6d4e:	4201      	tst	r1, r0
    6d50:	d10a      	bne.n	6d68 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    6d52:	480a      	ldr	r0, [pc, #40]	; (6d7c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>)
    6d54:	f507 71aa 	add.w	r1, r7, #340	; 0x154
    6d58:	5503      	strb	r3, [r0, r4]
    6d5a:	4620      	mov	r0, r4
    6d5c:	1c64      	adds	r4, r4, #1
    6d5e:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
    6d62:	b2e4      	uxtb	r4, r4
    6d64:	f005 fbae 	bl	c4c4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    6d68:	1c6d      	adds	r5, r5, #1
    6d6a:	b2ed      	uxtb	r5, r5
    6d6c:	7830      	ldrb	r0, [r6, #0]
    6d6e:	42a8      	cmp	r0, r5
    6d70:	d8d2      	bhi.n	6d18 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc>
    6d72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6d76:	0000      	.short	0x0000
    6d78:	2000123a 	.word	0x2000123a
    6d7c:	200002a0 	.word	0x200002a0
    6d80:	4602      	mov	r2, r0
    6d82:	4809      	ldr	r0, [pc, #36]	; (6da8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9c>)
    6d84:	b510      	push	{r4, lr}
    6d86:	7800      	ldrb	r0, [r0, #0]
    6d88:	460b      	mov	r3, r1
    6d8a:	b158      	cbz	r0, 6da4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    6d8c:	4807      	ldr	r0, [pc, #28]	; (6dac <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    6d8e:	7881      	ldrb	r1, [r0, #2]
    6d90:	b141      	cbz	r1, 6da4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    6d92:	b10b      	cbz	r3, 6d98 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    6d94:	1cc0      	adds	r0, r0, #3
    6d96:	e001      	b.n	6d9c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x90>
    6d98:	4804      	ldr	r0, [pc, #16]	; (6dac <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    6d9a:	3083      	adds	r0, #131	; 0x83
    6d9c:	f004 fd2c 	bl	b7f8 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    6da0:	2001      	movs	r0, #1
    6da2:	bd10      	pop	{r4, pc}
    6da4:	2000      	movs	r0, #0
    6da6:	bd10      	pop	{r4, pc}
    6da8:	2000029c 	.word	0x2000029c
    6dac:	2000123a 	.word	0x2000123a
    6db0:	4908      	ldr	r1, [pc, #32]	; (6dd4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>)
    6db2:	b510      	push	{r4, lr}
    6db4:	4603      	mov	r3, r0
    6db6:	2000      	movs	r0, #0
    6db8:	788a      	ldrb	r2, [r1, #2]
    6dba:	e006      	b.n	6dca <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xbe>
    6dbc:	180c      	adds	r4, r1, r0
    6dbe:	f894 4103 	ldrb.w	r4, [r4, #259]	; 0x103
    6dc2:	429c      	cmp	r4, r3
    6dc4:	d004      	beq.n	6dd0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc4>
    6dc6:	1c40      	adds	r0, r0, #1
    6dc8:	b2c0      	uxtb	r0, r0
    6dca:	4282      	cmp	r2, r0
    6dcc:	d8f6      	bhi.n	6dbc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb0>
    6dce:	2010      	movs	r0, #16
    6dd0:	bd10      	pop	{r4, pc}
    6dd2:	0000      	.short	0x0000
    6dd4:	2000123a 	.word	0x2000123a
    6dd8:	b570      	push	{r4, r5, r6, lr}
    6dda:	4b0c      	ldr	r3, [pc, #48]	; (6e0c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x100>)
    6ddc:	4604      	mov	r4, r0
    6dde:	7818      	ldrb	r0, [r3, #0]
    6de0:	1c45      	adds	r5, r0, #1
    6de2:	701d      	strb	r5, [r3, #0]
    6de4:	2810      	cmp	r0, #16
    6de6:	d303      	bcc.n	6df0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe4>
    6de8:	2146      	movs	r1, #70	; 0x46
    6dea:	2028      	movs	r0, #40	; 0x28
    6dec:	f7fe f9c0 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6df0:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    6df4:	680d      	ldr	r5, [r1, #0]
    6df6:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
    6dfa:	8889      	ldrh	r1, [r1, #4]
    6dfc:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    6e00:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    6e04:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    6e08:	bd70      	pop	{r4, r5, r6, pc}
    6e0a:	0000      	.short	0x0000
    6e0c:	2000123a 	.word	0x2000123a
    6e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6e14:	460e      	mov	r6, r1
    6e16:	4607      	mov	r7, r0
    6e18:	2400      	movs	r4, #0
    6e1a:	4d0c      	ldr	r5, [pc, #48]	; (6e4c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x140>)
    6e1c:	e00e      	b.n	6e3c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x130>
    6e1e:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
    6e22:	4630      	mov	r0, r6
    6e24:	f891 2153 	ldrb.w	r2, [r1, #339]	; 0x153
    6e28:	f501 71aa 	add.w	r1, r1, #340	; 0x154
    6e2c:	4297      	cmp	r7, r2
    6e2e:	d103      	bne.n	6e38 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x12c>
    6e30:	2206      	movs	r2, #6
    6e32:	f006 fb73 	bl	d51c <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    6e36:	b138      	cbz	r0, 6e48 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x13c>
    6e38:	1c64      	adds	r4, r4, #1
    6e3a:	b2e4      	uxtb	r4, r4
    6e3c:	7828      	ldrb	r0, [r5, #0]
    6e3e:	42a0      	cmp	r0, r4
    6e40:	d8ed      	bhi.n	6e1e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x112>
    6e42:	2010      	movs	r0, #16
    6e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6e48:	4620      	mov	r0, r4
    6e4a:	e7fb      	b.n	6e44 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x138>
    6e4c:	2000123a 	.word	0x2000123a
    6e50:	b570      	push	{r4, r5, r6, lr}
    6e52:	4605      	mov	r5, r0
    6e54:	f7ff ffac 	bl	6db0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    6e58:	2810      	cmp	r0, #16
    6e5a:	d11c      	bne.n	6e96 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18a>
    6e5c:	4c0e      	ldr	r4, [pc, #56]	; (6e98 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18c>)
    6e5e:	7820      	ldrb	r0, [r4, #0]
    6e60:	1e40      	subs	r0, r0, #1
    6e62:	b2c0      	uxtb	r0, r0
    6e64:	7020      	strb	r0, [r4, #0]
    6e66:	42a8      	cmp	r0, r5
    6e68:	d015      	beq.n	6e96 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18a>
    6e6a:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    6e6e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    6e72:	f502 7080 	add.w	r0, r2, #256	; 0x100
    6e76:	f8d2 2153 	ldr.w	r2, [r2, #339]	; 0x153
    6e7a:	f8c1 2153 	str.w	r2, [r1, #339]	; 0x153
    6e7e:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
    6e82:	f8c1 0157 	str.w	r0, [r1, #343]	; 0x157
    6e86:	7820      	ldrb	r0, [r4, #0]
    6e88:	f7ff ff92 	bl	6db0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    6e8c:	2810      	cmp	r0, #16
    6e8e:	d002      	beq.n	6e96 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18a>
    6e90:	4420      	add	r0, r4
    6e92:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    6e96:	bd70      	pop	{r4, r5, r6, pc}
    6e98:	2000123a 	.word	0x2000123a
    6e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6ea0:	4c21      	ldr	r4, [pc, #132]	; (6f28 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x21c>)
    6ea2:	4606      	mov	r6, r0
    6ea4:	19a7      	adds	r7, r4, r6
    6ea6:	78a0      	ldrb	r0, [r4, #2]
    6ea8:	1e40      	subs	r0, r0, #1
    6eaa:	b2c5      	uxtb	r5, r0
    6eac:	70a5      	strb	r5, [r4, #2]
    6eae:	f897 8103 	ldrb.w	r8, [r7, #259]	; 0x103
    6eb2:	42ae      	cmp	r6, r5
    6eb4:	d02a      	beq.n	6f0c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x200>
    6eb6:	eb04 1a05 	add.w	sl, r4, r5, lsl #4
    6eba:	eb04 1906 	add.w	r9, r4, r6, lsl #4
    6ebe:	f10a 0103 	add.w	r1, sl, #3
    6ec2:	f109 0003 	add.w	r0, r9, #3
    6ec6:	2210      	movs	r2, #16
    6ec8:	f006 fb3a 	bl	d540 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6ecc:	f10a 0183 	add.w	r1, sl, #131	; 0x83
    6ed0:	f109 0083 	add.w	r0, r9, #131	; 0x83
    6ed4:	2210      	movs	r2, #16
    6ed6:	f006 fb33 	bl	d540 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6eda:	1960      	adds	r0, r4, r5
    6edc:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    6ee0:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    6ee4:	f887 1103 	strb.w	r1, [r7, #259]	; 0x103
    6ee8:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    6eec:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    6ef0:	eb04 0141 	add.w	r1, r4, r1, lsl #1
    6ef4:	f8d2 310b 	ldr.w	r3, [r2, #267]	; 0x10b
    6ef8:	f8c1 310b 	str.w	r3, [r1, #267]	; 0x10b
    6efc:	f8b2 210f 	ldrh.w	r2, [r2, #271]	; 0x10f
    6f00:	f8a1 210f 	strh.w	r2, [r1, #271]	; 0x10f
    6f04:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    6f08:	f887 013b 	strb.w	r0, [r7, #315]	; 0x13b
    6f0c:	eb04 00c8 	add.w	r0, r4, r8, lsl #3
    6f10:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    6f14:	07c0      	lsls	r0, r0, #31
    6f16:	d104      	bne.n	6f22 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x216>
    6f18:	4640      	mov	r0, r8
    6f1a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6f1e:	f7ff bf97 	b.w	6e50 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x144>
    6f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6f26:	0000      	.short	0x0000
    6f28:	2000123a 	.word	0x2000123a
    6f2c:	4905      	ldr	r1, [pc, #20]	; (6f44 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x238>)
    6f2e:	784a      	ldrb	r2, [r1, #1]
    6f30:	1e52      	subs	r2, r2, #1
    6f32:	704a      	strb	r2, [r1, #1]
    6f34:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    6f38:	2200      	movs	r2, #0
    6f3a:	f881 215a 	strb.w	r2, [r1, #346]	; 0x15a
    6f3e:	f7ff bf87 	b.w	6e50 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x144>
    6f42:	0000      	.short	0x0000
    6f44:	2000123a 	.word	0x2000123a

00006f48 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
    6f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6f4c:	4604      	mov	r4, r0
    6f4e:	f04f 0801 	mov.w	r8, #1
    6f52:	2500      	movs	r5, #0
    6f54:	b181      	cbz	r1, 6f78 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x30>
    6f56:	f104 078e 	add.w	r7, r4, #142	; 0x8e
    6f5a:	1e7e      	subs	r6, r7, #1
    6f5c:	f104 0078 	add.w	r0, r4, #120	; 0x78
    6f60:	2901      	cmp	r1, #1
    6f62:	d020      	beq.n	6fa6 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5e>
    6f64:	2902      	cmp	r1, #2
    6f66:	d042      	beq.n	6fee <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa6>
    6f68:	2903      	cmp	r1, #3
    6f6a:	d11a      	bne.n	6fa2 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5a>
    6f6c:	4639      	mov	r1, r7
    6f6e:	4630      	mov	r0, r6
    6f70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6f74:	f007 bf7c 	b.w	ee70 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    6f78:	f44f 720a 	mov.w	r2, #552	; 0x228
    6f7c:	2100      	movs	r1, #0
    6f7e:	f006 fb59 	bl	d634 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6f82:	f884 808d 	strb.w	r8, [r4, #141]	; 0x8d
    6f86:	3484      	adds	r4, #132	; 0x84
    6f88:	f004 fc06 	bl	b798 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    6f8c:	f644 112b 	movw	r1, #18731	; 0x492b
    6f90:	4008      	ands	r0, r1
    6f92:	6420      	str	r0, [r4, #64]	; 0x40
    6f94:	6465      	str	r5, [r4, #68]	; 0x44
    6f96:	20fe      	movs	r0, #254	; 0xfe
    6f98:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
    6f9c:	207f      	movs	r0, #127	; 0x7f
    6f9e:	f804 0c03 	strb.w	r0, [r4, #-3]
    6fa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6fa6:	f8a4 511e 	strh.w	r5, [r4, #286]	; 0x11e
    6faa:	f884 5113 	strb.w	r5, [r4, #275]	; 0x113
    6fae:	4a14      	ldr	r2, [pc, #80]	; (7000 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE>)
    6fb0:	6921      	ldr	r1, [r4, #16]
    6fb2:	440a      	add	r2, r1
    6fb4:	fbb2 f2f1 	udiv	r2, r2, r1
    6fb8:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
    6fbc:	f640 32b8 	movw	r2, #3000	; 0xbb8
    6fc0:	f8a4 20a8 	strh.w	r2, [r4, #168]	; 0xa8
    6fc4:	8b63      	ldrh	r3, [r4, #26]
    6fc6:	460a      	mov	r2, r1
    6fc8:	f000 f81c 	bl	7004 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4>
    6fcc:	4639      	mov	r1, r7
    6fce:	4630      	mov	r0, r6
    6fd0:	f007 ff4e 	bl	ee70 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    6fd4:	f006 fa7e 	bl	d4d4 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    6fd8:	b118      	cbz	r0, 6fe2 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x9a>
    6fda:	6960      	ldr	r0, [r4, #20]
    6fdc:	f000 fb5e 	bl	769c <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    6fe0:	b110      	cbz	r0, 6fe8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa0>
    6fe2:	f884 5184 	strb.w	r5, [r4, #388]	; 0x184
    6fe6:	e7dc      	b.n	6fa2 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5a>
    6fe8:	f884 8184 	strb.w	r8, [r4, #388]	; 0x184
    6fec:	e7d9      	b.n	6fa2 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5a>
    6fee:	f8b4 31b2 	ldrh.w	r3, [r4, #434]	; 0x1b2
    6ff2:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
    6ff6:	6921      	ldr	r1, [r4, #16]
    6ff8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6ffc:	f000 b802 	b.w	7004 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4>
    7000:	01c9c37f 	.word	0x01c9c37f
    7004:	b530      	push	{r4, r5, lr}
    7006:	2400      	movs	r4, #0
    7008:	8684      	strh	r4, [r0, #52]	; 0x34
    700a:	8f04      	ldrh	r4, [r0, #56]	; 0x38
    700c:	4d13      	ldr	r5, [pc, #76]	; (705c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5c>)
    700e:	434c      	muls	r4, r1
    7010:	fbb4 f4f2 	udiv	r4, r4, r2
    7014:	8704      	strh	r4, [r0, #56]	; 0x38
    7016:	f242 7410 	movw	r4, #10000	; 0x2710
    701a:	4363      	muls	r3, r4
    701c:	fbb3 f3f2 	udiv	r3, r3, r2
    7020:	1c5b      	adds	r3, r3, #1
    7022:	b29b      	uxth	r3, r3
    7024:	fb03 f402 	mul.w	r4, r3, r2
    7028:	86c3      	strh	r3, [r0, #54]	; 0x36
    702a:	42ac      	cmp	r4, r5
    702c:	d901      	bls.n	7032 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x32>
    702e:	1e5b      	subs	r3, r3, #1
    7030:	86c3      	strh	r3, [r0, #54]	; 0x36
    7032:	4b0b      	ldr	r3, [pc, #44]	; (7060 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x60>)
    7034:	f240 2471 	movw	r4, #625	; 0x271
    7038:	fbb3 f3f2 	udiv	r3, r3, r2
    703c:	1c5b      	adds	r3, r3, #1
    703e:	8783      	strh	r3, [r0, #60]	; 0x3c
    7040:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    7042:	4363      	muls	r3, r4
    7044:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    7048:	1e5b      	subs	r3, r3, #1
    704a:	fbb3 f3f2 	udiv	r3, r3, r2
    704e:	62c3      	str	r3, [r0, #44]	; 0x2c
    7050:	6a83      	ldr	r3, [r0, #40]	; 0x28
    7052:	434b      	muls	r3, r1
    7054:	fbb3 f1f2 	udiv	r1, r3, r2
    7058:	6281      	str	r1, [r0, #40]	; 0x28
    705a:	bd30      	pop	{r4, r5, pc}
    705c:	01e84800 	.word	0x01e84800
    7060:	02625a00 	.word	0x02625a00

00007064 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    7064:	b570      	push	{r4, r5, r6, lr}
    7066:	ea81 4111 	eor.w	r1, r1, r1, lsr #16
    706a:	b28b      	uxth	r3, r1
    706c:	7ac5      	ldrb	r5, [r0, #11]
    706e:	ea83 0102 	eor.w	r1, r3, r2
    7072:	2200      	movs	r2, #0
    7074:	b2cc      	uxtb	r4, r1
    7076:	0a09      	lsrs	r1, r1, #8
    7078:	fa94 f4a4 	rbit	r4, r4
    707c:	fa91 f1a1 	rbit	r1, r1
    7080:	0e24      	lsrs	r4, r4, #24
    7082:	0e09      	lsrs	r1, r1, #24
    7084:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    7088:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    708c:	1c52      	adds	r2, r2, #1
    708e:	4419      	add	r1, r3
    7090:	b2d2      	uxtb	r2, r2
    7092:	b289      	uxth	r1, r1
    7094:	2a03      	cmp	r2, #3
    7096:	d3ed      	bcc.n	7074 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10>
    7098:	4059      	eors	r1, r3
    709a:	2225      	movs	r2, #37	; 0x25
    709c:	fbb1 f3f2 	udiv	r3, r1, r2
    70a0:	fb02 1213 	mls	r2, r2, r3, r1
    70a4:	eb00 03d2 	add.w	r3, r0, r2, lsr #3
    70a8:	f002 0607 	and.w	r6, r2, #7
    70ac:	785b      	ldrb	r3, [r3, #1]
    70ae:	2401      	movs	r4, #1
    70b0:	fa04 f606 	lsl.w	r6, r4, r6
    70b4:	4233      	tst	r3, r6
    70b6:	d001      	beq.n	70bc <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x58>
    70b8:	4610      	mov	r0, r2
    70ba:	bd70      	pop	{r4, r5, r6, pc}
    70bc:	434d      	muls	r5, r1
    70be:	0c29      	lsrs	r1, r5, #16
    70c0:	1c49      	adds	r1, r1, #1
    70c2:	b2c9      	uxtb	r1, r1
    70c4:	2200      	movs	r2, #0
    70c6:	1885      	adds	r5, r0, r2
    70c8:	79ab      	ldrb	r3, [r5, #6]
    70ca:	428b      	cmp	r3, r1
    70cc:	d312      	bcc.n	70f4 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x90>
    70ce:	f895 5001 	ldrb.w	r5, [r5, #1]
    70d2:	2300      	movs	r3, #0
    70d4:	fa04 f603 	lsl.w	r6, r4, r3
    70d8:	4235      	tst	r5, r6
    70da:	d001      	beq.n	70e0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x7c>
    70dc:	1e49      	subs	r1, r1, #1
    70de:	b2c9      	uxtb	r1, r1
    70e0:	b121      	cbz	r1, 70ec <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x88>
    70e2:	1c5b      	adds	r3, r3, #1
    70e4:	b2db      	uxtb	r3, r3
    70e6:	2b08      	cmp	r3, #8
    70e8:	d3f4      	bcc.n	70d4 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x70>
    70ea:	e005      	b.n	70f8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x94>
    70ec:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
    70f0:	b2c0      	uxtb	r0, r0
    70f2:	bd70      	pop	{r4, r5, r6, pc}
    70f4:	1ac9      	subs	r1, r1, r3
    70f6:	b2c9      	uxtb	r1, r1
    70f8:	1c52      	adds	r2, r2, #1
    70fa:	b2d2      	uxtb	r2, r2
    70fc:	2a05      	cmp	r2, #5
    70fe:	d3e2      	bcc.n	70c6 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x62>
    7100:	f240 110d 	movw	r1, #269	; 0x10d
    7104:	2046      	movs	r0, #70	; 0x46
    7106:	f7fe f833 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    710a:	0000      	movs	r0, r0
    710c:	b570      	push	{r4, r5, r6, lr}
    710e:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
    7112:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
    7116:	2401      	movs	r4, #1
    7118:	fb03 2101 	mla	r1, r3, r1, r2
    711c:	2225      	movs	r2, #37	; 0x25
    711e:	fbb1 f3f2 	udiv	r3, r1, r2
    7122:	fb02 1113 	mls	r1, r2, r3, r1
    7126:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    712a:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    712e:	f001 0307 	and.w	r3, r1, #7
    7132:	7d92      	ldrb	r2, [r2, #22]
    7134:	fa04 f303 	lsl.w	r3, r4, r3
    7138:	421a      	tst	r2, r3
    713a:	d003      	beq.n	7144 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xe0>
    713c:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    7140:	2000      	movs	r0, #0
    7142:	bd70      	pop	{r4, r5, r6, pc}
    7144:	f890 2020 	ldrb.w	r2, [r0, #32]
    7148:	fbb1 f3f2 	udiv	r3, r1, r2
    714c:	fb02 1113 	mls	r1, r2, r3, r1
    7150:	1c49      	adds	r1, r1, #1
    7152:	b2c9      	uxtb	r1, r1
    7154:	2300      	movs	r3, #0
    7156:	18c5      	adds	r5, r0, r3
    7158:	7eea      	ldrb	r2, [r5, #27]
    715a:	428a      	cmp	r2, r1
    715c:	d311      	bcc.n	7182 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x11e>
    715e:	f895 5016 	ldrb.w	r5, [r5, #22]
    7162:	2200      	movs	r2, #0
    7164:	fa04 f602 	lsl.w	r6, r4, r2
    7168:	4235      	tst	r5, r6
    716a:	d001      	beq.n	7170 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10c>
    716c:	1e49      	subs	r1, r1, #1
    716e:	b2c9      	uxtb	r1, r1
    7170:	b121      	cbz	r1, 717c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x118>
    7172:	1c52      	adds	r2, r2, #1
    7174:	b2d2      	uxtb	r2, r2
    7176:	2a08      	cmp	r2, #8
    7178:	d3f4      	bcc.n	7164 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x100>
    717a:	e004      	b.n	7186 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x122>
    717c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    7180:	e7dc      	b.n	713c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xd8>
    7182:	1a89      	subs	r1, r1, r2
    7184:	b2c9      	uxtb	r1, r1
    7186:	1c5b      	adds	r3, r3, #1
    7188:	b2db      	uxtb	r3, r3
    718a:	2b05      	cmp	r3, #5
    718c:	d3e3      	bcc.n	7156 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xf2>
    718e:	201f      	movs	r0, #31
    7190:	bd70      	pop	{r4, r5, r6, pc}
	...

00007194 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>:
    7194:	7841      	ldrb	r1, [r0, #1]
    7196:	b141      	cbz	r1, 71aa <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    7198:	78c0      	ldrb	r0, [r0, #3]
    719a:	281a      	cmp	r0, #26
    719c:	d203      	bcs.n	71a6 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x12>
    719e:	4a04      	ldr	r2, [pc, #16]	; (71b0 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x1c>)
    71a0:	5c10      	ldrb	r0, [r2, r0]
    71a2:	4288      	cmp	r0, r1
    71a4:	d101      	bne.n	71aa <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    71a6:	2001      	movs	r0, #1
    71a8:	4770      	bx	lr
    71aa:	2000      	movs	r0, #0
    71ac:	4770      	bx	lr
    71ae:	0000      	.short	0x0000
    71b0:	00011422 	.word	0x00011422

000071b4 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>:
    71b4:	b50c      	push	{r2, r3, lr}
    71b6:	a20b      	add	r2, pc, #44	; (adr r2, 71e4 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x30>)
    71b8:	e9d2 1200 	ldrd	r1, r2, [r2]
    71bc:	e9cd 1200 	strd	r1, r2, [sp]
    71c0:	7901      	ldrb	r1, [r0, #4]
    71c2:	7940      	ldrb	r0, [r0, #5]
    71c4:	f001 0207 	and.w	r2, r1, #7
    71c8:	4669      	mov	r1, sp
    71ca:	f81d 2002 	ldrb.w	r2, [sp, r2]
    71ce:	2a01      	cmp	r2, #1
    71d0:	d804      	bhi.n	71dc <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x28>
    71d2:	f000 0007 	and.w	r0, r0, #7
    71d6:	5c08      	ldrb	r0, [r1, r0]
    71d8:	2801      	cmp	r0, #1
    71da:	d901      	bls.n	71e0 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x2c>
    71dc:	2000      	movs	r0, #0
    71de:	bd0c      	pop	{r2, r3, pc}
    71e0:	2001      	movs	r0, #1
    71e2:	bd0c      	pop	{r2, r3, pc}
    71e4:	02010100 	.word	0x02010100
    71e8:	03020201 	.word	0x03020201

000071ec <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>:
    71ec:	b510      	push	{r4, lr}
    71ee:	2201      	movs	r2, #1
    71f0:	70c1      	strb	r1, [r0, #3]
    71f2:	291a      	cmp	r1, #26
    71f4:	d202      	bcs.n	71fc <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x10>
    71f6:	4a06      	ldr	r2, [pc, #24]	; (7210 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x24>)
    71f8:	5c52      	ldrb	r2, [r2, r1]
    71fa:	e006      	b.n	720a <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    71fc:	29ff      	cmp	r1, #255	; 0xff
    71fe:	d004      	beq.n	720a <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    7200:	f240 31e2 	movw	r1, #994	; 0x3e2
    7204:	202a      	movs	r0, #42	; 0x2a
    7206:	f7fd ffb3 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    720a:	7042      	strb	r2, [r0, #1]
    720c:	bd10      	pop	{r4, pc}
    720e:	0000      	.short	0x0000
    7210:	00011422 	.word	0x00011422

00007214 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>:
    7214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7218:	4c12      	ldr	r4, [pc, #72]	; (7264 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    721a:	4607      	mov	r7, r0
    721c:	460e      	mov	r6, r1
    721e:	7da0      	ldrb	r0, [r4, #22]
    7220:	b110      	cbz	r0, 7228 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x14>
    7222:	8b20      	ldrh	r0, [r4, #24]
    7224:	2800      	cmp	r0, #0
    7226:	d012      	beq.n	724e <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    7228:	480e      	ldr	r0, [pc, #56]	; (7264 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    722a:	3014      	adds	r0, #20
    722c:	4680      	mov	r8, r0
    722e:	f007 ffce 	bl	f1ce <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    7232:	b9a8      	cbnz	r0, 7260 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    7234:	8aa5      	ldrh	r5, [r4, #20]
    7236:	8aa0      	ldrh	r0, [r4, #20]
    7238:	4632      	mov	r2, r6
    723a:	4639      	mov	r1, r7
    723c:	f008 f80b 	bl	f256 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2e>
    7240:	b138      	cbz	r0, 7252 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3e>
    7242:	7da0      	ldrb	r0, [r4, #22]
    7244:	b110      	cbz	r0, 724c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x38>
    7246:	8b20      	ldrh	r0, [r4, #24]
    7248:	1e40      	subs	r0, r0, #1
    724a:	8320      	strh	r0, [r4, #24]
    724c:	2001      	movs	r0, #1
    724e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7252:	4640      	mov	r0, r8
    7254:	f007 ffbb 	bl	f1ce <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    7258:	b910      	cbnz	r0, 7260 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    725a:	8aa0      	ldrh	r0, [r4, #20]
    725c:	42a8      	cmp	r0, r5
    725e:	d1ea      	bne.n	7236 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x22>
    7260:	2000      	movs	r0, #0
    7262:	e7f4      	b.n	724e <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    7264:	20000f94 	.word	0x20000f94
    7268:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    726c:	468a      	mov	sl, r1
    726e:	4699      	mov	r9, r3
    7270:	4615      	mov	r5, r2
    7272:	4604      	mov	r4, r0
    7274:	a901      	add	r1, sp, #4
    7276:	f007 fc2e 	bl	ead6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    727a:	bbe0      	cbnz	r0, 72f6 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe2>
    727c:	9f02      	ldr	r7, [sp, #8]
    727e:	f04f 0800 	mov.w	r8, #0
    7282:	3778      	adds	r7, #120	; 0x78
    7284:	b18d      	cbz	r5, 72aa <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x96>
    7286:	4620      	mov	r0, r4
    7288:	f7fe fba2 	bl	59d0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    728c:	0004      	movs	r4, r0
    728e:	d00f      	beq.n	72b0 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x9c>
    7290:	4629      	mov	r1, r5
    7292:	f006 ffef 	bl	e274 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    7296:	0006      	movs	r6, r0
    7298:	d003      	beq.n	72a2 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x8e>
    729a:	481d      	ldr	r0, [pc, #116]	; (7310 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xfc>)
    729c:	8840      	ldrh	r0, [r0, #2]
    729e:	42a8      	cmp	r0, r5
    72a0:	d208      	bcs.n	72b4 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xa0>
    72a2:	2000      	movs	r0, #0
    72a4:	b004      	add	sp, #16
    72a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    72aa:	2001      	movs	r0, #1
    72ac:	7538      	strb	r0, [r7, #20]
    72ae:	e029      	b.n	7304 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf0>
    72b0:	216e      	movs	r1, #110	; 0x6e
    72b2:	e02a      	b.n	730a <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf6>
    72b4:	4620      	mov	r0, r4
    72b6:	4631      	mov	r1, r6
    72b8:	aa03      	add	r2, sp, #12
    72ba:	f006 ffd4 	bl	e266 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    72be:	9803      	ldr	r0, [sp, #12]
    72c0:	f8a0 8000 	strh.w	r8, [r0]
    72c4:	f880 8002 	strb.w	r8, [r0, #2]
    72c8:	7d39      	ldrb	r1, [r7, #20]
    72ca:	b109      	cbz	r1, 72d0 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xbc>
    72cc:	f04f 0a02 	mov.w	sl, #2
    72d0:	4651      	mov	r1, sl
    72d2:	f007 fefd 	bl	f0d0 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    72d6:	4631      	mov	r1, r6
    72d8:	2603      	movs	r6, #3
    72da:	4620      	mov	r0, r4
    72dc:	464a      	mov	r2, r9
    72de:	462b      	mov	r3, r5
    72e0:	9600      	str	r6, [sp, #0]
    72e2:	f006 fea2 	bl	e02a <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>
    72e6:	4620      	mov	r0, r4
    72e8:	4629      	mov	r1, r5
    72ea:	f006 ff60 	bl	e1ae <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    72ee:	b158      	cbz	r0, 7308 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf4>
    72f0:	4644      	mov	r4, r8
    72f2:	a801      	add	r0, sp, #4
    72f4:	e000      	b.n	72f8 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe4>
    72f6:	e005      	b.n	7304 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf0>
    72f8:	f007 ff8a 	bl	f210 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    72fc:	9802      	ldr	r0, [sp, #8]
    72fe:	f8a0 410a 	strh.w	r4, [r0, #266]	; 0x10a
    7302:	753c      	strb	r4, [r7, #20]
    7304:	2001      	movs	r0, #1
    7306:	e7cd      	b.n	72a4 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x90>
    7308:	2184      	movs	r1, #132	; 0x84
    730a:	202b      	movs	r0, #43	; 0x2b
    730c:	f7fd ff30 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7310:	20000f94 	.word	0x20000f94

00007314 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>:
    7314:	4901      	ldr	r1, [pc, #4]	; (731c <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x8>)
    7316:	2001      	movs	r0, #1
    7318:	7008      	strb	r0, [r1, #0]
    731a:	4770      	bx	lr
    731c:	200002a9 	.word	0x200002a9

00007320 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    7320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7324:	0006      	movs	r6, r0
    7326:	d00a      	beq.n	733e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1e>
    7328:	4825      	ldr	r0, [pc, #148]	; (73c0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa0>)
    732a:	7801      	ldrb	r1, [r0, #0]
    732c:	b151      	cbz	r1, 7344 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x24>
    732e:	2100      	movs	r1, #0
    7330:	7071      	strb	r1, [r6, #1]
    7332:	2203      	movs	r2, #3
    7334:	7032      	strb	r2, [r6, #0]
    7336:	2201      	movs	r2, #1
    7338:	7132      	strb	r2, [r6, #4]
    733a:	7001      	strb	r1, [r0, #0]
    733c:	e03a      	b.n	73b4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x94>
    733e:	f240 21c7 	movw	r1, #711	; 0x2c7
    7342:	e009      	b.n	7358 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x38>
    7344:	4c1e      	ldr	r4, [pc, #120]	; (73c0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa0>)
    7346:	1ce4      	adds	r4, r4, #3
    7348:	7820      	ldrb	r0, [r4, #0]
    734a:	b940      	cbnz	r0, 735e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3e>
    734c:	1ca0      	adds	r0, r4, #2
    734e:	f007 ffcb 	bl	f2e8 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x4>
    7352:	b120      	cbz	r0, 735e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3e>
    7354:	f240 21d6 	movw	r1, #726	; 0x2d6
    7358:	2010      	movs	r0, #16
    735a:	f7fd ff09 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    735e:	f8b4 8002 	ldrh.w	r8, [r4, #2]
    7362:	2000      	movs	r0, #0
    7364:	f7fe f8ee 	bl	5544 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    7368:	4f16      	ldr	r7, [pc, #88]	; (73c4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>)
    736a:	4605      	mov	r5, r0
    736c:	6838      	ldr	r0, [r7, #0]
    736e:	b160      	cbz	r0, 738a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x6a>
    7370:	8860      	ldrh	r0, [r4, #2]
    7372:	42a8      	cmp	r0, r5
    7374:	d309      	bcc.n	738a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x6a>
    7376:	1b40      	subs	r0, r0, r5
    7378:	b2c0      	uxtb	r0, r0
    737a:	2101      	movs	r1, #1
    737c:	f007 f922 	bl	e5c4 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    7380:	b158      	cbz	r0, 739a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x7a>
    7382:	4631      	mov	r1, r6
    7384:	f000 f84e 	bl	7424 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2c>
    7388:	e006      	b.n	7398 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x78>
    738a:	480f      	ldr	r0, [pc, #60]	; (73c8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa8>)
    738c:	6800      	ldr	r0, [r0, #0]
    738e:	b120      	cbz	r0, 739a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x7a>
    7390:	8860      	ldrh	r0, [r4, #2]
    7392:	4631      	mov	r1, r6
    7394:	f000 f8de 	bl	7554 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x15c>
    7398:	b960      	cbnz	r0, 73b4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x94>
    739a:	1ca0      	adds	r0, r4, #2
    739c:	f007 ffa4 	bl	f2e8 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x4>
    73a0:	b910      	cbnz	r0, 73a8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x88>
    73a2:	8861      	ldrh	r1, [r4, #2]
    73a4:	4541      	cmp	r1, r8
    73a6:	d1e1      	bne.n	736c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x4c>
    73a8:	4808      	ldr	r0, [pc, #32]	; (73cc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xac>)
    73aa:	6801      	ldr	r1, [r0, #0]
    73ac:	b129      	cbz	r1, 73ba <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
    73ae:	4630      	mov	r0, r6
    73b0:	4788      	blx	r1
    73b2:	b110      	cbz	r0, 73ba <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
    73b4:	2001      	movs	r0, #1
    73b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    73ba:	2000      	movs	r0, #0
    73bc:	e7fb      	b.n	73b6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x96>
    73be:	0000      	.short	0x0000
    73c0:	200002a9 	.word	0x200002a9
    73c4:	2000010c 	.word	0x2000010c
    73c8:	20000110 	.word	0x20000110
    73cc:	20000114 	.word	0x20000114

000073d0 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    73d0:	4901      	ldr	r1, [pc, #4]	; (73d8 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    73d2:	7008      	strb	r0, [r1, #0]
    73d4:	f000 b956 	b.w	7684 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x28c>
    73d8:	200002a8 	.word	0x200002a8

000073dc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>:
    73dc:	4801      	ldr	r0, [pc, #4]	; (73e4 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI+0x8>)
    73de:	7800      	ldrb	r0, [r0, #0]
    73e0:	f7fd bce2 	b.w	4da8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    73e4:	200002a8 	.word	0x200002a8

000073e8 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q>:
    73e8:	4902      	ldr	r1, [pc, #8]	; (73f4 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0xc>)
    73ea:	4801      	ldr	r0, [pc, #4]	; (73f0 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x8>)
    73ec:	6008      	str	r0, [r1, #0]
    73ee:	4770      	bx	lr
    73f0:	000077f1 	.word	0x000077f1
    73f4:	2000010c 	.word	0x2000010c

000073f8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>:
    73f8:	4905      	ldr	r1, [pc, #20]	; (7410 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x18>)
    73fa:	4804      	ldr	r0, [pc, #16]	; (740c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x14>)
    73fc:	6008      	str	r0, [r1, #0]
    73fe:	4906      	ldr	r1, [pc, #24]	; (7418 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x20>)
    7400:	4804      	ldr	r0, [pc, #16]	; (7414 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1c>)
    7402:	6008      	str	r0, [r1, #0]
    7404:	4906      	ldr	r1, [pc, #24]	; (7420 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x28>)
    7406:	4805      	ldr	r0, [pc, #20]	; (741c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x24>)
    7408:	6008      	str	r0, [r1, #0]
    740a:	4770      	bx	lr
    740c:	000077f1 	.word	0x000077f1
    7410:	2000010c 	.word	0x2000010c
    7414:	00008fcd 	.word	0x00008fcd
    7418:	20000110 	.word	0x20000110
    741c:	00005f59 	.word	0x00005f59
    7420:	20000114 	.word	0x20000114
    7424:	b570      	push	{r4, r5, r6, lr}
    7426:	0005      	movs	r5, r0
    7428:	460c      	mov	r4, r1
    742a:	d02e      	beq.n	748a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x92>
    742c:	4818      	ldr	r0, [pc, #96]	; (7490 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x98>)
    742e:	6802      	ldr	r2, [r0, #0]
    7430:	b35a      	cbz	r2, 748a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x92>
    7432:	4628      	mov	r0, r5
    7434:	4790      	blx	r2
    7436:	b340      	cbz	r0, 748a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x92>
    7438:	7820      	ldrb	r0, [r4, #0]
    743a:	2811      	cmp	r0, #17
    743c:	d002      	beq.n	7444 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x4c>
    743e:	2814      	cmp	r0, #20
    7440:	d003      	beq.n	744a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x52>
    7442:	e020      	b.n	7486 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
    7444:	7920      	ldrb	r0, [r4, #4]
    7446:	b1f0      	cbz	r0, 7486 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
    7448:	e00a      	b.n	7460 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x68>
    744a:	7920      	ldrb	r0, [r4, #4]
    744c:	b120      	cbz	r0, 7458 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x60>
    744e:	4628      	mov	r0, r5
    7450:	f008 f961 	bl	f716 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    7454:	b120      	cbz	r0, 7460 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x68>
    7456:	e016      	b.n	7486 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
    7458:	490e      	ldr	r1, [pc, #56]	; (7494 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x9c>)
    745a:	2000      	movs	r0, #0
    745c:	7008      	strb	r0, [r1, #0]
    745e:	e012      	b.n	7486 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
    7460:	88e4      	ldrh	r4, [r4, #6]
    7462:	2100      	movs	r1, #0
    7464:	4620      	mov	r0, r4
    7466:	f007 f8ad 	bl	e5c4 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    746a:	b160      	cbz	r0, 7486 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
    746c:	8800      	ldrh	r0, [r0, #0]
    746e:	f007 fa64 	bl	e93a <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    7472:	2100      	movs	r1, #0
    7474:	4620      	mov	r0, r4
    7476:	f7fe f903 	bl	5680 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    747a:	b120      	cbz	r0, 7486 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
    747c:	f240 1171 	movw	r1, #369	; 0x171
    7480:	2010      	movs	r0, #16
    7482:	f7fd fe75 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7486:	2001      	movs	r0, #1
    7488:	bd70      	pop	{r4, r5, r6, pc}
    748a:	2000      	movs	r0, #0
    748c:	bd70      	pop	{r4, r5, r6, pc}
    748e:	0000      	.short	0x0000
    7490:	2000010c 	.word	0x2000010c
    7494:	200002ac 	.word	0x200002ac
    7498:	b510      	push	{r4, lr}
    749a:	492d      	ldr	r1, [pc, #180]	; (7550 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x158>)
    749c:	b086      	sub	sp, #24
    749e:	7c8a      	ldrb	r2, [r1, #18]
    74a0:	7801      	ldrb	r1, [r0, #0]
    74a2:	07d3      	lsls	r3, r2, #31
    74a4:	d101      	bne.n	74aa <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xb2>
    74a6:	2919      	cmp	r1, #25
    74a8:	d004      	beq.n	74b4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xbc>
    74aa:	2918      	cmp	r1, #24
    74ac:	d01f      	beq.n	74ee <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xf6>
    74ae:	2912      	cmp	r1, #18
    74b0:	d046      	beq.n	7540 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x148>
    74b2:	e04a      	b.n	754a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x152>
    74b4:	8880      	ldrh	r0, [r0, #4]
    74b6:	f8ad 0000 	strh.w	r0, [sp]
    74ba:	a902      	add	r1, sp, #8
    74bc:	f007 fb0b 	bl	ead6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    74c0:	b110      	cbz	r0, 74c8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xd0>
    74c2:	f44f 71c4 	mov.w	r1, #392	; 0x188
    74c6:	e035      	b.n	7534 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x13c>
    74c8:	9803      	ldr	r0, [sp, #12]
    74ca:	f810 1f6a 	ldrb.w	r1, [r0, #106]!
    74ce:	f88d 1002 	strb.w	r1, [sp, #2]
    74d2:	7841      	ldrb	r1, [r0, #1]
    74d4:	f88d 1003 	strb.w	r1, [sp, #3]
    74d8:	8840      	ldrh	r0, [r0, #2]
    74da:	f8ad 0004 	strh.w	r0, [sp, #4]
    74de:	2102      	movs	r1, #2
    74e0:	4668      	mov	r0, sp
    74e2:	f009 fb9b 	bl	10c1c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    74e6:	b340      	cbz	r0, 753a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x142>
    74e8:	f44f 71cf 	mov.w	r1, #414	; 0x19e
    74ec:	e022      	b.n	7534 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x13c>
    74ee:	0791      	lsls	r1, r2, #30
    74f0:	d42b      	bmi.n	754a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x152>
    74f2:	8884      	ldrh	r4, [r0, #4]
    74f4:	a903      	add	r1, sp, #12
    74f6:	4620      	mov	r0, r4
    74f8:	f009 f9af 	bl	1085a <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    74fc:	b110      	cbz	r0, 7504 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x10c>
    74fe:	f240 11a5 	movw	r1, #421	; 0x1a5
    7502:	e017      	b.n	7534 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x13c>
    7504:	f8ad 4000 	strh.w	r4, [sp]
    7508:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    750c:	f8ad 0002 	strh.w	r0, [sp, #2]
    7510:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    7514:	f8ad 0004 	strh.w	r0, [sp, #4]
    7518:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    751c:	f8ad 0006 	strh.w	r0, [sp, #6]
    7520:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    7524:	f8ad 0008 	strh.w	r0, [sp, #8]
    7528:	4668      	mov	r0, sp
    752a:	f009 fa14 	bl	10956 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    752e:	b120      	cbz	r0, 753a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x142>
    7530:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
    7534:	2010      	movs	r0, #16
    7536:	f7fd fe1b 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    753a:	2001      	movs	r0, #1
    753c:	b006      	add	sp, #24
    753e:	bd10      	pop	{r4, pc}
    7540:	0751      	lsls	r1, r2, #29
    7542:	d402      	bmi.n	754a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x152>
    7544:	7b80      	ldrb	r0, [r0, #14]
    7546:	07c0      	lsls	r0, r0, #31
    7548:	d0f7      	beq.n	753a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x142>
    754a:	2000      	movs	r0, #0
    754c:	e7f6      	b.n	753c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x144>
    754e:	0000      	.short	0x0000
    7550:	20000f94 	.word	0x20000f94
    7554:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7558:	460c      	mov	r4, r1
    755a:	4680      	mov	r8, r0
    755c:	4669      	mov	r1, sp
    755e:	f007 faba 	bl	ead6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    7562:	2800      	cmp	r0, #0
    7564:	d17d      	bne.n	7662 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x26a>
    7566:	4d46      	ldr	r5, [pc, #280]	; (7680 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x288>)
    7568:	4681      	mov	r9, r0
    756a:	9801      	ldr	r0, [sp, #4]
    756c:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    7570:	2800      	cmp	r0, #0
    7572:	d059      	beq.n	7628 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x230>
    7574:	682a      	ldr	r2, [r5, #0]
    7576:	b14a      	cbz	r2, 758c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x194>
    7578:	4621      	mov	r1, r4
    757a:	4640      	mov	r0, r8
    757c:	4790      	blx	r2
    757e:	b128      	cbz	r0, 758c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x194>
    7580:	4620      	mov	r0, r4
    7582:	f7ff ff89 	bl	7498 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa0>
    7586:	2800      	cmp	r0, #0
    7588:	d1ef      	bne.n	756a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x172>
    758a:	e04c      	b.n	7626 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x22e>
    758c:	9d01      	ldr	r5, [sp, #4]
    758e:	f895 0144 	ldrb.w	r0, [r5, #324]	; 0x144
    7592:	f04f 0b01 	mov.w	fp, #1
    7596:	3578      	adds	r5, #120	; 0x78
    7598:	b950      	cbnz	r0, 75b0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1b8>
    759a:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    759e:	f88d 0008 	strb.w	r0, [sp, #8]
    75a2:	9802      	ldr	r0, [sp, #8]
    75a4:	9002      	str	r0, [sp, #8]
    75a6:	f89d 0008 	ldrb.w	r0, [sp, #8]
    75aa:	b108      	cbz	r0, 75b0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1b8>
    75ac:	2001      	movs	r0, #1
    75ae:	e000      	b.n	75b2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1ba>
    75b0:	2000      	movs	r0, #0
    75b2:	4682      	mov	sl, r0
    75b4:	f895 0045 	ldrb.w	r0, [r5, #69]	; 0x45
    75b8:	b1b8      	cbz	r0, 75ea <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1f2>
    75ba:	f895 0046 	ldrb.w	r0, [r5, #70]	; 0x46
    75be:	0780      	lsls	r0, r0, #30
    75c0:	d513      	bpl.n	75ea <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1f2>
    75c2:	f884 9001 	strb.w	r9, [r4, #1]
    75c6:	f884 b000 	strb.w	fp, [r4]
    75ca:	f884 9004 	strb.w	r9, [r4, #4]
    75ce:	f8a4 8005 	strh.w	r8, [r4, #5]
    75d2:	f895 1047 	ldrb.w	r1, [r5, #71]	; 0x47
    75d6:	71e1      	strb	r1, [r4, #7]
    75d8:	f8b5 1048 	ldrh.w	r1, [r5, #72]	; 0x48
    75dc:	8121      	strh	r1, [r4, #8]
    75de:	f8b5 104a 	ldrh.w	r1, [r5, #74]	; 0x4a
    75e2:	8161      	strh	r1, [r4, #10]
    75e4:	f885 9045 	strb.w	r9, [r5, #69]	; 0x45
    75e8:	e01d      	b.n	7626 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x22e>
    75ea:	4640      	mov	r0, r8
    75ec:	f7fe f9f0 	bl	59d0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    75f0:	0007      	movs	r7, r0
    75f2:	d00d      	beq.n	7610 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x218>
    75f4:	f006 fdff 	bl	e1f6 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>
    75f8:	0006      	movs	r6, r0
    75fa:	d017      	beq.n	762c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x234>
    75fc:	f884 9001 	strb.w	r9, [r4, #1]
    7600:	200d      	movs	r0, #13
    7602:	7020      	strb	r0, [r4, #0]
    7604:	f8a4 8006 	strh.w	r8, [r4, #6]
    7608:	8126      	strh	r6, [r4, #8]
    760a:	f884 b004 	strb.w	fp, [r4, #4]
    760e:	e007      	b.n	7620 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x228>
    7610:	f240 212d 	movw	r1, #557	; 0x22d
    7614:	e02e      	b.n	7674 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x27c>
    7616:	2100      	movs	r1, #0
    7618:	4638      	mov	r0, r7
    761a:	460a      	mov	r2, r1
    761c:	f006 ff01 	bl	e422 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    7620:	1e76      	subs	r6, r6, #1
    7622:	b2b6      	uxth	r6, r6
    7624:	d2f7      	bcs.n	7616 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x21e>
    7626:	2001      	movs	r0, #1
    7628:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    762c:	4640      	mov	r0, r8
    762e:	f7fe f9b9 	bl	59a4 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    7632:	b1e8      	cbz	r0, 7670 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x278>
    7634:	f1ba 0f00 	cmp.w	sl, #0
    7638:	d01f      	beq.n	767a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x282>
    763a:	f006 fd0d 	bl	e058 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    763e:	b180      	cbz	r0, 7662 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x26a>
    7640:	4640      	mov	r0, r8
    7642:	f007 f97a 	bl	e93a <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    7646:	2100      	movs	r1, #0
    7648:	4640      	mov	r0, r8
    764a:	f7fe f819 	bl	5680 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    764e:	f884 9001 	strb.w	r9, [r4, #1]
    7652:	210a      	movs	r1, #10
    7654:	7021      	strb	r1, [r4, #0]
    7656:	f884 9004 	strb.w	r9, [r4, #4]
    765a:	4648      	mov	r0, r9
    765c:	f8a4 8005 	strh.w	r8, [r4, #5]
    7660:	e000      	b.n	7664 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x26c>
    7662:	e00a      	b.n	767a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x282>
    7664:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
    7668:	71e1      	strb	r1, [r4, #7]
    766a:	3524      	adds	r5, #36	; 0x24
    766c:	7028      	strb	r0, [r5, #0]
    766e:	e7da      	b.n	7626 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x22e>
    7670:	f44f 7111 	mov.w	r1, #580	; 0x244
    7674:	2010      	movs	r0, #16
    7676:	f7fd fd7b 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    767a:	2000      	movs	r0, #0
    767c:	e7d4      	b.n	7628 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x230>
    767e:	0000      	.short	0x0000
    7680:	20000110 	.word	0x20000110
    7684:	4804      	ldr	r0, [pc, #16]	; (7698 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2a0>)
    7686:	2100      	movs	r1, #0
    7688:	f64f 72ff 	movw	r2, #65535	; 0xffff
    768c:	7001      	strb	r1, [r0, #0]
    768e:	8042      	strh	r2, [r0, #2]
    7690:	1f00      	subs	r0, r0, #4
    7692:	f8a0 1001 	strh.w	r1, [r0, #1]
    7696:	4770      	bx	lr
    7698:	200002ac 	.word	0x200002ac

0000769c <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    769c:	b5f0      	push	{r4, r5, r6, r7, lr}
    769e:	f06f 021f 	mvn.w	r2, #31
    76a2:	0c01      	lsrs	r1, r0, #16
    76a4:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    76a8:	251f      	movs	r5, #31
    76aa:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    76ae:	3854      	subs	r0, #84	; 0x54
    76b0:	d00d      	beq.n	76ce <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    76b2:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    76b6:	3855      	subs	r0, #85	; 0x55
    76b8:	d009      	beq.n	76ce <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    76ba:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    76be:	38aa      	subs	r0, #170	; 0xaa
    76c0:	d005      	beq.n	76ce <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    76c2:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    76c6:	38aa      	subs	r0, #170	; 0xaa
    76c8:	d001      	beq.n	76ce <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    76ca:	2001      	movs	r0, #1
    76cc:	e000      	b.n	76d0 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    76ce:	2000      	movs	r0, #0
    76d0:	2200      	movs	r2, #0
    76d2:	4613      	mov	r3, r2
    76d4:	ea4f 0402 	mov.w	r4, r2
    76d8:	ea82 0701 	eor.w	r7, r2, r1
    76dc:	43ff      	mvns	r7, r7
    76de:	431f      	orrs	r7, r3
    76e0:	1c7f      	adds	r7, r7, #1
    76e2:	d00f      	beq.n	7704 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
    76e4:	f006 0701 	and.w	r7, r6, #1
    76e8:	0852      	lsrs	r2, r2, #1
    76ea:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    76ee:	f005 0701 	and.w	r7, r5, #1
    76f2:	085b      	lsrs	r3, r3, #1
    76f4:	0876      	lsrs	r6, r6, #1
    76f6:	086d      	lsrs	r5, r5, #1
    76f8:	1c64      	adds	r4, r4, #1
    76fa:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    76fe:	2c16      	cmp	r4, #22
    7700:	d3ea      	bcc.n	76d8 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
    7702:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7704:	2000      	movs	r0, #0
    7706:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007708 <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY>:
    7708:	b510      	push	{r4, lr}
    770a:	e9d0 2100 	ldrd	r2, r1, [r0]
    770e:	4b09      	ldr	r3, [pc, #36]	; (7734 <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY+0x2c>)
    7710:	4c09      	ldr	r4, [pc, #36]	; (7738 <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY+0x30>)
    7712:	4353      	muls	r3, r2
    7714:	4354      	muls	r4, r2
    7716:	4051      	eors	r1, r2
    7718:	ea81 12b2 	eor.w	r2, r1, r2, ror #6
    771c:	ea82 2241 	eor.w	r2, r2, r1, lsl #9
    7720:	ea4f 41f1 	mov.w	r1, r1, ror #19
    7724:	e9c0 2100 	strd	r2, r1, [r0]
    7728:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
    772c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7730:	4618      	mov	r0, r3
    7732:	bd10      	pop	{r4, pc}
    7734:	c6ef3760 	.word	0xc6ef3760
    7738:	9e3779bb 	.word	0x9e3779bb

0000773c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
    773c:	b570      	push	{r4, r5, r6, lr}
    773e:	4604      	mov	r4, r0
    7740:	7c00      	ldrb	r0, [r0, #16]
    7742:	b300      	cbz	r0, 7786 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    7744:	2802      	cmp	r0, #2
    7746:	d01e      	beq.n	7786 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    7748:	f05f 0001 	movs.w	r0, #1
    774c:	f104 0149 	add.w	r1, r4, #73	; 0x49
    7750:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
    7754:	460d      	mov	r5, r1
    7756:	b1c0      	cbz	r0, 778a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4e>
    7758:	7de0      	ldrb	r0, [r4, #23]
    775a:	b1f0      	cbz	r0, 779a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x5e>
    775c:	f8d4 0011 	ldr.w	r0, [r4, #17]
    7760:	f8c4 0049 	str.w	r0, [r4, #73]	; 0x49
    7764:	f8b4 0015 	ldrh.w	r0, [r4, #21]
    7768:	f8a4 004d 	strh.w	r0, [r4, #77]	; 0x4d
    776c:	7c20      	ldrb	r0, [r4, #16]
    776e:	f007 ff35 	bl	f5dc <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
    7772:	7620      	strb	r0, [r4, #24]
    7774:	2008      	movs	r0, #8
    7776:	7660      	strb	r0, [r4, #25]
    7778:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    777c:	4629      	mov	r1, r5
    777e:	f007 ff19 	bl	f5b4 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x1a>
    7782:	b9a8      	cbnz	r0, 77b0 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x74>
    7784:	e00e      	b.n	77a4 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x68>
    7786:	2000      	movs	r0, #0
    7788:	e7e0      	b.n	774c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10>
    778a:	2000      	movs	r0, #0
    778c:	f7fe fb96 	bl	5ebc <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    7790:	2800      	cmp	r0, #0
    7792:	d1eb      	bne.n	776c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x30>
    7794:	f240 41ad 	movw	r1, #1197	; 0x4ad
    7798:	e001      	b.n	779e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x62>
    779a:	f240 41b1 	movw	r1, #1201	; 0x4b1
    779e:	202d      	movs	r0, #45	; 0x2d
    77a0:	f7fd fce6 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    77a4:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    77a8:	4629      	mov	r1, r5
    77aa:	f007 ff0c 	bl	f5c6 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    77ae:	b100      	cbz	r0, 77b2 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x76>
    77b0:	2001      	movs	r0, #1
    77b2:	76a0      	strb	r0, [r4, #26]
    77b4:	7e20      	ldrb	r0, [r4, #24]
    77b6:	b130      	cbz	r0, 77c6 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x8a>
    77b8:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
    77bc:	f104 0150 	add.w	r1, r4, #80	; 0x50
    77c0:	f007 f946 	bl	ea50 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    77c4:	7660      	strb	r0, [r4, #25]
    77c6:	2500      	movs	r5, #0
    77c8:	6425      	str	r5, [r4, #64]	; 0x40
    77ca:	f005 fd44 	bl	d256 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    77ce:	6460      	str	r0, [r4, #68]	; 0x44
    77d0:	2100      	movs	r1, #0
    77d2:	4620      	mov	r0, r4
    77d4:	f008 f82d 	bl	f832 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x90>
    77d8:	f884 5056 	strb.w	r5, [r4, #86]	; 0x56
    77dc:	78a0      	ldrb	r0, [r4, #2]
    77de:	0740      	lsls	r0, r0, #29
    77e0:	d505      	bpl.n	77ee <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xb2>
    77e2:	4620      	mov	r0, r4
    77e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    77e8:	2100      	movs	r1, #0
    77ea:	f000 bdff 	b.w	83ec <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3ec>
    77ee:	bd70      	pop	{r4, r5, r6, pc}

000077f0 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA>:
    77f0:	b508      	push	{r3, lr}
    77f2:	f890 2094 	ldrb.w	r2, [r0, #148]	; 0x94
    77f6:	f88d 2000 	strb.w	r2, [sp]
    77fa:	9a00      	ldr	r2, [sp, #0]
    77fc:	9200      	str	r2, [sp, #0]
    77fe:	f89d 3000 	ldrb.w	r3, [sp]
    7802:	2200      	movs	r2, #0
    7804:	b163      	cbz	r3, 7820 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x30>
    7806:	704a      	strb	r2, [r1, #1]
    7808:	2317      	movs	r3, #23
    780a:	700b      	strb	r3, [r1, #0]
    780c:	f850 3f95 	ldr.w	r3, [r0, #149]!
    7810:	604b      	str	r3, [r1, #4]
    7812:	6843      	ldr	r3, [r0, #4]
    7814:	608b      	str	r3, [r1, #8]
    7816:	7a03      	ldrb	r3, [r0, #8]
    7818:	730b      	strb	r3, [r1, #12]
    781a:	f800 2c01 	strb.w	r2, [r0, #-1]
    781e:	e03b      	b.n	7898 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    7820:	f890 308e 	ldrb.w	r3, [r0, #142]	; 0x8e
    7824:	f88d 3000 	strb.w	r3, [sp]
    7828:	9b00      	ldr	r3, [sp, #0]
    782a:	9300      	str	r3, [sp, #0]
    782c:	f89d 3000 	ldrb.w	r3, [sp]
    7830:	b143      	cbz	r3, 7844 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x54>
    7832:	704a      	strb	r2, [r1, #1]
    7834:	2305      	movs	r3, #5
    7836:	700b      	strb	r3, [r1, #0]
    7838:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
    783c:	604b      	str	r3, [r1, #4]
    783e:	f880 208e 	strb.w	r2, [r0, #142]	; 0x8e
    7842:	e029      	b.n	7898 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    7844:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
    7848:	f88d 3000 	strb.w	r3, [sp]
    784c:	9b00      	ldr	r3, [sp, #0]
    784e:	9300      	str	r3, [sp, #0]
    7850:	f89d 3000 	ldrb.w	r3, [sp]
    7854:	b11b      	cbz	r3, 785e <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x6e>
    7856:	bf00      	nop
    7858:	f007 ffc1 	bl	f7de <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3c>
    785c:	e01c      	b.n	7898 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    785e:	f890 3086 	ldrb.w	r3, [r0, #134]	; 0x86
    7862:	f88d 3000 	strb.w	r3, [sp]
    7866:	9b00      	ldr	r3, [sp, #0]
    7868:	9300      	str	r3, [sp, #0]
    786a:	f89d 3000 	ldrb.w	r3, [sp]
    786e:	b1ab      	cbz	r3, 789c <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xac>
    7870:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
    7874:	f88d 3000 	strb.w	r3, [sp]
    7878:	9b00      	ldr	r3, [sp, #0]
    787a:	9300      	str	r3, [sp, #0]
    787c:	f89d 3000 	ldrb.w	r3, [sp]
    7880:	2b00      	cmp	r3, #0
    7882:	d1e9      	bne.n	7858 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x68>
    7884:	704a      	strb	r2, [r1, #1]
    7886:	2314      	movs	r3, #20
    7888:	700b      	strb	r3, [r1, #0]
    788a:	f850 3f88 	ldr.w	r3, [r0, #136]!
    788e:	604b      	str	r3, [r1, #4]
    7890:	8883      	ldrh	r3, [r0, #4]
    7892:	810b      	strh	r3, [r1, #8]
    7894:	f800 2c02 	strb.w	r2, [r0, #-2]
    7898:	2001      	movs	r0, #1
    789a:	bd08      	pop	{r3, pc}
    789c:	2000      	movs	r0, #0
    789e:	bd08      	pop	{r3, pc}

000078a0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
    78a0:	b530      	push	{r4, r5, lr}
    78a2:	460c      	mov	r4, r1
    78a4:	b08d      	sub	sp, #52	; 0x34
    78a6:	4605      	mov	r5, r0
    78a8:	4601      	mov	r1, r0
    78aa:	2220      	movs	r2, #32
    78ac:	a802      	add	r0, sp, #8
    78ae:	f005 fe47 	bl	d540 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    78b2:	a80a      	add	r0, sp, #40	; 0x28
    78b4:	f008 f86a 	bl	f98c <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    78b8:	7aa0      	ldrb	r0, [r4, #10]
    78ba:	f88d 0018 	strb.w	r0, [sp, #24]
    78be:	7820      	ldrb	r0, [r4, #0]
    78c0:	f88d 0008 	strb.w	r0, [sp, #8]
    78c4:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    78c8:	f8ad 0000 	strh.w	r0, [sp]
    78cc:	f89d 0000 	ldrb.w	r0, [sp]
    78d0:	f000 0101 	and.w	r1, r0, #1
    78d4:	f3c0 0240 	ubfx	r2, r0, #1, #1
    78d8:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    78dc:	f3c0 0280 	ubfx	r2, r0, #2, #1
    78e0:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
    78e4:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    78e8:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
    78ec:	f3c0 1200 	ubfx	r2, r0, #4, #1
    78f0:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    78f4:	f3c0 1240 	ubfx	r2, r0, #5, #1
    78f8:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    78fc:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7900:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
    7904:	f8ad 000a 	strh.w	r0, [sp, #10]
    7908:	7d20      	ldrb	r0, [r4, #20]
    790a:	2801      	cmp	r0, #1
    790c:	d006      	beq.n	791c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    790e:	2802      	cmp	r0, #2
    7910:	d004      	beq.n	791c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    7912:	f240 2186 	movw	r1, #646	; 0x286
    7916:	2006      	movs	r0, #6
    7918:	f7fd fc2a 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    791c:	f88d 000c 	strb.w	r0, [sp, #12]
    7920:	7a61      	ldrb	r1, [r4, #9]
    7922:	a80a      	add	r0, sp, #40	; 0x28
    7924:	f008 f819 	bl	f95a <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
    7928:	7d20      	ldrb	r0, [r4, #20]
    792a:	2101      	movs	r1, #1
    792c:	2802      	cmp	r0, #2
    792e:	d102      	bne.n	7936 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x96>
    7930:	7d60      	ldrb	r0, [r4, #21]
    7932:	1c40      	adds	r0, r0, #1
    7934:	b2c1      	uxtb	r1, r0
    7936:	7ea0      	ldrb	r0, [r4, #26]
    7938:	1c40      	adds	r0, r0, #1
    793a:	b2c2      	uxtb	r2, r0
    793c:	a80a      	add	r0, sp, #40	; 0x28
    793e:	f007 ffd3 	bl	f8e8 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
    7942:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    7946:	0700      	lsls	r0, r0, #28
    7948:	d501      	bpl.n	794e <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xae>
    794a:	2000      	movs	r0, #0
    794c:	e020      	b.n	7990 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf0>
    794e:	a80a      	add	r0, sp, #40	; 0x28
    7950:	f007 ffdc 	bl	f90c <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    7954:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    7958:	2228      	movs	r2, #40	; 0x28
    795a:	f000 fded 	bl	8538 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    795e:	f240 2171 	movw	r1, #625	; 0x271
    7962:	f200 20d9 	addw	r0, r0, #729	; 0x2d9
    7966:	fbb0 f0f1 	udiv	r0, r0, r1
    796a:	4348      	muls	r0, r1
    796c:	f8d4 1002 	ldr.w	r1, [r4, #2]
    7970:	f240 2371 	movw	r3, #625	; 0x271
    7974:	0a0a      	lsrs	r2, r1, #8
    7976:	f240 2171 	movw	r1, #625	; 0x271
    797a:	434a      	muls	r2, r1
    797c:	f8d4 1005 	ldr.w	r1, [r4, #5]
    7980:	0a09      	lsrs	r1, r1, #8
    7982:	4359      	muls	r1, r3
    7984:	4290      	cmp	r0, r2
    7986:	d801      	bhi.n	798c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xec>
    7988:	9204      	str	r2, [sp, #16]
    798a:	e004      	b.n	7996 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    798c:	4288      	cmp	r0, r1
    798e:	d801      	bhi.n	7994 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf4>
    7990:	9004      	str	r0, [sp, #16]
    7992:	e000      	b.n	7996 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    7994:	9104      	str	r1, [sp, #16]
    7996:	7ca0      	ldrb	r0, [r4, #18]
    7998:	f88d 0017 	strb.w	r0, [sp, #23]
    799c:	7e20      	ldrb	r0, [r4, #24]
    799e:	2801      	cmp	r0, #1
    79a0:	d000      	beq.n	79a4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x104>
    79a2:	2000      	movs	r0, #0
    79a4:	f88d 0014 	strb.w	r0, [sp, #20]
    79a8:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    79aa:	f006 fec9 	bl	e740 <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>
    79ae:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    79b0:	f006 ff6a 	bl	e888 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>
    79b4:	2220      	movs	r2, #32
    79b6:	a902      	add	r1, sp, #8
    79b8:	4628      	mov	r0, r5
    79ba:	f005 fdc1 	bl	d540 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    79be:	980a      	ldr	r0, [sp, #40]	; 0x28
    79c0:	6228      	str	r0, [r5, #32]
    79c2:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
    79c6:	84a8      	strh	r0, [r5, #36]	; 0x24
    79c8:	7ae0      	ldrb	r0, [r4, #11]
    79ca:	b168      	cbz	r0, 79e8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    79cc:	2802      	cmp	r0, #2
    79ce:	d00b      	beq.n	79e8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    79d0:	f05f 0001 	movs.w	r0, #1
    79d4:	f885 004f 	strb.w	r0, [r5, #79]	; 0x4f
    79d8:	68e0      	ldr	r0, [r4, #12]
    79da:	6528      	str	r0, [r5, #80]	; 0x50
    79dc:	8a20      	ldrh	r0, [r4, #16]
    79de:	f8a5 0054 	strh.w	r0, [r5, #84]	; 0x54
    79e2:	b00d      	add	sp, #52	; 0x34
    79e4:	2000      	movs	r0, #0
    79e6:	bd30      	pop	{r4, r5, pc}
    79e8:	2000      	movs	r0, #0
    79ea:	e7f3      	b.n	79d4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x134>

000079ec <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
    79ec:	4a0a      	ldr	r2, [pc, #40]	; (7a18 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x2c>)
    79ee:	b510      	push	{r4, lr}
    79f0:	2100      	movs	r1, #0
    79f2:	7011      	strb	r1, [r2, #0]
    79f4:	4c09      	ldr	r4, [pc, #36]	; (7a1c <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x30>)
    79f6:	6060      	str	r0, [r4, #4]
    79f8:	f000 f822 	bl	7a40 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    79fc:	b110      	cbz	r0, 7a04 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x18>
    79fe:	f240 312d 	movw	r1, #813	; 0x32d
    7a02:	e004      	b.n	7a0e <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x22>
    7a04:	68a0      	ldr	r0, [r4, #8]
    7a06:	2800      	cmp	r0, #0
    7a08:	d104      	bne.n	7a14 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x28>
    7a0a:	f44f 714c 	mov.w	r1, #816	; 0x330
    7a0e:	202d      	movs	r0, #45	; 0x2d
    7a10:	f7fd fbae 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7a14:	bd10      	pop	{r4, pc}
    7a16:	0000      	.short	0x0000
    7a18:	20000fb0 	.word	0x20000fb0
    7a1c:	20000118 	.word	0x20000118

00007a20 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>:
    7a20:	4902      	ldr	r1, [pc, #8]	; (7a2c <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0xc>)
    7a22:	4801      	ldr	r0, [pc, #4]	; (7a28 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0x8>)
    7a24:	6088      	str	r0, [r1, #8]
    7a26:	4770      	bx	lr
    7a28:	00008520 	.word	0x00008520
    7a2c:	20000118 	.word	0x20000118

00007a30 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
    7a30:	4902      	ldr	r1, [pc, #8]	; (7a3c <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0xc>)
    7a32:	6008      	str	r0, [r1, #0]
    7a34:	6889      	ldr	r1, [r1, #8]
    7a36:	6809      	ldr	r1, [r1, #0]
    7a38:	4708      	bx	r1
    7a3a:	0000      	.short	0x0000
    7a3c:	20000118 	.word	0x20000118

00007a40 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
    7a40:	4808      	ldr	r0, [pc, #32]	; (7a64 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    7a42:	b510      	push	{r4, lr}
    7a44:	7800      	ldrb	r0, [r0, #0]
    7a46:	b110      	cbz	r0, 7a4e <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
    7a48:	240c      	movs	r4, #12
    7a4a:	4620      	mov	r0, r4
    7a4c:	bd10      	pop	{r4, pc}
    7a4e:	2400      	movs	r4, #0
    7a50:	2218      	movs	r2, #24
    7a52:	4621      	mov	r1, r4
    7a54:	4803      	ldr	r0, [pc, #12]	; (7a64 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    7a56:	f005 fded 	bl	d634 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7a5a:	f004 f8bf 	bl	bbdc <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7a5e:	f003 fee3 	bl	b828 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    7a62:	e7f2      	b.n	7a4a <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xa>
    7a64:	20000fb0 	.word	0x20000fb0

00007a68 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
    7a68:	4904      	ldr	r1, [pc, #16]	; (7a7c <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x14>)
    7a6a:	b510      	push	{r4, lr}
    7a6c:	7809      	ldrb	r1, [r1, #0]
    7a6e:	2901      	cmp	r1, #1
    7a70:	d101      	bne.n	7a76 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xe>
    7a72:	f000 fb85 	bl	8180 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x180>
    7a76:	2000      	movs	r0, #0
    7a78:	bd10      	pop	{r4, pc}
    7a7a:	0000      	.short	0x0000
    7a7c:	20000fb0 	.word	0x20000fb0

00007a80 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>:
    7a80:	4902      	ldr	r1, [pc, #8]	; (7a8c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xc>)
    7a82:	4801      	ldr	r0, [pc, #4]	; (7a88 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8>)
    7a84:	6008      	str	r0, [r1, #0]
    7a86:	4770      	bx	lr
    7a88:	000082cd 	.word	0x000082cd
    7a8c:	20000124 	.word	0x20000124
    7a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7a94:	000f      	movs	r7, r1
    7a96:	4604      	mov	r4, r0
    7a98:	d023      	beq.n	7ae2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x62>
    7a9a:	f104 0020 	add.w	r0, r4, #32
    7a9e:	4605      	mov	r5, r0
    7aa0:	f007 ff5d 	bl	f95e <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    7aa4:	b9b0      	cbnz	r0, 7ad4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x54>
    7aa6:	78a0      	ldrb	r0, [r4, #2]
    7aa8:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    7aac:	b350      	cbz	r0, 7b04 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x84>
    7aae:	4628      	mov	r0, r5
    7ab0:	f007 ff2c 	bl	f90c <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    7ab4:	4606      	mov	r6, r0
    7ab6:	4628      	mov	r0, r5
    7ab8:	f007 ff51 	bl	f95e <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    7abc:	1a30      	subs	r0, r6, r0
    7abe:	b2c0      	uxtb	r0, r0
    7ac0:	f007 ffa2 	bl	fa08 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    7ac4:	4601      	mov	r1, r0
    7ac6:	4835      	ldr	r0, [pc, #212]	; (7b9c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x11c>)
    7ac8:	6842      	ldr	r2, [r0, #4]
    7aca:	4411      	add	r1, r2
    7acc:	6041      	str	r1, [r0, #4]
    7ace:	4628      	mov	r0, r5
    7ad0:	f007 ff63 	bl	f99a <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    7ad4:	4628      	mov	r0, r5
    7ad6:	f007 ff25 	bl	f924 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    7ada:	4601      	mov	r1, r0
    7adc:	4620      	mov	r0, r4
    7ade:	f007 fee4 	bl	f8aa <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x108>
    7ae2:	4d2f      	ldr	r5, [pc, #188]	; (7ba0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x120>)
    7ae4:	f894 6056 	ldrb.w	r6, [r4, #86]	; 0x56
    7ae8:	2100      	movs	r1, #0
    7aea:	6868      	ldr	r0, [r5, #4]
    7aec:	8001      	strh	r1, [r0, #0]
    7aee:	f007 fef2 	bl	f8d6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x134>
    7af2:	8860      	ldrh	r0, [r4, #2]
    7af4:	2813      	cmp	r0, #19
    7af6:	d013      	beq.n	7b20 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xa0>
    7af8:	dc09      	bgt.n	7b0e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8e>
    7afa:	2810      	cmp	r0, #16
    7afc:	d036      	beq.n	7b6c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xec>
    7afe:	2812      	cmp	r0, #18
    7b00:	d109      	bne.n	7b16 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x96>
    7b02:	e031      	b.n	7b68 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe8>
    7b04:	4620      	mov	r0, r4
    7b06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7b0a:	f000 bb39 	b.w	8180 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x180>
    7b0e:	2815      	cmp	r0, #21
    7b10:	d00f      	beq.n	7b32 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
    7b12:	281d      	cmp	r0, #29
    7b14:	d00d      	beq.n	7b32 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
    7b16:	f240 616f 	movw	r1, #1647	; 0x66f
    7b1a:	202d      	movs	r0, #45	; 0x2d
    7b1c:	f7fd fb28 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7b20:	2100      	movs	r1, #0
    7b22:	6868      	ldr	r0, [r5, #4]
    7b24:	f007 fb0c 	bl	f140 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    7b28:	2101      	movs	r1, #1
    7b2a:	6868      	ldr	r0, [r5, #4]
    7b2c:	f007 fed3 	bl	f8d6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x134>
    7b30:	e020      	b.n	7b74 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
    7b32:	2101      	movs	r1, #1
    7b34:	6868      	ldr	r0, [r5, #4]
    7b36:	f007 fb03 	bl	f140 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    7b3a:	2101      	movs	r1, #1
    7b3c:	6868      	ldr	r0, [r5, #4]
    7b3e:	f007 feca 	bl	f8d6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x134>
    7b42:	b136      	cbz	r6, 7b52 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xd2>
    7b44:	f104 0157 	add.w	r1, r4, #87	; 0x57
    7b48:	6868      	ldr	r0, [r5, #4]
    7b4a:	f007 fb14 	bl	f176 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    7b4e:	2101      	movs	r1, #1
    7b50:	e006      	b.n	7b60 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe0>
    7b52:	f104 0150 	add.w	r1, r4, #80	; 0x50
    7b56:	6868      	ldr	r0, [r5, #4]
    7b58:	f007 fb0d 	bl	f176 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    7b5c:	f894 104f 	ldrb.w	r1, [r4, #79]	; 0x4f
    7b60:	6868      	ldr	r0, [r5, #4]
    7b62:	f007 fb0e 	bl	f182 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    7b66:	e005      	b.n	7b74 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
    7b68:	2106      	movs	r1, #6
    7b6a:	e000      	b.n	7b6e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xee>
    7b6c:	2102      	movs	r1, #2
    7b6e:	6868      	ldr	r0, [r5, #4]
    7b70:	f007 fae6 	bl	f140 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    7b74:	4620      	mov	r0, r4
    7b76:	f000 fcaf 	bl	84d8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4d8>
    7b7a:	8860      	ldrh	r0, [r4, #2]
    7b7c:	281d      	cmp	r0, #29
    7b7e:	d006      	beq.n	7b8e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10e>
    7b80:	2815      	cmp	r0, #21
    7b82:	d004      	beq.n	7b8e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10e>
    7b84:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    7b86:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7b88:	6868      	ldr	r0, [r5, #4]
    7b8a:	f007 fac9 	bl	f120 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>
    7b8e:	4639      	mov	r1, r7
    7b90:	4620      	mov	r0, r4
    7b92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7b96:	f000 b9f1 	b.w	7f7c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ec>
    7b9a:	0000      	.short	0x0000
    7b9c:	20000fb0 	.word	0x20000fb0
    7ba0:	20000118 	.word	0x20000118
    7ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7ba8:	4d2e      	ldr	r5, [pc, #184]	; (7c64 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e4>)
    7baa:	4607      	mov	r7, r0
    7bac:	7828      	ldrb	r0, [r5, #0]
    7bae:	2802      	cmp	r0, #2
    7bb0:	d005      	beq.n	7bbe <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
    7bb2:	7828      	ldrb	r0, [r5, #0]
    7bb4:	2803      	cmp	r0, #3
    7bb6:	d002      	beq.n	7bbe <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
    7bb8:	f640 41e5 	movw	r1, #3301	; 0xce5
    7bbc:	e028      	b.n	7c10 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x190>
    7bbe:	4c2a      	ldr	r4, [pc, #168]	; (7c68 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e8>)
    7bc0:	6820      	ldr	r0, [r4, #0]
    7bc2:	7b01      	ldrb	r1, [r0, #12]
    7bc4:	b109      	cbz	r1, 7bca <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x14a>
    7bc6:	f007 fe7b 	bl	f8c0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x11e>
    7bca:	f8d4 c004 	ldr.w	ip, [r4, #4]
    7bce:	f04f 0800 	mov.w	r8, #0
    7bd2:	f89c 0000 	ldrb.w	r0, [ip]
    7bd6:	f000 060f 	and.w	r6, r0, #15
    7bda:	b33f      	cbz	r7, 7c2c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ac>
    7bdc:	6821      	ldr	r1, [r4, #0]
    7bde:	09c0      	lsrs	r0, r0, #7
    7be0:	f101 0349 	add.w	r3, r1, #73	; 0x49
    7be4:	f891 2048 	ldrb.w	r2, [r1, #72]	; 0x48
    7be8:	f10c 0109 	add.w	r1, ip, #9
    7bec:	f006 fea9 	bl	e942 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    7bf0:	b1e0      	cbz	r0, 7c2c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ac>
    7bf2:	4641      	mov	r1, r8
    7bf4:	6860      	ldr	r0, [r4, #4]
    7bf6:	f007 fa83 	bl	f100 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>
    7bfa:	b1b8      	cbz	r0, 7c2c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ac>
    7bfc:	782a      	ldrb	r2, [r5, #0]
    7bfe:	6820      	ldr	r0, [r4, #0]
    7c00:	4631      	mov	r1, r6
    7c02:	2a02      	cmp	r2, #2
    7c04:	d007      	beq.n	7c16 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x196>
    7c06:	782a      	ldrb	r2, [r5, #0]
    7c08:	2a03      	cmp	r2, #3
    7c0a:	d004      	beq.n	7c16 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x196>
    7c0c:	f640 41be 	movw	r1, #3262	; 0xcbe
    7c10:	202d      	movs	r0, #45	; 0x2d
    7c12:	f7fd faad 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7c16:	68a2      	ldr	r2, [r4, #8]
    7c18:	782b      	ldrb	r3, [r5, #0]
    7c1a:	6952      	ldr	r2, [r2, #20]
    7c1c:	f06f 0607 	mvn.w	r6, #7
    7c20:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    7c24:	58d2      	ldr	r2, [r2, r3]
    7c26:	4790      	blx	r2
    7c28:	4606      	mov	r6, r0
    7c2a:	e000      	b.n	7c2e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ae>
    7c2c:	2601      	movs	r6, #1
    7c2e:	7ba8      	ldrb	r0, [r5, #14]
    7c30:	b118      	cbz	r0, 7c3a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ba>
    7c32:	f003 ffd3 	bl	bbdc <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7c36:	f003 fdf7 	bl	b828 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    7c3a:	2e00      	cmp	r6, #0
    7c3c:	d00f      	beq.n	7c5e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1de>
    7c3e:	6820      	ldr	r0, [r4, #0]
    7c40:	f007 fef8 	bl	fa34 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    7c44:	b130      	cbz	r0, 7c54 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1d4>
    7c46:	f003 ffe9 	bl	bc1c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7c4a:	68a0      	ldr	r0, [r4, #8]
    7c4c:	6880      	ldr	r0, [r0, #8]
    7c4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7c52:	4700      	bx	r0
    7c54:	6820      	ldr	r0, [r4, #0]
    7c56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7c5a:	f000 ba91 	b.w	8180 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x180>
    7c5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7c62:	0000      	.short	0x0000
    7c64:	20000fb0 	.word	0x20000fb0
    7c68:	20000118 	.word	0x20000118
    7c6c:	b510      	push	{r4, lr}
    7c6e:	2903      	cmp	r1, #3
    7c70:	d002      	beq.n	7c78 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1f8>
    7c72:	2905      	cmp	r1, #5
    7c74:	d10a      	bne.n	7c8c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x20c>
    7c76:	e002      	b.n	7c7e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1fe>
    7c78:	f000 fb7c 	bl	8374 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x374>
    7c7c:	e003      	b.n	7c86 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x206>
    7c7e:	4904      	ldr	r1, [pc, #16]	; (7c90 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x210>)
    7c80:	6809      	ldr	r1, [r1, #0]
    7c82:	b109      	cbz	r1, 7c88 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x208>
    7c84:	4788      	blx	r1
    7c86:	b108      	cbz	r0, 7c8c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x20c>
    7c88:	2000      	movs	r0, #0
    7c8a:	bd10      	pop	{r4, pc}
    7c8c:	2001      	movs	r0, #1
    7c8e:	bd10      	pop	{r4, pc}
    7c90:	20000124 	.word	0x20000124
    7c94:	4a09      	ldr	r2, [pc, #36]	; (7cbc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x23c>)
    7c96:	0003      	movs	r3, r0
    7c98:	6810      	ldr	r0, [r2, #0]
    7c9a:	d001      	beq.n	7ca0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x220>
    7c9c:	f000 ba70 	b.w	8180 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x180>
    7ca0:	2900      	cmp	r1, #0
    7ca2:	d009      	beq.n	7cb8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x238>
    7ca4:	6891      	ldr	r1, [r2, #8]
    7ca6:	4a06      	ldr	r2, [pc, #24]	; (7cc0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x240>)
    7ca8:	6909      	ldr	r1, [r1, #16]
    7caa:	7812      	ldrb	r2, [r2, #0]
    7cac:	f06f 030f 	mvn.w	r3, #15
    7cb0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    7cb4:	5889      	ldr	r1, [r1, r2]
    7cb6:	4708      	bx	r1
    7cb8:	4770      	bx	lr
    7cba:	0000      	.short	0x0000
    7cbc:	20000118 	.word	0x20000118
    7cc0:	20000fb0 	.word	0x20000fb0
    7cc4:	b570      	push	{r4, r5, r6, lr}
    7cc6:	4604      	mov	r4, r0
    7cc8:	8840      	ldrh	r0, [r0, #2]
    7cca:	2810      	cmp	r0, #16
    7ccc:	d019      	beq.n	7d02 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x282>
    7cce:	4d10      	ldr	r5, [pc, #64]	; (7d10 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x290>)
    7cd0:	7ba8      	ldrb	r0, [r5, #14]
    7cd2:	b120      	cbz	r0, 7cde <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x25e>
    7cd4:	f003 fdc8 	bl	b868 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    7cd8:	2040      	movs	r0, #64	; 0x40
    7cda:	f003 ff8d 	bl	bbf8 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    7cde:	480d      	ldr	r0, [pc, #52]	; (7d14 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x294>)
    7ce0:	6840      	ldr	r0, [r0, #4]
    7ce2:	f004 fa37 	bl	c154 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7ce6:	78a0      	ldrb	r0, [r4, #2]
    7ce8:	0740      	lsls	r0, r0, #29
    7cea:	d404      	bmi.n	7cf6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x276>
    7cec:	2100      	movs	r1, #0
    7cee:	7922      	ldrb	r2, [r4, #4]
    7cf0:	4608      	mov	r0, r1
    7cf2:	f004 fabb 	bl	c26c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    7cf6:	2000      	movs	r0, #0
    7cf8:	f004 f8d0 	bl	be9c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    7cfc:	2002      	movs	r0, #2
    7cfe:	7028      	strb	r0, [r5, #0]
    7d00:	bd70      	pop	{r4, r5, r6, pc}
    7d02:	4620      	mov	r0, r4
    7d04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7d08:	2101      	movs	r1, #1
    7d0a:	f7ff bec1 	b.w	7a90 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    7d0e:	0000      	.short	0x0000
    7d10:	20000fb0 	.word	0x20000fb0
    7d14:	20000118 	.word	0x20000118
    7d18:	b510      	push	{r4, lr}
    7d1a:	4c12      	ldr	r4, [pc, #72]	; (7d64 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e4>)
    7d1c:	6820      	ldr	r0, [r4, #0]
    7d1e:	f000 f825 	bl	7d6c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ec>
    7d22:	6820      	ldr	r0, [r4, #0]
    7d24:	f007 fe86 	bl	fa34 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    7d28:	2800      	cmp	r0, #0
    7d2a:	6820      	ldr	r0, [r4, #0]
    7d2c:	d00b      	beq.n	7d46 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2c6>
    7d2e:	490e      	ldr	r1, [pc, #56]	; (7d68 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e8>)
    7d30:	780a      	ldrb	r2, [r1, #0]
    7d32:	2a02      	cmp	r2, #2
    7d34:	d00b      	beq.n	7d4e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ce>
    7d36:	780a      	ldrb	r2, [r1, #0]
    7d38:	2a03      	cmp	r2, #3
    7d3a:	d008      	beq.n	7d4e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ce>
    7d3c:	f44f 613f 	mov.w	r1, #3056	; 0xbf0
    7d40:	202d      	movs	r0, #45	; 0x2d
    7d42:	f7fd fa15 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7d46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7d4a:	f000 ba19 	b.w	8180 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x180>
    7d4e:	68a2      	ldr	r2, [r4, #8]
    7d50:	7809      	ldrb	r1, [r1, #0]
    7d52:	68d2      	ldr	r2, [r2, #12]
    7d54:	f06f 0307 	mvn.w	r3, #7
    7d58:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    7d5c:	5851      	ldr	r1, [r2, r1]
    7d5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7d62:	4708      	bx	r1
    7d64:	20000118 	.word	0x20000118
    7d68:	20000fb0 	.word	0x20000fb0
    7d6c:	b510      	push	{r4, lr}
    7d6e:	7b01      	ldrb	r1, [r0, #12]
    7d70:	b109      	cbz	r1, 7d76 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2f6>
    7d72:	f007 fda5 	bl	f8c0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x11e>
    7d76:	4805      	ldr	r0, [pc, #20]	; (7d8c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x30c>)
    7d78:	7b80      	ldrb	r0, [r0, #14]
    7d7a:	2800      	cmp	r0, #0
    7d7c:	d005      	beq.n	7d8a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x30a>
    7d7e:	f003 ff2d 	bl	bbdc <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7d82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7d86:	f003 bd4f 	b.w	b828 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    7d8a:	bd10      	pop	{r4, pc}
    7d8c:	20000fb0 	.word	0x20000fb0

00007d90 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
    7d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7d94:	4d5e      	ldr	r5, [pc, #376]	; (7f10 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x180>)
    7d96:	4604      	mov	r4, r0
    7d98:	b08a      	sub	sp, #40	; 0x28
    7d9a:	7828      	ldrb	r0, [r5, #0]
    7d9c:	bbf0      	cbnz	r0, 7e1c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8c>
    7d9e:	7820      	ldrb	r0, [r4, #0]
    7da0:	28ff      	cmp	r0, #255	; 0xff
    7da2:	d03e      	beq.n	7e22 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x92>
    7da4:	2600      	movs	r6, #0
    7da6:	81ae      	strh	r6, [r5, #12]
    7da8:	606e      	str	r6, [r5, #4]
    7daa:	706e      	strb	r6, [r5, #1]
    7dac:	70ae      	strb	r6, [r5, #2]
    7dae:	f884 6061 	strb.w	r6, [r4, #97]	; 0x61
    7db2:	4b58      	ldr	r3, [pc, #352]	; (7f14 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x184>)
    7db4:	af06      	add	r7, sp, #24
    7db6:	f8df 9160 	ldr.w	r9, [pc, #352]	; 7f18 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x188>
    7dba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    7dbc:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    7dc0:	f8d9 0008 	ldr.w	r0, [r9, #8]
    7dc4:	6840      	ldr	r0, [r0, #4]
    7dc6:	9009      	str	r0, [sp, #36]	; 0x24
    7dc8:	a806      	add	r0, sp, #24
    7dca:	f004 f83b 	bl	be44 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    7dce:	f004 f919 	bl	c004 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    7dd2:	f004 fba5 	bl	c520 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>
    7dd6:	f003 ff01 	bl	bbdc <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7dda:	f003 fd25 	bl	b828 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    7dde:	484f      	ldr	r0, [pc, #316]	; (7f1c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x18c>)
    7de0:	f004 fa76 	bl	c2d0 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    7de4:	484b      	ldr	r0, [pc, #300]	; (7f14 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x184>)
    7de6:	1f00      	subs	r0, r0, #4
    7de8:	f004 fa7c 	bl	c2e4 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    7dec:	f104 0020 	add.w	r0, r4, #32
    7df0:	4607      	mov	r7, r0
    7df2:	f007 fdd2 	bl	f99a <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    7df6:	4638      	mov	r0, r7
    7df8:	f007 fd94 	bl	f924 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    7dfc:	4601      	mov	r1, r0
    7dfe:	4620      	mov	r0, r4
    7e00:	f007 fd53 	bl	f8aa <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x108>
    7e04:	f994 000e 	ldrsb.w	r0, [r4, #14]
    7e08:	f004 f982 	bl	c110 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    7e0c:	7921      	ldrb	r1, [r4, #4]
    7e0e:	2000      	movs	r0, #0
    7e10:	f003 ffa0 	bl	bd54 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    7e14:	60a8      	str	r0, [r5, #8]
    7e16:	b140      	cbz	r0, 7e2a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x9a>
    7e18:	7ea0      	ldrb	r0, [r4, #26]
    7e1a:	e000      	b.n	7e1e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8e>
    7e1c:	e001      	b.n	7e22 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x92>
    7e1e:	b960      	cbnz	r0, 7e3a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xaa>
    7e20:	e006      	b.n	7e30 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa0>
    7e22:	200c      	movs	r0, #12
    7e24:	b00a      	add	sp, #40	; 0x28
    7e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7e2a:	2001      	movs	r0, #1
    7e2c:	7028      	strb	r0, [r5, #0]
    7e2e:	e06c      	b.n	7f0a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x17a>
    7e30:	7e20      	ldrb	r0, [r4, #24]
    7e32:	b910      	cbnz	r0, 7e3a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xaa>
    7e34:	78a0      	ldrb	r0, [r4, #2]
    7e36:	0740      	lsls	r0, r0, #29
    7e38:	d529      	bpl.n	7e8e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xfe>
    7e3a:	f005 fa0c 	bl	d256 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    7e3e:	4682      	mov	sl, r0
    7e40:	4651      	mov	r1, sl
    7e42:	6c60      	ldr	r0, [r4, #68]	; 0x44
    7e44:	f7fa fd94 	bl	2970 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    7e48:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 7f20 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x190>
    7e4c:	4607      	mov	r7, r0
    7e4e:	fb90 f1f8 	sdiv	r1, r0, r8
    7e52:	fb08 7011 	mls	r0, r8, r1, r7
    7e56:	4241      	negs	r1, r0
    7e58:	4650      	mov	r0, sl
    7e5a:	f7fa fd57 	bl	290c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    7e5e:	6460      	str	r0, [r4, #68]	; 0x44
    7e60:	fb97 f0f8 	sdiv	r0, r7, r8
    7e64:	6c21      	ldr	r1, [r4, #64]	; 0x40
    7e66:	4408      	add	r0, r1
    7e68:	6420      	str	r0, [r4, #64]	; 0x40
    7e6a:	f7fe fee9 	bl	6c40 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    7e6e:	6c21      	ldr	r1, [r4, #64]	; 0x40
    7e70:	4288      	cmp	r0, r1
    7e72:	d80c      	bhi.n	7e8e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xfe>
    7e74:	e9c4 6a10 	strd	r6, sl, [r4, #64]	; 0x40
    7e78:	2101      	movs	r1, #1
    7e7a:	4620      	mov	r0, r4
    7e7c:	f007 fcd9 	bl	f832 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x90>
    7e80:	78a0      	ldrb	r0, [r4, #2]
    7e82:	0740      	lsls	r0, r0, #29
    7e84:	d503      	bpl.n	7e8e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xfe>
    7e86:	2101      	movs	r1, #1
    7e88:	4620      	mov	r0, r4
    7e8a:	f000 faaf 	bl	83ec <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3ec>
    7e8e:	f104 0130 	add.w	r1, r4, #48	; 0x30
    7e92:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    7e94:	f006 fcc7 	bl	e826 <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>
    7e98:	f104 0138 	add.w	r1, r4, #56	; 0x38
    7e9c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    7e9e:	f006 fcc5 	bl	e82c <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>
    7ea2:	f7fe ff33 	bl	6d0c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    7ea6:	f8d9 0004 	ldr.w	r0, [r9, #4]
    7eaa:	1cc0      	adds	r0, r0, #3
    7eac:	f006 fdc3 	bl	ea36 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    7eb0:	73a8      	strb	r0, [r5, #14]
    7eb2:	78a0      	ldrb	r0, [r4, #2]
    7eb4:	07c0      	lsls	r0, r0, #31
    7eb6:	d028      	beq.n	7f0a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x17a>
    7eb8:	a903      	add	r1, sp, #12
    7eba:	2000      	movs	r0, #0
    7ebc:	f006 fb8c 	bl	e5d8 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    7ec0:	b120      	cbz	r0, 7ecc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x13c>
    7ec2:	f640 11b9 	movw	r1, #2489	; 0x9b9
    7ec6:	202d      	movs	r0, #45	; 0x2d
    7ec8:	f7fd f952 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7ecc:	20ff      	movs	r0, #255	; 0xff
    7ece:	73e8      	strb	r0, [r5, #15]
    7ed0:	69e6      	ldr	r6, [r4, #28]
    7ed2:	f106 070a 	add.w	r7, r6, #10
    7ed6:	e013      	b.n	7f00 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x170>
    7ed8:	9c05      	ldr	r4, [sp, #20]
    7eda:	42b4      	cmp	r4, r6
    7edc:	d010      	beq.n	7f00 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x170>
    7ede:	7a72      	ldrb	r2, [r6, #9]
    7ee0:	7a60      	ldrb	r0, [r4, #9]
    7ee2:	463b      	mov	r3, r7
    7ee4:	f104 010a 	add.w	r1, r4, #10
    7ee8:	f006 fd2b 	bl	e942 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    7eec:	b140      	cbz	r0, 7f00 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x170>
    7eee:	78a0      	ldrb	r0, [r4, #2]
    7ef0:	73e8      	strb	r0, [r5, #15]
    7ef2:	f8d4 0003 	ldr.w	r0, [r4, #3]
    7ef6:	6128      	str	r0, [r5, #16]
    7ef8:	f8b4 0007 	ldrh.w	r0, [r4, #7]
    7efc:	82a8      	strh	r0, [r5, #20]
    7efe:	e004      	b.n	7f0a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x17a>
    7f00:	a803      	add	r0, sp, #12
    7f02:	f7fd fb6d 	bl	55e0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    7f06:	2800      	cmp	r0, #0
    7f08:	d0e6      	beq.n	7ed8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x148>
    7f0a:	2000      	movs	r0, #0
    7f0c:	e78a      	b.n	7e24 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x94>
    7f0e:	0000      	.short	0x0000
    7f10:	20000fb0 	.word	0x20000fb0
    7f14:	00008500 	.word	0x00008500
    7f18:	20000118 	.word	0x20000118
    7f1c:	8e89bed6 	.word	0x8e89bed6
    7f20:	000f4240 	.word	0x000f4240
    7f24:	b510      	push	{r4, lr}
    7f26:	4604      	mov	r4, r0
    7f28:	f7ff ff32 	bl	7d90 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
    7f2c:	2800      	cmp	r0, #0
    7f2e:	d108      	bne.n	7f42 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1b2>
    7f30:	4804      	ldr	r0, [pc, #16]	; (7f44 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1b4>)
    7f32:	7800      	ldrb	r0, [r0, #0]
    7f34:	2801      	cmp	r0, #1
    7f36:	d003      	beq.n	7f40 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1b0>
    7f38:	2100      	movs	r1, #0
    7f3a:	4620      	mov	r0, r4
    7f3c:	f7ff fda8 	bl	7a90 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    7f40:	2000      	movs	r0, #0
    7f42:	bd10      	pop	{r4, pc}
    7f44:	20000fb0 	.word	0x20000fb0
    7f48:	480a      	ldr	r0, [pc, #40]	; (7f74 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e4>)
    7f4a:	b510      	push	{r4, lr}
    7f4c:	490a      	ldr	r1, [pc, #40]	; (7f78 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e8>)
    7f4e:	6804      	ldr	r4, [r0, #0]
    7f50:	7808      	ldrb	r0, [r1, #0]
    7f52:	2800      	cmp	r0, #0
    7f54:	d00d      	beq.n	7f72 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e2>
    7f56:	7808      	ldrb	r0, [r1, #0]
    7f58:	2802      	cmp	r0, #2
    7f5a:	d002      	beq.n	7f62 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d2>
    7f5c:	7808      	ldrb	r0, [r1, #0]
    7f5e:	2803      	cmp	r0, #3
    7f60:	d102      	bne.n	7f68 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d8>
    7f62:	4620      	mov	r0, r4
    7f64:	f7ff ff02 	bl	7d6c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ec>
    7f68:	4620      	mov	r0, r4
    7f6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7f6e:	f000 b907 	b.w	8180 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x180>
    7f72:	bd10      	pop	{r4, pc}
    7f74:	20000118 	.word	0x20000118
    7f78:	20000fb0 	.word	0x20000fb0
    7f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7f80:	4604      	mov	r4, r0
    7f82:	4827      	ldr	r0, [pc, #156]	; (8020 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x20>)
    7f84:	460d      	mov	r5, r1
    7f86:	6840      	ldr	r0, [r0, #4]
    7f88:	f004 f8e4 	bl	c154 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7f8c:	4e25      	ldr	r6, [pc, #148]	; (8024 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x24>)
    7f8e:	2004      	movs	r0, #4
    7f90:	7030      	strb	r0, [r6, #0]
    7f92:	b325      	cbz	r5, 7fde <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x24e>
    7f94:	8860      	ldrh	r0, [r4, #2]
    7f96:	2810      	cmp	r0, #16
    7f98:	d02a      	beq.n	7ff0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x260>
    7f9a:	f104 0020 	add.w	r0, r4, #32
    7f9e:	4680      	mov	r8, r0
    7fa0:	68b5      	ldr	r5, [r6, #8]
    7fa2:	f007 fcb3 	bl	f90c <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    7fa6:	4607      	mov	r7, r0
    7fa8:	4640      	mov	r0, r8
    7faa:	f007 fcd8 	bl	f95e <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    7fae:	1a38      	subs	r0, r7, r0
    7fb0:	1e40      	subs	r0, r0, #1
    7fb2:	b2c0      	uxtb	r0, r0
    7fb4:	8861      	ldrh	r1, [r4, #2]
    7fb6:	2228      	movs	r2, #40	; 0x28
    7fb8:	f000 fade 	bl	8578 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
    7fbc:	4405      	add	r5, r0
    7fbe:	78a0      	ldrb	r0, [r4, #2]
    7fc0:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    7fc4:	b130      	cbz	r0, 7fd4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x244>
    7fc6:	6870      	ldr	r0, [r6, #4]
    7fc8:	4405      	add	r5, r0
    7fca:	f007 fd21 	bl	fa10 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>
    7fce:	4428      	add	r0, r5
    7fd0:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0
    7fd4:	7922      	ldrb	r2, [r4, #4]
    7fd6:	4629      	mov	r1, r5
    7fd8:	2000      	movs	r0, #0
    7fda:	f004 f8d1 	bl	c180 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    7fde:	8860      	ldrh	r0, [r4, #2]
    7fe0:	2813      	cmp	r0, #19
    7fe2:	d013      	beq.n	800c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc>
    7fe4:	dc09      	bgt.n	7ffa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x26a>
    7fe6:	2810      	cmp	r0, #16
    7fe8:	d017      	beq.n	801a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a>
    7fea:	2812      	cmp	r0, #18
    7fec:	d109      	bne.n	8002 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2>
    7fee:	e00d      	b.n	800c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc>
    7ff0:	7921      	ldrb	r1, [r4, #4]
    7ff2:	2000      	movs	r0, #0
    7ff4:	f003 fe62 	bl	bcbc <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    7ff8:	e7f1      	b.n	7fde <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x24e>
    7ffa:	2815      	cmp	r0, #21
    7ffc:	d006      	beq.n	800c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc>
    7ffe:	281d      	cmp	r0, #29
    8000:	d004      	beq.n	800c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc>
    8002:	f640 5173 	movw	r1, #3443	; 0xd73
    8006:	202d      	movs	r0, #45	; 0x2d
    8008:	f7fd f8b2 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    800c:	7922      	ldrb	r2, [r4, #4]
    800e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    8012:	2101      	movs	r1, #1
    8014:	2000      	movs	r0, #0
    8016:	f004 b929 	b.w	c26c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    801a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    801e:	0000      	.short	0x0000
    8020:	20000118 	.word	0x20000118
    8024:	20000fb0 	.word	0x20000fb0
    8028:	b510      	push	{r4, lr}
    802a:	4604      	mov	r4, r0
    802c:	7800      	ldrb	r0, [r0, #0]
    802e:	460b      	mov	r3, r1
    8030:	f884 0095 	strb.w	r0, [r4, #149]	; 0x95
    8034:	29ff      	cmp	r1, #255	; 0xff
    8036:	d010      	beq.n	805a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5a>
    8038:	f104 0297 	add.w	r2, r4, #151	; 0x97
    803c:	1e51      	subs	r1, r2, #1
    803e:	4618      	mov	r0, r3
    8040:	f7fe fd7c 	bl	6b3c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    8044:	b130      	cbz	r0, 8054 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x54>
    8046:	f894 0096 	ldrb.w	r0, [r4, #150]	; 0x96
    804a:	f040 0002 	orr.w	r0, r0, #2
    804e:	f884 0096 	strb.w	r0, [r4, #150]	; 0x96
    8052:	e011      	b.n	8078 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x78>
    8054:	f640 71af 	movw	r1, #4015	; 0xfaf
    8058:	e020      	b.n	809c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9c>
    805a:	4812      	ldr	r0, [pc, #72]	; (80a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa4>)
    805c:	6840      	ldr	r0, [r0, #4]
    805e:	7801      	ldrb	r1, [r0, #0]
    8060:	f3c1 1180 	ubfx	r1, r1, #6, #1
    8064:	f884 1096 	strb.w	r1, [r4, #150]	; 0x96
    8068:	f8d0 1003 	ldr.w	r1, [r0, #3]
    806c:	f8c4 1097 	str.w	r1, [r4, #151]	; 0x97
    8070:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    8074:	f8a4 009b 	strh.w	r0, [r4, #155]	; 0x9b
    8078:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
    807c:	287f      	cmp	r0, #127	; 0x7f
    807e:	d00b      	beq.n	8098 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x98>
    8080:	f884 009d 	strb.w	r0, [r4, #157]	; 0x9d
    8084:	207f      	movs	r0, #127	; 0x7f
    8086:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    808a:	347e      	adds	r4, #126	; 0x7e
    808c:	20ff      	movs	r0, #255	; 0xff
    808e:	75a0      	strb	r0, [r4, #22]
    8090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8094:	f7ff b9a2 	b.w	73dc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    8098:	f640 6125 	movw	r1, #3621	; 0xe25
    809c:	202d      	movs	r0, #45	; 0x2d
    809e:	f7fd f867 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    80a2:	0000      	.short	0x0000
    80a4:	20000118 	.word	0x20000118
    80a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    80ac:	4690      	mov	r8, r2
    80ae:	460e      	mov	r6, r1
    80b0:	4604      	mov	r4, r0
    80b2:	2903      	cmp	r1, #3
    80b4:	d004      	beq.n	80c0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc0>
    80b6:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
    80ba:	b108      	cbz	r0, 80c0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc0>
    80bc:	2001      	movs	r0, #1
    80be:	e000      	b.n	80c2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc2>
    80c0:	2000      	movs	r0, #0
    80c2:	4681      	mov	r9, r0
    80c4:	f003 fda4 	bl	bc10 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>
    80c8:	4605      	mov	r5, r0
    80ca:	2e03      	cmp	r6, #3
    80cc:	d003      	beq.n	80d6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd6>
    80ce:	2701      	movs	r7, #1
    80d0:	2e05      	cmp	r6, #5
    80d2:	d005      	beq.n	80e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe0>
    80d4:	e008      	b.n	80e8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe8>
    80d6:	78a0      	ldrb	r0, [r4, #2]
    80d8:	2702      	movs	r7, #2
    80da:	f3c0 0040 	ubfx	r0, r0, #1, #1
    80de:	e001      	b.n	80e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe4>
    80e0:	78a0      	ldrb	r0, [r4, #2]
    80e2:	07c0      	lsls	r0, r0, #31
    80e4:	2800      	cmp	r0, #0
    80e6:	d042      	beq.n	816e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16e>
    80e8:	f1b9 0f00 	cmp.w	r9, #0
    80ec:	d13e      	bne.n	816c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16c>
    80ee:	4822      	ldr	r0, [pc, #136]	; (8178 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x178>)
    80f0:	7b80      	ldrb	r0, [r0, #14]
    80f2:	b140      	cbz	r0, 8106 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x106>
    80f4:	f006 fca2 	bl	ea3c <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    80f8:	f888 0000 	strb.w	r0, [r8]
    80fc:	28ff      	cmp	r0, #255	; 0xff
    80fe:	d002      	beq.n	8106 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x106>
    8100:	f7fe fd36 	bl	6b70 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    8104:	4305      	orrs	r5, r0
    8106:	4e1d      	ldr	r6, [pc, #116]	; (817c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x17c>)
    8108:	f894 204f 	ldrb.w	r2, [r4, #79]	; 0x4f
    810c:	f104 0350 	add.w	r3, r4, #80	; 0x50
    8110:	6871      	ldr	r1, [r6, #4]
    8112:	f811 0b03 	ldrb.w	r0, [r1], #3
    8116:	f3c0 1080 	ubfx	r0, r0, #6, #1
    811a:	f006 fc12 	bl	e942 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    811e:	f898 1000 	ldrb.w	r1, [r8]
    8122:	29ff      	cmp	r1, #255	; 0xff
    8124:	d004      	beq.n	8130 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x130>
    8126:	b990      	cbnz	r0, 814e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14e>
    8128:	7e60      	ldrb	r0, [r4, #25]
    812a:	4288      	cmp	r0, r1
    812c:	d00f      	beq.n	814e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14e>
    812e:	e008      	b.n	8142 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x142>
    8130:	b138      	cbz	r0, 8142 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x142>
    8132:	6871      	ldr	r1, [r6, #4]
    8134:	f811 0b03 	ldrb.w	r0, [r1], #3
    8138:	f3c0 1080 	ubfx	r0, r0, #6, #1
    813c:	f007 fb36 	bl	f7ac <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    8140:	b128      	cbz	r0, 814e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14e>
    8142:	2000      	movs	r0, #0
    8144:	78a1      	ldrb	r1, [r4, #2]
    8146:	0749      	lsls	r1, r1, #29
    8148:	d503      	bpl.n	8152 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x152>
    814a:	b990      	cbnz	r0, 8172 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x172>
    814c:	e00e      	b.n	816c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16c>
    814e:	2001      	movs	r0, #1
    8150:	e7f8      	b.n	8144 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x144>
    8152:	b975      	cbnz	r5, 8172 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x172>
    8154:	7be0      	ldrb	r0, [r4, #15]
    8156:	b108      	cbz	r0, 815c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x15c>
    8158:	42b8      	cmp	r0, r7
    815a:	d107      	bne.n	816c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16c>
    815c:	6871      	ldr	r1, [r6, #4]
    815e:	f811 0b03 	ldrb.w	r0, [r1], #3
    8162:	f3c0 1080 	ubfx	r0, r0, #6, #1
    8166:	f007 fb21 	bl	f7ac <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    816a:	b110      	cbz	r0, 8172 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x172>
    816c:	2000      	movs	r0, #0
    816e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8172:	2001      	movs	r0, #1
    8174:	e7fb      	b.n	816e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16e>
    8176:	0000      	.short	0x0000
    8178:	20000fb0 	.word	0x20000fb0
    817c:	20000118 	.word	0x20000118
    8180:	b570      	push	{r4, r5, r6, lr}
    8182:	4604      	mov	r4, r0
    8184:	6a80      	ldr	r0, [r0, #40]	; 0x28
    8186:	4d13      	ldr	r5, [pc, #76]	; (81d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d4>)
    8188:	1c40      	adds	r0, r0, #1
    818a:	62a0      	str	r0, [r4, #40]	; 0x28
    818c:	7ba8      	ldrb	r0, [r5, #14]
    818e:	2600      	movs	r6, #0
    8190:	b120      	cbz	r0, 819c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x19c>
    8192:	f003 fd23 	bl	bbdc <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    8196:	f003 fb47 	bl	b828 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    819a:	73ae      	strb	r6, [r5, #14]
    819c:	702e      	strb	r6, [r5, #0]
    819e:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
    81a2:	b108      	cbz	r0, 81a8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a8>
    81a4:	2101      	movs	r1, #1
    81a6:	e00f      	b.n	81c8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c8>
    81a8:	7b60      	ldrb	r0, [r4, #13]
    81aa:	b160      	cbz	r0, 81c6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c6>
    81ac:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    81ae:	4288      	cmp	r0, r1
    81b0:	d809      	bhi.n	81c6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c6>
    81b2:	2101      	movs	r1, #1
    81b4:	4620      	mov	r0, r4
    81b6:	f007 fc52 	bl	fa5e <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    81ba:	78a0      	ldrb	r0, [r4, #2]
    81bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    81c0:	07c0      	lsls	r0, r0, #31
    81c2:	f7ff b90b 	b.w	73dc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    81c6:	2100      	movs	r1, #0
    81c8:	4620      	mov	r0, r4
    81ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    81ce:	f007 bc46 	b.w	fa5e <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    81d2:	0000      	.short	0x0000
    81d4:	20000fb0 	.word	0x20000fb0
    81d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    81dc:	4604      	mov	r4, r0
    81de:	f890 0064 	ldrb.w	r0, [r0, #100]	; 0x64
    81e2:	4617      	mov	r7, r2
    81e4:	460d      	mov	r5, r1
    81e6:	f88d 0000 	strb.w	r0, [sp]
    81ea:	9800      	ldr	r0, [sp, #0]
    81ec:	9000      	str	r0, [sp, #0]
    81ee:	f89d 0000 	ldrb.w	r0, [sp]
    81f2:	b110      	cbz	r0, 81fa <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1fa>
    81f4:	f640 4124 	movw	r1, #3108	; 0xc24
    81f8:	e054      	b.n	82a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2a4>
    81fa:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
    81fe:	2600      	movs	r6, #0
    8200:	8828      	ldrh	r0, [r5, #0]
    8202:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
    8206:	2b00      	cmp	r3, #0
    8208:	d15c      	bne.n	82c4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2c4>
    820a:	6928      	ldr	r0, [r5, #16]
    820c:	f006 fc74 	bl	eaf8 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    8210:	f8a4 007e 	strh.w	r0, [r4, #126]	; 0x7e
    8214:	8b28      	ldrh	r0, [r5, #24]
    8216:	f8a4 0080 	strh.w	r0, [r4, #128]	; 0x80
    821a:	8b68      	ldrh	r0, [r5, #26]
    821c:	f8a4 0082 	strh.w	r0, [r4, #130]	; 0x82
    8220:	f895 0185 	ldrb.w	r0, [r5, #389]	; 0x185
    8224:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
    8228:	7e21      	ldrb	r1, [r4, #24]
    822a:	f104 0849 	add.w	r8, r4, #73	; 0x49
    822e:	b129      	cbz	r1, 823c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x23c>
    8230:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    8234:	4641      	mov	r1, r8
    8236:	f007 f9c6 	bl	f5c6 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    823a:	b940      	cbnz	r0, 824e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x24e>
    823c:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    8240:	b170      	cbz	r0, 8260 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x260>
    8242:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    8246:	4641      	mov	r1, r8
    8248:	f007 f9b4 	bl	f5b4 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x1a>
    824c:	b140      	cbz	r0, 8260 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x260>
    824e:	f8d4 0049 	ldr.w	r0, [r4, #73]	; 0x49
    8252:	f8c4 0072 	str.w	r0, [r4, #114]	; 0x72
    8256:	f8b4 004d 	ldrh.w	r0, [r4, #77]	; 0x4d
    825a:	f8a4 0076 	strh.w	r0, [r4, #118]	; 0x76
    825e:	e003      	b.n	8268 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x268>
    8260:	f8c4 6072 	str.w	r6, [r4, #114]	; 0x72
    8264:	f8a4 6076 	strh.w	r6, [r4, #118]	; 0x76
    8268:	4817      	ldr	r0, [pc, #92]	; (82c8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2c8>)
    826a:	2fff      	cmp	r7, #255	; 0xff
    826c:	6840      	ldr	r0, [r0, #4]
    826e:	7801      	ldrb	r1, [r0, #0]
    8270:	f3c1 1180 	ubfx	r1, r1, #6, #1
    8274:	f884 106b 	strb.w	r1, [r4, #107]	; 0x6b
    8278:	f850 1f03 	ldr.w	r1, [r0, #3]!
    827c:	d015      	beq.n	82aa <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2aa>
    827e:	67a1      	str	r1, [r4, #120]	; 0x78
    8280:	8880      	ldrh	r0, [r0, #4]
    8282:	f8a4 007c 	strh.w	r0, [r4, #124]	; 0x7c
    8286:	f104 026c 	add.w	r2, r4, #108	; 0x6c
    828a:	1e51      	subs	r1, r2, #1
    828c:	4638      	mov	r0, r7
    828e:	f7fe fc55 	bl	6b3c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    8292:	b128      	cbz	r0, 82a0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2a0>
    8294:	f814 0f6b 	ldrb.w	r0, [r4, #107]!
    8298:	f040 0002 	orr.w	r0, r0, #2
    829c:	7020      	strb	r0, [r4, #0]
    829e:	e00a      	b.n	82b6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2b6>
    82a0:	f640 4145 	movw	r1, #3141	; 0xc45
    82a4:	202d      	movs	r0, #45	; 0x2d
    82a6:	f7fc ff63 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    82aa:	f844 1f6c 	str.w	r1, [r4, #108]!
    82ae:	8880      	ldrh	r0, [r0, #4]
    82b0:	80a0      	strh	r0, [r4, #4]
    82b2:	60e6      	str	r6, [r4, #12]
    82b4:	8226      	strh	r6, [r4, #16]
    82b6:	8828      	ldrh	r0, [r5, #0]
    82b8:	f7fd fb74 	bl	59a4 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    82bc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    82c0:	f006 b867 	b.w	e392 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    82c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    82c8:	20000118 	.word	0x20000118
    82cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    82d0:	27ff      	movs	r7, #255	; 0xff
    82d2:	4604      	mov	r4, r0
    82d4:	2601      	movs	r6, #1
    82d6:	f88d 7000 	strb.w	r7, [sp]
    82da:	466a      	mov	r2, sp
    82dc:	2105      	movs	r1, #5
    82de:	f7ff fee3 	bl	80a8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa8>
    82e2:	b170      	cbz	r0, 8302 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x302>
    82e4:	4d22      	ldr	r5, [pc, #136]	; (8370 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x370>)
    82e6:	f8df 8084 	ldr.w	r8, [pc, #132]	; 836c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x36c>
    82ea:	6869      	ldr	r1, [r5, #4]
    82ec:	f898 200f 	ldrb.w	r2, [r8, #15]
    82f0:	f108 0310 	add.w	r3, r8, #16
    82f4:	f811 0b03 	ldrb.w	r0, [r1], #3
    82f8:	f3c0 1080 	ubfx	r0, r0, #6, #1
    82fc:	f006 fb21 	bl	e942 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    8300:	b118      	cbz	r0, 830a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x30a>
    8302:	2600      	movs	r6, #0
    8304:	4630      	mov	r0, r6
    8306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    830a:	686a      	ldr	r2, [r5, #4]
    830c:	69e0      	ldr	r0, [r4, #28]
    830e:	7812      	ldrb	r2, [r2, #0]
    8310:	f810 1f8d 	ldrb.w	r1, [r0, #141]!
    8314:	f3c2 1240 	ubfx	r2, r2, #5, #1
    8318:	4011      	ands	r1, r2
    831a:	7001      	strb	r1, [r0, #0]
    831c:	2201      	movs	r2, #1
    831e:	4620      	mov	r0, r4
    8320:	69e1      	ldr	r1, [r4, #28]
    8322:	f000 f891 	bl	8448 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x448>
    8326:	2300      	movs	r3, #0
    8328:	f89d 2000 	ldrb.w	r2, [sp]
    832c:	4620      	mov	r0, r4
    832e:	69e1      	ldr	r1, [r4, #28]
    8330:	f7ff ff52 	bl	81d8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d8>
    8334:	f884 7064 	strb.w	r7, [r4, #100]	; 0x64
    8338:	f7ff f850 	bl	73dc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    833c:	2100      	movs	r1, #0
    833e:	f888 1000 	strb.w	r1, [r8]
    8342:	460a      	mov	r2, r1
    8344:	4621      	mov	r1, r4
    8346:	69e0      	ldr	r0, [r4, #28]
    8348:	f000 fa58 	bl	87fc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>
    834c:	6868      	ldr	r0, [r5, #4]
    834e:	69e1      	ldr	r1, [r4, #28]
    8350:	f8d0 2003 	ldr.w	r2, [r0, #3]
    8354:	f841 2f03 	str.w	r2, [r1, #3]!
    8358:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    835c:	808a      	strh	r2, [r1, #4]
    835e:	7800      	ldrb	r0, [r0, #0]
    8360:	69e1      	ldr	r1, [r4, #28]
    8362:	f3c0 1080 	ubfx	r0, r0, #6, #1
    8366:	7088      	strb	r0, [r1, #2]
    8368:	e7cc      	b.n	8304 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x304>
    836a:	0000      	.short	0x0000
    836c:	20000fb0 	.word	0x20000fb0
    8370:	20000118 	.word	0x20000118
    8374:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    8378:	4604      	mov	r4, r0
    837a:	20ff      	movs	r0, #255	; 0xff
    837c:	f88d 0000 	strb.w	r0, [sp]
    8380:	2501      	movs	r5, #1
    8382:	466a      	mov	r2, sp
    8384:	2103      	movs	r1, #3
    8386:	4620      	mov	r0, r4
    8388:	f7ff fe8e 	bl	80a8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa8>
    838c:	b328      	cbz	r0, 83da <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3da>
    838e:	7b20      	ldrb	r0, [r4, #12]
    8390:	2700      	movs	r7, #0
    8392:	b168      	cbz	r0, 83b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3b0>
    8394:	f894 0094 	ldrb.w	r0, [r4, #148]	; 0x94
    8398:	f88d 0004 	strb.w	r0, [sp, #4]
    839c:	9801      	ldr	r0, [sp, #4]
    839e:	9001      	str	r0, [sp, #4]
    83a0:	f89d 0004 	ldrb.w	r0, [sp, #4]
    83a4:	b920      	cbnz	r0, 83b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3b0>
    83a6:	f89d 1000 	ldrb.w	r1, [sp]
    83aa:	4620      	mov	r0, r4
    83ac:	f7ff fe3c 	bl	8028 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x28>
    83b0:	4e0c      	ldr	r6, [pc, #48]	; (83e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3e4>)
    83b2:	2104      	movs	r1, #4
    83b4:	6870      	ldr	r0, [r6, #4]
    83b6:	8007      	strh	r7, [r0, #0]
    83b8:	f006 fec2 	bl	f140 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    83bc:	4620      	mov	r0, r4
    83be:	f000 f88b 	bl	84d8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4d8>
    83c2:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    83c4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    83c6:	6870      	ldr	r0, [r6, #4]
    83c8:	f006 fef1 	bl	f1ae <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>
    83cc:	4906      	ldr	r1, [pc, #24]	; (83e8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3e8>)
    83ce:	2005      	movs	r0, #5
    83d0:	7008      	strb	r0, [r1, #0]
    83d2:	6870      	ldr	r0, [r6, #4]
    83d4:	f003 febe 	bl	c154 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    83d8:	e000      	b.n	83dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3dc>
    83da:	2500      	movs	r5, #0
    83dc:	4628      	mov	r0, r5
    83de:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    83e2:	0000      	.short	0x0000
    83e4:	20000118 	.word	0x20000118
    83e8:	20000fb0 	.word	0x20000fb0
    83ec:	b570      	push	{r4, r5, r6, lr}
    83ee:	4604      	mov	r4, r0
    83f0:	460e      	mov	r6, r1
    83f2:	7e40      	ldrb	r0, [r0, #25]
    83f4:	f7fe fb70 	bl	6ad8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    83f8:	0005      	movs	r5, r0
    83fa:	d019      	beq.n	8430 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x430>
    83fc:	2110      	movs	r1, #16
    83fe:	f006 fd07 	bl	ee10 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    8402:	2800      	cmp	r0, #0
    8404:	d114      	bne.n	8430 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x430>
    8406:	2001      	movs	r0, #1
    8408:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    840c:	f104 0157 	add.w	r1, r4, #87	; 0x57
    8410:	4632      	mov	r2, r6
    8412:	460c      	mov	r4, r1
    8414:	4628      	mov	r0, r5
    8416:	f006 fab3 	bl	e980 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    841a:	4621      	mov	r1, r4
    841c:	4c05      	ldr	r4, [pc, #20]	; (8434 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x434>)
    841e:	6860      	ldr	r0, [r4, #4]
    8420:	f006 fea9 	bl	f176 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    8424:	6860      	ldr	r0, [r4, #4]
    8426:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    842a:	2101      	movs	r1, #1
    842c:	f006 bea9 	b.w	f182 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    8430:	bd70      	pop	{r4, r5, r6, pc}
    8432:	0000      	.short	0x0000
    8434:	20000118 	.word	0x20000118
    8438:	4802      	ldr	r0, [pc, #8]	; (8444 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x444>)
    843a:	2101      	movs	r1, #1
    843c:	6800      	ldr	r0, [r0, #0]
    843e:	f7ff bb27 	b.w	7a90 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    8442:	0000      	.short	0x0000
    8444:	20000118 	.word	0x20000118
    8448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    844c:	4e21      	ldr	r6, [pc, #132]	; (84d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4d4>)
    844e:	4680      	mov	r8, r0
    8450:	460c      	mov	r4, r1
    8452:	6870      	ldr	r0, [r6, #4]
    8454:	4615      	mov	r5, r2
    8456:	f850 1f0f 	ldr.w	r1, [r0, #15]!
    845a:	6161      	str	r1, [r4, #20]
    845c:	8881      	ldrh	r1, [r0, #4]
    845e:	83a1      	strh	r1, [r4, #28]
    8460:	7981      	ldrb	r1, [r0, #6]
    8462:	77a1      	strb	r1, [r4, #30]
    8464:	8940      	ldrh	r0, [r0, #10]
    8466:	f006 fb43 	bl	eaf0 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    846a:	4607      	mov	r7, r0
    846c:	6120      	str	r0, [r4, #16]
    846e:	6870      	ldr	r0, [r6, #4]
    8470:	4639      	mov	r1, r7
    8472:	7d80      	ldrb	r0, [r0, #22]
    8474:	f006 fcc7 	bl	ee06 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    8478:	8420      	strh	r0, [r4, #32]
    847a:	6870      	ldr	r0, [r6, #4]
    847c:	4639      	mov	r1, r7
    847e:	f8b0 0017 	ldrh.w	r0, [r0, #23]
    8482:	f006 fcbc 	bl	edfe <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    8486:	6260      	str	r0, [r4, #36]	; 0x24
    8488:	6870      	ldr	r0, [r6, #4]
    848a:	f830 1f1b 	ldrh.w	r1, [r0, #27]!
    848e:	8321      	strh	r1, [r4, #24]
    8490:	8841      	ldrh	r1, [r0, #2]
    8492:	8361      	strh	r1, [r4, #26]
    8494:	6841      	ldr	r1, [r0, #4]
    8496:	f8c4 108e 	str.w	r1, [r4, #142]	; 0x8e
    849a:	7a01      	ldrb	r1, [r0, #8]
    849c:	f884 1092 	strb.w	r1, [r4, #146]	; 0x92
    84a0:	7a41      	ldrb	r1, [r0, #9]
    84a2:	f001 011f 	and.w	r1, r1, #31
    84a6:	f884 1099 	strb.w	r1, [r4, #153]	; 0x99
    84aa:	7a40      	ldrb	r0, [r0, #9]
    84ac:	0940      	lsrs	r0, r0, #5
    84ae:	f884 0185 	strb.w	r0, [r4, #389]	; 0x185
    84b2:	f104 0066 	add.w	r0, r4, #102	; 0x66
    84b6:	7205      	strb	r5, [r0, #8]
    84b8:	7245      	strb	r5, [r0, #9]
    84ba:	21ff      	movs	r1, #255	; 0xff
    84bc:	7281      	strb	r1, [r0, #10]
    84be:	2100      	movs	r1, #0
    84c0:	3836      	subs	r0, #54	; 0x36
    84c2:	f006 ffea 	bl	f49a <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    84c6:	f898 000e 	ldrb.w	r0, [r8, #14]
    84ca:	f884 0072 	strb.w	r0, [r4, #114]	; 0x72
    84ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    84d2:	0000      	.short	0x0000
    84d4:	20000118 	.word	0x20000118
    84d8:	b570      	push	{r4, r5, r6, lr}
    84da:	4d07      	ldr	r5, [pc, #28]	; (84f8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4f8>)
    84dc:	4604      	mov	r4, r0
    84de:	f100 0149 	add.w	r1, r0, #73	; 0x49
    84e2:	6868      	ldr	r0, [r5, #4]
    84e4:	f006 fe54 	bl	f190 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
    84e8:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
    84ec:	6868      	ldr	r0, [r5, #4]
    84ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    84f2:	f006 be53 	b.w	f19c <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    84f6:	0000      	.short	0x0000
    84f8:	20000118 	.word	0x20000118
    84fc:	00555555 	.word	0x00555555
    8500:	00007d19 	.word	0x00007d19
    8504:	00007ba5 	.word	0x00007ba5
    8508:	00007c95 	.word	0x00007c95
    850c:	00000000 	.word	0x00000000
    8510:	00007c6d 	.word	0x00007c6d
    8514:	00007cc5 	.word	0x00007cc5
    8518:	0000f7d3 	.word	0x0000f7d3
    851c:	0000f7d9 	.word	0x0000f7d9
    8520:	00007f25 	.word	0x00007f25
    8524:	00007f49 	.word	0x00007f49
    8528:	00008439 	.word	0x00008439
    852c:	0000851c 	.word	0x0000851c
    8530:	00008514 	.word	0x00008514
    8534:	00008510 	.word	0x00008510

00008538 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
    8538:	b510      	push	{r4, lr}
    853a:	1e42      	subs	r2, r0, #1
    853c:	2a02      	cmp	r2, #2
    853e:	d901      	bls.n	8544 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0xc>
    8540:	21ca      	movs	r1, #202	; 0xca
    8542:	e009      	b.n	8558 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x20>
    8544:	1e40      	subs	r0, r0, #1
    8546:	2910      	cmp	r1, #16
    8548:	d009      	beq.n	855e <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x26>
    854a:	2912      	cmp	r1, #18
    854c:	d00c      	beq.n	8568 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    854e:	2913      	cmp	r1, #19
    8550:	d00a      	beq.n	8568 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    8552:	2915      	cmp	r1, #21
    8554:	d005      	beq.n	8562 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x2a>
    8556:	21d8      	movs	r1, #216	; 0xd8
    8558:	202f      	movs	r0, #47	; 0x2f
    855a:	f7fc fe09 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    855e:	4905      	ldr	r1, [pc, #20]	; (8574 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    8560:	e004      	b.n	856c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    8562:	4904      	ldr	r1, [pc, #16]	; (8574 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    8564:	1d89      	adds	r1, r1, #6
    8566:	e001      	b.n	856c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    8568:	4902      	ldr	r1, [pc, #8]	; (8574 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    856a:	1f89      	subs	r1, r1, #6
    856c:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    8570:	bd10      	pop	{r4, pc}
    8572:	0000      	.short	0x0000
    8574:	0000fa28 	.word	0x0000fa28

00008578 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
    8578:	1e42      	subs	r2, r0, #1
    857a:	b510      	push	{r4, lr}
    857c:	b2d2      	uxtb	r2, r2
    857e:	2a01      	cmp	r2, #1
    8580:	d903      	bls.n	858a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    8582:	291d      	cmp	r1, #29
    8584:	d001      	beq.n	858a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    8586:	21ee      	movs	r1, #238	; 0xee
    8588:	e00d      	b.n	85a6 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
    858a:	2913      	cmp	r1, #19
    858c:	d013      	beq.n	85b6 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    858e:	dc04      	bgt.n	859a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x22>
    8590:	2910      	cmp	r1, #16
    8592:	d00b      	beq.n	85ac <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x34>
    8594:	2912      	cmp	r1, #18
    8596:	d104      	bne.n	85a2 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2a>
    8598:	e00d      	b.n	85b6 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    859a:	2915      	cmp	r1, #21
    859c:	d008      	beq.n	85b0 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x38>
    859e:	291d      	cmp	r1, #29
    85a0:	d00e      	beq.n	85c0 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x48>
    85a2:	f44f 7181 	mov.w	r1, #258	; 0x102
    85a6:	202f      	movs	r0, #47	; 0x2f
    85a8:	f7fc fde2 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    85ac:	4807      	ldr	r0, [pc, #28]	; (85cc <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    85ae:	e004      	b.n	85ba <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    85b0:	4806      	ldr	r0, [pc, #24]	; (85cc <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    85b2:	3008      	adds	r0, #8
    85b4:	e001      	b.n	85ba <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    85b6:	4805      	ldr	r0, [pc, #20]	; (85cc <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    85b8:	1d00      	adds	r0, r0, #4
    85ba:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    85be:	bd10      	pop	{r4, pc}
    85c0:	f240 315a 	movw	r1, #858	; 0x35a
    85c4:	fb10 f001 	smulbb	r0, r0, r1
    85c8:	bd10      	pop	{r4, pc}
    85ca:	0000      	.short	0x0000
    85cc:	0000fa16 	.word	0x0000fa16

000085d0 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>:
    85d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    85d4:	4604      	mov	r4, r0
    85d6:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
    85da:	4615      	mov	r5, r2
    85dc:	460f      	mov	r7, r1
    85de:	2800      	cmp	r0, #0
    85e0:	d157      	bne.n	8692 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xc2>
    85e2:	4621      	mov	r1, r4
    85e4:	4841      	ldr	r0, [pc, #260]	; (86ec <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x11c>)
    85e6:	f7fb f8a5 	bl	3734 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    85ea:	4606      	mov	r6, r0
    85ec:	2820      	cmp	r0, #32
    85ee:	d050      	beq.n	8692 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xc2>
    85f0:	2234      	movs	r2, #52	; 0x34
    85f2:	2100      	movs	r1, #0
    85f4:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    85f8:	f005 f81c 	bl	d634 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    85fc:	f884 60a0 	strb.w	r6, [r4, #160]	; 0xa0
    8600:	2601      	movs	r6, #1
    8602:	f8c4 70a4 	str.w	r7, [r4, #164]	; 0xa4
    8606:	f884 60b4 	strb.w	r6, [r4, #180]	; 0xb4
    860a:	b13f      	cbz	r7, 861c <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x4c>
    860c:	2000      	movs	r0, #0
    860e:	f000 fbfb 	bl	8e08 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x60c>
    8612:	f000 0007 	and.w	r0, r0, #7
    8616:	1c40      	adds	r0, r0, #1
    8618:	f887 0134 	strb.w	r0, [r7, #308]	; 0x134
    861c:	4620      	mov	r0, r4
    861e:	f007 fbe6 	bl	fdee <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2e2>
    8622:	f8a4 00c0 	strh.w	r0, [r4, #192]	; 0xc0
    8626:	2002      	movs	r0, #2
    8628:	f884 00c2 	strb.w	r0, [r4, #194]	; 0xc2
    862c:	f884 60c3 	strb.w	r6, [r4, #195]	; 0xc3
    8630:	2700      	movs	r7, #0
    8632:	f804 7fb8 	strb.w	r7, [r4, #184]!
    8636:	f7fa fae1 	bl	2bfc <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    863a:	8921      	ldrh	r1, [r4, #8]
    863c:	3cb8      	subs	r4, #184	; 0xb8
    863e:	4288      	cmp	r0, r1
    8640:	d800      	bhi.n	8644 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x74>
    8642:	4608      	mov	r0, r1
    8644:	f200 60bf 	addw	r0, r0, #1727	; 0x6bf
    8648:	fa1f f880 	uxth.w	r8, r0
    864c:	4620      	mov	r0, r4
    864e:	f007 f862 	bl	f716 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    8652:	b308      	cbz	r0, 8698 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xc8>
    8654:	f008 fe5c 	bl	11310 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    8658:	f500 60cd 	add.w	r0, r0, #1640	; 0x668
    865c:	b281      	uxth	r1, r0
    865e:	4628      	mov	r0, r5
    8660:	f004 fe2d 	bl	d2be <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8664:	4428      	add	r0, r5
    8666:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
    866a:	34a4      	adds	r4, #164	; 0xa4
    866c:	f004 fdf3 	bl	d256 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    8670:	4641      	mov	r1, r8
    8672:	f7fa f94b 	bl	290c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8676:	6220      	str	r0, [r4, #32]
    8678:	f804 7c03 	strb.w	r7, [r4, #-3]
    867c:	7126      	strb	r6, [r4, #4]
    867e:	2001      	movs	r0, #1
    8680:	f007 f9c2 	bl	fa08 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    8684:	f200 100d 	addw	r0, r0, #269	; 0x10d
    8688:	1a28      	subs	r0, r5, r0
    868a:	62a7      	str	r7, [r4, #40]	; 0x28
    868c:	60a0      	str	r0, [r4, #8]
    868e:	3ca4      	subs	r4, #164	; 0xa4
    8690:	e017      	b.n	86c2 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xf2>
    8692:	200c      	movs	r0, #12
    8694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8698:	4620      	mov	r0, r4
    869a:	f007 fafb 	bl	fc94 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x188>
    869e:	f844 0fbc 	str.w	r0, [r4, #188]!
    86a2:	f804 6c1b 	strb.w	r6, [r4, #-27]
    86a6:	f004 fdd6 	bl	d256 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    86aa:	4606      	mov	r6, r0
    86ac:	2000      	movs	r0, #0
    86ae:	f007 fc4d 	bl	ff4c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x440>
    86b2:	eb00 0108 	add.w	r1, r0, r8
    86b6:	4630      	mov	r0, r6
    86b8:	f7fa f928 	bl	290c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    86bc:	6125      	str	r5, [r4, #16]
    86be:	60a0      	str	r0, [r4, #8]
    86c0:	3cbc      	subs	r4, #188	; 0xbc
    86c2:	f104 01b8 	add.w	r1, r4, #184	; 0xb8
    86c6:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
    86ca:	f007 fb8e 	bl	fdea <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2de>
    86ce:	b138      	cbz	r0, 86e0 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x110>
    86d0:	f8a4 70c8 	strh.w	r7, [r4, #200]	; 0xc8
    86d4:	2100      	movs	r1, #0
    86d6:	4620      	mov	r0, r4
    86d8:	f007 f849 	bl	f76e <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    86dc:	2000      	movs	r0, #0
    86de:	e7d9      	b.n	8694 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xc4>
    86e0:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
    86e4:	2030      	movs	r0, #48	; 0x30
    86e6:	f7fc fd43 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    86ea:	0000      	.short	0x0000
    86ec:	0000ff61 	.word	0x0000ff61

000086f0 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>:
    86f0:	4808      	ldr	r0, [pc, #32]	; (8714 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ+0x24>)
    86f2:	b510      	push	{r4, lr}
    86f4:	2100      	movs	r1, #0
    86f6:	7001      	strb	r1, [r0, #0]
    86f8:	2201      	movs	r2, #1
    86fa:	7082      	strb	r2, [r0, #2]
    86fc:	7041      	strb	r1, [r0, #1]
    86fe:	3018      	adds	r0, #24
    8700:	f006 ff4b 	bl	f59a <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    8704:	4803      	ldr	r0, [pc, #12]	; (8714 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ+0x24>)
    8706:	3020      	adds	r0, #32
    8708:	f006 ff47 	bl	f59a <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    870c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8710:	f007 b9e5 	b.w	fade <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
    8714:	20000128 	.word	0x20000128

00008718 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>:
    8718:	4901      	ldr	r1, [pc, #4]	; (8720 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x8>)
    871a:	7008      	strb	r0, [r1, #0]
    871c:	4770      	bx	lr
    871e:	0000      	.short	0x0000
    8720:	20000128 	.word	0x20000128

00008724 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>:
    8724:	4905      	ldr	r1, [pc, #20]	; (873c <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x18>)
    8726:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    872a:	fbb1 f1f2 	udiv	r1, r1, r2
    872e:	b510      	push	{r4, lr}
    8730:	f201 2191 	addw	r1, r1, #657	; 0x291
    8734:	f006 feca 	bl	f4cc <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    8738:	b280      	uxth	r0, r0
    873a:	bd10      	pop	{r4, pc}
    873c:	0001527d 	.word	0x0001527d

00008740 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>:
    8740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8744:	4c10      	ldr	r4, [pc, #64]	; (8788 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x48>)
    8746:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
    874a:	f003 fc0b 	bl	bf64 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    874e:	4606      	mov	r6, r0
    8750:	7820      	ldrb	r0, [r4, #0]
    8752:	b128      	cbz	r0, 8760 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x20>
    8754:	4632      	mov	r2, r6
    8756:	4639      	mov	r1, r7
    8758:	4628      	mov	r0, r5
    875a:	f006 f9d3 	bl	eb04 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    875e:	4605      	mov	r5, r0
    8760:	6860      	ldr	r0, [r4, #4]
    8762:	4285      	cmp	r5, r0
    8764:	d005      	beq.n	8772 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x32>
    8766:	68e1      	ldr	r1, [r4, #12]
    8768:	1a28      	subs	r0, r5, r0
    876a:	4408      	add	r0, r1
    876c:	60e0      	str	r0, [r4, #12]
    876e:	f7fb f8e9 	bl	3944 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    8772:	6065      	str	r5, [r4, #4]
    8774:	42ae      	cmp	r6, r5
    8776:	d801      	bhi.n	877c <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3c>
    8778:	7860      	ldrb	r0, [r4, #1]
    877a:	b110      	cbz	r0, 8782 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x42>
    877c:	2000      	movs	r0, #0
    877e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8782:	2001      	movs	r0, #1
    8784:	e7fb      	b.n	877e <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3e>
    8786:	0000      	.short	0x0000
    8788:	20000128 	.word	0x20000128

0000878c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>:
    878c:	b510      	push	{r4, lr}
    878e:	4604      	mov	r4, r0
    8790:	2906      	cmp	r1, #6
    8792:	d22c      	bcs.n	87ee <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x62>
    8794:	e8df f001 	tbb	[pc, r1]
    8798:	0e030b05 	.word	0x0e030b05
    879c:	260f      	.short	0x260f
    879e:	2100      	movs	r1, #0
    87a0:	e000      	b.n	87a4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x18>
    87a2:	2101      	movs	r1, #1
    87a4:	4620      	mov	r0, r4
    87a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    87aa:	f000 b8f9 	b.w	89a0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a4>
    87ae:	2003      	movs	r0, #3
    87b0:	f884 0144 	strb.w	r0, [r4, #324]	; 0x144
    87b4:	bd10      	pop	{r4, pc}
    87b6:	f003 fbe3 	bl	bf80 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>
    87ba:	f8c4 0180 	str.w	r0, [r4, #384]	; 0x180
    87be:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    87c2:	f003 fcab 	bl	c11c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    87c6:	f8d4 1180 	ldr.w	r1, [r4, #384]	; 0x180
    87ca:	1a09      	subs	r1, r1, r0
    87cc:	480a      	ldr	r0, [pc, #40]	; (87f8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6c>)
    87ce:	6842      	ldr	r2, [r0, #4]
    87d0:	440a      	add	r2, r1
    87d2:	6042      	str	r2, [r0, #4]
    87d4:	6882      	ldr	r2, [r0, #8]
    87d6:	4411      	add	r1, r2
    87d8:	6081      	str	r1, [r0, #8]
    87da:	4620      	mov	r0, r4
    87dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    87e0:	f007 ba96 	b.w	fd10 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x204>
    87e4:	4620      	mov	r0, r4
    87e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    87ea:	f007 ba7c 	b.w	fce6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1da>
    87ee:	f44f 61eb 	mov.w	r1, #1880	; 0x758
    87f2:	2030      	movs	r0, #48	; 0x30
    87f4:	f7fc fcbc 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    87f8:	20000128 	.word	0x20000128

000087fc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>:
    87fc:	b570      	push	{r4, r5, r6, lr}
    87fe:	460c      	mov	r4, r1
    8800:	4605      	mov	r5, r0
    8802:	b112      	cbz	r2, 880a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xe>
    8804:	f240 7182 	movw	r1, #1922	; 0x782
    8808:	e010      	b.n	882c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x30>
    880a:	f003 fbab 	bl	bf64 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    880e:	4601      	mov	r1, r0
    8810:	2200      	movs	r2, #0
    8812:	4620      	mov	r0, r4
    8814:	f007 fb50 	bl	feb8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3ac>
    8818:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
    881c:	462a      	mov	r2, r5
    881e:	4905      	ldr	r1, [pc, #20]	; (8834 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x38>)
    8820:	f7fa fe48 	bl	34b4 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>
    8824:	2800      	cmp	r0, #0
    8826:	d104      	bne.n	8832 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x36>
    8828:	f240 716b 	movw	r1, #1899	; 0x76b
    882c:	2030      	movs	r0, #48	; 0x30
    882e:	f7fc fc9f 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8832:	bd70      	pop	{r4, r5, r6, pc}
    8834:	00010001 	.word	0x00010001
    8838:	b510      	push	{r4, lr}
    883a:	280c      	cmp	r0, #12
    883c:	d304      	bcc.n	8848 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4c>
    883e:	f240 3127 	movw	r1, #807	; 0x327
    8842:	2006      	movs	r0, #6
    8844:	f7fc fc94 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8848:	4901      	ldr	r1, [pc, #4]	; (8850 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x54>)
    884a:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    884e:	bd10      	pop	{r4, pc}
    8850:	000100e2 	.word	0x000100e2
    8854:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    8856:	4c18      	ldr	r4, [pc, #96]	; (88b8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xbc>)
    8858:	2001      	movs	r0, #1
    885a:	7060      	strb	r0, [r4, #1]
    885c:	f64f 75ff 	movw	r5, #65535	; 0xffff
    8860:	e00b      	b.n	887a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7e>
    8862:	2100      	movs	r1, #0
    8864:	f005 feae 	bl	e5c4 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    8868:	0006      	movs	r6, r0
    886a:	d010      	beq.n	888e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x92>
    886c:	f896 0178 	ldrb.w	r0, [r6, #376]	; 0x178
    8870:	f7fa fe52 	bl	3518 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    8874:	4630      	mov	r0, r6
    8876:	f007 fb12 	bl	fe9e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x392>
    887a:	4669      	mov	r1, sp
    887c:	2000      	movs	r0, #0
    887e:	f005 feab 	bl	e5d8 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    8882:	b180      	cbz	r0, 88a6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaa>
    8884:	f44f 7187 	mov.w	r1, #270	; 0x10e
    8888:	2030      	movs	r0, #48	; 0x30
    888a:	f7fc fc71 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    888e:	f44f 7197 	mov.w	r1, #302	; 0x12e
    8892:	e7f9      	b.n	8888 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x8c>
    8894:	9802      	ldr	r0, [sp, #8]
    8896:	b130      	cbz	r0, 88a6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaa>
    8898:	f890 1144 	ldrb.w	r1, [r0, #324]	; 0x144
    889c:	b119      	cbz	r1, 88a6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaa>
    889e:	8800      	ldrh	r0, [r0, #0]
    88a0:	42a8      	cmp	r0, r5
    88a2:	d1de      	bne.n	8862 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x66>
    88a4:	e004      	b.n	88b0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xb4>
    88a6:	4668      	mov	r0, sp
    88a8:	f7fc fe9a 	bl	55e0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    88ac:	2800      	cmp	r0, #0
    88ae:	d0f1      	beq.n	8894 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x98>
    88b0:	2000      	movs	r0, #0
    88b2:	7060      	strb	r0, [r4, #1]
    88b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    88b6:	0000      	.short	0x0000
    88b8:	20000128 	.word	0x20000128
    88bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    88c0:	4604      	mov	r4, r0
    88c2:	4836      	ldr	r0, [pc, #216]	; (899c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a0>)
    88c4:	461e      	mov	r6, r3
    88c6:	4690      	mov	r8, r2
    88c8:	7880      	ldrb	r0, [r0, #2]
    88ca:	4689      	mov	r9, r1
    88cc:	2500      	movs	r5, #0
    88ce:	b368      	cbz	r0, 892c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
    88d0:	f7fc f8c6 	bl	4a60 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    88d4:	b350      	cbz	r0, 892c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
    88d6:	f8b4 0130 	ldrh.w	r0, [r4, #304]	; 0x130
    88da:	2802      	cmp	r0, #2
    88dc:	d326      	bcc.n	892c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
    88de:	f894 0144 	ldrb.w	r0, [r4, #324]	; 0x144
    88e2:	2802      	cmp	r0, #2
    88e4:	d022      	beq.n	892c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
    88e6:	f894 015a 	ldrb.w	r0, [r4, #346]	; 0x15a
    88ea:	b9f8      	cbnz	r0, 892c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
    88ec:	f894 0185 	ldrb.w	r0, [r4, #389]	; 0x185
    88f0:	f7ff ffa2 	bl	8838 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    88f4:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    88f8:	b281      	uxth	r1, r0
    88fa:	8031      	strh	r1, [r6, #0]
    88fc:	f894 0144 	ldrb.w	r0, [r4, #324]	; 0x144
    8900:	2700      	movs	r7, #0
    8902:	2801      	cmp	r0, #1
    8904:	d015      	beq.n	8932 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x136>
    8906:	6920      	ldr	r0, [r4, #16]
    8908:	f004 fcd9 	bl	d2be <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    890c:	f8b4 211e 	ldrh.w	r2, [r4, #286]	; 0x11e
    8910:	b280      	uxth	r0, r0
    8912:	4442      	add	r2, r8
    8914:	eba2 0109 	sub.w	r1, r2, r9
    8918:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
    891c:	f8c4 014c 	str.w	r0, [r4, #332]	; 0x14c
    8920:	1a82      	subs	r2, r0, r2
    8922:	fb01 7502 	mla	r5, r1, r2, r7
    8926:	2001      	movs	r0, #1
    8928:	f884 015a 	strb.w	r0, [r4, #346]	; 0x15a
    892c:	4628      	mov	r0, r5
    892e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8932:	f894 0089 	ldrb.w	r0, [r4, #137]	; 0x89
    8936:	2803      	cmp	r0, #3
    8938:	d02c      	beq.n	8994 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x198>
    893a:	2101      	movs	r1, #1
    893c:	2000      	movs	r0, #0
    893e:	f006 f99b 	bl	ec78 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    8942:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8944:	1847      	adds	r7, r0, r1
    8946:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
    894a:	8831      	ldrh	r1, [r6, #0]
    894c:	34e0      	adds	r4, #224	; 0xe0
    894e:	f004 fcb6 	bl	d2be <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8952:	6da2      	ldr	r2, [r4, #88]	; 0x58
    8954:	6e21      	ldr	r1, [r4, #96]	; 0x60
    8956:	1a82      	subs	r2, r0, r2
    8958:	fb01 5502 	mla	r5, r1, r2, r5
    895c:	65a0      	str	r0, [r4, #88]	; 0x58
    895e:	8831      	ldrh	r1, [r6, #0]
    8960:	4638      	mov	r0, r7
    8962:	f004 fcac 	bl	d2be <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8966:	6ea1      	ldr	r1, [r4, #104]	; 0x68
    8968:	66a0      	str	r0, [r4, #104]	; 0x68
    896a:	1a41      	subs	r1, r0, r1
    896c:	440d      	add	r5, r1
    896e:	8831      	ldrh	r1, [r6, #0]
    8970:	f854 0cd0 	ldr.w	r0, [r4, #-208]
    8974:	f004 fca3 	bl	d2be <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8978:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    897a:	4442      	add	r2, r8
    897c:	eba2 0109 	sub.w	r1, r2, r9
    8980:	6e22      	ldr	r2, [r4, #96]	; 0x60
    8982:	1a89      	subs	r1, r1, r2
    8984:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    8986:	1e49      	subs	r1, r1, #1
    8988:	1a82      	subs	r2, r0, r2
    898a:	fb01 5502 	mla	r5, r1, r2, r5
    898e:	66e0      	str	r0, [r4, #108]	; 0x6c
    8990:	3ce0      	subs	r4, #224	; 0xe0
    8992:	e7c8      	b.n	8926 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x12a>
    8994:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
    8998:	e7d3      	b.n	8942 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x146>
    899a:	0000      	.short	0x0000
    899c:	20000128 	.word	0x20000128
    89a0:	b538      	push	{r3, r4, r5, lr}
    89a2:	2500      	movs	r5, #0
    89a4:	4604      	mov	r4, r0
    89a6:	2901      	cmp	r1, #1
    89a8:	d102      	bne.n	89b0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1b4>
    89aa:	4811      	ldr	r0, [pc, #68]	; (89f0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f4>)
    89ac:	7840      	ldrb	r0, [r0, #1]
    89ae:	b178      	cbz	r0, 89d0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1d4>
    89b0:	2004      	movs	r0, #4
    89b2:	f884 0144 	strb.w	r0, [r4, #324]	; 0x144
    89b6:	bf00      	nop
    89b8:	f007 f9a3 	bl	fd02 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1f6>
    89bc:	f8a4 5176 	strh.w	r5, [r4, #374]	; 0x176
    89c0:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    89c4:	f8a4 0156 	strh.w	r0, [r4, #342]	; 0x156
    89c8:	f504 749d 	add.w	r4, r4, #314	; 0x13a
    89cc:	77e5      	strb	r5, [r4, #31]
    89ce:	bd38      	pop	{r3, r4, r5, pc}
    89d0:	9500      	str	r5, [sp, #0]
    89d2:	f8b4 110c 	ldrh.w	r1, [r4, #268]	; 0x10c
    89d6:	2301      	movs	r3, #1
    89d8:	2200      	movs	r2, #0
    89da:	4620      	mov	r0, r4
    89dc:	f000 f80a 	bl	89f4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    89e0:	2800      	cmp	r0, #0
    89e2:	d0e9      	beq.n	89b8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1bc>
    89e4:	f240 61cd 	movw	r1, #1741	; 0x6cd
    89e8:	2030      	movs	r0, #48	; 0x30
    89ea:	f7fc fbc1 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    89ee:	0000      	.short	0x0000
    89f0:	20000128 	.word	0x20000128
    89f4:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    89f8:	4604      	mov	r4, r0
    89fa:	b085      	sub	sp, #20
    89fc:	f890 006f 	ldrb.w	r0, [r0, #111]	; 0x6f
    8a00:	4699      	mov	r9, r3
    8a02:	e9cd 3000 	strd	r3, r0, [sp]
    8a06:	460f      	mov	r7, r1
    8a08:	f008 fc82 	bl	11310 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    8a0c:	4605      	mov	r5, r0
    8a0e:	f894 0185 	ldrb.w	r0, [r4, #389]	; 0x185
    8a12:	f7ff ff11 	bl	8838 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    8a16:	4428      	add	r0, r5
    8a18:	f8ad 0008 	strh.w	r0, [sp, #8]
    8a1c:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
    8a20:	280d      	cmp	r0, #13
    8a22:	d004      	beq.n	8a2e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x232>
    8a24:	2000      	movs	r0, #0
    8a26:	9003      	str	r0, [sp, #12]
    8a28:	9807      	ldr	r0, [sp, #28]
    8a2a:	b110      	cbz	r0, 8a32 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x236>
    8a2c:	e02e      	b.n	8a8c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    8a2e:	2001      	movs	r0, #1
    8a30:	e7f9      	b.n	8a26 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x22a>
    8a32:	f894 0144 	ldrb.w	r0, [r4, #324]	; 0x144
    8a36:	2803      	cmp	r0, #3
    8a38:	d128      	bne.n	8a8c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    8a3a:	9803      	ldr	r0, [sp, #12]
    8a3c:	b330      	cbz	r0, 8a8c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    8a3e:	f8b4 01a4 	ldrh.w	r0, [r4, #420]	; 0x1a4
    8a42:	42b8      	cmp	r0, r7
    8a44:	d122      	bne.n	8a8c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    8a46:	f8d4 014c 	ldr.w	r0, [r4, #332]	; 0x14c
    8a4a:	f8c4 0138 	str.w	r0, [r4, #312]	; 0x138
    8a4e:	6920      	ldr	r0, [r4, #16]
    8a50:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
    8a54:	f8b4 0176 	ldrh.w	r0, [r4, #374]	; 0x176
    8a58:	f8b4 111e 	ldrh.w	r1, [r4, #286]	; 0x11e
    8a5c:	4408      	add	r0, r1
    8a5e:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
    8a62:	4620      	mov	r0, r4
    8a64:	f007 fb5d 	bl	10122 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>
    8a68:	f8d4 01a8 	ldr.w	r0, [r4, #424]	; 0x1a8
    8a6c:	6260      	str	r0, [r4, #36]	; 0x24
    8a6e:	f8b4 01a6 	ldrh.w	r0, [r4, #422]	; 0x1a6
    8a72:	8420      	strh	r0, [r4, #32]
    8a74:	f8d4 01ac 	ldr.w	r0, [r4, #428]	; 0x1ac
    8a78:	6120      	str	r0, [r4, #16]
    8a7a:	f8b4 01b0 	ldrh.w	r0, [r4, #432]	; 0x1b0
    8a7e:	8320      	strh	r0, [r4, #24]
    8a80:	f8b4 01b2 	ldrh.w	r0, [r4, #434]	; 0x1b2
    8a84:	8360      	strh	r0, [r4, #26]
    8a86:	2002      	movs	r0, #2
    8a88:	f884 0144 	strb.w	r0, [r4, #324]	; 0x144
    8a8c:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    8a90:	f504 75ae 	add.w	r5, r4, #348	; 0x15c
    8a94:	1a38      	subs	r0, r7, r0
    8a96:	fa0f fa80 	sxth.w	sl, r0
    8a9a:	f8b4 0174 	ldrh.w	r0, [r4, #372]	; 0x174
    8a9e:	1a38      	subs	r0, r7, r0
    8aa0:	fa0f f880 	sxth.w	r8, r0
    8aa4:	f1b8 0f00 	cmp.w	r8, #0
    8aa8:	da06      	bge.n	8ab8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2bc>
    8aaa:	f8d4 016c 	ldr.w	r0, [r4, #364]	; 0x16c
    8aae:	f8c4 0170 	str.w	r0, [r4, #368]	; 0x170
    8ab2:	2001      	movs	r0, #1
    8ab4:	46d0      	mov	r8, sl
    8ab6:	9000      	str	r0, [sp, #0]
    8ab8:	ab02      	add	r3, sp, #8
    8aba:	4652      	mov	r2, sl
    8abc:	4641      	mov	r1, r8
    8abe:	4620      	mov	r0, r4
    8ac0:	f7ff fefc 	bl	88bc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xc0>
    8ac4:	9004      	str	r0, [sp, #16]
    8ac6:	f894 0144 	ldrb.w	r0, [r4, #324]	; 0x144
    8aca:	f8df b338 	ldr.w	fp, [pc, #824]	; 8e04 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x608>
    8ace:	b140      	cbz	r0, 8ae2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2e6>
    8ad0:	2801      	cmp	r0, #1
    8ad2:	d07d      	beq.n	8bd0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3d4>
    8ad4:	2802      	cmp	r0, #2
    8ad6:	d052      	beq.n	8b7e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x382>
    8ad8:	2803      	cmp	r0, #3
    8ada:	d07a      	beq.n	8bd2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3d6>
    8adc:	f240 5151 	movw	r1, #1361	; 0x551
    8ae0:	e18c      	b.n	8dfc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x600>
    8ae2:	2101      	movs	r1, #1
    8ae4:	2000      	movs	r0, #0
    8ae6:	f006 f8c7 	bl	ec78 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    8aea:	4606      	mov	r6, r0
    8aec:	6a60      	ldr	r0, [r4, #36]	; 0x24
    8aee:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    8af2:	4430      	add	r0, r6
    8af4:	f004 fbe3 	bl	d2be <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8af8:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    8afc:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    8b00:	6920      	ldr	r0, [r4, #16]
    8b02:	f004 fbdc 	bl	d2be <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8b06:	f8c4 014c 	str.w	r0, [r4, #332]	; 0x14c
    8b0a:	a901      	add	r1, sp, #4
    8b0c:	4668      	mov	r0, sp
    8b0e:	f003 f991 	bl	be34 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>
    8b12:	e9dd 1200 	ldrd	r1, r2, [sp]
    8b16:	f8d4 0170 	ldr.w	r0, [r4, #368]	; 0x170
    8b1a:	f7fa ffc9 	bl	3ab0 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>
    8b1e:	4682      	mov	sl, r0
    8b20:	4620      	mov	r0, r4
    8b22:	f007 f8e0 	bl	fce6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1da>
    8b26:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    8b2a:	f8d4 817c 	ldr.w	r8, [r4, #380]	; 0x17c
    8b2e:	f003 fb21 	bl	c174 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8b32:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    8b36:	4401      	add	r1, r0
    8b38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    8b3c:	fbb1 f0f0 	udiv	r0, r1, r0
    8b40:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8b42:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    8b46:	4431      	add	r1, r6
    8b48:	1a08      	subs	r0, r1, r0
    8b4a:	1a81      	subs	r1, r0, r2
    8b4c:	4441      	add	r1, r8
    8b4e:	3920      	subs	r1, #32
    8b50:	eba1 060a 	sub.w	r6, r1, sl
    8b54:	0050      	lsls	r0, r2, #1
    8b56:	8c21      	ldrh	r1, [r4, #32]
    8b58:	3060      	adds	r0, #96	; 0x60
    8b5a:	4401      	add	r1, r0
    8b5c:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    8b60:	f007 f931 	bl	fdc6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ba>
    8b64:	3022      	adds	r0, #34	; 0x22
    8b66:	f8cb 0010 	str.w	r0, [fp, #16]
    8b6a:	f8d4 017c 	ldr.w	r0, [r4, #380]	; 0x17c
    8b6e:	4659      	mov	r1, fp
    8b70:	1a30      	subs	r0, r6, r0
    8b72:	f5b0 7fdc 	cmp.w	r0, #440	; 0x1b8
    8b76:	d859      	bhi.n	8c2c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x430>
    8b78:	f240 41ea 	movw	r1, #1258	; 0x4ea
    8b7c:	e13e      	b.n	8dfc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x600>
    8b7e:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    8b82:	6a60      	ldr	r0, [r4, #36]	; 0x24
    8b84:	4408      	add	r0, r1
    8b86:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    8b8a:	f004 fb98 	bl	d2be <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8b8e:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    8b92:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    8b96:	6920      	ldr	r0, [r4, #16]
    8b98:	f004 fb91 	bl	d2be <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8b9c:	f8c4 014c 	str.w	r0, [r4, #332]	; 0x14c
    8ba0:	4620      	mov	r0, r4
    8ba2:	f007 f8a0 	bl	fce6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1da>
    8ba6:	f8b4 011e 	ldrh.w	r0, [r4, #286]	; 0x11e
    8baa:	bb10      	cbnz	r0, 8bf2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3f6>
    8bac:	f1b9 0f00 	cmp.w	r9, #0
    8bb0:	d01f      	beq.n	8bf2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3f6>
    8bb2:	f894 806f 	ldrb.w	r8, [r4, #111]	; 0x6f
    8bb6:	4640      	mov	r0, r8
    8bb8:	f003 fadc 	bl	c174 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8bbc:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    8bc0:	4401      	add	r1, r0
    8bc2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    8bc6:	fbb1 f0f0 	udiv	r0, r1, r0
    8bca:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
    8bce:	e001      	b.n	8bd4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3d8>
    8bd0:	e02d      	b.n	8c2e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x432>
    8bd2:	e049      	b.n	8c68 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x46c>
    8bd4:	4408      	add	r0, r1
    8bd6:	6a62      	ldr	r2, [r4, #36]	; 0x24
    8bd8:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    8bdc:	4411      	add	r1, r2
    8bde:	1a0e      	subs	r6, r1, r0
    8be0:	4640      	mov	r0, r8
    8be2:	f003 fa9b 	bl	c11c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8be6:	f8d4 1180 	ldr.w	r1, [r4, #384]	; 0x180
    8bea:	1a08      	subs	r0, r1, r0
    8bec:	4406      	add	r6, r0
    8bee:	3e20      	subs	r6, #32
    8bf0:	e006      	b.n	8c00 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x404>
    8bf2:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8bf4:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
    8bf8:	4408      	add	r0, r1
    8bfa:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
    8bfe:	1a46      	subs	r6, r0, r1
    8c00:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
    8c04:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
    8c08:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
    8c0c:	fb01 0002 	mla	r0, r1, r2, r0
    8c10:	0040      	lsls	r0, r0, #1
    8c12:	8c21      	ldrh	r1, [r4, #32]
    8c14:	3060      	adds	r0, #96	; 0x60
    8c16:	4401      	add	r1, r0
    8c18:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    8c1c:	f007 f8d3 	bl	fdc6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ba>
    8c20:	f8cb 0010 	str.w	r0, [fp, #16]
    8c24:	2001      	movs	r0, #1
    8c26:	4659      	mov	r1, fp
    8c28:	f884 0144 	strb.w	r0, [r4, #324]	; 0x144
    8c2c:	e062      	b.n	8cf4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4f8>
    8c2e:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
    8c32:	6920      	ldr	r0, [r4, #16]
    8c34:	f8b4 211e 	ldrh.w	r2, [r4, #286]	; 0x11e
    8c38:	1a46      	subs	r6, r0, r1
    8c3a:	eb02 000a 	add.w	r0, r2, sl
    8c3e:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
    8c42:	f8d4 c138 	ldr.w	ip, [r4, #312]	; 0x138
    8c46:	1a80      	subs	r0, r0, r2
    8c48:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    8c4c:	1e40      	subs	r0, r0, #1
    8c4e:	fb0c 3202 	mla	r2, ip, r2, r3
    8c52:	fb00 2001 	mla	r0, r0, r1, r2
    8c56:	0040      	lsls	r0, r0, #1
    8c58:	8c21      	ldrh	r1, [r4, #32]
    8c5a:	3060      	adds	r0, #96	; 0x60
    8c5c:	4401      	add	r1, r0
    8c5e:	fb06 f608 	mul.w	r6, r6, r8
    8c62:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    8c66:	e040      	b.n	8cea <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4ee>
    8c68:	6920      	ldr	r0, [r4, #16]
    8c6a:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
    8c6e:	fb00 f008 	mul.w	r0, r0, r8
    8c72:	fb08 0611 	mls	r6, r8, r1, r0
    8c76:	f894 0085 	ldrb.w	r0, [r4, #133]	; 0x85
    8c7a:	2824      	cmp	r0, #36	; 0x24
    8c7c:	d003      	beq.n	8c86 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x48a>
    8c7e:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
    8c82:	2824      	cmp	r0, #36	; 0x24
    8c84:	d109      	bne.n	8c9a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x49e>
    8c86:	f8b4 01a4 	ldrh.w	r0, [r4, #420]	; 0x1a4
    8c8a:	1a38      	subs	r0, r7, r0
    8c8c:	b200      	sxth	r0, r0
    8c8e:	2800      	cmp	r0, #0
    8c90:	db03      	blt.n	8c9a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x49e>
    8c92:	f894 01a7 	ldrb.w	r0, [r4, #423]	; 0x1a7
    8c96:	b100      	cbz	r0, 8c9a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x49e>
    8c98:	9001      	str	r0, [sp, #4]
    8c9a:	9800      	ldr	r0, [sp, #0]
    8c9c:	b1d8      	cbz	r0, 8cd6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4da>
    8c9e:	f8b4 011e 	ldrh.w	r0, [r4, #286]	; 0x11e
    8ca2:	b9c0      	cbnz	r0, 8cd6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4da>
    8ca4:	f8d4 0180 	ldr.w	r0, [r4, #384]	; 0x180
    8ca8:	2800      	cmp	r0, #0
    8caa:	d07d      	beq.n	8da8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ac>
    8cac:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    8cb0:	f003 fa60 	bl	c174 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8cb4:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    8cb8:	4401      	add	r1, r0
    8cba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    8cbe:	fbb1 f0f0 	udiv	r0, r1, r0
    8cc2:	1a36      	subs	r6, r6, r0
    8cc4:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    8cc8:	f003 fa28 	bl	c11c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8ccc:	f8d4 1180 	ldr.w	r1, [r4, #384]	; 0x180
    8cd0:	1a08      	subs	r0, r1, r0
    8cd2:	4406      	add	r6, r0
    8cd4:	3e20      	subs	r6, #32
    8cd6:	f8b4 111e 	ldrh.w	r1, [r4, #286]	; 0x11e
    8cda:	eb01 000a 	add.w	r0, r1, sl
    8cde:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
    8ce2:	4348      	muls	r0, r1
    8ce4:	0041      	lsls	r1, r0, #1
    8ce6:	3160      	adds	r1, #96	; 0x60
    8ce8:	9801      	ldr	r0, [sp, #4]
    8cea:	f007 f86c 	bl	fdc6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ba>
    8cee:	4659      	mov	r1, fp
    8cf0:	f8cb 0010 	str.w	r0, [fp, #16]
    8cf4:	9804      	ldr	r0, [sp, #16]
    8cf6:	6909      	ldr	r1, [r1, #16]
    8cf8:	1a32      	subs	r2, r6, r0
    8cfa:	f8d4 614c 	ldr.w	r6, [r4, #332]	; 0x14c
    8cfe:	6920      	ldr	r0, [r4, #16]
    8d00:	1b80      	subs	r0, r0, r6
    8d02:	f2a0 2043 	subw	r0, r0, #579	; 0x243
    8d06:	f8cb 0014 	str.w	r0, [fp, #20]
    8d0a:	4281      	cmp	r1, r0
    8d0c:	d800      	bhi.n	8d10 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x514>
    8d0e:	4608      	mov	r0, r1
    8d10:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
    8d14:	2600      	movs	r6, #0
    8d16:	702e      	strb	r6, [r5, #0]
    8d18:	2064      	movs	r0, #100	; 0x64
    8d1a:	8128      	strh	r0, [r5, #8]
    8d1c:	4611      	mov	r1, r2
    8d1e:	f8d4 0170 	ldr.w	r0, [r4, #368]	; 0x170
    8d22:	f7f9 fdf3 	bl	290c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8d26:	60e8      	str	r0, [r5, #12]
    8d28:	f104 0030 	add.w	r0, r4, #48	; 0x30
    8d2c:	f006 fb9f 	bl	f46e <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    8d30:	f8d4 1118 	ldr.w	r1, [r4, #280]	; 0x118
    8d34:	4408      	add	r0, r1
    8d36:	6068      	str	r0, [r5, #4]
    8d38:	68e8      	ldr	r0, [r5, #12]
    8d3a:	f8c4 0170 	str.w	r0, [r4, #368]	; 0x170
    8d3e:	f8a4 7174 	strh.w	r7, [r4, #372]	; 0x174
    8d42:	72ae      	strb	r6, [r5, #10]
    8d44:	f8b4 0108 	ldrh.w	r0, [r4, #264]	; 0x108
    8d48:	1bc0      	subs	r0, r0, r7
    8d4a:	b200      	sxth	r0, r0
    8d4c:	2800      	cmp	r0, #0
    8d4e:	dd01      	ble.n	8d54 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x558>
    8d50:	2002      	movs	r0, #2
    8d52:	72a8      	strb	r0, [r5, #10]
    8d54:	9803      	ldr	r0, [sp, #12]
    8d56:	b340      	cbz	r0, 8daa <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ae>
    8d58:	f1b9 0f00 	cmp.w	r9, #0
    8d5c:	d01e      	beq.n	8d9c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a0>
    8d5e:	bf00      	nop
    8d60:	f8b4 1130 	ldrh.w	r1, [r4, #304]	; 0x130
    8d64:	b379      	cbz	r1, 8dc6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ca>
    8d66:	f8b4 0132 	ldrh.w	r0, [r4, #306]	; 0x132
    8d6a:	bf00      	nop
    8d6c:	f8a4 0132 	strh.w	r0, [r4, #306]	; 0x132
    8d70:	f894 2134 	ldrb.w	r2, [r4, #308]	; 0x134
    8d74:	1c40      	adds	r0, r0, #1
    8d76:	4342      	muls	r2, r0
    8d78:	428a      	cmp	r2, r1
    8d7a:	d20f      	bcs.n	8d9c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a0>
    8d7c:	7aa8      	ldrb	r0, [r5, #10]
    8d7e:	b168      	cbz	r0, 8d9c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a0>
    8d80:	72ae      	strb	r6, [r5, #10]
    8d82:	f8b4 0132 	ldrh.w	r0, [r4, #306]	; 0x132
    8d86:	1c40      	adds	r0, r0, #1
    8d88:	f8a4 0132 	strh.w	r0, [r4, #306]	; 0x132
    8d8c:	2001      	movs	r0, #1
    8d8e:	f000 f83b 	bl	8e08 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x60c>
    8d92:	f000 0007 	and.w	r0, r0, #7
    8d96:	1c40      	adds	r0, r0, #1
    8d98:	f884 0134 	strb.w	r0, [r4, #308]	; 0x134
    8d9c:	f894 0178 	ldrb.w	r0, [r4, #376]	; 0x178
    8da0:	4629      	mov	r1, r5
    8da2:	f007 f822 	bl	fdea <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2de>
    8da6:	e001      	b.n	8dac <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5b0>
    8da8:	e00a      	b.n	8dc0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5c4>
    8daa:	e00d      	b.n	8dc8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5cc>
    8dac:	b320      	cbz	r0, 8df8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5fc>
    8dae:	9807      	ldr	r0, [sp, #28]
    8db0:	f080 0001 	eor.w	r0, r0, #1
    8db4:	f884 0158 	strb.w	r0, [r4, #344]	; 0x158
    8db8:	2000      	movs	r0, #0
    8dba:	b009      	add	sp, #36	; 0x24
    8dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8dc0:	f240 513c 	movw	r1, #1340	; 0x53c
    8dc4:	e01a      	b.n	8dfc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x600>
    8dc6:	e015      	b.n	8df4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5f8>
    8dc8:	f1b9 0f00 	cmp.w	r9, #0
    8dcc:	d1c8      	bne.n	8d60 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x564>
    8dce:	f894 0144 	ldrb.w	r0, [r4, #324]	; 0x144
    8dd2:	2800      	cmp	r0, #0
    8dd4:	d0e2      	beq.n	8d9c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a0>
    8dd6:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
    8dda:	6920      	ldr	r0, [r4, #16]
    8ddc:	1a41      	subs	r1, r0, r1
    8dde:	4628      	mov	r0, r5
    8de0:	f005 ff5c 	bl	ec9c <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    8de4:	0400      	lsls	r0, r0, #16
    8de6:	0c00      	lsrs	r0, r0, #16
    8de8:	d0d8      	beq.n	8d9c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a0>
    8dea:	9912      	ldr	r1, [sp, #72]	; 0x48
    8dec:	b101      	cbz	r1, 8df0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5f4>
    8dee:	8008      	strh	r0, [r1, #0]
    8df0:	2001      	movs	r0, #1
    8df2:	e7e2      	b.n	8dba <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5be>
    8df4:	2000      	movs	r0, #0
    8df6:	e7b9      	b.n	8d6c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x570>
    8df8:	f240 519b 	movw	r1, #1435	; 0x59b
    8dfc:	2030      	movs	r0, #48	; 0x30
    8dfe:	f7fc f9b7 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8e02:	0000      	.short	0x0000
    8e04:	20000128 	.word	0x20000128
    8e08:	b108      	cbz	r0, 8e0e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x612>
    8e0a:	4803      	ldr	r0, [pc, #12]	; (8e18 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x61c>)
    8e0c:	e001      	b.n	8e12 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x616>
    8e0e:	4802      	ldr	r0, [pc, #8]	; (8e18 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x61c>)
    8e10:	3008      	adds	r0, #8
    8e12:	f7fe bc79 	b.w	7708 <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY>
    8e16:	0000      	.short	0x0000
    8e18:	20000140 	.word	0x20000140
    8e1c:	b570      	push	{r4, r5, r6, lr}
    8e1e:	4604      	mov	r4, r0
    8e20:	f7f9 feec 	bl	2bfc <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    8e24:	2864      	cmp	r0, #100	; 0x64
    8e26:	d901      	bls.n	8e2c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x630>
    8e28:	4605      	mov	r5, r0
    8e2a:	e000      	b.n	8e2e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x632>
    8e2c:	2564      	movs	r5, #100	; 0x64
    8e2e:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    8e32:	2128      	movs	r1, #40	; 0x28
    8e34:	f006 fec5 	bl	fbc2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb6>
    8e38:	4428      	add	r0, r5
    8e3a:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
    8e3e:	f200 203d 	addw	r0, r0, #573	; 0x23d
    8e42:	180e      	adds	r6, r1, r0
    8e44:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    8e48:	2128      	movs	r1, #40	; 0x28
    8e4a:	f006 feba 	bl	fbc2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb6>
    8e4e:	f200 22a1 	addw	r2, r0, #673	; 0x2a1
    8e52:	4620      	mov	r0, r4
    8e54:	6b21      	ldr	r1, [r4, #48]	; 0x30
    8e56:	f006 faa7 	bl	f3a8 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    8e5a:	4605      	mov	r5, r0
    8e5c:	4632      	mov	r2, r6
    8e5e:	4620      	mov	r0, r4
    8e60:	6921      	ldr	r1, [r4, #16]
    8e62:	f006 faa1 	bl	f3a8 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    8e66:	4907      	ldr	r1, [pc, #28]	; (8e84 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x688>)
    8e68:	4285      	cmp	r5, r0
    8e6a:	6088      	str	r0, [r1, #8]
    8e6c:	d200      	bcs.n	8e70 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x674>
    8e6e:	4628      	mov	r0, r5
    8e70:	6048      	str	r0, [r1, #4]
    8e72:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
    8e76:	f5a0 70b3 	sub.w	r0, r0, #358	; 0x166
    8e7a:	60c8      	str	r0, [r1, #12]
    8e7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8e80:	f7fa bd60 	b.w	3944 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    8e84:	20000128 	.word	0x20000128
    8e88:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    8e8a:	4604      	mov	r4, r0
    8e8c:	f004 f9e3 	bl	d256 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    8e90:	4601      	mov	r1, r0
    8e92:	f8d4 016c 	ldr.w	r0, [r4, #364]	; 0x16c
    8e96:	f7f9 fd6b 	bl	2970 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    8e9a:	4601      	mov	r1, r0
    8e9c:	6922      	ldr	r2, [r4, #16]
    8e9e:	2000      	movs	r0, #0
    8ea0:	b10a      	cbz	r2, 8ea6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6aa>
    8ea2:	fbb1 f0f2 	udiv	r0, r1, r2
    8ea6:	f894 1086 	ldrb.w	r1, [r4, #134]	; 0x86
    8eaa:	290d      	cmp	r1, #13
    8eac:	d00c      	beq.n	8ec8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6cc>
    8eae:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
    8eb2:	f8b4 1156 	ldrh.w	r1, [r4, #342]	; 0x156
    8eb6:	1813      	adds	r3, r2, r0
    8eb8:	1acb      	subs	r3, r1, r3
    8eba:	b21b      	sxth	r3, r3
    8ebc:	2b00      	cmp	r3, #0
    8ebe:	db06      	blt.n	8ece <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6d2>
    8ec0:	1c49      	adds	r1, r1, #1
    8ec2:	f8a4 1156 	strh.w	r1, [r4, #342]	; 0x156
    8ec6:	e006      	b.n	8ed6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6da>
    8ec8:	f8b4 0156 	ldrh.w	r0, [r4, #342]	; 0x156
    8ecc:	e012      	b.n	8ef4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6f8>
    8ece:	1c40      	adds	r0, r0, #1
    8ed0:	4410      	add	r0, r2
    8ed2:	f8a4 0156 	strh.w	r0, [r4, #342]	; 0x156
    8ed6:	f894 0159 	ldrb.w	r0, [r4, #345]	; 0x159
    8eda:	f88d 0000 	strb.w	r0, [sp]
    8ede:	9800      	ldr	r0, [sp, #0]
    8ee0:	9000      	str	r0, [sp, #0]
    8ee2:	f89d 0000 	ldrb.w	r0, [sp]
    8ee6:	b940      	cbnz	r0, 8efa <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6fe>
    8ee8:	f8b4 0156 	ldrh.w	r0, [r4, #342]	; 0x156
    8eec:	f8b4 110c 	ldrh.w	r1, [r4, #268]	; 0x10c
    8ef0:	4288      	cmp	r0, r1
    8ef2:	d102      	bne.n	8efa <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6fe>
    8ef4:	1c40      	adds	r0, r0, #1
    8ef6:	f8a4 0156 	strh.w	r0, [r4, #342]	; 0x156
    8efa:	f8b4 0176 	ldrh.w	r0, [r4, #374]	; 0x176
    8efe:	1c40      	adds	r0, r0, #1
    8f00:	f8a4 0176 	strh.w	r0, [r4, #374]	; 0x176
    8f04:	f8b4 00ae 	ldrh.w	r0, [r4, #174]	; 0xae
    8f08:	f8b4 10ac 	ldrh.w	r1, [r4, #172]	; 0xac
    8f0c:	1a40      	subs	r0, r0, r1
    8f0e:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    8f12:	1e40      	subs	r0, r0, #1
    8f14:	4408      	add	r0, r1
    8f16:	b285      	uxth	r5, r0
    8f18:	e023      	b.n	8f62 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x766>
    8f1a:	a801      	add	r0, sp, #4
    8f1c:	2300      	movs	r3, #0
    8f1e:	9000      	str	r0, [sp, #0]
    8f20:	461a      	mov	r2, r3
    8f22:	4620      	mov	r0, r4
    8f24:	f7ff fd66 	bl	89f4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    8f28:	2800      	cmp	r0, #0
    8f2a:	d036      	beq.n	8f9a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x79e>
    8f2c:	2801      	cmp	r0, #1
    8f2e:	d004      	beq.n	8f3a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x73e>
    8f30:	f240 6152 	movw	r1, #1618	; 0x652
    8f34:	2030      	movs	r0, #48	; 0x30
    8f36:	f7fc f91b 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8f3a:	f8b4 1156 	ldrh.w	r1, [r4, #342]	; 0x156
    8f3e:	f8b4 0108 	ldrh.w	r0, [r4, #264]	; 0x108
    8f42:	1a0a      	subs	r2, r1, r0
    8f44:	b212      	sxth	r2, r2
    8f46:	2a00      	cmp	r2, #0
    8f48:	da06      	bge.n	8f58 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x75c>
    8f4a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    8f4e:	440a      	add	r2, r1
    8f50:	1aaa      	subs	r2, r5, r2
    8f52:	b212      	sxth	r2, r2
    8f54:	2a00      	cmp	r2, #0
    8f56:	db02      	blt.n	8f5e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x762>
    8f58:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    8f5c:	4408      	add	r0, r1
    8f5e:	f8a4 0156 	strh.w	r0, [r4, #342]	; 0x156
    8f62:	f8b4 1156 	ldrh.w	r1, [r4, #342]	; 0x156
    8f66:	1a68      	subs	r0, r5, r1
    8f68:	b200      	sxth	r0, r0
    8f6a:	2800      	cmp	r0, #0
    8f6c:	dad5      	bge.n	8f1a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x71e>
    8f6e:	f894 0089 	ldrb.w	r0, [r4, #137]	; 0x89
    8f72:	b180      	cbz	r0, 8f96 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x79a>
    8f74:	f05f 0008 	movs.w	r0, #8
    8f78:	f884 009d 	strb.w	r0, [r4, #157]	; 0x9d
    8f7c:	20ff      	movs	r0, #255	; 0xff
    8f7e:	f884 009c 	strb.w	r0, [r4, #156]	; 0x9c
    8f82:	4620      	mov	r0, r4
    8f84:	f007 f902 	bl	1018c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    8f88:	4620      	mov	r0, r4
    8f8a:	f006 ff88 	bl	fe9e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x392>
    8f8e:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    8f92:	f7fe ba23 	b.w	73dc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    8f96:	203e      	movs	r0, #62	; 0x3e
    8f98:	e7ee      	b.n	8f78 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x77c>
    8f9a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

00008f9c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>:
    8f9c:	4806      	ldr	r0, [pc, #24]	; (8fb8 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x1c>)
    8f9e:	4905      	ldr	r1, [pc, #20]	; (8fb4 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x18>)
    8fa0:	6501      	str	r1, [r0, #80]	; 0x50
    8fa2:	4906      	ldr	r1, [pc, #24]	; (8fbc <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x20>)
    8fa4:	6541      	str	r1, [r0, #84]	; 0x54
    8fa6:	4807      	ldr	r0, [pc, #28]	; (8fc4 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x28>)
    8fa8:	4905      	ldr	r1, [pc, #20]	; (8fc0 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x24>)
    8faa:	6501      	str	r1, [r0, #80]	; 0x50
    8fac:	4906      	ldr	r1, [pc, #24]	; (8fc8 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x2c>)
    8fae:	6541      	str	r1, [r0, #84]	; 0x54
    8fb0:	4770      	bx	lr
    8fb2:	0000      	.short	0x0000
    8fb4:	0000a57d 	.word	0x0000a57d
    8fb8:	20000164 	.word	0x20000164
    8fbc:	0000a65d 	.word	0x0000a65d
    8fc0:	0000accd 	.word	0x0000accd
    8fc4:	200001cc 	.word	0x200001cc
    8fc8:	0000acfd 	.word	0x0000acfd

00008fcc <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA>:
    8fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8fce:	460d      	mov	r5, r1
    8fd0:	4607      	mov	r7, r0
    8fd2:	2100      	movs	r1, #0
    8fd4:	f005 faf6 	bl	e5c4 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    8fd8:	1e04      	subs	r4, r0, #0
    8fda:	d050      	beq.n	907e <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb2>
    8fdc:	f894 0078 	ldrb.w	r0, [r4, #120]	; 0x78
    8fe0:	2800      	cmp	r0, #0
    8fe2:	d04c      	beq.n	907e <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb2>
    8fe4:	f894 01c8 	ldrb.w	r0, [r4, #456]	; 0x1c8
    8fe8:	f88d 0000 	strb.w	r0, [sp]
    8fec:	9800      	ldr	r0, [sp, #0]
    8fee:	9000      	str	r0, [sp, #0]
    8ff0:	f89d 0000 	ldrb.w	r0, [sp]
    8ff4:	2600      	movs	r6, #0
    8ff6:	b118      	cbz	r0, 9000 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x34>
    8ff8:	706e      	strb	r6, [r5, #1]
    8ffa:	2007      	movs	r0, #7
    8ffc:	7028      	strb	r0, [r5, #0]
    8ffe:	e00d      	b.n	901c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x50>
    9000:	f894 01d4 	ldrb.w	r0, [r4, #468]	; 0x1d4
    9004:	b390      	cbz	r0, 906c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xa0>
    9006:	f894 01d4 	ldrb.w	r0, [r4, #468]	; 0x1d4
    900a:	280b      	cmp	r0, #11
    900c:	d02f      	beq.n	906e <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xa2>
    900e:	280c      	cmp	r0, #12
    9010:	d01c      	beq.n	904c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x80>
    9012:	f640 21dc 	movw	r1, #2780	; 0xadc
    9016:	2031      	movs	r0, #49	; 0x31
    9018:	f7fc f8aa 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    901c:	f894 01c8 	ldrb.w	r0, [r4, #456]	; 0x1c8
    9020:	f88d 0000 	strb.w	r0, [sp]
    9024:	9800      	ldr	r0, [sp, #0]
    9026:	9000      	str	r0, [sp, #0]
    9028:	f89d 0000 	ldrb.w	r0, [sp]
    902c:	b160      	cbz	r0, 9048 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x7c>
    902e:	f884 61c8 	strb.w	r6, [r4, #456]	; 0x1c8
    9032:	8526      	strh	r6, [r4, #40]	; 0x28
    9034:	f8d4 01ca 	ldr.w	r0, [r4, #458]	; 0x1ca
    9038:	6068      	str	r0, [r5, #4]
    903a:	f8d4 01ce 	ldr.w	r0, [r4, #462]	; 0x1ce
    903e:	60a8      	str	r0, [r5, #8]
    9040:	f8b4 01d2 	ldrh.w	r0, [r4, #466]	; 0x1d2
    9044:	81a8      	strh	r0, [r5, #12]
    9046:	e7e9      	b.n	901c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x50>
    9048:	712e      	strb	r6, [r5, #4]
    904a:	e0fa      	b.n	9242 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x276>
    904c:	8820      	ldrh	r0, [r4, #0]
    904e:	f7fc fca9 	bl	59a4 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    9052:	4607      	mov	r7, r0
    9054:	f005 f97c 	bl	e350 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    9058:	b980      	cbnz	r0, 907c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb0>
    905a:	706e      	strb	r6, [r5, #1]
    905c:	200c      	movs	r0, #12
    905e:	7028      	strb	r0, [r5, #0]
    9060:	f894 01d6 	ldrb.w	r0, [r4, #470]	; 0x1d6
    9064:	7128      	strb	r0, [r5, #4]
    9066:	8820      	ldrh	r0, [r4, #0]
    9068:	80e8      	strh	r0, [r5, #6]
    906a:	e014      	b.n	9096 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xca>
    906c:	e019      	b.n	90a2 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xd6>
    906e:	8820      	ldrh	r0, [r4, #0]
    9070:	f7fc fc98 	bl	59a4 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    9074:	4607      	mov	r7, r0
    9076:	f005 f96b 	bl	e350 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    907a:	b108      	cbz	r0, 9080 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb4>
    907c:	2000      	movs	r0, #0
    907e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9080:	706e      	strb	r6, [r5, #1]
    9082:	200b      	movs	r0, #11
    9084:	7028      	strb	r0, [r5, #0]
    9086:	f894 01d6 	ldrb.w	r0, [r4, #470]	; 0x1d6
    908a:	7128      	strb	r0, [r5, #4]
    908c:	8820      	ldrh	r0, [r4, #0]
    908e:	80e8      	strh	r0, [r5, #6]
    9090:	f894 01da 	ldrb.w	r0, [r4, #474]	; 0x1da
    9094:	7228      	strb	r0, [r5, #8]
    9096:	f884 61d4 	strb.w	r6, [r4, #468]	; 0x1d4
    909a:	4638      	mov	r0, r7
    909c:	f005 f973 	bl	e386 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    90a0:	e0cf      	b.n	9242 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x276>
    90a2:	f894 020a 	ldrb.w	r0, [r4, #522]	; 0x20a
    90a6:	f88d 0000 	strb.w	r0, [sp]
    90aa:	9800      	ldr	r0, [sp, #0]
    90ac:	9000      	str	r0, [sp, #0]
    90ae:	f89d 0000 	ldrb.w	r0, [sp]
    90b2:	b130      	cbz	r0, 90c2 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xf6>
    90b4:	706e      	strb	r6, [r5, #1]
    90b6:	200e      	movs	r0, #14
    90b8:	7028      	strb	r0, [r5, #0]
    90ba:	80af      	strh	r7, [r5, #4]
    90bc:	f884 620a 	strb.w	r6, [r4, #522]	; 0x20a
    90c0:	e0bf      	b.n	9242 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x276>
    90c2:	f894 01dc 	ldrb.w	r0, [r4, #476]	; 0x1dc
    90c6:	f88d 0000 	strb.w	r0, [sp]
    90ca:	9800      	ldr	r0, [sp, #0]
    90cc:	9000      	str	r0, [sp, #0]
    90ce:	f89d 0000 	ldrb.w	r0, [sp]
    90d2:	b198      	cbz	r0, 90fc <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x130>
    90d4:	706e      	strb	r6, [r5, #1]
    90d6:	2008      	movs	r0, #8
    90d8:	7028      	strb	r0, [r5, #0]
    90da:	8820      	ldrh	r0, [r4, #0]
    90dc:	80a8      	strh	r0, [r5, #4]
    90de:	f8d4 11e0 	ldr.w	r1, [r4, #480]	; 0x1e0
    90e2:	f8c5 1006 	str.w	r1, [r5, #6]
    90e6:	f8d4 11e4 	ldr.w	r1, [r4, #484]	; 0x1e4
    90ea:	f8c5 100a 	str.w	r1, [r5, #10]
    90ee:	f8b4 01e8 	ldrh.w	r0, [r4, #488]	; 0x1e8
    90f2:	81e8      	strh	r0, [r5, #14]
    90f4:	f504 74ee 	add.w	r4, r4, #476	; 0x1dc
    90f8:	7026      	strb	r6, [r4, #0]
    90fa:	e0a2      	b.n	9242 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x276>
    90fc:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
    9100:	f88d 0000 	strb.w	r0, [sp]
    9104:	9800      	ldr	r0, [sp, #0]
    9106:	9000      	str	r0, [sp, #0]
    9108:	f89d 0000 	ldrb.w	r0, [sp]
    910c:	b118      	cbz	r0, 9116 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x14a>
    910e:	706e      	strb	r6, [r5, #1]
    9110:	2016      	movs	r0, #22
    9112:	7028      	strb	r0, [r5, #0]
    9114:	e017      	b.n	9146 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x17a>
    9116:	f894 021a 	ldrb.w	r0, [r4, #538]	; 0x21a
    911a:	f88d 0000 	strb.w	r0, [sp]
    911e:	9800      	ldr	r0, [sp, #0]
    9120:	9000      	str	r0, [sp, #0]
    9122:	f89d 0000 	ldrb.w	r0, [sp]
    9126:	b1e8      	cbz	r0, 9164 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x198>
    9128:	706e      	strb	r6, [r5, #1]
    912a:	2006      	movs	r0, #6
    912c:	7028      	strb	r0, [r5, #0]
    912e:	f8d4 021c 	ldr.w	r0, [r4, #540]	; 0x21c
    9132:	6068      	str	r0, [r5, #4]
    9134:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
    9138:	60a8      	str	r0, [r5, #8]
    913a:	f8d4 0224 	ldr.w	r0, [r4, #548]	; 0x224
    913e:	60e8      	str	r0, [r5, #12]
    9140:	f504 7407 	add.w	r4, r4, #540	; 0x21c
    9144:	e032      	b.n	91ac <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1e0>
    9146:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
    914a:	f88d 0000 	strb.w	r0, [sp]
    914e:	9800      	ldr	r0, [sp, #0]
    9150:	9000      	str	r0, [sp, #0]
    9152:	f89d 0000 	ldrb.w	r0, [sp]
    9156:	b358      	cbz	r0, 91b0 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1e4>
    9158:	f884 6204 	strb.w	r6, [r4, #516]	; 0x204
    915c:	f8d4 0206 	ldr.w	r0, [r4, #518]	; 0x206
    9160:	6068      	str	r0, [r5, #4]
    9162:	e7f0      	b.n	9146 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x17a>
    9164:	f894 01ea 	ldrb.w	r0, [r4, #490]	; 0x1ea
    9168:	f88d 0000 	strb.w	r0, [sp]
    916c:	9800      	ldr	r0, [sp, #0]
    916e:	9000      	str	r0, [sp, #0]
    9170:	f89d 0000 	ldrb.w	r0, [sp]
    9174:	b118      	cbz	r0, 917e <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1b2>
    9176:	706e      	strb	r6, [r5, #1]
    9178:	2012      	movs	r0, #18
    917a:	7028      	strb	r0, [r5, #0]
    917c:	e019      	b.n	91b2 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1e6>
    917e:	f894 01f8 	ldrb.w	r0, [r4, #504]	; 0x1f8
    9182:	f88d 0000 	strb.w	r0, [sp]
    9186:	9800      	ldr	r0, [sp, #0]
    9188:	9000      	str	r0, [sp, #0]
    918a:	f89d 0000 	ldrb.w	r0, [sp]
    918e:	b328      	cbz	r0, 91dc <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x210>
    9190:	706e      	strb	r6, [r5, #1]
    9192:	2018      	movs	r0, #24
    9194:	7028      	strb	r0, [r5, #0]
    9196:	f8d4 01fa 	ldr.w	r0, [r4, #506]	; 0x1fa
    919a:	6068      	str	r0, [r5, #4]
    919c:	f8d4 01fe 	ldr.w	r0, [r4, #510]	; 0x1fe
    91a0:	60a8      	str	r0, [r5, #8]
    91a2:	f8b4 0202 	ldrh.w	r0, [r4, #514]	; 0x202
    91a6:	81a8      	strh	r0, [r5, #12]
    91a8:	f504 74fd 	add.w	r4, r4, #506	; 0x1fa
    91ac:	f804 6c02 	strb.w	r6, [r4, #-2]
    91b0:	e047      	b.n	9242 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x276>
    91b2:	f894 01ea 	ldrb.w	r0, [r4, #490]	; 0x1ea
    91b6:	f88d 0000 	strb.w	r0, [sp]
    91ba:	9800      	ldr	r0, [sp, #0]
    91bc:	9000      	str	r0, [sp, #0]
    91be:	f89d 0000 	ldrb.w	r0, [sp]
    91c2:	b3e8      	cbz	r0, 9240 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x274>
    91c4:	f884 61ea 	strb.w	r6, [r4, #490]	; 0x1ea
    91c8:	f8d4 01ec 	ldr.w	r0, [r4, #492]	; 0x1ec
    91cc:	6068      	str	r0, [r5, #4]
    91ce:	f8d4 01f0 	ldr.w	r0, [r4, #496]	; 0x1f0
    91d2:	60a8      	str	r0, [r5, #8]
    91d4:	f8d4 01f4 	ldr.w	r0, [r4, #500]	; 0x1f4
    91d8:	60e8      	str	r0, [r5, #12]
    91da:	e7ea      	b.n	91b2 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1e6>
    91dc:	f894 020c 	ldrb.w	r0, [r4, #524]	; 0x20c
    91e0:	f88d 0000 	strb.w	r0, [sp]
    91e4:	9800      	ldr	r0, [sp, #0]
    91e6:	9000      	str	r0, [sp, #0]
    91e8:	f89d 0000 	ldrb.w	r0, [sp]
    91ec:	b138      	cbz	r0, 91fe <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x232>
    91ee:	2019      	movs	r0, #25
    91f0:	7028      	strb	r0, [r5, #0]
    91f2:	f8d4 020e 	ldr.w	r0, [r4, #526]	; 0x20e
    91f6:	6068      	str	r0, [r5, #4]
    91f8:	f884 620c 	strb.w	r6, [r4, #524]	; 0x20c
    91fc:	e021      	b.n	9242 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x276>
    91fe:	f894 0212 	ldrb.w	r0, [r4, #530]	; 0x212
    9202:	f88d 0000 	strb.w	r0, [sp]
    9206:	9800      	ldr	r0, [sp, #0]
    9208:	9000      	str	r0, [sp, #0]
    920a:	f89d 0000 	ldrb.w	r0, [sp]
    920e:	2800      	cmp	r0, #0
    9210:	f43f af35 	beq.w	907e <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb2>
    9214:	706e      	strb	r6, [r5, #1]
    9216:	2013      	movs	r0, #19
    9218:	f885 0000 	strb.w	r0, [r5]
    921c:	f894 0212 	ldrb.w	r0, [r4, #530]	; 0x212
    9220:	f88d 0000 	strb.w	r0, [sp]
    9224:	9800      	ldr	r0, [sp, #0]
    9226:	9000      	str	r0, [sp, #0]
    9228:	f89d 0000 	ldrb.w	r0, [sp]
    922c:	b140      	cbz	r0, 9240 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x274>
    922e:	f884 6212 	strb.w	r6, [r4, #530]	; 0x212
    9232:	f8d4 0214 	ldr.w	r0, [r4, #532]	; 0x214
    9236:	6068      	str	r0, [r5, #4]
    9238:	f8b4 0218 	ldrh.w	r0, [r4, #536]	; 0x218
    923c:	8128      	strh	r0, [r5, #8]
    923e:	e7ed      	b.n	921c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x250>
    9240:	e7ff      	b.n	9242 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x276>
    9242:	2001      	movs	r0, #1
    9244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00009248 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>:
    9248:	481d      	ldr	r0, [pc, #116]	; (92c0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x78>)
    924a:	491c      	ldr	r1, [pc, #112]	; (92bc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x74>)
    924c:	6081      	str	r1, [r0, #8]
    924e:	491d      	ldr	r1, [pc, #116]	; (92c4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x7c>)
    9250:	6041      	str	r1, [r0, #4]
    9252:	491d      	ldr	r1, [pc, #116]	; (92c8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x80>)
    9254:	6001      	str	r1, [r0, #0]
    9256:	491d      	ldr	r1, [pc, #116]	; (92cc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x84>)
    9258:	6281      	str	r1, [r0, #40]	; 0x28
    925a:	491d      	ldr	r1, [pc, #116]	; (92d0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x88>)
    925c:	62c1      	str	r1, [r0, #44]	; 0x2c
    925e:	491d      	ldr	r1, [pc, #116]	; (92d4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x8c>)
    9260:	60c1      	str	r1, [r0, #12]
    9262:	491d      	ldr	r1, [pc, #116]	; (92d8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x90>)
    9264:	6181      	str	r1, [r0, #24]
    9266:	491d      	ldr	r1, [pc, #116]	; (92dc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x94>)
    9268:	6301      	str	r1, [r0, #48]	; 0x30
    926a:	491d      	ldr	r1, [pc, #116]	; (92e0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x98>)
    926c:	6201      	str	r1, [r0, #32]
    926e:	491d      	ldr	r1, [pc, #116]	; (92e4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x9c>)
    9270:	64c1      	str	r1, [r0, #76]	; 0x4c
    9272:	491d      	ldr	r1, [pc, #116]	; (92e8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa0>)
    9274:	6481      	str	r1, [r0, #72]	; 0x48
    9276:	491d      	ldr	r1, [pc, #116]	; (92ec <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa4>)
    9278:	6441      	str	r1, [r0, #68]	; 0x44
    927a:	491d      	ldr	r1, [pc, #116]	; (92f0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa8>)
    927c:	6341      	str	r1, [r0, #52]	; 0x34
    927e:	491d      	ldr	r1, [pc, #116]	; (92f4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xac>)
    9280:	61c1      	str	r1, [r0, #28]
    9282:	491d      	ldr	r1, [pc, #116]	; (92f8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb0>)
    9284:	6241      	str	r1, [r0, #36]	; 0x24
    9286:	481e      	ldr	r0, [pc, #120]	; (9300 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb8>)
    9288:	491c      	ldr	r1, [pc, #112]	; (92fc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb4>)
    928a:	6081      	str	r1, [r0, #8]
    928c:	491d      	ldr	r1, [pc, #116]	; (9304 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xbc>)
    928e:	61c1      	str	r1, [r0, #28]
    9290:	491d      	ldr	r1, [pc, #116]	; (9308 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc0>)
    9292:	6241      	str	r1, [r0, #36]	; 0x24
    9294:	491d      	ldr	r1, [pc, #116]	; (930c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc4>)
    9296:	62c1      	str	r1, [r0, #44]	; 0x2c
    9298:	491d      	ldr	r1, [pc, #116]	; (9310 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc8>)
    929a:	6101      	str	r1, [r0, #16]
    929c:	491d      	ldr	r1, [pc, #116]	; (9314 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xcc>)
    929e:	6141      	str	r1, [r0, #20]
    92a0:	491d      	ldr	r1, [pc, #116]	; (9318 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd0>)
    92a2:	6441      	str	r1, [r0, #68]	; 0x44
    92a4:	6341      	str	r1, [r0, #52]	; 0x34
    92a6:	491d      	ldr	r1, [pc, #116]	; (931c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd4>)
    92a8:	6181      	str	r1, [r0, #24]
    92aa:	491d      	ldr	r1, [pc, #116]	; (9320 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd8>)
    92ac:	6301      	str	r1, [r0, #48]	; 0x30
    92ae:	491d      	ldr	r1, [pc, #116]	; (9324 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xdc>)
    92b0:	6481      	str	r1, [r0, #72]	; 0x48
    92b2:	491d      	ldr	r1, [pc, #116]	; (9328 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe0>)
    92b4:	64c1      	str	r1, [r0, #76]	; 0x4c
    92b6:	491d      	ldr	r1, [pc, #116]	; (932c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe4>)
    92b8:	6381      	str	r1, [r0, #56]	; 0x38
    92ba:	4770      	bx	lr
    92bc:	0000aa01 	.word	0x0000aa01
    92c0:	20000164 	.word	0x20000164
    92c4:	0000a2e1 	.word	0x0000a2e1
    92c8:	0000a33d 	.word	0x0000a33d
    92cc:	0000a725 	.word	0x0000a725
    92d0:	0000a769 	.word	0x0000a769
    92d4:	0000a3e9 	.word	0x0000a3e9
    92d8:	0000a9d9 	.word	0x0000a9d9
    92dc:	0000ab19 	.word	0x0000ab19
    92e0:	0000a495 	.word	0x0000a495
    92e4:	0000a6f9 	.word	0x0000a6f9
    92e8:	0000a6cd 	.word	0x0000a6cd
    92ec:	0000a999 	.word	0x0000a999
    92f0:	0000a9c9 	.word	0x0000a9c9
    92f4:	0000aa35 	.word	0x0000aa35
    92f8:	0000a4e1 	.word	0x0000a4e1
    92fc:	0000aee5 	.word	0x0000aee5
    9300:	200001cc 	.word	0x200001cc
    9304:	0000af0d 	.word	0x0000af0d
    9308:	0000ac9d 	.word	0x0000ac9d
    930c:	0000ad75 	.word	0x0000ad75
    9310:	0000ac71 	.word	0x0000ac71
    9314:	0000ae4d 	.word	0x0000ae4d
    9318:	0000adf9 	.word	0x0000adf9
    931c:	0000ae71 	.word	0x0000ae71
    9320:	0000af65 	.word	0x0000af65
    9324:	0000ad2d 	.word	0x0000ad2d
    9328:	0000ad5d 	.word	0x0000ad5d
    932c:	0000ae1d 	.word	0x0000ae1d

00009330 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>:
    9330:	4806      	ldr	r0, [pc, #24]	; (934c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x1c>)
    9332:	4905      	ldr	r1, [pc, #20]	; (9348 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x18>)
    9334:	6581      	str	r1, [r0, #88]	; 0x58
    9336:	4906      	ldr	r1, [pc, #24]	; (9350 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x20>)
    9338:	6601      	str	r1, [r0, #96]	; 0x60
    933a:	4807      	ldr	r0, [pc, #28]	; (9358 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x28>)
    933c:	4905      	ldr	r1, [pc, #20]	; (9354 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x24>)
    933e:	6581      	str	r1, [r0, #88]	; 0x58
    9340:	4906      	ldr	r1, [pc, #24]	; (935c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2c>)
    9342:	65c1      	str	r1, [r0, #92]	; 0x5c
    9344:	4770      	bx	lr
    9346:	0000      	.short	0x0000
    9348:	0000a789 	.word	0x0000a789
    934c:	20000164 	.word	0x20000164
    9350:	0000a85d 	.word	0x0000a85d
    9354:	0000ada1 	.word	0x0000ada1
    9358:	200001cc 	.word	0x200001cc
    935c:	0000add1 	.word	0x0000add1

00009360 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>:
    9360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9364:	2101      	movs	r1, #1
    9366:	4c7d      	ldr	r4, [pc, #500]	; (955c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fc>)
    9368:	2500      	movs	r5, #0
    936a:	f361 0207 	bfi	r2, r1, #0, #8
    936e:	8065      	strh	r5, [r4, #2]
    9370:	7065      	strb	r5, [r4, #1]
    9372:	7025      	strb	r5, [r4, #0]
    9374:	60a0      	str	r0, [r4, #8]
    9376:	4690      	mov	r8, r2
    9378:	4606      	mov	r6, r0
    937a:	f880 1113 	strb.w	r1, [r0, #275]	; 0x113
    937e:	8800      	ldrh	r0, [r0, #0]
    9380:	f7fc fb26 	bl	59d0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    9384:	b180      	cbz	r0, 93a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x48>
    9386:	68a0      	ldr	r0, [r4, #8]
    9388:	8800      	ldrh	r0, [r0, #0]
    938a:	f7fc fd73 	bl	5e74 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    938e:	68a0      	ldr	r0, [r4, #8]
    9390:	8800      	ldrh	r0, [r0, #0]
    9392:	f7fc fd17 	bl	5dc4 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    9396:	68a0      	ldr	r0, [r4, #8]
    9398:	f8b0 110a 	ldrh.w	r1, [r0, #266]	; 0x10a
    939c:	b1c9      	cbz	r1, 93d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72>
    939e:	3078      	adds	r0, #120	; 0x78
    93a0:	f006 ff03 	bl	101aa <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    93a4:	b118      	cbz	r0, 93ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4e>
    93a6:	e014      	b.n	93d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72>
    93a8:	f640 31b9 	movw	r1, #3001	; 0xbb9
    93ac:	e06c      	b.n	9488 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x128>
    93ae:	68a0      	ldr	r0, [r4, #8]
    93b0:	f890 1188 	ldrb.w	r1, [r0, #392]	; 0x188
    93b4:	f88d 1000 	strb.w	r1, [sp]
    93b8:	9900      	ldr	r1, [sp, #0]
    93ba:	9100      	str	r1, [sp, #0]
    93bc:	f89d 1000 	ldrb.w	r1, [sp]
    93c0:	b139      	cbz	r1, 93d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72>
    93c2:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    93c6:	2301      	movs	r3, #1
    93c8:	4619      	mov	r1, r3
    93ca:	3078      	adds	r0, #120	; 0x78
    93cc:	f005 fbad 	bl	eb2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    93d0:	b180      	cbz	r0, 93f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x94>
    93d2:	68a0      	ldr	r0, [r4, #8]
    93d4:	3078      	adds	r0, #120	; 0x78
    93d6:	f006 fee8 	bl	101aa <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    93da:	b128      	cbz	r0, 93e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x88>
    93dc:	68a0      	ldr	r0, [r4, #8]
    93de:	f890 00fc 	ldrb.w	r0, [r0, #252]	; 0xfc
    93e2:	bf00      	nop
    93e4:	f000 fbb4 	bl	9b50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7f0>
    93e8:	68a0      	ldr	r0, [r4, #8]
    93ea:	f890 1115 	ldrb.w	r1, [r0, #277]	; 0x115
    93ee:	b189      	cbz	r1, 9414 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb4>
    93f0:	80a5      	strh	r5, [r4, #4]
    93f2:	e01e      	b.n	9432 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2>
    93f4:	68a0      	ldr	r0, [r4, #8]
    93f6:	f8a0 50b0 	strh.w	r5, [r0, #176]	; 0xb0
    93fa:	f890 1189 	ldrb.w	r1, [r0, #393]	; 0x189
    93fe:	f880 10fe 	strb.w	r1, [r0, #254]	; 0xfe
    9402:	2100      	movs	r1, #0
    9404:	2002      	movs	r0, #2
    9406:	f000 fe43 	bl	a090 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd30>
    940a:	68a0      	ldr	r0, [r4, #8]
    940c:	f880 5112 	strb.w	r5, [r0, #274]	; 0x112
    9410:	2002      	movs	r0, #2
    9412:	e7e7      	b.n	93e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x84>
    9414:	f890 11c8 	ldrb.w	r1, [r0, #456]	; 0x1c8
    9418:	f88d 1000 	strb.w	r1, [sp]
    941c:	9900      	ldr	r1, [sp, #0]
    941e:	9100      	str	r1, [sp, #0]
    9420:	f89d 1000 	ldrb.w	r1, [sp]
    9424:	b919      	cbnz	r1, 942e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce>
    9426:	8d01      	ldrh	r1, [r0, #40]	; 0x28
    9428:	8b02      	ldrh	r2, [r0, #24]
    942a:	4291      	cmp	r1, r2
    942c:	d800      	bhi.n	9430 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd0>
    942e:	8b01      	ldrh	r1, [r0, #24]
    9430:	80a1      	strh	r1, [r4, #4]
    9432:	f8b0 110e 	ldrh.w	r1, [r0, #270]	; 0x10e
    9436:	1e49      	subs	r1, r1, #1
    9438:	b28f      	uxth	r7, r1
    943a:	f8b0 1110 	ldrh.w	r1, [r0, #272]	; 0x110
    943e:	4439      	add	r1, r7
    9440:	f8a0 1110 	strh.w	r1, [r0, #272]	; 0x110
    9444:	f830 1fac 	ldrh.w	r1, [r0, #172]!
    9448:	4439      	add	r1, r7
    944a:	8001      	strh	r1, [r0, #0]
    944c:	f001 fdb8 	bl	afc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c60>
    9450:	b120      	cbz	r0, 945c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfc>
    9452:	68a0      	ldr	r0, [r4, #8]
    9454:	f850 1fa0 	ldr.w	r1, [r0, #160]!
    9458:	4439      	add	r1, r7
    945a:	6001      	str	r1, [r0, #0]
    945c:	68a1      	ldr	r1, [r4, #8]
    945e:	f8b1 010a 	ldrh.w	r0, [r1, #266]	; 0x10a
    9462:	2801      	cmp	r0, #1
    9464:	d802      	bhi.n	946c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10c>
    9466:	1c40      	adds	r0, r0, #1
    9468:	f8a1 010a 	strh.w	r0, [r1, #266]	; 0x10a
    946c:	b10f      	cbz	r7, 9472 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x112>
    946e:	f881 511c 	strb.w	r5, [r1, #284]	; 0x11c
    9472:	f881 5112 	strb.w	r5, [r1, #274]	; 0x112
    9476:	f8b1 210e 	ldrh.w	r2, [r1, #270]	; 0x10e
    947a:	f101 0078 	add.w	r0, r1, #120	; 0x78
    947e:	f005 fcd6 	bl	ee2e <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    9482:	b120      	cbz	r0, 948e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12e>
    9484:	f640 31fd 	movw	r1, #3069	; 0xbfd
    9488:	2031      	movs	r0, #49	; 0x31
    948a:	f7fb fe71 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    948e:	68a0      	ldr	r0, [r4, #8]
    9490:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    9494:	290b      	cmp	r1, #11
    9496:	d001      	beq.n	949c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13c>
    9498:	290c      	cmp	r1, #12
    949a:	d119      	bne.n	94d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x170>
    949c:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
    94a0:	f8b0 31a4 	ldrh.w	r3, [r0, #420]	; 0x1a4
    94a4:	1ad2      	subs	r2, r2, r3
    94a6:	b212      	sxth	r2, r2
    94a8:	2a00      	cmp	r2, #0
    94aa:	db11      	blt.n	94d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x170>
    94ac:	f8d0 11a6 	ldr.w	r1, [r0, #422]	; 0x1a6
    94b0:	f8c0 108e 	str.w	r1, [r0, #142]	; 0x8e
    94b4:	f890 11aa 	ldrb.w	r1, [r0, #426]	; 0x1aa
    94b8:	f880 1092 	strb.w	r1, [r0, #146]	; 0x92
    94bc:	2103      	movs	r1, #3
    94be:	f7fd fd43 	bl	6f48 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    94c2:	68a0      	ldr	r0, [r4, #8]
    94c4:	f880 5086 	strb.w	r5, [r0, #134]	; 0x86
    94c8:	21ff      	movs	r1, #255	; 0xff
    94ca:	f880 10cc 	strb.w	r1, [r0, #204]	; 0xcc
    94ce:	e026      	b.n	951e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1be>
    94d0:	2924      	cmp	r1, #36	; 0x24
    94d2:	d111      	bne.n	94f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x198>
    94d4:	f8b0 107c 	ldrh.w	r1, [r0, #124]	; 0x7c
    94d8:	f8b0 21a4 	ldrh.w	r2, [r0, #420]	; 0x1a4
    94dc:	1a89      	subs	r1, r1, r2
    94de:	b209      	sxth	r1, r1
    94e0:	2900      	cmp	r1, #0
    94e2:	db09      	blt.n	94f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x198>
    94e4:	f880 5086 	strb.w	r5, [r0, #134]	; 0x86
    94e8:	f000 fe84 	bl	a1f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe94>
    94ec:	2800      	cmp	r0, #0
    94ee:	68a0      	ldr	r0, [r4, #8]
    94f0:	f880 51be 	strb.w	r5, [r0, #446]	; 0x1be
    94f4:	d029      	beq.n	954a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ea>
    94f6:	e012      	b.n	951e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1be>
    94f8:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    94fc:	2924      	cmp	r1, #36	; 0x24
    94fe:	d001      	beq.n	9504 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a4>
    9500:	2925      	cmp	r1, #37	; 0x25
    9502:	d10c      	bne.n	951e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1be>
    9504:	f8b0 107c 	ldrh.w	r1, [r0, #124]	; 0x7c
    9508:	f8b0 21a4 	ldrh.w	r2, [r0, #420]	; 0x1a4
    950c:	1a89      	subs	r1, r1, r2
    950e:	b209      	sxth	r1, r1
    9510:	2900      	cmp	r1, #0
    9512:	db04      	blt.n	951e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1be>
    9514:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    9518:	f000 fe6c 	bl	a1f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe94>
    951c:	b1a8      	cbz	r0, 954a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ea>
    951e:	4810      	ldr	r0, [pc, #64]	; (9560 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x200>)
    9520:	9000      	str	r0, [sp, #0]
    9522:	4b10      	ldr	r3, [pc, #64]	; (9564 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>)
    9524:	4a10      	ldr	r2, [pc, #64]	; (9568 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x208>)
    9526:	4631      	mov	r1, r6
    9528:	4640      	mov	r0, r8
    952a:	f7fc fd5d 	bl	5fe8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    952e:	68a0      	ldr	r0, [r4, #8]
    9530:	2301      	movs	r3, #1
    9532:	2105      	movs	r1, #5
    9534:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9538:	3078      	adds	r0, #120	; 0x78
    953a:	f005 faf6 	bl	eb2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    953e:	2800      	cmp	r0, #0
    9540:	d009      	beq.n	9556 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f6>
    9542:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9546:	f7fc bd49 	b.w	5fdc <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    954a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    954e:	2100      	movs	r1, #0
    9550:	4608      	mov	r0, r1
    9552:	f000 bbd3 	b.w	9cfc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x99c>
    9556:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    955a:	0000      	.short	0x0000
    955c:	20000150 	.word	0x20000150
    9560:	00009cfd 	.word	0x00009cfd
    9564:	00009809 	.word	0x00009809
    9568:	0000a141 	.word	0x0000a141
    956c:	b570      	push	{r4, r5, r6, lr}
    956e:	4c0f      	ldr	r4, [pc, #60]	; (95ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24c>)
    9570:	68a5      	ldr	r5, [r4, #8]
    9572:	f895 1085 	ldrb.w	r1, [r5, #133]	; 0x85
    9576:	2920      	cmp	r1, #32
    9578:	d002      	beq.n	9580 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x220>
    957a:	2926      	cmp	r1, #38	; 0x26
    957c:	d003      	beq.n	9586 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x226>
    957e:	e011      	b.n	95a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x244>
    9580:	f000 fe8a 	bl	a298 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf38>
    9584:	e008      	b.n	9598 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x238>
    9586:	f895 2086 	ldrb.w	r2, [r5, #134]	; 0x86
    958a:	2301      	movs	r3, #1
    958c:	210b      	movs	r1, #11
    958e:	f105 0078 	add.w	r0, r5, #120	; 0x78
    9592:	f005 faca 	bl	eb2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9596:	b138      	cbz	r0, 95a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x248>
    9598:	68a1      	ldr	r1, [r4, #8]
    959a:	2000      	movs	r0, #0
    959c:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    95a0:	f881 00b6 	strb.w	r0, [r1, #182]	; 0xb6
    95a4:	2000      	movs	r0, #0
    95a6:	bd70      	pop	{r4, r5, r6, pc}
    95a8:	202a      	movs	r0, #42	; 0x2a
    95aa:	e7e9      	b.n	9580 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x220>
    95ac:	20000150 	.word	0x20000150
    95b0:	4804      	ldr	r0, [pc, #16]	; (95c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>)
    95b2:	2100      	movs	r1, #0
    95b4:	6880      	ldr	r0, [r0, #8]
    95b6:	f820 1fb8 	strh.w	r1, [r0, #184]!
    95ba:	7881      	ldrb	r1, [r0, #2]
    95bc:	1c49      	adds	r1, r1, #1
    95be:	7081      	strb	r1, [r0, #2]
    95c0:	4770      	bx	lr
    95c2:	0000      	.short	0x0000
    95c4:	20000150 	.word	0x20000150
    95c8:	4807      	ldr	r0, [pc, #28]	; (95e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x288>)
    95ca:	b510      	push	{r4, lr}
    95cc:	6881      	ldr	r1, [r0, #8]
    95ce:	f811 0fba 	ldrb.w	r0, [r1, #186]!
    95d2:	1e40      	subs	r0, r0, #1
    95d4:	b240      	sxtb	r0, r0
    95d6:	7008      	strb	r0, [r1, #0]
    95d8:	2800      	cmp	r0, #0
    95da:	da04      	bge.n	95e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x286>
    95dc:	f44f 71c7 	mov.w	r1, #398	; 0x18e
    95e0:	2031      	movs	r0, #49	; 0x31
    95e2:	f7fb fdc5 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    95e6:	bd10      	pop	{r4, pc}
    95e8:	20000150 	.word	0x20000150
    95ec:	491a      	ldr	r1, [pc, #104]	; (9658 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2f8>)
    95ee:	b508      	push	{r3, lr}
    95f0:	6889      	ldr	r1, [r1, #8]
    95f2:	f891 2086 	ldrb.w	r2, [r1, #134]	; 0x86
    95f6:	b1b8      	cbz	r0, 9628 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2c8>
    95f8:	2a10      	cmp	r2, #16
    95fa:	d006      	beq.n	960a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2aa>
    95fc:	2a14      	cmp	r2, #20
    95fe:	d007      	beq.n	9610 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b0>
    9600:	2a15      	cmp	r2, #21
    9602:	d008      	beq.n	9616 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b6>
    9604:	2a1b      	cmp	r2, #27
    9606:	d122      	bne.n	964e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ee>
    9608:	e008      	b.n	961c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2bc>
    960a:	2101      	movs	r1, #1
    960c:	200b      	movs	r0, #11
    960e:	e007      	b.n	9620 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2c0>
    9610:	f001 fade 	bl	abd0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1870>
    9614:	e006      	b.n	9624 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2c4>
    9616:	f000 fd59 	bl	a0cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6c>
    961a:	e003      	b.n	9624 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2c4>
    961c:	2101      	movs	r1, #1
    961e:	2006      	movs	r0, #6
    9620:	f000 fd36 	bl	a090 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd30>
    9624:	2001      	movs	r0, #1
    9626:	bd08      	pop	{r3, pc}
    9628:	2a21      	cmp	r2, #33	; 0x21
    962a:	d110      	bne.n	964e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ee>
    962c:	f891 01be 	ldrb.w	r0, [r1, #446]	; 0x1be
    9630:	2802      	cmp	r0, #2
    9632:	d00e      	beq.n	9652 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2f2>
    9634:	f891 01be 	ldrb.w	r0, [r1, #446]	; 0x1be
    9638:	2801      	cmp	r0, #1
    963a:	d108      	bne.n	964e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ee>
    963c:	f891 01bf 	ldrb.w	r0, [r1, #447]	; 0x1bf
    9640:	f88d 0000 	strb.w	r0, [sp]
    9644:	9800      	ldr	r0, [sp, #0]
    9646:	9000      	str	r0, [sp, #0]
    9648:	f89d 0000 	ldrb.w	r0, [sp]
    964c:	b108      	cbz	r0, 9652 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2f2>
    964e:	2000      	movs	r0, #0
    9650:	bd08      	pop	{r3, pc}
    9652:	2101      	movs	r1, #1
    9654:	2017      	movs	r0, #23
    9656:	e7e3      	b.n	9620 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2c0>
    9658:	20000150 	.word	0x20000150
    965c:	b538      	push	{r3, r4, r5, lr}
    965e:	2800      	cmp	r0, #0
    9660:	d16d      	bne.n	973e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3de>
    9662:	4c38      	ldr	r4, [pc, #224]	; (9744 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3e4>)
    9664:	68a0      	ldr	r0, [r4, #8]
    9666:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    966a:	07ca      	lsls	r2, r1, #31
    966c:	d002      	beq.n	9674 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x314>
    966e:	2101      	movs	r1, #1
    9670:	2009      	movs	r0, #9
    9672:	e05d      	b.n	9730 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d0>
    9674:	078a      	lsls	r2, r1, #30
    9676:	d50a      	bpl.n	968e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x32e>
    9678:	2101      	movs	r1, #1
    967a:	200c      	movs	r0, #12
    967c:	f000 fd08 	bl	a090 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd30>
    9680:	68a0      	ldr	r0, [r4, #8]
    9682:	f810 1fbe 	ldrb.w	r1, [r0, #190]!
    9686:	f041 0101 	orr.w	r1, r1, #1
    968a:	7001      	strb	r1, [r0, #0]
    968c:	e052      	b.n	9734 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d4>
    968e:	074a      	lsls	r2, r1, #29
    9690:	d502      	bpl.n	9698 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x338>
    9692:	2101      	movs	r1, #1
    9694:	2013      	movs	r0, #19
    9696:	e04b      	b.n	9730 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d0>
    9698:	070a      	lsls	r2, r1, #28
    969a:	d505      	bpl.n	96a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x348>
    969c:	f810 1ff9 	ldrb.w	r1, [r0, #249]!
    96a0:	7141      	strb	r1, [r0, #5]
    96a2:	2101      	movs	r1, #1
    96a4:	2007      	movs	r0, #7
    96a6:	e043      	b.n	9730 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d0>
    96a8:	f011 0f30 	tst.w	r1, #48	; 0x30
    96ac:	d047      	beq.n	973e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3de>
    96ae:	f890 11b5 	ldrb.w	r1, [r0, #437]	; 0x1b5
    96b2:	f88d 1000 	strb.w	r1, [sp]
    96b6:	9900      	ldr	r1, [sp, #0]
    96b8:	9100      	str	r1, [sp, #0]
    96ba:	f89d 1000 	ldrb.w	r1, [sp]
    96be:	bbd9      	cbnz	r1, 9738 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d8>
    96c0:	f890 11b4 	ldrb.w	r1, [r0, #436]	; 0x1b4
    96c4:	2500      	movs	r5, #0
    96c6:	f88d 1000 	strb.w	r1, [sp]
    96ca:	9900      	ldr	r1, [sp, #0]
    96cc:	9100      	str	r1, [sp, #0]
    96ce:	f89d 1000 	ldrb.w	r1, [sp]
    96d2:	b1c9      	cbz	r1, 9708 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a8>
    96d4:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    96d8:	2924      	cmp	r1, #36	; 0x24
    96da:	d02e      	beq.n	973a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3da>
    96dc:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    96e0:	2924      	cmp	r1, #36	; 0x24
    96e2:	d02a      	beq.n	973a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3da>
    96e4:	f05f 0300 	movs.w	r3, #0
    96e8:	f500 72d3 	add.w	r2, r0, #422	; 0x1a6
    96ec:	f500 71da 	add.w	r1, r0, #436	; 0x1b4
    96f0:	f005 fe4c 	bl	f38c <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    96f4:	68a0      	ldr	r0, [r4, #8]
    96f6:	f810 1f87 	ldrb.w	r1, [r0, #135]!
    96fa:	f021 0120 	bic.w	r1, r1, #32
    96fe:	f041 0110 	orr.w	r1, r1, #16
    9702:	7001      	strb	r1, [r0, #0]
    9704:	f880 512d 	strb.w	r5, [r0, #301]	; 0x12d
    9708:	68a0      	ldr	r0, [r4, #8]
    970a:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    970e:	06c9      	lsls	r1, r1, #27
    9710:	d515      	bpl.n	973e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3de>
    9712:	f005 fe56 	bl	f3c2 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    9716:	f000 f911 	bl	993c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5dc>
    971a:	68a0      	ldr	r0, [r4, #8]
    971c:	f100 0130 	add.w	r1, r0, #48	; 0x30
    9720:	4602      	mov	r2, r0
    9722:	8bc8      	ldrh	r0, [r1, #30]
    9724:	f822 0ffe 	strh.w	r0, [r2, #254]!
    9728:	8c48      	ldrh	r0, [r1, #34]	; 0x22
    972a:	8050      	strh	r0, [r2, #2]
    972c:	2101      	movs	r1, #1
    972e:	2015      	movs	r0, #21
    9730:	f000 fcae 	bl	a090 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd30>
    9734:	2001      	movs	r0, #1
    9736:	bd38      	pop	{r3, r4, r5, pc}
    9738:	e001      	b.n	973e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3de>
    973a:	2301      	movs	r3, #1
    973c:	e7d4      	b.n	96e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x388>
    973e:	2000      	movs	r0, #0
    9740:	e7f9      	b.n	9736 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d6>
    9742:	0000      	.short	0x0000
    9744:	20000150 	.word	0x20000150
    9748:	b570      	push	{r4, r5, r6, lr}
    974a:	460d      	mov	r5, r1
    974c:	4606      	mov	r6, r0
    974e:	f005 fc5f 	bl	f010 <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    9752:	4604      	mov	r4, r0
    9754:	4630      	mov	r0, r6
    9756:	f005 fc67 	bl	f028 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    975a:	4629      	mov	r1, r5
    975c:	f000 f81e 	bl	979c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x43c>
    9760:	b1b8      	cbz	r0, 9792 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x432>
    9762:	4620      	mov	r0, r4
    9764:	f005 fa7a 	bl	ec5c <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    9768:	0001      	movs	r1, r0
    976a:	d00d      	beq.n	9788 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x428>
    976c:	480a      	ldr	r0, [pc, #40]	; (9798 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x438>)
    976e:	6880      	ldr	r0, [r0, #8]
    9770:	f890 206f 	ldrb.w	r2, [r0, #111]	; 0x6f
    9774:	428a      	cmp	r2, r1
    9776:	d007      	beq.n	9788 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x428>
    9778:	f890 11be 	ldrb.w	r1, [r0, #446]	; 0x1be
    977c:	2901      	cmp	r1, #1
    977e:	d005      	beq.n	978c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42c>
    9780:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    9784:	4220      	tst	r0, r4
    9786:	d004      	beq.n	9792 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x432>
    9788:	2001      	movs	r0, #1
    978a:	bd70      	pop	{r4, r5, r6, pc}
    978c:	f890 01c1 	ldrb.w	r0, [r0, #449]	; 0x1c1
    9790:	e7f8      	b.n	9784 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x424>
    9792:	2000      	movs	r0, #0
    9794:	bd70      	pop	{r4, r5, r6, pc}
    9796:	0000      	.short	0x0000
    9798:	20000150 	.word	0x20000150
    979c:	b570      	push	{r4, r5, r6, lr}
    979e:	460d      	mov	r5, r1
    97a0:	4604      	mov	r4, r0
    97a2:	f005 fa5b 	bl	ec5c <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    97a6:	b350      	cbz	r0, 97fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x49e>
    97a8:	4916      	ldr	r1, [pc, #88]	; (9804 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4a4>)
    97aa:	6889      	ldr	r1, [r1, #8]
    97ac:	f891 206e 	ldrb.w	r2, [r1, #110]	; 0x6e
    97b0:	4282      	cmp	r2, r0
    97b2:	d024      	beq.n	97fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x49e>
    97b4:	f891 31be 	ldrb.w	r3, [r1, #446]	; 0x1be
    97b8:	2b01      	cmp	r3, #1
    97ba:	d005      	beq.n	97c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x468>
    97bc:	f891 306a 	ldrb.w	r3, [r1, #106]	; 0x6a
    97c0:	4223      	tst	r3, r4
    97c2:	d013      	beq.n	97ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x48c>
    97c4:	b11d      	cbz	r5, 97ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x46e>
    97c6:	e01a      	b.n	97fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x49e>
    97c8:	f891 31c0 	ldrb.w	r3, [r1, #448]	; 0x1c0
    97cc:	e7f8      	b.n	97c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x460>
    97ce:	f891 1067 	ldrb.w	r1, [r1, #103]	; 0x67
    97d2:	4221      	tst	r1, r4
    97d4:	d113      	bne.n	97fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x49e>
    97d6:	b15a      	cbz	r2, 97f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x490>
    97d8:	2a04      	cmp	r2, #4
    97da:	d00e      	beq.n	97fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x49a>
    97dc:	2804      	cmp	r0, #4
    97de:	d00c      	beq.n	97fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x49a>
    97e0:	2a08      	cmp	r2, #8
    97e2:	d00a      	beq.n	97fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x49a>
    97e4:	2808      	cmp	r0, #8
    97e6:	d008      	beq.n	97fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x49a>
    97e8:	4282      	cmp	r2, r0
    97ea:	d908      	bls.n	97fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x49e>
    97ec:	2000      	movs	r0, #0
    97ee:	bd70      	pop	{r4, r5, r6, pc}
    97f0:	f240 1155 	movw	r1, #341	; 0x155
    97f4:	2006      	movs	r0, #6
    97f6:	f7fb fcbb 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    97fa:	4282      	cmp	r2, r0
    97fc:	d3f6      	bcc.n	97ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x48c>
    97fe:	2001      	movs	r0, #1
    9800:	bd70      	pop	{r4, r5, r6, pc}
    9802:	0000      	.short	0x0000
    9804:	20000150 	.word	0x20000150
    9808:	490c      	ldr	r1, [pc, #48]	; (983c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4dc>)
    980a:	4602      	mov	r2, r0
    980c:	7848      	ldrb	r0, [r1, #1]
    980e:	b998      	cbnz	r0, 9838 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4d8>
    9810:	4608      	mov	r0, r1
    9812:	6880      	ldr	r0, [r0, #8]
    9814:	b142      	cbz	r2, 9828 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4c8>
    9816:	7889      	ldrb	r1, [r1, #2]
    9818:	0709      	lsls	r1, r1, #28
    981a:	d503      	bpl.n	9824 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4c4>
    981c:	f890 0088 	ldrb.w	r0, [r0, #136]	; 0x88
    9820:	2808      	cmp	r0, #8
    9822:	d009      	beq.n	9838 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4d8>
    9824:	2001      	movs	r0, #1
    9826:	4770      	bx	lr
    9828:	f100 0130 	add.w	r1, r0, #48	; 0x30
    982c:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    982e:	8f01      	ldrh	r1, [r0, #56]	; 0x38
    9830:	428a      	cmp	r2, r1
    9832:	d801      	bhi.n	9838 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4d8>
    9834:	f7fe bf84 	b.w	8740 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>
    9838:	2000      	movs	r0, #0
    983a:	4770      	bx	lr
    983c:	20000150 	.word	0x20000150
    9840:	b538      	push	{r3, r4, r5, lr}
    9842:	4c3d      	ldr	r4, [pc, #244]	; (9938 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d8>)
    9844:	4605      	mov	r5, r0
    9846:	68a0      	ldr	r0, [r4, #8]
    9848:	3078      	adds	r0, #120	; 0x78
    984a:	f006 fcae 	bl	101aa <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    984e:	2800      	cmp	r0, #0
    9850:	d170      	bne.n	9934 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    9852:	2d00      	cmp	r5, #0
    9854:	d16e      	bne.n	9934 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    9856:	68a0      	ldr	r0, [r4, #8]
    9858:	2301      	movs	r3, #1
    985a:	4619      	mov	r1, r3
    985c:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    9860:	3078      	adds	r0, #120	; 0x78
    9862:	f005 f962 	bl	eb2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9866:	2800      	cmp	r0, #0
    9868:	d164      	bne.n	9934 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    986a:	68a0      	ldr	r0, [r4, #8]
    986c:	f890 1188 	ldrb.w	r1, [r0, #392]	; 0x188
    9870:	f88d 1000 	strb.w	r1, [sp]
    9874:	9900      	ldr	r1, [sp, #0]
    9876:	9100      	str	r1, [sp, #0]
    9878:	f89d 2000 	ldrb.w	r2, [sp]
    987c:	2100      	movs	r1, #0
    987e:	b142      	cbz	r2, 9892 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x532>
    9880:	f8a0 10b0 	strh.w	r1, [r0, #176]	; 0xb0
    9884:	f890 1189 	ldrb.w	r1, [r0, #393]	; 0x189
    9888:	f880 10fe 	strb.w	r1, [r0, #254]	; 0xfe
    988c:	2100      	movs	r1, #0
    988e:	2002      	movs	r0, #2
    9890:	e045      	b.n	991e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5be>
    9892:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9896:	2301      	movs	r3, #1
    9898:	2104      	movs	r1, #4
    989a:	3078      	adds	r0, #120	; 0x78
    989c:	f005 f945 	bl	eb2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    98a0:	4605      	mov	r5, r0
    98a2:	f7ff fedb 	bl	965c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2fc>
    98a6:	2800      	cmp	r0, #0
    98a8:	d144      	bne.n	9934 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    98aa:	4628      	mov	r0, r5
    98ac:	f7ff fe9e 	bl	95ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x28c>
    98b0:	2800      	cmp	r0, #0
    98b2:	d13f      	bne.n	9934 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    98b4:	68a0      	ldr	r0, [r4, #8]
    98b6:	2301      	movs	r3, #1
    98b8:	2100      	movs	r1, #0
    98ba:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    98be:	3078      	adds	r0, #120	; 0x78
    98c0:	f005 f933 	bl	eb2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    98c4:	b178      	cbz	r0, 98e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    98c6:	68a0      	ldr	r0, [r4, #8]
    98c8:	2301      	movs	r3, #1
    98ca:	2104      	movs	r1, #4
    98cc:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    98d0:	3078      	adds	r0, #120	; 0x78
    98d2:	f005 f92a 	bl	eb2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    98d6:	b930      	cbnz	r0, 98e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    98d8:	68a0      	ldr	r0, [r4, #8]
    98da:	f890 00aa 	ldrb.w	r0, [r0, #170]	; 0xaa
    98de:	b110      	cbz	r0, 98e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    98e0:	2100      	movs	r1, #0
    98e2:	2012      	movs	r0, #18
    98e4:	e01b      	b.n	991e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5be>
    98e6:	68a0      	ldr	r0, [r4, #8]
    98e8:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    98ec:	290a      	cmp	r1, #10
    98ee:	d01a      	beq.n	9926 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c6>
    98f0:	2d00      	cmp	r5, #0
    98f2:	d11f      	bne.n	9934 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    98f4:	f000 fb18 	bl	9f28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbc8>
    98f8:	2800      	cmp	r0, #0
    98fa:	d11b      	bne.n	9934 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    98fc:	68a0      	ldr	r0, [r4, #8]
    98fe:	2301      	movs	r3, #1
    9900:	2100      	movs	r1, #0
    9902:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9906:	3078      	adds	r0, #120	; 0x78
    9908:	f005 f90f 	bl	eb2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    990c:	2800      	cmp	r0, #0
    990e:	d011      	beq.n	9934 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    9910:	68a0      	ldr	r0, [r4, #8]
    9912:	f890 019c 	ldrb.w	r0, [r0, #412]	; 0x19c
    9916:	2800      	cmp	r0, #0
    9918:	d00c      	beq.n	9934 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    991a:	2100      	movs	r1, #0
    991c:	20ff      	movs	r0, #255	; 0xff
    991e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    9922:	f000 bbb5 	b.w	a090 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd30>
    9926:	f810 1ffa 	ldrb.w	r1, [r0, #250]!
    992a:	7101      	strb	r1, [r0, #4]
    992c:	2100      	movs	r1, #0
    992e:	2007      	movs	r0, #7
    9930:	e7f5      	b.n	991e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5be>
    9932:	e7ff      	b.n	9934 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    9934:	bd38      	pop	{r3, r4, r5, pc}
    9936:	0000      	.short	0x0000
    9938:	20000150 	.word	0x20000150
    993c:	480a      	ldr	r0, [pc, #40]	; (9968 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x608>)
    993e:	b510      	push	{r4, lr}
    9940:	6881      	ldr	r1, [r0, #8]
    9942:	f891 0064 	ldrb.w	r0, [r1, #100]	; 0x64
    9946:	2801      	cmp	r0, #1
    9948:	d009      	beq.n	995e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5fe>
    994a:	8808      	ldrh	r0, [r1, #0]
    994c:	f501 72f5 	add.w	r2, r1, #490	; 0x1ea
    9950:	3130      	adds	r1, #48	; 0x30
    9952:	f005 fcf7 	bl	f344 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    9956:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    995a:	f7fd bd3f 	b.w	73dc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    995e:	2002      	movs	r0, #2
    9960:	f881 0064 	strb.w	r0, [r1, #100]	; 0x64
    9964:	bd10      	pop	{r4, pc}
    9966:	0000      	.short	0x0000
    9968:	20000150 	.word	0x20000150
    996c:	b570      	push	{r4, r5, r6, lr}
    996e:	4c25      	ldr	r4, [pc, #148]	; (9a04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a4>)
    9970:	0005      	movs	r5, r0
    9972:	d12f      	bne.n	99d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x674>
    9974:	f000 f8a4 	bl	9ac0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x760>
    9978:	f000 f848 	bl	9a0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6ac>
    997c:	0005      	movs	r5, r0
    997e:	d129      	bne.n	99d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x674>
    9980:	8860      	ldrh	r0, [r4, #2]
    9982:	0741      	lsls	r1, r0, #29
    9984:	d506      	bpl.n	9994 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x634>
    9986:	68a1      	ldr	r1, [r4, #8]
    9988:	f891 1088 	ldrb.w	r1, [r1, #136]	; 0x88
    998c:	2907      	cmp	r1, #7
    998e:	d101      	bne.n	9994 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x634>
    9990:	2101      	movs	r1, #1
    9992:	7021      	strb	r1, [r4, #0]
    9994:	0780      	lsls	r0, r0, #30
    9996:	d512      	bpl.n	99be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x65e>
    9998:	68e0      	ldr	r0, [r4, #12]
    999a:	78c0      	ldrb	r0, [r0, #3]
    999c:	281a      	cmp	r0, #26
    999e:	d205      	bcs.n	99ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x64c>
    99a0:	4919      	ldr	r1, [pc, #100]	; (9a08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a8>)
    99a2:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    99a6:	b109      	cbz	r1, 99ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x64c>
    99a8:	4788      	blx	r1
    99aa:	e008      	b.n	99be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x65e>
    99ac:	28ff      	cmp	r0, #255	; 0xff
    99ae:	d004      	beq.n	99ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x65a>
    99b0:	f240 7144 	movw	r1, #1860	; 0x744
    99b4:	2031      	movs	r0, #49	; 0x31
    99b6:	f7fb fbdb 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    99ba:	f001 f94d 	bl	ac58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18f8>
    99be:	78a0      	ldrb	r0, [r4, #2]
    99c0:	06c0      	lsls	r0, r0, #27
    99c2:	d507      	bpl.n	99d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x674>
    99c4:	68a0      	ldr	r0, [r4, #8]
    99c6:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    99ca:	290b      	cmp	r1, #11
    99cc:	d102      	bne.n	99d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x674>
    99ce:	210c      	movs	r1, #12
    99d0:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    99d4:	7860      	ldrb	r0, [r4, #1]
    99d6:	0700      	lsls	r0, r0, #28
    99d8:	d511      	bpl.n	99fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x69e>
    99da:	68a0      	ldr	r0, [r4, #8]
    99dc:	2301      	movs	r3, #1
    99de:	2105      	movs	r1, #5
    99e0:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    99e4:	3078      	adds	r0, #120	; 0x78
    99e6:	f005 f8a0 	bl	eb2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    99ea:	b128      	cbz	r0, 99f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x698>
    99ec:	68a1      	ldr	r1, [r4, #8]
    99ee:	2508      	movs	r5, #8
    99f0:	2000      	movs	r0, #0
    99f2:	f881 01d4 	strb.w	r0, [r1, #468]	; 0x1d4
    99f6:	e002      	b.n	99fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x69e>
    99f8:	2000      	movs	r0, #0
    99fa:	f7fc fbbb 	bl	6174 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    99fe:	4628      	mov	r0, r5
    9a00:	bd70      	pop	{r4, r5, r6, pc}
    9a02:	0000      	.short	0x0000
    9a04:	20000150 	.word	0x20000150
    9a08:	200001cc 	.word	0x200001cc
    9a0c:	b570      	push	{r4, r5, r6, lr}
    9a0e:	4c2a      	ldr	r4, [pc, #168]	; (9ab8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x758>)
    9a10:	2000      	movs	r0, #0
    9a12:	78a1      	ldrb	r1, [r4, #2]
    9a14:	07c9      	lsls	r1, r1, #31
    9a16:	d015      	beq.n	9a44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e4>
    9a18:	6920      	ldr	r0, [r4, #16]
    9a1a:	2301      	movs	r3, #1
    9a1c:	2105      	movs	r1, #5
    9a1e:	78c5      	ldrb	r5, [r0, #3]
    9a20:	68a0      	ldr	r0, [r4, #8]
    9a22:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9a26:	3078      	adds	r0, #120	; 0x78
    9a28:	f005 f87f 	bl	eb2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9a2c:	b158      	cbz	r0, 9a46 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e6>
    9a2e:	1ead      	subs	r5, r5, #2
    9a30:	2d0a      	cmp	r5, #10
    9a32:	d206      	bcs.n	9a42 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e2>
    9a34:	e8df f005 	tbb	[pc, r5]
    9a38:	05050707 	.word	0x05050707
    9a3c:	05050707 	.word	0x05050707
    9a40:	0707      	.short	0x0707
    9a42:	2008      	movs	r0, #8
    9a44:	bd70      	pop	{r4, r5, r6, pc}
    9a46:	6920      	ldr	r0, [r4, #16]
    9a48:	f7fd fba4 	bl	7194 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>
    9a4c:	b138      	cbz	r0, 9a5e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6fe>
    9a4e:	6920      	ldr	r0, [r4, #16]
    9a50:	78c5      	ldrb	r5, [r0, #3]
    9a52:	b145      	cbz	r5, 9a66 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x706>
    9a54:	2d01      	cmp	r5, #1
    9a56:	d006      	beq.n	9a66 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x706>
    9a58:	2d16      	cmp	r5, #22
    9a5a:	d118      	bne.n	9a8e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72e>
    9a5c:	e003      	b.n	9a66 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x706>
    9a5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9a62:	f000 bd73 	b.w	a54c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11ec>
    9a66:	68a0      	ldr	r0, [r4, #8]
    9a68:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    9a6c:	f005 f8ab 	bl	ebc6 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    9a70:	b168      	cbz	r0, 9a8e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72e>
    9a72:	68a1      	ldr	r1, [r4, #8]
    9a74:	f891 0085 	ldrb.w	r0, [r1, #133]	; 0x85
    9a78:	281f      	cmp	r0, #31
    9a7a:	d008      	beq.n	9a8e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72e>
    9a7c:	2820      	cmp	r0, #32
    9a7e:	d003      	beq.n	9a88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x728>
    9a80:	2d16      	cmp	r5, #22
    9a82:	d00c      	beq.n	9a9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x73e>
    9a84:	2002      	movs	r0, #2
    9a86:	bd70      	pop	{r4, r5, r6, pc}
    9a88:	2026      	movs	r0, #38	; 0x26
    9a8a:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    9a8e:	2d1a      	cmp	r5, #26
    9a90:	d207      	bcs.n	9aa2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x742>
    9a92:	480a      	ldr	r0, [pc, #40]	; (9abc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x75c>)
    9a94:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    9a98:	b118      	cbz	r0, 9aa2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x742>
    9a9a:	4780      	blx	r0
    9a9c:	e003      	b.n	9aa6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x746>
    9a9e:	2020      	movs	r0, #32
    9aa0:	bd70      	pop	{r4, r5, r6, pc}
    9aa2:	f000 fd53 	bl	a54c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11ec>
    9aa6:	68a2      	ldr	r2, [r4, #8]
    9aa8:	e9f2 1336 	ldrd	r1, r3, [r2, #216]!	; 0xd8
    9aac:	1c49      	adds	r1, r1, #1
    9aae:	f143 0300 	adc.w	r3, r3, #0
    9ab2:	e9c2 1300 	strd	r1, r3, [r2]
    9ab6:	bd70      	pop	{r4, r5, r6, pc}
    9ab8:	20000150 	.word	0x20000150
    9abc:	20000164 	.word	0x20000164
    9ac0:	b570      	push	{r4, r5, r6, lr}
    9ac2:	4c22      	ldr	r4, [pc, #136]	; (9b4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7ec>)
    9ac4:	78a0      	ldrb	r0, [r4, #2]
    9ac6:	0700      	lsls	r0, r0, #28
    9ac8:	d53e      	bpl.n	9b48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e8>
    9aca:	68a0      	ldr	r0, [r4, #8]
    9acc:	3078      	adds	r0, #120	; 0x78
    9ace:	f006 fb6c 	bl	101aa <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    9ad2:	b148      	cbz	r0, 9ae8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x788>
    9ad4:	68a0      	ldr	r0, [r4, #8]
    9ad6:	21fe      	movs	r1, #254	; 0xfe
    9ad8:	2500      	movs	r5, #0
    9ada:	f880 10fc 	strb.w	r1, [r0, #252]	; 0xfc
    9ade:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    9ae2:	2919      	cmp	r1, #25
    9ae4:	d10c      	bne.n	9b00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7a0>
    9ae6:	e004      	b.n	9af2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x792>
    9ae8:	f240 714e 	movw	r1, #1870	; 0x74e
    9aec:	2031      	movs	r0, #49	; 0x31
    9aee:	f7fb fb3f 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9af2:	f880 50bb 	strb.w	r5, [r0, #187]	; 0xbb
    9af6:	f7ff fd67 	bl	95c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x268>
    9afa:	68a0      	ldr	r0, [r4, #8]
    9afc:	f880 5086 	strb.w	r5, [r0, #134]	; 0x86
    9b00:	68a0      	ldr	r0, [r4, #8]
    9b02:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9b06:	291f      	cmp	r1, #31
    9b08:	d002      	beq.n	9b10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7b0>
    9b0a:	2927      	cmp	r1, #39	; 0x27
    9b0c:	d113      	bne.n	9b36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7d6>
    9b0e:	e00b      	b.n	9b28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7c8>
    9b10:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    9b14:	f005 f857 	bl	ebc6 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    9b18:	b108      	cbz	r0, 9b1e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7be>
    9b1a:	2026      	movs	r0, #38	; 0x26
    9b1c:	e000      	b.n	9b20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7c0>
    9b1e:	2020      	movs	r0, #32
    9b20:	68a1      	ldr	r1, [r4, #8]
    9b22:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    9b26:	e006      	b.n	9b36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7d6>
    9b28:	2101      	movs	r1, #1
    9b2a:	f880 119d 	strb.w	r1, [r0, #413]	; 0x19d
    9b2e:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    9b32:	f880 50b6 	strb.w	r5, [r0, #182]	; 0xb6
    9b36:	68a0      	ldr	r0, [r4, #8]
    9b38:	f890 1088 	ldrb.w	r1, [r0, #136]	; 0x88
    9b3c:	2908      	cmp	r1, #8
    9b3e:	d103      	bne.n	9b48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e8>
    9b40:	2102      	movs	r1, #2
    9b42:	7021      	strb	r1, [r4, #0]
    9b44:	f880 10fc 	strb.w	r1, [r0, #252]	; 0xfc
    9b48:	bd70      	pop	{r4, r5, r6, pc}
    9b4a:	0000      	.short	0x0000
    9b4c:	20000150 	.word	0x20000150
    9b50:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    9b52:	4606      	mov	r6, r0
    9b54:	4668      	mov	r0, sp
    9b56:	f7fc f977 	bl	5e48 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    9b5a:	b318      	cbz	r0, 9ba4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x844>
    9b5c:	2222      	movs	r2, #34	; 0x22
    9b5e:	2100      	movs	r1, #0
    9b60:	9800      	ldr	r0, [sp, #0]
    9b62:	f003 fd67 	bl	d634 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    9b66:	2103      	movs	r1, #3
    9b68:	9800      	ldr	r0, [sp, #0]
    9b6a:	f005 fab1 	bl	f0d0 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    9b6e:	9800      	ldr	r0, [sp, #0]
    9b70:	7801      	ldrb	r1, [r0, #0]
    9b72:	f021 0110 	bic.w	r1, r1, #16
    9b76:	7001      	strb	r1, [r0, #0]
    9b78:	4631      	mov	r1, r6
    9b7a:	f7fd fb37 	bl	71ec <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>
    9b7e:	2500      	movs	r5, #0
    9b80:	4c5d      	ldr	r4, [pc, #372]	; (9cf8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x998>)
    9b82:	f644 172f 	movw	r7, #18735	; 0x492f
    9b86:	2e0e      	cmp	r6, #14
    9b88:	d07e      	beq.n	9c88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x928>
    9b8a:	dc0e      	bgt.n	9baa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x84a>
    9b8c:	f1a6 0602 	sub.w	r6, r6, #2
    9b90:	2e0c      	cmp	r6, #12
    9b92:	d21c      	bcs.n	9bce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x86e>
    9b94:	e8df f006 	tbb	[pc, r6]
    9b98:	a5491b1e 	.word	0xa5491b1e
    9b9c:	551b1ea5 	.word	0x551b1ea5
    9ba0:	3034a51b 	.word	0x3034a51b
    9ba4:	f640 1178 	movw	r1, #2424	; 0x978
    9ba8:	e0a1      	b.n	9cee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98e>
    9baa:	2e15      	cmp	r6, #21
    9bac:	d05b      	beq.n	9c66 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x906>
    9bae:	dc08      	bgt.n	9bc2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x862>
    9bb0:	2e11      	cmp	r6, #17
    9bb2:	d014      	beq.n	9bde <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x87e>
    9bb4:	2e12      	cmp	r6, #18
    9bb6:	d01e      	beq.n	9bf6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x896>
    9bb8:	2e13      	cmp	r6, #19
    9bba:	d01c      	beq.n	9bf6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x896>
    9bbc:	2e14      	cmp	r6, #20
    9bbe:	d106      	bne.n	9bce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x86e>
    9bc0:	e051      	b.n	9c66 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x906>
    9bc2:	2e16      	cmp	r6, #22
    9bc4:	d027      	beq.n	9c16 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8b6>
    9bc6:	2e17      	cmp	r6, #23
    9bc8:	d068      	beq.n	9c9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x93c>
    9bca:	2eff      	cmp	r6, #255	; 0xff
    9bcc:	d071      	beq.n	9cb2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x952>
    9bce:	f640 11eb 	movw	r1, #2539	; 0x9eb
    9bd2:	e08c      	b.n	9cee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98e>
    9bd4:	68a1      	ldr	r1, [r4, #8]
    9bd6:	9800      	ldr	r0, [sp, #0]
    9bd8:	f891 10fe 	ldrb.w	r1, [r1, #254]	; 0xfe
    9bdc:	e00e      	b.n	9bfc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x89c>
    9bde:	68a0      	ldr	r0, [r4, #8]
    9be0:	f890 10fe 	ldrb.w	r1, [r0, #254]	; 0xfe
    9be4:	9800      	ldr	r0, [sp, #0]
    9be6:	f005 fa4f 	bl	f088 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>
    9bea:	68a0      	ldr	r0, [r4, #8]
    9bec:	f890 10ff 	ldrb.w	r1, [r0, #255]	; 0xff
    9bf0:	9800      	ldr	r0, [sp, #0]
    9bf2:	f005 fa4b 	bl	f08c <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>
    9bf6:	e074      	b.n	9ce2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x982>
    9bf8:	9800      	ldr	r0, [sp, #0]
    9bfa:	2106      	movs	r1, #6
    9bfc:	7101      	strb	r1, [r0, #4]
    9bfe:	e070      	b.n	9ce2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x982>
    9c00:	9800      	ldr	r0, [sp, #0]
    9c02:	210c      	movs	r1, #12
    9c04:	7101      	strb	r1, [r0, #4]
    9c06:	2159      	movs	r1, #89	; 0x59
    9c08:	7141      	strb	r1, [r0, #5]
    9c0a:	7185      	strb	r5, [r0, #6]
    9c0c:	2136      	movs	r1, #54	; 0x36
    9c0e:	71c1      	strb	r1, [r0, #7]
    9c10:	2111      	movs	r1, #17
    9c12:	7201      	strb	r1, [r0, #8]
    9c14:	e065      	b.n	9ce2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x982>
    9c16:	9800      	ldr	r0, [sp, #0]
    9c18:	f8d4 1008 	ldr.w	r1, [r4, #8]
    9c1c:	f891 21c0 	ldrb.w	r2, [r1, #448]	; 0x1c0
    9c20:	7102      	strb	r2, [r0, #4]
    9c22:	f891 11c1 	ldrb.w	r1, [r1, #449]	; 0x1c1
    9c26:	7141      	strb	r1, [r0, #5]
    9c28:	e05b      	b.n	9ce2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x982>
    9c2a:	68a1      	ldr	r1, [r4, #8]
    9c2c:	9800      	ldr	r0, [sp, #0]
    9c2e:	f501 7194 	add.w	r1, r1, #296	; 0x128
    9c32:	f005 fa3e 	bl	f0b2 <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>
    9c36:	68a1      	ldr	r1, [r4, #8]
    9c38:	9800      	ldr	r0, [sp, #0]
    9c3a:	31f4      	adds	r1, #244	; 0xf4
    9c3c:	f005 fa36 	bl	f0ac <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>
    9c40:	e04f      	b.n	9ce2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x982>
    9c42:	f001 fda9 	bl	b798 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    9c46:	4038      	ands	r0, r7
    9c48:	e9cd 0501 	strd	r0, r5, [sp, #4]
    9c4c:	68a1      	ldr	r1, [r4, #8]
    9c4e:	f89d 0004 	ldrb.w	r0, [sp, #4]
    9c52:	f891 10c4 	ldrb.w	r1, [r1, #196]	; 0xc4
    9c56:	4008      	ands	r0, r1
    9c58:	f88d 0004 	strb.w	r0, [sp, #4]
    9c5c:	a901      	add	r1, sp, #4
    9c5e:	9800      	ldr	r0, [sp, #0]
    9c60:	f005 fa31 	bl	f0c6 <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>
    9c64:	e03d      	b.n	9ce2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x982>
    9c66:	68a0      	ldr	r0, [r4, #8]
    9c68:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
    9c6c:	9800      	ldr	r0, [sp, #0]
    9c6e:	f005 fa37 	bl	f0e0 <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>
    9c72:	68a0      	ldr	r0, [r4, #8]
    9c74:	f8b0 1100 	ldrh.w	r1, [r0, #256]	; 0x100
    9c78:	9800      	ldr	r0, [sp, #0]
    9c7a:	f005 fa35 	bl	f0e8 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>
    9c7e:	68a0      	ldr	r0, [r4, #8]
    9c80:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    9c84:	9800      	ldr	r0, [sp, #0]
    9c86:	e000      	b.n	9c8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x92a>
    9c88:	e014      	b.n	9cb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x954>
    9c8a:	f005 fa31 	bl	f0f0 <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>
    9c8e:	68a0      	ldr	r0, [r4, #8]
    9c90:	f8b0 10fe 	ldrh.w	r1, [r0, #254]	; 0xfe
    9c94:	9800      	ldr	r0, [sp, #0]
    9c96:	f005 fa2f 	bl	f0f8 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>
    9c9a:	e022      	b.n	9ce2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x982>
    9c9c:	68a1      	ldr	r1, [r4, #8]
    9c9e:	f891 01be 	ldrb.w	r0, [r1, #446]	; 0x1be
    9ca2:	2801      	cmp	r0, #1
    9ca4:	9800      	ldr	r0, [sp, #0]
    9ca6:	d0b9      	beq.n	9c1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8bc>
    9ca8:	f811 2f6a 	ldrb.w	r2, [r1, #106]!
    9cac:	7102      	strb	r2, [r0, #4]
    9cae:	7849      	ldrb	r1, [r1, #1]
    9cb0:	e7b9      	b.n	9c26 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8c6>
    9cb2:	e00e      	b.n	9cd2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x972>
    9cb4:	9501      	str	r5, [sp, #4]
    9cb6:	9502      	str	r5, [sp, #8]
    9cb8:	f001 fd6e 	bl	b798 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    9cbc:	4038      	ands	r0, r7
    9cbe:	f88d 0004 	strb.w	r0, [sp, #4]
    9cc2:	0a00      	lsrs	r0, r0, #8
    9cc4:	f88d 0005 	strb.w	r0, [sp, #5]
    9cc8:	a901      	add	r1, sp, #4
    9cca:	9800      	ldr	r0, [sp, #0]
    9ccc:	f005 f9f6 	bl	f0bc <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>
    9cd0:	e007      	b.n	9ce2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x982>
    9cd2:	68a0      	ldr	r0, [r4, #8]
    9cd4:	f890 219f 	ldrb.w	r2, [r0, #415]	; 0x19f
    9cd8:	f8d0 11a0 	ldr.w	r1, [r0, #416]	; 0x1a0
    9cdc:	9800      	ldr	r0, [sp, #0]
    9cde:	f005 f9d7 	bl	f090 <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>
    9ce2:	f7fc f88b 	bl	5dfc <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    9ce6:	2800      	cmp	r0, #0
    9ce8:	d104      	bne.n	9cf4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x994>
    9cea:	f640 11ef 	movw	r1, #2543	; 0x9ef
    9cee:	2031      	movs	r0, #49	; 0x31
    9cf0:	f7fb fa3e 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9cf4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    9cf6:	0000      	.short	0x0000
    9cf8:	20000150 	.word	0x20000150
    9cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9d00:	4c88      	ldr	r4, [pc, #544]	; (9f24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbc4>)
    9d02:	4682      	mov	sl, r0
    9d04:	4689      	mov	r9, r1
    9d06:	68a0      	ldr	r0, [r4, #8]
    9d08:	8800      	ldrh	r0, [r0, #0]
    9d0a:	f7fb fe61 	bl	59d0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    9d0e:	0006      	movs	r6, r0
    9d10:	d00a      	beq.n	9d28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9c8>
    9d12:	8860      	ldrh	r0, [r4, #2]
    9d14:	f04f 0500 	mov.w	r5, #0
    9d18:	05c0      	lsls	r0, r0, #23
    9d1a:	68a0      	ldr	r0, [r4, #8]
    9d1c:	d509      	bpl.n	9d32 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9d2>
    9d1e:	f8a0 50ac 	strh.w	r5, [r0, #172]	; 0xac
    9d22:	f880 511c 	strb.w	r5, [r0, #284]	; 0x11c
    9d26:	e008      	b.n	9d3a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9da>
    9d28:	f640 5197 	movw	r1, #3479	; 0xd97
    9d2c:	2031      	movs	r0, #49	; 0x31
    9d2e:	f7fb fa1f 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9d32:	f830 1fac 	ldrh.w	r1, [r0, #172]!
    9d36:	1c49      	adds	r1, r1, #1
    9d38:	8001      	strh	r1, [r0, #0]
    9d3a:	f001 f941 	bl	afc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c60>
    9d3e:	f04f 0801 	mov.w	r8, #1
    9d42:	b328      	cbz	r0, 9d90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa30>
    9d44:	8860      	ldrh	r0, [r4, #2]
    9d46:	0500      	lsls	r0, r0, #20
    9d48:	d506      	bpl.n	9d58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f8>
    9d4a:	68a0      	ldr	r0, [r4, #8]
    9d4c:	f890 108b 	ldrb.w	r1, [r0, #139]	; 0x8b
    9d50:	b111      	cbz	r1, 9d58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f8>
    9d52:	f8c0 50a0 	str.w	r5, [r0, #160]	; 0xa0
    9d56:	e01b      	b.n	9d90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa30>
    9d58:	68a0      	ldr	r0, [r4, #8]
    9d5a:	f8d0 10a0 	ldr.w	r1, [r0, #160]	; 0xa0
    9d5e:	1c49      	adds	r1, r1, #1
    9d60:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
    9d64:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
    9d68:	428a      	cmp	r2, r1
    9d6a:	d301      	bcc.n	9d70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa10>
    9d6c:	1a53      	subs	r3, r2, r1
    9d6e:	e000      	b.n	9d72 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa12>
    9d70:	2300      	movs	r3, #0
    9d72:	88a7      	ldrh	r7, [r4, #4]
    9d74:	1d7f      	adds	r7, r7, #5
    9d76:	42bb      	cmp	r3, r7
    9d78:	d801      	bhi.n	9d7e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa1e>
    9d7a:	f880 80aa 	strb.w	r8, [r0, #170]	; 0xaa
    9d7e:	4291      	cmp	r1, r2
    9d80:	d306      	bcc.n	9d90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa30>
    9d82:	f8c0 50a0 	str.w	r5, [r0, #160]	; 0xa0
    9d86:	21ff      	movs	r1, #255	; 0xff
    9d88:	f880 120a 	strb.w	r1, [r0, #522]	; 0x20a
    9d8c:	f7fd fb26 	bl	73dc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9d90:	8860      	ldrh	r0, [r4, #2]
    9d92:	f04f 0702 	mov.w	r7, #2
    9d96:	f410 7f40 	tst.w	r0, #768	; 0x300
    9d9a:	d00e      	beq.n	9dba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa5a>
    9d9c:	68a0      	ldr	r0, [r4, #8]
    9d9e:	f890 1089 	ldrb.w	r1, [r0, #137]	; 0x89
    9da2:	b111      	cbz	r1, 9daa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa4a>
    9da4:	2903      	cmp	r1, #3
    9da6:	d108      	bne.n	9dba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa5a>
    9da8:	e002      	b.n	9db0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa50>
    9daa:	f880 8089 	strb.w	r8, [r0, #137]	; 0x89
    9dae:	e001      	b.n	9db4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa54>
    9db0:	f880 7089 	strb.w	r7, [r0, #137]	; 0x89
    9db4:	2101      	movs	r1, #1
    9db6:	f7fe fce9 	bl	878c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    9dba:	68a0      	ldr	r0, [r4, #8]
    9dbc:	f890 1089 	ldrb.w	r1, [r0, #137]	; 0x89
    9dc0:	2901      	cmp	r1, #1
    9dc2:	d104      	bne.n	9dce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa6e>
    9dc4:	8861      	ldrh	r1, [r4, #2]
    9dc6:	0549      	lsls	r1, r1, #21
    9dc8:	d501      	bpl.n	9dce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa6e>
    9dca:	f880 7089 	strb.w	r7, [r0, #137]	; 0x89
    9dce:	f1ba 0f00 	cmp.w	sl, #0
    9dd2:	d176      	bne.n	9ec2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
    9dd4:	78a1      	ldrb	r1, [r4, #2]
    9dd6:	0649      	lsls	r1, r1, #25
    9dd8:	d502      	bpl.n	9de0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa80>
    9dda:	f8a0 5130 	strh.w	r5, [r0, #304]	; 0x130
    9dde:	e004      	b.n	9dea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa8a>
    9de0:	f8b0 1130 	ldrh.w	r1, [r0, #304]	; 0x130
    9de4:	1c49      	adds	r1, r1, #1
    9de6:	f8a0 1130 	strh.w	r1, [r0, #304]	; 0x130
    9dea:	4648      	mov	r0, r9
    9dec:	f7ff fdbe 	bl	996c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x60c>
    9df0:	ea40 0009 	orr.w	r0, r0, r9
    9df4:	4681      	mov	r9, r0
    9df6:	f7ff fd23 	bl	9840 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4e0>
    9dfa:	68a7      	ldr	r7, [r4, #8]
    9dfc:	f8b7 0110 	ldrh.w	r0, [r7, #272]	; 0x110
    9e00:	1c40      	adds	r0, r0, #1
    9e02:	f8a7 0110 	strh.w	r0, [r7, #272]	; 0x110
    9e06:	f897 0114 	ldrb.w	r0, [r7, #276]	; 0x114
    9e0a:	b128      	cbz	r0, 9e18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xab8>
    9e0c:	f7fc fa1e 	bl	624c <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>
    9e10:	b1b0      	cbz	r0, 9e40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xae0>
    9e12:	f8a7 5110 	strh.w	r5, [r7, #272]	; 0x110
    9e16:	e013      	b.n	9e40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xae0>
    9e18:	f7fc f898 	bl	5f4c <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>
    9e1c:	b108      	cbz	r0, 9e22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xac2>
    9e1e:	f8a7 5110 	strh.w	r5, [r7, #272]	; 0x110
    9e22:	f7fc f88d 	bl	5f40 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>
    9e26:	b158      	cbz	r0, 9e40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xae0>
    9e28:	f897 011c 	ldrb.w	r0, [r7, #284]	; 0x11c
    9e2c:	1c40      	adds	r0, r0, #1
    9e2e:	b2c0      	uxtb	r0, r0
    9e30:	f887 011c 	strb.w	r0, [r7, #284]	; 0x11c
    9e34:	2802      	cmp	r0, #2
    9e36:	d903      	bls.n	9e40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xae0>
    9e38:	f8a7 5110 	strh.w	r5, [r7, #272]	; 0x110
    9e3c:	f887 511c 	strb.w	r5, [r7, #284]	; 0x11c
    9e40:	68a0      	ldr	r0, [r4, #8]
    9e42:	2301      	movs	r3, #1
    9e44:	2100      	movs	r1, #0
    9e46:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9e4a:	3078      	adds	r0, #120	; 0x78
    9e4c:	f004 fe6d 	bl	eb2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9e50:	b920      	cbnz	r0, 9e5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xafc>
    9e52:	68a0      	ldr	r0, [r4, #8]
    9e54:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    9e58:	280c      	cmp	r0, #12
    9e5a:	d15f      	bne.n	9f1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbbc>
    9e5c:	68a0      	ldr	r0, [r4, #8]
    9e5e:	2301      	movs	r3, #1
    9e60:	2100      	movs	r1, #0
    9e62:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9e66:	3078      	adds	r0, #120	; 0x78
    9e68:	f004 fe5f 	bl	eb2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9e6c:	b350      	cbz	r0, 9ec4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb64>
    9e6e:	68a0      	ldr	r0, [r4, #8]
    9e70:	2301      	movs	r3, #1
    9e72:	2100      	movs	r1, #0
    9e74:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    9e78:	3078      	adds	r0, #120	; 0x78
    9e7a:	f004 fe56 	bl	eb2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9e7e:	b308      	cbz	r0, 9ec4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb64>
    9e80:	68a0      	ldr	r0, [r4, #8]
    9e82:	f890 1089 	ldrb.w	r1, [r0, #137]	; 0x89
    9e86:	2902      	cmp	r1, #2
    9e88:	d148      	bne.n	9f1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbbc>
    9e8a:	f890 011c 	ldrb.w	r0, [r0, #284]	; 0x11c
    9e8e:	b9c8      	cbnz	r0, 9ec4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb64>
    9e90:	4630      	mov	r0, r6
    9e92:	f004 f8e1 	bl	e058 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    9e96:	b1a8      	cbz	r0, 9ec4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb64>
    9e98:	68a0      	ldr	r0, [r4, #8]
    9e9a:	3078      	adds	r0, #120	; 0x78
    9e9c:	f006 f985 	bl	101aa <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    9ea0:	b980      	cbnz	r0, 9ec4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb64>
    9ea2:	68a1      	ldr	r1, [r4, #8]
    9ea4:	f8b1 010a 	ldrh.w	r0, [r1, #266]	; 0x10a
    9ea8:	2801      	cmp	r0, #1
    9eaa:	d937      	bls.n	9f1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbbc>
    9eac:	f881 8112 	strb.w	r8, [r1, #274]	; 0x112
    9eb0:	f8b1 20ae 	ldrh.w	r2, [r1, #174]	; 0xae
    9eb4:	f8b1 00ac 	ldrh.w	r0, [r1, #172]	; 0xac
    9eb8:	1e93      	subs	r3, r2, #2
    9eba:	4298      	cmp	r0, r3
    9ebc:	db03      	blt.n	9ec6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb66>
    9ebe:	2001      	movs	r0, #1
    9ec0:	e004      	b.n	9ecc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb6c>
    9ec2:	e01d      	b.n	9f00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xba0>
    9ec4:	e02a      	b.n	9f1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbbc>
    9ec6:	1a10      	subs	r0, r2, r0
    9ec8:	1e40      	subs	r0, r0, #1
    9eca:	b280      	uxth	r0, r0
    9ecc:	f8b1 2110 	ldrh.w	r2, [r1, #272]	; 0x110
    9ed0:	88a3      	ldrh	r3, [r4, #4]
    9ed2:	429a      	cmp	r2, r3
    9ed4:	d301      	bcc.n	9eda <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb7a>
    9ed6:	2201      	movs	r2, #1
    9ed8:	e002      	b.n	9ee0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb80>
    9eda:	1a9a      	subs	r2, r3, r2
    9edc:	1c52      	adds	r2, r2, #1
    9ede:	b292      	uxth	r2, r2
    9ee0:	4290      	cmp	r0, r2
    9ee2:	d900      	bls.n	9ee6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb86>
    9ee4:	4610      	mov	r0, r2
    9ee6:	2801      	cmp	r0, #1
    9ee8:	d102      	bne.n	9ef0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb90>
    9eea:	bf00      	nop
    9eec:	f881 5112 	strb.w	r5, [r1, #274]	; 0x112
    9ef0:	68a1      	ldr	r1, [r4, #8]
    9ef2:	f8b1 207c 	ldrh.w	r2, [r1, #124]	; 0x7c
    9ef6:	4410      	add	r0, r2
    9ef8:	f8a1 010c 	strh.w	r0, [r1, #268]	; 0x10c
    9efc:	f001 f92c 	bl	b158 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1df8>
    9f00:	78a0      	ldrb	r0, [r4, #2]
    9f02:	464a      	mov	r2, r9
    9f04:	f3c0 1180 	ubfx	r1, r0, #6, #1
    9f08:	4650      	mov	r0, sl
    9f0a:	f001 f86d 	bl	afe8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c88>
    9f0e:	68a0      	ldr	r0, [r4, #8]
    9f10:	f880 5113 	strb.w	r5, [r0, #275]	; 0x113
    9f14:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9f18:	f7fb bf5a 	b.w	5dd0 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    9f1c:	2001      	movs	r0, #1
    9f1e:	68a1      	ldr	r1, [r4, #8]
    9f20:	e7e4      	b.n	9eec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb8c>
    9f22:	0000      	.short	0x0000
    9f24:	20000150 	.word	0x20000150
    9f28:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    9f2a:	4c58      	ldr	r4, [pc, #352]	; (a08c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>)
    9f2c:	2301      	movs	r3, #1
    9f2e:	2100      	movs	r1, #0
    9f30:	68a0      	ldr	r0, [r4, #8]
    9f32:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9f36:	3078      	adds	r0, #120	; 0x78
    9f38:	f004 fdf7 	bl	eb2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9f3c:	2800      	cmp	r0, #0
    9f3e:	d07d      	beq.n	a03c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcdc>
    9f40:	68a0      	ldr	r0, [r4, #8]
    9f42:	f890 11c5 	ldrb.w	r1, [r0, #453]	; 0x1c5
    9f46:	2500      	movs	r5, #0
    9f48:	b139      	cbz	r1, 9f5a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbfa>
    9f4a:	2100      	movs	r1, #0
    9f4c:	200e      	movs	r0, #14
    9f4e:	f000 f89f 	bl	a090 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd30>
    9f52:	68a0      	ldr	r0, [r4, #8]
    9f54:	f880 51c5 	strb.w	r5, [r0, #453]	; 0x1c5
    9f58:	e095      	b.n	a086 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd26>
    9f5a:	f890 11c4 	ldrb.w	r1, [r0, #452]	; 0x1c4
    9f5e:	b119      	cbz	r1, 9f68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc08>
    9f60:	f890 10be 	ldrb.w	r1, [r0, #190]	; 0xbe
    9f64:	0789      	lsls	r1, r1, #30
    9f66:	d016      	beq.n	9f96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc36>
    9f68:	f890 11b4 	ldrb.w	r1, [r0, #436]	; 0x1b4
    9f6c:	f88d 1004 	strb.w	r1, [sp, #4]
    9f70:	9901      	ldr	r1, [sp, #4]
    9f72:	9101      	str	r1, [sp, #4]
    9f74:	f89d 1004 	ldrb.w	r1, [sp, #4]
    9f78:	b141      	cbz	r1, 9f8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc2c>
    9f7a:	f890 11b5 	ldrb.w	r1, [r0, #437]	; 0x1b5
    9f7e:	f88d 1000 	strb.w	r1, [sp]
    9f82:	9900      	ldr	r1, [sp, #0]
    9f84:	9100      	str	r1, [sp, #0]
    9f86:	f89d 1000 	ldrb.w	r1, [sp]
    9f8a:	b189      	cbz	r1, 9fb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc50>
    9f8c:	f890 11be 	ldrb.w	r1, [r0, #446]	; 0x1be
    9f90:	2901      	cmp	r1, #1
    9f92:	d02f      	beq.n	9ff4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc94>
    9f94:	e071      	b.n	a07a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd1a>
    9f96:	2100      	movs	r1, #0
    9f98:	200c      	movs	r0, #12
    9f9a:	f000 f879 	bl	a090 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd30>
    9f9e:	68a0      	ldr	r0, [r4, #8]
    9fa0:	f810 1fbe 	ldrb.w	r1, [r0, #190]!
    9fa4:	f041 0101 	orr.w	r1, r1, #1
    9fa8:	7001      	strb	r1, [r0, #0]
    9faa:	f880 5106 	strb.w	r5, [r0, #262]	; 0x106
    9fae:	e06a      	b.n	a086 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd26>
    9fb0:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    9fb4:	2924      	cmp	r1, #36	; 0x24
    9fb6:	d01b      	beq.n	9ff0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc90>
    9fb8:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9fbc:	2924      	cmp	r1, #36	; 0x24
    9fbe:	d017      	beq.n	9ff0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc90>
    9fc0:	f05f 0300 	movs.w	r3, #0
    9fc4:	f500 72d3 	add.w	r2, r0, #422	; 0x1a6
    9fc8:	f500 71da 	add.w	r1, r0, #436	; 0x1b4
    9fcc:	f005 f9de 	bl	f38c <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    9fd0:	68a0      	ldr	r0, [r4, #8]
    9fd2:	f880 51b4 	strb.w	r5, [r0, #436]	; 0x1b4
    9fd6:	2100      	movs	r1, #0
    9fd8:	2014      	movs	r0, #20
    9fda:	f000 f859 	bl	a090 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd30>
    9fde:	68a1      	ldr	r1, [r4, #8]
    9fe0:	f101 0030 	add.w	r0, r1, #48	; 0x30
    9fe4:	8bc2      	ldrh	r2, [r0, #30]
    9fe6:	f821 2ffe 	strh.w	r2, [r1, #254]!
    9fea:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    9fec:	8048      	strh	r0, [r1, #2]
    9fee:	e04a      	b.n	a086 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd26>
    9ff0:	2301      	movs	r3, #1
    9ff2:	e7e7      	b.n	9fc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc64>
    9ff4:	f890 11bf 	ldrb.w	r1, [r0, #447]	; 0x1bf
    9ff8:	f88d 1000 	strb.w	r1, [sp]
    9ffc:	9900      	ldr	r1, [sp, #0]
    9ffe:	9100      	str	r1, [sp, #0]
    a000:	f89d 1000 	ldrb.w	r1, [sp]
    a004:	bb31      	cbnz	r1, a054 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcf4>
    a006:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a00a:	2301      	movs	r3, #1
    a00c:	210b      	movs	r1, #11
    a00e:	3078      	adds	r0, #120	; 0x78
    a010:	f004 fd8b 	bl	eb2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a014:	b9f0      	cbnz	r0, a054 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcf4>
    a016:	68a0      	ldr	r0, [r4, #8]
    a018:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
    a01c:	f006 f8cd 	bl	101ba <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    a020:	4605      	mov	r5, r0
    a022:	68a0      	ldr	r0, [r4, #8]
    a024:	f890 006f 	ldrb.w	r0, [r0, #111]	; 0x6f
    a028:	f006 f8c7 	bl	101ba <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    a02c:	4606      	mov	r6, r0
    a02e:	68a0      	ldr	r0, [r4, #8]
    a030:	f890 11c0 	ldrb.w	r1, [r0, #448]	; 0x1c0
    a034:	4628      	mov	r0, r5
    a036:	f006 f8cb 	bl	101d0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    a03a:	e000      	b.n	a03e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcde>
    a03c:	e01e      	b.n	a07c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd1c>
    a03e:	b150      	cbz	r0, a056 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcf6>
    a040:	68a0      	ldr	r0, [r4, #8]
    a042:	f890 11c1 	ldrb.w	r1, [r0, #449]	; 0x1c1
    a046:	4630      	mov	r0, r6
    a048:	f006 f8c2 	bl	101d0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    a04c:	b118      	cbz	r0, a056 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcf6>
    a04e:	2000      	movs	r0, #0
    a050:	f000 f922 	bl	a298 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf38>
    a054:	e011      	b.n	a07a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd1a>
    a056:	68a0      	ldr	r0, [r4, #8]
    a058:	2301      	movs	r3, #1
    a05a:	2103      	movs	r1, #3
    a05c:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a060:	3078      	adds	r0, #120	; 0x78
    a062:	f004 fd62 	bl	eb2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a066:	b940      	cbnz	r0, a07a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd1a>
    a068:	68a0      	ldr	r0, [r4, #8]
    a06a:	2301      	movs	r3, #1
    a06c:	2102      	movs	r1, #2
    a06e:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a072:	3078      	adds	r0, #120	; 0x78
    a074:	f004 fd59 	bl	eb2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a078:	b108      	cbz	r0, a07e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd1e>
    a07a:	2000      	movs	r0, #0
    a07c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    a07e:	2100      	movs	r1, #0
    a080:	2016      	movs	r0, #22
    a082:	f000 f805 	bl	a090 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd30>
    a086:	2001      	movs	r0, #1
    a088:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    a08a:	0000      	.short	0x0000
    a08c:	20000150 	.word	0x20000150
    a090:	b570      	push	{r4, r5, r6, lr}
    a092:	4c0d      	ldr	r4, [pc, #52]	; (a0c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd68>)
    a094:	4606      	mov	r6, r0
    a096:	460d      	mov	r5, r1
    a098:	68a0      	ldr	r0, [r4, #8]
    a09a:	3078      	adds	r0, #120	; 0x78
    a09c:	f006 f885 	bl	101aa <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    a0a0:	b120      	cbz	r0, a0ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    a0a2:	f640 2102 	movw	r1, #2562	; 0xa02
    a0a6:	2031      	movs	r0, #49	; 0x31
    a0a8:	f7fb f862 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a0ac:	68a2      	ldr	r2, [r4, #8]
    a0ae:	2000      	movs	r0, #0
    a0b0:	f882 60fc 	strb.w	r6, [r2, #252]	; 0xfc
    a0b4:	b115      	cbz	r5, a0bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd5c>
    a0b6:	f8a2 00b8 	strh.w	r0, [r2, #184]	; 0xb8
    a0ba:	bd70      	pop	{r4, r5, r6, pc}
    a0bc:	f822 0fb2 	strh.w	r0, [r2, #178]!
    a0c0:	2001      	movs	r0, #1
    a0c2:	7110      	strb	r0, [r2, #4]
    a0c4:	bd70      	pop	{r4, r5, r6, pc}
    a0c6:	0000      	.short	0x0000
    a0c8:	20000150 	.word	0x20000150
    a0cc:	b570      	push	{r4, r5, r6, lr}
    a0ce:	4c1b      	ldr	r4, [pc, #108]	; (a13c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xddc>)
    a0d0:	2500      	movs	r5, #0
    a0d2:	68a0      	ldr	r0, [r4, #8]
    a0d4:	f890 118b 	ldrb.w	r1, [r0, #395]	; 0x18b
    a0d8:	2901      	cmp	r1, #1
    a0da:	d00a      	beq.n	a0f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd92>
    a0dc:	2902      	cmp	r1, #2
    a0de:	d12c      	bne.n	a13a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdda>
    a0e0:	f890 10bc 	ldrb.w	r1, [r0, #188]	; 0xbc
    a0e4:	2206      	movs	r2, #6
    a0e6:	b1a1      	cbz	r1, a112 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdb2>
    a0e8:	f880 20fe 	strb.w	r2, [r0, #254]	; 0xfe
    a0ec:	2101      	movs	r1, #1
    a0ee:	2002      	movs	r0, #2
    a0f0:	e01e      	b.n	a130 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd0>
    a0f2:	f890 11d4 	ldrb.w	r1, [r0, #468]	; 0x1d4
    a0f6:	2900      	cmp	r1, #0
    a0f8:	d11f      	bne.n	a13a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdda>
    a0fa:	f100 03e0 	add.w	r3, r0, #224	; 0xe0
    a0fe:	f500 7190 	add.w	r1, r0, #288	; 0x120
    a102:	2200      	movs	r2, #0
    a104:	f500 70c6 	add.w	r0, r0, #396	; 0x18c
    a108:	f004 fcc7 	bl	ea9a <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    a10c:	2101      	movs	r1, #1
    a10e:	2005      	movs	r0, #5
    a110:	e00e      	b.n	a130 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd0>
    a112:	21c4      	movs	r1, #196	; 0xc4
    a114:	5c09      	ldrb	r1, [r1, r0]
    a116:	0889      	lsrs	r1, r1, #2
    a118:	f011 0f01 	tst.w	r1, #1
    a11c:	d005      	beq.n	a12a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdca>
    a11e:	2311      	movs	r3, #17
    a120:	2103      	movs	r1, #3
    a122:	f800 1ffe 	strb.w	r1, [r0, #254]!
    a126:	7042      	strb	r2, [r0, #1]
    a128:	e000      	b.n	a12c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdcc>
    a12a:	230d      	movs	r3, #13
    a12c:	2101      	movs	r1, #1
    a12e:	4618      	mov	r0, r3
    a130:	f7ff ffae 	bl	a090 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd30>
    a134:	68a0      	ldr	r0, [r4, #8]
    a136:	f880 518b 	strb.w	r5, [r0, #395]	; 0x18b
    a13a:	bd70      	pop	{r4, r5, r6, pc}
    a13c:	20000150 	.word	0x20000150
    a140:	b570      	push	{r4, r5, r6, lr}
    a142:	4a2b      	ldr	r2, [pc, #172]	; (a1f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe90>)
    a144:	4603      	mov	r3, r0
    a146:	8850      	ldrh	r0, [r2, #2]
    a148:	4318      	orrs	r0, r3
    a14a:	8050      	strh	r0, [r2, #2]
    a14c:	4610      	mov	r0, r2
    a14e:	2b40      	cmp	r3, #64	; 0x40
    a150:	6880      	ldr	r0, [r0, #8]
    a152:	d00d      	beq.n	a170 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe10>
    a154:	079e      	lsls	r6, r3, #30
    a156:	f04f 0500 	mov.w	r5, #0
    a15a:	f04f 0401 	mov.w	r4, #1
    a15e:	ea4f 76c3 	mov.w	r6, r3, lsl #31
    a162:	d50c      	bpl.n	a17e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe1e>
    a164:	b14e      	cbz	r6, a17a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe1a>
    a166:	f640 5104 	movw	r1, #3332	; 0xd04
    a16a:	2031      	movs	r0, #49	; 0x31
    a16c:	f7fb f800 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a170:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a174:	2104      	movs	r1, #4
    a176:	f7fe bb09 	b.w	878c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    a17a:	60d1      	str	r1, [r2, #12]
    a17c:	e01c      	b.n	a1b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe58>
    a17e:	b1c6      	cbz	r6, a1b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe52>
    a180:	6111      	str	r1, [r2, #16]
    a182:	78c9      	ldrb	r1, [r1, #3]
    a184:	2906      	cmp	r1, #6
    a186:	d002      	beq.n	a18e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe2e>
    a188:	290b      	cmp	r1, #11
    a18a:	d112      	bne.n	a1b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe52>
    a18c:	e009      	b.n	a1a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe42>
    a18e:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a192:	2917      	cmp	r1, #23
    a194:	d10d      	bne.n	a1b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe52>
    a196:	2100      	movs	r1, #0
    a198:	e9c0 1134 	strd	r1, r1, [r0, #208]	; 0xd0
    a19c:	f880 408a 	strb.w	r4, [r0, #138]	; 0x8a
    a1a0:	e007      	b.n	a1b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe52>
    a1a2:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a1a6:	2911      	cmp	r1, #17
    a1a8:	d103      	bne.n	a1b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe52>
    a1aa:	f880 508a 	strb.w	r5, [r0, #138]	; 0x8a
    a1ae:	f880 40bc 	strb.w	r4, [r0, #188]	; 0xbc
    a1b2:	0799      	lsls	r1, r3, #30
    a1b4:	d516      	bpl.n	a1e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe84>
    a1b6:	68d1      	ldr	r1, [r2, #12]
    a1b8:	78c9      	ldrb	r1, [r1, #3]
    a1ba:	2905      	cmp	r1, #5
    a1bc:	d002      	beq.n	a1c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe64>
    a1be:	290b      	cmp	r1, #11
    a1c0:	d110      	bne.n	a1e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe84>
    a1c2:	e009      	b.n	a1d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe78>
    a1c4:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a1c8:	2915      	cmp	r1, #21
    a1ca:	d10b      	bne.n	a1e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe84>
    a1cc:	2100      	movs	r1, #0
    a1ce:	e9e0 1136 	strd	r1, r1, [r0, #216]!	; 0xd8
    a1d2:	f800 4c4d 	strb.w	r4, [r0, #-77]
    a1d6:	e005      	b.n	a1e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe84>
    a1d8:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a1dc:	2910      	cmp	r1, #16
    a1de:	d101      	bne.n	a1e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe84>
    a1e0:	f880 508b 	strb.w	r5, [r0, #139]	; 0x8b
    a1e4:	0698      	lsls	r0, r3, #26
    a1e6:	d501      	bpl.n	a1ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe8c>
    a1e8:	2008      	movs	r0, #8
    a1ea:	7050      	strb	r0, [r2, #1]
    a1ec:	bd70      	pop	{r4, r5, r6, pc}
    a1ee:	0000      	.short	0x0000
    a1f0:	20000150 	.word	0x20000150
    a1f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a1f8:	4c26      	ldr	r4, [pc, #152]	; (a294 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf34>)
    a1fa:	2501      	movs	r5, #1
    a1fc:	68a2      	ldr	r2, [r4, #8]
    a1fe:	f892 01a6 	ldrb.w	r0, [r2, #422]	; 0x1a6
    a202:	b108      	cbz	r0, a208 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea8>
    a204:	2601      	movs	r6, #1
    a206:	e000      	b.n	a20a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeaa>
    a208:	2600      	movs	r6, #0
    a20a:	f892 11a7 	ldrb.w	r1, [r2, #423]	; 0x1a7
    a20e:	b109      	cbz	r1, a214 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb4>
    a210:	2701      	movs	r7, #1
    a212:	e000      	b.n	a216 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb6>
    a214:	2700      	movs	r7, #0
    a216:	b90e      	cbnz	r6, a21c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xebc>
    a218:	f892 006e 	ldrb.w	r0, [r2, #110]	; 0x6e
    a21c:	b90f      	cbnz	r7, a222 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xec2>
    a21e:	f892 106f 	ldrb.w	r1, [r2, #111]	; 0x6f
    a222:	f102 0366 	add.w	r3, r2, #102	; 0x66
    a226:	7218      	strb	r0, [r3, #8]
    a228:	7259      	strb	r1, [r3, #9]
    a22a:	20ff      	movs	r0, #255	; 0xff
    a22c:	7298      	strb	r0, [r3, #10]
    a22e:	f892 01be 	ldrb.w	r0, [r2, #446]	; 0x1be
    a232:	2801      	cmp	r0, #1
    a234:	d001      	beq.n	a23a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeda>
    a236:	b906      	cbnz	r6, a23a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeda>
    a238:	b117      	cbz	r7, a240 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xee0>
    a23a:	2000      	movs	r0, #0
    a23c:	f000 f82c 	bl	a298 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf38>
    a240:	68a0      	ldr	r0, [r4, #8]
    a242:	3030      	adds	r0, #48	; 0x30
    a244:	f005 f913 	bl	f46e <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    a248:	4606      	mov	r6, r0
    a24a:	2105      	movs	r1, #5
    a24c:	68a0      	ldr	r0, [r4, #8]
    a24e:	f7fe fa9d 	bl	878c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    a252:	68a0      	ldr	r0, [r4, #8]
    a254:	3030      	adds	r0, #48	; 0x30
    a256:	f005 f90a 	bl	f46e <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    a25a:	4607      	mov	r7, r0
    a25c:	42be      	cmp	r6, r7
    a25e:	d20a      	bcs.n	a276 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf16>
    a260:	f7f8 fb44 	bl	28ec <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
    a264:	4601      	mov	r1, r0
    a266:	1bb8      	subs	r0, r7, r6
    a268:	2865      	cmp	r0, #101	; 0x65
    a26a:	d200      	bcs.n	a26e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf0e>
    a26c:	2065      	movs	r0, #101	; 0x65
    a26e:	f7f8 fa75 	bl	275c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    a272:	b100      	cbz	r0, a276 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf16>
    a274:	2500      	movs	r5, #0
    a276:	68a0      	ldr	r0, [r4, #8]
    a278:	f005 f8a3 	bl	f3c2 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    a27c:	b130      	cbz	r0, a28c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf2c>
    a27e:	68a1      	ldr	r1, [r4, #8]
    a280:	f501 72f5 	add.w	r2, r1, #490	; 0x1ea
    a284:	8808      	ldrh	r0, [r1, #0]
    a286:	3130      	adds	r1, #48	; 0x30
    a288:	f005 f85c 	bl	f344 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    a28c:	4628      	mov	r0, r5
    a28e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a292:	0000      	.short	0x0000
    a294:	20000150 	.word	0x20000150
    a298:	b510      	push	{r4, lr}
    a29a:	4c10      	ldr	r4, [pc, #64]	; (a2dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf7c>)
    a29c:	68a1      	ldr	r1, [r4, #8]
    a29e:	880a      	ldrh	r2, [r1, #0]
    a2a0:	f8a1 2216 	strh.w	r2, [r1, #534]	; 0x216
    a2a4:	f881 0214 	strb.w	r0, [r1, #532]	; 0x214
    a2a8:	f891 006e 	ldrb.w	r0, [r1, #110]	; 0x6e
    a2ac:	f005 ff85 	bl	101ba <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    a2b0:	68a1      	ldr	r1, [r4, #8]
    a2b2:	f881 0218 	strb.w	r0, [r1, #536]	; 0x218
    a2b6:	f891 006f 	ldrb.w	r0, [r1, #111]	; 0x6f
    a2ba:	f005 ff7e 	bl	101ba <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    a2be:	68a2      	ldr	r2, [r4, #8]
    a2c0:	f202 2112 	addw	r1, r2, #530	; 0x212
    a2c4:	f882 0219 	strb.w	r0, [r2, #537]	; 0x219
    a2c8:	20ff      	movs	r0, #255	; 0xff
    a2ca:	7008      	strb	r0, [r1, #0]
    a2cc:	2000      	movs	r0, #0
    a2ce:	f882 01be 	strb.w	r0, [r2, #446]	; 0x1be
    a2d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a2d6:	f7fd b881 	b.w	73dc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a2da:	0000      	.short	0x0000
    a2dc:	20000150 	.word	0x20000150
    a2e0:	b510      	push	{r4, lr}
    a2e2:	4c15      	ldr	r4, [pc, #84]	; (a338 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfd8>)
    a2e4:	2301      	movs	r3, #1
    a2e6:	2100      	movs	r1, #0
    a2e8:	68a0      	ldr	r0, [r4, #8]
    a2ea:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a2ee:	3078      	adds	r0, #120	; 0x78
    a2f0:	f004 fc1b 	bl	eb2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a2f4:	b190      	cbz	r0, a31c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfbc>
    a2f6:	6920      	ldr	r0, [r4, #16]
    a2f8:	f004 fe5e 	bl	efb8 <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>
    a2fc:	68a1      	ldr	r1, [r4, #8]
    a2fe:	f8a1 01a4 	strh.w	r0, [r1, #420]	; 0x1a4
    a302:	f8b1 107c 	ldrh.w	r1, [r1, #124]	; 0x7c
    a306:	f005 ff71 	bl	101ec <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    a30a:	b148      	cbz	r0, a320 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfc0>
    a30c:	68a0      	ldr	r0, [r4, #8]
    a30e:	2128      	movs	r1, #40	; 0x28
    a310:	f880 109d 	strb.w	r1, [r0, #157]	; 0x9d
    a314:	307e      	adds	r0, #126	; 0x7e
    a316:	21ff      	movs	r1, #255	; 0xff
    a318:	7781      	strb	r1, [r0, #30]
    a31a:	e00b      	b.n	a334 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfd4>
    a31c:	2001      	movs	r0, #1
    a31e:	bd10      	pop	{r4, pc}
    a320:	68a1      	ldr	r1, [r4, #8]
    a322:	6920      	ldr	r0, [r4, #16]
    a324:	f501 71d3 	add.w	r1, r1, #422	; 0x1a6
    a328:	f004 fe41 	bl	efae <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>
    a32c:	68a1      	ldr	r1, [r4, #8]
    a32e:	200b      	movs	r0, #11
    a330:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    a334:	2000      	movs	r0, #0
    a336:	bd10      	pop	{r4, pc}
    a338:	20000150 	.word	0x20000150
    a33c:	b570      	push	{r4, r5, r6, lr}
    a33e:	4c29      	ldr	r4, [pc, #164]	; (a3e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1084>)
    a340:	2301      	movs	r3, #1
    a342:	2100      	movs	r1, #0
    a344:	68a0      	ldr	r0, [r4, #8]
    a346:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a34a:	3078      	adds	r0, #120	; 0x78
    a34c:	f004 fbed 	bl	eb2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a350:	b1b8      	cbz	r0, a382 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1022>
    a352:	2100      	movs	r1, #0
    a354:	6920      	ldr	r0, [r4, #16]
    a356:	f004 fe02 	bl	ef5e <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>
    a35a:	b1a0      	cbz	r0, a386 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1026>
    a35c:	6920      	ldr	r0, [r4, #16]
    a35e:	68a1      	ldr	r1, [r4, #8]
    a360:	f8b0 000d 	ldrh.w	r0, [r0, #13]
    a364:	f8a1 01a4 	strh.w	r0, [r1, #420]	; 0x1a4
    a368:	f8b1 107c 	ldrh.w	r1, [r1, #124]	; 0x7c
    a36c:	f005 ff3e 	bl	101ec <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    a370:	b168      	cbz	r0, a38e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x102e>
    a372:	68a0      	ldr	r0, [r4, #8]
    a374:	2128      	movs	r1, #40	; 0x28
    a376:	f880 109d 	strb.w	r1, [r0, #157]	; 0x9d
    a37a:	307e      	adds	r0, #126	; 0x7e
    a37c:	21ff      	movs	r1, #255	; 0xff
    a37e:	7781      	strb	r1, [r0, #30]
    a380:	e02e      	b.n	a3e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1080>
    a382:	2001      	movs	r0, #1
    a384:	bd70      	pop	{r4, r5, r6, pc}
    a386:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a38a:	f000 b8df 	b.w	a54c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11ec>
    a38e:	6920      	ldr	r0, [r4, #16]
    a390:	f004 fe15 	bl	efbe <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>
    a394:	f004 fbac 	bl	eaf0 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    a398:	4605      	mov	r5, r0
    a39a:	68a0      	ldr	r0, [r4, #8]
    a39c:	4629      	mov	r1, r5
    a39e:	f8c0 51ac 	str.w	r5, [r0, #428]	; 0x1ac
    a3a2:	6920      	ldr	r0, [r4, #16]
    a3a4:	7900      	ldrb	r0, [r0, #4]
    a3a6:	f004 fd2e 	bl	ee06 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    a3aa:	68a1      	ldr	r1, [r4, #8]
    a3ac:	f8a1 01a6 	strh.w	r0, [r1, #422]	; 0x1a6
    a3b0:	6920      	ldr	r0, [r4, #16]
    a3b2:	4629      	mov	r1, r5
    a3b4:	f8b0 0005 	ldrh.w	r0, [r0, #5]
    a3b8:	f004 fd21 	bl	edfe <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    a3bc:	68a1      	ldr	r1, [r4, #8]
    a3be:	f8c1 01a8 	str.w	r0, [r1, #424]	; 0x1a8
    a3c2:	6920      	ldr	r0, [r4, #16]
    a3c4:	f004 fdfe 	bl	efc4 <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>
    a3c8:	68a1      	ldr	r1, [r4, #8]
    a3ca:	f8a1 01b0 	strh.w	r0, [r1, #432]	; 0x1b0
    a3ce:	6920      	ldr	r0, [r4, #16]
    a3d0:	f004 fdfb 	bl	efca <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>
    a3d4:	68a1      	ldr	r1, [r4, #8]
    a3d6:	f8a1 01b2 	strh.w	r0, [r1, #434]	; 0x1b2
    a3da:	200d      	movs	r0, #13
    a3dc:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    a3e0:	2000      	movs	r0, #0
    a3e2:	bd70      	pop	{r4, r5, r6, pc}
    a3e4:	20000150 	.word	0x20000150
    a3e8:	b538      	push	{r3, r4, r5, lr}
    a3ea:	4c29      	ldr	r4, [pc, #164]	; (a490 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1130>)
    a3ec:	2301      	movs	r3, #1
    a3ee:	2100      	movs	r1, #0
    a3f0:	68a0      	ldr	r0, [r4, #8]
    a3f2:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a3f6:	3078      	adds	r0, #120	; 0x78
    a3f8:	f004 fb97 	bl	eb2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a3fc:	b970      	cbnz	r0, a41c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10bc>
    a3fe:	68a0      	ldr	r0, [r4, #8]
    a400:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a404:	2a12      	cmp	r2, #18
    a406:	d009      	beq.n	a41c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10bc>
    a408:	2301      	movs	r3, #1
    a40a:	2105      	movs	r1, #5
    a40c:	3078      	adds	r0, #120	; 0x78
    a40e:	f004 fb8c 	bl	eb2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a412:	b108      	cbz	r0, a418 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10b8>
    a414:	2008      	movs	r0, #8
    a416:	bd38      	pop	{r3, r4, r5, pc}
    a418:	2001      	movs	r0, #1
    a41a:	bd38      	pop	{r3, r4, r5, pc}
    a41c:	68a0      	ldr	r0, [r4, #8]
    a41e:	f890 00bc 	ldrb.w	r0, [r0, #188]	; 0xbc
    a422:	b908      	cbnz	r0, a428 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10c8>
    a424:	f7ff f8c4 	bl	95b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x250>
    a428:	68a1      	ldr	r1, [r4, #8]
    a42a:	6920      	ldr	r0, [r4, #16]
    a42c:	f501 7190 	add.w	r1, r1, #288	; 0x120
    a430:	f004 fdda 	bl	efe8 <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>
    a434:	68a1      	ldr	r1, [r4, #8]
    a436:	6920      	ldr	r0, [r4, #16]
    a438:	31f0      	adds	r1, #240	; 0xf0
    a43a:	f004 fdcc 	bl	efd6 <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>
    a43e:	68a1      	ldr	r1, [r4, #8]
    a440:	f891 01dc 	ldrb.w	r0, [r1, #476]	; 0x1dc
    a444:	f88d 0000 	strb.w	r0, [sp]
    a448:	9800      	ldr	r0, [sp, #0]
    a44a:	9000      	str	r0, [sp, #0]
    a44c:	f89d 0000 	ldrb.w	r0, [sp]
    a450:	b120      	cbz	r0, a45c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10fc>
    a452:	f44f 7127 	mov.w	r1, #668	; 0x29c
    a456:	2031      	movs	r0, #49	; 0x31
    a458:	f7fa fe8a 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a45c:	8808      	ldrh	r0, [r1, #0]
    a45e:	f8a1 01de 	strh.w	r0, [r1, #478]	; 0x1de
    a462:	f501 71f0 	add.w	r1, r1, #480	; 0x1e0
    a466:	6920      	ldr	r0, [r4, #16]
    a468:	f004 fdb9 	bl	efde <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>
    a46c:	68a1      	ldr	r1, [r4, #8]
    a46e:	6920      	ldr	r0, [r4, #16]
    a470:	f501 71f4 	add.w	r1, r1, #488	; 0x1e8
    a474:	f004 fdac 	bl	efd0 <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>
    a478:	68a0      	ldr	r0, [r4, #8]
    a47a:	4601      	mov	r1, r0
    a47c:	22ff      	movs	r2, #255	; 0xff
    a47e:	f880 21dc 	strb.w	r2, [r0, #476]	; 0x1dc
    a482:	2014      	movs	r0, #20
    a484:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    a488:	f7fc ffa8 	bl	73dc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a48c:	2000      	movs	r0, #0
    a48e:	bd38      	pop	{r3, r4, r5, pc}
    a490:	20000150 	.word	0x20000150
    a494:	b51c      	push	{r2, r3, r4, lr}
    a496:	4c11      	ldr	r4, [pc, #68]	; (a4dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x117c>)
    a498:	68a0      	ldr	r0, [r4, #8]
    a49a:	f890 0087 	ldrb.w	r0, [r0, #135]	; 0x87
    a49e:	07c0      	lsls	r0, r0, #31
    a4a0:	d001      	beq.n	a4a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1146>
    a4a2:	2001      	movs	r0, #1
    a4a4:	bd1c      	pop	{r2, r3, r4, pc}
    a4a6:	4669      	mov	r1, sp
    a4a8:	6920      	ldr	r0, [r4, #16]
    a4aa:	f004 fda3 	bl	eff4 <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>
    a4ae:	f001 f973 	bl	b798 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    a4b2:	f644 112f 	movw	r1, #18735	; 0x492f
    a4b6:	4008      	ands	r0, r1
    a4b8:	68a2      	ldr	r2, [r4, #8]
    a4ba:	9900      	ldr	r1, [sp, #0]
    a4bc:	2300      	movs	r3, #0
    a4be:	4001      	ands	r1, r0
    a4c0:	f842 1fc4 	str.w	r1, [r2, #196]!
    a4c4:	6053      	str	r3, [r2, #4]
    a4c6:	f7ff f873 	bl	95b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x250>
    a4ca:	68a0      	ldr	r0, [r4, #8]
    a4cc:	f810 1f87 	ldrb.w	r1, [r0, #135]!
    a4d0:	f041 0101 	orr.w	r1, r1, #1
    a4d4:	7001      	strb	r1, [r0, #0]
    a4d6:	2000      	movs	r0, #0
    a4d8:	bd1c      	pop	{r2, r3, r4, pc}
    a4da:	0000      	.short	0x0000
    a4dc:	20000150 	.word	0x20000150
    a4e0:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    a4e2:	4c19      	ldr	r4, [pc, #100]	; (a548 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11e8>)
    a4e4:	2301      	movs	r3, #1
    a4e6:	2107      	movs	r1, #7
    a4e8:	68a0      	ldr	r0, [r4, #8]
    a4ea:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a4ee:	3078      	adds	r0, #120	; 0x78
    a4f0:	f004 fb1b 	bl	eb2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a4f4:	b330      	cbz	r0, a544 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11e4>
    a4f6:	4669      	mov	r1, sp
    a4f8:	6920      	ldr	r0, [r4, #16]
    a4fa:	f004 fd80 	bl	effe <sym_KIWKQDEBPWXHISYFTEC7I32RP3MHD6CJEPVDW6I>
    a4fe:	68a6      	ldr	r6, [r4, #8]
    a500:	9d00      	ldr	r5, [sp, #0]
    a502:	36c4      	adds	r6, #196	; 0xc4
    a504:	f001 f948 	bl	b798 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    a508:	4005      	ands	r5, r0
    a50a:	f644 102f 	movw	r0, #18735	; 0x492f
    a50e:	4005      	ands	r5, r0
    a510:	2100      	movs	r1, #0
    a512:	6035      	str	r5, [r6, #0]
    a514:	6071      	str	r1, [r6, #4]
    a516:	68a0      	ldr	r0, [r4, #8]
    a518:	f880 10b6 	strb.w	r1, [r0, #182]	; 0xb6
    a51c:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    a520:	8802      	ldrh	r2, [r0, #0]
    a522:	f8a0 221e 	strh.w	r2, [r0, #542]	; 0x21e
    a526:	f880 121c 	strb.w	r1, [r0, #540]	; 0x21c
    a52a:	9a00      	ldr	r2, [sp, #0]
    a52c:	f8c0 2220 	str.w	r2, [r0, #544]	; 0x220
    a530:	9a01      	ldr	r2, [sp, #4]
    a532:	f8c0 2224 	str.w	r2, [r0, #548]	; 0x224
    a536:	21ff      	movs	r1, #255	; 0xff
    a538:	f880 121a 	strb.w	r1, [r0, #538]	; 0x21a
    a53c:	f7fc ff4e 	bl	73dc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a540:	2000      	movs	r0, #0
    a542:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    a544:	2001      	movs	r0, #1
    a546:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    a548:	20000150 	.word	0x20000150
    a54c:	4a0a      	ldr	r2, [pc, #40]	; (a578 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1218>)
    a54e:	b510      	push	{r4, lr}
    a550:	6890      	ldr	r0, [r2, #8]
    a552:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    a556:	070b      	lsls	r3, r1, #28
    a558:	d501      	bpl.n	a55e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11fe>
    a55a:	2001      	movs	r0, #1
    a55c:	bd10      	pop	{r4, pc}
    a55e:	f041 0108 	orr.w	r1, r1, #8
    a562:	f880 1087 	strb.w	r1, [r0, #135]	; 0x87
    a566:	6911      	ldr	r1, [r2, #16]
    a568:	78c9      	ldrb	r1, [r1, #3]
    a56a:	f880 10f9 	strb.w	r1, [r0, #249]	; 0xf9
    a56e:	f7ff f81f 	bl	95b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x250>
    a572:	2000      	movs	r0, #0
    a574:	bd10      	pop	{r4, pc}
    a576:	0000      	.short	0x0000
    a578:	20000150 	.word	0x20000150
    a57c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    a580:	4c35      	ldr	r4, [pc, #212]	; (a658 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12f8>)
    a582:	68a0      	ldr	r0, [r4, #8]
    a584:	f890 0087 	ldrb.w	r0, [r0, #135]	; 0x87
    a588:	f010 0f30 	tst.w	r0, #48	; 0x30
    a58c:	d002      	beq.n	a594 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1234>
    a58e:	2001      	movs	r0, #1
    a590:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    a594:	6920      	ldr	r0, [r4, #16]
    a596:	f004 fd4d 	bl	f034 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    a59a:	b328      	cbz	r0, a5e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1288>
    a59c:	6920      	ldr	r0, [r4, #16]
    a59e:	f004 fd3b 	bl	f018 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    a5a2:	4607      	mov	r7, r0
    a5a4:	6920      	ldr	r0, [r4, #16]
    a5a6:	f004 fd3b 	bl	f020 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    a5aa:	4606      	mov	r6, r0
    a5ac:	6920      	ldr	r0, [r4, #16]
    a5ae:	f004 fd31 	bl	f014 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    a5b2:	4605      	mov	r5, r0
    a5b4:	6920      	ldr	r0, [r4, #16]
    a5b6:	f004 fd31 	bl	f01c <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    a5ba:	4601      	mov	r1, r0
    a5bc:	9700      	str	r7, [sp, #0]
    a5be:	68a0      	ldr	r0, [r4, #8]
    a5c0:	4633      	mov	r3, r6
    a5c2:	462a      	mov	r2, r5
    a5c4:	3030      	adds	r0, #48	; 0x30
    a5c6:	f004 ff8c 	bl	f4e2 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    a5ca:	78a0      	ldrb	r0, [r4, #2]
    a5cc:	0781      	lsls	r1, r0, #30
    a5ce:	f04f 0001 	mov.w	r0, #1
    a5d2:	d503      	bpl.n	a5dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x127c>
    a5d4:	68e1      	ldr	r1, [r4, #12]
    a5d6:	78c9      	ldrb	r1, [r1, #3]
    a5d8:	2914      	cmp	r1, #20
    a5da:	d009      	beq.n	a5f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1290>
    a5dc:	68a1      	ldr	r1, [r4, #8]
    a5de:	f891 1085 	ldrb.w	r1, [r1, #133]	; 0x85
    a5e2:	291c      	cmp	r1, #28
    a5e4:	d004      	beq.n	a5f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1290>
    a5e6:	e006      	b.n	a5f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1296>
    a5e8:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    a5ec:	f7ff bfae 	b.w	a54c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11ec>
    a5f0:	68a1      	ldr	r1, [r4, #8]
    a5f2:	f881 0064 	strb.w	r0, [r1, #100]	; 0x64
    a5f6:	68a1      	ldr	r1, [r4, #8]
    a5f8:	f891 0064 	ldrb.w	r0, [r1, #100]	; 0x64
    a5fc:	2801      	cmp	r0, #1
    a5fe:	d011      	beq.n	a624 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12c4>
    a600:	f891 01b5 	ldrb.w	r0, [r1, #437]	; 0x1b5
    a604:	f88d 0004 	strb.w	r0, [sp, #4]
    a608:	9801      	ldr	r0, [sp, #4]
    a60a:	9001      	str	r0, [sp, #4]
    a60c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    a610:	b940      	cbnz	r0, a624 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12c4>
    a612:	f891 01b4 	ldrb.w	r0, [r1, #436]	; 0x1b4
    a616:	f88d 0000 	strb.w	r0, [sp]
    a61a:	9800      	ldr	r0, [sp, #0]
    a61c:	9000      	str	r0, [sp, #0]
    a61e:	f89d 0000 	ldrb.w	r0, [sp]
    a622:	b148      	cbz	r0, a638 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12d8>
    a624:	f811 0f87 	ldrb.w	r0, [r1, #135]!
    a628:	f040 0010 	orr.w	r0, r0, #16
    a62c:	f881 0000 	strb.w	r0, [r1]
    a630:	f7fe ffbe 	bl	95b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x250>
    a634:	2000      	movs	r0, #0
    a636:	e7ab      	b.n	a590 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1230>
    a638:	f891 0087 	ldrb.w	r0, [r1, #135]	; 0x87
    a63c:	f501 72fc 	add.w	r2, r1, #504	; 0x1f8
    a640:	f040 0020 	orr.w	r0, r0, #32
    a644:	f881 0087 	strb.w	r0, [r1, #135]	; 0x87
    a648:	f831 0b30 	ldrh.w	r0, [r1], #48
    a64c:	f004 ff50 	bl	f4f0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    a650:	f7fc fec4 	bl	73dc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a654:	e7ec      	b.n	a630 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12d0>
    a656:	0000      	.short	0x0000
    a658:	20000150 	.word	0x20000150
    a65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a65e:	4c1a      	ldr	r4, [pc, #104]	; (a6c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1368>)
    a660:	2301      	movs	r3, #1
    a662:	210a      	movs	r1, #10
    a664:	68a0      	ldr	r0, [r4, #8]
    a666:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a66a:	3078      	adds	r0, #120	; 0x78
    a66c:	f004 fa5d 	bl	eb2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a670:	b338      	cbz	r0, a6c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1362>
    a672:	6920      	ldr	r0, [r4, #16]
    a674:	f004 fcde 	bl	f034 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    a678:	b1c8      	cbz	r0, a6ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x134e>
    a67a:	6920      	ldr	r0, [r4, #16]
    a67c:	f004 fccc 	bl	f018 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    a680:	4607      	mov	r7, r0
    a682:	6920      	ldr	r0, [r4, #16]
    a684:	f004 fccc 	bl	f020 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    a688:	4606      	mov	r6, r0
    a68a:	6920      	ldr	r0, [r4, #16]
    a68c:	f004 fcc2 	bl	f014 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    a690:	4605      	mov	r5, r0
    a692:	6920      	ldr	r0, [r4, #16]
    a694:	f004 fcc2 	bl	f01c <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    a698:	4601      	mov	r1, r0
    a69a:	9700      	str	r7, [sp, #0]
    a69c:	68a0      	ldr	r0, [r4, #8]
    a69e:	4633      	mov	r3, r6
    a6a0:	462a      	mov	r2, r5
    a6a2:	3030      	adds	r0, #48	; 0x30
    a6a4:	f004 ff1d 	bl	f4e2 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    a6a8:	68a0      	ldr	r0, [r4, #8]
    a6aa:	f004 fe8a 	bl	f3c2 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    a6ae:	68a1      	ldr	r1, [r4, #8]
    a6b0:	2000      	movs	r0, #0
    a6b2:	f881 00b6 	strb.w	r0, [r1, #182]	; 0xb6
    a6b6:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a6ba:	f7ff f93f 	bl	993c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5dc>
    a6be:	2000      	movs	r0, #0
    a6c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a6c2:	2001      	movs	r0, #1
    a6c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a6c6:	0000      	.short	0x0000
    a6c8:	20000150 	.word	0x20000150
    a6cc:	b510      	push	{r4, lr}
    a6ce:	4c09      	ldr	r4, [pc, #36]	; (a6f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1394>)
    a6d0:	68a0      	ldr	r0, [r4, #8]
    a6d2:	f890 0087 	ldrb.w	r0, [r0, #135]	; 0x87
    a6d6:	0740      	lsls	r0, r0, #29
    a6d8:	d501      	bpl.n	a6de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x137e>
    a6da:	2001      	movs	r0, #1
    a6dc:	bd10      	pop	{r4, pc}
    a6de:	f7fe ff67 	bl	95b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x250>
    a6e2:	68a0      	ldr	r0, [r4, #8]
    a6e4:	f810 1f87 	ldrb.w	r1, [r0, #135]!
    a6e8:	f041 0104 	orr.w	r1, r1, #4
    a6ec:	7001      	strb	r1, [r0, #0]
    a6ee:	2000      	movs	r0, #0
    a6f0:	bd10      	pop	{r4, pc}
    a6f2:	0000      	.short	0x0000
    a6f4:	20000150 	.word	0x20000150
    a6f8:	b510      	push	{r4, lr}
    a6fa:	4c09      	ldr	r4, [pc, #36]	; (a720 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13c0>)
    a6fc:	2301      	movs	r3, #1
    a6fe:	2109      	movs	r1, #9
    a700:	68a0      	ldr	r0, [r4, #8]
    a702:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a706:	3078      	adds	r0, #120	; 0x78
    a708:	f004 fa0f 	bl	eb2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a70c:	2800      	cmp	r0, #0
    a70e:	d006      	beq.n	a71e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13be>
    a710:	68a1      	ldr	r1, [r4, #8]
    a712:	2000      	movs	r0, #0
    a714:	f801 0faa 	strb.w	r0, [r1, #170]!
    a718:	7308      	strb	r0, [r1, #12]
    a71a:	f801 0c25 	strb.w	r0, [r1, #-37]
    a71e:	bd10      	pop	{r4, pc}
    a720:	20000150 	.word	0x20000150
    a724:	b510      	push	{r4, lr}
    a726:	4c0f      	ldr	r4, [pc, #60]	; (a764 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1404>)
    a728:	2301      	movs	r3, #1
    a72a:	2100      	movs	r1, #0
    a72c:	68a0      	ldr	r0, [r4, #8]
    a72e:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a732:	3078      	adds	r0, #120	; 0x78
    a734:	f004 f9f9 	bl	eb2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a738:	b138      	cbz	r0, a74a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13ea>
    a73a:	f7fe ff39 	bl	95b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x250>
    a73e:	68a1      	ldr	r1, [r4, #8]
    a740:	2010      	movs	r0, #16
    a742:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    a746:	2000      	movs	r0, #0
    a748:	bd10      	pop	{r4, pc}
    a74a:	68a0      	ldr	r0, [r4, #8]
    a74c:	2301      	movs	r3, #1
    a74e:	2105      	movs	r1, #5
    a750:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a754:	3078      	adds	r0, #120	; 0x78
    a756:	f004 f9e8 	bl	eb2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a75a:	b108      	cbz	r0, a760 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1400>
    a75c:	2008      	movs	r0, #8
    a75e:	bd10      	pop	{r4, pc}
    a760:	2001      	movs	r0, #1
    a762:	bd10      	pop	{r4, pc}
    a764:	20000150 	.word	0x20000150
    a768:	4806      	ldr	r0, [pc, #24]	; (a784 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1424>)
    a76a:	6880      	ldr	r0, [r0, #8]
    a76c:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a770:	2911      	cmp	r1, #17
    a772:	d001      	beq.n	a778 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1418>
    a774:	2002      	movs	r0, #2
    a776:	4770      	bx	lr
    a778:	2112      	movs	r1, #18
    a77a:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    a77e:	2000      	movs	r0, #0
    a780:	4770      	bx	lr
    a782:	0000      	.short	0x0000
    a784:	20000150 	.word	0x20000150
    a788:	b538      	push	{r3, r4, r5, lr}
    a78a:	4c33      	ldr	r4, [pc, #204]	; (a858 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14f8>)
    a78c:	2301      	movs	r3, #1
    a78e:	210b      	movs	r1, #11
    a790:	68a0      	ldr	r0, [r4, #8]
    a792:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a796:	3078      	adds	r0, #120	; 0x78
    a798:	f004 f9c7 	bl	eb2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a79c:	bb70      	cbnz	r0, a7fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x149c>
    a79e:	68a0      	ldr	r0, [r4, #8]
    a7a0:	2301      	movs	r3, #1
    a7a2:	2100      	movs	r1, #0
    a7a4:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a7a8:	3078      	adds	r0, #120	; 0x78
    a7aa:	f004 f9be 	bl	eb2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a7ae:	b318      	cbz	r0, a7f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1498>
    a7b0:	68a0      	ldr	r0, [r4, #8]
    a7b2:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    a7b6:	2824      	cmp	r0, #36	; 0x24
    a7b8:	d020      	beq.n	a7fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x149c>
    a7ba:	6920      	ldr	r0, [r4, #16]
    a7bc:	f004 fc56 	bl	f06c <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>
    a7c0:	b1f0      	cbz	r0, a800 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14a0>
    a7c2:	68a0      	ldr	r0, [r4, #8]
    a7c4:	2102      	movs	r1, #2
    a7c6:	30c4      	adds	r0, #196	; 0xc4
    a7c8:	f005 fca1 	bl	1010e <CONFIG_PM_SRAM_SIZE+0x10e>
    a7cc:	6921      	ldr	r1, [r4, #16]
    a7ce:	7948      	ldrb	r0, [r1, #5]
    a7d0:	f000 0207 	and.w	r2, r0, #7
    a7d4:	68a0      	ldr	r0, [r4, #8]
    a7d6:	f880 2067 	strb.w	r2, [r0, #103]	; 0x67
    a7da:	7909      	ldrb	r1, [r1, #4]
    a7dc:	f001 0107 	and.w	r1, r1, #7
    a7e0:	f880 1066 	strb.w	r1, [r0, #102]	; 0x66
    a7e4:	f890 31bf 	ldrb.w	r3, [r0, #447]	; 0x1bf
    a7e8:	f88d 3000 	strb.w	r3, [sp]
    a7ec:	9b00      	ldr	r3, [sp, #0]
    a7ee:	9300      	str	r3, [sp, #0]
    a7f0:	f89d 3000 	ldrb.w	r3, [sp]
    a7f4:	bb3b      	cbnz	r3, a846 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14e6>
    a7f6:	e007      	b.n	a808 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14a8>
    a7f8:	2001      	movs	r0, #1
    a7fa:	bd38      	pop	{r3, r4, r5, pc}
    a7fc:	2020      	movs	r0, #32
    a7fe:	bd38      	pop	{r3, r4, r5, pc}
    a800:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    a804:	f7ff bea2 	b.w	a54c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11ec>
    a808:	f890 31be 	ldrb.w	r3, [r0, #446]	; 0x1be
    a80c:	2b01      	cmp	r3, #1
    a80e:	d01a      	beq.n	a846 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14e6>
    a810:	f100 036e 	add.w	r3, r0, #110	; 0x6e
    a814:	785d      	ldrb	r5, [r3, #1]
    a816:	428d      	cmp	r5, r1
    a818:	d106      	bne.n	a828 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14c8>
    a81a:	7819      	ldrb	r1, [r3, #0]
    a81c:	4291      	cmp	r1, r2
    a81e:	d103      	bne.n	a828 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14c8>
    a820:	2102      	movs	r1, #2
    a822:	f880 11be 	strb.w	r1, [r0, #446]	; 0x1be
    a826:	e00e      	b.n	a846 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14e6>
    a828:	f200 210e 	addw	r1, r0, #526	; 0x20e
    a82c:	8802      	ldrh	r2, [r0, #0]
    a82e:	f821 2902 	strh.w	r2, [r1], #-2
    a832:	f890 2066 	ldrb.w	r2, [r0, #102]	; 0x66
    a836:	710a      	strb	r2, [r1, #4]
    a838:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    a83c:	7148      	strb	r0, [r1, #5]
    a83e:	20ff      	movs	r0, #255	; 0xff
    a840:	7008      	strb	r0, [r1, #0]
    a842:	f7fc fdcb 	bl	73dc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a846:	68a1      	ldr	r1, [r4, #8]
    a848:	2021      	movs	r0, #33	; 0x21
    a84a:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    a84e:	f7fe feaf 	bl	95b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x250>
    a852:	2000      	movs	r0, #0
    a854:	bd38      	pop	{r3, r4, r5, pc}
    a856:	0000      	.short	0x0000
    a858:	20000150 	.word	0x20000150
    a85c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a860:	4c4c      	ldr	r4, [pc, #304]	; (a994 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1634>)
    a862:	68a0      	ldr	r0, [r4, #8]
    a864:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    a868:	2920      	cmp	r1, #32
    a86a:	d009      	beq.n	a880 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1520>
    a86c:	f05f 0700 	movs.w	r7, #0
    a870:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a874:	2922      	cmp	r1, #34	; 0x22
    a876:	d005      	beq.n	a884 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1524>
    a878:	b36f      	cbz	r7, a8d6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1576>
    a87a:	f100 0585 	add.w	r5, r0, #133	; 0x85
    a87e:	e003      	b.n	a888 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1528>
    a880:	2701      	movs	r7, #1
    a882:	e7f5      	b.n	a870 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1510>
    a884:	f100 0586 	add.w	r5, r0, #134	; 0x86
    a888:	2102      	movs	r1, #2
    a88a:	30c4      	adds	r0, #196	; 0xc4
    a88c:	f005 fc3f 	bl	1010e <CONFIG_PM_SRAM_SIZE+0x10e>
    a890:	6920      	ldr	r0, [r4, #16]
    a892:	f7fc fc8f 	bl	71b4 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>
    a896:	2600      	movs	r6, #0
    a898:	b300      	cbz	r0, a8dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x157c>
    a89a:	4639      	mov	r1, r7
    a89c:	6920      	ldr	r0, [r4, #16]
    a89e:	f7fe ff53 	bl	9748 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3e8>
    a8a2:	b1d8      	cbz	r0, a8dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x157c>
    a8a4:	466a      	mov	r2, sp
    a8a6:	6921      	ldr	r1, [r4, #16]
    a8a8:	68a0      	ldr	r0, [r4, #8]
    a8aa:	f004 fa62 	bl	ed72 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>
    a8ae:	b380      	cbz	r0, a912 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b2>
    a8b0:	6920      	ldr	r0, [r4, #16]
    a8b2:	f004 fbb7 	bl	f024 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    a8b6:	68a1      	ldr	r1, [r4, #8]
    a8b8:	f8a1 01a4 	strh.w	r0, [r1, #420]	; 0x1a4
    a8bc:	f8b1 107c 	ldrh.w	r1, [r1, #124]	; 0x7c
    a8c0:	f005 fc94 	bl	101ec <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    a8c4:	b3d0      	cbz	r0, a93c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15dc>
    a8c6:	68a0      	ldr	r0, [r4, #8]
    a8c8:	2128      	movs	r1, #40	; 0x28
    a8ca:	f880 109d 	strb.w	r1, [r0, #157]	; 0x9d
    a8ce:	307e      	adds	r0, #126	; 0x7e
    a8d0:	21ff      	movs	r1, #255	; 0xff
    a8d2:	7781      	strb	r1, [r0, #30]
    a8d4:	e052      	b.n	a97c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x161c>
    a8d6:	2002      	movs	r0, #2
    a8d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a8dc:	68a0      	ldr	r0, [r4, #8]
    a8de:	f04f 0800 	mov.w	r8, #0
    a8e2:	f890 11be 	ldrb.w	r1, [r0, #446]	; 0x1be
    a8e6:	2901      	cmp	r1, #1
    a8e8:	d014      	beq.n	a914 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b4>
    a8ea:	f880 61be 	strb.w	r6, [r0, #446]	; 0x1be
    a8ee:	b1ef      	cbz	r7, a92c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15cc>
    a8f0:	6920      	ldr	r0, [r4, #16]
    a8f2:	68a1      	ldr	r1, [r4, #8]
    a8f4:	2201      	movs	r2, #1
    a8f6:	78c0      	ldrb	r0, [r0, #3]
    a8f8:	f881 00fa 	strb.w	r0, [r1, #250]	; 0xfa
    a8fc:	4082      	lsls	r2, r0
    a8fe:	f3c2 6000 	ubfx	r0, r2, #24, #1
    a902:	b158      	cbz	r0, a91c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15bc>
    a904:	200a      	movs	r0, #10
    a906:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a90a:	f891 00b6 	ldrb.w	r0, [r1, #182]	; 0xb6
    a90e:	b998      	cbnz	r0, a938 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15d8>
    a910:	e007      	b.n	a922 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c2>
    a912:	e014      	b.n	a93e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15de>
    a914:	201e      	movs	r0, #30
    a916:	f7ff fcbf 	bl	a298 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf38>
    a91a:	e7e8      	b.n	a8ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x158e>
    a91c:	f240 31bf 	movw	r1, #959	; 0x3bf
    a920:	e001      	b.n	a926 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c6>
    a922:	f240 31c7 	movw	r1, #967	; 0x3c7
    a926:	2031      	movs	r0, #49	; 0x31
    a928:	f7fa fc22 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a92c:	702e      	strb	r6, [r5, #0]
    a92e:	f7fe fe4b 	bl	95c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x268>
    a932:	f7ff fe0b 	bl	a54c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11ec>
    a936:	4680      	mov	r8, r0
    a938:	4640      	mov	r0, r8
    a93a:	e7cd      	b.n	a8d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1578>
    a93c:	e013      	b.n	a966 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1606>
    a93e:	68a0      	ldr	r0, [r4, #8]
    a940:	f890 11be 	ldrb.w	r1, [r0, #446]	; 0x1be
    a944:	2901      	cmp	r1, #1
    a946:	d009      	beq.n	a95c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15fc>
    a948:	f880 61be 	strb.w	r6, [r0, #446]	; 0x1be
    a94c:	68a0      	ldr	r0, [r4, #8]
    a94e:	f100 0186 	add.w	r1, r0, #134	; 0x86
    a952:	428d      	cmp	r5, r1
    a954:	d112      	bne.n	a97c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x161c>
    a956:	f880 6086 	strb.w	r6, [r0, #134]	; 0x86
    a95a:	e00f      	b.n	a97c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x161c>
    a95c:	2000      	movs	r0, #0
    a95e:	f7ff fc9b 	bl	a298 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf38>
    a962:	702e      	strb	r6, [r5, #0]
    a964:	e7f2      	b.n	a94c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ec>
    a966:	68a0      	ldr	r0, [r4, #8]
    a968:	f89d 1000 	ldrb.w	r1, [sp]
    a96c:	f880 11a6 	strb.w	r1, [r0, #422]	; 0x1a6
    a970:	f89d 1001 	ldrb.w	r1, [sp, #1]
    a974:	f880 11a7 	strb.w	r1, [r0, #423]	; 0x1a7
    a978:	2024      	movs	r0, #36	; 0x24
    a97a:	7028      	strb	r0, [r5, #0]
    a97c:	68a0      	ldr	r0, [r4, #8]
    a97e:	f100 0186 	add.w	r1, r0, #134	; 0x86
    a982:	428d      	cmp	r5, r1
    a984:	d102      	bne.n	a98c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x162c>
    a986:	f7fe fe1f 	bl	95c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x268>
    a98a:	e001      	b.n	a990 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1630>
    a98c:	f880 60b6 	strb.w	r6, [r0, #182]	; 0xb6
    a990:	2000      	movs	r0, #0
    a992:	e7a1      	b.n	a8d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1578>
    a994:	20000150 	.word	0x20000150
    a998:	b510      	push	{r4, lr}
    a99a:	4c0a      	ldr	r4, [pc, #40]	; (a9c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1664>)
    a99c:	2102      	movs	r1, #2
    a99e:	68a0      	ldr	r0, [r4, #8]
    a9a0:	30c4      	adds	r0, #196	; 0xc4
    a9a2:	f005 fbb4 	bl	1010e <CONFIG_PM_SRAM_SIZE+0x10e>
    a9a6:	6920      	ldr	r0, [r4, #16]
    a9a8:	f004 fb6a 	bl	f080 <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>
    a9ac:	2816      	cmp	r0, #22
    a9ae:	d001      	beq.n	a9b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1654>
    a9b0:	2000      	movs	r0, #0
    a9b2:	bd10      	pop	{r4, pc}
    a9b4:	6920      	ldr	r0, [r4, #16]
    a9b6:	f004 fb65 	bl	f084 <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>
    a9ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a9be:	f7fe bdd5 	b.w	956c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x20c>
    a9c2:	0000      	.short	0x0000
    a9c4:	20000150 	.word	0x20000150
    a9c8:	4802      	ldr	r0, [pc, #8]	; (a9d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1674>)
    a9ca:	6900      	ldr	r0, [r0, #16]
    a9cc:	7900      	ldrb	r0, [r0, #4]
    a9ce:	f7fe bdcd 	b.w	956c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x20c>
    a9d2:	0000      	.short	0x0000
    a9d4:	20000150 	.word	0x20000150
    a9d8:	b510      	push	{r4, lr}
    a9da:	4c08      	ldr	r4, [pc, #32]	; (a9fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x169c>)
    a9dc:	68a0      	ldr	r0, [r4, #8]
    a9de:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    a9e2:	2817      	cmp	r0, #23
    a9e4:	d001      	beq.n	a9ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x168a>
    a9e6:	2002      	movs	r0, #2
    a9e8:	bd10      	pop	{r4, pc}
    a9ea:	f7fe fded 	bl	95c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x268>
    a9ee:	68a1      	ldr	r1, [r4, #8]
    a9f0:	201b      	movs	r0, #27
    a9f2:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    a9f6:	2000      	movs	r0, #0
    a9f8:	bd10      	pop	{r4, pc}
    a9fa:	0000      	.short	0x0000
    a9fc:	20000150 	.word	0x20000150
    aa00:	b510      	push	{r4, lr}
    aa02:	4c0b      	ldr	r4, [pc, #44]	; (aa30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d0>)
    aa04:	2301      	movs	r3, #1
    aa06:	4619      	mov	r1, r3
    aa08:	68a0      	ldr	r0, [r4, #8]
    aa0a:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    aa0e:	3078      	adds	r0, #120	; 0x78
    aa10:	f004 f88b 	bl	eb2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    aa14:	b108      	cbz	r0, aa1a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16ba>
    aa16:	2000      	movs	r0, #0
    aa18:	bd10      	pop	{r4, pc}
    aa1a:	6920      	ldr	r0, [r4, #16]
    aa1c:	f004 fb06 	bl	f02c <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>
    aa20:	68a1      	ldr	r1, [r4, #8]
    aa22:	f881 018a 	strb.w	r0, [r1, #394]	; 0x18a
    aa26:	2007      	movs	r0, #7
    aa28:	f881 0088 	strb.w	r0, [r1, #136]	; 0x88
    aa2c:	e7f3      	b.n	aa16 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16b6>
    aa2e:	0000      	.short	0x0000
    aa30:	20000150 	.word	0x20000150
    aa34:	b570      	push	{r4, r5, r6, lr}
    aa36:	4d37      	ldr	r5, [pc, #220]	; (ab14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17b4>)
    aa38:	2600      	movs	r6, #0
    aa3a:	4628      	mov	r0, r5
    aa3c:	68a9      	ldr	r1, [r5, #8]
    aa3e:	6900      	ldr	r0, [r0, #16]
    aa40:	f891 3085 	ldrb.w	r3, [r1, #133]	; 0x85
    aa44:	7900      	ldrb	r0, [r0, #4]
    aa46:	2b0e      	cmp	r3, #14
    aa48:	d101      	bne.n	aa4e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16ee>
    aa4a:	2812      	cmp	r0, #18
    aa4c:	d006      	beq.n	aa5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16fc>
    aa4e:	4a31      	ldr	r2, [pc, #196]	; (ab14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17b4>)
    aa50:	2400      	movs	r4, #0
    aa52:	6892      	ldr	r2, [r2, #8]
    aa54:	32c4      	adds	r2, #196	; 0xc4
    aa56:	2b1c      	cmp	r3, #28
    aa58:	d004      	beq.n	aa64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1704>
    aa5a:	e005      	b.n	aa68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1708>
    aa5c:	f7ff fe4c 	bl	a6f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1398>
    aa60:	4606      	mov	r6, r0
    aa62:	e054      	b.n	ab0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17ae>
    aa64:	2814      	cmp	r0, #20
    aa66:	d002      	beq.n	aa6e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x170e>
    aa68:	2b04      	cmp	r3, #4
    aa6a:	d00b      	beq.n	aa84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1724>
    aa6c:	e00c      	b.n	aa88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1728>
    aa6e:	f881 4085 	strb.w	r4, [r1, #133]	; 0x85
    aa72:	f881 40b6 	strb.w	r4, [r1, #182]	; 0xb6
    aa76:	2105      	movs	r1, #5
    aa78:	4610      	mov	r0, r2
    aa7a:	f005 fb3e 	bl	100fa <CONFIG_PM_SRAM_SIZE+0xfa>
    aa7e:	f7fe ff5d 	bl	993c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5dc>
    aa82:	e044      	b.n	ab0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17ae>
    aa84:	280e      	cmp	r0, #14
    aa86:	d002      	beq.n	aa8e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x172e>
    aa88:	2b20      	cmp	r3, #32
    aa8a:	d010      	beq.n	aaae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    aa8c:	e011      	b.n	aab2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1752>
    aa8e:	f881 4085 	strb.w	r4, [r1, #133]	; 0x85
    aa92:	f881 40b6 	strb.w	r4, [r1, #182]	; 0xb6
    aa96:	8808      	ldrh	r0, [r1, #0]
    aa98:	f8a1 021e 	strh.w	r0, [r1, #542]	; 0x21e
    aa9c:	201a      	movs	r0, #26
    aa9e:	f881 021c 	strb.w	r0, [r1, #540]	; 0x21c
    aaa2:	20ff      	movs	r0, #255	; 0xff
    aaa4:	f881 021a 	strb.w	r0, [r1, #538]	; 0x21a
    aaa8:	f7fc fc98 	bl	73dc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    aaac:	e02f      	b.n	ab0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17ae>
    aaae:	2816      	cmp	r0, #22
    aab0:	d006      	beq.n	aac0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1760>
    aab2:	2b26      	cmp	r3, #38	; 0x26
    aab4:	d101      	bne.n	aaba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x175a>
    aab6:	2816      	cmp	r0, #22
    aab8:	d002      	beq.n	aac0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1760>
    aaba:	2817      	cmp	r0, #23
    aabc:	d014      	beq.n	aae8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1788>
    aabe:	e026      	b.n	ab0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17ae>
    aac0:	f801 4f85 	strb.w	r4, [r1, #133]!
    aac4:	f881 4031 	strb.w	r4, [r1, #49]	; 0x31
    aac8:	7848      	ldrb	r0, [r1, #1]
    aaca:	2821      	cmp	r0, #33	; 0x21
    aacc:	d01f      	beq.n	ab0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17ae>
    aace:	2108      	movs	r1, #8
    aad0:	4610      	mov	r0, r2
    aad2:	f005 fb12 	bl	100fa <CONFIG_PM_SRAM_SIZE+0xfa>
    aad6:	68a8      	ldr	r0, [r5, #8]
    aad8:	210b      	movs	r1, #11
    aada:	30c4      	adds	r0, #196	; 0xc4
    aadc:	f005 fb0d 	bl	100fa <CONFIG_PM_SRAM_SIZE+0xfa>
    aae0:	201a      	movs	r0, #26
    aae2:	f7ff fbd9 	bl	a298 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf38>
    aae6:	e012      	b.n	ab0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17ae>
    aae8:	f891 0086 	ldrb.w	r0, [r1, #134]	; 0x86
    aaec:	2822      	cmp	r0, #34	; 0x22
    aaee:	d10e      	bne.n	ab0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17ae>
    aaf0:	f881 4086 	strb.w	r4, [r1, #134]	; 0x86
    aaf4:	f7fe fd68 	bl	95c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x268>
    aaf8:	68a8      	ldr	r0, [r5, #8]
    aafa:	f890 01be 	ldrb.w	r0, [r0, #446]	; 0x1be
    aafe:	2801      	cmp	r0, #1
    ab00:	d102      	bne.n	ab08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17a8>
    ab02:	2000      	movs	r0, #0
    ab04:	f7ff fbc8 	bl	a298 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf38>
    ab08:	68a8      	ldr	r0, [r5, #8]
    ab0a:	f880 41be 	strb.w	r4, [r0, #446]	; 0x1be
    ab0e:	4630      	mov	r0, r6
    ab10:	bd70      	pop	{r4, r5, r6, pc}
    ab12:	0000      	.short	0x0000
    ab14:	20000150 	.word	0x20000150
    ab18:	b570      	push	{r4, r5, r6, lr}
    ab1a:	4c2c      	ldr	r4, [pc, #176]	; (abcc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x186c>)
    ab1c:	68a0      	ldr	r0, [r4, #8]
    ab1e:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    ab22:	0789      	lsls	r1, r1, #30
    ab24:	d507      	bpl.n	ab36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17d6>
    ab26:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    ab2a:	2301      	movs	r3, #1
    ab2c:	2108      	movs	r1, #8
    ab2e:	3078      	adds	r0, #120	; 0x78
    ab30:	f003 fffb 	bl	eb2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ab34:	b1e8      	cbz	r0, ab72 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1812>
    ab36:	68a0      	ldr	r0, [r4, #8]
    ab38:	f890 00be 	ldrb.w	r0, [r0, #190]	; 0xbe
    ab3c:	0780      	lsls	r0, r0, #30
    ab3e:	d412      	bmi.n	ab66 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1806>
    ab40:	6920      	ldr	r0, [r4, #16]
    ab42:	f004 fa75 	bl	f030 <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>
    ab46:	68a1      	ldr	r1, [r4, #8]
    ab48:	f881 00bf 	strb.w	r0, [r1, #191]	; 0xbf
    ab4c:	6920      	ldr	r0, [r4, #16]
    ab4e:	f830 2f05 	ldrh.w	r2, [r0, #5]!
    ab52:	f8a1 20c0 	strh.w	r2, [r1, #192]	; 0xc0
    ab56:	8840      	ldrh	r0, [r0, #2]
    ab58:	f8a1 00c2 	strh.w	r0, [r1, #194]	; 0xc2
    ab5c:	f811 0fbe 	ldrb.w	r0, [r1, #190]!
    ab60:	f040 0002 	orr.w	r0, r0, #2
    ab64:	7008      	strb	r0, [r1, #0]
    ab66:	68a0      	ldr	r0, [r4, #8]
    ab68:	f890 10be 	ldrb.w	r1, [r0, #190]	; 0xbe
    ab6c:	07c9      	lsls	r1, r1, #31
    ab6e:	d002      	beq.n	ab76 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1816>
    ab70:	e010      	b.n	ab94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1834>
    ab72:	2001      	movs	r0, #1
    ab74:	bd70      	pop	{r4, r5, r6, pc}
    ab76:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    ab7a:	078a      	lsls	r2, r1, #30
    ab7c:	d504      	bpl.n	ab88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1828>
    ab7e:	f44f 7136 	mov.w	r1, #728	; 0x2d8
    ab82:	2031      	movs	r0, #49	; 0x31
    ab84:	f7fa faf4 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ab88:	f041 0102 	orr.w	r1, r1, #2
    ab8c:	f880 1087 	strb.w	r1, [r0, #135]	; 0x87
    ab90:	f7fe fd0e 	bl	95b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x250>
    ab94:	68a0      	ldr	r0, [r4, #8]
    ab96:	2500      	movs	r5, #0
    ab98:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    ab9c:	2906      	cmp	r1, #6
    ab9e:	d105      	bne.n	abac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x184c>
    aba0:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    aba4:	f880 50b6 	strb.w	r5, [r0, #182]	; 0xb6
    aba8:	f7fc fc18 	bl	73dc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    abac:	68a0      	ldr	r0, [r4, #8]
    abae:	f890 11c4 	ldrb.w	r1, [r0, #452]	; 0x1c4
    abb2:	b149      	cbz	r1, abc8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1868>
    abb4:	f880 51c4 	strb.w	r5, [r0, #452]	; 0x1c4
    abb8:	f7fc fc10 	bl	73dc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    abbc:	68a0      	ldr	r0, [r4, #8]
    abbe:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    abc2:	b909      	cbnz	r1, abc8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1868>
    abc4:	f880 50b6 	strb.w	r5, [r0, #182]	; 0xb6
    abc8:	2000      	movs	r0, #0
    abca:	bd70      	pop	{r4, r5, r6, pc}
    abcc:	20000150 	.word	0x20000150
    abd0:	b510      	push	{r4, lr}
    abd2:	4c20      	ldr	r4, [pc, #128]	; (ac54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18f4>)
    abd4:	68a3      	ldr	r3, [r4, #8]
    abd6:	f893 0102 	ldrb.w	r0, [r3, #258]	; 0x102
    abda:	2808      	cmp	r0, #8
    abdc:	d20f      	bcs.n	abfe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x189e>
    abde:	f100 0208 	add.w	r2, r0, #8
    abe2:	f1c0 0008 	rsb	r0, r0, #8
    abe6:	b2c1      	uxtb	r1, r0
    abe8:	1898      	adds	r0, r3, r2
    abea:	f500 7090 	add.w	r0, r0, #288	; 0x120
    abee:	f7fa fb4b 	bl	5288 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    abf2:	68a1      	ldr	r1, [r4, #8]
    abf4:	f891 2102 	ldrb.w	r2, [r1, #258]	; 0x102
    abf8:	4410      	add	r0, r2
    abfa:	f881 0102 	strb.w	r0, [r1, #258]	; 0x102
    abfe:	68a3      	ldr	r3, [r4, #8]
    ac00:	f893 0102 	ldrb.w	r0, [r3, #258]	; 0x102
    ac04:	3808      	subs	r0, #8
    ac06:	2804      	cmp	r0, #4
    ac08:	d20d      	bcs.n	ac26 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18c6>
    ac0a:	1d02      	adds	r2, r0, #4
    ac0c:	f1c0 0004 	rsb	r0, r0, #4
    ac10:	b2c1      	uxtb	r1, r0
    ac12:	1898      	adds	r0, r3, r2
    ac14:	30f0      	adds	r0, #240	; 0xf0
    ac16:	f7fa fb37 	bl	5288 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    ac1a:	68a1      	ldr	r1, [r4, #8]
    ac1c:	f891 2102 	ldrb.w	r2, [r1, #258]	; 0x102
    ac20:	4410      	add	r0, r2
    ac22:	f881 0102 	strb.w	r0, [r1, #258]	; 0x102
    ac26:	68a0      	ldr	r0, [r4, #8]
    ac28:	f890 1102 	ldrb.w	r1, [r0, #258]	; 0x102
    ac2c:	290c      	cmp	r1, #12
    ac2e:	d30f      	bcc.n	ac50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18f0>
    ac30:	d005      	beq.n	ac3e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18de>
    ac32:	f240 71b6 	movw	r1, #1974	; 0x7b6
    ac36:	f04f 0031 	mov.w	r0, #49	; 0x31
    ac3a:	f7fa fa99 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ac3e:	2100      	movs	r1, #0
    ac40:	f880 1102 	strb.w	r1, [r0, #258]	; 0x102
    ac44:	2101      	movs	r1, #1
    ac46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ac4a:	2004      	movs	r0, #4
    ac4c:	f7ff ba20 	b.w	a090 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd30>
    ac50:	bd10      	pop	{r4, pc}
    ac52:	0000      	.short	0x0000
    ac54:	20000150 	.word	0x20000150
    ac58:	4804      	ldr	r0, [pc, #16]	; (ac6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x190c>)
    ac5a:	2127      	movs	r1, #39	; 0x27
    ac5c:	6880      	ldr	r0, [r0, #8]
    ac5e:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    ac62:	2100      	movs	r1, #0
    ac64:	f880 119c 	strb.w	r1, [r0, #412]	; 0x19c
    ac68:	4770      	bx	lr
    ac6a:	0000      	.short	0x0000
    ac6c:	20000150 	.word	0x20000150
    ac70:	4809      	ldr	r0, [pc, #36]	; (ac98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1938>)
    ac72:	b510      	push	{r4, lr}
    ac74:	6880      	ldr	r0, [r0, #8]
    ac76:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    ac7a:	2914      	cmp	r1, #20
    ac7c:	d004      	beq.n	ac88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1928>
    ac7e:	f240 6191 	movw	r1, #1681	; 0x691
    ac82:	2031      	movs	r0, #49	; 0x31
    ac84:	f7fa fa74 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ac88:	2101      	movs	r1, #1
    ac8a:	f880 10bb 	strb.w	r1, [r0, #187]	; 0xbb
    ac8e:	2115      	movs	r1, #21
    ac90:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    ac94:	bd10      	pop	{r4, pc}
    ac96:	0000      	.short	0x0000
    ac98:	20000150 	.word	0x20000150
    ac9c:	b510      	push	{r4, lr}
    ac9e:	4c0a      	ldr	r4, [pc, #40]	; (acc8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1968>)
    aca0:	68a0      	ldr	r0, [r4, #8]
    aca2:	f890 0087 	ldrb.w	r0, [r0, #135]	; 0x87
    aca6:	07c0      	lsls	r0, r0, #31
    aca8:	d008      	beq.n	acbc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x195c>
    acaa:	f7fe fc8d 	bl	95c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x268>
    acae:	68a0      	ldr	r0, [r4, #8]
    acb0:	f810 1f87 	ldrb.w	r1, [r0, #135]!
    acb4:	f021 0101 	bic.w	r1, r1, #1
    acb8:	7001      	strb	r1, [r0, #0]
    acba:	bd10      	pop	{r4, pc}
    acbc:	f240 617c 	movw	r1, #1660	; 0x67c
    acc0:	2031      	movs	r0, #49	; 0x31
    acc2:	f7fa fa55 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    acc6:	0000      	.short	0x0000
    acc8:	20000150 	.word	0x20000150
    accc:	b510      	push	{r4, lr}
    acce:	4c0a      	ldr	r4, [pc, #40]	; (acf8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1998>)
    acd0:	2301      	movs	r3, #1
    acd2:	2100      	movs	r1, #0
    acd4:	68a0      	ldr	r0, [r4, #8]
    acd6:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    acda:	3078      	adds	r0, #120	; 0x78
    acdc:	f003 ff25 	bl	eb2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ace0:	b120      	cbz	r0, acec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x198c>
    ace2:	68a1      	ldr	r1, [r4, #8]
    ace4:	201c      	movs	r0, #28
    ace6:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    acea:	bd10      	pop	{r4, pc}
    acec:	f240 61ff 	movw	r1, #1791	; 0x6ff
    acf0:	2031      	movs	r0, #49	; 0x31
    acf2:	f7fa fa3d 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    acf6:	0000      	.short	0x0000
    acf8:	20000150 	.word	0x20000150
    acfc:	480a      	ldr	r0, [pc, #40]	; (ad28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19c8>)
    acfe:	b510      	push	{r4, lr}
    ad00:	6880      	ldr	r0, [r0, #8]
    ad02:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    ad06:	f3c1 1201 	ubfx	r2, r1, #4, #2
    ad0a:	2a01      	cmp	r2, #1
    ad0c:	d004      	beq.n	ad18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19b8>
    ad0e:	f240 7106 	movw	r1, #1798	; 0x706
    ad12:	2031      	movs	r0, #49	; 0x31
    ad14:	f7fa fa2c 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ad18:	f021 0110 	bic.w	r1, r1, #16
    ad1c:	f880 1087 	strb.w	r1, [r0, #135]	; 0x87
    ad20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ad24:	f7fe bc50 	b.w	95c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x268>
    ad28:	20000150 	.word	0x20000150
    ad2c:	b510      	push	{r4, lr}
    ad2e:	4c0a      	ldr	r4, [pc, #40]	; (ad58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19f8>)
    ad30:	2301      	movs	r3, #1
    ad32:	2100      	movs	r1, #0
    ad34:	68a0      	ldr	r0, [r4, #8]
    ad36:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    ad3a:	3078      	adds	r0, #120	; 0x78
    ad3c:	f003 fef5 	bl	eb2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ad40:	b120      	cbz	r0, ad4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19ec>
    ad42:	68a1      	ldr	r1, [r4, #8]
    ad44:	200e      	movs	r0, #14
    ad46:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    ad4a:	bd10      	pop	{r4, pc}
    ad4c:	f240 61f2 	movw	r1, #1778	; 0x6f2
    ad50:	2031      	movs	r0, #49	; 0x31
    ad52:	f7fa fa0d 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ad56:	0000      	.short	0x0000
    ad58:	20000150 	.word	0x20000150
    ad5c:	4804      	ldr	r0, [pc, #16]	; (ad70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a10>)
    ad5e:	6880      	ldr	r0, [r0, #8]
    ad60:	f810 1f87 	ldrb.w	r1, [r0, #135]!
    ad64:	f021 0104 	bic.w	r1, r1, #4
    ad68:	7001      	strb	r1, [r0, #0]
    ad6a:	f7fe bc2d 	b.w	95c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x268>
    ad6e:	0000      	.short	0x0000
    ad70:	20000150 	.word	0x20000150
    ad74:	4809      	ldr	r0, [pc, #36]	; (ad9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a3c>)
    ad76:	b510      	push	{r4, lr}
    ad78:	6880      	ldr	r0, [r0, #8]
    ad7a:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    ad7e:	2910      	cmp	r1, #16
    ad80:	d004      	beq.n	ad8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a2c>
    ad82:	f240 6189 	movw	r1, #1673	; 0x689
    ad86:	2031      	movs	r0, #49	; 0x31
    ad88:	f7fa f9f2 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ad8c:	2101      	movs	r1, #1
    ad8e:	f880 10bb 	strb.w	r1, [r0, #187]	; 0xbb
    ad92:	2111      	movs	r1, #17
    ad94:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    ad98:	bd10      	pop	{r4, pc}
    ad9a:	0000      	.short	0x0000
    ad9c:	20000150 	.word	0x20000150
    ada0:	b510      	push	{r4, lr}
    ada2:	4c0a      	ldr	r4, [pc, #40]	; (adcc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a6c>)
    ada4:	2301      	movs	r3, #1
    ada6:	2100      	movs	r1, #0
    ada8:	68a0      	ldr	r0, [r4, #8]
    adaa:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    adae:	3078      	adds	r0, #120	; 0x78
    adb0:	f003 febb 	bl	eb2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    adb4:	b120      	cbz	r0, adc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a60>
    adb6:	68a1      	ldr	r1, [r4, #8]
    adb8:	201f      	movs	r0, #31
    adba:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    adbe:	bd10      	pop	{r4, pc}
    adc0:	f240 7112 	movw	r1, #1810	; 0x712
    adc4:	2031      	movs	r0, #49	; 0x31
    adc6:	f7fa f9d3 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    adca:	0000      	.short	0x0000
    adcc:	20000150 	.word	0x20000150
    add0:	4808      	ldr	r0, [pc, #32]	; (adf4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a94>)
    add2:	b510      	push	{r4, lr}
    add4:	6880      	ldr	r0, [r0, #8]
    add6:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    adda:	2921      	cmp	r1, #33	; 0x21
    addc:	d005      	beq.n	adea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a8a>
    adde:	b121      	cbz	r1, adea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a8a>
    ade0:	f240 7119 	movw	r1, #1817	; 0x719
    ade4:	2031      	movs	r0, #49	; 0x31
    ade6:	f7fa f9c3 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    adea:	2122      	movs	r1, #34	; 0x22
    adec:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    adf0:	bd10      	pop	{r4, pc}
    adf2:	0000      	.short	0x0000
    adf4:	20000150 	.word	0x20000150
    adf8:	4807      	ldr	r0, [pc, #28]	; (ae18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ab8>)
    adfa:	b510      	push	{r4, lr}
    adfc:	6880      	ldr	r0, [r0, #8]
    adfe:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    ae02:	2915      	cmp	r1, #21
    ae04:	d004      	beq.n	ae10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ab0>
    ae06:	f240 619e 	movw	r1, #1694	; 0x69e
    ae0a:	2031      	movs	r0, #49	; 0x31
    ae0c:	f7fa f9b0 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ae10:	2119      	movs	r1, #25
    ae12:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    ae16:	bd10      	pop	{r4, pc}
    ae18:	20000150 	.word	0x20000150
    ae1c:	b510      	push	{r4, lr}
    ae1e:	4c0a      	ldr	r4, [pc, #40]	; (ae48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ae8>)
    ae20:	2301      	movs	r3, #1
    ae22:	2100      	movs	r1, #0
    ae24:	68a0      	ldr	r0, [r4, #8]
    ae26:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    ae2a:	3078      	adds	r0, #120	; 0x78
    ae2c:	f003 fe7d 	bl	eb2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ae30:	b120      	cbz	r0, ae3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1adc>
    ae32:	68a1      	ldr	r1, [r4, #8]
    ae34:	2004      	movs	r0, #4
    ae36:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    ae3a:	bd10      	pop	{r4, pc}
    ae3c:	f240 6183 	movw	r1, #1667	; 0x683
    ae40:	2031      	movs	r0, #49	; 0x31
    ae42:	f7fa f995 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ae46:	0000      	.short	0x0000
    ae48:	20000150 	.word	0x20000150
    ae4c:	4807      	ldr	r0, [pc, #28]	; (ae6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b0c>)
    ae4e:	b510      	push	{r4, lr}
    ae50:	6880      	ldr	r0, [r0, #8]
    ae52:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    ae56:	2915      	cmp	r1, #21
    ae58:	d004      	beq.n	ae64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b04>
    ae5a:	f44f 61d3 	mov.w	r1, #1688	; 0x698
    ae5e:	2031      	movs	r0, #49	; 0x31
    ae60:	f7fa f986 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ae64:	2117      	movs	r1, #23
    ae66:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    ae6a:	bd10      	pop	{r4, pc}
    ae6c:	20000150 	.word	0x20000150
    ae70:	b570      	push	{r4, r5, r6, lr}
    ae72:	4d1b      	ldr	r5, [pc, #108]	; (aee0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b80>)
    ae74:	68a8      	ldr	r0, [r5, #8]
    ae76:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    ae7a:	291b      	cmp	r1, #27
    ae7c:	d002      	beq.n	ae84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b24>
    ae7e:	f44f 61d7 	mov.w	r1, #1720	; 0x6b8
    ae82:	e007      	b.n	ae94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b34>
    ae84:	2400      	movs	r4, #0
    ae86:	f880 40bb 	strb.w	r4, [r0, #187]	; 0xbb
    ae8a:	f890 11d4 	ldrb.w	r1, [r0, #468]	; 0x1d4
    ae8e:	b121      	cbz	r1, ae9a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b3a>
    ae90:	f240 61bc 	movw	r1, #1724	; 0x6bc
    ae94:	2031      	movs	r0, #49	; 0x31
    ae96:	f7fa f96b 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ae9a:	f890 10bc 	ldrb.w	r1, [r0, #188]	; 0xbc
    ae9e:	b141      	cbz	r1, aeb2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b52>
    aea0:	f880 40bc 	strb.w	r4, [r0, #188]	; 0xbc
    aea4:	8801      	ldrh	r1, [r0, #0]
    aea6:	f8a0 11d8 	strh.w	r1, [r0, #472]	; 0x1d8
    aeaa:	f880 41d6 	strb.w	r4, [r0, #470]	; 0x1d6
    aeae:	210c      	movs	r1, #12
    aeb0:	e008      	b.n	aec4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b64>
    aeb2:	8801      	ldrh	r1, [r0, #0]
    aeb4:	f8a0 11d8 	strh.w	r1, [r0, #472]	; 0x1d8
    aeb8:	f880 41d6 	strb.w	r4, [r0, #470]	; 0x1d6
    aebc:	2101      	movs	r1, #1
    aebe:	f880 11da 	strb.w	r1, [r0, #474]	; 0x1da
    aec2:	210b      	movs	r1, #11
    aec4:	f880 11d4 	strb.w	r1, [r0, #468]	; 0x1d4
    aec8:	8800      	ldrh	r0, [r0, #0]
    aeca:	f7fa fd6b 	bl	59a4 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    aece:	f003 fa60 	bl	e392 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    aed2:	f7fc fa83 	bl	73dc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    aed6:	68a8      	ldr	r0, [r5, #8]
    aed8:	f880 4086 	strb.w	r4, [r0, #134]	; 0x86
    aedc:	bd70      	pop	{r4, r5, r6, pc}
    aede:	0000      	.short	0x0000
    aee0:	20000150 	.word	0x20000150
    aee4:	b510      	push	{r4, lr}
    aee6:	4c08      	ldr	r4, [pc, #32]	; (af08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba8>)
    aee8:	2301      	movs	r3, #1
    aeea:	4619      	mov	r1, r3
    aeec:	68a0      	ldr	r0, [r4, #8]
    aeee:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    aef2:	3078      	adds	r0, #120	; 0x78
    aef4:	f003 fe19 	bl	eb2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    aef8:	2800      	cmp	r0, #0
    aefa:	d103      	bne.n	af04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba4>
    aefc:	68a1      	ldr	r1, [r4, #8]
    aefe:	2008      	movs	r0, #8
    af00:	f881 0088 	strb.w	r0, [r1, #136]	; 0x88
    af04:	bd10      	pop	{r4, pc}
    af06:	0000      	.short	0x0000
    af08:	20000150 	.word	0x20000150
    af0c:	4814      	ldr	r0, [pc, #80]	; (af60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c00>)
    af0e:	b510      	push	{r4, lr}
    af10:	68c1      	ldr	r1, [r0, #12]
    af12:	6880      	ldr	r0, [r0, #8]
    af14:	7909      	ldrb	r1, [r1, #4]
    af16:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    af1a:	2a0a      	cmp	r2, #10
    af1c:	d109      	bne.n	af32 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bd2>
    af1e:	f890 20fa 	ldrb.w	r2, [r0, #250]	; 0xfa
    af22:	428a      	cmp	r2, r1
    af24:	d105      	bne.n	af32 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bd2>
    af26:	2100      	movs	r1, #0
    af28:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    af2c:	f880 10b6 	strb.w	r1, [r0, #182]	; 0xb6
    af30:	bd10      	pop	{r4, pc}
    af32:	f890 2087 	ldrb.w	r2, [r0, #135]	; 0x87
    af36:	0713      	lsls	r3, r2, #28
    af38:	d507      	bpl.n	af4a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bea>
    af3a:	f022 0108 	bic.w	r1, r2, #8
    af3e:	f880 1087 	strb.w	r1, [r0, #135]	; 0x87
    af42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    af46:	f7fe bb3f 	b.w	95c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x268>
    af4a:	29ff      	cmp	r1, #255	; 0xff
    af4c:	d004      	beq.n	af58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bf8>
    af4e:	f240 6176 	movw	r1, #1654	; 0x676
    af52:	2031      	movs	r0, #49	; 0x31
    af54:	f7fa f90c 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    af58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    af5c:	f7ff be7c 	b.w	ac58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18f8>
    af60:	20000150 	.word	0x20000150
    af64:	b510      	push	{r4, lr}
    af66:	4c15      	ldr	r4, [pc, #84]	; (afbc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c5c>)
    af68:	68a0      	ldr	r0, [r4, #8]
    af6a:	f890 10be 	ldrb.w	r1, [r0, #190]	; 0xbe
    af6e:	0789      	lsls	r1, r1, #30
    af70:	d411      	bmi.n	af96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c36>
    af72:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    af76:	2301      	movs	r3, #1
    af78:	2100      	movs	r1, #0
    af7a:	3078      	adds	r0, #120	; 0x78
    af7c:	f003 fdd5 	bl	eb2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    af80:	b120      	cbz	r0, af8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c2c>
    af82:	68a1      	ldr	r1, [r4, #8]
    af84:	2006      	movs	r0, #6
    af86:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    af8a:	e009      	b.n	afa0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c40>
    af8c:	f240 61de 	movw	r1, #1758	; 0x6de
    af90:	2031      	movs	r0, #49	; 0x31
    af92:	f7fa f8ed 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    af96:	2100      	movs	r1, #0
    af98:	f880 10b6 	strb.w	r1, [r0, #182]	; 0xb6
    af9c:	f880 11c4 	strb.w	r1, [r0, #452]	; 0x1c4
    afa0:	68a0      	ldr	r0, [r4, #8]
    afa2:	f890 0087 	ldrb.w	r0, [r0, #135]	; 0x87
    afa6:	0780      	lsls	r0, r0, #30
    afa8:	d507      	bpl.n	afba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c5a>
    afaa:	f7fe fb0d 	bl	95c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x268>
    afae:	68a0      	ldr	r0, [r4, #8]
    afb0:	f810 1f87 	ldrb.w	r1, [r0, #135]!
    afb4:	f021 0102 	bic.w	r1, r1, #2
    afb8:	7001      	strb	r1, [r0, #0]
    afba:	bd10      	pop	{r4, pc}
    afbc:	20000150 	.word	0x20000150
    afc0:	4808      	ldr	r0, [pc, #32]	; (afe4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c84>)
    afc2:	b510      	push	{r4, lr}
    afc4:	6880      	ldr	r0, [r0, #8]
    afc6:	f890 108b 	ldrb.w	r1, [r0, #139]	; 0x8b
    afca:	b941      	cbnz	r1, afde <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c7e>
    afcc:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    afd0:	2301      	movs	r3, #1
    afd2:	2106      	movs	r1, #6
    afd4:	3078      	adds	r0, #120	; 0x78
    afd6:	f003 fda8 	bl	eb2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    afda:	2800      	cmp	r0, #0
    afdc:	d000      	beq.n	afe0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c80>
    afde:	2001      	movs	r0, #1
    afe0:	bd10      	pop	{r4, pc}
    afe2:	0000      	.short	0x0000
    afe4:	20000150 	.word	0x20000150
    afe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    afea:	4c5a      	ldr	r4, [pc, #360]	; (b154 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1df4>)
    afec:	4606      	mov	r6, r0
    afee:	4615      	mov	r5, r2
    aff0:	68a0      	ldr	r0, [r4, #8]
    aff2:	2200      	movs	r2, #0
    aff4:	b111      	cbz	r1, affc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c9c>
    aff6:	f8a0 211e 	strh.w	r2, [r0, #286]	; 0x11e
    affa:	e006      	b.n	b00a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1caa>
    affc:	f8b0 111e 	ldrh.w	r1, [r0, #286]	; 0x11e
    b000:	f8b0 210e 	ldrh.w	r2, [r0, #270]	; 0x10e
    b004:	4411      	add	r1, r2
    b006:	f8a0 111e 	strh.w	r1, [r0, #286]	; 0x11e
    b00a:	f890 1188 	ldrb.w	r1, [r0, #392]	; 0x188
    b00e:	f88d 1000 	strb.w	r1, [sp]
    b012:	9900      	ldr	r1, [sp, #0]
    b014:	9100      	str	r1, [sp, #0]
    b016:	f89d 1000 	ldrb.w	r1, [sp]
    b01a:	b939      	cbnz	r1, b02c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ccc>
    b01c:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    b020:	2301      	movs	r3, #1
    b022:	4619      	mov	r1, r3
    b024:	3078      	adds	r0, #120	; 0x78
    b026:	f003 fd80 	bl	eb2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b02a:	b130      	cbz	r0, b03a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cda>
    b02c:	68a0      	ldr	r0, [r4, #8]
    b02e:	f830 1fb0 	ldrh.w	r1, [r0, #176]!
    b032:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
    b036:	4411      	add	r1, r2
    b038:	8001      	strh	r1, [r0, #0]
    b03a:	68a0      	ldr	r0, [r4, #8]
    b03c:	f890 20b6 	ldrb.w	r2, [r0, #182]	; 0xb6
    b040:	b132      	cbz	r2, b050 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cf0>
    b042:	f8b0 10b2 	ldrh.w	r1, [r0, #178]	; 0xb2
    b046:	f8b0 310e 	ldrh.w	r3, [r0, #270]	; 0x10e
    b04a:	4419      	add	r1, r3
    b04c:	f8a0 10b2 	strh.w	r1, [r0, #178]	; 0xb2
    b050:	f990 70ba 	ldrsb.w	r7, [r0, #186]	; 0xba
    b054:	2f00      	cmp	r7, #0
    b056:	dd06      	ble.n	b066 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d06>
    b058:	f8b0 10b8 	ldrh.w	r1, [r0, #184]	; 0xb8
    b05c:	f8b0 310e 	ldrh.w	r3, [r0, #270]	; 0x10e
    b060:	4419      	add	r1, r3
    b062:	f8a0 10b8 	strh.w	r1, [r0, #184]	; 0xb8
    b066:	233d      	movs	r3, #61	; 0x3d
    b068:	21ff      	movs	r1, #255	; 0xff
    b06a:	b116      	cbz	r6, b072 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d12>
    b06c:	f880 309d 	strb.w	r3, [r0, #157]	; 0x9d
    b070:	e012      	b.n	b098 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d38>
    b072:	7824      	ldrb	r4, [r4, #0]
    b074:	2c02      	cmp	r4, #2
    b076:	d009      	beq.n	b08c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d2c>
    b078:	2c01      	cmp	r4, #1
    b07a:	d011      	beq.n	b0a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d40>
    b07c:	b33d      	cbz	r5, b0ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d6e>
    b07e:	f100 029c 	add.w	r2, r0, #156	; 0x9c
    b082:	7011      	strb	r1, [r2, #0]
    b084:	06e9      	lsls	r1, r5, #27
    b086:	d50e      	bpl.n	b0a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d46>
    b088:	211e      	movs	r1, #30
    b08a:	e018      	b.n	b0be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d5e>
    b08c:	f890 20fe 	ldrb.w	r2, [r0, #254]	; 0xfe
    b090:	2a06      	cmp	r2, #6
    b092:	d044      	beq.n	b11e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dbe>
    b094:	2216      	movs	r2, #22
    b096:	e042      	b.n	b11e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dbe>
    b098:	f100 029c 	add.w	r2, r0, #156	; 0x9c
    b09c:	7011      	strb	r1, [r2, #0]
    b09e:	e047      	b.n	b130 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dd0>
    b0a0:	f890 218a 	ldrb.w	r2, [r0, #394]	; 0x18a
    b0a4:	e03b      	b.n	b11e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dbe>
    b0a6:	0729      	lsls	r1, r5, #28
    b0a8:	d502      	bpl.n	b0b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d50>
    b0aa:	f880 309d 	strb.w	r3, [r0, #157]	; 0x9d
    b0ae:	e03f      	b.n	b130 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dd0>
    b0b0:	06a9      	lsls	r1, r5, #26
    b0b2:	d501      	bpl.n	b0b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d58>
    b0b4:	2123      	movs	r1, #35	; 0x23
    b0b6:	e002      	b.n	b0be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d5e>
    b0b8:	07a9      	lsls	r1, r5, #30
    b0ba:	d003      	beq.n	b0c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d64>
    b0bc:	212a      	movs	r1, #42	; 0x2a
    b0be:	f880 109d 	strb.w	r1, [r0, #157]	; 0x9d
    b0c2:	e035      	b.n	b130 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dd0>
    b0c4:	f640 41b1 	movw	r1, #3249	; 0xcb1
    b0c8:	2031      	movs	r0, #49	; 0x31
    b0ca:	f7fa f851 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b0ce:	b12a      	cbz	r2, b0dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d7c>
    b0d0:	f8b0 20b2 	ldrh.w	r2, [r0, #178]	; 0xb2
    b0d4:	f8b0 30b4 	ldrh.w	r3, [r0, #180]	; 0xb4
    b0d8:	429a      	cmp	r2, r3
    b0da:	d216      	bcs.n	b10a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1daa>
    b0dc:	2f00      	cmp	r7, #0
    b0de:	dd05      	ble.n	b0ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d8c>
    b0e0:	f8b0 20b8 	ldrh.w	r2, [r0, #184]	; 0xb8
    b0e4:	f8b0 30b4 	ldrh.w	r3, [r0, #180]	; 0xb4
    b0e8:	429a      	cmp	r2, r3
    b0ea:	d20e      	bcs.n	b10a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1daa>
    b0ec:	f8b0 30b0 	ldrh.w	r3, [r0, #176]	; 0xb0
    b0f0:	f8b0 20ae 	ldrh.w	r2, [r0, #174]	; 0xae
    b0f4:	4293      	cmp	r3, r2
    b0f6:	d30a      	bcc.n	b10e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dae>
    b0f8:	f890 3188 	ldrb.w	r3, [r0, #392]	; 0x188
    b0fc:	f88d 3000 	strb.w	r3, [sp]
    b100:	9b00      	ldr	r3, [sp, #0]
    b102:	9300      	str	r3, [sp, #0]
    b104:	f89d 3000 	ldrb.w	r3, [sp]
    b108:	b10b      	cbz	r3, b10e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dae>
    b10a:	2222      	movs	r2, #34	; 0x22
    b10c:	e007      	b.n	b11e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dbe>
    b10e:	f890 3089 	ldrb.w	r3, [r0, #137]	; 0x89
    b112:	b13b      	cbz	r3, b124 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dc4>
    b114:	f8b0 30ac 	ldrh.w	r3, [r0, #172]	; 0xac
    b118:	4293      	cmp	r3, r2
    b11a:	d309      	bcc.n	b130 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dd0>
    b11c:	2208      	movs	r2, #8
    b11e:	f880 209d 	strb.w	r2, [r0, #157]	; 0x9d
    b122:	e7b9      	b.n	b098 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d38>
    b124:	f8b0 20ac 	ldrh.w	r2, [r0, #172]	; 0xac
    b128:	2a06      	cmp	r2, #6
    b12a:	d301      	bcc.n	b130 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dd0>
    b12c:	223e      	movs	r2, #62	; 0x3e
    b12e:	e7f6      	b.n	b11e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dbe>
    b130:	f890 109c 	ldrb.w	r1, [r0, #156]	; 0x9c
    b134:	f88d 1000 	strb.w	r1, [sp]
    b138:	9900      	ldr	r1, [sp, #0]
    b13a:	9100      	str	r1, [sp, #0]
    b13c:	f89d 1000 	ldrb.w	r1, [sp]
    b140:	b119      	cbz	r1, b14a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dea>
    b142:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    b146:	f005 b821 	b.w	1018c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    b14a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    b14e:	2100      	movs	r1, #0
    b150:	f7fd bb1c 	b.w	878c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    b154:	20000150 	.word	0x20000150
    b158:	b570      	push	{r4, r5, r6, lr}
    b15a:	4d2d      	ldr	r5, [pc, #180]	; (b210 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1eb0>)
    b15c:	68a8      	ldr	r0, [r5, #8]
    b15e:	f890 1089 	ldrb.w	r1, [r0, #137]	; 0x89
    b162:	b151      	cbz	r1, b17a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e1a>
    b164:	2901      	cmp	r1, #1
    b166:	d008      	beq.n	b17a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e1a>
    b168:	2902      	cmp	r1, #2
    b16a:	d009      	beq.n	b180 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e20>
    b16c:	2903      	cmp	r1, #3
    b16e:	d007      	beq.n	b180 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e20>
    b170:	f640 216d 	movw	r1, #2669	; 0xa6d
    b174:	2031      	movs	r0, #49	; 0x31
    b176:	f7f9 fffb 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b17a:	f8b0 110c 	ldrh.w	r1, [r0, #268]	; 0x10c
    b17e:	e035      	b.n	b1ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e8c>
    b180:	f890 1088 	ldrb.w	r1, [r0, #136]	; 0x88
    b184:	2908      	cmp	r1, #8
    b186:	d034      	beq.n	b1f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e92>
    b188:	f8b0 10ac 	ldrh.w	r1, [r0, #172]	; 0xac
    b18c:	f8b0 20ae 	ldrh.w	r2, [r0, #174]	; 0xae
    b190:	2400      	movs	r4, #0
    b192:	1c8b      	adds	r3, r1, #2
    b194:	429a      	cmp	r2, r3
    b196:	d306      	bcc.n	b1a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e46>
    b198:	1a51      	subs	r1, r2, r1
    b19a:	1e89      	subs	r1, r1, #2
    b19c:	040c      	lsls	r4, r1, #16
    b19e:	0c24      	lsrs	r4, r4, #16
    b1a0:	d001      	beq.n	b1a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e46>
    b1a2:	1e64      	subs	r4, r4, #1
    b1a4:	b2a4      	uxth	r4, r4
    b1a6:	f890 10aa 	ldrb.w	r1, [r0, #170]	; 0xaa
    b1aa:	b139      	cbz	r1, b1bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e5c>
    b1ac:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b1b0:	2301      	movs	r3, #1
    b1b2:	2109      	movs	r1, #9
    b1b4:	3078      	adds	r0, #120	; 0x78
    b1b6:	f003 fcb8 	bl	eb2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b1ba:	b330      	cbz	r0, b20a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1eaa>
    b1bc:	f7ff ff00 	bl	afc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c60>
    b1c0:	b168      	cbz	r0, b1de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e7e>
    b1c2:	68a9      	ldr	r1, [r5, #8]
    b1c4:	2000      	movs	r0, #0
    b1c6:	31a0      	adds	r1, #160	; 0xa0
    b1c8:	c906      	ldmia	r1, {r1, r2}
    b1ca:	1c8b      	adds	r3, r1, #2
    b1cc:	429a      	cmp	r2, r3
    b1ce:	d303      	bcc.n	b1d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e78>
    b1d0:	1a50      	subs	r0, r2, r1
    b1d2:	1e80      	subs	r0, r0, #2
    b1d4:	d000      	beq.n	b1d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e78>
    b1d6:	1e40      	subs	r0, r0, #1
    b1d8:	42a0      	cmp	r0, r4
    b1da:	d200      	bcs.n	b1de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e7e>
    b1dc:	b284      	uxth	r4, r0
    b1de:	b10c      	cbz	r4, b1e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e84>
    b1e0:	1e64      	subs	r4, r4, #1
    b1e2:	b2a4      	uxth	r4, r4
    b1e4:	68a8      	ldr	r0, [r5, #8]
    b1e6:	f8b0 110c 	ldrh.w	r1, [r0, #268]	; 0x10c
    b1ea:	4421      	add	r1, r4
    b1ec:	f8a0 1108 	strh.w	r1, [r0, #264]	; 0x108
    b1f0:	bd70      	pop	{r4, r5, r6, pc}
    b1f2:	f8b0 10ac 	ldrh.w	r1, [r0, #172]	; 0xac
    b1f6:	2903      	cmp	r1, #3
    b1f8:	d3bf      	bcc.n	b17a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e1a>
    b1fa:	f830 1f7c 	ldrh.w	r1, [r0, #124]!
    b1fe:	8e42      	ldrh	r2, [r0, #50]	; 0x32
    b200:	4411      	add	r1, r2
    b202:	1c49      	adds	r1, r1, #1
    b204:	f8a0 108c 	strh.w	r1, [r0, #140]	; 0x8c
    b208:	bd70      	pop	{r4, r5, r6, pc}
    b20a:	2400      	movs	r4, #0
    b20c:	e7ea      	b.n	b1e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e84>
    b20e:	0000      	.short	0x0000
    b210:	20000150 	.word	0x20000150

0000b214 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    b214:	4903      	ldr	r1, [pc, #12]	; (b224 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    b216:	884a      	ldrh	r2, [r1, #2]
    b218:	8002      	strh	r2, [r0, #0]
    b21a:	7809      	ldrb	r1, [r1, #0]
    b21c:	7081      	strb	r1, [r0, #2]
    b21e:	2000      	movs	r0, #0
    b220:	4770      	bx	lr
    b222:	0000      	.short	0x0000
    b224:	20000f94 	.word	0x20000f94

0000b228 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    b228:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    b22a:	460c      	mov	r4, r1
    b22c:	4605      	mov	r5, r0
    b22e:	8800      	ldrh	r0, [r0, #0]
    b230:	4669      	mov	r1, sp
    b232:	f003 fc50 	bl	ead6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    b236:	2200      	movs	r2, #0
    b238:	b128      	cbz	r0, b246 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x1e>
    b23a:	f8c4 2002 	str.w	r2, [r4, #2]
    b23e:	71a2      	strb	r2, [r4, #6]
    b240:	8022      	strh	r2, [r4, #0]
    b242:	2002      	movs	r0, #2
    b244:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    b246:	9901      	ldr	r1, [sp, #4]
    b248:	f111 0178 	adds.w	r1, r1, #120	; 0x78
    b24c:	f881 2054 	strb.w	r2, [r1, #84]	; 0x54
    b250:	f8d1 0016 	ldr.w	r0, [r1, #22]
    b254:	f8c4 0002 	str.w	r0, [r4, #2]
    b258:	7e88      	ldrb	r0, [r1, #26]
    b25a:	71a0      	strb	r0, [r4, #6]
    b25c:	8828      	ldrh	r0, [r5, #0]
    b25e:	8020      	strh	r0, [r4, #0]
    b260:	f891 0054 	ldrb.w	r0, [r1, #84]	; 0x54
    b264:	f88d 0008 	strb.w	r0, [sp, #8]
    b268:	9802      	ldr	r0, [sp, #8]
    b26a:	9002      	str	r0, [sp, #8]
    b26c:	f89d 0008 	ldrb.w	r0, [sp, #8]
    b270:	2800      	cmp	r0, #0
    b272:	d1eb      	bne.n	b24c <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x24>
    b274:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

0000b278 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    b278:	b510      	push	{r4, lr}
    b27a:	4604      	mov	r4, r0
    b27c:	f005 feb6 	bl	10fec <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    b280:	b130      	cbz	r0, b290 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x18>
    b282:	4804      	ldr	r0, [pc, #16]	; (b294 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x1c>)
    b284:	8881      	ldrh	r1, [r0, #4]
    b286:	8021      	strh	r1, [r4, #0]
    b288:	88c0      	ldrh	r0, [r0, #6]
    b28a:	8060      	strh	r0, [r4, #2]
    b28c:	2000      	movs	r0, #0
    b28e:	bd10      	pop	{r4, pc}
    b290:	2001      	movs	r0, #1
    b292:	bd10      	pop	{r4, pc}
    b294:	20000238 	.word	0x20000238

0000b298 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    b298:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    b29a:	4605      	mov	r5, r0
    b29c:	f005 fec8 	bl	11030 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x344>
    b2a0:	b310      	cbz	r0, b2e8 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x50>
    b2a2:	2400      	movs	r4, #0
    b2a4:	a802      	add	r0, sp, #8
    b2a6:	f88d 4004 	strb.w	r4, [sp, #4]
    b2aa:	f88d 4008 	strb.w	r4, [sp, #8]
    b2ae:	9000      	str	r0, [sp, #0]
    b2b0:	78aa      	ldrb	r2, [r5, #2]
    b2b2:	7869      	ldrb	r1, [r5, #1]
    b2b4:	7828      	ldrb	r0, [r5, #0]
    b2b6:	ab01      	add	r3, sp, #4
    b2b8:	f005 ff8b 	bl	111d2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4e6>
    b2bc:	2800      	cmp	r0, #0
    b2be:	d112      	bne.n	b2e6 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x4e>
    b2c0:	f89d 0004 	ldrb.w	r0, [sp, #4]
    b2c4:	f005 fdfa 	bl	10ebc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d0>
    b2c8:	b180      	cbz	r0, b2ec <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x54>
    b2ca:	f89d 0008 	ldrb.w	r0, [sp, #8]
    b2ce:	f005 fdf5 	bl	10ebc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d0>
    b2d2:	b158      	cbz	r0, b2ec <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x54>
    b2d4:	4806      	ldr	r0, [pc, #24]	; (b2f0 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>)
    b2d6:	f89d 1004 	ldrb.w	r1, [sp, #4]
    b2da:	7381      	strb	r1, [r0, #14]
    b2dc:	f89d 1008 	ldrb.w	r1, [sp, #8]
    b2e0:	73c1      	strb	r1, [r0, #15]
    b2e2:	8204      	strh	r4, [r0, #16]
    b2e4:	2000      	movs	r0, #0
    b2e6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    b2e8:	2001      	movs	r0, #1
    b2ea:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    b2ec:	2011      	movs	r0, #17
    b2ee:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    b2f0:	20000f94 	.word	0x20000f94

0000b2f4 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    b2f4:	7801      	ldrb	r1, [r0, #0]
    b2f6:	b171      	cbz	r1, b316 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    b2f8:	7841      	ldrb	r1, [r0, #1]
    b2fa:	b161      	cbz	r1, b316 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    b2fc:	8841      	ldrh	r1, [r0, #2]
    b2fe:	291b      	cmp	r1, #27
    b300:	d309      	bcc.n	b316 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    b302:	8881      	ldrh	r1, [r0, #4]
    b304:	291b      	cmp	r1, #27
    b306:	d306      	bcc.n	b316 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    b308:	4904      	ldr	r1, [pc, #16]	; (b31c <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    b30a:	6802      	ldr	r2, [r0, #0]
    b30c:	600a      	str	r2, [r1, #0]
    b30e:	8880      	ldrh	r0, [r0, #4]
    b310:	8088      	strh	r0, [r1, #4]
    b312:	2000      	movs	r0, #0
    b314:	4770      	bx	lr
    b316:	2012      	movs	r0, #18
    b318:	4770      	bx	lr
    b31a:	0000      	.short	0x0000
    b31c:	20000f94 	.word	0x20000f94

0000b320 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    b320:	6800      	ldr	r0, [r0, #0]
    b322:	f240 41e2 	movw	r1, #1250	; 0x4e2
    b326:	4288      	cmp	r0, r1
    b328:	d303      	bcc.n	b332 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    b32a:	4903      	ldr	r1, [pc, #12]	; (b338 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    b32c:	6088      	str	r0, [r1, #8]
    b32e:	2000      	movs	r0, #0
    b330:	4770      	bx	lr
    b332:	2012      	movs	r0, #18
    b334:	4770      	bx	lr
    b336:	0000      	.short	0x0000
    b338:	20000f94 	.word	0x20000f94

0000b33c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    b33c:	4a03      	ldr	r2, [pc, #12]	; (b34c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    b33e:	e9d2 1200 	ldrd	r1, r2, [r2]
    b342:	6001      	str	r1, [r0, #0]
    b344:	6042      	str	r2, [r0, #4]
    b346:	2000      	movs	r0, #0
    b348:	4770      	bx	lr
    b34a:	0000      	.short	0x0000
    b34c:	0000b678 	.word	0x0000b678

0000b350 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>:
    b350:	b510      	push	{r4, lr}
    b352:	2005      	movs	r0, #5
    b354:	f000 fa14 	bl	b780 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    b358:	f7fd fe20 	bl	8f9c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>
    b35c:	4902      	ldr	r1, [pc, #8]	; (b368 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x18>)
    b35e:	4801      	ldr	r0, [pc, #4]	; (b364 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x14>)
    b360:	6008      	str	r0, [r1, #0]
    b362:	bd10      	pop	{r4, pc}
    b364:	0000b3c1 	.word	0x0000b3c1
    b368:	20000234 	.word	0x20000234

0000b36c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
    b36c:	b510      	push	{r4, lr}
    b36e:	f003 fb06 	bl	e97e <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    b372:	f7fb fbbd 	bl	6af0 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    b376:	f000 fa25 	bl	b7c4 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
    b37a:	f003 ffb3 	bl	f2e4 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
    b37e:	480e      	ldr	r0, [pc, #56]	; (b3b8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4c>)
    b380:	f64f 71ff 	movw	r1, #65535	; 0xffff
    b384:	4b0d      	ldr	r3, [pc, #52]	; (b3bc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x50>)
    b386:	8281      	strh	r1, [r0, #20]
    b388:	2100      	movs	r1, #0
    b38a:	7581      	strb	r1, [r0, #22]
    b38c:	8301      	strh	r1, [r0, #24]
    b38e:	221b      	movs	r2, #27
    b390:	801a      	strh	r2, [r3, #0]
    b392:	f44f 74a4 	mov.w	r4, #328	; 0x148
    b396:	805c      	strh	r4, [r3, #2]
    b398:	809a      	strh	r2, [r3, #4]
    b39a:	80dc      	strh	r4, [r3, #6]
    b39c:	7381      	strb	r1, [r0, #14]
    b39e:	73c1      	strb	r1, [r0, #15]
    b3a0:	2303      	movs	r3, #3
    b3a2:	7003      	strb	r3, [r0, #0]
    b3a4:	2302      	movs	r3, #2
    b3a6:	7043      	strb	r3, [r0, #1]
    b3a8:	8042      	strh	r2, [r0, #2]
    b3aa:	8082      	strh	r2, [r0, #4]
    b3ac:	f640 62a6 	movw	r2, #3750	; 0xea6
    b3b0:	6082      	str	r2, [r0, #8]
    b3b2:	7481      	strb	r1, [r0, #18]
    b3b4:	7301      	strb	r1, [r0, #12]
    b3b6:	bd10      	pop	{r4, pc}
    b3b8:	20000f94 	.word	0x20000f94
    b3bc:	20000238 	.word	0x20000238
    b3c0:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b3c4:	4692      	mov	sl, r2
    b3c6:	460f      	mov	r7, r1
    b3c8:	4681      	mov	r9, r0
    b3ca:	f005 fe0f 	bl	10fec <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    b3ce:	2800      	cmp	r0, #0
    b3d0:	d063      	beq.n	b49a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x12e>
    b3d2:	4933      	ldr	r1, [pc, #204]	; (b4a0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x134>)
    b3d4:	f8b9 2058 	ldrh.w	r2, [r9, #88]	; 0x58
    b3d8:	f8b9 6056 	ldrh.w	r6, [r9, #86]	; 0x56
    b3dc:	8808      	ldrh	r0, [r1, #0]
    b3de:	4290      	cmp	r0, r2
    b3e0:	d300      	bcc.n	b3e4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x78>
    b3e2:	4610      	mov	r0, r2
    b3e4:	4680      	mov	r8, r0
    b3e6:	8888      	ldrh	r0, [r1, #4]
    b3e8:	42b0      	cmp	r0, r6
    b3ea:	d200      	bcs.n	b3ee <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x82>
    b3ec:	4606      	mov	r6, r0
    b3ee:	884c      	ldrh	r4, [r1, #2]
    b3f0:	f640 0048 	movw	r0, #2120	; 0x848
    b3f4:	4284      	cmp	r4, r0
    b3f6:	d300      	bcc.n	b3fa <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x8e>
    b3f8:	4604      	mov	r4, r0
    b3fa:	88cd      	ldrh	r5, [r1, #6]
    b3fc:	4285      	cmp	r5, r0
    b3fe:	d300      	bcc.n	b402 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x96>
    b400:	4605      	mov	r5, r0
    b402:	4284      	cmp	r4, r0
    b404:	d300      	bcc.n	b408 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9c>
    b406:	4604      	mov	r4, r0
    b408:	f44f 71a4 	mov.w	r1, #328	; 0x148
    b40c:	2e1b      	cmp	r6, #27
    b40e:	d001      	beq.n	b414 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xa8>
    b410:	428d      	cmp	r5, r1
    b412:	d104      	bne.n	b41e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb2>
    b414:	f1b8 0f1b 	cmp.w	r8, #27
    b418:	d03f      	beq.n	b49a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x12e>
    b41a:	428c      	cmp	r4, r1
    b41c:	d03d      	beq.n	b49a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x12e>
    b41e:	466a      	mov	r2, sp
    b420:	4651      	mov	r1, sl
    b422:	4648      	mov	r0, r9
    b424:	f005 fd6d 	bl	10f02 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x216>
    b428:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    b42c:	4641      	mov	r1, r8
    b42e:	4540      	cmp	r0, r8
    b430:	d900      	bls.n	b434 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xc8>
    b432:	4608      	mov	r0, r1
    b434:	80f8      	strh	r0, [r7, #6]
    b436:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    b43a:	42a1      	cmp	r1, r4
    b43c:	d800      	bhi.n	b440 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd4>
    b43e:	460c      	mov	r4, r1
    b440:	813c      	strh	r4, [r7, #8]
    b442:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    b446:	42b1      	cmp	r1, r6
    b448:	d800      	bhi.n	b44c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xe0>
    b44a:	460e      	mov	r6, r1
    b44c:	807e      	strh	r6, [r7, #2]
    b44e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    b452:	42a9      	cmp	r1, r5
    b454:	d900      	bls.n	b458 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xec>
    b456:	4629      	mov	r1, r5
    b458:	80b9      	strh	r1, [r7, #4]
    b45a:	22ff      	movs	r2, #255	; 0xff
    b45c:	703a      	strb	r2, [r7, #0]
    b45e:	381b      	subs	r0, #27
    b460:	28e0      	cmp	r0, #224	; 0xe0
    b462:	d902      	bls.n	b46a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xfe>
    b464:	f44f 614e 	mov.w	r1, #3296	; 0xce0
    b468:	e014      	b.n	b494 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x128>
    b46a:	3e1b      	subs	r6, #27
    b46c:	2ee0      	cmp	r6, #224	; 0xe0
    b46e:	d902      	bls.n	b476 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x10a>
    b470:	f640 41e2 	movw	r1, #3298	; 0xce2
    b474:	e00e      	b.n	b494 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x128>
    b476:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    b47a:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    b47e:	4284      	cmp	r4, r0
    b480:	d902      	bls.n	b488 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x11c>
    b482:	f640 41e4 	movw	r1, #3300	; 0xce4
    b486:	e005      	b.n	b494 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x128>
    b488:	f5a1 71a4 	sub.w	r1, r1, #328	; 0x148
    b48c:	4281      	cmp	r1, r0
    b48e:	d904      	bls.n	b49a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x12e>
    b490:	f640 41e6 	movw	r1, #3302	; 0xce6
    b494:	2039      	movs	r0, #57	; 0x39
    b496:	f7f9 fe6b 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b49a:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b49e:	0000      	.short	0x0000
    b4a0:	20000238 	.word	0x20000238

0000b4a4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
    b4a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b4a8:	b088      	sub	sp, #32
    b4aa:	460c      	mov	r4, r1
    b4ac:	4606      	mov	r6, r0
    b4ae:	f004 f93f 	bl	f730 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    b4b2:	b198      	cbz	r0, b4dc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x38>
    b4b4:	4630      	mov	r0, r6
    b4b6:	f004 f92e 	bl	f716 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    b4ba:	b130      	cbz	r0, b4ca <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x26>
    b4bc:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    b4c0:	2012      	movs	r0, #18
    b4c2:	2900      	cmp	r1, #0
    b4c4:	d00b      	beq.n	b4de <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    b4c6:	2980      	cmp	r1, #128	; 0x80
    b4c8:	d809      	bhi.n	b4de <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    b4ca:	4630      	mov	r0, r6
    b4cc:	f004 f912 	bl	f6f4 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>
    b4d0:	b140      	cbz	r0, b4e4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    b4d2:	4630      	mov	r0, r6
    b4d4:	f004 f88a 	bl	f5ec <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
    b4d8:	b130      	cbz	r0, b4e8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x44>
    b4da:	e009      	b.n	b4f0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x4c>
    b4dc:	2042      	movs	r0, #66	; 0x42
    b4de:	b008      	add	sp, #32
    b4e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b4e4:	200c      	movs	r0, #12
    b4e6:	e7fa      	b.n	b4de <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    b4e8:	4630      	mov	r0, r6
    b4ea:	f004 f90e 	bl	f70a <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
    b4ee:	b3a8      	cbz	r0, b55c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xb8>
    b4f0:	4630      	mov	r0, r6
    b4f2:	f004 faf1 	bl	fad8 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    b4f6:	2800      	cmp	r0, #0
    b4f8:	d1f4      	bne.n	b4e4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    b4fa:	4630      	mov	r0, r6
    b4fc:	f004 f891 	bl	f622 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>
    b500:	2800      	cmp	r0, #0
    b502:	d1ef      	bne.n	b4e4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    b504:	4630      	mov	r0, r6
    b506:	f7fc f919 	bl	773c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
    b50a:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    b50e:	f242 7110 	movw	r1, #10000	; 0x2710
    b512:	fb00 f801 	mul.w	r8, r0, r1
    b516:	78e1      	ldrb	r1, [r4, #3]
    b518:	4630      	mov	r0, r6
    b51a:	f004 f8e2 	bl	f6e2 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
    b51e:	4630      	mov	r0, r6
    b520:	f004 f8f5 	bl	f70e <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    b524:	b1e8      	cbz	r0, b562 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xbe>
    b526:	2200      	movs	r2, #0
    b528:	4611      	mov	r1, r2
    b52a:	a801      	add	r0, sp, #4
    b52c:	f7fa f87e 	bl	562c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    b530:	0004      	movs	r4, r0
    b532:	d06a      	beq.n	b60a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x166>
    b534:	2100      	movs	r1, #0
    b536:	f7fb fd07 	bl	6f48 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    b53a:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    b53e:	8020      	strh	r0, [r4, #0]
    b540:	4621      	mov	r1, r4
    b542:	4630      	mov	r0, r6
    b544:	f004 f907 	bl	f756 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
    b548:	f005 fd50 	bl	10fec <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    b54c:	4d3a      	ldr	r5, [pc, #232]	; (b638 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x194>)
    b54e:	2800      	cmp	r0, #0
    b550:	f104 0030 	add.w	r0, r4, #48	; 0x30
    b554:	d00f      	beq.n	b576 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xd2>
    b556:	886a      	ldrh	r2, [r5, #2]
    b558:	88a9      	ldrh	r1, [r5, #4]
    b55a:	e00e      	b.n	b57a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xd6>
    b55c:	e7ff      	b.n	b55e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xba>
    b55e:	2012      	movs	r0, #18
    b560:	e7bd      	b.n	b4de <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    b562:	4642      	mov	r2, r8
    b564:	2100      	movs	r1, #0
    b566:	4630      	mov	r0, r6
    b568:	f7fd f832 	bl	85d0 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    b56c:	2800      	cmp	r0, #0
    b56e:	d0b6      	beq.n	b4de <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    b570:	f241 41ab 	movw	r1, #5291	; 0x14ab
    b574:	e053      	b.n	b61e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    b576:	221b      	movs	r2, #27
    b578:	4611      	mov	r1, r2
    b57a:	84c2      	strh	r2, [r0, #38]	; 0x26
    b57c:	8501      	strh	r1, [r0, #40]	; 0x28
    b57e:	68a8      	ldr	r0, [r5, #8]
    b580:	6320      	str	r0, [r4, #48]	; 0x30
    b582:	f641 574c 	movw	r7, #7500	; 0x1d4c
    b586:	4630      	mov	r0, r6
    b588:	f004 f8c9 	bl	f71e <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    b58c:	b910      	cbnz	r0, b594 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xf0>
    b58e:	4630      	mov	r0, r6
    b590:	f004 f8df 	bl	f752 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    b594:	6127      	str	r7, [r4, #16]
    b596:	8821      	ldrh	r1, [r4, #0]
    b598:	f8ad 1008 	strh.w	r1, [sp, #8]
    b59c:	7ba9      	ldrb	r1, [r5, #14]
    b59e:	f88d 100a 	strb.w	r1, [sp, #10]
    b5a2:	7be9      	ldrb	r1, [r5, #15]
    b5a4:	f88d 100b 	strb.w	r1, [sp, #11]
    b5a8:	8a29      	ldrh	r1, [r5, #16]
    b5aa:	f8ad 100c 	strh.w	r1, [sp, #12]
    b5ae:	a905      	add	r1, sp, #20
    b5b0:	9100      	str	r1, [sp, #0]
    b5b2:	2001      	movs	r0, #1
    b5b4:	ab04      	add	r3, sp, #16
    b5b6:	aa02      	add	r2, sp, #8
    b5b8:	4621      	mov	r1, r4
    b5ba:	f005 fcd8 	bl	10f6e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x282>
    b5be:	b140      	cbz	r0, b5d2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x12e>
    b5c0:	2100      	movs	r1, #0
    b5c2:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    b5c6:	f7fa f85b 	bl	5680 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    b5ca:	b1f0      	cbz	r0, b60a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x166>
    b5cc:	f241 41f7 	movw	r1, #5367	; 0x14f7
    b5d0:	e025      	b.n	b61e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    b5d2:	f89d 0010 	ldrb.w	r0, [sp, #16]
    b5d6:	f88d 0018 	strb.w	r0, [sp, #24]
    b5da:	f89d 0014 	ldrb.w	r0, [sp, #20]
    b5de:	f88d 0019 	strb.w	r0, [sp, #25]
    b5e2:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    b5e6:	f8ad 001a 	strh.w	r0, [sp, #26]
    b5ea:	a906      	add	r1, sp, #24
    b5ec:	4620      	mov	r0, r4
    b5ee:	f003 fb31 	bl	ec54 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    b5f2:	7868      	ldrb	r0, [r5, #1]
    b5f4:	9000      	str	r0, [sp, #0]
    b5f6:	782b      	ldrb	r3, [r5, #0]
    b5f8:	88aa      	ldrh	r2, [r5, #4]
    b5fa:	8869      	ldrh	r1, [r5, #2]
    b5fc:	8820      	ldrh	r0, [r4, #0]
    b5fe:	f7fa f90b 	bl	5818 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    b602:	b120      	cbz	r0, b60e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x16a>
    b604:	f241 5102 	movw	r1, #5378	; 0x1502
    b608:	e009      	b.n	b61e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    b60a:	2009      	movs	r0, #9
    b60c:	e767      	b.n	b4de <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    b60e:	4642      	mov	r2, r8
    b610:	4621      	mov	r1, r4
    b612:	4630      	mov	r0, r6
    b614:	f7fc ffdc 	bl	85d0 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    b618:	b120      	cbz	r0, b624 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x180>
    b61a:	f241 5104 	movw	r1, #5380	; 0x1504
    b61e:	2039      	movs	r0, #57	; 0x39
    b620:	f7f9 fda6 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b624:	4805      	ldr	r0, [pc, #20]	; (b63c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x198>)
    b626:	6803      	ldr	r3, [r0, #0]
    b628:	b123      	cbz	r3, b634 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x190>
    b62a:	2200      	movs	r2, #0
    b62c:	f504 71da 	add.w	r1, r4, #436	; 0x1b4
    b630:	4620      	mov	r0, r4
    b632:	4798      	blx	r3
    b634:	2000      	movs	r0, #0
    b636:	e752      	b.n	b4de <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    b638:	20000f94 	.word	0x20000f94
    b63c:	20000234 	.word	0x20000234
    b640:	b510      	push	{r4, lr}
    b642:	4604      	mov	r4, r0
    b644:	88c1      	ldrh	r1, [r0, #6]
    b646:	8880      	ldrh	r0, [r0, #4]
    b648:	f005 fc4d 	bl	10ee6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
    b64c:	2800      	cmp	r0, #0
    b64e:	d10f      	bne.n	b670 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1cc>
    b650:	8861      	ldrh	r1, [r4, #2]
    b652:	8820      	ldrh	r0, [r4, #0]
    b654:	f005 fc47 	bl	10ee6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
    b658:	2800      	cmp	r0, #0
    b65a:	d109      	bne.n	b670 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1cc>
    b65c:	4805      	ldr	r0, [pc, #20]	; (b674 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1d0>)
    b65e:	88a1      	ldrh	r1, [r4, #4]
    b660:	8081      	strh	r1, [r0, #4]
    b662:	8821      	ldrh	r1, [r4, #0]
    b664:	8001      	strh	r1, [r0, #0]
    b666:	88e1      	ldrh	r1, [r4, #6]
    b668:	80c1      	strh	r1, [r0, #6]
    b66a:	8861      	ldrh	r1, [r4, #2]
    b66c:	8041      	strh	r1, [r0, #2]
    b66e:	2000      	movs	r0, #0
    b670:	bd10      	pop	{r4, pc}
    b672:	0000      	.short	0x0000
    b674:	20000238 	.word	0x20000238
    b678:	0c11360c 	.word	0x0c11360c
    b67c:	11360059 	.word	0x11360059
    b680:	05060708 	.word	0x05060708
    b684:	00020304 	.word	0x00020304
    b688:	f0f4f8fc 	.word	0xf0f4f8fc
    b68c:	0304d8ec 	.word	0x0304d8ec
    b690:	f4f8fc00 	.word	0xf4f8fc00
    b694:	00d8ecf0 	.word	0x00d8ecf0

0000b698 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    b698:	b510      	push	{r4, lr}
    b69a:	f7fb fe99 	bl	73d0 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    b69e:	4804      	ldr	r0, [pc, #16]	; (b6b0 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x18>)
    b6a0:	6840      	ldr	r0, [r0, #4]
    b6a2:	f005 fe0e 	bl	112c2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x5d6>
    b6a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b6aa:	f005 bab5 	b.w	10c18 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    b6ae:	0000      	.short	0x0000
    b6b0:	20000240 	.word	0x20000240

0000b6b4 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    b6b4:	b510      	push	{r4, lr}
    b6b6:	4c05      	ldr	r4, [pc, #20]	; (b6cc <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x18>)
    b6b8:	68a0      	ldr	r0, [r4, #8]
    b6ba:	f005 fe02 	bl	112c2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x5d6>
    b6be:	68e0      	ldr	r0, [r4, #12]
    b6c0:	f005 fdff 	bl	112c2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x5d6>
    b6c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b6c8:	f7ff be50 	b.w	b36c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    b6cc:	20000240 	.word	0x20000240

0000b6d0 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>:
    b6d0:	b510      	push	{r4, lr}
    b6d2:	4905      	ldr	r1, [pc, #20]	; (b6e8 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x18>)
    b6d4:	4805      	ldr	r0, [pc, #20]	; (b6ec <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    b6d6:	f005 fde7 	bl	112a8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x5bc>
    b6da:	4804      	ldr	r0, [pc, #16]	; (b6ec <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    b6dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b6e0:	4903      	ldr	r1, [pc, #12]	; (b6f0 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x20>)
    b6e2:	1d00      	adds	r0, r0, #4
    b6e4:	f005 bde0 	b.w	112a8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x5bc>
    b6e8:	20000250 	.word	0x20000250
    b6ec:	20000244 	.word	0x20000244
    b6f0:	20000258 	.word	0x20000258

0000b6f4 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>:
    b6f4:	b510      	push	{r4, lr}
    b6f6:	4908      	ldr	r1, [pc, #32]	; (b718 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x24>)
    b6f8:	4808      	ldr	r0, [pc, #32]	; (b71c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    b6fa:	f005 fdd5 	bl	112a8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x5bc>
    b6fe:	4807      	ldr	r0, [pc, #28]	; (b71c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    b700:	4907      	ldr	r1, [pc, #28]	; (b720 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x2c>)
    b702:	1d00      	adds	r0, r0, #4
    b704:	f005 fdd0 	bl	112a8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x5bc>
    b708:	4804      	ldr	r0, [pc, #16]	; (b71c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    b70a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b70e:	4905      	ldr	r1, [pc, #20]	; (b724 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x30>)
    b710:	3008      	adds	r0, #8
    b712:	f005 bdc9 	b.w	112a8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x5bc>
    b716:	0000      	.short	0x0000
    b718:	20000268 	.word	0x20000268
    b71c:	20000244 	.word	0x20000244
    b720:	20000270 	.word	0x20000270
    b724:	20000260 	.word	0x20000260

0000b728 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
    b728:	4801      	ldr	r0, [pc, #4]	; (b730 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
    b72a:	7800      	ldrb	r0, [r0, #0]
    b72c:	4770      	bx	lr
    b72e:	0000      	.short	0x0000
    b730:	20000240 	.word	0x20000240
    b734:	b510      	push	{r4, lr}
    b736:	f7fc f973 	bl	7a20 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>
    b73a:	f7fc ffd9 	bl	86f0 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>
    b73e:	4803      	ldr	r0, [pc, #12]	; (b74c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x24>)
    b740:	f7fc f954 	bl	79ec <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
    b744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b748:	f7fb be4e 	b.w	73e8 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q>
    b74c:	2000141d 	.word	0x2000141d
    b750:	4909      	ldr	r1, [pc, #36]	; (b778 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x50>)
    b752:	b510      	push	{r4, lr}
    b754:	2001      	movs	r0, #1
    b756:	7008      	strb	r0, [r1, #0]
    b758:	f7fc f992 	bl	7a80 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>
    b75c:	f7fd fd74 	bl	9248 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>
    b760:	f003 f8ed 	bl	e93e <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    b764:	4805      	ldr	r0, [pc, #20]	; (b77c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x54>)
    b766:	f7fa fc25 	bl	5fb4 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
    b76a:	2000      	movs	r0, #0
    b76c:	f7f9 fece 	bl	550c <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    b770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b774:	f7fb be40 	b.w	73f8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>
    b778:	20000240 	.word	0x20000240
    b77c:	2000141d 	.word	0x2000141d

0000b780 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    b780:	4a04      	ldr	r2, [pc, #16]	; (b794 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x14>)
    b782:	08c1      	lsrs	r1, r0, #3
    b784:	f000 0307 	and.w	r3, r0, #7
    b788:	2001      	movs	r0, #1
    b78a:	4098      	lsls	r0, r3
    b78c:	5c53      	ldrb	r3, [r2, r1]
    b78e:	4303      	orrs	r3, r0
    b790:	5453      	strb	r3, [r2, r1]
    b792:	4770      	bx	lr
    b794:	20000000 	.word	0x20000000

0000b798 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    b798:	4901      	ldr	r1, [pc, #4]	; (b7a0 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    b79a:	e9d1 0100 	ldrd	r0, r1, [r1]
    b79e:	4770      	bx	lr
    b7a0:	20000000 	.word	0x20000000

0000b7a4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    b7a4:	4806      	ldr	r0, [pc, #24]	; (b7c0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x1c>)
    b7a6:	8801      	ldrh	r1, [r0, #0]
    b7a8:	7900      	ldrb	r0, [r0, #4]
    b7aa:	0602      	lsls	r2, r0, #24
    b7ac:	ea42 2011 	orr.w	r0, r2, r1, lsr #8
    b7b0:	f000 0001 	and.w	r0, r0, #1
    b7b4:	1800      	adds	r0, r0, r0
    b7b6:	b2c0      	uxtb	r0, r0
    b7b8:	f040 0001 	orr.w	r0, r0, #1
    b7bc:	4770      	bx	lr
    b7be:	0000      	.short	0x0000
    b7c0:	20000000 	.word	0x20000000

0000b7c4 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    b7c4:	b510      	push	{r4, lr}
    b7c6:	f7f9 f927 	bl	4a18 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    b7ca:	2200      	movs	r2, #0
    b7cc:	4b08      	ldr	r3, [pc, #32]	; (b7f0 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    b7ce:	4611      	mov	r1, r2
    b7d0:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    b7d4:	4284      	cmp	r4, r0
    b7d6:	d303      	bcc.n	b7e0 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    b7d8:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    b7dc:	7882      	ldrb	r2, [r0, #2]
    b7de:	e003      	b.n	b7e8 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    b7e0:	1c49      	adds	r1, r1, #1
    b7e2:	b2c9      	uxtb	r1, r1
    b7e4:	290c      	cmp	r1, #12
    b7e6:	d3f3      	bcc.n	b7d0 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    b7e8:	4802      	ldr	r0, [pc, #8]	; (b7f4 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    b7ea:	7002      	strb	r2, [r0, #0]
    b7ec:	bd10      	pop	{r4, pc}
    b7ee:	0000      	.short	0x0000
    b7f0:	00011314 	.word	0x00011314
    b7f4:	200002c3 	.word	0x200002c3

0000b7f8 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    b7f8:	b570      	push	{r4, r5, r6, lr}
    b7fa:	4605      	mov	r5, r0
    b7fc:	4616      	mov	r6, r2
    b7fe:	460c      	mov	r4, r1
    b800:	2002      	movs	r0, #2
    b802:	f000 f9b7 	bl	bb74 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b806:	4906      	ldr	r1, [pc, #24]	; (b820 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    b808:	2001      	movs	r0, #1
    b80a:	1ef6      	subs	r6, r6, #3
    b80c:	7008      	strb	r0, [r1, #0]
    b80e:	4805      	ldr	r0, [pc, #20]	; (b824 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    b810:	6006      	str	r6, [r0, #0]
    b812:	4804      	ldr	r0, [pc, #16]	; (b824 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    b814:	3808      	subs	r0, #8
    b816:	6005      	str	r5, [r0, #0]
    b818:	1f00      	subs	r0, r0, #4
    b81a:	6004      	str	r4, [r0, #0]
    b81c:	bd70      	pop	{r4, r5, r6, pc}
    b81e:	0000      	.short	0x0000
    b820:	200002c4 	.word	0x200002c4
    b824:	4000f510 	.word	0x4000f510

0000b828 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    b828:	b510      	push	{r4, lr}
    b82a:	4c0c      	ldr	r4, [pc, #48]	; (b85c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    b82c:	7820      	ldrb	r0, [r4, #0]
    b82e:	b180      	cbz	r0, b852 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    b830:	490b      	ldr	r1, [pc, #44]	; (b860 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    b832:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    b836:	6008      	str	r0, [r1, #0]
    b838:	f000 f86a 	bl	b910 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    b83c:	2100      	movs	r1, #0
    b83e:	b120      	cbz	r0, b84a <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    b840:	2001      	movs	r0, #1
    b842:	7060      	strb	r0, [r4, #1]
    b844:	4807      	ldr	r0, [pc, #28]	; (b864 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    b846:	6800      	ldr	r0, [r0, #0]
    b848:	e001      	b.n	b84e <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    b84a:	7061      	strb	r1, [r4, #1]
    b84c:	2010      	movs	r0, #16
    b84e:	70a0      	strb	r0, [r4, #2]
    b850:	7021      	strb	r1, [r4, #0]
    b852:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b856:	2000      	movs	r0, #0
    b858:	f000 b98c 	b.w	bb74 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b85c:	200002c4 	.word	0x200002c4
    b860:	4001f508 	.word	0x4001f508
    b864:	4000f400 	.word	0x4000f400

0000b868 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    b868:	b510      	push	{r4, lr}
    b86a:	2002      	movs	r0, #2
    b86c:	f000 f982 	bl	bb74 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b870:	4904      	ldr	r1, [pc, #16]	; (b884 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    b872:	2001      	movs	r0, #1
    b874:	7008      	strb	r0, [r1, #0]
    b876:	f000 f859 	bl	b92c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    b87a:	4903      	ldr	r1, [pc, #12]	; (b888 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    b87c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    b880:	6008      	str	r0, [r1, #0]
    b882:	bd10      	pop	{r4, pc}
    b884:	200002c4 	.word	0x200002c4
    b888:	4001f504 	.word	0x4001f504

0000b88c <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    b88c:	4803      	ldr	r0, [pc, #12]	; (b89c <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    b88e:	2100      	movs	r1, #0
    b890:	7001      	strb	r1, [r0, #0]
    b892:	7041      	strb	r1, [r0, #1]
    b894:	2110      	movs	r1, #16
    b896:	7081      	strb	r1, [r0, #2]
    b898:	4770      	bx	lr
    b89a:	0000      	.short	0x0000
    b89c:	200002c4 	.word	0x200002c4

0000b8a0 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    b8a0:	4807      	ldr	r0, [pc, #28]	; (b8c0 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    b8a2:	b510      	push	{r4, lr}
    b8a4:	7801      	ldrb	r1, [r0, #0]
    b8a6:	b141      	cbz	r1, b8ba <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    b8a8:	f000 f832 	bl	b910 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    b8ac:	b118      	cbz	r0, b8b6 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    b8ae:	4805      	ldr	r0, [pc, #20]	; (b8c4 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    b8b0:	6800      	ldr	r0, [r0, #0]
    b8b2:	b2c0      	uxtb	r0, r0
    b8b4:	bd10      	pop	{r4, pc}
    b8b6:	2010      	movs	r0, #16
    b8b8:	bd10      	pop	{r4, pc}
    b8ba:	7880      	ldrb	r0, [r0, #2]
    b8bc:	bd10      	pop	{r4, pc}
    b8be:	0000      	.short	0x0000
    b8c0:	200002c4 	.word	0x200002c4
    b8c4:	4000f400 	.word	0x4000f400

0000b8c8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    b8c8:	4808      	ldr	r0, [pc, #32]	; (b8ec <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    b8ca:	b510      	push	{r4, lr}
    b8cc:	7801      	ldrb	r1, [r0, #0]
    b8ce:	b159      	cbz	r1, b8e8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    b8d0:	4807      	ldr	r0, [pc, #28]	; (b8f0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    b8d2:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    b8d6:	b128      	cbz	r0, b8e4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    b8d8:	f000 f80c 	bl	b8f4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    b8dc:	2800      	cmp	r0, #0
    b8de:	d000      	beq.n	b8e2 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    b8e0:	2001      	movs	r0, #1
    b8e2:	bd10      	pop	{r4, pc}
    b8e4:	2002      	movs	r0, #2
    b8e6:	bd10      	pop	{r4, pc}
    b8e8:	7840      	ldrb	r0, [r0, #1]
    b8ea:	bd10      	pop	{r4, pc}
    b8ec:	200002c4 	.word	0x200002c4
    b8f0:	4000f000 	.word	0x4000f000
    b8f4:	4805      	ldr	r0, [pc, #20]	; (b90c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    b8f6:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    b8fa:	b111      	cbz	r1, b902 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    b8fc:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    b900:	b108      	cbz	r0, b906 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    b902:	2000      	movs	r0, #0
    b904:	4770      	bx	lr
    b906:	2001      	movs	r0, #1
    b908:	4770      	bx	lr
    b90a:	0000      	.short	0x0000
    b90c:	4000f000 	.word	0x4000f000
    b910:	4805      	ldr	r0, [pc, #20]	; (b928 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    b912:	b510      	push	{r4, lr}
    b914:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    b918:	b120      	cbz	r0, b924 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    b91a:	f7ff ffeb 	bl	b8f4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    b91e:	b108      	cbz	r0, b924 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    b920:	2001      	movs	r0, #1
    b922:	bd10      	pop	{r4, pc}
    b924:	2000      	movs	r0, #0
    b926:	bd10      	pop	{r4, pc}
    b928:	4000f000 	.word	0x4000f000
    b92c:	4804      	ldr	r0, [pc, #16]	; (b940 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    b92e:	2100      	movs	r1, #0
    b930:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    b934:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    b938:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    b93c:	4770      	bx	lr
    b93e:	0000      	.short	0x0000
    b940:	4000f000 	.word	0x4000f000

0000b944 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>:
    b944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b948:	4604      	mov	r4, r0
    b94a:	461e      	mov	r6, r3
    b94c:	4690      	mov	r8, r2
    b94e:	460f      	mov	r7, r1
    b950:	2001      	movs	r0, #1
    b952:	f000 f90f 	bl	bb74 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b956:	4d1e      	ldr	r5, [pc, #120]	; (b9d0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x8c>)
    b958:	481e      	ldr	r0, [pc, #120]	; (b9d4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x90>)
    b95a:	f004 0103 	and.w	r1, r4, #3
    b95e:	712e      	strb	r6, [r5, #4]
    b960:	6800      	ldr	r0, [r0, #0]
    b962:	0432      	lsls	r2, r6, #16
    b964:	f361 0007 	bfi	r0, r1, #0, #8
    b968:	f366 200f 	bfi	r0, r6, #8, #8
    b96c:	0c00      	lsrs	r0, r0, #16
    b96e:	4e1a      	ldr	r6, [pc, #104]	; (b9d8 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    b970:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
    b974:	4308      	orrs	r0, r1
    b976:	f8c6 0504 	str.w	r0, [r6, #1284]	; 0x504
    b97a:	4818      	ldr	r0, [pc, #96]	; (b9dc <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    b97c:	6007      	str	r7, [r0, #0]
    b97e:	f001 fd8d 	bl	d49c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    b982:	b938      	cbnz	r0, b994 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x50>
    b984:	4815      	ldr	r0, [pc, #84]	; (b9dc <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    b986:	3010      	adds	r0, #16
    b988:	6801      	ldr	r1, [r0, #0]
    b98a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    b98e:	ea41 0108 	orr.w	r1, r1, r8
    b992:	6001      	str	r1, [r0, #0]
    b994:	f000 f8e4 	bl	bb60 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    b998:	b10c      	cbz	r4, b99e <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x5a>
    b99a:	2c04      	cmp	r4, #4
    b99c:	d107      	bne.n	b9ae <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x6a>
    b99e:	4811      	ldr	r0, [pc, #68]	; (b9e4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xa0>)
    b9a0:	490d      	ldr	r1, [pc, #52]	; (b9d8 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    b9a2:	4a0f      	ldr	r2, [pc, #60]	; (b9e0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x9c>)
    b9a4:	1d09      	adds	r1, r1, #4
    b9a6:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    b9aa:	f8c0 1514 	str.w	r1, [r0, #1300]	; 0x514
    b9ae:	2001      	movs	r0, #1
    b9b0:	7068      	strb	r0, [r5, #1]
    b9b2:	70ec      	strb	r4, [r5, #3]
    b9b4:	b11c      	cbz	r4, b9be <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    b9b6:	2c01      	cmp	r4, #1
    b9b8:	d001      	beq.n	b9be <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    b9ba:	2c02      	cmp	r4, #2
    b9bc:	d106      	bne.n	b9cc <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x88>
    b9be:	7028      	strb	r0, [r5, #0]
    b9c0:	2100      	movs	r1, #0
    b9c2:	f8c6 1100 	str.w	r1, [r6, #256]	; 0x100
    b9c6:	f8c6 1200 	str.w	r1, [r6, #512]	; 0x200
    b9ca:	6030      	str	r0, [r6, #0]
    b9cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b9d0:	200002c7 	.word	0x200002c7
    b9d4:	0000bb70 	.word	0x0000bb70
    b9d8:	4000f000 	.word	0x4000f000
    b9dc:	4000f508 	.word	0x4000f508
    b9e0:	4000f100 	.word	0x4000f100
    b9e4:	4001f088 	.word	0x4001f088

0000b9e8 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>:
    b9e8:	b570      	push	{r4, r5, r6, lr}
    b9ea:	4a1c      	ldr	r2, [pc, #112]	; (ba5c <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x74>)
    b9ec:	7853      	ldrb	r3, [r2, #1]
    b9ee:	b1a3      	cbz	r3, ba1a <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x32>
    b9f0:	4b1b      	ldr	r3, [pc, #108]	; (ba60 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x78>)
    b9f2:	6019      	str	r1, [r3, #0]
    b9f4:	1d19      	adds	r1, r3, #4
    b9f6:	6008      	str	r0, [r1, #0]
    b9f8:	2501      	movs	r5, #1
    b9fa:	7095      	strb	r5, [r2, #2]
    b9fc:	4610      	mov	r0, r2
    b9fe:	78d6      	ldrb	r6, [r2, #3]
    ba00:	4b18      	ldr	r3, [pc, #96]	; (ba64 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    ba02:	7800      	ldrb	r0, [r0, #0]
    ba04:	4c18      	ldr	r4, [pc, #96]	; (ba68 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x80>)
    ba06:	2100      	movs	r1, #0
    ba08:	b156      	cbz	r6, ba20 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x38>
    ba0a:	2e04      	cmp	r6, #4
    ba0c:	d01b      	beq.n	ba46 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5e>
    ba0e:	b308      	cbz	r0, ba54 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6c>
    ba10:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    ba14:	0668      	lsls	r0, r5, #25
    ba16:	6018      	str	r0, [r3, #0]
    ba18:	bd70      	pop	{r4, r5, r6, pc}
    ba1a:	f44f 71c2 	mov.w	r1, #388	; 0x184
    ba1e:	e01a      	b.n	ba56 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    ba20:	b178      	cbz	r0, ba42 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5a>
    ba22:	4620      	mov	r0, r4
    ba24:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    ba28:	f44f 3600 	mov.w	r6, #131072	; 0x20000
    ba2c:	601e      	str	r6, [r3, #0]
    ba2e:	1271      	asrs	r1, r6, #9
    ba30:	f005 fca5 	bl	1137e <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    ba34:	2800      	cmp	r0, #0
    ba36:	d0ef      	beq.n	ba18 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x30>
    ba38:	6065      	str	r5, [r4, #4]
    ba3a:	480a      	ldr	r0, [pc, #40]	; (ba64 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    ba3c:	1d00      	adds	r0, r0, #4
    ba3e:	6006      	str	r6, [r0, #0]
    ba40:	bd70      	pop	{r4, r5, r6, pc}
    ba42:	21b3      	movs	r1, #179	; 0xb3
    ba44:	e007      	b.n	ba56 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    ba46:	7015      	strb	r5, [r2, #0]
    ba48:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    ba4c:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    ba50:	6025      	str	r5, [r4, #0]
    ba52:	bd70      	pop	{r4, r5, r6, pc}
    ba54:	21c6      	movs	r1, #198	; 0xc6
    ba56:	203c      	movs	r0, #60	; 0x3c
    ba58:	f7f9 fb8a 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ba5c:	200002c7 	.word	0x200002c7
    ba60:	4000f50c 	.word	0x4000f50c
    ba64:	4001f504 	.word	0x4001f504
    ba68:	4000f000 	.word	0x4000f000

0000ba6c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    ba6c:	b570      	push	{r4, r5, r6, lr}
    ba6e:	4d05      	ldr	r5, [pc, #20]	; (ba84 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x18>)
    ba70:	2400      	movs	r4, #0
    ba72:	7828      	ldrb	r0, [r5, #0]
    ba74:	b110      	cbz	r0, ba7c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x10>
    ba76:	f000 f873 	bl	bb60 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    ba7a:	702c      	strb	r4, [r5, #0]
    ba7c:	706c      	strb	r4, [r5, #1]
    ba7e:	70ac      	strb	r4, [r5, #2]
    ba80:	bd70      	pop	{r4, r5, r6, pc}
    ba82:	0000      	.short	0x0000
    ba84:	200002c7 	.word	0x200002c7

0000ba88 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    ba88:	4802      	ldr	r0, [pc, #8]	; (ba94 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    ba8a:	2100      	movs	r1, #0
    ba8c:	7001      	strb	r1, [r0, #0]
    ba8e:	7041      	strb	r1, [r0, #1]
    ba90:	7081      	strb	r1, [r0, #2]
    ba92:	4770      	bx	lr
    ba94:	200002c7 	.word	0x200002c7

0000ba98 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    ba98:	480b      	ldr	r0, [pc, #44]	; (bac8 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x30>)
    ba9a:	b510      	push	{r4, lr}
    ba9c:	7800      	ldrb	r0, [r0, #0]
    ba9e:	b158      	cbz	r0, bab8 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>
    baa0:	f44f 7182 	mov.w	r1, #260	; 0x104
    baa4:	4809      	ldr	r0, [pc, #36]	; (bacc <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x34>)
    baa6:	f005 fc6a 	bl	1137e <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    baaa:	b140      	cbz	r0, babe <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x26>
    baac:	4808      	ldr	r0, [pc, #32]	; (bad0 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x38>)
    baae:	6800      	ldr	r0, [r0, #0]
    bab0:	2800      	cmp	r0, #0
    bab2:	d000      	beq.n	bab6 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1e>
    bab4:	2001      	movs	r0, #1
    bab6:	bd10      	pop	{r4, pc}
    bab8:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
    babc:	e001      	b.n	bac2 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x2a>
    babe:	f240 11e5 	movw	r1, #485	; 0x1e5
    bac2:	203c      	movs	r0, #60	; 0x3c
    bac4:	f7f9 fb54 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bac8:	200002c7 	.word	0x200002c7
    bacc:	4000f000 	.word	0x4000f000
    bad0:	4000f400 	.word	0x4000f400

0000bad4 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    bad4:	4801      	ldr	r0, [pc, #4]	; (badc <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    bad6:	2101      	movs	r1, #1
    bad8:	6081      	str	r1, [r0, #8]
    bada:	4770      	bx	lr
    badc:	4000f000 	.word	0x4000f000

0000bae0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    bae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bae4:	481b      	ldr	r0, [pc, #108]	; (bb54 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x74>)
    bae6:	7800      	ldrb	r0, [r0, #0]
    bae8:	b1d8      	cbz	r0, bb22 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x42>
    baea:	f8df 806c 	ldr.w	r8, [pc, #108]	; bb58 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    baee:	f44f 7682 	mov.w	r6, #260	; 0x104
    baf2:	4631      	mov	r1, r6
    baf4:	4640      	mov	r0, r8
    baf6:	f005 fc42 	bl	1137e <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    bafa:	2800      	cmp	r0, #0
    bafc:	d128      	bne.n	bb50 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>
    bafe:	2002      	movs	r0, #2
    bb00:	f8c8 0304 	str.w	r0, [r8, #772]	; 0x304
    bb04:	4c15      	ldr	r4, [pc, #84]	; (bb5c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x7c>)
    bb06:	6820      	ldr	r0, [r4, #0]
    bb08:	43c0      	mvns	r0, r0
    bb0a:	f340 1500 	sbfx	r5, r0, #4, #1
    bb0e:	6820      	ldr	r0, [r4, #0]
    bb10:	f040 0010 	orr.w	r0, r0, #16
    bb14:	6020      	str	r0, [r4, #0]
    bb16:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    bb1a:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    bb1e:	1c6d      	adds	r5, r5, #1
    bb20:	e008      	b.n	bb34 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x54>
    bb22:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
    bb26:	203c      	movs	r0, #60	; 0x3c
    bb28:	f7f9 fb22 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bb2c:	f8c9 7280 	str.w	r7, [r9, #640]	; 0x280
    bb30:	f7f9 f990 	bl	4e54 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    bb34:	4631      	mov	r1, r6
    bb36:	4640      	mov	r0, r8
    bb38:	f005 fc21 	bl	1137e <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    bb3c:	2800      	cmp	r0, #0
    bb3e:	d0f5      	beq.n	bb2c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x4c>
    bb40:	b91d      	cbnz	r5, bb4a <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6a>
    bb42:	6820      	ldr	r0, [r4, #0]
    bb44:	f020 0010 	bic.w	r0, r0, #16
    bb48:	6020      	str	r0, [r4, #0]
    bb4a:	2002      	movs	r0, #2
    bb4c:	f8c8 0308 	str.w	r0, [r8, #776]	; 0x308
    bb50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bb54:	200002c7 	.word	0x200002c7
    bb58:	4000f000 	.word	0x4000f000
    bb5c:	e000ed10 	.word	0xe000ed10
    bb60:	4902      	ldr	r1, [pc, #8]	; (bb6c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x8c>)
    bb62:	4801      	ldr	r0, [pc, #4]	; (bb68 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x88>)
    bb64:	6008      	str	r0, [r1, #0]
    bb66:	4770      	bx	lr
    bb68:	02020000 	.word	0x02020000
    bb6c:	4001f508 	.word	0x4001f508
    bb70:	00010000 	.word	0x00010000

0000bb74 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    bb74:	b510      	push	{r4, lr}
    bb76:	4604      	mov	r4, r0
    bb78:	f000 f820 	bl	bbbc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
    bb7c:	2c00      	cmp	r4, #0
    bb7e:	d00e      	beq.n	bb9e <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2a>
    bb80:	4a0b      	ldr	r2, [pc, #44]	; (bbb0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    bb82:	480b      	ldr	r0, [pc, #44]	; (bbb0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    bb84:	490b      	ldr	r1, [pc, #44]	; (bbb4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    bb86:	3214      	adds	r2, #20
    bb88:	2c01      	cmp	r4, #1
    bb8a:	d005      	beq.n	bb98 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x24>
    bb8c:	2c02      	cmp	r4, #2
    bb8e:	d007      	beq.n	bba0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2c>
    bb90:	2181      	movs	r1, #129	; 0x81
    bb92:	203d      	movs	r0, #61	; 0x3d
    bb94:	f7f9 faec 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bb98:	2302      	movs	r3, #2
    bb9a:	6003      	str	r3, [r0, #0]
    bb9c:	6011      	str	r1, [r2, #0]
    bb9e:	bd10      	pop	{r4, pc}
    bba0:	2303      	movs	r3, #3
    bba2:	6003      	str	r3, [r0, #0]
    bba4:	6011      	str	r1, [r2, #0]
    bba6:	4904      	ldr	r1, [pc, #16]	; (bbb8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    bba8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    bbac:	6008      	str	r0, [r1, #0]
    bbae:	bd10      	pop	{r4, pc}
    bbb0:	4000f500 	.word	0x4000f500
    bbb4:	2000151f 	.word	0x2000151f
    bbb8:	4001f504 	.word	0x4001f504
    bbbc:	4805      	ldr	r0, [pc, #20]	; (bbd4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    bbbe:	b510      	push	{r4, lr}
    bbc0:	2100      	movs	r1, #0
    bbc2:	6001      	str	r1, [r0, #0]
    bbc4:	6001      	str	r1, [r0, #0]
    bbc6:	f7ff ff51 	bl	ba6c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    bbca:	4903      	ldr	r1, [pc, #12]	; (bbd8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    bbcc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    bbd0:	6008      	str	r0, [r1, #0]
    bbd2:	bd10      	pop	{r4, pc}
    bbd4:	4000f500 	.word	0x4000f500
    bbd8:	4001f508 	.word	0x4001f508

0000bbdc <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    bbdc:	4805      	ldr	r0, [pc, #20]	; (bbf4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    bbde:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    bbe2:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    bbe6:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    bbea:	2100      	movs	r1, #0
    bbec:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    bbf0:	4770      	bx	lr
    bbf2:	0000      	.short	0x0000
    bbf4:	40001000 	.word	0x40001000

0000bbf8 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    bbf8:	4904      	ldr	r1, [pc, #16]	; (bc0c <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    bbfa:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
    bbfe:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    bc02:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    bc06:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    bc0a:	4770      	bx	lr
    bc0c:	40001000 	.word	0x40001000

0000bc10 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>:
    bc10:	4801      	ldr	r0, [pc, #4]	; (bc18 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I+0x8>)
    bc12:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    bc16:	4770      	bx	lr
    bc18:	20000fd8 	.word	0x20000fd8

0000bc1c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    bc1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bc1e:	4c23      	ldr	r4, [pc, #140]	; (bcac <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x90>)
    bc20:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    bc24:	f010 0f10 	tst.w	r0, #16
    bc28:	d001      	beq.n	bc2e <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x12>
    bc2a:	2701      	movs	r7, #1
    bc2c:	e000      	b.n	bc30 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14>
    bc2e:	2700      	movs	r7, #0
    bc30:	2010      	movs	r0, #16
    bc32:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    bc36:	2002      	movs	r0, #2
    bc38:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    bc3c:	481c      	ldr	r0, [pc, #112]	; (bcb0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x94>)
    bc3e:	2500      	movs	r5, #0
    bc40:	491d      	ldr	r1, [pc, #116]	; (bcb8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>)
    bc42:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
    bc46:	481b      	ldr	r0, [pc, #108]	; (bcb4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x98>)
    bc48:	6008      	str	r0, [r1, #0]
    bc4a:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    bc4e:	f44f 7688 	mov.w	r6, #272	; 0x110
    bc52:	f010 0fff 	tst.w	r0, #255	; 0xff
    bc56:	d018      	beq.n	bc8a <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6e>
    bc58:	20ff      	movs	r0, #255	; 0xff
    bc5a:	f88d 0000 	strb.w	r0, [sp]
    bc5e:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    bc62:	2001      	movs	r0, #1
    bc64:	6120      	str	r0, [r4, #16]
    bc66:	e004      	b.n	bc72 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x56>
    bc68:	f89d 0000 	ldrb.w	r0, [sp]
    bc6c:	1e40      	subs	r0, r0, #1
    bc6e:	f88d 0000 	strb.w	r0, [sp]
    bc72:	f89d 0000 	ldrb.w	r0, [sp]
    bc76:	b128      	cbz	r0, bc84 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x68>
    bc78:	4631      	mov	r1, r6
    bc7a:	4620      	mov	r0, r4
    bc7c:	f005 fbae 	bl	113dc <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    bc80:	2800      	cmp	r0, #0
    bc82:	d0f1      	beq.n	bc68 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x4c>
    bc84:	f89d 0000 	ldrb.w	r0, [sp]
    bc88:	b158      	cbz	r0, bca2 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x86>
    bc8a:	f000 fccd 	bl	c628 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x108>
    bc8e:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    bc92:	f000 fe6f 	bl	c974 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x454>
    bc96:	2f00      	cmp	r7, #0
    bc98:	d002      	beq.n	bca0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x84>
    bc9a:	2010      	movs	r0, #16
    bc9c:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    bca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bca2:	f640 0171 	movw	r1, #2161	; 0x871
    bca6:	203e      	movs	r0, #62	; 0x3e
    bca8:	f7f9 fa62 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bcac:	40001000 	.word	0x40001000
    bcb0:	20000fd8 	.word	0x20000fd8
    bcb4:	0c0e0000 	.word	0x0c0e0000
    bcb8:	4001f508 	.word	0x4001f508

0000bcbc <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    bcbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bcc0:	4d20      	ldr	r5, [pc, #128]	; (bd44 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x88>)
    bcc2:	4607      	mov	r7, r0
    bcc4:	4688      	mov	r8, r1
    bcc6:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    bcca:	07c1      	lsls	r1, r0, #31
    bccc:	d018      	beq.n	bd00 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x44>
    bcce:	4a1e      	ldr	r2, [pc, #120]	; (bd48 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x8c>)
    bcd0:	f04f 6140 	mov.w	r1, #201326592	; 0xc000000
    bcd4:	6011      	str	r1, [r2, #0]
    bcd6:	4c1d      	ldr	r4, [pc, #116]	; (bd4c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x90>)
    bcd8:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
    bcdc:	f041 0101 	orr.w	r1, r1, #1
    bce0:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
    bce4:	f040 0002 	orr.w	r0, r0, #2
    bce8:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    bcec:	4640      	mov	r0, r8
    bcee:	f000 fa1b 	bl	c128 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    bcf2:	f000 fc37 	bl	c564 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    bcf6:	2601      	movs	r6, #1
    bcf8:	b13f      	cbz	r7, bd0a <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x4e>
    bcfa:	2f01      	cmp	r7, #1
    bcfc:	d00e      	beq.n	bd1c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x60>
    bcfe:	e016      	b.n	bd2e <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    bd00:	f240 7102 	movw	r1, #1794	; 0x702
    bd04:	203e      	movs	r0, #62	; 0x3e
    bd06:	f7f9 fa33 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bd0a:	4640      	mov	r0, r8
    bd0c:	f000 fc5a 	bl	c5c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    bd10:	4640      	mov	r0, r8
    bd12:	f000 fc0b 	bl	c52c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    bd16:	726e      	strb	r6, [r5, #9]
    bd18:	6026      	str	r6, [r4, #0]
    bd1a:	e008      	b.n	bd2e <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    bd1c:	f000 fc7a 	bl	c614 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    bd20:	f000 fdc4 	bl	c8ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38c>
    bd24:	2002      	movs	r0, #2
    bd26:	7268      	strb	r0, [r5, #9]
    bd28:	f000 fcb0 	bl	c68c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x16c>
    bd2c:	6066      	str	r6, [r4, #4]
    bd2e:	4808      	ldr	r0, [pc, #32]	; (bd50 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x94>)
    bd30:	64c6      	str	r6, [r0, #76]	; 0x4c
    bd32:	4807      	ldr	r0, [pc, #28]	; (bd50 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x94>)
    bd34:	300c      	adds	r0, #12
    bd36:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    bd3a:	4638      	mov	r0, r7
    bd3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    bd40:	f000 bdea 	b.w	c918 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f8>
    bd44:	20000fd8 	.word	0x20000fd8
    bd48:	4001f504 	.word	0x4001f504
    bd4c:	40001000 	.word	0x40001000
    bd50:	40008000 	.word	0x40008000

0000bd54 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    bd54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bd58:	4d32      	ldr	r5, [pc, #200]	; (be24 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xd0>)
    bd5a:	4606      	mov	r6, r0
    bd5c:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    bd60:	4689      	mov	r9, r1
    bd62:	6028      	str	r0, [r5, #0]
    bd64:	4c30      	ldr	r4, [pc, #192]	; (be28 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xd4>)
    bd66:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    bd6a:	f040 0002 	orr.w	r0, r0, #2
    bd6e:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    bd72:	4608      	mov	r0, r1
    bd74:	f000 f9d8 	bl	c128 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    bd78:	f000 fbf4 	bl	c564 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    bd7c:	f8df 80ac 	ldr.w	r8, [pc, #172]	; be2c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xd8>
    bd80:	2700      	movs	r7, #0
    bd82:	b116      	cbz	r6, bd8a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x36>
    bd84:	2e01      	cmp	r6, #1
    bd86:	d022      	beq.n	bdce <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x7a>
    bd88:	e03a      	b.n	be00 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xac>
    bd8a:	4648      	mov	r0, r9
    bd8c:	f000 fc1a 	bl	c5c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    bd90:	79e0      	ldrb	r0, [r4, #7]
    bd92:	2801      	cmp	r0, #1
    bd94:	d105      	bne.n	bda2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x4e>
    bd96:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    bd9a:	f041 0108 	orr.w	r1, r1, #8
    bd9e:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    bda2:	4648      	mov	r0, r9
    bda4:	f000 fbc2 	bl	c52c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    bda8:	2001      	movs	r0, #1
    bdaa:	7260      	strb	r0, [r4, #9]
    bdac:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    bdae:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    bdb2:	62a0      	str	r0, [r4, #40]	; 0x28
    bdb4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    bdb8:	6028      	str	r0, [r5, #0]
    bdba:	491d      	ldr	r1, [pc, #116]	; (be30 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xdc>)
    bdbc:	f831 0019 	ldrh.w	r0, [r1, r9, lsl #1]
    bdc0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    bdc4:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
    bdc8:	fbb0 f7f1 	udiv	r7, r0, r1
    bdcc:	e018      	b.n	be00 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xac>
    bdce:	f000 fc21 	bl	c614 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    bdd2:	f000 fd6b 	bl	c8ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38c>
    bdd6:	79e0      	ldrb	r0, [r4, #7]
    bdd8:	2801      	cmp	r0, #1
    bdda:	d105      	bne.n	bde8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x94>
    bddc:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    bde0:	f041 0104 	orr.w	r1, r1, #4
    bde4:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    bde8:	2002      	movs	r0, #2
    bdea:	7260      	strb	r0, [r4, #9]
    bdec:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    bdee:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    bdf2:	62a0      	str	r0, [r4, #40]	; 0x28
    bdf4:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    bdf8:	6028      	str	r0, [r5, #0]
    bdfa:	2729      	movs	r7, #41	; 0x29
    bdfc:	f000 fc46 	bl	c68c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x16c>
    be00:	f000 fc90 	bl	c724 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    be04:	f001 fa21 	bl	d24a <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>
    be08:	6800      	ldr	r0, [r0, #0]
    be0a:	2801      	cmp	r0, #1
    be0c:	d006      	beq.n	be1c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc8>
    be0e:	2100      	movs	r1, #0
    be10:	4630      	mov	r0, r6
    be12:	f000 fd81 	bl	c918 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f8>
    be16:	4638      	mov	r0, r7
    be18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    be1c:	f7ff fefe 	bl	bc1c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    be20:	2000      	movs	r0, #0
    be22:	e7f9      	b.n	be18 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc4>
    be24:	4001f504 	.word	0x4001f504
    be28:	20000fd8 	.word	0x20000fd8
    be2c:	40001000 	.word	0x40001000
    be30:	0000c9f4 	.word	0x0000c9f4

0000be34 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>:
    be34:	4a02      	ldr	r2, [pc, #8]	; (be40 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY+0xc>)
    be36:	6b13      	ldr	r3, [r2, #48]	; 0x30
    be38:	6003      	str	r3, [r0, #0]
    be3a:	6b50      	ldr	r0, [r2, #52]	; 0x34
    be3c:	6008      	str	r0, [r1, #0]
    be3e:	4770      	bx	lr
    be40:	20000fd8 	.word	0x20000fd8

0000be44 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    be44:	b510      	push	{r4, lr}
    be46:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    be48:	4901      	ldr	r1, [pc, #4]	; (be50 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    be4a:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    be4e:	bd10      	pop	{r4, pc}
    be50:	20000fc8 	.word	0x20000fc8

0000be54 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>:
    be54:	490f      	ldr	r1, [pc, #60]	; (be94 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x40>)
    be56:	b510      	push	{r4, lr}
    be58:	69ca      	ldr	r2, [r1, #28]
    be5a:	4282      	cmp	r2, r0
    be5c:	d302      	bcc.n	be64 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x10>
    be5e:	f640 01f7 	movw	r1, #2295	; 0x8f7
    be62:	e00b      	b.n	be7c <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x28>
    be64:	2201      	movs	r2, #1
    be66:	730a      	strb	r2, [r1, #12]
    be68:	6108      	str	r0, [r1, #16]
    be6a:	490b      	ldr	r1, [pc, #44]	; (be98 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x44>)
    be6c:	644a      	str	r2, [r1, #68]	; 0x44
    be6e:	1d0a      	adds	r2, r1, #4
    be70:	f8d2 3540 	ldr.w	r3, [r2, #1344]	; 0x540
    be74:	4283      	cmp	r3, r0
    be76:	d304      	bcc.n	be82 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x2e>
    be78:	f44f 6110 	mov.w	r1, #2304	; 0x900
    be7c:	203e      	movs	r0, #62	; 0x3e
    be7e:	f7f9 f977 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    be82:	2300      	movs	r3, #0
    be84:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144
    be88:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    be8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    be90:	f000 bd16 	b.w	c8c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a0>
    be94:	20000fd8 	.word	0x20000fd8
    be98:	40008000 	.word	0x40008000

0000be9c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    be9c:	b570      	push	{r4, r5, r6, lr}
    be9e:	4c0f      	ldr	r4, [pc, #60]	; (bedc <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x40>)
    bea0:	4603      	mov	r3, r0
    bea2:	2002      	movs	r0, #2
    bea4:	7320      	strb	r0, [r4, #12]
    bea6:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
    beaa:	2096      	movs	r0, #150	; 0x96
    beac:	f894 1020 	ldrb.w	r1, [r4, #32]
    beb0:	7d22      	ldrb	r2, [r4, #20]
    beb2:	2d01      	cmp	r5, #1
    beb4:	d00e      	beq.n	bed4 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x38>
    beb6:	f000 fdc5 	bl	ca44 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    beba:	6120      	str	r0, [r4, #16]
    bebc:	4808      	ldr	r0, [pc, #32]	; (bee0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    bebe:	2100      	movs	r1, #0
    bec0:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    bec4:	6921      	ldr	r1, [r4, #16]
    bec6:	69e0      	ldr	r0, [r4, #28]
    bec8:	4408      	add	r0, r1
    beca:	4905      	ldr	r1, [pc, #20]	; (bee0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    becc:	1d09      	adds	r1, r1, #4
    bece:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    bed2:	bd70      	pop	{r4, r5, r6, pc}
    bed4:	f000 fdd4 	bl	ca80 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    bed8:	e7ef      	b.n	beba <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x1e>
    beda:	0000      	.short	0x0000
    bedc:	20000fd8 	.word	0x20000fd8
    bee0:	40008000 	.word	0x40008000

0000bee4 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>:
    bee4:	b510      	push	{r4, lr}
    bee6:	f001 faf5 	bl	d4d4 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    beea:	2800      	cmp	r0, #0
    beec:	d006      	beq.n	befc <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x18>
    beee:	4804      	ldr	r0, [pc, #16]	; (bf00 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x1c>)
    bef0:	6801      	ldr	r1, [r0, #0]
    bef2:	f021 0101 	bic.w	r1, r1, #1
    bef6:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
    befa:	6001      	str	r1, [r0, #0]
    befc:	bd10      	pop	{r4, pc}
    befe:	0000      	.short	0x0000
    bf00:	40001774 	.word	0x40001774

0000bf04 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    bf04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bf08:	2238      	movs	r2, #56	; 0x38
    bf0a:	2100      	movs	r1, #0
    bf0c:	4813      	ldr	r0, [pc, #76]	; (bf5c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    bf0e:	f001 fb91 	bl	d634 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    bf12:	f000 fd2f 	bl	c974 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x454>
    bf16:	f001 fa96 	bl	d446 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    bf1a:	4d11      	ldr	r5, [pc, #68]	; (bf60 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    bf1c:	4e10      	ldr	r6, [pc, #64]	; (bf60 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    bf1e:	2400      	movs	r4, #0
    bf20:	4f0f      	ldr	r7, [pc, #60]	; (bf60 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    bf22:	3508      	adds	r5, #8
    bf24:	3610      	adds	r6, #16
    bf26:	b928      	cbnz	r0, bf34 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    bf28:	f001 faa4 	bl	d474 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    bf2c:	b910      	cbnz	r0, bf34 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    bf2e:	f001 faab 	bl	d488 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    bf32:	b108      	cbz	r0, bf38 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    bf34:	2224      	movs	r2, #36	; 0x24
    bf36:	e006      	b.n	bf46 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    bf38:	f001 fae6 	bl	d508 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    bf3c:	b910      	cbnz	r0, bf44 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    bf3e:	f001 fad9 	bl	d4f4 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    bf42:	b140      	cbz	r0, bf56 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    bf44:	2240      	movs	r2, #64	; 0x40
    bf46:	21ff      	movs	r1, #255	; 0xff
    bf48:	4638      	mov	r0, r7
    bf4a:	f001 fb73 	bl	d634 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    bf4e:	602c      	str	r4, [r5, #0]
    bf50:	6034      	str	r4, [r6, #0]
    bf52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bf56:	2238      	movs	r2, #56	; 0x38
    bf58:	e7f5      	b.n	bf46 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    bf5a:	0000      	.short	0x0000
    bf5c:	20000fd8 	.word	0x20000fd8
    bf60:	40000e00 	.word	0x40000e00

0000bf64 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    bf64:	4805      	ldr	r0, [pc, #20]	; (bf7c <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x18>)
    bf66:	b510      	push	{r4, lr}
    bf68:	69c0      	ldr	r0, [r0, #28]
    bf6a:	2800      	cmp	r0, #0
    bf6c:	d104      	bne.n	bf78 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x14>
    bf6e:	f240 2139 	movw	r1, #569	; 0x239
    bf72:	203e      	movs	r0, #62	; 0x3e
    bf74:	f7f9 f8fc 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bf78:	bd10      	pop	{r4, pc}
    bf7a:	0000      	.short	0x0000
    bf7c:	20000fd8 	.word	0x20000fd8

0000bf80 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>:
    bf80:	4805      	ldr	r0, [pc, #20]	; (bf98 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x18>)
    bf82:	b510      	push	{r4, lr}
    bf84:	6980      	ldr	r0, [r0, #24]
    bf86:	2800      	cmp	r0, #0
    bf88:	d104      	bne.n	bf94 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x14>
    bf8a:	f240 2133 	movw	r1, #563	; 0x233
    bf8e:	203e      	movs	r0, #62	; 0x3e
    bf90:	f7f9 f8ee 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bf94:	bd10      	pop	{r4, pc}
    bf96:	0000      	.short	0x0000
    bf98:	20000fd8 	.word	0x20000fd8

0000bf9c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    bf9c:	b510      	push	{r4, lr}
    bf9e:	f000 fc9d 	bl	c8dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3bc>
    bfa2:	f7ff fe3b 	bl	bc1c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    bfa6:	f7f8 ffa9 	bl	4efc <mpsl_fem_disable>
    bfaa:	b130      	cbz	r0, bfba <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    bfac:	1c40      	adds	r0, r0, #1
    bfae:	d004      	beq.n	bfba <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    bfb0:	f240 5102 	movw	r1, #1282	; 0x502
    bfb4:	203e      	movs	r0, #62	; 0x3e
    bfb6:	f7f9 f8db 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bfba:	480f      	ldr	r0, [pc, #60]	; (bff8 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x5c>)
    bfbc:	4a0f      	ldr	r2, [pc, #60]	; (bffc <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x60>)
    bfbe:	6a81      	ldr	r1, [r0, #40]	; 0x28
    bfc0:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    bfc4:	6011      	str	r1, [r2, #0]
    bfc6:	2400      	movs	r4, #0
    bfc8:	6284      	str	r4, [r0, #40]	; 0x28
    bfca:	7304      	strb	r4, [r0, #12]
    bfcc:	61c4      	str	r4, [r0, #28]
    bfce:	6184      	str	r4, [r0, #24]
    bfd0:	f000 fc84 	bl	c8dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3bc>
    bfd4:	480a      	ldr	r0, [pc, #40]	; (c000 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x64>)
    bfd6:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    bfda:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    bfde:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    bfe2:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    bfe6:	2001      	movs	r0, #1
    bfe8:	f005 f9e7 	bl	113ba <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    bfec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bff0:	2001      	movs	r0, #1
    bff2:	f005 b9d5 	b.w	113a0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    bff6:	0000      	.short	0x0000
    bff8:	20000fd8 	.word	0x20000fd8
    bffc:	4001f508 	.word	0x4001f508
    c000:	40008000 	.word	0x40008000

0000c004 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    c004:	b570      	push	{r4, r5, r6, lr}
    c006:	2001      	movs	r0, #1
    c008:	f005 f9d7 	bl	113ba <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    c00c:	4c37      	ldr	r4, [pc, #220]	; (c0ec <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    c00e:	2000      	movs	r0, #0
    c010:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    c014:	2001      	movs	r0, #1
    c016:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    c01a:	f001 fa4b 	bl	d4b4 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    c01e:	4d34      	ldr	r5, [pc, #208]	; (c0f0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    c020:	b118      	cbz	r0, c02a <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x26>
    c022:	6828      	ldr	r0, [r5, #0]
    c024:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    c028:	6028      	str	r0, [r5, #0]
    c02a:	f001 fa37 	bl	d49c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c02e:	b128      	cbz	r0, c03c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x38>
    c030:	6828      	ldr	r0, [r5, #0]
    c032:	4930      	ldr	r1, [pc, #192]	; (c0f4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    c034:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    c038:	4308      	orrs	r0, r1
    c03a:	6028      	str	r0, [r5, #0]
    c03c:	f001 fa4a 	bl	d4d4 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    c040:	b138      	cbz	r0, c052 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4e>
    c042:	482b      	ldr	r0, [pc, #172]	; (c0f0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    c044:	1d00      	adds	r0, r0, #4
    c046:	6801      	ldr	r1, [r0, #0]
    c048:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    c04c:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    c050:	6001      	str	r1, [r0, #0]
    c052:	4927      	ldr	r1, [pc, #156]	; (c0f0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    c054:	4828      	ldr	r0, [pc, #160]	; (c0f8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    c056:	313c      	adds	r1, #60	; 0x3c
    c058:	6008      	str	r0, [r1, #0]
    c05a:	f7f8 ff73 	bl	4f44 <mpsl_fem_device_config_254_apply_get>
    c05e:	b140      	cbz	r0, c072 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    c060:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c064:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    c068:	1c41      	adds	r1, r0, #1
    c06a:	d002      	beq.n	c072 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    c06c:	4920      	ldr	r1, [pc, #128]	; (c0f0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    c06e:	3110      	adds	r1, #16
    c070:	6008      	str	r0, [r1, #0]
    c072:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    c076:	6e00      	ldr	r0, [r0, #96]	; 0x60
    c078:	1c41      	adds	r1, r0, #1
    c07a:	d004      	beq.n	c086 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x82>
    c07c:	491f      	ldr	r1, [pc, #124]	; (c0fc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    c07e:	680a      	ldr	r2, [r1, #0]
    c080:	f360 4217 	bfi	r2, r0, #16, #8
    c084:	600a      	str	r2, [r1, #0]
    c086:	f240 1103 	movw	r1, #259	; 0x103
    c08a:	f240 605b 	movw	r0, #1627	; 0x65b
    c08e:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    c092:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    c096:	2001      	movs	r0, #1
    c098:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
    c09c:	f000 f844 	bl	c128 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    c0a0:	f240 2001 	movw	r0, #513	; 0x201
    c0a4:	f8c4 0650 	str.w	r0, [r4, #1616]	; 0x650
    c0a8:	2002      	movs	r0, #2
    c0aa:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    c0ae:	4915      	ldr	r1, [pc, #84]	; (c104 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    c0b0:	4813      	ldr	r0, [pc, #76]	; (c100 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    c0b2:	6008      	str	r0, [r1, #0]
    c0b4:	4914      	ldr	r1, [pc, #80]	; (c108 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    c0b6:	2000      	movs	r0, #0
    c0b8:	4d14      	ldr	r5, [pc, #80]	; (c10c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x108>)
    c0ba:	8608      	strh	r0, [r1, #48]	; 0x30
    c0bc:	3110      	adds	r1, #16
    c0be:	61c8      	str	r0, [r1, #28]
    c0c0:	f881 002c 	strb.w	r0, [r1, #44]	; 0x2c
    c0c4:	7028      	strb	r0, [r5, #0]
    c0c6:	2001      	movs	r0, #1
    c0c8:	f005 f96a 	bl	113a0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    c0cc:	2010      	movs	r0, #16
    c0ce:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    c0d2:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    c0d6:	2002      	movs	r0, #2
    c0d8:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    c0dc:	6868      	ldr	r0, [r5, #4]
    c0de:	2800      	cmp	r0, #0
    c0e0:	d002      	beq.n	c0e8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe4>
    c0e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c0e6:	4700      	bx	r0
    c0e8:	bd70      	pop	{r4, r5, r6, pc}
    c0ea:	0000      	.short	0x0000
    c0ec:	40001000 	.word	0x40001000
    c0f0:	4000173c 	.word	0x4000173c
    c0f4:	80000096 	.word	0x80000096
    c0f8:	8900002c 	.word	0x8900002c
    c0fc:	4000158c 	.word	0x4000158c
    c100:	0c0e0000 	.word	0x0c0e0000
    c104:	4001f508 	.word	0x4001f508
    c108:	20000fc8 	.word	0x20000fc8
    c10c:	20000278 	.word	0x20000278

0000c110 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    c110:	4901      	ldr	r1, [pc, #4]	; (c118 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    c112:	7548      	strb	r0, [r1, #21]
    c114:	4770      	bx	lr
    c116:	0000      	.short	0x0000
    c118:	20000fd8 	.word	0x20000fd8

0000c11c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    c11c:	4901      	ldr	r1, [pc, #4]	; (c124 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x8>)
    c11e:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    c122:	4770      	bx	lr
    c124:	0000ca20 	.word	0x0000ca20

0000c128 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>:
    c128:	4908      	ldr	r1, [pc, #32]	; (c14c <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x24>)
    c12a:	b510      	push	{r4, lr}
    c12c:	7508      	strb	r0, [r1, #20]
    c12e:	4908      	ldr	r1, [pc, #32]	; (c150 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x28>)
    c130:	2801      	cmp	r0, #1
    c132:	d006      	beq.n	c142 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1a>
    c134:	2802      	cmp	r0, #2
    c136:	d006      	beq.n	c146 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1e>
    c138:	f640 41e8 	movw	r1, #3304	; 0xce8
    c13c:	203e      	movs	r0, #62	; 0x3e
    c13e:	f7f9 f817 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c142:	2003      	movs	r0, #3
    c144:	e000      	b.n	c148 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x20>
    c146:	2004      	movs	r0, #4
    c148:	6008      	str	r0, [r1, #0]
    c14a:	bd10      	pop	{r4, pc}
    c14c:	20000fd8 	.word	0x20000fd8
    c150:	40001510 	.word	0x40001510

0000c154 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    c154:	4905      	ldr	r1, [pc, #20]	; (c16c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    c156:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    c15a:	4805      	ldr	r0, [pc, #20]	; (c170 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x1c>)
    c15c:	f810 1f2c 	ldrb.w	r1, [r0, #44]!
    c160:	f041 0101 	orr.w	r1, r1, #1
    c164:	7001      	strb	r1, [r0, #0]
    c166:	f000 baa3 	b.w	c6b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x190>
    c16a:	0000      	.short	0x0000
    c16c:	40001000 	.word	0x40001000
    c170:	20000fd8 	.word	0x20000fd8

0000c174 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    c174:	4901      	ldr	r1, [pc, #4]	; (c17c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x8>)
    c176:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    c17a:	4770      	bx	lr
    c17c:	0000ca2c 	.word	0x0000ca2c

0000c180 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    c180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c184:	4e32      	ldr	r6, [pc, #200]	; (c250 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd0>)
    c186:	4607      	mov	r7, r0
    c188:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    c18c:	4689      	mov	r9, r1
    c18e:	4614      	mov	r4, r2
    c190:	6030      	str	r0, [r6, #0]
    c192:	4610      	mov	r0, r2
    c194:	f7ff ffc8 	bl	c128 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    c198:	f000 f9e4 	bl	c564 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    c19c:	f8df a0b4 	ldr.w	sl, [pc, #180]	; c254 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>
    c1a0:	4d2d      	ldr	r5, [pc, #180]	; (c258 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd8>)
    c1a2:	f04f 0801 	mov.w	r8, #1
    c1a6:	b127      	cbz	r7, c1b2 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x32>
    c1a8:	2f01      	cmp	r7, #1
    c1aa:	d015      	beq.n	c1d8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x58>
    c1ac:	f240 71f1 	movw	r1, #2033	; 0x7f1
    c1b0:	e044      	b.n	c23c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xbc>
    c1b2:	4620      	mov	r0, r4
    c1b4:	f000 fa06 	bl	c5c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    c1b8:	4620      	mov	r0, r4
    c1ba:	f000 f9b7 	bl	c52c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    c1be:	4827      	ldr	r0, [pc, #156]	; (c25c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xdc>)
    c1c0:	f830 1014 	ldrh.w	r1, [r0, r4, lsl #1]
    c1c4:	4648      	mov	r0, r9
    c1c6:	f000 fbdd 	bl	c984 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x464>
    c1ca:	4604      	mov	r4, r0
    c1cc:	4650      	mov	r0, sl
    c1ce:	f000 fb97 	bl	c900 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3e0>
    c1d2:	f885 8009 	strb.w	r8, [r5, #9]
    c1d6:	e011      	b.n	c1fc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x7c>
    c1d8:	f000 fa1c 	bl	c614 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    c1dc:	f000 fb66 	bl	c8ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38c>
    c1e0:	f000 fa54 	bl	c68c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x16c>
    c1e4:	f649 71ba 	movw	r1, #40890	; 0x9fba
    c1e8:	4648      	mov	r0, r9
    c1ea:	f000 fbcb 	bl	c984 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x464>
    c1ee:	4604      	mov	r4, r0
    c1f0:	4818      	ldr	r0, [pc, #96]	; (c254 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>)
    c1f2:	1d00      	adds	r0, r0, #4
    c1f4:	f000 fb84 	bl	c900 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3e0>
    c1f8:	2002      	movs	r0, #2
    c1fa:	7268      	strb	r0, [r5, #9]
    c1fc:	f8df 9060 	ldr.w	r9, [pc, #96]	; c260 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>
    c200:	f8c9 4540 	str.w	r4, [r9, #1344]	; 0x540
    c204:	4918      	ldr	r1, [pc, #96]	; (c268 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe8>)
    c206:	4817      	ldr	r0, [pc, #92]	; (c264 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe4>)
    c208:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    c20c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    c20e:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    c212:	62a8      	str	r0, [r5, #40]	; 0x28
    c214:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    c218:	6030      	str	r0, [r6, #0]
    c21a:	2010      	movs	r0, #16
    c21c:	f8ca 0304 	str.w	r0, [sl, #772]	; 0x304
    c220:	03c0      	lsls	r0, r0, #15
    c222:	6030      	str	r0, [r6, #0]
    c224:	f000 fa7e 	bl	c724 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    c228:	f8c9 804c 	str.w	r8, [r9, #76]	; 0x4c
    c22c:	480c      	ldr	r0, [pc, #48]	; (c260 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    c22e:	300c      	adds	r0, #12
    c230:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    c234:	42a0      	cmp	r0, r4
    c236:	d304      	bcc.n	c242 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc2>
    c238:	f640 0118 	movw	r1, #2072	; 0x818
    c23c:	203e      	movs	r0, #62	; 0x3e
    c23e:	f7f8 ff97 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c242:	4621      	mov	r1, r4
    c244:	4638      	mov	r0, r7
    c246:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c24a:	f000 bb65 	b.w	c918 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f8>
    c24e:	0000      	.short	0x0000
    c250:	4001f504 	.word	0x4001f504
    c254:	40001000 	.word	0x40001000
    c258:	20000fd8 	.word	0x20000fd8
    c25c:	0000c9f4 	.word	0x0000c9f4
    c260:	40008000 	.word	0x40008000
    c264:	40008140 	.word	0x40008140
    c268:	4001f098 	.word	0x4001f098

0000c26c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    c26c:	4b0d      	ldr	r3, [pc, #52]	; (c2a4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    c26e:	b510      	push	{r4, lr}
    c270:	71d8      	strb	r0, [r3, #7]
    c272:	729a      	strb	r2, [r3, #10]
    c274:	b151      	cbz	r1, c28c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    c276:	2002      	movs	r0, #2
    c278:	7218      	strb	r0, [r3, #8]
    c27a:	2801      	cmp	r0, #1
    c27c:	d008      	beq.n	c290 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    c27e:	2802      	cmp	r0, #2
    c280:	d00f      	beq.n	c2a2 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    c282:	f640 210d 	movw	r1, #2573	; 0xa0d
    c286:	203e      	movs	r0, #62	; 0x3e
    c288:	f7f8 ff72 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c28c:	2001      	movs	r0, #1
    c28e:	e7f3      	b.n	c278 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    c290:	7a58      	ldrb	r0, [r3, #9]
    c292:	2802      	cmp	r0, #2
    c294:	d105      	bne.n	c2a2 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    c296:	f000 f9bd 	bl	c614 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    c29a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c29e:	f000 bb05 	b.w	c8ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38c>
    c2a2:	bd10      	pop	{r4, pc}
    c2a4:	20000fd8 	.word	0x20000fd8

0000c2a8 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
    c2a8:	4902      	ldr	r1, [pc, #8]	; (c2b4 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0xc>)
    c2aa:	2000      	movs	r0, #0
    c2ac:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    c2b0:	4770      	bx	lr
    c2b2:	0000      	.short	0x0000
    c2b4:	40008000 	.word	0x40008000

0000c2b8 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    c2b8:	4904      	ldr	r1, [pc, #16]	; (c2cc <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x14>)
    c2ba:	f8d1 1548 	ldr.w	r1, [r1, #1352]	; 0x548
    c2be:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    c2c2:	4249      	negs	r1, r1
    c2c4:	7001      	strb	r1, [r0, #0]
    c2c6:	2001      	movs	r0, #1
    c2c8:	4770      	bx	lr
    c2ca:	0000      	.short	0x0000
    c2cc:	40001000 	.word	0x40001000

0000c2d0 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    c2d0:	4903      	ldr	r1, [pc, #12]	; (c2e0 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    c2d2:	0e02      	lsrs	r2, r0, #24
    c2d4:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
    c2d8:	0200      	lsls	r0, r0, #8
    c2da:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
    c2de:	4770      	bx	lr
    c2e0:	40001000 	.word	0x40001000

0000c2e4 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    c2e4:	6800      	ldr	r0, [r0, #0]
    c2e6:	4903      	ldr	r1, [pc, #12]	; (c2f4 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x10>)
    c2e8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    c2ec:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    c2f0:	4770      	bx	lr
    c2f2:	0000      	.short	0x0000
    c2f4:	40001000 	.word	0x40001000

0000c2f8 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>:
    c2f8:	b510      	push	{r4, lr}
    c2fa:	2200      	movs	r2, #0
    c2fc:	2901      	cmp	r1, #1
    c2fe:	d006      	beq.n	c30e <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x16>
    c300:	2902      	cmp	r1, #2
    c302:	d002      	beq.n	c30a <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x12>
    c304:	f240 219d 	movw	r1, #669	; 0x29d
    c308:	e014      	b.n	c334 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x3c>
    c30a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    c30e:	490b      	ldr	r1, [pc, #44]	; (c33c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x44>)
    c310:	430a      	orrs	r2, r1
    c312:	490b      	ldr	r1, [pc, #44]	; (c340 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    c314:	600a      	str	r2, [r1, #0]
    c316:	490b      	ldr	r1, [pc, #44]	; (c344 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x4c>)
    c318:	4308      	orrs	r0, r1
    c31a:	4909      	ldr	r1, [pc, #36]	; (c340 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    c31c:	1d09      	adds	r1, r1, #4
    c31e:	6008      	str	r0, [r1, #0]
    c320:	4809      	ldr	r0, [pc, #36]	; (c348 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x50>)
    c322:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    c326:	b2c0      	uxtb	r0, r0
    c328:	2803      	cmp	r0, #3
    c32a:	d001      	beq.n	c330 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x38>
    c32c:	280b      	cmp	r0, #11
    c32e:	d104      	bne.n	c33a <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x42>
    c330:	f240 21b5 	movw	r1, #693	; 0x2b5
    c334:	203e      	movs	r0, #62	; 0x3e
    c336:	f7f8 ff1b 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c33a:	bd10      	pop	{r4, pc}
    c33c:	00100108 	.word	0x00100108
    c340:	40001514 	.word	0x40001514
    c344:	02030000 	.word	0x02030000
    c348:	40001000 	.word	0x40001000

0000c34c <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    c34c:	4901      	ldr	r1, [pc, #4]	; (c354 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    c34e:	7588      	strb	r0, [r1, #22]
    c350:	4770      	bx	lr
    c352:	0000      	.short	0x0000
    c354:	20000fd8 	.word	0x20000fd8

0000c358 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    c358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c35c:	4853      	ldr	r0, [pc, #332]	; (c4ac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    c35e:	f04f 0a01 	mov.w	sl, #1
    c362:	f8c0 a04c 	str.w	sl, [r0, #76]	; 0x4c
    c366:	4851      	ldr	r0, [pc, #324]	; (c4ac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    c368:	300c      	adds	r0, #12
    c36a:	f8d0 7540 	ldr.w	r7, [r0, #1344]	; 0x540
    c36e:	f7f7 fd51 	bl	3e14 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    c372:	4d4f      	ldr	r5, [pc, #316]	; (c4b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    c374:	e9c5 070c 	strd	r0, r7, [r5, #48]	; 0x30
    c378:	f000 f956 	bl	c628 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x108>
    c37c:	494d      	ldr	r1, [pc, #308]	; (c4b4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    c37e:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    c380:	6008      	str	r0, [r1, #0]
    c382:	f8df 9134 	ldr.w	r9, [pc, #308]	; c4b8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>
    c386:	2600      	movs	r6, #0
    c388:	62ae      	str	r6, [r5, #40]	; 0x28
    c38a:	f8d9 1200 	ldr.w	r1, [r9, #512]	; 0x200
    c38e:	f240 121d 	movw	r2, #285	; 0x11d
    c392:	4391      	bics	r1, r2
    c394:	f8c9 1200 	str.w	r1, [r9, #512]	; 0x200
    c398:	f885 602c 	strb.w	r6, [r5, #44]	; 0x2c
    c39c:	f000 f9d6 	bl	c74c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x22c>
    c3a0:	4604      	mov	r4, r0
    c3a2:	4842      	ldr	r0, [pc, #264]	; (c4ac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    c3a4:	3008      	adds	r0, #8
    c3a6:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    c3aa:	61e8      	str	r0, [r5, #28]
    c3ac:	f895 0021 	ldrb.w	r0, [r5, #33]	; 0x21
    c3b0:	7d28      	ldrb	r0, [r5, #20]
    c3b2:	f885 0020 	strb.w	r0, [r5, #32]
    c3b6:	7a68      	ldrb	r0, [r5, #9]
    c3b8:	f885 0021 	strb.w	r0, [r5, #33]	; 0x21
    c3bc:	61ae      	str	r6, [r5, #24]
    c3be:	4e3f      	ldr	r6, [pc, #252]	; (c4bc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x164>)
    c3c0:	07a0      	lsls	r0, r4, #30
    c3c2:	d502      	bpl.n	c3ca <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x72>
    c3c4:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    c3c8:	61a8      	str	r0, [r5, #24]
    c3ca:	0720      	lsls	r0, r4, #28
    c3cc:	d502      	bpl.n	c3d4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x7c>
    c3ce:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    c3d2:	61a8      	str	r0, [r5, #24]
    c3d4:	f04f 0800 	mov.w	r8, #0
    c3d8:	4639      	mov	r1, r7
    c3da:	4620      	mov	r0, r4
    c3dc:	f000 fa2c 	bl	c838 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x318>
    c3e0:	b918      	cbnz	r0, c3ea <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x92>
    c3e2:	f8c9 a010 	str.w	sl, [r9, #16]
    c3e6:	f04f 0801 	mov.w	r8, #1
    c3ea:	4f31      	ldr	r7, [pc, #196]	; (c4b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    c3ec:	07e0      	lsls	r0, r4, #31
    c3ee:	f1a7 0710 	sub.w	r7, r7, #16
    c3f2:	d002      	beq.n	c3fa <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xa2>
    c3f4:	6838      	ldr	r0, [r7, #0]
    c3f6:	4780      	blx	r0
    c3f8:	e032      	b.n	c460 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x108>
    c3fa:	07a0      	lsls	r0, r4, #30
    c3fc:	d527      	bpl.n	c44e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf6>
    c3fe:	0760      	lsls	r0, r4, #29
    c400:	d41f      	bmi.n	c442 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xea>
    c402:	f001 f867 	bl	d4d4 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    c406:	b9e0      	cbnz	r0, c442 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xea>
    c408:	f001 f854 	bl	d4b4 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    c40c:	b9c8      	cbnz	r0, c442 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xea>
    c40e:	482c      	ldr	r0, [pc, #176]	; (c4c0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x168>)
    c410:	6800      	ldr	r0, [r0, #0]
    c412:	f3c0 5342 	ubfx	r3, r0, #21, #3
    c416:	f3c0 6200 	ubfx	r2, r0, #24, #1
    c41a:	f000 010f 	and.w	r1, r0, #15
    c41e:	f3c0 1c03 	ubfx	ip, r0, #4, #4
    c422:	f3c0 2003 	ubfx	r0, r0, #8, #4
    c426:	b162      	cbz	r2, c442 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xea>
    c428:	b119      	cbz	r1, c432 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    c42a:	f1bc 0f00 	cmp.w	ip, #0
    c42e:	d000      	beq.n	c432 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    c430:	b938      	cbnz	r0, c442 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xea>
    c432:	4823      	ldr	r0, [pc, #140]	; (c4c0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x168>)
    c434:	1d00      	adds	r0, r0, #4
    c436:	6800      	ldr	r0, [r0, #0]
    c438:	b118      	cbz	r0, c442 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xea>
    c43a:	2b03      	cmp	r3, #3
    c43c:	d201      	bcs.n	c442 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xea>
    c43e:	f044 0404 	orr.w	r4, r4, #4
    c442:	f344 0080 	sbfx	r0, r4, #2, #1
    c446:	4641      	mov	r1, r8
    c448:	1c40      	adds	r0, r0, #1
    c44a:	687a      	ldr	r2, [r7, #4]
    c44c:	e007      	b.n	c45e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x106>
    c44e:	f014 0f28 	tst.w	r4, #40	; 0x28
    c452:	d005      	beq.n	c460 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x108>
    c454:	f344 1140 	sbfx	r1, r4, #5, #1
    c458:	68ba      	ldr	r2, [r7, #8]
    c45a:	4640      	mov	r0, r8
    c45c:	1c49      	adds	r1, r1, #1
    c45e:	4790      	blx	r2
    c460:	06e0      	lsls	r0, r4, #27
    c462:	d501      	bpl.n	c468 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x110>
    c464:	68f8      	ldr	r0, [r7, #12]
    c466:	4780      	blx	r0
    c468:	7a68      	ldrb	r0, [r5, #9]
    c46a:	2802      	cmp	r0, #2
    c46c:	d11c      	bne.n	c4a8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>
    c46e:	7b28      	ldrb	r0, [r5, #12]
    c470:	2800      	cmp	r0, #0
    c472:	d019      	beq.n	c4a8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>
    c474:	2802      	cmp	r0, #2
    c476:	d004      	beq.n	c482 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x12a>
    c478:	2801      	cmp	r0, #1
    c47a:	d006      	beq.n	c48a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x132>
    c47c:	f640 31e3 	movw	r1, #3043	; 0xbe3
    c480:	e009      	b.n	c496 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13e>
    c482:	6929      	ldr	r1, [r5, #16]
    c484:	69e8      	ldr	r0, [r5, #28]
    c486:	4408      	add	r0, r1
    c488:	e008      	b.n	c49c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x144>
    c48a:	69e9      	ldr	r1, [r5, #28]
    c48c:	6928      	ldr	r0, [r5, #16]
    c48e:	4288      	cmp	r0, r1
    c490:	d804      	bhi.n	c49c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x144>
    c492:	f640 31e4 	movw	r1, #3044	; 0xbe4
    c496:	203e      	movs	r0, #62	; 0x3e
    c498:	f7f8 fe6a 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c49c:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    c4a0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c4a4:	f000 ba0c 	b.w	c8c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a0>
    c4a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c4ac:	40008000 	.word	0x40008000
    c4b0:	20000fd8 	.word	0x20000fd8
    c4b4:	4001f508 	.word	0x4001f508
    c4b8:	40001000 	.word	0x40001000
    c4bc:	40008004 	.word	0x40008004
    c4c0:	40001450 	.word	0x40001450

0000c4c4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    c4c4:	b570      	push	{r4, r5, r6, lr}
    c4c6:	4b15      	ldr	r3, [pc, #84]	; (c51c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x58>)
    c4c8:	888c      	ldrh	r4, [r1, #4]
    c4ca:	eb03 0580 	add.w	r5, r3, r0, lsl #2
    c4ce:	f8c5 4620 	str.w	r4, [r5, #1568]	; 0x620
    c4d2:	780c      	ldrb	r4, [r1, #0]
    c4d4:	f8d1 1001 	ldr.w	r1, [r1, #1]
    c4d8:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    c4dc:	f8c5 1600 	str.w	r1, [r5, #1536]	; 0x600
    c4e0:	f8d3 4640 	ldr.w	r4, [r3, #1600]	; 0x640
    c4e4:	2101      	movs	r1, #1
    c4e6:	4081      	lsls	r1, r0
    c4e8:	430c      	orrs	r4, r1
    c4ea:	b2e4      	uxtb	r4, r4
    c4ec:	b132      	cbz	r2, c4fc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x38>
    c4ee:	2a01      	cmp	r2, #1
    c4f0:	d00a      	beq.n	c508 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x44>
    c4f2:	f240 5164 	movw	r1, #1380	; 0x564
    c4f6:	203e      	movs	r0, #62	; 0x3e
    c4f8:	f7f8 fe3a 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c4fc:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    c500:	f3c0 2007 	ubfx	r0, r0, #8, #8
    c504:	4388      	bics	r0, r1
    c506:	e004      	b.n	c512 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4e>
    c508:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    c50c:	ea41 2010 	orr.w	r0, r1, r0, lsr #8
    c510:	b2c0      	uxtb	r0, r0
    c512:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
    c516:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
    c51a:	bd70      	pop	{r4, r5, r6, pc}
    c51c:	40001000 	.word	0x40001000

0000c520 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>:
    c520:	4901      	ldr	r1, [pc, #4]	; (c528 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8>)
    c522:	2001      	movs	r0, #1
    c524:	7008      	strb	r0, [r1, #0]
    c526:	4770      	bx	lr
    c528:	20000278 	.word	0x20000278
    c52c:	b510      	push	{r4, lr}
    c52e:	4604      	mov	r4, r0
    c530:	f000 ffd0 	bl	d4d4 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    c534:	2800      	cmp	r0, #0
    c536:	d00e      	beq.n	c556 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x36>
    c538:	4a09      	ldr	r2, [pc, #36]	; (c560 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x40>)
    c53a:	6811      	ldr	r1, [r2, #0]
    c53c:	0650      	lsls	r0, r2, #25
    c53e:	2c02      	cmp	r4, #2
    c540:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    c544:	d008      	beq.n	c558 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38>
    c546:	f3c0 2006 	ubfx	r0, r0, #8, #7
    c54a:	bf00      	nop
    c54c:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    c550:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    c554:	6010      	str	r0, [r2, #0]
    c556:	bd10      	pop	{r4, pc}
    c558:	f3c0 6006 	ubfx	r0, r0, #24, #7
    c55c:	e7f6      	b.n	c54c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c>
    c55e:	0000      	.short	0x0000
    c560:	40001588 	.word	0x40001588
    c564:	4815      	ldr	r0, [pc, #84]	; (c5bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x9c>)
    c566:	7d81      	ldrb	r1, [r0, #22]
    c568:	2925      	cmp	r1, #37	; 0x25
    c56a:	d00a      	beq.n	c582 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x62>
    c56c:	2926      	cmp	r1, #38	; 0x26
    c56e:	d00b      	beq.n	c588 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x68>
    c570:	2927      	cmp	r1, #39	; 0x27
    c572:	d00c      	beq.n	c58e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x6e>
    c574:	7d80      	ldrb	r0, [r0, #22]
    c576:	0040      	lsls	r0, r0, #1
    c578:	290a      	cmp	r1, #10
    c57a:	d80b      	bhi.n	c594 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x74>
    c57c:	f600 1064 	addw	r0, r0, #2404	; 0x964
    c580:	e00a      	b.n	c598 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x78>
    c582:	f640 1062 	movw	r0, #2402	; 0x962
    c586:	e00f      	b.n	c5a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    c588:	f640 107a 	movw	r0, #2426	; 0x97a
    c58c:	e00c      	b.n	c5a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    c58e:	f44f 601b 	mov.w	r0, #2480	; 0x9b0
    c592:	e009      	b.n	c5a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    c594:	f600 1066 	addw	r0, r0, #2406	; 0x966
    c598:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    c59c:	d204      	bcs.n	c5a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    c59e:	f6a0 1038 	subw	r0, r0, #2360	; 0x938
    c5a2:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    c5a6:	e001      	b.n	c5ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8c>
    c5a8:	f5a0 6016 	sub.w	r0, r0, #2400	; 0x960
    c5ac:	4a04      	ldr	r2, [pc, #16]	; (c5c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa0>)
    c5ae:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    c5b2:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    c5b6:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
    c5ba:	4770      	bx	lr
    c5bc:	20000fd8 	.word	0x20000fd8
    c5c0:	40001000 	.word	0x40001000
    c5c4:	4912      	ldr	r1, [pc, #72]	; (c610 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf0>)
    c5c6:	b508      	push	{r3, lr}
    c5c8:	f991 2015 	ldrsb.w	r2, [r1, #21]
    c5cc:	7d89      	ldrb	r1, [r1, #22]
    c5ce:	2801      	cmp	r0, #1
    c5d0:	d00a      	beq.n	c5e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc8>
    c5d2:	2802      	cmp	r0, #2
    c5d4:	d00a      	beq.n	c5ec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xcc>
    c5d6:	2804      	cmp	r0, #4
    c5d8:	d00a      	beq.n	c5f0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd0>
    c5da:	2808      	cmp	r0, #8
    c5dc:	d00a      	beq.n	c5f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd4>
    c5de:	f240 31fe 	movw	r1, #1022	; 0x3fe
    c5e2:	2006      	movs	r0, #6
    c5e4:	f7f8 fdc4 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c5e8:	2000      	movs	r0, #0
    c5ea:	e004      	b.n	c5f6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd6>
    c5ec:	2001      	movs	r0, #1
    c5ee:	e002      	b.n	c5f6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd6>
    c5f0:	2003      	movs	r0, #3
    c5f2:	e000      	b.n	c5f6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd6>
    c5f4:	2002      	movs	r0, #2
    c5f6:	466b      	mov	r3, sp
    c5f8:	f7f5 f8a4 	bl	1744 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    c5fc:	b118      	cbz	r0, c606 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xe6>
    c5fe:	f240 5196 	movw	r1, #1430	; 0x596
    c602:	203e      	movs	r0, #62	; 0x3e
    c604:	e7ee      	b.n	c5e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc4>
    c606:	f99d 0000 	ldrsb.w	r0, [sp]
    c60a:	f000 fa59 	bl	cac0 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    c60e:	bd08      	pop	{r3, pc}
    c610:	20000fd8 	.word	0x20000fd8
    c614:	4803      	ldr	r0, [pc, #12]	; (c624 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x104>)
    c616:	7a01      	ldrb	r1, [r0, #8]
    c618:	2901      	cmp	r1, #1
    c61a:	d102      	bne.n	c622 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x102>
    c61c:	7a80      	ldrb	r0, [r0, #10]
    c61e:	f7ff bfd1 	b.w	c5c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    c622:	4770      	bx	lr
    c624:	20000fd8 	.word	0x20000fd8
    c628:	480d      	ldr	r0, [pc, #52]	; (c660 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x140>)
    c62a:	b510      	push	{r4, lr}
    c62c:	7a40      	ldrb	r0, [r0, #9]
    c62e:	2801      	cmp	r0, #1
    c630:	d00c      	beq.n	c64c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x12c>
    c632:	2802      	cmp	r0, #2
    c634:	d113      	bne.n	c65e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x13e>
    c636:	f7f8 fc67 	bl	4f08 <mpsl_fem_lna_configuration_clear>
    c63a:	2800      	cmp	r0, #0
    c63c:	d00f      	beq.n	c65e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x13e>
    c63e:	1c40      	adds	r0, r0, #1
    c640:	d00d      	beq.n	c65e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x13e>
    c642:	f640 0188 	movw	r1, #2184	; 0x888
    c646:	203e      	movs	r0, #62	; 0x3e
    c648:	f7f8 fd92 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c64c:	f7f8 fc68 	bl	4f20 <mpsl_fem_pa_configuration_clear>
    c650:	2800      	cmp	r0, #0
    c652:	d004      	beq.n	c65e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x13e>
    c654:	1c40      	adds	r0, r0, #1
    c656:	d002      	beq.n	c65e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x13e>
    c658:	f640 0182 	movw	r1, #2178	; 0x882
    c65c:	e7f3      	b.n	c646 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x126>
    c65e:	bd10      	pop	{r4, pc}
    c660:	20000fd8 	.word	0x20000fd8
    c664:	4808      	ldr	r0, [pc, #32]	; (c688 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x168>)
    c666:	2100      	movs	r1, #0
    c668:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    c66c:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    c670:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    c674:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    c678:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    c67c:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    c680:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    c684:	4770      	bx	lr
    c686:	0000      	.short	0x0000
    c688:	40001000 	.word	0x40001000
    c68c:	b510      	push	{r4, lr}
    c68e:	f000 ff21 	bl	d4d4 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    c692:	2800      	cmp	r0, #0
    c694:	d108      	bne.n	c6a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x188>
    c696:	f000 ff0d 	bl	d4b4 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    c69a:	2800      	cmp	r0, #0
    c69c:	d104      	bne.n	c6a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x188>
    c69e:	4803      	ldr	r0, [pc, #12]	; (c6ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18c>)
    c6a0:	6801      	ldr	r1, [r0, #0]
    c6a2:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    c6a6:	6001      	str	r1, [r0, #0]
    c6a8:	bd10      	pop	{r4, pc}
    c6aa:	0000      	.short	0x0000
    c6ac:	40001568 	.word	0x40001568
    c6b0:	4818      	ldr	r0, [pc, #96]	; (c714 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1f4>)
    c6b2:	b510      	push	{r4, lr}
    c6b4:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    c6b8:	07c1      	lsls	r1, r0, #31
    c6ba:	d029      	beq.n	c710 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1f0>
    c6bc:	0781      	lsls	r1, r0, #30
    c6be:	d514      	bpl.n	c6ea <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ca>
    c6c0:	4815      	ldr	r0, [pc, #84]	; (c718 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1f8>)
    c6c2:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    c6c6:	f041 0101 	orr.w	r1, r1, #1
    c6ca:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c6ce:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    c6d2:	b2c0      	uxtb	r0, r0
    c6d4:	280b      	cmp	r0, #11
    c6d6:	d005      	beq.n	c6e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c4>
    c6d8:	280a      	cmp	r0, #10
    c6da:	d003      	beq.n	c6e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c4>
    c6dc:	2803      	cmp	r0, #3
    c6de:	d001      	beq.n	c6e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c4>
    c6e0:	2802      	cmp	r0, #2
    c6e2:	d115      	bne.n	c710 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1f0>
    c6e4:	f240 51c7 	movw	r1, #1479	; 0x5c7
    c6e8:	e00f      	b.n	c70a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ea>
    c6ea:	0740      	lsls	r0, r0, #29
    c6ec:	d510      	bpl.n	c710 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1f0>
    c6ee:	480a      	ldr	r0, [pc, #40]	; (c718 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1f8>)
    c6f0:	490a      	ldr	r1, [pc, #40]	; (c71c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1fc>)
    c6f2:	3008      	adds	r0, #8
    c6f4:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    c6f8:	f44f 71a0 	mov.w	r1, #320	; 0x140
    c6fc:	4808      	ldr	r0, [pc, #32]	; (c720 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x200>)
    c6fe:	f004 fe72 	bl	113e6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    c702:	2800      	cmp	r0, #0
    c704:	d004      	beq.n	c710 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1f0>
    c706:	f240 51cf 	movw	r1, #1487	; 0x5cf
    c70a:	203e      	movs	r0, #62	; 0x3e
    c70c:	f7f8 fd30 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c710:	bd10      	pop	{r4, pc}
    c712:	0000      	.short	0x0000
    c714:	20000fd8 	.word	0x20000fd8
    c718:	40001000 	.word	0x40001000
    c71c:	4001f098 	.word	0x4001f098
    c720:	40008000 	.word	0x40008000
    c724:	4808      	ldr	r0, [pc, #32]	; (c748 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x228>)
    c726:	4601      	mov	r1, r0
    c728:	79c2      	ldrb	r2, [r0, #7]
    c72a:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
    c72e:	b112      	cbz	r2, c736 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x216>
    c730:	2a01      	cmp	r2, #1
    c732:	d003      	beq.n	c73c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x21c>
    c734:	e006      	b.n	c744 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    c736:	f041 0102 	orr.w	r1, r1, #2
    c73a:	e001      	b.n	c740 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x220>
    c73c:	f041 0104 	orr.w	r1, r1, #4
    c740:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    c744:	f7ff bfb4 	b.w	c6b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x190>
    c748:	20000fd8 	.word	0x20000fd8
    c74c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c750:	4d35      	ldr	r5, [pc, #212]	; (c828 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x308>)
    c752:	2400      	movs	r4, #0
    c754:	7b28      	ldrb	r0, [r5, #12]
    c756:	b138      	cbz	r0, c768 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x248>
    c758:	f44f 71a2 	mov.w	r1, #324	; 0x144
    c75c:	4833      	ldr	r0, [pc, #204]	; (c82c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x30c>)
    c75e:	f004 fe42 	bl	113e6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    c762:	b108      	cbz	r0, c768 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x248>
    c764:	2601      	movs	r6, #1
    c766:	e000      	b.n	c76a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x24a>
    c768:	2600      	movs	r6, #0
    c76a:	7a68      	ldrb	r0, [r5, #9]
    c76c:	4f30      	ldr	r7, [pc, #192]	; (c830 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x310>)
    c76e:	f44f 7186 	mov.w	r1, #268	; 0x10c
    c772:	2801      	cmp	r0, #1
    c774:	d002      	beq.n	c77c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x25c>
    c776:	2802      	cmp	r0, #2
    c778:	d008      	beq.n	c78c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26c>
    c77a:	e018      	b.n	c7ae <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x28e>
    c77c:	4638      	mov	r0, r7
    c77e:	f004 fe2d 	bl	113dc <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    c782:	b108      	cbz	r0, c788 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x268>
    c784:	2408      	movs	r4, #8
    c786:	e012      	b.n	c7ae <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x28e>
    c788:	2400      	movs	r4, #0
    c78a:	e010      	b.n	c7ae <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x28e>
    c78c:	4638      	mov	r0, r7
    c78e:	f004 fe25 	bl	113dc <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    c792:	b100      	cbz	r0, c796 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x276>
    c794:	2002      	movs	r0, #2
    c796:	f8d7 1400 	ldr.w	r1, [r7, #1024]	; 0x400
    c79a:	43c9      	mvns	r1, r1
    c79c:	f341 0100 	sbfx	r1, r1, #0, #1
    c7a0:	1c49      	adds	r1, r1, #1
    c7a2:	d001      	beq.n	c7a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x288>
    c7a4:	2400      	movs	r4, #0
    c7a6:	e000      	b.n	c7aa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x28a>
    c7a8:	2404      	movs	r4, #4
    c7aa:	4304      	orrs	r4, r0
    c7ac:	4334      	orrs	r4, r6
    c7ae:	f014 0f0b 	tst.w	r4, #11
    c7b2:	d107      	bne.n	c7c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a4>
    c7b4:	f44f 7188 	mov.w	r1, #272	; 0x110
    c7b8:	4638      	mov	r0, r7
    c7ba:	f004 fe0f 	bl	113dc <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    c7be:	b100      	cbz	r0, c7c2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a2>
    c7c0:	2010      	movs	r0, #16
    c7c2:	4304      	orrs	r4, r0
    c7c4:	481b      	ldr	r0, [pc, #108]	; (c834 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x314>)
    c7c6:	7800      	ldrb	r0, [r0, #0]
    c7c8:	b1f8      	cbz	r0, c80a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ea>
    c7ca:	f8d7 0640 	ldr.w	r0, [r7, #1600]	; 0x640
    c7ce:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    c7d2:	d007      	beq.n	c7e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c4>
    c7d4:	f44f 718a 	mov.w	r1, #276	; 0x114
    c7d8:	4638      	mov	r0, r7
    c7da:	f004 fdff 	bl	113dc <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    c7de:	b108      	cbz	r0, c7e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c4>
    c7e0:	2001      	movs	r0, #1
    c7e2:	e000      	b.n	c7e6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c6>
    c7e4:	2000      	movs	r0, #0
    c7e6:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
    c7ea:	b13e      	cbz	r6, c7fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>
    c7ec:	f44f 718c 	mov.w	r1, #280	; 0x118
    c7f0:	4638      	mov	r0, r7
    c7f2:	f004 fdf3 	bl	113dc <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    c7f6:	b108      	cbz	r0, c7fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>
    c7f8:	2001      	movs	r0, #1
    c7fa:	e000      	b.n	c7fe <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2de>
    c7fc:	2000      	movs	r0, #0
    c7fe:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
    c802:	f8d7 0410 	ldr.w	r0, [r7, #1040]	; 0x410
    c806:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
    c80a:	f7ff ff2b 	bl	c664 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x144>
    c80e:	06e0      	lsls	r0, r4, #27
    c810:	d506      	bpl.n	c820 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x300>
    c812:	0720      	lsls	r0, r4, #28
    c814:	d404      	bmi.n	c820 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x300>
    c816:	7a68      	ldrb	r0, [r5, #9]
    c818:	2801      	cmp	r0, #1
    c81a:	d101      	bne.n	c820 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x300>
    c81c:	f044 0420 	orr.w	r4, r4, #32
    c820:	4620      	mov	r0, r4
    c822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c826:	0000      	.short	0x0000
    c828:	20000fd8 	.word	0x20000fd8
    c82c:	40008000 	.word	0x40008000
    c830:	40001000 	.word	0x40001000
    c834:	20000278 	.word	0x20000278
    c838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c83c:	4c19      	ldr	r4, [pc, #100]	; (c8a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x384>)
    c83e:	460d      	mov	r5, r1
    c840:	7a21      	ldrb	r1, [r4, #8]
    c842:	b129      	cbz	r1, c850 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x330>
    c844:	f010 0f11 	tst.w	r0, #17
    c848:	d00b      	beq.n	c862 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x342>
    c84a:	f7ff f9e7 	bl	bc1c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    c84e:	e027      	b.n	c8a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x380>
    c850:	4915      	ldr	r1, [pc, #84]	; (c8a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x388>)
    c852:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    c856:	6008      	str	r0, [r1, #0]
    c858:	f000 f88c 	bl	c974 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x454>
    c85c:	2000      	movs	r0, #0
    c85e:	7320      	strb	r0, [r4, #12]
    c860:	e01e      	b.n	c8a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x380>
    c862:	2901      	cmp	r1, #1
    c864:	d001      	beq.n	c86a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34a>
    c866:	2601      	movs	r6, #1
    c868:	e000      	b.n	c86c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34c>
    c86a:	2600      	movs	r6, #0
    c86c:	79e0      	ldrb	r0, [r4, #7]
    c86e:	2801      	cmp	r0, #1
    c870:	d00e      	beq.n	c890 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x370>
    c872:	2700      	movs	r7, #0
    c874:	f000 f87e 	bl	c974 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x454>
    c878:	2196      	movs	r1, #150	; 0x96
    c87a:	4630      	mov	r0, r6
    c87c:	f000 f890 	bl	c9a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x480>
    c880:	4601      	mov	r1, r0
    c882:	b14f      	cbz	r7, c898 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x378>
    c884:	353b      	adds	r5, #59	; 0x3b
    c886:	428d      	cmp	r5, r1
    c888:	d904      	bls.n	c894 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x374>
    c88a:	2000      	movs	r0, #0
    c88c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c890:	2701      	movs	r7, #1
    c892:	e7ef      	b.n	c874 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x354>
    c894:	2001      	movs	r0, #1
    c896:	71e0      	strb	r0, [r4, #7]
    c898:	7aa2      	ldrb	r2, [r4, #10]
    c89a:	4630      	mov	r0, r6
    c89c:	f7ff fc70 	bl	c180 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    c8a0:	2001      	movs	r0, #1
    c8a2:	e7f3      	b.n	c88c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x36c>
    c8a4:	20000fd8 	.word	0x20000fd8
    c8a8:	4001f508 	.word	0x4001f508
    c8ac:	4803      	ldr	r0, [pc, #12]	; (c8bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x39c>)
    c8ae:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    c8b2:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    c8b6:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c8ba:	4770      	bx	lr
    c8bc:	40001000 	.word	0x40001000
    c8c0:	4804      	ldr	r0, [pc, #16]	; (c8d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b4>)
    c8c2:	6a81      	ldr	r1, [r0, #40]	; 0x28
    c8c4:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    c8c8:	6281      	str	r1, [r0, #40]	; 0x28
    c8ca:	4903      	ldr	r1, [pc, #12]	; (c8d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b8>)
    c8cc:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    c8d0:	6008      	str	r0, [r1, #0]
    c8d2:	4770      	bx	lr
    c8d4:	20000fd8 	.word	0x20000fd8
    c8d8:	4001f504 	.word	0x4001f504
    c8dc:	4a07      	ldr	r2, [pc, #28]	; (c8fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3dc>)
    c8de:	2000      	movs	r0, #0
    c8e0:	3208      	adds	r2, #8
    c8e2:	4906      	ldr	r1, [pc, #24]	; (c8fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3dc>)
    c8e4:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    c8e8:	1d0a      	adds	r2, r1, #4
    c8ea:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    c8ee:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    c8f2:	4902      	ldr	r1, [pc, #8]	; (c8fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3dc>)
    c8f4:	310c      	adds	r1, #12
    c8f6:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    c8fa:	4770      	bx	lr
    c8fc:	40008000 	.word	0x40008000
    c900:	4903      	ldr	r1, [pc, #12]	; (c910 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f0>)
    c902:	79c9      	ldrb	r1, [r1, #7]
    c904:	2900      	cmp	r1, #0
    c906:	d102      	bne.n	c90e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ee>
    c908:	4902      	ldr	r1, [pc, #8]	; (c914 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f4>)
    c90a:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    c90e:	4770      	bx	lr
    c910:	20000fd8 	.word	0x20000fd8
    c914:	4001f098 	.word	0x4001f098
    c918:	b510      	push	{r4, lr}
    c91a:	4a14      	ldr	r2, [pc, #80]	; (c96c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44c>)
    c91c:	b120      	cbz	r0, c928 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    c91e:	2801      	cmp	r0, #1
    c920:	d011      	beq.n	c946 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x426>
    c922:	f240 61fc 	movw	r1, #1788	; 0x6fc
    c926:	e01c      	b.n	c962 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x442>
    c928:	f101 0028 	add.w	r0, r1, #40	; 0x28
    c92c:	e9c2 1002 	strd	r1, r0, [r2, #8]
    c930:	490f      	ldr	r1, [pc, #60]	; (c970 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x450>)
    c932:	480e      	ldr	r0, [pc, #56]	; (c96c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44c>)
    c934:	f7f8 fafa 	bl	4f2c <mpsl_fem_pa_configuration_set>
    c938:	2800      	cmp	r0, #0
    c93a:	d015      	beq.n	c968 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x448>
    c93c:	1c40      	adds	r0, r0, #1
    c93e:	d013      	beq.n	c968 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x448>
    c940:	f240 61eb 	movw	r1, #1771	; 0x6eb
    c944:	e00d      	b.n	c962 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x442>
    c946:	f101 0029 	add.w	r0, r1, #41	; 0x29
    c94a:	e9c2 1002 	strd	r1, r0, [r2, #8]
    c94e:	4908      	ldr	r1, [pc, #32]	; (c970 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x450>)
    c950:	4806      	ldr	r0, [pc, #24]	; (c96c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44c>)
    c952:	f7f8 fadf 	bl	4f14 <mpsl_fem_lna_configuration_set>
    c956:	2800      	cmp	r0, #0
    c958:	d006      	beq.n	c968 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x448>
    c95a:	1c40      	adds	r0, r0, #1
    c95c:	d004      	beq.n	c968 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x448>
    c95e:	f44f 61df 	mov.w	r1, #1784	; 0x6f8
    c962:	203e      	movs	r0, #62	; 0x3e
    c964:	f7f8 fc04 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c968:	bd10      	pop	{r4, pc}
    c96a:	0000      	.short	0x0000
    c96c:	20000280 	.word	0x20000280
    c970:	0000c9fc 	.word	0x0000c9fc
    c974:	4802      	ldr	r0, [pc, #8]	; (c980 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x460>)
    c976:	2100      	movs	r1, #0
    c978:	71c1      	strb	r1, [r0, #7]
    c97a:	7201      	strb	r1, [r0, #8]
    c97c:	7241      	strb	r1, [r0, #9]
    c97e:	4770      	bx	lr
    c980:	20000fd8 	.word	0x20000fd8
    c984:	4a05      	ldr	r2, [pc, #20]	; (c99c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x47c>)
    c986:	79d2      	ldrb	r2, [r2, #7]
    c988:	2a01      	cmp	r2, #1
    c98a:	d006      	beq.n	c99a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x47a>
    c98c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c990:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    c994:	fbb1 f1f2 	udiv	r1, r1, r2
    c998:	1a40      	subs	r0, r0, r1
    c99a:	4770      	bx	lr
    c99c:	20000fd8 	.word	0x20000fd8
    c9a0:	b570      	push	{r4, r5, r6, lr}
    c9a2:	4c13      	ldr	r4, [pc, #76]	; (c9f0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4d0>)
    c9a4:	4603      	mov	r3, r0
    c9a6:	460d      	mov	r5, r1
    c9a8:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    c9ac:	2000      	movs	r0, #0
    c9ae:	b15a      	cbz	r2, c9c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4a8>
    c9b0:	4621      	mov	r1, r4
    c9b2:	f891 1020 	ldrb.w	r1, [r1, #32]
    c9b6:	b163      	cbz	r3, c9d2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4b2>
    c9b8:	2b01      	cmp	r3, #1
    c9ba:	d111      	bne.n	c9e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4c0>
    c9bc:	2a01      	cmp	r2, #1
    c9be:	4628      	mov	r0, r5
    c9c0:	d012      	beq.n	c9e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4c8>
    c9c2:	f004 fd15 	bl	113f0 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    c9c6:	e009      	b.n	c9dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4bc>
    c9c8:	f640 0134 	movw	r1, #2100	; 0x834
    c9cc:	203e      	movs	r0, #62	; 0x3e
    c9ce:	f7f8 fbcf 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c9d2:	2a01      	cmp	r2, #1
    c9d4:	4628      	mov	r0, r5
    c9d6:	d004      	beq.n	c9e2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4c2>
    c9d8:	f004 fd18 	bl	1140c <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    c9dc:	69e1      	ldr	r1, [r4, #28]
    c9de:	4408      	add	r0, r1
    c9e0:	bd70      	pop	{r4, r5, r6, pc}
    c9e2:	f000 f881 	bl	cae8 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    c9e6:	e7f9      	b.n	c9dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4bc>
    c9e8:	f000 f870 	bl	cacc <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    c9ec:	e7f6      	b.n	c9dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4bc>
    c9ee:	0000      	.short	0x0000
    c9f0:	20000fd8 	.word	0x20000fd8
    c9f4:	a62c0000 	.word	0xa62c0000
    c9f8:	0000a1e0 	.word	0x0000a1e0
    c9fc:	00000001 	.word	0x00000001
    ca00:	40001110 	.word	0x40001110
	...
    ca18:	00001e14 	.word	0x00001e14
    ca1c:	00001130 	.word	0x00001130
    ca20:	00000000 	.word	0x00000000
    ca24:	00000028 	.word	0x00000028
    ca28:	00000018 	.word	0x00000018
    ca2c:	00000000 	.word	0x00000000
    ca30:	00001e14 	.word	0x00001e14
    ca34:	00001130 	.word	0x00001130
    ca38:	00000000 	.word	0x00000000
    ca3c:	00001770 	.word	0x00001770
    ca40:	00000fa0 	.word	0x00000fa0

0000ca44 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    ca44:	b570      	push	{r4, r5, r6, lr}
    ca46:	4605      	mov	r5, r0
    ca48:	4614      	mov	r4, r2
    ca4a:	4608      	mov	r0, r1
    ca4c:	f7ff fb92 	bl	c174 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    ca50:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    ca54:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    ca58:	ebc0 01c1 	rsb	r1, r0, r1, lsl #3
    ca5c:	4807      	ldr	r0, [pc, #28]	; (ca7c <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA+0x38>)
    ca5e:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    ca62:	4408      	add	r0, r1
    ca64:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    ca68:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    ca6c:	fbb0 f5f1 	udiv	r5, r0, r1
    ca70:	4620      	mov	r0, r4
    ca72:	f7ff fb53 	bl	c11c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    ca76:	4428      	add	r0, r5
    ca78:	1d40      	adds	r0, r0, #5
    ca7a:	bd70      	pop	{r4, r5, r6, pc}
    ca7c:	0000cb0c 	.word	0x0000cb0c

0000ca80 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    ca80:	b570      	push	{r4, r5, r6, lr}
    ca82:	4d0e      	ldr	r5, [pc, #56]	; (cabc <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    ca84:	461c      	mov	r4, r3
    ca86:	3d08      	subs	r5, #8
    ca88:	4b0c      	ldr	r3, [pc, #48]	; (cabc <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    ca8a:	f835 1011 	ldrh.w	r1, [r5, r1, lsl #1]
    ca8e:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    ca92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    ca96:	ebc5 10c0 	rsb	r0, r5, r0, lsl #7
    ca9a:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    ca9e:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    caa2:	4418      	add	r0, r3
    caa4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    caa8:	fbb0 f5f1 	udiv	r5, r0, r1
    caac:	4610      	mov	r0, r2
    caae:	f7ff fb35 	bl	c11c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    cab2:	4428      	add	r0, r5
    cab4:	4420      	add	r0, r4
    cab6:	1d40      	adds	r0, r0, #5
    cab8:	bd70      	pop	{r4, r5, r6, pc}
    caba:	0000      	.short	0x0000
    cabc:	0000cb0c 	.word	0x0000cb0c

0000cac0 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    cac0:	4901      	ldr	r1, [pc, #4]	; (cac8 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    cac2:	b2c0      	uxtb	r0, r0
    cac4:	6008      	str	r0, [r1, #0]
    cac6:	4770      	bx	lr
    cac8:	4000150c 	.word	0x4000150c

0000cacc <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    cacc:	4a05      	ldr	r2, [pc, #20]	; (cae4 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x18>)
    cace:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    cad2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    cad6:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    cada:	fbb1 f1f2 	udiv	r1, r1, r2
    cade:	4408      	add	r0, r1
    cae0:	1e80      	subs	r0, r0, #2
    cae2:	4770      	bx	lr
    cae4:	0000cb04 	.word	0x0000cb04

0000cae8 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    cae8:	4a05      	ldr	r2, [pc, #20]	; (cb00 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>)
    caea:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    caee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    caf2:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    caf6:	fbb1 f1f2 	udiv	r1, r1, r2
    cafa:	4408      	add	r0, r1
    cafc:	4770      	bx	lr
    cafe:	0000      	.short	0x0000
    cb00:	0000cb04 	.word	0x0000cb04
    cb04:	05dc0000 	.word	0x05dc0000
    cb08:	000003e8 	.word	0x000003e8
    cb0c:	00000000 	.word	0x00000000
    cb10:	00001e14 	.word	0x00001e14
    cb14:	00001130 	.word	0x00001130

0000cb18 <__udivmoddi4>:
    cb18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cb1c:	4607      	mov	r7, r0
    cb1e:	468c      	mov	ip, r1
    cb20:	4608      	mov	r0, r1
    cb22:	9e09      	ldr	r6, [sp, #36]	; 0x24
    cb24:	4615      	mov	r5, r2
    cb26:	463c      	mov	r4, r7
    cb28:	4619      	mov	r1, r3
    cb2a:	2b00      	cmp	r3, #0
    cb2c:	f040 80c6 	bne.w	ccbc <__udivmoddi4+0x1a4>
    cb30:	4282      	cmp	r2, r0
    cb32:	fab2 f782 	clz	r7, r2
    cb36:	d946      	bls.n	cbc6 <__udivmoddi4+0xae>
    cb38:	b14f      	cbz	r7, cb4e <__udivmoddi4+0x36>
    cb3a:	f1c7 0e20 	rsb	lr, r7, #32
    cb3e:	fa24 fe0e 	lsr.w	lr, r4, lr
    cb42:	fa00 f307 	lsl.w	r3, r0, r7
    cb46:	40bd      	lsls	r5, r7
    cb48:	ea4e 0c03 	orr.w	ip, lr, r3
    cb4c:	40bc      	lsls	r4, r7
    cb4e:	ea4f 4815 	mov.w	r8, r5, lsr #16
    cb52:	fa1f fe85 	uxth.w	lr, r5
    cb56:	fbbc f9f8 	udiv	r9, ip, r8
    cb5a:	0c22      	lsrs	r2, r4, #16
    cb5c:	fb08 c319 	mls	r3, r8, r9, ip
    cb60:	fb09 fa0e 	mul.w	sl, r9, lr
    cb64:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    cb68:	459a      	cmp	sl, r3
    cb6a:	d928      	bls.n	cbbe <__udivmoddi4+0xa6>
    cb6c:	18eb      	adds	r3, r5, r3
    cb6e:	f109 30ff 	add.w	r0, r9, #4294967295
    cb72:	d204      	bcs.n	cb7e <__udivmoddi4+0x66>
    cb74:	459a      	cmp	sl, r3
    cb76:	d902      	bls.n	cb7e <__udivmoddi4+0x66>
    cb78:	f1a9 0002 	sub.w	r0, r9, #2
    cb7c:	442b      	add	r3, r5
    cb7e:	eba3 030a 	sub.w	r3, r3, sl
    cb82:	b2a4      	uxth	r4, r4
    cb84:	fbb3 f2f8 	udiv	r2, r3, r8
    cb88:	fb08 3312 	mls	r3, r8, r2, r3
    cb8c:	fb02 fe0e 	mul.w	lr, r2, lr
    cb90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    cb94:	45a6      	cmp	lr, r4
    cb96:	d914      	bls.n	cbc2 <__udivmoddi4+0xaa>
    cb98:	192c      	adds	r4, r5, r4
    cb9a:	f102 33ff 	add.w	r3, r2, #4294967295
    cb9e:	d203      	bcs.n	cba8 <__udivmoddi4+0x90>
    cba0:	45a6      	cmp	lr, r4
    cba2:	d901      	bls.n	cba8 <__udivmoddi4+0x90>
    cba4:	1e93      	subs	r3, r2, #2
    cba6:	442c      	add	r4, r5
    cba8:	eba4 040e 	sub.w	r4, r4, lr
    cbac:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    cbb0:	b11e      	cbz	r6, cbba <__udivmoddi4+0xa2>
    cbb2:	40fc      	lsrs	r4, r7
    cbb4:	2300      	movs	r3, #0
    cbb6:	6034      	str	r4, [r6, #0]
    cbb8:	6073      	str	r3, [r6, #4]
    cbba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cbbe:	4648      	mov	r0, r9
    cbc0:	e7dd      	b.n	cb7e <__udivmoddi4+0x66>
    cbc2:	4613      	mov	r3, r2
    cbc4:	e7f0      	b.n	cba8 <__udivmoddi4+0x90>
    cbc6:	b902      	cbnz	r2, cbca <__udivmoddi4+0xb2>
    cbc8:	deff      	udf	#255	; 0xff
    cbca:	bb87      	cbnz	r7, cc2e <__udivmoddi4+0x116>
    cbcc:	1a83      	subs	r3, r0, r2
    cbce:	2101      	movs	r1, #1
    cbd0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    cbd4:	b2aa      	uxth	r2, r5
    cbd6:	fbb3 fcfe 	udiv	ip, r3, lr
    cbda:	0c20      	lsrs	r0, r4, #16
    cbdc:	fb0e 331c 	mls	r3, lr, ip, r3
    cbe0:	fb0c f802 	mul.w	r8, ip, r2
    cbe4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    cbe8:	4598      	cmp	r8, r3
    cbea:	d963      	bls.n	ccb4 <__udivmoddi4+0x19c>
    cbec:	18eb      	adds	r3, r5, r3
    cbee:	f10c 30ff 	add.w	r0, ip, #4294967295
    cbf2:	d204      	bcs.n	cbfe <__udivmoddi4+0xe6>
    cbf4:	4598      	cmp	r8, r3
    cbf6:	d902      	bls.n	cbfe <__udivmoddi4+0xe6>
    cbf8:	f1ac 0002 	sub.w	r0, ip, #2
    cbfc:	442b      	add	r3, r5
    cbfe:	eba3 0308 	sub.w	r3, r3, r8
    cc02:	b2a4      	uxth	r4, r4
    cc04:	fbb3 fcfe 	udiv	ip, r3, lr
    cc08:	fb0e 331c 	mls	r3, lr, ip, r3
    cc0c:	fb0c f202 	mul.w	r2, ip, r2
    cc10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    cc14:	42a2      	cmp	r2, r4
    cc16:	d94f      	bls.n	ccb8 <__udivmoddi4+0x1a0>
    cc18:	192c      	adds	r4, r5, r4
    cc1a:	f10c 33ff 	add.w	r3, ip, #4294967295
    cc1e:	d204      	bcs.n	cc2a <__udivmoddi4+0x112>
    cc20:	42a2      	cmp	r2, r4
    cc22:	d902      	bls.n	cc2a <__udivmoddi4+0x112>
    cc24:	f1ac 0302 	sub.w	r3, ip, #2
    cc28:	442c      	add	r4, r5
    cc2a:	1aa4      	subs	r4, r4, r2
    cc2c:	e7be      	b.n	cbac <__udivmoddi4+0x94>
    cc2e:	f1c7 0c20 	rsb	ip, r7, #32
    cc32:	fa20 f80c 	lsr.w	r8, r0, ip
    cc36:	fa00 f307 	lsl.w	r3, r0, r7
    cc3a:	fa24 fc0c 	lsr.w	ip, r4, ip
    cc3e:	40bd      	lsls	r5, r7
    cc40:	ea4c 0203 	orr.w	r2, ip, r3
    cc44:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    cc48:	b2ab      	uxth	r3, r5
    cc4a:	fbb8 fcfe 	udiv	ip, r8, lr
    cc4e:	0c11      	lsrs	r1, r2, #16
    cc50:	fb0e 801c 	mls	r0, lr, ip, r8
    cc54:	fb0c f903 	mul.w	r9, ip, r3
    cc58:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
    cc5c:	4581      	cmp	r9, r0
    cc5e:	fa04 f407 	lsl.w	r4, r4, r7
    cc62:	d923      	bls.n	ccac <__udivmoddi4+0x194>
    cc64:	1828      	adds	r0, r5, r0
    cc66:	f10c 31ff 	add.w	r1, ip, #4294967295
    cc6a:	d204      	bcs.n	cc76 <__udivmoddi4+0x15e>
    cc6c:	4581      	cmp	r9, r0
    cc6e:	d902      	bls.n	cc76 <__udivmoddi4+0x15e>
    cc70:	f1ac 0102 	sub.w	r1, ip, #2
    cc74:	4428      	add	r0, r5
    cc76:	eba0 0009 	sub.w	r0, r0, r9
    cc7a:	b292      	uxth	r2, r2
    cc7c:	fbb0 fcfe 	udiv	ip, r0, lr
    cc80:	fb0e 001c 	mls	r0, lr, ip, r0
    cc84:	fb0c f803 	mul.w	r8, ip, r3
    cc88:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
    cc8c:	4598      	cmp	r8, r3
    cc8e:	d90f      	bls.n	ccb0 <__udivmoddi4+0x198>
    cc90:	18eb      	adds	r3, r5, r3
    cc92:	f10c 32ff 	add.w	r2, ip, #4294967295
    cc96:	d204      	bcs.n	cca2 <__udivmoddi4+0x18a>
    cc98:	4598      	cmp	r8, r3
    cc9a:	d902      	bls.n	cca2 <__udivmoddi4+0x18a>
    cc9c:	f1ac 0202 	sub.w	r2, ip, #2
    cca0:	442b      	add	r3, r5
    cca2:	eba3 0308 	sub.w	r3, r3, r8
    cca6:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
    ccaa:	e791      	b.n	cbd0 <__udivmoddi4+0xb8>
    ccac:	4661      	mov	r1, ip
    ccae:	e7e2      	b.n	cc76 <__udivmoddi4+0x15e>
    ccb0:	4662      	mov	r2, ip
    ccb2:	e7f6      	b.n	cca2 <__udivmoddi4+0x18a>
    ccb4:	4660      	mov	r0, ip
    ccb6:	e7a2      	b.n	cbfe <__udivmoddi4+0xe6>
    ccb8:	4663      	mov	r3, ip
    ccba:	e7b6      	b.n	cc2a <__udivmoddi4+0x112>
    ccbc:	4283      	cmp	r3, r0
    ccbe:	d905      	bls.n	cccc <__udivmoddi4+0x1b4>
    ccc0:	b10e      	cbz	r6, ccc6 <__udivmoddi4+0x1ae>
    ccc2:	e9c6 7000 	strd	r7, r0, [r6]
    ccc6:	2100      	movs	r1, #0
    ccc8:	4608      	mov	r0, r1
    ccca:	e776      	b.n	cbba <__udivmoddi4+0xa2>
    cccc:	fab3 f183 	clz	r1, r3
    ccd0:	b981      	cbnz	r1, ccf4 <__udivmoddi4+0x1dc>
    ccd2:	4283      	cmp	r3, r0
    ccd4:	d301      	bcc.n	ccda <__udivmoddi4+0x1c2>
    ccd6:	42ba      	cmp	r2, r7
    ccd8:	d80a      	bhi.n	ccf0 <__udivmoddi4+0x1d8>
    ccda:	1abc      	subs	r4, r7, r2
    ccdc:	eb60 0303 	sbc.w	r3, r0, r3
    cce0:	2001      	movs	r0, #1
    cce2:	469c      	mov	ip, r3
    cce4:	2e00      	cmp	r6, #0
    cce6:	d068      	beq.n	cdba <__udivmoddi4+0x2a2>
    cce8:	e9c6 4c00 	strd	r4, ip, [r6]
    ccec:	2100      	movs	r1, #0
    ccee:	e764      	b.n	cbba <__udivmoddi4+0xa2>
    ccf0:	4608      	mov	r0, r1
    ccf2:	e7f7      	b.n	cce4 <__udivmoddi4+0x1cc>
    ccf4:	f1c1 0c20 	rsb	ip, r1, #32
    ccf8:	408b      	lsls	r3, r1
    ccfa:	fa22 f40c 	lsr.w	r4, r2, ip
    ccfe:	431c      	orrs	r4, r3
    cd00:	fa02 f501 	lsl.w	r5, r2, r1
    cd04:	fa00 f301 	lsl.w	r3, r0, r1
    cd08:	fa27 f20c 	lsr.w	r2, r7, ip
    cd0c:	fa20 fb0c 	lsr.w	fp, r0, ip
    cd10:	ea4f 4914 	mov.w	r9, r4, lsr #16
    cd14:	4313      	orrs	r3, r2
    cd16:	fbbb f8f9 	udiv	r8, fp, r9
    cd1a:	fa1f fe84 	uxth.w	lr, r4
    cd1e:	fb09 bb18 	mls	fp, r9, r8, fp
    cd22:	0c1a      	lsrs	r2, r3, #16
    cd24:	fb08 fa0e 	mul.w	sl, r8, lr
    cd28:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
    cd2c:	4592      	cmp	sl, r2
    cd2e:	fa07 f701 	lsl.w	r7, r7, r1
    cd32:	d93e      	bls.n	cdb2 <__udivmoddi4+0x29a>
    cd34:	18a2      	adds	r2, r4, r2
    cd36:	f108 30ff 	add.w	r0, r8, #4294967295
    cd3a:	d204      	bcs.n	cd46 <__udivmoddi4+0x22e>
    cd3c:	4592      	cmp	sl, r2
    cd3e:	d902      	bls.n	cd46 <__udivmoddi4+0x22e>
    cd40:	f1a8 0002 	sub.w	r0, r8, #2
    cd44:	4422      	add	r2, r4
    cd46:	eba2 020a 	sub.w	r2, r2, sl
    cd4a:	b29b      	uxth	r3, r3
    cd4c:	fbb2 f8f9 	udiv	r8, r2, r9
    cd50:	fb09 2218 	mls	r2, r9, r8, r2
    cd54:	fb08 fe0e 	mul.w	lr, r8, lr
    cd58:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
    cd5c:	4596      	cmp	lr, r2
    cd5e:	d92a      	bls.n	cdb6 <__udivmoddi4+0x29e>
    cd60:	18a2      	adds	r2, r4, r2
    cd62:	f108 33ff 	add.w	r3, r8, #4294967295
    cd66:	d204      	bcs.n	cd72 <__udivmoddi4+0x25a>
    cd68:	4596      	cmp	lr, r2
    cd6a:	d902      	bls.n	cd72 <__udivmoddi4+0x25a>
    cd6c:	f1a8 0302 	sub.w	r3, r8, #2
    cd70:	4422      	add	r2, r4
    cd72:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    cd76:	fba0 9305 	umull	r9, r3, r0, r5
    cd7a:	eba2 020e 	sub.w	r2, r2, lr
    cd7e:	429a      	cmp	r2, r3
    cd80:	46ce      	mov	lr, r9
    cd82:	4698      	mov	r8, r3
    cd84:	d302      	bcc.n	cd8c <__udivmoddi4+0x274>
    cd86:	d106      	bne.n	cd96 <__udivmoddi4+0x27e>
    cd88:	454f      	cmp	r7, r9
    cd8a:	d204      	bcs.n	cd96 <__udivmoddi4+0x27e>
    cd8c:	ebb9 0e05 	subs.w	lr, r9, r5
    cd90:	eb63 0804 	sbc.w	r8, r3, r4
    cd94:	3801      	subs	r0, #1
    cd96:	b186      	cbz	r6, cdba <__udivmoddi4+0x2a2>
    cd98:	ebb7 030e 	subs.w	r3, r7, lr
    cd9c:	eb62 0708 	sbc.w	r7, r2, r8
    cda0:	fa07 fc0c 	lsl.w	ip, r7, ip
    cda4:	40cb      	lsrs	r3, r1
    cda6:	ea4c 0303 	orr.w	r3, ip, r3
    cdaa:	40cf      	lsrs	r7, r1
    cdac:	e9c6 3700 	strd	r3, r7, [r6]
    cdb0:	e79c      	b.n	ccec <__udivmoddi4+0x1d4>
    cdb2:	4640      	mov	r0, r8
    cdb4:	e7c7      	b.n	cd46 <__udivmoddi4+0x22e>
    cdb6:	4643      	mov	r3, r8
    cdb8:	e7db      	b.n	cd72 <__udivmoddi4+0x25a>
    cdba:	4631      	mov	r1, r6
    cdbc:	e6fd      	b.n	cbba <__udivmoddi4+0xa2>

0000cdbe <strcmp>:
    cdbe:	f810 2b01 	ldrb.w	r2, [r0], #1
    cdc2:	f811 3b01 	ldrb.w	r3, [r1], #1
    cdc6:	2a01      	cmp	r2, #1
    cdc8:	bf28      	it	cs
    cdca:	429a      	cmpcs	r2, r3
    cdcc:	d0f7      	beq.n	cdbe <strcmp>
    cdce:	1ad0      	subs	r0, r2, r3
    cdd0:	4770      	bx	lr

0000cdd2 <strlen>:
    cdd2:	4603      	mov	r3, r0
    cdd4:	f813 2b01 	ldrb.w	r2, [r3], #1
    cdd8:	2a00      	cmp	r2, #0
    cdda:	d1fb      	bne.n	cdd4 <strlen+0x2>
    cddc:	1a18      	subs	r0, r3, r0
    cdde:	3801      	subs	r0, #1
    cde0:	4770      	bx	lr

0000cde2 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>:
    cde2:	4770      	bx	lr
    cde4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cde8:	000d      	movs	r5, r1
    cdea:	4604      	mov	r4, r0
    cdec:	f04f 0602 	mov.w	r6, #2
    cdf0:	f04f 0701 	mov.w	r7, #1
    cdf4:	d008      	beq.n	ce08 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x26>
    cdf6:	7828      	ldrb	r0, [r5, #0]
    cdf8:	b1d0      	cbz	r0, ce30 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4e>
    cdfa:	2801      	cmp	r0, #1
    cdfc:	d007      	beq.n	ce0e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2c>
    cdfe:	2802      	cmp	r0, #2
    ce00:	d014      	beq.n	ce2c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4a>
    ce02:	2803      	cmp	r0, #3
    ce04:	d13b      	bne.n	ce7e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x9c>
    ce06:	e016      	b.n	ce36 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x54>
    ce08:	f880 7020 	strb.w	r7, [r0, #32]
    ce0c:	e00e      	b.n	ce2c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4a>
    ce0e:	6868      	ldr	r0, [r5, #4]
    ce10:	28c8      	cmp	r0, #200	; 0xc8
    ce12:	d303      	bcc.n	ce1c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x3a>
    ce14:	2103      	movs	r1, #3
    ce16:	f7f5 fca1 	bl	275c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    ce1a:	b108      	cbz	r0, ce20 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x3e>
    ce1c:	2600      	movs	r6, #0
    ce1e:	e007      	b.n	ce30 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4e>
    ce20:	4620      	mov	r0, r4
    ce22:	6869      	ldr	r1, [r5, #4]
    ce24:	f000 f92a 	bl	d07c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x29a>
    ce28:	2601      	movs	r6, #1
    ce2a:	e001      	b.n	ce30 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4e>
    ce2c:	f7f4 fcd2 	bl	17d4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x90>
    ce30:	4630      	mov	r0, r6
    ce32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ce36:	7820      	ldrb	r0, [r4, #0]
    ce38:	2800      	cmp	r0, #0
    ce3a:	d1f7      	bne.n	ce2c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4a>
    ce3c:	6868      	ldr	r0, [r5, #4]
    ce3e:	f7f4 fc9b 	bl	1778 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x34>
    ce42:	b1e0      	cbz	r0, ce7e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x9c>
    ce44:	6869      	ldr	r1, [r5, #4]
    ce46:	7808      	ldrb	r0, [r1, #0]
    ce48:	b128      	cbz	r0, ce56 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x74>
    ce4a:	78a0      	ldrb	r0, [r4, #2]
    ce4c:	2805      	cmp	r0, #5
    ce4e:	d007      	beq.n	ce60 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x7e>
    ce50:	f240 117b 	movw	r1, #379	; 0x17b
    ce54:	e010      	b.n	ce78 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x96>
    ce56:	4620      	mov	r0, r4
    ce58:	f000 f918 	bl	d08c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2aa>
    ce5c:	7067      	strb	r7, [r4, #1]
    ce5e:	e7e5      	b.n	ce2c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4a>
    ce60:	4620      	mov	r0, r4
    ce62:	f000 f92b 	bl	d0bc <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2da>
    ce66:	78e0      	ldrb	r0, [r4, #3]
    ce68:	f104 010c 	add.w	r1, r4, #12
    ce6c:	f000 f80a 	bl	ce84 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xa2>
    ce70:	2800      	cmp	r0, #0
    ce72:	d1db      	bne.n	ce2c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4a>
    ce74:	f240 117d 	movw	r1, #381	; 0x17d
    ce78:	206a      	movs	r0, #106	; 0x6a
    ce7a:	f7f7 fec5 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ce7e:	f884 7020 	strb.w	r7, [r4, #32]
    ce82:	e7d3      	b.n	ce2c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4a>
    ce84:	f7f5 bec4 	b.w	2c10 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    ce88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ce8c:	460d      	mov	r5, r1
    ce8e:	0004      	movs	r4, r0
    ce90:	d00b      	beq.n	ceaa <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xc8>
    ce92:	7926      	ldrb	r6, [r4, #4]
    ce94:	2700      	movs	r7, #0
    ce96:	2002      	movs	r0, #2
    ce98:	2d09      	cmp	r5, #9
    ce9a:	d27b      	bcs.n	cf94 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x1b2>
    ce9c:	e8df f005 	tbb	[pc, r5]
    cea0:	2e2e1008 	.word	0x2e2e1008
    cea4:	977c645b 	.word	0x977c645b
    cea8:	0086      	.short	0x0086
    ceaa:	f240 1195 	movw	r1, #405	; 0x195
    ceae:	e0e2      	b.n	d076 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    ceb0:	78a0      	ldrb	r0, [r4, #2]
    ceb2:	2804      	cmp	r0, #4
    ceb4:	d06f      	beq.n	cf96 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x1b4>
    ceb6:	2803      	cmp	r0, #3
    ceb8:	d0fc      	beq.n	ceb4 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xd2>
    ceba:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
    cebe:	e0da      	b.n	d076 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    cec0:	78a0      	ldrb	r0, [r4, #2]
    cec2:	2804      	cmp	r0, #4
    cec4:	d004      	beq.n	ced0 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xee>
    cec6:	2803      	cmp	r0, #3
    cec8:	d002      	beq.n	ced0 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xee>
    ceca:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
    cece:	e0d2      	b.n	d076 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    ced0:	2005      	movs	r0, #5
    ced2:	70a0      	strb	r0, [r4, #2]
    ced4:	f884 7020 	strb.w	r7, [r4, #32]
    ced8:	7820      	ldrb	r0, [r4, #0]
    ceda:	bb80      	cbnz	r0, cf3e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x15c>
    cedc:	2100      	movs	r1, #0
    cede:	4620      	mov	r0, r4
    cee0:	f000 f8cc 	bl	d07c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x29a>
    cee4:	7b20      	ldrb	r0, [r4, #12]
    cee6:	2801      	cmp	r0, #1
    cee8:	d004      	beq.n	cef4 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x112>
    ceea:	69a0      	ldr	r0, [r4, #24]
    ceec:	61e0      	str	r0, [r4, #28]
    ceee:	2100      	movs	r1, #0
    cef0:	68a2      	ldr	r2, [r4, #8]
    cef2:	e041      	b.n	cf78 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x196>
    cef4:	78e0      	ldrb	r0, [r4, #3]
    cef6:	f7f5 fd6b 	bl	29d0 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>
    cefa:	e7f7      	b.n	ceec <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x10a>
    cefc:	78a1      	ldrb	r1, [r4, #2]
    cefe:	2904      	cmp	r1, #4
    cf00:	d004      	beq.n	cf0c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x12a>
    cf02:	2903      	cmp	r1, #3
    cf04:	d002      	beq.n	cf0c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x12a>
    cf06:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
    cf0a:	e0b4      	b.n	d076 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    cf0c:	7822      	ldrb	r2, [r4, #0]
    cf0e:	b122      	cbz	r2, cf1a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x138>
    cf10:	4621      	mov	r1, r4
    cf12:	4630      	mov	r0, r6
    cf14:	f000 f8ee 	bl	d0f4 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x312>
    cf18:	e0a4      	b.n	d064 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x282>
    cf1a:	2904      	cmp	r1, #4
    cf1c:	d000      	beq.n	cf20 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x13e>
    cf1e:	2001      	movs	r0, #1
    cf20:	70a0      	strb	r0, [r4, #2]
    cf22:	68a2      	ldr	r2, [r4, #8]
    cf24:	2d02      	cmp	r5, #2
    cf26:	d00b      	beq.n	cf40 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x15e>
    cf28:	2106      	movs	r1, #6
    cf2a:	4630      	mov	r0, r6
    cf2c:	4790      	blx	r2
    cf2e:	2800      	cmp	r0, #0
    cf30:	d06b      	beq.n	d00a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x228>
    cf32:	7800      	ldrb	r0, [r0, #0]
    cf34:	2800      	cmp	r0, #0
    cf36:	d068      	beq.n	d00a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x228>
    cf38:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
    cf3c:	e09b      	b.n	d076 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    cf3e:	e031      	b.n	cfa4 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x1c2>
    cf40:	2105      	movs	r1, #5
    cf42:	4630      	mov	r0, r6
    cf44:	4790      	blx	r2
    cf46:	2800      	cmp	r0, #0
    cf48:	d071      	beq.n	d02e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
    cf4a:	7800      	ldrb	r0, [r0, #0]
    cf4c:	2800      	cmp	r0, #0
    cf4e:	d06e      	beq.n	d02e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
    cf50:	f240 11d7 	movw	r1, #471	; 0x1d7
    cf54:	e08f      	b.n	d076 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    cf56:	78a0      	ldrb	r0, [r4, #2]
    cf58:	2805      	cmp	r0, #5
    cf5a:	d002      	beq.n	cf62 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x180>
    cf5c:	f240 11e3 	movw	r1, #483	; 0x1e3
    cf60:	e089      	b.n	d076 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    cf62:	2102      	movs	r1, #2
    cf64:	68a2      	ldr	r2, [r4, #8]
    cf66:	e007      	b.n	cf78 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x196>
    cf68:	78a0      	ldrb	r0, [r4, #2]
    cf6a:	2805      	cmp	r0, #5
    cf6c:	d002      	beq.n	cf74 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x192>
    cf6e:	f240 11e9 	movw	r1, #489	; 0x1e9
    cf72:	e080      	b.n	d076 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    cf74:	68a2      	ldr	r2, [r4, #8]
    cf76:	2101      	movs	r1, #1
    cf78:	4630      	mov	r0, r6
    cf7a:	4790      	blx	r2
    cf7c:	4601      	mov	r1, r0
    cf7e:	4620      	mov	r0, r4
    cf80:	f7ff ff30 	bl	cde4 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2>
    cf84:	2802      	cmp	r0, #2
    cf86:	d06d      	beq.n	d064 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x282>
    cf88:	b3f0      	cbz	r0, d008 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x226>
    cf8a:	2801      	cmp	r0, #1
    cf8c:	d064      	beq.n	d058 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x276>
    cf8e:	f240 2129 	movw	r1, #553	; 0x229
    cf92:	e070      	b.n	d076 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    cf94:	e05d      	b.n	d052 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x270>
    cf96:	e067      	b.n	d068 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x286>
    cf98:	78a0      	ldrb	r0, [r4, #2]
    cf9a:	2805      	cmp	r0, #5
    cf9c:	d002      	beq.n	cfa4 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x1c2>
    cf9e:	f240 11ef 	movw	r1, #495	; 0x1ef
    cfa2:	e068      	b.n	d076 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    cfa4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    cfa8:	f7f4 bc14 	b.w	17d4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x90>
    cfac:	78a0      	ldrb	r0, [r4, #2]
    cfae:	2805      	cmp	r0, #5
    cfb0:	d002      	beq.n	cfb8 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x1d6>
    cfb2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    cfb6:	e05e      	b.n	d076 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    cfb8:	68a2      	ldr	r2, [r4, #8]
    cfba:	210a      	movs	r1, #10
    cfbc:	4630      	mov	r0, r6
    cfbe:	4790      	blx	r2
    cfc0:	4601      	mov	r1, r0
    cfc2:	4620      	mov	r0, r4
    cfc4:	f7ff ff0e 	bl	cde4 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2>
    cfc8:	f240 11f7 	movw	r1, #503	; 0x1f7
    cfcc:	e053      	b.n	d076 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    cfce:	78a1      	ldrb	r1, [r4, #2]
    cfd0:	2905      	cmp	r1, #5
    cfd2:	d006      	beq.n	cfe2 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x200>
    cfd4:	7862      	ldrb	r2, [r4, #1]
    cfd6:	b10a      	cbz	r2, cfdc <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x1fa>
    cfd8:	2903      	cmp	r1, #3
    cfda:	d002      	beq.n	cfe2 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x200>
    cfdc:	f240 11fb 	movw	r1, #507	; 0x1fb
    cfe0:	e049      	b.n	d076 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    cfe2:	7821      	ldrb	r1, [r4, #0]
    cfe4:	b129      	cbz	r1, cff2 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x210>
    cfe6:	4621      	mov	r1, r4
    cfe8:	4630      	mov	r0, r6
    cfea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    cfee:	f000 b881 	b.w	d0f4 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x312>
    cff2:	f894 1020 	ldrb.w	r1, [r4, #32]
    cff6:	b189      	cbz	r1, d01c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x23a>
    cff8:	f884 7020 	strb.w	r7, [r4, #32]
    cffc:	70a0      	strb	r0, [r4, #2]
    cffe:	68a2      	ldr	r2, [r4, #8]
    d000:	2108      	movs	r1, #8
    d002:	4630      	mov	r0, r6
    d004:	4790      	blx	r2
    d006:	e001      	b.n	d00c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x22a>
    d008:	e029      	b.n	d05e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x27c>
    d00a:	e02b      	b.n	d064 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x282>
    d00c:	2800      	cmp	r0, #0
    d00e:	d00e      	beq.n	d02e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
    d010:	7800      	ldrb	r0, [r0, #0]
    d012:	2800      	cmp	r0, #0
    d014:	d00b      	beq.n	d02e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
    d016:	f240 2107 	movw	r1, #519	; 0x207
    d01a:	e02c      	b.n	d076 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    d01c:	7861      	ldrb	r1, [r4, #1]
    d01e:	b159      	cbz	r1, d038 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x256>
    d020:	78e0      	ldrb	r0, [r4, #3]
    d022:	f104 010c 	add.w	r1, r4, #12
    d026:	f7ff ff2d 	bl	ce84 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xa2>
    d02a:	b110      	cbz	r0, d032 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x250>
    d02c:	7067      	strb	r7, [r4, #1]
    d02e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d032:	f240 210b 	movw	r1, #523	; 0x20b
    d036:	e01e      	b.n	d076 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    d038:	70a0      	strb	r0, [r4, #2]
    d03a:	68a2      	ldr	r2, [r4, #8]
    d03c:	2107      	movs	r1, #7
    d03e:	4630      	mov	r0, r6
    d040:	4790      	blx	r2
    d042:	2800      	cmp	r0, #0
    d044:	d0f3      	beq.n	d02e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
    d046:	7800      	ldrb	r0, [r0, #0]
    d048:	2800      	cmp	r0, #0
    d04a:	d0f0      	beq.n	d02e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
    d04c:	f240 2113 	movw	r1, #531	; 0x213
    d050:	e011      	b.n	d076 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    d052:	f44f 7106 	mov.w	r1, #536	; 0x218
    d056:	e00e      	b.n	d076 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    d058:	2104      	movs	r1, #4
    d05a:	68a2      	ldr	r2, [r4, #8]
    d05c:	e78c      	b.n	cf78 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x196>
    d05e:	2103      	movs	r1, #3
    d060:	68a2      	ldr	r2, [r4, #8]
    d062:	e789      	b.n	cf78 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x196>
    d064:	2d00      	cmp	r5, #0
    d066:	d1e2      	bne.n	d02e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
    d068:	f000 f8f2 	bl	d250 <sym_WGWJTNZTDUUYDCZS4UGNX4L4JID5HLG6XRROR3Q>
    d06c:	6800      	ldr	r0, [r0, #0]
    d06e:	2800      	cmp	r0, #0
    d070:	d0dd      	beq.n	d02e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
    d072:	f240 2133 	movw	r1, #563	; 0x233
    d076:	206a      	movs	r0, #106	; 0x6a
    d078:	f7f7 fdc6 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d07c:	4602      	mov	r2, r0
    d07e:	7b03      	ldrb	r3, [r0, #12]
    d080:	6900      	ldr	r0, [r0, #16]
    d082:	4408      	add	r0, r1
    d084:	6110      	str	r0, [r2, #16]
    d086:	3859      	subs	r0, #89	; 0x59
    d088:	f7f6 bc5c 	b.w	3944 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    d08c:	2201      	movs	r2, #1
    d08e:	7302      	strb	r2, [r0, #12]
    d090:	2200      	movs	r2, #0
    d092:	75c2      	strb	r2, [r0, #23]
    d094:	790a      	ldrb	r2, [r1, #4]
    d096:	b16a      	cbz	r2, d0b4 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2d2>
    d098:	2200      	movs	r2, #0
    d09a:	8282      	strh	r2, [r0, #20]
    d09c:	794a      	ldrb	r2, [r1, #5]
    d09e:	b15a      	cbz	r2, d0b8 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2d6>
    d0a0:	2203      	movs	r2, #3
    d0a2:	7582      	strb	r2, [r0, #22]
    d0a4:	688a      	ldr	r2, [r1, #8]
    d0a6:	326a      	adds	r2, #106	; 0x6a
    d0a8:	6102      	str	r2, [r0, #16]
    d0aa:	68c9      	ldr	r1, [r1, #12]
    d0ac:	6181      	str	r1, [r0, #24]
    d0ae:	2103      	movs	r1, #3
    d0b0:	7081      	strb	r1, [r0, #2]
    d0b2:	4770      	bx	lr
    d0b4:	222b      	movs	r2, #43	; 0x2b
    d0b6:	e7f0      	b.n	d09a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2b8>
    d0b8:	2202      	movs	r2, #2
    d0ba:	e7f2      	b.n	d0a2 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2c0>
    d0bc:	b510      	push	{r4, lr}
    d0be:	4604      	mov	r4, r0
    d0c0:	2000      	movs	r0, #0
    d0c2:	7320      	strb	r0, [r4, #12]
    d0c4:	75e0      	strb	r0, [r4, #23]
    d0c6:	7908      	ldrb	r0, [r1, #4]
    d0c8:	b180      	cbz	r0, d0ec <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x30a>
    d0ca:	2000      	movs	r0, #0
    d0cc:	82a0      	strh	r0, [r4, #20]
    d0ce:	7948      	ldrb	r0, [r1, #5]
    d0d0:	b170      	cbz	r0, d0f0 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x30e>
    d0d2:	2003      	movs	r0, #3
    d0d4:	75a0      	strb	r0, [r4, #22]
    d0d6:	68c8      	ldr	r0, [r1, #12]
    d0d8:	306a      	adds	r0, #106	; 0x6a
    d0da:	6120      	str	r0, [r4, #16]
    d0dc:	6889      	ldr	r1, [r1, #8]
    d0de:	69e0      	ldr	r0, [r4, #28]
    d0e0:	f7f5 fc14 	bl	290c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    d0e4:	61a0      	str	r0, [r4, #24]
    d0e6:	2004      	movs	r0, #4
    d0e8:	70a0      	strb	r0, [r4, #2]
    d0ea:	bd10      	pop	{r4, pc}
    d0ec:	202b      	movs	r0, #43	; 0x2b
    d0ee:	e7ed      	b.n	d0cc <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2ea>
    d0f0:	2002      	movs	r0, #2
    d0f2:	e7ef      	b.n	d0d4 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2f2>
    d0f4:	b570      	push	{r4, r5, r6, lr}
    d0f6:	4605      	mov	r5, r0
    d0f8:	460c      	mov	r4, r1
    d0fa:	78c8      	ldrb	r0, [r1, #3]
    d0fc:	f7f6 f9ea 	bl	34d4 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    d100:	b178      	cbz	r0, d122 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x340>
    d102:	4620      	mov	r0, r4
    d104:	f000 f810 	bl	d128 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x346>
    d108:	68a2      	ldr	r2, [r4, #8]
    d10a:	2109      	movs	r1, #9
    d10c:	4628      	mov	r0, r5
    d10e:	4790      	blx	r2
    d110:	2800      	cmp	r0, #0
    d112:	d008      	beq.n	d126 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x344>
    d114:	7800      	ldrb	r0, [r0, #0]
    d116:	2800      	cmp	r0, #0
    d118:	d005      	beq.n	d126 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x344>
    d11a:	21dd      	movs	r1, #221	; 0xdd
    d11c:	206a      	movs	r0, #106	; 0x6a
    d11e:	f7f7 fd73 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d122:	21d9      	movs	r1, #217	; 0xd9
    d124:	e7fa      	b.n	d11c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x33a>
    d126:	bd70      	pop	{r4, r5, r6, pc}
    d128:	2100      	movs	r1, #0
    d12a:	7081      	strb	r1, [r0, #2]
    d12c:	7001      	strb	r1, [r0, #0]
    d12e:	7041      	strb	r1, [r0, #1]
    d130:	4770      	bx	lr

0000d132 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    d132:	b570      	push	{r4, r5, r6, lr}
    d134:	f7f4 fba8 	bl	1888 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    d138:	4605      	mov	r5, r0
    d13a:	2400      	movs	r4, #0
    d13c:	e006      	b.n	d14c <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    d13e:	4620      	mov	r0, r4
    d140:	f7f4 fba8 	bl	1894 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    d144:	f7ff fff0 	bl	d128 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x346>
    d148:	1c64      	adds	r4, r4, #1
    d14a:	b2e4      	uxtb	r4, r4
    d14c:	42ac      	cmp	r4, r5
    d14e:	d3f6      	bcc.n	d13e <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    d150:	bd70      	pop	{r4, r5, r6, pc}

0000d152 <mpsl_timeslot_request>:
    d152:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d156:	460d      	mov	r5, r1
    d158:	f7f4 fb9c 	bl	1894 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    d15c:	0004      	movs	r4, r0
    d15e:	d007      	beq.n	d170 <mpsl_timeslot_request+0x1e>
    d160:	78a0      	ldrb	r0, [r4, #2]
    d162:	f06f 0622 	mvn.w	r6, #34	; 0x22
    d166:	2801      	cmp	r0, #1
    d168:	d006      	beq.n	d178 <mpsl_timeslot_request+0x26>
    d16a:	2802      	cmp	r0, #2
    d16c:	d110      	bne.n	d190 <mpsl_timeslot_request+0x3e>
    d16e:	e003      	b.n	d178 <mpsl_timeslot_request+0x26>
    d170:	f06f 0001 	mvn.w	r0, #1
    d174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d178:	f06f 0715 	mvn.w	r7, #21
    d17c:	b155      	cbz	r5, d194 <mpsl_timeslot_request+0x42>
    d17e:	4628      	mov	r0, r5
    d180:	f7f4 fafa 	bl	1778 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x34>
    d184:	b130      	cbz	r0, d194 <mpsl_timeslot_request+0x42>
    d186:	7828      	ldrb	r0, [r5, #0]
    d188:	b130      	cbz	r0, d198 <mpsl_timeslot_request+0x46>
    d18a:	78a0      	ldrb	r0, [r4, #2]
    d18c:	2802      	cmp	r0, #2
    d18e:	d008      	beq.n	d1a2 <mpsl_timeslot_request+0x50>
    d190:	4630      	mov	r0, r6
    d192:	e7ef      	b.n	d174 <mpsl_timeslot_request+0x22>
    d194:	4638      	mov	r0, r7
    d196:	e7ed      	b.n	d174 <mpsl_timeslot_request+0x22>
    d198:	4629      	mov	r1, r5
    d19a:	4620      	mov	r0, r4
    d19c:	f7ff ff76 	bl	d08c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2aa>
    d1a0:	e003      	b.n	d1aa <mpsl_timeslot_request+0x58>
    d1a2:	4629      	mov	r1, r5
    d1a4:	4620      	mov	r0, r4
    d1a6:	f7ff ff89 	bl	d0bc <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2da>
    d1aa:	78e0      	ldrb	r0, [r4, #3]
    d1ac:	f104 010c 	add.w	r1, r4, #12
    d1b0:	f7ff fe68 	bl	ce84 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xa2>
    d1b4:	b108      	cbz	r0, d1ba <mpsl_timeslot_request+0x68>
    d1b6:	2000      	movs	r0, #0
    d1b8:	e7dc      	b.n	d174 <mpsl_timeslot_request+0x22>
    d1ba:	f240 21ae 	movw	r1, #686	; 0x2ae
    d1be:	206a      	movs	r0, #106	; 0x6a
    d1c0:	f7f7 fd22 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>

0000d1c4 <mpsl_timeslot_session_close>:
    d1c4:	b510      	push	{r4, lr}
    d1c6:	4604      	mov	r4, r0
    d1c8:	f7f4 fb64 	bl	1894 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    d1cc:	0001      	movs	r1, r0
    d1ce:	d004      	beq.n	d1da <mpsl_timeslot_session_close+0x16>
    d1d0:	7808      	ldrb	r0, [r1, #0]
    d1d2:	f06f 0222 	mvn.w	r2, #34	; 0x22
    d1d6:	b968      	cbnz	r0, d1f4 <mpsl_timeslot_session_close+0x30>
    d1d8:	e002      	b.n	d1e0 <mpsl_timeslot_session_close+0x1c>
    d1da:	f06f 0001 	mvn.w	r0, #1
    d1de:	bd10      	pop	{r4, pc}
    d1e0:	7888      	ldrb	r0, [r1, #2]
    d1e2:	b138      	cbz	r0, d1f4 <mpsl_timeslot_session_close+0x30>
    d1e4:	2802      	cmp	r0, #2
    d1e6:	d007      	beq.n	d1f8 <mpsl_timeslot_session_close+0x34>
    d1e8:	2801      	cmp	r0, #1
    d1ea:	d005      	beq.n	d1f8 <mpsl_timeslot_session_close+0x34>
    d1ec:	2001      	movs	r0, #1
    d1ee:	7008      	strb	r0, [r1, #0]
    d1f0:	2000      	movs	r0, #0
    d1f2:	bd10      	pop	{r4, pc}
    d1f4:	4610      	mov	r0, r2
    d1f6:	bd10      	pop	{r4, pc}
    d1f8:	4620      	mov	r0, r4
    d1fa:	f7ff ff7b 	bl	d0f4 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x312>
    d1fe:	e7f7      	b.n	d1f0 <mpsl_timeslot_session_close+0x2c>

0000d200 <mpsl_timeslot_session_count_set>:
    d200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d204:	460e      	mov	r6, r1
    d206:	4607      	mov	r7, r0
    d208:	f7f4 fb3e 	bl	1888 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    d20c:	4605      	mov	r5, r0
    d20e:	2400      	movs	r4, #0
    d210:	e00a      	b.n	d228 <mpsl_timeslot_session_count_set+0x28>
    d212:	4620      	mov	r0, r4
    d214:	f7f4 fb3e 	bl	1894 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    d218:	7880      	ldrb	r0, [r0, #2]
    d21a:	b118      	cbz	r0, d224 <mpsl_timeslot_session_count_set+0x24>
    d21c:	f04f 30ff 	mov.w	r0, #4294967295
    d220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d224:	1c64      	adds	r4, r4, #1
    d226:	b2e4      	uxtb	r4, r4
    d228:	42ac      	cmp	r4, r5
    d22a:	d3f2      	bcc.n	d212 <mpsl_timeslot_session_count_set+0x12>
    d22c:	2e08      	cmp	r6, #8
    d22e:	d902      	bls.n	d236 <mpsl_timeslot_session_count_set+0x36>
    d230:	f06f 0015 	mvn.w	r0, #21
    d234:	e7f4      	b.n	d220 <mpsl_timeslot_session_count_set+0x20>
    d236:	b117      	cbz	r7, d23e <mpsl_timeslot_session_count_set+0x3e>
    d238:	4631      	mov	r1, r6
    d23a:	4638      	mov	r0, r7
    d23c:	e001      	b.n	d242 <mpsl_timeslot_session_count_set+0x42>
    d23e:	2100      	movs	r1, #0
    d240:	4608      	mov	r0, r1
    d242:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d246:	f7f4 bb0b 	b.w	1860 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q>

0000d24a <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>:
    d24a:	2000      	movs	r0, #0
    d24c:	f7f7 b92c 	b.w	44a8 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>

0000d250 <sym_WGWJTNZTDUUYDCZS4UGNX4L4JID5HLG6XRROR3Q>:
    d250:	2000      	movs	r0, #0
    d252:	f7f7 b90f 	b.w	4474 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>

0000d256 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>:
    d256:	b510      	push	{r4, lr}
    d258:	f7f6 fddc 	bl	3e14 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    d25c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d260:	f000 b800 	b.w	d264 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>

0000d264 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
    d264:	0a41      	lsrs	r1, r0, #9
    d266:	f643 5209 	movw	r2, #15625	; 0x3d09
    d26a:	4351      	muls	r1, r2
    d26c:	f3c0 0008 	ubfx	r0, r0, #0, #9
    d270:	fb10 f002 	smulbb	r0, r0, r2
    d274:	f500 7080 	add.w	r0, r0, #256	; 0x100
    d278:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    d27c:	4770      	bx	lr

0000d27e <MPSL_IRQ_RADIO_Handler>:
    d27e:	f7f5 bbbb 	b.w	29f8 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>
    d282:	2800      	cmp	r0, #0
    d284:	db09      	blt.n	d29a <MPSL_IRQ_RADIO_Handler+0x1c>
    d286:	f000 021f 	and.w	r2, r0, #31
    d28a:	2101      	movs	r1, #1
    d28c:	4091      	lsls	r1, r2
    d28e:	0940      	lsrs	r0, r0, #5
    d290:	0080      	lsls	r0, r0, #2
    d292:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d296:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d29a:	4770      	bx	lr
    d29c:	2800      	cmp	r0, #0
    d29e:	db0d      	blt.n	d2bc <MPSL_IRQ_RADIO_Handler+0x3e>
    d2a0:	f000 021f 	and.w	r2, r0, #31
    d2a4:	2101      	movs	r1, #1
    d2a6:	4091      	lsls	r1, r2
    d2a8:	0940      	lsrs	r0, r0, #5
    d2aa:	0080      	lsls	r0, r0, #2
    d2ac:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d2b0:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    d2b4:	f3bf 8f4f 	dsb	sy
    d2b8:	f3bf 8f6f 	isb	sy
    d2bc:	4770      	bx	lr

0000d2be <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    d2be:	b570      	push	{r4, r5, r6, lr}
    d2c0:	4602      	mov	r2, r0
    d2c2:	2000      	movs	r0, #0
    d2c4:	2900      	cmp	r1, #0
    d2c6:	d01d      	beq.n	d304 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x46>
    d2c8:	fba2 0101 	umull	r0, r1, r2, r1
    d2cc:	0a40      	lsrs	r0, r0, #9
    d2ce:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
    d2d2:	0a49      	lsrs	r1, r1, #9
    d2d4:	1c40      	adds	r0, r0, #1
    d2d6:	f141 0100 	adc.w	r1, r1, #0
    d2da:	f240 72a1 	movw	r2, #1953	; 0x7a1
    d2de:	1883      	adds	r3, r0, r2
    d2e0:	f141 0100 	adc.w	r1, r1, #0
    d2e4:	1c5b      	adds	r3, r3, #1
    d2e6:	f141 0400 	adc.w	r4, r1, #0
    d2ea:	2100      	movs	r1, #0
    d2ec:	f1d3 33ff 	rsbs	r3, r3, #4294967295
    d2f0:	41a1      	sbcs	r1, r4
    d2f2:	d203      	bcs.n	d2fc <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
    d2f4:	2171      	movs	r1, #113	; 0x71
    d2f6:	206d      	movs	r0, #109	; 0x6d
    d2f8:	f7f7 fc86 	bl	4c08 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d2fc:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
    d300:	fbb0 f0f2 	udiv	r0, r0, r2
    d304:	bd70      	pop	{r4, r5, r6, pc}
    d306:	5840      	ldr	r0, [r0, r1]
    d308:	2800      	cmp	r0, #0
    d30a:	d000      	beq.n	d30e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x50>
    d30c:	2001      	movs	r0, #1
    d30e:	4770      	bx	lr
    d310:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    d314:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    d318:	f002 0201 	and.w	r2, r2, #1
    d31c:	03c0      	lsls	r0, r0, #15
    d31e:	d503      	bpl.n	d328 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    d320:	428a      	cmp	r2, r1
    d322:	d101      	bne.n	d328 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    d324:	2001      	movs	r0, #1
    d326:	4770      	bx	lr
    d328:	2000      	movs	r0, #0
    d32a:	4770      	bx	lr

0000d32c <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    d32c:	b510      	push	{r4, lr}
    d32e:	2101      	movs	r1, #1
    d330:	0788      	lsls	r0, r1, #30
    d332:	f7f7 fc13 	bl	4b5c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    d336:	2800      	cmp	r0, #0
    d338:	d000      	beq.n	d33c <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    d33a:	2001      	movs	r0, #1
    d33c:	bd10      	pop	{r4, pc}

0000d33e <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    d33e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    d342:	2101      	movs	r1, #1
    d344:	6001      	str	r1, [r0, #0]
    d346:	4770      	bx	lr

0000d348 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    d348:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    d34c:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    d350:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    d354:	f002 0203 	and.w	r2, r2, #3
    d358:	03c9      	lsls	r1, r1, #15
    d35a:	d503      	bpl.n	d364 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    d35c:	4282      	cmp	r2, r0
    d35e:	d101      	bne.n	d364 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    d360:	2001      	movs	r0, #1
    d362:	4770      	bx	lr
    d364:	2000      	movs	r0, #0
    d366:	4770      	bx	lr

0000d368 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    d368:	b510      	push	{r4, lr}
    d36a:	2100      	movs	r1, #0
    d36c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    d370:	f7f7 fbf4 	bl	4b5c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    d374:	2800      	cmp	r0, #0
    d376:	d000      	beq.n	d37a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    d378:	2001      	movs	r0, #1
    d37a:	bd10      	pop	{r4, pc}
    d37c:	2800      	cmp	r0, #0
    d37e:	db09      	blt.n	d394 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    d380:	f000 021f 	and.w	r2, r0, #31
    d384:	2101      	movs	r1, #1
    d386:	4091      	lsls	r1, r2
    d388:	0940      	lsrs	r0, r0, #5
    d38a:	0080      	lsls	r0, r0, #2
    d38c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d390:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d394:	4770      	bx	lr
    d396:	2800      	cmp	r0, #0
    d398:	db0d      	blt.n	d3b6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    d39a:	f000 021f 	and.w	r2, r0, #31
    d39e:	2101      	movs	r1, #1
    d3a0:	4091      	lsls	r1, r2
    d3a2:	0940      	lsrs	r0, r0, #5
    d3a4:	0080      	lsls	r0, r0, #2
    d3a6:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d3aa:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    d3ae:	f3bf 8f4f 	dsb	sy
    d3b2:	f3bf 8f6f 	isb	sy
    d3b6:	4770      	bx	lr
    d3b8:	00021000 	.word	0x00021000
    d3bc:	000000fa 	.word	0x000000fa
    d3c0:	c2a663d0 	.word	0xc2a663d0
    d3c4:	f983364e 	.word	0xf983364e
    d3c8:	91b0cd2b 	.word	0x91b0cd2b
    d3cc:	8b823cbc 	.word	0x8b823cbc
    d3d0:	9c3db308 	.word	0x9c3db308
    d3d4:	2800      	cmp	r0, #0
    d3d6:	db09      	blt.n	d3ec <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
    d3d8:	f000 021f 	and.w	r2, r0, #31
    d3dc:	2101      	movs	r1, #1
    d3de:	4091      	lsls	r1, r2
    d3e0:	0940      	lsrs	r0, r0, #5
    d3e2:	0080      	lsls	r0, r0, #2
    d3e4:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d3e8:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d3ec:	4770      	bx	lr

0000d3ee <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    d3ee:	f3ef 8110 	mrs	r1, PRIMASK
    d3f2:	b672      	cpsid	i
    d3f4:	7802      	ldrb	r2, [r0, #0]
    d3f6:	2a01      	cmp	r2, #1
    d3f8:	d001      	beq.n	d3fe <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    d3fa:	2201      	movs	r2, #1
    d3fc:	e000      	b.n	d400 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    d3fe:	2200      	movs	r2, #0
    d400:	2301      	movs	r3, #1
    d402:	7003      	strb	r3, [r0, #0]
    d404:	b901      	cbnz	r1, d408 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    d406:	b662      	cpsie	i
    d408:	b10a      	cbz	r2, d40e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    d40a:	2000      	movs	r0, #0
    d40c:	4770      	bx	lr
    d40e:	f06f 0022 	mvn.w	r0, #34	; 0x22
    d412:	4770      	bx	lr

0000d414 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    d414:	2100      	movs	r1, #0
    d416:	7001      	strb	r1, [r0, #0]
    d418:	4608      	mov	r0, r1
    d41a:	4770      	bx	lr

0000d41c <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    d41c:	f3ef 8110 	mrs	r1, PRIMASK
    d420:	b672      	cpsid	i
    d422:	2200      	movs	r2, #0
    d424:	7002      	strb	r2, [r0, #0]
    d426:	b901      	cbnz	r1, d42a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    d428:	b662      	cpsie	i
    d42a:	2000      	movs	r0, #0
    d42c:	4770      	bx	lr

0000d42e <mpsl_low_priority_process>:
    d42e:	f7f7 bcd7 	b.w	4de0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

0000d432 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    d432:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d436:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d43a:	280f      	cmp	r0, #15
    d43c:	d001      	beq.n	d442 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    d43e:	2000      	movs	r0, #0
    d440:	4770      	bx	lr
    d442:	2001      	movs	r0, #1
    d444:	4770      	bx	lr

0000d446 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    d446:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d44a:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d44e:	280a      	cmp	r0, #10
    d450:	d001      	beq.n	d456 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    d452:	2000      	movs	r0, #0
    d454:	4770      	bx	lr
    d456:	2001      	movs	r0, #1
    d458:	4770      	bx	lr

0000d45a <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
    d45a:	b500      	push	{lr}
    d45c:	f7ff fff3 	bl	d446 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    d460:	b120      	cbz	r0, d46c <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
    d462:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d466:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    d46a:	b108      	cbz	r0, d470 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
    d46c:	2000      	movs	r0, #0
    d46e:	bd00      	pop	{pc}
    d470:	2001      	movs	r0, #1
    d472:	bd00      	pop	{pc}

0000d474 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    d474:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d478:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d47c:	280e      	cmp	r0, #14
    d47e:	d001      	beq.n	d484 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    d480:	2000      	movs	r0, #0
    d482:	4770      	bx	lr
    d484:	2001      	movs	r0, #1
    d486:	4770      	bx	lr

0000d488 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    d488:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d48c:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d490:	2810      	cmp	r0, #16
    d492:	d001      	beq.n	d498 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    d494:	2000      	movs	r0, #0
    d496:	4770      	bx	lr
    d498:	2001      	movs	r0, #1
    d49a:	4770      	bx	lr

0000d49c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    d49c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d4a0:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d4a4:	2806      	cmp	r0, #6
    d4a6:	d003      	beq.n	d4b0 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    d4a8:	1c40      	adds	r0, r0, #1
    d4aa:	d001      	beq.n	d4b0 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    d4ac:	2000      	movs	r0, #0
    d4ae:	4770      	bx	lr
    d4b0:	2001      	movs	r0, #1
    d4b2:	4770      	bx	lr

0000d4b4 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    d4b4:	b500      	push	{lr}
    d4b6:	f7ff fff1 	bl	d49c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    d4ba:	b148      	cbz	r0, d4d0 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    d4bc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d4c0:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    d4c4:	2806      	cmp	r0, #6
    d4c6:	d303      	bcc.n	d4d0 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    d4c8:	1c40      	adds	r0, r0, #1
    d4ca:	d001      	beq.n	d4d0 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    d4cc:	2001      	movs	r0, #1
    d4ce:	bd00      	pop	{pc}
    d4d0:	2000      	movs	r0, #0
    d4d2:	bd00      	pop	{pc}

0000d4d4 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    d4d4:	b500      	push	{lr}
    d4d6:	f7ff ffe1 	bl	d49c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    d4da:	b138      	cbz	r0, d4ec <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    d4dc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d4e0:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    d4e4:	2806      	cmp	r0, #6
    d4e6:	d303      	bcc.n	d4f0 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    d4e8:	1c40      	adds	r0, r0, #1
    d4ea:	d001      	beq.n	d4f0 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    d4ec:	2000      	movs	r0, #0
    d4ee:	bd00      	pop	{pc}
    d4f0:	2001      	movs	r0, #1
    d4f2:	bd00      	pop	{pc}

0000d4f4 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    d4f4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d4f8:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d4fc:	280d      	cmp	r0, #13
    d4fe:	d001      	beq.n	d504 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    d500:	2000      	movs	r0, #0
    d502:	4770      	bx	lr
    d504:	2001      	movs	r0, #1
    d506:	4770      	bx	lr

0000d508 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    d508:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d50c:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d510:	2808      	cmp	r0, #8
    d512:	d001      	beq.n	d518 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    d514:	2000      	movs	r0, #0
    d516:	4770      	bx	lr
    d518:	2001      	movs	r0, #1
    d51a:	4770      	bx	lr

0000d51c <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>:
    d51c:	2a00      	cmp	r2, #0
    d51e:	bf04      	itt	eq
    d520:	2000      	moveq	r0, #0
    d522:	4770      	bxeq	lr
    d524:	1e52      	subs	r2, r2, #1
    d526:	d007      	beq.n	d538 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x1c>
    d528:	7803      	ldrb	r3, [r0, #0]
    d52a:	f891 c000 	ldrb.w	ip, [r1]
    d52e:	4563      	cmp	r3, ip
    d530:	bf04      	itt	eq
    d532:	1c40      	addeq	r0, r0, #1
    d534:	1c49      	addeq	r1, r1, #1
    d536:	d0f5      	beq.n	d524 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x8>
    d538:	7800      	ldrb	r0, [r0, #0]
    d53a:	7809      	ldrb	r1, [r1, #0]
    d53c:	1a40      	subs	r0, r0, r1
    d53e:	4770      	bx	lr

0000d540 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    d540:	b4f0      	push	{r4, r5, r6, r7}
    d542:	ea80 0c01 	eor.w	ip, r0, r1
    d546:	4603      	mov	r3, r0
    d548:	f01c 0f03 	tst.w	ip, #3
    d54c:	d13c      	bne.n	d5c8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    d54e:	f013 0f03 	tst.w	r3, #3
    d552:	d00b      	beq.n	d56c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
    d554:	2a00      	cmp	r2, #0
    d556:	bf04      	itt	eq
    d558:	bcf0      	popeq	{r4, r5, r6, r7}
    d55a:	4770      	bxeq	lr
    d55c:	f811 cb01 	ldrb.w	ip, [r1], #1
    d560:	f803 cb01 	strb.w	ip, [r3], #1
    d564:	1e52      	subs	r2, r2, #1
    d566:	f013 0f03 	tst.w	r3, #3
    d56a:	d1f3      	bne.n	d554 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
    d56c:	2a03      	cmp	r2, #3
    d56e:	d94f      	bls.n	d610 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    d570:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    d574:	d24c      	bcs.n	d610 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    d576:	f1c2 0c00 	rsb	ip, r2, #0
    d57a:	ea4f 74ec 	mov.w	r4, ip, asr #31
    d57e:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
    d582:	ea4f 0cac 	mov.w	ip, ip, asr #2
    d586:	f1cc 0c00 	rsb	ip, ip, #0
    d58a:	f1bc 0f00 	cmp.w	ip, #0
    d58e:	dd1b      	ble.n	d5c8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    d590:	1f0d      	subs	r5, r1, #4
    d592:	1f1c      	subs	r4, r3, #4
    d594:	f01c 0f01 	tst.w	ip, #1
    d598:	d003      	beq.n	d5a2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
    d59a:	f855 6f04 	ldr.w	r6, [r5, #4]!
    d59e:	f844 6f04 	str.w	r6, [r4, #4]!
    d5a2:	ea5f 066c 	movs.w	r6, ip, asr #1
    d5a6:	d007      	beq.n	d5b8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
    d5a8:	686f      	ldr	r7, [r5, #4]
    d5aa:	6067      	str	r7, [r4, #4]
    d5ac:	f855 7f08 	ldr.w	r7, [r5, #8]!
    d5b0:	f844 7f08 	str.w	r7, [r4, #8]!
    d5b4:	1e76      	subs	r6, r6, #1
    d5b6:	d1f7      	bne.n	d5a8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
    d5b8:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    d5bc:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    d5c0:	f1cc 0c00 	rsb	ip, ip, #0
    d5c4:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    d5c8:	2a00      	cmp	r2, #0
    d5ca:	bf04      	itt	eq
    d5cc:	bcf0      	popeq	{r4, r5, r6, r7}
    d5ce:	4770      	bxeq	lr
    d5d0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    d5d4:	d226      	bcs.n	d624 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    d5d6:	2a00      	cmp	r2, #0
    d5d8:	bfdc      	itt	le
    d5da:	bcf0      	pople	{r4, r5, r6, r7}
    d5dc:	4770      	bxle	lr
    d5de:	1e49      	subs	r1, r1, #1
    d5e0:	1e5b      	subs	r3, r3, #1
    d5e2:	f012 0f01 	tst.w	r2, #1
    d5e6:	d003      	beq.n	d5f0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
    d5e8:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    d5ec:	f803 cf01 	strb.w	ip, [r3, #1]!
    d5f0:	1052      	asrs	r2, r2, #1
    d5f2:	bf04      	itt	eq
    d5f4:	bcf0      	popeq	{r4, r5, r6, r7}
    d5f6:	4770      	bxeq	lr
    d5f8:	f891 c001 	ldrb.w	ip, [r1, #1]
    d5fc:	f883 c001 	strb.w	ip, [r3, #1]
    d600:	f811 cf02 	ldrb.w	ip, [r1, #2]!
    d604:	f803 cf02 	strb.w	ip, [r3, #2]!
    d608:	1e52      	subs	r2, r2, #1
    d60a:	d1f5      	bne.n	d5f8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
    d60c:	bcf0      	pop	{r4, r5, r6, r7}
    d60e:	4770      	bx	lr
    d610:	2a04      	cmp	r2, #4
    d612:	d3d9      	bcc.n	d5c8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    d614:	f851 cb04 	ldr.w	ip, [r1], #4
    d618:	1f12      	subs	r2, r2, #4
    d61a:	f843 cb04 	str.w	ip, [r3], #4
    d61e:	2a04      	cmp	r2, #4
    d620:	d2f8      	bcs.n	d614 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
    d622:	e7d1      	b.n	d5c8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    d624:	f811 cb01 	ldrb.w	ip, [r1], #1
    d628:	f803 cb01 	strb.w	ip, [r3], #1
    d62c:	1e52      	subs	r2, r2, #1
    d62e:	d1f9      	bne.n	d624 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    d630:	bcf0      	pop	{r4, r5, r6, r7}
    d632:	4770      	bx	lr

0000d634 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    d634:	b470      	push	{r4, r5, r6}
    d636:	4603      	mov	r3, r0
    d638:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    d63c:	f010 0f03 	tst.w	r0, #3
    d640:	d009      	beq.n	d656 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    d642:	2a00      	cmp	r2, #0
    d644:	bf04      	itt	eq
    d646:	bc70      	popeq	{r4, r5, r6}
    d648:	4770      	bxeq	lr
    d64a:	f803 cb01 	strb.w	ip, [r3], #1
    d64e:	1e52      	subs	r2, r2, #1
    d650:	f013 0f03 	tst.w	r3, #3
    d654:	d1f5      	bne.n	d642 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
    d656:	b2c9      	uxtb	r1, r1
    d658:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    d65c:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
    d660:	2a03      	cmp	r2, #3
    d662:	d939      	bls.n	d6d8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    d664:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    d668:	d236      	bcs.n	d6d8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    d66a:	4251      	negs	r1, r2
    d66c:	17cc      	asrs	r4, r1, #31
    d66e:	eb01 7194 	add.w	r1, r1, r4, lsr #30
    d672:	1089      	asrs	r1, r1, #2
    d674:	424e      	negs	r6, r1
    d676:	2e00      	cmp	r6, #0
    d678:	dd11      	ble.n	d69e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    d67a:	1f19      	subs	r1, r3, #4
    d67c:	f016 0f01 	tst.w	r6, #1
    d680:	bf18      	it	ne
    d682:	f841 5f04 	strne.w	r5, [r1, #4]!
    d686:	1074      	asrs	r4, r6, #1
    d688:	d004      	beq.n	d694 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
    d68a:	604d      	str	r5, [r1, #4]
    d68c:	f841 5f08 	str.w	r5, [r1, #8]!
    d690:	1e64      	subs	r4, r4, #1
    d692:	d1fa      	bne.n	d68a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
    d694:	4271      	negs	r1, r6
    d696:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    d69a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    d69e:	2a00      	cmp	r2, #0
    d6a0:	bf04      	itt	eq
    d6a2:	bc70      	popeq	{r4, r5, r6}
    d6a4:	4770      	bxeq	lr
    d6a6:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    d6aa:	d21d      	bcs.n	d6e8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    d6ac:	2a00      	cmp	r2, #0
    d6ae:	bfdc      	itt	le
    d6b0:	bc70      	pople	{r4, r5, r6}
    d6b2:	4770      	bxle	lr
    d6b4:	1e59      	subs	r1, r3, #1
    d6b6:	f012 0f01 	tst.w	r2, #1
    d6ba:	bf18      	it	ne
    d6bc:	f801 cf01 	strbne.w	ip, [r1, #1]!
    d6c0:	1052      	asrs	r2, r2, #1
    d6c2:	bf04      	itt	eq
    d6c4:	bc70      	popeq	{r4, r5, r6}
    d6c6:	4770      	bxeq	lr
    d6c8:	f881 c001 	strb.w	ip, [r1, #1]
    d6cc:	f801 cf02 	strb.w	ip, [r1, #2]!
    d6d0:	1e52      	subs	r2, r2, #1
    d6d2:	d1f9      	bne.n	d6c8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
    d6d4:	bc70      	pop	{r4, r5, r6}
    d6d6:	4770      	bx	lr
    d6d8:	2a04      	cmp	r2, #4
    d6da:	d3e0      	bcc.n	d69e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    d6dc:	1f12      	subs	r2, r2, #4
    d6de:	f843 5b04 	str.w	r5, [r3], #4
    d6e2:	2a04      	cmp	r2, #4
    d6e4:	d2fa      	bcs.n	d6dc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
    d6e6:	e7da      	b.n	d69e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    d6e8:	f803 cb01 	strb.w	ip, [r3], #1
    d6ec:	1e52      	subs	r2, r2, #1
    d6ee:	d1fb      	bne.n	d6e8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    d6f0:	bc70      	pop	{r4, r5, r6}
    d6f2:	4770      	bx	lr
    d6f4:	f04f 30ff 	mov.w	r0, #4294967295
    d6f8:	4770      	bx	lr
    d6fa:	2000      	movs	r0, #0
    d6fc:	4770      	bx	lr
    d6fe:	2000      	movs	r0, #0
    d700:	4770      	bx	lr
    d702:	f04f 30ff 	mov.w	r0, #4294967295
    d706:	4770      	bx	lr
    d708:	4770      	bx	lr
    d70a:	4770      	bx	lr
    d70c:	2000      	movs	r0, #0
    d70e:	4770      	bx	lr
    d710:	f04f 30ff 	mov.w	r0, #4294967295
    d714:	4770      	bx	lr
    d716:	f04f 30ff 	mov.w	r0, #4294967295
    d71a:	4770      	bx	lr
    d71c:	2100      	movs	r1, #0
    d71e:	7001      	strb	r1, [r0, #0]
    d720:	4770      	bx	lr
    d722:	f04f 30ff 	mov.w	r0, #4294967295
    d726:	4770      	bx	lr
    d728:	f04f 30ff 	mov.w	r0, #4294967295
    d72c:	4770      	bx	lr
    d72e:	2800      	cmp	r0, #0
    d730:	d001      	beq.n	d736 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x102>
    d732:	f06f 0015 	mvn.w	r0, #21
    d736:	4770      	bx	lr
    d738:	2000      	movs	r0, #0
    d73a:	4770      	bx	lr
    d73c:	2200      	movs	r2, #0
    d73e:	f000 b80a 	b.w	d756 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>

0000d742 <mpsl_fem_lna_is_configured>:
    d742:	b510      	push	{r4, lr}
    d744:	2100      	movs	r1, #0
    d746:	4608      	mov	r0, r1
    d748:	f7f7 fbe4 	bl	4f14 <mpsl_fem_lna_configuration_set>
    d74c:	b108      	cbz	r0, d752 <mpsl_fem_lna_is_configured+0x10>
    d74e:	2000      	movs	r0, #0
    d750:	bd10      	pop	{r4, pc}
    d752:	2001      	movs	r0, #1
    d754:	bd10      	pop	{r4, pc}

0000d756 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>:
    d756:	b530      	push	{r4, r5, lr}
    d758:	4603      	mov	r3, r0
    d75a:	2000      	movs	r0, #0
    d75c:	1a9b      	subs	r3, r3, r2
    d75e:	f06f 057f 	mvn.w	r5, #127	; 0x7f
    d762:	f06f 0415 	mvn.w	r4, #21
    d766:	42ab      	cmp	r3, r5
    d768:	da02      	bge.n	d770 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
    d76a:	4620      	mov	r0, r4
    d76c:	462b      	mov	r3, r5
    d76e:	e003      	b.n	d778 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x22>
    d770:	2b7f      	cmp	r3, #127	; 0x7f
    d772:	dd01      	ble.n	d778 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x22>
    d774:	4620      	mov	r0, r4
    d776:	237f      	movs	r3, #127	; 0x7f
    d778:	700b      	strb	r3, [r1, #0]
    d77a:	704a      	strb	r2, [r1, #1]
    d77c:	bd30      	pop	{r4, r5, pc}
    d77e:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    d782:	4605      	mov	r5, r0
    d784:	f100 0003 	add.w	r0, r0, #3
    d788:	f020 0003 	bic.w	r0, r0, #3
    d78c:	460c      	mov	r4, r1
    d78e:	9000      	str	r0, [sp, #0]
    d790:	7849      	ldrb	r1, [r1, #1]
    d792:	f88d 1004 	strb.w	r1, [sp, #4]
    d796:	78a1      	ldrb	r1, [r4, #2]
    d798:	0016      	movs	r6, r2
    d79a:	f88d 1005 	strb.w	r1, [sp, #5]
    d79e:	d000      	beq.n	d7a2 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x4c>
    d7a0:	2000      	movs	r0, #0
    d7a2:	a901      	add	r1, sp, #4
    d7a4:	f7f7 fedc 	bl	5560 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    d7a8:	9900      	ldr	r1, [sp, #0]
    d7aa:	4408      	add	r0, r1
    d7ac:	9000      	str	r0, [sp, #0]
    d7ae:	78a1      	ldrb	r1, [r4, #2]
    d7b0:	b141      	cbz	r1, d7c4 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x6e>
    d7b2:	8a63      	ldrh	r3, [r4, #18]
    d7b4:	78e2      	ldrb	r2, [r4, #3]
    d7b6:	b106      	cbz	r6, d7ba <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x64>
    d7b8:	2000      	movs	r0, #0
    d7ba:	f7f8 f961 	bl	5a80 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>
    d7be:	9900      	ldr	r1, [sp, #0]
    d7c0:	4408      	add	r0, r1
    d7c2:	9000      	str	r0, [sp, #0]
    d7c4:	4632      	mov	r2, r6
    d7c6:	4621      	mov	r1, r4
    d7c8:	4668      	mov	r0, sp
    d7ca:	f000 f808 	bl	d7de <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x88>
    d7ce:	9800      	ldr	r0, [sp, #0]
    d7d0:	1dc0      	adds	r0, r0, #7
    d7d2:	f020 0007 	bic.w	r0, r0, #7
    d7d6:	9000      	str	r0, [sp, #0]
    d7d8:	1b40      	subs	r0, r0, r5
    d7da:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    d7de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d7e2:	4606      	mov	r6, r0
    d7e4:	460c      	mov	r4, r1
    d7e6:	7808      	ldrb	r0, [r1, #0]
    d7e8:	7849      	ldrb	r1, [r1, #1]
    d7ea:	2700      	movs	r7, #0
    d7ec:	4408      	add	r0, r1
    d7ee:	4691      	mov	r9, r2
    d7f0:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    d7f4:	463d      	mov	r5, r7
    d7f6:	e00e      	b.n	d816 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0xc0>
    d7f8:	7a23      	ldrb	r3, [r4, #8]
    d7fa:	2b02      	cmp	r3, #2
    d7fc:	d200      	bcs.n	d800 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0xaa>
    d7fe:	2302      	movs	r3, #2
    d800:	79e2      	ldrb	r2, [r4, #7]
    d802:	2a03      	cmp	r2, #3
    d804:	d200      	bcs.n	d808 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0xb2>
    d806:	2203      	movs	r2, #3
    d808:	79a1      	ldrb	r1, [r4, #6]
    d80a:	7960      	ldrb	r0, [r4, #5]
    d80c:	f000 ff00 	bl	e610 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    d810:	1c6d      	adds	r5, r5, #1
    d812:	4407      	add	r7, r0
    d814:	b2ed      	uxtb	r5, r5
    d816:	4545      	cmp	r5, r8
    d818:	d3ee      	bcc.n	d7f8 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0xa2>
    d81a:	6830      	ldr	r0, [r6, #0]
    d81c:	1cc0      	adds	r0, r0, #3
    d81e:	f020 0003 	bic.w	r0, r0, #3
    d822:	6030      	str	r0, [r6, #0]
    d824:	f1b9 0f00 	cmp.w	r9, #0
    d828:	d000      	beq.n	d82c <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0xd6>
    d82a:	2000      	movs	r0, #0
    d82c:	463a      	mov	r2, r7
    d82e:	4641      	mov	r1, r8
    d830:	f7f8 f870 	bl	5914 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    d834:	6831      	ldr	r1, [r6, #0]
    d836:	4408      	add	r0, r1
    d838:	6030      	str	r0, [r6, #0]
    d83a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000d83e <sdc_soc_ecb_block_encrypt>:
    d83e:	b530      	push	{r4, r5, lr}
    d840:	460d      	mov	r5, r1
    d842:	b08d      	sub	sp, #52	; 0x34
    d844:	4614      	mov	r4, r2
    d846:	4601      	mov	r1, r0
    d848:	2210      	movs	r2, #16
    d84a:	4668      	mov	r0, sp
    d84c:	f7ff fe78 	bl	d540 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d850:	2210      	movs	r2, #16
    d852:	4629      	mov	r1, r5
    d854:	a804      	add	r0, sp, #16
    d856:	f7ff fe73 	bl	d540 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d85a:	4668      	mov	r0, sp
    d85c:	f001 f856 	bl	e90c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    d860:	b118      	cbz	r0, d86a <sdc_soc_ecb_block_encrypt+0x2c>
    d862:	f06f 0015 	mvn.w	r0, #21
    d866:	b00d      	add	sp, #52	; 0x34
    d868:	bd30      	pop	{r4, r5, pc}
    d86a:	2210      	movs	r2, #16
    d86c:	4620      	mov	r0, r4
    d86e:	a908      	add	r1, sp, #32
    d870:	f7ff fe66 	bl	d540 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d874:	2000      	movs	r0, #0
    d876:	e7f6      	b.n	d866 <sdc_soc_ecb_block_encrypt+0x28>

0000d878 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>:
    d878:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    d87a:	4604      	mov	r4, r0
    d87c:	1d01      	adds	r1, r0, #4
    d87e:	4668      	mov	r0, sp
    d880:	f7f9 fcc8 	bl	7214 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>
    d884:	2800      	cmp	r0, #0
    d886:	d004      	beq.n	d892 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I+0x1a>
    d888:	4669      	mov	r1, sp
    d88a:	4620      	mov	r0, r4
    d88c:	f000 f848 	bl	d920 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
    d890:	2001      	movs	r0, #1
    d892:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000d894 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    d894:	b50e      	push	{r1, r2, r3, lr}
    d896:	4601      	mov	r1, r0
    d898:	4668      	mov	r0, sp
    d89a:	f000 f827 	bl	d8ec <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    d89e:	4668      	mov	r0, sp
    d8a0:	f001 fcc2 	bl	f228 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    d8a4:	bd0e      	pop	{r1, r2, r3, pc}

0000d8a6 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>:
    d8a6:	b510      	push	{r4, lr}
    d8a8:	4604      	mov	r4, r0
    d8aa:	4620      	mov	r0, r4
    d8ac:	f7f7 fd46 	bl	533c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x50>
    d8b0:	2800      	cmp	r0, #0
    d8b2:	d006      	beq.n	d8c2 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1c>
    d8b4:	78a1      	ldrb	r1, [r4, #2]
    d8b6:	7820      	ldrb	r0, [r4, #0]
    d8b8:	f000 f804 	bl	d8c4 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    d8bc:	2800      	cmp	r0, #0
    d8be:	d0f4      	beq.n	d8aa <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x4>
    d8c0:	2001      	movs	r0, #1
    d8c2:	bd10      	pop	{r4, pc}
    d8c4:	b570      	push	{r4, r5, r6, lr}
    d8c6:	460c      	mov	r4, r1
    d8c8:	4605      	mov	r5, r0
    d8ca:	f7f7 fda9 	bl	5420 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    d8ce:	2800      	cmp	r0, #0
    d8d0:	d002      	beq.n	d8d8 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x32>
    d8d2:	2d3e      	cmp	r5, #62	; 0x3e
    d8d4:	d001      	beq.n	d8da <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x34>
    d8d6:	2001      	movs	r0, #1
    d8d8:	bd70      	pop	{r4, r5, r6, pc}
    d8da:	2c12      	cmp	r4, #18
    d8dc:	d004      	beq.n	d8e8 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x42>
    d8de:	4620      	mov	r0, r4
    d8e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d8e4:	f7f7 bdb8 	b.w	5458 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    d8e8:	2000      	movs	r0, #0
    d8ea:	bd70      	pop	{r4, r5, r6, pc}

0000d8ec <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    d8ec:	880a      	ldrh	r2, [r1, #0]
    d8ee:	f3c2 020b 	ubfx	r2, r2, #0, #12
    d8f2:	8002      	strh	r2, [r0, #0]
    d8f4:	884a      	ldrh	r2, [r1, #2]
    d8f6:	8042      	strh	r2, [r0, #2]
    d8f8:	784a      	ldrb	r2, [r1, #1]
    d8fa:	0993      	lsrs	r3, r2, #6
    d8fc:	2200      	movs	r2, #0
    d8fe:	7142      	strb	r2, [r0, #5]
    d900:	784b      	ldrb	r3, [r1, #1]
    d902:	f3c3 1301 	ubfx	r3, r3, #4, #2
    d906:	b11b      	cbz	r3, d910 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    d908:	2b01      	cmp	r3, #1
    d90a:	d005      	beq.n	d918 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    d90c:	2b02      	cmp	r3, #2
    d90e:	d005      	beq.n	d91c <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    d910:	7102      	strb	r2, [r0, #4]
    d912:	1d09      	adds	r1, r1, #4
    d914:	6081      	str	r1, [r0, #8]
    d916:	4770      	bx	lr
    d918:	2201      	movs	r2, #1
    d91a:	e7f9      	b.n	d910 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    d91c:	2202      	movs	r2, #2
    d91e:	e7f7      	b.n	d910 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000d920 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    d920:	b510      	push	{r4, lr}
    d922:	460c      	mov	r4, r1
    d924:	7809      	ldrb	r1, [r1, #0]
    d926:	7001      	strb	r1, [r0, #0]
    d928:	7841      	ldrb	r1, [r0, #1]
    d92a:	f021 010f 	bic.w	r1, r1, #15
    d92e:	7041      	strb	r1, [r0, #1]
    d930:	8822      	ldrh	r2, [r4, #0]
    d932:	f3c2 2203 	ubfx	r2, r2, #8, #4
    d936:	4311      	orrs	r1, r2
    d938:	7041      	strb	r1, [r0, #1]
    d93a:	78a2      	ldrb	r2, [r4, #2]
    d93c:	7082      	strb	r2, [r0, #2]
    d93e:	8862      	ldrh	r2, [r4, #2]
    d940:	f021 0130 	bic.w	r1, r1, #48	; 0x30
    d944:	0a12      	lsrs	r2, r2, #8
    d946:	70c2      	strb	r2, [r0, #3]
    d948:	7041      	strb	r1, [r0, #1]
    d94a:	7922      	ldrb	r2, [r4, #4]
    d94c:	f002 0203 	and.w	r2, r2, #3
    d950:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    d954:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
    d958:	7041      	strb	r1, [r0, #1]
    d95a:	7962      	ldrb	r2, [r4, #5]
    d95c:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    d960:	7041      	strb	r1, [r0, #1]
    d962:	68a1      	ldr	r1, [r4, #8]
    d964:	1d02      	adds	r2, r0, #4
    d966:	4291      	cmp	r1, r2
    d968:	d006      	beq.n	d978 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x58>
    d96a:	8862      	ldrh	r2, [r4, #2]
    d96c:	2afb      	cmp	r2, #251	; 0xfb
    d96e:	d300      	bcc.n	d972 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x52>
    d970:	22fb      	movs	r2, #251	; 0xfb
    d972:	1d00      	adds	r0, r0, #4
    d974:	f7ff fde4 	bl	d540 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d978:	78a0      	ldrb	r0, [r4, #2]
    d97a:	1d00      	adds	r0, r0, #4
    d97c:	b2c0      	uxtb	r0, r0
    d97e:	bd10      	pop	{r4, pc}

0000d980 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    d980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d984:	4604      	mov	r4, r0
    d986:	780f      	ldrb	r7, [r1, #0]
    d988:	2000      	movs	r0, #0
    d98a:	250c      	movs	r5, #12
    d98c:	2605      	movs	r6, #5
    d98e:	223e      	movs	r2, #62	; 0x3e
    d990:	23ff      	movs	r3, #255	; 0xff
    d992:	2f1b      	cmp	r7, #27
    d994:	d27d      	bcs.n	da92 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x112>
    d996:	e8df f007 	tbb	[pc, r7]
    d99a:	0ee9      	.short	0x0ee9
    d99c:	632d2725 	.word	0x632d2725
    d9a0:	ae9b816d 	.word	0xae9b816d
    d9a4:	e1c6bbb0 	.word	0xe1c6bbb0
    d9a8:	31e9e9f3 	.word	0x31e9e9f3
    d9ac:	f0fcd4d1 	.word	0xf0fcd4d1
    d9b0:	ecedeeef 	.word	0xecedeeef
    d9b4:	00eb      	.short	0x00eb
    d9b6:	7025      	strb	r5, [r4, #0]
    d9b8:	7908      	ldrb	r0, [r1, #4]
    d9ba:	70a0      	strb	r0, [r4, #2]
    d9bc:	7948      	ldrb	r0, [r1, #5]
    d9be:	70e0      	strb	r0, [r4, #3]
    d9c0:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    d9c4:	0a00      	lsrs	r0, r0, #8
    d9c6:	7120      	strb	r0, [r4, #4]
    d9c8:	79c8      	ldrb	r0, [r1, #7]
    d9ca:	7160      	strb	r0, [r4, #5]
    d9cc:	7a08      	ldrb	r0, [r1, #8]
    d9ce:	71a0      	strb	r0, [r4, #6]
    d9d0:	8908      	ldrh	r0, [r1, #8]
    d9d2:	0a00      	lsrs	r0, r0, #8
    d9d4:	71e0      	strb	r0, [r4, #7]
    d9d6:	7a88      	ldrb	r0, [r1, #10]
    d9d8:	7220      	strb	r0, [r4, #8]
    d9da:	8948      	ldrh	r0, [r1, #10]
    d9dc:	0a00      	lsrs	r0, r0, #8
    d9de:	7260      	strb	r0, [r4, #9]
    d9e0:	2008      	movs	r0, #8
    d9e2:	e0c1      	b.n	db68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    d9e4:	2010      	movs	r0, #16
    d9e6:	e000      	b.n	d9ea <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x6a>
    d9e8:	201a      	movs	r0, #26
    d9ea:	7020      	strb	r0, [r4, #0]
    d9ec:	7908      	ldrb	r0, [r1, #4]
    d9ee:	70a0      	strb	r0, [r4, #2]
    d9f0:	2001      	movs	r0, #1
    d9f2:	e0b9      	b.n	db68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    d9f4:	4620      	mov	r0, r4
    d9f6:	f000 f948 	bl	dc8a <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>
    d9fa:	e0b3      	b.n	db64 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e4>
    d9fc:	7022      	strb	r2, [r4, #0]
    d9fe:	200a      	movs	r0, #10
    da00:	70a0      	strb	r0, [r4, #2]
    da02:	f811 0f04 	ldrb.w	r0, [r1, #4]!
    da06:	70e0      	strb	r0, [r4, #3]
    da08:	7888      	ldrb	r0, [r1, #2]
    da0a:	7120      	strb	r0, [r4, #4]
    da0c:	8848      	ldrh	r0, [r1, #2]
    da0e:	0a00      	lsrs	r0, r0, #8
    da10:	7160      	strb	r0, [r4, #5]
    da12:	7908      	ldrb	r0, [r1, #4]
    da14:	71a0      	strb	r0, [r4, #6]
    da16:	7948      	ldrb	r0, [r1, #5]
    da18:	71e0      	strb	r0, [r4, #7]
    da1a:	f8d1 0006 	ldr.w	r0, [r1, #6]
    da1e:	60a0      	str	r0, [r4, #8]
    da20:	8948      	ldrh	r0, [r1, #10]
    da22:	81a0      	strh	r0, [r4, #12]
    da24:	68c8      	ldr	r0, [r1, #12]
    da26:	f8c4 000e 	str.w	r0, [r4, #14]
    da2a:	8a08      	ldrh	r0, [r1, #16]
    da2c:	8260      	strh	r0, [r4, #18]
    da2e:	f8d1 0012 	ldr.w	r0, [r1, #18]
    da32:	6160      	str	r0, [r4, #20]
    da34:	8ac8      	ldrh	r0, [r1, #22]
    da36:	8320      	strh	r0, [r4, #24]
    da38:	7e08      	ldrb	r0, [r1, #24]
    da3a:	76a0      	strb	r0, [r4, #26]
    da3c:	8b08      	ldrh	r0, [r1, #24]
    da3e:	0a00      	lsrs	r0, r0, #8
    da40:	76e0      	strb	r0, [r4, #27]
    da42:	7e88      	ldrb	r0, [r1, #26]
    da44:	7720      	strb	r0, [r4, #28]
    da46:	8b48      	ldrh	r0, [r1, #26]
    da48:	0a00      	lsrs	r0, r0, #8
    da4a:	7760      	strb	r0, [r4, #29]
    da4c:	7f08      	ldrb	r0, [r1, #28]
    da4e:	77a0      	strb	r0, [r4, #30]
    da50:	8b88      	ldrh	r0, [r1, #28]
    da52:	0a00      	lsrs	r0, r0, #8
    da54:	77e0      	strb	r0, [r4, #31]
    da56:	7f88      	ldrb	r0, [r1, #30]
    da58:	f884 0020 	strb.w	r0, [r4, #32]
    da5c:	201f      	movs	r0, #31
    da5e:	e083      	b.n	db68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    da60:	7022      	strb	r2, [r4, #0]
    da62:	2014      	movs	r0, #20
    da64:	70a0      	strb	r0, [r4, #2]
    da66:	7908      	ldrb	r0, [r1, #4]
    da68:	70e0      	strb	r0, [r4, #3]
    da6a:	8888      	ldrh	r0, [r1, #4]
    da6c:	0a00      	lsrs	r0, r0, #8
    da6e:	7120      	strb	r0, [r4, #4]
    da70:	7988      	ldrb	r0, [r1, #6]
    da72:	e0a6      	b.n	dbc2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x242>
    da74:	7022      	strb	r2, [r4, #0]
    da76:	2004      	movs	r0, #4
    da78:	70a0      	strb	r0, [r4, #2]
    da7a:	7908      	ldrb	r0, [r1, #4]
    da7c:	70e0      	strb	r0, [r4, #3]
    da7e:	7988      	ldrb	r0, [r1, #6]
    da80:	7120      	strb	r0, [r4, #4]
    da82:	88c8      	ldrh	r0, [r1, #6]
    da84:	0a00      	lsrs	r0, r0, #8
    da86:	7160      	strb	r0, [r4, #5]
    da88:	6888      	ldr	r0, [r1, #8]
    da8a:	f8c4 0006 	str.w	r0, [r4, #6]
    da8e:	68c8      	ldr	r0, [r1, #12]
    da90:	e000      	b.n	da94 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x114>
    da92:	e06b      	b.n	db6c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    da94:	f8c4 000a 	str.w	r0, [r4, #10]
    da98:	200c      	movs	r0, #12
    da9a:	e065      	b.n	db68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    da9c:	7022      	strb	r2, [r4, #0]
    da9e:	2003      	movs	r0, #3
    daa0:	70a0      	strb	r0, [r4, #2]
    daa2:	7908      	ldrb	r0, [r1, #4]
    daa4:	70e0      	strb	r0, [r4, #3]
    daa6:	7988      	ldrb	r0, [r1, #6]
    daa8:	7120      	strb	r0, [r4, #4]
    daaa:	88c8      	ldrh	r0, [r1, #6]
    daac:	0a00      	lsrs	r0, r0, #8
    daae:	7160      	strb	r0, [r4, #5]
    dab0:	7a08      	ldrb	r0, [r1, #8]
    dab2:	71a0      	strb	r0, [r4, #6]
    dab4:	8908      	ldrh	r0, [r1, #8]
    dab6:	0a00      	lsrs	r0, r0, #8
    dab8:	71e0      	strb	r0, [r4, #7]
    daba:	7a88      	ldrb	r0, [r1, #10]
    dabc:	7220      	strb	r0, [r4, #8]
    dabe:	8948      	ldrh	r0, [r1, #10]
    dac0:	0a00      	lsrs	r0, r0, #8
    dac2:	7260      	strb	r0, [r4, #9]
    dac4:	7b08      	ldrb	r0, [r1, #12]
    dac6:	72a0      	strb	r0, [r4, #10]
    dac8:	8988      	ldrh	r0, [r1, #12]
    daca:	0a00      	lsrs	r0, r0, #8
    dacc:	72e0      	strb	r0, [r4, #11]
    dace:	e0b5      	b.n	dc3c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2bc>
    dad0:	7022      	strb	r2, [r4, #0]
    dad2:	70a6      	strb	r6, [r4, #2]
    dad4:	7908      	ldrb	r0, [r1, #4]
    dad6:	70e0      	strb	r0, [r4, #3]
    dad8:	8888      	ldrh	r0, [r1, #4]
    dada:	0a00      	lsrs	r0, r0, #8
    dadc:	7120      	strb	r0, [r4, #4]
    dade:	f8d1 0006 	ldr.w	r0, [r1, #6]
    dae2:	f8c4 0005 	str.w	r0, [r4, #5]
    dae6:	f8d1 000a 	ldr.w	r0, [r1, #10]
    daea:	f8c4 0009 	str.w	r0, [r4, #9]
    daee:	89c8      	ldrh	r0, [r1, #14]
    daf0:	f8a4 000d 	strh.w	r0, [r4, #13]
    daf4:	e0c7      	b.n	dc86 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x306>
    daf6:	2011      	movs	r0, #17
    daf8:	e043      	b.n	db82 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x202>
    dafa:	7026      	strb	r6, [r4, #0]
    dafc:	7908      	ldrb	r0, [r1, #4]
    dafe:	70a0      	strb	r0, [r4, #2]
    db00:	7948      	ldrb	r0, [r1, #5]
    db02:	70e0      	strb	r0, [r4, #3]
    db04:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    db08:	0a00      	lsrs	r0, r0, #8
    db0a:	7120      	strb	r0, [r4, #4]
    db0c:	79c8      	ldrb	r0, [r1, #7]
    db0e:	e058      	b.n	dbc2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x242>
    db10:	2008      	movs	r0, #8
    db12:	7020      	strb	r0, [r4, #0]
    db14:	7908      	ldrb	r0, [r1, #4]
    db16:	70a0      	strb	r0, [r4, #2]
    db18:	7988      	ldrb	r0, [r1, #6]
    db1a:	70e0      	strb	r0, [r4, #3]
    db1c:	88c8      	ldrh	r0, [r1, #6]
    db1e:	0a00      	lsrs	r0, r0, #8
    db20:	7120      	strb	r0, [r4, #4]
    db22:	7a08      	ldrb	r0, [r1, #8]
    db24:	e04d      	b.n	dbc2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x242>
    db26:	2030      	movs	r0, #48	; 0x30
    db28:	7020      	strb	r0, [r4, #0]
    db2a:	7908      	ldrb	r0, [r1, #4]
    db2c:	70a0      	strb	r0, [r4, #2]
    db2e:	7988      	ldrb	r0, [r1, #6]
    db30:	70e0      	strb	r0, [r4, #3]
    db32:	88c8      	ldrh	r0, [r1, #6]
    db34:	0a00      	lsrs	r0, r0, #8
    db36:	7120      	strb	r0, [r4, #4]
    db38:	2003      	movs	r0, #3
    db3a:	e015      	b.n	db68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    db3c:	7022      	strb	r2, [r4, #0]
    db3e:	2007      	movs	r0, #7
    db40:	e044      	b.n	dbcc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24c>
    db42:	7022      	strb	r2, [r4, #0]
    db44:	70a5      	strb	r5, [r4, #2]
    db46:	7908      	ldrb	r0, [r1, #4]
    db48:	70e0      	strb	r0, [r4, #3]
    db4a:	7988      	ldrb	r0, [r1, #6]
    db4c:	7120      	strb	r0, [r4, #4]
    db4e:	88c8      	ldrh	r0, [r1, #6]
    db50:	0a00      	lsrs	r0, r0, #8
    db52:	7160      	strb	r0, [r4, #5]
    db54:	7a08      	ldrb	r0, [r1, #8]
    db56:	71a0      	strb	r0, [r4, #6]
    db58:	7a48      	ldrb	r0, [r1, #9]
    db5a:	e027      	b.n	dbac <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x22c>
    db5c:	4620      	mov	r0, r4
    db5e:	1d09      	adds	r1, r1, #4
    db60:	f7f7 fc30 	bl	53c4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>
    db64:	2800      	cmp	r0, #0
    db66:	d001      	beq.n	db6c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    db68:	7060      	strb	r0, [r4, #1]
    db6a:	1c80      	adds	r0, r0, #2
    db6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    db70:	e074      	b.n	dc5c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2dc>
    db72:	e047      	b.n	dc04 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x284>
    db74:	e028      	b.n	dbc8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x248>
    db76:	e053      	b.n	dc20 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2a0>
    db78:	e062      	b.n	dc40 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c0>
    db7a:	e01a      	b.n	dbb2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x232>
    db7c:	e009      	b.n	db92 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x212>
    db7e:	e7ff      	b.n	db80 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x200>
    db80:	2057      	movs	r0, #87	; 0x57
    db82:	7020      	strb	r0, [r4, #0]
    db84:	7908      	ldrb	r0, [r1, #4]
    db86:	70a0      	strb	r0, [r4, #2]
    db88:	8888      	ldrh	r0, [r1, #4]
    db8a:	0a00      	lsrs	r0, r0, #8
    db8c:	70e0      	strb	r0, [r4, #3]
    db8e:	2002      	movs	r0, #2
    db90:	e7ea      	b.n	db68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    db92:	7022      	strb	r2, [r4, #0]
    db94:	2012      	movs	r0, #18
    db96:	70a0      	strb	r0, [r4, #2]
    db98:	7908      	ldrb	r0, [r1, #4]
    db9a:	70e0      	strb	r0, [r4, #3]
    db9c:	7948      	ldrb	r0, [r1, #5]
    db9e:	7120      	strb	r0, [r4, #4]
    dba0:	7988      	ldrb	r0, [r1, #6]
    dba2:	7160      	strb	r0, [r4, #5]
    dba4:	88c8      	ldrh	r0, [r1, #6]
    dba6:	0a00      	lsrs	r0, r0, #8
    dba8:	71a0      	strb	r0, [r4, #6]
    dbaa:	7a08      	ldrb	r0, [r1, #8]
    dbac:	71e0      	strb	r0, [r4, #7]
    dbae:	2006      	movs	r0, #6
    dbb0:	e7da      	b.n	db68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    dbb2:	7023      	strb	r3, [r4, #0]
    dbb4:	20a1      	movs	r0, #161	; 0xa1
    dbb6:	70a0      	strb	r0, [r4, #2]
    dbb8:	7908      	ldrb	r0, [r1, #4]
    dbba:	70e0      	strb	r0, [r4, #3]
    dbbc:	7948      	ldrb	r0, [r1, #5]
    dbbe:	7120      	strb	r0, [r4, #4]
    dbc0:	2000      	movs	r0, #0
    dbc2:	7160      	strb	r0, [r4, #5]
    dbc4:	2004      	movs	r0, #4
    dbc6:	e7cf      	b.n	db68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    dbc8:	7023      	strb	r3, [r4, #0]
    dbca:	20a2      	movs	r0, #162	; 0xa2
    dbcc:	70a0      	strb	r0, [r4, #2]
    dbce:	7908      	ldrb	r0, [r1, #4]
    dbd0:	70e0      	strb	r0, [r4, #3]
    dbd2:	8888      	ldrh	r0, [r1, #4]
    dbd4:	0a00      	lsrs	r0, r0, #8
    dbd6:	7120      	strb	r0, [r4, #4]
    dbd8:	7988      	ldrb	r0, [r1, #6]
    dbda:	7160      	strb	r0, [r4, #5]
    dbdc:	88c8      	ldrh	r0, [r1, #6]
    dbde:	0a00      	lsrs	r0, r0, #8
    dbe0:	71a0      	strb	r0, [r4, #6]
    dbe2:	7a08      	ldrb	r0, [r1, #8]
    dbe4:	71e0      	strb	r0, [r4, #7]
    dbe6:	8908      	ldrh	r0, [r1, #8]
    dbe8:	0a00      	lsrs	r0, r0, #8
    dbea:	7220      	strb	r0, [r4, #8]
    dbec:	7a88      	ldrb	r0, [r1, #10]
    dbee:	7260      	strb	r0, [r4, #9]
    dbf0:	8948      	ldrh	r0, [r1, #10]
    dbf2:	0a00      	lsrs	r0, r0, #8
    dbf4:	72a0      	strb	r0, [r4, #10]
    dbf6:	7b08      	ldrb	r0, [r1, #12]
    dbf8:	72e0      	strb	r0, [r4, #11]
    dbfa:	8988      	ldrh	r0, [r1, #12]
    dbfc:	0a00      	lsrs	r0, r0, #8
    dbfe:	7320      	strb	r0, [r4, #12]
    dc00:	200b      	movs	r0, #11
    dc02:	e7b1      	b.n	db68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    dc04:	7023      	strb	r3, [r4, #0]
    dc06:	20a3      	movs	r0, #163	; 0xa3
    dc08:	70a0      	strb	r0, [r4, #2]
    dc0a:	7908      	ldrb	r0, [r1, #4]
    dc0c:	70e0      	strb	r0, [r4, #3]
    dc0e:	8888      	ldrh	r0, [r1, #4]
    dc10:	0a00      	lsrs	r0, r0, #8
    dc12:	7120      	strb	r0, [r4, #4]
    dc14:	7988      	ldrb	r0, [r1, #6]
    dc16:	7160      	strb	r0, [r4, #5]
    dc18:	79c8      	ldrb	r0, [r1, #7]
    dc1a:	71a0      	strb	r0, [r4, #6]
    dc1c:	2005      	movs	r0, #5
    dc1e:	e7a3      	b.n	db68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    dc20:	7022      	strb	r2, [r4, #0]
    dc22:	2013      	movs	r0, #19
    dc24:	70a0      	strb	r0, [r4, #2]
    dc26:	7908      	ldrb	r0, [r1, #4]
    dc28:	70e0      	strb	r0, [r4, #3]
    dc2a:	7948      	ldrb	r0, [r1, #5]
    dc2c:	7120      	strb	r0, [r4, #4]
    dc2e:	f8d1 0006 	ldr.w	r0, [r1, #6]
    dc32:	f8c4 0005 	str.w	r0, [r4, #5]
    dc36:	8948      	ldrh	r0, [r1, #10]
    dc38:	f8a4 0009 	strh.w	r0, [r4, #9]
    dc3c:	200a      	movs	r0, #10
    dc3e:	e793      	b.n	db68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    dc40:	7023      	strb	r3, [r4, #0]
    dc42:	20a4      	movs	r0, #164	; 0xa4
    dc44:	70a0      	strb	r0, [r4, #2]
    dc46:	7908      	ldrb	r0, [r1, #4]
    dc48:	70e0      	strb	r0, [r4, #3]
    dc4a:	8888      	ldrh	r0, [r1, #4]
    dc4c:	0a00      	lsrs	r0, r0, #8
    dc4e:	7120      	strb	r0, [r4, #4]
    dc50:	7988      	ldrb	r0, [r1, #6]
    dc52:	7160      	strb	r0, [r4, #5]
    dc54:	79c8      	ldrb	r0, [r1, #7]
    dc56:	71a0      	strb	r0, [r4, #6]
    dc58:	2007      	movs	r0, #7
    dc5a:	e785      	b.n	db68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    dc5c:	7023      	strb	r3, [r4, #0]
    dc5e:	2080      	movs	r0, #128	; 0x80
    dc60:	70a0      	strb	r0, [r4, #2]
    dc62:	888a      	ldrh	r2, [r1, #4]
    dc64:	f8a4 2003 	strh.w	r2, [r4, #3]
    dc68:	88ca      	ldrh	r2, [r1, #6]
    dc6a:	f8a4 2005 	strh.w	r2, [r4, #5]
    dc6e:	7a0a      	ldrb	r2, [r1, #8]
    dc70:	71e2      	strb	r2, [r4, #7]
    dc72:	894a      	ldrh	r2, [r1, #10]
    dc74:	8122      	strh	r2, [r4, #8]
    dc76:	898a      	ldrh	r2, [r1, #12]
    dc78:	8162      	strh	r2, [r4, #10]
    dc7a:	89ca      	ldrh	r2, [r1, #14]
    dc7c:	81a2      	strh	r2, [r4, #12]
    dc7e:	7c09      	ldrb	r1, [r1, #16]
    dc80:	f001 0101 	and.w	r1, r1, #1
    dc84:	73a1      	strb	r1, [r4, #14]
    dc86:	200d      	movs	r0, #13
    dc88:	e76e      	b.n	db68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>

0000dc8a <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>:
    dc8a:	223e      	movs	r2, #62	; 0x3e
    dc8c:	7002      	strb	r2, [r0, #0]
    dc8e:	2201      	movs	r2, #1
    dc90:	7082      	strb	r2, [r0, #2]
    dc92:	790a      	ldrb	r2, [r1, #4]
    dc94:	70c2      	strb	r2, [r0, #3]
    dc96:	798a      	ldrb	r2, [r1, #6]
    dc98:	7102      	strb	r2, [r0, #4]
    dc9a:	88ca      	ldrh	r2, [r1, #6]
    dc9c:	0a12      	lsrs	r2, r2, #8
    dc9e:	7142      	strb	r2, [r0, #5]
    dca0:	7a0a      	ldrb	r2, [r1, #8]
    dca2:	7182      	strb	r2, [r0, #6]
    dca4:	7a4a      	ldrb	r2, [r1, #9]
    dca6:	71c2      	strb	r2, [r0, #7]
    dca8:	f8d1 200a 	ldr.w	r2, [r1, #10]
    dcac:	6082      	str	r2, [r0, #8]
    dcae:	89ca      	ldrh	r2, [r1, #14]
    dcb0:	8182      	strh	r2, [r0, #12]
    dcb2:	7c0a      	ldrb	r2, [r1, #16]
    dcb4:	7382      	strb	r2, [r0, #14]
    dcb6:	8a0a      	ldrh	r2, [r1, #16]
    dcb8:	0a12      	lsrs	r2, r2, #8
    dcba:	73c2      	strb	r2, [r0, #15]
    dcbc:	7c8a      	ldrb	r2, [r1, #18]
    dcbe:	7402      	strb	r2, [r0, #16]
    dcc0:	8a4a      	ldrh	r2, [r1, #18]
    dcc2:	0a12      	lsrs	r2, r2, #8
    dcc4:	7442      	strb	r2, [r0, #17]
    dcc6:	7d0a      	ldrb	r2, [r1, #20]
    dcc8:	7482      	strb	r2, [r0, #18]
    dcca:	8a8a      	ldrh	r2, [r1, #20]
    dccc:	0a12      	lsrs	r2, r2, #8
    dcce:	74c2      	strb	r2, [r0, #19]
    dcd0:	7d89      	ldrb	r1, [r1, #22]
    dcd2:	7501      	strb	r1, [r0, #20]
    dcd4:	2013      	movs	r0, #19
    dcd6:	4770      	bx	lr

0000dcd8 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>:
    dcd8:	223e      	movs	r2, #62	; 0x3e
    dcda:	7002      	strb	r2, [r0, #0]
    dcdc:	2201      	movs	r2, #1
    dcde:	7082      	strb	r2, [r0, #2]
    dce0:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    dce4:	70c2      	strb	r2, [r0, #3]
    dce6:	788a      	ldrb	r2, [r1, #2]
    dce8:	7102      	strb	r2, [r0, #4]
    dcea:	884a      	ldrh	r2, [r1, #2]
    dcec:	0a12      	lsrs	r2, r2, #8
    dcee:	7142      	strb	r2, [r0, #5]
    dcf0:	790a      	ldrb	r2, [r1, #4]
    dcf2:	7182      	strb	r2, [r0, #6]
    dcf4:	794a      	ldrb	r2, [r1, #5]
    dcf6:	71c2      	strb	r2, [r0, #7]
    dcf8:	f8d1 2006 	ldr.w	r2, [r1, #6]
    dcfc:	6082      	str	r2, [r0, #8]
    dcfe:	894a      	ldrh	r2, [r1, #10]
    dd00:	8182      	strh	r2, [r0, #12]
    dd02:	7e0a      	ldrb	r2, [r1, #24]
    dd04:	7382      	strb	r2, [r0, #14]
    dd06:	8b0a      	ldrh	r2, [r1, #24]
    dd08:	0a12      	lsrs	r2, r2, #8
    dd0a:	73c2      	strb	r2, [r0, #15]
    dd0c:	7e8a      	ldrb	r2, [r1, #26]
    dd0e:	7402      	strb	r2, [r0, #16]
    dd10:	8b4a      	ldrh	r2, [r1, #26]
    dd12:	0a12      	lsrs	r2, r2, #8
    dd14:	7442      	strb	r2, [r0, #17]
    dd16:	7f0a      	ldrb	r2, [r1, #28]
    dd18:	7482      	strb	r2, [r0, #18]
    dd1a:	8b8a      	ldrh	r2, [r1, #28]
    dd1c:	0a12      	lsrs	r2, r2, #8
    dd1e:	74c2      	strb	r2, [r0, #19]
    dd20:	7f89      	ldrb	r1, [r1, #30]
    dd22:	7501      	strb	r1, [r0, #20]
    dd24:	2113      	movs	r1, #19
    dd26:	7041      	strb	r1, [r0, #1]
    dd28:	4608      	mov	r0, r1
    dd2a:	4770      	bx	lr

0000dd2c <sdc_hci_data_get>:
    dd2c:	b510      	push	{r4, lr}
    dd2e:	b120      	cbz	r0, dd3a <sdc_hci_data_get+0xe>
    dd30:	f7ff fda2 	bl	d878 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>
    dd34:	b120      	cbz	r0, dd40 <sdc_hci_data_get+0x14>
    dd36:	2000      	movs	r0, #0
    dd38:	bd10      	pop	{r4, pc}
    dd3a:	f06f 0015 	mvn.w	r0, #21
    dd3e:	bd10      	pop	{r4, pc}
    dd40:	f06f 0022 	mvn.w	r0, #34	; 0x22
    dd44:	bd10      	pop	{r4, pc}

0000dd46 <sdc_hci_data_put>:
    dd46:	b510      	push	{r4, lr}
    dd48:	f06f 0415 	mvn.w	r4, #21
    dd4c:	b120      	cbz	r0, dd58 <sdc_hci_data_put+0x12>
    dd4e:	f7ff fda1 	bl	d894 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    dd52:	b108      	cbz	r0, dd58 <sdc_hci_data_put+0x12>
    dd54:	2000      	movs	r0, #0
    dd56:	bd10      	pop	{r4, pc}
    dd58:	4620      	mov	r0, r4
    dd5a:	bd10      	pop	{r4, pc}

0000dd5c <sdc_hci_evt_get>:
    dd5c:	b510      	push	{r4, lr}
    dd5e:	b120      	cbz	r0, dd6a <sdc_hci_evt_get+0xe>
    dd60:	f7ff fda1 	bl	d8a6 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>
    dd64:	b120      	cbz	r0, dd70 <sdc_hci_evt_get+0x14>
    dd66:	2000      	movs	r0, #0
    dd68:	bd10      	pop	{r4, pc}
    dd6a:	f06f 0015 	mvn.w	r0, #21
    dd6e:	bd10      	pop	{r4, pc}
    dd70:	f06f 0022 	mvn.w	r0, #34	; 0x22
    dd74:	bd10      	pop	{r4, pc}

0000dd76 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    dd76:	f002 becf 	b.w	10b18 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000dd7a <sdc_hci_cmd_cb_read_transmit_power_level>:
    dd7a:	f002 bf11 	b.w	10ba0 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000dd7e <sdc_hci_cmd_cb_set_event_mask>:
    dd7e:	b510      	push	{r4, lr}
    dd80:	f7f7 fb7e 	bl	5480 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    dd84:	2000      	movs	r0, #0
    dd86:	bd10      	pop	{r4, pc}

0000dd88 <sdc_hci_cmd_cb_set_event_mask_page_2>:
    dd88:	b510      	push	{r4, lr}
    dd8a:	f7f7 fb87 	bl	549c <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    dd8e:	2000      	movs	r0, #0
    dd90:	bd10      	pop	{r4, pc}

0000dd92 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    dd92:	f002 bf21 	b.w	10bd8 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000dd96 <sdc_hci_cmd_vs_conn_event_extend>:
    dd96:	b508      	push	{r3, lr}
    dd98:	7800      	ldrb	r0, [r0, #0]
    dd9a:	f88d 0000 	strb.w	r0, [sp]
    dd9e:	4668      	mov	r0, sp
    dda0:	f002 fdd1 	bl	10946 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    dda4:	bd08      	pop	{r3, pc}

0000dda6 <sdc_hci_cmd_vs_conn_update>:
    dda6:	2001      	movs	r0, #1
    dda8:	4770      	bx	lr

0000ddaa <sdc_hci_cmd_vs_event_length_set>:
    ddaa:	f7fd bab9 	b.w	b320 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000ddae <sdc_hci_cmd_vs_llpm_mode_set>:
    ddae:	2001      	movs	r0, #1
    ddb0:	4770      	bx	lr

0000ddb2 <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    ddb2:	7800      	ldrb	r0, [r0, #0]
    ddb4:	b100      	cbz	r0, ddb8 <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    ddb6:	2001      	movs	r0, #1
    ddb8:	f002 bd4a 	b.w	10850 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000ddbc <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    ddbc:	b570      	push	{r4, r5, r6, lr}
    ddbe:	4605      	mov	r5, r0
    ddc0:	2210      	movs	r2, #16
    ddc2:	2100      	movs	r1, #0
    ddc4:	f7ff fc36 	bl	d634 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    ddc8:	2210      	movs	r2, #16
    ddca:	2100      	movs	r1, #0
    ddcc:	f105 0010 	add.w	r0, r5, #16
    ddd0:	f7ff fc30 	bl	d634 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    ddd4:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    ddd8:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    dddc:	1c40      	adds	r0, r0, #1
    ddde:	d10b      	bne.n	ddf8 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    dde0:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    dde4:	1c40      	adds	r0, r0, #1
    dde6:	d107      	bne.n	ddf8 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    dde8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    ddec:	1c40      	adds	r0, r0, #1
    ddee:	d103      	bne.n	ddf8 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    ddf0:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    ddf4:	1c40      	adds	r0, r0, #1
    ddf6:	d00b      	beq.n	de10 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
    ddf8:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    ddfc:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    de00:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    de04:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    de08:	612a      	str	r2, [r5, #16]
    de0a:	6168      	str	r0, [r5, #20]
    de0c:	61a9      	str	r1, [r5, #24]
    de0e:	61eb      	str	r3, [r5, #28]
    de10:	2000      	movs	r0, #0
    de12:	f7f8 f87f 	bl	5f14 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    de16:	b918      	cbnz	r0, de20 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
    de18:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    de1c:	07c0      	lsls	r0, r0, #31
    de1e:	d118      	bne.n	de52 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    de20:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    de24:	1c40      	adds	r0, r0, #1
    de26:	d10b      	bne.n	de40 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    de28:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    de2c:	1c40      	adds	r0, r0, #1
    de2e:	d107      	bne.n	de40 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    de30:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    de34:	1c40      	adds	r0, r0, #1
    de36:	d103      	bne.n	de40 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    de38:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    de3c:	1c40      	adds	r0, r0, #1
    de3e:	d008      	beq.n	de52 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    de40:	f854 0f90 	ldr.w	r0, [r4, #144]!
    de44:	6861      	ldr	r1, [r4, #4]
    de46:	68a2      	ldr	r2, [r4, #8]
    de48:	68e3      	ldr	r3, [r4, #12]
    de4a:	6028      	str	r0, [r5, #0]
    de4c:	6069      	str	r1, [r5, #4]
    de4e:	60aa      	str	r2, [r5, #8]
    de50:	60eb      	str	r3, [r5, #12]
    de52:	2000      	movs	r0, #0
    de54:	bd70      	pop	{r4, r5, r6, pc}

0000de56 <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    de56:	b538      	push	{r3, r4, r5, lr}
    de58:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    de5c:	4604      	mov	r4, r0
    de5e:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    de62:	1c40      	adds	r0, r0, #1
    de64:	d105      	bne.n	de72 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    de66:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    de6a:	43c0      	mvns	r0, r0
    de6c:	0400      	lsls	r0, r0, #16
    de6e:	0c00      	lsrs	r0, r0, #16
    de70:	d03e      	beq.n	def0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    de72:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    de76:	07c0      	lsls	r0, r0, #31
    de78:	d03a      	beq.n	def0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    de7a:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    de7e:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
    de82:	f8ad 1000 	strh.w	r1, [sp]
    de86:	f8c4 0001 	str.w	r0, [r4, #1]
    de8a:	f8bd 0000 	ldrh.w	r0, [sp]
    de8e:	f8a4 0005 	strh.w	r0, [r4, #5]
    de92:	79a0      	ldrb	r0, [r4, #6]
    de94:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    de98:	71a0      	strb	r0, [r4, #6]
    de9a:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    de9e:	1c40      	adds	r0, r0, #1
    dea0:	d00f      	beq.n	dec2 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    dea2:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    dea6:	1c40      	adds	r0, r0, #1
    dea8:	d00b      	beq.n	dec2 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    deaa:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    deae:	1c40      	adds	r0, r0, #1
    deb0:	d007      	beq.n	dec2 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    deb2:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    deb6:	1c40      	adds	r0, r0, #1
    deb8:	d003      	beq.n	dec2 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    deba:	2000      	movs	r0, #0
    debc:	f7f8 f82a 	bl	5f14 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    dec0:	b140      	cbz	r0, ded4 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x7e>
    dec2:	2210      	movs	r2, #16
    dec4:	2100      	movs	r1, #0
    dec6:	1de0      	adds	r0, r4, #7
    dec8:	f7ff fbb4 	bl	d634 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    decc:	2001      	movs	r0, #1
    dece:	7020      	strb	r0, [r4, #0]
    ded0:	2000      	movs	r0, #0
    ded2:	bd38      	pop	{r3, r4, r5, pc}
    ded4:	f855 2f90 	ldr.w	r2, [r5, #144]!
    ded8:	6869      	ldr	r1, [r5, #4]
    deda:	68a8      	ldr	r0, [r5, #8]
    dedc:	68eb      	ldr	r3, [r5, #12]
    dede:	f8c4 2007 	str.w	r2, [r4, #7]
    dee2:	f8c4 100b 	str.w	r1, [r4, #11]
    dee6:	f8c4 000f 	str.w	r0, [r4, #15]
    deea:	f8c4 3013 	str.w	r3, [r4, #19]
    deee:	e7ed      	b.n	decc <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
    def0:	2000      	movs	r0, #0
    def2:	e7ec      	b.n	dece <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>

0000def4 <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    def4:	f002 bd19 	b.w	1092a <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000def8 <sdc_hci_cmd_ip_read_bd_addr>:
    def8:	f002 be1f 	b.w	10b3a <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000defc <sdc_hci_cmd_ip_read_local_version_information>:
    defc:	f7fd ba1e 	b.w	b33c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000df00 <sdc_hci_cmd_le_add_device_to_filter_accept_list>:
    df00:	f002 b9ff 	b.w	10302 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000df04 <sdc_hci_cmd_le_add_device_to_resolving_list>:
    df04:	f002 b9e2 	b.w	102cc <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>

0000df08 <sdc_hci_cmd_le_clear_filter_accept_list>:
    df08:	f002 ba1f 	b.w	1034a <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000df0c <sdc_hci_cmd_le_clear_resolving_list>:
    df0c:	f002 ba10 	b.w	10330 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>

0000df10 <sdc_hci_cmd_le_encrypt>:
    df10:	f002 ba25 	b.w	1035e <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000df14 <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
    df14:	8802      	ldrh	r2, [r0, #0]
    df16:	800a      	strh	r2, [r1, #0]
    df18:	f002 ba2a 	b.w	10370 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

0000df1c <sdc_hci_cmd_le_long_term_key_request_reply>:
    df1c:	8802      	ldrh	r2, [r0, #0]
    df1e:	800a      	strh	r2, [r1, #0]
    df20:	f002 ba3f 	b.w	103a2 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>

0000df24 <sdc_hci_cmd_le_rand>:
    df24:	f002 ba67 	b.w	103f6 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000df28 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
    df28:	f002 ba6b 	b.w	10402 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

0000df2c <sdc_hci_cmd_le_read_buffer_size>:
    df2c:	f7fd b972 	b.w	b214 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000df30 <sdc_hci_cmd_le_read_channel_map>:
    df30:	f7fd b97a 	b.w	b228 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000df34 <sdc_hci_cmd_le_read_filter_accept_list_size>:
    df34:	f002 bad1 	b.w	104da <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000df38 <sdc_hci_cmd_le_read_max_data_length>:
    df38:	f002 ba6c 	b.w	10414 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000df3c <sdc_hci_cmd_le_read_phy>:
    df3c:	f002 ba7a 	b.w	10434 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000df40 <sdc_hci_cmd_le_read_remote_features>:
    df40:	f002 baa1 	b.w	10486 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000df44 <sdc_hci_cmd_le_read_resolving_list_size>:
    df44:	f002 babc 	b.w	104c0 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>

0000df48 <sdc_hci_cmd_le_read_suggested_default_data_length>:
    df48:	f7fd b996 	b.w	b278 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000df4c <sdc_hci_cmd_le_read_transmit_power>:
    df4c:	f002 babc 	b.w	104c8 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000df50 <sdc_hci_cmd_le_remove_device_from_filter_accept_list>:
    df50:	f002 bae0 	b.w	10514 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000df54 <sdc_hci_cmd_le_remove_device_from_resolving_list>:
    df54:	f002 bac5 	b.w	104e2 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>

0000df58 <sdc_hci_cmd_le_set_address_resolution_enable>:
    df58:	f002 baf1 	b.w	1053e <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>

0000df5c <sdc_hci_cmd_le_set_adv_data>:
    df5c:	f002 bafd 	b.w	1055a <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

0000df60 <sdc_hci_cmd_le_set_adv_enable>:
    df60:	f002 bb10 	b.w	10584 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

0000df64 <sdc_hci_cmd_le_set_adv_params>:
    df64:	f002 bb41 	b.w	105ea <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

0000df68 <sdc_hci_cmd_le_set_data_length>:
    df68:	f002 bbd4 	b.w	10714 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000df6c <sdc_hci_cmd_le_set_default_phy>:
    df6c:	f7fd b994 	b.w	b298 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000df70 <sdc_hci_cmd_le_set_event_mask>:
    df70:	b510      	push	{r4, lr}
    df72:	f7f7 fa7f 	bl	5474 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    df76:	2000      	movs	r0, #0
    df78:	bd10      	pop	{r4, pc}

0000df7a <sdc_hci_cmd_le_set_phy>:
    df7a:	f002 bbf2 	b.w	10762 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000df7e <sdc_hci_cmd_le_set_privacy_mode>:
    df7e:	f002 bc0e 	b.w	1079e <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>

0000df82 <sdc_hci_cmd_le_set_random_address>:
    df82:	f002 bc22 	b.w	107ca <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000df86 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>:
    df86:	f002 bc2e 	b.w	107e6 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>

0000df8a <sdc_hci_cmd_le_set_scan_response_data>:
    df8a:	f002 bc35 	b.w	107f8 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>

0000df8e <sdc_hci_cmd_le_write_suggested_default_data_length>:
    df8e:	f002 bc48 	b.w	10822 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000df92 <sdc_hci_cmd_lc_disconnect>:
    df92:	f002 b947 	b.w	10224 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000df96 <sdc_hci_cmd_lc_read_remote_version_information>:
    df96:	f002 bddc 	b.w	10b52 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    df9a:	b570      	push	{r4, r5, r6, lr}
    df9c:	880b      	ldrh	r3, [r1, #0]
    df9e:	7f04      	ldrb	r4, [r0, #28]
    dfa0:	f100 0524 	add.w	r5, r0, #36	; 0x24
    dfa4:	f423 4600 	bic.w	r6, r3, #32768	; 0x8000
    dfa8:	8802      	ldrh	r2, [r0, #0]
    dfaa:	4435      	add	r5, r6
    dfac:	1da4      	adds	r4, r4, #6
    dfae:	882d      	ldrh	r5, [r5, #0]
    dfb0:	4422      	add	r2, r4
    dfb2:	b292      	uxth	r2, r2
    dfb4:	4425      	add	r5, r4
    dfb6:	1e54      	subs	r4, r2, #1
    dfb8:	442c      	add	r4, r5
    dfba:	fb94 f4f2 	sdiv	r4, r4, r2
    dfbe:	fb02 6204 	mla	r2, r2, r4, r6
    dfc2:	8840      	ldrh	r0, [r0, #2]
    dfc4:	b292      	uxth	r2, r2
    dfc6:	4290      	cmp	r0, r2
    dfc8:	d903      	bls.n	dfd2 <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    dfca:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    dfce:	4310      	orrs	r0, r2
    dfd0:	e002      	b.n	dfd8 <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    dfd2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    dfd6:	4398      	bics	r0, r3
    dfd8:	8008      	strh	r0, [r1, #0]
    dfda:	bd70      	pop	{r4, r5, r6, pc}
    dfdc:	f420 4200 	bic.w	r2, r0, #32768	; 0x8000
    dfe0:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    dfe4:	429a      	cmp	r2, r3
    dfe6:	d107      	bne.n	dff8 <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    dfe8:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    dfec:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    dff0:	4288      	cmp	r0, r1
    dff2:	d001      	beq.n	dff8 <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    dff4:	2001      	movs	r0, #1
    dff6:	4770      	bx	lr
    dff8:	2000      	movs	r0, #0
    dffa:	4770      	bx	lr

0000dffc <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>:
    dffc:	b570      	push	{r4, r5, r6, lr}
    dffe:	7f00      	ldrb	r0, [r0, #28]
    e000:	461c      	mov	r4, r3
    e002:	1d80      	adds	r0, r0, #6
    e004:	4408      	add	r0, r1
    e006:	4613      	mov	r3, r2
    e008:	8809      	ldrh	r1, [r1, #0]
    e00a:	9a04      	ldr	r2, [sp, #16]
    e00c:	1cc9      	adds	r1, r1, #3
    e00e:	b289      	uxth	r1, r1
    e010:	1915      	adds	r5, r2, r4
    e012:	1ec0      	subs	r0, r0, #3
    e014:	428d      	cmp	r5, r1
    e016:	d805      	bhi.n	e024 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x28>
    e018:	1881      	adds	r1, r0, r2
    e01a:	4622      	mov	r2, r4
    e01c:	4618      	mov	r0, r3
    e01e:	f7ff fa8f 	bl	d540 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e022:	e000      	b.n	e026 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x2a>
    e024:	2400      	movs	r4, #0
    e026:	4620      	mov	r0, r4
    e028:	bd70      	pop	{r4, r5, r6, pc}

0000e02a <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>:
    e02a:	b570      	push	{r4, r5, r6, lr}
    e02c:	7f00      	ldrb	r0, [r0, #28]
    e02e:	461c      	mov	r4, r3
    e030:	1d80      	adds	r0, r0, #6
    e032:	4408      	add	r0, r1
    e034:	4613      	mov	r3, r2
    e036:	8809      	ldrh	r1, [r1, #0]
    e038:	9a04      	ldr	r2, [sp, #16]
    e03a:	1cc9      	adds	r1, r1, #3
    e03c:	b289      	uxth	r1, r1
    e03e:	1915      	adds	r5, r2, r4
    e040:	1ec0      	subs	r0, r0, #3
    e042:	428d      	cmp	r5, r1
    e044:	d805      	bhi.n	e052 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x28>
    e046:	4410      	add	r0, r2
    e048:	4622      	mov	r2, r4
    e04a:	4619      	mov	r1, r3
    e04c:	f7ff fa78 	bl	d540 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e050:	e000      	b.n	e054 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x2a>
    e052:	2400      	movs	r4, #0
    e054:	4620      	mov	r0, r4
    e056:	bd70      	pop	{r4, r5, r6, pc}

0000e058 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    e058:	8881      	ldrh	r1, [r0, #4]
    e05a:	88c0      	ldrh	r0, [r0, #6]
    e05c:	4288      	cmp	r0, r1
    e05e:	d101      	bne.n	e064 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    e060:	2001      	movs	r0, #1
    e062:	4770      	bx	lr
    e064:	2000      	movs	r0, #0
    e066:	4770      	bx	lr

0000e068 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>:
    e068:	8881      	ldrh	r1, [r0, #4]
    e06a:	8900      	ldrh	r0, [r0, #8]
    e06c:	4288      	cmp	r0, r1
    e06e:	d101      	bne.n	e074 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI+0xc>
    e070:	2001      	movs	r0, #1
    e072:	4770      	bx	lr
    e074:	2000      	movs	r0, #0
    e076:	4770      	bx	lr

0000e078 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    e078:	b570      	push	{r4, r5, r6, lr}
    e07a:	460d      	mov	r5, r1
    e07c:	4604      	mov	r4, r0
    e07e:	f100 0124 	add.w	r1, r0, #36	; 0x24
    e082:	8880      	ldrh	r0, [r0, #4]
    e084:	2600      	movs	r6, #0
    e086:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    e08a:	4401      	add	r1, r0
    e08c:	702e      	strb	r6, [r5, #0]
    e08e:	8a20      	ldrh	r0, [r4, #16]
    e090:	2800      	cmp	r0, #0
    e092:	d01b      	beq.n	e0cc <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x54>
    e094:	89a2      	ldrh	r2, [r4, #12]
    e096:	4410      	add	r0, r2
    e098:	b280      	uxth	r0, r0
    e09a:	81a0      	strh	r0, [r4, #12]
    e09c:	880a      	ldrh	r2, [r1, #0]
    e09e:	4290      	cmp	r0, r2
    e0a0:	d905      	bls.n	e0ae <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x36>
    e0a2:	f44f 71b3 	mov.w	r1, #358	; 0x166
    e0a6:	f04f 0014 	mov.w	r0, #20
    e0aa:	f7f7 f861 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e0ae:	d10b      	bne.n	e0c8 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x50>
    e0b0:	69a0      	ldr	r0, [r4, #24]
    e0b2:	b108      	cbz	r0, e0b8 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x40>
    e0b4:	7f40      	ldrb	r0, [r0, #29]
    e0b6:	7088      	strb	r0, [r1, #2]
    e0b8:	f104 0104 	add.w	r1, r4, #4
    e0bc:	4620      	mov	r0, r4
    e0be:	f7ff ff6c 	bl	df9a <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e0c2:	81a6      	strh	r6, [r4, #12]
    e0c4:	2001      	movs	r0, #1
    e0c6:	7028      	strb	r0, [r5, #0]
    e0c8:	8226      	strh	r6, [r4, #16]
    e0ca:	2001      	movs	r0, #1
    e0cc:	bd70      	pop	{r4, r5, r6, pc}

0000e0ce <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    e0ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e0d0:	4604      	mov	r4, r0
    e0d2:	f100 0324 	add.w	r3, r0, #36	; 0x24
    e0d6:	88c0      	ldrh	r0, [r0, #6]
    e0d8:	460e      	mov	r6, r1
    e0da:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    e0de:	8a60      	ldrh	r0, [r4, #18]
    e0e0:	19d9      	adds	r1, r3, r7
    e0e2:	b108      	cbz	r0, e0e8 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1a>
    e0e4:	42b0      	cmp	r0, r6
    e0e6:	d201      	bcs.n	e0ec <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>
    e0e8:	2000      	movs	r0, #0
    e0ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e0ec:	89e0      	ldrh	r0, [r4, #14]
    e0ee:	2500      	movs	r5, #0
    e0f0:	b140      	cbz	r0, e104 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x36>
    e0f2:	f8b1 c000 	ldrh.w	ip, [r1]
    e0f6:	4560      	cmp	r0, ip
    e0f8:	d008      	beq.n	e10c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
    e0fa:	f44f 7114 	mov.w	r1, #592	; 0x250
    e0fe:	2014      	movs	r0, #20
    e100:	f7f7 f836 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e104:	7f60      	ldrb	r0, [r4, #29]
    e106:	7088      	strb	r0, [r1, #2]
    e108:	800d      	strh	r5, [r1, #0]
    e10a:	e00e      	b.n	e12a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    e10c:	f894 c01c 	ldrb.w	ip, [r4, #28]
    e110:	4418      	add	r0, r3
    e112:	f10c 0c06 	add.w	ip, ip, #6
    e116:	44bc      	add	ip, r7
    e118:	4460      	add	r0, ip
    e11a:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    e11e:	f820 cc03 	strh.w	ip, [r0, #-3]
    e122:	f894 c020 	ldrb.w	ip, [r4, #32]
    e126:	f800 cc01 	strb.w	ip, [r0, #-1]
    e12a:	89e0      	ldrh	r0, [r4, #14]
    e12c:	4430      	add	r0, r6
    e12e:	81e0      	strh	r0, [r4, #14]
    e130:	8808      	ldrh	r0, [r1, #0]
    e132:	4430      	add	r0, r6
    e134:	8008      	strh	r0, [r1, #0]
    e136:	b19a      	cbz	r2, e160 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x92>
    e138:	1da1      	adds	r1, r4, #6
    e13a:	4620      	mov	r0, r4
    e13c:	f7ff ff2d 	bl	df9a <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e140:	81e5      	strh	r5, [r4, #14]
    e142:	7f60      	ldrb	r0, [r4, #29]
    e144:	1c40      	adds	r0, r0, #1
    e146:	7760      	strb	r0, [r4, #29]
    e148:	7da0      	ldrb	r0, [r4, #22]
    e14a:	f88d 0000 	strb.w	r0, [sp]
    e14e:	9800      	ldr	r0, [sp, #0]
    e150:	9000      	str	r0, [sp, #0]
    e152:	f89d 0000 	ldrb.w	r0, [sp]
    e156:	b178      	cbz	r0, e178 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    e158:	88e0      	ldrh	r0, [r4, #6]
    e15a:	82a0      	strh	r0, [r4, #20]
    e15c:	75a5      	strb	r5, [r4, #22]
    e15e:	e00b      	b.n	e178 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    e160:	7f20      	ldrb	r0, [r4, #28]
    e162:	89e1      	ldrh	r1, [r4, #14]
    e164:	1d80      	adds	r0, r0, #6
    e166:	4438      	add	r0, r7
    e168:	4419      	add	r1, r3
    e16a:	4408      	add	r0, r1
    e16c:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    e170:	83e1      	strh	r1, [r4, #30]
    e172:	7880      	ldrb	r0, [r0, #2]
    e174:	f884 0020 	strb.w	r0, [r4, #32]
    e178:	8265      	strh	r5, [r4, #18]
    e17a:	2001      	movs	r0, #1
    e17c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000e17e <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    e17e:	b510      	push	{r4, lr}
    e180:	4604      	mov	r4, r0
    e182:	88c0      	ldrh	r0, [r0, #6]
    e184:	88a1      	ldrh	r1, [r4, #4]
    e186:	4281      	cmp	r1, r0
    e188:	d007      	beq.n	e19a <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    e18a:	89a0      	ldrh	r0, [r4, #12]
    e18c:	b928      	cbnz	r0, e19a <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    e18e:	8a20      	ldrh	r0, [r4, #16]
    e190:	b918      	cbnz	r0, e19a <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    e192:	88a0      	ldrh	r0, [r4, #4]
    e194:	8aa1      	ldrh	r1, [r4, #20]
    e196:	4288      	cmp	r0, r1
    e198:	d101      	bne.n	e19e <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x20>
    e19a:	2000      	movs	r0, #0
    e19c:	bd10      	pop	{r4, pc}
    e19e:	1d21      	adds	r1, r4, #4
    e1a0:	4620      	mov	r0, r4
    e1a2:	f7ff fefa 	bl	df9a <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e1a6:	2000      	movs	r0, #0
    e1a8:	8220      	strh	r0, [r4, #16]
    e1aa:	2001      	movs	r0, #1
    e1ac:	bd10      	pop	{r4, pc}

0000e1ae <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    e1ae:	b510      	push	{r4, lr}
    e1b0:	4604      	mov	r4, r0
    e1b2:	f100 0224 	add.w	r2, r0, #36	; 0x24
    e1b6:	88c0      	ldrh	r0, [r0, #6]
    e1b8:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    e1bc:	4402      	add	r2, r0
    e1be:	8820      	ldrh	r0, [r4, #0]
    e1c0:	2845      	cmp	r0, #69	; 0x45
    e1c2:	d200      	bcs.n	e1c6 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    e1c4:	2045      	movs	r0, #69	; 0x45
    e1c6:	4288      	cmp	r0, r1
    e1c8:	d204      	bcs.n	e1d4 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    e1ca:	f240 1119 	movw	r1, #281	; 0x119
    e1ce:	2014      	movs	r0, #20
    e1d0:	f7f6 ffce 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e1d4:	7de0      	ldrb	r0, [r4, #23]
    e1d6:	2800      	cmp	r0, #0
    e1d8:	d003      	beq.n	e1e2 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    e1da:	8810      	ldrh	r0, [r2, #0]
    e1dc:	4288      	cmp	r0, r1
    e1de:	d201      	bcs.n	e1e4 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    e1e0:	2000      	movs	r0, #0
    e1e2:	bd10      	pop	{r4, pc}
    e1e4:	8011      	strh	r1, [r2, #0]
    e1e6:	1da1      	adds	r1, r4, #6
    e1e8:	4620      	mov	r0, r4
    e1ea:	f7ff fed6 	bl	df9a <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e1ee:	2000      	movs	r0, #0
    e1f0:	75e0      	strb	r0, [r4, #23]
    e1f2:	2001      	movs	r0, #1
    e1f4:	bd10      	pop	{r4, pc}

0000e1f6 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>:
    e1f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e1fa:	8941      	ldrh	r1, [r0, #10]
    e1fc:	8886      	ldrh	r6, [r0, #4]
    e1fe:	4604      	mov	r4, r0
    e200:	2500      	movs	r5, #0
    e202:	f100 070a 	add.w	r7, r0, #10
    e206:	e006      	b.n	e216 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x20>
    e208:	4639      	mov	r1, r7
    e20a:	4620      	mov	r0, r4
    e20c:	f7ff fec5 	bl	df9a <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e210:	1c6d      	adds	r5, r5, #1
    e212:	8961      	ldrh	r1, [r4, #10]
    e214:	b2ad      	uxth	r5, r5
    e216:	42b1      	cmp	r1, r6
    e218:	d1f6      	bne.n	e208 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x12>
    e21a:	4628      	mov	r0, r5
    e21c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e220 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    e220:	b530      	push	{r4, r5, lr}
    e222:	88c4      	ldrh	r4, [r0, #6]
    e224:	8881      	ldrh	r1, [r0, #4]
    e226:	f100 0224 	add.w	r2, r0, #36	; 0x24
    e22a:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    e22e:	4413      	add	r3, r2
    e230:	8882      	ldrh	r2, [r0, #4]
    e232:	8a85      	ldrh	r5, [r0, #20]
    e234:	42aa      	cmp	r2, r5
    e236:	d012      	beq.n	e25e <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    e238:	42a1      	cmp	r1, r4
    e23a:	d010      	beq.n	e25e <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    e23c:	8981      	ldrh	r1, [r0, #12]
    e23e:	b971      	cbnz	r1, e25e <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    e240:	6982      	ldr	r2, [r0, #24]
    e242:	b172      	cbz	r2, e262 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    e244:	4610      	mov	r0, r2
    e246:	f7ff ff0f 	bl	e068 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>
    e24a:	b950      	cbnz	r0, e262 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    e24c:	8910      	ldrh	r0, [r2, #8]
    e24e:	3224      	adds	r2, #36	; 0x24
    e250:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    e254:	4410      	add	r0, r2
    e256:	7899      	ldrb	r1, [r3, #2]
    e258:	7880      	ldrb	r0, [r0, #2]
    e25a:	4288      	cmp	r0, r1
    e25c:	d101      	bne.n	e262 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    e25e:	2000      	movs	r0, #0
    e260:	bd30      	pop	{r4, r5, pc}
    e262:	4618      	mov	r0, r3
    e264:	bd30      	pop	{r4, r5, pc}

0000e266 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    e266:	7f00      	ldrb	r0, [r0, #28]
    e268:	1d80      	adds	r0, r0, #6
    e26a:	4408      	add	r0, r1
    e26c:	1ec0      	subs	r0, r0, #3
    e26e:	6010      	str	r0, [r2, #0]
    e270:	8808      	ldrh	r0, [r1, #0]
    e272:	4770      	bx	lr

0000e274 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    e274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e278:	460e      	mov	r6, r1
    e27a:	88c1      	ldrh	r1, [r0, #6]
    e27c:	8902      	ldrh	r2, [r0, #8]
    e27e:	4604      	mov	r4, r0
    e280:	f100 0824 	add.w	r8, r0, #36	; 0x24
    e284:	8800      	ldrh	r0, [r0, #0]
    e286:	f421 4500 	bic.w	r5, r1, #32768	; 0x8000
    e28a:	f422 4700 	bic.w	r7, r2, #32768	; 0x8000
    e28e:	2845      	cmp	r0, #69	; 0x45
    e290:	d200      	bcs.n	e294 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    e292:	2045      	movs	r0, #69	; 0x45
    e294:	42b0      	cmp	r0, r6
    e296:	d203      	bcs.n	e2a0 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    e298:	21db      	movs	r1, #219	; 0xdb
    e29a:	2014      	movs	r0, #20
    e29c:	f7f6 ff68 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e2a0:	4610      	mov	r0, r2
    e2a2:	f7ff fe9b 	bl	dfdc <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    e2a6:	b110      	cbz	r0, e2ae <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    e2a8:	2000      	movs	r0, #0
    e2aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e2ae:	42af      	cmp	r7, r5
    e2b0:	d908      	bls.n	e2c4 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    e2b2:	7f21      	ldrb	r1, [r4, #28]
    e2b4:	1b78      	subs	r0, r7, r5
    e2b6:	1a40      	subs	r0, r0, r1
    e2b8:	1f80      	subs	r0, r0, #6
    e2ba:	4286      	cmp	r6, r0
    e2bc:	dd02      	ble.n	e2c4 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    e2be:	2000      	movs	r0, #0
    e2c0:	75e0      	strb	r0, [r4, #23]
    e2c2:	e7f1      	b.n	e2a8 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    e2c4:	eb08 0005 	add.w	r0, r8, r5
    e2c8:	2101      	movs	r1, #1
    e2ca:	8006      	strh	r6, [r0, #0]
    e2cc:	75e1      	strb	r1, [r4, #23]
    e2ce:	e7ec      	b.n	e2aa <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000e2d0 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    e2d0:	b538      	push	{r3, r4, r5, lr}
    e2d2:	88c4      	ldrh	r4, [r0, #6]
    e2d4:	8881      	ldrh	r1, [r0, #4]
    e2d6:	f100 0224 	add.w	r2, r0, #36	; 0x24
    e2da:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    e2de:	441a      	add	r2, r3
    e2e0:	42a1      	cmp	r1, r4
    e2e2:	d010      	beq.n	e306 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    e2e4:	8983      	ldrh	r3, [r0, #12]
    e2e6:	8a05      	ldrh	r5, [r0, #16]
    e2e8:	8812      	ldrh	r2, [r2, #0]
    e2ea:	442b      	add	r3, r5
    e2ec:	4293      	cmp	r3, r2
    e2ee:	d308      	bcc.n	e302 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    e2f0:	f8ad 1000 	strh.w	r1, [sp]
    e2f4:	4669      	mov	r1, sp
    e2f6:	f7ff fe50 	bl	df9a <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e2fa:	f8bd 0000 	ldrh.w	r0, [sp]
    e2fe:	42a0      	cmp	r0, r4
    e300:	d001      	beq.n	e306 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    e302:	2001      	movs	r0, #1
    e304:	bd38      	pop	{r3, r4, r5, pc}
    e306:	2000      	movs	r0, #0
    e308:	bd38      	pop	{r3, r4, r5, pc}

0000e30a <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    e30a:	b570      	push	{r4, r5, r6, lr}
    e30c:	88c6      	ldrh	r6, [r0, #6]
    e30e:	8885      	ldrh	r5, [r0, #4]
    e310:	4603      	mov	r3, r0
    e312:	f100 0424 	add.w	r4, r0, #36	; 0x24
    e316:	f425 4000 	bic.w	r0, r5, #32768	; 0x8000
    e31a:	4420      	add	r0, r4
    e31c:	42b5      	cmp	r5, r6
    e31e:	d102      	bne.n	e326 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    e320:	2000      	movs	r0, #0
    e322:	8218      	strh	r0, [r3, #16]
    e324:	bd70      	pop	{r4, r5, r6, pc}
    e326:	8804      	ldrh	r4, [r0, #0]
    e328:	899d      	ldrh	r5, [r3, #12]
    e32a:	7f1e      	ldrb	r6, [r3, #28]
    e32c:	1b64      	subs	r4, r4, r5
    e32e:	4435      	add	r5, r6
    e330:	4428      	add	r0, r5
    e332:	880d      	ldrh	r5, [r1, #0]
    e334:	b2a4      	uxth	r4, r4
    e336:	1cc0      	adds	r0, r0, #3
    e338:	42a5      	cmp	r5, r4
    e33a:	d900      	bls.n	e33e <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    e33c:	800c      	strh	r4, [r1, #0]
    e33e:	899c      	ldrh	r4, [r3, #12]
    e340:	b124      	cbz	r4, e34c <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    e342:	2400      	movs	r4, #0
    e344:	7014      	strb	r4, [r2, #0]
    e346:	8809      	ldrh	r1, [r1, #0]
    e348:	8219      	strh	r1, [r3, #16]
    e34a:	bd70      	pop	{r4, r5, r6, pc}
    e34c:	2401      	movs	r4, #1
    e34e:	e7f9      	b.n	e344 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000e350 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>:
    e350:	b508      	push	{r3, lr}
    e352:	8a81      	ldrh	r1, [r0, #20]
    e354:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    e358:	3aff      	subs	r2, #255	; 0xff
    e35a:	d008      	beq.n	e36e <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x1e>
    e35c:	7d82      	ldrb	r2, [r0, #22]
    e35e:	f88d 2000 	strb.w	r2, [sp]
    e362:	9a00      	ldr	r2, [sp, #0]
    e364:	9200      	str	r2, [sp, #0]
    e366:	f89d 2000 	ldrb.w	r2, [sp]
    e36a:	b952      	cbnz	r2, e382 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
    e36c:	e004      	b.n	e378 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x28>
    e36e:	f240 318d 	movw	r1, #909	; 0x38d
    e372:	2014      	movs	r0, #20
    e374:	f7f6 fefc 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e378:	8880      	ldrh	r0, [r0, #4]
    e37a:	4281      	cmp	r1, r0
    e37c:	d101      	bne.n	e382 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
    e37e:	2000      	movs	r0, #0
    e380:	bd08      	pop	{r3, pc}
    e382:	2001      	movs	r0, #1
    e384:	bd08      	pop	{r3, pc}

0000e386 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>:
    e386:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e38a:	8281      	strh	r1, [r0, #20]
    e38c:	2100      	movs	r1, #0
    e38e:	7581      	strb	r1, [r0, #22]
    e390:	4770      	bx	lr

0000e392 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>:
    e392:	b510      	push	{r4, lr}
    e394:	8a81      	ldrh	r1, [r0, #20]
    e396:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    e39a:	3aff      	subs	r2, #255	; 0xff
    e39c:	d004      	beq.n	e3a8 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x16>
    e39e:	f240 3169 	movw	r1, #873	; 0x369
    e3a2:	2014      	movs	r0, #20
    e3a4:	f7f6 fee4 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e3a8:	88c1      	ldrh	r1, [r0, #6]
    e3aa:	8281      	strh	r1, [r0, #20]
    e3ac:	89c1      	ldrh	r1, [r0, #14]
    e3ae:	b109      	cbz	r1, e3b4 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x22>
    e3b0:	21ff      	movs	r1, #255	; 0xff
    e3b2:	e000      	b.n	e3b6 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x24>
    e3b4:	2100      	movs	r1, #0
    e3b6:	7581      	strb	r1, [r0, #22]
    e3b8:	bd10      	pop	{r4, pc}

0000e3ba <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    e3ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e3be:	461d      	mov	r5, r3
    e3c0:	4616      	mov	r6, r2
    e3c2:	9f06      	ldr	r7, [sp, #24]
    e3c4:	460b      	mov	r3, r1
    e3c6:	4604      	mov	r4, r0
    e3c8:	463a      	mov	r2, r7
    e3ca:	4629      	mov	r1, r5
    e3cc:	4630      	mov	r0, r6
    e3ce:	f000 f84f 	bl	e470 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    e3d2:	4283      	cmp	r3, r0
    e3d4:	d201      	bcs.n	e3da <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    e3d6:	21a8      	movs	r1, #168	; 0xa8
    e3d8:	e018      	b.n	e40c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    e3da:	1ce0      	adds	r0, r4, #3
    e3dc:	f020 0103 	bic.w	r1, r0, #3
    e3e0:	4620      	mov	r0, r4
    e3e2:	42a1      	cmp	r1, r4
    e3e4:	d001      	beq.n	e3ea <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x30>
    e3e6:	21a9      	movs	r1, #169	; 0xa9
    e3e8:	e010      	b.n	e40c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    e3ea:	2224      	movs	r2, #36	; 0x24
    e3ec:	2100      	movs	r1, #0
    e3ee:	f7ff f921 	bl	d634 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e3f2:	f64f 70ff 	movw	r0, #65535	; 0xffff
    e3f6:	82a0      	strh	r0, [r4, #20]
    e3f8:	19a8      	adds	r0, r5, r6
    e3fa:	1d80      	adds	r0, r0, #6
    e3fc:	4378      	muls	r0, r7
    e3fe:	b280      	uxth	r0, r0
    e400:	7725      	strb	r5, [r4, #28]
    e402:	8060      	strh	r0, [r4, #2]
    e404:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    e408:	d903      	bls.n	e412 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x58>
    e40a:	21af      	movs	r1, #175	; 0xaf
    e40c:	2014      	movs	r0, #20
    e40e:	f7f6 feaf 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e412:	8026      	strh	r6, [r4, #0]
    e414:	2000      	movs	r0, #0
    e416:	7760      	strb	r0, [r4, #29]
    e418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e41c <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>:
    e41c:	6181      	str	r1, [r0, #24]
    e41e:	6188      	str	r0, [r1, #24]
    e420:	4770      	bx	lr

0000e422 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    e422:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e426:	460b      	mov	r3, r1
    e428:	4604      	mov	r4, r0
    e42a:	f100 0124 	add.w	r1, r0, #36	; 0x24
    e42e:	8905      	ldrh	r5, [r0, #8]
    e430:	8946      	ldrh	r6, [r0, #10]
    e432:	8880      	ldrh	r0, [r0, #4]
    e434:	f425 4700 	bic.w	r7, r5, #32768	; 0x8000
    e438:	4439      	add	r1, r7
    e43a:	460f      	mov	r7, r1
    e43c:	4285      	cmp	r5, r0
    e43e:	d102      	bne.n	e446 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x24>
    e440:	2000      	movs	r0, #0
    e442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e446:	b10a      	cbz	r2, e44c <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x2a>
    e448:	1cc8      	adds	r0, r1, #3
    e44a:	6010      	str	r0, [r2, #0]
    e44c:	b123      	cbz	r3, e458 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x36>
    e44e:	7f22      	ldrb	r2, [r4, #28]
    e450:	1cf9      	adds	r1, r7, #3
    e452:	4618      	mov	r0, r3
    e454:	f7ff f874 	bl	d540 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e458:	883f      	ldrh	r7, [r7, #0]
    e45a:	f104 0108 	add.w	r1, r4, #8
    e45e:	4620      	mov	r0, r4
    e460:	f7ff fd9b 	bl	df9a <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e464:	42b5      	cmp	r5, r6
    e466:	d101      	bne.n	e46c <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x4a>
    e468:	8920      	ldrh	r0, [r4, #8]
    e46a:	8160      	strh	r0, [r4, #10]
    e46c:	4638      	mov	r0, r7
    e46e:	e7e8      	b.n	e442 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x20>

0000e470 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    e470:	4401      	add	r1, r0
    e472:	1d89      	adds	r1, r1, #6
    e474:	4351      	muls	r1, r2
    e476:	b28a      	uxth	r2, r1
    e478:	2100      	movs	r1, #0
    e47a:	2845      	cmp	r0, #69	; 0x45
    e47c:	d201      	bcs.n	e482 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x12>
    e47e:	f1c0 0145 	rsb	r1, r0, #69	; 0x45
    e482:	3224      	adds	r2, #36	; 0x24
    e484:	1850      	adds	r0, r2, r1
    e486:	b280      	uxth	r0, r0
    e488:	4770      	bx	lr

0000e48a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    e48a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e48e:	4688      	mov	r8, r1
    e490:	88c1      	ldrh	r1, [r0, #6]
    e492:	4604      	mov	r4, r0
    e494:	8900      	ldrh	r0, [r0, #8]
    e496:	f421 4600 	bic.w	r6, r1, #32768	; 0x8000
    e49a:	f104 0524 	add.w	r5, r4, #36	; 0x24
    e49e:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    e4a2:	eb05 0906 	add.w	r9, r5, r6
    e4a6:	f7ff fd99 	bl	dfdc <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    e4aa:	2200      	movs	r2, #0
    e4ac:	b998      	cbnz	r0, e4d6 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    e4ae:	8820      	ldrh	r0, [r4, #0]
    e4b0:	2845      	cmp	r0, #69	; 0x45
    e4b2:	d200      	bcs.n	e4b6 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    e4b4:	2045      	movs	r0, #69	; 0x45
    e4b6:	42b7      	cmp	r7, r6
    e4b8:	d906      	bls.n	e4c8 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    e4ba:	7f23      	ldrb	r3, [r4, #28]
    e4bc:	1bb9      	subs	r1, r7, r6
    e4be:	1ac9      	subs	r1, r1, r3
    e4c0:	1f89      	subs	r1, r1, #6
    e4c2:	4281      	cmp	r1, r0
    e4c4:	da00      	bge.n	e4c8 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    e4c6:	4608      	mov	r0, r1
    e4c8:	89e1      	ldrh	r1, [r4, #14]
    e4ca:	b111      	cbz	r1, e4d2 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    e4cc:	f8b9 3000 	ldrh.w	r3, [r9]
    e4d0:	1ac0      	subs	r0, r0, r3
    e4d2:	4540      	cmp	r0, r8
    e4d4:	da03      	bge.n	e4de <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    e4d6:	8262      	strh	r2, [r4, #18]
    e4d8:	2000      	movs	r0, #0
    e4da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e4de:	7f20      	ldrb	r0, [r4, #28]
    e4e0:	4429      	add	r1, r5
    e4e2:	1d80      	adds	r0, r0, #6
    e4e4:	4430      	add	r0, r6
    e4e6:	4408      	add	r0, r1
    e4e8:	f8a4 8012 	strh.w	r8, [r4, #18]
    e4ec:	1ec0      	subs	r0, r0, #3
    e4ee:	e7f4      	b.n	e4da <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000e4f0 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>:
    e4f0:	2100      	movs	r1, #0
    e4f2:	81c1      	strh	r1, [r0, #14]
    e4f4:	8241      	strh	r1, [r0, #18]
    e4f6:	7581      	strb	r1, [r0, #22]
    e4f8:	4770      	bx	lr

0000e4fa <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    e4fa:	b570      	push	{r4, r5, r6, lr}
    e4fc:	2300      	movs	r3, #0
    e4fe:	2908      	cmp	r1, #8
    e500:	d204      	bcs.n	e50c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x12>
    e502:	f240 11cb 	movw	r1, #459	; 0x1cb
    e506:	2015      	movs	r0, #21
    e508:	f7f6 fe32 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e50c:	6802      	ldr	r2, [r0, #0]
    e50e:	b90a      	cbnz	r2, e514 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    e510:	e01e      	b.n	e550 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    e512:	4610      	mov	r0, r2
    e514:	6802      	ldr	r2, [r0, #0]
    e516:	8893      	ldrh	r3, [r2, #4]
    e518:	428b      	cmp	r3, r1
    e51a:	d002      	beq.n	e522 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x28>
    e51c:	6813      	ldr	r3, [r2, #0]
    e51e:	2b00      	cmp	r3, #0
    e520:	d1f7      	bne.n	e512 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x18>
    e522:	8894      	ldrh	r4, [r2, #4]
    e524:	4613      	mov	r3, r2
    e526:	428c      	cmp	r4, r1
    e528:	d101      	bne.n	e52e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x34>
    e52a:	6811      	ldr	r1, [r2, #0]
    e52c:	e00d      	b.n	e54a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x50>
    e52e:	f101 0508 	add.w	r5, r1, #8
    e532:	b2ae      	uxth	r6, r5
    e534:	2500      	movs	r5, #0
    e536:	42b4      	cmp	r4, r6
    e538:	d309      	bcc.n	e54e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x54>
    e53a:	1a64      	subs	r4, r4, r1
    e53c:	4411      	add	r1, r2
    e53e:	600d      	str	r5, [r1, #0]
    e540:	808c      	strh	r4, [r1, #4]
    e542:	6802      	ldr	r2, [r0, #0]
    e544:	6812      	ldr	r2, [r2, #0]
    e546:	6002      	str	r2, [r0, #0]
    e548:	600a      	str	r2, [r1, #0]
    e54a:	6001      	str	r1, [r0, #0]
    e54c:	e000      	b.n	e550 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    e54e:	2300      	movs	r3, #0
    e550:	4618      	mov	r0, r3
    e552:	bd70      	pop	{r4, r5, r6, pc}

0000e554 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    e554:	b510      	push	{r4, lr}
    e556:	000c      	movs	r4, r1
    e558:	d006      	beq.n	e568 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x14>
    e55a:	2c08      	cmp	r4, #8
    e55c:	d209      	bcs.n	e572 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1e>
    e55e:	f240 1195 	movw	r1, #405	; 0x195
    e562:	2015      	movs	r0, #21
    e564:	f7f6 fe04 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e568:	b108      	cbz	r0, e56e <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    e56a:	2100      	movs	r1, #0
    e56c:	6001      	str	r1, [r0, #0]
    e56e:	2000      	movs	r0, #0
    e570:	bd10      	pop	{r4, pc}
    e572:	b118      	cbz	r0, e57c <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x28>
    e574:	b2a1      	uxth	r1, r4
    e576:	6800      	ldr	r0, [r0, #0]
    e578:	f000 f814 	bl	e5a4 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    e57c:	1d20      	adds	r0, r4, #4
    e57e:	bd10      	pop	{r4, pc}

0000e580 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    e580:	2100      	movs	r1, #0
    e582:	6802      	ldr	r2, [r0, #0]
    e584:	e003      	b.n	e58e <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    e586:	8893      	ldrh	r3, [r2, #4]
    e588:	6812      	ldr	r2, [r2, #0]
    e58a:	4419      	add	r1, r3
    e58c:	b289      	uxth	r1, r1
    e58e:	2a00      	cmp	r2, #0
    e590:	d1f9      	bne.n	e586 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    e592:	f000 b807 	b.w	e5a4 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000e596 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    e596:	2300      	movs	r3, #0
    e598:	600b      	str	r3, [r1, #0]
    e59a:	808a      	strh	r2, [r1, #4]
    e59c:	6802      	ldr	r2, [r0, #0]
    e59e:	600a      	str	r2, [r1, #0]
    e5a0:	6001      	str	r1, [r0, #0]
    e5a2:	4770      	bx	lr
    e5a4:	2300      	movs	r3, #0
    e5a6:	6043      	str	r3, [r0, #4]
    e5a8:	1d02      	adds	r2, r0, #4
    e5aa:	8101      	strh	r1, [r0, #8]
    e5ac:	6002      	str	r2, [r0, #0]
    e5ae:	4770      	bx	lr

0000e5b0 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>:
    e5b0:	f5a0 437f 	sub.w	r3, r0, #65280	; 0xff00
    e5b4:	3bff      	subs	r3, #255	; 0xff
    e5b6:	d001      	beq.n	e5bc <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0xc>
    e5b8:	2902      	cmp	r1, #2
    e5ba:	d301      	bcc.n	e5c0 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x10>
    e5bc:	2000      	movs	r0, #0
    e5be:	4770      	bx	lr
    e5c0:	f7f7 b890 	b.w	56e4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>

0000e5c4 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    e5c4:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    e5c8:	3aff      	subs	r2, #255	; 0xff
    e5ca:	d001      	beq.n	e5d0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xc>
    e5cc:	2902      	cmp	r1, #2
    e5ce:	d301      	bcc.n	e5d4 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x10>
    e5d0:	2000      	movs	r0, #0
    e5d2:	4770      	bx	lr
    e5d4:	f7f7 b8c0 	b.w	5758 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>

0000e5d8 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>:
    e5d8:	b570      	push	{r4, r5, r6, lr}
    e5da:	4605      	mov	r5, r0
    e5dc:	460c      	mov	r4, r1
    e5de:	4608      	mov	r0, r1
    e5e0:	f000 f9a6 	bl	e930 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    e5e4:	b108      	cbz	r0, e5ea <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x12>
    e5e6:	2010      	movs	r0, #16
    e5e8:	bd70      	pop	{r4, r5, r6, pc}
    e5ea:	2d02      	cmp	r5, #2
    e5ec:	d301      	bcc.n	e5f2 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x1a>
    e5ee:	2007      	movs	r0, #7
    e5f0:	bd70      	pop	{r4, r5, r6, pc}
    e5f2:	7025      	strb	r5, [r4, #0]
    e5f4:	2000      	movs	r0, #0
    e5f6:	8060      	strh	r0, [r4, #2]
    e5f8:	bd70      	pop	{r4, r5, r6, pc}
    e5fa:	b510      	push	{r4, lr}
    e5fc:	4604      	mov	r4, r0
    e5fe:	f7f7 f8f7 	bl	57f0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    e602:	42a0      	cmp	r0, r4
    e604:	d901      	bls.n	e60a <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x32>
    e606:	2001      	movs	r0, #1
    e608:	bd10      	pop	{r4, pc}
    e60a:	2000      	movs	r0, #0
    e60c:	bd10      	pop	{r4, pc}
    e60e:	4770      	bx	lr

0000e610 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    e610:	b570      	push	{r4, r5, r6, lr}
    e612:	460e      	mov	r6, r1
    e614:	461d      	mov	r5, r3
    e616:	4611      	mov	r1, r2
    e618:	f000 f811 	bl	e63e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    e61c:	4604      	mov	r4, r0
    e61e:	4629      	mov	r1, r5
    e620:	4630      	mov	r0, r6
    e622:	f000 f803 	bl	e62c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    e626:	4420      	add	r0, r4
    e628:	1d00      	adds	r0, r0, #4
    e62a:	bd70      	pop	{r4, r5, r6, pc}
    e62c:	b510      	push	{r4, lr}
    e62e:	460a      	mov	r2, r1
    e630:	2101      	movs	r1, #1
    e632:	f7ff ff1d 	bl	e470 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    e636:	1cc0      	adds	r0, r0, #3
    e638:	f020 0003 	bic.w	r0, r0, #3
    e63c:	bd10      	pop	{r4, pc}
    e63e:	b510      	push	{r4, lr}
    e640:	460a      	mov	r2, r1
    e642:	2101      	movs	r1, #1
    e644:	f7ff ff14 	bl	e470 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    e648:	1cc0      	adds	r0, r0, #3
    e64a:	f020 0003 	bic.w	r0, r0, #3
    e64e:	bd10      	pop	{r4, pc}
    e650:	b109      	cbz	r1, e656 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    e652:	2100      	movs	r1, #0
    e654:	e000      	b.n	e658 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x48>
    e656:	2102      	movs	r1, #2
    e658:	1843      	adds	r3, r0, r1
    e65a:	7d1a      	ldrb	r2, [r3, #20]
    e65c:	2a02      	cmp	r2, #2
    e65e:	d008      	beq.n	e672 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x62>
    e660:	7d5b      	ldrb	r3, [r3, #21]
    e662:	2b02      	cmp	r3, #2
    e664:	d009      	beq.n	e67a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x6a>
    e666:	2a03      	cmp	r2, #3
    e668:	d003      	beq.n	e672 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x62>
    e66a:	2b03      	cmp	r3, #3
    e66c:	d005      	beq.n	e67a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x6a>
    e66e:	2000      	movs	r0, #0
    e670:	4770      	bx	lr
    e672:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    e676:	8b00      	ldrh	r0, [r0, #24]
    e678:	4770      	bx	lr
    e67a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    e67e:	8b40      	ldrh	r0, [r0, #26]
    e680:	4770      	bx	lr
    e682:	b109      	cbz	r1, e688 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x78>
    e684:	2100      	movs	r1, #0
    e686:	e000      	b.n	e68a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7a>
    e688:	2102      	movs	r1, #2
    e68a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    e68e:	8b01      	ldrh	r1, [r0, #24]
    e690:	b911      	cbnz	r1, e698 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x88>
    e692:	8b40      	ldrh	r0, [r0, #26]
    e694:	2800      	cmp	r0, #0
    e696:	d000      	beq.n	e69a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8a>
    e698:	2001      	movs	r0, #1
    e69a:	4770      	bx	lr
    e69c:	b538      	push	{r3, r4, r5, lr}
    e69e:	7883      	ldrb	r3, [r0, #2]
    e6a0:	f88d 3000 	strb.w	r3, [sp]
    e6a4:	9b00      	ldr	r3, [sp, #0]
    e6a6:	9300      	str	r3, [sp, #0]
    e6a8:	f89d 3000 	ldrb.w	r3, [sp]
    e6ac:	b95b      	cbnz	r3, e6c6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xb6>
    e6ae:	2400      	movs	r4, #0
    e6b0:	b10a      	cbz	r2, e6b6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xa6>
    e6b2:	2300      	movs	r3, #0
    e6b4:	e000      	b.n	e6b8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xa8>
    e6b6:	2302      	movs	r3, #2
    e6b8:	18c2      	adds	r2, r0, r3
    e6ba:	7d15      	ldrb	r5, [r2, #20]
    e6bc:	2d02      	cmp	r5, #2
    e6be:	d004      	beq.n	e6ca <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
    e6c0:	7d52      	ldrb	r2, [r2, #21]
    e6c2:	2a02      	cmp	r2, #2
    e6c4:	d004      	beq.n	e6d0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc0>
    e6c6:	2000      	movs	r0, #0
    e6c8:	bd38      	pop	{r3, r4, r5, pc}
    e6ca:	461a      	mov	r2, r3
    e6cc:	1c5b      	adds	r3, r3, #1
    e6ce:	e000      	b.n	e6d2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc2>
    e6d0:	1c5a      	adds	r2, r3, #1
    e6d2:	b179      	cbz	r1, e6f4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xe4>
    e6d4:	18c5      	adds	r5, r0, r3
    e6d6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    e6da:	752c      	strb	r4, [r5, #20]
    e6dc:	831c      	strh	r4, [r3, #24]
    e6de:	2303      	movs	r3, #3
    e6e0:	1884      	adds	r4, r0, r2
    e6e2:	7523      	strb	r3, [r4, #20]
    e6e4:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    e6e8:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    e6ec:	685b      	ldr	r3, [r3, #4]
    e6ee:	600b      	str	r3, [r1, #0]
    e6f0:	8b00      	ldrh	r0, [r0, #24]
    e6f2:	8088      	strh	r0, [r1, #4]
    e6f4:	2001      	movs	r0, #1
    e6f6:	bd38      	pop	{r3, r4, r5, pc}
    e6f8:	b510      	push	{r4, lr}
    e6fa:	b109      	cbz	r1, e700 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf0>
    e6fc:	2100      	movs	r1, #0
    e6fe:	e000      	b.n	e702 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf2>
    e700:	2102      	movs	r1, #2
    e702:	1843      	adds	r3, r0, r1
    e704:	7d1c      	ldrb	r4, [r3, #20]
    e706:	4294      	cmp	r4, r2
    e708:	d103      	bne.n	e712 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x102>
    e70a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    e70e:	8b00      	ldrh	r0, [r0, #24]
    e710:	bd10      	pop	{r4, pc}
    e712:	7d5b      	ldrb	r3, [r3, #21]
    e714:	4293      	cmp	r3, r2
    e716:	d103      	bne.n	e720 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x110>
    e718:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    e71c:	8b40      	ldrh	r0, [r0, #26]
    e71e:	bd10      	pop	{r4, pc}
    e720:	2000      	movs	r0, #0
    e722:	bd10      	pop	{r4, pc}
    e724:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    e728:	d201      	bcs.n	e72e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11e>
    e72a:	0841      	lsrs	r1, r0, #1
    e72c:	e000      	b.n	e730 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x120>
    e72e:	21ff      	movs	r1, #255	; 0xff
    e730:	1a40      	subs	r0, r0, r1
    e732:	f240 6172 	movw	r1, #1650	; 0x672
    e736:	4288      	cmp	r0, r1
    e738:	db00      	blt.n	e73c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x12c>
    e73a:	4608      	mov	r0, r1
    e73c:	b280      	uxth	r0, r0
    e73e:	4770      	bx	lr

0000e740 <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>:
    e740:	2101      	movs	r1, #1
    e742:	f7ff bf85 	b.w	e650 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>

0000e746 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>:
    e746:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e74a:	4606      	mov	r6, r0
    e74c:	f342 0780 	sbfx	r7, r2, #2, #1
    e750:	7848      	ldrb	r0, [r1, #1]
    e752:	460c      	mov	r4, r1
    e754:	f022 0504 	bic.w	r5, r2, #4
    e758:	1c7f      	adds	r7, r7, #1
    e75a:	b100      	cbz	r0, e75e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x18>
    e75c:	b90d      	cbnz	r5, e762 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x1c>
    e75e:	4328      	orrs	r0, r5
    e760:	d104      	bne.n	e76c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x26>
    e762:	b145      	cbz	r5, e776 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x30>
    e764:	2100      	movs	r1, #0
    e766:	4620      	mov	r0, r4
    e768:	f7f7 f94a 	bl	5a00 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    e76c:	20ff      	movs	r0, #255	; 0xff
    e76e:	70a0      	strb	r0, [r4, #2]
    e770:	b11f      	cbz	r7, e77a <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x34>
    e772:	2000      	movs	r0, #0
    e774:	e002      	b.n	e77c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x36>
    e776:	2101      	movs	r1, #1
    e778:	e7f5      	b.n	e766 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x20>
    e77a:	2002      	movs	r0, #2
    e77c:	1821      	adds	r1, r4, r0
    e77e:	7d09      	ldrb	r1, [r1, #20]
    e780:	2903      	cmp	r1, #3
    e782:	d102      	bne.n	e78a <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    e784:	2d02      	cmp	r5, #2
    e786:	d000      	beq.n	e78a <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    e788:	1c40      	adds	r0, r0, #1
    e78a:	1822      	adds	r2, r4, r0
    e78c:	2101      	movs	r1, #1
    e78e:	7511      	strb	r1, [r2, #20]
    e790:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    e794:	2200      	movs	r2, #0
    e796:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    e79a:	830a      	strh	r2, [r1, #24]
    e79c:	6840      	ldr	r0, [r0, #4]
    e79e:	70a2      	strb	r2, [r4, #2]
    e7a0:	4631      	mov	r1, r6
    e7a2:	f362 010f 	bfi	r1, r2, #0, #16
    e7a6:	e9c6 0100 	strd	r0, r1, [r6]
    e7aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e7ae <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>:
    e7ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e7b2:	461e      	mov	r6, r3
    e7b4:	4613      	mov	r3, r2
    e7b6:	4604      	mov	r4, r0
    e7b8:	b109      	cbz	r1, e7be <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x10>
    e7ba:	2000      	movs	r0, #0
    e7bc:	e000      	b.n	e7c0 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x12>
    e7be:	2002      	movs	r0, #2
    e7c0:	21ff      	movs	r1, #255	; 0xff
    e7c2:	70a1      	strb	r1, [r4, #2]
    e7c4:	1821      	adds	r1, r4, r0
    e7c6:	7d0a      	ldrb	r2, [r1, #20]
    e7c8:	2a01      	cmp	r2, #1
    e7ca:	d003      	beq.n	e7d4 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x26>
    e7cc:	7d49      	ldrb	r1, [r1, #21]
    e7ce:	2901      	cmp	r1, #1
    e7d0:	d10c      	bne.n	e7ec <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x3e>
    e7d2:	1c40      	adds	r0, r0, #1
    e7d4:	eb04 0540 	add.w	r5, r4, r0, lsl #1
    e7d8:	2700      	movs	r7, #0
    e7da:	8b29      	ldrh	r1, [r5, #24]
    e7dc:	f8b5 c020 	ldrh.w	ip, [r5, #32]
    e7e0:	198a      	adds	r2, r1, r6
    e7e2:	4562      	cmp	r2, ip
    e7e4:	d905      	bls.n	e7f2 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x44>
    e7e6:	4420      	add	r0, r4
    e7e8:	832f      	strh	r7, [r5, #24]
    e7ea:	7507      	strb	r7, [r0, #20]
    e7ec:	2000      	movs	r0, #0
    e7ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e7f2:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    e7f6:	4632      	mov	r2, r6
    e7f8:	6840      	ldr	r0, [r0, #4]
    e7fa:	4408      	add	r0, r1
    e7fc:	4619      	mov	r1, r3
    e7fe:	f7fe fe9f 	bl	d540 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e802:	8b28      	ldrh	r0, [r5, #24]
    e804:	4430      	add	r0, r6
    e806:	8328      	strh	r0, [r5, #24]
    e808:	70a7      	strb	r7, [r4, #2]
    e80a:	2001      	movs	r0, #1
    e80c:	e7ef      	b.n	e7ee <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x40>

0000e80e <sym_SYX5A4D5YT7FQ4PORL5PYZ5T6BOBVEZRWNZWOOA>:
    e80e:	2202      	movs	r2, #2
    e810:	2100      	movs	r1, #0
    e812:	f7ff bf71 	b.w	e6f8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xe8>

0000e816 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>:
    e816:	b510      	push	{r4, lr}
    e818:	2101      	movs	r1, #1
    e81a:	f7ff ff32 	bl	e682 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x72>
    e81e:	2800      	cmp	r0, #0
    e820:	d000      	beq.n	e824 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY+0xe>
    e822:	2001      	movs	r0, #1
    e824:	bd10      	pop	{r4, pc}

0000e826 <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>:
    e826:	2201      	movs	r2, #1
    e828:	f7ff bf38 	b.w	e69c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8c>

0000e82c <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>:
    e82c:	2200      	movs	r2, #0
    e82e:	f7ff bf35 	b.w	e69c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8c>

0000e832 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>:
    e832:	b570      	push	{r4, r5, r6, lr}
    e834:	b109      	cbz	r1, e83a <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x8>
    e836:	2300      	movs	r3, #0
    e838:	e000      	b.n	e83c <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0xa>
    e83a:	2302      	movs	r3, #2
    e83c:	21ff      	movs	r1, #255	; 0xff
    e83e:	7081      	strb	r1, [r0, #2]
    e840:	18c1      	adds	r1, r0, r3
    e842:	2402      	movs	r4, #2
    e844:	7d0d      	ldrb	r5, [r1, #20]
    e846:	2d01      	cmp	r5, #1
    e848:	d007      	beq.n	e85a <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x28>
    e84a:	7d4d      	ldrb	r5, [r1, #21]
    e84c:	2d01      	cmp	r5, #1
    e84e:	d009      	beq.n	e864 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x32>
    e850:	f44f 718b 	mov.w	r1, #278	; 0x116
    e854:	2009      	movs	r0, #9
    e856:	f7f6 fc8b 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e85a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    e85e:	831a      	strh	r2, [r3, #24]
    e860:	750c      	strb	r4, [r1, #20]
    e862:	e003      	b.n	e86c <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x3a>
    e864:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    e868:	835a      	strh	r2, [r3, #26]
    e86a:	754c      	strb	r4, [r1, #21]
    e86c:	2100      	movs	r1, #0
    e86e:	7081      	strb	r1, [r0, #2]
    e870:	bd70      	pop	{r4, r5, r6, pc}

0000e872 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>:
    e872:	2101      	movs	r1, #1
    e874:	7001      	strb	r1, [r0, #0]
    e876:	4770      	bx	lr

0000e878 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>:
    e878:	2201      	movs	r2, #1
    e87a:	4611      	mov	r1, r2
    e87c:	f7ff bf3c 	b.w	e6f8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xe8>

0000e880 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>:
    e880:	2201      	movs	r2, #1
    e882:	2100      	movs	r1, #0
    e884:	f7ff bf38 	b.w	e6f8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xe8>

0000e888 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>:
    e888:	2100      	movs	r1, #0
    e88a:	f7ff bee1 	b.w	e650 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>
    e88e:	2800      	cmp	r0, #0
    e890:	db09      	blt.n	e8a6 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x1e>
    e892:	f000 021f 	and.w	r2, r0, #31
    e896:	2101      	movs	r1, #1
    e898:	4091      	lsls	r1, r2
    e89a:	0940      	lsrs	r0, r0, #5
    e89c:	0080      	lsls	r0, r0, #2
    e89e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    e8a2:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    e8a6:	4770      	bx	lr
    e8a8:	2800      	cmp	r0, #0
    e8aa:	db0d      	blt.n	e8c8 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x40>
    e8ac:	f000 021f 	and.w	r2, r0, #31
    e8b0:	2101      	movs	r1, #1
    e8b2:	4091      	lsls	r1, r2
    e8b4:	0940      	lsrs	r0, r0, #5
    e8b6:	0080      	lsls	r0, r0, #2
    e8b8:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    e8bc:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    e8c0:	f3bf 8f4f 	dsb	sy
    e8c4:	f3bf 8f6f 	isb	sy
    e8c8:	4770      	bx	lr
    e8ca:	b510      	push	{r4, lr}
    e8cc:	200e      	movs	r0, #14
    e8ce:	f7ff ffeb 	bl	e8a8 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    e8d2:	200e      	movs	r0, #14
    e8d4:	f7ff ffdb 	bl	e88e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    e8d8:	200f      	movs	r0, #15
    e8da:	f7ff ffe5 	bl	e8a8 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    e8de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e8e2:	200f      	movs	r0, #15
    e8e4:	f7ff bfd3 	b.w	e88e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    e8e8:	2800      	cmp	r0, #0
    e8ea:	db09      	blt.n	e900 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x78>
    e8ec:	f000 021f 	and.w	r2, r0, #31
    e8f0:	2101      	movs	r1, #1
    e8f2:	4091      	lsls	r1, r2
    e8f4:	0940      	lsrs	r0, r0, #5
    e8f6:	0080      	lsls	r0, r0, #2
    e8f8:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    e8fc:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    e900:	4770      	bx	lr
    e902:	5840      	ldr	r0, [r0, r1]
    e904:	2800      	cmp	r0, #0
    e906:	d000      	beq.n	e90a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x82>
    e908:	2001      	movs	r0, #1
    e90a:	4770      	bx	lr

0000e90c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    e90c:	b510      	push	{r4, lr}
    e90e:	4604      	mov	r4, r0
    e910:	4620      	mov	r0, r4
    e912:	f7f7 f973 	bl	5bfc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x2c>
    e916:	2811      	cmp	r0, #17
    e918:	d0fa      	beq.n	e910 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x4>
    e91a:	bd10      	pop	{r4, pc}

0000e91c <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    e91c:	b510      	push	{r4, lr}
    e91e:	f7ff fff5 	bl	e90c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    e922:	2800      	cmp	r0, #0
    e924:	d003      	beq.n	e92e <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x12>
    e926:	21a0      	movs	r1, #160	; 0xa0
    e928:	201d      	movs	r0, #29
    e92a:	f7f6 fc21 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e92e:	bd10      	pop	{r4, pc}

0000e930 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>:
    e930:	b108      	cbz	r0, e936 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI+0x6>
    e932:	2000      	movs	r0, #0
    e934:	4770      	bx	lr
    e936:	2001      	movs	r0, #1
    e938:	4770      	bx	lr

0000e93a <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    e93a:	f7f7 bab1 	b.w	5ea0 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000e93e <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    e93e:	f7f7 ba9f 	b.w	5e80 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000e942 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>:
    e942:	b510      	push	{r4, lr}
    e944:	4604      	mov	r4, r0
    e946:	4608      	mov	r0, r1
    e948:	4619      	mov	r1, r3
    e94a:	4294      	cmp	r4, r2
    e94c:	d103      	bne.n	e956 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI+0x14>
    e94e:	2206      	movs	r2, #6
    e950:	f7fe fde4 	bl	d51c <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    e954:	b108      	cbz	r0, e95a <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI+0x18>
    e956:	2000      	movs	r0, #0
    e958:	bd10      	pop	{r4, pc}
    e95a:	2001      	movs	r0, #1
    e95c:	bd10      	pop	{r4, pc}

0000e95e <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    e95e:	b510      	push	{r4, lr}
    e960:	2900      	cmp	r1, #0
    e962:	4604      	mov	r4, r0
    e964:	f04f 0106 	mov.w	r1, #6
    e968:	d002      	beq.n	e970 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    e96a:	f7f6 fc8d 	bl	5288 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    e96e:	e001      	b.n	e974 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    e970:	f7f6 fc98 	bl	52a4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    e974:	7960      	ldrb	r0, [r4, #5]
    e976:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    e97a:	7160      	strb	r0, [r4, #5]
    e97c:	bd10      	pop	{r4, pc}

0000e97e <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    e97e:	4770      	bx	lr

0000e980 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    e980:	b530      	push	{r4, r5, lr}
    e982:	460c      	mov	r4, r1
    e984:	4605      	mov	r5, r0
    e986:	b08d      	sub	sp, #52	; 0x34
    e988:	f04f 0103 	mov.w	r1, #3
    e98c:	f104 0003 	add.w	r0, r4, #3
    e990:	b112      	cbz	r2, e998 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    e992:	f7f6 fc79 	bl	5288 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    e996:	e001      	b.n	e99c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    e998:	f7f6 fc84 	bl	52a4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    e99c:	7960      	ldrb	r0, [r4, #5]
    e99e:	220d      	movs	r2, #13
    e9a0:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    e9a4:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    e9a8:	7160      	strb	r0, [r4, #5]
    e9aa:	2100      	movs	r1, #0
    e9ac:	a804      	add	r0, sp, #16
    e9ae:	f7fe fe41 	bl	d634 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e9b2:	78e0      	ldrb	r0, [r4, #3]
    e9b4:	f88d 001f 	strb.w	r0, [sp, #31]
    e9b8:	7920      	ldrb	r0, [r4, #4]
    e9ba:	f88d 001e 	strb.w	r0, [sp, #30]
    e9be:	7960      	ldrb	r0, [r4, #5]
    e9c0:	f88d 001d 	strb.w	r0, [sp, #29]
    e9c4:	2210      	movs	r2, #16
    e9c6:	4629      	mov	r1, r5
    e9c8:	4668      	mov	r0, sp
    e9ca:	f7fe fdb9 	bl	d540 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e9ce:	4668      	mov	r0, sp
    e9d0:	f7ff ffa4 	bl	e91c <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    e9d4:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    e9d8:	7020      	strb	r0, [r4, #0]
    e9da:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    e9de:	7060      	strb	r0, [r4, #1]
    e9e0:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    e9e4:	70a0      	strb	r0, [r4, #2]
    e9e6:	b00d      	add	sp, #52	; 0x34
    e9e8:	bd30      	pop	{r4, r5, pc}

0000e9ea <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>:
    e9ea:	f7f7 be3d 	b.w	6668 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f0>
    e9ee:	07c1      	lsls	r1, r0, #31
    e9f0:	d001      	beq.n	e9f6 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0xc>
    e9f2:	2001      	movs	r0, #1
    e9f4:	4770      	bx	lr
    e9f6:	0780      	lsls	r0, r0, #30
    e9f8:	d501      	bpl.n	e9fe <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x14>
    e9fa:	2002      	movs	r0, #2
    e9fc:	4770      	bx	lr
    e9fe:	2000      	movs	r0, #0
    ea00:	4770      	bx	lr
    ea02:	b510      	push	{r4, lr}
    ea04:	2801      	cmp	r0, #1
    ea06:	d008      	beq.n	ea1a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    ea08:	2802      	cmp	r0, #2
    ea0a:	d004      	beq.n	ea16 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x2c>
    ea0c:	f240 31be 	movw	r1, #958	; 0x3be
    ea10:	2006      	movs	r0, #6
    ea12:	f7f6 fbad 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ea16:	2001      	movs	r0, #1
    ea18:	bd10      	pop	{r4, pc}
    ea1a:	2000      	movs	r0, #0
    ea1c:	bd10      	pop	{r4, pc}
    ea1e:	2900      	cmp	r1, #0
    ea20:	d004      	beq.n	ea2c <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x42>
    ea22:	2801      	cmp	r0, #1
    ea24:	d003      	beq.n	ea2e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    ea26:	2901      	cmp	r1, #1
    ea28:	d001      	beq.n	ea2e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    ea2a:	2002      	movs	r0, #2
    ea2c:	4770      	bx	lr
    ea2e:	2001      	movs	r0, #1
    ea30:	4770      	bx	lr
    ea32:	f7ff bc6a 	b.w	e30a <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000ea36 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    ea36:	2101      	movs	r1, #1
    ea38:	f7f8 b9a2 	b.w	6d80 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x74>

0000ea3c <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    ea3c:	b510      	push	{r4, lr}
    ea3e:	f002 fc8c 	bl	1135a <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    ea42:	b118      	cbz	r0, ea4c <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    ea44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ea48:	f7fc bf2a 	b.w	b8a0 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    ea4c:	20ff      	movs	r0, #255	; 0xff
    ea4e:	bd10      	pop	{r4, pc}

0000ea50 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    ea50:	b510      	push	{r4, lr}
    ea52:	f7f8 f9dd 	bl	6e10 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    ea56:	2810      	cmp	r0, #16
    ea58:	d003      	beq.n	ea62 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    ea5a:	f7f8 f9a9 	bl	6db0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    ea5e:	2810      	cmp	r0, #16
    ea60:	d100      	bne.n	ea64 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x14>
    ea62:	2008      	movs	r0, #8
    ea64:	bd10      	pop	{r4, pc}

0000ea66 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>:
    ea66:	b510      	push	{r4, lr}
    ea68:	f7f8 f9d2 	bl	6e10 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    ea6c:	2810      	cmp	r0, #16
    ea6e:	d007      	beq.n	ea80 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    ea70:	f7f8 f99e 	bl	6db0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    ea74:	2810      	cmp	r0, #16
    ea76:	d003      	beq.n	ea80 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    ea78:	f7f8 fa10 	bl	6e9c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x190>
    ea7c:	2001      	movs	r0, #1
    ea7e:	bd10      	pop	{r4, pc}
    ea80:	2000      	movs	r0, #0
    ea82:	bd10      	pop	{r4, pc}

0000ea84 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    ea84:	b510      	push	{r4, lr}
    ea86:	f7f8 f9c3 	bl	6e10 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    ea8a:	2810      	cmp	r0, #16
    ea8c:	d003      	beq.n	ea96 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY+0x12>
    ea8e:	f7f8 fa4d 	bl	6f2c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x220>
    ea92:	2001      	movs	r0, #1
    ea94:	bd10      	pop	{r4, pc}
    ea96:	2000      	movs	r0, #0
    ea98:	bd10      	pop	{r4, pc}

0000ea9a <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    ea9a:	b570      	push	{r4, r5, r6, lr}
    ea9c:	460e      	mov	r6, r1
    ea9e:	b08c      	sub	sp, #48	; 0x30
    eaa0:	4614      	mov	r4, r2
    eaa2:	4601      	mov	r1, r0
    eaa4:	461d      	mov	r5, r3
    eaa6:	2210      	movs	r2, #16
    eaa8:	4668      	mov	r0, sp
    eaaa:	f000 f91a 	bl	ece2 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    eaae:	2210      	movs	r2, #16
    eab0:	4631      	mov	r1, r6
    eab2:	a804      	add	r0, sp, #16
    eab4:	f000 f915 	bl	ece2 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    eab8:	4668      	mov	r0, sp
    eaba:	f7ff ff2f 	bl	e91c <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    eabe:	a908      	add	r1, sp, #32
    eac0:	f04f 0210 	mov.w	r2, #16
    eac4:	4628      	mov	r0, r5
    eac6:	b11c      	cbz	r4, ead0 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    eac8:	f000 f90b 	bl	ece2 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    eacc:	b00c      	add	sp, #48	; 0x30
    eace:	bd70      	pop	{r4, r5, r6, pc}
    ead0:	f7fe fd36 	bl	d540 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ead4:	e7fa      	b.n	eacc <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>

0000ead6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    ead6:	b510      	push	{r4, lr}
    ead8:	460c      	mov	r4, r1
    eada:	2100      	movs	r1, #0
    eadc:	f7ff fd72 	bl	e5c4 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    eae0:	6060      	str	r0, [r4, #4]
    eae2:	b118      	cbz	r0, eaec <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x16>
    eae4:	2001      	movs	r0, #1
    eae6:	7020      	strb	r0, [r4, #0]
    eae8:	2000      	movs	r0, #0
    eaea:	bd10      	pop	{r4, pc}
    eaec:	2002      	movs	r0, #2
    eaee:	bd10      	pop	{r4, pc}

0000eaf0 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    eaf0:	f240 41e2 	movw	r1, #1250	; 0x4e2
    eaf4:	4348      	muls	r0, r1
    eaf6:	4770      	bx	lr

0000eaf8 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    eaf8:	f240 41e2 	movw	r1, #1250	; 0x4e2
    eafc:	fbb0 f0f1 	udiv	r0, r0, r1
    eb00:	b280      	uxth	r0, r0
    eb02:	4770      	bx	lr

0000eb04 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
    eb04:	b570      	push	{r4, r5, r6, lr}
    eb06:	4604      	mov	r4, r0
    eb08:	4290      	cmp	r0, r2
    eb0a:	d20b      	bcs.n	eb24 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x20>
    eb0c:	1b10      	subs	r0, r2, r4
    eb0e:	2865      	cmp	r0, #101	; 0x65
    eb10:	d200      	bcs.n	eb14 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>
    eb12:	2065      	movs	r0, #101	; 0x65
    eb14:	1825      	adds	r5, r4, r0
    eb16:	428d      	cmp	r5, r1
    eb18:	d803      	bhi.n	eb22 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x1e>
    eb1a:	2103      	movs	r1, #3
    eb1c:	f7f3 fe1e 	bl	275c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    eb20:	b108      	cbz	r0, eb26 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x22>
    eb22:	4620      	mov	r0, r4
    eb24:	bd70      	pop	{r4, r5, r6, pc}
    eb26:	4628      	mov	r0, r5
    eb28:	bd70      	pop	{r4, r5, r6, pc}

0000eb2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    eb2a:	b510      	push	{r4, lr}
    eb2c:	f1a2 030f 	sub.w	r3, r2, #15
    eb30:	290c      	cmp	r1, #12
    eb32:	d244      	bcs.n	ebbe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    eb34:	e8df f001 	tbb	[pc, r1]
    eb38:	120d0806 	.word	0x120d0806
    eb3c:	241c1815 	.word	0x241c1815
    eb40:	312a4127 	.word	0x312a4127
    eb44:	b3c2      	cbz	r2, ebb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x8e>
    eb46:	e03a      	b.n	ebbe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    eb48:	2a07      	cmp	r2, #7
    eb4a:	d03a      	beq.n	ebc2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    eb4c:	2a08      	cmp	r2, #8
    eb4e:	d038      	beq.n	ebc2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    eb50:	e035      	b.n	ebbe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    eb52:	2a0c      	cmp	r2, #12
    eb54:	d035      	beq.n	ebc2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    eb56:	2a0b      	cmp	r2, #11
    eb58:	d033      	beq.n	ebc2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    eb5a:	e030      	b.n	ebbe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    eb5c:	2a0d      	cmp	r2, #13
    eb5e:	d030      	beq.n	ebc2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    eb60:	e02d      	b.n	ebbe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    eb62:	2b0c      	cmp	r3, #12
    eb64:	d92d      	bls.n	ebc2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    eb66:	e02a      	b.n	ebbe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    eb68:	3a10      	subs	r2, #16
    eb6a:	2a0b      	cmp	r2, #11
    eb6c:	d929      	bls.n	ebc2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    eb6e:	e026      	b.n	ebbe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    eb70:	2b03      	cmp	r3, #3
    eb72:	d926      	bls.n	ebc2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    eb74:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
    eb78:	b308      	cbz	r0, ebbe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    eb7a:	2a1b      	cmp	r2, #27
    eb7c:	d921      	bls.n	ebc2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    eb7e:	e01e      	b.n	ebbe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    eb80:	2a04      	cmp	r2, #4
    eb82:	d01e      	beq.n	ebc2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    eb84:	e01b      	b.n	ebbe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    eb86:	2a06      	cmp	r2, #6
    eb88:	d01b      	beq.n	ebc2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    eb8a:	e018      	b.n	ebbe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    eb8c:	2a1c      	cmp	r2, #28
    eb8e:	d018      	beq.n	ebc2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    eb90:	2a1d      	cmp	r2, #29
    eb92:	d016      	beq.n	ebc2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    eb94:	2a1e      	cmp	r2, #30
    eb96:	d014      	beq.n	ebc2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    eb98:	e011      	b.n	ebbe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    eb9a:	2a1f      	cmp	r2, #31
    eb9c:	d011      	beq.n	ebc2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    eb9e:	2a20      	cmp	r2, #32
    eba0:	d00f      	beq.n	ebc2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    eba2:	2a21      	cmp	r2, #33	; 0x21
    eba4:	d00d      	beq.n	ebc2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    eba6:	2a22      	cmp	r2, #34	; 0x22
    eba8:	d00b      	beq.n	ebc2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ebaa:	2a23      	cmp	r2, #35	; 0x23
    ebac:	d009      	beq.n	ebc2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ebae:	2a24      	cmp	r2, #36	; 0x24
    ebb0:	d007      	beq.n	ebc2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ebb2:	2a26      	cmp	r2, #38	; 0x26
    ebb4:	d005      	beq.n	ebc2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ebb6:	e002      	b.n	ebbe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ebb8:	e003      	b.n	ebc2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ebba:	2a0e      	cmp	r2, #14
    ebbc:	d001      	beq.n	ebc2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ebbe:	2000      	movs	r0, #0
    ebc0:	bd10      	pop	{r4, pc}
    ebc2:	2001      	movs	r0, #1
    ebc4:	bd10      	pop	{r4, pc}

0000ebc6 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    ebc6:	280c      	cmp	r0, #12
    ebc8:	d013      	beq.n	ebf2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ebca:	280b      	cmp	r0, #11
    ebcc:	d011      	beq.n	ebf2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ebce:	280d      	cmp	r0, #13
    ebd0:	d00f      	beq.n	ebf2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ebd2:	281f      	cmp	r0, #31
    ebd4:	d00d      	beq.n	ebf2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ebd6:	2820      	cmp	r0, #32
    ebd8:	d00b      	beq.n	ebf2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ebda:	2821      	cmp	r0, #33	; 0x21
    ebdc:	d009      	beq.n	ebf2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ebde:	2822      	cmp	r0, #34	; 0x22
    ebe0:	d007      	beq.n	ebf2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ebe2:	2823      	cmp	r0, #35	; 0x23
    ebe4:	d005      	beq.n	ebf2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ebe6:	2824      	cmp	r0, #36	; 0x24
    ebe8:	d003      	beq.n	ebf2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ebea:	2826      	cmp	r0, #38	; 0x26
    ebec:	d001      	beq.n	ebf2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ebee:	2000      	movs	r0, #0
    ebf0:	4770      	bx	lr
    ebf2:	2001      	movs	r0, #1
    ebf4:	4770      	bx	lr

0000ebf6 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    ebf6:	f011 0f0c 	tst.w	r1, #12
    ebfa:	d016      	beq.n	ec2a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    ebfc:	074a      	lsls	r2, r1, #29
    ebfe:	f44f 7116 	mov.w	r1, #600	; 0x258
    ec02:	2a00      	cmp	r2, #0
    ec04:	da02      	bge.n	ec0c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    ec06:	f04f 0210 	mov.w	r2, #16
    ec0a:	e001      	b.n	ec10 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    ec0c:	f04f 0240 	mov.w	r2, #64	; 0x40
    ec10:	da01      	bge.n	ec16 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    ec12:	f04f 0196 	mov.w	r1, #150	; 0x96
    ec16:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    ec1a:	eba0 0301 	sub.w	r3, r0, r1
    ec1e:	4288      	cmp	r0, r1
    ec20:	d910      	bls.n	ec44 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    ec22:	fb93 f0f2 	sdiv	r0, r3, r2
    ec26:	b280      	uxth	r0, r0
    ec28:	4770      	bx	lr
    ec2a:	2902      	cmp	r1, #2
    ec2c:	d002      	beq.n	ec34 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x3e>
    ec2e:	2870      	cmp	r0, #112	; 0x70
    ec30:	d80a      	bhi.n	ec48 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x52>
    ec32:	e007      	b.n	ec44 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    ec34:	283c      	cmp	r0, #60	; 0x3c
    ec36:	d905      	bls.n	ec44 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    ec38:	383c      	subs	r0, #60	; 0x3c
    ec3a:	17c1      	asrs	r1, r0, #31
    ec3c:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    ec40:	1080      	asrs	r0, r0, #2
    ec42:	e7f0      	b.n	ec26 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    ec44:	2000      	movs	r0, #0
    ec46:	e7ee      	b.n	ec26 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    ec48:	3870      	subs	r0, #112	; 0x70
    ec4a:	17c1      	asrs	r1, r0, #31
    ec4c:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    ec50:	10c0      	asrs	r0, r0, #3
    ec52:	e7e8      	b.n	ec26 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>

0000ec54 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    ec54:	6809      	ldr	r1, [r1, #0]
    ec56:	f8c0 106a 	str.w	r1, [r0, #106]	; 0x6a
    ec5a:	4770      	bx	lr

0000ec5c <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>:
    ec5c:	07c1      	lsls	r1, r0, #31
    ec5e:	d001      	beq.n	ec64 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x8>
    ec60:	2001      	movs	r0, #1
    ec62:	4770      	bx	lr
    ec64:	0781      	lsls	r1, r0, #30
    ec66:	d501      	bpl.n	ec6c <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x10>
    ec68:	2002      	movs	r0, #2
    ec6a:	4770      	bx	lr
    ec6c:	0740      	lsls	r0, r0, #29
    ec6e:	d501      	bpl.n	ec74 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x18>
    ec70:	2008      	movs	r0, #8
    ec72:	4770      	bx	lr
    ec74:	2000      	movs	r0, #0
    ec76:	4770      	bx	lr

0000ec78 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
    ec78:	b510      	push	{r4, lr}
    ec7a:	f640 12c4 	movw	r2, #2500	; 0x9c4
    ec7e:	2901      	cmp	r1, #1
    ec80:	d006      	beq.n	ec90 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x18>
    ec82:	2902      	cmp	r1, #2
    ec84:	d005      	beq.n	ec92 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
    ec86:	f240 31a1 	movw	r1, #929	; 0x3a1
    ec8a:	2029      	movs	r0, #41	; 0x29
    ec8c:	f7f6 fa70 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ec90:	b108      	cbz	r0, ec96 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1e>
    ec92:	4610      	mov	r0, r2
    ec94:	bd10      	pop	{r4, pc}
    ec96:	f240 40e2 	movw	r0, #1250	; 0x4e2
    ec9a:	bd10      	pop	{r4, pc}

0000ec9c <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    ec9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    eca0:	460c      	mov	r4, r1
    eca2:	4605      	mov	r5, r0
    eca4:	68c6      	ldr	r6, [r0, #12]
    eca6:	f7f4 f987 	bl	2fb8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    ecaa:	b198      	cbz	r0, ecd4 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x38>
    ecac:	b1bc      	cbz	r4, ecde <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    ecae:	4630      	mov	r0, r6
    ecb0:	68e9      	ldr	r1, [r5, #12]
    ecb2:	f7f3 fe5d 	bl	2970 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    ecb6:	2800      	cmp	r0, #0
    ecb8:	dd11      	ble.n	ecde <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    ecba:	4420      	add	r0, r4
    ecbc:	1e40      	subs	r0, r0, #1
    ecbe:	fbb0 f7f4 	udiv	r7, r0, r4
    ecc2:	fb07 f104 	mul.w	r1, r7, r4
    ecc6:	4630      	mov	r0, r6
    ecc8:	f7f3 fe20 	bl	290c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    eccc:	60e8      	str	r0, [r5, #12]
    ecce:	4638      	mov	r0, r7
    ecd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ecd4:	f240 2126 	movw	r1, #550	; 0x226
    ecd8:	2029      	movs	r0, #41	; 0x29
    ecda:	f7f6 fa49 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ecde:	2000      	movs	r0, #0
    ece0:	e7f6      	b.n	ecd0 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>

0000ece2 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    ece2:	b530      	push	{r4, r5, lr}
    ece4:	4613      	mov	r3, r2
    ece6:	e006      	b.n	ecf6 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    ece8:	18cc      	adds	r4, r1, r3
    ecea:	1ad5      	subs	r5, r2, r3
    ecec:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    ecf0:	1e5b      	subs	r3, r3, #1
    ecf2:	5544      	strb	r4, [r0, r5]
    ecf4:	b2db      	uxtb	r3, r3
    ecf6:	2b00      	cmp	r3, #0
    ecf8:	d1f6      	bne.n	ece8 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    ecfa:	bd30      	pop	{r4, r5, pc}

0000ecfc <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>:
    ecfc:	b538      	push	{r3, r4, r5, lr}
    ecfe:	4605      	mov	r5, r0
    ed00:	460c      	mov	r4, r1
    ed02:	4668      	mov	r0, sp
    ed04:	f7fd fad8 	bl	c2b8 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    ed08:	b310      	cbz	r0, ed50 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x54>
    ed0a:	f99d 0000 	ldrsb.w	r0, [sp]
    ed0e:	7260      	strb	r0, [r4, #9]
    ed10:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
    ed14:	72a1      	strb	r1, [r4, #10]
    ed16:	f994 100b 	ldrsb.w	r1, [r4, #11]
    ed1a:	2200      	movs	r2, #0
    ed1c:	1a41      	subs	r1, r0, r1
    ed1e:	d500      	bpl.n	ed22 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x26>
    ed20:	4249      	negs	r1, r1
    ed22:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
    ed26:	428b      	cmp	r3, r1
    ed28:	dc10      	bgt.n	ed4c <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    ed2a:	2bff      	cmp	r3, #255	; 0xff
    ed2c:	d00e      	beq.n	ed4c <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    ed2e:	7b21      	ldrb	r1, [r4, #12]
    ed30:	1c49      	adds	r1, r1, #1
    ed32:	b2c9      	uxtb	r1, r1
    ed34:	7321      	strb	r1, [r4, #12]
    ed36:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
    ed3a:	4299      	cmp	r1, r3
    ed3c:	d802      	bhi.n	ed44 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x48>
    ed3e:	7ae1      	ldrb	r1, [r4, #11]
    ed40:	297f      	cmp	r1, #127	; 0x7f
    ed42:	d103      	bne.n	ed4c <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    ed44:	72e0      	strb	r0, [r4, #11]
    ed46:	2000      	movs	r0, #0
    ed48:	7320      	strb	r0, [r4, #12]
    ed4a:	2201      	movs	r2, #1
    ed4c:	4610      	mov	r0, r2
    ed4e:	bd38      	pop	{r3, r4, r5, pc}
    ed50:	207f      	movs	r0, #127	; 0x7f
    ed52:	7260      	strb	r0, [r4, #9]
    ed54:	2000      	movs	r0, #0
    ed56:	bd38      	pop	{r3, r4, r5, pc}

0000ed58 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    ed58:	2300      	movs	r3, #0
    ed5a:	6283      	str	r3, [r0, #40]	; 0x28
    ed5c:	8602      	strh	r2, [r0, #48]	; 0x30
    ed5e:	f240 2371 	movw	r3, #625	; 0x271
    ed62:	435a      	muls	r2, r3
    ed64:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    ed68:	1e52      	subs	r2, r2, #1
    ed6a:	fbb2 f1f1 	udiv	r1, r2, r1
    ed6e:	62c1      	str	r1, [r0, #44]	; 0x2c
    ed70:	4770      	bx	lr

0000ed72 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>:
    ed72:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    ed76:	4607      	mov	r7, r0
    ed78:	4690      	mov	r8, r2
    ed7a:	468b      	mov	fp, r1
    ed7c:	2601      	movs	r6, #1
    ed7e:	4608      	mov	r0, r1
    ed80:	f000 f946 	bl	f010 <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    ed84:	4682      	mov	sl, r0
    ed86:	4658      	mov	r0, fp
    ed88:	f000 f94e 	bl	f028 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    ed8c:	4681      	mov	r9, r0
    ed8e:	f7ff ff65 	bl	ec5c <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    ed92:	4604      	mov	r4, r0
    ed94:	4650      	mov	r0, sl
    ed96:	f7ff ff61 	bl	ec5c <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    ed9a:	4605      	mov	r5, r0
    ed9c:	ea54 0005 	orrs.w	r0, r4, r5
    eda0:	d100      	bne.n	eda4 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x32>
    eda2:	2600      	movs	r6, #0
    eda4:	f7fc fcfe 	bl	b7a4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    eda8:	ea10 0f09 	tst.w	r0, r9
    edac:	d100      	bne.n	edb0 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x3e>
    edae:	2400      	movs	r4, #0
    edb0:	f7fc fcf8 	bl	b7a4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    edb4:	ea10 0f0a 	tst.w	r0, sl
    edb8:	d100      	bne.n	edbc <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x4a>
    edba:	2500      	movs	r5, #0
    edbc:	f897 006e 	ldrb.w	r0, [r7, #110]	; 0x6e
    edc0:	42a0      	cmp	r0, r4
    edc2:	d100      	bne.n	edc6 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x54>
    edc4:	2400      	movs	r4, #0
    edc6:	f888 4000 	strb.w	r4, [r8]
    edca:	f897 006f 	ldrb.w	r0, [r7, #111]	; 0x6f
    edce:	42a8      	cmp	r0, r5
    edd0:	d100      	bne.n	edd4 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x62>
    edd2:	2500      	movs	r5, #0
    edd4:	f888 5001 	strb.w	r5, [r8, #1]
    edd8:	b974      	cbnz	r4, edf8 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    edda:	b96d      	cbnz	r5, edf8 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    eddc:	4658      	mov	r0, fp
    edde:	f000 f921 	bl	f024 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    ede2:	f8b7 107c 	ldrh.w	r1, [r7, #124]	; 0x7c
    ede6:	1a40      	subs	r0, r0, r1
    ede8:	b200      	sxth	r0, r0
    edea:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    edee:	4288      	cmp	r0, r1
    edf0:	dc01      	bgt.n	edf6 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x84>
    edf2:	2800      	cmp	r0, #0
    edf4:	dc00      	bgt.n	edf8 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    edf6:	2600      	movs	r6, #0
    edf8:	4630      	mov	r0, r6
    edfa:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

0000edfe <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
    edfe:	f240 41e2 	movw	r1, #1250	; 0x4e2
    ee02:	4348      	muls	r0, r1
    ee04:	4770      	bx	lr

0000ee06 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    ee06:	f240 41e2 	movw	r1, #1250	; 0x4e2
    ee0a:	fb10 f001 	smulbb	r0, r0, r1
    ee0e:	4770      	bx	lr

0000ee10 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    ee10:	b510      	push	{r4, lr}
    ee12:	2300      	movs	r3, #0
    ee14:	461a      	mov	r2, r3
    ee16:	e003      	b.n	ee20 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    ee18:	5c84      	ldrb	r4, [r0, r2]
    ee1a:	4323      	orrs	r3, r4
    ee1c:	1c52      	adds	r2, r2, #1
    ee1e:	b2d2      	uxtb	r2, r2
    ee20:	428a      	cmp	r2, r1
    ee22:	d3f9      	bcc.n	ee18 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    ee24:	b10b      	cbz	r3, ee2a <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    ee26:	2000      	movs	r0, #0
    ee28:	bd10      	pop	{r4, pc}
    ee2a:	2001      	movs	r0, #1
    ee2c:	bd10      	pop	{r4, pc}

0000ee2e <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    ee2e:	b510      	push	{r4, lr}
    ee30:	4604      	mov	r4, r0
    ee32:	f890 0020 	ldrb.w	r0, [r0, #32]
    ee36:	b108      	cbz	r0, ee3c <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    ee38:	2825      	cmp	r0, #37	; 0x25
    ee3a:	d901      	bls.n	ee40 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    ee3c:	2012      	movs	r0, #18
    ee3e:	bd10      	pop	{r4, pc}
    ee40:	b12a      	cbz	r2, ee4e <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>
    ee42:	7d60      	ldrb	r0, [r4, #21]
    ee44:	b128      	cbz	r0, ee52 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x24>
    ee46:	2801      	cmp	r0, #1
    ee48:	d009      	beq.n	ee5e <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x30>
    ee4a:	201f      	movs	r0, #31
    ee4c:	bd10      	pop	{r4, pc}
    ee4e:	2000      	movs	r0, #0
    ee50:	bd10      	pop	{r4, pc}
    ee52:	4620      	mov	r0, r4
    ee54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ee58:	4611      	mov	r1, r2
    ee5a:	f7f8 b957 	b.w	710c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xa8>
    ee5e:	88a2      	ldrh	r2, [r4, #4]
    ee60:	6949      	ldr	r1, [r1, #20]
    ee62:	f104 0015 	add.w	r0, r4, #21
    ee66:	f7f8 f8fd 	bl	7064 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    ee6a:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    ee6e:	e7ee      	b.n	ee4e <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>

0000ee70 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    ee70:	b530      	push	{r4, r5, lr}
    ee72:	1c42      	adds	r2, r0, #1
    ee74:	428a      	cmp	r2, r1
    ee76:	d004      	beq.n	ee82 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x12>
    ee78:	680a      	ldr	r2, [r1, #0]
    ee7a:	f8c0 2001 	str.w	r2, [r0, #1]
    ee7e:	7909      	ldrb	r1, [r1, #4]
    ee80:	7141      	strb	r1, [r0, #5]
    ee82:	7941      	ldrb	r1, [r0, #5]
    ee84:	f001 011f 	and.w	r1, r1, #31
    ee88:	7141      	strb	r1, [r0, #5]
    ee8a:	2100      	movs	r1, #0
    ee8c:	72c1      	strb	r1, [r0, #11]
    ee8e:	1843      	adds	r3, r0, r1
    ee90:	1c49      	adds	r1, r1, #1
    ee92:	785c      	ldrb	r4, [r3, #1]
    ee94:	b2c9      	uxtb	r1, r1
    ee96:	f004 0201 	and.w	r2, r4, #1
    ee9a:	0864      	lsrs	r4, r4, #1
    ee9c:	f004 0501 	and.w	r5, r4, #1
    eea0:	4415      	add	r5, r2
    eea2:	0862      	lsrs	r2, r4, #1
    eea4:	f002 0401 	and.w	r4, r2, #1
    eea8:	442c      	add	r4, r5
    eeaa:	0852      	lsrs	r2, r2, #1
    eeac:	f002 0501 	and.w	r5, r2, #1
    eeb0:	442c      	add	r4, r5
    eeb2:	0852      	lsrs	r2, r2, #1
    eeb4:	f002 0501 	and.w	r5, r2, #1
    eeb8:	442c      	add	r4, r5
    eeba:	0852      	lsrs	r2, r2, #1
    eebc:	f002 0501 	and.w	r5, r2, #1
    eec0:	442c      	add	r4, r5
    eec2:	0852      	lsrs	r2, r2, #1
    eec4:	f002 0501 	and.w	r5, r2, #1
    eec8:	442c      	add	r4, r5
    eeca:	eb04 0252 	add.w	r2, r4, r2, lsr #1
    eece:	719a      	strb	r2, [r3, #6]
    eed0:	7ac3      	ldrb	r3, [r0, #11]
    eed2:	2905      	cmp	r1, #5
    eed4:	441a      	add	r2, r3
    eed6:	72c2      	strb	r2, [r0, #11]
    eed8:	d3d9      	bcc.n	ee8e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x1e>
    eeda:	bd30      	pop	{r4, r5, pc}
    eedc:	b570      	push	{r4, r5, r6, lr}
    eede:	f8d0 201f 	ldr.w	r2, [r0, #31]
    eee2:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
    eee6:	f012 0fff 	tst.w	r2, #255	; 0xff
    eeea:	f023 031f 	bic.w	r3, r3, #31
    eeee:	d108      	bne.n	ef02 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    eef0:	f3c2 2407 	ubfx	r4, r2, #8, #8
    eef4:	b92c      	cbnz	r4, ef02 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    eef6:	f3c2 4407 	ubfx	r4, r2, #16, #8
    eefa:	b914      	cbnz	r4, ef02 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    eefc:	0e12      	lsrs	r2, r2, #24
    eefe:	d100      	bne.n	ef02 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    ef00:	b35b      	cbz	r3, ef5a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    ef02:	f8b0 2019 	ldrh.w	r2, [r0, #25]
    ef06:	f8b0 501b 	ldrh.w	r5, [r0, #27]
    ef0a:	f8b0 4017 	ldrh.w	r4, [r0, #23]
    ef0e:	7d83      	ldrb	r3, [r0, #22]
    ef10:	b141      	cbz	r1, ef24 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb4>
    ef12:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    ef16:	d905      	bls.n	ef24 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb4>
    ef18:	f640 5107 	movw	r1, #3335	; 0xd07
    ef1c:	428a      	cmp	r2, r1
    ef1e:	d801      	bhi.n	ef24 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb4>
    ef20:	2101      	movs	r1, #1
    ef22:	e000      	b.n	ef26 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb6>
    ef24:	2100      	movs	r1, #0
    ef26:	7846      	ldrb	r6, [r0, #1]
    ef28:	2e22      	cmp	r6, #34	; 0x22
    ef2a:	d116      	bne.n	ef5a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    ef2c:	b959      	cbnz	r1, ef46 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xd6>
    ef2e:	1f91      	subs	r1, r2, #6
    ef30:	f640 467a 	movw	r6, #3194	; 0xc7a
    ef34:	42b1      	cmp	r1, r6
    ef36:	d810      	bhi.n	ef5a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    ef38:	b17b      	cbz	r3, ef5a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    ef3a:	2b08      	cmp	r3, #8
    ef3c:	d80d      	bhi.n	ef5a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    ef3e:	4293      	cmp	r3, r2
    ef40:	d20b      	bcs.n	ef5a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    ef42:	4294      	cmp	r4, r2
    ef44:	d809      	bhi.n	ef5a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    ef46:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    ef4a:	d206      	bcs.n	ef5a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    ef4c:	f8b0 001d 	ldrh.w	r0, [r0, #29]
    ef50:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
    ef54:	d801      	bhi.n	ef5a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    ef56:	2001      	movs	r0, #1
    ef58:	bd70      	pop	{r4, r5, r6, pc}
    ef5a:	2000      	movs	r0, #0
    ef5c:	bd70      	pop	{r4, r5, r6, pc}

0000ef5e <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>:
    ef5e:	b570      	push	{r4, r5, r6, lr}
    ef60:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    ef64:	f8b0 5009 	ldrh.w	r5, [r0, #9]
    ef68:	f830 4f05 	ldrh.w	r4, [r0, #5]!
    ef6c:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    ef70:	88c0      	ldrh	r0, [r0, #6]
    ef72:	b131      	cbz	r1, ef82 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x24>
    ef74:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    ef78:	d903      	bls.n	ef82 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x24>
    ef7a:	f640 5107 	movw	r1, #3335	; 0xd07
    ef7e:	428a      	cmp	r2, r1
    ef80:	d90b      	bls.n	ef9a <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x3c>
    ef82:	1f91      	subs	r1, r2, #6
    ef84:	f640 467a 	movw	r6, #3194	; 0xc7a
    ef88:	42b1      	cmp	r1, r6
    ef8a:	d80e      	bhi.n	efaa <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    ef8c:	b16b      	cbz	r3, efaa <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    ef8e:	2b08      	cmp	r3, #8
    ef90:	d80b      	bhi.n	efaa <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    ef92:	4293      	cmp	r3, r2
    ef94:	d209      	bcs.n	efaa <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    ef96:	4294      	cmp	r4, r2
    ef98:	d807      	bhi.n	efaa <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    ef9a:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    ef9e:	d204      	bcs.n	efaa <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    efa0:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
    efa4:	d801      	bhi.n	efaa <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    efa6:	2001      	movs	r0, #1
    efa8:	bd70      	pop	{r4, r5, r6, pc}
    efaa:	2000      	movs	r0, #0
    efac:	bd70      	pop	{r4, r5, r6, pc}

0000efae <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>:
    efae:	6842      	ldr	r2, [r0, #4]
    efb0:	600a      	str	r2, [r1, #0]
    efb2:	7a00      	ldrb	r0, [r0, #8]
    efb4:	7108      	strb	r0, [r1, #4]
    efb6:	4770      	bx	lr

0000efb8 <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>:
    efb8:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    efbc:	4770      	bx	lr

0000efbe <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>:
    efbe:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    efc2:	4770      	bx	lr

0000efc4 <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>:
    efc4:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    efc8:	4770      	bx	lr

0000efca <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>:
    efca:	f8b0 000b 	ldrh.w	r0, [r0, #11]
    efce:	4770      	bx	lr

0000efd0 <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>:
    efd0:	8980      	ldrh	r0, [r0, #12]
    efd2:	8008      	strh	r0, [r1, #0]
    efd4:	4770      	bx	lr

0000efd6 <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>:
    efd6:	f8d0 0016 	ldr.w	r0, [r0, #22]
    efda:	6008      	str	r0, [r1, #0]
    efdc:	4770      	bx	lr

0000efde <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>:
    efde:	6842      	ldr	r2, [r0, #4]
    efe0:	600a      	str	r2, [r1, #0]
    efe2:	6880      	ldr	r0, [r0, #8]
    efe4:	6048      	str	r0, [r1, #4]
    efe6:	4770      	bx	lr

0000efe8 <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>:
    efe8:	f850 2f0e 	ldr.w	r2, [r0, #14]!
    efec:	600a      	str	r2, [r1, #0]
    efee:	6840      	ldr	r0, [r0, #4]
    eff0:	6048      	str	r0, [r1, #4]
    eff2:	4770      	bx	lr

0000eff4 <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>:
    eff4:	6842      	ldr	r2, [r0, #4]
    eff6:	600a      	str	r2, [r1, #0]
    eff8:	6880      	ldr	r0, [r0, #8]
    effa:	6048      	str	r0, [r1, #4]
    effc:	4770      	bx	lr

0000effe <sym_KIWKQDEBPWXHISYFTEC7I32RP3MHD6CJEPVDW6I>:
    effe:	6842      	ldr	r2, [r0, #4]
    f000:	600a      	str	r2, [r1, #0]
    f002:	6880      	ldr	r0, [r0, #8]
    f004:	6048      	str	r0, [r1, #4]
    f006:	4770      	bx	lr

0000f008 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>:
    f008:	7800      	ldrb	r0, [r0, #0]
    f00a:	f000 0003 	and.w	r0, r0, #3
    f00e:	4770      	bx	lr

0000f010 <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>:
    f010:	7900      	ldrb	r0, [r0, #4]
    f012:	4770      	bx	lr

0000f014 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>:
    f014:	8880      	ldrh	r0, [r0, #4]
    f016:	4770      	bx	lr

0000f018 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>:
    f018:	88c0      	ldrh	r0, [r0, #6]
    f01a:	4770      	bx	lr

0000f01c <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>:
    f01c:	8900      	ldrh	r0, [r0, #8]
    f01e:	4770      	bx	lr

0000f020 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>:
    f020:	8940      	ldrh	r0, [r0, #10]
    f022:	4770      	bx	lr

0000f024 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>:
    f024:	88c0      	ldrh	r0, [r0, #6]
    f026:	4770      	bx	lr

0000f028 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>:
    f028:	7940      	ldrb	r0, [r0, #5]
    f02a:	4770      	bx	lr

0000f02c <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>:
    f02c:	7900      	ldrb	r0, [r0, #4]
    f02e:	4770      	bx	lr

0000f030 <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>:
    f030:	7900      	ldrb	r0, [r0, #4]
    f032:	4770      	bx	lr

0000f034 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>:
    f034:	8901      	ldrh	r1, [r0, #8]
    f036:	291b      	cmp	r1, #27
    f038:	d30c      	bcc.n	f054 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    f03a:	8941      	ldrh	r1, [r0, #10]
    f03c:	f44f 72a4 	mov.w	r2, #328	; 0x148
    f040:	4291      	cmp	r1, r2
    f042:	d307      	bcc.n	f054 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    f044:	8881      	ldrh	r1, [r0, #4]
    f046:	291b      	cmp	r1, #27
    f048:	d304      	bcc.n	f054 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    f04a:	88c0      	ldrh	r0, [r0, #6]
    f04c:	4290      	cmp	r0, r2
    f04e:	d301      	bcc.n	f054 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    f050:	2001      	movs	r0, #1
    f052:	4770      	bx	lr
    f054:	2000      	movs	r0, #0
    f056:	4770      	bx	lr

0000f058 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>:
    f058:	b510      	push	{r4, lr}
    f05a:	29fb      	cmp	r1, #251	; 0xfb
    f05c:	d904      	bls.n	f068 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA+0x10>
    f05e:	f240 5193 	movw	r1, #1427	; 0x593
    f062:	202a      	movs	r0, #42	; 0x2a
    f064:	f7f6 f884 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f068:	7041      	strb	r1, [r0, #1]
    f06a:	bd10      	pop	{r4, pc}

0000f06c <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>:
    f06c:	7901      	ldrb	r1, [r0, #4]
    f06e:	0749      	lsls	r1, r1, #29
    f070:	d004      	beq.n	f07c <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    f072:	7940      	ldrb	r0, [r0, #5]
    f074:	0740      	lsls	r0, r0, #29
    f076:	d001      	beq.n	f07c <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    f078:	2001      	movs	r0, #1
    f07a:	4770      	bx	lr
    f07c:	2000      	movs	r0, #0
    f07e:	4770      	bx	lr

0000f080 <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>:
    f080:	7900      	ldrb	r0, [r0, #4]
    f082:	4770      	bx	lr

0000f084 <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>:
    f084:	7940      	ldrb	r0, [r0, #5]
    f086:	4770      	bx	lr

0000f088 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>:
    f088:	7101      	strb	r1, [r0, #4]
    f08a:	4770      	bx	lr

0000f08c <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>:
    f08c:	7141      	strb	r1, [r0, #5]
    f08e:	4770      	bx	lr

0000f090 <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>:
    f090:	b510      	push	{r4, lr}
    f092:	2a1b      	cmp	r2, #27
    f094:	d904      	bls.n	f0a0 <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA+0x10>
    f096:	f44f 717b 	mov.w	r1, #1004	; 0x3ec
    f09a:	202a      	movs	r0, #42	; 0x2a
    f09c:	f7f6 f868 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f0a0:	7042      	strb	r2, [r0, #1]
    f0a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f0a6:	1cc0      	adds	r0, r0, #3
    f0a8:	f7fe ba4a 	b.w	d540 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>

0000f0ac <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>:
    f0ac:	6809      	ldr	r1, [r1, #0]
    f0ae:	60c1      	str	r1, [r0, #12]
    f0b0:	4770      	bx	lr

0000f0b2 <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>:
    f0b2:	680a      	ldr	r2, [r1, #0]
    f0b4:	6042      	str	r2, [r0, #4]
    f0b6:	6849      	ldr	r1, [r1, #4]
    f0b8:	6081      	str	r1, [r0, #8]
    f0ba:	4770      	bx	lr

0000f0bc <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>:
    f0bc:	680a      	ldr	r2, [r1, #0]
    f0be:	6042      	str	r2, [r0, #4]
    f0c0:	6849      	ldr	r1, [r1, #4]
    f0c2:	6081      	str	r1, [r0, #8]
    f0c4:	4770      	bx	lr

0000f0c6 <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>:
    f0c6:	680a      	ldr	r2, [r1, #0]
    f0c8:	6042      	str	r2, [r0, #4]
    f0ca:	6849      	ldr	r1, [r1, #4]
    f0cc:	6081      	str	r1, [r0, #8]
    f0ce:	4770      	bx	lr

0000f0d0 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>:
    f0d0:	7802      	ldrb	r2, [r0, #0]
    f0d2:	f001 0103 	and.w	r1, r1, #3
    f0d6:	f022 0203 	bic.w	r2, r2, #3
    f0da:	430a      	orrs	r2, r1
    f0dc:	7002      	strb	r2, [r0, #0]
    f0de:	4770      	bx	lr

0000f0e0 <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>:
    f0e0:	7101      	strb	r1, [r0, #4]
    f0e2:	0a09      	lsrs	r1, r1, #8
    f0e4:	7141      	strb	r1, [r0, #5]
    f0e6:	4770      	bx	lr

0000f0e8 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>:
    f0e8:	7181      	strb	r1, [r0, #6]
    f0ea:	0a09      	lsrs	r1, r1, #8
    f0ec:	71c1      	strb	r1, [r0, #7]
    f0ee:	4770      	bx	lr

0000f0f0 <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>:
    f0f0:	7201      	strb	r1, [r0, #8]
    f0f2:	0a09      	lsrs	r1, r1, #8
    f0f4:	7241      	strb	r1, [r0, #9]
    f0f6:	4770      	bx	lr

0000f0f8 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>:
    f0f8:	7281      	strb	r1, [r0, #10]
    f0fa:	0a09      	lsrs	r1, r1, #8
    f0fc:	72c1      	strb	r1, [r0, #11]
    f0fe:	4770      	bx	lr

0000f100 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>:
    f100:	7802      	ldrb	r2, [r0, #0]
    f102:	f002 020f 	and.w	r2, r2, #15
    f106:	2a03      	cmp	r2, #3
    f108:	d003      	beq.n	f112 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x12>
    f10a:	2a05      	cmp	r2, #5
    f10c:	d104      	bne.n	f118 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x18>
    f10e:	f7ff bee5 	b.w	eedc <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x6c>
    f112:	7840      	ldrb	r0, [r0, #1]
    f114:	280c      	cmp	r0, #12
    f116:	d001      	beq.n	f11c <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x1c>
    f118:	2000      	movs	r0, #0
    f11a:	4770      	bx	lr
    f11c:	2001      	movs	r0, #1
    f11e:	4770      	bx	lr

0000f120 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>:
    f120:	b570      	push	{r4, r5, r6, lr}
    f122:	4614      	mov	r4, r2
    f124:	4605      	mov	r5, r0
    f126:	2a1f      	cmp	r2, #31
    f128:	d903      	bls.n	f132 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I+0x12>
    f12a:	21b2      	movs	r1, #178	; 0xb2
    f12c:	202a      	movs	r0, #42	; 0x2a
    f12e:	f7f6 f81f 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f132:	f105 0009 	add.w	r0, r5, #9
    f136:	f7fe fa03 	bl	d540 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f13a:	1da4      	adds	r4, r4, #6
    f13c:	706c      	strb	r4, [r5, #1]
    f13e:	bd70      	pop	{r4, r5, r6, pc}

0000f140 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>:
    f140:	b510      	push	{r4, lr}
    f142:	7802      	ldrb	r2, [r0, #0]
    f144:	f001 030f 	and.w	r3, r1, #15
    f148:	f022 020f 	bic.w	r2, r2, #15
    f14c:	431a      	orrs	r2, r3
    f14e:	7002      	strb	r2, [r0, #0]
    f150:	2907      	cmp	r1, #7
    f152:	d20c      	bcs.n	f16e <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2e>
    f154:	e8df f001 	tbb	[pc, r1]
    f158:	06040604 	.word	0x06040604
    f15c:	00040804 	.word	0x00040804
    f160:	2106      	movs	r1, #6
    f162:	e002      	b.n	f16a <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    f164:	210c      	movs	r1, #12
    f166:	e000      	b.n	f16a <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    f168:	2122      	movs	r1, #34	; 0x22
    f16a:	7041      	strb	r1, [r0, #1]
    f16c:	bd10      	pop	{r4, pc}
    f16e:	216e      	movs	r1, #110	; 0x6e
    f170:	202a      	movs	r0, #42	; 0x2a
    f172:	f7f5 fffd 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000f176 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>:
    f176:	680a      	ldr	r2, [r1, #0]
    f178:	f840 2f09 	str.w	r2, [r0, #9]!
    f17c:	8889      	ldrh	r1, [r1, #4]
    f17e:	8081      	strh	r1, [r0, #4]
    f180:	4770      	bx	lr

0000f182 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>:
    f182:	7802      	ldrb	r2, [r0, #0]
    f184:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    f188:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    f18c:	7002      	strb	r2, [r0, #0]
    f18e:	4770      	bx	lr

0000f190 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>:
    f190:	680a      	ldr	r2, [r1, #0]
    f192:	f840 2f03 	str.w	r2, [r0, #3]!
    f196:	8889      	ldrh	r1, [r1, #4]
    f198:	8081      	strh	r1, [r0, #4]
    f19a:	4770      	bx	lr

0000f19c <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>:
    f19c:	7802      	ldrb	r2, [r0, #0]
    f19e:	2340      	movs	r3, #64	; 0x40
    f1a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    f1a4:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    f1a8:	430a      	orrs	r2, r1
    f1aa:	7002      	strb	r2, [r0, #0]
    f1ac:	4770      	bx	lr

0000f1ae <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>:
    f1ae:	b570      	push	{r4, r5, r6, lr}
    f1b0:	4614      	mov	r4, r2
    f1b2:	4605      	mov	r5, r0
    f1b4:	2a1f      	cmp	r2, #31
    f1b6:	d903      	bls.n	f1c0 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY+0x12>
    f1b8:	21d4      	movs	r1, #212	; 0xd4
    f1ba:	202a      	movs	r0, #42	; 0x2a
    f1bc:	f7f5 ffd8 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f1c0:	f105 0009 	add.w	r0, r5, #9
    f1c4:	f7fe f9bc 	bl	d540 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f1c8:	1da4      	adds	r4, r4, #6
    f1ca:	706c      	strb	r4, [r5, #1]
    f1cc:	bd70      	pop	{r4, r5, r6, pc}

0000f1ce <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>:
    f1ce:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    f1d2:	4604      	mov	r4, r0
    f1d4:	2000      	movs	r0, #0
    f1d6:	f7f6 f9b5 	bl	5544 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    f1da:	2600      	movs	r6, #0
    f1dc:	4605      	mov	r5, r0
    f1de:	4637      	mov	r7, r6
    f1e0:	e00e      	b.n	f200 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x32>
    f1e2:	8820      	ldrh	r0, [r4, #0]
    f1e4:	1c40      	adds	r0, r0, #1
    f1e6:	b280      	uxth	r0, r0
    f1e8:	8020      	strh	r0, [r4, #0]
    f1ea:	42a8      	cmp	r0, r5
    f1ec:	d300      	bcc.n	f1f0 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x22>
    f1ee:	8027      	strh	r7, [r4, #0]
    f1f0:	8820      	ldrh	r0, [r4, #0]
    f1f2:	4669      	mov	r1, sp
    f1f4:	f7ff fc6f 	bl	ead6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f1f8:	2800      	cmp	r0, #0
    f1fa:	d007      	beq.n	f20c <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x3e>
    f1fc:	1c76      	adds	r6, r6, #1
    f1fe:	b2f6      	uxtb	r6, r6
    f200:	42ae      	cmp	r6, r5
    f202:	d3ee      	bcc.n	f1e2 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x14>
    f204:	f64f 70ff 	movw	r0, #65535	; 0xffff
    f208:	8020      	strh	r0, [r4, #0]
    f20a:	2012      	movs	r0, #18
    f20c:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

0000f210 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>:
    f210:	6841      	ldr	r1, [r0, #4]
    f212:	2200      	movs	r2, #0
    f214:	f891 3112 	ldrb.w	r3, [r1, #274]	; 0x112
    f218:	2b00      	cmp	r3, #0
    f21a:	d004      	beq.n	f226 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x16>
    f21c:	f881 2112 	strb.w	r2, [r1, #274]	; 0x112
    f220:	6840      	ldr	r0, [r0, #4]
    f222:	f000 bc73 	b.w	fb0c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
    f226:	4770      	bx	lr

0000f228 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    f228:	b510      	push	{r4, lr}
    f22a:	7901      	ldrb	r1, [r0, #4]
    f22c:	b119      	cbz	r1, f236 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    f22e:	2901      	cmp	r1, #1
    f230:	d006      	beq.n	f240 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    f232:	2000      	movs	r0, #0
    f234:	bd10      	pop	{r4, pc}
    f236:	8842      	ldrh	r2, [r0, #2]
    f238:	6883      	ldr	r3, [r0, #8]
    f23a:	8800      	ldrh	r0, [r0, #0]
    f23c:	2102      	movs	r1, #2
    f23e:	e003      	b.n	f248 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    f240:	8842      	ldrh	r2, [r0, #2]
    f242:	6883      	ldr	r3, [r0, #8]
    f244:	8800      	ldrh	r0, [r0, #0]
    f246:	2101      	movs	r1, #1
    f248:	f7f8 f80e 	bl	7268 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x54>
    f24c:	b908      	cbnz	r0, f252 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2a>
    f24e:	f7f8 f861 	bl	7314 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>
    f252:	2001      	movs	r0, #1
    f254:	bd10      	pop	{r4, pc}
    f256:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    f25a:	460e      	mov	r6, r1
    f25c:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    f260:	4617      	mov	r7, r2
    f262:	39ff      	subs	r1, #255	; 0xff
    f264:	d014      	beq.n	f290 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x68>
    f266:	8030      	strh	r0, [r6, #0]
    f268:	2100      	movs	r1, #0
    f26a:	7171      	strb	r1, [r6, #5]
    f26c:	f7f6 fb9a 	bl	59a4 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    f270:	4604      	mov	r4, r0
    f272:	f7fe ffd5 	bl	e220 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    f276:	0005      	movs	r5, r0
    f278:	d00a      	beq.n	f290 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x68>
    f27a:	4620      	mov	r0, r4
    f27c:	4629      	mov	r1, r5
    f27e:	aa01      	add	r2, sp, #4
    f280:	f7fe fff1 	bl	e266 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    f284:	8070      	strh	r0, [r6, #2]
    f286:	b130      	cbz	r0, f296 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x6e>
    f288:	28fb      	cmp	r0, #251	; 0xfb
    f28a:	d906      	bls.n	f29a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x72>
    f28c:	21ae      	movs	r1, #174	; 0xae
    f28e:	e026      	b.n	f2de <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    f290:	2000      	movs	r0, #0
    f292:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    f296:	21ad      	movs	r1, #173	; 0xad
    f298:	e021      	b.n	f2de <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    f29a:	9801      	ldr	r0, [sp, #4]
    f29c:	f7ff feb4 	bl	f008 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>
    f2a0:	2801      	cmp	r0, #1
    f2a2:	d003      	beq.n	f2ac <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x84>
    f2a4:	2802      	cmp	r0, #2
    f2a6:	d001      	beq.n	f2ac <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x84>
    f2a8:	21bd      	movs	r1, #189	; 0xbd
    f2aa:	e018      	b.n	f2de <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    f2ac:	7130      	strb	r0, [r6, #4]
    f2ae:	4629      	mov	r1, r5
    f2b0:	8873      	ldrh	r3, [r6, #2]
    f2b2:	2503      	movs	r5, #3
    f2b4:	4620      	mov	r0, r4
    f2b6:	463a      	mov	r2, r7
    f2b8:	9500      	str	r5, [sp, #0]
    f2ba:	f7fe fe9f 	bl	dffc <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>
    f2be:	4620      	mov	r0, r4
    f2c0:	60b7      	str	r7, [r6, #8]
    f2c2:	f7fe ff5c 	bl	e17e <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    f2c6:	b138      	cbz	r0, f2d8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb0>
    f2c8:	2100      	movs	r1, #0
    f2ca:	4620      	mov	r0, r4
    f2cc:	460a      	mov	r2, r1
    f2ce:	f7ff f8a8 	bl	e422 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    f2d2:	b118      	cbz	r0, f2dc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb4>
    f2d4:	2001      	movs	r0, #1
    f2d6:	e7dc      	b.n	f292 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x6a>
    f2d8:	21cd      	movs	r1, #205	; 0xcd
    f2da:	e000      	b.n	f2de <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    f2dc:	21d2      	movs	r1, #210	; 0xd2
    f2de:	202b      	movs	r0, #43	; 0x2b
    f2e0:	f7f5 ff46 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000f2e4 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    f2e4:	f7f8 b9ce 	b.w	7684 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x28c>
    f2e8:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    f2ec:	4604      	mov	r4, r0
    f2ee:	2000      	movs	r0, #0
    f2f0:	f7f6 f928 	bl	5544 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    f2f4:	4605      	mov	r5, r0
    f2f6:	2001      	movs	r0, #1
    f2f8:	f7f6 f924 	bl	5544 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    f2fc:	4428      	add	r0, r5
    f2fe:	2600      	movs	r6, #0
    f300:	b2c7      	uxtb	r7, r0
    f302:	46b0      	mov	r8, r6
    f304:	e017      	b.n	f336 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x52>
    f306:	8820      	ldrh	r0, [r4, #0]
    f308:	1c40      	adds	r0, r0, #1
    f30a:	b280      	uxth	r0, r0
    f30c:	8020      	strh	r0, [r4, #0]
    f30e:	42b8      	cmp	r0, r7
    f310:	d302      	bcc.n	f318 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x34>
    f312:	4640      	mov	r0, r8
    f314:	f8a4 8000 	strh.w	r8, [r4]
    f318:	b280      	uxth	r0, r0
    f31a:	42a8      	cmp	r0, r5
    f31c:	d304      	bcc.n	f328 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x44>
    f31e:	42b8      	cmp	r0, r7
    f320:	d202      	bcs.n	f328 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x44>
    f322:	2000      	movs	r0, #0
    f324:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    f328:	4669      	mov	r1, sp
    f32a:	f7ff fbd4 	bl	ead6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f32e:	2800      	cmp	r0, #0
    f330:	d0f8      	beq.n	f324 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x40>
    f332:	1c76      	adds	r6, r6, #1
    f334:	b2f6      	uxtb	r6, r6
    f336:	42be      	cmp	r6, r7
    f338:	d3e5      	bcc.n	f306 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x22>
    f33a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    f33e:	8020      	strh	r0, [r4, #0]
    f340:	2012      	movs	r0, #18
    f342:	e7ef      	b.n	f324 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x40>

0000f344 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    f344:	b570      	push	{r4, r5, r6, lr}
    f346:	8050      	strh	r0, [r2, #2]
    f348:	890c      	ldrh	r4, [r1, #8]
    f34a:	8094      	strh	r4, [r2, #4]
    f34c:	898b      	ldrh	r3, [r1, #12]
    f34e:	80d3      	strh	r3, [r2, #6]
    f350:	8948      	ldrh	r0, [r1, #10]
    f352:	8110      	strh	r0, [r2, #8]
    f354:	89cd      	ldrh	r5, [r1, #14]
    f356:	8155      	strh	r5, [r2, #10]
    f358:	8dce      	ldrh	r6, [r1, #46]	; 0x2e
    f35a:	42ae      	cmp	r6, r5
    f35c:	d108      	bne.n	f370 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    f35e:	8d4d      	ldrh	r5, [r1, #42]	; 0x2a
    f360:	4285      	cmp	r5, r0
    f362:	d105      	bne.n	f370 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    f364:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
    f366:	429d      	cmp	r5, r3
    f368:	d102      	bne.n	f370 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    f36a:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
    f36c:	42a3      	cmp	r3, r4
    f36e:	d001      	beq.n	f374 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x30>
    f370:	2301      	movs	r3, #1
    f372:	e000      	b.n	f376 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    f374:	2300      	movs	r3, #0
    f376:	7313      	strb	r3, [r2, #12]
    f378:	8548      	strh	r0, [r1, #42]	; 0x2a
    f37a:	8950      	ldrh	r0, [r2, #10]
    f37c:	85c8      	strh	r0, [r1, #46]	; 0x2e
    f37e:	8890      	ldrh	r0, [r2, #4]
    f380:	8588      	strh	r0, [r1, #44]	; 0x2c
    f382:	88d0      	ldrh	r0, [r2, #6]
    f384:	8608      	strh	r0, [r1, #48]	; 0x30
    f386:	20ff      	movs	r0, #255	; 0xff
    f388:	7010      	strb	r0, [r2, #0]
    f38a:	bd70      	pop	{r4, r5, r6, pc}

0000f38c <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    f38c:	b510      	push	{r4, lr}
    f38e:	888c      	ldrh	r4, [r1, #4]
    f390:	890a      	ldrh	r2, [r1, #8]
    f392:	884b      	ldrh	r3, [r1, #2]
    f394:	88c9      	ldrh	r1, [r1, #6]
    f396:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
    f39a:	f8a0 1050 	strh.w	r1, [r0, #80]	; 0x50
    f39e:	f8a0 404e 	strh.w	r4, [r0, #78]	; 0x4e
    f3a2:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
    f3a6:	bd10      	pop	{r4, pc}

0000f3a8 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    f3a8:	b570      	push	{r4, r5, r6, lr}
    f3aa:	4615      	mov	r5, r2
    f3ac:	460c      	mov	r4, r1
    f3ae:	f000 f8c9 	bl	f544 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    f3b2:	3096      	adds	r0, #150	; 0x96
    f3b4:	4428      	add	r0, r5
    f3b6:	42a0      	cmp	r0, r4
    f3b8:	d801      	bhi.n	f3be <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    f3ba:	1a20      	subs	r0, r4, r0
    f3bc:	bd70      	pop	{r4, r5, r6, pc}
    f3be:	2000      	movs	r0, #0
    f3c0:	bd70      	pop	{r4, r5, r6, pc}

0000f3c2 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    f3c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f3c6:	4604      	mov	r4, r0
    f3c8:	8f47      	ldrh	r7, [r0, #58]	; 0x3a
    f3ca:	8fc6      	ldrh	r6, [r0, #62]	; 0x3e
    f3cc:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
    f3d0:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
    f3d4:	4285      	cmp	r5, r0
    f3d6:	d300      	bcc.n	f3da <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x18>
    f3d8:	4605      	mov	r5, r0
    f3da:	4620      	mov	r0, r4
    f3dc:	f894 106f 	ldrb.w	r1, [r4, #111]	; 0x6f
    f3e0:	f000 f8a0 	bl	f524 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    f3e4:	4601      	mov	r1, r0
    f3e6:	8765      	strh	r5, [r4, #58]	; 0x3a
    f3e8:	87e1      	strh	r1, [r4, #62]	; 0x3e
    f3ea:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
    f3ee:	f104 0030 	add.w	r0, r4, #48	; 0x30
    f3f2:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    f3f6:	4680      	mov	r8, r0
    f3f8:	42aa      	cmp	r2, r5
    f3fa:	d200      	bcs.n	f3fe <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3c>
    f3fc:	462a      	mov	r2, r5
    f3fe:	428b      	cmp	r3, r1
    f400:	d200      	bcs.n	f404 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x42>
    f402:	460b      	mov	r3, r1
    f404:	8202      	strh	r2, [r0, #16]
    f406:	f8a8 3012 	strh.w	r3, [r8, #18]
    f40a:	42bd      	cmp	r5, r7
    f40c:	d101      	bne.n	f412 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x50>
    f40e:	42b1      	cmp	r1, r6
    f410:	d001      	beq.n	f416 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x54>
    f412:	2001      	movs	r0, #1
    f414:	e000      	b.n	f418 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x56>
    f416:	2000      	movs	r0, #0
    f418:	4681      	mov	r9, r0
    f41a:	f8b4 504c 	ldrh.w	r5, [r4, #76]	; 0x4c
    f41e:	f8b4 0046 	ldrh.w	r0, [r4, #70]	; 0x46
    f422:	8f27      	ldrh	r7, [r4, #56]	; 0x38
    f424:	8fa6      	ldrh	r6, [r4, #60]	; 0x3c
    f426:	4285      	cmp	r5, r0
    f428:	d300      	bcc.n	f42c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x6a>
    f42a:	4605      	mov	r5, r0
    f42c:	f894 106e 	ldrb.w	r1, [r4, #110]	; 0x6e
    f430:	4620      	mov	r0, r4
    f432:	f000 f87f 	bl	f534 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x44>
    f436:	f894 1064 	ldrb.w	r1, [r4, #100]	; 0x64
    f43a:	2902      	cmp	r1, #2
    f43c:	d108      	bne.n	f450 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x8e>
    f43e:	42af      	cmp	r7, r5
    f440:	d200      	bcs.n	f444 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x82>
    f442:	463d      	mov	r5, r7
    f444:	4286      	cmp	r6, r0
    f446:	d200      	bcs.n	f44a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x88>
    f448:	4630      	mov	r0, r6
    f44a:	2100      	movs	r1, #0
    f44c:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
    f450:	f8a8 5008 	strh.w	r5, [r8, #8]
    f454:	f8a8 000c 	strh.w	r0, [r8, #12]
    f458:	42bd      	cmp	r5, r7
    f45a:	d101      	bne.n	f460 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9e>
    f45c:	42b0      	cmp	r0, r6
    f45e:	d001      	beq.n	f464 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xa2>
    f460:	2001      	movs	r0, #1
    f462:	e000      	b.n	f466 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xa4>
    f464:	2000      	movs	r0, #0
    f466:	ea40 0009 	orr.w	r0, r0, r9
    f46a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000f46e <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>:
    f46e:	6840      	ldr	r0, [r0, #4]
    f470:	4770      	bx	lr

0000f472 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
    f472:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f476:	4616      	mov	r6, r2
    f478:	460f      	mov	r7, r1
    f47a:	4604      	mov	r4, r0
    f47c:	f000 f862 	bl	f544 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    f480:	4605      	mov	r5, r0
    f482:	463a      	mov	r2, r7
    f484:	6921      	ldr	r1, [r4, #16]
    f486:	6b20      	ldr	r0, [r4, #48]	; 0x30
    f488:	f000 f847 	bl	f51a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2a>
    f48c:	19a9      	adds	r1, r5, r6
    f48e:	4281      	cmp	r1, r0
    f490:	d300      	bcc.n	f494 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY+0x22>
    f492:	4608      	mov	r0, r1
    f494:	6360      	str	r0, [r4, #52]	; 0x34
    f496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f49a <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    f49a:	221b      	movs	r2, #27
    f49c:	8402      	strh	r2, [r0, #32]
    f49e:	8382      	strh	r2, [r0, #28]
    f4a0:	82c2      	strh	r2, [r0, #22]
    f4a2:	8282      	strh	r2, [r0, #20]
    f4a4:	8142      	strh	r2, [r0, #10]
    f4a6:	8202      	strh	r2, [r0, #16]
    f4a8:	8102      	strh	r2, [r0, #8]
    f4aa:	8542      	strh	r2, [r0, #42]	; 0x2a
    f4ac:	8582      	strh	r2, [r0, #44]	; 0x2c
    f4ae:	8482      	strh	r2, [r0, #36]	; 0x24
    f4b0:	2900      	cmp	r1, #0
    f4b2:	d10a      	bne.n	f4ca <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    f4b4:	f44f 71a4 	mov.w	r1, #328	; 0x148
    f4b8:	8441      	strh	r1, [r0, #34]	; 0x22
    f4ba:	83c1      	strh	r1, [r0, #30]
    f4bc:	8341      	strh	r1, [r0, #26]
    f4be:	8301      	strh	r1, [r0, #24]
    f4c0:	81c1      	strh	r1, [r0, #14]
    f4c2:	8241      	strh	r1, [r0, #18]
    f4c4:	8181      	strh	r1, [r0, #12]
    f4c6:	85c1      	strh	r1, [r0, #46]	; 0x2e
    f4c8:	8601      	strh	r1, [r0, #48]	; 0x30
    f4ca:	4770      	bx	lr

0000f4cc <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    f4cc:	6800      	ldr	r0, [r0, #0]
    f4ce:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    f4d2:	4290      	cmp	r0, r2
    f4d4:	d903      	bls.n	f4de <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    f4d6:	1a40      	subs	r0, r0, r1
    f4d8:	389c      	subs	r0, #156	; 0x9c
    f4da:	0840      	lsrs	r0, r0, #1
    f4dc:	4770      	bx	lr
    f4de:	2000      	movs	r0, #0
    f4e0:	4770      	bx	lr

0000f4e2 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    f4e2:	b510      	push	{r4, lr}
    f4e4:	9c02      	ldr	r4, [sp, #8]
    f4e6:	8281      	strh	r1, [r0, #20]
    f4e8:	82c2      	strh	r2, [r0, #22]
    f4ea:	8303      	strh	r3, [r0, #24]
    f4ec:	8344      	strh	r4, [r0, #26]
    f4ee:	bd10      	pop	{r4, pc}

0000f4f0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    f4f0:	8050      	strh	r0, [r2, #2]
    f4f2:	8a88      	ldrh	r0, [r1, #20]
    f4f4:	8090      	strh	r0, [r2, #4]
    f4f6:	8ac8      	ldrh	r0, [r1, #22]
    f4f8:	80d0      	strh	r0, [r2, #6]
    f4fa:	8b08      	ldrh	r0, [r1, #24]
    f4fc:	8110      	strh	r0, [r2, #8]
    f4fe:	8b48      	ldrh	r0, [r1, #26]
    f500:	8150      	strh	r0, [r2, #10]
    f502:	20ff      	movs	r0, #255	; 0xff
    f504:	7010      	strb	r0, [r2, #0]
    f506:	4770      	bx	lr
    f508:	2902      	cmp	r1, #2
    f50a:	d003      	beq.n	f514 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x24>
    f50c:	00c0      	lsls	r0, r0, #3
    f50e:	3070      	adds	r0, #112	; 0x70
    f510:	b280      	uxth	r0, r0
    f512:	4770      	bx	lr
    f514:	0080      	lsls	r0, r0, #2
    f516:	303c      	adds	r0, #60	; 0x3c
    f518:	e7fa      	b.n	f510 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x20>
    f51a:	4288      	cmp	r0, r1
    f51c:	d300      	bcc.n	f520 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x30>
    f51e:	4608      	mov	r0, r1
    f520:	1a80      	subs	r0, r0, r2
    f522:	4770      	bx	lr
    f524:	f8b0 1052 	ldrh.w	r1, [r0, #82]	; 0x52
    f528:	f8b0 0048 	ldrh.w	r0, [r0, #72]	; 0x48
    f52c:	4281      	cmp	r1, r0
    f52e:	d200      	bcs.n	f532 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x42>
    f530:	4608      	mov	r0, r1
    f532:	4770      	bx	lr
    f534:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
    f538:	f8b0 004a 	ldrh.w	r0, [r0, #74]	; 0x4a
    f53c:	4281      	cmp	r1, r0
    f53e:	d200      	bcs.n	f542 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x52>
    f540:	4608      	mov	r0, r1
    f542:	4770      	bx	lr
    f544:	2196      	movs	r1, #150	; 0x96
    f546:	f890 306f 	ldrb.w	r3, [r0, #111]	; 0x6f
    f54a:	f890 206e 	ldrb.w	r2, [r0, #110]	; 0x6e
    f54e:	f000 b800 	b.w	f552 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x62>
    f552:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f556:	460d      	mov	r5, r1
    f558:	4606      	mov	r6, r0
    f55a:	4698      	mov	r8, r3
    f55c:	4617      	mov	r7, r2
    f55e:	8f00      	ldrh	r0, [r0, #56]	; 0x38
    f560:	4611      	mov	r1, r2
    f562:	f7ff ffd1 	bl	f508 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    f566:	4604      	mov	r4, r0
    f568:	4639      	mov	r1, r7
    f56a:	4630      	mov	r0, r6
    f56c:	f7ff ffe2 	bl	f534 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x44>
    f570:	42a0      	cmp	r0, r4
    f572:	d200      	bcs.n	f576 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x86>
    f574:	4604      	mov	r4, r0
    f576:	f8b6 0040 	ldrh.w	r0, [r6, #64]	; 0x40
    f57a:	4641      	mov	r1, r8
    f57c:	f7ff ffc4 	bl	f508 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    f580:	4607      	mov	r7, r0
    f582:	4641      	mov	r1, r8
    f584:	4630      	mov	r0, r6
    f586:	f7ff ffcd 	bl	f524 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    f58a:	42b8      	cmp	r0, r7
    f58c:	d300      	bcc.n	f590 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xa0>
    f58e:	4638      	mov	r0, r7
    f590:	4420      	add	r0, r4
    f592:	4428      	add	r0, r5
    f594:	1d80      	adds	r0, r0, #6
    f596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f59a <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
    f59a:	b510      	push	{r4, lr}
    f59c:	4604      	mov	r4, r0
    f59e:	2108      	movs	r1, #8
    f5a0:	4620      	mov	r0, r4
    f5a2:	f7f5 fe7f 	bl	52a4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    f5a6:	6820      	ldr	r0, [r4, #0]
    f5a8:	2800      	cmp	r0, #0
    f5aa:	d102      	bne.n	f5b2 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x18>
    f5ac:	6860      	ldr	r0, [r4, #4]
    f5ae:	2800      	cmp	r0, #0
    f5b0:	d0f5      	beq.n	f59e <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4>
    f5b2:	bd10      	pop	{r4, pc}
    f5b4:	2801      	cmp	r0, #1
    f5b6:	d102      	bne.n	f5be <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x24>
    f5b8:	7948      	ldrb	r0, [r1, #5]
    f5ba:	0980      	lsrs	r0, r0, #6
    f5bc:	d001      	beq.n	f5c2 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x28>
    f5be:	2000      	movs	r0, #0
    f5c0:	4770      	bx	lr
    f5c2:	2001      	movs	r0, #1
    f5c4:	4770      	bx	lr
    f5c6:	2801      	cmp	r0, #1
    f5c8:	d106      	bne.n	f5d8 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x3e>
    f5ca:	7948      	ldrb	r0, [r1, #5]
    f5cc:	2101      	movs	r1, #1
    f5ce:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    f5d2:	d101      	bne.n	f5d8 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x3e>
    f5d4:	2001      	movs	r0, #1
    f5d6:	4770      	bx	lr
    f5d8:	2000      	movs	r0, #0
    f5da:	4770      	bx	lr
    f5dc:	2802      	cmp	r0, #2
    f5de:	d003      	beq.n	f5e8 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4e>
    f5e0:	2803      	cmp	r0, #3
    f5e2:	d001      	beq.n	f5e8 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4e>
    f5e4:	2000      	movs	r0, #0
    f5e6:	4770      	bx	lr
    f5e8:	2001      	movs	r0, #1
    f5ea:	4770      	bx	lr

0000f5ec <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
    f5ec:	b510      	push	{r4, lr}
    f5ee:	4604      	mov	r4, r0
    f5f0:	7c00      	ldrb	r0, [r0, #16]
    f5f2:	f7ff fff3 	bl	f5dc <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
    f5f6:	b148      	cbz	r0, f60c <__kernel_ram_size+0x1c>
    f5f8:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
    f5fc:	f104 0150 	add.w	r1, r4, #80	; 0x50
    f600:	f7ff fa26 	bl	ea50 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    f604:	2808      	cmp	r0, #8
    f606:	d001      	beq.n	f60c <__kernel_ram_size+0x1c>
    f608:	2001      	movs	r0, #1
    f60a:	bd10      	pop	{r4, pc}
    f60c:	7c20      	ldrb	r0, [r4, #16]
    f60e:	b118      	cbz	r0, f618 <__kernel_ram_size+0x28>
    f610:	2802      	cmp	r0, #2
    f612:	d001      	beq.n	f618 <__kernel_ram_size+0x28>
    f614:	7de0      	ldrb	r0, [r4, #23]
    f616:	bd10      	pop	{r4, pc}
    f618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f61c:	2000      	movs	r0, #0
    f61e:	f7f6 bc79 	b.w	5f14 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>

0000f622 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>:
    f622:	b508      	push	{r3, lr}
    f624:	f890 1064 	ldrb.w	r1, [r0, #100]	; 0x64
    f628:	f88d 1000 	strb.w	r1, [sp]
    f62c:	9900      	ldr	r1, [sp, #0]
    f62e:	9100      	str	r1, [sp, #0]
    f630:	f89d 1000 	ldrb.w	r1, [sp]
    f634:	b109      	cbz	r1, f63a <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x18>
    f636:	2001      	movs	r0, #1
    f638:	bd08      	pop	{r3, pc}
    f63a:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    f63e:	f88d 0000 	strb.w	r0, [sp]
    f642:	9800      	ldr	r0, [sp, #0]
    f644:	9000      	str	r0, [sp, #0]
    f646:	f89d 0000 	ldrb.w	r0, [sp]
    f64a:	2000      	movs	r0, #0
    f64c:	bd08      	pop	{r3, pc}

0000f64e <sym_2ORNMU44KG57RJ5GYPW4FCTEFWDXBHWXYAE3J6I>:
    f64e:	20ff      	movs	r0, #255	; 0xff
    f650:	7008      	strb	r0, [r1, #0]
    f652:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
    f654:	f7ff b90d 	b.w	e872 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>

0000f658 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>:
    f658:	b51c      	push	{r2, r3, r4, lr}
    f65a:	4604      	mov	r4, r0
    f65c:	22d4      	movs	r2, #212	; 0xd4
    f65e:	2100      	movs	r1, #0
    f660:	f7fd ffe8 	bl	d634 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    f664:	20ff      	movs	r0, #255	; 0xff
    f666:	7020      	strb	r0, [r4, #0]
    f668:	207f      	movs	r0, #127	; 0x7f
    f66a:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    f66e:	2013      	movs	r0, #19
    f670:	8060      	strh	r0, [r4, #2]
    f672:	f7f6 fa57 	bl	5b24 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>
    f676:	4601      	mov	r1, r0
    f678:	62e0      	str	r0, [r4, #44]	; 0x2c
    f67a:	2200      	movs	r2, #0
    f67c:	4668      	mov	r0, sp
    f67e:	f7ff f862 	bl	e746 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    f682:	2200      	movs	r2, #0
    f684:	2101      	movs	r1, #1
    f686:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f688:	f7ff f8d3 	bl	e832 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    f68c:	2204      	movs	r2, #4
    f68e:	4668      	mov	r0, sp
    f690:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    f692:	f7ff f858 	bl	e746 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    f696:	2200      	movs	r2, #0
    f698:	4611      	mov	r1, r2
    f69a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f69c:	f7ff f8c9 	bl	e832 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    f6a0:	2000      	movs	r0, #0
    f6a2:	73a0      	strb	r0, [r4, #14]
    f6a4:	f104 0020 	add.w	r0, r4, #32
    f6a8:	e8bd 401c 	ldmia.w	sp!, {r2, r3, r4, lr}
    f6ac:	f000 b96e 	b.w	f98c <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>

0000f6b0 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
    f6b0:	7880      	ldrb	r0, [r0, #2]
    f6b2:	f3c0 0080 	ubfx	r0, r0, #2, #1
    f6b6:	b108      	cbz	r0, f6bc <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0xc>
    f6b8:	2000      	movs	r0, #0
    f6ba:	4770      	bx	lr
    f6bc:	201f      	movs	r0, #31
    f6be:	4770      	bx	lr

0000f6c0 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>:
    f6c0:	f7f8 bd5e 	b.w	8180 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x180>

0000f6c4 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
    f6c4:	6880      	ldr	r0, [r0, #8]
    f6c6:	4770      	bx	lr

0000f6c8 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
    f6c8:	2001      	movs	r0, #1
    f6ca:	4770      	bx	lr

0000f6cc <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
    f6cc:	b510      	push	{r4, lr}
    f6ce:	4604      	mov	r4, r0
    f6d0:	3020      	adds	r0, #32
    f6d2:	f000 f91b 	bl	f90c <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    f6d6:	8861      	ldrh	r1, [r4, #2]
    f6d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f6dc:	2228      	movs	r2, #40	; 0x28
    f6de:	f7f8 bf2b 	b.w	8538 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>

0000f6e2 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
    f6e2:	2200      	movs	r2, #0
    f6e4:	6282      	str	r2, [r0, #40]	; 0x28
    f6e6:	8843      	ldrh	r3, [r0, #2]
    f6e8:	2b1d      	cmp	r3, #29
    f6ea:	d001      	beq.n	f6f0 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y+0xe>
    f6ec:	7341      	strb	r1, [r0, #13]
    f6ee:	4770      	bx	lr
    f6f0:	7342      	strb	r2, [r0, #13]
    f6f2:	4770      	bx	lr

0000f6f4 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>:
    f6f4:	b510      	push	{r4, lr}
    f6f6:	2400      	movs	r4, #0
    f6f8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    f6fa:	f7ff f888 	bl	e80e <sym_SYX5A4D5YT7FQ4PORL5PYZ5T6BOBVEZRWNZWOOA>
    f6fe:	b100      	cbz	r0, f702 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0xe>
    f700:	2001      	movs	r0, #1
    f702:	4384      	bics	r4, r0
    f704:	f084 0001 	eor.w	r0, r4, #1
    f708:	bd10      	pop	{r4, pc}

0000f70a <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
    f70a:	2000      	movs	r0, #0
    f70c:	4770      	bx	lr

0000f70e <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
    f70e:	7880      	ldrb	r0, [r0, #2]
    f710:	f000 0001 	and.w	r0, r0, #1
    f714:	4770      	bx	lr

0000f716 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
    f716:	7880      	ldrb	r0, [r0, #2]
    f718:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    f71c:	4770      	bx	lr

0000f71e <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
    f71e:	2001      	movs	r0, #1
    f720:	4770      	bx	lr

0000f722 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
    f722:	7880      	ldrb	r0, [r0, #2]
    f724:	f3c0 0040 	ubfx	r0, r0, #1, #1
    f728:	4770      	bx	lr

0000f72a <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
    f72a:	f990 000e 	ldrsb.w	r0, [r0, #14]
    f72e:	4770      	bx	lr

0000f730 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
    f730:	7800      	ldrb	r0, [r0, #0]
    f732:	28ff      	cmp	r0, #255	; 0xff
    f734:	d001      	beq.n	f73a <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ+0xa>
    f736:	2001      	movs	r0, #1
    f738:	4770      	bx	lr
    f73a:	2000      	movs	r0, #0
    f73c:	4770      	bx	lr

0000f73e <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>:
    f73e:	680a      	ldr	r2, [r1, #0]
    f740:	f840 2f11 	str.w	r2, [r0, #17]!
    f744:	8889      	ldrh	r1, [r1, #4]
    f746:	8081      	strh	r1, [r0, #4]
    f748:	2101      	movs	r1, #1
    f74a:	7181      	strb	r1, [r0, #6]
    f74c:	4770      	bx	lr

0000f74e <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
    f74e:	7b00      	ldrb	r0, [r0, #12]
    f750:	4770      	bx	lr

0000f752 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
    f752:	2001      	movs	r0, #1
    f754:	4770      	bx	lr

0000f756 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
    f756:	61c1      	str	r1, [r0, #28]
    f758:	f890 2048 	ldrb.w	r2, [r0, #72]	; 0x48
    f75c:	724a      	strb	r2, [r1, #9]
    f75e:	f8d0 2049 	ldr.w	r2, [r0, #73]	; 0x49
    f762:	f8c1 200a 	str.w	r2, [r1, #10]
    f766:	f8b0 004d 	ldrh.w	r0, [r0, #77]	; 0x4d
    f76a:	81c8      	strh	r0, [r1, #14]
    f76c:	4770      	bx	lr

0000f76e <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
    f76e:	f880 1060 	strb.w	r1, [r0, #96]	; 0x60
    f772:	4770      	bx	lr

0000f774 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
    f774:	b510      	push	{r4, lr}
    f776:	4604      	mov	r4, r0
    f778:	7880      	ldrb	r0, [r0, #2]
    f77a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    f77e:	b140      	cbz	r0, f792 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1e>
    f780:	233c      	movs	r3, #60	; 0x3c
    f782:	22ff      	movs	r2, #255	; 0xff
    f784:	4620      	mov	r0, r4
    f786:	69e1      	ldr	r1, [r4, #28]
    f788:	f7f8 fd26 	bl	81d8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d8>
    f78c:	20ff      	movs	r0, #255	; 0xff
    f78e:	f884 0064 	strb.w	r0, [r4, #100]	; 0x64
    f792:	78a0      	ldrb	r0, [r4, #2]
    f794:	07c0      	lsls	r0, r0, #31
    f796:	f7f7 fe21 	bl	73dc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    f79a:	2001      	movs	r0, #1
    f79c:	f884 0061 	strb.w	r0, [r4, #97]	; 0x61
    f7a0:	bd10      	pop	{r4, pc}

0000f7a2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
    f7a2:	7bc0      	ldrb	r0, [r0, #15]
    f7a4:	2800      	cmp	r0, #0
    f7a6:	d000      	beq.n	f7aa <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8>
    f7a8:	2001      	movs	r0, #1
    f7aa:	4770      	bx	lr
    f7ac:	b510      	push	{r4, lr}
    f7ae:	f7ff f94f 	bl	ea50 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    f7b2:	4604      	mov	r4, r0
    f7b4:	f7f7 fa58 	bl	6c68 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    f7b8:	b138      	cbz	r0, f7ca <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x28>
    f7ba:	4620      	mov	r0, r4
    f7bc:	f7f7 f98c 	bl	6ad8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    f7c0:	b118      	cbz	r0, f7ca <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x28>
    f7c2:	2110      	movs	r1, #16
    f7c4:	f7ff fb24 	bl	ee10 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    f7c8:	b108      	cbz	r0, f7ce <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2c>
    f7ca:	2000      	movs	r0, #0
    f7cc:	bd10      	pop	{r4, pc}
    f7ce:	2001      	movs	r0, #1
    f7d0:	bd10      	pop	{r4, pc}
    f7d2:	2101      	movs	r1, #1
    f7d4:	f7f8 b95c 	b.w	7a90 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    f7d8:	2101      	movs	r1, #1
    f7da:	f7f8 b959 	b.w	7a90 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    f7de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f7e2:	4604      	mov	r4, r0
    f7e4:	2700      	movs	r7, #0
    f7e6:	704f      	strb	r7, [r1, #1]
    f7e8:	2011      	movs	r0, #17
    f7ea:	460d      	mov	r5, r1
    f7ec:	7008      	strb	r0, [r1, #0]
    f7ee:	2220      	movs	r2, #32
    f7f0:	f104 0166 	add.w	r1, r4, #102	; 0x66
    f7f4:	1d28      	adds	r0, r5, #4
    f7f6:	f7fd fea3 	bl	d540 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f7fa:	2601      	movs	r6, #1
    f7fc:	722e      	strb	r6, [r5, #8]
    f7fe:	f884 7064 	strb.w	r7, [r4, #100]	; 0x64
    f802:	7928      	ldrb	r0, [r5, #4]
    f804:	2800      	cmp	r0, #0
    f806:	d112      	bne.n	f82e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8c>
    f808:	88e8      	ldrh	r0, [r5, #6]
    f80a:	f8a4 0090 	strh.w	r0, [r4, #144]	; 0x90
    f80e:	69e0      	ldr	r0, [r4, #28]
    f810:	f890 108d 	ldrb.w	r1, [r0, #141]	; 0x8d
    f814:	f884 1092 	strb.w	r1, [r4, #146]	; 0x92
    f818:	21ff      	movs	r1, #255	; 0xff
    f81a:	f884 108e 	strb.w	r1, [r4, #142]	; 0x8e
    f81e:	8800      	ldrh	r0, [r0, #0]
    f820:	f7f6 f8c0 	bl	59a4 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    f824:	f7fe fdaf 	bl	e386 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    f828:	69e0      	ldr	r0, [r4, #28]
    f82a:	f880 6078 	strb.w	r6, [r0, #120]	; 0x78
    f82e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f836:	4604      	mov	r4, r0
    f838:	460f      	mov	r7, r1
    f83a:	7e40      	ldrb	r0, [r0, #25]
    f83c:	f7f7 f90c 	bl	6a58 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    f840:	4606      	mov	r6, r0
    f842:	7e20      	ldrb	r0, [r4, #24]
    f844:	f104 0549 	add.w	r5, r4, #73	; 0x49
    f848:	b120      	cbz	r0, f854 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb2>
    f84a:	b11e      	cbz	r6, f854 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb2>
    f84c:	7e60      	ldrb	r0, [r4, #25]
    f84e:	f7f7 f8f7 	bl	6a40 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    f852:	b1a0      	cbz	r0, f87e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xdc>
    f854:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    f858:	2800      	cmp	r0, #0
    f85a:	d024      	beq.n	f8a6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x104>
    f85c:	7ea0      	ldrb	r0, [r4, #26]
    f85e:	2800      	cmp	r0, #0
    f860:	d021      	beq.n	f8a6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x104>
    f862:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    f866:	4629      	mov	r1, r5
    f868:	f7ff fead 	bl	f5c6 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    f86c:	b1a8      	cbz	r0, f89a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf8>
    f86e:	f7f7 f8e3 	bl	6a38 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    f872:	463a      	mov	r2, r7
    f874:	4629      	mov	r1, r5
    f876:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f87a:	f7ff b881 	b.w	e980 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    f87e:	2001      	movs	r0, #1
    f880:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
    f884:	463a      	mov	r2, r7
    f886:	4629      	mov	r1, r5
    f888:	4630      	mov	r0, r6
    f88a:	f7ff f879 	bl	e980 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    f88e:	7e61      	ldrb	r1, [r4, #25]
    f890:	4628      	mov	r0, r5
    f892:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f896:	f7f7 b8eb 	b.w	6a70 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    f89a:	4639      	mov	r1, r7
    f89c:	4628      	mov	r0, r5
    f89e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f8a2:	f7ff b85c 	b.w	e95e <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    f8a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f8aa:	b510      	push	{r4, lr}
    f8ac:	4604      	mov	r4, r0
    f8ae:	4608      	mov	r0, r1
    f8b0:	f7fc fd4c 	bl	c34c <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    f8b4:	7921      	ldrb	r1, [r4, #4]
    f8b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f8ba:	2025      	movs	r0, #37	; 0x25
    f8bc:	f7fc bd1c 	b.w	c2f8 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    f8c0:	b510      	push	{r4, lr}
    f8c2:	4604      	mov	r4, r0
    f8c4:	3026      	adds	r0, #38	; 0x26
    f8c6:	f7fc fcf7 	bl	c2b8 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    f8ca:	2800      	cmp	r0, #0
    f8cc:	d102      	bne.n	f8d4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x132>
    f8ce:	207f      	movs	r0, #127	; 0x7f
    f8d0:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    f8d4:	bd10      	pop	{r4, pc}
    f8d6:	7802      	ldrb	r2, [r0, #0]
    f8d8:	2320      	movs	r3, #32
    f8da:	f022 0220 	bic.w	r2, r2, #32
    f8de:	ea03 1141 	and.w	r1, r3, r1, lsl #5
    f8e2:	430a      	orrs	r2, r1
    f8e4:	7002      	strb	r2, [r0, #0]
    f8e6:	4770      	bx	lr

0000f8e8 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
    f8e8:	b570      	push	{r4, r5, r6, lr}
    f8ea:	7001      	strb	r1, [r0, #0]
    f8ec:	7042      	strb	r2, [r0, #1]
    f8ee:	4614      	mov	r4, r2
    f8f0:	460d      	mov	r5, r1
    f8f2:	7880      	ldrb	r0, [r0, #2]
    f8f4:	f000 f87f 	bl	f9f6 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    f8f8:	fb10 f005 	smulbb	r0, r0, r5
    f8fc:	4360      	muls	r0, r4
    f8fe:	28ff      	cmp	r0, #255	; 0xff
    f900:	d303      	bcc.n	f90a <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y+0x22>
    f902:	215c      	movs	r1, #92	; 0x5c
    f904:	202e      	movs	r0, #46	; 0x2e
    f906:	f7f5 fc33 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f90a:	bd70      	pop	{r4, r5, r6, pc}

0000f90c <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
    f90c:	b510      	push	{r4, lr}
    f90e:	4604      	mov	r4, r0
    f910:	7880      	ldrb	r0, [r0, #2]
    f912:	f000 f870 	bl	f9f6 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    f916:	7861      	ldrb	r1, [r4, #1]
    f918:	7822      	ldrb	r2, [r4, #0]
    f91a:	fb11 f102 	smulbb	r1, r1, r2
    f91e:	4348      	muls	r0, r1
    f920:	b2c0      	uxtb	r0, r0
    f922:	bd10      	pop	{r4, pc}

0000f924 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
    f924:	b510      	push	{r4, lr}
    f926:	4604      	mov	r4, r0
    f928:	f000 f84d 	bl	f9c6 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x2c>
    f92c:	7961      	ldrb	r1, [r4, #5]
    f92e:	1c49      	adds	r1, r1, #1
    f930:	b2c9      	uxtb	r1, r1
    f932:	7161      	strb	r1, [r4, #5]
    f934:	7862      	ldrb	r2, [r4, #1]
    f936:	4291      	cmp	r1, r2
    f938:	d10b      	bne.n	f952 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    f93a:	2200      	movs	r2, #0
    f93c:	7162      	strb	r2, [r4, #5]
    f93e:	78e1      	ldrb	r1, [r4, #3]
    f940:	4301      	orrs	r1, r0
    f942:	70e1      	strb	r1, [r4, #3]
    f944:	78a3      	ldrb	r3, [r4, #2]
    f946:	4299      	cmp	r1, r3
    f948:	d103      	bne.n	f952 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    f94a:	70e2      	strb	r2, [r4, #3]
    f94c:	7921      	ldrb	r1, [r4, #4]
    f94e:	1c49      	adds	r1, r1, #1
    f950:	7121      	strb	r1, [r4, #4]
    f952:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f956:	f000 b825 	b.w	f9a4 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0xa>

0000f95a <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
    f95a:	7081      	strb	r1, [r0, #2]
    f95c:	4770      	bx	lr

0000f95e <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
    f95e:	b570      	push	{r4, r5, r6, lr}
    f960:	4604      	mov	r4, r0
    f962:	7880      	ldrb	r0, [r0, #2]
    f964:	f000 f847 	bl	f9f6 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    f968:	7861      	ldrb	r1, [r4, #1]
    f96a:	fb11 f500 	smulbb	r5, r1, r0
    f96e:	78e0      	ldrb	r0, [r4, #3]
    f970:	f000 f841 	bl	f9f6 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    f974:	7861      	ldrb	r1, [r4, #1]
    f976:	7962      	ldrb	r2, [r4, #5]
    f978:	fb10 2001 	smlabb	r0, r0, r1, r2
    f97c:	7821      	ldrb	r1, [r4, #0]
    f97e:	7922      	ldrb	r2, [r4, #4]
    f980:	1a89      	subs	r1, r1, r2
    f982:	fb11 f105 	smulbb	r1, r1, r5
    f986:	1a08      	subs	r0, r1, r0
    f988:	b2c0      	uxtb	r0, r0
    f98a:	bd70      	pop	{r4, r5, r6, pc}

0000f98c <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
    f98c:	2100      	movs	r1, #0
    f98e:	6001      	str	r1, [r0, #0]
    f990:	8081      	strh	r1, [r0, #4]
    f992:	2101      	movs	r1, #1
    f994:	7041      	strb	r1, [r0, #1]
    f996:	7001      	strb	r1, [r0, #0]
    f998:	4770      	bx	lr

0000f99a <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
    f99a:	2100      	movs	r1, #0
    f99c:	70c1      	strb	r1, [r0, #3]
    f99e:	7141      	strb	r1, [r0, #5]
    f9a0:	7101      	strb	r1, [r0, #4]
    f9a2:	4770      	bx	lr
    f9a4:	b510      	push	{r4, lr}
    f9a6:	2801      	cmp	r0, #1
    f9a8:	d007      	beq.n	f9ba <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x20>
    f9aa:	2802      	cmp	r0, #2
    f9ac:	d007      	beq.n	f9be <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x24>
    f9ae:	2804      	cmp	r0, #4
    f9b0:	d007      	beq.n	f9c2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x28>
    f9b2:	2139      	movs	r1, #57	; 0x39
    f9b4:	202e      	movs	r0, #46	; 0x2e
    f9b6:	f7f5 fbdb 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f9ba:	2025      	movs	r0, #37	; 0x25
    f9bc:	bd10      	pop	{r4, pc}
    f9be:	2026      	movs	r0, #38	; 0x26
    f9c0:	bd10      	pop	{r4, pc}
    f9c2:	2027      	movs	r0, #39	; 0x27
    f9c4:	bd10      	pop	{r4, pc}
    f9c6:	4601      	mov	r1, r0
    f9c8:	2000      	movs	r0, #0
    f9ca:	788a      	ldrb	r2, [r1, #2]
    f9cc:	07d3      	lsls	r3, r2, #31
    f9ce:	d002      	beq.n	f9d6 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x3c>
    f9d0:	78cb      	ldrb	r3, [r1, #3]
    f9d2:	07db      	lsls	r3, r3, #31
    f9d4:	d006      	beq.n	f9e4 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4a>
    f9d6:	0793      	lsls	r3, r2, #30
    f9d8:	d506      	bpl.n	f9e8 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    f9da:	78cb      	ldrb	r3, [r1, #3]
    f9dc:	079b      	lsls	r3, r3, #30
    f9de:	d403      	bmi.n	f9e8 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    f9e0:	2002      	movs	r0, #2
    f9e2:	4770      	bx	lr
    f9e4:	2001      	movs	r0, #1
    f9e6:	4770      	bx	lr
    f9e8:	0752      	lsls	r2, r2, #29
    f9ea:	d5fc      	bpl.n	f9e6 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    f9ec:	78c9      	ldrb	r1, [r1, #3]
    f9ee:	0749      	lsls	r1, r1, #29
    f9f0:	d4f9      	bmi.n	f9e6 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    f9f2:	2004      	movs	r0, #4
    f9f4:	4770      	bx	lr
    f9f6:	f3c0 0180 	ubfx	r1, r0, #2, #1
    f9fa:	f3c0 0240 	ubfx	r2, r0, #1, #1
    f9fe:	4411      	add	r1, r2
    fa00:	f000 0001 	and.w	r0, r0, #1
    fa04:	4408      	add	r0, r1
    fa06:	4770      	bx	lr

0000fa08 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
    fa08:	f240 315a 	movw	r1, #858	; 0x35a
    fa0c:	4348      	muls	r0, r1
    fa0e:	4770      	bx	lr

0000fa10 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>:
    fa10:	f240 20ef 	movw	r0, #751	; 0x2ef
    fa14:	4770      	bx	lr
    fa16:	020e      	.short	0x020e
    fa18:	0630041c 	.word	0x0630041c
    fa1c:	035a0c60 	.word	0x035a0c60
    fa20:	05c506b4 	.word	0x05c506b4
    fa24:	12250bf5 	.word	0x12250bf5
    fa28:	03b101a3 	.word	0x03b101a3
    fa2c:	02ef05bf 	.word	0x02ef05bf
    fa30:	09a30649 	.word	0x09a30649

0000fa34 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
    fa34:	b510      	push	{r4, lr}
    fa36:	f890 10d0 	ldrb.w	r1, [r0, #208]	; 0xd0
    fa3a:	b109      	cbz	r1, fa40 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0xc>
    fa3c:	2000      	movs	r0, #0
    fa3e:	bd10      	pop	{r4, pc}
    fa40:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
    fa44:	b949      	cbnz	r1, fa5a <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x26>
    fa46:	f890 10a8 	ldrb.w	r1, [r0, #168]	; 0xa8
    fa4a:	b131      	cbz	r1, fa5a <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x26>
    fa4c:	e9d0 122b 	ldrd	r1, r2, [r0, #172]	; 0xac
    fa50:	428a      	cmp	r2, r1
    fa52:	d902      	bls.n	fa5a <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x26>
    fa54:	f7ff fe8e 	bl	f774 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    fa58:	e7f0      	b.n	fa3c <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x8>
    fa5a:	2001      	movs	r0, #1
    fa5c:	bd10      	pop	{r4, pc}

0000fa5e <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
    fa5e:	b510      	push	{r4, lr}
    fa60:	b131      	cbz	r1, fa70 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x12>
    fa62:	2901      	cmp	r1, #1
    fa64:	d008      	beq.n	fa78 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x1a>
    fa66:	f240 7192 	movw	r1, #1938	; 0x792
    fa6a:	2030      	movs	r0, #48	; 0x30
    fa6c:	f7f5 fb80 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fa70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fa74:	f000 b9da 	b.w	fe2c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x320>
    fa78:	2100      	movs	r1, #0
    fa7a:	f880 10a8 	strb.w	r1, [r0, #168]	; 0xa8
    fa7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fa82:	f000 b93e 	b.w	fd02 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1f6>

0000fa86 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>:
    fa86:	b510      	push	{r4, lr}
    fa88:	4604      	mov	r4, r0
    fa8a:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
    fa8e:	2800      	cmp	r0, #0
    fa90:	d019      	beq.n	fac6 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x40>
    fa92:	2001      	movs	r0, #1
    fa94:	f884 00d0 	strb.w	r0, [r4, #208]	; 0xd0
    fa98:	4601      	mov	r1, r0
    fa9a:	4620      	mov	r0, r4
    fa9c:	f7ff fe67 	bl	f76e <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    faa0:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
    faa4:	b170      	cbz	r0, fac4 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x3e>
    faa6:	f814 0fa0 	ldrb.w	r0, [r4, #160]!
    faaa:	f7f3 fbe3 	bl	3274 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    faae:	7820      	ldrb	r0, [r4, #0]
    fab0:	f7f3 fd32 	bl	3518 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    fab4:	f814 09a0 	ldrb.w	r0, [r4], #-160
    fab8:	f7f3 fd0c 	bl	34d4 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    fabc:	b120      	cbz	r0, fac8 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x42>
    fabe:	2000      	movs	r0, #0
    fac0:	f884 00b4 	strb.w	r0, [r4, #180]	; 0xb4
    fac4:	2000      	movs	r0, #0
    fac6:	bd10      	pop	{r4, pc}
    fac8:	f240 2107 	movw	r1, #519	; 0x207
    facc:	2030      	movs	r0, #48	; 0x30
    face:	f7f5 fb4f 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000fad2 <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>:
    fad2:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
    fad6:	4770      	bx	lr

0000fad8 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>:
    fad8:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
    fadc:	4770      	bx	lr

0000fade <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>:
    fade:	b50e      	push	{r1, r2, r3, lr}
    fae0:	4669      	mov	r1, sp
    fae2:	2001      	movs	r0, #1
    fae4:	f7fe fd78 	bl	e5d8 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    fae8:	b138      	cbz	r0, fafa <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x1c>
    faea:	f44f 71a1 	mov.w	r1, #322	; 0x142
    faee:	2030      	movs	r0, #48	; 0x30
    faf0:	f7f5 fb3e 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    faf4:	9802      	ldr	r0, [sp, #8]
    faf6:	f7ff ffc6 	bl	fa86 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
    fafa:	4668      	mov	r0, sp
    fafc:	f7f5 fd70 	bl	55e0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    fb00:	2800      	cmp	r0, #0
    fb02:	d0f7      	beq.n	faf4 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x16>
    fb04:	f7f8 fea6 	bl	8854 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x58>
    fb08:	2000      	movs	r0, #0
    fb0a:	bd0e      	pop	{r1, r2, r3, pc}

0000fb0c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>:
    fb0c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    fb0e:	4604      	mov	r4, r0
    fb10:	f890 0113 	ldrb.w	r0, [r0, #275]	; 0x113
    fb14:	2800      	cmp	r0, #0
    fb16:	d153      	bne.n	fbc0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
    fb18:	f894 0144 	ldrb.w	r0, [r4, #324]	; 0x144
    fb1c:	2803      	cmp	r0, #3
    fb1e:	d14f      	bne.n	fbc0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
    fb20:	f7fd fb99 	bl	d256 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    fb24:	4601      	mov	r1, r0
    fb26:	f8d4 016c 	ldr.w	r0, [r4, #364]	; 0x16c
    fb2a:	f7f2 ff21 	bl	2970 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    fb2e:	2800      	cmp	r0, #0
    fb30:	dd46      	ble.n	fbc0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
    fb32:	6921      	ldr	r1, [r4, #16]
    fb34:	b111      	cbz	r1, fb3c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x30>
    fb36:	fbb0 f0f1 	udiv	r0, r0, r1
    fb3a:	e000      	b.n	fb3e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x32>
    fb3c:	2000      	movs	r0, #0
    fb3e:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    fb42:	1c40      	adds	r0, r0, #1
    fb44:	4408      	add	r0, r1
    fb46:	f8a4 0154 	strh.w	r0, [r4, #340]	; 0x154
    fb4a:	f8b4 0154 	ldrh.w	r0, [r4, #340]	; 0x154
    fb4e:	f8b4 110c 	ldrh.w	r1, [r4, #268]	; 0x10c
    fb52:	1a08      	subs	r0, r1, r0
    fb54:	b200      	sxth	r0, r0
    fb56:	2800      	cmp	r0, #0
    fb58:	dd32      	ble.n	fbc0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
    fb5a:	f894 0178 	ldrb.w	r0, [r4, #376]	; 0x178
    fb5e:	f7f3 fb89 	bl	3274 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    fb62:	2800      	cmp	r0, #0
    fb64:	d02c      	beq.n	fbc0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
    fb66:	20ff      	movs	r0, #255	; 0xff
    fb68:	f884 0159 	strb.w	r0, [r4, #345]	; 0x159
    fb6c:	f8b4 00ae 	ldrh.w	r0, [r4, #174]	; 0xae
    fb70:	f8b4 10ac 	ldrh.w	r1, [r4, #172]	; 0xac
    fb74:	ae01      	add	r6, sp, #4
    fb76:	1a40      	subs	r0, r0, r1
    fb78:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    fb7c:	1e40      	subs	r0, r0, #1
    fb7e:	4408      	add	r0, r1
    fb80:	b285      	uxth	r5, r0
    fb82:	e017      	b.n	fbb4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xa8>
    fb84:	9600      	str	r6, [sp, #0]
    fb86:	f8b4 1154 	ldrh.w	r1, [r4, #340]	; 0x154
    fb8a:	2300      	movs	r3, #0
    fb8c:	2201      	movs	r2, #1
    fb8e:	4620      	mov	r0, r4
    fb90:	f7f8 ff30 	bl	89f4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    fb94:	2800      	cmp	r0, #0
    fb96:	d013      	beq.n	fbc0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
    fb98:	2801      	cmp	r0, #1
    fb9a:	d004      	beq.n	fba6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x9a>
    fb9c:	f240 6105 	movw	r1, #1541	; 0x605
    fba0:	2030      	movs	r0, #48	; 0x30
    fba2:	f7f5 fae5 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fba6:	f8b4 0154 	ldrh.w	r0, [r4, #340]	; 0x154
    fbaa:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    fbae:	4408      	add	r0, r1
    fbb0:	f8a4 0154 	strh.w	r0, [r4, #340]	; 0x154
    fbb4:	f8b4 0154 	ldrh.w	r0, [r4, #340]	; 0x154
    fbb8:	1a28      	subs	r0, r5, r0
    fbba:	b200      	sxth	r0, r0
    fbbc:	2800      	cmp	r0, #0
    fbbe:	dae1      	bge.n	fb84 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x78>
    fbc0:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    fbc2:	2000      	movs	r0, #0
    fbc4:	4770      	bx	lr
    fbc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fbca:	4604      	mov	r4, r0
    fbcc:	2501      	movs	r5, #1
    fbce:	f000 f90e 	bl	fdee <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2e2>
    fbd2:	f8a4 00c0 	strh.w	r0, [r4, #192]	; 0xc0
    fbd6:	2000      	movs	r0, #0
    fbd8:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
    fbdc:	2701      	movs	r7, #1
    fbde:	f884 70c3 	strb.w	r7, [r4, #195]	; 0xc3
    fbe2:	f894 00a8 	ldrb.w	r0, [r4, #168]	; 0xa8
    fbe6:	f104 06b8 	add.w	r6, r4, #184	; 0xb8
    fbea:	b160      	cbz	r0, fc06 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xfa>
    fbec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    fbf0:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
    fbf4:	f7f2 fe8a 	bl	290c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    fbf8:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    fbfc:	2100      	movs	r1, #0
    fbfe:	4630      	mov	r0, r6
    fc00:	f7ff f84c 	bl	ec9c <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    fc04:	e00f      	b.n	fc26 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x11a>
    fc06:	4620      	mov	r0, r4
    fc08:	f7ff fd5c 	bl	f6c4 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    fc0c:	4605      	mov	r5, r0
    fc0e:	4629      	mov	r1, r5
    fc10:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
    fc14:	f7f2 fe7a 	bl	290c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    fc18:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    fc1c:	4629      	mov	r1, r5
    fc1e:	4630      	mov	r0, r6
    fc20:	f7ff f83c 	bl	ec9c <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    fc24:	1c45      	adds	r5, r0, #1
    fc26:	f8b4 00c8 	ldrh.w	r0, [r4, #200]	; 0xc8
    fc2a:	1c41      	adds	r1, r0, #1
    fc2c:	290a      	cmp	r1, #10
    fc2e:	d202      	bcs.n	fc36 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x12a>
    fc30:	4428      	add	r0, r5
    fc32:	f8a4 00c8 	strh.w	r0, [r4, #200]	; 0xc8
    fc36:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    fc3a:	b138      	cbz	r0, fc4c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x140>
    fc3c:	f8b4 00c8 	ldrh.w	r0, [r4, #200]	; 0xc8
    fc40:	1c40      	adds	r0, r0, #1
    fc42:	280a      	cmp	r0, #10
    fc44:	d302      	bcc.n	fc4c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x140>
    fc46:	f884 70c2 	strb.w	r7, [r4, #194]	; 0xc2
    fc4a:	e002      	b.n	fc52 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x146>
    fc4c:	2002      	movs	r0, #2
    fc4e:	f884 00c2 	strb.w	r0, [r4, #194]	; 0xc2
    fc52:	2100      	movs	r1, #0
    fc54:	4620      	mov	r0, r4
    fc56:	f000 f823 	bl	fca0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x194>
    fc5a:	b120      	cbz	r0, fc66 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x15a>
    fc5c:	4620      	mov	r0, r4
    fc5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    fc62:	f000 b80e 	b.w	fc82 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x176>
    fc66:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
    fc6a:	4631      	mov	r1, r6
    fc6c:	f000 f8bd 	bl	fdea <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2de>
    fc70:	2800      	cmp	r0, #0
    fc72:	d104      	bne.n	fc7e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x172>
    fc74:	f240 61a6 	movw	r1, #1702	; 0x6a6
    fc78:	2030      	movs	r0, #48	; 0x30
    fc7a:	f7f5 fa79 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fc7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fc82:	b510      	push	{r4, lr}
    fc84:	4604      	mov	r4, r0
    fc86:	f814 0fa0 	ldrb.w	r0, [r4, #160]!
    fc8a:	f7f3 fc23 	bl	34d4 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    fc8e:	2000      	movs	r0, #0
    fc90:	7520      	strb	r0, [r4, #20]
    fc92:	bd10      	pop	{r4, pc}
    fc94:	b510      	push	{r4, lr}
    fc96:	f7ff fd19 	bl	f6cc <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    fc9a:	f200 100d 	addw	r0, r0, #269	; 0x10d
    fc9e:	bd10      	pop	{r4, pc}
    fca0:	b570      	push	{r4, r5, r6, lr}
    fca2:	4604      	mov	r4, r0
    fca4:	f890 00d0 	ldrb.w	r0, [r0, #208]	; 0xd0
    fca8:	460d      	mov	r5, r1
    fcaa:	b108      	cbz	r0, fcb0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1a4>
    fcac:	2001      	movs	r0, #1
    fcae:	bd70      	pop	{r4, r5, r6, pc}
    fcb0:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
    fcb4:	b1a8      	cbz	r0, fce2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d6>
    fcb6:	4620      	mov	r0, r4
    fcb8:	f7ff fd04 	bl	f6c4 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    fcbc:	4405      	add	r5, r0
    fcbe:	4620      	mov	r0, r4
    fcc0:	f7ff ffe8 	bl	fc94 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x188>
    fcc4:	1941      	adds	r1, r0, r5
    fcc6:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
    fcca:	4288      	cmp	r0, r1
    fccc:	d206      	bcs.n	fcdc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d0>
    fcce:	2001      	movs	r0, #1
    fcd0:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
    fcd4:	4620      	mov	r0, r4
    fcd6:	f7ff fd4d 	bl	f774 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    fcda:	e7e7      	b.n	fcac <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1a0>
    fcdc:	1b40      	subs	r0, r0, r5
    fcde:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
    fce2:	2000      	movs	r0, #0
    fce4:	bd70      	pop	{r4, r5, r6, pc}
    fce6:	b510      	push	{r4, lr}
    fce8:	4604      	mov	r4, r0
    fcea:	f890 006f 	ldrb.w	r0, [r0, #111]	; 0x6f
    fcee:	f000 f9eb 	bl	100c8 <CONFIG_PM_SRAM_SIZE+0xc8>
    fcf2:	4602      	mov	r2, r0
    fcf4:	4620      	mov	r0, r4
    fcf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fcfa:	f240 111b 	movw	r1, #283	; 0x11b
    fcfe:	f7ff bbb8 	b.w	f472 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    fd02:	b510      	push	{r4, lr}
    fd04:	f7fc f94a 	bl	bf9c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    fd08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fd0c:	f7f3 bd3a 	b.w	3784 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    fd10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fd14:	4604      	mov	r4, r0
    fd16:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    fd1a:	2800      	cmp	r0, #0
    fd1c:	d051      	beq.n	fdc2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b6>
    fd1e:	f894 0144 	ldrb.w	r0, [r4, #324]	; 0x144
    fd22:	2803      	cmp	r0, #3
    fd24:	d14d      	bne.n	fdc2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b6>
    fd26:	f894 906f 	ldrb.w	r9, [r4, #111]	; 0x6f
    fd2a:	f001 faf1 	bl	11310 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    fd2e:	4605      	mov	r5, r0
    fd30:	f894 0185 	ldrb.w	r0, [r4, #389]	; 0x185
    fd34:	f7f8 fd80 	bl	8838 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    fd38:	4428      	add	r0, r5
    fd3a:	b286      	uxth	r6, r0
    fd3c:	f894 0185 	ldrb.w	r0, [r4, #389]	; 0x185
    fd40:	f7f8 fd7a 	bl	8838 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    fd44:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    fd48:	fa1f f880 	uxth.w	r8, r0
    fd4c:	4648      	mov	r0, r9
    fd4e:	f7fc f9e5 	bl	c11c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    fd52:	f8d4 1180 	ldr.w	r1, [r4, #384]	; 0x180
    fd56:	1a0d      	subs	r5, r1, r0
    fd58:	4648      	mov	r0, r9
    fd5a:	f7fc fa0b 	bl	c174 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    fd5e:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
    fd62:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    fd66:	fbb0 f0fa 	udiv	r0, r0, sl
    fd6a:	1a2d      	subs	r5, r5, r0
    fd6c:	4648      	mov	r0, r9
    fd6e:	f7fc f9d5 	bl	c11c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    fd72:	f8d4 1118 	ldr.w	r1, [r4, #280]	; 0x118
    fd76:	1a0f      	subs	r7, r1, r0
    fd78:	4648      	mov	r0, r9
    fd7a:	f7fc f9fb 	bl	c174 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    fd7e:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    fd82:	4401      	add	r1, r0
    fd84:	fbb1 f0fa 	udiv	r0, r1, sl
    fd88:	1a39      	subs	r1, r7, r0
    fd8a:	f1a1 0060 	sub.w	r0, r1, #96	; 0x60
    fd8e:	4370      	muls	r0, r6
    fd90:	fbb0 f2f8 	udiv	r2, r0, r8
    fd94:	2029      	movs	r0, #41	; 0x29
    fd96:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    fd9a:	3260      	adds	r2, #96	; 0x60
    fd9c:	eba0 0152 	sub.w	r1, r0, r2, lsr #1
    fda0:	eb00 0052 	add.w	r0, r0, r2, lsr #1
    fda4:	42a9      	cmp	r1, r5
    fda6:	d801      	bhi.n	fdac <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2a0>
    fda8:	4285      	cmp	r5, r0
    fdaa:	d901      	bls.n	fdb0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2a4>
    fdac:	f7f4 fe3a 	bl	4a24 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>
    fdb0:	4631      	mov	r1, r6
    fdb2:	6920      	ldr	r0, [r4, #16]
    fdb4:	f7fd fa83 	bl	d2be <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    fdb8:	2100      	movs	r1, #0
    fdba:	f8c4 014c 	str.w	r0, [r4, #332]	; 0x14c
    fdbe:	f884 115a 	strb.w	r1, [r4, #346]	; 0x15a
    fdc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    fdc6:	b570      	push	{r4, r5, r6, lr}
    fdc8:	460c      	mov	r4, r1
    fdca:	4605      	mov	r5, r0
    fdcc:	f7fc f9d2 	bl	c174 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    fdd0:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    fdd4:	4408      	add	r0, r1
    fdd6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    fdda:	fbb0 f6f1 	udiv	r6, r0, r1
    fdde:	4628      	mov	r0, r5
    fde0:	f7fc f99c 	bl	c11c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    fde4:	4430      	add	r0, r6
    fde6:	4420      	add	r0, r4
    fde8:	bd70      	pop	{r4, r5, r6, pc}
    fdea:	f7f2 bf11 	b.w	2c10 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    fdee:	b538      	push	{r3, r4, r5, lr}
    fdf0:	4604      	mov	r4, r0
    fdf2:	f7ff fc94 	bl	f71e <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    fdf6:	b1b8      	cbz	r0, fe28 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x31c>
    fdf8:	4620      	mov	r0, r4
    fdfa:	f7ff fc88 	bl	f70e <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    fdfe:	b918      	cbnz	r0, fe08 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2fc>
    fe00:	4620      	mov	r0, r4
    fe02:	f7ff fc8e 	bl	f722 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    fe06:	b138      	cbz	r0, fe18 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x30c>
    fe08:	2449      	movs	r4, #73	; 0x49
    fe0a:	4668      	mov	r0, sp
    fe0c:	f7f5 f894 	bl	4f38 <mpsl_fem_pa_is_configured>
    fe10:	f89d 0000 	ldrb.w	r0, [sp]
    fe14:	b928      	cbnz	r0, fe22 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x316>
    fe16:	e001      	b.n	fe1c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x310>
    fe18:	2442      	movs	r4, #66	; 0x42
    fe1a:	e7f6      	b.n	fe0a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2fe>
    fe1c:	f7fd fc91 	bl	d742 <mpsl_fem_lna_is_configured>
    fe20:	b100      	cbz	r0, fe24 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x318>
    fe22:	1de4      	adds	r4, r4, #7
    fe24:	4620      	mov	r0, r4
    fe26:	bd38      	pop	{r3, r4, r5, pc}
    fe28:	206b      	movs	r0, #107	; 0x6b
    fe2a:	bd38      	pop	{r3, r4, r5, pc}
    fe2c:	b570      	push	{r4, r5, r6, lr}
    fe2e:	4604      	mov	r4, r0
    fe30:	f890 00a1 	ldrb.w	r0, [r0, #161]	; 0xa1
    fe34:	2500      	movs	r5, #0
    fe36:	b118      	cbz	r0, fe40 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x334>
    fe38:	2001      	movs	r0, #1
    fe3a:	f000 f887 	bl	ff4c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x440>
    fe3e:	4605      	mov	r5, r0
    fe40:	4620      	mov	r0, r4
    fe42:	f7ff fc3f 	bl	f6c4 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    fe46:	1941      	adds	r1, r0, r5
    fe48:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
    fe4c:	34b8      	adds	r4, #184	; 0xb8
    fe4e:	f7f2 fd5d 	bl	290c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    fe52:	2600      	movs	r6, #0
    fe54:	60e0      	str	r0, [r4, #12]
    fe56:	f804 6b0b 	strb.w	r6, [r4], #11
    fe5a:	2001      	movs	r0, #1
    fe5c:	f804 0901 	strb.w	r0, [r4], #-1
    fe60:	2002      	movs	r0, #2
    fe62:	f804 09c2 	strb.w	r0, [r4], #-194
    fe66:	4620      	mov	r0, r4
    fe68:	f7ff ffc1 	bl	fdee <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2e2>
    fe6c:	f8a4 00c0 	strh.w	r0, [r4, #192]	; 0xc0
    fe70:	4629      	mov	r1, r5
    fe72:	4620      	mov	r0, r4
    fe74:	f7ff ff14 	bl	fca0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x194>
    fe78:	b930      	cbnz	r0, fe88 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x37c>
    fe7a:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
    fe7e:	f104 01b8 	add.w	r1, r4, #184	; 0xb8
    fe82:	f7ff ffb2 	bl	fdea <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2de>
    fe86:	b128      	cbz	r0, fe94 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x388>
    fe88:	f8a4 60c8 	strh.w	r6, [r4, #200]	; 0xc8
    fe8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fe90:	f7ff bf37 	b.w	fd02 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1f6>
    fe94:	f240 61ef 	movw	r1, #1775	; 0x6ef
    fe98:	2030      	movs	r0, #48	; 0x30
    fe9a:	f7f5 f969 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fe9e:	b510      	push	{r4, lr}
    fea0:	4604      	mov	r4, r0
    fea2:	2000      	movs	r0, #0
    fea4:	f884 0144 	strb.w	r0, [r4, #324]	; 0x144
    fea8:	f894 0178 	ldrb.w	r0, [r4, #376]	; 0x178
    feac:	f7f3 fb12 	bl	34d4 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    feb0:	2020      	movs	r0, #32
    feb2:	f884 0178 	strb.w	r0, [r4, #376]	; 0x178
    feb6:	bd10      	pop	{r4, pc}
    feb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    febc:	2500      	movs	r5, #0
    febe:	f880 50a8 	strb.w	r5, [r0, #168]	; 0xa8
    fec2:	f8d0 60c4 	ldr.w	r6, [r0, #196]	; 0xc4
    fec6:	4688      	mov	r8, r1
    fec8:	4604      	mov	r4, r0
    feca:	f880 50b4 	strb.w	r5, [r0, #180]	; 0xb4
    fece:	2701      	movs	r7, #1
    fed0:	f880 70b5 	strb.w	r7, [r0, #181]	; 0xb5
    fed4:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
    fed8:	4639      	mov	r1, r7
    feda:	34a0      	adds	r4, #160	; 0xa0
    fedc:	f7f7 f834 	bl	6f48 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    fee0:	6860      	ldr	r0, [r4, #4]
    fee2:	f8c0 616c 	str.w	r6, [r0, #364]	; 0x16c
    fee6:	6861      	ldr	r1, [r4, #4]
    fee8:	7820      	ldrb	r0, [r4, #0]
    feea:	f881 0178 	strb.w	r0, [r1, #376]	; 0x178
    feee:	6861      	ldr	r1, [r4, #4]
    fef0:	f8c1 817c 	str.w	r8, [r1, #380]	; 0x17c
    fef4:	6860      	ldr	r0, [r4, #4]
    fef6:	f8c0 6170 	str.w	r6, [r0, #368]	; 0x170
    fefa:	6864      	ldr	r4, [r4, #4]
    fefc:	f884 5144 	strb.w	r5, [r4, #324]	; 0x144
    ff00:	2300      	movs	r3, #0
    ff02:	f8a4 5174 	strh.w	r5, [r4, #372]	; 0x174
    ff06:	461a      	mov	r2, r3
    ff08:	4619      	mov	r1, r3
    ff0a:	4620      	mov	r0, r4
    ff0c:	9500      	str	r5, [sp, #0]
    ff0e:	f7f8 fd71 	bl	89f4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    ff12:	b120      	cbz	r0, ff1e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x412>
    ff14:	f240 211b 	movw	r1, #539	; 0x21b
    ff18:	2030      	movs	r0, #48	; 0x30
    ff1a:	f7f5 f929 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ff1e:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    ff22:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
    ff26:	f884 7144 	strb.w	r7, [r4, #324]	; 0x144
    ff2a:	f8a4 5156 	strh.w	r5, [r4, #342]	; 0x156
    ff2e:	f8a4 5154 	strh.w	r5, [r4, #340]	; 0x154
    ff32:	f504 74a0 	add.w	r4, r4, #320	; 0x140
    ff36:	7665      	strb	r5, [r4, #25]
    ff38:	f834 0cc4 	ldrh.w	r0, [r4, #-196]
    ff3c:	1e40      	subs	r0, r0, #1
    ff3e:	f824 0cc4 	strh.w	r0, [r4, #-196]
    ff42:	86e5      	strh	r5, [r4, #54]	; 0x36
    ff44:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ff48:	f7ff bedb 	b.w	fd02 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1f6>
    ff4c:	b510      	push	{r4, lr}
    ff4e:	f7f8 ff5b 	bl	8e08 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x60c>
    ff52:	f242 7110 	movw	r1, #10000	; 0x2710
    ff56:	fbb0 f2f1 	udiv	r2, r0, r1
    ff5a:	fb01 0012 	mls	r0, r1, r2, r0
    ff5e:	bd10      	pop	{r4, pc}
    ff60:	b570      	push	{r4, r5, r6, lr}
    ff62:	b140      	cbz	r0, ff76 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x46a>
    ff64:	2909      	cmp	r1, #9
    ff66:	d248      	bcs.n	fffa <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4ee>
    ff68:	e8df f001 	tbb	[pc, r1]
    ff6c:	3b3b1507 	.word	0x3b3b1507
    ff70:	3f294737 	.word	0x3f294737
    ff74:	0043      	.short	0x0043
    ff76:	21cd      	movs	r1, #205	; 0xcd
    ff78:	e03c      	b.n	fff4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4e8>
    ff7a:	4604      	mov	r4, r0
    ff7c:	f7f7 fd58 	bl	7a30 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
    ff80:	b110      	cbz	r0, ff88 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x47c>
    ff82:	f240 2179 	movw	r1, #633	; 0x279
    ff86:	e035      	b.n	fff4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4e8>
    ff88:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    ff8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ff90:	38fc      	subs	r0, #252	; 0xfc
    ff92:	f7f3 bcd7 	b.w	3944 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    ff96:	4605      	mov	r5, r0
    ff98:	f7ff fbbd 	bl	f716 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    ff9c:	b9a8      	cbnz	r0, ffca <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4be>
    ff9e:	4628      	mov	r0, r5
    ffa0:	f7ff fe78 	bl	fc94 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x188>
    ffa4:	4604      	mov	r4, r0
    ffa6:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
    ffaa:	42a0      	cmp	r0, r4
    ffac:	d20b      	bcs.n	ffc6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4ba>
    ffae:	1a20      	subs	r0, r4, r0
    ffb0:	2103      	movs	r1, #3
    ffb2:	f7f2 fbd3 	bl	275c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    ffb6:	b130      	cbz	r0, ffc6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4ba>
    ffb8:	4628      	mov	r0, r5
    ffba:	f8c5 40bc 	str.w	r4, [r5, #188]	; 0xbc
    ffbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ffc2:	f7ff bb7d 	b.w	f6c0 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
    ffc6:	f8c5 40bc 	str.w	r4, [r5, #188]	; 0xbc
    ffca:	4628      	mov	r0, r5
    ffcc:	f7f7 fd4c 	bl	7a68 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
    ffd0:	2800      	cmp	r0, #0
    ffd2:	d014      	beq.n	fffe <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4f2>
    ffd4:	f44f 712b 	mov.w	r1, #684	; 0x2ac
    ffd8:	e00c      	b.n	fff4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4e8>
    ffda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ffde:	f7fc b9bb 	b.w	c358 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    ffe2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ffe6:	f7ff bdee 	b.w	fbc6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xba>
    ffea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ffee:	f7ff be48 	b.w	fc82 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x176>
    fff2:	21ed      	movs	r1, #237	; 0xed
    fff4:	2030      	movs	r0, #48	; 0x30
    fff6:	f7f5 f8bb 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fffa:	21f1      	movs	r1, #241	; 0xf1
    fffc:	e7fa      	b.n	fff4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4e8>
    fffe:	bd70      	pop	{r4, r5, r6, pc}
   10000:	b510      	push	{r4, lr}
   10002:	0004      	movs	r4, r0
   10004:	d008      	beq.n	10018 <CONFIG_PM_SRAM_SIZE+0x18>
   10006:	2909      	cmp	r1, #9
   10008:	d25c      	bcs.n	100c4 <CONFIG_PM_SRAM_SIZE+0xc4>
   1000a:	e8df f001 	tbb	[pc, r1]
   1000e:	3607      	.short	0x3607
   10010:	5b3a3e3e 	.word	0x5b3a3e3e
   10014:	00574a43 	.word	0x00574a43
   10018:	2196      	movs	r1, #150	; 0x96
   1001a:	e050      	b.n	100be <CONFIG_PM_SRAM_SIZE+0xbe>
   1001c:	2100      	movs	r1, #0
   1001e:	f8c4 1180 	str.w	r1, [r4, #384]	; 0x180
   10022:	f894 1158 	ldrb.w	r1, [r4, #344]	; 0x158
   10026:	4620      	mov	r0, r4
   10028:	b189      	cbz	r1, 1004e <CONFIG_PM_SRAM_SIZE+0x4e>
   1002a:	f8b0 2156 	ldrh.w	r2, [r0, #342]	; 0x156
   1002e:	f8b0 107c 	ldrh.w	r1, [r0, #124]	; 0x7c
   10032:	428a      	cmp	r2, r1
   10034:	d106      	bne.n	10044 <CONFIG_PM_SRAM_SIZE+0x44>
   10036:	f8b0 210c 	ldrh.w	r2, [r0, #268]	; 0x10c
   1003a:	1a51      	subs	r1, r2, r1
   1003c:	f8a0 110e 	strh.w	r1, [r0, #270]	; 0x10e
   10040:	4611      	mov	r1, r2
   10042:	e00d      	b.n	10060 <CONFIG_PM_SRAM_SIZE+0x60>
   10044:	1a51      	subs	r1, r2, r1
   10046:	f8a0 110e 	strh.w	r1, [r0, #270]	; 0x10e
   1004a:	b291      	uxth	r1, r2
   1004c:	e008      	b.n	10060 <CONFIG_PM_SRAM_SIZE+0x60>
   1004e:	f8b0 1154 	ldrh.w	r1, [r0, #340]	; 0x154
   10052:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
   10056:	1a89      	subs	r1, r1, r2
   10058:	f8a0 110e 	strh.w	r1, [r0, #270]	; 0x10e
   1005c:	f8b0 1154 	ldrh.w	r1, [r0, #340]	; 0x154
   10060:	f8a0 107c 	strh.w	r1, [r0, #124]	; 0x7c
   10064:	f8d0 1168 	ldr.w	r1, [r0, #360]	; 0x168
   10068:	f8c0 116c 	str.w	r1, [r0, #364]	; 0x16c
   1006c:	f7f9 f978 	bl	9360 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>
   10070:	4620      	mov	r0, r4
   10072:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10076:	f7f8 bed1 	b.w	8e1c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x620>
   1007a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1007e:	f000 b883 	b.w	10188 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>
   10082:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10086:	f7fc b967 	b.w	c358 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
   1008a:	4620      	mov	r0, r4
   1008c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10090:	f7f8 befa 	b.w	8e88 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x68c>
   10094:	2001      	movs	r0, #1
   10096:	f7f2 fb51 	bl	273c <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
   1009a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1009e:	f7fe bca4 	b.w	e9ea <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>
   100a2:	f894 0144 	ldrb.w	r0, [r4, #324]	; 0x144
   100a6:	2804      	cmp	r0, #4
   100a8:	d001      	beq.n	100ae <CONFIG_PM_SRAM_SIZE+0xae>
   100aa:	21b8      	movs	r1, #184	; 0xb8
   100ac:	e007      	b.n	100be <CONFIG_PM_SRAM_SIZE+0xbe>
   100ae:	4620      	mov	r0, r4
   100b0:	f7ff fef5 	bl	fe9e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x392>
   100b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   100b8:	f7f7 b990 	b.w	73dc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   100bc:	21c1      	movs	r1, #193	; 0xc1
   100be:	2030      	movs	r0, #48	; 0x30
   100c0:	f7f5 f856 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   100c4:	21c5      	movs	r1, #197	; 0xc5
   100c6:	e7fa      	b.n	100be <CONFIG_PM_SRAM_SIZE+0xbe>
   100c8:	b510      	push	{r4, lr}
   100ca:	f7fc f853 	bl	c174 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   100ce:	f64d 7141 	movw	r1, #57153	; 0xdf41
   100d2:	4408      	add	r0, r1
   100d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   100d8:	fbb0 f0f1 	udiv	r0, r0, r1
   100dc:	f500 70bb 	add.w	r0, r0, #374	; 0x176
   100e0:	bd10      	pop	{r4, pc}
   100e2:	01f4      	.short	0x01f4
   100e4:	009600fa 	.word	0x009600fa
   100e8:	004b0064 	.word	0x004b0064
   100ec:	001e0032 	.word	0x001e0032
   100f0:	000a0014 	.word	0x000a0014
   100f4:	00020005 	.word	0x00020005
   100f8:	0001      	.short	0x0001
   100fa:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
   100fe:	f001 0307 	and.w	r3, r1, #7
   10102:	7802      	ldrb	r2, [r0, #0]
   10104:	2101      	movs	r1, #1
   10106:	4099      	lsls	r1, r3
   10108:	438a      	bics	r2, r1
   1010a:	7002      	strb	r2, [r0, #0]
   1010c:	4770      	bx	lr
   1010e:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
   10112:	f001 0307 	and.w	r3, r1, #7
   10116:	7810      	ldrb	r0, [r2, #0]
   10118:	2101      	movs	r1, #1
   1011a:	4099      	lsls	r1, r3
   1011c:	4308      	orrs	r0, r1
   1011e:	7010      	strb	r0, [r2, #0]
   10120:	4770      	bx	lr

00010122 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>:
   10122:	b510      	push	{r4, lr}
   10124:	4604      	mov	r4, r0
   10126:	f8d0 01ac 	ldr.w	r0, [r0, #428]	; 0x1ac
   1012a:	6921      	ldr	r1, [r4, #16]
   1012c:	4288      	cmp	r0, r1
   1012e:	d109      	bne.n	10144 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
   10130:	f8b4 11b0 	ldrh.w	r1, [r4, #432]	; 0x1b0
   10134:	8b22      	ldrh	r2, [r4, #24]
   10136:	4291      	cmp	r1, r2
   10138:	d104      	bne.n	10144 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
   1013a:	f8b4 11b2 	ldrh.w	r1, [r4, #434]	; 0x1b2
   1013e:	8b62      	ldrh	r2, [r4, #26]
   10140:	4291      	cmp	r1, r2
   10142:	d013      	beq.n	1016c <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x4a>
   10144:	8821      	ldrh	r1, [r4, #0]
   10146:	f8a4 11cc 	strh.w	r1, [r4, #460]	; 0x1cc
   1014a:	f7fe fcd5 	bl	eaf8 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
   1014e:	f8a4 01ce 	strh.w	r0, [r4, #462]	; 0x1ce
   10152:	f8b4 01b0 	ldrh.w	r0, [r4, #432]	; 0x1b0
   10156:	f8a4 01d0 	strh.w	r0, [r4, #464]	; 0x1d0
   1015a:	f8b4 01b2 	ldrh.w	r0, [r4, #434]	; 0x1b2
   1015e:	f8a4 01d2 	strh.w	r0, [r4, #466]	; 0x1d2
   10162:	20ff      	movs	r0, #255	; 0xff
   10164:	f884 01c8 	strb.w	r0, [r4, #456]	; 0x1c8
   10168:	f7f7 f938 	bl	73dc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   1016c:	2102      	movs	r1, #2
   1016e:	4620      	mov	r0, r4
   10170:	f7f6 feea 	bl	6f48 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
   10174:	2000      	movs	r0, #0
   10176:	f804 0f86 	strb.w	r0, [r4, #134]!
   1017a:	2003      	movs	r0, #3
   1017c:	70e0      	strb	r0, [r4, #3]
   1017e:	bd10      	pop	{r4, pc}

00010180 <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
   10180:	f7f5 bb9c 	b.w	58bc <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

00010184 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>:
   10184:	2000      	movs	r0, #0
   10186:	4770      	bx	lr

00010188 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>:
   10188:	f7f6 b876 	b.w	6278 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>

0001018c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>:
   1018c:	2100      	movs	r1, #0
   1018e:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
   10192:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
   10196:	f880 1089 	strb.w	r1, [r0, #137]	; 0x89
   1019a:	f890 1113 	ldrb.w	r1, [r0, #275]	; 0x113
   1019e:	b109      	cbz	r1, 101a4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x18>
   101a0:	2102      	movs	r1, #2
   101a2:	e000      	b.n	101a6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a>
   101a4:	2103      	movs	r1, #3
   101a6:	f7f8 baf1 	b.w	878c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
   101aa:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
   101ae:	28fe      	cmp	r0, #254	; 0xfe
   101b0:	d001      	beq.n	101b6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2a>
   101b2:	2001      	movs	r0, #1
   101b4:	4770      	bx	lr
   101b6:	2000      	movs	r0, #0
   101b8:	4770      	bx	lr
   101ba:	b510      	push	{r4, lr}
   101bc:	2801      	cmp	r0, #1
   101be:	d006      	beq.n	101ce <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
   101c0:	2802      	cmp	r0, #2
   101c2:	d004      	beq.n	101ce <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
   101c4:	f44f 711d 	mov.w	r1, #628	; 0x274
   101c8:	2006      	movs	r0, #6
   101ca:	f7f4 ffd1 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   101ce:	bd10      	pop	{r4, pc}
   101d0:	2801      	cmp	r0, #1
   101d2:	d002      	beq.n	101da <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x4e>
   101d4:	2802      	cmp	r0, #2
   101d6:	d105      	bne.n	101e4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
   101d8:	e002      	b.n	101e0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x54>
   101da:	2901      	cmp	r1, #1
   101dc:	d004      	beq.n	101e8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
   101de:	e001      	b.n	101e4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
   101e0:	2902      	cmp	r1, #2
   101e2:	d001      	beq.n	101e8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
   101e4:	2000      	movs	r0, #0
   101e6:	4770      	bx	lr
   101e8:	2001      	movs	r0, #1
   101ea:	4770      	bx	lr
   101ec:	1a40      	subs	r0, r0, r1
   101ee:	b200      	sxth	r0, r0
   101f0:	f647 71fe 	movw	r1, #32766	; 0x7ffe
   101f4:	4288      	cmp	r0, r1
   101f6:	dc01      	bgt.n	101fc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x70>
   101f8:	2800      	cmp	r0, #0
   101fa:	dc01      	bgt.n	10200 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x74>
   101fc:	2001      	movs	r0, #1
   101fe:	4770      	bx	lr
   10200:	2000      	movs	r0, #0
   10202:	4770      	bx	lr
   10204:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
   10208:	f001 0107 	and.w	r1, r1, #7
   1020c:	7800      	ldrb	r0, [r0, #0]
   1020e:	40c8      	lsrs	r0, r1
   10210:	f000 0001 	and.w	r0, r0, #1
   10214:	4770      	bx	lr
   10216:	b118      	cbz	r0, 10220 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x94>
   10218:	2802      	cmp	r0, #2
   1021a:	d001      	beq.n	10220 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x94>
   1021c:	2001      	movs	r0, #1
   1021e:	4770      	bx	lr
   10220:	2000      	movs	r0, #0
   10222:	4770      	bx	lr

00010224 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
   10224:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
   10226:	7881      	ldrb	r1, [r0, #2]
   10228:	4604      	mov	r4, r0
   1022a:	291a      	cmp	r1, #26
   1022c:	d025      	beq.n	1027a <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x56>
   1022e:	dc0e      	bgt.n	1024e <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2a>
   10230:	2916      	cmp	r1, #22
   10232:	d22c      	bcs.n	1028e <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
   10234:	e8df f001 	tbb	[pc, r1]
   10238:	2b2b2b2b 	.word	0x2b2b2b2b
   1023c:	2b2b212b 	.word	0x2b2b212b
   10240:	2b2b2b2b 	.word	0x2b2b2b2b
   10244:	2b2b2b2b 	.word	0x2b2b2b2b
   10248:	212b2b2b 	.word	0x212b2b2b
   1024c:	2121      	.short	0x2121
   1024e:	292a      	cmp	r1, #42	; 0x2a
   10250:	d01d      	beq.n	1028e <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
   10252:	dc0b      	bgt.n	1026c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x48>
   10254:	f1a1 011e 	sub.w	r1, r1, #30
   10258:	290c      	cmp	r1, #12
   1025a:	d218      	bcs.n	1028e <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
   1025c:	e8df f001 	tbb	[pc, r1]
   10260:	17171717 	.word	0x17171717
   10264:	17171717 	.word	0x17171717
   10268:	0d171717 	.word	0x0d171717
   1026c:	393a      	subs	r1, #58	; 0x3a
   1026e:	2904      	cmp	r1, #4
   10270:	d20d      	bcs.n	1028e <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
   10272:	e8df f001 	tbb	[pc, r1]
   10276:	020c      	.short	0x020c
   10278:	020c      	.short	0x020c
   1027a:	8820      	ldrh	r0, [r4, #0]
   1027c:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
   10280:	d205      	bcs.n	1028e <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
   10282:	4669      	mov	r1, sp
   10284:	f7fe fc27 	bl	ead6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10288:	b118      	cbz	r0, 10292 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6e>
   1028a:	2002      	movs	r0, #2
   1028c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1028e:	2012      	movs	r0, #18
   10290:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   10292:	9d01      	ldr	r5, [sp, #4]
   10294:	4668      	mov	r0, sp
   10296:	462e      	mov	r6, r5
   10298:	f505 75c4 	add.w	r5, r5, #392	; 0x188
   1029c:	f206 1689 	addw	r6, r6, #393	; 0x189
   102a0:	f000 fead 	bl	10ffe <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x312>
   102a4:	b138      	cbz	r0, 102b6 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x92>
   102a6:	7828      	ldrb	r0, [r5, #0]
   102a8:	f88d 0008 	strb.w	r0, [sp, #8]
   102ac:	9802      	ldr	r0, [sp, #8]
   102ae:	9002      	str	r0, [sp, #8]
   102b0:	f89d 0008 	ldrb.w	r0, [sp, #8]
   102b4:	b108      	cbz	r0, 102ba <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x96>
   102b6:	200c      	movs	r0, #12
   102b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   102ba:	20ff      	movs	r0, #255	; 0xff
   102bc:	7028      	strb	r0, [r5, #0]
   102be:	78a0      	ldrb	r0, [r4, #2]
   102c0:	7030      	strb	r0, [r6, #0]
   102c2:	4668      	mov	r0, sp
   102c4:	f7fe ffa4 	bl	f210 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
   102c8:	2000      	movs	r0, #0
   102ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

000102cc <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>:
   102cc:	b510      	push	{r4, lr}
   102ce:	4604      	mov	r4, r0
   102d0:	7800      	ldrb	r0, [r0, #0]
   102d2:	b118      	cbz	r0, 102dc <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
   102d4:	2801      	cmp	r0, #1
   102d6:	d001      	beq.n	102dc <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
   102d8:	2012      	movs	r0, #18
   102da:	bd10      	pop	{r4, pc}
   102dc:	f000 fec8 	bl	11070 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x384>
   102e0:	b120      	cbz	r0, 102ec <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
   102e2:	f7f6 fc25 	bl	6b30 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
   102e6:	b108      	cbz	r0, 102ec <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
   102e8:	200c      	movs	r0, #12
   102ea:	bd10      	pop	{r4, pc}
   102ec:	7820      	ldrb	r0, [r4, #0]
   102ee:	f7ff ff92 	bl	10216 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8a>
   102f2:	1de2      	adds	r2, r4, #7
   102f4:	f104 0317 	add.w	r3, r4, #23
   102f8:	1c61      	adds	r1, r4, #1
   102fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   102fe:	f7f6 bc49 	b.w	6b94 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>

00010302 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
   10302:	b510      	push	{r4, lr}
   10304:	4604      	mov	r4, r0
   10306:	f000 ffa0 	bl	1124a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x55e>
   1030a:	b108      	cbz	r0, 10310 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
   1030c:	200c      	movs	r0, #12
   1030e:	bd10      	pop	{r4, pc}
   10310:	7820      	ldrb	r0, [r4, #0]
   10312:	b118      	cbz	r0, 1031c <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
   10314:	2801      	cmp	r0, #1
   10316:	d001      	beq.n	1031c <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
   10318:	2012      	movs	r0, #18
   1031a:	bd10      	pop	{r4, pc}
   1031c:	f7ff ff7b 	bl	10216 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8a>
   10320:	1c61      	adds	r1, r4, #1
   10322:	f7f6 fcaf 	bl	6c84 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
   10326:	b108      	cbz	r0, 1032c <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
   10328:	2000      	movs	r0, #0
   1032a:	bd10      	pop	{r4, pc}
   1032c:	2007      	movs	r0, #7
   1032e:	bd10      	pop	{r4, pc}

00010330 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>:
   10330:	b510      	push	{r4, lr}
   10332:	f000 fe9d 	bl	11070 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x384>
   10336:	b120      	cbz	r0, 10342 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
   10338:	f7f6 fbfa 	bl	6b30 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
   1033c:	b108      	cbz	r0, 10342 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
   1033e:	200c      	movs	r0, #12
   10340:	bd10      	pop	{r4, pc}
   10342:	f7f6 fc6d 	bl	6c20 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>
   10346:	2000      	movs	r0, #0
   10348:	bd10      	pop	{r4, pc}

0001034a <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
   1034a:	b510      	push	{r4, lr}
   1034c:	f000 ff7d 	bl	1124a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x55e>
   10350:	b108      	cbz	r0, 10356 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
   10352:	200c      	movs	r0, #12
   10354:	bd10      	pop	{r4, pc}
   10356:	f7f6 fcbd 	bl	6cd4 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
   1035a:	2000      	movs	r0, #0
   1035c:	bd10      	pop	{r4, pc}

0001035e <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
   1035e:	b510      	push	{r4, lr}
   10360:	460b      	mov	r3, r1
   10362:	2201      	movs	r2, #1
   10364:	f100 0110 	add.w	r1, r0, #16
   10368:	f7fe fb97 	bl	ea9a <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
   1036c:	2000      	movs	r0, #0
   1036e:	bd10      	pop	{r4, pc}

00010370 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
   10370:	b510      	push	{r4, lr}
   10372:	8800      	ldrh	r0, [r0, #0]
   10374:	2100      	movs	r1, #0
   10376:	f7fe f925 	bl	e5c4 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   1037a:	b118      	cbz	r0, 10384 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
   1037c:	f890 118b 	ldrb.w	r1, [r0, #395]	; 0x18b
   10380:	b111      	cbz	r1, 10388 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
   10382:	e007      	b.n	10394 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
   10384:	2002      	movs	r0, #2
   10386:	bd10      	pop	{r4, pc}
   10388:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
   1038c:	2914      	cmp	r1, #20
   1038e:	d003      	beq.n	10398 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
   10390:	2915      	cmp	r1, #21
   10392:	d001      	beq.n	10398 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
   10394:	200c      	movs	r0, #12
   10396:	bd10      	pop	{r4, pc}
   10398:	2102      	movs	r1, #2
   1039a:	f880 118b 	strb.w	r1, [r0, #395]	; 0x18b
   1039e:	2000      	movs	r0, #0
   103a0:	bd10      	pop	{r4, pc}

000103a2 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>:
   103a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   103a4:	4605      	mov	r5, r0
   103a6:	8800      	ldrh	r0, [r0, #0]
   103a8:	2100      	movs	r1, #0
   103aa:	f7fe f90b 	bl	e5c4 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   103ae:	0004      	movs	r4, r0
   103b0:	d003      	beq.n	103ba <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x18>
   103b2:	f894 018b 	ldrb.w	r0, [r4, #395]	; 0x18b
   103b6:	b110      	cbz	r0, 103be <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x1c>
   103b8:	e011      	b.n	103de <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3c>
   103ba:	2002      	movs	r0, #2
   103bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   103be:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
   103c2:	2814      	cmp	r0, #20
   103c4:	d001      	beq.n	103ca <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x28>
   103c6:	2815      	cmp	r0, #21
   103c8:	d109      	bne.n	103de <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3c>
   103ca:	f894 01dc 	ldrb.w	r0, [r4, #476]	; 0x1dc
   103ce:	f88d 0000 	strb.w	r0, [sp]
   103d2:	9800      	ldr	r0, [sp, #0]
   103d4:	9000      	str	r0, [sp, #0]
   103d6:	f89d 0000 	ldrb.w	r0, [sp]
   103da:	2601      	movs	r6, #1
   103dc:	b108      	cbz	r0, 103e2 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x40>
   103de:	200c      	movs	r0, #12
   103e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   103e2:	2210      	movs	r2, #16
   103e4:	1ca9      	adds	r1, r5, #2
   103e6:	f504 70c6 	add.w	r0, r4, #396	; 0x18c
   103ea:	f7fd f8a9 	bl	d540 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   103ee:	f884 618b 	strb.w	r6, [r4, #395]	; 0x18b
   103f2:	2000      	movs	r0, #0
   103f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000103f6 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
   103f6:	b510      	push	{r4, lr}
   103f8:	2108      	movs	r1, #8
   103fa:	f7f4 ff53 	bl	52a4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
   103fe:	2000      	movs	r0, #0
   10400:	bd10      	pop	{r4, pc}

00010402 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
   10402:	b510      	push	{r4, lr}
   10404:	4604      	mov	r4, r0
   10406:	f000 fe1c 	bl	11042 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x356>
   1040a:	f7ff f98e 	bl	f72a <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
   1040e:	7020      	strb	r0, [r4, #0]
   10410:	2000      	movs	r0, #0
   10412:	bd10      	pop	{r4, pc}

00010414 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
   10414:	b510      	push	{r4, lr}
   10416:	4604      	mov	r4, r0
   10418:	f000 fde8 	bl	10fec <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
   1041c:	b140      	cbz	r0, 10430 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A+0x1c>
   1041e:	20fb      	movs	r0, #251	; 0xfb
   10420:	8020      	strh	r0, [r4, #0]
   10422:	f640 0148 	movw	r1, #2120	; 0x848
   10426:	8061      	strh	r1, [r4, #2]
   10428:	80a0      	strh	r0, [r4, #4]
   1042a:	80e1      	strh	r1, [r4, #6]
   1042c:	2000      	movs	r0, #0
   1042e:	bd10      	pop	{r4, pc}
   10430:	2001      	movs	r0, #1
   10432:	bd10      	pop	{r4, pc}

00010434 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
   10434:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
   10436:	460d      	mov	r5, r1
   10438:	4606      	mov	r6, r0
   1043a:	f000 fdf9 	bl	11030 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x344>
   1043e:	b300      	cbz	r0, 10482 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x4e>
   10440:	8830      	ldrh	r0, [r6, #0]
   10442:	4669      	mov	r1, sp
   10444:	f7fe fb47 	bl	ead6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10448:	2800      	cmp	r0, #0
   1044a:	d119      	bne.n	10480 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x4c>
   1044c:	9c01      	ldr	r4, [sp, #4]
   1044e:	2700      	movs	r7, #0
   10450:	f884 7070 	strb.w	r7, [r4, #112]	; 0x70
   10454:	f814 0f6e 	ldrb.w	r0, [r4, #110]!
   10458:	f000 fc64 	bl	10d24 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x38>
   1045c:	70a8      	strb	r0, [r5, #2]
   1045e:	7860      	ldrb	r0, [r4, #1]
   10460:	f000 fc60 	bl	10d24 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x38>
   10464:	70e8      	strb	r0, [r5, #3]
   10466:	78a0      	ldrb	r0, [r4, #2]
   10468:	f88d 0008 	strb.w	r0, [sp, #8]
   1046c:	9802      	ldr	r0, [sp, #8]
   1046e:	9002      	str	r0, [sp, #8]
   10470:	f89d 0008 	ldrb.w	r0, [sp, #8]
   10474:	3c6e      	subs	r4, #110	; 0x6e
   10476:	2800      	cmp	r0, #0
   10478:	d1ea      	bne.n	10450 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x1c>
   1047a:	8830      	ldrh	r0, [r6, #0]
   1047c:	8028      	strh	r0, [r5, #0]
   1047e:	2000      	movs	r0, #0
   10480:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   10482:	2001      	movs	r0, #1
   10484:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00010486 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
   10486:	b51c      	push	{r2, r3, r4, lr}
   10488:	8800      	ldrh	r0, [r0, #0]
   1048a:	4669      	mov	r1, sp
   1048c:	f7fe fb23 	bl	ead6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10490:	2800      	cmp	r0, #0
   10492:	d10c      	bne.n	104ae <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x28>
   10494:	f89d 0000 	ldrb.w	r0, [sp]
   10498:	2801      	cmp	r0, #1
   1049a:	d10f      	bne.n	104bc <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x36>
   1049c:	9801      	ldr	r0, [sp, #4]
   1049e:	f000 fdb1 	bl	11004 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x318>
   104a2:	b128      	cbz	r0, 104b0 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2a>
   104a4:	9801      	ldr	r0, [sp, #4]
   104a6:	f890 01c5 	ldrb.w	r0, [r0, #453]	; 0x1c5
   104aa:	b118      	cbz	r0, 104b4 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2e>
   104ac:	203a      	movs	r0, #58	; 0x3a
   104ae:	bd1c      	pop	{r2, r3, r4, pc}
   104b0:	2002      	movs	r0, #2
   104b2:	bd1c      	pop	{r2, r3, r4, pc}
   104b4:	9901      	ldr	r1, [sp, #4]
   104b6:	2001      	movs	r0, #1
   104b8:	f881 01c5 	strb.w	r0, [r1, #453]	; 0x1c5
   104bc:	2000      	movs	r0, #0
   104be:	bd1c      	pop	{r2, r3, r4, pc}

000104c0 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>:
   104c0:	2108      	movs	r1, #8
   104c2:	7001      	strb	r1, [r0, #0]
   104c4:	2000      	movs	r0, #0
   104c6:	4770      	bx	lr

000104c8 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
   104c8:	b510      	push	{r4, lr}
   104ca:	4604      	mov	r4, r0
   104cc:	20d8      	movs	r0, #216	; 0xd8
   104ce:	7020      	strb	r0, [r4, #0]
   104d0:	f000 fd6d 	bl	10fae <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2c2>
   104d4:	7060      	strb	r0, [r4, #1]
   104d6:	2000      	movs	r0, #0
   104d8:	bd10      	pop	{r4, pc}

000104da <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
   104da:	2108      	movs	r1, #8
   104dc:	7001      	strb	r1, [r0, #0]
   104de:	2000      	movs	r0, #0
   104e0:	4770      	bx	lr

000104e2 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>:
   104e2:	b510      	push	{r4, lr}
   104e4:	4604      	mov	r4, r0
   104e6:	7800      	ldrb	r0, [r0, #0]
   104e8:	b108      	cbz	r0, 104ee <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0xc>
   104ea:	2801      	cmp	r0, #1
   104ec:	d110      	bne.n	10510 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
   104ee:	f000 fdbf 	bl	11070 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x384>
   104f2:	b120      	cbz	r0, 104fe <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
   104f4:	f7f6 fb1c 	bl	6b30 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
   104f8:	b108      	cbz	r0, 104fe <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
   104fa:	200c      	movs	r0, #12
   104fc:	bd10      	pop	{r4, pc}
   104fe:	7820      	ldrb	r0, [r4, #0]
   10500:	f7ff fe89 	bl	10216 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8a>
   10504:	1c61      	adds	r1, r4, #1
   10506:	f7fe faae 	bl	ea66 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>
   1050a:	b108      	cbz	r0, 10510 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
   1050c:	2000      	movs	r0, #0
   1050e:	bd10      	pop	{r4, pc}
   10510:	2012      	movs	r0, #18
   10512:	bd10      	pop	{r4, pc}

00010514 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
   10514:	b510      	push	{r4, lr}
   10516:	4604      	mov	r4, r0
   10518:	f000 fe97 	bl	1124a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x55e>
   1051c:	b108      	cbz	r0, 10522 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
   1051e:	200c      	movs	r0, #12
   10520:	bd10      	pop	{r4, pc}
   10522:	7820      	ldrb	r0, [r4, #0]
   10524:	b108      	cbz	r0, 1052a <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
   10526:	2801      	cmp	r0, #1
   10528:	d107      	bne.n	1053a <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
   1052a:	f7ff fe74 	bl	10216 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8a>
   1052e:	1c61      	adds	r1, r4, #1
   10530:	f7fe faa8 	bl	ea84 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
   10534:	b108      	cbz	r0, 1053a <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
   10536:	2000      	movs	r0, #0
   10538:	bd10      	pop	{r4, pc}
   1053a:	2012      	movs	r0, #18
   1053c:	bd10      	pop	{r4, pc}

0001053e <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>:
   1053e:	b510      	push	{r4, lr}
   10540:	4604      	mov	r4, r0
   10542:	f000 fd95 	bl	11070 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x384>
   10546:	b108      	cbz	r0, 1054c <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0xe>
   10548:	200c      	movs	r0, #12
   1054a:	bd10      	pop	{r4, pc}
   1054c:	7820      	ldrb	r0, [r4, #0]
   1054e:	f000 0001 	and.w	r0, r0, #1
   10552:	f7f6 fae7 	bl	6b24 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>
   10556:	2000      	movs	r0, #0
   10558:	bd10      	pop	{r4, pc}

0001055a <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
   1055a:	b51c      	push	{r2, r3, r4, lr}
   1055c:	4604      	mov	r4, r0
   1055e:	f000 fd70 	bl	11042 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x356>
   10562:	2000      	movs	r0, #0
   10564:	f88d 0002 	strb.w	r0, [sp, #2]
   10568:	2103      	movs	r1, #3
   1056a:	f88d 1001 	strb.w	r1, [sp, #1]
   1056e:	f814 1b01 	ldrb.w	r1, [r4], #1
   10572:	f88d 1003 	strb.w	r1, [sp, #3]
   10576:	f88d 0000 	strb.w	r0, [sp]
   1057a:	4668      	mov	r0, sp
   1057c:	9401      	str	r4, [sp, #4]
   1057e:	f000 f9f6 	bl	1096e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
   10582:	bd1c      	pop	{r2, r3, r4, pc}

00010584 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
   10584:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   10586:	4605      	mov	r5, r0
   10588:	f000 fd5b 	bl	11042 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x356>
   1058c:	4606      	mov	r6, r0
   1058e:	7828      	ldrb	r0, [r5, #0]
   10590:	2400      	movs	r4, #0
   10592:	b160      	cbz	r0, 105ae <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
   10594:	f88d 4000 	strb.w	r4, [sp]
   10598:	2001      	movs	r0, #1
   1059a:	f10d 0101 	add.w	r1, sp, #1
   1059e:	f7f5 fc8d 	bl	5ebc <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
   105a2:	b120      	cbz	r0, 105ae <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
   105a4:	4668      	mov	r0, sp
   105a6:	f000 f897 	bl	106d8 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>
   105aa:	2800      	cmp	r0, #0
   105ac:	d112      	bne.n	105d4 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
   105ae:	f88d 400c 	strb.w	r4, [sp, #12]
   105b2:	4630      	mov	r0, r6
   105b4:	f7ff f8af 	bl	f716 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
   105b8:	b118      	cbz	r0, 105c2 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x3e>
   105ba:	2080      	movs	r0, #128	; 0x80
   105bc:	f8ad 000d 	strh.w	r0, [sp, #13]
   105c0:	e001      	b.n	105c6 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x42>
   105c2:	f8ad 400d 	strh.w	r4, [sp, #13]
   105c6:	f88d 400f 	strb.w	r4, [sp, #15]
   105ca:	7828      	ldrb	r0, [r5, #0]
   105cc:	2801      	cmp	r0, #1
   105ce:	d003      	beq.n	105d8 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x54>
   105d0:	b138      	cbz	r0, 105e2 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x5e>
   105d2:	2012      	movs	r0, #18
   105d4:	b004      	add	sp, #16
   105d6:	bd70      	pop	{r4, r5, r6, pc}
   105d8:	a903      	add	r1, sp, #12
   105da:	4630      	mov	r0, r6
   105dc:	f7fa ff62 	bl	b4a4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
   105e0:	e7f8      	b.n	105d4 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
   105e2:	4630      	mov	r0, r6
   105e4:	f000 fd4b 	bl	1107e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x392>
   105e8:	e7f4      	b.n	105d4 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>

000105ea <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
   105ea:	b530      	push	{r4, r5, lr}
   105ec:	b08b      	sub	sp, #44	; 0x2c
   105ee:	4604      	mov	r4, r0
   105f0:	f000 fd27 	bl	11042 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x356>
   105f4:	4602      	mov	r2, r0
   105f6:	7920      	ldrb	r0, [r4, #4]
   105f8:	2804      	cmp	r0, #4
   105fa:	d803      	bhi.n	10604 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1a>
   105fc:	8860      	ldrh	r0, [r4, #2]
   105fe:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
   10602:	d902      	bls.n	1060a <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x20>
   10604:	2012      	movs	r0, #18
   10606:	b00b      	add	sp, #44	; 0x2c
   10608:	bd30      	pop	{r4, r5, pc}
   1060a:	2500      	movs	r5, #0
   1060c:	f88d 5004 	strb.w	r5, [sp, #4]
   10610:	7921      	ldrb	r1, [r4, #4]
   10612:	9500      	str	r5, [sp, #0]
   10614:	f89d 0000 	ldrb.w	r0, [sp]
   10618:	2905      	cmp	r1, #5
   1061a:	f040 0010 	orr.w	r0, r0, #16
   1061e:	f88d 0000 	strb.w	r0, [sp]
   10622:	d254      	bcs.n	106ce <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xe4>
   10624:	e8df f001 	tbb	[pc, r1]
   10628:	11050803 	.word	0x11050803
   1062c:	000b      	.short	0x000b
   1062e:	f040 0001 	orr.w	r0, r0, #1
   10632:	f040 0002 	orr.w	r0, r0, #2
   10636:	e006      	b.n	10646 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x5c>
   10638:	f040 0009 	orr.w	r0, r0, #9
   1063c:	e001      	b.n	10642 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x58>
   1063e:	f040 0001 	orr.w	r0, r0, #1
   10642:	f040 0004 	orr.w	r0, r0, #4
   10646:	f88d 0000 	strb.w	r0, [sp]
   1064a:	f8bd 0000 	ldrh.w	r0, [sp]
   1064e:	9000      	str	r0, [sp, #0]
   10650:	f8bd 0000 	ldrh.w	r0, [sp]
   10654:	f8ad 0005 	strh.w	r0, [sp, #5]
   10658:	8821      	ldrh	r1, [r4, #0]
   1065a:	f8dd 0006 	ldr.w	r0, [sp, #6]
   1065e:	f361 201f 	bfi	r0, r1, #8, #24
   10662:	f8cd 0006 	str.w	r0, [sp, #6]
   10666:	8861      	ldrh	r1, [r4, #2]
   10668:	f8dd 0009 	ldr.w	r0, [sp, #9]
   1066c:	f361 201f 	bfi	r0, r1, #8, #24
   10670:	f8cd 0009 	str.w	r0, [sp, #9]
   10674:	7b60      	ldrb	r0, [r4, #13]
   10676:	f88d 000d 	strb.w	r0, [sp, #13]
   1067a:	7960      	ldrb	r0, [r4, #5]
   1067c:	f88d 000e 	strb.w	r0, [sp, #14]
   10680:	79a0      	ldrb	r0, [r4, #6]
   10682:	f88d 000f 	strb.w	r0, [sp, #15]
   10686:	f8d4 0007 	ldr.w	r0, [r4, #7]
   1068a:	9004      	str	r0, [sp, #16]
   1068c:	f8b4 000b 	ldrh.w	r0, [r4, #11]
   10690:	f8ad 0014 	strh.w	r0, [sp, #20]
   10694:	7ba0      	ldrb	r0, [r4, #14]
   10696:	f88d 0016 	strb.w	r0, [sp, #22]
   1069a:	207f      	movs	r0, #127	; 0x7f
   1069c:	f88d 0017 	strb.w	r0, [sp, #23]
   106a0:	2001      	movs	r0, #1
   106a2:	f88d 0018 	strb.w	r0, [sp, #24]
   106a6:	f88d 5019 	strb.w	r5, [sp, #25]
   106aa:	f88d 001a 	strb.w	r0, [sp, #26]
   106ae:	f88d 501b 	strb.w	r5, [sp, #27]
   106b2:	4610      	mov	r0, r2
   106b4:	f7ff f84b 	bl	f74e <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
   106b8:	f88d 001c 	strb.w	r0, [sp, #28]
   106bc:	f88d 501d 	strb.w	r5, [sp, #29]
   106c0:	f88d 501e 	strb.w	r5, [sp, #30]
   106c4:	a909      	add	r1, sp, #36	; 0x24
   106c6:	a801      	add	r0, sp, #4
   106c8:	f000 f8dc 	bl	10884 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
   106cc:	e79b      	b.n	10606 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1c>
   106ce:	f241 01ff 	movw	r1, #4351	; 0x10ff
   106d2:	2039      	movs	r0, #57	; 0x39
   106d4:	f7f4 fd4c 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

000106d8 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>:
   106d8:	b570      	push	{r4, r5, r6, lr}
   106da:	4604      	mov	r4, r0
   106dc:	7800      	ldrb	r0, [r0, #0]
   106de:	2101      	movs	r1, #1
   106e0:	f7fd ff70 	bl	e5c4 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   106e4:	0005      	movs	r5, r0
   106e6:	d007      	beq.n	106f8 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x20>
   106e8:	f7ff f9f6 	bl	fad8 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   106ec:	b160      	cbz	r0, 10708 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
   106ee:	4628      	mov	r0, r5
   106f0:	f7ff f817 	bl	f722 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   106f4:	b110      	cbz	r0, 106fc <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x24>
   106f6:	e005      	b.n	10704 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x2c>
   106f8:	2042      	movs	r0, #66	; 0x42
   106fa:	bd70      	pop	{r4, r5, r6, pc}
   106fc:	4628      	mov	r0, r5
   106fe:	f7ff f806 	bl	f70e <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   10702:	b108      	cbz	r0, 10708 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
   10704:	200c      	movs	r0, #12
   10706:	bd70      	pop	{r4, r5, r6, pc}
   10708:	1c61      	adds	r1, r4, #1
   1070a:	4628      	mov	r0, r5
   1070c:	f7ff f817 	bl	f73e <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>
   10710:	2000      	movs	r0, #0
   10712:	bd70      	pop	{r4, r5, r6, pc}

00010714 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
   10714:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   10716:	460d      	mov	r5, r1
   10718:	4604      	mov	r4, r0
   1071a:	f000 fc67 	bl	10fec <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
   1071e:	b130      	cbz	r0, 1072e <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
   10720:	88a2      	ldrh	r2, [r4, #4]
   10722:	f244 2090 	movw	r0, #17040	; 0x4290
   10726:	4282      	cmp	r2, r0
   10728:	d903      	bls.n	10732 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1e>
   1072a:	2012      	movs	r0, #18
   1072c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   1072e:	2001      	movs	r0, #1
   10730:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   10732:	f640 0048 	movw	r0, #2120	; 0x848
   10736:	4282      	cmp	r2, r0
   10738:	d300      	bcc.n	1073c <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x28>
   1073a:	4602      	mov	r2, r0
   1073c:	8820      	ldrh	r0, [r4, #0]
   1073e:	f8ad 0000 	strh.w	r0, [sp]
   10742:	8860      	ldrh	r0, [r4, #2]
   10744:	f8ad 0002 	strh.w	r0, [sp, #2]
   10748:	f8ad 2004 	strh.w	r2, [sp, #4]
   1074c:	8860      	ldrh	r0, [r4, #2]
   1074e:	f8ad 0006 	strh.w	r0, [sp, #6]
   10752:	f8ad 2008 	strh.w	r2, [sp, #8]
   10756:	8820      	ldrh	r0, [r4, #0]
   10758:	8028      	strh	r0, [r5, #0]
   1075a:	4668      	mov	r0, sp
   1075c:	f000 fcb5 	bl	110ca <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3de>
   10760:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00010762 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
   10762:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   10764:	4604      	mov	r4, r0
   10766:	f000 fc63 	bl	11030 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x344>
   1076a:	b1b0      	cbz	r0, 1079a <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x38>
   1076c:	f10d 0007 	add.w	r0, sp, #7
   10770:	9000      	str	r0, [sp, #0]
   10772:	7922      	ldrb	r2, [r4, #4]
   10774:	78e1      	ldrb	r1, [r4, #3]
   10776:	78a0      	ldrb	r0, [r4, #2]
   10778:	f10d 0306 	add.w	r3, sp, #6
   1077c:	f000 fd29 	bl	111d2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4e6>
   10780:	2800      	cmp	r0, #0
   10782:	d109      	bne.n	10798 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x36>
   10784:	8820      	ldrh	r0, [r4, #0]
   10786:	f8ad 0004 	strh.w	r0, [sp, #4]
   1078a:	f8b4 0005 	ldrh.w	r0, [r4, #5]
   1078e:	f8ad 0008 	strh.w	r0, [sp, #8]
   10792:	a801      	add	r0, sp, #4
   10794:	f000 f9a6 	bl	10ae4 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
   10798:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   1079a:	2001      	movs	r0, #1
   1079c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0001079e <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>:
   1079e:	b510      	push	{r4, lr}
   107a0:	4604      	mov	r4, r0
   107a2:	f000 fc65 	bl	11070 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x384>
   107a6:	b120      	cbz	r0, 107b2 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
   107a8:	f7f6 f9c2 	bl	6b30 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
   107ac:	b108      	cbz	r0, 107b2 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
   107ae:	200c      	movs	r0, #12
   107b0:	bd10      	pop	{r4, pc}
   107b2:	7820      	ldrb	r0, [r4, #0]
   107b4:	f7ff fd2f 	bl	10216 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8a>
   107b8:	79e2      	ldrb	r2, [r4, #7]
   107ba:	1c61      	adds	r1, r4, #1
   107bc:	f7f6 f966 	bl	6a8c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>
   107c0:	b108      	cbz	r0, 107c6 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x28>
   107c2:	2000      	movs	r0, #0
   107c4:	bd10      	pop	{r4, pc}
   107c6:	2002      	movs	r0, #2
   107c8:	bd10      	pop	{r4, pc}

000107ca <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
   107ca:	b510      	push	{r4, lr}
   107cc:	4604      	mov	r4, r0
   107ce:	2001      	movs	r0, #1
   107d0:	f000 facb 	bl	10d6a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x7e>
   107d4:	b128      	cbz	r0, 107e2 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
   107d6:	4621      	mov	r1, r4
   107d8:	2001      	movs	r0, #1
   107da:	f7f5 fb87 	bl	5eec <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
   107de:	2000      	movs	r0, #0
   107e0:	bd10      	pop	{r4, pc}
   107e2:	200c      	movs	r0, #12
   107e4:	bd10      	pop	{r4, pc}

000107e6 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>:
   107e6:	b510      	push	{r4, lr}
   107e8:	8800      	ldrh	r0, [r0, #0]
   107ea:	f7f6 fa2f 	bl	6c4c <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>
   107ee:	b108      	cbz	r0, 107f4 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI+0xe>
   107f0:	2000      	movs	r0, #0
   107f2:	bd10      	pop	{r4, pc}
   107f4:	2030      	movs	r0, #48	; 0x30
   107f6:	bd10      	pop	{r4, pc}

000107f8 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
   107f8:	b51c      	push	{r2, r3, r4, lr}
   107fa:	4604      	mov	r4, r0
   107fc:	f000 fc21 	bl	11042 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x356>
   10800:	2000      	movs	r0, #0
   10802:	f88d 0000 	strb.w	r0, [sp]
   10806:	f88d 0002 	strb.w	r0, [sp, #2]
   1080a:	2003      	movs	r0, #3
   1080c:	f88d 0001 	strb.w	r0, [sp, #1]
   10810:	f814 0b01 	ldrb.w	r0, [r4], #1
   10814:	f88d 0003 	strb.w	r0, [sp, #3]
   10818:	4668      	mov	r0, sp
   1081a:	9401      	str	r4, [sp, #4]
   1081c:	f000 f910 	bl	10a40 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
   10820:	bd1c      	pop	{r2, r3, r4, pc}

00010822 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
   10822:	b51c      	push	{r2, r3, r4, lr}
   10824:	4604      	mov	r4, r0
   10826:	f000 fbe1 	bl	10fec <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
   1082a:	b178      	cbz	r0, 1084c <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y+0x2a>
   1082c:	8820      	ldrh	r0, [r4, #0]
   1082e:	f8ad 0000 	strh.w	r0, [sp]
   10832:	8860      	ldrh	r0, [r4, #2]
   10834:	f8ad 0002 	strh.w	r0, [sp, #2]
   10838:	8820      	ldrh	r0, [r4, #0]
   1083a:	f8ad 0004 	strh.w	r0, [sp, #4]
   1083e:	8860      	ldrh	r0, [r4, #2]
   10840:	f8ad 0006 	strh.w	r0, [sp, #6]
   10844:	4668      	mov	r0, sp
   10846:	f7fa fefb 	bl	b640 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
   1084a:	bd1c      	pop	{r2, r3, r4, pc}
   1084c:	2001      	movs	r0, #1
   1084e:	bd1c      	pop	{r2, r3, r4, pc}

00010850 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
   10850:	b510      	push	{r4, lr}
   10852:	f7f5 fb6f 	bl	5f34 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
   10856:	2000      	movs	r0, #0
   10858:	bd10      	pop	{r4, pc}

0001085a <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
   1085a:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   1085c:	460c      	mov	r4, r1
   1085e:	4605      	mov	r5, r0
   10860:	f000 fbc4 	bl	10fec <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
   10864:	b160      	cbz	r0, 10880 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x26>
   10866:	4669      	mov	r1, sp
   10868:	4628      	mov	r0, r5
   1086a:	f7fe f934 	bl	ead6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1086e:	2800      	cmp	r0, #0
   10870:	d105      	bne.n	1087e <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x24>
   10872:	2100      	movs	r1, #0
   10874:	4622      	mov	r2, r4
   10876:	9801      	ldr	r0, [sp, #4]
   10878:	f000 fb43 	bl	10f02 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x216>
   1087c:	2000      	movs	r0, #0
   1087e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   10880:	2001      	movs	r0, #1
   10882:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

00010884 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
   10884:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   10888:	460f      	mov	r7, r1
   1088a:	4605      	mov	r5, r0
   1088c:	7806      	ldrb	r6, [r0, #0]
   1088e:	f000 fac8 	bl	10e22 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x136>
   10892:	2800      	cmp	r0, #0
   10894:	d10a      	bne.n	108ac <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
   10896:	4628      	mov	r0, r5
   10898:	f000 fa9d 	bl	10dd6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xea>
   1089c:	2800      	cmp	r0, #0
   1089e:	d105      	bne.n	108ac <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
   108a0:	2001      	movs	r0, #1
   108a2:	f7f4 fe4f 	bl	5544 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
   108a6:	4286      	cmp	r6, r0
   108a8:	d302      	bcc.n	108b0 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x2c>
   108aa:	2007      	movs	r0, #7
   108ac:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   108b0:	2101      	movs	r1, #1
   108b2:	4630      	mov	r0, r6
   108b4:	f7fd fe86 	bl	e5c4 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   108b8:	0004      	movs	r4, r0
   108ba:	d004      	beq.n	108c6 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x42>
   108bc:	f7ff f90c 	bl	fad8 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   108c0:	b150      	cbz	r0, 108d8 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x54>
   108c2:	200c      	movs	r0, #12
   108c4:	e7f2      	b.n	108ac <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
   108c6:	2200      	movs	r2, #0
   108c8:	2101      	movs	r1, #1
   108ca:	4630      	mov	r0, r6
   108cc:	f7fd fe70 	bl	e5b0 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
   108d0:	0004      	movs	r4, r0
   108d2:	d00f      	beq.n	108f4 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x70>
   108d4:	f7fe fec0 	bl	f658 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
   108d8:	4620      	mov	r0, r4
   108da:	f7fe ff26 	bl	f72a <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
   108de:	7038      	strb	r0, [r7, #0]
   108e0:	74e8      	strb	r0, [r5, #19]
   108e2:	4629      	mov	r1, r5
   108e4:	4620      	mov	r0, r4
   108e6:	f7f6 ffdb 	bl	78a0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>
   108ea:	4606      	mov	r6, r0
   108ec:	7e68      	ldrb	r0, [r5, #25]
   108ee:	b1d0      	cbz	r0, 10926 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa2>
   108f0:	b12e      	cbz	r6, 108fe <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x7a>
   108f2:	e018      	b.n	10926 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa2>
   108f4:	f241 218a 	movw	r1, #4746	; 0x128a
   108f8:	2039      	movs	r0, #57	; 0x39
   108fa:	f7f4 fc39 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   108fe:	2200      	movs	r2, #0
   10900:	4668      	mov	r0, sp
   10902:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   10904:	f7fd ff1f 	bl	e746 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   10908:	2200      	movs	r2, #0
   1090a:	2101      	movs	r1, #1
   1090c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1090e:	f7fd ff90 	bl	e832 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   10912:	2204      	movs	r2, #4
   10914:	4668      	mov	r0, sp
   10916:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   10918:	f7fd ff15 	bl	e746 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   1091c:	2200      	movs	r2, #0
   1091e:	4611      	mov	r1, r2
   10920:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   10922:	f7fd ff86 	bl	e832 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   10926:	4630      	mov	r0, r6
   10928:	e7c0      	b.n	108ac <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>

0001092a <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
   1092a:	b510      	push	{r4, lr}
   1092c:	4604      	mov	r4, r0
   1092e:	2000      	movs	r0, #0
   10930:	f000 fa1b 	bl	10d6a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x7e>
   10934:	b128      	cbz	r0, 10942 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x18>
   10936:	4621      	mov	r1, r4
   10938:	2000      	movs	r0, #0
   1093a:	f7f5 fad7 	bl	5eec <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
   1093e:	2000      	movs	r0, #0
   10940:	bd10      	pop	{r4, pc}
   10942:	200c      	movs	r0, #12
   10944:	bd10      	pop	{r4, pc}

00010946 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
   10946:	b510      	push	{r4, lr}
   10948:	7800      	ldrb	r0, [r0, #0]
   1094a:	f000 0001 	and.w	r0, r0, #1
   1094e:	f7f7 fee3 	bl	8718 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>
   10952:	2000      	movs	r0, #0
   10954:	bd10      	pop	{r4, pc}

00010956 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
   10956:	b510      	push	{r4, lr}
   10958:	4604      	mov	r4, r0
   1095a:	f000 fb47 	bl	10fec <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
   1095e:	b120      	cbz	r0, 1096a <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I+0x14>
   10960:	4620      	mov	r0, r4
   10962:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10966:	f000 bbb0 	b.w	110ca <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3de>
   1096a:	2001      	movs	r0, #1
   1096c:	bd10      	pop	{r4, pc}

0001096e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
   1096e:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   10972:	4606      	mov	r6, r0
   10974:	7845      	ldrb	r5, [r0, #1]
   10976:	7800      	ldrb	r0, [r0, #0]
   10978:	2101      	movs	r1, #1
   1097a:	f7fd fe23 	bl	e5c4 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   1097e:	0004      	movs	r4, r0
   10980:	d01e      	beq.n	109c0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x52>
   10982:	f7fe fe95 	bl	f6b0 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
   10986:	78f1      	ldrb	r1, [r6, #3]
   10988:	4281      	cmp	r1, r0
   1098a:	d800      	bhi.n	1098e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x20>
   1098c:	4608      	mov	r0, r1
   1098e:	4607      	mov	r7, r0
   10990:	2d04      	cmp	r5, #4
   10992:	d018      	beq.n	109c6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x58>
   10994:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   10996:	f7fd ff6f 	bl	e878 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
   1099a:	4438      	add	r0, r7
   1099c:	b281      	uxth	r1, r0
   1099e:	4620      	mov	r0, r4
   109a0:	2201      	movs	r2, #1
   109a2:	f000 f9f4 	bl	10d8e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xa2>
   109a6:	2800      	cmp	r0, #0
   109a8:	d10b      	bne.n	109c2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
   109aa:	2d03      	cmp	r5, #3
   109ac:	d000      	beq.n	109b0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
   109ae:	b1df      	cbz	r7, 109e8 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   109b0:	4620      	mov	r0, r4
   109b2:	f7fe feb4 	bl	f71e <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   109b6:	7871      	ldrb	r1, [r6, #1]
   109b8:	2903      	cmp	r1, #3
   109ba:	d010      	beq.n	109de <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
   109bc:	b9a0      	cbnz	r0, 109e8 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   109be:	e004      	b.n	109ca <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x5c>
   109c0:	2042      	movs	r0, #66	; 0x42
   109c2:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   109c6:	b97f      	cbnz	r7, 109e8 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   109c8:	e7f2      	b.n	109b0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
   109ca:	2904      	cmp	r1, #4
   109cc:	d107      	bne.n	109de <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
   109ce:	4620      	mov	r0, r4
   109d0:	f7ff f882 	bl	fad8 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   109d4:	b140      	cbz	r0, 109e8 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   109d6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   109d8:	f7fd ff1d 	bl	e816 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>
   109dc:	b120      	cbz	r0, 109e8 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   109de:	2d01      	cmp	r5, #1
   109e0:	d004      	beq.n	109ec <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
   109e2:	2d03      	cmp	r5, #3
   109e4:	d002      	beq.n	109ec <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
   109e6:	e00e      	b.n	10a06 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x98>
   109e8:	2012      	movs	r0, #18
   109ea:	e7ea      	b.n	109c2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
   109ec:	4620      	mov	r0, r4
   109ee:	f7fe fe96 	bl	f71e <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   109f2:	b108      	cbz	r0, 109f8 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x8a>
   109f4:	2200      	movs	r2, #0
   109f6:	e002      	b.n	109fe <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
   109f8:	2d01      	cmp	r5, #1
   109fa:	d013      	beq.n	10a24 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xb6>
   109fc:	2201      	movs	r2, #1
   109fe:	4668      	mov	r0, sp
   10a00:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   10a02:	f7fd fea0 	bl	e746 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   10a06:	2d04      	cmp	r5, #4
   10a08:	d018      	beq.n	10a3c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
   10a0a:	6872      	ldr	r2, [r6, #4]
   10a0c:	463b      	mov	r3, r7
   10a0e:	2101      	movs	r1, #1
   10a10:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   10a12:	f7fd fecc 	bl	e7ae <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
   10a16:	b138      	cbz	r0, 10a28 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xba>
   10a18:	7870      	ldrb	r0, [r6, #1]
   10a1a:	2802      	cmp	r0, #2
   10a1c:	d006      	beq.n	10a2c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
   10a1e:	2803      	cmp	r0, #3
   10a20:	d004      	beq.n	10a2c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
   10a22:	e00b      	b.n	10a3c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
   10a24:	2202      	movs	r2, #2
   10a26:	e7ea      	b.n	109fe <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
   10a28:	2007      	movs	r0, #7
   10a2a:	e7ca      	b.n	109c2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
   10a2c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   10a2e:	f7fd ff23 	bl	e878 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
   10a32:	4602      	mov	r2, r0
   10a34:	2101      	movs	r1, #1
   10a36:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   10a38:	f7fd fefb 	bl	e832 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   10a3c:	2000      	movs	r0, #0
   10a3e:	e7c0      	b.n	109c2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>

00010a40 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
   10a40:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   10a44:	4607      	mov	r7, r0
   10a46:	7845      	ldrb	r5, [r0, #1]
   10a48:	78c6      	ldrb	r6, [r0, #3]
   10a4a:	7800      	ldrb	r0, [r0, #0]
   10a4c:	2101      	movs	r1, #1
   10a4e:	f7fd fdb9 	bl	e5c4 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   10a52:	0004      	movs	r4, r0
   10a54:	d003      	beq.n	10a5e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x1e>
   10a56:	f7fe fe64 	bl	f722 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   10a5a:	b118      	cbz	r0, 10a64 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x24>
   10a5c:	e003      	b.n	10a66 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x26>
   10a5e:	2042      	movs	r0, #66	; 0x42
   10a60:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   10a64:	2600      	movs	r6, #0
   10a66:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   10a68:	f7fd ff0a 	bl	e880 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>
   10a6c:	4430      	add	r0, r6
   10a6e:	b281      	uxth	r1, r0
   10a70:	4688      	mov	r8, r1
   10a72:	4620      	mov	r0, r4
   10a74:	2201      	movs	r2, #1
   10a76:	f000 f98a 	bl	10d8e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xa2>
   10a7a:	2800      	cmp	r0, #0
   10a7c:	d1f0      	bne.n	10a60 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   10a7e:	2d04      	cmp	r5, #4
   10a80:	d008      	beq.n	10a94 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
   10a82:	2d03      	cmp	r5, #3
   10a84:	d00a      	beq.n	10a9c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x5c>
   10a86:	b12e      	cbz	r6, 10a94 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
   10a88:	4620      	mov	r0, r4
   10a8a:	f7ff f825 	bl	fad8 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   10a8e:	b118      	cbz	r0, 10a98 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x58>
   10a90:	200c      	movs	r0, #12
   10a92:	e7e5      	b.n	10a60 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   10a94:	2012      	movs	r0, #18
   10a96:	e7e3      	b.n	10a60 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   10a98:	2d01      	cmp	r5, #1
   10a9a:	d10c      	bne.n	10ab6 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x76>
   10a9c:	4620      	mov	r0, r4
   10a9e:	f7fe fe3e 	bl	f71e <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   10aa2:	b108      	cbz	r0, 10aa8 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x68>
   10aa4:	2204      	movs	r2, #4
   10aa6:	e002      	b.n	10aae <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
   10aa8:	2d01      	cmp	r5, #1
   10aaa:	d010      	beq.n	10ace <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x8e>
   10aac:	2205      	movs	r2, #5
   10aae:	4668      	mov	r0, sp
   10ab0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   10ab2:	f7fd fe48 	bl	e746 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   10ab6:	687a      	ldr	r2, [r7, #4]
   10ab8:	4633      	mov	r3, r6
   10aba:	2100      	movs	r1, #0
   10abc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   10abe:	f7fd fe76 	bl	e7ae <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
   10ac2:	b130      	cbz	r0, 10ad2 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x92>
   10ac4:	2d02      	cmp	r5, #2
   10ac6:	d006      	beq.n	10ad6 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
   10ac8:	2d03      	cmp	r5, #3
   10aca:	d004      	beq.n	10ad6 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
   10acc:	e008      	b.n	10ae0 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xa0>
   10ace:	2206      	movs	r2, #6
   10ad0:	e7ed      	b.n	10aae <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
   10ad2:	2007      	movs	r0, #7
   10ad4:	e7c4      	b.n	10a60 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   10ad6:	4642      	mov	r2, r8
   10ad8:	2100      	movs	r1, #0
   10ada:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   10adc:	f7fd fea9 	bl	e832 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   10ae0:	2000      	movs	r0, #0
   10ae2:	e7bd      	b.n	10a60 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>

00010ae4 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
   10ae4:	b510      	push	{r4, lr}
   10ae6:	4604      	mov	r4, r0
   10ae8:	8880      	ldrh	r0, [r0, #4]
   10aea:	b128      	cbz	r0, 10af8 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   10aec:	2801      	cmp	r0, #1
   10aee:	d003      	beq.n	10af8 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   10af0:	2802      	cmp	r0, #2
   10af2:	d001      	beq.n	10af8 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   10af4:	2012      	movs	r0, #18
   10af6:	bd10      	pop	{r4, pc}
   10af8:	78e0      	ldrb	r0, [r4, #3]
   10afa:	f000 f9df 	bl	10ebc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d0>
   10afe:	b148      	cbz	r0, 10b14 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   10b00:	78a0      	ldrb	r0, [r4, #2]
   10b02:	f000 f9db 	bl	10ebc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d0>
   10b06:	b128      	cbz	r0, 10b14 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   10b08:	4620      	mov	r0, r4
   10b0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10b0e:	2101      	movs	r1, #1
   10b10:	f000 b884 	b.w	10c1c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
   10b14:	2011      	movs	r0, #17
   10b16:	bd10      	pop	{r4, pc}

00010b18 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
   10b18:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   10b1a:	460c      	mov	r4, r1
   10b1c:	4605      	mov	r5, r0
   10b1e:	8800      	ldrh	r0, [r0, #0]
   10b20:	4669      	mov	r1, sp
   10b22:	f7fd ffd8 	bl	ead6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10b26:	2800      	cmp	r0, #0
   10b28:	d106      	bne.n	10b38 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
   10b2a:	9801      	ldr	r0, [sp, #4]
   10b2c:	8829      	ldrh	r1, [r5, #0]
   10b2e:	8021      	strh	r1, [r4, #0]
   10b30:	f8b0 00a8 	ldrh.w	r0, [r0, #168]	; 0xa8
   10b34:	8060      	strh	r0, [r4, #2]
   10b36:	2000      	movs	r0, #0
   10b38:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

00010b3a <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
   10b3a:	b510      	push	{r4, lr}
   10b3c:	4604      	mov	r4, r0
   10b3e:	4601      	mov	r1, r0
   10b40:	2000      	movs	r0, #0
   10b42:	f7f5 f9bb 	bl	5ebc <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
   10b46:	b910      	cbnz	r0, 10b4e <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
   10b48:	2000      	movs	r0, #0
   10b4a:	6020      	str	r0, [r4, #0]
   10b4c:	80a0      	strh	r0, [r4, #4]
   10b4e:	2000      	movs	r0, #0
   10b50:	bd10      	pop	{r4, pc}

00010b52 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
   10b52:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   10b54:	8800      	ldrh	r0, [r0, #0]
   10b56:	4669      	mov	r1, sp
   10b58:	f7fd ffbd 	bl	ead6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10b5c:	b958      	cbnz	r0, 10b76 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x24>
   10b5e:	4668      	mov	r0, sp
   10b60:	f000 fa4d 	bl	10ffe <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x312>
   10b64:	b138      	cbz	r0, 10b76 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x24>
   10b66:	9c01      	ldr	r4, [sp, #4]
   10b68:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
   10b6c:	f504 70e2 	add.w	r0, r4, #452	; 0x1c4
   10b70:	3478      	adds	r4, #120	; 0x78
   10b72:	b929      	cbnz	r1, 10b80 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2e>
   10b74:	e001      	b.n	10b7a <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
   10b76:	2002      	movs	r0, #2
   10b78:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   10b7a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   10b7e:	b109      	cbz	r1, 10b84 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x32>
   10b80:	203a      	movs	r0, #58	; 0x3a
   10b82:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   10b84:	f894 1046 	ldrb.w	r1, [r4, #70]	; 0x46
   10b88:	f04f 0501 	mov.w	r5, #1
   10b8c:	0789      	lsls	r1, r1, #30
   10b8e:	d103      	bne.n	10b98 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x46>
   10b90:	7005      	strb	r5, [r0, #0]
   10b92:	4668      	mov	r0, sp
   10b94:	f7fe fb3c 	bl	f210 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
   10b98:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
   10b9c:	2000      	movs	r0, #0
   10b9e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

00010ba0 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
   10ba0:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   10ba2:	460c      	mov	r4, r1
   10ba4:	4605      	mov	r5, r0
   10ba6:	8800      	ldrh	r0, [r0, #0]
   10ba8:	4669      	mov	r1, sp
   10baa:	f7fd ff94 	bl	ead6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10bae:	b108      	cbz	r0, 10bb4 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
   10bb0:	2002      	movs	r0, #2
   10bb2:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   10bb4:	78a8      	ldrb	r0, [r5, #2]
   10bb6:	b130      	cbz	r0, 10bc6 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x26>
   10bb8:	f000 f9f9 	bl	10fae <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2c2>
   10bbc:	70a0      	strb	r0, [r4, #2]
   10bbe:	8828      	ldrh	r0, [r5, #0]
   10bc0:	8020      	strh	r0, [r4, #0]
   10bc2:	2000      	movs	r0, #0
   10bc4:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   10bc6:	9801      	ldr	r0, [sp, #4]
   10bc8:	f890 0072 	ldrb.w	r0, [r0, #114]	; 0x72
   10bcc:	e7f6      	b.n	10bbc <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

00010bce <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
   10bce:	b510      	push	{r4, lr}
   10bd0:	f7fa fd70 	bl	b6b4 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
   10bd4:	2000      	movs	r0, #0
   10bd6:	bd10      	pop	{r4, pc}

00010bd8 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
   10bd8:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   10bdc:	4604      	mov	r4, r0
   10bde:	8840      	ldrh	r0, [r0, #2]
   10be0:	460d      	mov	r5, r1
   10be2:	b1b8      	cbz	r0, 10c14 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3c>
   10be4:	8820      	ldrh	r0, [r4, #0]
   10be6:	4669      	mov	r1, sp
   10be8:	f7fd ff75 	bl	ead6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10bec:	2800      	cmp	r0, #0
   10bee:	d10f      	bne.n	10c10 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>
   10bf0:	8820      	ldrh	r0, [r4, #0]
   10bf2:	8028      	strh	r0, [r5, #0]
   10bf4:	9e01      	ldr	r6, [sp, #4]
   10bf6:	f106 0510 	add.w	r5, r6, #16
   10bfa:	3678      	adds	r6, #120	; 0x78
   10bfc:	682f      	ldr	r7, [r5, #0]
   10bfe:	8862      	ldrh	r2, [r4, #2]
   10c00:	4639      	mov	r1, r7
   10c02:	4630      	mov	r0, r6
   10c04:	f7fe f8a8 	bl	ed58 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
   10c08:	6828      	ldr	r0, [r5, #0]
   10c0a:	42b8      	cmp	r0, r7
   10c0c:	d1f6      	bne.n	10bfc <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x24>
   10c0e:	2000      	movs	r0, #0
   10c10:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   10c14:	2012      	movs	r0, #18
   10c16:	e7fb      	b.n	10c10 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>

00010c18 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
   10c18:	f7fa bba8 	b.w	b36c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

00010c1c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
   10c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10c20:	b086      	sub	sp, #24
   10c22:	468a      	mov	sl, r1
   10c24:	4606      	mov	r6, r0
   10c26:	8800      	ldrh	r0, [r0, #0]
   10c28:	a901      	add	r1, sp, #4
   10c2a:	f7fd ff54 	bl	ead6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10c2e:	2800      	cmp	r0, #0
   10c30:	d13b      	bne.n	10caa <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
   10c32:	9802      	ldr	r0, [sp, #8]
   10c34:	f04f 0800 	mov.w	r8, #0
   10c38:	4601      	mov	r1, r0
   10c3a:	4689      	mov	r9, r1
   10c3c:	f890 120c 	ldrb.w	r1, [r0, #524]	; 0x20c
   10c40:	f88d 1000 	strb.w	r1, [sp]
   10c44:	9900      	ldr	r1, [sp, #0]
   10c46:	9100      	str	r1, [sp, #0]
   10c48:	f89d 1000 	ldrb.w	r1, [sp]
   10c4c:	3078      	adds	r0, #120	; 0x78
   10c4e:	b109      	cbz	r1, 10c54 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x38>
   10c50:	2501      	movs	r5, #1
   10c52:	e000      	b.n	10c56 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3a>
   10c54:	2500      	movs	r5, #0
   10c56:	7b81      	ldrb	r1, [r0, #14]
   10c58:	2921      	cmp	r1, #33	; 0x21
   10c5a:	d100      	bne.n	10c5e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x42>
   10c5c:	b13d      	cbz	r5, 10c6e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x52>
   10c5e:	2400      	movs	r4, #0
   10c60:	304c      	adds	r0, #76	; 0x4c
   10c62:	2108      	movs	r1, #8
   10c64:	4607      	mov	r7, r0
   10c66:	f7ff facd 	bl	10204 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
   10c6a:	b110      	cbz	r0, 10c72 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x56>
   10c6c:	e007      	b.n	10c7e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
   10c6e:	2401      	movs	r4, #1
   10c70:	e7f6      	b.n	10c60 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x44>
   10c72:	210b      	movs	r1, #11
   10c74:	4638      	mov	r0, r7
   10c76:	f7ff fac5 	bl	10204 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
   10c7a:	b900      	cbnz	r0, 10c7e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
   10c7c:	b1a4      	cbz	r4, 10ca8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8c>
   10c7e:	a804      	add	r0, sp, #16
   10c80:	9000      	str	r0, [sp, #0]
   10c82:	f89d 0004 	ldrb.w	r0, [sp, #4]
   10c86:	ab03      	add	r3, sp, #12
   10c88:	4632      	mov	r2, r6
   10c8a:	4649      	mov	r1, r9
   10c8c:	f000 f96f 	bl	10f6e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x282>
   10c90:	0007      	movs	r7, r0
   10c92:	d10a      	bne.n	10caa <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
   10c94:	f89d 0004 	ldrb.w	r0, [sp, #4]
   10c98:	9c02      	ldr	r4, [sp, #8]
   10c9a:	b148      	cbz	r0, 10cb0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x94>
   10c9c:	f504 74df 	add.w	r4, r4, #446	; 0x1be
   10ca0:	20ff      	movs	r0, #255	; 0xff
   10ca2:	7060      	strb	r0, [r4, #1]
   10ca4:	b94d      	cbnz	r5, 10cba <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9e>
   10ca6:	e006      	b.n	10cb6 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9a>
   10ca8:	201a      	movs	r0, #26
   10caa:	b006      	add	sp, #24
   10cac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10cb0:	f504 749f 	add.w	r4, r4, #318	; 0x13e
   10cb4:	e7f4      	b.n	10ca0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>
   10cb6:	7820      	ldrb	r0, [r4, #0]
   10cb8:	b108      	cbz	r0, 10cbe <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xa2>
   10cba:	273a      	movs	r7, #58	; 0x3a
   10cbc:	e012      	b.n	10ce4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xc8>
   10cbe:	f884 a000 	strb.w	sl, [r4]
   10cc2:	f89d 100c 	ldrb.w	r1, [sp, #12]
   10cc6:	70a1      	strb	r1, [r4, #2]
   10cc8:	f89d 0010 	ldrb.w	r0, [sp, #16]
   10ccc:	70e0      	strb	r0, [r4, #3]
   10cce:	f88d 1000 	strb.w	r1, [sp]
   10cd2:	f88d 0001 	strb.w	r0, [sp, #1]
   10cd6:	88b0      	ldrh	r0, [r6, #4]
   10cd8:	f8ad 0002 	strh.w	r0, [sp, #2]
   10cdc:	4669      	mov	r1, sp
   10cde:	4648      	mov	r0, r9
   10ce0:	f7fd ffb8 	bl	ec54 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
   10ce4:	f884 8001 	strb.w	r8, [r4, #1]
   10ce8:	4638      	mov	r0, r7
   10cea:	e7de      	b.n	10caa <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>

00010cec <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
   10cec:	b510      	push	{r4, lr}
   10cee:	2008      	movs	r0, #8
   10cf0:	f7fa fd46 	bl	b780 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
   10cf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10cf8:	f7f8 bb1a 	b.w	9330 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>
   10cfc:	f44f 71a4 	mov.w	r1, #328	; 0x148
   10d00:	4288      	cmp	r0, r1
   10d02:	d303      	bcc.n	10d0c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20>
   10d04:	f640 0148 	movw	r1, #2120	; 0x848
   10d08:	4288      	cmp	r0, r1
   10d0a:	d300      	bcc.n	10d0e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x22>
   10d0c:	4608      	mov	r0, r1
   10d0e:	4770      	bx	lr
   10d10:	07c1      	lsls	r1, r0, #31
   10d12:	d001      	beq.n	10d18 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2c>
   10d14:	2001      	movs	r0, #1
   10d16:	4770      	bx	lr
   10d18:	0780      	lsls	r0, r0, #30
   10d1a:	d501      	bpl.n	10d20 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x34>
   10d1c:	2002      	movs	r0, #2
   10d1e:	4770      	bx	lr
   10d20:	2000      	movs	r0, #0
   10d22:	4770      	bx	lr
   10d24:	b510      	push	{r4, lr}
   10d26:	2801      	cmp	r0, #1
   10d28:	d006      	beq.n	10d38 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4c>
   10d2a:	2802      	cmp	r0, #2
   10d2c:	d004      	beq.n	10d38 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4c>
   10d2e:	f44f 711d 	mov.w	r1, #628	; 0x274
   10d32:	2006      	movs	r0, #6
   10d34:	f7f4 fa1c 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10d38:	bd10      	pop	{r4, pc}
   10d3a:	b50e      	push	{r1, r2, r3, lr}
   10d3c:	4669      	mov	r1, sp
   10d3e:	2001      	movs	r0, #1
   10d40:	f7fd fc4a 	bl	e5d8 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   10d44:	b150      	cbz	r0, 10d5c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x70>
   10d46:	f240 1153 	movw	r1, #339	; 0x153
   10d4a:	2039      	movs	r0, #57	; 0x39
   10d4c:	f7f4 fa10 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10d50:	9802      	ldr	r0, [sp, #8]
   10d52:	f7fe fec1 	bl	fad8 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   10d56:	b108      	cbz	r0, 10d5c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x70>
   10d58:	2001      	movs	r0, #1
   10d5a:	bd0e      	pop	{r1, r2, r3, pc}
   10d5c:	4668      	mov	r0, sp
   10d5e:	f7f4 fc3f 	bl	55e0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   10d62:	2800      	cmp	r0, #0
   10d64:	d0f4      	beq.n	10d50 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x64>
   10d66:	2000      	movs	r0, #0
   10d68:	bd0e      	pop	{r1, r2, r3, pc}
   10d6a:	b510      	push	{r4, lr}
   10d6c:	f7ff ffe5 	bl	10d3a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4e>
   10d70:	b158      	cbz	r0, 10d8a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9e>
   10d72:	f000 f966 	bl	11042 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x356>
   10d76:	4604      	mov	r4, r0
   10d78:	f7fe fcd3 	bl	f722 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   10d7c:	b918      	cbnz	r0, 10d86 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9a>
   10d7e:	4620      	mov	r0, r4
   10d80:	f7fe fcc5 	bl	f70e <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   10d84:	b108      	cbz	r0, 10d8a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9e>
   10d86:	2000      	movs	r0, #0
   10d88:	bd10      	pop	{r4, pc}
   10d8a:	2001      	movs	r0, #1
   10d8c:	bd10      	pop	{r4, pc}
   10d8e:	b570      	push	{r4, r5, r6, lr}
   10d90:	460c      	mov	r4, r1
   10d92:	4605      	mov	r5, r0
   10d94:	b112      	cbz	r2, 10d9c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xb0>
   10d96:	291f      	cmp	r1, #31
   10d98:	d80c      	bhi.n	10db4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xc8>
   10d9a:	e016      	b.n	10dca <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xde>
   10d9c:	f7f4 fee6 	bl	5b6c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>
   10da0:	42a0      	cmp	r0, r4
   10da2:	d201      	bcs.n	10da8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xbc>
   10da4:	2007      	movs	r0, #7
   10da6:	bd70      	pop	{r4, r5, r6, pc}
   10da8:	4628      	mov	r0, r5
   10daa:	f7fe fcb8 	bl	f71e <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   10dae:	b118      	cbz	r0, 10db8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xcc>
   10db0:	2c1f      	cmp	r4, #31
   10db2:	d901      	bls.n	10db8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xcc>
   10db4:	2012      	movs	r0, #18
   10db6:	bd70      	pop	{r4, r5, r6, pc}
   10db8:	4628      	mov	r0, r5
   10dba:	f7fe fcb9 	bl	f730 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   10dbe:	b130      	cbz	r0, 10dce <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xe2>
   10dc0:	4621      	mov	r1, r4
   10dc2:	4628      	mov	r0, r5
   10dc4:	f7fe fc80 	bl	f6c8 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
   10dc8:	b118      	cbz	r0, 10dd2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xe6>
   10dca:	2000      	movs	r0, #0
   10dcc:	bd70      	pop	{r4, r5, r6, pc}
   10dce:	2042      	movs	r0, #66	; 0x42
   10dd0:	bd70      	pop	{r4, r5, r6, pc}
   10dd2:	2045      	movs	r0, #69	; 0x45
   10dd4:	bd70      	pop	{r4, r5, r6, pc}
   10dd6:	b510      	push	{r4, lr}
   10dd8:	4604      	mov	r4, r0
   10dda:	7840      	ldrb	r0, [r0, #1]
   10ddc:	06c1      	lsls	r1, r0, #27
   10dde:	d51c      	bpl.n	10e1a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x12e>
   10de0:	07c0      	lsls	r0, r0, #31
   10de2:	d00b      	beq.n	10dfc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x110>
   10de4:	f7fa fca0 	bl	b728 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
   10de8:	b1b8      	cbz	r0, 10e1a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x12e>
   10dea:	7860      	ldrb	r0, [r4, #1]
   10dec:	06c1      	lsls	r1, r0, #27
   10dee:	d405      	bmi.n	10dfc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x110>
   10df0:	0700      	lsls	r0, r0, #28
   10df2:	d503      	bpl.n	10dfc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x110>
   10df4:	7d20      	ldrb	r0, [r4, #20]
   10df6:	2802      	cmp	r0, #2
   10df8:	d10f      	bne.n	10e1a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x12e>
   10dfa:	e010      	b.n	10e1e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x132>
   10dfc:	7d20      	ldrb	r0, [r4, #20]
   10dfe:	2802      	cmp	r0, #2
   10e00:	d001      	beq.n	10e06 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x11a>
   10e02:	7ea0      	ldrb	r0, [r4, #26]
   10e04:	b948      	cbnz	r0, 10e1a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x12e>
   10e06:	7860      	ldrb	r0, [r4, #1]
   10e08:	0700      	lsls	r0, r0, #28
   10e0a:	d408      	bmi.n	10e1e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x132>
   10e0c:	f8d4 0005 	ldr.w	r0, [r4, #5]
   10e10:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   10e14:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   10e18:	d201      	bcs.n	10e1e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x132>
   10e1a:	2011      	movs	r0, #17
   10e1c:	bd10      	pop	{r4, pc}
   10e1e:	2000      	movs	r0, #0
   10e20:	bd10      	pop	{r4, pc}
   10e22:	b538      	push	{r3, r4, r5, lr}
   10e24:	4604      	mov	r4, r0
   10e26:	7800      	ldrb	r0, [r0, #0]
   10e28:	28ef      	cmp	r0, #239	; 0xef
   10e2a:	d843      	bhi.n	10eb4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   10e2c:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   10e30:	f8ad 0000 	strh.w	r0, [sp]
   10e34:	9800      	ldr	r0, [sp, #0]
   10e36:	f000 f9e3 	bl	11200 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x514>
   10e3a:	b3a0      	cbz	r0, 10ea6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ba>
   10e3c:	7861      	ldrb	r1, [r4, #1]
   10e3e:	0708      	lsls	r0, r1, #28
   10e40:	d40b      	bmi.n	10e5a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x16e>
   10e42:	f8d4 0002 	ldr.w	r0, [r4, #2]
   10e46:	f8d4 3005 	ldr.w	r3, [r4, #5]
   10e4a:	0a02      	lsrs	r2, r0, #8
   10e4c:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
   10e50:	d830      	bhi.n	10eb4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   10e52:	2220      	movs	r2, #32
   10e54:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
   10e58:	d82c      	bhi.n	10eb4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   10e5a:	7a60      	ldrb	r0, [r4, #9]
   10e5c:	b318      	cbz	r0, 10ea6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ba>
   10e5e:	2807      	cmp	r0, #7
   10e60:	d828      	bhi.n	10eb4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   10e62:	7aa0      	ldrb	r0, [r4, #10]
   10e64:	b128      	cbz	r0, 10e72 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x186>
   10e66:	2801      	cmp	r0, #1
   10e68:	d003      	beq.n	10e72 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x186>
   10e6a:	2802      	cmp	r0, #2
   10e6c:	d001      	beq.n	10e72 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x186>
   10e6e:	2803      	cmp	r0, #3
   10e70:	d120      	bne.n	10eb4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   10e72:	074a      	lsls	r2, r1, #29
   10e74:	d403      	bmi.n	10e7e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x192>
   10e76:	2802      	cmp	r0, #2
   10e78:	d001      	beq.n	10e7e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x192>
   10e7a:	2803      	cmp	r0, #3
   10e7c:	d105      	bne.n	10e8a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x19e>
   10e7e:	7ae0      	ldrb	r0, [r4, #11]
   10e80:	b108      	cbz	r0, 10e86 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x19a>
   10e82:	2801      	cmp	r0, #1
   10e84:	d116      	bne.n	10eb4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   10e86:	0748      	lsls	r0, r1, #29
   10e88:	d407      	bmi.n	10e9a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ae>
   10e8a:	7ca0      	ldrb	r0, [r4, #18]
   10e8c:	b128      	cbz	r0, 10e9a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ae>
   10e8e:	2801      	cmp	r0, #1
   10e90:	d003      	beq.n	10e9a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ae>
   10e92:	2802      	cmp	r0, #2
   10e94:	d001      	beq.n	10e9a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ae>
   10e96:	2803      	cmp	r0, #3
   10e98:	d10c      	bne.n	10eb4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   10e9a:	06c8      	lsls	r0, r1, #27
   10e9c:	7d20      	ldrb	r0, [r4, #20]
   10e9e:	d503      	bpl.n	10ea8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1bc>
   10ea0:	2801      	cmp	r0, #1
   10ea2:	d107      	bne.n	10eb4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   10ea4:	e002      	b.n	10eac <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c0>
   10ea6:	e005      	b.n	10eb4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   10ea8:	2802      	cmp	r0, #2
   10eaa:	d003      	beq.n	10eb4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   10eac:	7e20      	ldrb	r0, [r4, #24]
   10eae:	b118      	cbz	r0, 10eb8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1cc>
   10eb0:	2801      	cmp	r0, #1
   10eb2:	d001      	beq.n	10eb8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1cc>
   10eb4:	2012      	movs	r0, #18
   10eb6:	bd38      	pop	{r3, r4, r5, pc}
   10eb8:	2000      	movs	r0, #0
   10eba:	bd38      	pop	{r3, r4, r5, pc}
   10ebc:	b510      	push	{r4, lr}
   10ebe:	0004      	movs	r4, r0
   10ec0:	d005      	beq.n	10ece <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e2>
   10ec2:	f7fa fc6f 	bl	b7a4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   10ec6:	4384      	bics	r4, r0
   10ec8:	d001      	beq.n	10ece <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e2>
   10eca:	2000      	movs	r0, #0
   10ecc:	bd10      	pop	{r4, pc}
   10ece:	2001      	movs	r0, #1
   10ed0:	bd10      	pop	{r4, pc}
   10ed2:	28fb      	cmp	r0, #251	; 0xfb
   10ed4:	d803      	bhi.n	10ede <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1f2>
   10ed6:	f640 0048 	movw	r0, #2120	; 0x848
   10eda:	4281      	cmp	r1, r0
   10edc:	d901      	bls.n	10ee2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1f6>
   10ede:	2011      	movs	r0, #17
   10ee0:	4770      	bx	lr
   10ee2:	2000      	movs	r0, #0
   10ee4:	4770      	bx	lr
   10ee6:	381b      	subs	r0, #27
   10ee8:	28e1      	cmp	r0, #225	; 0xe1
   10eea:	d206      	bcs.n	10efa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20e>
   10eec:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
   10ef0:	d303      	bcc.n	10efa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20e>
   10ef2:	f244 2090 	movw	r0, #17040	; 0x4290
   10ef6:	4281      	cmp	r1, r0
   10ef8:	d901      	bls.n	10efe <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x212>
   10efa:	2012      	movs	r0, #18
   10efc:	4770      	bx	lr
   10efe:	2000      	movs	r0, #0
   10f00:	4770      	bx	lr
   10f02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10f06:	4606      	mov	r6, r0
   10f08:	f8b0 7056 	ldrh.w	r7, [r0, #86]	; 0x56
   10f0c:	f8b0 4058 	ldrh.w	r4, [r0, #88]	; 0x58
   10f10:	4615      	mov	r5, r2
   10f12:	3030      	adds	r0, #48	; 0x30
   10f14:	f7f7 fc06 	bl	8724 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>
   10f18:	4680      	mov	r8, r0
   10f1a:	2102      	movs	r1, #2
   10f1c:	f7fd fe6b 	bl	ebf6 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   10f20:	4287      	cmp	r7, r0
   10f22:	d200      	bcs.n	10f26 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x23a>
   10f24:	4638      	mov	r0, r7
   10f26:	4607      	mov	r7, r0
   10f28:	2102      	movs	r1, #2
   10f2a:	4640      	mov	r0, r8
   10f2c:	f7fd fe63 	bl	ebf6 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   10f30:	4284      	cmp	r4, r0
   10f32:	d200      	bcs.n	10f36 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24a>
   10f34:	4620      	mov	r0, r4
   10f36:	8831      	ldrh	r1, [r6, #0]
   10f38:	8029      	strh	r1, [r5, #0]
   10f3a:	2f1b      	cmp	r7, #27
   10f3c:	d913      	bls.n	10f66 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x27a>
   10f3e:	2ffb      	cmp	r7, #251	; 0xfb
   10f40:	d300      	bcc.n	10f44 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x258>
   10f42:	27fb      	movs	r7, #251	; 0xfb
   10f44:	806f      	strh	r7, [r5, #2]
   10f46:	281b      	cmp	r0, #27
   10f48:	d90f      	bls.n	10f6a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x27e>
   10f4a:	28fb      	cmp	r0, #251	; 0xfb
   10f4c:	d300      	bcc.n	10f50 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x264>
   10f4e:	20fb      	movs	r0, #251	; 0xfb
   10f50:	80e8      	strh	r0, [r5, #6]
   10f52:	4640      	mov	r0, r8
   10f54:	f7ff fed2 	bl	10cfc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x10>
   10f58:	80a8      	strh	r0, [r5, #4]
   10f5a:	4640      	mov	r0, r8
   10f5c:	f7ff fece 	bl	10cfc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x10>
   10f60:	8128      	strh	r0, [r5, #8]
   10f62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10f66:	271b      	movs	r7, #27
   10f68:	e7ec      	b.n	10f44 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x258>
   10f6a:	201b      	movs	r0, #27
   10f6c:	e7f0      	b.n	10f50 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x264>
   10f6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10f72:	7890      	ldrb	r0, [r2, #2]
   10f74:	9e06      	ldr	r6, [sp, #24]
   10f76:	461d      	mov	r5, r3
   10f78:	4614      	mov	r4, r2
   10f7a:	b908      	cbnz	r0, 10f80 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x294>
   10f7c:	f7fa fc12 	bl	b7a4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   10f80:	78e4      	ldrb	r4, [r4, #3]
   10f82:	4607      	mov	r7, r0
   10f84:	b914      	cbnz	r4, 10f8c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2a0>
   10f86:	f7fa fc0d 	bl	b7a4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   10f8a:	4604      	mov	r4, r0
   10f8c:	b16f      	cbz	r7, 10faa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2be>
   10f8e:	b164      	cbz	r4, 10faa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2be>
   10f90:	4638      	mov	r0, r7
   10f92:	f7ff febd 	bl	10d10 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24>
   10f96:	4620      	mov	r0, r4
   10f98:	f7ff feba 	bl	10d10 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24>
   10f9c:	b12f      	cbz	r7, 10faa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2be>
   10f9e:	b124      	cbz	r4, 10faa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2be>
   10fa0:	702f      	strb	r7, [r5, #0]
   10fa2:	7034      	strb	r4, [r6, #0]
   10fa4:	2000      	movs	r0, #0
   10fa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10faa:	2009      	movs	r0, #9
   10fac:	e7fb      	b.n	10fa6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2ba>
   10fae:	b510      	push	{r4, lr}
   10fb0:	f7fc fa6a 	bl	d488 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
   10fb4:	b928      	cbnz	r0, 10fc2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2d6>
   10fb6:	f7fc fa9d 	bl	d4f4 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
   10fba:	b910      	cbnz	r0, 10fc2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2d6>
   10fbc:	f7fc faa4 	bl	d508 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
   10fc0:	b108      	cbz	r0, 10fc6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2da>
   10fc2:	2008      	movs	r0, #8
   10fc4:	bd10      	pop	{r4, pc}
   10fc6:	f7fc fa34 	bl	d432 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
   10fca:	b940      	cbnz	r0, 10fde <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f2>
   10fcc:	f7fc fa3b 	bl	d446 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
   10fd0:	b928      	cbnz	r0, 10fde <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f2>
   10fd2:	f7fc fa4f 	bl	d474 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
   10fd6:	b910      	cbnz	r0, 10fde <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f2>
   10fd8:	f7fc fa60 	bl	d49c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   10fdc:	b108      	cbz	r0, 10fe2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f6>
   10fde:	2004      	movs	r0, #4
   10fe0:	bd10      	pop	{r4, pc}
   10fe2:	f240 51d6 	movw	r1, #1494	; 0x5d6
   10fe6:	2039      	movs	r0, #57	; 0x39
   10fe8:	f7f4 f8c2 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10fec:	b510      	push	{r4, lr}
   10fee:	f7fa fbd3 	bl	b798 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   10ff2:	0940      	lsrs	r0, r0, #5
   10ff4:	ea40 60c1 	orr.w	r0, r0, r1, lsl #27
   10ff8:	f000 0001 	and.w	r0, r0, #1
   10ffc:	bd10      	pop	{r4, pc}
   10ffe:	6840      	ldr	r0, [r0, #4]
   11000:	f000 b800 	b.w	11004 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x318>
   11004:	b508      	push	{r3, lr}
   11006:	f890 1144 	ldrb.w	r1, [r0, #324]	; 0x144
   1100a:	f890 009c 	ldrb.w	r0, [r0, #156]	; 0x9c
   1100e:	f88d 0000 	strb.w	r0, [sp]
   11012:	9800      	ldr	r0, [sp, #0]
   11014:	9000      	str	r0, [sp, #0]
   11016:	f89d 0000 	ldrb.w	r0, [sp]
   1101a:	b100      	cbz	r0, 1101e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x332>
   1101c:	2001      	movs	r0, #1
   1101e:	1e40      	subs	r0, r0, #1
   11020:	4208      	tst	r0, r1
   11022:	d003      	beq.n	1102c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x340>
   11024:	2904      	cmp	r1, #4
   11026:	d001      	beq.n	1102c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x340>
   11028:	2001      	movs	r0, #1
   1102a:	bd08      	pop	{r3, pc}
   1102c:	2000      	movs	r0, #0
   1102e:	bd08      	pop	{r3, pc}
   11030:	b510      	push	{r4, lr}
   11032:	f7fa fbb1 	bl	b798 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   11036:	0a00      	lsrs	r0, r0, #8
   11038:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
   1103c:	f000 0001 	and.w	r0, r0, #1
   11040:	bd10      	pop	{r4, pc}
   11042:	b510      	push	{r4, lr}
   11044:	2101      	movs	r1, #1
   11046:	2000      	movs	r0, #0
   11048:	f7fd fabc 	bl	e5c4 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   1104c:	0004      	movs	r4, r0
   1104e:	d108      	bne.n	11062 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x376>
   11050:	2200      	movs	r2, #0
   11052:	2101      	movs	r1, #1
   11054:	4610      	mov	r0, r2
   11056:	f7fd faab 	bl	e5b0 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
   1105a:	0004      	movs	r4, r0
   1105c:	d003      	beq.n	11066 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x37a>
   1105e:	f7fe fafb 	bl	f658 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
   11062:	4620      	mov	r0, r4
   11064:	bd10      	pop	{r4, pc}
   11066:	f44f 7110 	mov.w	r1, #576	; 0x240
   1106a:	2039      	movs	r0, #57	; 0x39
   1106c:	f7f4 f880 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11070:	b510      	push	{r4, lr}
   11072:	f7ff fe62 	bl	10d3a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4e>
   11076:	2800      	cmp	r0, #0
   11078:	d000      	beq.n	1107c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x390>
   1107a:	2001      	movs	r0, #1
   1107c:	bd10      	pop	{r4, pc}
   1107e:	b570      	push	{r4, r5, r6, lr}
   11080:	4605      	mov	r5, r0
   11082:	f7fe fb55 	bl	f730 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   11086:	b170      	cbz	r0, 110a6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3ba>
   11088:	4628      	mov	r0, r5
   1108a:	f7fe fd25 	bl	fad8 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   1108e:	2800      	cmp	r0, #0
   11090:	d008      	beq.n	110a4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3b8>
   11092:	4628      	mov	r0, r5
   11094:	f7fe fd1d 	bl	fad2 <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>
   11098:	4604      	mov	r4, r0
   1109a:	4628      	mov	r0, r5
   1109c:	f7fe fcf3 	bl	fa86 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
   110a0:	b118      	cbz	r0, 110aa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3be>
   110a2:	200c      	movs	r0, #12
   110a4:	bd70      	pop	{r4, r5, r6, pc}
   110a6:	2042      	movs	r0, #66	; 0x42
   110a8:	bd70      	pop	{r4, r5, r6, pc}
   110aa:	b164      	cbz	r4, 110c6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3da>
   110ac:	8820      	ldrh	r0, [r4, #0]
   110ae:	f7fd fc44 	bl	e93a <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
   110b2:	8820      	ldrh	r0, [r4, #0]
   110b4:	2100      	movs	r1, #0
   110b6:	f7f4 fae3 	bl	5680 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   110ba:	b120      	cbz	r0, 110c6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3da>
   110bc:	f241 5129 	movw	r1, #5417	; 0x1529
   110c0:	2039      	movs	r0, #57	; 0x39
   110c2:	f7f4 f855 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   110c6:	2000      	movs	r0, #0
   110c8:	bd70      	pop	{r4, r5, r6, pc}
   110ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   110ce:	b088      	sub	sp, #32
   110d0:	4604      	mov	r4, r0
   110d2:	8800      	ldrh	r0, [r0, #0]
   110d4:	a906      	add	r1, sp, #24
   110d6:	f7fd fcfe 	bl	ead6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   110da:	2800      	cmp	r0, #0
   110dc:	d147      	bne.n	1116e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x482>
   110de:	9807      	ldr	r0, [sp, #28]
   110e0:	2700      	movs	r7, #0
   110e2:	f890 11f8 	ldrb.w	r1, [r0, #504]	; 0x1f8
   110e6:	f88d 1008 	strb.w	r1, [sp, #8]
   110ea:	9902      	ldr	r1, [sp, #8]
   110ec:	9102      	str	r1, [sp, #8]
   110ee:	f89d 1008 	ldrb.w	r1, [sp, #8]
   110f2:	3078      	adds	r0, #120	; 0x78
   110f4:	b101      	cbz	r1, 110f8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x40c>
   110f6:	2101      	movs	r1, #1
   110f8:	f88d 100c 	strb.w	r1, [sp, #12]
   110fc:	7bc1      	ldrb	r1, [r0, #15]
   110fe:	0689      	lsls	r1, r1, #26
   11100:	d502      	bpl.n	11108 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x41c>
   11102:	f89d 100c 	ldrb.w	r1, [sp, #12]
   11106:	b141      	cbz	r1, 1111a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x42e>
   11108:	2100      	movs	r1, #0
   1110a:	f88d 1004 	strb.w	r1, [sp, #4]
   1110e:	2105      	movs	r1, #5
   11110:	304c      	adds	r0, #76	; 0x4c
   11112:	f7ff f877 	bl	10204 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
   11116:	b110      	cbz	r0, 1111e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x432>
   11118:	e004      	b.n	11124 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x438>
   1111a:	2101      	movs	r1, #1
   1111c:	e7f5      	b.n	1110a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x41e>
   1111e:	f89d 0004 	ldrb.w	r0, [sp, #4]
   11122:	b318      	cbz	r0, 1116c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x480>
   11124:	8921      	ldrh	r1, [r4, #8]
   11126:	88e0      	ldrh	r0, [r4, #6]
   11128:	f7ff fedd 	bl	10ee6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
   1112c:	2800      	cmp	r0, #0
   1112e:	d11e      	bne.n	1116e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x482>
   11130:	88a1      	ldrh	r1, [r4, #4]
   11132:	8860      	ldrh	r0, [r4, #2]
   11134:	f7ff fed7 	bl	10ee6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
   11138:	2800      	cmp	r0, #0
   1113a:	d118      	bne.n	1116e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x482>
   1113c:	8921      	ldrh	r1, [r4, #8]
   1113e:	88e0      	ldrh	r0, [r4, #6]
   11140:	f7ff fec7 	bl	10ed2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e6>
   11144:	2800      	cmp	r0, #0
   11146:	d112      	bne.n	1116e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x482>
   11148:	88a1      	ldrh	r1, [r4, #4]
   1114a:	8860      	ldrh	r0, [r4, #2]
   1114c:	f7ff fec1 	bl	10ed2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e6>
   11150:	0006      	movs	r6, r0
   11152:	d10c      	bne.n	1116e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x482>
   11154:	9807      	ldr	r0, [sp, #28]
   11156:	f500 75da 	add.w	r5, r0, #436	; 0x1b4
   1115a:	f04f 08ff 	mov.w	r8, #255	; 0xff
   1115e:	f885 8001 	strb.w	r8, [r5, #1]
   11162:	f89d 100c 	ldrb.w	r1, [sp, #12]
   11166:	b129      	cbz	r1, 11174 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x488>
   11168:	263a      	movs	r6, #58	; 0x3a
   1116a:	e02f      	b.n	111cc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4e0>
   1116c:	201a      	movs	r0, #26
   1116e:	b008      	add	sp, #32
   11170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11174:	4639      	mov	r1, r7
   11176:	aa03      	add	r2, sp, #12
   11178:	f7ff fec3 	bl	10f02 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x216>
   1117c:	8861      	ldrh	r1, [r4, #2]
   1117e:	f8bd 0012 	ldrh.w	r0, [sp, #18]
   11182:	4281      	cmp	r1, r0
   11184:	d200      	bcs.n	11188 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x49c>
   11186:	4608      	mov	r0, r1
   11188:	80e8      	strh	r0, [r5, #6]
   1118a:	88a1      	ldrh	r1, [r4, #4]
   1118c:	f8bd 0014 	ldrh.w	r0, [sp, #20]
   11190:	4281      	cmp	r1, r0
   11192:	d200      	bcs.n	11196 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4aa>
   11194:	4608      	mov	r0, r1
   11196:	8128      	strh	r0, [r5, #8]
   11198:	88e2      	ldrh	r2, [r4, #6]
   1119a:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1119e:	428a      	cmp	r2, r1
   111a0:	d200      	bcs.n	111a4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4b8>
   111a2:	4611      	mov	r1, r2
   111a4:	8069      	strh	r1, [r5, #2]
   111a6:	8922      	ldrh	r2, [r4, #8]
   111a8:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   111ac:	428a      	cmp	r2, r1
   111ae:	d200      	bcs.n	111b2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4c6>
   111b0:	4611      	mov	r1, r2
   111b2:	f640 0248 	movw	r2, #2120	; 0x848
   111b6:	80a9      	strh	r1, [r5, #4]
   111b8:	4291      	cmp	r1, r2
   111ba:	d300      	bcc.n	111be <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4d2>
   111bc:	4611      	mov	r1, r2
   111be:	80a9      	strh	r1, [r5, #4]
   111c0:	4290      	cmp	r0, r2
   111c2:	d200      	bcs.n	111c6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4da>
   111c4:	4602      	mov	r2, r0
   111c6:	812a      	strh	r2, [r5, #8]
   111c8:	f885 8000 	strb.w	r8, [r5]
   111cc:	706f      	strb	r7, [r5, #1]
   111ce:	4630      	mov	r0, r6
   111d0:	e7cd      	b.n	1116e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x482>
   111d2:	b530      	push	{r4, r5, lr}
   111d4:	f340 0400 	sbfx	r4, r0, #0, #1
   111d8:	f340 0040 	sbfx	r0, r0, #1, #1
   111dc:	1c40      	adds	r0, r0, #1
   111de:	9d03      	ldr	r5, [sp, #12]
   111e0:	1c64      	adds	r4, r4, #1
   111e2:	d000      	beq.n	111e6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4fa>
   111e4:	b119      	cbz	r1, 111ee <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x502>
   111e6:	b100      	cbz	r0, 111ea <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4fe>
   111e8:	b10a      	cbz	r2, 111ee <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x502>
   111ea:	b91c      	cbnz	r4, 111f4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x508>
   111ec:	e001      	b.n	111f2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x506>
   111ee:	2011      	movs	r0, #17
   111f0:	bd30      	pop	{r4, r5, pc}
   111f2:	2100      	movs	r1, #0
   111f4:	7019      	strb	r1, [r3, #0]
   111f6:	b900      	cbnz	r0, 111fa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x50e>
   111f8:	2200      	movs	r2, #0
   111fa:	702a      	strb	r2, [r5, #0]
   111fc:	2000      	movs	r0, #0
   111fe:	bd30      	pop	{r4, r5, pc}
   11200:	b2c0      	uxtb	r0, r0
   11202:	06c1      	lsls	r1, r0, #27
   11204:	d40c      	bmi.n	11220 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x534>
   11206:	0681      	lsls	r1, r0, #26
   11208:	ea4f 71c0 	mov.w	r1, r0, lsl #31
   1120c:	d503      	bpl.n	11216 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x52a>
   1120e:	b9d1      	cbnz	r1, 11246 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x55a>
   11210:	0781      	lsls	r1, r0, #30
   11212:	d418      	bmi.n	11246 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x55a>
   11214:	e001      	b.n	1121a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x52e>
   11216:	2900      	cmp	r1, #0
   11218:	d1fa      	bne.n	11210 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x524>
   1121a:	0700      	lsls	r0, r0, #28
   1121c:	d413      	bmi.n	11246 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x55a>
   1121e:	e010      	b.n	11242 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x556>
   11220:	0641      	lsls	r1, r0, #25
   11222:	d410      	bmi.n	11246 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x55a>
   11224:	0681      	lsls	r1, r0, #26
   11226:	d40e      	bmi.n	11246 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x55a>
   11228:	07c1      	lsls	r1, r0, #31
   1122a:	ea4f 7180 	mov.w	r1, r0, lsl #30
   1122e:	d004      	beq.n	1123a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x54e>
   11230:	2900      	cmp	r1, #0
   11232:	db02      	blt.n	1123a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x54e>
   11234:	0740      	lsls	r0, r0, #29
   11236:	d404      	bmi.n	11242 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x556>
   11238:	e005      	b.n	11246 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x55a>
   1123a:	0701      	lsls	r1, r0, #28
   1123c:	d403      	bmi.n	11246 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x55a>
   1123e:	0740      	lsls	r0, r0, #29
   11240:	d401      	bmi.n	11246 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x55a>
   11242:	2001      	movs	r0, #1
   11244:	4770      	bx	lr
   11246:	2000      	movs	r0, #0
   11248:	4770      	bx	lr
   1124a:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   1124c:	4669      	mov	r1, sp
   1124e:	2001      	movs	r0, #1
   11250:	f7fd f9c2 	bl	e5d8 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   11254:	b178      	cbz	r0, 11276 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x58a>
   11256:	f240 1171 	movw	r1, #369	; 0x171
   1125a:	2039      	movs	r0, #57	; 0x39
   1125c:	f7f3 ff88 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11260:	9c02      	ldr	r4, [sp, #8]
   11262:	4620      	mov	r0, r4
   11264:	f7fe fc38 	bl	fad8 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   11268:	b128      	cbz	r0, 11276 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x58a>
   1126a:	4620      	mov	r0, r4
   1126c:	f7fe fa99 	bl	f7a2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
   11270:	b108      	cbz	r0, 11276 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x58a>
   11272:	2001      	movs	r0, #1
   11274:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   11276:	4668      	mov	r0, sp
   11278:	f7f4 f9b2 	bl	55e0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   1127c:	2800      	cmp	r0, #0
   1127e:	d0ef      	beq.n	11260 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x574>
   11280:	2000      	movs	r0, #0
   11282:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   11284:	b510      	push	{r4, lr}
   11286:	f7fe fc2a 	bl	fade <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
   1128a:	b108      	cbz	r0, 11290 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x5a4>
   1128c:	21e7      	movs	r1, #231	; 0xe7
   1128e:	e003      	b.n	11298 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x5ac>
   11290:	f7f6 fbd6 	bl	7a40 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
   11294:	b118      	cbz	r0, 1129e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x5b2>
   11296:	21ec      	movs	r1, #236	; 0xec
   11298:	2001      	movs	r0, #1
   1129a:	f7f3 ff69 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1129e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   112a2:	2001      	movs	r0, #1
   112a4:	f7f4 b932 	b.w	550c <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   112a8:	6802      	ldr	r2, [r0, #0]
   112aa:	b912      	cbnz	r2, 112b2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x5c6>
   112ac:	6001      	str	r1, [r0, #0]
   112ae:	4770      	bx	lr
   112b0:	4602      	mov	r2, r0
   112b2:	6850      	ldr	r0, [r2, #4]
   112b4:	b108      	cbz	r0, 112ba <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x5ce>
   112b6:	428a      	cmp	r2, r1
   112b8:	d1fa      	bne.n	112b0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x5c4>
   112ba:	428a      	cmp	r2, r1
   112bc:	d0f7      	beq.n	112ae <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x5c2>
   112be:	6051      	str	r1, [r2, #4]
   112c0:	4770      	bx	lr
   112c2:	b510      	push	{r4, lr}
   112c4:	4604      	mov	r4, r0
   112c6:	e002      	b.n	112ce <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x5e2>
   112c8:	6820      	ldr	r0, [r4, #0]
   112ca:	4780      	blx	r0
   112cc:	6864      	ldr	r4, [r4, #4]
   112ce:	2c00      	cmp	r4, #0
   112d0:	d1fa      	bne.n	112c8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x5dc>
   112d2:	bd10      	pop	{r4, pc}
   112d4:	b510      	push	{r4, lr}
   112d6:	2000      	movs	r0, #0
   112d8:	f7f4 f918 	bl	550c <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   112dc:	f7f4 fb4e 	bl	597c <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
   112e0:	f7f4 fdce 	bl	5e80 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
   112e4:	f7f4 ffba 	bl	625c <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
   112e8:	2800      	cmp	r0, #0
   112ea:	d003      	beq.n	112f4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x608>
   112ec:	21c6      	movs	r1, #198	; 0xc6
   112ee:	2001      	movs	r0, #1
   112f0:	f7f3 ff3e 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   112f4:	bd10      	pop	{r4, pc}
   112f6:	b510      	push	{r4, lr}
   112f8:	f7ff ffc4 	bl	11284 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x598>
   112fc:	f7fe ff42 	bl	10184 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>
   11300:	2800      	cmp	r0, #0
   11302:	d004      	beq.n	1130e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x622>
   11304:	f240 1103 	movw	r1, #259	; 0x103
   11308:	2001      	movs	r0, #1
   1130a:	f7f3 ff31 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1130e:	bd10      	pop	{r4, pc}

00011310 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>:
   11310:	f7f3 bb82 	b.w	4a18 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
   11314:	000b0001 	.word	0x000b0001
   11318:	000a0002 	.word	0x000a0002
   1131c:	00090005 	.word	0x00090005
   11320:	0008000a 	.word	0x0008000a
   11324:	00070014 	.word	0x00070014
   11328:	0006001e 	.word	0x0006001e
   1132c:	00050032 	.word	0x00050032
   11330:	0004004b 	.word	0x0004004b
   11334:	00030064 	.word	0x00030064
   11338:	00020096 	.word	0x00020096
   1133c:	000100fa 	.word	0x000100fa
   11340:	000001f4 	.word	0x000001f4

00011344 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
   11344:	b510      	push	{r4, lr}
   11346:	f7fa fddd 	bl	bf04 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
   1134a:	f000 f81d 	bl	11388 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
   1134e:	f7fa fa9d 	bl	b88c <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
   11352:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11356:	f7fa bb97 	b.w	ba88 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

0001135a <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
   1135a:	b510      	push	{r4, lr}
   1135c:	24c8      	movs	r4, #200	; 0xc8
   1135e:	1e64      	subs	r4, r4, #1
   11360:	b2e4      	uxtb	r4, r4
   11362:	f7fa fab1 	bl	b8c8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
   11366:	2802      	cmp	r0, #2
   11368:	d003      	beq.n	11372 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
   1136a:	2801      	cmp	r0, #1
   1136c:	d000      	beq.n	11370 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
   1136e:	2000      	movs	r0, #0
   11370:	bd10      	pop	{r4, pc}
   11372:	2c00      	cmp	r4, #0
   11374:	d1f3      	bne.n	1135e <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
   11376:	219e      	movs	r1, #158	; 0x9e
   11378:	203b      	movs	r0, #59	; 0x3b
   1137a:	f7f3 fef9 	bl	5170 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1137e:	5840      	ldr	r0, [r0, r1]
   11380:	2800      	cmp	r0, #0
   11382:	d000      	beq.n	11386 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x2c>
   11384:	2001      	movs	r0, #1
   11386:	4770      	bx	lr

00011388 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
   11388:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   1138c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   11390:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
   11394:	f3bf 8f4f 	dsb	sy
   11398:	f3bf 8f6f 	isb	sy
   1139c:	f7fa bc0e 	b.w	bbbc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
   113a0:	2800      	cmp	r0, #0
   113a2:	db09      	blt.n	113b8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
   113a4:	f000 021f 	and.w	r2, r0, #31
   113a8:	2101      	movs	r1, #1
   113aa:	4091      	lsls	r1, r2
   113ac:	0940      	lsrs	r0, r0, #5
   113ae:	0080      	lsls	r0, r0, #2
   113b0:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   113b4:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   113b8:	4770      	bx	lr
   113ba:	2800      	cmp	r0, #0
   113bc:	db0d      	blt.n	113da <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
   113be:	f000 021f 	and.w	r2, r0, #31
   113c2:	2101      	movs	r1, #1
   113c4:	4091      	lsls	r1, r2
   113c6:	0940      	lsrs	r0, r0, #5
   113c8:	0080      	lsls	r0, r0, #2
   113ca:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   113ce:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   113d2:	f3bf 8f4f 	dsb	sy
   113d6:	f3bf 8f6f 	isb	sy
   113da:	4770      	bx	lr
   113dc:	5840      	ldr	r0, [r0, r1]
   113de:	2800      	cmp	r0, #0
   113e0:	d000      	beq.n	113e4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5c>
   113e2:	2001      	movs	r0, #1
   113e4:	4770      	bx	lr
   113e6:	5840      	ldr	r0, [r0, r1]
   113e8:	2800      	cmp	r0, #0
   113ea:	d000      	beq.n	113ee <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x66>
   113ec:	2001      	movs	r0, #1
   113ee:	4770      	bx	lr

000113f0 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
   113f0:	b510      	push	{r4, lr}
   113f2:	4604      	mov	r4, r0
   113f4:	4608      	mov	r0, r1
   113f6:	f7fa febd 	bl	c174 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   113fa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   113fe:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   11402:	fbb0 f0f1 	udiv	r0, r0, r1
   11406:	1a20      	subs	r0, r4, r0
   11408:	1e80      	subs	r0, r0, #2
   1140a:	bd10      	pop	{r4, pc}

0001140c <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
   1140c:	b510      	push	{r4, lr}
   1140e:	4604      	mov	r4, r0
   11410:	4608      	mov	r0, r1
   11412:	f7fa feaf 	bl	c174 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   11416:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1141a:	fbb0 f0f1 	udiv	r0, r0, r1
   1141e:	1a20      	subs	r0, r4, r0
   11420:	bd10      	pop	{r4, pc}
   11422:	080c      	.short	0x080c
   11424:	010d1702 	.word	0x010d1702
   11428:	09090201 	.word	0x09090201
   1142c:	02060101 	.word	0x02060101
   11430:	03181809 	.word	0x03181809
   11434:	09090101 	.word	0x09090101
   11438:	22050303 	.word	0x22050303
   1143c:	00000000 	.word	0x00000000

00011440 <AnalogRead>:

// ------------------------------------------------
// high level read adc channel and convert to float voltage
// ------------------------------------------------
float AnalogRead(int channel)
{
   11440:	b5f0      	push	{r4, r5, r6, r7, lr}
		.channels    = BIT(channel),		// bit mask of channels to read
   11442:	2301      	movs	r3, #1
{
   11444:	b087      	sub	sp, #28
		.channels    = BIT(channel),		// bit mask of channels to read
   11446:	4083      	lsls	r3, r0
	const struct adc_sequence sequence = {
   11448:	9302      	str	r3, [sp, #8]
   1144a:	230c      	movs	r3, #12
   1144c:	2700      	movs	r7, #0
   1144e:	4e2a      	ldr	r6, [pc, #168]	; (114f8 <AnalogRead+0xb8>)
   11450:	9304      	str	r3, [sp, #16]
   11452:	230a      	movs	r3, #10
{
   11454:	4605      	mov	r5, r0
	const struct adc_sequence sequence = {
   11456:	9701      	str	r7, [sp, #4]
   11458:	9603      	str	r6, [sp, #12]
   1145a:	f8ad 3014 	strh.w	r3, [sp, #20]
   1145e:	f88d 7016 	strb.w	r7, [sp, #22]
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   11462:	4826      	ldr	r0, [pc, #152]	; (114fc <AnalogRead+0xbc>)
   11464:	f00e fcec 	bl	1fe40 <z_impl_device_get_binding>
	if(_LastChannel != channel)
   11468:	4b25      	ldr	r3, [pc, #148]	; (11500 <AnalogRead+0xc0>)
   1146a:	781a      	ldrb	r2, [r3, #0]
   1146c:	4295      	cmp	r5, r2
   1146e:	4604      	mov	r4, r0
   11470:	d00b      	beq.n	1148a <AnalogRead+0x4a>
		_IsInitialized = false;
   11472:	4a24      	ldr	r2, [pc, #144]	; (11504 <AnalogRead+0xc4>)
		_LastChannel = channel;
   11474:	701d      	strb	r5, [r3, #0]
		_IsInitialized = false;
   11476:	7017      	strb	r7, [r2, #0]
	if ( adc_dev != NULL && !_IsInitialized)
   11478:	b968      	cbnz	r0, 11496 <AnalogRead+0x56>
{
   1147a:	2400      	movs	r4, #0
	memset(m_sample_buffer, 0, sizeof(m_sample_buffer));
   1147c:	2300      	movs	r3, #0
   1147e:	6033      	str	r3, [r6, #0]
   11480:	6073      	str	r3, [r6, #4]
   11482:	60b3      	str	r3, [r6, #8]
	if (adc_dev)
   11484:	b9c4      	cbnz	r4, 114b8 <AnalogRead+0x78>

	int16_t sv = readOneChannel(channel);
	if(sv == BAD_ANALOG_READ)
	{
		return sv;
   11486:	4820      	ldr	r0, [pc, #128]	; (11508 <AnalogRead+0xc8>)
   11488:	e02f      	b.n	114ea <AnalogRead+0xaa>
	if ( adc_dev != NULL && !_IsInitialized)
   1148a:	2800      	cmp	r0, #0
   1148c:	d0f5      	beq.n	1147a <AnalogRead+0x3a>
   1148e:	4b1d      	ldr	r3, [pc, #116]	; (11504 <AnalogRead+0xc4>)
   11490:	781b      	ldrb	r3, [r3, #0]
   11492:	2b00      	cmp	r3, #0
   11494:	d1f2      	bne.n	1147c <AnalogRead+0x3c>
		m_1st_channel_cfg.channel_id = channel;
   11496:	491d      	ldr	r1, [pc, #116]	; (1150c <AnalogRead+0xcc>)
   11498:	790b      	ldrb	r3, [r1, #4]
   1149a:	f365 0304 	bfi	r3, r5, #0, #5
        m_1st_channel_cfg.input_positive = channel+1,
   1149e:	3501      	adds	r5, #1
		m_1st_channel_cfg.channel_id = channel;
   114a0:	710b      	strb	r3, [r1, #4]
        m_1st_channel_cfg.input_positive = channel+1,
   114a2:	714d      	strb	r5, [r1, #5]
					   const struct adc_channel_cfg *channel_cfg)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->api;

	return api->channel_setup(dev, channel_cfg);
   114a4:	68a3      	ldr	r3, [r4, #8]
   114a6:	4620      	mov	r0, r4
   114a8:	681b      	ldr	r3, [r3, #0]
   114aa:	4798      	blx	r3
		if(ret != 0)
   114ac:	2800      	cmp	r0, #0
   114ae:	d1e4      	bne.n	1147a <AnalogRead+0x3a>
			_IsInitialized = true;	// we don't have any other analog users
   114b0:	4b14      	ldr	r3, [pc, #80]	; (11504 <AnalogRead+0xc4>)
   114b2:	2201      	movs	r2, #1
   114b4:	701a      	strb	r2, [r3, #0]
   114b6:	e7e1      	b.n	1147c <AnalogRead+0x3c>
				  const struct adc_sequence *sequence)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->api;

	return api->read(dev, sequence);
   114b8:	68a3      	ldr	r3, [r4, #8]
   114ba:	a901      	add	r1, sp, #4
   114bc:	685b      	ldr	r3, [r3, #4]
   114be:	4620      	mov	r0, r4
   114c0:	4798      	blx	r3
		if(ret == 0)
   114c2:	2800      	cmp	r0, #0
   114c4:	d1df      	bne.n	11486 <AnalogRead+0x46>
			sample_value = m_sample_buffer[0];
   114c6:	f9b6 0000 	ldrsh.w	r0, [r6]
	if(sv == BAD_ANALOG_READ)
   114ca:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
   114ce:	d0da      	beq.n	11486 <AnalogRead+0x46>
			multip = 16384;
			break;
	}
	
	// the 3.6 relates to the voltage divider being used in my circuit
	float fout = (sv * 3.6 / multip);
   114d0:	f7ee ff58 	bl	384 <__aeabi_i2d>
   114d4:	a306      	add	r3, pc, #24	; (adr r3, 114f0 <AnalogRead+0xb0>)
   114d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   114da:	f7ee ffbd 	bl	458 <__aeabi_dmul>
   114de:	4b0c      	ldr	r3, [pc, #48]	; (11510 <AnalogRead+0xd0>)
   114e0:	2200      	movs	r2, #0
   114e2:	f7ee ffb9 	bl	458 <__aeabi_dmul>
   114e6:	f7ef f9c9 	bl	87c <__aeabi_d2f>
	return fout;
}
   114ea:	b007      	add	sp, #28
   114ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   114ee:	bf00      	nop
   114f0:	cccccccd 	.word	0xcccccccd
   114f4:	400ccccc 	.word	0x400ccccc
   114f8:	200022e0 	.word	0x200022e0
   114fc:	0002896d 	.word	0x0002896d
   11500:	200007a9 	.word	0x200007a9
   11504:	2000230a 	.word	0x2000230a
   11508:	c2f60000 	.word	0xc2f60000
   1150c:	20000724 	.word	0x20000724
   11510:	3f500000 	.word	0x3f500000
   11514:	00000000 	.word	0x00000000

00011518 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
   11518:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   1151a:	4d43      	ldr	r5, [pc, #268]	; (11628 <bt_init+0x110>)
   1151c:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
   11520:	6899      	ldr	r1, [r3, #8]
   11522:	f011 0101 	ands.w	r1, r1, #1
   11526:	d121      	bne.n	1156c <bt_init+0x54>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   11528:	aa01      	add	r2, sp, #4
   1152a:	f640 4003 	movw	r0, #3075	; 0xc03
   1152e:	f004 f995 	bl	1585c <bt_hci_cmd_send_sync>
		if (err) {
   11532:	4604      	mov	r4, r0
   11534:	2800      	cmp	r0, #0
   11536:	d173      	bne.n	11620 <bt_init+0x108>
	uint8_t status = buf->data[0];
   11538:	9b01      	ldr	r3, [sp, #4]
   1153a:	689b      	ldr	r3, [r3, #8]
	if (status) {
   1153c:	781b      	ldrb	r3, [r3, #0]
   1153e:	b993      	cbnz	r3, 11566 <bt_init+0x4e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11540:	f3bf 8f5b 	dmb	ish
   11544:	462b      	mov	r3, r5
   11546:	f853 2fcc 	ldr.w	r2, [r3, #204]!
   1154a:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
   1154e:	f002 0209 	and.w	r2, r2, #9
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   11552:	f3bf 8f5b 	dmb	ish
   11556:	e853 1f00 	ldrex	r1, [r3]
   1155a:	e843 2000 	strex	r0, r2, [r3]
   1155e:	2800      	cmp	r0, #0
   11560:	d1f9      	bne.n	11556 <bt_init+0x3e>
   11562:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   11566:	9801      	ldr	r0, [sp, #4]
   11568:	f00a ff7c 	bl	1c464 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   1156c:	aa01      	add	r2, sp, #4
   1156e:	2100      	movs	r1, #0
   11570:	f241 0003 	movw	r0, #4099	; 0x1003
   11574:	f004 f972 	bl	1585c <bt_hci_cmd_send_sync>
	if (err) {
   11578:	4604      	mov	r4, r0
   1157a:	2800      	cmp	r0, #0
   1157c:	d150      	bne.n	11620 <bt_init+0x108>
	read_local_features_complete(rsp);
   1157e:	9b01      	ldr	r3, [sp, #4]
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
   11580:	4e2a      	ldr	r6, [pc, #168]	; (1162c <bt_init+0x114>)
   11582:	689a      	ldr	r2, [r3, #8]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   11584:	f8d2 0001 	ldr.w	r0, [r2, #1]
   11588:	f8d2 1005 	ldr.w	r1, [r2, #5]
   1158c:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
   1158e:	4618      	mov	r0, r3
   11590:	f00a ff68 	bl	1c464 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   11594:	4621      	mov	r1, r4
   11596:	aa01      	add	r2, sp, #4
   11598:	f241 0001 	movw	r0, #4097	; 0x1001
   1159c:	f004 f95e 	bl	1585c <bt_hci_cmd_send_sync>
	if (err) {
   115a0:	4604      	mov	r4, r0
   115a2:	2800      	cmp	r0, #0
   115a4:	d13c      	bne.n	11620 <bt_init+0x108>
	read_local_ver_complete(rsp);
   115a6:	9801      	ldr	r0, [sp, #4]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   115a8:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
   115aa:	785a      	ldrb	r2, [r3, #1]
   115ac:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   115b0:	78d9      	ldrb	r1, [r3, #3]
   115b2:	789a      	ldrb	r2, [r3, #2]
   115b4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   115b8:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
   115bc:	791a      	ldrb	r2, [r3, #4]
   115be:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   115c2:	7a19      	ldrb	r1, [r3, #8]
   115c4:	79da      	ldrb	r2, [r3, #7]
   115c6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   115ca:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   115ce:	795a      	ldrb	r2, [r3, #5]
   115d0:	799b      	ldrb	r3, [r3, #6]
   115d2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   115d6:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
   115da:	f00a ff43 	bl	1c464 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   115de:	4621      	mov	r1, r4
   115e0:	aa01      	add	r2, sp, #4
   115e2:	f241 0002 	movw	r0, #4098	; 0x1002
   115e6:	f004 f939 	bl	1585c <bt_hci_cmd_send_sync>
	if (err) {
   115ea:	4604      	mov	r4, r0
   115ec:	b9c0      	cbnz	r0, 11620 <bt_init+0x108>
	read_supported_commands_complete(rsp);
   115ee:	9f01      	ldr	r7, [sp, #4]
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
   115f0:	68ba      	ldr	r2, [r7, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
   115f2:	1c53      	adds	r3, r2, #1
   115f4:	3241      	adds	r2, #65	; 0x41
   115f6:	6818      	ldr	r0, [r3, #0]
   115f8:	6859      	ldr	r1, [r3, #4]
   115fa:	4634      	mov	r4, r6
   115fc:	c403      	stmia	r4!, {r0, r1}
   115fe:	3308      	adds	r3, #8
   11600:	4293      	cmp	r3, r2
   11602:	4626      	mov	r6, r4
   11604:	d1f7      	bne.n	115f6 <bt_init+0xde>
	net_buf_unref(rsp);
   11606:	4638      	mov	r0, r7
   11608:	f00a ff2c 	bl	1c464 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   1160c:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   11610:	065b      	lsls	r3, r3, #25
   11612:	d40f      	bmi.n	11634 <bt_init+0x11c>
		BT_ERR("Non-LE capable controller detected!");
   11614:	4806      	ldr	r0, [pc, #24]	; (11630 <bt_init+0x118>)
   11616:	2145      	movs	r1, #69	; 0x45
   11618:	f012 fec7 	bl	243aa <z_log_minimal_printk>
		return -ENODEV;
   1161c:	f06f 0412 	mvn.w	r4, #18
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
   11620:	4620      	mov	r0, r4
   11622:	b003      	add	sp, #12
   11624:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11626:	bf00      	nop
   11628:	200002d0 	.word	0x200002d0
   1162c:	20000340 	.word	0x20000340
   11630:	0002996a 	.word	0x0002996a
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   11634:	aa01      	add	r2, sp, #4
   11636:	2100      	movs	r1, #0
   11638:	f242 0003 	movw	r0, #8195	; 0x2003
   1163c:	f004 f90e 	bl	1585c <bt_hci_cmd_send_sync>
	if (err) {
   11640:	4604      	mov	r4, r0
   11642:	2800      	cmp	r0, #0
   11644:	d1ec      	bne.n	11620 <bt_init+0x108>
	read_le_features_complete(rsp);
   11646:	9b01      	ldr	r3, [sp, #4]
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
   11648:	4ec1      	ldr	r6, [pc, #772]	; (11950 <bt_init+0x438>)
   1164a:	689a      	ldr	r2, [r3, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   1164c:	f8d2 0001 	ldr.w	r0, [r2, #1]
   11650:	f8d2 1005 	ldr.w	r1, [r2, #5]
   11654:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
   11656:	4618      	mov	r0, r3
   11658:	f00a ff04 	bl	1c464 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   1165c:	4621      	mov	r1, r4
   1165e:	aa01      	add	r2, sp, #4
   11660:	f242 0002 	movw	r0, #8194	; 0x2002
   11664:	f004 f8fa 	bl	1585c <bt_hci_cmd_send_sync>
		if (err) {
   11668:	4604      	mov	r4, r0
   1166a:	2800      	cmp	r0, #0
   1166c:	d1d8      	bne.n	11620 <bt_init+0x108>
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   1166e:	9b01      	ldr	r3, [sp, #4]
   11670:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   11672:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   11676:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
   1167a:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
   1167c:	b129      	cbz	r1, 1168a <bt_init+0x172>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   1167e:	78da      	ldrb	r2, [r3, #3]
		union { uintptr_t x; unsigned int val; } parm2 = { .val = limit };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
   11680:	4611      	mov	r1, r2
   11682:	f106 0028 	add.w	r0, r6, #40	; 0x28
   11686:	f016 f848 	bl	2771a <z_impl_k_sem_init>
		net_buf_unref(rsp);
   1168a:	9801      	ldr	r0, [sp, #4]
   1168c:	f00a feea 	bl	1c464 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   11690:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
   11694:	f016 0620 	ands.w	r6, r6, #32
   11698:	f000 80f8 	beq.w	1188c <bt_init+0x374>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   1169c:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
   116a0:	071f      	lsls	r7, r3, #28
   116a2:	d512      	bpl.n	116ca <bt_init+0x1b2>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   116a4:	aa01      	add	r2, sp, #4
   116a6:	2100      	movs	r1, #0
   116a8:	f242 001c 	movw	r0, #8220	; 0x201c
   116ac:	f004 f8d6 	bl	1585c <bt_hci_cmd_send_sync>
		if (err) {
   116b0:	4604      	mov	r4, r0
   116b2:	2800      	cmp	r0, #0
   116b4:	d1b4      	bne.n	11620 <bt_init+0x108>
		le_read_supp_states_complete(rsp);
   116b6:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   116b8:	6883      	ldr	r3, [r0, #8]
   116ba:	f8d3 2001 	ldr.w	r2, [r3, #1]
   116be:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   116c2:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
   116c6:	f00a fecd 	bl	1c464 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   116ca:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   116ce:	069e      	lsls	r6, r3, #26
   116d0:	d523      	bpl.n	1171a <bt_init+0x202>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   116d2:	f10d 0102 	add.w	r1, sp, #2
   116d6:	4668      	mov	r0, sp
   116d8:	f004 f922 	bl	15920 <hci_le_read_max_data_len>
		if (err) {
   116dc:	4604      	mov	r4, r0
   116de:	2800      	cmp	r0, #0
   116e0:	d19e      	bne.n	11620 <bt_init+0x108>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   116e2:	2104      	movs	r1, #4
   116e4:	f242 0024 	movw	r0, #8228	; 0x2024
   116e8:	f004 f870 	bl	157cc <bt_hci_cmd_create>
		if (!buf) {
   116ec:	4606      	mov	r6, r0
   116ee:	2800      	cmp	r0, #0
   116f0:	f000 80d3 	beq.w	1189a <bt_init+0x382>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
   116f4:	2104      	movs	r1, #4
   116f6:	3008      	adds	r0, #8
   116f8:	f00a ffca 	bl	1c690 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   116fc:	f8bd 3000 	ldrh.w	r3, [sp]
   11700:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   11702:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   11706:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   11708:	4622      	mov	r2, r4
   1170a:	4631      	mov	r1, r6
   1170c:	f242 0024 	movw	r0, #8228	; 0x2024
   11710:	f004 f8a4 	bl	1585c <bt_hci_cmd_send_sync>
		if (err) {
   11714:	4604      	mov	r4, r0
   11716:	2800      	cmp	r0, #0
   11718:	d182      	bne.n	11620 <bt_init+0x108>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
   1171a:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   1171e:	065c      	lsls	r4, r3, #25
   11720:	d510      	bpl.n	11744 <bt_init+0x22c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
   11722:	aa01      	add	r2, sp, #4
   11724:	2100      	movs	r1, #0
   11726:	f242 002a 	movw	r0, #8234	; 0x202a
   1172a:	f004 f897 	bl	1585c <bt_hci_cmd_send_sync>
		if (err) {
   1172e:	4604      	mov	r4, r0
   11730:	2800      	cmp	r0, #0
   11732:	f47f af75 	bne.w	11620 <bt_init+0x108>
		le_read_resolving_list_size_complete(rsp);
   11736:	9801      	ldr	r0, [sp, #4]
	bt_dev.le.rl_size = rp->rl_size;
   11738:	6883      	ldr	r3, [r0, #8]
   1173a:	785b      	ldrb	r3, [r3, #1]
   1173c:	f885 3118 	strb.w	r3, [r5, #280]	; 0x118
		net_buf_unref(rsp);
   11740:	f00a fe90 	bl	1c464 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   11744:	2108      	movs	r1, #8
   11746:	f242 0001 	movw	r0, #8193	; 0x2001
   1174a:	f004 f83f 	bl	157cc <bt_hci_cmd_create>
	if (!buf) {
   1174e:	4604      	mov	r4, r0
   11750:	2800      	cmp	r0, #0
   11752:	f000 80a2 	beq.w	1189a <bt_init+0x382>
   11756:	2108      	movs	r1, #8
   11758:	4408      	add	r0, r1
   1175a:	f00a ff99 	bl	1c690 <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
   1175e:	f895 10d0 	ldrb.w	r1, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
   11762:	f011 0f40 	tst.w	r1, #64	; 0x40
   11766:	4602      	mov	r2, r0
   11768:	f240 2302 	movw	r3, #514	; 0x202
   1176c:	bf08      	it	eq
   1176e:	2303      	moveq	r3, #3
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   11770:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   11772:	bf4c      	ite	mi
   11774:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
   11778:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   1177c:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   11780:	068f      	lsls	r7, r1, #26
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   11782:	bf48      	it	mi
   11784:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   11788:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   1178c:	f895 309a 	ldrb.w	r3, [r5, #154]	; 0x9a
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   11790:	bf18      	it	ne
   11792:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   11796:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   1179a:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
   1179c:	bf48      	it	mi
   1179e:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   117a2:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
   117a4:	bf08      	it	eq
   117a6:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
   117aa:	2100      	movs	r1, #0
   117ac:	f013 fcc0 	bl	25130 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   117b0:	4621      	mov	r1, r4
   117b2:	2200      	movs	r2, #0
   117b4:	f242 0001 	movw	r0, #8193	; 0x2001
   117b8:	f004 f850 	bl	1585c <bt_hci_cmd_send_sync>
	if (err) {
   117bc:	4604      	mov	r4, r0
   117be:	2800      	cmp	r0, #0
   117c0:	f47f af2e 	bne.w	11620 <bt_init+0x108>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   117c4:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
	if (bt_dev.le.acl_mtu) {
   117c8:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
	if (BT_FEAT_BREDR(bt_dev.features)) {
   117cc:	0698      	lsls	r0, r3, #26
   117ce:	d479      	bmi.n	118c4 <bt_init+0x3ac>
	if (bt_dev.le.acl_mtu) {
   117d0:	b9d9      	cbnz	r1, 1180a <bt_init+0x2f2>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   117d2:	aa01      	add	r2, sp, #4
   117d4:	f241 0005 	movw	r0, #4101	; 0x1005
   117d8:	f004 f840 	bl	1585c <bt_hci_cmd_send_sync>
	if (err) {
   117dc:	4604      	mov	r4, r0
   117de:	2800      	cmp	r0, #0
   117e0:	f47f af1e 	bne.w	11620 <bt_init+0x108>
	if (bt_dev.le.acl_mtu) {
   117e4:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
   117e8:	b963      	cbnz	r3, 11804 <bt_init+0x2ec>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   117ea:	9b01      	ldr	r3, [sp, #4]
   117ec:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   117ee:	785a      	ldrb	r2, [r3, #1]
   117f0:	7899      	ldrb	r1, [r3, #2]
   117f2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   117f6:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   117fa:	889a      	ldrh	r2, [r3, #4]
   117fc:	4855      	ldr	r0, [pc, #340]	; (11954 <bt_init+0x43c>)
   117fe:	4611      	mov	r1, r2
   11800:	f015 ff8b 	bl	2771a <z_impl_k_sem_init>
	net_buf_unref(rsp);
   11804:	9801      	ldr	r0, [sp, #4]
   11806:	f00a fe2d 	bl	1c464 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   1180a:	2108      	movs	r1, #8
   1180c:	f640 4001 	movw	r0, #3073	; 0xc01
   11810:	f003 ffdc 	bl	157cc <bt_hci_cmd_create>
	if (!buf) {
   11814:	4604      	mov	r4, r0
   11816:	2800      	cmp	r0, #0
   11818:	d03f      	beq.n	1189a <bt_init+0x382>
   1181a:	2108      	movs	r1, #8
   1181c:	4408      	add	r0, r1
   1181e:	f00a ff37 	bl	1c690 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   11822:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   11826:	07d9      	lsls	r1, r3, #31
   11828:	4602      	mov	r2, r0
   1182a:	d554      	bpl.n	118d6 <bt_init+0x3be>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
   1182c:	a146      	add	r1, pc, #280	; (adr r1, 11948 <bt_init+0x430>)
   1182e:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
   11832:	f013 fc7d 	bl	25130 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   11836:	4621      	mov	r1, r4
   11838:	2200      	movs	r2, #0
   1183a:	f640 4001 	movw	r0, #3073	; 0xc01
   1183e:	f004 f80d 	bl	1585c <bt_hci_cmd_send_sync>
	if (err) {
   11842:	4604      	mov	r4, r0
   11844:	2800      	cmp	r0, #0
   11846:	f47f aeeb 	bne.w	11620 <bt_init+0x108>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   1184a:	4601      	mov	r1, r0
   1184c:	aa01      	add	r2, sp, #4
   1184e:	f64f 4001 	movw	r0, #64513	; 0xfc01
   11852:	f004 f803 	bl	1585c <bt_hci_cmd_send_sync>
	if (err) {
   11856:	4604      	mov	r4, r0
   11858:	2800      	cmp	r0, #0
   1185a:	d040      	beq.n	118de <bt_init+0x3c6>
		BT_WARN("Vendor HCI extensions not available");
   1185c:	483e      	ldr	r0, [pc, #248]	; (11958 <bt_init+0x440>)
   1185e:	2157      	movs	r1, #87	; 0x57
			BT_WARN("Failed to read supported vendor features");
   11860:	f012 fda3 	bl	243aa <z_log_minimal_printk>
	err = bt_id_init();
   11864:	f013 fdfb 	bl	2545e <bt_id_init>
	if (err) {
   11868:	4604      	mov	r4, r0
   1186a:	2800      	cmp	r0, #0
   1186c:	f47f aed8 	bne.w	11620 <bt_init+0x108>
		err = bt_conn_init();
   11870:	f006 fb16 	bl	17ea0 <bt_conn_init>
		if (err) {
   11874:	4604      	mov	r4, r0
   11876:	2800      	cmp	r0, #0
   11878:	f47f aed2 	bne.w	11620 <bt_init+0x108>
		if (!bt_dev.id_count) {
   1187c:	79eb      	ldrb	r3, [r5, #7]
   1187e:	2b00      	cmp	r3, #0
   11880:	d159      	bne.n	11936 <bt_init+0x41e>
			BT_INFO("No ID address. App must call settings_load()");
   11882:	4836      	ldr	r0, [pc, #216]	; (1195c <bt_init+0x444>)
   11884:	2149      	movs	r1, #73	; 0x49
   11886:	f012 fd90 	bl	243aa <z_log_minimal_printk>
			return 0;
   1188a:	e6c9      	b.n	11620 <bt_init+0x108>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   1188c:	2102      	movs	r1, #2
   1188e:	f640 406d 	movw	r0, #3181	; 0xc6d
   11892:	f003 ff9b 	bl	157cc <bt_hci_cmd_create>
		if (!buf) {
   11896:	4604      	mov	r4, r0
   11898:	b910      	cbnz	r0, 118a0 <bt_init+0x388>
		return -ENOBUFS;
   1189a:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1189e:	e6bf      	b.n	11620 <bt_init+0x108>
   118a0:	2102      	movs	r1, #2
   118a2:	3008      	adds	r0, #8
   118a4:	f00a fef4 	bl	1c690 <net_buf_simple_add>
		cp_le->le = 0x01;
   118a8:	2301      	movs	r3, #1
   118aa:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   118ac:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   118ae:	4621      	mov	r1, r4
   118b0:	4632      	mov	r2, r6
   118b2:	f640 406d 	movw	r0, #3181	; 0xc6d
   118b6:	f003 ffd1 	bl	1585c <bt_hci_cmd_send_sync>
		if (err) {
   118ba:	4604      	mov	r4, r0
   118bc:	2800      	cmp	r0, #0
   118be:	f43f aeed 	beq.w	1169c <bt_init+0x184>
   118c2:	e6ad      	b.n	11620 <bt_init+0x108>
	else if (!bt_dev.le.acl_mtu) {
   118c4:	2900      	cmp	r1, #0
   118c6:	d1a0      	bne.n	1180a <bt_init+0x2f2>
		BT_ERR("ACL BR/EDR buffers not initialized");
   118c8:	4825      	ldr	r0, [pc, #148]	; (11960 <bt_init+0x448>)
   118ca:	2145      	movs	r1, #69	; 0x45
   118cc:	f012 fd6d 	bl	243aa <z_log_minimal_printk>
		return -EIO;
   118d0:	f06f 0404 	mvn.w	r4, #4
   118d4:	e6a4      	b.n	11620 <bt_init+0x108>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
   118d6:	4823      	ldr	r0, [pc, #140]	; (11964 <bt_init+0x44c>)
   118d8:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   118dc:	e7a9      	b.n	11832 <bt_init+0x31a>
	net_buf_unref(rsp);
   118de:	9801      	ldr	r0, [sp, #4]
   118e0:	f00a fdc0 	bl	1c464 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   118e4:	4621      	mov	r1, r4
   118e6:	aa01      	add	r2, sp, #4
   118e8:	f64f 4002 	movw	r0, #64514	; 0xfc02
   118ec:	f003 ffb6 	bl	1585c <bt_hci_cmd_send_sync>
	if (err) {
   118f0:	4604      	mov	r4, r0
   118f2:	b110      	cbz	r0, 118fa <bt_init+0x3e2>
		BT_WARN("Failed to read supported vendor commands");
   118f4:	481c      	ldr	r0, [pc, #112]	; (11968 <bt_init+0x450>)
   118f6:	2157      	movs	r1, #87	; 0x57
   118f8:	e7b2      	b.n	11860 <bt_init+0x348>
	rp.cmds = (void *)rsp->data;
   118fa:	9801      	ldr	r0, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   118fc:	6883      	ldr	r3, [r0, #8]
   118fe:	f8b3 3001 	ldrh.w	r3, [r3, #1]
   11902:	f8a5 30b9 	strh.w	r3, [r5, #185]	; 0xb9
	net_buf_unref(rsp);
   11906:	f00a fdad 	bl	1c464 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   1190a:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
   1190e:	075b      	lsls	r3, r3, #29
   11910:	d5a8      	bpl.n	11864 <bt_init+0x34c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   11912:	aa01      	add	r2, sp, #4
   11914:	4621      	mov	r1, r4
   11916:	f64f 4003 	movw	r0, #64515	; 0xfc03
   1191a:	f003 ff9f 	bl	1585c <bt_hci_cmd_send_sync>
		if (err) {
   1191e:	b110      	cbz	r0, 11926 <bt_init+0x40e>
			BT_WARN("Failed to read supported vendor features");
   11920:	4812      	ldr	r0, [pc, #72]	; (1196c <bt_init+0x454>)
   11922:	2157      	movs	r1, #87	; 0x57
   11924:	e79c      	b.n	11860 <bt_init+0x348>
		rp.feat = (void *)rsp->data;
   11926:	9801      	ldr	r0, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   11928:	6883      	ldr	r3, [r0, #8]
   1192a:	785b      	ldrb	r3, [r3, #1]
   1192c:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
		net_buf_unref(rsp);
   11930:	f00a fd98 	bl	1c464 <net_buf_unref>
   11934:	e796      	b.n	11864 <bt_init+0x34c>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   11936:	2108      	movs	r1, #8
   11938:	480d      	ldr	r0, [pc, #52]	; (11970 <bt_init+0x458>)
   1193a:	f013 fbd2 	bl	250e2 <atomic_or>
	bt_finalize_init();
   1193e:	f004 fc19 	bl	16174 <bt_finalize_init>
	return 0;
   11942:	e66d      	b.n	11620 <bt_init+0x108>
   11944:	f3af 8000 	nop.w
   11948:	02008890 	.word	0x02008890
   1194c:	20008000 	.word	0x20008000
   11950:	200003a0 	.word	0x200003a0
   11954:	200003d0 	.word	0x200003d0
   11958:	000299bb 	.word	0x000299bb
   1195c:	00029a40 	.word	0x00029a40
   11960:	00029993 	.word	0x00029993
   11964:	02008810 	.word	0x02008810
   11968:	000299e4 	.word	0x000299e4
   1196c:	00029a12 	.word	0x00029a12
   11970:	2000039c 	.word	0x2000039c

00011974 <disconnected>:
	is_connected = 1;

}

static void disconnected(struct bt_conn *conn, uint8_t reason)
{
   11974:	b508      	push	{r3, lr}
	printk("Disconnected (reason %u)\n", reason);
   11976:	4804      	ldr	r0, [pc, #16]	; (11988 <disconnected+0x14>)
   11978:	f012 fb5e 	bl	24038 <printk>
	clear_melty_parameters_initialized();
   1197c:	f000 f9b4 	bl	11ce8 <clear_melty_parameters_initialized>
	is_connected = 0;
   11980:	4b02      	ldr	r3, [pc, #8]	; (1198c <disconnected+0x18>)
   11982:	2200      	movs	r2, #0
   11984:	601a      	str	r2, [r3, #0]

}
   11986:	bd08      	pop	{r3, pc}
   11988:	000286f8 	.word	0x000286f8
   1198c:	20001dc0 	.word	0x20001dc0

00011990 <connected>:
{
   11990:	b508      	push	{r3, lr}
	if (err) {
   11992:	b121      	cbz	r1, 1199e <connected+0xe>
}
   11994:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		printk("Connection failed (err %u)\n", err);
   11998:	4804      	ldr	r0, [pc, #16]	; (119ac <connected+0x1c>)
   1199a:	f012 bb4d 	b.w	24038 <printk>
	printk("Connected\n");
   1199e:	4804      	ldr	r0, [pc, #16]	; (119b0 <connected+0x20>)
   119a0:	f012 fb4a 	bl	24038 <printk>
	is_connected = 1;
   119a4:	4b03      	ldr	r3, [pc, #12]	; (119b4 <connected+0x24>)
   119a6:	2201      	movs	r2, #1
   119a8:	601a      	str	r2, [r3, #0]
}
   119aa:	bd08      	pop	{r3, pc}
   119ac:	00028712 	.word	0x00028712
   119b0:	0002872e 	.word	0x0002872e
   119b4:	20001dc0 	.word	0x20001dc0

000119b8 <bt_addr_le_to_str.constprop.0.isra.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   119b8:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   119ba:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   119bc:	b08a      	sub	sp, #40	; 0x28
   119be:	4604      	mov	r4, r0
   119c0:	460e      	mov	r6, r1
   119c2:	ad07      	add	r5, sp, #28
	switch (addr->type) {
   119c4:	2b03      	cmp	r3, #3
   119c6:	d820      	bhi.n	11a0a <bt_addr_le_to_str.constprop.0.isra.0+0x52>
   119c8:	e8df f003 	tbb	[pc, r3]
   119cc:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   119d0:	4911      	ldr	r1, [pc, #68]	; (11a18 <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
   119d2:	4628      	mov	r0, r5
   119d4:	f016 f874 	bl	27ac0 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   119d8:	7863      	ldrb	r3, [r4, #1]
   119da:	9304      	str	r3, [sp, #16]
   119dc:	78a3      	ldrb	r3, [r4, #2]
   119de:	9303      	str	r3, [sp, #12]
   119e0:	78e3      	ldrb	r3, [r4, #3]
   119e2:	9302      	str	r3, [sp, #8]
   119e4:	7923      	ldrb	r3, [r4, #4]
   119e6:	9301      	str	r3, [sp, #4]
   119e8:	7963      	ldrb	r3, [r4, #5]
   119ea:	9300      	str	r3, [sp, #0]
   119ec:	4a0b      	ldr	r2, [pc, #44]	; (11a1c <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
   119ee:	79a3      	ldrb	r3, [r4, #6]
   119f0:	9505      	str	r5, [sp, #20]
   119f2:	211e      	movs	r1, #30
   119f4:	4630      	mov	r0, r6
   119f6:	f012 fb2c 	bl	24052 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
   119fa:	b00a      	add	sp, #40	; 0x28
   119fc:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
   119fe:	4908      	ldr	r1, [pc, #32]	; (11a20 <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
   11a00:	e7e7      	b.n	119d2 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
   11a02:	4908      	ldr	r1, [pc, #32]	; (11a24 <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
   11a04:	e7e5      	b.n	119d2 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
   11a06:	4908      	ldr	r1, [pc, #32]	; (11a28 <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
   11a08:	e7e3      	b.n	119d2 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   11a0a:	4a08      	ldr	r2, [pc, #32]	; (11a2c <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
   11a0c:	210a      	movs	r1, #10
   11a0e:	4628      	mov	r0, r5
   11a10:	f012 fb1f 	bl	24052 <snprintk>
		break;
   11a14:	e7e0      	b.n	119d8 <bt_addr_le_to_str.constprop.0.isra.0+0x20>
   11a16:	bf00      	nop
   11a18:	00028739 	.word	0x00028739
   11a1c:	00028762 	.word	0x00028762
   11a20:	00028740 	.word	0x00028740
   11a24:	00028747 	.word	0x00028747
   11a28:	00028751 	.word	0x00028751
   11a2c:	0002875b 	.word	0x0002875b

00011a30 <security_changed>:

#ifdef CONFIG_BT_LBS_SECURITY_ENABLED
static void security_changed(struct bt_conn *conn, bt_security_t level,
			     enum bt_security_err err)
{
   11a30:	b530      	push	{r4, r5, lr}
   11a32:	b089      	sub	sp, #36	; 0x24
   11a34:	460c      	mov	r4, r1
   11a36:	4615      	mov	r5, r2
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   11a38:	f013 ff1a 	bl	25870 <bt_conn_get_dst>
   11a3c:	4669      	mov	r1, sp
   11a3e:	f7ff ffbb 	bl	119b8 <bt_addr_le_to_str.constprop.0.isra.0>

	if (!err) {
   11a42:	b935      	cbnz	r5, 11a52 <security_changed+0x22>
		printk("Security changed: %s level %u\n", addr, level);
   11a44:	4806      	ldr	r0, [pc, #24]	; (11a60 <security_changed+0x30>)
   11a46:	4622      	mov	r2, r4
   11a48:	4669      	mov	r1, sp
   11a4a:	f012 faf5 	bl	24038 <printk>
	} else {
		printk("Security failed: %s level %u err %d\n", addr, level,
			err);
	}
}
   11a4e:	b009      	add	sp, #36	; 0x24
   11a50:	bd30      	pop	{r4, r5, pc}
		printk("Security failed: %s level %u err %d\n", addr, level,
   11a52:	4804      	ldr	r0, [pc, #16]	; (11a64 <security_changed+0x34>)
   11a54:	462b      	mov	r3, r5
   11a56:	4622      	mov	r2, r4
   11a58:	4669      	mov	r1, sp
   11a5a:	f012 faed 	bl	24038 <printk>
}
   11a5e:	e7f6      	b.n	11a4e <security_changed+0x1e>
   11a60:	00028785 	.word	0x00028785
   11a64:	000287a4 	.word	0x000287a4

00011a68 <pairing_failed>:

	printk("Pairing completed: %s, bonded: %d\n", addr, bonded);
}

static void pairing_failed(struct bt_conn *conn, enum bt_security_err reason)
{
   11a68:	b510      	push	{r4, lr}
   11a6a:	b088      	sub	sp, #32
   11a6c:	460c      	mov	r4, r1
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   11a6e:	f013 feff 	bl	25870 <bt_conn_get_dst>
   11a72:	4669      	mov	r1, sp
   11a74:	f7ff ffa0 	bl	119b8 <bt_addr_le_to_str.constprop.0.isra.0>

	printk("Pairing failed conn: %s, reason %d\n", addr, reason);
   11a78:	4803      	ldr	r0, [pc, #12]	; (11a88 <pairing_failed+0x20>)
   11a7a:	4622      	mov	r2, r4
   11a7c:	4669      	mov	r1, sp
   11a7e:	f012 fadb 	bl	24038 <printk>
}
   11a82:	b008      	add	sp, #32
   11a84:	bd10      	pop	{r4, pc}
   11a86:	bf00      	nop
   11a88:	000287c9 	.word	0x000287c9

00011a8c <pairing_complete>:
{
   11a8c:	b510      	push	{r4, lr}
   11a8e:	b088      	sub	sp, #32
   11a90:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   11a92:	f013 feed 	bl	25870 <bt_conn_get_dst>
   11a96:	4669      	mov	r1, sp
   11a98:	f7ff ff8e 	bl	119b8 <bt_addr_le_to_str.constprop.0.isra.0>
	printk("Pairing completed: %s, bonded: %d\n", addr, bonded);
   11a9c:	4803      	ldr	r0, [pc, #12]	; (11aac <pairing_complete+0x20>)
   11a9e:	4622      	mov	r2, r4
   11aa0:	4669      	mov	r1, sp
   11aa2:	f012 fac9 	bl	24038 <printk>
}
   11aa6:	b008      	add	sp, #32
   11aa8:	bd10      	pop	{r4, pc}
   11aaa:	bf00      	nop
   11aac:	000287ed 	.word	0x000287ed

00011ab0 <auth_cancel>:
{
   11ab0:	b500      	push	{lr}
   11ab2:	b089      	sub	sp, #36	; 0x24
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   11ab4:	f013 fedc 	bl	25870 <bt_conn_get_dst>
   11ab8:	4669      	mov	r1, sp
   11aba:	f7ff ff7d 	bl	119b8 <bt_addr_le_to_str.constprop.0.isra.0>
	printk("Pairing cancelled: %s\n", addr);
   11abe:	4803      	ldr	r0, [pc, #12]	; (11acc <auth_cancel+0x1c>)
   11ac0:	4669      	mov	r1, sp
   11ac2:	f012 fab9 	bl	24038 <printk>
}
   11ac6:	b009      	add	sp, #36	; 0x24
   11ac8:	f85d fb04 	ldr.w	pc, [sp], #4
   11acc:	00028810 	.word	0x00028810

00011ad0 <auth_passkey_display>:
{
   11ad0:	b510      	push	{r4, lr}
   11ad2:	b088      	sub	sp, #32
   11ad4:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   11ad6:	f013 fecb 	bl	25870 <bt_conn_get_dst>
   11ada:	4669      	mov	r1, sp
   11adc:	f7ff ff6c 	bl	119b8 <bt_addr_le_to_str.constprop.0.isra.0>
	printk("Passkey for %s: %06u\n", addr, passkey);
   11ae0:	4803      	ldr	r0, [pc, #12]	; (11af0 <auth_passkey_display+0x20>)
   11ae2:	4622      	mov	r2, r4
   11ae4:	4669      	mov	r1, sp
   11ae6:	f012 faa7 	bl	24038 <printk>
}
   11aea:	b008      	add	sp, #32
   11aec:	bd10      	pop	{r4, pc}
   11aee:	bf00      	nop
   11af0:	00028827 	.word	0x00028827

00011af4 <check_heart_beat>:
static struct bt_conn_auth_cb conn_auth_callbacks;
#endif


bool check_heart_beat(void)
{
   11af4:	b570      	push	{r4, r5, r6, lr}
	return z_impl_k_uptime_ticks();
   11af6:	f015 feac 	bl	27852 <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   11afa:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
	static bool heart_beat_good = false;
	static uint8_t last_heart_beat = 0;
	static uint64_t time_at_last_check = 0;

	if (k_uptime_get() - time_at_last_check > HEART_BEAT_CHECK_FREQ_MS) {
   11afe:	4d1a      	ldr	r5, [pc, #104]	; (11b68 <check_heart_beat+0x74>)
   11b00:	4e1a      	ldr	r6, [pc, #104]	; (11b6c <check_heart_beat+0x78>)
   11b02:	fba0 0304 	umull	r0, r3, r0, r4
   11b06:	fb04 3101 	mla	r1, r4, r1, r3
   11b0a:	e9d5 3200 	ldrd	r3, r2, [r5]
   11b0e:	0bc0      	lsrs	r0, r0, #15
   11b10:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   11b14:	1ac0      	subs	r0, r0, r3
   11b16:	ea4f 31d1 	mov.w	r1, r1, lsr #15
   11b1a:	f240 2359 	movw	r3, #601	; 0x259
   11b1e:	eb61 0102 	sbc.w	r1, r1, r2
   11b22:	4298      	cmp	r0, r3
   11b24:	f171 0300 	sbcs.w	r3, r1, #0
   11b28:	d319      	bcc.n	11b5e <check_heart_beat+0x6a>
   11b2a:	f015 fe92 	bl	27852 <z_impl_k_uptime_ticks>
   11b2e:	fba0 0304 	umull	r0, r3, r0, r4
   11b32:	fb04 3401 	mla	r4, r4, r1, r3
   11b36:	0bc0      	lsrs	r0, r0, #15
   11b38:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
   11b3c:	0be4      	lsrs	r4, r4, #15
		time_at_last_check = k_uptime_get();
   11b3e:	e9c5 0400 	strd	r0, r4, [r5]
		int current_heart_beat = get_heart_beat();
   11b42:	f000 f8e3 	bl	11d0c <get_heart_beat>
		//heartbeat must be a new number - and between 10 and 13 (inclusive)
		if (current_heart_beat != last_heart_beat && current_heart_beat >= 10 && current_heart_beat <= 13) {
   11b46:	4a0a      	ldr	r2, [pc, #40]	; (11b70 <check_heart_beat+0x7c>)
   11b48:	7813      	ldrb	r3, [r2, #0]
   11b4a:	4283      	cmp	r3, r0
   11b4c:	d009      	beq.n	11b62 <check_heart_beat+0x6e>
   11b4e:	f1a0 030a 	sub.w	r3, r0, #10
   11b52:	b2db      	uxtb	r3, r3
   11b54:	2b03      	cmp	r3, #3
   11b56:	d804      	bhi.n	11b62 <check_heart_beat+0x6e>
			last_heart_beat = current_heart_beat;
   11b58:	7010      	strb	r0, [r2, #0]
			heart_beat_good = true;
   11b5a:	2301      	movs	r3, #1
		} else {
			heart_beat_good = false;
   11b5c:	7033      	strb	r3, [r6, #0]
		}
	}
	
	return heart_beat_good;
}
   11b5e:	7830      	ldrb	r0, [r6, #0]
   11b60:	bd70      	pop	{r4, r5, r6, pc}
			heart_beat_good = false;
   11b62:	2300      	movs	r3, #0
   11b64:	e7fa      	b.n	11b5c <check_heart_beat+0x68>
   11b66:	bf00      	nop
   11b68:	20001630 	.word	0x20001630
   11b6c:	20002308 	.word	0x20002308
   11b70:	20002309 	.word	0x20002309

00011b74 <main>:

void main(void)
{
   11b74:	b530      	push	{r4, r5, lr}
	int err;

	printk("Starting Bluetooth Peripheral LBS example\n");
   11b76:	482e      	ldr	r0, [pc, #184]	; (11c30 <main+0xbc>)
{
   11b78:	b089      	sub	sp, #36	; 0x24
	printk("Starting Bluetooth Peripheral LBS example\n");
   11b7a:	f012 fa5d 	bl	24038 <printk>

	if (IS_ENABLED(CONFIG_BT_LBS_SECURITY_ENABLED)) {
		err = bt_conn_auth_cb_register(&conn_auth_callbacks);
   11b7e:	482d      	ldr	r0, [pc, #180]	; (11c34 <main+0xc0>)
   11b80:	f006 f95c 	bl	17e3c <bt_conn_auth_cb_register>
		if (err) {
   11b84:	b128      	cbz	r0, 11b92 <main+0x1e>
			printk("Failed to register authorization callbacks.\n");
   11b86:	482c      	ldr	r0, [pc, #176]	; (11c38 <main+0xc4>)

		status_led_flash(is_connected);

	}

}
   11b88:	b009      	add	sp, #36	; 0x24
   11b8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			printk("Failed to register authorization info callbacks.\n");
   11b8e:	f012 ba53 	b.w	24038 <printk>
		err = bt_conn_auth_info_cb_register(&conn_auth_info_callbacks);
   11b92:	482a      	ldr	r0, [pc, #168]	; (11c3c <main+0xc8>)
   11b94:	f006 f96e 	bl	17e74 <bt_conn_auth_info_cb_register>
		if (err) {
   11b98:	b108      	cbz	r0, 11b9e <main+0x2a>
			printk("Failed to register authorization info callbacks.\n");
   11b9a:	4829      	ldr	r0, [pc, #164]	; (11c40 <main+0xcc>)
   11b9c:	e7f4      	b.n	11b88 <main+0x14>
	err = bt_enable(NULL);
   11b9e:	f004 fafb 	bl	16198 <bt_enable>
	if (err) {
   11ba2:	4601      	mov	r1, r0
   11ba4:	b128      	cbz	r0, 11bb2 <main+0x3e>
		printk("Bluetooth init failed (err %d)\n", err);
   11ba6:	4827      	ldr	r0, [pc, #156]	; (11c44 <main+0xd0>)
}
   11ba8:	b009      	add	sp, #36	; 0x24
   11baa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		printk("Failed to init LBS (err:%d)\n", err);
   11bae:	f012 ba43 	b.w	24038 <printk>
	printk("Bluetooth initialized\n");
   11bb2:	4825      	ldr	r0, [pc, #148]	; (11c48 <main+0xd4>)
   11bb4:	f012 fa40 	bl	24038 <printk>
		settings_load();
   11bb8:	f012 fe6e 	bl	24898 <settings_load>
	err = bt_melty_init();
   11bbc:	f012 f986 	bl	23ecc <bt_melty_init>
	if (err) {
   11bc0:	4601      	mov	r1, r0
   11bc2:	b108      	cbz	r0, 11bc8 <main+0x54>
		printk("Failed to init LBS (err:%d)\n", err);
   11bc4:	4821      	ldr	r0, [pc, #132]	; (11c4c <main+0xd8>)
   11bc6:	e7ef      	b.n	11ba8 <main+0x34>
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
   11bc8:	4d21      	ldr	r5, [pc, #132]	; (11c50 <main+0xdc>)
   11bca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   11bcc:	ac03      	add	r4, sp, #12
   11bce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   11bd0:	682b      	ldr	r3, [r5, #0]
   11bd2:	6023      	str	r3, [r4, #0]
   11bd4:	2301      	movs	r3, #1
   11bd6:	491f      	ldr	r1, [pc, #124]	; (11c54 <main+0xe0>)
   11bd8:	9300      	str	r3, [sp, #0]
   11bda:	2202      	movs	r2, #2
   11bdc:	4b1e      	ldr	r3, [pc, #120]	; (11c58 <main+0xe4>)
   11bde:	a803      	add	r0, sp, #12
   11be0:	f005 f8b8 	bl	16d54 <bt_le_adv_start>
	if (err) {
   11be4:	4601      	mov	r1, r0
   11be6:	b120      	cbz	r0, 11bf2 <main+0x7e>
		printk("Advertising failed to start (err %d)\n", err);
   11be8:	481c      	ldr	r0, [pc, #112]	; (11c5c <main+0xe8>)
   11bea:	f012 fa25 	bl	24038 <printk>
}
   11bee:	b009      	add	sp, #36	; 0x24
   11bf0:	bd30      	pop	{r4, r5, pc}
	printk("Advertising successfully started\n");
   11bf2:	481b      	ldr	r0, [pc, #108]	; (11c60 <main+0xec>)
		while (is_connected == 1 && get_melty_parameters_initialized()
   11bf4:	4c1b      	ldr	r4, [pc, #108]	; (11c64 <main+0xf0>)
	printk("Advertising successfully started\n");
   11bf6:	f012 fa1f 	bl	24038 <printk>
	init_melty();
   11bfa:	f000 f921 	bl	11e40 <init_melty>
		while (is_connected == 1 && get_melty_parameters_initialized()
   11bfe:	6823      	ldr	r3, [r4, #0]
   11c00:	2b01      	cmp	r3, #1
   11c02:	d005      	beq.n	11c10 <main+0x9c>
		motors_safe();
   11c04:	f000 f936 	bl	11e74 <motors_safe>
		status_led_flash(is_connected);
   11c08:	6820      	ldr	r0, [r4, #0]
   11c0a:	f000 faad 	bl	12168 <status_led_flash>
		while (is_connected == 1 && get_melty_parameters_initialized()
   11c0e:	e7f6      	b.n	11bfe <main+0x8a>
   11c10:	f000 f870 	bl	11cf4 <get_melty_parameters_initialized>
   11c14:	2800      	cmp	r0, #0
   11c16:	d0f5      	beq.n	11c04 <main+0x90>
		 && get_throttle() != 0 && check_heart_beat()) {
   11c18:	f000 f884 	bl	11d24 <get_throttle>
   11c1c:	2800      	cmp	r0, #0
   11c1e:	d0f1      	beq.n	11c04 <main+0x90>
   11c20:	f7ff ff68 	bl	11af4 <check_heart_beat>
   11c24:	2800      	cmp	r0, #0
   11c26:	d0ed      	beq.n	11c04 <main+0x90>
			do_melty();
   11c28:	f000 fa14 	bl	12054 <do_melty>
   11c2c:	e7e7      	b.n	11bfe <main+0x8a>
   11c2e:	bf00      	nop
   11c30:	0002883d 	.word	0x0002883d
   11c34:	200004e8 	.word	0x200004e8
   11c38:	00028868 	.word	0x00028868
   11c3c:	20000500 	.word	0x20000500
   11c40:	00028895 	.word	0x00028895
   11c44:	000288c7 	.word	0x000288c7
   11c48:	000288e7 	.word	0x000288e7
   11c4c:	000288fe 	.word	0x000288fe
   11c50:	00027f70 	.word	0x00027f70
   11c54:	00028018 	.word	0x00028018
   11c58:	00028028 	.word	0x00028028
   11c5c:	0002891b 	.word	0x0002891b
   11c60:	00028941 	.word	0x00028941
   11c64:	20001dc0 	.word	0x20001dc0

00011c68 <melty_ccc_cfg_changed>:
static u_int8_t heart_beat;

static void melty_ccc_cfg_changed(const struct bt_gatt_attr *attr,
				  uint16_t value)
{
	notify_enabled = (value == BT_GATT_CCC_NOTIFY);
   11c68:	1e4b      	subs	r3, r1, #1
   11c6a:	4259      	negs	r1, r3
   11c6c:	4159      	adcs	r1, r3
   11c6e:	4b01      	ldr	r3, [pc, #4]	; (11c74 <melty_ccc_cfg_changed+0xc>)
   11c70:	7019      	strb	r1, [r3, #0]
}
   11c72:	4770      	bx	lr
   11c74:	2000230e 	.word	0x2000230e

00011c78 <update_melty_config>:

static ssize_t update_melty_config(struct bt_conn *conn,
			 const struct bt_gatt_attr *attr,
			 const void *buf,
			 uint16_t len, uint16_t offset, uint8_t flags)
{
   11c78:	b538      	push	{r3, r4, r5, lr}
   11c7a:	461d      	mov	r5, r3
	LOG_DBG("Attribute write, handle: %u, conn: %p", attr->handle,
		(void *)conn);

	if (len != 7U) {
   11c7c:	2d07      	cmp	r5, #7
{
   11c7e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   11c82:	4614      	mov	r4, r2
	if (len != 7U) {
   11c84:	d11c      	bne.n	11cc0 <update_melty_config+0x48>
		LOG_DBG("Write led: Incorrect data length");
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	if (offset != 0) {
   11c86:	b9f3      	cbnz	r3, 11cc6 <update_melty_config+0x4e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

    melty_parameters_initialized = false;

    radius = (((uint8_t *)buf)[0] + ((uint8_t *)buf)[1] * 256) / 1000.0f;
   11c88:	7813      	ldrb	r3, [r2, #0]
   11c8a:	7850      	ldrb	r0, [r2, #1]
   11c8c:	eb03 2000 	add.w	r0, r3, r0, lsl #8
   11c90:	f7ee fefe 	bl	a90 <__aeabi_i2f>
   11c94:	490d      	ldr	r1, [pc, #52]	; (11ccc <update_melty_config+0x54>)
   11c96:	f7ef f803 	bl	ca0 <__aeabi_fdiv>
   11c9a:	4b0d      	ldr	r3, [pc, #52]	; (11cd0 <update_melty_config+0x58>)
    led_offset = ((uint8_t *)buf)[2];
   11c9c:	78a2      	ldrb	r2, [r4, #2]
    radius = (((uint8_t *)buf)[0] + ((uint8_t *)buf)[1] * 256) / 1000.0f;
   11c9e:	6018      	str	r0, [r3, #0]
    led_offset = ((uint8_t *)buf)[2];
   11ca0:	4b0c      	ldr	r3, [pc, #48]	; (11cd4 <update_melty_config+0x5c>)
   11ca2:	701a      	strb	r2, [r3, #0]
    throttle = ((uint8_t *)buf)[3];
   11ca4:	4b0c      	ldr	r3, [pc, #48]	; (11cd8 <update_melty_config+0x60>)
   11ca6:	78e2      	ldrb	r2, [r4, #3]
   11ca8:	701a      	strb	r2, [r3, #0]
    translate_direction = ((int8_t *)buf)[4];
   11caa:	4b0c      	ldr	r3, [pc, #48]	; (11cdc <update_melty_config+0x64>)
   11cac:	7922      	ldrb	r2, [r4, #4]
   11cae:	701a      	strb	r2, [r3, #0]
    heart_beat = ((int8_t *)buf)[5];
   11cb0:	4b0b      	ldr	r3, [pc, #44]	; (11ce0 <update_melty_config+0x68>)
   11cb2:	7962      	ldrb	r2, [r4, #5]
   11cb4:	701a      	strb	r2, [r3, #0]
    //byte 6 reserved

    melty_parameters_initialized = true;
   11cb6:	4b0b      	ldr	r3, [pc, #44]	; (11ce4 <update_melty_config+0x6c>)
   11cb8:	2201      	movs	r2, #1
   11cba:	701a      	strb	r2, [r3, #0]
    LOG_DBG("params updated");

	return len;
   11cbc:	4628      	mov	r0, r5
}
   11cbe:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   11cc0:	f06f 000c 	mvn.w	r0, #12
   11cc4:	e7fb      	b.n	11cbe <update_melty_config+0x46>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   11cc6:	f06f 0006 	mvn.w	r0, #6
   11cca:	e7f8      	b.n	11cbe <update_melty_config+0x46>
   11ccc:	447a0000 	.word	0x447a0000
   11cd0:	20001dc4 	.word	0x20001dc4
   11cd4:	2000230c 	.word	0x2000230c
   11cd8:	2000230f 	.word	0x2000230f
   11cdc:	20002310 	.word	0x20002310
   11ce0:	2000230b 	.word	0x2000230b
   11ce4:	2000230d 	.word	0x2000230d

00011ce8 <clear_melty_parameters_initialized>:

void clear_melty_parameters_initialized(void) {
    melty_parameters_initialized = false;
   11ce8:	4b01      	ldr	r3, [pc, #4]	; (11cf0 <clear_melty_parameters_initialized+0x8>)
   11cea:	2200      	movs	r2, #0
   11cec:	701a      	strb	r2, [r3, #0]
}
   11cee:	4770      	bx	lr
   11cf0:	2000230d 	.word	0x2000230d

00011cf4 <get_melty_parameters_initialized>:

bool get_melty_parameters_initialized(void) {
    return melty_parameters_initialized;
}
   11cf4:	4b01      	ldr	r3, [pc, #4]	; (11cfc <get_melty_parameters_initialized+0x8>)
   11cf6:	7818      	ldrb	r0, [r3, #0]
   11cf8:	4770      	bx	lr
   11cfa:	bf00      	nop
   11cfc:	2000230d 	.word	0x2000230d

00011d00 <get_radius>:

float get_radius(void) {
    return radius;
}
   11d00:	4b01      	ldr	r3, [pc, #4]	; (11d08 <get_radius+0x8>)
   11d02:	6818      	ldr	r0, [r3, #0]
   11d04:	4770      	bx	lr
   11d06:	bf00      	nop
   11d08:	20001dc4 	.word	0x20001dc4

00011d0c <get_heart_beat>:


u_int8_t get_heart_beat(void) {
    return heart_beat;
}
   11d0c:	4b01      	ldr	r3, [pc, #4]	; (11d14 <get_heart_beat+0x8>)
   11d0e:	7818      	ldrb	r0, [r3, #0]
   11d10:	4770      	bx	lr
   11d12:	bf00      	nop
   11d14:	2000230b 	.word	0x2000230b

00011d18 <get_translate_direction>:

u_int8_t get_translate_direction(void) {
    return translate_direction;
}
   11d18:	4b01      	ldr	r3, [pc, #4]	; (11d20 <get_translate_direction+0x8>)
   11d1a:	7818      	ldrb	r0, [r3, #0]
   11d1c:	4770      	bx	lr
   11d1e:	bf00      	nop
   11d20:	20002310 	.word	0x20002310

00011d24 <get_throttle>:

u_int8_t get_throttle(void) {
    return throttle;
}
   11d24:	4b01      	ldr	r3, [pc, #4]	; (11d2c <get_throttle+0x8>)
   11d26:	7818      	ldrb	r0, [r3, #0]
   11d28:	4770      	bx	lr
   11d2a:	bf00      	nop
   11d2c:	2000230f 	.word	0x2000230f

00011d30 <get_led_offset>:

u_int8_t get_led_offset(void) {
    return led_offset;
}
   11d30:	4b01      	ldr	r3, [pc, #4]	; (11d38 <get_led_offset+0x8>)
   11d32:	7818      	ldrb	r0, [r3, #0]
   11d34:	4770      	bx	lr
   11d36:	bf00      	nop
   11d38:	2000230c 	.word	0x2000230c

00011d3c <bt_send_melty_stats>:
	//nothing to init / placeholder
	return 0;
}

int bt_send_melty_stats(u_int8_t melty_stats[3])
{
   11d3c:	b510      	push	{r4, lr}
	if (!notify_enabled) {
   11d3e:	4b0c      	ldr	r3, [pc, #48]	; (11d70 <bt_send_melty_stats+0x34>)
   11d40:	781b      	ldrb	r3, [r3, #0]
{
   11d42:	b086      	sub	sp, #24
   11d44:	4604      	mov	r4, r0
	if (!notify_enabled) {
   11d46:	b183      	cbz	r3, 11d6a <bt_send_melty_stats+0x2e>
				 const struct bt_gatt_attr *attr,
				 const void *data, uint16_t len)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
   11d48:	2100      	movs	r1, #0
   11d4a:	2218      	movs	r2, #24
   11d4c:	4668      	mov	r0, sp
   11d4e:	f015 fea6 	bl	27a9e <memset>

	params.attr = attr;
   11d52:	4b08      	ldr	r3, [pc, #32]	; (11d74 <bt_send_melty_stats+0x38>)
	params.data = data;
	params.len = len;

	return bt_gatt_notify_cb(conn, &params);
   11d54:	4669      	mov	r1, sp
	params.data = data;
   11d56:	e9cd 3401 	strd	r3, r4, [sp, #4]
	return bt_gatt_notify_cb(conn, &params);
   11d5a:	2000      	movs	r0, #0
	params.len = len;
   11d5c:	2303      	movs	r3, #3
   11d5e:	f8ad 300c 	strh.w	r3, [sp, #12]
	return bt_gatt_notify_cb(conn, &params);
   11d62:	f008 f97f 	bl	1a064 <bt_gatt_notify_cb>
	}

	return bt_gatt_notify(NULL, &meltyble_svc.attrs[2],
			      melty_stats,
			      3);
}
   11d66:	b006      	add	sp, #24
   11d68:	bd10      	pop	{r4, pc}
		return -EACCES;
   11d6a:	f06f 000c 	mvn.w	r0, #12
   11d6e:	e7fa      	b.n	11d66 <bt_send_melty_stats+0x2a>
   11d70:	2000230e 	.word	0x2000230e
   11d74:	00028058 	.word	0x00028058

00011d78 <z_impl_gpio_pin_configure.constprop.0.isra.0>:
	}

	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   11d78:	6843      	ldr	r3, [r0, #4]
static inline int z_impl_gpio_pin_configure(const struct device *port,
   11d7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   11d7e:	681b      	ldr	r3, [r3, #0]
	const struct gpio_driver_api *api =
   11d80:	f8d0 8008 	ldr.w	r8, [r0, #8]
	struct gpio_driver_data *data =
   11d84:	6907      	ldr	r7, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   11d86:	2601      	movs	r6, #1
   11d88:	408e      	lsls	r6, r1
   11d8a:	421e      	tst	r6, r3
static inline int z_impl_gpio_pin_configure(const struct device *port,
   11d8c:	4604      	mov	r4, r0
   11d8e:	460d      	mov	r5, r1
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   11d90:	d10a      	bne.n	11da8 <z_impl_gpio_pin_configure.constprop.0.isra.0+0x30>
   11d92:	490c      	ldr	r1, [pc, #48]	; (11dc4 <z_impl_gpio_pin_configure.constprop.0.isra.0+0x4c>)
   11d94:	480c      	ldr	r0, [pc, #48]	; (11dc8 <z_impl_gpio_pin_configure.constprop.0.isra.0+0x50>)
   11d96:	f44f 7235 	mov.w	r2, #724	; 0x2d4
   11d9a:	f012 faf8 	bl	2438e <assert_print>
   11d9e:	4809      	ldr	r0, [pc, #36]	; (11dc4 <z_impl_gpio_pin_configure.constprop.0.isra.0+0x4c>)
   11da0:	f44f 7135 	mov.w	r1, #724	; 0x2d4
   11da4:	f012 faec 	bl	24380 <assert_post_action>
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   11da8:	683b      	ldr	r3, [r7, #0]
   11daa:	ea23 0306 	bic.w	r3, r3, r6
   11dae:	603b      	str	r3, [r7, #0]
	}

	return api->pin_configure(port, pin, flags);
   11db0:	4629      	mov	r1, r5
   11db2:	f8d8 3000 	ldr.w	r3, [r8]
   11db6:	4620      	mov	r0, r4
   11db8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
}
   11dbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->pin_configure(port, pin, flags);
   11dc0:	4718      	bx	r3
   11dc2:	bf00      	nop
   11dc4:	0002897e 	.word	0x0002897e
   11dc8:	000289af 	.word	0x000289af

00011dcc <gpio_pin_set.isra.0>:
		(const struct gpio_driver_config *)port->config;
	const struct gpio_driver_data *const data =
			(const struct gpio_driver_data *)port->data;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   11dcc:	6843      	ldr	r3, [r0, #4]
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
   11dce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   11dd2:	681b      	ldr	r3, [r3, #0]
	const struct gpio_driver_data *const data =
   11dd4:	6907      	ldr	r7, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   11dd6:	2501      	movs	r5, #1
   11dd8:	408d      	lsls	r5, r1
   11dda:	421d      	tst	r5, r3
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
   11ddc:	4604      	mov	r4, r0
   11dde:	4616      	mov	r6, r2
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   11de0:	d10a      	bne.n	11df8 <gpio_pin_set.isra.0+0x2c>
   11de2:	4915      	ldr	r1, [pc, #84]	; (11e38 <gpio_pin_set.isra.0+0x6c>)
   11de4:	4815      	ldr	r0, [pc, #84]	; (11e3c <gpio_pin_set.isra.0+0x70>)
   11de6:	f240 4292 	movw	r2, #1170	; 0x492
   11dea:	f012 fad0 	bl	2438e <assert_print>
   11dee:	4812      	ldr	r0, [pc, #72]	; (11e38 <gpio_pin_set.isra.0+0x6c>)
   11df0:	f240 4192 	movw	r1, #1170	; 0x492
   11df4:	f012 fac4 	bl	24380 <assert_post_action>
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   11df8:	683b      	ldr	r3, [r7, #0]
   11dfa:	421d      	tst	r5, r3
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   11dfc:	6863      	ldr	r3, [r4, #4]
   11dfe:	681b      	ldr	r3, [r3, #0]
   11e00:	bf18      	it	ne
   11e02:	f086 0601 	eorne.w	r6, r6, #1
   11e06:	421d      	tst	r5, r3
   11e08:	d10a      	bne.n	11e20 <gpio_pin_set.isra.0+0x54>
   11e0a:	490b      	ldr	r1, [pc, #44]	; (11e38 <gpio_pin_set.isra.0+0x6c>)
   11e0c:	480b      	ldr	r0, [pc, #44]	; (11e3c <gpio_pin_set.isra.0+0x70>)
   11e0e:	f44f 628d 	mov.w	r2, #1128	; 0x468
   11e12:	f012 fabc 	bl	2438e <assert_print>
   11e16:	4808      	ldr	r0, [pc, #32]	; (11e38 <gpio_pin_set.isra.0+0x6c>)
   11e18:	f44f 618d 	mov.w	r1, #1128	; 0x468
   11e1c:	f012 fab0 	bl	24380 <assert_post_action>
	if (value != 0)	{
   11e20:	b136      	cbz	r6, 11e30 <gpio_pin_set.isra.0+0x64>
	return api->port_set_bits_raw(port, pins);
   11e22:	68a3      	ldr	r3, [r4, #8]
   11e24:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   11e26:	4629      	mov	r1, r5
   11e28:	4620      	mov	r0, r4
		value = (value != 0) ? 0 : 1;
	}

	return gpio_pin_set_raw(port, pin, value);
}
   11e2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->port_clear_bits_raw(port, pins);
   11e2e:	4718      	bx	r3
   11e30:	68a3      	ldr	r3, [r4, #8]
   11e32:	691b      	ldr	r3, [r3, #16]
   11e34:	e7f7      	b.n	11e26 <gpio_pin_set.isra.0+0x5a>
   11e36:	bf00      	nop
   11e38:	0002897e 	.word	0x0002897e
   11e3c:	000289af 	.word	0x000289af

00011e40 <init_melty>:
		multi_sample += AnalogRead(ADC_CHANNEL);
	}
    return multi_sample / samples;
}

void init_melty(void){
   11e40:	b510      	push	{r4, lr}
   11e42:	4809      	ldr	r0, [pc, #36]	; (11e68 <init_melty+0x28>)

	dev = device_get_binding("GPIO_0");
   11e44:	4c09      	ldr	r4, [pc, #36]	; (11e6c <init_melty+0x2c>)
   11e46:	f00d fffb 	bl	1fe40 <z_impl_device_get_binding>
   11e4a:	6020      	str	r0, [r4, #0]
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
   11e4c:	211d      	movs	r1, #29
   11e4e:	f7ff ff93 	bl	11d78 <z_impl_gpio_pin_configure.constprop.0.isra.0>
	gpio_pin_configure(dev, MELTY_LED_PIN, GPIO_OUTPUT); 
	gpio_pin_configure(dev, MOTOR_PIN, GPIO_OUTPUT); 
   11e52:	6820      	ldr	r0, [r4, #0]
   11e54:	211e      	movs	r1, #30
   11e56:	f7ff ff8f 	bl	11d78 <z_impl_gpio_pin_configure.constprop.0.isra.0>

	zero_g_accel = adc_multi_sample(INIT_ADC_READS);
   11e5a:	20c8      	movs	r0, #200	; 0xc8
   11e5c:	f012 f83a 	bl	23ed4 <adc_multi_sample>
   11e60:	4b03      	ldr	r3, [pc, #12]	; (11e70 <init_melty+0x30>)
   11e62:	6018      	str	r0, [r3, #0]
}
   11e64:	bd10      	pop	{r4, pc}
   11e66:	bf00      	nop
   11e68:	000289c7 	.word	0x000289c7
   11e6c:	20001dcc 	.word	0x20001dcc
   11e70:	20001dd4 	.word	0x20001dd4

00011e74 <motors_safe>:

void motors_safe(void) {
    //motor off!
	gpio_pin_set(dev, MOTOR_PIN, 0);
   11e74:	4b02      	ldr	r3, [pc, #8]	; (11e80 <motors_safe+0xc>)
   11e76:	2200      	movs	r2, #0
   11e78:	6818      	ldr	r0, [r3, #0]
   11e7a:	211e      	movs	r1, #30
   11e7c:	f7ff bfa6 	b.w	11dcc <gpio_pin_set.isra.0>
   11e80:	20001dcc 	.word	0x20001dcc

00011e84 <get_accel_force>:
}


float get_accel_force(void){
   11e84:	b510      	push	{r4, lr}

	float relative_adc_read = adc_multi_sample(ADC_READS) - zero_g_accel;
   11e86:	2001      	movs	r0, #1
   11e88:	f012 f824 	bl	23ed4 <adc_multi_sample>
   11e8c:	4b07      	ldr	r3, [pc, #28]	; (11eac <get_accel_force+0x28>)
   11e8e:	6819      	ldr	r1, [r3, #0]
   11e90:	f7ee fd48 	bl	924 <__aeabi_fsub>
	
	float g_force = relative_adc_read / G_PER_ADC;
   11e94:	4906      	ldr	r1, [pc, #24]	; (11eb0 <get_accel_force+0x2c>)
   11e96:	f7ee ff03 	bl	ca0 <__aeabi_fdiv>
	if (g_force < 0) g_force = 0;
   11e9a:	2100      	movs	r1, #0
	float g_force = relative_adc_read / G_PER_ADC;
   11e9c:	4604      	mov	r4, r0
	if (g_force < 0) g_force = 0;
   11e9e:	f7ee ffe9 	bl	e74 <__aeabi_fcmplt>
   11ea2:	b100      	cbz	r0, 11ea6 <get_accel_force+0x22>
   11ea4:	2400      	movs	r4, #0

	return g_force;
}
   11ea6:	4620      	mov	r0, r4
   11ea8:	bd10      	pop	{r4, pc}
   11eaa:	bf00      	nop
   11eac:	20001dd4 	.word	0x20001dd4
   11eb0:	bc03126f 	.word	0xbc03126f

00011eb4 <get_smoothed_accel_force>:

float get_smoothed_accel_force(void){
   11eb4:	b570      	push	{r4, r5, r6, lr}

    static float smoothed_accel = 0;


    if (smoothed_accel == 0) {
   11eb6:	4c0e      	ldr	r4, [pc, #56]	; (11ef0 <get_smoothed_accel_force+0x3c>)
   11eb8:	6825      	ldr	r5, [r4, #0]
   11eba:	2100      	movs	r1, #0
   11ebc:	4628      	mov	r0, r5
   11ebe:	f7ee ffcf 	bl	e60 <__aeabi_fcmpeq>
   11ec2:	b120      	cbz	r0, 11ece <get_smoothed_accel_force+0x1a>
        smoothed_accel = get_accel_force();
   11ec4:	f7ff ffde 	bl	11e84 <get_accel_force>
    } else {
        smoothed_accel = (smoothed_accel * ACCEL_SMOOTHING_FACTOR) + (get_accel_force() * (1.0f - ACCEL_SMOOTHING_FACTOR));
   11ec8:	6020      	str	r0, [r4, #0]
    }

	return smoothed_accel;
}
   11eca:	6820      	ldr	r0, [r4, #0]
   11ecc:	bd70      	pop	{r4, r5, r6, pc}
        smoothed_accel = (smoothed_accel * ACCEL_SMOOTHING_FACTOR) + (get_accel_force() * (1.0f - ACCEL_SMOOTHING_FACTOR));
   11ece:	f7ff ffd9 	bl	11e84 <get_accel_force>
   11ed2:	4908      	ldr	r1, [pc, #32]	; (11ef4 <get_smoothed_accel_force+0x40>)
   11ed4:	4606      	mov	r6, r0
   11ed6:	4628      	mov	r0, r5
   11ed8:	f7ee fe2e 	bl	b38 <__aeabi_fmul>
   11edc:	4906      	ldr	r1, [pc, #24]	; (11ef8 <get_smoothed_accel_force+0x44>)
   11ede:	4605      	mov	r5, r0
   11ee0:	4630      	mov	r0, r6
   11ee2:	f7ee fe29 	bl	b38 <__aeabi_fmul>
   11ee6:	4601      	mov	r1, r0
   11ee8:	4628      	mov	r0, r5
   11eea:	f7ee fd1d 	bl	928 <__addsf3>
   11eee:	e7eb      	b.n	11ec8 <get_smoothed_accel_force+0x14>
   11ef0:	20001dd0 	.word	0x20001dd0
   11ef4:	3f7ae148 	.word	0x3f7ae148
   11ef8:	3ca3d700 	.word	0x3ca3d700

00011efc <get_rotation_interval_ms>:

float get_rotation_interval_ms(void){
   11efc:	b510      	push	{r4, lr}

	//increasing causes tracking speed to decrease
	float radius_in_cm = get_radius();
   11efe:	f7ff feff 	bl	11d00 <get_radius>
   11f02:	4604      	mov	r4, r0

 	//calculate RPM from g's - derived from "G = 0.00001118 * r * RPM^2"
	float rpm;
	rpm = get_smoothed_accel_force() * 89445.0f;                               
   11f04:	f7ff ffd6 	bl	11eb4 <get_smoothed_accel_force>
   11f08:	4912      	ldr	r1, [pc, #72]	; (11f54 <get_rotation_interval_ms+0x58>)
   11f0a:	f7ee fe15 	bl	b38 <__aeabi_fmul>
	rpm = rpm / radius_in_cm;
   11f0e:	4621      	mov	r1, r4
   11f10:	f7ee fec6 	bl	ca0 <__aeabi_fdiv>
	rpm = sqrt(rpm);	
   11f14:	f7ee fa48 	bl	3a8 <__aeabi_f2d>
   11f18:	f011 fe82 	bl	23c20 <sqrt>
   11f1c:	f7ee fcae 	bl	87c <__aeabi_d2f>
   11f20:	4601      	mov	r1, r0

	float rotation_interval = (1.0f / rpm) * 60 * 1000;
   11f22:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
   11f26:	f7ee febb 	bl	ca0 <__aeabi_fdiv>
   11f2a:	490b      	ldr	r1, [pc, #44]	; (11f58 <get_rotation_interval_ms+0x5c>)
   11f2c:	f7ee fe04 	bl	b38 <__aeabi_fmul>
   11f30:	490a      	ldr	r1, [pc, #40]	; (11f5c <get_rotation_interval_ms+0x60>)
   11f32:	f7ee fe01 	bl	b38 <__aeabi_fmul>
	if (rotation_interval > 250) rotation_interval = 250;
   11f36:	490a      	ldr	r1, [pc, #40]	; (11f60 <get_rotation_interval_ms+0x64>)
	float rotation_interval = (1.0f / rpm) * 60 * 1000;
   11f38:	4604      	mov	r4, r0
	if (rotation_interval > 250) rotation_interval = 250;
   11f3a:	f7ee ffb9 	bl	eb0 <__aeabi_fcmpgt>
   11f3e:	b930      	cbnz	r0, 11f4e <get_rotation_interval_ms+0x52>
	if (rotation_interval < 0) rotation_interval = 250;
   11f40:	2100      	movs	r1, #0
   11f42:	4620      	mov	r0, r4
   11f44:	f7ee ff96 	bl	e74 <__aeabi_fcmplt>
   11f48:	b908      	cbnz	r0, 11f4e <get_rotation_interval_ms+0x52>
	return rotation_interval;
}
   11f4a:	4620      	mov	r0, r4
   11f4c:	bd10      	pop	{r4, pc}
	if (rotation_interval < 0) rotation_interval = 250;
   11f4e:	4c04      	ldr	r4, [pc, #16]	; (11f60 <get_rotation_interval_ms+0x64>)
	return rotation_interval;
   11f50:	e7fb      	b.n	11f4a <get_rotation_interval_ms+0x4e>
   11f52:	bf00      	nop
   11f54:	47aeb280 	.word	0x47aeb280
   11f58:	42700000 	.word	0x42700000
   11f5c:	447a0000 	.word	0x447a0000
   11f60:	437a0000 	.word	0x437a0000

00011f64 <get_melty_parameters>:


struct melty_parameters_t get_melty_parameters(void) {
   11f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11f68:	4605      	mov	r5, r0

	float led_offset_portion = get_led_offset() / 100.0f;
   11f6a:	f7ff fee1 	bl	11d30 <get_led_offset>
   11f6e:	f7ee fd8f 	bl	a90 <__aeabi_i2f>
   11f72:	4931      	ldr	r1, [pc, #196]	; (12038 <get_melty_parameters+0xd4>)
   11f74:	f7ee fe94 	bl	ca0 <__aeabi_fdiv>
   11f78:	4681      	mov	r9, r0
	float motor_on_portion = get_throttle() / 100.0f;	
   11f7a:	f7ff fed3 	bl	11d24 <get_throttle>
   11f7e:	f7ee fd87 	bl	a90 <__aeabi_i2f>
   11f82:	492d      	ldr	r1, [pc, #180]	; (12038 <get_melty_parameters+0xd4>)
   11f84:	f7ee fe8c 	bl	ca0 <__aeabi_fdiv>
	float led_on_portion = .4f * (1.1f - motor_on_portion);     //LED width changed with throttle
   11f88:	4601      	mov	r1, r0
	float motor_on_portion = get_throttle() / 100.0f;	
   11f8a:	4606      	mov	r6, r0
	float led_on_portion = .4f * (1.1f - motor_on_portion);     //LED width changed with throttle
   11f8c:	482b      	ldr	r0, [pc, #172]	; (1203c <get_melty_parameters+0xd8>)
   11f8e:	f7ee fcc9 	bl	924 <__aeabi_fsub>
   11f92:	492b      	ldr	r1, [pc, #172]	; (12040 <get_melty_parameters+0xdc>)
   11f94:	f7ee fdd0 	bl	b38 <__aeabi_fmul>
   11f98:	4682      	mov	sl, r0

	struct melty_parameters_t melty_parameters;
	melty_parameters.rotation_interval_us = get_rotation_interval_ms() * 1000;
   11f9a:	f7ff ffaf 	bl	11efc <get_rotation_interval_ms>
   11f9e:	4929      	ldr	r1, [pc, #164]	; (12044 <get_melty_parameters+0xe0>)
   11fa0:	f7ee fdca 	bl	b38 <__aeabi_fmul>
   11fa4:	f7ee ffb4 	bl	f10 <__aeabi_f2uiz>
   11fa8:	4604      	mov	r4, r0

	//if under defined RPM - just try to spin up
    if (melty_parameters.rotation_interval_us > MAX_TRANSLATION_ROTATION_INTERVAL_US) motor_on_portion = 1;
   11faa:	f7ee fd6d 	bl	a88 <__aeabi_ui2f>
   11fae:	4926      	ldr	r1, [pc, #152]	; (12048 <get_melty_parameters+0xe4>)
   11fb0:	4607      	mov	r7, r0
   11fb2:	f7ee ff7d 	bl	eb0 <__aeabi_fcmpgt>
   11fb6:	b108      	cbz	r0, 11fbc <get_melty_parameters+0x58>
   11fb8:	f04f 567e 	mov.w	r6, #1065353216	; 0x3f800000

    //if we are too slow - don't even try to track heading
	if (melty_parameters.rotation_interval_us > MAX_TRACKING_ROTATION_INTERVAL_US) {
   11fbc:	4923      	ldr	r1, [pc, #140]	; (1204c <get_melty_parameters+0xe8>)
   11fbe:	4638      	mov	r0, r7
   11fc0:	f7ee ff76 	bl	eb0 <__aeabi_fcmpgt>
        melty_parameters.rotation_interval_us = MAX_TRACKING_ROTATION_INTERVAL_US;
   11fc4:	4b22      	ldr	r3, [pc, #136]	; (12050 <get_melty_parameters+0xec>)
   11fc6:	2800      	cmp	r0, #0
   11fc8:	bf18      	it	ne
   11fca:	461c      	movne	r4, r3
    }

	u_int32_t motor_on_us = motor_on_portion * melty_parameters.rotation_interval_us;
   11fcc:	4620      	mov	r0, r4
   11fce:	f7ee fd5b 	bl	a88 <__aeabi_ui2f>
   11fd2:	4631      	mov	r1, r6
   11fd4:	4680      	mov	r8, r0
   11fd6:	f7ee fdaf 	bl	b38 <__aeabi_fmul>
   11fda:	f7ee ff99 	bl	f10 <__aeabi_f2uiz>
	
    u_int32_t led_on_us = led_on_portion * melty_parameters.rotation_interval_us;
   11fde:	4651      	mov	r1, sl
	u_int32_t motor_on_us = motor_on_portion * melty_parameters.rotation_interval_us;
   11fe0:	4607      	mov	r7, r0
    u_int32_t led_on_us = led_on_portion * melty_parameters.rotation_interval_us;
   11fe2:	4640      	mov	r0, r8
   11fe4:	f7ee fda8 	bl	b38 <__aeabi_fmul>
   11fe8:	f7ee ff92 	bl	f10 <__aeabi_f2uiz>
	u_int32_t led_offset_us = led_offset_portion * melty_parameters.rotation_interval_us;
   11fec:	4649      	mov	r1, r9
    u_int32_t led_on_us = led_on_portion * melty_parameters.rotation_interval_us;
   11fee:	4606      	mov	r6, r0
	u_int32_t led_offset_us = led_offset_portion * melty_parameters.rotation_interval_us;
   11ff0:	4640      	mov	r0, r8
   11ff2:	f7ee fda1 	bl	b38 <__aeabi_fmul>
   11ff6:	f7ee ff8b 	bl	f10 <__aeabi_f2uiz>

    //center LED on offset
	if (led_on_us / 2 <= led_offset_us) {
   11ffa:	ebb0 0f56 	cmp.w	r0, r6, lsr #1
        melty_parameters.led_start = led_offset_us - (led_on_us / 2);
    } else {
       melty_parameters.led_start =  (melty_parameters.rotation_interval_us + led_offset_us) - (led_on_us / 2); 
   11ffe:	bf38      	it	cc
   12000:	1823      	addcc	r3, r4, r0
	if (led_on_us / 2 <= led_offset_us) {
   12002:	ea4f 0256 	mov.w	r2, r6, lsr #1
        melty_parameters.led_start = led_offset_us - (led_on_us / 2);
   12006:	bf2c      	ite	cs
   12008:	1a80      	subcs	r0, r0, r2
       melty_parameters.led_start =  (melty_parameters.rotation_interval_us + led_offset_us) - (led_on_us / 2); 
   1200a:	1a98      	subcc	r0, r3, r2
    }

 	melty_parameters.led_stop = melty_parameters.led_start + led_on_us;
   1200c:	4406      	add	r6, r0
	
	if (melty_parameters.led_stop > melty_parameters.rotation_interval_us)
   1200e:	42a6      	cmp	r6, r4
		melty_parameters.led_stop = melty_parameters.led_stop - melty_parameters.rotation_interval_us;

	melty_parameters.motor_start1 = (melty_parameters.rotation_interval_us - motor_on_us) / 2;
   12010:	eba4 0207 	sub.w	r2, r4, r7
		melty_parameters.led_stop = melty_parameters.led_stop - melty_parameters.rotation_interval_us;
   12014:	bf88      	it	hi
   12016:	1b36      	subhi	r6, r6, r4
	melty_parameters.motor_start1 = (melty_parameters.rotation_interval_us - motor_on_us) / 2;
   12018:	0852      	lsrs	r2, r2, #1
	melty_parameters.motor_stop1 = melty_parameters.motor_start1 + motor_on_us;

	melty_parameters.motor_start2 = melty_parameters.rotation_interval_us - (motor_on_us / 2);
	melty_parameters.motor_stop2 = motor_on_us / 2;

	return melty_parameters;
   1201a:	e9c5 4000 	strd	r4, r0, [r5]
   1201e:	e9c5 6202 	strd	r6, r2, [r5, #8]
	melty_parameters.motor_start2 = melty_parameters.rotation_interval_us - (motor_on_us / 2);
   12022:	0879      	lsrs	r1, r7, #1
	melty_parameters.motor_stop1 = melty_parameters.motor_start1 + motor_on_us;
   12024:	443a      	add	r2, r7
	melty_parameters.motor_start2 = melty_parameters.rotation_interval_us - (motor_on_us / 2);
   12026:	eba4 0457 	sub.w	r4, r4, r7, lsr #1
	return melty_parameters;
   1202a:	e9c5 4105 	strd	r4, r1, [r5, #20]
   1202e:	612a      	str	r2, [r5, #16]

}
   12030:	4628      	mov	r0, r5
   12032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12036:	bf00      	nop
   12038:	42c80000 	.word	0x42c80000
   1203c:	3f8ccccd 	.word	0x3f8ccccd
   12040:	3ecccccd 	.word	0x3ecccccd
   12044:	447a0000 	.word	0x447a0000
   12048:	47c35000 	.word	0x47c35000
   1204c:	48435000 	.word	0x48435000
   12050:	00030d40 	.word	0x00030d40

00012054 <do_melty>:


void do_melty(void){
   12054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12058:	b089      	sub	sp, #36	; 0x24
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   1205a:	f015 f8da 	bl	27212 <sys_clock_cycle_get_32>
   1205e:	4681      	mov	r9, r0

	/* capture initial time stamp */
	u_int32_t start_time;
	start_time = k_cycle_get_32();

	struct melty_parameters_t melty_parameters = get_melty_parameters();
   12060:	a801      	add	r0, sp, #4
   12062:	f7ff ff7f 	bl	11f64 <get_melty_parameters>

	melty_stats[0] = melty_parameters.rotation_interval_us / 1000;
   12066:	483c      	ldr	r0, [pc, #240]	; (12158 <do_melty+0x104>)
	bt_send_melty_stats(melty_stats);
	cycle_count++;
   12068:	4d3c      	ldr	r5, [pc, #240]	; (1215c <do_melty+0x108>)
	struct melty_parameters_t melty_parameters = get_melty_parameters();
   1206a:	f8dd 8004 	ldr.w	r8, [sp, #4]
	melty_stats[0] = melty_parameters.rotation_interval_us / 1000;
   1206e:	4e3c      	ldr	r6, [pc, #240]	; (12160 <do_melty+0x10c>)
		} else {
			/* Slower algorithm but input is first divided before being multiplied
			 * which prevents overflow of intermediate value.
			 */
			return (t / from_hz) * to_hz + ((t % from_hz) * to_hz + off) / from_hz;
   12070:	4f3c      	ldr	r7, [pc, #240]	; (12164 <do_melty+0x110>)
   12072:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   12076:	fbb8 f3f3 	udiv	r3, r8, r3
   1207a:	7003      	strb	r3, [r0, #0]
	bt_send_melty_stats(melty_stats);
   1207c:	f7ff fe5e 	bl	11d3c <bt_send_melty_stats>
	cycle_count++;
   12080:	682b      	ldr	r3, [r5, #0]
   12082:	3301      	adds	r3, #1
   12084:	602b      	str	r3, [r5, #0]
	u_int32_t time_spent_this_rotation_us = 0;
   12086:	2400      	movs	r4, #0

	while(time_spent_this_rotation_us < melty_parameters.rotation_interval_us) {
   12088:	4544      	cmp	r4, r8
   1208a:	d302      	bcc.n	12092 <do_melty+0x3e>
		if (cycles_spent < 0) cycles_spent = cycles_spent + UINT32_MAX;
		time_spent_this_rotation_us += SYS_CLOCK_HW_CYCLES_TO_NS_AVG(cycles_spent, 1) / 1000;
		start_time = k_cycle_get_32();
	}

}
   1208c:	b009      	add	sp, #36	; 0x24
   1208e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        melty_parameters = get_melty_parameters();
   12092:	a801      	add	r0, sp, #4
   12094:	f7ff ff66 	bl	11f64 <get_melty_parameters>
		k_sleep(K_USEC(sleep_time_us));
   12098:	2001      	movs	r0, #1
   1209a:	2100      	movs	r1, #0
        melty_parameters = get_melty_parameters();
   1209c:	e9dd 8b01 	ldrd	r8, fp, [sp, #4]
   120a0:	f8dd a00c 	ldr.w	sl, [sp, #12]
		k_sleep(K_USEC(sleep_time_us));
   120a4:	f011 ff14 	bl	23ed0 <k_sleep.isra.0>
		if (get_translate_direction() == TRANSLATE_FORWARD || (get_translate_direction() == TRANSLATE_IDLE && cycle_count % 2 == 0)) {
   120a8:	f7ff fe36 	bl	11d18 <get_translate_direction>
   120ac:	2801      	cmp	r0, #1
   120ae:	d105      	bne.n	120bc <do_melty+0x68>
			if (time_spent_this_rotation_us >= melty_parameters.motor_start1 && 
   120b0:	9b04      	ldr	r3, [sp, #16]
					gpio_pin_set(dev, MOTOR_PIN, 1);
   120b2:	6830      	ldr	r0, [r6, #0]
			if (time_spent_this_rotation_us >= melty_parameters.motor_start1 && 
   120b4:	42a3      	cmp	r3, r4
   120b6:	d914      	bls.n	120e2 <do_melty+0x8e>
					gpio_pin_set(dev, MOTOR_PIN, 0);
   120b8:	2200      	movs	r2, #0
   120ba:	e016      	b.n	120ea <do_melty+0x96>
		if (get_translate_direction() == TRANSLATE_FORWARD || (get_translate_direction() == TRANSLATE_IDLE && cycle_count % 2 == 0)) {
   120bc:	f7ff fe2c 	bl	11d18 <get_translate_direction>
   120c0:	b910      	cbnz	r0, 120c8 <do_melty+0x74>
   120c2:	682b      	ldr	r3, [r5, #0]
   120c4:	07da      	lsls	r2, r3, #31
   120c6:	d5f3      	bpl.n	120b0 <do_melty+0x5c>
		if (get_translate_direction() == TRANSLATE_REVERSE || (get_translate_direction() == TRANSLATE_IDLE && cycle_count %2 == 1)) {
   120c8:	f7ff fe26 	bl	11d18 <get_translate_direction>
   120cc:	2802      	cmp	r0, #2
   120ce:	d110      	bne.n	120f2 <do_melty+0x9e>
			if (time_spent_this_rotation_us >= melty_parameters.motor_start2 || 
   120d0:	9b06      	ldr	r3, [sp, #24]
   120d2:	42a3      	cmp	r3, r4
   120d4:	d836      	bhi.n	12144 <do_melty+0xf0>
					gpio_pin_set(dev, MOTOR_PIN, 1);
   120d6:	2201      	movs	r2, #1
					gpio_pin_set(dev, MOTOR_PIN, 0);
   120d8:	6830      	ldr	r0, [r6, #0]
   120da:	211e      	movs	r1, #30
   120dc:	f7ff fe76 	bl	11dcc <gpio_pin_set.isra.0>
   120e0:	e00d      	b.n	120fe <do_melty+0xaa>
			if (time_spent_this_rotation_us >= melty_parameters.motor_start1 && 
   120e2:	9b05      	ldr	r3, [sp, #20]
   120e4:	42a3      	cmp	r3, r4
   120e6:	d3e7      	bcc.n	120b8 <do_melty+0x64>
					gpio_pin_set(dev, MOTOR_PIN, 1);
   120e8:	2201      	movs	r2, #1
					gpio_pin_set(dev, MOTOR_PIN, 0);
   120ea:	211e      	movs	r1, #30
   120ec:	f7ff fe6e 	bl	11dcc <gpio_pin_set.isra.0>
   120f0:	e7ea      	b.n	120c8 <do_melty+0x74>
		if (get_translate_direction() == TRANSLATE_REVERSE || (get_translate_direction() == TRANSLATE_IDLE && cycle_count %2 == 1)) {
   120f2:	f7ff fe11 	bl	11d18 <get_translate_direction>
   120f6:	b910      	cbnz	r0, 120fe <do_melty+0xaa>
   120f8:	682b      	ldr	r3, [r5, #0]
   120fa:	07db      	lsls	r3, r3, #31
   120fc:	d4e8      	bmi.n	120d0 <do_melty+0x7c>
		if (melty_parameters.led_start > melty_parameters.led_stop) {
   120fe:	45d3      	cmp	fp, sl
				gpio_pin_set(dev, MELTY_LED_PIN, 0);
   12100:	6830      	ldr	r0, [r6, #0]
		if (melty_parameters.led_start > melty_parameters.led_stop) {
   12102:	d924      	bls.n	1214e <do_melty+0xfa>
    		if (time_spent_this_rotation_us >= melty_parameters.led_start || time_spent_this_rotation_us <= melty_parameters.led_stop) {
   12104:	455c      	cmp	r4, fp
   12106:	d201      	bcs.n	1210c <do_melty+0xb8>
			if (time_spent_this_rotation_us >= melty_parameters.led_start && time_spent_this_rotation_us <= melty_parameters.led_stop) {
   12108:	4554      	cmp	r4, sl
   1210a:	d822      	bhi.n	12152 <do_melty+0xfe>
				gpio_pin_set(dev, MELTY_LED_PIN, 1);
   1210c:	2201      	movs	r2, #1
				gpio_pin_set(dev, MELTY_LED_PIN, 0);
   1210e:	211d      	movs	r1, #29
   12110:	f7ff fe5c 	bl	11dcc <gpio_pin_set.isra.0>
   12114:	f015 f87d 	bl	27212 <sys_clock_cycle_get_32>
		cycles_spent = stop_time - start_time;
   12118:	eba0 0009 	sub.w	r0, r0, r9
   1211c:	f3c0 030e 	ubfx	r3, r0, #0, #15
   12120:	fba3 3207 	umull	r3, r2, r3, r7
   12124:	0bdb      	lsrs	r3, r3, #15
   12126:	0bc0      	lsrs	r0, r0, #15
   12128:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
   1212c:	fba0 0207 	umull	r0, r2, r0, r7
   12130:	181b      	adds	r3, r3, r0
		time_spent_this_rotation_us += SYS_CLOCK_HW_CYCLES_TO_NS_AVG(cycles_spent, 1) / 1000;
   12132:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   12136:	fbb3 f3f2 	udiv	r3, r3, r2
   1213a:	441c      	add	r4, r3
   1213c:	f015 f869 	bl	27212 <sys_clock_cycle_get_32>
   12140:	4681      	mov	r9, r0
   12142:	e7a1      	b.n	12088 <do_melty+0x34>
			if (time_spent_this_rotation_us >= melty_parameters.motor_start2 || 
   12144:	9b07      	ldr	r3, [sp, #28]
   12146:	42a3      	cmp	r3, r4
   12148:	d2c5      	bcs.n	120d6 <do_melty+0x82>
					gpio_pin_set(dev, MOTOR_PIN, 0);
   1214a:	2200      	movs	r2, #0
   1214c:	e7c4      	b.n	120d8 <do_melty+0x84>
			if (time_spent_this_rotation_us >= melty_parameters.led_start && time_spent_this_rotation_us <= melty_parameters.led_stop) {
   1214e:	455c      	cmp	r4, fp
   12150:	d2da      	bcs.n	12108 <do_melty+0xb4>
				gpio_pin_set(dev, MELTY_LED_PIN, 0);
   12152:	2200      	movs	r2, #0
   12154:	e7db      	b.n	1210e <do_melty+0xba>
   12156:	bf00      	nop
   12158:	20002311 	.word	0x20002311
   1215c:	20001dc8 	.word	0x20001dc8
   12160:	20001dcc 	.word	0x20001dcc
   12164:	3b9aca00 	.word	0x3b9aca00

00012168 <status_led_flash>:

void status_led_flash(int connected) {
   12168:	b570      	push	{r4, r5, r6, lr}

	gpio_pin_set(dev, MELTY_LED_PIN, 0);
   1216a:	4e1d      	ldr	r6, [pc, #116]	; (121e0 <status_led_flash+0x78>)
void status_led_flash(int connected) {
   1216c:	4604      	mov	r4, r0
	gpio_pin_set(dev, MELTY_LED_PIN, 0);
   1216e:	2200      	movs	r2, #0
   12170:	6830      	ldr	r0, [r6, #0]
   12172:	211d      	movs	r1, #29
   12174:	f7ff fe2a 	bl	11dcc <gpio_pin_set.isra.0>
	
    //do accel dependent flash if not connected (provides easy way to verify accelerometer is working)
	//fast flash if connected
    if (connected == 0) {
   12178:	bb1c      	cbnz	r4, 121c2 <status_led_flash+0x5a>
        k_sleep(K_MSEC(200));
   1217a:	2100      	movs	r1, #0
   1217c:	f641 109a 	movw	r0, #6554	; 0x199a
   12180:	f011 fea6 	bl	23ed0 <k_sleep.isra.0>
        int on_time = 1 + (int)(get_accel_force() * 50.0f);
   12184:	f7ff fe7e 	bl	11e84 <get_accel_force>
   12188:	4916      	ldr	r1, [pc, #88]	; (121e4 <status_led_flash+0x7c>)
   1218a:	f7ee fcd5 	bl	b38 <__aeabi_fmul>
   1218e:	f7ee fe99 	bl	ec4 <__aeabi_f2iz>
   12192:	1c45      	adds	r5, r0, #1

        if (on_time > 0) {
   12194:	2d00      	cmp	r5, #0
   12196:	dd22      	ble.n	121de <status_led_flash+0x76>
            gpio_pin_set(dev, MELTY_LED_PIN, 1);
   12198:	6830      	ldr	r0, [r6, #0]
   1219a:	2201      	movs	r2, #1
   1219c:	211d      	movs	r1, #29
   1219e:	f7ff fe15 	bl	11dcc <gpio_pin_set.isra.0>
			return ((t * to_hz + off) / from_hz);
   121a2:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   121a6:	f240 30e7 	movw	r0, #999	; 0x3e7
   121aa:	4621      	mov	r1, r4
   121ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   121b0:	2300      	movs	r3, #0
   121b2:	fbc5 0106 	smlal	r0, r1, r5, r6
   121b6:	f7ee fecb 	bl	f50 <__aeabi_uldivmod>
        k_sleep(K_MSEC(50));
        gpio_pin_set(dev, MELTY_LED_PIN, 1);
        k_sleep(K_MSEC(50));
    }

}
   121ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        k_sleep(K_MSEC(50));
   121be:	f011 be87 	b.w	23ed0 <k_sleep.isra.0>
        k_sleep(K_MSEC(50));
   121c2:	f240 6067 	movw	r0, #1639	; 0x667
   121c6:	2100      	movs	r1, #0
   121c8:	f011 fe82 	bl	23ed0 <k_sleep.isra.0>
        gpio_pin_set(dev, MELTY_LED_PIN, 1);
   121cc:	6830      	ldr	r0, [r6, #0]
   121ce:	211d      	movs	r1, #29
   121d0:	2201      	movs	r2, #1
   121d2:	f7ff fdfb 	bl	11dcc <gpio_pin_set.isra.0>
        k_sleep(K_MSEC(50));
   121d6:	f240 6067 	movw	r0, #1639	; 0x667
   121da:	2100      	movs	r1, #0
   121dc:	e7ed      	b.n	121ba <status_led_flash+0x52>
}
   121de:	bd70      	pop	{r4, r5, r6, pc}
   121e0:	20001dcc 	.word	0x20001dcc
   121e4:	42480000 	.word	0x42480000

000121e8 <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
   121e8:	b530      	push	{r4, r5, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   121ea:	4c0a      	ldr	r4, [pc, #40]	; (12214 <crc8_ccitt+0x2c>)
   121ec:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
   121ee:	4291      	cmp	r1, r2
   121f0:	d100      	bne.n	121f4 <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
   121f2:	bd30      	pop	{r4, r5, pc}
		val ^= p[i];
   121f4:	f811 3b01 	ldrb.w	r3, [r1], #1
   121f8:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   121fa:	0903      	lsrs	r3, r0, #4
   121fc:	5ce3      	ldrb	r3, [r4, r3]
   121fe:	ea83 1300 	eor.w	r3, r3, r0, lsl #4
   12202:	b2dd      	uxtb	r5, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   12204:	f3c3 1303 	ubfx	r3, r3, #4, #4
   12208:	5ce0      	ldrb	r0, [r4, r3]
   1220a:	ea80 1005 	eor.w	r0, r0, r5, lsl #4
   1220e:	b2c0      	uxtb	r0, r0
	for (i = 0; i < cnt; i++) {
   12210:	e7ed      	b.n	121ee <crc8_ccitt+0x6>
   12212:	bf00      	nop
   12214:	000289ce 	.word	0x000289ce

00012218 <sys_notify_finalize>:
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   12218:	6843      	ldr	r3, [r0, #4]

	return method & SYS_NOTIFY_METHOD_MASK;
   1221a:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   1221e:	2b02      	cmp	r3, #2
{
   12220:	b570      	push	{r4, r5, r6, lr}
   12222:	4604      	mov	r4, r0
   12224:	460e      	mov	r6, r1
	notify->result = res;
   12226:	6081      	str	r1, [r0, #8]
	switch (method) {
   12228:	d010      	beq.n	1224c <sys_notify_finalize+0x34>
   1222a:	2b03      	cmp	r3, #3
   1222c:	d004      	beq.n	12238 <sys_notify_finalize+0x20>
   1222e:	2b01      	cmp	r3, #1
   12230:	d10f      	bne.n	12252 <sys_notify_finalize+0x3a>
   12232:	2500      	movs	r5, #0
   12234:	4628      	mov	r0, r5
   12236:	e001      	b.n	1223c <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   12238:	6805      	ldr	r5, [r0, #0]
	struct k_poll_signal *sig = NULL;
   1223a:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1223c:	2300      	movs	r3, #0
   1223e:	6063      	str	r3, [r4, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   12240:	b110      	cbz	r0, 12248 <sys_notify_finalize+0x30>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   12242:	4631      	mov	r1, r6
   12244:	f011 f900 	bl	23448 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   12248:	4628      	mov	r0, r5
   1224a:	bd70      	pop	{r4, r5, r6, pc}
		sig = notify->method.signal;
   1224c:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   1224e:	2500      	movs	r5, #0
		break;
   12250:	e7f4      	b.n	1223c <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
   12252:	4905      	ldr	r1, [pc, #20]	; (12268 <sys_notify_finalize+0x50>)
   12254:	4805      	ldr	r0, [pc, #20]	; (1226c <sys_notify_finalize+0x54>)
   12256:	2245      	movs	r2, #69	; 0x45
   12258:	f012 f899 	bl	2438e <assert_print>
   1225c:	4802      	ldr	r0, [pc, #8]	; (12268 <sys_notify_finalize+0x50>)
   1225e:	2145      	movs	r1, #69	; 0x45
   12260:	f012 f88e 	bl	24380 <assert_post_action>
	sys_notify_generic_callback rv = NULL;
   12264:	2500      	movs	r5, #0
   12266:	e7e8      	b.n	1223a <sys_notify_finalize+0x22>
   12268:	000289de 	.word	0x000289de
   1226c:	000289af 	.word	0x000289af

00012270 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   12270:	680b      	ldr	r3, [r1, #0]
   12272:	3301      	adds	r3, #1
   12274:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   12276:	4b01      	ldr	r3, [pc, #4]	; (1227c <char_out+0xc>)
   12278:	681b      	ldr	r3, [r3, #0]
   1227a:	4718      	bx	r3
   1227c:	20000538 	.word	0x20000538

00012280 <__printk_hook_install>:
	_char_out = fn;
   12280:	4b01      	ldr	r3, [pc, #4]	; (12288 <__printk_hook_install+0x8>)
   12282:	6018      	str	r0, [r3, #0]
}
   12284:	4770      	bx	lr
   12286:	bf00      	nop
   12288:	20000538 	.word	0x20000538

0001228c <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
   1228c:	b507      	push	{r0, r1, r2, lr}
   1228e:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
   12290:	2100      	movs	r1, #0
{
   12292:	4602      	mov	r2, r0
		struct out_context ctx = { 0 };
   12294:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
   12296:	4803      	ldr	r0, [pc, #12]	; (122a4 <vprintk+0x18>)
   12298:	a901      	add	r1, sp, #4
   1229a:	f000 fc0b 	bl	12ab4 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
   1229e:	b003      	add	sp, #12
   122a0:	f85d fb04 	ldr.w	pc, [sp], #4
   122a4:	00012271 	.word	0x00012271

000122a8 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   122a8:	b530      	push	{r4, r5, lr}
   122aa:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
   122ac:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
   122b0:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
   122b2:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
   122b4:	a901      	add	r1, sp, #4
   122b6:	4805      	ldr	r0, [pc, #20]	; (122cc <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
   122b8:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
   122ba:	f000 fbfb 	bl	12ab4 <cbvprintf>

	if (ctx.count < ctx.max) {
   122be:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
   122c2:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   122c4:	bfb8      	it	lt
   122c6:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   122c8:	b005      	add	sp, #20
   122ca:	bd30      	pop	{r4, r5, pc}
   122cc:	00024013 	.word	0x00024013

000122d0 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   122d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   122d4:	f8b0 a01c 	ldrh.w	sl, [r0, #28]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   122d8:	f01a 0f08 	tst.w	sl, #8
{
   122dc:	4604      	mov	r4, r0
   122de:	4693      	mov	fp, r2
	if (processing) {
   122e0:	d01c      	beq.n	1231c <process_event+0x4c>
		if (evt == EVT_COMPLETE) {
   122e2:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   122e4:	bf0c      	ite	eq
   122e6:	f04a 0a10 	orreq.w	sl, sl, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   122ea:	f04a 0a20 	orrne.w	sl, sl, #32
   122ee:	f8a0 a01c 	strh.w	sl, [r0, #28]
   122f2:	f104 0014 	add.w	r0, r4, #20
   122f6:	f00e f9ed 	bl	206d4 <z_spin_unlock_valid>
   122fa:	b940      	cbnz	r0, 1230e <process_event+0x3e>
   122fc:	4992      	ldr	r1, [pc, #584]	; (12548 <process_event+0x278>)
   122fe:	4893      	ldr	r0, [pc, #588]	; (1254c <process_event+0x27c>)
   12300:	22b9      	movs	r2, #185	; 0xb9
   12302:	f012 f844 	bl	2438e <assert_print>
   12306:	4890      	ldr	r0, [pc, #576]	; (12548 <process_event+0x278>)
   12308:	21b9      	movs	r1, #185	; 0xb9
   1230a:	f012 f839 	bl	24380 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   1230e:	f38b 8811 	msr	BASEPRI, fp
   12312:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   12316:	b003      	add	sp, #12
   12318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
   1231c:	4f8c      	ldr	r7, [pc, #560]	; (12550 <process_event+0x280>)
   1231e:	f8df 822c 	ldr.w	r8, [pc, #556]	; 1254c <process_event+0x27c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12322:	f00a 0a07 	and.w	sl, sl, #7
		if (evt == EVT_RECHECK) {
   12326:	2902      	cmp	r1, #2
   12328:	d106      	bne.n	12338 <process_event+0x68>
			evt = process_recheck(mgr);
   1232a:	4620      	mov	r0, r4
   1232c:	f011 fe9e 	bl	2406c <process_recheck>
		if (evt == EVT_NOP) {
   12330:	2800      	cmp	r0, #0
   12332:	d0de      	beq.n	122f2 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
   12334:	2801      	cmp	r0, #1
   12336:	d163      	bne.n	12400 <process_event+0x130>
			res = mgr->last_res;
   12338:	f8d4 9018 	ldr.w	r9, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1233c:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
   1233e:	f1b9 0f00 	cmp.w	r9, #0
   12342:	da19      	bge.n	12378 <process_event+0xa8>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   12344:	2600      	movs	r6, #0
		*clients = mgr->clients;
   12346:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12348:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
   1234c:	e9c4 6600 	strd	r6, r6, [r4]
   12350:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   12354:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   12356:	8ba3      	ldrh	r3, [r4, #28]
   12358:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   1235c:	4552      	cmp	r2, sl
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   1235e:	9200      	str	r2, [sp, #0]
				   && !sys_slist_is_empty(&mgr->monitors);
   12360:	d003      	beq.n	1236a <process_event+0x9a>
		if (do_monitors
   12362:	68a2      	ldr	r2, [r4, #8]
   12364:	2a00      	cmp	r2, #0
   12366:	f040 80f5 	bne.w	12554 <process_event+0x284>
		    || !sys_slist_is_empty(&clients)
   1236a:	b915      	cbnz	r5, 12372 <process_event+0xa2>
		    || (transit != NULL)) {
   1236c:	2e00      	cmp	r6, #0
   1236e:	f000 812f 	beq.w	125d0 <process_event+0x300>
   12372:	f04f 0a00 	mov.w	sl, #0
   12376:	e0ef      	b.n	12558 <process_event+0x288>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12378:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   1237c:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   1237e:	2901      	cmp	r1, #1
   12380:	d820      	bhi.n	123c4 <process_event+0xf4>
	list->head = NULL;
   12382:	2100      	movs	r1, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12384:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
   12388:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
   1238a:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1238c:	b29b      	uxth	r3, r3
	list->tail = NULL;
   1238e:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   12392:	d10a      	bne.n	123aa <process_event+0xda>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   12394:	b13d      	cbz	r5, 123a6 <process_event+0xd6>
   12396:	8be2      	ldrh	r2, [r4, #30]
   12398:	4629      	mov	r1, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
   1239a:	6809      	ldr	r1, [r1, #0]
				mgr->refs += 1U;
   1239c:	3201      	adds	r2, #1
   1239e:	b292      	uxth	r2, r2
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   123a0:	2900      	cmp	r1, #0
   123a2:	d1fa      	bne.n	1239a <process_event+0xca>
   123a4:	83e2      	strh	r2, [r4, #30]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   123a6:	f043 0302 	orr.w	r3, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   123aa:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   123ac:	4620      	mov	r0, r4
   123ae:	f011 fe5d 	bl	2406c <process_recheck>
   123b2:	4606      	mov	r6, r0
   123b4:	2800      	cmp	r0, #0
   123b6:	d0ce      	beq.n	12356 <process_event+0x86>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   123b8:	8ba3      	ldrh	r3, [r4, #28]
   123ba:	f043 0320 	orr.w	r3, r3, #32
   123be:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
   123c0:	2600      	movs	r6, #0
   123c2:	e7c8      	b.n	12356 <process_event+0x86>
	} else if (state == ONOFF_STATE_TO_OFF) {
   123c4:	2a04      	cmp	r2, #4
   123c6:	d10d      	bne.n	123e4 <process_event+0x114>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   123c8:	f023 0307 	bic.w	r3, r3, #7
   123cc:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   123ce:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   123d0:	4620      	mov	r0, r4
   123d2:	f011 fe4b 	bl	2406c <process_recheck>
   123d6:	4605      	mov	r5, r0
   123d8:	b180      	cbz	r0, 123fc <process_event+0x12c>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   123da:	f042 0220 	orr.w	r2, r2, #32
   123de:	83a2      	strh	r2, [r4, #28]
   123e0:	2500      	movs	r5, #0
   123e2:	e7ed      	b.n	123c0 <process_event+0xf0>
		__ASSERT_NO_MSG(false);
   123e4:	f240 121b 	movw	r2, #283	; 0x11b
   123e8:	4639      	mov	r1, r7
   123ea:	4640      	mov	r0, r8
   123ec:	f011 ffcf 	bl	2438e <assert_print>
   123f0:	f240 111b 	movw	r1, #283	; 0x11b
   123f4:	4638      	mov	r0, r7
   123f6:	f011 ffc3 	bl	24380 <assert_post_action>
   123fa:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   123fc:	462e      	mov	r6, r5
   123fe:	e7aa      	b.n	12356 <process_event+0x86>
		} else if (evt == EVT_START) {
   12400:	2803      	cmp	r0, #3
   12402:	d131      	bne.n	12468 <process_event+0x198>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
   12404:	f1ba 0f00 	cmp.w	sl, #0
   12408:	d00a      	beq.n	12420 <process_event+0x150>
   1240a:	4639      	mov	r1, r7
   1240c:	4640      	mov	r0, r8
   1240e:	f44f 72ab 	mov.w	r2, #342	; 0x156
   12412:	f011 ffbc 	bl	2438e <assert_print>
   12416:	f44f 71ab 	mov.w	r1, #342	; 0x156
   1241a:	4638      	mov	r0, r7
   1241c:	f011 ffb0 	bl	24380 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   12420:	6823      	ldr	r3, [r4, #0]
   12422:	b953      	cbnz	r3, 1243a <process_event+0x16a>
   12424:	4639      	mov	r1, r7
   12426:	4640      	mov	r0, r8
   12428:	f240 1257 	movw	r2, #343	; 0x157
   1242c:	f011 ffaf 	bl	2438e <assert_print>
   12430:	f240 1157 	movw	r1, #343	; 0x157
   12434:	4638      	mov	r0, r7
   12436:	f011 ffa3 	bl	24380 <assert_post_action>
			transit = mgr->transitions->start;
   1243a:	6923      	ldr	r3, [r4, #16]
   1243c:	681e      	ldr	r6, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
   1243e:	b956      	cbnz	r6, 12456 <process_event+0x186>
   12440:	4639      	mov	r1, r7
   12442:	4640      	mov	r0, r8
   12444:	f44f 72ad 	mov.w	r2, #346	; 0x15a
   12448:	f011 ffa1 	bl	2438e <assert_print>
   1244c:	f44f 71ad 	mov.w	r1, #346	; 0x15a
   12450:	4638      	mov	r0, r7
   12452:	f011 ff95 	bl	24380 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12456:	8ba3      	ldrh	r3, [r4, #28]
   12458:	f023 0307 	bic.w	r3, r3, #7
   1245c:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
   12460:	83a3      	strh	r3, [r4, #28]
}
   12462:	2500      	movs	r5, #0
		res = 0;
   12464:	46a9      	mov	r9, r5
}
   12466:	e776      	b.n	12356 <process_event+0x86>
		} else if (evt == EVT_STOP) {
   12468:	2804      	cmp	r0, #4
   1246a:	d12e      	bne.n	124ca <process_event+0x1fa>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
   1246c:	f1ba 0f02 	cmp.w	sl, #2
   12470:	d00a      	beq.n	12488 <process_event+0x1b8>
   12472:	4639      	mov	r1, r7
   12474:	4640      	mov	r0, r8
   12476:	f240 125d 	movw	r2, #349	; 0x15d
   1247a:	f011 ff88 	bl	2438e <assert_print>
   1247e:	f240 115d 	movw	r1, #349	; 0x15d
   12482:	4638      	mov	r0, r7
   12484:	f011 ff7c 	bl	24380 <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
   12488:	8be3      	ldrh	r3, [r4, #30]
   1248a:	b153      	cbz	r3, 124a2 <process_event+0x1d2>
   1248c:	4639      	mov	r1, r7
   1248e:	4640      	mov	r0, r8
   12490:	f44f 72af 	mov.w	r2, #350	; 0x15e
   12494:	f011 ff7b 	bl	2438e <assert_print>
   12498:	f44f 71af 	mov.w	r1, #350	; 0x15e
   1249c:	4638      	mov	r0, r7
   1249e:	f011 ff6f 	bl	24380 <assert_post_action>
			transit = mgr->transitions->stop;
   124a2:	6923      	ldr	r3, [r4, #16]
   124a4:	685e      	ldr	r6, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
   124a6:	b956      	cbnz	r6, 124be <process_event+0x1ee>
   124a8:	4639      	mov	r1, r7
   124aa:	4640      	mov	r0, r8
   124ac:	f240 1261 	movw	r2, #353	; 0x161
   124b0:	f011 ff6d 	bl	2438e <assert_print>
   124b4:	f240 1161 	movw	r1, #353	; 0x161
   124b8:	4638      	mov	r0, r7
   124ba:	f011 ff61 	bl	24380 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   124be:	8ba3      	ldrh	r3, [r4, #28]
   124c0:	f023 0307 	bic.w	r3, r3, #7
   124c4:	f043 0304 	orr.w	r3, r3, #4
   124c8:	e7ca      	b.n	12460 <process_event+0x190>
		} else if (evt == EVT_RESET) {
   124ca:	2805      	cmp	r0, #5
   124cc:	d12e      	bne.n	1252c <process_event+0x25c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   124ce:	f1ba 0f01 	cmp.w	sl, #1
   124d2:	d00a      	beq.n	124ea <process_event+0x21a>
   124d4:	4639      	mov	r1, r7
   124d6:	4640      	mov	r0, r8
   124d8:	f44f 72b2 	mov.w	r2, #356	; 0x164
   124dc:	f011 ff57 	bl	2438e <assert_print>
   124e0:	f44f 71b2 	mov.w	r1, #356	; 0x164
   124e4:	4638      	mov	r0, r7
   124e6:	f011 ff4b 	bl	24380 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   124ea:	6823      	ldr	r3, [r4, #0]
   124ec:	b953      	cbnz	r3, 12504 <process_event+0x234>
   124ee:	4639      	mov	r1, r7
   124f0:	4640      	mov	r0, r8
   124f2:	f240 1265 	movw	r2, #357	; 0x165
   124f6:	f011 ff4a 	bl	2438e <assert_print>
   124fa:	f240 1165 	movw	r1, #357	; 0x165
   124fe:	4638      	mov	r0, r7
   12500:	f011 ff3e 	bl	24380 <assert_post_action>
			transit = mgr->transitions->reset;
   12504:	6923      	ldr	r3, [r4, #16]
   12506:	689e      	ldr	r6, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
   12508:	b956      	cbnz	r6, 12520 <process_event+0x250>
   1250a:	4639      	mov	r1, r7
   1250c:	4640      	mov	r0, r8
   1250e:	f44f 72b4 	mov.w	r2, #360	; 0x168
   12512:	f011 ff3c 	bl	2438e <assert_print>
   12516:	f44f 71b4 	mov.w	r1, #360	; 0x168
   1251a:	4638      	mov	r0, r7
   1251c:	f011 ff30 	bl	24380 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12520:	8ba3      	ldrh	r3, [r4, #28]
   12522:	f023 0307 	bic.w	r3, r3, #7
   12526:	f043 0305 	orr.w	r3, r3, #5
   1252a:	e799      	b.n	12460 <process_event+0x190>
			__ASSERT_NO_MSG(false);
   1252c:	f240 126b 	movw	r2, #363	; 0x16b
   12530:	4639      	mov	r1, r7
   12532:	4640      	mov	r0, r8
   12534:	f011 ff2b 	bl	2438e <assert_print>
   12538:	2500      	movs	r5, #0
   1253a:	f240 116b 	movw	r1, #363	; 0x16b
   1253e:	4638      	mov	r0, r7
   12540:	f011 ff1e 	bl	24380 <assert_post_action>
		onoff_transition_fn transit = NULL;
   12544:	462e      	mov	r6, r5
   12546:	e78d      	b.n	12464 <process_event+0x194>
   12548:	00028a23 	.word	0x00028a23
   1254c:	000289af 	.word	0x000289af
   12550:	00028a01 	.word	0x00028a01
				   && !sys_slist_is_empty(&mgr->monitors);
   12554:	f04f 0a01 	mov.w	sl, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   12558:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
   1255c:	83a3      	strh	r3, [r4, #28]
			k_spin_unlock(&mgr->lock, key);
   1255e:	f104 0314 	add.w	r3, r4, #20
   12562:	4618      	mov	r0, r3
   12564:	9301      	str	r3, [sp, #4]
   12566:	f00e f8b5 	bl	206d4 <z_spin_unlock_valid>
   1256a:	b940      	cbnz	r0, 1257e <process_event+0x2ae>
   1256c:	4931      	ldr	r1, [pc, #196]	; (12634 <process_event+0x364>)
   1256e:	4640      	mov	r0, r8
   12570:	22b9      	movs	r2, #185	; 0xb9
   12572:	f011 ff0c 	bl	2438e <assert_print>
   12576:	482f      	ldr	r0, [pc, #188]	; (12634 <process_event+0x364>)
   12578:	21b9      	movs	r1, #185	; 0xb9
   1257a:	f011 ff01 	bl	24380 <assert_post_action>
   1257e:	f38b 8811 	msr	BASEPRI, fp
   12582:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   12586:	f1ba 0f00 	cmp.w	sl, #0
   1258a:	d130      	bne.n	125ee <process_event+0x31e>
	while (!sys_slist_is_empty(list)) {
   1258c:	2d00      	cmp	r5, #0
   1258e:	d140      	bne.n	12612 <process_event+0x342>
			if (transit != NULL) {
   12590:	b116      	cbz	r6, 12598 <process_event+0x2c8>
				transit(mgr, transition_complete);
   12592:	4929      	ldr	r1, [pc, #164]	; (12638 <process_event+0x368>)
   12594:	4620      	mov	r0, r4
   12596:	47b0      	blx	r6
	__asm__ volatile(
   12598:	f04f 0340 	mov.w	r3, #64	; 0x40
   1259c:	f3ef 8b11 	mrs	fp, BASEPRI
   125a0:	f383 8812 	msr	BASEPRI_MAX, r3
   125a4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   125a8:	9801      	ldr	r0, [sp, #4]
   125aa:	f00e f885 	bl	206b8 <z_spin_lock_valid>
   125ae:	b940      	cbnz	r0, 125c2 <process_event+0x2f2>
   125b0:	4920      	ldr	r1, [pc, #128]	; (12634 <process_event+0x364>)
   125b2:	4640      	mov	r0, r8
   125b4:	228e      	movs	r2, #142	; 0x8e
   125b6:	f011 feea 	bl	2438e <assert_print>
   125ba:	481e      	ldr	r0, [pc, #120]	; (12634 <process_event+0x364>)
   125bc:	218e      	movs	r1, #142	; 0x8e
   125be:	f011 fedf 	bl	24380 <assert_post_action>
	z_spin_lock_set_owner(l);
   125c2:	9801      	ldr	r0, [sp, #4]
   125c4:	f00e f896 	bl	206f4 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   125c8:	8ba3      	ldrh	r3, [r4, #28]
   125ca:	f023 0308 	bic.w	r3, r3, #8
   125ce:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   125d0:	8ba3      	ldrh	r3, [r4, #28]
   125d2:	06da      	lsls	r2, r3, #27
   125d4:	d525      	bpl.n	12622 <process_event+0x352>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   125d6:	f023 0310 	bic.w	r3, r3, #16
   125da:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
   125dc:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   125de:	f8b4 a01c 	ldrh.w	sl, [r4, #28]
   125e2:	f00a 0a07 	and.w	sl, sl, #7
	} while (evt != EVT_NOP);
   125e6:	2900      	cmp	r1, #0
   125e8:	f47f ae9d 	bne.w	12326 <process_event+0x56>
out:
   125ec:	e681      	b.n	122f2 <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   125ee:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   125f0:	2900      	cmp	r1, #0
   125f2:	d0cb      	beq.n	1258c <process_event+0x2bc>
	return node->next;
   125f4:	f8d1 a000 	ldr.w	sl, [r1]
		mon->callback(mgr, mon, state, res);
   125f8:	f8d1 b004 	ldr.w	fp, [r1, #4]
   125fc:	9a00      	ldr	r2, [sp, #0]
   125fe:	464b      	mov	r3, r9
   12600:	4620      	mov	r0, r4
   12602:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   12604:	f1ba 0f00 	cmp.w	sl, #0
   12608:	d0c0      	beq.n	1258c <process_event+0x2bc>
   1260a:	4651      	mov	r1, sl
   1260c:	f8da a000 	ldr.w	sl, [sl]
   12610:	e7f2      	b.n	125f8 <process_event+0x328>
   12612:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   12614:	9a00      	ldr	r2, [sp, #0]
   12616:	682d      	ldr	r5, [r5, #0]
   12618:	464b      	mov	r3, r9
   1261a:	4620      	mov	r0, r4
   1261c:	f011 fd42 	bl	240a4 <notify_one>
   12620:	e7b4      	b.n	1258c <process_event+0x2bc>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   12622:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   12626:	bf1e      	ittt	ne
   12628:	f023 0320 	bicne.w	r3, r3, #32
   1262c:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
   1262e:	2102      	movne	r1, #2
   12630:	e7d5      	b.n	125de <process_event+0x30e>
   12632:	bf00      	nop
   12634:	00028a23 	.word	0x00028a23
   12638:	0001263d 	.word	0x0001263d

0001263c <transition_complete>:
{
   1263c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1263e:	4604      	mov	r4, r0
   12640:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   12642:	f100 0614 	add.w	r6, r0, #20
   12646:	f04f 0340 	mov.w	r3, #64	; 0x40
   1264a:	f3ef 8711 	mrs	r7, BASEPRI
   1264e:	f383 8812 	msr	BASEPRI_MAX, r3
   12652:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   12656:	4630      	mov	r0, r6
   12658:	f00e f82e 	bl	206b8 <z_spin_lock_valid>
   1265c:	b940      	cbnz	r0, 12670 <transition_complete+0x34>
   1265e:	490a      	ldr	r1, [pc, #40]	; (12688 <transition_complete+0x4c>)
   12660:	480a      	ldr	r0, [pc, #40]	; (1268c <transition_complete+0x50>)
   12662:	228e      	movs	r2, #142	; 0x8e
   12664:	f011 fe93 	bl	2438e <assert_print>
   12668:	4807      	ldr	r0, [pc, #28]	; (12688 <transition_complete+0x4c>)
   1266a:	218e      	movs	r1, #142	; 0x8e
   1266c:	f011 fe88 	bl	24380 <assert_post_action>
	z_spin_lock_set_owner(l);
   12670:	4630      	mov	r0, r6
   12672:	f00e f83f 	bl	206f4 <z_spin_lock_set_owner>
	mgr->last_res = res;
   12676:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
   12678:	463a      	mov	r2, r7
   1267a:	4620      	mov	r0, r4
   1267c:	2101      	movs	r1, #1
}
   1267e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
   12682:	f7ff be25 	b.w	122d0 <process_event>
   12686:	bf00      	nop
   12688:	00028a23 	.word	0x00028a23
   1268c:	000289af 	.word	0x000289af

00012690 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   12690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12694:	4604      	mov	r4, r0
   12696:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   12698:	f011 fd1a 	bl	240d0 <validate_args>

	if (rv < 0) {
   1269c:	1e05      	subs	r5, r0, #0
   1269e:	db54      	blt.n	1274a <onoff_request+0xba>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   126a0:	f104 0914 	add.w	r9, r4, #20
   126a4:	f04f 0340 	mov.w	r3, #64	; 0x40
   126a8:	f3ef 8a11 	mrs	sl, BASEPRI
   126ac:	f383 8812 	msr	BASEPRI_MAX, r3
   126b0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   126b4:	4648      	mov	r0, r9
   126b6:	f00d ffff 	bl	206b8 <z_spin_lock_valid>
   126ba:	b940      	cbnz	r0, 126ce <onoff_request+0x3e>
   126bc:	4933      	ldr	r1, [pc, #204]	; (1278c <onoff_request+0xfc>)
   126be:	4834      	ldr	r0, [pc, #208]	; (12790 <onoff_request+0x100>)
   126c0:	228e      	movs	r2, #142	; 0x8e
   126c2:	f011 fe64 	bl	2438e <assert_print>
   126c6:	4831      	ldr	r0, [pc, #196]	; (1278c <onoff_request+0xfc>)
   126c8:	218e      	movs	r1, #142	; 0x8e
   126ca:	f011 fe59 	bl	24380 <assert_post_action>
	z_spin_lock_set_owner(l);
   126ce:	4648      	mov	r0, r9
   126d0:	f00e f810 	bl	206f4 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   126d4:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   126d6:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
   126d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   126dc:	428b      	cmp	r3, r1
   126de:	f002 0607 	and.w	r6, r2, #7
   126e2:	d04a      	beq.n	1277a <onoff_request+0xea>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   126e4:	2e02      	cmp	r6, #2
   126e6:	d11f      	bne.n	12728 <onoff_request+0x98>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   126e8:	3301      	adds	r3, #1
   126ea:	83e3      	strh	r3, [r4, #30]
	rv = state;
   126ec:	4635      	mov	r5, r6
		notify = true;
   126ee:	f04f 0801 	mov.w	r8, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   126f2:	4648      	mov	r0, r9
   126f4:	f00d ffee 	bl	206d4 <z_spin_unlock_valid>
   126f8:	b940      	cbnz	r0, 1270c <onoff_request+0x7c>
   126fa:	4924      	ldr	r1, [pc, #144]	; (1278c <onoff_request+0xfc>)
   126fc:	4824      	ldr	r0, [pc, #144]	; (12790 <onoff_request+0x100>)
   126fe:	22b9      	movs	r2, #185	; 0xb9
   12700:	f011 fe45 	bl	2438e <assert_print>
   12704:	4821      	ldr	r0, [pc, #132]	; (1278c <onoff_request+0xfc>)
   12706:	21b9      	movs	r1, #185	; 0xb9
   12708:	f011 fe3a 	bl	24380 <assert_post_action>
	__asm__ volatile(
   1270c:	f38a 8811 	msr	BASEPRI, sl
   12710:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   12714:	f1b8 0f00 	cmp.w	r8, #0
   12718:	d017      	beq.n	1274a <onoff_request+0xba>
			notify_one(mgr, cli, state, 0);
   1271a:	2300      	movs	r3, #0
   1271c:	4632      	mov	r2, r6
   1271e:	4639      	mov	r1, r7
   12720:	4620      	mov	r0, r4
   12722:	f011 fcbf 	bl	240a4 <notify_one>
   12726:	e010      	b.n	1274a <onoff_request+0xba>
	} else if ((state == ONOFF_STATE_OFF)
   12728:	0793      	lsls	r3, r2, #30
   1272a:	d001      	beq.n	12730 <onoff_request+0xa0>
		   || (state == ONOFF_STATE_TO_ON)) {
   1272c:	2e06      	cmp	r6, #6
   1272e:	d10f      	bne.n	12750 <onoff_request+0xc0>
	parent->next = child;
   12730:	2300      	movs	r3, #0
   12732:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
   12734:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   12736:	b9eb      	cbnz	r3, 12774 <onoff_request+0xe4>
	list->head = node;
   12738:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
   1273c:	4635      	mov	r5, r6
   1273e:	b9f6      	cbnz	r6, 1277e <onoff_request+0xee>
		process_event(mgr, EVT_RECHECK, key);
   12740:	4652      	mov	r2, sl
   12742:	2102      	movs	r1, #2
   12744:	4620      	mov	r0, r4
   12746:	f7ff fdc3 	bl	122d0 <process_event>
		}
	}

	return rv;
}
   1274a:	4628      	mov	r0, r5
   1274c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
   12750:	2e05      	cmp	r6, #5
   12752:	d017      	beq.n	12784 <onoff_request+0xf4>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   12754:	2e01      	cmp	r6, #1
   12756:	d00a      	beq.n	1276e <onoff_request+0xde>
   12758:	490e      	ldr	r1, [pc, #56]	; (12794 <onoff_request+0x104>)
   1275a:	480d      	ldr	r0, [pc, #52]	; (12790 <onoff_request+0x100>)
   1275c:	f240 12c9 	movw	r2, #457	; 0x1c9
   12760:	f011 fe15 	bl	2438e <assert_print>
   12764:	480b      	ldr	r0, [pc, #44]	; (12794 <onoff_request+0x104>)
   12766:	f240 11c9 	movw	r1, #457	; 0x1c9
   1276a:	f011 fe09 	bl	24380 <assert_post_action>
		rv = -EIO;
   1276e:	f06f 0504 	mvn.w	r5, #4
   12772:	e004      	b.n	1277e <onoff_request+0xee>
	parent->next = child;
   12774:	601f      	str	r7, [r3, #0]
	list->tail = node;
   12776:	6067      	str	r7, [r4, #4]
}
   12778:	e7e0      	b.n	1273c <onoff_request+0xac>
		rv = -EAGAIN;
   1277a:	f06f 050a 	mvn.w	r5, #10
   1277e:	f04f 0800 	mov.w	r8, #0
   12782:	e7b6      	b.n	126f2 <onoff_request+0x62>
		rv = -ENOTSUP;
   12784:	f06f 0585 	mvn.w	r5, #133	; 0x85
   12788:	e7f9      	b.n	1277e <onoff_request+0xee>
   1278a:	bf00      	nop
   1278c:	00028a23 	.word	0x00028a23
   12790:	000289af 	.word	0x000289af
   12794:	00028a01 	.word	0x00028a01

00012798 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
   12798:	b570      	push	{r4, r5, r6, lr}
	if (mem == NULL) {
   1279a:	b379      	cbz	r1, 127fc <sys_heap_free+0x64>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
   1279c:	6805      	ldr	r5, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1279e:	1f0c      	subs	r4, r1, #4
   127a0:	1b64      	subs	r4, r4, r5
   127a2:	08e6      	lsrs	r6, r4, #3

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   127a4:	f024 0407 	bic.w	r4, r4, #7

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   127a8:	442c      	add	r4, r5
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   127aa:	8863      	ldrh	r3, [r4, #2]

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
   127ac:	07db      	lsls	r3, r3, #31
   127ae:	d408      	bmi.n	127c2 <sys_heap_free+0x2a>
   127b0:	4913      	ldr	r1, [pc, #76]	; (12800 <sys_heap_free+0x68>)
   127b2:	4814      	ldr	r0, [pc, #80]	; (12804 <sys_heap_free+0x6c>)
   127b4:	22ac      	movs	r2, #172	; 0xac
   127b6:	f011 fdea 	bl	2438e <assert_print>
   127ba:	4811      	ldr	r0, [pc, #68]	; (12800 <sys_heap_free+0x68>)
   127bc:	21ac      	movs	r1, #172	; 0xac
   127be:	f011 fddf 	bl	24380 <assert_post_action>
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
   127c2:	4631      	mov	r1, r6
   127c4:	4628      	mov	r0, r5
   127c6:	f011 fcaf 	bl	24128 <chunk_size>
   127ca:	4430      	add	r0, r6
		return ((uint16_t *)cmem)[f];
   127cc:	f835 3030 	ldrh.w	r3, [r5, r0, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   127d0:	1ac0      	subs	r0, r0, r3
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
   127d2:	4286      	cmp	r6, r0
   127d4:	d008      	beq.n	127e8 <sys_heap_free+0x50>
   127d6:	490a      	ldr	r1, [pc, #40]	; (12800 <sys_heap_free+0x68>)
   127d8:	480a      	ldr	r0, [pc, #40]	; (12804 <sys_heap_free+0x6c>)
   127da:	22b4      	movs	r2, #180	; 0xb4
   127dc:	f011 fdd7 	bl	2438e <assert_print>
   127e0:	4807      	ldr	r0, [pc, #28]	; (12800 <sys_heap_free+0x68>)
   127e2:	21b4      	movs	r1, #180	; 0xb4
   127e4:	f011 fdcc 	bl	24380 <assert_post_action>
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   127e8:	8863      	ldrh	r3, [r4, #2]
   127ea:	f023 0301 	bic.w	r3, r3, #1
   127ee:	8063      	strh	r3, [r4, #2]
#ifdef CONFIG_SYS_HEAP_LISTENER
	heap_listener_notify_free(HEAP_ID_FROM_POINTER(heap), mem,
				  chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	free_chunk(h, c);
   127f0:	4631      	mov	r1, r6
   127f2:	4628      	mov	r0, r5
}
   127f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	free_chunk(h, c);
   127f8:	f011 bd52 	b.w	242a0 <free_chunk>
}
   127fc:	bd70      	pop	{r4, r5, r6, pc}
   127fe:	bf00      	nop
   12800:	00028a50 	.word	0x00028a50
   12804:	000289af 	.word	0x000289af

00012808 <sys_heap_aligned_alloc>:
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   12808:	424b      	negs	r3, r1
{
   1280a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rew = align & -align;
   1280e:	ea03 0701 	and.w	r7, r3, r1
	if (align != rew) {
   12812:	ea31 0303 	bics.w	r3, r1, r3
	struct z_heap *h = heap->heap;
   12816:	6806      	ldr	r6, [r0, #0]
{
   12818:	4614      	mov	r4, r2
	if (align != rew) {
   1281a:	d01b      	beq.n	12854 <sys_heap_aligned_alloc+0x4c>
		return false;
   1281c:	2f04      	cmp	r7, #4
   1281e:	463d      	mov	r5, r7
   12820:	46b9      	mov	r9, r7
   12822:	bf28      	it	cs
   12824:	2504      	movcs	r5, #4
		align -= rew;
   12826:	1bcf      	subs	r7, r1, r7
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   12828:	f107 3aff 	add.w	sl, r7, #4294967295
   1282c:	ea1a 0f07 	tst.w	sl, r7
   12830:	d00a      	beq.n	12848 <sys_heap_aligned_alloc+0x40>
   12832:	4931      	ldr	r1, [pc, #196]	; (128f8 <sys_heap_aligned_alloc+0xf0>)
   12834:	4831      	ldr	r0, [pc, #196]	; (128fc <sys_heap_aligned_alloc+0xf4>)
   12836:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1283a:	f011 fda8 	bl	2438e <assert_print>
   1283e:	482e      	ldr	r0, [pc, #184]	; (128f8 <sys_heap_aligned_alloc+0xf0>)
   12840:	f44f 71a0 	mov.w	r1, #320	; 0x140
   12844:	f011 fd9c 	bl	24380 <assert_post_action>

	if (bytes == 0 || size_too_big(h, bytes)) {
   12848:	b97c      	cbnz	r4, 1286a <sys_heap_aligned_alloc+0x62>
		return NULL;
   1284a:	f04f 0900 	mov.w	r9, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   1284e:	4648      	mov	r0, r9
   12850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (align <= chunk_header_bytes(h)) {
   12854:	2904      	cmp	r1, #4
   12856:	d804      	bhi.n	12862 <sys_heap_aligned_alloc+0x5a>
}
   12858:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return sys_heap_alloc(heap, bytes);
   1285c:	4611      	mov	r1, r2
   1285e:	f011 bd50 	b.w	24302 <sys_heap_alloc>
		rew = 0;
   12862:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
   12866:	2504      	movs	r5, #4
   12868:	e7de      	b.n	12828 <sys_heap_aligned_alloc+0x20>
	if (bytes == 0 || size_too_big(h, bytes)) {
   1286a:	68b3      	ldr	r3, [r6, #8]
   1286c:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   12870:	d9eb      	bls.n	1284a <sys_heap_aligned_alloc+0x42>
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   12872:	f104 010b 	add.w	r1, r4, #11
   12876:	4439      	add	r1, r7
   12878:	1b49      	subs	r1, r1, r5
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   1287a:	08c9      	lsrs	r1, r1, #3
   1287c:	4630      	mov	r0, r6
   1287e:	f011 fca9 	bl	241d4 <alloc_chunk>
	if (c0 == 0) {
   12882:	4680      	mov	r8, r0
   12884:	2800      	cmp	r0, #0
   12886:	d0e0      	beq.n	1284a <sys_heap_aligned_alloc+0x42>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   12888:	f109 0504 	add.w	r5, r9, #4
   1288c:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   12890:	4435      	add	r5, r6
   12892:	4455      	add	r5, sl
   12894:	427f      	negs	r7, r7
   12896:	402f      	ands	r7, r5
   12898:	eba7 0909 	sub.w	r9, r7, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1289c:	444c      	add	r4, r9
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1289e:	f1a9 0304 	sub.w	r3, r9, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   128a2:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   128a4:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   128a6:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   128aa:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   128ac:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   128b0:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   128b4:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   128b8:	d208      	bcs.n	128cc <sys_heap_aligned_alloc+0xc4>
		split_chunks(h, c0, c);
   128ba:	4601      	mov	r1, r0
   128bc:	463a      	mov	r2, r7
   128be:	4630      	mov	r0, r6
   128c0:	f011 fcd4 	bl	2426c <split_chunks>
		free_list_add(h, c0);
   128c4:	4641      	mov	r1, r8
   128c6:	4630      	mov	r0, r6
   128c8:	f011 fc33 	bl	24132 <free_list_add>
	return c + chunk_size(h, c);
   128cc:	4639      	mov	r1, r7
   128ce:	4630      	mov	r0, r6
   128d0:	f011 fc2a 	bl	24128 <chunk_size>
   128d4:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   128d6:	4284      	cmp	r4, r0
   128d8:	d207      	bcs.n	128ea <sys_heap_aligned_alloc+0xe2>
		split_chunks(h, c, c_end);
   128da:	4630      	mov	r0, r6
   128dc:	4622      	mov	r2, r4
   128de:	f011 fcc5 	bl	2426c <split_chunks>
		free_list_add(h, c_end);
   128e2:	4621      	mov	r1, r4
   128e4:	4630      	mov	r0, r6
   128e6:	f011 fc24 	bl	24132 <free_list_add>
	void *cmem = &buf[c];
   128ea:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   128ee:	8873      	ldrh	r3, [r6, #2]
   128f0:	f043 0301 	orr.w	r3, r3, #1
   128f4:	8073      	strh	r3, [r6, #2]
   128f6:	e7aa      	b.n	1284e <sys_heap_aligned_alloc+0x46>
   128f8:	00028a50 	.word	0x00028a50
   128fc:	000289af 	.word	0x000289af

00012900 <sys_heap_init>:

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
   12900:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
{
   12904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12908:	4604      	mov	r4, r0
   1290a:	460e      	mov	r6, r1
   1290c:	4617      	mov	r7, r2
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
   1290e:	d35e      	bcc.n	129ce <sys_heap_init+0xce>
   12910:	4936      	ldr	r1, [pc, #216]	; (129ec <sys_heap_init+0xec>)
   12912:	4837      	ldr	r0, [pc, #220]	; (129f0 <sys_heap_init+0xf0>)
   12914:	f240 12e3 	movw	r2, #483	; 0x1e3
   12918:	f011 fd39 	bl	2438e <assert_print>
   1291c:	f240 11e3 	movw	r1, #483	; 0x1e3
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   12920:	4832      	ldr	r0, [pc, #200]	; (129ec <sys_heap_init+0xec>)
   12922:	f011 fd2d 	bl	24380 <assert_post_action>
	bytes -= heap_footer_bytes(bytes);
   12926:	3f04      	subs	r7, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   12928:	1df5      	adds	r5, r6, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1292a:	443e      	add	r6, r7
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1292c:	f025 0507 	bic.w	r5, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   12930:	f026 0607 	bic.w	r6, r6, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   12934:	1b76      	subs	r6, r6, r5

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   12936:	2e17      	cmp	r6, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   12938:	ea4f 07d6 	mov.w	r7, r6, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   1293c:	d80a      	bhi.n	12954 <sys_heap_init+0x54>
   1293e:	492b      	ldr	r1, [pc, #172]	; (129ec <sys_heap_init+0xec>)
   12940:	482b      	ldr	r0, [pc, #172]	; (129f0 <sys_heap_init+0xf0>)
   12942:	f240 12f3 	movw	r2, #499	; 0x1f3
   12946:	f011 fd22 	bl	2438e <assert_print>
   1294a:	4828      	ldr	r0, [pc, #160]	; (129ec <sys_heap_init+0xec>)
   1294c:	f240 11f3 	movw	r1, #499	; 0x1f3
   12950:	f011 fd16 	bl	24380 <assert_post_action>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   12954:	6025      	str	r5, [r4, #0]
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   12956:	fab7 f487 	clz	r4, r7
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1295a:	f1c4 0820 	rsb	r8, r4, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1295e:	f1c4 0424 	rsb	r4, r4, #36	; 0x24
   12962:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   12964:	3407      	adds	r4, #7
	h->avail_buckets = 0;
   12966:	2300      	movs	r3, #0
   12968:	08e4      	lsrs	r4, r4, #3
   1296a:	60eb      	str	r3, [r5, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   1296c:	1c63      	adds	r3, r4, #1
   1296e:	42bb      	cmp	r3, r7
	h->end_chunk = heap_sz;
   12970:	60af      	str	r7, [r5, #8]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   12972:	d90a      	bls.n	1298a <sys_heap_init+0x8a>
   12974:	491d      	ldr	r1, [pc, #116]	; (129ec <sys_heap_init+0xec>)
   12976:	481e      	ldr	r0, [pc, #120]	; (129f0 <sys_heap_init+0xf0>)
   12978:	f44f 7201 	mov.w	r2, #516	; 0x204
   1297c:	f011 fd07 	bl	2438e <assert_print>
   12980:	481a      	ldr	r0, [pc, #104]	; (129ec <sys_heap_init+0xec>)
   12982:	f44f 7101 	mov.w	r1, #516	; 0x204
   12986:	f011 fcfb 	bl	24380 <assert_post_action>
   1298a:	f105 0310 	add.w	r3, r5, #16
   1298e:	eb03 0888 	add.w	r8, r3, r8, lsl #2
   12992:	2200      	movs	r2, #0

	for (int i = 0; i < nb_buckets; i++) {
   12994:	4598      	cmp	r8, r3
   12996:	d125      	bne.n	129e4 <sys_heap_init+0xe4>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   12998:	0063      	lsls	r3, r4, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1299a:	f043 0301 	orr.w	r3, r3, #1
   1299e:	806b      	strh	r3, [r5, #2]
		((uint16_t *)cmem)[f] = val;
   129a0:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   129a4:	1b3b      	subs	r3, r7, r4
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   129a6:	0058      	lsls	r0, r3, #1
		((uint16_t *)cmem)[f] = val;
   129a8:	802a      	strh	r2, [r5, #0]
   129aa:	8048      	strh	r0, [r1, #2]
   129ac:	19a9      	adds	r1, r5, r6
   129ae:	f825 4034 	strh.w	r4, [r5, r4, lsl #3]
   129b2:	804a      	strh	r2, [r1, #2]
   129b4:	53ab      	strh	r3, [r5, r6]
	void *cmem = &buf[c];
   129b6:	eb05 03c7 	add.w	r3, r5, r7, lsl #3
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   129ba:	4621      	mov	r1, r4
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   129bc:	885a      	ldrh	r2, [r3, #2]
   129be:	f042 0201 	orr.w	r2, r2, #1
   129c2:	4628      	mov	r0, r5
   129c4:	805a      	strh	r2, [r3, #2]
}
   129c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	free_list_add(h, chunk0_size);
   129ca:	f011 bbb2 	b.w	24132 <free_list_add>
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   129ce:	2a04      	cmp	r2, #4
   129d0:	d8a9      	bhi.n	12926 <sys_heap_init+0x26>
   129d2:	4906      	ldr	r1, [pc, #24]	; (129ec <sys_heap_init+0xec>)
   129d4:	4806      	ldr	r0, [pc, #24]	; (129f0 <sys_heap_init+0xf0>)
   129d6:	f44f 72f5 	mov.w	r2, #490	; 0x1ea
   129da:	f011 fcd8 	bl	2438e <assert_print>
   129de:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
   129e2:	e79d      	b.n	12920 <sys_heap_init+0x20>
		h->buckets[i].next = 0;
   129e4:	f843 2b04 	str.w	r2, [r3], #4
	for (int i = 0; i < nb_buckets; i++) {
   129e8:	e7d4      	b.n	12994 <sys_heap_init+0x94>
   129ea:	bf00      	nop
   129ec:	00028a50 	.word	0x00028a50
   129f0:	000289af 	.word	0x000289af

000129f4 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
   129f4:	b5f0      	push	{r4, r5, r6, r7, lr}
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
   129f6:	4e08      	ldr	r6, [pc, #32]	; (12a18 <extract_decimal+0x24>)
   129f8:	6802      	ldr	r2, [r0, #0]
{
   129fa:	4603      	mov	r3, r0
		val = 10U * val + *sp++ - '0';
   129fc:	270a      	movs	r7, #10
	size_t val = 0;
   129fe:	2000      	movs	r0, #0
   12a00:	4611      	mov	r1, r2
	while (isdigit((int)(unsigned char)*sp)) {
   12a02:	3201      	adds	r2, #1
   12a04:	780c      	ldrb	r4, [r1, #0]
   12a06:	5da5      	ldrb	r5, [r4, r6]
   12a08:	076d      	lsls	r5, r5, #29
   12a0a:	d401      	bmi.n	12a10 <extract_decimal+0x1c>
	}
	*str = sp;
   12a0c:	6019      	str	r1, [r3, #0]
	return val;
}
   12a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
   12a10:	fb07 4000 	mla	r0, r7, r0, r4
   12a14:	3830      	subs	r0, #48	; 0x30
   12a16:	e7f3      	b.n	12a00 <extract_decimal+0xc>
   12a18:	0002b792 	.word	0x0002b792

00012a1c <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
   12a1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a20:	4615      	mov	r5, r2
   12a22:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   12a24:	78d3      	ldrb	r3, [r2, #3]
   12a26:	4a22      	ldr	r2, [pc, #136]	; (12ab0 <encode_uint+0x94>)
   12a28:	f813 b002 	ldrb.w	fp, [r3, r2]
	switch (specifier) {
   12a2c:	2b6f      	cmp	r3, #111	; 0x6f
{
   12a2e:	4680      	mov	r8, r0
   12a30:	460f      	mov	r7, r1
   12a32:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
   12a36:	d029      	beq.n	12a8c <encode_uint+0x70>
   12a38:	d824      	bhi.n	12a84 <encode_uint+0x68>
		return 16;
   12a3a:	2b58      	cmp	r3, #88	; 0x58
   12a3c:	bf14      	ite	ne
   12a3e:	260a      	movne	r6, #10
   12a40:	2610      	moveq	r6, #16
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
   12a42:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28

	do {
		unsigned int lsv = (unsigned int)(value % radix);
   12a46:	4632      	mov	r2, r6
   12a48:	2300      	movs	r3, #0
   12a4a:	4640      	mov	r0, r8
   12a4c:	4639      	mov	r1, r7
   12a4e:	f7ee fa7f 	bl	f50 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
   12a52:	2a09      	cmp	r2, #9
   12a54:	b2d4      	uxtb	r4, r2
   12a56:	d81e      	bhi.n	12a96 <encode_uint+0x7a>
   12a58:	3430      	adds	r4, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
   12a5a:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   12a5c:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   12a5e:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   12a62:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   12a66:	d301      	bcc.n	12a6c <encode_uint+0x50>
   12a68:	45d1      	cmp	r9, sl
   12a6a:	d811      	bhi.n	12a90 <encode_uint+0x74>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
   12a6c:	782b      	ldrb	r3, [r5, #0]
   12a6e:	069b      	lsls	r3, r3, #26
   12a70:	d505      	bpl.n	12a7e <encode_uint+0x62>
		if (radix == 8) {
   12a72:	2e08      	cmp	r6, #8
   12a74:	d115      	bne.n	12aa2 <encode_uint+0x86>
			conv->altform_0 = true;
   12a76:	78ab      	ldrb	r3, [r5, #2]
   12a78:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
   12a7c:	70ab      	strb	r3, [r5, #2]
			;
		}
	}

	return bp;
}
   12a7e:	4648      	mov	r0, r9
   12a80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   12a84:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   12a88:	2b70      	cmp	r3, #112	; 0x70
   12a8a:	e7d7      	b.n	12a3c <encode_uint+0x20>
	switch (specifier) {
   12a8c:	2608      	movs	r6, #8
   12a8e:	e7d8      	b.n	12a42 <encode_uint+0x26>
		value /= radix;
   12a90:	4680      	mov	r8, r0
   12a92:	460f      	mov	r7, r1
   12a94:	e7d7      	b.n	12a46 <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   12a96:	f1bb 0f01 	cmp.w	fp, #1
   12a9a:	bf0c      	ite	eq
   12a9c:	3437      	addeq	r4, #55	; 0x37
   12a9e:	3457      	addne	r4, #87	; 0x57
   12aa0:	e7db      	b.n	12a5a <encode_uint+0x3e>
		} else if (radix == 16) {
   12aa2:	2e10      	cmp	r6, #16
   12aa4:	d1eb      	bne.n	12a7e <encode_uint+0x62>
			conv->altform_0c = true;
   12aa6:	78ab      	ldrb	r3, [r5, #2]
   12aa8:	f043 0310 	orr.w	r3, r3, #16
   12aac:	e7e6      	b.n	12a7c <encode_uint+0x60>
   12aae:	bf00      	nop
   12ab0:	0002b792 	.word	0x0002b792

00012ab4 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   12ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ab8:	4682      	mov	sl, r0
   12aba:	b093      	sub	sp, #76	; 0x4c
   12abc:	468b      	mov	fp, r1
   12abe:	4691      	mov	r9, r2
   12ac0:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   12ac2:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   12ac4:	f899 0000 	ldrb.w	r0, [r9]
   12ac8:	b908      	cbnz	r0, 12ace <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
   12aca:	4628      	mov	r0, r5
   12acc:	e33d      	b.n	1314a <cbvprintf+0x696>
			OUTC(*fp++);
   12ace:	f109 0301 	add.w	r3, r9, #1
		if (*fp != '%') {
   12ad2:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
   12ad4:	9302      	str	r3, [sp, #8]
		if (*fp != '%') {
   12ad6:	d006      	beq.n	12ae6 <cbvprintf+0x32>
			OUTC('%');
   12ad8:	4659      	mov	r1, fp
   12ada:	47d0      	blx	sl
   12adc:	2800      	cmp	r0, #0
   12ade:	f2c0 8334 	blt.w	1314a <cbvprintf+0x696>
   12ae2:	3501      	adds	r5, #1
			break;
   12ae4:	e1f5      	b.n	12ed2 <cbvprintf+0x41e>
		} state = {
   12ae6:	2218      	movs	r2, #24
   12ae8:	2100      	movs	r1, #0
   12aea:	a80c      	add	r0, sp, #48	; 0x30
   12aec:	f014 ffd7 	bl	27a9e <memset>
	if (*sp == '%') {
   12af0:	f899 3001 	ldrb.w	r3, [r9, #1]
   12af4:	2b25      	cmp	r3, #37	; 0x25
   12af6:	d05a      	beq.n	12bae <cbvprintf+0xfa>
   12af8:	f109 0201 	add.w	r2, r9, #1
   12afc:	4616      	mov	r6, r2
		switch (*sp) {
   12afe:	f812 3b01 	ldrb.w	r3, [r2], #1
   12b02:	2b2b      	cmp	r3, #43	; 0x2b
   12b04:	f000 808b 	beq.w	12c1e <cbvprintf+0x16a>
   12b08:	d879      	bhi.n	12bfe <cbvprintf+0x14a>
   12b0a:	2b20      	cmp	r3, #32
   12b0c:	f000 808c 	beq.w	12c28 <cbvprintf+0x174>
   12b10:	2b23      	cmp	r3, #35	; 0x23
   12b12:	f000 808e 	beq.w	12c32 <cbvprintf+0x17e>
	if (conv->flag_zero && conv->flag_dash) {
   12b16:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   12b1a:	f003 0244 	and.w	r2, r3, #68	; 0x44
   12b1e:	2a44      	cmp	r2, #68	; 0x44
   12b20:	d103      	bne.n	12b2a <cbvprintf+0x76>
		conv->flag_zero = false;
   12b22:	f36f 1386 	bfc	r3, #6, #1
   12b26:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	conv->width_present = true;
   12b2a:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   12b2e:	9605      	str	r6, [sp, #20]
   12b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   12b34:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	if (*sp == '*') {
   12b38:	7833      	ldrb	r3, [r6, #0]
   12b3a:	2b2a      	cmp	r3, #42	; 0x2a
   12b3c:	d17e      	bne.n	12c3c <cbvprintf+0x188>
		conv->width_star = true;
   12b3e:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   12b42:	f043 0301 	orr.w	r3, r3, #1
   12b46:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		return ++sp;
   12b4a:	1c73      	adds	r3, r6, #1
	sp = extract_prec(conv, sp);
   12b4c:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
   12b4e:	781a      	ldrb	r2, [r3, #0]
   12b50:	2a2e      	cmp	r2, #46	; 0x2e
   12b52:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   12b56:	bf0c      	ite	eq
   12b58:	2101      	moveq	r1, #1
   12b5a:	2100      	movne	r1, #0
   12b5c:	f361 0241 	bfi	r2, r1, #1, #1
   12b60:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
   12b64:	d10b      	bne.n	12b7e <cbvprintf+0xca>
	++sp;
   12b66:	1c5a      	adds	r2, r3, #1
   12b68:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
   12b6a:	785a      	ldrb	r2, [r3, #1]
   12b6c:	2a2a      	cmp	r2, #42	; 0x2a
   12b6e:	d17b      	bne.n	12c68 <cbvprintf+0x1b4>
		conv->prec_star = true;
   12b70:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   12b74:	f042 0204 	orr.w	r2, r2, #4
   12b78:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		return ++sp;
   12b7c:	3302      	adds	r3, #2
	switch (*sp) {
   12b7e:	4619      	mov	r1, r3
   12b80:	f811 0b01 	ldrb.w	r0, [r1], #1
   12b84:	286c      	cmp	r0, #108	; 0x6c
   12b86:	f000 80b6 	beq.w	12cf6 <cbvprintf+0x242>
   12b8a:	d87d      	bhi.n	12c88 <cbvprintf+0x1d4>
   12b8c:	2868      	cmp	r0, #104	; 0x68
   12b8e:	f000 8084 	beq.w	12c9a <cbvprintf+0x1e6>
   12b92:	286a      	cmp	r0, #106	; 0x6a
   12b94:	f000 80b9 	beq.w	12d0a <cbvprintf+0x256>
   12b98:	284c      	cmp	r0, #76	; 0x4c
   12b9a:	f000 80bd 	beq.w	12d18 <cbvprintf+0x264>
		conv->length_mod = LENGTH_NONE;
   12b9e:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   12ba2:	f36f 02c6 	bfc	r2, #3, #4
   12ba6:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		break;
   12baa:	4619      	mov	r1, r3
   12bac:	e080      	b.n	12cb0 <cbvprintf+0x1fc>
		conv->specifier = *sp++;
   12bae:	f109 0202 	add.w	r2, r9, #2
   12bb2:	9202      	str	r2, [sp, #8]
   12bb4:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
   12bb8:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   12bbc:	07d9      	lsls	r1, r3, #31
   12bbe:	f140 814a 	bpl.w	12e56 <cbvprintf+0x3a2>
			width = va_arg(ap, int);
   12bc2:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
   12bc6:	f1b8 0f00 	cmp.w	r8, #0
   12bca:	da07      	bge.n	12bdc <cbvprintf+0x128>
				conv->flag_dash = true;
   12bcc:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
   12bd0:	f042 0204 	orr.w	r2, r2, #4
   12bd4:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				width = -width;
   12bd8:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
   12bdc:	075a      	lsls	r2, r3, #29
   12bde:	f140 8143 	bpl.w	12e68 <cbvprintf+0x3b4>
			int arg = va_arg(ap, int);
   12be2:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
   12be6:	2f00      	cmp	r7, #0
   12be8:	f280 8142 	bge.w	12e70 <cbvprintf+0x3bc>
				conv->prec_present = false;
   12bec:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   12bf0:	f36f 0341 	bfc	r3, #1, #1
   12bf4:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
   12bf8:	f04f 37ff 	mov.w	r7, #4294967295
   12bfc:	e138      	b.n	12e70 <cbvprintf+0x3bc>
		switch (*sp) {
   12bfe:	2b2d      	cmp	r3, #45	; 0x2d
   12c00:	d006      	beq.n	12c10 <cbvprintf+0x15c>
   12c02:	2b30      	cmp	r3, #48	; 0x30
   12c04:	d187      	bne.n	12b16 <cbvprintf+0x62>
			conv->flag_zero = true;
   12c06:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   12c0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   12c0e:	e003      	b.n	12c18 <cbvprintf+0x164>
			conv->flag_dash = true;
   12c10:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   12c14:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
   12c18:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
			break;
   12c1c:	e76e      	b.n	12afc <cbvprintf+0x48>
			conv->flag_plus = true;
   12c1e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   12c22:	f043 0308 	orr.w	r3, r3, #8
   12c26:	e7f7      	b.n	12c18 <cbvprintf+0x164>
			conv->flag_space = true;
   12c28:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   12c2c:	f043 0310 	orr.w	r3, r3, #16
   12c30:	e7f2      	b.n	12c18 <cbvprintf+0x164>
			conv->flag_hash = true;
   12c32:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   12c36:	f043 0320 	orr.w	r3, r3, #32
   12c3a:	e7ed      	b.n	12c18 <cbvprintf+0x164>
	size_t width = extract_decimal(&sp);
   12c3c:	a805      	add	r0, sp, #20
   12c3e:	f7ff fed9 	bl	129f4 <extract_decimal>
	if (sp != wp) {
   12c42:	9b05      	ldr	r3, [sp, #20]
   12c44:	42b3      	cmp	r3, r6
   12c46:	d081      	beq.n	12b4c <cbvprintf+0x98>
		conv->unsupported |= ((conv->width_value < 0)
   12c48:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		conv->width_value = width;
   12c4c:	900f      	str	r0, [sp, #60]	; 0x3c
		conv->unsupported |= ((conv->width_value < 0)
   12c4e:	f3c1 0240 	ubfx	r2, r1, #1, #1
   12c52:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
   12c56:	0052      	lsls	r2, r2, #1
   12c58:	f062 027f 	orn	r2, r2, #127	; 0x7f
   12c5c:	f001 017d 	and.w	r1, r1, #125	; 0x7d
   12c60:	430a      	orrs	r2, r1
   12c62:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
   12c66:	e771      	b.n	12b4c <cbvprintf+0x98>
	size_t prec = extract_decimal(&sp);
   12c68:	a805      	add	r0, sp, #20
   12c6a:	f7ff fec3 	bl	129f4 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
   12c6e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	conv->prec_value = prec;
   12c72:	9010      	str	r0, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
   12c74:	f3c3 0240 	ubfx	r2, r3, #1, #1
   12c78:	ea42 70d0 	orr.w	r0, r2, r0, lsr #31
   12c7c:	f360 0341 	bfi	r3, r0, #1, #1
   12c80:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	return sp;
   12c84:	9b05      	ldr	r3, [sp, #20]
   12c86:	e77a      	b.n	12b7e <cbvprintf+0xca>
	switch (*sp) {
   12c88:	2874      	cmp	r0, #116	; 0x74
   12c8a:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   12c8e:	d040      	beq.n	12d12 <cbvprintf+0x25e>
   12c90:	287a      	cmp	r0, #122	; 0x7a
   12c92:	d184      	bne.n	12b9e <cbvprintf+0xea>
		conv->length_mod = LENGTH_Z;
   12c94:	4613      	mov	r3, r2
   12c96:	2206      	movs	r2, #6
   12c98:	e028      	b.n	12cec <cbvprintf+0x238>
		if (*++sp == 'h') {
   12c9a:	785a      	ldrb	r2, [r3, #1]
   12c9c:	2a68      	cmp	r2, #104	; 0x68
   12c9e:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   12ca2:	d121      	bne.n	12ce8 <cbvprintf+0x234>
			conv->length_mod = LENGTH_HH;
   12ca4:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   12ca6:	f361 02c6 	bfi	r2, r1, #3, #4
   12caa:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			++sp;
   12cae:	1c99      	adds	r1, r3, #2
	conv->specifier = *sp++;
   12cb0:	460b      	mov	r3, r1
   12cb2:	f813 2b01 	ldrb.w	r2, [r3], #1
   12cb6:	9302      	str	r3, [sp, #8]
	switch (conv->specifier) {
   12cb8:	2a78      	cmp	r2, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
   12cba:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
	conv->specifier = *sp++;
   12cbe:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
   12cc2:	f200 80c0 	bhi.w	12e46 <cbvprintf+0x392>
   12cc6:	2a57      	cmp	r2, #87	; 0x57
   12cc8:	d833      	bhi.n	12d32 <cbvprintf+0x27e>
   12cca:	2a41      	cmp	r2, #65	; 0x41
   12ccc:	d003      	beq.n	12cd6 <cbvprintf+0x222>
   12cce:	3a45      	subs	r2, #69	; 0x45
   12cd0:	2a02      	cmp	r2, #2
   12cd2:	f200 80b8 	bhi.w	12e46 <cbvprintf+0x392>
		conv->specifier_cat = SPECIFIER_FP;
   12cd6:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   12cda:	2204      	movs	r2, #4
   12cdc:	f362 0302 	bfi	r3, r2, #0, #3
   12ce0:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			unsupported = true;
   12ce4:	2301      	movs	r3, #1
			break;
   12ce6:	e085      	b.n	12df4 <cbvprintf+0x340>
			conv->length_mod = LENGTH_H;
   12ce8:	4613      	mov	r3, r2
   12cea:	2202      	movs	r2, #2
			conv->length_mod = LENGTH_L;
   12cec:	f362 03c6 	bfi	r3, r2, #3, #4
   12cf0:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
   12cf4:	e7dc      	b.n	12cb0 <cbvprintf+0x1fc>
		if (*++sp == 'l') {
   12cf6:	785a      	ldrb	r2, [r3, #1]
   12cf8:	2a6c      	cmp	r2, #108	; 0x6c
   12cfa:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   12cfe:	d101      	bne.n	12d04 <cbvprintf+0x250>
			conv->length_mod = LENGTH_LL;
   12d00:	2104      	movs	r1, #4
   12d02:	e7d0      	b.n	12ca6 <cbvprintf+0x1f2>
			conv->length_mod = LENGTH_L;
   12d04:	4613      	mov	r3, r2
   12d06:	2203      	movs	r2, #3
   12d08:	e7f0      	b.n	12cec <cbvprintf+0x238>
		conv->length_mod = LENGTH_J;
   12d0a:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   12d0e:	2205      	movs	r2, #5
   12d10:	e7ec      	b.n	12cec <cbvprintf+0x238>
		conv->length_mod = LENGTH_T;
   12d12:	4613      	mov	r3, r2
   12d14:	2207      	movs	r2, #7
   12d16:	e7e9      	b.n	12cec <cbvprintf+0x238>
		conv->unsupported = true;
   12d18:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   12d1c:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
   12d20:	f023 0302 	bic.w	r3, r3, #2
   12d24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   12d28:	f043 0302 	orr.w	r3, r3, #2
   12d2c:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
   12d30:	e7be      	b.n	12cb0 <cbvprintf+0x1fc>
	switch (conv->specifier) {
   12d32:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
   12d36:	2920      	cmp	r1, #32
   12d38:	f200 8085 	bhi.w	12e46 <cbvprintf+0x392>
   12d3c:	a001      	add	r0, pc, #4	; (adr r0, 12d44 <cbvprintf+0x290>)
   12d3e:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
   12d42:	bf00      	nop
   12d44:	00012e09 	.word	0x00012e09
   12d48:	00012e47 	.word	0x00012e47
   12d4c:	00012e47 	.word	0x00012e47
   12d50:	00012e47 	.word	0x00012e47
   12d54:	00012e47 	.word	0x00012e47
   12d58:	00012e47 	.word	0x00012e47
   12d5c:	00012e47 	.word	0x00012e47
   12d60:	00012e47 	.word	0x00012e47
   12d64:	00012e47 	.word	0x00012e47
   12d68:	00012cd7 	.word	0x00012cd7
   12d6c:	00012e47 	.word	0x00012e47
   12d70:	00012e09 	.word	0x00012e09
   12d74:	00012dc9 	.word	0x00012dc9
   12d78:	00012cd7 	.word	0x00012cd7
   12d7c:	00012cd7 	.word	0x00012cd7
   12d80:	00012cd7 	.word	0x00012cd7
   12d84:	00012e47 	.word	0x00012e47
   12d88:	00012dc9 	.word	0x00012dc9
   12d8c:	00012e47 	.word	0x00012e47
   12d90:	00012e47 	.word	0x00012e47
   12d94:	00012e47 	.word	0x00012e47
   12d98:	00012e47 	.word	0x00012e47
   12d9c:	00012e11 	.word	0x00012e11
   12da0:	00012e09 	.word	0x00012e09
   12da4:	00012e2d 	.word	0x00012e2d
   12da8:	00012e47 	.word	0x00012e47
   12dac:	00012e47 	.word	0x00012e47
   12db0:	00012e2d 	.word	0x00012e2d
   12db4:	00012e47 	.word	0x00012e47
   12db8:	00012e09 	.word	0x00012e09
   12dbc:	00012e47 	.word	0x00012e47
   12dc0:	00012e47 	.word	0x00012e47
   12dc4:	00012e09 	.word	0x00012e09
		conv->specifier_cat = SPECIFIER_SINT;
   12dc8:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
   12dcc:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
   12dce:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   12dd2:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   12dd6:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   12dd8:	f88d 103a 	strb.w	r1, [sp, #58]	; 0x3a
			conv->invalid = true;
   12ddc:	bf02      	ittt	eq
   12dde:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
   12de2:	f041 0101 	orreq.w	r1, r1, #1
   12de6:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
   12dea:	2a63      	cmp	r2, #99	; 0x63
   12dec:	d131      	bne.n	12e52 <cbvprintf+0x39e>
			unsupported = (conv->length_mod != LENGTH_NONE);
   12dee:	3b00      	subs	r3, #0
   12df0:	bf18      	it	ne
   12df2:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   12df4:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
   12df8:	f3c2 0140 	ubfx	r1, r2, #1, #1
   12dfc:	430b      	orrs	r3, r1
   12dfe:	f363 0241 	bfi	r2, r3, #1, #1
   12e02:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
   12e06:	e6d7      	b.n	12bb8 <cbvprintf+0x104>
		conv->specifier_cat = SPECIFIER_UINT;
   12e08:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
   12e0c:	2002      	movs	r0, #2
   12e0e:	e7de      	b.n	12dce <cbvprintf+0x31a>
		conv->specifier_cat = SPECIFIER_PTR;
   12e10:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
   12e14:	f003 0378 	and.w	r3, r3, #120	; 0x78
   12e18:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
   12e1c:	2103      	movs	r1, #3
   12e1e:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   12e22:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
   12e24:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
   12e28:	4143      	adcs	r3, r0
   12e2a:	e7e3      	b.n	12df4 <cbvprintf+0x340>
		conv->specifier_cat = SPECIFIER_PTR;
   12e2c:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
   12e30:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
   12e32:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   12e36:	f361 0202 	bfi	r2, r1, #0, #3
   12e3a:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
   12e3e:	bf14      	ite	ne
   12e40:	2301      	movne	r3, #1
   12e42:	2300      	moveq	r3, #0
   12e44:	e7d6      	b.n	12df4 <cbvprintf+0x340>
		conv->invalid = true;
   12e46:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   12e4a:	f043 0301 	orr.w	r3, r3, #1
   12e4e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	bool unsupported = false;
   12e52:	2300      	movs	r3, #0
   12e54:	e7ce      	b.n	12df4 <cbvprintf+0x340>
		} else if (conv->width_present) {
   12e56:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
   12e5a:	2a00      	cmp	r2, #0
			width = conv->width_value;
   12e5c:	bfb4      	ite	lt
   12e5e:	f8dd 803c 	ldrlt.w	r8, [sp, #60]	; 0x3c
		int width = -1;
   12e62:	f04f 38ff 	movge.w	r8, #4294967295
   12e66:	e6b9      	b.n	12bdc <cbvprintf+0x128>
		} else if (conv->prec_present) {
   12e68:	079f      	lsls	r7, r3, #30
   12e6a:	f57f aec5 	bpl.w	12bf8 <cbvprintf+0x144>
			precision = conv->prec_value;
   12e6e:	9f10      	ldr	r7, [sp, #64]	; 0x40
			= (enum length_mod_enum)conv->length_mod;
   12e70:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
		conv->pad0_value = 0;
   12e74:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   12e76:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
			= (enum specifier_cat_enum)conv->specifier_cat;
   12e7a:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
		enum specifier_cat_enum specifier_cat
   12e7e:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   12e82:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   12e84:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   12e88:	d139      	bne.n	12efe <cbvprintf+0x44a>
			switch (length_mod) {
   12e8a:	1ecb      	subs	r3, r1, #3
   12e8c:	2b04      	cmp	r3, #4
   12e8e:	d823      	bhi.n	12ed8 <cbvprintf+0x424>
   12e90:	e8df f003 	tbb	[pc, r3]
   12e94:	22090903 	.word	0x22090903
   12e98:	22          	.byte	0x22
   12e99:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
   12e9a:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
   12e9e:	17da      	asrs	r2, r3, #31
   12ea0:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
   12ea4:	e006      	b.n	12eb4 <cbvprintf+0x400>
					(sint_value_type)va_arg(ap, intmax_t);
   12ea6:	3407      	adds	r4, #7
   12ea8:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
   12eac:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   12eb0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
   12eb4:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   12eb8:	f013 0603 	ands.w	r6, r3, #3
   12ebc:	d057      	beq.n	12f6e <cbvprintf+0x4ba>
			OUTS(sp, fp);
   12ebe:	9b02      	ldr	r3, [sp, #8]
   12ec0:	464a      	mov	r2, r9
   12ec2:	4659      	mov	r1, fp
   12ec4:	4650      	mov	r0, sl
   12ec6:	f011 fa45 	bl	24354 <outs>
   12eca:	2800      	cmp	r0, #0
   12ecc:	f2c0 813d 	blt.w	1314a <cbvprintf+0x696>
   12ed0:	4405      	add	r5, r0
			OUTS(bps, bpe);
   12ed2:	f8dd 9008 	ldr.w	r9, [sp, #8]
   12ed6:	e5f5      	b.n	12ac4 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   12ed8:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   12edc:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
   12ede:	ea4f 72e3 	mov.w	r2, r3, asr #31
   12ee2:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
   12ee6:	d105      	bne.n	12ef4 <cbvprintf+0x440>
				value->uint = (unsigned char)value->uint;
   12ee8:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
   12eec:	930c      	str	r3, [sp, #48]	; 0x30
   12eee:	2300      	movs	r3, #0
   12ef0:	930d      	str	r3, [sp, #52]	; 0x34
   12ef2:	e7df      	b.n	12eb4 <cbvprintf+0x400>
			} else if (length_mod == LENGTH_H) {
   12ef4:	2902      	cmp	r1, #2
   12ef6:	d1dd      	bne.n	12eb4 <cbvprintf+0x400>
				value->sint = (short)value->sint;
   12ef8:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
   12efc:	e7cf      	b.n	12e9e <cbvprintf+0x3ea>
		} else if (specifier_cat == SPECIFIER_UINT) {
   12efe:	2b02      	cmp	r3, #2
   12f00:	d123      	bne.n	12f4a <cbvprintf+0x496>
			switch (length_mod) {
   12f02:	1ecb      	subs	r3, r1, #3
   12f04:	2b04      	cmp	r3, #4
   12f06:	d813      	bhi.n	12f30 <cbvprintf+0x47c>
   12f08:	e8df f003 	tbb	[pc, r3]
   12f0c:	120a0a03 	.word	0x120a0a03
   12f10:	12          	.byte	0x12
   12f11:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
   12f12:	6822      	ldr	r2, [r4, #0]
   12f14:	920c      	str	r2, [sp, #48]	; 0x30
   12f16:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
   12f18:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
   12f1a:	930d      	str	r3, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
   12f1c:	4604      	mov	r4, r0
   12f1e:	e7c9      	b.n	12eb4 <cbvprintf+0x400>
					(uint_value_type)va_arg(ap,
   12f20:	1de0      	adds	r0, r4, #7
   12f22:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
   12f26:	e8f0 2302 	ldrd	r2, r3, [r0], #8
   12f2a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				break;
   12f2e:	e7f5      	b.n	12f1c <cbvprintf+0x468>
					(uint_value_type)va_arg(ap, size_t);
   12f30:	f854 3b04 	ldr.w	r3, [r4], #4
   12f34:	930c      	str	r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
   12f36:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
   12f38:	f04f 0300 	mov.w	r3, #0
   12f3c:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
   12f3e:	d0d3      	beq.n	12ee8 <cbvprintf+0x434>
			} else if (length_mod == LENGTH_H) {
   12f40:	2902      	cmp	r1, #2
   12f42:	d1b7      	bne.n	12eb4 <cbvprintf+0x400>
				value->uint = (unsigned short)value->uint;
   12f44:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   12f48:	e7d0      	b.n	12eec <cbvprintf+0x438>
		} else if (specifier_cat == SPECIFIER_FP) {
   12f4a:	2b04      	cmp	r3, #4
   12f4c:	d109      	bne.n	12f62 <cbvprintf+0x4ae>
					(sint_value_type)va_arg(ap, long long);
   12f4e:	1de3      	adds	r3, r4, #7
   12f50:	f023 0307 	bic.w	r3, r3, #7
   12f54:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
   12f58:	e9d3 2300 	ldrd	r2, r3, [r3]
   12f5c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   12f60:	e7a8      	b.n	12eb4 <cbvprintf+0x400>
		} else if (specifier_cat == SPECIFIER_PTR) {
   12f62:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
   12f64:	bf04      	itt	eq
   12f66:	f854 3b04 	ldreq.w	r3, [r4], #4
   12f6a:	930c      	streq	r3, [sp, #48]	; 0x30
   12f6c:	e7a2      	b.n	12eb4 <cbvprintf+0x400>
		switch (conv->specifier) {
   12f6e:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
   12f72:	2878      	cmp	r0, #120	; 0x78
   12f74:	d8ad      	bhi.n	12ed2 <cbvprintf+0x41e>
   12f76:	2862      	cmp	r0, #98	; 0x62
   12f78:	d820      	bhi.n	12fbc <cbvprintf+0x508>
   12f7a:	2825      	cmp	r0, #37	; 0x25
   12f7c:	f43f adac 	beq.w	12ad8 <cbvprintf+0x24>
   12f80:	2858      	cmp	r0, #88	; 0x58
   12f82:	d1a6      	bne.n	12ed2 <cbvprintf+0x41e>
			bps = encode_uint(value->uint, conv, buf, bpe);
   12f84:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
   12f88:	9300      	str	r3, [sp, #0]
   12f8a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   12f8e:	ab06      	add	r3, sp, #24
   12f90:	aa0e      	add	r2, sp, #56	; 0x38
   12f92:	f7ff fd43 	bl	12a1c <encode_uint>
   12f96:	4681      	mov	r9, r0
			if (precision >= 0) {
   12f98:	2f00      	cmp	r7, #0
   12f9a:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   12f9e:	db0b      	blt.n	12fb8 <cbvprintf+0x504>
				conv->flag_zero = false;
   12fa0:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
				size_t len = bpe - bps;
   12fa4:	eba0 0309 	sub.w	r3, r0, r9
				conv->flag_zero = false;
   12fa8:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   12fac:	429f      	cmp	r7, r3
				conv->flag_zero = false;
   12fae:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
   12fb2:	d901      	bls.n	12fb8 <cbvprintf+0x504>
					conv->pad0_value = precision - (int)len;
   12fb4:	1afb      	subs	r3, r7, r3
   12fb6:	930f      	str	r3, [sp, #60]	; 0x3c
		const char *bpe = buf + sizeof(buf);
   12fb8:	4607      	mov	r7, r0
   12fba:	e03c      	b.n	13036 <cbvprintf+0x582>
		switch (conv->specifier) {
   12fbc:	3863      	subs	r0, #99	; 0x63
   12fbe:	2815      	cmp	r0, #21
   12fc0:	d887      	bhi.n	12ed2 <cbvprintf+0x41e>
   12fc2:	a201      	add	r2, pc, #4	; (adr r2, 12fc8 <cbvprintf+0x514>)
   12fc4:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
   12fc8:	00013047 	.word	0x00013047
   12fcc:	000130a9 	.word	0x000130a9
   12fd0:	00012ed3 	.word	0x00012ed3
   12fd4:	00012ed3 	.word	0x00012ed3
   12fd8:	00012ed3 	.word	0x00012ed3
   12fdc:	00012ed3 	.word	0x00012ed3
   12fe0:	000130a9 	.word	0x000130a9
   12fe4:	00012ed3 	.word	0x00012ed3
   12fe8:	00012ed3 	.word	0x00012ed3
   12fec:	00012ed3 	.word	0x00012ed3
   12ff0:	00012ed3 	.word	0x00012ed3
   12ff4:	00013103 	.word	0x00013103
   12ff8:	000130d1 	.word	0x000130d1
   12ffc:	000130d5 	.word	0x000130d5
   13000:	00012ed3 	.word	0x00012ed3
   13004:	00012ed3 	.word	0x00012ed3
   13008:	00013021 	.word	0x00013021
   1300c:	00012ed3 	.word	0x00012ed3
   13010:	000130d1 	.word	0x000130d1
   13014:	00012ed3 	.word	0x00012ed3
   13018:	00012ed3 	.word	0x00012ed3
   1301c:	000130d1 	.word	0x000130d1
			if (precision >= 0) {
   13020:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
   13022:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
			if (precision >= 0) {
   13026:	db0a      	blt.n	1303e <cbvprintf+0x58a>
				len = strnlen(bps, precision);
   13028:	4639      	mov	r1, r7
   1302a:	4648      	mov	r0, r9
   1302c:	f014 fd64 	bl	27af8 <strnlen>
			bpe = bps + len;
   13030:	eb09 0700 	add.w	r7, r9, r0
		char sign = 0;
   13034:	2600      	movs	r6, #0
		if (bps == NULL) {
   13036:	f1b9 0f00 	cmp.w	r9, #0
   1303a:	d10c      	bne.n	13056 <cbvprintf+0x5a2>
   1303c:	e749      	b.n	12ed2 <cbvprintf+0x41e>
				len = strlen(bps);
   1303e:	4648      	mov	r0, r9
   13040:	f7f9 fec7 	bl	cdd2 <strlen>
   13044:	e7f4      	b.n	13030 <cbvprintf+0x57c>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   13046:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   13048:	f88d 3018 	strb.w	r3, [sp, #24]
			break;
   1304c:	2600      	movs	r6, #0
			bpe = buf + 1;
   1304e:	f10d 0719 	add.w	r7, sp, #25
			bps = buf;
   13052:	f10d 0918 	add.w	r9, sp, #24
		size_t nj_len = (bpe - bps);
   13056:	eba7 0309 	sub.w	r3, r7, r9
		if (sign != 0) {
   1305a:	b106      	cbz	r6, 1305e <cbvprintf+0x5aa>
			nj_len += 1U;
   1305c:	3301      	adds	r3, #1
		if (conv->altform_0c) {
   1305e:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
   13062:	06d0      	lsls	r0, r2, #27
   13064:	d566      	bpl.n	13134 <cbvprintf+0x680>
			nj_len += 2U;
   13066:	3302      	adds	r3, #2
		if (conv->pad_fp) {
   13068:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
   1306a:	990f      	ldr	r1, [sp, #60]	; 0x3c
			nj_len += conv->pad0_pre_exp;
   1306c:	bf48      	it	mi
   1306e:	9a10      	ldrmi	r2, [sp, #64]	; 0x40
		nj_len += conv->pad0_value;
   13070:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
   13072:	bf48      	it	mi
   13074:	189b      	addmi	r3, r3, r2
		if (width > 0) {
   13076:	f1b8 0f00 	cmp.w	r8, #0
   1307a:	dd73      	ble.n	13164 <cbvprintf+0x6b0>
			if (!conv->flag_dash) {
   1307c:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
			width -= (int)nj_len;
   13080:	eba8 0803 	sub.w	r8, r8, r3
			if (!conv->flag_dash) {
   13084:	f3c2 0380 	ubfx	r3, r2, #2, #1
   13088:	9303      	str	r3, [sp, #12]
   1308a:	0753      	lsls	r3, r2, #29
   1308c:	d46a      	bmi.n	13164 <cbvprintf+0x6b0>
				if (conv->flag_zero) {
   1308e:	0650      	lsls	r0, r2, #25
   13090:	d55e      	bpl.n	13150 <cbvprintf+0x69c>
					if (sign != 0) {
   13092:	b13e      	cbz	r6, 130a4 <cbvprintf+0x5f0>
						OUTC(sign);
   13094:	4659      	mov	r1, fp
   13096:	4630      	mov	r0, r6
   13098:	47d0      	blx	sl
   1309a:	2800      	cmp	r0, #0
   1309c:	db55      	blt.n	1314a <cbvprintf+0x696>
						sign = 0;
   1309e:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
   130a0:	3501      	adds	r5, #1
						sign = 0;
   130a2:	461e      	mov	r6, r3
					pad = '0';
   130a4:	2330      	movs	r3, #48	; 0x30
   130a6:	e054      	b.n	13152 <cbvprintf+0x69e>
			if (conv->flag_plus) {
   130a8:	071e      	lsls	r6, r3, #28
   130aa:	d40f      	bmi.n	130cc <cbvprintf+0x618>
				sign = ' ';
   130ac:	f013 0610 	ands.w	r6, r3, #16
   130b0:	bf18      	it	ne
   130b2:	2620      	movne	r6, #32
			sint = value->sint;
   130b4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
   130b8:	2b00      	cmp	r3, #0
   130ba:	f6bf af63 	bge.w	12f84 <cbvprintf+0x4d0>
				value->uint = (uint_value_type)-sint;
   130be:	4252      	negs	r2, r2
   130c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   130c4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				sign = '-';
   130c8:	262d      	movs	r6, #45	; 0x2d
   130ca:	e75b      	b.n	12f84 <cbvprintf+0x4d0>
				sign = '+';
   130cc:	262b      	movs	r6, #43	; 0x2b
   130ce:	e7f1      	b.n	130b4 <cbvprintf+0x600>
		switch (conv->specifier) {
   130d0:	2600      	movs	r6, #0
   130d2:	e757      	b.n	12f84 <cbvprintf+0x4d0>
			if (value->ptr != NULL) {
   130d4:	980c      	ldr	r0, [sp, #48]	; 0x30
   130d6:	b340      	cbz	r0, 1312a <cbvprintf+0x676>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   130d8:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
   130dc:	9300      	str	r3, [sp, #0]
   130de:	aa0e      	add	r2, sp, #56	; 0x38
   130e0:	ab06      	add	r3, sp, #24
   130e2:	2100      	movs	r1, #0
   130e4:	f7ff fc9a 	bl	12a1c <encode_uint>
				conv->altform_0c = true;
   130e8:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
   130ec:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   130f0:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   130f4:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
   130f8:	4681      	mov	r9, r0
				conv->altform_0c = true;
   130fa:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		char sign = 0;
   130fe:	2600      	movs	r6, #0
				goto prec_int_pad0;
   13100:	e74a      	b.n	12f98 <cbvprintf+0x4e4>
				store_count(conv, value->ptr, count);
   13102:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
   13104:	2907      	cmp	r1, #7
   13106:	f63f aee4 	bhi.w	12ed2 <cbvprintf+0x41e>
   1310a:	e8df f001 	tbb	[pc, r1]
   1310e:	040c      	.short	0x040c
   13110:	08080c06 	.word	0x08080c06
   13114:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
   13116:	701d      	strb	r5, [r3, #0]
		break;
   13118:	e6db      	b.n	12ed2 <cbvprintf+0x41e>
		*(short *)dp = (short)count;
   1311a:	801d      	strh	r5, [r3, #0]
		break;
   1311c:	e6d9      	b.n	12ed2 <cbvprintf+0x41e>
		*(intmax_t *)dp = (intmax_t)count;
   1311e:	17ea      	asrs	r2, r5, #31
   13120:	e9c3 5200 	strd	r5, r2, [r3]
		break;
   13124:	e6d5      	b.n	12ed2 <cbvprintf+0x41e>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   13126:	601d      	str	r5, [r3, #0]
		break;
   13128:	e6d3      	b.n	12ed2 <cbvprintf+0x41e>
			bpe = bps + 5;
   1312a:	4f2e      	ldr	r7, [pc, #184]	; (131e4 <cbvprintf+0x730>)
   1312c:	4606      	mov	r6, r0
			bps = "(nil)";
   1312e:	f1a7 0905 	sub.w	r9, r7, #5
   13132:	e790      	b.n	13056 <cbvprintf+0x5a2>
		} else if (conv->altform_0) {
   13134:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
   13136:	bf48      	it	mi
   13138:	3301      	addmi	r3, #1
   1313a:	e795      	b.n	13068 <cbvprintf+0x5b4>
					OUTC(pad);
   1313c:	4618      	mov	r0, r3
   1313e:	4659      	mov	r1, fp
   13140:	9303      	str	r3, [sp, #12]
   13142:	47d0      	blx	sl
   13144:	2800      	cmp	r0, #0
   13146:	9b03      	ldr	r3, [sp, #12]
   13148:	da04      	bge.n	13154 <cbvprintf+0x6a0>
#undef OUTS
#undef OUTC
}
   1314a:	b013      	add	sp, #76	; 0x4c
   1314c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   13150:	2320      	movs	r3, #32
   13152:	4445      	add	r5, r8
   13154:	4642      	mov	r2, r8
				while (width-- > 0) {
   13156:	2a00      	cmp	r2, #0
   13158:	eba5 0108 	sub.w	r1, r5, r8
   1315c:	f108 38ff 	add.w	r8, r8, #4294967295
   13160:	dcec      	bgt.n	1313c <cbvprintf+0x688>
   13162:	460d      	mov	r5, r1
		if (sign != 0) {
   13164:	b12e      	cbz	r6, 13172 <cbvprintf+0x6be>
			OUTC(sign);
   13166:	4659      	mov	r1, fp
   13168:	4630      	mov	r0, r6
   1316a:	47d0      	blx	sl
   1316c:	2800      	cmp	r0, #0
   1316e:	dbec      	blt.n	1314a <cbvprintf+0x696>
   13170:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   13172:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   13176:	06d9      	lsls	r1, r3, #27
   13178:	d401      	bmi.n	1317e <cbvprintf+0x6ca>
   1317a:	071a      	lsls	r2, r3, #28
   1317c:	d505      	bpl.n	1318a <cbvprintf+0x6d6>
				OUTC('0');
   1317e:	4659      	mov	r1, fp
   13180:	2030      	movs	r0, #48	; 0x30
   13182:	47d0      	blx	sl
   13184:	2800      	cmp	r0, #0
   13186:	dbe0      	blt.n	1314a <cbvprintf+0x696>
   13188:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   1318a:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   1318e:	06db      	lsls	r3, r3, #27
   13190:	d506      	bpl.n	131a0 <cbvprintf+0x6ec>
				OUTC(conv->specifier);
   13192:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
   13196:	4659      	mov	r1, fp
   13198:	47d0      	blx	sl
   1319a:	2800      	cmp	r0, #0
   1319c:	dbd5      	blt.n	1314a <cbvprintf+0x696>
   1319e:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   131a0:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   131a2:	442e      	add	r6, r5
   131a4:	1b73      	subs	r3, r6, r5
   131a6:	2b00      	cmp	r3, #0
   131a8:	dc15      	bgt.n	131d6 <cbvprintf+0x722>
			OUTS(bps, bpe);
   131aa:	463b      	mov	r3, r7
   131ac:	464a      	mov	r2, r9
   131ae:	4659      	mov	r1, fp
   131b0:	4650      	mov	r0, sl
   131b2:	f011 f8cf 	bl	24354 <outs>
   131b6:	2800      	cmp	r0, #0
   131b8:	dbc7      	blt.n	1314a <cbvprintf+0x696>
   131ba:	4405      	add	r5, r0
		while (width > 0) {
   131bc:	44a8      	add	r8, r5
   131be:	eba8 0305 	sub.w	r3, r8, r5
   131c2:	2b00      	cmp	r3, #0
   131c4:	f77f ae85 	ble.w	12ed2 <cbvprintf+0x41e>
			OUTC(' ');
   131c8:	4659      	mov	r1, fp
   131ca:	2020      	movs	r0, #32
   131cc:	47d0      	blx	sl
   131ce:	2800      	cmp	r0, #0
   131d0:	dbbb      	blt.n	1314a <cbvprintf+0x696>
   131d2:	3501      	adds	r5, #1
			--width;
   131d4:	e7f3      	b.n	131be <cbvprintf+0x70a>
				OUTC('0');
   131d6:	4659      	mov	r1, fp
   131d8:	2030      	movs	r0, #48	; 0x30
   131da:	47d0      	blx	sl
   131dc:	2800      	cmp	r0, #0
   131de:	dbb4      	blt.n	1314a <cbvprintf+0x696>
   131e0:	3501      	adds	r5, #1
   131e2:	e7df      	b.n	131a4 <cbvprintf+0x6f0>
   131e4:	00028a76 	.word	0x00028a76

000131e8 <z_log_minimal_hexdump_print>:
	}
	printk("\n");
}

void z_log_minimal_hexdump_print(int level, const void *data, size_t size)
{
   131e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   131ec:	4607      	mov	r7, r0
   131ee:	4688      	mov	r8, r1
   131f0:	4616      	mov	r6, r2
	const char *data_buffer = (const char *)data;
	while (size > 0U) {
   131f2:	4614      	mov	r4, r2
   131f4:	eb08 0506 	add.w	r5, r8, r6
   131f8:	1b2d      	subs	r5, r5, r4
   131fa:	b90c      	cbnz	r4, 13200 <z_log_minimal_hexdump_print+0x18>
		}

		size -= HEXDUMP_BYTES_IN_LINE;
		data_buffer += HEXDUMP_BYTES_IN_LINE;
	}
}
   131fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	z_log_minimal_printk("\n"); \
} while (false)

static inline char z_log_minimal_level_to_char(int level)
{
	switch (level) {
   13200:	1e7b      	subs	r3, r7, #1
   13202:	2b03      	cmp	r3, #3
   13204:	bf98      	it	ls
   13206:	4a22      	ldrls	r2, [pc, #136]	; (13290 <z_log_minimal_hexdump_print+0xa8>)
		printk("%c: ", z_log_minimal_level_to_char(level));
   13208:	4822      	ldr	r0, [pc, #136]	; (13294 <z_log_minimal_hexdump_print+0xac>)
   1320a:	bf98      	it	ls
   1320c:	5cd1      	ldrbls	r1, [r2, r3]
			printk("   ");
   1320e:	f8df a088 	ldr.w	sl, [pc, #136]	; 13298 <z_log_minimal_hexdump_print+0xb0>
			printk("%02x ", (unsigned char)data[i] & 0xFFu);
   13212:	f8df b088 	ldr.w	fp, [pc, #136]	; 1329c <z_log_minimal_hexdump_print+0xb4>
   13216:	bf88      	it	hi
   13218:	213f      	movhi	r1, #63	; 0x3f
		printk("%c: ", z_log_minimal_level_to_char(level));
   1321a:	f010 ff0d 	bl	24038 <printk>
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1321e:	f04f 0900 	mov.w	r9, #0
		if (i < length) {
   13222:	454c      	cmp	r4, r9
   13224:	d92b      	bls.n	1327e <z_log_minimal_hexdump_print+0x96>
			printk("%02x ", (unsigned char)data[i] & 0xFFu);
   13226:	f815 1009 	ldrb.w	r1, [r5, r9]
   1322a:	4658      	mov	r0, fp
   1322c:	f010 ff04 	bl	24038 <printk>
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
   13230:	f109 0901 	add.w	r9, r9, #1
   13234:	f1b9 0f08 	cmp.w	r9, #8
   13238:	d1f3      	bne.n	13222 <z_log_minimal_hexdump_print+0x3a>
	printk("|");
   1323a:	4819      	ldr	r0, [pc, #100]	; (132a0 <z_log_minimal_hexdump_print+0xb8>)
			printk(" ");
   1323c:	f8df a064 	ldr.w	sl, [pc, #100]	; 132a4 <z_log_minimal_hexdump_print+0xbc>
			printk("%c", isprint((int)c) != 0 ? c : '.');
   13240:	f8df b064 	ldr.w	fp, [pc, #100]	; 132a8 <z_log_minimal_hexdump_print+0xc0>
	printk("|");
   13244:	f010 fef8 	bl	24038 <printk>
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
   13248:	f04f 0900 	mov.w	r9, #0
		if (i < length) {
   1324c:	454c      	cmp	r4, r9
   1324e:	d91a      	bls.n	13286 <z_log_minimal_hexdump_print+0x9e>
			unsigned char c = data[i];
   13250:	f815 1009 	ldrb.w	r1, [r5, r9]
			printk("%c", isprint((int)c) != 0 ? c : '.');
   13254:	4b15      	ldr	r3, [pc, #84]	; (132ac <z_log_minimal_hexdump_print+0xc4>)
   13256:	5cca      	ldrb	r2, [r1, r3]
   13258:	f012 0f97 	tst.w	r2, #151	; 0x97
   1325c:	bf08      	it	eq
   1325e:	212e      	moveq	r1, #46	; 0x2e
   13260:	4658      	mov	r0, fp
   13262:	f010 fee9 	bl	24038 <printk>
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
   13266:	f109 0901 	add.w	r9, r9, #1
   1326a:	f1b9 0f08 	cmp.w	r9, #8
   1326e:	d1ed      	bne.n	1324c <z_log_minimal_hexdump_print+0x64>
	printk("\n");
   13270:	480f      	ldr	r0, [pc, #60]	; (132b0 <z_log_minimal_hexdump_print+0xc8>)
   13272:	f010 fee1 	bl	24038 <printk>
		if (size < HEXDUMP_BYTES_IN_LINE) {
   13276:	2c07      	cmp	r4, #7
   13278:	d9c0      	bls.n	131fc <z_log_minimal_hexdump_print+0x14>
		size -= HEXDUMP_BYTES_IN_LINE;
   1327a:	3c08      	subs	r4, #8
		data_buffer += HEXDUMP_BYTES_IN_LINE;
   1327c:	e7ba      	b.n	131f4 <z_log_minimal_hexdump_print+0xc>
			printk("   ");
   1327e:	4650      	mov	r0, sl
   13280:	f010 feda 	bl	24038 <printk>
   13284:	e7d4      	b.n	13230 <z_log_minimal_hexdump_print+0x48>
			printk(" ");
   13286:	4650      	mov	r0, sl
   13288:	f010 fed6 	bl	24038 <printk>
   1328c:	e7eb      	b.n	13266 <z_log_minimal_hexdump_print+0x7e>
   1328e:	bf00      	nop
   13290:	00028a8b 	.word	0x00028a8b
   13294:	00028a77 	.word	0x00028a77
   13298:	00028a82 	.word	0x00028a82
   1329c:	00028a7c 	.word	0x00028a7c
   132a0:	00028a86 	.word	0x00028a86
   132a4:	00028a84 	.word	0x00028a84
   132a8:	00028a88 	.word	0x00028a88
   132ac:	0002b792 	.word	0x0002b792
   132b0:	0002b51b 	.word	0x0002b51b

000132b4 <nvs_recover_last_ate>:
 *
 * addr should point to the faulty closing ate and will be updated to the last
 * valid ate. If no valid ate is found it will be left untouched.
 */
static int nvs_recover_last_ate(struct nvs_fs *fs, uint32_t *addr)
{
   132b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   132b8:	460f      	mov	r7, r1
   132ba:	4606      	mov	r6, r0
	int rc;

	LOG_DBG("Recovering last ate from sector %d",
		(*addr >> ADDR_SECT_SHIFT));

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   132bc:	2108      	movs	r1, #8
   132be:	6ac0      	ldr	r0, [r0, #44]	; 0x2c

	*addr -= ate_size;
	ate_end_addr = *addr;
	data_end_addr = *addr & ADDR_SECT_MASK;
   132c0:	f8df 9050 	ldr.w	r9, [pc, #80]	; 13314 <nvs_recover_last_ate+0x60>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   132c4:	f011 f90a 	bl	244dc <nvs_al_size.isra.0>
	*addr -= ate_size;
   132c8:	683c      	ldr	r4, [r7, #0]
   132ca:	1a24      	subs	r4, r4, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   132cc:	4680      	mov	r8, r0
	*addr -= ate_size;
   132ce:	603c      	str	r4, [r7, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
   132d0:	ea04 0509 	and.w	r5, r4, r9
	while (ate_end_addr > data_end_addr) {
   132d4:	42ac      	cmp	r4, r5
   132d6:	d803      	bhi.n	132e0 <nvs_recover_last_ate+0x2c>
			*addr = ate_end_addr;
		}
		ate_end_addr -= ate_size;
	}

	return 0;
   132d8:	2000      	movs	r0, #0
}
   132da:	b003      	add	sp, #12
   132dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   132e0:	2308      	movs	r3, #8
   132e2:	466a      	mov	r2, sp
   132e4:	4621      	mov	r1, r4
   132e6:	4630      	mov	r0, r6
   132e8:	f011 f86c 	bl	243c4 <nvs_flash_rd>
		if (rc) {
   132ec:	2800      	cmp	r0, #0
   132ee:	d1f4      	bne.n	132da <nvs_recover_last_ate+0x26>
		if (nvs_ate_valid(fs, &end_ate)) {
   132f0:	4669      	mov	r1, sp
   132f2:	4630      	mov	r0, r6
   132f4:	f011 f8fc 	bl	244f0 <nvs_ate_valid>
   132f8:	b140      	cbz	r0, 1330c <nvs_recover_last_ate+0x58>
			data_end_addr += end_ate.offset + end_ate.len;
   132fa:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   132fe:	f8bd 2004 	ldrh.w	r2, [sp, #4]
			*addr = ate_end_addr;
   13302:	603c      	str	r4, [r7, #0]
			data_end_addr &= ADDR_SECT_MASK;
   13304:	ea05 0509 	and.w	r5, r5, r9
			data_end_addr += end_ate.offset + end_ate.len;
   13308:	4413      	add	r3, r2
   1330a:	441d      	add	r5, r3
		ate_end_addr -= ate_size;
   1330c:	eba4 0408 	sub.w	r4, r4, r8
   13310:	e7e0      	b.n	132d4 <nvs_recover_last_ate+0x20>
   13312:	bf00      	nop
   13314:	ffff0000 	.word	0xffff0000

00013318 <nvs_mount>:

	return 0;
}

int nvs_mount(struct nvs_fs *fs)
{
   13318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1331c:	4604      	mov	r4, r0
   1331e:	b089      	sub	sp, #36	; 0x24

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
   13320:	f100 0714 	add.w	r7, r0, #20
	return z_impl_k_mutex_init(mutex);
   13324:	4638      	mov	r0, r7
   13326:	f014 f9c3 	bl	276b0 <z_impl_k_mutex_init>

	fs->flash_parameters = flash_get_parameters(fs->flash_device);
   1332a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
   1332c:	6883      	ldr	r3, [r0, #8]
   1332e:	68db      	ldr	r3, [r3, #12]
   13330:	4798      	blx	r3
   13332:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
   13334:	b948      	cbnz	r0, 1334a <nvs_mount+0x32>
		LOG_ERR("Could not obtain flash parameters");
   13336:	48a8      	ldr	r0, [pc, #672]	; (135d8 <nvs_mount+0x2c0>)
   13338:	2145      	movs	r1, #69	; 0x45
		return -EINVAL;
	}

	/* check the number of sectors, it should be at least 2 */
	if (fs->sector_count < 2) {
		LOG_ERR("Configuration error - sector count");
   1333a:	f011 f836 	bl	243aa <z_log_minimal_printk>
		return -EINVAL;
   1333e:	f06f 0515 	mvn.w	r5, #21
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
   13342:	4628      	mov	r0, r5
   13344:	b009      	add	sp, #36	; 0x24
   13346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	write_block_size = flash_get_write_block_size(fs->flash_device);
   1334a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->get_parameters(dev)->write_block_size;
   1334c:	6883      	ldr	r3, [r0, #8]
   1334e:	68db      	ldr	r3, [r3, #12]
   13350:	4798      	blx	r3
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
   13352:	6803      	ldr	r3, [r0, #0]
   13354:	3b01      	subs	r3, #1
   13356:	2b1f      	cmp	r3, #31
   13358:	d902      	bls.n	13360 <nvs_mount+0x48>
		LOG_ERR("Unsupported write block size");
   1335a:	48a0      	ldr	r0, [pc, #640]	; (135dc <nvs_mount+0x2c4>)
   1335c:	2145      	movs	r1, #69	; 0x45
   1335e:	e7ec      	b.n	1333a <nvs_mount+0x22>
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
   13360:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   13362:	6821      	ldr	r1, [r4, #0]
		union { uintptr_t x; struct flash_pages_info * val; } parm2 = { .val = info };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
   13364:	aa05      	add	r2, sp, #20
   13366:	f013 feb8 	bl	270da <z_impl_flash_get_page_info_by_offs>
	if (rc) {
   1336a:	b110      	cbz	r0, 13372 <nvs_mount+0x5a>
		LOG_ERR("Unable to get page info");
   1336c:	489c      	ldr	r0, [pc, #624]	; (135e0 <nvs_mount+0x2c8>)
   1336e:	2145      	movs	r1, #69	; 0x45
   13370:	e7e3      	b.n	1333a <nvs_mount+0x22>
	if (!fs->sector_size || fs->sector_size % info.size) {
   13372:	89a5      	ldrh	r5, [r4, #12]
   13374:	b12d      	cbz	r5, 13382 <nvs_mount+0x6a>
   13376:	9b06      	ldr	r3, [sp, #24]
   13378:	fbb5 f2f3 	udiv	r2, r5, r3
   1337c:	fb03 5512 	mls	r5, r3, r2, r5
   13380:	b115      	cbz	r5, 13388 <nvs_mount+0x70>
		LOG_ERR("Invalid sector size");
   13382:	4898      	ldr	r0, [pc, #608]	; (135e4 <nvs_mount+0x2cc>)
   13384:	2145      	movs	r1, #69	; 0x45
   13386:	e7d8      	b.n	1333a <nvs_mount+0x22>
	if (fs->sector_count < 2) {
   13388:	89e3      	ldrh	r3, [r4, #14]
   1338a:	2b01      	cmp	r3, #1
   1338c:	d802      	bhi.n	13394 <nvs_mount+0x7c>
		LOG_ERR("Configuration error - sector count");
   1338e:	4896      	ldr	r0, [pc, #600]	; (135e8 <nvs_mount+0x2d0>)
   13390:	2145      	movs	r1, #69	; 0x45
   13392:	e7d2      	b.n	1333a <nvs_mount+0x22>
	uint8_t erase_value = fs->flash_parameters->erase_value;
   13394:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	uint32_t addr = 0U;
   13396:	9500      	str	r5, [sp, #0]
	uint8_t erase_value = fs->flash_parameters->erase_value;
   13398:	f893 8004 	ldrb.w	r8, [r3, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   1339c:	f04f 33ff 	mov.w	r3, #4294967295
   133a0:	f04f 32ff 	mov.w	r2, #4294967295
   133a4:	4638      	mov	r0, r7
   133a6:	f00d f9db 	bl	20760 <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   133aa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   133ac:	2108      	movs	r1, #8
   133ae:	f011 f895 	bl	244dc <nvs_al_size.isra.0>
	uint16_t i, closed_sectors = 0;
   133b2:	46a9      	mov	r9, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   133b4:	4606      	mov	r6, r0
	for (i = 0; i < fs->sector_count; i++) {
   133b6:	89e3      	ldrh	r3, [r4, #14]
   133b8:	fa1f fa85 	uxth.w	sl, r5
   133bc:	4553      	cmp	r3, sl
   133be:	d845      	bhi.n	1344c <nvs_mount+0x134>
	if (closed_sectors == fs->sector_count) {
   133c0:	89e3      	ldrh	r3, [r4, #14]
   133c2:	454b      	cmp	r3, r9
   133c4:	f000 80d7 	beq.w	13576 <nvs_mount+0x25e>
	if (i == fs->sector_count) {
   133c8:	4553      	cmp	r3, sl
   133ca:	d10b      	bne.n	133e4 <nvs_mount+0xcc>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
   133cc:	9900      	ldr	r1, [sp, #0]
   133ce:	2308      	movs	r3, #8
   133d0:	4642      	mov	r2, r8
   133d2:	1b89      	subs	r1, r1, r6
   133d4:	4620      	mov	r0, r4
   133d6:	f011 f82d 	bl	24434 <nvs_flash_cmp_const>
		if (!rc) {
   133da:	b918      	cbnz	r0, 133e4 <nvs_mount+0xcc>
			nvs_sector_advance(fs, &addr);
   133dc:	89e0      	ldrh	r0, [r4, #14]
   133de:	4669      	mov	r1, sp
   133e0:	f011 f871 	bl	244c6 <nvs_sector_advance.isra.0>
	rc = nvs_recover_last_ate(fs, &addr);
   133e4:	4669      	mov	r1, sp
   133e6:	4620      	mov	r0, r4
   133e8:	f7ff ff64 	bl	132b4 <nvs_recover_last_ate>
	if (rc) {
   133ec:	4605      	mov	r5, r0
   133ee:	2800      	cmp	r0, #0
   133f0:	f040 80c3 	bne.w	1357a <nvs_mount+0x262>
	fs->ate_wra = addr;
   133f4:	9b00      	ldr	r3, [sp, #0]
	fs->data_wra = addr & ADDR_SECT_MASK;
   133f6:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 135ec <nvs_mount+0x2d4>
	fs->ate_wra = addr;
   133fa:	6063      	str	r3, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
   133fc:	ea03 0309 	and.w	r3, r3, r9
   13400:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra >= fs->data_wra) {
   13402:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   13406:	4299      	cmp	r1, r3
   13408:	d30e      	bcc.n	13428 <nvs_mount+0x110>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   1340a:	2308      	movs	r3, #8
   1340c:	aa01      	add	r2, sp, #4
   1340e:	4620      	mov	r0, r4
   13410:	f010 ffd8 	bl	243c4 <nvs_flash_rd>
		if (rc) {
   13414:	b9c0      	cbnz	r0, 13448 <nvs_mount+0x130>
   13416:	ab01      	add	r3, sp, #4
		if (data8[i] != value) {
   13418:	f813 2b01 	ldrb.w	r2, [r3], #1
   1341c:	4590      	cmp	r8, r2
   1341e:	f040 80f1 	bne.w	13604 <nvs_mount+0x2ec>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   13422:	3001      	adds	r0, #1
   13424:	2808      	cmp	r0, #8
   13426:	d1f7      	bne.n	13418 <nvs_mount+0x100>
	addr = fs->ate_wra & ADDR_SECT_MASK;
   13428:	6863      	ldr	r3, [r4, #4]
	nvs_sector_advance(fs, &addr);
   1342a:	89e0      	ldrh	r0, [r4, #14]
	addr = fs->ate_wra & ADDR_SECT_MASK;
   1342c:	0c1b      	lsrs	r3, r3, #16
   1342e:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &addr);
   13430:	4669      	mov	r1, sp
	addr = fs->ate_wra & ADDR_SECT_MASK;
   13432:	9300      	str	r3, [sp, #0]
	nvs_sector_advance(fs, &addr);
   13434:	f011 f847 	bl	244c6 <nvs_sector_advance.isra.0>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
   13438:	89a3      	ldrh	r3, [r4, #12]
   1343a:	9900      	ldr	r1, [sp, #0]
   1343c:	4642      	mov	r2, r8
   1343e:	4620      	mov	r0, r4
   13440:	f010 fff8 	bl	24434 <nvs_flash_cmp_const>
	if (rc < 0) {
   13444:	2800      	cmp	r0, #0
   13446:	da26      	bge.n	13496 <nvs_mount+0x17e>
   13448:	4605      	mov	r5, r0
   1344a:	e096      	b.n	1357a <nvs_mount+0x262>
		       (uint16_t)(fs->sector_size - ate_size);
   1344c:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
   1344e:	042b      	lsls	r3, r5, #16
		       (uint16_t)(fs->sector_size - ate_size);
   13450:	1b89      	subs	r1, r1, r6
		addr = (i << ADDR_SECT_SHIFT) +
   13452:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   13456:	4642      	mov	r2, r8
   13458:	2308      	movs	r3, #8
   1345a:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
   1345c:	9100      	str	r1, [sp, #0]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   1345e:	f010 ffe9 	bl	24434 <nvs_flash_cmp_const>
		if (rc) {
   13462:	b178      	cbz	r0, 13484 <nvs_mount+0x16c>
			nvs_sector_advance(fs, &addr);
   13464:	89e0      	ldrh	r0, [r4, #14]
   13466:	4669      	mov	r1, sp
   13468:	f011 f82d 	bl	244c6 <nvs_sector_advance.isra.0>
			closed_sectors++;
   1346c:	f109 0901 	add.w	r9, r9, #1
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   13470:	9900      	ldr	r1, [sp, #0]
   13472:	2308      	movs	r3, #8
   13474:	4642      	mov	r2, r8
   13476:	4620      	mov	r0, r4
			closed_sectors++;
   13478:	fa1f f989 	uxth.w	r9, r9
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   1347c:	f010 ffda 	bl	24434 <nvs_flash_cmp_const>
			if (!rc) {
   13480:	2800      	cmp	r0, #0
   13482:	d09d      	beq.n	133c0 <nvs_mount+0xa8>
	for (i = 0; i < fs->sector_count; i++) {
   13484:	3501      	adds	r5, #1
   13486:	e796      	b.n	133b6 <nvs_mount+0x9e>
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   13488:	f1ba 0f00 	cmp.w	sl, #0
   1348c:	f000 80d2 	beq.w	13634 <nvs_mount+0x31c>
				rc = -ESPIPE;
   13490:	f06f 051c 	mvn.w	r5, #28
   13494:	e071      	b.n	1357a <nvs_mount+0x262>
	if (rc) {
   13496:	d049      	beq.n	1352c <nvs_mount+0x214>
		addr = fs->ate_wra + ate_size;
   13498:	6863      	ldr	r3, [r4, #4]
   1349a:	4433      	add	r3, r6
   1349c:	9300      	str	r3, [sp, #0]
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
   1349e:	f64f 78ff 	movw	r8, #65535	; 0xffff
   134a2:	9900      	ldr	r1, [sp, #0]
   134a4:	89a3      	ldrh	r3, [r4, #12]
   134a6:	b28a      	uxth	r2, r1
   134a8:	1b9b      	subs	r3, r3, r6
   134aa:	429a      	cmp	r2, r3
   134ac:	d319      	bcc.n	134e2 <nvs_mount+0x1ca>
		LOG_INF("No GC Done marker found: restarting gc");
   134ae:	4850      	ldr	r0, [pc, #320]	; (135f0 <nvs_mount+0x2d8>)
   134b0:	2149      	movs	r1, #73	; 0x49
   134b2:	f010 ff7a 	bl	243aa <z_log_minimal_printk>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   134b6:	6861      	ldr	r1, [r4, #4]
   134b8:	4620      	mov	r0, r4
   134ba:	f010 ffe1 	bl	24480 <nvs_flash_erase_sector>
		if (rc) {
   134be:	2800      	cmp	r0, #0
   134c0:	d1c2      	bne.n	13448 <nvs_mount+0x130>
		fs->ate_wra &= ADDR_SECT_MASK;
   134c2:	6863      	ldr	r3, [r4, #4]
   134c4:	4a49      	ldr	r2, [pc, #292]	; (135ec <nvs_mount+0x2d4>)
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   134c6:	89a1      	ldrh	r1, [r4, #12]
		fs->ate_wra &= ADDR_SECT_MASK;
   134c8:	4013      	ands	r3, r2
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   134ca:	440b      	add	r3, r1
   134cc:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
   134d0:	6063      	str	r3, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
   134d2:	4013      	ands	r3, r2
   134d4:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   134d6:	4620      	mov	r0, r4
   134d8:	f011 f8ff 	bl	246da <nvs_gc>
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   134dc:	2800      	cmp	r0, #0
   134de:	d040      	beq.n	13562 <nvs_mount+0x24a>
   134e0:	e7b2      	b.n	13448 <nvs_mount+0x130>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   134e2:	2308      	movs	r3, #8
   134e4:	aa03      	add	r2, sp, #12
   134e6:	4620      	mov	r0, r4
   134e8:	f010 ff6c 	bl	243c4 <nvs_flash_rd>
			if (rc) {
   134ec:	2800      	cmp	r0, #0
   134ee:	d1ab      	bne.n	13448 <nvs_mount+0x130>
			if (nvs_ate_valid(fs, &gc_done_ate) &&
   134f0:	a903      	add	r1, sp, #12
   134f2:	4620      	mov	r0, r4
   134f4:	f010 fffc 	bl	244f0 <nvs_ate_valid>
   134f8:	b138      	cbz	r0, 1350a <nvs_mount+0x1f2>
   134fa:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   134fe:	4543      	cmp	r3, r8
   13500:	d103      	bne.n	1350a <nvs_mount+0x1f2>
			    (gc_done_ate.id == 0xffff) &&
   13502:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   13506:	2b00      	cmp	r3, #0
   13508:	d054      	beq.n	135b4 <nvs_mount+0x29c>
			addr += ate_size;
   1350a:	9b00      	ldr	r3, [sp, #0]
   1350c:	4433      	add	r3, r6
   1350e:	9300      	str	r3, [sp, #0]
   13510:	e7c7      	b.n	134a2 <nvs_mount+0x18a>
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
   13512:	1a5b      	subs	r3, r3, r1
   13514:	4642      	mov	r2, r8
   13516:	4620      	mov	r0, r4
   13518:	f010 ff8c 	bl	24434 <nvs_flash_cmp_const>
		if (rc < 0) {
   1351c:	2800      	cmp	r0, #0
   1351e:	db93      	blt.n	13448 <nvs_mount+0x130>
		if (!rc) {
   13520:	d008      	beq.n	13534 <nvs_mount+0x21c>
		fs->data_wra += fs->flash_parameters->write_block_size;
   13522:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   13524:	68a3      	ldr	r3, [r4, #8]
   13526:	6812      	ldr	r2, [r2, #0]
   13528:	4413      	add	r3, r2
   1352a:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra > fs->data_wra) {
   1352c:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   13530:	428b      	cmp	r3, r1
   13532:	d8ee      	bhi.n	13512 <nvs_mount+0x1fa>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   13534:	6861      	ldr	r1, [r4, #4]
   13536:	89a3      	ldrh	r3, [r4, #12]
   13538:	eb01 0246 	add.w	r2, r1, r6, lsl #1
   1353c:	429a      	cmp	r2, r3
   1353e:	d1cd      	bne.n	134dc <nvs_mount+0x1c4>
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   13540:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 135ec <nvs_mount+0x2d4>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   13544:	68a3      	ldr	r3, [r4, #8]
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   13546:	ea01 0208 	and.w	r2, r1, r8
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   1354a:	4293      	cmp	r3, r2
   1354c:	d0c6      	beq.n	134dc <nvs_mount+0x1c4>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   1354e:	4620      	mov	r0, r4
   13550:	f010 ff96 	bl	24480 <nvs_flash_erase_sector>
		if (rc) {
   13554:	2800      	cmp	r0, #0
   13556:	f47f af77 	bne.w	13448 <nvs_mount+0x130>
		fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   1355a:	6863      	ldr	r3, [r4, #4]
   1355c:	ea03 0308 	and.w	r3, r3, r8
   13560:	60a3      	str	r3, [r4, #8]
		      (fs->sector_size - 2 * ate_size))) {
   13562:	89a0      	ldrh	r0, [r4, #12]
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   13564:	88a3      	ldrh	r3, [r4, #4]
		      (fs->sector_size - 2 * ate_size))) {
   13566:	eba0 0646 	sub.w	r6, r0, r6, lsl #1
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   1356a:	42b3      	cmp	r3, r6
   1356c:	d105      	bne.n	1357a <nvs_mount+0x262>
		rc = nvs_add_gc_done_ate(fs);
   1356e:	4620      	mov	r0, r4
   13570:	f011 f89e 	bl	246b0 <nvs_add_gc_done_ate>
   13574:	e768      	b.n	13448 <nvs_mount+0x130>
		rc = -EDEADLK;
   13576:	f06f 052c 	mvn.w	r5, #44	; 0x2c
	return z_impl_k_mutex_unlock(mutex);
   1357a:	4638      	mov	r0, r7
   1357c:	f00d f9c2 	bl	20904 <z_impl_k_mutex_unlock>
	if (rc) {
   13580:	2d00      	cmp	r5, #0
   13582:	f47f aede 	bne.w	13342 <nvs_mount+0x2a>
	fs->ready = true;
   13586:	2301      	movs	r3, #1
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
   13588:	89e2      	ldrh	r2, [r4, #14]
	fs->ready = true;
   1358a:	7423      	strb	r3, [r4, #16]
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
   1358c:	4819      	ldr	r0, [pc, #100]	; (135f4 <nvs_mount+0x2dc>)
   1358e:	89a3      	ldrh	r3, [r4, #12]
   13590:	2149      	movs	r1, #73	; 0x49
   13592:	f010 ff0a 	bl	243aa <z_log_minimal_printk>
	LOG_INF("alloc wra: %d, %x",
   13596:	6862      	ldr	r2, [r4, #4]
   13598:	4817      	ldr	r0, [pc, #92]	; (135f8 <nvs_mount+0x2e0>)
   1359a:	b293      	uxth	r3, r2
   1359c:	2149      	movs	r1, #73	; 0x49
   1359e:	0c12      	lsrs	r2, r2, #16
   135a0:	f010 ff03 	bl	243aa <z_log_minimal_printk>
	LOG_INF("data wra: %d, %x",
   135a4:	68a2      	ldr	r2, [r4, #8]
   135a6:	4815      	ldr	r0, [pc, #84]	; (135fc <nvs_mount+0x2e4>)
   135a8:	b293      	uxth	r3, r2
   135aa:	2149      	movs	r1, #73	; 0x49
   135ac:	0c12      	lsrs	r2, r2, #16
   135ae:	f010 fefc 	bl	243aa <z_log_minimal_printk>
	return 0;
   135b2:	e6c6      	b.n	13342 <nvs_mount+0x2a>
			LOG_INF("GC Done marker found");
   135b4:	4812      	ldr	r0, [pc, #72]	; (13600 <nvs_mount+0x2e8>)
   135b6:	2149      	movs	r1, #73	; 0x49
   135b8:	f010 fef7 	bl	243aa <z_log_minimal_printk>
			addr = fs->ate_wra & ADDR_SECT_MASK;
   135bc:	6863      	ldr	r3, [r4, #4]
			nvs_sector_advance(fs, &addr);
   135be:	89e0      	ldrh	r0, [r4, #14]
			addr = fs->ate_wra & ADDR_SECT_MASK;
   135c0:	0c1b      	lsrs	r3, r3, #16
   135c2:	041b      	lsls	r3, r3, #16
			nvs_sector_advance(fs, &addr);
   135c4:	4669      	mov	r1, sp
			addr = fs->ate_wra & ADDR_SECT_MASK;
   135c6:	9300      	str	r3, [sp, #0]
			nvs_sector_advance(fs, &addr);
   135c8:	f010 ff7d 	bl	244c6 <nvs_sector_advance.isra.0>
			rc = nvs_flash_erase_sector(fs, addr);
   135cc:	9900      	ldr	r1, [sp, #0]
   135ce:	4620      	mov	r0, r4
   135d0:	f010 ff56 	bl	24480 <nvs_flash_erase_sector>
			goto end;
   135d4:	e782      	b.n	134dc <nvs_mount+0x1c4>
   135d6:	bf00      	nop
   135d8:	00028aa8 	.word	0x00028aa8
   135dc:	00028acf 	.word	0x00028acf
   135e0:	00028af1 	.word	0x00028af1
   135e4:	00028b0e 	.word	0x00028b0e
   135e8:	00028b27 	.word	0x00028b27
   135ec:	ffff0000 	.word	0xffff0000
   135f0:	00028bb2 	.word	0x00028bb2
   135f4:	00028b4f 	.word	0x00028b4f
   135f8:	00028b6b 	.word	0x00028b6b
   135fc:	00028b82 	.word	0x00028b82
   13600:	00028b98 	.word	0x00028b98
		if (nvs_ate_valid(fs, &last_ate)) {
   13604:	a901      	add	r1, sp, #4
   13606:	4620      	mov	r0, r4
   13608:	f010 ff72 	bl	244f0 <nvs_ate_valid>
   1360c:	f8d4 b004 	ldr.w	fp, [r4, #4]
   13610:	b180      	cbz	r0, 13634 <nvs_mount+0x31c>
			fs->data_wra = addr & ADDR_SECT_MASK;
   13612:	9a00      	ldr	r2, [sp, #0]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   13614:	f8bd a008 	ldrh.w	sl, [sp, #8]
   13618:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   1361c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
			fs->data_wra = addr & ADDR_SECT_MASK;
   1361e:	ea02 0209 	and.w	r2, r2, r9
   13622:	60a2      	str	r2, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   13624:	4451      	add	r1, sl
   13626:	f010 ff59 	bl	244dc <nvs_al_size.isra.0>
   1362a:	4402      	add	r2, r0
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   1362c:	455a      	cmp	r2, fp
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   1362e:	60a2      	str	r2, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   13630:	f43f af2a 	beq.w	13488 <nvs_mount+0x170>
		fs->ate_wra -= ate_size;
   13634:	ebab 0306 	sub.w	r3, fp, r6
   13638:	6063      	str	r3, [r4, #4]
   1363a:	e6e2      	b.n	13402 <nvs_mount+0xea>

0001363c <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
   1363c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13640:	461e      	mov	r6, r3
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
   13642:	7c03      	ldrb	r3, [r0, #16]
{
   13644:	b089      	sub	sp, #36	; 0x24
   13646:	4604      	mov	r4, r0
   13648:	4689      	mov	r9, r1
   1364a:	4690      	mov	r8, r2
	if (!fs->ready) {
   1364c:	b94b      	cbnz	r3, 13662 <nvs_write+0x26>
		LOG_ERR("NVS not initialized");
   1364e:	485e      	ldr	r0, [pc, #376]	; (137c8 <nvs_write+0x18c>)
   13650:	2145      	movs	r1, #69	; 0x45
   13652:	f010 feaa 	bl	243aa <z_log_minimal_printk>
		return -EACCES;
   13656:	f06f 050c 	mvn.w	r5, #12
	}
	rc = len;
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
   1365a:	4628      	mov	r0, r5
   1365c:	b009      	add	sp, #36	; 0x24
   1365e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   13662:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   13664:	2108      	movs	r1, #8
   13666:	4610      	mov	r0, r2
   13668:	f010 ff38 	bl	244dc <nvs_al_size.isra.0>
	data_size = nvs_al_size(fs, len);
   1366c:	4631      	mov	r1, r6
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1366e:	4682      	mov	sl, r0
	data_size = nvs_al_size(fs, len);
   13670:	4610      	mov	r0, r2
   13672:	f010 ff33 	bl	244dc <nvs_al_size.isra.0>
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   13676:	89a3      	ldrh	r3, [r4, #12]
   13678:	eba3 038a 	sub.w	r3, r3, sl, lsl #2
   1367c:	429e      	cmp	r6, r3
	data_size = nvs_al_size(fs, len);
   1367e:	4607      	mov	r7, r0
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   13680:	f200 809e 	bhi.w	137c0 <nvs_write+0x184>
   13684:	b11e      	cbz	r6, 1368e <nvs_write+0x52>
	    ((len > 0) && (data == NULL))) {
   13686:	f1b8 0f00 	cmp.w	r8, #0
   1368a:	f000 8099 	beq.w	137c0 <nvs_write+0x184>
	wlk_addr = fs->ate_wra;
   1368e:	6863      	ldr	r3, [r4, #4]
   13690:	9303      	str	r3, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   13692:	aa04      	add	r2, sp, #16
   13694:	a903      	add	r1, sp, #12
   13696:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
   13698:	f8dd b00c 	ldr.w	fp, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   1369c:	f010 ff60 	bl	24560 <nvs_prev_ate>
		if (rc) {
   136a0:	4605      	mov	r5, r0
   136a2:	2800      	cmp	r0, #0
   136a4:	d1d9      	bne.n	1365a <nvs_write+0x1e>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   136a6:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   136aa:	454b      	cmp	r3, r9
   136ac:	d005      	beq.n	136ba <nvs_write+0x7e>
		if (wlk_addr == fs->ate_wra) {
   136ae:	6862      	ldr	r2, [r4, #4]
   136b0:	9b03      	ldr	r3, [sp, #12]
   136b2:	429a      	cmp	r2, r3
   136b4:	d1ed      	bne.n	13692 <nvs_write+0x56>
		if (len == 0) {
   136b6:	b9e6      	cbnz	r6, 136f2 <nvs_write+0xb6>
   136b8:	e7cf      	b.n	1365a <nvs_write+0x1e>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   136ba:	a904      	add	r1, sp, #16
   136bc:	4620      	mov	r0, r4
   136be:	f010 ff17 	bl	244f0 <nvs_ate_valid>
   136c2:	2800      	cmp	r0, #0
   136c4:	d0f3      	beq.n	136ae <nvs_write+0x72>
			if (wlk_ate.len == 0U) {
   136c6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
		if (len == 0) {
   136ca:	b186      	cbz	r6, 136ee <nvs_write+0xb2>
		} else if (len == wlk_ate.len) {
   136cc:	429e      	cmp	r6, r3
   136ce:	d110      	bne.n	136f2 <nvs_write+0xb6>
		rd_addr += wlk_ate.offset;
   136d0:	f8bd 0012 	ldrh.w	r0, [sp, #18]
		rd_addr &= ADDR_SECT_MASK;
   136d4:	ea4f 411b 	mov.w	r1, fp, lsr #16
   136d8:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
   136da:	4401      	add	r1, r0
   136dc:	4633      	mov	r3, r6
   136de:	4642      	mov	r2, r8
   136e0:	4620      	mov	r0, r4
   136e2:	f010 fe7d 	bl	243e0 <nvs_flash_block_cmp>
			if (rc <= 0) {
   136e6:	2800      	cmp	r0, #0
   136e8:	dc03      	bgt.n	136f2 <nvs_write+0xb6>
   136ea:	4605      	mov	r5, r0
   136ec:	e7b5      	b.n	1365a <nvs_write+0x1e>
			if (wlk_ate.len == 0U) {
   136ee:	2b00      	cmp	r3, #0
   136f0:	d0b3      	beq.n	1365a <nvs_write+0x1e>
	if (data_size) {
   136f2:	bba7      	cbnz	r7, 1375e <nvs_write+0x122>
	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
   136f4:	f104 0a14 	add.w	sl, r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   136f8:	f04f 32ff 	mov.w	r2, #4294967295
   136fc:	f04f 33ff 	mov.w	r3, #4294967295
   13700:	4650      	mov	r0, sl
   13702:	f00d f82d 	bl	20760 <z_impl_k_mutex_lock>
	fs->ate_wra &= ADDR_SECT_MASK;
   13706:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 137cc <nvs_write+0x190>
		if (gc_count == fs->sector_count) {
   1370a:	89e3      	ldrh	r3, [r4, #14]
   1370c:	429d      	cmp	r5, r3
   1370e:	d054      	beq.n	137ba <nvs_write+0x17e>
		if (fs->ate_wra >= (fs->data_wra + required_space)) {
   13710:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   13714:	18f9      	adds	r1, r7, r3
   13716:	428a      	cmp	r2, r1
   13718:	d324      	bcc.n	13764 <nvs_write+0x128>
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   1371a:	f8ad 301a 	strh.w	r3, [sp, #26]
	nvs_ate_crc8_update(&entry);
   1371e:	a806      	add	r0, sp, #24
	entry.part = 0xff;
   13720:	23ff      	movs	r3, #255	; 0xff
   13722:	f88d 301e 	strb.w	r3, [sp, #30]
	entry.id = id;
   13726:	f8ad 9018 	strh.w	r9, [sp, #24]
	entry.len = (uint16_t)len;
   1372a:	f8ad 601c 	strh.w	r6, [sp, #28]
	nvs_ate_crc8_update(&entry);
   1372e:	f010 fec1 	bl	244b4 <nvs_ate_crc8_update>
	rc = nvs_flash_data_wrt(fs, data, len);
   13732:	4632      	mov	r2, r6
   13734:	4641      	mov	r1, r8
   13736:	4620      	mov	r0, r4
   13738:	f010 ff96 	bl	24668 <nvs_flash_data_wrt>
	if (rc) {
   1373c:	4603      	mov	r3, r0
   1373e:	b938      	cbnz	r0, 13750 <nvs_write+0x114>
	rc = nvs_flash_ate_wrt(fs, &entry);
   13740:	a906      	add	r1, sp, #24
   13742:	4620      	mov	r0, r4
   13744:	f010 ffa3 	bl	2468e <nvs_flash_ate_wrt>
	rc = len;
   13748:	2800      	cmp	r0, #0
   1374a:	bf14      	ite	ne
   1374c:	4603      	movne	r3, r0
   1374e:	4633      	moveq	r3, r6
   13750:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_unlock(mutex);
   13752:	4650      	mov	r0, sl
   13754:	f00d f8d6 	bl	20904 <z_impl_k_mutex_unlock>
	return rc;
   13758:	9b01      	ldr	r3, [sp, #4]
   1375a:	461d      	mov	r5, r3
   1375c:	e77d      	b.n	1365a <nvs_write+0x1e>
		required_space = data_size + ate_size;
   1375e:	4457      	add	r7, sl
   13760:	b2bf      	uxth	r7, r7
   13762:	e7c7      	b.n	136f4 <nvs_write+0xb8>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   13764:	2108      	movs	r1, #8
   13766:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   13768:	f010 feb8 	bl	244dc <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
   1376c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   13770:	f8ad 3018 	strh.w	r3, [sp, #24]
	close_ate.len = 0U;
   13774:	2300      	movs	r3, #0
   13776:	f8ad 301c 	strh.w	r3, [sp, #28]
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
   1377a:	1813      	adds	r3, r2, r0
   1377c:	f8ad 301a 	strh.w	r3, [sp, #26]
	fs->ate_wra += (fs->sector_size - ate_size);
   13780:	89a3      	ldrh	r3, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
   13782:	ea02 020b 	and.w	r2, r2, fp
	fs->ate_wra += (fs->sector_size - ate_size);
   13786:	441a      	add	r2, r3
   13788:	1a12      	subs	r2, r2, r0
   1378a:	6062      	str	r2, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
   1378c:	a806      	add	r0, sp, #24
   1378e:	f010 fe91 	bl	244b4 <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
   13792:	a906      	add	r1, sp, #24
   13794:	4620      	mov	r0, r4
   13796:	f010 ff7a 	bl	2468e <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
   1379a:	89e0      	ldrh	r0, [r4, #14]
   1379c:	1d21      	adds	r1, r4, #4
   1379e:	f010 fe92 	bl	244c6 <nvs_sector_advance.isra.0>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   137a2:	6863      	ldr	r3, [r4, #4]
   137a4:	ea03 030b 	and.w	r3, r3, fp
   137a8:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   137aa:	4620      	mov	r0, r4
   137ac:	f010 ff95 	bl	246da <nvs_gc>
		if (rc) {
   137b0:	4603      	mov	r3, r0
   137b2:	2800      	cmp	r0, #0
   137b4:	d1cc      	bne.n	13750 <nvs_write+0x114>
		gc_count++;
   137b6:	3501      	adds	r5, #1
		if (gc_count == fs->sector_count) {
   137b8:	e7a7      	b.n	1370a <nvs_write+0xce>
			rc = -ENOSPC;
   137ba:	f06f 031b 	mvn.w	r3, #27
   137be:	e7c7      	b.n	13750 <nvs_write+0x114>
		return -EINVAL;
   137c0:	f06f 0515 	mvn.w	r5, #21
   137c4:	e749      	b.n	1365a <nvs_write+0x1e>
   137c6:	bf00      	nop
   137c8:	00028a8f 	.word	0x00028a8f
   137cc:	ffff0000 	.word	0xffff0000

000137d0 <nvs_read_hist>:
	return nvs_write(fs, id, NULL, 0);
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
   137d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   137d4:	461e      	mov	r6, r3
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
   137d6:	7c03      	ldrb	r3, [r0, #16]
{
   137d8:	f8bd 9030 	ldrh.w	r9, [sp, #48]	; 0x30
   137dc:	4604      	mov	r4, r0
   137de:	460f      	mov	r7, r1
   137e0:	4690      	mov	r8, r2
	if (!fs->ready) {
   137e2:	b943      	cbnz	r3, 137f6 <nvs_read_hist+0x26>
		LOG_ERR("NVS not initialized");
   137e4:	4828      	ldr	r0, [pc, #160]	; (13888 <nvs_read_hist+0xb8>)
   137e6:	2145      	movs	r1, #69	; 0x45
   137e8:	f010 fddf 	bl	243aa <z_log_minimal_printk>
		return -EACCES;
   137ec:	f06f 000c 	mvn.w	r0, #12

	return wlk_ate.len;

err:
	return rc;
}
   137f0:	b004      	add	sp, #16
   137f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   137f6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   137f8:	2108      	movs	r1, #8
   137fa:	f010 fe6f 	bl	244dc <nvs_al_size.isra.0>
	if (len > (fs->sector_size - 2 * ate_size)) {
   137fe:	89a3      	ldrh	r3, [r4, #12]
   13800:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
   13804:	429e      	cmp	r6, r3
   13806:	d83c      	bhi.n	13882 <nvs_read_hist+0xb2>
	wlk_addr = fs->ate_wra;
   13808:	6863      	ldr	r3, [r4, #4]
   1380a:	9301      	str	r3, [sp, #4]
	cnt_his = 0U;
   1380c:	f04f 0a00 	mov.w	sl, #0
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   13810:	aa02      	add	r2, sp, #8
   13812:	a901      	add	r1, sp, #4
   13814:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
   13816:	9d01      	ldr	r5, [sp, #4]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   13818:	f010 fea2 	bl	24560 <nvs_prev_ate>
		if (rc) {
   1381c:	2800      	cmp	r0, #0
   1381e:	d1e7      	bne.n	137f0 <nvs_read_hist+0x20>
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
   13820:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   13824:	42bb      	cmp	r3, r7
   13826:	d108      	bne.n	1383a <nvs_read_hist+0x6a>
   13828:	a902      	add	r1, sp, #8
   1382a:	4620      	mov	r0, r4
   1382c:	f010 fe60 	bl	244f0 <nvs_ate_valid>
   13830:	b118      	cbz	r0, 1383a <nvs_read_hist+0x6a>
			cnt_his++;
   13832:	f10a 0a01 	add.w	sl, sl, #1
   13836:	fa1f fa8a 	uxth.w	sl, sl
		if (wlk_addr == fs->ate_wra) {
   1383a:	6862      	ldr	r2, [r4, #4]
   1383c:	9b01      	ldr	r3, [sp, #4]
   1383e:	429a      	cmp	r2, r3
   13840:	d018      	beq.n	13874 <nvs_read_hist+0xa4>
	while (cnt_his <= cnt) {
   13842:	45d1      	cmp	r9, sl
   13844:	d2e4      	bcs.n	13810 <nvs_read_hist+0x40>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   13846:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   1384a:	b1bb      	cbz	r3, 1387c <nvs_read_hist+0xac>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   1384c:	45d1      	cmp	r9, sl
   1384e:	d815      	bhi.n	1387c <nvs_read_hist+0xac>
	rd_addr += wlk_ate.offset;
   13850:	f8bd 100a 	ldrh.w	r1, [sp, #10]
	rd_addr &= ADDR_SECT_MASK;
   13854:	0c2d      	lsrs	r5, r5, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   13856:	42b3      	cmp	r3, r6
	rd_addr &= ADDR_SECT_MASK;
   13858:	ea4f 4505 	mov.w	r5, r5, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   1385c:	bf28      	it	cs
   1385e:	4633      	movcs	r3, r6
   13860:	4642      	mov	r2, r8
   13862:	4429      	add	r1, r5
   13864:	4620      	mov	r0, r4
   13866:	f010 fdad 	bl	243c4 <nvs_flash_rd>
	if (rc) {
   1386a:	2800      	cmp	r0, #0
   1386c:	d1c0      	bne.n	137f0 <nvs_read_hist+0x20>
	return wlk_ate.len;
   1386e:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   13872:	e7bd      	b.n	137f0 <nvs_read_hist+0x20>
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   13874:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   13878:	42bb      	cmp	r3, r7
   1387a:	d0e4      	beq.n	13846 <nvs_read_hist+0x76>
		return -ENOENT;
   1387c:	f06f 0001 	mvn.w	r0, #1
   13880:	e7b6      	b.n	137f0 <nvs_read_hist+0x20>
		return -EINVAL;
   13882:	f06f 0015 	mvn.w	r0, #21
   13886:	e7b3      	b.n	137f0 <nvs_read_hist+0x20>
   13888:	00028a8f 	.word	0x00028a8f

0001388c <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
   1388c:	4b0c      	ldr	r3, [pc, #48]	; (138c0 <flash_area_open+0x34>)
   1388e:	681b      	ldr	r3, [r3, #0]
{
   13890:	b570      	push	{r4, r5, r6, lr}
	if (flash_map == NULL) {
   13892:	b173      	cbz	r3, 138b2 <flash_area_open+0x26>
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
   13894:	4a0b      	ldr	r2, [pc, #44]	; (138c4 <flash_area_open+0x38>)
   13896:	6815      	ldr	r5, [r2, #0]
   13898:	2200      	movs	r2, #0
   1389a:	42aa      	cmp	r2, r5
   1389c:	db02      	blt.n	138a4 <flash_area_open+0x18>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
	if (area == NULL) {
		return -ENOENT;
   1389e:	f06f 0001 	mvn.w	r0, #1
	}

	*fap = area;
	return 0;
}
   138a2:	bd70      	pop	{r4, r5, r6, pc}
		if (flash_map[i].fa_id == idx) {
   138a4:	461c      	mov	r4, r3
   138a6:	f813 6b10 	ldrb.w	r6, [r3], #16
   138aa:	4286      	cmp	r6, r0
   138ac:	d004      	beq.n	138b8 <flash_area_open+0x2c>
	for (int i = 0; i < flash_map_entries; i++) {
   138ae:	3201      	adds	r2, #1
   138b0:	e7f3      	b.n	1389a <flash_area_open+0xe>
		return -EACCES;
   138b2:	f06f 000c 	mvn.w	r0, #12
   138b6:	e7f4      	b.n	138a2 <flash_area_open+0x16>
	*fap = area;
   138b8:	600c      	str	r4, [r1, #0]
	return 0;
   138ba:	2000      	movs	r0, #0
   138bc:	e7f1      	b.n	138a2 <flash_area_open+0x16>
   138be:	bf00      	nop
   138c0:	2000053c 	.word	0x2000053c
   138c4:	000280f8 	.word	0x000280f8

000138c8 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
   138c8:	b570      	push	{r4, r5, r6, lr}
   138ca:	b088      	sub	sp, #32
   138cc:	4605      	mov	r5, r0
   138ce:	460c      	mov	r4, r1
	int rc = flash_area_open(idx, &fa);
   138d0:	b2c0      	uxtb	r0, r0
   138d2:	4669      	mov	r1, sp
{
   138d4:	4616      	mov	r6, r2
	int rc = flash_area_open(idx, &fa);
   138d6:	f7ff ffd9 	bl	1388c <flash_area_open>
	if (rc < 0 || fa == NULL) {
   138da:	2800      	cmp	r0, #0
   138dc:	db1f      	blt.n	1391e <flash_area_get_sectors+0x56>
   138de:	9b00      	ldr	r3, [sp, #0]
   138e0:	b1eb      	cbz	r3, 1391e <flash_area_get_sectors+0x56>
	cb_data->area_off = fa->fa_off;
   138e2:	685a      	ldr	r2, [r3, #4]
   138e4:	9202      	str	r2, [sp, #8]
	cb_data->area_len = fa->fa_size;
   138e6:	689a      	ldr	r2, [r3, #8]
	cb_data->ret_len = *cnt;
   138e8:	6821      	ldr	r1, [r4, #0]
	flash_dev = device_get_binding(fa->fa_dev_name);
   138ea:	68d8      	ldr	r0, [r3, #12]
	cb_data->area_idx = idx;
   138ec:	9501      	str	r5, [sp, #4]
	cb_data->ret = ret;
   138ee:	e9cd 2603 	strd	r2, r6, [sp, #12]
	cb_data->ret_idx = 0U;
   138f2:	2200      	movs	r2, #0
	cb_data->status = 0;
   138f4:	e9cd 1206 	strd	r1, r2, [sp, #24]
	cb_data->ret_idx = 0U;
   138f8:	9205      	str	r2, [sp, #20]
   138fa:	f00c faa1 	bl	1fe40 <z_impl_device_get_binding>
   138fe:	4605      	mov	r5, r0
	flash_area_close(fa);
   13900:	9800      	ldr	r0, [sp, #0]
   13902:	f010 ffaa 	bl	2485a <flash_area_close>
	if (flash_dev == NULL) {
   13906:	b16d      	cbz	r5, 13924 <flash_area_get_sectors+0x5c>
	flash_page_foreach(flash_dev, cb, cb_data);
   13908:	4628      	mov	r0, r5
   1390a:	4908      	ldr	r1, [pc, #32]	; (1392c <flash_area_get_sectors+0x64>)
   1390c:	aa01      	add	r2, sp, #4
   1390e:	f013 fbe8 	bl	270e2 <flash_page_foreach>
	if (cb_data->status == 0) {
   13912:	9807      	ldr	r0, [sp, #28]
   13914:	b908      	cbnz	r0, 1391a <flash_area_get_sectors+0x52>
		*cnt = cb_data->ret_idx;
   13916:	9b05      	ldr	r3, [sp, #20]
   13918:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
   1391a:	b008      	add	sp, #32
   1391c:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   1391e:	f06f 0015 	mvn.w	r0, #21
   13922:	e7fa      	b.n	1391a <flash_area_get_sectors+0x52>
		return -ENODEV;
   13924:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
   13928:	e7f7      	b.n	1391a <flash_area_get_sectors+0x52>
   1392a:	bf00      	nop
   1392c:	0002485d 	.word	0x0002485d

00013930 <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
   13930:	4b10      	ldr	r3, [pc, #64]	; (13974 <settings_save_one+0x44>)
{
   13932:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
   13936:	681c      	ldr	r4, [r3, #0]
{
   13938:	4605      	mov	r5, r0
   1393a:	460e      	mov	r6, r1
   1393c:	4617      	mov	r7, r2
	if (!cs) {
   1393e:	b1ac      	cbz	r4, 1396c <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
   13940:	f04f 32ff 	mov.w	r2, #4294967295
   13944:	f04f 33ff 	mov.w	r3, #4294967295
   13948:	480b      	ldr	r0, [pc, #44]	; (13978 <settings_save_one+0x48>)
   1394a:	f00c ff09 	bl	20760 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
   1394e:	6863      	ldr	r3, [r4, #4]
   13950:	4632      	mov	r2, r6
   13952:	f8d3 8008 	ldr.w	r8, [r3, #8]
   13956:	4629      	mov	r1, r5
   13958:	463b      	mov	r3, r7
   1395a:	4620      	mov	r0, r4
   1395c:	47c0      	blx	r8
   1395e:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   13960:	4805      	ldr	r0, [pc, #20]	; (13978 <settings_save_one+0x48>)
   13962:	f00c ffcf 	bl	20904 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
   13966:	4620      	mov	r0, r4
   13968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
   1396c:	f06f 0401 	mvn.w	r4, #1
   13970:	e7f9      	b.n	13966 <settings_save_one+0x36>
   13972:	bf00      	nop
   13974:	20001de0 	.word	0x20001de0
   13978:	20000890 	.word	0x20000890

0001397c <settings_src_register>:
	parent->next = child;
   1397c:	2300      	movs	r3, #0
   1397e:	6003      	str	r3, [r0, #0]
	return list->tail;
   13980:	4b04      	ldr	r3, [pc, #16]	; (13994 <settings_src_register+0x18>)
   13982:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   13984:	b912      	cbnz	r2, 1398c <settings_src_register+0x10>
	list->head = node;
   13986:	e9c3 0000 	strd	r0, r0, [r3]
}
   1398a:	4770      	bx	lr
	parent->next = child;
   1398c:	6010      	str	r0, [r2, #0]
	list->tail = node;
   1398e:	6058      	str	r0, [r3, #4]
}
   13990:	4770      	bx	lr
   13992:	bf00      	nop
   13994:	20001dd8 	.word	0x20001dd8

00013998 <settings_dst_register>:
	settings_save_dst = cs;
   13998:	4b01      	ldr	r3, [pc, #4]	; (139a0 <settings_dst_register+0x8>)
   1399a:	6018      	str	r0, [r3, #0]
}
   1399c:	4770      	bx	lr
   1399e:	bf00      	nop
   139a0:	20001de0 	.word	0x20001de0

000139a4 <settings_load_subtree>:
{
   139a4:	b530      	push	{r4, r5, lr}
   139a6:	b085      	sub	sp, #20
	const struct settings_load_arg arg = {
   139a8:	2300      	movs	r3, #0
{
   139aa:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
   139ac:	e9cd 3302 	strd	r3, r3, [sp, #8]
   139b0:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   139b2:	f04f 33ff 	mov.w	r3, #4294967295
   139b6:	480c      	ldr	r0, [pc, #48]	; (139e8 <settings_load_subtree+0x44>)
   139b8:	f04f 32ff 	mov.w	r2, #4294967295
   139bc:	f00c fed0 	bl	20760 <z_impl_k_mutex_lock>
	return list->head;
   139c0:	4b0a      	ldr	r3, [pc, #40]	; (139ec <settings_load_subtree+0x48>)
   139c2:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   139c4:	b134      	cbz	r4, 139d4 <settings_load_subtree+0x30>
		cs->cs_itf->csi_load(cs, &arg);
   139c6:	6863      	ldr	r3, [r4, #4]
   139c8:	4620      	mov	r0, r4
   139ca:	681b      	ldr	r3, [r3, #0]
   139cc:	a901      	add	r1, sp, #4
   139ce:	4798      	blx	r3
	return node->next;
   139d0:	6824      	ldr	r4, [r4, #0]
   139d2:	e7f7      	b.n	139c4 <settings_load_subtree+0x20>
	rc = settings_commit_subtree(subtree);
   139d4:	4628      	mov	r0, r5
   139d6:	f000 f8d1 	bl	13b7c <settings_commit_subtree>
   139da:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   139dc:	4802      	ldr	r0, [pc, #8]	; (139e8 <settings_load_subtree+0x44>)
   139de:	f00c ff91 	bl	20904 <z_impl_k_mutex_unlock>
}
   139e2:	4620      	mov	r0, r4
   139e4:	b005      	add	sp, #20
   139e6:	bd30      	pop	{r4, r5, pc}
   139e8:	20000890 	.word	0x20000890
   139ec:	20001dd8 	.word	0x20001dd8

000139f0 <settings_load_subtree_direct>:
{
   139f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
   139f2:	e9cd 0101 	strd	r0, r1, [sp, #4]
   139f6:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
   139f8:	f04f 33ff 	mov.w	r3, #4294967295
   139fc:	480a      	ldr	r0, [pc, #40]	; (13a28 <settings_load_subtree_direct+0x38>)
   139fe:	f04f 32ff 	mov.w	r2, #4294967295
   13a02:	f00c fead 	bl	20760 <z_impl_k_mutex_lock>
	return list->head;
   13a06:	4b09      	ldr	r3, [pc, #36]	; (13a2c <settings_load_subtree_direct+0x3c>)
   13a08:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   13a0a:	b134      	cbz	r4, 13a1a <settings_load_subtree_direct+0x2a>
		cs->cs_itf->csi_load(cs, &arg);
   13a0c:	6863      	ldr	r3, [r4, #4]
   13a0e:	4620      	mov	r0, r4
   13a10:	681b      	ldr	r3, [r3, #0]
   13a12:	a901      	add	r1, sp, #4
   13a14:	4798      	blx	r3
	return node->next;
   13a16:	6824      	ldr	r4, [r4, #0]
   13a18:	e7f7      	b.n	13a0a <settings_load_subtree_direct+0x1a>
	return z_impl_k_mutex_unlock(mutex);
   13a1a:	4803      	ldr	r0, [pc, #12]	; (13a28 <settings_load_subtree_direct+0x38>)
   13a1c:	f00c ff72 	bl	20904 <z_impl_k_mutex_unlock>
}
   13a20:	2000      	movs	r0, #0
   13a22:	b004      	add	sp, #16
   13a24:	bd10      	pop	{r4, pc}
   13a26:	bf00      	nop
   13a28:	20000890 	.word	0x20000890
   13a2c:	20001dd8 	.word	0x20001dd8

00013a30 <settings_store_init>:
	list->head = NULL;
   13a30:	4b02      	ldr	r3, [pc, #8]	; (13a3c <settings_store_init+0xc>)
   13a32:	2200      	movs	r2, #0
	list->tail = NULL;
   13a34:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
   13a38:	4770      	bx	lr
   13a3a:	bf00      	nop
   13a3c:	20001dd8 	.word	0x20001dd8

00013a40 <settings_init>:
	list->head = NULL;
   13a40:	4b02      	ldr	r3, [pc, #8]	; (13a4c <settings_init+0xc>)
   13a42:	2200      	movs	r2, #0
	list->tail = NULL;
   13a44:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
   13a48:	f7ff bff2 	b.w	13a30 <settings_store_init>
   13a4c:	20001de4 	.word	0x20001de4

00013a50 <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
   13a50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   13a54:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
   13a56:	460e      	mov	r6, r1
   13a58:	b109      	cbz	r1, 13a5e <settings_parse_and_lookup+0xe>
		*next = NULL;
   13a5a:	2300      	movs	r3, #0
   13a5c:	600b      	str	r3, [r1, #0]
   13a5e:	4c23      	ldr	r4, [pc, #140]	; (13aec <settings_parse_and_lookup+0x9c>)
	}

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   13a60:	f8df 808c 	ldr.w	r8, [pc, #140]	; 13af0 <settings_parse_and_lookup+0xa0>
   13a64:	f8df 908c 	ldr.w	r9, [pc, #140]	; 13af4 <settings_parse_and_lookup+0xa4>
   13a68:	2500      	movs	r5, #0
   13a6a:	4544      	cmp	r4, r8
   13a6c:	d908      	bls.n	13a80 <settings_parse_and_lookup+0x30>
   13a6e:	4822      	ldr	r0, [pc, #136]	; (13af8 <settings_parse_and_lookup+0xa8>)
   13a70:	4649      	mov	r1, r9
   13a72:	2294      	movs	r2, #148	; 0x94
   13a74:	f010 fc8b 	bl	2438e <assert_print>
   13a78:	2194      	movs	r1, #148	; 0x94
   13a7a:	4648      	mov	r0, r9
   13a7c:	f010 fc80 	bl	24380 <assert_post_action>
   13a80:	4544      	cmp	r4, r8
   13a82:	d310      	bcc.n	13aa6 <settings_parse_and_lookup+0x56>
	return list->head;
   13a84:	4b1d      	ldr	r3, [pc, #116]	; (13afc <settings_parse_and_lookup+0xac>)
   13a86:	681c      	ldr	r4, [r3, #0]
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   13a88:	b35c      	cbz	r4, 13ae2 <settings_parse_and_lookup+0x92>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   13a8a:	aa01      	add	r2, sp, #4
   13a8c:	4638      	mov	r0, r7
   13a8e:	f854 1c14 	ldr.w	r1, [r4, #-20]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   13a92:	3c14      	subs	r4, #20
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   13a94:	f010 ff07 	bl	248a6 <settings_name_steq>
   13a98:	b308      	cbz	r0, 13ade <settings_parse_and_lookup+0x8e>
			continue;
		}
		if (!bestmatch) {
   13a9a:	b9cd      	cbnz	r5, 13ad0 <settings_parse_and_lookup+0x80>
			}
			continue;
		}
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
			bestmatch = (struct settings_handler_static *)ch;
			if (next) {
   13a9c:	b10e      	cbz	r6, 13aa2 <settings_parse_and_lookup+0x52>
				*next = tmpnext;
   13a9e:	9b01      	ldr	r3, [sp, #4]
   13aa0:	6033      	str	r3, [r6, #0]
   13aa2:	4625      	mov	r5, r4
   13aa4:	e01b      	b.n	13ade <settings_parse_and_lookup+0x8e>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   13aa6:	6821      	ldr	r1, [r4, #0]
   13aa8:	aa01      	add	r2, sp, #4
   13aaa:	4638      	mov	r0, r7
   13aac:	f010 fefb 	bl	248a6 <settings_name_steq>
   13ab0:	b160      	cbz	r0, 13acc <settings_parse_and_lookup+0x7c>
		if (!bestmatch) {
   13ab2:	b925      	cbnz	r5, 13abe <settings_parse_and_lookup+0x6e>
			if (next) {
   13ab4:	b10e      	cbz	r6, 13aba <settings_parse_and_lookup+0x6a>
				*next = tmpnext;
   13ab6:	9b01      	ldr	r3, [sp, #4]
   13ab8:	6033      	str	r3, [r6, #0]
   13aba:	4625      	mov	r5, r4
   13abc:	e006      	b.n	13acc <settings_parse_and_lookup+0x7c>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   13abe:	6829      	ldr	r1, [r5, #0]
   13ac0:	6820      	ldr	r0, [r4, #0]
   13ac2:	2200      	movs	r2, #0
   13ac4:	f010 feef 	bl	248a6 <settings_name_steq>
   13ac8:	2800      	cmp	r0, #0
   13aca:	d1f3      	bne.n	13ab4 <settings_parse_and_lookup+0x64>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   13acc:	3414      	adds	r4, #20
   13ace:	e7cc      	b.n	13a6a <settings_parse_and_lookup+0x1a>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   13ad0:	6829      	ldr	r1, [r5, #0]
   13ad2:	6820      	ldr	r0, [r4, #0]
   13ad4:	2200      	movs	r2, #0
   13ad6:	f010 fee6 	bl	248a6 <settings_name_steq>
   13ada:	2800      	cmp	r0, #0
   13adc:	d1de      	bne.n	13a9c <settings_parse_and_lookup+0x4c>
	return node->next;
   13ade:	6964      	ldr	r4, [r4, #20]
   13ae0:	e7d2      	b.n	13a88 <settings_parse_and_lookup+0x38>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
   13ae2:	4628      	mov	r0, r5
   13ae4:	b003      	add	sp, #12
   13ae6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   13aea:	bf00      	nop
   13aec:	00027dc4 	.word	0x00027dc4
   13af0:	00027e3c 	.word	0x00027e3c
   13af4:	00028bf8 	.word	0x00028bf8
   13af8:	000289af 	.word	0x000289af
   13afc:	20001de4 	.word	0x20001de4

00013b00 <settings_call_set_handler>:
int settings_call_set_handler(const char *name,
			      size_t len,
			      settings_read_cb read_cb,
			      void *read_cb_arg,
			      const struct settings_load_arg *load_arg)
{
   13b00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13b04:	b085      	sub	sp, #20
   13b06:	4604      	mov	r4, r0
   13b08:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	int rc;
	const char *name_key = name;
   13b0c:	9003      	str	r0, [sp, #12]
{
   13b0e:	460d      	mov	r5, r1
   13b10:	4616      	mov	r6, r2
   13b12:	461f      	mov	r7, r3

	if (load_arg && load_arg->subtree &&
   13b14:	f1b8 0f00 	cmp.w	r8, #0
   13b18:	d018      	beq.n	13b4c <settings_call_set_handler+0x4c>
   13b1a:	f8d8 1000 	ldr.w	r1, [r8]
   13b1e:	b181      	cbz	r1, 13b42 <settings_call_set_handler+0x42>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
   13b20:	aa03      	add	r2, sp, #12
   13b22:	f010 fec0 	bl	248a6 <settings_name_steq>
	if (load_arg && load_arg->subtree &&
   13b26:	b960      	cbnz	r0, 13b42 <settings_call_set_handler+0x42>

		if (rc != 0) {
			LOG_ERR("set-value failure. key: %s error(%d)",
				log_strdup(name), rc);
			/* Ignoring the error */
			rc = 0;
   13b28:	2000      	movs	r0, #0
   13b2a:	e007      	b.n	13b3c <settings_call_set_handler+0x3c>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
   13b2c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   13b30:	9300      	str	r3, [sp, #0]
   13b32:	9803      	ldr	r0, [sp, #12]
   13b34:	463b      	mov	r3, r7
   13b36:	4632      	mov	r2, r6
   13b38:	4629      	mov	r1, r5
   13b3a:	47c8      	blx	r9
			LOG_DBG("set-value OK. key: %s",
				log_strdup(name));
		}
	}
	return rc;
}
   13b3c:	b005      	add	sp, #20
   13b3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (load_arg && load_arg->cb) {
   13b42:	f8d8 9004 	ldr.w	r9, [r8, #4]
   13b46:	f1b9 0f00 	cmp.w	r9, #0
   13b4a:	d1ef      	bne.n	13b2c <settings_call_set_handler+0x2c>
		ch = settings_parse_and_lookup(name, &name_key);
   13b4c:	a903      	add	r1, sp, #12
   13b4e:	4620      	mov	r0, r4
   13b50:	f7ff ff7e 	bl	13a50 <settings_parse_and_lookup>
		if (!ch) {
   13b54:	2800      	cmp	r0, #0
   13b56:	d0e7      	beq.n	13b28 <settings_call_set_handler+0x28>
		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
   13b58:	f8d0 8008 	ldr.w	r8, [r0, #8]
   13b5c:	9803      	ldr	r0, [sp, #12]
   13b5e:	463b      	mov	r3, r7
   13b60:	4632      	mov	r2, r6
   13b62:	4629      	mov	r1, r5
   13b64:	47c0      	blx	r8
		if (rc != 0) {
   13b66:	4603      	mov	r3, r0
   13b68:	2800      	cmp	r0, #0
   13b6a:	d0dd      	beq.n	13b28 <settings_call_set_handler+0x28>
			LOG_ERR("set-value failure. key: %s error(%d)",
   13b6c:	4802      	ldr	r0, [pc, #8]	; (13b78 <settings_call_set_handler+0x78>)
   13b6e:	4622      	mov	r2, r4
   13b70:	2145      	movs	r1, #69	; 0x45
   13b72:	f010 fc1a 	bl	243aa <z_log_minimal_printk>
   13b76:	e7d7      	b.n	13b28 <settings_call_set_handler+0x28>
   13b78:	00028c2a 	.word	0x00028c2a

00013b7c <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
   13b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc;
	int rc2;

	rc = 0;

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   13b80:	4c1e      	ldr	r4, [pc, #120]	; (13bfc <settings_commit_subtree+0x80>)
   13b82:	4f1f      	ldr	r7, [pc, #124]	; (13c00 <settings_commit_subtree+0x84>)
   13b84:	f8df 807c 	ldr.w	r8, [pc, #124]	; 13c04 <settings_commit_subtree+0x88>
{
   13b88:	4606      	mov	r6, r0
	rc = 0;
   13b8a:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   13b8c:	42bc      	cmp	r4, r7
   13b8e:	d908      	bls.n	13ba2 <settings_commit_subtree+0x26>
   13b90:	481d      	ldr	r0, [pc, #116]	; (13c08 <settings_commit_subtree+0x8c>)
   13b92:	4641      	mov	r1, r8
   13b94:	22f4      	movs	r2, #244	; 0xf4
   13b96:	f010 fbfa 	bl	2438e <assert_print>
   13b9a:	21f4      	movs	r1, #244	; 0xf4
   13b9c:	4640      	mov	r0, r8
   13b9e:	f010 fbef 	bl	24380 <assert_post_action>
   13ba2:	42bc      	cmp	r4, r7
   13ba4:	d308      	bcc.n	13bb8 <settings_commit_subtree+0x3c>
	return list->head;
   13ba6:	4b19      	ldr	r3, [pc, #100]	; (13c0c <settings_commit_subtree+0x90>)
   13ba8:	681c      	ldr	r4, [r3, #0]
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   13baa:	b324      	cbz	r4, 13bf6 <settings_commit_subtree+0x7a>
   13bac:	3c14      	subs	r4, #20
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   13bae:	b9ae      	cbnz	r6, 13bdc <settings_commit_subtree+0x60>
			continue;
		}
		if (ch->h_commit) {
   13bb0:	68e3      	ldr	r3, [r4, #12]
   13bb2:	b9db      	cbnz	r3, 13bec <settings_commit_subtree+0x70>
	return node->next;
   13bb4:	6964      	ldr	r4, [r4, #20]
   13bb6:	e7f8      	b.n	13baa <settings_commit_subtree+0x2e>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   13bb8:	b91e      	cbnz	r6, 13bc2 <settings_commit_subtree+0x46>
		if (ch->h_commit) {
   13bba:	68e3      	ldr	r3, [r4, #12]
   13bbc:	b94b      	cbnz	r3, 13bd2 <settings_commit_subtree+0x56>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   13bbe:	3414      	adds	r4, #20
   13bc0:	e7e4      	b.n	13b8c <settings_commit_subtree+0x10>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   13bc2:	6820      	ldr	r0, [r4, #0]
   13bc4:	2200      	movs	r2, #0
   13bc6:	4631      	mov	r1, r6
   13bc8:	f010 fe6d 	bl	248a6 <settings_name_steq>
   13bcc:	2800      	cmp	r0, #0
   13bce:	d1f4      	bne.n	13bba <settings_commit_subtree+0x3e>
   13bd0:	e7f5      	b.n	13bbe <settings_commit_subtree+0x42>
			rc2 = ch->h_commit();
   13bd2:	4798      	blx	r3
				rc = rc2;
   13bd4:	2d00      	cmp	r5, #0
   13bd6:	bf08      	it	eq
   13bd8:	4605      	moveq	r5, r0
   13bda:	e7f0      	b.n	13bbe <settings_commit_subtree+0x42>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   13bdc:	6820      	ldr	r0, [r4, #0]
   13bde:	2200      	movs	r2, #0
   13be0:	4631      	mov	r1, r6
   13be2:	f010 fe60 	bl	248a6 <settings_name_steq>
   13be6:	2800      	cmp	r0, #0
   13be8:	d1e2      	bne.n	13bb0 <settings_commit_subtree+0x34>
   13bea:	e7e3      	b.n	13bb4 <settings_commit_subtree+0x38>
			rc2 = ch->h_commit();
   13bec:	4798      	blx	r3
			if (!rc) {
				rc = rc2;
   13bee:	2d00      	cmp	r5, #0
   13bf0:	bf08      	it	eq
   13bf2:	4605      	moveq	r5, r0
   13bf4:	e7de      	b.n	13bb4 <settings_commit_subtree+0x38>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
   13bf6:	4628      	mov	r0, r5
   13bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13bfc:	00027dc4 	.word	0x00027dc4
   13c00:	00027e3c 	.word	0x00027e3c
   13c04:	00028bf8 	.word	0x00028bf8
   13c08:	000289af 	.word	0x000289af
   13c0c:	20001de4 	.word	0x20001de4

00013c10 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
   13c10:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
   13c12:	4c06      	ldr	r4, [pc, #24]	; (13c2c <settings_subsys_init+0x1c>)
   13c14:	7823      	ldrb	r3, [r4, #0]
   13c16:	b93b      	cbnz	r3, 13c28 <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
   13c18:	f7ff ff12 	bl	13a40 <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
   13c1c:	f000 f864 	bl	13ce8 <settings_backend_init>

	if (!err) {
   13c20:	b908      	cbnz	r0, 13c26 <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
   13c22:	2301      	movs	r3, #1
   13c24:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
   13c26:	bd10      	pop	{r4, pc}
		return 0;
   13c28:	2000      	movs	r0, #0
   13c2a:	e7fc      	b.n	13c26 <settings_subsys_init+0x16>
   13c2c:	20002314 	.word	0x20002314

00013c30 <settings_nvs_load>:
	return 0;
}

static int settings_nvs_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
   13c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	char name[SETTINGS_MAX_NAME_LEN + SETTINGS_EXTRA_LEN + 1];
	char buf;
	ssize_t rc1, rc2;
	uint16_t name_id = NVS_NAMECNT_ID;

	name_id = cf->last_name_id + 1;
   13c34:	8f04      	ldrh	r4, [r0, #56]	; 0x38
		/* Found a name, this might not include a trailing \0 */
		name[rc1] = '\0';
		read_fn_arg.fs = &cf->cf_nvs;
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;

		ret = settings_call_set_handler(
   13c36:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 13ce4 <settings_nvs_load+0xb4>
	name_id = cf->last_name_id + 1;
   13c3a:	3401      	adds	r4, #1
{
   13c3c:	b098      	sub	sp, #96	; 0x60
   13c3e:	4680      	mov	r8, r0
   13c40:	4689      	mov	r9, r1
	name_id = cf->last_name_id + 1;
   13c42:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   13c44:	f100 0608 	add.w	r6, r0, #8
		name_id--;
   13c48:	1e65      	subs	r5, r4, #1
   13c4a:	b2ad      	uxth	r5, r5
		if (name_id == NVS_NAMECNT_ID) {
   13c4c:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   13c50:	d045      	beq.n	13cde <settings_nvs_load+0xae>
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   13c52:	234a      	movs	r3, #74	; 0x4a
   13c54:	aa05      	add	r2, sp, #20
   13c56:	4629      	mov	r1, r5
   13c58:	4630      	mov	r0, r6
   13c5a:	f010 fdf7 	bl	2484c <nvs_read>
   13c5e:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
   13c62:	343f      	adds	r4, #63	; 0x3f
   13c64:	b2a4      	uxth	r4, r4
   13c66:	4607      	mov	r7, r0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   13c68:	4621      	mov	r1, r4
   13c6a:	2301      	movs	r3, #1
   13c6c:	f10d 020b 	add.w	r2, sp, #11
   13c70:	4630      	mov	r0, r6
   13c72:	f010 fdeb 	bl	2484c <nvs_read>
		if ((rc1 <= 0) && (rc2 <= 0)) {
   13c76:	2f00      	cmp	r7, #0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   13c78:	4601      	mov	r1, r0
		if ((rc1 <= 0) && (rc2 <= 0)) {
   13c7a:	dc03      	bgt.n	13c84 <settings_nvs_load+0x54>
   13c7c:	2800      	cmp	r0, #0
   13c7e:	dc03      	bgt.n	13c88 <settings_nvs_load+0x58>
{
   13c80:	462c      	mov	r4, r5
   13c82:	e7e1      	b.n	13c48 <settings_nvs_load+0x18>
		if ((rc1 <= 0) || (rc2 <= 0)) {
   13c84:	2800      	cmp	r0, #0
   13c86:	dc16      	bgt.n	13cb6 <settings_nvs_load+0x86>
			if (name_id == cf->last_name_id) {
   13c88:	f8b8 3038 	ldrh.w	r3, [r8, #56]	; 0x38
   13c8c:	42ab      	cmp	r3, r5
   13c8e:	d109      	bne.n	13ca4 <settings_nvs_load+0x74>
				cf->last_name_id--;
   13c90:	4642      	mov	r2, r8
   13c92:	1e6b      	subs	r3, r5, #1
   13c94:	f822 3f38 	strh.w	r3, [r2, #56]!
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   13c98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   13c9c:	2302      	movs	r3, #2
   13c9e:	4630      	mov	r0, r6
   13ca0:	f7ff fccc 	bl	1363c <nvs_write>
			nvs_delete(&cf->cf_nvs, name_id);
   13ca4:	4629      	mov	r1, r5
   13ca6:	4630      	mov	r0, r6
   13ca8:	f010 fdcc 	bl	24844 <nvs_delete>
			nvs_delete(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET);
   13cac:	4621      	mov	r1, r4
   13cae:	4630      	mov	r0, r6
   13cb0:	f010 fdc8 	bl	24844 <nvs_delete>
			continue;
   13cb4:	e7e4      	b.n	13c80 <settings_nvs_load+0x50>
		name[rc1] = '\0';
   13cb6:	ab18      	add	r3, sp, #96	; 0x60
   13cb8:	441f      	add	r7, r3
   13cba:	2300      	movs	r3, #0
   13cbc:	f807 3c4c 	strb.w	r3, [r7, #-76]
		ret = settings_call_set_handler(
   13cc0:	4652      	mov	r2, sl
   13cc2:	f8cd 9000 	str.w	r9, [sp]
   13cc6:	ab03      	add	r3, sp, #12
   13cc8:	a805      	add	r0, sp, #20
		read_fn_arg.fs = &cf->cf_nvs;
   13cca:	9603      	str	r6, [sp, #12]
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;
   13ccc:	f8ad 4010 	strh.w	r4, [sp, #16]
		ret = settings_call_set_handler(
   13cd0:	f7ff ff16 	bl	13b00 <settings_call_set_handler>
			name, rc2,
			settings_nvs_read_fn, &read_fn_arg,
			(void *)arg);
		if (ret) {
   13cd4:	2800      	cmp	r0, #0
   13cd6:	d0d3      	beq.n	13c80 <settings_nvs_load+0x50>
			break;
		}
	}
	return ret;
}
   13cd8:	b018      	add	sp, #96	; 0x60
   13cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13cde:	2000      	movs	r0, #0
	return ret;
   13ce0:	e7fa      	b.n	13cd8 <settings_nvs_load+0xa8>
   13ce2:	bf00      	nop
   13ce4:	00024919 	.word	0x00024919

00013ce8 <settings_backend_init>:
	LOG_DBG("Initialized");
	return 0;
}

int settings_backend_init(void)
{
   13ce8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc;
	uint16_t cnt = 0;
	size_t nvs_sector_size, nvs_size = 0;
	const struct flash_area *fa;
	struct flash_sector hw_flash_sector;
	uint32_t sector_cnt = 1;
   13cea:	2301      	movs	r3, #1

	rc = flash_area_open(SETTINGS_PARTITION, &fa);
   13cec:	4669      	mov	r1, sp
   13cee:	2004      	movs	r0, #4
	uint32_t sector_cnt = 1;
   13cf0:	9301      	str	r3, [sp, #4]
	rc = flash_area_open(SETTINGS_PARTITION, &fa);
   13cf2:	f7ff fdcb 	bl	1388c <flash_area_open>
	if (rc) {
   13cf6:	4604      	mov	r4, r0
   13cf8:	2800      	cmp	r0, #0
   13cfa:	d136      	bne.n	13d6a <settings_backend_init+0x82>
		return rc;
	}

	rc = flash_area_get_sectors(SETTINGS_PARTITION, &sector_cnt,
   13cfc:	aa02      	add	r2, sp, #8
   13cfe:	a901      	add	r1, sp, #4
   13d00:	2004      	movs	r0, #4
   13d02:	f7ff fde1 	bl	138c8 <flash_area_get_sectors>
				    &hw_flash_sector);
	if (rc == -ENODEV) {
   13d06:	f110 0f13 	cmn.w	r0, #19
	rc = flash_area_get_sectors(SETTINGS_PARTITION, &sector_cnt,
   13d0a:	4604      	mov	r4, r0
	if (rc == -ENODEV) {
   13d0c:	d02d      	beq.n	13d6a <settings_backend_init+0x82>
		return rc;
	} else if (rc != 0 && rc != -ENOMEM) {
   13d0e:	b138      	cbz	r0, 13d20 <settings_backend_init+0x38>
   13d10:	340c      	adds	r4, #12
   13d12:	d005      	beq.n	13d20 <settings_backend_init+0x38>
		k_panic();
   13d14:	4040      	eors	r0, r0
   13d16:	f380 8811 	msr	BASEPRI, r0
   13d1a:	f04f 0004 	mov.w	r0, #4
   13d1e:	df02      	svc	2
	}

	nvs_sector_size = CONFIG_SETTINGS_NVS_SECTOR_SIZE_MULT *
   13d20:	9903      	ldr	r1, [sp, #12]
			  hw_flash_sector.fs_size;

	if (nvs_sector_size > UINT16_MAX) {
   13d22:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   13d26:	d223      	bcs.n	13d70 <settings_backend_init+0x88>
		return -EDOM;
	}

	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
		nvs_size += nvs_sector_size;
		if (nvs_size > fa->fa_size) {
   13d28:	9a00      	ldr	r2, [sp, #0]
   13d2a:	2300      	movs	r3, #0
   13d2c:	6895      	ldr	r5, [r2, #8]
	size_t nvs_sector_size, nvs_size = 0;
   13d2e:	4618      	mov	r0, r3
		nvs_size += nvs_sector_size;
   13d30:	4408      	add	r0, r1
		if (nvs_size > fa->fa_size) {
   13d32:	4285      	cmp	r5, r0
   13d34:	b29c      	uxth	r4, r3
   13d36:	d303      	bcc.n	13d40 <settings_backend_init+0x58>
	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
   13d38:	3301      	adds	r3, #1
   13d3a:	2b08      	cmp	r3, #8
   13d3c:	d1f8      	bne.n	13d30 <settings_backend_init+0x48>
   13d3e:	461c      	mov	r4, r3
		}
		cnt++;
	}

	/* define the nvs file system using the page_info */
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
   13d40:	4d0d      	ldr	r5, [pc, #52]	; (13d78 <settings_backend_init+0x90>)
	default_settings_nvs.cf_nvs.sector_count = cnt;
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
   13d42:	6853      	ldr	r3, [r2, #4]
   13d44:	60ab      	str	r3, [r5, #8]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;

	rc = settings_nvs_backend_init(&default_settings_nvs);
   13d46:	4628      	mov	r0, r5
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
   13d48:	68d3      	ldr	r3, [r2, #12]
	default_settings_nvs.cf_nvs.sector_count = cnt;
   13d4a:	82ec      	strh	r4, [r5, #22]
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
   13d4c:	82a9      	strh	r1, [r5, #20]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
   13d4e:	63eb      	str	r3, [r5, #60]	; 0x3c
	rc = settings_nvs_backend_init(&default_settings_nvs);
   13d50:	f010 fe79 	bl	24a46 <settings_nvs_backend_init>
	if (rc) {
   13d54:	4604      	mov	r4, r0
   13d56:	b940      	cbnz	r0, 13d6a <settings_backend_init+0x82>
	cf->cf_store.cs_itf = &settings_nvs_itf;
   13d58:	4e08      	ldr	r6, [pc, #32]	; (13d7c <settings_backend_init+0x94>)
   13d5a:	606e      	str	r6, [r5, #4]
	settings_src_register(&cf->cf_store);
   13d5c:	4628      	mov	r0, r5
   13d5e:	f7ff fe0d 	bl	1397c <settings_src_register>
	settings_dst_register(&cf->cf_store);
   13d62:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
   13d64:	606e      	str	r6, [r5, #4]
	settings_dst_register(&cf->cf_store);
   13d66:	f7ff fe17 	bl	13998 <settings_dst_register>
	}

	rc = settings_nvs_dst(&default_settings_nvs);

	return rc;
}
   13d6a:	4620      	mov	r0, r4
   13d6c:	b004      	add	sp, #16
   13d6e:	bd70      	pop	{r4, r5, r6, pc}
		return -EDOM;
   13d70:	f06f 0420 	mvn.w	r4, #32
   13d74:	e7f9      	b.n	13d6a <settings_backend_init+0x82>
   13d76:	bf00      	nop
   13d78:	20001dec 	.word	0x20001dec
   13d7c:	20000540 	.word	0x20000540

00013d80 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   13d80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13d84:	4605      	mov	r5, r0
	__asm__ volatile(
   13d86:	f04f 0340 	mov.w	r3, #64	; 0x40
   13d8a:	f3ef 8611 	mrs	r6, BASEPRI
   13d8e:	f383 8812 	msr	BASEPRI_MAX, r3
   13d92:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   13d96:	481d      	ldr	r0, [pc, #116]	; (13e0c <pm_state_notify+0x8c>)
   13d98:	f00c fc8e 	bl	206b8 <z_spin_lock_valid>
   13d9c:	b940      	cbnz	r0, 13db0 <pm_state_notify+0x30>
   13d9e:	491c      	ldr	r1, [pc, #112]	; (13e10 <pm_state_notify+0x90>)
   13da0:	481c      	ldr	r0, [pc, #112]	; (13e14 <pm_state_notify+0x94>)
   13da2:	228e      	movs	r2, #142	; 0x8e
   13da4:	f010 faf3 	bl	2438e <assert_print>
   13da8:	4819      	ldr	r0, [pc, #100]	; (13e10 <pm_state_notify+0x90>)
   13daa:	218e      	movs	r1, #142	; 0x8e
   13dac:	f010 fae8 	bl	24380 <assert_post_action>
	z_spin_lock_set_owner(l);
   13db0:	4816      	ldr	r0, [pc, #88]	; (13e0c <pm_state_notify+0x8c>)
   13db2:	f00c fc9f 	bl	206f4 <z_spin_lock_set_owner>
	return list->head;
   13db6:	4b18      	ldr	r3, [pc, #96]	; (13e18 <pm_state_notify+0x98>)
   13db8:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   13dba:	b19c      	cbz	r4, 13de4 <pm_state_notify+0x64>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   13dbc:	4f17      	ldr	r7, [pc, #92]	; (13e1c <pm_state_notify+0x9c>)
   13dbe:	f8df 8060 	ldr.w	r8, [pc, #96]	; 13e20 <pm_state_notify+0xa0>
   13dc2:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
   13dc6:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   13dca:	2d00      	cmp	r5, #0
   13dcc:	bf08      	it	eq
   13dce:	4613      	moveq	r3, r2
		if (callback) {
   13dd0:	b12b      	cbz	r3, 13dde <pm_state_notify+0x5e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   13dd2:	f898 2014 	ldrb.w	r2, [r8, #20]
   13dd6:	fb09 f202 	mul.w	r2, r9, r2
   13dda:	5cb8      	ldrb	r0, [r7, r2]
   13ddc:	4798      	blx	r3
	return node->next;
   13dde:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   13de0:	2c00      	cmp	r4, #0
   13de2:	d1f0      	bne.n	13dc6 <pm_state_notify+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   13de4:	4809      	ldr	r0, [pc, #36]	; (13e0c <pm_state_notify+0x8c>)
   13de6:	f00c fc75 	bl	206d4 <z_spin_unlock_valid>
   13dea:	b940      	cbnz	r0, 13dfe <pm_state_notify+0x7e>
   13dec:	4908      	ldr	r1, [pc, #32]	; (13e10 <pm_state_notify+0x90>)
   13dee:	4809      	ldr	r0, [pc, #36]	; (13e14 <pm_state_notify+0x94>)
   13df0:	22b9      	movs	r2, #185	; 0xb9
   13df2:	f010 facc 	bl	2438e <assert_print>
   13df6:	4806      	ldr	r0, [pc, #24]	; (13e10 <pm_state_notify+0x90>)
   13df8:	21b9      	movs	r1, #185	; 0xb9
   13dfa:	f010 fac1 	bl	24380 <assert_post_action>
	__asm__ volatile(
   13dfe:	f386 8811 	msr	BASEPRI, r6
   13e02:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   13e06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13e0a:	bf00      	nop
   13e0c:	20001e2c 	.word	0x20001e2c
   13e10:	00028a23 	.word	0x00028a23
   13e14:	000289af 	.word	0x000289af
   13e18:	20001e30 	.word	0x20001e30
   13e1c:	20001e38 	.word	0x20001e38
   13e20:	20002284 	.word	0x20002284

00013e24 <atomic_clear_bit.constprop.0>:
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13e24:	0942      	lsrs	r2, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   13e26:	2301      	movs	r3, #1
   13e28:	f000 001f 	and.w	r0, r0, #31
   13e2c:	fa03 f000 	lsl.w	r0, r3, r0
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13e30:	4b07      	ldr	r3, [pc, #28]	; (13e50 <atomic_clear_bit.constprop.0+0x2c>)
   13e32:	f3bf 8f5b 	dmb	ish
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13e36:	43c0      	mvns	r0, r0
   13e38:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   13e3c:	e853 2f00 	ldrex	r2, [r3]
   13e40:	4002      	ands	r2, r0
   13e42:	e843 2100 	strex	r1, r2, [r3]
   13e46:	2900      	cmp	r1, #0
   13e48:	d1f8      	bne.n	13e3c <atomic_clear_bit.constprop.0+0x18>
   13e4a:	f3bf 8f5b 	dmb	ish
}
   13e4e:	4770      	bx	lr
   13e50:	20001e44 	.word	0x20001e44

00013e54 <pm_system_resume>:

void pm_system_resume(void)
{
   13e54:	b538      	push	{r3, r4, r5, lr}
	uint8_t id = _current_cpu->id;
   13e56:	4b1a      	ldr	r3, [pc, #104]	; (13ec0 <pm_system_resume+0x6c>)
   13e58:	7d1c      	ldrb	r4, [r3, #20]
   13e5a:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
   13e5e:	f004 031f 	and.w	r3, r4, #31
   13e62:	2201      	movs	r2, #1
   13e64:	409a      	lsls	r2, r3
   13e66:	4b17      	ldr	r3, [pc, #92]	; (13ec4 <pm_system_resume+0x70>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13e68:	0961      	lsrs	r1, r4, #5
   13e6a:	43d0      	mvns	r0, r2
   13e6c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   13e70:	e853 1f00 	ldrex	r1, [r3]
   13e74:	ea01 0500 	and.w	r5, r1, r0
   13e78:	e843 5c00 	strex	ip, r5, [r3]
   13e7c:	f1bc 0f00 	cmp.w	ip, #0
   13e80:	d1f6      	bne.n	13e70 <pm_system_resume+0x1c>
   13e82:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   13e86:	4211      	tst	r1, r2
   13e88:	d013      	beq.n	13eb2 <pm_system_resume+0x5e>
	if (pm_state_exit_post_ops != NULL) {
   13e8a:	4b0f      	ldr	r3, [pc, #60]	; (13ec8 <pm_system_resume+0x74>)
   13e8c:	4d0f      	ldr	r5, [pc, #60]	; (13ecc <pm_system_resume+0x78>)
   13e8e:	b18b      	cbz	r3, 13eb4 <pm_system_resume+0x60>
		pm_state_exit_post_ops(info->state, info->substate_id);
   13e90:	230c      	movs	r3, #12
   13e92:	4363      	muls	r3, r4
   13e94:	18ea      	adds	r2, r5, r3
   13e96:	5ce8      	ldrb	r0, [r5, r3]
   13e98:	7851      	ldrb	r1, [r2, #1]
   13e9a:	f011 f841 	bl	24f20 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
   13e9e:	2000      	movs	r0, #0
   13ea0:	f7ff ff6e 	bl	13d80 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   13ea4:	230c      	movs	r3, #12
   13ea6:	435c      	muls	r4, r3
   13ea8:	192a      	adds	r2, r5, r4
   13eaa:	2300      	movs	r3, #0
   13eac:	512b      	str	r3, [r5, r4]
   13eae:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   13eb2:	bd38      	pop	{r3, r4, r5, pc}
   13eb4:	f383 8811 	msr	BASEPRI, r3
   13eb8:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   13ebc:	e7ef      	b.n	13e9e <pm_system_resume+0x4a>
   13ebe:	bf00      	nop
   13ec0:	20002284 	.word	0x20002284
   13ec4:	20001e48 	.word	0x20001e48
   13ec8:	00024f21 	.word	0x00024f21
   13ecc:	20001e38 	.word	0x20001e38

00013ed0 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
   13ed0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
   13ed4:	4b32      	ldr	r3, [pc, #200]	; (13fa0 <pm_system_suspend+0xd0>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   13ed6:	4a33      	ldr	r2, [pc, #204]	; (13fa4 <pm_system_suspend+0xd4>)
   13ed8:	7d1c      	ldrb	r4, [r3, #20]
   13eda:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   13ede:	0963      	lsrs	r3, r4, #5
   13ee0:	ea4f 0983 	mov.w	r9, r3, lsl #2
   13ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ee8:	4e2f      	ldr	r6, [pc, #188]	; (13fa8 <pm_system_suspend+0xd8>)
   13eea:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   13eee:	f004 081f 	and.w	r8, r4, #31
   13ef2:	fa43 f308 	asr.w	r3, r3, r8

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
   13ef6:	f013 0f01 	tst.w	r3, #1
{
   13efa:	4607      	mov	r7, r0
	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
   13efc:	d10a      	bne.n	13f14 <pm_system_suspend+0x44>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
   13efe:	4601      	mov	r1, r0
   13f00:	4620      	mov	r0, r4
   13f02:	f000 f869 	bl	13fd8 <pm_policy_next_state>
		if (info != NULL) {
   13f06:	b128      	cbz	r0, 13f14 <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
   13f08:	c807      	ldmia	r0, {r0, r1, r2}
   13f0a:	230c      	movs	r3, #12
   13f0c:	fb03 6304 	mla	r3, r3, r4, r6
   13f10:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   13f14:	230c      	movs	r3, #12
   13f16:	4363      	muls	r3, r4
   13f18:	18f2      	adds	r2, r6, r3
   13f1a:	5cf5      	ldrb	r5, [r6, r3]
   13f1c:	b92d      	cbnz	r5, 13f2a <pm_system_suspend+0x5a>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
   13f1e:	4620      	mov	r0, r4
   13f20:	f7ff ff80 	bl	13e24 <atomic_clear_bit.constprop.0>
		ret = false;
   13f24:	4628      	mov	r0, r5
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
   13f26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
   13f2a:	1c7b      	adds	r3, r7, #1
   13f2c:	d00f      	beq.n	13f4e <pm_system_suspend+0x7e>
			return (uint32_t)((t * to_hz + off) / from_hz);
   13f2e:	f8d2 c008 	ldr.w	ip, [r2, #8]
   13f32:	481e      	ldr	r0, [pc, #120]	; (13fac <pm_system_suspend+0xdc>)
   13f34:	4a1e      	ldr	r2, [pc, #120]	; (13fb0 <pm_system_suspend+0xe0>)
   13f36:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   13f3a:	2100      	movs	r1, #0
   13f3c:	2300      	movs	r3, #0
   13f3e:	fbec 0105 	umlal	r0, r1, ip, r5
   13f42:	f7ed f805 	bl	f50 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
   13f46:	2101      	movs	r1, #1
   13f48:	1a38      	subs	r0, r7, r0
   13f4a:	f00e fdeb 	bl	22b24 <z_set_timeout_expiry>
	k_sched_lock();
   13f4e:	f00d fcf7 	bl	21940 <k_sched_lock>
	pm_state_notify(true);
   13f52:	2001      	movs	r0, #1
   13f54:	f7ff ff14 	bl	13d80 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13f58:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
   13f5c:	2301      	movs	r3, #1
   13f5e:	fa03 f808 	lsl.w	r8, r3, r8
   13f62:	4b14      	ldr	r3, [pc, #80]	; (13fb4 <pm_system_suspend+0xe4>)
   13f64:	4499      	add	r9, r3
   13f66:	e859 3f00 	ldrex	r3, [r9]
   13f6a:	ea43 0308 	orr.w	r3, r3, r8
   13f6e:	e849 3200 	strex	r2, r3, [r9]
   13f72:	2a00      	cmp	r2, #0
   13f74:	d1f7      	bne.n	13f66 <pm_system_suspend+0x96>
   13f76:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
   13f7a:	4b0f      	ldr	r3, [pc, #60]	; (13fb8 <pm_system_suspend+0xe8>)
   13f7c:	b133      	cbz	r3, 13f8c <pm_system_suspend+0xbc>
		pm_state_set(info->state, info->substate_id);
   13f7e:	230c      	movs	r3, #12
   13f80:	4363      	muls	r3, r4
   13f82:	18f2      	adds	r2, r6, r3
   13f84:	5cf0      	ldrb	r0, [r6, r3]
   13f86:	7851      	ldrb	r1, [r2, #1]
   13f88:	f010 ffbe 	bl	24f08 <pm_state_set>
	pm_system_resume();
   13f8c:	f7ff ff62 	bl	13e54 <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
   13f90:	4620      	mov	r0, r4
   13f92:	f7ff ff47 	bl	13e24 <atomic_clear_bit.constprop.0>
	k_sched_unlock();
   13f96:	f00e f931 	bl	221fc <k_sched_unlock>
	bool ret = true;
   13f9a:	2001      	movs	r0, #1
   13f9c:	e7c3      	b.n	13f26 <pm_system_suspend+0x56>
   13f9e:	bf00      	nop
   13fa0:	20002284 	.word	0x20002284
   13fa4:	20001e44 	.word	0x20001e44
   13fa8:	20001e38 	.word	0x20001e38
   13fac:	000f423f 	.word	0x000f423f
   13fb0:	000f4240 	.word	0x000f4240
   13fb4:	20001e48 	.word	0x20001e48
   13fb8:	00024f09 	.word	0x00024f09

00013fbc <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   13fbc:	4b05      	ldr	r3, [pc, #20]	; (13fd4 <pm_policy_state_lock_is_active+0x18>)
   13fbe:	f3bf 8f5b 	dmb	ish
   13fc2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   13fc6:	f3bf 8f5b 	dmb	ish
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
   13fca:	3800      	subs	r0, #0
   13fcc:	bf18      	it	ne
   13fce:	2001      	movne	r0, #1
   13fd0:	4770      	bx	lr
   13fd2:	bf00      	nop
   13fd4:	20001e4c 	.word	0x20001e4c

00013fd8 <pm_policy_next_state>:
{
   13fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13fdc:	b085      	sub	sp, #20
   13fde:	460f      	mov	r7, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   13fe0:	a903      	add	r1, sp, #12
   13fe2:	f000 f847 	bl	14074 <pm_state_cpu_get_all>
   13fe6:	f8df 8080 	ldr.w	r8, [pc, #128]	; 14068 <pm_policy_next_state+0x90>
   13fea:	f8df a080 	ldr.w	sl, [pc, #128]	; 1406c <pm_policy_next_state+0x94>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   13fee:	1e44      	subs	r4, r0, #1
   13ff0:	b224      	sxth	r4, r4
   13ff2:	f04f 0b00 	mov.w	fp, #0
   13ff6:	1c63      	adds	r3, r4, #1
   13ff8:	d104      	bne.n	14004 <pm_policy_next_state+0x2c>
	return NULL;
   13ffa:	2600      	movs	r6, #0
}
   13ffc:	4630      	mov	r0, r6
   13ffe:	b005      	add	sp, #20
   14000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
   14004:	9a03      	ldr	r2, [sp, #12]
   14006:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1400a:	eb02 0683 	add.w	r6, r2, r3, lsl #2
		if (pm_policy_state_lock_is_active(state->state)) {
   1400e:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
   14012:	f7ff ffd3 	bl	13fbc <pm_policy_state_lock_is_active>
   14016:	4605      	mov	r5, r0
   14018:	bb10      	cbnz	r0, 14060 <pm_policy_next_state+0x88>
   1401a:	6870      	ldr	r0, [r6, #4]
   1401c:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   14020:	46c4      	mov	ip, r8
   14022:	4629      	mov	r1, r5
   14024:	fbe0 c109 	umlal	ip, r1, r0, r9
   14028:	4652      	mov	r2, sl
   1402a:	465b      	mov	r3, fp
   1402c:	4660      	mov	r0, ip
   1402e:	f7ec ff8f 	bl	f50 <__aeabi_uldivmod>
   14032:	9001      	str	r0, [sp, #4]
   14034:	68b0      	ldr	r0, [r6, #8]
   14036:	46c4      	mov	ip, r8
   14038:	4629      	mov	r1, r5
   1403a:	fbe0 c109 	umlal	ip, r1, r0, r9
   1403e:	465b      	mov	r3, fp
   14040:	4652      	mov	r2, sl
   14042:	4660      	mov	r0, ip
   14044:	f7ec ff84 	bl	f50 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   14048:	4b09      	ldr	r3, [pc, #36]	; (14070 <pm_policy_next_state+0x98>)
   1404a:	681b      	ldr	r3, [r3, #0]
   1404c:	1c59      	adds	r1, r3, #1
   1404e:	d001      	beq.n	14054 <pm_policy_next_state+0x7c>
   14050:	4283      	cmp	r3, r0
   14052:	d905      	bls.n	14060 <pm_policy_next_state+0x88>
		if ((ticks == K_TICKS_FOREVER) ||
   14054:	1c7a      	adds	r2, r7, #1
   14056:	d0d1      	beq.n	13ffc <pm_policy_next_state+0x24>
		    (ticks >= (min_residency + exit_latency))) {
   14058:	9b01      	ldr	r3, [sp, #4]
   1405a:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
   1405c:	42b8      	cmp	r0, r7
   1405e:	d9cd      	bls.n	13ffc <pm_policy_next_state+0x24>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   14060:	3c01      	subs	r4, #1
   14062:	b224      	sxth	r4, r4
   14064:	e7c7      	b.n	13ff6 <pm_policy_next_state+0x1e>
   14066:	bf00      	nop
   14068:	000f423f 	.word	0x000f423f
   1406c:	000f4240 	.word	0x000f4240
   14070:	20000550 	.word	0x20000550

00014074 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   14074:	b908      	cbnz	r0, 1407a <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   14076:	4b02      	ldr	r3, [pc, #8]	; (14080 <pm_state_cpu_get_all+0xc>)
   14078:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   1407a:	2000      	movs	r0, #0
   1407c:	4770      	bx	lr
   1407e:	bf00      	nop
   14080:	000280fc 	.word	0x000280fc

00014084 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
   14084:	4904      	ldr	r1, [pc, #16]	; (14098 <sub_bytes+0x14>)
   14086:	1e43      	subs	r3, r0, #1
   14088:	300f      	adds	r0, #15
   1408a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1408e:	5c8a      	ldrb	r2, [r1, r2]
   14090:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   14092:	4283      	cmp	r3, r0
   14094:	d1f9      	bne.n	1408a <sub_bytes+0x6>
	}
}
   14096:	4770      	bx	lr
   14098:	00028c57 	.word	0x00028c57

0001409c <tc_aes128_set_encrypt_key>:
{
   1409c:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   1409e:	4e26      	ldr	r6, [pc, #152]	; (14138 <tc_aes128_set_encrypt_key+0x9c>)
{
   140a0:	4607      	mov	r7, r0
   140a2:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   140a4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   140a6:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   140a8:	ad01      	add	r5, sp, #4
   140aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   140ac:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   140ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   140b0:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   140b4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
   140b8:	4638      	mov	r0, r7
   140ba:	2f00      	cmp	r7, #0
   140bc:	d038      	beq.n	14130 <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
   140be:	2c00      	cmp	r4, #0
   140c0:	d038      	beq.n	14134 <tc_aes128_set_encrypt_key+0x98>
   140c2:	1f38      	subs	r0, r7, #4
   140c4:	4621      	mov	r1, r4
   140c6:	4602      	mov	r2, r0
   140c8:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   140ca:	784b      	ldrb	r3, [r1, #1]
   140cc:	780d      	ldrb	r5, [r1, #0]
   140ce:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   140d0:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   140d4:	78cd      	ldrb	r5, [r1, #3]
   140d6:	432b      	orrs	r3, r5
   140d8:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
   140da:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   140dc:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   140e0:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   140e2:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   140e6:	d1f0      	bne.n	140ca <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   140e8:	4c14      	ldr	r4, [pc, #80]	; (1413c <tc_aes128_set_encrypt_key+0xa0>)
   140ea:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   140ec:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   140ee:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   140f0:	d116      	bne.n	14120 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   140f2:	f3c3 4207 	ubfx	r2, r3, #16, #8
   140f6:	5ca5      	ldrb	r5, [r4, r2]
   140f8:	0e1a      	lsrs	r2, r3, #24
   140fa:	5ca2      	ldrb	r2, [r4, r2]
   140fc:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   14100:	f3c3 2507 	ubfx	r5, r3, #8, #8
   14104:	b2db      	uxtb	r3, r3
   14106:	5d65      	ldrb	r5, [r4, r5]
   14108:	5ce3      	ldrb	r3, [r4, r3]
   1410a:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   1410e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   14112:	ad0c      	add	r5, sp, #48	; 0x30
   14114:	f021 0303 	bic.w	r3, r1, #3
   14118:	442b      	add	r3, r5
   1411a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   1411e:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
   14120:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   14124:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   14126:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   14128:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   1412a:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   1412c:	d1de      	bne.n	140ec <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
   1412e:	2001      	movs	r0, #1
}
   14130:	b00d      	add	sp, #52	; 0x34
   14132:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   14134:	4620      	mov	r0, r4
   14136:	e7fb      	b.n	14130 <tc_aes128_set_encrypt_key+0x94>
   14138:	00027f84 	.word	0x00027f84
   1413c:	00028c57 	.word	0x00028c57

00014140 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   14140:	4901      	ldr	r1, [pc, #4]	; (14148 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   14142:	2210      	movs	r2, #16
	str	r2, [r1]
   14144:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   14146:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   14148:	e000ed10 	.word	0xe000ed10

0001414c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   1414c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   1414e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   14150:	f380 8811 	msr	BASEPRI, r0
	isb
   14154:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   14158:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   1415c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   1415e:	b662      	cpsie	i
	isb
   14160:	f3bf 8f6f 	isb	sy

	bx	lr
   14164:	4770      	bx	lr
   14166:	bf00      	nop

00014168 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   14168:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   1416a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   1416c:	f381 8811 	msr	BASEPRI, r1

	wfe
   14170:	bf20      	wfe

	msr	BASEPRI, r0
   14172:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   14176:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   14178:	4770      	bx	lr
   1417a:	bf00      	nop

0001417c <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1417c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1417e:	4605      	mov	r5, r0

	if (esf != NULL) {
   14180:	460c      	mov	r4, r1
   14182:	b1c9      	cbz	r1, 141b8 <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   14184:	688b      	ldr	r3, [r1, #8]
   14186:	9300      	str	r3, [sp, #0]
   14188:	e9d1 2300 	ldrd	r2, r3, [r1]
   1418c:	480e      	ldr	r0, [pc, #56]	; (141c8 <z_arm_fatal_error+0x4c>)
   1418e:	2145      	movs	r1, #69	; 0x45
   14190:	f010 f90b 	bl	243aa <z_log_minimal_printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   14194:	6963      	ldr	r3, [r4, #20]
   14196:	9300      	str	r3, [sp, #0]
   14198:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   1419c:	480b      	ldr	r0, [pc, #44]	; (141cc <z_arm_fatal_error+0x50>)
   1419e:	2145      	movs	r1, #69	; 0x45
   141a0:	f010 f903 	bl	243aa <z_log_minimal_printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   141a4:	69e2      	ldr	r2, [r4, #28]
   141a6:	480a      	ldr	r0, [pc, #40]	; (141d0 <z_arm_fatal_error+0x54>)
   141a8:	2145      	movs	r1, #69	; 0x45
   141aa:	f010 f8fe 	bl	243aa <z_log_minimal_printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   141ae:	69a2      	ldr	r2, [r4, #24]
   141b0:	4808      	ldr	r0, [pc, #32]	; (141d4 <z_arm_fatal_error+0x58>)
   141b2:	2145      	movs	r1, #69	; 0x45
   141b4:	f010 f8f9 	bl	243aa <z_log_minimal_printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   141b8:	4621      	mov	r1, r4
   141ba:	4628      	mov	r0, r5
}
   141bc:	b003      	add	sp, #12
   141be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
   141c2:	f00b be6d 	b.w	1fea0 <z_fatal_error>
   141c6:	bf00      	nop
   141c8:	00028d57 	.word	0x00028d57
   141cc:	00028d8b 	.word	0x00028d8b
   141d0:	00028dbf 	.word	0x00028dbf
   141d4:	00028dd3 	.word	0x00028dd3

000141d8 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   141d8:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   141da:	2b00      	cmp	r3, #0
   141dc:	db08      	blt.n	141f0 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   141de:	2201      	movs	r2, #1
   141e0:	f000 001f 	and.w	r0, r0, #31
   141e4:	fa02 f000 	lsl.w	r0, r2, r0
   141e8:	095b      	lsrs	r3, r3, #5
   141ea:	4a02      	ldr	r2, [pc, #8]	; (141f4 <arch_irq_enable+0x1c>)
   141ec:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   141f0:	4770      	bx	lr
   141f2:	bf00      	nop
   141f4:	e000e100 	.word	0xe000e100

000141f8 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   141f8:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   141fa:	2b00      	cmp	r3, #0
   141fc:	db0d      	blt.n	1421a <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   141fe:	2201      	movs	r2, #1
   14200:	095b      	lsrs	r3, r3, #5
   14202:	f000 001f 	and.w	r0, r0, #31
   14206:	fa02 f000 	lsl.w	r0, r2, r0
   1420a:	3320      	adds	r3, #32
   1420c:	4a03      	ldr	r2, [pc, #12]	; (1421c <arch_irq_disable+0x24>)
   1420e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   14212:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14216:	f3bf 8f6f 	isb	sy
}
   1421a:	4770      	bx	lr
   1421c:	e000e100 	.word	0xe000e100

00014220 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   14220:	4b05      	ldr	r3, [pc, #20]	; (14238 <arch_irq_is_enabled+0x18>)
   14222:	0942      	lsrs	r2, r0, #5
   14224:	f000 001f 	and.w	r0, r0, #31
   14228:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   1422c:	2301      	movs	r3, #1
   1422e:	fa03 f000 	lsl.w	r0, r3, r0
}
   14232:	4010      	ands	r0, r2
   14234:	4770      	bx	lr
   14236:	bf00      	nop
   14238:	e000e100 	.word	0xe000e100

0001423c <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
   1423c:	b538      	push	{r3, r4, r5, lr}
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   1423e:	07d3      	lsls	r3, r2, #31
{
   14240:	4605      	mov	r5, r0
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   14242:	d41e      	bmi.n	14282 <z_arm_irq_priority_set+0x46>
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
   14244:	1c8c      	adds	r4, r1, #2
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   14246:	2c07      	cmp	r4, #7
   14248:	d908      	bls.n	1425c <z_arm_irq_priority_set+0x20>
   1424a:	490f      	ldr	r1, [pc, #60]	; (14288 <z_arm_irq_priority_set+0x4c>)
   1424c:	480f      	ldr	r0, [pc, #60]	; (1428c <z_arm_irq_priority_set+0x50>)
   1424e:	2257      	movs	r2, #87	; 0x57
   14250:	f010 f89d 	bl	2438e <assert_print>
   14254:	480c      	ldr	r0, [pc, #48]	; (14288 <z_arm_irq_priority_set+0x4c>)
   14256:	2157      	movs	r1, #87	; 0x57
   14258:	f010 f892 	bl	24380 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   1425c:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   1425e:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14260:	bfac      	ite	ge
   14262:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14266:	4b0a      	ldrlt	r3, [pc, #40]	; (14290 <z_arm_irq_priority_set+0x54>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14268:	ea4f 1444 	mov.w	r4, r4, lsl #5
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1426c:	bfb8      	it	lt
   1426e:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14272:	b2e4      	uxtb	r4, r4
   14274:	bfaa      	itet	ge
   14276:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1427a:	555c      	strblt	r4, [r3, r5]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1427c:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
}
   14280:	bd38      	pop	{r3, r4, r5, pc}
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   14282:	2400      	movs	r4, #0
   14284:	e7ea      	b.n	1425c <z_arm_irq_priority_set+0x20>
   14286:	bf00      	nop
   14288:	00028e06 	.word	0x00028e06
   1428c:	000289af 	.word	0x000289af
   14290:	e000ed14 	.word	0xe000ed14

00014294 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   14294:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   14296:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   14298:	4b04      	ldr	r3, [pc, #16]	; (142ac <_arch_isr_direct_pm+0x18>)
   1429a:	699a      	ldr	r2, [r3, #24]
   1429c:	b11a      	cbz	r2, 142a6 <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
   1429e:	2200      	movs	r2, #0
   142a0:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   142a2:	f013 f9f6 	bl	27692 <z_pm_save_idle_exit>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   142a6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   142a8:	bd08      	pop	{r3, pc}
   142aa:	bf00      	nop
   142ac:	20002284 	.word	0x20002284

000142b0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   142b0:	bf30      	wfi
    b z_SysNmiOnReset
   142b2:	f7ff bffd 	b.w	142b0 <z_SysNmiOnReset>
   142b6:	bf00      	nop

000142b8 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   142b8:	4a0b      	ldr	r2, [pc, #44]	; (142e8 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   142ba:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   142bc:	4b0b      	ldr	r3, [pc, #44]	; (142ec <z_arm_prep_c+0x34>)
   142be:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   142c2:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   142c4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   142c8:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   142cc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   142d0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   142d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   142d8:	f00b fe58 	bl	1ff8c <z_bss_zero>
	z_data_copy();
   142dc:	f00e fa9e 	bl	2281c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   142e0:	f000 fb02 	bl	148e8 <z_arm_interrupt_init>
	z_cstart();
   142e4:	f00b fe96 	bl	20014 <z_cstart>
   142e8:	00000000 	.word	0x00000000
   142ec:	e000ed00 	.word	0xe000ed00

000142f0 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   142f0:	4a09      	ldr	r2, [pc, #36]	; (14318 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   142f2:	490a      	ldr	r1, [pc, #40]	; (1431c <arch_swap+0x2c>)
	_current->arch.basepri = key;
   142f4:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   142f6:	6809      	ldr	r1, [r1, #0]
   142f8:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   142fa:	4909      	ldr	r1, [pc, #36]	; (14320 <arch_swap+0x30>)
	_current->arch.basepri = key;
   142fc:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   142fe:	684b      	ldr	r3, [r1, #4]
   14300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   14304:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
   14306:	2300      	movs	r3, #0
   14308:	f383 8811 	msr	BASEPRI, r3
   1430c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   14310:	6893      	ldr	r3, [r2, #8]
}
   14312:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   14314:	4770      	bx	lr
   14316:	bf00      	nop
   14318:	20002284 	.word	0x20002284
   1431c:	000285e0 	.word	0x000285e0
   14320:	e000ed00 	.word	0xe000ed00

00014324 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   14324:	4912      	ldr	r1, [pc, #72]	; (14370 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   14326:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   14328:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   1432c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   1432e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   14332:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   14336:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   14338:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   1433c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   14340:	4f0c      	ldr	r7, [pc, #48]	; (14374 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   14342:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   14346:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   14348:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   1434a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   1434c:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   1434e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   14350:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   14352:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   14356:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   14358:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   1435a:	f000 fb61 	bl	14a20 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   1435e:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   14362:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   14366:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   1436a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   1436e:	4770      	bx	lr
    ldr r1, =_kernel
   14370:	20002284 	.word	0x20002284
    ldr v4, =_SCS_ICSR
   14374:	e000ed04 	.word	0xe000ed04

00014378 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   14378:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   1437c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   1437e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   14382:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   14386:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   14388:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   1438c:	2902      	cmp	r1, #2
    beq _oops
   1438e:	d0ff      	beq.n	14390 <_oops>

00014390 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   14390:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   14392:	f010 fda5 	bl	24ee0 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   14396:	bd01      	pop	{r0, pc}

00014398 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   14398:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   1439c:	9b00      	ldr	r3, [sp, #0]
   1439e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   143a2:	490a      	ldr	r1, [pc, #40]	; (143cc <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   143a4:	9b01      	ldr	r3, [sp, #4]
   143a6:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   143aa:	9b02      	ldr	r3, [sp, #8]
   143ac:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   143b0:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   143b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   143b8:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   143bc:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   143c0:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   143c2:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   143c4:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   143c6:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   143c8:	4770      	bx	lr
   143ca:	bf00      	nop
   143cc:	00024115 	.word	0x00024115

000143d0 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   143d0:	4a09      	ldr	r2, [pc, #36]	; (143f8 <z_check_thread_stack_fail+0x28>)
{
   143d2:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
   143d4:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
   143d6:	b170      	cbz	r0, 143f6 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   143d8:	f113 0f16 	cmn.w	r3, #22
   143dc:	6e80      	ldr	r0, [r0, #104]	; 0x68
   143de:	d005      	beq.n	143ec <z_check_thread_stack_fail+0x1c>
   143e0:	f1a0 0220 	sub.w	r2, r0, #32
   143e4:	429a      	cmp	r2, r3
   143e6:	d805      	bhi.n	143f4 <z_check_thread_stack_fail+0x24>
   143e8:	4283      	cmp	r3, r0
   143ea:	d203      	bcs.n	143f4 <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
   143ec:	4281      	cmp	r1, r0
   143ee:	bf28      	it	cs
   143f0:	2000      	movcs	r0, #0
   143f2:	4770      	bx	lr
   143f4:	2000      	movs	r0, #0
}
   143f6:	4770      	bx	lr
   143f8:	20002284 	.word	0x20002284

000143fc <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   143fc:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   143fe:	4b09      	ldr	r3, [pc, #36]	; (14424 <arch_switch_to_main_thread+0x28>)
   14400:	6098      	str	r0, [r3, #8]
{
   14402:	460d      	mov	r5, r1
   14404:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   14406:	f000 fb0b 	bl	14a20 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   1440a:	4620      	mov	r0, r4
   1440c:	f385 8809 	msr	PSP, r5
   14410:	2100      	movs	r1, #0
   14412:	b663      	cpsie	if
   14414:	f381 8811 	msr	BASEPRI, r1
   14418:	f3bf 8f6f 	isb	sy
   1441c:	2200      	movs	r2, #0
   1441e:	2300      	movs	r3, #0
   14420:	f00f fe78 	bl	24114 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   14424:	20002284 	.word	0x20002284

00014428 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   14428:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   1442a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   1442c:	4a0b      	ldr	r2, [pc, #44]	; (1445c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   1442e:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   14430:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   14432:	bf1e      	ittt	ne
	movne	r1, #0
   14434:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   14436:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   14438:	f013 f92b 	blne	27692 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   1443c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   1443e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   14442:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   14446:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   1444a:	4905      	ldr	r1, [pc, #20]	; (14460 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   1444c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   1444e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   14450:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   14452:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   14456:	4903      	ldr	r1, [pc, #12]	; (14464 <_isr_wrapper+0x3c>)
	bx r1
   14458:	4708      	bx	r1
   1445a:	0000      	.short	0x0000
	ldr r2, =_kernel
   1445c:	20002284 	.word	0x20002284
	ldr r1, =_sw_isr_table
   14460:	00027c34 	.word	0x00027c34
	ldr r1, =z_arm_int_exit
   14464:	00014469 	.word	0x00014469

00014468 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   14468:	4b04      	ldr	r3, [pc, #16]	; (1447c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   1446a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   1446c:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   1446e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   14470:	d003      	beq.n	1447a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   14472:	4903      	ldr	r1, [pc, #12]	; (14480 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   14474:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   14478:	600a      	str	r2, [r1, #0]

0001447a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   1447a:	4770      	bx	lr
	ldr r3, =_kernel
   1447c:	20002284 	.word	0x20002284
	ldr r1, =_SCS_ICSR
   14480:	e000ed04 	.word	0xe000ed04

00014484 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
   14484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   14488:	4c39      	ldr	r4, [pc, #228]	; (14570 <mem_manage_fault+0xec>)
{
   1448a:	4680      	mov	r8, r0
   1448c:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   1448e:	4839      	ldr	r0, [pc, #228]	; (14574 <mem_manage_fault+0xf0>)
   14490:	2145      	movs	r1, #69	; 0x45
{
   14492:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
   14494:	f00f ff89 	bl	243aa <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   14498:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1449a:	06da      	lsls	r2, r3, #27
   1449c:	d503      	bpl.n	144a6 <mem_manage_fault+0x22>
		PR_FAULT_INFO("  Stacking error (context area might be"
   1449e:	4836      	ldr	r0, [pc, #216]	; (14578 <mem_manage_fault+0xf4>)
   144a0:	2145      	movs	r1, #69	; 0x45
   144a2:	f00f ff82 	bl	243aa <z_log_minimal_printk>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   144a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   144a8:	071b      	lsls	r3, r3, #28
   144aa:	d503      	bpl.n	144b4 <mem_manage_fault+0x30>
		PR_FAULT_INFO("  Unstacking error");
   144ac:	4833      	ldr	r0, [pc, #204]	; (1457c <mem_manage_fault+0xf8>)
   144ae:	2145      	movs	r1, #69	; 0x45
   144b0:	f00f ff7b 	bl	243aa <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   144b4:	4c2e      	ldr	r4, [pc, #184]	; (14570 <mem_manage_fault+0xec>)
   144b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   144b8:	079f      	lsls	r7, r3, #30
   144ba:	d429      	bmi.n	14510 <mem_manage_fault+0x8c>
	uint32_t mmfar = -EINVAL;
   144bc:	f06f 0715 	mvn.w	r7, #21
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   144c0:	4c2b      	ldr	r4, [pc, #172]	; (14570 <mem_manage_fault+0xec>)
   144c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   144c4:	07d9      	lsls	r1, r3, #31
   144c6:	d503      	bpl.n	144d0 <mem_manage_fault+0x4c>
		PR_FAULT_INFO("  Instruction Access Violation");
   144c8:	482d      	ldr	r0, [pc, #180]	; (14580 <mem_manage_fault+0xfc>)
   144ca:	2145      	movs	r1, #69	; 0x45
   144cc:	f00f ff6d 	bl	243aa <z_log_minimal_printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   144d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   144d2:	069a      	lsls	r2, r3, #26
   144d4:	d503      	bpl.n	144de <mem_manage_fault+0x5a>
		PR_FAULT_INFO(
   144d6:	482b      	ldr	r0, [pc, #172]	; (14584 <mem_manage_fault+0x100>)
   144d8:	2145      	movs	r1, #69	; 0x45
   144da:	f00f ff66 	bl	243aa <z_log_minimal_printk>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   144de:	4d24      	ldr	r5, [pc, #144]	; (14570 <mem_manage_fault+0xec>)
   144e0:	6aab      	ldr	r3, [r5, #40]	; 0x28
   144e2:	06db      	lsls	r3, r3, #27
   144e4:	d428      	bmi.n	14538 <mem_manage_fault+0xb4>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   144e6:	6aab      	ldr	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   144e8:	079c      	lsls	r4, r3, #30
   144ea:	d425      	bmi.n	14538 <mem_manage_fault+0xb4>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   144ec:	2400      	movs	r4, #0
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   144ee:	4b20      	ldr	r3, [pc, #128]	; (14570 <mem_manage_fault+0xec>)
   144f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   144f2:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   144f4:	bf42      	ittt	mi
   144f6:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
   144f8:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
   144fc:	625a      	strmi	r2, [r3, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   144fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   14500:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   14504:	629a      	str	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   14506:	2300      	movs	r3, #0
   14508:	7033      	strb	r3, [r6, #0]

	return reason;
}
   1450a:	4620      	mov	r0, r4
   1450c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		PR_FAULT_INFO("  Data Access Violation");
   14510:	481d      	ldr	r0, [pc, #116]	; (14588 <mem_manage_fault+0x104>)
   14512:	2145      	movs	r1, #69	; 0x45
   14514:	f00f ff49 	bl	243aa <z_log_minimal_printk>
		uint32_t temp = SCB->MMFAR;
   14518:	6b67      	ldr	r7, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   1451a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1451c:	0618      	lsls	r0, r3, #24
   1451e:	d5cd      	bpl.n	144bc <mem_manage_fault+0x38>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   14520:	481a      	ldr	r0, [pc, #104]	; (1458c <mem_manage_fault+0x108>)
   14522:	463a      	mov	r2, r7
   14524:	2145      	movs	r1, #69	; 0x45
   14526:	f00f ff40 	bl	243aa <z_log_minimal_printk>
			if (from_hard_fault != 0) {
   1452a:	2d00      	cmp	r5, #0
   1452c:	d0c8      	beq.n	144c0 <mem_manage_fault+0x3c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   1452e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14530:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   14534:	62a3      	str	r3, [r4, #40]	; 0x28
   14536:	e7c3      	b.n	144c0 <mem_manage_fault+0x3c>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   14538:	686b      	ldr	r3, [r5, #4]
   1453a:	0518      	lsls	r0, r3, #20
   1453c:	d5d6      	bpl.n	144ec <mem_manage_fault+0x68>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   1453e:	4641      	mov	r1, r8
   14540:	4638      	mov	r0, r7
   14542:	f7ff ff45 	bl	143d0 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   14546:	4604      	mov	r4, r0
   14548:	b118      	cbz	r0, 14552 <mem_manage_fault+0xce>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   1454a:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   1454e:	2402      	movs	r4, #2
   14550:	e7cd      	b.n	144ee <mem_manage_fault+0x6a>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
   14552:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14554:	06d9      	lsls	r1, r3, #27
   14556:	d5c9      	bpl.n	144ec <mem_manage_fault+0x68>
   14558:	490d      	ldr	r1, [pc, #52]	; (14590 <mem_manage_fault+0x10c>)
   1455a:	480e      	ldr	r0, [pc, #56]	; (14594 <mem_manage_fault+0x110>)
   1455c:	f240 1249 	movw	r2, #329	; 0x149
   14560:	f00f ff15 	bl	2438e <assert_print>
   14564:	480a      	ldr	r0, [pc, #40]	; (14590 <mem_manage_fault+0x10c>)
   14566:	f240 1149 	movw	r1, #329	; 0x149
   1456a:	f00f ff09 	bl	24380 <assert_post_action>
   1456e:	e7be      	b.n	144ee <mem_manage_fault+0x6a>
   14570:	e000ed00 	.word	0xe000ed00
   14574:	00028e3c 	.word	0x00028e3c
   14578:	00028e57 	.word	0x00028e57
   1457c:	00028e8f 	.word	0x00028e8f
   14580:	00028edf 	.word	0x00028edf
   14584:	00028f03 	.word	0x00028f03
   14588:	00028ea7 	.word	0x00028ea7
   1458c:	00028ec4 	.word	0x00028ec4
   14590:	00028f37 	.word	0x00028f37
   14594:	000289af 	.word	0x000289af

00014598 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   14598:	b510      	push	{r4, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   1459a:	4c1d      	ldr	r4, [pc, #116]	; (14610 <usage_fault.constprop.0+0x78>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
   1459c:	481d      	ldr	r0, [pc, #116]	; (14614 <usage_fault.constprop.0+0x7c>)
   1459e:	2145      	movs	r1, #69	; 0x45
   145a0:	f00f ff03 	bl	243aa <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   145a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   145a6:	019b      	lsls	r3, r3, #6
   145a8:	d503      	bpl.n	145b2 <usage_fault.constprop.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
   145aa:	481b      	ldr	r0, [pc, #108]	; (14618 <usage_fault.constprop.0+0x80>)
   145ac:	2145      	movs	r1, #69	; 0x45
   145ae:	f00f fefc 	bl	243aa <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   145b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   145b4:	01dc      	lsls	r4, r3, #7
   145b6:	d503      	bpl.n	145c0 <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
   145b8:	4818      	ldr	r0, [pc, #96]	; (1461c <usage_fault.constprop.0+0x84>)
   145ba:	2145      	movs	r1, #69	; 0x45
   145bc:	f00f fef5 	bl	243aa <z_log_minimal_printk>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   145c0:	4c13      	ldr	r4, [pc, #76]	; (14610 <usage_fault.constprop.0+0x78>)
   145c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   145c4:	0318      	lsls	r0, r3, #12
   145c6:	d503      	bpl.n	145d0 <usage_fault.constprop.0+0x38>
		PR_FAULT_INFO("  No coprocessor instructions");
   145c8:	4815      	ldr	r0, [pc, #84]	; (14620 <usage_fault.constprop.0+0x88>)
   145ca:	2145      	movs	r1, #69	; 0x45
   145cc:	f00f feed 	bl	243aa <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   145d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   145d2:	0359      	lsls	r1, r3, #13
   145d4:	d503      	bpl.n	145de <usage_fault.constprop.0+0x46>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   145d6:	4813      	ldr	r0, [pc, #76]	; (14624 <usage_fault.constprop.0+0x8c>)
   145d8:	2145      	movs	r1, #69	; 0x45
   145da:	f00f fee6 	bl	243aa <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   145de:	4c0c      	ldr	r4, [pc, #48]	; (14610 <usage_fault.constprop.0+0x78>)
   145e0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   145e2:	039a      	lsls	r2, r3, #14
   145e4:	d503      	bpl.n	145ee <usage_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   145e6:	4810      	ldr	r0, [pc, #64]	; (14628 <usage_fault.constprop.0+0x90>)
   145e8:	2145      	movs	r1, #69	; 0x45
   145ea:	f00f fede 	bl	243aa <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   145ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   145f0:	03db      	lsls	r3, r3, #15
   145f2:	d503      	bpl.n	145fc <usage_fault.constprop.0+0x64>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   145f4:	480d      	ldr	r0, [pc, #52]	; (1462c <usage_fault.constprop.0+0x94>)
   145f6:	2145      	movs	r1, #69	; 0x45
   145f8:	f00f fed7 	bl	243aa <z_log_minimal_printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   145fc:	4a04      	ldr	r2, [pc, #16]	; (14610 <usage_fault.constprop.0+0x78>)
   145fe:	6a93      	ldr	r3, [r2, #40]	; 0x28
   14600:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   14604:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   14608:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
   1460a:	2000      	movs	r0, #0
   1460c:	bd10      	pop	{r4, pc}
   1460e:	bf00      	nop
   14610:	e000ed00 	.word	0xe000ed00
   14614:	00028f71 	.word	0x00028f71
   14618:	00028f8e 	.word	0x00028f8e
   1461c:	00028fa6 	.word	0x00028fa6
   14620:	00028fc5 	.word	0x00028fc5
   14624:	00028fe8 	.word	0x00028fe8
   14628:	00029012 	.word	0x00029012
   1462c:	00029031 	.word	0x00029031

00014630 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   14630:	b570      	push	{r4, r5, r6, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   14632:	4c23      	ldr	r4, [pc, #140]	; (146c0 <bus_fault.constprop.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   14634:	4606      	mov	r6, r0
   14636:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   14638:	4822      	ldr	r0, [pc, #136]	; (146c4 <bus_fault.constprop.0+0x94>)
   1463a:	2145      	movs	r1, #69	; 0x45
   1463c:	f00f feb5 	bl	243aa <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   14640:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14642:	04d9      	lsls	r1, r3, #19
   14644:	d503      	bpl.n	1464e <bus_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
   14646:	4820      	ldr	r0, [pc, #128]	; (146c8 <bus_fault.constprop.0+0x98>)
   14648:	2145      	movs	r1, #69	; 0x45
   1464a:	f00f feae 	bl	243aa <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   1464e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14650:	051a      	lsls	r2, r3, #20
   14652:	d503      	bpl.n	1465c <bus_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
   14654:	481d      	ldr	r0, [pc, #116]	; (146cc <bus_fault.constprop.0+0x9c>)
   14656:	2145      	movs	r1, #69	; 0x45
   14658:	f00f fea7 	bl	243aa <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   1465c:	4c18      	ldr	r4, [pc, #96]	; (146c0 <bus_fault.constprop.0+0x90>)
   1465e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14660:	059b      	lsls	r3, r3, #22
   14662:	d510      	bpl.n	14686 <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
   14664:	481a      	ldr	r0, [pc, #104]	; (146d0 <bus_fault.constprop.0+0xa0>)
   14666:	2145      	movs	r1, #69	; 0x45
   14668:	f00f fe9f 	bl	243aa <z_log_minimal_printk>
		STORE_xFAR(bfar, SCB->BFAR);
   1466c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   1466e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14670:	0418      	lsls	r0, r3, #16
   14672:	d508      	bpl.n	14686 <bus_fault.constprop.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   14674:	4817      	ldr	r0, [pc, #92]	; (146d4 <bus_fault.constprop.0+0xa4>)
   14676:	2145      	movs	r1, #69	; 0x45
   14678:	f00f fe97 	bl	243aa <z_log_minimal_printk>
			if (from_hard_fault != 0) {
   1467c:	b11e      	cbz	r6, 14686 <bus_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   1467e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14680:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   14684:	62a3      	str	r3, [r4, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   14686:	4c0e      	ldr	r4, [pc, #56]	; (146c0 <bus_fault.constprop.0+0x90>)
   14688:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1468a:	0559      	lsls	r1, r3, #21
   1468c:	d503      	bpl.n	14696 <bus_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
   1468e:	4812      	ldr	r0, [pc, #72]	; (146d8 <bus_fault.constprop.0+0xa8>)
   14690:	2145      	movs	r1, #69	; 0x45
   14692:	f00f fe8a 	bl	243aa <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   14696:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14698:	05da      	lsls	r2, r3, #23
   1469a:	d50b      	bpl.n	146b4 <bus_fault.constprop.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
   1469c:	480f      	ldr	r0, [pc, #60]	; (146dc <bus_fault.constprop.0+0xac>)
   1469e:	2145      	movs	r1, #69	; 0x45
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   146a0:	f00f fe83 	bl	243aa <z_log_minimal_printk>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   146a4:	4a06      	ldr	r2, [pc, #24]	; (146c0 <bus_fault.constprop.0+0x90>)
   146a6:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   146a8:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   146aa:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   146ae:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   146b0:	7028      	strb	r0, [r5, #0]
}
   146b2:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   146b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   146b6:	049b      	lsls	r3, r3, #18
   146b8:	d5f4      	bpl.n	146a4 <bus_fault.constprop.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   146ba:	4809      	ldr	r0, [pc, #36]	; (146e0 <bus_fault.constprop.0+0xb0>)
   146bc:	2145      	movs	r1, #69	; 0x45
   146be:	e7ef      	b.n	146a0 <bus_fault.constprop.0+0x70>
   146c0:	e000ed00 	.word	0xe000ed00
   146c4:	00029061 	.word	0x00029061
   146c8:	0002907c 	.word	0x0002907c
   146cc:	00028e8f 	.word	0x00028e8f
   146d0:	00029092 	.word	0x00029092
   146d4:	000290b0 	.word	0x000290b0
   146d8:	000290ca 	.word	0x000290ca
   146dc:	000290ea 	.word	0x000290ea
   146e0:	00028f03 	.word	0x00028f03

000146e4 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   146e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   146e8:	4b69      	ldr	r3, [pc, #420]	; (14890 <z_arm_fault+0x1ac>)
   146ea:	685f      	ldr	r7, [r3, #4]
{
   146ec:	b08a      	sub	sp, #40	; 0x28
   146ee:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   146f0:	f3c7 0408 	ubfx	r4, r7, #0, #9
   146f4:	2600      	movs	r6, #0
   146f6:	f386 8811 	msr	BASEPRI, r6
   146fa:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   146fe:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   14702:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   14706:	d107      	bne.n	14718 <z_arm_fault+0x34>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   14708:	f002 030c 	and.w	r3, r2, #12
   1470c:	2b08      	cmp	r3, #8
   1470e:	d110      	bne.n	14732 <z_arm_fault+0x4e>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   14710:	4860      	ldr	r0, [pc, #384]	; (14894 <z_arm_fault+0x1b0>)
   14712:	2145      	movs	r1, #69	; 0x45
   14714:	f00f fe49 	bl	243aa <z_log_minimal_printk>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   14718:	495f      	ldr	r1, [pc, #380]	; (14898 <z_arm_fault+0x1b4>)
   1471a:	4860      	ldr	r0, [pc, #384]	; (1489c <z_arm_fault+0x1b8>)
   1471c:	f240 32fb 	movw	r2, #1019	; 0x3fb
   14720:	f00f fe35 	bl	2438e <assert_print>
   14724:	485c      	ldr	r0, [pc, #368]	; (14898 <z_arm_fault+0x1b4>)
   14726:	f240 31fb 	movw	r1, #1019	; 0x3fb
   1472a:	f00f fe29 	bl	24380 <assert_post_action>
   1472e:	2500      	movs	r5, #0
   14730:	e005      	b.n	1473e <z_arm_fault+0x5a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   14732:	0712      	lsls	r2, r2, #28
			ptr_esf = (z_arch_esf_t *)msp;
   14734:	bf5c      	itt	pl
   14736:	4605      	movpl	r5, r0
			*nested_exc = true;
   14738:	2601      	movpl	r6, #1
	__ASSERT(esf != NULL,
   1473a:	2d00      	cmp	r5, #0
   1473c:	d0ec      	beq.n	14718 <z_arm_fault+0x34>
	*recoverable = false;
   1473e:	f04f 0800 	mov.w	r8, #0
	switch (fault) {
   14742:	1ee3      	subs	r3, r4, #3
	*recoverable = false;
   14744:	f88d 8007 	strb.w	r8, [sp, #7]
	switch (fault) {
   14748:	2b09      	cmp	r3, #9
   1474a:	f200 808e 	bhi.w	1486a <z_arm_fault+0x186>
   1474e:	e8df f003 	tbb	[pc, r3]
   14752:	8105      	.short	0x8105
   14754:	8c8c6985 	.word	0x8c8c6985
   14758:	898c8c8c 	.word	0x898c8c8c
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1475c:	4f4c      	ldr	r7, [pc, #304]	; (14890 <z_arm_fault+0x1ac>)
	PR_FAULT_INFO("***** HARD FAULT *****");
   1475e:	4850      	ldr	r0, [pc, #320]	; (148a0 <z_arm_fault+0x1bc>)
   14760:	2145      	movs	r1, #69	; 0x45
   14762:	f00f fe22 	bl	243aa <z_log_minimal_printk>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   14766:	6afc      	ldr	r4, [r7, #44]	; 0x2c
	*recoverable = false;
   14768:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1476c:	f014 0402 	ands.w	r4, r4, #2
   14770:	d005      	beq.n	1477e <z_arm_fault+0x9a>
		PR_EXC("  Bus fault on vector table read");
   14772:	484c      	ldr	r0, [pc, #304]	; (148a4 <z_arm_fault+0x1c0>)
   14774:	2145      	movs	r1, #69	; 0x45
	PR_FAULT_INFO(
   14776:	f00f fe18 	bl	243aa <z_log_minimal_printk>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   1477a:	2400      	movs	r4, #0
}
   1477c:	e006      	b.n	1478c <z_arm_fault+0xa8>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   1477e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14780:	2b00      	cmp	r3, #0
   14782:	da23      	bge.n	147cc <z_arm_fault+0xe8>
		PR_EXC("  Debug event");
   14784:	4848      	ldr	r0, [pc, #288]	; (148a8 <z_arm_fault+0x1c4>)
   14786:	2145      	movs	r1, #69	; 0x45
   14788:	f00f fe0f 	bl	243aa <z_log_minimal_printk>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   1478c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14790:	b9cb      	cbnz	r3, 147c6 <z_arm_fault+0xe2>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   14792:	aa02      	add	r2, sp, #8
   14794:	f105 0720 	add.w	r7, r5, #32
   14798:	6828      	ldr	r0, [r5, #0]
   1479a:	6869      	ldr	r1, [r5, #4]
   1479c:	4613      	mov	r3, r2
   1479e:	c303      	stmia	r3!, {r0, r1}
   147a0:	3508      	adds	r5, #8
   147a2:	42bd      	cmp	r5, r7
   147a4:	461a      	mov	r2, r3
   147a6:	d1f7      	bne.n	14798 <z_arm_fault+0xb4>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   147a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   147aa:	2e00      	cmp	r6, #0
   147ac:	d06a      	beq.n	14884 <z_arm_fault+0x1a0>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   147ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
   147b2:	b922      	cbnz	r2, 147be <z_arm_fault+0xda>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   147b4:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   147b8:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   147bc:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   147be:	a902      	add	r1, sp, #8
   147c0:	4620      	mov	r0, r4
   147c2:	f7ff fcdb 	bl	1417c <z_arm_fatal_error>
}
   147c6:	b00a      	add	sp, #40	; 0x28
   147c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   147cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   147ce:	005b      	lsls	r3, r3, #1
   147d0:	d537      	bpl.n	14842 <z_arm_fault+0x15e>
		PR_EXC("  Fault escalation (see below)");
   147d2:	4836      	ldr	r0, [pc, #216]	; (148ac <z_arm_fault+0x1c8>)
   147d4:	2145      	movs	r1, #69	; 0x45
   147d6:	f00f fde8 	bl	243aa <z_log_minimal_printk>
	uint16_t fault_insn = *(ret_addr - 1);
   147da:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   147dc:	f833 2c02 	ldrh.w	r2, [r3, #-2]
   147e0:	f64d 7302 	movw	r3, #57090	; 0xdf02
   147e4:	429a      	cmp	r2, r3
   147e6:	d106      	bne.n	147f6 <z_arm_fault+0x112>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   147e8:	682a      	ldr	r2, [r5, #0]
   147ea:	4831      	ldr	r0, [pc, #196]	; (148b0 <z_arm_fault+0x1cc>)
   147ec:	2145      	movs	r1, #69	; 0x45
   147ee:	f00f fddc 	bl	243aa <z_log_minimal_printk>
			reason = esf->basic.r0;
   147f2:	682c      	ldr	r4, [r5, #0]
   147f4:	e7ca      	b.n	1478c <z_arm_fault+0xa8>
		} else if (SCB_MMFSR != 0) {
   147f6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   147fa:	b13b      	cbz	r3, 1480c <z_arm_fault+0x128>
			reason = mem_manage_fault(esf, 1, recoverable);
   147fc:	f10d 0207 	add.w	r2, sp, #7
   14800:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   14802:	4628      	mov	r0, r5
   14804:	f7ff fe3e 	bl	14484 <mem_manage_fault>
		reason = bus_fault(esf, 0, recoverable);
   14808:	4604      	mov	r4, r0
		break;
   1480a:	e7bf      	b.n	1478c <z_arm_fault+0xa8>
		} else if (SCB_BFSR != 0) {
   1480c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
   14810:	b12b      	cbz	r3, 1481e <z_arm_fault+0x13a>
			reason = bus_fault(esf, 1, recoverable);
   14812:	f10d 0107 	add.w	r1, sp, #7
   14816:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   14818:	f7ff ff0a 	bl	14630 <bus_fault.constprop.0>
   1481c:	e7f4      	b.n	14808 <z_arm_fault+0x124>
		} else if (SCB_UFSR != 0) {
   1481e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   14820:	b29b      	uxth	r3, r3
   14822:	b113      	cbz	r3, 1482a <z_arm_fault+0x146>
		reason = usage_fault(esf);
   14824:	f7ff feb8 	bl	14598 <usage_fault.constprop.0>
   14828:	e7ee      	b.n	14808 <z_arm_fault+0x124>
			__ASSERT(0,
   1482a:	491b      	ldr	r1, [pc, #108]	; (14898 <z_arm_fault+0x1b4>)
   1482c:	481b      	ldr	r0, [pc, #108]	; (1489c <z_arm_fault+0x1b8>)
   1482e:	f240 22cd 	movw	r2, #717	; 0x2cd
   14832:	f00f fdac 	bl	2438e <assert_print>
   14836:	f240 21cd 	movw	r1, #717	; 0x2cd
		__ASSERT(0,
   1483a:	4817      	ldr	r0, [pc, #92]	; (14898 <z_arm_fault+0x1b4>)
   1483c:	f00f fda0 	bl	24380 <assert_post_action>
   14840:	e7a4      	b.n	1478c <z_arm_fault+0xa8>
   14842:	4915      	ldr	r1, [pc, #84]	; (14898 <z_arm_fault+0x1b4>)
   14844:	4815      	ldr	r0, [pc, #84]	; (1489c <z_arm_fault+0x1b8>)
   14846:	f240 22d1 	movw	r2, #721	; 0x2d1
   1484a:	f00f fda0 	bl	2438e <assert_print>
   1484e:	f240 21d1 	movw	r1, #721	; 0x2d1
   14852:	e7f2      	b.n	1483a <z_arm_fault+0x156>
		reason = mem_manage_fault(esf, 0, recoverable);
   14854:	f10d 0207 	add.w	r2, sp, #7
   14858:	2100      	movs	r1, #0
   1485a:	e7d2      	b.n	14802 <z_arm_fault+0x11e>
		reason = bus_fault(esf, 0, recoverable);
   1485c:	f10d 0107 	add.w	r1, sp, #7
   14860:	2000      	movs	r0, #0
   14862:	e7d9      	b.n	14818 <z_arm_fault+0x134>
	PR_FAULT_INFO(
   14864:	4813      	ldr	r0, [pc, #76]	; (148b4 <z_arm_fault+0x1d0>)
   14866:	2145      	movs	r1, #69	; 0x45
   14868:	e785      	b.n	14776 <z_arm_fault+0x92>
	PR_FAULT_INFO("***** %s %d) *****",
   1486a:	4913      	ldr	r1, [pc, #76]	; (148b8 <z_arm_fault+0x1d4>)
   1486c:	4a13      	ldr	r2, [pc, #76]	; (148bc <z_arm_fault+0x1d8>)
   1486e:	4814      	ldr	r0, [pc, #80]	; (148c0 <z_arm_fault+0x1dc>)
   14870:	f417 7ff8 	tst.w	r7, #496	; 0x1f0
   14874:	bf08      	it	eq
   14876:	460a      	moveq	r2, r1
   14878:	f1a4 0310 	sub.w	r3, r4, #16
   1487c:	2145      	movs	r1, #69	; 0x45
   1487e:	f00f fd94 	bl	243aa <z_log_minimal_printk>
   14882:	e77a      	b.n	1477a <z_arm_fault+0x96>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   14884:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   14888:	f023 0301 	bic.w	r3, r3, #1
   1488c:	e796      	b.n	147bc <z_arm_fault+0xd8>
   1488e:	bf00      	nop
   14890:	e000ed00 	.word	0xe000ed00
   14894:	00029135 	.word	0x00029135
   14898:	00028f37 	.word	0x00028f37
   1489c:	000289af 	.word	0x000289af
   148a0:	00029165 	.word	0x00029165
   148a4:	00029181 	.word	0x00029181
   148a8:	000291a7 	.word	0x000291a7
   148ac:	000291ba 	.word	0x000291ba
   148b0:	000291de 	.word	0x000291de
   148b4:	000291ff 	.word	0x000291ff
   148b8:	00029107 	.word	0x00029107
   148bc:	0002911c 	.word	0x0002911c
   148c0:	00029228 	.word	0x00029228

000148c4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   148c4:	4a02      	ldr	r2, [pc, #8]	; (148d0 <z_arm_fault_init+0xc>)
   148c6:	6953      	ldr	r3, [r2, #20]
   148c8:	f043 0310 	orr.w	r3, r3, #16
   148cc:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   148ce:	4770      	bx	lr
   148d0:	e000ed00 	.word	0xe000ed00

000148d4 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   148d4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   148d8:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   148dc:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   148de:	4672      	mov	r2, lr
	bl z_arm_fault
   148e0:	f7ff ff00 	bl	146e4 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   148e4:	bd01      	pop	{r0, pc}
   148e6:	bf00      	nop

000148e8 <z_arm_interrupt_init>:
   148e8:	4804      	ldr	r0, [pc, #16]	; (148fc <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   148ea:	2300      	movs	r3, #0
   148ec:	2140      	movs	r1, #64	; 0x40
   148ee:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   148f0:	3301      	adds	r3, #1
   148f2:	2b27      	cmp	r3, #39	; 0x27
   148f4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   148f8:	d1f9      	bne.n	148ee <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   148fa:	4770      	bx	lr
   148fc:	e000e100 	.word	0xe000e100

00014900 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   14900:	2000      	movs	r0, #0
    msr CONTROL, r0
   14902:	f380 8814 	msr	CONTROL, r0
    isb
   14906:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   1490a:	f013 f901 	bl	27b10 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   1490e:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   14910:	490d      	ldr	r1, [pc, #52]	; (14948 <__start+0x48>)
    str r0, [r1]
   14912:	6008      	str	r0, [r1, #0]
    dsb
   14914:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   14918:	480c      	ldr	r0, [pc, #48]	; (1494c <__start+0x4c>)
    msr msp, r0
   1491a:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   1491e:	f000 f82b 	bl	14978 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   14922:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   14924:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   14928:	4809      	ldr	r0, [pc, #36]	; (14950 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   1492a:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
   1492e:	1840      	adds	r0, r0, r1
    msr PSP, r0
   14930:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   14934:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   14938:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   1493a:	4308      	orrs	r0, r1
    msr CONTROL, r0
   1493c:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   14940:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   14944:	f7ff fcb8 	bl	142b8 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   14948:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   1494c:	20004940 	.word	0x20004940
    ldr r0, =z_interrupt_stacks
   14950:	20004ac0 	.word	0x20004ac0

00014954 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   14954:	4907      	ldr	r1, [pc, #28]	; (14974 <z_arm_clear_arm_mpu_config+0x20>)
   14956:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
   1495a:	2300      	movs	r3, #0
	int num_regions =
   1495c:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
   14960:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
   14962:	4293      	cmp	r3, r2
   14964:	d100      	bne.n	14968 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   14966:	4770      	bx	lr
  MPU->RNR = rnr;
   14968:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
   1496c:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   14970:	3301      	adds	r3, #1
   14972:	e7f6      	b.n	14962 <z_arm_clear_arm_mpu_config+0xe>
   14974:	e000ed00 	.word	0xe000ed00

00014978 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   14978:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   1497a:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   1497c:	2300      	movs	r3, #0
   1497e:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   14982:	f7ff ffe7 	bl	14954 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   14986:	4b14      	ldr	r3, [pc, #80]	; (149d8 <z_arm_init_arch_hw_at_boot+0x60>)
   14988:	f04f 32ff 	mov.w	r2, #4294967295
   1498c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   14990:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   14994:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   14998:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   1499c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   149a0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   149a4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   149a8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   149ac:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   149b0:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   149b4:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
   149b8:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
   149bc:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
   149c0:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
   149c4:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
   149c8:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
   149cc:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   149ce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   149d2:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   149d6:	bd08      	pop	{r3, pc}
   149d8:	e000e100 	.word	0xe000e100

000149dc <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   149dc:	4b08      	ldr	r3, [pc, #32]	; (14a00 <z_impl_k_thread_abort+0x24>)
   149de:	689b      	ldr	r3, [r3, #8]
   149e0:	4283      	cmp	r3, r0
   149e2:	d10b      	bne.n	149fc <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   149e4:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   149e8:	b143      	cbz	r3, 149fc <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   149ea:	4b06      	ldr	r3, [pc, #24]	; (14a04 <z_impl_k_thread_abort+0x28>)
   149ec:	685a      	ldr	r2, [r3, #4]
   149ee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   149f2:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   149f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   149f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   149fa:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   149fc:	f00d be22 	b.w	22644 <z_thread_abort>
   14a00:	20002284 	.word	0x20002284
   14a04:	e000ed00 	.word	0xe000ed00

00014a08 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   14a08:	4b02      	ldr	r3, [pc, #8]	; (14a14 <z_arm_configure_static_mpu_regions+0xc>)
   14a0a:	4a03      	ldr	r2, [pc, #12]	; (14a18 <z_arm_configure_static_mpu_regions+0x10>)
   14a0c:	4803      	ldr	r0, [pc, #12]	; (14a1c <z_arm_configure_static_mpu_regions+0x14>)
   14a0e:	2101      	movs	r1, #1
   14a10:	f000 b87c 	b.w	14b0c <arm_core_mpu_configure_static_mpu_regions>
   14a14:	20010000 	.word	0x20010000
   14a18:	20000000 	.word	0x20000000
   14a1c:	000280fc 	.word	0x000280fc

00014a20 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   14a20:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   14a22:	4b05      	ldr	r3, [pc, #20]	; (14a38 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
   14a24:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
   14a26:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   14a28:	4a04      	ldr	r2, [pc, #16]	; (14a3c <z_arm_configure_dynamic_mpu_regions+0x1c>)
   14a2a:	2120      	movs	r1, #32
   14a2c:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   14a30:	4618      	mov	r0, r3
   14a32:	2101      	movs	r1, #1
   14a34:	f000 b888 	b.w	14b48 <arm_core_mpu_configure_dynamic_mpu_regions>
   14a38:	20001e68 	.word	0x20001e68
   14a3c:	150b0000 	.word	0x150b0000

00014a40 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   14a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   14a42:	4f24      	ldr	r7, [pc, #144]	; (14ad4 <mpu_configure_regions+0x94>)
	int i;
	int reg_index = start_reg_index;
   14a44:	4615      	mov	r5, r2

	for (i = 0; i < regions_num; i++) {
   14a46:	2200      	movs	r2, #0
   14a48:	428a      	cmp	r2, r1
   14a4a:	da0e      	bge.n	14a6a <mpu_configure_regions+0x2a>
		if (regions[i].size == 0U) {
   14a4c:	6844      	ldr	r4, [r0, #4]
   14a4e:	2c00      	cmp	r4, #0
   14a50:	d03c      	beq.n	14acc <mpu_configure_regions+0x8c>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
   14a52:	b193      	cbz	r3, 14a7a <mpu_configure_regions+0x3a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   14a54:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   14a58:	ea14 0f0c 	tst.w	r4, ip
   14a5c:	d007      	beq.n	14a6e <mpu_configure_regions+0x2e>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
   14a5e:	481e      	ldr	r0, [pc, #120]	; (14ad8 <mpu_configure_regions+0x98>)
   14a60:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   14a62:	f00f fca2 	bl	243aa <z_log_minimal_printk>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
   14a66:	f06f 0515 	mvn.w	r5, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   14a6a:	4628      	mov	r0, r5
   14a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
   14a6e:	2c1f      	cmp	r4, #31
   14a70:	d9f5      	bls.n	14a5e <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
   14a72:	6806      	ldr	r6, [r0, #0]
		&&
   14a74:	ea1c 0f06 	tst.w	ip, r6
   14a78:	d1f1      	bne.n	14a5e <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   14a7a:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
   14a7c:	6806      	ldr	r6, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   14a7e:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   14a82:	b2ed      	uxtb	r5, r5
	if (size <= 32U) {
   14a84:	d910      	bls.n	14aa8 <mpu_configure_regions+0x68>
	if (size > (1UL << 31)) {
   14a86:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   14a8a:	d80f      	bhi.n	14aac <mpu_configure_regions+0x6c>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   14a8c:	3c01      	subs	r4, #1
   14a8e:	fab4 f484 	clz	r4, r4
   14a92:	f1c4 041f 	rsb	r4, r4, #31
   14a96:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   14a98:	2d07      	cmp	r5, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   14a9a:	ea4c 0404 	orr.w	r4, ip, r4
   14a9e:	d907      	bls.n	14ab0 <mpu_configure_regions+0x70>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   14aa0:	480e      	ldr	r0, [pc, #56]	; (14adc <mpu_configure_regions+0x9c>)
   14aa2:	462a      	mov	r2, r5
   14aa4:	2145      	movs	r1, #69	; 0x45
   14aa6:	e7dc      	b.n	14a62 <mpu_configure_regions+0x22>
		return REGION_32B;
   14aa8:	2408      	movs	r4, #8
   14aaa:	e7f5      	b.n	14a98 <mpu_configure_regions+0x58>
		return REGION_4G;
   14aac:	243e      	movs	r4, #62	; 0x3e
   14aae:	e7f3      	b.n	14a98 <mpu_configure_regions+0x58>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   14ab0:	f026 061f 	bic.w	r6, r6, #31
				| MPU_RBAR_VALID_Msk | index;
   14ab4:	432e      	orrs	r6, r5
   14ab6:	f046 0610 	orr.w	r6, r6, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   14aba:	f044 0401 	orr.w	r4, r4, #1
   14abe:	f8c7 5098 	str.w	r5, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   14ac2:	f8c7 609c 	str.w	r6, [r7, #156]	; 0x9c
		reg_index++;
   14ac6:	3501      	adds	r5, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   14ac8:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
   14acc:	3201      	adds	r2, #1
   14ace:	300c      	adds	r0, #12
   14ad0:	e7ba      	b.n	14a48 <mpu_configure_regions+0x8>
   14ad2:	bf00      	nop
   14ad4:	e000ed00 	.word	0xe000ed00
   14ad8:	00029244 	.word	0x00029244
   14adc:	0002926c 	.word	0x0002926c

00014ae0 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   14ae0:	4b04      	ldr	r3, [pc, #16]	; (14af4 <arm_core_mpu_enable+0x14>)
   14ae2:	2205      	movs	r2, #5
   14ae4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   14ae8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14aec:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   14af0:	4770      	bx	lr
   14af2:	bf00      	nop
   14af4:	e000ed00 	.word	0xe000ed00

00014af8 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   14af8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   14afc:	4b02      	ldr	r3, [pc, #8]	; (14b08 <arm_core_mpu_disable+0x10>)
   14afe:	2200      	movs	r2, #0
   14b00:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   14b04:	4770      	bx	lr
   14b06:	bf00      	nop
   14b08:	e000ed00 	.word	0xe000ed00

00014b0c <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   14b0c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   14b0e:	4c0b      	ldr	r4, [pc, #44]	; (14b3c <arm_core_mpu_configure_static_mpu_regions+0x30>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   14b10:	2301      	movs	r3, #1
   14b12:	7822      	ldrb	r2, [r4, #0]
   14b14:	f7ff ff94 	bl	14a40 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   14b18:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   14b1a:	3016      	adds	r0, #22
   14b1c:	d10c      	bne.n	14b38 <arm_core_mpu_configure_static_mpu_regions+0x2c>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   14b1e:	4908      	ldr	r1, [pc, #32]	; (14b40 <arm_core_mpu_configure_static_mpu_regions+0x34>)
   14b20:	4808      	ldr	r0, [pc, #32]	; (14b44 <arm_core_mpu_configure_static_mpu_regions+0x38>)
   14b22:	f240 1211 	movw	r2, #273	; 0x111
   14b26:	f00f fc32 	bl	2438e <assert_print>
			regions_num);
	}
}
   14b2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   14b2e:	4804      	ldr	r0, [pc, #16]	; (14b40 <arm_core_mpu_configure_static_mpu_regions+0x34>)
   14b30:	f240 1111 	movw	r1, #273	; 0x111
   14b34:	f00f bc24 	b.w	24380 <assert_post_action>
}
   14b38:	bd10      	pop	{r4, pc}
   14b3a:	bf00      	nop
   14b3c:	20002315 	.word	0x20002315
   14b40:	00029297 	.word	0x00029297
   14b44:	000289af 	.word	0x000289af

00014b48 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
   14b48:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   14b4a:	4a10      	ldr	r2, [pc, #64]	; (14b8c <arm_core_mpu_configure_dynamic_mpu_regions+0x44>)
   14b4c:	2300      	movs	r3, #0
   14b4e:	7812      	ldrb	r2, [r2, #0]
   14b50:	f7ff ff76 	bl	14a40 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   14b54:	f110 0f16 	cmn.w	r0, #22
   14b58:	d00a      	beq.n	14b70 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>
  MPU->RNR = rnr;
   14b5a:	4b0d      	ldr	r3, [pc, #52]	; (14b90 <arm_core_mpu_configure_dynamic_mpu_regions+0x48>)
  MPU->RASR = 0U;
   14b5c:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   14b5e:	2807      	cmp	r0, #7
   14b60:	dd00      	ble.n	14b64 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
   14b62:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
   14b64:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
   14b68:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
   14b6c:	3001      	adds	r0, #1
   14b6e:	e7f6      	b.n	14b5e <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   14b70:	4908      	ldr	r1, [pc, #32]	; (14b94 <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>)
   14b72:	4809      	ldr	r0, [pc, #36]	; (14b98 <arm_core_mpu_configure_dynamic_mpu_regions+0x50>)
   14b74:	f44f 7298 	mov.w	r2, #304	; 0x130
   14b78:	f00f fc09 	bl	2438e <assert_print>
}
   14b7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   14b80:	4804      	ldr	r0, [pc, #16]	; (14b94 <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>)
   14b82:	f44f 7198 	mov.w	r1, #304	; 0x130
   14b86:	f00f bbfb 	b.w	24380 <assert_post_action>
   14b8a:	bf00      	nop
   14b8c:	20002315 	.word	0x20002315
   14b90:	e000ed00 	.word	0xe000ed00
   14b94:	00029297 	.word	0x00029297
   14b98:	000289af 	.word	0x000289af

00014b9c <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   14b9c:	4922      	ldr	r1, [pc, #136]	; (14c28 <z_arm_mpu_init+0x8c>)
{
   14b9e:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   14ba0:	680c      	ldr	r4, [r1, #0]
   14ba2:	2c08      	cmp	r4, #8
   14ba4:	d90d      	bls.n	14bc2 <z_arm_mpu_init+0x26>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   14ba6:	4921      	ldr	r1, [pc, #132]	; (14c2c <z_arm_mpu_init+0x90>)
   14ba8:	4821      	ldr	r0, [pc, #132]	; (14c30 <z_arm_mpu_init+0x94>)
   14baa:	f44f 72a4 	mov.w	r2, #328	; 0x148
   14bae:	f00f fbee 	bl	2438e <assert_print>
   14bb2:	481e      	ldr	r0, [pc, #120]	; (14c2c <z_arm_mpu_init+0x90>)
   14bb4:	f44f 71a4 	mov.w	r1, #328	; 0x148
   14bb8:	f00f fbe2 	bl	24380 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
   14bbc:	f04f 30ff 	mov.w	r0, #4294967295
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
   14bc0:	bd10      	pop	{r4, pc}
	arm_core_mpu_disable();
   14bc2:	f7ff ff99 	bl	14af8 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   14bc6:	6848      	ldr	r0, [r1, #4]
   14bc8:	491a      	ldr	r1, [pc, #104]	; (14c34 <z_arm_mpu_init+0x98>)
   14bca:	2200      	movs	r2, #0
   14bcc:	4294      	cmp	r4, r2
   14bce:	f100 000c 	add.w	r0, r0, #12
   14bd2:	d116      	bne.n	14c02 <z_arm_mpu_init+0x66>
	static_regions_num = mpu_config.num_regions;
   14bd4:	4b18      	ldr	r3, [pc, #96]	; (14c38 <z_arm_mpu_init+0x9c>)
   14bd6:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
   14bd8:	f7ff ff82 	bl	14ae0 <arm_core_mpu_enable>
	__ASSERT(
   14bdc:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
   14be0:	f3c3 2307 	ubfx	r3, r3, #8, #8
   14be4:	2b08      	cmp	r3, #8
   14be6:	d00a      	beq.n	14bfe <z_arm_mpu_init+0x62>
   14be8:	4910      	ldr	r1, [pc, #64]	; (14c2c <z_arm_mpu_init+0x90>)
   14bea:	4811      	ldr	r0, [pc, #68]	; (14c30 <z_arm_mpu_init+0x94>)
   14bec:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
   14bf0:	f00f fbcd 	bl	2438e <assert_print>
   14bf4:	480d      	ldr	r0, [pc, #52]	; (14c2c <z_arm_mpu_init+0x90>)
   14bf6:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
   14bfa:	f00f fbc1 	bl	24380 <assert_post_action>
	return 0;
   14bfe:	2000      	movs	r0, #0
   14c00:	e7de      	b.n	14bc0 <z_arm_mpu_init+0x24>
   14c02:	f8c1 2098 	str.w	r2, [r1, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   14c06:	f850 3c0c 	ldr.w	r3, [r0, #-12]
   14c0a:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   14c0e:	4313      	orrs	r3, r2
   14c10:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   14c14:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   14c18:	f850 3c04 	ldr.w	r3, [r0, #-4]
   14c1c:	f043 0301 	orr.w	r3, r3, #1
   14c20:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   14c24:	3201      	adds	r2, #1
   14c26:	e7d1      	b.n	14bcc <z_arm_mpu_init+0x30>
   14c28:	00028108 	.word	0x00028108
   14c2c:	00029297 	.word	0x00029297
   14c30:	000289af 	.word	0x000289af
   14c34:	e000ed00 	.word	0xe000ed00
   14c38:	20002315 	.word	0x20002315

00014c3c <malloc_prepare>:
					 CONFIG_SRAM_BASE_ADDRESS))
	#endif /* CONFIG_XTENSA */
#endif

static int malloc_prepare(const struct device *unused)
{
   14c3c:	b508      	push	{r3, lr}

	/*
	 * Validate that the memory space available for the newlib heap is
	 * greater than the minimum required size.
	 */
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
   14c3e:	4b09      	ldr	r3, [pc, #36]	; (14c64 <malloc_prepare+0x28>)
   14c40:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
   14c44:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   14c48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   14c4c:	d208      	bcs.n	14c60 <malloc_prepare+0x24>
   14c4e:	4906      	ldr	r1, [pc, #24]	; (14c68 <malloc_prepare+0x2c>)
   14c50:	4806      	ldr	r0, [pc, #24]	; (14c6c <malloc_prepare+0x30>)
   14c52:	2281      	movs	r2, #129	; 0x81
   14c54:	f00f fb9b 	bl	2438e <assert_print>
   14c58:	4803      	ldr	r0, [pc, #12]	; (14c68 <malloc_prepare+0x2c>)
   14c5a:	2181      	movs	r1, #129	; 0x81
   14c5c:	f00f fb90 	bl	24380 <assert_post_action>
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
   14c60:	2000      	movs	r0, #0
   14c62:	bd08      	pop	{r3, pc}
   14c64:	200063c9 	.word	0x200063c9
   14c68:	000292ce 	.word	0x000292ce
   14c6c:	000289af 	.word	0x000289af

00014c70 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   14c70:	4b01      	ldr	r3, [pc, #4]	; (14c78 <__stdout_hook_install+0x8>)
   14c72:	6018      	str	r0, [r3, #0]
}
   14c74:	4770      	bx	lr
   14c76:	bf00      	nop
   14c78:	20000554 	.word	0x20000554

00014c7c <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   14c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14c7e:	4f0a      	ldr	r7, [pc, #40]	; (14ca8 <z_impl_zephyr_write_stdout+0x2c>)
   14c80:	460d      	mov	r5, r1
   14c82:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   14c84:	f1c0 0401 	rsb	r4, r0, #1
   14c88:	19a3      	adds	r3, r4, r6
   14c8a:	429d      	cmp	r5, r3
   14c8c:	dc01      	bgt.n	14c92 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   14c8e:	4628      	mov	r0, r5
   14c90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   14c92:	7873      	ldrb	r3, [r6, #1]
   14c94:	2b0a      	cmp	r3, #10
   14c96:	d102      	bne.n	14c9e <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   14c98:	683b      	ldr	r3, [r7, #0]
   14c9a:	200d      	movs	r0, #13
   14c9c:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   14c9e:	683b      	ldr	r3, [r7, #0]
   14ca0:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   14ca4:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   14ca6:	e7ef      	b.n	14c88 <z_impl_zephyr_write_stdout+0xc>
   14ca8:	20000554 	.word	0x20000554

00014cac <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
   14cac:	b508      	push	{r3, lr}
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
   14cae:	211d      	movs	r1, #29
   14cb0:	4804      	ldr	r0, [pc, #16]	; (14cc4 <__chk_fail+0x18>)
   14cb2:	f7ff ffe3 	bl	14c7c <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
   14cb6:	4040      	eors	r0, r0
   14cb8:	f380 8811 	msr	BASEPRI, r0
   14cbc:	f04f 0003 	mov.w	r0, #3
   14cc0:	df02      	svc	2
	CODE_UNREACHABLE;
   14cc2:	bf00      	nop
   14cc4:	000292fe 	.word	0x000292fe

00014cc8 <nordicsemi_nrf52_init>:
	__asm__ volatile(
   14cc8:	f04f 0340 	mov.w	r3, #64	; 0x40
   14ccc:	f3ef 8211 	mrs	r2, BASEPRI
   14cd0:	f383 8812 	msr	BASEPRI_MAX, r3
   14cd4:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   14cd8:	4906      	ldr	r1, [pc, #24]	; (14cf4 <nordicsemi_nrf52_init+0x2c>)
   14cda:	2301      	movs	r3, #1
   14cdc:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   14ce0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   14ce4:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
   14ce8:	f382 8811 	msr	BASEPRI, r2
   14cec:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   14cf0:	2000      	movs	r0, #0
   14cf2:	4770      	bx	lr
   14cf4:	4001e000 	.word	0x4001e000

00014cf8 <sys_arch_reboot>:
    *p_gpregret = val;
   14cf8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14cfc:	b2c0      	uxtb	r0, r0
   14cfe:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   14d02:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   14d06:	4905      	ldr	r1, [pc, #20]	; (14d1c <sys_arch_reboot+0x24>)
   14d08:	4b05      	ldr	r3, [pc, #20]	; (14d20 <sys_arch_reboot+0x28>)
   14d0a:	68ca      	ldr	r2, [r1, #12]
   14d0c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   14d10:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   14d12:	60cb      	str	r3, [r1, #12]
   14d14:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   14d18:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   14d1a:	e7fd      	b.n	14d18 <sys_arch_reboot+0x20>
   14d1c:	e000ed00 	.word	0xe000ed00
   14d20:	05fa0004 	.word	0x05fa0004

00014d24 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   14d24:	b120      	cbz	r0, 14d30 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   14d26:	4b03      	ldr	r3, [pc, #12]	; (14d34 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   14d28:	0180      	lsls	r0, r0, #6
   14d2a:	f043 0301 	orr.w	r3, r3, #1
   14d2e:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   14d30:	4770      	bx	lr
   14d32:	bf00      	nop
   14d34:	00028010 	.word	0x00028010

00014d38 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   14d38:	4b0e      	ldr	r3, [pc, #56]	; (14d74 <bt_hex_real+0x3c>)
   14d3a:	2940      	cmp	r1, #64	; 0x40
{
   14d3c:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
   14d3e:	bf28      	it	cs
   14d40:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
   14d42:	4c0d      	ldr	r4, [pc, #52]	; (14d78 <bt_hex_real+0x40>)
   14d44:	1846      	adds	r6, r0, r1
   14d46:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
   14d48:	42b0      	cmp	r0, r6
   14d4a:	f103 0302 	add.w	r3, r3, #2
   14d4e:	d104      	bne.n	14d5a <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
   14d50:	2300      	movs	r3, #0
   14d52:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
   14d56:	4807      	ldr	r0, [pc, #28]	; (14d74 <bt_hex_real+0x3c>)
   14d58:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
   14d5a:	7802      	ldrb	r2, [r0, #0]
   14d5c:	0912      	lsrs	r2, r2, #4
   14d5e:	5ca2      	ldrb	r2, [r4, r2]
   14d60:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   14d64:	f810 2b01 	ldrb.w	r2, [r0], #1
   14d68:	f002 020f 	and.w	r2, r2, #15
   14d6c:	5ca2      	ldrb	r2, [r4, r2]
   14d6e:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
   14d72:	e7e9      	b.n	14d48 <bt_hex_real+0x10>
   14d74:	20002334 	.word	0x20002334
   14d78:	0002932f 	.word	0x0002932f

00014d7c <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
   14d7c:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
   14d7e:	7803      	ldrb	r3, [r0, #0]
   14d80:	b08b      	sub	sp, #44	; 0x2c
   14d82:	4604      	mov	r4, r0
   14d84:	ad07      	add	r5, sp, #28
   14d86:	2b03      	cmp	r3, #3
   14d88:	d821      	bhi.n	14dce <bt_addr_le_str_real+0x52>
   14d8a:	e8df f003 	tbb	[pc, r3]
   14d8e:	1a02      	.short	0x1a02
   14d90:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
   14d92:	4912      	ldr	r1, [pc, #72]	; (14ddc <bt_addr_le_str_real+0x60>)
		strcpy(type, "random");
   14d94:	4628      	mov	r0, r5
   14d96:	f012 fe93 	bl	27ac0 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   14d9a:	7863      	ldrb	r3, [r4, #1]
   14d9c:	9304      	str	r3, [sp, #16]
   14d9e:	78a3      	ldrb	r3, [r4, #2]
   14da0:	9303      	str	r3, [sp, #12]
   14da2:	78e3      	ldrb	r3, [r4, #3]
   14da4:	9302      	str	r3, [sp, #8]
   14da6:	7923      	ldrb	r3, [r4, #4]
   14da8:	9301      	str	r3, [sp, #4]
   14daa:	7963      	ldrb	r3, [r4, #5]
   14dac:	9300      	str	r3, [sp, #0]
   14dae:	4a0c      	ldr	r2, [pc, #48]	; (14de0 <bt_addr_le_str_real+0x64>)
   14db0:	79a3      	ldrb	r3, [r4, #6]
   14db2:	9505      	str	r5, [sp, #20]
   14db4:	211e      	movs	r1, #30
   14db6:	480b      	ldr	r0, [pc, #44]	; (14de4 <bt_addr_le_str_real+0x68>)
   14db8:	f00f f94b 	bl	24052 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   14dbc:	4809      	ldr	r0, [pc, #36]	; (14de4 <bt_addr_le_str_real+0x68>)
   14dbe:	b00b      	add	sp, #44	; 0x2c
   14dc0:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   14dc2:	4909      	ldr	r1, [pc, #36]	; (14de8 <bt_addr_le_str_real+0x6c>)
   14dc4:	e7e6      	b.n	14d94 <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
   14dc6:	4909      	ldr	r1, [pc, #36]	; (14dec <bt_addr_le_str_real+0x70>)
   14dc8:	e7e4      	b.n	14d94 <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
   14dca:	4909      	ldr	r1, [pc, #36]	; (14df0 <bt_addr_le_str_real+0x74>)
   14dcc:	e7e2      	b.n	14d94 <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   14dce:	4a09      	ldr	r2, [pc, #36]	; (14df4 <bt_addr_le_str_real+0x78>)
   14dd0:	210a      	movs	r1, #10
   14dd2:	4628      	mov	r0, r5
   14dd4:	f00f f93d 	bl	24052 <snprintk>
		break;
   14dd8:	e7df      	b.n	14d9a <bt_addr_le_str_real+0x1e>
   14dda:	bf00      	nop
   14ddc:	00028739 	.word	0x00028739
   14de0:	00028762 	.word	0x00028762
   14de4:	20002316 	.word	0x20002316
   14de8:	00028740 	.word	0x00028740
   14dec:	00028747 	.word	0x00028747
   14df0:	00028751 	.word	0x00028751
   14df4:	0002875b 	.word	0x0002875b

00014df8 <save_id>:
}

#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
   14df8:	b508      	push	{r3, lr}
	int err;
	BT_INFO("Saving ID");
   14dfa:	480a      	ldr	r0, [pc, #40]	; (14e24 <save_id+0x2c>)
   14dfc:	2149      	movs	r1, #73	; 0x49
   14dfe:	f00f fad4 	bl	243aa <z_log_minimal_printk>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
   14e02:	4909      	ldr	r1, [pc, #36]	; (14e28 <save_id+0x30>)
	err = settings_save_one("bt/id", &bt_dev.id_addr,
   14e04:	4809      	ldr	r0, [pc, #36]	; (14e2c <save_id+0x34>)
   14e06:	79ca      	ldrb	r2, [r1, #7]
   14e08:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   14e0c:	f7fe fd90 	bl	13930 <settings_save_one>
	if (err) {
   14e10:	4602      	mov	r2, r0
   14e12:	b128      	cbz	r0, 14e20 <save_id+0x28>
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
	if (err) {
		BT_ERR("Failed to save IRK (err %d)", err);
	}
#endif
}
   14e14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save ID (err %d)", err);
   14e18:	4805      	ldr	r0, [pc, #20]	; (14e30 <save_id+0x38>)
   14e1a:	2145      	movs	r1, #69	; 0x45
   14e1c:	f00f bac5 	b.w	243aa <z_log_minimal_printk>
}
   14e20:	bd08      	pop	{r3, pc}
   14e22:	bf00      	nop
   14e24:	00029347 	.word	0x00029347
   14e28:	200002d0 	.word	0x200002d0
   14e2c:	00029356 	.word	0x00029356
   14e30:	0002935c 	.word	0x0002935c

00014e34 <set>:
{
   14e34:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   14e38:	4e22      	ldr	r6, [pc, #136]	; (14ec4 <set+0x90>)
   14e3a:	f3bf 8f5b 	dmb	ish
   14e3e:	6834      	ldr	r4, [r6, #0]
   14e40:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   14e44:	f014 0401 	ands.w	r4, r4, #1
{
   14e48:	4605      	mov	r5, r0
   14e4a:	4617      	mov	r7, r2
   14e4c:	4698      	mov	r8, r3
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   14e4e:	d01d      	beq.n	14e8c <set+0x58>
	if (!name) {
   14e50:	b930      	cbnz	r0, 14e60 <set+0x2c>
		BT_ERR("Insufficient number of arguments");
   14e52:	481d      	ldr	r0, [pc, #116]	; (14ec8 <set+0x94>)
   14e54:	2145      	movs	r1, #69	; 0x45
   14e56:	f00f faa8 	bl	243aa <z_log_minimal_printk>
	return -ENOENT;
   14e5a:	f06f 0401 	mvn.w	r4, #1
   14e5e:	e015      	b.n	14e8c <set+0x58>
	len = settings_name_next(name, &next);
   14e60:	a901      	add	r1, sp, #4
   14e62:	f00f fd43 	bl	248ec <settings_name_next>
	if (!strncmp(name, "id", len)) {
   14e66:	4919      	ldr	r1, [pc, #100]	; (14ecc <set+0x98>)
	len = settings_name_next(name, &next);
   14e68:	4602      	mov	r2, r0
	if (!strncmp(name, "id", len)) {
   14e6a:	4628      	mov	r0, r5
   14e6c:	f012 fe30 	bl	27ad0 <strncmp>
   14e70:	4604      	mov	r4, r0
   14e72:	2800      	cmp	r0, #0
   14e74:	d1f1      	bne.n	14e5a <set+0x26>
   14e76:	f3bf 8f5b 	dmb	ish
   14e7a:	6833      	ldr	r3, [r6, #0]
   14e7c:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
   14e80:	071b      	lsls	r3, r3, #28
   14e82:	d507      	bpl.n	14e94 <set+0x60>
			BT_WARN("Ignoring identities stored in flash");
   14e84:	4812      	ldr	r0, [pc, #72]	; (14ed0 <set+0x9c>)
   14e86:	2157      	movs	r1, #87	; 0x57
   14e88:	f00f fa8f 	bl	243aa <z_log_minimal_printk>
}
   14e8c:	4620      	mov	r0, r4
   14e8e:	b002      	add	sp, #8
   14e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
   14e94:	f1a6 05cc 	sub.w	r5, r6, #204	; 0xcc
   14e98:	2207      	movs	r2, #7
   14e9a:	4629      	mov	r1, r5
   14e9c:	4640      	mov	r0, r8
   14e9e:	47b8      	blx	r7
		if (len < sizeof(bt_dev.id_addr[0])) {
   14ea0:	2806      	cmp	r0, #6
   14ea2:	d809      	bhi.n	14eb8 <set+0x84>
				BT_ERR("Invalid length ID address in storage");
   14ea4:	480b      	ldr	r0, [pc, #44]	; (14ed4 <set+0xa0>)
   14ea6:	2145      	movs	r1, #69	; 0x45
   14ea8:	f00f fa7f 	bl	243aa <z_log_minimal_printk>
			(void)memset(bt_dev.id_addr, 0,
   14eac:	f846 4ccc 	str.w	r4, [r6, #-204]
			bt_dev.id_count = 0U;
   14eb0:	71ec      	strb	r4, [r5, #7]
			(void)memset(bt_dev.id_addr, 0,
   14eb2:	f8c5 4003 	str.w	r4, [r5, #3]
			bt_dev.id_count = 0U;
   14eb6:	e7e9      	b.n	14e8c <set+0x58>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
   14eb8:	2307      	movs	r3, #7
   14eba:	fbb0 f0f3 	udiv	r0, r0, r3
   14ebe:	71e8      	strb	r0, [r5, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
   14ec0:	e7e4      	b.n	14e8c <set+0x58>
   14ec2:	bf00      	nop
   14ec4:	2000039c 	.word	0x2000039c
   14ec8:	0002937c 	.word	0x0002937c
   14ecc:	0002874e 	.word	0x0002874e
   14ed0:	000293a2 	.word	0x000293a2
   14ed4:	000293cb 	.word	0x000293cb

00014ed8 <bt_settings_encode_key>:
{
   14ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14edc:	b088      	sub	sp, #32
		snprintk(path, path_size,
   14ede:	799c      	ldrb	r4, [r3, #6]
{
   14ee0:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		snprintk(path, path_size,
   14ee4:	795d      	ldrb	r5, [r3, #5]
   14ee6:	791e      	ldrb	r6, [r3, #4]
   14ee8:	78df      	ldrb	r7, [r3, #3]
   14eea:	f893 c002 	ldrb.w	ip, [r3, #2]
   14eee:	f893 e001 	ldrb.w	lr, [r3, #1]
   14ef2:	781b      	ldrb	r3, [r3, #0]
	if (key) {
   14ef4:	f1b8 0f00 	cmp.w	r8, #0
   14ef8:	d00e      	beq.n	14f18 <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
   14efa:	e9cd 3806 	strd	r3, r8, [sp, #24]
   14efe:	e9cd ce04 	strd	ip, lr, [sp, #16]
   14f02:	4613      	mov	r3, r2
   14f04:	e9cd 6702 	strd	r6, r7, [sp, #8]
   14f08:	e9cd 4500 	strd	r4, r5, [sp]
   14f0c:	4a08      	ldr	r2, [pc, #32]	; (14f30 <bt_settings_encode_key+0x58>)
   14f0e:	f00f f8a0 	bl	24052 <snprintk>
}
   14f12:	b008      	add	sp, #32
   14f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
   14f18:	e9cd e305 	strd	lr, r3, [sp, #20]
   14f1c:	e9cd 7c03 	strd	r7, ip, [sp, #12]
   14f20:	4613      	mov	r3, r2
   14f22:	e9cd 5601 	strd	r5, r6, [sp, #4]
   14f26:	4a03      	ldr	r2, [pc, #12]	; (14f34 <bt_settings_encode_key+0x5c>)
   14f28:	9400      	str	r4, [sp, #0]
   14f2a:	f00f f892 	bl	24052 <snprintk>
}
   14f2e:	e7f0      	b.n	14f12 <bt_settings_encode_key+0x3a>
   14f30:	000293f5 	.word	0x000293f5
   14f34:	00029419 	.word	0x00029419

00014f38 <bt_settings_save_id>:

K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
   14f38:	4801      	ldr	r0, [pc, #4]	; (14f40 <bt_settings_save_id+0x8>)
   14f3a:	f00c b9ff 	b.w	2133c <k_work_submit>
   14f3e:	bf00      	nop
   14f40:	20000558 	.word	0x20000558

00014f44 <commit>:
}

static int commit(void)
{
   14f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14f46:	4d1e      	ldr	r5, [pc, #120]	; (14fc0 <commit+0x7c>)
   14f48:	f3bf 8f5b 	dmb	ish
   14f4c:	682b      	ldr	r3, [r5, #0]
   14f4e:	f3bf 8f5b 	dmb	ish
	int err;

	BT_DBG("");

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   14f52:	f013 0f01 	tst.w	r3, #1
   14f56:	462e      	mov	r6, r5
   14f58:	d101      	bne.n	14f5e <commit+0x1a>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
   14f5a:	2400      	movs	r4, #0
   14f5c:	e00c      	b.n	14f78 <commit+0x34>
	if (!bt_dev.id_count) {
   14f5e:	f815 3cc5 	ldrb.w	r3, [r5, #-197]
   14f62:	f1a5 07cc 	sub.w	r7, r5, #204	; 0xcc
   14f66:	b983      	cbnz	r3, 14f8a <commit+0x46>
		err = bt_setup_public_id_addr();
   14f68:	f001 fc00 	bl	1676c <bt_setup_public_id_addr>
		if (err) {
   14f6c:	4604      	mov	r4, r0
   14f6e:	b128      	cbz	r0, 14f7c <commit+0x38>
			BT_ERR("Unable to setup an identity address");
   14f70:	4814      	ldr	r0, [pc, #80]	; (14fc4 <commit+0x80>)
   14f72:	2145      	movs	r1, #69	; 0x45
   14f74:	f00f fa19 	bl	243aa <z_log_minimal_printk>
}
   14f78:	4620      	mov	r0, r4
   14f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_dev.id_count) {
   14f7c:	79fb      	ldrb	r3, [r7, #7]
   14f7e:	b923      	cbnz	r3, 14f8a <commit+0x46>
		err = bt_setup_random_id_addr();
   14f80:	f001 fc4a 	bl	16818 <bt_setup_random_id_addr>
		if (err) {
   14f84:	4604      	mov	r4, r0
   14f86:	2800      	cmp	r0, #0
   14f88:	d1f2      	bne.n	14f70 <commit+0x2c>
   14f8a:	f3bf 8f5b 	dmb	ish
   14f8e:	682b      	ldr	r3, [r5, #0]
   14f90:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   14f94:	075a      	lsls	r2, r3, #29
   14f96:	d401      	bmi.n	14f9c <commit+0x58>
		bt_finalize_init();
   14f98:	f001 f8ec 	bl	16174 <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14f9c:	f3bf 8f5b 	dmb	ish
   14fa0:	e856 3f00 	ldrex	r3, [r6]
   14fa4:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
   14fa8:	e846 2100 	strex	r1, r2, [r6]
   14fac:	2900      	cmp	r1, #0
   14fae:	d1f7      	bne.n	14fa0 <commit+0x5c>
   14fb0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
   14fb4:	041b      	lsls	r3, r3, #16
   14fb6:	d5d0      	bpl.n	14f5a <commit+0x16>
		bt_settings_save_id();
   14fb8:	f7ff ffbe 	bl	14f38 <bt_settings_save_id>
   14fbc:	e7cd      	b.n	14f5a <commit+0x16>
   14fbe:	bf00      	nop
   14fc0:	2000039c 	.word	0x2000039c
   14fc4:	0002943a 	.word	0x0002943a

00014fc8 <bt_settings_init>:

SETTINGS_STATIC_HANDLER_DEFINE(bt, "bt", NULL, set, commit, NULL);

int bt_settings_init(void)
{
   14fc8:	b510      	push	{r4, lr}
	int err;

	BT_DBG("");

	err = settings_subsys_init();
   14fca:	f7fe fe21 	bl	13c10 <settings_subsys_init>
	if (err) {
   14fce:	4604      	mov	r4, r0
   14fd0:	b120      	cbz	r0, 14fdc <bt_settings_init+0x14>
		BT_ERR("settings_subsys_init failed (err %d)", err);
   14fd2:	4602      	mov	r2, r0
   14fd4:	2145      	movs	r1, #69	; 0x45
   14fd6:	4802      	ldr	r0, [pc, #8]	; (14fe0 <bt_settings_init+0x18>)
   14fd8:	f00f f9e7 	bl	243aa <z_log_minimal_printk>
		return err;
	}

	return 0;
}
   14fdc:	4620      	mov	r0, r4
   14fde:	bd10      	pop	{r4, pc}
   14fe0:	00029463 	.word	0x00029463

00014fe4 <uuid_to_uuid128>:
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
	switch (src->type) {
   14fe4:	7803      	ldrb	r3, [r0, #0]
   14fe6:	2b01      	cmp	r3, #1
{
   14fe8:	b530      	push	{r4, r5, lr}
	switch (src->type) {
   14fea:	d013      	beq.n	15014 <uuid_to_uuid128+0x30>
   14fec:	2b02      	cmp	r3, #2
   14fee:	d027      	beq.n	15040 <uuid_to_uuid128+0x5c>
   14ff0:	b97b      	cbnz	r3, 15012 <uuid_to_uuid128+0x2e>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   14ff2:	4b19      	ldr	r3, [pc, #100]	; (15058 <uuid_to_uuid128+0x74>)
   14ff4:	460a      	mov	r2, r1
   14ff6:	f103 0410 	add.w	r4, r3, #16
   14ffa:	f853 5b04 	ldr.w	r5, [r3], #4
   14ffe:	f842 5b04 	str.w	r5, [r2], #4
   15002:	42a3      	cmp	r3, r4
   15004:	d1f9      	bne.n	14ffa <uuid_to_uuid128+0x16>
   15006:	781b      	ldrb	r3, [r3, #0]
   15008:	7013      	strb	r3, [r2, #0]
		sys_put_le16(BT_UUID_16(src)->val,
   1500a:	8843      	ldrh	r3, [r0, #2]
	dst[0] = val;
   1500c:	734b      	strb	r3, [r1, #13]
	dst[1] = val >> 8;
   1500e:	0a1b      	lsrs	r3, r3, #8
   15010:	738b      	strb	r3, [r1, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   15012:	bd30      	pop	{r4, r5, pc}
		*dst = uuid128_base;
   15014:	4b10      	ldr	r3, [pc, #64]	; (15058 <uuid_to_uuid128+0x74>)
   15016:	460a      	mov	r2, r1
   15018:	f103 0410 	add.w	r4, r3, #16
   1501c:	f853 5b04 	ldr.w	r5, [r3], #4
   15020:	f842 5b04 	str.w	r5, [r2], #4
   15024:	42a3      	cmp	r3, r4
   15026:	d1f9      	bne.n	1501c <uuid_to_uuid128+0x38>
   15028:	781b      	ldrb	r3, [r3, #0]
   1502a:	7013      	strb	r3, [r2, #0]
		sys_put_le32(BT_UUID_32(src)->val,
   1502c:	6843      	ldr	r3, [r0, #4]
	dst[0] = val;
   1502e:	734b      	strb	r3, [r1, #13]
	dst[1] = val >> 8;
   15030:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   15034:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   15036:	73cb      	strb	r3, [r1, #15]
	dst[1] = val >> 8;
   15038:	0a1b      	lsrs	r3, r3, #8
   1503a:	738a      	strb	r2, [r1, #14]
   1503c:	740b      	strb	r3, [r1, #16]
}
   1503e:	e7e8      	b.n	15012 <uuid_to_uuid128+0x2e>
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   15040:	f100 0310 	add.w	r3, r0, #16
   15044:	f850 2b04 	ldr.w	r2, [r0], #4
   15048:	f841 2b04 	str.w	r2, [r1], #4
   1504c:	4298      	cmp	r0, r3
   1504e:	d1f9      	bne.n	15044 <uuid_to_uuid128+0x60>
   15050:	7803      	ldrb	r3, [r0, #0]
   15052:	700b      	strb	r3, [r1, #0]
   15054:	e7dd      	b.n	15012 <uuid_to_uuid128+0x2e>
   15056:	bf00      	nop
   15058:	0002949c 	.word	0x0002949c

0001505c <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   1505c:	b570      	push	{r4, r5, r6, lr}
   1505e:	461c      	mov	r4, r3
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   15060:	f000 03fd 	and.w	r3, r0, #253	; 0xfd
   15064:	2b01      	cmp	r3, #1
{
   15066:	4605      	mov	r5, r0
   15068:	4616      	mov	r6, r2
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   1506a:	d00a      	beq.n	15082 <bt_buf_get_rx+0x26>
   1506c:	2805      	cmp	r0, #5
   1506e:	d008      	beq.n	15082 <bt_buf_get_rx+0x26>
   15070:	490b      	ldr	r1, [pc, #44]	; (150a0 <bt_buf_get_rx+0x44>)
   15072:	480c      	ldr	r0, [pc, #48]	; (150a4 <bt_buf_get_rx+0x48>)
   15074:	2241      	movs	r2, #65	; 0x41
   15076:	f00f f98a 	bl	2438e <assert_print>
   1507a:	4809      	ldr	r0, [pc, #36]	; (150a0 <bt_buf_get_rx+0x44>)
   1507c:	2141      	movs	r1, #65	; 0x41
   1507e:	f00f f97f 	bl	24380 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   15082:	4623      	mov	r3, r4
   15084:	4808      	ldr	r0, [pc, #32]	; (150a8 <bt_buf_get_rx+0x4c>)
   15086:	4632      	mov	r2, r6
   15088:	f011 fef7 	bl	26e7a <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   1508c:	4604      	mov	r4, r0
   1508e:	b120      	cbz	r0, 1509a <bt_buf_get_rx+0x3e>
	net_buf_simple_reserve(&buf->b, reserve);
   15090:	2100      	movs	r1, #0
   15092:	3008      	adds	r0, #8
   15094:	f007 f8c6 	bl	1c224 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   15098:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   1509a:	4620      	mov	r0, r4
   1509c:	bd70      	pop	{r4, r5, r6, pc}
   1509e:	bf00      	nop
   150a0:	000294ad 	.word	0x000294ad
   150a4:	000289af 	.word	0x000289af
   150a8:	200009a8 	.word	0x200009a8

000150ac <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   150ac:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   150ae:	490b      	ldr	r1, [pc, #44]	; (150dc <bt_buf_get_cmd_complete+0x30>)
{
   150b0:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
   150b2:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
{
   150b6:	b510      	push	{r4, lr}
	if (bt_dev.sent_cmd) {
   150b8:	b920      	cbnz	r0, 150c4 <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   150ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   150be:	2001      	movs	r0, #1
   150c0:	f7ff bfcc 	b.w	1505c <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
   150c4:	f007 fa12 	bl	1c4ec <net_buf_ref>
   150c8:	2301      	movs	r3, #1
		buf->len = 0U;
   150ca:	2100      	movs	r1, #0
   150cc:	7503      	strb	r3, [r0, #20]
   150ce:	8181      	strh	r1, [r0, #12]
		buf = net_buf_ref(bt_dev.sent_cmd);
   150d0:	4604      	mov	r4, r0
   150d2:	3008      	adds	r0, #8
   150d4:	f007 f8a6 	bl	1c224 <net_buf_simple_reserve>
}
   150d8:	4620      	mov	r0, r4
   150da:	bd10      	pop	{r4, pc}
   150dc:	200002d0 	.word	0x200002d0

000150e0 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   150e0:	b570      	push	{r4, r5, r6, lr}
   150e2:	4604      	mov	r4, r0
	switch (evt) {
   150e4:	2c0f      	cmp	r4, #15
{
   150e6:	460d      	mov	r5, r1
   150e8:	4610      	mov	r0, r2
   150ea:	4619      	mov	r1, r3
	switch (evt) {
   150ec:	d805      	bhi.n	150fa <bt_buf_get_evt+0x1a>
   150ee:	2c0d      	cmp	r4, #13
   150f0:	d912      	bls.n	15118 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   150f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   150f6:	f7ff bfd9 	b.w	150ac <bt_buf_get_cmd_complete>
	switch (evt) {
   150fa:	2c13      	cmp	r4, #19
   150fc:	d10c      	bne.n	15118 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
   150fe:	480b      	ldr	r0, [pc, #44]	; (1512c <bt_buf_get_evt+0x4c>)
   15100:	f011 febb 	bl	26e7a <net_buf_alloc_fixed>
			if (buf) {
   15104:	4604      	mov	r4, r0
   15106:	b128      	cbz	r0, 15114 <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
   15108:	2100      	movs	r1, #0
   1510a:	3008      	adds	r0, #8
   1510c:	f007 f88a 	bl	1c224 <net_buf_simple_reserve>
   15110:	2301      	movs	r3, #1
   15112:	7523      	strb	r3, [r4, #20]
}
   15114:	4620      	mov	r0, r4
   15116:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
   15118:	4602      	mov	r2, r0
   1511a:	460b      	mov	r3, r1
		if (discardable) {
   1511c:	b10d      	cbz	r5, 15122 <bt_buf_get_evt+0x42>
   1511e:	4804      	ldr	r0, [pc, #16]	; (15130 <bt_buf_get_evt+0x50>)
   15120:	e7ee      	b.n	15100 <bt_buf_get_evt+0x20>
}
   15122:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   15126:	2001      	movs	r0, #1
   15128:	f7ff bf98 	b.w	1505c <bt_buf_get_rx>
   1512c:	200009dc 	.word	0x200009dc
   15130:	2000090c 	.word	0x2000090c

00015134 <hci_data_buf_overflow>:
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   15134:	6883      	ldr	r3, [r0, #8]
   15136:	4802      	ldr	r0, [pc, #8]	; (15140 <hci_data_buf_overflow+0xc>)
   15138:	781a      	ldrb	r2, [r3, #0]
   1513a:	2157      	movs	r1, #87	; 0x57
   1513c:	f00f b935 	b.w	243aa <z_log_minimal_printk>
   15140:	000294e3 	.word	0x000294e3

00015144 <hci_disconn_complete_prio>:
{
   15144:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   15146:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
   15148:	781a      	ldrb	r2, [r3, #0]
   1514a:	b972      	cbnz	r2, 1516a <hci_disconn_complete_prio+0x26>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1514c:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   15150:	4620      	mov	r0, r4
   15152:	f002 fa63 	bl	1761c <bt_conn_lookup_handle>
	if (!conn) {
   15156:	4605      	mov	r5, r0
   15158:	b940      	cbnz	r0, 1516c <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   1515a:	4b08      	ldr	r3, [pc, #32]	; (1517c <hci_disconn_complete_prio+0x38>)
   1515c:	881a      	ldrh	r2, [r3, #0]
   1515e:	b922      	cbnz	r2, 1516a <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   15160:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   15164:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   15168:	8018      	strh	r0, [r3, #0]
}
   1516a:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   1516c:	2101      	movs	r1, #1
   1516e:	f002 fa5d 	bl	1762c <bt_conn_set_state>
	bt_conn_unref(conn);
   15172:	4628      	mov	r0, r5
}
   15174:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   15178:	f002 ba20 	b.w	175bc <bt_conn_unref>
   1517c:	200022ec 	.word	0x200022ec

00015180 <hci_disconn_complete>:
{
   15180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   15182:	6885      	ldr	r5, [r0, #8]
	if (evt->status) {
   15184:	782e      	ldrb	r6, [r5, #0]
   15186:	b9be      	cbnz	r6, 151b8 <hci_disconn_complete+0x38>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15188:	f8b5 7001 	ldrh.w	r7, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   1518c:	4638      	mov	r0, r7
   1518e:	f002 fa45 	bl	1761c <bt_conn_lookup_handle>
	if (!conn) {
   15192:	4604      	mov	r4, r0
   15194:	b930      	cbnz	r0, 151a4 <hci_disconn_complete+0x24>
		BT_ERR("Unable to look up conn with handle %u", handle);
   15196:	463a      	mov	r2, r7
   15198:	4808      	ldr	r0, [pc, #32]	; (151bc <hci_disconn_complete+0x3c>)
}
   1519a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
   1519e:	2145      	movs	r1, #69	; 0x45
   151a0:	f00f b903 	b.w	243aa <z_log_minimal_printk>
	conn->err = evt->reason;
   151a4:	78eb      	ldrb	r3, [r5, #3]
   151a6:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   151a8:	4631      	mov	r1, r6
   151aa:	f002 fa3f 	bl	1762c <bt_conn_set_state>
		bt_conn_unref(conn);
   151ae:	4620      	mov	r0, r4
}
   151b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   151b4:	f002 ba02 	b.w	175bc <bt_conn_unref>
}
   151b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   151ba:	bf00      	nop
   151bc:	00029510 	.word	0x00029510

000151c0 <le_phy_update_complete>:
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   151c0:	6883      	ldr	r3, [r0, #8]
{
   151c2:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   151c4:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   151c8:	4620      	mov	r0, r4
   151ca:	f002 fa27 	bl	1761c <bt_conn_lookup_handle>
	if (!conn) {
   151ce:	b930      	cbnz	r0, 151de <le_phy_update_complete+0x1e>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   151d0:	4622      	mov	r2, r4
   151d2:	4805      	ldr	r0, [pc, #20]	; (151e8 <le_phy_update_complete+0x28>)
}
   151d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   151d8:	2145      	movs	r1, #69	; 0x45
   151da:	f00f b8e6 	b.w	243aa <z_log_minimal_printk>
}
   151de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   151e2:	f002 b9eb 	b.w	175bc <bt_conn_unref>
   151e6:	bf00      	nop
   151e8:	0002953b 	.word	0x0002953b

000151ec <le_data_len_change>:
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   151ec:	6883      	ldr	r3, [r0, #8]
{
   151ee:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   151f0:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   151f2:	4620      	mov	r0, r4
   151f4:	f002 fa12 	bl	1761c <bt_conn_lookup_handle>
	if (!conn) {
   151f8:	b930      	cbnz	r0, 15208 <le_data_len_change+0x1c>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   151fa:	4622      	mov	r2, r4
   151fc:	4804      	ldr	r0, [pc, #16]	; (15210 <le_data_len_change+0x24>)
}
   151fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   15202:	2145      	movs	r1, #69	; 0x45
   15204:	f00f b8d1 	b.w	243aa <z_log_minimal_printk>
}
   15208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   1520c:	f002 b9d6 	b.w	175bc <bt_conn_unref>
   15210:	0002953b 	.word	0x0002953b

00015214 <hci_hardware_error>:
{
   15214:	b508      	push	{r3, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   15216:	2101      	movs	r1, #1
   15218:	3008      	adds	r0, #8
   1521a:	f007 fa1b 	bl	1c654 <net_buf_simple_pull_mem>
}
   1521e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   15222:	7802      	ldrb	r2, [r0, #0]
   15224:	4801      	ldr	r0, [pc, #4]	; (1522c <hci_hardware_error+0x18>)
   15226:	2145      	movs	r1, #69	; 0x45
   15228:	f00f b8bf 	b.w	243aa <z_log_minimal_printk>
   1522c:	00029564 	.word	0x00029564

00015230 <hci_vendor_event>:
{
   15230:	b508      	push	{r3, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
   15232:	8981      	ldrh	r1, [r0, #12]
   15234:	6880      	ldr	r0, [r0, #8]
   15236:	f7ff fd7f 	bl	14d38 <bt_hex_real>
}
   1523a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
   1523e:	4602      	mov	r2, r0
   15240:	2157      	movs	r1, #87	; 0x57
   15242:	4801      	ldr	r0, [pc, #4]	; (15248 <hci_vendor_event+0x18>)
   15244:	f00f b8b1 	b.w	243aa <z_log_minimal_printk>
   15248:	0002958b 	.word	0x0002958b

0001524c <rx_queue_put>:
{
   1524c:	4601      	mov	r1, r0
   1524e:	b508      	push	{r3, lr}
	net_buf_slist_put(&bt_dev.rx_queue, buf);
   15250:	4807      	ldr	r0, [pc, #28]	; (15270 <rx_queue_put+0x24>)
   15252:	f007 f80b 	bl	1c26c <net_buf_slist_put>
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
   15256:	4907      	ldr	r1, [pc, #28]	; (15274 <rx_queue_put+0x28>)
   15258:	4807      	ldr	r0, [pc, #28]	; (15278 <rx_queue_put+0x2c>)
   1525a:	f00c f81b 	bl	21294 <k_work_submit_to_queue>
	if (err < 0) {
   1525e:	1e02      	subs	r2, r0, #0
   15260:	da05      	bge.n	1526e <rx_queue_put+0x22>
}
   15262:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Could not submit rx_work: %d", err);
   15266:	4805      	ldr	r0, [pc, #20]	; (1527c <rx_queue_put+0x30>)
   15268:	2145      	movs	r1, #69	; 0x45
   1526a:	f00f b89e 	b.w	243aa <z_log_minimal_printk>
}
   1526e:	bd08      	pop	{r3, pc}
   15270:	2000040c 	.word	0x2000040c
   15274:	200005a4 	.word	0x200005a4
   15278:	20001638 	.word	0x20001638
   1527c:	000295b4 	.word	0x000295b4

00015280 <le_conn_update_complete>:
{
   15280:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   15282:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   15284:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   15288:	4630      	mov	r0, r6
   1528a:	f002 f9c7 	bl	1761c <bt_conn_lookup_handle>
	if (!conn) {
   1528e:	4604      	mov	r4, r0
   15290:	b938      	cbnz	r0, 152a2 <le_conn_update_complete+0x22>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   15292:	4822      	ldr	r0, [pc, #136]	; (1531c <le_conn_update_complete+0x9c>)
   15294:	4632      	mov	r2, r6
   15296:	2145      	movs	r1, #69	; 0x45
}
   15298:	b002      	add	sp, #8
   1529a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   1529e:	f00f b884 	b.w	243aa <z_log_minimal_printk>
	if (!evt->status) {
   152a2:	782b      	ldrb	r3, [r5, #0]
   152a4:	b9cb      	cbnz	r3, 152da <le_conn_update_complete+0x5a>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   152a6:	792a      	ldrb	r2, [r5, #4]
   152a8:	78eb      	ldrb	r3, [r5, #3]
   152aa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   152ae:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   152b2:	79aa      	ldrb	r2, [r5, #6]
   152b4:	796b      	ldrb	r3, [r5, #5]
   152b6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   152ba:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   152be:	79eb      	ldrb	r3, [r5, #7]
   152c0:	7a2a      	ldrb	r2, [r5, #8]
   152c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   152c6:	f8a0 30ae 	strh.w	r3, [r0, #174]	; 0xae
		notify_le_param_updated(conn);
   152ca:	f002 fad5 	bl	17878 <notify_le_param_updated>
	bt_conn_unref(conn);
   152ce:	4620      	mov	r0, r4
}
   152d0:	b002      	add	sp, #8
   152d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   152d6:	f002 b971 	b.w	175bc <bt_conn_unref>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   152da:	2b1a      	cmp	r3, #26
   152dc:	d1f7      	bne.n	152ce <le_conn_update_complete+0x4e>
   152de:	78c3      	ldrb	r3, [r0, #3]
   152e0:	2b01      	cmp	r3, #1
   152e2:	d1f4      	bne.n	152ce <le_conn_update_complete+0x4e>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   152e4:	f44f 7100 	mov.w	r1, #512	; 0x200
   152e8:	3004      	adds	r0, #4
   152ea:	f00f fefa 	bl	250e2 <atomic_or>
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   152ee:	0583      	lsls	r3, r0, #22
   152f0:	d4ed      	bmi.n	152ce <le_conn_update_complete+0x4e>
		param.interval_min = conn->le.interval_min;
   152f2:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
   152f6:	f8ad 3000 	strh.w	r3, [sp]
		param.interval_max = conn->le.interval_max;
   152fa:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
   152fe:	f8ad 3002 	strh.w	r3, [sp, #2]
		param.latency = conn->le.pending_latency;
   15302:	f8b4 30b0 	ldrh.w	r3, [r4, #176]	; 0xb0
   15306:	f8ad 3004 	strh.w	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   1530a:	4669      	mov	r1, sp
		param.timeout = conn->le.pending_timeout;
   1530c:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
   15310:	f8ad 3006 	strh.w	r3, [sp, #6]
		bt_l2cap_update_conn_param(conn, &param);
   15314:	4620      	mov	r0, r4
   15316:	f002 fef5 	bl	18104 <bt_l2cap_update_conn_param>
   1531a:	e7d8      	b.n	152ce <le_conn_update_complete+0x4e>
   1531c:	0002953b 	.word	0x0002953b

00015320 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   15320:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   15322:	4c0c      	ldr	r4, [pc, #48]	; (15354 <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   15324:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   15326:	2205      	movs	r2, #5
   15328:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   1532c:	f002 fc1c 	bl	17b68 <bt_conn_lookup_state_le>
		if (!conn) {
   15330:	b970      	cbnz	r0, 15350 <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
   15332:	4b09      	ldr	r3, [pc, #36]	; (15358 <find_pending_connect.part.0+0x38>)
   15334:	6818      	ldr	r0, [r3, #0]
   15336:	889a      	ldrh	r2, [r3, #4]
   15338:	9000      	str	r0, [sp, #0]
   1533a:	799b      	ldrb	r3, [r3, #6]
   1533c:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   15340:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
						       BT_ADDR_LE_NONE,
   15344:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   15348:	2204      	movs	r2, #4
   1534a:	4669      	mov	r1, sp
   1534c:	f002 fc0c 	bl	17b68 <bt_conn_lookup_state_le>
}
   15350:	b002      	add	sp, #8
   15352:	bd10      	pop	{r4, pc}
   15354:	200002d0 	.word	0x200002d0
   15358:	00027fc4 	.word	0x00027fc4

0001535c <handle_event>:
{
   1535c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1535e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   15362:	4605      	mov	r5, r0
   15364:	4614      	mov	r4, r2
   15366:	4608      	mov	r0, r1
		if (handler->event != event) {
   15368:	7822      	ldrb	r2, [r4, #0]
   1536a:	42aa      	cmp	r2, r5
   1536c:	d010      	beq.n	15390 <handle_event+0x34>
	for (i = 0; i < num_handlers; i++) {
   1536e:	3408      	adds	r4, #8
   15370:	429c      	cmp	r4, r3
   15372:	d1f9      	bne.n	15368 <handle_event+0xc>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
   15374:	8984      	ldrh	r4, [r0, #12]
   15376:	6880      	ldr	r0, [r0, #8]
   15378:	4621      	mov	r1, r4
   1537a:	f7ff fcdd 	bl	14d38 <bt_hex_real>
   1537e:	4623      	mov	r3, r4
   15380:	9000      	str	r0, [sp, #0]
   15382:	462a      	mov	r2, r5
   15384:	480b      	ldr	r0, [pc, #44]	; (153b4 <handle_event+0x58>)
   15386:	2157      	movs	r1, #87	; 0x57
   15388:	f00f f80f 	bl	243aa <z_log_minimal_printk>
}
   1538c:	b003      	add	sp, #12
   1538e:	bd30      	pop	{r4, r5, pc}
		if (buf->len < handler->min_len) {
   15390:	8982      	ldrh	r2, [r0, #12]
   15392:	7863      	ldrb	r3, [r4, #1]
   15394:	4293      	cmp	r3, r2
   15396:	d907      	bls.n	153a8 <handle_event+0x4c>
			BT_ERR("Too small (%u bytes) event 0x%02x",
   15398:	4807      	ldr	r0, [pc, #28]	; (153b8 <handle_event+0x5c>)
   1539a:	462b      	mov	r3, r5
   1539c:	2145      	movs	r1, #69	; 0x45
}
   1539e:	b003      	add	sp, #12
   153a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
   153a4:	f00f b801 	b.w	243aa <z_log_minimal_printk>
		handler->handler(buf);
   153a8:	6863      	ldr	r3, [r4, #4]
}
   153aa:	b003      	add	sp, #12
   153ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		handler->handler(buf);
   153b0:	4718      	bx	r3
   153b2:	bf00      	nop
   153b4:	000295fd 	.word	0x000295fd
   153b8:	000295d6 	.word	0x000295d6

000153bc <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
   153bc:	b570      	push	{r4, r5, r6, lr}
	int err;

	struct net_buf *buf;

	BT_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   153be:	4844      	ldr	r0, [pc, #272]	; (154d0 <rx_work_handler+0x114>)
   153c0:	f006 ffb2 	bl	1c328 <net_buf_slist_get>
	if (!buf) {
   153c4:	4604      	mov	r4, r0
   153c6:	2800      	cmp	r0, #0
   153c8:	f000 8081 	beq.w	154ce <rx_work_handler+0x112>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   153cc:	7d02      	ldrb	r2, [r0, #20]
	}

	BT_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf),
	       buf->len);

	switch (bt_buf_get_type(buf)) {
   153ce:	2a01      	cmp	r2, #1
   153d0:	d04d      	beq.n	1546e <rx_work_handler+0xb2>
   153d2:	2a03      	cmp	r2, #3
   153d4:	d178      	bne.n	154c8 <rx_work_handler+0x10c>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   153d6:	8983      	ldrh	r3, [r0, #12]
   153d8:	2b03      	cmp	r3, #3
   153da:	d80b      	bhi.n	153f4 <rx_work_handler+0x38>
   153dc:	493d      	ldr	r1, [pc, #244]	; (154d4 <rx_work_handler+0x118>)
   153de:	483e      	ldr	r0, [pc, #248]	; (154d8 <rx_work_handler+0x11c>)
   153e0:	f240 12d9 	movw	r2, #473	; 0x1d9
   153e4:	f00e ffd3 	bl	2438e <assert_print>
   153e8:	4040      	eors	r0, r0
   153ea:	f380 8811 	msr	BASEPRI, r0
   153ee:	f04f 0003 	mov.w	r0, #3
   153f2:	df02      	svc	2
   153f4:	2104      	movs	r1, #4
   153f6:	f104 0008 	add.w	r0, r4, #8
   153fa:	f007 f92b 	bl	1c654 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   153fe:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
   15400:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   15402:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   15404:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
   15406:	89a2      	ldrh	r2, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
   15408:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
   1540c:	4293      	cmp	r3, r2
	acl(buf)->handle = bt_acl_handle(handle);
   1540e:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
   15410:	d007      	beq.n	15422 <rx_work_handler+0x66>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   15412:	4832      	ldr	r0, [pc, #200]	; (154dc <rx_work_handler+0x120>)
   15414:	2145      	movs	r1, #69	; 0x45
   15416:	f00e ffc8 	bl	243aa <z_log_minimal_printk>
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
   1541a:	4620      	mov	r0, r4
   1541c:	f007 f822 	bl	1c464 <net_buf_unref>
		break;
   15420:	e014      	b.n	1544c <rx_work_handler+0x90>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   15422:	f002 f8fb 	bl	1761c <bt_conn_lookup_handle>
	if (!conn) {
   15426:	4605      	mov	r5, r0
   15428:	b928      	cbnz	r0, 15436 <rx_work_handler+0x7a>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   1542a:	8ae2      	ldrh	r2, [r4, #22]
   1542c:	482c      	ldr	r0, [pc, #176]	; (154e0 <rx_work_handler+0x124>)
   1542e:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   15430:	f00e ffbb 	bl	243aa <z_log_minimal_printk>
   15434:	e7f1      	b.n	1541a <rx_work_handler+0x5e>
	acl(buf)->index = bt_conn_index(conn);
   15436:	f002 f9d1 	bl	177dc <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   1543a:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
   1543c:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   1543e:	4621      	mov	r1, r4
   15440:	4628      	mov	r0, r5
   15442:	f001 ffcb 	bl	173dc <bt_conn_recv>
	bt_conn_unref(conn);
   15446:	4628      	mov	r0, r5
   15448:	f002 f8b8 	bl	175bc <bt_conn_unref>
	return list->head;
   1544c:	4b25      	ldr	r3, [pc, #148]	; (154e4 <rx_work_handler+0x128>)
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
   1544e:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
   15452:	2b00      	cmp	r3, #0
   15454:	d03b      	beq.n	154ce <rx_work_handler+0x112>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
   15456:	4924      	ldr	r1, [pc, #144]	; (154e8 <rx_work_handler+0x12c>)
   15458:	4824      	ldr	r0, [pc, #144]	; (154ec <rx_work_handler+0x130>)
   1545a:	f00b ff1b 	bl	21294 <k_work_submit_to_queue>
#endif
		if (err < 0) {
   1545e:	1e02      	subs	r2, r0, #0
   15460:	da35      	bge.n	154ce <rx_work_handler+0x112>
			BT_ERR("Could not submit rx_work: %d", err);
		}
	}
}
   15462:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Could not submit rx_work: %d", err);
   15466:	4822      	ldr	r0, [pc, #136]	; (154f0 <rx_work_handler+0x134>)
   15468:	2145      	movs	r1, #69	; 0x45
   1546a:	f00e bf9e 	b.w	243aa <z_log_minimal_printk>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   1546e:	8983      	ldrh	r3, [r0, #12]
   15470:	2b01      	cmp	r3, #1
   15472:	d80b      	bhi.n	1548c <rx_work_handler+0xd0>
   15474:	4917      	ldr	r1, [pc, #92]	; (154d4 <rx_work_handler+0x118>)
   15476:	4818      	ldr	r0, [pc, #96]	; (154d8 <rx_work_handler+0x11c>)
   15478:	f640 1237 	movw	r2, #2359	; 0x937
   1547c:	f00e ff87 	bl	2438e <assert_print>
   15480:	4040      	eors	r0, r0
   15482:	f380 8811 	msr	BASEPRI, r0
   15486:	f04f 0003 	mov.w	r0, #3
   1548a:	df02      	svc	2
   1548c:	2102      	movs	r1, #2
   1548e:	f104 0008 	add.w	r0, r4, #8
   15492:	f007 f8df 	bl	1c654 <net_buf_simple_pull_mem>
   15496:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   15498:	7800      	ldrb	r0, [r0, #0]
   1549a:	f00f fdf8 	bl	2508e <bt_hci_evt_get_flags>
   1549e:	0783      	lsls	r3, r0, #30
   154a0:	d40b      	bmi.n	154ba <rx_work_handler+0xfe>
   154a2:	490c      	ldr	r1, [pc, #48]	; (154d4 <rx_work_handler+0x118>)
   154a4:	480c      	ldr	r0, [pc, #48]	; (154d8 <rx_work_handler+0x11c>)
   154a6:	f640 123b 	movw	r2, #2363	; 0x93b
   154aa:	f00e ff70 	bl	2438e <assert_print>
   154ae:	4040      	eors	r0, r0
   154b0:	f380 8811 	msr	BASEPRI, r0
   154b4:	f04f 0003 	mov.w	r0, #3
   154b8:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   154ba:	4a0e      	ldr	r2, [pc, #56]	; (154f4 <rx_work_handler+0x138>)
   154bc:	7828      	ldrb	r0, [r5, #0]
   154be:	2306      	movs	r3, #6
   154c0:	4621      	mov	r1, r4
   154c2:	f7ff ff4b 	bl	1535c <handle_event>
	net_buf_unref(buf);
   154c6:	e7a8      	b.n	1541a <rx_work_handler+0x5e>
		BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   154c8:	480b      	ldr	r0, [pc, #44]	; (154f8 <rx_work_handler+0x13c>)
   154ca:	2145      	movs	r1, #69	; 0x45
   154cc:	e7b0      	b.n	15430 <rx_work_handler+0x74>
}
   154ce:	bd70      	pop	{r4, r5, r6, pc}
   154d0:	2000040c 	.word	0x2000040c
   154d4:	00029624 	.word	0x00029624
   154d8:	000289af 	.word	0x000289af
   154dc:	00029658 	.word	0x00029658
   154e0:	00029681 	.word	0x00029681
   154e4:	200002d0 	.word	0x200002d0
   154e8:	200005a4 	.word	0x200005a4
   154ec:	20001638 	.word	0x20001638
   154f0:	000295b4 	.word	0x000295b4
   154f4:	000281b8 	.word	0x000281b8
   154f8:	000296a8 	.word	0x000296a8

000154fc <hci_le_meta_event>:
{
   154fc:	b510      	push	{r4, lr}
   154fe:	2101      	movs	r1, #1
   15500:	4604      	mov	r4, r0
   15502:	3008      	adds	r0, #8
   15504:	f007 f8a6 	bl	1c654 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   15508:	4621      	mov	r1, r4
   1550a:	4a03      	ldr	r2, [pc, #12]	; (15518 <hci_le_meta_event+0x1c>)
   1550c:	7800      	ldrb	r0, [r0, #0]
}
   1550e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   15512:	230a      	movs	r3, #10
   15514:	f7ff bf22 	b.w	1535c <handle_event>
   15518:	00028158 	.word	0x00028158

0001551c <le_remote_feat_complete>:
{
   1551c:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   1551e:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15520:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   15524:	4630      	mov	r0, r6
   15526:	f002 f879 	bl	1761c <bt_conn_lookup_handle>
	if (!conn) {
   1552a:	4604      	mov	r4, r0
   1552c:	b930      	cbnz	r0, 1553c <le_remote_feat_complete+0x20>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   1552e:	4632      	mov	r2, r6
   15530:	480c      	ldr	r0, [pc, #48]	; (15564 <le_remote_feat_complete+0x48>)
}
   15532:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   15536:	2145      	movs	r1, #69	; 0x45
   15538:	f00e bf37 	b.w	243aa <z_log_minimal_printk>
	if (!evt->status) {
   1553c:	782b      	ldrb	r3, [r5, #0]
   1553e:	b93b      	cbnz	r3, 15550 <le_remote_feat_complete+0x34>
   15540:	f8d5 3003 	ldr.w	r3, [r5, #3]
   15544:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
   15548:	f8d5 3007 	ldr.w	r3, [r5, #7]
   1554c:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   15550:	1d20      	adds	r0, r4, #4
   15552:	f44f 6100 	mov.w	r1, #2048	; 0x800
   15556:	f00f fdc4 	bl	250e2 <atomic_or>
	bt_conn_unref(conn);
   1555a:	4620      	mov	r0, r4
}
   1555c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   15560:	f002 b82c 	b.w	175bc <bt_conn_unref>
   15564:	0002953b 	.word	0x0002953b

00015568 <hci_cmd_done>:
{
   15568:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1556c:	4606      	mov	r6, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   1556e:	7990      	ldrb	r0, [r2, #6]
   15570:	4d39      	ldr	r5, [pc, #228]	; (15658 <hci_cmd_done+0xf0>)
{
   15572:	460f      	mov	r7, r1
   15574:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   15576:	f006 fce3 	bl	1bf40 <net_buf_pool_get>
   1557a:	4285      	cmp	r5, r0
   1557c:	d00e      	beq.n	1559c <hci_cmd_done+0x34>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
   1557e:	79a4      	ldrb	r4, [r4, #6]
   15580:	4620      	mov	r0, r4
   15582:	f006 fcdd 	bl	1bf40 <net_buf_pool_get>
   15586:	4623      	mov	r3, r4
   15588:	e9cd 0500 	strd	r0, r5, [sp]
   1558c:	4632      	mov	r2, r6
   1558e:	4833      	ldr	r0, [pc, #204]	; (1565c <hci_cmd_done+0xf4>)
   15590:	2157      	movs	r1, #87	; 0x57
   15592:	f00e ff0a 	bl	243aa <z_log_minimal_printk>
}
   15596:	b002      	add	sp, #8
   15598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cmd(buf)->opcode != opcode) {
   1559c:	4620      	mov	r0, r4
   1559e:	f006 fcd7 	bl	1bf50 <net_buf_id>
   155a2:	4d2f      	ldr	r5, [pc, #188]	; (15660 <hci_cmd_done+0xf8>)
   155a4:	f04f 080c 	mov.w	r8, #12
   155a8:	fb08 5000 	mla	r0, r8, r0, r5
   155ac:	8843      	ldrh	r3, [r0, #2]
   155ae:	42b3      	cmp	r3, r6
   155b0:	d00d      	beq.n	155ce <hci_cmd_done+0x66>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
   155b2:	4620      	mov	r0, r4
   155b4:	f006 fccc 	bl	1bf50 <net_buf_id>
   155b8:	fb08 5500 	mla	r5, r8, r0, r5
   155bc:	4829      	ldr	r0, [pc, #164]	; (15664 <hci_cmd_done+0xfc>)
   155be:	886b      	ldrh	r3, [r5, #2]
   155c0:	4632      	mov	r2, r6
   155c2:	2157      	movs	r1, #87	; 0x57
}
   155c4:	b002      	add	sp, #8
   155c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
   155ca:	f00e beee 	b.w	243aa <z_log_minimal_printk>
	if (bt_dev.sent_cmd) {
   155ce:	4e26      	ldr	r6, [pc, #152]	; (15668 <hci_cmd_done+0x100>)
   155d0:	f8d6 0138 	ldr.w	r0, [r6, #312]	; 0x138
   155d4:	b120      	cbz	r0, 155e0 <hci_cmd_done+0x78>
		net_buf_unref(bt_dev.sent_cmd);
   155d6:	f006 ff45 	bl	1c464 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   155da:	2300      	movs	r3, #0
   155dc:	f8c6 3138 	str.w	r3, [r6, #312]	; 0x138
	if (cmd(buf)->state && !status) {
   155e0:	4620      	mov	r0, r4
   155e2:	f006 fcb5 	bl	1bf50 <net_buf_id>
   155e6:	260c      	movs	r6, #12
   155e8:	fb06 5000 	mla	r0, r6, r0, r5
   155ec:	6843      	ldr	r3, [r0, #4]
   155ee:	b19b      	cbz	r3, 15618 <hci_cmd_done+0xb0>
   155f0:	b997      	cbnz	r7, 15618 <hci_cmd_done+0xb0>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   155f2:	4620      	mov	r0, r4
   155f4:	f006 fcac 	bl	1bf50 <net_buf_id>
   155f8:	fb06 5000 	mla	r0, r6, r0, r5
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   155fc:	2101      	movs	r1, #1
   155fe:	6842      	ldr	r2, [r0, #4]
   15600:	e9d2 0300 	ldrd	r0, r3, [r2]

	if (val) {
   15604:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   15606:	f003 061f 	and.w	r6, r3, #31
   1560a:	40b1      	lsls	r1, r6
	if (val) {
   1560c:	095b      	lsrs	r3, r3, #5
   1560e:	b1e2      	cbz	r2, 1564a <hci_cmd_done+0xe2>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   15610:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   15614:	f00f fd65 	bl	250e2 <atomic_or>
	if (cmd(buf)->sync) {
   15618:	4620      	mov	r0, r4
   1561a:	f006 fc99 	bl	1bf50 <net_buf_id>
   1561e:	260c      	movs	r6, #12
   15620:	fb06 5000 	mla	r0, r6, r0, r5
   15624:	6883      	ldr	r3, [r0, #8]
   15626:	2b00      	cmp	r3, #0
   15628:	d0b5      	beq.n	15596 <hci_cmd_done+0x2e>
		cmd(buf)->status = status;
   1562a:	4620      	mov	r0, r4
   1562c:	f006 fc90 	bl	1bf50 <net_buf_id>
   15630:	4370      	muls	r0, r6
   15632:	542f      	strb	r7, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   15634:	4620      	mov	r0, r4
   15636:	f006 fc8b 	bl	1bf50 <net_buf_id>
   1563a:	fb06 5500 	mla	r5, r6, r0, r5
   1563e:	68a8      	ldr	r0, [r5, #8]
}
   15640:	b002      	add	sp, #8
   15642:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_impl_k_sem_give(sem);
   15646:	f00b bb2b 	b.w	20ca0 <z_impl_k_sem_give>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1564a:	43c9      	mvns	r1, r1
   1564c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   15650:	f00f fd62 	bl	25118 <atomic_and.isra.0>
   15654:	e7e0      	b.n	15618 <hci_cmd_done+0xb0>
   15656:	bf00      	nop
   15658:	20000974 	.word	0x20000974
   1565c:	000296c1 	.word	0x000296c1
   15660:	20001e74 	.word	0x20001e74
   15664:	000296fb 	.word	0x000296fb
   15668:	200002d0 	.word	0x200002d0

0001566c <hci_cmd_status>:
{
   1566c:	b538      	push	{r3, r4, r5, lr}
   1566e:	2104      	movs	r1, #4
   15670:	4604      	mov	r4, r0
   15672:	3008      	adds	r0, #8
   15674:	f006 ffee 	bl	1c654 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   15678:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   1567a:	7801      	ldrb	r1, [r0, #0]
   1567c:	8840      	ldrh	r0, [r0, #2]
   1567e:	4622      	mov	r2, r4
   15680:	f7ff ff72 	bl	15568 <hci_cmd_done>
	if (ncmd) {
   15684:	b125      	cbz	r5, 15690 <hci_cmd_status+0x24>
   15686:	4803      	ldr	r0, [pc, #12]	; (15694 <hci_cmd_status+0x28>)
}
   15688:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1568c:	f00b bb08 	b.w	20ca0 <z_impl_k_sem_give>
   15690:	bd38      	pop	{r3, r4, r5, pc}
   15692:	bf00      	nop
   15694:	200003f0 	.word	0x200003f0

00015698 <hci_cmd_complete>:
{
   15698:	b538      	push	{r3, r4, r5, lr}
   1569a:	2103      	movs	r1, #3
   1569c:	4604      	mov	r4, r0
   1569e:	3008      	adds	r0, #8
   156a0:	f006 ffd8 	bl	1c654 <net_buf_simple_pull_mem>
	status = buf->data[0];
   156a4:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
   156a6:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   156a8:	7819      	ldrb	r1, [r3, #0]
   156aa:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   156ae:	4622      	mov	r2, r4
   156b0:	f7ff ff5a 	bl	15568 <hci_cmd_done>
	if (ncmd) {
   156b4:	b125      	cbz	r5, 156c0 <hci_cmd_complete+0x28>
   156b6:	4803      	ldr	r0, [pc, #12]	; (156c4 <hci_cmd_complete+0x2c>)
}
   156b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   156bc:	f00b baf0 	b.w	20ca0 <z_impl_k_sem_give>
   156c0:	bd38      	pop	{r3, r4, r5, pc}
   156c2:	bf00      	nop
   156c4:	200003f0 	.word	0x200003f0

000156c8 <hci_num_completed_packets>:
{
   156c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < evt->num_handles; i++) {
   156cc:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   156ce:	6887      	ldr	r7, [r0, #8]
				BT_ERR("packets count mismatch");
   156d0:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 157a0 <hci_num_completed_packets+0xd8>
			tx->pending_no_cb = 0U;
   156d4:	46a8      	mov	r8, r5
	for (i = 0; i < evt->num_handles; i++) {
   156d6:	783b      	ldrb	r3, [r7, #0]
   156d8:	429d      	cmp	r5, r3
   156da:	db01      	blt.n	156e0 <hci_num_completed_packets+0x18>
}
   156dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   156e0:	eb07 0385 	add.w	r3, r7, r5, lsl #2
   156e4:	f8b3 a001 	ldrh.w	sl, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   156e8:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   156ec:	4650      	mov	r0, sl
   156ee:	f001 ff95 	bl	1761c <bt_conn_lookup_handle>
		if (!conn) {
   156f2:	4604      	mov	r4, r0
   156f4:	b1d0      	cbz	r0, 1572c <hci_num_completed_packets+0x64>
			k_work_submit(&conn->tx_complete_work);
   156f6:	f100 0a28 	add.w	sl, r0, #40	; 0x28
		while (count--) {
   156fa:	b37e      	cbz	r6, 1575c <hci_num_completed_packets+0x94>
	__asm__ volatile(
   156fc:	f04f 0340 	mov.w	r3, #64	; 0x40
   15700:	f3ef 8211 	mrs	r2, BASEPRI
   15704:	f383 8812 	msr	BASEPRI_MAX, r3
   15708:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   1570c:	69e3      	ldr	r3, [r4, #28]
   1570e:	b1a3      	cbz	r3, 1573a <hci_num_completed_packets+0x72>
				conn->pending_no_cb--;
   15710:	3b01      	subs	r3, #1
   15712:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   15714:	f382 8811 	msr	BASEPRI, r2
   15718:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   1571c:	4620      	mov	r0, r4
   1571e:	f001 fde9 	bl	172f4 <bt_conn_get_pkts>
   15722:	3e01      	subs	r6, #1
   15724:	f00b fabc 	bl	20ca0 <z_impl_k_sem_give>
   15728:	b2b6      	uxth	r6, r6
   1572a:	e7e6      	b.n	156fa <hci_num_completed_packets+0x32>
			BT_ERR("No connection for handle %u", handle);
   1572c:	481d      	ldr	r0, [pc, #116]	; (157a4 <hci_num_completed_packets+0xdc>)
   1572e:	4652      	mov	r2, sl
   15730:	2145      	movs	r1, #69	; 0x45
   15732:	f00e fe3a 	bl	243aa <z_log_minimal_printk>
	for (i = 0; i < evt->num_handles; i++) {
   15736:	3501      	adds	r5, #1
   15738:	e7cd      	b.n	156d6 <hci_num_completed_packets+0xe>
   1573a:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   1573c:	b12b      	cbz	r3, 1574a <hci_num_completed_packets+0x82>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1573e:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   15740:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   15742:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   15744:	428b      	cmp	r3, r1
	list->tail = node;
   15746:	bf08      	it	eq
   15748:	61a0      	streq	r0, [r4, #24]
   1574a:	f382 8811 	msr	BASEPRI, r2
   1574e:	f3bf 8f6f 	isb	sy
			if (!node) {
   15752:	b93b      	cbnz	r3, 15764 <hci_num_completed_packets+0x9c>
				BT_ERR("packets count mismatch");
   15754:	2145      	movs	r1, #69	; 0x45
   15756:	4648      	mov	r0, r9
   15758:	f00e fe27 	bl	243aa <z_log_minimal_printk>
		bt_conn_unref(conn);
   1575c:	4620      	mov	r0, r4
   1575e:	f001 ff2d 	bl	175bc <bt_conn_unref>
   15762:	e7e8      	b.n	15736 <hci_num_completed_packets+0x6e>
	__asm__ volatile(
   15764:	f04f 0240 	mov.w	r2, #64	; 0x40
   15768:	f3ef 8111 	mrs	r1, BASEPRI
   1576c:	f382 8812 	msr	BASEPRI_MAX, r2
   15770:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   15774:	68da      	ldr	r2, [r3, #12]
   15776:	61e2      	str	r2, [r4, #28]
	return list->tail;
   15778:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
   1577a:	f8c3 800c 	str.w	r8, [r3, #12]
	parent->next = child;
   1577e:	f8c3 8000 	str.w	r8, [r3]
Z_GENLIST_APPEND(slist, snode)
   15782:	b94a      	cbnz	r2, 15798 <hci_num_completed_packets+0xd0>
	list->head = node;
   15784:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   15788:	f381 8811 	msr	BASEPRI, r1
   1578c:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   15790:	4650      	mov	r0, sl
   15792:	f00b fdd3 	bl	2133c <k_work_submit>
   15796:	e7c1      	b.n	1571c <hci_num_completed_packets+0x54>
	parent->next = child;
   15798:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1579a:	6263      	str	r3, [r4, #36]	; 0x24
}
   1579c:	e7f4      	b.n	15788 <hci_num_completed_packets+0xc0>
   1579e:	bf00      	nop
   157a0:	00029754 	.word	0x00029754
   157a4:	00029733 	.word	0x00029733

000157a8 <bt_hci_cmd_state_set_init>:
{
   157a8:	b510      	push	{r4, lr}
	state->bit = bit;
   157aa:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   157ae:	f89d 3008 	ldrb.w	r3, [sp, #8]
   157b2:	720b      	strb	r3, [r1, #8]
{
   157b4:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   157b6:	f006 fbcb 	bl	1bf50 <net_buf_id>
   157ba:	4b03      	ldr	r3, [pc, #12]	; (157c8 <bt_hci_cmd_state_set_init+0x20>)
   157bc:	220c      	movs	r2, #12
   157be:	fb02 3300 	mla	r3, r2, r0, r3
   157c2:	605c      	str	r4, [r3, #4]
}
   157c4:	bd10      	pop	{r4, pc}
   157c6:	bf00      	nop
   157c8:	20001e74 	.word	0x20001e74

000157cc <bt_hci_cmd_create>:
{
   157cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
   157d0:	f04f 32ff 	mov.w	r2, #4294967295
   157d4:	4606      	mov	r6, r0
   157d6:	f04f 33ff 	mov.w	r3, #4294967295
   157da:	481c      	ldr	r0, [pc, #112]	; (1584c <bt_hci_cmd_create+0x80>)
   157dc:	460f      	mov	r7, r1
   157de:	f011 fb4c 	bl	26e7a <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
   157e2:	4604      	mov	r4, r0
   157e4:	b940      	cbnz	r0, 157f8 <bt_hci_cmd_create+0x2c>
   157e6:	491a      	ldr	r1, [pc, #104]	; (15850 <bt_hci_cmd_create+0x84>)
   157e8:	481a      	ldr	r0, [pc, #104]	; (15854 <bt_hci_cmd_create+0x88>)
   157ea:	22ed      	movs	r2, #237	; 0xed
   157ec:	f00e fdcf 	bl	2438e <assert_print>
   157f0:	4817      	ldr	r0, [pc, #92]	; (15850 <bt_hci_cmd_create+0x84>)
   157f2:	21ed      	movs	r1, #237	; 0xed
   157f4:	f00e fdc4 	bl	24380 <assert_post_action>
	net_buf_simple_reserve(&buf->b, reserve);
   157f8:	f104 0a08 	add.w	sl, r4, #8
   157fc:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   157fe:	f04f 0800 	mov.w	r8, #0
   15802:	4650      	mov	r0, sl
   15804:	f006 fd0e 	bl	1c224 <net_buf_simple_reserve>
   15808:	f884 8014 	strb.w	r8, [r4, #20]
	cmd(buf)->opcode = opcode;
   1580c:	4620      	mov	r0, r4
   1580e:	f006 fb9f 	bl	1bf50 <net_buf_id>
   15812:	4d11      	ldr	r5, [pc, #68]	; (15858 <bt_hci_cmd_create+0x8c>)
   15814:	f04f 090c 	mov.w	r9, #12
   15818:	fb09 5000 	mla	r0, r9, r0, r5
   1581c:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   1581e:	4620      	mov	r0, r4
   15820:	f006 fb96 	bl	1bf50 <net_buf_id>
   15824:	fb09 5000 	mla	r0, r9, r0, r5
   15828:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
   1582c:	4620      	mov	r0, r4
   1582e:	f006 fb8f 	bl	1bf50 <net_buf_id>
   15832:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
   15836:	2103      	movs	r1, #3
   15838:	f8c5 8004 	str.w	r8, [r5, #4]
   1583c:	4650      	mov	r0, sl
   1583e:	f006 ff27 	bl	1c690 <net_buf_simple_add>
	hdr->param_len = param_len;
   15842:	7087      	strb	r7, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
   15844:	8006      	strh	r6, [r0, #0]
}
   15846:	4620      	mov	r0, r4
   15848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1584c:	20000974 	.word	0x20000974
   15850:	00029624 	.word	0x00029624
   15854:	000289af 	.word	0x000289af
   15858:	20001e74 	.word	0x20001e74

0001585c <bt_hci_cmd_send_sync>:
{
   1585c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1585e:	4607      	mov	r7, r0
   15860:	b087      	sub	sp, #28
   15862:	4615      	mov	r5, r2
	if (!buf) {
   15864:	460c      	mov	r4, r1
   15866:	b921      	cbnz	r1, 15872 <bt_hci_cmd_send_sync+0x16>
		buf = bt_hci_cmd_create(opcode, 0);
   15868:	f7ff ffb0 	bl	157cc <bt_hci_cmd_create>
		if (!buf) {
   1586c:	4604      	mov	r4, r0
   1586e:	2800      	cmp	r0, #0
   15870:	d048      	beq.n	15904 <bt_hci_cmd_send_sync+0xa8>
	return z_impl_k_sem_init(sem, initial_count, limit);
   15872:	2201      	movs	r2, #1
   15874:	2100      	movs	r1, #0
   15876:	4668      	mov	r0, sp
   15878:	f011 ff4f 	bl	2771a <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   1587c:	4620      	mov	r0, r4
   1587e:	f006 fb67 	bl	1bf50 <net_buf_id>
   15882:	4e22      	ldr	r6, [pc, #136]	; (1590c <bt_hci_cmd_send_sync+0xb0>)
   15884:	230c      	movs	r3, #12
   15886:	fb03 6000 	mla	r0, r3, r0, r6
   1588a:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   1588e:	4620      	mov	r0, r4
   15890:	f006 fe2c 	bl	1c4ec <net_buf_ref>
   15894:	4601      	mov	r1, r0
   15896:	481e      	ldr	r0, [pc, #120]	; (15910 <bt_hci_cmd_send_sync+0xb4>)
   15898:	f006 fdb6 	bl	1c408 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   1589c:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   158a0:	2300      	movs	r3, #0
   158a2:	4668      	mov	r0, sp
   158a4:	f00b fa36 	bl	20d14 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   158a8:	b158      	cbz	r0, 158c2 <bt_hci_cmd_send_sync+0x66>
   158aa:	491a      	ldr	r1, [pc, #104]	; (15914 <bt_hci_cmd_send_sync+0xb8>)
   158ac:	481a      	ldr	r0, [pc, #104]	; (15918 <bt_hci_cmd_send_sync+0xbc>)
   158ae:	f240 1235 	movw	r2, #309	; 0x135
   158b2:	f00e fd6c 	bl	2438e <assert_print>
   158b6:	4040      	eors	r0, r0
   158b8:	f380 8811 	msr	BASEPRI, r0
   158bc:	f04f 0003 	mov.w	r0, #3
   158c0:	df02      	svc	2
	status = cmd(buf)->status;
   158c2:	4620      	mov	r0, r4
   158c4:	f006 fb44 	bl	1bf50 <net_buf_id>
   158c8:	230c      	movs	r3, #12
   158ca:	4358      	muls	r0, r3
   158cc:	5c36      	ldrb	r6, [r6, r0]
	if (status) {
   158ce:	b186      	cbz	r6, 158f2 <bt_hci_cmd_send_sync+0x96>
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
   158d0:	4812      	ldr	r0, [pc, #72]	; (1591c <bt_hci_cmd_send_sync+0xc0>)
   158d2:	4633      	mov	r3, r6
   158d4:	463a      	mov	r2, r7
   158d6:	2157      	movs	r1, #87	; 0x57
   158d8:	f00e fd67 	bl	243aa <z_log_minimal_printk>
		net_buf_unref(buf);
   158dc:	4620      	mov	r0, r4
   158de:	f006 fdc1 	bl	1c464 <net_buf_unref>
			return -EIO;
   158e2:	2e09      	cmp	r6, #9
   158e4:	bf0c      	ite	eq
   158e6:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
   158ea:	f06f 0004 	mvnne.w	r0, #4
}
   158ee:	b007      	add	sp, #28
   158f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
   158f2:	b115      	cbz	r5, 158fa <bt_hci_cmd_send_sync+0x9e>
		*rsp = buf;
   158f4:	602c      	str	r4, [r5, #0]
	return 0;
   158f6:	4630      	mov	r0, r6
   158f8:	e7f9      	b.n	158ee <bt_hci_cmd_send_sync+0x92>
		net_buf_unref(buf);
   158fa:	4620      	mov	r0, r4
   158fc:	f006 fdb2 	bl	1c464 <net_buf_unref>
	return 0;
   15900:	4628      	mov	r0, r5
   15902:	e7f4      	b.n	158ee <bt_hci_cmd_send_sync+0x92>
			return -ENOBUFS;
   15904:	f06f 0068 	mvn.w	r0, #104	; 0x68
   15908:	e7f1      	b.n	158ee <bt_hci_cmd_send_sync+0x92>
   1590a:	bf00      	nop
   1590c:	20001e74 	.word	0x20001e74
   15910:	20000414 	.word	0x20000414
   15914:	00029624 	.word	0x00029624
   15918:	000289af 	.word	0x000289af
   1591c:	00029770 	.word	0x00029770

00015920 <hci_le_read_max_data_len>:
{
   15920:	b573      	push	{r0, r1, r4, r5, r6, lr}
   15922:	4606      	mov	r6, r0
   15924:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   15926:	aa01      	add	r2, sp, #4
   15928:	2100      	movs	r1, #0
   1592a:	f242 002f 	movw	r0, #8239	; 0x202f
   1592e:	f7ff ff95 	bl	1585c <bt_hci_cmd_send_sync>
	if (err) {
   15932:	4604      	mov	r4, r0
   15934:	b130      	cbz	r0, 15944 <hci_le_read_max_data_len+0x24>
		BT_ERR("Failed to read DLE max data len");
   15936:	4809      	ldr	r0, [pc, #36]	; (1595c <hci_le_read_max_data_len+0x3c>)
   15938:	2145      	movs	r1, #69	; 0x45
   1593a:	f00e fd36 	bl	243aa <z_log_minimal_printk>
}
   1593e:	4620      	mov	r0, r4
   15940:	b002      	add	sp, #8
   15942:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   15944:	9801      	ldr	r0, [sp, #4]
   15946:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   15948:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   1594c:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   1594e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   15952:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   15954:	f006 fd86 	bl	1c464 <net_buf_unref>
	return 0;
   15958:	e7f1      	b.n	1593e <hci_le_read_max_data_len+0x1e>
   1595a:	bf00      	nop
   1595c:	00029791 	.word	0x00029791

00015960 <bt_hci_le_enh_conn_complete>:
{
   15960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15964:	f8b0 7001 	ldrh.w	r7, [r0, #1]
		if (disconnected_handles[i] == handle) {
   15968:	4a96      	ldr	r2, [pc, #600]	; (15bc4 <bt_hci_le_enh_conn_complete+0x264>)
	handle |= ~BT_ACL_HANDLE_MASK;
   1596a:	ea6f 5307 	mvn.w	r3, r7, lsl #20
		if (disconnected_handles[i] == handle) {
   1596e:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
   15970:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
   15974:	b29b      	uxth	r3, r3
   15976:	4299      	cmp	r1, r3
{
   15978:	4605      	mov	r5, r0
   1597a:	f04f 0600 	mov.w	r6, #0
			disconnected_handles[i] = 0;
   1597e:	bf08      	it	eq
   15980:	8016      	strheq	r6, [r2, #0]
{
   15982:	b088      	sub	sp, #32
			return true;
   15984:	bf08      	it	eq
   15986:	2601      	moveq	r6, #1
	bt_id_pending_keys_update();
   15988:	f000 fd02 	bl	16390 <bt_id_pending_keys_update>
	if (evt->status) {
   1598c:	782c      	ldrb	r4, [r5, #0]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1598e:	fa1f f887 	uxth.w	r8, r7
	if (evt->status) {
   15992:	b334      	cbz	r4, 159e2 <bt_hci_le_enh_conn_complete+0x82>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15994:	2c3c      	cmp	r4, #60	; 0x3c
   15996:	d11c      	bne.n	159d2 <bt_hci_le_enh_conn_complete+0x72>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   15998:	f001 f8b2 	bl	16b00 <bt_le_adv_lookup_legacy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1599c:	f06f 0140 	mvn.w	r1, #64	; 0x40
   159a0:	3010      	adds	r0, #16
   159a2:	f00f fbb9 	bl	25118 <atomic_and.isra.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   159a6:	2000      	movs	r0, #0
   159a8:	f7ff fcba 	bl	15320 <find_pending_connect.part.0>
		if (!conn) {
   159ac:	4605      	mov	r5, r0
   159ae:	b930      	cbnz	r0, 159be <bt_hci_le_enh_conn_complete+0x5e>
			BT_ERR("No pending peripheral connection");
   159b0:	4885      	ldr	r0, [pc, #532]	; (15bc8 <bt_hci_le_enh_conn_complete+0x268>)
   159b2:	2145      	movs	r1, #69	; 0x45
}
   159b4:	b008      	add	sp, #32
   159b6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			BT_ERR("No pending peripheral connection");
   159ba:	f00e bcf6 	b.w	243aa <z_log_minimal_printk>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   159be:	7304      	strb	r4, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   159c0:	2100      	movs	r1, #0
   159c2:	f001 fe33 	bl	1762c <bt_conn_set_state>
		bt_conn_unref(conn);
   159c6:	4628      	mov	r0, r5
}
   159c8:	b008      	add	sp, #32
   159ca:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		bt_conn_unref(conn);
   159ce:	f001 bdf5 	b.w	175bc <bt_conn_unref>
		BT_WARN("Unexpected status 0x%02x", evt->status);
   159d2:	487e      	ldr	r0, [pc, #504]	; (15bcc <bt_hci_le_enh_conn_complete+0x26c>)
   159d4:	4622      	mov	r2, r4
   159d6:	2157      	movs	r1, #87	; 0x57
}
   159d8:	b008      	add	sp, #32
   159da:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		BT_WARN("Unexpected status 0x%02x", evt->status);
   159de:	f00e bce4 	b.w	243aa <z_log_minimal_printk>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   159e2:	792b      	ldrb	r3, [r5, #4]
   159e4:	3b02      	subs	r3, #2
   159e6:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   159e8:	f105 0904 	add.w	r9, r5, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   159ec:	d836      	bhi.n	15a5c <bt_hci_le_enh_conn_complete+0xfc>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   159ee:	4649      	mov	r1, r9
   159f0:	a806      	add	r0, sp, #24
   159f2:	f00f fb8a 	bl	2510a <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   159f6:	f89d 3018 	ldrb.w	r3, [sp, #24]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   159fa:	f105 0111 	add.w	r1, r5, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   159fe:	3b02      	subs	r3, #2
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   15a00:	f10d 0011 	add.w	r0, sp, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   15a04:	f88d 3018 	strb.w	r3, [sp, #24]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   15a08:	f00f fb7a 	bl	25100 <bt_addr_copy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   15a0c:	2301      	movs	r3, #1
   15a0e:	f88d 3010 	strb.w	r3, [sp, #16]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   15a12:	78eb      	ldrb	r3, [r5, #3]
   15a14:	2b01      	cmp	r3, #1
   15a16:	d112      	bne.n	15a3e <bt_hci_le_enh_conn_complete+0xde>
   15a18:	a806      	add	r0, sp, #24
   15a1a:	f7ff fc81 	bl	15320 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15a1e:	78eb      	ldrb	r3, [r5, #3]
   15a20:	2b01      	cmp	r3, #1
   15a22:	4604      	mov	r4, r0
   15a24:	d10a      	bne.n	15a3c <bt_hci_le_enh_conn_complete+0xdc>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   15a26:	f001 f86b 	bl	16b00 <bt_le_adv_lookup_legacy>
   15a2a:	f06f 0140 	mvn.w	r1, #64	; 0x40
   15a2e:	4682      	mov	sl, r0
   15a30:	3010      	adds	r0, #16
   15a32:	f00f fb71 	bl	25118 <atomic_and.isra.0>
		(void)bt_le_lim_adv_cancel_timeout(adv);
   15a36:	4650      	mov	r0, sl
   15a38:	f00f fe03 	bl	25642 <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
   15a3c:	bb0c      	cbnz	r4, 15a82 <bt_hci_le_enh_conn_complete+0x122>
		BT_ERR("No pending conn for peer %s",
   15a3e:	4648      	mov	r0, r9
   15a40:	f7ff f99c 	bl	14d7c <bt_addr_le_str_real>
   15a44:	2145      	movs	r1, #69	; 0x45
   15a46:	4602      	mov	r2, r0
   15a48:	4861      	ldr	r0, [pc, #388]	; (15bd0 <bt_hci_le_enh_conn_complete+0x270>)
   15a4a:	f00e fcae 	bl	243aa <z_log_minimal_printk>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   15a4e:	211f      	movs	r1, #31
   15a50:	4640      	mov	r0, r8
   15a52:	f00f fb7d 	bl	25150 <bt_hci_disconnect>
}
   15a56:	b008      	add	sp, #32
   15a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   15a5c:	78eb      	ldrb	r3, [r5, #3]
   15a5e:	2b01      	cmp	r3, #1
   15a60:	bf04      	itt	eq
   15a62:	4b5c      	ldreq	r3, [pc, #368]	; (15bd4 <bt_hci_le_enh_conn_complete+0x274>)
   15a64:	f893 4067 	ldrbeq.w	r4, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
   15a68:	4649      	mov	r1, r9
   15a6a:	4620      	mov	r0, r4
   15a6c:	f00f fccb 	bl	25406 <bt_lookup_id_addr>
   15a70:	4601      	mov	r1, r0
   15a72:	a806      	add	r0, sp, #24
   15a74:	f00f fb49 	bl	2510a <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   15a78:	4649      	mov	r1, r9
   15a7a:	a804      	add	r0, sp, #16
   15a7c:	f00f fb45 	bl	2510a <bt_addr_le_copy>
   15a80:	e7c7      	b.n	15a12 <bt_hci_le_enh_conn_complete+0xb2>
	conn->handle = handle;
   15a82:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   15a84:	a906      	add	r1, sp, #24
	conn->handle = handle;
   15a86:	f820 7b90 	strh.w	r7, [r0], #144
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   15a8a:	f00f fb3e 	bl	2510a <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   15a8e:	7e2a      	ldrb	r2, [r5, #24]
   15a90:	7deb      	ldrb	r3, [r5, #23]
   15a92:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   15a96:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   15a9a:	7eaa      	ldrb	r2, [r5, #26]
   15a9c:	7e6b      	ldrb	r3, [r5, #25]
   15a9e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   15aa2:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   15aa6:	7f2a      	ldrb	r2, [r5, #28]
   15aa8:	7eeb      	ldrb	r3, [r5, #27]
   15aaa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   15aae:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
	conn->role = evt->role;
   15ab2:	78eb      	ldrb	r3, [r5, #3]
   15ab4:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
   15ab6:	2200      	movs	r2, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15ab8:	2b01      	cmp	r3, #1
	conn->err = 0U;
   15aba:	7322      	strb	r2, [r4, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15abc:	d115      	bne.n	15aea <bt_hci_le_enh_conn_complete+0x18a>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
   15abe:	a904      	add	r1, sp, #16
   15ac0:	f104 0097 	add.w	r0, r4, #151	; 0x97
   15ac4:	f00f fb21 	bl	2510a <bt_addr_le_copy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   15ac8:	f001 f81a 	bl	16b00 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
   15acc:	7a21      	ldrb	r1, [r4, #8]
   15ace:	4a41      	ldr	r2, [pc, #260]	; (15bd4 <bt_hci_le_enh_conn_complete+0x274>)
   15ad0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
   15ad4:	4411      	add	r1, r2
   15ad6:	f104 009e 	add.w	r0, r4, #158	; 0x9e
   15ada:	f00f fb16 	bl	2510a <bt_addr_le_copy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   15ade:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
   15ae2:	065d      	lsls	r5, r3, #25
   15ae4:	d501      	bpl.n	15aea <bt_hci_le_enh_conn_complete+0x18a>
			bt_le_adv_resume();
   15ae6:	f001 f9c3 	bl	16e70 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   15aea:	2107      	movs	r1, #7
   15aec:	4620      	mov	r0, r4
   15aee:	f001 fd9d 	bl	1762c <bt_conn_set_state>
	if (is_disconnected) {
   15af2:	b11e      	cbz	r6, 15afc <bt_hci_le_enh_conn_complete+0x19c>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   15af4:	2101      	movs	r1, #1
   15af6:	4620      	mov	r0, r4
   15af8:	f001 fd98 	bl	1762c <bt_conn_set_state>
	bt_conn_connected(conn);
   15afc:	4620      	mov	r0, r4
   15afe:	f00f fe38 	bl	25772 <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
   15b02:	7b63      	ldrb	r3, [r4, #13]
   15b04:	2b07      	cmp	r3, #7
   15b06:	d155      	bne.n	15bb4 <bt_hci_le_enh_conn_complete+0x254>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15b08:	f3bf 8f5b 	dmb	ish
   15b0c:	6863      	ldr	r3, [r4, #4]
   15b0e:	4e31      	ldr	r6, [pc, #196]	; (15bd4 <bt_hci_le_enh_conn_complete+0x274>)
   15b10:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   15b14:	f413 6f00 	tst.w	r3, #2048	; 0x800
   15b18:	d11f      	bne.n	15b5a <bt_hci_le_enh_conn_complete+0x1fa>
   15b1a:	78e3      	ldrb	r3, [r4, #3]
   15b1c:	b11b      	cbz	r3, 15b26 <bt_hci_le_enh_conn_complete+0x1c6>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   15b1e:	f896 30d0 	ldrb.w	r3, [r6, #208]	; 0xd0
   15b22:	0718      	lsls	r0, r3, #28
   15b24:	d519      	bpl.n	15b5a <bt_hci_le_enh_conn_complete+0x1fa>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   15b26:	2102      	movs	r1, #2
   15b28:	f242 0016 	movw	r0, #8214	; 0x2016
   15b2c:	f7ff fe4e 	bl	157cc <bt_hci_cmd_create>
	if (!buf) {
   15b30:	4605      	mov	r5, r0
   15b32:	2800      	cmp	r0, #0
   15b34:	d042      	beq.n	15bbc <bt_hci_le_enh_conn_complete+0x25c>
   15b36:	2102      	movs	r1, #2
   15b38:	3008      	adds	r0, #8
   15b3a:	f006 fda9 	bl	1c690 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   15b3e:	8823      	ldrh	r3, [r4, #0]
   15b40:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   15b42:	2200      	movs	r2, #0
   15b44:	4629      	mov	r1, r5
   15b46:	f242 0016 	movw	r0, #8214	; 0x2016
   15b4a:	f7ff fe87 	bl	1585c <bt_hci_cmd_send_sync>
		if (err) {
   15b4e:	4602      	mov	r2, r0
   15b50:	b118      	cbz	r0, 15b5a <bt_hci_le_enh_conn_complete+0x1fa>
			BT_ERR("Failed read remote features (%d)", err);
   15b52:	4821      	ldr	r0, [pc, #132]	; (15bd8 <bt_hci_le_enh_conn_complete+0x278>)
   15b54:	2145      	movs	r1, #69	; 0x45
   15b56:	f00e fc28 	bl	243aa <z_log_minimal_printk>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   15b5a:	f896 30d1 	ldrb.w	r3, [r6, #209]	; 0xd1
   15b5e:	07d9      	lsls	r1, r3, #31
   15b60:	d50c      	bpl.n	15b7c <bt_hci_le_enh_conn_complete+0x21c>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   15b62:	2100      	movs	r1, #0
   15b64:	2302      	movs	r3, #2
   15b66:	461a      	mov	r2, r3
   15b68:	9100      	str	r1, [sp, #0]
   15b6a:	4620      	mov	r0, r4
   15b6c:	f00f fb29 	bl	251c2 <bt_le_set_phy>
		if (err) {
   15b70:	4602      	mov	r2, r0
   15b72:	b118      	cbz	r0, 15b7c <bt_hci_le_enh_conn_complete+0x21c>
			BT_ERR("Failed LE Set PHY (%d)", err);
   15b74:	4819      	ldr	r0, [pc, #100]	; (15bdc <bt_hci_le_enh_conn_complete+0x27c>)
   15b76:	2145      	movs	r1, #69	; 0x45
   15b78:	f00e fc17 	bl	243aa <z_log_minimal_printk>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   15b7c:	f896 30d0 	ldrb.w	r3, [r6, #208]	; 0xd0
   15b80:	069a      	lsls	r2, r3, #26
   15b82:	d517      	bpl.n	15bb4 <bt_hci_le_enh_conn_complete+0x254>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   15b84:	f8d6 3160 	ldr.w	r3, [r6, #352]	; 0x160
   15b88:	689b      	ldr	r3, [r3, #8]
   15b8a:	079b      	lsls	r3, r3, #30
   15b8c:	d512      	bpl.n	15bb4 <bt_hci_le_enh_conn_complete+0x254>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   15b8e:	f10d 010e 	add.w	r1, sp, #14
   15b92:	a803      	add	r0, sp, #12
   15b94:	f7ff fec4 	bl	15920 <hci_le_read_max_data_len>
			if (!err) {
   15b98:	b960      	cbnz	r0, 15bb4 <bt_hci_le_enh_conn_complete+0x254>
				err = bt_le_set_data_len(conn,
   15b9a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   15b9e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   15ba2:	4620      	mov	r0, r4
   15ba4:	f00f faef 	bl	25186 <bt_le_set_data_len>
				if (err) {
   15ba8:	4602      	mov	r2, r0
   15baa:	b118      	cbz	r0, 15bb4 <bt_hci_le_enh_conn_complete+0x254>
					BT_ERR("Failed to set data len (%d)", err);
   15bac:	480c      	ldr	r0, [pc, #48]	; (15be0 <bt_hci_le_enh_conn_complete+0x280>)
   15bae:	2145      	movs	r1, #69	; 0x45
   15bb0:	f00e fbfb 	bl	243aa <z_log_minimal_printk>
	bt_conn_unref(conn);
   15bb4:	4620      	mov	r0, r4
   15bb6:	f001 fd01 	bl	175bc <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   15bba:	e74c      	b.n	15a56 <bt_hci_le_enh_conn_complete+0xf6>
		return -ENOBUFS;
   15bbc:	f06f 0268 	mvn.w	r2, #104	; 0x68
   15bc0:	e7c7      	b.n	15b52 <bt_hci_le_enh_conn_complete+0x1f2>
   15bc2:	bf00      	nop
   15bc4:	200022ec 	.word	0x200022ec
   15bc8:	000297b6 	.word	0x000297b6
   15bcc:	000297dc 	.word	0x000297dc
   15bd0:	000297fa 	.word	0x000297fa
   15bd4:	200002d0 	.word	0x200002d0
   15bd8:	0002981b 	.word	0x0002981b
   15bdc:	00029841 	.word	0x00029841
   15be0:	0002985d 	.word	0x0002985d

00015be4 <bt_security_err_get>:
	switch (hci_err) {
   15be4:	2829      	cmp	r0, #41	; 0x29
   15be6:	bf9a      	itte	ls
   15be8:	4b01      	ldrls	r3, [pc, #4]	; (15bf0 <bt_security_err_get+0xc>)
   15bea:	5c18      	ldrbls	r0, [r3, r0]
{
   15bec:	2009      	movhi	r0, #9
}
   15bee:	4770      	bx	lr
   15bf0:	00029ac9 	.word	0x00029ac9

00015bf4 <hci_encrypt_key_refresh_complete>:
{
   15bf4:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
   15bf6:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   15bf8:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	uint8_t status = evt->status;
   15bfc:	781d      	ldrb	r5, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   15bfe:	4630      	mov	r0, r6
   15c00:	f001 fd0c 	bl	1761c <bt_conn_lookup_handle>
	if (!conn) {
   15c04:	4604      	mov	r4, r0
   15c06:	b930      	cbnz	r0, 15c16 <hci_encrypt_key_refresh_complete+0x22>
		BT_ERR("Unable to look up conn with handle %u", handle);
   15c08:	4632      	mov	r2, r6
   15c0a:	4819      	ldr	r0, [pc, #100]	; (15c70 <hci_encrypt_key_refresh_complete+0x7c>)
}
   15c0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
   15c10:	2145      	movs	r1, #69	; 0x45
   15c12:	f00e bbca 	b.w	243aa <z_log_minimal_printk>
	if (status) {
   15c16:	b165      	cbz	r5, 15c32 <hci_encrypt_key_refresh_complete+0x3e>
		bt_conn_security_changed(conn, status,
   15c18:	4628      	mov	r0, r5
   15c1a:	f7ff ffe3 	bl	15be4 <bt_security_err_get>
   15c1e:	4629      	mov	r1, r5
   15c20:	4602      	mov	r2, r0
   15c22:	4620      	mov	r0, r4
   15c24:	f001 ff0e 	bl	17a44 <bt_conn_security_changed>
	bt_conn_unref(conn);
   15c28:	4620      	mov	r0, r4
}
   15c2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   15c2e:	f001 bcc5 	b.w	175bc <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   15c32:	7883      	ldrb	r3, [r0, #2]
   15c34:	2b01      	cmp	r3, #1
   15c36:	d107      	bne.n	15c48 <hci_encrypt_key_refresh_complete+0x54>
		bt_smp_update_keys(conn);
   15c38:	f005 ff7c 	bl	1bb34 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   15c3c:	4620      	mov	r0, r4
   15c3e:	f00f fa38 	bl	250b2 <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
   15c42:	2800      	cmp	r0, #0
   15c44:	bf08      	it	eq
   15c46:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   15c48:	4628      	mov	r0, r5
   15c4a:	f7ff ffcb 	bl	15be4 <bt_security_err_get>
   15c4e:	4629      	mov	r1, r5
   15c50:	4602      	mov	r2, r0
   15c52:	4620      	mov	r0, r4
   15c54:	f001 fef6 	bl	17a44 <bt_conn_security_changed>
	if (status) {
   15c58:	2d00      	cmp	r5, #0
   15c5a:	d0e5      	beq.n	15c28 <hci_encrypt_key_refresh_complete+0x34>
		BT_ERR("Failed to set required security level");
   15c5c:	4805      	ldr	r0, [pc, #20]	; (15c74 <hci_encrypt_key_refresh_complete+0x80>)
   15c5e:	2145      	movs	r1, #69	; 0x45
   15c60:	f00e fba3 	bl	243aa <z_log_minimal_printk>
		bt_conn_disconnect(conn, status);
   15c64:	4629      	mov	r1, r5
   15c66:	4620      	mov	r0, r4
   15c68:	f00f fd8c 	bl	25784 <bt_conn_disconnect>
   15c6c:	e7dc      	b.n	15c28 <hci_encrypt_key_refresh_complete+0x34>
   15c6e:	bf00      	nop
   15c70:	00029510 	.word	0x00029510
   15c74:	0002987e 	.word	0x0002987e

00015c78 <hci_encrypt_change>:
{
   15c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
   15c7a:	6886      	ldr	r6, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15c7c:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	uint8_t status = evt->status;
   15c80:	7835      	ldrb	r5, [r6, #0]
	conn = bt_conn_lookup_handle(handle);
   15c82:	4638      	mov	r0, r7
   15c84:	f001 fcca 	bl	1761c <bt_conn_lookup_handle>
	if (!conn) {
   15c88:	4604      	mov	r4, r0
   15c8a:	b930      	cbnz	r0, 15c9a <hci_encrypt_change+0x22>
		BT_ERR("Unable to look up conn with handle %u", handle);
   15c8c:	463a      	mov	r2, r7
   15c8e:	481a      	ldr	r0, [pc, #104]	; (15cf8 <hci_encrypt_change+0x80>)
}
   15c90:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
   15c94:	2145      	movs	r1, #69	; 0x45
   15c96:	f00e bb88 	b.w	243aa <z_log_minimal_printk>
	if (status) {
   15c9a:	b165      	cbz	r5, 15cb6 <hci_encrypt_change+0x3e>
		bt_conn_security_changed(conn, status,
   15c9c:	4628      	mov	r0, r5
   15c9e:	f7ff ffa1 	bl	15be4 <bt_security_err_get>
   15ca2:	4629      	mov	r1, r5
   15ca4:	4602      	mov	r2, r0
   15ca6:	4620      	mov	r0, r4
   15ca8:	f001 fecc 	bl	17a44 <bt_conn_security_changed>
	bt_conn_unref(conn);
   15cac:	4620      	mov	r0, r4
}
   15cae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   15cb2:	f001 bc83 	b.w	175bc <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   15cb6:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
   15cb8:	78f3      	ldrb	r3, [r6, #3]
   15cba:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
   15cbc:	2a01      	cmp	r2, #1
   15cbe:	d108      	bne.n	15cd2 <hci_encrypt_change+0x5a>
		if (conn->encrypt) {
   15cc0:	b10b      	cbz	r3, 15cc6 <hci_encrypt_change+0x4e>
			bt_smp_update_keys(conn);
   15cc2:	f005 ff37 	bl	1bb34 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   15cc6:	4620      	mov	r0, r4
   15cc8:	f00f f9f3 	bl	250b2 <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
   15ccc:	2800      	cmp	r0, #0
   15cce:	bf08      	it	eq
   15cd0:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   15cd2:	4628      	mov	r0, r5
   15cd4:	f7ff ff86 	bl	15be4 <bt_security_err_get>
   15cd8:	4629      	mov	r1, r5
   15cda:	4602      	mov	r2, r0
   15cdc:	4620      	mov	r0, r4
   15cde:	f001 feb1 	bl	17a44 <bt_conn_security_changed>
	if (status) {
   15ce2:	2d00      	cmp	r5, #0
   15ce4:	d0e2      	beq.n	15cac <hci_encrypt_change+0x34>
		BT_ERR("Failed to set required security level");
   15ce6:	4805      	ldr	r0, [pc, #20]	; (15cfc <hci_encrypt_change+0x84>)
   15ce8:	2145      	movs	r1, #69	; 0x45
   15cea:	f00e fb5e 	bl	243aa <z_log_minimal_printk>
		bt_conn_disconnect(conn, status);
   15cee:	4629      	mov	r1, r5
   15cf0:	4620      	mov	r0, r4
   15cf2:	f00f fd47 	bl	25784 <bt_conn_disconnect>
   15cf6:	e7d9      	b.n	15cac <hci_encrypt_change+0x34>
   15cf8:	00029510 	.word	0x00029510
   15cfc:	0002987e 	.word	0x0002987e

00015d00 <bt_send>:
	return bt_dev.drv->send(buf);
   15d00:	4b02      	ldr	r3, [pc, #8]	; (15d0c <bt_send+0xc>)
   15d02:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
   15d06:	695b      	ldr	r3, [r3, #20]
   15d08:	4718      	bx	r3
   15d0a:	bf00      	nop
   15d0c:	200002d0 	.word	0x200002d0

00015d10 <bt_hci_cmd_send>:
{
   15d10:	b538      	push	{r3, r4, r5, lr}
   15d12:	4605      	mov	r5, r0
	if (!buf) {
   15d14:	460c      	mov	r4, r1
   15d16:	b919      	cbnz	r1, 15d20 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
   15d18:	f7ff fd58 	bl	157cc <bt_hci_cmd_create>
		if (!buf) {
   15d1c:	4604      	mov	r4, r0
   15d1e:	b1c0      	cbz	r0, 15d52 <bt_hci_cmd_send+0x42>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   15d20:	f640 4335 	movw	r3, #3125	; 0xc35
   15d24:	429d      	cmp	r5, r3
   15d26:	d10e      	bne.n	15d46 <bt_hci_cmd_send+0x36>
		err = bt_send(buf);
   15d28:	4620      	mov	r0, r4
   15d2a:	f7ff ffe9 	bl	15d00 <bt_send>
		if (err) {
   15d2e:	4605      	mov	r5, r0
   15d30:	b138      	cbz	r0, 15d42 <bt_hci_cmd_send+0x32>
			BT_ERR("Unable to send to driver (err %d)", err);
   15d32:	4602      	mov	r2, r0
   15d34:	2145      	movs	r1, #69	; 0x45
   15d36:	4808      	ldr	r0, [pc, #32]	; (15d58 <bt_hci_cmd_send+0x48>)
   15d38:	f00e fb37 	bl	243aa <z_log_minimal_printk>
			net_buf_unref(buf);
   15d3c:	4620      	mov	r0, r4
   15d3e:	f006 fb91 	bl	1c464 <net_buf_unref>
}
   15d42:	4628      	mov	r0, r5
   15d44:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   15d46:	4805      	ldr	r0, [pc, #20]	; (15d5c <bt_hci_cmd_send+0x4c>)
   15d48:	4621      	mov	r1, r4
   15d4a:	f006 fb5d 	bl	1c408 <net_buf_put>
	return 0;
   15d4e:	2500      	movs	r5, #0
   15d50:	e7f7      	b.n	15d42 <bt_hci_cmd_send+0x32>
			return -ENOBUFS;
   15d52:	f06f 0568 	mvn.w	r5, #104	; 0x68
   15d56:	e7f4      	b.n	15d42 <bt_hci_cmd_send+0x32>
   15d58:	000298a9 	.word	0x000298a9
   15d5c:	20000414 	.word	0x20000414

00015d60 <le_ltk_request>:
{
   15d60:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
   15d62:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   15d64:	882f      	ldrh	r7, [r5, #0]
   15d66:	b2bc      	uxth	r4, r7
{
   15d68:	b087      	sub	sp, #28
	conn = bt_conn_lookup_handle(handle);
   15d6a:	4620      	mov	r0, r4
   15d6c:	f001 fc56 	bl	1761c <bt_conn_lookup_handle>
	if (!conn) {
   15d70:	4606      	mov	r6, r0
   15d72:	b938      	cbnz	r0, 15d84 <le_ltk_request+0x24>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   15d74:	4825      	ldr	r0, [pc, #148]	; (15e0c <le_ltk_request+0xac>)
   15d76:	4622      	mov	r2, r4
   15d78:	2145      	movs	r1, #69	; 0x45
}
   15d7a:	b007      	add	sp, #28
   15d7c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   15d80:	f00e bb13 	b.w	243aa <z_log_minimal_printk>
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
   15d84:	ac02      	add	r4, sp, #8
   15d86:	f8d5 2002 	ldr.w	r2, [r5, #2]
   15d8a:	f8d5 3006 	ldr.w	r3, [r5, #6]
   15d8e:	9401      	str	r4, [sp, #4]
   15d90:	8969      	ldrh	r1, [r5, #10]
   15d92:	9100      	str	r1, [sp, #0]
   15d94:	f010 ff06 	bl	26ba4 <bt_smp_request_ltk>
   15d98:	b338      	cbz	r0, 15dea <le_ltk_request+0x8a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
   15d9a:	2112      	movs	r1, #18
   15d9c:	f242 001a 	movw	r0, #8218	; 0x201a
   15da0:	f7ff fd14 	bl	157cc <bt_hci_cmd_create>
	if (!buf) {
   15da4:	4605      	mov	r5, r0
   15da6:	b940      	cbnz	r0, 15dba <le_ltk_request+0x5a>
		BT_ERR("Out of command buffers");
   15da8:	4819      	ldr	r0, [pc, #100]	; (15e10 <le_ltk_request+0xb0>)
   15daa:	2145      	movs	r1, #69	; 0x45
   15dac:	f00e fafd 	bl	243aa <z_log_minimal_printk>
	bt_conn_unref(conn);
   15db0:	4630      	mov	r0, r6
   15db2:	f001 fc03 	bl	175bc <bt_conn_unref>
}
   15db6:	b007      	add	sp, #28
   15db8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15dba:	2112      	movs	r1, #18
   15dbc:	3008      	adds	r0, #8
   15dbe:	f006 fc67 	bl	1c690 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   15dc2:	4603      	mov	r3, r0
   15dc4:	4622      	mov	r2, r4
   15dc6:	f823 7b02 	strh.w	r7, [r3], #2
   15dca:	af06      	add	r7, sp, #24
   15dcc:	4614      	mov	r4, r2
   15dce:	cc03      	ldmia	r4!, {r0, r1}
   15dd0:	42bc      	cmp	r4, r7
   15dd2:	6018      	str	r0, [r3, #0]
   15dd4:	6059      	str	r1, [r3, #4]
   15dd6:	4622      	mov	r2, r4
   15dd8:	f103 0308 	add.w	r3, r3, #8
   15ddc:	d1f6      	bne.n	15dcc <le_ltk_request+0x6c>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
   15dde:	4629      	mov	r1, r5
   15de0:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   15de4:	f7ff ff94 	bl	15d10 <bt_hci_cmd_send>
   15de8:	e7e2      	b.n	15db0 <le_ltk_request+0x50>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
   15dea:	2102      	movs	r1, #2
   15dec:	f242 001b 	movw	r0, #8219	; 0x201b
   15df0:	f7ff fcec 	bl	157cc <bt_hci_cmd_create>
	if (!buf) {
   15df4:	4604      	mov	r4, r0
   15df6:	2800      	cmp	r0, #0
   15df8:	d0d6      	beq.n	15da8 <le_ltk_request+0x48>
   15dfa:	2102      	movs	r1, #2
   15dfc:	3008      	adds	r0, #8
   15dfe:	f006 fc47 	bl	1c690 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   15e02:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
   15e04:	8007      	strh	r7, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   15e06:	f242 001b 	movw	r0, #8219	; 0x201b
   15e0a:	e7eb      	b.n	15de4 <le_ltk_request+0x84>
   15e0c:	0002953b 	.word	0x0002953b
   15e10:	000298d0 	.word	0x000298d0

00015e14 <le_conn_param_neg_reply>:
{
   15e14:	b570      	push	{r4, r5, r6, lr}
   15e16:	4606      	mov	r6, r0
   15e18:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   15e1a:	f242 0021 	movw	r0, #8225	; 0x2021
   15e1e:	2103      	movs	r1, #3
   15e20:	f7ff fcd4 	bl	157cc <bt_hci_cmd_create>
	if (!buf) {
   15e24:	4604      	mov	r4, r0
   15e26:	b928      	cbnz	r0, 15e34 <le_conn_param_neg_reply+0x20>
}
   15e28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
   15e2c:	4808      	ldr	r0, [pc, #32]	; (15e50 <le_conn_param_neg_reply+0x3c>)
   15e2e:	2145      	movs	r1, #69	; 0x45
   15e30:	f00e babb 	b.w	243aa <z_log_minimal_printk>
   15e34:	2103      	movs	r1, #3
   15e36:	3008      	adds	r0, #8
   15e38:	f006 fc2a 	bl	1c690 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
   15e3c:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
   15e3e:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   15e40:	4621      	mov	r1, r4
   15e42:	f242 0021 	movw	r0, #8225	; 0x2021
}
   15e46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   15e4a:	f7ff bf61 	b.w	15d10 <bt_hci_cmd_send>
   15e4e:	bf00      	nop
   15e50:	000298ec 	.word	0x000298ec

00015e54 <le_conn_param_req>:
{
   15e54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   15e56:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   15e58:	78d9      	ldrb	r1, [r3, #3]
   15e5a:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   15e5c:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   15e5e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   15e62:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   15e66:	7959      	ldrb	r1, [r3, #5]
   15e68:	791a      	ldrb	r2, [r3, #4]
   15e6a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   15e6e:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   15e72:	799a      	ldrb	r2, [r3, #6]
   15e74:	79d9      	ldrb	r1, [r3, #7]
   15e76:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   15e7a:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   15e7e:	7a1a      	ldrb	r2, [r3, #8]
   15e80:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   15e82:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
   15e84:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   15e88:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   15e8a:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   15e8e:	f001 fbc5 	bl	1761c <bt_conn_lookup_handle>
	if (!conn) {
   15e92:	4606      	mov	r6, r0
   15e94:	b950      	cbnz	r0, 15eac <le_conn_param_req+0x58>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   15e96:	481d      	ldr	r0, [pc, #116]	; (15f0c <le_conn_param_req+0xb8>)
   15e98:	2145      	movs	r1, #69	; 0x45
   15e9a:	4622      	mov	r2, r4
   15e9c:	f00e fa85 	bl	243aa <z_log_minimal_printk>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   15ea0:	2102      	movs	r1, #2
   15ea2:	4620      	mov	r0, r4
   15ea4:	f7ff ffb6 	bl	15e14 <le_conn_param_neg_reply>
}
   15ea8:	b003      	add	sp, #12
   15eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   15eac:	4669      	mov	r1, sp
   15eae:	f001 fd3d 	bl	1792c <le_param_req>
   15eb2:	b938      	cbnz	r0, 15ec4 <le_conn_param_req+0x70>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   15eb4:	211e      	movs	r1, #30
   15eb6:	4620      	mov	r0, r4
   15eb8:	f7ff ffac 	bl	15e14 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   15ebc:	4630      	mov	r0, r6
   15ebe:	f001 fb7d 	bl	175bc <bt_conn_unref>
   15ec2:	e7f1      	b.n	15ea8 <le_conn_param_req+0x54>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   15ec4:	210e      	movs	r1, #14
   15ec6:	f242 0020 	movw	r0, #8224	; 0x2020
   15eca:	f7ff fc7f 	bl	157cc <bt_hci_cmd_create>
	if (!buf) {
   15ece:	4605      	mov	r5, r0
   15ed0:	2800      	cmp	r0, #0
   15ed2:	d0f3      	beq.n	15ebc <le_conn_param_req+0x68>
   15ed4:	210e      	movs	r1, #14
   15ed6:	3008      	adds	r0, #8
   15ed8:	f006 fbda 	bl	1c690 <net_buf_simple_add>
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
   15edc:	220e      	movs	r2, #14
   15ede:	4604      	mov	r4, r0
   15ee0:	2100      	movs	r1, #0
   15ee2:	f011 fddc 	bl	27a9e <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   15ee6:	f8bd 3000 	ldrh.w	r3, [sp]
   15eea:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   15eec:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   15ef0:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   15ef2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   15ef6:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   15ef8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
   15efc:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   15efe:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   15f00:	4629      	mov	r1, r5
   15f02:	f242 0020 	movw	r0, #8224	; 0x2020
   15f06:	f7ff ff03 	bl	15d10 <bt_hci_cmd_send>
   15f0a:	e7d7      	b.n	15ebc <le_conn_param_req+0x68>
   15f0c:	0002953b 	.word	0x0002953b

00015f10 <hci_tx_thread>:
{
   15f10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   15f14:	f8df 8128 	ldr.w	r8, [pc, #296]	; 16040 <hci_tx_thread+0x130>
		BT_ASSERT(err == 0);
   15f18:	f8df 9128 	ldr.w	r9, [pc, #296]	; 16044 <hci_tx_thread+0x134>
			ev_count += bt_conn_prepare_events(&events[1]);
   15f1c:	f108 0a14 	add.w	sl, r8, #20
		events[0].state = K_POLL_STATE_NOT_READY;
   15f20:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   15f24:	4650      	mov	r0, sl
		events[0].state = K_POLL_STATE_NOT_READY;
   15f26:	f36f 3352 	bfc	r3, #13, #6
   15f2a:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   15f2e:	f001 fb0f 	bl	17550 <bt_conn_prepare_events>
   15f32:	1c46      	adds	r6, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
   15f34:	4842      	ldr	r0, [pc, #264]	; (16040 <hci_tx_thread+0x130>)
   15f36:	f04f 32ff 	mov.w	r2, #4294967295
   15f3a:	f04f 33ff 	mov.w	r3, #4294967295
   15f3e:	4631      	mov	r1, r6
   15f40:	f00d f9ac 	bl	2329c <z_impl_k_poll>
		BT_ASSERT(err == 0);
   15f44:	b158      	cbz	r0, 15f5e <hci_tx_thread+0x4e>
   15f46:	4840      	ldr	r0, [pc, #256]	; (16048 <hci_tx_thread+0x138>)
   15f48:	f640 12b3 	movw	r2, #2483	; 0x9b3
   15f4c:	4649      	mov	r1, r9
   15f4e:	f00e fa1e 	bl	2438e <assert_print>
   15f52:	4040      	eors	r0, r0
   15f54:	f380 8811 	msr	BASEPRI, r0
   15f58:	f04f 0003 	mov.w	r0, #3
   15f5c:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   15f5e:	4d3b      	ldr	r5, [pc, #236]	; (1604c <hci_tx_thread+0x13c>)
{
   15f60:	4f37      	ldr	r7, [pc, #220]	; (16040 <hci_tx_thread+0x130>)
   15f62:	f505 7b90 	add.w	fp, r5, #288	; 0x120
	for (; count; ev++, count--) {
   15f66:	b916      	cbnz	r6, 15f6e <hci_tx_thread+0x5e>
	z_impl_k_yield();
   15f68:	f00c fa28 	bl	223bc <z_impl_k_yield>
	while (1) {
   15f6c:	e7d8      	b.n	15f20 <hci_tx_thread+0x10>
		switch (ev->state) {
   15f6e:	68fa      	ldr	r2, [r7, #12]
   15f70:	f3c2 3245 	ubfx	r2, r2, #13, #6
   15f74:	2a01      	cmp	r2, #1
   15f76:	d953      	bls.n	16020 <hci_tx_thread+0x110>
   15f78:	2a04      	cmp	r2, #4
   15f7a:	d15b      	bne.n	16034 <hci_tx_thread+0x124>
			if (ev->tag == BT_EVENT_CMD_TX) {
   15f7c:	7b3b      	ldrb	r3, [r7, #12]
   15f7e:	2b00      	cmp	r3, #0
   15f80:	d151      	bne.n	16026 <hci_tx_thread+0x116>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   15f82:	4833      	ldr	r0, [pc, #204]	; (16050 <hci_tx_thread+0x140>)
   15f84:	2200      	movs	r2, #0
   15f86:	2300      	movs	r3, #0
   15f88:	f006 f91c 	bl	1c1c4 <net_buf_get>
	BT_ASSERT(buf);
   15f8c:	4604      	mov	r4, r0
   15f8e:	b958      	cbnz	r0, 15fa8 <hci_tx_thread+0x98>
   15f90:	482d      	ldr	r0, [pc, #180]	; (16048 <hci_tx_thread+0x138>)
   15f92:	f640 124a 	movw	r2, #2378	; 0x94a
   15f96:	4649      	mov	r1, r9
   15f98:	f00e f9f9 	bl	2438e <assert_print>
   15f9c:	4040      	eors	r0, r0
   15f9e:	f380 8811 	msr	BASEPRI, r0
   15fa2:	f04f 0003 	mov.w	r0, #3
   15fa6:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   15fa8:	f04f 33ff 	mov.w	r3, #4294967295
   15fac:	f04f 32ff 	mov.w	r2, #4294967295
   15fb0:	4658      	mov	r0, fp
   15fb2:	f00a feaf 	bl	20d14 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   15fb6:	f8d5 3138 	ldr.w	r3, [r5, #312]	; 0x138
   15fba:	b153      	cbz	r3, 15fd2 <hci_tx_thread+0xc2>
		BT_ERR("Uncleared pending sent_cmd");
   15fbc:	4825      	ldr	r0, [pc, #148]	; (16054 <hci_tx_thread+0x144>)
   15fbe:	2145      	movs	r1, #69	; 0x45
   15fc0:	f00e f9f3 	bl	243aa <z_log_minimal_printk>
		net_buf_unref(bt_dev.sent_cmd);
   15fc4:	f8d5 0138 	ldr.w	r0, [r5, #312]	; 0x138
   15fc8:	f006 fa4c 	bl	1c464 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   15fcc:	2300      	movs	r3, #0
   15fce:	f8c5 3138 	str.w	r3, [r5, #312]	; 0x138
	bt_dev.sent_cmd = net_buf_ref(buf);
   15fd2:	4620      	mov	r0, r4
   15fd4:	f006 fa8a 	bl	1c4ec <net_buf_ref>
   15fd8:	f8c5 0138 	str.w	r0, [r5, #312]	; 0x138
	err = bt_send(buf);
   15fdc:	4620      	mov	r0, r4
   15fde:	f7ff fe8f 	bl	15d00 <bt_send>
	if (err) {
   15fe2:	4602      	mov	r2, r0
   15fe4:	b1e0      	cbz	r0, 16020 <hci_tx_thread+0x110>
		BT_ERR("Unable to send to driver (err %d)", err);
   15fe6:	481c      	ldr	r0, [pc, #112]	; (16058 <hci_tx_thread+0x148>)
   15fe8:	2145      	movs	r1, #69	; 0x45
   15fea:	f00e f9de 	bl	243aa <z_log_minimal_printk>
	z_impl_k_sem_give(sem);
   15fee:	481b      	ldr	r0, [pc, #108]	; (1605c <hci_tx_thread+0x14c>)
   15ff0:	f00a fe56 	bl	20ca0 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   15ff4:	4620      	mov	r0, r4
   15ff6:	f005 ffab 	bl	1bf50 <net_buf_id>
   15ffa:	4b19      	ldr	r3, [pc, #100]	; (16060 <hci_tx_thread+0x150>)
   15ffc:	220c      	movs	r2, #12
   15ffe:	fb02 3000 	mla	r0, r2, r0, r3
   16002:	211f      	movs	r1, #31
   16004:	8840      	ldrh	r0, [r0, #2]
   16006:	4622      	mov	r2, r4
   16008:	f7ff faae 	bl	15568 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
   1600c:	f8d5 0138 	ldr.w	r0, [r5, #312]	; 0x138
   16010:	f006 fa28 	bl	1c464 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   16014:	2300      	movs	r3, #0
		net_buf_unref(buf);
   16016:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
   16018:	f8c5 3138 	str.w	r3, [r5, #312]	; 0x138
		net_buf_unref(buf);
   1601c:	f006 fa22 	bl	1c464 <net_buf_unref>
	for (; count; ev++, count--) {
   16020:	3714      	adds	r7, #20
   16022:	3e01      	subs	r6, #1
   16024:	e79f      	b.n	15f66 <hci_tx_thread+0x56>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   16026:	2b01      	cmp	r3, #1
   16028:	d1fa      	bne.n	16020 <hci_tx_thread+0x110>
					conn = CONTAINER_OF(ev->fifo,
   1602a:	6938      	ldr	r0, [r7, #16]
					bt_conn_process_tx(conn);
   1602c:	3838      	subs	r0, #56	; 0x38
   1602e:	f001 fea9 	bl	17d84 <bt_conn_process_tx>
   16032:	e7f5      	b.n	16020 <hci_tx_thread+0x110>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
   16034:	480b      	ldr	r0, [pc, #44]	; (16064 <hci_tx_thread+0x154>)
   16036:	2157      	movs	r1, #87	; 0x57
   16038:	f00e f9b7 	bl	243aa <z_log_minimal_printk>
   1603c:	e7f0      	b.n	16020 <hci_tx_thread+0x110>
   1603e:	bf00      	nop
   16040:	20000568 	.word	0x20000568
   16044:	00029624 	.word	0x00029624
   16048:	000289af 	.word	0x000289af
   1604c:	200002d0 	.word	0x200002d0
   16050:	20000414 	.word	0x20000414
   16054:	0002990b 	.word	0x0002990b
   16058:	000298a9 	.word	0x000298a9
   1605c:	200003f0 	.word	0x200003f0
   16060:	20001e74 	.word	0x20001e74
   16064:	0002992b 	.word	0x0002992b

00016068 <hci_event_prio>:
{
   16068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1606c:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   1606e:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   16072:	4630      	mov	r0, r6
   16074:	f010 ff0e 	bl	26e94 <net_buf_simple_headroom>
	state->len = buf->len;
   16078:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   1607c:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   16080:	4605      	mov	r5, r0
   16082:	d80b      	bhi.n	1609c <hci_event_prio+0x34>
   16084:	491b      	ldr	r1, [pc, #108]	; (160f4 <hci_event_prio+0x8c>)
   16086:	481c      	ldr	r0, [pc, #112]	; (160f8 <hci_event_prio+0x90>)
   16088:	f640 524f 	movw	r2, #3407	; 0xd4f
   1608c:	f00e f97f 	bl	2438e <assert_print>
   16090:	4040      	eors	r0, r0
   16092:	f380 8811 	msr	BASEPRI, r0
   16096:	f04f 0003 	mov.w	r0, #3
   1609a:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   1609c:	4630      	mov	r0, r6
   1609e:	2102      	movs	r1, #2
   160a0:	f006 fad8 	bl	1c654 <net_buf_simple_pull_mem>
   160a4:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   160a6:	7800      	ldrb	r0, [r0, #0]
   160a8:	f00e fff1 	bl	2508e <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   160ac:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   160ae:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   160b0:	d40b      	bmi.n	160ca <hci_event_prio+0x62>
   160b2:	4910      	ldr	r1, [pc, #64]	; (160f4 <hci_event_prio+0x8c>)
   160b4:	4810      	ldr	r0, [pc, #64]	; (160f8 <hci_event_prio+0x90>)
   160b6:	f640 5253 	movw	r2, #3411	; 0xd53
   160ba:	f00e f968 	bl	2438e <assert_print>
   160be:	4040      	eors	r0, r0
   160c0:	f380 8811 	msr	BASEPRI, r0
   160c4:	f04f 0003 	mov.w	r0, #3
   160c8:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   160ca:	2305      	movs	r3, #5
   160cc:	4a0b      	ldr	r2, [pc, #44]	; (160fc <hci_event_prio+0x94>)
   160ce:	7838      	ldrb	r0, [r7, #0]
   160d0:	4621      	mov	r1, r4
   160d2:	f7ff f943 	bl	1535c <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   160d6:	07b3      	lsls	r3, r6, #30
   160d8:	d507      	bpl.n	160ea <hci_event_prio+0x82>
	buf->data = buf->__buf + state->offset;
   160da:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   160dc:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   160e0:	fa10 f585 	uxtah	r5, r0, r5
   160e4:	60a5      	str	r5, [r4, #8]
}
   160e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   160ea:	4620      	mov	r0, r4
}
   160ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   160f0:	f006 b9b8 	b.w	1c464 <net_buf_unref>
   160f4:	00029624 	.word	0x00029624
   160f8:	000289af 	.word	0x000289af
   160fc:	000281e8 	.word	0x000281e8

00016100 <bt_recv>:
{
   16100:	b538      	push	{r3, r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   16102:	7d02      	ldrb	r2, [r0, #20]
	switch (bt_buf_get_type(buf)) {
   16104:	2a01      	cmp	r2, #1
{
   16106:	4605      	mov	r5, r0
	switch (bt_buf_get_type(buf)) {
   16108:	d005      	beq.n	16116 <bt_recv+0x16>
   1610a:	2a03      	cmp	r2, #3
   1610c:	d112      	bne.n	16134 <bt_recv+0x34>
			rx_queue_put(buf);
   1610e:	f7ff f89d 	bl	1524c <rx_queue_put>
		return 0;
   16112:	2000      	movs	r0, #0
}
   16114:	bd38      	pop	{r3, r4, r5, pc}
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   16116:	6883      	ldr	r3, [r0, #8]
   16118:	7818      	ldrb	r0, [r3, #0]
   1611a:	f00e ffb8 	bl	2508e <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   1611e:	07c3      	lsls	r3, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   16120:	4604      	mov	r4, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   16122:	d502      	bpl.n	1612a <bt_recv+0x2a>
			hci_event_prio(buf);
   16124:	4628      	mov	r0, r5
   16126:	f7ff ff9f 	bl	16068 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1612a:	f014 0002 	ands.w	r0, r4, #2
   1612e:	d0f1      	beq.n	16114 <bt_recv+0x14>
			rx_queue_put(buf);
   16130:	4628      	mov	r0, r5
   16132:	e7ec      	b.n	1610e <bt_recv+0xe>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   16134:	4804      	ldr	r0, [pc, #16]	; (16148 <bt_recv+0x48>)
   16136:	2145      	movs	r1, #69	; 0x45
   16138:	f00e f937 	bl	243aa <z_log_minimal_printk>
		net_buf_unref(buf);
   1613c:	4628      	mov	r0, r5
   1613e:	f006 f991 	bl	1c464 <net_buf_unref>
		return -EINVAL;
   16142:	f06f 0015 	mvn.w	r0, #21
   16146:	e7e5      	b.n	16114 <bt_recv+0x14>
   16148:	00029951 	.word	0x00029951

0001614c <bt_hci_driver_register>:
	if (bt_dev.drv) {
   1614c:	4a08      	ldr	r2, [pc, #32]	; (16170 <bt_hci_driver_register+0x24>)
{
   1614e:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   16150:	f8d2 0160 	ldr.w	r0, [r2, #352]	; 0x160
   16154:	b930      	cbnz	r0, 16164 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   16156:	68d9      	ldr	r1, [r3, #12]
   16158:	b139      	cbz	r1, 1616a <bt_hci_driver_register+0x1e>
   1615a:	6959      	ldr	r1, [r3, #20]
   1615c:	b129      	cbz	r1, 1616a <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   1615e:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
	return 0;
   16162:	4770      	bx	lr
		return -EALREADY;
   16164:	f06f 0077 	mvn.w	r0, #119	; 0x77
   16168:	4770      	bx	lr
		return -EINVAL;
   1616a:	f06f 0015 	mvn.w	r0, #21
}
   1616e:	4770      	bx	lr
   16170:	200002d0 	.word	0x200002d0

00016174 <bt_finalize_init>:
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   16174:	4801      	ldr	r0, [pc, #4]	; (1617c <bt_finalize_init+0x8>)
   16176:	2104      	movs	r1, #4
   16178:	f00e bfb3 	b.w	250e2 <atomic_or>
   1617c:	2000039c 	.word	0x2000039c

00016180 <init_work>:
{
   16180:	b510      	push	{r4, lr}
	err = bt_init();
   16182:	f7fb f9c9 	bl	11518 <bt_init>
	if (ready_cb) {
   16186:	4b03      	ldr	r3, [pc, #12]	; (16194 <init_work+0x14>)
   16188:	681b      	ldr	r3, [r3, #0]
   1618a:	b113      	cbz	r3, 16192 <init_work+0x12>
}
   1618c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   16190:	4718      	bx	r3
}
   16192:	bd10      	pop	{r4, pc}
   16194:	20001e8c 	.word	0x20001e8c

00016198 <bt_enable>:
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
   16198:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bt_dev.drv) {
   1619a:	4d2f      	ldr	r5, [pc, #188]	; (16258 <bt_enable+0xc0>)
   1619c:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
{
   161a0:	b088      	sub	sp, #32
   161a2:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   161a4:	b943      	cbnz	r3, 161b8 <bt_enable+0x20>
		BT_ERR("No HCI driver registered");
   161a6:	482d      	ldr	r0, [pc, #180]	; (1625c <bt_enable+0xc4>)
   161a8:	2145      	movs	r1, #69	; 0x45
   161aa:	f00e f8fe 	bl	243aa <z_log_minimal_printk>
		return -ENODEV;
   161ae:	f06f 0412 	mvn.w	r4, #18
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   161b2:	4620      	mov	r0, r4
   161b4:	b008      	add	sp, #32
   161b6:	bd70      	pop	{r4, r5, r6, pc}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   161b8:	f06f 0102 	mvn.w	r1, #2
   161bc:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
   161c0:	f00e ffaa 	bl	25118 <atomic_and.isra.0>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   161c4:	2101      	movs	r1, #1
   161c6:	f00e ff8c 	bl	250e2 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   161ca:	07c3      	lsls	r3, r0, #31
   161cc:	d440      	bmi.n	16250 <bt_enable+0xb8>
		err = bt_settings_init();
   161ce:	f7fe fefb 	bl	14fc8 <bt_settings_init>
		if (err) {
   161d2:	4604      	mov	r4, r0
   161d4:	2800      	cmp	r0, #0
   161d6:	d1ec      	bne.n	161b2 <bt_enable+0x1a>
	ready_cb = cb;
   161d8:	4b21      	ldr	r3, [pc, #132]	; (16260 <bt_enable+0xc8>)
   161da:	601e      	str	r6, [r3, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   161dc:	2200      	movs	r2, #0
   161de:	2300      	movs	r3, #0
   161e0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   161e4:	f06f 0308 	mvn.w	r3, #8
   161e8:	e9cd 0302 	strd	r0, r3, [sp, #8]
   161ec:	e9cd 0000 	strd	r0, r0, [sp]
   161f0:	9004      	str	r0, [sp, #16]
   161f2:	4b1c      	ldr	r3, [pc, #112]	; (16264 <bt_enable+0xcc>)
   161f4:	491c      	ldr	r1, [pc, #112]	; (16268 <bt_enable+0xd0>)
   161f6:	481d      	ldr	r0, [pc, #116]	; (1626c <bt_enable+0xd4>)
   161f8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   161fc:	f00a f998 	bl	20530 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   16200:	491b      	ldr	r1, [pc, #108]	; (16270 <bt_enable+0xd8>)
   16202:	481a      	ldr	r0, [pc, #104]	; (1626c <bt_enable+0xd4>)
   16204:	f011 fa3e 	bl	27684 <z_impl_k_thread_name_set>
	k_work_queue_start(&bt_workq, rx_thread_stack,
   16208:	491a      	ldr	r1, [pc, #104]	; (16274 <bt_enable+0xdc>)
   1620a:	481b      	ldr	r0, [pc, #108]	; (16278 <bt_enable+0xe0>)
   1620c:	9400      	str	r4, [sp, #0]
   1620e:	f06f 0307 	mvn.w	r3, #7
   16212:	f640 0298 	movw	r2, #2200	; 0x898
   16216:	f00b f897 	bl	21348 <k_work_queue_start>
   1621a:	4918      	ldr	r1, [pc, #96]	; (1627c <bt_enable+0xe4>)
   1621c:	4816      	ldr	r0, [pc, #88]	; (16278 <bt_enable+0xe0>)
   1621e:	f011 fa31 	bl	27684 <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   16222:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
   16226:	68db      	ldr	r3, [r3, #12]
   16228:	4798      	blx	r3
	if (err) {
   1622a:	4604      	mov	r4, r0
   1622c:	b128      	cbz	r0, 1623a <bt_enable+0xa2>
		BT_ERR("HCI driver open failed (%d)", err);
   1622e:	4602      	mov	r2, r0
   16230:	2145      	movs	r1, #69	; 0x45
   16232:	4813      	ldr	r0, [pc, #76]	; (16280 <bt_enable+0xe8>)
   16234:	f00e f8b9 	bl	243aa <z_log_minimal_printk>
		return err;
   16238:	e7bb      	b.n	161b2 <bt_enable+0x1a>
	if (!cb) {
   1623a:	b926      	cbnz	r6, 16246 <bt_enable+0xae>
}
   1623c:	b008      	add	sp, #32
   1623e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
   16242:	f7fb b969 	b.w	11518 <bt_init>
	k_work_submit(&bt_dev.init);
   16246:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   1624a:	f00b f877 	bl	2133c <k_work_submit>
	return 0;
   1624e:	e7b0      	b.n	161b2 <bt_enable+0x1a>
		return -EALREADY;
   16250:	f06f 0477 	mvn.w	r4, #119	; 0x77
   16254:	e7ad      	b.n	161b2 <bt_enable+0x1a>
   16256:	bf00      	nop
   16258:	200002d0 	.word	0x200002d0
   1625c:	00029a72 	.word	0x00029a72
   16260:	20001e8c 	.word	0x20001e8c
   16264:	00015f11 	.word	0x00015f11
   16268:	20003740 	.word	0x20003740
   1626c:	200016d8 	.word	0x200016d8
   16270:	00029a90 	.word	0x00029a90
   16274:	20002e80 	.word	0x20002e80
   16278:	20001638 	.word	0x20001638
   1627c:	00029a96 	.word	0x00029a96
   16280:	00029a9c 	.word	0x00029a9c

00016284 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   16284:	4800      	ldr	r0, [pc, #0]	; (16288 <bt_get_name+0x4>)
   16286:	4770      	bx	lr
   16288:	00028963 	.word	0x00028963

0001628c <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   1628c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   1628e:	4f0b      	ldr	r7, [pc, #44]	; (162bc <id_find+0x30>)
{
   16290:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   16292:	2500      	movs	r5, #0
   16294:	79fb      	ldrb	r3, [r7, #7]
   16296:	b2ec      	uxtb	r4, r5
   16298:	42a3      	cmp	r3, r4
   1629a:	d802      	bhi.n	162a2 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   1629c:	f06f 0401 	mvn.w	r4, #1
   162a0:	e009      	b.n	162b6 <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   162a2:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
   162a6:	2207      	movs	r2, #7
   162a8:	4439      	add	r1, r7
   162aa:	4630      	mov	r0, r6
   162ac:	f011 fbc6 	bl	27a3c <memcmp>
   162b0:	3501      	adds	r5, #1
   162b2:	2800      	cmp	r0, #0
   162b4:	d1ee      	bne.n	16294 <id_find+0x8>
}
   162b6:	4620      	mov	r0, r4
   162b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   162ba:	bf00      	nop
   162bc:	200002d0 	.word	0x200002d0

000162c0 <set_random_address>:
{
   162c0:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   162c2:	2206      	movs	r2, #6
   162c4:	4912      	ldr	r1, [pc, #72]	; (16310 <set_random_address+0x50>)
   162c6:	4605      	mov	r5, r0
   162c8:	f011 fbb8 	bl	27a3c <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   162cc:	4602      	mov	r2, r0
   162ce:	b1d0      	cbz	r0, 16306 <set_random_address+0x46>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   162d0:	2106      	movs	r1, #6
   162d2:	f242 0005 	movw	r0, #8197	; 0x2005
   162d6:	f7ff fa79 	bl	157cc <bt_hci_cmd_create>
	if (!buf) {
   162da:	4604      	mov	r4, r0
   162dc:	b1a8      	cbz	r0, 1630a <set_random_address+0x4a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   162de:	2206      	movs	r2, #6
   162e0:	4629      	mov	r1, r5
   162e2:	3008      	adds	r0, #8
   162e4:	f010 fde2 	bl	26eac <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   162e8:	2200      	movs	r2, #0
   162ea:	4621      	mov	r1, r4
   162ec:	f242 0005 	movw	r0, #8197	; 0x2005
   162f0:	f7ff fab4 	bl	1585c <bt_hci_cmd_send_sync>
	if (err) {
   162f4:	4602      	mov	r2, r0
   162f6:	b930      	cbnz	r0, 16306 <set_random_address+0x46>
	bt_addr_copy(&bt_dev.random_addr.a, addr);
   162f8:	4805      	ldr	r0, [pc, #20]	; (16310 <set_random_address+0x50>)
   162fa:	4629      	mov	r1, r5
   162fc:	f00e fff2 	bl	252e4 <bt_addr_copy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   16300:	2301      	movs	r3, #1
   16302:	f800 3c01 	strb.w	r3, [r0, #-1]
}
   16306:	4610      	mov	r0, r2
   16308:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   1630a:	f06f 0268 	mvn.w	r2, #104	; 0x68
   1630e:	e7fa      	b.n	16306 <set_random_address+0x46>
   16310:	20000331 	.word	0x20000331

00016314 <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   16314:	b530      	push	{r4, r5, lr}
   16316:	4604      	mov	r4, r0
   16318:	b085      	sub	sp, #20
{
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   1631a:	460d      	mov	r5, r1
   1631c:	b1e1      	cbz	r1, 16358 <id_create.constprop.0+0x44>
   1631e:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   16320:	2207      	movs	r2, #7
   16322:	a902      	add	r1, sp, #8
   16324:	4628      	mov	r0, r5
   16326:	9302      	str	r3, [sp, #8]
   16328:	f8cd 300b 	str.w	r3, [sp, #11]
   1632c:	f011 fb86 	bl	27a3c <memcmp>
   16330:	b190      	cbz	r0, 16358 <id_create.constprop.0+0x44>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   16332:	4815      	ldr	r0, [pc, #84]	; (16388 <id_create.constprop.0+0x74>)
   16334:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   16338:	4629      	mov	r1, r5
   1633a:	4420      	add	r0, r4
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   1633c:	f00e ffd7 	bl	252ee <bt_addr_le_copy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   16340:	4812      	ldr	r0, [pc, #72]	; (1638c <id_create.constprop.0+0x78>)
   16342:	f00e ffc9 	bl	252d8 <atomic_get>
#endif
	/* Only store if stack was already initialized. Before initialization
	 * we don't know the flash content, so it's potentially harmful to
	 * try to write anything there.
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   16346:	0742      	lsls	r2, r0, #29
   16348:	f3c0 0380 	ubfx	r3, r0, #2, #1
   1634c:	d51a      	bpl.n	16384 <id_create.constprop.0+0x70>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
   1634e:	f7fe fdf3 	bl	14f38 <bt_settings_save_id>
	}

	return 0;
   16352:	2000      	movs	r0, #0
}
   16354:	b005      	add	sp, #20
   16356:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
   16358:	4668      	mov	r0, sp
   1635a:	f00e fe8a 	bl	25072 <bt_addr_le_create_static>
			if (err) {
   1635e:	2800      	cmp	r0, #0
   16360:	d1f8      	bne.n	16354 <id_create.constprop.0+0x40>
		} while (id_find(&new_addr) >= 0);
   16362:	4668      	mov	r0, sp
   16364:	f7ff ff92 	bl	1628c <id_find>
   16368:	2800      	cmp	r0, #0
   1636a:	daf5      	bge.n	16358 <id_create.constprop.0+0x44>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   1636c:	4806      	ldr	r0, [pc, #24]	; (16388 <id_create.constprop.0+0x74>)
   1636e:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   16372:	4420      	add	r0, r4
   16374:	4669      	mov	r1, sp
   16376:	f00e ffba 	bl	252ee <bt_addr_le_copy>
		if (addr) {
   1637a:	2d00      	cmp	r5, #0
   1637c:	d0e0      	beq.n	16340 <id_create.constprop.0+0x2c>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   1637e:	4601      	mov	r1, r0
   16380:	4628      	mov	r0, r5
   16382:	e7db      	b.n	1633c <id_create.constprop.0+0x28>
	return 0;
   16384:	4618      	mov	r0, r3
   16386:	e7e5      	b.n	16354 <id_create.constprop.0+0x40>
   16388:	200002d0 	.word	0x200002d0
   1638c:	2000039c 	.word	0x2000039c

00016390 <bt_id_pending_keys_update>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16390:	4b0a      	ldr	r3, [pc, #40]	; (163bc <bt_id_pending_keys_update+0x2c>)
   16392:	f3bf 8f5b 	dmb	ish
   16396:	e853 2f00 	ldrex	r2, [r3]
   1639a:	f422 4180 	bic.w	r1, r2, #16384	; 0x4000
   1639e:	e843 1000 	strex	r0, r1, [r3]
   163a2:	2800      	cmp	r0, #0
   163a4:	d1f7      	bne.n	16396 <bt_id_pending_keys_update+0x6>
   163a6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   163aa:	0453      	lsls	r3, r2, #17
   163ac:	d504      	bpl.n	163b8 <bt_id_pending_keys_update+0x28>
			bt_keys_foreach(BT_KEYS_IRK, pending_id_update, NULL);
   163ae:	4904      	ldr	r1, [pc, #16]	; (163c0 <bt_id_pending_keys_update+0x30>)
   163b0:	2200      	movs	r2, #0
   163b2:	2002      	movs	r0, #2
   163b4:	f005 bc80 	b.w	1bcb8 <bt_keys_foreach>
}
   163b8:	4770      	bx	lr
   163ba:	bf00      	nop
   163bc:	2000039c 	.word	0x2000039c
   163c0:	0002543f 	.word	0x0002543f

000163c4 <bt_id_add>:
{
   163c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   163c6:	4c50      	ldr	r4, [pc, #320]	; (16508 <bt_id_add+0x144>)
   163c8:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
   163cc:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
{
   163d0:	4605      	mov	r5, r0
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   163d2:	b10a      	cbz	r2, 163d8 <bt_id_add+0x14>
   163d4:	429a      	cmp	r2, r3
   163d6:	d208      	bcs.n	163ea <bt_id_add+0x26>
		bt_dev.le.rl_entries++;
   163d8:	3301      	adds	r3, #1
   163da:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   163de:	7a2b      	ldrb	r3, [r5, #8]
   163e0:	f043 0304 	orr.w	r3, r3, #4
   163e4:	722b      	strb	r3, [r5, #8]
}
   163e6:	b003      	add	sp, #12
   163e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   163ea:	2100      	movs	r1, #0
   163ec:	2206      	movs	r2, #6
   163ee:	4608      	mov	r0, r1
   163f0:	f001 fbba 	bl	17b68 <bt_conn_lookup_state_le>
	if (conn) {
   163f4:	4606      	mov	r6, r0
   163f6:	b1a8      	cbz	r0, 16424 <bt_id_add+0x60>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   163f8:	f3bf 8f5b 	dmb	ish
   163fc:	34cc      	adds	r4, #204	; 0xcc
   163fe:	e854 3f00 	ldrex	r3, [r4]
   16402:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   16406:	e844 3200 	strex	r2, r3, [r4]
   1640a:	2a00      	cmp	r2, #0
   1640c:	d1f7      	bne.n	163fe <bt_id_add+0x3a>
   1640e:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
   16412:	7a2b      	ldrb	r3, [r5, #8]
   16414:	f043 0301 	orr.w	r3, r3, #1
   16418:	722b      	strb	r3, [r5, #8]
}
   1641a:	b003      	add	sp, #12
   1641c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   16420:	f001 b8cc 	b.w	175bc <bt_conn_unref>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   16424:	4601      	mov	r1, r0
   16426:	4839      	ldr	r0, [pc, #228]	; (1650c <bt_id_add+0x148>)
   16428:	f000 fb64 	bl	16af4 <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries) {
   1642c:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   16430:	b143      	cbz	r3, 16444 <bt_id_add+0x80>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   16432:	4630      	mov	r0, r6
   16434:	f00e ffb3 	bl	2539e <addr_res_enable>
		if (err) {
   16438:	b120      	cbz	r0, 16444 <bt_id_add+0x80>
			BT_WARN("Failed to disable address resolution");
   1643a:	4835      	ldr	r0, [pc, #212]	; (16510 <bt_id_add+0x14c>)
   1643c:	2157      	movs	r1, #87	; 0x57
		BT_WARN("Set privacy mode command is not supported");
   1643e:	f00d ffb4 	bl	243aa <z_log_minimal_printk>
	if (err) {
   16442:	e01c      	b.n	1647e <bt_id_add+0xba>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
   16444:	f894 2119 	ldrb.w	r2, [r4, #281]	; 0x119
   16448:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
   1644c:	429a      	cmp	r2, r3
   1644e:	d120      	bne.n	16492 <bt_id_add+0xce>
		BT_WARN("Resolving list size exceeded. Switching to host.");
   16450:	4830      	ldr	r0, [pc, #192]	; (16514 <bt_id_add+0x150>)
   16452:	2157      	movs	r1, #87	; 0x57
   16454:	f00d ffa9 	bl	243aa <z_log_minimal_printk>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
   16458:	2200      	movs	r2, #0
   1645a:	4611      	mov	r1, r2
   1645c:	f242 0029 	movw	r0, #8233	; 0x2029
   16460:	f7ff f9fc 	bl	1585c <bt_hci_cmd_send_sync>
		if (err) {
   16464:	b110      	cbz	r0, 1646c <bt_id_add+0xa8>
			BT_ERR("Failed to clear resolution list");
   16466:	482c      	ldr	r0, [pc, #176]	; (16518 <bt_id_add+0x154>)
   16468:	2145      	movs	r1, #69	; 0x45
   1646a:	e7e8      	b.n	1643e <bt_id_add+0x7a>
		bt_dev.le.rl_entries++;
   1646c:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   16470:	3301      	adds	r3, #1
   16472:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   16476:	7a2b      	ldrb	r3, [r5, #8]
   16478:	f043 0304 	orr.w	r3, r3, #4
   1647c:	722b      	strb	r3, [r5, #8]
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   1647e:	2001      	movs	r0, #1
   16480:	f00e ff8d 	bl	2539e <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   16484:	4825      	ldr	r0, [pc, #148]	; (1651c <bt_id_add+0x158>)
   16486:	2100      	movs	r1, #0
}
   16488:	b003      	add	sp, #12
   1648a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   1648e:	f000 bb31 	b.w	16af4 <bt_le_ext_adv_foreach>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
   16492:	462a      	mov	r2, r5
   16494:	1c6f      	adds	r7, r5, #1
   16496:	f812 0b2a 	ldrb.w	r0, [r2], #42
   1649a:	4639      	mov	r1, r7
   1649c:	f00e ff2e 	bl	252fc <hci_id_add>
	if (err) {
   164a0:	4606      	mov	r6, r0
   164a2:	b110      	cbz	r0, 164aa <bt_id_add+0xe6>
		BT_ERR("Failed to add IRK to controller");
   164a4:	481e      	ldr	r0, [pc, #120]	; (16520 <bt_id_add+0x15c>)
   164a6:	2145      	movs	r1, #69	; 0x45
   164a8:	e7c9      	b.n	1643e <bt_id_add+0x7a>
	bt_dev.le.rl_entries++;
   164aa:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   164ae:	3301      	adds	r3, #1
   164b0:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	keys->state |= BT_KEYS_ID_ADDED;
   164b4:	7a2b      	ldrb	r3, [r5, #8]
   164b6:	f043 0304 	orr.w	r3, r3, #4
   164ba:	722b      	strb	r3, [r5, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
   164bc:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
   164c0:	075b      	lsls	r3, r3, #29
   164c2:	d402      	bmi.n	164ca <bt_id_add+0x106>
		BT_WARN("Set privacy mode command is not supported");
   164c4:	4817      	ldr	r0, [pc, #92]	; (16524 <bt_id_add+0x160>)
   164c6:	2157      	movs	r1, #87	; 0x57
   164c8:	e7b9      	b.n	1643e <bt_id_add+0x7a>
	bt_addr_le_copy(&cp.id_addr, addr);
   164ca:	4639      	mov	r1, r7
   164cc:	4668      	mov	r0, sp
   164ce:	f00e ff0e 	bl	252ee <bt_addr_le_copy>
	cp.mode = mode;
   164d2:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   164d4:	2108      	movs	r1, #8
   164d6:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
   164da:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   164de:	f7ff f975 	bl	157cc <bt_hci_cmd_create>
	if (!buf) {
   164e2:	4604      	mov	r4, r0
   164e4:	b910      	cbnz	r0, 164ec <bt_id_add+0x128>
		BT_ERR("Failed to set privacy mode");
   164e6:	4810      	ldr	r0, [pc, #64]	; (16528 <bt_id_add+0x164>)
   164e8:	2145      	movs	r1, #69	; 0x45
   164ea:	e7a8      	b.n	1643e <bt_id_add+0x7a>
   164ec:	2208      	movs	r2, #8
   164ee:	4669      	mov	r1, sp
   164f0:	4410      	add	r0, r2
   164f2:	f010 fcdb 	bl	26eac <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
   164f6:	4632      	mov	r2, r6
   164f8:	4621      	mov	r1, r4
   164fa:	f242 004e 	movw	r0, #8270	; 0x204e
   164fe:	f7ff f9ad 	bl	1585c <bt_hci_cmd_send_sync>
	if (err) {
   16502:	2800      	cmp	r0, #0
   16504:	d0bb      	beq.n	1647e <bt_id_add+0xba>
   16506:	e7ee      	b.n	164e6 <bt_id_add+0x122>
   16508:	200002d0 	.word	0x200002d0
   1650c:	000253cf 	.word	0x000253cf
   16510:	00029af3 	.word	0x00029af3
   16514:	00029b1d 	.word	0x00029b1d
   16518:	00029b53 	.word	0x00029b53
   1651c:	00025375 	.word	0x00025375
   16520:	00029b78 	.word	0x00029b78
   16524:	00029b9d 	.word	0x00029b9d
   16528:	00029bcc 	.word	0x00029bcc

0001652c <bt_id_del>:
{
   1652c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!bt_dev.le.rl_size ||
   16530:	4c41      	ldr	r4, [pc, #260]	; (16638 <bt_id_del+0x10c>)
   16532:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   16536:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
{
   1653a:	4605      	mov	r5, r0
	if (!bt_dev.le.rl_size ||
   1653c:	b112      	cbz	r2, 16544 <bt_id_del+0x18>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   1653e:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
   16540:	4293      	cmp	r3, r2
   16542:	dd08      	ble.n	16556 <bt_id_del+0x2a>
		bt_dev.le.rl_entries--;
   16544:	3b01      	subs	r3, #1
   16546:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   1654a:	7a2b      	ldrb	r3, [r5, #8]
   1654c:	f023 0304 	bic.w	r3, r3, #4
   16550:	722b      	strb	r3, [r5, #8]
}
   16552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   16556:	2100      	movs	r1, #0
   16558:	2206      	movs	r2, #6
   1655a:	4608      	mov	r0, r1
   1655c:	f001 fb04 	bl	17b68 <bt_conn_lookup_state_le>
	if (conn) {
   16560:	4606      	mov	r6, r0
   16562:	b1a0      	cbz	r0, 1658e <bt_id_del+0x62>
   16564:	f3bf 8f5b 	dmb	ish
   16568:	34cc      	adds	r4, #204	; 0xcc
   1656a:	e854 3f00 	ldrex	r3, [r4]
   1656e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   16572:	e844 3200 	strex	r2, r3, [r4]
   16576:	2a00      	cmp	r2, #0
   16578:	d1f7      	bne.n	1656a <bt_id_del+0x3e>
   1657a:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
   1657e:	7a2b      	ldrb	r3, [r5, #8]
   16580:	f043 0302 	orr.w	r3, r3, #2
   16584:	722b      	strb	r3, [r5, #8]
}
   16586:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
   1658a:	f001 b817 	b.w	175bc <bt_conn_unref>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   1658e:	4601      	mov	r1, r0
   16590:	482a      	ldr	r0, [pc, #168]	; (1663c <bt_id_del+0x110>)
   16592:	f000 faaf 	bl	16af4 <bt_le_ext_adv_foreach>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   16596:	4630      	mov	r0, r6
   16598:	f00e ff01 	bl	2539e <addr_res_enable>
	if (err) {
   1659c:	4606      	mov	r6, r0
   1659e:	b180      	cbz	r0, 165c2 <bt_id_del+0x96>
		BT_ERR("Disabling address resolution failed (err %d)", err);
   165a0:	4602      	mov	r2, r0
   165a2:	2145      	movs	r1, #69	; 0x45
   165a4:	4826      	ldr	r0, [pc, #152]	; (16640 <bt_id_del+0x114>)
   165a6:	f00d ff00 	bl	243aa <z_log_minimal_printk>
	if (bt_dev.le.rl_entries) {
   165aa:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   165ae:	b113      	cbz	r3, 165b6 <bt_id_del+0x8a>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   165b0:	2001      	movs	r0, #1
   165b2:	f00e fef4 	bl	2539e <addr_res_enable>
}
   165b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   165ba:	4822      	ldr	r0, [pc, #136]	; (16644 <bt_id_del+0x118>)
   165bc:	2100      	movs	r1, #0
   165be:	f000 ba99 	b.w	16af4 <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   165c2:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   165c6:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
   165ca:	429a      	cmp	r2, r3
   165cc:	d20c      	bcs.n	165e8 <bt_id_del+0xbc>
		bt_dev.le.rl_entries--;
   165ce:	3b01      	subs	r3, #1
   165d0:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   165d4:	7a2b      	ldrb	r3, [r5, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   165d6:	491c      	ldr	r1, [pc, #112]	; (16648 <bt_id_del+0x11c>)
		keys->state &= ~BT_KEYS_ID_ADDED;
   165d8:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   165dc:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
   165de:	722b      	strb	r3, [r5, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   165e0:	2002      	movs	r0, #2
   165e2:	f005 fb69 	bl	1bcb8 <bt_keys_foreach>
		goto done;
   165e6:	e7e0      	b.n	165aa <bt_id_del+0x7e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
   165e8:	2107      	movs	r1, #7
   165ea:	f242 0028 	movw	r0, #8232	; 0x2028
   165ee:	f7ff f8ed 	bl	157cc <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
   165f2:	f105 0801 	add.w	r8, r5, #1
	if (!buf) {
   165f6:	4607      	mov	r7, r0
   165f8:	b920      	cbnz	r0, 16604 <bt_id_del+0xd8>
		BT_ERR("Failed to remove IRK from controller");
   165fa:	4814      	ldr	r0, [pc, #80]	; (1664c <bt_id_del+0x120>)
   165fc:	2145      	movs	r1, #69	; 0x45
   165fe:	f00d fed4 	bl	243aa <z_log_minimal_printk>
		goto done;
   16602:	e7d2      	b.n	165aa <bt_id_del+0x7e>
	return net_buf_simple_add(&buf->b, len);
   16604:	2107      	movs	r1, #7
   16606:	3008      	adds	r0, #8
   16608:	f006 f842 	bl	1c690 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   1660c:	4641      	mov	r1, r8
   1660e:	f00e fe6e 	bl	252ee <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
   16612:	4632      	mov	r2, r6
   16614:	4639      	mov	r1, r7
   16616:	f242 0028 	movw	r0, #8232	; 0x2028
   1661a:	f7ff f91f 	bl	1585c <bt_hci_cmd_send_sync>
	if (err) {
   1661e:	2800      	cmp	r0, #0
   16620:	d1eb      	bne.n	165fa <bt_id_del+0xce>
	bt_dev.le.rl_entries--;
   16622:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   16626:	3b01      	subs	r3, #1
   16628:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	keys->state &= ~BT_KEYS_ID_ADDED;
   1662c:	7a2b      	ldrb	r3, [r5, #8]
   1662e:	f023 0304 	bic.w	r3, r3, #4
   16632:	722b      	strb	r3, [r5, #8]
   16634:	e7b9      	b.n	165aa <bt_id_del+0x7e>
   16636:	bf00      	nop
   16638:	200002d0 	.word	0x200002d0
   1663c:	000253cf 	.word	0x000253cf
   16640:	00029bec 	.word	0x00029bec
   16644:	00025375 	.word	0x00025375
   16648:	0002535f 	.word	0x0002535f
   1664c:	00029c1e 	.word	0x00029c1e

00016650 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   16650:	b573      	push	{r0, r1, r4, r5, r6, lr}
   16652:	460c      	mov	r4, r1
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   16654:	4605      	mov	r5, r0
   16656:	b918      	cbnz	r0, 16660 <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   16658:	b314      	cbz	r4, 166a0 <bt_id_create+0x50>
		return -EINVAL;
   1665a:	f06f 0015 	mvn.w	r0, #21
   1665e:	e01d      	b.n	1669c <bt_id_create+0x4c>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   16660:	2300      	movs	r3, #0
   16662:	2207      	movs	r2, #7
   16664:	4669      	mov	r1, sp
   16666:	9300      	str	r3, [sp, #0]
   16668:	f8cd 3003 	str.w	r3, [sp, #3]
   1666c:	f011 f9e6 	bl	27a3c <memcmp>
   16670:	2800      	cmp	r0, #0
   16672:	d0f1      	beq.n	16658 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   16674:	782b      	ldrb	r3, [r5, #0]
   16676:	2b01      	cmp	r3, #1
   16678:	d104      	bne.n	16684 <bt_id_create+0x34>
   1667a:	79ab      	ldrb	r3, [r5, #6]
   1667c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   16680:	2bc0      	cmp	r3, #192	; 0xc0
   16682:	d004      	beq.n	1668e <bt_id_create+0x3e>
			BT_ERR("Only static random identity address supported");
   16684:	4818      	ldr	r0, [pc, #96]	; (166e8 <bt_id_create+0x98>)
   16686:	2145      	movs	r1, #69	; 0x45
   16688:	f00d fe8f 	bl	243aa <z_log_minimal_printk>
			return -EINVAL;
   1668c:	e7e5      	b.n	1665a <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   1668e:	4628      	mov	r0, r5
   16690:	f7ff fdfc 	bl	1628c <id_find>
   16694:	2800      	cmp	r0, #0
   16696:	dbdf      	blt.n	16658 <bt_id_create+0x8>
			return -EALREADY;
   16698:	f06f 0077 	mvn.w	r0, #119	; 0x77
	if (err) {
		return err;
	}

	return new_id;
}
   1669c:	b002      	add	sp, #8
   1669e:	bd70      	pop	{r4, r5, r6, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   166a0:	4e12      	ldr	r6, [pc, #72]	; (166ec <bt_id_create+0x9c>)
   166a2:	79f3      	ldrb	r3, [r6, #7]
   166a4:	2b01      	cmp	r3, #1
   166a6:	d01c      	beq.n	166e2 <bt_id_create+0x92>
   166a8:	f106 00cc 	add.w	r0, r6, #204	; 0xcc
   166ac:	f00e fe14 	bl	252d8 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   166b0:	07c3      	lsls	r3, r0, #31
   166b2:	d40b      	bmi.n	166cc <bt_id_create+0x7c>
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   166b4:	2d00      	cmp	r5, #0
   166b6:	d0d0      	beq.n	1665a <bt_id_create+0xa>
   166b8:	2207      	movs	r2, #7
   166ba:	4669      	mov	r1, sp
   166bc:	4628      	mov	r0, r5
   166be:	9400      	str	r4, [sp, #0]
   166c0:	f8cd 4003 	str.w	r4, [sp, #3]
   166c4:	f011 f9ba 	bl	27a3c <memcmp>
   166c8:	2800      	cmp	r0, #0
   166ca:	d0c6      	beq.n	1665a <bt_id_create+0xa>
	new_id = bt_dev.id_count++;
   166cc:	79f4      	ldrb	r4, [r6, #7]
	err = id_create(new_id, addr, irk);
   166ce:	4629      	mov	r1, r5
	new_id = bt_dev.id_count++;
   166d0:	1c63      	adds	r3, r4, #1
	err = id_create(new_id, addr, irk);
   166d2:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
   166d4:	71f3      	strb	r3, [r6, #7]
	err = id_create(new_id, addr, irk);
   166d6:	f7ff fe1d 	bl	16314 <id_create.constprop.0>
	new_id = bt_dev.id_count++;
   166da:	2800      	cmp	r0, #0
   166dc:	bf08      	it	eq
   166de:	4620      	moveq	r0, r4
   166e0:	e7dc      	b.n	1669c <bt_id_create+0x4c>
		return -ENOMEM;
   166e2:	f06f 000b 	mvn.w	r0, #11
   166e6:	e7d9      	b.n	1669c <bt_id_create+0x4c>
   166e8:	00029c48 	.word	0x00029c48
   166ec:	200002d0 	.word	0x200002d0

000166f0 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   166f0:	b570      	push	{r4, r5, r6, lr}
   166f2:	b086      	sub	sp, #24
   166f4:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   166f6:	aa01      	add	r2, sp, #4
   166f8:	2100      	movs	r1, #0
   166fa:	f241 0009 	movw	r0, #4105	; 0x1009
   166fe:	f7ff f8ad 	bl	1585c <bt_hci_cmd_send_sync>
	if (err) {
   16702:	4604      	mov	r4, r0
   16704:	b130      	cbz	r0, 16714 <bt_id_read_public_addr+0x24>
		BT_WARN("Failed to read public address");
   16706:	4817      	ldr	r0, [pc, #92]	; (16764 <bt_id_read_public_addr+0x74>)
   16708:	2157      	movs	r1, #87	; 0x57
   1670a:	f00d fe4e 	bl	243aa <z_log_minimal_printk>

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
		return 0U;
   1670e:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   16710:	b006      	add	sp, #24
   16712:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   16714:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   16716:	9002      	str	r0, [sp, #8]
   16718:	689d      	ldr	r5, [r3, #8]
   1671a:	f8ad 000c 	strh.w	r0, [sp, #12]
   1671e:	3501      	adds	r5, #1
	return memcmp(a, b, sizeof(*a));
   16720:	2206      	movs	r2, #6
   16722:	a902      	add	r1, sp, #8
   16724:	4628      	mov	r0, r5
   16726:	f011 f989 	bl	27a3c <memcmp>
   1672a:	b918      	cbnz	r0, 16734 <bt_id_read_public_addr+0x44>
		net_buf_unref(rsp);
   1672c:	9801      	ldr	r0, [sp, #4]
   1672e:	f005 fe99 	bl	1c464 <net_buf_unref>
   16732:	e7ec      	b.n	1670e <bt_id_read_public_addr+0x1e>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   16734:	4b0c      	ldr	r3, [pc, #48]	; (16768 <bt_id_read_public_addr+0x78>)
   16736:	6818      	ldr	r0, [r3, #0]
   16738:	9004      	str	r0, [sp, #16]
   1673a:	889b      	ldrh	r3, [r3, #4]
   1673c:	f8ad 3014 	strh.w	r3, [sp, #20]
   16740:	2206      	movs	r2, #6
   16742:	a904      	add	r1, sp, #16
   16744:	4628      	mov	r0, r5
   16746:	f011 f979 	bl	27a3c <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   1674a:	2800      	cmp	r0, #0
   1674c:	d0ee      	beq.n	1672c <bt_id_read_public_addr+0x3c>
	bt_addr_copy(&addr->a, &rp->bdaddr);
   1674e:	4629      	mov	r1, r5
   16750:	1c70      	adds	r0, r6, #1
   16752:	f00e fdc7 	bl	252e4 <bt_addr_copy>
	net_buf_unref(rsp);
   16756:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   16758:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
   1675a:	f005 fe83 	bl	1c464 <net_buf_unref>
	return 1U;
   1675e:	2001      	movs	r0, #1
   16760:	e7d6      	b.n	16710 <bt_id_read_public_addr+0x20>
   16762:	bf00      	nop
   16764:	00029c7b 	.word	0x00029c7b
   16768:	00027fcb 	.word	0x00027fcb

0001676c <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   1676c:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   1676e:	4668      	mov	r0, sp
   16770:	f7ff ffbe 	bl	166f0 <bt_id_read_public_addr>
   16774:	4b04      	ldr	r3, [pc, #16]	; (16788 <bt_setup_public_id_addr+0x1c>)
   16776:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   16778:	b118      	cbz	r0, 16782 <bt_setup_public_id_addr+0x16>
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
   1677a:	4669      	mov	r1, sp
   1677c:	2000      	movs	r0, #0
   1677e:	f7ff fdc9 	bl	16314 <id_create.constprop.0>
}
   16782:	b003      	add	sp, #12
   16784:	f85d fb04 	ldr.w	pc, [sp], #4
   16788:	200002d0 	.word	0x200002d0

0001678c <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   1678c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   1678e:	4b1e      	ldr	r3, [pc, #120]	; (16808 <bt_read_static_addr+0x7c>)
   16790:	f893 40ba 	ldrb.w	r4, [r3, #186]	; 0xba
   16794:	f014 0401 	ands.w	r4, r4, #1
{
   16798:	4605      	mov	r5, r0
   1679a:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   1679c:	d104      	bne.n	167a8 <bt_read_static_addr+0x1c>
		BT_WARN("Read Static Addresses command not available");
   1679e:	481b      	ldr	r0, [pc, #108]	; (1680c <bt_read_static_addr+0x80>)
   167a0:	2157      	movs	r1, #87	; 0x57
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
	}

	net_buf_unref(rsp);
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
   167a2:	f00d fe02 	bl	243aa <z_log_minimal_printk>
   167a6:	e00c      	b.n	167c2 <bt_read_static_addr+0x36>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   167a8:	aa01      	add	r2, sp, #4
   167aa:	2100      	movs	r1, #0
   167ac:	f64f 4009 	movw	r0, #64521	; 0xfc09
   167b0:	f7ff f854 	bl	1585c <bt_hci_cmd_send_sync>
	if (err) {
   167b4:	4603      	mov	r3, r0
   167b6:	b138      	cbz	r0, 167c8 <bt_read_static_addr+0x3c>
		BT_WARN("Failed to read static addresses");
   167b8:	4815      	ldr	r0, [pc, #84]	; (16810 <bt_read_static_addr+0x84>)
   167ba:	2157      	movs	r1, #87	; 0x57
   167bc:	f00d fdf5 	bl	243aa <z_log_minimal_printk>
		return 0;
   167c0:	2400      	movs	r4, #0
	}

	return cnt;
}
   167c2:	4620      	mov	r0, r4
   167c4:	b003      	add	sp, #12
   167c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = (void *)rsp->data;
   167c8:	9801      	ldr	r0, [sp, #4]
   167ca:	6882      	ldr	r2, [r0, #8]
	cnt = MIN(rp->num_addrs, size);
   167cc:	7854      	ldrb	r4, [r2, #1]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   167ce:	f04f 0c16 	mov.w	ip, #22
   167d2:	42b4      	cmp	r4, r6
   167d4:	bf28      	it	cs
   167d6:	4634      	movcs	r4, r6
   167d8:	eb02 070c 	add.w	r7, r2, ip
	for (i = 0; i < cnt; i++) {
   167dc:	42a3      	cmp	r3, r4
   167de:	db06      	blt.n	167ee <bt_read_static_addr+0x62>
	net_buf_unref(rsp);
   167e0:	f005 fe40 	bl	1c464 <net_buf_unref>
	if (!cnt) {
   167e4:	2c00      	cmp	r4, #0
   167e6:	d1ec      	bne.n	167c2 <bt_read_static_addr+0x36>
		BT_WARN("No static addresses stored in controller");
   167e8:	480a      	ldr	r0, [pc, #40]	; (16814 <bt_read_static_addr+0x88>)
   167ea:	2157      	movs	r1, #87	; 0x57
   167ec:	e7d9      	b.n	167a2 <bt_read_static_addr+0x16>
   167ee:	1c96      	adds	r6, r2, #2
   167f0:	fb0c 5103 	mla	r1, ip, r3, r5
   167f4:	f856 eb04 	ldr.w	lr, [r6], #4
   167f8:	f841 eb04 	str.w	lr, [r1], #4
   167fc:	42be      	cmp	r6, r7
   167fe:	d1f9      	bne.n	167f4 <bt_read_static_addr+0x68>
   16800:	883e      	ldrh	r6, [r7, #0]
   16802:	800e      	strh	r6, [r1, #0]
	for (i = 0; i < cnt; i++) {
   16804:	3301      	adds	r3, #1
   16806:	e7e9      	b.n	167dc <bt_read_static_addr+0x50>
   16808:	200002d0 	.word	0x200002d0
   1680c:	00029c9e 	.word	0x00029c9e
   16810:	00029ccf 	.word	0x00029ccf
   16814:	00029cf4 	.word	0x00029cf4

00016818 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   16818:	b570      	push	{r4, r5, r6, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   1681a:	4d14      	ldr	r5, [pc, #80]	; (1686c <bt_setup_random_id_addr+0x54>)
   1681c:	79ec      	ldrb	r4, [r5, #7]
{
   1681e:	b088      	sub	sp, #32
	if (!bt_dev.id_count) {
   16820:	b9ec      	cbnz	r4, 1685e <bt_setup_random_id_addr+0x46>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   16822:	2101      	movs	r1, #1
   16824:	a802      	add	r0, sp, #8
   16826:	f7ff ffb1 	bl	1678c <bt_read_static_addr>
   1682a:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
   1682c:	b1b8      	cbz	r0, 1685e <bt_setup_random_id_addr+0x46>
					atomic_set_bit(bt_dev.flags,
						       BT_DEV_STORE_ID);
				}
#endif /* CONFIG_BT_PRIVACY */

				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   1682e:	2616      	movs	r6, #22
   16830:	ab02      	add	r3, sp, #8
   16832:	b2e2      	uxtb	r2, r4
   16834:	fb06 3102 	mla	r1, r6, r2, r3
   16838:	f10d 0001 	add.w	r0, sp, #1
   1683c:	f00e fd52 	bl	252e4 <bt_addr_copy>
				addr.type = BT_ADDR_LE_RANDOM;
   16840:	2301      	movs	r3, #1

				err = id_create(i, &addr, irk);
   16842:	4669      	mov	r1, sp
   16844:	4610      	mov	r0, r2
				addr.type = BT_ADDR_LE_RANDOM;
   16846:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   1684a:	f7ff fd63 	bl	16314 <id_create.constprop.0>
				if (err) {
   1684e:	b920      	cbnz	r0, 1685a <bt_setup_random_id_addr+0x42>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   16850:	79ea      	ldrb	r2, [r5, #7]
   16852:	3401      	adds	r4, #1
   16854:	b2e3      	uxtb	r3, r4
   16856:	429a      	cmp	r2, r3
   16858:	d8ea      	bhi.n	16830 <bt_setup_random_id_addr+0x18>
	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
}
   1685a:	b008      	add	sp, #32
   1685c:	bd70      	pop	{r4, r5, r6, pc}
	return bt_id_create(NULL, NULL);
   1685e:	2100      	movs	r1, #0
   16860:	4608      	mov	r0, r1
}
   16862:	b008      	add	sp, #32
   16864:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_id_create(NULL, NULL);
   16868:	f7ff bef2 	b.w	16650 <bt_id_create>
   1686c:	200002d0 	.word	0x200002d0

00016870 <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   16870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int err = 0;

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   16874:	f011 0401 	ands.w	r4, r1, #1
	id_addr = &bt_dev.id_addr[adv->id];
   16878:	7805      	ldrb	r5, [r0, #0]
{
   1687a:	460e      	mov	r6, r1
   1687c:	4690      	mov	r8, r2
   1687e:	461f      	mov	r7, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   16880:	d026      	beq.n	168d0 <bt_id_set_adv_own_addr+0x60>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   16882:	4c23      	ldr	r4, [pc, #140]	; (16910 <bt_id_set_adv_own_addr+0xa0>)
   16884:	b12a      	cbz	r2, 16892 <bt_id_set_adv_own_addr+0x22>
   16886:	0688      	lsls	r0, r1, #26
   16888:	d503      	bpl.n	16892 <bt_id_set_adv_own_addr+0x22>
   1688a:	f894 30d0 	ldrb.w	r3, [r4, #208]	; 0xd0
   1688e:	0659      	lsls	r1, r3, #25
   16890:	d53a      	bpl.n	16908 <bt_id_set_adv_own_addr+0x98>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   16892:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
   16896:	ea4f 09c5 	mov.w	r9, r5, lsl #3
   1689a:	5ce3      	ldrb	r3, [r4, r3]
   1689c:	2b01      	cmp	r3, #1
   1689e:	d008      	beq.n	168b2 <bt_id_set_adv_own_addr+0x42>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   168a0:	eba9 0505 	sub.w	r5, r9, r5
   168a4:	5d63      	ldrb	r3, [r4, r5]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   168a6:	f1b8 0f00 	cmp.w	r8, #0
   168aa:	d10c      	bne.n	168c6 <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   168ac:	703b      	strb	r3, [r7, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   168ae:	2000      	movs	r0, #0
   168b0:	e007      	b.n	168c2 <bt_id_set_adv_own_addr+0x52>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   168b2:	2007      	movs	r0, #7
   168b4:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
   168b8:	4420      	add	r0, r4
   168ba:	f7ff fd01 	bl	162c0 <set_random_address>
				if (err) {
   168be:	2800      	cmp	r0, #0
   168c0:	d0ee      	beq.n	168a0 <bt_id_set_adv_own_addr+0x30>
}
   168c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   168c6:	06b2      	lsls	r2, r6, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   168c8:	bf48      	it	mi
   168ca:	f043 0302 	orrmi.w	r3, r3, #2
   168ce:	e7ed      	b.n	168ac <bt_id_set_adv_own_addr+0x3c>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   168d0:	074b      	lsls	r3, r1, #29
   168d2:	d515      	bpl.n	16900 <bt_id_set_adv_own_addr+0x90>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   168d4:	f8df 8038 	ldr.w	r8, [pc, #56]	; 16910 <bt_id_set_adv_own_addr+0xa0>
   168d8:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
   168dc:	00ee      	lsls	r6, r5, #3
   168de:	f818 3003 	ldrb.w	r3, [r8, r3]
   168e2:	2b01      	cmp	r3, #1
   168e4:	d10a      	bne.n	168fc <bt_id_set_adv_own_addr+0x8c>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   168e6:	2007      	movs	r0, #7
   168e8:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
   168ec:	4440      	add	r0, r8
   168ee:	f7ff fce7 	bl	162c0 <set_random_address>
			*own_addr_type = id_addr->type;
   168f2:	1b75      	subs	r5, r6, r5
   168f4:	f818 3005 	ldrb.w	r3, [r8, r5]
			*own_addr_type = BT_ADDR_LE_RANDOM;
   168f8:	703b      	strb	r3, [r7, #0]
		if (err) {
   168fa:	e7e2      	b.n	168c2 <bt_id_set_adv_own_addr+0x52>
	int err = 0;
   168fc:	4620      	mov	r0, r4
   168fe:	e7f8      	b.n	168f2 <bt_id_set_adv_own_addr+0x82>
			err = bt_id_set_adv_private_addr(adv);
   16900:	f00e fd89 	bl	25416 <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   16904:	2301      	movs	r3, #1
   16906:	e7f7      	b.n	168f8 <bt_id_set_adv_own_addr+0x88>
			return -ENOTSUP;
   16908:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1690c:	e7d9      	b.n	168c2 <bt_id_set_adv_own_addr+0x52>
   1690e:	bf00      	nop
   16910:	200002d0 	.word	0x200002d0

00016914 <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   16914:	6843      	ldr	r3, [r0, #4]
{
   16916:	b537      	push	{r0, r1, r2, r4, r5, lr}
   16918:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   1691a:	0558      	lsls	r0, r3, #21
   1691c:	d502      	bpl.n	16924 <valid_adv_param+0x10>
		return false;
   1691e:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
   16920:	b003      	add	sp, #12
   16922:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   16924:	6922      	ldr	r2, [r4, #16]
   16926:	b10a      	cbz	r2, 1692c <valid_adv_param+0x18>
   16928:	07d9      	lsls	r1, r3, #31
   1692a:	d5f8      	bpl.n	1691e <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   1692c:	4d1a      	ldr	r5, [pc, #104]	; (16998 <valid_adv_param+0x84>)
   1692e:	7820      	ldrb	r0, [r4, #0]
   16930:	79eb      	ldrb	r3, [r5, #7]
   16932:	4283      	cmp	r3, r0
   16934:	d9f3      	bls.n	1691e <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   16936:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   1693a:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   1693c:	2207      	movs	r2, #7
   1693e:	4669      	mov	r1, sp
   16940:	4428      	add	r0, r5
   16942:	9300      	str	r3, [sp, #0]
   16944:	f8cd 3003 	str.w	r3, [sp, #3]
   16948:	f011 f878 	bl	27a3c <memcmp>
	if (param->id >= bt_dev.id_count ||
   1694c:	2800      	cmp	r0, #0
   1694e:	d0e6      	beq.n	1691e <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   16950:	6860      	ldr	r0, [r4, #4]
   16952:	07c2      	lsls	r2, r0, #31
   16954:	d406      	bmi.n	16964 <valid_adv_param+0x50>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   16956:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
   1695a:	2b08      	cmp	r3, #8
   1695c:	d802      	bhi.n	16964 <valid_adv_param+0x50>
   1695e:	68a3      	ldr	r3, [r4, #8]
   16960:	2b9f      	cmp	r3, #159	; 0x9f
   16962:	d9dc      	bls.n	1691e <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   16964:	f010 0f30 	tst.w	r0, #48	; 0x30
   16968:	d002      	beq.n	16970 <valid_adv_param+0x5c>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   1696a:	6923      	ldr	r3, [r4, #16]
   1696c:	2b00      	cmp	r3, #0
   1696e:	d0d6      	beq.n	1691e <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   16970:	06c3      	lsls	r3, r0, #27
   16972:	d401      	bmi.n	16978 <valid_adv_param+0x64>
   16974:	6923      	ldr	r3, [r4, #16]
   16976:	b943      	cbnz	r3, 1698a <valid_adv_param+0x76>
		if (param->interval_min > param->interval_max ||
   16978:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   1697c:	429a      	cmp	r2, r3
   1697e:	d8ce      	bhi.n	1691e <valid_adv_param+0xa>
   16980:	2a1f      	cmp	r2, #31
   16982:	d9cc      	bls.n	1691e <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   16984:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   16988:	d8c9      	bhi.n	1691e <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   1698a:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   1698e:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   16992:	bf18      	it	ne
   16994:	2001      	movne	r0, #1
   16996:	e7c3      	b.n	16920 <valid_adv_param+0xc>
   16998:	200002d0 	.word	0x200002d0

0001699c <hci_set_ad>:
	*data_len = set_data_len;
	return 0;
}

static int hci_set_ad(uint16_t hci_op, const struct bt_ad *ad, size_t ad_len)
{
   1699c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   169a0:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   169a2:	2120      	movs	r1, #32
{
   169a4:	4682      	mov	sl, r0
   169a6:	4616      	mov	r6, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   169a8:	f7fe ff10 	bl	157cc <bt_hci_cmd_create>
	if (!buf) {
   169ac:	4605      	mov	r5, r0
   169ae:	2800      	cmp	r0, #0
   169b0:	d056      	beq.n	16a60 <hci_set_ad+0xc4>
   169b2:	2120      	movs	r1, #32
   169b4:	3008      	adds	r0, #8
   169b6:	f005 fe6b 	bl	1c690 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   169ba:	2220      	movs	r2, #32
   169bc:	2100      	movs	r1, #0
   169be:	4681      	mov	r9, r0
   169c0:	f011 f86d 	bl	27a9e <memset>
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
	(void)memset(set_data, 0, sizeof(*set_data));

	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   169c4:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
   169c8:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   169cc:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;
   169ce:	2600      	movs	r6, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   169d0:	f8d4 8000 	ldr.w	r8, [r4]
   169d4:	2300      	movs	r3, #0
   169d6:	6862      	ldr	r2, [r4, #4]
   169d8:	4293      	cmp	r3, r2
   169da:	d30d      	bcc.n	169f8 <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
   169dc:	9b00      	ldr	r3, [sp, #0]
   169de:	3408      	adds	r4, #8
   169e0:	429c      	cmp	r4, r3
   169e2:	d1f5      	bne.n	169d0 <hci_set_ad+0x34>
	if (err) {
		net_buf_unref(buf);
		return err;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   169e4:	2200      	movs	r2, #0
   169e6:	4629      	mov	r1, r5
   169e8:	4650      	mov	r0, sl
	*data_len = set_data_len;
   169ea:	f889 6000 	strb.w	r6, [r9]
}
   169ee:	b003      	add	sp, #12
   169f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   169f4:	f7fe bf32 	b.w	1585c <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   169f8:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   169fc:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   16a00:	1cb0      	adds	r0, r6, #2
   16a02:	1811      	adds	r1, r2, r0
   16a04:	291f      	cmp	r1, #31
   16a06:	d914      	bls.n	16a32 <hci_set_ad+0x96>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   16a08:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   16a0c:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
   16a10:	d101      	bne.n	16a16 <hci_set_ad+0x7a>
   16a12:	2a00      	cmp	r2, #0
   16a14:	dc0b      	bgt.n	16a2e <hci_set_ad+0x92>
					BT_ERR("Too big advertising data");
   16a16:	4814      	ldr	r0, [pc, #80]	; (16a68 <hci_set_ad+0xcc>)
   16a18:	2145      	movs	r1, #69	; 0x45
   16a1a:	f00d fcc6 	bl	243aa <z_log_minimal_printk>
		net_buf_unref(buf);
   16a1e:	4628      	mov	r0, r5
   16a20:	f005 fd20 	bl	1c464 <net_buf_unref>
					return -EINVAL;
   16a24:	f06f 0015 	mvn.w	r0, #21
}
   16a28:	b003      	add	sp, #12
   16a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
   16a2e:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   16a32:	b2d7      	uxtb	r7, r2
   16a34:	1c79      	adds	r1, r7, #1
   16a36:	f80b 1006 	strb.w	r1, [fp, r6]
   16a3a:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
   16a3c:	b2c9      	uxtb	r1, r1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   16a3e:	fa5b f080 	uxtab	r0, fp, r0
   16a42:	f80b c001 	strb.w	ip, [fp, r1]
   16a46:	f8d8 1004 	ldr.w	r1, [r8, #4]
   16a4a:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   16a4c:	3702      	adds	r7, #2
   16a4e:	f011 f805 	bl	27a5c <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   16a52:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   16a54:	443e      	add	r6, r7
   16a56:	b2f6      	uxtb	r6, r6
		for (size_t j = 0; j < ad[i].len; j++) {
   16a58:	3301      	adds	r3, #1
   16a5a:	f108 0808 	add.w	r8, r8, #8
   16a5e:	e7ba      	b.n	169d6 <hci_set_ad+0x3a>
		return -ENOBUFS;
   16a60:	f06f 0068 	mvn.w	r0, #104	; 0x68
   16a64:	e7e0      	b.n	16a28 <hci_set_ad+0x8c>
   16a66:	bf00      	nop
   16a68:	00029d28 	.word	0x00029d28

00016a6c <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   16a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   16a6e:	4606      	mov	r6, r0
   16a70:	4b1e      	ldr	r3, [pc, #120]	; (16aec <le_adv_start_add_conn+0x80>)
   16a72:	f816 2b09 	ldrb.w	r2, [r6], #9
   16a76:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
   16a7a:	b085      	sub	sp, #20

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   16a7c:	2300      	movs	r3, #0
{
   16a7e:	4605      	mov	r5, r0
   16a80:	2207      	movs	r2, #7
   16a82:	460f      	mov	r7, r1
   16a84:	4630      	mov	r0, r6
   16a86:	4669      	mov	r1, sp
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   16a88:	9300      	str	r3, [sp, #0]
   16a8a:	f8cd 3003 	str.w	r3, [sp, #3]
   16a8e:	f010 ffd5 	bl	27a3c <memcmp>
   16a92:	782a      	ldrb	r2, [r5, #0]
   16a94:	4604      	mov	r4, r0
   16a96:	b9a8      	cbnz	r0, 16ac4 <le_adv_start_add_conn+0x58>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   16a98:	4b15      	ldr	r3, [pc, #84]	; (16af0 <le_adv_start_add_conn+0x84>)
   16a9a:	6818      	ldr	r0, [r3, #0]
   16a9c:	8899      	ldrh	r1, [r3, #4]
   16a9e:	9002      	str	r0, [sp, #8]
   16aa0:	799b      	ldrb	r3, [r3, #6]
   16aa2:	f8ad 100c 	strh.w	r1, [sp, #12]
   16aa6:	4610      	mov	r0, r2
   16aa8:	a902      	add	r1, sp, #8
   16aaa:	f88d 300e 	strb.w	r3, [sp, #14]
   16aae:	f001 f803 	bl	17ab8 <bt_conn_add_le>
		if (!conn) {
   16ab2:	4605      	mov	r5, r0
   16ab4:	b1b8      	cbz	r0, 16ae6 <le_adv_start_add_conn+0x7a>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECTING_ADV);
   16ab6:	2104      	movs	r1, #4
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
	if (!conn) {
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
   16ab8:	f000 fdb8 	bl	1762c <bt_conn_set_state>
	*out_conn = conn;
   16abc:	603d      	str	r5, [r7, #0]
	return 0;
}
   16abe:	4620      	mov	r0, r4
   16ac0:	b005      	add	sp, #20
   16ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   16ac4:	4631      	mov	r1, r6
   16ac6:	4610      	mov	r0, r2
   16ac8:	f001 f832 	bl	17b30 <bt_conn_exists_le>
   16acc:	4604      	mov	r4, r0
   16ace:	b938      	cbnz	r0, 16ae0 <le_adv_start_add_conn+0x74>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   16ad0:	7828      	ldrb	r0, [r5, #0]
   16ad2:	4631      	mov	r1, r6
   16ad4:	f000 fff0 	bl	17ab8 <bt_conn_add_le>
	if (!conn) {
   16ad8:	4605      	mov	r5, r0
   16ada:	b120      	cbz	r0, 16ae6 <le_adv_start_add_conn+0x7a>
	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
   16adc:	2105      	movs	r1, #5
   16ade:	e7eb      	b.n	16ab8 <le_adv_start_add_conn+0x4c>
		return -EINVAL;
   16ae0:	f06f 0415 	mvn.w	r4, #21
   16ae4:	e7eb      	b.n	16abe <le_adv_start_add_conn+0x52>
		return -ENOMEM;
   16ae6:	f06f 040b 	mvn.w	r4, #11
   16aea:	e7e8      	b.n	16abe <le_adv_start_add_conn+0x52>
   16aec:	200002d0 	.word	0x200002d0
   16af0:	00027fd1 	.word	0x00027fd1

00016af4 <bt_le_ext_adv_foreach>:
{
   16af4:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
   16af6:	4801      	ldr	r0, [pc, #4]	; (16afc <bt_le_ext_adv_foreach+0x8>)
   16af8:	4718      	bx	r3
   16afa:	bf00      	nop
   16afc:	200002e8 	.word	0x200002e8

00016b00 <bt_le_adv_lookup_legacy>:
}
   16b00:	4800      	ldr	r0, [pc, #0]	; (16b04 <bt_le_adv_lookup_legacy+0x4>)
   16b02:	4770      	bx	lr
   16b04:	200002e8 	.word	0x200002e8

00016b08 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   16b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
   16b0c:	690e      	ldr	r6, [r1, #16]
{
   16b0e:	b08f      	sub	sp, #60	; 0x3c
   16b10:	469a      	mov	sl, r3
	struct bt_conn *conn = NULL;
   16b12:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable = false;
   16b14:	ebb6 0903 	subs.w	r9, r6, r3
{
   16b18:	4605      	mov	r5, r0
   16b1a:	488b      	ldr	r0, [pc, #556]	; (16d48 <bt_le_adv_start_legacy+0x240>)
   16b1c:	9205      	str	r2, [sp, #20]
	bool dir_adv = (param->peer != NULL), scannable = false;
   16b1e:	bf18      	it	ne
   16b20:	f04f 0901 	movne.w	r9, #1
	struct bt_conn *conn = NULL;
   16b24:	9307      	str	r3, [sp, #28]
   16b26:	f00e fcab 	bl	25480 <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   16b2a:	0747      	lsls	r7, r0, #29
{
   16b2c:	460c      	mov	r4, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   16b2e:	f140 8100 	bpl.w	16d32 <bt_le_adv_start_legacy+0x22a>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   16b32:	4608      	mov	r0, r1
   16b34:	f7ff feee 	bl	16914 <valid_adv_param>
   16b38:	b928      	cbnz	r0, 16b46 <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
   16b3a:	f06f 0b15 	mvn.w	fp, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   16b3e:	4658      	mov	r0, fp
   16b40:	b00f      	add	sp, #60	; 0x3c
   16b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
   16b46:	4620      	mov	r0, r4
   16b48:	f00e fc77 	bl	2543a <bt_id_adv_random_addr_check>
   16b4c:	4680      	mov	r8, r0
   16b4e:	2800      	cmp	r0, #0
   16b50:	d0f3      	beq.n	16b3a <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   16b52:	f105 0710 	add.w	r7, r5, #16
   16b56:	4638      	mov	r0, r7
   16b58:	f00e fc92 	bl	25480 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   16b5c:	f3c0 1380 	ubfx	r3, r0, #6, #1
   16b60:	0640      	lsls	r0, r0, #25
   16b62:	f100 80e9 	bmi.w	16d38 <bt_le_adv_start_legacy+0x230>
	(void)memset(&set_param, 0, sizeof(set_param));
   16b66:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
   16b6a:	f8cd 3033 	str.w	r3, [sp, #51]	; 0x33
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   16b6e:	68a3      	ldr	r3, [r4, #8]
   16b70:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	set_param.channel_map  = get_adv_channel_map(param->options);
   16b74:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   16b76:	68e3      	ldr	r3, [r4, #12]
   16b78:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	set_param.channel_map  = get_adv_channel_map(param->options);
   16b7c:	f00e fc71 	bl	25462 <get_adv_channel_map>
	if (adv->id != param->id) {
   16b80:	782a      	ldrb	r2, [r5, #0]
   16b82:	7823      	ldrb	r3, [r4, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
   16b84:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
	if (adv->id != param->id) {
   16b88:	429a      	cmp	r2, r3
   16b8a:	d004      	beq.n	16b96 <bt_le_adv_start_legacy+0x8e>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   16b8c:	486e      	ldr	r0, [pc, #440]	; (16d48 <bt_le_adv_start_legacy+0x240>)
   16b8e:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   16b92:	f00e fc7b 	bl	2548c <atomic_and>
	bt_dev.adv_conn_id = adv->id;
   16b96:	4a6d      	ldr	r2, [pc, #436]	; (16d4c <bt_le_adv_start_legacy+0x244>)
	adv->id = param->id;
   16b98:	7823      	ldrb	r3, [r4, #0]
   16b9a:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
   16b9c:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   16ba0:	6861      	ldr	r1, [r4, #4]
   16ba2:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
   16ba6:	464a      	mov	r2, r9
   16ba8:	4628      	mov	r0, r5
   16baa:	f7ff fe61 	bl	16870 <bt_id_set_adv_own_addr>
	if (err) {
   16bae:	4683      	mov	fp, r0
   16bb0:	2800      	cmp	r0, #0
   16bb2:	d1c4      	bne.n	16b3e <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   16bb4:	f105 0009 	add.w	r0, r5, #9
	if (dir_adv) {
   16bb8:	2e00      	cmp	r6, #0
   16bba:	d04a      	beq.n	16c52 <bt_le_adv_start_legacy+0x14a>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   16bbc:	6921      	ldr	r1, [r4, #16]
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   16bbe:	f00e fc74 	bl	254aa <bt_addr_le_copy>
	name_type = get_adv_name_type_param(param);
   16bc2:	4620      	mov	r0, r4
   16bc4:	f00e fd06 	bl	255d4 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   16bc8:	6863      	ldr	r3, [r4, #4]
   16bca:	07d9      	lsls	r1, r3, #31
	name_type = get_adv_name_type_param(param);
   16bcc:	4681      	mov	r9, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   16bce:	d548      	bpl.n	16c62 <bt_le_adv_start_legacy+0x15a>
		if (dir_adv) {
   16bd0:	2e00      	cmp	r6, #0
   16bd2:	d043      	beq.n	16c5c <bt_le_adv_start_legacy+0x154>
				set_param.type = BT_HCI_ADV_DIRECT_IND;
   16bd4:	f013 0f10 	tst.w	r3, #16
   16bd8:	bf14      	ite	ne
   16bda:	2304      	movne	r3, #4
   16bdc:	2301      	moveq	r3, #1
			bt_addr_le_copy(&set_param.direct_addr, param->peer);
   16bde:	6921      	ldr	r1, [r4, #16]
   16be0:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   16be4:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   16be8:	f00e fc5f 	bl	254aa <bt_addr_le_copy>
	bool dir_adv = (param->peer != NULL), scannable = false;
   16bec:	f04f 0800 	mov.w	r8, #0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   16bf0:	210f      	movs	r1, #15
   16bf2:	f242 0006 	movw	r0, #8198	; 0x2006
   16bf6:	f7fe fde9 	bl	157cc <bt_hci_cmd_create>
	if (!buf) {
   16bfa:	4683      	mov	fp, r0
   16bfc:	2800      	cmp	r0, #0
   16bfe:	f000 809e 	beq.w	16d3e <bt_le_adv_start_legacy+0x236>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   16c02:	220f      	movs	r2, #15
   16c04:	a90a      	add	r1, sp, #40	; 0x28
   16c06:	3008      	adds	r0, #8
   16c08:	f010 f950 	bl	26eac <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   16c0c:	2200      	movs	r2, #0
   16c0e:	4659      	mov	r1, fp
   16c10:	f242 0006 	movw	r0, #8198	; 0x2006
   16c14:	f7fe fe22 	bl	1585c <bt_hci_cmd_send_sync>
	if (err) {
   16c18:	2800      	cmp	r0, #0
   16c1a:	f040 8093 	bne.w	16d44 <bt_le_adv_start_legacy+0x23c>
	if (!dir_adv) {
   16c1e:	b386      	cbz	r6, 16c82 <bt_le_adv_start_legacy+0x17a>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   16c20:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   16c22:	07db      	lsls	r3, r3, #31
   16c24:	d43b      	bmi.n	16c9e <bt_le_adv_start_legacy+0x196>
	return bt_le_adv_set_enable_legacy(adv, enable);
   16c26:	2101      	movs	r1, #1
   16c28:	4628      	mov	r0, r5
   16c2a:	f00e fce3 	bl	255f4 <bt_le_adv_set_enable_legacy>
	if (err) {
   16c2e:	4683      	mov	fp, r0
   16c30:	2800      	cmp	r0, #0
   16c32:	d077      	beq.n	16d24 <bt_le_adv_start_legacy+0x21c>
		BT_ERR("Failed to start advertiser");
   16c34:	4846      	ldr	r0, [pc, #280]	; (16d50 <bt_le_adv_start_legacy+0x248>)
   16c36:	2145      	movs	r1, #69	; 0x45
   16c38:	f00d fbb7 	bl	243aa <z_log_minimal_printk>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   16c3c:	9807      	ldr	r0, [sp, #28]
   16c3e:	2800      	cmp	r0, #0
   16c40:	f43f af7d 	beq.w	16b3e <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   16c44:	2100      	movs	r1, #0
   16c46:	f000 fcf1 	bl	1762c <bt_conn_set_state>
			bt_conn_unref(conn);
   16c4a:	9807      	ldr	r0, [sp, #28]
   16c4c:	f000 fcb6 	bl	175bc <bt_conn_unref>
   16c50:	e775      	b.n	16b3e <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   16c52:	9608      	str	r6, [sp, #32]
   16c54:	a908      	add	r1, sp, #32
   16c56:	f8cd 6023 	str.w	r6, [sp, #35]	; 0x23
   16c5a:	e7b0      	b.n	16bbe <bt_le_adv_start_legacy+0xb6>
			set_param.type = BT_HCI_ADV_IND;
   16c5c:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
   16c60:	e7c6      	b.n	16bf0 <bt_le_adv_start_legacy+0xe8>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   16c62:	059a      	lsls	r2, r3, #22
   16c64:	d403      	bmi.n	16c6e <bt_le_adv_start_legacy+0x166>
   16c66:	9b18      	ldr	r3, [sp, #96]	; 0x60
   16c68:	b90b      	cbnz	r3, 16c6e <bt_le_adv_start_legacy+0x166>
   16c6a:	2802      	cmp	r0, #2
   16c6c:	d103      	bne.n	16c76 <bt_le_adv_start_legacy+0x16e>
		set_param.type = BT_HCI_ADV_SCAN_IND;
   16c6e:	2302      	movs	r3, #2
   16c70:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   16c74:	e7bc      	b.n	16bf0 <bt_le_adv_start_legacy+0xe8>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   16c76:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
   16c78:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   16c7c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   16c80:	e7b6      	b.n	16bf0 <bt_le_adv_start_legacy+0xe8>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   16c82:	9b19      	ldr	r3, [sp, #100]	; 0x64
   16c84:	9300      	str	r3, [sp, #0]
   16c86:	e9cd 8901 	strd	r8, r9, [sp, #4]
   16c8a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   16c8c:	9905      	ldr	r1, [sp, #20]
   16c8e:	4652      	mov	r2, sl
   16c90:	4628      	mov	r0, r5
   16c92:	f00e fc28 	bl	254e6 <le_adv_update.constprop.0>
		if (err) {
   16c96:	4683      	mov	fp, r0
   16c98:	2800      	cmp	r0, #0
   16c9a:	d0c1      	beq.n	16c20 <bt_le_adv_start_legacy+0x118>
   16c9c:	e74f      	b.n	16b3e <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
   16c9e:	a907      	add	r1, sp, #28
   16ca0:	4628      	mov	r0, r5
   16ca2:	f7ff fee3 	bl	16a6c <le_adv_start_add_conn>
		if (err) {
   16ca6:	4683      	mov	fp, r0
   16ca8:	2800      	cmp	r0, #0
   16caa:	d0bc      	beq.n	16c26 <bt_le_adv_start_legacy+0x11e>
			if (err == -ENOMEM && !dir_adv &&
   16cac:	f110 0f0c 	cmn.w	r0, #12
   16cb0:	f47f af45 	bne.w	16b3e <bt_le_adv_start_legacy+0x36>
   16cb4:	2e00      	cmp	r6, #0
   16cb6:	f47f af42 	bne.w	16b3e <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   16cba:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
   16cbc:	0798      	lsls	r0, r3, #30
   16cbe:	f53f af3e 	bmi.w	16b3e <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   16cc2:	6862      	ldr	r2, [r4, #4]
   16cc4:	f082 0202 	eor.w	r2, r2, #2
   16cc8:	f3c2 0b40 	ubfx	fp, r2, #1, #1
   16ccc:	f00b 0201 	and.w	r2, fp, #1
   16cd0:	210d      	movs	r1, #13
   16cd2:	4638      	mov	r0, r7
   16cd4:	f00e fbf0 	bl	254b8 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
   16cd8:	f109 33ff 	add.w	r3, r9, #4294967295
   16cdc:	425a      	negs	r2, r3
   16cde:	415a      	adcs	r2, r3
   16ce0:	2107      	movs	r1, #7
   16ce2:	4638      	mov	r0, r7
   16ce4:	f00e fbe8 	bl	254b8 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
   16ce8:	f1a9 0102 	sub.w	r1, r9, #2
   16cec:	424a      	negs	r2, r1
   16cee:	414a      	adcs	r2, r1
   16cf0:	4638      	mov	r0, r7
   16cf2:	2108      	movs	r1, #8
   16cf4:	f00e fbe0 	bl	254b8 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   16cf8:	6862      	ldr	r2, [r4, #4]
   16cfa:	2109      	movs	r1, #9
   16cfc:	f002 0201 	and.w	r2, r2, #1
   16d00:	4638      	mov	r0, r7
   16d02:	f00e fbd9 	bl	254b8 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   16d06:	4642      	mov	r2, r8
   16d08:	210a      	movs	r1, #10
   16d0a:	4638      	mov	r0, r7
   16d0c:	f00e fbd4 	bl	254b8 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   16d10:	6862      	ldr	r2, [r4, #4]
   16d12:	210c      	movs	r1, #12
   16d14:	f3c2 0280 	ubfx	r2, r2, #2, #1
   16d18:	4638      	mov	r0, r7
   16d1a:	f00e fbcd 	bl	254b8 <atomic_set_bit_to>
	return 0;
   16d1e:	f04f 0b00 	mov.w	fp, #0
   16d22:	e70c      	b.n	16b3e <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   16d24:	9807      	ldr	r0, [sp, #28]
   16d26:	b108      	cbz	r0, 16d2c <bt_le_adv_start_legacy+0x224>
		bt_conn_unref(conn);
   16d28:	f000 fc48 	bl	175bc <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   16d2c:	2e00      	cmp	r6, #0
   16d2e:	d1cd      	bne.n	16ccc <bt_le_adv_start_legacy+0x1c4>
   16d30:	e7c7      	b.n	16cc2 <bt_le_adv_start_legacy+0x1ba>
		return -EAGAIN;
   16d32:	f06f 0b0a 	mvn.w	fp, #10
   16d36:	e702      	b.n	16b3e <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
   16d38:	f06f 0b77 	mvn.w	fp, #119	; 0x77
   16d3c:	e6ff      	b.n	16b3e <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
   16d3e:	f06f 0b68 	mvn.w	fp, #104	; 0x68
   16d42:	e6fc      	b.n	16b3e <bt_le_adv_start_legacy+0x36>
   16d44:	4683      	mov	fp, r0
   16d46:	e6fa      	b.n	16b3e <bt_le_adv_start_legacy+0x36>
   16d48:	2000039c 	.word	0x2000039c
   16d4c:	200002d0 	.word	0x200002d0
   16d50:	00029d46 	.word	0x00029d46

00016d54 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   16d54:	b573      	push	{r0, r1, r4, r5, r6, lr}
   16d56:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   16d58:	9a06      	ldr	r2, [sp, #24]
{
   16d5a:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   16d5c:	e9cd 3200 	strd	r3, r2, [sp]
   16d60:	462b      	mov	r3, r5
   16d62:	460a      	mov	r2, r1
   16d64:	4601      	mov	r1, r0
   16d66:	4811      	ldr	r0, [pc, #68]	; (16dac <bt_le_adv_start+0x58>)
   16d68:	f7ff fece 	bl	16b08 <bt_le_adv_start_legacy>
   16d6c:	4621      	mov	r1, r4
   16d6e:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
   16d70:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
   16d72:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
   16d76:	429d      	cmp	r5, r3
   16d78:	d102      	bne.n	16d80 <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   16d7a:	4630      	mov	r0, r6
   16d7c:	b002      	add	sp, #8
   16d7e:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
   16d80:	880a      	ldrh	r2, [r1, #0]
   16d82:	4282      	cmp	r2, r0
   16d84:	d104      	bne.n	16d90 <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
   16d86:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   16d88:	b112      	cbz	r2, 16d90 <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   16d8a:	7812      	ldrb	r2, [r2, #0]
   16d8c:	07d2      	lsls	r2, r2, #31
   16d8e:	d402      	bmi.n	16d96 <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
   16d90:	3301      	adds	r3, #1
   16d92:	3108      	adds	r1, #8
   16d94:	e7ef      	b.n	16d76 <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   16d96:	4906      	ldr	r1, [pc, #24]	; (16db0 <bt_le_adv_start+0x5c>)
   16d98:	4806      	ldr	r0, [pc, #24]	; (16db4 <bt_le_adv_start+0x60>)
   16d9a:	f00a fb3f 	bl	2141c <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   16d9e:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   16da2:	2300      	movs	r3, #0
   16da4:	4803      	ldr	r0, [pc, #12]	; (16db4 <bt_le_adv_start+0x60>)
   16da6:	f00a fc2f 	bl	21608 <k_work_reschedule>
   16daa:	e7e6      	b.n	16d7a <bt_le_adv_start+0x26>
   16dac:	200002e8 	.word	0x200002e8
   16db0:	00016e59 	.word	0x00016e59
   16db4:	20000300 	.word	0x20000300

00016db8 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   16db8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (!adv) {
		BT_ERR("No valid legacy adv");
		return 0;
	}

	(void)bt_le_lim_adv_cancel_timeout(adv);
   16dba:	4822      	ldr	r0, [pc, #136]	; (16e44 <bt_le_adv_stop+0x8c>)
   16dbc:	f00e fc41 	bl	25642 <bt_le_lim_adv_cancel_timeout>
   16dc0:	4821      	ldr	r0, [pc, #132]	; (16e48 <bt_le_adv_stop+0x90>)
   16dc2:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   16dc6:	f00e fb61 	bl	2548c <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   16dca:	481f      	ldr	r0, [pc, #124]	; (16e48 <bt_le_adv_stop+0x90>)
   16dcc:	f00e fb58 	bl	25480 <atomic_get>
   16dd0:	4603      	mov	r3, r0
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   16dd2:	065a      	lsls	r2, r3, #25
   16dd4:	f3c0 1080 	ubfx	r0, r0, #6, #1
   16dd8:	d531      	bpl.n	16e3e <bt_le_adv_stop+0x86>
   16dda:	481b      	ldr	r0, [pc, #108]	; (16e48 <bt_le_adv_stop+0x90>)
   16ddc:	f00e fb50 	bl	25480 <atomic_get>
		 */
		bt_le_adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   16de0:	0583      	lsls	r3, r0, #22
   16de2:	d521      	bpl.n	16e28 <bt_le_adv_stop+0x70>
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   16de4:	2300      	movs	r3, #0
   16de6:	4819      	ldr	r0, [pc, #100]	; (16e4c <bt_le_adv_stop+0x94>)
   16de8:	9300      	str	r3, [sp, #0]
   16dea:	2207      	movs	r2, #7
   16dec:	4669      	mov	r1, sp
   16dee:	f8cd 3003 	str.w	r3, [sp, #3]
   16df2:	f010 fe23 	bl	27a3c <memcmp>
   16df6:	4b16      	ldr	r3, [pc, #88]	; (16e50 <bt_le_adv_stop+0x98>)
   16df8:	b9e8      	cbnz	r0, 16e36 <bt_le_adv_stop+0x7e>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   16dfa:	4a16      	ldr	r2, [pc, #88]	; (16e54 <bt_le_adv_stop+0x9c>)
   16dfc:	8891      	ldrh	r1, [r2, #4]
   16dfe:	6810      	ldr	r0, [r2, #0]
   16e00:	7992      	ldrb	r2, [r2, #6]
   16e02:	f8ad 100c 	strh.w	r1, [sp, #12]
   16e06:	f88d 200e 	strb.w	r2, [sp, #14]
   16e0a:	9002      	str	r0, [sp, #8]
   16e0c:	2204      	movs	r2, #4
   16e0e:	a902      	add	r1, sp, #8
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   16e10:	7e18      	ldrb	r0, [r3, #24]
   16e12:	f000 fea9 	bl	17b68 <bt_conn_lookup_state_le>
   16e16:	4604      	mov	r4, r0
	if (conn) {
   16e18:	b130      	cbz	r0, 16e28 <bt_le_adv_stop+0x70>
		conn->err = status;
   16e1a:	2100      	movs	r1, #0
   16e1c:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   16e1e:	f000 fc05 	bl	1762c <bt_conn_set_state>
		bt_conn_unref(conn);
   16e22:	4620      	mov	r0, r4
   16e24:	f000 fbca 	bl	175bc <bt_conn_unref>
		err = bt_le_adv_set_enable_ext(adv, false, NULL);
		if (err) {
			return err;
		}
	} else {
		err = bt_le_adv_set_enable_legacy(adv, false);
   16e28:	4806      	ldr	r0, [pc, #24]	; (16e44 <bt_le_adv_stop+0x8c>)
   16e2a:	2100      	movs	r1, #0
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   16e2c:	b004      	add	sp, #16
   16e2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = bt_le_adv_set_enable_legacy(adv, false);
   16e32:	f00e bbdf 	b.w	255f4 <bt_le_adv_set_enable_legacy>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   16e36:	2205      	movs	r2, #5
   16e38:	f103 0121 	add.w	r1, r3, #33	; 0x21
   16e3c:	e7e8      	b.n	16e10 <bt_le_adv_stop+0x58>
}
   16e3e:	b004      	add	sp, #16
   16e40:	bd10      	pop	{r4, pc}
   16e42:	bf00      	nop
   16e44:	200002e8 	.word	0x200002e8
   16e48:	200002f8 	.word	0x200002f8
   16e4c:	200002f1 	.word	0x200002f1
   16e50:	200002d0 	.word	0x200002d0
   16e54:	00027fd1 	.word	0x00027fd1

00016e58 <adv_timeout>:
}
#endif /* defined(CONFIG_BT_EXT_ADV) */


static void adv_timeout(struct k_work *work)
{
   16e58:	b508      	push	{r3, lr}
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   16e5a:	f7ff ffad 	bl	16db8 <bt_le_adv_stop>
#endif
	BT_WARN("Failed to stop advertising: %d", err);
}
   16e5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	err = bt_le_adv_stop();
   16e62:	4602      	mov	r2, r0
	BT_WARN("Failed to stop advertising: %d", err);
   16e64:	2157      	movs	r1, #87	; 0x57
   16e66:	4801      	ldr	r0, [pc, #4]	; (16e6c <adv_timeout+0x14>)
   16e68:	f00d ba9f 	b.w	243aa <z_log_minimal_printk>
   16e6c:	00029d66 	.word	0x00029d66

00016e70 <bt_le_adv_resume>:
{
   16e70:	b537      	push	{r0, r1, r2, r4, r5, lr}
   16e72:	481e      	ldr	r0, [pc, #120]	; (16eec <bt_le_adv_resume+0x7c>)
   16e74:	4c1d      	ldr	r4, [pc, #116]	; (16eec <bt_le_adv_resume+0x7c>)
   16e76:	f00e fb03 	bl	25480 <atomic_get>
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   16e7a:	f410 5f00 	tst.w	r0, #8192	; 0x2000
   16e7e:	d032      	beq.n	16ee6 <bt_le_adv_resume+0x76>
   16e80:	4620      	mov	r0, r4
   16e82:	f00e fafd 	bl	25480 <atomic_get>
   16e86:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   16e88:	f3c0 1580 	ubfx	r5, r0, #6, #1
   16e8c:	d42b      	bmi.n	16ee6 <bt_le_adv_resume+0x76>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   16e8e:	4620      	mov	r0, r4
   16e90:	f00e faf6 	bl	25480 <atomic_get>
	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   16e94:	0583      	lsls	r3, r0, #22
   16e96:	d526      	bpl.n	16ee6 <bt_le_adv_resume+0x76>
	err = le_adv_start_add_conn(adv, &conn);
   16e98:	a901      	add	r1, sp, #4
   16e9a:	f1a4 0010 	sub.w	r0, r4, #16
   16e9e:	f7ff fde5 	bl	16a6c <le_adv_start_add_conn>
	if (err) {
   16ea2:	bb00      	cbnz	r0, 16ee6 <bt_le_adv_resume+0x76>
	return bt_le_adv_set_enable_legacy(adv, enable);
   16ea4:	2101      	movs	r1, #1
   16ea6:	f1a4 0010 	sub.w	r0, r4, #16
   16eaa:	f00e fba3 	bl	255f4 <bt_le_adv_set_enable_legacy>
	if (err) {
   16eae:	b150      	cbz	r0, 16ec6 <bt_le_adv_resume+0x56>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   16eb0:	4629      	mov	r1, r5
   16eb2:	9801      	ldr	r0, [sp, #4]
   16eb4:	f000 fbba 	bl	1762c <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   16eb8:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   16ebc:	4620      	mov	r0, r4
   16ebe:	f00e fae5 	bl	2548c <atomic_and>
	return (old & mask) != 0;
   16ec2:	f3c0 3540 	ubfx	r5, r0, #13, #1
	bt_conn_unref(conn);
   16ec6:	9801      	ldr	r0, [sp, #4]
   16ec8:	f000 fb78 	bl	175bc <bt_conn_unref>
	if (persist_paused) {
   16ecc:	b15d      	cbz	r5, 16ee6 <bt_le_adv_resume+0x76>
   16ece:	f3bf 8f5b 	dmb	ish
   16ed2:	e854 3f00 	ldrex	r3, [r4]
   16ed6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   16eda:	e844 3200 	strex	r2, r3, [r4]
   16ede:	2a00      	cmp	r2, #0
   16ee0:	d1f7      	bne.n	16ed2 <bt_le_adv_resume+0x62>
   16ee2:	f3bf 8f5b 	dmb	ish
}
   16ee6:	b003      	add	sp, #12
   16ee8:	bd30      	pop	{r4, r5, pc}
   16eea:	bf00      	nop
   16eec:	200002f8 	.word	0x200002f8

00016ef0 <bt_pub_key_is_debug>:
	0x5c, 0x15, 0x52, 0x5a, 0xbf, 0x9a, 0x32, 0x63,
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
   16ef0:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   16ef2:	4904      	ldr	r1, [pc, #16]	; (16f04 <bt_pub_key_is_debug+0x14>)
   16ef4:	2240      	movs	r2, #64	; 0x40
   16ef6:	f010 fda1 	bl	27a3c <memcmp>
}
   16efa:	fab0 f080 	clz	r0, r0
   16efe:	0940      	lsrs	r0, r0, #5
   16f00:	bd08      	pop	{r3, pc}
   16f02:	bf00      	nop
   16f04:	00029e33 	.word	0x00029e33

00016f08 <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   16f08:	b570      	push	{r4, r5, r6, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   16f0a:	4b37      	ldr	r3, [pc, #220]	; (16fe8 <bt_pub_key_gen+0xe0>)
   16f0c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   16f10:	f003 0306 	and.w	r3, r3, #6
   16f14:	2b06      	cmp	r3, #6
   16f16:	d007      	beq.n	16f28 <bt_pub_key_gen+0x20>
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
   16f18:	4834      	ldr	r0, [pc, #208]	; (16fec <bt_pub_key_gen+0xe4>)
   16f1a:	2157      	movs	r1, #87	; 0x57
   16f1c:	f00d fa45 	bl	243aa <z_log_minimal_printk>
		return -ENOTSUP;
   16f20:	f06f 0585 	mvn.w	r5, #133	; 0x85
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
   16f24:	4628      	mov	r0, r5
   16f26:	bd70      	pop	{r4, r5, r6, pc}
	if (!new_cb) {
   16f28:	2800      	cmp	r0, #0
   16f2a:	d05a      	beq.n	16fe2 <bt_pub_key_gen+0xda>
	return list->head;
   16f2c:	4e30      	ldr	r6, [pc, #192]	; (16ff0 <bt_pub_key_gen+0xe8>)
   16f2e:	6832      	ldr	r2, [r6, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   16f30:	b16a      	cbz	r2, 16f4e <bt_pub_key_gen+0x46>
   16f32:	1f13      	subs	r3, r2, #4
		if (cb == new_cb) {
   16f34:	4298      	cmp	r0, r3
   16f36:	d106      	bne.n	16f46 <bt_pub_key_gen+0x3e>
			BT_WARN("Callback already registered");
   16f38:	482e      	ldr	r0, [pc, #184]	; (16ff4 <bt_pub_key_gen+0xec>)
   16f3a:	2157      	movs	r1, #87	; 0x57
   16f3c:	f00d fa35 	bl	243aa <z_log_minimal_printk>
			return -EALREADY;
   16f40:	f06f 0577 	mvn.w	r5, #119	; 0x77
   16f44:	e7ee      	b.n	16f24 <bt_pub_key_gen+0x1c>
	return node->next;
   16f46:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   16f48:	b10b      	cbz	r3, 16f4e <bt_pub_key_gen+0x46>
   16f4a:	3b04      	subs	r3, #4
   16f4c:	e7f2      	b.n	16f34 <bt_pub_key_gen+0x2c>
	parent->next = child;
   16f4e:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
   16f50:	6872      	ldr	r2, [r6, #4]
	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
   16f52:	1d03      	adds	r3, r0, #4
	list->head = node;
   16f54:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   16f56:	b902      	cbnz	r2, 16f5a <bt_pub_key_gen+0x52>
	list->tail = node;
   16f58:	6073      	str	r3, [r6, #4]
   16f5a:	4c27      	ldr	r4, [pc, #156]	; (16ff8 <bt_pub_key_gen+0xf0>)
   16f5c:	f3bf 8f5b 	dmb	ish
   16f60:	e854 2f00 	ldrex	r2, [r4]
   16f64:	f042 0320 	orr.w	r3, r2, #32
   16f68:	e844 3100 	strex	r1, r3, [r4]
   16f6c:	2900      	cmp	r1, #0
   16f6e:	d1f7      	bne.n	16f60 <bt_pub_key_gen+0x58>
   16f70:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   16f74:	f012 0220 	ands.w	r2, r2, #32
   16f78:	d001      	beq.n	16f7e <bt_pub_key_gen+0x76>
		return 0;
   16f7a:	2500      	movs	r5, #0
   16f7c:	e7d2      	b.n	16f24 <bt_pub_key_gen+0x1c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16f7e:	f3bf 8f5b 	dmb	ish
   16f82:	e854 3f00 	ldrex	r3, [r4]
   16f86:	f023 0310 	bic.w	r3, r3, #16
   16f8a:	e844 3100 	strex	r1, r3, [r4]
   16f8e:	2900      	cmp	r1, #0
   16f90:	d1f7      	bne.n	16f82 <bt_pub_key_gen+0x7a>
   16f92:	f3bf 8f5b 	dmb	ish
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   16f96:	4611      	mov	r1, r2
   16f98:	f242 0025 	movw	r0, #8229	; 0x2025
   16f9c:	f7fe fc5e 	bl	1585c <bt_hci_cmd_send_sync>
	if (err) {
   16fa0:	4605      	mov	r5, r0
   16fa2:	2800      	cmp	r0, #0
   16fa4:	d0e9      	beq.n	16f7a <bt_pub_key_gen+0x72>
		BT_ERR("Sending LE P256 Public Key command failed");
   16fa6:	4815      	ldr	r0, [pc, #84]	; (16ffc <bt_pub_key_gen+0xf4>)
   16fa8:	2145      	movs	r1, #69	; 0x45
   16faa:	f00d f9fe 	bl	243aa <z_log_minimal_printk>
   16fae:	f3bf 8f5b 	dmb	ish
   16fb2:	e854 3f00 	ldrex	r3, [r4]
   16fb6:	f023 0320 	bic.w	r3, r3, #32
   16fba:	e844 3200 	strex	r2, r3, [r4]
   16fbe:	2a00      	cmp	r2, #0
   16fc0:	d1f7      	bne.n	16fb2 <bt_pub_key_gen+0xaa>
   16fc2:	f3bf 8f5b 	dmb	ish
	return list->head;
   16fc6:	6834      	ldr	r4, [r6, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   16fc8:	b13c      	cbz	r4, 16fda <bt_pub_key_gen+0xd2>
			if (cb->func) {
   16fca:	f854 3c04 	ldr.w	r3, [r4, #-4]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   16fce:	3c04      	subs	r4, #4
			if (cb->func) {
   16fd0:	b10b      	cbz	r3, 16fd6 <bt_pub_key_gen+0xce>
				cb->func(NULL);
   16fd2:	2000      	movs	r0, #0
   16fd4:	4798      	blx	r3
	return node->next;
   16fd6:	6864      	ldr	r4, [r4, #4]
   16fd8:	e7f6      	b.n	16fc8 <bt_pub_key_gen+0xc0>
	list->head = NULL;
   16fda:	2300      	movs	r3, #0
	list->tail = NULL;
   16fdc:	e9c6 3300 	strd	r3, r3, [r6]
		return err;
   16fe0:	e7a0      	b.n	16f24 <bt_pub_key_gen+0x1c>
		return -EINVAL;
   16fe2:	f06f 0515 	mvn.w	r5, #21
   16fe6:	e79d      	b.n	16f24 <bt_pub_key_gen+0x1c>
   16fe8:	200002d0 	.word	0x200002d0
   16fec:	00029d91 	.word	0x00029d91
   16ff0:	20001e94 	.word	0x20001e94
   16ff4:	00029db5 	.word	0x00029db5
   16ff8:	2000039c 	.word	0x2000039c
   16ffc:	00029dd6 	.word	0x00029dd6

00017000 <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17000:	4b05      	ldr	r3, [pc, #20]	; (17018 <bt_pub_key_get+0x18>)
   17002:	f3bf 8f5b 	dmb	ish
   17006:	681b      	ldr	r3, [r3, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
}
   17008:	4804      	ldr	r0, [pc, #16]	; (1701c <bt_pub_key_get+0x1c>)
   1700a:	f3bf 8f5b 	dmb	ish
		return pub_key;
   1700e:	f013 0f10 	tst.w	r3, #16
}
   17012:	bf08      	it	eq
   17014:	2000      	moveq	r0, #0
   17016:	4770      	bx	lr
   17018:	2000039c 	.word	0x2000039c
   1701c:	200023b5 	.word	0x200023b5

00017020 <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[BT_PUB_KEY_LEN], bt_dh_key_cb_t cb)
{
   17020:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (dh_key_cb == cb) {
   17022:	4e24      	ldr	r6, [pc, #144]	; (170b4 <bt_dh_key_gen+0x94>)
   17024:	6833      	ldr	r3, [r6, #0]
   17026:	428b      	cmp	r3, r1
{
   17028:	4604      	mov	r4, r0
	if (dh_key_cb == cb) {
   1702a:	d03c      	beq.n	170a6 <bt_dh_key_gen+0x86>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   1702c:	b11b      	cbz	r3, 17036 <bt_dh_key_gen+0x16>
		return -EBUSY;
   1702e:	f06f 040f 	mvn.w	r4, #15
		BT_WARN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
   17032:	4620      	mov	r0, r4
   17034:	bd70      	pop	{r4, r5, r6, pc}
   17036:	4b20      	ldr	r3, [pc, #128]	; (170b8 <bt_dh_key_gen+0x98>)
   17038:	f3bf 8f5b 	dmb	ish
   1703c:	681a      	ldr	r2, [r3, #0]
   1703e:	f3bf 8f5b 	dmb	ish
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   17042:	0692      	lsls	r2, r2, #26
   17044:	d4f3      	bmi.n	1702e <bt_dh_key_gen+0xe>
   17046:	f3bf 8f5b 	dmb	ish
   1704a:	681b      	ldr	r3, [r3, #0]
   1704c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   17050:	06db      	lsls	r3, r3, #27
   17052:	d52b      	bpl.n	170ac <bt_dh_key_gen+0x8c>
	dh_key_cb = cb;
   17054:	6031      	str	r1, [r6, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   17056:	f242 0026 	movw	r0, #8230	; 0x2026
   1705a:	2140      	movs	r1, #64	; 0x40
   1705c:	f7fe fbb6 	bl	157cc <bt_hci_cmd_create>
	if (!buf) {
   17060:	4605      	mov	r5, r0
   17062:	b1e8      	cbz	r0, 170a0 <bt_dh_key_gen+0x80>
	return net_buf_simple_add(&buf->b, len);
   17064:	2140      	movs	r1, #64	; 0x40
   17066:	3008      	adds	r0, #8
   17068:	f005 fb12 	bl	1c690 <net_buf_simple_add>
   1706c:	4623      	mov	r3, r4
   1706e:	f104 0240 	add.w	r2, r4, #64	; 0x40
   17072:	f853 1b04 	ldr.w	r1, [r3], #4
   17076:	f840 1b04 	str.w	r1, [r0], #4
   1707a:	4293      	cmp	r3, r2
   1707c:	d1f9      	bne.n	17072 <bt_dh_key_gen+0x52>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   1707e:	2200      	movs	r2, #0
   17080:	4629      	mov	r1, r5
   17082:	f242 0026 	movw	r0, #8230	; 0x2026
   17086:	f7fe fbe9 	bl	1585c <bt_hci_cmd_send_sync>
	if (err) {
   1708a:	4604      	mov	r4, r0
   1708c:	2800      	cmp	r0, #0
   1708e:	d0d0      	beq.n	17032 <bt_dh_key_gen+0x12>
		dh_key_cb = NULL;
   17090:	2300      	movs	r3, #0
		BT_WARN("Failed to generate DHKey (err %d)", err);
   17092:	480a      	ldr	r0, [pc, #40]	; (170bc <bt_dh_key_gen+0x9c>)
		dh_key_cb = NULL;
   17094:	6033      	str	r3, [r6, #0]
		BT_WARN("Failed to generate DHKey (err %d)", err);
   17096:	4622      	mov	r2, r4
   17098:	2157      	movs	r1, #87	; 0x57
   1709a:	f00d f986 	bl	243aa <z_log_minimal_printk>
		return err;
   1709e:	e7c8      	b.n	17032 <bt_dh_key_gen+0x12>
		return -ENOBUFS;
   170a0:	f06f 0468 	mvn.w	r4, #104	; 0x68
   170a4:	e7f4      	b.n	17090 <bt_dh_key_gen+0x70>
		return -EALREADY;
   170a6:	f06f 0477 	mvn.w	r4, #119	; 0x77
   170aa:	e7c2      	b.n	17032 <bt_dh_key_gen+0x12>
		return -EADDRNOTAVAIL;
   170ac:	f06f 047c 	mvn.w	r4, #124	; 0x7c
   170b0:	e7bf      	b.n	17032 <bt_dh_key_gen+0x12>
   170b2:	bf00      	nop
   170b4:	20001e90 	.word	0x20001e90
   170b8:	2000039c 	.word	0x2000039c
   170bc:	00029e05 	.word	0x00029e05

000170c0 <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
   170c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   170c2:	4b1d      	ldr	r3, [pc, #116]	; (17138 <bt_hci_evt_le_pkey_complete+0x78>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
   170c4:	6885      	ldr	r5, [r0, #8]
   170c6:	f3bf 8f5b 	dmb	ish
   170ca:	e853 2f00 	ldrex	r2, [r3]
   170ce:	f022 0220 	bic.w	r2, r2, #32
   170d2:	e843 2100 	strex	r1, r2, [r3]
   170d6:	2900      	cmp	r1, #0
   170d8:	d1f7      	bne.n	170ca <bt_hci_evt_le_pkey_complete+0xa>
   170da:	f3bf 8f5b 	dmb	ish

	BT_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
   170de:	782a      	ldrb	r2, [r5, #0]
   170e0:	b9aa      	cbnz	r2, 1710e <bt_hci_evt_le_pkey_complete+0x4e>
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
   170e2:	4916      	ldr	r1, [pc, #88]	; (1713c <bt_hci_evt_le_pkey_complete+0x7c>)
   170e4:	1c6a      	adds	r2, r5, #1
   170e6:	f105 0041 	add.w	r0, r5, #65	; 0x41
   170ea:	f852 4b04 	ldr.w	r4, [r2], #4
   170ee:	f841 4b04 	str.w	r4, [r1], #4
   170f2:	4282      	cmp	r2, r0
   170f4:	d1f9      	bne.n	170ea <bt_hci_evt_le_pkey_complete+0x2a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   170f6:	f3bf 8f5b 	dmb	ish
   170fa:	e853 2f00 	ldrex	r2, [r3]
   170fe:	f042 0210 	orr.w	r2, r2, #16
   17102:	e843 2100 	strex	r1, r2, [r3]
   17106:	2900      	cmp	r1, #0
   17108:	d1f7      	bne.n	170fa <bt_hci_evt_le_pkey_complete+0x3a>
   1710a:	f3bf 8f5b 	dmb	ish
	return list->head;
   1710e:	4e0c      	ldr	r6, [pc, #48]	; (17140 <bt_hci_evt_le_pkey_complete+0x80>)
   17110:	6834      	ldr	r4, [r6, #0]
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   17112:	b16c      	cbz	r4, 17130 <bt_hci_evt_le_pkey_complete+0x70>
		if (cb->func) {
			cb->func(evt->status ? NULL : pub_key);
   17114:	4f09      	ldr	r7, [pc, #36]	; (1713c <bt_hci_evt_le_pkey_complete+0x7c>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   17116:	3c04      	subs	r4, #4
		if (cb->func) {
   17118:	6823      	ldr	r3, [r4, #0]
   1711a:	b12b      	cbz	r3, 17128 <bt_hci_evt_le_pkey_complete+0x68>
			cb->func(evt->status ? NULL : pub_key);
   1711c:	782a      	ldrb	r2, [r5, #0]
   1711e:	2a00      	cmp	r2, #0
   17120:	bf0c      	ite	eq
   17122:	4638      	moveq	r0, r7
   17124:	2000      	movne	r0, #0
   17126:	4798      	blx	r3
	return node->next;
   17128:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1712a:	b10c      	cbz	r4, 17130 <bt_hci_evt_le_pkey_complete+0x70>
   1712c:	3c04      	subs	r4, #4
   1712e:	e7f3      	b.n	17118 <bt_hci_evt_le_pkey_complete+0x58>
	list->head = NULL;
   17130:	2300      	movs	r3, #0
	list->tail = NULL;
   17132:	e9c6 3300 	strd	r3, r3, [r6]
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
   17136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17138:	2000039c 	.word	0x2000039c
   1713c:	200023b5 	.word	0x200023b5
   17140:	20001e94 	.word	0x20001e94

00017144 <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	BT_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
   17144:	4905      	ldr	r1, [pc, #20]	; (1715c <bt_hci_evt_le_dhkey_complete+0x18>)
   17146:	680b      	ldr	r3, [r1, #0]
   17148:	b133      	cbz	r3, 17158 <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
   1714a:	6882      	ldr	r2, [r0, #8]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
   1714c:	2000      	movs	r0, #0
   1714e:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
   17150:	7811      	ldrb	r1, [r2, #0]
   17152:	b901      	cbnz	r1, 17156 <bt_hci_evt_le_dhkey_complete+0x12>
   17154:	1c50      	adds	r0, r2, #1
   17156:	4718      	bx	r3
	}
}
   17158:	4770      	bx	lr
   1715a:	bf00      	nop
   1715c:	20001e90 	.word	0x20001e90

00017160 <tx_free>:
	}
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
   17160:	2300      	movs	r3, #0
	tx->user_data = NULL;
   17162:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
   17166:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
   17168:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   1716a:	4801      	ldr	r0, [pc, #4]	; (17170 <tx_free+0x10>)
   1716c:	f010 bac0 	b.w	276f0 <k_queue_append>
   17170:	200008bc 	.word	0x200008bc

00017174 <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
   17174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   17176:	4b12      	ldr	r3, [pc, #72]	; (171c0 <notify_connected+0x4c>)
   17178:	681d      	ldr	r5, [r3, #0]
{
   1717a:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   1717c:	b995      	cbnz	r5, 171a4 <notify_connected+0x30>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1717e:	4d11      	ldr	r5, [pc, #68]	; (171c4 <notify_connected+0x50>)
   17180:	4e11      	ldr	r6, [pc, #68]	; (171c8 <notify_connected+0x54>)
   17182:	4f12      	ldr	r7, [pc, #72]	; (171cc <notify_connected+0x58>)
   17184:	42b5      	cmp	r5, r6
   17186:	d90a      	bls.n	1719e <notify_connected+0x2a>
   17188:	4811      	ldr	r0, [pc, #68]	; (171d0 <notify_connected+0x5c>)
   1718a:	4639      	mov	r1, r7
   1718c:	f240 5214 	movw	r2, #1300	; 0x514
   17190:	f00d f8fd 	bl	2438e <assert_print>
   17194:	f240 5114 	movw	r1, #1300	; 0x514
   17198:	4638      	mov	r0, r7
   1719a:	f00d f8f1 	bl	24380 <assert_post_action>
   1719e:	42b5      	cmp	r5, r6
   171a0:	d307      	bcc.n	171b2 <notify_connected+0x3e>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
   171a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->connected) {
   171a4:	682b      	ldr	r3, [r5, #0]
   171a6:	b113      	cbz	r3, 171ae <notify_connected+0x3a>
			cb->connected(conn, conn->err);
   171a8:	7b21      	ldrb	r1, [r4, #12]
   171aa:	4620      	mov	r0, r4
   171ac:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   171ae:	69ad      	ldr	r5, [r5, #24]
   171b0:	e7e4      	b.n	1717c <notify_connected+0x8>
		if (cb->connected) {
   171b2:	682b      	ldr	r3, [r5, #0]
   171b4:	b113      	cbz	r3, 171bc <notify_connected+0x48>
			cb->connected(conn, conn->err);
   171b6:	7b21      	ldrb	r1, [r4, #12]
   171b8:	4620      	mov	r0, r4
   171ba:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   171bc:	351c      	adds	r5, #28
   171be:	e7e1      	b.n	17184 <notify_connected+0x10>
   171c0:	20001ea8 	.word	0x20001ea8
   171c4:	00027d90 	.word	0x00027d90
   171c8:	00027dac 	.word	0x00027dac
   171cc:	00029e73 	.word	0x00029e73
   171d0:	000289af 	.word	0x000289af

000171d4 <send_frag>:
{
   171d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   171d8:	694d      	ldr	r5, [r1, #20]
{
   171da:	4604      	mov	r4, r0
   171dc:	460e      	mov	r6, r1
   171de:	4691      	mov	r9, r2
   171e0:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
   171e2:	f04f 33ff 	mov.w	r3, #4294967295
   171e6:	483f      	ldr	r0, [pc, #252]	; (172e4 <send_frag+0x110>)
   171e8:	f04f 32ff 	mov.w	r2, #4294967295
   171ec:	f009 fd92 	bl	20d14 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   171f0:	7b63      	ldrb	r3, [r4, #13]
   171f2:	2b07      	cmp	r3, #7
   171f4:	d141      	bne.n	1727a <send_frag+0xa6>
	__asm__ volatile(
   171f6:	f04f 0340 	mov.w	r3, #64	; 0x40
   171fa:	f3ef 8211 	mrs	r2, BASEPRI
   171fe:	f383 8812 	msr	BASEPRI_MAX, r3
   17202:	f3bf 8f6f 	isb	sy
	if (tx) {
   17206:	69a3      	ldr	r3, [r4, #24]
   17208:	2d00      	cmp	r5, #0
   1720a:	d048      	beq.n	1729e <send_frag+0xca>
	parent->next = child;
   1720c:	2100      	movs	r1, #0
   1720e:	6029      	str	r1, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
   17210:	2b00      	cmp	r3, #0
   17212:	d141      	bne.n	17298 <send_frag+0xc4>
	list->head = node;
   17214:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   17218:	f382 8811 	msr	BASEPRI, r2
   1721c:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   17220:	2104      	movs	r1, #4
   17222:	f106 0008 	add.w	r0, r6, #8
   17226:	f005 f9db 	bl	1c5e0 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   1722a:	8823      	ldrh	r3, [r4, #0]
   1722c:	f009 09fd 	and.w	r9, r9, #253	; 0xfd
   17230:	ea43 3909 	orr.w	r9, r3, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   17234:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   17236:	f8a0 9000 	strh.w	r9, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1723a:	3b04      	subs	r3, #4
   1723c:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1723e:	2302      	movs	r3, #2
   17240:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
   17242:	4630      	mov	r0, r6
   17244:	f7fe fd5c 	bl	15d00 <bt_send>
	if (err) {
   17248:	4602      	mov	r2, r0
   1724a:	2800      	cmp	r0, #0
   1724c:	d047      	beq.n	172de <send_frag+0x10a>
		BT_ERR("Unable to send to driver (err %d)", err);
   1724e:	4826      	ldr	r0, [pc, #152]	; (172e8 <send_frag+0x114>)
   17250:	2145      	movs	r1, #69	; 0x45
   17252:	f00d f8aa 	bl	243aa <z_log_minimal_printk>
	__asm__ volatile(
   17256:	f04f 0340 	mov.w	r3, #64	; 0x40
   1725a:	f3ef 8911 	mrs	r9, BASEPRI
   1725e:	f383 8812 	msr	BASEPRI_MAX, r3
   17262:	f3bf 8f6f 	isb	sy
		if (tx) {
   17266:	b335      	cbz	r5, 172b6 <send_frag+0xe2>
			sys_slist_find_and_remove(&conn->tx_pending, &tx->node);
   17268:	4629      	mov	r1, r5
   1726a:	f104 0014 	add.w	r0, r4, #20
   1726e:	f00e f9eb 	bl	25648 <sys_slist_find_and_remove>
	__asm__ volatile(
   17272:	f389 8811 	msr	BASEPRI, r9
   17276:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   1727a:	481a      	ldr	r0, [pc, #104]	; (172e4 <send_frag+0x110>)
   1727c:	f009 fd10 	bl	20ca0 <z_impl_k_sem_give>
	if (tx) {
   17280:	b115      	cbz	r5, 17288 <send_frag+0xb4>
		tx_free(tx);
   17282:	4628      	mov	r0, r5
   17284:	f7ff ff6c 	bl	17160 <tx_free>
	if (always_consume) {
   17288:	b11f      	cbz	r7, 17292 <send_frag+0xbe>
		net_buf_unref(buf);
   1728a:	4630      	mov	r0, r6
   1728c:	f005 f8ea 	bl	1c464 <net_buf_unref>
	return false;
   17290:	2700      	movs	r7, #0
}
   17292:	4638      	mov	r0, r7
   17294:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	parent->next = child;
   17298:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1729a:	61a5      	str	r5, [r4, #24]
}
   1729c:	e7bc      	b.n	17218 <send_frag+0x44>
		if (tail_tx) {
   1729e:	b133      	cbz	r3, 172ae <send_frag+0xda>
			pending_no_cb = &tail_tx->pending_no_cb;
   172a0:	f103 080c 	add.w	r8, r3, #12
   172a4:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   172a6:	3301      	adds	r3, #1
   172a8:	f8c8 3000 	str.w	r3, [r8]
   172ac:	e7b4      	b.n	17218 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   172ae:	69e3      	ldr	r3, [r4, #28]
   172b0:	f104 081c 	add.w	r8, r4, #28
   172b4:	e7f7      	b.n	172a6 <send_frag+0xd2>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   172b6:	f8d8 3000 	ldr.w	r3, [r8]
   172ba:	b953      	cbnz	r3, 172d2 <send_frag+0xfe>
   172bc:	490b      	ldr	r1, [pc, #44]	; (172ec <send_frag+0x118>)
   172be:	480c      	ldr	r0, [pc, #48]	; (172f0 <send_frag+0x11c>)
   172c0:	f44f 7204 	mov.w	r2, #528	; 0x210
   172c4:	f00d f863 	bl	2438e <assert_print>
   172c8:	4808      	ldr	r0, [pc, #32]	; (172ec <send_frag+0x118>)
   172ca:	f44f 7104 	mov.w	r1, #528	; 0x210
   172ce:	f00d f857 	bl	24380 <assert_post_action>
			(*pending_no_cb)--;
   172d2:	f8d8 3000 	ldr.w	r3, [r8]
   172d6:	3b01      	subs	r3, #1
   172d8:	f8c8 3000 	str.w	r3, [r8]
   172dc:	e7c9      	b.n	17272 <send_frag+0x9e>
	return true;
   172de:	2701      	movs	r7, #1
   172e0:	e7d7      	b.n	17292 <send_frag+0xbe>
   172e2:	bf00      	nop
   172e4:	200003d0 	.word	0x200003d0
   172e8:	000298a9 	.word	0x000298a9
   172ec:	00029e73 	.word	0x00029e73
   172f0:	000289af 	.word	0x000289af

000172f4 <bt_conn_get_pkts>:
}
   172f4:	4800      	ldr	r0, [pc, #0]	; (172f8 <bt_conn_get_pkts+0x4>)
   172f6:	4770      	bx	lr
   172f8:	200003d0 	.word	0x200003d0

000172fc <bt_conn_new>:
{
   172fc:	b538      	push	{r3, r4, r5, lr}
   172fe:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   17300:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   17302:	2501      	movs	r5, #1
   17304:	428b      	cmp	r3, r1
   17306:	d102      	bne.n	1730e <bt_conn_new+0x12>
		return NULL;
   17308:	2400      	movs	r4, #0
}
   1730a:	4620      	mov	r0, r4
   1730c:	bd38      	pop	{r3, r4, r5, pc}
   1730e:	f104 02c0 	add.w	r2, r4, #192	; 0xc0
   17312:	f3bf 8f5b 	dmb	ish
   17316:	e852 0f00 	ldrex	r0, [r2]
   1731a:	2800      	cmp	r0, #0
   1731c:	d104      	bne.n	17328 <bt_conn_new+0x2c>
   1731e:	e842 5c00 	strex	ip, r5, [r2]
   17322:	f1bc 0f00 	cmp.w	ip, #0
   17326:	d1f6      	bne.n	17316 <bt_conn_new+0x1a>
   17328:	f3bf 8f5b 	dmb	ish
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   1732c:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
   17330:	d002      	beq.n	17338 <bt_conn_new+0x3c>
	for (i = 0; i < size; i++) {
   17332:	3301      	adds	r3, #1
   17334:	4604      	mov	r4, r0
   17336:	e7e5      	b.n	17304 <bt_conn_new+0x8>
	if (!conn) {
   17338:	2c00      	cmp	r4, #0
   1733a:	d0e6      	beq.n	1730a <bt_conn_new+0xe>
__ssp_bos_icheck3(memset, void *, int)
   1733c:	22c0      	movs	r2, #192	; 0xc0
   1733e:	2100      	movs	r1, #0
   17340:	4620      	mov	r0, r4
   17342:	f010 fbac 	bl	27a9e <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   17346:	f104 0060 	add.w	r0, r4, #96	; 0x60
   1734a:	4904      	ldr	r1, [pc, #16]	; (1735c <bt_conn_new+0x60>)
   1734c:	f00a f866 	bl	2141c <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   17350:	4903      	ldr	r1, [pc, #12]	; (17360 <bt_conn_new+0x64>)
   17352:	f104 0028 	add.w	r0, r4, #40	; 0x28
   17356:	f009 ff45 	bl	211e4 <k_work_init>
	return conn;
   1735a:	e7d6      	b.n	1730a <bt_conn_new+0xe>
   1735c:	00017c19 	.word	0x00017c19
   17360:	000256e1 	.word	0x000256e1

00017364 <conn_cleanup>:
{
   17364:	b570      	push	{r4, r5, r6, lr}
   17366:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   17368:	f100 0638 	add.w	r6, r0, #56	; 0x38
   1736c:	2200      	movs	r2, #0
   1736e:	2300      	movs	r3, #0
   17370:	4630      	mov	r0, r6
   17372:	f004 ff27 	bl	1c1c4 <net_buf_get>
   17376:	4605      	mov	r5, r0
   17378:	bb20      	cbnz	r0, 173c4 <conn_cleanup+0x60>
	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
   1737a:	6963      	ldr	r3, [r4, #20]
   1737c:	b153      	cbz	r3, 17394 <conn_cleanup+0x30>
   1737e:	4915      	ldr	r1, [pc, #84]	; (173d4 <conn_cleanup+0x70>)
   17380:	4815      	ldr	r0, [pc, #84]	; (173d8 <conn_cleanup+0x74>)
   17382:	f240 2293 	movw	r2, #659	; 0x293
   17386:	f00d f802 	bl	2438e <assert_print>
   1738a:	4812      	ldr	r0, [pc, #72]	; (173d4 <conn_cleanup+0x70>)
   1738c:	f240 2193 	movw	r1, #659	; 0x293
   17390:	f00c fff6 	bl	24380 <assert_post_action>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   17394:	69e3      	ldr	r3, [r4, #28]
   17396:	b153      	cbz	r3, 173ae <conn_cleanup+0x4a>
   17398:	490e      	ldr	r1, [pc, #56]	; (173d4 <conn_cleanup+0x70>)
   1739a:	480f      	ldr	r0, [pc, #60]	; (173d8 <conn_cleanup+0x74>)
   1739c:	f44f 7225 	mov.w	r2, #660	; 0x294
   173a0:	f00c fff5 	bl	2438e <assert_print>
   173a4:	480b      	ldr	r0, [pc, #44]	; (173d4 <conn_cleanup+0x70>)
   173a6:	f44f 7125 	mov.w	r1, #660	; 0x294
   173aa:	f00c ffe9 	bl	24380 <assert_post_action>
	bt_conn_reset_rx_state(conn);
   173ae:	4620      	mov	r0, r4
   173b0:	f00e f999 	bl	256e6 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   173b4:	f104 0060 	add.w	r0, r4, #96	; 0x60
   173b8:	2200      	movs	r2, #0
}
   173ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   173be:	2300      	movs	r3, #0
   173c0:	f00a b922 	b.w	21608 <k_work_reschedule>
		if (tx_data(buf)->tx) {
   173c4:	6968      	ldr	r0, [r5, #20]
   173c6:	b108      	cbz	r0, 173cc <conn_cleanup+0x68>
			tx_free(tx_data(buf)->tx);
   173c8:	f7ff feca 	bl	17160 <tx_free>
		net_buf_unref(buf);
   173cc:	4628      	mov	r0, r5
   173ce:	f005 f849 	bl	1c464 <net_buf_unref>
   173d2:	e7cb      	b.n	1736c <conn_cleanup+0x8>
   173d4:	00029e73 	.word	0x00029e73
   173d8:	000289af 	.word	0x000289af

000173dc <bt_conn_recv>:
{
   173dc:	b570      	push	{r4, r5, r6, lr}
   173de:	4616      	mov	r6, r2
   173e0:	4604      	mov	r4, r0
   173e2:	460d      	mov	r5, r1
	tx_notify(conn);
   173e4:	f00e f959 	bl	2569a <tx_notify>
	switch (flags) {
   173e8:	2e01      	cmp	r6, #1
   173ea:	d01f      	beq.n	1742c <bt_conn_recv+0x50>
   173ec:	2e02      	cmp	r6, #2
   173ee:	d149      	bne.n	17484 <bt_conn_recv+0xa8>
		if (conn->rx) {
   173f0:	6923      	ldr	r3, [r4, #16]
   173f2:	b133      	cbz	r3, 17402 <bt_conn_recv+0x26>
			BT_ERR("Unexpected first L2CAP frame");
   173f4:	482b      	ldr	r0, [pc, #172]	; (174a4 <bt_conn_recv+0xc8>)
   173f6:	2145      	movs	r1, #69	; 0x45
   173f8:	f00c ffd7 	bl	243aa <z_log_minimal_printk>
			bt_conn_reset_rx_state(conn);
   173fc:	4620      	mov	r0, r4
   173fe:	f00e f972 	bl	256e6 <bt_conn_reset_rx_state>
		conn->rx = buf;
   17402:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   17404:	6921      	ldr	r1, [r4, #16]
   17406:	898a      	ldrh	r2, [r1, #12]
   17408:	2a01      	cmp	r2, #1
   1740a:	d949      	bls.n	174a0 <bt_conn_recv+0xc4>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   1740c:	688b      	ldr	r3, [r1, #8]
   1740e:	881b      	ldrh	r3, [r3, #0]
   17410:	3304      	adds	r3, #4
   17412:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   17414:	429a      	cmp	r2, r3
   17416:	d343      	bcc.n	174a0 <bt_conn_recv+0xc4>
	if (conn->rx->len > acl_total_len) {
   17418:	d93a      	bls.n	17490 <bt_conn_recv+0xb4>
		BT_ERR("ACL len mismatch (%u > %u)",
   1741a:	4823      	ldr	r0, [pc, #140]	; (174a8 <bt_conn_recv+0xcc>)
   1741c:	2145      	movs	r1, #69	; 0x45
   1741e:	f00c ffc4 	bl	243aa <z_log_minimal_printk>
		bt_conn_reset_rx_state(conn);
   17422:	4620      	mov	r0, r4
}
   17424:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   17428:	f00e b95d 	b.w	256e6 <bt_conn_reset_rx_state>
		if (!conn->rx) {
   1742c:	6920      	ldr	r0, [r4, #16]
   1742e:	b938      	cbnz	r0, 17440 <bt_conn_recv+0x64>
			BT_ERR("Unexpected L2CAP continuation");
   17430:	481e      	ldr	r0, [pc, #120]	; (174ac <bt_conn_recv+0xd0>)
   17432:	2145      	movs	r1, #69	; 0x45
   17434:	f00c ffb9 	bl	243aa <z_log_minimal_printk>
		bt_conn_reset_rx_state(conn);
   17438:	4620      	mov	r0, r4
   1743a:	f00e f954 	bl	256e6 <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   1743e:	e001      	b.n	17444 <bt_conn_recv+0x68>
		if (!buf->len) {
   17440:	89ae      	ldrh	r6, [r5, #12]
   17442:	b926      	cbnz	r6, 1744e <bt_conn_recv+0x72>
			net_buf_unref(buf);
   17444:	4628      	mov	r0, r5
}
   17446:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   1744a:	f005 b80b 	b.w	1c464 <net_buf_unref>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   1744e:	3008      	adds	r0, #8
   17450:	f00f fd24 	bl	26e9c <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   17454:	4286      	cmp	r6, r0
   17456:	d90b      	bls.n	17470 <bt_conn_recv+0x94>
			BT_ERR("Not enough buffer space for L2CAP data");
   17458:	4815      	ldr	r0, [pc, #84]	; (174b0 <bt_conn_recv+0xd4>)
   1745a:	2145      	movs	r1, #69	; 0x45
   1745c:	f00c ffa5 	bl	243aa <z_log_minimal_printk>
			bt_l2cap_recv(conn, conn->rx, false);
   17460:	6921      	ldr	r1, [r4, #16]
   17462:	2200      	movs	r2, #0
   17464:	4620      	mov	r0, r4
   17466:	f000 fe25 	bl	180b4 <bt_l2cap_recv>
			conn->rx = NULL;
   1746a:	2300      	movs	r3, #0
   1746c:	6123      	str	r3, [r4, #16]
   1746e:	e7e9      	b.n	17444 <bt_conn_recv+0x68>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   17470:	6920      	ldr	r0, [r4, #16]
   17472:	89aa      	ldrh	r2, [r5, #12]
   17474:	68a9      	ldr	r1, [r5, #8]
   17476:	3008      	adds	r0, #8
   17478:	f00f fd18 	bl	26eac <net_buf_simple_add_mem>
		net_buf_unref(buf);
   1747c:	4628      	mov	r0, r5
   1747e:	f004 fff1 	bl	1c464 <net_buf_unref>
		break;
   17482:	e7bf      	b.n	17404 <bt_conn_recv+0x28>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   17484:	480b      	ldr	r0, [pc, #44]	; (174b4 <bt_conn_recv+0xd8>)
   17486:	4632      	mov	r2, r6
   17488:	2145      	movs	r1, #69	; 0x45
   1748a:	f00c ff8e 	bl	243aa <z_log_minimal_printk>
   1748e:	e7d3      	b.n	17438 <bt_conn_recv+0x5c>
	conn->rx = NULL;
   17490:	2300      	movs	r3, #0
   17492:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   17494:	4620      	mov	r0, r4
   17496:	2201      	movs	r2, #1
}
   17498:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf, true);
   1749c:	f000 be0a 	b.w	180b4 <bt_l2cap_recv>
}
   174a0:	bd70      	pop	{r4, r5, r6, pc}
   174a2:	bf00      	nop
   174a4:	00029ea3 	.word	0x00029ea3
   174a8:	00029f37 	.word	0x00029f37
   174ac:	00029ec5 	.word	0x00029ec5
   174b0:	00029ee8 	.word	0x00029ee8
   174b4:	00029f14 	.word	0x00029f14

000174b8 <bt_conn_send_cb>:
{
   174b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   174bc:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
   174be:	7b43      	ldrb	r3, [r0, #13]
   174c0:	2b07      	cmp	r3, #7
{
   174c2:	4605      	mov	r5, r0
   174c4:	460e      	mov	r6, r1
   174c6:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   174c8:	d006      	beq.n	174d8 <bt_conn_send_cb+0x20>
		BT_ERR("not connected!");
   174ca:	481c      	ldr	r0, [pc, #112]	; (1753c <bt_conn_send_cb+0x84>)
   174cc:	2145      	movs	r1, #69	; 0x45
   174ce:	f00c ff6c 	bl	243aa <z_log_minimal_printk>
			return -ENOTCONN;
   174d2:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   174d6:	e016      	b.n	17506 <bt_conn_send_cb+0x4e>
	if (cb) {
   174d8:	b372      	cbz	r2, 17538 <bt_conn_send_cb+0x80>
	return z_impl_z_current_get();
   174da:	f00b f8ad 	bl	22638 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   174de:	4b18      	ldr	r3, [pc, #96]	; (17540 <bt_conn_send_cb+0x88>)
   174e0:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   174e2:	4818      	ldr	r0, [pc, #96]	; (17544 <bt_conn_send_cb+0x8c>)
   174e4:	bf07      	ittee	eq
   174e6:	2200      	moveq	r2, #0
   174e8:	2300      	moveq	r3, #0
   174ea:	f04f 32ff 	movne.w	r2, #4294967295
   174ee:	f04f 33ff 	movne.w	r3, #4294967295
   174f2:	f009 fb7b 	bl	20bec <z_impl_k_queue_get>
   174f6:	4604      	mov	r4, r0
		if (!tx) {
   174f8:	b938      	cbnz	r0, 1750a <bt_conn_send_cb+0x52>
			BT_ERR("Unable to allocate TX context");
   174fa:	4813      	ldr	r0, [pc, #76]	; (17548 <bt_conn_send_cb+0x90>)
   174fc:	2145      	movs	r1, #69	; 0x45
   174fe:	f00c ff54 	bl	243aa <z_log_minimal_printk>
			return -ENOBUFS;
   17502:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   17506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   1750a:	7b6b      	ldrb	r3, [r5, #13]
   1750c:	2b07      	cmp	r3, #7
   1750e:	d007      	beq.n	17520 <bt_conn_send_cb+0x68>
			BT_WARN("Disconnected while allocating context");
   17510:	480e      	ldr	r0, [pc, #56]	; (1754c <bt_conn_send_cb+0x94>)
   17512:	2157      	movs	r1, #87	; 0x57
   17514:	f00c ff49 	bl	243aa <z_log_minimal_printk>
			tx_free(tx);
   17518:	4620      	mov	r0, r4
   1751a:	f7ff fe21 	bl	17160 <tx_free>
   1751e:	e7d8      	b.n	174d2 <bt_conn_send_cb+0x1a>
		tx->pending_no_cb = 0U;
   17520:	2300      	movs	r3, #0
		tx->user_data = user_data;
   17522:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
   17526:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   17528:	6170      	str	r0, [r6, #20]
	net_buf_put(&conn->tx_queue, buf);
   1752a:	f105 0038 	add.w	r0, r5, #56	; 0x38
   1752e:	4631      	mov	r1, r6
   17530:	f004 ff6a 	bl	1c408 <net_buf_put>
	return 0;
   17534:	2000      	movs	r0, #0
   17536:	e7e6      	b.n	17506 <bt_conn_send_cb+0x4e>
		tx_data(buf)->tx = NULL;
   17538:	614a      	str	r2, [r1, #20]
   1753a:	e7f6      	b.n	1752a <bt_conn_send_cb+0x72>
   1753c:	00029f57 	.word	0x00029f57
   17540:	20001d18 	.word	0x20001d18
   17544:	200008bc 	.word	0x200008bc
   17548:	00029f6b 	.word	0x00029f6b
   1754c:	00029f8e 	.word	0x00029f8e

00017550 <bt_conn_prepare_events>:
{
   17550:	b570      	push	{r4, r5, r6, lr}
	conn_change.signaled = 0U;
   17552:	4b17      	ldr	r3, [pc, #92]	; (175b0 <bt_conn_prepare_events+0x60>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17554:	4c17      	ldr	r4, [pc, #92]	; (175b4 <bt_conn_prepare_events+0x64>)
   17556:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   17558:	2101      	movs	r1, #1
{
   1755a:	4605      	mov	r5, r0
	conn_change.signaled = 0U;
   1755c:	609a      	str	r2, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   1755e:	f00b fe67 	bl	23230 <k_poll_event_init>
   17562:	f3bf 8f5b 	dmb	ish
   17566:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   1756a:	f3bf 8f5b 	dmb	ish
		if (!conn_prepare_events(conn, &events[ev_count])) {
   1756e:	f105 0614 	add.w	r6, r5, #20
	if (!atomic_get(&conn->ref)) {
   17572:	b90b      	cbnz	r3, 17578 <bt_conn_prepare_events+0x28>
		conn_cleanup(conn);
   17574:	2001      	movs	r0, #1
}
   17576:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   17578:	7b63      	ldrb	r3, [r4, #13]
   1757a:	b953      	cbnz	r3, 17592 <bt_conn_prepare_events+0x42>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1757c:	f06f 0140 	mvn.w	r1, #64	; 0x40
   17580:	1d20      	adds	r0, r4, #4
   17582:	f00e f87b 	bl	2567c <atomic_and>
   17586:	0643      	lsls	r3, r0, #25
   17588:	d503      	bpl.n	17592 <bt_conn_prepare_events+0x42>
		conn_cleanup(conn);
   1758a:	4620      	mov	r0, r4
   1758c:	f7ff feea 	bl	17364 <conn_cleanup>
   17590:	e7f0      	b.n	17574 <bt_conn_prepare_events+0x24>
	if (conn->state != BT_CONN_CONNECTED) {
   17592:	7b63      	ldrb	r3, [r4, #13]
   17594:	2b07      	cmp	r3, #7
   17596:	d1ed      	bne.n	17574 <bt_conn_prepare_events+0x24>
	k_poll_event_init(&events[0],
   17598:	4b07      	ldr	r3, [pc, #28]	; (175b8 <bt_conn_prepare_events+0x68>)
   1759a:	4630      	mov	r0, r6
   1759c:	2200      	movs	r2, #0
   1759e:	2104      	movs	r1, #4
   175a0:	f00b fe46 	bl	23230 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   175a4:	2301      	movs	r3, #1
   175a6:	f885 3020 	strb.w	r3, [r5, #32]
			ev_count++;
   175aa:	2002      	movs	r0, #2
	return ev_count;
   175ac:	e7e3      	b.n	17576 <bt_conn_prepare_events+0x26>
   175ae:	bf00      	nop
   175b0:	200005b4 	.word	0x200005b4
   175b4:	20001758 	.word	0x20001758
   175b8:	20001790 	.word	0x20001790

000175bc <bt_conn_unref>:
{
   175bc:	b510      	push	{r4, lr}
	old = atomic_dec(&conn->ref);
   175be:	f100 03c0 	add.w	r3, r0, #192	; 0xc0
{
   175c2:	4604      	mov	r4, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   175c4:	f3bf 8f5b 	dmb	ish
   175c8:	e853 2f00 	ldrex	r2, [r3]
   175cc:	1e51      	subs	r1, r2, #1
   175ce:	e843 1000 	strex	r0, r1, [r3]
   175d2:	2800      	cmp	r0, #0
   175d4:	d1f8      	bne.n	175c8 <bt_conn_unref+0xc>
   175d6:	f3bf 8f5b 	dmb	ish
	__ASSERT(old > 0, "Conn reference counter is 0");
   175da:	2a00      	cmp	r2, #0
   175dc:	dc0a      	bgt.n	175f4 <bt_conn_unref+0x38>
   175de:	490d      	ldr	r1, [pc, #52]	; (17614 <bt_conn_unref+0x58>)
   175e0:	480d      	ldr	r0, [pc, #52]	; (17618 <bt_conn_unref+0x5c>)
   175e2:	f240 4251 	movw	r2, #1105	; 0x451
   175e6:	f00c fed2 	bl	2438e <assert_print>
   175ea:	480a      	ldr	r0, [pc, #40]	; (17614 <bt_conn_unref+0x58>)
   175ec:	f240 4151 	movw	r1, #1105	; 0x451
   175f0:	f00c fec6 	bl	24380 <assert_post_action>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   175f4:	78a3      	ldrb	r3, [r4, #2]
   175f6:	2b01      	cmp	r3, #1
   175f8:	d10a      	bne.n	17610 <bt_conn_unref+0x54>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   175fa:	f3bf 8f5b 	dmb	ish
   175fe:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   17602:	f3bf 8f5b 	dmb	ish
   17606:	b91b      	cbnz	r3, 17610 <bt_conn_unref+0x54>
}
   17608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_le_adv_resume();
   1760c:	f7ff bc30 	b.w	16e70 <bt_le_adv_resume>
}
   17610:	bd10      	pop	{r4, pc}
   17612:	bf00      	nop
   17614:	00029e73 	.word	0x00029e73
   17618:	000289af 	.word	0x000289af

0001761c <bt_conn_lookup_handle>:
{
   1761c:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   1761e:	2101      	movs	r1, #1
   17620:	4801      	ldr	r0, [pc, #4]	; (17628 <bt_conn_lookup_handle+0xc>)
   17622:	f00e b884 	b.w	2572e <conn_lookup_handle>
   17626:	bf00      	nop
   17628:	20001758 	.word	0x20001758

0001762c <bt_conn_set_state>:
{
   1762c:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
   1762e:	7b46      	ldrb	r6, [r0, #13]
   17630:	428e      	cmp	r6, r1
{
   17632:	4604      	mov	r4, r0
   17634:	460d      	mov	r5, r1
	if (conn->state == state) {
   17636:	d10b      	bne.n	17650 <bt_conn_set_state+0x24>
	switch (state) {
   17638:	2e08      	cmp	r6, #8
   1763a:	bf96      	itet	ls
   1763c:	4b60      	ldrls	r3, [pc, #384]	; (177c0 <bt_conn_set_state+0x194>)
	if (conn->state == state) {
   1763e:	4a61      	ldrhi	r2, [pc, #388]	; (177c4 <bt_conn_set_state+0x198>)
   17640:	f853 2026 	ldrls.w	r2, [r3, r6, lsl #2]
		BT_WARN("no transition %s", state2str(state));
   17644:	4860      	ldr	r0, [pc, #384]	; (177c8 <bt_conn_set_state+0x19c>)
   17646:	2157      	movs	r1, #87	; 0x57
}
   17648:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("no valid (%u) state was set", state);
   1764c:	f00c bead 	b.w	243aa <z_log_minimal_printk>
	conn->state = state;
   17650:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
   17652:	b926      	cbnz	r6, 1765e <bt_conn_set_state+0x32>
		if (conn->type != BT_CONN_TYPE_ISO) {
   17654:	7883      	ldrb	r3, [r0, #2]
   17656:	2b08      	cmp	r3, #8
   17658:	d001      	beq.n	1765e <bt_conn_set_state+0x32>
			bt_conn_ref(conn);
   1765a:	f00e f84d 	bl	256f8 <bt_conn_ref>
	switch (conn->state) {
   1765e:	7b63      	ldrb	r3, [r4, #13]
   17660:	2b08      	cmp	r3, #8
   17662:	f200 80a7 	bhi.w	177b4 <bt_conn_set_state+0x188>
   17666:	e8df f003 	tbb	[pc, r3]
   1766a:	0537      	.short	0x0537
   1766c:	a9a9a9a9 	.word	0xa9a9a9a9
   17670:	1ca9      	.short	0x1ca9
   17672:	a9          	.byte	0xa9
   17673:	00          	.byte	0x00
	z_impl_k_sem_give(sem);
   17674:	4d55      	ldr	r5, [pc, #340]	; (177cc <bt_conn_set_state+0x1a0>)
		tx->pending_no_cb = 0U;
   17676:	2600      	movs	r6, #0
	__asm__ volatile(
   17678:	f04f 0340 	mov.w	r3, #64	; 0x40
   1767c:	f3ef 8211 	mrs	r2, BASEPRI
   17680:	f383 8812 	msr	BASEPRI_MAX, r3
   17684:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   17688:	69e3      	ldr	r3, [r4, #28]
   1768a:	2b00      	cmp	r3, #0
   1768c:	d073      	beq.n	17776 <bt_conn_set_state+0x14a>
			conn->pending_no_cb--;
   1768e:	3b01      	subs	r3, #1
   17690:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   17692:	f382 8811 	msr	BASEPRI, r2
   17696:	f3bf 8f6f 	isb	sy
   1769a:	4628      	mov	r0, r5
   1769c:	f009 fb00 	bl	20ca0 <z_impl_k_sem_give>
}
   176a0:	e7ea      	b.n	17678 <bt_conn_set_state+0x4c>
		if (conn->type == BT_CONN_TYPE_SCO) {
   176a2:	78a3      	ldrb	r3, [r4, #2]
   176a4:	2b04      	cmp	r3, #4
   176a6:	f000 8089 	beq.w	177bc <bt_conn_set_state+0x190>
	z_impl_k_queue_init(queue);
   176aa:	f104 0038 	add.w	r0, r4, #56	; 0x38
   176ae:	f010 f812 	bl	276d6 <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(sig, result);
   176b2:	4847      	ldr	r0, [pc, #284]	; (177d0 <bt_conn_set_state+0x1a4>)
   176b4:	2100      	movs	r1, #0
   176b6:	f00b fec7 	bl	23448 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   176ba:	2300      	movs	r3, #0
	list->tail = NULL;
   176bc:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   176c0:	78e3      	ldrb	r3, [r4, #3]
   176c2:	2b01      	cmp	r3, #1
   176c4:	d17a      	bne.n	177bc <bt_conn_set_state+0x190>
			k_work_schedule(&conn->deferred_work,
   176c6:	f104 0060 	add.w	r0, r4, #96	; 0x60
   176ca:	f44f 3220 	mov.w	r2, #163840	; 0x28000
}
   176ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&conn->deferred_work,
   176d2:	2300      	movs	r3, #0
   176d4:	f009 bf30 	b.w	21538 <k_work_schedule>
		if (conn->type == BT_CONN_TYPE_SCO) {
   176d8:	78a3      	ldrb	r3, [r4, #2]
   176da:	2b04      	cmp	r3, #4
   176dc:	d104      	bne.n	176e8 <bt_conn_set_state+0xbc>
			bt_conn_unref(conn);
   176de:	4620      	mov	r0, r4
}
   176e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   176e4:	f7ff bf6a 	b.w	175bc <bt_conn_unref>
		switch (old_state) {
   176e8:	2e08      	cmp	r6, #8
   176ea:	d867      	bhi.n	177bc <bt_conn_set_state+0x190>
   176ec:	a301      	add	r3, pc, #4	; (adr r3, 176f4 <bt_conn_set_state+0xc8>)
   176ee:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   176f2:	bf00      	nop
   176f4:	0001776f 	.word	0x0001776f
   176f8:	00017719 	.word	0x00017719
   176fc:	00017761 	.word	0x00017761
   17700:	000176df 	.word	0x000176df
   17704:	000176df 	.word	0x000176df
   17708:	00017761 	.word	0x00017761
   1770c:	00017761 	.word	0x00017761
   17710:	0001776f 	.word	0x0001776f
   17714:	0001776f 	.word	0x0001776f
			tx_notify(conn);
   17718:	4620      	mov	r0, r4
   1771a:	f00d ffbe 	bl	2569a <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   1771e:	78a3      	ldrb	r3, [r4, #2]
   17720:	2b01      	cmp	r3, #1
   17722:	d10a      	bne.n	1773a <bt_conn_set_state+0x10e>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
   17724:	f104 0560 	add.w	r5, r4, #96	; 0x60
   17728:	4628      	mov	r0, r5
   1772a:	f010 f857 	bl	277dc <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   1772e:	f010 0f0c 	tst.w	r0, #12
   17732:	d002      	beq.n	1773a <bt_conn_set_state+0x10e>
				k_work_cancel_delayable(&conn->deferred_work);
   17734:	4628      	mov	r0, r5
   17736:	f009 ff6d 	bl	21614 <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1773a:	f3bf 8f5b 	dmb	ish
   1773e:	3404      	adds	r4, #4
   17740:	e854 3f00 	ldrex	r3, [r4]
   17744:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   17748:	e844 3200 	strex	r2, r3, [r4]
   1774c:	2a00      	cmp	r2, #0
   1774e:	d1f7      	bne.n	17740 <bt_conn_set_state+0x114>
   17750:	f3bf 8f5b 	dmb	ish
   17754:	481e      	ldr	r0, [pc, #120]	; (177d0 <bt_conn_set_state+0x1a4>)
}
   17756:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1775a:	2100      	movs	r1, #0
   1775c:	f00b be74 	b.w	23448 <z_impl_k_poll_signal_raise>
			if (conn->err) {
   17760:	7b23      	ldrb	r3, [r4, #12]
   17762:	2b00      	cmp	r3, #0
   17764:	d0bb      	beq.n	176de <bt_conn_set_state+0xb2>
				notify_connected(conn);
   17766:	4620      	mov	r0, r4
   17768:	f7ff fd04 	bl	17174 <notify_connected>
   1776c:	e7b7      	b.n	176de <bt_conn_set_state+0xb2>
			BT_WARN("Invalid (%u) old state", state);
   1776e:	4819      	ldr	r0, [pc, #100]	; (177d4 <bt_conn_set_state+0x1a8>)
   17770:	462a      	mov	r2, r5
   17772:	2157      	movs	r1, #87	; 0x57
   17774:	e768      	b.n	17648 <bt_conn_set_state+0x1c>
	return list->head;
   17776:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   17778:	b128      	cbz	r0, 17786 <bt_conn_set_state+0x15a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1777a:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   1777c:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   1777e:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   17780:	4288      	cmp	r0, r1
	list->tail = node;
   17782:	bf08      	it	eq
   17784:	61a3      	streq	r3, [r4, #24]
   17786:	f382 8811 	msr	BASEPRI, r2
   1778a:	f3bf 8f6f 	isb	sy
		if (!node) {
   1778e:	b1a8      	cbz	r0, 177bc <bt_conn_set_state+0x190>
	__asm__ volatile(
   17790:	f04f 0240 	mov.w	r2, #64	; 0x40
   17794:	f3ef 8311 	mrs	r3, BASEPRI
   17798:	f382 8812 	msr	BASEPRI_MAX, r2
   1779c:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   177a0:	68c2      	ldr	r2, [r0, #12]
   177a2:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   177a4:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
   177a6:	f383 8811 	msr	BASEPRI, r3
   177aa:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   177ae:	f7ff fcd7 	bl	17160 <tx_free>
   177b2:	e772      	b.n	1769a <bt_conn_set_state+0x6e>
		BT_WARN("no valid (%u) state was set", state);
   177b4:	4808      	ldr	r0, [pc, #32]	; (177d8 <bt_conn_set_state+0x1ac>)
   177b6:	462a      	mov	r2, r5
   177b8:	2157      	movs	r1, #87	; 0x57
   177ba:	e745      	b.n	17648 <bt_conn_set_state+0x1c>
}
   177bc:	bd70      	pop	{r4, r5, r6, pc}
   177be:	bf00      	nop
   177c0:	00028210 	.word	0x00028210
   177c4:	00029fb9 	.word	0x00029fb9
   177c8:	00029fc3 	.word	0x00029fc3
   177cc:	200003d0 	.word	0x200003d0
   177d0:	200005b4 	.word	0x200005b4
   177d4:	00029fd9 	.word	0x00029fd9
   177d8:	00029ff5 	.word	0x00029ff5

000177dc <bt_conn_index>:
		index = conn - acl_conns;
   177dc:	4b0a      	ldr	r3, [pc, #40]	; (17808 <bt_conn_index+0x2c>)
   177de:	4a0b      	ldr	r2, [pc, #44]	; (1780c <bt_conn_index+0x30>)
{
   177e0:	b510      	push	{r4, lr}
		index = conn - acl_conns;
   177e2:	1ac4      	subs	r4, r0, r3
   177e4:	10e4      	asrs	r4, r4, #3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   177e6:	4298      	cmp	r0, r3
		index = conn - acl_conns;
   177e8:	fb02 f404 	mul.w	r4, r2, r4
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   177ec:	d00a      	beq.n	17804 <bt_conn_index+0x28>
   177ee:	4908      	ldr	r1, [pc, #32]	; (17810 <bt_conn_index+0x34>)
   177f0:	4808      	ldr	r0, [pc, #32]	; (17814 <bt_conn_index+0x38>)
   177f2:	f240 426f 	movw	r2, #1135	; 0x46f
   177f6:	f00c fdca 	bl	2438e <assert_print>
   177fa:	4805      	ldr	r0, [pc, #20]	; (17810 <bt_conn_index+0x34>)
   177fc:	f240 416f 	movw	r1, #1135	; 0x46f
   17800:	f00c fdbe 	bl	24380 <assert_post_action>
}
   17804:	b2e0      	uxtb	r0, r4
   17806:	bd10      	pop	{r4, pc}
   17808:	20001758 	.word	0x20001758
   1780c:	c28f5c29 	.word	0xc28f5c29
   17810:	00029e73 	.word	0x00029e73
   17814:	000289af 	.word	0x000289af

00017818 <bt_conn_create_pdu_timeout>:
{
   17818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1781a:	4604      	mov	r4, r0
   1781c:	460d      	mov	r5, r1
   1781e:	4617      	mov	r7, r2
   17820:	461e      	mov	r6, r3
	__ASSERT_NO_MSG(!k_is_in_isr());
   17822:	f00f ff29 	bl	27678 <k_is_in_isr>
   17826:	b150      	cbz	r0, 1783e <bt_conn_create_pdu_timeout+0x26>
   17828:	490f      	ldr	r1, [pc, #60]	; (17868 <bt_conn_create_pdu_timeout+0x50>)
   1782a:	4810      	ldr	r0, [pc, #64]	; (1786c <bt_conn_create_pdu_timeout+0x54>)
   1782c:	f240 428b 	movw	r2, #1163	; 0x48b
   17830:	f00c fdad 	bl	2438e <assert_print>
   17834:	480c      	ldr	r0, [pc, #48]	; (17868 <bt_conn_create_pdu_timeout+0x50>)
   17836:	f240 418b 	movw	r1, #1163	; 0x48b
   1783a:	f00c fda1 	bl	24380 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   1783e:	480c      	ldr	r0, [pc, #48]	; (17870 <bt_conn_create_pdu_timeout+0x58>)
   17840:	463a      	mov	r2, r7
   17842:	2c00      	cmp	r4, #0
   17844:	bf18      	it	ne
   17846:	4620      	movne	r0, r4
   17848:	4633      	mov	r3, r6
   1784a:	f00f fb16 	bl	26e7a <net_buf_alloc_fixed>
	if (!buf) {
   1784e:	4604      	mov	r4, r0
   17850:	b928      	cbnz	r0, 1785e <bt_conn_create_pdu_timeout+0x46>
		BT_WARN("Unable to allocate buffer within timeout");
   17852:	4808      	ldr	r0, [pc, #32]	; (17874 <bt_conn_create_pdu_timeout+0x5c>)
   17854:	2157      	movs	r1, #87	; 0x57
   17856:	f00c fda8 	bl	243aa <z_log_minimal_printk>
}
   1785a:	4620      	mov	r0, r4
   1785c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_simple_reserve(&buf->b, reserve);
   1785e:	1d29      	adds	r1, r5, #4
   17860:	3008      	adds	r0, #8
   17862:	f004 fcdf 	bl	1c224 <net_buf_simple_reserve>
	return buf;
   17866:	e7f8      	b.n	1785a <bt_conn_create_pdu_timeout+0x42>
   17868:	00029e73 	.word	0x00029e73
   1786c:	000289af 	.word	0x000289af
   17870:	200008d8 	.word	0x200008d8
   17874:	0002a016 	.word	0x0002a016

00017878 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   17878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1787c:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1787e:	f3bf 8f5b 	dmb	ish
   17882:	6863      	ldr	r3, [r4, #4]
   17884:	f3bf 8f5b 	dmb	ish
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   17888:	05db      	lsls	r3, r3, #23
   1788a:	f100 0004 	add.w	r0, r0, #4
   1788e:	d511      	bpl.n	178b4 <notify_le_param_updated+0x3c>
	    conn->le.interval >= conn->le.interval_min &&
   17890:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   17894:	f8b4 20a8 	ldrh.w	r2, [r4, #168]	; 0xa8
   17898:	429a      	cmp	r2, r3
   1789a:	d80b      	bhi.n	178b4 <notify_le_param_updated+0x3c>
	    conn->le.interval >= conn->le.interval_min &&
   1789c:	f8b4 20aa 	ldrh.w	r2, [r4, #170]	; 0xaa
   178a0:	429a      	cmp	r2, r3
   178a2:	d307      	bcc.n	178b4 <notify_le_param_updated+0x3c>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   178a4:	e9d4 232b 	ldrd	r2, r3, [r4, #172]	; 0xac
   178a8:	429a      	cmp	r2, r3
   178aa:	d103      	bne.n	178b4 <notify_le_param_updated+0x3c>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   178ac:	f46f 7180 	mvn.w	r1, #256	; 0x100
   178b0:	f00d fee4 	bl	2567c <atomic_and>
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   178b4:	4b18      	ldr	r3, [pc, #96]	; (17918 <notify_le_param_updated+0xa0>)
   178b6:	681d      	ldr	r5, [r3, #0]
   178b8:	b99d      	cbnz	r5, 178e2 <notify_le_param_updated+0x6a>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   178ba:	4d18      	ldr	r5, [pc, #96]	; (1791c <notify_le_param_updated+0xa4>)
   178bc:	4e18      	ldr	r6, [pc, #96]	; (17920 <notify_le_param_updated+0xa8>)
   178be:	4f19      	ldr	r7, [pc, #100]	; (17924 <notify_le_param_updated+0xac>)
   178c0:	42b5      	cmp	r5, r6
   178c2:	d90a      	bls.n	178da <notify_le_param_updated+0x62>
   178c4:	4818      	ldr	r0, [pc, #96]	; (17928 <notify_le_param_updated+0xb0>)
   178c6:	4639      	mov	r1, r7
   178c8:	f240 525e 	movw	r2, #1374	; 0x55e
   178cc:	f00c fd5f 	bl	2438e <assert_print>
   178d0:	f240 515e 	movw	r1, #1374	; 0x55e
   178d4:	4638      	mov	r0, r7
   178d6:	f00c fd53 	bl	24380 <assert_post_action>
   178da:	42b5      	cmp	r5, r6
   178dc:	d30d      	bcc.n	178fa <notify_le_param_updated+0x82>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   178de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cb->le_param_updated) {
   178e2:	68ee      	ldr	r6, [r5, #12]
   178e4:	b13e      	cbz	r6, 178f6 <notify_le_param_updated+0x7e>
			cb->le_param_updated(conn, conn->le.interval,
   178e6:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   178ea:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   178ee:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   178f2:	4620      	mov	r0, r4
   178f4:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   178f6:	69ad      	ldr	r5, [r5, #24]
   178f8:	e7de      	b.n	178b8 <notify_le_param_updated+0x40>
		if (cb->le_param_updated) {
   178fa:	f8d5 800c 	ldr.w	r8, [r5, #12]
   178fe:	f1b8 0f00 	cmp.w	r8, #0
   17902:	d007      	beq.n	17914 <notify_le_param_updated+0x9c>
			cb->le_param_updated(conn, conn->le.interval,
   17904:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   17908:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   1790c:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   17910:	4620      	mov	r0, r4
   17912:	47c0      	blx	r8
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17914:	351c      	adds	r5, #28
   17916:	e7d3      	b.n	178c0 <notify_le_param_updated+0x48>
   17918:	20001ea8 	.word	0x20001ea8
   1791c:	00027d90 	.word	0x00027d90
   17920:	00027dac 	.word	0x00027dac
   17924:	00029e73 	.word	0x00029e73
   17928:	000289af 	.word	0x000289af

0001792c <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   1792c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   17930:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   17932:	4608      	mov	r0, r1
{
   17934:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   17936:	f00d fca3 	bl	25280 <bt_le_conn_params_valid>
   1793a:	4605      	mov	r5, r0
   1793c:	b918      	cbnz	r0, 17946 <le_param_req+0x1a>
		return false;
   1793e:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   17940:	4628      	mov	r0, r5
   17942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   17946:	4b1a      	ldr	r3, [pc, #104]	; (179b0 <le_param_req+0x84>)
   17948:	681e      	ldr	r6, [r3, #0]
   1794a:	b9be      	cbnz	r6, 1797c <le_param_req+0x50>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1794c:	4e19      	ldr	r6, [pc, #100]	; (179b4 <le_param_req+0x88>)
   1794e:	f8df 8068 	ldr.w	r8, [pc, #104]	; 179b8 <le_param_req+0x8c>
   17952:	f8df 9068 	ldr.w	r9, [pc, #104]	; 179bc <le_param_req+0x90>
   17956:	4546      	cmp	r6, r8
   17958:	d90a      	bls.n	17970 <le_param_req+0x44>
   1795a:	4819      	ldr	r0, [pc, #100]	; (179c0 <le_param_req+0x94>)
   1795c:	4649      	mov	r1, r9
   1795e:	f240 52a6 	movw	r2, #1446	; 0x5a6
   17962:	f00c fd14 	bl	2438e <assert_print>
   17966:	f240 51a6 	movw	r1, #1446	; 0x5a6
   1796a:	4648      	mov	r0, r9
   1796c:	f00c fd08 	bl	24380 <assert_post_action>
   17970:	4546      	cmp	r6, r8
   17972:	d2e5      	bcs.n	17940 <le_param_req+0x14>
		if (!cb->le_param_req) {
   17974:	68b3      	ldr	r3, [r6, #8]
   17976:	b983      	cbnz	r3, 1799a <le_param_req+0x6e>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17978:	361c      	adds	r6, #28
   1797a:	e7ec      	b.n	17956 <le_param_req+0x2a>
		if (!cb->le_param_req) {
   1797c:	68b3      	ldr	r3, [r6, #8]
   1797e:	b90b      	cbnz	r3, 17984 <le_param_req+0x58>
	for (cb = callback_list; cb; cb = cb->_next) {
   17980:	69b6      	ldr	r6, [r6, #24]
   17982:	e7e2      	b.n	1794a <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   17984:	4621      	mov	r1, r4
   17986:	4638      	mov	r0, r7
   17988:	4798      	blx	r3
   1798a:	2800      	cmp	r0, #0
   1798c:	d0d7      	beq.n	1793e <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   1798e:	4620      	mov	r0, r4
   17990:	f00d fc76 	bl	25280 <bt_le_conn_params_valid>
   17994:	2800      	cmp	r0, #0
   17996:	d1f3      	bne.n	17980 <le_param_req+0x54>
   17998:	e7d1      	b.n	1793e <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   1799a:	4621      	mov	r1, r4
   1799c:	4638      	mov	r0, r7
   1799e:	4798      	blx	r3
   179a0:	2800      	cmp	r0, #0
   179a2:	d0cc      	beq.n	1793e <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   179a4:	4620      	mov	r0, r4
   179a6:	f00d fc6b 	bl	25280 <bt_le_conn_params_valid>
   179aa:	2800      	cmp	r0, #0
   179ac:	d1e4      	bne.n	17978 <le_param_req+0x4c>
   179ae:	e7c6      	b.n	1793e <le_param_req+0x12>
   179b0:	20001ea8 	.word	0x20001ea8
   179b4:	00027d90 	.word	0x00027d90
   179b8:	00027dac 	.word	0x00027dac
   179bc:	00029e73 	.word	0x00029e73
   179c0:	000289af 	.word	0x000289af

000179c4 <bt_conn_identity_resolved>:

#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_SMP)
void bt_conn_identity_resolved(struct bt_conn *conn)
{
   179c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   179c8:	78c3      	ldrb	r3, [r0, #3]
{
   179ca:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   179cc:	b9db      	cbnz	r3, 17a06 <bt_conn_identity_resolved+0x42>
		rpa = &conn->le.resp_addr;
   179ce:	f100 069e 	add.w	r6, r0, #158	; 0x9e
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   179d2:	4b17      	ldr	r3, [pc, #92]	; (17a30 <bt_conn_identity_resolved+0x6c>)
   179d4:	681d      	ldr	r5, [r3, #0]
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   179d6:	f104 0790 	add.w	r7, r4, #144	; 0x90
	for (cb = callback_list; cb; cb = cb->_next) {
   179da:	b9bd      	cbnz	r5, 17a0c <bt_conn_identity_resolved+0x48>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   179dc:	4d15      	ldr	r5, [pc, #84]	; (17a34 <bt_conn_identity_resolved+0x70>)
   179de:	4f16      	ldr	r7, [pc, #88]	; (17a38 <bt_conn_identity_resolved+0x74>)
   179e0:	f8df 8058 	ldr.w	r8, [pc, #88]	; 17a3c <bt_conn_identity_resolved+0x78>
   179e4:	42bd      	cmp	r5, r7
   179e6:	d90a      	bls.n	179fe <bt_conn_identity_resolved+0x3a>
   179e8:	4815      	ldr	r0, [pc, #84]	; (17a40 <bt_conn_identity_resolved+0x7c>)
   179ea:	4641      	mov	r1, r8
   179ec:	f240 7263 	movw	r2, #1891	; 0x763
   179f0:	f00c fccd 	bl	2438e <assert_print>
   179f4:	f240 7163 	movw	r1, #1891	; 0x763
   179f8:	4640      	mov	r0, r8
   179fa:	f00c fcc1 	bl	24380 <assert_post_action>
   179fe:	42bd      	cmp	r5, r7
   17a00:	d30c      	bcc.n	17a1c <bt_conn_identity_resolved+0x58>
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
		}
	}
}
   17a02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rpa = &conn->le.init_addr;
   17a06:	f100 0697 	add.w	r6, r0, #151	; 0x97
   17a0a:	e7e2      	b.n	179d2 <bt_conn_identity_resolved+0xe>
		if (cb->identity_resolved) {
   17a0c:	692b      	ldr	r3, [r5, #16]
   17a0e:	b11b      	cbz	r3, 17a18 <bt_conn_identity_resolved+0x54>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   17a10:	463a      	mov	r2, r7
   17a12:	4631      	mov	r1, r6
   17a14:	4620      	mov	r0, r4
   17a16:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   17a18:	69ad      	ldr	r5, [r5, #24]
   17a1a:	e7de      	b.n	179da <bt_conn_identity_resolved+0x16>
		if (cb->identity_resolved) {
   17a1c:	692b      	ldr	r3, [r5, #16]
   17a1e:	b123      	cbz	r3, 17a2a <bt_conn_identity_resolved+0x66>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   17a20:	f104 0290 	add.w	r2, r4, #144	; 0x90
   17a24:	4631      	mov	r1, r6
   17a26:	4620      	mov	r0, r4
   17a28:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17a2a:	351c      	adds	r5, #28
   17a2c:	e7da      	b.n	179e4 <bt_conn_identity_resolved+0x20>
   17a2e:	bf00      	nop
   17a30:	20001ea8 	.word	0x20001ea8
   17a34:	00027d90 	.word	0x00027d90
   17a38:	00027dac 	.word	0x00027dac
   17a3c:	00029e73 	.word	0x00029e73
   17a40:	000289af 	.word	0x000289af

00017a44 <bt_conn_security_changed>:
	conn->required_sec_level = conn->sec_level;
}

void bt_conn_security_changed(struct bt_conn *conn, uint8_t hci_err,
			      enum bt_security_err err)
{
   17a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	conn->required_sec_level = conn->sec_level;
   17a48:	7a43      	ldrb	r3, [r0, #9]
   17a4a:	7283      	strb	r3, [r0, #10]
{
   17a4c:	4604      	mov	r4, r0
   17a4e:	4616      	mov	r6, r2
	struct bt_conn_cb *cb;

	reset_pairing(conn);
	bt_l2cap_security_changed(conn, hci_err);
   17a50:	f00d ff60 	bl	25914 <bt_l2cap_security_changed>

	for (cb = callback_list; cb; cb = cb->_next) {
   17a54:	4b13      	ldr	r3, [pc, #76]	; (17aa4 <bt_conn_security_changed+0x60>)
   17a56:	681d      	ldr	r5, [r3, #0]
   17a58:	b9a5      	cbnz	r5, 17a84 <bt_conn_security_changed+0x40>
		if (cb->security_changed) {
			cb->security_changed(conn, conn->sec_level, err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17a5a:	4d13      	ldr	r5, [pc, #76]	; (17aa8 <bt_conn_security_changed+0x64>)
   17a5c:	4f13      	ldr	r7, [pc, #76]	; (17aac <bt_conn_security_changed+0x68>)
   17a5e:	f8df 8050 	ldr.w	r8, [pc, #80]	; 17ab0 <bt_conn_security_changed+0x6c>
   17a62:	42bd      	cmp	r5, r7
   17a64:	d90a      	bls.n	17a7c <bt_conn_security_changed+0x38>
   17a66:	4813      	ldr	r0, [pc, #76]	; (17ab4 <bt_conn_security_changed+0x70>)
   17a68:	4641      	mov	r1, r8
   17a6a:	f240 72cc 	movw	r2, #1996	; 0x7cc
   17a6e:	f00c fc8e 	bl	2438e <assert_print>
   17a72:	f240 71cc 	movw	r1, #1996	; 0x7cc
   17a76:	4640      	mov	r0, r8
   17a78:	f00c fc82 	bl	24380 <assert_post_action>
   17a7c:	42bd      	cmp	r5, r7
   17a7e:	d309      	bcc.n	17a94 <bt_conn_security_changed+0x50>
		}
#endif /* CONFIG_BT_BREDR */

	}
#endif
}
   17a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cb->security_changed) {
   17a84:	696b      	ldr	r3, [r5, #20]
   17a86:	b11b      	cbz	r3, 17a90 <bt_conn_security_changed+0x4c>
			cb->security_changed(conn, conn->sec_level, err);
   17a88:	7a61      	ldrb	r1, [r4, #9]
   17a8a:	4632      	mov	r2, r6
   17a8c:	4620      	mov	r0, r4
   17a8e:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   17a90:	69ad      	ldr	r5, [r5, #24]
   17a92:	e7e1      	b.n	17a58 <bt_conn_security_changed+0x14>
		if (cb->security_changed) {
   17a94:	696b      	ldr	r3, [r5, #20]
   17a96:	b11b      	cbz	r3, 17aa0 <bt_conn_security_changed+0x5c>
			cb->security_changed(conn, conn->sec_level, err);
   17a98:	7a61      	ldrb	r1, [r4, #9]
   17a9a:	4632      	mov	r2, r6
   17a9c:	4620      	mov	r0, r4
   17a9e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17aa0:	351c      	adds	r5, #28
   17aa2:	e7de      	b.n	17a62 <bt_conn_security_changed+0x1e>
   17aa4:	20001ea8 	.word	0x20001ea8
   17aa8:	00027d90 	.word	0x00027d90
   17aac:	00027dac 	.word	0x00027dac
   17ab0:	00029e73 	.word	0x00029e73
   17ab4:	000289af 	.word	0x000289af

00017ab8 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   17ab8:	b538      	push	{r3, r4, r5, lr}
   17aba:	4605      	mov	r5, r0
   17abc:	460c      	mov	r4, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   17abe:	480b      	ldr	r0, [pc, #44]	; (17aec <bt_conn_add_le+0x34>)
   17ac0:	2101      	movs	r1, #1
   17ac2:	f7ff fc1b 	bl	172fc <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   17ac6:	b180      	cbz	r0, 17aea <bt_conn_add_le+0x32>
		return NULL;
	}

	conn->id = id;
   17ac8:	7205      	strb	r5, [r0, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   17aca:	6823      	ldr	r3, [r4, #0]
   17acc:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
   17ad0:	88a3      	ldrh	r3, [r4, #4]
   17ad2:	f8a0 3094 	strh.w	r3, [r0, #148]	; 0x94
   17ad6:	79a3      	ldrb	r3, [r4, #6]
   17ad8:	f880 3096 	strb.w	r3, [r0, #150]	; 0x96
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
   17adc:	2301      	movs	r3, #1
   17ade:	7243      	strb	r3, [r0, #9]
	conn->required_sec_level = BT_SECURITY_L1;
   17ae0:	7283      	strb	r3, [r0, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   17ae2:	7083      	strb	r3, [r0, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   17ae4:	4b02      	ldr	r3, [pc, #8]	; (17af0 <bt_conn_add_le+0x38>)
   17ae6:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   17aea:	bd38      	pop	{r3, r4, r5, pc}
   17aec:	20001758 	.word	0x20001758
   17af0:	00280018 	.word	0x00280018

00017af4 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   17af4:	b570      	push	{r4, r5, r6, lr}
   17af6:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   17af8:	480c      	ldr	r0, [pc, #48]	; (17b2c <bt_conn_lookup_addr_le+0x38>)
{
   17afa:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   17afc:	f00d fdfc 	bl	256f8 <bt_conn_ref>

		if (!conn) {
   17b00:	4604      	mov	r4, r0
   17b02:	b128      	cbz	r0, 17b10 <bt_conn_lookup_addr_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   17b04:	7883      	ldrb	r3, [r0, #2]
   17b06:	2b01      	cmp	r3, #1
   17b08:	d004      	beq.n	17b14 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
   17b0a:	f7ff fd57 	bl	175bc <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   17b0e:	2400      	movs	r4, #0
}
   17b10:	4620      	mov	r0, r4
   17b12:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   17b14:	4629      	mov	r1, r5
   17b16:	4632      	mov	r2, r6
   17b18:	f00d fe8a 	bl	25830 <bt_conn_is_peer_addr_le>
   17b1c:	4605      	mov	r5, r0
   17b1e:	2800      	cmp	r0, #0
   17b20:	d1f6      	bne.n	17b10 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   17b22:	4620      	mov	r0, r4
   17b24:	f7ff fd4a 	bl	175bc <bt_conn_unref>
	return NULL;
   17b28:	462c      	mov	r4, r5
			continue;
   17b2a:	e7f1      	b.n	17b10 <bt_conn_lookup_addr_le+0x1c>
   17b2c:	20001758 	.word	0x20001758

00017b30 <bt_conn_exists_le>:
{
   17b30:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   17b32:	f7ff ffdf 	bl	17af4 <bt_conn_lookup_addr_le>
	if (conn) {
   17b36:	4604      	mov	r4, r0
   17b38:	b170      	cbz	r0, 17b58 <bt_conn_exists_le+0x28>
		BT_WARN("Found valid connection in %s state",
   17b3a:	7b43      	ldrb	r3, [r0, #13]
   17b3c:	4807      	ldr	r0, [pc, #28]	; (17b5c <bt_conn_exists_le+0x2c>)
   17b3e:	2b08      	cmp	r3, #8
   17b40:	bf96      	itet	ls
   17b42:	4a07      	ldrls	r2, [pc, #28]	; (17b60 <bt_conn_exists_le+0x30>)
   17b44:	4a07      	ldrhi	r2, [pc, #28]	; (17b64 <bt_conn_exists_le+0x34>)
   17b46:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
   17b4a:	2157      	movs	r1, #87	; 0x57
   17b4c:	f00c fc2d 	bl	243aa <z_log_minimal_printk>
		bt_conn_unref(conn);
   17b50:	4620      	mov	r0, r4
   17b52:	f7ff fd33 	bl	175bc <bt_conn_unref>
		return true;
   17b56:	2001      	movs	r0, #1
}
   17b58:	bd10      	pop	{r4, pc}
   17b5a:	bf00      	nop
   17b5c:	0002a044 	.word	0x0002a044
   17b60:	00028210 	.word	0x00028210
   17b64:	00029fb9 	.word	0x00029fb9

00017b68 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   17b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17b6a:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   17b6c:	480e      	ldr	r0, [pc, #56]	; (17ba8 <bt_conn_lookup_state_le+0x40>)
{
   17b6e:	460e      	mov	r6, r1
   17b70:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   17b72:	f00d fdc1 	bl	256f8 <bt_conn_ref>

		if (!conn) {
   17b76:	4604      	mov	r4, r0
   17b78:	b1a0      	cbz	r0, 17ba4 <bt_conn_lookup_state_le+0x3c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   17b7a:	7883      	ldrb	r3, [r0, #2]
   17b7c:	2b01      	cmp	r3, #1
   17b7e:	d003      	beq.n	17b88 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   17b80:	f7ff fd1c 	bl	175bc <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   17b84:	2400      	movs	r4, #0
			continue;
   17b86:	e00d      	b.n	17ba4 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   17b88:	b136      	cbz	r6, 17b98 <bt_conn_lookup_state_le+0x30>
   17b8a:	4632      	mov	r2, r6
   17b8c:	4629      	mov	r1, r5
   17b8e:	f00d fe4f 	bl	25830 <bt_conn_is_peer_addr_le>
   17b92:	b908      	cbnz	r0, 17b98 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   17b94:	4620      	mov	r0, r4
   17b96:	e7f3      	b.n	17b80 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   17b98:	7b63      	ldrb	r3, [r4, #13]
   17b9a:	42bb      	cmp	r3, r7
   17b9c:	d1fa      	bne.n	17b94 <bt_conn_lookup_state_le+0x2c>
   17b9e:	7a23      	ldrb	r3, [r4, #8]
   17ba0:	42ab      	cmp	r3, r5
   17ba2:	d1f7      	bne.n	17b94 <bt_conn_lookup_state_le+0x2c>
}
   17ba4:	4620      	mov	r0, r4
   17ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17ba8:	20001758 	.word	0x20001758

00017bac <send_conn_le_param_update>:
{
   17bac:	b538      	push	{r3, r4, r5, lr}
   17bae:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   17bb0:	4608      	mov	r0, r1
{
   17bb2:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   17bb4:	f00d fb64 	bl	25280 <bt_le_conn_params_valid>
   17bb8:	b348      	cbz	r0, 17c0e <send_conn_le_param_update+0x62>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   17bba:	4b16      	ldr	r3, [pc, #88]	; (17c14 <send_conn_le_param_update+0x68>)
   17bbc:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   17bc0:	0799      	lsls	r1, r3, #30
   17bc2:	d407      	bmi.n	17bd4 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   17bc4:	78e3      	ldrb	r3, [r4, #3]
   17bc6:	b183      	cbz	r3, 17bea <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
   17bc8:	4629      	mov	r1, r5
   17bca:	4620      	mov	r0, r4
}
   17bcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   17bd0:	f000 ba98 	b.w	18104 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   17bd4:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
   17bd8:	079a      	lsls	r2, r3, #30
   17bda:	d5f3      	bpl.n	17bc4 <send_conn_le_param_update+0x18>
   17bdc:	f3bf 8f5b 	dmb	ish
   17be0:	6863      	ldr	r3, [r4, #4]
   17be2:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   17be6:	059b      	lsls	r3, r3, #22
   17be8:	d4ec      	bmi.n	17bc4 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   17bea:	4629      	mov	r1, r5
   17bec:	4620      	mov	r0, r4
   17bee:	f00d fe41 	bl	25874 <bt_conn_le_conn_update>
		if (rc == 0) {
   17bf2:	b958      	cbnz	r0, 17c0c <send_conn_le_param_update+0x60>
			conn->le.interval_min = param->interval_min;
   17bf4:	882b      	ldrh	r3, [r5, #0]
   17bf6:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.interval_max = param->interval_max;
   17bfa:	886b      	ldrh	r3, [r5, #2]
   17bfc:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
			conn->le.pending_latency = param->latency;
   17c00:	88ab      	ldrh	r3, [r5, #4]
   17c02:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
			conn->le.pending_timeout = param->timeout;
   17c06:	88eb      	ldrh	r3, [r5, #6]
   17c08:	f8a4 30b2 	strh.w	r3, [r4, #178]	; 0xb2
}
   17c0c:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   17c0e:	f06f 0015 	mvn.w	r0, #21
   17c12:	e7fb      	b.n	17c0c <send_conn_le_param_update+0x60>
   17c14:	200002d0 	.word	0x200002d0

00017c18 <deferred_work>:
{
   17c18:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   17c1c:	f810 3c53 	ldrb.w	r3, [r0, #-83]
{
   17c20:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   17c22:	f1a0 0560 	sub.w	r5, r0, #96	; 0x60
	if (conn->state == BT_CONN_DISCONNECTED) {
   17c26:	bb73      	cbnz	r3, 17c86 <deferred_work+0x6e>
		bt_l2cap_disconnected(conn);
   17c28:	4628      	mov	r0, r5
   17c2a:	f00d fe62 	bl	258f2 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   17c2e:	4b31      	ldr	r3, [pc, #196]	; (17cf4 <deferred_work+0xdc>)
   17c30:	681e      	ldr	r6, [r3, #0]
   17c32:	b9c6      	cbnz	r6, 17c66 <deferred_work+0x4e>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17c34:	4e30      	ldr	r6, [pc, #192]	; (17cf8 <deferred_work+0xe0>)
   17c36:	4f31      	ldr	r7, [pc, #196]	; (17cfc <deferred_work+0xe4>)
   17c38:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 17d00 <deferred_work+0xe8>
   17c3c:	42be      	cmp	r6, r7
   17c3e:	d90a      	bls.n	17c56 <deferred_work+0x3e>
   17c40:	4830      	ldr	r0, [pc, #192]	; (17d04 <deferred_work+0xec>)
   17c42:	4641      	mov	r1, r8
   17c44:	f240 5225 	movw	r2, #1317	; 0x525
   17c48:	f00c fba1 	bl	2438e <assert_print>
   17c4c:	f240 5125 	movw	r1, #1317	; 0x525
   17c50:	4640      	mov	r0, r8
   17c52:	f00c fb95 	bl	24380 <assert_post_action>
   17c56:	42be      	cmp	r6, r7
   17c58:	d30d      	bcc.n	17c76 <deferred_work+0x5e>
		bt_conn_unref(conn);
   17c5a:	4628      	mov	r0, r5
}
   17c5c:	b002      	add	sp, #8
   17c5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
   17c62:	f7ff bcab 	b.w	175bc <bt_conn_unref>
		if (cb->disconnected) {
   17c66:	6873      	ldr	r3, [r6, #4]
   17c68:	b11b      	cbz	r3, 17c72 <deferred_work+0x5a>
			cb->disconnected(conn, conn->err);
   17c6a:	f814 1c54 	ldrb.w	r1, [r4, #-84]
   17c6e:	4628      	mov	r0, r5
   17c70:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   17c72:	69b6      	ldr	r6, [r6, #24]
   17c74:	e7dd      	b.n	17c32 <deferred_work+0x1a>
		if (cb->disconnected) {
   17c76:	6873      	ldr	r3, [r6, #4]
   17c78:	b11b      	cbz	r3, 17c82 <deferred_work+0x6a>
			cb->disconnected(conn, conn->err);
   17c7a:	f814 1c54 	ldrb.w	r1, [r4, #-84]
   17c7e:	4628      	mov	r0, r5
   17c80:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17c82:	361c      	adds	r6, #28
   17c84:	e7da      	b.n	17c3c <deferred_work+0x24>
	if (conn->type != BT_CONN_TYPE_LE) {
   17c86:	f810 3c5e 	ldrb.w	r3, [r0, #-94]
   17c8a:	2b01      	cmp	r3, #1
   17c8c:	d128      	bne.n	17ce0 <deferred_work+0xc8>
	if (atomic_test_and_clear_bit(conn->flags,
   17c8e:	f1a0 065c 	sub.w	r6, r0, #92	; 0x5c
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17c92:	f46f 7180 	mvn.w	r1, #256	; 0x100
   17c96:	4630      	mov	r0, r6
   17c98:	f00d fcf0 	bl	2567c <atomic_and>
   17c9c:	05c3      	lsls	r3, r0, #23
   17c9e:	d522      	bpl.n	17ce6 <deferred_work+0xce>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   17ca0:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   17ca4:	f8ad 3000 	strh.w	r3, [sp]
   17ca8:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
   17cac:	f8ad 3002 	strh.w	r3, [sp, #2]
   17cb0:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
   17cb4:	f8ad 3004 	strh.w	r3, [sp, #4]
   17cb8:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
   17cbc:	f8ad 3006 	strh.w	r3, [sp, #6]
		send_conn_le_param_update(conn, param);
   17cc0:	4669      	mov	r1, sp
   17cc2:	4628      	mov	r0, r5
   17cc4:	f7ff ff72 	bl	17bac <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17cc8:	f3bf 8f5b 	dmb	ish
   17ccc:	e856 3f00 	ldrex	r3, [r6]
   17cd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   17cd4:	e846 3200 	strex	r2, r3, [r6]
   17cd8:	2a00      	cmp	r2, #0
   17cda:	d1f7      	bne.n	17ccc <deferred_work+0xb4>
   17cdc:	f3bf 8f5b 	dmb	ish
}
   17ce0:	b002      	add	sp, #8
   17ce2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		param = BT_LE_CONN_PARAM(
   17ce6:	4a08      	ldr	r2, [pc, #32]	; (17d08 <deferred_work+0xf0>)
   17ce8:	6810      	ldr	r0, [r2, #0]
   17cea:	6851      	ldr	r1, [r2, #4]
   17cec:	466b      	mov	r3, sp
   17cee:	c303      	stmia	r3!, {r0, r1}
   17cf0:	e7e6      	b.n	17cc0 <deferred_work+0xa8>
   17cf2:	bf00      	nop
   17cf4:	20001ea8 	.word	0x20001ea8
   17cf8:	00027d90 	.word	0x00027d90
   17cfc:	00027dac 	.word	0x00027dac
   17d00:	00029e73 	.word	0x00029e73
   17d04:	000289af 	.word	0x000289af
   17d08:	00027fbc 	.word	0x00027fbc

00017d0c <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   17d0c:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   17d0e:	4801      	ldr	r0, [pc, #4]	; (17d14 <bt_conn_create_frag_timeout+0x8>)
   17d10:	f7ff bd82 	b.w	17818 <bt_conn_create_pdu_timeout>
   17d14:	20000940 	.word	0x20000940

00017d18 <create_frag>:
{
   17d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17d1c:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   17d1e:	f04f 33ff 	mov.w	r3, #4294967295
   17d22:	f04f 32ff 	mov.w	r2, #4294967295
   17d26:	2000      	movs	r0, #0
{
   17d28:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   17d2a:	f7ff ffef 	bl	17d0c <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   17d2e:	7b73      	ldrb	r3, [r6, #13]
   17d30:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   17d32:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   17d34:	f04f 0600 	mov.w	r6, #0
   17d38:	d005      	beq.n	17d46 <create_frag+0x2e>
		net_buf_unref(frag);
   17d3a:	f004 fb93 	bl	1c464 <net_buf_unref>
		return NULL;
   17d3e:	4635      	mov	r5, r6
}
   17d40:	4628      	mov	r0, r5
   17d42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   17d46:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
   17d48:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   17d4c:	4e0c      	ldr	r6, [pc, #48]	; (17d80 <create_frag+0x68>)
   17d4e:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   17d50:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
   17d54:	f00f f8a2 	bl	26e9c <net_buf_simple_tailroom>
   17d58:	4580      	cmp	r8, r0
   17d5a:	d20c      	bcs.n	17d76 <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
   17d5c:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   17d60:	f854 1f08 	ldr.w	r1, [r4, #8]!
   17d64:	4632      	mov	r2, r6
   17d66:	4638      	mov	r0, r7
   17d68:	f00f f8a0 	bl	26eac <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   17d6c:	4631      	mov	r1, r6
   17d6e:	4620      	mov	r0, r4
   17d70:	f004 fc54 	bl	1c61c <net_buf_simple_pull>
   17d74:	e7e4      	b.n	17d40 <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
   17d76:	4638      	mov	r0, r7
   17d78:	f00f f890 	bl	26e9c <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   17d7c:	b286      	uxth	r6, r0
   17d7e:	e7ef      	b.n	17d60 <create_frag+0x48>
   17d80:	200002d0 	.word	0x200002d0

00017d84 <bt_conn_process_tx>:
{
   17d84:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   17d86:	7b43      	ldrb	r3, [r0, #13]
{
   17d88:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   17d8a:	b95b      	cbnz	r3, 17da4 <bt_conn_process_tx+0x20>
   17d8c:	f06f 0140 	mvn.w	r1, #64	; 0x40
   17d90:	3004      	adds	r0, #4
   17d92:	f00d fc73 	bl	2567c <atomic_and>
   17d96:	0643      	lsls	r3, r0, #25
   17d98:	d504      	bpl.n	17da4 <bt_conn_process_tx+0x20>
		conn_cleanup(conn);
   17d9a:	4620      	mov	r0, r4
}
   17d9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
   17da0:	f7ff bae0 	b.w	17364 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   17da4:	2200      	movs	r2, #0
   17da6:	2300      	movs	r3, #0
   17da8:	f104 0038 	add.w	r0, r4, #56	; 0x38
   17dac:	f004 fa0a 	bl	1c1c4 <net_buf_get>
	BT_ASSERT(buf);
   17db0:	4605      	mov	r5, r0
   17db2:	b958      	cbnz	r0, 17dcc <bt_conn_process_tx+0x48>
   17db4:	491e      	ldr	r1, [pc, #120]	; (17e30 <bt_conn_process_tx+0xac>)
   17db6:	481f      	ldr	r0, [pc, #124]	; (17e34 <bt_conn_process_tx+0xb0>)
   17db8:	f44f 723a 	mov.w	r2, #744	; 0x2e8
   17dbc:	f00c fae7 	bl	2438e <assert_print>
   17dc0:	4040      	eors	r0, r0
   17dc2:	f380 8811 	msr	BASEPRI, r0
   17dc6:	f04f 0003 	mov.w	r0, #3
   17dca:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   17dcc:	4e1a      	ldr	r6, [pc, #104]	; (17e38 <bt_conn_process_tx+0xb4>)
	if (buf->len <= conn_mtu(conn)) {
   17dce:	89aa      	ldrh	r2, [r5, #12]
   17dd0:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   17dd4:	429a      	cmp	r2, r3
   17dd6:	d807      	bhi.n	17de8 <bt_conn_process_tx+0x64>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   17dd8:	2300      	movs	r3, #0
   17dda:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   17ddc:	4629      	mov	r1, r5
   17dde:	4620      	mov	r0, r4
   17de0:	f7ff f9f8 	bl	171d4 <send_frag>
	if (!send_buf(conn, buf)) {
   17de4:	b130      	cbz	r0, 17df4 <bt_conn_process_tx+0x70>
}
   17de6:	bd70      	pop	{r4, r5, r6, pc}
	frag = create_frag(conn, buf);
   17de8:	4629      	mov	r1, r5
   17dea:	4620      	mov	r0, r4
   17dec:	f7ff ff94 	bl	17d18 <create_frag>
	if (!frag) {
   17df0:	4601      	mov	r1, r0
   17df2:	b920      	cbnz	r0, 17dfe <bt_conn_process_tx+0x7a>
		net_buf_unref(buf);
   17df4:	4628      	mov	r0, r5
}
   17df6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
   17dfa:	f004 bb33 	b.w	1c464 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   17dfe:	2301      	movs	r3, #1
   17e00:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   17e02:	4620      	mov	r0, r4
   17e04:	f7ff f9e6 	bl	171d4 <send_frag>
   17e08:	2800      	cmp	r0, #0
   17e0a:	d0f3      	beq.n	17df4 <bt_conn_process_tx+0x70>
	while (buf->len > conn_mtu(conn)) {
   17e0c:	89aa      	ldrh	r2, [r5, #12]
   17e0e:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   17e12:	429a      	cmp	r2, r3
   17e14:	d802      	bhi.n	17e1c <bt_conn_process_tx+0x98>
	return send_frag(conn, buf, FRAG_END, false);
   17e16:	2300      	movs	r3, #0
   17e18:	2203      	movs	r2, #3
   17e1a:	e7df      	b.n	17ddc <bt_conn_process_tx+0x58>
		frag = create_frag(conn, buf);
   17e1c:	4629      	mov	r1, r5
   17e1e:	4620      	mov	r0, r4
   17e20:	f7ff ff7a 	bl	17d18 <create_frag>
		if (!frag) {
   17e24:	4601      	mov	r1, r0
   17e26:	2800      	cmp	r0, #0
   17e28:	d0e4      	beq.n	17df4 <bt_conn_process_tx+0x70>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   17e2a:	2301      	movs	r3, #1
   17e2c:	461a      	mov	r2, r3
   17e2e:	e7e8      	b.n	17e02 <bt_conn_process_tx+0x7e>
   17e30:	00029e73 	.word	0x00029e73
   17e34:	000289af 	.word	0x000289af
   17e38:	200002d0 	.word	0x200002d0

00017e3c <bt_conn_auth_cb_register>:
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
   17e3c:	4b0c      	ldr	r3, [pc, #48]	; (17e70 <bt_conn_auth_cb_register+0x34>)
   17e3e:	b908      	cbnz	r0, 17e44 <bt_conn_auth_cb_register+0x8>
		bt_auth = NULL;
   17e40:	6018      	str	r0, [r3, #0]
		return 0;
   17e42:	4770      	bx	lr
	}

	if (bt_auth) {
   17e44:	681a      	ldr	r2, [r3, #0]
   17e46:	b962      	cbnz	r2, 17e62 <bt_conn_auth_cb_register+0x26>
	}

	/* The cancel callback must always be provided if the app provides
	 * interactive callbacks.
	 */
	if (!cb->cancel &&
   17e48:	6902      	ldr	r2, [r0, #16]
   17e4a:	b93a      	cbnz	r2, 17e5c <bt_conn_auth_cb_register+0x20>
   17e4c:	6802      	ldr	r2, [r0, #0]
   17e4e:	b95a      	cbnz	r2, 17e68 <bt_conn_auth_cb_register+0x2c>
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
   17e50:	6842      	ldr	r2, [r0, #4]
   17e52:	b94a      	cbnz	r2, 17e68 <bt_conn_auth_cb_register+0x2c>
   17e54:	6882      	ldr	r2, [r0, #8]
   17e56:	b93a      	cbnz	r2, 17e68 <bt_conn_auth_cb_register+0x2c>
   17e58:	6942      	ldr	r2, [r0, #20]
   17e5a:	b92a      	cbnz	r2, 17e68 <bt_conn_auth_cb_register+0x2c>
#endif
	     cb->pairing_confirm)) {
		return -EINVAL;
	}

	bt_auth = cb;
   17e5c:	6018      	str	r0, [r3, #0]
	return 0;
   17e5e:	2000      	movs	r0, #0
   17e60:	4770      	bx	lr
		return -EALREADY;
   17e62:	f06f 0077 	mvn.w	r0, #119	; 0x77
   17e66:	4770      	bx	lr
		return -EINVAL;
   17e68:	f06f 0015 	mvn.w	r0, #21
}
   17e6c:	4770      	bx	lr
   17e6e:	bf00      	nop
   17e70:	20001e9c 	.word	0x20001e9c

00017e74 <bt_conn_auth_info_cb_register>:

int bt_conn_auth_info_cb_register(struct bt_conn_auth_info_cb *cb)
{
	CHECKIF(cb == NULL) {
   17e74:	4603      	mov	r3, r0
   17e76:	b168      	cbz	r0, 17e94 <bt_conn_auth_info_cb_register+0x20>
		return -EINVAL;
	}

	sys_slist_append(&bt_auth_info_cbs, &cb->node);
   17e78:	f100 020c 	add.w	r2, r0, #12
	parent->next = child;
   17e7c:	2000      	movs	r0, #0
   17e7e:	60d8      	str	r0, [r3, #12]
	return list->tail;
   17e80:	4b06      	ldr	r3, [pc, #24]	; (17e9c <bt_conn_auth_info_cb_register+0x28>)
   17e82:	6859      	ldr	r1, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   17e84:	b919      	cbnz	r1, 17e8e <bt_conn_auth_info_cb_register+0x1a>
	list->head = node;
   17e86:	e9c3 2200 	strd	r2, r2, [r3]

	return 0;
   17e8a:	4608      	mov	r0, r1
}
   17e8c:	4770      	bx	lr
	parent->next = child;
   17e8e:	600a      	str	r2, [r1, #0]
	list->tail = node;
   17e90:	605a      	str	r2, [r3, #4]
}
   17e92:	4770      	bx	lr
		return -EINVAL;
   17e94:	f06f 0015 	mvn.w	r0, #21
}
   17e98:	4770      	bx	lr
   17e9a:	bf00      	nop
   17e9c:	20001ea0 	.word	0x20001ea0

00017ea0 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   17ea0:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   17ea2:	490b      	ldr	r1, [pc, #44]	; (17ed0 <bt_conn_init+0x30>)
   17ea4:	480b      	ldr	r0, [pc, #44]	; (17ed4 <bt_conn_init+0x34>)
   17ea6:	f00f fc23 	bl	276f0 <k_queue_append>
   17eaa:	490b      	ldr	r1, [pc, #44]	; (17ed8 <bt_conn_init+0x38>)
   17eac:	4809      	ldr	r0, [pc, #36]	; (17ed4 <bt_conn_init+0x34>)
   17eae:	f00f fc1f 	bl	276f0 <k_queue_append>
   17eb2:	490a      	ldr	r1, [pc, #40]	; (17edc <bt_conn_init+0x3c>)
   17eb4:	4807      	ldr	r0, [pc, #28]	; (17ed4 <bt_conn_init+0x34>)
   17eb6:	f00f fc1b 	bl	276f0 <k_queue_append>
	}

	bt_att_init();
   17eba:	f00e f8fd 	bl	260b8 <bt_att_init>

	err = bt_smp_init();
   17ebe:	f003 feb5 	bl	1bc2c <bt_smp_init>
	if (err) {
   17ec2:	4604      	mov	r4, r0
   17ec4:	b908      	cbnz	r0, 17eca <bt_conn_init+0x2a>
		return err;
	}

	bt_l2cap_init();
   17ec6:	f00d fd6a 	bl	2599e <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   17eca:	4620      	mov	r0, r4
   17ecc:	bd10      	pop	{r4, pc}
   17ece:	bf00      	nop
   17ed0:	20001eac 	.word	0x20001eac
   17ed4:	200008bc 	.word	0x200008bc
   17ed8:	20001ebc 	.word	0x20001ebc
   17edc:	20001ecc 	.word	0x20001ecc

00017ee0 <l2cap_accept>:
	(void)k_work_cancel_delayable(&le_chan->rtx_work);
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   17ee0:	b508      	push	{r3, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   17ee2:	4b07      	ldr	r3, [pc, #28]	; (17f00 <l2cap_accept+0x20>)
{
   17ee4:	4602      	mov	r2, r0
		if (l2cap->chan.chan.conn) {
   17ee6:	6818      	ldr	r0, [r3, #0]
   17ee8:	b918      	cbnz	r0, 17ef2 <l2cap_accept+0x12>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
   17eea:	4a06      	ldr	r2, [pc, #24]	; (17f04 <l2cap_accept+0x24>)
   17eec:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
   17eee:	600b      	str	r3, [r1, #0]
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
   17ef0:	bd08      	pop	{r3, pc}
	BT_ERR("No available L2CAP context for conn %p", conn);
   17ef2:	4805      	ldr	r0, [pc, #20]	; (17f08 <l2cap_accept+0x28>)
   17ef4:	2145      	movs	r1, #69	; 0x45
   17ef6:	f00c fa58 	bl	243aa <z_log_minimal_printk>
   17efa:	f06f 000b 	mvn.w	r0, #11
   17efe:	e7f7      	b.n	17ef0 <l2cap_accept+0x10>
   17f00:	20001edc 	.word	0x20001edc
   17f04:	00028254 	.word	0x00028254
   17f08:	0002a0e5 	.word	0x0002a0e5

00017f0c <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   17f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17f0e:	4605      	mov	r5, r0
   17f10:	460f      	mov	r7, r1
   17f12:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   17f14:	2300      	movs	r3, #0
   17f16:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   17f1a:	2104      	movs	r1, #4
   17f1c:	2000      	movs	r0, #0
   17f1e:	f7ff fc7b 	bl	17818 <bt_conn_create_pdu_timeout>
	if (!buf) {
   17f22:	4604      	mov	r4, r0
   17f24:	b930      	cbnz	r0, 17f34 <l2cap_create_le_sig_pdu.constprop.0+0x28>
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
   17f26:	4807      	ldr	r0, [pc, #28]	; (17f44 <l2cap_create_le_sig_pdu.constprop.0+0x38>)
   17f28:	462a      	mov	r2, r5
   17f2a:	2145      	movs	r1, #69	; 0x45
   17f2c:	f00c fa3d 	bl	243aa <z_log_minimal_printk>
}
   17f30:	4620      	mov	r0, r4
   17f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   17f34:	2104      	movs	r1, #4
   17f36:	3008      	adds	r0, #8
   17f38:	f004 fbaa 	bl	1c690 <net_buf_simple_add>
	hdr->code = code;
   17f3c:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   17f3e:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   17f40:	8046      	strh	r6, [r0, #2]
	return buf;
   17f42:	e7f5      	b.n	17f30 <l2cap_create_le_sig_pdu.constprop.0+0x24>
   17f44:	0002a111 	.word	0x0002a111

00017f48 <bt_l2cap_connected>:
{
   17f48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   17f4a:	4d2b      	ldr	r5, [pc, #172]	; (17ff8 <bt_l2cap_connected+0xb0>)
   17f4c:	4e2b      	ldr	r6, [pc, #172]	; (17ffc <bt_l2cap_connected+0xb4>)
   17f4e:	4f2c      	ldr	r7, [pc, #176]	; (18000 <bt_l2cap_connected+0xb8>)
{
   17f50:	4604      	mov	r4, r0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   17f52:	42b5      	cmp	r5, r6
   17f54:	d90a      	bls.n	17f6c <bt_l2cap_connected+0x24>
   17f56:	482b      	ldr	r0, [pc, #172]	; (18004 <bt_l2cap_connected+0xbc>)
   17f58:	4639      	mov	r1, r7
   17f5a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
   17f5e:	f00c fa16 	bl	2438e <assert_print>
   17f62:	f44f 71b6 	mov.w	r1, #364	; 0x16c
   17f66:	4638      	mov	r0, r7
   17f68:	f00c fa0a 	bl	24380 <assert_post_action>
   17f6c:	42b5      	cmp	r5, r6
   17f6e:	d301      	bcc.n	17f74 <bt_l2cap_connected+0x2c>
}
   17f70:	b003      	add	sp, #12
   17f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (fchan->accept(conn, &chan) < 0) {
   17f74:	686b      	ldr	r3, [r5, #4]
   17f76:	a901      	add	r1, sp, #4
   17f78:	4620      	mov	r0, r4
   17f7a:	4798      	blx	r3
   17f7c:	2800      	cmp	r0, #0
   17f7e:	db35      	blt.n	17fec <bt_l2cap_connected+0xa4>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   17f80:	9b01      	ldr	r3, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   17f82:	882a      	ldrh	r2, [r5, #0]
   17f84:	829a      	strh	r2, [r3, #20]
		le_chan->tx.cid = fchan->cid;
   17f86:	849a      	strh	r2, [r3, #36]	; 0x24
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   17f88:	2100      	movs	r1, #0
   17f8a:	f103 0210 	add.w	r2, r3, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   17f8e:	68a8      	ldr	r0, [r5, #8]
   17f90:	f3bf 8f5b 	dmb	ish
   17f94:	e852 cf00 	ldrex	ip, [r2]
   17f98:	e842 1e00 	strex	lr, r1, [r2]
   17f9c:	f1be 0f00 	cmp.w	lr, #0
   17fa0:	d1f8      	bne.n	17f94 <bt_l2cap_connected+0x4c>
   17fa2:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   17fa6:	6099      	str	r1, [r3, #8]
	return list->tail;
   17fa8:	6da1      	ldr	r1, [r4, #88]	; 0x58
	sys_slist_append(&conn->channels, &chan->node);
   17faa:	f103 0208 	add.w	r2, r3, #8
Z_GENLIST_APPEND(slist, snode)
   17fae:	b9f9      	cbnz	r1, 17ff0 <bt_l2cap_connected+0xa8>
	list->head = node;
   17fb0:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
	chan->destroy = destroy;
   17fb4:	60d8      	str	r0, [r3, #12]
		if (chan->ops->connected) {
   17fb6:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
   17fb8:	601c      	str	r4, [r3, #0]
		if (chan->ops->connected) {
   17fba:	6843      	ldr	r3, [r0, #4]
   17fbc:	681b      	ldr	r3, [r3, #0]
   17fbe:	b103      	cbz	r3, 17fc2 <bt_l2cap_connected+0x7a>
			chan->ops->connected(chan);
   17fc0:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17fc2:	9b01      	ldr	r3, [sp, #4]
   17fc4:	f3bf 8f5b 	dmb	ish
   17fc8:	3310      	adds	r3, #16
   17fca:	e853 2f00 	ldrex	r2, [r3]
   17fce:	f042 0201 	orr.w	r2, r2, #1
   17fd2:	e843 2100 	strex	r1, r2, [r3]
   17fd6:	2900      	cmp	r1, #0
   17fd8:	d1f7      	bne.n	17fca <bt_l2cap_connected+0x82>
   17fda:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   17fde:	9801      	ldr	r0, [sp, #4]
   17fe0:	6843      	ldr	r3, [r0, #4]
   17fe2:	699b      	ldr	r3, [r3, #24]
   17fe4:	b113      	cbz	r3, 17fec <bt_l2cap_connected+0xa4>
			chan->ops->status(chan, chan->status);
   17fe6:	f100 0110 	add.w	r1, r0, #16
   17fea:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   17fec:	350c      	adds	r5, #12
   17fee:	e7b0      	b.n	17f52 <bt_l2cap_connected+0xa>
	parent->next = child;
   17ff0:	600a      	str	r2, [r1, #0]
	list->tail = node;
   17ff2:	65a2      	str	r2, [r4, #88]	; 0x58
}
   17ff4:	e7de      	b.n	17fb4 <bt_l2cap_connected+0x6c>
   17ff6:	bf00      	nop
   17ff8:	00027d6c 	.word	0x00027d6c
   17ffc:	00027d90 	.word	0x00027d90
   18000:	0002a13e 	.word	0x0002a13e
   18004:	000289af 	.word	0x000289af

00018008 <l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
   18008:	898b      	ldrh	r3, [r1, #12]
   1800a:	2b03      	cmp	r3, #3
{
   1800c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1800e:	4606      	mov	r6, r0
   18010:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   18012:	d804      	bhi.n	1801e <l2cap_recv+0x16>
		BT_ERR("Too small L2CAP signaling PDU");
   18014:	4822      	ldr	r0, [pc, #136]	; (180a0 <l2cap_recv+0x98>)
   18016:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Invalid ident value in L2CAP PDU");
   18018:	f00c f9c7 	bl	243aa <z_log_minimal_printk>
		return 0;
   1801c:	e00d      	b.n	1803a <l2cap_recv+0x32>
	return net_buf_simple_pull_mem(&buf->b, len);
   1801e:	2104      	movs	r1, #4
   18020:	f105 0008 	add.w	r0, r5, #8
   18024:	f004 fb16 	bl	1c654 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   18028:	89aa      	ldrh	r2, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
   1802a:	8843      	ldrh	r3, [r0, #2]
	if (buf->len != len) {
   1802c:	4293      	cmp	r3, r2
   1802e:	4604      	mov	r4, r0
   18030:	d006      	beq.n	18040 <l2cap_recv+0x38>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   18032:	481c      	ldr	r0, [pc, #112]	; (180a4 <l2cap_recv+0x9c>)
   18034:	2145      	movs	r1, #69	; 0x45
   18036:	f00c f9b8 	bl	243aa <z_log_minimal_printk>
}
   1803a:	2000      	movs	r0, #0
   1803c:	b002      	add	sp, #8
   1803e:	bd70      	pop	{r4, r5, r6, pc}
	if (!hdr->ident) {
   18040:	7842      	ldrb	r2, [r0, #1]
   18042:	b912      	cbnz	r2, 1804a <l2cap_recv+0x42>
		BT_ERR("Invalid ident value in L2CAP PDU");
   18044:	4818      	ldr	r0, [pc, #96]	; (180a8 <l2cap_recv+0xa0>)
   18046:	2145      	movs	r1, #69	; 0x45
   18048:	e7e6      	b.n	18018 <l2cap_recv+0x10>
	switch (hdr->code) {
   1804a:	7802      	ldrb	r2, [r0, #0]
   1804c:	2a01      	cmp	r2, #1
   1804e:	d0f4      	beq.n	1803a <l2cap_recv+0x32>
   18050:	2a13      	cmp	r2, #19
   18052:	d104      	bne.n	1805e <l2cap_recv+0x56>
	if (buf->len < sizeof(*rsp)) {
   18054:	2b01      	cmp	r3, #1
   18056:	d8f0      	bhi.n	1803a <l2cap_recv+0x32>
		BT_ERR("Too small LE conn param rsp");
   18058:	4814      	ldr	r0, [pc, #80]	; (180ac <l2cap_recv+0xa4>)
   1805a:	2145      	movs	r1, #69	; 0x45
   1805c:	e7dc      	b.n	18018 <l2cap_recv+0x10>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
   1805e:	4814      	ldr	r0, [pc, #80]	; (180b0 <l2cap_recv+0xa8>)
   18060:	2157      	movs	r1, #87	; 0x57
   18062:	f00c f9a2 	bl	243aa <z_log_minimal_printk>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   18066:	7861      	ldrb	r1, [r4, #1]
		l2cap_send_reject(chan->conn, hdr->ident,
   18068:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1806a:	2202      	movs	r2, #2
   1806c:	2001      	movs	r0, #1
   1806e:	f7ff ff4d 	bl	17f0c <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   18072:	4604      	mov	r4, r0
   18074:	2800      	cmp	r0, #0
   18076:	d0e0      	beq.n	1803a <l2cap_recv+0x32>
	return net_buf_simple_add(&buf->b, len);
   18078:	2102      	movs	r1, #2
   1807a:	3008      	adds	r0, #8
   1807c:	f004 fb08 	bl	1c690 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   18080:	2300      	movs	r3, #0
   18082:	7003      	strb	r3, [r0, #0]
   18084:	7043      	strb	r3, [r0, #1]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   18086:	4622      	mov	r2, r4
   18088:	9300      	str	r3, [sp, #0]
   1808a:	2105      	movs	r1, #5
   1808c:	4628      	mov	r0, r5
   1808e:	f00d fc59 	bl	25944 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   18092:	2800      	cmp	r0, #0
   18094:	d0d1      	beq.n	1803a <l2cap_recv+0x32>
		net_buf_unref(buf);
   18096:	4620      	mov	r0, r4
   18098:	f004 f9e4 	bl	1c464 <net_buf_unref>
   1809c:	e7cd      	b.n	1803a <l2cap_recv+0x32>
   1809e:	bf00      	nop
   180a0:	0002a16f 	.word	0x0002a16f
   180a4:	0002a192 	.word	0x0002a192
   180a8:	0002a1b8 	.word	0x0002a1b8
   180ac:	0002a1de 	.word	0x0002a1de
   180b0:	0002a1ff 	.word	0x0002a1ff

000180b4 <bt_l2cap_recv>:
{
   180b4:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   180b6:	898b      	ldrh	r3, [r1, #12]
   180b8:	2b03      	cmp	r3, #3
{
   180ba:	4605      	mov	r5, r0
   180bc:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   180be:	d808      	bhi.n	180d2 <bt_l2cap_recv+0x1e>
		BT_ERR("Too small L2CAP PDU received");
   180c0:	480e      	ldr	r0, [pc, #56]	; (180fc <bt_l2cap_recv+0x48>)
   180c2:	2145      	movs	r1, #69	; 0x45
   180c4:	f00c f971 	bl	243aa <z_log_minimal_printk>
	net_buf_unref(buf);
   180c8:	4620      	mov	r0, r4
}
   180ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   180ce:	f004 b9c9 	b.w	1c464 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   180d2:	2104      	movs	r1, #4
   180d4:	f104 0008 	add.w	r0, r4, #8
   180d8:	f004 fabc 	bl	1c654 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   180dc:	8842      	ldrh	r2, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   180de:	4628      	mov	r0, r5
   180e0:	4611      	mov	r1, r2
   180e2:	f00d fc52 	bl	2598a <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   180e6:	b920      	cbnz	r0, 180f2 <bt_l2cap_recv+0x3e>
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
   180e8:	4805      	ldr	r0, [pc, #20]	; (18100 <bt_l2cap_recv+0x4c>)
   180ea:	2157      	movs	r1, #87	; 0x57
   180ec:	f00c f95d 	bl	243aa <z_log_minimal_printk>
		net_buf_unref(buf);
   180f0:	e7ea      	b.n	180c8 <bt_l2cap_recv+0x14>
	chan->ops->recv(chan, buf);
   180f2:	6843      	ldr	r3, [r0, #4]
   180f4:	4621      	mov	r1, r4
   180f6:	691b      	ldr	r3, [r3, #16]
   180f8:	4798      	blx	r3
   180fa:	e7e5      	b.n	180c8 <bt_l2cap_recv+0x14>
   180fc:	0002a222 	.word	0x0002a222
   18100:	0002a244 	.word	0x0002a244

00018104 <bt_l2cap_update_conn_param>:
{
   18104:	b573      	push	{r0, r1, r4, r5, r6, lr}
   18106:	460d      	mov	r5, r1
	ident++;
   18108:	4916      	ldr	r1, [pc, #88]	; (18164 <bt_l2cap_update_conn_param+0x60>)
   1810a:	780b      	ldrb	r3, [r1, #0]
   1810c:	3301      	adds	r3, #1
	if (!ident) {
   1810e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		ident++;
   18112:	bf08      	it	eq
   18114:	2301      	moveq	r3, #1
   18116:	700b      	strb	r3, [r1, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   18118:	7809      	ldrb	r1, [r1, #0]
{
   1811a:	4606      	mov	r6, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   1811c:	2208      	movs	r2, #8
   1811e:	2012      	movs	r0, #18
   18120:	f7ff fef4 	bl	17f0c <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   18124:	4604      	mov	r4, r0
   18126:	b1d0      	cbz	r0, 1815e <bt_l2cap_update_conn_param+0x5a>
	return net_buf_simple_add(&buf->b, len);
   18128:	2108      	movs	r1, #8
   1812a:	4408      	add	r0, r1
   1812c:	f004 fab0 	bl	1c690 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   18130:	882b      	ldrh	r3, [r5, #0]
   18132:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   18134:	886b      	ldrh	r3, [r5, #2]
   18136:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   18138:	88ab      	ldrh	r3, [r5, #4]
   1813a:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   1813c:	88eb      	ldrh	r3, [r5, #6]
   1813e:	80c3      	strh	r3, [r0, #6]
   18140:	2300      	movs	r3, #0
   18142:	9300      	str	r3, [sp, #0]
   18144:	4622      	mov	r2, r4
   18146:	2105      	movs	r1, #5
   18148:	4630      	mov	r0, r6
   1814a:	f00d fbfb 	bl	25944 <bt_l2cap_send_cb>
	if (err) {
   1814e:	4605      	mov	r5, r0
   18150:	b110      	cbz	r0, 18158 <bt_l2cap_update_conn_param+0x54>
		net_buf_unref(buf);
   18152:	4620      	mov	r0, r4
   18154:	f004 f986 	bl	1c464 <net_buf_unref>
}
   18158:	4628      	mov	r0, r5
   1815a:	b002      	add	sp, #8
   1815c:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   1815e:	f06f 050b 	mvn.w	r5, #11
   18162:	e7f9      	b.n	18158 <bt_l2cap_update_conn_param+0x54>
   18164:	200023f5 	.word	0x200023f5

00018168 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   18168:	4b02      	ldr	r3, [pc, #8]	; (18174 <att_cfm_sent+0xc>)
   1816a:	f8c1 30ec 	str.w	r3, [r1, #236]	; 0xec

	att_sent(conn, user_data);
   1816e:	f00d bc29 	b.w	259c4 <att_sent>
   18172:	bf00      	nop
   18174:	00025d71 	.word	0x00025d71

00018178 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   18178:	4b02      	ldr	r3, [pc, #8]	; (18184 <att_rsp_sent+0xc>)
   1817a:	f8c1 30ec 	str.w	r3, [r1, #236]	; 0xec

	att_sent(conn, user_data);
   1817e:	f00d bc21 	b.w	259c4 <att_sent>
   18182:	bf00      	nop
   18184:	00025e0f 	.word	0x00025e0f

00018188 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   18188:	4b02      	ldr	r3, [pc, #8]	; (18194 <att_req_sent+0xc>)
   1818a:	f8c1 30ec 	str.w	r3, [r1, #236]	; 0xec

	att_sent(conn, user_data);
   1818e:	f00d bc19 	b.w	259c4 <att_sent>
   18192:	bf00      	nop
   18194:	00025b15 	.word	0x00025b15

00018198 <att_get>:

	return 0;
}

static struct bt_att *att_get(struct bt_conn *conn)
{
   18198:	b510      	push	{r4, lr}
	struct bt_l2cap_chan *chan;
	struct bt_att_chan *att_chan;

	if (conn->state != BT_CONN_CONNECTED) {
   1819a:	7b43      	ldrb	r3, [r0, #13]
   1819c:	2b07      	cmp	r3, #7
   1819e:	d006      	beq.n	181ae <att_get+0x16>
		BT_WARN("Not connected");
   181a0:	4813      	ldr	r0, [pc, #76]	; (181f0 <att_get+0x58>)
   181a2:	2157      	movs	r1, #87	; 0x57
   181a4:	f00c f901 	bl	243aa <z_log_minimal_printk>
		return NULL;
   181a8:	2400      	movs	r4, #0
	att_chan = ATT_CHAN(chan);
	__ASSERT(atomic_test_bit(att_chan->flags, ATT_CONNECTED),
		 "ATT channel not connected");

	return att_chan->att;
}
   181aa:	4620      	mov	r0, r4
   181ac:	bd10      	pop	{r4, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   181ae:	2104      	movs	r1, #4
   181b0:	f00d fbeb 	bl	2598a <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   181b4:	4604      	mov	r4, r0
   181b6:	b920      	cbnz	r0, 181c2 <att_get+0x2a>
		BT_ERR("Unable to find ATT channel");
   181b8:	480e      	ldr	r0, [pc, #56]	; (181f4 <att_get+0x5c>)
   181ba:	2145      	movs	r1, #69	; 0x45
   181bc:	f00c f8f5 	bl	243aa <z_log_minimal_printk>
		return NULL;
   181c0:	e7f3      	b.n	181aa <att_get+0x12>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   181c2:	f3bf 8f5b 	dmb	ish
   181c6:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
   181ca:	f3bf 8f5b 	dmb	ish
	__ASSERT(atomic_test_bit(att_chan->flags, ATT_CONNECTED),
   181ce:	075b      	lsls	r3, r3, #29
   181d0:	d40a      	bmi.n	181e8 <att_get+0x50>
   181d2:	4909      	ldr	r1, [pc, #36]	; (181f8 <att_get+0x60>)
   181d4:	4809      	ldr	r0, [pc, #36]	; (181fc <att_get+0x64>)
   181d6:	f640 225c 	movw	r2, #2652	; 0xa5c
   181da:	f00c f8d8 	bl	2438e <assert_print>
   181de:	4806      	ldr	r0, [pc, #24]	; (181f8 <att_get+0x60>)
   181e0:	f640 215c 	movw	r1, #2652	; 0xa5c
   181e4:	f00c f8cc 	bl	24380 <assert_post_action>
	return att_chan->att;
   181e8:	f854 4c04 	ldr.w	r4, [r4, #-4]
   181ec:	e7dd      	b.n	181aa <att_get+0x12>
   181ee:	bf00      	nop
   181f0:	0002a285 	.word	0x0002a285
   181f4:	0002a298 	.word	0x0002a298
   181f8:	0002a2b8 	.word	0x0002a2b8
   181fc:	000289af 	.word	0x000289af

00018200 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   18200:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   18202:	3804      	subs	r0, #4
   18204:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   18206:	a901      	add	r1, sp, #4
   18208:	4802      	ldr	r0, [pc, #8]	; (18214 <bt_att_released+0x14>)
   1820a:	f008 f8e7 	bl	203dc <k_mem_slab_free>
}
   1820e:	b003      	add	sp, #12
   18210:	f85d fb04 	ldr.w	pc, [sp], #4
   18214:	2000083c 	.word	0x2000083c

00018218 <find_type_cb>:
{
   18218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
   1821c:	f8d2 9000 	ldr.w	r9, [r2]
{
   18220:	b091      	sub	sp, #68	; 0x44
   18222:	4607      	mov	r7, r0
   18224:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   18226:	2500      	movs	r5, #0
   18228:	f642 0301 	movw	r3, #10241	; 0x2801
   1822c:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   1822e:	f8d9 8004 	ldr.w	r8, [r9, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   18232:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   18236:	a90b      	add	r1, sp, #44	; 0x2c
{
   18238:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1823a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1823e:	f00c feca 	bl	24fd6 <bt_uuid_cmp>
   18242:	2800      	cmp	r0, #0
   18244:	d060      	beq.n	18308 <find_type_cb+0xf0>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   18246:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1824a:	6838      	ldr	r0, [r7, #0]
   1824c:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   18250:	a90b      	add	r1, sp, #44	; 0x2c
   18252:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   18256:	f00c febe 	bl	24fd6 <bt_uuid_cmp>
   1825a:	b138      	cbz	r0, 1826c <find_type_cb+0x54>
		if (data->group &&
   1825c:	68a3      	ldr	r3, [r4, #8]
   1825e:	b11b      	cbz	r3, 18268 <find_type_cb+0x50>
   18260:	885a      	ldrh	r2, [r3, #2]
   18262:	42b2      	cmp	r2, r6
   18264:	d200      	bcs.n	18268 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
   18266:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   18268:	2001      	movs	r0, #1
   1826a:	e009      	b.n	18280 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   1826c:	6861      	ldr	r1, [r4, #4]
   1826e:	4608      	mov	r0, r1
   18270:	f00d fba0 	bl	259b4 <net_buf_frags_len>
   18274:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
   18278:	1a1b      	subs	r3, r3, r0
   1827a:	2b03      	cmp	r3, #3
   1827c:	d803      	bhi.n	18286 <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   1827e:	2000      	movs	r0, #0
}
   18280:	b011      	add	sp, #68	; 0x44
   18282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   18286:	4608      	mov	r0, r1
   18288:	f004 f948 	bl	1c51c <net_buf_frag_last>
   1828c:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   1828e:	6860      	ldr	r0, [r4, #4]
   18290:	f00d fb90 	bl	259b4 <net_buf_frags_len>
   18294:	f8b9 a02a 	ldrh.w	sl, [r9, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   18298:	f105 0b08 	add.w	fp, r5, #8
   1829c:	ebaa 0a00 	sub.w	sl, sl, r0
   182a0:	4658      	mov	r0, fp
   182a2:	f00e fdfb 	bl	26e9c <net_buf_simple_tailroom>
   182a6:	4582      	cmp	sl, r0
   182a8:	d231      	bcs.n	1830e <find_type_cb+0xf6>
   182aa:	6860      	ldr	r0, [r4, #4]
   182ac:	f00d fb82 	bl	259b4 <net_buf_frags_len>
   182b0:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
   182b4:	1a18      	subs	r0, r3, r0
	if (!len) {
   182b6:	b970      	cbnz	r0, 182d6 <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   182b8:	6863      	ldr	r3, [r4, #4]
   182ba:	7998      	ldrb	r0, [r3, #6]
   182bc:	f003 fe40 	bl	1bf40 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   182c0:	2200      	movs	r2, #0
   182c2:	2300      	movs	r3, #0
   182c4:	f00e fdd9 	bl	26e7a <net_buf_alloc_fixed>
		if (!frag) {
   182c8:	4605      	mov	r5, r0
   182ca:	2800      	cmp	r0, #0
   182cc:	d0d7      	beq.n	1827e <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   182ce:	4601      	mov	r1, r0
   182d0:	6860      	ldr	r0, [r4, #4]
   182d2:	f004 f963 	bl	1c59c <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   182d6:	2300      	movs	r3, #0
   182d8:	9300      	str	r3, [sp, #0]
   182da:	f8d7 9004 	ldr.w	r9, [r7, #4]
   182de:	4639      	mov	r1, r7
   182e0:	2310      	movs	r3, #16
   182e2:	aa02      	add	r2, sp, #8
   182e4:	4640      	mov	r0, r8
   182e6:	47c8      	blx	r9
	if (read < 0) {
   182e8:	1e07      	subs	r7, r0, #0
   182ea:	db0d      	blt.n	18308 <find_type_cb+0xf0>
	if (read != data->value_len) {
   182ec:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   182ee:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   182f0:	42ba      	cmp	r2, r7
   182f2:	d02b      	beq.n	1834c <find_type_cb+0x134>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   182f4:	4601      	mov	r1, r0
   182f6:	a80b      	add	r0, sp, #44	; 0x2c
   182f8:	f00c fe9b 	bl	25032 <bt_uuid_create>
   182fc:	b958      	cbnz	r0, 18316 <find_type_cb+0xfe>
			BT_WARN("Unable to create UUID: size %u", data->value_len);
   182fe:	7c22      	ldrb	r2, [r4, #16]
   18300:	4814      	ldr	r0, [pc, #80]	; (18354 <find_type_cb+0x13c>)
   18302:	2157      	movs	r1, #87	; 0x57
			BT_WARN("Unable to create UUID: size %d", read);
   18304:	f00c f851 	bl	243aa <z_log_minimal_printk>
	data->group = NULL;
   18308:	2300      	movs	r3, #0
   1830a:	60a3      	str	r3, [r4, #8]
   1830c:	e7ac      	b.n	18268 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   1830e:	4658      	mov	r0, fp
   18310:	f00e fdc4 	bl	26e9c <net_buf_simple_tailroom>
   18314:	e7cf      	b.n	182b6 <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   18316:	b2fa      	uxtb	r2, r7
   18318:	a902      	add	r1, sp, #8
   1831a:	a806      	add	r0, sp, #24
   1831c:	f00c fe89 	bl	25032 <bt_uuid_create>
   18320:	b918      	cbnz	r0, 1832a <find_type_cb+0x112>
			BT_WARN("Unable to create UUID: size %d", read);
   18322:	480d      	ldr	r0, [pc, #52]	; (18358 <find_type_cb+0x140>)
   18324:	463a      	mov	r2, r7
   18326:	2157      	movs	r1, #87	; 0x57
   18328:	e7ec      	b.n	18304 <find_type_cb+0xec>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   1832a:	a906      	add	r1, sp, #24
   1832c:	a80b      	add	r0, sp, #44	; 0x2c
   1832e:	f00c fe52 	bl	24fd6 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   18332:	2800      	cmp	r0, #0
   18334:	d1e8      	bne.n	18308 <find_type_cb+0xf0>
	data->err = 0x00;
   18336:	2300      	movs	r3, #0
   18338:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   1833a:	2104      	movs	r1, #4
   1833c:	f105 0008 	add.w	r0, r5, #8
   18340:	f004 f9a6 	bl	1c690 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   18344:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   18346:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   18348:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   1834a:	e78d      	b.n	18268 <find_type_cb+0x50>
	} else if (memcmp(data->value, uuid, read)) {
   1834c:	a902      	add	r1, sp, #8
   1834e:	f00f fb75 	bl	27a3c <memcmp>
   18352:	e7ee      	b.n	18332 <find_type_cb+0x11a>
   18354:	0002a2e7 	.word	0x0002a2e7
   18358:	0002a30b 	.word	0x0002a30b

0001835c <read_group_cb>:
{
   1835c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   18360:	4605      	mov	r5, r0
   18362:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   18364:	f04f 0800 	mov.w	r8, #0
   18368:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1836c:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   1836e:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   18370:	f88d 8008 	strb.w	r8, [sp, #8]
   18374:	a902      	add	r1, sp, #8
{
   18376:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   18378:	f8ad 300a 	strh.w	r3, [sp, #10]
   1837c:	f00c fe2b 	bl	24fd6 <bt_uuid_cmp>
   18380:	b1a0      	cbz	r0, 183ac <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   18382:	f642 0301 	movw	r3, #10241	; 0x2801
   18386:	6828      	ldr	r0, [r5, #0]
   18388:	f88d 800c 	strb.w	r8, [sp, #12]
   1838c:	a903      	add	r1, sp, #12
   1838e:	f8ad 300e 	strh.w	r3, [sp, #14]
   18392:	f00c fe20 	bl	24fd6 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   18396:	b148      	cbz	r0, 183ac <read_group_cb+0x50>
		if (data->group &&
   18398:	6923      	ldr	r3, [r4, #16]
   1839a:	b11b      	cbz	r3, 183a4 <read_group_cb+0x48>
   1839c:	885a      	ldrh	r2, [r3, #2]
   1839e:	42b2      	cmp	r2, r6
   183a0:	d200      	bcs.n	183a4 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   183a2:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   183a4:	2001      	movs	r0, #1
}
   183a6:	b004      	add	sp, #16
   183a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   183ac:	6861      	ldr	r1, [r4, #4]
   183ae:	6828      	ldr	r0, [r5, #0]
   183b0:	f00c fe11 	bl	24fd6 <bt_uuid_cmp>
   183b4:	b110      	cbz	r0, 183bc <read_group_cb+0x60>
		data->group = NULL;
   183b6:	2300      	movs	r3, #0
   183b8:	6123      	str	r3, [r4, #16]
   183ba:	e7f3      	b.n	183a4 <read_group_cb+0x48>
	if (data->rsp->len &&
   183bc:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   183be:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   183c0:	781a      	ldrb	r2, [r3, #0]
   183c2:	b132      	cbz	r2, 183d2 <read_group_cb+0x76>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   183c4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   183c6:	8981      	ldrh	r1, [r0, #12]
   183c8:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   183ca:	4293      	cmp	r3, r2
   183cc:	da01      	bge.n	183d2 <read_group_cb+0x76>
		return BT_GATT_ITER_STOP;
   183ce:	2000      	movs	r0, #0
   183d0:	e7e9      	b.n	183a6 <read_group_cb+0x4a>
   183d2:	2104      	movs	r1, #4
   183d4:	3008      	adds	r0, #8
   183d6:	f004 f95b 	bl	1c690 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   183da:	4b09      	ldr	r3, [pc, #36]	; (18400 <read_group_cb+0xa4>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   183dc:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   183de:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   183e0:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   183e2:	8046      	strh	r6, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   183e4:	4629      	mov	r1, r5
   183e6:	9300      	str	r3, [sp, #0]
   183e8:	9401      	str	r4, [sp, #4]
   183ea:	2300      	movs	r3, #0
   183ec:	4638      	mov	r0, r7
   183ee:	f00d fc1c 	bl	25c2a <att_chan_read>
	if (read < 0) {
   183f2:	2800      	cmp	r0, #0
   183f4:	dbeb      	blt.n	183ce <read_group_cb+0x72>
	if (!data->group) {
   183f6:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   183f8:	3800      	subs	r0, #0
   183fa:	bf18      	it	ne
   183fc:	2001      	movne	r0, #1
   183fe:	e7d2      	b.n	183a6 <read_group_cb+0x4a>
   18400:	00025af5 	.word	0x00025af5

00018404 <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   18404:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   18406:	2300      	movs	r3, #0
{
   18408:	4607      	mov	r7, r0
   1840a:	460e      	mov	r6, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   1840c:	482d      	ldr	r0, [pc, #180]	; (184c4 <bt_att_accept+0xc0>)
   1840e:	2200      	movs	r2, #0
   18410:	4669      	mov	r1, sp
   18412:	f007 ff89 	bl	20328 <k_mem_slab_alloc>
   18416:	4605      	mov	r5, r0
   18418:	b138      	cbz	r0, 1842a <bt_att_accept+0x26>
		BT_ERR("No available ATT context for conn %p", conn);
   1841a:	482b      	ldr	r0, [pc, #172]	; (184c8 <bt_att_accept+0xc4>)
   1841c:	463a      	mov	r2, r7
   1841e:	2145      	movs	r1, #69	; 0x45
		BT_WARN("No available ATT channel for conn %p", att->conn);
   18420:	f00b ffc3 	bl	243aa <z_log_minimal_printk>
			      att_enhanced_connection_work_handler);
#endif /* CONFIG_BT_EATT */

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
   18424:	f06f 050b 	mvn.w	r5, #11
   18428:	e048      	b.n	184bc <bt_att_accept+0xb8>
	return z_impl_z_current_get();
   1842a:	f00a f905 	bl	22638 <z_impl_z_current_get>
	att_handle_rsp_thread = k_current_get();
   1842e:	4b27      	ldr	r3, [pc, #156]	; (184cc <bt_att_accept+0xc8>)
__ssp_bos_icheck3(memset, void *, int)
   18430:	4629      	mov	r1, r5
   18432:	6018      	str	r0, [r3, #0]
   18434:	2230      	movs	r2, #48	; 0x30
   18436:	9800      	ldr	r0, [sp, #0]
   18438:	f00f fb31 	bl	27a9e <memset>
	att->conn = conn;
   1843c:	9c00      	ldr	r4, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1843e:	4824      	ldr	r0, [pc, #144]	; (184d0 <bt_att_accept+0xcc>)
	list->tail = NULL;
   18440:	60a5      	str	r5, [r4, #8]
	list->head = NULL;
   18442:	e9c4 7500 	strd	r7, r5, [r4]
	list->tail = NULL;
   18446:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   1844a:	2200      	movs	r2, #0
   1844c:	2300      	movs	r3, #0
   1844e:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   18450:	9501      	str	r5, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   18452:	f007 ff69 	bl	20328 <k_mem_slab_alloc>
   18456:	4605      	mov	r5, r0
   18458:	b118      	cbz	r0, 18462 <bt_att_accept+0x5e>
		BT_WARN("No available ATT channel for conn %p", att->conn);
   1845a:	6822      	ldr	r2, [r4, #0]
   1845c:	481d      	ldr	r0, [pc, #116]	; (184d4 <bt_att_accept+0xd0>)
   1845e:	2157      	movs	r1, #87	; 0x57
   18460:	e7de      	b.n	18420 <bt_att_accept+0x1c>
   18462:	4601      	mov	r1, r0
   18464:	22f8      	movs	r2, #248	; 0xf8
   18466:	9801      	ldr	r0, [sp, #4]
   18468:	f00f fb19 	bl	27a9e <memset>
	chan->chan.chan.ops = &ops;
   1846c:	9801      	ldr	r0, [sp, #4]
   1846e:	4b1a      	ldr	r3, [pc, #104]	; (184d8 <bt_att_accept+0xd4>)
   18470:	6083      	str	r3, [r0, #8]
	z_impl_k_queue_init(queue);
   18472:	30a0      	adds	r0, #160	; 0xa0
   18474:	f00f f92f 	bl	276d6 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   18478:	9b01      	ldr	r3, [sp, #4]
   1847a:	f3bf 8f5b 	dmb	ish
   1847e:	3398      	adds	r3, #152	; 0x98
   18480:	e853 2f00 	ldrex	r2, [r3]
   18484:	e843 5100 	strex	r1, r5, [r3]
   18488:	2900      	cmp	r1, #0
   1848a:	d1f9      	bne.n	18480 <bt_att_accept+0x7c>
   1848c:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   18490:	9f01      	ldr	r7, [sp, #4]
	if (sys_slist_is_empty(&att->chans)) {
   18492:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	chan->att = att;
   18494:	603c      	str	r4, [r7, #0]
	if (sys_slist_is_empty(&att->chans)) {
   18496:	b91b      	cbnz	r3, 184a0 <bt_att_accept+0x9c>
   18498:	f104 000c 	add.w	r0, r4, #12
   1849c:	f00f f91b 	bl	276d6 <z_impl_k_queue_init>
	parent->next = child;
   184a0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   184a2:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
Z_GENLIST_PREPEND(slist, snode)
   184a6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	sys_slist_prepend(&att->chans, &chan->node);
   184a8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
	list->head = node;
   184ac:	62a3      	str	r3, [r4, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   184ae:	b902      	cbnz	r2, 184b2 <bt_att_accept+0xae>
	list->tail = node;
   184b0:	62e3      	str	r3, [r4, #44]	; 0x2c
	return chan;
   184b2:	9b01      	ldr	r3, [sp, #4]
	if (!chan) {
   184b4:	2b00      	cmp	r3, #0
   184b6:	d0b5      	beq.n	18424 <bt_att_accept+0x20>
	}

	*ch = &chan->chan.chan;
   184b8:	3304      	adds	r3, #4
   184ba:	6033      	str	r3, [r6, #0]

	return 0;
}
   184bc:	4628      	mov	r0, r5
   184be:	b003      	add	sp, #12
   184c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   184c2:	bf00      	nop
   184c4:	2000081c 	.word	0x2000081c
   184c8:	0002a32f 	.word	0x0002a32f
   184cc:	20001f70 	.word	0x20001f70
   184d0:	2000083c 	.word	0x2000083c
   184d4:	0002a359 	.word	0x0002a359
   184d8:	200005c4 	.word	0x200005c4

000184dc <read_type_cb>:
{
   184dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   184e0:	f8d2 8000 	ldr.w	r8, [r2]
{
   184e4:	4606      	mov	r6, r0
   184e6:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   184e8:	6800      	ldr	r0, [r0, #0]
   184ea:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   184ec:	f8d8 5004 	ldr.w	r5, [r8, #4]
{
   184f0:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   184f2:	f00c fd70 	bl	24fd6 <bt_uuid_cmp>
   184f6:	4607      	mov	r7, r0
   184f8:	2800      	cmp	r0, #0
   184fa:	d13e      	bne.n	1857a <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   184fc:	4628      	mov	r0, r5
   184fe:	2215      	movs	r2, #21
   18500:	4631      	mov	r1, r6
   18502:	f00e f862 	bl	265ca <bt_gatt_check_perm>
   18506:	4605      	mov	r5, r0
   18508:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1850a:	b148      	cbz	r0, 18520 <read_type_cb+0x44>
		if (data->rsp->len) {
   1850c:	68e3      	ldr	r3, [r4, #12]
   1850e:	781b      	ldrb	r3, [r3, #0]
   18510:	b923      	cbnz	r3, 1851c <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
   18512:	2500      	movs	r5, #0
}
   18514:	4628      	mov	r0, r5
   18516:	b003      	add	sp, #12
   18518:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
   1851c:	7527      	strb	r7, [r4, #20]
   1851e:	e7f8      	b.n	18512 <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   18520:	68a0      	ldr	r0, [r4, #8]
   18522:	f003 fffb 	bl	1c51c <net_buf_frag_last>
   18526:	2102      	movs	r1, #2
   18528:	3008      	adds	r0, #8
   1852a:	f004 f8b1 	bl	1c690 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1852e:	4b14      	ldr	r3, [pc, #80]	; (18580 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   18530:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   18532:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
   18534:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   18538:	4631      	mov	r1, r6
   1853a:	9300      	str	r3, [sp, #0]
   1853c:	9401      	str	r4, [sp, #4]
   1853e:	462b      	mov	r3, r5
   18540:	4640      	mov	r0, r8
   18542:	f00d fb72 	bl	25c2a <att_chan_read>
	if (read < 0) {
   18546:	2800      	cmp	r0, #0
   18548:	da07      	bge.n	1855a <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   1854a:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   1854e:	bf26      	itte	cs
   18550:	4240      	negcs	r0, r0
   18552:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   18554:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   18556:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   18558:	e7dc      	b.n	18514 <read_type_cb+0x38>
	if (!data->item) {
   1855a:	6923      	ldr	r3, [r4, #16]
   1855c:	2b00      	cmp	r3, #0
   1855e:	d0d8      	beq.n	18512 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   18560:	68a0      	ldr	r0, [r4, #8]
   18562:	f00d fa27 	bl	259b4 <net_buf_frags_len>
   18566:	f8b8 502a 	ldrh.w	r5, [r8, #42]	; 0x2a
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1856a:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   1856c:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1856e:	7818      	ldrb	r0, [r3, #0]
   18570:	4285      	cmp	r5, r0
   18572:	bf94      	ite	ls
   18574:	2500      	movls	r5, #0
   18576:	2501      	movhi	r5, #1
   18578:	e7cc      	b.n	18514 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   1857a:	2501      	movs	r5, #1
   1857c:	e7ca      	b.n	18514 <read_type_cb+0x38>
   1857e:	bf00      	nop
   18580:	000259d1 	.word	0x000259d1

00018584 <bt_att_connected>:
{
   18584:	b510      	push	{r4, lr}
   18586:	4604      	mov	r4, r0
	atomic_set_bit(att_chan->flags, ATT_CONNECTED);
   18588:	f104 0394 	add.w	r3, r4, #148	; 0x94
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   1858c:	3804      	subs	r0, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1858e:	f3bf 8f5b 	dmb	ish
   18592:	e853 2f00 	ldrex	r2, [r3]
   18596:	f042 0204 	orr.w	r2, r2, #4
   1859a:	e843 2100 	strex	r1, r2, [r3]
   1859e:	2900      	cmp	r1, #0
   185a0:	d1f7      	bne.n	18592 <bt_att_connected+0xe>
   185a2:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   185a6:	f3bf 8f5b 	dmb	ish
   185aa:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   185ae:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   185b2:	071b      	lsls	r3, r3, #28
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   185b4:	bf5e      	ittt	pl
   185b6:	2317      	movpl	r3, #23
   185b8:	84e3      	strhpl	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   185ba:	82e3      	strhpl	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
   185bc:	f00d fa6a 	bl	25a94 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   185c0:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   185c4:	4903      	ldr	r1, [pc, #12]	; (185d4 <bt_att_connected+0x50>)
   185c6:	f008 ff29 	bl	2141c <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   185ca:	6820      	ldr	r0, [r4, #0]
}
   185cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(le_chan->chan.conn);
   185d0:	f001 bed0 	b.w	1a374 <bt_gatt_connected>
   185d4:	00018fa9 	.word	0x00018fa9

000185d8 <chan_send>:
{
   185d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	hdr = (void *)buf->data;
   185dc:	688b      	ldr	r3, [r1, #8]
   185de:	f3bf 8f5b 	dmb	ish
{
   185e2:	4617      	mov	r7, r2
   185e4:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
   185e8:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   185ec:	0752      	lsls	r2, r2, #29
{
   185ee:	4606      	mov	r6, r0
   185f0:	460c      	mov	r4, r1
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   185f2:	d54a      	bpl.n	1868a <chan_send+0xb2>
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   185f4:	781b      	ldrb	r3, [r3, #0]
   185f6:	2bd2      	cmp	r3, #210	; 0xd2
   185f8:	d110      	bne.n	1861c <chan_send+0x44>
		err = bt_smp_sign(chan->att->conn, buf);
   185fa:	6803      	ldr	r3, [r0, #0]
   185fc:	6818      	ldr	r0, [r3, #0]
   185fe:	f00e fb70 	bl	26ce2 <bt_smp_sign>
		if (err) {
   18602:	4605      	mov	r5, r0
   18604:	b150      	cbz	r0, 1861c <chan_send+0x44>
			BT_ERR("Error signing data");
   18606:	4822      	ldr	r0, [pc, #136]	; (18690 <chan_send+0xb8>)
   18608:	2145      	movs	r1, #69	; 0x45
   1860a:	f00b fece 	bl	243aa <z_log_minimal_printk>
			net_buf_unref(buf);
   1860e:	4620      	mov	r0, r4
   18610:	f003 ff28 	bl	1c464 <net_buf_unref>
}
   18614:	4628      	mov	r0, r5
   18616:	b003      	add	sp, #12
   18618:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   1861c:	f104 0008 	add.w	r0, r4, #8
   18620:	f00e fc38 	bl	26e94 <net_buf_simple_headroom>
	state->len = buf->len;
   18624:	f8b4 900c 	ldrh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   18628:	4680      	mov	r8, r0
	chan->sent = cb ? cb : chan_cb(buf);
   1862a:	b957      	cbnz	r7, 18642 <chan_send+0x6a>
	switch (att_op_get_type(buf->data[0])) {
   1862c:	68a3      	ldr	r3, [r4, #8]
   1862e:	7818      	ldrb	r0, [r3, #0]
   18630:	f00d f9e0 	bl	259f4 <att_op_get_type>
   18634:	3801      	subs	r0, #1
   18636:	b2c0      	uxtb	r0, r0
   18638:	2804      	cmp	r0, #4
   1863a:	bf9c      	itt	ls
   1863c:	4b15      	ldrls	r3, [pc, #84]	; (18694 <chan_send+0xbc>)
   1863e:	f853 7020 	ldrls.w	r7, [r3, r0, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   18642:	6833      	ldr	r3, [r6, #0]
	chan->sent = cb ? cb : chan_cb(buf);
   18644:	f8c6 70f0 	str.w	r7, [r6, #240]	; 0xf0
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   18648:	6818      	ldr	r0, [r3, #0]
	if (cb == chan_rsp_sent) {
   1864a:	4b13      	ldr	r3, [pc, #76]	; (18698 <chan_send+0xc0>)
   1864c:	429f      	cmp	r7, r3
   1864e:	d018      	beq.n	18682 <chan_send+0xaa>
	} else if (cb == chan_cfm_sent) {
   18650:	4b12      	ldr	r3, [pc, #72]	; (1869c <chan_send+0xc4>)
   18652:	429f      	cmp	r7, r3
   18654:	d017      	beq.n	18686 <chan_send+0xae>
		return att_sent;
   18656:	4912      	ldr	r1, [pc, #72]	; (186a0 <chan_send+0xc8>)
   18658:	4b12      	ldr	r3, [pc, #72]	; (186a4 <chan_send+0xcc>)
   1865a:	4a13      	ldr	r2, [pc, #76]	; (186a8 <chan_send+0xd0>)
   1865c:	428f      	cmp	r7, r1
   1865e:	bf18      	it	ne
   18660:	4613      	movne	r3, r2
			       &chan->chan.chan);
   18662:	3604      	adds	r6, #4
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   18664:	9600      	str	r6, [sp, #0]
   18666:	4622      	mov	r2, r4
   18668:	2104      	movs	r1, #4
   1866a:	f00d f96b 	bl	25944 <bt_l2cap_send_cb>
	if (err) {
   1866e:	4605      	mov	r5, r0
   18670:	2800      	cmp	r0, #0
   18672:	d0cf      	beq.n	18614 <chan_send+0x3c>
	buf->data = buf->__buf + state->offset;
   18674:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   18676:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
   1867a:	fa10 f088 	uxtah	r0, r0, r8
   1867e:	60a0      	str	r0, [r4, #8]
}
   18680:	e7c8      	b.n	18614 <chan_send+0x3c>
		return att_rsp_sent;
   18682:	4b0a      	ldr	r3, [pc, #40]	; (186ac <chan_send+0xd4>)
   18684:	e7ed      	b.n	18662 <chan_send+0x8a>
		return att_cfm_sent;
   18686:	4b0a      	ldr	r3, [pc, #40]	; (186b0 <chan_send+0xd8>)
   18688:	e7eb      	b.n	18662 <chan_send+0x8a>
		return -EINVAL;
   1868a:	f06f 0515 	mvn.w	r5, #21
   1868e:	e7c1      	b.n	18614 <chan_send+0x3c>
   18690:	0002a383 	.word	0x0002a383
   18694:	00028278 	.word	0x00028278
   18698:	00025e0f 	.word	0x00025e0f
   1869c:	00025d71 	.word	0x00025d71
   186a0:	00025b15 	.word	0x00025b15
   186a4:	00018189 	.word	0x00018189
   186a8:	000259c5 	.word	0x000259c5
   186ac:	00018179 	.word	0x00018179
   186b0:	00018169 	.word	0x00018169

000186b4 <bt_att_chan_req_send>:
{
   186b4:	b538      	push	{r3, r4, r5, lr}
   186b6:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(chan);
   186b8:	4604      	mov	r4, r0
   186ba:	b950      	cbnz	r0, 186d2 <bt_att_chan_req_send+0x1e>
   186bc:	491b      	ldr	r1, [pc, #108]	; (1872c <bt_att_chan_req_send+0x78>)
   186be:	481c      	ldr	r0, [pc, #112]	; (18730 <bt_att_chan_req_send+0x7c>)
   186c0:	f240 2265 	movw	r2, #613	; 0x265
   186c4:	f00b fe63 	bl	2438e <assert_print>
   186c8:	4818      	ldr	r0, [pc, #96]	; (1872c <bt_att_chan_req_send+0x78>)
   186ca:	f240 2165 	movw	r1, #613	; 0x265
   186ce:	f00b fe57 	bl	24380 <assert_post_action>
	__ASSERT_NO_MSG(req);
   186d2:	b955      	cbnz	r5, 186ea <bt_att_chan_req_send+0x36>
   186d4:	4915      	ldr	r1, [pc, #84]	; (1872c <bt_att_chan_req_send+0x78>)
   186d6:	4816      	ldr	r0, [pc, #88]	; (18730 <bt_att_chan_req_send+0x7c>)
   186d8:	f240 2266 	movw	r2, #614	; 0x266
   186dc:	f00b fe57 	bl	2438e <assert_print>
   186e0:	4812      	ldr	r0, [pc, #72]	; (1872c <bt_att_chan_req_send+0x78>)
   186e2:	f240 2166 	movw	r1, #614	; 0x266
   186e6:	f00b fe4b 	bl	24380 <assert_post_action>
	__ASSERT_NO_MSG(req->func);
   186ea:	686b      	ldr	r3, [r5, #4]
   186ec:	b953      	cbnz	r3, 18704 <bt_att_chan_req_send+0x50>
   186ee:	490f      	ldr	r1, [pc, #60]	; (1872c <bt_att_chan_req_send+0x78>)
   186f0:	480f      	ldr	r0, [pc, #60]	; (18730 <bt_att_chan_req_send+0x7c>)
   186f2:	f240 2267 	movw	r2, #615	; 0x267
   186f6:	f00b fe4a 	bl	2438e <assert_print>
   186fa:	480c      	ldr	r0, [pc, #48]	; (1872c <bt_att_chan_req_send+0x78>)
   186fc:	f240 2167 	movw	r1, #615	; 0x267
   18700:	f00b fe3e 	bl	24380 <assert_post_action>
	__ASSERT_NO_MSG(!chan->req);
   18704:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   18708:	b153      	cbz	r3, 18720 <bt_att_chan_req_send+0x6c>
   1870a:	4908      	ldr	r1, [pc, #32]	; (1872c <bt_att_chan_req_send+0x78>)
   1870c:	4808      	ldr	r0, [pc, #32]	; (18730 <bt_att_chan_req_send+0x7c>)
   1870e:	f44f 721a 	mov.w	r2, #616	; 0x268
   18712:	f00b fe3c 	bl	2438e <assert_print>
   18716:	4805      	ldr	r0, [pc, #20]	; (1872c <bt_att_chan_req_send+0x78>)
   18718:	f44f 711a 	mov.w	r1, #616	; 0x268
   1871c:	f00b fe30 	bl	24380 <assert_post_action>
	return chan_req_send(chan, req);
   18720:	4629      	mov	r1, r5
   18722:	4620      	mov	r0, r4
}
   18724:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return chan_req_send(chan, req);
   18728:	f00d bb7f 	b.w	25e2a <chan_req_send>
   1872c:	0002a2b8 	.word	0x0002a2b8
   18730:	000289af 	.word	0x000289af

00018734 <bt_att_chan_send_rsp.constprop.0>:
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
   18734:	b538      	push	{r3, r4, r5, lr}
	return chan_send(chan, buf, cb);
   18736:	4a07      	ldr	r2, [pc, #28]	; (18754 <bt_att_chan_send_rsp.constprop.0+0x20>)
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
   18738:	4604      	mov	r4, r0
   1873a:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
   1873c:	f7ff ff4c 	bl	185d8 <chan_send>
	if (err) {
   18740:	b130      	cbz	r0, 18750 <bt_att_chan_send_rsp.constprop.0+0x1c>
		net_buf_put(&chan->tx_queue, buf);
   18742:	4629      	mov	r1, r5
   18744:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
}
   18748:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   1874c:	f003 be5c 	b.w	1c408 <net_buf_put>
}
   18750:	bd38      	pop	{r3, r4, r5, pc}
   18752:	bf00      	nop
   18754:	00025e0f 	.word	0x00025e0f

00018758 <bt_att_chan_create_pdu>:
{
   18758:	b538      	push	{r3, r4, r5, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1875a:	1c53      	adds	r3, r2, #1
   1875c:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
   1875e:	4293      	cmp	r3, r2
{
   18760:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   18762:	d906      	bls.n	18772 <bt_att_chan_create_pdu+0x1a>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   18764:	4813      	ldr	r0, [pc, #76]	; (187b4 <bt_att_chan_create_pdu+0x5c>)
   18766:	2157      	movs	r1, #87	; 0x57
   18768:	f00b fe1f 	bl	243aa <z_log_minimal_printk>
		return NULL;
   1876c:	2400      	movs	r4, #0
}
   1876e:	4620      	mov	r0, r4
   18770:	bd38      	pop	{r3, r4, r5, pc}
	switch (att_op_get_type(op)) {
   18772:	4608      	mov	r0, r1
   18774:	f00d f93e 	bl	259f4 <att_op_get_type>
   18778:	2802      	cmp	r0, #2
   1877a:	d001      	beq.n	18780 <bt_att_chan_create_pdu+0x28>
   1877c:	2804      	cmp	r0, #4
   1877e:	d10e      	bne.n	1879e <bt_att_chan_create_pdu+0x46>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   18780:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   18784:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   18786:	2100      	movs	r1, #0
   18788:	4608      	mov	r0, r1
   1878a:	f00d f8d8 	bl	2593e <bt_l2cap_create_pdu_timeout>
   1878e:	4604      	mov	r4, r0
	if (!buf) {
   18790:	b950      	cbnz	r0, 187a8 <bt_att_chan_create_pdu+0x50>
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   18792:	4809      	ldr	r0, [pc, #36]	; (187b8 <bt_att_chan_create_pdu+0x60>)
   18794:	462a      	mov	r2, r5
   18796:	2145      	movs	r1, #69	; 0x45
   18798:	f00b fe07 	bl	243aa <z_log_minimal_printk>
		return NULL;
   1879c:	e7e7      	b.n	1876e <bt_att_chan_create_pdu+0x16>
		buf = bt_l2cap_create_pdu(NULL, 0);
   1879e:	f04f 32ff 	mov.w	r2, #4294967295
   187a2:	f04f 33ff 	mov.w	r3, #4294967295
   187a6:	e7ee      	b.n	18786 <bt_att_chan_create_pdu+0x2e>
	return net_buf_simple_add(&buf->b, len);
   187a8:	2101      	movs	r1, #1
   187aa:	3008      	adds	r0, #8
   187ac:	f003 ff70 	bl	1c690 <net_buf_simple_add>
	hdr->code = op;
   187b0:	7005      	strb	r5, [r0, #0]
	return buf;
   187b2:	e7dc      	b.n	1876e <bt_att_chan_create_pdu+0x16>
   187b4:	0002a39b 	.word	0x0002a39b
   187b8:	0002a111 	.word	0x0002a111

000187bc <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
   187bc:	898b      	ldrh	r3, [r1, #12]
{
   187be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   187c2:	4607      	mov	r7, r0
   187c4:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   187c6:	b933      	cbnz	r3, 187d6 <bt_att_recv+0x1a>
		BT_ERR("Too small ATT PDU received");
   187c8:	4835      	ldr	r0, [pc, #212]	; (188a0 <bt_att_recv+0xe4>)
   187ca:	2145      	movs	r1, #69	; 0x45
			BT_WARN("Ignoring unexpected indication");
   187cc:	f00b fded 	bl	243aa <z_log_minimal_printk>
}
   187d0:	2000      	movs	r0, #0
   187d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   187d6:	2101      	movs	r1, #1
   187d8:	f105 0008 	add.w	r0, r5, #8
   187dc:	f003 ff3a 	bl	1c654 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   187e0:	f857 3c04 	ldr.w	r3, [r7, #-4]
   187e4:	4604      	mov	r4, r0
   187e6:	2b00      	cmp	r3, #0
   187e8:	d0f2      	beq.n	187d0 <bt_att_recv+0x14>
		if (hdr->code == handlers[i].op) {
   187ea:	7802      	ldrb	r2, [r0, #0]
   187ec:	4e2d      	ldr	r6, [pc, #180]	; (188a4 <bt_att_recv+0xe8>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   187ee:	f1a7 0804 	sub.w	r8, r7, #4
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   187f2:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   187f4:	f816 1033 	ldrb.w	r1, [r6, r3, lsl #3]
   187f8:	4291      	cmp	r1, r2
   187fa:	d111      	bne.n	18820 <bt_att_recv+0x64>
		if (handler->type == ATT_REQUEST &&
   187fc:	ea4f 09c3 	mov.w	r9, r3, lsl #3
   18800:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
   18804:	f893 a002 	ldrb.w	sl, [r3, #2]
   18808:	f1ba 0f01 	cmp.w	sl, #1
   1880c:	d11f      	bne.n	1884e <bt_att_recv+0x92>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   1880e:	2100      	movs	r1, #0
   18810:	f107 0094 	add.w	r0, r7, #148	; 0x94
   18814:	f00d fabc 	bl	25d90 <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   18818:	b328      	cbz	r0, 18866 <bt_att_recv+0xaa>
			BT_WARN("Ignoring unexpected request");
   1881a:	4823      	ldr	r0, [pc, #140]	; (188a8 <bt_att_recv+0xec>)
   1881c:	2157      	movs	r1, #87	; 0x57
   1881e:	e7d5      	b.n	187cc <bt_att_recv+0x10>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   18820:	3301      	adds	r3, #1
   18822:	2b0d      	cmp	r3, #13
   18824:	d1e6      	bne.n	187f4 <bt_att_recv+0x38>
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
   18826:	4821      	ldr	r0, [pc, #132]	; (188ac <bt_att_recv+0xf0>)
   18828:	2157      	movs	r1, #87	; 0x57
   1882a:	f00b fdbe 	bl	243aa <z_log_minimal_printk>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   1882e:	7821      	ldrb	r1, [r4, #0]
   18830:	4608      	mov	r0, r1
   18832:	f00d f8df 	bl	259f4 <att_op_get_type>
   18836:	2800      	cmp	r0, #0
   18838:	d0ca      	beq.n	187d0 <bt_att_recv+0x14>
   1883a:	2805      	cmp	r0, #5
   1883c:	d0c8      	beq.n	187d0 <bt_att_recv+0x14>
	if (!req) {
   1883e:	2900      	cmp	r1, #0
   18840:	d0c6      	beq.n	187d0 <bt_att_recv+0x14>
   18842:	2306      	movs	r3, #6
   18844:	2200      	movs	r2, #0
   18846:	4640      	mov	r0, r8
   18848:	f00d fba8 	bl	25f9c <send_err_rsp.part.0>
   1884c:	e7c0      	b.n	187d0 <bt_att_recv+0x14>
		} else if (handler->type == ATT_INDICATION &&
   1884e:	f1ba 0f05 	cmp.w	sl, #5
   18852:	d108      	bne.n	18866 <bt_att_recv+0xaa>
			   atomic_test_and_set_bit(att_chan->flags,
   18854:	2101      	movs	r1, #1
   18856:	f107 0094 	add.w	r0, r7, #148	; 0x94
   1885a:	f00d fa99 	bl	25d90 <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
   1885e:	b110      	cbz	r0, 18866 <bt_att_recv+0xaa>
			BT_WARN("Ignoring unexpected indication");
   18860:	4813      	ldr	r0, [pc, #76]	; (188b0 <bt_att_recv+0xf4>)
   18862:	2157      	movs	r1, #87	; 0x57
   18864:	e7b2      	b.n	187cc <bt_att_recv+0x10>
	if (buf->len < handler->expect_len) {
   18866:	444e      	add	r6, r9
   18868:	89aa      	ldrh	r2, [r5, #12]
   1886a:	7873      	ldrb	r3, [r6, #1]
   1886c:	4293      	cmp	r3, r2
   1886e:	d909      	bls.n	18884 <bt_att_recv+0xc8>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   18870:	7823      	ldrb	r3, [r4, #0]
   18872:	4810      	ldr	r0, [pc, #64]	; (188b4 <bt_att_recv+0xf8>)
   18874:	2145      	movs	r1, #69	; 0x45
   18876:	f00b fd98 	bl	243aa <z_log_minimal_printk>
	if (handler->type == ATT_REQUEST && err) {
   1887a:	f1ba 0f01 	cmp.w	sl, #1
   1887e:	d1a7      	bne.n	187d0 <bt_att_recv+0x14>
		err = BT_ATT_ERR_INVALID_PDU;
   18880:	2304      	movs	r3, #4
   18882:	e009      	b.n	18898 <bt_att_recv+0xdc>
		err = handler->func(att_chan, buf);
   18884:	6873      	ldr	r3, [r6, #4]
   18886:	4629      	mov	r1, r5
   18888:	4640      	mov	r0, r8
   1888a:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   1888c:	f1ba 0f01 	cmp.w	sl, #1
		err = handler->func(att_chan, buf);
   18890:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   18892:	d19d      	bne.n	187d0 <bt_att_recv+0x14>
   18894:	2800      	cmp	r0, #0
   18896:	d09b      	beq.n	187d0 <bt_att_recv+0x14>
		send_err_rsp(att_chan, hdr->code, 0, err);
   18898:	7821      	ldrb	r1, [r4, #0]
	if (!req) {
   1889a:	2900      	cmp	r1, #0
   1889c:	d098      	beq.n	187d0 <bt_att_recv+0x14>
   1889e:	e7d1      	b.n	18844 <bt_att_recv+0x88>
   188a0:	0002a3c5 	.word	0x0002a3c5
   188a4:	0002828c 	.word	0x0002828c
   188a8:	0002a3e5 	.word	0x0002a3e5
   188ac:	0002a44e 	.word	0x0002a44e
   188b0:	0002a406 	.word	0x0002a406
   188b4:	0002a42a 	.word	0x0002a42a

000188b8 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   188b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   188bc:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   188be:	6803      	ldr	r3, [r0, #0]
   188c0:	460e      	mov	r6, r1
   188c2:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   188c4:	b087      	sub	sp, #28
   188c6:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   188c8:	bf18      	it	ne
   188ca:	2101      	movne	r1, #1
   188cc:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   188ce:	4690      	mov	r8, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   188d0:	f00d fea6 	bl	26620 <bt_gatt_change_aware>
   188d4:	b958      	cbnz	r0, 188ee <att_write_rsp.constprop.0+0x36>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   188d6:	2105      	movs	r1, #5
   188d8:	f104 0098 	add.w	r0, r4, #152	; 0x98
   188dc:	f00d fa58 	bl	25d90 <atomic_test_and_set_bit>
   188e0:	2800      	cmp	r0, #0
   188e2:	d04a      	beq.n	1897a <att_write_rsp.constprop.0+0xc2>
			return 0;
   188e4:	2500      	movs	r5, #0
}
   188e6:	4628      	mov	r0, r5
   188e8:	b007      	add	sp, #28
   188ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!handle) {
   188ee:	2f00      	cmp	r7, #0
   188f0:	d045      	beq.n	1897e <att_write_rsp.constprop.0+0xc6>
	(void)memset(&data, 0, sizeof(data));
   188f2:	2218      	movs	r2, #24
   188f4:	2100      	movs	r1, #0
   188f6:	4668      	mov	r0, sp
   188f8:	f00f f8d1 	bl	27a9e <memset>
	if (rsp) {
   188fc:	f1b8 0f00 	cmp.w	r8, #0
   18900:	d12a      	bne.n	18958 <att_write_rsp.constprop.0+0xa0>
	data.conn = chan->att->conn;
   18902:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   18904:	4a1f      	ldr	r2, [pc, #124]	; (18984 <att_write_rsp.constprop.0+0xcc>)
	data.conn = chan->att->conn;
   18906:	681b      	ldr	r3, [r3, #0]
   18908:	9300      	str	r3, [sp, #0]
	data.value = value;
   1890a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1890c:	9303      	str	r3, [sp, #12]
	data.len = len;
   1890e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
   18912:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   18916:	2301      	movs	r3, #1
   18918:	f88d 3014 	strb.w	r3, [sp, #20]
	data.offset = offset;
   1891c:	f04f 0900 	mov.w	r9, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   18920:	466b      	mov	r3, sp
   18922:	4639      	mov	r1, r7
   18924:	4638      	mov	r0, r7
	data.req = req;
   18926:	f88d 6008 	strb.w	r6, [sp, #8]
	data.offset = offset;
   1892a:	f8ad 9012 	strh.w	r9, [sp, #18]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1892e:	f00d f8a6 	bl	25a7e <bt_gatt_foreach_attr>
	if (data.err) {
   18932:	f89d 5014 	ldrb.w	r5, [sp, #20]
   18936:	b1cd      	cbz	r5, 1896c <att_write_rsp.constprop.0+0xb4>
		if (rsp) {
   18938:	f1b8 0f00 	cmp.w	r8, #0
   1893c:	d0d2      	beq.n	188e4 <att_write_rsp.constprop.0+0x2c>
			net_buf_unref(data.buf);
   1893e:	9801      	ldr	r0, [sp, #4]
   18940:	f003 fd90 	bl	1c464 <net_buf_unref>
	if (!req) {
   18944:	2e00      	cmp	r6, #0
   18946:	d0cd      	beq.n	188e4 <att_write_rsp.constprop.0+0x2c>
   18948:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1894c:	463a      	mov	r2, r7
   1894e:	4631      	mov	r1, r6
   18950:	4620      	mov	r0, r4
   18952:	f00d fb23 	bl	25f9c <send_err_rsp.part.0>
   18956:	e7c5      	b.n	188e4 <att_write_rsp.constprop.0+0x2c>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   18958:	2200      	movs	r2, #0
   1895a:	4641      	mov	r1, r8
   1895c:	4620      	mov	r0, r4
   1895e:	f7ff fefb 	bl	18758 <bt_att_chan_create_pdu>
   18962:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   18964:	2800      	cmp	r0, #0
   18966:	d1cc      	bne.n	18902 <att_write_rsp.constprop.0+0x4a>
			return BT_ATT_ERR_UNLIKELY;
   18968:	250e      	movs	r5, #14
   1896a:	e7bc      	b.n	188e6 <att_write_rsp.constprop.0+0x2e>
	if (data.buf) {
   1896c:	9901      	ldr	r1, [sp, #4]
   1896e:	2900      	cmp	r1, #0
   18970:	d0b8      	beq.n	188e4 <att_write_rsp.constprop.0+0x2c>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   18972:	4620      	mov	r0, r4
   18974:	f7ff fede 	bl	18734 <bt_att_chan_send_rsp.constprop.0>
   18978:	e7b5      	b.n	188e6 <att_write_rsp.constprop.0+0x2e>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1897a:	2512      	movs	r5, #18
   1897c:	e7b3      	b.n	188e6 <att_write_rsp.constprop.0+0x2e>
		return BT_ATT_ERR_INVALID_HANDLE;
   1897e:	2501      	movs	r5, #1
   18980:	e7b1      	b.n	188e6 <att_write_rsp.constprop.0+0x2e>
   18982:	bf00      	nop
   18984:	00025b29 	.word	0x00025b29

00018988 <bt_att_create_pdu>:
{
   18988:	b570      	push	{r4, r5, r6, lr}
   1898a:	460e      	mov	r6, r1
   1898c:	4615      	mov	r5, r2
	att = att_get(conn);
   1898e:	f7ff fc03 	bl	18198 <att_get>
	if (!att) {
   18992:	b170      	cbz	r0, 189b2 <bt_att_create_pdu+0x2a>
	return list->head;
   18994:	6a80      	ldr	r0, [r0, #40]	; 0x28
   18996:	1c6a      	adds	r2, r5, #1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   18998:	b138      	cbz	r0, 189aa <bt_att_create_pdu+0x22>
	return node->next;
   1899a:	f850 39f4 	ldr.w	r3, [r0], #-244
   1899e:	b103      	cbz	r3, 189a2 <bt_att_create_pdu+0x1a>
   189a0:	3bf4      	subs	r3, #244	; 0xf4
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   189a2:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   189a4:	428a      	cmp	r2, r1
   189a6:	d906      	bls.n	189b6 <bt_att_create_pdu+0x2e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   189a8:	b95b      	cbnz	r3, 189c2 <bt_att_create_pdu+0x3a>
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
   189aa:	4809      	ldr	r0, [pc, #36]	; (189d0 <bt_att_create_pdu+0x48>)
   189ac:	2157      	movs	r1, #87	; 0x57
   189ae:	f00b fcfc 	bl	243aa <z_log_minimal_printk>
}
   189b2:	2000      	movs	r0, #0
   189b4:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   189b6:	462a      	mov	r2, r5
   189b8:	4631      	mov	r1, r6
}
   189ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   189be:	f7ff becb 	b.w	18758 <bt_att_chan_create_pdu>
   189c2:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   189c6:	b104      	cbz	r4, 189ca <bt_att_create_pdu+0x42>
   189c8:	3cf4      	subs	r4, #244	; 0xf4
{
   189ca:	4618      	mov	r0, r3
   189cc:	4623      	mov	r3, r4
   189ce:	e7e8      	b.n	189a2 <bt_att_create_pdu+0x1a>
   189d0:	0002a46d 	.word	0x0002a46d

000189d4 <att_read_group_req>:
{
   189d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   189d8:	898c      	ldrh	r4, [r1, #12]
   189da:	3c04      	subs	r4, #4
   189dc:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   189de:	2c02      	cmp	r4, #2
{
   189e0:	4605      	mov	r5, r0
   189e2:	b08c      	sub	sp, #48	; 0x30
   189e4:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   189e6:	d001      	beq.n	189ec <att_read_group_req+0x18>
   189e8:	2c10      	cmp	r4, #16
   189ea:	d16e      	bne.n	18aca <att_read_group_req+0xf6>
   189ec:	2104      	movs	r1, #4
   189ee:	3008      	adds	r0, #8
   189f0:	f003 fe30 	bl	1c654 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   189f4:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   189f8:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   189fa:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   189fc:	1d01      	adds	r1, r0, #4
   189fe:	4622      	mov	r2, r4
   18a00:	4640      	mov	r0, r8
   18a02:	f00c fb16 	bl	25032 <bt_uuid_create>
   18a06:	2800      	cmp	r0, #0
   18a08:	d061      	beq.n	18ace <att_read_group_req+0xfa>
	if (!start || !end) {
   18a0a:	2e00      	cmp	r6, #0
   18a0c:	d03a      	beq.n	18a84 <att_read_group_req+0xb0>
   18a0e:	2400      	movs	r4, #0
   18a10:	2f00      	cmp	r7, #0
   18a12:	d036      	beq.n	18a82 <att_read_group_req+0xae>
	if (start > end) {
   18a14:	42be      	cmp	r6, r7
   18a16:	d835      	bhi.n	18a84 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   18a18:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   18a1c:	a901      	add	r1, sp, #4
   18a1e:	4640      	mov	r0, r8
   18a20:	f88d 4004 	strb.w	r4, [sp, #4]
   18a24:	f8ad 3006 	strh.w	r3, [sp, #6]
   18a28:	f00c fad5 	bl	24fd6 <bt_uuid_cmp>
   18a2c:	2800      	cmp	r0, #0
   18a2e:	d134      	bne.n	18a9a <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
   18a30:	686c      	ldr	r4, [r5, #4]
	(void)memset(&data, 0, sizeof(data));
   18a32:	2214      	movs	r2, #20
   18a34:	2100      	movs	r1, #0
   18a36:	a807      	add	r0, sp, #28
   18a38:	f00f f831 	bl	27a9e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   18a3c:	2201      	movs	r2, #1
   18a3e:	2111      	movs	r1, #17
   18a40:	4620      	mov	r0, r4
   18a42:	f7ff ffa1 	bl	18988 <bt_att_create_pdu>
   18a46:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   18a48:	2800      	cmp	r0, #0
   18a4a:	d040      	beq.n	18ace <att_read_group_req+0xfa>
	return net_buf_simple_add(&buf->b, len);
   18a4c:	2101      	movs	r1, #1
   18a4e:	3008      	adds	r0, #8
	data.uuid = uuid;
   18a50:	e9cd 5807 	strd	r5, r8, [sp, #28]
   18a54:	f003 fe1c 	bl	1c690 <net_buf_simple_add>
	data.rsp->len = 0U;
   18a58:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   18a5c:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   18a5e:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
   18a60:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   18a64:	4a1b      	ldr	r2, [pc, #108]	; (18ad4 <att_read_group_req+0x100>)
	data.group = NULL;
   18a66:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   18a6a:	4639      	mov	r1, r7
   18a6c:	4630      	mov	r0, r6
   18a6e:	f00d f806 	bl	25a7e <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   18a72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   18a74:	781c      	ldrb	r4, [r3, #0]
   18a76:	bb1c      	cbnz	r4, 18ac0 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
   18a78:	9809      	ldr	r0, [sp, #36]	; 0x24
   18a7a:	f003 fcf3 	bl	1c464 <net_buf_unref>
	if (!req) {
   18a7e:	230a      	movs	r3, #10
   18a80:	e018      	b.n	18ab4 <att_read_group_req+0xe0>
			*err = 0U;
   18a82:	463e      	mov	r6, r7
	if (!req) {
   18a84:	2301      	movs	r3, #1
   18a86:	4632      	mov	r2, r6
   18a88:	2110      	movs	r1, #16
   18a8a:	4628      	mov	r0, r5
   18a8c:	f00d fa86 	bl	25f9c <send_err_rsp.part.0>
		return 0;
   18a90:	2400      	movs	r4, #0
}
   18a92:	4620      	mov	r0, r4
   18a94:	b00c      	add	sp, #48	; 0x30
   18a96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   18a9a:	f642 0301 	movw	r3, #10241	; 0x2801
   18a9e:	a907      	add	r1, sp, #28
   18aa0:	4640      	mov	r0, r8
   18aa2:	f88d 401c 	strb.w	r4, [sp, #28]
   18aa6:	f8ad 301e 	strh.w	r3, [sp, #30]
   18aaa:	f00c fa94 	bl	24fd6 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   18aae:	2800      	cmp	r0, #0
   18ab0:	d0be      	beq.n	18a30 <att_read_group_req+0x5c>
	if (!req) {
   18ab2:	2310      	movs	r3, #16
   18ab4:	4632      	mov	r2, r6
   18ab6:	2110      	movs	r1, #16
   18ab8:	4628      	mov	r0, r5
   18aba:	f00d fa6f 	bl	25f9c <send_err_rsp.part.0>
		return 0;
   18abe:	e7e8      	b.n	18a92 <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   18ac0:	9909      	ldr	r1, [sp, #36]	; 0x24
   18ac2:	4628      	mov	r0, r5
   18ac4:	f7ff fe36 	bl	18734 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   18ac8:	e7e2      	b.n	18a90 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
   18aca:	2404      	movs	r4, #4
   18acc:	e7e1      	b.n	18a92 <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
   18ace:	240e      	movs	r4, #14
   18ad0:	e7df      	b.n	18a92 <att_read_group_req+0xbe>
   18ad2:	bf00      	nop
   18ad4:	0001835d 	.word	0x0001835d

00018ad8 <att_read_mult_req>:
{
   18ad8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   18adc:	6846      	ldr	r6, [r0, #4]
{
   18ade:	b085      	sub	sp, #20
   18ae0:	4604      	mov	r4, r0
   18ae2:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   18ae4:	4630      	mov	r0, r6
   18ae6:	2101      	movs	r1, #1
   18ae8:	f00d fd9a 	bl	26620 <bt_gatt_change_aware>
   18aec:	b958      	cbnz	r0, 18b06 <att_read_mult_req+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   18aee:	2105      	movs	r1, #5
   18af0:	f104 0098 	add.w	r0, r4, #152	; 0x98
   18af4:	f00d f94c 	bl	25d90 <atomic_test_and_set_bit>
			return 0;
   18af8:	2800      	cmp	r0, #0
   18afa:	bf0c      	ite	eq
   18afc:	2012      	moveq	r0, #18
   18afe:	2000      	movne	r0, #0
}
   18b00:	b005      	add	sp, #20
   18b02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   18b06:	2210      	movs	r2, #16
   18b08:	2100      	movs	r1, #0
   18b0a:	4668      	mov	r0, sp
   18b0c:	f00e ffc7 	bl	27a9e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   18b10:	2200      	movs	r2, #0
   18b12:	210f      	movs	r1, #15
   18b14:	4630      	mov	r0, r6
   18b16:	f7ff ff37 	bl	18988 <bt_att_create_pdu>
   18b1a:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   18b1c:	b348      	cbz	r0, 18b72 <att_read_mult_req+0x9a>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   18b1e:	f8df 9058 	ldr.w	r9, [pc, #88]	; 18b78 <att_read_mult_req+0xa0>
	data.chan = chan;
   18b22:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   18b24:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   18b28:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   18b2c:	89ab      	ldrh	r3, [r5, #12]
   18b2e:	2b01      	cmp	r3, #1
   18b30:	d804      	bhi.n	18b3c <att_read_mult_req+0x64>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   18b32:	9902      	ldr	r1, [sp, #8]
   18b34:	4620      	mov	r0, r4
   18b36:	f7ff fdfd 	bl	18734 <bt_att_chan_send_rsp.constprop.0>
   18b3a:	e018      	b.n	18b6e <att_read_mult_req+0x96>
   18b3c:	4638      	mov	r0, r7
   18b3e:	f00e f9a1 	bl	26e84 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   18b42:	466b      	mov	r3, sp
   18b44:	464a      	mov	r2, r9
   18b46:	4601      	mov	r1, r0
   18b48:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   18b4a:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   18b4e:	f00c ff96 	bl	25a7e <bt_gatt_foreach_attr>
		if (data.err) {
   18b52:	f89d 300c 	ldrb.w	r3, [sp, #12]
   18b56:	2b00      	cmp	r3, #0
   18b58:	d0e8      	beq.n	18b2c <att_read_mult_req+0x54>
			net_buf_unref(data.buf);
   18b5a:	9802      	ldr	r0, [sp, #8]
   18b5c:	f003 fc82 	bl	1c464 <net_buf_unref>
	if (!req) {
   18b60:	f89d 300c 	ldrb.w	r3, [sp, #12]
   18b64:	4632      	mov	r2, r6
   18b66:	210e      	movs	r1, #14
   18b68:	4620      	mov	r0, r4
   18b6a:	f00d fa17 	bl	25f9c <send_err_rsp.part.0>
	return 0;
   18b6e:	2000      	movs	r0, #0
   18b70:	e7c6      	b.n	18b00 <att_read_mult_req+0x28>
		return BT_ATT_ERR_UNLIKELY;
   18b72:	200e      	movs	r0, #14
   18b74:	e7c4      	b.n	18b00 <att_read_mult_req+0x28>
   18b76:	bf00      	nop
   18b78:	00025dbb 	.word	0x00025dbb

00018b7c <att_read_rsp>:
{
   18b7c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   18b80:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   18b84:	4604      	mov	r4, r0
   18b86:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
   18b88:	4640      	mov	r0, r8
   18b8a:	2101      	movs	r1, #1
{
   18b8c:	4615      	mov	r5, r2
   18b8e:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
   18b90:	f00d fd46 	bl	26620 <bt_gatt_change_aware>
   18b94:	b960      	cbnz	r0, 18bb0 <att_read_rsp+0x34>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   18b96:	2105      	movs	r1, #5
   18b98:	f104 0098 	add.w	r0, r4, #152	; 0x98
   18b9c:	f00d f8f8 	bl	25d90 <atomic_test_and_set_bit>
			return 0;
   18ba0:	2800      	cmp	r0, #0
   18ba2:	bf0c      	ite	eq
   18ba4:	2512      	moveq	r5, #18
   18ba6:	2500      	movne	r5, #0
}
   18ba8:	4628      	mov	r0, r5
   18baa:	b004      	add	sp, #16
   18bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
   18bb0:	b36e      	cbz	r6, 18c0e <att_read_rsp+0x92>
	(void)memset(&data, 0, sizeof(data));
   18bb2:	2210      	movs	r2, #16
   18bb4:	2100      	movs	r1, #0
   18bb6:	4668      	mov	r0, sp
   18bb8:	f00e ff71 	bl	27a9e <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   18bbc:	2200      	movs	r2, #0
   18bbe:	4629      	mov	r1, r5
   18bc0:	4640      	mov	r0, r8
   18bc2:	f7ff fee1 	bl	18988 <bt_att_create_pdu>
   18bc6:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   18bc8:	b318      	cbz	r0, 18c12 <att_read_rsp+0x96>
	data.offset = offset;
   18bca:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   18bce:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   18bd2:	2301      	movs	r3, #1
   18bd4:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   18bd8:	4a0f      	ldr	r2, [pc, #60]	; (18c18 <att_read_rsp+0x9c>)
	data.chan = chan;
   18bda:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   18bdc:	466b      	mov	r3, sp
   18bde:	4631      	mov	r1, r6
   18be0:	4630      	mov	r0, r6
   18be2:	f00c ff4c 	bl	25a7e <bt_gatt_foreach_attr>
	if (data.err) {
   18be6:	f89d 500c 	ldrb.w	r5, [sp, #12]
   18bea:	b15d      	cbz	r5, 18c04 <att_read_rsp+0x88>
		net_buf_unref(data.buf);
   18bec:	9802      	ldr	r0, [sp, #8]
   18bee:	f003 fc39 	bl	1c464 <net_buf_unref>
	if (!req) {
   18bf2:	f89d 300c 	ldrb.w	r3, [sp, #12]
   18bf6:	4632      	mov	r2, r6
   18bf8:	4639      	mov	r1, r7
   18bfa:	4620      	mov	r0, r4
   18bfc:	f00d f9ce 	bl	25f9c <send_err_rsp.part.0>
		return 0;
   18c00:	2500      	movs	r5, #0
   18c02:	e7d1      	b.n	18ba8 <att_read_rsp+0x2c>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   18c04:	9902      	ldr	r1, [sp, #8]
   18c06:	4620      	mov	r0, r4
   18c08:	f7ff fd94 	bl	18734 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   18c0c:	e7cc      	b.n	18ba8 <att_read_rsp+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   18c0e:	2501      	movs	r5, #1
   18c10:	e7ca      	b.n	18ba8 <att_read_rsp+0x2c>
		return BT_ATT_ERR_UNLIKELY;
   18c12:	250e      	movs	r5, #14
   18c14:	e7c8      	b.n	18ba8 <att_read_rsp+0x2c>
   18c16:	bf00      	nop
   18c18:	00025dbb 	.word	0x00025dbb

00018c1c <att_read_type_req>:
{
   18c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   18c20:	898c      	ldrh	r4, [r1, #12]
   18c22:	3c04      	subs	r4, #4
   18c24:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   18c26:	2c02      	cmp	r4, #2
{
   18c28:	4605      	mov	r5, r0
   18c2a:	b08c      	sub	sp, #48	; 0x30
   18c2c:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   18c2e:	d001      	beq.n	18c34 <att_read_type_req+0x18>
   18c30:	2c10      	cmp	r4, #16
   18c32:	d14f      	bne.n	18cd4 <att_read_type_req+0xb8>
	return net_buf_simple_pull_mem(&buf->b, len);
   18c34:	2104      	movs	r1, #4
   18c36:	3008      	adds	r0, #8
   18c38:	f003 fd0c 	bl	1c654 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   18c3c:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   18c40:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   18c42:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   18c44:	1d01      	adds	r1, r0, #4
   18c46:	4622      	mov	r2, r4
   18c48:	4640      	mov	r0, r8
   18c4a:	f00c f9f2 	bl	25032 <bt_uuid_create>
   18c4e:	b188      	cbz	r0, 18c74 <att_read_type_req+0x58>
	if (!start || !end) {
   18c50:	b19e      	cbz	r6, 18c7a <att_read_type_req+0x5e>
   18c52:	b18f      	cbz	r7, 18c78 <att_read_type_req+0x5c>
	if (start > end) {
   18c54:	42b7      	cmp	r7, r6
   18c56:	d310      	bcc.n	18c7a <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   18c58:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   18c5a:	686c      	ldr	r4, [r5, #4]
	(void)memset(&data, 0, sizeof(data));
   18c5c:	2100      	movs	r1, #0
   18c5e:	eb0d 0002 	add.w	r0, sp, r2
   18c62:	f00e ff1c 	bl	27a9e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   18c66:	2201      	movs	r2, #1
   18c68:	2109      	movs	r1, #9
   18c6a:	4620      	mov	r0, r4
   18c6c:	f7ff fe8c 	bl	18988 <bt_att_create_pdu>
   18c70:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   18c72:	b968      	cbnz	r0, 18c90 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
   18c74:	240e      	movs	r4, #14
   18c76:	e007      	b.n	18c88 <att_read_type_req+0x6c>
			*err = 0U;
   18c78:	463e      	mov	r6, r7
	if (!req) {
   18c7a:	2301      	movs	r3, #1
   18c7c:	4632      	mov	r2, r6
   18c7e:	2108      	movs	r1, #8
   18c80:	4628      	mov	r0, r5
   18c82:	f00d f98b 	bl	25f9c <send_err_rsp.part.0>
		return 0;
   18c86:	2400      	movs	r4, #0
}
   18c88:	4620      	mov	r0, r4
   18c8a:	b00c      	add	sp, #48	; 0x30
   18c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   18c90:	2101      	movs	r1, #1
   18c92:	3008      	adds	r0, #8
	data.uuid = uuid;
   18c94:	e9cd 5806 	strd	r5, r8, [sp, #24]
   18c98:	f003 fcfa 	bl	1c690 <net_buf_simple_add>
	data.rsp->len = 0U;
   18c9c:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   18ca0:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   18ca2:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   18ca4:	4a0c      	ldr	r2, [pc, #48]	; (18cd8 <att_read_type_req+0xbc>)
	data.rsp->len = 0U;
   18ca6:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   18caa:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   18cac:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   18cb0:	4630      	mov	r0, r6
   18cb2:	ab06      	add	r3, sp, #24
   18cb4:	f00c fee3 	bl	25a7e <bt_gatt_foreach_attr>
	if (data.err) {
   18cb8:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   18cbc:	b12c      	cbz	r4, 18cca <att_read_type_req+0xae>
		net_buf_unref(data.buf);
   18cbe:	9808      	ldr	r0, [sp, #32]
   18cc0:	f003 fbd0 	bl	1c464 <net_buf_unref>
	if (!req) {
   18cc4:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   18cc8:	e7d8      	b.n	18c7c <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   18cca:	9908      	ldr	r1, [sp, #32]
   18ccc:	4628      	mov	r0, r5
   18cce:	f7ff fd31 	bl	18734 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   18cd2:	e7d9      	b.n	18c88 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
   18cd4:	2404      	movs	r4, #4
   18cd6:	e7d7      	b.n	18c88 <att_read_type_req+0x6c>
   18cd8:	000184dd 	.word	0x000184dd

00018cdc <att_find_type_req>:
{
   18cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18ce0:	4688      	mov	r8, r1
   18ce2:	b086      	sub	sp, #24
   18ce4:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   18ce6:	2106      	movs	r1, #6
   18ce8:	f108 0008 	add.w	r0, r8, #8
   18cec:	f003 fcb2 	bl	1c654 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   18cf0:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
   18cf2:	b317      	cbz	r7, 18d3a <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
   18cf4:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
   18cf8:	f1b9 0f00 	cmp.w	r9, #0
   18cfc:	d01c      	beq.n	18d38 <att_find_type_req+0x5c>
	if (start > end) {
   18cfe:	454f      	cmp	r7, r9
   18d00:	d81b      	bhi.n	18d3a <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
   18d02:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   18d04:	f8ad 3002 	strh.w	r3, [sp, #2]
   18d08:	2400      	movs	r4, #0
   18d0a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   18d0e:	a901      	add	r1, sp, #4
   18d10:	4668      	mov	r0, sp
	value = buf->data;
   18d12:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   18d16:	f88d 4000 	strb.w	r4, [sp]
   18d1a:	f88d 4004 	strb.w	r4, [sp, #4]
   18d1e:	f8ad 3006 	strh.w	r3, [sp, #6]
   18d22:	f00c f958 	bl	24fd6 <bt_uuid_cmp>
   18d26:	4606      	mov	r6, r0
   18d28:	b190      	cbz	r0, 18d50 <att_find_type_req+0x74>
	if (!req) {
   18d2a:	230a      	movs	r3, #10
   18d2c:	463a      	mov	r2, r7
   18d2e:	2106      	movs	r1, #6
   18d30:	4628      	mov	r0, r5
   18d32:	f00d f933 	bl	25f9c <send_err_rsp.part.0>
		return 0;
   18d36:	e007      	b.n	18d48 <att_find_type_req+0x6c>
			*err = 0U;
   18d38:	464f      	mov	r7, r9
	if (!req) {
   18d3a:	2301      	movs	r3, #1
   18d3c:	463a      	mov	r2, r7
   18d3e:	2106      	movs	r1, #6
   18d40:	4628      	mov	r0, r5
   18d42:	f00d f92b 	bl	25f9c <send_err_rsp.part.0>
		return 0;
   18d46:	2400      	movs	r4, #0
}
   18d48:	4620      	mov	r0, r4
   18d4a:	b006      	add	sp, #24
   18d4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   18d50:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
   18d54:	f8d5 8004 	ldr.w	r8, [r5, #4]
	(void)memset(&data, 0, sizeof(data));
   18d58:	4601      	mov	r1, r0
   18d5a:	2214      	movs	r2, #20
   18d5c:	a801      	add	r0, sp, #4
   18d5e:	f00e fe9e 	bl	27a9e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   18d62:	4632      	mov	r2, r6
   18d64:	2107      	movs	r1, #7
   18d66:	4640      	mov	r0, r8
   18d68:	f7ff fe0e 	bl	18988 <bt_att_create_pdu>
   18d6c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   18d6e:	b1d8      	cbz	r0, 18da8 <att_find_type_req+0xcc>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   18d70:	230a      	movs	r3, #10
   18d72:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   18d76:	4a0d      	ldr	r2, [pc, #52]	; (18dac <att_find_type_req+0xd0>)
	data.value_len = value_len;
   18d78:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   18d7c:	ab01      	add	r3, sp, #4
   18d7e:	4649      	mov	r1, r9
   18d80:	4638      	mov	r0, r7
	data.value = value;
   18d82:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
   18d86:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   18d88:	f00c fe79 	bl	25a7e <bt_gatt_foreach_attr>
	if (data.err) {
   18d8c:	f89d 4015 	ldrb.w	r4, [sp, #21]
   18d90:	b12c      	cbz	r4, 18d9e <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
   18d92:	9802      	ldr	r0, [sp, #8]
   18d94:	f003 fb66 	bl	1c464 <net_buf_unref>
	if (!req) {
   18d98:	f89d 3015 	ldrb.w	r3, [sp, #21]
   18d9c:	e7ce      	b.n	18d3c <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   18d9e:	9902      	ldr	r1, [sp, #8]
   18da0:	4628      	mov	r0, r5
   18da2:	f7ff fcc7 	bl	18734 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   18da6:	e7cf      	b.n	18d48 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   18da8:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   18daa:	e7cd      	b.n	18d48 <att_find_type_req+0x6c>
   18dac:	00018219 	.word	0x00018219

00018db0 <att_find_info_req>:
{
   18db0:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   18db2:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   18db4:	881e      	ldrh	r6, [r3, #0]
{
   18db6:	b085      	sub	sp, #20
   18db8:	4605      	mov	r5, r0
	if (!start || !end) {
   18dba:	b19e      	cbz	r6, 18de4 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
   18dbc:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
   18dbe:	b184      	cbz	r4, 18de2 <att_find_info_req+0x32>
	if (start > end) {
   18dc0:	42b4      	cmp	r4, r6
   18dc2:	d30f      	bcc.n	18de4 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   18dc4:	6847      	ldr	r7, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   18dc6:	2210      	movs	r2, #16
   18dc8:	2100      	movs	r1, #0
   18dca:	4668      	mov	r0, sp
   18dcc:	f00e fe67 	bl	27a9e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   18dd0:	2200      	movs	r2, #0
   18dd2:	2105      	movs	r1, #5
   18dd4:	4638      	mov	r0, r7
   18dd6:	f7ff fdd7 	bl	18988 <bt_att_create_pdu>
   18dda:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   18ddc:	b958      	cbnz	r0, 18df6 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   18dde:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   18de0:	e007      	b.n	18df2 <att_find_info_req+0x42>
			*err = 0U;
   18de2:	4626      	mov	r6, r4
	if (!req) {
   18de4:	2301      	movs	r3, #1
   18de6:	4632      	mov	r2, r6
   18de8:	2104      	movs	r1, #4
   18dea:	4628      	mov	r0, r5
   18dec:	f00d f8d6 	bl	25f9c <send_err_rsp.part.0>
	return 0;
   18df0:	2000      	movs	r0, #0
}
   18df2:	b005      	add	sp, #20
   18df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   18df6:	4621      	mov	r1, r4
   18df8:	4a08      	ldr	r2, [pc, #32]	; (18e1c <att_find_info_req+0x6c>)
	data.chan = chan;
   18dfa:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   18dfc:	466b      	mov	r3, sp
   18dfe:	4630      	mov	r0, r6
   18e00:	f00c fe3d 	bl	25a7e <bt_gatt_foreach_attr>
	if (!data.rsp) {
   18e04:	9c02      	ldr	r4, [sp, #8]
   18e06:	b924      	cbnz	r4, 18e12 <att_find_info_req+0x62>
		net_buf_unref(data.buf);
   18e08:	9801      	ldr	r0, [sp, #4]
   18e0a:	f003 fb2b 	bl	1c464 <net_buf_unref>
	if (!req) {
   18e0e:	230a      	movs	r3, #10
   18e10:	e7e9      	b.n	18de6 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   18e12:	9901      	ldr	r1, [sp, #4]
   18e14:	4628      	mov	r0, r5
   18e16:	f7ff fc8d 	bl	18734 <bt_att_chan_send_rsp.constprop.0>
   18e1a:	e7e9      	b.n	18df0 <att_find_info_req+0x40>
   18e1c:	00025b8d 	.word	0x00025b8d

00018e20 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   18e20:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_att_req *req = NULL;
   18e22:	2300      	movs	r3, #0
{
   18e24:	4605      	mov	r5, r0
   18e26:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   18e28:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   18e2a:	f009 fc05 	bl	22638 <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   18e2e:	4b0b      	ldr	r3, [pc, #44]	; (18e5c <bt_att_req_alloc+0x3c>)
   18e30:	681b      	ldr	r3, [r3, #0]
   18e32:	4283      	cmp	r3, r0
		/* No req will be fulfilled while blocking on the bt_recv thread.
		 * Blocking would cause deadlock.
		 */
		timeout = K_NO_WAIT;
   18e34:	bf04      	itt	eq
   18e36:	2500      	moveq	r5, #0
   18e38:	462c      	moveq	r4, r5
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   18e3a:	a901      	add	r1, sp, #4
   18e3c:	4808      	ldr	r0, [pc, #32]	; (18e60 <bt_att_req_alloc+0x40>)
   18e3e:	462a      	mov	r2, r5
   18e40:	4623      	mov	r3, r4
   18e42:	f007 fa71 	bl	20328 <k_mem_slab_alloc>
   18e46:	4601      	mov	r1, r0
   18e48:	b930      	cbnz	r0, 18e58 <bt_att_req_alloc+0x38>
   18e4a:	9801      	ldr	r0, [sp, #4]
   18e4c:	221c      	movs	r2, #28
   18e4e:	f00e fe26 	bl	27a9e <memset>

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));

	return req;
   18e52:	9801      	ldr	r0, [sp, #4]
}
   18e54:	b003      	add	sp, #12
   18e56:	bd30      	pop	{r4, r5, pc}
		return NULL;
   18e58:	2000      	movs	r0, #0
   18e5a:	e7fb      	b.n	18e54 <bt_att_req_alloc+0x34>
   18e5c:	20001f70 	.word	0x20001f70
   18e60:	2000085c 	.word	0x2000085c

00018e64 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   18e64:	b507      	push	{r0, r1, r2, lr}
   18e66:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
   18e68:	6880      	ldr	r0, [r0, #8]
   18e6a:	b120      	cbz	r0, 18e76 <bt_att_req_free+0x12>
		net_buf_unref(req->buf);
   18e6c:	f003 fafa 	bl	1c464 <net_buf_unref>
		req->buf = NULL;
   18e70:	9b01      	ldr	r3, [sp, #4]
   18e72:	2200      	movs	r2, #0
   18e74:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   18e76:	4803      	ldr	r0, [pc, #12]	; (18e84 <bt_att_req_free+0x20>)
   18e78:	a901      	add	r1, sp, #4
   18e7a:	f007 faaf 	bl	203dc <k_mem_slab_free>
}
   18e7e:	b003      	add	sp, #12
   18e80:	f85d fb04 	ldr.w	pc, [sp], #4
   18e84:	2000085c 	.word	0x2000085c

00018e88 <att_handle_rsp>:
{
   18e88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18e8c:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
   18e8e:	30c0      	adds	r0, #192	; 0xc0
{
   18e90:	4689      	mov	r9, r1
   18e92:	4692      	mov	sl, r2
   18e94:	4698      	mov	r8, r3
	k_work_cancel_delayable(&chan->timeout_work);
   18e96:	f008 fbbd 	bl	21614 <k_work_cancel_delayable>
	if (!chan->req) {
   18e9a:	f8d4 509c 	ldr.w	r5, [r4, #156]	; 0x9c
   18e9e:	2700      	movs	r7, #0
   18ea0:	b9a5      	cbnz	r5, 18ecc <att_handle_rsp+0x44>
		BT_WARN("No pending ATT request");
   18ea2:	4813      	ldr	r0, [pc, #76]	; (18ef0 <att_handle_rsp+0x68>)
   18ea4:	2157      	movs	r1, #87	; 0x57
   18ea6:	f00b fa80 	bl	243aa <z_log_minimal_printk>
	bt_att_func_t func = NULL;
   18eaa:	462e      	mov	r6, r5
	att_req_send_process(chan->att);
   18eac:	6820      	ldr	r0, [r4, #0]
   18eae:	f00c fffa 	bl	25ea6 <att_req_send_process>
	if (func) {
   18eb2:	b13e      	cbz	r6, 18ec4 <att_handle_rsp+0x3c>
		func(chan->att->conn, err, pdu, len, params);
   18eb4:	6820      	ldr	r0, [r4, #0]
   18eb6:	f8cd b000 	str.w	fp, [sp]
   18eba:	6800      	ldr	r0, [r0, #0]
   18ebc:	4653      	mov	r3, sl
   18ebe:	464a      	mov	r2, r9
   18ec0:	4641      	mov	r1, r8
   18ec2:	47b0      	blx	r6
}
   18ec4:	2000      	movs	r0, #0
   18ec6:	b003      	add	sp, #12
   18ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (chan->req == &cancel) {
   18ecc:	4b09      	ldr	r3, [pc, #36]	; (18ef4 <att_handle_rsp+0x6c>)
   18ece:	429d      	cmp	r5, r3
   18ed0:	d103      	bne.n	18eda <att_handle_rsp+0x52>
		chan->req = NULL;
   18ed2:	f8c4 709c 	str.w	r7, [r4, #156]	; 0x9c
	bt_att_func_t func = NULL;
   18ed6:	463e      	mov	r6, r7
		goto process;
   18ed8:	e7e8      	b.n	18eac <att_handle_rsp+0x24>
	func = chan->req->func;
   18eda:	686e      	ldr	r6, [r5, #4]
	chan->req->func = NULL;
   18edc:	606f      	str	r7, [r5, #4]
	bt_att_req_free(chan->req);
   18ede:	4628      	mov	r0, r5
	params = chan->req->user_data;
   18ee0:	f8d5 b018 	ldr.w	fp, [r5, #24]
	bt_att_req_free(chan->req);
   18ee4:	f7ff ffbe 	bl	18e64 <bt_att_req_free>
	chan->req = NULL;
   18ee8:	f8c4 709c 	str.w	r7, [r4, #156]	; 0x9c
   18eec:	e7de      	b.n	18eac <att_handle_rsp+0x24>
   18eee:	bf00      	nop
   18ef0:	0002a48d 	.word	0x0002a48d
   18ef4:	20001f74 	.word	0x20001f74

00018ef8 <bt_att_disconnected>:
{
   18ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att *att = att_chan->att;
   18efa:	f850 5c04 	ldr.w	r5, [r0, #-4]
{
   18efe:	b085      	sub	sp, #20
   18f00:	4604      	mov	r4, r0
	if (!att_chan->att) {
   18f02:	2d00      	cmp	r5, #0
   18f04:	d04c      	beq.n	18fa0 <bt_att_disconnected+0xa8>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   18f06:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
   18f0a:	f105 0028 	add.w	r0, r5, #40	; 0x28
   18f0e:	f00c ff17 	bl	25d40 <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   18f12:	1f26      	subs	r6, r4, #4
   18f14:	f104 079c 	add.w	r7, r4, #156	; 0x9c
   18f18:	2200      	movs	r2, #0
   18f1a:	2300      	movs	r3, #0
   18f1c:	4638      	mov	r0, r7
   18f1e:	f003 f951 	bl	1c1c4 <net_buf_get>
   18f22:	4602      	mov	r2, r0
   18f24:	bb18      	cbnz	r0, 18f6e <bt_att_disconnected+0x76>
	if (chan->req) {
   18f26:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   18f2a:	b123      	cbz	r3, 18f36 <bt_att_disconnected+0x3e>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   18f2c:	4601      	mov	r1, r0
   18f2e:	230e      	movs	r3, #14
   18f30:	4630      	mov	r0, r6
   18f32:	f7ff ffa9 	bl	18e88 <att_handle_rsp>
	chan->att = NULL;
   18f36:	2300      	movs	r3, #0
   18f38:	f844 3c04 	str.w	r3, [r4, #-4]
	if (!sys_slist_is_empty(&att->chans)) {
   18f3c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   18f3e:	2b00      	cmp	r3, #0
   18f40:	d12e      	bne.n	18fa0 <bt_att_disconnected+0xa8>
	att_reset(att);
   18f42:	9503      	str	r5, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   18f44:	9803      	ldr	r0, [sp, #12]
   18f46:	2200      	movs	r2, #0
   18f48:	2300      	movs	r3, #0
   18f4a:	300c      	adds	r0, #12
   18f4c:	f003 f93a 	bl	1c1c4 <net_buf_get>
   18f50:	b980      	cbnz	r0, 18f74 <bt_att_disconnected+0x7c>
	while (!sys_slist_is_empty(&att->reqs)) {
   18f52:	9803      	ldr	r0, [sp, #12]
	return list->head;
   18f54:	6845      	ldr	r5, [r0, #4]
   18f56:	b985      	cbnz	r5, 18f7a <bt_att_disconnected+0x82>
	att->conn = NULL;
   18f58:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   18f5a:	a903      	add	r1, sp, #12
   18f5c:	4811      	ldr	r0, [pc, #68]	; (18fa4 <bt_att_disconnected+0xac>)
   18f5e:	f007 fa3d 	bl	203dc <k_mem_slab_free>
	bt_gatt_disconnected(le_chan->chan.conn);
   18f62:	6820      	ldr	r0, [r4, #0]
}
   18f64:	b005      	add	sp, #20
   18f66:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_gatt_disconnected(le_chan->chan.conn);
   18f6a:	f001 baa5 	b.w	1a4b8 <bt_gatt_disconnected>
		net_buf_unref(buf);
   18f6e:	f003 fa79 	bl	1c464 <net_buf_unref>
   18f72:	e7d1      	b.n	18f18 <bt_att_disconnected+0x20>
		net_buf_unref(buf);
   18f74:	f003 fa76 	bl	1c464 <net_buf_unref>
   18f78:	e7e4      	b.n	18f44 <bt_att_disconnected+0x4c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   18f7a:	6882      	ldr	r2, [r0, #8]
		if (req->func) {
   18f7c:	686e      	ldr	r6, [r5, #4]
	return node->next;
   18f7e:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   18f80:	6043      	str	r3, [r0, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   18f82:	4295      	cmp	r5, r2
	list->tail = node;
   18f84:	bf08      	it	eq
   18f86:	6083      	streq	r3, [r0, #8]
   18f88:	b136      	cbz	r6, 18f98 <bt_att_disconnected+0xa0>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   18f8a:	69ab      	ldr	r3, [r5, #24]
   18f8c:	9300      	str	r3, [sp, #0]
   18f8e:	2300      	movs	r3, #0
   18f90:	6800      	ldr	r0, [r0, #0]
   18f92:	461a      	mov	r2, r3
   18f94:	210e      	movs	r1, #14
   18f96:	47b0      	blx	r6
		bt_att_req_free(req);
   18f98:	4628      	mov	r0, r5
   18f9a:	f7ff ff63 	bl	18e64 <bt_att_req_free>
   18f9e:	e7d8      	b.n	18f52 <bt_att_disconnected+0x5a>
}
   18fa0:	b005      	add	sp, #20
   18fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18fa4:	2000081c 	.word	0x2000081c

00018fa8 <att_timeout>:
{
   18fa8:	b510      	push	{r4, lr}
	BT_ERR("ATT Timeout");
   18faa:	2145      	movs	r1, #69	; 0x45
{
   18fac:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
   18fae:	4804      	ldr	r0, [pc, #16]	; (18fc0 <att_timeout+0x18>)
   18fb0:	f00b f9fb 	bl	243aa <z_log_minimal_printk>
	bt_att_disconnected(&chan->chan.chan);
   18fb4:	f1a4 00bc 	sub.w	r0, r4, #188	; 0xbc
}
   18fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   18fbc:	f7ff bf9c 	b.w	18ef8 <bt_att_disconnected>
   18fc0:	0002a4a9 	.word	0x0002a4a9

00018fc4 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   18fc4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   18fc8:	460c      	mov	r4, r1
   18fca:	4617      	mov	r7, r2
   18fcc:	4698      	mov	r8, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
   18fce:	4605      	mov	r5, r0
   18fd0:	b950      	cbnz	r0, 18fe8 <bt_att_send+0x24>
   18fd2:	492b      	ldr	r1, [pc, #172]	; (19080 <bt_att_send+0xbc>)
   18fd4:	482b      	ldr	r0, [pc, #172]	; (19084 <bt_att_send+0xc0>)
   18fd6:	f640 5281 	movw	r2, #3457	; 0xd81
   18fda:	f00b f9d8 	bl	2438e <assert_print>
   18fde:	4828      	ldr	r0, [pc, #160]	; (19080 <bt_att_send+0xbc>)
   18fe0:	f640 5181 	movw	r1, #3457	; 0xd81
   18fe4:	f00b f9cc 	bl	24380 <assert_post_action>
	__ASSERT_NO_MSG(buf);
   18fe8:	b954      	cbnz	r4, 19000 <bt_att_send+0x3c>
   18fea:	4925      	ldr	r1, [pc, #148]	; (19080 <bt_att_send+0xbc>)
   18fec:	4825      	ldr	r0, [pc, #148]	; (19084 <bt_att_send+0xc0>)
   18fee:	f640 5282 	movw	r2, #3458	; 0xd82
   18ff2:	f00b f9cc 	bl	2438e <assert_print>
   18ff6:	4822      	ldr	r0, [pc, #136]	; (19080 <bt_att_send+0xbc>)
   18ff8:	f640 5182 	movw	r1, #3458	; 0xd82
   18ffc:	f00b f9c0 	bl	24380 <assert_post_action>

	att = att_get(conn);
   19000:	4628      	mov	r0, r5
   19002:	f7ff f8c9 	bl	18198 <att_get>
	if (!att) {
   19006:	4606      	mov	r6, r0
   19008:	b938      	cbnz	r0, 1901a <bt_att_send+0x56>
		net_buf_unref(buf);
   1900a:	4620      	mov	r0, r4
   1900c:	f003 fa2a 	bl	1c464 <net_buf_unref>
		return -ENOTCONN;
   19010:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   19014:	b002      	add	sp, #8
   19016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   1901a:	b147      	cbz	r7, 1902e <bt_att_send+0x6a>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   1901c:	f8cd 8000 	str.w	r8, [sp]
   19020:	463b      	mov	r3, r7
   19022:	4622      	mov	r2, r4
   19024:	2104      	movs	r1, #4
   19026:	4628      	mov	r0, r5
   19028:	f00c fc8c 	bl	25944 <bt_l2cap_send_cb>
   1902c:	e7f2      	b.n	19014 <bt_att_send+0x50>
	net_buf_put(&att->tx_queue, buf);
   1902e:	f100 070c 	add.w	r7, r0, #12
   19032:	4621      	mov	r1, r4
   19034:	4638      	mov	r0, r7
   19036:	f003 f9e7 	bl	1c408 <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   1903a:	2200      	movs	r2, #0
   1903c:	2300      	movs	r3, #0
   1903e:	4638      	mov	r0, r7
   19040:	f003 f8c0 	bl	1c1c4 <net_buf_get>
	if (!buf) {
   19044:	4605      	mov	r5, r0
   19046:	b908      	cbnz	r0, 1904c <bt_att_send+0x88>
	return 0;
   19048:	2000      	movs	r0, #0
   1904a:	e7e3      	b.n	19014 <bt_att_send+0x50>
	return list->head;
   1904c:	6ab0      	ldr	r0, [r6, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1904e:	b188      	cbz	r0, 19074 <bt_att_send+0xb0>
	return node->next;
   19050:	f850 49f4 	ldr.w	r4, [r0], #-244
   19054:	b104      	cbz	r4, 19058 <bt_att_send+0x94>
   19056:	3cf4      	subs	r4, #244	; 0xf4
	return chan_send(chan, buf, cb);
   19058:	2200      	movs	r2, #0
   1905a:	4629      	mov	r1, r5
   1905c:	f7ff fabc 	bl	185d8 <chan_send>
		if (err >= 0) {
   19060:	2800      	cmp	r0, #0
   19062:	daf1      	bge.n	19048 <bt_att_send+0x84>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   19064:	b134      	cbz	r4, 19074 <bt_att_send+0xb0>
   19066:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   1906a:	b103      	cbz	r3, 1906e <bt_att_send+0xaa>
   1906c:	3bf4      	subs	r3, #244	; 0xf4
{
   1906e:	4620      	mov	r0, r4
   19070:	461c      	mov	r4, r3
   19072:	e7f1      	b.n	19058 <bt_att_send+0x94>
		k_queue_prepend(&att->tx_queue._queue, buf);
   19074:	4629      	mov	r1, r5
   19076:	4638      	mov	r0, r7
   19078:	f00e fb45 	bl	27706 <k_queue_prepend>
   1907c:	e7e4      	b.n	19048 <bt_att_send+0x84>
   1907e:	bf00      	nop
   19080:	0002a2b8 	.word	0x0002a2b8
   19084:	000289af 	.word	0x000289af

00019088 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   19088:	b538      	push	{r3, r4, r5, lr}
   1908a:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
   1908c:	4605      	mov	r5, r0
   1908e:	b950      	cbnz	r0, 190a6 <bt_att_req_send+0x1e>
   19090:	4915      	ldr	r1, [pc, #84]	; (190e8 <bt_att_req_send+0x60>)
   19092:	4816      	ldr	r0, [pc, #88]	; (190ec <bt_att_req_send+0x64>)
   19094:	f640 529e 	movw	r2, #3486	; 0xd9e
   19098:	f00b f979 	bl	2438e <assert_print>
   1909c:	4812      	ldr	r0, [pc, #72]	; (190e8 <bt_att_req_send+0x60>)
   1909e:	f640 519e 	movw	r1, #3486	; 0xd9e
   190a2:	f00b f96d 	bl	24380 <assert_post_action>
	__ASSERT_NO_MSG(req);
   190a6:	b954      	cbnz	r4, 190be <bt_att_req_send+0x36>
   190a8:	490f      	ldr	r1, [pc, #60]	; (190e8 <bt_att_req_send+0x60>)
   190aa:	4810      	ldr	r0, [pc, #64]	; (190ec <bt_att_req_send+0x64>)
   190ac:	f640 529f 	movw	r2, #3487	; 0xd9f
   190b0:	f00b f96d 	bl	2438e <assert_print>
   190b4:	480c      	ldr	r0, [pc, #48]	; (190e8 <bt_att_req_send+0x60>)
   190b6:	f640 519f 	movw	r1, #3487	; 0xd9f
   190ba:	f00b f961 	bl	24380 <assert_post_action>

	att = att_get(conn);
   190be:	4628      	mov	r0, r5
   190c0:	f7ff f86a 	bl	18198 <att_get>
	if (!att) {
   190c4:	b160      	cbz	r0, 190e0 <bt_att_req_send+0x58>
	parent->next = child;
   190c6:	2300      	movs	r3, #0
   190c8:	6023      	str	r3, [r4, #0]
	return list->tail;
   190ca:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   190cc:	b92b      	cbnz	r3, 190da <bt_att_req_send+0x52>
	list->head = node;
   190ce:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   190d2:	f00c fee8 	bl	25ea6 <att_req_send_process>

	return 0;
   190d6:	2000      	movs	r0, #0
}
   190d8:	bd38      	pop	{r3, r4, r5, pc}
	parent->next = child;
   190da:	601c      	str	r4, [r3, #0]
	list->tail = node;
   190dc:	6084      	str	r4, [r0, #8]
}
   190de:	e7f8      	b.n	190d2 <bt_att_req_send+0x4a>
		return -ENOTCONN;
   190e0:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   190e4:	e7f8      	b.n	190d8 <bt_att_req_send+0x50>
   190e6:	bf00      	nop
   190e8:	0002a2b8 	.word	0x0002a2b8
   190ec:	000289af 	.word	0x000289af

000190f0 <db_hash_set>:

SETTINGS_STATIC_HANDLER_DEFINE(bt_cf, "bt/cf", NULL, cf_set, NULL, NULL);

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
   190f0:	b510      	push	{r4, lr}
	ssize_t len;

	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   190f2:	4908      	ldr	r1, [pc, #32]	; (19114 <db_hash_set+0x24>)
{
   190f4:	4614      	mov	r4, r2
	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   190f6:	4618      	mov	r0, r3
   190f8:	2210      	movs	r2, #16
   190fa:	47a0      	blx	r4
	if (len < 0) {
   190fc:	1e04      	subs	r4, r0, #0
   190fe:	da06      	bge.n	1910e <db_hash_set+0x1e>
		BT_ERR("Failed to decode value (err %zd)", len);
   19100:	4805      	ldr	r0, [pc, #20]	; (19118 <db_hash_set+0x28>)
   19102:	4622      	mov	r2, r4
   19104:	2145      	movs	r1, #69	; 0x45
   19106:	f00b f950 	bl	243aa <z_log_minimal_printk>

	BT_HEXDUMP_DBG(db_hash.stored_hash, sizeof(db_hash.stored_hash),
		       "Stored Hash: ");

	return 0;
}
   1910a:	4620      	mov	r0, r4
   1910c:	bd10      	pop	{r4, pc}
	return 0;
   1910e:	2400      	movs	r4, #0
   19110:	e7fb      	b.n	1910a <db_hash_set+0x1a>
   19112:	bf00      	nop
   19114:	20001830 	.word	0x20001830
   19118:	0002a4c1 	.word	0x0002a4c1

0001911c <db_hash_store>:
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   1911c:	2210      	movs	r2, #16
{
   1911e:	b508      	push	{r3, lr}
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   19120:	4906      	ldr	r1, [pc, #24]	; (1913c <db_hash_store+0x20>)
   19122:	4807      	ldr	r0, [pc, #28]	; (19140 <db_hash_store+0x24>)
   19124:	f7fa fc04 	bl	13930 <settings_save_one>
	if (err) {
   19128:	4602      	mov	r2, r0
   1912a:	b128      	cbz	r0, 19138 <db_hash_store+0x1c>
}
   1912c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save Database Hash (err %d)", err);
   19130:	4804      	ldr	r0, [pc, #16]	; (19144 <db_hash_store+0x28>)
   19132:	2145      	movs	r1, #69	; 0x45
   19134:	f00b b939 	b.w	243aa <z_log_minimal_printk>
}
   19138:	bd08      	pop	{r3, pc}
   1913a:	bf00      	nop
   1913c:	20001820 	.word	0x20001820
   19140:	0002a4e7 	.word	0x0002a4e7
   19144:	0002a4ef 	.word	0x0002a4ef

00019148 <find_cf_cfg>:
{
   19148:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1914a:	4d0f      	ldr	r5, [pc, #60]	; (19188 <find_cf_cfg+0x40>)
   1914c:	4604      	mov	r4, r0
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1914e:	2700      	movs	r7, #0
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   19150:	462e      	mov	r6, r5
		if (!conn) {
   19152:	1c68      	adds	r0, r5, #1
   19154:	b964      	cbnz	r4, 19170 <find_cf_cfg+0x28>
   19156:	2207      	movs	r2, #7
   19158:	4669      	mov	r1, sp
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1915a:	9400      	str	r4, [sp, #0]
   1915c:	f8cd 4003 	str.w	r4, [sp, #3]
   19160:	f00e fc6c 	bl	27a3c <memcmp>
   19164:	b958      	cbnz	r0, 1917e <find_cf_cfg+0x36>
}
   19166:	4630      	mov	r0, r6
   19168:	b003      	add	sp, #12
   1916a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1916c:	2701      	movs	r7, #1
   1916e:	e7ef      	b.n	19150 <find_cf_cfg+0x8>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   19170:	4602      	mov	r2, r0
   19172:	7829      	ldrb	r1, [r5, #0]
   19174:	4620      	mov	r0, r4
   19176:	f00c fb5b 	bl	25830 <bt_conn_is_peer_addr_le>
   1917a:	2800      	cmp	r0, #0
   1917c:	d1f3      	bne.n	19166 <find_cf_cfg+0x1e>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1917e:	3510      	adds	r5, #16
   19180:	2f00      	cmp	r7, #0
   19182:	d0f3      	beq.n	1916c <find_cf_cfg+0x24>
	return NULL;
   19184:	2600      	movs	r6, #0
   19186:	e7ee      	b.n	19166 <find_cf_cfg+0x1e>
   19188:	20001f98 	.word	0x20001f98

0001918c <sc_store>:
{
   1918c:	b570      	push	{r4, r5, r6, lr}
	if (cfg->id) {
   1918e:	4605      	mov	r5, r0
{
   19190:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
   19192:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   19196:	4604      	mov	r4, r0
	if (cfg->id) {
   19198:	b1ca      	cbz	r2, 191ce <sc_store+0x42>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
   1919a:	ae02      	add	r6, sp, #8
   1919c:	2104      	movs	r1, #4
   1919e:	4630      	mov	r0, r6
   191a0:	f00a feb0 	bl	23f04 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
   191a4:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
   191a6:	4a0b      	ldr	r2, [pc, #44]	; (191d4 <sc_store+0x48>)
   191a8:	462b      	mov	r3, r5
   191aa:	2124      	movs	r1, #36	; 0x24
   191ac:	a803      	add	r0, sp, #12
   191ae:	f7fb fe93 	bl	14ed8 <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
   191b2:	2204      	movs	r2, #4
   191b4:	f104 0108 	add.w	r1, r4, #8
   191b8:	a803      	add	r0, sp, #12
   191ba:	f7fa fbb9 	bl	13930 <settings_save_one>
	if (err) {
   191be:	4602      	mov	r2, r0
   191c0:	b118      	cbz	r0, 191ca <sc_store+0x3e>
		BT_ERR("failed to store SC (err %d)", err);
   191c2:	4805      	ldr	r0, [pc, #20]	; (191d8 <sc_store+0x4c>)
   191c4:	2145      	movs	r1, #69	; 0x45
   191c6:	f00b f8f0 	bl	243aa <z_log_minimal_printk>
}
   191ca:	b00c      	add	sp, #48	; 0x30
   191cc:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
   191ce:	9200      	str	r2, [sp, #0]
   191d0:	e7e9      	b.n	191a6 <sc_store+0x1a>
   191d2:	bf00      	nop
   191d4:	0002a83a 	.word	0x0002a83a
   191d8:	0002a51a 	.word	0x0002a51a

000191dc <db_hash_commit>:

static int db_hash_commit(void)
{
   191dc:	b508      	push	{r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   191de:	2108      	movs	r1, #8
   191e0:	4804      	ldr	r0, [pc, #16]	; (191f4 <db_hash_commit+0x18>)
   191e2:	f00d f857 	bl	26294 <atomic_or>
	atomic_set_bit(gatt_sc.flags, DB_HASH_LOAD);
	/* Reschedule work to calculate and compare against the Hash value
	 * loaded from flash.
	 */
	k_work_reschedule(&db_hash.work, K_NO_WAIT);
   191e6:	2200      	movs	r2, #0
   191e8:	2300      	movs	r3, #0
   191ea:	4803      	ldr	r0, [pc, #12]	; (191f8 <db_hash_commit+0x1c>)
   191ec:	f008 fa0c 	bl	21608 <k_work_reschedule>

	return 0;
}
   191f0:	2000      	movs	r0, #0
   191f2:	bd08      	pop	{r3, pc}
   191f4:	20001920 	.word	0x20001920
   191f8:	20001840 	.word	0x20001840

000191fc <cf_write>:
{
   191fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19200:	4698      	mov	r8, r3
   19202:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   19206:	2b01      	cmp	r3, #1
{
   19208:	4606      	mov	r6, r0
   1920a:	4617      	mov	r7, r2
	if (offset > sizeof(cfg->data)) {
   1920c:	d837      	bhi.n	1927e <cf_write+0x82>
	if (offset + len > sizeof(cfg->data)) {
   1920e:	4443      	add	r3, r8
   19210:	2b01      	cmp	r3, #1
   19212:	4645      	mov	r5, r8
   19214:	dc36      	bgt.n	19284 <cf_write+0x88>
	cfg = find_cf_cfg(conn);
   19216:	f7ff ff97 	bl	19148 <find_cf_cfg>
	if (!cfg) {
   1921a:	4604      	mov	r4, r0
   1921c:	b918      	cbnz	r0, 19226 <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
   1921e:	f7ff ff93 	bl	19148 <find_cf_cfg>
	if (!cfg) {
   19222:	4604      	mov	r4, r0
   19224:	b180      	cbz	r0, 19248 <cf_write+0x4c>
{
   19226:	2100      	movs	r1, #0
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   19228:	f1b8 0f00 	cmp.w	r8, #0
   1922c:	d115      	bne.n	1925a <cf_write+0x5e>
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1922e:	f106 0190 	add.w	r1, r6, #144	; 0x90
   19232:	1c60      	adds	r0, r4, #1
   19234:	f00d f84c 	bl	262d0 <bt_addr_le_copy>
	cfg->id = conn->id;
   19238:	4620      	mov	r0, r4
   1923a:	7a33      	ldrb	r3, [r6, #8]
   1923c:	f800 3b0c 	strb.w	r3, [r0], #12
   19240:	2101      	movs	r1, #1
   19242:	f00d f827 	bl	26294 <atomic_or>
}
   19246:	e005      	b.n	19254 <cf_write+0x58>
		BT_WARN("No space to store Client Supported Features");
   19248:	4811      	ldr	r0, [pc, #68]	; (19290 <cf_write+0x94>)
   1924a:	2157      	movs	r1, #87	; 0x57
   1924c:	f00b f8ad 	bl	243aa <z_log_minimal_printk>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   19250:	f06f 0510 	mvn.w	r5, #16
}
   19254:	4628      	mov	r0, r5
   19256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1925a:	7a20      	ldrb	r0, [r4, #8]
   1925c:	fa20 f301 	lsr.w	r3, r0, r1
   19260:	07da      	lsls	r2, r3, #31
   19262:	d503      	bpl.n	1926c <cf_write+0x70>
		    !(value[i / 8] & BIT(i % 8))) {
   19264:	783b      	ldrb	r3, [r7, #0]
   19266:	40cb      	lsrs	r3, r1
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   19268:	07db      	lsls	r3, r3, #31
   1926a:	d50e      	bpl.n	1928a <cf_write+0x8e>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1926c:	3101      	adds	r1, #1
   1926e:	2903      	cmp	r1, #3
   19270:	d1da      	bne.n	19228 <cf_write+0x2c>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   19272:	783b      	ldrb	r3, [r7, #0]
   19274:	f003 0307 	and.w	r3, r3, #7
   19278:	4318      	orrs	r0, r3
   1927a:	7220      	strb	r0, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   1927c:	e7d7      	b.n	1922e <cf_write+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1927e:	f06f 0506 	mvn.w	r5, #6
   19282:	e7e7      	b.n	19254 <cf_write+0x58>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   19284:	f06f 050c 	mvn.w	r5, #12
   19288:	e7e4      	b.n	19254 <cf_write+0x58>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1928a:	f06f 0512 	mvn.w	r5, #18
   1928e:	e7e1      	b.n	19254 <cf_write+0x58>
   19290:	0002a53b 	.word	0x0002a53b

00019294 <sc_commit>:
{
   19294:	b508      	push	{r3, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   19296:	4809      	ldr	r0, [pc, #36]	; (192bc <sc_commit+0x28>)
   19298:	f06f 0102 	mvn.w	r1, #2
   1929c:	f00d f809 	bl	262b2 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   192a0:	4806      	ldr	r0, [pc, #24]	; (192bc <sc_commit+0x28>)
   192a2:	f00c fff1 	bl	26288 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   192a6:	07c3      	lsls	r3, r0, #31
   192a8:	d505      	bpl.n	192b6 <sc_commit+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   192aa:	4805      	ldr	r0, [pc, #20]	; (192c0 <sc_commit+0x2c>)
   192ac:	f44f 72a4 	mov.w	r2, #328	; 0x148
   192b0:	2300      	movs	r3, #0
   192b2:	f008 f9a9 	bl	21608 <k_work_reschedule>
}
   192b6:	2000      	movs	r0, #0
   192b8:	bd08      	pop	{r3, pc}
   192ba:	bf00      	nop
   192bc:	20001920 	.word	0x20001920
   192c0:	200018f0 	.word	0x200018f0

000192c4 <find_cf_cfg_by_addr>:
{
   192c4:	b570      	push	{r4, r5, r6, lr}
			if (id == cf_cfg[i].id &&
   192c6:	4c0e      	ldr	r4, [pc, #56]	; (19300 <find_cf_cfg_by_addr+0x3c>)
   192c8:	7823      	ldrb	r3, [r4, #0]
   192ca:	4283      	cmp	r3, r0
{
   192cc:	4606      	mov	r6, r0
   192ce:	460d      	mov	r5, r1
			if (id == cf_cfg[i].id &&
   192d0:	d00a      	beq.n	192e8 <find_cf_cfg_by_addr+0x24>
   192d2:	7c23      	ldrb	r3, [r4, #16]
   192d4:	42b3      	cmp	r3, r6
   192d6:	d111      	bne.n	192fc <find_cf_cfg_by_addr+0x38>
   192d8:	490a      	ldr	r1, [pc, #40]	; (19304 <find_cf_cfg_by_addr+0x40>)
   192da:	2207      	movs	r2, #7
   192dc:	4628      	mov	r0, r5
   192de:	f00e fbad 	bl	27a3c <memcmp>
   192e2:	b958      	cbnz	r0, 192fc <find_cf_cfg_by_addr+0x38>
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   192e4:	2001      	movs	r0, #1
   192e6:	e006      	b.n	192f6 <find_cf_cfg_by_addr+0x32>
   192e8:	2207      	movs	r2, #7
   192ea:	1c61      	adds	r1, r4, #1
   192ec:	4628      	mov	r0, r5
   192ee:	f00e fba5 	bl	27a3c <memcmp>
			if (id == cf_cfg[i].id &&
   192f2:	2800      	cmp	r0, #0
   192f4:	d1ed      	bne.n	192d2 <find_cf_cfg_by_addr+0xe>
				return &cf_cfg[i];
   192f6:	eb04 1000 	add.w	r0, r4, r0, lsl #4
   192fa:	e000      	b.n	192fe <find_cf_cfg_by_addr+0x3a>
	return NULL;
   192fc:	2000      	movs	r0, #0
}
   192fe:	bd70      	pop	{r4, r5, r6, pc}
   19300:	20001f98 	.word	0x20001f98
   19304:	20001fa9 	.word	0x20001fa9

00019308 <cf_set>:
{
   19308:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1930c:	4688      	mov	r8, r1
   1930e:	4616      	mov	r6, r2
   19310:	461f      	mov	r7, r3
	if (!name) {
   19312:	4605      	mov	r5, r0
   19314:	b948      	cbnz	r0, 1932a <cf_set+0x22>
		BT_ERR("Insufficient number of arguments");
   19316:	4828      	ldr	r0, [pc, #160]	; (193b8 <cf_set+0xb0>)
   19318:	2145      	movs	r1, #69	; 0x45
   1931a:	f00b f846 	bl	243aa <z_log_minimal_printk>
		return -EINVAL;
   1931e:	f06f 0415 	mvn.w	r4, #21
}
   19322:	4620      	mov	r0, r4
   19324:	b004      	add	sp, #16
   19326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_settings_decode_key(name, &addr);
   1932a:	a902      	add	r1, sp, #8
   1932c:	f00b fe2f 	bl	24f8e <bt_settings_decode_key>
	if (err) {
   19330:	4604      	mov	r4, r0
   19332:	b128      	cbz	r0, 19340 <cf_set+0x38>
		BT_ERR("Unable to decode address %s", log_strdup(name));
   19334:	4821      	ldr	r0, [pc, #132]	; (193bc <cf_set+0xb4>)
   19336:	462a      	mov	r2, r5
   19338:	2145      	movs	r1, #69	; 0x45
   1933a:	f00b f836 	bl	243aa <z_log_minimal_printk>
   1933e:	e7ee      	b.n	1931e <cf_set+0x16>
	settings_name_next(name, &next);
   19340:	a901      	add	r1, sp, #4
   19342:	4628      	mov	r0, r5
   19344:	f00b fad2 	bl	248ec <settings_name_next>
	if (!next) {
   19348:	9801      	ldr	r0, [sp, #4]
   1934a:	b140      	cbz	r0, 1935e <cf_set+0x56>
		unsigned long next_id = strtoul(next, NULL, 10);
   1934c:	220a      	movs	r2, #10
   1934e:	4621      	mov	r1, r4
   19350:	f00a fdb2 	bl	23eb8 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   19354:	4602      	mov	r2, r0
   19356:	b110      	cbz	r0, 1935e <cf_set+0x56>
			BT_ERR("Invalid local identity %lu", next_id);
   19358:	4819      	ldr	r0, [pc, #100]	; (193c0 <cf_set+0xb8>)
   1935a:	2145      	movs	r1, #69	; 0x45
   1935c:	e7ed      	b.n	1933a <cf_set+0x32>
	cfg = find_cf_cfg_by_addr(id, &addr);
   1935e:	a902      	add	r1, sp, #8
   19360:	2000      	movs	r0, #0
   19362:	f7ff ffaf 	bl	192c4 <find_cf_cfg_by_addr>
	if (!cfg) {
   19366:	4605      	mov	r5, r0
   19368:	b980      	cbnz	r0, 1938c <cf_set+0x84>
		cfg = find_cf_cfg(NULL);
   1936a:	f7ff feed 	bl	19148 <find_cf_cfg>
		if (!cfg) {
   1936e:	4605      	mov	r5, r0
   19370:	b930      	cbnz	r0, 19380 <cf_set+0x78>
			BT_ERR("Unable to restore CF: no cfg left");
   19372:	4814      	ldr	r0, [pc, #80]	; (193c4 <cf_set+0xbc>)
   19374:	2145      	movs	r1, #69	; 0x45
   19376:	f00b f818 	bl	243aa <z_log_minimal_printk>
			return -ENOMEM;
   1937a:	f06f 040b 	mvn.w	r4, #11
   1937e:	e7d0      	b.n	19322 <cf_set+0x1a>
		cfg->id = id;
   19380:	2300      	movs	r3, #0
   19382:	f800 3b01 	strb.w	r3, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   19386:	a902      	add	r1, sp, #8
   19388:	f00c ffa2 	bl	262d0 <bt_addr_le_copy>
	if (len_rd) {
   1938c:	f1b8 0f00 	cmp.w	r8, #0
   19390:	d00d      	beq.n	193ae <cf_set+0xa6>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
   19392:	f105 0108 	add.w	r1, r5, #8
   19396:	2201      	movs	r2, #1
   19398:	4638      	mov	r0, r7
   1939a:	47b0      	blx	r6
		if (len < 0) {
   1939c:	1e05      	subs	r5, r0, #0
   1939e:	dac0      	bge.n	19322 <cf_set+0x1a>
			BT_ERR("Failed to decode value (err %zd)", len);
   193a0:	4809      	ldr	r0, [pc, #36]	; (193c8 <cf_set+0xc0>)
   193a2:	462a      	mov	r2, r5
   193a4:	2145      	movs	r1, #69	; 0x45
   193a6:	f00b f800 	bl	243aa <z_log_minimal_printk>
			return len;
   193aa:	462c      	mov	r4, r5
   193ac:	e7b9      	b.n	19322 <cf_set+0x1a>
		clear_cf_cfg(cfg);
   193ae:	4628      	mov	r0, r5
   193b0:	f00d f833 	bl	2641a <clear_cf_cfg>
   193b4:	e7b5      	b.n	19322 <cf_set+0x1a>
   193b6:	bf00      	nop
   193b8:	0002937c 	.word	0x0002937c
   193bc:	0002a56c 	.word	0x0002a56c
   193c0:	0002a58d 	.word	0x0002a58d
   193c4:	0002a5ad 	.word	0x0002a5ad
   193c8:	0002a4c1 	.word	0x0002a4c1

000193cc <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
   193cc:	b508      	push	{r3, lr}
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
   193ce:	6881      	ldr	r1, [r0, #8]
{
   193d0:	4613      	mov	r3, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   193d2:	4a07      	ldr	r2, [pc, #28]	; (193f0 <remove_peer_from_attr+0x24>)
   193d4:	4291      	cmp	r1, r2
   193d6:	d109      	bne.n	193ec <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
   193d8:	791a      	ldrb	r2, [r3, #4]
   193da:	6819      	ldr	r1, [r3, #0]
   193dc:	68c0      	ldr	r0, [r0, #12]
   193de:	f00d f835 	bl	2644c <ccc_find_cfg>
	if (cfg) {
   193e2:	b118      	cbz	r0, 193ec <remove_peer_from_attr+0x20>
   193e4:	2300      	movs	r3, #0
   193e6:	6003      	str	r3, [r0, #0]
   193e8:	6043      	str	r3, [r0, #4]
   193ea:	8103      	strh	r3, [r0, #8]
		memset(cfg, 0, sizeof(*cfg));
	}

	return BT_GATT_ITER_CONTINUE;
}
   193ec:	2001      	movs	r0, #1
   193ee:	bd08      	pop	{r3, pc}
   193f0:	000194b5 	.word	0x000194b5

000193f4 <ccc_load>:
{
   193f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   193f6:	4b20      	ldr	r3, [pc, #128]	; (19478 <ccc_load+0x84>)
{
   193f8:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   193fa:	6882      	ldr	r2, [r0, #8]
   193fc:	429a      	cmp	r2, r3
   193fe:	d002      	beq.n	19406 <ccc_load+0x12>
		return BT_GATT_ITER_CONTINUE;
   19400:	2001      	movs	r0, #1
}
   19402:	b003      	add	sp, #12
   19404:	bd30      	pop	{r4, r5, pc}
	if (!load->entry) {
   19406:	68a3      	ldr	r3, [r4, #8]
   19408:	68c5      	ldr	r5, [r0, #12]
   1940a:	b94b      	cbnz	r3, 19420 <ccc_load+0x2c>
	cfg = ccc_find_cfg(ccc, addr, id);
   1940c:	7922      	ldrb	r2, [r4, #4]
   1940e:	6821      	ldr	r1, [r4, #0]
   19410:	4628      	mov	r0, r5
   19412:	f00d f81b 	bl	2644c <ccc_find_cfg>
	if (!cfg) {
   19416:	2800      	cmp	r0, #0
   19418:	d0f2      	beq.n	19400 <ccc_load+0xc>
	clear_ccc_cfg(cfg);
   1941a:	f00c ff60 	bl	262de <clear_ccc_cfg>
   1941e:	e7ef      	b.n	19400 <ccc_load+0xc>
	} else if (!load->count) {
   19420:	68e0      	ldr	r0, [r4, #12]
   19422:	2800      	cmp	r0, #0
   19424:	d0ed      	beq.n	19402 <ccc_load+0xe>
	if (load->entry->handle != handle) {
   19426:	881b      	ldrh	r3, [r3, #0]
   19428:	4299      	cmp	r1, r3
   1942a:	d00a      	beq.n	19442 <ccc_load+0x4e>
		if (load->entry->handle < handle) {
   1942c:	d9e8      	bls.n	19400 <ccc_load+0xc>
	load->count--;
   1942e:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
   19430:	68a3      	ldr	r3, [r4, #8]
	load->count--;
   19432:	3801      	subs	r0, #1
	load->entry++;
   19434:	3304      	adds	r3, #4
	load->count--;
   19436:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   19438:	3800      	subs	r0, #0
	load->entry++;
   1943a:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1943c:	bf18      	it	ne
   1943e:	2001      	movne	r0, #1
   19440:	e7df      	b.n	19402 <ccc_load+0xe>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
   19442:	7922      	ldrb	r2, [r4, #4]
   19444:	6821      	ldr	r1, [r4, #0]
   19446:	4628      	mov	r0, r5
   19448:	f00d f800 	bl	2644c <ccc_find_cfg>
	if (!cfg) {
   1944c:	4602      	mov	r2, r0
   1944e:	b978      	cbnz	r0, 19470 <ccc_load+0x7c>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
   19450:	9000      	str	r0, [sp, #0]
   19452:	4669      	mov	r1, sp
   19454:	f8cd 0003 	str.w	r0, [sp, #3]
   19458:	4628      	mov	r0, r5
   1945a:	f00c fff7 	bl	2644c <ccc_find_cfg>
		if (!cfg) {
   1945e:	4602      	mov	r2, r0
   19460:	2800      	cmp	r0, #0
   19462:	d0e4      	beq.n	1942e <ccc_load+0x3a>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
   19464:	6821      	ldr	r1, [r4, #0]
   19466:	3001      	adds	r0, #1
   19468:	f00c ff32 	bl	262d0 <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
   1946c:	7923      	ldrb	r3, [r4, #4]
   1946e:	7013      	strb	r3, [r2, #0]
	cfg->value = load->entry->value;
   19470:	68a3      	ldr	r3, [r4, #8]
   19472:	885b      	ldrh	r3, [r3, #2]
   19474:	8113      	strh	r3, [r2, #8]
   19476:	e7da      	b.n	1942e <ccc_load+0x3a>
   19478:	000194b5 	.word	0x000194b5

0001947c <ccc_save>:
{
   1947c:	b538      	push	{r3, r4, r5, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1947e:	4b0c      	ldr	r3, [pc, #48]	; (194b0 <ccc_save+0x34>)
{
   19480:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   19482:	6882      	ldr	r2, [r0, #8]
   19484:	429a      	cmp	r2, r3
{
   19486:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
   19488:	d10f      	bne.n	194aa <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
   1948a:	7922      	ldrb	r2, [r4, #4]
   1948c:	6821      	ldr	r1, [r4, #0]
   1948e:	68c0      	ldr	r0, [r0, #12]
   19490:	f00c ffdc 	bl	2644c <ccc_find_cfg>
	if (!cfg) {
   19494:	b148      	cbz	r0, 194aa <ccc_save+0x2e>
	save->store[save->count].handle = handle;
   19496:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
	save->store[save->count].value = cfg->value;
   1949a:	8901      	ldrh	r1, [r0, #8]
   1949c:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->count++;
   194a0:	3301      	adds	r3, #1
	save->store[save->count].handle = handle;
   194a2:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
   194a4:	8151      	strh	r1, [r2, #10]
	save->count++;
   194a6:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
   194aa:	2001      	movs	r0, #1
   194ac:	bd38      	pop	{r3, r4, r5, pc}
   194ae:	bf00      	nop
   194b0:	000194b5 	.word	0x000194b5

000194b4 <bt_gatt_attr_write_ccc>:
{
   194b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   194b8:	4698      	mov	r8, r3
   194ba:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
   194be:	f8d1 a00c 	ldr.w	sl, [r1, #12]
{
   194c2:	4606      	mov	r6, r0
   194c4:	4689      	mov	r9, r1
	if (offset) {
   194c6:	2b00      	cmp	r3, #0
   194c8:	d164      	bne.n	19594 <bt_gatt_attr_write_ccc+0xe0>
	if (!len || len > sizeof(uint16_t)) {
   194ca:	f108 33ff 	add.w	r3, r8, #4294967295
   194ce:	2b01      	cmp	r3, #1
   194d0:	d863      	bhi.n	1959a <bt_gatt_attr_write_ccc+0xe6>
		value = *(uint8_t *)buf;
   194d2:	7817      	ldrb	r7, [r2, #0]
	if (len < sizeof(uint16_t)) {
   194d4:	f1b8 0f01 	cmp.w	r8, #1
	cfg = find_ccc_cfg(conn, ccc);
   194d8:	4651      	mov	r1, sl
   194da:	bf14      	ite	ne
   194dc:	8817      	ldrhne	r7, [r2, #0]
		value = *(uint8_t *)buf;
   194de:	b2bf      	uxtheq	r7, r7
	cfg = find_ccc_cfg(conn, ccc);
   194e0:	f00c ffc3 	bl	2646a <find_ccc_cfg>
	if (!cfg) {
   194e4:	4605      	mov	r5, r0
   194e6:	b9b0      	cbnz	r0, 19516 <bt_gatt_attr_write_ccc+0x62>
		if (!value) {
   194e8:	b917      	cbnz	r7, 194f0 <bt_gatt_attr_write_ccc+0x3c>
			return len;
   194ea:	4640      	mov	r0, r8
}
   194ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   194f0:	4651      	mov	r1, sl
   194f2:	f00c ffba 	bl	2646a <find_ccc_cfg>
		if (!cfg) {
   194f6:	4605      	mov	r5, r0
   194f8:	b930      	cbnz	r0, 19508 <bt_gatt_attr_write_ccc+0x54>
			BT_WARN("No space to store CCC cfg");
   194fa:	4829      	ldr	r0, [pc, #164]	; (195a0 <bt_gatt_attr_write_ccc+0xec>)
   194fc:	2157      	movs	r1, #87	; 0x57
   194fe:	f00a ff54 	bl	243aa <z_log_minimal_printk>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   19502:	f06f 0010 	mvn.w	r0, #16
   19506:	e7f1      	b.n	194ec <bt_gatt_attr_write_ccc+0x38>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   19508:	f106 0190 	add.w	r1, r6, #144	; 0x90
   1950c:	3001      	adds	r0, #1
   1950e:	f00c fedf 	bl	262d0 <bt_addr_le_copy>
		cfg->id = conn->id;
   19512:	7a33      	ldrb	r3, [r6, #8]
   19514:	702b      	strb	r3, [r5, #0]
	if (ccc->cfg_write) {
   19516:	f8da 3010 	ldr.w	r3, [sl, #16]
   1951a:	bb7b      	cbnz	r3, 1957c <bt_gatt_attr_write_ccc+0xc8>
	if (cfg->value != ccc->value) {
   1951c:	f8ba 300a 	ldrh.w	r3, [sl, #10]
	value_changed = cfg->value != value;
   19520:	892c      	ldrh	r4, [r5, #8]
	cfg->value = value;
   19522:	812f      	strh	r7, [r5, #8]
	if (cfg->value != ccc->value) {
   19524:	42bb      	cmp	r3, r7
   19526:	d003      	beq.n	19530 <bt_gatt_attr_write_ccc+0x7c>
		gatt_ccc_changed(attr, ccc);
   19528:	4651      	mov	r1, sl
   1952a:	4648      	mov	r0, r9
   1952c:	f00c fe34 	bl	26198 <gatt_ccc_changed>
	if (value_changed) {
   19530:	42bc      	cmp	r4, r7
   19532:	d01d      	beq.n	19570 <bt_gatt_attr_write_ccc+0xbc>
	return (conn == gatt_ccc_store.conn_list[bt_conn_index(conn)]);
   19534:	4630      	mov	r0, r6
   19536:	f7fe f951 	bl	177dc <bt_conn_index>
   1953a:	4c1a      	ldr	r4, [pc, #104]	; (195a4 <bt_gatt_attr_write_ccc+0xf0>)
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   1953c:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]
   19540:	429e      	cmp	r6, r3
   19542:	d015      	beq.n	19570 <bt_gatt_attr_write_ccc+0xbc>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   19544:	7a30      	ldrb	r0, [r6, #8]
   19546:	f106 0190 	add.w	r1, r6, #144	; 0x90
   1954a:	f00b febc 	bl	252c6 <bt_addr_le_is_bonded>
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   1954e:	b178      	cbz	r0, 19570 <bt_gatt_attr_write_ccc+0xbc>
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   19550:	4630      	mov	r0, r6
   19552:	f7fe f943 	bl	177dc <bt_conn_index>
   19556:	4681      	mov	r9, r0
			bt_conn_ref(conn);
   19558:	4630      	mov	r0, r6
   1955a:	f00c f8cd 	bl	256f8 <bt_conn_ref>
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   1955e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   19562:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   19566:	2300      	movs	r3, #0
   19568:	f104 0008 	add.w	r0, r4, #8
   1956c:	f008 f84c 	bl	21608 <k_work_reschedule>
	if (!value) {
   19570:	2f00      	cmp	r7, #0
   19572:	d1ba      	bne.n	194ea <bt_gatt_attr_write_ccc+0x36>
		clear_ccc_cfg(cfg);
   19574:	4628      	mov	r0, r5
   19576:	f00c feb2 	bl	262de <clear_ccc_cfg>
   1957a:	e7b6      	b.n	194ea <bt_gatt_attr_write_ccc+0x36>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   1957c:	463a      	mov	r2, r7
   1957e:	4649      	mov	r1, r9
   19580:	4630      	mov	r0, r6
   19582:	4798      	blx	r3
		if (write < 0) {
   19584:	2800      	cmp	r0, #0
   19586:	dbb1      	blt.n	194ec <bt_gatt_attr_write_ccc+0x38>
		if (write != sizeof(value) && write != 1) {
   19588:	1e44      	subs	r4, r0, #1
   1958a:	2c01      	cmp	r4, #1
   1958c:	d9c6      	bls.n	1951c <bt_gatt_attr_write_ccc+0x68>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   1958e:	f06f 000d 	mvn.w	r0, #13
   19592:	e7ab      	b.n	194ec <bt_gatt_attr_write_ccc+0x38>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   19594:	f06f 0006 	mvn.w	r0, #6
   19598:	e7a8      	b.n	194ec <bt_gatt_attr_write_ccc+0x38>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1959a:	f06f 000c 	mvn.w	r0, #12
   1959e:	e7a5      	b.n	194ec <bt_gatt_attr_write_ccc+0x38>
   195a0:	0002a5d4 	.word	0x0002a5d4
   195a4:	20001898 	.word	0x20001898

000195a8 <find_sc_cfg>:
{
   195a8:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
   195aa:	4c0e      	ldr	r4, [pc, #56]	; (195e4 <find_sc_cfg+0x3c>)
   195ac:	7823      	ldrb	r3, [r4, #0]
   195ae:	4283      	cmp	r3, r0
{
   195b0:	4605      	mov	r5, r0
   195b2:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
   195b4:	d00a      	beq.n	195cc <find_sc_cfg+0x24>
   195b6:	7b23      	ldrb	r3, [r4, #12]
   195b8:	42ab      	cmp	r3, r5
   195ba:	d111      	bne.n	195e0 <find_sc_cfg+0x38>
   195bc:	480a      	ldr	r0, [pc, #40]	; (195e8 <find_sc_cfg+0x40>)
   195be:	2207      	movs	r2, #7
   195c0:	4631      	mov	r1, r6
   195c2:	f00e fa3b 	bl	27a3c <memcmp>
   195c6:	b958      	cbnz	r0, 195e0 <find_sc_cfg+0x38>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   195c8:	2001      	movs	r0, #1
   195ca:	e005      	b.n	195d8 <find_sc_cfg+0x30>
   195cc:	2207      	movs	r2, #7
   195ce:	1c60      	adds	r0, r4, #1
   195d0:	f00e fa34 	bl	27a3c <memcmp>
		if (id == sc_cfg[i].id &&
   195d4:	2800      	cmp	r0, #0
   195d6:	d1ee      	bne.n	195b6 <find_sc_cfg+0xe>
			return &sc_cfg[i];
   195d8:	230c      	movs	r3, #12
   195da:	fb03 4000 	mla	r0, r3, r0, r4
   195de:	e000      	b.n	195e2 <find_sc_cfg+0x3a>
	return NULL;
   195e0:	2000      	movs	r0, #0
}
   195e2:	bd70      	pop	{r4, r5, r6, pc}
   195e4:	200022f0 	.word	0x200022f0
   195e8:	200022fd 	.word	0x200022fd

000195ec <sc_save>:
{
   195ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   195f0:	4680      	mov	r8, r0
   195f2:	460f      	mov	r7, r1
   195f4:	4616      	mov	r6, r2
   195f6:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   195f8:	f7ff ffd6 	bl	195a8 <find_sc_cfg>
	if (!cfg) {
   195fc:	4604      	mov	r4, r0
   195fe:	b998      	cbnz	r0, 19628 <sc_save+0x3c>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   19600:	4669      	mov	r1, sp
   19602:	9000      	str	r0, [sp, #0]
   19604:	f8cd 0003 	str.w	r0, [sp, #3]
   19608:	f7ff ffce 	bl	195a8 <find_sc_cfg>
		if (!cfg) {
   1960c:	4604      	mov	r4, r0
   1960e:	b930      	cbnz	r0, 1961e <sc_save+0x32>
			BT_ERR("unable to save SC: no cfg left");
   19610:	4813      	ldr	r0, [pc, #76]	; (19660 <sc_save+0x74>)
   19612:	2145      	movs	r1, #69	; 0x45
   19614:	f00a fec9 	bl	243aa <z_log_minimal_printk>
}
   19618:	b002      	add	sp, #8
   1961a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
   1961e:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   19622:	4639      	mov	r1, r7
   19624:	f00c fe54 	bl	262d0 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   19628:	8922      	ldrh	r2, [r4, #8]
   1962a:	8963      	ldrh	r3, [r4, #10]
   1962c:	b97a      	cbnz	r2, 1964e <sc_save+0x62>
   1962e:	b983      	cbnz	r3, 19652 <sc_save+0x66>
		cfg->data.start = start;
   19630:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   19632:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
   19634:	4621      	mov	r1, r4
   19636:	f811 0b01 	ldrb.w	r0, [r1], #1
   1963a:	f00b fe44 	bl	252c6 <bt_addr_le_is_bonded>
   1963e:	2800      	cmp	r0, #0
   19640:	d0ea      	beq.n	19618 <sc_save+0x2c>
		sc_store(cfg);
   19642:	4620      	mov	r0, r4
}
   19644:	b002      	add	sp, #8
   19646:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		sc_store(cfg);
   1964a:	f7ff bd9f 	b.w	1918c <sc_store>
	if (new_start >= *start && new_end <= *end) {
   1964e:	4296      	cmp	r6, r2
   19650:	d302      	bcc.n	19658 <sc_save+0x6c>
   19652:	429d      	cmp	r5, r3
   19654:	d8ed      	bhi.n	19632 <sc_save+0x46>
   19656:	e7df      	b.n	19618 <sc_save+0x2c>
	if (*end < new_end) {
   19658:	429d      	cmp	r5, r3
		*start = new_start;
   1965a:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   1965c:	d9ea      	bls.n	19634 <sc_save+0x48>
   1965e:	e7e8      	b.n	19632 <sc_save+0x46>
   19660:	0002a5f3 	.word	0x0002a5f3

00019664 <bt_gatt_clear_sc>:
{
   19664:	b570      	push	{r4, r5, r6, lr}
   19666:	b08c      	sub	sp, #48	; 0x30
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   19668:	f7ff ff9e 	bl	195a8 <find_sc_cfg>
	if (!cfg) {
   1966c:	4604      	mov	r4, r0
   1966e:	b1d8      	cbz	r0, 196a8 <bt_gatt_clear_sc+0x44>
		if (cfg->id) {
   19670:	4605      	mov	r5, r0
   19672:	f815 2b01 	ldrb.w	r2, [r5], #1
   19676:	b1d2      	cbz	r2, 196ae <bt_gatt_clear_sc+0x4a>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
   19678:	ae02      	add	r6, sp, #8
   1967a:	2104      	movs	r1, #4
   1967c:	4630      	mov	r0, r6
   1967e:	f00a fc41 	bl	23f04 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
   19682:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
   19684:	4a0b      	ldr	r2, [pc, #44]	; (196b4 <bt_gatt_clear_sc+0x50>)
   19686:	462b      	mov	r3, r5
   19688:	2124      	movs	r1, #36	; 0x24
   1968a:	a803      	add	r0, sp, #12
   1968c:	f7fb fc24 	bl	14ed8 <bt_settings_encode_key>
		err = settings_delete(key);
   19690:	a803      	add	r0, sp, #12
   19692:	f00b f904 	bl	2489e <settings_delete>
		if (err) {
   19696:	4602      	mov	r2, r0
   19698:	b118      	cbz	r0, 196a2 <bt_gatt_clear_sc+0x3e>
			BT_ERR("failed to delete SC (err %d)", err);
   1969a:	4807      	ldr	r0, [pc, #28]	; (196b8 <bt_gatt_clear_sc+0x54>)
   1969c:	2145      	movs	r1, #69	; 0x45
   1969e:	f00a fe84 	bl	243aa <z_log_minimal_printk>
	clear_sc_cfg(cfg);
   196a2:	4620      	mov	r0, r4
   196a4:	f00c fe29 	bl	262fa <clear_sc_cfg>
}
   196a8:	2000      	movs	r0, #0
   196aa:	b00c      	add	sp, #48	; 0x30
   196ac:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
   196ae:	9200      	str	r2, [sp, #0]
   196b0:	e7e8      	b.n	19684 <bt_gatt_clear_sc+0x20>
   196b2:	bf00      	nop
   196b4:	0002a83a 	.word	0x0002a83a
   196b8:	0002a617 	.word	0x0002a617

000196bc <sc_clear>:
{
   196bc:	b538      	push	{r3, r4, r5, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   196be:	f100 0590 	add.w	r5, r0, #144	; 0x90
{
   196c2:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   196c4:	4629      	mov	r1, r5
   196c6:	7a00      	ldrb	r0, [r0, #8]
   196c8:	f00b fdfd 	bl	252c6 <bt_addr_le_is_bonded>
   196cc:	4603      	mov	r3, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   196ce:	4629      	mov	r1, r5
   196d0:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   196d2:	b14b      	cbz	r3, 196e8 <sc_clear+0x2c>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   196d4:	f7ff ffc6 	bl	19664 <bt_gatt_clear_sc>
		if (err) {
   196d8:	4602      	mov	r2, r0
   196da:	b160      	cbz	r0, 196f6 <sc_clear+0x3a>
}
   196dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			BT_ERR("Failed to clear SC %d", err);
   196e0:	4805      	ldr	r0, [pc, #20]	; (196f8 <sc_clear+0x3c>)
   196e2:	2145      	movs	r1, #69	; 0x45
   196e4:	f00a be61 	b.w	243aa <z_log_minimal_printk>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   196e8:	f7ff ff5e 	bl	195a8 <find_sc_cfg>
		if (cfg) {
   196ec:	b118      	cbz	r0, 196f6 <sc_clear+0x3a>
}
   196ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			clear_sc_cfg(cfg);
   196f2:	f00c be02 	b.w	262fa <clear_sc_cfg>
}
   196f6:	bd38      	pop	{r3, r4, r5, pc}
   196f8:	0002a639 	.word	0x0002a639

000196fc <disconnected_cb>:
{
   196fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   19700:	4b1f      	ldr	r3, [pc, #124]	; (19780 <disconnected_cb+0x84>)
{
   19702:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   19704:	6882      	ldr	r2, [r0, #8]
   19706:	429a      	cmp	r2, r3
{
   19708:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1970a:	d102      	bne.n	19712 <disconnected_cb+0x16>
	ccc = attr->user_data;
   1970c:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
   1970e:	8963      	ldrh	r3, [r4, #10]
   19710:	b9c3      	cbnz	r3, 19744 <disconnected_cb+0x48>
}
   19712:	2001      	movs	r0, #1
   19714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   19718:	f105 0890 	add.w	r8, r5, #144	; 0x90
   1971c:	7a28      	ldrb	r0, [r5, #8]
   1971e:	4641      	mov	r1, r8
   19720:	f00b fdd1 	bl	252c6 <bt_addr_le_is_bonded>
   19724:	b948      	cbnz	r0, 1973a <disconnected_cb+0x3e>
				if (ccc == &sc_ccc) {
   19726:	4b17      	ldr	r3, [pc, #92]	; (19784 <disconnected_cb+0x88>)
   19728:	429c      	cmp	r4, r3
   1972a:	d102      	bne.n	19732 <disconnected_cb+0x36>
					sc_clear(conn);
   1972c:	4628      	mov	r0, r5
   1972e:	f7ff ffc5 	bl	196bc <sc_clear>
				clear_ccc_cfg(cfg);
   19732:	4620      	mov	r0, r4
   19734:	f00c fdd3 	bl	262de <clear_ccc_cfg>
	if (!value_used) {
   19738:	e019      	b.n	1976e <disconnected_cb+0x72>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1973a:	4641      	mov	r1, r8
   1973c:	4638      	mov	r0, r7
   1973e:	f00c fdc7 	bl	262d0 <bt_addr_le_copy>
	if (!value_used) {
   19742:	e014      	b.n	1976e <disconnected_cb+0x72>
		if (!cfg->value) {
   19744:	8923      	ldrh	r3, [r4, #8]
   19746:	b193      	cbz	r3, 1976e <disconnected_cb+0x72>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   19748:	4627      	mov	r7, r4
   1974a:	4628      	mov	r0, r5
   1974c:	f817 1b01 	ldrb.w	r1, [r7], #1
   19750:	463a      	mov	r2, r7
   19752:	f00c f86d 	bl	25830 <bt_conn_is_peer_addr_le>
   19756:	2800      	cmp	r0, #0
   19758:	d1de      	bne.n	19718 <disconnected_cb+0x1c>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1975a:	7820      	ldrb	r0, [r4, #0]
   1975c:	4639      	mov	r1, r7
   1975e:	f7fe f9c9 	bl	17af4 <bt_conn_lookup_addr_le>
			if (tmp) {
   19762:	b120      	cbz	r0, 1976e <disconnected_cb+0x72>
				if (tmp->state == BT_CONN_CONNECTED) {
   19764:	7b45      	ldrb	r5, [r0, #13]
				bt_conn_unref(tmp);
   19766:	f7fd ff29 	bl	175bc <bt_conn_unref>
	if (!value_used) {
   1976a:	2d07      	cmp	r5, #7
   1976c:	d0d1      	beq.n	19712 <disconnected_cb+0x16>
		if (ccc->cfg_changed) {
   1976e:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   19770:	2100      	movs	r1, #0
   19772:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   19774:	2b00      	cmp	r3, #0
   19776:	d0cc      	beq.n	19712 <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   19778:	4630      	mov	r0, r6
   1977a:	4798      	blx	r3
   1977c:	e7c9      	b.n	19712 <disconnected_cb+0x16>
   1977e:	bf00      	nop
   19780:	000194b5 	.word	0x000194b5
   19784:	20000618 	.word	0x20000618

00019788 <sc_set>:
{
   19788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1978c:	460e      	mov	r6, r1
   1978e:	b086      	sub	sp, #24
   19790:	4617      	mov	r7, r2
   19792:	4698      	mov	r8, r3
	if (!name) {
   19794:	4604      	mov	r4, r0
   19796:	b948      	cbnz	r0, 197ac <sc_set+0x24>
		BT_ERR("Insufficient number of arguments");
   19798:	482a      	ldr	r0, [pc, #168]	; (19844 <sc_set+0xbc>)
   1979a:	2145      	movs	r1, #69	; 0x45
   1979c:	f00a fe05 	bl	243aa <z_log_minimal_printk>
		return -EINVAL;
   197a0:	f06f 0515 	mvn.w	r5, #21
}
   197a4:	4628      	mov	r0, r5
   197a6:	b006      	add	sp, #24
   197a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_settings_decode_key(name, &addr);
   197ac:	a902      	add	r1, sp, #8
   197ae:	f00b fbee 	bl	24f8e <bt_settings_decode_key>
	if (err) {
   197b2:	4605      	mov	r5, r0
   197b4:	b128      	cbz	r0, 197c2 <sc_set+0x3a>
		BT_ERR("Unable to decode address %s", log_strdup(name));
   197b6:	4824      	ldr	r0, [pc, #144]	; (19848 <sc_set+0xc0>)
   197b8:	4622      	mov	r2, r4
   197ba:	2145      	movs	r1, #69	; 0x45
   197bc:	f00a fdf5 	bl	243aa <z_log_minimal_printk>
   197c0:	e7ee      	b.n	197a0 <sc_set+0x18>
	settings_name_next(name, &next);
   197c2:	a901      	add	r1, sp, #4
   197c4:	4620      	mov	r0, r4
   197c6:	f00b f891 	bl	248ec <settings_name_next>
	if (!next) {
   197ca:	9801      	ldr	r0, [sp, #4]
   197cc:	b140      	cbz	r0, 197e0 <sc_set+0x58>
		unsigned long next_id = strtoul(next, NULL, 10);
   197ce:	220a      	movs	r2, #10
   197d0:	4629      	mov	r1, r5
   197d2:	f00a fb71 	bl	23eb8 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   197d6:	4602      	mov	r2, r0
   197d8:	b110      	cbz	r0, 197e0 <sc_set+0x58>
			BT_ERR("Invalid local identity %lu", next_id);
   197da:	481c      	ldr	r0, [pc, #112]	; (1984c <sc_set+0xc4>)
   197dc:	2145      	movs	r1, #69	; 0x45
   197de:	e7ed      	b.n	197bc <sc_set+0x34>
	cfg = find_sc_cfg(id, &addr);
   197e0:	a902      	add	r1, sp, #8
   197e2:	2000      	movs	r0, #0
   197e4:	f7ff fee0 	bl	195a8 <find_sc_cfg>
	if (!cfg && len_rd) {
   197e8:	4604      	mov	r4, r0
   197ea:	bb20      	cbnz	r0, 19836 <sc_set+0xae>
   197ec:	2e00      	cmp	r6, #0
   197ee:	d0d9      	beq.n	197a4 <sc_set+0x1c>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   197f0:	a904      	add	r1, sp, #16
   197f2:	9004      	str	r0, [sp, #16]
   197f4:	4606      	mov	r6, r0
   197f6:	f8cd 0013 	str.w	r0, [sp, #19]
   197fa:	f7ff fed5 	bl	195a8 <find_sc_cfg>
		if (!cfg) {
   197fe:	4604      	mov	r4, r0
   19800:	b930      	cbnz	r0, 19810 <sc_set+0x88>
			BT_ERR("Unable to restore SC: no cfg left");
   19802:	4813      	ldr	r0, [pc, #76]	; (19850 <sc_set+0xc8>)
   19804:	2145      	movs	r1, #69	; 0x45
   19806:	f00a fdd0 	bl	243aa <z_log_minimal_printk>
			return -ENOMEM;
   1980a:	f06f 050b 	mvn.w	r5, #11
   1980e:	e7c9      	b.n	197a4 <sc_set+0x1c>
		cfg->id = id;
   19810:	f800 6b01 	strb.w	r6, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   19814:	a902      	add	r1, sp, #8
   19816:	f00c fd5b 	bl	262d0 <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
   1981a:	f104 0108 	add.w	r1, r4, #8
   1981e:	2204      	movs	r2, #4
   19820:	4640      	mov	r0, r8
   19822:	47b8      	blx	r7
		if (len < 0) {
   19824:	1e04      	subs	r4, r0, #0
   19826:	dabd      	bge.n	197a4 <sc_set+0x1c>
			BT_ERR("Failed to decode value (err %zd)", len);
   19828:	480a      	ldr	r0, [pc, #40]	; (19854 <sc_set+0xcc>)
   1982a:	4622      	mov	r2, r4
   1982c:	2145      	movs	r1, #69	; 0x45
   1982e:	f00a fdbc 	bl	243aa <z_log_minimal_printk>
			return len;
   19832:	4625      	mov	r5, r4
   19834:	e7b6      	b.n	197a4 <sc_set+0x1c>
	if (len_rd) {
   19836:	2e00      	cmp	r6, #0
   19838:	d1ef      	bne.n	1981a <sc_set+0x92>
   1983a:	6026      	str	r6, [r4, #0]
   1983c:	6066      	str	r6, [r4, #4]
   1983e:	60a6      	str	r6, [r4, #8]
   19840:	e7b0      	b.n	197a4 <sc_set+0x1c>
   19842:	bf00      	nop
   19844:	0002937c 	.word	0x0002937c
   19848:	0002a56c 	.word	0x0002a56c
   1984c:	0002a58d 	.word	0x0002a58d
   19850:	0002a654 	.word	0x0002a654
   19854:	0002a4c1 	.word	0x0002a4c1

00019858 <sc_indicate_rsp>:
{
   19858:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1985a:	f06f 0102 	mvn.w	r1, #2
   1985e:	4604      	mov	r4, r0
   19860:	480f      	ldr	r0, [pc, #60]	; (198a0 <sc_indicate_rsp+0x48>)
   19862:	f00c fd26 	bl	262b2 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   19866:	480e      	ldr	r0, [pc, #56]	; (198a0 <sc_indicate_rsp+0x48>)
   19868:	f00c fd0e 	bl	26288 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1986c:	07c2      	lsls	r2, r0, #31
   1986e:	d504      	bpl.n	1987a <sc_indicate_rsp+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   19870:	480c      	ldr	r0, [pc, #48]	; (198a4 <sc_indicate_rsp+0x4c>)
   19872:	2200      	movs	r2, #0
   19874:	2300      	movs	r3, #0
   19876:	f007 fec7 	bl	21608 <k_work_reschedule>
	if (bt_att_fixed_chan_only(conn)) {
   1987a:	4620      	mov	r0, r4
   1987c:	f00c fc63 	bl	26146 <bt_att_fixed_chan_only>
   19880:	b160      	cbz	r0, 1989c <sc_indicate_rsp+0x44>
		cfg = find_cf_cfg(conn);
   19882:	4620      	mov	r0, r4
   19884:	f7ff fc60 	bl	19148 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   19888:	b140      	cbz	r0, 1989c <sc_indicate_rsp+0x44>
   1988a:	7a03      	ldrb	r3, [r0, #8]
   1988c:	07db      	lsls	r3, r3, #31
   1988e:	d505      	bpl.n	1989c <sc_indicate_rsp+0x44>
}
   19890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   19894:	2101      	movs	r1, #1
   19896:	300c      	adds	r0, #12
   19898:	f00c bcfc 	b.w	26294 <atomic_or>
   1989c:	bd10      	pop	{r4, pc}
   1989e:	bf00      	nop
   198a0:	20001920 	.word	0x20001920
   198a4:	200018f0 	.word	0x200018f0

000198a8 <bt_gatt_init>:
{
   198a8:	b570      	push	{r4, r5, r6, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   198aa:	4b2a      	ldr	r3, [pc, #168]	; (19954 <bt_gatt_init+0xac>)
   198ac:	f3bf 8f5b 	dmb	ish
   198b0:	2201      	movs	r2, #1
   198b2:	e853 1f00 	ldrex	r1, [r3]
   198b6:	2900      	cmp	r1, #0
   198b8:	d103      	bne.n	198c2 <bt_gatt_init+0x1a>
   198ba:	e843 2000 	strex	r0, r2, [r3]
   198be:	2800      	cmp	r0, #0
   198c0:	d1f7      	bne.n	198b2 <bt_gatt_init+0xa>
   198c2:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   198c6:	d143      	bne.n	19950 <bt_gatt_init+0xa8>
   198c8:	f3bf 8f5b 	dmb	ish
   198cc:	4b22      	ldr	r3, [pc, #136]	; (19958 <bt_gatt_init+0xb0>)
   198ce:	e853 1f00 	ldrex	r1, [r3]
   198d2:	2900      	cmp	r1, #0
   198d4:	d103      	bne.n	198de <bt_gatt_init+0x36>
   198d6:	e843 2000 	strex	r0, r2, [r3]
   198da:	2800      	cmp	r0, #0
   198dc:	d1f7      	bne.n	198ce <bt_gatt_init+0x26>
   198de:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   198e2:	d031      	beq.n	19948 <bt_gatt_init+0xa0>
	list->head = NULL;
   198e4:	4b1d      	ldr	r3, [pc, #116]	; (1995c <bt_gatt_init+0xb4>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   198e6:	491e      	ldr	r1, [pc, #120]	; (19960 <bt_gatt_init+0xb8>)
   198e8:	481e      	ldr	r0, [pc, #120]	; (19964 <bt_gatt_init+0xbc>)
   198ea:	2200      	movs	r2, #0
	list->tail = NULL;
   198ec:	e9c3 2200 	strd	r2, r2, [r3]
   198f0:	f007 fd94 	bl	2141c <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   198f4:	f44f 72a4 	mov.w	r2, #328	; 0x148
   198f8:	2300      	movs	r3, #0
   198fa:	481a      	ldr	r0, [pc, #104]	; (19964 <bt_gatt_init+0xbc>)
   198fc:	f007 fe1c 	bl	21538 <k_work_schedule>
	k_work_init_delayable(&gatt_sc.work, sc_process);
   19900:	4919      	ldr	r1, [pc, #100]	; (19968 <bt_gatt_init+0xc0>)
   19902:	481a      	ldr	r0, [pc, #104]	; (1996c <bt_gatt_init+0xc4>)
   19904:	f007 fd8a 	bl	2141c <k_work_init_delayable>
   19908:	2102      	movs	r1, #2
   1990a:	4819      	ldr	r0, [pc, #100]	; (19970 <bt_gatt_init+0xc8>)
   1990c:	f00c fcc2 	bl	26294 <atomic_or>
}
   19910:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_init_delayable(&gatt_ccc_store.work, ccc_delayed_store);
   19914:	4917      	ldr	r1, [pc, #92]	; (19974 <bt_gatt_init+0xcc>)
   19916:	4818      	ldr	r0, [pc, #96]	; (19978 <bt_gatt_init+0xd0>)
   19918:	f007 bd80 	b.w	2141c <k_work_init_delayable>
		last_static_handle += svc->attr_count;
   1991c:	4a17      	ldr	r2, [pc, #92]	; (1997c <bt_gatt_init+0xd4>)
   1991e:	6863      	ldr	r3, [r4, #4]
   19920:	8811      	ldrh	r1, [r2, #0]
   19922:	440b      	add	r3, r1
   19924:	8013      	strh	r3, [r2, #0]
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   19926:	3408      	adds	r4, #8
   19928:	42ac      	cmp	r4, r5
   1992a:	d90a      	bls.n	19942 <bt_gatt_init+0x9a>
   1992c:	4814      	ldr	r0, [pc, #80]	; (19980 <bt_gatt_init+0xd8>)
   1992e:	4631      	mov	r1, r6
   19930:	f240 5209 	movw	r2, #1289	; 0x509
   19934:	f00a fd2b 	bl	2438e <assert_print>
   19938:	f240 5109 	movw	r1, #1289	; 0x509
   1993c:	4630      	mov	r0, r6
   1993e:	f00a fd1f 	bl	24380 <assert_post_action>
   19942:	42ac      	cmp	r4, r5
   19944:	d3ea      	bcc.n	1991c <bt_gatt_init+0x74>
   19946:	e7cd      	b.n	198e4 <bt_gatt_init+0x3c>
   19948:	4c0e      	ldr	r4, [pc, #56]	; (19984 <bt_gatt_init+0xdc>)
   1994a:	4d0f      	ldr	r5, [pc, #60]	; (19988 <bt_gatt_init+0xe0>)
   1994c:	4e0f      	ldr	r6, [pc, #60]	; (1998c <bt_gatt_init+0xe4>)
   1994e:	e7eb      	b.n	19928 <bt_gatt_init+0x80>
}
   19950:	bd70      	pop	{r4, r5, r6, pc}
   19952:	bf00      	nop
   19954:	20001fb8 	.word	0x20001fb8
   19958:	20001fd4 	.word	0x20001fd4
   1995c:	20001f90 	.word	0x20001f90
   19960:	00019be1 	.word	0x00019be1
   19964:	20001840 	.word	0x20001840
   19968:	00019f59 	.word	0x00019f59
   1996c:	200018f0 	.word	0x200018f0
   19970:	20001920 	.word	0x20001920
   19974:	0002668f 	.word	0x0002668f
   19978:	200018a0 	.word	0x200018a0
   1997c:	200022ee 	.word	0x200022ee
   19980:	000289af 	.word	0x000289af
   19984:	00027dac 	.word	0x00027dac
   19988:	00027dc4 	.word	0x00027dc4
   1998c:	0002a67b 	.word	0x0002a67b

00019990 <bt_gatt_attr_get_handle>:
{
   19990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   19994:	4604      	mov	r4, r0
   19996:	b910      	cbnz	r0, 1999e <bt_gatt_attr_get_handle+0xe>
		return 0;
   19998:	2000      	movs	r0, #0
}
   1999a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (attr->handle) {
   1999e:	8a00      	ldrh	r0, [r0, #16]
   199a0:	2800      	cmp	r0, #0
   199a2:	d1fa      	bne.n	1999a <bt_gatt_attr_get_handle+0xa>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   199a4:	4d18      	ldr	r5, [pc, #96]	; (19a08 <bt_gatt_attr_get_handle+0x78>)
   199a6:	4e19      	ldr	r6, [pc, #100]	; (19a0c <bt_gatt_attr_get_handle+0x7c>)
   199a8:	4f19      	ldr	r7, [pc, #100]	; (19a10 <bt_gatt_attr_get_handle+0x80>)
	uint16_t handle = 1;
   199aa:	f04f 0801 	mov.w	r8, #1
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   199ae:	42b5      	cmp	r5, r6
   199b0:	d90a      	bls.n	199c8 <bt_gatt_attr_get_handle+0x38>
   199b2:	4818      	ldr	r0, [pc, #96]	; (19a14 <bt_gatt_attr_get_handle+0x84>)
   199b4:	4639      	mov	r1, r7
   199b6:	f240 6257 	movw	r2, #1623	; 0x657
   199ba:	f00a fce8 	bl	2438e <assert_print>
   199be:	f240 6157 	movw	r1, #1623	; 0x657
   199c2:	4638      	mov	r0, r7
   199c4:	f00a fcdc 	bl	24380 <assert_post_action>
   199c8:	42b5      	cmp	r5, r6
   199ca:	d2e5      	bcs.n	19998 <bt_gatt_attr_get_handle+0x8>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   199cc:	e9d5 c100 	ldrd	ip, r1, [r5]
		if ((attr < &static_svc->attrs[0]) ||
   199d0:	4564      	cmp	r4, ip
   199d2:	d306      	bcc.n	199e2 <bt_gatt_attr_get_handle+0x52>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   199d4:	f04f 0e14 	mov.w	lr, #20
   199d8:	fb0e c301 	mla	r3, lr, r1, ip
   199dc:	3b14      	subs	r3, #20
		if ((attr < &static_svc->attrs[0]) ||
   199de:	429c      	cmp	r4, r3
   199e0:	d910      	bls.n	19a04 <bt_gatt_attr_get_handle+0x74>
			handle += static_svc->attr_count;
   199e2:	eb08 0001 	add.w	r0, r8, r1
   199e6:	b280      	uxth	r0, r0
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   199e8:	3508      	adds	r5, #8
   199ea:	4680      	mov	r8, r0
   199ec:	e7df      	b.n	199ae <bt_gatt_attr_get_handle+0x1e>
			if (attr == &static_svc->attrs[i]) {
   199ee:	fb0e c302 	mla	r3, lr, r2, ip
   199f2:	429c      	cmp	r4, r3
   199f4:	d0d1      	beq.n	1999a <bt_gatt_attr_get_handle+0xa>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   199f6:	3201      	adds	r2, #1
   199f8:	eb08 0302 	add.w	r3, r8, r2
   199fc:	4291      	cmp	r1, r2
   199fe:	b298      	uxth	r0, r3
   19a00:	d1f5      	bne.n	199ee <bt_gatt_attr_get_handle+0x5e>
   19a02:	e7f1      	b.n	199e8 <bt_gatt_attr_get_handle+0x58>
   19a04:	2200      	movs	r2, #0
   19a06:	e7f7      	b.n	199f8 <bt_gatt_attr_get_handle+0x68>
   19a08:	00027dac 	.word	0x00027dac
   19a0c:	00027dc4 	.word	0x00027dc4
   19a10:	0002a67b 	.word	0x0002a67b
   19a14:	000289af 	.word	0x000289af

00019a18 <bt_gatt_foreach_attr_type>:
{
   19a18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19a1c:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   19a20:	9100      	str	r1, [sp, #0]
   19a22:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   19a24:	f64f 73ff 	movw	r3, #65535	; 0xffff
   19a28:	2d00      	cmp	r5, #0
   19a2a:	bf08      	it	eq
   19a2c:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   19a2e:	4b2b      	ldr	r3, [pc, #172]	; (19adc <bt_gatt_foreach_attr_type+0xc4>)
   19a30:	881b      	ldrh	r3, [r3, #0]
   19a32:	4283      	cmp	r3, r0
{
   19a34:	4607      	mov	r7, r0
   19a36:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   19a38:	d24b      	bcs.n	19ad2 <bt_gatt_foreach_attr_type+0xba>
}
   19a3a:	b003      	add	sp, #12
   19a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   19a40:	6873      	ldr	r3, [r6, #4]
   19a42:	4423      	add	r3, r4
   19a44:	42bb      	cmp	r3, r7
   19a46:	d241      	bcs.n	19acc <bt_gatt_foreach_attr_type+0xb4>
				handle += static_svc->attr_count;
   19a48:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   19a4a:	3608      	adds	r6, #8
   19a4c:	4b24      	ldr	r3, [pc, #144]	; (19ae0 <bt_gatt_foreach_attr_type+0xc8>)
   19a4e:	429e      	cmp	r6, r3
   19a50:	d90a      	bls.n	19a68 <bt_gatt_foreach_attr_type+0x50>
   19a52:	4824      	ldr	r0, [pc, #144]	; (19ae4 <bt_gatt_foreach_attr_type+0xcc>)
   19a54:	4659      	mov	r1, fp
   19a56:	f240 721b 	movw	r2, #1819	; 0x71b
   19a5a:	f00a fc98 	bl	2438e <assert_print>
   19a5e:	f240 711b 	movw	r1, #1819	; 0x71b
   19a62:	4658      	mov	r0, fp
   19a64:	f00a fc8c 	bl	24380 <assert_post_action>
   19a68:	4b1d      	ldr	r3, [pc, #116]	; (19ae0 <bt_gatt_foreach_attr_type+0xc8>)
   19a6a:	429e      	cmp	r6, r3
   19a6c:	d3e8      	bcc.n	19a40 <bt_gatt_foreach_attr_type+0x28>
   19a6e:	e7e4      	b.n	19a3a <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   19a70:	5889      	ldr	r1, [r1, r2]
   19a72:	9301      	str	r3, [sp, #4]
   19a74:	4640      	mov	r0, r8
   19a76:	f00b faae 	bl	24fd6 <bt_uuid_cmp>
   19a7a:	9b01      	ldr	r3, [sp, #4]
   19a7c:	b198      	cbz	r0, 19aa6 <bt_gatt_foreach_attr_type+0x8e>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   19a7e:	3401      	adds	r4, #1
   19a80:	f10a 0a01 	add.w	sl, sl, #1
   19a84:	b2a4      	uxth	r4, r4
   19a86:	6873      	ldr	r3, [r6, #4]
   19a88:	4553      	cmp	r3, sl
   19a8a:	d9de      	bls.n	19a4a <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   19a8c:	9b00      	ldr	r3, [sp, #0]
   19a8e:	429c      	cmp	r4, r3
   19a90:	d8d3      	bhi.n	19a3a <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   19a92:	42bc      	cmp	r4, r7
   19a94:	d3f3      	bcc.n	19a7e <bt_gatt_foreach_attr_type+0x66>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   19a96:	2314      	movs	r3, #20
   19a98:	6831      	ldr	r1, [r6, #0]
   19a9a:	fb03 f20a 	mul.w	r2, r3, sl
   19a9e:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   19aa0:	f1b8 0f00 	cmp.w	r8, #0
   19aa4:	d1e4      	bne.n	19a70 <bt_gatt_foreach_attr_type+0x58>
	if (attr_data && attr_data != attr->user_data) {
   19aa6:	f1b9 0f00 	cmp.w	r9, #0
   19aaa:	d10b      	bne.n	19ac4 <bt_gatt_foreach_attr_type+0xac>
	*num_matches -= 1;
   19aac:	3d01      	subs	r5, #1
   19aae:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   19ab0:	4618      	mov	r0, r3
   19ab2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   19ab4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   19ab6:	4621      	mov	r1, r4
   19ab8:	4798      	blx	r3
	if (!*num_matches) {
   19aba:	2d00      	cmp	r5, #0
   19abc:	d0bd      	beq.n	19a3a <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   19abe:	2800      	cmp	r0, #0
   19ac0:	d1dd      	bne.n	19a7e <bt_gatt_foreach_attr_type+0x66>
   19ac2:	e7ba      	b.n	19a3a <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   19ac4:	68da      	ldr	r2, [r3, #12]
   19ac6:	4591      	cmp	r9, r2
   19ac8:	d1d9      	bne.n	19a7e <bt_gatt_foreach_attr_type+0x66>
   19aca:	e7ef      	b.n	19aac <bt_gatt_foreach_attr_type+0x94>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   19acc:	f04f 0a00 	mov.w	sl, #0
   19ad0:	e7d9      	b.n	19a86 <bt_gatt_foreach_attr_type+0x6e>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   19ad2:	4e05      	ldr	r6, [pc, #20]	; (19ae8 <bt_gatt_foreach_attr_type+0xd0>)
   19ad4:	f8df b014 	ldr.w	fp, [pc, #20]	; 19aec <bt_gatt_foreach_attr_type+0xd4>
		uint16_t handle = 1;
   19ad8:	2401      	movs	r4, #1
   19ada:	e7b7      	b.n	19a4c <bt_gatt_foreach_attr_type+0x34>
   19adc:	200022ee 	.word	0x200022ee
   19ae0:	00027dc4 	.word	0x00027dc4
   19ae4:	000289af 	.word	0x000289af
   19ae8:	00027dac 	.word	0x00027dac
   19aec:	0002a67b 	.word	0x0002a67b

00019af0 <db_hash_gen>:
{
   19af0:	b530      	push	{r4, r5, lr}
   19af2:	b0c9      	sub	sp, #292	; 0x124
	uint8_t key[16] = {};
   19af4:	2300      	movs	r3, #0
{
   19af6:	4604      	mov	r4, r0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   19af8:	aa1c      	add	r2, sp, #112	; 0x70
   19afa:	4669      	mov	r1, sp
   19afc:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   19afe:	e9cd 3300 	strd	r3, r3, [sp]
   19b02:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   19b06:	f00b f920 	bl	24d4a <tc_cmac_setup>
   19b0a:	b928      	cbnz	r0, 19b18 <db_hash_gen+0x28>
		BT_ERR("Unable to setup AES CMAC");
   19b0c:	4814      	ldr	r0, [pc, #80]	; (19b60 <db_hash_gen+0x70>)
   19b0e:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Unable to calculate hash");
   19b10:	f00a fc4b 	bl	243aa <z_log_minimal_printk>
}
   19b14:	b049      	add	sp, #292	; 0x124
   19b16:	bd30      	pop	{r4, r5, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   19b18:	f64f 71ff 	movw	r1, #65535	; 0xffff
   19b1c:	2001      	movs	r0, #1
   19b1e:	4a11      	ldr	r2, [pc, #68]	; (19b64 <db_hash_gen+0x74>)
   19b20:	ab04      	add	r3, sp, #16
   19b22:	f00c fd47 	bl	265b4 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   19b26:	4810      	ldr	r0, [pc, #64]	; (19b68 <db_hash_gen+0x78>)
   19b28:	a904      	add	r1, sp, #16
   19b2a:	f00b f9a4 	bl	24e76 <tc_cmac_final>
   19b2e:	b910      	cbnz	r0, 19b36 <db_hash_gen+0x46>
		BT_ERR("Unable to calculate hash");
   19b30:	480e      	ldr	r0, [pc, #56]	; (19b6c <db_hash_gen+0x7c>)
   19b32:	2145      	movs	r1, #69	; 0x45
   19b34:	e7ec      	b.n	19b10 <db_hash_gen+0x20>
   19b36:	4b0c      	ldr	r3, [pc, #48]	; (19b68 <db_hash_gen+0x78>)
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   19b38:	2208      	movs	r2, #8
   19b3a:	f103 010f 	add.w	r1, r3, #15
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   19b3e:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   19b40:	780d      	ldrb	r5, [r1, #0]
   19b42:	f803 5b01 	strb.w	r5, [r3], #1
	for (i = 0; i < (length/2); i++) {
   19b46:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   19b48:	f801 0901 	strb.w	r0, [r1], #-1
	for (i = 0; i < (length/2); i++) {
   19b4c:	d1f7      	bne.n	19b3e <db_hash_gen+0x4e>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   19b4e:	b10c      	cbz	r4, 19b54 <db_hash_gen+0x64>
		db_hash_store();
   19b50:	f7ff fae4 	bl	1911c <db_hash_store>
   19b54:	2104      	movs	r1, #4
   19b56:	4806      	ldr	r0, [pc, #24]	; (19b70 <db_hash_gen+0x80>)
   19b58:	f00c fb9c 	bl	26294 <atomic_or>
   19b5c:	e7da      	b.n	19b14 <db_hash_gen+0x24>
   19b5e:	bf00      	nop
   19b60:	0002a6ab 	.word	0x0002a6ab
   19b64:	000261df 	.word	0x000261df
   19b68:	20001820 	.word	0x20001820
   19b6c:	0002a6c9 	.word	0x0002a6c9
   19b70:	20001920 	.word	0x20001920

00019b74 <db_hash_read>:
{
   19b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   19b78:	4916      	ldr	r1, [pc, #88]	; (19bd4 <db_hash_read+0x60>)
{
   19b7a:	f8bd 7018 	ldrh.w	r7, [sp, #24]
   19b7e:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   19b80:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   19b84:	4615      	mov	r5, r2
   19b86:	461e      	mov	r6, r3
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   19b88:	f007 fd8c 	bl	216a4 <k_work_cancel_delayable_sync>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   19b8c:	4812      	ldr	r0, [pc, #72]	; (19bd8 <db_hash_read+0x64>)
   19b8e:	f00c fb7b 	bl	26288 <atomic_get>
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   19b92:	0741      	lsls	r1, r0, #29
   19b94:	d402      	bmi.n	19b9c <db_hash_read+0x28>
		db_hash_gen(true);
   19b96:	2001      	movs	r0, #1
   19b98:	f7ff ffaa 	bl	19af0 <db_hash_gen>
	cfg = find_cf_cfg(conn);
   19b9c:	4620      	mov	r0, r4
   19b9e:	f7ff fad3 	bl	19148 <find_cf_cfg>
	if (cfg &&
   19ba2:	b168      	cbz	r0, 19bc0 <db_hash_read+0x4c>
   19ba4:	7a03      	ldrb	r3, [r0, #8]
   19ba6:	07da      	lsls	r2, r3, #31
   19ba8:	d50a      	bpl.n	19bc0 <db_hash_read+0x4c>
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   19baa:	f100 040c 	add.w	r4, r0, #12
   19bae:	4620      	mov	r0, r4
   19bb0:	f00c fb6a 	bl	26288 <atomic_get>
	    CF_ROBUST_CACHING(cfg) &&
   19bb4:	07c3      	lsls	r3, r0, #31
   19bb6:	d403      	bmi.n	19bc0 <db_hash_read+0x4c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   19bb8:	2102      	movs	r1, #2
   19bba:	4620      	mov	r0, r4
   19bbc:	f00c fb6a 	bl	26294 <atomic_or>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   19bc0:	2310      	movs	r3, #16
   19bc2:	9306      	str	r3, [sp, #24]
   19bc4:	463a      	mov	r2, r7
   19bc6:	4631      	mov	r1, r6
   19bc8:	4628      	mov	r0, r5
   19bca:	4b04      	ldr	r3, [pc, #16]	; (19bdc <db_hash_read+0x68>)
}
   19bcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   19bd0:	f00c bb98 	b.w	26304 <bt_gatt_attr_read.constprop.0>
   19bd4:	20001870 	.word	0x20001870
   19bd8:	20001920 	.word	0x20001920
   19bdc:	20001820 	.word	0x20001820

00019be0 <db_hash_process>:
{
   19be0:	b510      	push	{r4, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   19be2:	4827      	ldr	r0, [pc, #156]	; (19c80 <db_hash_process+0xa0>)
   19be4:	f06f 0108 	mvn.w	r1, #8
   19be8:	f00c fb63 	bl	262b2 <atomic_and>
	if (atomic_test_and_clear_bit(gatt_sc.flags, DB_HASH_LOAD)) {
   19bec:	0700      	lsls	r0, r0, #28
   19bee:	d542      	bpl.n	19c76 <db_hash_process+0x96>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   19bf0:	4823      	ldr	r0, [pc, #140]	; (19c80 <db_hash_process+0xa0>)
   19bf2:	f00c fb49 	bl	26288 <atomic_get>
   19bf6:	4603      	mov	r3, r0
		if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   19bf8:	0759      	lsls	r1, r3, #29
   19bfa:	f3c0 0080 	ubfx	r0, r0, #2, #1
   19bfe:	d401      	bmi.n	19c04 <db_hash_process+0x24>
			db_hash_gen(false);
   19c00:	f7ff ff76 	bl	19af0 <db_hash_gen>
		if (!memcmp(db_hash.stored_hash, db_hash.hash,
   19c04:	491f      	ldr	r1, [pc, #124]	; (19c84 <db_hash_process+0xa4>)
   19c06:	2210      	movs	r2, #16
   19c08:	1888      	adds	r0, r1, r2
   19c0a:	f00d ff17 	bl	27a3c <memcmp>
   19c0e:	b948      	cbnz	r0, 19c24 <db_hash_process+0x44>
			k_work_cancel_delayable(&gatt_sc.work);
   19c10:	481d      	ldr	r0, [pc, #116]	; (19c88 <db_hash_process+0xa8>)
   19c12:	f007 fcff 	bl	21614 <k_work_cancel_delayable>
}
   19c16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   19c1a:	4819      	ldr	r0, [pc, #100]	; (19c80 <db_hash_process+0xa0>)
   19c1c:	f06f 0101 	mvn.w	r1, #1
   19c20:	f00c bb47 	b.w	262b2 <atomic_and>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   19c24:	4c19      	ldr	r4, [pc, #100]	; (19c8c <db_hash_process+0xac>)
   19c26:	2101      	movs	r1, #1
   19c28:	f104 0050 	add.w	r0, r4, #80	; 0x50
   19c2c:	f00c fb32 	bl	26294 <atomic_or>
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   19c30:	07c2      	lsls	r2, r0, #31
   19c32:	d410      	bmi.n	19c56 <db_hash_process+0x76>
		gatt_sc.start = start;
   19c34:	4b16      	ldr	r3, [pc, #88]	; (19c90 <db_hash_process+0xb0>)
   19c36:	61a3      	str	r3, [r4, #24]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   19c38:	4811      	ldr	r0, [pc, #68]	; (19c80 <db_hash_process+0xa0>)
   19c3a:	f00c fb25 	bl	26288 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
   19c3e:	0783      	lsls	r3, r0, #30
   19c40:	d405      	bmi.n	19c4e <db_hash_process+0x6e>
	k_work_reschedule(&gatt_sc.work, timeout);
   19c42:	4811      	ldr	r0, [pc, #68]	; (19c88 <db_hash_process+0xa8>)
   19c44:	f44f 72a4 	mov.w	r2, #328	; 0x148
   19c48:	2300      	movs	r3, #0
   19c4a:	f007 fcdd 	bl	21608 <k_work_reschedule>
}
   19c4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		db_hash_store();
   19c52:	f7ff ba63 	b.w	1911c <db_hash_store>
	if (new_start >= *start && new_end <= *end) {
   19c56:	8b23      	ldrh	r3, [r4, #24]
   19c58:	8b62      	ldrh	r2, [r4, #26]
   19c5a:	2b01      	cmp	r3, #1
   19c5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   19c60:	d805      	bhi.n	19c6e <db_hash_process+0x8e>
   19c62:	429a      	cmp	r2, r3
   19c64:	d0f3      	beq.n	19c4e <db_hash_process+0x6e>
		*end = new_end;
   19c66:	f64f 73ff 	movw	r3, #65535	; 0xffff
   19c6a:	8363      	strh	r3, [r4, #26]
   19c6c:	e7e4      	b.n	19c38 <db_hash_process+0x58>
	if (*end < new_end) {
   19c6e:	429a      	cmp	r2, r3
		*start = new_start;
   19c70:	8321      	strh	r1, [r4, #24]
	if (*end < new_end) {
   19c72:	d0e1      	beq.n	19c38 <db_hash_process+0x58>
   19c74:	e7f7      	b.n	19c66 <db_hash_process+0x86>
}
   19c76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	db_hash_gen(true);
   19c7a:	2001      	movs	r0, #1
   19c7c:	f7ff bf38 	b.w	19af0 <db_hash_gen>
   19c80:	20001920 	.word	0x20001920
   19c84:	20001820 	.word	0x20001820
   19c88:	200018f0 	.word	0x200018f0
   19c8c:	200018d0 	.word	0x200018d0
   19c90:	ffff0001 	.word	0xffff0001

00019c94 <ccc_set_direct>:
{
   19c94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19c98:	b0b9      	sub	sp, #228	; 0xe4
   19c9a:	4688      	mov	r8, r1
   19c9c:	4616      	mov	r6, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   19c9e:	492f      	ldr	r1, [pc, #188]	; (19d5c <ccc_set_direct+0xc8>)
   19ca0:	9840      	ldr	r0, [sp, #256]	; 0x100
   19ca2:	466a      	mov	r2, sp
{
   19ca4:	461f      	mov	r7, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   19ca6:	f00a fdfe 	bl	248a6 <settings_name_steq>
   19caa:	b948      	cbnz	r0, 19cc0 <ccc_set_direct+0x2c>
			BT_ERR("Invalid key");
   19cac:	482c      	ldr	r0, [pc, #176]	; (19d60 <ccc_set_direct+0xcc>)
   19cae:	2145      	movs	r1, #69	; 0x45
   19cb0:	f00a fb7b 	bl	243aa <z_log_minimal_printk>
   19cb4:	f06f 0515 	mvn.w	r5, #21
}
   19cb8:	4628      	mov	r0, r5
   19cba:	b039      	add	sp, #228	; 0xe4
   19cbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return ccc_set(name, len, read_cb, cb_arg);
   19cc0:	9c00      	ldr	r4, [sp, #0]
		settings_name_next(name, &next);
   19cc2:	a901      	add	r1, sp, #4
   19cc4:	4620      	mov	r0, r4
   19cc6:	f00a fe11 	bl	248ec <settings_name_next>
		if (!name) {
   19cca:	b93c      	cbnz	r4, 19cdc <ccc_set_direct+0x48>
			BT_ERR("Insufficient number of arguments");
   19ccc:	4825      	ldr	r0, [pc, #148]	; (19d64 <ccc_set_direct+0xd0>)
   19cce:	2145      	movs	r1, #69	; 0x45
   19cd0:	f00a fb6b 	bl	243aa <z_log_minimal_printk>
			return -EINVAL;
   19cd4:	f06f 0415 	mvn.w	r4, #21
			return -EINVAL;
   19cd8:	4625      	mov	r5, r4
   19cda:	e7ed      	b.n	19cb8 <ccc_set_direct+0x24>
		} else if (!next) {
   19cdc:	9801      	ldr	r0, [sp, #4]
   19cde:	b970      	cbnz	r0, 19cfe <ccc_set_direct+0x6a>
		err = bt_settings_decode_key(name, &addr);
   19ce0:	f10d 0908 	add.w	r9, sp, #8
			load.addr_with_id.id = BT_ID_DEFAULT;
   19ce4:	2300      	movs	r3, #0
		err = bt_settings_decode_key(name, &addr);
   19ce6:	4649      	mov	r1, r9
   19ce8:	4620      	mov	r0, r4
			load.addr_with_id.id = BT_ID_DEFAULT;
   19cea:	f88d 3014 	strb.w	r3, [sp, #20]
		err = bt_settings_decode_key(name, &addr);
   19cee:	f00b f94e 	bl	24f8e <bt_settings_decode_key>
		if (err) {
   19cf2:	4605      	mov	r5, r0
   19cf4:	b178      	cbz	r0, 19d16 <ccc_set_direct+0x82>
			BT_ERR("Unable to decode address %s", log_strdup(name));
   19cf6:	481c      	ldr	r0, [pc, #112]	; (19d68 <ccc_set_direct+0xd4>)
   19cf8:	4622      	mov	r2, r4
   19cfa:	2145      	movs	r1, #69	; 0x45
   19cfc:	e008      	b.n	19d10 <ccc_set_direct+0x7c>
			unsigned long next_id = strtoul(next, NULL, 10);
   19cfe:	220a      	movs	r2, #10
   19d00:	2100      	movs	r1, #0
   19d02:	f00a f8d9 	bl	23eb8 <strtoul>
			if (next_id >= CONFIG_BT_ID_MAX) {
   19d06:	4602      	mov	r2, r0
   19d08:	2800      	cmp	r0, #0
   19d0a:	d0e9      	beq.n	19ce0 <ccc_set_direct+0x4c>
				BT_ERR("Invalid local identity %lu", next_id);
   19d0c:	4817      	ldr	r0, [pc, #92]	; (19d6c <ccc_set_direct+0xd8>)
   19d0e:	2145      	movs	r1, #69	; 0x45
			BT_ERR("Unable to decode address %s", log_strdup(name));
   19d10:	f00a fb4b 	bl	243aa <z_log_minimal_printk>
   19d14:	e7de      	b.n	19cd4 <ccc_set_direct+0x40>
		load.addr_with_id.addr = &addr;
   19d16:	f8cd 9010 	str.w	r9, [sp, #16]
		if (len_rd) {
   19d1a:	f1b8 0f00 	cmp.w	r8, #0
   19d1e:	d019      	beq.n	19d54 <ccc_set_direct+0xc0>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
   19d20:	f10d 0820 	add.w	r8, sp, #32
   19d24:	22c0      	movs	r2, #192	; 0xc0
   19d26:	4641      	mov	r1, r8
   19d28:	4638      	mov	r0, r7
   19d2a:	47b0      	blx	r6
			if (len < 0) {
   19d2c:	1e04      	subs	r4, r0, #0
   19d2e:	da05      	bge.n	19d3c <ccc_set_direct+0xa8>
				BT_ERR("Failed to decode value (err %zd)", len);
   19d30:	480f      	ldr	r0, [pc, #60]	; (19d70 <ccc_set_direct+0xdc>)
   19d32:	4622      	mov	r2, r4
   19d34:	2145      	movs	r1, #69	; 0x45
   19d36:	f00a fb38 	bl	243aa <z_log_minimal_printk>
				return len;
   19d3a:	e7cd      	b.n	19cd8 <ccc_set_direct+0x44>
			load.count = len / sizeof(*ccc_store);
   19d3c:	08a4      	lsrs	r4, r4, #2
			load.entry = ccc_store;
   19d3e:	f8cd 8018 	str.w	r8, [sp, #24]
			load.count = len / sizeof(*ccc_store);
   19d42:	9407      	str	r4, [sp, #28]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
   19d44:	4a0b      	ldr	r2, [pc, #44]	; (19d74 <ccc_set_direct+0xe0>)
   19d46:	ab04      	add	r3, sp, #16
   19d48:	f64f 71ff 	movw	r1, #65535	; 0xffff
   19d4c:	2001      	movs	r0, #1
   19d4e:	f00c fc31 	bl	265b4 <bt_gatt_foreach_attr>
	return 0;
   19d52:	e7b1      	b.n	19cb8 <ccc_set_direct+0x24>
			load.count = 0;
   19d54:	e9cd 0006 	strd	r0, r0, [sp, #24]
   19d58:	e7f4      	b.n	19d44 <ccc_set_direct+0xb0>
   19d5a:	bf00      	nop
   19d5c:	0002a6e7 	.word	0x0002a6e7
   19d60:	0002a6ee 	.word	0x0002a6ee
   19d64:	0002937c 	.word	0x0002937c
   19d68:	0002a56c 	.word	0x0002a56c
   19d6c:	0002a58d 	.word	0x0002a58d
   19d70:	0002a4c1 	.word	0x0002a4c1
   19d74:	000193f5 	.word	0x000193f5

00019d78 <gatt_indicate>:
{
   19d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19d7c:	4615      	mov	r5, r2
   19d7e:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr,
   19d80:	2214      	movs	r2, #20
   19d82:	6869      	ldr	r1, [r5, #4]
{
   19d84:	4680      	mov	r8, r0
	if (bt_gatt_check_perm(conn, params->attr,
   19d86:	f00c fc20 	bl	265ca <bt_gatt_check_perm>
   19d8a:	4607      	mov	r7, r0
   19d8c:	b140      	cbz	r0, 19da0 <gatt_indicate+0x28>
		BT_WARN("Link is not encrypted");
   19d8e:	4824      	ldr	r0, [pc, #144]	; (19e20 <gatt_indicate+0xa8>)
   19d90:	2157      	movs	r1, #87	; 0x57
   19d92:	f00a fb0a 	bl	243aa <z_log_minimal_printk>
		return -EPERM;
   19d96:	f04f 35ff 	mov.w	r5, #4294967295
}
   19d9a:	4628      	mov	r0, r5
   19d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   19da0:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   19da4:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   19da6:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   19da8:	f7ff f83a 	bl	18e20 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   19dac:	3602      	adds	r6, #2
	if (!req) {
   19dae:	4604      	mov	r4, r0
   19db0:	b910      	cbnz	r0, 19db8 <gatt_indicate+0x40>
		return -ENOMEM;
   19db2:	f06f 050b 	mvn.w	r5, #11
   19db6:	e7f0      	b.n	19d9a <gatt_indicate+0x22>
	req->func = func;
   19db8:	4b1a      	ldr	r3, [pc, #104]	; (19e24 <gatt_indicate+0xac>)
	req->len = len;
   19dba:	6146      	str	r6, [r0, #20]
	req->att_op = op;
   19dbc:	211d      	movs	r1, #29
   19dbe:	7441      	strb	r1, [r0, #17]
	req->encode = encode;
   19dc0:	60c7      	str	r7, [r0, #12]
	req->func = func;
   19dc2:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   19dc4:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   19dc6:	4632      	mov	r2, r6
   19dc8:	4640      	mov	r0, r8
   19dca:	f7fe fddd 	bl	18988 <bt_att_create_pdu>
	if (!buf) {
   19dce:	4606      	mov	r6, r0
   19dd0:	b938      	cbnz	r0, 19de2 <gatt_indicate+0x6a>
		BT_WARN("No buffer available to send indication");
   19dd2:	4815      	ldr	r0, [pc, #84]	; (19e28 <gatt_indicate+0xb0>)
   19dd4:	2157      	movs	r1, #87	; 0x57
   19dd6:	f00a fae8 	bl	243aa <z_log_minimal_printk>
		bt_att_req_free(req);
   19dda:	4620      	mov	r0, r4
   19ddc:	f7ff f842 	bl	18e64 <bt_att_req_free>
   19de0:	e7e7      	b.n	19db2 <gatt_indicate+0x3a>
	return net_buf_simple_add(&buf->b, len);
   19de2:	f100 0a08 	add.w	sl, r0, #8
   19de6:	2102      	movs	r1, #2
   19de8:	4650      	mov	r0, sl
   19dea:	f002 fc51 	bl	1c690 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   19dee:	4607      	mov	r7, r0
   19df0:	8aa9      	ldrh	r1, [r5, #20]
   19df2:	f827 9b02 	strh.w	r9, [r7], #2
   19df6:	4650      	mov	r0, sl
   19df8:	f002 fc4a 	bl	1c690 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   19dfc:	8aaa      	ldrh	r2, [r5, #20]
   19dfe:	6929      	ldr	r1, [r5, #16]
   19e00:	4638      	mov	r0, r7
   19e02:	f00d fe2b 	bl	27a5c <memcpy>
	req->buf = buf;
   19e06:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
   19e08:	4621      	mov	r1, r4
   19e0a:	4640      	mov	r0, r8
   19e0c:	f7ff f93c 	bl	19088 <bt_att_req_send>
	if (err) {
   19e10:	4605      	mov	r5, r0
   19e12:	2800      	cmp	r0, #0
   19e14:	d0c1      	beq.n	19d9a <gatt_indicate+0x22>
		bt_att_req_free(req);
   19e16:	4620      	mov	r0, r4
   19e18:	f7ff f824 	bl	18e64 <bt_att_req_free>
   19e1c:	e7bd      	b.n	19d9a <gatt_indicate+0x22>
   19e1e:	bf00      	nop
   19e20:	0002a6ff 	.word	0x0002a6ff
   19e24:	000261ad 	.word	0x000261ad
   19e28:	0002a71a 	.word	0x0002a71a

00019e2c <bt_gatt_indicate>:
{
   19e2c:	b530      	push	{r4, r5, lr}
   19e2e:	4605      	mov	r5, r0
   19e30:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   19e32:	460c      	mov	r4, r1
   19e34:	b951      	cbnz	r1, 19e4c <bt_gatt_indicate+0x20>
   19e36:	4943      	ldr	r1, [pc, #268]	; (19f44 <bt_gatt_indicate+0x118>)
   19e38:	4843      	ldr	r0, [pc, #268]	; (19f48 <bt_gatt_indicate+0x11c>)
   19e3a:	f640 2213 	movw	r2, #2579	; 0xa13
   19e3e:	f00a faa6 	bl	2438e <assert_print>
   19e42:	4840      	ldr	r0, [pc, #256]	; (19f44 <bt_gatt_indicate+0x118>)
   19e44:	f640 2113 	movw	r1, #2579	; 0xa13
   19e48:	f00a fa9a 	bl	24380 <assert_post_action>
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   19e4c:	6863      	ldr	r3, [r4, #4]
   19e4e:	b963      	cbnz	r3, 19e6a <bt_gatt_indicate+0x3e>
   19e50:	6823      	ldr	r3, [r4, #0]
   19e52:	b953      	cbnz	r3, 19e6a <bt_gatt_indicate+0x3e>
   19e54:	493b      	ldr	r1, [pc, #236]	; (19f44 <bt_gatt_indicate+0x118>)
   19e56:	483c      	ldr	r0, [pc, #240]	; (19f48 <bt_gatt_indicate+0x11c>)
   19e58:	f640 2214 	movw	r2, #2580	; 0xa14
   19e5c:	f00a fa97 	bl	2438e <assert_print>
   19e60:	4838      	ldr	r0, [pc, #224]	; (19f44 <bt_gatt_indicate+0x118>)
   19e62:	f640 2114 	movw	r1, #2580	; 0xa14
   19e66:	f00a fa8b 	bl	24380 <assert_post_action>
   19e6a:	4838      	ldr	r0, [pc, #224]	; (19f4c <bt_gatt_indicate+0x120>)
   19e6c:	f00c fa0c 	bl	26288 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   19e70:	0742      	lsls	r2, r0, #29
   19e72:	d561      	bpl.n	19f38 <bt_gatt_indicate+0x10c>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   19e74:	b115      	cbz	r5, 19e7c <bt_gatt_indicate+0x50>
   19e76:	7b6b      	ldrb	r3, [r5, #13]
   19e78:	2b07      	cmp	r3, #7
   19e7a:	d160      	bne.n	19f3e <bt_gatt_indicate+0x112>
	data.attr = params->attr;
   19e7c:	6860      	ldr	r0, [r4, #4]
   19e7e:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   19e80:	f7ff fd86 	bl	19990 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   19e84:	6822      	ldr	r2, [r4, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   19e86:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   19e8a:	b33a      	cbz	r2, 19edc <bt_gatt_indicate+0xb0>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   19e8c:	a905      	add	r1, sp, #20
   19e8e:	9102      	str	r1, [sp, #8]
   19e90:	492f      	ldr	r1, [pc, #188]	; (19f50 <bt_gatt_indicate+0x124>)
   19e92:	9101      	str	r1, [sp, #4]
   19e94:	2101      	movs	r1, #1
	found->attr = NULL;
   19e96:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   19e98:	9100      	str	r1, [sp, #0]
   19e9a:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   19e9e:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   19ea0:	f7ff fdba 	bl	19a18 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   19ea4:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   19ea6:	b91b      	cbnz	r3, 19eb0 <bt_gatt_indicate+0x84>
			return -ENOENT;
   19ea8:	f06f 0001 	mvn.w	r0, #1
}
   19eac:	b00b      	add	sp, #44	; 0x2c
   19eae:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   19eb0:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   19eb2:	9b05      	ldr	r3, [sp, #20]
   19eb4:	6818      	ldr	r0, [r3, #0]
   19eb6:	2300      	movs	r3, #0
   19eb8:	f88d 3010 	strb.w	r3, [sp, #16]
   19ebc:	a904      	add	r1, sp, #16
   19ebe:	f642 0303 	movw	r3, #10243	; 0x2803
   19ec2:	f8ad 3012 	strh.w	r3, [sp, #18]
   19ec6:	f00b f886 	bl	24fd6 <bt_uuid_cmp>
   19eca:	b970      	cbnz	r0, 19eea <bt_gatt_indicate+0xbe>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   19ecc:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   19ece:	68c3      	ldr	r3, [r0, #12]
   19ed0:	799b      	ldrb	r3, [r3, #6]
   19ed2:	069b      	lsls	r3, r3, #26
   19ed4:	d405      	bmi.n	19ee2 <bt_gatt_indicate+0xb6>
			return -EINVAL;
   19ed6:	f06f 0015 	mvn.w	r0, #21
   19eda:	e7e7      	b.n	19eac <bt_gatt_indicate+0x80>
		if (!data.handle) {
   19edc:	2800      	cmp	r0, #0
   19ede:	d1e8      	bne.n	19eb2 <bt_gatt_indicate+0x86>
   19ee0:	e7e2      	b.n	19ea8 <bt_gatt_indicate+0x7c>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   19ee2:	f00c fb20 	bl	26526 <bt_gatt_attr_value_handle>
   19ee6:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   19eea:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   19eee:	b13d      	cbz	r5, 19f00 <bt_gatt_indicate+0xd4>
		params->_ref = 1;
   19ef0:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   19ef2:	4601      	mov	r1, r0
		params->_ref = 1;
   19ef4:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   19ef6:	4622      	mov	r2, r4
   19ef8:	4628      	mov	r0, r5
   19efa:	f7ff ff3d 	bl	19d78 <gatt_indicate>
   19efe:	e7d5      	b.n	19eac <bt_gatt_indicate+0x80>
	data.err = -ENOTCONN;
   19f00:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   19f04:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   19f06:	2302      	movs	r3, #2
   19f08:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   19f0c:	f642 1302 	movw	r3, #10498	; 0x2902
   19f10:	f8ad 3012 	strh.w	r3, [sp, #18]
   19f14:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   19f16:	75a5      	strb	r5, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   19f18:	9302      	str	r3, [sp, #8]
   19f1a:	4b0e      	ldr	r3, [pc, #56]	; (19f54 <bt_gatt_indicate+0x128>)
   19f1c:	9301      	str	r3, [sp, #4]
   19f1e:	2301      	movs	r3, #1
   19f20:	9300      	str	r3, [sp, #0]
   19f22:	aa04      	add	r2, sp, #16
   19f24:	462b      	mov	r3, r5
   19f26:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   19f2a:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   19f2c:	f88d 5010 	strb.w	r5, [sp, #16]
   19f30:	f7ff fd72 	bl	19a18 <bt_gatt_foreach_attr_type>
	return data.err;
   19f34:	9807      	ldr	r0, [sp, #28]
   19f36:	e7b9      	b.n	19eac <bt_gatt_indicate+0x80>
		return -EAGAIN;
   19f38:	f06f 000a 	mvn.w	r0, #10
   19f3c:	e7b6      	b.n	19eac <bt_gatt_indicate+0x80>
		return -ENOTCONN;
   19f3e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   19f42:	e7b3      	b.n	19eac <bt_gatt_indicate+0x80>
   19f44:	0002a67b 	.word	0x0002a67b
   19f48:	000289af 	.word	0x000289af
   19f4c:	2000039c 	.word	0x2000039c
   19f50:	000261d3 	.word	0x000261d3
   19f54:	0001a189 	.word	0x0001a189

00019f58 <sc_process>:
{
   19f58:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   19f5a:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
   19f5e:	4604      	mov	r4, r0
   19f60:	4628      	mov	r0, r5
   19f62:	f00c f991 	bl	26288 <atomic_get>
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   19f66:	0783      	lsls	r3, r0, #30
   19f68:	d50a      	bpl.n	19f80 <sc_process+0x28>
   19f6a:	491a      	ldr	r1, [pc, #104]	; (19fd4 <sc_process+0x7c>)
   19f6c:	481a      	ldr	r0, [pc, #104]	; (19fd8 <sc_process+0x80>)
   19f6e:	f240 429e 	movw	r2, #1182	; 0x49e
   19f72:	f00a fa0c 	bl	2438e <assert_print>
   19f76:	4817      	ldr	r0, [pc, #92]	; (19fd4 <sc_process+0x7c>)
   19f78:	f240 419e 	movw	r1, #1182	; 0x49e
   19f7c:	f00a fa00 	bl	24380 <assert_post_action>
	sc_range[0] = sys_cpu_to_le16(sc->start);
   19f80:	f834 3c08 	ldrh.w	r3, [r4, #-8]
   19f84:	f8ad 3004 	strh.w	r3, [sp, #4]
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   19f88:	f06f 0101 	mvn.w	r1, #1
	sc_range[1] = sys_cpu_to_le16(sc->end);
   19f8c:	f834 3c06 	ldrh.w	r3, [r4, #-6]
   19f90:	f8ad 3006 	strh.w	r3, [sp, #6]
   19f94:	4628      	mov	r0, r5
   19f96:	f00c f98c 	bl	262b2 <atomic_and>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   19f9a:	4b10      	ldr	r3, [pc, #64]	; (19fdc <sc_process+0x84>)
   19f9c:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   19fa0:	4b0f      	ldr	r3, [pc, #60]	; (19fe0 <sc_process+0x88>)
   19fa2:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   19fa6:	ab01      	add	r3, sp, #4
	sc->start = 0U;
   19fa8:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
   19faa:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   19fae:	2304      	movs	r3, #4
	sc->start = 0U;
   19fb0:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->end = 0U;
   19fb4:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   19fb8:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   19fbc:	f1a4 0120 	sub.w	r1, r4, #32
   19fc0:	f7ff ff34 	bl	19e2c <bt_gatt_indicate>
   19fc4:	b918      	cbnz	r0, 19fce <sc_process+0x76>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   19fc6:	2102      	movs	r1, #2
   19fc8:	4628      	mov	r0, r5
   19fca:	f00c f963 	bl	26294 <atomic_or>
}
   19fce:	b003      	add	sp, #12
   19fd0:	bd30      	pop	{r4, r5, pc}
   19fd2:	bf00      	nop
   19fd4:	0002a67b 	.word	0x0002a67b
   19fd8:	000289af 	.word	0x000289af
   19fdc:	0002831c 	.word	0x0002831c
   19fe0:	00019859 	.word	0x00019859

00019fe4 <gatt_notify>:
{
   19fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19fe8:	4614      	mov	r4, r2
   19fea:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr,
   19fec:	2214      	movs	r2, #20
   19fee:	6861      	ldr	r1, [r4, #4]
{
   19ff0:	4607      	mov	r7, r0
	if (bt_gatt_check_perm(conn, params->attr,
   19ff2:	f00c faea 	bl	265ca <bt_gatt_check_perm>
   19ff6:	b138      	cbz	r0, 1a008 <gatt_notify+0x24>
		BT_WARN("Link is not encrypted");
   19ff8:	4818      	ldr	r0, [pc, #96]	; (1a05c <gatt_notify+0x78>)
   19ffa:	2157      	movs	r1, #87	; 0x57
   19ffc:	f00a f9d5 	bl	243aa <z_log_minimal_printk>
		return -EPERM;
   1a000:	f04f 30ff 	mov.w	r0, #4294967295
}
   1a004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				sizeof(*nfy) + params->len);
   1a008:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1a00a:	211b      	movs	r1, #27
   1a00c:	3202      	adds	r2, #2
   1a00e:	4638      	mov	r0, r7
   1a010:	f7fe fcba 	bl	18988 <bt_att_create_pdu>
	if (!buf) {
   1a014:	4605      	mov	r5, r0
   1a016:	b930      	cbnz	r0, 1a026 <gatt_notify+0x42>
		BT_WARN("No buffer available to send notification");
   1a018:	4811      	ldr	r0, [pc, #68]	; (1a060 <gatt_notify+0x7c>)
   1a01a:	2157      	movs	r1, #87	; 0x57
   1a01c:	f00a f9c5 	bl	243aa <z_log_minimal_printk>
		return -ENOMEM;
   1a020:	f06f 000b 	mvn.w	r0, #11
   1a024:	e7ee      	b.n	1a004 <gatt_notify+0x20>
   1a026:	f100 0908 	add.w	r9, r0, #8
   1a02a:	2102      	movs	r1, #2
   1a02c:	4648      	mov	r0, r9
   1a02e:	f002 fb2f 	bl	1c690 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   1a032:	4606      	mov	r6, r0
   1a034:	89a1      	ldrh	r1, [r4, #12]
   1a036:	f826 8b02 	strh.w	r8, [r6], #2
   1a03a:	4648      	mov	r0, r9
   1a03c:	f002 fb28 	bl	1c690 <net_buf_simple_add>
   1a040:	89a2      	ldrh	r2, [r4, #12]
   1a042:	68a1      	ldr	r1, [r4, #8]
   1a044:	4630      	mov	r0, r6
   1a046:	f00d fd09 	bl	27a5c <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   1a04a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   1a04e:	4629      	mov	r1, r5
   1a050:	4638      	mov	r0, r7
}
   1a052:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   1a056:	f7fe bfb5 	b.w	18fc4 <bt_att_send>
   1a05a:	bf00      	nop
   1a05c:	0002a6ff 	.word	0x0002a6ff
   1a060:	0002a746 	.word	0x0002a746

0001a064 <bt_gatt_notify_cb>:
{
   1a064:	b530      	push	{r4, r5, lr}
   1a066:	4605      	mov	r5, r0
   1a068:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   1a06a:	460c      	mov	r4, r1
   1a06c:	b951      	cbnz	r1, 1a084 <bt_gatt_notify_cb+0x20>
   1a06e:	4941      	ldr	r1, [pc, #260]	; (1a174 <bt_gatt_notify_cb+0x110>)
   1a070:	4841      	ldr	r0, [pc, #260]	; (1a178 <bt_gatt_notify_cb+0x114>)
   1a072:	f640 12c5 	movw	r2, #2501	; 0x9c5
   1a076:	f00a f98a 	bl	2438e <assert_print>
   1a07a:	483e      	ldr	r0, [pc, #248]	; (1a174 <bt_gatt_notify_cb+0x110>)
   1a07c:	f640 11c5 	movw	r1, #2501	; 0x9c5
   1a080:	f00a f97e 	bl	24380 <assert_post_action>
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   1a084:	6863      	ldr	r3, [r4, #4]
   1a086:	b963      	cbnz	r3, 1a0a2 <bt_gatt_notify_cb+0x3e>
   1a088:	6823      	ldr	r3, [r4, #0]
   1a08a:	b953      	cbnz	r3, 1a0a2 <bt_gatt_notify_cb+0x3e>
   1a08c:	4939      	ldr	r1, [pc, #228]	; (1a174 <bt_gatt_notify_cb+0x110>)
   1a08e:	483a      	ldr	r0, [pc, #232]	; (1a178 <bt_gatt_notify_cb+0x114>)
   1a090:	f640 12c6 	movw	r2, #2502	; 0x9c6
   1a094:	f00a f97b 	bl	2438e <assert_print>
   1a098:	4836      	ldr	r0, [pc, #216]	; (1a174 <bt_gatt_notify_cb+0x110>)
   1a09a:	f640 11c6 	movw	r1, #2502	; 0x9c6
   1a09e:	f00a f96f 	bl	24380 <assert_post_action>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1a0a2:	4836      	ldr	r0, [pc, #216]	; (1a17c <bt_gatt_notify_cb+0x118>)
   1a0a4:	f00c f8f0 	bl	26288 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1a0a8:	0742      	lsls	r2, r0, #29
   1a0aa:	d55d      	bpl.n	1a168 <bt_gatt_notify_cb+0x104>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1a0ac:	b115      	cbz	r5, 1a0b4 <bt_gatt_notify_cb+0x50>
   1a0ae:	7b6b      	ldrb	r3, [r5, #13]
   1a0b0:	2b07      	cmp	r3, #7
   1a0b2:	d15c      	bne.n	1a16e <bt_gatt_notify_cb+0x10a>
	data.attr = params->attr;
   1a0b4:	6860      	ldr	r0, [r4, #4]
   1a0b6:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1a0b8:	f7ff fc6a 	bl	19990 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   1a0bc:	6822      	ldr	r2, [r4, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1a0be:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   1a0c2:	b33a      	cbz	r2, 1a114 <bt_gatt_notify_cb+0xb0>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1a0c4:	a905      	add	r1, sp, #20
   1a0c6:	9102      	str	r1, [sp, #8]
   1a0c8:	492d      	ldr	r1, [pc, #180]	; (1a180 <bt_gatt_notify_cb+0x11c>)
   1a0ca:	9101      	str	r1, [sp, #4]
   1a0cc:	2101      	movs	r1, #1
	found->attr = NULL;
   1a0ce:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1a0d0:	9100      	str	r1, [sp, #0]
   1a0d2:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   1a0d6:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1a0d8:	f7ff fc9e 	bl	19a18 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   1a0dc:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1a0de:	b91b      	cbnz	r3, 1a0e8 <bt_gatt_notify_cb+0x84>
			return -ENOENT;
   1a0e0:	f06f 0001 	mvn.w	r0, #1
}
   1a0e4:	b00b      	add	sp, #44	; 0x2c
   1a0e6:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   1a0e8:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1a0ea:	9b05      	ldr	r3, [sp, #20]
   1a0ec:	6818      	ldr	r0, [r3, #0]
   1a0ee:	2300      	movs	r3, #0
   1a0f0:	f88d 3010 	strb.w	r3, [sp, #16]
   1a0f4:	a904      	add	r1, sp, #16
   1a0f6:	f642 0303 	movw	r3, #10243	; 0x2803
   1a0fa:	f8ad 3012 	strh.w	r3, [sp, #18]
   1a0fe:	f00a ff6a 	bl	24fd6 <bt_uuid_cmp>
   1a102:	b970      	cbnz	r0, 1a122 <bt_gatt_notify_cb+0xbe>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1a104:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   1a106:	68c3      	ldr	r3, [r0, #12]
   1a108:	799b      	ldrb	r3, [r3, #6]
   1a10a:	06db      	lsls	r3, r3, #27
   1a10c:	d405      	bmi.n	1a11a <bt_gatt_notify_cb+0xb6>
			return -EINVAL;
   1a10e:	f06f 0015 	mvn.w	r0, #21
   1a112:	e7e7      	b.n	1a0e4 <bt_gatt_notify_cb+0x80>
		if (!data.handle) {
   1a114:	2800      	cmp	r0, #0
   1a116:	d1e8      	bne.n	1a0ea <bt_gatt_notify_cb+0x86>
   1a118:	e7e2      	b.n	1a0e0 <bt_gatt_notify_cb+0x7c>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1a11a:	f00c fa04 	bl	26526 <bt_gatt_attr_value_handle>
   1a11e:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_notify(conn, data.handle, params);
   1a122:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   1a126:	b12d      	cbz	r5, 1a134 <bt_gatt_notify_cb+0xd0>
		return gatt_notify(conn, data.handle, params);
   1a128:	4601      	mov	r1, r0
   1a12a:	4622      	mov	r2, r4
   1a12c:	4628      	mov	r0, r5
   1a12e:	f7ff ff59 	bl	19fe4 <gatt_notify>
   1a132:	e7d7      	b.n	1a0e4 <bt_gatt_notify_cb+0x80>
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1a134:	f642 1202 	movw	r2, #10498	; 0x2902
   1a138:	f8ad 2012 	strh.w	r2, [sp, #18]
   1a13c:	aa05      	add	r2, sp, #20
	data.err = -ENOTCONN;
   1a13e:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1a142:	9202      	str	r2, [sp, #8]
   1a144:	4a0f      	ldr	r2, [pc, #60]	; (1a184 <bt_gatt_notify_cb+0x120>)
	data.err = -ENOTCONN;
   1a146:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   1a148:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1a14a:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
   1a14e:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1a152:	aa04      	add	r2, sp, #16
   1a154:	462b      	mov	r3, r5
   1a156:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
   1a15a:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1a15c:	f88d 5010 	strb.w	r5, [sp, #16]
   1a160:	f7ff fc5a 	bl	19a18 <bt_gatt_foreach_attr_type>
	return data.err;
   1a164:	9807      	ldr	r0, [sp, #28]
   1a166:	e7bd      	b.n	1a0e4 <bt_gatt_notify_cb+0x80>
		return -EAGAIN;
   1a168:	f06f 000a 	mvn.w	r0, #10
   1a16c:	e7ba      	b.n	1a0e4 <bt_gatt_notify_cb+0x80>
		return -ENOTCONN;
   1a16e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1a172:	e7b7      	b.n	1a0e4 <bt_gatt_notify_cb+0x80>
   1a174:	0002a67b 	.word	0x0002a67b
   1a178:	000289af 	.word	0x000289af
   1a17c:	2000039c 	.word	0x2000039c
   1a180:	000261d3 	.word	0x000261d3
   1a184:	0001a189 	.word	0x0001a189

0001a188 <notify_cb>:
{
   1a188:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a18c:	4b39      	ldr	r3, [pc, #228]	; (1a274 <notify_cb+0xec>)
{
   1a18e:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a190:	6882      	ldr	r2, [r0, #8]
   1a192:	429a      	cmp	r2, r3
{
   1a194:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a196:	d113      	bne.n	1a1c0 <notify_cb+0x38>
	ccc = attr->user_data;
   1a198:	68c7      	ldr	r7, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   1a19a:	4b37      	ldr	r3, [pc, #220]	; (1a278 <notify_cb+0xf0>)
   1a19c:	429f      	cmp	r7, r3
   1a19e:	d014      	beq.n	1a1ca <notify_cb+0x42>
		if (cfg->value != data->type) {
   1a1a0:	893a      	ldrh	r2, [r7, #8]
   1a1a2:	89a3      	ldrh	r3, [r4, #12]
   1a1a4:	429a      	cmp	r2, r3
   1a1a6:	d10b      	bne.n	1a1c0 <notify_cb+0x38>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1a1a8:	4639      	mov	r1, r7
   1a1aa:	f811 0b01 	ldrb.w	r0, [r1], #1
   1a1ae:	f7fd fca1 	bl	17af4 <bt_conn_lookup_addr_le>
		if (!conn) {
   1a1b2:	4605      	mov	r5, r0
   1a1b4:	b120      	cbz	r0, 1a1c0 <notify_cb+0x38>
		if (conn->state != BT_CONN_CONNECTED) {
   1a1b6:	7b43      	ldrb	r3, [r0, #13]
   1a1b8:	2b07      	cmp	r3, #7
   1a1ba:	d02e      	beq.n	1a21a <notify_cb+0x92>
			bt_conn_unref(conn);
   1a1bc:	f7fd f9fe 	bl	175bc <bt_conn_unref>
	return BT_GATT_ITER_CONTINUE;
   1a1c0:	2701      	movs	r7, #1
}
   1a1c2:	4638      	mov	r0, r7
   1a1c4:	b003      	add	sp, #12
   1a1c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1a1ca:	f04f 0800 	mov.w	r8, #0
   1a1ce:	4d2b      	ldr	r5, [pc, #172]	; (1a27c <notify_cb+0xf4>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1a1d0:	46c1      	mov	r9, r8
   1a1d2:	2207      	movs	r2, #7
   1a1d4:	4669      	mov	r1, sp
   1a1d6:	4628      	mov	r0, r5
   1a1d8:	f8cd 9000 	str.w	r9, [sp]
   1a1dc:	f8cd 9003 	str.w	r9, [sp, #3]
   1a1e0:	f00d fc2c 	bl	27a3c <memcmp>
   1a1e4:	b178      	cbz	r0, 1a206 <notify_cb+0x7e>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   1a1e6:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   1a1ea:	2207      	movs	r2, #7
   1a1ec:	4629      	mov	r1, r5
   1a1ee:	f7fd fcbb 	bl	17b68 <bt_conn_lookup_state_le>
			if (!conn) {
   1a1f2:	b978      	cbnz	r0, 1a214 <notify_cb+0x8c>
				sc = (struct sc_data *)data->ind_params->data;
   1a1f4:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
   1a1f6:	f815 0c01 	ldrb.w	r0, [r5, #-1]
				sc = (struct sc_data *)data->ind_params->data;
   1a1fa:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   1a1fc:	4629      	mov	r1, r5
   1a1fe:	8853      	ldrh	r3, [r2, #2]
   1a200:	8812      	ldrh	r2, [r2, #0]
   1a202:	f7ff f9f3 	bl	195ec <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1a206:	350c      	adds	r5, #12
   1a208:	f1b8 0f00 	cmp.w	r8, #0
   1a20c:	d1c8      	bne.n	1a1a0 <notify_cb+0x18>
   1a20e:	f04f 0801 	mov.w	r8, #1
   1a212:	e7de      	b.n	1a1d2 <notify_cb+0x4a>
			bt_conn_unref(conn);
   1a214:	f7fd f9d2 	bl	175bc <bt_conn_unref>
   1a218:	e7f5      	b.n	1a206 <notify_cb+0x7e>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   1a21a:	697b      	ldr	r3, [r7, #20]
   1a21c:	b123      	cbz	r3, 1a228 <notify_cb+0xa0>
   1a21e:	4631      	mov	r1, r6
   1a220:	4798      	blx	r3
   1a222:	b908      	cbnz	r0, 1a228 <notify_cb+0xa0>
			bt_conn_unref(conn);
   1a224:	4628      	mov	r0, r5
   1a226:	e7c9      	b.n	1a1bc <notify_cb+0x34>
		if (bt_gatt_check_perm(conn, attr,
   1a228:	2214      	movs	r2, #20
   1a22a:	4631      	mov	r1, r6
   1a22c:	4628      	mov	r0, r5
   1a22e:	f00c f9cc 	bl	265ca <bt_gatt_check_perm>
   1a232:	4607      	mov	r7, r0
   1a234:	b120      	cbz	r0, 1a240 <notify_cb+0xb8>
			BT_WARN("Link is not encrypted");
   1a236:	4812      	ldr	r0, [pc, #72]	; (1a280 <notify_cb+0xf8>)
   1a238:	2157      	movs	r1, #87	; 0x57
   1a23a:	f00a f8b6 	bl	243aa <z_log_minimal_printk>
			continue;
   1a23e:	e7bf      	b.n	1a1c0 <notify_cb+0x38>
		if (data->type == BT_GATT_CCC_INDICATE) {
   1a240:	89a3      	ldrh	r3, [r4, #12]
			err = gatt_indicate(conn, data->handle,
   1a242:	88a1      	ldrh	r1, [r4, #4]
   1a244:	6922      	ldr	r2, [r4, #16]
		if (data->type == BT_GATT_CCC_INDICATE) {
   1a246:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
   1a248:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
   1a24a:	d10f      	bne.n	1a26c <notify_cb+0xe4>
			err = gatt_indicate(conn, data->handle,
   1a24c:	f7ff fd94 	bl	19d78 <gatt_indicate>
			if (err == 0) {
   1a250:	4606      	mov	r6, r0
   1a252:	b918      	cbnz	r0, 1a25c <notify_cb+0xd4>
				data->ind_params->_ref++;
   1a254:	6922      	ldr	r2, [r4, #16]
   1a256:	7d93      	ldrb	r3, [r2, #22]
   1a258:	3301      	adds	r3, #1
   1a25a:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   1a25c:	4628      	mov	r0, r5
   1a25e:	f7fd f9ad 	bl	175bc <bt_conn_unref>
		if (err < 0) {
   1a262:	2e00      	cmp	r6, #0
   1a264:	dbad      	blt.n	1a1c2 <notify_cb+0x3a>
		data->err = 0;
   1a266:	2300      	movs	r3, #0
   1a268:	60a3      	str	r3, [r4, #8]
   1a26a:	e7a9      	b.n	1a1c0 <notify_cb+0x38>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   1a26c:	f7ff feba 	bl	19fe4 <gatt_notify>
   1a270:	4606      	mov	r6, r0
   1a272:	e7f3      	b.n	1a25c <notify_cb+0xd4>
   1a274:	000194b5 	.word	0x000194b5
   1a278:	20000618 	.word	0x20000618
   1a27c:	200022f1 	.word	0x200022f1
   1a280:	0002a6ff 	.word	0x0002a6ff

0001a284 <update_ccc>:
{
   1a284:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a288:	4b33      	ldr	r3, [pc, #204]	; (1a358 <update_ccc+0xd4>)
	struct bt_conn *conn = data->conn;
   1a28a:	6814      	ldr	r4, [r2, #0]
{
   1a28c:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a28e:	6882      	ldr	r2, [r0, #8]
   1a290:	429a      	cmp	r2, r3
{
   1a292:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a294:	d116      	bne.n	1a2c4 <update_ccc+0x40>
	ccc = attr->user_data;
   1a296:	68c7      	ldr	r7, [r0, #12]
		if (!cfg->value ||
   1a298:	893b      	ldrh	r3, [r7, #8]
   1a29a:	b19b      	cbz	r3, 1a2c4 <update_ccc+0x40>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1a29c:	463a      	mov	r2, r7
   1a29e:	4620      	mov	r0, r4
   1a2a0:	f812 1b01 	ldrb.w	r1, [r2], #1
   1a2a4:	f00b fac4 	bl	25830 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   1a2a8:	b160      	cbz	r0, 1a2c4 <update_ccc+0x40>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   1a2aa:	222a      	movs	r2, #42	; 0x2a
   1a2ac:	4629      	mov	r1, r5
   1a2ae:	4620      	mov	r0, r4
   1a2b0:	f00c f98b 	bl	265ca <bt_gatt_check_perm>
		if (err) {
   1a2b4:	b1d8      	cbz	r0, 1a2ee <update_ccc+0x6a>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   1a2b6:	2803      	cmp	r0, #3
   1a2b8:	d108      	bne.n	1a2cc <update_ccc+0x48>
				BT_WARN("CCC %p not writable", attr);
   1a2ba:	4828      	ldr	r0, [pc, #160]	; (1a35c <update_ccc+0xd8>)
   1a2bc:	462a      	mov	r2, r5
   1a2be:	2157      	movs	r1, #87	; 0x57
   1a2c0:	f00a f873 	bl	243aa <z_log_minimal_printk>
}
   1a2c4:	2001      	movs	r0, #1
   1a2c6:	b002      	add	sp, #8
   1a2c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				sec = BT_SECURITY_L3;
   1a2cc:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
   1a2ce:	4620      	mov	r0, r4
				sec = BT_SECURITY_L3;
   1a2d0:	bf14      	ite	ne
   1a2d2:	f04f 0802 	movne.w	r8, #2
   1a2d6:	f04f 0803 	moveq.w	r8, #3
			    bt_conn_get_security(conn) < sec) {
   1a2da:	f00b faa7 	bl	2582c <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   1a2de:	4580      	cmp	r8, r0
   1a2e0:	d905      	bls.n	1a2ee <update_ccc+0x6a>
				if (data->sec < sec) {
   1a2e2:	7933      	ldrb	r3, [r6, #4]
   1a2e4:	4543      	cmp	r3, r8
   1a2e6:	d2ed      	bcs.n	1a2c4 <update_ccc+0x40>
					data->sec = sec;
   1a2e8:	f886 8004 	strb.w	r8, [r6, #4]
   1a2ec:	e7ea      	b.n	1a2c4 <update_ccc+0x40>
		gatt_ccc_changed(attr, ccc);
   1a2ee:	4639      	mov	r1, r7
   1a2f0:	4628      	mov	r0, r5
   1a2f2:	f00b ff51 	bl	26198 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   1a2f6:	4b1a      	ldr	r3, [pc, #104]	; (1a360 <update_ccc+0xdc>)
   1a2f8:	429f      	cmp	r7, r3
   1a2fa:	d1e3      	bne.n	1a2c4 <update_ccc+0x40>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1a2fc:	7a20      	ldrb	r0, [r4, #8]
   1a2fe:	f104 0190 	add.w	r1, r4, #144	; 0x90
   1a302:	f7ff f951 	bl	195a8 <find_sc_cfg>
	if (!cfg) {
   1a306:	2800      	cmp	r0, #0
   1a308:	d0dc      	beq.n	1a2c4 <update_ccc+0x40>
	if (!(cfg->data.start || cfg->data.end)) {
   1a30a:	8902      	ldrh	r2, [r0, #8]
   1a30c:	8943      	ldrh	r3, [r0, #10]
   1a30e:	ea52 0103 	orrs.w	r1, r2, r3
   1a312:	d0d7      	beq.n	1a2c4 <update_ccc+0x40>
	index = bt_conn_index(conn);
   1a314:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   1a316:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   1a31a:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   1a31e:	f7fd fa5d 	bl	177dc <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1a322:	4910      	ldr	r1, [pc, #64]	; (1a364 <update_ccc+0xe0>)
   1a324:	4a10      	ldr	r2, [pc, #64]	; (1a368 <update_ccc+0xe4>)
   1a326:	2318      	movs	r3, #24
   1a328:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1a32c:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1a32e:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   1a330:	4a0e      	ldr	r2, [pc, #56]	; (1a36c <update_ccc+0xe8>)
   1a332:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   1a334:	aa01      	add	r2, sp, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1a336:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].data = &sc_range[0];
   1a33a:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   1a33c:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1a33e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   1a342:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1a344:	4620      	mov	r0, r4
   1a346:	f7ff fd71 	bl	19e2c <bt_gatt_indicate>
   1a34a:	2800      	cmp	r0, #0
   1a34c:	d0ba      	beq.n	1a2c4 <update_ccc+0x40>
		BT_ERR("SC restore indication failed");
   1a34e:	4808      	ldr	r0, [pc, #32]	; (1a370 <update_ccc+0xec>)
   1a350:	2145      	movs	r1, #69	; 0x45
   1a352:	f00a f82a 	bl	243aa <z_log_minimal_printk>
   1a356:	e7b5      	b.n	1a2c4 <update_ccc+0x40>
   1a358:	000194b5 	.word	0x000194b5
   1a35c:	0002a774 	.word	0x0002a774
   1a360:	20000618 	.word	0x20000618
   1a364:	20001fbc 	.word	0x20001fbc
   1a368:	0002831c 	.word	0x0002831c
   1a36c:	000264eb 	.word	0x000264eb
   1a370:	0002a78d 	.word	0x0002a78d

0001a374 <bt_gatt_connected>:
{
   1a374:	b570      	push	{r4, r5, r6, lr}
   1a376:	b08e      	sub	sp, #56	; 0x38
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1a378:	f100 0590 	add.w	r5, r0, #144	; 0x90
{
   1a37c:	4604      	mov	r4, r0
	data.conn = conn;
   1a37e:	9003      	str	r0, [sp, #12]
	data.sec = BT_SECURITY_L1;
   1a380:	2301      	movs	r3, #1
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1a382:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
   1a384:	f88d 3010 	strb.w	r3, [sp, #16]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1a388:	4629      	mov	r1, r5
   1a38a:	f00a ff9c 	bl	252c6 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   1a38e:	b190      	cbz	r0, 1a3b6 <bt_gatt_connected+0x42>
		if (conn->id) {
   1a390:	7a22      	ldrb	r2, [r4, #8]
   1a392:	b34a      	cbz	r2, 1a3e8 <bt_gatt_connected+0x74>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   1a394:	ae02      	add	r6, sp, #8
   1a396:	2104      	movs	r1, #4
   1a398:	4630      	mov	r0, r6
   1a39a:	f009 fdb3 	bl	23f04 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1a39e:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1a3a0:	4a12      	ldr	r2, [pc, #72]	; (1a3ec <bt_gatt_connected+0x78>)
   1a3a2:	2124      	movs	r1, #36	; 0x24
   1a3a4:	a805      	add	r0, sp, #20
   1a3a6:	462b      	mov	r3, r5
   1a3a8:	f7fa fd96 	bl	14ed8 <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
   1a3ac:	aa05      	add	r2, sp, #20
   1a3ae:	4910      	ldr	r1, [pc, #64]	; (1a3f0 <bt_gatt_connected+0x7c>)
   1a3b0:	4610      	mov	r0, r2
   1a3b2:	f7f9 fb1d 	bl	139f0 <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1a3b6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1a3ba:	4a0e      	ldr	r2, [pc, #56]	; (1a3f4 <bt_gatt_connected+0x80>)
   1a3bc:	ab03      	add	r3, sp, #12
   1a3be:	2001      	movs	r0, #1
   1a3c0:	f00c f8f8 	bl	265b4 <bt_gatt_foreach_attr>
	    bt_conn_get_security(conn) < data.sec) {
   1a3c4:	4620      	mov	r0, r4
   1a3c6:	f00b fa31 	bl	2582c <bt_conn_get_security>
   1a3ca:	f89d 1010 	ldrb.w	r1, [sp, #16]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   1a3ce:	4288      	cmp	r0, r1
   1a3d0:	d208      	bcs.n	1a3e4 <bt_gatt_connected+0x70>
		int err = bt_conn_set_security(conn, data.sec);
   1a3d2:	4620      	mov	r0, r4
   1a3d4:	f00b f9fa 	bl	257cc <bt_conn_set_security>
		if (err) {
   1a3d8:	4602      	mov	r2, r0
   1a3da:	b118      	cbz	r0, 1a3e4 <bt_gatt_connected+0x70>
			BT_WARN("Failed to set security for bonded peer (%d)",
   1a3dc:	4806      	ldr	r0, [pc, #24]	; (1a3f8 <bt_gatt_connected+0x84>)
   1a3de:	2157      	movs	r1, #87	; 0x57
   1a3e0:	f009 ffe3 	bl	243aa <z_log_minimal_printk>
}
   1a3e4:	b00e      	add	sp, #56	; 0x38
   1a3e6:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1a3e8:	9200      	str	r2, [sp, #0]
   1a3ea:	e7d9      	b.n	1a3a0 <bt_gatt_connected+0x2c>
   1a3ec:	0002a6ea 	.word	0x0002a6ea
   1a3f0:	00019c95 	.word	0x00019c95
   1a3f4:	0001a285 	.word	0x0001a285
   1a3f8:	0002a7af 	.word	0x0002a7af

0001a3fc <bt_gatt_att_max_mtu_changed>:
{
   1a3fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
   1a3fe:	4b08      	ldr	r3, [pc, #32]	; (1a420 <bt_gatt_att_max_mtu_changed+0x24>)
   1a400:	681c      	ldr	r4, [r3, #0]
   1a402:	4605      	mov	r5, r0
   1a404:	460e      	mov	r6, r1
   1a406:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1a408:	b14c      	cbz	r4, 1a41e <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   1a40a:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1a40e:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   1a410:	b11b      	cbz	r3, 1a41a <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   1a412:	463a      	mov	r2, r7
   1a414:	4631      	mov	r1, r6
   1a416:	4628      	mov	r0, r5
   1a418:	4798      	blx	r3
	return node->next;
   1a41a:	6864      	ldr	r4, [r4, #4]
   1a41c:	e7f4      	b.n	1a408 <bt_gatt_att_max_mtu_changed+0xc>
}
   1a41e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a420:	20001f90 	.word	0x20001f90

0001a424 <bt_gatt_encrypt_change>:
{
   1a424:	b507      	push	{r0, r1, r2, lr}
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1a426:	4a06      	ldr	r2, [pc, #24]	; (1a440 <bt_gatt_encrypt_change+0x1c>)
	data.conn = conn;
   1a428:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1a42a:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   1a42c:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1a42e:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   1a432:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1a436:	f00c f8bd 	bl	265b4 <bt_gatt_foreach_attr>
}
   1a43a:	b003      	add	sp, #12
   1a43c:	f85d fb04 	ldr.w	pc, [sp], #4
   1a440:	0001a285 	.word	0x0001a285

0001a444 <bt_gatt_store_ccc>:
{
   1a444:	b570      	push	{r4, r5, r6, lr}
   1a446:	b0c0      	sub	sp, #256	; 0x100
	save.count = 0;
   1a448:	2300      	movs	r3, #0
{
   1a44a:	4604      	mov	r4, r0
   1a44c:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
   1a44e:	910d      	str	r1, [sp, #52]	; 0x34
	save.addr_with_id.id = id;
   1a450:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
	save.count = 0;
   1a454:	933f      	str	r3, [sp, #252]	; 0xfc
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
   1a456:	4a15      	ldr	r2, [pc, #84]	; (1a4ac <bt_gatt_store_ccc+0x68>)
   1a458:	ab0d      	add	r3, sp, #52	; 0x34
   1a45a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1a45e:	2001      	movs	r0, #1
   1a460:	f00c f8a8 	bl	265b4 <bt_gatt_foreach_attr>
	if (id) {
   1a464:	b1ec      	cbz	r4, 1a4a2 <bt_gatt_store_ccc+0x5e>
		u8_to_dec(id_str, sizeof(id_str), id);
   1a466:	ae03      	add	r6, sp, #12
   1a468:	4622      	mov	r2, r4
   1a46a:	2104      	movs	r1, #4
   1a46c:	4630      	mov	r0, r6
   1a46e:	f009 fd49 	bl	23f04 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
   1a472:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   1a474:	4a0e      	ldr	r2, [pc, #56]	; (1a4b0 <bt_gatt_store_ccc+0x6c>)
   1a476:	462b      	mov	r3, r5
   1a478:	2124      	movs	r1, #36	; 0x24
   1a47a:	a804      	add	r0, sp, #16
   1a47c:	f7fa fd2c 	bl	14ed8 <bt_settings_encode_key>
	if (save.count) {
   1a480:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
   1a482:	b182      	cbz	r2, 1a4a6 <bt_gatt_store_ccc+0x62>
		len = save.count * sizeof(*save.store);
   1a484:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
   1a486:	a90f      	add	r1, sp, #60	; 0x3c
	err = settings_save_one(key, str, len);
   1a488:	a804      	add	r0, sp, #16
   1a48a:	f7f9 fa51 	bl	13930 <settings_save_one>
	if (err) {
   1a48e:	4604      	mov	r4, r0
   1a490:	b120      	cbz	r0, 1a49c <bt_gatt_store_ccc+0x58>
		BT_ERR("Failed to store CCCs (err %d)", err);
   1a492:	4602      	mov	r2, r0
   1a494:	2145      	movs	r1, #69	; 0x45
   1a496:	4807      	ldr	r0, [pc, #28]	; (1a4b4 <bt_gatt_store_ccc+0x70>)
   1a498:	f009 ff87 	bl	243aa <z_log_minimal_printk>
}
   1a49c:	4620      	mov	r0, r4
   1a49e:	b040      	add	sp, #256	; 0x100
   1a4a0:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   1a4a2:	9400      	str	r4, [sp, #0]
   1a4a4:	e7e6      	b.n	1a474 <bt_gatt_store_ccc+0x30>
		str = NULL;
   1a4a6:	4611      	mov	r1, r2
   1a4a8:	e7ee      	b.n	1a488 <bt_gatt_store_ccc+0x44>
   1a4aa:	bf00      	nop
   1a4ac:	0001947d 	.word	0x0001947d
   1a4b0:	0002a6ea 	.word	0x0002a6ea
   1a4b4:	0002a7e0 	.word	0x0002a7e0

0001a4b8 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   1a4b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1a4ba:	4603      	mov	r3, r0
   1a4bc:	4a3d      	ldr	r2, [pc, #244]	; (1a5b4 <bt_gatt_disconnected+0xfc>)
	if (gatt_ccc_store.conn_list[index] != NULL) {
   1a4be:	4e3e      	ldr	r6, [pc, #248]	; (1a5b8 <bt_gatt_disconnected+0x100>)
{
   1a4c0:	b08d      	sub	sp, #52	; 0x34
   1a4c2:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1a4c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1a4c8:	2001      	movs	r0, #1
   1a4ca:	f00c f873 	bl	265b4 <bt_gatt_foreach_attr>
	uint8_t index = bt_conn_index(conn);
   1a4ce:	4620      	mov	r0, r4
   1a4d0:	f7fd f984 	bl	177dc <bt_conn_index>
   1a4d4:	4605      	mov	r5, r0
	if (gatt_ccc_store.conn_list[index] != NULL) {
   1a4d6:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
   1a4da:	b120      	cbz	r0, 1a4e6 <bt_gatt_disconnected+0x2e>
		bt_conn_unref(gatt_ccc_store.conn_list[index]);
   1a4dc:	f7fd f86e 	bl	175bc <bt_conn_unref>
		gatt_ccc_store.conn_list[index] = NULL;
   1a4e0:	2300      	movs	r3, #0
   1a4e2:	f846 3025 	str.w	r3, [r6, r5, lsl #2]

#if defined(CONFIG_BT_SETTINGS_CCC_STORE_ON_WRITE)
	gatt_ccc_conn_unqueue(conn);

	if (gatt_ccc_conn_queue_is_empty()) {
		k_work_cancel_delayable(&gatt_ccc_store.work);
   1a4e6:	4835      	ldr	r0, [pc, #212]	; (1a5bc <bt_gatt_disconnected+0x104>)
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1a4e8:	f104 0590 	add.w	r5, r4, #144	; 0x90
		k_work_cancel_delayable(&gatt_ccc_store.work);
   1a4ec:	f007 f892 	bl	21614 <k_work_cancel_delayable>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1a4f0:	7a20      	ldrb	r0, [r4, #8]
   1a4f2:	4629      	mov	r1, r5
   1a4f4:	f00a fee7 	bl	252c6 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   1a4f8:	b378      	cbz	r0, 1a55a <bt_gatt_disconnected+0xa2>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
   1a4fa:	4629      	mov	r1, r5
   1a4fc:	7a20      	ldrb	r0, [r4, #8]
   1a4fe:	f7ff ffa1 	bl	1a444 <bt_gatt_store_ccc>
	cfg = find_cf_cfg(conn);
   1a502:	4620      	mov	r0, r4
   1a504:	f7fe fe20 	bl	19148 <find_cf_cfg>
	if (!cfg) {
   1a508:	4606      	mov	r6, r0
   1a50a:	2800      	cmp	r0, #0
   1a50c:	d045      	beq.n	1a59a <bt_gatt_disconnected+0xe2>
		if (conn->id) {
   1a50e:	7a22      	ldrb	r2, [r4, #8]
		str = (char *)cfg->data;
   1a510:	3608      	adds	r6, #8
		if (conn->id) {
   1a512:	2a00      	cmp	r2, #0
   1a514:	d043      	beq.n	1a59e <bt_gatt_disconnected+0xe6>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   1a516:	af02      	add	r7, sp, #8
   1a518:	2104      	movs	r1, #4
   1a51a:	4638      	mov	r0, r7
   1a51c:	f009 fcf2 	bl	23f04 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   1a520:	9700      	str	r7, [sp, #0]
   1a522:	462b      	mov	r3, r5
   1a524:	4a26      	ldr	r2, [pc, #152]	; (1a5c0 <bt_gatt_disconnected+0x108>)
   1a526:	2124      	movs	r1, #36	; 0x24
   1a528:	a803      	add	r0, sp, #12
   1a52a:	f7fa fcd5 	bl	14ed8 <bt_settings_encode_key>
	if (!cfg || !conn->id) {
   1a52e:	7a23      	ldrb	r3, [r4, #8]
   1a530:	2701      	movs	r7, #1
   1a532:	b93b      	cbnz	r3, 1a544 <bt_gatt_disconnected+0x8c>
		bt_settings_encode_key(key, sizeof(key), "cf",
   1a534:	2300      	movs	r3, #0
   1a536:	9300      	str	r3, [sp, #0]
   1a538:	4a21      	ldr	r2, [pc, #132]	; (1a5c0 <bt_gatt_disconnected+0x108>)
   1a53a:	462b      	mov	r3, r5
   1a53c:	2124      	movs	r1, #36	; 0x24
   1a53e:	a803      	add	r0, sp, #12
   1a540:	f7fa fcca 	bl	14ed8 <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
   1a544:	463a      	mov	r2, r7
   1a546:	4631      	mov	r1, r6
   1a548:	a803      	add	r0, sp, #12
   1a54a:	f7f9 f9f1 	bl	13930 <settings_save_one>
	if (err) {
   1a54e:	4602      	mov	r2, r0
   1a550:	b118      	cbz	r0, 1a55a <bt_gatt_disconnected+0xa2>
		BT_ERR("Failed to store Client Features (err %d)", err);
   1a552:	481c      	ldr	r0, [pc, #112]	; (1a5c4 <bt_gatt_disconnected+0x10c>)
   1a554:	2145      	movs	r1, #69	; 0x45
   1a556:	f009 ff28 	bl	243aa <z_log_minimal_printk>
		bt_gatt_store_cf(conn);
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1a55a:	7a20      	ldrb	r0, [r4, #8]
   1a55c:	4629      	mov	r1, r5
   1a55e:	f00a feb2 	bl	252c6 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   1a562:	b150      	cbz	r0, 1a57a <bt_gatt_disconnected+0xc2>
		struct addr_with_id addr_with_id = {
   1a564:	7a23      	ldrb	r3, [r4, #8]
   1a566:	f88d 3010 	strb.w	r3, [sp, #16]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
   1a56a:	4a17      	ldr	r2, [pc, #92]	; (1a5c8 <bt_gatt_disconnected+0x110>)
		struct addr_with_id addr_with_id = {
   1a56c:	9503      	str	r5, [sp, #12]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   1a56e:	ab03      	add	r3, sp, #12
   1a570:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1a574:	2001      	movs	r0, #1
   1a576:	f00c f81d 	bl	265b4 <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   1a57a:	4620      	mov	r0, r4
   1a57c:	f7fe fde4 	bl	19148 <find_cf_cfg>
	if (!cfg) {
   1a580:	4606      	mov	r6, r0
   1a582:	b1a8      	cbz	r0, 1a5b0 <bt_gatt_disconnected+0xf8>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1a584:	7a20      	ldrb	r0, [r4, #8]
   1a586:	4629      	mov	r1, r5
   1a588:	f00a fe9d 	bl	252c6 <bt_addr_le_is_bonded>
   1a58c:	b948      	cbnz	r0, 1a5a2 <bt_gatt_disconnected+0xea>
		clear_cf_cfg(cfg);
   1a58e:	4630      	mov	r0, r6
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   1a590:	b00d      	add	sp, #52	; 0x34
   1a592:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		clear_cf_cfg(cfg);
   1a596:	f00b bf40 	b.w	2641a <clear_cf_cfg>
		len = 0;
   1a59a:	4607      	mov	r7, r0
   1a59c:	e7ca      	b.n	1a534 <bt_gatt_disconnected+0x7c>
   1a59e:	2701      	movs	r7, #1
   1a5a0:	e7c8      	b.n	1a534 <bt_gatt_disconnected+0x7c>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1a5a2:	4629      	mov	r1, r5
   1a5a4:	1c70      	adds	r0, r6, #1
}
   1a5a6:	b00d      	add	sp, #52	; 0x34
   1a5a8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1a5ac:	f00b be90 	b.w	262d0 <bt_addr_le_copy>
}
   1a5b0:	b00d      	add	sp, #52	; 0x34
   1a5b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a5b4:	000196fd 	.word	0x000196fd
   1a5b8:	20001898 	.word	0x20001898
   1a5bc:	200018a0 	.word	0x200018a0
   1a5c0:	0002a834 	.word	0x0002a834
   1a5c4:	0002a803 	.word	0x0002a803
   1a5c8:	000193cd 	.word	0x000193cd

0001a5cc <get_io_capa>:
	       BT_CMD_TEST(bt_dev.supported_commands, 34, 2);
}

static uint8_t get_io_capa(void)
{
	if (!bt_auth) {
   1a5cc:	4b10      	ldr	r3, [pc, #64]	; (1a610 <get_io_capa+0x44>)
   1a5ce:	681b      	ldr	r3, [r3, #0]
   1a5d0:	b1bb      	cbz	r3, 1a602 <get_io_capa+0x36>
		goto no_callbacks;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
   1a5d2:	681a      	ldr	r2, [r3, #0]
   1a5d4:	b142      	cbz	r2, 1a5e8 <get_io_capa+0x1c>
   1a5d6:	6859      	ldr	r1, [r3, #4]
   1a5d8:	b131      	cbz	r1, 1a5e8 <get_io_capa+0x1c>
   1a5da:	6899      	ldr	r1, [r3, #8]
   1a5dc:	b911      	cbnz	r1, 1a5e4 <get_io_capa+0x18>
	    (bt_auth->passkey_confirm || !sc_supported)) {
   1a5de:	490d      	ldr	r1, [pc, #52]	; (1a614 <get_io_capa+0x48>)
   1a5e0:	7809      	ldrb	r1, [r1, #0]
   1a5e2:	b939      	cbnz	r1, 1a5f4 <get_io_capa+0x28>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   1a5e4:	2004      	movs	r0, #4
   1a5e6:	4770      	bx	lr
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
   1a5e8:	490a      	ldr	r1, [pc, #40]	; (1a614 <get_io_capa+0x48>)
   1a5ea:	7809      	ldrb	r1, [r1, #0]
   1a5ec:	b111      	cbz	r1, 1a5f4 <get_io_capa+0x28>
   1a5ee:	b10a      	cbz	r2, 1a5f4 <get_io_capa+0x28>
   1a5f0:	6899      	ldr	r1, [r3, #8]
   1a5f2:	b941      	cbnz	r1, 1a606 <get_io_capa+0x3a>
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
	}

	if (bt_auth->passkey_entry) {
   1a5f4:	685b      	ldr	r3, [r3, #4]
   1a5f6:	b943      	cbnz	r3, 1a60a <get_io_capa+0x3e>
			return BT_SMP_IO_KEYBOARD_ONLY;
		}
	}

	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
   1a5f8:	2a00      	cmp	r2, #0
   1a5fa:	bf0c      	ite	eq
   1a5fc:	2003      	moveq	r0, #3
   1a5fe:	2000      	movne	r0, #0
   1a600:	4770      	bx	lr
no_callbacks:
	if (IS_ENABLED(CONFIG_BT_FIXED_PASSKEY) &&
	    fixed_passkey != BT_PASSKEY_INVALID) {
		return BT_SMP_IO_DISPLAY_ONLY;
	} else {
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   1a602:	2003      	movs	r0, #3
   1a604:	4770      	bx	lr
		return BT_SMP_IO_DISPLAY_YESNO;
   1a606:	2001      	movs	r0, #1
   1a608:	4770      	bx	lr
			return BT_SMP_IO_KEYBOARD_ONLY;
   1a60a:	2002      	movs	r0, #2
	}
}
   1a60c:	4770      	bx	lr
   1a60e:	bf00      	nop
   1a610:	20001e9c 	.word	0x20001e9c
   1a614:	200023f7 	.word	0x200023f7

0001a618 <smp_find>:

	return 0;
}

static struct bt_smp *smp_find(int flag)
{
   1a618:	4601      	mov	r1, r0
   1a61a:	b508      	push	{r3, lr}
	for (int i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   1a61c:	4803      	ldr	r0, [pc, #12]	; (1a62c <smp_find+0x14>)
   1a61e:	f00c f851 	bl	266c4 <atomic_test_bit>
			return &bt_smp_pool[i];
		}
	}

	return NULL;
   1a622:	2800      	cmp	r0, #0
}
   1a624:	4802      	ldr	r0, [pc, #8]	; (1a630 <smp_find+0x18>)
   1a626:	bf08      	it	eq
   1a628:	2000      	moveq	r0, #0
   1a62a:	bd08      	pop	{r3, pc}
   1a62c:	2000192c 	.word	0x2000192c
   1a630:	20001928 	.word	0x20001928

0001a634 <sys_memcpy_swap>:
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1a634:	4288      	cmp	r0, r1
{
   1a636:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a638:	4604      	mov	r4, r0
   1a63a:	460d      	mov	r5, r1
   1a63c:	4616      	mov	r6, r2
   1a63e:	eb00 0702 	add.w	r7, r0, r2
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1a642:	d916      	bls.n	1a672 <sys_memcpy_swap+0x3e>
   1a644:	188b      	adds	r3, r1, r2
   1a646:	4298      	cmp	r0, r3
   1a648:	d20a      	bcs.n	1a660 <sys_memcpy_swap+0x2c>
   1a64a:	490b      	ldr	r1, [pc, #44]	; (1a678 <sys_memcpy_swap+0x44>)
   1a64c:	480b      	ldr	r0, [pc, #44]	; (1a67c <sys_memcpy_swap+0x48>)
   1a64e:	f240 2217 	movw	r2, #535	; 0x217
   1a652:	f009 fe9c 	bl	2438e <assert_print>
   1a656:	4808      	ldr	r0, [pc, #32]	; (1a678 <sys_memcpy_swap+0x44>)
   1a658:	f240 2117 	movw	r1, #535	; 0x217
   1a65c:	f009 fe90 	bl	24380 <assert_post_action>
	psrc += length - 1;
   1a660:	3e01      	subs	r6, #1
   1a662:	4435      	add	r5, r6
		*pdst++ = *psrc--;
   1a664:	f815 3901 	ldrb.w	r3, [r5], #-1
   1a668:	f804 3b01 	strb.w	r3, [r4], #1
	for (; length > 0; length--) {
   1a66c:	42bc      	cmp	r4, r7
   1a66e:	d1f9      	bne.n	1a664 <sys_memcpy_swap+0x30>
}
   1a670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1a672:	d0ea      	beq.n	1a64a <sys_memcpy_swap+0x16>
   1a674:	42b9      	cmp	r1, r7
   1a676:	e7e7      	b.n	1a648 <sys_memcpy_swap+0x14>
   1a678:	0002a845 	.word	0x0002a845
   1a67c:	000289af 	.word	0x000289af

0001a680 <smp_chan_get>:
{
   1a680:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   1a682:	2106      	movs	r1, #6
   1a684:	f00b f981 	bl	2598a <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1a688:	4604      	mov	r4, r0
   1a68a:	b928      	cbnz	r0, 1a698 <smp_chan_get+0x18>
		BT_ERR("Unable to find SMP channel");
   1a68c:	4804      	ldr	r0, [pc, #16]	; (1a6a0 <smp_chan_get+0x20>)
   1a68e:	2145      	movs	r1, #69	; 0x45
   1a690:	f009 fe8b 	bl	243aa <z_log_minimal_printk>
}
   1a694:	4620      	mov	r0, r4
   1a696:	bd10      	pop	{r4, pc}
	return CONTAINER_OF(chan, struct bt_smp, chan);
   1a698:	f1a0 04ec 	sub.w	r4, r0, #236	; 0xec
   1a69c:	e7fa      	b.n	1a694 <smp_chan_get+0x14>
   1a69e:	bf00      	nop
   1a6a0:	0002a877 	.word	0x0002a877

0001a6a4 <bt_smp_accept>:
		conn->le.keys->flags &= ~BT_KEYS_SC;
	}
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   1a6a4:	b508      	push	{r3, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
   1a6a6:	4b09      	ldr	r3, [pc, #36]	; (1a6cc <bt_smp_accept+0x28>)
{
   1a6a8:	4602      	mov	r2, r0
		if (smp->chan.chan.conn) {
   1a6aa:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
   1a6ae:	b928      	cbnz	r0, 1a6bc <bt_smp_accept+0x18>
			continue;
		}

		smp->chan.chan.ops = &ops;
   1a6b0:	4a07      	ldr	r2, [pc, #28]	; (1a6d0 <bt_smp_accept+0x2c>)
   1a6b2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

		*chan = &smp->chan.chan;
   1a6b6:	33ec      	adds	r3, #236	; 0xec
   1a6b8:	600b      	str	r3, [r1, #0]
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
   1a6ba:	bd08      	pop	{r3, pc}
	BT_ERR("No available SMP context for conn %p", conn);
   1a6bc:	4805      	ldr	r0, [pc, #20]	; (1a6d4 <bt_smp_accept+0x30>)
   1a6be:	2145      	movs	r1, #69	; 0x45
   1a6c0:	f009 fe73 	bl	243aa <z_log_minimal_printk>
   1a6c4:	f06f 000b 	mvn.w	r0, #11
   1a6c8:	e7f7      	b.n	1a6ba <bt_smp_accept+0x16>
   1a6ca:	bf00      	nop
   1a6cc:	20001928 	.word	0x20001928
   1a6d0:	00028498 	.word	0x00028498
   1a6d4:	0002a897 	.word	0x0002a897

0001a6d8 <get_auth.constprop.0>:
	if (sc_supported) {
   1a6d8:	4b0c      	ldr	r3, [pc, #48]	; (1a70c <get_auth.constprop.0+0x34>)
   1a6da:	781b      	ldrb	r3, [r3, #0]
static uint8_t get_auth(struct bt_conn *conn, uint8_t auth)
   1a6dc:	b510      	push	{r4, lr}
	if (sc_supported) {
   1a6de:	b17b      	cbz	r3, 1a700 <get_auth.constprop.0+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
   1a6e0:	f000 040f 	and.w	r4, r0, #15
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   1a6e4:	f7ff ff72 	bl	1a5cc <get_io_capa>
	if (bondable) {
   1a6e8:	4b09      	ldr	r3, [pc, #36]	; (1a710 <get_auth.constprop.0+0x38>)
   1a6ea:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   1a6ec:	2803      	cmp	r0, #3
		auth &= ~(BT_SMP_AUTH_MITM);
   1a6ee:	bf0c      	ite	eq
   1a6f0:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
   1a6f4:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
   1a6f8:	b12b      	cbz	r3, 1a706 <get_auth.constprop.0+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
   1a6fa:	f044 0001 	orr.w	r0, r4, #1
}
   1a6fe:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
   1a700:	f000 0407 	and.w	r4, r0, #7
   1a704:	e7ee      	b.n	1a6e4 <get_auth.constprop.0+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
   1a706:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
   1a70a:	e7f8      	b.n	1a6fe <get_auth.constprop.0+0x26>
   1a70c:	200023f7 	.word	0x200023f7
   1a710:	200007ff 	.word	0x200007ff

0001a714 <smp_init>:
{
   1a714:	b538      	push	{r3, r4, r5, lr}
__ssp_bos_icheck3(memset, void *, int)
   1a716:	22ec      	movs	r2, #236	; 0xec
   1a718:	4605      	mov	r5, r0
   1a71a:	2100      	movs	r1, #0
   1a71c:	f00d f9bf 	bl	27a9e <memset>
	if (bt_rand(smp->prnd, 16)) {
   1a720:	2110      	movs	r1, #16
   1a722:	f105 0027 	add.w	r0, r5, #39	; 0x27
   1a726:	f004 f98f 	bl	1ea48 <bt_rand>
   1a72a:	4604      	mov	r4, r0
   1a72c:	b948      	cbnz	r0, 1a742 <smp_init+0x2e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
   1a72e:	2105      	movs	r1, #5
   1a730:	4628      	mov	r0, r5
   1a732:	f00c f8c5 	bl	268c0 <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
   1a736:	f7fc fc63 	bl	17000 <bt_pub_key_get>
   1a73a:	4b03      	ldr	r3, [pc, #12]	; (1a748 <smp_init+0x34>)
   1a73c:	6018      	str	r0, [r3, #0]
}
   1a73e:	4620      	mov	r0, r4
   1a740:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   1a742:	2408      	movs	r4, #8
   1a744:	e7fb      	b.n	1a73e <smp_init+0x2a>
   1a746:	bf00      	nop
   1a748:	20001fd8 	.word	0x20001fd8

0001a74c <smp_dhkey_generate>:
{
   1a74c:	b538      	push	{r3, r4, r5, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1a74e:	1d05      	adds	r5, r0, #4
{
   1a750:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1a752:	2108      	movs	r1, #8
   1a754:	4628      	mov	r0, r5
   1a756:	f00c f8b3 	bl	268c0 <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
   1a75a:	4908      	ldr	r1, [pc, #32]	; (1a77c <smp_dhkey_generate+0x30>)
   1a75c:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1a760:	f7fc fc5e 	bl	17020 <bt_dh_key_gen>
	if (err) {
   1a764:	b140      	cbz	r0, 1a778 <smp_dhkey_generate+0x2c>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1a766:	2108      	movs	r1, #8
   1a768:	4628      	mov	r0, r5
   1a76a:	f00b ffd5 	bl	26718 <atomic_clear_bit>
		BT_ERR("Failed to generate DHKey");
   1a76e:	4804      	ldr	r0, [pc, #16]	; (1a780 <smp_dhkey_generate+0x34>)
   1a770:	2145      	movs	r1, #69	; 0x45
   1a772:	f009 fe1a 	bl	243aa <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1a776:	2008      	movs	r0, #8
}
   1a778:	bd38      	pop	{r3, r4, r5, pc}
   1a77a:	bf00      	nop
   1a77c:	00026d59 	.word	0x00026d59
   1a780:	0002a8c1 	.word	0x0002a8c1

0001a784 <smp_ident_info>:
{
   1a784:	b570      	push	{r4, r5, r6, lr}
   1a786:	460b      	mov	r3, r1
   1a788:	4605      	mov	r5, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1a78a:	210d      	movs	r1, #13
   1a78c:	3004      	adds	r0, #4
   1a78e:	f00b ff99 	bl	266c4 <atomic_test_bit>
   1a792:	b1f8      	cbz	r0, 1a7d4 <smp_ident_info+0x50>
		struct bt_smp_ident_info *req = (void *)buf->data;
   1a794:	689c      	ldr	r4, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   1a796:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1a79a:	f103 0690 	add.w	r6, r3, #144	; 0x90
   1a79e:	7a19      	ldrb	r1, [r3, #8]
   1a7a0:	4632      	mov	r2, r6
   1a7a2:	2002      	movs	r0, #2
   1a7a4:	f00c fb54 	bl	26e50 <bt_keys_get_type>
		if (!keys) {
   1a7a8:	b948      	cbnz	r0, 1a7be <smp_ident_info+0x3a>
			BT_ERR("Unable to get keys for %s",
   1a7aa:	4630      	mov	r0, r6
   1a7ac:	f7fa fae6 	bl	14d7c <bt_addr_le_str_real>
   1a7b0:	2145      	movs	r1, #69	; 0x45
   1a7b2:	4602      	mov	r2, r0
   1a7b4:	480a      	ldr	r0, [pc, #40]	; (1a7e0 <smp_ident_info+0x5c>)
   1a7b6:	f009 fdf8 	bl	243aa <z_log_minimal_printk>
			return BT_SMP_ERR_UNSPECIFIED;
   1a7ba:	2008      	movs	r0, #8
}
   1a7bc:	bd70      	pop	{r4, r5, r6, pc}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1a7be:	4622      	mov	r2, r4
   1a7c0:	f100 032a 	add.w	r3, r0, #42	; 0x2a
   1a7c4:	f104 0110 	add.w	r1, r4, #16
   1a7c8:	f852 0b04 	ldr.w	r0, [r2], #4
   1a7cc:	f843 0b04 	str.w	r0, [r3], #4
   1a7d0:	428a      	cmp	r2, r1
   1a7d2:	d1f9      	bne.n	1a7c8 <smp_ident_info+0x44>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
   1a7d4:	4628      	mov	r0, r5
   1a7d6:	2109      	movs	r1, #9
   1a7d8:	f00c f872 	bl	268c0 <atomic_set_bit>
	return 0;
   1a7dc:	2000      	movs	r0, #0
   1a7de:	e7ed      	b.n	1a7bc <smp_ident_info+0x38>
   1a7e0:	0002a8df 	.word	0x0002a8df

0001a7e4 <smp_encrypt_info>:
{
   1a7e4:	b570      	push	{r4, r5, r6, lr}
   1a7e6:	460b      	mov	r3, r1
   1a7e8:	4605      	mov	r5, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1a7ea:	210d      	movs	r1, #13
   1a7ec:	3004      	adds	r0, #4
   1a7ee:	f00b ff69 	bl	266c4 <atomic_test_bit>
   1a7f2:	b1f8      	cbz	r0, 1a834 <smp_encrypt_info+0x50>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
   1a7f4:	689c      	ldr	r4, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   1a7f6:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1a7fa:	f103 0690 	add.w	r6, r3, #144	; 0x90
   1a7fe:	7a19      	ldrb	r1, [r3, #8]
   1a800:	4632      	mov	r2, r6
   1a802:	2004      	movs	r0, #4
   1a804:	f00c fb24 	bl	26e50 <bt_keys_get_type>
		if (!keys) {
   1a808:	b948      	cbnz	r0, 1a81e <smp_encrypt_info+0x3a>
			BT_ERR("Unable to get keys for %s",
   1a80a:	4630      	mov	r0, r6
   1a80c:	f7fa fab6 	bl	14d7c <bt_addr_le_str_real>
   1a810:	2145      	movs	r1, #69	; 0x45
   1a812:	4602      	mov	r2, r0
   1a814:	480a      	ldr	r0, [pc, #40]	; (1a840 <smp_encrypt_info+0x5c>)
   1a816:	f009 fdc8 	bl	243aa <z_log_minimal_printk>
			return BT_SMP_ERR_UNSPECIFIED;
   1a81a:	2008      	movs	r0, #8
}
   1a81c:	bd70      	pop	{r4, r5, r6, pc}
   1a81e:	4622      	mov	r2, r4
   1a820:	f100 031a 	add.w	r3, r0, #26
   1a824:	f104 0110 	add.w	r1, r4, #16
   1a828:	f852 0b04 	ldr.w	r0, [r2], #4
   1a82c:	f843 0b04 	str.w	r0, [r3], #4
   1a830:	428a      	cmp	r2, r1
   1a832:	d1f9      	bne.n	1a828 <smp_encrypt_info+0x44>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_CENTRAL_IDENT);
   1a834:	4628      	mov	r0, r5
   1a836:	2107      	movs	r1, #7
   1a838:	f00c f842 	bl	268c0 <atomic_set_bit>
	return 0;
   1a83c:	2000      	movs	r0, #0
   1a83e:	e7ed      	b.n	1a81c <smp_encrypt_info+0x38>
   1a840:	0002a8df 	.word	0x0002a8df

0001a844 <smp_send_pairing_confirm>:
{
   1a844:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (smp->method) {
   1a846:	7a04      	ldrb	r4, [r0, #8]
   1a848:	2c02      	cmp	r4, #2
{
   1a84a:	4605      	mov	r5, r0
	switch (smp->method) {
   1a84c:	d823      	bhi.n	1a896 <smp_send_pairing_confirm+0x52>
   1a84e:	b144      	cbz	r4, 1a862 <smp_send_pairing_confirm+0x1e>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1a850:	f890 20dc 	ldrb.w	r2, [r0, #220]	; 0xdc
   1a854:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
   1a858:	40d4      	lsrs	r4, r2
   1a85a:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   1a85e:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   1a862:	2103      	movs	r1, #3
   1a864:	4628      	mov	r0, r5
   1a866:	f00c f83f 	bl	268e8 <smp_create_pdu.constprop.0>
	if (!buf) {
   1a86a:	4606      	mov	r6, r0
   1a86c:	b1d0      	cbz	r0, 1a8a4 <smp_send_pairing_confirm+0x60>
   1a86e:	2110      	movs	r1, #16
   1a870:	3008      	adds	r0, #8
   1a872:	f001 ff0d 	bl	1c690 <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   1a876:	9000      	str	r0, [sp, #0]
   1a878:	4812      	ldr	r0, [pc, #72]	; (1a8c4 <smp_send_pairing_confirm+0x80>)
   1a87a:	4623      	mov	r3, r4
   1a87c:	6800      	ldr	r0, [r0, #0]
   1a87e:	f105 0227 	add.w	r2, r5, #39	; 0x27
   1a882:	f105 0157 	add.w	r1, r5, #87	; 0x57
   1a886:	f00b fff6 	bl	26876 <smp_f4>
   1a88a:	4604      	mov	r4, r0
   1a88c:	b170      	cbz	r0, 1a8ac <smp_send_pairing_confirm+0x68>
		net_buf_unref(buf);
   1a88e:	4630      	mov	r0, r6
   1a890:	f001 fde8 	bl	1c464 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   1a894:	e006      	b.n	1a8a4 <smp_send_pairing_confirm+0x60>
	switch (smp->method) {
   1a896:	2c03      	cmp	r4, #3
   1a898:	d006      	beq.n	1a8a8 <smp_send_pairing_confirm+0x64>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1a89a:	480b      	ldr	r0, [pc, #44]	; (1a8c8 <smp_send_pairing_confirm+0x84>)
   1a89c:	4622      	mov	r2, r4
   1a89e:	2145      	movs	r1, #69	; 0x45
   1a8a0:	f009 fd83 	bl	243aa <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1a8a4:	2008      	movs	r0, #8
   1a8a6:	e00b      	b.n	1a8c0 <smp_send_pairing_confirm+0x7c>
	switch (smp->method) {
   1a8a8:	2400      	movs	r4, #0
   1a8aa:	e7da      	b.n	1a862 <smp_send_pairing_confirm+0x1e>
	smp_send(smp, buf, NULL, NULL);
   1a8ac:	4602      	mov	r2, r0
   1a8ae:	4631      	mov	r1, r6
   1a8b0:	4628      	mov	r0, r5
   1a8b2:	f00b ff65 	bl	26780 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1a8b6:	1d28      	adds	r0, r5, #4
   1a8b8:	4621      	mov	r1, r4
   1a8ba:	f00b ff2d 	bl	26718 <atomic_clear_bit>
	return 0;
   1a8be:	4620      	mov	r0, r4
}
   1a8c0:	b002      	add	sp, #8
   1a8c2:	bd70      	pop	{r4, r5, r6, pc}
   1a8c4:	20001fd8 	.word	0x20001fd8
   1a8c8:	0002a8fe 	.word	0x0002a8fe

0001a8cc <smp_public_key_periph>:
{
   1a8cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1a8ce:	1d05      	adds	r5, r0, #4
{
   1a8d0:	4604      	mov	r4, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1a8d2:	210e      	movs	r1, #14
   1a8d4:	4628      	mov	r0, r5
   1a8d6:	f00b fef5 	bl	266c4 <atomic_test_bit>
   1a8da:	b968      	cbnz	r0, 1a8f8 <smp_public_key_periph+0x2c>
	    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
   1a8dc:	4b4a      	ldr	r3, [pc, #296]	; (1aa08 <smp_public_key_periph+0x13c>)
   1a8de:	2220      	movs	r2, #32
   1a8e0:	6819      	ldr	r1, [r3, #0]
   1a8e2:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1a8e6:	f00d f8a9 	bl	27a3c <memcmp>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1a8ea:	b928      	cbnz	r0, 1a8f8 <smp_public_key_periph+0x2c>
		BT_WARN("Remote public key rejected");
   1a8ec:	4847      	ldr	r0, [pc, #284]	; (1aa0c <smp_public_key_periph+0x140>)
   1a8ee:	2157      	movs	r1, #87	; 0x57
   1a8f0:	f009 fd5b 	bl	243aa <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1a8f4:	2008      	movs	r0, #8
   1a8f6:	e034      	b.n	1a962 <smp_public_key_periph+0x96>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   1a8f8:	210c      	movs	r1, #12
   1a8fa:	4620      	mov	r0, r4
   1a8fc:	f00b fff4 	bl	268e8 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   1a900:	4606      	mov	r6, r0
   1a902:	2800      	cmp	r0, #0
   1a904:	d0f6      	beq.n	1a8f4 <smp_public_key_periph+0x28>
   1a906:	2140      	movs	r1, #64	; 0x40
   1a908:	3008      	adds	r0, #8
   1a90a:	f001 fec1 	bl	1c690 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
   1a90e:	4b3e      	ldr	r3, [pc, #248]	; (1aa08 <smp_public_key_periph+0x13c>)
   1a910:	681b      	ldr	r3, [r3, #0]
   1a912:	4602      	mov	r2, r0
   1a914:	f103 0120 	add.w	r1, r3, #32
   1a918:	f853 7b04 	ldr.w	r7, [r3], #4
   1a91c:	f842 7b04 	str.w	r7, [r2], #4
   1a920:	428b      	cmp	r3, r1
   1a922:	d1f9      	bne.n	1a918 <smp_public_key_periph+0x4c>
   1a924:	f100 0220 	add.w	r2, r0, #32
   1a928:	f103 0120 	add.w	r1, r3, #32
   1a92c:	f853 0b04 	ldr.w	r0, [r3], #4
   1a930:	f842 0b04 	str.w	r0, [r2], #4
   1a934:	428b      	cmp	r3, r1
   1a936:	d1f9      	bne.n	1a92c <smp_public_key_periph+0x60>
	smp_send(smp, req_buf, NULL, NULL);
   1a938:	2200      	movs	r2, #0
   1a93a:	4631      	mov	r1, r6
   1a93c:	4620      	mov	r0, r4
   1a93e:	f00b ff1f 	bl	26780 <smp_send.constprop.0>
	switch (smp->method) {
   1a942:	7a22      	ldrb	r2, [r4, #8]
   1a944:	2a05      	cmp	r2, #5
   1a946:	d858      	bhi.n	1a9fa <smp_public_key_periph+0x12e>
   1a948:	e8df f002 	tbb	[pc, r2]
   1a94c:	030c3603 	.word	0x030c3603
   1a950:	5457      	.short	0x5457
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1a952:	2104      	movs	r1, #4
   1a954:	4620      	mov	r0, r4
   1a956:	f00b ffb3 	bl	268c0 <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
   1a95a:	f7ff ff73 	bl	1a844 <smp_send_pairing_confirm>
		if (err) {
   1a95e:	2800      	cmp	r0, #0
   1a960:	d03b      	beq.n	1a9da <smp_public_key_periph+0x10e>
}
   1a962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   1a964:	2104      	movs	r1, #4
   1a966:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   1a96a:	f004 f86d 	bl	1ea48 <bt_rand>
   1a96e:	2800      	cmp	r0, #0
   1a970:	d1c0      	bne.n	1a8f4 <smp_public_key_periph+0x28>
		smp->passkey %= 1000000;
   1a972:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   1a976:	4a26      	ldr	r2, [pc, #152]	; (1aa10 <smp_public_key_periph+0x144>)
	if (bt_auth && bt_auth->passkey_display) {
   1a978:	4e26      	ldr	r6, [pc, #152]	; (1aa14 <smp_public_key_periph+0x148>)
		smp->passkey %= 1000000;
   1a97a:	fbb3 f1f2 	udiv	r1, r3, r2
   1a97e:	fb02 3311 	mls	r3, r2, r1, r3
   1a982:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	if (bt_auth && bt_auth->passkey_display) {
   1a986:	6833      	ldr	r3, [r6, #0]
	smp->passkey_round = 0U;
   1a988:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
	if (bt_auth && bt_auth->passkey_display) {
   1a98c:	b163      	cbz	r3, 1a9a8 <smp_public_key_periph+0xdc>
   1a98e:	681b      	ldr	r3, [r3, #0]
   1a990:	b153      	cbz	r3, 1a9a8 <smp_public_key_periph+0xdc>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1a992:	210b      	movs	r1, #11
   1a994:	4628      	mov	r0, r5
   1a996:	f00b ff93 	bl	268c0 <atomic_set_bit>
		bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
   1a99a:	6833      	ldr	r3, [r6, #0]
   1a99c:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   1a9a0:	681b      	ldr	r3, [r3, #0]
   1a9a2:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1a9a6:	4798      	blx	r3
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1a9a8:	2103      	movs	r1, #3
   1a9aa:	4620      	mov	r0, r4
   1a9ac:	f00b ff88 	bl	268c0 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1a9b0:	210e      	movs	r1, #14
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1a9b2:	f00b ff85 	bl	268c0 <atomic_set_bit>
		break;
   1a9b6:	e010      	b.n	1a9da <smp_public_key_periph+0x10e>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1a9b8:	4620      	mov	r0, r4
   1a9ba:	2103      	movs	r1, #3
   1a9bc:	f00b ff80 	bl	268c0 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1a9c0:	210e      	movs	r1, #14
   1a9c2:	f00b ff7d 	bl	268c0 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1a9c6:	4628      	mov	r0, r5
   1a9c8:	210a      	movs	r1, #10
   1a9ca:	f00b ff79 	bl	268c0 <atomic_set_bit>
		bt_auth->passkey_entry(smp->chan.chan.conn);
   1a9ce:	4b11      	ldr	r3, [pc, #68]	; (1aa14 <smp_public_key_periph+0x148>)
   1a9d0:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1a9d4:	681b      	ldr	r3, [r3, #0]
   1a9d6:	685b      	ldr	r3, [r3, #4]
   1a9d8:	4798      	blx	r3
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   1a9da:	4628      	mov	r0, r5
   1a9dc:	2107      	movs	r1, #7
   1a9de:	f00b ff6f 	bl	268c0 <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   1a9e2:	2008      	movs	r0, #8
   1a9e4:	f7ff fe18 	bl	1a618 <smp_find>
   1a9e8:	b960      	cbnz	r0, 1aa04 <smp_public_key_periph+0x138>
		return smp_dhkey_generate(smp);
   1a9ea:	4620      	mov	r0, r4
}
   1a9ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		return smp_dhkey_generate(smp);
   1a9f0:	f7ff beac 	b.w	1a74c <smp_dhkey_generate>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1a9f4:	2104      	movs	r1, #4
   1a9f6:	4620      	mov	r0, r4
   1a9f8:	e7db      	b.n	1a9b2 <smp_public_key_periph+0xe6>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1a9fa:	4807      	ldr	r0, [pc, #28]	; (1aa18 <smp_public_key_periph+0x14c>)
   1a9fc:	2145      	movs	r1, #69	; 0x45
   1a9fe:	f009 fcd4 	bl	243aa <z_log_minimal_printk>
   1aa02:	e777      	b.n	1a8f4 <smp_public_key_periph+0x28>
	return 0;
   1aa04:	2000      	movs	r0, #0
   1aa06:	e7ac      	b.n	1a962 <smp_public_key_periph+0x96>
   1aa08:	20001fd8 	.word	0x20001fd8
   1aa0c:	0002a91f 	.word	0x0002a91f
   1aa10:	000f4240 	.word	0x000f4240
   1aa14:	20001e9c 	.word	0x20001e9c
   1aa18:	0002a8fe 	.word	0x0002a8fe

0001aa1c <smp_public_key>:
{
   1aa1c:	b538      	push	{r3, r4, r5, lr}
   1aa1e:	688b      	ldr	r3, [r1, #8]
   1aa20:	4604      	mov	r4, r0
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   1aa22:	3057      	adds	r0, #87	; 0x57
   1aa24:	4602      	mov	r2, r0
   1aa26:	f103 0120 	add.w	r1, r3, #32
   1aa2a:	f853 5b04 	ldr.w	r5, [r3], #4
   1aa2e:	f842 5b04 	str.w	r5, [r2], #4
   1aa32:	428b      	cmp	r3, r1
   1aa34:	d1f9      	bne.n	1aa2a <smp_public_key+0xe>
   1aa36:	f104 0277 	add.w	r2, r4, #119	; 0x77
   1aa3a:	f103 0120 	add.w	r1, r3, #32
   1aa3e:	f853 5b04 	ldr.w	r5, [r3], #4
   1aa42:	f842 5b04 	str.w	r5, [r2], #4
   1aa46:	428b      	cmp	r3, r1
   1aa48:	d1f9      	bne.n	1aa3e <smp_public_key+0x22>
	if (bt_pub_key_is_debug(smp->pkey)) {
   1aa4a:	f7fc fa51 	bl	16ef0 <bt_pub_key_is_debug>
   1aa4e:	b940      	cbnz	r0, 1aa62 <smp_public_key+0x46>
	if (!sc_public_key) {
   1aa50:	4b17      	ldr	r3, [pc, #92]	; (1aab0 <smp_public_key+0x94>)
   1aa52:	681d      	ldr	r5, [r3, #0]
   1aa54:	bb3d      	cbnz	r5, 1aaa6 <smp_public_key+0x8a>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   1aa56:	1d20      	adds	r0, r4, #4
   1aa58:	2106      	movs	r1, #6
   1aa5a:	f00b ff31 	bl	268c0 <atomic_set_bit>
		return 0;
   1aa5e:	4628      	mov	r0, r5
   1aa60:	e020      	b.n	1aaa4 <smp_public_key+0x88>
		BT_INFO("Remote is using Debug Public key");
   1aa62:	4814      	ldr	r0, [pc, #80]	; (1aab4 <smp_public_key+0x98>)
   1aa64:	2149      	movs	r1, #73	; 0x49
   1aa66:	f009 fca0 	bl	243aa <z_log_minimal_printk>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   1aa6a:	210e      	movs	r1, #14
   1aa6c:	1d20      	adds	r0, r4, #4
   1aa6e:	f00b ff27 	bl	268c0 <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
   1aa72:	f8d4 50ec 	ldr.w	r5, [r4, #236]	; 0xec
	if (!conn->le.keys) {
   1aa76:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   1aa7a:	b933      	cbnz	r3, 1aa8a <smp_public_key+0x6e>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1aa7c:	7a28      	ldrb	r0, [r5, #8]
   1aa7e:	f105 0190 	add.w	r1, r5, #144	; 0x90
   1aa82:	f001 f8e9 	bl	1bc58 <bt_keys_get_addr>
   1aa86:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
	if (!conn->le.keys ||
   1aa8a:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   1aa8e:	2b00      	cmp	r3, #0
   1aa90:	d0de      	beq.n	1aa50 <smp_public_key+0x34>
   1aa92:	89da      	ldrh	r2, [r3, #14]
   1aa94:	f002 0224 	and.w	r2, r2, #36	; 0x24
   1aa98:	2a00      	cmp	r2, #0
   1aa9a:	d0d9      	beq.n	1aa50 <smp_public_key+0x34>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   1aa9c:	7b5b      	ldrb	r3, [r3, #13]
   1aa9e:	079b      	lsls	r3, r3, #30
   1aaa0:	d4d6      	bmi.n	1aa50 <smp_public_key+0x34>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1aaa2:	2003      	movs	r0, #3
}
   1aaa4:	bd38      	pop	{r3, r4, r5, pc}
	err = smp_public_key_periph(smp);
   1aaa6:	4620      	mov	r0, r4
}
   1aaa8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	err = smp_public_key_periph(smp);
   1aaac:	f7ff bf0e 	b.w	1a8cc <smp_public_key_periph>
   1aab0:	20001fd8 	.word	0x20001fd8
   1aab4:	0002a93f 	.word	0x0002a93f

0001aab8 <smp_pairing_req>:
{
   1aab8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
   1aabc:	688f      	ldr	r7, [r1, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   1aabe:	78fb      	ldrb	r3, [r7, #3]
   1aac0:	3b07      	subs	r3, #7
   1aac2:	2b09      	cmp	r3, #9
{
   1aac4:	4604      	mov	r4, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   1aac6:	d904      	bls.n	1aad2 <smp_pairing_req+0x1a>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   1aac8:	2706      	movs	r7, #6
}
   1aaca:	4638      	mov	r0, r7
   1aacc:	b002      	add	sp, #8
   1aace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	struct bt_conn *conn = smp->chan.chan.conn;
   1aad2:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
	if (!conn->le.keys) {
   1aad6:	f8d6 30bc 	ldr.w	r3, [r6, #188]	; 0xbc
   1aada:	b15b      	cbz	r3, 1aaf4 <smp_pairing_req+0x3c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   1aadc:	1d25      	adds	r5, r4, #4
   1aade:	210f      	movs	r1, #15
   1aae0:	4628      	mov	r0, r5
   1aae2:	f00b fdef 	bl	266c4 <atomic_test_bit>
   1aae6:	b980      	cbnz	r0, 1ab0a <smp_pairing_req+0x52>
		int ret = smp_init(smp);
   1aae8:	4620      	mov	r0, r4
   1aaea:	f7ff fe13 	bl	1a714 <smp_init>
		if (ret) {
   1aaee:	b160      	cbz	r0, 1ab0a <smp_pairing_req+0x52>
			return ret;
   1aaf0:	b2c7      	uxtb	r7, r0
   1aaf2:	e7ea      	b.n	1aaca <smp_pairing_req+0x12>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1aaf4:	7a30      	ldrb	r0, [r6, #8]
   1aaf6:	f106 0190 	add.w	r1, r6, #144	; 0x90
   1aafa:	f001 f8ad 	bl	1bc58 <bt_keys_get_addr>
   1aafe:	f8c6 00bc 	str.w	r0, [r6, #188]	; 0xbc
		if (!conn->le.keys) {
   1ab02:	2800      	cmp	r0, #0
   1ab04:	d1ea      	bne.n	1aadc <smp_pairing_req+0x24>
	switch (sec) {
   1ab06:	2708      	movs	r7, #8
   1ab08:	e7df      	b.n	1aaca <smp_pairing_req+0x12>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   1ab0a:	2301      	movs	r3, #1
   1ab0c:	7263      	strb	r3, [r4, #9]
   1ab0e:	683b      	ldr	r3, [r7, #0]
   1ab10:	f8c4 300a 	str.w	r3, [r4, #10]
   1ab14:	88bb      	ldrh	r3, [r7, #4]
   1ab16:	81e3      	strh	r3, [r4, #14]
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   1ab18:	2302      	movs	r3, #2
   1ab1a:	7423      	strb	r3, [r4, #16]
	rsp->auth_req = get_auth(conn, req->auth_req);
   1ab1c:	78b8      	ldrb	r0, [r7, #2]
   1ab1e:	f7ff fddb 	bl	1a6d8 <get_auth.constprop.0>
   1ab22:	74e0      	strb	r0, [r4, #19]
   1ab24:	4680      	mov	r8, r0
	rsp->io_capability = get_io_capa();
   1ab26:	f7ff fd51 	bl	1a5cc <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   1ab2a:	4b9f      	ldr	r3, [pc, #636]	; (1ada8 <smp_pairing_req+0x2f0>)
	rsp->io_capability = get_io_capa();
   1ab2c:	7460      	strb	r0, [r4, #17]
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   1ab2e:	781b      	ldrb	r3, [r3, #0]
   1ab30:	74a3      	strb	r3, [r4, #18]
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   1ab32:	2310      	movs	r3, #16
   1ab34:	7523      	strb	r3, [r4, #20]
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
   1ab36:	793b      	ldrb	r3, [r7, #4]
   1ab38:	f003 0303 	and.w	r3, r3, #3
   1ab3c:	7563      	strb	r3, [r4, #21]
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   1ab3e:	797b      	ldrb	r3, [r7, #5]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   1ab40:	f018 0f08 	tst.w	r8, #8
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   1ab44:	f003 0301 	and.w	r3, r3, #1
   1ab48:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   1ab4a:	d00c      	beq.n	1ab66 <smp_pairing_req+0xae>
   1ab4c:	78bb      	ldrb	r3, [r7, #2]
   1ab4e:	0719      	lsls	r1, r3, #28
   1ab50:	d509      	bpl.n	1ab66 <smp_pairing_req+0xae>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   1ab52:	2105      	movs	r1, #5
   1ab54:	4628      	mov	r0, r5
   1ab56:	f00b feb3 	bl	268c0 <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
   1ab5a:	7d63      	ldrb	r3, [r4, #21]
   1ab5c:	f003 0302 	and.w	r3, r3, #2
   1ab60:	7563      	strb	r3, [r4, #21]
		rsp->resp_key_dist &= SEND_KEYS_SC;
   1ab62:	2300      	movs	r3, #0
   1ab64:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   1ab66:	7ce3      	ldrb	r3, [r4, #19]
   1ab68:	069a      	lsls	r2, r3, #26
   1ab6a:	d506      	bpl.n	1ab7a <smp_pairing_req+0xc2>
   1ab6c:	78bb      	ldrb	r3, [r7, #2]
   1ab6e:	069b      	lsls	r3, r3, #26
   1ab70:	d503      	bpl.n	1ab7a <smp_pairing_req+0xc2>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   1ab72:	2114      	movs	r1, #20
   1ab74:	4628      	mov	r0, r5
   1ab76:	f00b fea3 	bl	268c0 <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
   1ab7a:	7da3      	ldrb	r3, [r4, #22]
   1ab7c:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist = rsp->init_key_dist;
   1ab80:	7d63      	ldrb	r3, [r4, #21]
   1ab82:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   1ab86:	7ce3      	ldrb	r3, [r4, #19]
   1ab88:	07d8      	lsls	r0, r3, #31
   1ab8a:	d506      	bpl.n	1ab9a <smp_pairing_req+0xe2>
   1ab8c:	78bb      	ldrb	r3, [r7, #2]
   1ab8e:	07d9      	lsls	r1, r3, #31
   1ab90:	d503      	bpl.n	1ab9a <smp_pairing_req+0xe2>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   1ab92:	210d      	movs	r1, #13
   1ab94:	4628      	mov	r0, r5
   1ab96:	f00b fe93 	bl	268c0 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   1ab9a:	2103      	movs	r1, #3
   1ab9c:	4628      	mov	r0, r5
   1ab9e:	f00b fe8f 	bl	268c0 <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1aba2:	2105      	movs	r1, #5
	smp->method = get_pair_method(smp, req->io_capability);
   1aba4:	783f      	ldrb	r7, [r7, #0]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1aba6:	f00b fd8d 	bl	266c4 <atomic_test_bit>
   1abaa:	bb28      	cbnz	r0, 1abf8 <smp_pairing_req+0x140>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1abac:	2f04      	cmp	r7, #4
   1abae:	d841      	bhi.n	1ac34 <smp_pairing_req+0x17c>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1abb0:	7ca2      	ldrb	r2, [r4, #18]
   1abb2:	7ae3      	ldrb	r3, [r4, #11]
   1abb4:	4013      	ands	r3, r2
   1abb6:	07da      	lsls	r2, r3, #31
   1abb8:	d43a      	bmi.n	1ac30 <smp_pairing_req+0x178>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1abba:	7b21      	ldrb	r1, [r4, #12]
   1abbc:	7ce0      	ldrb	r0, [r4, #19]
   1abbe:	4301      	orrs	r1, r0
   1abc0:	f011 0104 	ands.w	r1, r1, #4
   1abc4:	d00f      	beq.n	1abe6 <smp_pairing_req+0x12e>
	method = gen_method_legacy[remote_io][get_io_capa()];
   1abc6:	f7ff fd01 	bl	1a5cc <get_io_capa>
   1abca:	4b78      	ldr	r3, [pc, #480]	; (1adac <smp_pairing_req+0x2f4>)
   1abcc:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   1abd0:	441f      	add	r7, r3
   1abd2:	5c39      	ldrb	r1, [r7, r0]
	if (method == PASSKEY_ROLE) {
   1abd4:	2904      	cmp	r1, #4
   1abd6:	d106      	bne.n	1abe6 <smp_pairing_req+0x12e>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   1abd8:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1abdc:	78db      	ldrb	r3, [r3, #3]
			method = PASSKEY_INPUT;
   1abde:	2b00      	cmp	r3, #0
   1abe0:	bf0c      	ite	eq
   1abe2:	2102      	moveq	r1, #2
   1abe4:	2101      	movne	r1, #1
	smp->method = get_pair_method(smp, req->io_capability);
   1abe6:	7221      	strb	r1, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   1abe8:	f8d6 10bc 	ldr.w	r1, [r6, #188]	; 0xbc
   1abec:	4620      	mov	r0, r4
   1abee:	f00b fd72 	bl	266d6 <update_keys_check>
   1abf2:	bb08      	cbnz	r0, 1ac38 <smp_pairing_req+0x180>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1abf4:	2703      	movs	r7, #3
   1abf6:	e768      	b.n	1aaca <smp_pairing_req+0x12>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   1abf8:	7b20      	ldrb	r0, [r4, #12]
   1abfa:	7ce2      	ldrb	r2, [r4, #19]
   1abfc:	ea00 0302 	and.w	r3, r0, r2
   1ac00:	071b      	lsls	r3, r3, #28
   1ac02:	d506      	bpl.n	1ac12 <smp_pairing_req+0x15a>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1ac04:	7ae3      	ldrb	r3, [r4, #11]
   1ac06:	f894 c012 	ldrb.w	ip, [r4, #18]
   1ac0a:	ea43 030c 	orr.w	r3, r3, ip
   1ac0e:	07db      	lsls	r3, r3, #31
   1ac10:	d4e9      	bmi.n	1abe6 <smp_pairing_req+0x12e>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1ac12:	2f04      	cmp	r7, #4
   1ac14:	d80e      	bhi.n	1ac34 <smp_pairing_req+0x17c>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1ac16:	ea40 0102 	orr.w	r1, r0, r2
   1ac1a:	f011 0104 	ands.w	r1, r1, #4
   1ac1e:	d0e2      	beq.n	1abe6 <smp_pairing_req+0x12e>
	return gen_method_sc[remote_io][get_io_capa()];
   1ac20:	f7ff fcd4 	bl	1a5cc <get_io_capa>
   1ac24:	4b62      	ldr	r3, [pc, #392]	; (1adb0 <smp_pairing_req+0x2f8>)
   1ac26:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   1ac2a:	441f      	add	r7, r3
   1ac2c:	5c39      	ldrb	r1, [r7, r0]
   1ac2e:	e7da      	b.n	1abe6 <smp_pairing_req+0x12e>
		return LEGACY_OOB;
   1ac30:	2106      	movs	r1, #6
   1ac32:	e7d8      	b.n	1abe6 <smp_pairing_req+0x12e>
		return JUST_WORKS;
   1ac34:	2100      	movs	r1, #0
   1ac36:	e7d6      	b.n	1abe6 <smp_pairing_req+0x12e>
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   1ac38:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1ac3c:	7a9b      	ldrb	r3, [r3, #10]
	switch (sec) {
   1ac3e:	2b03      	cmp	r3, #3
   1ac40:	d02e      	beq.n	1aca0 <smp_pairing_req+0x1e8>
   1ac42:	d81c      	bhi.n	1ac7e <smp_pairing_req+0x1c6>
   1ac44:	3b01      	subs	r3, #1
   1ac46:	2b01      	cmp	r3, #1
   1ac48:	f63f af5d 	bhi.w	1ab06 <smp_pairing_req+0x4e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1ac4c:	2105      	movs	r1, #5
   1ac4e:	4628      	mov	r0, r5
   1ac50:	f00b fd38 	bl	266c4 <atomic_test_bit>
   1ac54:	2800      	cmp	r0, #0
   1ac56:	f040 80b5 	bne.w	1adc4 <smp_pairing_req+0x30c>
	struct bt_conn *conn = smp->chan.chan.conn;
   1ac5a:	f8d4 60ec 	ldr.w	r6, [r4, #236]	; 0xec
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   1ac5e:	7a30      	ldrb	r0, [r6, #8]
   1ac60:	f106 0190 	add.w	r1, r6, #144	; 0x90
   1ac64:	f001 f890 	bl	1bd88 <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
   1ac68:	7a22      	ldrb	r2, [r4, #8]
   1ac6a:	b1e8      	cbz	r0, 1aca8 <smp_pairing_req+0x1f0>
   1ac6c:	7b43      	ldrb	r3, [r0, #13]
   1ac6e:	07db      	lsls	r3, r3, #31
   1ac70:	d51a      	bpl.n	1aca8 <smp_pairing_req+0x1f0>
   1ac72:	b9ca      	cbnz	r2, 1aca8 <smp_pairing_req+0x1f0>
		BT_ERR("JustWorks failed, authenticated keys present");
   1ac74:	484f      	ldr	r0, [pc, #316]	; (1adb4 <smp_pairing_req+0x2fc>)
   1ac76:	2145      	movs	r1, #69	; 0x45
   1ac78:	f009 fb97 	bl	243aa <z_log_minimal_printk>
	if (ret) {
   1ac7c:	e743      	b.n	1ab06 <smp_pairing_req+0x4e>
	switch (sec) {
   1ac7e:	2b04      	cmp	r3, #4
   1ac80:	f47f af41 	bne.w	1ab06 <smp_pairing_req+0x4e>
	return MIN(req->max_key_size, rsp->max_key_size);
   1ac84:	7d23      	ldrb	r3, [r4, #20]
   1ac86:	7b62      	ldrb	r2, [r4, #13]
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   1ac88:	4293      	cmp	r3, r2
   1ac8a:	bf28      	it	cs
   1ac8c:	4613      	movcs	r3, r2
   1ac8e:	2b10      	cmp	r3, #16
   1ac90:	f47f af1a 	bne.w	1aac8 <smp_pairing_req+0x10>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1ac94:	2105      	movs	r1, #5
   1ac96:	4628      	mov	r0, r5
   1ac98:	f00b fd14 	bl	266c4 <atomic_test_bit>
   1ac9c:	2800      	cmp	r0, #0
   1ac9e:	d0a9      	beq.n	1abf4 <smp_pairing_req+0x13c>
		if (smp->method == JUST_WORKS) {
   1aca0:	7a23      	ldrb	r3, [r4, #8]
   1aca2:	2b00      	cmp	r3, #0
   1aca4:	d1d2      	bne.n	1ac4c <smp_pairing_req+0x194>
   1aca6:	e7a5      	b.n	1abf4 <smp_pairing_req+0x13c>
	switch (smp->method) {
   1aca8:	2a06      	cmp	r2, #6
   1acaa:	d869      	bhi.n	1ad80 <smp_pairing_req+0x2c8>
   1acac:	e8df f002 	tbb	[pc, r2]
   1acb0:	68335e1b 	.word	0x68335e1b
   1acb4:	6868      	.short	0x6868
   1acb6:	04          	.byte	0x04
   1acb7:	00          	.byte	0x00
		if (bt_auth && bt_auth->oob_data_request) {
   1acb8:	4e3f      	ldr	r6, [pc, #252]	; (1adb8 <smp_pairing_req+0x300>)
   1acba:	6833      	ldr	r3, [r6, #0]
   1acbc:	2b00      	cmp	r3, #0
   1acbe:	d064      	beq.n	1ad8a <smp_pairing_req+0x2d2>
   1acc0:	68db      	ldr	r3, [r3, #12]
   1acc2:	2b00      	cmp	r3, #0
   1acc4:	d061      	beq.n	1ad8a <smp_pairing_req+0x2d2>
			struct bt_conn_oob_info info = {
   1acc6:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1acc8:	210a      	movs	r1, #10
   1acca:	4628      	mov	r0, r5
			struct bt_conn_oob_info info = {
   1accc:	f8ad 3004 	strh.w	r3, [sp, #4]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1acd0:	f00b fdf6 	bl	268c0 <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
   1acd4:	6833      	ldr	r3, [r6, #0]
   1acd6:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1acda:	68db      	ldr	r3, [r3, #12]
   1acdc:	a901      	add	r1, sp, #4
   1acde:	4798      	blx	r3
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1ace0:	7a23      	ldrb	r3, [r4, #8]
   1ace2:	2b00      	cmp	r3, #0
   1ace4:	d153      	bne.n	1ad8e <smp_pairing_req+0x2d6>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1ace6:	210f      	movs	r1, #15
   1ace8:	4628      	mov	r0, r5
   1acea:	f00b fceb 	bl	266c4 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1acee:	4607      	mov	r7, r0
   1acf0:	2800      	cmp	r0, #0
   1acf2:	d14c      	bne.n	1ad8e <smp_pairing_req+0x2d6>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1acf4:	4e30      	ldr	r6, [pc, #192]	; (1adb8 <smp_pairing_req+0x300>)
   1acf6:	6833      	ldr	r3, [r6, #0]
   1acf8:	2b00      	cmp	r3, #0
   1acfa:	d048      	beq.n	1ad8e <smp_pairing_req+0x2d6>
	    bt_auth && bt_auth->pairing_confirm) {
   1acfc:	695b      	ldr	r3, [r3, #20]
   1acfe:	2b00      	cmp	r3, #0
   1ad00:	d045      	beq.n	1ad8e <smp_pairing_req+0x2d6>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1ad02:	4628      	mov	r0, r5
   1ad04:	210a      	movs	r1, #10
   1ad06:	f00b fddb 	bl	268c0 <atomic_set_bit>
		bt_auth->pairing_confirm(smp->chan.chan.conn);
   1ad0a:	6833      	ldr	r3, [r6, #0]
   1ad0c:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1ad10:	695b      	ldr	r3, [r3, #20]
		bt_auth->pairing_confirm(conn);
   1ad12:	4798      	blx	r3
		return 0;
   1ad14:	e6d9      	b.n	1aaca <smp_pairing_req+0x12>
			if (bt_rand(&passkey, sizeof(passkey))) {
   1ad16:	2104      	movs	r1, #4
   1ad18:	eb0d 0001 	add.w	r0, sp, r1
   1ad1c:	f003 fe94 	bl	1ea48 <bt_rand>
   1ad20:	2800      	cmp	r0, #0
   1ad22:	f47f aef0 	bne.w	1ab06 <smp_pairing_req+0x4e>
			passkey %= 1000000;
   1ad26:	9b01      	ldr	r3, [sp, #4]
   1ad28:	4a24      	ldr	r2, [pc, #144]	; (1adbc <smp_pairing_req+0x304>)
		if (bt_auth && bt_auth->passkey_display) {
   1ad2a:	4f23      	ldr	r7, [pc, #140]	; (1adb8 <smp_pairing_req+0x300>)
			passkey %= 1000000;
   1ad2c:	fbb3 f1f2 	udiv	r1, r3, r2
   1ad30:	fb02 3311 	mls	r3, r2, r1, r3
   1ad34:	9301      	str	r3, [sp, #4]
		if (bt_auth && bt_auth->passkey_display) {
   1ad36:	683b      	ldr	r3, [r7, #0]
   1ad38:	b153      	cbz	r3, 1ad50 <smp_pairing_req+0x298>
   1ad3a:	681b      	ldr	r3, [r3, #0]
   1ad3c:	b143      	cbz	r3, 1ad50 <smp_pairing_req+0x298>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1ad3e:	210b      	movs	r1, #11
   1ad40:	4628      	mov	r0, r5
   1ad42:	f00b fdbd 	bl	268c0 <atomic_set_bit>
			bt_auth->passkey_display(conn, passkey);
   1ad46:	683b      	ldr	r3, [r7, #0]
   1ad48:	9901      	ldr	r1, [sp, #4]
   1ad4a:	681b      	ldr	r3, [r3, #0]
   1ad4c:	4630      	mov	r0, r6
   1ad4e:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
   1ad50:	9b01      	ldr	r3, [sp, #4]
	dst[0] = val;
   1ad52:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	dst[1] = val >> 8;
   1ad56:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   1ad5a:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   1ad5c:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	dst[1] = val >> 8;
   1ad60:	0a1b      	lsrs	r3, r3, #8
   1ad62:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
   1ad66:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	if (ret) {
   1ad6a:	e7b9      	b.n	1ace0 <smp_pairing_req+0x228>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1ad6c:	4628      	mov	r0, r5
   1ad6e:	210a      	movs	r1, #10
   1ad70:	f00b fda6 	bl	268c0 <atomic_set_bit>
		bt_auth->passkey_entry(conn);
   1ad74:	4b10      	ldr	r3, [pc, #64]	; (1adb8 <smp_pairing_req+0x300>)
   1ad76:	681b      	ldr	r3, [r3, #0]
   1ad78:	4630      	mov	r0, r6
   1ad7a:	685b      	ldr	r3, [r3, #4]
   1ad7c:	4798      	blx	r3
	if (ret) {
   1ad7e:	e7af      	b.n	1ace0 <smp_pairing_req+0x228>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1ad80:	480f      	ldr	r0, [pc, #60]	; (1adc0 <smp_pairing_req+0x308>)
   1ad82:	2145      	movs	r1, #69	; 0x45
   1ad84:	f009 fb11 	bl	243aa <z_log_minimal_printk>
	if (ret) {
   1ad88:	e6bd      	b.n	1ab06 <smp_pairing_req+0x4e>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   1ad8a:	2702      	movs	r7, #2
   1ad8c:	e69d      	b.n	1aaca <smp_pairing_req+0x12>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1ad8e:	2103      	movs	r1, #3
   1ad90:	4620      	mov	r0, r4
   1ad92:	f00b fd95 	bl	268c0 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1ad96:	210e      	movs	r1, #14
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   1ad98:	f00b fd92 	bl	268c0 <atomic_set_bit>
}
   1ad9c:	b002      	add	sp, #8
   1ad9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return send_pairing_rsp(smp);
   1ada2:	f00b bdc0 	b.w	26926 <send_pairing_rsp>
   1ada6:	bf00      	nop
   1ada8:	200023f6 	.word	0x200023f6
   1adac:	0002ac45 	.word	0x0002ac45
   1adb0:	0002ac5e 	.word	0x0002ac5e
   1adb4:	0002a965 	.word	0x0002a965
   1adb8:	20001e9c 	.word	0x20001e9c
   1adbc:	000f4240 	.word	0x000f4240
   1adc0:	0002a8fe 	.word	0x0002a8fe
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1adc4:	7a27      	ldrb	r7, [r4, #8]
   1adc6:	b9a7      	cbnz	r7, 1adf2 <smp_pairing_req+0x33a>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1adc8:	210f      	movs	r1, #15
   1adca:	4628      	mov	r0, r5
   1adcc:	f00b fc7a 	bl	266c4 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1add0:	b978      	cbnz	r0, 1adf2 <smp_pairing_req+0x33a>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1add2:	f8df 8024 	ldr.w	r8, [pc, #36]	; 1adf8 <smp_pairing_req+0x340>
   1add6:	f8d8 3000 	ldr.w	r3, [r8]
   1adda:	b153      	cbz	r3, 1adf2 <smp_pairing_req+0x33a>
	    bt_auth && bt_auth->pairing_confirm) {
   1addc:	695b      	ldr	r3, [r3, #20]
   1adde:	b143      	cbz	r3, 1adf2 <smp_pairing_req+0x33a>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1ade0:	4628      	mov	r0, r5
   1ade2:	210a      	movs	r1, #10
   1ade4:	f00b fd6c 	bl	268c0 <atomic_set_bit>
		bt_auth->pairing_confirm(conn);
   1ade8:	f8d8 3000 	ldr.w	r3, [r8]
   1adec:	4630      	mov	r0, r6
   1adee:	695b      	ldr	r3, [r3, #20]
   1adf0:	e78f      	b.n	1ad12 <smp_pairing_req+0x25a>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   1adf2:	210c      	movs	r1, #12
   1adf4:	4620      	mov	r0, r4
   1adf6:	e7cf      	b.n	1ad98 <smp_pairing_req+0x2e0>
   1adf8:	20001e9c 	.word	0x20001e9c

0001adfc <compute_and_check_and_send_periph_dhcheck>:
{
   1adfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	(void)memset(r, 0, sizeof(r));
   1ae00:	2210      	movs	r2, #16
{
   1ae02:	b0a2      	sub	sp, #136	; 0x88
   1ae04:	4604      	mov	r4, r0
	(void)memset(r, 0, sizeof(r));
   1ae06:	2100      	movs	r1, #0
   1ae08:	eb0d 0002 	add.w	r0, sp, r2
   1ae0c:	f00c fe47 	bl	27a9e <memset>
	switch (smp->method) {
   1ae10:	7a22      	ldrb	r2, [r4, #8]
   1ae12:	2a05      	cmp	r2, #5
   1ae14:	f200 8098 	bhi.w	1af48 <compute_and_check_and_send_periph_dhcheck+0x14c>
   1ae18:	e8df f002 	tbb	[pc, r2]
   1ae1c:	06030306 	.word	0x06030306
   1ae20:	8596      	.short	0x8596
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   1ae22:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   1ae26:	9304      	str	r3, [sp, #16]
	uint8_t m[53] = { 0x00, /* counter */
   1ae28:	4b79      	ldr	r3, [pc, #484]	; (1b010 <compute_and_check_and_send_periph_dhcheck+0x214>)
		   &smp->chan.chan.conn->le.init_addr,
   1ae2a:	f8d4 a0ec 	ldr.w	sl, [r4, #236]	; 0xec
	uint8_t m[53] = { 0x00, /* counter */
   1ae2e:	aa14      	add	r2, sp, #80	; 0x50
   1ae30:	f103 0730 	add.w	r7, r3, #48	; 0x30
   1ae34:	4615      	mov	r5, r2
   1ae36:	6818      	ldr	r0, [r3, #0]
   1ae38:	6859      	ldr	r1, [r3, #4]
   1ae3a:	4616      	mov	r6, r2
   1ae3c:	c603      	stmia	r6!, {r0, r1}
   1ae3e:	3308      	adds	r3, #8
   1ae40:	42bb      	cmp	r3, r7
   1ae42:	4632      	mov	r2, r6
   1ae44:	d1f7      	bne.n	1ae36 <compute_and_check_and_send_periph_dhcheck+0x3a>
   1ae46:	6818      	ldr	r0, [r3, #0]
   1ae48:	791b      	ldrb	r3, [r3, #4]
   1ae4a:	6030      	str	r0, [r6, #0]
   1ae4c:	7133      	strb	r3, [r6, #4]
	sys_memcpy_swap(ws, w, 32);
   1ae4e:	ae0c      	add	r6, sp, #48	; 0x30
   1ae50:	2220      	movs	r2, #32
   1ae52:	f104 0197 	add.w	r1, r4, #151	; 0x97
   1ae56:	4630      	mov	r0, r6
   1ae58:	f7ff fbec 	bl	1a634 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
   1ae5c:	486d      	ldr	r0, [pc, #436]	; (1b014 <compute_and_check_and_send_periph_dhcheck+0x218>)
   1ae5e:	ab08      	add	r3, sp, #32
   1ae60:	2220      	movs	r2, #32
   1ae62:	4631      	mov	r1, r6
   1ae64:	f00b fc6e 	bl	26744 <bt_smp_aes_cmac>
	if (err) {
   1ae68:	2800      	cmp	r0, #0
   1ae6a:	f040 80cd 	bne.w	1b008 <compute_and_check_and_send_periph_dhcheck+0x20c>
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   1ae6e:	f104 0837 	add.w	r8, r4, #55	; 0x37
	sys_memcpy_swap(m + 5, n1, 16);
   1ae72:	2210      	movs	r2, #16
   1ae74:	4641      	mov	r1, r8
   1ae76:	f10d 0055 	add.w	r0, sp, #85	; 0x55
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   1ae7a:	f104 0927 	add.w	r9, r4, #39	; 0x27
	sys_memcpy_swap(m + 5, n1, 16);
   1ae7e:	f7ff fbd9 	bl	1a634 <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
   1ae82:	2210      	movs	r2, #16
   1ae84:	4649      	mov	r1, r9
   1ae86:	f10d 0065 	add.w	r0, sp, #101	; 0x65
   1ae8a:	f7ff fbd3 	bl	1a634 <sys_memcpy_swap>
	m[37] = a1->type;
   1ae8e:	f89a 3097 	ldrb.w	r3, [sl, #151]	; 0x97
   1ae92:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   1ae96:	2206      	movs	r2, #6
   1ae98:	f10a 0198 	add.w	r1, sl, #152	; 0x98
   1ae9c:	f10d 0076 	add.w	r0, sp, #118	; 0x76
   1aea0:	f7ff fbc8 	bl	1a634 <sys_memcpy_swap>
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   1aea4:	f104 07c7 	add.w	r7, r4, #199	; 0xc7
	m[44] = a2->type;
   1aea8:	f89a 309e 	ldrb.w	r3, [sl, #158]	; 0x9e
   1aeac:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   1aeb0:	2206      	movs	r2, #6
   1aeb2:	f10a 019f 	add.w	r1, sl, #159	; 0x9f
   1aeb6:	f10d 007d 	add.w	r0, sp, #125	; 0x7d
   1aeba:	f7ff fbbb 	bl	1a634 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
   1aebe:	463b      	mov	r3, r7
   1aec0:	2235      	movs	r2, #53	; 0x35
   1aec2:	4629      	mov	r1, r5
   1aec4:	a808      	add	r0, sp, #32
   1aec6:	f00b fc3d 	bl	26744 <bt_smp_aes_cmac>
	if (err) {
   1aeca:	2800      	cmp	r0, #0
   1aecc:	f040 809c 	bne.w	1b008 <compute_and_check_and_send_periph_dhcheck+0x20c>
	sys_mem_swap(mackey, 16);
   1aed0:	4638      	mov	r0, r7
   1aed2:	f00b fc72 	bl	267ba <sys_mem_swap.constprop.0>
		   smp->tk)) {
   1aed6:	f104 0a47 	add.w	sl, r4, #71	; 0x47
	m[0] = 0x01;
   1aeda:	2301      	movs	r3, #1
   1aedc:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
   1aee0:	2235      	movs	r2, #53	; 0x35
   1aee2:	4653      	mov	r3, sl
   1aee4:	4629      	mov	r1, r5
   1aee6:	a808      	add	r0, sp, #32
   1aee8:	f00b fc2c 	bl	26744 <bt_smp_aes_cmac>
	if (err) {
   1aeec:	2800      	cmp	r0, #0
   1aeee:	f040 808b 	bne.w	1b008 <compute_and_check_and_send_periph_dhcheck+0x20c>
	sys_mem_swap(ltk, 16);
   1aef2:	4650      	mov	r0, sl
   1aef4:	f00b fc61 	bl	267ba <sys_mem_swap.constprop.0>
		   &smp->chan.chan.conn->le.resp_addr,
   1aef8:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   1aefc:	9503      	str	r5, [sp, #12]
		   &smp->chan.chan.conn->le.init_addr, e)) {
   1aefe:	f103 0297 	add.w	r2, r3, #151	; 0x97
		   &smp->chan.chan.conn->le.resp_addr,
   1af02:	339e      	adds	r3, #158	; 0x9e
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   1af04:	9301      	str	r3, [sp, #4]
   1af06:	f104 0311 	add.w	r3, r4, #17
   1af0a:	9202      	str	r2, [sp, #8]
   1af0c:	9300      	str	r3, [sp, #0]
   1af0e:	4642      	mov	r2, r8
   1af10:	ab04      	add	r3, sp, #16
   1af12:	4649      	mov	r1, r9
   1af14:	4638      	mov	r0, r7
   1af16:	f00b fc5e 	bl	267d6 <smp_f6>
   1af1a:	b1d8      	cbz	r0, 1af54 <compute_and_check_and_send_periph_dhcheck+0x158>
		BT_ERR("Calculate local DHKey check failed");
   1af1c:	483e      	ldr	r0, [pc, #248]	; (1b018 <compute_and_check_and_send_periph_dhcheck+0x21c>)
   1af1e:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Calculate LTK failed");
   1af20:	f009 fa43 	bl	243aa <z_log_minimal_printk>
   1af24:	e014      	b.n	1af50 <compute_and_check_and_send_periph_dhcheck+0x154>
		if (smp->oobd_remote) {
   1af26:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
   1af2a:	2b00      	cmp	r3, #0
   1af2c:	f43f af7c 	beq.w	1ae28 <compute_and_check_and_send_periph_dhcheck+0x2c>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   1af30:	ad04      	add	r5, sp, #16
   1af32:	f103 0610 	add.w	r6, r3, #16
   1af36:	6818      	ldr	r0, [r3, #0]
   1af38:	6859      	ldr	r1, [r3, #4]
   1af3a:	462a      	mov	r2, r5
   1af3c:	c203      	stmia	r2!, {r0, r1}
   1af3e:	3308      	adds	r3, #8
   1af40:	42b3      	cmp	r3, r6
   1af42:	4615      	mov	r5, r2
   1af44:	d1f7      	bne.n	1af36 <compute_and_check_and_send_periph_dhcheck+0x13a>
   1af46:	e76f      	b.n	1ae28 <compute_and_check_and_send_periph_dhcheck+0x2c>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1af48:	4834      	ldr	r0, [pc, #208]	; (1b01c <compute_and_check_and_send_periph_dhcheck+0x220>)
   1af4a:	2145      	movs	r1, #69	; 0x45
   1af4c:	f009 fa2d 	bl	243aa <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1af50:	2008      	movs	r0, #8
   1af52:	e054      	b.n	1affe <compute_and_check_and_send_periph_dhcheck+0x202>
	if (smp->method == LE_SC_OOB) {
   1af54:	7a23      	ldrb	r3, [r4, #8]
   1af56:	2b05      	cmp	r3, #5
   1af58:	d10f      	bne.n	1af7a <compute_and_check_and_send_periph_dhcheck+0x17e>
		if (smp->oobd_local) {
   1af5a:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
   1af5e:	b309      	cbz	r1, 1afa4 <compute_and_check_and_send_periph_dhcheck+0x1a8>
			memcpy(r, smp->oobd_local->r, sizeof(r));
   1af60:	460b      	mov	r3, r1
   1af62:	f10d 0c10 	add.w	ip, sp, #16
   1af66:	f101 0e10 	add.w	lr, r1, #16
   1af6a:	6818      	ldr	r0, [r3, #0]
   1af6c:	6859      	ldr	r1, [r3, #4]
   1af6e:	4662      	mov	r2, ip
   1af70:	c203      	stmia	r2!, {r0, r1}
   1af72:	3308      	adds	r3, #8
   1af74:	4573      	cmp	r3, lr
   1af76:	4694      	mov	ip, r2
   1af78:	d1f7      	bne.n	1af6a <compute_and_check_and_send_periph_dhcheck+0x16e>
		   &smp->chan.chan.conn->le.init_addr,
   1af7a:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   1af7e:	9603      	str	r6, [sp, #12]
		   &smp->chan.chan.conn->le.resp_addr, re)) {
   1af80:	f103 029e 	add.w	r2, r3, #158	; 0x9e
		   &smp->chan.chan.conn->le.init_addr,
   1af84:	3397      	adds	r3, #151	; 0x97
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   1af86:	9301      	str	r3, [sp, #4]
   1af88:	f104 030a 	add.w	r3, r4, #10
   1af8c:	9202      	str	r2, [sp, #8]
   1af8e:	9300      	str	r3, [sp, #0]
   1af90:	464a      	mov	r2, r9
   1af92:	ab04      	add	r3, sp, #16
   1af94:	4641      	mov	r1, r8
   1af96:	4638      	mov	r0, r7
   1af98:	f00b fc1d 	bl	267d6 <smp_f6>
   1af9c:	b140      	cbz	r0, 1afb0 <compute_and_check_and_send_periph_dhcheck+0x1b4>
		BT_ERR("Calculate remote DHKey check failed");
   1af9e:	4820      	ldr	r0, [pc, #128]	; (1b020 <compute_and_check_and_send_periph_dhcheck+0x224>)
   1afa0:	2145      	movs	r1, #69	; 0x45
   1afa2:	e7bd      	b.n	1af20 <compute_and_check_and_send_periph_dhcheck+0x124>
			memset(r, 0, sizeof(r));
   1afa4:	2210      	movs	r2, #16
   1afa6:	eb0d 0002 	add.w	r0, sp, r2
   1afaa:	f00c fd78 	bl	27a9e <memset>
   1afae:	e7e4      	b.n	1af7a <compute_and_check_and_send_periph_dhcheck+0x17e>
	if (memcmp(smp->e, re, 16)) {
   1afb0:	2210      	movs	r2, #16
   1afb2:	4631      	mov	r1, r6
   1afb4:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   1afb8:	f00c fd40 	bl	27a3c <memcmp>
   1afbc:	bb10      	cbnz	r0, 1b004 <compute_and_check_and_send_periph_dhcheck+0x208>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   1afbe:	210d      	movs	r1, #13
   1afc0:	4620      	mov	r0, r4
   1afc2:	f00b fc91 	bl	268e8 <smp_create_pdu.constprop.0>
	if (!buf) {
   1afc6:	4606      	mov	r6, r0
   1afc8:	2800      	cmp	r0, #0
   1afca:	d0c1      	beq.n	1af50 <compute_and_check_and_send_periph_dhcheck+0x154>
   1afcc:	2110      	movs	r1, #16
   1afce:	3008      	adds	r0, #8
   1afd0:	f001 fb5e 	bl	1c690 <net_buf_simple_add>
   1afd4:	af18      	add	r7, sp, #96	; 0x60
   1afd6:	4603      	mov	r3, r0
   1afd8:	462a      	mov	r2, r5
   1afda:	ca03      	ldmia	r2!, {r0, r1}
   1afdc:	42ba      	cmp	r2, r7
   1afde:	6018      	str	r0, [r3, #0]
   1afe0:	6059      	str	r1, [r3, #4]
   1afe2:	4615      	mov	r5, r2
   1afe4:	f103 0308 	add.w	r3, r3, #8
   1afe8:	d1f6      	bne.n	1afd8 <compute_and_check_and_send_periph_dhcheck+0x1dc>
	smp_send(smp, buf, NULL, NULL);
   1afea:	2200      	movs	r2, #0
   1afec:	4631      	mov	r1, r6
   1afee:	4620      	mov	r0, r4
   1aff0:	f00b fbc6 	bl	26780 <smp_send.constprop.0>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1aff4:	1d20      	adds	r0, r4, #4
   1aff6:	2101      	movs	r1, #1
   1aff8:	f00b fc62 	bl	268c0 <atomic_set_bit>
	return 0;
   1affc:	2000      	movs	r0, #0
}
   1affe:	b022      	add	sp, #136	; 0x88
   1b000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   1b004:	200b      	movs	r0, #11
   1b006:	e7fa      	b.n	1affe <compute_and_check_and_send_periph_dhcheck+0x202>
		BT_ERR("Calculate LTK failed");
   1b008:	4806      	ldr	r0, [pc, #24]	; (1b024 <compute_and_check_and_send_periph_dhcheck+0x228>)
   1b00a:	2145      	movs	r1, #69	; 0x45
   1b00c:	e788      	b.n	1af20 <compute_and_check_and_send_periph_dhcheck+0x124>
   1b00e:	bf00      	nop
   1b010:	00027fd8 	.word	0x00027fd8
   1b014:	0002ac77 	.word	0x0002ac77
   1b018:	0002a997 	.word	0x0002a997
   1b01c:	0002a8fe 	.word	0x0002a8fe
   1b020:	0002a9bf 	.word	0x0002a9bf
   1b024:	0002a9e8 	.word	0x0002a9e8

0001b028 <bt_smp_connected>:
{
   1b028:	b510      	push	{r4, lr}
	k_work_init_delayable(&smp->work, smp_timeout);
   1b02a:	4905      	ldr	r1, [pc, #20]	; (1b040 <bt_smp_connected+0x18>)
   1b02c:	f1a0 04ec 	sub.w	r4, r0, #236	; 0xec
   1b030:	3094      	adds	r0, #148	; 0x94
   1b032:	f006 f9f3 	bl	2141c <k_work_init_delayable>
	smp_reset(smp);
   1b036:	4620      	mov	r0, r4
}
   1b038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
   1b03c:	f00b bcf3 	b.w	26a26 <smp_reset>
   1b040:	0001babd 	.word	0x0001babd

0001b044 <smp_pairing_confirm>:
{
   1b044:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   1b046:	688d      	ldr	r5, [r1, #8]
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   1b048:	1d06      	adds	r6, r0, #4
{
   1b04a:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   1b04c:	210b      	movs	r1, #11
   1b04e:	4630      	mov	r0, r6
   1b050:	f00b fb62 	bl	26718 <atomic_clear_bit>
   1b054:	462b      	mov	r3, r5
   1b056:	f104 0217 	add.w	r2, r4, #23
   1b05a:	f105 0110 	add.w	r1, r5, #16
   1b05e:	f853 0b04 	ldr.w	r0, [r3], #4
   1b062:	f842 0b04 	str.w	r0, [r2], #4
   1b066:	428b      	cmp	r3, r1
   1b068:	d1f9      	bne.n	1b05e <smp_pairing_confirm+0x1a>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1b06a:	2105      	movs	r1, #5
   1b06c:	4630      	mov	r0, r6
   1b06e:	f00b fb29 	bl	266c4 <atomic_test_bit>
   1b072:	b920      	cbnz	r0, 1b07e <smp_pairing_confirm+0x3a>
		return legacy_pairing_confirm(smp);
   1b074:	4620      	mov	r0, r4
}
   1b076:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return legacy_pairing_confirm(smp);
   1b07a:	f00b bd53 	b.w	26b24 <legacy_pairing_confirm>
	switch (smp->method) {
   1b07e:	7a22      	ldrb	r2, [r4, #8]
   1b080:	2a01      	cmp	r2, #1
   1b082:	d009      	beq.n	1b098 <smp_pairing_confirm+0x54>
   1b084:	2a02      	cmp	r2, #2
   1b086:	d113      	bne.n	1b0b0 <smp_pairing_confirm+0x6c>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1b088:	4620      	mov	r0, r4
   1b08a:	2104      	movs	r1, #4
   1b08c:	f00b fc18 	bl	268c0 <atomic_set_bit>
}
   1b090:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_confirm(smp);
   1b094:	f7ff bbd6 	b.w	1a844 <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1b098:	210a      	movs	r1, #10
   1b09a:	4630      	mov	r0, r6
   1b09c:	f00b fb12 	bl	266c4 <atomic_test_bit>
   1b0a0:	2800      	cmp	r0, #0
   1b0a2:	d0f1      	beq.n	1b088 <smp_pairing_confirm+0x44>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1b0a4:	4630      	mov	r0, r6
   1b0a6:	2100      	movs	r1, #0
   1b0a8:	f00b fc0a 	bl	268c0 <atomic_set_bit>
			return 0;
   1b0ac:	2000      	movs	r0, #0
}
   1b0ae:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1b0b0:	4802      	ldr	r0, [pc, #8]	; (1b0bc <smp_pairing_confirm+0x78>)
   1b0b2:	2145      	movs	r1, #69	; 0x45
   1b0b4:	f009 f979 	bl	243aa <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1b0b8:	2008      	movs	r0, #8
   1b0ba:	e7f8      	b.n	1b0ae <smp_pairing_confirm+0x6a>
   1b0bc:	0002a8fe 	.word	0x0002a8fe

0001b0c0 <smp_pairing_random>:
{
   1b0c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b0c4:	688b      	ldr	r3, [r1, #8]
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1b0c6:	f100 0837 	add.w	r8, r0, #55	; 0x37
{
   1b0ca:	b09c      	sub	sp, #112	; 0x70
   1b0cc:	4604      	mov	r4, r0
   1b0ce:	4642      	mov	r2, r8
   1b0d0:	f103 0110 	add.w	r1, r3, #16
   1b0d4:	f853 0b04 	ldr.w	r0, [r3], #4
   1b0d8:	f842 0b04 	str.w	r0, [r2], #4
   1b0dc:	428b      	cmp	r3, r1
   1b0de:	d1f9      	bne.n	1b0d4 <smp_pairing_random+0x14>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1b0e0:	1d26      	adds	r6, r4, #4
   1b0e2:	2105      	movs	r1, #5
   1b0e4:	4630      	mov	r0, r6
   1b0e6:	f00b faed 	bl	266c4 <atomic_test_bit>
   1b0ea:	2800      	cmp	r0, #0
   1b0ec:	d14a      	bne.n	1b184 <smp_pairing_random+0xc4>
	struct bt_conn *conn = smp->chan.chan.conn;
   1b0ee:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1b0f2:	f104 0747 	add.w	r7, r4, #71	; 0x47
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   1b0f6:	f103 029e 	add.w	r2, r3, #158	; 0x9e
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1b0fa:	ad08      	add	r5, sp, #32
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   1b0fc:	3397      	adds	r3, #151	; 0x97
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1b0fe:	9201      	str	r2, [sp, #4]
   1b100:	9300      	str	r3, [sp, #0]
   1b102:	9502      	str	r5, [sp, #8]
   1b104:	f104 0310 	add.w	r3, r4, #16
   1b108:	f104 0209 	add.w	r2, r4, #9
   1b10c:	4641      	mov	r1, r8
   1b10e:	4638      	mov	r0, r7
   1b110:	f00b fcac 	bl	26a6c <smp_c1>
	if (err) {
   1b114:	b9e8      	cbnz	r0, 1b152 <smp_pairing_random+0x92>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
   1b116:	2210      	movs	r2, #16
   1b118:	4629      	mov	r1, r5
   1b11a:	f104 0017 	add.w	r0, r4, #23
   1b11e:	f00c fc8d 	bl	27a3c <memcmp>
   1b122:	2800      	cmp	r0, #0
   1b124:	f040 8095 	bne.w	1b252 <smp_pairing_random+0x192>
	memcpy(out, r2, 8);
   1b128:	f8d4 0037 	ldr.w	r0, [r4, #55]	; 0x37
   1b12c:	f8d8 1004 	ldr.w	r1, [r8, #4]
   1b130:	462b      	mov	r3, r5
   1b132:	c303      	stmia	r3!, {r0, r1}
	memcpy(out + 8, r1, 8);
   1b134:	f8d4 0027 	ldr.w	r0, [r4, #39]	; 0x27
   1b138:	f8d4 102b 	ldr.w	r1, [r4, #43]	; 0x2b
	return bt_encrypt_le(k, out, out);
   1b13c:	462a      	mov	r2, r5
	memcpy(out + 8, r1, 8);
   1b13e:	c303      	stmia	r3!, {r0, r1}
	return bt_encrypt_le(k, out, out);
   1b140:	4629      	mov	r1, r5
   1b142:	4638      	mov	r0, r7
   1b144:	f00c f972 	bl	2742c <bt_encrypt_le>
		if (err) {
   1b148:	b128      	cbz	r0, 1b156 <smp_pairing_random+0x96>
			BT_ERR("Calculate STK failed");
   1b14a:	4870      	ldr	r0, [pc, #448]	; (1b30c <smp_pairing_random+0x24c>)
   1b14c:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Calculate confirm failed");
   1b14e:	f009 f92c 	bl	243aa <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1b152:	2508      	movs	r5, #8
   1b154:	e012      	b.n	1b17c <smp_pairing_random+0xbc>
   1b156:	463b      	mov	r3, r7
   1b158:	af0c      	add	r7, sp, #48	; 0x30
   1b15a:	462a      	mov	r2, r5
   1b15c:	ca03      	ldmia	r2!, {r0, r1}
   1b15e:	42ba      	cmp	r2, r7
   1b160:	6018      	str	r0, [r3, #0]
   1b162:	6059      	str	r1, [r3, #4]
   1b164:	4615      	mov	r5, r2
   1b166:	f103 0308 	add.w	r3, r3, #8
   1b16a:	d1f6      	bne.n	1b15a <smp_pairing_random+0x9a>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1b16c:	2101      	movs	r1, #1
   1b16e:	4630      	mov	r0, r6
   1b170:	f00b fba6 	bl	268c0 <atomic_set_bit>
		return smp_send_pairing_random(smp);
   1b174:	4620      	mov	r0, r4
   1b176:	f00b fbf0 	bl	2695a <smp_send_pairing_random>
   1b17a:	4605      	mov	r5, r0
}
   1b17c:	4628      	mov	r0, r5
   1b17e:	b01c      	add	sp, #112	; 0x70
   1b180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (smp->method) {
   1b184:	7a22      	ldrb	r2, [r4, #8]
   1b186:	2a05      	cmp	r2, #5
   1b188:	f200 80a5 	bhi.w	1b2d6 <smp_pairing_random+0x216>
   1b18c:	e8df f002 	tbb	[pc, r2]
   1b190:	03444436 	.word	0x03444436
   1b194:	86a3      	.short	0x86a3
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
   1b196:	4b5e      	ldr	r3, [pc, #376]	; (1b310 <smp_pairing_random+0x250>)
	sys_memcpy_swap(m, u, 32);
   1b198:	2220      	movs	r2, #32
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
   1b19a:	681d      	ldr	r5, [r3, #0]
	sys_memcpy_swap(m, u, 32);
   1b19c:	eb0d 0002 	add.w	r0, sp, r2
   1b1a0:	f104 0157 	add.w	r1, r4, #87	; 0x57
   1b1a4:	f7ff fa46 	bl	1a634 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   1b1a8:	2220      	movs	r2, #32
   1b1aa:	4629      	mov	r1, r5
   1b1ac:	a810      	add	r0, sp, #64	; 0x40
   1b1ae:	f7ff fa41 	bl	1a634 <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
   1b1b2:	2210      	movs	r2, #16
   1b1b4:	f104 0127 	add.w	r1, r4, #39	; 0x27
   1b1b8:	a818      	add	r0, sp, #96	; 0x60
   1b1ba:	f7ff fa3b 	bl	1a634 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   1b1be:	2210      	movs	r2, #16
   1b1c0:	eb0d 0002 	add.w	r0, sp, r2
   1b1c4:	4641      	mov	r1, r8
   1b1c6:	f7ff fa35 	bl	1a634 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
   1b1ca:	ab04      	add	r3, sp, #16
   1b1cc:	2250      	movs	r2, #80	; 0x50
   1b1ce:	a908      	add	r1, sp, #32
   1b1d0:	4618      	mov	r0, r3
   1b1d2:	f00b fab7 	bl	26744 <bt_smp_aes_cmac>
	if (err) {
   1b1d6:	2800      	cmp	r0, #0
   1b1d8:	d1bb      	bne.n	1b152 <smp_pairing_random+0x92>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1b1da:	210a      	movs	r1, #10
   1b1dc:	4630      	mov	r0, r6
   1b1de:	9d07      	ldr	r5, [sp, #28]
   1b1e0:	f00b fb6e 	bl	268c0 <atomic_set_bit>
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
   1b1e4:	4a4b      	ldr	r2, [pc, #300]	; (1b314 <smp_pairing_random+0x254>)
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   1b1e6:	4b4c      	ldr	r3, [pc, #304]	; (1b318 <smp_pairing_random+0x258>)
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
   1b1e8:	6812      	ldr	r2, [r2, #0]
   1b1ea:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1b1ee:	6892      	ldr	r2, [r2, #8]
   1b1f0:	ba2d      	rev	r5, r5
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   1b1f2:	fbb5 f1f3 	udiv	r1, r5, r3
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
   1b1f6:	fb03 5111 	mls	r1, r3, r1, r5
   1b1fa:	4790      	blx	r2
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   1b1fc:	4620      	mov	r0, r4
   1b1fe:	210d      	movs	r1, #13
   1b200:	f00b fb5e 	bl	268c0 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1b204:	4630      	mov	r0, r6
   1b206:	2110      	movs	r1, #16
   1b208:	f00b fb5a 	bl	268c0 <atomic_set_bit>
	return smp_send_pairing_random(smp);
   1b20c:	4620      	mov	r0, r4
}
   1b20e:	b01c      	add	sp, #112	; 0x70
   1b210:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return smp_send_pairing_random(smp);
   1b214:	f00b bba1 	b.w	2695a <smp_send_pairing_random>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1b218:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
   1b21c:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1b220:	493b      	ldr	r1, [pc, #236]	; (1b310 <smp_pairing_random+0x250>)
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1b222:	40d3      	lsrs	r3, r2
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1b224:	ad08      	add	r5, sp, #32
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1b226:	f003 0301 	and.w	r3, r3, #1
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1b22a:	9500      	str	r5, [sp, #0]
   1b22c:	6809      	ldr	r1, [r1, #0]
   1b22e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1b232:	4642      	mov	r2, r8
   1b234:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1b238:	f00b fb1d 	bl	26876 <smp_f4>
   1b23c:	b110      	cbz	r0, 1b244 <smp_pairing_random+0x184>
		BT_ERR("Calculate confirm failed");
   1b23e:	4837      	ldr	r0, [pc, #220]	; (1b31c <smp_pairing_random+0x25c>)
   1b240:	2145      	movs	r1, #69	; 0x45
   1b242:	e784      	b.n	1b14e <smp_pairing_random+0x8e>
	if (memcmp(smp->pcnf, cfm, 16)) {
   1b244:	2210      	movs	r2, #16
   1b246:	4629      	mov	r1, r5
   1b248:	f104 0017 	add.w	r0, r4, #23
   1b24c:	f00c fbf6 	bl	27a3c <memcmp>
   1b250:	b108      	cbz	r0, 1b256 <smp_pairing_random+0x196>
		return BT_SMP_ERR_CONFIRM_FAILED;
   1b252:	2504      	movs	r5, #4
   1b254:	e792      	b.n	1b17c <smp_pairing_random+0xbc>
		atomic_set_bit(smp->allowed_cmds,
   1b256:	2103      	movs	r1, #3
   1b258:	4620      	mov	r0, r4
   1b25a:	f00b fb31 	bl	268c0 <atomic_set_bit>
		err = smp_send_pairing_random(smp);
   1b25e:	f00b fb7c 	bl	2695a <smp_send_pairing_random>
		if (err) {
   1b262:	4605      	mov	r5, r0
   1b264:	2800      	cmp	r0, #0
   1b266:	d189      	bne.n	1b17c <smp_pairing_random+0xbc>
		smp->passkey_round++;
   1b268:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   1b26c:	3301      	adds	r3, #1
   1b26e:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
   1b270:	2b14      	cmp	r3, #20
		smp->passkey_round++;
   1b272:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
		if (smp->passkey_round == 20U) {
   1b276:	d108      	bne.n	1b28a <smp_pairing_random+0x1ca>
			atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   1b278:	4620      	mov	r0, r4
   1b27a:	210d      	movs	r1, #13
   1b27c:	f00b fb20 	bl	268c0 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1b280:	2110      	movs	r1, #16
   1b282:	4630      	mov	r0, r6
   1b284:	f00b fb1c 	bl	268c0 <atomic_set_bit>
			return 0;
   1b288:	e778      	b.n	1b17c <smp_pairing_random+0xbc>
		if (bt_rand(smp->prnd, 16)) {
   1b28a:	2110      	movs	r1, #16
   1b28c:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1b290:	f003 fbda 	bl	1ea48 <bt_rand>
   1b294:	2800      	cmp	r0, #0
   1b296:	f43f af71 	beq.w	1b17c <smp_pairing_random+0xbc>
   1b29a:	e75a      	b.n	1b152 <smp_pairing_random+0x92>
		if (bt_rand(smp->prnd, 16)) {
   1b29c:	2110      	movs	r1, #16
   1b29e:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1b2a2:	f003 fbd1 	bl	1ea48 <bt_rand>
   1b2a6:	2800      	cmp	r0, #0
   1b2a8:	f47f af53 	bne.w	1b152 <smp_pairing_random+0x92>
		if (bt_auth && bt_auth->oob_data_request) {
   1b2ac:	4f19      	ldr	r7, [pc, #100]	; (1b314 <smp_pairing_random+0x254>)
   1b2ae:	683b      	ldr	r3, [r7, #0]
   1b2b0:	b1b3      	cbz	r3, 1b2e0 <smp_pairing_random+0x220>
   1b2b2:	68db      	ldr	r3, [r3, #12]
   1b2b4:	b1a3      	cbz	r3, 1b2e0 <smp_pairing_random+0x220>
			struct bt_conn_oob_info info = {
   1b2b6:	4b1a      	ldr	r3, [pc, #104]	; (1b320 <smp_pairing_random+0x260>)
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1b2b8:	7ae2      	ldrb	r2, [r4, #11]
			struct bt_conn_oob_info info = {
   1b2ba:	f8b3 3035 	ldrh.w	r3, [r3, #53]	; 0x35
   1b2be:	f8ad 3020 	strh.w	r3, [sp, #32]
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1b2c2:	7ca3      	ldrb	r3, [r4, #18]
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   1b2c4:	07d2      	lsls	r2, r2, #31
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1b2c6:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   1b2ca:	d40b      	bmi.n	1b2e4 <smp_pairing_random+0x224>
				     BT_CONN_OOB_BOTH_PEERS :
   1b2cc:	2b00      	cmp	r3, #0
   1b2ce:	bf0c      	ite	eq
   1b2d0:	2003      	moveq	r0, #3
   1b2d2:	2001      	movne	r0, #1
   1b2d4:	e009      	b.n	1b2ea <smp_pairing_random+0x22a>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1b2d6:	4813      	ldr	r0, [pc, #76]	; (1b324 <smp_pairing_random+0x264>)
   1b2d8:	2145      	movs	r1, #69	; 0x45
   1b2da:	f009 f866 	bl	243aa <z_log_minimal_printk>
   1b2de:	e738      	b.n	1b152 <smp_pairing_random+0x92>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   1b2e0:	2502      	movs	r5, #2
   1b2e2:	e74b      	b.n	1b17c <smp_pairing_random+0xbc>
				     BT_CONN_OOB_BOTH_PEERS :
   1b2e4:	2b00      	cmp	r3, #0
   1b2e6:	bf18      	it	ne
   1b2e8:	2002      	movne	r0, #2
			smp->oobd_local = NULL;
   1b2ea:	2500      	movs	r5, #0
	info->lesc.oob_config = oob_config;
   1b2ec:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
			smp->oobd_remote = NULL;
   1b2f0:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   1b2f4:	4630      	mov	r0, r6
   1b2f6:	210c      	movs	r1, #12
   1b2f8:	f00b fae2 	bl	268c0 <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
   1b2fc:	683b      	ldr	r3, [r7, #0]
   1b2fe:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1b302:	68db      	ldr	r3, [r3, #12]
   1b304:	a908      	add	r1, sp, #32
   1b306:	4798      	blx	r3
			return 0;
   1b308:	e738      	b.n	1b17c <smp_pairing_random+0xbc>
   1b30a:	bf00      	nop
   1b30c:	0002aa02 	.word	0x0002aa02
   1b310:	20001fd8 	.word	0x20001fd8
   1b314:	20001e9c 	.word	0x20001e9c
   1b318:	000f4240 	.word	0x000f4240
   1b31c:	0002aa1c 	.word	0x0002aa1c
   1b320:	00027fd8 	.word	0x00027fd8
   1b324:	0002a8fe 	.word	0x0002a8fe

0001b328 <bt_smp_start_security>:
{
   1b328:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
   1b32c:	78c4      	ldrb	r4, [r0, #3]
   1b32e:	2c01      	cmp	r4, #1
{
   1b330:	4605      	mov	r5, r0
	switch (conn->role) {
   1b332:	d005      	beq.n	1b340 <bt_smp_start_security+0x18>
		return -EINVAL;
   1b334:	f06f 0415 	mvn.w	r4, #21
}
   1b338:	4620      	mov	r0, r4
   1b33a:	b003      	add	sp, #12
   1b33c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	smp = smp_chan_get(conn);
   1b340:	f7ff f99e 	bl	1a680 <smp_chan_get>
	if (!smp) {
   1b344:	4606      	mov	r6, r0
   1b346:	2800      	cmp	r0, #0
   1b348:	f000 80a4 	beq.w	1b494 <bt_smp_start_security+0x16c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1b34c:	1d07      	adds	r7, r0, #4
   1b34e:	2104      	movs	r1, #4
   1b350:	4638      	mov	r0, r7
   1b352:	f00b f9b7 	bl	266c4 <atomic_test_bit>
   1b356:	2800      	cmp	r0, #0
   1b358:	f040 809f 	bne.w	1b49a <bt_smp_start_security+0x172>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1b35c:	2103      	movs	r1, #3
   1b35e:	4638      	mov	r0, r7
   1b360:	f00b f9b0 	bl	266c4 <atomic_test_bit>
   1b364:	b110      	cbz	r0, 1b36c <bt_smp_start_security+0x44>
		return -EBUSY;
   1b366:	f06f 040f 	mvn.w	r4, #15
   1b36a:	e7e5      	b.n	1b338 <bt_smp_start_security+0x10>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1b36c:	4621      	mov	r1, r4
   1b36e:	4638      	mov	r0, r7
   1b370:	f00b f9a8 	bl	266c4 <atomic_test_bit>
   1b374:	2800      	cmp	r0, #0
   1b376:	d1f6      	bne.n	1b366 <bt_smp_start_security+0x3e>
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
   1b378:	7aab      	ldrb	r3, [r5, #10]
	switch (conn->required_sec_level) {
   1b37a:	2b03      	cmp	r3, #3
   1b37c:	d03d      	beq.n	1b3fa <bt_smp_start_security+0xd2>
   1b37e:	d82c      	bhi.n	1b3da <bt_smp_start_security+0xb2>
   1b380:	3b01      	subs	r3, #1
   1b382:	2b01      	cmp	r3, #1
   1b384:	d946      	bls.n	1b414 <bt_smp_start_security+0xec>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   1b386:	210a      	movs	r1, #10
   1b388:	1d28      	adds	r0, r5, #4
   1b38a:	f00b f99b 	bl	266c4 <atomic_test_bit>
   1b38e:	2800      	cmp	r0, #0
   1b390:	d1d0      	bne.n	1b334 <bt_smp_start_security+0xc>
	if (!conn->le.keys) {
   1b392:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   1b396:	b983      	cbnz	r3, 1b3ba <bt_smp_start_security+0x92>
						     conn->id, &conn->le.dst);
   1b398:	f105 0490 	add.w	r4, r5, #144	; 0x90
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   1b39c:	7a29      	ldrb	r1, [r5, #8]
   1b39e:	4622      	mov	r2, r4
   1b3a0:	2020      	movs	r0, #32
   1b3a2:	f000 fca1 	bl	1bce8 <bt_keys_find>
   1b3a6:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
		if (!conn->le.keys) {
   1b3aa:	b930      	cbnz	r0, 1b3ba <bt_smp_start_security+0x92>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   1b3ac:	7a29      	ldrb	r1, [r5, #8]
   1b3ae:	4622      	mov	r2, r4
   1b3b0:	2004      	movs	r0, #4
   1b3b2:	f000 fc99 	bl	1bce8 <bt_keys_find>
   1b3b6:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
	if (!conn->le.keys ||
   1b3ba:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   1b3be:	2b00      	cmp	r3, #0
   1b3c0:	d0b8      	beq.n	1b334 <bt_smp_start_security+0xc>
   1b3c2:	89da      	ldrh	r2, [r3, #14]
   1b3c4:	f002 0224 	and.w	r2, r2, #36	; 0x24
   1b3c8:	2a00      	cmp	r2, #0
   1b3ca:	d0b3      	beq.n	1b334 <bt_smp_start_security+0xc>
	if (conn->required_sec_level > BT_SECURITY_L2 &&
   1b3cc:	7aaa      	ldrb	r2, [r5, #10]
   1b3ce:	2a02      	cmp	r2, #2
   1b3d0:	d920      	bls.n	1b414 <bt_smp_start_security+0xec>
   1b3d2:	7b5b      	ldrb	r3, [r3, #13]
   1b3d4:	07db      	lsls	r3, r3, #31
   1b3d6:	d5ad      	bpl.n	1b334 <bt_smp_start_security+0xc>
   1b3d8:	e01c      	b.n	1b414 <bt_smp_start_security+0xec>
	switch (conn->required_sec_level) {
   1b3da:	2b04      	cmp	r3, #4
   1b3dc:	d1d3      	bne.n	1b386 <bt_smp_start_security+0x5e>
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1b3de:	f7ff f8f5 	bl	1a5cc <get_io_capa>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   1b3e2:	2803      	cmp	r0, #3
   1b3e4:	d104      	bne.n	1b3f0 <bt_smp_start_security+0xc8>
   1b3e6:	4b2e      	ldr	r3, [pc, #184]	; (1b4a0 <bt_smp_start_security+0x178>)
   1b3e8:	681b      	ldr	r3, [r3, #0]
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1b3ea:	b1f3      	cbz	r3, 1b42a <bt_smp_start_security+0x102>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   1b3ec:	68dc      	ldr	r4, [r3, #12]
   1b3ee:	b10c      	cbz	r4, 1b3f4 <bt_smp_start_security+0xcc>
   1b3f0:	4b2c      	ldr	r3, [pc, #176]	; (1b4a4 <bt_smp_start_security+0x17c>)
   1b3f2:	781c      	ldrb	r4, [r3, #0]
   1b3f4:	f004 0401 	and.w	r4, r4, #1
   1b3f8:	e00a      	b.n	1b410 <bt_smp_start_security+0xe8>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1b3fa:	f7ff f8e7 	bl	1a5cc <get_io_capa>
   1b3fe:	2803      	cmp	r0, #3
   1b400:	d106      	bne.n	1b410 <bt_smp_start_security+0xe8>
		       (bt_auth && bt_auth->oob_data_request);
   1b402:	4b27      	ldr	r3, [pc, #156]	; (1b4a0 <bt_smp_start_security+0x178>)
   1b404:	681c      	ldr	r4, [r3, #0]
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1b406:	b11c      	cbz	r4, 1b410 <bt_smp_start_security+0xe8>
		       (bt_auth && bt_auth->oob_data_request);
   1b408:	68e4      	ldr	r4, [r4, #12]
   1b40a:	3c00      	subs	r4, #0
   1b40c:	bf18      	it	ne
   1b40e:	2401      	movne	r4, #1
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
   1b410:	2c00      	cmp	r4, #0
   1b412:	d0b8      	beq.n	1b386 <bt_smp_start_security+0x5e>
	if (!conn->le.keys) {
   1b414:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   1b418:	b14b      	cbz	r3, 1b42e <bt_smp_start_security+0x106>
	if (smp_init(smp) != 0) {
   1b41a:	4630      	mov	r0, r6
   1b41c:	f7ff f97a 	bl	1a714 <smp_init>
   1b420:	4604      	mov	r4, r0
   1b422:	b180      	cbz	r0, 1b446 <bt_smp_start_security+0x11e>
		return -ENOBUFS;
   1b424:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1b428:	e786      	b.n	1b338 <bt_smp_start_security+0x10>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   1b42a:	2400      	movs	r4, #0
   1b42c:	e7e2      	b.n	1b3f4 <bt_smp_start_security+0xcc>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1b42e:	7a28      	ldrb	r0, [r5, #8]
   1b430:	f105 0190 	add.w	r1, r5, #144	; 0x90
   1b434:	f000 fc10 	bl	1bc58 <bt_keys_get_addr>
   1b438:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
		if (!conn->le.keys) {
   1b43c:	2800      	cmp	r0, #0
   1b43e:	d1ec      	bne.n	1b41a <bt_smp_start_security+0xf2>
			return -ENOMEM;
   1b440:	f06f 040b 	mvn.w	r4, #11
   1b444:	e778      	b.n	1b338 <bt_smp_start_security+0x10>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
   1b446:	210b      	movs	r1, #11
   1b448:	4630      	mov	r0, r6
   1b44a:	f00b fa4d 	bl	268e8 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   1b44e:	4680      	mov	r8, r0
   1b450:	2800      	cmp	r0, #0
   1b452:	d0e7      	beq.n	1b424 <bt_smp_start_security+0xfc>
   1b454:	2101      	movs	r1, #1
   1b456:	3008      	adds	r0, #8
   1b458:	f001 f91a 	bl	1c690 <net_buf_simple_add>
   1b45c:	4681      	mov	r9, r0
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
   1b45e:	2009      	movs	r0, #9
   1b460:	f7ff f93a 	bl	1a6d8 <get_auth.constprop.0>
   1b464:	4623      	mov	r3, r4
   1b466:	f889 0000 	strb.w	r0, [r9]
   1b46a:	4642      	mov	r2, r8
   1b46c:	9400      	str	r4, [sp, #0]
   1b46e:	2106      	movs	r1, #6
   1b470:	4628      	mov	r0, r5
   1b472:	f00a fa67 	bl	25944 <bt_l2cap_send_cb>
	if (err) {
   1b476:	4604      	mov	r4, r0
   1b478:	b118      	cbz	r0, 1b482 <bt_smp_start_security+0x15a>
		net_buf_unref(req_buf);
   1b47a:	4640      	mov	r0, r8
   1b47c:	f000 fff2 	bl	1c464 <net_buf_unref>
		return err;
   1b480:	e75a      	b.n	1b338 <bt_smp_start_security+0x10>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   1b482:	4638      	mov	r0, r7
   1b484:	210f      	movs	r1, #15
   1b486:	f00b fa1b 	bl	268c0 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   1b48a:	2101      	movs	r1, #1
   1b48c:	4630      	mov	r0, r6
   1b48e:	f00b fa17 	bl	268c0 <atomic_set_bit>
	return 0;
   1b492:	e751      	b.n	1b338 <bt_smp_start_security+0x10>
		return -ENOTCONN;
   1b494:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   1b498:	e74e      	b.n	1b338 <bt_smp_start_security+0x10>
		return -EIO;
   1b49a:	f06f 0404 	mvn.w	r4, #4
   1b49e:	e74b      	b.n	1b338 <bt_smp_start_security+0x10>
   1b4a0:	20001e9c 	.word	0x20001e9c
   1b4a4:	200023f7 	.word	0x200023f7

0001b4a8 <smp_pairing_complete>:
{
   1b4a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   1b4aa:	f8d0 40ec 	ldr.w	r4, [r0, #236]	; 0xec
{
   1b4ae:	4606      	mov	r6, r0
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   1b4b0:	1d05      	adds	r5, r0, #4
	if (!status) {
   1b4b2:	b9f1      	cbnz	r1, 1b4f2 <smp_pairing_complete+0x4a>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   1b4b4:	210d      	movs	r1, #13
   1b4b6:	4628      	mov	r0, r5
   1b4b8:	f00b f904 	bl	266c4 <atomic_test_bit>
		if (bond_flag) {
   1b4bc:	4607      	mov	r7, r0
   1b4be:	b118      	cbz	r0, 1b4c8 <smp_pairing_complete+0x20>
			bt_keys_store(conn->le.keys);
   1b4c0:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1b4c4:	f000 fd12 	bl	1beec <bt_keys_store>
	return list->head;
   1b4c8:	4b31      	ldr	r3, [pc, #196]	; (1b590 <smp_pairing_complete+0xe8>)
   1b4ca:	681b      	ldr	r3, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   1b4cc:	2b00      	cmp	r3, #0
   1b4ce:	d051      	beq.n	1b574 <smp_pairing_complete+0xcc>
	return node->next;
   1b4d0:	f853 590c 	ldr.w	r5, [r3], #-12
   1b4d4:	b105      	cbz	r5, 1b4d8 <smp_pairing_complete+0x30>
   1b4d6:	3d0c      	subs	r5, #12
			if (listener->pairing_complete) {
   1b4d8:	681b      	ldr	r3, [r3, #0]
   1b4da:	b113      	cbz	r3, 1b4e2 <smp_pairing_complete+0x3a>
				listener->pairing_complete(conn, bond_flag);
   1b4dc:	4639      	mov	r1, r7
   1b4de:	4620      	mov	r0, r4
   1b4e0:	4798      	blx	r3
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   1b4e2:	2d00      	cmp	r5, #0
   1b4e4:	d046      	beq.n	1b574 <smp_pairing_complete+0xcc>
   1b4e6:	68ea      	ldr	r2, [r5, #12]
   1b4e8:	b102      	cbz	r2, 1b4ec <smp_pairing_complete+0x44>
   1b4ea:	3a0c      	subs	r2, #12
{
   1b4ec:	462b      	mov	r3, r5
   1b4ee:	4615      	mov	r5, r2
   1b4f0:	e7f2      	b.n	1b4d8 <smp_pairing_complete+0x30>
	switch (smp_err) {
   1b4f2:	3901      	subs	r1, #1
   1b4f4:	b2c9      	uxtb	r1, r1
   1b4f6:	290e      	cmp	r1, #14
   1b4f8:	bf9c      	itt	ls
   1b4fa:	4b26      	ldrls	r3, [pc, #152]	; (1b594 <smp_pairing_complete+0xec>)
   1b4fc:	5c5f      	ldrbls	r7, [r3, r1]
		if (conn->le.keys &&
   1b4fe:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
	if (!status) {
   1b502:	bf88      	it	hi
   1b504:	2709      	movhi	r7, #9
		if (conn->le.keys &&
   1b506:	b143      	cbz	r3, 1b51a <smp_pairing_complete+0x72>
   1b508:	7b1b      	ldrb	r3, [r3, #12]
   1b50a:	bb63      	cbnz	r3, 1b566 <smp_pairing_complete+0xbe>
			bt_keys_clear(conn->le.keys);
   1b50c:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1b510:	f000 fc4a 	bl	1bda8 <bt_keys_clear>
			conn->le.keys = NULL;
   1b514:	2300      	movs	r3, #0
   1b516:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1b51a:	2102      	movs	r1, #2
   1b51c:	4628      	mov	r0, r5
   1b51e:	f00b f8d1 	bl	266c4 <atomic_test_bit>
   1b522:	b940      	cbnz	r0, 1b536 <smp_pairing_complete+0x8e>
	switch (err) {
   1b524:	2f07      	cmp	r7, #7
   1b526:	bf96      	itet	ls
   1b528:	4b1b      	ldrls	r3, [pc, #108]	; (1b598 <smp_pairing_complete+0xf0>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1b52a:	211f      	movhi	r1, #31
   1b52c:	5dd9      	ldrbls	r1, [r3, r7]
			bt_conn_security_changed(conn,
   1b52e:	463a      	mov	r2, r7
   1b530:	4620      	mov	r0, r4
   1b532:	f7fc fa87 	bl	17a44 <bt_conn_security_changed>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1b536:	2103      	movs	r1, #3
   1b538:	4628      	mov	r0, r5
   1b53a:	f00b f8c3 	bl	266c4 <atomic_test_bit>
   1b53e:	b1c8      	cbz	r0, 1b574 <smp_pairing_complete+0xcc>
	return list->head;
   1b540:	4b13      	ldr	r3, [pc, #76]	; (1b590 <smp_pairing_complete+0xe8>)
   1b542:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   1b544:	b1b3      	cbz	r3, 1b574 <smp_pairing_complete+0xcc>
	return node->next;
   1b546:	f853 590c 	ldr.w	r5, [r3], #-12
   1b54a:	b105      	cbz	r5, 1b54e <smp_pairing_complete+0xa6>
   1b54c:	3d0c      	subs	r5, #12
				if (listener->pairing_failed) {
   1b54e:	685b      	ldr	r3, [r3, #4]
   1b550:	b113      	cbz	r3, 1b558 <smp_pairing_complete+0xb0>
					listener->pairing_failed(conn, security_err);
   1b552:	4639      	mov	r1, r7
   1b554:	4620      	mov	r0, r4
   1b556:	4798      	blx	r3
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   1b558:	b165      	cbz	r5, 1b574 <smp_pairing_complete+0xcc>
   1b55a:	68ea      	ldr	r2, [r5, #12]
   1b55c:	b102      	cbz	r2, 1b560 <smp_pairing_complete+0xb8>
   1b55e:	3a0c      	subs	r2, #12
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1b560:	462b      	mov	r3, r5
   1b562:	4615      	mov	r5, r2
   1b564:	e7f3      	b.n	1b54e <smp_pairing_complete+0xa6>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
   1b566:	2102      	movs	r1, #2
   1b568:	4628      	mov	r0, r5
   1b56a:	f00b f8ab 	bl	266c4 <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
   1b56e:	2800      	cmp	r0, #0
   1b570:	d1cc      	bne.n	1b50c <smp_pairing_complete+0x64>
   1b572:	e7d2      	b.n	1b51a <smp_pairing_complete+0x72>
	smp_reset(smp);
   1b574:	4630      	mov	r0, r6
   1b576:	f00b fa56 	bl	26a26 <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
   1b57a:	7a62      	ldrb	r2, [r4, #9]
   1b57c:	7aa3      	ldrb	r3, [r4, #10]
   1b57e:	429a      	cmp	r2, r3
   1b580:	d004      	beq.n	1b58c <smp_pairing_complete+0xe4>
		bt_smp_start_security(conn);
   1b582:	4620      	mov	r0, r4
}
   1b584:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_smp_start_security(conn);
   1b588:	f7ff bece 	b.w	1b328 <bt_smp_start_security>
}
   1b58c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b58e:	bf00      	nop
   1b590:	20001ea0 	.word	0x20001ea0
   1b594:	0002ac25 	.word	0x0002ac25
   1b598:	0002ac3d 	.word	0x0002ac3d

0001b59c <bt_smp_recv>:
{
   1b59c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   1b59e:	898b      	ldrh	r3, [r1, #12]
{
   1b5a0:	4607      	mov	r7, r0
   1b5a2:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   1b5a4:	b92b      	cbnz	r3, 1b5b2 <bt_smp_recv+0x16>
		BT_ERR("Too small SMP PDU received");
   1b5a6:	4828      	ldr	r0, [pc, #160]	; (1b648 <bt_smp_recv+0xac>)
   1b5a8:	2145      	movs	r1, #69	; 0x45
   1b5aa:	f008 fefe 	bl	243aa <z_log_minimal_printk>
}
   1b5ae:	2000      	movs	r0, #0
   1b5b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1b5b2:	2101      	movs	r1, #1
   1b5b4:	f105 0008 	add.w	r0, r5, #8
   1b5b8:	f001 f84c 	bl	1c654 <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1b5bc:	2104      	movs	r1, #4
   1b5be:	4606      	mov	r6, r0
   1b5c0:	f1a7 00e8 	sub.w	r0, r7, #232	; 0xe8
   1b5c4:	f00b f87e 	bl	266c4 <atomic_test_bit>
   1b5c8:	f1a7 04ec 	sub.w	r4, r7, #236	; 0xec
   1b5cc:	7832      	ldrb	r2, [r6, #0]
   1b5ce:	b120      	cbz	r0, 1b5da <bt_smp_recv+0x3e>
		BT_WARN("SMP command (code 0x%02x) received after timeout",
   1b5d0:	481e      	ldr	r0, [pc, #120]	; (1b64c <bt_smp_recv+0xb0>)
   1b5d2:	2157      	movs	r1, #87	; 0x57
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
   1b5d4:	f008 fee9 	bl	243aa <z_log_minimal_printk>
		return 0;
   1b5d8:	e7e9      	b.n	1b5ae <bt_smp_recv+0x12>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   1b5da:	2a0e      	cmp	r2, #14
   1b5dc:	d902      	bls.n	1b5e4 <bt_smp_recv+0x48>
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
   1b5de:	481c      	ldr	r0, [pc, #112]	; (1b650 <bt_smp_recv+0xb4>)
   1b5e0:	2157      	movs	r1, #87	; 0x57
   1b5e2:	e7f7      	b.n	1b5d4 <bt_smp_recv+0x38>
	if (!handlers[hdr->code].func) {
   1b5e4:	4f1b      	ldr	r7, [pc, #108]	; (1b654 <bt_smp_recv+0xb8>)
   1b5e6:	f857 3032 	ldr.w	r3, [r7, r2, lsl #3]
   1b5ea:	b943      	cbnz	r3, 1b5fe <bt_smp_recv+0x62>
		BT_WARN("Unhandled SMP code 0x%02x", hdr->code);
   1b5ec:	2157      	movs	r1, #87	; 0x57
   1b5ee:	481a      	ldr	r0, [pc, #104]	; (1b658 <bt_smp_recv+0xbc>)
   1b5f0:	f008 fedb 	bl	243aa <z_log_minimal_printk>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   1b5f4:	2107      	movs	r1, #7
		smp_error(smp, err);
   1b5f6:	4620      	mov	r0, r4
   1b5f8:	f00b fb76 	bl	26ce8 <smp_error>
   1b5fc:	e7d7      	b.n	1b5ae <bt_smp_recv+0x12>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
   1b5fe:	4611      	mov	r1, r2
   1b600:	4620      	mov	r0, r4
   1b602:	f00b f9f8 	bl	269f6 <atomic_test_and_clear_bit>
   1b606:	7833      	ldrb	r3, [r6, #0]
   1b608:	b948      	cbnz	r0, 1b61e <bt_smp_recv+0x82>
		BT_WARN("Unexpected SMP code 0x%02x", hdr->code);
   1b60a:	461a      	mov	r2, r3
   1b60c:	4813      	ldr	r0, [pc, #76]	; (1b65c <bt_smp_recv+0xc0>)
   1b60e:	2157      	movs	r1, #87	; 0x57
   1b610:	f008 fecb 	bl	243aa <z_log_minimal_printk>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
   1b614:	7833      	ldrb	r3, [r6, #0]
   1b616:	2b05      	cmp	r3, #5
   1b618:	d0c9      	beq.n	1b5ae <bt_smp_recv+0x12>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1b61a:	2108      	movs	r1, #8
   1b61c:	e7eb      	b.n	1b5f6 <bt_smp_recv+0x5a>
	if (buf->len != handlers[hdr->code].expect_len) {
   1b61e:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
   1b622:	89aa      	ldrh	r2, [r5, #12]
   1b624:	7909      	ldrb	r1, [r1, #4]
   1b626:	4291      	cmp	r1, r2
   1b628:	d005      	beq.n	1b636 <bt_smp_recv+0x9a>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1b62a:	2145      	movs	r1, #69	; 0x45
   1b62c:	480c      	ldr	r0, [pc, #48]	; (1b660 <bt_smp_recv+0xc4>)
   1b62e:	f008 febc 	bl	243aa <z_log_minimal_printk>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   1b632:	210a      	movs	r1, #10
   1b634:	e7df      	b.n	1b5f6 <bt_smp_recv+0x5a>
	err = handlers[hdr->code].func(smp, buf);
   1b636:	4629      	mov	r1, r5
   1b638:	f857 3033 	ldr.w	r3, [r7, r3, lsl #3]
   1b63c:	4620      	mov	r0, r4
   1b63e:	4798      	blx	r3
	if (err) {
   1b640:	4601      	mov	r1, r0
   1b642:	2800      	cmp	r0, #0
   1b644:	d0b3      	beq.n	1b5ae <bt_smp_recv+0x12>
   1b646:	e7d6      	b.n	1b5f6 <bt_smp_recv+0x5a>
   1b648:	0002aa3a 	.word	0x0002aa3a
   1b64c:	0002aa5a 	.word	0x0002aa5a
   1b650:	0002aa90 	.word	0x0002aa90
   1b654:	00028420 	.word	0x00028420
   1b658:	0002aab7 	.word	0x0002aab7
   1b65c:	0002aad6 	.word	0x0002aad6
   1b660:	0002a42a 	.word	0x0002a42a

0001b664 <bt_smp_pkey_ready>:
	sc_public_key = pkey;
   1b664:	4b0f      	ldr	r3, [pc, #60]	; (1b6a4 <bt_smp_pkey_ready+0x40>)
{
   1b666:	b510      	push	{r4, lr}
	sc_public_key = pkey;
   1b668:	6018      	str	r0, [r3, #0]
	if (!pkey) {
   1b66a:	b928      	cbnz	r0, 1b678 <bt_smp_pkey_ready+0x14>
}
   1b66c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Public key not available");
   1b670:	480d      	ldr	r0, [pc, #52]	; (1b6a8 <bt_smp_pkey_ready+0x44>)
   1b672:	2157      	movs	r1, #87	; 0x57
   1b674:	f008 be99 	b.w	243aa <z_log_minimal_printk>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b678:	4c0c      	ldr	r4, [pc, #48]	; (1b6ac <bt_smp_pkey_ready+0x48>)
	z_impl_k_sem_give(sem);
   1b67a:	480d      	ldr	r0, [pc, #52]	; (1b6b0 <bt_smp_pkey_ready+0x4c>)
   1b67c:	f005 fb10 	bl	20ca0 <z_impl_k_sem_give>
   1b680:	f3bf 8f5b 	dmb	ish
   1b684:	6863      	ldr	r3, [r4, #4]
   1b686:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   1b68a:	065b      	lsls	r3, r3, #25
   1b68c:	d509      	bpl.n	1b6a2 <bt_smp_pkey_ready+0x3e>
		err = smp_public_key_periph(smp);
   1b68e:	4620      	mov	r0, r4
   1b690:	f7ff f91c 	bl	1a8cc <smp_public_key_periph>
		if (err) {
   1b694:	4601      	mov	r1, r0
   1b696:	b120      	cbz	r0, 1b6a2 <bt_smp_pkey_ready+0x3e>
			smp_error(smp, err);
   1b698:	4620      	mov	r0, r4
}
   1b69a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_error(smp, err);
   1b69e:	f00b bb23 	b.w	26ce8 <smp_error>
}
   1b6a2:	bd10      	pop	{r4, pc}
   1b6a4:	20001fd8 	.word	0x20001fd8
   1b6a8:	0002aaf6 	.word	0x0002aaf6
   1b6ac:	20001928 	.word	0x20001928
   1b6b0:	200008a4 	.word	0x200008a4

0001b6b4 <smp_ident_addr_info>:
{
   1b6b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   1b6b8:	688f      	ldr	r7, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
   1b6ba:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1b6be:	783b      	ldrb	r3, [r7, #0]
{
   1b6c0:	4604      	mov	r4, r0
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   1b6c2:	f105 0890 	add.w	r8, r5, #144	; 0x90
   1b6c6:	b1bb      	cbz	r3, 1b6f8 <smp_ident_addr_info+0x44>
	if (!bt_addr_le_is_identity(&req->addr)) {
   1b6c8:	79bb      	ldrb	r3, [r7, #6]
   1b6ca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1b6ce:	2bc0      	cmp	r3, #192	; 0xc0
   1b6d0:	d012      	beq.n	1b6f8 <smp_ident_addr_info+0x44>
		BT_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
   1b6d2:	4638      	mov	r0, r7
   1b6d4:	f7f9 fb52 	bl	14d7c <bt_addr_le_str_real>
   1b6d8:	2145      	movs	r1, #69	; 0x45
   1b6da:	4602      	mov	r2, r0
   1b6dc:	483c      	ldr	r0, [pc, #240]	; (1b7d0 <smp_ident_addr_info+0x11c>)
   1b6de:	f008 fe64 	bl	243aa <z_log_minimal_printk>
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   1b6e2:	4640      	mov	r0, r8
   1b6e4:	f7f9 fb4a 	bl	14d7c <bt_addr_le_str_real>
   1b6e8:	2145      	movs	r1, #69	; 0x45
   1b6ea:	4602      	mov	r2, r0
   1b6ec:	4839      	ldr	r0, [pc, #228]	; (1b7d4 <smp_ident_addr_info+0x120>)
   1b6ee:	f008 fe5c 	bl	243aa <z_log_minimal_printk>
		return BT_SMP_ERR_INVALID_PARAMS;
   1b6f2:	200a      	movs	r0, #10
}
   1b6f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return memcmp(a, b, sizeof(*a));
   1b6f8:	2207      	movs	r2, #7
   1b6fa:	4639      	mov	r1, r7
   1b6fc:	4640      	mov	r0, r8
   1b6fe:	f00c f99d 	bl	27a3c <memcmp>
	if (bt_addr_le_cmp(&conn->le.dst, &req->addr) != 0) {
   1b702:	b168      	cbz	r0, 1b720 <smp_ident_addr_info+0x6c>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   1b704:	7a28      	ldrb	r0, [r5, #8]
   1b706:	4639      	mov	r1, r7
   1b708:	f000 fb3e 	bl	1bd88 <bt_keys_find_addr>
		if (keys) {
   1b70c:	4606      	mov	r6, r0
   1b70e:	b138      	cbz	r0, 1b720 <smp_ident_addr_info+0x6c>
			if (!update_keys_check(smp, keys)) {
   1b710:	4601      	mov	r1, r0
   1b712:	4620      	mov	r0, r4
   1b714:	f00a ffdf 	bl	266d6 <update_keys_check>
   1b718:	b1b0      	cbz	r0, 1b748 <smp_ident_addr_info+0x94>
			bt_keys_clear(keys);
   1b71a:	4630      	mov	r0, r6
   1b71c:	f000 fb44 	bl	1bda8 <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1b720:	210d      	movs	r1, #13
   1b722:	1d20      	adds	r0, r4, #4
   1b724:	f00a ffce 	bl	266c4 <atomic_test_bit>
   1b728:	b3c8      	cbz	r0, 1b79e <smp_ident_addr_info+0xea>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1b72a:	7a29      	ldrb	r1, [r5, #8]
   1b72c:	4642      	mov	r2, r8
   1b72e:	2002      	movs	r0, #2
   1b730:	f00b fb8e 	bl	26e50 <bt_keys_get_type>
		if (!keys) {
   1b734:	4606      	mov	r6, r0
   1b736:	b948      	cbnz	r0, 1b74c <smp_ident_addr_info+0x98>
			BT_ERR("Unable to get keys for %s",
   1b738:	4640      	mov	r0, r8
   1b73a:	f7f9 fb1f 	bl	14d7c <bt_addr_le_str_real>
   1b73e:	2145      	movs	r1, #69	; 0x45
   1b740:	4602      	mov	r2, r0
   1b742:	4825      	ldr	r0, [pc, #148]	; (1b7d8 <smp_ident_addr_info+0x124>)
   1b744:	f008 fe31 	bl	243aa <z_log_minimal_printk>
				return BT_SMP_ERR_UNSPECIFIED;
   1b748:	2008      	movs	r0, #8
   1b74a:	e7d3      	b.n	1b6f4 <smp_ident_addr_info+0x40>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1b74c:	78eb      	ldrb	r3, [r5, #3]
   1b74e:	bbdb      	cbnz	r3, 1b7c8 <smp_ident_addr_info+0x114>
			dst = &conn->le.resp_addr;
   1b750:	f105 039e 	add.w	r3, r5, #158	; 0x9e
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1b754:	781a      	ldrb	r2, [r3, #0]
   1b756:	2a01      	cmp	r2, #1
   1b758:	d11e      	bne.n	1b798 <smp_ident_addr_info+0xe4>
		if (bt_addr_le_is_rpa(dst)) {
   1b75a:	799a      	ldrb	r2, [r3, #6]
   1b75c:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   1b760:	2a40      	cmp	r2, #64	; 0x40
   1b762:	d119      	bne.n	1b798 <smp_ident_addr_info+0xe4>
   1b764:	f8d3 2001 	ldr.w	r2, [r3, #1]
   1b768:	f8c6 203a 	str.w	r2, [r6, #58]	; 0x3a
   1b76c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
   1b770:	87f3      	strh	r3, [r6, #62]	; 0x3e
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1b772:	f895 3090 	ldrb.w	r3, [r5, #144]	; 0x90
   1b776:	b17b      	cbz	r3, 1b798 <smp_ident_addr_info+0xe4>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   1b778:	f895 3096 	ldrb.w	r3, [r5, #150]	; 0x96
   1b77c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1b780:	2bc0      	cmp	r3, #192	; 0xc0
   1b782:	d009      	beq.n	1b798 <smp_ident_addr_info+0xe4>
				bt_addr_le_copy(&keys->addr, &req->addr);
   1b784:	4639      	mov	r1, r7
   1b786:	1c70      	adds	r0, r6, #1
   1b788:	f00a ffd5 	bl	26736 <bt_addr_le_copy>
				bt_addr_le_copy(&conn->le.dst, &req->addr);
   1b78c:	4640      	mov	r0, r8
   1b78e:	f00a ffd2 	bl	26736 <bt_addr_le_copy>
				bt_conn_identity_resolved(conn);
   1b792:	4628      	mov	r0, r5
   1b794:	f7fc f916 	bl	179c4 <bt_conn_identity_resolved>
		bt_id_add(keys);
   1b798:	4630      	mov	r0, r6
   1b79a:	f7fa fe13 	bl	163c4 <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1b79e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1b7a2:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1b7a6:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1b7a8:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1b7ac:	d503      	bpl.n	1b7b6 <smp_ident_addr_info+0x102>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1b7ae:	210a      	movs	r1, #10
   1b7b0:	4620      	mov	r0, r4
   1b7b2:	f00b f885 	bl	268c0 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   1b7b6:	f8b4 50e8 	ldrh.w	r5, [r4, #232]	; 0xe8
   1b7ba:	b91d      	cbnz	r5, 1b7c4 <smp_ident_addr_info+0x110>
		smp_pairing_complete(smp, 0);
   1b7bc:	4629      	mov	r1, r5
   1b7be:	4620      	mov	r0, r4
   1b7c0:	f7ff fe72 	bl	1b4a8 <smp_pairing_complete>
	return 0;
   1b7c4:	2000      	movs	r0, #0
   1b7c6:	e795      	b.n	1b6f4 <smp_ident_addr_info+0x40>
			dst = &conn->le.init_addr;
   1b7c8:	f105 0397 	add.w	r3, r5, #151	; 0x97
   1b7cc:	e7c2      	b.n	1b754 <smp_ident_addr_info+0xa0>
   1b7ce:	bf00      	nop
   1b7d0:	0002ab14 	.word	0x0002ab14
   1b7d4:	0002ab2d 	.word	0x0002ab2d
   1b7d8:	0002a8df 	.word	0x0002a8df

0001b7dc <smp_central_ident>:
{
   1b7dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   1b7de:	f8d0 70ec 	ldr.w	r7, [r0, #236]	; 0xec
{
   1b7e2:	4604      	mov	r4, r0
   1b7e4:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1b7e6:	3004      	adds	r0, #4
   1b7e8:	210d      	movs	r1, #13
   1b7ea:	f00a ff6b 	bl	266c4 <atomic_test_bit>
   1b7ee:	b1d8      	cbz	r0, 1b828 <smp_central_ident+0x4c>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1b7f0:	f107 0690 	add.w	r6, r7, #144	; 0x90
   1b7f4:	7a39      	ldrb	r1, [r7, #8]
		struct bt_smp_central_ident *req = (void *)buf->data;
   1b7f6:	689d      	ldr	r5, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1b7f8:	4632      	mov	r2, r6
   1b7fa:	2004      	movs	r0, #4
   1b7fc:	f00b fb28 	bl	26e50 <bt_keys_get_type>
		if (!keys) {
   1b800:	b948      	cbnz	r0, 1b816 <smp_central_ident+0x3a>
			BT_ERR("Unable to get keys for %s",
   1b802:	4630      	mov	r0, r6
   1b804:	f7f9 faba 	bl	14d7c <bt_addr_le_str_real>
   1b808:	2145      	movs	r1, #69	; 0x45
   1b80a:	4602      	mov	r2, r0
   1b80c:	4813      	ldr	r0, [pc, #76]	; (1b85c <smp_central_ident+0x80>)
   1b80e:	f008 fdcc 	bl	243aa <z_log_minimal_printk>
			return BT_SMP_ERR_UNSPECIFIED;
   1b812:	2008      	movs	r0, #8
}
   1b814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b816:	462a      	mov	r2, r5
   1b818:	f832 3b02 	ldrh.w	r3, [r2], #2
   1b81c:	8303      	strh	r3, [r0, #24]
   1b81e:	f8d5 3002 	ldr.w	r3, [r5, #2]
   1b822:	6103      	str	r3, [r0, #16]
   1b824:	6853      	ldr	r3, [r2, #4]
   1b826:	6143      	str	r3, [r0, #20]
	smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
   1b828:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1b82c:	f023 0201 	bic.w	r2, r3, #1
   1b830:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1b834:	079a      	lsls	r2, r3, #30
   1b836:	d50c      	bpl.n	1b852 <smp_central_ident+0x76>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1b838:	2108      	movs	r1, #8
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1b83a:	4620      	mov	r0, r4
   1b83c:	f00b f840 	bl	268c0 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   1b840:	f8b4 50e8 	ldrh.w	r5, [r4, #232]	; 0xe8
   1b844:	b91d      	cbnz	r5, 1b84e <smp_central_ident+0x72>
		smp_pairing_complete(smp, 0);
   1b846:	4629      	mov	r1, r5
   1b848:	4620      	mov	r0, r4
   1b84a:	f7ff fe2d 	bl	1b4a8 <smp_pairing_complete>
	return 0;
   1b84e:	2000      	movs	r0, #0
   1b850:	e7e0      	b.n	1b814 <smp_central_ident+0x38>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1b852:	075b      	lsls	r3, r3, #29
   1b854:	d5f4      	bpl.n	1b840 <smp_central_ident+0x64>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1b856:	210a      	movs	r1, #10
   1b858:	e7ef      	b.n	1b83a <smp_central_ident+0x5e>
   1b85a:	bf00      	nop
   1b85c:	0002a8df 	.word	0x0002a8df

0001b860 <smp_pairing_failed>:
{
   1b860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   1b862:	688d      	ldr	r5, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
   1b864:	f8d0 70ec 	ldr.w	r7, [r0, #236]	; 0xec
	BT_ERR("reason 0x%x", req->reason);
   1b868:	782a      	ldrb	r2, [r5, #0]
{
   1b86a:	4604      	mov	r4, r0
	BT_ERR("reason 0x%x", req->reason);
   1b86c:	2145      	movs	r1, #69	; 0x45
   1b86e:	480f      	ldr	r0, [pc, #60]	; (1b8ac <smp_pairing_failed+0x4c>)
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1b870:	1d26      	adds	r6, r4, #4
	BT_ERR("reason 0x%x", req->reason);
   1b872:	f008 fd9a 	bl	243aa <z_log_minimal_printk>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1b876:	210a      	movs	r1, #10
   1b878:	4630      	mov	r0, r6
   1b87a:	f00b f8bc 	bl	269f6 <atomic_test_and_clear_bit>
   1b87e:	b140      	cbz	r0, 1b892 <smp_pairing_failed+0x32>
		if (bt_auth && bt_auth->cancel) {
   1b880:	4b0b      	ldr	r3, [pc, #44]	; (1b8b0 <smp_pairing_failed+0x50>)
   1b882:	681b      	ldr	r3, [r3, #0]
   1b884:	b963      	cbnz	r3, 1b8a0 <smp_pairing_failed+0x40>
	smp_pairing_complete(smp, req->reason);
   1b886:	4620      	mov	r0, r4
   1b888:	7829      	ldrb	r1, [r5, #0]
   1b88a:	f7ff fe0d 	bl	1b4a8 <smp_pairing_complete>
}
   1b88e:	2000      	movs	r0, #0
   1b890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
   1b892:	210b      	movs	r1, #11
   1b894:	4630      	mov	r0, r6
   1b896:	f00b f8ae 	bl	269f6 <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1b89a:	2800      	cmp	r0, #0
   1b89c:	d1f0      	bne.n	1b880 <smp_pairing_failed+0x20>
   1b89e:	e7f2      	b.n	1b886 <smp_pairing_failed+0x26>
		if (bt_auth && bt_auth->cancel) {
   1b8a0:	691b      	ldr	r3, [r3, #16]
   1b8a2:	2b00      	cmp	r3, #0
   1b8a4:	d0ef      	beq.n	1b886 <smp_pairing_failed+0x26>
			bt_auth->cancel(conn);
   1b8a6:	4638      	mov	r0, r7
   1b8a8:	4798      	blx	r3
   1b8aa:	e7ec      	b.n	1b886 <smp_pairing_failed+0x26>
   1b8ac:	0002ab3a 	.word	0x0002ab3a
   1b8b0:	20001e9c 	.word	0x20001e9c

0001b8b4 <bt_smp_encrypt_change>:
{
   1b8b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_conn *conn = chan->conn;
   1b8b8:	4605      	mov	r5, r0
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1b8ba:	f1a0 06e8 	sub.w	r6, r0, #232	; 0xe8
{
   1b8be:	b088      	sub	sp, #32
   1b8c0:	4604      	mov	r4, r0
   1b8c2:	460f      	mov	r7, r1
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1b8c4:	4630      	mov	r0, r6
   1b8c6:	2101      	movs	r1, #1
	struct bt_conn *conn = chan->conn;
   1b8c8:	f855 89ec 	ldr.w	r8, [r5], #-236
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1b8cc:	f00b f893 	bl	269f6 <atomic_test_and_clear_bit>
   1b8d0:	2800      	cmp	r0, #0
   1b8d2:	f000 8085 	beq.w	1b9e0 <bt_smp_encrypt_change+0x12c>
	if (hci_status) {
   1b8d6:	b1d7      	cbz	r7, 1b90e <bt_smp_encrypt_change+0x5a>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1b8d8:	2103      	movs	r1, #3
   1b8da:	4630      	mov	r0, r6
   1b8dc:	f00a fef2 	bl	266c4 <atomic_test_bit>
   1b8e0:	2800      	cmp	r0, #0
   1b8e2:	d07d      	beq.n	1b9e0 <bt_smp_encrypt_change+0x12c>
			uint8_t smp_err = smp_err_get(
   1b8e4:	4638      	mov	r0, r7
   1b8e6:	f7fa f97d 	bl	15be4 <bt_security_err_get>
	switch (auth_err) {
   1b8ea:	3801      	subs	r0, #1
   1b8ec:	b2c0      	uxtb	r0, r0
   1b8ee:	2808      	cmp	r0, #8
   1b8f0:	bf9a      	itte	ls
   1b8f2:	4b6c      	ldrls	r3, [pc, #432]	; (1baa4 <bt_smp_encrypt_change+0x1f0>)
   1b8f4:	5c1c      	ldrbls	r4, [r3, r0]
			uint8_t smp_err = smp_err_get(
   1b8f6:	2400      	movhi	r4, #0
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   1b8f8:	2102      	movs	r1, #2
   1b8fa:	4630      	mov	r0, r6
   1b8fc:	f00a ffe0 	bl	268c0 <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
   1b900:	4621      	mov	r1, r4
		smp_pairing_complete(smp, 0);
   1b902:	4628      	mov	r0, r5
}
   1b904:	b008      	add	sp, #32
   1b906:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		smp_pairing_complete(smp, 0);
   1b90a:	f7ff bdcd 	b.w	1b4a8 <smp_pairing_complete>
	if (!conn->encrypt) {
   1b90e:	f898 300b 	ldrb.w	r3, [r8, #11]
   1b912:	2b00      	cmp	r3, #0
   1b914:	d064      	beq.n	1b9e0 <bt_smp_encrypt_change+0x12c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1b916:	2103      	movs	r1, #3
   1b918:	4630      	mov	r0, r6
   1b91a:	f00a fed3 	bl	266c4 <atomic_test_bit>
   1b91e:	b928      	cbnz	r0, 1b92c <bt_smp_encrypt_change+0x78>
		smp_reset(smp);
   1b920:	4628      	mov	r0, r5
}
   1b922:	b008      	add	sp, #32
   1b924:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		smp_reset(smp);
   1b928:	f00b b87d 	b.w	26a26 <smp_reset>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1b92c:	2105      	movs	r1, #5
   1b92e:	4630      	mov	r0, r6
   1b930:	f00a fec8 	bl	266c4 <atomic_test_bit>
   1b934:	b1b8      	cbz	r0, 1b966 <bt_smp_encrypt_change+0xb2>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   1b936:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   1b93a:	071b      	lsls	r3, r3, #28
   1b93c:	d507      	bpl.n	1b94e <bt_smp_encrypt_change+0x9a>
   1b93e:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   1b942:	071f      	lsls	r7, r3, #28
   1b944:	d503      	bpl.n	1b94e <bt_smp_encrypt_change+0x9a>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   1b946:	2111      	movs	r1, #17
   1b948:	4630      	mov	r0, r6
   1b94a:	f00a ffb9 	bl	268c0 <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   1b94e:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   1b952:	f023 0308 	bic.w	r3, r3, #8
   1b956:	f804 3c04 	strb.w	r3, [r4, #-4]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
   1b95a:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   1b95e:	f023 0308 	bic.w	r3, r3, #8
   1b962:	f804 3c03 	strb.w	r3, [r4, #-3]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   1b966:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   1b96a:	07d8      	lsls	r0, r3, #31
   1b96c:	d517      	bpl.n	1b99e <bt_smp_encrypt_change+0xea>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   1b96e:	2106      	movs	r1, #6
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1b970:	4628      	mov	r0, r5
   1b972:	f00a ffa5 	bl	268c0 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   1b976:	2102      	movs	r1, #2
   1b978:	4630      	mov	r0, r6
   1b97a:	f00a ffa1 	bl	268c0 <atomic_set_bit>
	struct bt_conn *conn = smp->chan.chan.conn;
   1b97e:	6823      	ldr	r3, [r4, #0]
	if (!keys) {
   1b980:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
   1b984:	b99a      	cbnz	r2, 1b9ae <bt_smp_encrypt_change+0xfa>
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
   1b986:	f103 0090 	add.w	r0, r3, #144	; 0x90
   1b98a:	f7f9 f9f7 	bl	14d7c <bt_addr_le_str_real>
   1b98e:	4602      	mov	r2, r0
   1b990:	4845      	ldr	r0, [pc, #276]	; (1baa8 <bt_smp_encrypt_change+0x1f4>)
   1b992:	2145      	movs	r1, #69	; 0x45
}
   1b994:	b008      	add	sp, #32
   1b996:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
   1b99a:	f008 bd06 	b.w	243aa <z_log_minimal_printk>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1b99e:	0799      	lsls	r1, r3, #30
   1b9a0:	d501      	bpl.n	1b9a6 <bt_smp_encrypt_change+0xf2>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1b9a2:	2108      	movs	r1, #8
   1b9a4:	e7e4      	b.n	1b970 <bt_smp_encrypt_change+0xbc>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1b9a6:	075a      	lsls	r2, r3, #29
   1b9a8:	d5e5      	bpl.n	1b976 <bt_smp_encrypt_change+0xc2>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1b9aa:	210a      	movs	r1, #10
   1b9ac:	e7e0      	b.n	1b970 <bt_smp_encrypt_change+0xbc>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1b9ae:	2105      	movs	r1, #5
   1b9b0:	f00a fe88 	bl	266c4 <atomic_test_bit>
   1b9b4:	b980      	cbnz	r0, 1b9d8 <bt_smp_encrypt_change+0x124>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
   1b9b6:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   1b9ba:	07db      	lsls	r3, r3, #31
   1b9bc:	d50c      	bpl.n	1b9d8 <bt_smp_encrypt_change+0x124>
	struct bt_keys *keys = conn->le.keys;
   1b9be:	6823      	ldr	r3, [r4, #0]
		if (bt_rand((void *)&rand, sizeof(rand))) {
   1b9c0:	211a      	movs	r1, #26
   1b9c2:	a801      	add	r0, sp, #4
	struct bt_keys *keys = conn->le.keys;
   1b9c4:	f8d3 70bc 	ldr.w	r7, [r3, #188]	; 0xbc
		if (bt_rand((void *)&rand, sizeof(rand))) {
   1b9c8:	f003 f83e 	bl	1ea48 <bt_rand>
   1b9cc:	4681      	mov	r9, r0
   1b9ce:	b150      	cbz	r0, 1b9e6 <bt_smp_encrypt_change+0x132>
			BT_ERR("Unable to get random bytes");
   1b9d0:	4836      	ldr	r0, [pc, #216]	; (1baac <bt_smp_encrypt_change+0x1f8>)
   1b9d2:	2145      	movs	r1, #69	; 0x45
			BT_ERR("Unable to allocate Encrypt Info buffer");
   1b9d4:	f008 fce9 	bl	243aa <z_log_minimal_printk>
	if (!smp->local_dist && !smp->remote_dist) {
   1b9d8:	f834 1c04 	ldrh.w	r1, [r4, #-4]
   1b9dc:	2900      	cmp	r1, #0
   1b9de:	d090      	beq.n	1b902 <bt_smp_encrypt_change+0x4e>
}
   1b9e0:	b008      	add	sp, #32
   1b9e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
   1b9e6:	2106      	movs	r1, #6
   1b9e8:	4628      	mov	r0, r5
   1b9ea:	f00a ff7d 	bl	268e8 <smp_create_pdu.constprop.0>
		if (!buf) {
   1b9ee:	4680      	mov	r8, r0
   1b9f0:	b910      	cbnz	r0, 1b9f8 <bt_smp_encrypt_change+0x144>
			BT_ERR("Unable to allocate Encrypt Info buffer");
   1b9f2:	482f      	ldr	r0, [pc, #188]	; (1bab0 <bt_smp_encrypt_change+0x1fc>)
   1b9f4:	2145      	movs	r1, #69	; 0x45
   1b9f6:	e7ed      	b.n	1b9d4 <bt_smp_encrypt_change+0x120>
	return net_buf_simple_add(&buf->b, len);
   1b9f8:	2110      	movs	r1, #16
   1b9fa:	3008      	adds	r0, #8
   1b9fc:	f000 fe48 	bl	1c690 <net_buf_simple_add>
   1ba00:	7b3a      	ldrb	r2, [r7, #12]
   1ba02:	a901      	add	r1, sp, #4
   1ba04:	4682      	mov	sl, r0
   1ba06:	f00c f829 	bl	27a5c <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
   1ba0a:	7b38      	ldrb	r0, [r7, #12]
   1ba0c:	280f      	cmp	r0, #15
   1ba0e:	d805      	bhi.n	1ba1c <bt_smp_encrypt_change+0x168>
__ssp_bos_icheck3(memset, void *, int)
   1ba10:	f1c0 0210 	rsb	r2, r0, #16
   1ba14:	4649      	mov	r1, r9
   1ba16:	4450      	add	r0, sl
   1ba18:	f00c f841 	bl	27a9e <memset>
		smp_send(smp, buf, NULL, NULL);
   1ba1c:	4641      	mov	r1, r8
   1ba1e:	2200      	movs	r2, #0
   1ba20:	4628      	mov	r0, r5
   1ba22:	f00a fead 	bl	26780 <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_CENTRAL_IDENT,
   1ba26:	2107      	movs	r1, #7
   1ba28:	4628      	mov	r0, r5
   1ba2a:	f00a ff5d 	bl	268e8 <smp_create_pdu.constprop.0>
		if (!buf) {
   1ba2e:	4680      	mov	r8, r0
   1ba30:	b910      	cbnz	r0, 1ba38 <bt_smp_encrypt_change+0x184>
			BT_ERR("Unable to allocate Central Ident buffer");
   1ba32:	4820      	ldr	r0, [pc, #128]	; (1bab4 <bt_smp_encrypt_change+0x200>)
   1ba34:	2145      	movs	r1, #69	; 0x45
   1ba36:	e7cd      	b.n	1b9d4 <bt_smp_encrypt_change+0x120>
   1ba38:	210a      	movs	r1, #10
   1ba3a:	3008      	adds	r0, #8
   1ba3c:	f000 fe28 	bl	1c690 <net_buf_simple_add>
   1ba40:	aa05      	add	r2, sp, #20
   1ba42:	4603      	mov	r3, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1ba44:	ca03      	ldmia	r2!, {r0, r1}
   1ba46:	f8c3 0002 	str.w	r0, [r3, #2]
   1ba4a:	f8c3 1006 	str.w	r1, [r3, #6]
   1ba4e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   1ba52:	801a      	strh	r2, [r3, #0]
		smp_send(smp, buf, smp_ident_sent, NULL);
   1ba54:	4641      	mov	r1, r8
   1ba56:	4628      	mov	r0, r5
   1ba58:	4a17      	ldr	r2, [pc, #92]	; (1bab8 <bt_smp_encrypt_change+0x204>)
   1ba5a:	f00a fe91 	bl	26780 <smp_send.constprop.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1ba5e:	4630      	mov	r0, r6
   1ba60:	210d      	movs	r1, #13
   1ba62:	f00a fe2f 	bl	266c4 <atomic_test_bit>
   1ba66:	ae05      	add	r6, sp, #20
   1ba68:	2800      	cmp	r0, #0
   1ba6a:	d0b5      	beq.n	1b9d8 <bt_smp_encrypt_change+0x124>
			bt_keys_add_type(keys, BT_KEYS_PERIPH_LTK);
   1ba6c:	2101      	movs	r1, #1
   1ba6e:	4638      	mov	r0, r7
   1ba70:	f00b f9fe 	bl	26e70 <bt_keys_add_type>
   1ba74:	ab01      	add	r3, sp, #4
   1ba76:	f107 0c4a 	add.w	ip, r7, #74	; 0x4a
   1ba7a:	461a      	mov	r2, r3
   1ba7c:	ca03      	ldmia	r2!, {r0, r1}
   1ba7e:	42b2      	cmp	r2, r6
   1ba80:	f8cc 0000 	str.w	r0, [ip]
   1ba84:	f8cc 1004 	str.w	r1, [ip, #4]
   1ba88:	4613      	mov	r3, r2
   1ba8a:	f10c 0c08 	add.w	ip, ip, #8
   1ba8e:	d1f4      	bne.n	1ba7a <bt_smp_encrypt_change+0x1c6>
   1ba90:	4633      	mov	r3, r6
   1ba92:	cb03      	ldmia	r3!, {r0, r1}
   1ba94:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   1ba98:	6438      	str	r0, [r7, #64]	; 0x40
   1ba9a:	6479      	str	r1, [r7, #68]	; 0x44
   1ba9c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
   1baa0:	e79a      	b.n	1b9d8 <bt_smp_encrypt_change+0x124>
   1baa2:	bf00      	nop
   1baa4:	0002ac34 	.word	0x0002ac34
   1baa8:	0002ab4b 	.word	0x0002ab4b
   1baac:	0002ab65 	.word	0x0002ab65
   1bab0:	0002ab85 	.word	0x0002ab85
   1bab4:	0002abb1 	.word	0x0002abb1
   1bab8:	0001bae5 	.word	0x0001bae5

0001babc <smp_timeout>:
{
   1babc:	b510      	push	{r4, lr}
	BT_ERR("SMP Timeout");
   1babe:	2145      	movs	r1, #69	; 0x45
{
   1bac0:	4604      	mov	r4, r0
	BT_ERR("SMP Timeout");
   1bac2:	4807      	ldr	r0, [pc, #28]	; (1bae0 <smp_timeout+0x24>)
   1bac4:	f008 fc71 	bl	243aa <z_log_minimal_printk>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   1bac8:	f5a4 70c0 	sub.w	r0, r4, #384	; 0x180
   1bacc:	2108      	movs	r1, #8
   1bace:	f7ff fceb 	bl	1b4a8 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1bad2:	f5a4 70be 	sub.w	r0, r4, #380	; 0x17c
   1bad6:	2104      	movs	r1, #4
}
   1bad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1badc:	f00a bef0 	b.w	268c0 <atomic_set_bit>
   1bae0:	0002abde 	.word	0x0002abde

0001bae4 <smp_ident_sent>:
{
   1bae4:	b510      	push	{r4, lr}
	if (conn->type == BT_CONN_TYPE_LE) {
   1bae6:	7883      	ldrb	r3, [r0, #2]
   1bae8:	2b01      	cmp	r3, #1
   1baea:	d11e      	bne.n	1bb2a <smp_ident_sent+0x46>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   1baec:	2106      	movs	r1, #6
   1baee:	f009 ff42 	bl	25976 <bt_l2cap_le_lookup_tx_cid>
		__ASSERT(chan, "No SMP channel found");
   1baf2:	4604      	mov	r4, r0
   1baf4:	b950      	cbnz	r0, 1bb0c <smp_ident_sent+0x28>
   1baf6:	490d      	ldr	r1, [pc, #52]	; (1bb2c <smp_ident_sent+0x48>)
   1baf8:	480d      	ldr	r0, [pc, #52]	; (1bb30 <smp_ident_sent+0x4c>)
   1bafa:	f240 322f 	movw	r2, #815	; 0x32f
   1bafe:	f008 fc46 	bl	2438e <assert_print>
   1bb02:	480a      	ldr	r0, [pc, #40]	; (1bb2c <smp_ident_sent+0x48>)
   1bb04:	f240 312f 	movw	r1, #815	; 0x32f
   1bb08:	f008 fc3a 	bl	24380 <assert_post_action>
		smp->local_dist &= ~dist_complete;
   1bb0c:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   1bb10:	f023 0301 	bic.w	r3, r3, #1
   1bb14:	f804 3c04 	strb.w	r3, [r4, #-4]
		if (!smp->local_dist && !smp->remote_dist) {
   1bb18:	f834 1c04 	ldrh.w	r1, [r4, #-4]
   1bb1c:	b929      	cbnz	r1, 1bb2a <smp_ident_sent+0x46>
			smp_pairing_complete(smp, 0);
   1bb1e:	f1a4 00ec 	sub.w	r0, r4, #236	; 0xec
}
   1bb22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_pairing_complete(smp, 0);
   1bb26:	f7ff bcbf 	b.w	1b4a8 <smp_pairing_complete>
}
   1bb2a:	bd10      	pop	{r4, pc}
   1bb2c:	0002abef 	.word	0x0002abef
   1bb30:	000289af 	.word	0x000289af

0001bb34 <bt_smp_update_keys>:
{
   1bb34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bb36:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   1bb38:	f7fe fda2 	bl	1a680 <smp_chan_get>
	if (!smp) {
   1bb3c:	4605      	mov	r5, r0
   1bb3e:	2800      	cmp	r0, #0
   1bb40:	d066      	beq.n	1bc10 <bt_smp_update_keys+0xdc>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1bb42:	1d06      	adds	r6, r0, #4
   1bb44:	2103      	movs	r1, #3
   1bb46:	4630      	mov	r0, r6
   1bb48:	f00a fdbc 	bl	266c4 <atomic_test_bit>
   1bb4c:	2800      	cmp	r0, #0
   1bb4e:	d05f      	beq.n	1bc10 <bt_smp_update_keys+0xdc>
	if (conn->le.keys) {
   1bb50:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1bb54:	b108      	cbz	r0, 1bb5a <bt_smp_update_keys+0x26>
		bt_keys_clear(conn->le.keys);
   1bb56:	f000 f927 	bl	1bda8 <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1bb5a:	f104 0790 	add.w	r7, r4, #144	; 0x90
   1bb5e:	7a20      	ldrb	r0, [r4, #8]
   1bb60:	4639      	mov	r1, r7
   1bb62:	f000 f879 	bl	1bc58 <bt_keys_get_addr>
   1bb66:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	if (!conn->le.keys) {
   1bb6a:	b968      	cbnz	r0, 1bb88 <bt_smp_update_keys+0x54>
		BT_ERR("Unable to get keys for %s",
   1bb6c:	4638      	mov	r0, r7
   1bb6e:	f7f9 f905 	bl	14d7c <bt_addr_le_str_real>
   1bb72:	2145      	movs	r1, #69	; 0x45
   1bb74:	4602      	mov	r2, r0
   1bb76:	482c      	ldr	r0, [pc, #176]	; (1bc28 <bt_smp_update_keys+0xf4>)
   1bb78:	f008 fc17 	bl	243aa <z_log_minimal_printk>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1bb7c:	4628      	mov	r0, r5
   1bb7e:	2108      	movs	r1, #8
}
   1bb80:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1bb84:	f00b b8b0 	b.w	26ce8 <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   1bb88:	210e      	movs	r1, #14
   1bb8a:	4630      	mov	r0, r6
   1bb8c:	f00a fd9a 	bl	266c4 <atomic_test_bit>
   1bb90:	b128      	cbz	r0, 1bb9e <bt_smp_update_keys+0x6a>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   1bb92:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
   1bb96:	7b53      	ldrb	r3, [r2, #13]
   1bb98:	f043 0302 	orr.w	r3, r3, #2
   1bb9c:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   1bb9e:	7a2a      	ldrb	r2, [r5, #8]
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   1bba0:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
	switch (smp->method) {
   1bba4:	2a03      	cmp	r2, #3
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   1bba6:	7b4b      	ldrb	r3, [r1, #13]
	switch (smp->method) {
   1bba8:	d833      	bhi.n	1bc12 <bt_smp_update_keys+0xde>
   1bbaa:	b3aa      	cbz	r2, 1bc18 <bt_smp_update_keys+0xe4>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   1bbac:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1bbb0:	734b      	strb	r3, [r1, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   1bbb2:	7d2b      	ldrb	r3, [r5, #20]
   1bbb4:	7b6a      	ldrb	r2, [r5, #13]
   1bbb6:	4293      	cmp	r3, r2
   1bbb8:	bf28      	it	cs
   1bbba:	4613      	movcs	r3, r2
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   1bbbc:	730b      	strb	r3, [r1, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1bbbe:	4630      	mov	r0, r6
   1bbc0:	2105      	movs	r1, #5
   1bbc2:	f00a fd7f 	bl	266c4 <atomic_test_bit>
   1bbc6:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
		conn->le.keys->flags |= BT_KEYS_SC;
   1bbca:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1bbcc:	b338      	cbz	r0, 1bc1e <bt_smp_update_keys+0xea>
		conn->le.keys->flags |= BT_KEYS_SC;
   1bbce:	f042 0210 	orr.w	r2, r2, #16
   1bbd2:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1bbd4:	210d      	movs	r1, #13
   1bbd6:	4630      	mov	r0, r6
   1bbd8:	f00a fd74 	bl	266c4 <atomic_test_bit>
   1bbdc:	b1c0      	cbz	r0, 1bc10 <bt_smp_update_keys+0xdc>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   1bbde:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1bbe2:	2120      	movs	r1, #32
   1bbe4:	f00b f944 	bl	26e70 <bt_keys_add_type>
   1bbe8:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   1bbec:	f105 0247 	add.w	r2, r5, #71	; 0x47
   1bbf0:	331a      	adds	r3, #26
   1bbf2:	3557      	adds	r5, #87	; 0x57
   1bbf4:	f852 1b04 	ldr.w	r1, [r2], #4
   1bbf8:	f843 1b04 	str.w	r1, [r3], #4
   1bbfc:	42aa      	cmp	r2, r5
   1bbfe:	d1f9      	bne.n	1bbf4 <bt_smp_update_keys+0xc0>
__ssp_bos_icheck3(memset, void *, int)
   1bc00:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
   1bc04:	2300      	movs	r3, #0
   1bc06:	6113      	str	r3, [r2, #16]
   1bc08:	6153      	str	r3, [r2, #20]
   1bc0a:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
   1bc0e:	8313      	strh	r3, [r2, #24]
}
   1bc10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch (smp->method) {
   1bc12:	3a05      	subs	r2, #5
   1bc14:	2a01      	cmp	r2, #1
   1bc16:	d9c9      	bls.n	1bbac <bt_smp_update_keys+0x78>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1bc18:	f023 0301 	bic.w	r3, r3, #1
   1bc1c:	e7c8      	b.n	1bbb0 <bt_smp_update_keys+0x7c>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   1bc1e:	f022 0210 	bic.w	r2, r2, #16
   1bc22:	735a      	strb	r2, [r3, #13]
   1bc24:	e7f4      	b.n	1bc10 <bt_smp_update_keys+0xdc>
   1bc26:	bf00      	nop
   1bc28:	0002a8df 	.word	0x0002a8df

0001bc2c <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   1bc2c:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1bc2e:	4b07      	ldr	r3, [pc, #28]	; (1bc4c <bt_smp_init+0x20>)
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   1bc30:	4807      	ldr	r0, [pc, #28]	; (1bc50 <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1bc32:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   1bc36:	f003 0306 	and.w	r3, r3, #6
   1bc3a:	1f9a      	subs	r2, r3, #6
   1bc3c:	4253      	negs	r3, r2
   1bc3e:	4153      	adcs	r3, r2
   1bc40:	4a04      	ldr	r2, [pc, #16]	; (1bc54 <bt_smp_init+0x28>)
   1bc42:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
   1bc44:	f7fb f960 	bl	16f08 <bt_pub_key_gen>
	}

	return smp_self_test();
}
   1bc48:	2000      	movs	r0, #0
   1bc4a:	bd08      	pop	{r3, pc}
   1bc4c:	200002d0 	.word	0x200002d0
   1bc50:	20000630 	.word	0x20000630
   1bc54:	200023f7 	.word	0x200023f7

0001bc58 <bt_keys_get_addr>:
	return kdata.in_use;
}
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
   1bc58:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   1bc5c:	4f14      	ldr	r7, [pc, #80]	; (1bcb0 <bt_keys_get_addr+0x58>)
   1bc5e:	463d      	mov	r5, r7
{
   1bc60:	4680      	mov	r8, r0
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   1bc62:	f815 3b01 	ldrb.w	r3, [r5], #1
   1bc66:	4283      	cmp	r3, r0
{
   1bc68:	460e      	mov	r6, r1
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   1bc6a:	d00b      	beq.n	1bc84 <bt_keys_get_addr+0x2c>
			return keys;
		}
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
   1bc6c:	2400      	movs	r4, #0
	return memcmp(a, b, sizeof(*a));
   1bc6e:	4811      	ldr	r0, [pc, #68]	; (1bcb4 <bt_keys_get_addr+0x5c>)
   1bc70:	9400      	str	r4, [sp, #0]
   1bc72:	2207      	movs	r2, #7
   1bc74:	4669      	mov	r1, sp
   1bc76:	f8cd 4003 	str.w	r4, [sp, #3]
   1bc7a:	f00b fedf 	bl	27a3c <memcmp>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
   1bc7e:	b158      	cbz	r0, 1bc98 <bt_keys_get_addr+0x40>
		return keys;
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
   1bc80:	4620      	mov	r0, r4
   1bc82:	e006      	b.n	1bc92 <bt_keys_get_addr+0x3a>
   1bc84:	2207      	movs	r2, #7
   1bc86:	4628      	mov	r0, r5
   1bc88:	f00b fed8 	bl	27a3c <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   1bc8c:	2800      	cmp	r0, #0
   1bc8e:	d1ed      	bne.n	1bc6c <bt_keys_get_addr+0x14>
		keys = &key_pool[i];
   1bc90:	4638      	mov	r0, r7
}
   1bc92:	b002      	add	sp, #8
   1bc94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		keys->id = id;
   1bc98:	f887 8000 	strb.w	r8, [r7]
	memcpy(dst, src, sizeof(*dst));
   1bc9c:	6833      	ldr	r3, [r6, #0]
   1bc9e:	f8c7 3001 	str.w	r3, [r7, #1]
   1bca2:	88b3      	ldrh	r3, [r6, #4]
   1bca4:	80ab      	strh	r3, [r5, #4]
   1bca6:	79b3      	ldrb	r3, [r6, #6]
		return keys;
   1bca8:	4801      	ldr	r0, [pc, #4]	; (1bcb0 <bt_keys_get_addr+0x58>)
   1bcaa:	71ab      	strb	r3, [r5, #6]
}
   1bcac:	e7f1      	b.n	1bc92 <bt_keys_get_addr+0x3a>
   1bcae:	bf00      	nop
   1bcb0:	20001fdc 	.word	0x20001fdc
   1bcb4:	20001fdd 	.word	0x20001fdd

0001bcb8 <bt_keys_foreach>:
	}
}

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
   1bcb8:	460b      	mov	r3, r1
   1bcba:	4611      	mov	r1, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
   1bcbc:	4a04      	ldr	r2, [pc, #16]	; (1bcd0 <bt_keys_foreach+0x18>)
{
   1bcbe:	b410      	push	{r4}
		if ((key_pool[i].keys & type)) {
   1bcc0:	89d4      	ldrh	r4, [r2, #14]
   1bcc2:	4204      	tst	r4, r0
   1bcc4:	d002      	beq.n	1bccc <bt_keys_foreach+0x14>
			func(&key_pool[i], data);
		}
	}
}
   1bcc6:	bc10      	pop	{r4}
			func(&key_pool[i], data);
   1bcc8:	4610      	mov	r0, r2
   1bcca:	4718      	bx	r3
}
   1bccc:	bc10      	pop	{r4}
   1bcce:	4770      	bx	lr
   1bcd0:	20001fdc 	.word	0x20001fdc

0001bcd4 <keys_commit>:
{
	bt_id_add(keys);
}

static int keys_commit(void)
{
   1bcd4:	b508      	push	{r3, lr}
	 * the keys were already removed.
	 */
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && IS_ENABLED(CONFIG_BT_PRIVACY)) {
		bt_keys_foreach(BT_KEYS_ALL, id_add, NULL);
	} else {
		bt_keys_foreach(BT_KEYS_IRK, id_add, NULL);
   1bcd6:	4903      	ldr	r1, [pc, #12]	; (1bce4 <keys_commit+0x10>)
   1bcd8:	2200      	movs	r2, #0
   1bcda:	2002      	movs	r0, #2
   1bcdc:	f7ff ffec 	bl	1bcb8 <bt_keys_foreach>
	}

	return 0;
}
   1bce0:	2000      	movs	r0, #0
   1bce2:	bd08      	pop	{r3, pc}
   1bce4:	00026e4d 	.word	0x00026e4d

0001bce8 <bt_keys_find>:
{
   1bce8:	b510      	push	{r4, lr}
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1bcea:	4c09      	ldr	r4, [pc, #36]	; (1bd10 <bt_keys_find+0x28>)
{
   1bcec:	460b      	mov	r3, r1
   1bcee:	4611      	mov	r1, r2
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1bcf0:	89e2      	ldrh	r2, [r4, #14]
   1bcf2:	4202      	tst	r2, r0
   1bcf4:	d007      	beq.n	1bd06 <bt_keys_find+0x1e>
   1bcf6:	7822      	ldrb	r2, [r4, #0]
   1bcf8:	429a      	cmp	r2, r3
   1bcfa:	d104      	bne.n	1bd06 <bt_keys_find+0x1e>
	return memcmp(a, b, sizeof(*a));
   1bcfc:	2207      	movs	r2, #7
   1bcfe:	1c60      	adds	r0, r4, #1
   1bd00:	f00b fe9c 	bl	27a3c <memcmp>
   1bd04:	b108      	cbz	r0, 1bd0a <bt_keys_find+0x22>
	return NULL;
   1bd06:	2000      	movs	r0, #0
}
   1bd08:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   1bd0a:	4620      	mov	r0, r4
   1bd0c:	e7fc      	b.n	1bd08 <bt_keys_find+0x20>
   1bd0e:	bf00      	nop
   1bd10:	20001fdc 	.word	0x20001fdc

0001bd14 <bt_keys_find_irk>:
{
   1bd14:	b570      	push	{r4, r5, r6, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1bd16:	780b      	ldrb	r3, [r1, #0]
   1bd18:	2b01      	cmp	r3, #1
   1bd1a:	4606      	mov	r6, r0
   1bd1c:	460d      	mov	r5, r1
   1bd1e:	d001      	beq.n	1bd24 <bt_keys_find_irk+0x10>
		return NULL;
   1bd20:	2000      	movs	r0, #0
}
   1bd22:	bd70      	pop	{r4, r5, r6, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   1bd24:	798b      	ldrb	r3, [r1, #6]
   1bd26:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1bd2a:	2b40      	cmp	r3, #64	; 0x40
   1bd2c:	d1f8      	bne.n	1bd20 <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1bd2e:	4c13      	ldr	r4, [pc, #76]	; (1bd7c <bt_keys_find_irk+0x68>)
   1bd30:	89e3      	ldrh	r3, [r4, #14]
   1bd32:	079b      	lsls	r3, r3, #30
   1bd34:	d5f4      	bpl.n	1bd20 <bt_keys_find_irk+0xc>
		if (key_pool[i].id == id &&
   1bd36:	7823      	ldrb	r3, [r4, #0]
   1bd38:	42b3      	cmp	r3, r6
   1bd3a:	d10b      	bne.n	1bd54 <bt_keys_find_irk+0x40>
	return memcmp(a, b, sizeof(*a));
   1bd3c:	2206      	movs	r2, #6
   1bd3e:	f104 013a 	add.w	r1, r4, #58	; 0x3a
   1bd42:	1c68      	adds	r0, r5, #1
   1bd44:	f00b fe7a 	bl	27a3c <memcmp>
   1bd48:	b908      	cbnz	r0, 1bd4e <bt_keys_find_irk+0x3a>
			return &key_pool[i];
   1bd4a:	4620      	mov	r0, r4
   1bd4c:	e7e9      	b.n	1bd22 <bt_keys_find_irk+0xe>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1bd4e:	89e3      	ldrh	r3, [r4, #14]
   1bd50:	079a      	lsls	r2, r3, #30
   1bd52:	d5e5      	bpl.n	1bd20 <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
   1bd54:	7823      	ldrb	r3, [r4, #0]
   1bd56:	42b3      	cmp	r3, r6
   1bd58:	d1e2      	bne.n	1bd20 <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   1bd5a:	1c6e      	adds	r6, r5, #1
   1bd5c:	4808      	ldr	r0, [pc, #32]	; (1bd80 <bt_keys_find_irk+0x6c>)
   1bd5e:	4631      	mov	r1, r6
   1bd60:	f009 f902 	bl	24f68 <bt_rpa_irk_matches>
   1bd64:	2800      	cmp	r0, #0
   1bd66:	d0db      	beq.n	1bd20 <bt_keys_find_irk+0xc>
	memcpy(dst, src, sizeof(*dst));
   1bd68:	f8d5 3001 	ldr.w	r3, [r5, #1]
   1bd6c:	4805      	ldr	r0, [pc, #20]	; (1bd84 <bt_keys_find_irk+0x70>)
   1bd6e:	f8c4 303a 	str.w	r3, [r4, #58]	; 0x3a
   1bd72:	f8b5 3005 	ldrh.w	r3, [r5, #5]
   1bd76:	8083      	strh	r3, [r0, #4]
			return &key_pool[i];
   1bd78:	383a      	subs	r0, #58	; 0x3a
}
   1bd7a:	e7d2      	b.n	1bd22 <bt_keys_find_irk+0xe>
   1bd7c:	20001fdc 	.word	0x20001fdc
   1bd80:	20002006 	.word	0x20002006
   1bd84:	20002016 	.word	0x20002016

0001bd88 <bt_keys_find_addr>:
{
   1bd88:	b510      	push	{r4, lr}
		if (key_pool[i].id == id &&
   1bd8a:	4c06      	ldr	r4, [pc, #24]	; (1bda4 <bt_keys_find_addr+0x1c>)
   1bd8c:	7823      	ldrb	r3, [r4, #0]
   1bd8e:	4283      	cmp	r3, r0
   1bd90:	d104      	bne.n	1bd9c <bt_keys_find_addr+0x14>
	return memcmp(a, b, sizeof(*a));
   1bd92:	2207      	movs	r2, #7
   1bd94:	1c60      	adds	r0, r4, #1
   1bd96:	f00b fe51 	bl	27a3c <memcmp>
   1bd9a:	b108      	cbz	r0, 1bda0 <bt_keys_find_addr+0x18>
	return NULL;
   1bd9c:	2000      	movs	r0, #0
}
   1bd9e:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   1bda0:	4620      	mov	r0, r4
   1bda2:	e7fc      	b.n	1bd9e <bt_keys_find_addr+0x16>
   1bda4:	20001fdc 	.word	0x20001fdc

0001bda8 <bt_keys_clear>:
{
   1bda8:	b570      	push	{r4, r5, r6, lr}
	if (keys->state & BT_KEYS_ID_ADDED) {
   1bdaa:	7a03      	ldrb	r3, [r0, #8]
   1bdac:	075b      	lsls	r3, r3, #29
{
   1bdae:	b08c      	sub	sp, #48	; 0x30
   1bdb0:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   1bdb2:	d501      	bpl.n	1bdb8 <bt_keys_clear+0x10>
		bt_id_del(keys);
   1bdb4:	f7fa fbba 	bl	1652c <bt_id_del>
		if (keys->id) {
   1bdb8:	4625      	mov	r5, r4
   1bdba:	f815 2b01 	ldrb.w	r2, [r5], #1
   1bdbe:	b1b2      	cbz	r2, 1bdee <bt_keys_clear+0x46>
			u8_to_dec(id, sizeof(id), keys->id);
   1bdc0:	ae02      	add	r6, sp, #8
   1bdc2:	2104      	movs	r1, #4
   1bdc4:	4630      	mov	r0, r6
   1bdc6:	f008 f89d 	bl	23f04 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "keys",
   1bdca:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "keys",
   1bdcc:	4a09      	ldr	r2, [pc, #36]	; (1bdf4 <bt_keys_clear+0x4c>)
   1bdce:	462b      	mov	r3, r5
   1bdd0:	2124      	movs	r1, #36	; 0x24
   1bdd2:	a803      	add	r0, sp, #12
   1bdd4:	f7f9 f880 	bl	14ed8 <bt_settings_encode_key>
		settings_delete(key);
   1bdd8:	a803      	add	r0, sp, #12
   1bdda:	f008 fd60 	bl	2489e <settings_delete>
   1bdde:	225c      	movs	r2, #92	; 0x5c
   1bde0:	2100      	movs	r1, #0
   1bde2:	4620      	mov	r0, r4
}
   1bde4:	b00c      	add	sp, #48	; 0x30
   1bde6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1bdea:	f00b be58 	b.w	27a9e <memset>
			bt_settings_encode_key(key, sizeof(key), "keys",
   1bdee:	9200      	str	r2, [sp, #0]
   1bdf0:	e7ec      	b.n	1bdcc <bt_keys_clear+0x24>
   1bdf2:	bf00      	nop
   1bdf4:	0002ad3f 	.word	0x0002ad3f

0001bdf8 <keys_set>:
{
   1bdf8:	b570      	push	{r4, r5, r6, lr}
   1bdfa:	4605      	mov	r5, r0
   1bdfc:	b098      	sub	sp, #96	; 0x60
   1bdfe:	4614      	mov	r4, r2
   1be00:	4618      	mov	r0, r3
	if (!name) {
   1be02:	b945      	cbnz	r5, 1be16 <keys_set+0x1e>
		BT_ERR("Insufficient number of arguments");
   1be04:	4832      	ldr	r0, [pc, #200]	; (1bed0 <keys_set+0xd8>)
   1be06:	2145      	movs	r1, #69	; 0x45
   1be08:	f008 facf 	bl	243aa <z_log_minimal_printk>
		return -EINVAL;
   1be0c:	f06f 0415 	mvn.w	r4, #21
}
   1be10:	4620      	mov	r0, r4
   1be12:	b018      	add	sp, #96	; 0x60
   1be14:	bd70      	pop	{r4, r5, r6, pc}
	len = read_cb(cb_arg, val, sizeof(val));
   1be16:	2250      	movs	r2, #80	; 0x50
   1be18:	a904      	add	r1, sp, #16
   1be1a:	47a0      	blx	r4
	if (len < 0) {
   1be1c:	1e04      	subs	r4, r0, #0
   1be1e:	da05      	bge.n	1be2c <keys_set+0x34>
		BT_ERR("Failed to read value (err %zd)", len);
   1be20:	482c      	ldr	r0, [pc, #176]	; (1bed4 <keys_set+0xdc>)
   1be22:	4622      	mov	r2, r4
   1be24:	2145      	movs	r1, #69	; 0x45
   1be26:	f008 fac0 	bl	243aa <z_log_minimal_printk>
   1be2a:	e7ef      	b.n	1be0c <keys_set+0x14>
	err = bt_settings_decode_key(name, &addr);
   1be2c:	a902      	add	r1, sp, #8
   1be2e:	4628      	mov	r0, r5
   1be30:	f009 f8ad 	bl	24f8e <bt_settings_decode_key>
	if (err) {
   1be34:	4606      	mov	r6, r0
   1be36:	b118      	cbz	r0, 1be40 <keys_set+0x48>
		BT_ERR("Unable to decode address %s", name);
   1be38:	4827      	ldr	r0, [pc, #156]	; (1bed8 <keys_set+0xe0>)
   1be3a:	462a      	mov	r2, r5
   1be3c:	2145      	movs	r1, #69	; 0x45
   1be3e:	e7f2      	b.n	1be26 <keys_set+0x2e>
	settings_name_next(name, &next);
   1be40:	a901      	add	r1, sp, #4
   1be42:	4628      	mov	r0, r5
   1be44:	f008 fd52 	bl	248ec <settings_name_next>
	if (!next) {
   1be48:	9801      	ldr	r0, [sp, #4]
   1be4a:	b140      	cbz	r0, 1be5e <keys_set+0x66>
		unsigned long next_id = strtoul(next, NULL, 10);
   1be4c:	220a      	movs	r2, #10
   1be4e:	4631      	mov	r1, r6
   1be50:	f008 f832 	bl	23eb8 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   1be54:	4602      	mov	r2, r0
   1be56:	b110      	cbz	r0, 1be5e <keys_set+0x66>
			BT_ERR("Invalid local identity %lu", next_id);
   1be58:	4820      	ldr	r0, [pc, #128]	; (1bedc <keys_set+0xe4>)
   1be5a:	2145      	movs	r1, #69	; 0x45
   1be5c:	e7e3      	b.n	1be26 <keys_set+0x2e>
	if (!len) {
   1be5e:	b99c      	cbnz	r4, 1be88 <keys_set+0x90>
		keys = bt_keys_find(BT_KEYS_ALL, id, &addr);
   1be60:	aa02      	add	r2, sp, #8
   1be62:	4621      	mov	r1, r4
   1be64:	203f      	movs	r0, #63	; 0x3f
   1be66:	f7ff ff3f 	bl	1bce8 <bt_keys_find>
		if (keys) {
   1be6a:	b120      	cbz	r0, 1be76 <keys_set+0x7e>
   1be6c:	225c      	movs	r2, #92	; 0x5c
   1be6e:	4621      	mov	r1, r4
   1be70:	f00b fe15 	bl	27a9e <memset>
   1be74:	e7cc      	b.n	1be10 <keys_set+0x18>
			BT_WARN("Unable to find deleted keys for %s",
   1be76:	a802      	add	r0, sp, #8
   1be78:	f7f8 ff80 	bl	14d7c <bt_addr_le_str_real>
   1be7c:	2157      	movs	r1, #87	; 0x57
   1be7e:	4602      	mov	r2, r0
   1be80:	4817      	ldr	r0, [pc, #92]	; (1bee0 <keys_set+0xe8>)
   1be82:	f008 fa92 	bl	243aa <z_log_minimal_printk>
   1be86:	e7c3      	b.n	1be10 <keys_set+0x18>
	keys = bt_keys_get_addr(id, &addr);
   1be88:	a902      	add	r1, sp, #8
   1be8a:	2000      	movs	r0, #0
   1be8c:	f7ff fee4 	bl	1bc58 <bt_keys_get_addr>
	if (!keys) {
   1be90:	4605      	mov	r5, r0
   1be92:	b950      	cbnz	r0, 1beaa <keys_set+0xb2>
		BT_ERR("Failed to allocate keys for %s", bt_addr_le_str(&addr));
   1be94:	a802      	add	r0, sp, #8
   1be96:	f7f8 ff71 	bl	14d7c <bt_addr_le_str_real>
   1be9a:	2145      	movs	r1, #69	; 0x45
   1be9c:	4602      	mov	r2, r0
   1be9e:	4811      	ldr	r0, [pc, #68]	; (1bee4 <keys_set+0xec>)
   1bea0:	f008 fa83 	bl	243aa <z_log_minimal_printk>
		return -ENOMEM;
   1bea4:	f06f 040b 	mvn.w	r4, #11
   1bea8:	e7b2      	b.n	1be10 <keys_set+0x18>
	if (len != BT_KEYS_STORAGE_LEN) {
   1beaa:	2c50      	cmp	r4, #80	; 0x50
   1beac:	d009      	beq.n	1bec2 <keys_set+0xca>
			BT_ERR("Invalid key length %zd != %zu", len,
   1beae:	480e      	ldr	r0, [pc, #56]	; (1bee8 <keys_set+0xf0>)
   1beb0:	2350      	movs	r3, #80	; 0x50
   1beb2:	4622      	mov	r2, r4
   1beb4:	2145      	movs	r1, #69	; 0x45
   1beb6:	f008 fa78 	bl	243aa <z_log_minimal_printk>
			bt_keys_clear(keys);
   1beba:	4628      	mov	r0, r5
   1bebc:	f7ff ff74 	bl	1bda8 <bt_keys_clear>
			return -EINVAL;
   1bec0:	e7a4      	b.n	1be0c <keys_set+0x14>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1bec2:	4622      	mov	r2, r4
   1bec4:	a904      	add	r1, sp, #16
   1bec6:	300c      	adds	r0, #12
   1bec8:	f00b fdc8 	bl	27a5c <memcpy>
	return 0;
   1becc:	2400      	movs	r4, #0
   1bece:	e79f      	b.n	1be10 <keys_set+0x18>
   1bed0:	0002937c 	.word	0x0002937c
   1bed4:	0002ac87 	.word	0x0002ac87
   1bed8:	0002a56c 	.word	0x0002a56c
   1bedc:	0002a58d 	.word	0x0002a58d
   1bee0:	0002acab 	.word	0x0002acab
   1bee4:	0002acd3 	.word	0x0002acd3
   1bee8:	0002acf7 	.word	0x0002acf7

0001beec <bt_keys_store>:
{
   1beec:	b570      	push	{r4, r5, r6, lr}
	if (keys->id) {
   1beee:	4605      	mov	r5, r0
{
   1bef0:	b08c      	sub	sp, #48	; 0x30
	if (keys->id) {
   1bef2:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   1bef6:	4604      	mov	r4, r0
	if (keys->id) {
   1bef8:	b1da      	cbz	r2, 1bf32 <bt_keys_store+0x46>
		u8_to_dec(id, sizeof(id), keys->id);
   1befa:	ae02      	add	r6, sp, #8
   1befc:	2104      	movs	r1, #4
   1befe:	4630      	mov	r0, r6
   1bf00:	f008 f800 	bl	23f04 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1bf04:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1bf06:	4a0c      	ldr	r2, [pc, #48]	; (1bf38 <bt_keys_store+0x4c>)
   1bf08:	462b      	mov	r3, r5
   1bf0a:	2124      	movs	r1, #36	; 0x24
   1bf0c:	a803      	add	r0, sp, #12
   1bf0e:	f7f8 ffe3 	bl	14ed8 <bt_settings_encode_key>
	err = settings_save_one(key, keys->storage_start, BT_KEYS_STORAGE_LEN);
   1bf12:	f104 010c 	add.w	r1, r4, #12
   1bf16:	2250      	movs	r2, #80	; 0x50
   1bf18:	a803      	add	r0, sp, #12
   1bf1a:	f7f7 fd09 	bl	13930 <settings_save_one>
	if (err) {
   1bf1e:	4604      	mov	r4, r0
   1bf20:	b120      	cbz	r0, 1bf2c <bt_keys_store+0x40>
		BT_ERR("Failed to save keys (err %d)", err);
   1bf22:	4602      	mov	r2, r0
   1bf24:	2145      	movs	r1, #69	; 0x45
   1bf26:	4805      	ldr	r0, [pc, #20]	; (1bf3c <bt_keys_store+0x50>)
   1bf28:	f008 fa3f 	bl	243aa <z_log_minimal_printk>
}
   1bf2c:	4620      	mov	r0, r4
   1bf2e:	b00c      	add	sp, #48	; 0x30
   1bf30:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1bf32:	9200      	str	r2, [sp, #0]
   1bf34:	e7e7      	b.n	1bf06 <bt_keys_store+0x1a>
   1bf36:	bf00      	nop
   1bf38:	0002ad3f 	.word	0x0002ad3f
   1bf3c:	0002ad1a 	.word	0x0002ad1a

0001bf40 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1bf40:	4b02      	ldr	r3, [pc, #8]	; (1bf4c <net_buf_pool_get+0xc>)
   1bf42:	2234      	movs	r2, #52	; 0x34
   1bf44:	fb02 3000 	mla	r0, r2, r0, r3
   1bf48:	4770      	bx	lr
   1bf4a:	bf00      	nop
   1bf4c:	200008d8 	.word	0x200008d8

0001bf50 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1bf50:	7982      	ldrb	r2, [r0, #6]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1bf52:	4b07      	ldr	r3, [pc, #28]	; (1bf70 <net_buf_id+0x20>)
   1bf54:	2134      	movs	r1, #52	; 0x34
   1bf56:	fb01 3302 	mla	r3, r1, r2, r3
   1bf5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1bf5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1bf60:	3317      	adds	r3, #23
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1bf62:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1bf64:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   1bf68:	fbb0 f0f3 	udiv	r0, r0, r3
   1bf6c:	4770      	bx	lr
   1bf6e:	bf00      	nop
   1bf70:	200008d8 	.word	0x200008d8

0001bf74 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1bf74:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1bf76:	4b0a      	ldr	r3, [pc, #40]	; (1bfa0 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1bf78:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1bf7a:	2434      	movs	r4, #52	; 0x34
   1bf7c:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   1bf80:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1bf82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1bf84:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1bf86:	6823      	ldr	r3, [r4, #0]
   1bf88:	429a      	cmp	r2, r3
   1bf8a:	bf94      	ite	ls
   1bf8c:	600a      	strls	r2, [r1, #0]
   1bf8e:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1bf90:	f7ff ffde 	bl	1bf50 <net_buf_id>
   1bf94:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   1bf98:	fb02 3000 	mla	r0, r2, r0, r3
   1bf9c:	bd10      	pop	{r4, pc}
   1bf9e:	bf00      	nop
   1bfa0:	200008d8 	.word	0x200008d8

0001bfa4 <net_buf_reset>:
{
   1bfa4:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf->flags == 0U);
   1bfa6:	7943      	ldrb	r3, [r0, #5]
{
   1bfa8:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf->flags == 0U);
   1bfaa:	b143      	cbz	r3, 1bfbe <net_buf_reset+0x1a>
   1bfac:	490c      	ldr	r1, [pc, #48]	; (1bfe0 <net_buf_reset+0x3c>)
   1bfae:	480d      	ldr	r0, [pc, #52]	; (1bfe4 <net_buf_reset+0x40>)
   1bfb0:	2256      	movs	r2, #86	; 0x56
   1bfb2:	f008 f9ec 	bl	2438e <assert_print>
   1bfb6:	480a      	ldr	r0, [pc, #40]	; (1bfe0 <net_buf_reset+0x3c>)
   1bfb8:	2156      	movs	r1, #86	; 0x56
   1bfba:	f008 f9e1 	bl	24380 <assert_post_action>
	__ASSERT_NO_MSG(buf->frags == NULL);
   1bfbe:	6823      	ldr	r3, [r4, #0]
   1bfc0:	b143      	cbz	r3, 1bfd4 <net_buf_reset+0x30>
   1bfc2:	4907      	ldr	r1, [pc, #28]	; (1bfe0 <net_buf_reset+0x3c>)
   1bfc4:	4807      	ldr	r0, [pc, #28]	; (1bfe4 <net_buf_reset+0x40>)
   1bfc6:	2257      	movs	r2, #87	; 0x57
   1bfc8:	f008 f9e1 	bl	2438e <assert_print>
   1bfcc:	4804      	ldr	r0, [pc, #16]	; (1bfe0 <net_buf_reset+0x3c>)
   1bfce:	2157      	movs	r1, #87	; 0x57
   1bfd0:	f008 f9d6 	bl	24380 <assert_post_action>
	buf->len  = 0U;
   1bfd4:	2300      	movs	r3, #0
   1bfd6:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
   1bfd8:	6923      	ldr	r3, [r4, #16]
   1bfda:	60a3      	str	r3, [r4, #8]
}
   1bfdc:	bd10      	pop	{r4, pc}
   1bfde:	bf00      	nop
   1bfe0:	0002ad4c 	.word	0x0002ad4c
   1bfe4:	000289af 	.word	0x000289af

0001bfe8 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1bfe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bfec:	b085      	sub	sp, #20
   1bfee:	4605      	mov	r5, r0
   1bff0:	9103      	str	r1, [sp, #12]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1bff2:	4610      	mov	r0, r2
   1bff4:	4619      	mov	r1, r3
{
   1bff6:	4691      	mov	r9, r2
   1bff8:	4698      	mov	r8, r3
   1bffa:	4617      	mov	r7, r2
   1bffc:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1bffe:	f00b fc2e 	bl	2785e <sys_clock_timeout_end_calc>
   1c002:	e9cd 0101 	strd	r0, r1, [sp, #4]
	struct net_buf *buf;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(pool);
   1c006:	b945      	cbnz	r5, 1c01a <net_buf_alloc_len+0x32>
   1c008:	4969      	ldr	r1, [pc, #420]	; (1c1b0 <net_buf_alloc_len+0x1c8>)
   1c00a:	486a      	ldr	r0, [pc, #424]	; (1c1b4 <net_buf_alloc_len+0x1cc>)
   1c00c:	22f4      	movs	r2, #244	; 0xf4
   1c00e:	f008 f9be 	bl	2438e <assert_print>
   1c012:	4867      	ldr	r0, [pc, #412]	; (1c1b0 <net_buf_alloc_len+0x1c8>)
   1c014:	21f4      	movs	r1, #244	; 0xf4
   1c016:	f008 f9b3 	bl	24380 <assert_post_action>
	NET_BUF_DBG("%s():%d: pool %p size %zu", func, line, pool, size);

	/* We need to prevent race conditions
	 * when accessing pool->uninit_count.
	 */
	key = k_spin_lock(&pool->lock);
   1c01a:	f105 0a1c 	add.w	sl, r5, #28
	__asm__ volatile(
   1c01e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c022:	f3ef 8b11 	mrs	fp, BASEPRI
   1c026:	f383 8812 	msr	BASEPRI_MAX, r3
   1c02a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c02e:	4650      	mov	r0, sl
   1c030:	f004 fb42 	bl	206b8 <z_spin_lock_valid>
   1c034:	b940      	cbnz	r0, 1c048 <net_buf_alloc_len+0x60>
   1c036:	4960      	ldr	r1, [pc, #384]	; (1c1b8 <net_buf_alloc_len+0x1d0>)
   1c038:	485e      	ldr	r0, [pc, #376]	; (1c1b4 <net_buf_alloc_len+0x1cc>)
   1c03a:	228e      	movs	r2, #142	; 0x8e
   1c03c:	f008 f9a7 	bl	2438e <assert_print>
   1c040:	485d      	ldr	r0, [pc, #372]	; (1c1b8 <net_buf_alloc_len+0x1d0>)
   1c042:	218e      	movs	r1, #142	; 0x8e
   1c044:	f008 f99c 	bl	24380 <assert_post_action>
	z_spin_lock_set_owner(l);
   1c048:	4650      	mov	r0, sl
   1c04a:	f004 fb53 	bl	206f4 <z_spin_lock_set_owner>

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1c04e:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
   1c050:	2b00      	cmp	r3, #0
   1c052:	d076      	beq.n	1c142 <net_buf_alloc_len+0x15a>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1c054:	8c2a      	ldrh	r2, [r5, #32]
   1c056:	429a      	cmp	r2, r3
   1c058:	d94c      	bls.n	1c0f4 <net_buf_alloc_len+0x10c>
	return z_impl_k_queue_get(queue, timeout);
   1c05a:	2200      	movs	r2, #0
   1c05c:	2300      	movs	r3, #0
   1c05e:	4628      	mov	r0, r5
   1c060:	f004 fdc4 	bl	20bec <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1c064:	4604      	mov	r4, r0
   1c066:	2800      	cmp	r0, #0
   1c068:	d044      	beq.n	1c0f4 <net_buf_alloc_len+0x10c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c06a:	4650      	mov	r0, sl
   1c06c:	f004 fb32 	bl	206d4 <z_spin_unlock_valid>
   1c070:	b940      	cbnz	r0, 1c084 <net_buf_alloc_len+0x9c>
   1c072:	4951      	ldr	r1, [pc, #324]	; (1c1b8 <net_buf_alloc_len+0x1d0>)
   1c074:	484f      	ldr	r0, [pc, #316]	; (1c1b4 <net_buf_alloc_len+0x1cc>)
   1c076:	22b9      	movs	r2, #185	; 0xb9
   1c078:	f008 f989 	bl	2438e <assert_print>
   1c07c:	484e      	ldr	r0, [pc, #312]	; (1c1b8 <net_buf_alloc_len+0x1d0>)
   1c07e:	21b9      	movs	r1, #185	; 0xb9
   1c080:	f008 f97e 	bl	24380 <assert_post_action>
	__asm__ volatile(
   1c084:	f38b 8811 	msr	BASEPRI, fp
   1c088:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1c08c:	9d03      	ldr	r5, [sp, #12]
   1c08e:	2d00      	cmp	r5, #0
   1c090:	f000 808c 	beq.w	1c1ac <net_buf_alloc_len+0x1c4>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1c094:	ea58 0309 	orrs.w	r3, r8, r9
   1c098:	d010      	beq.n	1c0bc <net_buf_alloc_len+0xd4>
   1c09a:	f1b8 3fff 	cmp.w	r8, #4294967295
   1c09e:	bf08      	it	eq
   1c0a0:	f1b9 3fff 	cmpeq.w	r9, #4294967295
   1c0a4:	d00a      	beq.n	1c0bc <net_buf_alloc_len+0xd4>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   1c0a6:	f006 fe19 	bl	22cdc <sys_clock_tick_get>
   1c0aa:	9b01      	ldr	r3, [sp, #4]
   1c0ac:	1a1f      	subs	r7, r3, r0
   1c0ae:	9b02      	ldr	r3, [sp, #8]
   1c0b0:	eb63 0601 	sbc.w	r6, r3, r1
   1c0b4:	2e00      	cmp	r6, #0
   1c0b6:	bfbc      	itt	lt
   1c0b8:	2700      	movlt	r7, #0
   1c0ba:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1c0bc:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1c0be:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 1c1bc <net_buf_alloc_len+0x1d4>
   1c0c2:	f04f 0934 	mov.w	r9, #52	; 0x34
   1c0c6:	fb09 8303 	mla	r3, r9, r3, r8
   1c0ca:	463a      	mov	r2, r7
   1c0cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c0ce:	681b      	ldr	r3, [r3, #0]
   1c0d0:	a903      	add	r1, sp, #12
   1c0d2:	f8d3 a000 	ldr.w	sl, [r3]
   1c0d6:	4620      	mov	r0, r4
   1c0d8:	4633      	mov	r3, r6
   1c0da:	47d0      	blx	sl
   1c0dc:	4606      	mov	r6, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1c0de:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1c0e0:	2800      	cmp	r0, #0
   1c0e2:	d14b      	bne.n	1c17c <net_buf_alloc_len+0x194>
	k_lifo_put(&pool->free, buf);
   1c0e4:	79a0      	ldrb	r0, [r4, #6]
   1c0e6:	4621      	mov	r1, r4
   1c0e8:	fb00 8009 	mla	r0, r0, r9, r8
   1c0ec:	f00b fb0b 	bl	27706 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1c0f0:	4634      	mov	r4, r6
}
   1c0f2:	e03f      	b.n	1c174 <net_buf_alloc_len+0x18c>
		uninit_count = pool->uninit_count--;
   1c0f4:	8c6c      	ldrh	r4, [r5, #34]	; 0x22
   1c0f6:	1e63      	subs	r3, r4, #1
   1c0f8:	846b      	strh	r3, [r5, #34]	; 0x22
   1c0fa:	4650      	mov	r0, sl
   1c0fc:	f004 faea 	bl	206d4 <z_spin_unlock_valid>
   1c100:	b940      	cbnz	r0, 1c114 <net_buf_alloc_len+0x12c>
   1c102:	492d      	ldr	r1, [pc, #180]	; (1c1b8 <net_buf_alloc_len+0x1d0>)
   1c104:	482b      	ldr	r0, [pc, #172]	; (1c1b4 <net_buf_alloc_len+0x1cc>)
   1c106:	22b9      	movs	r2, #185	; 0xb9
   1c108:	f008 f941 	bl	2438e <assert_print>
   1c10c:	482a      	ldr	r0, [pc, #168]	; (1c1b8 <net_buf_alloc_len+0x1d0>)
   1c10e:	21b9      	movs	r1, #185	; 0xb9
   1c110:	f008 f936 	bl	24380 <assert_post_action>
   1c114:	f38b 8811 	msr	BASEPRI, fp
   1c118:	f3bf 8f6f 	isb	sy
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1c11c:	8c28      	ldrh	r0, [r5, #32]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1c11e:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1c122:	1b04      	subs	r4, r0, r4
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1c124:	f102 0317 	add.w	r3, r2, #23
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1c128:	6b28      	ldr	r0, [r5, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1c12a:	f023 0303 	bic.w	r3, r3, #3
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1c12e:	fb04 0403 	mla	r4, r4, r3, r0
	return pool - _net_buf_pool_list;
   1c132:	4822      	ldr	r0, [pc, #136]	; (1c1bc <net_buf_alloc_len+0x1d4>)
   1c134:	4b22      	ldr	r3, [pc, #136]	; (1c1c0 <net_buf_alloc_len+0x1d8>)
	buf->user_data_size = pool->user_data_size;
   1c136:	71e2      	strb	r2, [r4, #7]
	return pool - _net_buf_pool_list;
   1c138:	1a2d      	subs	r5, r5, r0
   1c13a:	10ad      	asrs	r5, r5, #2
   1c13c:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   1c13e:	71a5      	strb	r5, [r4, #6]
		goto success;
   1c140:	e7a4      	b.n	1c08c <net_buf_alloc_len+0xa4>
   1c142:	4650      	mov	r0, sl
   1c144:	f004 fac6 	bl	206d4 <z_spin_unlock_valid>
   1c148:	b940      	cbnz	r0, 1c15c <net_buf_alloc_len+0x174>
   1c14a:	491b      	ldr	r1, [pc, #108]	; (1c1b8 <net_buf_alloc_len+0x1d0>)
   1c14c:	4819      	ldr	r0, [pc, #100]	; (1c1b4 <net_buf_alloc_len+0x1cc>)
   1c14e:	22b9      	movs	r2, #185	; 0xb9
   1c150:	f008 f91d 	bl	2438e <assert_print>
   1c154:	4818      	ldr	r0, [pc, #96]	; (1c1b8 <net_buf_alloc_len+0x1d0>)
   1c156:	21b9      	movs	r1, #185	; 0xb9
   1c158:	f008 f912 	bl	24380 <assert_post_action>
   1c15c:	f38b 8811 	msr	BASEPRI, fp
   1c160:	f3bf 8f6f 	isb	sy
   1c164:	464a      	mov	r2, r9
   1c166:	4643      	mov	r3, r8
   1c168:	4628      	mov	r0, r5
   1c16a:	f004 fd3f 	bl	20bec <z_impl_k_queue_get>
	if (!buf) {
   1c16e:	4604      	mov	r4, r0
   1c170:	2800      	cmp	r0, #0
   1c172:	d18b      	bne.n	1c08c <net_buf_alloc_len+0xa4>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1c174:	4620      	mov	r0, r4
   1c176:	b005      	add	sp, #20
   1c178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		NET_BUF_ASSERT(req_size <= size);
   1c17c:	9b03      	ldr	r3, [sp, #12]
   1c17e:	429d      	cmp	r5, r3
   1c180:	d90a      	bls.n	1c198 <net_buf_alloc_len+0x1b0>
   1c182:	490b      	ldr	r1, [pc, #44]	; (1c1b0 <net_buf_alloc_len+0x1c8>)
   1c184:	480b      	ldr	r0, [pc, #44]	; (1c1b4 <net_buf_alloc_len+0x1cc>)
   1c186:	f240 1255 	movw	r2, #341	; 0x155
   1c18a:	f008 f900 	bl	2438e <assert_print>
   1c18e:	4808      	ldr	r0, [pc, #32]	; (1c1b0 <net_buf_alloc_len+0x1c8>)
   1c190:	f240 1155 	movw	r1, #341	; 0x155
   1c194:	f008 f8f4 	bl	24380 <assert_post_action>
	buf->frags = NULL;
   1c198:	2300      	movs	r3, #0
   1c19a:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   1c19c:	2301      	movs	r3, #1
   1c19e:	80a3      	strh	r3, [r4, #4]
	buf->size  = size;
   1c1a0:	9b03      	ldr	r3, [sp, #12]
   1c1a2:	81e3      	strh	r3, [r4, #14]
	net_buf_reset(buf);
   1c1a4:	4620      	mov	r0, r4
   1c1a6:	f7ff fefd 	bl	1bfa4 <net_buf_reset>
	return buf;
   1c1aa:	e7e3      	b.n	1c174 <net_buf_alloc_len+0x18c>
		buf->__buf = NULL;
   1c1ac:	6125      	str	r5, [r4, #16]
   1c1ae:	e7f3      	b.n	1c198 <net_buf_alloc_len+0x1b0>
   1c1b0:	0002ad4c 	.word	0x0002ad4c
   1c1b4:	000289af 	.word	0x000289af
   1c1b8:	00028a23 	.word	0x00028a23
   1c1bc:	200008d8 	.word	0x200008d8
   1c1c0:	c4ec4ec5 	.word	0xc4ec4ec5

0001c1c4 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   1c1c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c1c8:	4606      	mov	r6, r0
   1c1ca:	f004 fd0f 	bl	20bec <z_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p", func, line, fifo);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   1c1ce:	4605      	mov	r5, r0
   1c1d0:	b140      	cbz	r0, 1c1e4 <net_buf_get+0x20>
	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
		__ASSERT_NO_MSG(frag->frags);
   1c1d2:	4f12      	ldr	r7, [pc, #72]	; (1c21c <net_buf_get+0x58>)
   1c1d4:	f8df 8048 	ldr.w	r8, [pc, #72]	; 1c220 <net_buf_get+0x5c>
   1c1d8:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1c1da:	7963      	ldrb	r3, [r4, #5]
   1c1dc:	f013 0301 	ands.w	r3, r3, #1
   1c1e0:	d103      	bne.n	1c1ea <net_buf_get+0x26>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   1c1e2:	6023      	str	r3, [r4, #0]

	return buf;
}
   1c1e4:	4628      	mov	r0, r5
   1c1e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c1ea:	2200      	movs	r2, #0
   1c1ec:	2300      	movs	r3, #0
   1c1ee:	4630      	mov	r0, r6
   1c1f0:	f004 fcfc 	bl	20bec <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1c1f4:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);
   1c1f6:	b950      	cbnz	r0, 1c20e <net_buf_get+0x4a>
   1c1f8:	4639      	mov	r1, r7
   1c1fa:	4640      	mov	r0, r8
   1c1fc:	f240 12ad 	movw	r2, #429	; 0x1ad
   1c200:	f008 f8c5 	bl	2438e <assert_print>
   1c204:	f240 11ad 	movw	r1, #429	; 0x1ad
   1c208:	4638      	mov	r0, r7
   1c20a:	f008 f8b9 	bl	24380 <assert_post_action>
		frag->flags &= ~NET_BUF_FRAGS;
   1c20e:	7963      	ldrb	r3, [r4, #5]
   1c210:	f023 0301 	bic.w	r3, r3, #1
   1c214:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1c216:	6824      	ldr	r4, [r4, #0]
   1c218:	e7df      	b.n	1c1da <net_buf_get+0x16>
   1c21a:	bf00      	nop
   1c21c:	0002ad4c 	.word	0x0002ad4c
   1c220:	000289af 	.word	0x000289af

0001c224 <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   1c224:	b538      	push	{r3, r4, r5, lr}
   1c226:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf);
   1c228:	4604      	mov	r4, r0
   1c22a:	b950      	cbnz	r0, 1c242 <net_buf_simple_reserve+0x1e>
   1c22c:	490d      	ldr	r1, [pc, #52]	; (1c264 <net_buf_simple_reserve+0x40>)
   1c22e:	480e      	ldr	r0, [pc, #56]	; (1c268 <net_buf_simple_reserve+0x44>)
   1c230:	f44f 72e2 	mov.w	r2, #452	; 0x1c4
   1c234:	f008 f8ab 	bl	2438e <assert_print>
   1c238:	480a      	ldr	r0, [pc, #40]	; (1c264 <net_buf_simple_reserve+0x40>)
   1c23a:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
   1c23e:	f008 f89f 	bl	24380 <assert_post_action>
	__ASSERT_NO_MSG(buf->len == 0U);
   1c242:	88a3      	ldrh	r3, [r4, #4]
   1c244:	b153      	cbz	r3, 1c25c <net_buf_simple_reserve+0x38>
   1c246:	4907      	ldr	r1, [pc, #28]	; (1c264 <net_buf_simple_reserve+0x40>)
   1c248:	4807      	ldr	r0, [pc, #28]	; (1c268 <net_buf_simple_reserve+0x44>)
   1c24a:	f240 12c5 	movw	r2, #453	; 0x1c5
   1c24e:	f008 f89e 	bl	2438e <assert_print>
   1c252:	4804      	ldr	r0, [pc, #16]	; (1c264 <net_buf_simple_reserve+0x40>)
   1c254:	f240 11c5 	movw	r1, #453	; 0x1c5
   1c258:	f008 f892 	bl	24380 <assert_post_action>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   1c25c:	68a3      	ldr	r3, [r4, #8]
   1c25e:	442b      	add	r3, r5
   1c260:	6023      	str	r3, [r4, #0]
}
   1c262:	bd38      	pop	{r3, r4, r5, pc}
   1c264:	0002ad4c 	.word	0x0002ad4c
   1c268:	000289af 	.word	0x000289af

0001c26c <net_buf_slist_put>:

static struct k_spinlock net_buf_slist_lock;

void net_buf_slist_put(sys_slist_t *list, struct net_buf *buf)
{
   1c26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c26e:	460c      	mov	r4, r1
	struct net_buf *tail;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   1c270:	4605      	mov	r5, r0
   1c272:	b950      	cbnz	r0, 1c28a <net_buf_slist_put+0x1e>
   1c274:	4928      	ldr	r1, [pc, #160]	; (1c318 <net_buf_slist_put+0xac>)
   1c276:	4829      	ldr	r0, [pc, #164]	; (1c31c <net_buf_slist_put+0xb0>)
   1c278:	f44f 72e9 	mov.w	r2, #466	; 0x1d2
   1c27c:	f008 f887 	bl	2438e <assert_print>
   1c280:	4825      	ldr	r0, [pc, #148]	; (1c318 <net_buf_slist_put+0xac>)
   1c282:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
   1c286:	f008 f87b 	bl	24380 <assert_post_action>
	__ASSERT_NO_MSG(buf);
   1c28a:	b954      	cbnz	r4, 1c2a2 <net_buf_slist_put+0x36>
   1c28c:	4922      	ldr	r1, [pc, #136]	; (1c318 <net_buf_slist_put+0xac>)
   1c28e:	4823      	ldr	r0, [pc, #140]	; (1c31c <net_buf_slist_put+0xb0>)
   1c290:	f240 12d3 	movw	r2, #467	; 0x1d3
   1c294:	f008 f87b 	bl	2438e <assert_print>
   1c298:	481f      	ldr	r0, [pc, #124]	; (1c318 <net_buf_slist_put+0xac>)
   1c29a:	f240 11d3 	movw	r1, #467	; 0x1d3
   1c29e:	f008 f86f 	bl	24380 <assert_post_action>
{
   1c2a2:	4626      	mov	r6, r4

	for (tail = buf; tail->frags; tail = tail->frags) {
   1c2a4:	6832      	ldr	r2, [r6, #0]
   1c2a6:	bb72      	cbnz	r2, 1c306 <net_buf_slist_put+0x9a>
	__asm__ volatile(
   1c2a8:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c2ac:	f3ef 8711 	mrs	r7, BASEPRI
   1c2b0:	f383 8812 	msr	BASEPRI_MAX, r3
   1c2b4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c2b8:	4819      	ldr	r0, [pc, #100]	; (1c320 <net_buf_slist_put+0xb4>)
   1c2ba:	f004 f9fd 	bl	206b8 <z_spin_lock_valid>
   1c2be:	b940      	cbnz	r0, 1c2d2 <net_buf_slist_put+0x66>
   1c2c0:	4918      	ldr	r1, [pc, #96]	; (1c324 <net_buf_slist_put+0xb8>)
   1c2c2:	4816      	ldr	r0, [pc, #88]	; (1c31c <net_buf_slist_put+0xb0>)
   1c2c4:	228e      	movs	r2, #142	; 0x8e
   1c2c6:	f008 f862 	bl	2438e <assert_print>
   1c2ca:	4816      	ldr	r0, [pc, #88]	; (1c324 <net_buf_slist_put+0xb8>)
   1c2cc:	218e      	movs	r1, #142	; 0x8e
   1c2ce:	f008 f857 	bl	24380 <assert_post_action>
	z_spin_lock_set_owner(l);
   1c2d2:	4813      	ldr	r0, [pc, #76]	; (1c320 <net_buf_slist_put+0xb4>)
   1c2d4:	f004 fa0e 	bl	206f4 <z_spin_lock_set_owner>
Z_GENLIST_APPEND_LIST(slist, snode)
   1c2d8:	b11c      	cbz	r4, 1c2e2 <net_buf_slist_put+0x76>
	return list->tail;
   1c2da:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND_LIST(slist, snode)
   1c2dc:	b9cb      	cbnz	r3, 1c312 <net_buf_slist_put+0xa6>
	list->head = node;
   1c2de:	602c      	str	r4, [r5, #0]
	list->tail = node;
   1c2e0:	606e      	str	r6, [r5, #4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c2e2:	480f      	ldr	r0, [pc, #60]	; (1c320 <net_buf_slist_put+0xb4>)
   1c2e4:	f004 f9f6 	bl	206d4 <z_spin_unlock_valid>
   1c2e8:	b940      	cbnz	r0, 1c2fc <net_buf_slist_put+0x90>
   1c2ea:	490e      	ldr	r1, [pc, #56]	; (1c324 <net_buf_slist_put+0xb8>)
   1c2ec:	480b      	ldr	r0, [pc, #44]	; (1c31c <net_buf_slist_put+0xb0>)
   1c2ee:	22b9      	movs	r2, #185	; 0xb9
   1c2f0:	f008 f84d 	bl	2438e <assert_print>
   1c2f4:	480b      	ldr	r0, [pc, #44]	; (1c324 <net_buf_slist_put+0xb8>)
   1c2f6:	21b9      	movs	r1, #185	; 0xb9
   1c2f8:	f008 f842 	bl	24380 <assert_post_action>
	__asm__ volatile(
   1c2fc:	f387 8811 	msr	BASEPRI, r7
   1c300:	f3bf 8f6f 	isb	sy
	}

	key = k_spin_lock(&net_buf_slist_lock);
	sys_slist_append_list(list, &buf->node, &tail->node);
	k_spin_unlock(&net_buf_slist_lock, key);
}
   1c304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tail->flags |= NET_BUF_FRAGS;
   1c306:	7973      	ldrb	r3, [r6, #5]
   1c308:	f043 0301 	orr.w	r3, r3, #1
   1c30c:	7173      	strb	r3, [r6, #5]
   1c30e:	4616      	mov	r6, r2
   1c310:	e7c8      	b.n	1c2a4 <net_buf_slist_put+0x38>
	parent->next = child;
   1c312:	601c      	str	r4, [r3, #0]
}
   1c314:	e7e4      	b.n	1c2e0 <net_buf_slist_put+0x74>
   1c316:	bf00      	nop
   1c318:	0002ad4c 	.word	0x0002ad4c
   1c31c:	000289af 	.word	0x000289af
   1c320:	20002038 	.word	0x20002038
   1c324:	00028a23 	.word	0x00028a23

0001c328 <net_buf_slist_get>:

struct net_buf *net_buf_slist_get(sys_slist_t *list)
{
   1c328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct net_buf *buf, *frag;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   1c32c:	4604      	mov	r4, r0
   1c32e:	b950      	cbnz	r0, 1c346 <net_buf_slist_get+0x1e>
   1c330:	4931      	ldr	r1, [pc, #196]	; (1c3f8 <net_buf_slist_get+0xd0>)
   1c332:	4832      	ldr	r0, [pc, #200]	; (1c3fc <net_buf_slist_get+0xd4>)
   1c334:	f240 12e3 	movw	r2, #483	; 0x1e3
   1c338:	f008 f829 	bl	2438e <assert_print>
   1c33c:	482e      	ldr	r0, [pc, #184]	; (1c3f8 <net_buf_slist_get+0xd0>)
   1c33e:	f240 11e3 	movw	r1, #483	; 0x1e3
   1c342:	f008 f81d 	bl	24380 <assert_post_action>
	__asm__ volatile(
   1c346:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c34a:	f3ef 8811 	mrs	r8, BASEPRI
   1c34e:	f383 8812 	msr	BASEPRI_MAX, r3
   1c352:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c356:	482a      	ldr	r0, [pc, #168]	; (1c400 <net_buf_slist_get+0xd8>)
   1c358:	f004 f9ae 	bl	206b8 <z_spin_lock_valid>
   1c35c:	b940      	cbnz	r0, 1c370 <net_buf_slist_get+0x48>
   1c35e:	4929      	ldr	r1, [pc, #164]	; (1c404 <net_buf_slist_get+0xdc>)
   1c360:	4826      	ldr	r0, [pc, #152]	; (1c3fc <net_buf_slist_get+0xd4>)
   1c362:	228e      	movs	r2, #142	; 0x8e
   1c364:	f008 f813 	bl	2438e <assert_print>
   1c368:	4826      	ldr	r0, [pc, #152]	; (1c404 <net_buf_slist_get+0xdc>)
   1c36a:	218e      	movs	r1, #142	; 0x8e
   1c36c:	f008 f808 	bl	24380 <assert_post_action>
	z_spin_lock_set_owner(l);
   1c370:	4823      	ldr	r0, [pc, #140]	; (1c400 <net_buf_slist_get+0xd8>)
   1c372:	f004 f9bf 	bl	206f4 <z_spin_lock_set_owner>
	return list->head;
   1c376:	6826      	ldr	r6, [r4, #0]
Z_GENLIST_GET(slist, snode)
   1c378:	b176      	cbz	r6, 1c398 <net_buf_slist_get+0x70>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1c37a:	6862      	ldr	r2, [r4, #4]
	return node->next;
   1c37c:	6833      	ldr	r3, [r6, #0]

	if (buf) {
		/* Get any fragments belonging to this buffer */
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
			frag->frags = (void *)sys_slist_get(list);
			__ASSERT_NO_MSG(frag->frags);
   1c37e:	4f1e      	ldr	r7, [pc, #120]	; (1c3f8 <net_buf_slist_get+0xd0>)
   1c380:	f8df 9078 	ldr.w	r9, [pc, #120]	; 1c3fc <net_buf_slist_get+0xd4>
	list->head = node;
   1c384:	6023      	str	r3, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1c386:	4296      	cmp	r6, r2
	list->tail = node;
   1c388:	bf08      	it	eq
   1c38a:	6063      	streq	r3, [r4, #4]
{
   1c38c:	4635      	mov	r5, r6
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1c38e:	796b      	ldrb	r3, [r5, #5]
   1c390:	f013 0301 	ands.w	r3, r3, #1
   1c394:	d114      	bne.n	1c3c0 <net_buf_slist_get+0x98>
			/* The fragments flag is only for list-internal usage */
			frag->flags &= ~NET_BUF_FRAGS;
		}

		/* Mark the end of the fragment list */
		frag->frags = NULL;
   1c396:	602b      	str	r3, [r5, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c398:	4819      	ldr	r0, [pc, #100]	; (1c400 <net_buf_slist_get+0xd8>)
   1c39a:	f004 f99b 	bl	206d4 <z_spin_unlock_valid>
   1c39e:	b940      	cbnz	r0, 1c3b2 <net_buf_slist_get+0x8a>
   1c3a0:	4918      	ldr	r1, [pc, #96]	; (1c404 <net_buf_slist_get+0xdc>)
   1c3a2:	4816      	ldr	r0, [pc, #88]	; (1c3fc <net_buf_slist_get+0xd4>)
   1c3a4:	22b9      	movs	r2, #185	; 0xb9
   1c3a6:	f007 fff2 	bl	2438e <assert_print>
   1c3aa:	4816      	ldr	r0, [pc, #88]	; (1c404 <net_buf_slist_get+0xdc>)
   1c3ac:	21b9      	movs	r1, #185	; 0xb9
   1c3ae:	f007 ffe7 	bl	24380 <assert_post_action>
	__asm__ volatile(
   1c3b2:	f388 8811 	msr	BASEPRI, r8
   1c3b6:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&net_buf_slist_lock, key);

	return buf;
}
   1c3ba:	4630      	mov	r0, r6
   1c3bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return list->head;
   1c3c0:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
   1c3c2:	b98b      	cbnz	r3, 1c3e8 <net_buf_slist_get+0xc0>
			__ASSERT_NO_MSG(frag->frags);
   1c3c4:	4639      	mov	r1, r7
   1c3c6:	4648      	mov	r0, r9
			frag->frags = (void *)sys_slist_get(list);
   1c3c8:	602b      	str	r3, [r5, #0]
			__ASSERT_NO_MSG(frag->frags);
   1c3ca:	f240 12ed 	movw	r2, #493	; 0x1ed
   1c3ce:	f007 ffde 	bl	2438e <assert_print>
   1c3d2:	f240 11ed 	movw	r1, #493	; 0x1ed
   1c3d6:	4638      	mov	r0, r7
   1c3d8:	f007 ffd2 	bl	24380 <assert_post_action>
			frag->flags &= ~NET_BUF_FRAGS;
   1c3dc:	796b      	ldrb	r3, [r5, #5]
   1c3de:	f023 0301 	bic.w	r3, r3, #1
   1c3e2:	716b      	strb	r3, [r5, #5]
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1c3e4:	682d      	ldr	r5, [r5, #0]
   1c3e6:	e7d2      	b.n	1c38e <net_buf_slist_get+0x66>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1c3e8:	6861      	ldr	r1, [r4, #4]
	return node->next;
   1c3ea:	681a      	ldr	r2, [r3, #0]
	list->head = node;
   1c3ec:	6022      	str	r2, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1c3ee:	428b      	cmp	r3, r1
	list->tail = node;
   1c3f0:	bf08      	it	eq
   1c3f2:	6062      	streq	r2, [r4, #4]
			frag->frags = (void *)sys_slist_get(list);
   1c3f4:	602b      	str	r3, [r5, #0]
			__ASSERT_NO_MSG(frag->frags);
   1c3f6:	e7f1      	b.n	1c3dc <net_buf_slist_get+0xb4>
   1c3f8:	0002ad4c 	.word	0x0002ad4c
   1c3fc:	000289af 	.word	0x000289af
   1c400:	20002038 	.word	0x20002038
   1c404:	00028a23 	.word	0x00028a23

0001c408 <net_buf_put>:

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   1c408:	b538      	push	{r3, r4, r5, lr}
   1c40a:	460c      	mov	r4, r1
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
   1c40c:	4605      	mov	r5, r0
   1c40e:	b950      	cbnz	r0, 1c426 <net_buf_put+0x1e>
   1c410:	4912      	ldr	r1, [pc, #72]	; (1c45c <net_buf_put+0x54>)
   1c412:	4813      	ldr	r0, [pc, #76]	; (1c460 <net_buf_put+0x58>)
   1c414:	f44f 7200 	mov.w	r2, #512	; 0x200
   1c418:	f007 ffb9 	bl	2438e <assert_print>
   1c41c:	480f      	ldr	r0, [pc, #60]	; (1c45c <net_buf_put+0x54>)
   1c41e:	f44f 7100 	mov.w	r1, #512	; 0x200
   1c422:	f007 ffad 	bl	24380 <assert_post_action>
	__ASSERT_NO_MSG(buf);
   1c426:	b954      	cbnz	r4, 1c43e <net_buf_put+0x36>
   1c428:	490c      	ldr	r1, [pc, #48]	; (1c45c <net_buf_put+0x54>)
   1c42a:	480d      	ldr	r0, [pc, #52]	; (1c460 <net_buf_put+0x58>)
   1c42c:	f240 2201 	movw	r2, #513	; 0x201
   1c430:	f007 ffad 	bl	2438e <assert_print>
   1c434:	4809      	ldr	r0, [pc, #36]	; (1c45c <net_buf_put+0x54>)
   1c436:	f240 2101 	movw	r1, #513	; 0x201
   1c43a:	f007 ffa1 	bl	24380 <assert_post_action>
{
   1c43e:	4622      	mov	r2, r4

	for (tail = buf; tail->frags; tail = tail->frags) {
   1c440:	6811      	ldr	r1, [r2, #0]
   1c442:	b929      	cbnz	r1, 1c450 <net_buf_put+0x48>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
   1c444:	4621      	mov	r1, r4
   1c446:	4628      	mov	r0, r5
}
   1c448:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_fifo_put_list(fifo, buf, tail);
   1c44c:	f004 bb7a 	b.w	20b44 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   1c450:	7953      	ldrb	r3, [r2, #5]
   1c452:	f043 0301 	orr.w	r3, r3, #1
   1c456:	7153      	strb	r3, [r2, #5]
   1c458:	460a      	mov	r2, r1
   1c45a:	e7f1      	b.n	1c440 <net_buf_put+0x38>
   1c45c:	0002ad4c 	.word	0x0002ad4c
   1c460:	000289af 	.word	0x000289af

0001c464 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1c464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   1c468:	4605      	mov	r5, r0
   1c46a:	b328      	cbz	r0, 1c4b8 <net_buf_unref+0x54>
   1c46c:	4e1c      	ldr	r6, [pc, #112]	; (1c4e0 <net_buf_unref+0x7c>)
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1c46e:	2700      	movs	r7, #0
	pool->alloc->cb->unref(buf, data);
   1c470:	f04f 0834 	mov.w	r8, #52	; 0x34
		struct net_buf *frags = buf->frags;
   1c474:	462c      	mov	r4, r5
   1c476:	682d      	ldr	r5, [r5, #0]
		if (--buf->ref > 0) {
   1c478:	7923      	ldrb	r3, [r4, #4]
   1c47a:	3b01      	subs	r3, #1
   1c47c:	b2db      	uxtb	r3, r3
   1c47e:	7123      	strb	r3, [r4, #4]
   1c480:	b9c3      	cbnz	r3, 1c4b4 <net_buf_unref+0x50>
		if (buf->__buf) {
   1c482:	6921      	ldr	r1, [r4, #16]
   1c484:	b159      	cbz	r1, 1c49e <net_buf_unref+0x3a>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1c486:	7963      	ldrb	r3, [r4, #5]
   1c488:	079b      	lsls	r3, r3, #30
   1c48a:	d407      	bmi.n	1c49c <net_buf_unref+0x38>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1c48c:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   1c48e:	fb08 6303 	mla	r3, r8, r3, r6
   1c492:	4620      	mov	r0, r4
   1c494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c496:	681b      	ldr	r3, [r3, #0]
   1c498:	689b      	ldr	r3, [r3, #8]
   1c49a:	4798      	blx	r3
			buf->__buf = NULL;
   1c49c:	6127      	str	r7, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   1c49e:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   1c4a0:	60a7      	str	r7, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   1c4a2:	fb08 6300 	mla	r3, r8, r0, r6
		buf->frags = NULL;
   1c4a6:	6027      	str	r7, [r4, #0]
		if (pool->destroy) {
   1c4a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1c4aa:	b193      	cbz	r3, 1c4d2 <net_buf_unref+0x6e>
			pool->destroy(buf);
   1c4ac:	4620      	mov	r0, r4
   1c4ae:	4798      	blx	r3
	while (buf) {
   1c4b0:	2d00      	cmp	r5, #0
   1c4b2:	d1df      	bne.n	1c474 <net_buf_unref+0x10>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1c4b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
   1c4b8:	490a      	ldr	r1, [pc, #40]	; (1c4e4 <net_buf_unref+0x80>)
   1c4ba:	480b      	ldr	r0, [pc, #44]	; (1c4e8 <net_buf_unref+0x84>)
   1c4bc:	f44f 7204 	mov.w	r2, #528	; 0x210
   1c4c0:	f007 ff65 	bl	2438e <assert_print>
}
   1c4c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   1c4c8:	4806      	ldr	r0, [pc, #24]	; (1c4e4 <net_buf_unref+0x80>)
   1c4ca:	f44f 7104 	mov.w	r1, #528	; 0x210
   1c4ce:	f007 bf57 	b.w	24380 <assert_post_action>
	k_lifo_put(&pool->free, buf);
   1c4d2:	4621      	mov	r1, r4
   1c4d4:	fb00 6008 	mla	r0, r0, r8, r6
   1c4d8:	f00b f915 	bl	27706 <k_queue_prepend>
}
   1c4dc:	e7e8      	b.n	1c4b0 <net_buf_unref+0x4c>
   1c4de:	bf00      	nop
   1c4e0:	200008d8 	.word	0x200008d8
   1c4e4:	0002ad4c 	.word	0x0002ad4c
   1c4e8:	000289af 	.word	0x000289af

0001c4ec <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   1c4ec:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   1c4ee:	4604      	mov	r4, r0
   1c4f0:	b950      	cbnz	r0, 1c508 <net_buf_ref+0x1c>
   1c4f2:	4908      	ldr	r1, [pc, #32]	; (1c514 <net_buf_ref+0x28>)
   1c4f4:	4808      	ldr	r0, [pc, #32]	; (1c518 <net_buf_ref+0x2c>)
   1c4f6:	f240 223f 	movw	r2, #575	; 0x23f
   1c4fa:	f007 ff48 	bl	2438e <assert_print>
   1c4fe:	4805      	ldr	r0, [pc, #20]	; (1c514 <net_buf_ref+0x28>)
   1c500:	f240 213f 	movw	r1, #575	; 0x23f
   1c504:	f007 ff3c 	bl	24380 <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1c508:	7923      	ldrb	r3, [r4, #4]
   1c50a:	3301      	adds	r3, #1
   1c50c:	7123      	strb	r3, [r4, #4]
	return buf;
}
   1c50e:	4620      	mov	r0, r4
   1c510:	bd10      	pop	{r4, pc}
   1c512:	bf00      	nop
   1c514:	0002ad4c 	.word	0x0002ad4c
   1c518:	000289af 	.word	0x000289af

0001c51c <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   1c51c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   1c51e:	4604      	mov	r4, r0
   1c520:	b950      	cbnz	r0, 1c538 <net_buf_frag_last+0x1c>
   1c522:	4908      	ldr	r1, [pc, #32]	; (1c544 <net_buf_frag_last+0x28>)
   1c524:	4808      	ldr	r0, [pc, #32]	; (1c548 <net_buf_frag_last+0x2c>)
   1c526:	f44f 721f 	mov.w	r2, #636	; 0x27c
   1c52a:	f007 ff30 	bl	2438e <assert_print>
   1c52e:	4805      	ldr	r0, [pc, #20]	; (1c544 <net_buf_frag_last+0x28>)
   1c530:	f44f 711f 	mov.w	r1, #636	; 0x27c
   1c534:	f007 ff24 	bl	24380 <assert_post_action>

	while (buf->frags) {
   1c538:	4620      	mov	r0, r4
   1c53a:	6824      	ldr	r4, [r4, #0]
   1c53c:	2c00      	cmp	r4, #0
   1c53e:	d1fb      	bne.n	1c538 <net_buf_frag_last+0x1c>
		buf = buf->frags;
	}

	return buf;
}
   1c540:	bd10      	pop	{r4, pc}
   1c542:	bf00      	nop
   1c544:	0002ad4c 	.word	0x0002ad4c
   1c548:	000289af 	.word	0x000289af

0001c54c <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   1c54c:	b538      	push	{r3, r4, r5, lr}
   1c54e:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
   1c550:	4604      	mov	r4, r0
   1c552:	b950      	cbnz	r0, 1c56a <net_buf_frag_insert+0x1e>
   1c554:	490f      	ldr	r1, [pc, #60]	; (1c594 <net_buf_frag_insert+0x48>)
   1c556:	4810      	ldr	r0, [pc, #64]	; (1c598 <net_buf_frag_insert+0x4c>)
   1c558:	f240 2287 	movw	r2, #647	; 0x287
   1c55c:	f007 ff17 	bl	2438e <assert_print>
   1c560:	480c      	ldr	r0, [pc, #48]	; (1c594 <net_buf_frag_insert+0x48>)
   1c562:	f240 2187 	movw	r1, #647	; 0x287
   1c566:	f007 ff0b 	bl	24380 <assert_post_action>
	__ASSERT_NO_MSG(frag);
   1c56a:	b955      	cbnz	r5, 1c582 <net_buf_frag_insert+0x36>
   1c56c:	4909      	ldr	r1, [pc, #36]	; (1c594 <net_buf_frag_insert+0x48>)
   1c56e:	480a      	ldr	r0, [pc, #40]	; (1c598 <net_buf_frag_insert+0x4c>)
   1c570:	f44f 7222 	mov.w	r2, #648	; 0x288
   1c574:	f007 ff0b 	bl	2438e <assert_print>
   1c578:	4806      	ldr	r0, [pc, #24]	; (1c594 <net_buf_frag_insert+0x48>)
   1c57a:	f44f 7122 	mov.w	r1, #648	; 0x288
   1c57e:	f007 feff 	bl	24380 <assert_post_action>

	if (parent->frags) {
   1c582:	6823      	ldr	r3, [r4, #0]
   1c584:	b123      	cbz	r3, 1c590 <net_buf_frag_insert+0x44>
		net_buf_frag_last(frag)->frags = parent->frags;
   1c586:	4628      	mov	r0, r5
   1c588:	f7ff ffc8 	bl	1c51c <net_buf_frag_last>
   1c58c:	6823      	ldr	r3, [r4, #0]
   1c58e:	6003      	str	r3, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1c590:	6025      	str	r5, [r4, #0]
}
   1c592:	bd38      	pop	{r3, r4, r5, pc}
   1c594:	0002ad4c 	.word	0x0002ad4c
   1c598:	000289af 	.word	0x000289af

0001c59c <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1c59c:	b538      	push	{r3, r4, r5, lr}
   1c59e:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(frag);
   1c5a0:	460d      	mov	r5, r1
   1c5a2:	b951      	cbnz	r1, 1c5ba <net_buf_frag_add+0x1e>
   1c5a4:	490c      	ldr	r1, [pc, #48]	; (1c5d8 <net_buf_frag_add+0x3c>)
   1c5a6:	480d      	ldr	r0, [pc, #52]	; (1c5dc <net_buf_frag_add+0x40>)
   1c5a8:	f240 2293 	movw	r2, #659	; 0x293
   1c5ac:	f007 feef 	bl	2438e <assert_print>
   1c5b0:	4809      	ldr	r0, [pc, #36]	; (1c5d8 <net_buf_frag_add+0x3c>)
   1c5b2:	f240 2193 	movw	r1, #659	; 0x293
   1c5b6:	f007 fee3 	bl	24380 <assert_post_action>

	if (!head) {
   1c5ba:	b924      	cbnz	r4, 1c5c6 <net_buf_frag_add+0x2a>
		return net_buf_ref(frag);
   1c5bc:	4628      	mov	r0, r5
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   1c5be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_buf_ref(frag);
   1c5c2:	f7ff bf93 	b.w	1c4ec <net_buf_ref>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1c5c6:	4620      	mov	r0, r4
   1c5c8:	f7ff ffa8 	bl	1c51c <net_buf_frag_last>
   1c5cc:	4629      	mov	r1, r5
   1c5ce:	f7ff ffbd 	bl	1c54c <net_buf_frag_insert>
}
   1c5d2:	4620      	mov	r0, r4
   1c5d4:	bd38      	pop	{r3, r4, r5, pc}
   1c5d6:	bf00      	nop
   1c5d8:	0002ad4c 	.word	0x0002ad4c
   1c5dc:	000289af 	.word	0x000289af

0001c5e0 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   1c5e0:	b538      	push	{r3, r4, r5, lr}
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1c5e2:	6882      	ldr	r2, [r0, #8]
   1c5e4:	6803      	ldr	r3, [r0, #0]
   1c5e6:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   1c5e8:	4299      	cmp	r1, r3
{
   1c5ea:	4604      	mov	r4, r0
   1c5ec:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   1c5ee:	d90a      	bls.n	1c606 <net_buf_simple_push+0x26>
   1c5f0:	4908      	ldr	r1, [pc, #32]	; (1c614 <net_buf_simple_push+0x34>)
   1c5f2:	4809      	ldr	r0, [pc, #36]	; (1c618 <net_buf_simple_push+0x38>)
   1c5f4:	f240 4217 	movw	r2, #1047	; 0x417
   1c5f8:	f007 fec9 	bl	2438e <assert_print>
   1c5fc:	4805      	ldr	r0, [pc, #20]	; (1c614 <net_buf_simple_push+0x34>)
   1c5fe:	f240 4117 	movw	r1, #1047	; 0x417
   1c602:	f007 febd 	bl	24380 <assert_post_action>
	buf->data -= len;
   1c606:	6820      	ldr	r0, [r4, #0]
	buf->len += len;
   1c608:	88a1      	ldrh	r1, [r4, #4]
	buf->data -= len;
   1c60a:	1b40      	subs	r0, r0, r5
	buf->len += len;
   1c60c:	440d      	add	r5, r1
	buf->data -= len;
   1c60e:	6020      	str	r0, [r4, #0]
	buf->len += len;
   1c610:	80a5      	strh	r5, [r4, #4]
}
   1c612:	bd38      	pop	{r3, r4, r5, pc}
   1c614:	0002ad4c 	.word	0x0002ad4c
   1c618:	000289af 	.word	0x000289af

0001c61c <net_buf_simple_pull>:
{
   1c61c:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   1c61e:	8883      	ldrh	r3, [r0, #4]
   1c620:	428b      	cmp	r3, r1
{
   1c622:	4604      	mov	r4, r0
   1c624:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf->len >= len);
   1c626:	d20a      	bcs.n	1c63e <net_buf_simple_pull+0x22>
   1c628:	4908      	ldr	r1, [pc, #32]	; (1c64c <net_buf_simple_pull+0x30>)
   1c62a:	4809      	ldr	r0, [pc, #36]	; (1c650 <net_buf_simple_pull+0x34>)
   1c62c:	f240 4277 	movw	r2, #1143	; 0x477
   1c630:	f007 fead 	bl	2438e <assert_print>
   1c634:	4805      	ldr	r0, [pc, #20]	; (1c64c <net_buf_simple_pull+0x30>)
   1c636:	f240 4177 	movw	r1, #1143	; 0x477
   1c63a:	f007 fea1 	bl	24380 <assert_post_action>
	buf->len -= len;
   1c63e:	88a3      	ldrh	r3, [r4, #4]
	return buf->data += len;
   1c640:	6820      	ldr	r0, [r4, #0]
	buf->len -= len;
   1c642:	1b5b      	subs	r3, r3, r5
	return buf->data += len;
   1c644:	4428      	add	r0, r5
	buf->len -= len;
   1c646:	80a3      	strh	r3, [r4, #4]
	return buf->data += len;
   1c648:	6020      	str	r0, [r4, #0]
}
   1c64a:	bd38      	pop	{r3, r4, r5, pc}
   1c64c:	0002ad4c 	.word	0x0002ad4c
   1c650:	000289af 	.word	0x000289af

0001c654 <net_buf_simple_pull_mem>:
	__ASSERT_NO_MSG(buf->len >= len);
   1c654:	8883      	ldrh	r3, [r0, #4]
   1c656:	428b      	cmp	r3, r1
{
   1c658:	b570      	push	{r4, r5, r6, lr}
	void *data = buf->data;
   1c65a:	6806      	ldr	r6, [r0, #0]
{
   1c65c:	4604      	mov	r4, r0
   1c65e:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf->len >= len);
   1c660:	d20a      	bcs.n	1c678 <net_buf_simple_pull_mem+0x24>
   1c662:	4909      	ldr	r1, [pc, #36]	; (1c688 <net_buf_simple_pull_mem+0x34>)
   1c664:	4809      	ldr	r0, [pc, #36]	; (1c68c <net_buf_simple_pull_mem+0x38>)
   1c666:	f240 4283 	movw	r2, #1155	; 0x483
   1c66a:	f007 fe90 	bl	2438e <assert_print>
   1c66e:	4806      	ldr	r0, [pc, #24]	; (1c688 <net_buf_simple_pull_mem+0x34>)
   1c670:	f240 4183 	movw	r1, #1155	; 0x483
   1c674:	f007 fe84 	bl	24380 <assert_post_action>
	buf->len -= len;
   1c678:	88a3      	ldrh	r3, [r4, #4]
	buf->data += len;
   1c67a:	6821      	ldr	r1, [r4, #0]
	buf->len -= len;
   1c67c:	1b5b      	subs	r3, r3, r5
	buf->data += len;
   1c67e:	4429      	add	r1, r5
	buf->len -= len;
   1c680:	80a3      	strh	r3, [r4, #4]
	buf->data += len;
   1c682:	6021      	str	r1, [r4, #0]
}
   1c684:	4630      	mov	r0, r6
   1c686:	bd70      	pop	{r4, r5, r6, pc}
   1c688:	0002ad4c 	.word	0x0002ad4c
   1c68c:	000289af 	.word	0x000289af

0001c690 <net_buf_simple_add>:
{
   1c690:	b570      	push	{r4, r5, r6, lr}
	return buf->data + buf->len;
   1c692:	6803      	ldr	r3, [r0, #0]
   1c694:	8886      	ldrh	r6, [r0, #4]
   1c696:	4604      	mov	r4, r0
   1c698:	441e      	add	r6, r3
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   1c69a:	f00a fbff 	bl	26e9c <net_buf_simple_tailroom>
   1c69e:	4288      	cmp	r0, r1
{
   1c6a0:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   1c6a2:	d20a      	bcs.n	1c6ba <net_buf_simple_add+0x2a>
   1c6a4:	4907      	ldr	r1, [pc, #28]	; (1c6c4 <net_buf_simple_add+0x34>)
   1c6a6:	4808      	ldr	r0, [pc, #32]	; (1c6c8 <net_buf_simple_add+0x38>)
   1c6a8:	f44f 724a 	mov.w	r2, #808	; 0x328
   1c6ac:	f007 fe6f 	bl	2438e <assert_print>
   1c6b0:	4804      	ldr	r0, [pc, #16]	; (1c6c4 <net_buf_simple_add+0x34>)
   1c6b2:	f44f 714a 	mov.w	r1, #808	; 0x328
   1c6b6:	f007 fe63 	bl	24380 <assert_post_action>
	buf->len += len;
   1c6ba:	88a1      	ldrh	r1, [r4, #4]
   1c6bc:	440d      	add	r5, r1
   1c6be:	80a5      	strh	r5, [r4, #4]
}
   1c6c0:	4630      	mov	r0, r6
   1c6c2:	bd70      	pop	{r4, r5, r6, pc}
   1c6c4:	0002ad4c 	.word	0x0002ad4c
   1c6c8:	000289af 	.word	0x000289af

0001c6cc <adc_nrfx_channel_setup>:
	nrf_saadc_channel_config_t config = {
		.resistor_p = NRF_SAADC_RESISTOR_DISABLED,
		.resistor_n = NRF_SAADC_RESISTOR_DISABLED,
		.burst      = NRF_SAADC_BURST_DISABLED,
	};
	uint8_t channel_id = channel_cfg->channel_id;
   1c6cc:	7908      	ldrb	r0, [r1, #4]
{
   1c6ce:	b570      	push	{r4, r5, r6, lr}
	uint8_t channel_id = channel_cfg->channel_id;
   1c6d0:	f000 041f 	and.w	r4, r0, #31

	if (channel_id >= SAADC_CH_NUM) {
   1c6d4:	2c07      	cmp	r4, #7
   1c6d6:	d81a      	bhi.n	1c70e <adc_nrfx_channel_setup+0x42>
		return -EINVAL;
	}

	switch (channel_cfg->gain) {
   1c6d8:	780b      	ldrb	r3, [r1, #0]
   1c6da:	2b09      	cmp	r3, #9
   1c6dc:	d813      	bhi.n	1c706 <adc_nrfx_channel_setup+0x3a>
   1c6de:	e8df f003 	tbb	[pc, r3]
   1c6e2:	0606      	.short	0x0606
   1c6e4:	12060606 	.word	0x12060606
   1c6e8:	10120e05 	.word	0x10120e05
		break;
	case ADC_GAIN_1_2:
		config.gain = NRF_SAADC_GAIN1_2;
		break;
	case ADC_GAIN_1:
		config.gain = NRF_SAADC_GAIN1;
   1c6ec:	2305      	movs	r3, #5
	default:
		LOG_ERR("Selected ADC gain is not valid");
		return -EINVAL;
	}

	switch (channel_cfg->reference) {
   1c6ee:	784a      	ldrb	r2, [r1, #1]
   1c6f0:	2a03      	cmp	r2, #3
   1c6f2:	d00f      	beq.n	1c714 <adc_nrfx_channel_setup+0x48>
   1c6f4:	2a04      	cmp	r2, #4
   1c6f6:	d020      	beq.n	1c73a <adc_nrfx_channel_setup+0x6e>
		break;
	case ADC_REF_VDD_1_4:
		config.reference = NRF_SAADC_REFERENCE_VDD4;
		break;
	default:
		LOG_ERR("Selected ADC reference is not valid");
   1c6f8:	482d      	ldr	r0, [pc, #180]	; (1c7b0 <adc_nrfx_channel_setup+0xe4>)
   1c6fa:	2145      	movs	r1, #69	; 0x45
   1c6fc:	e005      	b.n	1c70a <adc_nrfx_channel_setup+0x3e>
		config.gain = NRF_SAADC_GAIN2;
   1c6fe:	2306      	movs	r3, #6
		break;
   1c700:	e7f5      	b.n	1c6ee <adc_nrfx_channel_setup+0x22>
		config.gain = NRF_SAADC_GAIN4;
   1c702:	2307      	movs	r3, #7
		break;
   1c704:	e7f3      	b.n	1c6ee <adc_nrfx_channel_setup+0x22>
		LOG_ERR("Selected ADC gain is not valid");
   1c706:	482b      	ldr	r0, [pc, #172]	; (1c7b4 <adc_nrfx_channel_setup+0xe8>)
   1c708:	2145      	movs	r1, #69	; 0x45
		break;
	case ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 40):
		config.acq_time = NRF_SAADC_ACQTIME_40US;
		break;
	default:
		LOG_ERR("Selected ADC acquisition time is not valid");
   1c70a:	f007 fe4e 	bl	243aa <z_log_minimal_printk>
		return -EINVAL;
   1c70e:	f06f 0015 	mvn.w	r0, #21
   1c712:	e043      	b.n	1c79c <adc_nrfx_channel_setup+0xd0>
	switch (channel_cfg->reference) {
   1c714:	2501      	movs	r5, #1
	switch (channel_cfg->acquisition_time) {
   1c716:	884a      	ldrh	r2, [r1, #2]
   1c718:	f244 060a 	movw	r6, #16394	; 0x400a
   1c71c:	42b2      	cmp	r2, r6
   1c71e:	d040      	beq.n	1c7a2 <adc_nrfx_channel_setup+0xd6>
   1c720:	d80d      	bhi.n	1c73e <adc_nrfx_channel_setup+0x72>
   1c722:	f244 0603 	movw	r6, #16387	; 0x4003
   1c726:	42b2      	cmp	r2, r6
   1c728:	d017      	beq.n	1c75a <adc_nrfx_channel_setup+0x8e>
   1c72a:	f244 0605 	movw	r6, #16389	; 0x4005
   1c72e:	42b2      	cmp	r2, r6
   1c730:	d035      	beq.n	1c79e <adc_nrfx_channel_setup+0xd2>
   1c732:	b3b2      	cbz	r2, 1c7a2 <adc_nrfx_channel_setup+0xd6>
		LOG_ERR("Selected ADC acquisition time is not valid");
   1c734:	4820      	ldr	r0, [pc, #128]	; (1c7b8 <adc_nrfx_channel_setup+0xec>)
   1c736:	2145      	movs	r1, #69	; 0x45
   1c738:	e7e7      	b.n	1c70a <adc_nrfx_channel_setup+0x3e>
	nrf_saadc_channel_config_t config = {
   1c73a:	2500      	movs	r5, #0
   1c73c:	e7eb      	b.n	1c716 <adc_nrfx_channel_setup+0x4a>
	switch (channel_cfg->acquisition_time) {
   1c73e:	f244 0614 	movw	r6, #16404	; 0x4014
   1c742:	42b2      	cmp	r2, r6
   1c744:	d02f      	beq.n	1c7a6 <adc_nrfx_channel_setup+0xda>
   1c746:	f244 0628 	movw	r6, #16424	; 0x4028
   1c74a:	42b2      	cmp	r2, r6
   1c74c:	d02d      	beq.n	1c7aa <adc_nrfx_channel_setup+0xde>
   1c74e:	f244 060f 	movw	r6, #16399	; 0x400f
   1c752:	42b2      	cmp	r2, r6
   1c754:	d1ee      	bne.n	1c734 <adc_nrfx_channel_setup+0x68>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
   1c756:	2203      	movs	r2, #3
   1c758:	e000      	b.n	1c75c <adc_nrfx_channel_setup+0x90>
	nrf_saadc_channel_config_t config = {
   1c75a:	2200      	movs	r2, #0
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   1c75c:	f3c0 1040 	ubfx	r0, r0, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
   1c760:	021b      	lsls	r3, r3, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   1c762:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
   1c766:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
   1c76a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    p_reg->CH[channel].CONFIG =
   1c76e:	0122      	lsls	r2, r4, #4
   1c770:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1c774:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
    p_reg->CH[channel].PSELP = pselp;
   1c778:	2000      	movs	r0, #0
    p_reg->CH[channel].CONFIG =
   1c77a:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
   1c77e:	0123      	lsls	r3, r4, #4
   1c780:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1c784:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
   1c788:	798a      	ldrb	r2, [r1, #6]
   1c78a:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
   1c78e:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510

	/* Store the positive input selection in a dedicated array,
	 * to get it later when the channel is selected for a sampling
	 * and to mark the channel as configured (ready to be selected).
	 */
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
   1c792:	4b0a      	ldr	r3, [pc, #40]	; (1c7bc <adc_nrfx_channel_setup+0xf0>)
   1c794:	441c      	add	r4, r3
   1c796:	794b      	ldrb	r3, [r1, #5]
   1c798:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8

	return 0;
}
   1c79c:	bd70      	pop	{r4, r5, r6, pc}
	switch (channel_cfg->acquisition_time) {
   1c79e:	2201      	movs	r2, #1
   1c7a0:	e7dc      	b.n	1c75c <adc_nrfx_channel_setup+0x90>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
   1c7a2:	2202      	movs	r2, #2
   1c7a4:	e7da      	b.n	1c75c <adc_nrfx_channel_setup+0x90>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
   1c7a6:	2204      	movs	r2, #4
   1c7a8:	e7d8      	b.n	1c75c <adc_nrfx_channel_setup+0x90>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
   1c7aa:	2205      	movs	r2, #5
   1c7ac:	e7d6      	b.n	1c75c <adc_nrfx_channel_setup+0x90>
   1c7ae:	bf00      	nop
   1c7b0:	0002ad9c 	.word	0x0002ad9c
   1c7b4:	0002ad78 	.word	0x0002ad78
   1c7b8:	0002adc5 	.word	0x0002adc5
   1c7bc:	20000438 	.word	0x20000438

0001c7c0 <adc_context_start_sampling.isra.0>:
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
   1c7c0:	4b04      	ldr	r3, [pc, #16]	; (1c7d4 <adc_context_start_sampling.isra.0+0x14>)
   1c7c2:	2201      	movs	r2, #1
   1c7c4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
   1c7c8:	b108      	cbz	r0, 1c7ce <adc_context_start_sampling.isra.0+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c7ca:	60da      	str	r2, [r3, #12]
}
   1c7cc:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c7ce:	601a      	str	r2, [r3, #0]
   1c7d0:	605a      	str	r2, [r3, #4]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
   1c7d2:	4770      	bx	lr
   1c7d4:	40007000 	.word	0x40007000

0001c7d8 <start_read.constprop.0>:
	}

	return 0;
}

static int start_read(const struct device *dev,
   1c7d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1c7da:	4605      	mov	r5, r0
		      const struct adc_sequence *sequence)
{
	int error;
	uint32_t selected_channels = sequence->channels;
   1c7dc:	6840      	ldr	r0, [r0, #4]
	uint8_t channel_id;

	/* Signal an error if channel selection is invalid (no channels or
	 * a non-existing one is selected).
	 */
	if (!selected_channels ||
   1c7de:	b110      	cbz	r0, 1c7e6 <start_read.constprop.0+0xe>
   1c7e0:	f030 02ff 	bics.w	r2, r0, #255	; 0xff
   1c7e4:	d004      	beq.n	1c7f0 <start_read.constprop.0+0x18>
	    (selected_channels & ~BIT_MASK(SAADC_CH_NUM))) {
		LOG_ERR("Invalid selection of channels");
   1c7e6:	485e      	ldr	r0, [pc, #376]	; (1c960 <start_read.constprop.0+0x188>)
   1c7e8:	2145      	movs	r1, #69	; 0x45
		LOG_ERR(
   1c7ea:	f007 fdde 	bl	243aa <z_log_minimal_printk>
	if (error) {
		return error;
	}

	error = set_oversampling(sequence, active_channels);
	if (error) {
   1c7ee:	e011      	b.n	1c814 <start_read.constprop.0+0x3c>
    p_reg->CH[channel].PSELP = pselp;
   1c7f0:	4c5c      	ldr	r4, [pc, #368]	; (1c964 <start_read.constprop.0+0x18c>)
			if (m_data.positive_inputs[channel_id] == 0U) {
   1c7f2:	4f5d      	ldr	r7, [pc, #372]	; (1c968 <start_read.constprop.0+0x190>)
	active_channels = 0U;
   1c7f4:	4611      	mov	r1, r2
		if (selected_channels & BIT(channel_id)) {
   1c7f6:	fa20 f302 	lsr.w	r3, r0, r2
   1c7fa:	f013 0301 	ands.w	r3, r3, #1
   1c7fe:	d030      	beq.n	1c862 <start_read.constprop.0+0x8a>
			if (m_data.positive_inputs[channel_id] == 0U) {
   1c800:	18bb      	adds	r3, r7, r2
   1c802:	f893 c0a8 	ldrb.w	ip, [r3, #168]	; 0xa8
   1c806:	f1bc 0f00 	cmp.w	ip, #0
   1c80a:	d107      	bne.n	1c81c <start_read.constprop.0+0x44>
				LOG_ERR("Channel %u not configured",
   1c80c:	4857      	ldr	r0, [pc, #348]	; (1c96c <start_read.constprop.0+0x194>)
   1c80e:	2145      	movs	r1, #69	; 0x45
   1c810:	f007 fdcb 	bl	243aa <z_log_minimal_printk>
				return -EINVAL;
   1c814:	f06f 0015 	mvn.w	r0, #21

	adc_context_start_read(&m_data.ctx, sequence);

	error = adc_context_wait_for_completion(&m_data.ctx);
	return error;
}
   1c818:	b003      	add	sp, #12
   1c81a:	bdf0      	pop	{r4, r5, r6, r7, pc}

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
   1c81c:	eb04 1e02 	add.w	lr, r4, r2, lsl #4
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
   1c820:	7c6e      	ldrb	r6, [r5, #17]
   1c822:	f8de 3518 	ldr.w	r3, [lr, #1304]	; 0x518
   1c826:	3e00      	subs	r6, #0
   1c828:	bf18      	it	ne
   1c82a:	2601      	movne	r6, #1
   1c82c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1c830:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
   1c834:	f8ce 3518 	str.w	r3, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
   1c838:	f102 0351 	add.w	r3, r2, #81	; 0x51
   1c83c:	011b      	lsls	r3, r3, #4
			++active_channels;
   1c83e:	3101      	adds	r1, #1
   1c840:	f844 c003 	str.w	ip, [r4, r3]
   1c844:	b2c9      	uxtb	r1, r1
	} while (++channel_id < SAADC_CH_NUM);
   1c846:	3201      	adds	r2, #1
   1c848:	2a08      	cmp	r2, #8
   1c84a:	d1d4      	bne.n	1c7f6 <start_read.constprop.0+0x1e>
	error = set_resolution(sequence);
   1c84c:	7c2a      	ldrb	r2, [r5, #16]
	switch (sequence->resolution) {
   1c84e:	f1a2 0308 	sub.w	r3, r2, #8
   1c852:	2b06      	cmp	r3, #6
   1c854:	d817      	bhi.n	1c886 <start_read.constprop.0+0xae>
   1c856:	e8df f003 	tbb	[pc, r3]
   1c85a:	1619      	.short	0x1619
   1c85c:	161b1609 	.word	0x161b1609
   1c860:	14          	.byte	0x14
   1c861:	00          	.byte	0x00
   1c862:	f102 0651 	add.w	r6, r2, #81	; 0x51
   1c866:	0136      	lsls	r6, r6, #4
   1c868:	51a3      	str	r3, [r4, r6]
}
   1c86a:	e7ec      	b.n	1c846 <start_read.constprop.0+0x6e>
   1c86c:	2301      	movs	r3, #1
    p_reg->RESOLUTION = resolution;
   1c86e:	483d      	ldr	r0, [pc, #244]	; (1c964 <start_read.constprop.0+0x18c>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   1c870:	2901      	cmp	r1, #1
   1c872:	f8c0 35f0 	str.w	r3, [r0, #1520]	; 0x5f0
	error = set_oversampling(sequence, active_channels);
   1c876:	7c6a      	ldrb	r2, [r5, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   1c878:	d90c      	bls.n	1c894 <start_read.constprop.0+0xbc>
   1c87a:	b16a      	cbz	r2, 1c898 <start_read.constprop.0+0xc0>
		LOG_ERR(
   1c87c:	483c      	ldr	r0, [pc, #240]	; (1c970 <start_read.constprop.0+0x198>)
   1c87e:	2145      	movs	r1, #69	; 0x45
   1c880:	e7b3      	b.n	1c7ea <start_read.constprop.0+0x12>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
   1c882:	2303      	movs	r3, #3
		break;
   1c884:	e7f3      	b.n	1c86e <start_read.constprop.0+0x96>
		LOG_ERR("ADC resolution value %d is not valid",
   1c886:	483b      	ldr	r0, [pc, #236]	; (1c974 <start_read.constprop.0+0x19c>)
   1c888:	2145      	movs	r1, #69	; 0x45
   1c88a:	e7c1      	b.n	1c810 <start_read.constprop.0+0x38>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
   1c88c:	2300      	movs	r3, #0
   1c88e:	e7ee      	b.n	1c86e <start_read.constprop.0+0x96>
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
   1c890:	2302      	movs	r3, #2
   1c892:	e7ec      	b.n	1c86e <start_read.constprop.0+0x96>
	switch (sequence->oversampling) {
   1c894:	2a08      	cmp	r2, #8
   1c896:	d80e      	bhi.n	1c8b6 <start_read.constprop.0+0xde>
    p_reg->OVERSAMPLE = oversample;
   1c898:	f8c0 25f4 	str.w	r2, [r0, #1524]	; 0x5f4
	if (sequence->options) {
   1c89c:	682a      	ldr	r2, [r5, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
   1c89e:	004b      	lsls	r3, r1, #1
	if (sequence->options) {
   1c8a0:	b962      	cbnz	r2, 1c8bc <start_read.constprop.0+0xe4>
	if (sequence->buffer_size < needed_buffer_size) {
   1c8a2:	68ea      	ldr	r2, [r5, #12]
   1c8a4:	429a      	cmp	r2, r3
   1c8a6:	d20d      	bcs.n	1c8c4 <start_read.constprop.0+0xec>
		LOG_ERR("Provided buffer is too small (%u/%u)",
   1c8a8:	4833      	ldr	r0, [pc, #204]	; (1c978 <start_read.constprop.0+0x1a0>)
   1c8aa:	2145      	movs	r1, #69	; 0x45
   1c8ac:	f007 fd7d 	bl	243aa <z_log_minimal_printk>
		return -ENOMEM;
   1c8b0:	f06f 000b 	mvn.w	r0, #11
   1c8b4:	e7b0      	b.n	1c818 <start_read.constprop.0+0x40>
		LOG_ERR("Oversampling value %d is not valid",
   1c8b6:	4831      	ldr	r0, [pc, #196]	; (1c97c <start_read.constprop.0+0x1a4>)
   1c8b8:	2145      	movs	r1, #69	; 0x45
   1c8ba:	e7a9      	b.n	1c810 <start_read.constprop.0+0x38>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
   1c8bc:	8992      	ldrh	r2, [r2, #12]
   1c8be:	fb02 3303 	mla	r3, r2, r3, r3
   1c8c2:	e7ee      	b.n	1c8a2 <start_read.constprop.0+0xca>
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   1c8c4:	4b27      	ldr	r3, [pc, #156]	; (1c964 <start_read.constprop.0+0x18c>)
   1c8c6:	68aa      	ldr	r2, [r5, #8]
   1c8c8:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
   1c8cc:	462f      	mov	r7, r5
    p_reg->RESULT.MAXCNT = size;
   1c8ce:	f8c3 1630 	str.w	r1, [r3, #1584]	; 0x630
   1c8d2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   1c8d4:	4c24      	ldr	r4, [pc, #144]	; (1c968 <start_read.constprop.0+0x190>)
   1c8d6:	f104 067c 	add.w	r6, r4, #124	; 0x7c
   1c8da:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1c8dc:	683b      	ldr	r3, [r7, #0]
   1c8de:	6033      	str	r3, [r6, #0]
	ctx->status = 0;

	if (sequence->options) {
   1c8e0:	682b      	ldr	r3, [r5, #0]
	ctx->status = 0;
   1c8e2:	2600      	movs	r6, #0
   1c8e4:	6726      	str	r6, [r4, #112]	; 0x70
	if (sequence->options) {
   1c8e6:	4627      	mov	r7, r4
   1c8e8:	b393      	cbz	r3, 1c950 <start_read.constprop.0+0x178>
		ctx->options = *sequence->options;
   1c8ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1c8ec:	f104 0590 	add.w	r5, r4, #144	; 0x90
   1c8f0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
   1c8f4:	67e5      	str	r5, [r4, #124]	; 0x7c
		ctx->sampling_index = 0U;
   1c8f6:	f8a4 60a0 	strh.w	r6, [r4, #160]	; 0xa0

		if (ctx->options.interval_us != 0U) {
   1c8fa:	b348      	cbz	r0, 1c950 <start_read.constprop.0+0x178>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1c8fc:	f3bf 8f5b 	dmb	ish
   1c900:	e857 3f00 	ldrex	r3, [r7]
   1c904:	e847 6200 	strex	r2, r6, [r7]
   1c908:	2a00      	cmp	r2, #0
   1c90a:	d1f9      	bne.n	1c900 <start_read.constprop.0+0x128>
   1c90c:	f3bf 8f5b 	dmb	ish
			return ((t * to_hz + off) / from_hz);
   1c910:	481b      	ldr	r0, [pc, #108]	; (1c980 <start_read.constprop.0+0x1a8>)
   1c912:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
   1c916:	4a1b      	ldr	r2, [pc, #108]	; (1c984 <start_read.constprop.0+0x1ac>)
   1c918:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   1c91c:	4631      	mov	r1, r6
   1c91e:	2300      	movs	r3, #0
   1c920:	fbe7 0105 	umlal	r0, r1, r7, r5
   1c924:	f7e4 fb14 	bl	f50 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
   1c928:	2200      	movs	r2, #0
   1c92a:	e9cd 0100 	strd	r0, r1, [sp]
   1c92e:	2300      	movs	r3, #0
   1c930:	f104 0008 	add.w	r0, r4, #8
   1c934:	f006 faa4 	bl	22e80 <z_impl_k_timer_start>
	if (ctx->asynchronous) {
   1c938:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   1c93c:	b96b      	cbnz	r3, 1c95a <start_read.constprop.0+0x182>
	return z_impl_k_sem_take(sem, timeout);
   1c93e:	4812      	ldr	r0, [pc, #72]	; (1c988 <start_read.constprop.0+0x1b0>)
   1c940:	f04f 32ff 	mov.w	r2, #4294967295
   1c944:	f04f 33ff 	mov.w	r3, #4294967295
   1c948:	f004 f9e4 	bl	20d14 <z_impl_k_sem_take>
	return ctx->status;
   1c94c:	6f20      	ldr	r0, [r4, #112]	; 0x70
   1c94e:	e763      	b.n	1c818 <start_read.constprop.0+0x40>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
   1c950:	f894 008e 	ldrb.w	r0, [r4, #142]	; 0x8e
   1c954:	f7ff ff34 	bl	1c7c0 <adc_context_start_sampling.isra.0>
   1c958:	e7ee      	b.n	1c938 <start_read.constprop.0+0x160>
		return 0;
   1c95a:	2000      	movs	r0, #0
	return error;
   1c95c:	e75c      	b.n	1c818 <start_read.constprop.0+0x40>
   1c95e:	bf00      	nop
   1c960:	0002adf5 	.word	0x0002adf5
   1c964:	40007000 	.word	0x40007000
   1c968:	20000438 	.word	0x20000438
   1c96c:	0002ae18 	.word	0x0002ae18
   1c970:	0002ae61 	.word	0x0002ae61
   1c974:	0002ae37 	.word	0x0002ae37
   1c978:	0002aec0 	.word	0x0002aec0
   1c97c:	0002ae98 	.word	0x0002ae98
   1c980:	000f423f 	.word	0x000f423f
   1c984:	000f4240 	.word	0x000f4240
   1c988:	20000490 	.word	0x20000490

0001c98c <adc_nrfx_read_async>:
#ifdef CONFIG_ADC_ASYNC
/* Implementation of the ADC driver API function: adc_read_async. */
static int adc_nrfx_read_async(const struct device *dev,
			       const struct adc_sequence *sequence,
			       struct k_poll_signal *async)
{
   1c98c:	b570      	push	{r4, r5, r6, lr}
   1c98e:	460c      	mov	r4, r1
   1c990:	4616      	mov	r6, r2
   1c992:	4d0d      	ldr	r5, [pc, #52]	; (1c9c8 <adc_nrfx_read_async+0x3c>)
   1c994:	f04f 32ff 	mov.w	r2, #4294967295
   1c998:	f04f 33ff 	mov.w	r3, #4294967295
   1c99c:	f105 0040 	add.w	r0, r5, #64	; 0x40
   1c9a0:	f004 f9b8 	bl	20d14 <z_impl_k_sem_take>
	ctx->asynchronous = asynchronous;
   1c9a4:	2301      	movs	r3, #1
	int error;

	adc_context_lock(&m_data.ctx, true, async);
	error = start_read(dev, sequence);
   1c9a6:	4620      	mov	r0, r4
   1c9a8:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
	ctx->signal = signal;
   1c9ac:	676e      	str	r6, [r5, #116]	; 0x74
   1c9ae:	f7ff ff13 	bl	1c7d8 <start_read.constprop.0>
	if (ctx->asynchronous && (status == 0)) {
   1c9b2:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
   1c9b6:	4604      	mov	r4, r0
   1c9b8:	b103      	cbz	r3, 1c9bc <adc_nrfx_read_async+0x30>
   1c9ba:	b110      	cbz	r0, 1c9c2 <adc_nrfx_read_async+0x36>
	z_impl_k_sem_give(sem);
   1c9bc:	4803      	ldr	r0, [pc, #12]	; (1c9cc <adc_nrfx_read_async+0x40>)
   1c9be:	f004 f96f 	bl	20ca0 <z_impl_k_sem_give>
	adc_context_release(&m_data.ctx, error);

	return error;
}
   1c9c2:	4620      	mov	r0, r4
   1c9c4:	bd70      	pop	{r4, r5, r6, pc}
   1c9c6:	bf00      	nop
   1c9c8:	20000438 	.word	0x20000438
   1c9cc:	20000478 	.word	0x20000478

0001c9d0 <adc_nrfx_read>:
{
   1c9d0:	b538      	push	{r3, r4, r5, lr}
   1c9d2:	460c      	mov	r4, r1
	return z_impl_k_sem_take(sem, timeout);
   1c9d4:	4d0c      	ldr	r5, [pc, #48]	; (1ca08 <adc_nrfx_read+0x38>)
   1c9d6:	f04f 32ff 	mov.w	r2, #4294967295
   1c9da:	f04f 33ff 	mov.w	r3, #4294967295
   1c9de:	f105 0040 	add.w	r0, r5, #64	; 0x40
   1c9e2:	f004 f997 	bl	20d14 <z_impl_k_sem_take>
	ctx->asynchronous = asynchronous;
   1c9e6:	2300      	movs	r3, #0
	error = start_read(dev, sequence);
   1c9e8:	4620      	mov	r0, r4
   1c9ea:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
	ctx->signal = signal;
   1c9ee:	676b      	str	r3, [r5, #116]	; 0x74
   1c9f0:	f7ff fef2 	bl	1c7d8 <start_read.constprop.0>
	if (ctx->asynchronous && (status == 0)) {
   1c9f4:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
   1c9f8:	4604      	mov	r4, r0
   1c9fa:	b103      	cbz	r3, 1c9fe <adc_nrfx_read+0x2e>
   1c9fc:	b110      	cbz	r0, 1ca04 <adc_nrfx_read+0x34>
	z_impl_k_sem_give(sem);
   1c9fe:	4803      	ldr	r0, [pc, #12]	; (1ca0c <adc_nrfx_read+0x3c>)
   1ca00:	f004 f94e 	bl	20ca0 <z_impl_k_sem_give>
}
   1ca04:	4620      	mov	r0, r4
   1ca06:	bd38      	pop	{r3, r4, r5, pc}
   1ca08:	20000438 	.word	0x20000438
   1ca0c:	20000478 	.word	0x20000478

0001ca10 <init_saadc>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ca10:	4b0e      	ldr	r3, [pc, #56]	; (1ca4c <init_saadc+0x3c>)
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
   1ca12:	b510      	push	{r4, lr}
   1ca14:	2400      	movs	r4, #0
   1ca16:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   1ca1a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1ca1e:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
   1ca22:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    p_reg->INTENSET = mask;
   1ca26:	2212      	movs	r2, #18
   1ca28:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
   1ca2c:	2007      	movs	r0, #7
   1ca2e:	f7f7 fbd3 	bl	141d8 <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1ca32:	4622      	mov	r2, r4
   1ca34:	2101      	movs	r1, #1
   1ca36:	2007      	movs	r0, #7
   1ca38:	f7f7 fc00 	bl	1423c <z_arm_irq_priority_set>
/**
 * @internal
 */
static inline unsigned int z_impl_k_sem_count_get(struct k_sem *sem)
{
	return sem->count;
   1ca3c:	4804      	ldr	r0, [pc, #16]	; (1ca50 <init_saadc+0x40>)
	if (!k_sem_count_get(&ctx->lock)) {
   1ca3e:	6c83      	ldr	r3, [r0, #72]	; 0x48
   1ca40:	b913      	cbnz	r3, 1ca48 <init_saadc+0x38>
   1ca42:	3040      	adds	r0, #64	; 0x40
   1ca44:	f004 f92c 	bl	20ca0 <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
   1ca48:	2000      	movs	r0, #0
   1ca4a:	bd10      	pop	{r4, pc}
   1ca4c:	40007000 	.word	0x40007000
   1ca50:	20000438 	.word	0x20000438

0001ca54 <saadc_irq_handler>:
{
   1ca54:	b538      	push	{r3, r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ca56:	4b35      	ldr	r3, [pc, #212]	; (1cb2c <saadc_irq_handler+0xd8>)
   1ca58:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
   1ca5c:	2a00      	cmp	r2, #0
   1ca5e:	d057      	beq.n	1cb10 <saadc_irq_handler+0xbc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ca60:	2200      	movs	r2, #0
   1ca62:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
   1ca66:	4c32      	ldr	r4, [pc, #200]	; (1cb30 <saadc_irq_handler+0xdc>)
   1ca68:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ca6c:	2101      	movs	r1, #1
   1ca6e:	6099      	str	r1, [r3, #8]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
   1ca70:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   1ca74:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   1ca76:	4625      	mov	r5, r4
   1ca78:	b3db      	cbz	r3, 1caf2 <saadc_irq_handler+0x9e>
		adc_sequence_callback callback = ctx->options.callback;
   1ca7a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
   1ca7e:	b143      	cbz	r3, 1ca92 <saadc_irq_handler+0x3e>
			action = callback(dev,
   1ca80:	f8b4 20a0 	ldrh.w	r2, [r4, #160]	; 0xa0
   1ca84:	f104 017c 	add.w	r1, r4, #124	; 0x7c
   1ca88:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
   1ca8a:	2801      	cmp	r0, #1
   1ca8c:	d014      	beq.n	1cab8 <saadc_irq_handler+0x64>
   1ca8e:	2802      	cmp	r0, #2
   1ca90:	d029      	beq.n	1cae6 <saadc_irq_handler+0x92>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
   1ca92:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
   1ca96:	f8b4 209c 	ldrh.w	r2, [r4, #156]	; 0x9c
   1ca9a:	429a      	cmp	r2, r3
   1ca9c:	d923      	bls.n	1cae6 <saadc_irq_handler+0x92>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
   1ca9e:	3301      	adds	r3, #1
   1caa0:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
   1caa4:	4b21      	ldr	r3, [pc, #132]	; (1cb2c <saadc_irq_handler+0xd8>)
   1caa6:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
   1caaa:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
   1caae:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
   1cab0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   1cab4:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
   1cab8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   1cabc:	b92b      	cbnz	r3, 1caca <saadc_irq_handler+0x76>
				adc_context_start_sampling(ctx);
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
				adc_context_start_sampling(ctx);
   1cabe:	f894 008e 	ldrb.w	r0, [r4, #142]	; 0x8e
}
   1cac2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1cac6:	f7ff be7b 	b.w	1c7c0 <adc_context_start_sampling.isra.0>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1caca:	f3bf 8f5b 	dmb	ish
   1cace:	e855 3f00 	ldrex	r3, [r5]
   1cad2:	1e5a      	subs	r2, r3, #1
   1cad4:	e845 2100 	strex	r1, r2, [r5]
   1cad8:	2900      	cmp	r1, #0
   1cada:	d1f8      	bne.n	1cace <saadc_irq_handler+0x7a>
   1cadc:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
   1cae0:	2b01      	cmp	r3, #1
   1cae2:	dcec      	bgt.n	1cabe <saadc_irq_handler+0x6a>
   1cae4:	bd38      	pop	{r3, r4, r5, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
   1cae6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   1caea:	b113      	cbz	r3, 1caf2 <saadc_irq_handler+0x9e>
	z_impl_k_timer_stop(timer);
   1caec:	4811      	ldr	r0, [pc, #68]	; (1cb34 <saadc_irq_handler+0xe0>)
   1caee:	f00a fee1 	bl	278b4 <z_impl_k_timer_stop>
	if (ctx->asynchronous) {
   1caf2:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   1caf6:	b14b      	cbz	r3, 1cb0c <saadc_irq_handler+0xb8>
		if (ctx->signal) {
   1caf8:	6f60      	ldr	r0, [r4, #116]	; 0x74
   1cafa:	b110      	cbz	r0, 1cb02 <saadc_irq_handler+0xae>
	return z_impl_k_poll_signal_raise(sig, result);
   1cafc:	2100      	movs	r1, #0
   1cafe:	f006 fca3 	bl	23448 <z_impl_k_poll_signal_raise>
	z_impl_k_sem_give(sem);
   1cb02:	480d      	ldr	r0, [pc, #52]	; (1cb38 <saadc_irq_handler+0xe4>)
   1cb04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1cb08:	f004 b8ca 	b.w	20ca0 <z_impl_k_sem_give>
   1cb0c:	480b      	ldr	r0, [pc, #44]	; (1cb3c <saadc_irq_handler+0xe8>)
   1cb0e:	e7f9      	b.n	1cb04 <saadc_irq_handler+0xb0>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1cb10:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
	} else if (nrf_saadc_event_check(NRF_SAADC,
   1cb14:	2900      	cmp	r1, #0
   1cb16:	d0e5      	beq.n	1cae4 <saadc_irq_handler+0x90>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1cb18:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   1cb1c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1cb20:	2201      	movs	r2, #1
   1cb22:	609a      	str	r2, [r3, #8]
   1cb24:	601a      	str	r2, [r3, #0]
   1cb26:	605a      	str	r2, [r3, #4]
}
   1cb28:	e7dc      	b.n	1cae4 <saadc_irq_handler+0x90>
   1cb2a:	bf00      	nop
   1cb2c:	40007000 	.word	0x40007000
   1cb30:	20000438 	.word	0x20000438
   1cb34:	20000440 	.word	0x20000440
   1cb38:	20000478 	.word	0x20000478
   1cb3c:	20000490 	.word	0x20000490

0001cb40 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1cb40:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1cb42:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
   1cb44:	490a      	ldr	r1, [pc, #40]	; (1cb70 <onoff_start+0x30>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1cb46:	4a0b      	ldr	r2, [pc, #44]	; (1cb74 <onoff_start+0x34>)
	size_t offset = (size_t)(mgr - data->mgr);
   1cb48:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1cb4a:	2340      	movs	r3, #64	; 0x40
   1cb4c:	9300      	str	r3, [sp, #0]
   1cb4e:	1149      	asrs	r1, r1, #5
{
   1cb50:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1cb52:	4623      	mov	r3, r4
   1cb54:	4808      	ldr	r0, [pc, #32]	; (1cb78 <onoff_start+0x38>)
   1cb56:	f00a f9e6 	bl	26f26 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   1cb5a:	1e01      	subs	r1, r0, #0
   1cb5c:	da05      	bge.n	1cb6a <onoff_start+0x2a>
		notify(mgr, err);
   1cb5e:	4628      	mov	r0, r5
   1cb60:	4623      	mov	r3, r4
	}
}
   1cb62:	b003      	add	sp, #12
   1cb64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
   1cb68:	4718      	bx	r3
}
   1cb6a:	b003      	add	sp, #12
   1cb6c:	bd30      	pop	{r4, r5, pc}
   1cb6e:	bf00      	nop
   1cb70:	2000204c 	.word	0x2000204c
   1cb74:	00026f95 	.word	0x00026f95
   1cb78:	00027ba4 	.word	0x00027ba4

0001cb7c <get_status>:
{
   1cb7c:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1cb7e:	b2cc      	uxtb	r4, r1
   1cb80:	2c01      	cmp	r4, #1
{
   1cb82:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1cb84:	d908      	bls.n	1cb98 <get_status+0x1c>
   1cb86:	4908      	ldr	r1, [pc, #32]	; (1cba8 <get_status+0x2c>)
   1cb88:	4808      	ldr	r0, [pc, #32]	; (1cbac <get_status+0x30>)
   1cb8a:	2279      	movs	r2, #121	; 0x79
   1cb8c:	f007 fbff 	bl	2438e <assert_print>
   1cb90:	4805      	ldr	r0, [pc, #20]	; (1cba8 <get_status+0x2c>)
   1cb92:	2179      	movs	r1, #121	; 0x79
   1cb94:	f007 fbf4 	bl	24380 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1cb98:	6929      	ldr	r1, [r5, #16]
   1cb9a:	230c      	movs	r3, #12
   1cb9c:	fb04 1403 	mla	r4, r4, r3, r1
   1cba0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
   1cba2:	f000 0007 	and.w	r0, r0, #7
   1cba6:	bd38      	pop	{r3, r4, r5, pc}
   1cba8:	0002aef9 	.word	0x0002aef9
   1cbac:	000289af 	.word	0x000289af

0001cbb0 <stop>:
{
   1cbb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cbb2:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1cbb4:	2c01      	cmp	r4, #1
	struct nrf_clock_control_data *data = dev->data;
   1cbb6:	6906      	ldr	r6, [r0, #16]
{
   1cbb8:	4605      	mov	r5, r0
   1cbba:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1cbbc:	d90a      	bls.n	1cbd4 <stop+0x24>
   1cbbe:	4918      	ldr	r1, [pc, #96]	; (1cc20 <stop+0x70>)
   1cbc0:	4818      	ldr	r0, [pc, #96]	; (1cc24 <stop+0x74>)
   1cbc2:	f240 124d 	movw	r2, #333	; 0x14d
   1cbc6:	f007 fbe2 	bl	2438e <assert_print>
   1cbca:	4815      	ldr	r0, [pc, #84]	; (1cc20 <stop+0x70>)
   1cbcc:	f240 114d 	movw	r1, #333	; 0x14d
   1cbd0:	f007 fbd6 	bl	24380 <assert_post_action>
	__asm__ volatile(
   1cbd4:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cbd8:	f3ef 8111 	mrs	r1, BASEPRI
   1cbdc:	f383 8812 	msr	BASEPRI_MAX, r3
   1cbe0:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1cbe4:	220c      	movs	r2, #12
   1cbe6:	fb02 6304 	mla	r3, r2, r4, r6
   1cbea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1cbec:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   1cbf0:	d001      	beq.n	1cbf6 <stop+0x46>
   1cbf2:	429f      	cmp	r7, r3
   1cbf4:	d111      	bne.n	1cc1a <stop+0x6a>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1cbf6:	fb02 6604 	mla	r6, r2, r4, r6
   1cbfa:	2301      	movs	r3, #1
   1cbfc:	64b3      	str	r3, [r6, #72]	; 0x48
	int err = 0;
   1cbfe:	2000      	movs	r0, #0
	__asm__ volatile(
   1cc00:	f381 8811 	msr	BASEPRI, r1
   1cc04:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   1cc08:	b930      	cbnz	r0, 1cc18 <stop+0x68>
	get_sub_config(dev, type)->stop();
   1cc0a:	6869      	ldr	r1, [r5, #4]
   1cc0c:	230c      	movs	r3, #12
   1cc0e:	fb03 1404 	mla	r4, r3, r4, r1
   1cc12:	6863      	ldr	r3, [r4, #4]
   1cc14:	4798      	blx	r3
	return 0;
   1cc16:	2000      	movs	r0, #0
}
   1cc18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
   1cc1a:	f04f 30ff 	mov.w	r0, #4294967295
   1cc1e:	e7ef      	b.n	1cc00 <stop+0x50>
   1cc20:	0002aef9 	.word	0x0002aef9
   1cc24:	000289af 	.word	0x000289af

0001cc28 <onoff_stop>:
{
   1cc28:	b570      	push	{r4, r5, r6, lr}
   1cc2a:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
   1cc2c:	4906      	ldr	r1, [pc, #24]	; (1cc48 <onoff_stop+0x20>)
   1cc2e:	1a41      	subs	r1, r0, r1
{
   1cc30:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1cc32:	1149      	asrs	r1, r1, #5
   1cc34:	4805      	ldr	r0, [pc, #20]	; (1cc4c <onoff_stop+0x24>)
   1cc36:	2240      	movs	r2, #64	; 0x40
   1cc38:	f7ff ffba 	bl	1cbb0 <stop>
	notify(mgr, res);
   1cc3c:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1cc3e:	4601      	mov	r1, r0
	notify(mgr, res);
   1cc40:	4620      	mov	r0, r4
}
   1cc42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   1cc46:	4718      	bx	r3
   1cc48:	2000204c 	.word	0x2000204c
   1cc4c:	00027ba4 	.word	0x00027ba4

0001cc50 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1cc50:	2200      	movs	r2, #0
{
   1cc52:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1cc54:	2101      	movs	r1, #1
{
   1cc56:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1cc58:	4610      	mov	r0, r2
   1cc5a:	f7f7 faef 	bl	1423c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   1cc5e:	480f      	ldr	r0, [pc, #60]	; (1cc9c <clk_init+0x4c>)
   1cc60:	f002 f960 	bl	1ef24 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1cc64:	4b0e      	ldr	r3, [pc, #56]	; (1cca0 <clk_init+0x50>)
   1cc66:	4298      	cmp	r0, r3
   1cc68:	d115      	bne.n	1cc96 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   1cc6a:	f00a fc39 	bl	274e0 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   1cc6e:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   1cc70:	490c      	ldr	r1, [pc, #48]	; (1cca4 <clk_init+0x54>)
   1cc72:	4630      	mov	r0, r6
   1cc74:	f007 fa3b 	bl	240ee <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   1cc78:	2800      	cmp	r0, #0
   1cc7a:	db0b      	blt.n	1cc94 <clk_init+0x44>
	struct nrf_clock_control_data *data = dev->data;
   1cc7c:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1cc7e:	4909      	ldr	r1, [pc, #36]	; (1cca4 <clk_init+0x54>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1cc80:	2501      	movs	r5, #1
   1cc82:	64b5      	str	r5, [r6, #72]	; 0x48
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1cc84:	f104 0020 	add.w	r0, r4, #32
   1cc88:	f007 fa31 	bl	240ee <onoff_manager_init>
		if (err < 0) {
   1cc8c:	2800      	cmp	r0, #0
   1cc8e:	db01      	blt.n	1cc94 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1cc90:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
   1cc92:	2000      	movs	r0, #0
}
   1cc94:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   1cc96:	f06f 0004 	mvn.w	r0, #4
   1cc9a:	e7fb      	b.n	1cc94 <clk_init+0x44>
   1cc9c:	0001ccdd 	.word	0x0001ccdd
   1cca0:	0bad0000 	.word	0x0bad0000
   1cca4:	00028508 	.word	0x00028508

0001cca8 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   1cca8:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   1ccaa:	230c      	movs	r3, #12
   1ccac:	4809      	ldr	r0, [pc, #36]	; (1ccd4 <clkstarted_handle.constprop.0+0x2c>)
   1ccae:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   1ccb0:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   1ccb2:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   1ccb4:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
   1ccb8:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   1ccba:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
   1ccbc:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
   1ccbe:	4418      	add	r0, r3
   1ccc0:	f00a f91e 	bl	26f00 <set_on_state>
	if (callback) {
   1ccc4:	b12d      	cbz	r5, 1ccd2 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1ccc6:	4632      	mov	r2, r6
   1ccc8:	462b      	mov	r3, r5
   1ccca:	4803      	ldr	r0, [pc, #12]	; (1ccd8 <clkstarted_handle.constprop.0+0x30>)
}
   1cccc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   1ccd0:	4718      	bx	r3
}
   1ccd2:	bd70      	pop	{r4, r5, r6, pc}
   1ccd4:	2000204c 	.word	0x2000204c
   1ccd8:	00027ba4 	.word	0x00027ba4

0001ccdc <clock_event_handler>:
	switch (event) {
   1ccdc:	2801      	cmp	r0, #1
{
   1ccde:	b508      	push	{r3, lr}
	switch (event) {
   1cce0:	d006      	beq.n	1ccf0 <clock_event_handler+0x14>
   1cce2:	2803      	cmp	r0, #3
   1cce4:	d008      	beq.n	1ccf8 <clock_event_handler+0x1c>
   1cce6:	b9a0      	cbnz	r0, 1cd12 <clock_event_handler+0x36>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   1cce8:	4b0f      	ldr	r3, [pc, #60]	; (1cd28 <clock_event_handler+0x4c>)
   1ccea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1ccec:	075b      	lsls	r3, r3, #29
   1ccee:	d119      	bne.n	1cd24 <clock_event_handler+0x48>
}
   1ccf0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1ccf4:	f7ff bfd8 	b.w	1cca8 <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
   1ccf8:	490c      	ldr	r1, [pc, #48]	; (1cd2c <clock_event_handler+0x50>)
   1ccfa:	480d      	ldr	r0, [pc, #52]	; (1cd30 <clock_event_handler+0x54>)
   1ccfc:	f240 225e 	movw	r2, #606	; 0x25e
   1cd00:	f007 fb45 	bl	2438e <assert_print>
   1cd04:	f240 215e 	movw	r1, #606	; 0x25e
}
   1cd08:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
   1cd0c:	4807      	ldr	r0, [pc, #28]	; (1cd2c <clock_event_handler+0x50>)
   1cd0e:	f007 bb37 	b.w	24380 <assert_post_action>
   1cd12:	4906      	ldr	r1, [pc, #24]	; (1cd2c <clock_event_handler+0x50>)
   1cd14:	4806      	ldr	r0, [pc, #24]	; (1cd30 <clock_event_handler+0x54>)
   1cd16:	f240 2262 	movw	r2, #610	; 0x262
   1cd1a:	f007 fb38 	bl	2438e <assert_print>
   1cd1e:	f240 2162 	movw	r1, #610	; 0x262
   1cd22:	e7f1      	b.n	1cd08 <clock_event_handler+0x2c>
}
   1cd24:	bd08      	pop	{r3, pc}
   1cd26:	bf00      	nop
   1cd28:	2000204c 	.word	0x2000204c
   1cd2c:	0002aef9 	.word	0x0002aef9
   1cd30:	000289af 	.word	0x000289af

0001cd34 <generic_hfclk_start>:
{
   1cd34:	b508      	push	{r3, lr}
	__asm__ volatile(
   1cd36:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cd3a:	f3ef 8111 	mrs	r1, BASEPRI
   1cd3e:	f383 8812 	msr	BASEPRI_MAX, r3
   1cd42:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1cd46:	4a12      	ldr	r2, [pc, #72]	; (1cd90 <generic_hfclk_start+0x5c>)
   1cd48:	6813      	ldr	r3, [r2, #0]
   1cd4a:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   1cd4e:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   1cd52:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1cd54:	d00c      	beq.n	1cd70 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1cd56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1cd5a:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1cd5e:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1cd62:	f013 0301 	ands.w	r3, r3, #1
   1cd66:	d003      	beq.n	1cd70 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   1cd68:	480a      	ldr	r0, [pc, #40]	; (1cd94 <generic_hfclk_start+0x60>)
   1cd6a:	f00a f8c9 	bl	26f00 <set_on_state>
			already_started = true;
   1cd6e:	2301      	movs	r3, #1
	__asm__ volatile(
   1cd70:	f381 8811 	msr	BASEPRI, r1
   1cd74:	f3bf 8f6f 	isb	sy
	if (already_started) {
   1cd78:	b123      	cbz	r3, 1cd84 <generic_hfclk_start+0x50>
}
   1cd7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   1cd7e:	2000      	movs	r0, #0
   1cd80:	f7ff bf92 	b.w	1cca8 <clkstarted_handle.constprop.0>
}
   1cd84:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1cd88:	2001      	movs	r0, #1
   1cd8a:	f002 b891 	b.w	1eeb0 <nrfx_clock_start>
   1cd8e:	bf00      	nop
   1cd90:	200020a4 	.word	0x200020a4
   1cd94:	20002094 	.word	0x20002094

0001cd98 <api_blocking_start>:
{
   1cd98:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1cd9a:	2200      	movs	r2, #0
   1cd9c:	2301      	movs	r3, #1
   1cd9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1cda2:	ab04      	add	r3, sp, #16
   1cda4:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1cda8:	4a09      	ldr	r2, [pc, #36]	; (1cdd0 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1cdaa:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1cdae:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1cdb0:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1cdb4:	f00a f8e7 	bl	26f86 <api_start>
	if (err < 0) {
   1cdb8:	2800      	cmp	r0, #0
   1cdba:	db05      	blt.n	1cdc8 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   1cdbc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1cdc0:	2300      	movs	r3, #0
   1cdc2:	4668      	mov	r0, sp
   1cdc4:	f003 ffa6 	bl	20d14 <z_impl_k_sem_take>
}
   1cdc8:	b007      	add	sp, #28
   1cdca:	f85d fb04 	ldr.w	pc, [sp], #4
   1cdce:	bf00      	nop
   1cdd0:	00026fad 	.word	0x00026fad

0001cdd4 <lfclk_start>:
{
   1cdd4:	b510      	push	{r4, lr}
	if (!once) {
   1cdd6:	4c07      	ldr	r4, [pc, #28]	; (1cdf4 <lfclk_start+0x20>)
   1cdd8:	7823      	ldrb	r3, [r4, #0]
   1cdda:	b92b      	cbnz	r3, 1cde8 <lfclk_start+0x14>
	z_impl_k_busy_wait(usec_to_wait);
   1cddc:	f44f 70a5 	mov.w	r0, #330	; 0x14a
   1cde0:	f00a fd39 	bl	27856 <z_impl_k_busy_wait>
		once = true;
   1cde4:	2301      	movs	r3, #1
   1cde6:	7023      	strb	r3, [r4, #0]
}
   1cde8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   1cdec:	2000      	movs	r0, #0
   1cdee:	f002 b85f 	b.w	1eeb0 <nrfx_clock_start>
   1cdf2:	bf00      	nop
   1cdf4:	200023f8 	.word	0x200023f8

0001cdf8 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1cdf8:	4b09      	ldr	r3, [pc, #36]	; (1ce20 <generic_hfclk_stop+0x28>)
   1cdfa:	f3bf 8f5b 	dmb	ish
   1cdfe:	e853 2f00 	ldrex	r2, [r3]
   1ce02:	f022 0102 	bic.w	r1, r2, #2
   1ce06:	e843 1000 	strex	r0, r1, [r3]
   1ce0a:	2800      	cmp	r0, #0
   1ce0c:	d1f7      	bne.n	1cdfe <generic_hfclk_stop+0x6>
   1ce0e:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   1ce12:	07d3      	lsls	r3, r2, #31
   1ce14:	d402      	bmi.n	1ce1c <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1ce16:	2001      	movs	r0, #1
   1ce18:	f002 b86c 	b.w	1eef4 <nrfx_clock_stop>
}
   1ce1c:	4770      	bx	lr
   1ce1e:	bf00      	nop
   1ce20:	200020a4 	.word	0x200020a4

0001ce24 <z_nrf_clock_control_lf_on>:
{
   1ce24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1ce28:	4946      	ldr	r1, [pc, #280]	; (1cf44 <z_nrf_clock_control_lf_on+0x120>)
   1ce2a:	f3bf 8f5b 	dmb	ish
   1ce2e:	4606      	mov	r6, r0
   1ce30:	2201      	movs	r2, #1
   1ce32:	e851 3f00 	ldrex	r3, [r1]
   1ce36:	e841 2000 	strex	r0, r2, [r1]
   1ce3a:	2800      	cmp	r0, #0
   1ce3c:	d1f9      	bne.n	1ce32 <z_nrf_clock_control_lf_on+0xe>
   1ce3e:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   1ce42:	b99b      	cbnz	r3, 1ce6c <z_nrf_clock_control_lf_on+0x48>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   1ce44:	4940      	ldr	r1, [pc, #256]	; (1cf48 <z_nrf_clock_control_lf_on+0x124>)
		err = onoff_request(mgr, &cli);
   1ce46:	4841      	ldr	r0, [pc, #260]	; (1cf4c <z_nrf_clock_control_lf_on+0x128>)
   1ce48:	604b      	str	r3, [r1, #4]
   1ce4a:	60cb      	str	r3, [r1, #12]
   1ce4c:	608a      	str	r2, [r1, #8]
   1ce4e:	f7f5 fc1f 	bl	12690 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   1ce52:	2800      	cmp	r0, #0
   1ce54:	da0a      	bge.n	1ce6c <z_nrf_clock_control_lf_on+0x48>
   1ce56:	493e      	ldr	r1, [pc, #248]	; (1cf50 <z_nrf_clock_control_lf_on+0x12c>)
   1ce58:	483e      	ldr	r0, [pc, #248]	; (1cf54 <z_nrf_clock_control_lf_on+0x130>)
   1ce5a:	f44f 7208 	mov.w	r2, #544	; 0x220
   1ce5e:	f007 fa96 	bl	2438e <assert_print>
   1ce62:	483b      	ldr	r0, [pc, #236]	; (1cf50 <z_nrf_clock_control_lf_on+0x12c>)
   1ce64:	f44f 7108 	mov.w	r1, #544	; 0x220
   1ce68:	f007 fa8a 	bl	24380 <assert_post_action>
	switch (start_mode) {
   1ce6c:	b396      	cbz	r6, 1ced4 <z_nrf_clock_control_lf_on+0xb0>
   1ce6e:	1e73      	subs	r3, r6, #1
   1ce70:	2b01      	cmp	r3, #1
   1ce72:	d853      	bhi.n	1cf1c <z_nrf_clock_control_lf_on+0xf8>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   1ce74:	2e01      	cmp	r6, #1
   1ce76:	d107      	bne.n	1ce88 <z_nrf_clock_control_lf_on+0x64>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1ce78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ce7c:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   1ce80:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   1ce84:	2b01      	cmp	r3, #1
   1ce86:	d025      	beq.n	1ced4 <z_nrf_clock_control_lf_on+0xb0>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1ce88:	f00a fbf6 	bl	27678 <k_is_in_isr>
   1ce8c:	4604      	mov	r4, r0
   1ce8e:	b918      	cbnz	r0, 1ce98 <z_nrf_clock_control_lf_on+0x74>
	return !z_sys_post_kernel;
   1ce90:	4b31      	ldr	r3, [pc, #196]	; (1cf58 <z_nrf_clock_control_lf_on+0x134>)
	int key = isr_mode ? irq_lock() : 0;
   1ce92:	781b      	ldrb	r3, [r3, #0]
   1ce94:	2b00      	cmp	r3, #0
   1ce96:	d14e      	bne.n	1cf36 <z_nrf_clock_control_lf_on+0x112>
	__asm__ volatile(
   1ce98:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ce9c:	f3ef 8711 	mrs	r7, BASEPRI
   1cea0:	f383 8812 	msr	BASEPRI_MAX, r3
   1cea4:	f3bf 8f6f 	isb	sy
   1cea8:	2401      	movs	r4, #1
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1ceaa:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 1cf5c <z_nrf_clock_control_lf_on+0x138>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1ceae:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   1ceb2:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1ceb6:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
   1ceba:	03d2      	lsls	r2, r2, #15
   1cebc:	d50c      	bpl.n	1ced8 <z_nrf_clock_control_lf_on+0xb4>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   1cebe:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1cec2:	2b01      	cmp	r3, #1
   1cec4:	d001      	beq.n	1ceca <z_nrf_clock_control_lf_on+0xa6>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   1cec6:	2e01      	cmp	r6, #1
   1cec8:	d106      	bne.n	1ced8 <z_nrf_clock_control_lf_on+0xb4>
	if (isr_mode) {
   1ceca:	b30c      	cbz	r4, 1cf10 <z_nrf_clock_control_lf_on+0xec>
	__asm__ volatile(
   1cecc:	f387 8811 	msr	BASEPRI, r7
   1ced0:	f3bf 8f6f 	isb	sy
}
   1ced4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   1ced8:	b1ac      	cbz	r4, 1cf06 <z_nrf_clock_control_lf_on+0xe2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1ceda:	4638      	mov	r0, r7
   1cedc:	f7f7 f944 	bl	14168 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   1cee0:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   1cee4:	2b00      	cmp	r3, #0
   1cee6:	d1e4      	bne.n	1ceb2 <z_nrf_clock_control_lf_on+0x8e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1cee8:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   1ceec:	2a00      	cmp	r2, #0
   1ceee:	d0e0      	beq.n	1ceb2 <z_nrf_clock_control_lf_on+0x8e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1cef0:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
   1cef4:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   1cef8:	2301      	movs	r3, #1
   1cefa:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
   1cefe:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1cf02:	60ab      	str	r3, [r5, #8]
}
   1cf04:	e7d5      	b.n	1ceb2 <z_nrf_clock_control_lf_on+0x8e>
	return z_impl_k_sleep(timeout);
   1cf06:	2100      	movs	r1, #0
   1cf08:	2021      	movs	r0, #33	; 0x21
   1cf0a:	f005 fb65 	bl	225d8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1cf0e:	e7e7      	b.n	1cee0 <z_nrf_clock_control_lf_on+0xbc>
    p_reg->INTENSET = mask;
   1cf10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1cf14:	2202      	movs	r2, #2
   1cf16:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1cf1a:	e7db      	b.n	1ced4 <z_nrf_clock_control_lf_on+0xb0>
		__ASSERT_NO_MSG(false);
   1cf1c:	490c      	ldr	r1, [pc, #48]	; (1cf50 <z_nrf_clock_control_lf_on+0x12c>)
   1cf1e:	480d      	ldr	r0, [pc, #52]	; (1cf54 <z_nrf_clock_control_lf_on+0x130>)
   1cf20:	f240 2232 	movw	r2, #562	; 0x232
   1cf24:	f007 fa33 	bl	2438e <assert_print>
}
   1cf28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		__ASSERT_NO_MSG(false);
   1cf2c:	4808      	ldr	r0, [pc, #32]	; (1cf50 <z_nrf_clock_control_lf_on+0x12c>)
   1cf2e:	f240 2132 	movw	r1, #562	; 0x232
   1cf32:	f007 ba25 	b.w	24380 <assert_post_action>
    p_reg->INTENCLR = mask;
   1cf36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1cf3a:	2202      	movs	r2, #2
   1cf3c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   1cf40:	4607      	mov	r7, r0
}
   1cf42:	e7b2      	b.n	1ceaa <z_nrf_clock_control_lf_on+0x86>
   1cf44:	200020a8 	.word	0x200020a8
   1cf48:	2000203c 	.word	0x2000203c
   1cf4c:	2000206c 	.word	0x2000206c
   1cf50:	0002aef9 	.word	0x0002aef9
   1cf54:	000289af 	.word	0x000289af
   1cf58:	20002e79 	.word	0x20002e79
   1cf5c:	e000e100 	.word	0xe000e100

0001cf60 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   1cf60:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
   1cf62:	4b08      	ldr	r3, [pc, #32]	; (1cf84 <uart_console_init+0x24>)
   1cf64:	4808      	ldr	r0, [pc, #32]	; (1cf88 <uart_console_init+0x28>)
   1cf66:	6018      	str	r0, [r3, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   1cf68:	f00a fb70 	bl	2764c <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
   1cf6c:	b138      	cbz	r0, 1cf7e <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
   1cf6e:	4807      	ldr	r0, [pc, #28]	; (1cf8c <uart_console_init+0x2c>)
   1cf70:	f7f7 fe7e 	bl	14c70 <__stdout_hook_install>
	__printk_hook_install(console_out);
   1cf74:	4805      	ldr	r0, [pc, #20]	; (1cf8c <uart_console_init+0x2c>)
   1cf76:	f7f5 f983 	bl	12280 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   1cf7a:	2000      	movs	r0, #0
}
   1cf7c:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1cf7e:	f06f 0012 	mvn.w	r0, #18
   1cf82:	e7fb      	b.n	1cf7c <uart_console_init+0x1c>
   1cf84:	200020ac 	.word	0x200020ac
   1cf88:	00027bec 	.word	0x00027bec
   1cf8c:	0001cf91 	.word	0x0001cf91

0001cf90 <console_out>:
	if ('\n' == c) {
   1cf90:	280a      	cmp	r0, #10
{
   1cf92:	b538      	push	{r3, r4, r5, lr}
   1cf94:	4d07      	ldr	r5, [pc, #28]	; (1cfb4 <console_out+0x24>)
   1cf96:	4604      	mov	r4, r0
	if ('\n' == c) {
   1cf98:	d104      	bne.n	1cfa4 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
   1cf9a:	6828      	ldr	r0, [r5, #0]
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   1cf9c:	6883      	ldr	r3, [r0, #8]
   1cf9e:	210d      	movs	r1, #13
   1cfa0:	685b      	ldr	r3, [r3, #4]
   1cfa2:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
   1cfa4:	6828      	ldr	r0, [r5, #0]
   1cfa6:	6883      	ldr	r3, [r0, #8]
   1cfa8:	b2e1      	uxtb	r1, r4
   1cfaa:	685b      	ldr	r3, [r3, #4]
   1cfac:	4798      	blx	r3
}
   1cfae:	4620      	mov	r0, r4
   1cfb0:	bd38      	pop	{r3, r4, r5, pc}
   1cfb2:	bf00      	nop
   1cfb4:	200020ac 	.word	0x200020ac

0001cfb8 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   1cfb8:	b570      	push	{r4, r5, r6, lr}
	return port->data;
   1cfba:	6905      	ldr	r5, [r0, #16]
{
   1cfbc:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   1cfbe:	460c      	mov	r4, r1
   1cfc0:	b941      	cbnz	r1, 1cfd4 <gpio_nrfx_manage_callback+0x1c>
   1cfc2:	491e      	ldr	r1, [pc, #120]	; (1d03c <gpio_nrfx_manage_callback+0x84>)
   1cfc4:	481e      	ldr	r0, [pc, #120]	; (1d040 <gpio_nrfx_manage_callback+0x88>)
   1cfc6:	2224      	movs	r2, #36	; 0x24
   1cfc8:	f007 f9e1 	bl	2438e <assert_print>
   1cfcc:	481b      	ldr	r0, [pc, #108]	; (1d03c <gpio_nrfx_manage_callback+0x84>)
   1cfce:	2124      	movs	r1, #36	; 0x24
   1cfd0:	f007 f9d6 	bl	24380 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   1cfd4:	6863      	ldr	r3, [r4, #4]
   1cfd6:	b943      	cbnz	r3, 1cfea <gpio_nrfx_manage_callback+0x32>
   1cfd8:	4918      	ldr	r1, [pc, #96]	; (1d03c <gpio_nrfx_manage_callback+0x84>)
   1cfda:	4819      	ldr	r0, [pc, #100]	; (1d040 <gpio_nrfx_manage_callback+0x88>)
   1cfdc:	2225      	movs	r2, #37	; 0x25
   1cfde:	f007 f9d6 	bl	2438e <assert_print>
   1cfe2:	4816      	ldr	r0, [pc, #88]	; (1d03c <gpio_nrfx_manage_callback+0x84>)
   1cfe4:	2125      	movs	r1, #37	; 0x25
   1cfe6:	f007 f9cb 	bl	24380 <assert_post_action>
	return list->head;
   1cfea:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
   1cfec:	b15b      	cbz	r3, 1d006 <gpio_nrfx_manage_callback+0x4e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1cfee:	2200      	movs	r2, #0
   1cff0:	429c      	cmp	r4, r3
   1cff2:	d112      	bne.n	1d01a <gpio_nrfx_manage_callback+0x62>
	return node->next;
   1cff4:	6823      	ldr	r3, [r4, #0]
	return list->tail;
   1cff6:	68a9      	ldr	r1, [r5, #8]
Z_GENLIST_REMOVE(slist, snode)
   1cff8:	b952      	cbnz	r2, 1d010 <gpio_nrfx_manage_callback+0x58>
   1cffa:	42a1      	cmp	r1, r4
	list->head = node;
   1cffc:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   1cffe:	d100      	bne.n	1d002 <gpio_nrfx_manage_callback+0x4a>
	list->tail = node;
   1d000:	60ab      	str	r3, [r5, #8]
	parent->next = child;
   1d002:	2300      	movs	r3, #0
   1d004:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   1d006:	b96e      	cbnz	r6, 1d024 <gpio_nrfx_manage_callback+0x6c>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   1d008:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
				     callback, set);
}
   1d00a:	bd70      	pop	{r4, r5, r6, pc}
   1d00c:	460b      	mov	r3, r1
   1d00e:	e7ef      	b.n	1cff0 <gpio_nrfx_manage_callback+0x38>
Z_GENLIST_REMOVE(slist, snode)
   1d010:	42a1      	cmp	r1, r4
	parent->next = child;
   1d012:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1d014:	bf08      	it	eq
   1d016:	60aa      	streq	r2, [r5, #8]
}
   1d018:	e7f3      	b.n	1d002 <gpio_nrfx_manage_callback+0x4a>
	return node->next;
   1d01a:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1d01c:	461a      	mov	r2, r3
   1d01e:	2900      	cmp	r1, #0
   1d020:	d1f4      	bne.n	1d00c <gpio_nrfx_manage_callback+0x54>
			if (!set) {
   1d022:	b13e      	cbz	r6, 1d034 <gpio_nrfx_manage_callback+0x7c>
Z_GENLIST_PREPEND(slist, snode)
   1d024:	68a8      	ldr	r0, [r5, #8]
	parent->next = child;
   1d026:	686b      	ldr	r3, [r5, #4]
   1d028:	6023      	str	r3, [r4, #0]
	list->head = node;
   1d02a:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   1d02c:	2800      	cmp	r0, #0
   1d02e:	d1eb      	bne.n	1d008 <gpio_nrfx_manage_callback+0x50>
	list->tail = node;
   1d030:	60ac      	str	r4, [r5, #8]
}
   1d032:	e7ea      	b.n	1d00a <gpio_nrfx_manage_callback+0x52>
				return -EINVAL;
   1d034:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1d038:	e7e7      	b.n	1d00a <gpio_nrfx_manage_callback+0x52>
   1d03a:	bf00      	nop
   1d03c:	0002af56 	.word	0x0002af56
   1d040:	000289af 	.word	0x000289af

0001d044 <gpio_nrfx_pin_interrupt_configure>:
{
   1d044:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	return port->config;
   1d046:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1d048:	7b05      	ldrb	r5, [r0, #12]
   1d04a:	f001 041f 	and.w	r4, r1, #31
	if (mode == GPIO_INT_MODE_DISABLED) {
   1d04e:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1d052:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   1d056:	f04f 0500 	mov.w	r5, #0
   1d05a:	d104      	bne.n	1d066 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   1d05c:	4620      	mov	r0, r4
   1d05e:	f002 fd13 	bl	1fa88 <nrfx_gpiote_trigger_disable>
	return 0;
   1d062:	2000      	movs	r0, #0
   1d064:	e04d      	b.n	1d102 <gpio_nrfx_pin_interrupt_configure+0xbe>
	if (mode == GPIO_INT_MODE_LEVEL) {
   1d066:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1d06a:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   1d06e:	d14a      	bne.n	1d106 <gpio_nrfx_pin_interrupt_configure+0xc2>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   1d070:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   1d074:	bf0c      	ite	eq
   1d076:	2304      	moveq	r3, #4
   1d078:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
   1d07a:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   1d07e:	6883      	ldr	r3, [r0, #8]
   1d080:	fa23 f101 	lsr.w	r1, r3, r1
   1d084:	07c9      	lsls	r1, r1, #31
   1d086:	d44a      	bmi.n	1d11e <gpio_nrfx_pin_interrupt_configure+0xda>
   1d088:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   1d08c:	d147      	bne.n	1d11e <gpio_nrfx_pin_interrupt_configure+0xda>
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   1d08e:	0966      	lsrs	r6, r4, #5
   1d090:	bf0c      	ite	eq
   1d092:	f04f 33ff 	moveq.w	r3, #4294967295
   1d096:	2300      	movne	r3, #0
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
   1d098:	f004 051f 	and.w	r5, r4, #31

    return (mask & (1UL << pin_number)) ? true : false;
   1d09c:	40eb      	lsrs	r3, r5
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1d09e:	07da      	lsls	r2, r3, #31
   1d0a0:	d40a      	bmi.n	1d0b8 <gpio_nrfx_pin_interrupt_configure+0x74>
   1d0a2:	4927      	ldr	r1, [pc, #156]	; (1d140 <gpio_nrfx_pin_interrupt_configure+0xfc>)
   1d0a4:	4827      	ldr	r0, [pc, #156]	; (1d144 <gpio_nrfx_pin_interrupt_configure+0x100>)
   1d0a6:	f240 2229 	movw	r2, #553	; 0x229
   1d0aa:	f007 f970 	bl	2438e <assert_print>
   1d0ae:	4824      	ldr	r0, [pc, #144]	; (1d140 <gpio_nrfx_pin_interrupt_configure+0xfc>)
   1d0b0:	f240 2129 	movw	r1, #553	; 0x229
   1d0b4:	f007 f964 	bl	24380 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1d0b8:	b156      	cbz	r6, 1d0d0 <gpio_nrfx_pin_interrupt_configure+0x8c>
            NRFX_ASSERT(0);
   1d0ba:	4921      	ldr	r1, [pc, #132]	; (1d140 <gpio_nrfx_pin_interrupt_configure+0xfc>)
   1d0bc:	4821      	ldr	r0, [pc, #132]	; (1d144 <gpio_nrfx_pin_interrupt_configure+0x100>)
   1d0be:	f240 222e 	movw	r2, #558	; 0x22e
   1d0c2:	f007 f964 	bl	2438e <assert_print>
   1d0c6:	481e      	ldr	r0, [pc, #120]	; (1d140 <gpio_nrfx_pin_interrupt_configure+0xfc>)
   1d0c8:	f240 212e 	movw	r1, #558	; 0x22e
   1d0cc:	f007 f958 	bl	24380 <assert_post_action>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1d0d0:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
   1d0d4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1d0d8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1d0dc:	07db      	lsls	r3, r3, #31
   1d0de:	d41e      	bmi.n	1d11e <gpio_nrfx_pin_interrupt_configure+0xda>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1d0e0:	f10d 0507 	add.w	r5, sp, #7
   1d0e4:	4629      	mov	r1, r5
   1d0e6:	4620      	mov	r0, r4
   1d0e8:	f002 fbfa 	bl	1f8e0 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   1d0ec:	4b16      	ldr	r3, [pc, #88]	; (1d148 <gpio_nrfx_pin_interrupt_configure+0x104>)
   1d0ee:	4298      	cmp	r0, r3
   1d0f0:	d114      	bne.n	1d11c <gpio_nrfx_pin_interrupt_configure+0xd8>
			err = nrfx_gpiote_channel_alloc(&ch);
   1d0f2:	4628      	mov	r0, r5
   1d0f4:	f002 fc54 	bl	1f9a0 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   1d0f8:	4b14      	ldr	r3, [pc, #80]	; (1d14c <gpio_nrfx_pin_interrupt_configure+0x108>)
   1d0fa:	4298      	cmp	r0, r3
   1d0fc:	d00e      	beq.n	1d11c <gpio_nrfx_pin_interrupt_configure+0xd8>
				return -ENOMEM;
   1d0fe:	f06f 000b 	mvn.w	r0, #11
}
   1d102:	b004      	add	sp, #16
   1d104:	bd70      	pop	{r4, r5, r6, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1d106:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   1d10a:	d005      	beq.n	1d118 <gpio_nrfx_pin_interrupt_configure+0xd4>
   1d10c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   1d110:	bf0c      	ite	eq
   1d112:	2302      	moveq	r3, #2
   1d114:	2301      	movne	r3, #1
   1d116:	e7b0      	b.n	1d07a <gpio_nrfx_pin_interrupt_configure+0x36>
   1d118:	2303      	movs	r3, #3
   1d11a:	e7ae      	b.n	1d07a <gpio_nrfx_pin_interrupt_configure+0x36>
		trigger_config.p_in_channel = &ch;
   1d11c:	9503      	str	r5, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1d11e:	2300      	movs	r3, #0
   1d120:	4619      	mov	r1, r3
   1d122:	aa02      	add	r2, sp, #8
   1d124:	4620      	mov	r0, r4
   1d126:	f002 fab3 	bl	1f690 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1d12a:	4b08      	ldr	r3, [pc, #32]	; (1d14c <gpio_nrfx_pin_interrupt_configure+0x108>)
   1d12c:	4298      	cmp	r0, r3
   1d12e:	d104      	bne.n	1d13a <gpio_nrfx_pin_interrupt_configure+0xf6>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   1d130:	2101      	movs	r1, #1
   1d132:	4620      	mov	r0, r4
   1d134:	f002 fc3a 	bl	1f9ac <nrfx_gpiote_trigger_enable>
   1d138:	e793      	b.n	1d062 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EIO;
   1d13a:	f06f 0004 	mvn.w	r0, #4
   1d13e:	e7e0      	b.n	1d102 <gpio_nrfx_pin_interrupt_configure+0xbe>
   1d140:	0002af83 	.word	0x0002af83
   1d144:	000289af 	.word	0x000289af
   1d148:	0bad0004 	.word	0x0bad0004
   1d14c:	0bad0000 	.word	0x0bad0000

0001d150 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1d150:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   1d152:	f002 fc15 	bl	1f980 <nrfx_gpiote_is_init>
   1d156:	4604      	mov	r4, r0
   1d158:	b968      	cbnz	r0, 1d176 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   1d15a:	f002 fbe9 	bl	1f930 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   1d15e:	4b08      	ldr	r3, [pc, #32]	; (1d180 <gpio_nrfx_init+0x30>)
   1d160:	4298      	cmp	r0, r3
   1d162:	d10a      	bne.n	1d17a <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   1d164:	4807      	ldr	r0, [pc, #28]	; (1d184 <gpio_nrfx_init+0x34>)
   1d166:	4621      	mov	r1, r4
   1d168:	f002 fbb4 	bl	1f8d4 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1d16c:	4622      	mov	r2, r4
   1d16e:	2105      	movs	r1, #5
   1d170:	2006      	movs	r0, #6
   1d172:	f7f7 f863 	bl	1423c <z_arm_irq_priority_set>
		return 0;
   1d176:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   1d178:	bd10      	pop	{r4, pc}
		return -EIO;
   1d17a:	f06f 0004 	mvn.w	r0, #4
   1d17e:	e7fb      	b.n	1d178 <gpio_nrfx_init+0x28>
   1d180:	0bad0000 	.word	0x0bad0000
   1d184:	0001d189 	.word	0x0001d189

0001d188 <nrfx_gpio_handler>:
{
   1d188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1d18c:	0943      	lsrs	r3, r0, #5
   1d18e:	d122      	bne.n	1d1d6 <nrfx_gpio_handler+0x4e>
	return list->head;
   1d190:	4b12      	ldr	r3, [pc, #72]	; (1d1dc <nrfx_gpio_handler+0x54>)
   1d192:	685c      	ldr	r4, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1d194:	b1fc      	cbz	r4, 1d1d6 <nrfx_gpio_handler+0x4e>
	gpio_fire_callbacks(list, port, BIT(pin));
   1d196:	2601      	movs	r6, #1
	return node->next;
   1d198:	6825      	ldr	r5, [r4, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   1d19a:	f8df 8044 	ldr.w	r8, [pc, #68]	; 1d1e0 <nrfx_gpio_handler+0x58>
			__ASSERT(cb->handler, "No callback handler!");
   1d19e:	4f11      	ldr	r7, [pc, #68]	; (1d1e4 <nrfx_gpio_handler+0x5c>)
   1d1a0:	f8df 9044 	ldr.w	r9, [pc, #68]	; 1d1e8 <nrfx_gpio_handler+0x60>
   1d1a4:	4086      	lsls	r6, r0
		if (cb->pin_mask & pins) {
   1d1a6:	68a3      	ldr	r3, [r4, #8]
   1d1a8:	421e      	tst	r6, r3
   1d1aa:	d010      	beq.n	1d1ce <nrfx_gpio_handler+0x46>
			__ASSERT(cb->handler, "No callback handler!");
   1d1ac:	6863      	ldr	r3, [r4, #4]
   1d1ae:	b943      	cbnz	r3, 1d1c2 <nrfx_gpio_handler+0x3a>
   1d1b0:	4639      	mov	r1, r7
   1d1b2:	4648      	mov	r0, r9
   1d1b4:	2245      	movs	r2, #69	; 0x45
   1d1b6:	f007 f8ea 	bl	2438e <assert_print>
   1d1ba:	2145      	movs	r1, #69	; 0x45
   1d1bc:	4638      	mov	r0, r7
   1d1be:	f007 f8df 	bl	24380 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
   1d1c2:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   1d1c6:	4621      	mov	r1, r4
   1d1c8:	4032      	ands	r2, r6
   1d1ca:	4640      	mov	r0, r8
   1d1cc:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1d1ce:	b115      	cbz	r5, 1d1d6 <nrfx_gpio_handler+0x4e>
   1d1d0:	462c      	mov	r4, r5
   1d1d2:	682d      	ldr	r5, [r5, #0]
   1d1d4:	e7e7      	b.n	1d1a6 <nrfx_gpio_handler+0x1e>
}
   1d1d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1d1da:	bf00      	nop
   1d1dc:	200020b0 	.word	0x200020b0
   1d1e0:	00027bbc 	.word	0x00027bbc
   1d1e4:	0002af56 	.word	0x0002af56
   1d1e8:	000289af 	.word	0x000289af

0001d1ec <gpio_nrfx_pin_configure>:
{
   1d1ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
   1d1f0:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1d1f2:	7b3b      	ldrb	r3, [r7, #12]
   1d1f4:	f001 051f 	and.w	r5, r1, #31
{
   1d1f8:	b085      	sub	sp, #20
   1d1fa:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1d1fc:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
   1d200:	4614      	mov	r4, r2
   1d202:	b9ca      	cbnz	r2, 1d238 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
   1d204:	a902      	add	r1, sp, #8
   1d206:	4628      	mov	r0, r5
   1d208:	f002 fb6a 	bl	1f8e0 <nrfx_gpiote_channel_get>
   1d20c:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
   1d20e:	4628      	mov	r0, r5
   1d210:	f002 fc64 	bl	1fadc <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
   1d214:	4b4a      	ldr	r3, [pc, #296]	; (1d340 <gpio_nrfx_pin_configure+0x154>)
   1d216:	4298      	cmp	r0, r3
   1d218:	d004      	beq.n	1d224 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
   1d21a:	f06f 0004 	mvn.w	r0, #4
}
   1d21e:	b005      	add	sp, #20
   1d220:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
   1d224:	4284      	cmp	r4, r0
   1d226:	d105      	bne.n	1d234 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
   1d228:	f89d 0008 	ldrb.w	r0, [sp, #8]
   1d22c:	f002 fbb2 	bl	1f994 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   1d230:	42a0      	cmp	r0, r4
   1d232:	d1f2      	bne.n	1d21a <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1d234:	2000      	movs	r0, #0
   1d236:	e7f2      	b.n	1d21e <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
   1d238:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
   1d23c:	f10d 0103 	add.w	r1, sp, #3
   1d240:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
   1d242:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
   1d246:	f002 fb4b 	bl	1f8e0 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1d24a:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
   1d24c:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1d24e:	aa02      	add	r2, sp, #8
   1d250:	4649      	mov	r1, r9
   1d252:	4628      	mov	r0, r5
   1d254:	f002 fa1c 	bl	1f690 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1d258:	4b39      	ldr	r3, [pc, #228]	; (1d340 <gpio_nrfx_pin_configure+0x154>)
   1d25a:	4298      	cmp	r0, r3
   1d25c:	d002      	beq.n	1d264 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
   1d25e:	f06f 0015 	mvn.w	r0, #21
   1d262:	e7dc      	b.n	1d21e <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
   1d264:	4580      	cmp	r8, r0
   1d266:	d103      	bne.n	1d270 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
   1d268:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1d26c:	f002 fb92 	bl	1f994 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   1d270:	03a3      	lsls	r3, r4, #14
   1d272:	d551      	bpl.n	1d318 <gpio_nrfx_pin_configure+0x12c>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
   1d274:	f240 6306 	movw	r3, #1542	; 0x606
   1d278:	4023      	ands	r3, r4
   1d27a:	f240 2206 	movw	r2, #518	; 0x206
   1d27e:	4293      	cmp	r3, r2
   1d280:	d03b      	beq.n	1d2fa <gpio_nrfx_pin_configure+0x10e>
   1d282:	d80c      	bhi.n	1d29e <gpio_nrfx_pin_configure+0xb2>
   1d284:	2b06      	cmp	r3, #6
   1d286:	d015      	beq.n	1d2b4 <gpio_nrfx_pin_configure+0xc8>
   1d288:	d804      	bhi.n	1d294 <gpio_nrfx_pin_configure+0xa8>
   1d28a:	b19b      	cbz	r3, 1d2b4 <gpio_nrfx_pin_configure+0xc8>
   1d28c:	2b02      	cmp	r3, #2
   1d28e:	d1e6      	bne.n	1d25e <gpio_nrfx_pin_configure+0x72>
   1d290:	2304      	movs	r3, #4
   1d292:	e00f      	b.n	1d2b4 <gpio_nrfx_pin_configure+0xc8>
   1d294:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1d298:	d1e1      	bne.n	1d25e <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
   1d29a:	2301      	movs	r3, #1
   1d29c:	e00a      	b.n	1d2b4 <gpio_nrfx_pin_configure+0xc8>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
   1d29e:	f240 4202 	movw	r2, #1026	; 0x402
   1d2a2:	4293      	cmp	r3, r2
   1d2a4:	d02b      	beq.n	1d2fe <gpio_nrfx_pin_configure+0x112>
   1d2a6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
   1d2aa:	d02a      	beq.n	1d302 <gpio_nrfx_pin_configure+0x116>
   1d2ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1d2b0:	d1d5      	bne.n	1d25e <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
   1d2b2:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
   1d2b4:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   1d2b8:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   1d2bc:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   1d2c0:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   1d2c2:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
   1d2c6:	bf54      	ite	pl
   1d2c8:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   1d2cc:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1d2ce:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   1d2d0:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1d2d4:	d517      	bpl.n	1d306 <gpio_nrfx_pin_configure+0x11a>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   1d2d6:	687b      	ldr	r3, [r7, #4]
   1d2d8:	2101      	movs	r1, #1
   1d2da:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
   1d2de:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   1d2e2:	2200      	movs	r2, #0
   1d2e4:	a901      	add	r1, sp, #4
   1d2e6:	4628      	mov	r0, r5
   1d2e8:	f002 fa80 	bl	1f7ec <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1d2ec:	4b14      	ldr	r3, [pc, #80]	; (1d340 <gpio_nrfx_pin_configure+0x154>)
   1d2ee:	4298      	cmp	r0, r3
   1d2f0:	bf14      	ite	ne
   1d2f2:	f06f 0015 	mvnne.w	r0, #21
   1d2f6:	2000      	moveq	r0, #0
   1d2f8:	e791      	b.n	1d21e <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
   1d2fa:	2307      	movs	r3, #7
   1d2fc:	e7da      	b.n	1d2b4 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_D0H1;
   1d2fe:	2305      	movs	r3, #5
   1d300:	e7d8      	b.n	1d2b4 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_H0H1;
   1d302:	2303      	movs	r3, #3
   1d304:	e7d6      	b.n	1d2b4 <gpio_nrfx_pin_configure+0xc8>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   1d306:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   1d308:	bf41      	itttt	mi
   1d30a:	687b      	ldrmi	r3, [r7, #4]
   1d30c:	2101      	movmi	r1, #1
   1d30e:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
   1d312:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
   1d316:	e7e4      	b.n	1d2e2 <gpio_nrfx_pin_configure+0xf6>
	if (flags & GPIO_PULL_UP) {
   1d318:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1d31a:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   1d31e:	bf54      	ite	pl
   1d320:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
   1d324:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1d326:	461a      	mov	r2, r3
   1d328:	a901      	add	r1, sp, #4
   1d32a:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   1d32c:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1d330:	f002 f9ae 	bl	1f690 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1d334:	4b02      	ldr	r3, [pc, #8]	; (1d340 <gpio_nrfx_pin_configure+0x154>)
   1d336:	4298      	cmp	r0, r3
   1d338:	f43f af7c 	beq.w	1d234 <gpio_nrfx_pin_configure+0x48>
   1d33c:	e78f      	b.n	1d25e <gpio_nrfx_pin_configure+0x72>
   1d33e:	bf00      	nop
   1d340:	0bad0000 	.word	0x0bad0000

0001d344 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   1d344:	4b02      	ldr	r3, [pc, #8]	; (1d350 <flash_nrf_pages_layout+0xc>)
   1d346:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   1d348:	2301      	movs	r3, #1
   1d34a:	6013      	str	r3, [r2, #0]
}
   1d34c:	4770      	bx	lr
   1d34e:	bf00      	nop
   1d350:	200020bc 	.word	0x200020bc

0001d354 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   1d354:	4800      	ldr	r0, [pc, #0]	; (1d358 <flash_nrf_get_parameters+0x4>)
   1d356:	4770      	bx	lr
   1d358:	0002855c 	.word	0x0002855c

0001d35c <flash_nrf_read>:
{
   1d35c:	b570      	push	{r4, r5, r6, lr}
   1d35e:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   1d360:	4628      	mov	r0, r5
   1d362:	4619      	mov	r1, r3
{
   1d364:	4616      	mov	r6, r2
   1d366:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   1d368:	f009 fe6e 	bl	27048 <is_regular_addr_valid>
   1d36c:	b940      	cbnz	r0, 1d380 <flash_nrf_read+0x24>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1d36e:	4809      	ldr	r0, [pc, #36]	; (1d394 <flash_nrf_read+0x38>)
   1d370:	4623      	mov	r3, r4
   1d372:	462a      	mov	r2, r5
   1d374:	2145      	movs	r1, #69	; 0x45
   1d376:	f007 f818 	bl	243aa <z_log_minimal_printk>
   1d37a:	f06f 0015 	mvn.w	r0, #21
}
   1d37e:	bd70      	pop	{r4, r5, r6, pc}
	if (!len) {
   1d380:	b134      	cbz	r4, 1d390 <flash_nrf_read+0x34>
   1d382:	4622      	mov	r2, r4
   1d384:	4629      	mov	r1, r5
   1d386:	4630      	mov	r0, r6
   1d388:	f00a fb68 	bl	27a5c <memcpy>
	return 0;
   1d38c:	2000      	movs	r0, #0
   1d38e:	e7f6      	b.n	1d37e <flash_nrf_read+0x22>
		return 0;
   1d390:	4620      	mov	r0, r4
   1d392:	e7f4      	b.n	1d37e <flash_nrf_read+0x22>
   1d394:	0002afb6 	.word	0x0002afb6

0001d398 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   1d398:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1d39a:	2201      	movs	r2, #1
   1d39c:	4611      	mov	r1, r2
   1d39e:	4807      	ldr	r0, [pc, #28]	; (1d3bc <nrf_flash_init+0x24>)
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1d3a0:	4c07      	ldr	r4, [pc, #28]	; (1d3c0 <nrf_flash_init+0x28>)
   1d3a2:	f00a f9ba 	bl	2771a <z_impl_k_sem_init>
	nrf_flash_sync_init();
   1d3a6:	f001 fe33 	bl	1f010 <nrf_flash_sync_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1d3aa:	f00a f943 	bl	27634 <nrfx_nvmc_flash_page_count_get>
   1d3ae:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   1d3b0:	f00a f93c 	bl	2762c <nrfx_nvmc_flash_page_size_get>
   1d3b4:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   1d3b6:	2000      	movs	r0, #0
   1d3b8:	bd10      	pop	{r4, pc}
   1d3ba:	bf00      	nop
   1d3bc:	200020c4 	.word	0x200020c4
   1d3c0:	200020bc 	.word	0x200020bc

0001d3c4 <flash_nrf_erase>:
{
   1d3c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d3c6:	b087      	sub	sp, #28
   1d3c8:	460e      	mov	r6, r1
   1d3ca:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1d3cc:	f00a f92e 	bl	2762c <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   1d3d0:	4629      	mov	r1, r5
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1d3d2:	4607      	mov	r7, r0
	if (is_regular_addr_valid(addr, size)) {
   1d3d4:	4630      	mov	r0, r6
   1d3d6:	f009 fe37 	bl	27048 <is_regular_addr_valid>
   1d3da:	b358      	cbz	r0, 1d434 <flash_nrf_erase+0x70>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   1d3dc:	fbb6 f3f7 	udiv	r3, r6, r7
   1d3e0:	fb07 6313 	mls	r3, r7, r3, r6
   1d3e4:	b923      	cbnz	r3, 1d3f0 <flash_nrf_erase+0x2c>
   1d3e6:	fbb5 f4f7 	udiv	r4, r5, r7
   1d3ea:	fb07 5414 	mls	r4, r7, r4, r5
   1d3ee:	b154      	cbz	r4, 1d406 <flash_nrf_erase+0x42>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   1d3f0:	481f      	ldr	r0, [pc, #124]	; (1d470 <flash_nrf_erase+0xac>)
   1d3f2:	462b      	mov	r3, r5
   1d3f4:	4632      	mov	r2, r6
   1d3f6:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1d3f8:	f006 ffd7 	bl	243aa <z_log_minimal_printk>
		return -EINVAL;
   1d3fc:	f06f 0415 	mvn.w	r4, #21
}
   1d400:	4620      	mov	r0, r4
   1d402:	b007      	add	sp, #28
   1d404:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!n_pages) {
   1d406:	42bd      	cmp	r5, r7
   1d408:	d3fa      	bcc.n	1d400 <flash_nrf_erase+0x3c>
	return z_impl_k_sem_take(sem, timeout);
   1d40a:	f04f 33ff 	mov.w	r3, #4294967295
   1d40e:	f04f 32ff 	mov.w	r2, #4294967295
   1d412:	4818      	ldr	r0, [pc, #96]	; (1d474 <flash_nrf_erase+0xb0>)
   1d414:	f003 fc7e 	bl	20d14 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   1d418:	f00a f865 	bl	274e6 <nrf_flash_sync_is_required>
   1d41c:	ab02      	add	r3, sp, #8
   1d41e:	4601      	mov	r1, r0
   1d420:	b968      	cbnz	r0, 1d43e <flash_nrf_erase+0x7a>
	return FLASH_OP_DONE;
}

static int erase(uint32_t addr, uint32_t size)
{
	struct flash_context context = {
   1d422:	2210      	movs	r2, #16
   1d424:	4618      	mov	r0, r3
   1d426:	f00a fb3a 	bl	27a9e <memset>
   1d42a:	e9cd 6503 	strd	r6, r5, [sp, #12]
#if defined(CONFIG_SOC_FLASH_NRF_PARTIAL_ERASE)
		.flash_addr_next = addr
#endif
	};

	return	erase_op(&context);
   1d42e:	f009 fde7 	bl	27000 <erase_op>
   1d432:	e017      	b.n	1d464 <flash_nrf_erase+0xa0>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1d434:	4810      	ldr	r0, [pc, #64]	; (1d478 <flash_nrf_erase+0xb4>)
   1d436:	462b      	mov	r3, r5
   1d438:	4632      	mov	r2, r6
   1d43a:	2145      	movs	r1, #69	; 0x45
   1d43c:	e7dc      	b.n	1d3f8 <flash_nrf_erase+0x34>
	struct flash_context context = {
   1d43e:	2210      	movs	r2, #16
   1d440:	4621      	mov	r1, r4
   1d442:	4618      	mov	r0, r3
   1d444:	f00a fb2b 	bl	27a9e <memset>
   1d448:	2201      	movs	r2, #1
   1d44a:	f88d 2014 	strb.w	r2, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   1d44e:	4a0b      	ldr	r2, [pc, #44]	; (1d47c <flash_nrf_erase+0xb8>)
   1d450:	e9cd 2000 	strd	r2, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   1d454:	480a      	ldr	r0, [pc, #40]	; (1d480 <flash_nrf_erase+0xbc>)
	struct flash_context context = {
   1d456:	e9cd 6503 	strd	r6, r5, [sp, #12]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   1d45a:	f001 fde1 	bl	1f020 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   1d45e:	4668      	mov	r0, sp
   1d460:	f001 fde4 	bl	1f02c <nrf_flash_sync_exe>
	return	erase_op(&context);
   1d464:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1d466:	4803      	ldr	r0, [pc, #12]	; (1d474 <flash_nrf_erase+0xb0>)
   1d468:	f003 fc1a 	bl	20ca0 <z_impl_k_sem_give>
}
   1d46c:	e7c8      	b.n	1d400 <flash_nrf_erase+0x3c>
   1d46e:	bf00      	nop
   1d470:	0002afd8 	.word	0x0002afd8
   1d474:	200020c4 	.word	0x200020c4
   1d478:	0002afb6 	.word	0x0002afb6
   1d47c:	00027001 	.word	0x00027001
   1d480:	00015e64 	.word	0x00015e64

0001d484 <write_op>:
{
   1d484:	b538      	push	{r3, r4, r5, lr}
	if (w_ctx->enable_time_limit) {
   1d486:	7b03      	ldrb	r3, [r0, #12]
{
   1d488:	4604      	mov	r4, r0
	if (w_ctx->enable_time_limit) {
   1d48a:	b10b      	cbz	r3, 1d490 <write_op+0xc>
		nrf_flash_sync_get_timestamp_begin();
   1d48c:	f00a f82d 	bl	274ea <nrf_flash_sync_get_timestamp_begin>
{
   1d490:	2501      	movs	r5, #1
	while (w_ctx->len >= sizeof(uint32_t)) {
   1d492:	68a3      	ldr	r3, [r4, #8]
   1d494:	2b03      	cmp	r3, #3
   1d496:	d806      	bhi.n	1d4a6 <write_op+0x22>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1d498:	4a12      	ldr	r2, [pc, #72]	; (1d4e4 <write_op+0x60>)
   1d49a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   1d49e:	07db      	lsls	r3, r3, #31
   1d4a0:	d5fb      	bpl.n	1d49a <write_op+0x16>
	return FLASH_OP_DONE;
   1d4a2:	2000      	movs	r0, #0
}
   1d4a4:	bd38      	pop	{r3, r4, r5, pc}
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   1d4a6:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   1d4a8:	6860      	ldr	r0, [r4, #4]
   1d4aa:	6819      	ldr	r1, [r3, #0]
   1d4ac:	f002 fc3a 	bl	1fd24 <nrfx_nvmc_word_write>
	w_ctx->flash_addr += shift;
   1d4b0:	6863      	ldr	r3, [r4, #4]
   1d4b2:	3304      	adds	r3, #4
   1d4b4:	6063      	str	r3, [r4, #4]
	w_ctx->data_addr += shift;
   1d4b6:	6823      	ldr	r3, [r4, #0]
   1d4b8:	3304      	adds	r3, #4
   1d4ba:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
   1d4bc:	68a3      	ldr	r3, [r4, #8]
   1d4be:	3b04      	subs	r3, #4
   1d4c0:	60a3      	str	r3, [r4, #8]
		if (w_ctx->enable_time_limit) {
   1d4c2:	7b23      	ldrb	r3, [r4, #12]
		i++;
   1d4c4:	3501      	adds	r5, #1
		if (w_ctx->enable_time_limit) {
   1d4c6:	2b00      	cmp	r3, #0
   1d4c8:	d0e3      	beq.n	1d492 <write_op+0xe>
			if (nrf_flash_sync_check_time_limit(i)) {
   1d4ca:	4628      	mov	r0, r5
   1d4cc:	f001 fe62 	bl	1f194 <nrf_flash_sync_check_time_limit>
   1d4d0:	2800      	cmp	r0, #0
   1d4d2:	d0de      	beq.n	1d492 <write_op+0xe>
   1d4d4:	4a03      	ldr	r2, [pc, #12]	; (1d4e4 <write_op+0x60>)
   1d4d6:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   1d4da:	07d9      	lsls	r1, r3, #31
   1d4dc:	d5fb      	bpl.n	1d4d6 <write_op+0x52>
				return FLASH_OP_ONGOING;
   1d4de:	2001      	movs	r0, #1
   1d4e0:	e7e0      	b.n	1d4a4 <write_op+0x20>
   1d4e2:	bf00      	nop
   1d4e4:	4001e000 	.word	0x4001e000

0001d4e8 <flash_nrf_write>:
{
   1d4e8:	b570      	push	{r4, r5, r6, lr}
   1d4ea:	460d      	mov	r5, r1
   1d4ec:	b086      	sub	sp, #24
	if (is_regular_addr_valid(addr, len)) {
   1d4ee:	4619      	mov	r1, r3
   1d4f0:	4628      	mov	r0, r5
{
   1d4f2:	4616      	mov	r6, r2
   1d4f4:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   1d4f6:	f009 fda7 	bl	27048 <is_regular_addr_valid>
   1d4fa:	b950      	cbnz	r0, 1d512 <flash_nrf_write+0x2a>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1d4fc:	481d      	ldr	r0, [pc, #116]	; (1d574 <flash_nrf_write+0x8c>)
   1d4fe:	4623      	mov	r3, r4
   1d500:	462a      	mov	r2, r5
   1d502:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   1d504:	f006 ff51 	bl	243aa <z_log_minimal_printk>
		return -EINVAL;
   1d508:	f06f 0415 	mvn.w	r4, #21
}
   1d50c:	4620      	mov	r0, r4
   1d50e:	b006      	add	sp, #24
   1d510:	bd70      	pop	{r4, r5, r6, pc}
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   1d512:	ea45 0304 	orr.w	r3, r5, r4
   1d516:	079b      	lsls	r3, r3, #30
   1d518:	d004      	beq.n	1d524 <flash_nrf_write+0x3c>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   1d51a:	4817      	ldr	r0, [pc, #92]	; (1d578 <flash_nrf_write+0x90>)
   1d51c:	4623      	mov	r3, r4
   1d51e:	462a      	mov	r2, r5
   1d520:	2145      	movs	r1, #69	; 0x45
   1d522:	e7ef      	b.n	1d504 <flash_nrf_write+0x1c>
	if (!len) {
   1d524:	2c00      	cmp	r4, #0
   1d526:	d0f1      	beq.n	1d50c <flash_nrf_write+0x24>
	return z_impl_k_sem_take(sem, timeout);
   1d528:	f04f 33ff 	mov.w	r3, #4294967295
   1d52c:	f04f 32ff 	mov.w	r2, #4294967295
   1d530:	4812      	ldr	r0, [pc, #72]	; (1d57c <flash_nrf_write+0x94>)
   1d532:	f003 fbef 	bl	20d14 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   1d536:	f009 ffd6 	bl	274e6 <nrf_flash_sync_is_required>
   1d53a:	4603      	mov	r3, r0
	struct flash_context context = {
   1d53c:	e9cd 6502 	strd	r6, r5, [sp, #8]
   1d540:	a802      	add	r0, sp, #8
   1d542:	9404      	str	r4, [sp, #16]
	if (nrf_flash_sync_is_required()) {
   1d544:	b18b      	cbz	r3, 1d56a <flash_nrf_write+0x82>
	struct flash_context context = {
   1d546:	2301      	movs	r3, #1
   1d548:	f88d 3014 	strb.w	r3, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   1d54c:	4b0c      	ldr	r3, [pc, #48]	; (1d580 <flash_nrf_write+0x98>)
   1d54e:	e9cd 3000 	strd	r3, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_WRITE);
   1d552:	f641 504c 	movw	r0, #7500	; 0x1d4c
   1d556:	f001 fd63 	bl	1f020 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   1d55a:	4668      	mov	r0, sp
   1d55c:	f001 fd66 	bl	1f02c <nrf_flash_sync_exe>
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
		.enable_time_limit = 0 /* disable time limit */
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	};

	return write_op(&context);
   1d560:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1d562:	4806      	ldr	r0, [pc, #24]	; (1d57c <flash_nrf_write+0x94>)
   1d564:	f003 fb9c 	bl	20ca0 <z_impl_k_sem_give>
}
   1d568:	e7d0      	b.n	1d50c <flash_nrf_write+0x24>
	struct flash_context context = {
   1d56a:	f88d 3014 	strb.w	r3, [sp, #20]
	return write_op(&context);
   1d56e:	f7ff ff89 	bl	1d484 <write_op>
   1d572:	e7f5      	b.n	1d560 <flash_nrf_write+0x78>
   1d574:	0002afb6 	.word	0x0002afb6
   1d578:	0002affc 	.word	0x0002affc
   1d57c:	200020c4 	.word	0x200020c4
   1d580:	0001d485 	.word	0x0001d485

0001d584 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   1d584:	b570      	push	{r4, r5, r6, lr}
		break;
	default:
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
   1d586:	794b      	ldrb	r3, [r1, #5]
   1d588:	2b01      	cmp	r3, #1
   1d58a:	d120      	bne.n	1d5ce <uarte_nrfx_configure+0x4a>
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1d58c:	798b      	ldrb	r3, [r1, #6]
   1d58e:	2b03      	cmp	r3, #3
   1d590:	d11d      	bne.n	1d5ce <uarte_nrfx_configure+0x4a>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   1d592:	79cc      	ldrb	r4, [r1, #7]
   1d594:	b10c      	cbz	r4, 1d59a <uarte_nrfx_configure+0x16>
   1d596:	2c01      	cmp	r4, #1
   1d598:	d119      	bne.n	1d5ce <uarte_nrfx_configure+0x4a>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   1d59a:	790a      	ldrb	r2, [r1, #4]
   1d59c:	b112      	cbz	r2, 1d5a4 <uarte_nrfx_configure+0x20>
   1d59e:	2a02      	cmp	r2, #2
   1d5a0:	d115      	bne.n	1d5ce <uarte_nrfx_configure+0x4a>
   1d5a2:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1d5a4:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1d5a6:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   1d5a8:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   1d5ac:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   1d5ae:	d062      	beq.n	1d676 <uarte_nrfx_configure+0xf2>
   1d5b0:	d82b      	bhi.n	1d60a <uarte_nrfx_configure+0x86>
   1d5b2:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1d5b6:	d061      	beq.n	1d67c <uarte_nrfx_configure+0xf8>
   1d5b8:	d814      	bhi.n	1d5e4 <uarte_nrfx_configure+0x60>
   1d5ba:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1d5be:	d05f      	beq.n	1d680 <uarte_nrfx_configure+0xfc>
   1d5c0:	d808      	bhi.n	1d5d4 <uarte_nrfx_configure+0x50>
   1d5c2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1d5c6:	d05e      	beq.n	1d686 <uarte_nrfx_configure+0x102>
   1d5c8:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1d5cc:	d05e      	beq.n	1d68c <uarte_nrfx_configure+0x108>
   1d5ce:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1d5d2:	e04f      	b.n	1d674 <uarte_nrfx_configure+0xf0>
   1d5d4:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1d5d8:	d05b      	beq.n	1d692 <uarte_nrfx_configure+0x10e>
   1d5da:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1d5de:	d1f6      	bne.n	1d5ce <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1d5e0:	4b36      	ldr	r3, [pc, #216]	; (1d6bc <uarte_nrfx_configure+0x138>)
   1d5e2:	e03c      	b.n	1d65e <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1d5e4:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1d5e8:	d056      	beq.n	1d698 <uarte_nrfx_configure+0x114>
   1d5ea:	d807      	bhi.n	1d5fc <uarte_nrfx_configure+0x78>
   1d5ec:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1d5f0:	d054      	beq.n	1d69c <uarte_nrfx_configure+0x118>
   1d5f2:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1d5f6:	d1ea      	bne.n	1d5ce <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1d5f8:	4b31      	ldr	r3, [pc, #196]	; (1d6c0 <uarte_nrfx_configure+0x13c>)
   1d5fa:	e030      	b.n	1d65e <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1d5fc:	f647 2612 	movw	r6, #31250	; 0x7a12
   1d600:	42b3      	cmp	r3, r6
   1d602:	d1e4      	bne.n	1d5ce <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1d604:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1d608:	e029      	b.n	1d65e <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1d60a:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1d60e:	d047      	beq.n	1d6a0 <uarte_nrfx_configure+0x11c>
   1d610:	d813      	bhi.n	1d63a <uarte_nrfx_configure+0xb6>
   1d612:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1d616:	d046      	beq.n	1d6a6 <uarte_nrfx_configure+0x122>
   1d618:	d809      	bhi.n	1d62e <uarte_nrfx_configure+0xaa>
   1d61a:	f64d 26c0 	movw	r6, #56000	; 0xdac0
   1d61e:	42b3      	cmp	r3, r6
   1d620:	d043      	beq.n	1d6aa <uarte_nrfx_configure+0x126>
   1d622:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1d626:	d1d2      	bne.n	1d5ce <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1d628:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1d62c:	e017      	b.n	1d65e <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1d62e:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1d632:	d1cc      	bne.n	1d5ce <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1d634:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1d638:	e011      	b.n	1d65e <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1d63a:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1d63e:	d037      	beq.n	1d6b0 <uarte_nrfx_configure+0x12c>
   1d640:	d808      	bhi.n	1d654 <uarte_nrfx_configure+0xd0>
   1d642:	4e20      	ldr	r6, [pc, #128]	; (1d6c4 <uarte_nrfx_configure+0x140>)
   1d644:	42b3      	cmp	r3, r6
   1d646:	d036      	beq.n	1d6b6 <uarte_nrfx_configure+0x132>
   1d648:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1d64c:	d1bf      	bne.n	1d5ce <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1d64e:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1d652:	e004      	b.n	1d65e <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1d654:	4e1c      	ldr	r6, [pc, #112]	; (1d6c8 <uarte_nrfx_configure+0x144>)
   1d656:	42b3      	cmp	r3, r6
   1d658:	d1b9      	bne.n	1d5ce <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1d65a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   1d65e:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1d660:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
   1d664:	1d03      	adds	r3, r0, #4
   1d666:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
   1d668:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1d66a:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   1d66e:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   1d672:	2000      	movs	r0, #0
}
   1d674:	bd70      	pop	{r4, r5, r6, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1d676:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1d67a:	e7f0      	b.n	1d65e <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1d67c:	4b13      	ldr	r3, [pc, #76]	; (1d6cc <uarte_nrfx_configure+0x148>)
   1d67e:	e7ee      	b.n	1d65e <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1d680:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1d684:	e7eb      	b.n	1d65e <uarte_nrfx_configure+0xda>
		nrf_baudrate = 0x00014000;
   1d686:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1d68a:	e7e8      	b.n	1d65e <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1d68c:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1d690:	e7e5      	b.n	1d65e <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1d692:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1d696:	e7e2      	b.n	1d65e <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1d698:	4b0d      	ldr	r3, [pc, #52]	; (1d6d0 <uarte_nrfx_configure+0x14c>)
   1d69a:	e7e0      	b.n	1d65e <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1d69c:	4b0d      	ldr	r3, [pc, #52]	; (1d6d4 <uarte_nrfx_configure+0x150>)
   1d69e:	e7de      	b.n	1d65e <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1d6a0:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1d6a4:	e7db      	b.n	1d65e <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1d6a6:	4b0c      	ldr	r3, [pc, #48]	; (1d6d8 <uarte_nrfx_configure+0x154>)
   1d6a8:	e7d9      	b.n	1d65e <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1d6aa:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1d6ae:	e7d6      	b.n	1d65e <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1d6b0:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1d6b4:	e7d3      	b.n	1d65e <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1d6b6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1d6ba:	e7d0      	b.n	1d65e <uarte_nrfx_configure+0xda>
   1d6bc:	0013b000 	.word	0x0013b000
   1d6c0:	004ea000 	.word	0x004ea000
   1d6c4:	0003d090 	.word	0x0003d090
   1d6c8:	000f4240 	.word	0x000f4240
   1d6cc:	00275000 	.word	0x00275000
   1d6d0:	0075c000 	.word	0x0075c000
   1d6d4:	003af000 	.word	0x003af000
   1d6d8:	013a9000 	.word	0x013a9000

0001d6dc <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   1d6dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1d6e0:	4607      	mov	r7, r0
   1d6e2:	2200      	movs	r2, #0
   1d6e4:	2101      	movs	r1, #1
   1d6e6:	2002      	movs	r0, #2
   1d6e8:	f7f6 fda8 	bl	1423c <z_arm_irq_priority_set>
   1d6ec:	2002      	movs	r0, #2
   1d6ee:	f7f6 fd73 	bl	141d8 <arch_irq_enable>
	const struct uarte_nrfx_config *config = dev->config;
   1d6f2:	f8d7 8004 	ldr.w	r8, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
   1d6f6:	693e      	ldr	r6, [r7, #16]
	return config->uarte_regs;
   1d6f8:	f8d8 4000 	ldr.w	r4, [r8]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   1d6fc:	f8d8 900c 	ldr.w	r9, [r8, #12]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1d700:	2100      	movs	r1, #0
   1d702:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   1d706:	aa01      	add	r2, sp, #4
	data->dev = dev;
   1d708:	6037      	str	r7, [r6, #0]
   1d70a:	4648      	mov	r0, r9
   1d70c:	f009 fd85 	bl	2721a <pinctrl_lookup_state>
	if (ret < 0) {
   1d710:	1e05      	subs	r5, r0, #0
   1d712:	db1f      	blt.n	1d754 <uarte_0_init+0x78>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   1d714:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1d716:	f8d9 2000 	ldr.w	r2, [r9]
   1d71a:	7919      	ldrb	r1, [r3, #4]
   1d71c:	6818      	ldr	r0, [r3, #0]
   1d71e:	f009 fdd3 	bl	272c8 <pinctrl_configure_pins>
	if (err < 0) {
   1d722:	1e05      	subs	r5, r0, #0
   1d724:	db16      	blt.n	1d754 <uarte_0_init+0x78>
	err = uarte_nrfx_configure(dev, &data->uart_config);
   1d726:	1d31      	adds	r1, r6, #4
   1d728:	4638      	mov	r0, r7
   1d72a:	f7ff ff2b 	bl	1d584 <uarte_nrfx_configure>
	if (err) {
   1d72e:	4605      	mov	r5, r0
   1d730:	b980      	cbnz	r0, 1d754 <uarte_0_init+0x78>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   1d732:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   1d736:	0799      	lsls	r1, r3, #30
   1d738:	d523      	bpl.n	1d782 <uarte_0_init+0xa6>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1d73a:	f106 0012 	add.w	r0, r6, #18
   1d73e:	f002 fb23 	bl	1fd88 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1d742:	4b25      	ldr	r3, [pc, #148]	; (1d7d8 <uarte_0_init+0xfc>)
   1d744:	4298      	cmp	r0, r3
   1d746:	d009      	beq.n	1d75c <uarte_0_init+0x80>
		LOG_ERR("Failed to allocate PPI Channel");
   1d748:	4824      	ldr	r0, [pc, #144]	; (1d7dc <uarte_0_init+0x100>)
   1d74a:	2145      	movs	r1, #69	; 0x45
   1d74c:	f006 fe2d 	bl	243aa <z_log_minimal_printk>
		return -EIO;
   1d750:	f06f 0504 	mvn.w	r5, #4
UART_NRF_UARTE_DEVICE(0);
   1d754:	4628      	mov	r0, r5
   1d756:	b003      	add	sp, #12
   1d758:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   1d75c:	7cb0      	ldrb	r0, [r6, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1d75e:	00c3      	lsls	r3, r0, #3
   1d760:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1d764:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   1d768:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1d76c:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1d770:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1d774:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
   1d778:	4a19      	ldr	r2, [pc, #100]	; (1d7e0 <uarte_0_init+0x104>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1d77a:	2301      	movs	r3, #1
   1d77c:	4083      	lsls	r3, r0
   1d77e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1d782:	2308      	movs	r3, #8
   1d784:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   1d788:	f898 3008 	ldrb.w	r3, [r8, #8]
   1d78c:	b95b      	cbnz	r3, 1d7a6 <uarte_0_init+0xca>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d78e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1d792:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   1d796:	f106 0311 	add.w	r3, r6, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1d79a:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1d79e:	2301      	movs	r3, #1
   1d7a0:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d7a4:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1d7a6:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1d7aa:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   1d7ac:	bf5c      	itt	pl
   1d7ae:	f44f 7280 	movpl.w	r2, #256	; 0x100
   1d7b2:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1d7b6:	06db      	lsls	r3, r3, #27
   1d7b8:	bf44      	itt	mi
   1d7ba:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   1d7be:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   1d7c2:	3610      	adds	r6, #16
    p_reg->TXD.MAXCNT = length;
   1d7c4:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1d7c6:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1d7ca:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d7ce:	2301      	movs	r3, #1
   1d7d0:	60a3      	str	r3, [r4, #8]
   1d7d2:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   1d7d4:	e7be      	b.n	1d754 <uarte_0_init+0x78>
   1d7d6:	bf00      	nop
   1d7d8:	0bad0000 	.word	0x0bad0000
   1d7dc:	0002b029 	.word	0x0002b029
   1d7e0:	4001f000 	.word	0x4001f000

0001d7e4 <uarte_nrfx_poll_out>:
{
   1d7e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
   1d7e6:	6906      	ldr	r6, [r0, #16]
{
   1d7e8:	4605      	mov	r5, r0
   1d7ea:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1d7ec:	f009 ff44 	bl	27678 <k_is_in_isr>
   1d7f0:	b910      	cbnz	r0, 1d7f8 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
   1d7f2:	4b2c      	ldr	r3, [pc, #176]	; (1d8a4 <uarte_nrfx_poll_out+0xc0>)
	if (isr_mode) {
   1d7f4:	781b      	ldrb	r3, [r3, #0]
   1d7f6:	b983      	cbnz	r3, 1d81a <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   1d7f8:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d7fc:	f3ef 8411 	mrs	r4, BASEPRI
   1d800:	f383 8812 	msr	BASEPRI_MAX, r3
   1d804:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1d808:	6868      	ldr	r0, [r5, #4]
   1d80a:	f009 fcb8 	bl	2717e <is_tx_ready.isra.0>
   1d80e:	bb28      	cbnz	r0, 1d85c <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
   1d810:	f384 8811 	msr	BASEPRI, r4
   1d814:	f3bf 8f6f 	isb	sy
}
   1d818:	e7ee      	b.n	1d7f8 <uarte_nrfx_poll_out+0x14>
{
   1d81a:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1d81c:	6868      	ldr	r0, [r5, #4]
   1d81e:	f009 fcae 	bl	2717e <is_tx_ready.isra.0>
   1d822:	b970      	cbnz	r0, 1d842 <uarte_nrfx_poll_out+0x5e>
   1d824:	2001      	movs	r0, #1
   1d826:	f009 fe70 	bl	2750a <nrfx_busy_wait>
   1d82a:	3c01      	subs	r4, #1
   1d82c:	d1f6      	bne.n	1d81c <uarte_nrfx_poll_out+0x38>
	return z_impl_k_sleep(timeout);
   1d82e:	2100      	movs	r1, #0
   1d830:	2021      	movs	r0, #33	; 0x21
   1d832:	f004 fed1 	bl	225d8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1d836:	e7f0      	b.n	1d81a <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   1d838:	f384 8811 	msr	BASEPRI, r4
   1d83c:	f3bf 8f6f 	isb	sy
}
   1d840:	e7f5      	b.n	1d82e <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
   1d842:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d846:	f3ef 8411 	mrs	r4, BASEPRI
   1d84a:	f383 8812 	msr	BASEPRI_MAX, r3
   1d84e:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1d852:	6868      	ldr	r0, [r5, #4]
   1d854:	f009 fc93 	bl	2717e <is_tx_ready.isra.0>
   1d858:	2800      	cmp	r0, #0
   1d85a:	d0ed      	beq.n	1d838 <uarte_nrfx_poll_out+0x54>
	data->char_out = c;
   1d85c:	f806 7f10 	strb.w	r7, [r6, #16]!
	tx_start(dev, &data->char_out, 1);
   1d860:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
   1d862:	680b      	ldr	r3, [r1, #0]
    p_reg->TXD.MAXCNT = length;
   1d864:	2201      	movs	r2, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1d866:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1d86a:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d86e:	2200      	movs	r2, #0
   1d870:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   1d874:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   1d878:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   1d87c:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1d880:	684a      	ldr	r2, [r1, #4]
   1d882:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1d884:	bf41      	itttt	mi
   1d886:	2208      	movmi	r2, #8
   1d888:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
   1d88c:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
   1d890:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d894:	2201      	movs	r2, #1
   1d896:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
   1d898:	f384 8811 	msr	BASEPRI, r4
   1d89c:	f3bf 8f6f 	isb	sy
}
   1d8a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d8a2:	bf00      	nop
   1d8a4:	20002e79 	.word	0x20002e79

0001d8a8 <random_byte_get>:
	__asm__ volatile(
   1d8a8:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d8ac:	f3ef 8211 	mrs	r2, BASEPRI
   1d8b0:	f383 8812 	msr	BASEPRI_MAX, r3
   1d8b4:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1d8b8:	4b09      	ldr	r3, [pc, #36]	; (1d8e0 <random_byte_get+0x38>)
   1d8ba:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1d8be:	b161      	cbz	r1, 1d8da <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1d8c0:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1d8c2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1d8c6:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   1d8ca:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   1d8ce:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   1d8d0:	f382 8811 	msr	BASEPRI, r2
   1d8d4:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   1d8d8:	4770      	bx	lr
	int retval = -EAGAIN;
   1d8da:	f06f 000a 	mvn.w	r0, #10
   1d8de:	e7f7      	b.n	1d8d0 <random_byte_get+0x28>
   1d8e0:	4000d000 	.word	0x4000d000

0001d8e4 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   1d8e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d8e6:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   1d8e8:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   1d8ea:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   1d8ec:	f04f 0040 	mov.w	r0, #64	; 0x40
   1d8f0:	f3ef 8e11 	mrs	lr, BASEPRI
   1d8f4:	f380 8812 	msr	BASEPRI_MAX, r0
   1d8f8:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   1d8fc:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1d8fe:	f893 c001 	ldrb.w	ip, [r3, #1]

	available = (last - first) & mask;
   1d902:	1ba4      	subs	r4, r4, r6
   1d904:	403c      	ands	r4, r7
	if (available < len) {
   1d906:	42a2      	cmp	r2, r4
		len = available;
   1d908:	bf88      	it	hi
   1d90a:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1d90c:	18b0      	adds	r0, r6, r2
   1d90e:	4038      	ands	r0, r7
	first = rngp->first_alloc;
   1d910:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   1d912:	7018      	strb	r0, [r3, #0]
	__asm__ volatile(
   1d914:	f38e 8811 	msr	BASEPRI, lr
   1d918:	f3bf 8f6f 	isb	sy
   1d91c:	1888      	adds	r0, r1, r2
	uint8_t *dst   = buf;
   1d91e:	460a      	mov	r2, r1
	irq_unlock(key);

	while (likely(len--)) {
   1d920:	4290      	cmp	r0, r2
   1d922:	d119      	bne.n	1d958 <rng_pool_get+0x74>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1d924:	4566      	cmp	r6, ip
   1d926:	d10d      	bne.n	1d944 <rng_pool_get+0x60>
	__asm__ volatile(
   1d928:	f04f 0540 	mov.w	r5, #64	; 0x40
   1d92c:	f3ef 8011 	mrs	r0, BASEPRI
   1d930:	f385 8812 	msr	BASEPRI_MAX, r5
   1d934:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1d938:	781d      	ldrb	r5, [r3, #0]
   1d93a:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   1d93c:	f380 8811 	msr	BASEPRI, r0
   1d940:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   1d944:	1a52      	subs	r2, r2, r1
	available = available - len;
	if (available <= rngp->threshold) {
   1d946:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   1d948:	b290      	uxth	r0, r2
	available = available - len;
   1d94a:	1a22      	subs	r2, r4, r0
	if (available <= rngp->threshold) {
   1d94c:	4293      	cmp	r3, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1d94e:	bf22      	ittt	cs
   1d950:	4b06      	ldrcs	r3, [pc, #24]	; (1d96c <rng_pool_get+0x88>)
   1d952:	2201      	movcs	r2, #1
   1d954:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   1d956:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   1d958:	eb03 0e05 	add.w	lr, r3, r5
		first = (first + 1) & mask;
   1d95c:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   1d95e:	f89e e005 	ldrb.w	lr, [lr, #5]
   1d962:	f802 eb01 	strb.w	lr, [r2], #1
		first = (first + 1) & mask;
   1d966:	403d      	ands	r5, r7
   1d968:	e7da      	b.n	1d920 <rng_pool_get+0x3c>
   1d96a:	bf00      	nop
   1d96c:	4000d000 	.word	0x4000d000

0001d970 <entropy_nrf5_get_entropy_isr>:
}

static int entropy_nrf5_get_entropy_isr(const struct device *dev,
					uint8_t *buf, uint16_t len,
					uint32_t flags)
{
   1d970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d974:	4614      	mov	r4, r2
   1d976:	461d      	mov	r5, r3
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1d978:	6902      	ldr	r2, [r0, #16]
   1d97a:	4b2c      	ldr	r3, [pc, #176]	; (1da2c <entropy_nrf5_get_entropy_isr+0xbc>)
   1d97c:	429a      	cmp	r2, r3
{
   1d97e:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1d980:	d00a      	beq.n	1d998 <entropy_nrf5_get_entropy_isr+0x28>
   1d982:	492b      	ldr	r1, [pc, #172]	; (1da30 <entropy_nrf5_get_entropy_isr+0xc0>)
   1d984:	482b      	ldr	r0, [pc, #172]	; (1da34 <entropy_nrf5_get_entropy_isr+0xc4>)
   1d986:	f240 1205 	movw	r2, #261	; 0x105
   1d98a:	f006 fd00 	bl	2438e <assert_print>
   1d98e:	4828      	ldr	r0, [pc, #160]	; (1da30 <entropy_nrf5_get_entropy_isr+0xc0>)
   1d990:	f240 1105 	movw	r1, #261	; 0x105
   1d994:	f006 fcf4 	bl	24380 <assert_post_action>

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1d998:	43eb      	mvns	r3, r5
   1d99a:	f013 0501 	ands.w	r5, r3, #1
   1d99e:	d006      	beq.n	1d9ae <entropy_nrf5_get_entropy_isr+0x3e>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1d9a0:	4825      	ldr	r0, [pc, #148]	; (1da38 <entropy_nrf5_get_entropy_isr+0xc8>)
   1d9a2:	4622      	mov	r2, r4
   1d9a4:	4631      	mov	r1, r6
   1d9a6:	f7ff ff9d 	bl	1d8e4 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   1d9aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   1d9ae:	b3a4      	cbz	r4, 1da1a <entropy_nrf5_get_entropy_isr+0xaa>
	__asm__ volatile(
   1d9b0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d9b4:	f3ef 8811 	mrs	r8, BASEPRI
   1d9b8:	f383 8812 	msr	BASEPRI_MAX, r3
   1d9bc:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   1d9c0:	200d      	movs	r0, #13
   1d9c2:	f7f6 fc2d 	bl	14220 <arch_irq_is_enabled>
   1d9c6:	4607      	mov	r7, r0
		irq_disable(IRQN);
   1d9c8:	200d      	movs	r0, #13
   1d9ca:	f7f6 fc15 	bl	141f8 <arch_irq_disable>
	__asm__ volatile(
   1d9ce:	f388 8811 	msr	BASEPRI, r8
   1d9d2:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1d9d6:	f8df 8064 	ldr.w	r8, [pc, #100]	; 1da3c <entropy_nrf5_get_entropy_isr+0xcc>
   1d9da:	f8df 9064 	ldr.w	r9, [pc, #100]	; 1da40 <entropy_nrf5_get_entropy_isr+0xd0>
   1d9de:	f8c8 5100 	str.w	r5, [r8, #256]	; 0x100
   1d9e2:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
   1d9e6:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1d9ea:	2301      	movs	r3, #1
   1d9ec:	f8c8 3000 	str.w	r3, [r8]
   1d9f0:	4625      	mov	r5, r4
   1d9f2:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1d9f6:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   1d9fa:	b183      	cbz	r3, 1da1e <entropy_nrf5_get_entropy_isr+0xae>
			byte = random_byte_get();
   1d9fc:	f7ff ff54 	bl	1d8a8 <random_byte_get>
			if (byte < 0) {
   1da00:	1e03      	subs	r3, r0, #0
   1da02:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
   1da06:	dbf6      	blt.n	1d9f6 <entropy_nrf5_get_entropy_isr+0x86>
			buf[--len] = byte;
   1da08:	3d01      	subs	r5, #1
   1da0a:	b2ad      	uxth	r5, r5
   1da0c:	5573      	strb	r3, [r6, r5]
		} while (len);
   1da0e:	2d00      	cmp	r5, #0
   1da10:	d1f1      	bne.n	1d9f6 <entropy_nrf5_get_entropy_isr+0x86>
		if (irq_enabled) {
   1da12:	b117      	cbz	r7, 1da1a <entropy_nrf5_get_entropy_isr+0xaa>
			irq_enable(IRQN);
   1da14:	200d      	movs	r0, #13
   1da16:	f7f6 fbdf 	bl	141d8 <arch_irq_enable>
	return cnt;
   1da1a:	4620      	mov	r0, r4
   1da1c:	e7c5      	b.n	1d9aa <entropy_nrf5_get_entropy_isr+0x3a>
   1da1e:	f3bf 8f4f 	dsb	sy
				__WFE();
   1da22:	bf20      	wfe
				__SEV();
   1da24:	bf40      	sev
				__WFE();
   1da26:	bf20      	wfe
   1da28:	e7e5      	b.n	1d9f6 <entropy_nrf5_get_entropy_isr+0x86>
   1da2a:	bf00      	nop
   1da2c:	200020dc 	.word	0x200020dc
   1da30:	0002b064 	.word	0x0002b064
   1da34:	000289af 	.word	0x000289af
   1da38:	2000210c 	.word	0x2000210c
   1da3c:	4000d000 	.word	0x4000d000
   1da40:	e000e100 	.word	0xe000e100

0001da44 <entropy_nrf5_get_entropy>:
{
   1da44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1da48:	4b1a      	ldr	r3, [pc, #104]	; (1dab4 <entropy_nrf5_get_entropy+0x70>)
{
   1da4a:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1da4c:	6902      	ldr	r2, [r0, #16]
   1da4e:	429a      	cmp	r2, r3
{
   1da50:	4689      	mov	r9, r1
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1da52:	d008      	beq.n	1da66 <entropy_nrf5_get_entropy+0x22>
   1da54:	4918      	ldr	r1, [pc, #96]	; (1dab8 <entropy_nrf5_get_entropy+0x74>)
   1da56:	4819      	ldr	r0, [pc, #100]	; (1dabc <entropy_nrf5_get_entropy+0x78>)
   1da58:	22e7      	movs	r2, #231	; 0xe7
   1da5a:	f006 fc98 	bl	2438e <assert_print>
   1da5e:	4816      	ldr	r0, [pc, #88]	; (1dab8 <entropy_nrf5_get_entropy+0x74>)
   1da60:	21e7      	movs	r1, #231	; 0xe7
   1da62:	f006 fc8d 	bl	24380 <assert_post_action>
	return z_impl_k_sem_take(sem, timeout);
   1da66:	4e13      	ldr	r6, [pc, #76]	; (1dab4 <entropy_nrf5_get_entropy+0x70>)
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1da68:	f106 0745 	add.w	r7, r6, #69	; 0x45
   1da6c:	f106 0818 	add.w	r8, r6, #24
	while (len) {
   1da70:	b914      	cbnz	r4, 1da78 <entropy_nrf5_get_entropy+0x34>
}
   1da72:	4620      	mov	r0, r4
   1da74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1da78:	f04f 33ff 	mov.w	r3, #4294967295
   1da7c:	f04f 32ff 	mov.w	r2, #4294967295
   1da80:	4630      	mov	r0, r6
   1da82:	f003 f947 	bl	20d14 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1da86:	4622      	mov	r2, r4
   1da88:	4649      	mov	r1, r9
   1da8a:	4638      	mov	r0, r7
   1da8c:	f7ff ff2a 	bl	1d8e4 <rng_pool_get>
   1da90:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   1da92:	4630      	mov	r0, r6
   1da94:	f003 f904 	bl	20ca0 <z_impl_k_sem_give>
		if (bytes == 0U) {
   1da98:	b93d      	cbnz	r5, 1daaa <entropy_nrf5_get_entropy+0x66>
	return z_impl_k_sem_take(sem, timeout);
   1da9a:	f04f 32ff 	mov.w	r2, #4294967295
   1da9e:	f04f 33ff 	mov.w	r3, #4294967295
   1daa2:	4640      	mov	r0, r8
   1daa4:	f003 f936 	bl	20d14 <z_impl_k_sem_take>
			continue;
   1daa8:	e7e2      	b.n	1da70 <entropy_nrf5_get_entropy+0x2c>
		len -= bytes;
   1daaa:	1b64      	subs	r4, r4, r5
   1daac:	b2a4      	uxth	r4, r4
		buf += bytes;
   1daae:	44a9      	add	r9, r5
   1dab0:	e7de      	b.n	1da70 <entropy_nrf5_get_entropy+0x2c>
   1dab2:	bf00      	nop
   1dab4:	200020dc 	.word	0x200020dc
   1dab8:	0002b064 	.word	0x0002b064
   1dabc:	000289af 	.word	0x000289af

0001dac0 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   1dac0:	b538      	push	{r3, r4, r5, lr}
	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1dac2:	4c20      	ldr	r4, [pc, #128]	; (1db44 <entropy_nrf5_init+0x84>)
   1dac4:	6903      	ldr	r3, [r0, #16]
   1dac6:	42a3      	cmp	r3, r4
   1dac8:	d00a      	beq.n	1dae0 <entropy_nrf5_init+0x20>
   1daca:	491f      	ldr	r1, [pc, #124]	; (1db48 <entropy_nrf5_init+0x88>)
   1dacc:	481f      	ldr	r0, [pc, #124]	; (1db4c <entropy_nrf5_init+0x8c>)
   1dace:	f44f 72aa 	mov.w	r2, #340	; 0x154
   1dad2:	f006 fc5c 	bl	2438e <assert_print>
   1dad6:	481c      	ldr	r0, [pc, #112]	; (1db48 <entropy_nrf5_init+0x88>)
   1dad8:	f44f 71aa 	mov.w	r1, #340	; 0x154
   1dadc:	f006 fc50 	bl	24380 <assert_post_action>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1dae0:	2201      	movs	r2, #1
   1dae2:	4611      	mov	r1, r2
   1dae4:	4817      	ldr	r0, [pc, #92]	; (1db44 <entropy_nrf5_init+0x84>)
   1dae6:	f009 fe18 	bl	2771a <z_impl_k_sem_init>
   1daea:	2201      	movs	r2, #1
   1daec:	2100      	movs	r1, #0
   1daee:	4818      	ldr	r0, [pc, #96]	; (1db50 <entropy_nrf5_init+0x90>)
   1daf0:	f009 fe13 	bl	2771a <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   1daf4:	f240 4307 	movw	r3, #1031	; 0x407
   1daf8:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   1dafc:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1db00:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   1db02:	230c      	movs	r3, #12
   1db04:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   1db08:	2500      	movs	r5, #0
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   1db0a:	4b12      	ldr	r3, [pc, #72]	; (1db54 <entropy_nrf5_init+0x94>)
   1db0c:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   1db10:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   1db14:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1db18:	f022 0201 	bic.w	r2, r2, #1
   1db1c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   1db20:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1db22:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   1db26:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   1db2a:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   1db2e:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1db30:	6019      	str	r1, [r3, #0]
   1db32:	200d      	movs	r0, #13
   1db34:	f7f6 fb82 	bl	1423c <z_arm_irq_priority_set>
	irq_enable(IRQN);
   1db38:	200d      	movs	r0, #13
   1db3a:	f7f6 fb4d 	bl	141d8 <arch_irq_enable>

	return 0;
}
   1db3e:	4628      	mov	r0, r5
   1db40:	bd38      	pop	{r3, r4, r5, pc}
   1db42:	bf00      	nop
   1db44:	200020dc 	.word	0x200020dc
   1db48:	0002b064 	.word	0x0002b064
   1db4c:	000289af 	.word	0x000289af
   1db50:	200020f4 	.word	0x200020f4
   1db54:	4000d000 	.word	0x4000d000

0001db58 <isr>:
{
   1db58:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1db5a:	f7ff fea5 	bl	1d8a8 <random_byte_get>
	if (byte < 0) {
   1db5e:	2800      	cmp	r0, #0
   1db60:	db20      	blt.n	1dba4 <isr+0x4c>
	uint8_t last  = rngp->last;
   1db62:	4b17      	ldr	r3, [pc, #92]	; (1dbc0 <isr+0x68>)
   1db64:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   1db68:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   1db6c:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   1db70:	1a51      	subs	r1, r2, r1
   1db72:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1db76:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   1db78:	d10d      	bne.n	1db96 <isr+0x3e>
	uint8_t last  = rngp->last;
   1db7a:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   1db7e:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   1db82:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   1db86:	1a51      	subs	r1, r2, r1
   1db88:	ea34 0101 	bics.w	r1, r4, r1
   1db8c:	d10b      	bne.n	1dba6 <isr+0x4e>
   1db8e:	4b0d      	ldr	r3, [pc, #52]	; (1dbc4 <isr+0x6c>)
   1db90:	2201      	movs	r2, #1
   1db92:	605a      	str	r2, [r3, #4]
}
   1db94:	e00e      	b.n	1dbb4 <isr+0x5c>
	rngp->buffer[last] = byte;
   1db96:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1db98:	3201      	adds	r2, #1
   1db9a:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1db9c:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   1dba0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   1dba4:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   1dba6:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1dba8:	3201      	adds	r2, #1
   1dbaa:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1dbac:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   1dbb0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   1dbb4:	4804      	ldr	r0, [pc, #16]	; (1dbc8 <isr+0x70>)
}
   1dbb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1dbba:	f003 b871 	b.w	20ca0 <z_impl_k_sem_give>
   1dbbe:	bf00      	nop
   1dbc0:	200020dc 	.word	0x200020dc
   1dbc4:	4000d000 	.word	0x4000d000
   1dbc8:	200020f4 	.word	0x200020f4

0001dbcc <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
   1dbcc:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1dbce:	2301      	movs	r3, #1
   1dbd0:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1dbd2:	4a11      	ldr	r2, [pc, #68]	; (1dc18 <compare_int_lock+0x4c>)
   1dbd4:	f3bf 8f5b 	dmb	ish
   1dbd8:	43dc      	mvns	r4, r3
   1dbda:	e852 1f00 	ldrex	r1, [r2]
   1dbde:	ea01 0c04 	and.w	ip, r1, r4
   1dbe2:	e842 ce00 	strex	lr, ip, [r2]
   1dbe6:	f1be 0f00 	cmp.w	lr, #0
   1dbea:	d1f6      	bne.n	1dbda <compare_int_lock+0xe>
   1dbec:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1dbf0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1dbf4:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   1dbf8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1dbfc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   1dc00:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   1dc04:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1dc08:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   1dc0c:	420b      	tst	r3, r1
}
   1dc0e:	bf14      	ite	ne
   1dc10:	2001      	movne	r0, #1
   1dc12:	2000      	moveq	r0, #0
   1dc14:	bd10      	pop	{r4, pc}
   1dc16:	bf00      	nop
   1dc18:	20002134 	.word	0x20002134

0001dc1c <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1dc1c:	4919      	ldr	r1, [pc, #100]	; (1dc84 <sys_clock_timeout_handler+0x68>)
{
   1dc1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1dc20:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   1dc22:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1dc26:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   1dc28:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   1dc2c:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1dc30:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   1dc32:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   1dc36:	d222      	bcs.n	1dc7e <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   1dc38:	4b13      	ldr	r3, [pc, #76]	; (1dc88 <sys_clock_timeout_handler+0x6c>)
   1dc3a:	681b      	ldr	r3, [r3, #0]
   1dc3c:	0a1a      	lsrs	r2, r3, #8
   1dc3e:	061b      	lsls	r3, r3, #24
   1dc40:	195e      	adds	r6, r3, r5
   1dc42:	4b12      	ldr	r3, [pc, #72]	; (1dc8c <sys_clock_timeout_handler+0x70>)
   1dc44:	f142 0700 	adc.w	r7, r2, #0
   1dc48:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
   1dc4c:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   1dc4e:	f004 ffa7 	bl	22ba0 <sys_clock_announce>
    return p_reg->CC[ch];
   1dc52:	00a3      	lsls	r3, r4, #2
   1dc54:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1dc58:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   1dc5c:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   1dc60:	42aa      	cmp	r2, r5
   1dc62:	d10b      	bne.n	1dc7c <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
   1dc64:	b91e      	cbnz	r6, 1dc6e <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
   1dc66:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   1dc6a:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1dc6e:	4b08      	ldr	r3, [pc, #32]	; (1dc90 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1dc70:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   1dc74:	fa00 f404 	lsl.w	r4, r0, r4
   1dc78:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   1dc7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
   1dc7e:	2600      	movs	r6, #0
   1dc80:	e7e5      	b.n	1dc4e <sys_clock_timeout_handler+0x32>
   1dc82:	bf00      	nop
   1dc84:	20001af0 	.word	0x20001af0
   1dc88:	20002138 	.word	0x20002138
   1dc8c:	20001ad8 	.word	0x20001ad8
   1dc90:	40011000 	.word	0x40011000

0001dc94 <compare_int_unlock>:
	if (key) {
   1dc94:	b319      	cbz	r1, 1dcde <compare_int_unlock+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1dc96:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
   1dc9a:	2301      	movs	r3, #1
   1dc9c:	4a10      	ldr	r2, [pc, #64]	; (1dce0 <compare_int_unlock+0x4c>)
   1dc9e:	4083      	lsls	r3, r0
   1dca0:	e852 1f00 	ldrex	r1, [r2]
   1dca4:	4319      	orrs	r1, r3
   1dca6:	e842 1c00 	strex	ip, r1, [r2]
   1dcaa:	f1bc 0f00 	cmp.w	ip, #0
   1dcae:	d1f7      	bne.n	1dca0 <compare_int_unlock+0xc>
   1dcb0:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   1dcb4:	4a0b      	ldr	r2, [pc, #44]	; (1dce4 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1dcb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1dcba:	4083      	lsls	r3, r0
   1dcbc:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1dcc0:	4b09      	ldr	r3, [pc, #36]	; (1dce8 <compare_int_unlock+0x54>)
   1dcc2:	f3bf 8f5b 	dmb	ish
   1dcc6:	681b      	ldr	r3, [r3, #0]
   1dcc8:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   1dccc:	fa23 f000 	lsr.w	r0, r3, r0
   1dcd0:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1dcd2:	bf42      	ittt	mi
   1dcd4:	4b05      	ldrmi	r3, [pc, #20]	; (1dcec <compare_int_unlock+0x58>)
   1dcd6:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   1dcda:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   1dcde:	4770      	bx	lr
   1dce0:	20002134 	.word	0x20002134
   1dce4:	40011000 	.word	0x40011000
   1dce8:	20002130 	.word	0x20002130
   1dcec:	e000e100 	.word	0xe000e100

0001dcf0 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   1dcf0:	4b0d      	ldr	r3, [pc, #52]	; (1dd28 <z_nrf_rtc_timer_read+0x38>)
   1dcf2:	6818      	ldr	r0, [r3, #0]
   1dcf4:	0a01      	lsrs	r1, r0, #8
   1dcf6:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   1dcf8:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   1dcfc:	4b0b      	ldr	r3, [pc, #44]	; (1dd2c <z_nrf_rtc_timer_read+0x3c>)
   1dcfe:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   1dd02:	1818      	adds	r0, r3, r0
   1dd04:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   1dd08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1dd0c:	d20a      	bcs.n	1dd24 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   1dd0e:	4b08      	ldr	r3, [pc, #32]	; (1dd30 <z_nrf_rtc_timer_read+0x40>)
   1dd10:	e9d3 2300 	ldrd	r2, r3, [r3]
   1dd14:	4290      	cmp	r0, r2
   1dd16:	eb71 0303 	sbcs.w	r3, r1, r3
   1dd1a:	d203      	bcs.n	1dd24 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   1dd1c:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   1dd20:	f141 0100 	adc.w	r1, r1, #0
}
   1dd24:	4770      	bx	lr
   1dd26:	bf00      	nop
   1dd28:	20002138 	.word	0x20002138
   1dd2c:	40011000 	.word	0x40011000
   1dd30:	20001ad8 	.word	0x20001ad8

0001dd34 <compare_set>:
{
   1dd34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dd38:	b085      	sub	sp, #20
   1dd3a:	4616      	mov	r6, r2
   1dd3c:	4698      	mov	r8, r3
   1dd3e:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
   1dd40:	f7ff ff44 	bl	1dbcc <compare_int_lock>
   1dd44:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   1dd46:	f7ff ffd3 	bl	1dcf0 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   1dd4a:	42b0      	cmp	r0, r6
   1dd4c:	eb71 0308 	sbcs.w	r3, r1, r8
   1dd50:	d278      	bcs.n	1de44 <compare_set+0x110>
		if (target_time - curr_time > COUNTER_SPAN) {
   1dd52:	4b46      	ldr	r3, [pc, #280]	; (1de6c <compare_set+0x138>)
   1dd54:	1a30      	subs	r0, r6, r0
   1dd56:	eb68 0101 	sbc.w	r1, r8, r1
   1dd5a:	4298      	cmp	r0, r3
   1dd5c:	f171 0300 	sbcs.w	r3, r1, #0
   1dd60:	f080 8081 	bcs.w	1de66 <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
   1dd64:	4b42      	ldr	r3, [pc, #264]	; (1de70 <compare_set+0x13c>)
   1dd66:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   1dd6a:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
   1dd6e:	45d8      	cmp	r8, fp
   1dd70:	bf08      	it	eq
   1dd72:	4556      	cmpeq	r6, sl
   1dd74:	d051      	beq.n	1de1a <compare_set+0xe6>
   1dd76:	ea4f 0985 	mov.w	r9, r5, lsl #2
   1dd7a:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1dd7e:	f105 0750 	add.w	r7, r5, #80	; 0x50
   1dd82:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
   1dd86:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1dd88:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   1dd8c:	fa01 f305 	lsl.w	r3, r1, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1dd90:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
   1dd92:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
   1dd96:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1dd9a:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
   1dd9c:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   1dda0:	4b34      	ldr	r3, [pc, #208]	; (1de74 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1dda2:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   1dda6:	4614      	mov	r4, r2
     return p_reg->COUNTER;
   1dda8:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1ddac:	1a40      	subs	r0, r0, r1
   1ddae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1ddb2:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   1ddb6:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   1ddb8:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
   1ddbc:	d107      	bne.n	1ddce <compare_set+0x9a>
   1ddbe:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
   1ddc2:	2013      	movs	r0, #19
   1ddc4:	f009 fd47 	bl	27856 <z_impl_k_busy_wait>
   1ddc8:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   1ddcc:	4b29      	ldr	r3, [pc, #164]	; (1de74 <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   1ddce:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
   1ddd2:	eba4 000c 	sub.w	r0, r4, ip
   1ddd6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
   1ddda:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1ddde:	bf88      	it	hi
   1dde0:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1dde2:	2000      	movs	r0, #0
   1dde4:	6038      	str	r0, [r7, #0]
   1dde6:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
   1dde8:	9801      	ldr	r0, [sp, #4]
   1ddea:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1ddee:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   1ddf2:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   1ddf6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   1ddfa:	4281      	cmp	r1, r0
   1ddfc:	d006      	beq.n	1de0c <compare_set+0xd8>
	return (a - b) & COUNTER_MAX;
   1ddfe:	1a20      	subs	r0, r4, r0
   1de00:	3802      	subs	r0, #2
   1de02:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   1de06:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1de0a:	d819      	bhi.n	1de40 <compare_set+0x10c>
	return (a - b) & COUNTER_MAX;
   1de0c:	1aa4      	subs	r4, r4, r2
   1de0e:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   1de12:	eb14 0a06 	adds.w	sl, r4, r6
   1de16:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
   1de1a:	4915      	ldr	r1, [pc, #84]	; (1de70 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
   1de1c:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
   1de1e:	012b      	lsls	r3, r5, #4
   1de20:	eb01 1205 	add.w	r2, r1, r5, lsl #4
   1de24:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
   1de28:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   1de2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1de2c:	6053      	str	r3, [r2, #4]
	return ret;
   1de2e:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
   1de30:	4628      	mov	r0, r5
   1de32:	9900      	ldr	r1, [sp, #0]
   1de34:	f7ff ff2e 	bl	1dc94 <compare_int_unlock>
}
   1de38:	4620      	mov	r0, r4
   1de3a:	b005      	add	sp, #20
   1de3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1de40:	4620      	mov	r0, r4
   1de42:	e7b1      	b.n	1dda8 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
   1de44:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1de46:	4a0c      	ldr	r2, [pc, #48]	; (1de78 <compare_set+0x144>)
   1de48:	f3bf 8f5b 	dmb	ish
   1de4c:	40ab      	lsls	r3, r5
   1de4e:	e852 1f00 	ldrex	r1, [r2]
   1de52:	4319      	orrs	r1, r3
   1de54:	e842 1000 	strex	r0, r1, [r2]
   1de58:	2800      	cmp	r0, #0
   1de5a:	d1f8      	bne.n	1de4e <compare_set+0x11a>
   1de5c:	f3bf 8f5b 	dmb	ish
   1de60:	46b2      	mov	sl, r6
   1de62:	46c3      	mov	fp, r8
   1de64:	e7d9      	b.n	1de1a <compare_set+0xe6>
			return -EINVAL;
   1de66:	f06f 0415 	mvn.w	r4, #21
   1de6a:	e7e1      	b.n	1de30 <compare_set+0xfc>
   1de6c:	01000001 	.word	0x01000001
   1de70:	20001ae0 	.word	0x20001ae0
   1de74:	40011000 	.word	0x40011000
   1de78:	20002130 	.word	0x20002130

0001de7c <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   1de7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   1de7e:	4b19      	ldr	r3, [pc, #100]	; (1dee4 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
   1de80:	4d19      	ldr	r5, [pc, #100]	; (1dee8 <sys_clock_driver_init+0x6c>)
   1de82:	2400      	movs	r4, #0
   1de84:	f04f 30ff 	mov.w	r0, #4294967295
   1de88:	f04f 31ff 	mov.w	r1, #4294967295
   1de8c:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   1de90:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   1de94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1de98:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1de9c:	4b13      	ldr	r3, [pc, #76]	; (1deec <sys_clock_driver_init+0x70>)
   1de9e:	2602      	movs	r6, #2
   1dea0:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1dea4:	2101      	movs	r1, #1
   1dea6:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   1deaa:	2011      	movs	r0, #17
   1deac:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1deb0:	4622      	mov	r2, r4
   1deb2:	f7f6 f9c3 	bl	1423c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1deb6:	2011      	movs	r0, #17
   1deb8:	f7f6 f98e 	bl	141d8 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   1debc:	4a0c      	ldr	r2, [pc, #48]	; (1def0 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1debe:	2301      	movs	r3, #1
   1dec0:	60ab      	str	r3, [r5, #8]
   1dec2:	602b      	str	r3, [r5, #0]
   1dec4:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1dec6:	4b0b      	ldr	r3, [pc, #44]	; (1def4 <sys_clock_driver_init+0x78>)
   1dec8:	4a0b      	ldr	r2, [pc, #44]	; (1def8 <sys_clock_driver_init+0x7c>)
   1deca:	9300      	str	r3, [sp, #0]
   1decc:	9401      	str	r4, [sp, #4]
   1dece:	2300      	movs	r3, #0
   1ded0:	4620      	mov	r0, r4
   1ded2:	f7ff ff2f 	bl	1dd34 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   1ded6:	4630      	mov	r0, r6
   1ded8:	f7fe ffa4 	bl	1ce24 <z_nrf_clock_control_lf_on>

	return 0;
}
   1dedc:	4620      	mov	r0, r4
   1dede:	b002      	add	sp, #8
   1dee0:	bd70      	pop	{r4, r5, r6, pc}
   1dee2:	bf00      	nop
   1dee4:	20001ae0 	.word	0x20001ae0
   1dee8:	40011000 	.word	0x40011000
   1deec:	e000e100 	.word	0xe000e100
   1def0:	20002134 	.word	0x20002134
   1def4:	0001dc1d 	.word	0x0001dc1d
   1def8:	007fffff 	.word	0x007fffff

0001defc <rtc_nrf_isr>:
{
   1defc:	e92d 4df3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, sl, fp, lr}
    return p_reg->INTENSET & mask;
   1df00:	4c2c      	ldr	r4, [pc, #176]	; (1dfb4 <rtc_nrf_isr+0xb8>)
   1df02:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   1df06:	0799      	lsls	r1, r3, #30
   1df08:	d50b      	bpl.n	1df22 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1df0a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1df0e:	b143      	cbz	r3, 1df22 <rtc_nrf_isr+0x26>
		overflow_cnt++;
   1df10:	4a29      	ldr	r2, [pc, #164]	; (1dfb8 <rtc_nrf_isr+0xbc>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1df12:	2300      	movs	r3, #0
   1df14:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   1df18:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1df1c:	6813      	ldr	r3, [r2, #0]
   1df1e:	3301      	adds	r3, #1
   1df20:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1df22:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1df26:	b672      	cpsid	i
    return p_reg->INTENSET & mask;
   1df28:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   1df2c:	03d2      	lsls	r2, r2, #15
   1df2e:	d52d      	bpl.n	1df8c <rtc_nrf_isr+0x90>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1df30:	f3bf 8f5b 	dmb	ish
   1df34:	4a21      	ldr	r2, [pc, #132]	; (1dfbc <rtc_nrf_isr+0xc0>)
   1df36:	e852 1f00 	ldrex	r1, [r2]
   1df3a:	f021 0001 	bic.w	r0, r1, #1
   1df3e:	e842 0500 	strex	r5, r0, [r2]
   1df42:	2d00      	cmp	r5, #0
   1df44:	d1f7      	bne.n	1df36 <rtc_nrf_isr+0x3a>
   1df46:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   1df4a:	b911      	cbnz	r1, 1df52 <rtc_nrf_isr+0x56>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1df4c:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
		if (result) {
   1df50:	b1e2      	cbz	r2, 1df8c <rtc_nrf_isr+0x90>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1df52:	2500      	movs	r5, #0
   1df54:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   1df58:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1df5c:	f383 8810 	msr	PRIMASK, r3
		curr_time = z_nrf_rtc_timer_read();
   1df60:	f7ff fec6 	bl	1dcf0 <z_nrf_rtc_timer_read>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1df64:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1df68:	b672      	cpsid	i
		expire_time = cc_data[chan].target_time;
   1df6a:	4b15      	ldr	r3, [pc, #84]	; (1dfc0 <rtc_nrf_isr+0xc4>)
   1df6c:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   1df70:	42b0      	cmp	r0, r6
   1df72:	41b9      	sbcs	r1, r7
   1df74:	d20f      	bcs.n	1df96 <rtc_nrf_isr+0x9a>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   1df76:	4629      	mov	r1, r5
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1df78:	f382 8810 	msr	PRIMASK, r2
		if (handler) {
   1df7c:	b141      	cbz	r1, 1df90 <rtc_nrf_isr+0x94>
			handler(chan, expire_time, user_context);
   1df7e:	f8cd 8000 	str.w	r8, [sp]
   1df82:	4632      	mov	r2, r6
   1df84:	463b      	mov	r3, r7
   1df86:	2000      	movs	r0, #0
   1df88:	4788      	blx	r1
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1df8a:	e001      	b.n	1df90 <rtc_nrf_isr+0x94>
   1df8c:	f383 8810 	msr	PRIMASK, r3
}
   1df90:	b002      	add	sp, #8
   1df92:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1df96:	f04f 3aff 	mov.w	sl, #4294967295
   1df9a:	f04f 3bff 	mov.w	fp, #4294967295
			user_context = cc_data[chan].user_context;
   1df9e:	e9d3 1800 	ldrd	r1, r8, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1dfa2:	e9c3 ab02 	strd	sl, fp, [r3, #8]
			cc_data[chan].callback = NULL;
   1dfa6:	601d      	str	r5, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   1dfa8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1dfac:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
}
   1dfb0:	e7e2      	b.n	1df78 <rtc_nrf_isr+0x7c>
   1dfb2:	bf00      	nop
   1dfb4:	40011000 	.word	0x40011000
   1dfb8:	20002138 	.word	0x20002138
   1dfbc:	20002130 	.word	0x20002130
   1dfc0:	20001ae0 	.word	0x20001ae0

0001dfc4 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1dfc4:	1c43      	adds	r3, r0, #1
{
   1dfc6:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1dfc8:	d021      	beq.n	1e00e <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1dfca:	2801      	cmp	r0, #1
   1dfcc:	dd21      	ble.n	1e012 <sys_clock_set_timeout+0x4e>
   1dfce:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1dfd2:	da20      	bge.n	1e016 <sys_clock_set_timeout+0x52>
   1dfd4:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1dfd6:	f7ff fe8b 	bl	1dcf0 <z_nrf_rtc_timer_read>
   1dfda:	4b10      	ldr	r3, [pc, #64]	; (1e01c <sys_clock_set_timeout+0x58>)
   1dfdc:	e9d3 1300 	ldrd	r1, r3, [r3]
   1dfe0:	1a40      	subs	r0, r0, r1
		ticks = 0;
   1dfe2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1dfe6:	bf28      	it	cs
   1dfe8:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   1dfea:	3001      	adds	r0, #1
   1dfec:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
   1dfee:	480c      	ldr	r0, [pc, #48]	; (1e020 <sys_clock_set_timeout+0x5c>)
   1dff0:	4282      	cmp	r2, r0
   1dff2:	bf28      	it	cs
   1dff4:	4602      	movcs	r2, r0
   1dff6:	1852      	adds	r2, r2, r1
   1dff8:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1dffc:	4909      	ldr	r1, [pc, #36]	; (1e024 <sys_clock_set_timeout+0x60>)
   1dffe:	9001      	str	r0, [sp, #4]
   1e000:	9100      	str	r1, [sp, #0]
   1e002:	f143 0300 	adc.w	r3, r3, #0
   1e006:	f7ff fe95 	bl	1dd34 <compare_set>
}
   1e00a:	b002      	add	sp, #8
   1e00c:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1e00e:	4804      	ldr	r0, [pc, #16]	; (1e020 <sys_clock_set_timeout+0x5c>)
   1e010:	e7e0      	b.n	1dfd4 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1e012:	2400      	movs	r4, #0
   1e014:	e7df      	b.n	1dfd6 <sys_clock_set_timeout+0x12>
   1e016:	4c02      	ldr	r4, [pc, #8]	; (1e020 <sys_clock_set_timeout+0x5c>)
   1e018:	e7dd      	b.n	1dfd6 <sys_clock_set_timeout+0x12>
   1e01a:	bf00      	nop
   1e01c:	20001af0 	.word	0x20001af0
   1e020:	007fffff 	.word	0x007fffff
   1e024:	0001dc1d 	.word	0x0001dc1d

0001e028 <sys_clock_elapsed>:
{
   1e028:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   1e02a:	f7ff fe61 	bl	1dcf0 <z_nrf_rtc_timer_read>
   1e02e:	4b02      	ldr	r3, [pc, #8]	; (1e038 <sys_clock_elapsed+0x10>)
   1e030:	681b      	ldr	r3, [r3, #0]
}
   1e032:	1ac0      	subs	r0, r0, r3
   1e034:	bd08      	pop	{r3, pc}
   1e036:	bf00      	nop
   1e038:	20001af0 	.word	0x20001af0

0001e03c <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1e03c:	6803      	ldr	r3, [r0, #0]
    switch (port)
   1e03e:	095a      	lsrs	r2, r3, #5
   1e040:	bf0c      	ite	eq
   1e042:	f04f 32ff 	moveq.w	r2, #4294967295
   1e046:	2200      	movne	r2, #0
    pin_number &= 0x1F;
   1e048:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1e04c:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1e050:	07db      	lsls	r3, r3, #31
{
   1e052:	b510      	push	{r4, lr}
   1e054:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1e056:	d40a      	bmi.n	1e06e <nrf_gpio_pin_port_decode+0x32>
   1e058:	490f      	ldr	r1, [pc, #60]	; (1e098 <nrf_gpio_pin_port_decode+0x5c>)
   1e05a:	4810      	ldr	r0, [pc, #64]	; (1e09c <nrf_gpio_pin_port_decode+0x60>)
   1e05c:	f240 2229 	movw	r2, #553	; 0x229
   1e060:	f006 f995 	bl	2438e <assert_print>
   1e064:	480c      	ldr	r0, [pc, #48]	; (1e098 <nrf_gpio_pin_port_decode+0x5c>)
   1e066:	f240 2129 	movw	r1, #553	; 0x229
   1e06a:	f006 f989 	bl	24380 <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
   1e06e:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   1e070:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1e074:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   1e076:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1e078:	d00a      	beq.n	1e090 <nrf_gpio_pin_port_decode+0x54>
            NRFX_ASSERT(0);
   1e07a:	4907      	ldr	r1, [pc, #28]	; (1e098 <nrf_gpio_pin_port_decode+0x5c>)
   1e07c:	4807      	ldr	r0, [pc, #28]	; (1e09c <nrf_gpio_pin_port_decode+0x60>)
   1e07e:	f240 222e 	movw	r2, #558	; 0x22e
   1e082:	f006 f984 	bl	2438e <assert_print>
   1e086:	4804      	ldr	r0, [pc, #16]	; (1e098 <nrf_gpio_pin_port_decode+0x5c>)
   1e088:	f240 212e 	movw	r1, #558	; 0x22e
   1e08c:	f006 f978 	bl	24380 <assert_post_action>
}
   1e090:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   1e094:	bd10      	pop	{r4, pc}
   1e096:	bf00      	nop
   1e098:	0002af83 	.word	0x0002af83
   1e09c:	000289af 	.word	0x000289af

0001e0a0 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   1e0a0:	4602      	mov	r2, r0
   1e0a2:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   1e0a4:	4801      	ldr	r0, [pc, #4]	; (1e0ac <multithreading_lock_acquire+0xc>)
   1e0a6:	f002 bb5b 	b.w	20760 <z_impl_k_mutex_lock>
   1e0aa:	bf00      	nop
   1e0ac:	2000087c 	.word	0x2000087c

0001e0b0 <multithreading_lock_release>:
	return z_impl_k_mutex_unlock(mutex);
   1e0b0:	4801      	ldr	r0, [pc, #4]	; (1e0b8 <multithreading_lock_release+0x8>)
   1e0b2:	f002 bc27 	b.w	20904 <z_impl_k_mutex_unlock>
   1e0b6:	bf00      	nop
   1e0b8:	2000087c 	.word	0x2000087c

0001e0bc <k_sys_fatal_error_handler>:
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   1e0bc:	4803      	ldr	r0, [pc, #12]	; (1e0cc <k_sys_fatal_error_handler+0x10>)
{
   1e0be:	b508      	push	{r3, lr}
		LOG_ERR("Resetting system");
   1e0c0:	2145      	movs	r1, #69	; 0x45
   1e0c2:	f006 f972 	bl	243aa <z_log_minimal_printk>
		sys_arch_reboot(0);
   1e0c6:	2000      	movs	r0, #0
   1e0c8:	f7f6 fe16 	bl	14cf8 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   1e0cc:	0002b0ae 	.word	0x0002b0ae

0001e0d0 <sdc_assertion_handler>:
	bt_ctlr_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_BT_CTLR_ASSERT_HANDLER) */
void sdc_assertion_handler(const char *const file, const uint32_t line)
{
   1e0d0:	b508      	push	{r3, lr}
   1e0d2:	4602      	mov	r2, r0
   1e0d4:	460b      	mov	r3, r1
	BT_ERR("SoftDevice Controller ASSERT: %s, %d", log_strdup(file), line);
   1e0d6:	4805      	ldr	r0, [pc, #20]	; (1e0ec <sdc_assertion_handler+0x1c>)
   1e0d8:	2145      	movs	r1, #69	; 0x45
   1e0da:	f006 f966 	bl	243aa <z_log_minimal_printk>
	k_oops();
   1e0de:	4040      	eors	r0, r0
   1e0e0:	f380 8811 	msr	BASEPRI, r0
   1e0e4:	f04f 0003 	mov.w	r0, #3
   1e0e8:	df02      	svc	2
}
   1e0ea:	bd08      	pop	{r3, pc}
   1e0ec:	0002b0d0 	.word	0x0002b0d0

0001e0f0 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   1e0f0:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   1e0f2:	4804      	ldr	r0, [pc, #16]	; (1e104 <hci_driver_init+0x14>)
   1e0f4:	f7f8 f82a 	bl	1614c <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
	return err;
}
   1e0f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	err = sdc_init(sdc_assertion_handler);
   1e0fc:	4802      	ldr	r0, [pc, #8]	; (1e108 <hci_driver_init+0x18>)
   1e0fe:	f7e6 bfed 	b.w	50dc <sdc_init>
   1e102:	bf00      	nop
   1e104:	000285b4 	.word	0x000285b4
   1e108:	0001e0d1 	.word	0x0001e0d1

0001e10c <rand_prio_low_vector_get_blocking>:
{
   1e10c:	b570      	push	{r4, r5, r6, lr}
   1e10e:	4604      	mov	r4, r0
	int err = entropy_get_entropy(entropy_source, p_buff, length);
   1e110:	460d      	mov	r5, r1

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
	const struct entropy_driver_api *api =
   1e112:	4b10      	ldr	r3, [pc, #64]	; (1e154 <rand_prio_low_vector_get_blocking+0x48>)
   1e114:	689e      	ldr	r6, [r3, #8]
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
   1e116:	6833      	ldr	r3, [r6, #0]
   1e118:	b943      	cbnz	r3, 1e12c <rand_prio_low_vector_get_blocking+0x20>
   1e11a:	490f      	ldr	r1, [pc, #60]	; (1e158 <rand_prio_low_vector_get_blocking+0x4c>)
   1e11c:	480f      	ldr	r0, [pc, #60]	; (1e15c <rand_prio_low_vector_get_blocking+0x50>)
   1e11e:	224b      	movs	r2, #75	; 0x4b
   1e120:	f006 f935 	bl	2438e <assert_print>
   1e124:	480c      	ldr	r0, [pc, #48]	; (1e158 <rand_prio_low_vector_get_blocking+0x4c>)
   1e126:	214b      	movs	r1, #75	; 0x4b
   1e128:	f006 f92a 	bl	24380 <assert_post_action>
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   1e12c:	6833      	ldr	r3, [r6, #0]
   1e12e:	4809      	ldr	r0, [pc, #36]	; (1e154 <rand_prio_low_vector_get_blocking+0x48>)
   1e130:	462a      	mov	r2, r5
   1e132:	4621      	mov	r1, r4
   1e134:	4798      	blx	r3
	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
   1e136:	b160      	cbz	r0, 1e152 <rand_prio_low_vector_get_blocking+0x46>
   1e138:	4909      	ldr	r1, [pc, #36]	; (1e160 <rand_prio_low_vector_get_blocking+0x54>)
   1e13a:	4808      	ldr	r0, [pc, #32]	; (1e15c <rand_prio_low_vector_get_blocking+0x50>)
   1e13c:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
   1e140:	f006 f925 	bl	2438e <assert_print>
}
   1e144:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
   1e148:	4805      	ldr	r0, [pc, #20]	; (1e160 <rand_prio_low_vector_get_blocking+0x54>)
   1e14a:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   1e14e:	f006 b917 	b.w	24380 <assert_post_action>
}
   1e152:	bd70      	pop	{r4, r5, r6, pc}
   1e154:	00027bd4 	.word	0x00027bd4
   1e158:	0002b0fa 	.word	0x0002b0fa
   1e15c:	000289af 	.word	0x000289af
   1e160:	0002b12e 	.word	0x0002b12e

0001e164 <hci_driver_open>:
{
   1e164:	b570      	push	{r4, r5, r6, lr}
   1e166:	b088      	sub	sp, #32
		hci_ecdh_init();
   1e168:	f000 fd9e 	bl	1eca8 <hci_ecdh_init>
	sdc_build_revision_get(build_revision);
   1e16c:	a803      	add	r0, sp, #12
   1e16e:	f7e6 ff23 	bl	4fb8 <sdc_build_revision_get>
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   1e172:	4a4e      	ldr	r2, [pc, #312]	; (1e2ac <hci_driver_open+0x148>)
   1e174:	484e      	ldr	r0, [pc, #312]	; (1e2b0 <hci_driver_open+0x14c>)
   1e176:	2149      	movs	r1, #73	; 0x49
   1e178:	f006 f917 	bl	243aa <z_log_minimal_printk>
   1e17c:	2214      	movs	r2, #20
   1e17e:	a903      	add	r1, sp, #12
   1e180:	2003      	movs	r0, #3
   1e182:	f7f5 f831 	bl	131e8 <z_log_minimal_hexdump_print>
			err = sdc_support_adv();
   1e186:	f7e7 f827 	bl	51d8 <sdc_support_adv>
			if (err) {
   1e18a:	b118      	cbz	r0, 1e194 <hci_driver_open+0x30>
				return -ENOTSUP;
   1e18c:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   1e190:	b008      	add	sp, #32
   1e192:	bd70      	pop	{r4, r5, r6, pc}
		err = sdc_support_peripheral();
   1e194:	f7e7 f850 	bl	5238 <sdc_support_peripheral>
		if (err) {
   1e198:	2800      	cmp	r0, #0
   1e19a:	d1f7      	bne.n	1e18c <hci_driver_open+0x28>
		err = sdc_support_dle();
   1e19c:	f7e7 f82c 	bl	51f8 <sdc_support_dle>
		if (err) {
   1e1a0:	2800      	cmp	r0, #0
   1e1a2:	d1f3      	bne.n	1e18c <hci_driver_open+0x28>
		err = sdc_support_le_2m_phy();
   1e1a4:	f7e7 f838 	bl	5218 <sdc_support_le_2m_phy>
		if (err) {
   1e1a8:	4605      	mov	r5, r0
   1e1aa:	2800      	cmp	r0, #0
   1e1ac:	d1ee      	bne.n	1e18c <hci_driver_open+0x28>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1e1ae:	466c      	mov	r4, sp
   1e1b0:	4622      	mov	r2, r4
   1e1b2:	2101      	movs	r1, #1
	cfg.central_count.count = SDC_CENTRAL_COUNT;
   1e1b4:	f88d 0000 	strb.w	r0, [sp]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1e1b8:	f7e6 ff0c 	bl	4fd4 <sdc_cfg_set>
	if (required_memory < 0) {
   1e1bc:	2800      	cmp	r0, #0
   1e1be:	dbe7      	blt.n	1e190 <hci_driver_open+0x2c>
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   1e1c0:	2601      	movs	r6, #1
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1e1c2:	4622      	mov	r2, r4
   1e1c4:	2102      	movs	r1, #2
   1e1c6:	4628      	mov	r0, r5
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   1e1c8:	f88d 6000 	strb.w	r6, [sp]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1e1cc:	f7e6 ff02 	bl	4fd4 <sdc_cfg_set>
	if (required_memory < 0) {
   1e1d0:	2800      	cmp	r0, #0
   1e1d2:	dbdd      	blt.n	1e190 <hci_driver_open+0x2c>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   1e1d4:	4b37      	ldr	r3, [pc, #220]	; (1e2b4 <hci_driver_open+0x150>)
   1e1d6:	9300      	str	r3, [sp, #0]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1e1d8:	4622      	mov	r2, r4
   1e1da:	2103      	movs	r1, #3
   1e1dc:	4628      	mov	r0, r5
   1e1de:	f7e6 fef9 	bl	4fd4 <sdc_cfg_set>
	if (required_memory < 0) {
   1e1e2:	2800      	cmp	r0, #0
   1e1e4:	dbd4      	blt.n	1e190 <hci_driver_open+0x2c>
	cfg.event_length.event_length_us =
   1e1e6:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1e1ea:	4622      	mov	r2, r4
   1e1ec:	2104      	movs	r1, #4
   1e1ee:	4628      	mov	r0, r5
	cfg.event_length.event_length_us =
   1e1f0:	9300      	str	r3, [sp, #0]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1e1f2:	f7e6 feef 	bl	4fd4 <sdc_cfg_set>
	if (required_memory < 0) {
   1e1f6:	2800      	cmp	r0, #0
   1e1f8:	dbca      	blt.n	1e190 <hci_driver_open+0x2c>
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1e1fa:	4622      	mov	r2, r4
   1e1fc:	2105      	movs	r1, #5
   1e1fe:	4628      	mov	r0, r5
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   1e200:	f88d 6000 	strb.w	r6, [sp]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1e204:	f7e6 fee6 	bl	4fd4 <sdc_cfg_set>
	if (required_memory < 0) {
   1e208:	2800      	cmp	r0, #0
   1e20a:	dbc1      	blt.n	1e190 <hci_driver_open+0x2c>
		cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   1e20c:	231f      	movs	r3, #31
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1e20e:	4622      	mov	r2, r4
   1e210:	2107      	movs	r1, #7
   1e212:	4628      	mov	r0, r5
		cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   1e214:	f8ad 3000 	strh.w	r3, [sp]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1e218:	f7e6 fedc 	bl	4fd4 <sdc_cfg_set>
		if (required_memory < 0) {
   1e21c:	2800      	cmp	r0, #0
   1e21e:	dbb7      	blt.n	1e190 <hci_driver_open+0x2c>
	if (required_memory > sizeof(sdc_mempool)) {
   1e220:	f5b0 6fb0 	cmp.w	r0, #1408	; 0x580
   1e224:	dd0f      	ble.n	1e246 <hci_driver_open+0xe2>
		BT_ERR("Allocated memory too low: %u < %u",
   1e226:	4603      	mov	r3, r0
   1e228:	f44f 62b0 	mov.w	r2, #1408	; 0x580
   1e22c:	4822      	ldr	r0, [pc, #136]	; (1e2b8 <hci_driver_open+0x154>)
   1e22e:	2145      	movs	r1, #69	; 0x45
   1e230:	f006 f8bb 	bl	243aa <z_log_minimal_printk>
		k_panic();
   1e234:	4040      	eors	r0, r0
   1e236:	f380 8811 	msr	BASEPRI, r0
   1e23a:	f04f 0004 	mov.w	r0, #4
   1e23e:	df02      	svc	2
		return -ENOMEM;
   1e240:	f06f 000b 	mvn.w	r0, #11
   1e244:	e7a4      	b.n	1e190 <hci_driver_open+0x2c>
   1e246:	481d      	ldr	r0, [pc, #116]	; (1e2bc <hci_driver_open+0x158>)
   1e248:	f009 fa00 	bl	2764c <z_device_is_ready>
	if (!device_is_ready(entropy_source)) {
   1e24c:	b930      	cbnz	r0, 1e25c <hci_driver_open+0xf8>
		BT_ERR("Entropy source device not ready");
   1e24e:	481c      	ldr	r0, [pc, #112]	; (1e2c0 <hci_driver_open+0x15c>)
   1e250:	2145      	movs	r1, #69	; 0x45
   1e252:	f006 f8aa 	bl	243aa <z_log_minimal_printk>
		return -ENODEV;
   1e256:	f06f 0012 	mvn.w	r0, #18
   1e25a:	e799      	b.n	1e190 <hci_driver_open+0x2c>
	sdc_rand_source_t rand_functions = {
   1e25c:	4b19      	ldr	r3, [pc, #100]	; (1e2c4 <hci_driver_open+0x160>)
   1e25e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   1e262:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   1e266:	4620      	mov	r0, r4
   1e268:	f7e7 f838 	bl	52dc <sdc_rand_source_register>
	if (err) {
   1e26c:	4602      	mov	r2, r0
   1e26e:	b130      	cbz	r0, 1e27e <hci_driver_open+0x11a>
		BT_ERR("Failed to register rand source (%d)", err);
   1e270:	4815      	ldr	r0, [pc, #84]	; (1e2c8 <hci_driver_open+0x164>)
   1e272:	2145      	movs	r1, #69	; 0x45
   1e274:	f006 f899 	bl	243aa <z_log_minimal_printk>
		return -EINVAL;
   1e278:	f06f 0015 	mvn.w	r0, #21
   1e27c:	e788      	b.n	1e190 <hci_driver_open+0x2c>
	k_work_init(&receive_work, receive_work_handler);
   1e27e:	4913      	ldr	r1, [pc, #76]	; (1e2cc <hci_driver_open+0x168>)
   1e280:	4813      	ldr	r0, [pc, #76]	; (1e2d0 <hci_driver_open+0x16c>)
   1e282:	f002 ffaf 	bl	211e4 <k_work_init>
	err = MULTITHREADING_LOCK_ACQUIRE();
   1e286:	f04f 30ff 	mov.w	r0, #4294967295
   1e28a:	f04f 31ff 	mov.w	r1, #4294967295
   1e28e:	f7ff ff07 	bl	1e0a0 <multithreading_lock_acquire>
	if (!err) {
   1e292:	4604      	mov	r4, r0
   1e294:	b930      	cbnz	r0, 1e2a4 <hci_driver_open+0x140>
		err = sdc_enable(hci_driver_receive_process, sdc_mempool);
   1e296:	490f      	ldr	r1, [pc, #60]	; (1e2d4 <hci_driver_open+0x170>)
   1e298:	480f      	ldr	r0, [pc, #60]	; (1e2d8 <hci_driver_open+0x174>)
   1e29a:	f7e6 fef7 	bl	508c <sdc_enable>
   1e29e:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1e2a0:	f7ff ff06 	bl	1e0b0 <multithreading_lock_release>
	if (err < 0) {
   1e2a4:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   1e2a8:	e772      	b.n	1e190 <hci_driver_open+0x2c>
   1e2aa:	bf00      	nop
   1e2ac:	0002b167 	.word	0x0002b167
   1e2b0:	0002b18e 	.word	0x0002b18e
   1e2b4:	02031b1b 	.word	0x02031b1b
   1e2b8:	0002b196 	.word	0x0002b196
   1e2bc:	00027bd4 	.word	0x00027bd4
   1e2c0:	0002b1bd 	.word	0x0002b1bd
   1e2c4:	00027fb0 	.word	0x00027fb0
   1e2c8:	0002b1e2 	.word	0x0002b1e2
   1e2cc:	00027429 	.word	0x00027429
   1e2d0:	2000213c 	.word	0x2000213c
   1e2d4:	20002442 	.word	0x20002442
   1e2d8:	0001e335 	.word	0x0001e335

0001e2dc <rand_prio_low_vector_get>:
{
   1e2dc:	b538      	push	{r3, r4, r5, lr}
   1e2de:	4604      	mov	r4, r0
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
   1e2e0:	480d      	ldr	r0, [pc, #52]	; (1e318 <rand_prio_low_vector_get+0x3c>)
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   1e2e2:	6883      	ldr	r3, [r0, #8]
   1e2e4:	685d      	ldr	r5, [r3, #4]
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   1e2e6:	460a      	mov	r2, r1
   1e2e8:	b19d      	cbz	r5, 1e312 <rand_prio_low_vector_get+0x36>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   1e2ea:	4621      	mov	r1, r4
   1e2ec:	2300      	movs	r3, #0
   1e2ee:	47a8      	blx	r5
	__ASSERT(ret >= 0, "The entropy source returned an error in the low priority context");
   1e2f0:	1e04      	subs	r4, r0, #0
   1e2f2:	da0a      	bge.n	1e30a <rand_prio_low_vector_get+0x2e>
   1e2f4:	4909      	ldr	r1, [pc, #36]	; (1e31c <rand_prio_low_vector_get+0x40>)
   1e2f6:	480a      	ldr	r0, [pc, #40]	; (1e320 <rand_prio_low_vector_get+0x44>)
   1e2f8:	f44f 72cf 	mov.w	r2, #414	; 0x19e
   1e2fc:	f006 f847 	bl	2438e <assert_print>
   1e300:	4806      	ldr	r0, [pc, #24]	; (1e31c <rand_prio_low_vector_get+0x40>)
   1e302:	f44f 71cf 	mov.w	r1, #414	; 0x19e
   1e306:	f006 f83b 	bl	24380 <assert_post_action>
	return ret >= 0 ? ret : 0;
   1e30a:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
}
   1e30e:	b2c0      	uxtb	r0, r0
   1e310:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   1e312:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1e316:	e7ed      	b.n	1e2f4 <rand_prio_low_vector_get+0x18>
   1e318:	00027bd4 	.word	0x00027bd4
   1e31c:	0002b12e 	.word	0x0002b12e
   1e320:	000289af 	.word	0x000289af

0001e324 <receive_signal_raise>:
 *
 * @return N/A
 */
static inline int mpsl_work_submit(struct k_work *work)
{
	return k_work_submit_to_queue(&mpsl_work_q, work);
   1e324:	4901      	ldr	r1, [pc, #4]	; (1e32c <receive_signal_raise+0x8>)
   1e326:	4802      	ldr	r0, [pc, #8]	; (1e330 <receive_signal_raise+0xc>)
   1e328:	f002 bfb4 	b.w	21294 <k_work_submit_to_queue>
   1e32c:	2000213c 	.word	0x2000213c
   1e330:	20001b78 	.word	0x20001b78

0001e334 <hci_driver_receive_process>:
{
   1e334:	b570      	push	{r4, r5, r6, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1e336:	f04f 30ff 	mov.w	r0, #4294967295
   1e33a:	f04f 31ff 	mov.w	r1, #4294967295
   1e33e:	f7ff feaf 	bl	1e0a0 <multithreading_lock_acquire>
	if (!errcode) {
   1e342:	b318      	cbz	r0, 1e38c <hci_driver_receive_process+0x58>
		return false;
   1e344:	2400      	movs	r4, #0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1e346:	f04f 30ff 	mov.w	r0, #4294967295
   1e34a:	f04f 31ff 	mov.w	r1, #4294967295
   1e34e:	f7ff fea7 	bl	1e0a0 <multithreading_lock_acquire>
	if (!errcode) {
   1e352:	2800      	cmp	r0, #0
   1e354:	d157      	bne.n	1e406 <hci_driver_receive_process+0xd2>
		errcode = sdc_hci_data_get(p_hci_buffer);
   1e356:	4d2d      	ldr	r5, [pc, #180]	; (1e40c <hci_driver_receive_process+0xd8>)
   1e358:	4628      	mov	r0, r5
   1e35a:	f7ef fce7 	bl	dd2c <sdc_hci_data_get>
   1e35e:	4606      	mov	r6, r0
		MULTITHREADING_LOCK_RELEASE();
   1e360:	f7ff fea6 	bl	1e0b0 <multithreading_lock_release>
	if (errcode) {
   1e364:	2e00      	cmp	r6, #0
   1e366:	d14e      	bne.n	1e406 <hci_driver_receive_process+0xd2>
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   1e368:	f04f 32ff 	mov.w	r2, #4294967295
   1e36c:	f04f 33ff 	mov.w	r3, #4294967295
   1e370:	2003      	movs	r0, #3
   1e372:	f7f6 fe73 	bl	1505c <bt_buf_get_rx>
	if (!data_buf) {
   1e376:	4604      	mov	r4, r0
   1e378:	2800      	cmp	r0, #0
   1e37a:	d13a      	bne.n	1e3f2 <hci_driver_receive_process+0xbe>
		BT_ERR("No data buffer available");
   1e37c:	4824      	ldr	r0, [pc, #144]	; (1e410 <hci_driver_receive_process+0xdc>)
   1e37e:	2145      	movs	r1, #69	; 0x45
   1e380:	f006 f813 	bl	243aa <z_log_minimal_printk>
}
   1e384:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		receive_signal_raise();
   1e388:	f7ff bfcc 	b.w	1e324 <receive_signal_raise>
		errcode = hci_internal_evt_get(p_hci_buffer);
   1e38c:	4e1f      	ldr	r6, [pc, #124]	; (1e40c <hci_driver_receive_process+0xd8>)
   1e38e:	4630      	mov	r0, r6
   1e390:	f000 fb22 	bl	1e9d8 <hci_internal_evt_get>
   1e394:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1e396:	f7ff fe8b 	bl	1e0b0 <multithreading_lock_release>
	if (errcode) {
   1e39a:	2c00      	cmp	r4, #0
   1e39c:	d1d2      	bne.n	1e344 <hci_driver_receive_process+0x10>
	switch (hdr->evt) {
   1e39e:	7830      	ldrb	r0, [r6, #0]
   1e3a0:	283e      	cmp	r0, #62	; 0x3e
   1e3a2:	d012      	beq.n	1e3ca <hci_driver_receive_process+0x96>
   1e3a4:	28ff      	cmp	r0, #255	; 0xff
   1e3a6:	d017      	beq.n	1e3d8 <hci_driver_receive_process+0xa4>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1e3a8:	f04f 32ff 	mov.w	r2, #4294967295
   1e3ac:	f04f 33ff 	mov.w	r3, #4294967295
   1e3b0:	4621      	mov	r1, r4
   1e3b2:	f7f6 fe95 	bl	150e0 <bt_buf_get_evt>
	if (!evt_buf) {
   1e3b6:	4605      	mov	r5, r0
   1e3b8:	b988      	cbnz	r0, 1e3de <hci_driver_receive_process+0xaa>
		if (discardable) {
   1e3ba:	2c00      	cmp	r4, #0
   1e3bc:	d1c3      	bne.n	1e346 <hci_driver_receive_process+0x12>
		BT_ERR("No event buffer available");
   1e3be:	4815      	ldr	r0, [pc, #84]	; (1e414 <hci_driver_receive_process+0xe0>)
   1e3c0:	2145      	movs	r1, #69	; 0x45
   1e3c2:	f005 fff2 	bl	243aa <z_log_minimal_printk>
	return true;
   1e3c6:	2401      	movs	r4, #1
   1e3c8:	e7bd      	b.n	1e346 <hci_driver_receive_process+0x12>
		switch (me->subevent) {
   1e3ca:	78b3      	ldrb	r3, [r6, #2]
   1e3cc:	2b02      	cmp	r3, #2
		switch (subevent) {
   1e3ce:	d1eb      	bne.n	1e3a8 <hci_driver_receive_process+0x74>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1e3d0:	2200      	movs	r2, #0
   1e3d2:	2300      	movs	r3, #0
		switch (subevent) {
   1e3d4:	2401      	movs	r4, #1
   1e3d6:	e7eb      	b.n	1e3b0 <hci_driver_receive_process+0x7c>
   1e3d8:	78b3      	ldrb	r3, [r6, #2]
   1e3da:	2b80      	cmp	r3, #128	; 0x80
   1e3dc:	e7f7      	b.n	1e3ce <hci_driver_receive_process+0x9a>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   1e3de:	7872      	ldrb	r2, [r6, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1e3e0:	490a      	ldr	r1, [pc, #40]	; (1e40c <hci_driver_receive_process+0xd8>)
   1e3e2:	3202      	adds	r2, #2
   1e3e4:	3008      	adds	r0, #8
   1e3e6:	f008 fd61 	bl	26eac <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   1e3ea:	4628      	mov	r0, r5
   1e3ec:	f7f7 fe88 	bl	16100 <bt_recv>
   1e3f0:	e7e9      	b.n	1e3c6 <hci_driver_receive_process+0x92>
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
   1e3f2:	886a      	ldrh	r2, [r5, #2]
   1e3f4:	4629      	mov	r1, r5
   1e3f6:	3204      	adds	r2, #4
   1e3f8:	3008      	adds	r0, #8
   1e3fa:	f008 fd57 	bl	26eac <net_buf_simple_add_mem>
	bt_recv(data_buf);
   1e3fe:	4620      	mov	r0, r4
   1e400:	f7f7 fe7e 	bl	16100 <bt_recv>
	if (received_evt || received_data) {
   1e404:	e7be      	b.n	1e384 <hci_driver_receive_process+0x50>
   1e406:	2c00      	cmp	r4, #0
   1e408:	d1bc      	bne.n	1e384 <hci_driver_receive_process+0x50>
}
   1e40a:	bd70      	pop	{r4, r5, r6, pc}
   1e40c:	200023f9 	.word	0x200023f9
   1e410:	0002b22a 	.word	0x0002b22a
   1e414:	0002b20b 	.word	0x0002b20b

0001e418 <rand_prio_high_vector_get>:
{
   1e418:	b538      	push	{r3, r4, r5, lr}
   1e41a:	4604      	mov	r4, r0
	const struct entropy_driver_api *api =
   1e41c:	480d      	ldr	r0, [pc, #52]	; (1e454 <rand_prio_high_vector_get+0x3c>)
	if (unlikely(!api->get_entropy_isr)) {
   1e41e:	6883      	ldr	r3, [r0, #8]
   1e420:	685d      	ldr	r5, [r3, #4]
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   1e422:	460a      	mov	r2, r1
   1e424:	b19d      	cbz	r5, 1e44e <rand_prio_high_vector_get+0x36>
	return api->get_entropy_isr(dev, buffer, length, flags);
   1e426:	4621      	mov	r1, r4
   1e428:	2300      	movs	r3, #0
   1e42a:	47a8      	blx	r5
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
   1e42c:	1e04      	subs	r4, r0, #0
   1e42e:	da0a      	bge.n	1e446 <rand_prio_high_vector_get+0x2e>
   1e430:	4909      	ldr	r1, [pc, #36]	; (1e458 <rand_prio_high_vector_get+0x40>)
   1e432:	480a      	ldr	r0, [pc, #40]	; (1e45c <rand_prio_high_vector_get+0x44>)
   1e434:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
   1e438:	f005 ffa9 	bl	2438e <assert_print>
   1e43c:	4806      	ldr	r0, [pc, #24]	; (1e458 <rand_prio_high_vector_get+0x40>)
   1e43e:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
   1e442:	f005 ff9d 	bl	24380 <assert_post_action>
	return ret >= 0 ? ret : 0;
   1e446:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
}
   1e44a:	b2c0      	uxtb	r0, r0
   1e44c:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   1e44e:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1e452:	e7ed      	b.n	1e430 <rand_prio_high_vector_get+0x18>
   1e454:	00027bd4 	.word	0x00027bd4
   1e458:	0002b12e 	.word	0x0002b12e
   1e45c:	000289af 	.word	0x000289af

0001e460 <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   1e460:	b538      	push	{r3, r4, r5, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   1e462:	4cd6      	ldr	r4, [pc, #856]	; (1e7bc <hci_internal_cmd_put+0x35c>)
   1e464:	7823      	ldrb	r3, [r4, #0]
   1e466:	2b00      	cmp	r3, #0
   1e468:	f040 82b1 	bne.w	1e9ce <hci_internal_cmd_put+0x56e>
	return ((uint16_t)src[1] << 8) | src[0];
   1e46c:	8805      	ldrh	r5, [r0, #0]
	switch (BT_OGF(opcode)) {
   1e46e:	f5b5 5f10 	cmp.w	r5, #9216	; 0x2400
   1e472:	b22b      	sxth	r3, r5
   1e474:	ea4f 2295 	mov.w	r2, r5, lsr #10
   1e478:	d209      	bcs.n	1e48e <hci_internal_cmd_put+0x2e>
   1e47a:	b15a      	cbz	r2, 1e494 <hci_internal_cmd_put+0x34>
   1e47c:	3a01      	subs	r2, #1
   1e47e:	2a07      	cmp	r2, #7
   1e480:	d808      	bhi.n	1e494 <hci_internal_cmd_put+0x34>
   1e482:	e8df f002 	tbb	[pc, r2]
   1e486:	0709      	.short	0x0709
   1e488:	07075925 	.word	0x07075925
   1e48c:	d107      	.short	0xd107
   1e48e:	2a3f      	cmp	r2, #63	; 0x3f
   1e490:	f000 822b 	beq.w	1e8ea <hci_internal_cmd_put+0x48a>
	switch (opcode)	{
   1e494:	2001      	movs	r0, #1
   1e496:	e00e      	b.n	1e4b6 <hci_internal_cmd_put+0x56>
	switch (opcode)	{
   1e498:	f240 4206 	movw	r2, #1030	; 0x406
   1e49c:	4293      	cmp	r3, r2
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1e49e:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   1e4a2:	d006      	beq.n	1e4b2 <hci_internal_cmd_put+0x52>
   1e4a4:	f240 421d 	movw	r2, #1053	; 0x41d
   1e4a8:	4293      	cmp	r3, r2
   1e4aa:	d1f3      	bne.n	1e494 <hci_internal_cmd_put+0x34>
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   1e4ac:	f7ef fd73 	bl	df96 <sdc_hci_cmd_lc_read_remote_version_information>
   1e4b0:	e001      	b.n	1e4b6 <hci_internal_cmd_put+0x56>
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   1e4b2:	f7ef fd6e 	bl	df92 <sdc_hci_cmd_lc_disconnect>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1e4b6:	230f      	movs	r3, #15
   1e4b8:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1e4ba:	2304      	movs	r3, #4
   1e4bc:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   1e4be:	2301      	movs	r3, #1
	evt_data->status = status_code;
   1e4c0:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   1e4c2:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   1e4c4:	f8a4 5005 	strh.w	r5, [r4, #5]
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   1e4c8:	2301      	movs	r3, #1
   1e4ca:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   1e4cc:	2000      	movs	r0, #0
}
   1e4ce:	bd38      	pop	{r3, r4, r5, pc}
	switch (opcode)	{
   1e4d0:	f640 4263 	movw	r2, #3171	; 0xc63
   1e4d4:	4293      	cmp	r3, r2
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1e4d6:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   1e4da:	d025      	beq.n	1e528 <hci_internal_cmd_put+0xc8>
   1e4dc:	dc0f      	bgt.n	1e4fe <hci_internal_cmd_put+0x9e>
   1e4de:	f640 4203 	movw	r2, #3075	; 0xc03
   1e4e2:	4293      	cmp	r3, r2
   1e4e4:	d018      	beq.n	1e518 <hci_internal_cmd_put+0xb8>
   1e4e6:	f640 422d 	movw	r2, #3117	; 0xc2d
   1e4ea:	4293      	cmp	r3, r2
   1e4ec:	d017      	beq.n	1e51e <hci_internal_cmd_put+0xbe>
   1e4ee:	f640 4201 	movw	r2, #3073	; 0xc01
   1e4f2:	4293      	cmp	r3, r2
   1e4f4:	d1ce      	bne.n	1e494 <hci_internal_cmd_put+0x34>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   1e4f6:	f7ef fc42 	bl	dd7e <sdc_hci_cmd_cb_set_event_mask>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   1e4fa:	2304      	movs	r3, #4
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   1e4fc:	e091      	b.n	1e622 <hci_internal_cmd_put+0x1c2>
	switch (opcode)	{
   1e4fe:	f640 427b 	movw	r2, #3195	; 0xc7b
   1e502:	4293      	cmp	r3, r2
   1e504:	d013      	beq.n	1e52e <hci_internal_cmd_put+0xce>
   1e506:	f640 427c 	movw	r2, #3196	; 0xc7c
   1e50a:	4293      	cmp	r3, r2
   1e50c:	d1c2      	bne.n	1e494 <hci_internal_cmd_put+0x34>
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   1e50e:	49ac      	ldr	r1, [pc, #688]	; (1e7c0 <hci_internal_cmd_put+0x360>)
   1e510:	f7ef fc3f 	bl	dd92 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   1e514:	2306      	movs	r3, #6
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1e516:	e084      	b.n	1e622 <hci_internal_cmd_put+0x1c2>
		return sdc_hci_cmd_cb_reset();
   1e518:	f7e6 ffd4 	bl	54c4 <sdc_hci_cmd_cb_reset>
   1e51c:	e7ed      	b.n	1e4fa <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   1e51e:	49a8      	ldr	r1, [pc, #672]	; (1e7c0 <hci_internal_cmd_put+0x360>)
   1e520:	f7ef fc2b 	bl	dd7a <sdc_hci_cmd_cb_read_transmit_power_level>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   1e524:	2307      	movs	r3, #7
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1e526:	e07c      	b.n	1e622 <hci_internal_cmd_put+0x1c2>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   1e528:	f7ef fc2e 	bl	dd88 <sdc_hci_cmd_cb_set_event_mask_page_2>
   1e52c:	e7e5      	b.n	1e4fa <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   1e52e:	49a4      	ldr	r1, [pc, #656]	; (1e7c0 <hci_internal_cmd_put+0x360>)
   1e530:	f7ef fc21 	bl	dd76 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   1e534:	2308      	movs	r3, #8
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   1e536:	e074      	b.n	1e622 <hci_internal_cmd_put+0x1c2>
	switch (opcode)	{
   1e538:	f5a5 5380 	sub.w	r3, r5, #4096	; 0x1000
   1e53c:	3b01      	subs	r3, #1
   1e53e:	2b08      	cmp	r3, #8
   1e540:	d8a8      	bhi.n	1e494 <hci_internal_cmd_put+0x34>
   1e542:	a201      	add	r2, pc, #4	; (adr r2, 1e548 <hci_internal_cmd_put+0xe8>)
   1e544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1e548:	0001e56d 	.word	0x0001e56d
   1e54c:	0001e577 	.word	0x0001e577
   1e550:	0001e5f3 	.word	0x0001e5f3
   1e554:	0001e495 	.word	0x0001e495
   1e558:	0001e495 	.word	0x0001e495
   1e55c:	0001e495 	.word	0x0001e495
   1e560:	0001e495 	.word	0x0001e495
   1e564:	0001e495 	.word	0x0001e495
   1e568:	0001e61b 	.word	0x0001e61b
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   1e56c:	4894      	ldr	r0, [pc, #592]	; (1e7c0 <hci_internal_cmd_put+0x360>)
   1e56e:	f7ef fcc5 	bl	defc <sdc_hci_cmd_ip_read_local_version_information>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   1e572:	230c      	movs	r3, #12
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   1e574:	e055      	b.n	1e622 <hci_internal_cmd_put+0x1c2>
	memset(cmds, 0, sizeof(*cmds));
   1e576:	4892      	ldr	r0, [pc, #584]	; (1e7c0 <hci_internal_cmd_put+0x360>)
   1e578:	222f      	movs	r2, #47	; 0x2f
   1e57a:	2100      	movs	r1, #0
   1e57c:	f009 fa8f 	bl	27a9e <memset>
	cmds->hci_disconnect = 1;
   1e580:	2320      	movs	r3, #32
   1e582:	71e3      	strb	r3, [r4, #7]
	cmds->hci_read_remote_version_information = 1;
   1e584:	2380      	movs	r3, #128	; 0x80
   1e586:	7263      	strb	r3, [r4, #9]
	cmds->hci_set_event_mask = 1;
   1e588:	f06f 033f 	mvn.w	r3, #63	; 0x3f
   1e58c:	7323      	strb	r3, [r4, #12]
	cmds->hci_read_transmit_power_level = 1;
   1e58e:	2304      	movs	r3, #4
   1e590:	7463      	strb	r3, [r4, #17]
	cmds->hci_read_local_version_information = 1;
   1e592:	2328      	movs	r3, #40	; 0x28
   1e594:	7563      	strb	r3, [r4, #21]
	cmds->hci_read_bd_addr = 1;
   1e596:	2302      	movs	r3, #2
   1e598:	75a3      	strb	r3, [r4, #22]
	cmds->hci_set_event_mask_page_2 = 1;
   1e59a:	2304      	movs	r3, #4
   1e59c:	7763      	strb	r3, [r4, #29]
	cmds->hci_le_set_event_mask = 1;
   1e59e:	f06f 0308 	mvn.w	r3, #8
   1e5a2:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_scan_response_data = 1;
   1e5a6:	f06f 033c 	mvn.w	r3, #60	; 0x3c
   1e5aa:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_add_device_to_filter_accept_list = 1;
   1e5ae:	f06f 030c 	mvn.w	r3, #12
   1e5b2:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_long_term_key_request_reply = 1;
   1e5b6:	237e      	movs	r3, #126	; 0x7e
   1e5b8:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_read_authenticated_payload_timeout = 1;
   1e5bc:	2330      	movs	r3, #48	; 0x30
   1e5be:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	cmds->hci_le_set_data_length = 1;
   1e5c2:	f06f 033f 	mvn.w	r3, #63	; 0x3f
   1e5c6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	cmds->hci_le_write_suggested_default_data_length = 1;
   1e5ca:	237f      	movs	r3, #127	; 0x7f
   1e5cc:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	cmds->hci_le_set_address_resolution_enable = 1;
   1e5d0:	f06f 0301 	mvn.w	r3, #1
   1e5d4:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
   1e5d8:	2301      	movs	r3, #1
   1e5da:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	cmds->hci_le_read_transmit_power = 1;
   1e5de:	2380      	movs	r3, #128	; 0x80
   1e5e0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	cmds->hci_le_set_privacy_mode = 1;
   1e5e4:	2304      	movs	r3, #4
   1e5e6:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
	cmds->hci_le_generate_dhkey_v2 = 1;
   1e5ea:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		return 0;
   1e5ee:	2344      	movs	r3, #68	; 0x44
   1e5f0:	e13d      	b.n	1e86e <hci_internal_cmd_put+0x40e>
	memset(features, 0, sizeof(*features));
   1e5f2:	4b73      	ldr	r3, [pc, #460]	; (1e7c0 <hci_internal_cmd_put+0x360>)
   1e5f4:	2000      	movs	r0, #0
   1e5f6:	f8c4 0007 	str.w	r0, [r4, #7]
   1e5fa:	6058      	str	r0, [r3, #4]
	features->bdedr_not_supported = 1;
   1e5fc:	7ae3      	ldrb	r3, [r4, #11]
   1e5fe:	f023 0360 	bic.w	r3, r3, #96	; 0x60
   1e602:	f043 0360 	orr.w	r3, r3, #96	; 0x60
   1e606:	72e3      	strb	r3, [r4, #11]
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   1e608:	230c      	movs	r3, #12
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1e60a:	220e      	movs	r2, #14
	evt_hdr->len = param_length;
   1e60c:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   1e60e:	2301      	movs	r3, #1
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1e610:	7062      	strb	r2, [r4, #1]
	evt_data->ncmd = 1;
   1e612:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   1e614:	80a5      	strh	r5, [r4, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   1e616:	71a0      	strb	r0, [r4, #6]
}
   1e618:	e756      	b.n	1e4c8 <hci_internal_cmd_put+0x68>
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   1e61a:	4869      	ldr	r0, [pc, #420]	; (1e7c0 <hci_internal_cmd_put+0x360>)
   1e61c:	f7ef fc6c 	bl	def8 <sdc_hci_cmd_ip_read_bd_addr>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   1e620:	230a      	movs	r3, #10
	if (!command_generates_command_complete_event(opcode) ||
   1e622:	2801      	cmp	r0, #1
   1e624:	d1f1      	bne.n	1e60a <hci_internal_cmd_put+0x1aa>
   1e626:	e746      	b.n	1e4b6 <hci_internal_cmd_put+0x56>
	switch (opcode)	{
   1e628:	f5a5 5300 	sub.w	r3, r5, #8192	; 0x2000
   1e62c:	3b01      	subs	r3, #1
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1e62e:	3003      	adds	r0, #3
	switch (opcode)	{
   1e630:	2b5d      	cmp	r3, #93	; 0x5d
   1e632:	f63f af2f 	bhi.w	1e494 <hci_internal_cmd_put+0x34>
   1e636:	a201      	add	r2, pc, #4	; (adr r2, 1e63c <hci_internal_cmd_put+0x1dc>)
   1e638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1e63c:	0001e7b5 	.word	0x0001e7b5
   1e640:	0001e7c5 	.word	0x0001e7c5
   1e644:	0001e7cd 	.word	0x0001e7cd
   1e648:	0001e495 	.word	0x0001e495
   1e64c:	0001e7f1 	.word	0x0001e7f1
   1e650:	0001e7f7 	.word	0x0001e7f7
   1e654:	0001e7fd 	.word	0x0001e7fd
   1e658:	0001e807 	.word	0x0001e807
   1e65c:	0001e80d 	.word	0x0001e80d
   1e660:	0001e813 	.word	0x0001e813
   1e664:	0001e495 	.word	0x0001e495
   1e668:	0001e495 	.word	0x0001e495
   1e66c:	0001e495 	.word	0x0001e495
   1e670:	0001e495 	.word	0x0001e495
   1e674:	0001e819 	.word	0x0001e819
   1e678:	0001e821 	.word	0x0001e821
   1e67c:	0001e827 	.word	0x0001e827
   1e680:	0001e82d 	.word	0x0001e82d
   1e684:	0001e495 	.word	0x0001e495
   1e688:	0001e495 	.word	0x0001e495
   1e68c:	0001e833 	.word	0x0001e833
   1e690:	0001e83d 	.word	0x0001e83d
   1e694:	0001e843 	.word	0x0001e843
   1e698:	0001e84d 	.word	0x0001e84d
   1e69c:	0001e495 	.word	0x0001e495
   1e6a0:	0001e855 	.word	0x0001e855
   1e6a4:	0001e85d 	.word	0x0001e85d
   1e6a8:	0001e865 	.word	0x0001e865
   1e6ac:	0001e495 	.word	0x0001e495
   1e6b0:	0001e495 	.word	0x0001e495
   1e6b4:	0001e495 	.word	0x0001e495
   1e6b8:	0001e495 	.word	0x0001e495
   1e6bc:	0001e495 	.word	0x0001e495
   1e6c0:	0001e873 	.word	0x0001e873
   1e6c4:	0001e87b 	.word	0x0001e87b
   1e6c8:	0001e883 	.word	0x0001e883
   1e6cc:	0001e889 	.word	0x0001e889
   1e6d0:	0001e88f 	.word	0x0001e88f
   1e6d4:	0001e89b 	.word	0x0001e89b
   1e6d8:	0001e8a1 	.word	0x0001e8a1
   1e6dc:	0001e8a7 	.word	0x0001e8a7
   1e6e0:	0001e8ad 	.word	0x0001e8ad
   1e6e4:	0001e495 	.word	0x0001e495
   1e6e8:	0001e495 	.word	0x0001e495
   1e6ec:	0001e8b5 	.word	0x0001e8b5
   1e6f0:	0001e8bb 	.word	0x0001e8bb
   1e6f4:	0001e8c1 	.word	0x0001e8c1
   1e6f8:	0001e8c9 	.word	0x0001e8c9
   1e6fc:	0001e8d1 	.word	0x0001e8d1
   1e700:	0001e8d7 	.word	0x0001e8d7
   1e704:	0001e495 	.word	0x0001e495
   1e708:	0001e495 	.word	0x0001e495
   1e70c:	0001e495 	.word	0x0001e495
   1e710:	0001e495 	.word	0x0001e495
   1e714:	0001e495 	.word	0x0001e495
   1e718:	0001e495 	.word	0x0001e495
   1e71c:	0001e495 	.word	0x0001e495
   1e720:	0001e495 	.word	0x0001e495
   1e724:	0001e495 	.word	0x0001e495
   1e728:	0001e495 	.word	0x0001e495
   1e72c:	0001e495 	.word	0x0001e495
   1e730:	0001e495 	.word	0x0001e495
   1e734:	0001e495 	.word	0x0001e495
   1e738:	0001e495 	.word	0x0001e495
   1e73c:	0001e495 	.word	0x0001e495
   1e740:	0001e495 	.word	0x0001e495
   1e744:	0001e495 	.word	0x0001e495
   1e748:	0001e495 	.word	0x0001e495
   1e74c:	0001e495 	.word	0x0001e495
   1e750:	0001e495 	.word	0x0001e495
   1e754:	0001e495 	.word	0x0001e495
   1e758:	0001e495 	.word	0x0001e495
   1e75c:	0001e495 	.word	0x0001e495
   1e760:	0001e495 	.word	0x0001e495
   1e764:	0001e8dd 	.word	0x0001e8dd
   1e768:	0001e495 	.word	0x0001e495
   1e76c:	0001e495 	.word	0x0001e495
   1e770:	0001e8e5 	.word	0x0001e8e5
   1e774:	0001e495 	.word	0x0001e495
   1e778:	0001e495 	.word	0x0001e495
   1e77c:	0001e495 	.word	0x0001e495
   1e780:	0001e495 	.word	0x0001e495
   1e784:	0001e495 	.word	0x0001e495
   1e788:	0001e495 	.word	0x0001e495
   1e78c:	0001e495 	.word	0x0001e495
   1e790:	0001e495 	.word	0x0001e495
   1e794:	0001e495 	.word	0x0001e495
   1e798:	0001e495 	.word	0x0001e495
   1e79c:	0001e495 	.word	0x0001e495
   1e7a0:	0001e495 	.word	0x0001e495
   1e7a4:	0001e495 	.word	0x0001e495
   1e7a8:	0001e495 	.word	0x0001e495
   1e7ac:	0001e495 	.word	0x0001e495
   1e7b0:	0001e895 	.word	0x0001e895
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   1e7b4:	f7ef fbdc 	bl	df70 <sdc_hci_cmd_le_set_event_mask>
   1e7b8:	e69f      	b.n	1e4fa <hci_internal_cmd_put+0x9a>
   1e7ba:	bf00      	nop
   1e7bc:	200029c2 	.word	0x200029c2
   1e7c0:	200029c9 	.word	0x200029c9
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1e7c4:	4883      	ldr	r0, [pc, #524]	; (1e9d4 <hci_internal_cmd_put+0x574>)
   1e7c6:	f7ef fbb1 	bl	df2c <sdc_hci_cmd_le_read_buffer_size>
   1e7ca:	e6ab      	b.n	1e524 <hci_internal_cmd_put+0xc4>
	memset(features, 0, sizeof(*features));
   1e7cc:	4b81      	ldr	r3, [pc, #516]	; (1e9d4 <hci_internal_cmd_put+0x574>)
   1e7ce:	2000      	movs	r0, #0
   1e7d0:	f8c4 0007 	str.w	r0, [r4, #7]
   1e7d4:	7118      	strb	r0, [r3, #4]
	features->le_encryption = 1;
   1e7d6:	79e3      	ldrb	r3, [r4, #7]
   1e7d8:	f023 037d 	bic.w	r3, r3, #125	; 0x7d
   1e7dc:	f043 037d 	orr.w	r3, r3, #125	; 0x7d
   1e7e0:	71e3      	strb	r3, [r4, #7]
	features->le_2m_phy = 1;
   1e7e2:	7a23      	ldrb	r3, [r4, #8]
   1e7e4:	f023 0341 	bic.w	r3, r3, #65	; 0x41
   1e7e8:	f043 0341 	orr.w	r3, r3, #65	; 0x41
   1e7ec:	7223      	strb	r3, [r4, #8]
   1e7ee:	e70b      	b.n	1e608 <hci_internal_cmd_put+0x1a8>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   1e7f0:	f7ef fbc7 	bl	df82 <sdc_hci_cmd_le_set_random_address>
   1e7f4:	e681      	b.n	1e4fa <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
   1e7f6:	f7ef fbb5 	bl	df64 <sdc_hci_cmd_le_set_adv_params>
   1e7fa:	e67e      	b.n	1e4fa <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   1e7fc:	4875      	ldr	r0, [pc, #468]	; (1e9d4 <hci_internal_cmd_put+0x574>)
   1e7fe:	f7ef fb93 	bl	df28 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_resolving_list_size_return_t);
   1e802:	2305      	movs	r3, #5
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   1e804:	e70d      	b.n	1e622 <hci_internal_cmd_put+0x1c2>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
   1e806:	f7ef fba9 	bl	df5c <sdc_hci_cmd_le_set_adv_data>
   1e80a:	e676      	b.n	1e4fa <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
   1e80c:	f7ef fbbd 	bl	df8a <sdc_hci_cmd_le_set_scan_response_data>
   1e810:	e673      	b.n	1e4fa <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
   1e812:	f7ef fba5 	bl	df60 <sdc_hci_cmd_le_set_adv_enable>
   1e816:	e670      	b.n	1e4fa <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   1e818:	486e      	ldr	r0, [pc, #440]	; (1e9d4 <hci_internal_cmd_put+0x574>)
   1e81a:	f7ef fb8b 	bl	df34 <sdc_hci_cmd_le_read_filter_accept_list_size>
   1e81e:	e7f0      	b.n	1e802 <hci_internal_cmd_put+0x3a2>
		return sdc_hci_cmd_le_clear_filter_accept_list();
   1e820:	f7ef fb72 	bl	df08 <sdc_hci_cmd_le_clear_filter_accept_list>
   1e824:	e669      	b.n	1e4fa <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_add_device_to_filter_accept_list((void *)cmd_params);
   1e826:	f7ef fb6b 	bl	df00 <sdc_hci_cmd_le_add_device_to_filter_accept_list>
   1e82a:	e666      	b.n	1e4fa <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_remove_device_from_filter_accept_list((void *)cmd_params);
   1e82c:	f7ef fb90 	bl	df50 <sdc_hci_cmd_le_remove_device_from_filter_accept_list>
   1e830:	e663      	b.n	1e4fa <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   1e832:	4968      	ldr	r1, [pc, #416]	; (1e9d4 <hci_internal_cmd_put+0x574>)
   1e834:	f7ef fb7c 	bl	df30 <sdc_hci_cmd_le_read_channel_map>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   1e838:	230b      	movs	r3, #11
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   1e83a:	e6f2      	b.n	1e622 <hci_internal_cmd_put+0x1c2>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   1e83c:	f7ef fb80 	bl	df40 <sdc_hci_cmd_le_read_remote_features>
   1e840:	e639      	b.n	1e4b6 <hci_internal_cmd_put+0x56>
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1e842:	4964      	ldr	r1, [pc, #400]	; (1e9d4 <hci_internal_cmd_put+0x574>)
   1e844:	f7ef fb64 	bl	df10 <sdc_hci_cmd_le_encrypt>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   1e848:	2314      	movs	r3, #20
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1e84a:	e6ea      	b.n	1e622 <hci_internal_cmd_put+0x1c2>
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   1e84c:	4861      	ldr	r0, [pc, #388]	; (1e9d4 <hci_internal_cmd_put+0x574>)
   1e84e:	f7ef fb69 	bl	df24 <sdc_hci_cmd_le_rand>
   1e852:	e68e      	b.n	1e572 <hci_internal_cmd_put+0x112>
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   1e854:	495f      	ldr	r1, [pc, #380]	; (1e9d4 <hci_internal_cmd_put+0x574>)
   1e856:	f7ef fb61 	bl	df1c <sdc_hci_cmd_le_long_term_key_request_reply>
   1e85a:	e65b      	b.n	1e514 <hci_internal_cmd_put+0xb4>
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   1e85c:	495d      	ldr	r1, [pc, #372]	; (1e9d4 <hci_internal_cmd_put+0x574>)
   1e85e:	f7ef fb59 	bl	df14 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
   1e862:	e657      	b.n	1e514 <hci_internal_cmd_put+0xb4>
	*buf = states1;
   1e864:	238f      	movs	r3, #143	; 0x8f
   1e866:	71e3      	strb	r3, [r4, #7]
	*(buf + 4) = states2;
   1e868:	23c0      	movs	r3, #192	; 0xc0
   1e86a:	72e3      	strb	r3, [r4, #11]
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   1e86c:	230c      	movs	r3, #12
		return 0;
   1e86e:	2000      	movs	r0, #0
   1e870:	e6cb      	b.n	1e60a <hci_internal_cmd_put+0x1aa>
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   1e872:	4958      	ldr	r1, [pc, #352]	; (1e9d4 <hci_internal_cmd_put+0x574>)
   1e874:	f7ef fb78 	bl	df68 <sdc_hci_cmd_le_set_data_length>
   1e878:	e64c      	b.n	1e514 <hci_internal_cmd_put+0xb4>
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   1e87a:	4856      	ldr	r0, [pc, #344]	; (1e9d4 <hci_internal_cmd_put+0x574>)
   1e87c:	f7ef fb64 	bl	df48 <sdc_hci_cmd_le_read_suggested_default_data_length>
   1e880:	e658      	b.n	1e534 <hci_internal_cmd_put+0xd4>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   1e882:	f7ef fb84 	bl	df8e <sdc_hci_cmd_le_write_suggested_default_data_length>
   1e886:	e638      	b.n	1e4fa <hci_internal_cmd_put+0x9a>
		return hci_cmd_le_read_local_p256_public_key();
   1e888:	f000 fa38 	bl	1ecfc <hci_cmd_le_read_local_p256_public_key>
   1e88c:	e613      	b.n	1e4b6 <hci_internal_cmd_put+0x56>
		return hci_cmd_le_generate_dhkey((void *)cmd_params);
   1e88e:	f008 fdf1 	bl	27474 <hci_cmd_le_generate_dhkey>
   1e892:	e610      	b.n	1e4b6 <hci_internal_cmd_put+0x56>
		return hci_cmd_le_generate_dhkey_v2((void *)cmd_params);
   1e894:	f008 fdf1 	bl	2747a <hci_cmd_le_generate_dhkey_v2>
   1e898:	e62f      	b.n	1e4fa <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_add_device_to_resolving_list((void *)cmd_params);
   1e89a:	f7ef fb33 	bl	df04 <sdc_hci_cmd_le_add_device_to_resolving_list>
   1e89e:	e62c      	b.n	1e4fa <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_remove_device_from_resolving_list((void *)cmd_params);
   1e8a0:	f7ef fb58 	bl	df54 <sdc_hci_cmd_le_remove_device_from_resolving_list>
   1e8a4:	e629      	b.n	1e4fa <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_clear_resolving_list();
   1e8a6:	f7ef fb31 	bl	df0c <sdc_hci_cmd_le_clear_resolving_list>
   1e8aa:	e626      	b.n	1e4fa <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   1e8ac:	4849      	ldr	r0, [pc, #292]	; (1e9d4 <hci_internal_cmd_put+0x574>)
   1e8ae:	f7ef fb49 	bl	df44 <sdc_hci_cmd_le_read_resolving_list_size>
   1e8b2:	e7a6      	b.n	1e802 <hci_internal_cmd_put+0x3a2>
		return sdc_hci_cmd_le_set_address_resolution_enable((void *)cmd_params);
   1e8b4:	f7ef fb50 	bl	df58 <sdc_hci_cmd_le_set_address_resolution_enable>
   1e8b8:	e61f      	b.n	1e4fa <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_set_resolvable_private_address_timeout((void *)cmd_params);
   1e8ba:	f7ef fb64 	bl	df86 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>
   1e8be:	e61c      	b.n	1e4fa <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   1e8c0:	4844      	ldr	r0, [pc, #272]	; (1e9d4 <hci_internal_cmd_put+0x574>)
   1e8c2:	f7ef fb39 	bl	df38 <sdc_hci_cmd_le_read_max_data_length>
   1e8c6:	e654      	b.n	1e572 <hci_internal_cmd_put+0x112>
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   1e8c8:	4942      	ldr	r1, [pc, #264]	; (1e9d4 <hci_internal_cmd_put+0x574>)
   1e8ca:	f7ef fb37 	bl	df3c <sdc_hci_cmd_le_read_phy>
   1e8ce:	e631      	b.n	1e534 <hci_internal_cmd_put+0xd4>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   1e8d0:	f7ef fb4c 	bl	df6c <sdc_hci_cmd_le_set_default_phy>
   1e8d4:	e611      	b.n	1e4fa <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   1e8d6:	f7ef fb50 	bl	df7a <sdc_hci_cmd_le_set_phy>
   1e8da:	e5ec      	b.n	1e4b6 <hci_internal_cmd_put+0x56>
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1e8dc:	483d      	ldr	r0, [pc, #244]	; (1e9d4 <hci_internal_cmd_put+0x574>)
   1e8de:	f7ef fb35 	bl	df4c <sdc_hci_cmd_le_read_transmit_power>
   1e8e2:	e617      	b.n	1e514 <hci_internal_cmd_put+0xb4>
		return sdc_hci_cmd_le_set_privacy_mode((void *)cmd_params);
   1e8e4:	f7ef fb4b 	bl	df7e <sdc_hci_cmd_le_set_privacy_mode>
   1e8e8:	e607      	b.n	1e4fa <hci_internal_cmd_put+0x9a>
	switch (opcode)	{
   1e8ea:	f64f 430a 	movw	r3, #64522	; 0xfc0a
   1e8ee:	429d      	cmp	r5, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1e8f0:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   1e8f4:	d820      	bhi.n	1e938 <hci_internal_cmd_put+0x4d8>
   1e8f6:	f5b5 4f7c 	cmp.w	r5, #64512	; 0xfc00
   1e8fa:	f43f adcb 	beq.w	1e494 <hci_internal_cmd_put+0x34>
   1e8fe:	f5a5 437c 	sub.w	r3, r5, #64512	; 0xfc00
   1e902:	3b01      	subs	r3, #1
   1e904:	2b09      	cmp	r3, #9
   1e906:	f63f adc5 	bhi.w	1e494 <hci_internal_cmd_put+0x34>
   1e90a:	a201      	add	r2, pc, #4	; (adr r2, 1e910 <hci_internal_cmd_put+0x4b0>)
   1e90c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1e910:	0001e959 	.word	0x0001e959
   1e914:	0001e963 	.word	0x0001e963
   1e918:	0001e495 	.word	0x0001e495
   1e91c:	0001e495 	.word	0x0001e495
   1e920:	0001e495 	.word	0x0001e495
   1e924:	0001e997 	.word	0x0001e997
   1e928:	0001e495 	.word	0x0001e495
   1e92c:	0001e495 	.word	0x0001e495
   1e930:	0001e983 	.word	0x0001e983
   1e934:	0001e98d 	.word	0x0001e98d
   1e938:	f505 7340 	add.w	r3, r5, #768	; 0x300
   1e93c:	b29b      	uxth	r3, r3
   1e93e:	2b05      	cmp	r3, #5
   1e940:	f63f ada8 	bhi.w	1e494 <hci_internal_cmd_put+0x34>
   1e944:	f5a5 437d 	sub.w	r3, r5, #64768	; 0xfd00
   1e948:	2b05      	cmp	r3, #5
   1e94a:	f63f ada3 	bhi.w	1e494 <hci_internal_cmd_put+0x34>
   1e94e:	e8df f003 	tbb	[pc, r3]
   1e952:	2f25      	.short	0x2f25
   1e954:	3b383532 	.word	0x3b383532
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   1e958:	481e      	ldr	r0, [pc, #120]	; (1e9d4 <hci_internal_cmd_put+0x574>)
   1e95a:	f7e6 fdc7 	bl	54ec <sdc_hci_cmd_vs_zephyr_read_version_info>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   1e95e:	2310      	movs	r3, #16
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   1e960:	e65f      	b.n	1e622 <hci_internal_cmd_put+0x1c2>
	memset(cmds, 0, sizeof(*cmds));
   1e962:	2300      	movs	r3, #0
   1e964:	f8a4 3007 	strh.w	r3, [r4, #7]
	cmds->read_version_info = 1;
   1e968:	79e3      	ldrb	r3, [r4, #7]
   1e96a:	f023 0323 	bic.w	r3, r3, #35	; 0x23
   1e96e:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   1e972:	71e3      	strb	r3, [r4, #7]
	cmds->read_static_addresses = 1;
   1e974:	7a23      	ldrb	r3, [r4, #8]
   1e976:	f023 0307 	bic.w	r3, r3, #7
   1e97a:	f043 0307 	orr.w	r3, r3, #7
   1e97e:	7223      	strb	r3, [r4, #8]
}
   1e980:	e635      	b.n	1e5ee <hci_internal_cmd_put+0x18e>
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1e982:	4814      	ldr	r0, [pc, #80]	; (1e9d4 <hci_internal_cmd_put+0x574>)
   1e984:	f7ef fa67 	bl	de56 <sdc_hci_cmd_vs_zephyr_read_static_addresses>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   1e988:	231b      	movs	r3, #27
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1e98a:	e64a      	b.n	1e622 <hci_internal_cmd_put+0x1c2>
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   1e98c:	4811      	ldr	r0, [pc, #68]	; (1e9d4 <hci_internal_cmd_put+0x574>)
   1e98e:	f7ef fa15 	bl	ddbc <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
		*param_length_out +=
   1e992:	2324      	movs	r3, #36	; 0x24
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   1e994:	e645      	b.n	1e622 <hci_internal_cmd_put+0x1c2>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   1e996:	f7ef faad 	bl	def4 <sdc_hci_cmd_vs_zephyr_write_bd_addr>
   1e99a:	e5ae      	b.n	1e4fa <hci_internal_cmd_put+0x9a>
	memset(cmds, 0, sizeof(*cmds));
   1e99c:	2300      	movs	r3, #0
   1e99e:	f8a4 3007 	strh.w	r3, [r4, #7]
	cmds->read_supported_vs_commands = 1;
   1e9a2:	79e3      	ldrb	r3, [r4, #7]
   1e9a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   1e9a8:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
   1e9ac:	71e3      	strb	r3, [r4, #7]
}
   1e9ae:	e61e      	b.n	1e5ee <hci_internal_cmd_put+0x18e>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   1e9b0:	f7ef f9fd 	bl	ddae <sdc_hci_cmd_vs_llpm_mode_set>
   1e9b4:	e5a1      	b.n	1e4fa <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   1e9b6:	f7ef f9f6 	bl	dda6 <sdc_hci_cmd_vs_conn_update>
   1e9ba:	e59e      	b.n	1e4fa <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   1e9bc:	f7ef f9eb 	bl	dd96 <sdc_hci_cmd_vs_conn_event_extend>
   1e9c0:	e59b      	b.n	1e4fa <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   1e9c2:	f7ef f9f6 	bl	ddb2 <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   1e9c6:	e598      	b.n	1e4fa <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   1e9c8:	f7ef f9ef 	bl	ddaa <sdc_hci_cmd_vs_event_length_set>
   1e9cc:	e595      	b.n	1e4fa <hci_internal_cmd_put+0x9a>
		return -NRF_EPERM;
   1e9ce:	f04f 30ff 	mov.w	r0, #4294967295
   1e9d2:	e57c      	b.n	1e4ce <hci_internal_cmd_put+0x6e>
   1e9d4:	200029c9 	.word	0x200029c9

0001e9d8 <hci_internal_evt_get>:

int hci_internal_evt_get(uint8_t *evt_out)
{
   1e9d8:	b510      	push	{r4, lr}
	if (cmd_complete_or_status.occurred) {
   1e9da:	4c07      	ldr	r4, [pc, #28]	; (1e9f8 <hci_internal_evt_get+0x20>)
   1e9dc:	7823      	ldrb	r3, [r4, #0]
   1e9de:	b91b      	cbnz	r3, 1e9e8 <hci_internal_evt_get+0x10>

		return 0;
	}

	return sdc_hci_evt_get(evt_out);
}
   1e9e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return sdc_hci_evt_get(evt_out);
   1e9e4:	f7ef b9ba 	b.w	dd5c <sdc_hci_evt_get>
		memcpy(evt_out,
   1e9e8:	78a2      	ldrb	r2, [r4, #2]
   1e9ea:	1c61      	adds	r1, r4, #1
   1e9ec:	3202      	adds	r2, #2
   1e9ee:	f009 f835 	bl	27a5c <memcpy>
		cmd_complete_or_status.occurred = false;
   1e9f2:	2000      	movs	r0, #0
   1e9f4:	7020      	strb	r0, [r4, #0]
}
   1e9f6:	bd10      	pop	{r4, pc}
   1e9f8:	200029c2 	.word	0x200029c2

0001e9fc <sys_memcpy_swap.constprop.0>:
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1e9fc:	4288      	cmp	r0, r1
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
   1e9fe:	b570      	push	{r4, r5, r6, lr}
   1ea00:	4604      	mov	r4, r0
   1ea02:	460d      	mov	r5, r1
   1ea04:	f101 0610 	add.w	r6, r1, #16
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1ea08:	d915      	bls.n	1ea36 <sys_memcpy_swap.constprop.0+0x3a>
   1ea0a:	42b0      	cmp	r0, r6
   1ea0c:	d20a      	bcs.n	1ea24 <sys_memcpy_swap.constprop.0+0x28>
   1ea0e:	490c      	ldr	r1, [pc, #48]	; (1ea40 <sys_memcpy_swap.constprop.0+0x44>)
   1ea10:	480c      	ldr	r0, [pc, #48]	; (1ea44 <sys_memcpy_swap.constprop.0+0x48>)
   1ea12:	f240 2217 	movw	r2, #535	; 0x217
   1ea16:	f005 fcba 	bl	2438e <assert_print>
   1ea1a:	4809      	ldr	r0, [pc, #36]	; (1ea40 <sys_memcpy_swap.constprop.0+0x44>)
   1ea1c:	f240 2117 	movw	r1, #535	; 0x217
   1ea20:	f005 fcae 	bl	24380 <assert_post_action>
	for (; length > 0; length--) {
   1ea24:	4633      	mov	r3, r6
   1ea26:	3c01      	subs	r4, #1
		*pdst++ = *psrc--;
   1ea28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   1ea2c:	f804 2f01 	strb.w	r2, [r4, #1]!
	for (; length > 0; length--) {
   1ea30:	42ab      	cmp	r3, r5
   1ea32:	d1f9      	bne.n	1ea28 <sys_memcpy_swap.constprop.0+0x2c>
}
   1ea34:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1ea36:	d0ea      	beq.n	1ea0e <sys_memcpy_swap.constprop.0+0x12>
   1ea38:	f100 0310 	add.w	r3, r0, #16
   1ea3c:	4299      	cmp	r1, r3
   1ea3e:	e7e5      	b.n	1ea0c <sys_memcpy_swap.constprop.0+0x10>
   1ea40:	0002a845 	.word	0x0002a845
   1ea44:	000289af 	.word	0x000289af

0001ea48 <bt_rand>:
#define BT_ECB_BLOCK_SIZE 16

static const struct device *dev = DEVICE_DT_GET(DT_NODELABEL(rng));

int bt_rand(void *buf, size_t len)
{
   1ea48:	b570      	push	{r4, r5, r6, lr}
   1ea4a:	4605      	mov	r5, r0
   1ea4c:	460c      	mov	r4, r1
   1ea4e:	4e0e      	ldr	r6, [pc, #56]	; (1ea88 <bt_rand+0x40>)
   1ea50:	4630      	mov	r0, r6
   1ea52:	f008 fdfb 	bl	2764c <z_device_is_ready>
	if (unlikely(!device_is_ready(dev))) {
   1ea56:	b198      	cbz	r0, 1ea80 <bt_rand+0x38>
		return -ENODEV;
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   1ea58:	b2a4      	uxth	r4, r4
	const struct entropy_driver_api *api =
   1ea5a:	68b6      	ldr	r6, [r6, #8]
	__ASSERT(api->get_entropy != NULL,
   1ea5c:	6833      	ldr	r3, [r6, #0]
   1ea5e:	b943      	cbnz	r3, 1ea72 <bt_rand+0x2a>
   1ea60:	490a      	ldr	r1, [pc, #40]	; (1ea8c <bt_rand+0x44>)
   1ea62:	480b      	ldr	r0, [pc, #44]	; (1ea90 <bt_rand+0x48>)
   1ea64:	224b      	movs	r2, #75	; 0x4b
   1ea66:	f005 fc92 	bl	2438e <assert_print>
   1ea6a:	4808      	ldr	r0, [pc, #32]	; (1ea8c <bt_rand+0x44>)
   1ea6c:	214b      	movs	r1, #75	; 0x4b
   1ea6e:	f005 fc87 	bl	24380 <assert_post_action>
	return api->get_entropy(dev, buffer, length);
   1ea72:	6833      	ldr	r3, [r6, #0]
   1ea74:	4804      	ldr	r0, [pc, #16]	; (1ea88 <bt_rand+0x40>)
   1ea76:	4622      	mov	r2, r4
   1ea78:	4629      	mov	r1, r5
}
   1ea7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1ea7e:	4718      	bx	r3
   1ea80:	f06f 0012 	mvn.w	r0, #18
   1ea84:	bd70      	pop	{r4, r5, r6, pc}
   1ea86:	bf00      	nop
   1ea88:	00027bd4 	.word	0x00027bd4
   1ea8c:	0002b0fa 	.word	0x0002b0fa
   1ea90:	000289af 	.word	0x000289af

0001ea94 <sys_memcpy_swap.constprop.0>:
   1ea94:	4288      	cmp	r0, r1
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
   1ea96:	b570      	push	{r4, r5, r6, lr}
   1ea98:	4604      	mov	r4, r0
   1ea9a:	460d      	mov	r5, r1
   1ea9c:	f101 0620 	add.w	r6, r1, #32
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1eaa0:	d915      	bls.n	1eace <sys_memcpy_swap.constprop.0+0x3a>
   1eaa2:	42b0      	cmp	r0, r6
   1eaa4:	d20a      	bcs.n	1eabc <sys_memcpy_swap.constprop.0+0x28>
   1eaa6:	490c      	ldr	r1, [pc, #48]	; (1ead8 <sys_memcpy_swap.constprop.0+0x44>)
   1eaa8:	480c      	ldr	r0, [pc, #48]	; (1eadc <sys_memcpy_swap.constprop.0+0x48>)
   1eaaa:	f240 2217 	movw	r2, #535	; 0x217
   1eaae:	f005 fc6e 	bl	2438e <assert_print>
   1eab2:	4809      	ldr	r0, [pc, #36]	; (1ead8 <sys_memcpy_swap.constprop.0+0x44>)
   1eab4:	f240 2117 	movw	r1, #535	; 0x217
   1eab8:	f005 fc62 	bl	24380 <assert_post_action>
	for (; length > 0; length--) {
   1eabc:	4633      	mov	r3, r6
   1eabe:	3c01      	subs	r4, #1
		*pdst++ = *psrc--;
   1eac0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   1eac4:	f804 2f01 	strb.w	r2, [r4, #1]!
	for (; length > 0; length--) {
   1eac8:	42ab      	cmp	r3, r5
   1eaca:	d1f9      	bne.n	1eac0 <sys_memcpy_swap.constprop.0+0x2c>
}
   1eacc:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1eace:	d0ea      	beq.n	1eaa6 <sys_memcpy_swap.constprop.0+0x12>
   1ead0:	f100 0320 	add.w	r3, r0, #32
   1ead4:	4299      	cmp	r1, r3
   1ead6:	e7e5      	b.n	1eaa4 <sys_memcpy_swap.constprop.0+0x10>
   1ead8:	0002a845 	.word	0x0002a845
   1eadc:	000289af 	.word	0x000289af

0001eae0 <ecdh_p256_common_secret>:

static uint8_t common_secret(bool use_debug)
{
	int err;

	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   1eae0:	4b1e      	ldr	r3, [pc, #120]	; (1eb5c <ecdh_p256_common_secret+0x7c>)
   1eae2:	491f      	ldr	r1, [pc, #124]	; (1eb60 <ecdh_p256_common_secret+0x80>)
   1eae4:	f103 0220 	add.w	r2, r3, #32
   1eae8:	2800      	cmp	r0, #0
   1eaea:	bf08      	it	eq
   1eaec:	4619      	moveq	r1, r3

	return buf;
}

static struct net_buf *ecdh_p256_common_secret(bool use_debug)
{
   1eaee:	b570      	push	{r4, r5, r6, lr}
	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   1eaf0:	4610      	mov	r0, r2
   1eaf2:	f004 fd43 	bl	2357c <ocrypto_ecdh_p256_common_secret>
	if (err) {
   1eaf6:	4602      	mov	r2, r0
   1eaf8:	b348      	cbz	r0, 1eb4e <ecdh_p256_common_secret+0x6e>
		BT_ERR("public key is not valid (err %d)", err);
   1eafa:	481a      	ldr	r0, [pc, #104]	; (1eb64 <ecdh_p256_common_secret+0x84>)
   1eafc:	2145      	movs	r1, #69	; 0x45
   1eafe:	f005 fc54 	bl	243aa <z_log_minimal_printk>
		return BT_HCI_ERR_INVALID_PARAM;
   1eb02:	2412      	movs	r4, #18
	struct net_buf *buf;
	uint8_t status;

	status = common_secret(use_debug);

	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1eb04:	f04f 32ff 	mov.w	r2, #4294967295
   1eb08:	f04f 33ff 	mov.w	r3, #4294967295
   1eb0c:	2001      	movs	r0, #1
   1eb0e:	f7f6 faa5 	bl	1505c <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
   1eb12:	f100 0608 	add.w	r6, r0, #8
   1eb16:	2102      	movs	r1, #2
   1eb18:	4605      	mov	r5, r0
   1eb1a:	4630      	mov	r0, r6
   1eb1c:	f7fd fdb8 	bl	1c690 <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   1eb20:	233e      	movs	r3, #62	; 0x3e
   1eb22:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   1eb24:	2322      	movs	r3, #34	; 0x22
   1eb26:	7043      	strb	r3, [r0, #1]
   1eb28:	2101      	movs	r1, #1
   1eb2a:	4630      	mov	r0, r6
   1eb2c:	f7fd fdb0 	bl	1c690 <net_buf_simple_add>

	meta = net_buf_add(buf, sizeof(*meta));
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   1eb30:	2309      	movs	r3, #9
   1eb32:	7003      	strb	r3, [r0, #0]
   1eb34:	2121      	movs	r1, #33	; 0x21
   1eb36:	4630      	mov	r0, r6
   1eb38:	f7fd fdaa 	bl	1c690 <net_buf_simple_add>

	evt = net_buf_add(buf, sizeof(*evt));
	evt->status = status;
   1eb3c:	f800 4b01 	strb.w	r4, [r0], #1

	if (status) {
   1eb40:	b13c      	cbz	r4, 1eb52 <ecdh_p256_common_secret+0x72>
__ssp_bos_icheck3(memset, void *, int)
   1eb42:	2220      	movs	r2, #32
   1eb44:	21ff      	movs	r1, #255	; 0xff
   1eb46:	f008 ffaa 	bl	27a9e <memset>
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
				sizeof(ecdh.dhkey_be));
	}

	return buf;
}
   1eb4a:	4628      	mov	r0, r5
   1eb4c:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   1eb4e:	4604      	mov	r4, r0
   1eb50:	e7d8      	b.n	1eb04 <ecdh_p256_common_secret+0x24>
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
   1eb52:	4905      	ldr	r1, [pc, #20]	; (1eb68 <ecdh_p256_common_secret+0x88>)
   1eb54:	f7ff ff9e 	bl	1ea94 <sys_memcpy_swap.constprop.0>
   1eb58:	e7f7      	b.n	1eb4a <ecdh_p256_common_secret+0x6a>
   1eb5a:	bf00      	nop
   1eb5c:	20002a09 	.word	0x20002a09
   1eb60:	0002b2d9 	.word	0x0002b2d9
   1eb64:	0002b289 	.word	0x0002b289
   1eb68:	20002a29 	.word	0x20002a29

0001eb6c <ecdh_cmd_process>:

void ecdh_cmd_process(void)
{
   1eb6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1eb6e:	4e38      	ldr	r6, [pc, #224]	; (1ec50 <ecdh_cmd_process+0xe4>)
   1eb70:	f3bf 8f5b 	dmb	ish
   1eb74:	6833      	ldr	r3, [r6, #0]
   1eb76:	f3bf 8f5b 	dmb	ish
	struct net_buf *buf;

	switch (atomic_get(&cmd)) {
   1eb7a:	2b02      	cmp	r3, #2
   1eb7c:	d059      	beq.n	1ec32 <ecdh_cmd_process+0xc6>
   1eb7e:	2b04      	cmp	r3, #4
   1eb80:	d05c      	beq.n	1ec3c <ecdh_cmd_process+0xd0>
   1eb82:	2b01      	cmp	r3, #1
   1eb84:	d15c      	bne.n	1ec40 <ecdh_cmd_process+0xd4>
		err = bt_rand(ecdh.private_key_be, 32);
   1eb86:	4c33      	ldr	r4, [pc, #204]	; (1ec54 <ecdh_cmd_process+0xe8>)
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   1eb88:	4f33      	ldr	r7, [pc, #204]	; (1ec58 <ecdh_cmd_process+0xec>)
		err = bt_rand(ecdh.private_key_be, 32);
   1eb8a:	2120      	movs	r1, #32
   1eb8c:	4620      	mov	r0, r4
   1eb8e:	f7ff ff5b 	bl	1ea48 <bt_rand>
		if (err) {
   1eb92:	2800      	cmp	r0, #0
   1eb94:	d142      	bne.n	1ec1c <ecdh_cmd_process+0xb0>
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   1eb96:	2220      	movs	r2, #32
   1eb98:	4639      	mov	r1, r7
   1eb9a:	4620      	mov	r0, r4
   1eb9c:	f008 ff4e 	bl	27a3c <memcmp>
   1eba0:	2800      	cmp	r0, #0
   1eba2:	d0f2      	beq.n	1eb8a <ecdh_cmd_process+0x1e>
		err = ocrypto_ecdh_p256_public_key(ecdh.public_key_be,
   1eba4:	482d      	ldr	r0, [pc, #180]	; (1ec5c <ecdh_cmd_process+0xf0>)
   1eba6:	4621      	mov	r1, r4
   1eba8:	f004 fcd4 	bl	23554 <ocrypto_ecdh_p256_public_key>
	} while (err);
   1ebac:	4605      	mov	r5, r0
   1ebae:	2800      	cmp	r0, #0
   1ebb0:	d1eb      	bne.n	1eb8a <ecdh_cmd_process+0x1e>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1ebb2:	f04f 32ff 	mov.w	r2, #4294967295
   1ebb6:	f04f 33ff 	mov.w	r3, #4294967295
   1ebba:	2001      	movs	r0, #1
   1ebbc:	f7f6 fa4e 	bl	1505c <bt_buf_get_rx>
   1ebc0:	f100 0708 	add.w	r7, r0, #8
   1ebc4:	2102      	movs	r1, #2
   1ebc6:	4604      	mov	r4, r0
   1ebc8:	4638      	mov	r0, r7
   1ebca:	f7fd fd61 	bl	1c690 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   1ebce:	233e      	movs	r3, #62	; 0x3e
   1ebd0:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   1ebd2:	2342      	movs	r3, #66	; 0x42
   1ebd4:	7043      	strb	r3, [r0, #1]
   1ebd6:	2101      	movs	r1, #1
   1ebd8:	4638      	mov	r0, r7
   1ebda:	f7fd fd59 	bl	1c690 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   1ebde:	2308      	movs	r3, #8
   1ebe0:	7003      	strb	r3, [r0, #0]
   1ebe2:	2141      	movs	r1, #65	; 0x41
   1ebe4:	4638      	mov	r0, r7
   1ebe6:	f7fd fd53 	bl	1c690 <net_buf_simple_add>
   1ebea:	4607      	mov	r7, r0
	evt->status = status;
   1ebec:	f800 5b01 	strb.w	r5, [r0], #1
	if (status) {
   1ebf0:	b1b5      	cbz	r5, 1ec20 <ecdh_cmd_process+0xb4>
   1ebf2:	2240      	movs	r2, #64	; 0x40
   1ebf4:	2100      	movs	r1, #0
   1ebf6:	f008 ff52 	bl	27a9e <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1ebfa:	f3bf 8f5b 	dmb	ish
   1ebfe:	2300      	movs	r3, #0
   1ec00:	e856 2f00 	ldrex	r2, [r6]
   1ec04:	e846 3100 	strex	r1, r3, [r6]
   1ec08:	2900      	cmp	r1, #0
   1ec0a:	d1f9      	bne.n	1ec00 <ecdh_cmd_process+0x94>
   1ec0c:	f3bf 8f5b 	dmb	ish
		buf = NULL;
		break;
	}

	atomic_set(&cmd, 0);
	if (buf) {
   1ec10:	b1e4      	cbz	r4, 1ec4c <ecdh_cmd_process+0xe0>
		bt_recv(buf);
   1ec12:	4620      	mov	r0, r4
	}
}
   1ec14:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_recv(buf);
   1ec18:	f7f7 ba72 	b.w	16100 <bt_recv>
			return BT_HCI_ERR_UNSPECIFIED;
   1ec1c:	251f      	movs	r5, #31
   1ec1e:	e7c8      	b.n	1ebb2 <ecdh_cmd_process+0x46>
		sys_memcpy_swap(&evt->key[0], &ecdh.public_key_be[0], 32);
   1ec20:	490e      	ldr	r1, [pc, #56]	; (1ec5c <ecdh_cmd_process+0xf0>)
   1ec22:	f7ff ff37 	bl	1ea94 <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[32], &ecdh.public_key_be[32], 32);
   1ec26:	490e      	ldr	r1, [pc, #56]	; (1ec60 <ecdh_cmd_process+0xf4>)
   1ec28:	f107 0021 	add.w	r0, r7, #33	; 0x21
   1ec2c:	f7ff ff32 	bl	1ea94 <sys_memcpy_swap.constprop.0>
		break;
   1ec30:	e7e3      	b.n	1ebfa <ecdh_cmd_process+0x8e>
		buf = ecdh_p256_common_secret(false);
   1ec32:	2000      	movs	r0, #0
		buf = ecdh_p256_common_secret(true);
   1ec34:	f7ff ff54 	bl	1eae0 <ecdh_p256_common_secret>
   1ec38:	4604      	mov	r4, r0
		break;
   1ec3a:	e7de      	b.n	1ebfa <ecdh_cmd_process+0x8e>
		buf = ecdh_p256_common_secret(true);
   1ec3c:	2001      	movs	r0, #1
   1ec3e:	e7f9      	b.n	1ec34 <ecdh_cmd_process+0xc8>
		BT_WARN("Unknown command");
   1ec40:	4808      	ldr	r0, [pc, #32]	; (1ec64 <ecdh_cmd_process+0xf8>)
   1ec42:	2157      	movs	r1, #87	; 0x57
   1ec44:	f005 fbb1 	bl	243aa <z_log_minimal_printk>
		buf = NULL;
   1ec48:	2400      	movs	r4, #0
		break;
   1ec4a:	e7d6      	b.n	1ebfa <ecdh_cmd_process+0x8e>
}
   1ec4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ec4e:	bf00      	nop
   1ec50:	2000214c 	.word	0x2000214c
   1ec54:	20002a09 	.word	0x20002a09
   1ec58:	0002b2d9 	.word	0x0002b2d9
   1ec5c:	20002a29 	.word	0x20002a29
   1ec60:	20002a49 	.word	0x20002a49
   1ec64:	0002b2af 	.word	0x0002b2af

0001ec68 <ecdh_thread>:
{
	k_poll_signal_raise(&ecdh_signal, 0);
}

static void ecdh_thread(void *p1, void *p2, void *p3)
{
   1ec68:	b510      	push	{r4, lr}
   1ec6a:	b086      	sub	sp, #24
	struct k_poll_event events[1] = {
   1ec6c:	2210      	movs	r2, #16
   1ec6e:	2100      	movs	r1, #0
   1ec70:	a801      	add	r0, sp, #4
   1ec72:	f008 ff14 	bl	27a9e <memset>
   1ec76:	4c0b      	ldr	r4, [pc, #44]	; (1eca4 <ecdh_thread+0x3c>)
   1ec78:	9405      	str	r4, [sp, #20]
   1ec7a:	2301      	movs	r3, #1
   1ec7c:	f88d 3011 	strb.w	r3, [sp, #17]
	return z_impl_k_poll(events, num_events, timeout);
   1ec80:	f04f 32ff 	mov.w	r2, #4294967295
   1ec84:	f04f 33ff 	mov.w	r3, #4294967295
   1ec88:	2101      	movs	r1, #1
   1ec8a:	a801      	add	r0, sp, #4
   1ec8c:	f004 fb06 	bl	2329c <z_impl_k_poll>
	z_impl_k_poll_signal_reset(sig);
   1ec90:	4620      	mov	r0, r4
   1ec92:	f008 fec8 	bl	27a26 <z_impl_k_poll_signal_reset>

	while (true) {
		k_poll(events, 1, K_FOREVER);

		k_poll_signal_reset(&ecdh_signal);
		events[0].state = K_POLL_STATE_NOT_READY;
   1ec96:	9b04      	ldr	r3, [sp, #16]
   1ec98:	f36f 3352 	bfc	r3, #13, #6
   1ec9c:	9304      	str	r3, [sp, #16]

		ecdh_cmd_process();
   1ec9e:	f7ff ff65 	bl	1eb6c <ecdh_cmd_process>
	while (true) {
   1eca2:	e7ed      	b.n	1ec80 <ecdh_thread+0x18>
   1eca4:	20002150 	.word	0x20002150

0001eca8 <hci_ecdh_init>:
	}
}
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */

void hci_ecdh_init(void)
{
   1eca8:	b510      	push	{r4, lr}
   1ecaa:	b088      	sub	sp, #32
	z_impl_k_poll_signal_init(sig);
   1ecac:	480e      	ldr	r0, [pc, #56]	; (1ece8 <hci_ecdh_init+0x40>)
   1ecae:	f008 feb5 	bl	27a1c <z_impl_k_poll_signal_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1ecb2:	4c0e      	ldr	r4, [pc, #56]	; (1ecec <hci_ecdh_init+0x44>)
   1ecb4:	490e      	ldr	r1, [pc, #56]	; (1ecf0 <hci_ecdh_init+0x48>)
   1ecb6:	2200      	movs	r2, #0
   1ecb8:	2300      	movs	r3, #0
   1ecba:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1ecbe:	2300      	movs	r3, #0
   1ecc0:	220a      	movs	r2, #10
   1ecc2:	e9cd 2303 	strd	r2, r3, [sp, #12]
   1ecc6:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1ecca:	9300      	str	r3, [sp, #0]
   1eccc:	f44f 7262 	mov.w	r2, #904	; 0x388
   1ecd0:	4b08      	ldr	r3, [pc, #32]	; (1ecf4 <hci_ecdh_init+0x4c>)
   1ecd2:	4620      	mov	r0, r4
   1ecd4:	f001 fc2c 	bl	20530 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1ecd8:	4907      	ldr	r1, [pc, #28]	; (1ecf8 <hci_ecdh_init+0x50>)
   1ecda:	4620      	mov	r0, r4
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecdh_thread_data, "BT CTLR ECDH");
#else
	k_work_init(&ecdh_work, ecdh_work_handler);
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}
   1ecdc:	b008      	add	sp, #32
   1ecde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ece2:	f008 bccf 	b.w	27684 <z_impl_k_thread_name_set>
   1ece6:	bf00      	nop
   1ece8:	20002150 	.word	0x20002150
   1ecec:	20001af8 	.word	0x20001af8
   1ecf0:	20003d60 	.word	0x20003d60
   1ecf4:	0001ec69 	.word	0x0001ec69
   1ecf8:	0002b2c4 	.word	0x0002b2c4

0001ecfc <hci_cmd_le_read_local_p256_public_key>:

uint8_t hci_cmd_le_read_local_p256_public_key(void)
{
   1ecfc:	b508      	push	{r3, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1ecfe:	4b0b      	ldr	r3, [pc, #44]	; (1ed2c <hci_cmd_le_read_local_p256_public_key+0x30>)
   1ed00:	f3bf 8f5b 	dmb	ish
   1ed04:	2201      	movs	r2, #1
   1ed06:	e853 1f00 	ldrex	r1, [r3]
   1ed0a:	2900      	cmp	r1, #0
   1ed0c:	d103      	bne.n	1ed16 <hci_cmd_le_read_local_p256_public_key+0x1a>
   1ed0e:	e843 2000 	strex	r0, r2, [r3]
   1ed12:	2800      	cmp	r0, #0
   1ed14:	d1f7      	bne.n	1ed06 <hci_cmd_le_read_local_p256_public_key+0xa>
   1ed16:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&cmd, 0, GEN_PUBLIC_KEY)) {
   1ed1a:	d105      	bne.n	1ed28 <hci_cmd_le_read_local_p256_public_key+0x2c>
	return z_impl_k_poll_signal_raise(sig, result);
   1ed1c:	4804      	ldr	r0, [pc, #16]	; (1ed30 <hci_cmd_le_read_local_p256_public_key+0x34>)
   1ed1e:	2100      	movs	r1, #0
   1ed20:	f004 fb92 	bl	23448 <z_impl_k_poll_signal_raise>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	work_submit();

	return 0;
   1ed24:	2000      	movs	r0, #0
}
   1ed26:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1ed28:	200c      	movs	r0, #12
   1ed2a:	e7fc      	b.n	1ed26 <hci_cmd_le_read_local_p256_public_key+0x2a>
   1ed2c:	2000214c 	.word	0x2000214c
   1ed30:	20002150 	.word	0x20002150

0001ed34 <cmd_le_generate_dhkey>:

uint8_t cmd_le_generate_dhkey(uint8_t *key, uint8_t key_type)
{
   1ed34:	b510      	push	{r4, lr}
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   1ed36:	2900      	cmp	r1, #0
   1ed38:	4b11      	ldr	r3, [pc, #68]	; (1ed80 <cmd_le_generate_dhkey+0x4c>)
   1ed3a:	f3bf 8f5b 	dmb	ish
{
   1ed3e:	4604      	mov	r4, r0
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   1ed40:	bf14      	ite	ne
   1ed42:	2204      	movne	r2, #4
   1ed44:	2202      	moveq	r2, #2
   1ed46:	e853 1f00 	ldrex	r1, [r3]
   1ed4a:	2900      	cmp	r1, #0
   1ed4c:	d103      	bne.n	1ed56 <cmd_le_generate_dhkey+0x22>
   1ed4e:	e843 2000 	strex	r0, r2, [r3]
   1ed52:	2800      	cmp	r0, #0
   1ed54:	d1f7      	bne.n	1ed46 <cmd_le_generate_dhkey+0x12>
   1ed56:	f3bf 8f5b 	dmb	ish
   1ed5a:	d10e      	bne.n	1ed7a <cmd_le_generate_dhkey+0x46>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	sys_memcpy_swap(&ecdh.public_key_be[0], &key[0], 32);
   1ed5c:	4621      	mov	r1, r4
   1ed5e:	4809      	ldr	r0, [pc, #36]	; (1ed84 <cmd_le_generate_dhkey+0x50>)
   1ed60:	f7ff fe98 	bl	1ea94 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecdh.public_key_be[32], &key[32], 32);
   1ed64:	4808      	ldr	r0, [pc, #32]	; (1ed88 <cmd_le_generate_dhkey+0x54>)
   1ed66:	f104 0120 	add.w	r1, r4, #32
   1ed6a:	f7ff fe93 	bl	1ea94 <sys_memcpy_swap.constprop.0>
   1ed6e:	4807      	ldr	r0, [pc, #28]	; (1ed8c <cmd_le_generate_dhkey+0x58>)
   1ed70:	2100      	movs	r1, #0
   1ed72:	f004 fb69 	bl	23448 <z_impl_k_poll_signal_raise>

	work_submit();

	return 0;
   1ed76:	2000      	movs	r0, #0
}
   1ed78:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1ed7a:	200c      	movs	r0, #12
   1ed7c:	e7fc      	b.n	1ed78 <cmd_le_generate_dhkey+0x44>
   1ed7e:	bf00      	nop
   1ed80:	2000214c 	.word	0x2000214c
   1ed84:	20002a29 	.word	0x20002a29
   1ed88:	20002a49 	.word	0x20002a49
   1ed8c:	20002150 	.word	0x20002150

0001ed90 <m_assert_handler>:
	mpsl_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_MPSL_ASSERT_HANDLER) */
static void m_assert_handler(const char *const file, const uint32_t line)
{
   1ed90:	b508      	push	{r3, lr}
   1ed92:	4602      	mov	r2, r0
   1ed94:	460b      	mov	r3, r1
	LOG_ERR("MPSL ASSERT: %s, %d", log_strdup(file), line);
   1ed96:	4805      	ldr	r0, [pc, #20]	; (1edac <m_assert_handler+0x1c>)
   1ed98:	2145      	movs	r1, #69	; 0x45
   1ed9a:	f005 fb06 	bl	243aa <z_log_minimal_printk>
	k_oops();
   1ed9e:	4040      	eors	r0, r0
   1eda0:	f380 8811 	msr	BASEPRI, r0
   1eda4:	f04f 0003 	mov.w	r0, #3
   1eda8:	df02      	svc	2
}
   1edaa:	bd08      	pop	{r3, pc}
   1edac:	0002b2f9 	.word	0x0002b2f9

0001edb0 <mpsl_low_prio_work_handler>:
{
   1edb0:	b508      	push	{r3, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1edb2:	f04f 30ff 	mov.w	r0, #4294967295
   1edb6:	f04f 31ff 	mov.w	r1, #4294967295
   1edba:	f7ff f971 	bl	1e0a0 <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
   1edbe:	b140      	cbz	r0, 1edd2 <mpsl_low_prio_work_handler+0x22>
   1edc0:	4907      	ldr	r1, [pc, #28]	; (1ede0 <mpsl_low_prio_work_handler+0x30>)
   1edc2:	4808      	ldr	r0, [pc, #32]	; (1ede4 <mpsl_low_prio_work_handler+0x34>)
   1edc4:	2247      	movs	r2, #71	; 0x47
   1edc6:	f005 fae2 	bl	2438e <assert_print>
   1edca:	4805      	ldr	r0, [pc, #20]	; (1ede0 <mpsl_low_prio_work_handler+0x30>)
   1edcc:	2147      	movs	r1, #71	; 0x47
   1edce:	f005 fad7 	bl	24380 <assert_post_action>
	mpsl_low_priority_process();
   1edd2:	f7ee fb2c 	bl	d42e <mpsl_low_priority_process>
}
   1edd6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MULTITHREADING_LOCK_RELEASE();
   1edda:	f7ff b969 	b.w	1e0b0 <multithreading_lock_release>
   1edde:	bf00      	nop
   1ede0:	0002b312 	.word	0x0002b312
   1ede4:	000289af 	.word	0x000289af

0001ede8 <mpsl_low_prio_irq_handler>:
	k_work_submit_to_queue(&mpsl_work_q, &mpsl_low_prio_work);
   1ede8:	4901      	ldr	r1, [pc, #4]	; (1edf0 <mpsl_low_prio_irq_handler+0x8>)
   1edea:	4802      	ldr	r0, [pc, #8]	; (1edf4 <mpsl_low_prio_irq_handler+0xc>)
   1edec:	f002 ba52 	b.w	21294 <k_work_submit_to_queue>
   1edf0:	20002160 	.word	0x20002160
   1edf4:	20001b78 	.word	0x20001b78

0001edf8 <mpsl_lib_init>:
	return 0;
#endif
}

static int mpsl_lib_init(const struct device *dev)
{
   1edf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);
	int err = 0;
	mpsl_clock_lfclk_cfg_t clock_cfg;

	clock_cfg.source = m_config_clock_source_get();
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   1edfa:	2332      	movs	r3, #50	; 0x32
   1edfc:	f8ad 3004 	strh.w	r3, [sp, #4]
#else
	clock_cfg.rc_ctiv = 0;
	clock_cfg.rc_temp_ctiv = 0;
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1ee00:	4a13      	ldr	r2, [pc, #76]	; (1ee50 <mpsl_lib_init+0x58>)
	clock_cfg.skip_wait_lfclk_started =
   1ee02:	2300      	movs	r3, #0
	clock_cfg.source = m_config_clock_source_get();
   1ee04:	2501      	movs	r5, #1
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1ee06:	2119      	movs	r1, #25
   1ee08:	4668      	mov	r0, sp
	clock_cfg.skip_wait_lfclk_started =
   1ee0a:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
   1ee0e:	f8ad 5000 	strh.w	r5, [sp]
	clock_cfg.rc_temp_ctiv = 0;
   1ee12:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1ee16:	f7e5 ff1b 	bl	4c50 <mpsl_init>
	if (err) {
   1ee1a:	4604      	mov	r4, r0
   1ee1c:	b9a0      	cbnz	r0, 1ee48 <mpsl_lib_init+0x50>
		return err;
	}

#if MPSL_TIMESLOT_SESSION_COUNT > 0
	err = mpsl_timeslot_session_count_set((void *) timeslot_context,
   1ee1e:	480d      	ldr	r0, [pc, #52]	; (1ee54 <mpsl_lib_init+0x5c>)
   1ee20:	4629      	mov	r1, r5
   1ee22:	f7ee f9ed 	bl	d200 <mpsl_timeslot_session_count_set>
			MPSL_TIMESLOT_SESSION_COUNT);
	if (err) {
   1ee26:	4604      	mov	r4, r0
   1ee28:	b970      	cbnz	r0, 1ee48 <mpsl_lib_init+0x50>
		return err;
	}
#endif

	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1ee2a:	4601      	mov	r1, r0
   1ee2c:	462a      	mov	r2, r5
   1ee2e:	2008      	movs	r0, #8
   1ee30:	f7f5 fa04 	bl	1423c <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1ee34:	462a      	mov	r2, r5
   1ee36:	4621      	mov	r1, r4
   1ee38:	200b      	movs	r0, #11
   1ee3a:	f7f5 f9ff 	bl	1423c <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1ee3e:	462a      	mov	r2, r5
   1ee40:	4621      	mov	r1, r4
   1ee42:	4628      	mov	r0, r5
   1ee44:	f7f5 f9fa 	bl	1423c <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_CONNECT_FLAGS);

	return 0;
}
   1ee48:	4620      	mov	r0, r4
   1ee4a:	b003      	add	sp, #12
   1ee4c:	bd30      	pop	{r4, r5, pc}
   1ee4e:	bf00      	nop
   1ee50:	0001ed91 	.word	0x0001ed91
   1ee54:	20002170 	.word	0x20002170

0001ee58 <mpsl_low_prio_init>:

static int mpsl_low_prio_init(const struct device *dev)
{
   1ee58:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);

	k_work_queue_start(&mpsl_work_q, mpsl_work_stack,
   1ee5a:	4d0d      	ldr	r5, [pc, #52]	; (1ee90 <mpsl_low_prio_init+0x38>)
   1ee5c:	490d      	ldr	r1, [pc, #52]	; (1ee94 <mpsl_low_prio_init+0x3c>)
   1ee5e:	2400      	movs	r4, #0
   1ee60:	9400      	str	r4, [sp, #0]
   1ee62:	f06f 0309 	mvn.w	r3, #9
   1ee66:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1ee6a:	4628      	mov	r0, r5
   1ee6c:	f002 fa6c 	bl	21348 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
   1ee70:	4909      	ldr	r1, [pc, #36]	; (1ee98 <mpsl_low_prio_init+0x40>)
   1ee72:	4628      	mov	r0, r5
   1ee74:	f008 fc06 	bl	27684 <z_impl_k_thread_name_set>
			   K_THREAD_STACK_SIZEOF(mpsl_work_stack),
			   K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO), NULL);
	k_thread_name_set(&mpsl_work_q.thread, "MPSL Work");
	k_work_init(&mpsl_low_prio_work, mpsl_low_prio_work_handler);
   1ee78:	4908      	ldr	r1, [pc, #32]	; (1ee9c <mpsl_low_prio_init+0x44>)
   1ee7a:	4809      	ldr	r0, [pc, #36]	; (1eea0 <mpsl_low_prio_init+0x48>)
   1ee7c:	f002 f9b2 	bl	211e4 <k_work_init>

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   1ee80:	4622      	mov	r2, r4
   1ee82:	2104      	movs	r1, #4
   1ee84:	2019      	movs	r0, #25
   1ee86:	f7f5 f9d9 	bl	1423c <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   1ee8a:	4620      	mov	r0, r4
   1ee8c:	b003      	add	sp, #12
   1ee8e:	bd30      	pop	{r4, r5, pc}
   1ee90:	20001b78 	.word	0x20001b78
   1ee94:	20004120 	.word	0x20004120
   1ee98:	0002b33f 	.word	0x0002b33f
   1ee9c:	0001edb1 	.word	0x0001edb1
   1eea0:	20002160 	.word	0x20002160

0001eea4 <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1eea4:	4b01      	ldr	r3, [pc, #4]	; (1eeac <mpsl_hfclk_callback+0x8>)
   1eea6:	2000      	movs	r0, #0
   1eea8:	681b      	ldr	r3, [r3, #0]
   1eeaa:	4718      	bx	r3
   1eeac:	20002194 	.word	0x20002194

0001eeb0 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   1eeb0:	b510      	push	{r4, lr}
	switch (domain) {
   1eeb2:	b130      	cbz	r0, 1eec2 <nrfx_clock_start+0x12>
   1eeb4:	2801      	cmp	r0, #1
   1eeb6:	d10a      	bne.n	1eece <nrfx_clock_start+0x1e>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   1eeb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   1eebc:	4809      	ldr	r0, [pc, #36]	; (1eee4 <nrfx_clock_start+0x34>)
   1eebe:	f7e5 bd3f 	b.w	4940 <mpsl_clock_hfclk_request>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1eec2:	4b09      	ldr	r3, [pc, #36]	; (1eee8 <nrfx_clock_start+0x38>)
}
   1eec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1eec8:	681b      	ldr	r3, [r3, #0]
   1eeca:	2001      	movs	r0, #1
   1eecc:	4718      	bx	r3
		__ASSERT(0, "Not supported");
   1eece:	4907      	ldr	r1, [pc, #28]	; (1eeec <nrfx_clock_start+0x3c>)
   1eed0:	4807      	ldr	r0, [pc, #28]	; (1eef0 <nrfx_clock_start+0x40>)
   1eed2:	221c      	movs	r2, #28
   1eed4:	f005 fa5b 	bl	2438e <assert_print>
}
   1eed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Not supported");
   1eedc:	4803      	ldr	r0, [pc, #12]	; (1eeec <nrfx_clock_start+0x3c>)
   1eede:	211c      	movs	r1, #28
   1eee0:	f005 ba4e 	b.w	24380 <assert_post_action>
   1eee4:	0001eea5 	.word	0x0001eea5
   1eee8:	20002194 	.word	0x20002194
   1eeec:	0002b353 	.word	0x0002b353
   1eef0:	000289af 	.word	0x000289af

0001eef4 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   1eef4:	b508      	push	{r3, lr}
	switch (domain) {
   1eef6:	b180      	cbz	r0, 1ef1a <nrfx_clock_stop+0x26>
   1eef8:	2801      	cmp	r0, #1
   1eefa:	d103      	bne.n	1ef04 <nrfx_clock_stop+0x10>
		/* empty */
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   1eefc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		mpsl_clock_hfclk_release();
   1ef00:	f7e5 bd10 	b.w	4924 <mpsl_clock_hfclk_release>
		__ASSERT(0, "Not supported");
   1ef04:	4905      	ldr	r1, [pc, #20]	; (1ef1c <nrfx_clock_stop+0x28>)
   1ef06:	4806      	ldr	r0, [pc, #24]	; (1ef20 <nrfx_clock_stop+0x2c>)
   1ef08:	222a      	movs	r2, #42	; 0x2a
   1ef0a:	f005 fa40 	bl	2438e <assert_print>
}
   1ef0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT(0, "Not supported");
   1ef12:	4802      	ldr	r0, [pc, #8]	; (1ef1c <nrfx_clock_stop+0x28>)
   1ef14:	212a      	movs	r1, #42	; 0x2a
   1ef16:	f005 ba33 	b.w	24380 <assert_post_action>
}
   1ef1a:	bd08      	pop	{r3, pc}
   1ef1c:	0002b353 	.word	0x0002b353
   1ef20:	000289af 	.word	0x000289af

0001ef24 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   1ef24:	4b01      	ldr	r3, [pc, #4]	; (1ef2c <nrfx_clock_init+0x8>)
   1ef26:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   1ef28:	4801      	ldr	r0, [pc, #4]	; (1ef30 <nrfx_clock_init+0xc>)
   1ef2a:	4770      	bx	lr
   1ef2c:	20002194 	.word	0x20002194
   1ef30:	0bad0000 	.word	0x0bad0000

0001ef34 <timeslot_callback>:
		      "mpsl_timeslot_request failed: %d", ret);
}

static mpsl_timeslot_signal_return_param_t *
timeslot_callback(mpsl_timeslot_session_id_t session_id, uint32_t signal)
{
   1ef34:	b538      	push	{r3, r4, r5, lr}
	int rc;
	__ASSERT_NO_MSG(session_id == _context.session_id);
   1ef36:	4d31      	ldr	r5, [pc, #196]	; (1effc <timeslot_callback+0xc8>)
   1ef38:	7e2b      	ldrb	r3, [r5, #24]
   1ef3a:	4283      	cmp	r3, r0
{
   1ef3c:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(session_id == _context.session_id);
   1ef3e:	d008      	beq.n	1ef52 <timeslot_callback+0x1e>
   1ef40:	492f      	ldr	r1, [pc, #188]	; (1f000 <timeslot_callback+0xcc>)
   1ef42:	4830      	ldr	r0, [pc, #192]	; (1f004 <timeslot_callback+0xd0>)
   1ef44:	224c      	movs	r2, #76	; 0x4c
   1ef46:	f005 fa22 	bl	2438e <assert_print>
   1ef4a:	482d      	ldr	r0, [pc, #180]	; (1f000 <timeslot_callback+0xcc>)
   1ef4c:	214c      	movs	r1, #76	; 0x4c
   1ef4e:	f005 fa17 	bl	24380 <assert_post_action>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ef52:	f3bf 8f5b 	dmb	ish
   1ef56:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   1ef58:	f3bf 8f5b 	dmb	ish

	if (atomic_get(&_context.timeout_occured)) {
   1ef5c:	b10b      	cbz	r3, 1ef62 <timeslot_callback+0x2e>
		return NULL;
	}

	switch (signal) {
   1ef5e:	2000      	movs	r0, #0
   1ef60:	e023      	b.n	1efaa <timeslot_callback+0x76>
   1ef62:	2c09      	cmp	r4, #9
   1ef64:	d842      	bhi.n	1efec <timeslot_callback+0xb8>
   1ef66:	a301      	add	r3, pc, #4	; (adr r3, 1ef6c <timeslot_callback+0x38>)
   1ef68:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
   1ef6c:	0001ef95 	.word	0x0001ef95
   1ef70:	0001efed 	.word	0x0001efed
   1ef74:	0001efed 	.word	0x0001efed
   1ef78:	0001efed 	.word	0x0001efed
   1ef7c:	0001efed 	.word	0x0001efed
   1ef80:	0001efc7 	.word	0x0001efc7
   1ef84:	0001efc7 	.word	0x0001efc7
   1ef88:	0001efbf 	.word	0x0001efbf
   1ef8c:	0001efed 	.word	0x0001efed
   1ef90:	0001ef5f 	.word	0x0001ef5f
	case MPSL_TIMESLOT_SIGNAL_START:
		rc = _context.op_desc->handler(_context.op_desc->context);
   1ef94:	6a2b      	ldr	r3, [r5, #32]
   1ef96:	e9d3 2000 	ldrd	r2, r0, [r3]
   1ef9a:	4790      	blx	r2
		if (rc != FLASH_OP_ONGOING) {
   1ef9c:	2801      	cmp	r0, #1
   1ef9e:	d005      	beq.n	1efac <timeslot_callback+0x78>
			_context.status = (rc == FLASH_OP_DONE) ? 0 : rc;
   1efa0:	63e8      	str	r0, [r5, #60]	; 0x3c
			_context.return_param.callback_action =
   1efa2:	2302      	movs	r3, #2
	default:
		__ASSERT(false, "unexpected signal: %u", signal);
		return NULL;
	}

	return &_context.return_param;
   1efa4:	4818      	ldr	r0, [pc, #96]	; (1f008 <timeslot_callback+0xd4>)
			_context.return_param.callback_action =
   1efa6:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
}
   1efaa:	bd38      	pop	{r3, r4, r5, pc}
			_context.timeslot_request.params.earliest.priority =
   1efac:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
			_context.return_param.params.request.p_next =
   1efb0:	4816      	ldr	r0, [pc, #88]	; (1f00c <timeslot_callback+0xd8>)
   1efb2:	63a8      	str	r0, [r5, #56]	; 0x38
			_context.return_param.callback_action =
   1efb4:	2303      	movs	r3, #3
   1efb6:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
	return &_context.return_param;
   1efba:	3010      	adds	r0, #16
   1efbc:	e7f5      	b.n	1efaa <timeslot_callback+0x76>
	z_impl_k_sem_give(sem);
   1efbe:	480f      	ldr	r0, [pc, #60]	; (1effc <timeslot_callback+0xc8>)
   1efc0:	f001 fe6e 	bl	20ca0 <z_impl_k_sem_give>
   1efc4:	e7cb      	b.n	1ef5e <timeslot_callback+0x2a>
	_context.timeslot_request.params.earliest.priority =
   1efc6:	2400      	movs	r4, #0
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   1efc8:	4910      	ldr	r1, [pc, #64]	; (1f00c <timeslot_callback+0xd8>)
   1efca:	7e28      	ldrb	r0, [r5, #24]
	_context.timeslot_request.params.earliest.priority =
   1efcc:	f885 4029 	strb.w	r4, [r5, #41]	; 0x29
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   1efd0:	f7ee f8bf 	bl	d152 <mpsl_timeslot_request>
	__ASSERT_EVAL((void)ret, (void)ret, ret == 0,
   1efd4:	2800      	cmp	r0, #0
   1efd6:	d0c2      	beq.n	1ef5e <timeslot_callback+0x2a>
   1efd8:	4909      	ldr	r1, [pc, #36]	; (1f000 <timeslot_callback+0xcc>)
   1efda:	480a      	ldr	r0, [pc, #40]	; (1f004 <timeslot_callback+0xd0>)
   1efdc:	2244      	movs	r2, #68	; 0x44
   1efde:	f005 f9d6 	bl	2438e <assert_print>
   1efe2:	2144      	movs	r1, #68	; 0x44
		__ASSERT(false, "unexpected signal: %u", signal);
   1efe4:	4806      	ldr	r0, [pc, #24]	; (1f000 <timeslot_callback+0xcc>)
   1efe6:	f005 f9cb 	bl	24380 <assert_post_action>
		return NULL;
   1efea:	e7b8      	b.n	1ef5e <timeslot_callback+0x2a>
		__ASSERT(false, "unexpected signal: %u", signal);
   1efec:	4904      	ldr	r1, [pc, #16]	; (1f000 <timeslot_callback+0xcc>)
   1efee:	4805      	ldr	r0, [pc, #20]	; (1f004 <timeslot_callback+0xd0>)
   1eff0:	2276      	movs	r2, #118	; 0x76
   1eff2:	f005 f9cc 	bl	2438e <assert_print>
   1eff6:	2176      	movs	r1, #118	; 0x76
   1eff8:	e7f4      	b.n	1efe4 <timeslot_callback+0xb0>
   1effa:	bf00      	nop
   1effc:	20002198 	.word	0x20002198
   1f000:	0002b390 	.word	0x0002b390
   1f004:	000289af 	.word	0x000289af
   1f008:	200021cc 	.word	0x200021cc
   1f00c:	200021bc 	.word	0x200021bc

0001f010 <nrf_flash_sync_init>:
	return z_impl_k_sem_init(sem, initial_count, limit);
   1f010:	4802      	ldr	r0, [pc, #8]	; (1f01c <nrf_flash_sync_init+0xc>)
   1f012:	2201      	movs	r2, #1
   1f014:	2100      	movs	r1, #0
   1f016:	f008 bb80 	b.w	2771a <z_impl_k_sem_init>
   1f01a:	bf00      	nop
   1f01c:	20002198 	.word	0x20002198

0001f020 <nrf_flash_sync_set_context>:
}

void nrf_flash_sync_set_context(uint32_t duration)
{
	LOG_DBG("duration: %u", duration);
	_context.request_length_us = duration;
   1f020:	4b01      	ldr	r3, [pc, #4]	; (1f028 <nrf_flash_sync_set_context+0x8>)
   1f022:	61d8      	str	r0, [r3, #28]
}
   1f024:	4770      	bx	lr
   1f026:	bf00      	nop
   1f028:	20002198 	.word	0x20002198

0001f02c <nrf_flash_sync_exe>:
{
	return mpsl_is_initialized();
}

int nrf_flash_sync_exe(struct flash_op_desc *op_desc)
{
   1f02c:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("");

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1f02e:	f04f 31ff 	mov.w	r1, #4294967295
{
   1f032:	4606      	mov	r6, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1f034:	f04f 30ff 	mov.w	r0, #4294967295
   1f038:	f7ff f832 	bl	1e0a0 <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
   1f03c:	b140      	cbz	r0, 1f050 <nrf_flash_sync_exe+0x24>
   1f03e:	494c      	ldr	r1, [pc, #304]	; (1f170 <nrf_flash_sync_exe+0x144>)
   1f040:	484c      	ldr	r0, [pc, #304]	; (1f174 <nrf_flash_sync_exe+0x148>)
   1f042:	2293      	movs	r2, #147	; 0x93
   1f044:	f005 f9a3 	bl	2438e <assert_print>
   1f048:	4849      	ldr	r0, [pc, #292]	; (1f170 <nrf_flash_sync_exe+0x144>)
   1f04a:	2193      	movs	r1, #147	; 0x93
   1f04c:	f005 f998 	bl	24380 <assert_post_action>
	int32_t ret = mpsl_timeslot_session_open(timeslot_callback,
   1f050:	4c49      	ldr	r4, [pc, #292]	; (1f178 <nrf_flash_sync_exe+0x14c>)
   1f052:	484a      	ldr	r0, [pc, #296]	; (1f17c <nrf_flash_sync_exe+0x150>)
   1f054:	f104 0118 	add.w	r1, r4, #24
   1f058:	f7e2 fbca 	bl	17f0 <mpsl_timeslot_session_open>
   1f05c:	4605      	mov	r5, r0
						 &_context.session_id);
	MULTITHREADING_LOCK_RELEASE();
   1f05e:	f7ff f827 	bl	1e0b0 <multithreading_lock_release>

	if (ret < 0) {
   1f062:	2d00      	cmp	r5, #0
   1f064:	da07      	bge.n	1f076 <nrf_flash_sync_exe+0x4a>
		LOG_ERR("mpsl_timeslot_session_open failed: %d", ret);
   1f066:	4846      	ldr	r0, [pc, #280]	; (1f180 <nrf_flash_sync_exe+0x154>)
   1f068:	462a      	mov	r2, r5
   1f06a:	2145      	movs	r1, #69	; 0x45
   1f06c:	f005 f99d 	bl	243aa <z_log_minimal_printk>
		return -ENOMEM;
   1f070:	f06f 000b 	mvn.w	r0, #11
	if (atomic_get(&_context.timeout_occured)) {
		k_sem_reset(&_context.timeout_sem);
	}

	return _context.status;
}
   1f074:	bd70      	pop	{r4, r5, r6, pc}
	req->params.earliest.hfclk = MPSL_TIMESLOT_HFCLK_CFG_NO_GUARANTEE;
   1f076:	f240 1301 	movw	r3, #257	; 0x101
   1f07a:	8523      	strh	r3, [r4, #40]	; 0x28
		_context.request_length_us + TIMESLOT_LENGTH_SLACK_US;
   1f07c:	69e3      	ldr	r3, [r4, #28]
	_context.op_desc = op_desc;
   1f07e:	6226      	str	r6, [r4, #32]
		_context.request_length_us + TIMESLOT_LENGTH_SLACK_US;
   1f080:	3364      	adds	r3, #100	; 0x64
	req->params.earliest.length_us =
   1f082:	62e3      	str	r3, [r4, #44]	; 0x2c
	req->params.earliest.timeout_us = MPSL_TIMESLOT_EARLIEST_TIMEOUT_MAX_US;
   1f084:	4b3f      	ldr	r3, [pc, #252]	; (1f184 <nrf_flash_sync_exe+0x158>)
   1f086:	6323      	str	r3, [r4, #48]	; 0x30
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
   1f088:	2200      	movs	r2, #0
	_context.status = -ETIMEDOUT;
   1f08a:	f06f 0373 	mvn.w	r3, #115	; 0x73
   1f08e:	63e3      	str	r3, [r4, #60]	; 0x3c
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
   1f090:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1f094:	f104 0340 	add.w	r3, r4, #64	; 0x40
   1f098:	f3bf 8f5b 	dmb	ish
   1f09c:	e853 1f00 	ldrex	r1, [r3]
   1f0a0:	e843 2000 	strex	r0, r2, [r3]
   1f0a4:	2800      	cmp	r0, #0
   1f0a6:	d1f9      	bne.n	1f09c <nrf_flash_sync_exe+0x70>
   1f0a8:	f3bf 8f5b 	dmb	ish
	__ASSERT_NO_MSG(k_sem_count_get(&_context.timeout_sem) == 0);
   1f0ac:	68a2      	ldr	r2, [r4, #8]
   1f0ae:	461d      	mov	r5, r3
   1f0b0:	b142      	cbz	r2, 1f0c4 <nrf_flash_sync_exe+0x98>
   1f0b2:	492f      	ldr	r1, [pc, #188]	; (1f170 <nrf_flash_sync_exe+0x144>)
   1f0b4:	482f      	ldr	r0, [pc, #188]	; (1f174 <nrf_flash_sync_exe+0x148>)
   1f0b6:	22a9      	movs	r2, #169	; 0xa9
   1f0b8:	f005 f969 	bl	2438e <assert_print>
   1f0bc:	482c      	ldr	r0, [pc, #176]	; (1f170 <nrf_flash_sync_exe+0x144>)
   1f0be:	21a9      	movs	r1, #169	; 0xa9
   1f0c0:	f005 f95e 	bl	24380 <assert_post_action>
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1f0c4:	f04f 30ff 	mov.w	r0, #4294967295
   1f0c8:	f04f 31ff 	mov.w	r1, #4294967295
   1f0cc:	f7fe ffe8 	bl	1e0a0 <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
   1f0d0:	b140      	cbz	r0, 1f0e4 <nrf_flash_sync_exe+0xb8>
   1f0d2:	4927      	ldr	r1, [pc, #156]	; (1f170 <nrf_flash_sync_exe+0x144>)
   1f0d4:	4827      	ldr	r0, [pc, #156]	; (1f174 <nrf_flash_sync_exe+0x148>)
   1f0d6:	22ac      	movs	r2, #172	; 0xac
   1f0d8:	f005 f959 	bl	2438e <assert_print>
   1f0dc:	4824      	ldr	r0, [pc, #144]	; (1f170 <nrf_flash_sync_exe+0x144>)
   1f0de:	21ac      	movs	r1, #172	; 0xac
   1f0e0:	f005 f94e 	bl	24380 <assert_post_action>
	ret = mpsl_timeslot_request(_context.session_id, req);
   1f0e4:	4928      	ldr	r1, [pc, #160]	; (1f188 <nrf_flash_sync_exe+0x15c>)
   1f0e6:	7e20      	ldrb	r0, [r4, #24]
   1f0e8:	f7ee f833 	bl	d152 <mpsl_timeslot_request>
	__ASSERT_EVAL((void)ret, (void)ret, ret == 0,
   1f0ec:	b140      	cbz	r0, 1f100 <nrf_flash_sync_exe+0xd4>
   1f0ee:	4920      	ldr	r1, [pc, #128]	; (1f170 <nrf_flash_sync_exe+0x144>)
   1f0f0:	4820      	ldr	r0, [pc, #128]	; (1f174 <nrf_flash_sync_exe+0x148>)
   1f0f2:	22ae      	movs	r2, #174	; 0xae
   1f0f4:	f005 f94b 	bl	2438e <assert_print>
   1f0f8:	481d      	ldr	r0, [pc, #116]	; (1f170 <nrf_flash_sync_exe+0x144>)
   1f0fa:	21ae      	movs	r1, #174	; 0xae
   1f0fc:	f005 f940 	bl	24380 <assert_post_action>
	MULTITHREADING_LOCK_RELEASE();
   1f100:	f7fe ffd6 	bl	1e0b0 <multithreading_lock_release>
	return z_impl_k_sem_take(sem, timeout);
   1f104:	4a21      	ldr	r2, [pc, #132]	; (1f18c <nrf_flash_sync_exe+0x160>)
   1f106:	481c      	ldr	r0, [pc, #112]	; (1f178 <nrf_flash_sync_exe+0x14c>)
   1f108:	2300      	movs	r3, #0
   1f10a:	f001 fe03 	bl	20d14 <z_impl_k_sem_take>
	if (k_sem_take(&_context.timeout_sem, K_MSEC(FLASH_TIMEOUT_MS)) < 0) {
   1f10e:	2800      	cmp	r0, #0
   1f110:	da0e      	bge.n	1f130 <nrf_flash_sync_exe+0x104>
		LOG_ERR("timeout");
   1f112:	481f      	ldr	r0, [pc, #124]	; (1f190 <nrf_flash_sync_exe+0x164>)
   1f114:	2145      	movs	r1, #69	; 0x45
   1f116:	f005 f948 	bl	243aa <z_log_minimal_printk>
   1f11a:	f3bf 8f5b 	dmb	ish
   1f11e:	2301      	movs	r3, #1
   1f120:	e855 2f00 	ldrex	r2, [r5]
   1f124:	e845 3100 	strex	r1, r3, [r5]
   1f128:	2900      	cmp	r1, #0
   1f12a:	d1f9      	bne.n	1f120 <nrf_flash_sync_exe+0xf4>
   1f12c:	f3bf 8f5b 	dmb	ish
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1f130:	f04f 30ff 	mov.w	r0, #4294967295
   1f134:	f04f 31ff 	mov.w	r1, #4294967295
   1f138:	f7fe ffb2 	bl	1e0a0 <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
   1f13c:	b140      	cbz	r0, 1f150 <nrf_flash_sync_exe+0x124>
   1f13e:	490c      	ldr	r1, [pc, #48]	; (1f170 <nrf_flash_sync_exe+0x144>)
   1f140:	480c      	ldr	r0, [pc, #48]	; (1f174 <nrf_flash_sync_exe+0x148>)
   1f142:	22b9      	movs	r2, #185	; 0xb9
   1f144:	f005 f923 	bl	2438e <assert_print>
   1f148:	4809      	ldr	r0, [pc, #36]	; (1f170 <nrf_flash_sync_exe+0x144>)
   1f14a:	21b9      	movs	r1, #185	; 0xb9
   1f14c:	f005 f918 	bl	24380 <assert_post_action>
	mpsl_timeslot_session_close(_context.session_id);
   1f150:	7e20      	ldrb	r0, [r4, #24]
   1f152:	f7ee f837 	bl	d1c4 <mpsl_timeslot_session_close>
	MULTITHREADING_LOCK_RELEASE();
   1f156:	f7fe ffab 	bl	1e0b0 <multithreading_lock_release>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1f15a:	f3bf 8f5b 	dmb	ish
   1f15e:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1f160:	f3bf 8f5b 	dmb	ish
	if (atomic_get(&_context.timeout_occured)) {
   1f164:	b113      	cbz	r3, 1f16c <nrf_flash_sync_exe+0x140>
	z_impl_k_sem_reset(sem);
   1f166:	4804      	ldr	r0, [pc, #16]	; (1f178 <nrf_flash_sync_exe+0x14c>)
   1f168:	f001 fe3e 	bl	20de8 <z_impl_k_sem_reset>
	return _context.status;
   1f16c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1f16e:	e781      	b.n	1f074 <nrf_flash_sync_exe+0x48>
   1f170:	0002b390 	.word	0x0002b390
   1f174:	000289af 	.word	0x000289af
   1f178:	20002198 	.word	0x20002198
   1f17c:	0001ef35 	.word	0x0001ef35
   1f180:	0002b3ca 	.word	0x0002b3ca
   1f184:	0f423fff 	.word	0x0f423fff
   1f188:	200021bc 	.word	0x200021bc
   1f18c:	000b7b44 	.word	0x000b7b44
   1f190:	0002b3f5 	.word	0x0002b3f5

0001f194 <nrf_flash_sync_check_time_limit>:
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_timer_task_trigger(NRF_TIMER_Type * p_reg,
                                              nrf_timer_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f194:	4b07      	ldr	r3, [pc, #28]	; (1f1b4 <nrf_flash_sync_check_time_limit+0x20>)
   1f196:	2201      	movs	r2, #1
   1f198:	641a      	str	r2, [r3, #64]	; 0x40
}

NRF_STATIC_INLINE uint32_t nrf_timer_cc_get(NRF_TIMER_Type const * p_reg,
                                            nrf_timer_cc_channel_t cc_channel)
{
    return (uint32_t)p_reg->CC[cc_channel];
   1f19a:	f8d3 3540 	ldr.w	r3, [r3, #1344]	; 0x540
}

bool nrf_flash_sync_check_time_limit(uint32_t iteration)
{
	uint32_t now_us = get_timeslot_time_us();
	uint32_t time_per_iteration_us = now_us / iteration;
   1f19e:	fbb3 f0f0 	udiv	r0, r3, r0
	return now_us + time_per_iteration_us >= _context.request_length_us;
   1f1a2:	4418      	add	r0, r3
   1f1a4:	4b04      	ldr	r3, [pc, #16]	; (1f1b8 <nrf_flash_sync_check_time_limit+0x24>)
   1f1a6:	69db      	ldr	r3, [r3, #28]
}
   1f1a8:	4298      	cmp	r0, r3
   1f1aa:	bf34      	ite	cc
   1f1ac:	2000      	movcc	r0, #0
   1f1ae:	2001      	movcs	r0, #1
   1f1b0:	4770      	bx	lr
   1f1b2:	bf00      	nop
   1f1b4:	40008000 	.word	0x40008000
   1f1b8:	20002198 	.word	0x20002198

0001f1bc <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1f1bc:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   1f1c0:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1f1c4:	2a06      	cmp	r2, #6
   1f1c6:	d109      	bne.n	1f1dc <nrf52_errata_16+0x20>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   1f1c8:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
   1f1cc:	f3c3 1303 	ubfx	r3, r3, #4, #4
   1f1d0:	3b03      	subs	r3, #3
   1f1d2:	2b04      	cmp	r3, #4
   1f1d4:	d802      	bhi.n	1f1dc <nrf52_errata_16+0x20>
   1f1d6:	4a02      	ldr	r2, [pc, #8]	; (1f1e0 <nrf52_errata_16+0x24>)
   1f1d8:	5cd0      	ldrb	r0, [r2, r3]
   1f1da:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
   1f1dc:	2000      	movs	r0, #0
    #endif
}
   1f1de:	4770      	bx	lr
   1f1e0:	0002b421 	.word	0x0002b421

0001f1e4 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1f1e4:	4a02      	ldr	r2, [pc, #8]	; (1f1f0 <nvmc_wait+0xc>)
   1f1e6:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   1f1ea:	2b00      	cmp	r3, #0
   1f1ec:	d0fb      	beq.n	1f1e6 <nvmc_wait+0x2>
}
   1f1ee:	4770      	bx	lr
   1f1f0:	4001e000 	.word	0x4001e000

0001f1f4 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   1f1f4:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
   1f1f6:	f008 f979 	bl	274ec <nrf52_errata_108>
   1f1fa:	b140      	cbz	r0, 1f20e <SystemInit+0x1a>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
   1f1fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1f200:	4a90      	ldr	r2, [pc, #576]	; (1f444 <SystemInit+0x250>)
   1f202:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
   1f206:	f3c3 2304 	ubfx	r3, r3, #8, #5
   1f20a:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
   1f20e:	f7ff ffd5 	bl	1f1bc <nrf52_errata_16>
   1f212:	b110      	cbz	r0, 1f21a <SystemInit+0x26>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
   1f214:	4b8c      	ldr	r3, [pc, #560]	; (1f448 <SystemInit+0x254>)
   1f216:	4a8d      	ldr	r2, [pc, #564]	; (1f44c <SystemInit+0x258>)
   1f218:	675a      	str	r2, [r3, #116]	; 0x74
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
   1f21a:	f008 f967 	bl	274ec <nrf52_errata_108>
   1f21e:	b148      	cbz	r0, 1f234 <SystemInit+0x40>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
   1f220:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1f224:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1f228:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
   1f22c:	f3c3 3342 	ubfx	r3, r3, #13, #3
   1f230:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
   1f234:	f7ff ffc2 	bl	1f1bc <nrf52_errata_16>
   1f238:	b130      	cbz	r0, 1f248 <SystemInit+0x54>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
   1f23a:	4a85      	ldr	r2, [pc, #532]	; (1f450 <SystemInit+0x25c>)
   1f23c:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
   1f240:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1f244:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   1f248:	f008 f950 	bl	274ec <nrf52_errata_108>
   1f24c:	b140      	cbz	r0, 1f260 <SystemInit+0x6c>
            NRF_CLOCK->EVENTS_DONE = 0;
   1f24e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f252:	2200      	movs	r2, #0
   1f254:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   1f258:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   1f25c:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
   1f260:	f7ff ffac 	bl	1f1bc <nrf52_errata_16>
   1f264:	b120      	cbz	r0, 1f270 <SystemInit+0x7c>
            *(volatile uint32_t *)0x400005A0 = 0x3;
   1f266:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f26a:	2203      	movs	r2, #3
   1f26c:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
   1f270:	f7ff ffa4 	bl	1f1bc <nrf52_errata_16>
   1f274:	b160      	cbz	r0, 1f290 <SystemInit+0x9c>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
   1f276:	4b77      	ldr	r3, [pc, #476]	; (1f454 <SystemInit+0x260>)
   1f278:	2205      	movs	r2, #5
   1f27a:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
            *(volatile uint32_t *)0x40005688 = 0x00000001;
   1f27e:	2201      	movs	r2, #1
   1f280:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688
            *(volatile uint32_t *)0x40005618 = 0x00000000;
   1f284:	2200      	movs	r2, #0
   1f286:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
   1f28a:	223f      	movs	r2, #63	; 0x3f
   1f28c:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   1f290:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1f294:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1f298:	1c51      	adds	r1, r2, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1f29a:	bf09      	itett	eq
   1f29c:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
   1f2a0:	f8d3 3134 	ldrne.w	r3, [r3, #308]	; 0x134
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1f2a4:	f893 2fe0 	ldrbeq.w	r2, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   1f2a8:	f8d3 3fe8 	ldreq.w	r3, [r3, #4072]	; 0xfe8
   1f2ac:	bf08      	it	eq
   1f2ae:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1f2b2:	2a06      	cmp	r2, #6
   1f2b4:	d14d      	bne.n	1f352 <SystemInit+0x15e>
            {
                switch(var2)
   1f2b6:	3b03      	subs	r3, #3
   1f2b8:	2b04      	cmp	r3, #4
   1f2ba:	d803      	bhi.n	1f2c4 <SystemInit+0xd0>
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   1f2bc:	4a66      	ldr	r2, [pc, #408]	; (1f458 <SystemInit+0x264>)
   1f2be:	5cd3      	ldrb	r3, [r2, r3]
   1f2c0:	2b00      	cmp	r3, #0
   1f2c2:	d046      	beq.n	1f352 <SystemInit+0x15e>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1f2c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1f2c8:	4b64      	ldr	r3, [pc, #400]	; (1f45c <SystemInit+0x268>)
   1f2ca:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   1f2ce:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   1f2d2:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   1f2d6:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   1f2da:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   1f2de:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   1f2e2:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   1f2e6:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   1f2ea:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   1f2ee:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   1f2f2:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   1f2f6:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   1f2fa:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   1f2fe:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   1f302:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   1f306:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   1f30a:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   1f30e:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   1f312:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   1f316:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   1f31a:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   1f31e:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   1f322:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   1f326:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   1f32a:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   1f32e:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   1f332:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   1f336:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   1f33a:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   1f33e:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   1f342:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   1f346:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   1f34a:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   1f34e:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
   1f352:	f008 f8cb 	bl	274ec <nrf52_errata_108>
   1f356:	b148      	cbz	r0, 1f36c <SystemInit+0x178>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
   1f358:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1f35c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1f360:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   1f364:	f003 034f 	and.w	r3, r3, #79	; 0x4f
   1f368:	f8c2 3ee4 	str.w	r3, [r2, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   1f36c:	f008 f8be 	bl	274ec <nrf52_errata_108>
   1f370:	b148      	cbz	r0, 1f386 <SystemInit+0x192>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   1f372:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f376:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1f37a:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   1f37c:	bf44      	itt	mi
   1f37e:	f06f 0201 	mvnmi.w	r2, #1
   1f382:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1f386:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1f38a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1f38e:	2a06      	cmp	r2, #6
   1f390:	d126      	bne.n	1f3e0 <SystemInit+0x1ec>
            {
                switch(var2)
   1f392:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   1f396:	3b03      	subs	r3, #3
   1f398:	2b04      	cmp	r3, #4
   1f39a:	d802      	bhi.n	1f3a2 <SystemInit+0x1ae>
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
   1f39c:	4a30      	ldr	r2, [pc, #192]	; (1f460 <SystemInit+0x26c>)
   1f39e:	5cd3      	ldrb	r3, [r2, r3]
   1f3a0:	b163      	cbz	r3, 1f3bc <SystemInit+0x1c8>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
   1f3a2:	4a30      	ldr	r2, [pc, #192]	; (1f464 <SystemInit+0x270>)
   1f3a4:	f8d2 373c 	ldr.w	r3, [r2, #1852]	; 0x73c
   1f3a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1f3ac:	f8c2 373c 	str.w	r3, [r2, #1852]	; 0x73c
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1f3b0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1f3b4:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   1f3b8:	2b06      	cmp	r3, #6
   1f3ba:	d111      	bne.n	1f3e0 <SystemInit+0x1ec>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1f3bc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1f3c0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   1f3c4:	3b03      	subs	r3, #3
   1f3c6:	2b04      	cmp	r3, #4
   1f3c8:	d802      	bhi.n	1f3d0 <SystemInit+0x1dc>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   1f3ca:	4a27      	ldr	r2, [pc, #156]	; (1f468 <SystemInit+0x274>)
   1f3cc:	5cd3      	ldrb	r3, [r2, r3]
   1f3ce:	b13b      	cbz	r3, 1f3e0 <SystemInit+0x1ec>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   1f3d0:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1f3d4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   1f3d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f3dc:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1f3e0:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1f3e4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1f3e8:	2a00      	cmp	r2, #0
   1f3ea:	db03      	blt.n	1f3f4 <SystemInit+0x200>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   1f3ec:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1f3f0:	2b00      	cmp	r3, #0
   1f3f2:	da22      	bge.n	1f43a <SystemInit+0x246>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1f3f4:	491d      	ldr	r1, [pc, #116]	; (1f46c <SystemInit+0x278>)
   1f3f6:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1f3f8:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1f3fc:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1f400:	2415      	movs	r4, #21
    nvmc_wait();
   1f402:	f7ff feef 	bl	1f1e4 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1f406:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   1f40a:	f7ff feeb 	bl	1f1e4 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   1f40e:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   1f412:	f7ff fee7 	bl	1f1e4 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1f416:	2300      	movs	r3, #0
   1f418:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   1f41c:	f7ff fee2 	bl	1f1e4 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   1f420:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1f424:	490a      	ldr	r1, [pc, #40]	; (1f450 <SystemInit+0x25c>)
   1f426:	4b12      	ldr	r3, [pc, #72]	; (1f470 <SystemInit+0x27c>)
   1f428:	68ca      	ldr	r2, [r1, #12]
   1f42a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1f42e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1f430:	60cb      	str	r3, [r1, #12]
   1f432:	f3bf 8f4f 	dsb	sy
    __NOP();
   1f436:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1f438:	e7fd      	b.n	1f436 <SystemInit+0x242>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   1f43a:	4b0e      	ldr	r3, [pc, #56]	; (1f474 <SystemInit+0x280>)
   1f43c:	4a0e      	ldr	r2, [pc, #56]	; (1f478 <SystemInit+0x284>)
   1f43e:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   1f440:	bd10      	pop	{r4, pc}
   1f442:	bf00      	nop
   1f444:	40013000 	.word	0x40013000
   1f448:	4007c000 	.word	0x4007c000
   1f44c:	baadf00d 	.word	0xbaadf00d
   1f450:	e000ed00 	.word	0xe000ed00
   1f454:	40005000 	.word	0x40005000
   1f458:	0002b412 	.word	0x0002b412
   1f45c:	4000c000 	.word	0x4000c000
   1f460:	0002b417 	.word	0x0002b417
   1f464:	40001000 	.word	0x40001000
   1f468:	0002b41c 	.word	0x0002b41c
   1f46c:	4001e000 	.word	0x4001e000
   1f470:	05fa0004 	.word	0x05fa0004
   1f474:	2000064c 	.word	0x2000064c
   1f478:	03d09000 	.word	0x03d09000

0001f47c <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   1f47c:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   1f47e:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   1f480:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   1f482:	fab2 f382 	clz	r3, r2
   1f486:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
   1f48a:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
   1f48c:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
   1f48e:	d014      	beq.n	1f4ba <nrfx_flag32_alloc+0x3e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1f490:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
   1f494:	fa05 f303 	lsl.w	r3, r5, r3
   1f498:	ea22 0303 	bic.w	r3, r2, r3
   1f49c:	e850 6f00 	ldrex	r6, [r0]
   1f4a0:	4296      	cmp	r6, r2
   1f4a2:	d104      	bne.n	1f4ae <nrfx_flag32_alloc+0x32>
   1f4a4:	e840 3c00 	strex	ip, r3, [r0]
   1f4a8:	f1bc 0f00 	cmp.w	ip, #0
   1f4ac:	d1f6      	bne.n	1f49c <nrfx_flag32_alloc+0x20>
   1f4ae:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1f4b2:	d1e5      	bne.n	1f480 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
   1f4b4:	4802      	ldr	r0, [pc, #8]	; (1f4c0 <nrfx_flag32_alloc+0x44>)
    *p_flag = idx;
   1f4b6:	700c      	strb	r4, [r1, #0]
}
   1f4b8:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
   1f4ba:	4802      	ldr	r0, [pc, #8]	; (1f4c4 <nrfx_flag32_alloc+0x48>)
   1f4bc:	e7fc      	b.n	1f4b8 <nrfx_flag32_alloc+0x3c>
   1f4be:	bf00      	nop
   1f4c0:	0bad0000 	.word	0x0bad0000
   1f4c4:	0bad0002 	.word	0x0bad0002

0001f4c8 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   1f4c8:	6803      	ldr	r3, [r0, #0]
   1f4ca:	40cb      	lsrs	r3, r1
   1f4cc:	07db      	lsls	r3, r3, #31
{
   1f4ce:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
   1f4d0:	d415      	bmi.n	1f4fe <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   1f4d2:	2301      	movs	r3, #1
   1f4d4:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
   1f4d8:	6803      	ldr	r3, [r0, #0]
   1f4da:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   1f4de:	ea41 0203 	orr.w	r2, r1, r3
   1f4e2:	e850 4f00 	ldrex	r4, [r0]
   1f4e6:	429c      	cmp	r4, r3
   1f4e8:	d104      	bne.n	1f4f4 <nrfx_flag32_free+0x2c>
   1f4ea:	e840 2c00 	strex	ip, r2, [r0]
   1f4ee:	f1bc 0f00 	cmp.w	ip, #0
   1f4f2:	d1f6      	bne.n	1f4e2 <nrfx_flag32_free+0x1a>
   1f4f4:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1f4f8:	d1ee      	bne.n	1f4d8 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
   1f4fa:	4802      	ldr	r0, [pc, #8]	; (1f504 <nrfx_flag32_free+0x3c>)
}
   1f4fc:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1f4fe:	4802      	ldr	r0, [pc, #8]	; (1f508 <nrfx_flag32_free+0x40>)
   1f500:	e7fc      	b.n	1f4fc <nrfx_flag32_free+0x34>
   1f502:	bf00      	nop
   1f504:	0bad0000 	.word	0x0bad0000
   1f508:	0bad0004 	.word	0x0bad0004

0001f50c <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   1f50c:	4b03      	ldr	r3, [pc, #12]	; (1f51c <pin_in_use_by_te+0x10>)
   1f50e:	3008      	adds	r0, #8
   1f510:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1f514:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1f518:	4770      	bx	lr
   1f51a:	bf00      	nop
   1f51c:	20000650 	.word	0x20000650

0001f520 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   1f520:	4b04      	ldr	r3, [pc, #16]	; (1f534 <pin_has_trigger+0x14>)
   1f522:	3008      	adds	r0, #8
   1f524:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1f528:	f010 001c 	ands.w	r0, r0, #28
   1f52c:	bf18      	it	ne
   1f52e:	2001      	movne	r0, #1
   1f530:	4770      	bx	lr
   1f532:	bf00      	nop
   1f534:	20000650 	.word	0x20000650

0001f538 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1f538:	4b03      	ldr	r3, [pc, #12]	; (1f548 <pin_is_output+0x10>)
   1f53a:	3008      	adds	r0, #8
   1f53c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1f540:	f3c0 0040 	ubfx	r0, r0, #1, #1
   1f544:	4770      	bx	lr
   1f546:	bf00      	nop
   1f548:	20000650 	.word	0x20000650

0001f54c <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   1f54c:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1f54e:	f100 0308 	add.w	r3, r0, #8
   1f552:	4c0c      	ldr	r4, [pc, #48]	; (1f584 <call_handler+0x38>)
   1f554:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   1f558:	05da      	lsls	r2, r3, #23
{
   1f55a:	4605      	mov	r5, r0
   1f55c:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1f55e:	d507      	bpl.n	1f570 <call_handler+0x24>
   1f560:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   1f564:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   1f568:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   1f56c:	6852      	ldr	r2, [r2, #4]
   1f56e:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   1f570:	68a3      	ldr	r3, [r4, #8]
   1f572:	b12b      	cbz	r3, 1f580 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1f574:	68e2      	ldr	r2, [r4, #12]
   1f576:	4631      	mov	r1, r6
   1f578:	4628      	mov	r0, r5
    }
}
   1f57a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1f57e:	4718      	bx	r3
}
   1f580:	bd70      	pop	{r4, r5, r6, pc}
   1f582:	bf00      	nop
   1f584:	20000650 	.word	0x20000650

0001f588 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1f588:	4a19      	ldr	r2, [pc, #100]	; (1f5f0 <release_handler+0x68>)
   1f58a:	3008      	adds	r0, #8
{
   1f58c:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1f58e:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   1f592:	05d9      	lsls	r1, r3, #23
   1f594:	d51d      	bpl.n	1f5d2 <release_handler+0x4a>
   1f596:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   1f59a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1f59e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1f5a2:	f102 0410 	add.w	r4, r2, #16
   1f5a6:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   1f5a8:	f834 3b02 	ldrh.w	r3, [r4], #2
   1f5ac:	f413 7f80 	tst.w	r3, #256	; 0x100
   1f5b0:	d003      	beq.n	1f5ba <release_handler+0x32>
   1f5b2:	f3c3 2343 	ubfx	r3, r3, #9, #4
   1f5b6:	4299      	cmp	r1, r3
   1f5b8:	d00b      	beq.n	1f5d2 <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1f5ba:	3001      	adds	r0, #1
   1f5bc:	2820      	cmp	r0, #32
   1f5be:	d1f3      	bne.n	1f5a8 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   1f5c0:	2300      	movs	r3, #0
   1f5c2:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1f5c6:	480b      	ldr	r0, [pc, #44]	; (1f5f4 <release_handler+0x6c>)
   1f5c8:	f7ff ff7e 	bl	1f4c8 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   1f5cc:	4b0a      	ldr	r3, [pc, #40]	; (1f5f8 <release_handler+0x70>)
   1f5ce:	4298      	cmp	r0, r3
   1f5d0:	d100      	bne.n	1f5d4 <release_handler+0x4c>
}
   1f5d2:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
   1f5d4:	4909      	ldr	r1, [pc, #36]	; (1f5fc <release_handler+0x74>)
   1f5d6:	480a      	ldr	r0, [pc, #40]	; (1f600 <release_handler+0x78>)
   1f5d8:	f44f 7299 	mov.w	r2, #306	; 0x132
   1f5dc:	f004 fed7 	bl	2438e <assert_print>
}
   1f5e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        NRFX_ASSERT(err == NRFX_SUCCESS);
   1f5e4:	4805      	ldr	r0, [pc, #20]	; (1f5fc <release_handler+0x74>)
   1f5e6:	f44f 7199 	mov.w	r1, #306	; 0x132
   1f5ea:	f004 bec9 	b.w	24380 <assert_post_action>
   1f5ee:	bf00      	nop
   1f5f0:	20000650 	.word	0x20000650
   1f5f4:	200006a4 	.word	0x200006a4
   1f5f8:	0bad0000 	.word	0x0bad0000
   1f5fc:	0002b426 	.word	0x0002b426
   1f600:	000289af 	.word	0x000289af

0001f604 <pin_handler_trigger_uninit>:
{
   1f604:	b538      	push	{r3, r4, r5, lr}
   1f606:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   1f608:	f7ff ff80 	bl	1f50c <pin_in_use_by_te>
   1f60c:	4c09      	ldr	r4, [pc, #36]	; (1f634 <pin_handler_trigger_uninit+0x30>)
   1f60e:	f102 0508 	add.w	r5, r2, #8
   1f612:	b140      	cbz	r0, 1f626 <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1f614:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   1f618:	4907      	ldr	r1, [pc, #28]	; (1f638 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   1f61a:	0b5b      	lsrs	r3, r3, #13
   1f61c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   1f620:	2000      	movs	r0, #0
   1f622:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
   1f626:	4610      	mov	r0, r2
   1f628:	f7ff ffae 	bl	1f588 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   1f62c:	2300      	movs	r3, #0
   1f62e:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   1f632:	bd38      	pop	{r3, r4, r5, pc}
   1f634:	20000650 	.word	0x20000650
   1f638:	40006000 	.word	0x40006000

0001f63c <nrf_gpio_pin_port_decode>:
{
   1f63c:	b510      	push	{r4, lr}
   1f63e:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1f640:	6800      	ldr	r0, [r0, #0]
   1f642:	f007 ff64 	bl	2750e <nrf_gpio_pin_present_check>
   1f646:	b950      	cbnz	r0, 1f65e <nrf_gpio_pin_port_decode+0x22>
   1f648:	490f      	ldr	r1, [pc, #60]	; (1f688 <nrf_gpio_pin_port_decode+0x4c>)
   1f64a:	4810      	ldr	r0, [pc, #64]	; (1f68c <nrf_gpio_pin_port_decode+0x50>)
   1f64c:	f240 2229 	movw	r2, #553	; 0x229
   1f650:	f004 fe9d 	bl	2438e <assert_print>
   1f654:	480c      	ldr	r0, [pc, #48]	; (1f688 <nrf_gpio_pin_port_decode+0x4c>)
   1f656:	f240 2129 	movw	r1, #553	; 0x229
   1f65a:	f004 fe91 	bl	24380 <assert_post_action>
    uint32_t pin_number = *p_pin;
   1f65e:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   1f660:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1f664:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   1f666:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1f668:	d00a      	beq.n	1f680 <nrf_gpio_pin_port_decode+0x44>
            NRFX_ASSERT(0);
   1f66a:	4907      	ldr	r1, [pc, #28]	; (1f688 <nrf_gpio_pin_port_decode+0x4c>)
   1f66c:	4807      	ldr	r0, [pc, #28]	; (1f68c <nrf_gpio_pin_port_decode+0x50>)
   1f66e:	f240 222e 	movw	r2, #558	; 0x22e
   1f672:	f004 fe8c 	bl	2438e <assert_print>
   1f676:	4804      	ldr	r0, [pc, #16]	; (1f688 <nrf_gpio_pin_port_decode+0x4c>)
   1f678:	f240 212e 	movw	r1, #558	; 0x22e
   1f67c:	f004 fe80 	bl	24380 <assert_post_action>
}
   1f680:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   1f684:	bd10      	pop	{r4, pc}
   1f686:	bf00      	nop
   1f688:	0002af83 	.word	0x0002af83
   1f68c:	000289af 	.word	0x000289af

0001f690 <nrfx_gpiote_input_configure>:
{
   1f690:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f692:	4604      	mov	r4, r0
   1f694:	b085      	sub	sp, #20
   1f696:	4617      	mov	r7, r2
   1f698:	461d      	mov	r5, r3
    if (p_input_config)
   1f69a:	b1f1      	cbz	r1, 1f6da <nrfx_gpiote_input_configure+0x4a>
        if (pin_is_task_output(pin))
   1f69c:	f007 ff43 	bl	27526 <pin_is_task_output>
   1f6a0:	b110      	cbz	r0, 1f6a8 <nrfx_gpiote_input_configure+0x18>
                return NRFX_ERROR_INVALID_PARAM;
   1f6a2:	484d      	ldr	r0, [pc, #308]	; (1f7d8 <nrfx_gpiote_input_configure+0x148>)
}
   1f6a4:	b005      	add	sp, #20
   1f6a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1f6a8:	460b      	mov	r3, r1
   1f6aa:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   1f6ae:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   1f6b2:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1f6b6:	f10d 020f 	add.w	r2, sp, #15
   1f6ba:	f10d 010e 	add.w	r1, sp, #14
   1f6be:	4620      	mov	r0, r4
   1f6c0:	f007 ff40 	bl	27544 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1f6c4:	4a45      	ldr	r2, [pc, #276]	; (1f7dc <nrfx_gpiote_input_configure+0x14c>)
   1f6c6:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   1f6ca:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1f6ce:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1f6d2:	f043 0301 	orr.w	r3, r3, #1
   1f6d6:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   1f6da:	b197      	cbz	r7, 1f702 <nrfx_gpiote_input_configure+0x72>
        if (pin_is_output(pin))
   1f6dc:	4620      	mov	r0, r4
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   1f6de:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   1f6e0:	687a      	ldr	r2, [r7, #4]
        if (pin_is_output(pin))
   1f6e2:	f7ff ff29 	bl	1f538 <pin_is_output>
   1f6e6:	b180      	cbz	r0, 1f70a <nrfx_gpiote_input_configure+0x7a>
            if (use_evt)
   1f6e8:	2a00      	cmp	r2, #0
   1f6ea:	d1da      	bne.n	1f6a2 <nrfx_gpiote_input_configure+0x12>
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1f6ec:	4a3b      	ldr	r2, [pc, #236]	; (1f7dc <nrfx_gpiote_input_configure+0x14c>)
   1f6ee:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   1f6f2:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1f6f6:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1f6fa:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
   1f6fe:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
   1f702:	2d00      	cmp	r5, #0
   1f704:	d13d      	bne.n	1f782 <nrfx_gpiote_input_configure+0xf2>
    return NRFX_SUCCESS;
   1f706:	4836      	ldr	r0, [pc, #216]	; (1f7e0 <nrfx_gpiote_input_configure+0x150>)
   1f708:	e7cc      	b.n	1f6a4 <nrfx_gpiote_input_configure+0x14>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   1f70a:	4f34      	ldr	r7, [pc, #208]	; (1f7dc <nrfx_gpiote_input_configure+0x14c>)
   1f70c:	f104 0c08 	add.w	ip, r4, #8
   1f710:	f837 101c 	ldrh.w	r1, [r7, ip, lsl #1]
   1f714:	f021 0120 	bic.w	r1, r1, #32
   1f718:	04c9      	lsls	r1, r1, #19
   1f71a:	0cc9      	lsrs	r1, r1, #19
   1f71c:	f827 101c 	strh.w	r1, [r7, ip, lsl #1]
            if (use_evt)
   1f720:	2a00      	cmp	r2, #0
   1f722:	d0e3      	beq.n	1f6ec <nrfx_gpiote_input_configure+0x5c>
                if (!edge)
   1f724:	2e03      	cmp	r6, #3
   1f726:	d8bc      	bhi.n	1f6a2 <nrfx_gpiote_input_configure+0x12>
                uint8_t ch = *p_trigger_config->p_in_channel;
   1f728:	7813      	ldrb	r3, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   1f72a:	b92e      	cbnz	r6, 1f738 <nrfx_gpiote_input_configure+0xa8>
   1f72c:	4a2d      	ldr	r2, [pc, #180]	; (1f7e4 <nrfx_gpiote_input_configure+0x154>)
   1f72e:	f503 71a2 	add.w	r1, r3, #324	; 0x144
   1f732:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
   1f736:	e7d9      	b.n	1f6ec <nrfx_gpiote_input_configure+0x5c>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1f738:	009a      	lsls	r2, r3, #2
   1f73a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1f73e:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1f742:	ea41 3143 	orr.w	r1, r1, r3, lsl #13
   1f746:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   1f74a:	f020 0003 	bic.w	r0, r0, #3
   1f74e:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1f752:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   1f756:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
   1f75a:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   1f75e:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1f762:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   1f766:	0220      	lsls	r0, r4, #8
   1f768:	f400 50f8 	and.w	r0, r0, #7936	; 0x1f00
   1f76c:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
   1f770:	ea40 000e 	orr.w	r0, r0, lr
   1f774:	f041 0120 	orr.w	r1, r1, #32
   1f778:	f827 101c 	strh.w	r1, [r7, ip, lsl #1]
   1f77c:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
   1f780:	e7b4      	b.n	1f6ec <nrfx_gpiote_input_configure+0x5c>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   1f782:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   1f786:	4620      	mov	r0, r4
   1f788:	f7ff fefe 	bl	1f588 <release_handler>
    if (!handler)
   1f78c:	2e00      	cmp	r6, #0
   1f78e:	d0ba      	beq.n	1f706 <nrfx_gpiote_input_configure+0x76>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1f790:	4d12      	ldr	r5, [pc, #72]	; (1f7dc <nrfx_gpiote_input_configure+0x14c>)
   1f792:	682b      	ldr	r3, [r5, #0]
   1f794:	429e      	cmp	r6, r3
   1f796:	d104      	bne.n	1f7a2 <nrfx_gpiote_input_configure+0x112>
   1f798:	686b      	ldr	r3, [r5, #4]
   1f79a:	429f      	cmp	r7, r3
   1f79c:	d101      	bne.n	1f7a2 <nrfx_gpiote_input_configure+0x112>
   1f79e:	2200      	movs	r2, #0
   1f7a0:	e00a      	b.n	1f7b8 <nrfx_gpiote_input_configure+0x128>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   1f7a2:	4811      	ldr	r0, [pc, #68]	; (1f7e8 <nrfx_gpiote_input_configure+0x158>)
   1f7a4:	f10d 010f 	add.w	r1, sp, #15
   1f7a8:	f7ff fe68 	bl	1f47c <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   1f7ac:	4b0c      	ldr	r3, [pc, #48]	; (1f7e0 <nrfx_gpiote_input_configure+0x150>)
   1f7ae:	4298      	cmp	r0, r3
   1f7b0:	f47f af78 	bne.w	1f6a4 <nrfx_gpiote_input_configure+0x14>
        handler_id = (int32_t)id;
   1f7b4:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   1f7b8:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   1f7bc:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1f7c0:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   1f7c2:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1f7c4:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   1f7c8:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   1f7cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1f7d0:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
   1f7d4:	e797      	b.n	1f706 <nrfx_gpiote_input_configure+0x76>
   1f7d6:	bf00      	nop
   1f7d8:	0bad0004 	.word	0x0bad0004
   1f7dc:	20000650 	.word	0x20000650
   1f7e0:	0bad0000 	.word	0x0bad0000
   1f7e4:	40006000 	.word	0x40006000
   1f7e8:	200006a4 	.word	0x200006a4

0001f7ec <nrfx_gpiote_output_configure>:
{
   1f7ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f7ee:	4604      	mov	r4, r0
   1f7f0:	b085      	sub	sp, #20
   1f7f2:	4615      	mov	r5, r2
    if (p_config)
   1f7f4:	b321      	cbz	r1, 1f840 <nrfx_gpiote_output_configure+0x54>
    return !pin_is_output(pin);
   1f7f6:	f7ff fe9f 	bl	1f538 <pin_is_output>
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   1f7fa:	b920      	cbnz	r0, 1f806 <nrfx_gpiote_output_configure+0x1a>
   1f7fc:	4620      	mov	r0, r4
   1f7fe:	f7ff fe85 	bl	1f50c <pin_in_use_by_te>
   1f802:	2800      	cmp	r0, #0
   1f804:	d15e      	bne.n	1f8c4 <nrfx_gpiote_output_configure+0xd8>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   1f806:	4620      	mov	r0, r4
   1f808:	f7ff fe8a 	bl	1f520 <pin_has_trigger>
   1f80c:	b110      	cbz	r0, 1f814 <nrfx_gpiote_output_configure+0x28>
   1f80e:	784b      	ldrb	r3, [r1, #1]
   1f810:	2b01      	cmp	r3, #1
   1f812:	d057      	beq.n	1f8c4 <nrfx_gpiote_output_configure+0xd8>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   1f814:	2301      	movs	r3, #1
   1f816:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   1f81a:	2300      	movs	r3, #0
   1f81c:	e9cd 1300 	strd	r1, r3, [sp]
   1f820:	1c4a      	adds	r2, r1, #1
   1f822:	1c8b      	adds	r3, r1, #2
   1f824:	4620      	mov	r0, r4
   1f826:	f10d 010f 	add.w	r1, sp, #15
   1f82a:	f007 fe8b 	bl	27544 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   1f82e:	4a26      	ldr	r2, [pc, #152]	; (1f8c8 <nrfx_gpiote_output_configure+0xdc>)
   1f830:	f104 0108 	add.w	r1, r4, #8
   1f834:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1f838:	f043 0303 	orr.w	r3, r3, #3
   1f83c:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   1f840:	b915      	cbnz	r5, 1f848 <nrfx_gpiote_output_configure+0x5c>
    return NRFX_SUCCESS;
   1f842:	4822      	ldr	r0, [pc, #136]	; (1f8cc <nrfx_gpiote_output_configure+0xe0>)
}
   1f844:	b005      	add	sp, #20
   1f846:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return !pin_is_output(pin);
   1f848:	4620      	mov	r0, r4
   1f84a:	f7ff fe75 	bl	1f538 <pin_is_output>
        if (pin_is_input(pin))
   1f84e:	b3c8      	cbz	r0, 1f8c4 <nrfx_gpiote_output_configure+0xd8>
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   1f850:	4e1d      	ldr	r6, [pc, #116]	; (1f8c8 <nrfx_gpiote_output_configure+0xdc>)
        uint32_t ch = p_task_config->task_ch;
   1f852:	f895 c000 	ldrb.w	ip, [r5]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   1f856:	f104 0708 	add.w	r7, r4, #8
   1f85a:	4661      	mov	r1, ip
   1f85c:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
   1f860:	0089      	lsls	r1, r1, #2
   1f862:	f020 0020 	bic.w	r0, r0, #32
   1f866:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1f86a:	04c0      	lsls	r0, r0, #19
   1f86c:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   1f870:	0cc0      	lsrs	r0, r0, #19
   1f872:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
   1f876:	2300      	movs	r3, #0
   1f878:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   1f87c:	786a      	ldrb	r2, [r5, #1]
   1f87e:	2a00      	cmp	r2, #0
   1f880:	d0df      	beq.n	1f842 <nrfx_gpiote_output_configure+0x56>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   1f882:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   1f886:	78ad      	ldrb	r5, [r5, #2]
   1f888:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
   1f88c:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1f890:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1f894:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   1f898:	0223      	lsls	r3, r4, #8
   1f89a:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1f89e:	0412      	lsls	r2, r2, #16
   1f8a0:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1f8a4:	ea43 030e 	orr.w	r3, r3, lr
   1f8a8:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   1f8aa:	052a      	lsls	r2, r5, #20
   1f8ac:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1f8b0:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1f8b4:	4313      	orrs	r3, r2
   1f8b6:	f040 0020 	orr.w	r0, r0, #32
   1f8ba:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   1f8be:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   1f8c2:	e7be      	b.n	1f842 <nrfx_gpiote_output_configure+0x56>
            return NRFX_ERROR_INVALID_PARAM;
   1f8c4:	4802      	ldr	r0, [pc, #8]	; (1f8d0 <nrfx_gpiote_output_configure+0xe4>)
   1f8c6:	e7bd      	b.n	1f844 <nrfx_gpiote_output_configure+0x58>
   1f8c8:	20000650 	.word	0x20000650
   1f8cc:	0bad0000 	.word	0x0bad0000
   1f8d0:	0bad0004 	.word	0x0bad0004

0001f8d4 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   1f8d4:	4b01      	ldr	r3, [pc, #4]	; (1f8dc <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   1f8d6:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   1f8da:	4770      	bx	lr
   1f8dc:	20000650 	.word	0x20000650

0001f8e0 <nrfx_gpiote_channel_get>:
{
   1f8e0:	b538      	push	{r3, r4, r5, lr}
   1f8e2:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
   1f8e4:	460d      	mov	r5, r1
   1f8e6:	b951      	cbnz	r1, 1f8fe <nrfx_gpiote_channel_get+0x1e>
   1f8e8:	490c      	ldr	r1, [pc, #48]	; (1f91c <nrfx_gpiote_channel_get+0x3c>)
   1f8ea:	480d      	ldr	r0, [pc, #52]	; (1f920 <nrfx_gpiote_channel_get+0x40>)
   1f8ec:	f240 2235 	movw	r2, #565	; 0x235
   1f8f0:	f004 fd4d 	bl	2438e <assert_print>
   1f8f4:	4809      	ldr	r0, [pc, #36]	; (1f91c <nrfx_gpiote_channel_get+0x3c>)
   1f8f6:	f240 2135 	movw	r1, #565	; 0x235
   1f8fa:	f004 fd41 	bl	24380 <assert_post_action>
    if (pin_in_use_by_te(pin))
   1f8fe:	4620      	mov	r0, r4
   1f900:	f7ff fe04 	bl	1f50c <pin_in_use_by_te>
   1f904:	b138      	cbz	r0, 1f916 <nrfx_gpiote_channel_get+0x36>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1f906:	4b07      	ldr	r3, [pc, #28]	; (1f924 <nrfx_gpiote_channel_get+0x44>)
        return NRFX_SUCCESS;
   1f908:	4807      	ldr	r0, [pc, #28]	; (1f928 <nrfx_gpiote_channel_get+0x48>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1f90a:	3408      	adds	r4, #8
   1f90c:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
   1f910:	0b5b      	lsrs	r3, r3, #13
   1f912:	702b      	strb	r3, [r5, #0]
}
   1f914:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1f916:	4805      	ldr	r0, [pc, #20]	; (1f92c <nrfx_gpiote_channel_get+0x4c>)
   1f918:	e7fc      	b.n	1f914 <nrfx_gpiote_channel_get+0x34>
   1f91a:	bf00      	nop
   1f91c:	0002b426 	.word	0x0002b426
   1f920:	000289af 	.word	0x000289af
   1f924:	20000650 	.word	0x20000650
   1f928:	0bad0000 	.word	0x0bad0000
   1f92c:	0bad0004 	.word	0x0bad0004

0001f930 <nrfx_gpiote_init>:
{
   1f930:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1f932:	4c0f      	ldr	r4, [pc, #60]	; (1f970 <nrfx_gpiote_init+0x40>)
   1f934:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
   1f938:	b9bd      	cbnz	r5, 1f96a <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   1f93a:	2240      	movs	r2, #64	; 0x40
   1f93c:	4629      	mov	r1, r5
   1f93e:	f104 0010 	add.w	r0, r4, #16
   1f942:	f008 f8ac 	bl	27a9e <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   1f946:	2006      	movs	r0, #6
   1f948:	f7f4 fc46 	bl	141d8 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1f94c:	4b09      	ldr	r3, [pc, #36]	; (1f974 <nrfx_gpiote_init+0x44>)
    return err_code;
   1f94e:	480a      	ldr	r0, [pc, #40]	; (1f978 <nrfx_gpiote_init+0x48>)
   1f950:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   1f954:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   1f958:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1f95c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1f960:	2301      	movs	r3, #1
   1f962:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   1f966:	6563      	str	r3, [r4, #84]	; 0x54
}
   1f968:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   1f96a:	4804      	ldr	r0, [pc, #16]	; (1f97c <nrfx_gpiote_init+0x4c>)
   1f96c:	e7fc      	b.n	1f968 <nrfx_gpiote_init+0x38>
   1f96e:	bf00      	nop
   1f970:	20000650 	.word	0x20000650
   1f974:	40006000 	.word	0x40006000
   1f978:	0bad0000 	.word	0x0bad0000
   1f97c:	0bad0005 	.word	0x0bad0005

0001f980 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   1f980:	4b03      	ldr	r3, [pc, #12]	; (1f990 <nrfx_gpiote_is_init+0x10>)
   1f982:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
   1f986:	3800      	subs	r0, #0
   1f988:	bf18      	it	ne
   1f98a:	2001      	movne	r0, #1
   1f98c:	4770      	bx	lr
   1f98e:	bf00      	nop
   1f990:	20000650 	.word	0x20000650

0001f994 <nrfx_gpiote_channel_free>:
{
   1f994:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   1f996:	4801      	ldr	r0, [pc, #4]	; (1f99c <nrfx_gpiote_channel_free+0x8>)
   1f998:	f7ff bd96 	b.w	1f4c8 <nrfx_flag32_free>
   1f99c:	200006a0 	.word	0x200006a0

0001f9a0 <nrfx_gpiote_channel_alloc>:
{
   1f9a0:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   1f9a2:	4801      	ldr	r0, [pc, #4]	; (1f9a8 <nrfx_gpiote_channel_alloc+0x8>)
   1f9a4:	f7ff bd6a 	b.w	1f47c <nrfx_flag32_alloc>
   1f9a8:	200006a0 	.word	0x200006a0

0001f9ac <nrfx_gpiote_trigger_enable>:
{
   1f9ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1f9ae:	4604      	mov	r4, r0
   1f9b0:	460d      	mov	r5, r1
    NRFX_ASSERT(pin_has_trigger(pin));
   1f9b2:	f7ff fdb5 	bl	1f520 <pin_has_trigger>
   1f9b6:	b950      	cbnz	r0, 1f9ce <nrfx_gpiote_trigger_enable+0x22>
   1f9b8:	492f      	ldr	r1, [pc, #188]	; (1fa78 <nrfx_gpiote_trigger_enable+0xcc>)
   1f9ba:	4830      	ldr	r0, [pc, #192]	; (1fa7c <nrfx_gpiote_trigger_enable+0xd0>)
   1f9bc:	f240 32df 	movw	r2, #991	; 0x3df
   1f9c0:	f004 fce5 	bl	2438e <assert_print>
   1f9c4:	482c      	ldr	r0, [pc, #176]	; (1fa78 <nrfx_gpiote_trigger_enable+0xcc>)
   1f9c6:	f240 31df 	movw	r1, #991	; 0x3df
   1f9ca:	f004 fcd9 	bl	24380 <assert_post_action>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1f9ce:	4620      	mov	r0, r4
   1f9d0:	f7ff fd9c 	bl	1f50c <pin_in_use_by_te>
   1f9d4:	4e2a      	ldr	r6, [pc, #168]	; (1fa80 <nrfx_gpiote_trigger_enable+0xd4>)
   1f9d6:	f104 0708 	add.w	r7, r4, #8
   1f9da:	b318      	cbz	r0, 1fa24 <nrfx_gpiote_trigger_enable+0x78>
    return !pin_is_output(pin);
   1f9dc:	4620      	mov	r0, r4
   1f9de:	f7ff fdab 	bl	1f538 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1f9e2:	4602      	mov	r2, r0
   1f9e4:	b9f0      	cbnz	r0, 1fa24 <nrfx_gpiote_trigger_enable+0x78>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1f9e6:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
   1f9ea:	0b41      	lsrs	r1, r0, #13
        nrf_gpiote_event_clear(NRF_GPIOTE, nrf_gpiote_in_event_get(ch));
   1f9ec:	4608      	mov	r0, r1
   1f9ee:	f007 fda5 	bl	2753c <nrf_gpiote_in_event_get>
    return ((uint32_t)p_reg + event);
   1f9f2:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   1f9f6:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1f9fa:	601a      	str	r2, [r3, #0]
   1f9fc:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1f9fe:	008b      	lsls	r3, r1, #2
   1fa00:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1fa04:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1fa08:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1fa0c:	f042 0201 	orr.w	r2, r2, #1
   1fa10:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
        if (int_enable)
   1fa14:	b125      	cbz	r5, 1fa20 <nrfx_gpiote_trigger_enable+0x74>
    p_reg->INTENSET = mask;
   1fa16:	4a1b      	ldr	r2, [pc, #108]	; (1fa84 <nrfx_gpiote_trigger_enable+0xd8>)
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   1fa18:	2301      	movs	r3, #1
   1fa1a:	408b      	lsls	r3, r1
   1fa1c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1fa20:	b003      	add	sp, #12
   1fa22:	bdf0      	pop	{r4, r5, r6, r7, pc}
        NRFX_ASSERT(int_enable);
   1fa24:	b955      	cbnz	r5, 1fa3c <nrfx_gpiote_trigger_enable+0x90>
   1fa26:	4914      	ldr	r1, [pc, #80]	; (1fa78 <nrfx_gpiote_trigger_enable+0xcc>)
   1fa28:	4814      	ldr	r0, [pc, #80]	; (1fa7c <nrfx_gpiote_trigger_enable+0xd0>)
   1fa2a:	f240 32ee 	movw	r2, #1006	; 0x3ee
   1fa2e:	f004 fcae 	bl	2438e <assert_print>
   1fa32:	4811      	ldr	r0, [pc, #68]	; (1fa78 <nrfx_gpiote_trigger_enable+0xcc>)
   1fa34:	f240 31ee 	movw	r1, #1006	; 0x3ee
   1fa38:	f004 fca2 	bl	24380 <assert_post_action>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1fa3c:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   1fa40:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   1fa44:	2b04      	cmp	r3, #4
   1fa46:	d012      	beq.n	1fa6e <nrfx_gpiote_trigger_enable+0xc2>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   1fa48:	2b05      	cmp	r3, #5
   1fa4a:	d012      	beq.n	1fa72 <nrfx_gpiote_trigger_enable+0xc6>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1fa4c:	a801      	add	r0, sp, #4
   1fa4e:	9401      	str	r4, [sp, #4]
   1fa50:	f7ff fdf4 	bl	1f63c <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1fa54:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   1fa56:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1fa5a:	40d9      	lsrs	r1, r3
   1fa5c:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1fa60:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1fa62:	4620      	mov	r0, r4
}
   1fa64:	b003      	add	sp, #12
   1fa66:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1fa6a:	f007 bdb6 	b.w	275da <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   1fa6e:	2103      	movs	r1, #3
   1fa70:	e7f7      	b.n	1fa62 <nrfx_gpiote_trigger_enable+0xb6>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   1fa72:	2102      	movs	r1, #2
   1fa74:	e7f5      	b.n	1fa62 <nrfx_gpiote_trigger_enable+0xb6>
   1fa76:	bf00      	nop
   1fa78:	0002b426 	.word	0x0002b426
   1fa7c:	000289af 	.word	0x000289af
   1fa80:	20000650 	.word	0x20000650
   1fa84:	40006000 	.word	0x40006000

0001fa88 <nrfx_gpiote_trigger_disable>:
{
   1fa88:	b508      	push	{r3, lr}
   1fa8a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1fa8c:	f7ff fd3e 	bl	1f50c <pin_in_use_by_te>
   1fa90:	b1c8      	cbz	r0, 1fac6 <nrfx_gpiote_trigger_disable+0x3e>
    return !pin_is_output(pin);
   1fa92:	4610      	mov	r0, r2
   1fa94:	f7ff fd50 	bl	1f538 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1fa98:	b9a8      	cbnz	r0, 1fac6 <nrfx_gpiote_trigger_disable+0x3e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1fa9a:	3208      	adds	r2, #8
   1fa9c:	4b0d      	ldr	r3, [pc, #52]	; (1fad4 <nrfx_gpiote_trigger_disable+0x4c>)
    p_reg->INTENCLR = mask;
   1fa9e:	490e      	ldr	r1, [pc, #56]	; (1fad8 <nrfx_gpiote_trigger_disable+0x50>)
   1faa0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   1faa4:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1faa6:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   1faa8:	409a      	lsls	r2, r3
   1faaa:	009b      	lsls	r3, r3, #2
   1faac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1fab0:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1fab4:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1fab8:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1fabc:	f022 0203 	bic.w	r2, r2, #3
   1fac0:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   1fac4:	bd08      	pop	{r3, pc}
   1fac6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1faca:	2100      	movs	r1, #0
   1facc:	4610      	mov	r0, r2
   1face:	f007 bd84 	b.w	275da <nrf_gpio_cfg_sense_set>
   1fad2:	bf00      	nop
   1fad4:	20000650 	.word	0x20000650
   1fad8:	40006000 	.word	0x40006000

0001fadc <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1fadc:	4b0e      	ldr	r3, [pc, #56]	; (1fb18 <nrfx_gpiote_pin_uninit+0x3c>)
   1fade:	f100 0208 	add.w	r2, r0, #8
{
   1fae2:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1fae4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   1fae8:	07db      	lsls	r3, r3, #31
{
   1faea:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   1faec:	d511      	bpl.n	1fb12 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
   1faee:	f7ff ffcb 	bl	1fa88 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   1faf2:	4620      	mov	r0, r4
   1faf4:	f7ff fd86 	bl	1f604 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1faf8:	a801      	add	r0, sp, #4
   1fafa:	9401      	str	r4, [sp, #4]
   1fafc:	f7ff fd9e 	bl	1f63c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1fb00:	9b01      	ldr	r3, [sp, #4]
   1fb02:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1fb06:	2202      	movs	r2, #2
   1fb08:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   1fb0c:	4803      	ldr	r0, [pc, #12]	; (1fb1c <nrfx_gpiote_pin_uninit+0x40>)
}
   1fb0e:	b002      	add	sp, #8
   1fb10:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1fb12:	4803      	ldr	r0, [pc, #12]	; (1fb20 <nrfx_gpiote_pin_uninit+0x44>)
   1fb14:	e7fb      	b.n	1fb0e <nrfx_gpiote_pin_uninit+0x32>
   1fb16:	bf00      	nop
   1fb18:	20000650 	.word	0x20000650
   1fb1c:	0bad0000 	.word	0x0bad0000
   1fb20:	0bad0004 	.word	0x0bad0004

0001fb24 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   1fb24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fb28:	4b58      	ldr	r3, [pc, #352]	; (1fc8c <nrfx_gpiote_irq_handler+0x168>)
    return p_reg->INTENSET & mask;
   1fb2a:	4859      	ldr	r0, [pc, #356]	; (1fc90 <nrfx_gpiote_irq_handler+0x16c>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1fb2c:	4959      	ldr	r1, [pc, #356]	; (1fc94 <nrfx_gpiote_irq_handler+0x170>)
    uint32_t status = 0;
   1fb2e:	2600      	movs	r6, #0
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   1fb30:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1fb32:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1fb34:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   1fb36:	b135      	cbz	r5, 1fb46 <nrfx_gpiote_irq_handler+0x22>
    return p_reg->INTENSET & mask;
   1fb38:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   1fb3c:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1fb3e:	bf1e      	ittt	ne
   1fb40:	601c      	strne	r4, [r3, #0]
   1fb42:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   1fb44:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1fb46:	3304      	adds	r3, #4
   1fb48:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   1fb4a:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1fb4e:	d1f1      	bne.n	1fb34 <nrfx_gpiote_irq_handler+0x10>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1fb50:	4f4f      	ldr	r7, [pc, #316]	; (1fc90 <nrfx_gpiote_irq_handler+0x16c>)
   1fb52:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   1fb56:	b1bb      	cbz	r3, 1fb88 <nrfx_gpiote_irq_handler+0x64>
        *p_masks = gpio_regs[i]->LATCH;
   1fb58:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1fb5c:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   1fb60:	9200      	str	r2, [sp, #0]
        gpio_regs[i]->LATCH = *p_masks;
   1fb62:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   1fb66:	f04f 0801 	mov.w	r8, #1
            while (latch[i])
   1fb6a:	9c00      	ldr	r4, [sp, #0]
   1fb6c:	b974      	cbnz	r4, 1fb8c <nrfx_gpiote_irq_handler+0x68>
        *p_masks = gpio_regs[i]->LATCH;
   1fb6e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1fb72:	f8c7 417c 	str.w	r4, [r7, #380]	; 0x17c
   1fb76:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   1fb7a:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
   1fb7e:	9300      	str	r3, [sp, #0]
        gpio_regs[i]->LATCH = *p_masks;
   1fb80:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        if (latch[port_idx])
   1fb84:	2b00      	cmp	r3, #0
   1fb86:	d1ee      	bne.n	1fb66 <nrfx_gpiote_irq_handler+0x42>
        mask &= ~NRFX_BIT(ch);
   1fb88:	2401      	movs	r4, #1
   1fb8a:	e07a      	b.n	1fc82 <nrfx_gpiote_irq_handler+0x15e>
                uint32_t pin = NRF_CTZ(latch[i]);
   1fb8c:	fa94 f4a4 	rbit	r4, r4
   1fb90:	fab4 f484 	clz	r4, r4
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1fb94:	4a40      	ldr	r2, [pc, #256]	; (1fc98 <nrfx_gpiote_irq_handler+0x174>)
   1fb96:	9401      	str	r4, [sp, #4]
   1fb98:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   1fb9c:	08e0      	lsrs	r0, r4, #3
   1fb9e:	f832 b013 	ldrh.w	fp, [r2, r3, lsl #1]
    bit = BITMASK_RELBIT_GET(bit);
   1fba2:	f004 0307 	and.w	r3, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   1fba6:	fa08 f103 	lsl.w	r1, r8, r3
   1fbaa:	f81d 3000 	ldrb.w	r3, [sp, r0]
   1fbae:	ea23 0301 	bic.w	r3, r3, r1
   1fbb2:	f80d 3000 	strb.w	r3, [sp, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1fbb6:	a801      	add	r0, sp, #4
   1fbb8:	f7ff fd40 	bl	1f63c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1fbbc:	9b01      	ldr	r3, [sp, #4]
   1fbbe:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1fbc2:	ea4f 099b 	mov.w	r9, fp, lsr #2
   1fbc6:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
   1fbca:	f3cb 0a82 	ubfx	sl, fp, #2, #3
    if (is_level(trigger))
   1fbce:	f019 0f04 	tst.w	r9, #4
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1fbd2:	46d3      	mov	fp, sl
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   1fbd4:	f3c5 4501 	ubfx	r5, r5, #16, #2
    if (is_level(trigger))
   1fbd8:	d023      	beq.n	1fc22 <nrfx_gpiote_irq_handler+0xfe>
        call_handler(pin, trigger);
   1fbda:	4651      	mov	r1, sl
   1fbdc:	4620      	mov	r0, r4
   1fbde:	f7ff fcb5 	bl	1f54c <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1fbe2:	a801      	add	r0, sp, #4
   1fbe4:	9401      	str	r4, [sp, #4]
   1fbe6:	f7ff fd29 	bl	1f63c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1fbea:	9b01      	ldr	r3, [sp, #4]
   1fbec:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1fbf0:	b2ed      	uxtb	r5, r5
   1fbf2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   1fbf6:	f3c3 4301 	ubfx	r3, r3, #16, #2
   1fbfa:	429d      	cmp	r5, r3
   1fbfc:	d107      	bne.n	1fc0e <nrfx_gpiote_irq_handler+0xea>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1fbfe:	2100      	movs	r1, #0
   1fc00:	4620      	mov	r0, r4
   1fc02:	f007 fcea 	bl	275da <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   1fc06:	4629      	mov	r1, r5
   1fc08:	4620      	mov	r0, r4
   1fc0a:	f007 fce6 	bl	275da <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1fc0e:	a801      	add	r0, sp, #4
   1fc10:	9401      	str	r4, [sp, #4]
   1fc12:	f7ff fd13 	bl	1f63c <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   1fc16:	9b01      	ldr	r3, [sp, #4]
   1fc18:	fa08 f303 	lsl.w	r3, r8, r3
   1fc1c:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
   1fc20:	e7a3      	b.n	1fb6a <nrfx_gpiote_irq_handler+0x46>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1fc22:	2d02      	cmp	r5, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1fc24:	bf0c      	ite	eq
   1fc26:	2103      	moveq	r1, #3
   1fc28:	2102      	movne	r1, #2
   1fc2a:	4620      	mov	r0, r4
   1fc2c:	f007 fcd5 	bl	275da <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1fc30:	f1ba 0f03 	cmp.w	sl, #3
   1fc34:	d004      	beq.n	1fc40 <nrfx_gpiote_irq_handler+0x11c>
   1fc36:	2d02      	cmp	r5, #2
   1fc38:	d107      	bne.n	1fc4a <nrfx_gpiote_irq_handler+0x126>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1fc3a:	f1ba 0f01 	cmp.w	sl, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   1fc3e:	d1e6      	bne.n	1fc0e <nrfx_gpiote_irq_handler+0xea>
            call_handler(pin, trigger);
   1fc40:	4659      	mov	r1, fp
   1fc42:	4620      	mov	r0, r4
   1fc44:	f7ff fc82 	bl	1f54c <call_handler>
   1fc48:	e7e1      	b.n	1fc0e <nrfx_gpiote_irq_handler+0xea>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1fc4a:	2d03      	cmp	r5, #3
   1fc4c:	d1df      	bne.n	1fc0e <nrfx_gpiote_irq_handler+0xea>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   1fc4e:	f1ba 0f02 	cmp.w	sl, #2
   1fc52:	e7f4      	b.n	1fc3e <nrfx_gpiote_irq_handler+0x11a>
        uint32_t ch = NRF_CTZ(mask);
   1fc54:	fa96 f3a6 	rbit	r3, r6
   1fc58:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   1fc5c:	fa04 f203 	lsl.w	r2, r4, r3
   1fc60:	009b      	lsls	r3, r3, #2
   1fc62:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1fc66:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1fc6a:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1fc6e:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   1fc72:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1fc76:	f3c0 2004 	ubfx	r0, r0, #8, #5
   1fc7a:	f3c1 4101 	ubfx	r1, r1, #16, #2
   1fc7e:	f7ff fc65 	bl	1f54c <call_handler>
    while (mask)
   1fc82:	2e00      	cmp	r6, #0
   1fc84:	d1e6      	bne.n	1fc54 <nrfx_gpiote_irq_handler+0x130>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   1fc86:	b003      	add	sp, #12
   1fc88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fc8c:	40006100 	.word	0x40006100
   1fc90:	40006000 	.word	0x40006000
   1fc94:	40006120 	.word	0x40006120
   1fc98:	20000650 	.word	0x20000650

0001fc9c <nvmc_word_write>:
   1fc9c:	4a04      	ldr	r2, [pc, #16]	; (1fcb0 <nvmc_word_write+0x14>)
   1fc9e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   1fca2:	07db      	lsls	r3, r3, #31
   1fca4:	d5fb      	bpl.n	1fc9e <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   1fca6:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   1fca8:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   1fcac:	4770      	bx	lr
   1fcae:	bf00      	nop
   1fcb0:	4001e000 	.word	0x4001e000

0001fcb4 <nrfx_nvmc_page_erase>:
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
   1fcb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
   1fcb8:	b510      	push	{r4, lr}
   1fcba:	6913      	ldr	r3, [r2, #16]
NRF_STATIC_INLINE uint32_t nrf_ficr_codesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODESIZE_CODESIZE_Msk)
    return p_reg->INFO.CODESIZE;
#else
    return p_reg->CODESIZE;
   1fcbc:	6952      	ldr	r2, [r2, #20]
    return flash_page_size_get() * flash_page_count_get();
   1fcbe:	4353      	muls	r3, r2
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   1fcc0:	4298      	cmp	r0, r3
{
   1fcc2:	4604      	mov	r4, r0
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   1fcc4:	d30a      	bcc.n	1fcdc <nrfx_nvmc_page_erase+0x28>
    NRFX_ASSERT(is_valid_address(addr, false));
   1fcc6:	4912      	ldr	r1, [pc, #72]	; (1fd10 <nrfx_nvmc_page_erase+0x5c>)
   1fcc8:	4812      	ldr	r0, [pc, #72]	; (1fd14 <nrfx_nvmc_page_erase+0x60>)
   1fcca:	f44f 7283 	mov.w	r2, #262	; 0x106
   1fcce:	f004 fb5e 	bl	2438e <assert_print>
   1fcd2:	480f      	ldr	r0, [pc, #60]	; (1fd10 <nrfx_nvmc_page_erase+0x5c>)
   1fcd4:	f44f 7183 	mov.w	r1, #262	; 0x106
   1fcd8:	f004 fb52 	bl	24380 <assert_post_action>
    return p_reg->CODEPAGESIZE;
   1fcdc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1fce0:	691a      	ldr	r2, [r3, #16]
    return !(addr % flash_page_size_get());
   1fce2:	fbb4 f3f2 	udiv	r3, r4, r2
   1fce6:	fb02 4313 	mls	r3, r2, r3, r4

    if (!is_page_aligned_check(addr))
   1fcea:	b973      	cbnz	r3, 1fd0a <nrfx_nvmc_page_erase+0x56>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
   1fcec:	4b0a      	ldr	r3, [pc, #40]	; (1fd18 <nrfx_nvmc_page_erase+0x64>)
   1fcee:	2202      	movs	r2, #2
   1fcf0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
   1fcf4:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1fcf8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   1fcfc:	07d2      	lsls	r2, r2, #31
   1fcfe:	d5fb      	bpl.n	1fcf8 <nrfx_nvmc_page_erase+0x44>
    p_reg->CONFIG = (uint32_t)mode;
   1fd00:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   1fd02:	4806      	ldr	r0, [pc, #24]	; (1fd1c <nrfx_nvmc_page_erase+0x68>)
   1fd04:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   1fd08:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_ADDR;
   1fd0a:	4805      	ldr	r0, [pc, #20]	; (1fd20 <nrfx_nvmc_page_erase+0x6c>)
   1fd0c:	e7fc      	b.n	1fd08 <nrfx_nvmc_page_erase+0x54>
   1fd0e:	bf00      	nop
   1fd10:	0002b464 	.word	0x0002b464
   1fd14:	000289af 	.word	0x000289af
   1fd18:	4001e000 	.word	0x4001e000
   1fd1c:	0bad0000 	.word	0x0bad0000
   1fd20:	0bad000a 	.word	0x0bad000a

0001fd24 <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   1fd24:	b570      	push	{r4, r5, r6, lr}
   1fd26:	460d      	mov	r5, r1
    NRFX_ASSERT(is_valid_address(addr, true));
   1fd28:	2101      	movs	r1, #1
{
   1fd2a:	4604      	mov	r4, r0
    NRFX_ASSERT(is_valid_address(addr, true));
   1fd2c:	f007 fc64 	bl	275f8 <is_valid_address>
   1fd30:	b950      	cbnz	r0, 1fd48 <nrfx_nvmc_word_write+0x24>
   1fd32:	4912      	ldr	r1, [pc, #72]	; (1fd7c <nrfx_nvmc_word_write+0x58>)
   1fd34:	4812      	ldr	r0, [pc, #72]	; (1fd80 <nrfx_nvmc_word_write+0x5c>)
   1fd36:	f44f 72ca 	mov.w	r2, #404	; 0x194
   1fd3a:	f004 fb28 	bl	2438e <assert_print>
   1fd3e:	480f      	ldr	r0, [pc, #60]	; (1fd7c <nrfx_nvmc_word_write+0x58>)
   1fd40:	f44f 71ca 	mov.w	r1, #404	; 0x194
   1fd44:	f004 fb1c 	bl	24380 <assert_post_action>
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
   1fd48:	07a3      	lsls	r3, r4, #30
   1fd4a:	d00a      	beq.n	1fd62 <nrfx_nvmc_word_write+0x3e>
   1fd4c:	490b      	ldr	r1, [pc, #44]	; (1fd7c <nrfx_nvmc_word_write+0x58>)
   1fd4e:	480c      	ldr	r0, [pc, #48]	; (1fd80 <nrfx_nvmc_word_write+0x5c>)
   1fd50:	f240 1295 	movw	r2, #405	; 0x195
   1fd54:	f004 fb1b 	bl	2438e <assert_print>
   1fd58:	4808      	ldr	r0, [pc, #32]	; (1fd7c <nrfx_nvmc_word_write+0x58>)
   1fd5a:	f240 1195 	movw	r1, #405	; 0x195
   1fd5e:	f004 fb0f 	bl	24380 <assert_post_action>
   1fd62:	4e08      	ldr	r6, [pc, #32]	; (1fd84 <nrfx_nvmc_word_write+0x60>)
   1fd64:	2301      	movs	r3, #1
   1fd66:	f8c6 3504 	str.w	r3, [r6, #1284]	; 0x504

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   1fd6a:	4629      	mov	r1, r5
   1fd6c:	4620      	mov	r0, r4
   1fd6e:	f7ff ff95 	bl	1fc9c <nvmc_word_write>
   1fd72:	2300      	movs	r3, #0
   1fd74:	f8c6 3504 	str.w	r3, [r6, #1284]	; 0x504

    nvmc_readonly_mode_set();
}
   1fd78:	bd70      	pop	{r4, r5, r6, pc}
   1fd7a:	bf00      	nop
   1fd7c:	0002b464 	.word	0x0002b464
   1fd80:	000289af 	.word	0x000289af
   1fd84:	4001e000 	.word	0x4001e000

0001fd88 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   1fd88:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   1fd8a:	4801      	ldr	r0, [pc, #4]	; (1fd90 <nrfx_ppi_channel_alloc+0x8>)
   1fd8c:	f7ff bb76 	b.w	1f47c <nrfx_flag32_alloc>
   1fd90:	200006ac 	.word	0x200006ac

0001fd94 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   1fd94:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1fd96:	4c14      	ldr	r4, [pc, #80]	; (1fde8 <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   1fd98:	4a14      	ldr	r2, [pc, #80]	; (1fdec <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   1fd9a:	4915      	ldr	r1, [pc, #84]	; (1fdf0 <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1fd9c:	2303      	movs	r3, #3
   1fd9e:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   1fda0:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1fda2:	4b14      	ldr	r3, [pc, #80]	; (1fdf4 <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
   1fda4:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1fda6:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   1fda8:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1fdac:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   1fdae:	2300      	movs	r3, #0
   1fdb0:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   1fdb2:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1fdb4:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
   1fdb6:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   1fdb8:	4a0f      	ldr	r2, [pc, #60]	; (1fdf8 <_DoInit+0x64>)
   1fdba:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
   1fdbc:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   1fdbe:	2210      	movs	r2, #16
   1fdc0:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   1fdc2:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   1fdc4:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1fdc6:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   1fdc8:	f007 fe7a 	bl	27ac0 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   1fdcc:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
   1fdd0:	490a      	ldr	r1, [pc, #40]	; (1fdfc <_DoInit+0x68>)
   1fdd2:	4620      	mov	r0, r4
   1fdd4:	f007 fe74 	bl	27ac0 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   1fdd8:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
   1fddc:	2320      	movs	r3, #32
   1fdde:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   1fde0:	f3bf 8f5f 	dmb	sy
}
   1fde4:	bd10      	pop	{r4, pc}
   1fde6:	bf00      	nop
   1fde8:	200021dc 	.word	0x200021dc
   1fdec:	0002b4a0 	.word	0x0002b4a0
   1fdf0:	0002b4a9 	.word	0x0002b4a9
   1fdf4:	20002a79 	.word	0x20002a79
   1fdf8:	20002a69 	.word	0x20002a69
   1fdfc:	0002b4ad 	.word	0x0002b4ad

0001fe00 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1fe00:	4b0e      	ldr	r3, [pc, #56]	; (1fe3c <z_sys_init_run_level+0x3c>)
{
   1fe02:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1fe04:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1fe08:	3001      	adds	r0, #1
   1fe0a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1fe0e:	42a6      	cmp	r6, r4
   1fe10:	d800      	bhi.n	1fe14 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   1fe12:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   1fe14:	e9d4 3500 	ldrd	r3, r5, [r4]
   1fe18:	4628      	mov	r0, r5
   1fe1a:	4798      	blx	r3
		if (dev != NULL) {
   1fe1c:	b165      	cbz	r5, 1fe38 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
   1fe1e:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
   1fe20:	b130      	cbz	r0, 1fe30 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   1fe22:	2800      	cmp	r0, #0
   1fe24:	bfb8      	it	lt
   1fe26:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   1fe28:	28ff      	cmp	r0, #255	; 0xff
   1fe2a:	bfa8      	it	ge
   1fe2c:	20ff      	movge	r0, #255	; 0xff
   1fe2e:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   1fe30:	785a      	ldrb	r2, [r3, #1]
   1fe32:	f042 0201 	orr.w	r2, r2, #1
   1fe36:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1fe38:	3408      	adds	r4, #8
   1fe3a:	e7e8      	b.n	1fe0e <z_sys_init_run_level+0xe>
   1fe3c:	000285cc 	.word	0x000285cc

0001fe40 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   1fe40:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   1fe42:	4605      	mov	r5, r0
   1fe44:	b910      	cbnz	r0, 1fe4c <z_impl_device_get_binding+0xc>
		return NULL;
   1fe46:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   1fe48:	4620      	mov	r0, r4
   1fe4a:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   1fe4c:	7803      	ldrb	r3, [r0, #0]
   1fe4e:	2b00      	cmp	r3, #0
   1fe50:	d0f9      	beq.n	1fe46 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   1fe52:	4c0e      	ldr	r4, [pc, #56]	; (1fe8c <z_impl_device_get_binding+0x4c>)
   1fe54:	4e0e      	ldr	r6, [pc, #56]	; (1fe90 <z_impl_device_get_binding+0x50>)
   1fe56:	42b4      	cmp	r4, r6
   1fe58:	d108      	bne.n	1fe6c <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
   1fe5a:	4c0c      	ldr	r4, [pc, #48]	; (1fe8c <z_impl_device_get_binding+0x4c>)
   1fe5c:	42b4      	cmp	r4, r6
   1fe5e:	d0f2      	beq.n	1fe46 <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1fe60:	4620      	mov	r0, r4
   1fe62:	f007 fbf3 	bl	2764c <z_device_is_ready>
   1fe66:	b950      	cbnz	r0, 1fe7e <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
   1fe68:	3418      	adds	r4, #24
   1fe6a:	e7f7      	b.n	1fe5c <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
   1fe6c:	4620      	mov	r0, r4
   1fe6e:	f007 fbed 	bl	2764c <z_device_is_ready>
   1fe72:	b110      	cbz	r0, 1fe7a <z_impl_device_get_binding+0x3a>
   1fe74:	6823      	ldr	r3, [r4, #0]
   1fe76:	42ab      	cmp	r3, r5
   1fe78:	d0e6      	beq.n	1fe48 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   1fe7a:	3418      	adds	r4, #24
   1fe7c:	e7eb      	b.n	1fe56 <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1fe7e:	6821      	ldr	r1, [r4, #0]
   1fe80:	4628      	mov	r0, r5
   1fe82:	f7ec ff9c 	bl	cdbe <strcmp>
   1fe86:	2800      	cmp	r0, #0
   1fe88:	d1ee      	bne.n	1fe68 <z_impl_device_get_binding+0x28>
   1fe8a:	e7dd      	b.n	1fe48 <z_impl_device_get_binding+0x8>
   1fe8c:	00027ba4 	.word	0x00027ba4
   1fe90:	00027c34 	.word	0x00027c34

0001fe94 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   1fe94:	4b01      	ldr	r3, [pc, #4]	; (1fe9c <z_impl_z_errno+0x8>)
   1fe96:	6898      	ldr	r0, [r3, #8]
}
   1fe98:	3064      	adds	r0, #100	; 0x64
   1fe9a:	4770      	bx	lr
   1fe9c:	20002284 	.word	0x20002284

0001fea0 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1fea0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1fea2:	4604      	mov	r4, r0
   1fea4:	460e      	mov	r6, r1
	__asm__ volatile(
   1fea6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1feaa:	f3ef 8711 	mrs	r7, BASEPRI
   1feae:	f383 8812 	msr	BASEPRI_MAX, r3
   1feb2:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   1feb6:	f002 fbbf 	bl	22638 <z_impl_z_current_get>
   1feba:	2c04      	cmp	r4, #4
   1febc:	bf96      	itet	ls
   1febe:	4b1e      	ldrls	r3, [pc, #120]	; (1ff38 <z_fatal_error+0x98>)
   1fec0:	4b1e      	ldrhi	r3, [pc, #120]	; (1ff3c <z_fatal_error+0x9c>)
   1fec2:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1fec6:	2200      	movs	r2, #0
   1fec8:	4605      	mov	r5, r0
   1feca:	9200      	str	r2, [sp, #0]
   1fecc:	481c      	ldr	r0, [pc, #112]	; (1ff40 <z_fatal_error+0xa0>)
   1fece:	4622      	mov	r2, r4
   1fed0:	2145      	movs	r1, #69	; 0x45
   1fed2:	f004 fa6a 	bl	243aa <z_log_minimal_printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1fed6:	b13e      	cbz	r6, 1fee8 <z_fatal_error+0x48>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1fed8:	69f3      	ldr	r3, [r6, #28]
   1feda:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1fede:	b11b      	cbz	r3, 1fee8 <z_fatal_error+0x48>
		LOG_ERR("Fault during interrupt handling\n");
   1fee0:	4818      	ldr	r0, [pc, #96]	; (1ff44 <z_fatal_error+0xa4>)
   1fee2:	2145      	movs	r1, #69	; 0x45
   1fee4:	f004 fa61 	bl	243aa <z_log_minimal_printk>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   1fee8:	b135      	cbz	r5, 1fef8 <z_fatal_error+0x58>
   1feea:	4628      	mov	r0, r5
   1feec:	f007 fbcd 	bl	2768a <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   1fef0:	4603      	mov	r3, r0
   1fef2:	b108      	cbz	r0, 1fef8 <z_fatal_error+0x58>
   1fef4:	7802      	ldrb	r2, [r0, #0]
   1fef6:	b902      	cbnz	r2, 1fefa <z_fatal_error+0x5a>
		thread_name = "unknown";
   1fef8:	4b13      	ldr	r3, [pc, #76]	; (1ff48 <z_fatal_error+0xa8>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1fefa:	4814      	ldr	r0, [pc, #80]	; (1ff4c <z_fatal_error+0xac>)
   1fefc:	462a      	mov	r2, r5
   1fefe:	2145      	movs	r1, #69	; 0x45
   1ff00:	f004 fa53 	bl	243aa <z_log_minimal_printk>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   1ff04:	4631      	mov	r1, r6
   1ff06:	4620      	mov	r0, r4
   1ff08:	f7fe f8d8 	bl	1e0bc <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   1ff0c:	2c04      	cmp	r4, #4
   1ff0e:	d108      	bne.n	1ff22 <z_fatal_error+0x82>
   1ff10:	490f      	ldr	r1, [pc, #60]	; (1ff50 <z_fatal_error+0xb0>)
   1ff12:	4810      	ldr	r0, [pc, #64]	; (1ff54 <z_fatal_error+0xb4>)
   1ff14:	228f      	movs	r2, #143	; 0x8f
   1ff16:	f004 fa3a 	bl	2438e <assert_print>
   1ff1a:	480d      	ldr	r0, [pc, #52]	; (1ff50 <z_fatal_error+0xb0>)
   1ff1c:	218f      	movs	r1, #143	; 0x8f
   1ff1e:	f004 fa2f 	bl	24380 <assert_post_action>
	__asm__ volatile(
   1ff22:	f387 8811 	msr	BASEPRI, r7
   1ff26:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1ff2a:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   1ff2c:	b003      	add	sp, #12
   1ff2e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1ff32:	f7f4 bd53 	b.w	149dc <z_impl_k_thread_abort>
   1ff36:	bf00      	nop
   1ff38:	000285e4 	.word	0x000285e4
   1ff3c:	0002b4b4 	.word	0x0002b4b4
   1ff40:	0002b4ca 	.word	0x0002b4ca
   1ff44:	0002b4f7 	.word	0x0002b4f7
   1ff48:	0002b4c2 	.word	0x0002b4c2
   1ff4c:	0002b51d 	.word	0x0002b51d
   1ff50:	0002b53a 	.word	0x0002b53a
   1ff54:	000289af 	.word	0x000289af

0001ff58 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   1ff58:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   1ff5a:	4b0a      	ldr	r3, [pc, #40]	; (1ff84 <bg_thread_main+0x2c>)
   1ff5c:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1ff5e:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   1ff60:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1ff62:	f7ff ff4d 	bl	1fe00 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   1ff66:	f003 fae9 	bl	2353c <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   1ff6a:	2003      	movs	r0, #3
   1ff6c:	f7ff ff48 	bl	1fe00 <z_sys_init_run_level>

	z_init_static_threads();
   1ff70:	f000 fb26 	bl	205c0 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
   1ff74:	f7f1 fdfe 	bl	11b74 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1ff78:	4a03      	ldr	r2, [pc, #12]	; (1ff88 <bg_thread_main+0x30>)
   1ff7a:	7b13      	ldrb	r3, [r2, #12]
   1ff7c:	f023 0301 	bic.w	r3, r3, #1
   1ff80:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1ff82:	bd08      	pop	{r3, pc}
   1ff84:	20002e79 	.word	0x20002e79
   1ff88:	20001c98 	.word	0x20001c98

0001ff8c <z_bss_zero>:
{
   1ff8c:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   1ff8e:	4803      	ldr	r0, [pc, #12]	; (1ff9c <z_bss_zero+0x10>)
   1ff90:	4a03      	ldr	r2, [pc, #12]	; (1ffa0 <z_bss_zero+0x14>)
   1ff92:	2100      	movs	r1, #0
   1ff94:	1a12      	subs	r2, r2, r0
   1ff96:	f007 fb63 	bl	27660 <z_early_memset>
}
   1ff9a:	bd08      	pop	{r3, pc}
   1ff9c:	20000a10 	.word	0x20000a10
   1ffa0:	20002e7c 	.word	0x20002e7c

0001ffa4 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   1ffa4:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
   1ffa6:	2300      	movs	r3, #0
{
   1ffa8:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   1ffaa:	2201      	movs	r2, #1
   1ffac:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
   1ffb0:	4e13      	ldr	r6, [pc, #76]	; (20000 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1ffb2:	4d14      	ldr	r5, [pc, #80]	; (20004 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
   1ffb4:	9301      	str	r3, [sp, #4]
   1ffb6:	220f      	movs	r2, #15
   1ffb8:	e9cd 3202 	strd	r3, r2, [sp, #8]
   1ffbc:	4912      	ldr	r1, [pc, #72]	; (20008 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1ffbe:	2318      	movs	r3, #24
   1ffc0:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
   1ffc4:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
   1ffc8:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   1ffca:	f44f 70b0 	mov.w	r0, #352	; 0x160
   1ffce:	fb00 1104 	mla	r1, r0, r4, r1
   1ffd2:	4b0e      	ldr	r3, [pc, #56]	; (2000c <z_init_cpu+0x68>)
   1ffd4:	9500      	str	r5, [sp, #0]
   1ffd6:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1ffda:	4630      	mov	r0, r6
   1ffdc:	f000 fa50 	bl	20480 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1ffe0:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   1ffe2:	480b      	ldr	r0, [pc, #44]	; (20010 <z_init_cpu+0x6c>)
	_kernel.cpus[id].id = id;
   1ffe4:	752c      	strb	r4, [r5, #20]
   1ffe6:	f023 0304 	bic.w	r3, r3, #4
   1ffea:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   1ffec:	f44f 6302 	mov.w	r3, #2080	; 0x820
   1fff0:	fb03 0404 	mla	r4, r3, r4, r0
   1fff4:	441c      	add	r4, r3
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   1fff6:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
   1fff8:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   1fffa:	b006      	add	sp, #24
   1fffc:	bd70      	pop	{r4, r5, r6, pc}
   1fffe:	bf00      	nop
   20000:	20001c18 	.word	0x20001c18
   20004:	20002284 	.word	0x20002284
   20008:	20004960 	.word	0x20004960
   2000c:	00020705 	.word	0x00020705
   20010:	20004ac0 	.word	0x20004ac0

00020014 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   20014:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   20016:	4b2e      	ldr	r3, [pc, #184]	; (200d0 <z_cstart+0xbc>)
   20018:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   2001a:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   2001e:	4d2d      	ldr	r5, [pc, #180]	; (200d4 <z_cstart+0xc0>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
   20020:	4e2d      	ldr	r6, [pc, #180]	; (200d8 <z_cstart+0xc4>)
   20022:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   20024:	4f2d      	ldr	r7, [pc, #180]	; (200dc <z_cstart+0xc8>)
   20026:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   2002a:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2002c:	23e0      	movs	r3, #224	; 0xe0
   2002e:	2400      	movs	r4, #0
   20030:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   20034:	2320      	movs	r3, #32
   20036:	77eb      	strb	r3, [r5, #31]
   20038:	762c      	strb	r4, [r5, #24]
   2003a:	766c      	strb	r4, [r5, #25]
   2003c:	76ac      	strb	r4, [r5, #26]
   2003e:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   20042:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   20044:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   20048:	626b      	str	r3, [r5, #36]	; 0x24
   2004a:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   2004e:	f7f4 fc39 	bl	148c4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   20052:	f7f4 f875 	bl	14140 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   20056:	f04f 33ff 	mov.w	r3, #4294967295
   2005a:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   2005c:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   2005e:	f7f4 fd9d 	bl	14b9c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   20062:	f7f4 fcd1 	bl	14a08 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   20066:	f240 1301 	movw	r3, #257	; 0x101
   2006a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   2006e:	ab06      	add	r3, sp, #24
   20070:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   20072:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	dummy_thread->resource_pool = NULL;
   20076:	9423      	str	r4, [sp, #140]	; 0x8c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   20078:	f007 fae7 	bl	2764a <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   2007c:	4620      	mov	r0, r4
   2007e:	f7ff febf 	bl	1fe00 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   20082:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
   20084:	4d16      	ldr	r5, [pc, #88]	; (200e0 <z_cstart+0xcc>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   20086:	f7ff febb 	bl	1fe00 <z_sys_init_run_level>
	z_sched_init();
   2008a:	f002 f98b 	bl	223a4 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   2008e:	4b15      	ldr	r3, [pc, #84]	; (200e4 <z_cstart+0xd0>)
	_kernel.ready_q.cache = &z_main_thread;
   20090:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   20092:	9305      	str	r3, [sp, #20]
   20094:	2301      	movs	r3, #1
   20096:	4914      	ldr	r1, [pc, #80]	; (200e8 <z_cstart+0xd4>)
   20098:	9400      	str	r4, [sp, #0]
   2009a:	e9cd 4303 	strd	r4, r3, [sp, #12]
   2009e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   200a2:	463b      	mov	r3, r7
   200a4:	e9cd 4401 	strd	r4, r4, [sp, #4]
   200a8:	4628      	mov	r0, r5
   200aa:	f000 f9e9 	bl	20480 <z_setup_new_thread>
   200ae:	7b6a      	ldrb	r2, [r5, #13]
   200b0:	4606      	mov	r6, r0
   200b2:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   200b6:	4628      	mov	r0, r5
   200b8:	736a      	strb	r2, [r5, #13]
   200ba:	f001 fe3b 	bl	21d34 <z_ready_thread>
	z_init_cpu(0);
   200be:	4620      	mov	r0, r4
   200c0:	f7ff ff70 	bl	1ffa4 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   200c4:	463a      	mov	r2, r7
   200c6:	4631      	mov	r1, r6
   200c8:	4628      	mov	r0, r5
   200ca:	f7f4 f997 	bl	143fc <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   200ce:	bf00      	nop
   200d0:	200052e0 	.word	0x200052e0
   200d4:	e000ed00 	.word	0xe000ed00
   200d8:	20002284 	.word	0x20002284
   200dc:	0001ff59 	.word	0x0001ff59
   200e0:	20001c98 	.word	0x20001c98
   200e4:	0002b5a6 	.word	0x0002b5a6
   200e8:	20004540 	.word	0x20004540

000200ec <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   200ec:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   200ee:	4c0c      	ldr	r4, [pc, #48]	; (20120 <statics_init+0x34>)
   200f0:	4d0c      	ldr	r5, [pc, #48]	; (20124 <statics_init+0x38>)
   200f2:	4e0d      	ldr	r6, [pc, #52]	; (20128 <statics_init+0x3c>)
   200f4:	42ac      	cmp	r4, r5
   200f6:	d908      	bls.n	2010a <statics_init+0x1e>
   200f8:	480c      	ldr	r0, [pc, #48]	; (2012c <statics_init+0x40>)
   200fa:	4631      	mov	r1, r6
   200fc:	2218      	movs	r2, #24
   200fe:	f004 f946 	bl	2438e <assert_print>
   20102:	2118      	movs	r1, #24
   20104:	4630      	mov	r0, r6
   20106:	f004 f93b 	bl	24380 <assert_post_action>
   2010a:	42ac      	cmp	r4, r5
   2010c:	d301      	bcc.n	20112 <statics_init+0x26>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   2010e:	2000      	movs	r0, #0
   20110:	bd70      	pop	{r4, r5, r6, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   20112:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   20116:	4620      	mov	r0, r4
   20118:	f007 faa6 	bl	27668 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   2011c:	3418      	adds	r4, #24
   2011e:	e7e9      	b.n	200f4 <statics_init+0x8>
   20120:	2000087c 	.word	0x2000087c
   20124:	2000087c 	.word	0x2000087c
   20128:	0002b5ae 	.word	0x0002b5ae
   2012c:	000289af 	.word	0x000289af

00020130 <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   20130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20134:	b085      	sub	sp, #20
   20136:	e9dd 970e 	ldrd	r9, r7, [sp, #56]	; 0x38
   2013a:	4606      	mov	r6, r0
   2013c:	468b      	mov	fp, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2013e:	4648      	mov	r0, r9
   20140:	4639      	mov	r1, r7
{
   20142:	4690      	mov	r8, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   20144:	f007 fb8b 	bl	2785e <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   20148:	f106 0514 	add.w	r5, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2014c:	e9cd 0102 	strd	r0, r1, [sp, #8]
	__asm__ volatile(
   20150:	f04f 0340 	mov.w	r3, #64	; 0x40
   20154:	f3ef 8411 	mrs	r4, BASEPRI
   20158:	f383 8812 	msr	BASEPRI_MAX, r3
   2015c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20160:	4628      	mov	r0, r5
   20162:	f000 faa9 	bl	206b8 <z_spin_lock_valid>
   20166:	b940      	cbnz	r0, 2017a <k_heap_aligned_alloc+0x4a>
   20168:	4932      	ldr	r1, [pc, #200]	; (20234 <k_heap_aligned_alloc+0x104>)
   2016a:	4833      	ldr	r0, [pc, #204]	; (20238 <k_heap_aligned_alloc+0x108>)
   2016c:	228e      	movs	r2, #142	; 0x8e
   2016e:	f004 f90e 	bl	2438e <assert_print>
   20172:	4830      	ldr	r0, [pc, #192]	; (20234 <k_heap_aligned_alloc+0x104>)
   20174:	218e      	movs	r1, #142	; 0x8e
   20176:	f004 f903 	bl	24380 <assert_post_action>
	z_spin_lock_set_owner(l);
   2017a:	4628      	mov	r0, r5
   2017c:	f000 faba 	bl	206f4 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   20180:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   20184:	b15b      	cbz	r3, 2019e <k_heap_aligned_alloc+0x6e>
   20186:	ea59 0307 	orrs.w	r3, r9, r7
   2018a:	d008      	beq.n	2019e <k_heap_aligned_alloc+0x6e>
   2018c:	492b      	ldr	r1, [pc, #172]	; (2023c <k_heap_aligned_alloc+0x10c>)
   2018e:	482a      	ldr	r0, [pc, #168]	; (20238 <k_heap_aligned_alloc+0x108>)
   20190:	2249      	movs	r2, #73	; 0x49
   20192:	f004 f8fc 	bl	2438e <assert_print>
   20196:	4829      	ldr	r0, [pc, #164]	; (2023c <k_heap_aligned_alloc+0x10c>)
   20198:	2149      	movs	r1, #73	; 0x49
   2019a:	f004 f8f1 	bl	24380 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2019e:	f8df 9094 	ldr.w	r9, [pc, #148]	; 20234 <k_heap_aligned_alloc+0x104>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   201a2:	f106 0a0c 	add.w	sl, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   201a6:	4642      	mov	r2, r8
   201a8:	4659      	mov	r1, fp
   201aa:	4630      	mov	r0, r6
   201ac:	f7f2 fb2c 	bl	12808 <sys_heap_aligned_alloc>
   201b0:	4607      	mov	r7, r0
		now = sys_clock_tick_get();
   201b2:	f002 fd93 	bl	22cdc <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   201b6:	b1a7      	cbz	r7, 201e2 <k_heap_aligned_alloc+0xb2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   201b8:	4628      	mov	r0, r5
   201ba:	f000 fa8b 	bl	206d4 <z_spin_unlock_valid>
   201be:	b940      	cbnz	r0, 201d2 <k_heap_aligned_alloc+0xa2>
   201c0:	491c      	ldr	r1, [pc, #112]	; (20234 <k_heap_aligned_alloc+0x104>)
   201c2:	481d      	ldr	r0, [pc, #116]	; (20238 <k_heap_aligned_alloc+0x108>)
   201c4:	22b9      	movs	r2, #185	; 0xb9
   201c6:	f004 f8e2 	bl	2438e <assert_print>
   201ca:	481a      	ldr	r0, [pc, #104]	; (20234 <k_heap_aligned_alloc+0x104>)
   201cc:	21b9      	movs	r1, #185	; 0xb9
   201ce:	f004 f8d7 	bl	24380 <assert_post_action>
	__asm__ volatile(
   201d2:	f384 8811 	msr	BASEPRI, r4
   201d6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   201da:	4638      	mov	r0, r7
   201dc:	b005      	add	sp, #20
   201de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   201e2:	9b02      	ldr	r3, [sp, #8]
   201e4:	1a18      	subs	r0, r3, r0
   201e6:	9b03      	ldr	r3, [sp, #12]
   201e8:	eb63 0101 	sbc.w	r1, r3, r1
   201ec:	2801      	cmp	r0, #1
   201ee:	f171 0300 	sbcs.w	r3, r1, #0
   201f2:	dbe1      	blt.n	201b8 <k_heap_aligned_alloc+0x88>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   201f4:	e9cd 0100 	strd	r0, r1, [sp]
   201f8:	4652      	mov	r2, sl
   201fa:	4621      	mov	r1, r4
   201fc:	4628      	mov	r0, r5
   201fe:	f001 fefd 	bl	21ffc <z_pend_curr>
	__asm__ volatile(
   20202:	f04f 0340 	mov.w	r3, #64	; 0x40
   20206:	f3ef 8411 	mrs	r4, BASEPRI
   2020a:	f383 8812 	msr	BASEPRI_MAX, r3
   2020e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20212:	4628      	mov	r0, r5
   20214:	f000 fa50 	bl	206b8 <z_spin_lock_valid>
   20218:	b940      	cbnz	r0, 2022c <k_heap_aligned_alloc+0xfc>
   2021a:	4807      	ldr	r0, [pc, #28]	; (20238 <k_heap_aligned_alloc+0x108>)
   2021c:	4649      	mov	r1, r9
   2021e:	228e      	movs	r2, #142	; 0x8e
   20220:	f004 f8b5 	bl	2438e <assert_print>
   20224:	218e      	movs	r1, #142	; 0x8e
   20226:	4648      	mov	r0, r9
   20228:	f004 f8aa 	bl	24380 <assert_post_action>
	z_spin_lock_set_owner(l);
   2022c:	4628      	mov	r0, r5
   2022e:	f000 fa61 	bl	206f4 <z_spin_lock_set_owner>
	return k;
   20232:	e7b8      	b.n	201a6 <k_heap_aligned_alloc+0x76>
   20234:	00028a23 	.word	0x00028a23
   20238:	000289af 	.word	0x000289af
   2023c:	0002b5ae 	.word	0x0002b5ae

00020240 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   20240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20242:	4604      	mov	r4, r0
   20244:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   20246:	f100 0514 	add.w	r5, r0, #20
   2024a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2024e:	f3ef 8711 	mrs	r7, BASEPRI
   20252:	f383 8812 	msr	BASEPRI_MAX, r3
   20256:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2025a:	4628      	mov	r0, r5
   2025c:	f000 fa2c 	bl	206b8 <z_spin_lock_valid>
   20260:	b940      	cbnz	r0, 20274 <k_heap_free+0x34>
   20262:	4916      	ldr	r1, [pc, #88]	; (202bc <k_heap_free+0x7c>)
   20264:	4816      	ldr	r0, [pc, #88]	; (202c0 <k_heap_free+0x80>)
   20266:	228e      	movs	r2, #142	; 0x8e
   20268:	f004 f891 	bl	2438e <assert_print>
   2026c:	4813      	ldr	r0, [pc, #76]	; (202bc <k_heap_free+0x7c>)
   2026e:	218e      	movs	r1, #142	; 0x8e
   20270:	f004 f886 	bl	24380 <assert_post_action>
	z_spin_lock_set_owner(l);
   20274:	4628      	mov	r0, r5
   20276:	f000 fa3d 	bl	206f4 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   2027a:	4620      	mov	r0, r4
   2027c:	4631      	mov	r1, r6
   2027e:	f7f2 fa8b 	bl	12798 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   20282:	f104 000c 	add.w	r0, r4, #12
   20286:	f007 fad0 	bl	2782a <z_unpend_all>
   2028a:	b128      	cbz	r0, 20298 <k_heap_free+0x58>
		z_reschedule(&h->lock, key);
   2028c:	4639      	mov	r1, r7
   2028e:	4628      	mov	r0, r5
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   20290:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   20294:	f001 bb1e 	b.w	218d4 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20298:	4628      	mov	r0, r5
   2029a:	f000 fa1b 	bl	206d4 <z_spin_unlock_valid>
   2029e:	b940      	cbnz	r0, 202b2 <k_heap_free+0x72>
   202a0:	4906      	ldr	r1, [pc, #24]	; (202bc <k_heap_free+0x7c>)
   202a2:	4807      	ldr	r0, [pc, #28]	; (202c0 <k_heap_free+0x80>)
   202a4:	22b9      	movs	r2, #185	; 0xb9
   202a6:	f004 f872 	bl	2438e <assert_print>
   202aa:	4804      	ldr	r0, [pc, #16]	; (202bc <k_heap_free+0x7c>)
   202ac:	21b9      	movs	r1, #185	; 0xb9
   202ae:	f004 f867 	bl	24380 <assert_post_action>
	__asm__ volatile(
   202b2:	f387 8811 	msr	BASEPRI, r7
   202b6:	f3bf 8f6f 	isb	sy
}
   202ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   202bc:	00028a23 	.word	0x00028a23
   202c0:	000289af 	.word	0x000289af

000202c4 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   202c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   202c6:	4c14      	ldr	r4, [pc, #80]	; (20318 <init_mem_slab_module+0x54>)
   202c8:	4d14      	ldr	r5, [pc, #80]	; (2031c <init_mem_slab_module+0x58>)
   202ca:	4e15      	ldr	r6, [pc, #84]	; (20320 <init_mem_slab_module+0x5c>)
   202cc:	42ac      	cmp	r4, r5
   202ce:	d908      	bls.n	202e2 <init_mem_slab_module+0x1e>
   202d0:	4814      	ldr	r0, [pc, #80]	; (20324 <init_mem_slab_module+0x60>)
   202d2:	4631      	mov	r1, r6
   202d4:	223d      	movs	r2, #61	; 0x3d
   202d6:	f004 f85a 	bl	2438e <assert_print>
   202da:	213d      	movs	r1, #61	; 0x3d
   202dc:	4630      	mov	r0, r6
   202de:	f004 f84f 	bl	24380 <assert_post_action>
   202e2:	42ac      	cmp	r4, r5
   202e4:	d301      	bcc.n	202ea <init_mem_slab_module+0x26>
			goto out;
		}
		z_object_init(slab);
	}

out:
   202e6:	2000      	movs	r0, #0
	return rc;
}
   202e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   202ea:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   202ee:	ea42 0301 	orr.w	r3, r2, r1
   202f2:	f013 0303 	ands.w	r3, r3, #3
   202f6:	d10b      	bne.n	20310 <init_mem_slab_module+0x4c>
	for (j = 0U; j < slab->num_blocks; j++) {
   202f8:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
   202fa:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   202fc:	4283      	cmp	r3, r0
   202fe:	d101      	bne.n	20304 <init_mem_slab_module+0x40>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   20300:	3420      	adds	r4, #32
   20302:	e7e3      	b.n	202cc <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
   20304:	69a7      	ldr	r7, [r4, #24]
   20306:	6017      	str	r7, [r2, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   20308:	3301      	adds	r3, #1
		slab->free_list = p;
   2030a:	61a2      	str	r2, [r4, #24]
		p += slab->block_size;
   2030c:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   2030e:	e7f5      	b.n	202fc <init_mem_slab_module+0x38>
	return rc;
   20310:	f06f 0015 	mvn.w	r0, #21
   20314:	e7e8      	b.n	202e8 <init_mem_slab_module+0x24>
   20316:	bf00      	nop
   20318:	2000081c 	.word	0x2000081c
   2031c:	2000087c 	.word	0x2000087c
   20320:	0002b5d0 	.word	0x0002b5d0
   20324:	000289af 	.word	0x000289af

00020328 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   20328:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2032c:	4604      	mov	r4, r0
   2032e:	460d      	mov	r5, r1
   20330:	4690      	mov	r8, r2
   20332:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   20334:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   20338:	f04f 0340 	mov.w	r3, #64	; 0x40
   2033c:	f3ef 8911 	mrs	r9, BASEPRI
   20340:	f383 8812 	msr	BASEPRI_MAX, r3
   20344:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20348:	4630      	mov	r0, r6
   2034a:	f000 f9b5 	bl	206b8 <z_spin_lock_valid>
   2034e:	b940      	cbnz	r0, 20362 <k_mem_slab_alloc+0x3a>
   20350:	491f      	ldr	r1, [pc, #124]	; (203d0 <k_mem_slab_alloc+0xa8>)
   20352:	4820      	ldr	r0, [pc, #128]	; (203d4 <k_mem_slab_alloc+0xac>)
   20354:	228e      	movs	r2, #142	; 0x8e
   20356:	f004 f81a 	bl	2438e <assert_print>
   2035a:	481d      	ldr	r0, [pc, #116]	; (203d0 <k_mem_slab_alloc+0xa8>)
   2035c:	218e      	movs	r1, #142	; 0x8e
   2035e:	f004 f80f 	bl	24380 <assert_post_action>
	z_spin_lock_set_owner(l);
   20362:	4630      	mov	r0, r6
   20364:	f000 f9c6 	bl	206f4 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   20368:	69a3      	ldr	r3, [r4, #24]
   2036a:	b1c3      	cbz	r3, 2039e <k_mem_slab_alloc+0x76>
		/* take a free block */
		*mem = slab->free_list;
   2036c:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   2036e:	681b      	ldr	r3, [r3, #0]
   20370:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
   20372:	69e3      	ldr	r3, [r4, #28]
   20374:	3301      	adds	r3, #1
   20376:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   20378:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2037a:	4630      	mov	r0, r6
   2037c:	f000 f9aa 	bl	206d4 <z_spin_unlock_valid>
   20380:	b940      	cbnz	r0, 20394 <k_mem_slab_alloc+0x6c>
   20382:	4913      	ldr	r1, [pc, #76]	; (203d0 <k_mem_slab_alloc+0xa8>)
   20384:	4813      	ldr	r0, [pc, #76]	; (203d4 <k_mem_slab_alloc+0xac>)
   20386:	22b9      	movs	r2, #185	; 0xb9
   20388:	f004 f801 	bl	2438e <assert_print>
   2038c:	4810      	ldr	r0, [pc, #64]	; (203d0 <k_mem_slab_alloc+0xa8>)
   2038e:	21b9      	movs	r1, #185	; 0xb9
   20390:	f003 fff6 	bl	24380 <assert_post_action>
	__asm__ volatile(
   20394:	f389 8811 	msr	BASEPRI, r9
   20398:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   2039c:	e013      	b.n	203c6 <k_mem_slab_alloc+0x9e>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   2039e:	ea58 0207 	orrs.w	r2, r8, r7
   203a2:	d103      	bne.n	203ac <k_mem_slab_alloc+0x84>
		*mem = NULL;
   203a4:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
   203a6:	f06f 040b 	mvn.w	r4, #11
   203aa:	e7e6      	b.n	2037a <k_mem_slab_alloc+0x52>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   203ac:	4622      	mov	r2, r4
   203ae:	e9cd 8700 	strd	r8, r7, [sp]
   203b2:	4649      	mov	r1, r9
   203b4:	4630      	mov	r0, r6
   203b6:	f001 fe21 	bl	21ffc <z_pend_curr>
		if (result == 0) {
   203ba:	4604      	mov	r4, r0
   203bc:	b918      	cbnz	r0, 203c6 <k_mem_slab_alloc+0x9e>
			*mem = _current->base.swap_data;
   203be:	4b06      	ldr	r3, [pc, #24]	; (203d8 <k_mem_slab_alloc+0xb0>)
   203c0:	689b      	ldr	r3, [r3, #8]
   203c2:	695b      	ldr	r3, [r3, #20]
   203c4:	602b      	str	r3, [r5, #0]
}
   203c6:	4620      	mov	r0, r4
   203c8:	b003      	add	sp, #12
   203ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   203ce:	bf00      	nop
   203d0:	00028a23 	.word	0x00028a23
   203d4:	000289af 	.word	0x000289af
   203d8:	20002284 	.word	0x20002284

000203dc <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   203dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   203e0:	4604      	mov	r4, r0
   203e2:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   203e4:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   203e8:	f04f 0340 	mov.w	r3, #64	; 0x40
   203ec:	f3ef 8711 	mrs	r7, BASEPRI
   203f0:	f383 8812 	msr	BASEPRI_MAX, r3
   203f4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   203f8:	4630      	mov	r0, r6
   203fa:	f000 f95d 	bl	206b8 <z_spin_lock_valid>
   203fe:	b940      	cbnz	r0, 20412 <k_mem_slab_free+0x36>
   20400:	491d      	ldr	r1, [pc, #116]	; (20478 <k_mem_slab_free+0x9c>)
   20402:	481e      	ldr	r0, [pc, #120]	; (2047c <k_mem_slab_free+0xa0>)
   20404:	228e      	movs	r2, #142	; 0x8e
   20406:	f003 ffc2 	bl	2438e <assert_print>
   2040a:	481b      	ldr	r0, [pc, #108]	; (20478 <k_mem_slab_free+0x9c>)
   2040c:	218e      	movs	r1, #142	; 0x8e
   2040e:	f003 ffb7 	bl	24380 <assert_post_action>
	z_spin_lock_set_owner(l);
   20412:	4630      	mov	r0, r6
   20414:	f000 f96e 	bl	206f4 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   20418:	f8d4 8018 	ldr.w	r8, [r4, #24]
   2041c:	f1b8 0f00 	cmp.w	r8, #0
   20420:	d10f      	bne.n	20442 <k_mem_slab_free+0x66>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   20422:	4620      	mov	r0, r4
   20424:	f001 ff80 	bl	22328 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   20428:	b158      	cbz	r0, 20442 <k_mem_slab_free+0x66>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   2042a:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   2042c:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   2042e:	f8c0 807c 	str.w	r8, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   20432:	f001 fc7f 	bl	21d34 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   20436:	4639      	mov	r1, r7
   20438:	4630      	mov	r0, r6
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   2043a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
   2043e:	f001 ba49 	b.w	218d4 <z_reschedule>
	**(char ***) mem = slab->free_list;
   20442:	682b      	ldr	r3, [r5, #0]
   20444:	69a2      	ldr	r2, [r4, #24]
   20446:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   20448:	682b      	ldr	r3, [r5, #0]
   2044a:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   2044c:	69e3      	ldr	r3, [r4, #28]
   2044e:	3b01      	subs	r3, #1
   20450:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20452:	4630      	mov	r0, r6
   20454:	f000 f93e 	bl	206d4 <z_spin_unlock_valid>
   20458:	b940      	cbnz	r0, 2046c <k_mem_slab_free+0x90>
   2045a:	4907      	ldr	r1, [pc, #28]	; (20478 <k_mem_slab_free+0x9c>)
   2045c:	4807      	ldr	r0, [pc, #28]	; (2047c <k_mem_slab_free+0xa0>)
   2045e:	22b9      	movs	r2, #185	; 0xb9
   20460:	f003 ff95 	bl	2438e <assert_print>
   20464:	4804      	ldr	r0, [pc, #16]	; (20478 <k_mem_slab_free+0x9c>)
   20466:	21b9      	movs	r1, #185	; 0xb9
   20468:	f003 ff8a 	bl	24380 <assert_post_action>
	__asm__ volatile(
   2046c:	f387 8811 	msr	BASEPRI, r7
   20470:	f3bf 8f6f 	isb	sy
}
   20474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20478:	00028a23 	.word	0x00028a23
   2047c:	000289af 	.word	0x000289af

00020480 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   20480:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20484:	b085      	sub	sp, #20
   20486:	4604      	mov	r4, r0
   20488:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   2048c:	f1b8 0f0f 	cmp.w	r8, #15
{
   20490:	460f      	mov	r7, r1
   20492:	4615      	mov	r5, r2
   20494:	4699      	mov	r9, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
   20496:	d132      	bne.n	204fe <z_setup_new_thread+0x7e>
   20498:	4b21      	ldr	r3, [pc, #132]	; (20520 <z_setup_new_thread+0xa0>)
   2049a:	4599      	cmp	r9, r3
   2049c:	d133      	bne.n	20506 <z_setup_new_thread+0x86>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   2049e:	f104 0358 	add.w	r3, r4, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   204a2:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   204a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   204a8:	7323      	strb	r3, [r4, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   204aa:	3507      	adds	r5, #7
	thread_base->thread_state = (uint8_t)initial_state;
   204ac:	2304      	movs	r3, #4
   204ae:	7363      	strb	r3, [r4, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   204b0:	f025 0507 	bic.w	r5, r5, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   204b4:	f107 0320 	add.w	r3, r7, #32
	new_thread->stack_info.size = stack_buf_size;
   204b8:	e9c4 351a 	strd	r3, r5, [r4, #104]	; 0x68
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   204bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38

	thread_base->prio = priority;
   204be:	f884 800e 	strb.w	r8, [r4, #14]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   204c2:	9302      	str	r3, [sp, #8]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   204c4:	f105 0820 	add.w	r8, r5, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   204c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   204ca:	9301      	str	r3, [sp, #4]
	thread_base->pended_on = NULL;
   204cc:	2600      	movs	r6, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   204ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   204d0:	9300      	str	r3, [sp, #0]
	stack_ptr = (char *)stack + stack_obj_size;
   204d2:	44b8      	add	r8, r7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   204d4:	464b      	mov	r3, r9
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   204d6:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
   204da:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
   204dc:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
   204de:	6726      	str	r6, [r4, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   204e0:	4642      	mov	r2, r8
   204e2:	4639      	mov	r1, r7
   204e4:	4620      	mov	r0, r4
   204e6:	f7f3 ff57 	bl	14398 <arch_new_thread>
	if (!_current) {
   204ea:	4b0e      	ldr	r3, [pc, #56]	; (20524 <z_setup_new_thread+0xa4>)
	new_thread->init_data = NULL;
   204ec:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
   204ee:	689b      	ldr	r3, [r3, #8]
   204f0:	b103      	cbz	r3, 204f4 <z_setup_new_thread+0x74>
	new_thread->resource_pool = _current->resource_pool;
   204f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   204f4:	6763      	str	r3, [r4, #116]	; 0x74
}
   204f6:	4640      	mov	r0, r8
   204f8:	b005      	add	sp, #20
   204fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   204fe:	f108 0310 	add.w	r3, r8, #16
   20502:	2b1e      	cmp	r3, #30
   20504:	d9cb      	bls.n	2049e <z_setup_new_thread+0x1e>
   20506:	4908      	ldr	r1, [pc, #32]	; (20528 <z_setup_new_thread+0xa8>)
   20508:	4808      	ldr	r0, [pc, #32]	; (2052c <z_setup_new_thread+0xac>)
   2050a:	f240 12ff 	movw	r2, #511	; 0x1ff
   2050e:	f003 ff3e 	bl	2438e <assert_print>
   20512:	4805      	ldr	r0, [pc, #20]	; (20528 <z_setup_new_thread+0xa8>)
   20514:	f240 11ff 	movw	r1, #511	; 0x1ff
   20518:	f003 ff32 	bl	24380 <assert_post_action>
   2051c:	e7bf      	b.n	2049e <z_setup_new_thread+0x1e>
   2051e:	bf00      	nop
   20520:	00020705 	.word	0x00020705
   20524:	20002284 	.word	0x20002284
   20528:	0002b5f5 	.word	0x0002b5f5
   2052c:	000289af 	.word	0x000289af

00020530 <z_impl_k_thread_create>:
{
   20530:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20534:	b087      	sub	sp, #28
   20536:	e9dd 6514 	ldrd	r6, r5, [sp, #80]	; 0x50
   2053a:	4604      	mov	r4, r0
   2053c:	460f      	mov	r7, r1
   2053e:	4690      	mov	r8, r2
   20540:	4699      	mov	r9, r3
   20542:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   20546:	b153      	cbz	r3, 2055e <z_impl_k_thread_create+0x2e>
   20548:	491a      	ldr	r1, [pc, #104]	; (205b4 <z_impl_k_thread_create+0x84>)
   2054a:	481b      	ldr	r0, [pc, #108]	; (205b8 <z_impl_k_thread_create+0x88>)
   2054c:	f240 226e 	movw	r2, #622	; 0x26e
   20550:	f003 ff1d 	bl	2438e <assert_print>
   20554:	4817      	ldr	r0, [pc, #92]	; (205b4 <z_impl_k_thread_create+0x84>)
   20556:	f240 216e 	movw	r1, #622	; 0x26e
   2055a:	f003 ff11 	bl	24380 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2055e:	2300      	movs	r3, #0
   20560:	9305      	str	r3, [sp, #20]
   20562:	9b12      	ldr	r3, [sp, #72]	; 0x48
   20564:	9304      	str	r3, [sp, #16]
   20566:	9b11      	ldr	r3, [sp, #68]	; 0x44
   20568:	9303      	str	r3, [sp, #12]
   2056a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2056c:	9302      	str	r3, [sp, #8]
   2056e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   20570:	9301      	str	r3, [sp, #4]
   20572:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   20574:	9300      	str	r3, [sp, #0]
   20576:	4642      	mov	r2, r8
   20578:	464b      	mov	r3, r9
   2057a:	4639      	mov	r1, r7
   2057c:	4620      	mov	r0, r4
   2057e:	f7ff ff7f 	bl	20480 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   20582:	f1b5 3fff 	cmp.w	r5, #4294967295
   20586:	bf08      	it	eq
   20588:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   2058c:	d005      	beq.n	2059a <z_impl_k_thread_create+0x6a>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2058e:	ea55 0306 	orrs.w	r3, r5, r6
   20592:	d106      	bne.n	205a2 <z_impl_k_thread_create+0x72>
	z_sched_start(thread);
   20594:	4620      	mov	r0, r4
   20596:	f001 fc03 	bl	21da0 <z_sched_start>
}
   2059a:	4620      	mov	r0, r4
   2059c:	b007      	add	sp, #28
   2059e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   205a2:	4906      	ldr	r1, [pc, #24]	; (205bc <z_impl_k_thread_create+0x8c>)
   205a4:	4632      	mov	r2, r6
   205a6:	462b      	mov	r3, r5
   205a8:	f104 0018 	add.w	r0, r4, #24
   205ac:	f002 f99a 	bl	228e4 <z_add_timeout>
   205b0:	e7f3      	b.n	2059a <z_impl_k_thread_create+0x6a>
   205b2:	bf00      	nop
   205b4:	0002b5f5 	.word	0x0002b5f5
   205b8:	000289af 	.word	0x000289af
   205bc:	00021e25 	.word	0x00021e25

000205c0 <z_init_static_threads>:
{
   205c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   205c4:	4c37      	ldr	r4, [pc, #220]	; (206a4 <z_init_static_threads+0xe4>)
	_FOREACH_STATIC_THREAD(thread_data) {
   205c6:	4d38      	ldr	r5, [pc, #224]	; (206a8 <z_init_static_threads+0xe8>)
   205c8:	4f38      	ldr	r7, [pc, #224]	; (206ac <z_init_static_threads+0xec>)
{
   205ca:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   205cc:	42ac      	cmp	r4, r5
   205ce:	4626      	mov	r6, r4
   205d0:	d90a      	bls.n	205e8 <z_init_static_threads+0x28>
   205d2:	4837      	ldr	r0, [pc, #220]	; (206b0 <z_init_static_threads+0xf0>)
   205d4:	4639      	mov	r1, r7
   205d6:	f240 22d5 	movw	r2, #725	; 0x2d5
   205da:	f003 fed8 	bl	2438e <assert_print>
   205de:	f240 21d5 	movw	r1, #725	; 0x2d5
   205e2:	4638      	mov	r0, r7
   205e4:	f003 fecc 	bl	24380 <assert_post_action>
   205e8:	42ae      	cmp	r6, r5
   205ea:	f104 0430 	add.w	r4, r4, #48	; 0x30
   205ee:	d31b      	bcc.n	20628 <z_init_static_threads+0x68>
	k_sched_lock();
   205f0:	f001 f9a6 	bl	21940 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   205f4:	4c2b      	ldr	r4, [pc, #172]	; (206a4 <z_init_static_threads+0xe4>)
   205f6:	4e2d      	ldr	r6, [pc, #180]	; (206ac <z_init_static_threads+0xec>)
   205f8:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 206b0 <z_init_static_threads+0xf0>
   205fc:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 206b4 <z_init_static_threads+0xf4>
   20600:	42ac      	cmp	r4, r5
   20602:	d90a      	bls.n	2061a <z_init_static_threads+0x5a>
   20604:	4631      	mov	r1, r6
   20606:	4640      	mov	r0, r8
   20608:	f44f 723d 	mov.w	r2, #756	; 0x2f4
   2060c:	f003 febf 	bl	2438e <assert_print>
   20610:	f44f 713d 	mov.w	r1, #756	; 0x2f4
   20614:	4630      	mov	r0, r6
   20616:	f003 feb3 	bl	24380 <assert_post_action>
   2061a:	42ac      	cmp	r4, r5
   2061c:	d320      	bcc.n	20660 <z_init_static_threads+0xa0>
}
   2061e:	b007      	add	sp, #28
   20620:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   20624:	f001 bdea 	b.w	221fc <k_sched_unlock>
		z_setup_new_thread(
   20628:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2062c:	9305      	str	r3, [sp, #20]
   2062e:	f854 3c10 	ldr.w	r3, [r4, #-16]
   20632:	9304      	str	r3, [sp, #16]
   20634:	f854 3c14 	ldr.w	r3, [r4, #-20]
   20638:	9303      	str	r3, [sp, #12]
   2063a:	f854 3c18 	ldr.w	r3, [r4, #-24]
   2063e:	9302      	str	r3, [sp, #8]
   20640:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   20644:	9301      	str	r3, [sp, #4]
   20646:	f854 3c20 	ldr.w	r3, [r4, #-32]
   2064a:	9300      	str	r3, [sp, #0]
   2064c:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   20650:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   20654:	f7ff ff14 	bl	20480 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   20658:	f854 3c30 	ldr.w	r3, [r4, #-48]
   2065c:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   2065e:	e7b5      	b.n	205cc <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   20660:	6a63      	ldr	r3, [r4, #36]	; 0x24
   20662:	1c5a      	adds	r2, r3, #1
   20664:	d00f      	beq.n	20686 <z_init_static_threads+0xc6>
					    K_MSEC(thread_data->init_delay));
   20666:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2066a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   2066e:	f240 30e7 	movw	r0, #999	; 0x3e7
   20672:	2100      	movs	r1, #0
   20674:	fbc3 0102 	smlal	r0, r1, r3, r2
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   20678:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   2067c:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2067e:	d104      	bne.n	2068a <z_init_static_threads+0xca>
	z_sched_start(thread);
   20680:	4638      	mov	r0, r7
   20682:	f001 fb8d 	bl	21da0 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   20686:	3430      	adds	r4, #48	; 0x30
   20688:	e7ba      	b.n	20600 <z_init_static_threads+0x40>
   2068a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2068e:	2300      	movs	r3, #0
   20690:	f7e0 fc5e 	bl	f50 <__aeabi_uldivmod>
   20694:	4602      	mov	r2, r0
   20696:	460b      	mov	r3, r1
   20698:	f107 0018 	add.w	r0, r7, #24
   2069c:	4649      	mov	r1, r9
   2069e:	f002 f921 	bl	228e4 <z_add_timeout>
   206a2:	e7f0      	b.n	20686 <z_init_static_threads+0xc6>
   206a4:	2000081c 	.word	0x2000081c
   206a8:	2000081c 	.word	0x2000081c
   206ac:	0002b5f5 	.word	0x0002b5f5
   206b0:	000289af 	.word	0x000289af
   206b4:	00021e25 	.word	0x00021e25

000206b8 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   206b8:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
   206ba:	b138      	cbz	r0, 206cc <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   206bc:	4b04      	ldr	r3, [pc, #16]	; (206d0 <z_spin_lock_valid+0x18>)
   206be:	7d1b      	ldrb	r3, [r3, #20]
   206c0:	f000 0003 	and.w	r0, r0, #3
   206c4:	1ac0      	subs	r0, r0, r3
   206c6:	bf18      	it	ne
   206c8:	2001      	movne	r0, #1
   206ca:	4770      	bx	lr
			return false;
		}
	}
	return true;
   206cc:	2001      	movs	r0, #1
}
   206ce:	4770      	bx	lr
   206d0:	20002284 	.word	0x20002284

000206d4 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   206d4:	4906      	ldr	r1, [pc, #24]	; (206f0 <z_spin_unlock_valid+0x1c>)
{
   206d6:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   206d8:	688a      	ldr	r2, [r1, #8]
   206da:	7d08      	ldrb	r0, [r1, #20]
   206dc:	6819      	ldr	r1, [r3, #0]
   206de:	4302      	orrs	r2, r0
   206e0:	4291      	cmp	r1, r2
   206e2:	f04f 0000 	mov.w	r0, #0
		return false;
	}
	l->thread_cpu = 0;
   206e6:	bf04      	itt	eq
   206e8:	6018      	streq	r0, [r3, #0]
	return true;
   206ea:	2001      	moveq	r0, #1
}
   206ec:	4770      	bx	lr
   206ee:	bf00      	nop
   206f0:	20002284 	.word	0x20002284

000206f4 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   206f4:	4a02      	ldr	r2, [pc, #8]	; (20700 <z_spin_lock_set_owner+0xc>)
   206f6:	7d11      	ldrb	r1, [r2, #20]
   206f8:	6893      	ldr	r3, [r2, #8]
   206fa:	430b      	orrs	r3, r1
   206fc:	6003      	str	r3, [r0, #0]
}
   206fe:	4770      	bx	lr
   20700:	20002284 	.word	0x20002284

00020704 <idle>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
   20704:	4c12      	ldr	r4, [pc, #72]	; (20750 <idle+0x4c>)
{
   20706:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(_current->base.prio >= 0);
   20708:	68a3      	ldr	r3, [r4, #8]
   2070a:	f993 300e 	ldrsb.w	r3, [r3, #14]
   2070e:	2b00      	cmp	r3, #0
   20710:	da08      	bge.n	20724 <idle+0x20>
   20712:	4910      	ldr	r1, [pc, #64]	; (20754 <idle+0x50>)
   20714:	4810      	ldr	r0, [pc, #64]	; (20758 <idle+0x54>)
   20716:	2227      	movs	r2, #39	; 0x27
   20718:	f003 fe39 	bl	2438e <assert_print>
   2071c:	480d      	ldr	r0, [pc, #52]	; (20754 <idle+0x50>)
   2071e:	2127      	movs	r1, #39	; 0x27
   20720:	f003 fe2e 	bl	24380 <assert_post_action>
	return !z_sys_post_kernel;
   20724:	4d0d      	ldr	r5, [pc, #52]	; (2075c <idle+0x58>)
	__asm__ volatile(
   20726:	f04f 0240 	mov.w	r2, #64	; 0x40
   2072a:	f3ef 8311 	mrs	r3, BASEPRI
   2072e:	f382 8812 	msr	BASEPRI_MAX, r2
   20732:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   20736:	f002 f9bf 	bl	22ab8 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   2073a:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   2073c:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   2073e:	b913      	cbnz	r3, 20746 <idle+0x42>
	arch_cpu_idle();
   20740:	f7f3 fd04 	bl	1414c <arch_cpu_idle>
}
   20744:	e7ef      	b.n	20726 <idle+0x22>
   20746:	f7f3 fbc3 	bl	13ed0 <pm_system_suspend>
   2074a:	2800      	cmp	r0, #0
   2074c:	d1eb      	bne.n	20726 <idle+0x22>
   2074e:	e7f7      	b.n	20740 <idle+0x3c>
   20750:	20002284 	.word	0x20002284
   20754:	0002b618 	.word	0x0002b618
   20758:	000289af 	.word	0x000289af
   2075c:	20002e79 	.word	0x20002e79

00020760 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   20760:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   20764:	4604      	mov	r4, r0
   20766:	4617      	mov	r7, r2
   20768:	461e      	mov	r6, r3
   2076a:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   2076e:	b143      	cbz	r3, 20782 <z_impl_k_mutex_lock+0x22>
   20770:	495f      	ldr	r1, [pc, #380]	; (208f0 <z_impl_k_mutex_lock+0x190>)
   20772:	4860      	ldr	r0, [pc, #384]	; (208f4 <z_impl_k_mutex_lock+0x194>)
   20774:	2265      	movs	r2, #101	; 0x65
   20776:	f003 fe0a 	bl	2438e <assert_print>
   2077a:	485d      	ldr	r0, [pc, #372]	; (208f0 <z_impl_k_mutex_lock+0x190>)
   2077c:	2165      	movs	r1, #101	; 0x65
   2077e:	f003 fdff 	bl	24380 <assert_post_action>
   20782:	f04f 0340 	mov.w	r3, #64	; 0x40
   20786:	f3ef 8811 	mrs	r8, BASEPRI
   2078a:	f383 8812 	msr	BASEPRI_MAX, r3
   2078e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20792:	4859      	ldr	r0, [pc, #356]	; (208f8 <z_impl_k_mutex_lock+0x198>)
   20794:	f7ff ff90 	bl	206b8 <z_spin_lock_valid>
   20798:	b940      	cbnz	r0, 207ac <z_impl_k_mutex_lock+0x4c>
   2079a:	4958      	ldr	r1, [pc, #352]	; (208fc <z_impl_k_mutex_lock+0x19c>)
   2079c:	4855      	ldr	r0, [pc, #340]	; (208f4 <z_impl_k_mutex_lock+0x194>)
   2079e:	228e      	movs	r2, #142	; 0x8e
   207a0:	f003 fdf5 	bl	2438e <assert_print>
   207a4:	4855      	ldr	r0, [pc, #340]	; (208fc <z_impl_k_mutex_lock+0x19c>)
   207a6:	218e      	movs	r1, #142	; 0x8e
   207a8:	f003 fdea 	bl	24380 <assert_post_action>
	z_spin_lock_set_owner(l);
   207ac:	4852      	ldr	r0, [pc, #328]	; (208f8 <z_impl_k_mutex_lock+0x198>)
   207ae:	f7ff ffa1 	bl	206f4 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   207b2:	68e3      	ldr	r3, [r4, #12]
   207b4:	4a52      	ldr	r2, [pc, #328]	; (20900 <z_impl_k_mutex_lock+0x1a0>)
   207b6:	b1d3      	cbz	r3, 207ee <z_impl_k_mutex_lock+0x8e>
   207b8:	68a0      	ldr	r0, [r4, #8]
   207ba:	6891      	ldr	r1, [r2, #8]
   207bc:	4288      	cmp	r0, r1
   207be:	d033      	beq.n	20828 <z_impl_k_mutex_lock+0xc8>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   207c0:	ea57 0306 	orrs.w	r3, r7, r6
   207c4:	d132      	bne.n	2082c <z_impl_k_mutex_lock+0xcc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   207c6:	484c      	ldr	r0, [pc, #304]	; (208f8 <z_impl_k_mutex_lock+0x198>)
   207c8:	f7ff ff84 	bl	206d4 <z_spin_unlock_valid>
   207cc:	b940      	cbnz	r0, 207e0 <z_impl_k_mutex_lock+0x80>
   207ce:	494b      	ldr	r1, [pc, #300]	; (208fc <z_impl_k_mutex_lock+0x19c>)
   207d0:	4848      	ldr	r0, [pc, #288]	; (208f4 <z_impl_k_mutex_lock+0x194>)
   207d2:	22b9      	movs	r2, #185	; 0xb9
   207d4:	f003 fddb 	bl	2438e <assert_print>
   207d8:	4848      	ldr	r0, [pc, #288]	; (208fc <z_impl_k_mutex_lock+0x19c>)
   207da:	21b9      	movs	r1, #185	; 0xb9
   207dc:	f003 fdd0 	bl	24380 <assert_post_action>
	__asm__ volatile(
   207e0:	f388 8811 	msr	BASEPRI, r8
   207e4:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   207e8:	f06f 000f 	mvn.w	r0, #15
   207ec:	e019      	b.n	20822 <z_impl_k_mutex_lock+0xc2>
					_current->base.prio :
   207ee:	6891      	ldr	r1, [r2, #8]
   207f0:	f991 100e 	ldrsb.w	r1, [r1, #14]
   207f4:	4840      	ldr	r0, [pc, #256]	; (208f8 <z_impl_k_mutex_lock+0x198>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   207f6:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   207f8:	3301      	adds	r3, #1
   207fa:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   207fc:	6893      	ldr	r3, [r2, #8]
   207fe:	60a3      	str	r3, [r4, #8]
   20800:	f7ff ff68 	bl	206d4 <z_spin_unlock_valid>
   20804:	b940      	cbnz	r0, 20818 <z_impl_k_mutex_lock+0xb8>
   20806:	493d      	ldr	r1, [pc, #244]	; (208fc <z_impl_k_mutex_lock+0x19c>)
   20808:	483a      	ldr	r0, [pc, #232]	; (208f4 <z_impl_k_mutex_lock+0x194>)
   2080a:	22b9      	movs	r2, #185	; 0xb9
   2080c:	f003 fdbf 	bl	2438e <assert_print>
   20810:	483a      	ldr	r0, [pc, #232]	; (208fc <z_impl_k_mutex_lock+0x19c>)
   20812:	21b9      	movs	r1, #185	; 0xb9
   20814:	f003 fdb4 	bl	24380 <assert_post_action>
   20818:	f388 8811 	msr	BASEPRI, r8
   2081c:	f3bf 8f6f 	isb	sy
		return 0;
   20820:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   20822:	b002      	add	sp, #8
   20824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   20828:	6921      	ldr	r1, [r4, #16]
   2082a:	e7e3      	b.n	207f4 <z_impl_k_mutex_lock+0x94>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   2082c:	f991 100e 	ldrsb.w	r1, [r1, #14]
   20830:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
   20834:	4299      	cmp	r1, r3
   20836:	bfa8      	it	ge
   20838:	4619      	movge	r1, r3
   2083a:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   2083e:	4291      	cmp	r1, r2
   20840:	bfb8      	it	lt
   20842:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   20844:	428b      	cmp	r3, r1
   20846:	dd3e      	ble.n	208c6 <z_impl_k_mutex_lock+0x166>
		resched = adjust_owner_prio(mutex, new_prio);
   20848:	f006 ff2a 	bl	276a0 <adjust_owner_prio.isra.0>
   2084c:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   2084e:	e9cd 7600 	strd	r7, r6, [sp]
   20852:	4829      	ldr	r0, [pc, #164]	; (208f8 <z_impl_k_mutex_lock+0x198>)
   20854:	4622      	mov	r2, r4
   20856:	4641      	mov	r1, r8
   20858:	f001 fbd0 	bl	21ffc <z_pend_curr>
	if (got_mutex == 0) {
   2085c:	2800      	cmp	r0, #0
   2085e:	d0e0      	beq.n	20822 <z_impl_k_mutex_lock+0xc2>
	__asm__ volatile(
   20860:	f04f 0340 	mov.w	r3, #64	; 0x40
   20864:	f3ef 8611 	mrs	r6, BASEPRI
   20868:	f383 8812 	msr	BASEPRI_MAX, r3
   2086c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20870:	4821      	ldr	r0, [pc, #132]	; (208f8 <z_impl_k_mutex_lock+0x198>)
   20872:	f7ff ff21 	bl	206b8 <z_spin_lock_valid>
   20876:	b940      	cbnz	r0, 2088a <z_impl_k_mutex_lock+0x12a>
   20878:	4920      	ldr	r1, [pc, #128]	; (208fc <z_impl_k_mutex_lock+0x19c>)
   2087a:	481e      	ldr	r0, [pc, #120]	; (208f4 <z_impl_k_mutex_lock+0x194>)
   2087c:	228e      	movs	r2, #142	; 0x8e
   2087e:	f003 fd86 	bl	2438e <assert_print>
   20882:	481e      	ldr	r0, [pc, #120]	; (208fc <z_impl_k_mutex_lock+0x19c>)
   20884:	218e      	movs	r1, #142	; 0x8e
   20886:	f003 fd7b 	bl	24380 <assert_post_action>
	z_spin_lock_set_owner(l);
   2088a:	481b      	ldr	r0, [pc, #108]	; (208f8 <z_impl_k_mutex_lock+0x198>)
   2088c:	f7ff ff32 	bl	206f4 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   20890:	6823      	ldr	r3, [r4, #0]
   20892:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20894:	429c      	cmp	r4, r3
   20896:	d00a      	beq.n	208ae <z_impl_k_mutex_lock+0x14e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   20898:	b14b      	cbz	r3, 208ae <z_impl_k_mutex_lock+0x14e>
   2089a:	f993 300e 	ldrsb.w	r3, [r3, #14]
   2089e:	4299      	cmp	r1, r3
   208a0:	bfa8      	it	ge
   208a2:	4619      	movge	r1, r3
   208a4:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   208a8:	4299      	cmp	r1, r3
   208aa:	bfb8      	it	lt
   208ac:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   208ae:	68a0      	ldr	r0, [r4, #8]
   208b0:	f006 fef6 	bl	276a0 <adjust_owner_prio.isra.0>
   208b4:	b900      	cbnz	r0, 208b8 <z_impl_k_mutex_lock+0x158>
	if (resched) {
   208b6:	b145      	cbz	r5, 208ca <z_impl_k_mutex_lock+0x16a>
		z_reschedule(&lock, key);
   208b8:	480f      	ldr	r0, [pc, #60]	; (208f8 <z_impl_k_mutex_lock+0x198>)
   208ba:	4631      	mov	r1, r6
   208bc:	f001 f80a 	bl	218d4 <z_reschedule>
	return -EAGAIN;
   208c0:	f06f 000a 	mvn.w	r0, #10
   208c4:	e7ad      	b.n	20822 <z_impl_k_mutex_lock+0xc2>
	bool resched = false;
   208c6:	2500      	movs	r5, #0
   208c8:	e7c1      	b.n	2084e <z_impl_k_mutex_lock+0xee>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   208ca:	480b      	ldr	r0, [pc, #44]	; (208f8 <z_impl_k_mutex_lock+0x198>)
   208cc:	f7ff ff02 	bl	206d4 <z_spin_unlock_valid>
   208d0:	b940      	cbnz	r0, 208e4 <z_impl_k_mutex_lock+0x184>
   208d2:	490a      	ldr	r1, [pc, #40]	; (208fc <z_impl_k_mutex_lock+0x19c>)
   208d4:	4807      	ldr	r0, [pc, #28]	; (208f4 <z_impl_k_mutex_lock+0x194>)
   208d6:	22b9      	movs	r2, #185	; 0xb9
   208d8:	f003 fd59 	bl	2438e <assert_print>
   208dc:	4807      	ldr	r0, [pc, #28]	; (208fc <z_impl_k_mutex_lock+0x19c>)
   208de:	21b9      	movs	r1, #185	; 0xb9
   208e0:	f003 fd4e 	bl	24380 <assert_post_action>
	__asm__ volatile(
   208e4:	f386 8811 	msr	BASEPRI, r6
   208e8:	f3bf 8f6f 	isb	sy
   208ec:	e7e8      	b.n	208c0 <z_impl_k_mutex_lock+0x160>
   208ee:	bf00      	nop
   208f0:	0002b639 	.word	0x0002b639
   208f4:	000289af 	.word	0x000289af
   208f8:	200022ac 	.word	0x200022ac
   208fc:	00028a23 	.word	0x00028a23
   20900:	20002284 	.word	0x20002284

00020904 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   20904:	b538      	push	{r3, r4, r5, lr}
   20906:	4604      	mov	r4, r0
   20908:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   2090c:	b143      	cbz	r3, 20920 <z_impl_k_mutex_unlock+0x1c>
   2090e:	4943      	ldr	r1, [pc, #268]	; (20a1c <z_impl_k_mutex_unlock+0x118>)
   20910:	4843      	ldr	r0, [pc, #268]	; (20a20 <z_impl_k_mutex_unlock+0x11c>)
   20912:	22c7      	movs	r2, #199	; 0xc7
   20914:	f003 fd3b 	bl	2438e <assert_print>
   20918:	4840      	ldr	r0, [pc, #256]	; (20a1c <z_impl_k_mutex_unlock+0x118>)
   2091a:	21c7      	movs	r1, #199	; 0xc7
   2091c:	f003 fd30 	bl	24380 <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   20920:	68a3      	ldr	r3, [r4, #8]
   20922:	2b00      	cmp	r3, #0
   20924:	d074      	beq.n	20a10 <z_impl_k_mutex_unlock+0x10c>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   20926:	4d3f      	ldr	r5, [pc, #252]	; (20a24 <z_impl_k_mutex_unlock+0x120>)
   20928:	68aa      	ldr	r2, [r5, #8]
   2092a:	4293      	cmp	r3, r2
   2092c:	d173      	bne.n	20a16 <z_impl_k_mutex_unlock+0x112>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   2092e:	68e3      	ldr	r3, [r4, #12]
   20930:	b943      	cbnz	r3, 20944 <z_impl_k_mutex_unlock+0x40>
   20932:	493a      	ldr	r1, [pc, #232]	; (20a1c <z_impl_k_mutex_unlock+0x118>)
   20934:	483a      	ldr	r0, [pc, #232]	; (20a20 <z_impl_k_mutex_unlock+0x11c>)
   20936:	22df      	movs	r2, #223	; 0xdf
   20938:	f003 fd29 	bl	2438e <assert_print>
   2093c:	4837      	ldr	r0, [pc, #220]	; (20a1c <z_impl_k_mutex_unlock+0x118>)
   2093e:	21df      	movs	r1, #223	; 0xdf
   20940:	f003 fd1e 	bl	24380 <assert_post_action>
   20944:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
   20948:	b143      	cbz	r3, 2095c <z_impl_k_mutex_unlock+0x58>
   2094a:	4937      	ldr	r1, [pc, #220]	; (20a28 <z_impl_k_mutex_unlock+0x124>)
   2094c:	4834      	ldr	r0, [pc, #208]	; (20a20 <z_impl_k_mutex_unlock+0x11c>)
   2094e:	22fd      	movs	r2, #253	; 0xfd
   20950:	f003 fd1d 	bl	2438e <assert_print>
   20954:	4834      	ldr	r0, [pc, #208]	; (20a28 <z_impl_k_mutex_unlock+0x124>)
   20956:	21fd      	movs	r1, #253	; 0xfd
   20958:	f003 fd12 	bl	24380 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   2095c:	68ab      	ldr	r3, [r5, #8]
   2095e:	7bdb      	ldrb	r3, [r3, #15]
   20960:	2b01      	cmp	r3, #1
   20962:	d108      	bne.n	20976 <z_impl_k_mutex_unlock+0x72>
   20964:	4930      	ldr	r1, [pc, #192]	; (20a28 <z_impl_k_mutex_unlock+0x124>)
   20966:	482e      	ldr	r0, [pc, #184]	; (20a20 <z_impl_k_mutex_unlock+0x11c>)
   20968:	22fe      	movs	r2, #254	; 0xfe
   2096a:	f003 fd10 	bl	2438e <assert_print>
   2096e:	482e      	ldr	r0, [pc, #184]	; (20a28 <z_impl_k_mutex_unlock+0x124>)
   20970:	21fe      	movs	r1, #254	; 0xfe
   20972:	f003 fd05 	bl	24380 <assert_post_action>

	--_current->base.sched_locked;
   20976:	68aa      	ldr	r2, [r5, #8]
   20978:	7bd3      	ldrb	r3, [r2, #15]
   2097a:	3b01      	subs	r3, #1
   2097c:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   2097e:	68e3      	ldr	r3, [r4, #12]
   20980:	2b01      	cmp	r3, #1
   20982:	d905      	bls.n	20990 <z_impl_k_mutex_unlock+0x8c>
		mutex->lock_count--;
   20984:	3b01      	subs	r3, #1
   20986:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   20988:	f001 fc38 	bl	221fc <k_sched_unlock>

	return 0;
   2098c:	2000      	movs	r0, #0
}
   2098e:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   20990:	f04f 0340 	mov.w	r3, #64	; 0x40
   20994:	f3ef 8511 	mrs	r5, BASEPRI
   20998:	f383 8812 	msr	BASEPRI_MAX, r3
   2099c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   209a0:	4822      	ldr	r0, [pc, #136]	; (20a2c <z_impl_k_mutex_unlock+0x128>)
   209a2:	f7ff fe89 	bl	206b8 <z_spin_lock_valid>
   209a6:	b940      	cbnz	r0, 209ba <z_impl_k_mutex_unlock+0xb6>
   209a8:	4921      	ldr	r1, [pc, #132]	; (20a30 <z_impl_k_mutex_unlock+0x12c>)
   209aa:	481d      	ldr	r0, [pc, #116]	; (20a20 <z_impl_k_mutex_unlock+0x11c>)
   209ac:	228e      	movs	r2, #142	; 0x8e
   209ae:	f003 fcee 	bl	2438e <assert_print>
   209b2:	481f      	ldr	r0, [pc, #124]	; (20a30 <z_impl_k_mutex_unlock+0x12c>)
   209b4:	218e      	movs	r1, #142	; 0x8e
   209b6:	f003 fce3 	bl	24380 <assert_post_action>
	z_spin_lock_set_owner(l);
   209ba:	481c      	ldr	r0, [pc, #112]	; (20a2c <z_impl_k_mutex_unlock+0x128>)
   209bc:	f7ff fe9a 	bl	206f4 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   209c0:	6921      	ldr	r1, [r4, #16]
   209c2:	68a0      	ldr	r0, [r4, #8]
   209c4:	f006 fe6c 	bl	276a0 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   209c8:	4620      	mov	r0, r4
   209ca:	f001 fcad 	bl	22328 <z_unpend_first_thread>
	mutex->owner = new_owner;
   209ce:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   209d0:	b158      	cbz	r0, 209ea <z_impl_k_mutex_unlock+0xe6>
		mutex->owner_orig_prio = new_owner->base.prio;
   209d2:	f990 200e 	ldrsb.w	r2, [r0, #14]
   209d6:	6122      	str	r2, [r4, #16]
   209d8:	2200      	movs	r2, #0
   209da:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   209dc:	f001 f9aa 	bl	21d34 <z_ready_thread>
		z_reschedule(&lock, key);
   209e0:	4812      	ldr	r0, [pc, #72]	; (20a2c <z_impl_k_mutex_unlock+0x128>)
   209e2:	4629      	mov	r1, r5
   209e4:	f000 ff76 	bl	218d4 <z_reschedule>
   209e8:	e7ce      	b.n	20988 <z_impl_k_mutex_unlock+0x84>
		mutex->lock_count = 0U;
   209ea:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   209ec:	480f      	ldr	r0, [pc, #60]	; (20a2c <z_impl_k_mutex_unlock+0x128>)
   209ee:	f7ff fe71 	bl	206d4 <z_spin_unlock_valid>
   209f2:	b940      	cbnz	r0, 20a06 <z_impl_k_mutex_unlock+0x102>
   209f4:	490e      	ldr	r1, [pc, #56]	; (20a30 <z_impl_k_mutex_unlock+0x12c>)
   209f6:	480a      	ldr	r0, [pc, #40]	; (20a20 <z_impl_k_mutex_unlock+0x11c>)
   209f8:	22b9      	movs	r2, #185	; 0xb9
   209fa:	f003 fcc8 	bl	2438e <assert_print>
   209fe:	480c      	ldr	r0, [pc, #48]	; (20a30 <z_impl_k_mutex_unlock+0x12c>)
   20a00:	21b9      	movs	r1, #185	; 0xb9
   20a02:	f003 fcbd 	bl	24380 <assert_post_action>
	__asm__ volatile(
   20a06:	f385 8811 	msr	BASEPRI, r5
   20a0a:	f3bf 8f6f 	isb	sy
   20a0e:	e7bb      	b.n	20988 <z_impl_k_mutex_unlock+0x84>
		return -EINVAL;
   20a10:	f06f 0015 	mvn.w	r0, #21
   20a14:	e7bb      	b.n	2098e <z_impl_k_mutex_unlock+0x8a>
		return -EPERM;
   20a16:	f04f 30ff 	mov.w	r0, #4294967295
   20a1a:	e7b8      	b.n	2098e <z_impl_k_mutex_unlock+0x8a>
   20a1c:	0002b639 	.word	0x0002b639
   20a20:	000289af 	.word	0x000289af
   20a24:	20002284 	.word	0x20002284
   20a28:	0002b65b 	.word	0x0002b65b
   20a2c:	200022ac 	.word	0x200022ac
   20a30:	00028a23 	.word	0x00028a23

00020a34 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   20a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20a38:	4604      	mov	r4, r0
   20a3a:	f89d a020 	ldrb.w	sl, [sp, #32]
   20a3e:	460d      	mov	r5, r1
   20a40:	4690      	mov	r8, r2
   20a42:	4699      	mov	r9, r3
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   20a44:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   20a48:	f04f 0340 	mov.w	r3, #64	; 0x40
   20a4c:	f3ef 8711 	mrs	r7, BASEPRI
   20a50:	f383 8812 	msr	BASEPRI_MAX, r3
   20a54:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20a58:	4630      	mov	r0, r6
   20a5a:	f7ff fe2d 	bl	206b8 <z_spin_lock_valid>
   20a5e:	b940      	cbnz	r0, 20a72 <queue_insert+0x3e>
   20a60:	4936      	ldr	r1, [pc, #216]	; (20b3c <queue_insert+0x108>)
   20a62:	4837      	ldr	r0, [pc, #220]	; (20b40 <queue_insert+0x10c>)
   20a64:	228e      	movs	r2, #142	; 0x8e
   20a66:	f003 fc92 	bl	2438e <assert_print>
   20a6a:	4834      	ldr	r0, [pc, #208]	; (20b3c <queue_insert+0x108>)
   20a6c:	218e      	movs	r1, #142	; 0x8e
   20a6e:	f003 fc87 	bl	24380 <assert_post_action>
	z_spin_lock_set_owner(l);
   20a72:	4630      	mov	r0, r6
   20a74:	f7ff fe3e 	bl	206f4 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, queue_insert, queue, alloc);

	if (is_append) {
   20a78:	f1ba 0f00 	cmp.w	sl, #0
   20a7c:	d000      	beq.n	20a80 <queue_insert+0x4c>
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   20a7e:	6865      	ldr	r5, [r4, #4]
		prev = sys_sflist_peek_tail(&queue->data_q);
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   20a80:	f104 000c 	add.w	r0, r4, #12
   20a84:	f001 fc50 	bl	22328 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   20a88:	b158      	cbz	r0, 20aa2 <queue_insert+0x6e>
   20a8a:	2400      	movs	r4, #0
   20a8c:	67c4      	str	r4, [r0, #124]	; 0x7c
   20a8e:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   20a92:	f001 f94f 	bl	21d34 <z_ready_thread>

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, queue_insert, queue, alloc, K_FOREVER);

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   20a96:	4630      	mov	r0, r6
   20a98:	4639      	mov	r1, r7
   20a9a:	f000 ff1b 	bl	218d4 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc, 0);

	return 0;
   20a9e:	2000      	movs	r0, #0
   20aa0:	e019      	b.n	20ad6 <queue_insert+0xa2>
	if (alloc) {
   20aa2:	f1b9 0f00 	cmp.w	r9, #0
   20aa6:	d028      	beq.n	20afa <queue_insert+0xc6>
	return z_thread_aligned_alloc(0, size);
   20aa8:	2108      	movs	r1, #8
   20aaa:	f002 fd17 	bl	234dc <z_thread_aligned_alloc>
		if (anode == NULL) {
   20aae:	b9a0      	cbnz	r0, 20ada <queue_insert+0xa6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20ab0:	4630      	mov	r0, r6
   20ab2:	f7ff fe0f 	bl	206d4 <z_spin_unlock_valid>
   20ab6:	b940      	cbnz	r0, 20aca <queue_insert+0x96>
   20ab8:	4920      	ldr	r1, [pc, #128]	; (20b3c <queue_insert+0x108>)
   20aba:	4821      	ldr	r0, [pc, #132]	; (20b40 <queue_insert+0x10c>)
   20abc:	22b9      	movs	r2, #185	; 0xb9
   20abe:	f003 fc66 	bl	2438e <assert_print>
   20ac2:	481e      	ldr	r0, [pc, #120]	; (20b3c <queue_insert+0x108>)
   20ac4:	21b9      	movs	r1, #185	; 0xb9
   20ac6:	f003 fc5b 	bl	24380 <assert_post_action>
	__asm__ volatile(
   20aca:	f387 8811 	msr	BASEPRI, r7
   20ace:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   20ad2:	f06f 000b 	mvn.w	r0, #11
}
   20ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   20ada:	2301      	movs	r3, #1
		anode->data = data;
   20adc:	f8c0 8004 	str.w	r8, [r0, #4]
   20ae0:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   20ae2:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   20ae4:	f003 0203 	and.w	r2, r3, #3
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   20ae8:	b95d      	cbnz	r5, 20b02 <queue_insert+0xce>
	parent->next_and_flags = cur_flags | (unative_t)child;
   20aea:	6823      	ldr	r3, [r4, #0]
   20aec:	4313      	orrs	r3, r2
   20aee:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   20af0:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   20af2:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   20af4:	b973      	cbnz	r3, 20b14 <queue_insert+0xe0>
	list->tail = node;
   20af6:	6060      	str	r0, [r4, #4]
}
   20af8:	e00c      	b.n	20b14 <queue_insert+0xe0>
	node->next_and_flags = flags;
   20afa:	f8c8 9000 	str.w	r9, [r8]
}
   20afe:	4640      	mov	r0, r8
   20b00:	e7ef      	b.n	20ae2 <queue_insert+0xae>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   20b02:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   20b04:	f033 0303 	bics.w	r3, r3, #3
   20b08:	d110      	bne.n	20b2c <queue_insert+0xf8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   20b0a:	6002      	str	r2, [r0, #0]
	return list->tail;
   20b0c:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   20b0e:	b93a      	cbnz	r2, 20b20 <queue_insert+0xec>
	list->head = node;
   20b10:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   20b14:	2104      	movs	r1, #4
   20b16:	f104 0014 	add.w	r0, r4, #20
   20b1a:	f006 ff71 	bl	27a00 <z_handle_obj_poll_events>
   20b1e:	e7ba      	b.n	20a96 <queue_insert+0x62>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   20b20:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   20b22:	f003 0303 	and.w	r3, r3, #3
   20b26:	4303      	orrs	r3, r0
   20b28:	6013      	str	r3, [r2, #0]
   20b2a:	e7e4      	b.n	20af6 <queue_insert+0xc2>
   20b2c:	4313      	orrs	r3, r2
   20b2e:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   20b30:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   20b32:	f003 0303 	and.w	r3, r3, #3
   20b36:	4303      	orrs	r3, r0
   20b38:	602b      	str	r3, [r5, #0]
}
   20b3a:	e7eb      	b.n	20b14 <queue_insert+0xe0>
   20b3c:	00028a23 	.word	0x00028a23
   20b40:	000289af 	.word	0x000289af

00020b44 <k_queue_append_list>:
}
#include <syscalls/k_queue_alloc_prepend_mrsh.c>
#endif

int k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   20b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20b48:	4605      	mov	r5, r0
   20b4a:	4616      	mov	r6, r2
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, append_list, queue);

	/* invalid head or tail of list */
	CHECKIF(head == NULL || tail == NULL) {
   20b4c:	460c      	mov	r4, r1
   20b4e:	2900      	cmp	r1, #0
   20b50:	d045      	beq.n	20bde <k_queue_append_list+0x9a>
   20b52:	2a00      	cmp	r2, #0
   20b54:	d043      	beq.n	20bde <k_queue_append_list+0x9a>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, append_list, queue, -EINVAL);

		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   20b56:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   20b5a:	f04f 0340 	mov.w	r3, #64	; 0x40
   20b5e:	f3ef 8911 	mrs	r9, BASEPRI
   20b62:	f383 8812 	msr	BASEPRI_MAX, r3
   20b66:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20b6a:	4638      	mov	r0, r7
   20b6c:	f7ff fda4 	bl	206b8 <z_spin_lock_valid>
   20b70:	b940      	cbnz	r0, 20b84 <k_queue_append_list+0x40>
   20b72:	491c      	ldr	r1, [pc, #112]	; (20be4 <k_queue_append_list+0xa0>)
   20b74:	481c      	ldr	r0, [pc, #112]	; (20be8 <k_queue_append_list+0xa4>)
   20b76:	228e      	movs	r2, #142	; 0x8e
   20b78:	f003 fc09 	bl	2438e <assert_print>
   20b7c:	4819      	ldr	r0, [pc, #100]	; (20be4 <k_queue_append_list+0xa0>)
   20b7e:	218e      	movs	r1, #142	; 0x8e
   20b80:	f003 fbfe 	bl	24380 <assert_post_action>
	z_spin_lock_set_owner(l);
   20b84:	4638      	mov	r0, r7
	struct k_thread *thread = NULL;

	if (head != NULL) {
		thread = z_unpend_first_thread(&queue->wait_q);
   20b86:	f105 080c 	add.w	r8, r5, #12
   20b8a:	f7ff fdb3 	bl	206f4 <z_spin_lock_set_owner>
   20b8e:	4640      	mov	r0, r8
   20b90:	f001 fbca 	bl	22328 <z_unpend_first_thread>
   20b94:	f04f 0a00 	mov.w	sl, #0
	}

	while ((head != NULL) && (thread != NULL)) {
   20b98:	b920      	cbnz	r0, 20ba4 <k_queue_append_list+0x60>
	return list->tail;
   20b9a:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   20b9c:	b9ca      	cbnz	r2, 20bd2 <k_queue_append_list+0x8e>
	list->head = node;
   20b9e:	602c      	str	r4, [r5, #0]
	list->tail = node;
   20ba0:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   20ba2:	e00a      	b.n	20bba <k_queue_append_list+0x76>
	thread->base.swap_data = data;
   20ba4:	6144      	str	r4, [r0, #20]
   20ba6:	f8c0 a07c 	str.w	sl, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   20baa:	f001 f8c3 	bl	21d34 <z_ready_thread>
		prepare_thread_to_run(thread, head);
		head = *(void **)head;
   20bae:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   20bb0:	4640      	mov	r0, r8
   20bb2:	f001 fbb9 	bl	22328 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   20bb6:	2c00      	cmp	r4, #0
   20bb8:	d1ee      	bne.n	20b98 <k_queue_append_list+0x54>
	z_handle_obj_poll_events(&queue->poll_events, state);
   20bba:	2104      	movs	r1, #4
   20bbc:	f105 0014 	add.w	r0, r5, #20
   20bc0:	f006 ff1e 	bl	27a00 <z_handle_obj_poll_events>
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, append_list, queue, 0);

	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   20bc4:	4638      	mov	r0, r7
   20bc6:	4649      	mov	r1, r9
   20bc8:	f000 fe84 	bl	218d4 <z_reschedule>
	return 0;
   20bcc:	2000      	movs	r0, #0
}
   20bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   20bd2:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   20bd4:	f003 0303 	and.w	r3, r3, #3
   20bd8:	431c      	orrs	r4, r3
   20bda:	6014      	str	r4, [r2, #0]
}
   20bdc:	e7e0      	b.n	20ba0 <k_queue_append_list+0x5c>
		return -EINVAL;
   20bde:	f06f 0015 	mvn.w	r0, #21
   20be2:	e7f4      	b.n	20bce <k_queue_append_list+0x8a>
   20be4:	00028a23 	.word	0x00028a23
   20be8:	000289af 	.word	0x000289af

00020bec <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   20bec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   20bf0:	4605      	mov	r5, r0
   20bf2:	4690      	mov	r8, r2
   20bf4:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   20bf6:	f100 0608 	add.w	r6, r0, #8
   20bfa:	f04f 0340 	mov.w	r3, #64	; 0x40
   20bfe:	f3ef 8911 	mrs	r9, BASEPRI
   20c02:	f383 8812 	msr	BASEPRI_MAX, r3
   20c06:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20c0a:	4630      	mov	r0, r6
   20c0c:	f7ff fd54 	bl	206b8 <z_spin_lock_valid>
   20c10:	b940      	cbnz	r0, 20c24 <z_impl_k_queue_get+0x38>
   20c12:	4920      	ldr	r1, [pc, #128]	; (20c94 <z_impl_k_queue_get+0xa8>)
   20c14:	4820      	ldr	r0, [pc, #128]	; (20c98 <z_impl_k_queue_get+0xac>)
   20c16:	228e      	movs	r2, #142	; 0x8e
   20c18:	f003 fbb9 	bl	2438e <assert_print>
   20c1c:	481d      	ldr	r0, [pc, #116]	; (20c94 <z_impl_k_queue_get+0xa8>)
   20c1e:	218e      	movs	r1, #142	; 0x8e
   20c20:	f003 fbae 	bl	24380 <assert_post_action>
	z_spin_lock_set_owner(l);
   20c24:	4630      	mov	r0, r6
   20c26:	f7ff fd65 	bl	206f4 <z_spin_lock_set_owner>
	return list->head;
   20c2a:	682c      	ldr	r4, [r5, #0]
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   20c2c:	b30c      	cbz	r4, 20c72 <z_impl_k_queue_get+0x86>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   20c2e:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   20c30:	686a      	ldr	r2, [r5, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   20c32:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   20c36:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   20c38:	4620      	mov	r0, r4
	list->head = node;
   20c3a:	602b      	str	r3, [r5, #0]
	list->tail = node;
   20c3c:	bf08      	it	eq
   20c3e:	606b      	streq	r3, [r5, #4]
   20c40:	2101      	movs	r1, #1
   20c42:	f006 fd3c 	bl	276be <z_queue_node_peek>
   20c46:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20c48:	4630      	mov	r0, r6
   20c4a:	f7ff fd43 	bl	206d4 <z_spin_unlock_valid>
   20c4e:	b940      	cbnz	r0, 20c62 <z_impl_k_queue_get+0x76>
   20c50:	4910      	ldr	r1, [pc, #64]	; (20c94 <z_impl_k_queue_get+0xa8>)
   20c52:	4811      	ldr	r0, [pc, #68]	; (20c98 <z_impl_k_queue_get+0xac>)
   20c54:	22b9      	movs	r2, #185	; 0xb9
   20c56:	f003 fb9a 	bl	2438e <assert_print>
   20c5a:	480e      	ldr	r0, [pc, #56]	; (20c94 <z_impl_k_queue_get+0xa8>)
   20c5c:	21b9      	movs	r1, #185	; 0xb9
   20c5e:	f003 fb8f 	bl	24380 <assert_post_action>
	__asm__ volatile(
   20c62:	f389 8811 	msr	BASEPRI, r9
   20c66:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   20c6a:	4620      	mov	r0, r4
   20c6c:	b003      	add	sp, #12
   20c6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   20c72:	ea58 0307 	orrs.w	r3, r8, r7
   20c76:	d0e7      	beq.n	20c48 <z_impl_k_queue_get+0x5c>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   20c78:	e9cd 8700 	strd	r8, r7, [sp]
   20c7c:	f105 020c 	add.w	r2, r5, #12
   20c80:	4649      	mov	r1, r9
   20c82:	4630      	mov	r0, r6
   20c84:	f001 f9ba 	bl	21ffc <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   20c88:	2800      	cmp	r0, #0
   20c8a:	d1ee      	bne.n	20c6a <z_impl_k_queue_get+0x7e>
   20c8c:	4b03      	ldr	r3, [pc, #12]	; (20c9c <z_impl_k_queue_get+0xb0>)
   20c8e:	689b      	ldr	r3, [r3, #8]
   20c90:	695c      	ldr	r4, [r3, #20]
   20c92:	e7ea      	b.n	20c6a <z_impl_k_queue_get+0x7e>
   20c94:	00028a23 	.word	0x00028a23
   20c98:	000289af 	.word	0x000289af
   20c9c:	20002284 	.word	0x20002284

00020ca0 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   20ca0:	b538      	push	{r3, r4, r5, lr}
   20ca2:	4604      	mov	r4, r0
	__asm__ volatile(
   20ca4:	f04f 0340 	mov.w	r3, #64	; 0x40
   20ca8:	f3ef 8511 	mrs	r5, BASEPRI
   20cac:	f383 8812 	msr	BASEPRI_MAX, r3
   20cb0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20cb4:	4814      	ldr	r0, [pc, #80]	; (20d08 <z_impl_k_sem_give+0x68>)
   20cb6:	f7ff fcff 	bl	206b8 <z_spin_lock_valid>
   20cba:	b940      	cbnz	r0, 20cce <z_impl_k_sem_give+0x2e>
   20cbc:	4913      	ldr	r1, [pc, #76]	; (20d0c <z_impl_k_sem_give+0x6c>)
   20cbe:	4814      	ldr	r0, [pc, #80]	; (20d10 <z_impl_k_sem_give+0x70>)
   20cc0:	228e      	movs	r2, #142	; 0x8e
   20cc2:	f003 fb64 	bl	2438e <assert_print>
   20cc6:	4811      	ldr	r0, [pc, #68]	; (20d0c <z_impl_k_sem_give+0x6c>)
   20cc8:	218e      	movs	r1, #142	; 0x8e
   20cca:	f003 fb59 	bl	24380 <assert_post_action>
	z_spin_lock_set_owner(l);
   20cce:	480e      	ldr	r0, [pc, #56]	; (20d08 <z_impl_k_sem_give+0x68>)
   20cd0:	f7ff fd10 	bl	206f4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   20cd4:	4620      	mov	r0, r4
   20cd6:	f001 fb27 	bl	22328 <z_unpend_first_thread>

	if (thread != NULL) {
   20cda:	b148      	cbz	r0, 20cf0 <z_impl_k_sem_give+0x50>
   20cdc:	2200      	movs	r2, #0
   20cde:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   20ce0:	f001 f828 	bl	21d34 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   20ce4:	4629      	mov	r1, r5
   20ce6:	4808      	ldr	r0, [pc, #32]	; (20d08 <z_impl_k_sem_give+0x68>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   20ce8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   20cec:	f000 bdf2 	b.w	218d4 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   20cf0:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   20cf4:	429a      	cmp	r2, r3
   20cf6:	bf18      	it	ne
   20cf8:	3301      	addne	r3, #1
   20cfa:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   20cfc:	2102      	movs	r1, #2
   20cfe:	f104 0010 	add.w	r0, r4, #16
   20d02:	f006 fe7d 	bl	27a00 <z_handle_obj_poll_events>
}
   20d06:	e7ed      	b.n	20ce4 <z_impl_k_sem_give+0x44>
   20d08:	200022b0 	.word	0x200022b0
   20d0c:	00028a23 	.word	0x00028a23
   20d10:	000289af 	.word	0x000289af

00020d14 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   20d14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20d16:	4604      	mov	r4, r0
   20d18:	4616      	mov	r6, r2
   20d1a:	461d      	mov	r5, r3
   20d1c:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   20d20:	b15b      	cbz	r3, 20d3a <z_impl_k_sem_take+0x26>
   20d22:	ea52 0305 	orrs.w	r3, r2, r5
   20d26:	d008      	beq.n	20d3a <z_impl_k_sem_take+0x26>
   20d28:	492b      	ldr	r1, [pc, #172]	; (20dd8 <z_impl_k_sem_take+0xc4>)
   20d2a:	482c      	ldr	r0, [pc, #176]	; (20ddc <z_impl_k_sem_take+0xc8>)
   20d2c:	2279      	movs	r2, #121	; 0x79
   20d2e:	f003 fb2e 	bl	2438e <assert_print>
   20d32:	4829      	ldr	r0, [pc, #164]	; (20dd8 <z_impl_k_sem_take+0xc4>)
   20d34:	2179      	movs	r1, #121	; 0x79
   20d36:	f003 fb23 	bl	24380 <assert_post_action>
   20d3a:	f04f 0340 	mov.w	r3, #64	; 0x40
   20d3e:	f3ef 8711 	mrs	r7, BASEPRI
   20d42:	f383 8812 	msr	BASEPRI_MAX, r3
   20d46:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20d4a:	4825      	ldr	r0, [pc, #148]	; (20de0 <z_impl_k_sem_take+0xcc>)
   20d4c:	f7ff fcb4 	bl	206b8 <z_spin_lock_valid>
   20d50:	b940      	cbnz	r0, 20d64 <z_impl_k_sem_take+0x50>
   20d52:	4924      	ldr	r1, [pc, #144]	; (20de4 <z_impl_k_sem_take+0xd0>)
   20d54:	4821      	ldr	r0, [pc, #132]	; (20ddc <z_impl_k_sem_take+0xc8>)
   20d56:	228e      	movs	r2, #142	; 0x8e
   20d58:	f003 fb19 	bl	2438e <assert_print>
   20d5c:	4821      	ldr	r0, [pc, #132]	; (20de4 <z_impl_k_sem_take+0xd0>)
   20d5e:	218e      	movs	r1, #142	; 0x8e
   20d60:	f003 fb0e 	bl	24380 <assert_post_action>
	z_spin_lock_set_owner(l);
   20d64:	481e      	ldr	r0, [pc, #120]	; (20de0 <z_impl_k_sem_take+0xcc>)
   20d66:	f7ff fcc5 	bl	206f4 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   20d6a:	68a3      	ldr	r3, [r4, #8]
   20d6c:	b1ab      	cbz	r3, 20d9a <z_impl_k_sem_take+0x86>
		sem->count--;
   20d6e:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20d70:	481b      	ldr	r0, [pc, #108]	; (20de0 <z_impl_k_sem_take+0xcc>)
   20d72:	60a3      	str	r3, [r4, #8]
   20d74:	f7ff fcae 	bl	206d4 <z_spin_unlock_valid>
   20d78:	b940      	cbnz	r0, 20d8c <z_impl_k_sem_take+0x78>
   20d7a:	491a      	ldr	r1, [pc, #104]	; (20de4 <z_impl_k_sem_take+0xd0>)
   20d7c:	4817      	ldr	r0, [pc, #92]	; (20ddc <z_impl_k_sem_take+0xc8>)
   20d7e:	22b9      	movs	r2, #185	; 0xb9
   20d80:	f003 fb05 	bl	2438e <assert_print>
   20d84:	4817      	ldr	r0, [pc, #92]	; (20de4 <z_impl_k_sem_take+0xd0>)
   20d86:	21b9      	movs	r1, #185	; 0xb9
   20d88:	f003 fafa 	bl	24380 <assert_post_action>
	__asm__ volatile(
   20d8c:	f387 8811 	msr	BASEPRI, r7
   20d90:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   20d94:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   20d96:	b003      	add	sp, #12
   20d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   20d9a:	ea56 0305 	orrs.w	r3, r6, r5
   20d9e:	d113      	bne.n	20dc8 <z_impl_k_sem_take+0xb4>
   20da0:	480f      	ldr	r0, [pc, #60]	; (20de0 <z_impl_k_sem_take+0xcc>)
   20da2:	f7ff fc97 	bl	206d4 <z_spin_unlock_valid>
   20da6:	b940      	cbnz	r0, 20dba <z_impl_k_sem_take+0xa6>
   20da8:	490e      	ldr	r1, [pc, #56]	; (20de4 <z_impl_k_sem_take+0xd0>)
   20daa:	480c      	ldr	r0, [pc, #48]	; (20ddc <z_impl_k_sem_take+0xc8>)
   20dac:	22b9      	movs	r2, #185	; 0xb9
   20dae:	f003 faee 	bl	2438e <assert_print>
   20db2:	480c      	ldr	r0, [pc, #48]	; (20de4 <z_impl_k_sem_take+0xd0>)
   20db4:	21b9      	movs	r1, #185	; 0xb9
   20db6:	f003 fae3 	bl	24380 <assert_post_action>
   20dba:	f387 8811 	msr	BASEPRI, r7
   20dbe:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   20dc2:	f06f 000f 	mvn.w	r0, #15
   20dc6:	e7e6      	b.n	20d96 <z_impl_k_sem_take+0x82>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   20dc8:	e9cd 6500 	strd	r6, r5, [sp]
   20dcc:	4622      	mov	r2, r4
   20dce:	4639      	mov	r1, r7
   20dd0:	4803      	ldr	r0, [pc, #12]	; (20de0 <z_impl_k_sem_take+0xcc>)
   20dd2:	f001 f913 	bl	21ffc <z_pend_curr>
	return ret;
   20dd6:	e7de      	b.n	20d96 <z_impl_k_sem_take+0x82>
   20dd8:	0002b686 	.word	0x0002b686
   20ddc:	000289af 	.word	0x000289af
   20de0:	200022b0 	.word	0x200022b0
   20de4:	00028a23 	.word	0x00028a23

00020de8 <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
   20de8:	b570      	push	{r4, r5, r6, lr}
   20dea:	4604      	mov	r4, r0
	__asm__ volatile(
   20dec:	f04f 0340 	mov.w	r3, #64	; 0x40
   20df0:	f3ef 8511 	mrs	r5, BASEPRI
   20df4:	f383 8812 	msr	BASEPRI_MAX, r3
   20df8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20dfc:	4812      	ldr	r0, [pc, #72]	; (20e48 <z_impl_k_sem_reset+0x60>)
   20dfe:	f7ff fc5b 	bl	206b8 <z_spin_lock_valid>
   20e02:	b940      	cbnz	r0, 20e16 <z_impl_k_sem_reset+0x2e>
   20e04:	4911      	ldr	r1, [pc, #68]	; (20e4c <z_impl_k_sem_reset+0x64>)
   20e06:	4812      	ldr	r0, [pc, #72]	; (20e50 <z_impl_k_sem_reset+0x68>)
   20e08:	228e      	movs	r2, #142	; 0x8e
   20e0a:	f003 fac0 	bl	2438e <assert_print>
   20e0e:	480f      	ldr	r0, [pc, #60]	; (20e4c <z_impl_k_sem_reset+0x64>)
   20e10:	218e      	movs	r1, #142	; 0x8e
   20e12:	f003 fab5 	bl	24380 <assert_post_action>
	z_spin_lock_set_owner(l);
   20e16:	480c      	ldr	r0, [pc, #48]	; (20e48 <z_impl_k_sem_reset+0x60>)
   20e18:	f7ff fc6c 	bl	206f4 <z_spin_lock_set_owner>
   20e1c:	f06f 060a 	mvn.w	r6, #10
	struct k_thread *thread;
	k_spinlock_key_t key = k_spin_lock(&lock);

	while (true) {
		thread = z_unpend_first_thread(&sem->wait_q);
   20e20:	4620      	mov	r0, r4
   20e22:	f001 fa81 	bl	22328 <z_unpend_first_thread>
		if (thread == NULL) {
   20e26:	b118      	cbz	r0, 20e30 <z_impl_k_sem_reset+0x48>
   20e28:	67c6      	str	r6, [r0, #124]	; 0x7c
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
   20e2a:	f000 ff83 	bl	21d34 <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
   20e2e:	e7f7      	b.n	20e20 <z_impl_k_sem_reset+0x38>
	}
	sem->count = 0;
   20e30:	60a0      	str	r0, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   20e32:	2102      	movs	r1, #2
   20e34:	f104 0010 	add.w	r0, r4, #16
   20e38:	f006 fde2 	bl	27a00 <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
   20e3c:	4629      	mov	r1, r5
   20e3e:	4802      	ldr	r0, [pc, #8]	; (20e48 <z_impl_k_sem_reset+0x60>)
}
   20e40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   20e44:	f000 bd46 	b.w	218d4 <z_reschedule>
   20e48:	200022b0 	.word	0x200022b0
   20e4c:	00028a23 	.word	0x00028a23
   20e50:	000289af 	.word	0x000289af

00020e54 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   20e54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   20e56:	4b09      	ldr	r3, [pc, #36]	; (20e7c <k_sys_work_q_init+0x28>)
   20e58:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   20e5a:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   20e5c:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   20e5e:	9300      	str	r3, [sp, #0]
   20e60:	4907      	ldr	r1, [pc, #28]	; (20e80 <k_sys_work_q_init+0x2c>)
   20e62:	4808      	ldr	r0, [pc, #32]	; (20e84 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   20e64:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   20e68:	f04f 33ff 	mov.w	r3, #4294967295
   20e6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   20e70:	f000 fa6a 	bl	21348 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   20e74:	4620      	mov	r0, r4
   20e76:	b004      	add	sp, #16
   20e78:	bd10      	pop	{r4, pc}
   20e7a:	bf00      	nop
   20e7c:	0002b6a6 	.word	0x0002b6a6
   20e80:	200052e0 	.word	0x200052e0
   20e84:	20001d18 	.word	0x20001d18

00020e88 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   20e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20e8c:	4e70      	ldr	r6, [pc, #448]	; (21050 <work_queue_main+0x1c8>)
	return list->head;
   20e8e:	4f71      	ldr	r7, [pc, #452]	; (21054 <work_queue_main+0x1cc>)
   20e90:	b085      	sub	sp, #20
   20e92:	4604      	mov	r4, r0
   20e94:	f04f 0340 	mov.w	r3, #64	; 0x40
   20e98:	f3ef 8811 	mrs	r8, BASEPRI
   20e9c:	f383 8812 	msr	BASEPRI_MAX, r3
   20ea0:	f3bf 8f6f 	isb	sy
   20ea4:	4630      	mov	r0, r6
   20ea6:	f7ff fc07 	bl	206b8 <z_spin_lock_valid>
   20eaa:	b940      	cbnz	r0, 20ebe <work_queue_main+0x36>
   20eac:	496a      	ldr	r1, [pc, #424]	; (21058 <work_queue_main+0x1d0>)
   20eae:	486b      	ldr	r0, [pc, #428]	; (2105c <work_queue_main+0x1d4>)
   20eb0:	228e      	movs	r2, #142	; 0x8e
   20eb2:	f003 fa6c 	bl	2438e <assert_print>
   20eb6:	4868      	ldr	r0, [pc, #416]	; (21058 <work_queue_main+0x1d0>)
   20eb8:	218e      	movs	r1, #142	; 0x8e
   20eba:	f003 fa61 	bl	24380 <assert_post_action>
	z_spin_lock_set_owner(l);
   20ebe:	4630      	mov	r0, r6
   20ec0:	f7ff fc18 	bl	206f4 <z_spin_lock_set_owner>
   20ec4:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
   20ec8:	b9b5      	cbnz	r5, 20ef8 <work_queue_main+0x70>
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   20eca:	2102      	movs	r1, #2
   20ecc:	f104 0098 	add.w	r0, r4, #152	; 0x98
   20ed0:	f006 fc33 	bl	2773a <flag_test_and_clear>
   20ed4:	2800      	cmp	r0, #0
   20ed6:	f040 8084 	bne.w	20fe2 <work_queue_main+0x15a>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   20eda:	2300      	movs	r3, #0
   20edc:	9302      	str	r3, [sp, #8]
   20ede:	f04f 32ff 	mov.w	r2, #4294967295
   20ee2:	f04f 33ff 	mov.w	r3, #4294967295
   20ee6:	e9cd 2300 	strd	r2, r3, [sp]
   20eea:	4641      	mov	r1, r8
   20eec:	f104 0288 	add.w	r2, r4, #136	; 0x88
   20ef0:	4630      	mov	r0, r6
   20ef2:	f001 fc81 	bl	227f8 <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
   20ef6:	e7cd      	b.n	20e94 <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   20ef8:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   20efc:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   20efe:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   20f02:	4295      	cmp	r5, r2
   20f04:	d101      	bne.n	20f0a <work_queue_main+0x82>
	list->tail = node;
   20f06:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   20f0a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
			handler = work->handler;
   20f0e:	f8d5 9004 	ldr.w	r9, [r5, #4]
	*flagp |= BIT(bit);
   20f12:	f043 0302 	orr.w	r3, r3, #2
   20f16:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   20f1a:	68eb      	ldr	r3, [r5, #12]
   20f1c:	f023 0304 	bic.w	r3, r3, #4
   20f20:	f043 0301 	orr.w	r3, r3, #1
   20f24:	60eb      	str	r3, [r5, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20f26:	4630      	mov	r0, r6
   20f28:	f7ff fbd4 	bl	206d4 <z_spin_unlock_valid>
   20f2c:	b940      	cbnz	r0, 20f40 <work_queue_main+0xb8>
   20f2e:	494a      	ldr	r1, [pc, #296]	; (21058 <work_queue_main+0x1d0>)
   20f30:	484a      	ldr	r0, [pc, #296]	; (2105c <work_queue_main+0x1d4>)
   20f32:	22b9      	movs	r2, #185	; 0xb9
   20f34:	f003 fa2b 	bl	2438e <assert_print>
   20f38:	4847      	ldr	r0, [pc, #284]	; (21058 <work_queue_main+0x1d0>)
   20f3a:	21b9      	movs	r1, #185	; 0xb9
   20f3c:	f003 fa20 	bl	24380 <assert_post_action>
	__asm__ volatile(
   20f40:	f388 8811 	msr	BASEPRI, r8
   20f44:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
   20f48:	f1b9 0f00 	cmp.w	r9, #0
   20f4c:	d10a      	bne.n	20f64 <work_queue_main+0xdc>
   20f4e:	4944      	ldr	r1, [pc, #272]	; (21060 <work_queue_main+0x1d8>)
   20f50:	4842      	ldr	r0, [pc, #264]	; (2105c <work_queue_main+0x1d4>)
   20f52:	f44f 7222 	mov.w	r2, #648	; 0x288
   20f56:	f003 fa1a 	bl	2438e <assert_print>
   20f5a:	4841      	ldr	r0, [pc, #260]	; (21060 <work_queue_main+0x1d8>)
   20f5c:	f44f 7122 	mov.w	r1, #648	; 0x288
   20f60:	f003 fa0e 	bl	24380 <assert_post_action>
		handler(work);
   20f64:	4628      	mov	r0, r5
   20f66:	47c8      	blx	r9
	__asm__ volatile(
   20f68:	f04f 0340 	mov.w	r3, #64	; 0x40
   20f6c:	f3ef 8a11 	mrs	sl, BASEPRI
   20f70:	f383 8812 	msr	BASEPRI_MAX, r3
   20f74:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20f78:	4630      	mov	r0, r6
   20f7a:	f7ff fb9d 	bl	206b8 <z_spin_lock_valid>
   20f7e:	b940      	cbnz	r0, 20f92 <work_queue_main+0x10a>
   20f80:	4935      	ldr	r1, [pc, #212]	; (21058 <work_queue_main+0x1d0>)
   20f82:	4836      	ldr	r0, [pc, #216]	; (2105c <work_queue_main+0x1d4>)
   20f84:	228e      	movs	r2, #142	; 0x8e
   20f86:	f003 fa02 	bl	2438e <assert_print>
   20f8a:	4833      	ldr	r0, [pc, #204]	; (21058 <work_queue_main+0x1d0>)
   20f8c:	218e      	movs	r1, #142	; 0x8e
   20f8e:	f003 f9f7 	bl	24380 <assert_post_action>
	z_spin_lock_set_owner(l);
   20f92:	4630      	mov	r0, r6
   20f94:	f7ff fbae 	bl	206f4 <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
   20f98:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   20f9a:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   20f9c:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   20fa0:	d429      	bmi.n	20ff6 <work_queue_main+0x16e>
	*flagp &= ~BIT(bit);
   20fa2:	60ea      	str	r2, [r5, #12]
   20fa4:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   20fa8:	f023 0302 	bic.w	r3, r3, #2
   20fac:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20fb0:	4630      	mov	r0, r6
	return (*flagp & BIT(bit)) != 0U;
   20fb2:	f3c3 2500 	ubfx	r5, r3, #8, #1
   20fb6:	f7ff fb8d 	bl	206d4 <z_spin_unlock_valid>
   20fba:	b940      	cbnz	r0, 20fce <work_queue_main+0x146>
   20fbc:	4926      	ldr	r1, [pc, #152]	; (21058 <work_queue_main+0x1d0>)
   20fbe:	4827      	ldr	r0, [pc, #156]	; (2105c <work_queue_main+0x1d4>)
   20fc0:	22b9      	movs	r2, #185	; 0xb9
   20fc2:	f003 f9e4 	bl	2438e <assert_print>
   20fc6:	4824      	ldr	r0, [pc, #144]	; (21058 <work_queue_main+0x1d0>)
   20fc8:	21b9      	movs	r1, #185	; 0xb9
   20fca:	f003 f9d9 	bl	24380 <assert_post_action>
	__asm__ volatile(
   20fce:	f38a 8811 	msr	BASEPRI, sl
   20fd2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   20fd6:	2d00      	cmp	r5, #0
   20fd8:	f47f af5c 	bne.w	20e94 <work_queue_main+0xc>
	z_impl_k_yield();
   20fdc:	f001 f9ee 	bl	223bc <z_impl_k_yield>
}
   20fe0:	e758      	b.n	20e94 <work_queue_main+0xc>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   20fe2:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   20fe6:	2200      	movs	r2, #0
   20fe8:	2101      	movs	r1, #1
   20fea:	4628      	mov	r0, r5
   20fec:	f001 fbbe 	bl	2276c <z_sched_wake>
   20ff0:	2800      	cmp	r0, #0
   20ff2:	d1f8      	bne.n	20fe6 <work_queue_main+0x15e>
   20ff4:	e771      	b.n	20eda <work_queue_main+0x52>
	return list->head;
   20ff6:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
   20ff8:	f023 0303 	bic.w	r3, r3, #3
   20ffc:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   20ffe:	2800      	cmp	r0, #0
   21000:	d0d0      	beq.n	20fa4 <work_queue_main+0x11c>
	return node->next;
   21002:	f04f 0800 	mov.w	r8, #0
   21006:	f8d0 9000 	ldr.w	r9, [r0]
	parent->next = child;
   2100a:	46c3      	mov	fp, r8
		if (wc->work == work) {
   2100c:	6843      	ldr	r3, [r0, #4]
   2100e:	429d      	cmp	r5, r3
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   21010:	4602      	mov	r2, r0
		if (wc->work == work) {
   21012:	d10d      	bne.n	21030 <work_queue_main+0x1a8>
	return node->next;
   21014:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   21016:	f1b8 0f00 	cmp.w	r8, #0
   2101a:	d111      	bne.n	21040 <work_queue_main+0x1b8>
   2101c:	687b      	ldr	r3, [r7, #4]
	list->head = node;
   2101e:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   21020:	4283      	cmp	r3, r0
   21022:	d100      	bne.n	21026 <work_queue_main+0x19e>
	list->tail = node;
   21024:	607a      	str	r2, [r7, #4]
	parent->next = child;
   21026:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
   2102a:	f7ff fe39 	bl	20ca0 <z_impl_k_sem_give>
}
   2102e:	4642      	mov	r2, r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   21030:	f1b9 0f00 	cmp.w	r9, #0
   21034:	d0b6      	beq.n	20fa4 <work_queue_main+0x11c>
	return node->next;
   21036:	4648      	mov	r0, r9
   21038:	4690      	mov	r8, r2
   2103a:	f8d9 9000 	ldr.w	r9, [r9]
   2103e:	e7e5      	b.n	2100c <work_queue_main+0x184>
	return list->tail;
   21040:	687b      	ldr	r3, [r7, #4]
	parent->next = child;
   21042:	f8c8 2000 	str.w	r2, [r8]
Z_GENLIST_REMOVE(slist, snode)
   21046:	4298      	cmp	r0, r3
	list->tail = node;
   21048:	bf08      	it	eq
   2104a:	f8c7 8004 	streq.w	r8, [r7, #4]
}
   2104e:	e7ea      	b.n	21026 <work_queue_main+0x19e>
   21050:	200022b4 	.word	0x200022b4
   21054:	200022b8 	.word	0x200022b8
   21058:	00028a23 	.word	0x00028a23
   2105c:	000289af 	.word	0x000289af
   21060:	0002b6af 	.word	0x0002b6af

00021064 <cancel_sync_locked>:
	return (*flagp & BIT(bit)) != 0U;
   21064:	68c3      	ldr	r3, [r0, #12]
{
   21066:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   21068:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   2106c:	079b      	lsls	r3, r3, #30
{
   2106e:	4605      	mov	r5, r0
   21070:	460c      	mov	r4, r1
	if (ret) {
   21072:	d50d      	bpl.n	21090 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   21074:	2201      	movs	r2, #1
   21076:	2100      	movs	r1, #0
   21078:	f104 0008 	add.w	r0, r4, #8
   2107c:	f006 fb4d 	bl	2771a <z_impl_k_sem_init>
	parent->next = child;
   21080:	2300      	movs	r3, #0
   21082:	6023      	str	r3, [r4, #0]
	return list->tail;
   21084:	4b05      	ldr	r3, [pc, #20]	; (2109c <cancel_sync_locked+0x38>)
	canceler->work = work;
   21086:	6065      	str	r5, [r4, #4]
   21088:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   2108a:	b91a      	cbnz	r2, 21094 <cancel_sync_locked+0x30>
	list->head = node;
   2108c:	e9c3 4400 	strd	r4, r4, [r3]
}
   21090:	4630      	mov	r0, r6
   21092:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   21094:	6014      	str	r4, [r2, #0]
	list->tail = node;
   21096:	605c      	str	r4, [r3, #4]
}
   21098:	e7fa      	b.n	21090 <cancel_sync_locked+0x2c>
   2109a:	bf00      	nop
   2109c:	200022b8 	.word	0x200022b8

000210a0 <submit_to_queue_locked>:
{
   210a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   210a2:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   210a4:	079a      	lsls	r2, r3, #30
{
   210a6:	4604      	mov	r4, r0
   210a8:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   210aa:	f3c3 0540 	ubfx	r5, r3, #1, #1
   210ae:	d42a      	bmi.n	21106 <submit_to_queue_locked+0x66>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   210b0:	075f      	lsls	r7, r3, #29
   210b2:	d42a      	bmi.n	2110a <submit_to_queue_locked+0x6a>
		if (*queuep == NULL) {
   210b4:	680a      	ldr	r2, [r1, #0]
   210b6:	b90a      	cbnz	r2, 210bc <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   210b8:	6882      	ldr	r2, [r0, #8]
   210ba:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   210bc:	07d8      	lsls	r0, r3, #31
   210be:	d527      	bpl.n	21110 <submit_to_queue_locked+0x70>
			__ASSERT_NO_MSG(work->queue != NULL);
   210c0:	68a3      	ldr	r3, [r4, #8]
   210c2:	b953      	cbnz	r3, 210da <submit_to_queue_locked+0x3a>
   210c4:	4923      	ldr	r1, [pc, #140]	; (21154 <submit_to_queue_locked+0xb4>)
   210c6:	4824      	ldr	r0, [pc, #144]	; (21158 <submit_to_queue_locked+0xb8>)
   210c8:	f44f 72a7 	mov.w	r2, #334	; 0x14e
   210cc:	f003 f95f 	bl	2438e <assert_print>
   210d0:	4820      	ldr	r0, [pc, #128]	; (21154 <submit_to_queue_locked+0xb4>)
   210d2:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   210d6:	f003 f953 	bl	24380 <assert_post_action>
			*queuep = work->queue;
   210da:	68a3      	ldr	r3, [r4, #8]
   210dc:	6033      	str	r3, [r6, #0]
			ret = 2;
   210de:	2502      	movs	r5, #2
		int rc = queue_submit_locked(*queuep, work);
   210e0:	6837      	ldr	r7, [r6, #0]
	if (queue == NULL) {
   210e2:	b38f      	cbz	r7, 21148 <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   210e4:	4b1d      	ldr	r3, [pc, #116]	; (2115c <submit_to_queue_locked+0xbc>)
   210e6:	689b      	ldr	r3, [r3, #8]
   210e8:	42bb      	cmp	r3, r7
   210ea:	d113      	bne.n	21114 <submit_to_queue_locked+0x74>
   210ec:	f006 fac4 	bl	27678 <k_is_in_isr>
   210f0:	f080 0001 	eor.w	r0, r0, #1
   210f4:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
   210f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   210fa:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   210fc:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   21100:	d525      	bpl.n	2114e <submit_to_queue_locked+0xae>
	} else if (draining && !chained) {
   21102:	b14a      	cbz	r2, 21118 <submit_to_queue_locked+0x78>
   21104:	b950      	cbnz	r0, 2111c <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
   21106:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   2110a:	2300      	movs	r3, #0
   2110c:	6033      	str	r3, [r6, #0]
	return ret;
   2110e:	e015      	b.n	2113c <submit_to_queue_locked+0x9c>
		ret = 1;
   21110:	2501      	movs	r5, #1
   21112:	e7e5      	b.n	210e0 <submit_to_queue_locked+0x40>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   21114:	2000      	movs	r0, #0
   21116:	e7ee      	b.n	210f6 <submit_to_queue_locked+0x56>
	} else if (plugged && !draining) {
   21118:	071b      	lsls	r3, r3, #28
   2111a:	d4f4      	bmi.n	21106 <submit_to_queue_locked+0x66>
	parent->next = child;
   2111c:	2300      	movs	r3, #0
   2111e:	6023      	str	r3, [r4, #0]
	return list->tail;
   21120:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   21124:	b963      	cbnz	r3, 21140 <submit_to_queue_locked+0xa0>
	list->head = node;
   21126:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
   2112a:	4638      	mov	r0, r7
   2112c:	f006 fb1e 	bl	2776c <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   21130:	68e3      	ldr	r3, [r4, #12]
   21132:	f043 0304 	orr.w	r3, r3, #4
   21136:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   21138:	6833      	ldr	r3, [r6, #0]
   2113a:	60a3      	str	r3, [r4, #8]
}
   2113c:	4628      	mov	r0, r5
   2113e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   21140:	601c      	str	r4, [r3, #0]
	list->tail = node;
   21142:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
   21146:	e7f0      	b.n	2112a <submit_to_queue_locked+0x8a>
		return -EINVAL;
   21148:	f06f 0515 	mvn.w	r5, #21
   2114c:	e7dd      	b.n	2110a <submit_to_queue_locked+0x6a>
		ret = -ENODEV;
   2114e:	f06f 0512 	mvn.w	r5, #18
   21152:	e7da      	b.n	2110a <submit_to_queue_locked+0x6a>
   21154:	0002b6af 	.word	0x0002b6af
   21158:	000289af 	.word	0x000289af
   2115c:	20002284 	.word	0x20002284

00021160 <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
   21160:	b573      	push	{r0, r1, r4, r5, r6, lr}
   21162:	4604      	mov	r4, r0
	__asm__ volatile(
   21164:	f04f 0340 	mov.w	r3, #64	; 0x40
   21168:	f3ef 8511 	mrs	r5, BASEPRI
   2116c:	f383 8812 	msr	BASEPRI_MAX, r3
   21170:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21174:	4818      	ldr	r0, [pc, #96]	; (211d8 <work_timeout+0x78>)
   21176:	f7ff fa9f 	bl	206b8 <z_spin_lock_valid>
   2117a:	b940      	cbnz	r0, 2118e <work_timeout+0x2e>
   2117c:	4917      	ldr	r1, [pc, #92]	; (211dc <work_timeout+0x7c>)
   2117e:	4818      	ldr	r0, [pc, #96]	; (211e0 <work_timeout+0x80>)
   21180:	228e      	movs	r2, #142	; 0x8e
   21182:	f003 f904 	bl	2438e <assert_print>
   21186:	4815      	ldr	r0, [pc, #84]	; (211dc <work_timeout+0x7c>)
   21188:	218e      	movs	r1, #142	; 0x8e
   2118a:	f003 f8f9 	bl	24380 <assert_post_action>
	z_spin_lock_set_owner(l);
   2118e:	4812      	ldr	r0, [pc, #72]	; (211d8 <work_timeout+0x78>)
   21190:	f7ff fab0 	bl	206f4 <z_spin_lock_set_owner>
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
   21194:	2300      	movs	r3, #0
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   21196:	2103      	movs	r1, #3
   21198:	1f20      	subs	r0, r4, #4
	struct k_work_q *queue = NULL;
   2119a:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   2119c:	f1a4 0610 	sub.w	r6, r4, #16
   211a0:	f006 facb 	bl	2773a <flag_test_and_clear>
   211a4:	b128      	cbz	r0, 211b2 <work_timeout+0x52>
		queue = dw->queue;
   211a6:	69a3      	ldr	r3, [r4, #24]
   211a8:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   211aa:	a901      	add	r1, sp, #4
   211ac:	4630      	mov	r0, r6
   211ae:	f7ff ff77 	bl	210a0 <submit_to_queue_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   211b2:	4809      	ldr	r0, [pc, #36]	; (211d8 <work_timeout+0x78>)
   211b4:	f7ff fa8e 	bl	206d4 <z_spin_unlock_valid>
   211b8:	b940      	cbnz	r0, 211cc <work_timeout+0x6c>
   211ba:	4908      	ldr	r1, [pc, #32]	; (211dc <work_timeout+0x7c>)
   211bc:	4808      	ldr	r0, [pc, #32]	; (211e0 <work_timeout+0x80>)
   211be:	22b9      	movs	r2, #185	; 0xb9
   211c0:	f003 f8e5 	bl	2438e <assert_print>
   211c4:	4805      	ldr	r0, [pc, #20]	; (211dc <work_timeout+0x7c>)
   211c6:	21b9      	movs	r1, #185	; 0xb9
   211c8:	f003 f8da 	bl	24380 <assert_post_action>
	__asm__ volatile(
   211cc:	f385 8811 	msr	BASEPRI, r5
   211d0:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
}
   211d4:	b002      	add	sp, #8
   211d6:	bd70      	pop	{r4, r5, r6, pc}
   211d8:	200022b4 	.word	0x200022b4
   211dc:	00028a23 	.word	0x00028a23
   211e0:	000289af 	.word	0x000289af

000211e4 <k_work_init>:
{
   211e4:	b538      	push	{r3, r4, r5, lr}
   211e6:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(work != NULL);
   211e8:	4604      	mov	r4, r0
   211ea:	b940      	cbnz	r0, 211fe <k_work_init+0x1a>
   211ec:	490c      	ldr	r1, [pc, #48]	; (21220 <k_work_init+0x3c>)
   211ee:	480d      	ldr	r0, [pc, #52]	; (21224 <k_work_init+0x40>)
   211f0:	2289      	movs	r2, #137	; 0x89
   211f2:	f003 f8cc 	bl	2438e <assert_print>
   211f6:	480a      	ldr	r0, [pc, #40]	; (21220 <k_work_init+0x3c>)
   211f8:	2189      	movs	r1, #137	; 0x89
   211fa:	f003 f8c1 	bl	24380 <assert_post_action>
	__ASSERT_NO_MSG(handler != NULL);
   211fe:	b945      	cbnz	r5, 21212 <k_work_init+0x2e>
   21200:	4907      	ldr	r1, [pc, #28]	; (21220 <k_work_init+0x3c>)
   21202:	4808      	ldr	r0, [pc, #32]	; (21224 <k_work_init+0x40>)
   21204:	228a      	movs	r2, #138	; 0x8a
   21206:	f003 f8c2 	bl	2438e <assert_print>
   2120a:	4805      	ldr	r0, [pc, #20]	; (21220 <k_work_init+0x3c>)
   2120c:	218a      	movs	r1, #138	; 0x8a
   2120e:	f003 f8b7 	bl	24380 <assert_post_action>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   21212:	2210      	movs	r2, #16
   21214:	2100      	movs	r1, #0
   21216:	4620      	mov	r0, r4
   21218:	f006 fc41 	bl	27a9e <memset>
   2121c:	6065      	str	r5, [r4, #4]
}
   2121e:	bd38      	pop	{r3, r4, r5, pc}
   21220:	0002b6af 	.word	0x0002b6af
   21224:	000289af 	.word	0x000289af

00021228 <k_work_busy_get>:
{
   21228:	b538      	push	{r3, r4, r5, lr}
   2122a:	4604      	mov	r4, r0
	__asm__ volatile(
   2122c:	f04f 0340 	mov.w	r3, #64	; 0x40
   21230:	f3ef 8511 	mrs	r5, BASEPRI
   21234:	f383 8812 	msr	BASEPRI_MAX, r3
   21238:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2123c:	4812      	ldr	r0, [pc, #72]	; (21288 <k_work_busy_get+0x60>)
   2123e:	f7ff fa3b 	bl	206b8 <z_spin_lock_valid>
   21242:	b940      	cbnz	r0, 21256 <k_work_busy_get+0x2e>
   21244:	4911      	ldr	r1, [pc, #68]	; (2128c <k_work_busy_get+0x64>)
   21246:	4812      	ldr	r0, [pc, #72]	; (21290 <k_work_busy_get+0x68>)
   21248:	228e      	movs	r2, #142	; 0x8e
   2124a:	f003 f8a0 	bl	2438e <assert_print>
   2124e:	480f      	ldr	r0, [pc, #60]	; (2128c <k_work_busy_get+0x64>)
   21250:	218e      	movs	r1, #142	; 0x8e
   21252:	f003 f895 	bl	24380 <assert_post_action>
	z_spin_lock_set_owner(l);
   21256:	480c      	ldr	r0, [pc, #48]	; (21288 <k_work_busy_get+0x60>)
   21258:	f7ff fa4c 	bl	206f4 <z_spin_lock_set_owner>
	return flags_get(&work->flags) & K_WORK_MASK;
   2125c:	68e4      	ldr	r4, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2125e:	480a      	ldr	r0, [pc, #40]	; (21288 <k_work_busy_get+0x60>)
   21260:	f004 040f 	and.w	r4, r4, #15
   21264:	f7ff fa36 	bl	206d4 <z_spin_unlock_valid>
   21268:	b940      	cbnz	r0, 2127c <k_work_busy_get+0x54>
   2126a:	4908      	ldr	r1, [pc, #32]	; (2128c <k_work_busy_get+0x64>)
   2126c:	4808      	ldr	r0, [pc, #32]	; (21290 <k_work_busy_get+0x68>)
   2126e:	22b9      	movs	r2, #185	; 0xb9
   21270:	f003 f88d 	bl	2438e <assert_print>
   21274:	4805      	ldr	r0, [pc, #20]	; (2128c <k_work_busy_get+0x64>)
   21276:	21b9      	movs	r1, #185	; 0xb9
   21278:	f003 f882 	bl	24380 <assert_post_action>
	__asm__ volatile(
   2127c:	f385 8811 	msr	BASEPRI, r5
   21280:	f3bf 8f6f 	isb	sy
}
   21284:	4620      	mov	r0, r4
   21286:	bd38      	pop	{r3, r4, r5, pc}
   21288:	200022b4 	.word	0x200022b4
   2128c:	00028a23 	.word	0x00028a23
   21290:	000289af 	.word	0x000289af

00021294 <k_work_submit_to_queue>:
{
   21294:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
   21296:	460c      	mov	r4, r1
{
   21298:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
   2129a:	b951      	cbnz	r1, 212b2 <k_work_submit_to_queue+0x1e>
   2129c:	4923      	ldr	r1, [pc, #140]	; (2132c <k_work_submit_to_queue+0x98>)
   2129e:	4824      	ldr	r0, [pc, #144]	; (21330 <k_work_submit_to_queue+0x9c>)
   212a0:	f240 1269 	movw	r2, #361	; 0x169
   212a4:	f003 f873 	bl	2438e <assert_print>
   212a8:	4820      	ldr	r0, [pc, #128]	; (2132c <k_work_submit_to_queue+0x98>)
   212aa:	f240 1169 	movw	r1, #361	; 0x169
   212ae:	f003 f867 	bl	24380 <assert_post_action>
	__asm__ volatile(
   212b2:	f04f 0340 	mov.w	r3, #64	; 0x40
   212b6:	f3ef 8511 	mrs	r5, BASEPRI
   212ba:	f383 8812 	msr	BASEPRI_MAX, r3
   212be:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   212c2:	481c      	ldr	r0, [pc, #112]	; (21334 <k_work_submit_to_queue+0xa0>)
   212c4:	f7ff f9f8 	bl	206b8 <z_spin_lock_valid>
   212c8:	b940      	cbnz	r0, 212dc <k_work_submit_to_queue+0x48>
   212ca:	491b      	ldr	r1, [pc, #108]	; (21338 <k_work_submit_to_queue+0xa4>)
   212cc:	4818      	ldr	r0, [pc, #96]	; (21330 <k_work_submit_to_queue+0x9c>)
   212ce:	228e      	movs	r2, #142	; 0x8e
   212d0:	f003 f85d 	bl	2438e <assert_print>
   212d4:	4818      	ldr	r0, [pc, #96]	; (21338 <k_work_submit_to_queue+0xa4>)
   212d6:	218e      	movs	r1, #142	; 0x8e
   212d8:	f003 f852 	bl	24380 <assert_post_action>
	z_spin_lock_set_owner(l);
   212dc:	4815      	ldr	r0, [pc, #84]	; (21334 <k_work_submit_to_queue+0xa0>)
   212de:	f7ff fa09 	bl	206f4 <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
   212e2:	4620      	mov	r0, r4
   212e4:	a901      	add	r1, sp, #4
   212e6:	f7ff fedb 	bl	210a0 <submit_to_queue_locked>
   212ea:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   212ec:	4811      	ldr	r0, [pc, #68]	; (21334 <k_work_submit_to_queue+0xa0>)
   212ee:	f7ff f9f1 	bl	206d4 <z_spin_unlock_valid>
   212f2:	b940      	cbnz	r0, 21306 <k_work_submit_to_queue+0x72>
   212f4:	4910      	ldr	r1, [pc, #64]	; (21338 <k_work_submit_to_queue+0xa4>)
   212f6:	480e      	ldr	r0, [pc, #56]	; (21330 <k_work_submit_to_queue+0x9c>)
   212f8:	22b9      	movs	r2, #185	; 0xb9
   212fa:	f003 f848 	bl	2438e <assert_print>
   212fe:	480e      	ldr	r0, [pc, #56]	; (21338 <k_work_submit_to_queue+0xa4>)
   21300:	21b9      	movs	r1, #185	; 0xb9
   21302:	f003 f83d 	bl	24380 <assert_post_action>
	__asm__ volatile(
   21306:	f385 8811 	msr	BASEPRI, r5
   2130a:	f3bf 8f6f 	isb	sy
	if (ret > 0) {
   2130e:	2c00      	cmp	r4, #0
   21310:	dd09      	ble.n	21326 <k_work_submit_to_queue+0x92>
	__asm__ volatile(
   21312:	f04f 0340 	mov.w	r3, #64	; 0x40
   21316:	f3ef 8011 	mrs	r0, BASEPRI
   2131a:	f383 8812 	msr	BASEPRI_MAX, r3
   2131e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   21322:	f006 fa66 	bl	277f2 <z_reschedule_irqlock>
}
   21326:	4620      	mov	r0, r4
   21328:	b003      	add	sp, #12
   2132a:	bd30      	pop	{r4, r5, pc}
   2132c:	0002b6af 	.word	0x0002b6af
   21330:	000289af 	.word	0x000289af
   21334:	200022b4 	.word	0x200022b4
   21338:	00028a23 	.word	0x00028a23

0002133c <k_work_submit>:
{
   2133c:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   2133e:	4801      	ldr	r0, [pc, #4]	; (21344 <k_work_submit+0x8>)
   21340:	f7ff bfa8 	b.w	21294 <k_work_submit_to_queue>
   21344:	20001d18 	.word	0x20001d18

00021348 <k_work_queue_start>:
{
   21348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2134c:	b088      	sub	sp, #32
   2134e:	460e      	mov	r6, r1
   21350:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   21352:	4617      	mov	r7, r2
   21354:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(queue);
   21356:	4604      	mov	r4, r0
   21358:	b950      	cbnz	r0, 21370 <k_work_queue_start+0x28>
   2135a:	492d      	ldr	r1, [pc, #180]	; (21410 <k_work_queue_start+0xc8>)
   2135c:	482d      	ldr	r0, [pc, #180]	; (21414 <k_work_queue_start+0xcc>)
   2135e:	f240 22b5 	movw	r2, #693	; 0x2b5
   21362:	f003 f814 	bl	2438e <assert_print>
   21366:	482a      	ldr	r0, [pc, #168]	; (21410 <k_work_queue_start+0xc8>)
   21368:	f240 21b5 	movw	r1, #693	; 0x2b5
   2136c:	f003 f808 	bl	24380 <assert_post_action>
	__ASSERT_NO_MSG(stack);
   21370:	b956      	cbnz	r6, 21388 <k_work_queue_start+0x40>
   21372:	4927      	ldr	r1, [pc, #156]	; (21410 <k_work_queue_start+0xc8>)
   21374:	4827      	ldr	r0, [pc, #156]	; (21414 <k_work_queue_start+0xcc>)
   21376:	f240 22b6 	movw	r2, #694	; 0x2b6
   2137a:	f003 f808 	bl	2438e <assert_print>
   2137e:	4824      	ldr	r0, [pc, #144]	; (21410 <k_work_queue_start+0xc8>)
   21380:	f240 21b6 	movw	r1, #694	; 0x2b6
   21384:	f002 fffc 	bl	24380 <assert_post_action>
	return (*flagp & BIT(bit)) != 0U;
   21388:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   2138c:	07db      	lsls	r3, r3, #31
   2138e:	d50a      	bpl.n	213a6 <k_work_queue_start+0x5e>
   21390:	491f      	ldr	r1, [pc, #124]	; (21410 <k_work_queue_start+0xc8>)
   21392:	4820      	ldr	r0, [pc, #128]	; (21414 <k_work_queue_start+0xcc>)
   21394:	f240 22b7 	movw	r2, #695	; 0x2b7
   21398:	f002 fff9 	bl	2438e <assert_print>
   2139c:	481c      	ldr	r0, [pc, #112]	; (21410 <k_work_queue_start+0xc8>)
   2139e:	f240 21b7 	movw	r1, #695	; 0x2b7
   213a2:	f002 ffed 	bl	24380 <assert_post_action>
	list->head = NULL;
   213a6:	2300      	movs	r3, #0
	list->tail = NULL;
   213a8:	e9c4 3320 	strd	r3, r3, [r4, #128]	; 0x80
   213ac:	f104 0388 	add.w	r3, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   213b0:	e9c4 3322 	strd	r3, r3, [r4, #136]	; 0x88
   213b4:	f104 0390 	add.w	r3, r4, #144	; 0x90
   213b8:	e9c4 3324 	strd	r3, r3, [r4, #144]	; 0x90
	if ((cfg != NULL) && cfg->no_yield) {
   213bc:	b32d      	cbz	r5, 2140a <k_work_queue_start+0xc2>
   213be:	792b      	ldrb	r3, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   213c0:	2b00      	cmp	r3, #0
   213c2:	f240 1101 	movw	r1, #257	; 0x101
   213c6:	bf08      	it	eq
   213c8:	2101      	moveq	r1, #1
	*flagp = flags;
   213ca:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   213ce:	f04f 32ff 	mov.w	r2, #4294967295
   213d2:	f04f 33ff 	mov.w	r3, #4294967295
   213d6:	e9cd 2306 	strd	r2, r3, [sp, #24]
   213da:	2200      	movs	r2, #0
   213dc:	e9cd 8203 	strd	r8, r2, [sp, #12]
   213e0:	e9cd 2201 	strd	r2, r2, [sp, #4]
   213e4:	4b0c      	ldr	r3, [pc, #48]	; (21418 <k_work_queue_start+0xd0>)
   213e6:	9400      	str	r4, [sp, #0]
   213e8:	463a      	mov	r2, r7
   213ea:	4631      	mov	r1, r6
   213ec:	4620      	mov	r0, r4
   213ee:	f7ff f89f 	bl	20530 <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   213f2:	b125      	cbz	r5, 213fe <k_work_queue_start+0xb6>
   213f4:	6829      	ldr	r1, [r5, #0]
   213f6:	b111      	cbz	r1, 213fe <k_work_queue_start+0xb6>
	return z_impl_k_thread_name_set(thread, str);
   213f8:	4620      	mov	r0, r4
   213fa:	f006 f943 	bl	27684 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   213fe:	4620      	mov	r0, r4
}
   21400:	b008      	add	sp, #32
   21402:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   21406:	f006 b942 	b.w	2768e <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   2140a:	2101      	movs	r1, #1
   2140c:	e7dd      	b.n	213ca <k_work_queue_start+0x82>
   2140e:	bf00      	nop
   21410:	0002b6af 	.word	0x0002b6af
   21414:	000289af 	.word	0x000289af
   21418:	00020e89 	.word	0x00020e89

0002141c <k_work_init_delayable>:

void k_work_init_delayable(struct k_work_delayable *dwork,
			    k_work_handler_t handler)
{
   2141c:	b538      	push	{r3, r4, r5, lr}
   2141e:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(dwork != NULL);
   21420:	4604      	mov	r4, r0
   21422:	b950      	cbnz	r0, 2143a <k_work_init_delayable+0x1e>
   21424:	4910      	ldr	r1, [pc, #64]	; (21468 <k_work_init_delayable+0x4c>)
   21426:	4811      	ldr	r0, [pc, #68]	; (2146c <k_work_init_delayable+0x50>)
   21428:	f240 322d 	movw	r2, #813	; 0x32d
   2142c:	f002 ffaf 	bl	2438e <assert_print>
   21430:	480d      	ldr	r0, [pc, #52]	; (21468 <k_work_init_delayable+0x4c>)
   21432:	f240 312d 	movw	r1, #813	; 0x32d
   21436:	f002 ffa3 	bl	24380 <assert_post_action>
	__ASSERT_NO_MSG(handler != NULL);
   2143a:	b955      	cbnz	r5, 21452 <k_work_init_delayable+0x36>
   2143c:	490a      	ldr	r1, [pc, #40]	; (21468 <k_work_init_delayable+0x4c>)
   2143e:	480b      	ldr	r0, [pc, #44]	; (2146c <k_work_init_delayable+0x50>)
   21440:	f240 322e 	movw	r2, #814	; 0x32e
   21444:	f002 ffa3 	bl	2438e <assert_print>
   21448:	4807      	ldr	r0, [pc, #28]	; (21468 <k_work_init_delayable+0x4c>)
   2144a:	f240 312e 	movw	r1, #814	; 0x32e
   2144e:	f002 ff97 	bl	24380 <assert_post_action>

	*dwork = (struct k_work_delayable){
   21452:	2230      	movs	r2, #48	; 0x30
   21454:	2100      	movs	r1, #0
   21456:	4620      	mov	r0, r4
   21458:	f006 fb21 	bl	27a9e <memset>
   2145c:	f44f 7380 	mov.w	r3, #256	; 0x100
   21460:	6065      	str	r5, [r4, #4]
   21462:	60e3      	str	r3, [r4, #12]
		},
	};
	z_init_timeout(&dwork->timeout);

	SYS_PORT_TRACING_OBJ_INIT(k_work_delayable, dwork);
}
   21464:	bd38      	pop	{r3, r4, r5, pc}
   21466:	bf00      	nop
   21468:	0002b6af 	.word	0x0002b6af
   2146c:	000289af 	.word	0x000289af

00021470 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   21470:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   21472:	4616      	mov	r6, r2
   21474:	9001      	str	r0, [sp, #4]
   21476:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   21478:	460c      	mov	r4, r1
   2147a:	b951      	cbnz	r1, 21492 <k_work_schedule_for_queue+0x22>
   2147c:	4929      	ldr	r1, [pc, #164]	; (21524 <k_work_schedule_for_queue+0xb4>)
   2147e:	482a      	ldr	r0, [pc, #168]	; (21528 <k_work_schedule_for_queue+0xb8>)
   21480:	f44f 7269 	mov.w	r2, #932	; 0x3a4
   21484:	f002 ff83 	bl	2438e <assert_print>
   21488:	4826      	ldr	r0, [pc, #152]	; (21524 <k_work_schedule_for_queue+0xb4>)
   2148a:	f44f 7169 	mov.w	r1, #932	; 0x3a4
   2148e:	f002 ff77 	bl	24380 <assert_post_action>
   21492:	f04f 0340 	mov.w	r3, #64	; 0x40
   21496:	f3ef 8711 	mrs	r7, BASEPRI
   2149a:	f383 8812 	msr	BASEPRI_MAX, r3
   2149e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   214a2:	4822      	ldr	r0, [pc, #136]	; (2152c <k_work_schedule_for_queue+0xbc>)
   214a4:	f7ff f908 	bl	206b8 <z_spin_lock_valid>
   214a8:	b940      	cbnz	r0, 214bc <k_work_schedule_for_queue+0x4c>
   214aa:	4921      	ldr	r1, [pc, #132]	; (21530 <k_work_schedule_for_queue+0xc0>)
   214ac:	481e      	ldr	r0, [pc, #120]	; (21528 <k_work_schedule_for_queue+0xb8>)
   214ae:	228e      	movs	r2, #142	; 0x8e
   214b0:	f002 ff6d 	bl	2438e <assert_print>
   214b4:	481e      	ldr	r0, [pc, #120]	; (21530 <k_work_schedule_for_queue+0xc0>)
   214b6:	218e      	movs	r1, #142	; 0x8e
   214b8:	f002 ff62 	bl	24380 <assert_post_action>
	z_spin_lock_set_owner(l);
   214bc:	481b      	ldr	r0, [pc, #108]	; (2152c <k_work_schedule_for_queue+0xbc>)
   214be:	f7ff f919 	bl	206f4 <z_spin_lock_set_owner>
	return *flagp;
   214c2:	68e3      	ldr	r3, [r4, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   214c4:	f013 0f0e 	tst.w	r3, #14
   214c8:	d129      	bne.n	2151e <k_work_schedule_for_queue+0xae>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   214ca:	ea55 0206 	orrs.w	r2, r5, r6
   214ce:	d118      	bne.n	21502 <k_work_schedule_for_queue+0x92>
		return submit_to_queue_locked(work, queuep);
   214d0:	4620      	mov	r0, r4
   214d2:	a901      	add	r1, sp, #4
   214d4:	f7ff fde4 	bl	210a0 <submit_to_queue_locked>
   214d8:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   214da:	4814      	ldr	r0, [pc, #80]	; (2152c <k_work_schedule_for_queue+0xbc>)
   214dc:	f7ff f8fa 	bl	206d4 <z_spin_unlock_valid>
   214e0:	b940      	cbnz	r0, 214f4 <k_work_schedule_for_queue+0x84>
   214e2:	4913      	ldr	r1, [pc, #76]	; (21530 <k_work_schedule_for_queue+0xc0>)
   214e4:	4810      	ldr	r0, [pc, #64]	; (21528 <k_work_schedule_for_queue+0xb8>)
   214e6:	22b9      	movs	r2, #185	; 0xb9
   214e8:	f002 ff51 	bl	2438e <assert_print>
   214ec:	4810      	ldr	r0, [pc, #64]	; (21530 <k_work_schedule_for_queue+0xc0>)
   214ee:	21b9      	movs	r1, #185	; 0xb9
   214f0:	f002 ff46 	bl	24380 <assert_post_action>
	__asm__ volatile(
   214f4:	f387 8811 	msr	BASEPRI, r7
   214f8:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   214fc:	4620      	mov	r0, r4
   214fe:	b003      	add	sp, #12
   21500:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   21502:	f043 0308 	orr.w	r3, r3, #8
   21506:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   21508:	9b01      	ldr	r3, [sp, #4]
   2150a:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   2150c:	f104 0010 	add.w	r0, r4, #16
   21510:	4908      	ldr	r1, [pc, #32]	; (21534 <k_work_schedule_for_queue+0xc4>)
   21512:	4632      	mov	r2, r6
   21514:	462b      	mov	r3, r5
   21516:	f001 f9e5 	bl	228e4 <z_add_timeout>
	return ret;
   2151a:	2401      	movs	r4, #1
   2151c:	e7dd      	b.n	214da <k_work_schedule_for_queue+0x6a>
	int ret = 0;
   2151e:	2400      	movs	r4, #0
   21520:	e7db      	b.n	214da <k_work_schedule_for_queue+0x6a>
   21522:	bf00      	nop
   21524:	0002b6af 	.word	0x0002b6af
   21528:	000289af 	.word	0x000289af
   2152c:	200022b4 	.word	0x200022b4
   21530:	00028a23 	.word	0x00028a23
   21534:	00021161 	.word	0x00021161

00021538 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   21538:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   2153a:	4801      	ldr	r0, [pc, #4]	; (21540 <k_work_schedule+0x8>)
   2153c:	f7ff bf98 	b.w	21470 <k_work_schedule_for_queue>
   21540:	20001d18 	.word	0x20001d18

00021544 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   21544:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   21546:	4616      	mov	r6, r2
   21548:	9001      	str	r0, [sp, #4]
   2154a:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   2154c:	460c      	mov	r4, r1
   2154e:	b951      	cbnz	r1, 21566 <k_work_reschedule_for_queue+0x22>
   21550:	4928      	ldr	r1, [pc, #160]	; (215f4 <k_work_reschedule_for_queue+0xb0>)
   21552:	4829      	ldr	r0, [pc, #164]	; (215f8 <k_work_reschedule_for_queue+0xb4>)
   21554:	f44f 7272 	mov.w	r2, #968	; 0x3c8
   21558:	f002 ff19 	bl	2438e <assert_print>
   2155c:	4825      	ldr	r0, [pc, #148]	; (215f4 <k_work_reschedule_for_queue+0xb0>)
   2155e:	f44f 7172 	mov.w	r1, #968	; 0x3c8
   21562:	f002 ff0d 	bl	24380 <assert_post_action>
	__asm__ volatile(
   21566:	f04f 0340 	mov.w	r3, #64	; 0x40
   2156a:	f3ef 8711 	mrs	r7, BASEPRI
   2156e:	f383 8812 	msr	BASEPRI_MAX, r3
   21572:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21576:	4821      	ldr	r0, [pc, #132]	; (215fc <k_work_reschedule_for_queue+0xb8>)
   21578:	f7ff f89e 	bl	206b8 <z_spin_lock_valid>
   2157c:	b940      	cbnz	r0, 21590 <k_work_reschedule_for_queue+0x4c>
   2157e:	4920      	ldr	r1, [pc, #128]	; (21600 <k_work_reschedule_for_queue+0xbc>)
   21580:	481d      	ldr	r0, [pc, #116]	; (215f8 <k_work_reschedule_for_queue+0xb4>)
   21582:	228e      	movs	r2, #142	; 0x8e
   21584:	f002 ff03 	bl	2438e <assert_print>
   21588:	481d      	ldr	r0, [pc, #116]	; (21600 <k_work_reschedule_for_queue+0xbc>)
   2158a:	218e      	movs	r1, #142	; 0x8e
   2158c:	f002 fef8 	bl	24380 <assert_post_action>
	z_spin_lock_set_owner(l);
   21590:	481a      	ldr	r0, [pc, #104]	; (215fc <k_work_reschedule_for_queue+0xb8>)
   21592:	f7ff f8af 	bl	206f4 <z_spin_lock_set_owner>

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   21596:	4620      	mov	r0, r4
   21598:	f006 f8da 	bl	27750 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2159c:	ea55 0306 	orrs.w	r3, r5, r6
   215a0:	d118      	bne.n	215d4 <k_work_reschedule_for_queue+0x90>
		return submit_to_queue_locked(work, queuep);
   215a2:	4620      	mov	r0, r4
   215a4:	a901      	add	r1, sp, #4
   215a6:	f7ff fd7b 	bl	210a0 <submit_to_queue_locked>
   215aa:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   215ac:	4813      	ldr	r0, [pc, #76]	; (215fc <k_work_reschedule_for_queue+0xb8>)
   215ae:	f7ff f891 	bl	206d4 <z_spin_unlock_valid>
   215b2:	b940      	cbnz	r0, 215c6 <k_work_reschedule_for_queue+0x82>
   215b4:	4912      	ldr	r1, [pc, #72]	; (21600 <k_work_reschedule_for_queue+0xbc>)
   215b6:	4810      	ldr	r0, [pc, #64]	; (215f8 <k_work_reschedule_for_queue+0xb4>)
   215b8:	22b9      	movs	r2, #185	; 0xb9
   215ba:	f002 fee8 	bl	2438e <assert_print>
   215be:	4810      	ldr	r0, [pc, #64]	; (21600 <k_work_reschedule_for_queue+0xbc>)
   215c0:	21b9      	movs	r1, #185	; 0xb9
   215c2:	f002 fedd 	bl	24380 <assert_post_action>
	__asm__ volatile(
   215c6:	f387 8811 	msr	BASEPRI, r7
   215ca:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   215ce:	4620      	mov	r0, r4
   215d0:	b003      	add	sp, #12
   215d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   215d4:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   215d6:	490b      	ldr	r1, [pc, #44]	; (21604 <k_work_reschedule_for_queue+0xc0>)
	*flagp |= BIT(bit);
   215d8:	f043 0308 	orr.w	r3, r3, #8
   215dc:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   215de:	9b01      	ldr	r3, [sp, #4]
   215e0:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   215e2:	f104 0010 	add.w	r0, r4, #16
   215e6:	4632      	mov	r2, r6
   215e8:	462b      	mov	r3, r5
   215ea:	f001 f97b 	bl	228e4 <z_add_timeout>
	return ret;
   215ee:	2401      	movs	r4, #1
   215f0:	e7dc      	b.n	215ac <k_work_reschedule_for_queue+0x68>
   215f2:	bf00      	nop
   215f4:	0002b6af 	.word	0x0002b6af
   215f8:	000289af 	.word	0x000289af
   215fc:	200022b4 	.word	0x200022b4
   21600:	00028a23 	.word	0x00028a23
   21604:	00021161 	.word	0x00021161

00021608 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   21608:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   2160a:	4801      	ldr	r0, [pc, #4]	; (21610 <k_work_reschedule+0x8>)
   2160c:	f7ff bf9a 	b.w	21544 <k_work_reschedule_for_queue>
   21610:	20001d18 	.word	0x20001d18

00021614 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   21614:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(dwork != NULL);
   21616:	4604      	mov	r4, r0
   21618:	b950      	cbnz	r0, 21630 <k_work_cancel_delayable+0x1c>
   2161a:	491e      	ldr	r1, [pc, #120]	; (21694 <k_work_cancel_delayable+0x80>)
   2161c:	481e      	ldr	r0, [pc, #120]	; (21698 <k_work_cancel_delayable+0x84>)
   2161e:	f240 32ea 	movw	r2, #1002	; 0x3ea
   21622:	f002 feb4 	bl	2438e <assert_print>
   21626:	481b      	ldr	r0, [pc, #108]	; (21694 <k_work_cancel_delayable+0x80>)
   21628:	f240 31ea 	movw	r1, #1002	; 0x3ea
   2162c:	f002 fea8 	bl	24380 <assert_post_action>
	__asm__ volatile(
   21630:	f04f 0340 	mov.w	r3, #64	; 0x40
   21634:	f3ef 8511 	mrs	r5, BASEPRI
   21638:	f383 8812 	msr	BASEPRI_MAX, r3
   2163c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21640:	4816      	ldr	r0, [pc, #88]	; (2169c <k_work_cancel_delayable+0x88>)
   21642:	f7ff f839 	bl	206b8 <z_spin_lock_valid>
   21646:	b940      	cbnz	r0, 2165a <k_work_cancel_delayable+0x46>
   21648:	4915      	ldr	r1, [pc, #84]	; (216a0 <k_work_cancel_delayable+0x8c>)
   2164a:	4813      	ldr	r0, [pc, #76]	; (21698 <k_work_cancel_delayable+0x84>)
   2164c:	228e      	movs	r2, #142	; 0x8e
   2164e:	f002 fe9e 	bl	2438e <assert_print>
   21652:	4813      	ldr	r0, [pc, #76]	; (216a0 <k_work_cancel_delayable+0x8c>)
   21654:	218e      	movs	r1, #142	; 0x8e
   21656:	f002 fe93 	bl	24380 <assert_post_action>
	z_spin_lock_set_owner(l);
   2165a:	4810      	ldr	r0, [pc, #64]	; (2169c <k_work_cancel_delayable+0x88>)
   2165c:	f7ff f84a 	bl	206f4 <z_spin_lock_set_owner>
	(void)unschedule_locked(dwork);
   21660:	4620      	mov	r0, r4
   21662:	f006 f875 	bl	27750 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   21666:	4620      	mov	r0, r4
   21668:	f006 f887 	bl	2777a <cancel_async_locked>
   2166c:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2166e:	480b      	ldr	r0, [pc, #44]	; (2169c <k_work_cancel_delayable+0x88>)
   21670:	f7ff f830 	bl	206d4 <z_spin_unlock_valid>
   21674:	b940      	cbnz	r0, 21688 <k_work_cancel_delayable+0x74>
   21676:	490a      	ldr	r1, [pc, #40]	; (216a0 <k_work_cancel_delayable+0x8c>)
   21678:	4807      	ldr	r0, [pc, #28]	; (21698 <k_work_cancel_delayable+0x84>)
   2167a:	22b9      	movs	r2, #185	; 0xb9
   2167c:	f002 fe87 	bl	2438e <assert_print>
   21680:	4807      	ldr	r0, [pc, #28]	; (216a0 <k_work_cancel_delayable+0x8c>)
   21682:	21b9      	movs	r1, #185	; 0xb9
   21684:	f002 fe7c 	bl	24380 <assert_post_action>
	__asm__ volatile(
   21688:	f385 8811 	msr	BASEPRI, r5
   2168c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   21690:	4620      	mov	r0, r4
   21692:	bd38      	pop	{r3, r4, r5, pc}
   21694:	0002b6af 	.word	0x0002b6af
   21698:	000289af 	.word	0x000289af
   2169c:	200022b4 	.word	0x200022b4
   216a0:	00028a23 	.word	0x00028a23

000216a4 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   216a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   216a8:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(dwork != NULL);
   216aa:	4605      	mov	r5, r0
   216ac:	b950      	cbnz	r0, 216c4 <k_work_cancel_delayable_sync+0x20>
   216ae:	4936      	ldr	r1, [pc, #216]	; (21788 <k_work_cancel_delayable_sync+0xe4>)
   216b0:	4836      	ldr	r0, [pc, #216]	; (2178c <k_work_cancel_delayable_sync+0xe8>)
   216b2:	f240 32fb 	movw	r2, #1019	; 0x3fb
   216b6:	f002 fe6a 	bl	2438e <assert_print>
   216ba:	4833      	ldr	r0, [pc, #204]	; (21788 <k_work_cancel_delayable_sync+0xe4>)
   216bc:	f240 31fb 	movw	r1, #1019	; 0x3fb
   216c0:	f002 fe5e 	bl	24380 <assert_post_action>
	__ASSERT_NO_MSG(sync != NULL);
   216c4:	b956      	cbnz	r6, 216dc <k_work_cancel_delayable_sync+0x38>
   216c6:	4930      	ldr	r1, [pc, #192]	; (21788 <k_work_cancel_delayable_sync+0xe4>)
   216c8:	4830      	ldr	r0, [pc, #192]	; (2178c <k_work_cancel_delayable_sync+0xe8>)
   216ca:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
   216ce:	f002 fe5e 	bl	2438e <assert_print>
   216d2:	482d      	ldr	r0, [pc, #180]	; (21788 <k_work_cancel_delayable_sync+0xe4>)
   216d4:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
   216d8:	f002 fe52 	bl	24380 <assert_post_action>
	__ASSERT_NO_MSG(!k_is_in_isr());
   216dc:	f005 ffcc 	bl	27678 <k_is_in_isr>
   216e0:	b150      	cbz	r0, 216f8 <k_work_cancel_delayable_sync+0x54>
   216e2:	4929      	ldr	r1, [pc, #164]	; (21788 <k_work_cancel_delayable_sync+0xe4>)
   216e4:	4829      	ldr	r0, [pc, #164]	; (2178c <k_work_cancel_delayable_sync+0xe8>)
   216e6:	f240 32fd 	movw	r2, #1021	; 0x3fd
   216ea:	f002 fe50 	bl	2438e <assert_print>
   216ee:	4826      	ldr	r0, [pc, #152]	; (21788 <k_work_cancel_delayable_sync+0xe4>)
   216f0:	f240 31fd 	movw	r1, #1021	; 0x3fd
   216f4:	f002 fe44 	bl	24380 <assert_post_action>
	__asm__ volatile(
   216f8:	f04f 0340 	mov.w	r3, #64	; 0x40
   216fc:	f3ef 8811 	mrs	r8, BASEPRI
   21700:	f383 8812 	msr	BASEPRI_MAX, r3
   21704:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21708:	4821      	ldr	r0, [pc, #132]	; (21790 <k_work_cancel_delayable_sync+0xec>)
   2170a:	f7fe ffd5 	bl	206b8 <z_spin_lock_valid>
   2170e:	b940      	cbnz	r0, 21722 <k_work_cancel_delayable_sync+0x7e>
   21710:	4920      	ldr	r1, [pc, #128]	; (21794 <k_work_cancel_delayable_sync+0xf0>)
   21712:	481e      	ldr	r0, [pc, #120]	; (2178c <k_work_cancel_delayable_sync+0xe8>)
   21714:	228e      	movs	r2, #142	; 0x8e
   21716:	f002 fe3a 	bl	2438e <assert_print>
   2171a:	481e      	ldr	r0, [pc, #120]	; (21794 <k_work_cancel_delayable_sync+0xf0>)
   2171c:	218e      	movs	r1, #142	; 0x8e
   2171e:	f002 fe2f 	bl	24380 <assert_post_action>
	z_spin_lock_set_owner(l);
   21722:	481b      	ldr	r0, [pc, #108]	; (21790 <k_work_cancel_delayable_sync+0xec>)
   21724:	f7fe ffe6 	bl	206f4 <z_spin_lock_set_owner>
	return flags_get(&dwork->work.flags) & K_WORK_MASK;
   21728:	68ec      	ldr	r4, [r5, #12]
   2172a:	f004 040f 	and.w	r4, r4, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   2172e:	2c00      	cmp	r4, #0
   21730:	bf14      	ite	ne
   21732:	2701      	movne	r7, #1
   21734:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   21736:	d00a      	beq.n	2174e <k_work_cancel_delayable_sync+0xaa>
	(void)unschedule_locked(dwork);
   21738:	4628      	mov	r0, r5
   2173a:	f006 f809 	bl	27750 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   2173e:	4628      	mov	r0, r5
   21740:	f006 f81b 	bl	2777a <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   21744:	4631      	mov	r1, r6
   21746:	4628      	mov	r0, r5
   21748:	f7ff fc8c 	bl	21064 <cancel_sync_locked>
   2174c:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2174e:	4810      	ldr	r0, [pc, #64]	; (21790 <k_work_cancel_delayable_sync+0xec>)
   21750:	f7fe ffc0 	bl	206d4 <z_spin_unlock_valid>
   21754:	b940      	cbnz	r0, 21768 <k_work_cancel_delayable_sync+0xc4>
   21756:	490f      	ldr	r1, [pc, #60]	; (21794 <k_work_cancel_delayable_sync+0xf0>)
   21758:	480c      	ldr	r0, [pc, #48]	; (2178c <k_work_cancel_delayable_sync+0xe8>)
   2175a:	22b9      	movs	r2, #185	; 0xb9
   2175c:	f002 fe17 	bl	2438e <assert_print>
   21760:	480c      	ldr	r0, [pc, #48]	; (21794 <k_work_cancel_delayable_sync+0xf0>)
   21762:	21b9      	movs	r1, #185	; 0xb9
   21764:	f002 fe0c 	bl	24380 <assert_post_action>
	__asm__ volatile(
   21768:	f388 8811 	msr	BASEPRI, r8
   2176c:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   21770:	b13c      	cbz	r4, 21782 <k_work_cancel_delayable_sync+0xde>
	return z_impl_k_sem_take(sem, timeout);
   21772:	f04f 32ff 	mov.w	r2, #4294967295
   21776:	f04f 33ff 	mov.w	r3, #4294967295
   2177a:	f106 0008 	add.w	r0, r6, #8
   2177e:	f7ff fac9 	bl	20d14 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   21782:	4638      	mov	r0, r7
   21784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21788:	0002b6af 	.word	0x0002b6af
   2178c:	000289af 	.word	0x000289af
   21790:	200022b4 	.word	0x200022b4
   21794:	00028a23 	.word	0x00028a23

00021798 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   21798:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   2179a:	4d07      	ldr	r5, [pc, #28]	; (217b8 <z_reset_time_slice+0x20>)
   2179c:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   2179e:	b154      	cbz	r4, 217b6 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   217a0:	f7fc fc42 	bl	1e028 <sys_clock_elapsed>
   217a4:	4b05      	ldr	r3, [pc, #20]	; (217bc <z_reset_time_slice+0x24>)
   217a6:	4404      	add	r4, r0
   217a8:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   217aa:	6828      	ldr	r0, [r5, #0]
   217ac:	2100      	movs	r1, #0
	}
}
   217ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   217b2:	f001 b9b7 	b.w	22b24 <z_set_timeout_expiry>
}
   217b6:	bd38      	pop	{r3, r4, r5, pc}
   217b8:	200022cc 	.word	0x200022cc
   217bc:	20002284 	.word	0x20002284

000217c0 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   217c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   217c2:	4604      	mov	r4, r0
   217c4:	460d      	mov	r5, r1
	__asm__ volatile(
   217c6:	f04f 0340 	mov.w	r3, #64	; 0x40
   217ca:	f3ef 8711 	mrs	r7, BASEPRI
   217ce:	f383 8812 	msr	BASEPRI_MAX, r3
   217d2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   217d6:	481e      	ldr	r0, [pc, #120]	; (21850 <k_sched_time_slice_set+0x90>)
   217d8:	f7fe ff6e 	bl	206b8 <z_spin_lock_valid>
   217dc:	b940      	cbnz	r0, 217f0 <k_sched_time_slice_set+0x30>
   217de:	491d      	ldr	r1, [pc, #116]	; (21854 <k_sched_time_slice_set+0x94>)
   217e0:	481d      	ldr	r0, [pc, #116]	; (21858 <k_sched_time_slice_set+0x98>)
   217e2:	228e      	movs	r2, #142	; 0x8e
   217e4:	f002 fdd3 	bl	2438e <assert_print>
   217e8:	481a      	ldr	r0, [pc, #104]	; (21854 <k_sched_time_slice_set+0x94>)
   217ea:	218e      	movs	r1, #142	; 0x8e
   217ec:	f002 fdc8 	bl	24380 <assert_post_action>
	z_spin_lock_set_owner(l);
   217f0:	4817      	ldr	r0, [pc, #92]	; (21850 <k_sched_time_slice_set+0x90>)
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   217f2:	4e1a      	ldr	r6, [pc, #104]	; (2185c <k_sched_time_slice_set+0x9c>)
   217f4:	f7fe ff7e 	bl	206f4 <z_spin_lock_set_owner>
   217f8:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   217fa:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   217fe:	f240 30e7 	movw	r0, #999	; 0x3e7
   21802:	6131      	str	r1, [r6, #16]
   21804:	2300      	movs	r3, #0
   21806:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2180a:	fbe4 010c 	umlal	r0, r1, r4, ip
   2180e:	f7df fb9f 	bl	f50 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   21812:	2c00      	cmp	r4, #0
   21814:	4b12      	ldr	r3, [pc, #72]	; (21860 <k_sched_time_slice_set+0xa0>)
   21816:	dc17      	bgt.n	21848 <k_sched_time_slice_set+0x88>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
   21818:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   2181a:	4b12      	ldr	r3, [pc, #72]	; (21864 <k_sched_time_slice_set+0xa4>)
		z_reset_time_slice(_current);
   2181c:	68b0      	ldr	r0, [r6, #8]
		slice_max_prio = prio;
   2181e:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
   21820:	f7ff ffba 	bl	21798 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21824:	480a      	ldr	r0, [pc, #40]	; (21850 <k_sched_time_slice_set+0x90>)
   21826:	f7fe ff55 	bl	206d4 <z_spin_unlock_valid>
   2182a:	b940      	cbnz	r0, 2183e <k_sched_time_slice_set+0x7e>
   2182c:	4909      	ldr	r1, [pc, #36]	; (21854 <k_sched_time_slice_set+0x94>)
   2182e:	480a      	ldr	r0, [pc, #40]	; (21858 <k_sched_time_slice_set+0x98>)
   21830:	22b9      	movs	r2, #185	; 0xb9
   21832:	f002 fdac 	bl	2438e <assert_print>
   21836:	4807      	ldr	r0, [pc, #28]	; (21854 <k_sched_time_slice_set+0x94>)
   21838:	21b9      	movs	r1, #185	; 0xb9
   2183a:	f002 fda1 	bl	24380 <assert_post_action>
	__asm__ volatile(
   2183e:	f387 8811 	msr	BASEPRI, r7
   21842:	f3bf 8f6f 	isb	sy
	}
}
   21846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_ticks = MAX(2, slice_ticks);
   21848:	2802      	cmp	r0, #2
   2184a:	bfb8      	it	lt
   2184c:	2002      	movlt	r0, #2
   2184e:	e7e3      	b.n	21818 <k_sched_time_slice_set+0x58>
   21850:	200022c4 	.word	0x200022c4
   21854:	00028a23 	.word	0x00028a23
   21858:	000289af 	.word	0x000289af
   2185c:	20002284 	.word	0x20002284
   21860:	200022cc 	.word	0x200022cc
   21864:	200022c8 	.word	0x200022c8

00021868 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
   21868:	b538      	push	{r3, r4, r5, lr}
   2186a:	4604      	mov	r4, r0
	__asm__ volatile(
   2186c:	f04f 0340 	mov.w	r3, #64	; 0x40
   21870:	f3ef 8511 	mrs	r5, BASEPRI
   21874:	f383 8812 	msr	BASEPRI_MAX, r3
   21878:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2187c:	4812      	ldr	r0, [pc, #72]	; (218c8 <z_unpend_thread_no_timeout+0x60>)
   2187e:	f7fe ff1b 	bl	206b8 <z_spin_lock_valid>
   21882:	b940      	cbnz	r0, 21896 <z_unpend_thread_no_timeout+0x2e>
   21884:	4911      	ldr	r1, [pc, #68]	; (218cc <z_unpend_thread_no_timeout+0x64>)
   21886:	4812      	ldr	r0, [pc, #72]	; (218d0 <z_unpend_thread_no_timeout+0x68>)
   21888:	228e      	movs	r2, #142	; 0x8e
   2188a:	f002 fd80 	bl	2438e <assert_print>
   2188e:	480f      	ldr	r0, [pc, #60]	; (218cc <z_unpend_thread_no_timeout+0x64>)
   21890:	218e      	movs	r1, #142	; 0x8e
   21892:	f002 fd75 	bl	24380 <assert_post_action>
	z_spin_lock_set_owner(l);
   21896:	480c      	ldr	r0, [pc, #48]	; (218c8 <z_unpend_thread_no_timeout+0x60>)
   21898:	f7fe ff2c 	bl	206f4 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		unpend_thread_no_timeout(thread);
   2189c:	4620      	mov	r0, r4
   2189e:	f000 f8c1 	bl	21a24 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   218a2:	4809      	ldr	r0, [pc, #36]	; (218c8 <z_unpend_thread_no_timeout+0x60>)
   218a4:	f7fe ff16 	bl	206d4 <z_spin_unlock_valid>
   218a8:	b940      	cbnz	r0, 218bc <z_unpend_thread_no_timeout+0x54>
   218aa:	4908      	ldr	r1, [pc, #32]	; (218cc <z_unpend_thread_no_timeout+0x64>)
   218ac:	4808      	ldr	r0, [pc, #32]	; (218d0 <z_unpend_thread_no_timeout+0x68>)
   218ae:	22b9      	movs	r2, #185	; 0xb9
   218b0:	f002 fd6d 	bl	2438e <assert_print>
   218b4:	4805      	ldr	r0, [pc, #20]	; (218cc <z_unpend_thread_no_timeout+0x64>)
   218b6:	21b9      	movs	r1, #185	; 0xb9
   218b8:	f002 fd62 	bl	24380 <assert_post_action>
	__asm__ volatile(
   218bc:	f385 8811 	msr	BASEPRI, r5
   218c0:	f3bf 8f6f 	isb	sy
	}
}
   218c4:	bd38      	pop	{r3, r4, r5, pc}
   218c6:	bf00      	nop
   218c8:	200022c4 	.word	0x200022c4
   218cc:	00028a23 	.word	0x00028a23
   218d0:	000289af 	.word	0x000289af

000218d4 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   218d4:	b510      	push	{r4, lr}
   218d6:	4603      	mov	r3, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   218d8:	460c      	mov	r4, r1
   218da:	b9c1      	cbnz	r1, 2190e <z_reschedule+0x3a>
   218dc:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key.key) && need_swap()) {
   218e0:	b9aa      	cbnz	r2, 2190e <z_reschedule+0x3a>
	new_thread = _kernel.ready_q.cache;
   218e2:	4a14      	ldr	r2, [pc, #80]	; (21934 <z_reschedule+0x60>)
	if (resched(key.key) && need_swap()) {
   218e4:	69d1      	ldr	r1, [r2, #28]
   218e6:	6892      	ldr	r2, [r2, #8]
   218e8:	4291      	cmp	r1, r2
   218ea:	d010      	beq.n	2190e <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   218ec:	f7fe fef2 	bl	206d4 <z_spin_unlock_valid>
   218f0:	b940      	cbnz	r0, 21904 <z_reschedule+0x30>
   218f2:	4911      	ldr	r1, [pc, #68]	; (21938 <z_reschedule+0x64>)
   218f4:	4811      	ldr	r0, [pc, #68]	; (2193c <z_reschedule+0x68>)
   218f6:	22d0      	movs	r2, #208	; 0xd0
   218f8:	f002 fd49 	bl	2438e <assert_print>
   218fc:	480e      	ldr	r0, [pc, #56]	; (21938 <z_reschedule+0x64>)
   218fe:	21d0      	movs	r1, #208	; 0xd0
   21900:	f002 fd3e 	bl	24380 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   21904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ret = arch_swap(key);
   21908:	2000      	movs	r0, #0
   2190a:	f7f2 bcf1 	b.w	142f0 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2190e:	4618      	mov	r0, r3
   21910:	f7fe fee0 	bl	206d4 <z_spin_unlock_valid>
   21914:	b940      	cbnz	r0, 21928 <z_reschedule+0x54>
   21916:	4908      	ldr	r1, [pc, #32]	; (21938 <z_reschedule+0x64>)
   21918:	4808      	ldr	r0, [pc, #32]	; (2193c <z_reschedule+0x68>)
   2191a:	22b9      	movs	r2, #185	; 0xb9
   2191c:	f002 fd37 	bl	2438e <assert_print>
   21920:	4805      	ldr	r0, [pc, #20]	; (21938 <z_reschedule+0x64>)
   21922:	21b9      	movs	r1, #185	; 0xb9
   21924:	f002 fd2c 	bl	24380 <assert_post_action>
   21928:	f384 8811 	msr	BASEPRI, r4
   2192c:	f3bf 8f6f 	isb	sy
   21930:	bd10      	pop	{r4, pc}
   21932:	bf00      	nop
   21934:	20002284 	.word	0x20002284
   21938:	00028a23 	.word	0x00028a23
   2193c:	000289af 	.word	0x000289af

00021940 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   21940:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   21942:	f04f 0340 	mov.w	r3, #64	; 0x40
   21946:	f3ef 8511 	mrs	r5, BASEPRI
   2194a:	f383 8812 	msr	BASEPRI_MAX, r3
   2194e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21952:	4820      	ldr	r0, [pc, #128]	; (219d4 <k_sched_lock+0x94>)
   21954:	f7fe feb0 	bl	206b8 <z_spin_lock_valid>
   21958:	b940      	cbnz	r0, 2196c <k_sched_lock+0x2c>
   2195a:	491f      	ldr	r1, [pc, #124]	; (219d8 <k_sched_lock+0x98>)
   2195c:	481f      	ldr	r0, [pc, #124]	; (219dc <k_sched_lock+0x9c>)
   2195e:	228e      	movs	r2, #142	; 0x8e
   21960:	f002 fd15 	bl	2438e <assert_print>
   21964:	481c      	ldr	r0, [pc, #112]	; (219d8 <k_sched_lock+0x98>)
   21966:	218e      	movs	r1, #142	; 0x8e
   21968:	f002 fd0a 	bl	24380 <assert_post_action>
	z_spin_lock_set_owner(l);
   2196c:	4819      	ldr	r0, [pc, #100]	; (219d4 <k_sched_lock+0x94>)
   2196e:	f7fe fec1 	bl	206f4 <z_spin_lock_set_owner>
   21972:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   21976:	b143      	cbz	r3, 2198a <k_sched_lock+0x4a>
   21978:	4919      	ldr	r1, [pc, #100]	; (219e0 <k_sched_lock+0xa0>)
   2197a:	4818      	ldr	r0, [pc, #96]	; (219dc <k_sched_lock+0x9c>)
   2197c:	22fd      	movs	r2, #253	; 0xfd
   2197e:	f002 fd06 	bl	2438e <assert_print>
   21982:	4817      	ldr	r0, [pc, #92]	; (219e0 <k_sched_lock+0xa0>)
   21984:	21fd      	movs	r1, #253	; 0xfd
   21986:	f002 fcfb 	bl	24380 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   2198a:	4c16      	ldr	r4, [pc, #88]	; (219e4 <k_sched_lock+0xa4>)
   2198c:	68a3      	ldr	r3, [r4, #8]
   2198e:	7bdb      	ldrb	r3, [r3, #15]
   21990:	2b01      	cmp	r3, #1
   21992:	d108      	bne.n	219a6 <k_sched_lock+0x66>
   21994:	4912      	ldr	r1, [pc, #72]	; (219e0 <k_sched_lock+0xa0>)
   21996:	4811      	ldr	r0, [pc, #68]	; (219dc <k_sched_lock+0x9c>)
   21998:	22fe      	movs	r2, #254	; 0xfe
   2199a:	f002 fcf8 	bl	2438e <assert_print>
   2199e:	4810      	ldr	r0, [pc, #64]	; (219e0 <k_sched_lock+0xa0>)
   219a0:	21fe      	movs	r1, #254	; 0xfe
   219a2:	f002 fced 	bl	24380 <assert_post_action>
	--_current->base.sched_locked;
   219a6:	68a2      	ldr	r2, [r4, #8]
   219a8:	7bd3      	ldrb	r3, [r2, #15]
   219aa:	3b01      	subs	r3, #1
   219ac:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   219ae:	4809      	ldr	r0, [pc, #36]	; (219d4 <k_sched_lock+0x94>)
   219b0:	f7fe fe90 	bl	206d4 <z_spin_unlock_valid>
   219b4:	b940      	cbnz	r0, 219c8 <k_sched_lock+0x88>
   219b6:	4908      	ldr	r1, [pc, #32]	; (219d8 <k_sched_lock+0x98>)
   219b8:	4808      	ldr	r0, [pc, #32]	; (219dc <k_sched_lock+0x9c>)
   219ba:	22b9      	movs	r2, #185	; 0xb9
   219bc:	f002 fce7 	bl	2438e <assert_print>
   219c0:	4805      	ldr	r0, [pc, #20]	; (219d8 <k_sched_lock+0x98>)
   219c2:	21b9      	movs	r1, #185	; 0xb9
   219c4:	f002 fcdc 	bl	24380 <assert_post_action>
	__asm__ volatile(
   219c8:	f385 8811 	msr	BASEPRI, r5
   219cc:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   219d0:	bd38      	pop	{r3, r4, r5, pc}
   219d2:	bf00      	nop
   219d4:	200022c4 	.word	0x200022c4
   219d8:	00028a23 	.word	0x00028a23
   219dc:	000289af 	.word	0x000289af
   219e0:	0002b65b 	.word	0x0002b65b
   219e4:	20002284 	.word	0x20002284

000219e8 <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   219e8:	4b0b      	ldr	r3, [pc, #44]	; (21a18 <z_priq_dumb_remove+0x30>)
   219ea:	4299      	cmp	r1, r3
{
   219ec:	b510      	push	{r4, lr}
   219ee:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   219f0:	d10a      	bne.n	21a08 <z_priq_dumb_remove+0x20>
   219f2:	490a      	ldr	r1, [pc, #40]	; (21a1c <z_priq_dumb_remove+0x34>)
   219f4:	480a      	ldr	r0, [pc, #40]	; (21a20 <z_priq_dumb_remove+0x38>)
   219f6:	f240 423d 	movw	r2, #1085	; 0x43d
   219fa:	f002 fcc8 	bl	2438e <assert_print>
   219fe:	4807      	ldr	r0, [pc, #28]	; (21a1c <z_priq_dumb_remove+0x34>)
   21a00:	f240 413d 	movw	r1, #1085	; 0x43d
   21a04:	f002 fcbc 	bl	24380 <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   21a08:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
   21a0c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   21a0e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   21a10:	2300      	movs	r3, #0
	node->prev = NULL;
   21a12:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   21a16:	bd10      	pop	{r4, pc}
   21a18:	20001c18 	.word	0x20001c18
   21a1c:	0002b6d0 	.word	0x0002b6d0
   21a20:	000289af 	.word	0x000289af

00021a24 <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
   21a24:	6883      	ldr	r3, [r0, #8]
{
   21a26:	b510      	push	{r4, lr}
   21a28:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   21a2a:	b953      	cbnz	r3, 21a42 <unpend_thread_no_timeout+0x1e>
   21a2c:	490a      	ldr	r1, [pc, #40]	; (21a58 <unpend_thread_no_timeout+0x34>)
   21a2e:	480b      	ldr	r0, [pc, #44]	; (21a5c <unpend_thread_no_timeout+0x38>)
   21a30:	f240 22b9 	movw	r2, #697	; 0x2b9
   21a34:	f002 fcab 	bl	2438e <assert_print>
   21a38:	4807      	ldr	r0, [pc, #28]	; (21a58 <unpend_thread_no_timeout+0x34>)
   21a3a:	f240 21b9 	movw	r1, #697	; 0x2b9
   21a3e:	f002 fc9f 	bl	24380 <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   21a42:	68a0      	ldr	r0, [r4, #8]
   21a44:	4621      	mov	r1, r4
   21a46:	f7ff ffcf 	bl	219e8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   21a4a:	7b63      	ldrb	r3, [r4, #13]
   21a4c:	f023 0302 	bic.w	r3, r3, #2
   21a50:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   21a52:	2300      	movs	r3, #0
   21a54:	60a3      	str	r3, [r4, #8]
}
   21a56:	bd10      	pop	{r4, pc}
   21a58:	0002b6d0 	.word	0x0002b6d0
   21a5c:	000289af 	.word	0x000289af

00021a60 <z_unpend_thread>:
{
   21a60:	b538      	push	{r3, r4, r5, lr}
   21a62:	4604      	mov	r4, r0
	__asm__ volatile(
   21a64:	f04f 0340 	mov.w	r3, #64	; 0x40
   21a68:	f3ef 8511 	mrs	r5, BASEPRI
   21a6c:	f383 8812 	msr	BASEPRI_MAX, r3
   21a70:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21a74:	4814      	ldr	r0, [pc, #80]	; (21ac8 <z_unpend_thread+0x68>)
   21a76:	f7fe fe1f 	bl	206b8 <z_spin_lock_valid>
   21a7a:	b940      	cbnz	r0, 21a8e <z_unpend_thread+0x2e>
   21a7c:	4913      	ldr	r1, [pc, #76]	; (21acc <z_unpend_thread+0x6c>)
   21a7e:	4814      	ldr	r0, [pc, #80]	; (21ad0 <z_unpend_thread+0x70>)
   21a80:	228e      	movs	r2, #142	; 0x8e
   21a82:	f002 fc84 	bl	2438e <assert_print>
   21a86:	4811      	ldr	r0, [pc, #68]	; (21acc <z_unpend_thread+0x6c>)
   21a88:	218e      	movs	r1, #142	; 0x8e
   21a8a:	f002 fc79 	bl	24380 <assert_post_action>
	z_spin_lock_set_owner(l);
   21a8e:	480e      	ldr	r0, [pc, #56]	; (21ac8 <z_unpend_thread+0x68>)
   21a90:	f7fe fe30 	bl	206f4 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   21a94:	4620      	mov	r0, r4
   21a96:	f7ff ffc5 	bl	21a24 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21a9a:	480b      	ldr	r0, [pc, #44]	; (21ac8 <z_unpend_thread+0x68>)
   21a9c:	f7fe fe1a 	bl	206d4 <z_spin_unlock_valid>
   21aa0:	b940      	cbnz	r0, 21ab4 <z_unpend_thread+0x54>
   21aa2:	490a      	ldr	r1, [pc, #40]	; (21acc <z_unpend_thread+0x6c>)
   21aa4:	480a      	ldr	r0, [pc, #40]	; (21ad0 <z_unpend_thread+0x70>)
   21aa6:	22b9      	movs	r2, #185	; 0xb9
   21aa8:	f002 fc71 	bl	2438e <assert_print>
   21aac:	4807      	ldr	r0, [pc, #28]	; (21acc <z_unpend_thread+0x6c>)
   21aae:	21b9      	movs	r1, #185	; 0xb9
   21ab0:	f002 fc66 	bl	24380 <assert_post_action>
	__asm__ volatile(
   21ab4:	f385 8811 	msr	BASEPRI, r5
   21ab8:	f3bf 8f6f 	isb	sy
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   21abc:	f104 0018 	add.w	r0, r4, #24
}
   21ac0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   21ac4:	f000 bfbc 	b.w	22a40 <z_abort_timeout>
   21ac8:	200022c4 	.word	0x200022c4
   21acc:	00028a23 	.word	0x00028a23
   21ad0:	000289af 	.word	0x000289af

00021ad4 <update_cache>:
{
   21ad4:	b538      	push	{r3, r4, r5, lr}
   21ad6:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
   21ad8:	4812      	ldr	r0, [pc, #72]	; (21b24 <update_cache+0x50>)
   21ada:	4d13      	ldr	r5, [pc, #76]	; (21b28 <update_cache+0x54>)
   21adc:	f005 fe9f 	bl	2781e <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   21ae0:	4604      	mov	r4, r0
   21ae2:	b900      	cbnz	r0, 21ae6 <update_cache+0x12>
   21ae4:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
   21ae6:	b9aa      	cbnz	r2, 21b14 <update_cache+0x40>
	__ASSERT(_current != NULL, "");
   21ae8:	68ab      	ldr	r3, [r5, #8]
   21aea:	b943      	cbnz	r3, 21afe <update_cache+0x2a>
   21aec:	490f      	ldr	r1, [pc, #60]	; (21b2c <update_cache+0x58>)
   21aee:	4810      	ldr	r0, [pc, #64]	; (21b30 <update_cache+0x5c>)
   21af0:	2289      	movs	r2, #137	; 0x89
   21af2:	f002 fc4c 	bl	2438e <assert_print>
   21af6:	480d      	ldr	r0, [pc, #52]	; (21b2c <update_cache+0x58>)
   21af8:	2189      	movs	r1, #137	; 0x89
   21afa:	f002 fc41 	bl	24380 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   21afe:	68ab      	ldr	r3, [r5, #8]
   21b00:	7b5a      	ldrb	r2, [r3, #13]
   21b02:	06d2      	lsls	r2, r2, #27
   21b04:	d106      	bne.n	21b14 <update_cache+0x40>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   21b06:	69a2      	ldr	r2, [r4, #24]
   21b08:	b922      	cbnz	r2, 21b14 <update_cache+0x40>
	if (is_preempt(_current) || is_metairq(thread)) {
   21b0a:	89da      	ldrh	r2, [r3, #14]
   21b0c:	2a7f      	cmp	r2, #127	; 0x7f
   21b0e:	d901      	bls.n	21b14 <update_cache+0x40>
		_kernel.ready_q.cache = _current;
   21b10:	61eb      	str	r3, [r5, #28]
}
   21b12:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   21b14:	68ab      	ldr	r3, [r5, #8]
   21b16:	42a3      	cmp	r3, r4
   21b18:	d002      	beq.n	21b20 <update_cache+0x4c>
			z_reset_time_slice(thread);
   21b1a:	4620      	mov	r0, r4
   21b1c:	f7ff fe3c 	bl	21798 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   21b20:	61ec      	str	r4, [r5, #28]
}
   21b22:	e7f6      	b.n	21b12 <update_cache+0x3e>
   21b24:	200022a4 	.word	0x200022a4
   21b28:	20002284 	.word	0x20002284
   21b2c:	0002b6d0 	.word	0x0002b6d0
   21b30:	000289af 	.word	0x000289af

00021b34 <move_thread_to_end_of_prio_q>:
{
   21b34:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   21b36:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   21b3a:	7b43      	ldrb	r3, [r0, #13]
   21b3c:	2a00      	cmp	r2, #0
{
   21b3e:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   21b40:	da06      	bge.n	21b50 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21b42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   21b46:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   21b48:	4601      	mov	r1, r0
   21b4a:	481d      	ldr	r0, [pc, #116]	; (21bc0 <move_thread_to_end_of_prio_q+0x8c>)
   21b4c:	f7ff ff4c 	bl	219e8 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   21b50:	7b63      	ldrb	r3, [r4, #13]
   21b52:	f063 037f 	orn	r3, r3, #127	; 0x7f
   21b56:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   21b58:	4b1a      	ldr	r3, [pc, #104]	; (21bc4 <move_thread_to_end_of_prio_q+0x90>)
   21b5a:	429c      	cmp	r4, r3
   21b5c:	d108      	bne.n	21b70 <move_thread_to_end_of_prio_q+0x3c>
   21b5e:	491a      	ldr	r1, [pc, #104]	; (21bc8 <move_thread_to_end_of_prio_q+0x94>)
   21b60:	481a      	ldr	r0, [pc, #104]	; (21bcc <move_thread_to_end_of_prio_q+0x98>)
   21b62:	22ba      	movs	r2, #186	; 0xba
   21b64:	f002 fc13 	bl	2438e <assert_print>
   21b68:	4817      	ldr	r0, [pc, #92]	; (21bc8 <move_thread_to_end_of_prio_q+0x94>)
   21b6a:	21ba      	movs	r1, #186	; 0xba
   21b6c:	f002 fc08 	bl	24380 <assert_post_action>
	return list->head == list;
   21b70:	4a17      	ldr	r2, [pc, #92]	; (21bd0 <move_thread_to_end_of_prio_q+0x9c>)
	return (node == list->tail) ? NULL : node->next;
   21b72:	e9d2 3008 	ldrd	r3, r0, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21b76:	f102 0520 	add.w	r5, r2, #32
   21b7a:	42ab      	cmp	r3, r5
   21b7c:	d01b      	beq.n	21bb6 <move_thread_to_end_of_prio_q+0x82>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21b7e:	b1d3      	cbz	r3, 21bb6 <move_thread_to_end_of_prio_q+0x82>
	int32_t b1 = thread_1->base.prio;
   21b80:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   21b84:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   21b88:	428e      	cmp	r6, r1
   21b8a:	d00f      	beq.n	21bac <move_thread_to_end_of_prio_q+0x78>
		return b2 - b1;
   21b8c:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   21b8e:	2900      	cmp	r1, #0
   21b90:	dd0c      	ble.n	21bac <move_thread_to_end_of_prio_q+0x78>
	sys_dnode_t *const prev = successor->prev;
   21b92:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   21b94:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   21b98:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   21b9a:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
   21b9c:	6890      	ldr	r0, [r2, #8]
   21b9e:	1b03      	subs	r3, r0, r4
   21ba0:	4258      	negs	r0, r3
}
   21ba2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   21ba6:	4158      	adcs	r0, r3
   21ba8:	f7ff bf94 	b.w	21ad4 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   21bac:	4283      	cmp	r3, r0
   21bae:	d002      	beq.n	21bb6 <move_thread_to_end_of_prio_q+0x82>
   21bb0:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21bb2:	2b00      	cmp	r3, #0
   21bb4:	d1e6      	bne.n	21b84 <move_thread_to_end_of_prio_q+0x50>
	node->prev = tail;
   21bb6:	e9c4 5000 	strd	r5, r0, [r4]
	tail->next = node;
   21bba:	6004      	str	r4, [r0, #0]
	list->tail = node;
   21bbc:	6254      	str	r4, [r2, #36]	; 0x24
}
   21bbe:	e7ed      	b.n	21b9c <move_thread_to_end_of_prio_q+0x68>
   21bc0:	200022a4 	.word	0x200022a4
   21bc4:	20001c18 	.word	0x20001c18
   21bc8:	0002b6d0 	.word	0x0002b6d0
   21bcc:	000289af 	.word	0x000289af
   21bd0:	20002284 	.word	0x20002284

00021bd4 <z_time_slice>:
{
   21bd4:	b570      	push	{r4, r5, r6, lr}
   21bd6:	4605      	mov	r5, r0
	__asm__ volatile(
   21bd8:	f04f 0340 	mov.w	r3, #64	; 0x40
   21bdc:	f3ef 8611 	mrs	r6, BASEPRI
   21be0:	f383 8812 	msr	BASEPRI_MAX, r3
   21be4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21be8:	4825      	ldr	r0, [pc, #148]	; (21c80 <z_time_slice+0xac>)
   21bea:	f7fe fd65 	bl	206b8 <z_spin_lock_valid>
   21bee:	b940      	cbnz	r0, 21c02 <z_time_slice+0x2e>
   21bf0:	4924      	ldr	r1, [pc, #144]	; (21c84 <z_time_slice+0xb0>)
   21bf2:	4825      	ldr	r0, [pc, #148]	; (21c88 <z_time_slice+0xb4>)
   21bf4:	228e      	movs	r2, #142	; 0x8e
   21bf6:	f002 fbca 	bl	2438e <assert_print>
   21bfa:	4822      	ldr	r0, [pc, #136]	; (21c84 <z_time_slice+0xb0>)
   21bfc:	218e      	movs	r1, #142	; 0x8e
   21bfe:	f002 fbbf 	bl	24380 <assert_post_action>
	z_spin_lock_set_owner(l);
   21c02:	481f      	ldr	r0, [pc, #124]	; (21c80 <z_time_slice+0xac>)
   21c04:	f7fe fd76 	bl	206f4 <z_spin_lock_set_owner>
	if (pending_current == _current) {
   21c08:	4b20      	ldr	r3, [pc, #128]	; (21c8c <z_time_slice+0xb8>)
   21c0a:	4a21      	ldr	r2, [pc, #132]	; (21c90 <z_time_slice+0xbc>)
   21c0c:	689c      	ldr	r4, [r3, #8]
   21c0e:	6811      	ldr	r1, [r2, #0]
   21c10:	428c      	cmp	r4, r1
   21c12:	d114      	bne.n	21c3e <z_time_slice+0x6a>
	z_reset_time_slice(curr);
   21c14:	4620      	mov	r0, r4
   21c16:	f7ff fdbf 	bl	21798 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21c1a:	4819      	ldr	r0, [pc, #100]	; (21c80 <z_time_slice+0xac>)
   21c1c:	f7fe fd5a 	bl	206d4 <z_spin_unlock_valid>
   21c20:	b940      	cbnz	r0, 21c34 <z_time_slice+0x60>
   21c22:	4918      	ldr	r1, [pc, #96]	; (21c84 <z_time_slice+0xb0>)
   21c24:	4818      	ldr	r0, [pc, #96]	; (21c88 <z_time_slice+0xb4>)
   21c26:	22b9      	movs	r2, #185	; 0xb9
   21c28:	f002 fbb1 	bl	2438e <assert_print>
   21c2c:	4815      	ldr	r0, [pc, #84]	; (21c84 <z_time_slice+0xb0>)
   21c2e:	21b9      	movs	r1, #185	; 0xb9
   21c30:	f002 fba6 	bl	24380 <assert_post_action>
	__asm__ volatile(
   21c34:	f386 8811 	msr	BASEPRI, r6
   21c38:	f3bf 8f6f 	isb	sy
}
   21c3c:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   21c3e:	2100      	movs	r1, #0
   21c40:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   21c42:	4a14      	ldr	r2, [pc, #80]	; (21c94 <z_time_slice+0xc0>)
	if (slice_time(_current) && sliceable(_current)) {
   21c44:	6812      	ldr	r2, [r2, #0]
   21c46:	b1c2      	cbz	r2, 21c7a <z_time_slice+0xa6>
		&& !z_is_idle_thread_object(thread);
   21c48:	89e2      	ldrh	r2, [r4, #14]
   21c4a:	2a7f      	cmp	r2, #127	; 0x7f
   21c4c:	d815      	bhi.n	21c7a <z_time_slice+0xa6>
		&& !z_is_thread_prevented_from_running(thread)
   21c4e:	7b62      	ldrb	r2, [r4, #13]
   21c50:	06d2      	lsls	r2, r2, #27
   21c52:	d112      	bne.n	21c7a <z_time_slice+0xa6>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   21c54:	4a10      	ldr	r2, [pc, #64]	; (21c98 <z_time_slice+0xc4>)
   21c56:	f994 100e 	ldrsb.w	r1, [r4, #14]
   21c5a:	6812      	ldr	r2, [r2, #0]
   21c5c:	4291      	cmp	r1, r2
   21c5e:	db0c      	blt.n	21c7a <z_time_slice+0xa6>
	if (slice_time(_current) && sliceable(_current)) {
   21c60:	4a0e      	ldr	r2, [pc, #56]	; (21c9c <z_time_slice+0xc8>)
   21c62:	4294      	cmp	r4, r2
   21c64:	d009      	beq.n	21c7a <z_time_slice+0xa6>
		if (ticks >= _current_cpu->slice_ticks) {
   21c66:	691a      	ldr	r2, [r3, #16]
   21c68:	42aa      	cmp	r2, r5
   21c6a:	dc03      	bgt.n	21c74 <z_time_slice+0xa0>
		move_thread_to_end_of_prio_q(curr);
   21c6c:	4620      	mov	r0, r4
   21c6e:	f7ff ff61 	bl	21b34 <move_thread_to_end_of_prio_q>
   21c72:	e7cf      	b.n	21c14 <z_time_slice+0x40>
			_current_cpu->slice_ticks -= ticks;
   21c74:	1b52      	subs	r2, r2, r5
		_current_cpu->slice_ticks = 0;
   21c76:	611a      	str	r2, [r3, #16]
   21c78:	e7cf      	b.n	21c1a <z_time_slice+0x46>
   21c7a:	2200      	movs	r2, #0
   21c7c:	e7fb      	b.n	21c76 <z_time_slice+0xa2>
   21c7e:	bf00      	nop
   21c80:	200022c4 	.word	0x200022c4
   21c84:	00028a23 	.word	0x00028a23
   21c88:	000289af 	.word	0x000289af
   21c8c:	20002284 	.word	0x20002284
   21c90:	200022c0 	.word	0x200022c0
   21c94:	200022cc 	.word	0x200022cc
   21c98:	200022c8 	.word	0x200022c8
   21c9c:	20001c18 	.word	0x20001c18

00021ca0 <ready_thread>:
{
   21ca0:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   21ca2:	f990 200d 	ldrsb.w	r2, [r0, #13]
   21ca6:	7b43      	ldrb	r3, [r0, #13]
   21ca8:	2a00      	cmp	r2, #0
{
   21caa:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   21cac:	db38      	blt.n	21d20 <ready_thread+0x80>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   21cae:	06da      	lsls	r2, r3, #27
   21cb0:	d136      	bne.n	21d20 <ready_thread+0x80>
   21cb2:	6982      	ldr	r2, [r0, #24]
   21cb4:	2a00      	cmp	r2, #0
   21cb6:	d133      	bne.n	21d20 <ready_thread+0x80>
	thread->base.thread_state |= _THREAD_QUEUED;
   21cb8:	f063 037f 	orn	r3, r3, #127	; 0x7f
   21cbc:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   21cbe:	4b19      	ldr	r3, [pc, #100]	; (21d24 <ready_thread+0x84>)
   21cc0:	4298      	cmp	r0, r3
   21cc2:	d108      	bne.n	21cd6 <ready_thread+0x36>
   21cc4:	4918      	ldr	r1, [pc, #96]	; (21d28 <ready_thread+0x88>)
   21cc6:	4819      	ldr	r0, [pc, #100]	; (21d2c <ready_thread+0x8c>)
   21cc8:	22ba      	movs	r2, #186	; 0xba
   21cca:	f002 fb60 	bl	2438e <assert_print>
   21cce:	4816      	ldr	r0, [pc, #88]	; (21d28 <ready_thread+0x88>)
   21cd0:	21ba      	movs	r1, #186	; 0xba
   21cd2:	f002 fb55 	bl	24380 <assert_post_action>
	return list->head == list;
   21cd6:	4a16      	ldr	r2, [pc, #88]	; (21d30 <ready_thread+0x90>)
	return (node == list->tail) ? NULL : node->next;
   21cd8:	e9d2 3008 	ldrd	r3, r0, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21cdc:	f102 0520 	add.w	r5, r2, #32
   21ce0:	42ab      	cmp	r3, r5
   21ce2:	d018      	beq.n	21d16 <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21ce4:	b1bb      	cbz	r3, 21d16 <ready_thread+0x76>
	int32_t b1 = thread_1->base.prio;
   21ce6:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   21cea:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   21cee:	428e      	cmp	r6, r1
   21cf0:	d00c      	beq.n	21d0c <ready_thread+0x6c>
		return b2 - b1;
   21cf2:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   21cf4:	2900      	cmp	r1, #0
   21cf6:	dd09      	ble.n	21d0c <ready_thread+0x6c>
	sys_dnode_t *const prev = successor->prev;
   21cf8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   21cfa:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   21cfe:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   21d00:	605c      	str	r4, [r3, #4]
}
   21d02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   21d06:	2000      	movs	r0, #0
   21d08:	f7ff bee4 	b.w	21ad4 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   21d0c:	4298      	cmp	r0, r3
   21d0e:	d002      	beq.n	21d16 <ready_thread+0x76>
   21d10:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21d12:	2b00      	cmp	r3, #0
   21d14:	d1e9      	bne.n	21cea <ready_thread+0x4a>
	node->prev = tail;
   21d16:	e9c4 5000 	strd	r5, r0, [r4]
	tail->next = node;
   21d1a:	6004      	str	r4, [r0, #0]
	list->tail = node;
   21d1c:	6254      	str	r4, [r2, #36]	; 0x24
}
   21d1e:	e7f0      	b.n	21d02 <ready_thread+0x62>
}
   21d20:	bd70      	pop	{r4, r5, r6, pc}
   21d22:	bf00      	nop
   21d24:	20001c18 	.word	0x20001c18
   21d28:	0002b6d0 	.word	0x0002b6d0
   21d2c:	000289af 	.word	0x000289af
   21d30:	20002284 	.word	0x20002284

00021d34 <z_ready_thread>:
{
   21d34:	b538      	push	{r3, r4, r5, lr}
   21d36:	4604      	mov	r4, r0
	__asm__ volatile(
   21d38:	f04f 0340 	mov.w	r3, #64	; 0x40
   21d3c:	f3ef 8511 	mrs	r5, BASEPRI
   21d40:	f383 8812 	msr	BASEPRI_MAX, r3
   21d44:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21d48:	4812      	ldr	r0, [pc, #72]	; (21d94 <z_ready_thread+0x60>)
   21d4a:	f7fe fcb5 	bl	206b8 <z_spin_lock_valid>
   21d4e:	b940      	cbnz	r0, 21d62 <z_ready_thread+0x2e>
   21d50:	4911      	ldr	r1, [pc, #68]	; (21d98 <z_ready_thread+0x64>)
   21d52:	4812      	ldr	r0, [pc, #72]	; (21d9c <z_ready_thread+0x68>)
   21d54:	228e      	movs	r2, #142	; 0x8e
   21d56:	f002 fb1a 	bl	2438e <assert_print>
   21d5a:	480f      	ldr	r0, [pc, #60]	; (21d98 <z_ready_thread+0x64>)
   21d5c:	218e      	movs	r1, #142	; 0x8e
   21d5e:	f002 fb0f 	bl	24380 <assert_post_action>
	z_spin_lock_set_owner(l);
   21d62:	480c      	ldr	r0, [pc, #48]	; (21d94 <z_ready_thread+0x60>)
   21d64:	f7fe fcc6 	bl	206f4 <z_spin_lock_set_owner>
			ready_thread(thread);
   21d68:	4620      	mov	r0, r4
   21d6a:	f7ff ff99 	bl	21ca0 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21d6e:	4809      	ldr	r0, [pc, #36]	; (21d94 <z_ready_thread+0x60>)
   21d70:	f7fe fcb0 	bl	206d4 <z_spin_unlock_valid>
   21d74:	b940      	cbnz	r0, 21d88 <z_ready_thread+0x54>
   21d76:	4908      	ldr	r1, [pc, #32]	; (21d98 <z_ready_thread+0x64>)
   21d78:	4808      	ldr	r0, [pc, #32]	; (21d9c <z_ready_thread+0x68>)
   21d7a:	22b9      	movs	r2, #185	; 0xb9
   21d7c:	f002 fb07 	bl	2438e <assert_print>
   21d80:	4805      	ldr	r0, [pc, #20]	; (21d98 <z_ready_thread+0x64>)
   21d82:	21b9      	movs	r1, #185	; 0xb9
   21d84:	f002 fafc 	bl	24380 <assert_post_action>
	__asm__ volatile(
   21d88:	f385 8811 	msr	BASEPRI, r5
   21d8c:	f3bf 8f6f 	isb	sy
}
   21d90:	bd38      	pop	{r3, r4, r5, pc}
   21d92:	bf00      	nop
   21d94:	200022c4 	.word	0x200022c4
   21d98:	00028a23 	.word	0x00028a23
   21d9c:	000289af 	.word	0x000289af

00021da0 <z_sched_start>:
{
   21da0:	b538      	push	{r3, r4, r5, lr}
   21da2:	4604      	mov	r4, r0
	__asm__ volatile(
   21da4:	f04f 0340 	mov.w	r3, #64	; 0x40
   21da8:	f3ef 8511 	mrs	r5, BASEPRI
   21dac:	f383 8812 	msr	BASEPRI_MAX, r3
   21db0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21db4:	4818      	ldr	r0, [pc, #96]	; (21e18 <z_sched_start+0x78>)
   21db6:	f7fe fc7f 	bl	206b8 <z_spin_lock_valid>
   21dba:	b940      	cbnz	r0, 21dce <z_sched_start+0x2e>
   21dbc:	4917      	ldr	r1, [pc, #92]	; (21e1c <z_sched_start+0x7c>)
   21dbe:	4818      	ldr	r0, [pc, #96]	; (21e20 <z_sched_start+0x80>)
   21dc0:	228e      	movs	r2, #142	; 0x8e
   21dc2:	f002 fae4 	bl	2438e <assert_print>
   21dc6:	4815      	ldr	r0, [pc, #84]	; (21e1c <z_sched_start+0x7c>)
   21dc8:	218e      	movs	r1, #142	; 0x8e
   21dca:	f002 fad9 	bl	24380 <assert_post_action>
	z_spin_lock_set_owner(l);
   21dce:	4812      	ldr	r0, [pc, #72]	; (21e18 <z_sched_start+0x78>)
   21dd0:	f7fe fc90 	bl	206f4 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   21dd4:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
   21dd6:	075a      	lsls	r2, r3, #29
   21dd8:	d411      	bmi.n	21dfe <z_sched_start+0x5e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21dda:	480f      	ldr	r0, [pc, #60]	; (21e18 <z_sched_start+0x78>)
   21ddc:	f7fe fc7a 	bl	206d4 <z_spin_unlock_valid>
   21de0:	b940      	cbnz	r0, 21df4 <z_sched_start+0x54>
   21de2:	490e      	ldr	r1, [pc, #56]	; (21e1c <z_sched_start+0x7c>)
   21de4:	480e      	ldr	r0, [pc, #56]	; (21e20 <z_sched_start+0x80>)
   21de6:	22b9      	movs	r2, #185	; 0xb9
   21de8:	f002 fad1 	bl	2438e <assert_print>
   21dec:	480b      	ldr	r0, [pc, #44]	; (21e1c <z_sched_start+0x7c>)
   21dee:	21b9      	movs	r1, #185	; 0xb9
   21df0:	f002 fac6 	bl	24380 <assert_post_action>
	__asm__ volatile(
   21df4:	f385 8811 	msr	BASEPRI, r5
   21df8:	f3bf 8f6f 	isb	sy
}
   21dfc:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   21dfe:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   21e02:	4620      	mov	r0, r4
   21e04:	7363      	strb	r3, [r4, #13]
   21e06:	f7ff ff4b 	bl	21ca0 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   21e0a:	4629      	mov	r1, r5
   21e0c:	4802      	ldr	r0, [pc, #8]	; (21e18 <z_sched_start+0x78>)
}
   21e0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   21e12:	f7ff bd5f 	b.w	218d4 <z_reschedule>
   21e16:	bf00      	nop
   21e18:	200022c4 	.word	0x200022c4
   21e1c:	00028a23 	.word	0x00028a23
   21e20:	000289af 	.word	0x000289af

00021e24 <z_thread_timeout>:
{
   21e24:	b570      	push	{r4, r5, r6, lr}
   21e26:	4604      	mov	r4, r0
	__asm__ volatile(
   21e28:	f04f 0340 	mov.w	r3, #64	; 0x40
   21e2c:	f3ef 8611 	mrs	r6, BASEPRI
   21e30:	f383 8812 	msr	BASEPRI_MAX, r3
   21e34:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21e38:	481b      	ldr	r0, [pc, #108]	; (21ea8 <z_thread_timeout+0x84>)
   21e3a:	f7fe fc3d 	bl	206b8 <z_spin_lock_valid>
   21e3e:	b940      	cbnz	r0, 21e52 <z_thread_timeout+0x2e>
   21e40:	491a      	ldr	r1, [pc, #104]	; (21eac <z_thread_timeout+0x88>)
   21e42:	481b      	ldr	r0, [pc, #108]	; (21eb0 <z_thread_timeout+0x8c>)
   21e44:	228e      	movs	r2, #142	; 0x8e
   21e46:	f002 faa2 	bl	2438e <assert_print>
   21e4a:	4818      	ldr	r0, [pc, #96]	; (21eac <z_thread_timeout+0x88>)
   21e4c:	218e      	movs	r1, #142	; 0x8e
   21e4e:	f002 fa97 	bl	24380 <assert_post_action>
	z_spin_lock_set_owner(l);
   21e52:	4815      	ldr	r0, [pc, #84]	; (21ea8 <z_thread_timeout+0x84>)
   21e54:	f7fe fc4e 	bl	206f4 <z_spin_lock_set_owner>
		if (!killed) {
   21e58:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   21e5c:	f013 0f28 	tst.w	r3, #40	; 0x28
   21e60:	d110      	bne.n	21e84 <z_thread_timeout+0x60>
			if (thread->base.pended_on != NULL) {
   21e62:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   21e66:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
   21e6a:	b113      	cbz	r3, 21e72 <z_thread_timeout+0x4e>
				unpend_thread_no_timeout(thread);
   21e6c:	4628      	mov	r0, r5
   21e6e:	f7ff fdd9 	bl	21a24 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   21e72:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   21e76:	f023 0314 	bic.w	r3, r3, #20
   21e7a:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   21e7e:	4628      	mov	r0, r5
   21e80:	f7ff ff0e 	bl	21ca0 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21e84:	4808      	ldr	r0, [pc, #32]	; (21ea8 <z_thread_timeout+0x84>)
   21e86:	f7fe fc25 	bl	206d4 <z_spin_unlock_valid>
   21e8a:	b940      	cbnz	r0, 21e9e <z_thread_timeout+0x7a>
   21e8c:	4907      	ldr	r1, [pc, #28]	; (21eac <z_thread_timeout+0x88>)
   21e8e:	4808      	ldr	r0, [pc, #32]	; (21eb0 <z_thread_timeout+0x8c>)
   21e90:	22b9      	movs	r2, #185	; 0xb9
   21e92:	f002 fa7c 	bl	2438e <assert_print>
   21e96:	4805      	ldr	r0, [pc, #20]	; (21eac <z_thread_timeout+0x88>)
   21e98:	21b9      	movs	r1, #185	; 0xb9
   21e9a:	f002 fa71 	bl	24380 <assert_post_action>
	__asm__ volatile(
   21e9e:	f386 8811 	msr	BASEPRI, r6
   21ea2:	f3bf 8f6f 	isb	sy
}
   21ea6:	bd70      	pop	{r4, r5, r6, pc}
   21ea8:	200022c4 	.word	0x200022c4
   21eac:	00028a23 	.word	0x00028a23
   21eb0:	000289af 	.word	0x000289af

00021eb4 <unready_thread>:
{
   21eb4:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   21eb6:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   21eba:	7b43      	ldrb	r3, [r0, #13]
   21ebc:	2a00      	cmp	r2, #0
{
   21ebe:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   21ec0:	da06      	bge.n	21ed0 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21ec2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   21ec6:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   21ec8:	4601      	mov	r1, r0
   21eca:	4806      	ldr	r0, [pc, #24]	; (21ee4 <unready_thread+0x30>)
   21ecc:	f7ff fd8c 	bl	219e8 <z_priq_dumb_remove>
	update_cache(thread == _current);
   21ed0:	4b05      	ldr	r3, [pc, #20]	; (21ee8 <unready_thread+0x34>)
   21ed2:	6898      	ldr	r0, [r3, #8]
   21ed4:	1b03      	subs	r3, r0, r4
   21ed6:	4258      	negs	r0, r3
}
   21ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   21edc:	4158      	adcs	r0, r3
   21ede:	f7ff bdf9 	b.w	21ad4 <update_cache>
   21ee2:	bf00      	nop
   21ee4:	200022a4 	.word	0x200022a4
   21ee8:	20002284 	.word	0x20002284

00021eec <add_to_waitq_locked>:
{
   21eec:	b538      	push	{r3, r4, r5, lr}
   21eee:	4604      	mov	r4, r0
   21ef0:	460d      	mov	r5, r1
	unready_thread(thread);
   21ef2:	f7ff ffdf 	bl	21eb4 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   21ef6:	7b63      	ldrb	r3, [r4, #13]
   21ef8:	f043 0302 	orr.w	r3, r3, #2
   21efc:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   21efe:	b1f5      	cbz	r5, 21f3e <add_to_waitq_locked+0x52>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   21f00:	4b15      	ldr	r3, [pc, #84]	; (21f58 <add_to_waitq_locked+0x6c>)
		thread->base.pended_on = wait_q;
   21f02:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   21f04:	429c      	cmp	r4, r3
   21f06:	d108      	bne.n	21f1a <add_to_waitq_locked+0x2e>
   21f08:	4914      	ldr	r1, [pc, #80]	; (21f5c <add_to_waitq_locked+0x70>)
   21f0a:	4815      	ldr	r0, [pc, #84]	; (21f60 <add_to_waitq_locked+0x74>)
   21f0c:	22ba      	movs	r2, #186	; 0xba
   21f0e:	f002 fa3e 	bl	2438e <assert_print>
   21f12:	4812      	ldr	r0, [pc, #72]	; (21f5c <add_to_waitq_locked+0x70>)
   21f14:	21ba      	movs	r1, #186	; 0xba
   21f16:	f002 fa33 	bl	24380 <assert_post_action>
	return list->head == list;
   21f1a:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21f1c:	429d      	cmp	r5, r3
   21f1e:	d015      	beq.n	21f4c <add_to_waitq_locked+0x60>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21f20:	b1a3      	cbz	r3, 21f4c <add_to_waitq_locked+0x60>
	int32_t b1 = thread_1->base.prio;
   21f22:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   21f26:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   21f2a:	4291      	cmp	r1, r2
   21f2c:	d008      	beq.n	21f40 <add_to_waitq_locked+0x54>
		return b2 - b1;
   21f2e:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   21f30:	2a00      	cmp	r2, #0
   21f32:	dd05      	ble.n	21f40 <add_to_waitq_locked+0x54>
	sys_dnode_t *const prev = successor->prev;
   21f34:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   21f36:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   21f3a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   21f3c:	605c      	str	r4, [r3, #4]
}
   21f3e:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   21f40:	686a      	ldr	r2, [r5, #4]
   21f42:	4293      	cmp	r3, r2
   21f44:	d002      	beq.n	21f4c <add_to_waitq_locked+0x60>
   21f46:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21f48:	2b00      	cmp	r3, #0
   21f4a:	d1ec      	bne.n	21f26 <add_to_waitq_locked+0x3a>
	sys_dnode_t *const tail = list->tail;
   21f4c:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   21f4e:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   21f52:	601c      	str	r4, [r3, #0]
	list->tail = node;
   21f54:	606c      	str	r4, [r5, #4]
}
   21f56:	e7f2      	b.n	21f3e <add_to_waitq_locked+0x52>
   21f58:	20001c18 	.word	0x20001c18
   21f5c:	0002b6d0 	.word	0x0002b6d0
   21f60:	000289af 	.word	0x000289af

00021f64 <pend>:
{
   21f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21f68:	4604      	mov	r4, r0
   21f6a:	4688      	mov	r8, r1
   21f6c:	4616      	mov	r6, r2
   21f6e:	461d      	mov	r5, r3
	__asm__ volatile(
   21f70:	f04f 0340 	mov.w	r3, #64	; 0x40
   21f74:	f3ef 8711 	mrs	r7, BASEPRI
   21f78:	f383 8812 	msr	BASEPRI_MAX, r3
   21f7c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21f80:	481a      	ldr	r0, [pc, #104]	; (21fec <pend+0x88>)
   21f82:	f7fe fb99 	bl	206b8 <z_spin_lock_valid>
   21f86:	b940      	cbnz	r0, 21f9a <pend+0x36>
   21f88:	4919      	ldr	r1, [pc, #100]	; (21ff0 <pend+0x8c>)
   21f8a:	481a      	ldr	r0, [pc, #104]	; (21ff4 <pend+0x90>)
   21f8c:	228e      	movs	r2, #142	; 0x8e
   21f8e:	f002 f9fe 	bl	2438e <assert_print>
   21f92:	4817      	ldr	r0, [pc, #92]	; (21ff0 <pend+0x8c>)
   21f94:	218e      	movs	r1, #142	; 0x8e
   21f96:	f002 f9f3 	bl	24380 <assert_post_action>
	z_spin_lock_set_owner(l);
   21f9a:	4814      	ldr	r0, [pc, #80]	; (21fec <pend+0x88>)
   21f9c:	f7fe fbaa 	bl	206f4 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
   21fa0:	4620      	mov	r0, r4
   21fa2:	4641      	mov	r1, r8
   21fa4:	f7ff ffa2 	bl	21eec <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21fa8:	4810      	ldr	r0, [pc, #64]	; (21fec <pend+0x88>)
   21faa:	f7fe fb93 	bl	206d4 <z_spin_unlock_valid>
   21fae:	b940      	cbnz	r0, 21fc2 <pend+0x5e>
   21fb0:	490f      	ldr	r1, [pc, #60]	; (21ff0 <pend+0x8c>)
   21fb2:	4810      	ldr	r0, [pc, #64]	; (21ff4 <pend+0x90>)
   21fb4:	22b9      	movs	r2, #185	; 0xb9
   21fb6:	f002 f9ea 	bl	2438e <assert_print>
   21fba:	480d      	ldr	r0, [pc, #52]	; (21ff0 <pend+0x8c>)
   21fbc:	21b9      	movs	r1, #185	; 0xb9
   21fbe:	f002 f9df 	bl	24380 <assert_post_action>
	__asm__ volatile(
   21fc2:	f387 8811 	msr	BASEPRI, r7
   21fc6:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   21fca:	f1b5 3fff 	cmp.w	r5, #4294967295
   21fce:	bf08      	it	eq
   21fd0:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   21fd4:	d008      	beq.n	21fe8 <pend+0x84>
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   21fd6:	4632      	mov	r2, r6
   21fd8:	462b      	mov	r3, r5
   21fda:	f104 0018 	add.w	r0, r4, #24
   21fde:	4906      	ldr	r1, [pc, #24]	; (21ff8 <pend+0x94>)
}
   21fe0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   21fe4:	f000 bc7e 	b.w	228e4 <z_add_timeout>
   21fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21fec:	200022c4 	.word	0x200022c4
   21ff0:	00028a23 	.word	0x00028a23
   21ff4:	000289af 	.word	0x000289af
   21ff8:	00021e25 	.word	0x00021e25

00021ffc <z_pend_curr>:
{
   21ffc:	b538      	push	{r3, r4, r5, lr}
	pending_current = _current;
   21ffe:	4b0e      	ldr	r3, [pc, #56]	; (22038 <z_pend_curr+0x3c>)
{
   22000:	4605      	mov	r5, r0
	pending_current = _current;
   22002:	6898      	ldr	r0, [r3, #8]
   22004:	4b0d      	ldr	r3, [pc, #52]	; (2203c <z_pend_curr+0x40>)
{
   22006:	460c      	mov	r4, r1
	pending_current = _current;
   22008:	6018      	str	r0, [r3, #0]
{
   2200a:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   2200c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   22010:	f7ff ffa8 	bl	21f64 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22014:	4628      	mov	r0, r5
   22016:	f7fe fb5d 	bl	206d4 <z_spin_unlock_valid>
   2201a:	b940      	cbnz	r0, 2202e <z_pend_curr+0x32>
   2201c:	4908      	ldr	r1, [pc, #32]	; (22040 <z_pend_curr+0x44>)
   2201e:	4809      	ldr	r0, [pc, #36]	; (22044 <z_pend_curr+0x48>)
   22020:	22d0      	movs	r2, #208	; 0xd0
   22022:	f002 f9b4 	bl	2438e <assert_print>
   22026:	4806      	ldr	r0, [pc, #24]	; (22040 <z_pend_curr+0x44>)
   22028:	21d0      	movs	r1, #208	; 0xd0
   2202a:	f002 f9a9 	bl	24380 <assert_post_action>
   2202e:	4620      	mov	r0, r4
}
   22030:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   22034:	f7f2 b95c 	b.w	142f0 <arch_swap>
   22038:	20002284 	.word	0x20002284
   2203c:	200022c0 	.word	0x200022c0
   22040:	00028a23 	.word	0x00028a23
   22044:	000289af 	.word	0x000289af

00022048 <z_set_prio>:
{
   22048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2204a:	4604      	mov	r4, r0
   2204c:	460d      	mov	r5, r1
	__asm__ volatile(
   2204e:	f04f 0340 	mov.w	r3, #64	; 0x40
   22052:	f3ef 8611 	mrs	r6, BASEPRI
   22056:	f383 8812 	msr	BASEPRI_MAX, r3
   2205a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2205e:	4834      	ldr	r0, [pc, #208]	; (22130 <z_set_prio+0xe8>)
   22060:	f7fe fb2a 	bl	206b8 <z_spin_lock_valid>
   22064:	b940      	cbnz	r0, 22078 <z_set_prio+0x30>
   22066:	4933      	ldr	r1, [pc, #204]	; (22134 <z_set_prio+0xec>)
   22068:	4833      	ldr	r0, [pc, #204]	; (22138 <z_set_prio+0xf0>)
   2206a:	228e      	movs	r2, #142	; 0x8e
   2206c:	f002 f98f 	bl	2438e <assert_print>
   22070:	4830      	ldr	r0, [pc, #192]	; (22134 <z_set_prio+0xec>)
   22072:	218e      	movs	r1, #142	; 0x8e
   22074:	f002 f984 	bl	24380 <assert_post_action>
	z_spin_lock_set_owner(l);
   22078:	482d      	ldr	r0, [pc, #180]	; (22130 <z_set_prio+0xe8>)
   2207a:	f7fe fb3b 	bl	206f4 <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
   2207e:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   22080:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   22082:	b26d      	sxtb	r5, r5
   22084:	d151      	bne.n	2212a <z_set_prio+0xe2>
		if (need_sched) {
   22086:	69a2      	ldr	r2, [r4, #24]
   22088:	2a00      	cmp	r2, #0
   2208a:	d14e      	bne.n	2212a <z_set_prio+0xe2>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2208c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   22090:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   22092:	482a      	ldr	r0, [pc, #168]	; (2213c <z_set_prio+0xf4>)
   22094:	4621      	mov	r1, r4
   22096:	f7ff fca7 	bl	219e8 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   2209a:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   2209c:	73a5      	strb	r5, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   2209e:	f063 037f 	orn	r3, r3, #127	; 0x7f
   220a2:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   220a4:	4b26      	ldr	r3, [pc, #152]	; (22140 <z_set_prio+0xf8>)
   220a6:	429c      	cmp	r4, r3
   220a8:	d108      	bne.n	220bc <z_set_prio+0x74>
   220aa:	4926      	ldr	r1, [pc, #152]	; (22144 <z_set_prio+0xfc>)
   220ac:	4822      	ldr	r0, [pc, #136]	; (22138 <z_set_prio+0xf0>)
   220ae:	22ba      	movs	r2, #186	; 0xba
   220b0:	f002 f96d 	bl	2438e <assert_print>
   220b4:	4823      	ldr	r0, [pc, #140]	; (22144 <z_set_prio+0xfc>)
   220b6:	21ba      	movs	r1, #186	; 0xba
   220b8:	f002 f962 	bl	24380 <assert_post_action>
	return list->head == list;
   220bc:	4a22      	ldr	r2, [pc, #136]	; (22148 <z_set_prio+0x100>)
	return (node == list->tail) ? NULL : node->next;
   220be:	e9d2 3008 	ldrd	r3, r0, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   220c2:	f102 0520 	add.w	r5, r2, #32
   220c6:	42ab      	cmp	r3, r5
   220c8:	d02a      	beq.n	22120 <z_set_prio+0xd8>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   220ca:	b34b      	cbz	r3, 22120 <z_set_prio+0xd8>
	int32_t b1 = thread_1->base.prio;
   220cc:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   220d0:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   220d4:	428f      	cmp	r7, r1
   220d6:	d01e      	beq.n	22116 <z_set_prio+0xce>
		return b2 - b1;
   220d8:	1bc9      	subs	r1, r1, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
   220da:	2900      	cmp	r1, #0
   220dc:	dd1b      	ble.n	22116 <z_set_prio+0xce>
	sys_dnode_t *const prev = successor->prev;
   220de:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   220e0:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   220e4:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   220e6:	605c      	str	r4, [r3, #4]
			update_cache(1);
   220e8:	2001      	movs	r0, #1
   220ea:	f7ff fcf3 	bl	21ad4 <update_cache>
   220ee:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   220f0:	480f      	ldr	r0, [pc, #60]	; (22130 <z_set_prio+0xe8>)
   220f2:	f7fe faef 	bl	206d4 <z_spin_unlock_valid>
   220f6:	b940      	cbnz	r0, 2210a <z_set_prio+0xc2>
   220f8:	490e      	ldr	r1, [pc, #56]	; (22134 <z_set_prio+0xec>)
   220fa:	480f      	ldr	r0, [pc, #60]	; (22138 <z_set_prio+0xf0>)
   220fc:	22b9      	movs	r2, #185	; 0xb9
   220fe:	f002 f946 	bl	2438e <assert_print>
   22102:	480c      	ldr	r0, [pc, #48]	; (22134 <z_set_prio+0xec>)
   22104:	21b9      	movs	r1, #185	; 0xb9
   22106:	f002 f93b 	bl	24380 <assert_post_action>
	__asm__ volatile(
   2210a:	f386 8811 	msr	BASEPRI, r6
   2210e:	f3bf 8f6f 	isb	sy
}
   22112:	4620      	mov	r0, r4
   22114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   22116:	4283      	cmp	r3, r0
   22118:	d002      	beq.n	22120 <z_set_prio+0xd8>
   2211a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2211c:	2b00      	cmp	r3, #0
   2211e:	d1d7      	bne.n	220d0 <z_set_prio+0x88>
	node->prev = tail;
   22120:	e9c4 5000 	strd	r5, r0, [r4]
	tail->next = node;
   22124:	6004      	str	r4, [r0, #0]
	list->tail = node;
   22126:	6254      	str	r4, [r2, #36]	; 0x24
}
   22128:	e7de      	b.n	220e8 <z_set_prio+0xa0>
			thread->base.prio = prio;
   2212a:	73a5      	strb	r5, [r4, #14]
   2212c:	2400      	movs	r4, #0
   2212e:	e7df      	b.n	220f0 <z_set_prio+0xa8>
   22130:	200022c4 	.word	0x200022c4
   22134:	00028a23 	.word	0x00028a23
   22138:	000289af 	.word	0x000289af
   2213c:	200022a4 	.word	0x200022a4
   22140:	20001c18 	.word	0x20001c18
   22144:	0002b6d0 	.word	0x0002b6d0
   22148:	20002284 	.word	0x20002284

0002214c <z_impl_k_thread_suspend>:
{
   2214c:	b570      	push	{r4, r5, r6, lr}
   2214e:	4604      	mov	r4, r0
	return z_abort_timeout(&thread->base.timeout);
   22150:	3018      	adds	r0, #24
   22152:	f000 fc75 	bl	22a40 <z_abort_timeout>
	__asm__ volatile(
   22156:	f04f 0340 	mov.w	r3, #64	; 0x40
   2215a:	f3ef 8611 	mrs	r6, BASEPRI
   2215e:	f383 8812 	msr	BASEPRI_MAX, r3
   22162:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22166:	4820      	ldr	r0, [pc, #128]	; (221e8 <z_impl_k_thread_suspend+0x9c>)
   22168:	f7fe faa6 	bl	206b8 <z_spin_lock_valid>
   2216c:	b940      	cbnz	r0, 22180 <z_impl_k_thread_suspend+0x34>
   2216e:	491f      	ldr	r1, [pc, #124]	; (221ec <z_impl_k_thread_suspend+0xa0>)
   22170:	481f      	ldr	r0, [pc, #124]	; (221f0 <z_impl_k_thread_suspend+0xa4>)
   22172:	228e      	movs	r2, #142	; 0x8e
   22174:	f002 f90b 	bl	2438e <assert_print>
   22178:	481c      	ldr	r0, [pc, #112]	; (221ec <z_impl_k_thread_suspend+0xa0>)
   2217a:	218e      	movs	r1, #142	; 0x8e
   2217c:	f002 f900 	bl	24380 <assert_post_action>
	z_spin_lock_set_owner(l);
   22180:	4819      	ldr	r0, [pc, #100]	; (221e8 <z_impl_k_thread_suspend+0x9c>)
   22182:	f7fe fab7 	bl	206f4 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   22186:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   2218a:	7b63      	ldrb	r3, [r4, #13]
   2218c:	2a00      	cmp	r2, #0
   2218e:	da06      	bge.n	2219e <z_impl_k_thread_suspend+0x52>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   22190:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   22194:	4817      	ldr	r0, [pc, #92]	; (221f4 <z_impl_k_thread_suspend+0xa8>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   22196:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   22198:	4621      	mov	r1, r4
   2219a:	f7ff fc25 	bl	219e8 <z_priq_dumb_remove>
		update_cache(thread == _current);
   2219e:	4d16      	ldr	r5, [pc, #88]	; (221f8 <z_impl_k_thread_suspend+0xac>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   221a0:	7b63      	ldrb	r3, [r4, #13]
   221a2:	68a8      	ldr	r0, [r5, #8]
   221a4:	f043 0310 	orr.w	r3, r3, #16
   221a8:	7363      	strb	r3, [r4, #13]
   221aa:	1b03      	subs	r3, r0, r4
   221ac:	4258      	negs	r0, r3
   221ae:	4158      	adcs	r0, r3
   221b0:	f7ff fc90 	bl	21ad4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   221b4:	480c      	ldr	r0, [pc, #48]	; (221e8 <z_impl_k_thread_suspend+0x9c>)
   221b6:	f7fe fa8d 	bl	206d4 <z_spin_unlock_valid>
   221ba:	b940      	cbnz	r0, 221ce <z_impl_k_thread_suspend+0x82>
   221bc:	490b      	ldr	r1, [pc, #44]	; (221ec <z_impl_k_thread_suspend+0xa0>)
   221be:	480c      	ldr	r0, [pc, #48]	; (221f0 <z_impl_k_thread_suspend+0xa4>)
   221c0:	22b9      	movs	r2, #185	; 0xb9
   221c2:	f002 f8e4 	bl	2438e <assert_print>
   221c6:	4809      	ldr	r0, [pc, #36]	; (221ec <z_impl_k_thread_suspend+0xa0>)
   221c8:	21b9      	movs	r1, #185	; 0xb9
   221ca:	f002 f8d9 	bl	24380 <assert_post_action>
	__asm__ volatile(
   221ce:	f386 8811 	msr	BASEPRI, r6
   221d2:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   221d6:	68ab      	ldr	r3, [r5, #8]
   221d8:	42a3      	cmp	r3, r4
   221da:	d103      	bne.n	221e4 <z_impl_k_thread_suspend+0x98>
}
   221dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   221e0:	f005 bb13 	b.w	2780a <z_reschedule_unlocked>
}
   221e4:	bd70      	pop	{r4, r5, r6, pc}
   221e6:	bf00      	nop
   221e8:	200022c4 	.word	0x200022c4
   221ec:	00028a23 	.word	0x00028a23
   221f0:	000289af 	.word	0x000289af
   221f4:	200022a4 	.word	0x200022a4
   221f8:	20002284 	.word	0x20002284

000221fc <k_sched_unlock>:
{
   221fc:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   221fe:	f04f 0340 	mov.w	r3, #64	; 0x40
   22202:	f3ef 8511 	mrs	r5, BASEPRI
   22206:	f383 8812 	msr	BASEPRI_MAX, r3
   2220a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2220e:	4824      	ldr	r0, [pc, #144]	; (222a0 <k_sched_unlock+0xa4>)
   22210:	f7fe fa52 	bl	206b8 <z_spin_lock_valid>
   22214:	b940      	cbnz	r0, 22228 <k_sched_unlock+0x2c>
   22216:	4923      	ldr	r1, [pc, #140]	; (222a4 <k_sched_unlock+0xa8>)
   22218:	4823      	ldr	r0, [pc, #140]	; (222a8 <k_sched_unlock+0xac>)
   2221a:	228e      	movs	r2, #142	; 0x8e
   2221c:	f002 f8b7 	bl	2438e <assert_print>
   22220:	4820      	ldr	r0, [pc, #128]	; (222a4 <k_sched_unlock+0xa8>)
   22222:	218e      	movs	r1, #142	; 0x8e
   22224:	f002 f8ac 	bl	24380 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
   22228:	4c20      	ldr	r4, [pc, #128]	; (222ac <k_sched_unlock+0xb0>)
	z_spin_lock_set_owner(l);
   2222a:	481d      	ldr	r0, [pc, #116]	; (222a0 <k_sched_unlock+0xa4>)
   2222c:	f7fe fa62 	bl	206f4 <z_spin_lock_set_owner>
   22230:	68a3      	ldr	r3, [r4, #8]
   22232:	7bdb      	ldrb	r3, [r3, #15]
   22234:	b953      	cbnz	r3, 2224c <k_sched_unlock+0x50>
   22236:	491e      	ldr	r1, [pc, #120]	; (222b0 <k_sched_unlock+0xb4>)
   22238:	481b      	ldr	r0, [pc, #108]	; (222a8 <k_sched_unlock+0xac>)
   2223a:	f240 32bb 	movw	r2, #955	; 0x3bb
   2223e:	f002 f8a6 	bl	2438e <assert_print>
   22242:	481b      	ldr	r0, [pc, #108]	; (222b0 <k_sched_unlock+0xb4>)
   22244:	f240 31bb 	movw	r1, #955	; 0x3bb
   22248:	f002 f89a 	bl	24380 <assert_post_action>
   2224c:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   22250:	b153      	cbz	r3, 22268 <k_sched_unlock+0x6c>
   22252:	4917      	ldr	r1, [pc, #92]	; (222b0 <k_sched_unlock+0xb4>)
   22254:	4814      	ldr	r0, [pc, #80]	; (222a8 <k_sched_unlock+0xac>)
   22256:	f44f 726f 	mov.w	r2, #956	; 0x3bc
   2225a:	f002 f898 	bl	2438e <assert_print>
   2225e:	4814      	ldr	r0, [pc, #80]	; (222b0 <k_sched_unlock+0xb4>)
   22260:	f44f 716f 	mov.w	r1, #956	; 0x3bc
   22264:	f002 f88c 	bl	24380 <assert_post_action>
		++_current->base.sched_locked;
   22268:	68a2      	ldr	r2, [r4, #8]
   2226a:	7bd3      	ldrb	r3, [r2, #15]
   2226c:	3301      	adds	r3, #1
		update_cache(0);
   2226e:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   22270:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   22272:	f7ff fc2f 	bl	21ad4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22276:	480a      	ldr	r0, [pc, #40]	; (222a0 <k_sched_unlock+0xa4>)
   22278:	f7fe fa2c 	bl	206d4 <z_spin_unlock_valid>
   2227c:	b940      	cbnz	r0, 22290 <k_sched_unlock+0x94>
   2227e:	4909      	ldr	r1, [pc, #36]	; (222a4 <k_sched_unlock+0xa8>)
   22280:	4809      	ldr	r0, [pc, #36]	; (222a8 <k_sched_unlock+0xac>)
   22282:	22b9      	movs	r2, #185	; 0xb9
   22284:	f002 f883 	bl	2438e <assert_print>
   22288:	4806      	ldr	r0, [pc, #24]	; (222a4 <k_sched_unlock+0xa8>)
   2228a:	21b9      	movs	r1, #185	; 0xb9
   2228c:	f002 f878 	bl	24380 <assert_post_action>
	__asm__ volatile(
   22290:	f385 8811 	msr	BASEPRI, r5
   22294:	f3bf 8f6f 	isb	sy
}
   22298:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   2229c:	f005 bab5 	b.w	2780a <z_reschedule_unlocked>
   222a0:	200022c4 	.word	0x200022c4
   222a4:	00028a23 	.word	0x00028a23
   222a8:	000289af 	.word	0x000289af
   222ac:	20002284 	.word	0x20002284
   222b0:	0002b6d0 	.word	0x0002b6d0

000222b4 <z_unpend1_no_timeout>:
{
   222b4:	b538      	push	{r3, r4, r5, lr}
   222b6:	4604      	mov	r4, r0
	__asm__ volatile(
   222b8:	f04f 0340 	mov.w	r3, #64	; 0x40
   222bc:	f3ef 8511 	mrs	r5, BASEPRI
   222c0:	f383 8812 	msr	BASEPRI_MAX, r3
   222c4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   222c8:	4814      	ldr	r0, [pc, #80]	; (2231c <z_unpend1_no_timeout+0x68>)
   222ca:	f7fe f9f5 	bl	206b8 <z_spin_lock_valid>
   222ce:	b940      	cbnz	r0, 222e2 <z_unpend1_no_timeout+0x2e>
   222d0:	4913      	ldr	r1, [pc, #76]	; (22320 <z_unpend1_no_timeout+0x6c>)
   222d2:	4814      	ldr	r0, [pc, #80]	; (22324 <z_unpend1_no_timeout+0x70>)
   222d4:	228e      	movs	r2, #142	; 0x8e
   222d6:	f002 f85a 	bl	2438e <assert_print>
   222da:	4811      	ldr	r0, [pc, #68]	; (22320 <z_unpend1_no_timeout+0x6c>)
   222dc:	218e      	movs	r1, #142	; 0x8e
   222de:	f002 f84f 	bl	24380 <assert_post_action>
	z_spin_lock_set_owner(l);
   222e2:	480e      	ldr	r0, [pc, #56]	; (2231c <z_unpend1_no_timeout+0x68>)
   222e4:	f7fe fa06 	bl	206f4 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
   222e8:	4620      	mov	r0, r4
   222ea:	f005 fa98 	bl	2781e <z_priq_dumb_best>
		if (thread != NULL) {
   222ee:	4604      	mov	r4, r0
   222f0:	b108      	cbz	r0, 222f6 <z_unpend1_no_timeout+0x42>
			unpend_thread_no_timeout(thread);
   222f2:	f7ff fb97 	bl	21a24 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   222f6:	4809      	ldr	r0, [pc, #36]	; (2231c <z_unpend1_no_timeout+0x68>)
   222f8:	f7fe f9ec 	bl	206d4 <z_spin_unlock_valid>
   222fc:	b940      	cbnz	r0, 22310 <z_unpend1_no_timeout+0x5c>
   222fe:	4908      	ldr	r1, [pc, #32]	; (22320 <z_unpend1_no_timeout+0x6c>)
   22300:	4808      	ldr	r0, [pc, #32]	; (22324 <z_unpend1_no_timeout+0x70>)
   22302:	22b9      	movs	r2, #185	; 0xb9
   22304:	f002 f843 	bl	2438e <assert_print>
   22308:	4805      	ldr	r0, [pc, #20]	; (22320 <z_unpend1_no_timeout+0x6c>)
   2230a:	21b9      	movs	r1, #185	; 0xb9
   2230c:	f002 f838 	bl	24380 <assert_post_action>
	__asm__ volatile(
   22310:	f385 8811 	msr	BASEPRI, r5
   22314:	f3bf 8f6f 	isb	sy
}
   22318:	4620      	mov	r0, r4
   2231a:	bd38      	pop	{r3, r4, r5, pc}
   2231c:	200022c4 	.word	0x200022c4
   22320:	00028a23 	.word	0x00028a23
   22324:	000289af 	.word	0x000289af

00022328 <z_unpend_first_thread>:
{
   22328:	b538      	push	{r3, r4, r5, lr}
   2232a:	4604      	mov	r4, r0
	__asm__ volatile(
   2232c:	f04f 0340 	mov.w	r3, #64	; 0x40
   22330:	f3ef 8511 	mrs	r5, BASEPRI
   22334:	f383 8812 	msr	BASEPRI_MAX, r3
   22338:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2233c:	4816      	ldr	r0, [pc, #88]	; (22398 <z_unpend_first_thread+0x70>)
   2233e:	f7fe f9bb 	bl	206b8 <z_spin_lock_valid>
   22342:	b940      	cbnz	r0, 22356 <z_unpend_first_thread+0x2e>
   22344:	4915      	ldr	r1, [pc, #84]	; (2239c <z_unpend_first_thread+0x74>)
   22346:	4816      	ldr	r0, [pc, #88]	; (223a0 <z_unpend_first_thread+0x78>)
   22348:	228e      	movs	r2, #142	; 0x8e
   2234a:	f002 f820 	bl	2438e <assert_print>
   2234e:	4813      	ldr	r0, [pc, #76]	; (2239c <z_unpend_first_thread+0x74>)
   22350:	218e      	movs	r1, #142	; 0x8e
   22352:	f002 f815 	bl	24380 <assert_post_action>
	z_spin_lock_set_owner(l);
   22356:	4810      	ldr	r0, [pc, #64]	; (22398 <z_unpend_first_thread+0x70>)
   22358:	f7fe f9cc 	bl	206f4 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
   2235c:	4620      	mov	r0, r4
   2235e:	f005 fa5e 	bl	2781e <z_priq_dumb_best>
		if (thread != NULL) {
   22362:	4604      	mov	r4, r0
   22364:	b128      	cbz	r0, 22372 <z_unpend_first_thread+0x4a>
			unpend_thread_no_timeout(thread);
   22366:	f7ff fb5d 	bl	21a24 <unpend_thread_no_timeout>
   2236a:	f104 0018 	add.w	r0, r4, #24
   2236e:	f000 fb67 	bl	22a40 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22372:	4809      	ldr	r0, [pc, #36]	; (22398 <z_unpend_first_thread+0x70>)
   22374:	f7fe f9ae 	bl	206d4 <z_spin_unlock_valid>
   22378:	b940      	cbnz	r0, 2238c <z_unpend_first_thread+0x64>
   2237a:	4908      	ldr	r1, [pc, #32]	; (2239c <z_unpend_first_thread+0x74>)
   2237c:	4808      	ldr	r0, [pc, #32]	; (223a0 <z_unpend_first_thread+0x78>)
   2237e:	22b9      	movs	r2, #185	; 0xb9
   22380:	f002 f805 	bl	2438e <assert_print>
   22384:	4805      	ldr	r0, [pc, #20]	; (2239c <z_unpend_first_thread+0x74>)
   22386:	21b9      	movs	r1, #185	; 0xb9
   22388:	f001 fffa 	bl	24380 <assert_post_action>
	__asm__ volatile(
   2238c:	f385 8811 	msr	BASEPRI, r5
   22390:	f3bf 8f6f 	isb	sy
}
   22394:	4620      	mov	r0, r4
   22396:	bd38      	pop	{r3, r4, r5, pc}
   22398:	200022c4 	.word	0x200022c4
   2239c:	00028a23 	.word	0x00028a23
   223a0:	000289af 	.word	0x000289af

000223a4 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   223a4:	4b04      	ldr	r3, [pc, #16]	; (223b8 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   223a6:	2100      	movs	r1, #0
   223a8:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   223ac:	e9c3 2208 	strd	r2, r2, [r3, #32]
   223b0:	4608      	mov	r0, r1
   223b2:	f7ff ba05 	b.w	217c0 <k_sched_time_slice_set>
   223b6:	bf00      	nop
   223b8:	20002284 	.word	0x20002284

000223bc <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   223bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   223be:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   223c2:	b153      	cbz	r3, 223da <z_impl_k_yield+0x1e>
   223c4:	4938      	ldr	r1, [pc, #224]	; (224a8 <z_impl_k_yield+0xec>)
   223c6:	4839      	ldr	r0, [pc, #228]	; (224ac <z_impl_k_yield+0xf0>)
   223c8:	f240 5232 	movw	r2, #1330	; 0x532
   223cc:	f001 ffdf 	bl	2438e <assert_print>
   223d0:	4835      	ldr	r0, [pc, #212]	; (224a8 <z_impl_k_yield+0xec>)
   223d2:	f240 5132 	movw	r1, #1330	; 0x532
   223d6:	f001 ffd3 	bl	24380 <assert_post_action>
	__asm__ volatile(
   223da:	f04f 0340 	mov.w	r3, #64	; 0x40
   223de:	f3ef 8611 	mrs	r6, BASEPRI
   223e2:	f383 8812 	msr	BASEPRI_MAX, r3
   223e6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   223ea:	4831      	ldr	r0, [pc, #196]	; (224b0 <z_impl_k_yield+0xf4>)
   223ec:	f7fe f964 	bl	206b8 <z_spin_lock_valid>
   223f0:	b940      	cbnz	r0, 22404 <z_impl_k_yield+0x48>
   223f2:	4930      	ldr	r1, [pc, #192]	; (224b4 <z_impl_k_yield+0xf8>)
   223f4:	482d      	ldr	r0, [pc, #180]	; (224ac <z_impl_k_yield+0xf0>)
   223f6:	228e      	movs	r2, #142	; 0x8e
   223f8:	f001 ffc9 	bl	2438e <assert_print>
   223fc:	482d      	ldr	r0, [pc, #180]	; (224b4 <z_impl_k_yield+0xf8>)
   223fe:	218e      	movs	r1, #142	; 0x8e
   22400:	f001 ffbe 	bl	24380 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   22404:	4d2c      	ldr	r5, [pc, #176]	; (224b8 <z_impl_k_yield+0xfc>)
	z_spin_lock_set_owner(l);
   22406:	482a      	ldr	r0, [pc, #168]	; (224b0 <z_impl_k_yield+0xf4>)
   22408:	f7fe f974 	bl	206f4 <z_spin_lock_set_owner>
   2240c:	68a9      	ldr	r1, [r5, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2240e:	7b4b      	ldrb	r3, [r1, #13]
   22410:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   22414:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   22416:	f105 0020 	add.w	r0, r5, #32
   2241a:	f7ff fae5 	bl	219e8 <z_priq_dumb_remove>
	}
	queue_thread(_current);
   2241e:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   22420:	7b63      	ldrb	r3, [r4, #13]
   22422:	f063 037f 	orn	r3, r3, #127	; 0x7f
   22426:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   22428:	4b24      	ldr	r3, [pc, #144]	; (224bc <z_impl_k_yield+0x100>)
   2242a:	429c      	cmp	r4, r3
   2242c:	d108      	bne.n	22440 <z_impl_k_yield+0x84>
   2242e:	491e      	ldr	r1, [pc, #120]	; (224a8 <z_impl_k_yield+0xec>)
   22430:	481e      	ldr	r0, [pc, #120]	; (224ac <z_impl_k_yield+0xf0>)
   22432:	22ba      	movs	r2, #186	; 0xba
   22434:	f001 ffab 	bl	2438e <assert_print>
   22438:	481b      	ldr	r0, [pc, #108]	; (224a8 <z_impl_k_yield+0xec>)
   2243a:	21ba      	movs	r1, #186	; 0xba
   2243c:	f001 ffa0 	bl	24380 <assert_post_action>
	return (node == list->tail) ? NULL : node->next;
   22440:	e9d5 3108 	ldrd	r3, r1, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22444:	481e      	ldr	r0, [pc, #120]	; (224c0 <z_impl_k_yield+0x104>)
   22446:	4283      	cmp	r3, r0
   22448:	d028      	beq.n	2249c <z_impl_k_yield+0xe0>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2244a:	b33b      	cbz	r3, 2249c <z_impl_k_yield+0xe0>
	int32_t b1 = thread_1->base.prio;
   2244c:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   22450:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   22454:	4297      	cmp	r7, r2
   22456:	d01c      	beq.n	22492 <z_impl_k_yield+0xd6>
		return b2 - b1;
   22458:	1bd2      	subs	r2, r2, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
   2245a:	2a00      	cmp	r2, #0
   2245c:	dd19      	ble.n	22492 <z_impl_k_yield+0xd6>
	sys_dnode_t *const prev = successor->prev;
   2245e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   22460:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   22464:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   22466:	605c      	str	r4, [r3, #4]
	update_cache(1);
   22468:	2001      	movs	r0, #1
   2246a:	f7ff fb33 	bl	21ad4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2246e:	4810      	ldr	r0, [pc, #64]	; (224b0 <z_impl_k_yield+0xf4>)
   22470:	f7fe f930 	bl	206d4 <z_spin_unlock_valid>
   22474:	b940      	cbnz	r0, 22488 <z_impl_k_yield+0xcc>
   22476:	490f      	ldr	r1, [pc, #60]	; (224b4 <z_impl_k_yield+0xf8>)
   22478:	480c      	ldr	r0, [pc, #48]	; (224ac <z_impl_k_yield+0xf0>)
   2247a:	22d0      	movs	r2, #208	; 0xd0
   2247c:	f001 ff87 	bl	2438e <assert_print>
   22480:	480c      	ldr	r0, [pc, #48]	; (224b4 <z_impl_k_yield+0xf8>)
   22482:	21d0      	movs	r1, #208	; 0xd0
   22484:	f001 ff7c 	bl	24380 <assert_post_action>
   22488:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
   2248a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2248e:	f7f1 bf2f 	b.w	142f0 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   22492:	428b      	cmp	r3, r1
   22494:	d002      	beq.n	2249c <z_impl_k_yield+0xe0>
   22496:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22498:	2b00      	cmp	r3, #0
   2249a:	d1d9      	bne.n	22450 <z_impl_k_yield+0x94>
	node->prev = tail;
   2249c:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
   224a0:	600c      	str	r4, [r1, #0]
	list->tail = node;
   224a2:	626c      	str	r4, [r5, #36]	; 0x24
}
   224a4:	e7e0      	b.n	22468 <z_impl_k_yield+0xac>
   224a6:	bf00      	nop
   224a8:	0002b6d0 	.word	0x0002b6d0
   224ac:	000289af 	.word	0x000289af
   224b0:	200022c4 	.word	0x200022c4
   224b4:	00028a23 	.word	0x00028a23
   224b8:	20002284 	.word	0x20002284
   224bc:	20001c18 	.word	0x20001c18
   224c0:	200022a4 	.word	0x200022a4

000224c4 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   224c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   224c8:	4605      	mov	r5, r0
   224ca:	460e      	mov	r6, r1
   224cc:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   224d0:	b153      	cbz	r3, 224e8 <z_tick_sleep+0x24>
   224d2:	493a      	ldr	r1, [pc, #232]	; (225bc <z_tick_sleep+0xf8>)
   224d4:	483a      	ldr	r0, [pc, #232]	; (225c0 <z_tick_sleep+0xfc>)
   224d6:	f240 524e 	movw	r2, #1358	; 0x54e
   224da:	f001 ff58 	bl	2438e <assert_print>
   224de:	4837      	ldr	r0, [pc, #220]	; (225bc <z_tick_sleep+0xf8>)
   224e0:	f240 514e 	movw	r1, #1358	; 0x54e
   224e4:	f001 ff4c 	bl	24380 <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   224e8:	ea55 0306 	orrs.w	r3, r5, r6
   224ec:	d103      	bne.n	224f6 <z_tick_sleep+0x32>
	z_impl_k_yield();
   224ee:	f7ff ff65 	bl	223bc <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
   224f2:	2000      	movs	r0, #0
   224f4:	e05f      	b.n	225b6 <z_tick_sleep+0xf2>
	if (Z_TICK_ABS(ticks) <= 0) {
   224f6:	f06f 0401 	mvn.w	r4, #1
   224fa:	1b64      	subs	r4, r4, r5
   224fc:	f04f 33ff 	mov.w	r3, #4294967295
   22500:	eb63 0306 	sbc.w	r3, r3, r6
   22504:	2c01      	cmp	r4, #1
   22506:	f173 0300 	sbcs.w	r3, r3, #0
   2250a:	da02      	bge.n	22512 <z_tick_sleep+0x4e>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   2250c:	f005 f99d 	bl	2784a <sys_clock_tick_get_32>
   22510:	1944      	adds	r4, r0, r5
   22512:	f04f 0340 	mov.w	r3, #64	; 0x40
   22516:	f3ef 8811 	mrs	r8, BASEPRI
   2251a:	f383 8812 	msr	BASEPRI_MAX, r3
   2251e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22522:	4828      	ldr	r0, [pc, #160]	; (225c4 <z_tick_sleep+0x100>)
   22524:	f7fe f8c8 	bl	206b8 <z_spin_lock_valid>
   22528:	b940      	cbnz	r0, 2253c <z_tick_sleep+0x78>
   2252a:	4927      	ldr	r1, [pc, #156]	; (225c8 <z_tick_sleep+0x104>)
   2252c:	4824      	ldr	r0, [pc, #144]	; (225c0 <z_tick_sleep+0xfc>)
   2252e:	228e      	movs	r2, #142	; 0x8e
   22530:	f001 ff2d 	bl	2438e <assert_print>
   22534:	4824      	ldr	r0, [pc, #144]	; (225c8 <z_tick_sleep+0x104>)
   22536:	218e      	movs	r1, #142	; 0x8e
   22538:	f001 ff22 	bl	24380 <assert_post_action>
	pending_current = _current;
   2253c:	4f23      	ldr	r7, [pc, #140]	; (225cc <z_tick_sleep+0x108>)
	z_spin_lock_set_owner(l);
   2253e:	4821      	ldr	r0, [pc, #132]	; (225c4 <z_tick_sleep+0x100>)
   22540:	f7fe f8d8 	bl	206f4 <z_spin_lock_set_owner>
   22544:	4b22      	ldr	r3, [pc, #136]	; (225d0 <z_tick_sleep+0x10c>)
   22546:	68b8      	ldr	r0, [r7, #8]
   22548:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   2254a:	f7ff fcb3 	bl	21eb4 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   2254e:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   22550:	4920      	ldr	r1, [pc, #128]	; (225d4 <z_tick_sleep+0x110>)
   22552:	462a      	mov	r2, r5
   22554:	4633      	mov	r3, r6
   22556:	3018      	adds	r0, #24
   22558:	f000 f9c4 	bl	228e4 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   2255c:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2255e:	4819      	ldr	r0, [pc, #100]	; (225c4 <z_tick_sleep+0x100>)
   22560:	7b53      	ldrb	r3, [r2, #13]
   22562:	f043 0310 	orr.w	r3, r3, #16
   22566:	7353      	strb	r3, [r2, #13]
   22568:	f7fe f8b4 	bl	206d4 <z_spin_unlock_valid>
   2256c:	b940      	cbnz	r0, 22580 <z_tick_sleep+0xbc>
   2256e:	4916      	ldr	r1, [pc, #88]	; (225c8 <z_tick_sleep+0x104>)
   22570:	4813      	ldr	r0, [pc, #76]	; (225c0 <z_tick_sleep+0xfc>)
   22572:	22d0      	movs	r2, #208	; 0xd0
   22574:	f001 ff0b 	bl	2438e <assert_print>
   22578:	4813      	ldr	r0, [pc, #76]	; (225c8 <z_tick_sleep+0x104>)
   2257a:	21d0      	movs	r1, #208	; 0xd0
   2257c:	f001 ff00 	bl	24380 <assert_post_action>
   22580:	4640      	mov	r0, r8
   22582:	f7f1 feb5 	bl	142f0 <arch_swap>
	return (thread->base.thread_state & state) != 0U;
   22586:	68bb      	ldr	r3, [r7, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   22588:	7b5b      	ldrb	r3, [r3, #13]
   2258a:	06db      	lsls	r3, r3, #27
   2258c:	d50a      	bpl.n	225a4 <z_tick_sleep+0xe0>
   2258e:	490b      	ldr	r1, [pc, #44]	; (225bc <z_tick_sleep+0xf8>)
   22590:	480b      	ldr	r0, [pc, #44]	; (225c0 <z_tick_sleep+0xfc>)
   22592:	f240 526f 	movw	r2, #1391	; 0x56f
   22596:	f001 fefa 	bl	2438e <assert_print>
   2259a:	4808      	ldr	r0, [pc, #32]	; (225bc <z_tick_sleep+0xf8>)
   2259c:	f240 516f 	movw	r1, #1391	; 0x56f
   225a0:	f001 feee 	bl	24380 <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   225a4:	f005 f951 	bl	2784a <sys_clock_tick_get_32>
   225a8:	1a20      	subs	r0, r4, r0
   225aa:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   225ae:	2801      	cmp	r0, #1
   225b0:	f173 0300 	sbcs.w	r3, r3, #0
   225b4:	db9d      	blt.n	224f2 <z_tick_sleep+0x2e>
}
   225b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   225ba:	bf00      	nop
   225bc:	0002b6d0 	.word	0x0002b6d0
   225c0:	000289af 	.word	0x000289af
   225c4:	200022c4 	.word	0x200022c4
   225c8:	00028a23 	.word	0x00028a23
   225cc:	20002284 	.word	0x20002284
   225d0:	200022c0 	.word	0x200022c0
   225d4:	00021e25 	.word	0x00021e25

000225d8 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   225d8:	b538      	push	{r3, r4, r5, lr}
   225da:	4605      	mov	r5, r0
   225dc:	460c      	mov	r4, r1
   225de:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   225e2:	b153      	cbz	r3, 225fa <z_impl_k_sleep+0x22>
   225e4:	4911      	ldr	r1, [pc, #68]	; (2262c <z_impl_k_sleep+0x54>)
   225e6:	4812      	ldr	r0, [pc, #72]	; (22630 <z_impl_k_sleep+0x58>)
   225e8:	f240 527e 	movw	r2, #1406	; 0x57e
   225ec:	f001 fecf 	bl	2438e <assert_print>
   225f0:	480e      	ldr	r0, [pc, #56]	; (2262c <z_impl_k_sleep+0x54>)
   225f2:	f240 517e 	movw	r1, #1406	; 0x57e
   225f6:	f001 fec3 	bl	24380 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   225fa:	f1b4 3fff 	cmp.w	r4, #4294967295
   225fe:	bf08      	it	eq
   22600:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   22604:	d106      	bne.n	22614 <z_impl_k_sleep+0x3c>
		k_thread_suspend(_current);
   22606:	4b0b      	ldr	r3, [pc, #44]	; (22634 <z_impl_k_sleep+0x5c>)
   22608:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   2260a:	f7ff fd9f 	bl	2214c <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   2260e:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   22612:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
   22614:	4628      	mov	r0, r5
   22616:	4621      	mov	r1, r4
   22618:	f7ff ff54 	bl	224c4 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   2261c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   22620:	fb80 0303 	smull	r0, r3, r0, r3
   22624:	0bc0      	lsrs	r0, r0, #15
   22626:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   2262a:	e7f2      	b.n	22612 <z_impl_k_sleep+0x3a>
   2262c:	0002b6d0 	.word	0x0002b6d0
   22630:	000289af 	.word	0x000289af
   22634:	20002284 	.word	0x20002284

00022638 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   22638:	4b01      	ldr	r3, [pc, #4]	; (22640 <z_impl_z_current_get+0x8>)
   2263a:	6898      	ldr	r0, [r3, #8]
   2263c:	4770      	bx	lr
   2263e:	bf00      	nop
   22640:	20002284 	.word	0x20002284

00022644 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   22644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22648:	4604      	mov	r4, r0
   2264a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2264e:	f3ef 8611 	mrs	r6, BASEPRI
   22652:	f383 8812 	msr	BASEPRI_MAX, r3
   22656:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2265a:	483e      	ldr	r0, [pc, #248]	; (22754 <z_thread_abort+0x110>)
   2265c:	f7fe f82c 	bl	206b8 <z_spin_lock_valid>
   22660:	b940      	cbnz	r0, 22674 <z_thread_abort+0x30>
   22662:	493d      	ldr	r1, [pc, #244]	; (22758 <z_thread_abort+0x114>)
   22664:	483d      	ldr	r0, [pc, #244]	; (2275c <z_thread_abort+0x118>)
   22666:	228e      	movs	r2, #142	; 0x8e
   22668:	f001 fe91 	bl	2438e <assert_print>
   2266c:	483a      	ldr	r0, [pc, #232]	; (22758 <z_thread_abort+0x114>)
   2266e:	218e      	movs	r1, #142	; 0x8e
   22670:	f001 fe86 	bl	24380 <assert_post_action>
	z_spin_lock_set_owner(l);
   22674:	4837      	ldr	r0, [pc, #220]	; (22754 <z_thread_abort+0x110>)
   22676:	f7fe f83d 	bl	206f4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   2267a:	7b63      	ldrb	r3, [r4, #13]
   2267c:	071a      	lsls	r2, r3, #28
   2267e:	d512      	bpl.n	226a6 <z_thread_abort+0x62>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22680:	4834      	ldr	r0, [pc, #208]	; (22754 <z_thread_abort+0x110>)
   22682:	f7fe f827 	bl	206d4 <z_spin_unlock_valid>
   22686:	b940      	cbnz	r0, 2269a <z_thread_abort+0x56>
   22688:	4933      	ldr	r1, [pc, #204]	; (22758 <z_thread_abort+0x114>)
   2268a:	4834      	ldr	r0, [pc, #208]	; (2275c <z_thread_abort+0x118>)
   2268c:	22b9      	movs	r2, #185	; 0xb9
   2268e:	f001 fe7e 	bl	2438e <assert_print>
   22692:	4831      	ldr	r0, [pc, #196]	; (22758 <z_thread_abort+0x114>)
   22694:	21b9      	movs	r1, #185	; 0xb9
   22696:	f001 fe73 	bl	24380 <assert_post_action>
	__asm__ volatile(
   2269a:	f386 8811 	msr	BASEPRI, r6
   2269e:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   226a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   226a6:	f023 0220 	bic.w	r2, r3, #32
   226aa:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   226ae:	09d2      	lsrs	r2, r2, #7
   226b0:	d138      	bne.n	22724 <z_thread_abort+0xe0>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   226b2:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
   226b4:	68a3      	ldr	r3, [r4, #8]
   226b6:	b113      	cbz	r3, 226be <z_thread_abort+0x7a>
			unpend_thread_no_timeout(thread);
   226b8:	4620      	mov	r0, r4
   226ba:	f7ff f9b3 	bl	21a24 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   226be:	f104 0018 	add.w	r0, r4, #24
   226c2:	f000 f9bd 	bl	22a40 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   226c6:	f104 0758 	add.w	r7, r4, #88	; 0x58
   226ca:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   226ce:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   226d0:	42bd      	cmp	r5, r7
   226d2:	d000      	beq.n	226d6 <z_thread_abort+0x92>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   226d4:	bb85      	cbnz	r5, 22738 <z_thread_abort+0xf4>
		update_cache(1);
   226d6:	2001      	movs	r0, #1
   226d8:	f7ff f9fc 	bl	21ad4 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   226dc:	4b20      	ldr	r3, [pc, #128]	; (22760 <z_thread_abort+0x11c>)
   226de:	689b      	ldr	r3, [r3, #8]
   226e0:	42a3      	cmp	r3, r4
   226e2:	d1cd      	bne.n	22680 <z_thread_abort+0x3c>
   226e4:	f3ef 8305 	mrs	r3, IPSR
   226e8:	2b00      	cmp	r3, #0
   226ea:	d1c9      	bne.n	22680 <z_thread_abort+0x3c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   226ec:	4819      	ldr	r0, [pc, #100]	; (22754 <z_thread_abort+0x110>)
   226ee:	f7fd fff1 	bl	206d4 <z_spin_unlock_valid>
   226f2:	b940      	cbnz	r0, 22706 <z_thread_abort+0xc2>
   226f4:	4918      	ldr	r1, [pc, #96]	; (22758 <z_thread_abort+0x114>)
   226f6:	4819      	ldr	r0, [pc, #100]	; (2275c <z_thread_abort+0x118>)
   226f8:	22d0      	movs	r2, #208	; 0xd0
   226fa:	f001 fe48 	bl	2438e <assert_print>
   226fe:	4816      	ldr	r0, [pc, #88]	; (22758 <z_thread_abort+0x114>)
   22700:	21d0      	movs	r1, #208	; 0xd0
   22702:	f001 fe3d 	bl	24380 <assert_post_action>
   22706:	4630      	mov	r0, r6
   22708:	f7f1 fdf2 	bl	142f0 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   2270c:	4915      	ldr	r1, [pc, #84]	; (22764 <z_thread_abort+0x120>)
   2270e:	4813      	ldr	r0, [pc, #76]	; (2275c <z_thread_abort+0x118>)
   22710:	f240 62ac 	movw	r2, #1708	; 0x6ac
   22714:	f001 fe3b 	bl	2438e <assert_print>
   22718:	4812      	ldr	r0, [pc, #72]	; (22764 <z_thread_abort+0x120>)
   2271a:	f240 61ac 	movw	r1, #1708	; 0x6ac
   2271e:	f001 fe2f 	bl	24380 <assert_post_action>
   22722:	e7ad      	b.n	22680 <z_thread_abort+0x3c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   22724:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   22728:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
   2272c:	480e      	ldr	r0, [pc, #56]	; (22768 <z_thread_abort+0x124>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2272e:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   22730:	4621      	mov	r1, r4
   22732:	f7ff f959 	bl	219e8 <z_priq_dumb_remove>
}
   22736:	e7bd      	b.n	226b4 <z_thread_abort+0x70>
		unpend_thread_no_timeout(thread);
   22738:	4628      	mov	r0, r5
   2273a:	f7ff f973 	bl	21a24 <unpend_thread_no_timeout>
   2273e:	f105 0018 	add.w	r0, r5, #24
   22742:	f000 f97d 	bl	22a40 <z_abort_timeout>
   22746:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   2274a:	4628      	mov	r0, r5
   2274c:	f7ff faa8 	bl	21ca0 <ready_thread>
   22750:	e7bd      	b.n	226ce <z_thread_abort+0x8a>
   22752:	bf00      	nop
   22754:	200022c4 	.word	0x200022c4
   22758:	00028a23 	.word	0x00028a23
   2275c:	000289af 	.word	0x000289af
   22760:	20002284 	.word	0x20002284
   22764:	0002b6d0 	.word	0x0002b6d0
   22768:	200022a4 	.word	0x200022a4

0002276c <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
   2276c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2276e:	4604      	mov	r4, r0
   22770:	460e      	mov	r6, r1
   22772:	4615      	mov	r5, r2
	__asm__ volatile(
   22774:	f04f 0340 	mov.w	r3, #64	; 0x40
   22778:	f3ef 8711 	mrs	r7, BASEPRI
   2277c:	f383 8812 	msr	BASEPRI_MAX, r3
   22780:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22784:	4819      	ldr	r0, [pc, #100]	; (227ec <z_sched_wake+0x80>)
   22786:	f7fd ff97 	bl	206b8 <z_spin_lock_valid>
   2278a:	b940      	cbnz	r0, 2279e <z_sched_wake+0x32>
   2278c:	4918      	ldr	r1, [pc, #96]	; (227f0 <z_sched_wake+0x84>)
   2278e:	4819      	ldr	r0, [pc, #100]	; (227f4 <z_sched_wake+0x88>)
   22790:	228e      	movs	r2, #142	; 0x8e
   22792:	f001 fdfc 	bl	2438e <assert_print>
   22796:	4816      	ldr	r0, [pc, #88]	; (227f0 <z_sched_wake+0x84>)
   22798:	218e      	movs	r1, #142	; 0x8e
   2279a:	f001 fdf1 	bl	24380 <assert_post_action>
	z_spin_lock_set_owner(l);
   2279e:	4813      	ldr	r0, [pc, #76]	; (227ec <z_sched_wake+0x80>)
   227a0:	f7fd ffa8 	bl	206f4 <z_spin_lock_set_owner>
	struct k_thread *thread;
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);
   227a4:	4620      	mov	r0, r4
   227a6:	f005 f83a 	bl	2781e <z_priq_dumb_best>

		if (thread != NULL) {
   227aa:	4604      	mov	r4, r0
   227ac:	b158      	cbz	r0, 227c6 <z_sched_wake+0x5a>
   227ae:	67c6      	str	r6, [r0, #124]	; 0x7c
   227b0:	6145      	str	r5, [r0, #20]
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
   227b2:	f7ff f937 	bl	21a24 <unpend_thread_no_timeout>
   227b6:	f104 0018 	add.w	r0, r4, #24
   227ba:	f000 f941 	bl	22a40 <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
   227be:	4620      	mov	r0, r4
   227c0:	f7ff fa6e 	bl	21ca0 <ready_thread>
			ret = true;
   227c4:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   227c6:	4809      	ldr	r0, [pc, #36]	; (227ec <z_sched_wake+0x80>)
   227c8:	f7fd ff84 	bl	206d4 <z_spin_unlock_valid>
   227cc:	b940      	cbnz	r0, 227e0 <z_sched_wake+0x74>
   227ce:	4908      	ldr	r1, [pc, #32]	; (227f0 <z_sched_wake+0x84>)
   227d0:	4808      	ldr	r0, [pc, #32]	; (227f4 <z_sched_wake+0x88>)
   227d2:	22b9      	movs	r2, #185	; 0xb9
   227d4:	f001 fddb 	bl	2438e <assert_print>
   227d8:	4805      	ldr	r0, [pc, #20]	; (227f0 <z_sched_wake+0x84>)
   227da:	21b9      	movs	r1, #185	; 0xb9
   227dc:	f001 fdd0 	bl	24380 <assert_post_action>
	__asm__ volatile(
   227e0:	f387 8811 	msr	BASEPRI, r7
   227e4:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   227e8:	4620      	mov	r0, r4
   227ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   227ec:	200022c4 	.word	0x200022c4
   227f0:	00028a23 	.word	0x00028a23
   227f4:	000289af 	.word	0x000289af

000227f8 <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   227f8:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   227fa:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   227fe:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   22800:	e9cd 6700 	strd	r6, r7, [sp]
   22804:	f7ff fbfa 	bl	21ffc <z_pend_curr>

	if (data != NULL) {
   22808:	b11c      	cbz	r4, 22812 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   2280a:	4b03      	ldr	r3, [pc, #12]	; (22818 <z_sched_wait+0x20>)
   2280c:	689b      	ldr	r3, [r3, #8]
   2280e:	695b      	ldr	r3, [r3, #20]
   22810:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   22812:	b002      	add	sp, #8
   22814:	bdd0      	pop	{r4, r6, r7, pc}
   22816:	bf00      	nop
   22818:	20002284 	.word	0x20002284

0002281c <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   2281c:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   2281e:	4806      	ldr	r0, [pc, #24]	; (22838 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   22820:	4a06      	ldr	r2, [pc, #24]	; (2283c <z_data_copy+0x20>)
   22822:	4907      	ldr	r1, [pc, #28]	; (22840 <z_data_copy+0x24>)
   22824:	1a12      	subs	r2, r2, r0
   22826:	f004 ff1d 	bl	27664 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   2282a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   2282e:	4a05      	ldr	r2, [pc, #20]	; (22844 <z_data_copy+0x28>)
   22830:	4905      	ldr	r1, [pc, #20]	; (22848 <z_data_copy+0x2c>)
   22832:	4806      	ldr	r0, [pc, #24]	; (2284c <z_data_copy+0x30>)
   22834:	f004 bf16 	b.w	27664 <z_early_memcpy>
   22838:	20000000 	.word	0x20000000
   2283c:	20000a10 	.word	0x20000a10
   22840:	0002b894 	.word	0x0002b894
   22844:	00000000 	.word	0x00000000
   22848:	0002b894 	.word	0x0002b894
   2284c:	20000000 	.word	0x20000000

00022850 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   22850:	4b03      	ldr	r3, [pc, #12]	; (22860 <elapsed+0x10>)
   22852:	681b      	ldr	r3, [r3, #0]
   22854:	b90b      	cbnz	r3, 2285a <elapsed+0xa>
   22856:	f7fb bbe7 	b.w	1e028 <sys_clock_elapsed>
}
   2285a:	2000      	movs	r0, #0
   2285c:	4770      	bx	lr
   2285e:	bf00      	nop
   22860:	200022d0 	.word	0x200022d0

00022864 <next_timeout>:
	return list->head == list;
   22864:	4b10      	ldr	r3, [pc, #64]	; (228a8 <next_timeout+0x44>)

static int32_t next_timeout(void)
{
   22866:	b510      	push	{r4, lr}
   22868:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2286a:	429c      	cmp	r4, r3
   2286c:	bf08      	it	eq
   2286e:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   22870:	f7ff ffee 	bl	22850 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
   22874:	b1a4      	cbz	r4, 228a0 <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   22876:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   2287a:	1a1b      	subs	r3, r3, r0
   2287c:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
   22880:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   22884:	f170 0200 	sbcs.w	r2, r0, #0
   22888:	da0a      	bge.n	228a0 <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
   2288a:	2800      	cmp	r0, #0
   2288c:	bfac      	ite	ge
   2288e:	4618      	movge	r0, r3
   22890:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   22892:	4b06      	ldr	r3, [pc, #24]	; (228ac <next_timeout+0x48>)
   22894:	691b      	ldr	r3, [r3, #16]
   22896:	b113      	cbz	r3, 2289e <next_timeout+0x3a>
   22898:	4298      	cmp	r0, r3
   2289a:	bfa8      	it	ge
   2289c:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   2289e:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
   228a0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   228a4:	e7f5      	b.n	22892 <next_timeout+0x2e>
   228a6:	bf00      	nop
   228a8:	200006b0 	.word	0x200006b0
   228ac:	20002284 	.word	0x20002284

000228b0 <remove_timeout>:
{
   228b0:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   228b2:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   228b4:	b168      	cbz	r0, 228d2 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   228b6:	4a0a      	ldr	r2, [pc, #40]	; (228e0 <remove_timeout+0x30>)
   228b8:	6852      	ldr	r2, [r2, #4]
   228ba:	4290      	cmp	r0, r2
   228bc:	d009      	beq.n	228d2 <remove_timeout+0x22>
	if (next(t) != NULL) {
   228be:	b143      	cbz	r3, 228d2 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   228c0:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   228c4:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   228c8:	1912      	adds	r2, r2, r4
   228ca:	eb41 0105 	adc.w	r1, r1, r5
   228ce:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
   228d2:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
   228d4:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   228d6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   228d8:	2300      	movs	r3, #0
	node->prev = NULL;
   228da:	e9c0 3300 	strd	r3, r3, [r0]
}
   228de:	bd30      	pop	{r4, r5, pc}
   228e0:	200006b0 	.word	0x200006b0

000228e4 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   228e4:	f1b3 3fff 	cmp.w	r3, #4294967295
   228e8:	bf08      	it	eq
   228ea:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   228ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   228f2:	4604      	mov	r4, r0
   228f4:	460e      	mov	r6, r1
   228f6:	4698      	mov	r8, r3
   228f8:	4615      	mov	r5, r2
   228fa:	461f      	mov	r7, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   228fc:	f000 8090 	beq.w	22a20 <z_add_timeout+0x13c>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   22900:	6803      	ldr	r3, [r0, #0]
   22902:	b143      	cbz	r3, 22916 <z_add_timeout+0x32>
   22904:	4947      	ldr	r1, [pc, #284]	; (22a24 <z_add_timeout+0x140>)
   22906:	4848      	ldr	r0, [pc, #288]	; (22a28 <z_add_timeout+0x144>)
   22908:	2263      	movs	r2, #99	; 0x63
   2290a:	f001 fd40 	bl	2438e <assert_print>
   2290e:	4845      	ldr	r0, [pc, #276]	; (22a24 <z_add_timeout+0x140>)
   22910:	2163      	movs	r1, #99	; 0x63
   22912:	f001 fd35 	bl	24380 <assert_post_action>
	to->fn = fn;
   22916:	60a6      	str	r6, [r4, #8]
	__asm__ volatile(
   22918:	f04f 0340 	mov.w	r3, #64	; 0x40
   2291c:	f3ef 8611 	mrs	r6, BASEPRI
   22920:	f383 8812 	msr	BASEPRI_MAX, r3
   22924:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22928:	4840      	ldr	r0, [pc, #256]	; (22a2c <z_add_timeout+0x148>)
   2292a:	f7fd fec5 	bl	206b8 <z_spin_lock_valid>
   2292e:	b940      	cbnz	r0, 22942 <z_add_timeout+0x5e>
   22930:	493f      	ldr	r1, [pc, #252]	; (22a30 <z_add_timeout+0x14c>)
   22932:	483d      	ldr	r0, [pc, #244]	; (22a28 <z_add_timeout+0x144>)
   22934:	228e      	movs	r2, #142	; 0x8e
   22936:	f001 fd2a 	bl	2438e <assert_print>
   2293a:	483d      	ldr	r0, [pc, #244]	; (22a30 <z_add_timeout+0x14c>)
   2293c:	218e      	movs	r1, #142	; 0x8e
   2293e:	f001 fd1f 	bl	24380 <assert_post_action>
	z_spin_lock_set_owner(l);
   22942:	483a      	ldr	r0, [pc, #232]	; (22a2c <z_add_timeout+0x148>)
   22944:	f7fd fed6 	bl	206f4 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   22948:	f06f 0201 	mvn.w	r2, #1
   2294c:	1b53      	subs	r3, r2, r5
   2294e:	f04f 30ff 	mov.w	r0, #4294967295
   22952:	eb60 0307 	sbc.w	r3, r0, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   22956:	2b00      	cmp	r3, #0
   22958:	db1b      	blt.n	22992 <z_add_timeout+0xae>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   2295a:	4b36      	ldr	r3, [pc, #216]	; (22a34 <z_add_timeout+0x150>)
   2295c:	e9d3 1300 	ldrd	r1, r3, [r3]
   22960:	1a52      	subs	r2, r2, r1
   22962:	eb60 0303 	sbc.w	r3, r0, r3
   22966:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
   22968:	eb63 0707 	sbc.w	r7, r3, r7
   2296c:	2d01      	cmp	r5, #1
   2296e:	f177 0300 	sbcs.w	r3, r7, #0
   22972:	bfbc      	itt	lt
   22974:	2501      	movlt	r5, #1
   22976:	2700      	movlt	r7, #0
   22978:	e9c4 5704 	strd	r5, r7, [r4, #16]
	return list->head == list;
   2297c:	4a2e      	ldr	r2, [pc, #184]	; (22a38 <z_add_timeout+0x154>)
	sys_dnode_t *const tail = list->tail;
   2297e:	e9d2 3c00 	ldrd	r3, ip, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22982:	4293      	cmp	r3, r2
   22984:	d118      	bne.n	229b8 <z_add_timeout+0xd4>
	node->prev = tail;
   22986:	e9c4 2c00 	strd	r2, ip, [r4]
	tail->next = node;
   2298a:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   2298e:	6054      	str	r4, [r2, #4]
}
   22990:	e026      	b.n	229e0 <z_add_timeout+0xfc>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   22992:	f7ff ff5d 	bl	22850 <elapsed>
   22996:	3501      	adds	r5, #1
   22998:	f148 0800 	adc.w	r8, r8, #0
   2299c:	182d      	adds	r5, r5, r0
   2299e:	eb48 70e0 	adc.w	r0, r8, r0, asr #31
   229a2:	e9c4 5004 	strd	r5, r0, [r4, #16]
   229a6:	e7e9      	b.n	2297c <z_add_timeout+0x98>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   229a8:	1a09      	subs	r1, r1, r0
   229aa:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
   229ae:	459c      	cmp	ip, r3
   229b0:	e9c4 1504 	strd	r1, r5, [r4, #16]
   229b4:	d0e7      	beq.n	22986 <z_add_timeout+0xa2>
   229b6:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   229b8:	2b00      	cmp	r3, #0
   229ba:	d0e4      	beq.n	22986 <z_add_timeout+0xa2>
			if (t->dticks > to->dticks) {
   229bc:	e9d3 0704 	ldrd	r0, r7, [r3, #16]
   229c0:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
   229c4:	4281      	cmp	r1, r0
   229c6:	eb75 0e07 	sbcs.w	lr, r5, r7
   229ca:	daed      	bge.n	229a8 <z_add_timeout+0xc4>
				t->dticks -= to->dticks;
   229cc:	1a41      	subs	r1, r0, r1
   229ce:	eb67 0505 	sbc.w	r5, r7, r5
   229d2:	e9c3 1504 	strd	r1, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   229d6:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   229d8:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   229dc:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   229de:	605c      	str	r4, [r3, #4]
	return list->head == list;
   229e0:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   229e2:	4293      	cmp	r3, r2
   229e4:	d00b      	beq.n	229fe <z_add_timeout+0x11a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   229e6:	429c      	cmp	r4, r3
   229e8:	d109      	bne.n	229fe <z_add_timeout+0x11a>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   229ea:	f7ff ff3b 	bl	22864 <next_timeout>

			if (next_time == 0 ||
   229ee:	b118      	cbz	r0, 229f8 <z_add_timeout+0x114>
			    _current_cpu->slice_ticks != next_time) {
   229f0:	4b12      	ldr	r3, [pc, #72]	; (22a3c <z_add_timeout+0x158>)
			if (next_time == 0 ||
   229f2:	691b      	ldr	r3, [r3, #16]
   229f4:	4283      	cmp	r3, r0
   229f6:	d002      	beq.n	229fe <z_add_timeout+0x11a>
				sys_clock_set_timeout(next_time, false);
   229f8:	2100      	movs	r1, #0
   229fa:	f7fb fae3 	bl	1dfc4 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   229fe:	480b      	ldr	r0, [pc, #44]	; (22a2c <z_add_timeout+0x148>)
   22a00:	f7fd fe68 	bl	206d4 <z_spin_unlock_valid>
   22a04:	b940      	cbnz	r0, 22a18 <z_add_timeout+0x134>
   22a06:	490a      	ldr	r1, [pc, #40]	; (22a30 <z_add_timeout+0x14c>)
   22a08:	4807      	ldr	r0, [pc, #28]	; (22a28 <z_add_timeout+0x144>)
   22a0a:	22b9      	movs	r2, #185	; 0xb9
   22a0c:	f001 fcbf 	bl	2438e <assert_print>
   22a10:	4807      	ldr	r0, [pc, #28]	; (22a30 <z_add_timeout+0x14c>)
   22a12:	21b9      	movs	r1, #185	; 0xb9
   22a14:	f001 fcb4 	bl	24380 <assert_post_action>
	__asm__ volatile(
   22a18:	f386 8811 	msr	BASEPRI, r6
   22a1c:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   22a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22a24:	0002b6f2 	.word	0x0002b6f2
   22a28:	000289af 	.word	0x000289af
   22a2c:	200022d4 	.word	0x200022d4
   22a30:	00028a23 	.word	0x00028a23
   22a34:	20001db8 	.word	0x20001db8
   22a38:	200006b0 	.word	0x200006b0
   22a3c:	20002284 	.word	0x20002284

00022a40 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   22a40:	b538      	push	{r3, r4, r5, lr}
   22a42:	4604      	mov	r4, r0
	__asm__ volatile(
   22a44:	f04f 0340 	mov.w	r3, #64	; 0x40
   22a48:	f3ef 8511 	mrs	r5, BASEPRI
   22a4c:	f383 8812 	msr	BASEPRI_MAX, r3
   22a50:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22a54:	4815      	ldr	r0, [pc, #84]	; (22aac <z_abort_timeout+0x6c>)
   22a56:	f7fd fe2f 	bl	206b8 <z_spin_lock_valid>
   22a5a:	b940      	cbnz	r0, 22a6e <z_abort_timeout+0x2e>
   22a5c:	4914      	ldr	r1, [pc, #80]	; (22ab0 <z_abort_timeout+0x70>)
   22a5e:	4815      	ldr	r0, [pc, #84]	; (22ab4 <z_abort_timeout+0x74>)
   22a60:	228e      	movs	r2, #142	; 0x8e
   22a62:	f001 fc94 	bl	2438e <assert_print>
   22a66:	4812      	ldr	r0, [pc, #72]	; (22ab0 <z_abort_timeout+0x70>)
   22a68:	218e      	movs	r1, #142	; 0x8e
   22a6a:	f001 fc89 	bl	24380 <assert_post_action>
	z_spin_lock_set_owner(l);
   22a6e:	480f      	ldr	r0, [pc, #60]	; (22aac <z_abort_timeout+0x6c>)
   22a70:	f7fd fe40 	bl	206f4 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   22a74:	6823      	ldr	r3, [r4, #0]
   22a76:	b1b3      	cbz	r3, 22aa6 <z_abort_timeout+0x66>
			remove_timeout(to);
   22a78:	4620      	mov	r0, r4
   22a7a:	f7ff ff19 	bl	228b0 <remove_timeout>
			ret = 0;
   22a7e:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22a80:	480a      	ldr	r0, [pc, #40]	; (22aac <z_abort_timeout+0x6c>)
   22a82:	f7fd fe27 	bl	206d4 <z_spin_unlock_valid>
   22a86:	b940      	cbnz	r0, 22a9a <z_abort_timeout+0x5a>
   22a88:	4909      	ldr	r1, [pc, #36]	; (22ab0 <z_abort_timeout+0x70>)
   22a8a:	480a      	ldr	r0, [pc, #40]	; (22ab4 <z_abort_timeout+0x74>)
   22a8c:	22b9      	movs	r2, #185	; 0xb9
   22a8e:	f001 fc7e 	bl	2438e <assert_print>
   22a92:	4807      	ldr	r0, [pc, #28]	; (22ab0 <z_abort_timeout+0x70>)
   22a94:	21b9      	movs	r1, #185	; 0xb9
   22a96:	f001 fc73 	bl	24380 <assert_post_action>
	__asm__ volatile(
   22a9a:	f385 8811 	msr	BASEPRI, r5
   22a9e:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   22aa2:	4620      	mov	r0, r4
   22aa4:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   22aa6:	f06f 0415 	mvn.w	r4, #21
   22aaa:	e7e9      	b.n	22a80 <z_abort_timeout+0x40>
   22aac:	200022d4 	.word	0x200022d4
   22ab0:	00028a23 	.word	0x00028a23
   22ab4:	000289af 	.word	0x000289af

00022ab8 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   22ab8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   22aba:	f04f 0340 	mov.w	r3, #64	; 0x40
   22abe:	f3ef 8511 	mrs	r5, BASEPRI
   22ac2:	f383 8812 	msr	BASEPRI_MAX, r3
   22ac6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22aca:	4813      	ldr	r0, [pc, #76]	; (22b18 <z_get_next_timeout_expiry+0x60>)
   22acc:	f7fd fdf4 	bl	206b8 <z_spin_lock_valid>
   22ad0:	b940      	cbnz	r0, 22ae4 <z_get_next_timeout_expiry+0x2c>
   22ad2:	4912      	ldr	r1, [pc, #72]	; (22b1c <z_get_next_timeout_expiry+0x64>)
   22ad4:	4812      	ldr	r0, [pc, #72]	; (22b20 <z_get_next_timeout_expiry+0x68>)
   22ad6:	228e      	movs	r2, #142	; 0x8e
   22ad8:	f001 fc59 	bl	2438e <assert_print>
   22adc:	480f      	ldr	r0, [pc, #60]	; (22b1c <z_get_next_timeout_expiry+0x64>)
   22ade:	218e      	movs	r1, #142	; 0x8e
   22ae0:	f001 fc4e 	bl	24380 <assert_post_action>
	z_spin_lock_set_owner(l);
   22ae4:	480c      	ldr	r0, [pc, #48]	; (22b18 <z_get_next_timeout_expiry+0x60>)
   22ae6:	f7fd fe05 	bl	206f4 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   22aea:	f7ff febb 	bl	22864 <next_timeout>
   22aee:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22af0:	4809      	ldr	r0, [pc, #36]	; (22b18 <z_get_next_timeout_expiry+0x60>)
   22af2:	f7fd fdef 	bl	206d4 <z_spin_unlock_valid>
   22af6:	b940      	cbnz	r0, 22b0a <z_get_next_timeout_expiry+0x52>
   22af8:	4908      	ldr	r1, [pc, #32]	; (22b1c <z_get_next_timeout_expiry+0x64>)
   22afa:	4809      	ldr	r0, [pc, #36]	; (22b20 <z_get_next_timeout_expiry+0x68>)
   22afc:	22b9      	movs	r2, #185	; 0xb9
   22afe:	f001 fc46 	bl	2438e <assert_print>
   22b02:	4806      	ldr	r0, [pc, #24]	; (22b1c <z_get_next_timeout_expiry+0x64>)
   22b04:	21b9      	movs	r1, #185	; 0xb9
   22b06:	f001 fc3b 	bl	24380 <assert_post_action>
	__asm__ volatile(
   22b0a:	f385 8811 	msr	BASEPRI, r5
   22b0e:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   22b12:	4620      	mov	r0, r4
   22b14:	bd38      	pop	{r3, r4, r5, pc}
   22b16:	bf00      	nop
   22b18:	200022d4 	.word	0x200022d4
   22b1c:	00028a23 	.word	0x00028a23
   22b20:	000289af 	.word	0x000289af

00022b24 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   22b24:	b570      	push	{r4, r5, r6, lr}
   22b26:	4604      	mov	r4, r0
   22b28:	460d      	mov	r5, r1
	__asm__ volatile(
   22b2a:	f04f 0340 	mov.w	r3, #64	; 0x40
   22b2e:	f3ef 8611 	mrs	r6, BASEPRI
   22b32:	f383 8812 	msr	BASEPRI_MAX, r3
   22b36:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22b3a:	4816      	ldr	r0, [pc, #88]	; (22b94 <z_set_timeout_expiry+0x70>)
   22b3c:	f7fd fdbc 	bl	206b8 <z_spin_lock_valid>
   22b40:	b940      	cbnz	r0, 22b54 <z_set_timeout_expiry+0x30>
   22b42:	4915      	ldr	r1, [pc, #84]	; (22b98 <z_set_timeout_expiry+0x74>)
   22b44:	4815      	ldr	r0, [pc, #84]	; (22b9c <z_set_timeout_expiry+0x78>)
   22b46:	228e      	movs	r2, #142	; 0x8e
   22b48:	f001 fc21 	bl	2438e <assert_print>
   22b4c:	4812      	ldr	r0, [pc, #72]	; (22b98 <z_set_timeout_expiry+0x74>)
   22b4e:	218e      	movs	r1, #142	; 0x8e
   22b50:	f001 fc16 	bl	24380 <assert_post_action>
	z_spin_lock_set_owner(l);
   22b54:	480f      	ldr	r0, [pc, #60]	; (22b94 <z_set_timeout_expiry+0x70>)
   22b56:	f7fd fdcd 	bl	206f4 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   22b5a:	f7ff fe83 	bl	22864 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   22b5e:	2801      	cmp	r0, #1
   22b60:	dd05      	ble.n	22b6e <z_set_timeout_expiry+0x4a>
   22b62:	42a0      	cmp	r0, r4
   22b64:	db03      	blt.n	22b6e <z_set_timeout_expiry+0x4a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   22b66:	4629      	mov	r1, r5
   22b68:	4620      	mov	r0, r4
   22b6a:	f7fb fa2b 	bl	1dfc4 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22b6e:	4809      	ldr	r0, [pc, #36]	; (22b94 <z_set_timeout_expiry+0x70>)
   22b70:	f7fd fdb0 	bl	206d4 <z_spin_unlock_valid>
   22b74:	b940      	cbnz	r0, 22b88 <z_set_timeout_expiry+0x64>
   22b76:	4908      	ldr	r1, [pc, #32]	; (22b98 <z_set_timeout_expiry+0x74>)
   22b78:	4808      	ldr	r0, [pc, #32]	; (22b9c <z_set_timeout_expiry+0x78>)
   22b7a:	22b9      	movs	r2, #185	; 0xb9
   22b7c:	f001 fc07 	bl	2438e <assert_print>
   22b80:	4805      	ldr	r0, [pc, #20]	; (22b98 <z_set_timeout_expiry+0x74>)
   22b82:	21b9      	movs	r1, #185	; 0xb9
   22b84:	f001 fbfc 	bl	24380 <assert_post_action>
	__asm__ volatile(
   22b88:	f386 8811 	msr	BASEPRI, r6
   22b8c:	f3bf 8f6f 	isb	sy
		}
	}
}
   22b90:	bd70      	pop	{r4, r5, r6, pc}
   22b92:	bf00      	nop
   22b94:	200022d4 	.word	0x200022d4
   22b98:	00028a23 	.word	0x00028a23
   22b9c:	000289af 	.word	0x000289af

00022ba0 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   22ba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22ba4:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   22ba6:	f7ff f815 	bl	21bd4 <z_time_slice>
	__asm__ volatile(
   22baa:	f04f 0340 	mov.w	r3, #64	; 0x40
   22bae:	f3ef 8511 	mrs	r5, BASEPRI
   22bb2:	f383 8812 	msr	BASEPRI_MAX, r3
   22bb6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22bba:	4842      	ldr	r0, [pc, #264]	; (22cc4 <sys_clock_announce+0x124>)
   22bbc:	f7fd fd7c 	bl	206b8 <z_spin_lock_valid>
   22bc0:	b940      	cbnz	r0, 22bd4 <sys_clock_announce+0x34>
   22bc2:	4941      	ldr	r1, [pc, #260]	; (22cc8 <sys_clock_announce+0x128>)
   22bc4:	4841      	ldr	r0, [pc, #260]	; (22ccc <sys_clock_announce+0x12c>)
   22bc6:	228e      	movs	r2, #142	; 0x8e
   22bc8:	f001 fbe1 	bl	2438e <assert_print>
   22bcc:	483e      	ldr	r0, [pc, #248]	; (22cc8 <sys_clock_announce+0x128>)
   22bce:	218e      	movs	r1, #142	; 0x8e
   22bd0:	f001 fbd6 	bl	24380 <assert_post_action>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   22bd4:	4f3e      	ldr	r7, [pc, #248]	; (22cd0 <sys_clock_announce+0x130>)
	z_spin_lock_set_owner(l);
   22bd6:	483b      	ldr	r0, [pc, #236]	; (22cc4 <sys_clock_announce+0x124>)
	return list->head == list;
   22bd8:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 22cd4 <sys_clock_announce+0x134>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   22bdc:	4e3e      	ldr	r6, [pc, #248]	; (22cd8 <sys_clock_announce+0x138>)
   22bde:	f7fd fd89 	bl	206f4 <z_spin_lock_set_owner>
	announce_remaining = ticks;
   22be2:	603c      	str	r4, [r7, #0]
   22be4:	f8d8 4000 	ldr.w	r4, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   22be8:	683a      	ldr	r2, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22bea:	4544      	cmp	r4, r8
		curr_tick += dt;
   22bec:	e9d6 1e00 	ldrd	r1, lr, [r6]
   22bf0:	ea4f 70e2 	mov.w	r0, r2, asr #31
   22bf4:	d00b      	beq.n	22c0e <sys_clock_announce+0x6e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   22bf6:	b154      	cbz	r4, 22c0e <sys_clock_announce+0x6e>
   22bf8:	e9d4 3c04 	ldrd	r3, ip, [r4, #16]
   22bfc:	429a      	cmp	r2, r3
   22bfe:	eb70 090c 	sbcs.w	r9, r0, ip
   22c02:	da23      	bge.n	22c4c <sys_clock_announce+0xac>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   22c04:	1a9b      	subs	r3, r3, r2
   22c06:	eb6c 0c00 	sbc.w	ip, ip, r0
   22c0a:	e9c4 3c04 	strd	r3, ip, [r4, #16]
	}

	curr_tick += announce_remaining;
   22c0e:	1852      	adds	r2, r2, r1
   22c10:	eb4e 0000 	adc.w	r0, lr, r0
	announce_remaining = 0;
   22c14:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   22c16:	e9c6 2000 	strd	r2, r0, [r6]
	announce_remaining = 0;
   22c1a:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
   22c1c:	f7ff fe22 	bl	22864 <next_timeout>
   22c20:	4621      	mov	r1, r4
   22c22:	f7fb f9cf 	bl	1dfc4 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22c26:	4827      	ldr	r0, [pc, #156]	; (22cc4 <sys_clock_announce+0x124>)
   22c28:	f7fd fd54 	bl	206d4 <z_spin_unlock_valid>
   22c2c:	b940      	cbnz	r0, 22c40 <sys_clock_announce+0xa0>
   22c2e:	4926      	ldr	r1, [pc, #152]	; (22cc8 <sys_clock_announce+0x128>)
   22c30:	4826      	ldr	r0, [pc, #152]	; (22ccc <sys_clock_announce+0x12c>)
   22c32:	22b9      	movs	r2, #185	; 0xb9
   22c34:	f001 fbab 	bl	2438e <assert_print>
   22c38:	4823      	ldr	r0, [pc, #140]	; (22cc8 <sys_clock_announce+0x128>)
   22c3a:	21b9      	movs	r1, #185	; 0xb9
   22c3c:	f001 fba0 	bl	24380 <assert_post_action>
	__asm__ volatile(
   22c40:	f385 8811 	msr	BASEPRI, r5
   22c44:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   22c48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   22c4c:	1859      	adds	r1, r3, r1
   22c4e:	eb4e 70e3 	adc.w	r0, lr, r3, asr #31
		announce_remaining -= dt;
   22c52:	1ad3      	subs	r3, r2, r3
   22c54:	603b      	str	r3, [r7, #0]
		t->dticks = 0;
   22c56:	2200      	movs	r2, #0
   22c58:	2300      	movs	r3, #0
		curr_tick += dt;
   22c5a:	e9c6 1000 	strd	r1, r0, [r6]
		t->dticks = 0;
   22c5e:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   22c62:	4620      	mov	r0, r4
   22c64:	f7ff fe24 	bl	228b0 <remove_timeout>
   22c68:	4816      	ldr	r0, [pc, #88]	; (22cc4 <sys_clock_announce+0x124>)
   22c6a:	f7fd fd33 	bl	206d4 <z_spin_unlock_valid>
   22c6e:	b940      	cbnz	r0, 22c82 <sys_clock_announce+0xe2>
   22c70:	4915      	ldr	r1, [pc, #84]	; (22cc8 <sys_clock_announce+0x128>)
   22c72:	4816      	ldr	r0, [pc, #88]	; (22ccc <sys_clock_announce+0x12c>)
   22c74:	22b9      	movs	r2, #185	; 0xb9
   22c76:	f001 fb8a 	bl	2438e <assert_print>
   22c7a:	4813      	ldr	r0, [pc, #76]	; (22cc8 <sys_clock_announce+0x128>)
   22c7c:	21b9      	movs	r1, #185	; 0xb9
   22c7e:	f001 fb7f 	bl	24380 <assert_post_action>
   22c82:	f385 8811 	msr	BASEPRI, r5
   22c86:	f3bf 8f6f 	isb	sy
		t->fn(t);
   22c8a:	68a3      	ldr	r3, [r4, #8]
   22c8c:	4620      	mov	r0, r4
   22c8e:	4798      	blx	r3
	__asm__ volatile(
   22c90:	f04f 0340 	mov.w	r3, #64	; 0x40
   22c94:	f3ef 8511 	mrs	r5, BASEPRI
   22c98:	f383 8812 	msr	BASEPRI_MAX, r3
   22c9c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22ca0:	4808      	ldr	r0, [pc, #32]	; (22cc4 <sys_clock_announce+0x124>)
   22ca2:	f7fd fd09 	bl	206b8 <z_spin_lock_valid>
   22ca6:	b940      	cbnz	r0, 22cba <sys_clock_announce+0x11a>
   22ca8:	4907      	ldr	r1, [pc, #28]	; (22cc8 <sys_clock_announce+0x128>)
   22caa:	4808      	ldr	r0, [pc, #32]	; (22ccc <sys_clock_announce+0x12c>)
   22cac:	228e      	movs	r2, #142	; 0x8e
   22cae:	f001 fb6e 	bl	2438e <assert_print>
   22cb2:	4805      	ldr	r0, [pc, #20]	; (22cc8 <sys_clock_announce+0x128>)
   22cb4:	218e      	movs	r1, #142	; 0x8e
   22cb6:	f001 fb63 	bl	24380 <assert_post_action>
	z_spin_lock_set_owner(l);
   22cba:	4802      	ldr	r0, [pc, #8]	; (22cc4 <sys_clock_announce+0x124>)
   22cbc:	f7fd fd1a 	bl	206f4 <z_spin_lock_set_owner>
	return k;
   22cc0:	e790      	b.n	22be4 <sys_clock_announce+0x44>
   22cc2:	bf00      	nop
   22cc4:	200022d4 	.word	0x200022d4
   22cc8:	00028a23 	.word	0x00028a23
   22ccc:	000289af 	.word	0x000289af
   22cd0:	200022d0 	.word	0x200022d0
   22cd4:	200006b0 	.word	0x200006b0
   22cd8:	20001db8 	.word	0x20001db8

00022cdc <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   22cdc:	b570      	push	{r4, r5, r6, lr}
   22cde:	f04f 0340 	mov.w	r3, #64	; 0x40
   22ce2:	f3ef 8611 	mrs	r6, BASEPRI
   22ce6:	f383 8812 	msr	BASEPRI_MAX, r3
   22cea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22cee:	4816      	ldr	r0, [pc, #88]	; (22d48 <sys_clock_tick_get+0x6c>)
   22cf0:	f7fd fce2 	bl	206b8 <z_spin_lock_valid>
   22cf4:	b940      	cbnz	r0, 22d08 <sys_clock_tick_get+0x2c>
   22cf6:	4915      	ldr	r1, [pc, #84]	; (22d4c <sys_clock_tick_get+0x70>)
   22cf8:	4815      	ldr	r0, [pc, #84]	; (22d50 <sys_clock_tick_get+0x74>)
   22cfa:	228e      	movs	r2, #142	; 0x8e
   22cfc:	f001 fb47 	bl	2438e <assert_print>
   22d00:	4812      	ldr	r0, [pc, #72]	; (22d4c <sys_clock_tick_get+0x70>)
   22d02:	218e      	movs	r1, #142	; 0x8e
   22d04:	f001 fb3c 	bl	24380 <assert_post_action>
	z_spin_lock_set_owner(l);
   22d08:	480f      	ldr	r0, [pc, #60]	; (22d48 <sys_clock_tick_get+0x6c>)
   22d0a:	f7fd fcf3 	bl	206f4 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   22d0e:	f7fb f98b 	bl	1e028 <sys_clock_elapsed>
   22d12:	4b10      	ldr	r3, [pc, #64]	; (22d54 <sys_clock_tick_get+0x78>)
   22d14:	e9d3 4500 	ldrd	r4, r5, [r3]
   22d18:	1904      	adds	r4, r0, r4
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22d1a:	480b      	ldr	r0, [pc, #44]	; (22d48 <sys_clock_tick_get+0x6c>)
   22d1c:	f145 0500 	adc.w	r5, r5, #0
   22d20:	f7fd fcd8 	bl	206d4 <z_spin_unlock_valid>
   22d24:	b940      	cbnz	r0, 22d38 <sys_clock_tick_get+0x5c>
   22d26:	4909      	ldr	r1, [pc, #36]	; (22d4c <sys_clock_tick_get+0x70>)
   22d28:	4809      	ldr	r0, [pc, #36]	; (22d50 <sys_clock_tick_get+0x74>)
   22d2a:	22b9      	movs	r2, #185	; 0xb9
   22d2c:	f001 fb2f 	bl	2438e <assert_print>
   22d30:	4806      	ldr	r0, [pc, #24]	; (22d4c <sys_clock_tick_get+0x70>)
   22d32:	21b9      	movs	r1, #185	; 0xb9
   22d34:	f001 fb24 	bl	24380 <assert_post_action>
	__asm__ volatile(
   22d38:	f386 8811 	msr	BASEPRI, r6
   22d3c:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   22d40:	4620      	mov	r0, r4
   22d42:	4629      	mov	r1, r5
   22d44:	bd70      	pop	{r4, r5, r6, pc}
   22d46:	bf00      	nop
   22d48:	200022d4 	.word	0x200022d4
   22d4c:	00028a23 	.word	0x00028a23
   22d50:	000289af 	.word	0x000289af
   22d54:	20001db8 	.word	0x20001db8

00022d58 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   22d58:	b570      	push	{r4, r5, r6, lr}
   22d5a:	4604      	mov	r4, r0
	__asm__ volatile(
   22d5c:	f04f 0340 	mov.w	r3, #64	; 0x40
   22d60:	f3ef 8511 	mrs	r5, BASEPRI
   22d64:	f383 8812 	msr	BASEPRI_MAX, r3
   22d68:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22d6c:	4840      	ldr	r0, [pc, #256]	; (22e70 <z_timer_expiration_handler+0x118>)
   22d6e:	f7fd fca3 	bl	206b8 <z_spin_lock_valid>
   22d72:	b940      	cbnz	r0, 22d86 <z_timer_expiration_handler+0x2e>
   22d74:	493f      	ldr	r1, [pc, #252]	; (22e74 <z_timer_expiration_handler+0x11c>)
   22d76:	4840      	ldr	r0, [pc, #256]	; (22e78 <z_timer_expiration_handler+0x120>)
   22d78:	228e      	movs	r2, #142	; 0x8e
   22d7a:	f001 fb08 	bl	2438e <assert_print>
   22d7e:	483d      	ldr	r0, [pc, #244]	; (22e74 <z_timer_expiration_handler+0x11c>)
   22d80:	218e      	movs	r1, #142	; 0x8e
   22d82:	f001 fafd 	bl	24380 <assert_post_action>
	z_spin_lock_set_owner(l);
   22d86:	483a      	ldr	r0, [pc, #232]	; (22e70 <z_timer_expiration_handler+0x118>)
   22d88:	f7fd fcb4 	bl	206f4 <z_spin_lock_set_owner>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   22d8c:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   22d90:	3301      	adds	r3, #1
   22d92:	f142 0200 	adc.w	r2, r2, #0
   22d96:	2b02      	cmp	r3, #2
   22d98:	f172 0300 	sbcs.w	r3, r2, #0
   22d9c:	d305      	bcc.n	22daa <z_timer_expiration_handler+0x52>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   22d9e:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
   22da2:	4936      	ldr	r1, [pc, #216]	; (22e7c <z_timer_expiration_handler+0x124>)
   22da4:	4620      	mov	r0, r4
   22da6:	f7ff fd9d 	bl	228e4 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   22daa:	6b23      	ldr	r3, [r4, #48]	; 0x30
   22dac:	3301      	adds	r3, #1
   22dae:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   22db0:	6a23      	ldr	r3, [r4, #32]
   22db2:	b35b      	cbz	r3, 22e0c <z_timer_expiration_handler+0xb4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22db4:	482e      	ldr	r0, [pc, #184]	; (22e70 <z_timer_expiration_handler+0x118>)
   22db6:	f7fd fc8d 	bl	206d4 <z_spin_unlock_valid>
   22dba:	b940      	cbnz	r0, 22dce <z_timer_expiration_handler+0x76>
   22dbc:	492d      	ldr	r1, [pc, #180]	; (22e74 <z_timer_expiration_handler+0x11c>)
   22dbe:	482e      	ldr	r0, [pc, #184]	; (22e78 <z_timer_expiration_handler+0x120>)
   22dc0:	22b9      	movs	r2, #185	; 0xb9
   22dc2:	f001 fae4 	bl	2438e <assert_print>
   22dc6:	482b      	ldr	r0, [pc, #172]	; (22e74 <z_timer_expiration_handler+0x11c>)
   22dc8:	21b9      	movs	r1, #185	; 0xb9
   22dca:	f001 fad9 	bl	24380 <assert_post_action>
	__asm__ volatile(
   22dce:	f385 8811 	msr	BASEPRI, r5
   22dd2:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   22dd6:	6a23      	ldr	r3, [r4, #32]
   22dd8:	4620      	mov	r0, r4
   22dda:	4798      	blx	r3
	__asm__ volatile(
   22ddc:	f04f 0340 	mov.w	r3, #64	; 0x40
   22de0:	f3ef 8511 	mrs	r5, BASEPRI
   22de4:	f383 8812 	msr	BASEPRI_MAX, r3
   22de8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22dec:	4820      	ldr	r0, [pc, #128]	; (22e70 <z_timer_expiration_handler+0x118>)
   22dee:	f7fd fc63 	bl	206b8 <z_spin_lock_valid>
   22df2:	b940      	cbnz	r0, 22e06 <z_timer_expiration_handler+0xae>
   22df4:	491f      	ldr	r1, [pc, #124]	; (22e74 <z_timer_expiration_handler+0x11c>)
   22df6:	4820      	ldr	r0, [pc, #128]	; (22e78 <z_timer_expiration_handler+0x120>)
   22df8:	228e      	movs	r2, #142	; 0x8e
   22dfa:	f001 fac8 	bl	2438e <assert_print>
   22dfe:	481d      	ldr	r0, [pc, #116]	; (22e74 <z_timer_expiration_handler+0x11c>)
   22e00:	218e      	movs	r1, #142	; 0x8e
   22e02:	f001 fabd 	bl	24380 <assert_post_action>
	z_spin_lock_set_owner(l);
   22e06:	481a      	ldr	r0, [pc, #104]	; (22e70 <z_timer_expiration_handler+0x118>)
   22e08:	f7fd fc74 	bl	206f4 <z_spin_lock_set_owner>
	return list->head == list;
   22e0c:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22e10:	42a6      	cmp	r6, r4
   22e12:	d000      	beq.n	22e16 <z_timer_expiration_handler+0xbe>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   22e14:	b98e      	cbnz	r6, 22e3a <z_timer_expiration_handler+0xe2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22e16:	4816      	ldr	r0, [pc, #88]	; (22e70 <z_timer_expiration_handler+0x118>)
   22e18:	f7fd fc5c 	bl	206d4 <z_spin_unlock_valid>
   22e1c:	b940      	cbnz	r0, 22e30 <z_timer_expiration_handler+0xd8>
   22e1e:	4915      	ldr	r1, [pc, #84]	; (22e74 <z_timer_expiration_handler+0x11c>)
   22e20:	4815      	ldr	r0, [pc, #84]	; (22e78 <z_timer_expiration_handler+0x120>)
   22e22:	22b9      	movs	r2, #185	; 0xb9
   22e24:	f001 fab3 	bl	2438e <assert_print>
   22e28:	4812      	ldr	r0, [pc, #72]	; (22e74 <z_timer_expiration_handler+0x11c>)
   22e2a:	21b9      	movs	r1, #185	; 0xb9
   22e2c:	f001 faa8 	bl	24380 <assert_post_action>
	__asm__ volatile(
   22e30:	f385 8811 	msr	BASEPRI, r5
   22e34:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   22e38:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
   22e3a:	4630      	mov	r0, r6
   22e3c:	f7fe fd14 	bl	21868 <z_unpend_thread_no_timeout>
   22e40:	2300      	movs	r3, #0
   22e42:	480b      	ldr	r0, [pc, #44]	; (22e70 <z_timer_expiration_handler+0x118>)
   22e44:	67f3      	str	r3, [r6, #124]	; 0x7c
   22e46:	f7fd fc45 	bl	206d4 <z_spin_unlock_valid>
   22e4a:	b940      	cbnz	r0, 22e5e <z_timer_expiration_handler+0x106>
   22e4c:	4909      	ldr	r1, [pc, #36]	; (22e74 <z_timer_expiration_handler+0x11c>)
   22e4e:	480a      	ldr	r0, [pc, #40]	; (22e78 <z_timer_expiration_handler+0x120>)
   22e50:	22b9      	movs	r2, #185	; 0xb9
   22e52:	f001 fa9c 	bl	2438e <assert_print>
   22e56:	4807      	ldr	r0, [pc, #28]	; (22e74 <z_timer_expiration_handler+0x11c>)
   22e58:	21b9      	movs	r1, #185	; 0xb9
   22e5a:	f001 fa91 	bl	24380 <assert_post_action>
   22e5e:	f385 8811 	msr	BASEPRI, r5
   22e62:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   22e66:	4630      	mov	r0, r6
}
   22e68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   22e6c:	f7fe bf62 	b.w	21d34 <z_ready_thread>
   22e70:	200022d8 	.word	0x200022d8
   22e74:	00028a23 	.word	0x00028a23
   22e78:	000289af 	.word	0x000289af
   22e7c:	00022d59 	.word	0x00022d59

00022e80 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   22e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22e84:	4611      	mov	r1, r2
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   22e86:	f1b3 3fff 	cmp.w	r3, #4294967295
   22e8a:	bf08      	it	eq
   22e8c:	f1b1 3fff 	cmpeq.w	r1, #4294967295
{
   22e90:	4606      	mov	r6, r0
   22e92:	461c      	mov	r4, r3
   22e94:	e9dd 2008 	ldrd	r2, r0, [sp, #32]
   22e98:	4689      	mov	r9, r1
   22e9a:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   22e9c:	d03e      	beq.n	22f1c <z_impl_k_timer_start+0x9c>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   22e9e:	f1b0 3fff 	cmp.w	r0, #4294967295
   22ea2:	bf08      	it	eq
   22ea4:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   22ea8:	4615      	mov	r5, r2
   22eaa:	4607      	mov	r7, r0
   22eac:	d014      	beq.n	22ed8 <z_impl_k_timer_start+0x58>
   22eae:	ea50 0302 	orrs.w	r3, r0, r2
   22eb2:	d011      	beq.n	22ed8 <z_impl_k_timer_start+0x58>
	    Z_TICK_ABS(period.ticks) < 0) {
   22eb4:	f06f 0301 	mvn.w	r3, #1
   22eb8:	1a9b      	subs	r3, r3, r2
   22eba:	f04f 33ff 	mov.w	r3, #4294967295
   22ebe:	eb63 0300 	sbc.w	r3, r3, r0
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   22ec2:	2b00      	cmp	r3, #0
   22ec4:	da08      	bge.n	22ed8 <z_impl_k_timer_start+0x58>
		period.ticks = MAX(period.ticks - 1, 1);
   22ec6:	2a02      	cmp	r2, #2
   22ec8:	f170 0300 	sbcs.w	r3, r0, #0
   22ecc:	bfbc      	itt	lt
   22ece:	2502      	movlt	r5, #2
   22ed0:	2700      	movlt	r7, #0
   22ed2:	3d01      	subs	r5, #1
   22ed4:	f147 37ff 	adc.w	r7, r7, #4294967295
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   22ed8:	f06f 0301 	mvn.w	r3, #1
   22edc:	1a5b      	subs	r3, r3, r1
   22ede:	f04f 33ff 	mov.w	r3, #4294967295
   22ee2:	eb63 0304 	sbc.w	r3, r3, r4
   22ee6:	2b00      	cmp	r3, #0
   22ee8:	da09      	bge.n	22efe <z_impl_k_timer_start+0x7e>
		duration.ticks = MAX(duration.ticks - 1, 0);
   22eea:	2901      	cmp	r1, #1
   22eec:	f174 0300 	sbcs.w	r3, r4, #0
   22ef0:	bfbc      	itt	lt
   22ef2:	2101      	movlt	r1, #1
   22ef4:	2400      	movlt	r4, #0
   22ef6:	f111 39ff 	adds.w	r9, r1, #4294967295
   22efa:	f144 38ff 	adc.w	r8, r4, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
   22efe:	4630      	mov	r0, r6
   22f00:	f7ff fd9e 	bl	22a40 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   22f04:	2300      	movs	r3, #0
   22f06:	6333      	str	r3, [r6, #48]	; 0x30
	timer->period = period;
   22f08:	e9c6 570a 	strd	r5, r7, [r6, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   22f0c:	464a      	mov	r2, r9
   22f0e:	4643      	mov	r3, r8
   22f10:	4630      	mov	r0, r6
   22f12:	4903      	ldr	r1, [pc, #12]	; (22f20 <z_impl_k_timer_start+0xa0>)
		     duration);
}
   22f14:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   22f18:	f7ff bce4 	b.w	228e4 <z_add_timeout>
}
   22f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   22f20:	00022d59 	.word	0x00022d59

00022f24 <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
   22f24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
   22f28:	2600      	movs	r6, #0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22f2a:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 230f4 <register_events+0x1d0>
   22f2e:	4f72      	ldr	r7, [pc, #456]	; (230f8 <register_events+0x1d4>)
   22f30:	4d72      	ldr	r5, [pc, #456]	; (230fc <register_events+0x1d8>)
{
   22f32:	9100      	str	r1, [sp, #0]
   22f34:	4614      	mov	r4, r2
   22f36:	9301      	str	r3, [sp, #4]
   22f38:	4681      	mov	r9, r0
	int events_registered = 0;
   22f3a:	46b0      	mov	r8, r6
	for (int ii = 0; ii < num_events; ii++) {
   22f3c:	9b00      	ldr	r3, [sp, #0]
   22f3e:	429e      	cmp	r6, r3
   22f40:	db03      	blt.n	22f4a <register_events+0x26>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
   22f42:	4640      	mov	r0, r8
   22f44:	b003      	add	sp, #12
   22f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   22f4a:	f04f 0240 	mov.w	r2, #64	; 0x40
   22f4e:	f3ef 8b11 	mrs	fp, BASEPRI
   22f52:	f382 8812 	msr	BASEPRI_MAX, r2
   22f56:	f3bf 8f6f 	isb	sy
   22f5a:	4650      	mov	r0, sl
   22f5c:	f7fd fbac 	bl	206b8 <z_spin_lock_valid>
   22f60:	b940      	cbnz	r0, 22f74 <register_events+0x50>
   22f62:	4639      	mov	r1, r7
   22f64:	4628      	mov	r0, r5
   22f66:	228e      	movs	r2, #142	; 0x8e
   22f68:	f001 fa11 	bl	2438e <assert_print>
   22f6c:	218e      	movs	r1, #142	; 0x8e
   22f6e:	4638      	mov	r0, r7
   22f70:	f001 fa06 	bl	24380 <assert_post_action>
	z_spin_lock_set_owner(l);
   22f74:	4650      	mov	r0, sl
   22f76:	f7fd fbbd 	bl	206f4 <z_spin_lock_set_owner>
	switch (event->type) {
   22f7a:	f899 200d 	ldrb.w	r2, [r9, #13]
   22f7e:	f002 021f 	and.w	r2, r2, #31
   22f82:	2a08      	cmp	r2, #8
   22f84:	d853      	bhi.n	2302e <register_events+0x10a>
   22f86:	e8df f002 	tbb	[pc, r2]
   22f8a:	4431      	.short	0x4431
   22f8c:	522d5205 	.word	0x522d5205
   22f90:	5252      	.short	0x5252
   22f92:	4b          	.byte	0x4b
   22f93:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   22f94:	f8d9 2010 	ldr.w	r2, [r9, #16]
   22f98:	6892      	ldr	r2, [r2, #8]
   22f9a:	b33a      	cbz	r2, 22fec <register_events+0xc8>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   22f9c:	2202      	movs	r2, #2
	event->state |= state;
   22f9e:	f8d9 100c 	ldr.w	r1, [r9, #12]
   22fa2:	f3c1 3c45 	ubfx	ip, r1, #13, #6
   22fa6:	ea42 020c 	orr.w	r2, r2, ip
	event->poller = NULL;
   22faa:	2000      	movs	r0, #0
	event->state |= state;
   22fac:	f362 3152 	bfi	r1, r2, #13, #6
	event->poller = NULL;
   22fb0:	f8c9 0008 	str.w	r0, [r9, #8]
	event->state |= state;
   22fb4:	f8c9 100c 	str.w	r1, [r9, #12]
			poller->is_polling = false;
   22fb8:	7020      	strb	r0, [r4, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22fba:	4650      	mov	r0, sl
   22fbc:	f7fd fb8a 	bl	206d4 <z_spin_unlock_valid>
   22fc0:	b940      	cbnz	r0, 22fd4 <register_events+0xb0>
   22fc2:	4639      	mov	r1, r7
   22fc4:	4628      	mov	r0, r5
   22fc6:	22b9      	movs	r2, #185	; 0xb9
   22fc8:	f001 f9e1 	bl	2438e <assert_print>
   22fcc:	21b9      	movs	r1, #185	; 0xb9
   22fce:	4638      	mov	r0, r7
   22fd0:	f001 f9d6 	bl	24380 <assert_post_action>
	__asm__ volatile(
   22fd4:	f38b 8811 	msr	BASEPRI, fp
   22fd8:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   22fdc:	3601      	adds	r6, #1
   22fde:	f109 0914 	add.w	r9, r9, #20
   22fe2:	e7ab      	b.n	22f3c <register_events+0x18>
		if (!k_queue_is_empty(event->queue)) {
   22fe4:	f8d9 2010 	ldr.w	r2, [r9, #16]
   22fe8:	6812      	ldr	r2, [r2, #0]
   22fea:	bb52      	cbnz	r2, 23042 <register_events+0x11e>
		} else if (!just_check && poller->is_polling) {
   22fec:	9b01      	ldr	r3, [sp, #4]
   22fee:	2b00      	cmp	r3, #0
   22ff0:	d1e3      	bne.n	22fba <register_events+0x96>
   22ff2:	7822      	ldrb	r2, [r4, #0]
   22ff4:	2a00      	cmp	r2, #0
   22ff6:	d0e0      	beq.n	22fba <register_events+0x96>
	switch (event->type) {
   22ff8:	f899 200d 	ldrb.w	r2, [r9, #13]
   22ffc:	f002 021f 	and.w	r2, r2, #31
   23000:	2a08      	cmp	r2, #8
   23002:	d86d      	bhi.n	230e0 <register_events+0x1bc>
   23004:	e8df f002 	tbb	[pc, r2]
   23008:	6c1f4932 	.word	0x6c1f4932
   2300c:	6c6c6c37 	.word	0x6c6c6c37
   23010:	5a          	.byte	0x5a
   23011:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   23012:	f8d9 2010 	ldr.w	r2, [r9, #16]
   23016:	6892      	ldr	r2, [r2, #8]
   23018:	2a00      	cmp	r2, #0
   2301a:	d0e7      	beq.n	22fec <register_events+0xc8>
			*state = K_POLL_STATE_SIGNALED;
   2301c:	2201      	movs	r2, #1
   2301e:	e7be      	b.n	22f9e <register_events+0x7a>
		if (event->msgq->used_msgs > 0) {
   23020:	f8d9 2010 	ldr.w	r2, [r9, #16]
   23024:	6a52      	ldr	r2, [r2, #36]	; 0x24
   23026:	2a00      	cmp	r2, #0
   23028:	d0e0      	beq.n	22fec <register_events+0xc8>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   2302a:	2210      	movs	r2, #16
   2302c:	e7b7      	b.n	22f9e <register_events+0x7a>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   2302e:	4628      	mov	r0, r5
   23030:	4933      	ldr	r1, [pc, #204]	; (23100 <register_events+0x1dc>)
   23032:	225c      	movs	r2, #92	; 0x5c
   23034:	f001 f9ab 	bl	2438e <assert_print>
   23038:	4831      	ldr	r0, [pc, #196]	; (23100 <register_events+0x1dc>)
   2303a:	215c      	movs	r1, #92	; 0x5c
   2303c:	f001 f9a0 	bl	24380 <assert_post_action>
		break;
   23040:	e7d4      	b.n	22fec <register_events+0xc8>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   23042:	2204      	movs	r2, #4
   23044:	e7ab      	b.n	22f9e <register_events+0x7a>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   23046:	f8d9 2010 	ldr.w	r2, [r9, #16]
   2304a:	b942      	cbnz	r2, 2305e <register_events+0x13a>
   2304c:	492c      	ldr	r1, [pc, #176]	; (23100 <register_events+0x1dc>)
   2304e:	4628      	mov	r0, r5
   23050:	2286      	movs	r2, #134	; 0x86
   23052:	f001 f99c 	bl	2438e <assert_print>
   23056:	482a      	ldr	r0, [pc, #168]	; (23100 <register_events+0x1dc>)
   23058:	2186      	movs	r1, #134	; 0x86
   2305a:	f001 f991 	bl	24380 <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   2305e:	f8d9 0010 	ldr.w	r0, [r9, #16]
   23062:	4622      	mov	r2, r4
   23064:	4649      	mov	r1, r9
   23066:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   23068:	f004 fc41 	bl	278ee <add_event>
	event->poller = poller;
   2306c:	f8c9 4008 	str.w	r4, [r9, #8]
			events_registered += 1;
   23070:	f108 0801 	add.w	r8, r8, #1
   23074:	e7a1      	b.n	22fba <register_events+0x96>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   23076:	f8d9 2010 	ldr.w	r2, [r9, #16]
   2307a:	b942      	cbnz	r2, 2308e <register_events+0x16a>
   2307c:	4920      	ldr	r1, [pc, #128]	; (23100 <register_events+0x1dc>)
   2307e:	4628      	mov	r0, r5
   23080:	228a      	movs	r2, #138	; 0x8a
   23082:	f001 f984 	bl	2438e <assert_print>
   23086:	481e      	ldr	r0, [pc, #120]	; (23100 <register_events+0x1dc>)
   23088:	218a      	movs	r1, #138	; 0x8a
   2308a:	f001 f979 	bl	24380 <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   2308e:	f8d9 0010 	ldr.w	r0, [r9, #16]
   23092:	4622      	mov	r2, r4
   23094:	4649      	mov	r1, r9
   23096:	3014      	adds	r0, #20
   23098:	e7e6      	b.n	23068 <register_events+0x144>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   2309a:	f8d9 2010 	ldr.w	r2, [r9, #16]
   2309e:	b942      	cbnz	r2, 230b2 <register_events+0x18e>
   230a0:	4917      	ldr	r1, [pc, #92]	; (23100 <register_events+0x1dc>)
   230a2:	4628      	mov	r0, r5
   230a4:	228e      	movs	r2, #142	; 0x8e
   230a6:	f001 f972 	bl	2438e <assert_print>
   230aa:	4815      	ldr	r0, [pc, #84]	; (23100 <register_events+0x1dc>)
   230ac:	218e      	movs	r1, #142	; 0x8e
   230ae:	f001 f967 	bl	24380 <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   230b2:	f8d9 0010 	ldr.w	r0, [r9, #16]
   230b6:	4622      	mov	r2, r4
   230b8:	4649      	mov	r1, r9
   230ba:	e7d5      	b.n	23068 <register_events+0x144>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   230bc:	f8d9 2010 	ldr.w	r2, [r9, #16]
   230c0:	b942      	cbnz	r2, 230d4 <register_events+0x1b0>
   230c2:	490f      	ldr	r1, [pc, #60]	; (23100 <register_events+0x1dc>)
   230c4:	4628      	mov	r0, r5
   230c6:	2292      	movs	r2, #146	; 0x92
   230c8:	f001 f961 	bl	2438e <assert_print>
   230cc:	480c      	ldr	r0, [pc, #48]	; (23100 <register_events+0x1dc>)
   230ce:	2192      	movs	r1, #146	; 0x92
   230d0:	f001 f956 	bl	24380 <assert_post_action>
		add_event(&event->msgq->poll_events, event, poller);
   230d4:	f8d9 0010 	ldr.w	r0, [r9, #16]
   230d8:	4622      	mov	r2, r4
   230da:	4649      	mov	r1, r9
   230dc:	3028      	adds	r0, #40	; 0x28
   230de:	e7c3      	b.n	23068 <register_events+0x144>
		__ASSERT(false, "invalid event type\n");
   230e0:	4628      	mov	r0, r5
   230e2:	4907      	ldr	r1, [pc, #28]	; (23100 <register_events+0x1dc>)
   230e4:	2299      	movs	r2, #153	; 0x99
   230e6:	f001 f952 	bl	2438e <assert_print>
   230ea:	4805      	ldr	r0, [pc, #20]	; (23100 <register_events+0x1dc>)
   230ec:	2199      	movs	r1, #153	; 0x99
   230ee:	f001 f947 	bl	24380 <assert_post_action>
		break;
   230f2:	e7bb      	b.n	2306c <register_events+0x148>
   230f4:	200022dc 	.word	0x200022dc
   230f8:	00028a23 	.word	0x00028a23
   230fc:	000289af 	.word	0x000289af
   23100:	0002b716 	.word	0x0002b716

00023104 <clear_event_registrations>:
{
   23104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23108:	2414      	movs	r4, #20
		__ASSERT(false, "invalid event type\n");
   2310a:	4d45      	ldr	r5, [pc, #276]	; (23220 <clear_event_registrations+0x11c>)
   2310c:	4e45      	ldr	r6, [pc, #276]	; (23224 <clear_event_registrations+0x120>)
   2310e:	f8df 9118 	ldr.w	r9, [pc, #280]	; 23228 <clear_event_registrations+0x124>
{
   23112:	4690      	mov	r8, r2
	while (num_events--) {
   23114:	460f      	mov	r7, r1
   23116:	fb04 0401 	mla	r4, r4, r1, r0
   2311a:	b90f      	cbnz	r7, 23120 <clear_event_registrations+0x1c>
}
   2311c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	event->poller = NULL;
   23120:	2300      	movs	r3, #0
   23122:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   23126:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   2312a:	f003 031f 	and.w	r3, r3, #31
   2312e:	f1a4 0a14 	sub.w	sl, r4, #20
   23132:	2b08      	cmp	r3, #8
   23134:	d83e      	bhi.n	231b4 <clear_event_registrations+0xb0>
   23136:	e8df f003 	tbb	[pc, r3]
   2313a:	2746      	.short	0x2746
   2313c:	3d1c3d05 	.word	0x3d1c3d05
   23140:	3d3d      	.short	0x3d3d
   23142:	32          	.byte	0x32
   23143:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   23144:	f854 3c04 	ldr.w	r3, [r4, #-4]
   23148:	b943      	cbnz	r3, 2315c <clear_event_registrations+0x58>
   2314a:	4629      	mov	r1, r5
   2314c:	22a9      	movs	r2, #169	; 0xa9
   2314e:	4630      	mov	r0, r6
   23150:	f001 f91d 	bl	2438e <assert_print>
   23154:	21a9      	movs	r1, #169	; 0xa9
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   23156:	4628      	mov	r0, r5
   23158:	f001 f912 	bl	24380 <assert_post_action>
	return node->next != NULL;
   2315c:	f854 3c14 	ldr.w	r3, [r4, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   23160:	b38b      	cbz	r3, 231c6 <clear_event_registrations+0xc2>
	sys_dnode_t *const prev = node->prev;
   23162:	f854 2c10 	ldr.w	r2, [r4, #-16]
	prev->next = next;
   23166:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   23168:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2316a:	2300      	movs	r3, #0
	node->prev = NULL;
   2316c:	e944 3305 	strd	r3, r3, [r4, #-20]
	sys_dnode_init(node);
}
   23170:	e029      	b.n	231c6 <clear_event_registrations+0xc2>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   23172:	f854 3c04 	ldr.w	r3, [r4, #-4]
   23176:	2b00      	cmp	r3, #0
   23178:	d1f0      	bne.n	2315c <clear_event_registrations+0x58>
   2317a:	4629      	mov	r1, r5
   2317c:	22ad      	movs	r2, #173	; 0xad
   2317e:	4630      	mov	r0, r6
   23180:	f001 f905 	bl	2438e <assert_print>
   23184:	21ad      	movs	r1, #173	; 0xad
   23186:	e7e6      	b.n	23156 <clear_event_registrations+0x52>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   23188:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2318c:	2b00      	cmp	r3, #0
   2318e:	d1e5      	bne.n	2315c <clear_event_registrations+0x58>
   23190:	4629      	mov	r1, r5
   23192:	22b1      	movs	r2, #177	; 0xb1
   23194:	4630      	mov	r0, r6
   23196:	f001 f8fa 	bl	2438e <assert_print>
   2319a:	21b1      	movs	r1, #177	; 0xb1
   2319c:	e7db      	b.n	23156 <clear_event_registrations+0x52>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   2319e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   231a2:	2b00      	cmp	r3, #0
   231a4:	d1da      	bne.n	2315c <clear_event_registrations+0x58>
   231a6:	4629      	mov	r1, r5
   231a8:	22b5      	movs	r2, #181	; 0xb5
   231aa:	4630      	mov	r0, r6
   231ac:	f001 f8ef 	bl	2438e <assert_print>
   231b0:	21b5      	movs	r1, #181	; 0xb5
   231b2:	e7d0      	b.n	23156 <clear_event_registrations+0x52>
		__ASSERT(false, "invalid event type\n");
   231b4:	4629      	mov	r1, r5
   231b6:	4630      	mov	r0, r6
   231b8:	22bc      	movs	r2, #188	; 0xbc
   231ba:	f001 f8e8 	bl	2438e <assert_print>
   231be:	21bc      	movs	r1, #188	; 0xbc
   231c0:	4628      	mov	r0, r5
   231c2:	f001 f8dd 	bl	24380 <assert_post_action>
   231c6:	4648      	mov	r0, r9
   231c8:	f7fd fa84 	bl	206d4 <z_spin_unlock_valid>
   231cc:	b940      	cbnz	r0, 231e0 <clear_event_registrations+0xdc>
   231ce:	4917      	ldr	r1, [pc, #92]	; (2322c <clear_event_registrations+0x128>)
   231d0:	4630      	mov	r0, r6
   231d2:	22b9      	movs	r2, #185	; 0xb9
   231d4:	f001 f8db 	bl	2438e <assert_print>
   231d8:	4814      	ldr	r0, [pc, #80]	; (2322c <clear_event_registrations+0x128>)
   231da:	21b9      	movs	r1, #185	; 0xb9
   231dc:	f001 f8d0 	bl	24380 <assert_post_action>
   231e0:	f388 8811 	msr	BASEPRI, r8
   231e4:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   231e8:	f04f 0340 	mov.w	r3, #64	; 0x40
   231ec:	f3ef 8811 	mrs	r8, BASEPRI
   231f0:	f383 8812 	msr	BASEPRI_MAX, r3
   231f4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   231f8:	4648      	mov	r0, r9
   231fa:	f7fd fa5d 	bl	206b8 <z_spin_lock_valid>
   231fe:	b940      	cbnz	r0, 23212 <clear_event_registrations+0x10e>
   23200:	490a      	ldr	r1, [pc, #40]	; (2322c <clear_event_registrations+0x128>)
   23202:	4630      	mov	r0, r6
   23204:	228e      	movs	r2, #142	; 0x8e
   23206:	f001 f8c2 	bl	2438e <assert_print>
   2320a:	4808      	ldr	r0, [pc, #32]	; (2322c <clear_event_registrations+0x128>)
   2320c:	218e      	movs	r1, #142	; 0x8e
   2320e:	f001 f8b7 	bl	24380 <assert_post_action>
	z_spin_lock_set_owner(l);
   23212:	4648      	mov	r0, r9
   23214:	f7fd fa6e 	bl	206f4 <z_spin_lock_set_owner>
	return k;
   23218:	3f01      	subs	r7, #1
   2321a:	4654      	mov	r4, sl
   2321c:	e77d      	b.n	2311a <clear_event_registrations+0x16>
   2321e:	bf00      	nop
   23220:	0002b716 	.word	0x0002b716
   23224:	000289af 	.word	0x000289af
   23228:	200022dc 	.word	0x200022dc
   2322c:	00028a23 	.word	0x00028a23

00023230 <k_poll_event_init>:
{
   23230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23232:	4605      	mov	r5, r0
   23234:	460f      	mov	r7, r1
   23236:	461e      	mov	r6, r3
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   23238:	4614      	mov	r4, r2
   2323a:	b142      	cbz	r2, 2324e <k_poll_event_init+0x1e>
   2323c:	4915      	ldr	r1, [pc, #84]	; (23294 <k_poll_event_init+0x64>)
   2323e:	4816      	ldr	r0, [pc, #88]	; (23298 <k_poll_event_init+0x68>)
   23240:	222d      	movs	r2, #45	; 0x2d
   23242:	f001 f8a4 	bl	2438e <assert_print>
   23246:	4813      	ldr	r0, [pc, #76]	; (23294 <k_poll_event_init+0x64>)
   23248:	212d      	movs	r1, #45	; 0x2d
   2324a:	f001 f899 	bl	24380 <assert_post_action>
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   2324e:	2f1f      	cmp	r7, #31
   23250:	d908      	bls.n	23264 <k_poll_event_init+0x34>
   23252:	4910      	ldr	r1, [pc, #64]	; (23294 <k_poll_event_init+0x64>)
   23254:	4810      	ldr	r0, [pc, #64]	; (23298 <k_poll_event_init+0x68>)
   23256:	222f      	movs	r2, #47	; 0x2f
   23258:	f001 f899 	bl	2438e <assert_print>
   2325c:	480d      	ldr	r0, [pc, #52]	; (23294 <k_poll_event_init+0x64>)
   2325e:	212f      	movs	r1, #47	; 0x2f
   23260:	f001 f88e 	bl	24380 <assert_post_action>
	__ASSERT(obj != NULL, "must provide an object\n");
   23264:	b946      	cbnz	r6, 23278 <k_poll_event_init+0x48>
   23266:	490b      	ldr	r1, [pc, #44]	; (23294 <k_poll_event_init+0x64>)
   23268:	480b      	ldr	r0, [pc, #44]	; (23298 <k_poll_event_init+0x68>)
   2326a:	2230      	movs	r2, #48	; 0x30
   2326c:	f001 f88f 	bl	2438e <assert_print>
   23270:	4808      	ldr	r0, [pc, #32]	; (23294 <k_poll_event_init+0x64>)
   23272:	2130      	movs	r1, #48	; 0x30
   23274:	f001 f884 	bl	24380 <assert_post_action>
	event->poller = NULL;
   23278:	2300      	movs	r3, #0
	event->type = type;
   2327a:	04e4      	lsls	r4, r4, #19
   2327c:	023f      	lsls	r7, r7, #8
	event->poller = NULL;
   2327e:	60ab      	str	r3, [r5, #8]
	event->type = type;
   23280:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
   23284:	7b2b      	ldrb	r3, [r5, #12]
   23286:	f407 57f8 	and.w	r7, r7, #7936	; 0x1f00
   2328a:	433c      	orrs	r4, r7
   2328c:	431c      	orrs	r4, r3
	event->obj = obj;
   2328e:	e9c5 4603 	strd	r4, r6, [r5, #12]
}
   23292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23294:	0002b716 	.word	0x0002b716
   23298:	000289af 	.word	0x000289af

0002329c <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   2329c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   232a0:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   232a2:	4b63      	ldr	r3, [pc, #396]	; (23430 <z_impl_k_poll+0x194>)
   232a4:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   232a6:	2301      	movs	r3, #1
{
   232a8:	4604      	mov	r4, r0
   232aa:	4688      	mov	r8, r1
   232ac:	4616      	mov	r6, r2
	struct z_poller *poller = &_current->poller;
   232ae:	f107 0960 	add.w	r9, r7, #96	; 0x60
	poller->is_polling = true;
   232b2:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   232b6:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
   232ba:	f3ef 8305 	mrs	r3, IPSR

	__ASSERT(!arch_is_in_isr(), "");
   232be:	b153      	cbz	r3, 232d6 <z_impl_k_poll+0x3a>
   232c0:	495c      	ldr	r1, [pc, #368]	; (23434 <z_impl_k_poll+0x198>)
   232c2:	485d      	ldr	r0, [pc, #372]	; (23438 <z_impl_k_poll+0x19c>)
   232c4:	f44f 728d 	mov.w	r2, #282	; 0x11a
   232c8:	f001 f861 	bl	2438e <assert_print>
   232cc:	4859      	ldr	r0, [pc, #356]	; (23434 <z_impl_k_poll+0x198>)
   232ce:	f44f 718d 	mov.w	r1, #282	; 0x11a
   232d2:	f001 f855 	bl	24380 <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   232d6:	b954      	cbnz	r4, 232ee <z_impl_k_poll+0x52>
   232d8:	4956      	ldr	r1, [pc, #344]	; (23434 <z_impl_k_poll+0x198>)
   232da:	4857      	ldr	r0, [pc, #348]	; (23438 <z_impl_k_poll+0x19c>)
   232dc:	f240 121b 	movw	r2, #283	; 0x11b
   232e0:	f001 f855 	bl	2438e <assert_print>
   232e4:	4853      	ldr	r0, [pc, #332]	; (23434 <z_impl_k_poll+0x198>)
   232e6:	f240 111b 	movw	r1, #283	; 0x11b
   232ea:	f001 f849 	bl	24380 <assert_post_action>
	__ASSERT(num_events >= 0, "<0 events\n");
   232ee:	f1b8 0f00 	cmp.w	r8, #0
   232f2:	da0a      	bge.n	2330a <z_impl_k_poll+0x6e>
   232f4:	494f      	ldr	r1, [pc, #316]	; (23434 <z_impl_k_poll+0x198>)
   232f6:	4850      	ldr	r0, [pc, #320]	; (23438 <z_impl_k_poll+0x19c>)
   232f8:	f44f 728e 	mov.w	r2, #284	; 0x11c
   232fc:	f001 f847 	bl	2438e <assert_print>
   23300:	484c      	ldr	r0, [pc, #304]	; (23434 <z_impl_k_poll+0x198>)
   23302:	f44f 718e 	mov.w	r1, #284	; 0x11c
   23306:	f001 f83b 	bl	24380 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   2330a:	ea56 0305 	orrs.w	r3, r6, r5
   2330e:	bf0c      	ite	eq
   23310:	2301      	moveq	r3, #1
   23312:	2300      	movne	r3, #0
   23314:	4641      	mov	r1, r8
   23316:	464a      	mov	r2, r9
   23318:	4620      	mov	r0, r4
   2331a:	f7ff fe03 	bl	22f24 <register_events>
   2331e:	4680      	mov	r8, r0
   23320:	f04f 0340 	mov.w	r3, #64	; 0x40
   23324:	f3ef 8911 	mrs	r9, BASEPRI
   23328:	f383 8812 	msr	BASEPRI_MAX, r3
   2332c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23330:	4842      	ldr	r0, [pc, #264]	; (2343c <z_impl_k_poll+0x1a0>)
   23332:	f7fd f9c1 	bl	206b8 <z_spin_lock_valid>
   23336:	b940      	cbnz	r0, 2334a <z_impl_k_poll+0xae>
   23338:	4941      	ldr	r1, [pc, #260]	; (23440 <z_impl_k_poll+0x1a4>)
   2333a:	483f      	ldr	r0, [pc, #252]	; (23438 <z_impl_k_poll+0x19c>)
   2333c:	228e      	movs	r2, #142	; 0x8e
   2333e:	f001 f826 	bl	2438e <assert_print>
   23342:	483f      	ldr	r0, [pc, #252]	; (23440 <z_impl_k_poll+0x1a4>)
   23344:	218e      	movs	r1, #142	; 0x8e
   23346:	f001 f81b 	bl	24380 <assert_post_action>
	z_spin_lock_set_owner(l);
   2334a:	483c      	ldr	r0, [pc, #240]	; (2343c <z_impl_k_poll+0x1a0>)
   2334c:	f7fd f9d2 	bl	206f4 <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   23350:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
   23354:	b9d3      	cbnz	r3, 2338c <z_impl_k_poll+0xf0>
		clear_event_registrations(events, events_registered, key);
   23356:	4620      	mov	r0, r4
   23358:	464a      	mov	r2, r9
   2335a:	4641      	mov	r1, r8
   2335c:	f7ff fed2 	bl	23104 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23360:	4836      	ldr	r0, [pc, #216]	; (2343c <z_impl_k_poll+0x1a0>)
   23362:	f7fd f9b7 	bl	206d4 <z_spin_unlock_valid>
   23366:	b940      	cbnz	r0, 2337a <z_impl_k_poll+0xde>
   23368:	4935      	ldr	r1, [pc, #212]	; (23440 <z_impl_k_poll+0x1a4>)
   2336a:	4833      	ldr	r0, [pc, #204]	; (23438 <z_impl_k_poll+0x19c>)
   2336c:	22b9      	movs	r2, #185	; 0xb9
   2336e:	f001 f80e 	bl	2438e <assert_print>
   23372:	4833      	ldr	r0, [pc, #204]	; (23440 <z_impl_k_poll+0x1a4>)
   23374:	21b9      	movs	r1, #185	; 0xb9
   23376:	f001 f803 	bl	24380 <assert_post_action>
	__asm__ volatile(
   2337a:	f389 8811 	msr	BASEPRI, r9
   2337e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, 0);

		return 0;
   23382:	2500      	movs	r5, #0
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   23384:	4628      	mov	r0, r5
   23386:	b003      	add	sp, #12
   23388:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	poller->is_polling = false;
   2338c:	2300      	movs	r3, #0
   2338e:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   23392:	ea56 0305 	orrs.w	r3, r6, r5
   23396:	d113      	bne.n	233c0 <z_impl_k_poll+0x124>
   23398:	4828      	ldr	r0, [pc, #160]	; (2343c <z_impl_k_poll+0x1a0>)
   2339a:	f7fd f99b 	bl	206d4 <z_spin_unlock_valid>
   2339e:	b940      	cbnz	r0, 233b2 <z_impl_k_poll+0x116>
   233a0:	4927      	ldr	r1, [pc, #156]	; (23440 <z_impl_k_poll+0x1a4>)
   233a2:	4825      	ldr	r0, [pc, #148]	; (23438 <z_impl_k_poll+0x19c>)
   233a4:	22b9      	movs	r2, #185	; 0xb9
   233a6:	f000 fff2 	bl	2438e <assert_print>
   233aa:	4825      	ldr	r0, [pc, #148]	; (23440 <z_impl_k_poll+0x1a4>)
   233ac:	21b9      	movs	r1, #185	; 0xb9
   233ae:	f000 ffe7 	bl	24380 <assert_post_action>
   233b2:	f389 8811 	msr	BASEPRI, r9
   233b6:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   233ba:	f06f 050a 	mvn.w	r5, #10
   233be:	e7e1      	b.n	23384 <z_impl_k_poll+0xe8>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   233c0:	e9cd 6500 	strd	r6, r5, [sp]
   233c4:	4a1f      	ldr	r2, [pc, #124]	; (23444 <z_impl_k_poll+0x1a8>)
   233c6:	481d      	ldr	r0, [pc, #116]	; (2343c <z_impl_k_poll+0x1a0>)
   233c8:	4649      	mov	r1, r9
   233ca:	f7fe fe17 	bl	21ffc <z_pend_curr>
   233ce:	4605      	mov	r5, r0
	__asm__ volatile(
   233d0:	f04f 0340 	mov.w	r3, #64	; 0x40
   233d4:	f3ef 8611 	mrs	r6, BASEPRI
   233d8:	f383 8812 	msr	BASEPRI_MAX, r3
   233dc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   233e0:	4816      	ldr	r0, [pc, #88]	; (2343c <z_impl_k_poll+0x1a0>)
   233e2:	f7fd f969 	bl	206b8 <z_spin_lock_valid>
   233e6:	b940      	cbnz	r0, 233fa <z_impl_k_poll+0x15e>
   233e8:	4915      	ldr	r1, [pc, #84]	; (23440 <z_impl_k_poll+0x1a4>)
   233ea:	4813      	ldr	r0, [pc, #76]	; (23438 <z_impl_k_poll+0x19c>)
   233ec:	228e      	movs	r2, #142	; 0x8e
   233ee:	f000 ffce 	bl	2438e <assert_print>
   233f2:	4813      	ldr	r0, [pc, #76]	; (23440 <z_impl_k_poll+0x1a4>)
   233f4:	218e      	movs	r1, #142	; 0x8e
   233f6:	f000 ffc3 	bl	24380 <assert_post_action>
	z_spin_lock_set_owner(l);
   233fa:	4810      	ldr	r0, [pc, #64]	; (2343c <z_impl_k_poll+0x1a0>)
   233fc:	f7fd f97a 	bl	206f4 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   23400:	4620      	mov	r0, r4
   23402:	4632      	mov	r2, r6
   23404:	4641      	mov	r1, r8
   23406:	f7ff fe7d 	bl	23104 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2340a:	480c      	ldr	r0, [pc, #48]	; (2343c <z_impl_k_poll+0x1a0>)
   2340c:	f7fd f962 	bl	206d4 <z_spin_unlock_valid>
   23410:	b940      	cbnz	r0, 23424 <z_impl_k_poll+0x188>
   23412:	490b      	ldr	r1, [pc, #44]	; (23440 <z_impl_k_poll+0x1a4>)
   23414:	4808      	ldr	r0, [pc, #32]	; (23438 <z_impl_k_poll+0x19c>)
   23416:	22b9      	movs	r2, #185	; 0xb9
   23418:	f000 ffb9 	bl	2438e <assert_print>
   2341c:	4808      	ldr	r0, [pc, #32]	; (23440 <z_impl_k_poll+0x1a4>)
   2341e:	21b9      	movs	r1, #185	; 0xb9
   23420:	f000 ffae 	bl	24380 <assert_post_action>
	__asm__ volatile(
   23424:	f386 8811 	msr	BASEPRI, r6
   23428:	f3bf 8f6f 	isb	sy
	return swap_rc;
   2342c:	e7aa      	b.n	23384 <z_impl_k_poll+0xe8>
   2342e:	bf00      	nop
   23430:	20002284 	.word	0x20002284
   23434:	0002b716 	.word	0x0002b716
   23438:	000289af 	.word	0x000289af
   2343c:	200022dc 	.word	0x200022dc
   23440:	00028a23 	.word	0x00028a23
   23444:	200006b8 	.word	0x200006b8

00023448 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   23448:	b570      	push	{r4, r5, r6, lr}
   2344a:	4604      	mov	r4, r0
   2344c:	460d      	mov	r5, r1
	__asm__ volatile(
   2344e:	f04f 0340 	mov.w	r3, #64	; 0x40
   23452:	f3ef 8611 	mrs	r6, BASEPRI
   23456:	f383 8812 	msr	BASEPRI_MAX, r3
   2345a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2345e:	481c      	ldr	r0, [pc, #112]	; (234d0 <z_impl_k_poll_signal_raise+0x88>)
   23460:	f7fd f92a 	bl	206b8 <z_spin_lock_valid>
   23464:	b940      	cbnz	r0, 23478 <z_impl_k_poll_signal_raise+0x30>
   23466:	491b      	ldr	r1, [pc, #108]	; (234d4 <z_impl_k_poll_signal_raise+0x8c>)
   23468:	481b      	ldr	r0, [pc, #108]	; (234d8 <z_impl_k_poll_signal_raise+0x90>)
   2346a:	228e      	movs	r2, #142	; 0x8e
   2346c:	f000 ff8f 	bl	2438e <assert_print>
   23470:	4818      	ldr	r0, [pc, #96]	; (234d4 <z_impl_k_poll_signal_raise+0x8c>)
   23472:	218e      	movs	r1, #142	; 0x8e
   23474:	f000 ff84 	bl	24380 <assert_post_action>
	z_spin_lock_set_owner(l);
   23478:	4815      	ldr	r0, [pc, #84]	; (234d0 <z_impl_k_poll_signal_raise+0x88>)
   2347a:	f7fd f93b 	bl	206f4 <z_spin_lock_set_owner>
	return list->head == list;
   2347e:	6820      	ldr	r0, [r4, #0]
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   23480:	60e5      	str	r5, [r4, #12]
	sig->signaled = 1U;
   23482:	2101      	movs	r1, #1

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   23484:	4284      	cmp	r4, r0
   23486:	60a1      	str	r1, [r4, #8]
   23488:	d112      	bne.n	234b0 <z_impl_k_poll_signal_raise+0x68>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2348a:	4811      	ldr	r0, [pc, #68]	; (234d0 <z_impl_k_poll_signal_raise+0x88>)
   2348c:	f7fd f922 	bl	206d4 <z_spin_unlock_valid>
   23490:	b940      	cbnz	r0, 234a4 <z_impl_k_poll_signal_raise+0x5c>
   23492:	4910      	ldr	r1, [pc, #64]	; (234d4 <z_impl_k_poll_signal_raise+0x8c>)
   23494:	4810      	ldr	r0, [pc, #64]	; (234d8 <z_impl_k_poll_signal_raise+0x90>)
   23496:	22b9      	movs	r2, #185	; 0xb9
   23498:	f000 ff79 	bl	2438e <assert_print>
   2349c:	480d      	ldr	r0, [pc, #52]	; (234d4 <z_impl_k_poll_signal_raise+0x8c>)
   2349e:	21b9      	movs	r1, #185	; 0xb9
   234a0:	f000 ff6e 	bl	24380 <assert_post_action>
	__asm__ volatile(
   234a4:	f386 8811 	msr	BASEPRI, r6
   234a8:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   234ac:	2400      	movs	r4, #0
   234ae:	e00d      	b.n	234cc <z_impl_k_poll_signal_raise+0x84>
	sys_dnode_t *const next = node->next;
   234b0:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   234b4:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   234b6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   234b8:	2300      	movs	r3, #0
	node->prev = NULL;
   234ba:	e9c0 3300 	strd	r3, r3, [r0]
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   234be:	f004 fa45 	bl	2794c <signal_poll_event>

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   234c2:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   234c4:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   234c6:	4802      	ldr	r0, [pc, #8]	; (234d0 <z_impl_k_poll_signal_raise+0x88>)
   234c8:	f7fe fa04 	bl	218d4 <z_reschedule>
	return rc;
}
   234cc:	4620      	mov	r0, r4
   234ce:	bd70      	pop	{r4, r5, r6, pc}
   234d0:	200022dc 	.word	0x200022dc
   234d4:	00028a23 	.word	0x00028a23
   234d8:	000289af 	.word	0x000289af

000234dc <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   234dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   234de:	4605      	mov	r5, r0
   234e0:	460e      	mov	r6, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   234e2:	f004 f8c9 	bl	27678 <k_is_in_isr>
   234e6:	b978      	cbnz	r0, 23508 <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   234e8:	4b11      	ldr	r3, [pc, #68]	; (23530 <z_thread_aligned_alloc+0x54>)
   234ea:	689b      	ldr	r3, [r3, #8]
   234ec:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   234ee:	b1e4      	cbz	r4, 2352a <z_thread_aligned_alloc+0x4e>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   234f0:	1d32      	adds	r2, r6, #4
   234f2:	d209      	bcs.n	23508 <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   234f4:	2000      	movs	r0, #0
   234f6:	2100      	movs	r1, #0
   234f8:	e9cd 0100 	strd	r0, r1, [sp]
   234fc:	f045 0104 	orr.w	r1, r5, #4
   23500:	4620      	mov	r0, r4
   23502:	f7fc fe15 	bl	20130 <k_heap_aligned_alloc>
	if (mem == NULL) {
   23506:	b908      	cbnz	r0, 2350c <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   23508:	2400      	movs	r4, #0
	}

	return ret;
   2350a:	e00e      	b.n	2352a <z_thread_aligned_alloc+0x4e>
	*heap_ref = heap;
   2350c:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   2350e:	1d04      	adds	r4, r0, #4
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
   23510:	b15d      	cbz	r5, 2352a <z_thread_aligned_alloc+0x4e>
   23512:	3d01      	subs	r5, #1
   23514:	422c      	tst	r4, r5
   23516:	d008      	beq.n	2352a <z_thread_aligned_alloc+0x4e>
   23518:	4906      	ldr	r1, [pc, #24]	; (23534 <z_thread_aligned_alloc+0x58>)
   2351a:	4807      	ldr	r0, [pc, #28]	; (23538 <z_thread_aligned_alloc+0x5c>)
   2351c:	2225      	movs	r2, #37	; 0x25
   2351e:	f000 ff36 	bl	2438e <assert_print>
   23522:	4804      	ldr	r0, [pc, #16]	; (23534 <z_thread_aligned_alloc+0x58>)
   23524:	2125      	movs	r1, #37	; 0x25
   23526:	f000 ff2b 	bl	24380 <assert_post_action>
}
   2352a:	4620      	mov	r0, r4
   2352c:	b002      	add	sp, #8
   2352e:	bd70      	pop	{r4, r5, r6, pc}
   23530:	20002284 	.word	0x20002284
   23534:	0002b737 	.word	0x0002b737
   23538:	000289af 	.word	0x000289af

0002353c <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   2353c:	4a02      	ldr	r2, [pc, #8]	; (23548 <boot_banner+0xc>)
   2353e:	4903      	ldr	r1, [pc, #12]	; (2354c <boot_banner+0x10>)
   23540:	4803      	ldr	r0, [pc, #12]	; (23550 <boot_banner+0x14>)
   23542:	f000 bd79 	b.w	24038 <printk>
   23546:	bf00      	nop
   23548:	0002b51c 	.word	0x0002b51c
   2354c:	0002b75b 	.word	0x0002b75b
   23550:	0002b76a 	.word	0x0002b76a

00023554 <ocrypto_ecdh_p256_public_key>:
   23554:	b530      	push	{r4, r5, lr}
   23556:	b099      	sub	sp, #100	; 0x64
   23558:	4605      	mov	r5, r0
   2355a:	4668      	mov	r0, sp
   2355c:	f000 f828 	bl	235b0 <ocrypto_sc_p256_from32bytes>
   23560:	4669      	mov	r1, sp
   23562:	4604      	mov	r4, r0
   23564:	a808      	add	r0, sp, #32
   23566:	f000 fa53 	bl	23a10 <ocrypto_curve_p256_scalarmult_base>
   2356a:	a908      	add	r1, sp, #32
   2356c:	4304      	orrs	r4, r0
   2356e:	4628      	mov	r0, r5
   23570:	f000 f98a 	bl	23888 <ocrypto_curve_p256_to64bytes>
   23574:	4620      	mov	r0, r4
   23576:	b019      	add	sp, #100	; 0x64
   23578:	bd30      	pop	{r4, r5, pc}
   2357a:	bf00      	nop

0002357c <ocrypto_ecdh_p256_common_secret>:
   2357c:	b570      	push	{r4, r5, r6, lr}
   2357e:	b098      	sub	sp, #96	; 0x60
   23580:	4605      	mov	r5, r0
   23582:	4668      	mov	r0, sp
   23584:	4616      	mov	r6, r2
   23586:	f000 f813 	bl	235b0 <ocrypto_sc_p256_from32bytes>
   2358a:	4631      	mov	r1, r6
   2358c:	4604      	mov	r4, r0
   2358e:	a808      	add	r0, sp, #32
   23590:	f000 f946 	bl	23820 <ocrypto_curve_p256_from64bytes>
   23594:	a908      	add	r1, sp, #32
   23596:	466a      	mov	r2, sp
   23598:	4304      	orrs	r4, r0
   2359a:	4608      	mov	r0, r1
   2359c:	f000 f982 	bl	238a4 <ocrypto_curve_p256_scalarmult>
   235a0:	a908      	add	r1, sp, #32
   235a2:	4304      	orrs	r4, r0
   235a4:	4628      	mov	r0, r5
   235a6:	f000 f96d 	bl	23884 <ocrypto_curve_p256_to32bytes>
   235aa:	4620      	mov	r0, r4
   235ac:	b018      	add	sp, #96	; 0x60
   235ae:	bd70      	pop	{r4, r5, r6, pc}

000235b0 <ocrypto_sc_p256_from32bytes>:
   235b0:	b570      	push	{r4, r5, r6, lr}
   235b2:	680b      	ldr	r3, [r1, #0]
   235b4:	4e12      	ldr	r6, [pc, #72]	; (23600 <ocrypto_sc_p256_from32bytes+0x50>)
   235b6:	ba1b      	rev	r3, r3
   235b8:	61c3      	str	r3, [r0, #28]
   235ba:	684b      	ldr	r3, [r1, #4]
   235bc:	ba1b      	rev	r3, r3
   235be:	6183      	str	r3, [r0, #24]
   235c0:	688b      	ldr	r3, [r1, #8]
   235c2:	ba1b      	rev	r3, r3
   235c4:	6143      	str	r3, [r0, #20]
   235c6:	68cb      	ldr	r3, [r1, #12]
   235c8:	ba1b      	rev	r3, r3
   235ca:	6103      	str	r3, [r0, #16]
   235cc:	690b      	ldr	r3, [r1, #16]
   235ce:	ba1b      	rev	r3, r3
   235d0:	60c3      	str	r3, [r0, #12]
   235d2:	694b      	ldr	r3, [r1, #20]
   235d4:	ba1b      	rev	r3, r3
   235d6:	6083      	str	r3, [r0, #8]
   235d8:	698b      	ldr	r3, [r1, #24]
   235da:	ba1b      	rev	r3, r3
   235dc:	6043      	str	r3, [r0, #4]
   235de:	69cb      	ldr	r3, [r1, #28]
   235e0:	ba1b      	rev	r3, r3
   235e2:	4632      	mov	r2, r6
   235e4:	6003      	str	r3, [r0, #0]
   235e6:	4601      	mov	r1, r0
   235e8:	4604      	mov	r4, r0
   235ea:	f7dd fd73 	bl	10d4 <ocrypto_bigint_sub256>
   235ee:	4631      	mov	r1, r6
   235f0:	4605      	mov	r5, r0
   235f2:	4602      	mov	r2, r0
   235f4:	4620      	mov	r0, r4
   235f6:	f7dd fd8d 	bl	1114 <ocrypto_bigint_cadd256>
   235fa:	1e68      	subs	r0, r5, #1
   235fc:	bd70      	pop	{r4, r5, r6, pc}
   235fe:	bf00      	nop
   23600:	000285f8 	.word	0x000285f8

00023604 <p256_zdblu>:
   23604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23608:	b088      	sub	sp, #32
   2360a:	460c      	mov	r4, r1
   2360c:	4606      	mov	r6, r0
   2360e:	f102 0120 	add.w	r1, r2, #32
   23612:	4668      	mov	r0, sp
   23614:	f106 0720 	add.w	r7, r6, #32
   23618:	4690      	mov	r8, r2
   2361a:	f7de f865 	bl	16e8 <ocrypto_mod_p256_sqr>
   2361e:	466a      	mov	r2, sp
   23620:	4669      	mov	r1, sp
   23622:	4668      	mov	r0, sp
   23624:	f7dd ff72 	bl	150c <ocrypto_mod_p256_add>
   23628:	4669      	mov	r1, sp
   2362a:	4638      	mov	r0, r7
   2362c:	f7de f85c 	bl	16e8 <ocrypto_mod_p256_sqr>
   23630:	463a      	mov	r2, r7
   23632:	4639      	mov	r1, r7
   23634:	4638      	mov	r0, r7
   23636:	f104 0520 	add.w	r5, r4, #32
   2363a:	f7dd ff67 	bl	150c <ocrypto_mod_p256_add>
   2363e:	466a      	mov	r2, sp
   23640:	4669      	mov	r1, sp
   23642:	4668      	mov	r0, sp
   23644:	f7dd ff62 	bl	150c <ocrypto_mod_p256_add>
   23648:	4641      	mov	r1, r8
   2364a:	4628      	mov	r0, r5
   2364c:	f7de f84c 	bl	16e8 <ocrypto_mod_p256_sqr>
   23650:	466a      	mov	r2, sp
   23652:	4641      	mov	r1, r8
   23654:	4630      	mov	r0, r6
   23656:	f7de f82f 	bl	16b8 <ocrypto_mod_p256_mul>
   2365a:	462a      	mov	r2, r5
   2365c:	4629      	mov	r1, r5
   2365e:	4668      	mov	r0, sp
   23660:	f7dd ff54 	bl	150c <ocrypto_mod_p256_add>
   23664:	462a      	mov	r2, r5
   23666:	4669      	mov	r1, sp
   23668:	4668      	mov	r0, sp
   2366a:	f7dd ff4f 	bl	150c <ocrypto_mod_p256_add>
   2366e:	4a12      	ldr	r2, [pc, #72]	; (236b8 <p256_zdblu+0xb4>)
   23670:	4669      	mov	r1, sp
   23672:	4668      	mov	r0, sp
   23674:	f7dd ff4a 	bl	150c <ocrypto_mod_p256_add>
   23678:	4669      	mov	r1, sp
   2367a:	4620      	mov	r0, r4
   2367c:	f7de f834 	bl	16e8 <ocrypto_mod_p256_sqr>
   23680:	4632      	mov	r2, r6
   23682:	4621      	mov	r1, r4
   23684:	4620      	mov	r0, r4
   23686:	f7dd ff7f 	bl	1588 <ocrypto_mod_p256_sub>
   2368a:	4632      	mov	r2, r6
   2368c:	4621      	mov	r1, r4
   2368e:	4620      	mov	r0, r4
   23690:	f7dd ff7a 	bl	1588 <ocrypto_mod_p256_sub>
   23694:	4622      	mov	r2, r4
   23696:	4631      	mov	r1, r6
   23698:	4628      	mov	r0, r5
   2369a:	f7dd ff75 	bl	1588 <ocrypto_mod_p256_sub>
   2369e:	466a      	mov	r2, sp
   236a0:	4629      	mov	r1, r5
   236a2:	4628      	mov	r0, r5
   236a4:	f7de f808 	bl	16b8 <ocrypto_mod_p256_mul>
   236a8:	463a      	mov	r2, r7
   236aa:	4629      	mov	r1, r5
   236ac:	4628      	mov	r0, r5
   236ae:	f7dd ff6b 	bl	1588 <ocrypto_mod_p256_sub>
   236b2:	b008      	add	sp, #32
   236b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   236b8:	00028698 	.word	0x00028698

000236bc <p256_zaddc>:
   236bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   236be:	b099      	sub	sp, #100	; 0x64
   236c0:	4604      	mov	r4, r0
   236c2:	460d      	mov	r5, r1
   236c4:	460a      	mov	r2, r1
   236c6:	4601      	mov	r1, r0
   236c8:	4668      	mov	r0, sp
   236ca:	f7dd ff5d 	bl	1588 <ocrypto_mod_p256_sub>
   236ce:	4669      	mov	r1, sp
   236d0:	4668      	mov	r0, sp
   236d2:	f7de f809 	bl	16e8 <ocrypto_mod_p256_sqr>
   236d6:	466a      	mov	r2, sp
   236d8:	4621      	mov	r1, r4
   236da:	a808      	add	r0, sp, #32
   236dc:	f105 0620 	add.w	r6, r5, #32
   236e0:	f104 0720 	add.w	r7, r4, #32
   236e4:	f7dd ffe8 	bl	16b8 <ocrypto_mod_p256_mul>
   236e8:	466a      	mov	r2, sp
   236ea:	4629      	mov	r1, r5
   236ec:	4668      	mov	r0, sp
   236ee:	f7dd ffe3 	bl	16b8 <ocrypto_mod_p256_mul>
   236f2:	4632      	mov	r2, r6
   236f4:	4639      	mov	r1, r7
   236f6:	a810      	add	r0, sp, #64	; 0x40
   236f8:	f7dd ff08 	bl	150c <ocrypto_mod_p256_add>
   236fc:	4632      	mov	r2, r6
   236fe:	4639      	mov	r1, r7
   23700:	4630      	mov	r0, r6
   23702:	f7dd ff41 	bl	1588 <ocrypto_mod_p256_sub>
   23706:	4631      	mov	r1, r6
   23708:	4628      	mov	r0, r5
   2370a:	f7dd ffed 	bl	16e8 <ocrypto_mod_p256_sqr>
   2370e:	466a      	mov	r2, sp
   23710:	a908      	add	r1, sp, #32
   23712:	4620      	mov	r0, r4
   23714:	f7dd fefa 	bl	150c <ocrypto_mod_p256_add>
   23718:	4622      	mov	r2, r4
   2371a:	4629      	mov	r1, r5
   2371c:	4628      	mov	r0, r5
   2371e:	f7dd ff33 	bl	1588 <ocrypto_mod_p256_sub>
   23722:	466a      	mov	r2, sp
   23724:	a908      	add	r1, sp, #32
   23726:	4668      	mov	r0, sp
   23728:	f7dd ff2e 	bl	1588 <ocrypto_mod_p256_sub>
   2372c:	466a      	mov	r2, sp
   2372e:	4639      	mov	r1, r7
   23730:	4638      	mov	r0, r7
   23732:	f7dd ffc1 	bl	16b8 <ocrypto_mod_p256_mul>
   23736:	462a      	mov	r2, r5
   23738:	a908      	add	r1, sp, #32
   2373a:	4668      	mov	r0, sp
   2373c:	f7dd ff24 	bl	1588 <ocrypto_mod_p256_sub>
   23740:	466a      	mov	r2, sp
   23742:	4631      	mov	r1, r6
   23744:	4630      	mov	r0, r6
   23746:	f7dd ffb7 	bl	16b8 <ocrypto_mod_p256_mul>
   2374a:	463a      	mov	r2, r7
   2374c:	4631      	mov	r1, r6
   2374e:	4630      	mov	r0, r6
   23750:	f7dd ff1a 	bl	1588 <ocrypto_mod_p256_sub>
   23754:	a910      	add	r1, sp, #64	; 0x40
   23756:	4668      	mov	r0, sp
   23758:	f7dd ffc6 	bl	16e8 <ocrypto_mod_p256_sqr>
   2375c:	4622      	mov	r2, r4
   2375e:	4669      	mov	r1, sp
   23760:	4620      	mov	r0, r4
   23762:	f7dd ff11 	bl	1588 <ocrypto_mod_p256_sub>
   23766:	a908      	add	r1, sp, #32
   23768:	4622      	mov	r2, r4
   2376a:	4608      	mov	r0, r1
   2376c:	f7dd ff0c 	bl	1588 <ocrypto_mod_p256_sub>
   23770:	a910      	add	r1, sp, #64	; 0x40
   23772:	aa08      	add	r2, sp, #32
   23774:	4608      	mov	r0, r1
   23776:	f7dd ff9f 	bl	16b8 <ocrypto_mod_p256_mul>
   2377a:	463a      	mov	r2, r7
   2377c:	a910      	add	r1, sp, #64	; 0x40
   2377e:	4638      	mov	r0, r7
   23780:	f7dd ff02 	bl	1588 <ocrypto_mod_p256_sub>
   23784:	b019      	add	sp, #100	; 0x64
   23786:	bdf0      	pop	{r4, r5, r6, r7, pc}

00023788 <p256_zaddu>:
   23788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2378c:	b088      	sub	sp, #32
   2378e:	460c      	mov	r4, r1
   23790:	4605      	mov	r5, r0
   23792:	4690      	mov	r8, r2
   23794:	460a      	mov	r2, r1
   23796:	4601      	mov	r1, r0
   23798:	4668      	mov	r0, sp
   2379a:	f7dd fef5 	bl	1588 <ocrypto_mod_p256_sub>
   2379e:	4669      	mov	r1, sp
   237a0:	4668      	mov	r0, sp
   237a2:	f7dd ffa1 	bl	16e8 <ocrypto_mod_p256_sqr>
   237a6:	466a      	mov	r2, sp
   237a8:	4629      	mov	r1, r5
   237aa:	4628      	mov	r0, r5
   237ac:	f104 0620 	add.w	r6, r4, #32
   237b0:	f7dd ff82 	bl	16b8 <ocrypto_mod_p256_mul>
   237b4:	f105 0720 	add.w	r7, r5, #32
   237b8:	466a      	mov	r2, sp
   237ba:	4621      	mov	r1, r4
   237bc:	4668      	mov	r0, sp
   237be:	f7dd ff7b 	bl	16b8 <ocrypto_mod_p256_mul>
   237c2:	4632      	mov	r2, r6
   237c4:	4639      	mov	r1, r7
   237c6:	4630      	mov	r0, r6
   237c8:	f7dd fede 	bl	1588 <ocrypto_mod_p256_sub>
   237cc:	4631      	mov	r1, r6
   237ce:	4620      	mov	r0, r4
   237d0:	f7dd ff8a 	bl	16e8 <ocrypto_mod_p256_sqr>
   237d4:	462a      	mov	r2, r5
   237d6:	4621      	mov	r1, r4
   237d8:	4620      	mov	r0, r4
   237da:	f7dd fed5 	bl	1588 <ocrypto_mod_p256_sub>
   237de:	466a      	mov	r2, sp
   237e0:	4621      	mov	r1, r4
   237e2:	4620      	mov	r0, r4
   237e4:	f7dd fed0 	bl	1588 <ocrypto_mod_p256_sub>
   237e8:	466a      	mov	r2, sp
   237ea:	4629      	mov	r1, r5
   237ec:	4640      	mov	r0, r8
   237ee:	f7dd fecb 	bl	1588 <ocrypto_mod_p256_sub>
   237f2:	4642      	mov	r2, r8
   237f4:	4639      	mov	r1, r7
   237f6:	4638      	mov	r0, r7
   237f8:	f7dd ff5e 	bl	16b8 <ocrypto_mod_p256_mul>
   237fc:	4622      	mov	r2, r4
   237fe:	4629      	mov	r1, r5
   23800:	4668      	mov	r0, sp
   23802:	f7dd fec1 	bl	1588 <ocrypto_mod_p256_sub>
   23806:	466a      	mov	r2, sp
   23808:	4631      	mov	r1, r6
   2380a:	4630      	mov	r0, r6
   2380c:	f7dd ff54 	bl	16b8 <ocrypto_mod_p256_mul>
   23810:	463a      	mov	r2, r7
   23812:	4631      	mov	r1, r6
   23814:	4630      	mov	r0, r6
   23816:	f7dd feb7 	bl	1588 <ocrypto_mod_p256_sub>
   2381a:	b008      	add	sp, #32
   2381c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00023820 <ocrypto_curve_p256_from64bytes>:
   23820:	b570      	push	{r4, r5, r6, lr}
   23822:	f100 0620 	add.w	r6, r0, #32
   23826:	b090      	sub	sp, #64	; 0x40
   23828:	460d      	mov	r5, r1
   2382a:	4604      	mov	r4, r0
   2382c:	f000 f914 	bl	23a58 <ocrypto_mod_p256_from_bytes>
   23830:	f105 0120 	add.w	r1, r5, #32
   23834:	4630      	mov	r0, r6
   23836:	f000 f90f 	bl	23a58 <ocrypto_mod_p256_from_bytes>
   2383a:	4621      	mov	r1, r4
   2383c:	a808      	add	r0, sp, #32
   2383e:	f7dd ff53 	bl	16e8 <ocrypto_mod_p256_sqr>
   23842:	a908      	add	r1, sp, #32
   23844:	4608      	mov	r0, r1
   23846:	4a0d      	ldr	r2, [pc, #52]	; (2387c <ocrypto_curve_p256_from64bytes+0x5c>)
   23848:	f7dd fe60 	bl	150c <ocrypto_mod_p256_add>
   2384c:	a908      	add	r1, sp, #32
   2384e:	4622      	mov	r2, r4
   23850:	4608      	mov	r0, r1
   23852:	f7dd ff31 	bl	16b8 <ocrypto_mod_p256_mul>
   23856:	a908      	add	r1, sp, #32
   23858:	4a09      	ldr	r2, [pc, #36]	; (23880 <ocrypto_curve_p256_from64bytes+0x60>)
   2385a:	4608      	mov	r0, r1
   2385c:	f7dd fe56 	bl	150c <ocrypto_mod_p256_add>
   23860:	4631      	mov	r1, r6
   23862:	4668      	mov	r0, sp
   23864:	f7dd ff40 	bl	16e8 <ocrypto_mod_p256_sqr>
   23868:	2220      	movs	r2, #32
   2386a:	4669      	mov	r1, sp
   2386c:	eb0d 0002 	add.w	r0, sp, r2
   23870:	f7dd fe1e 	bl	14b0 <ocrypto_constant_time_equal>
   23874:	3801      	subs	r0, #1
   23876:	b010      	add	sp, #64	; 0x40
   23878:	bd70      	pop	{r4, r5, r6, pc}
   2387a:	bf00      	nop
   2387c:	00028698 	.word	0x00028698
   23880:	000286b8 	.word	0x000286b8

00023884 <ocrypto_curve_p256_to32bytes>:
   23884:	f000 b902 	b.w	23a8c <ocrypto_mod_p256_to_bytes>

00023888 <ocrypto_curve_p256_to64bytes>:
   23888:	b538      	push	{r3, r4, r5, lr}
   2388a:	4604      	mov	r4, r0
   2388c:	460d      	mov	r5, r1
   2388e:	f000 f8fd 	bl	23a8c <ocrypto_mod_p256_to_bytes>
   23892:	f105 0120 	add.w	r1, r5, #32
   23896:	f104 0020 	add.w	r0, r4, #32
   2389a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2389e:	f000 b8f5 	b.w	23a8c <ocrypto_mod_p256_to_bytes>
   238a2:	bf00      	nop

000238a4 <ocrypto_curve_p256_scalarmult>:
   238a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   238a8:	4613      	mov	r3, r2
   238aa:	b0b8      	sub	sp, #224	; 0xe0
   238ac:	4a54      	ldr	r2, [pc, #336]	; (23a00 <ocrypto_curve_p256_scalarmult+0x15c>)
   238ae:	4689      	mov	r9, r1
   238b0:	4680      	mov	r8, r0
   238b2:	4619      	mov	r1, r3
   238b4:	a810      	add	r0, sp, #64	; 0x40
   238b6:	f7dd fc0d 	bl	10d4 <ocrypto_bigint_sub256>
   238ba:	4952      	ldr	r1, [pc, #328]	; (23a04 <ocrypto_curve_p256_scalarmult+0x160>)
   238bc:	4602      	mov	r2, r0
   238be:	a810      	add	r0, sp, #64	; 0x40
   238c0:	f7dd fc28 	bl	1114 <ocrypto_bigint_cadd256>
   238c4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   238c6:	494e      	ldr	r1, [pc, #312]	; (23a00 <ocrypto_curve_p256_scalarmult+0x15c>)
   238c8:	ea00 76d6 	and.w	r6, r0, r6, lsr #31
   238cc:	4607      	mov	r7, r0
   238ce:	f1c6 0201 	rsb	r2, r6, #1
   238d2:	a810      	add	r0, sp, #64	; 0x40
   238d4:	f7dd fc1e 	bl	1114 <ocrypto_bigint_cadd256>
   238d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   238da:	464a      	mov	r2, r9
   238dc:	ea6f 0a03 	mvn.w	sl, r3
   238e0:	a928      	add	r1, sp, #160	; 0xa0
   238e2:	a818      	add	r0, sp, #96	; 0x60
   238e4:	f7ff fe8e 	bl	23604 <p256_zdblu>
   238e8:	ea4f 7ada 	mov.w	sl, sl, lsr #31
   238ec:	a920      	add	r1, sp, #128	; 0x80
   238ee:	f1ca 0201 	rsb	r2, sl, #1
   238f2:	4608      	mov	r0, r1
   238f4:	f000 f892 	bl	23a1c <ocrypto_mod_p256_cneg>
   238f8:	f1c7 0701 	rsb	r7, r7, #1
   238fc:	24fe      	movs	r4, #254	; 0xfe
   238fe:	466a      	mov	r2, sp
   23900:	a918      	add	r1, sp, #96	; 0x60
   23902:	a828      	add	r0, sp, #160	; 0xa0
   23904:	f7ff ff40 	bl	23788 <p256_zaddu>
   23908:	1162      	asrs	r2, r4, #5
   2390a:	ab38      	add	r3, sp, #224	; 0xe0
   2390c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   23910:	f004 011f 	and.w	r1, r4, #31
   23914:	f852 3ca0 	ldr.w	r3, [r2, #-160]
   23918:	40cb      	lsrs	r3, r1
   2391a:	4655      	mov	r5, sl
   2391c:	f003 0a01 	and.w	sl, r3, #1
   23920:	ea8a 0505 	eor.w	r5, sl, r5
   23924:	462a      	mov	r2, r5
   23926:	a928      	add	r1, sp, #160	; 0xa0
   23928:	a818      	add	r0, sp, #96	; 0x60
   2392a:	f7dd fc4f 	bl	11cc <ocrypto_bigint_cswap256>
   2392e:	462a      	mov	r2, r5
   23930:	a930      	add	r1, sp, #192	; 0xc0
   23932:	a820      	add	r0, sp, #128	; 0x80
   23934:	f7dd fc4a 	bl	11cc <ocrypto_bigint_cswap256>
   23938:	3c01      	subs	r4, #1
   2393a:	a928      	add	r1, sp, #160	; 0xa0
   2393c:	a818      	add	r0, sp, #96	; 0x60
   2393e:	f7ff febd 	bl	236bc <p256_zaddc>
   23942:	1c63      	adds	r3, r4, #1
   23944:	d1db      	bne.n	238fe <ocrypto_curve_p256_scalarmult+0x5a>
   23946:	f1ca 0201 	rsb	r2, sl, #1
   2394a:	a920      	add	r1, sp, #128	; 0x80
   2394c:	a808      	add	r0, sp, #32
   2394e:	f000 f865 	bl	23a1c <ocrypto_mod_p256_cneg>
   23952:	ea86 060a 	eor.w	r6, r6, sl
   23956:	466a      	mov	r2, sp
   23958:	a918      	add	r1, sp, #96	; 0x60
   2395a:	a828      	add	r0, sp, #160	; 0xa0
   2395c:	f7ff ff14 	bl	23788 <p256_zaddu>
   23960:	a928      	add	r1, sp, #160	; 0xa0
   23962:	4632      	mov	r2, r6
   23964:	a818      	add	r0, sp, #96	; 0x60
   23966:	f7dd fc31 	bl	11cc <ocrypto_bigint_cswap256>
   2396a:	4632      	mov	r2, r6
   2396c:	a930      	add	r1, sp, #192	; 0xc0
   2396e:	a820      	add	r0, sp, #128	; 0x80
   23970:	f7dd fc2c 	bl	11cc <ocrypto_bigint_cswap256>
   23974:	a908      	add	r1, sp, #32
   23976:	466a      	mov	r2, sp
   23978:	4608      	mov	r0, r1
   2397a:	f7dd fe9d 	bl	16b8 <ocrypto_mod_p256_mul>
   2397e:	a908      	add	r1, sp, #32
   23980:	4608      	mov	r0, r1
   23982:	f000 f89d 	bl	23ac0 <ocrypto_mod_p256_inv>
   23986:	a908      	add	r1, sp, #32
   23988:	f108 0420 	add.w	r4, r8, #32
   2398c:	f109 0220 	add.w	r2, r9, #32
   23990:	4608      	mov	r0, r1
   23992:	f7dd fe91 	bl	16b8 <ocrypto_mod_p256_mul>
   23996:	a920      	add	r1, sp, #128	; 0x80
   23998:	aa08      	add	r2, sp, #32
   2399a:	4620      	mov	r0, r4
   2399c:	f7dd fe8c 	bl	16b8 <ocrypto_mod_p256_mul>
   239a0:	aa08      	add	r2, sp, #32
   239a2:	a918      	add	r1, sp, #96	; 0x60
   239a4:	4668      	mov	r0, sp
   239a6:	f7dd fe87 	bl	16b8 <ocrypto_mod_p256_mul>
   239aa:	4669      	mov	r1, sp
   239ac:	4668      	mov	r0, sp
   239ae:	f7dd fe9b 	bl	16e8 <ocrypto_mod_p256_sqr>
   239b2:	aa18      	add	r2, sp, #96	; 0x60
   239b4:	4669      	mov	r1, sp
   239b6:	a808      	add	r0, sp, #32
   239b8:	f7dd fe7e 	bl	16b8 <ocrypto_mod_p256_mul>
   239bc:	4621      	mov	r1, r4
   239be:	4668      	mov	r0, sp
   239c0:	f7dd fe92 	bl	16e8 <ocrypto_mod_p256_sqr>
   239c4:	aa08      	add	r2, sp, #32
   239c6:	4669      	mov	r1, sp
   239c8:	4610      	mov	r0, r2
   239ca:	f7dd fddd 	bl	1588 <ocrypto_mod_p256_sub>
   239ce:	4a0e      	ldr	r2, [pc, #56]	; (23a08 <ocrypto_curve_p256_scalarmult+0x164>)
   239d0:	a908      	add	r1, sp, #32
   239d2:	4668      	mov	r0, sp
   239d4:	f7dd fdd8 	bl	1588 <ocrypto_mod_p256_sub>
   239d8:	4620      	mov	r0, r4
   239da:	2120      	movs	r1, #32
   239dc:	f7dd fd7c 	bl	14d8 <ocrypto_constant_time_is_zero>
   239e0:	a908      	add	r1, sp, #32
   239e2:	4243      	negs	r3, r0
   239e4:	4602      	mov	r2, r0
   239e6:	4668      	mov	r0, sp
   239e8:	431f      	orrs	r7, r3
   239ea:	f7dd fbef 	bl	11cc <ocrypto_bigint_cswap256>
   239ee:	4640      	mov	r0, r8
   239f0:	4a06      	ldr	r2, [pc, #24]	; (23a0c <ocrypto_curve_p256_scalarmult+0x168>)
   239f2:	4669      	mov	r1, sp
   239f4:	f7dd fe60 	bl	16b8 <ocrypto_mod_p256_mul>
   239f8:	4638      	mov	r0, r7
   239fa:	b038      	add	sp, #224	; 0xe0
   239fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   23a00:	000286d8 	.word	0x000286d8
   23a04:	00028658 	.word	0x00028658
   23a08:	000286b8 	.word	0x000286b8
   23a0c:	00028678 	.word	0x00028678

00023a10 <ocrypto_curve_p256_scalarmult_base>:
   23a10:	460a      	mov	r2, r1
   23a12:	4901      	ldr	r1, [pc, #4]	; (23a18 <ocrypto_curve_p256_scalarmult_base+0x8>)
   23a14:	f7ff bf46 	b.w	238a4 <ocrypto_curve_p256_scalarmult>
   23a18:	00028618 	.word	0x00028618

00023a1c <ocrypto_mod_p256_cneg>:
   23a1c:	b570      	push	{r4, r5, r6, lr}
   23a1e:	b088      	sub	sp, #32
   23a20:	4604      	mov	r4, r0
   23a22:	460d      	mov	r5, r1
   23a24:	4616      	mov	r6, r2
   23a26:	2100      	movs	r1, #0
   23a28:	2220      	movs	r2, #32
   23a2a:	4668      	mov	r0, sp
   23a2c:	f004 f837 	bl	27a9e <memset>
   23a30:	2300      	movs	r3, #0
   23a32:	4629      	mov	r1, r5
   23a34:	2220      	movs	r2, #32
   23a36:	4620      	mov	r0, r4
   23a38:	9300      	str	r3, [sp, #0]
   23a3a:	f004 f80f 	bl	27a5c <memcpy>
   23a3e:	462a      	mov	r2, r5
   23a40:	4669      	mov	r1, sp
   23a42:	4668      	mov	r0, sp
   23a44:	f7dd fda0 	bl	1588 <ocrypto_mod_p256_sub>
   23a48:	4632      	mov	r2, r6
   23a4a:	4669      	mov	r1, sp
   23a4c:	4620      	mov	r0, r4
   23a4e:	f7dd fbbd 	bl	11cc <ocrypto_bigint_cswap256>
   23a52:	b008      	add	sp, #32
   23a54:	bd70      	pop	{r4, r5, r6, pc}
   23a56:	bf00      	nop

00023a58 <ocrypto_mod_p256_from_bytes>:
   23a58:	680b      	ldr	r3, [r1, #0]
   23a5a:	ba1b      	rev	r3, r3
   23a5c:	61c3      	str	r3, [r0, #28]
   23a5e:	684b      	ldr	r3, [r1, #4]
   23a60:	ba1b      	rev	r3, r3
   23a62:	6183      	str	r3, [r0, #24]
   23a64:	688b      	ldr	r3, [r1, #8]
   23a66:	ba1b      	rev	r3, r3
   23a68:	6143      	str	r3, [r0, #20]
   23a6a:	68cb      	ldr	r3, [r1, #12]
   23a6c:	ba1b      	rev	r3, r3
   23a6e:	6103      	str	r3, [r0, #16]
   23a70:	690b      	ldr	r3, [r1, #16]
   23a72:	ba1b      	rev	r3, r3
   23a74:	60c3      	str	r3, [r0, #12]
   23a76:	694b      	ldr	r3, [r1, #20]
   23a78:	ba1b      	rev	r3, r3
   23a7a:	6083      	str	r3, [r0, #8]
   23a7c:	698b      	ldr	r3, [r1, #24]
   23a7e:	ba1b      	rev	r3, r3
   23a80:	6043      	str	r3, [r0, #4]
   23a82:	69cb      	ldr	r3, [r1, #28]
   23a84:	ba1b      	rev	r3, r3
   23a86:	6003      	str	r3, [r0, #0]
   23a88:	4770      	bx	lr
   23a8a:	bf00      	nop

00023a8c <ocrypto_mod_p256_to_bytes>:
   23a8c:	69cb      	ldr	r3, [r1, #28]
   23a8e:	ba1b      	rev	r3, r3
   23a90:	6003      	str	r3, [r0, #0]
   23a92:	698b      	ldr	r3, [r1, #24]
   23a94:	ba1b      	rev	r3, r3
   23a96:	6043      	str	r3, [r0, #4]
   23a98:	694b      	ldr	r3, [r1, #20]
   23a9a:	ba1b      	rev	r3, r3
   23a9c:	6083      	str	r3, [r0, #8]
   23a9e:	690b      	ldr	r3, [r1, #16]
   23aa0:	ba1b      	rev	r3, r3
   23aa2:	60c3      	str	r3, [r0, #12]
   23aa4:	68cb      	ldr	r3, [r1, #12]
   23aa6:	ba1b      	rev	r3, r3
   23aa8:	6103      	str	r3, [r0, #16]
   23aaa:	688b      	ldr	r3, [r1, #8]
   23aac:	ba1b      	rev	r3, r3
   23aae:	6143      	str	r3, [r0, #20]
   23ab0:	684b      	ldr	r3, [r1, #4]
   23ab2:	ba1b      	rev	r3, r3
   23ab4:	6183      	str	r3, [r0, #24]
   23ab6:	680b      	ldr	r3, [r1, #0]
   23ab8:	ba1b      	rev	r3, r3
   23aba:	61c3      	str	r3, [r0, #28]
   23abc:	4770      	bx	lr
   23abe:	bf00      	nop

00023ac0 <ocrypto_mod_p256_inv>:
   23ac0:	b570      	push	{r4, r5, r6, lr}
   23ac2:	b098      	sub	sp, #96	; 0x60
   23ac4:	460d      	mov	r5, r1
   23ac6:	4606      	mov	r6, r0
   23ac8:	a810      	add	r0, sp, #64	; 0x40
   23aca:	f7dd fe0d 	bl	16e8 <ocrypto_mod_p256_sqr>
   23ace:	462a      	mov	r2, r5
   23ad0:	a910      	add	r1, sp, #64	; 0x40
   23ad2:	4668      	mov	r0, sp
   23ad4:	f7dd fdf0 	bl	16b8 <ocrypto_mod_p256_mul>
   23ad8:	4669      	mov	r1, sp
   23ada:	a810      	add	r0, sp, #64	; 0x40
   23adc:	f7dd fe04 	bl	16e8 <ocrypto_mod_p256_sqr>
   23ae0:	a910      	add	r1, sp, #64	; 0x40
   23ae2:	4608      	mov	r0, r1
   23ae4:	f7dd fe00 	bl	16e8 <ocrypto_mod_p256_sqr>
   23ae8:	466a      	mov	r2, sp
   23aea:	a910      	add	r1, sp, #64	; 0x40
   23aec:	a808      	add	r0, sp, #32
   23aee:	f7dd fde3 	bl	16b8 <ocrypto_mod_p256_mul>
   23af2:	a908      	add	r1, sp, #32
   23af4:	a810      	add	r0, sp, #64	; 0x40
   23af6:	f7dd fdf7 	bl	16e8 <ocrypto_mod_p256_sqr>
   23afa:	a910      	add	r1, sp, #64	; 0x40
   23afc:	4608      	mov	r0, r1
   23afe:	f7dd fdf3 	bl	16e8 <ocrypto_mod_p256_sqr>
   23b02:	a910      	add	r1, sp, #64	; 0x40
   23b04:	4608      	mov	r0, r1
   23b06:	f7dd fdef 	bl	16e8 <ocrypto_mod_p256_sqr>
   23b0a:	a910      	add	r1, sp, #64	; 0x40
   23b0c:	4608      	mov	r0, r1
   23b0e:	f7dd fdeb 	bl	16e8 <ocrypto_mod_p256_sqr>
   23b12:	a910      	add	r1, sp, #64	; 0x40
   23b14:	aa08      	add	r2, sp, #32
   23b16:	4608      	mov	r0, r1
   23b18:	f7dd fdce 	bl	16b8 <ocrypto_mod_p256_mul>
   23b1c:	a910      	add	r1, sp, #64	; 0x40
   23b1e:	4608      	mov	r0, r1
   23b20:	f7dd fde2 	bl	16e8 <ocrypto_mod_p256_sqr>
   23b24:	a910      	add	r1, sp, #64	; 0x40
   23b26:	4608      	mov	r0, r1
   23b28:	f7dd fdde 	bl	16e8 <ocrypto_mod_p256_sqr>
   23b2c:	a910      	add	r1, sp, #64	; 0x40
   23b2e:	466a      	mov	r2, sp
   23b30:	a808      	add	r0, sp, #32
   23b32:	f7dd fdc1 	bl	16b8 <ocrypto_mod_p256_mul>
   23b36:	2405      	movs	r4, #5
   23b38:	a908      	add	r1, sp, #32
   23b3a:	a810      	add	r0, sp, #64	; 0x40
   23b3c:	f7dd fdd4 	bl	16e8 <ocrypto_mod_p256_sqr>
   23b40:	a910      	add	r1, sp, #64	; 0x40
   23b42:	4608      	mov	r0, r1
   23b44:	f7dd fdd0 	bl	16e8 <ocrypto_mod_p256_sqr>
   23b48:	3c01      	subs	r4, #1
   23b4a:	a910      	add	r1, sp, #64	; 0x40
   23b4c:	d1f5      	bne.n	23b3a <ocrypto_mod_p256_inv+0x7a>
   23b4e:	aa08      	add	r2, sp, #32
   23b50:	4608      	mov	r0, r1
   23b52:	f7dd fdb1 	bl	16b8 <ocrypto_mod_p256_mul>
   23b56:	2405      	movs	r4, #5
   23b58:	a910      	add	r1, sp, #64	; 0x40
   23b5a:	4608      	mov	r0, r1
   23b5c:	f7dd fdc4 	bl	16e8 <ocrypto_mod_p256_sqr>
   23b60:	a910      	add	r1, sp, #64	; 0x40
   23b62:	4608      	mov	r0, r1
   23b64:	f7dd fdc0 	bl	16e8 <ocrypto_mod_p256_sqr>
   23b68:	3c01      	subs	r4, #1
   23b6a:	d1f5      	bne.n	23b58 <ocrypto_mod_p256_inv+0x98>
   23b6c:	a910      	add	r1, sp, #64	; 0x40
   23b6e:	aa08      	add	r2, sp, #32
   23b70:	4608      	mov	r0, r1
   23b72:	f7dd fda1 	bl	16b8 <ocrypto_mod_p256_mul>
   23b76:	a910      	add	r1, sp, #64	; 0x40
   23b78:	a808      	add	r0, sp, #32
   23b7a:	f7dd fdb5 	bl	16e8 <ocrypto_mod_p256_sqr>
   23b7e:	a908      	add	r1, sp, #32
   23b80:	4608      	mov	r0, r1
   23b82:	f7dd fdb1 	bl	16e8 <ocrypto_mod_p256_sqr>
   23b86:	a908      	add	r1, sp, #32
   23b88:	466a      	mov	r2, sp
   23b8a:	4668      	mov	r0, sp
   23b8c:	f7dd fd94 	bl	16b8 <ocrypto_mod_p256_mul>
   23b90:	2410      	movs	r4, #16
   23b92:	4669      	mov	r1, sp
   23b94:	a810      	add	r0, sp, #64	; 0x40
   23b96:	f7dd fda7 	bl	16e8 <ocrypto_mod_p256_sqr>
   23b9a:	a910      	add	r1, sp, #64	; 0x40
   23b9c:	4608      	mov	r0, r1
   23b9e:	f7dd fda3 	bl	16e8 <ocrypto_mod_p256_sqr>
   23ba2:	3c01      	subs	r4, #1
   23ba4:	a910      	add	r1, sp, #64	; 0x40
   23ba6:	d1f5      	bne.n	23b94 <ocrypto_mod_p256_inv+0xd4>
   23ba8:	462a      	mov	r2, r5
   23baa:	4608      	mov	r0, r1
   23bac:	f7dd fd84 	bl	16b8 <ocrypto_mod_p256_mul>
   23bb0:	2440      	movs	r4, #64	; 0x40
   23bb2:	a910      	add	r1, sp, #64	; 0x40
   23bb4:	4608      	mov	r0, r1
   23bb6:	f7dd fd97 	bl	16e8 <ocrypto_mod_p256_sqr>
   23bba:	a910      	add	r1, sp, #64	; 0x40
   23bbc:	4608      	mov	r0, r1
   23bbe:	f7dd fd93 	bl	16e8 <ocrypto_mod_p256_sqr>
   23bc2:	3c01      	subs	r4, #1
   23bc4:	d1f5      	bne.n	23bb2 <ocrypto_mod_p256_inv+0xf2>
   23bc6:	a910      	add	r1, sp, #64	; 0x40
   23bc8:	466a      	mov	r2, sp
   23bca:	4608      	mov	r0, r1
   23bcc:	f7dd fd74 	bl	16b8 <ocrypto_mod_p256_mul>
   23bd0:	2410      	movs	r4, #16
   23bd2:	a910      	add	r1, sp, #64	; 0x40
   23bd4:	4608      	mov	r0, r1
   23bd6:	f7dd fd87 	bl	16e8 <ocrypto_mod_p256_sqr>
   23bda:	a910      	add	r1, sp, #64	; 0x40
   23bdc:	4608      	mov	r0, r1
   23bde:	f7dd fd83 	bl	16e8 <ocrypto_mod_p256_sqr>
   23be2:	3c01      	subs	r4, #1
   23be4:	d1f5      	bne.n	23bd2 <ocrypto_mod_p256_inv+0x112>
   23be6:	a910      	add	r1, sp, #64	; 0x40
   23be8:	466a      	mov	r2, sp
   23bea:	4608      	mov	r0, r1
   23bec:	f7dd fd64 	bl	16b8 <ocrypto_mod_p256_mul>
   23bf0:	2410      	movs	r4, #16
   23bf2:	a910      	add	r1, sp, #64	; 0x40
   23bf4:	4608      	mov	r0, r1
   23bf6:	f7dd fd77 	bl	16e8 <ocrypto_mod_p256_sqr>
   23bfa:	a910      	add	r1, sp, #64	; 0x40
   23bfc:	4608      	mov	r0, r1
   23bfe:	f7dd fd73 	bl	16e8 <ocrypto_mod_p256_sqr>
   23c02:	3c01      	subs	r4, #1
   23c04:	d1f5      	bne.n	23bf2 <ocrypto_mod_p256_inv+0x132>
   23c06:	a910      	add	r1, sp, #64	; 0x40
   23c08:	aa08      	add	r2, sp, #32
   23c0a:	4608      	mov	r0, r1
   23c0c:	f7dd fd54 	bl	16b8 <ocrypto_mod_p256_mul>
   23c10:	462a      	mov	r2, r5
   23c12:	a910      	add	r1, sp, #64	; 0x40
   23c14:	4630      	mov	r0, r6
   23c16:	f7dd fd4f 	bl	16b8 <ocrypto_mod_p256_mul>
   23c1a:	b018      	add	sp, #96	; 0x60
   23c1c:	bd70      	pop	{r4, r5, r6, pc}
   23c1e:	bf00      	nop

00023c20 <sqrt>:
   23c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23c22:	4606      	mov	r6, r0
   23c24:	460f      	mov	r7, r1
   23c26:	f000 f827 	bl	23c78 <__ieee754_sqrt>
   23c2a:	4b12      	ldr	r3, [pc, #72]	; (23c74 <sqrt+0x54>)
   23c2c:	f993 3000 	ldrsb.w	r3, [r3]
   23c30:	3301      	adds	r3, #1
   23c32:	4604      	mov	r4, r0
   23c34:	460d      	mov	r5, r1
   23c36:	d019      	beq.n	23c6c <sqrt+0x4c>
   23c38:	4632      	mov	r2, r6
   23c3a:	463b      	mov	r3, r7
   23c3c:	4630      	mov	r0, r6
   23c3e:	4639      	mov	r1, r7
   23c40:	f7dd fd6a 	bl	1718 <__aeabi_dcmpun>
   23c44:	b990      	cbnz	r0, 23c6c <sqrt+0x4c>
   23c46:	2200      	movs	r2, #0
   23c48:	2300      	movs	r3, #0
   23c4a:	4630      	mov	r0, r6
   23c4c:	4639      	mov	r1, r7
   23c4e:	f7dd f9f9 	bl	1044 <__aeabi_dcmplt>
   23c52:	b158      	cbz	r0, 23c6c <sqrt+0x4c>
   23c54:	f001 f956 	bl	24f04 <__errno>
   23c58:	2321      	movs	r3, #33	; 0x21
   23c5a:	6003      	str	r3, [r0, #0]
   23c5c:	2200      	movs	r2, #0
   23c5e:	2300      	movs	r3, #0
   23c60:	4610      	mov	r0, r2
   23c62:	4619      	mov	r1, r3
   23c64:	f7dc fd22 	bl	6ac <__aeabi_ddiv>
   23c68:	4604      	mov	r4, r0
   23c6a:	460d      	mov	r5, r1
   23c6c:	4620      	mov	r0, r4
   23c6e:	4629      	mov	r1, r5
   23c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23c72:	bf00      	nop
   23c74:	20000800 	.word	0x20000800

00023c78 <__ieee754_sqrt>:
   23c78:	f8df c154 	ldr.w	ip, [pc, #340]	; 23dd0 <__ieee754_sqrt+0x158>
   23c7c:	ea3c 0c01 	bics.w	ip, ip, r1
   23c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23c84:	460a      	mov	r2, r1
   23c86:	4606      	mov	r6, r0
   23c88:	460d      	mov	r5, r1
   23c8a:	460c      	mov	r4, r1
   23c8c:	4607      	mov	r7, r0
   23c8e:	4603      	mov	r3, r0
   23c90:	d10f      	bne.n	23cb2 <__ieee754_sqrt+0x3a>
   23c92:	4602      	mov	r2, r0
   23c94:	460b      	mov	r3, r1
   23c96:	f7dc fbdf 	bl	458 <__aeabi_dmul>
   23c9a:	4602      	mov	r2, r0
   23c9c:	460b      	mov	r3, r1
   23c9e:	4630      	mov	r0, r6
   23ca0:	4629      	mov	r1, r5
   23ca2:	f7dc fa23 	bl	ec <__adddf3>
   23ca6:	4606      	mov	r6, r0
   23ca8:	460d      	mov	r5, r1
   23caa:	4630      	mov	r0, r6
   23cac:	4629      	mov	r1, r5
   23cae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23cb2:	2900      	cmp	r1, #0
   23cb4:	dc0e      	bgt.n	23cd4 <__ieee754_sqrt+0x5c>
   23cb6:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
   23cba:	ea5c 0707 	orrs.w	r7, ip, r7
   23cbe:	d0f4      	beq.n	23caa <__ieee754_sqrt+0x32>
   23cc0:	b141      	cbz	r1, 23cd4 <__ieee754_sqrt+0x5c>
   23cc2:	4602      	mov	r2, r0
   23cc4:	460b      	mov	r3, r1
   23cc6:	f7dc fa0f 	bl	e8 <__aeabi_dsub>
   23cca:	4602      	mov	r2, r0
   23ccc:	460b      	mov	r3, r1
   23cce:	f7dc fced 	bl	6ac <__aeabi_ddiv>
   23cd2:	e7e8      	b.n	23ca6 <__ieee754_sqrt+0x2e>
   23cd4:	1521      	asrs	r1, r4, #20
   23cd6:	d074      	beq.n	23dc2 <__ieee754_sqrt+0x14a>
   23cd8:	07cc      	lsls	r4, r1, #31
   23cda:	f3c2 0213 	ubfx	r2, r2, #0, #20
   23cde:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   23ce2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   23ce6:	bf5e      	ittt	pl
   23ce8:	0fd9      	lsrpl	r1, r3, #31
   23cea:	005b      	lslpl	r3, r3, #1
   23cec:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
   23cf0:	2400      	movs	r4, #0
   23cf2:	0fd9      	lsrs	r1, r3, #31
   23cf4:	eb01 0242 	add.w	r2, r1, r2, lsl #1
   23cf8:	107f      	asrs	r7, r7, #1
   23cfa:	005b      	lsls	r3, r3, #1
   23cfc:	2516      	movs	r5, #22
   23cfe:	4620      	mov	r0, r4
   23d00:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   23d04:	1846      	adds	r6, r0, r1
   23d06:	4296      	cmp	r6, r2
   23d08:	bfde      	ittt	le
   23d0a:	1b92      	suble	r2, r2, r6
   23d0c:	1870      	addle	r0, r6, r1
   23d0e:	1864      	addle	r4, r4, r1
   23d10:	0052      	lsls	r2, r2, #1
   23d12:	3d01      	subs	r5, #1
   23d14:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
   23d18:	ea4f 0151 	mov.w	r1, r1, lsr #1
   23d1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   23d20:	d1f0      	bne.n	23d04 <__ieee754_sqrt+0x8c>
   23d22:	4629      	mov	r1, r5
   23d24:	f04f 0e20 	mov.w	lr, #32
   23d28:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
   23d2c:	4282      	cmp	r2, r0
   23d2e:	eb06 0c05 	add.w	ip, r6, r5
   23d32:	dc02      	bgt.n	23d3a <__ieee754_sqrt+0xc2>
   23d34:	d113      	bne.n	23d5e <__ieee754_sqrt+0xe6>
   23d36:	459c      	cmp	ip, r3
   23d38:	d811      	bhi.n	23d5e <__ieee754_sqrt+0xe6>
   23d3a:	f1bc 0f00 	cmp.w	ip, #0
   23d3e:	eb0c 0506 	add.w	r5, ip, r6
   23d42:	da43      	bge.n	23dcc <__ieee754_sqrt+0x154>
   23d44:	2d00      	cmp	r5, #0
   23d46:	db41      	blt.n	23dcc <__ieee754_sqrt+0x154>
   23d48:	f100 0801 	add.w	r8, r0, #1
   23d4c:	1a12      	subs	r2, r2, r0
   23d4e:	459c      	cmp	ip, r3
   23d50:	bf88      	it	hi
   23d52:	f102 32ff 	addhi.w	r2, r2, #4294967295
   23d56:	eba3 030c 	sub.w	r3, r3, ip
   23d5a:	4431      	add	r1, r6
   23d5c:	4640      	mov	r0, r8
   23d5e:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
   23d62:	f1be 0e01 	subs.w	lr, lr, #1
   23d66:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
   23d6a:	ea4f 0343 	mov.w	r3, r3, lsl #1
   23d6e:	ea4f 0656 	mov.w	r6, r6, lsr #1
   23d72:	d1db      	bne.n	23d2c <__ieee754_sqrt+0xb4>
   23d74:	4313      	orrs	r3, r2
   23d76:	d006      	beq.n	23d86 <__ieee754_sqrt+0x10e>
   23d78:	1c48      	adds	r0, r1, #1
   23d7a:	bf13      	iteet	ne
   23d7c:	3101      	addne	r1, #1
   23d7e:	3401      	addeq	r4, #1
   23d80:	4671      	moveq	r1, lr
   23d82:	f021 0101 	bicne.w	r1, r1, #1
   23d86:	1063      	asrs	r3, r4, #1
   23d88:	0849      	lsrs	r1, r1, #1
   23d8a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
   23d8e:	07e2      	lsls	r2, r4, #31
   23d90:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   23d94:	bf48      	it	mi
   23d96:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
   23d9a:	eb03 5507 	add.w	r5, r3, r7, lsl #20
   23d9e:	460e      	mov	r6, r1
   23da0:	e783      	b.n	23caa <__ieee754_sqrt+0x32>
   23da2:	0ada      	lsrs	r2, r3, #11
   23da4:	3815      	subs	r0, #21
   23da6:	055b      	lsls	r3, r3, #21
   23da8:	2a00      	cmp	r2, #0
   23daa:	d0fa      	beq.n	23da2 <__ieee754_sqrt+0x12a>
   23dac:	02d5      	lsls	r5, r2, #11
   23dae:	d50a      	bpl.n	23dc6 <__ieee754_sqrt+0x14e>
   23db0:	f1c1 0420 	rsb	r4, r1, #32
   23db4:	fa23 f404 	lsr.w	r4, r3, r4
   23db8:	1e4d      	subs	r5, r1, #1
   23dba:	408b      	lsls	r3, r1
   23dbc:	4322      	orrs	r2, r4
   23dbe:	1b41      	subs	r1, r0, r5
   23dc0:	e78a      	b.n	23cd8 <__ieee754_sqrt+0x60>
   23dc2:	4608      	mov	r0, r1
   23dc4:	e7f0      	b.n	23da8 <__ieee754_sqrt+0x130>
   23dc6:	0052      	lsls	r2, r2, #1
   23dc8:	3101      	adds	r1, #1
   23dca:	e7ef      	b.n	23dac <__ieee754_sqrt+0x134>
   23dcc:	4680      	mov	r8, r0
   23dce:	e7bd      	b.n	23d4c <__ieee754_sqrt+0xd4>
   23dd0:	7ff00000 	.word	0x7ff00000

00023dd4 <_strtoul_l.constprop.0>:
   23dd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23dd8:	4f36      	ldr	r7, [pc, #216]	; (23eb4 <_strtoul_l.constprop.0+0xe0>)
   23dda:	4686      	mov	lr, r0
   23ddc:	460d      	mov	r5, r1
   23dde:	4628      	mov	r0, r5
   23de0:	f815 4b01 	ldrb.w	r4, [r5], #1
   23de4:	5de6      	ldrb	r6, [r4, r7]
   23de6:	f016 0608 	ands.w	r6, r6, #8
   23dea:	d1f8      	bne.n	23dde <_strtoul_l.constprop.0+0xa>
   23dec:	2c2d      	cmp	r4, #45	; 0x2d
   23dee:	d12f      	bne.n	23e50 <_strtoul_l.constprop.0+0x7c>
   23df0:	782c      	ldrb	r4, [r5, #0]
   23df2:	2601      	movs	r6, #1
   23df4:	1c85      	adds	r5, r0, #2
   23df6:	2b00      	cmp	r3, #0
   23df8:	d057      	beq.n	23eaa <_strtoul_l.constprop.0+0xd6>
   23dfa:	2b10      	cmp	r3, #16
   23dfc:	d109      	bne.n	23e12 <_strtoul_l.constprop.0+0x3e>
   23dfe:	2c30      	cmp	r4, #48	; 0x30
   23e00:	d107      	bne.n	23e12 <_strtoul_l.constprop.0+0x3e>
   23e02:	7828      	ldrb	r0, [r5, #0]
   23e04:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   23e08:	2858      	cmp	r0, #88	; 0x58
   23e0a:	d149      	bne.n	23ea0 <_strtoul_l.constprop.0+0xcc>
   23e0c:	786c      	ldrb	r4, [r5, #1]
   23e0e:	2310      	movs	r3, #16
   23e10:	3502      	adds	r5, #2
   23e12:	f04f 38ff 	mov.w	r8, #4294967295
   23e16:	2700      	movs	r7, #0
   23e18:	fbb8 f8f3 	udiv	r8, r8, r3
   23e1c:	fb03 f908 	mul.w	r9, r3, r8
   23e20:	ea6f 0909 	mvn.w	r9, r9
   23e24:	4638      	mov	r0, r7
   23e26:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
   23e2a:	f1bc 0f09 	cmp.w	ip, #9
   23e2e:	d814      	bhi.n	23e5a <_strtoul_l.constprop.0+0x86>
   23e30:	4664      	mov	r4, ip
   23e32:	42a3      	cmp	r3, r4
   23e34:	dd22      	ble.n	23e7c <_strtoul_l.constprop.0+0xa8>
   23e36:	2f00      	cmp	r7, #0
   23e38:	db1d      	blt.n	23e76 <_strtoul_l.constprop.0+0xa2>
   23e3a:	4580      	cmp	r8, r0
   23e3c:	d31b      	bcc.n	23e76 <_strtoul_l.constprop.0+0xa2>
   23e3e:	d101      	bne.n	23e44 <_strtoul_l.constprop.0+0x70>
   23e40:	45a1      	cmp	r9, r4
   23e42:	db18      	blt.n	23e76 <_strtoul_l.constprop.0+0xa2>
   23e44:	fb00 4003 	mla	r0, r0, r3, r4
   23e48:	2701      	movs	r7, #1
   23e4a:	f815 4b01 	ldrb.w	r4, [r5], #1
   23e4e:	e7ea      	b.n	23e26 <_strtoul_l.constprop.0+0x52>
   23e50:	2c2b      	cmp	r4, #43	; 0x2b
   23e52:	bf04      	itt	eq
   23e54:	782c      	ldrbeq	r4, [r5, #0]
   23e56:	1c85      	addeq	r5, r0, #2
   23e58:	e7cd      	b.n	23df6 <_strtoul_l.constprop.0+0x22>
   23e5a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
   23e5e:	f1bc 0f19 	cmp.w	ip, #25
   23e62:	d801      	bhi.n	23e68 <_strtoul_l.constprop.0+0x94>
   23e64:	3c37      	subs	r4, #55	; 0x37
   23e66:	e7e4      	b.n	23e32 <_strtoul_l.constprop.0+0x5e>
   23e68:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
   23e6c:	f1bc 0f19 	cmp.w	ip, #25
   23e70:	d804      	bhi.n	23e7c <_strtoul_l.constprop.0+0xa8>
   23e72:	3c57      	subs	r4, #87	; 0x57
   23e74:	e7dd      	b.n	23e32 <_strtoul_l.constprop.0+0x5e>
   23e76:	f04f 37ff 	mov.w	r7, #4294967295
   23e7a:	e7e6      	b.n	23e4a <_strtoul_l.constprop.0+0x76>
   23e7c:	2f00      	cmp	r7, #0
   23e7e:	da07      	bge.n	23e90 <_strtoul_l.constprop.0+0xbc>
   23e80:	2322      	movs	r3, #34	; 0x22
   23e82:	f8ce 3000 	str.w	r3, [lr]
   23e86:	f04f 30ff 	mov.w	r0, #4294967295
   23e8a:	b932      	cbnz	r2, 23e9a <_strtoul_l.constprop.0+0xc6>
   23e8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   23e90:	b106      	cbz	r6, 23e94 <_strtoul_l.constprop.0+0xc0>
   23e92:	4240      	negs	r0, r0
   23e94:	2a00      	cmp	r2, #0
   23e96:	d0f9      	beq.n	23e8c <_strtoul_l.constprop.0+0xb8>
   23e98:	b107      	cbz	r7, 23e9c <_strtoul_l.constprop.0+0xc8>
   23e9a:	1e69      	subs	r1, r5, #1
   23e9c:	6011      	str	r1, [r2, #0]
   23e9e:	e7f5      	b.n	23e8c <_strtoul_l.constprop.0+0xb8>
   23ea0:	2430      	movs	r4, #48	; 0x30
   23ea2:	2b00      	cmp	r3, #0
   23ea4:	d1b5      	bne.n	23e12 <_strtoul_l.constprop.0+0x3e>
   23ea6:	2308      	movs	r3, #8
   23ea8:	e7b3      	b.n	23e12 <_strtoul_l.constprop.0+0x3e>
   23eaa:	2c30      	cmp	r4, #48	; 0x30
   23eac:	d0a9      	beq.n	23e02 <_strtoul_l.constprop.0+0x2e>
   23eae:	230a      	movs	r3, #10
   23eb0:	e7af      	b.n	23e12 <_strtoul_l.constprop.0+0x3e>
   23eb2:	bf00      	nop
   23eb4:	0002b792 	.word	0x0002b792

00023eb8 <strtoul>:
   23eb8:	4613      	mov	r3, r2
   23eba:	460a      	mov	r2, r1
   23ebc:	4601      	mov	r1, r0
   23ebe:	4802      	ldr	r0, [pc, #8]	; (23ec8 <strtoul+0x10>)
   23ec0:	6800      	ldr	r0, [r0, #0]
   23ec2:	f7ff bf87 	b.w	23dd4 <_strtoul_l.constprop.0>
   23ec6:	bf00      	nop
   23ec8:	200006c0 	.word	0x200006c0

00023ecc <bt_melty_init>:
}
   23ecc:	2000      	movs	r0, #0
   23ece:	4770      	bx	lr

00023ed0 <k_sleep.isra.0>:
	return z_impl_k_sleep(timeout);
   23ed0:	f7fe bb82 	b.w	225d8 <z_impl_k_sleep>

00023ed4 <adc_multi_sample>:
float adc_multi_sample(int samples) {
   23ed4:	b570      	push	{r4, r5, r6, lr}
   23ed6:	4605      	mov	r5, r0
    for (int loop = 0; loop < samples; loop ++) {
   23ed8:	2600      	movs	r6, #0
	float multi_sample = 0;
   23eda:	2400      	movs	r4, #0
    for (int loop = 0; loop < samples; loop ++) {
   23edc:	42ae      	cmp	r6, r5
   23ede:	db07      	blt.n	23ef0 <adc_multi_sample+0x1c>
    return multi_sample / samples;
   23ee0:	4628      	mov	r0, r5
   23ee2:	f7dc fdd5 	bl	a90 <__aeabi_i2f>
   23ee6:	4601      	mov	r1, r0
   23ee8:	4620      	mov	r0, r4
   23eea:	f7dc fed9 	bl	ca0 <__aeabi_fdiv>
}
   23eee:	bd70      	pop	{r4, r5, r6, pc}
		multi_sample += AnalogRead(ADC_CHANNEL);
   23ef0:	2004      	movs	r0, #4
   23ef2:	f7ed faa5 	bl	11440 <AnalogRead>
   23ef6:	4601      	mov	r1, r0
   23ef8:	4620      	mov	r0, r4
   23efa:	f7dc fd15 	bl	928 <__addsf3>
    for (int loop = 0; loop < samples; loop ++) {
   23efe:	3601      	adds	r6, #1
		multi_sample += AnalogRead(ADC_CHANNEL);
   23f00:	4604      	mov	r4, r0
    for (int loop = 0; loop < samples; loop ++) {
   23f02:	e7eb      	b.n	23edc <adc_multi_sample+0x8>

00023f04 <u8_to_dec>:
 */

#include <sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   23f04:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t divisor = 100;
   23f06:	2364      	movs	r3, #100	; 0x64
{
   23f08:	4604      	mov	r4, r0
	uint8_t num_digits = 0;
	uint8_t digit;

	while (buflen > 0 && divisor > 0) {
   23f0a:	2504      	movs	r5, #4
	uint8_t num_digits = 0;
   23f0c:	2000      	movs	r0, #0
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   23f0e:	f04f 0c0a 	mov.w	ip, #10
	while (buflen > 0 && divisor > 0) {
   23f12:	b111      	cbz	r1, 23f1a <u8_to_dec+0x16>
   23f14:	3d01      	subs	r5, #1
   23f16:	d101      	bne.n	23f1c <u8_to_dec+0x18>
	}

	if (buflen) {
		*buf = '\0';
   23f18:	7025      	strb	r5, [r4, #0]
	}

	return num_digits;
}
   23f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   23f1c:	429a      	cmp	r2, r3
		digit = value / divisor;
   23f1e:	fbb2 f7f3 	udiv	r7, r2, r3
   23f22:	b2fe      	uxtb	r6, r7
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   23f24:	d202      	bcs.n	23f2c <u8_to_dec+0x28>
   23f26:	2b01      	cmp	r3, #1
   23f28:	d000      	beq.n	23f2c <u8_to_dec+0x28>
   23f2a:	b130      	cbz	r0, 23f3a <u8_to_dec+0x36>
			*buf = (char)digit + '0';
   23f2c:	3630      	adds	r6, #48	; 0x30
			buflen--;
   23f2e:	3901      	subs	r1, #1
			num_digits++;
   23f30:	3001      	adds	r0, #1
			*buf = (char)digit + '0';
   23f32:	f804 6b01 	strb.w	r6, [r4], #1
			buflen--;
   23f36:	b2c9      	uxtb	r1, r1
			num_digits++;
   23f38:	b2c0      	uxtb	r0, r0
		value -= digit * divisor;
   23f3a:	fb03 2217 	mls	r2, r3, r7, r2
   23f3e:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   23f40:	fbb3 f3fc 	udiv	r3, r3, ip
   23f44:	e7e5      	b.n	23f12 <u8_to_dec+0xe>

00023f46 <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   23f46:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   23f4a:	b2db      	uxtb	r3, r3
   23f4c:	2b09      	cmp	r3, #9
   23f4e:	d802      	bhi.n	23f56 <char2hex+0x10>
		*x = c - '0';
   23f50:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   23f52:	2000      	movs	r0, #0
   23f54:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   23f56:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   23f5a:	2b05      	cmp	r3, #5
   23f5c:	d802      	bhi.n	23f64 <char2hex+0x1e>
		*x = c - 'a' + 10;
   23f5e:	3857      	subs	r0, #87	; 0x57
   23f60:	7008      	strb	r0, [r1, #0]
   23f62:	e7f6      	b.n	23f52 <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   23f64:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   23f68:	2b05      	cmp	r3, #5
   23f6a:	d801      	bhi.n	23f70 <char2hex+0x2a>
		*x = c - 'A' + 10;
   23f6c:	3837      	subs	r0, #55	; 0x37
   23f6e:	e7f7      	b.n	23f60 <char2hex+0x1a>
		return -EINVAL;
   23f70:	f06f 0015 	mvn.w	r0, #21
}
   23f74:	4770      	bx	lr

00023f76 <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   23f76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   23f78:	4604      	mov	r4, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   23f7a:	f001 0001 	and.w	r0, r1, #1
   23f7e:	eb00 0551 	add.w	r5, r0, r1, lsr #1
   23f82:	429d      	cmp	r5, r3
   23f84:	ea4f 0651 	mov.w	r6, r1, lsr #1
   23f88:	d903      	bls.n	23f92 <hex2bin+0x1c>
		return 0;
   23f8a:	2500      	movs	r5, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   23f8c:	4628      	mov	r0, r5
   23f8e:	b003      	add	sp, #12
   23f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   23f92:	b158      	cbz	r0, 23fac <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   23f94:	7820      	ldrb	r0, [r4, #0]
   23f96:	f10d 0107 	add.w	r1, sp, #7
   23f9a:	f7ff ffd4 	bl	23f46 <char2hex>
   23f9e:	2800      	cmp	r0, #0
   23fa0:	dbf3      	blt.n	23f8a <hex2bin+0x14>
		buf[0] = dec;
   23fa2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   23fa6:	f802 3b01 	strb.w	r3, [r2], #1
		hex++;
   23faa:	3401      	adds	r4, #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   23fac:	3401      	adds	r4, #1
   23fae:	4416      	add	r6, r2
   23fb0:	42b2      	cmp	r2, r6
   23fb2:	d0eb      	beq.n	23f8c <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   23fb4:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   23fb8:	f10d 0107 	add.w	r1, sp, #7
   23fbc:	f7ff ffc3 	bl	23f46 <char2hex>
   23fc0:	2800      	cmp	r0, #0
   23fc2:	dbe2      	blt.n	23f8a <hex2bin+0x14>
		buf[i] = dec << 4;
   23fc4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   23fc8:	011b      	lsls	r3, r3, #4
   23fca:	7013      	strb	r3, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   23fcc:	f814 0b02 	ldrb.w	r0, [r4], #2
   23fd0:	f7ff ffb9 	bl	23f46 <char2hex>
   23fd4:	2800      	cmp	r0, #0
   23fd6:	dbd8      	blt.n	23f8a <hex2bin+0x14>
		buf[i] += dec;
   23fd8:	7813      	ldrb	r3, [r2, #0]
   23fda:	f89d 1007 	ldrb.w	r1, [sp, #7]
   23fde:	440b      	add	r3, r1
   23fe0:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   23fe4:	e7e4      	b.n	23fb0 <hex2bin+0x3a>

00023fe6 <sys_notify_validate>:
	if (notify == NULL) {
   23fe6:	4603      	mov	r3, r0
   23fe8:	b140      	cbz	r0, 23ffc <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   23fea:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   23fec:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
   23ff0:	2a02      	cmp	r2, #2
   23ff2:	d006      	beq.n	24002 <sys_notify_validate+0x1c>
   23ff4:	2a03      	cmp	r2, #3
   23ff6:	d004      	beq.n	24002 <sys_notify_validate+0x1c>
   23ff8:	2a01      	cmp	r2, #1
   23ffa:	d005      	beq.n	24008 <sys_notify_validate+0x22>
		return -EINVAL;
   23ffc:	f06f 0015 	mvn.w	r0, #21
}
   24000:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   24002:	681a      	ldr	r2, [r3, #0]
   24004:	2a00      	cmp	r2, #0
   24006:	d0f9      	beq.n	23ffc <sys_notify_validate+0x16>
		notify->result = 0;
   24008:	2000      	movs	r0, #0
   2400a:	6098      	str	r0, [r3, #8]
   2400c:	4770      	bx	lr

0002400e <arch_printk_char_out>:
}
   2400e:	2000      	movs	r0, #0
   24010:	4770      	bx	lr

00024012 <str_out>:
{
   24012:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   24014:	688a      	ldr	r2, [r1, #8]
   24016:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   24018:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   2401a:	b114      	cbz	r4, 24022 <str_out+0x10>
   2401c:	684b      	ldr	r3, [r1, #4]
   2401e:	4293      	cmp	r3, r2
   24020:	dc01      	bgt.n	24026 <str_out+0x14>
		ctx->count++;
   24022:	608d      	str	r5, [r1, #8]
}
   24024:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   24026:	3b01      	subs	r3, #1
   24028:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   2402a:	bf08      	it	eq
   2402c:	2200      	moveq	r2, #0
   2402e:	608d      	str	r5, [r1, #8]
   24030:	bf0c      	ite	eq
   24032:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   24034:	54a0      	strbne	r0, [r4, r2]
   24036:	e7f5      	b.n	24024 <str_out+0x12>

00024038 <printk>:
{
   24038:	b40f      	push	{r0, r1, r2, r3}
   2403a:	b507      	push	{r0, r1, r2, lr}
   2403c:	a904      	add	r1, sp, #16
   2403e:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   24042:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   24044:	f7ee f922 	bl	1228c <vprintk>
}
   24048:	b003      	add	sp, #12
   2404a:	f85d eb04 	ldr.w	lr, [sp], #4
   2404e:	b004      	add	sp, #16
   24050:	4770      	bx	lr

00024052 <snprintk>:
{
   24052:	b40c      	push	{r2, r3}
   24054:	b507      	push	{r0, r1, r2, lr}
   24056:	ab04      	add	r3, sp, #16
   24058:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   2405c:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   2405e:	f7ee f923 	bl	122a8 <vsnprintk>
}
   24062:	b003      	add	sp, #12
   24064:	f85d eb04 	ldr.w	lr, [sp], #4
   24068:	b002      	add	sp, #8
   2406a:	4770      	bx	lr

0002406c <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2406c:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   2406e:	f013 0307 	ands.w	r3, r3, #7
   24072:	d105      	bne.n	24080 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   24074:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   24076:	2b00      	cmp	r3, #0
   24078:	bf0c      	ite	eq
   2407a:	2000      	moveq	r0, #0
   2407c:	2003      	movne	r0, #3
   2407e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   24080:	2b02      	cmp	r3, #2
   24082:	d105      	bne.n	24090 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   24084:	8bc3      	ldrh	r3, [r0, #30]
		evt = EVT_STOP;
   24086:	2b00      	cmp	r3, #0
   24088:	bf14      	ite	ne
   2408a:	2000      	movne	r0, #0
   2408c:	2004      	moveq	r0, #4
   2408e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   24090:	2b01      	cmp	r3, #1
   24092:	d105      	bne.n	240a0 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   24094:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   24096:	2b00      	cmp	r3, #0
   24098:	bf0c      	ite	eq
   2409a:	2000      	moveq	r0, #0
   2409c:	2005      	movne	r0, #5
   2409e:	4770      	bx	lr
	int evt = EVT_NOP;
   240a0:	2000      	movs	r0, #0
}
   240a2:	4770      	bx	lr

000240a4 <notify_one>:
{
   240a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   240a8:	460d      	mov	r5, r1
   240aa:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   240ac:	4619      	mov	r1, r3
   240ae:	1d28      	adds	r0, r5, #4
{
   240b0:	4690      	mov	r8, r2
   240b2:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   240b4:	f7ee f8b0 	bl	12218 <sys_notify_finalize>
	if (cb) {
   240b8:	4604      	mov	r4, r0
   240ba:	b138      	cbz	r0, 240cc <notify_one+0x28>
		cb(mgr, cli, state, res);
   240bc:	4633      	mov	r3, r6
   240be:	4642      	mov	r2, r8
   240c0:	4629      	mov	r1, r5
   240c2:	4638      	mov	r0, r7
   240c4:	46a4      	mov	ip, r4
}
   240c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   240ca:	4760      	bx	ip
}
   240cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000240d0 <validate_args>:
{
   240d0:	b510      	push	{r4, lr}
   240d2:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   240d4:	b140      	cbz	r0, 240e8 <validate_args+0x18>
   240d6:	b139      	cbz	r1, 240e8 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   240d8:	1d08      	adds	r0, r1, #4
   240da:	f7ff ff84 	bl	23fe6 <sys_notify_validate>
	if ((rv == 0)
   240de:	b928      	cbnz	r0, 240ec <validate_args+0x1c>
	    && ((cli->notify.flags
   240e0:	68a3      	ldr	r3, [r4, #8]
   240e2:	f033 0303 	bics.w	r3, r3, #3
   240e6:	d001      	beq.n	240ec <validate_args+0x1c>
		rv = -EINVAL;
   240e8:	f06f 0015 	mvn.w	r0, #21
}
   240ec:	bd10      	pop	{r4, pc}

000240ee <onoff_manager_init>:
{
   240ee:	b538      	push	{r3, r4, r5, lr}
   240f0:	460c      	mov	r4, r1
	if ((mgr == NULL)
   240f2:	4605      	mov	r5, r0
   240f4:	b158      	cbz	r0, 2410e <onoff_manager_init+0x20>
	    || (transitions == NULL)
   240f6:	b151      	cbz	r1, 2410e <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   240f8:	680b      	ldr	r3, [r1, #0]
   240fa:	b143      	cbz	r3, 2410e <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   240fc:	684b      	ldr	r3, [r1, #4]
   240fe:	b133      	cbz	r3, 2410e <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   24100:	2220      	movs	r2, #32
   24102:	2100      	movs	r1, #0
   24104:	f003 fccb 	bl	27a9e <memset>
   24108:	612c      	str	r4, [r5, #16]
	return 0;
   2410a:	2000      	movs	r0, #0
}
   2410c:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   2410e:	f06f 0015 	mvn.w	r0, #21
   24112:	e7fb      	b.n	2410c <onoff_manager_init+0x1e>

00024114 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   24114:	4604      	mov	r4, r0
   24116:	b508      	push	{r3, lr}
   24118:	4608      	mov	r0, r1
   2411a:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   2411c:	461a      	mov	r2, r3
   2411e:	47a0      	blx	r4
	return z_impl_z_current_get();
   24120:	f7fe fa8a 	bl	22638 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   24124:	f7f0 fc5a 	bl	149dc <z_impl_k_thread_abort>

00024128 <chunk_size>:
		return ((uint16_t *)cmem)[f];
   24128:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   2412c:	8840      	ldrh	r0, [r0, #2]
}
   2412e:	0840      	lsrs	r0, r0, #1
   24130:	4770      	bx	lr

00024132 <free_list_add>:
{
   24132:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24134:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   24136:	f7ff fff7 	bl	24128 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   2413a:	fab0 f080 	clz	r0, r0
   2413e:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   24142:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   24146:	00ca      	lsls	r2, r1, #3
   24148:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   2414c:	1d17      	adds	r7, r2, #4
{
   2414e:	460c      	mov	r4, r1
   24150:	3206      	adds	r2, #6
   24152:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   24154:	b956      	cbnz	r6, 2416c <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   24156:	2101      	movs	r1, #1
   24158:	fa01 f000 	lsl.w	r0, r1, r0
   2415c:	68d9      	ldr	r1, [r3, #12]
   2415e:	4301      	orrs	r1, r0
   24160:	60d9      	str	r1, [r3, #12]
		b->next = c;
   24162:	f8cc 4010 	str.w	r4, [ip, #16]
   24166:	53dd      	strh	r5, [r3, r7]
   24168:	529d      	strh	r5, [r3, r2]
}
   2416a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   2416c:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   2416e:	3104      	adds	r1, #4
   24170:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   24172:	53d8      	strh	r0, [r3, r7]
   24174:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   24178:	529e      	strh	r6, [r3, r2]
   2417a:	80c5      	strh	r5, [r0, #6]
   2417c:	525d      	strh	r5, [r3, r1]
   2417e:	e7f4      	b.n	2416a <free_list_add+0x38>

00024180 <free_list_remove_bidx>:
{
   24180:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   24182:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   24186:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   24188:	4299      	cmp	r1, r3
   2418a:	f102 0104 	add.w	r1, r2, #4
   2418e:	d10a      	bne.n	241a6 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   24190:	2301      	movs	r3, #1
   24192:	fa03 f202 	lsl.w	r2, r3, r2
   24196:	68c3      	ldr	r3, [r0, #12]
   24198:	ea23 0302 	bic.w	r3, r3, r2
   2419c:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   2419e:	2300      	movs	r3, #0
   241a0:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   241a4:	bd10      	pop	{r4, pc}
   241a6:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   241a8:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   241ac:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   241b0:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   241b4:	80cb      	strh	r3, [r1, #6]
   241b6:	8082      	strh	r2, [r0, #4]
}
   241b8:	e7f4      	b.n	241a4 <free_list_remove_bidx+0x24>

000241ba <free_list_remove>:
{
   241ba:	b508      	push	{r3, lr}
   241bc:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   241be:	f7ff ffb3 	bl	24128 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   241c2:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   241c6:	f1c2 021f 	rsb	r2, r2, #31
   241ca:	4618      	mov	r0, r3
}
   241cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   241d0:	f7ff bfd6 	b.w	24180 <free_list_remove_bidx>

000241d4 <alloc_chunk>:
{
   241d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   241d8:	fab1 f581 	clz	r5, r1
   241dc:	f1c5 091f 	rsb	r9, r5, #31
	if (b->next) {
   241e0:	eb00 0789 	add.w	r7, r0, r9, lsl #2
{
   241e4:	4603      	mov	r3, r0
	if (b->next) {
   241e6:	693a      	ldr	r2, [r7, #16]
{
   241e8:	460e      	mov	r6, r1
	if (b->next) {
   241ea:	b1c2      	cbz	r2, 2421e <alloc_chunk+0x4a>
   241ec:	f04f 0803 	mov.w	r8, #3
			chunkid_t c = b->next;
   241f0:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
   241f2:	4618      	mov	r0, r3
   241f4:	4621      	mov	r1, r4
   241f6:	f7ff ff97 	bl	24128 <chunk_size>
   241fa:	42b0      	cmp	r0, r6
   241fc:	d306      	bcc.n	2420c <alloc_chunk+0x38>
				free_list_remove_bidx(h, c, bi);
   241fe:	464a      	mov	r2, r9
		free_list_remove_bidx(h, c, minbucket);
   24200:	4618      	mov	r0, r3
   24202:	f7ff ffbd 	bl	24180 <free_list_remove_bidx>
}
   24206:	4620      	mov	r0, r4
   24208:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   2420c:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
		} while (--i && b->next != first);
   24210:	f1b8 0801 	subs.w	r8, r8, #1
   24214:	88c0      	ldrh	r0, [r0, #6]
			b->next = next_free_chunk(h, c);
   24216:	6138      	str	r0, [r7, #16]
		} while (--i && b->next != first);
   24218:	d001      	beq.n	2421e <alloc_chunk+0x4a>
   2421a:	4282      	cmp	r2, r0
   2421c:	d1e8      	bne.n	241f0 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   2421e:	f1c5 0220 	rsb	r2, r5, #32
   24222:	f04f 34ff 	mov.w	r4, #4294967295
   24226:	4094      	lsls	r4, r2
   24228:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   2422a:	4014      	ands	r4, r2
   2422c:	d0eb      	beq.n	24206 <alloc_chunk+0x32>
		int minbucket = __builtin_ctz(bmask);
   2422e:	fa94 f2a4 	rbit	r2, r4
   24232:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   24236:	1d11      	adds	r1, r2, #4
   24238:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   2423c:	4621      	mov	r1, r4
   2423e:	e7df      	b.n	24200 <alloc_chunk+0x2c>

00024240 <merge_chunks>:
{
   24240:	b538      	push	{r3, r4, r5, lr}
   24242:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   24244:	f7ff ff70 	bl	24128 <chunk_size>
{
   24248:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   2424a:	4604      	mov	r4, r0
   2424c:	4611      	mov	r1, r2
   2424e:	4618      	mov	r0, r3
   24250:	f7ff ff6a 	bl	24128 <chunk_size>
		((uint16_t *)cmem)[f] = val;
   24254:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   24258:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2425a:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   2425c:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   2425e:	4618      	mov	r0, r3
   24260:	f7ff ff62 	bl	24128 <chunk_size>
	void *cmem = &buf[c];
   24264:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   24266:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   2426a:	bd38      	pop	{r3, r4, r5, pc}

0002426c <split_chunks>:
{
   2426c:	b538      	push	{r3, r4, r5, lr}
   2426e:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   24270:	f7ff ff5a 	bl	24128 <chunk_size>
{
   24274:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   24276:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   24278:	1a51      	subs	r1, r2, r1
   2427a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   2427e:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   24280:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   24282:	8060      	strh	r0, [r4, #2]
   24284:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   24288:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   2428a:	8044      	strh	r4, [r0, #2]
   2428c:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   24290:	4618      	mov	r0, r3
   24292:	4611      	mov	r1, r2
   24294:	f7ff ff48 	bl	24128 <chunk_size>
	void *cmem = &buf[c];
   24298:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   2429a:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   2429e:	bd38      	pop	{r3, r4, r5, pc}

000242a0 <free_chunk>:
{
   242a0:	b538      	push	{r3, r4, r5, lr}
   242a2:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   242a4:	f7ff ff40 	bl	24128 <chunk_size>
   242a8:	460c      	mov	r4, r1
   242aa:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   242ac:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   242b0:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   242b2:	07da      	lsls	r2, r3, #31
   242b4:	d40a      	bmi.n	242cc <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   242b6:	4628      	mov	r0, r5
   242b8:	f7ff ff7f 	bl	241ba <free_list_remove>
	return c + chunk_size(h, c);
   242bc:	4621      	mov	r1, r4
   242be:	4628      	mov	r0, r5
   242c0:	f7ff ff32 	bl	24128 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   242c4:	1822      	adds	r2, r4, r0
   242c6:	4628      	mov	r0, r5
   242c8:	f7ff ffba 	bl	24240 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   242cc:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   242d0:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   242d2:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   242d6:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   242d8:	07db      	lsls	r3, r3, #31
   242da:	d40c      	bmi.n	242f6 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   242dc:	4628      	mov	r0, r5
   242de:	f7ff ff6c 	bl	241ba <free_list_remove>
		return ((uint16_t *)cmem)[f];
   242e2:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   242e6:	4622      	mov	r2, r4
   242e8:	1a61      	subs	r1, r4, r1
   242ea:	4628      	mov	r0, r5
   242ec:	f7ff ffa8 	bl	24240 <merge_chunks>
   242f0:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   242f4:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   242f6:	4621      	mov	r1, r4
   242f8:	4628      	mov	r0, r5
}
   242fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   242fe:	f7ff bf18 	b.w	24132 <free_list_add>

00024302 <sys_heap_alloc>:
{
   24302:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   24304:	6805      	ldr	r5, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   24306:	b909      	cbnz	r1, 2430c <sys_heap_alloc+0xa>
		return NULL;
   24308:	2000      	movs	r0, #0
}
   2430a:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   2430c:	68ab      	ldr	r3, [r5, #8]
   2430e:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   24312:	d9f9      	bls.n	24308 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   24314:	310b      	adds	r1, #11
   24316:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   24318:	4621      	mov	r1, r4
   2431a:	4628      	mov	r0, r5
   2431c:	f7ff ff5a 	bl	241d4 <alloc_chunk>
	if (c == 0U) {
   24320:	4606      	mov	r6, r0
   24322:	2800      	cmp	r0, #0
   24324:	d0f0      	beq.n	24308 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   24326:	4601      	mov	r1, r0
   24328:	4628      	mov	r0, r5
   2432a:	f7ff fefd 	bl	24128 <chunk_size>
   2432e:	42a0      	cmp	r0, r4
   24330:	d907      	bls.n	24342 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   24332:	1932      	adds	r2, r6, r4
   24334:	4628      	mov	r0, r5
   24336:	f7ff ff99 	bl	2426c <split_chunks>
		free_list_add(h, c + chunk_sz);
   2433a:	4611      	mov	r1, r2
   2433c:	4628      	mov	r0, r5
   2433e:	f7ff fef8 	bl	24132 <free_list_add>
	void *cmem = &buf[c];
   24342:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   24346:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   24348:	8853      	ldrh	r3, [r2, #2]
   2434a:	f043 0301 	orr.w	r3, r3, #1
   2434e:	8053      	strh	r3, [r2, #2]
   24350:	3004      	adds	r0, #4
	return mem;
   24352:	e7da      	b.n	2430a <sys_heap_alloc+0x8>

00024354 <outs>:
{
   24354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24358:	4607      	mov	r7, r0
   2435a:	4688      	mov	r8, r1
   2435c:	4615      	mov	r5, r2
   2435e:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   24360:	4614      	mov	r4, r2
   24362:	42b4      	cmp	r4, r6
   24364:	eba4 0005 	sub.w	r0, r4, r5
   24368:	d302      	bcc.n	24370 <outs+0x1c>
   2436a:	b93e      	cbnz	r6, 2437c <outs+0x28>
   2436c:	7823      	ldrb	r3, [r4, #0]
   2436e:	b12b      	cbz	r3, 2437c <outs+0x28>
		int rc = out((int)*sp++, ctx);
   24370:	f814 0b01 	ldrb.w	r0, [r4], #1
   24374:	4641      	mov	r1, r8
   24376:	47b8      	blx	r7
		if (rc < 0) {
   24378:	2800      	cmp	r0, #0
   2437a:	daf2      	bge.n	24362 <outs+0xe>
}
   2437c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00024380 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   24380:	4040      	eors	r0, r0
   24382:	f380 8811 	msr	BASEPRI, r0
   24386:	f04f 0004 	mov.w	r0, #4
   2438a:	df02      	svc	2
}
   2438c:	4770      	bx	lr

0002438e <assert_print>:

void assert_print(const char *fmt, ...)
{
   2438e:	b40f      	push	{r0, r1, r2, r3}
   24390:	b507      	push	{r0, r1, r2, lr}
   24392:	a904      	add	r1, sp, #16
   24394:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   24398:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   2439a:	f7ed ff77 	bl	1228c <vprintk>

	va_end(ap);
}
   2439e:	b003      	add	sp, #12
   243a0:	f85d eb04 	ldr.w	lr, [sp], #4
   243a4:	b004      	add	sp, #16
   243a6:	4770      	bx	lr

000243a8 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_LBS_SECURITY_ENABLED, 1);

GEN_ABS_SYM_END
   243a8:	4770      	bx	lr

000243aa <z_log_minimal_printk>:
{
   243aa:	b40f      	push	{r0, r1, r2, r3}
   243ac:	b507      	push	{r0, r1, r2, lr}
   243ae:	a904      	add	r1, sp, #16
   243b0:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   243b4:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   243b6:	f7ed ff69 	bl	1228c <vprintk>
}
   243ba:	b003      	add	sp, #12
   243bc:	f85d eb04 	ldr.w	lr, [sp], #4
   243c0:	b004      	add	sp, #16
   243c2:	4770      	bx	lr

000243c4 <nvs_flash_rd>:
{
   243c4:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   243c6:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   243c8:	8984      	ldrh	r4, [r0, #12]
	rc = flash_read(fs->flash_device, offset, data, len);
   243ca:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   243cc:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   243ce:	fa16 f181 	uxtah	r1, r6, r1
   243d2:	fb05 1104 	mla	r1, r5, r4, r1
	return api->read(dev, offset, data, len);
   243d6:	6884      	ldr	r4, [r0, #8]
   243d8:	6824      	ldr	r4, [r4, #0]
   243da:	46a4      	mov	ip, r4
}
   243dc:	bc70      	pop	{r4, r5, r6}
   243de:	4760      	bx	ip

000243e0 <nvs_flash_block_cmp>:
{
   243e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   243e4:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   243e6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   243e8:	681d      	ldr	r5, [r3, #0]
   243ea:	426d      	negs	r5, r5
{
   243ec:	b089      	sub	sp, #36	; 0x24
   243ee:	4681      	mov	r9, r0
   243f0:	460e      	mov	r6, r1
   243f2:	4617      	mov	r7, r2
	block_size =
   243f4:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   243f8:	b91c      	cbnz	r4, 24402 <nvs_flash_block_cmp+0x22>
	return 0;
   243fa:	4620      	mov	r0, r4
}
   243fc:	b009      	add	sp, #36	; 0x24
   243fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   24402:	42ac      	cmp	r4, r5
   24404:	46a0      	mov	r8, r4
   24406:	bf28      	it	cs
   24408:	46a8      	movcs	r8, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   2440a:	4643      	mov	r3, r8
   2440c:	466a      	mov	r2, sp
   2440e:	4631      	mov	r1, r6
   24410:	4648      	mov	r0, r9
   24412:	f7ff ffd7 	bl	243c4 <nvs_flash_rd>
		if (rc) {
   24416:	2800      	cmp	r0, #0
   24418:	d1f0      	bne.n	243fc <nvs_flash_block_cmp+0x1c>
		rc = memcmp(data8, buf, bytes_to_cmp);
   2441a:	4642      	mov	r2, r8
   2441c:	4669      	mov	r1, sp
   2441e:	4638      	mov	r0, r7
   24420:	f003 fb0c 	bl	27a3c <memcmp>
		if (rc) {
   24424:	b920      	cbnz	r0, 24430 <nvs_flash_block_cmp+0x50>
		len -= bytes_to_cmp;
   24426:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   2442a:	4446      	add	r6, r8
		data8 += bytes_to_cmp;
   2442c:	4447      	add	r7, r8
   2442e:	e7e3      	b.n	243f8 <nvs_flash_block_cmp+0x18>
			return 1;
   24430:	2001      	movs	r0, #1
   24432:	e7e3      	b.n	243fc <nvs_flash_block_cmp+0x1c>

00024434 <nvs_flash_cmp_const>:
{
   24434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24438:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2443a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2443c:	681d      	ldr	r5, [r3, #0]
   2443e:	426d      	negs	r5, r5
{
   24440:	b088      	sub	sp, #32
	block_size =
   24442:	f005 0520 	and.w	r5, r5, #32
{
   24446:	4607      	mov	r7, r0
   24448:	460e      	mov	r6, r1
	(void)memset(cmp, value, block_size);
   2444a:	2320      	movs	r3, #32
{
   2444c:	4611      	mov	r1, r2
	(void)memset(cmp, value, block_size);
   2444e:	4668      	mov	r0, sp
   24450:	462a      	mov	r2, r5
   24452:	f003 fb2c 	bl	27aae <__memset_chk>
	while (len) {
   24456:	b91c      	cbnz	r4, 24460 <nvs_flash_cmp_const+0x2c>
	return 0;
   24458:	4620      	mov	r0, r4
}
   2445a:	b008      	add	sp, #32
   2445c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   24460:	42ac      	cmp	r4, r5
   24462:	46a0      	mov	r8, r4
   24464:	bf28      	it	cs
   24466:	46a8      	movcs	r8, r5
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   24468:	4643      	mov	r3, r8
   2446a:	466a      	mov	r2, sp
   2446c:	4631      	mov	r1, r6
   2446e:	4638      	mov	r0, r7
   24470:	f7ff ffb6 	bl	243e0 <nvs_flash_block_cmp>
		if (rc) {
   24474:	2800      	cmp	r0, #0
   24476:	d1f0      	bne.n	2445a <nvs_flash_cmp_const+0x26>
		len -= bytes_to_cmp;
   24478:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   2447c:	4446      	add	r6, r8
   2447e:	e7ea      	b.n	24456 <nvs_flash_cmp_const+0x22>

00024480 <nvs_flash_erase_sector>:
{
   24480:	b538      	push	{r3, r4, r5, lr}
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   24482:	8982      	ldrh	r2, [r0, #12]
   24484:	6803      	ldr	r3, [r0, #0]
	addr &= ADDR_SECT_MASK;
   24486:	0c0d      	lsrs	r5, r1, #16
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   24488:	0c09      	lsrs	r1, r1, #16
{
   2448a:	4604      	mov	r4, r0
	addr &= ADDR_SECT_MASK;
   2448c:	042d      	lsls	r5, r5, #16
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   2448e:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   24490:	fb02 3101 	mla	r1, r2, r1, r3
	rc = api->erase(dev, offset, size);
   24494:	6883      	ldr	r3, [r0, #8]
   24496:	689b      	ldr	r3, [r3, #8]
   24498:	4798      	blx	r3
	if (rc) {
   2449a:	b950      	cbnz	r0, 244b2 <nvs_flash_erase_sector+0x32>
	if (nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   2449c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   2449e:	89a3      	ldrh	r3, [r4, #12]
   244a0:	7912      	ldrb	r2, [r2, #4]
   244a2:	4629      	mov	r1, r5
   244a4:	4620      	mov	r0, r4
   244a6:	f7ff ffc5 	bl	24434 <nvs_flash_cmp_const>
		rc = -ENXIO;
   244aa:	2800      	cmp	r0, #0
   244ac:	bf18      	it	ne
   244ae:	f06f 0005 	mvnne.w	r0, #5
}
   244b2:	bd38      	pop	{r3, r4, r5, pc}

000244b4 <nvs_ate_crc8_update>:
{
   244b4:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   244b6:	4601      	mov	r1, r0
{
   244b8:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   244ba:	2207      	movs	r2, #7
   244bc:	20ff      	movs	r0, #255	; 0xff
   244be:	f7ed fe93 	bl	121e8 <crc8_ccitt>
	entry->crc8 = crc8;
   244c2:	71e0      	strb	r0, [r4, #7]
}
   244c4:	bd10      	pop	{r4, pc}

000244c6 <nvs_sector_advance.isra.0>:
	*addr += (1 << ADDR_SECT_SHIFT);
   244c6:	680b      	ldr	r3, [r1, #0]
   244c8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   244cc:	0c1a      	lsrs	r2, r3, #16
   244ce:	ebb0 4f13 	cmp.w	r0, r3, lsr #16
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   244d2:	bf08      	it	eq
   244d4:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
   244d8:	600b      	str	r3, [r1, #0]
}
   244da:	4770      	bx	lr

000244dc <nvs_al_size.isra.0>:
	if (write_block_size <= 1U) {
   244dc:	7803      	ldrb	r3, [r0, #0]
   244de:	2b01      	cmp	r3, #1
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   244e0:	bf81      	itttt	hi
   244e2:	f101 31ff 	addhi.w	r1, r1, #4294967295
   244e6:	18c9      	addhi	r1, r1, r3
   244e8:	425b      	neghi	r3, r3
   244ea:	4019      	andhi	r1, r3
}
   244ec:	4608      	mov	r0, r1
   244ee:	4770      	bx	lr

000244f0 <nvs_ate_valid>:
{
   244f0:	b570      	push	{r4, r5, r6, lr}
   244f2:	460c      	mov	r4, r1
   244f4:	4605      	mov	r5, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   244f6:	2108      	movs	r1, #8
   244f8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   244fa:	f7ff ffef 	bl	244dc <nvs_al_size.isra.0>
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   244fe:	2207      	movs	r2, #7
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   24500:	4606      	mov	r6, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   24502:	4621      	mov	r1, r4
   24504:	20ff      	movs	r0, #255	; 0xff
   24506:	f7ed fe6f 	bl	121e8 <crc8_ccitt>
	if (crc8 == entry->crc8) {
   2450a:	79e3      	ldrb	r3, [r4, #7]
   2450c:	4283      	cmp	r3, r0
   2450e:	d107      	bne.n	24520 <nvs_ate_valid+0x30>
	    (entry->offset >= (fs->sector_size - ate_size))) {
   24510:	89a8      	ldrh	r0, [r5, #12]
   24512:	8863      	ldrh	r3, [r4, #2]
   24514:	1b80      	subs	r0, r0, r6
	if ((nvs_ate_crc8_check(entry)) ||
   24516:	4283      	cmp	r3, r0
   24518:	bf2c      	ite	cs
   2451a:	2000      	movcs	r0, #0
   2451c:	2001      	movcc	r0, #1
}
   2451e:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   24520:	2000      	movs	r0, #0
   24522:	e7fc      	b.n	2451e <nvs_ate_valid+0x2e>

00024524 <nvs_close_ate_valid>:
{
   24524:	b538      	push	{r3, r4, r5, lr}
   24526:	4605      	mov	r5, r0
   24528:	460c      	mov	r4, r1
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
   2452a:	f7ff ffe1 	bl	244f0 <nvs_ate_valid>
   2452e:	b1a0      	cbz	r0, 2455a <nvs_close_ate_valid+0x36>
   24530:	88a0      	ldrh	r0, [r4, #4]
   24532:	b998      	cbnz	r0, 2455c <nvs_close_ate_valid+0x38>
   24534:	8822      	ldrh	r2, [r4, #0]
   24536:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2453a:	429a      	cmp	r2, r3
   2453c:	d10d      	bne.n	2455a <nvs_close_ate_valid+0x36>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2453e:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   24540:	2108      	movs	r1, #8
   24542:	f7ff ffcb 	bl	244dc <nvs_al_size.isra.0>
	if ((fs->sector_size - entry->offset) % ate_size) {
   24546:	8862      	ldrh	r2, [r4, #2]
   24548:	89ab      	ldrh	r3, [r5, #12]
   2454a:	1a9b      	subs	r3, r3, r2
   2454c:	fbb3 f2f0 	udiv	r2, r3, r0
   24550:	fb02 3010 	mls	r0, r2, r0, r3
   24554:	fab0 f080 	clz	r0, r0
   24558:	0940      	lsrs	r0, r0, #5
}
   2455a:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   2455c:	2000      	movs	r0, #0
   2455e:	e7fc      	b.n	2455a <nvs_close_ate_valid+0x36>

00024560 <nvs_prev_ate>:
{
   24560:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   24562:	4605      	mov	r5, r0
   24564:	460e      	mov	r6, r1
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   24566:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   24568:	2108      	movs	r1, #8
   2456a:	f7ff ffb7 	bl	244dc <nvs_al_size.isra.0>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2456e:	6831      	ldr	r1, [r6, #0]
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   24570:	4607      	mov	r7, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   24572:	2308      	movs	r3, #8
   24574:	4628      	mov	r0, r5
   24576:	f7ff ff25 	bl	243c4 <nvs_flash_rd>
	if (rc) {
   2457a:	4604      	mov	r4, r0
   2457c:	2800      	cmp	r0, #0
   2457e:	d138      	bne.n	245f2 <nvs_prev_ate+0x92>
	*addr += ate_size;
   24580:	6833      	ldr	r3, [r6, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   24582:	89a8      	ldrh	r0, [r5, #12]
	*addr += ate_size;
   24584:	443b      	add	r3, r7
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   24586:	b29a      	uxth	r2, r3
   24588:	1bc7      	subs	r7, r0, r7
   2458a:	42ba      	cmp	r2, r7
	*addr += ate_size;
   2458c:	6033      	str	r3, [r6, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   2458e:	d130      	bne.n	245f2 <nvs_prev_ate+0x92>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   24590:	0c1a      	lsrs	r2, r3, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   24592:	bf03      	ittte	eq
   24594:	89e9      	ldrheq	r1, [r5, #14]
   24596:	f101 31ff 	addeq.w	r1, r1, #4294967295
   2459a:	eb03 4101 	addeq.w	r1, r3, r1, lsl #16
		*addr -= (1 << ADDR_SECT_SHIFT);
   2459e:	f5a3 3180 	subne.w	r1, r3, #65536	; 0x10000
   245a2:	6031      	str	r1, [r6, #0]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   245a4:	2308      	movs	r3, #8
   245a6:	466a      	mov	r2, sp
   245a8:	4628      	mov	r0, r5
   245aa:	f7ff ff0b 	bl	243c4 <nvs_flash_rd>
	if (rc) {
   245ae:	4604      	mov	r4, r0
   245b0:	b9f8      	cbnz	r0, 245f2 <nvs_prev_ate+0x92>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   245b2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   245b4:	466a      	mov	r2, sp
   245b6:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   245b8:	4603      	mov	r3, r0
		if (data8[i] != value) {
   245ba:	f812 0b01 	ldrb.w	r0, [r2], #1
   245be:	4281      	cmp	r1, r0
   245c0:	d10c      	bne.n	245dc <nvs_prev_ate+0x7c>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   245c2:	3301      	adds	r3, #1
   245c4:	2b08      	cmp	r3, #8
   245c6:	d1f8      	bne.n	245ba <nvs_prev_ate+0x5a>
		*addr = fs->ate_wra;
   245c8:	686b      	ldr	r3, [r5, #4]
   245ca:	e005      	b.n	245d8 <nvs_prev_ate+0x78>
		(*addr) &= ADDR_SECT_MASK;
   245cc:	6833      	ldr	r3, [r6, #0]
		(*addr) += close_ate.offset;
   245ce:	f8bd 2002 	ldrh.w	r2, [sp, #2]
		(*addr) &= ADDR_SECT_MASK;
   245d2:	0c1b      	lsrs	r3, r3, #16
   245d4:	041b      	lsls	r3, r3, #16
		(*addr) += close_ate.offset;
   245d6:	4413      	add	r3, r2
		*addr = fs->ate_wra;
   245d8:	6033      	str	r3, [r6, #0]
		return 0;
   245da:	e00a      	b.n	245f2 <nvs_prev_ate+0x92>
	if (nvs_close_ate_valid(fs, &close_ate)) {
   245dc:	4669      	mov	r1, sp
   245de:	4628      	mov	r0, r5
   245e0:	f7ff ffa0 	bl	24524 <nvs_close_ate_valid>
   245e4:	2800      	cmp	r0, #0
   245e6:	d1f1      	bne.n	245cc <nvs_prev_ate+0x6c>
	return nvs_recover_last_ate(fs, addr);
   245e8:	4631      	mov	r1, r6
   245ea:	4628      	mov	r0, r5
   245ec:	f7ee fe62 	bl	132b4 <nvs_recover_last_ate>
   245f0:	4604      	mov	r4, r0
}
   245f2:	4620      	mov	r0, r4
   245f4:	b003      	add	sp, #12
   245f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000245f8 <nvs_flash_al_wrt.part.0>:
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   245f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   245fc:	8985      	ldrh	r5, [r0, #12]
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   245fe:	4607      	mov	r7, r0
	offset += addr & ADDR_OFFS_MASK;
   24600:	6800      	ldr	r0, [r0, #0]
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   24602:	461c      	mov	r4, r3
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   24604:	0c0b      	lsrs	r3, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   24606:	fa10 f181 	uxtah	r1, r0, r1
   2460a:	fb03 1505 	mla	r5, r3, r5, r1
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   2460e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   24610:	681e      	ldr	r6, [r3, #0]
   24612:	4276      	negs	r6, r6
	if (blen > 0) {
   24614:	4026      	ands	r6, r4
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   24616:	b089      	sub	sp, #36	; 0x24
   24618:	4690      	mov	r8, r2
	if (blen > 0) {
   2461a:	d00a      	beq.n	24632 <nvs_flash_al_wrt.part.0+0x3a>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   2461c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
	rc = api->write(dev, offset, data, len);
   2461e:	6883      	ldr	r3, [r0, #8]
   24620:	4629      	mov	r1, r5
   24622:	f8d3 9004 	ldr.w	r9, [r3, #4]
   24626:	4633      	mov	r3, r6
   24628:	47c8      	blx	r9
		if (rc) {
   2462a:	b9c0      	cbnz	r0, 2465e <nvs_flash_al_wrt.part.0+0x66>
		len -= blen;
   2462c:	1ba4      	subs	r4, r4, r6
		offset += blen;
   2462e:	4435      	add	r5, r6
		data8 += blen;
   24630:	44b0      	add	r8, r6
	if (len) {
   24632:	b1bc      	cbz	r4, 24664 <nvs_flash_al_wrt.part.0+0x6c>
		memcpy(buf, data8, len);
   24634:	2320      	movs	r3, #32
   24636:	4622      	mov	r2, r4
   24638:	4641      	mov	r1, r8
   2463a:	4668      	mov	r0, sp
   2463c:	f003 fa1c 	bl	27a78 <__memcpy_chk>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   24640:	6afe      	ldr	r6, [r7, #44]	; 0x2c
   24642:	6832      	ldr	r2, [r6, #0]
   24644:	7931      	ldrb	r1, [r6, #4]
   24646:	1b12      	subs	r2, r2, r4
   24648:	eb0d 0004 	add.w	r0, sp, r4
   2464c:	f003 fa27 	bl	27a9e <memset>
		rc = flash_write(fs->flash_device, offset, buf,
   24650:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   24652:	6833      	ldr	r3, [r6, #0]
   24654:	6882      	ldr	r2, [r0, #8]
   24656:	4629      	mov	r1, r5
   24658:	6854      	ldr	r4, [r2, #4]
   2465a:	466a      	mov	r2, sp
   2465c:	47a0      	blx	r4
}
   2465e:	b009      	add	sp, #36	; 0x24
   24660:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
end:
   24664:	4620      	mov	r0, r4
   24666:	e7fa      	b.n	2465e <nvs_flash_al_wrt.part.0+0x66>

00024668 <nvs_flash_data_wrt>:
{
   24668:	b538      	push	{r3, r4, r5, lr}
   2466a:	4604      	mov	r4, r0
	if (!len) {
   2466c:	4615      	mov	r5, r2
   2466e:	b12a      	cbz	r2, 2467c <nvs_flash_data_wrt+0x14>
   24670:	4613      	mov	r3, r2
   24672:	460a      	mov	r2, r1
   24674:	6881      	ldr	r1, [r0, #8]
   24676:	f7ff ffbf 	bl	245f8 <nvs_flash_al_wrt.part.0>
   2467a:	4602      	mov	r2, r0
	fs->data_wra += nvs_al_size(fs, len);
   2467c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   2467e:	4629      	mov	r1, r5
   24680:	f7ff ff2c 	bl	244dc <nvs_al_size.isra.0>
   24684:	68a3      	ldr	r3, [r4, #8]
   24686:	4403      	add	r3, r0
   24688:	60a3      	str	r3, [r4, #8]
}
   2468a:	4610      	mov	r0, r2
   2468c:	bd38      	pop	{r3, r4, r5, pc}

0002468e <nvs_flash_ate_wrt>:
{
   2468e:	b510      	push	{r4, lr}
   24690:	460a      	mov	r2, r1
	if (!len) {
   24692:	2308      	movs	r3, #8
   24694:	6841      	ldr	r1, [r0, #4]
{
   24696:	4604      	mov	r4, r0
   24698:	f7ff ffae 	bl	245f8 <nvs_flash_al_wrt.part.0>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   2469c:	2108      	movs	r1, #8
   2469e:	4602      	mov	r2, r0
   246a0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   246a2:	f7ff ff1b 	bl	244dc <nvs_al_size.isra.0>
   246a6:	6863      	ldr	r3, [r4, #4]
   246a8:	1a1b      	subs	r3, r3, r0
   246aa:	6063      	str	r3, [r4, #4]
}
   246ac:	4610      	mov	r0, r2
   246ae:	bd10      	pop	{r4, pc}

000246b0 <nvs_add_gc_done_ate>:
{
   246b0:	b513      	push	{r0, r1, r4, lr}
	gc_done_ate.id = 0xffff;
   246b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   246b6:	f8ad 3000 	strh.w	r3, [sp]
	gc_done_ate.len = 0U;
   246ba:	2300      	movs	r3, #0
{
   246bc:	4604      	mov	r4, r0
	gc_done_ate.len = 0U;
   246be:	f8ad 3004 	strh.w	r3, [sp, #4]
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   246c2:	6883      	ldr	r3, [r0, #8]
   246c4:	f8ad 3002 	strh.w	r3, [sp, #2]
	nvs_ate_crc8_update(&gc_done_ate);
   246c8:	4668      	mov	r0, sp
   246ca:	f7ff fef3 	bl	244b4 <nvs_ate_crc8_update>
	return nvs_flash_ate_wrt(fs, &gc_done_ate);
   246ce:	4669      	mov	r1, sp
   246d0:	4620      	mov	r0, r4
   246d2:	f7ff ffdc 	bl	2468e <nvs_flash_ate_wrt>
}
   246d6:	b002      	add	sp, #8
   246d8:	bd10      	pop	{r4, pc}

000246da <nvs_gc>:
{
   246da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   246de:	4604      	mov	r4, r0
   246e0:	b093      	sub	sp, #76	; 0x4c
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   246e2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   246e4:	2108      	movs	r1, #8
   246e6:	f7ff fef9 	bl	244dc <nvs_al_size.isra.0>
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   246ea:	6863      	ldr	r3, [r4, #4]
   246ec:	0c1b      	lsrs	r3, r3, #16
   246ee:	041b      	lsls	r3, r3, #16
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   246f0:	4605      	mov	r5, r0
	nvs_sector_advance(fs, &sec_addr);
   246f2:	a901      	add	r1, sp, #4
   246f4:	89e0      	ldrh	r0, [r4, #14]
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   246f6:	9301      	str	r3, [sp, #4]
	nvs_sector_advance(fs, &sec_addr);
   246f8:	f7ff fee5 	bl	244c6 <nvs_sector_advance.isra.0>
	gc_addr = sec_addr + fs->sector_size - ate_size;
   246fc:	9b01      	ldr	r3, [sp, #4]
   246fe:	89a1      	ldrh	r1, [r4, #12]
   24700:	4419      	add	r1, r3
   24702:	1b49      	subs	r1, r1, r5
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   24704:	2308      	movs	r3, #8
   24706:	aa04      	add	r2, sp, #16
   24708:	4620      	mov	r0, r4
	gc_addr = sec_addr + fs->sector_size - ate_size;
   2470a:	9102      	str	r1, [sp, #8]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2470c:	f7ff fe5a 	bl	243c4 <nvs_flash_rd>
	if (rc < 0) {
   24710:	2800      	cmp	r0, #0
   24712:	f2c0 8094 	blt.w	2483e <nvs_gc+0x164>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   24716:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   24718:	aa04      	add	r2, sp, #16
   2471a:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   2471c:	2300      	movs	r3, #0
		if (data8[i] != value) {
   2471e:	f812 0b01 	ldrb.w	r0, [r2], #1
   24722:	4281      	cmp	r1, r0
   24724:	d17c      	bne.n	24820 <nvs_gc+0x146>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   24726:	3301      	adds	r3, #1
   24728:	2b08      	cmp	r3, #8
   2472a:	d1f8      	bne.n	2471e <nvs_gc+0x44>
	if (fs->ate_wra >= (fs->data_wra + ate_size)) {
   2472c:	68a0      	ldr	r0, [r4, #8]
   2472e:	6863      	ldr	r3, [r4, #4]
   24730:	4428      	add	r0, r5
   24732:	4283      	cmp	r3, r0
   24734:	d26e      	bcs.n	24814 <nvs_gc+0x13a>
	rc = nvs_flash_erase_sector(fs, sec_addr);
   24736:	9901      	ldr	r1, [sp, #4]
   24738:	4620      	mov	r0, r4
   2473a:	f7ff fea1 	bl	24480 <nvs_flash_erase_sector>
	if (rc) {
   2473e:	e07e      	b.n	2483e <nvs_gc+0x164>
		gc_addr &= ADDR_SECT_MASK;
   24740:	9b02      	ldr	r3, [sp, #8]
		gc_addr += close_ate.offset;
   24742:	f8bd 2012 	ldrh.w	r2, [sp, #18]
		gc_addr &= ADDR_SECT_MASK;
   24746:	0c1b      	lsrs	r3, r3, #16
   24748:	041b      	lsls	r3, r3, #16
		gc_addr += close_ate.offset;
   2474a:	4413      	add	r3, r2
   2474c:	9302      	str	r3, [sp, #8]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   2474e:	aa06      	add	r2, sp, #24
   24750:	a902      	add	r1, sp, #8
   24752:	4620      	mov	r0, r4
		gc_prev_addr = gc_addr;
   24754:	f8dd a008 	ldr.w	sl, [sp, #8]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   24758:	f7ff ff02 	bl	24560 <nvs_prev_ate>
		if (rc) {
   2475c:	2800      	cmp	r0, #0
   2475e:	d16e      	bne.n	2483e <nvs_gc+0x164>
		if (!nvs_ate_valid(fs, &gc_ate)) {
   24760:	a906      	add	r1, sp, #24
   24762:	4620      	mov	r0, r4
   24764:	f7ff fec4 	bl	244f0 <nvs_ate_valid>
   24768:	2800      	cmp	r0, #0
   2476a:	d034      	beq.n	247d6 <nvs_gc+0xfc>
		wlk_addr = fs->ate_wra;
   2476c:	6863      	ldr	r3, [r4, #4]
   2476e:	9303      	str	r3, [sp, #12]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   24770:	aa08      	add	r2, sp, #32
   24772:	a903      	add	r1, sp, #12
   24774:	4620      	mov	r0, r4
			wlk_prev_addr = wlk_addr;
   24776:	9e03      	ldr	r6, [sp, #12]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   24778:	f7ff fef2 	bl	24560 <nvs_prev_ate>
			if (rc) {
   2477c:	2800      	cmp	r0, #0
   2477e:	d15e      	bne.n	2483e <nvs_gc+0x164>
			if ((wlk_ate.id == gc_ate.id) &&
   24780:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   24784:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   24788:	429a      	cmp	r2, r3
   2478a:	d027      	beq.n	247dc <nvs_gc+0x102>
		} while (wlk_addr != fs->ate_wra);
   2478c:	6862      	ldr	r2, [r4, #4]
   2478e:	9b03      	ldr	r3, [sp, #12]
   24790:	429a      	cmp	r2, r3
   24792:	d1ed      	bne.n	24770 <nvs_gc+0x96>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
   24794:	4556      	cmp	r6, sl
   24796:	d11e      	bne.n	247d6 <nvs_gc+0xfc>
   24798:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   2479c:	b1db      	cbz	r3, 247d6 <nvs_gc+0xfc>
			data_addr += gc_ate.offset;
   2479e:	f8bd 301a 	ldrh.w	r3, [sp, #26]
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
   247a2:	ea4f 471a 	mov.w	r7, sl, lsr #16
   247a6:	043f      	lsls	r7, r7, #16
			data_addr += gc_ate.offset;
   247a8:	441f      	add	r7, r3
			nvs_ate_crc8_update(&gc_ate);
   247aa:	a806      	add	r0, sp, #24
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   247ac:	68a3      	ldr	r3, [r4, #8]
   247ae:	f8ad 301a 	strh.w	r3, [sp, #26]
			nvs_ate_crc8_update(&gc_ate);
   247b2:	f7ff fe7f 	bl	244b4 <nvs_ate_crc8_update>
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   247b6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
   247b8:	f8bd 801c 	ldrh.w	r8, [sp, #28]
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   247bc:	681e      	ldr	r6, [r3, #0]
   247be:	4276      	negs	r6, r6
	block_size =
   247c0:	f006 0620 	and.w	r6, r6, #32
	while (len) {
   247c4:	f1b8 0f00 	cmp.w	r8, #0
   247c8:	d10f      	bne.n	247ea <nvs_gc+0x110>
			rc = nvs_flash_ate_wrt(fs, &gc_ate);
   247ca:	a906      	add	r1, sp, #24
   247cc:	4620      	mov	r0, r4
   247ce:	f7ff ff5e 	bl	2468e <nvs_flash_ate_wrt>
			if (rc) {
   247d2:	2800      	cmp	r0, #0
   247d4:	d133      	bne.n	2483e <nvs_gc+0x164>
	} while (gc_prev_addr != stop_addr);
   247d6:	45ca      	cmp	sl, r9
   247d8:	d1b9      	bne.n	2474e <nvs_gc+0x74>
gc_done:
   247da:	e7a7      	b.n	2472c <nvs_gc+0x52>
			    (nvs_ate_valid(fs, &wlk_ate))) {
   247dc:	a908      	add	r1, sp, #32
   247de:	4620      	mov	r0, r4
   247e0:	f7ff fe86 	bl	244f0 <nvs_ate_valid>
			if ((wlk_ate.id == gc_ate.id) &&
   247e4:	2800      	cmp	r0, #0
   247e6:	d0d1      	beq.n	2478c <nvs_gc+0xb2>
   247e8:	e7d4      	b.n	24794 <nvs_gc+0xba>
		bytes_to_copy = MIN(block_size, len);
   247ea:	4546      	cmp	r6, r8
   247ec:	46b3      	mov	fp, r6
   247ee:	bf28      	it	cs
   247f0:	46c3      	movcs	fp, r8
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
   247f2:	465b      	mov	r3, fp
   247f4:	aa0a      	add	r2, sp, #40	; 0x28
   247f6:	4639      	mov	r1, r7
   247f8:	4620      	mov	r0, r4
   247fa:	f7ff fde3 	bl	243c4 <nvs_flash_rd>
		if (rc) {
   247fe:	b9f0      	cbnz	r0, 2483e <nvs_gc+0x164>
		rc = nvs_flash_data_wrt(fs, buf, bytes_to_copy);
   24800:	465a      	mov	r2, fp
   24802:	a90a      	add	r1, sp, #40	; 0x28
   24804:	4620      	mov	r0, r4
   24806:	f7ff ff2f 	bl	24668 <nvs_flash_data_wrt>
		if (rc) {
   2480a:	b9c0      	cbnz	r0, 2483e <nvs_gc+0x164>
		len -= bytes_to_copy;
   2480c:	eba8 080b 	sub.w	r8, r8, fp
		addr += bytes_to_copy;
   24810:	445f      	add	r7, fp
   24812:	e7d7      	b.n	247c4 <nvs_gc+0xea>
		rc = nvs_add_gc_done_ate(fs);
   24814:	4620      	mov	r0, r4
   24816:	f7ff ff4b 	bl	246b0 <nvs_add_gc_done_ate>
		if (rc) {
   2481a:	2800      	cmp	r0, #0
   2481c:	d08b      	beq.n	24736 <nvs_gc+0x5c>
   2481e:	e00e      	b.n	2483e <nvs_gc+0x164>
	stop_addr = gc_addr - ate_size;
   24820:	9b02      	ldr	r3, [sp, #8]
	if (nvs_close_ate_valid(fs, &close_ate)) {
   24822:	a904      	add	r1, sp, #16
   24824:	4620      	mov	r0, r4
	stop_addr = gc_addr - ate_size;
   24826:	eba3 0905 	sub.w	r9, r3, r5
	if (nvs_close_ate_valid(fs, &close_ate)) {
   2482a:	f7ff fe7b 	bl	24524 <nvs_close_ate_valid>
   2482e:	2800      	cmp	r0, #0
   24830:	d186      	bne.n	24740 <nvs_gc+0x66>
		rc = nvs_recover_last_ate(fs, &gc_addr);
   24832:	a902      	add	r1, sp, #8
   24834:	4620      	mov	r0, r4
   24836:	f7ee fd3d 	bl	132b4 <nvs_recover_last_ate>
		if (rc) {
   2483a:	2800      	cmp	r0, #0
   2483c:	d087      	beq.n	2474e <nvs_gc+0x74>
}
   2483e:	b013      	add	sp, #76	; 0x4c
   24840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00024844 <nvs_delete>:
	return nvs_write(fs, id, NULL, 0);
   24844:	2300      	movs	r3, #0
   24846:	461a      	mov	r2, r3
   24848:	f7ee bef8 	b.w	1363c <nvs_write>

0002484c <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   2484c:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   2484e:	2400      	movs	r4, #0
   24850:	9400      	str	r4, [sp, #0]
   24852:	f7ee ffbd 	bl	137d0 <nvs_read_hist>
	return rc;
}
   24856:	b002      	add	sp, #8
   24858:	bd10      	pop	{r4, pc}

0002485a <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
   2485a:	4770      	bx	lr

0002485c <get_sectors_cb>:
{
   2485c:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   2485e:	6802      	ldr	r2, [r0, #0]
   24860:	684c      	ldr	r4, [r1, #4]
   24862:	42a2      	cmp	r2, r4
   24864:	d316      	bcc.n	24894 <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
   24866:	688b      	ldr	r3, [r1, #8]
   24868:	4423      	add	r3, r4
   2486a:	429a      	cmp	r2, r3
   2486c:	d206      	bcs.n	2487c <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
   2486e:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
   24872:	42ab      	cmp	r3, r5
   24874:	d304      	bcc.n	24880 <get_sectors_cb+0x24>
		data->status = -ENOMEM;
   24876:	f06f 030b 	mvn.w	r3, #11
   2487a:	618b      	str	r3, [r1, #24]
		*bail_value = false;
   2487c:	2000      	movs	r0, #0
   2487e:	e00a      	b.n	24896 <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   24880:	68cd      	ldr	r5, [r1, #12]
   24882:	1b12      	subs	r2, r2, r4
   24884:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
   24888:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   2488c:	6842      	ldr	r2, [r0, #4]
   2488e:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
   24890:	3301      	adds	r3, #1
   24892:	610b      	str	r3, [r1, #16]
		*bail_value = true;
   24894:	2001      	movs	r0, #1
}
   24896:	bd70      	pop	{r4, r5, r6, pc}

00024898 <settings_load>:
	return settings_load_subtree(NULL);
   24898:	2000      	movs	r0, #0
   2489a:	f7ef b883 	b.w	139a4 <settings_load_subtree>

0002489e <settings_delete>:
	return settings_save_one(name, NULL, 0);
   2489e:	2200      	movs	r2, #0
   248a0:	4611      	mov	r1, r2
   248a2:	f7ef b845 	b.w	13930 <settings_save_one>

000248a6 <settings_name_steq>:
{
   248a6:	4603      	mov	r3, r0
   248a8:	b530      	push	{r4, r5, lr}
   248aa:	4608      	mov	r0, r1
	if (next) {
   248ac:	b10a      	cbz	r2, 248b2 <settings_name_steq+0xc>
		*next = NULL;
   248ae:	2100      	movs	r1, #0
   248b0:	6011      	str	r1, [r2, #0]
	if ((!name) || (!key)) {
   248b2:	b163      	cbz	r3, 248ce <settings_name_steq+0x28>
   248b4:	b190      	cbz	r0, 248dc <settings_name_steq+0x36>
   248b6:	1e41      	subs	r1, r0, #1
   248b8:	4618      	mov	r0, r3
	while ((*key != '\0') && (*key == *name) &&
   248ba:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   248be:	4604      	mov	r4, r0
   248c0:	f810 3b01 	ldrb.w	r3, [r0], #1
   248c4:	b15d      	cbz	r5, 248de <settings_name_steq+0x38>
   248c6:	429d      	cmp	r5, r3
   248c8:	d101      	bne.n	248ce <settings_name_steq+0x28>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   248ca:	2d3d      	cmp	r5, #61	; 0x3d
   248cc:	d1f5      	bne.n	248ba <settings_name_steq+0x14>
	return 0;
   248ce:	2000      	movs	r0, #0
   248d0:	e004      	b.n	248dc <settings_name_steq+0x36>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   248d2:	2b3d      	cmp	r3, #61	; 0x3d
   248d4:	d008      	beq.n	248e8 <settings_name_steq+0x42>
   248d6:	fab3 f083 	clz	r0, r3
   248da:	0940      	lsrs	r0, r0, #5
}
   248dc:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   248de:	2b2f      	cmp	r3, #47	; 0x2f
   248e0:	d1f7      	bne.n	248d2 <settings_name_steq+0x2c>
		if (next) {
   248e2:	b10a      	cbz	r2, 248e8 <settings_name_steq+0x42>
			*next = name + 1;
   248e4:	3401      	adds	r4, #1
   248e6:	6014      	str	r4, [r2, #0]
		return 1;
   248e8:	2001      	movs	r0, #1
   248ea:	e7f7      	b.n	248dc <settings_name_steq+0x36>

000248ec <settings_name_next>:
{
   248ec:	b530      	push	{r4, r5, lr}
   248ee:	4603      	mov	r3, r0
	if (next) {
   248f0:	b109      	cbz	r1, 248f6 <settings_name_next+0xa>
		*next = NULL;
   248f2:	2200      	movs	r2, #0
   248f4:	600a      	str	r2, [r1, #0]
	if (!name) {
   248f6:	b16b      	cbz	r3, 24914 <settings_name_next+0x28>
   248f8:	461a      	mov	r2, r3
   248fa:	4614      	mov	r4, r2
   248fc:	1ad0      	subs	r0, r2, r3
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   248fe:	f812 5b01 	ldrb.w	r5, [r2], #1
   24902:	b135      	cbz	r5, 24912 <settings_name_next+0x26>
   24904:	2d3d      	cmp	r5, #61	; 0x3d
   24906:	d004      	beq.n	24912 <settings_name_next+0x26>
   24908:	2d2f      	cmp	r5, #47	; 0x2f
   2490a:	d1f6      	bne.n	248fa <settings_name_next+0xe>
		if (next) {
   2490c:	b109      	cbz	r1, 24912 <settings_name_next+0x26>
			*next = name + 1;
   2490e:	3401      	adds	r4, #1
   24910:	600c      	str	r4, [r1, #0]
}
   24912:	bd30      	pop	{r4, r5, pc}
		return 0;
   24914:	4618      	mov	r0, r3
   24916:	e7fc      	b.n	24912 <settings_name_next+0x26>

00024918 <settings_nvs_read_fn>:
{
   24918:	b510      	push	{r4, lr}
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   2491a:	4613      	mov	r3, r2
{
   2491c:	4614      	mov	r4, r2
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   2491e:	460a      	mov	r2, r1
   24920:	8881      	ldrh	r1, [r0, #4]
   24922:	6800      	ldr	r0, [r0, #0]
   24924:	f7ff ff92 	bl	2484c <nvs_read>
}
   24928:	42a0      	cmp	r0, r4
   2492a:	bfa8      	it	ge
   2492c:	4620      	movge	r0, r4
   2492e:	bd10      	pop	{r4, pc}

00024930 <settings_nvs_save>:
{
   24930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24934:	b097      	sub	sp, #92	; 0x5c
   24936:	4604      	mov	r4, r0
   24938:	9201      	str	r2, [sp, #4]
   2493a:	469b      	mov	fp, r3
	if (!name) {
   2493c:	4689      	mov	r9, r1
   2493e:	2900      	cmp	r1, #0
   24940:	d069      	beq.n	24a16 <settings_nvs_save+0xe6>
	delete = ((value == NULL) || (val_len == 0));
   24942:	b1da      	cbz	r2, 2497c <settings_nvs_save+0x4c>
   24944:	fabb f78b 	clz	r7, fp
   24948:	097f      	lsrs	r7, r7, #5
	name_id = cf->last_name_id + 1;
   2494a:	8f25      	ldrh	r5, [r4, #56]	; 0x38
   2494c:	3501      	adds	r5, #1
   2494e:	b2ad      	uxth	r5, r5
	write_name_id = cf->last_name_id + 1;
   24950:	46a8      	mov	r8, r5
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   24952:	f104 0a08 	add.w	sl, r4, #8
		name_id--;
   24956:	1e6e      	subs	r6, r5, #1
   24958:	b2b6      	uxth	r6, r6
		if (name_id == NVS_NAMECNT_ID) {
   2495a:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   2495e:	d02e      	beq.n	249be <settings_nvs_save+0x8e>
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   24960:	234a      	movs	r3, #74	; 0x4a
   24962:	aa03      	add	r2, sp, #12
   24964:	4631      	mov	r1, r6
   24966:	4650      	mov	r0, sl
   24968:	f7ff ff70 	bl	2484c <nvs_read>
		if (rc < 0) {
   2496c:	2800      	cmp	r0, #0
   2496e:	da07      	bge.n	24980 <settings_nvs_save+0x50>
			if (rc == -ENOENT) {
   24970:	f110 0f02 	cmn.w	r0, #2
   24974:	bf08      	it	eq
   24976:	46b0      	moveq	r8, r6
   24978:	4635      	mov	r5, r6
   2497a:	e7ec      	b.n	24956 <settings_nvs_save+0x26>
	delete = ((value == NULL) || (val_len == 0));
   2497c:	2701      	movs	r7, #1
   2497e:	e7e4      	b.n	2494a <settings_nvs_save+0x1a>
		rdname[rc] = '\0';
   24980:	ab16      	add	r3, sp, #88	; 0x58
   24982:	4418      	add	r0, r3
   24984:	2300      	movs	r3, #0
   24986:	f800 3c4c 	strb.w	r3, [r0, #-76]
		if (strcmp(name, rdname)) {
   2498a:	a903      	add	r1, sp, #12
   2498c:	4648      	mov	r0, r9
   2498e:	f7e8 fa16 	bl	cdbe <strcmp>
   24992:	2800      	cmp	r0, #0
   24994:	d1f0      	bne.n	24978 <settings_nvs_save+0x48>
		if ((delete) && (name_id == cf->last_name_id)) {
   24996:	2f00      	cmp	r7, #0
   24998:	d03b      	beq.n	24a12 <settings_nvs_save+0xe2>
   2499a:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   2499c:	42b3      	cmp	r3, r6
   2499e:	d142      	bne.n	24a26 <settings_nvs_save+0xf6>
			cf->last_name_id--;
   249a0:	4622      	mov	r2, r4
   249a2:	1e73      	subs	r3, r6, #1
   249a4:	f822 3f38 	strh.w	r3, [r2, #56]!
			rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   249a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   249ac:	2302      	movs	r3, #2
   249ae:	4650      	mov	r0, sl
   249b0:	f7ee fe44 	bl	1363c <nvs_write>
			if (rc < 0) {
   249b4:	2800      	cmp	r0, #0
   249b6:	da36      	bge.n	24a26 <settings_nvs_save+0xf6>
}
   249b8:	b017      	add	sp, #92	; 0x5c
   249ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (delete) {
   249be:	bb6f      	cbnz	r7, 24a1c <settings_nvs_save+0xec>
	write_name = true;
   249c0:	2701      	movs	r7, #1
	if (write_name_id == NVS_NAMECNT_ID + NVS_NAME_ID_OFFSET) {
   249c2:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
   249c6:	d02b      	beq.n	24a20 <settings_nvs_save+0xf0>
	rc = nvs_write(&cf->cf_nvs, write_name_id + NVS_NAME_ID_OFFSET,
   249c8:	f104 0508 	add.w	r5, r4, #8
   249cc:	f508 4180 	add.w	r1, r8, #16384	; 0x4000
   249d0:	9a01      	ldr	r2, [sp, #4]
   249d2:	465b      	mov	r3, fp
   249d4:	b289      	uxth	r1, r1
   249d6:	4628      	mov	r0, r5
   249d8:	f7ee fe30 	bl	1363c <nvs_write>
	if (rc < 0) {
   249dc:	2800      	cmp	r0, #0
   249de:	dbeb      	blt.n	249b8 <settings_nvs_save+0x88>
	if (write_name) {
   249e0:	b157      	cbz	r7, 249f8 <settings_nvs_save+0xc8>
		rc = nvs_write(&cf->cf_nvs, write_name_id, name, strlen(name));
   249e2:	4648      	mov	r0, r9
   249e4:	f7e8 f9f5 	bl	cdd2 <strlen>
   249e8:	464a      	mov	r2, r9
   249ea:	4603      	mov	r3, r0
   249ec:	4641      	mov	r1, r8
   249ee:	4628      	mov	r0, r5
   249f0:	f7ee fe24 	bl	1363c <nvs_write>
		if (rc < 0) {
   249f4:	2800      	cmp	r0, #0
   249f6:	dbdf      	blt.n	249b8 <settings_nvs_save+0x88>
	if (write_name_id > cf->last_name_id) {
   249f8:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   249fa:	4543      	cmp	r3, r8
   249fc:	d220      	bcs.n	24a40 <settings_nvs_save+0x110>
		cf->last_name_id = write_name_id;
   249fe:	4622      	mov	r2, r4
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   24a00:	2302      	movs	r3, #2
		cf->last_name_id = write_name_id;
   24a02:	f822 8f38 	strh.w	r8, [r2, #56]!
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   24a06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   24a0a:	4628      	mov	r0, r5
   24a0c:	f7ee fe16 	bl	1363c <nvs_write>
   24a10:	e016      	b.n	24a40 <settings_nvs_save+0x110>
   24a12:	46b0      	mov	r8, r6
   24a14:	e7d5      	b.n	249c2 <settings_nvs_save+0x92>
		return -EINVAL;
   24a16:	f06f 0015 	mvn.w	r0, #21
   24a1a:	e7cd      	b.n	249b8 <settings_nvs_save+0x88>
		return 0;
   24a1c:	2000      	movs	r0, #0
   24a1e:	e7cb      	b.n	249b8 <settings_nvs_save+0x88>
		return -ENOMEM;
   24a20:	f06f 000b 	mvn.w	r0, #11
   24a24:	e7c8      	b.n	249b8 <settings_nvs_save+0x88>
			rc = nvs_delete(&cf->cf_nvs, name_id);
   24a26:	4631      	mov	r1, r6
   24a28:	4650      	mov	r0, sl
   24a2a:	f7ff ff0b 	bl	24844 <nvs_delete>
			if (rc >= 0) {
   24a2e:	2800      	cmp	r0, #0
   24a30:	dbc2      	blt.n	249b8 <settings_nvs_save+0x88>
				rc = nvs_delete(&cf->cf_nvs, name_id +
   24a32:	f505 517f 	add.w	r1, r5, #16320	; 0x3fc0
   24a36:	313f      	adds	r1, #63	; 0x3f
   24a38:	b289      	uxth	r1, r1
   24a3a:	4650      	mov	r0, sl
   24a3c:	f7ff ff02 	bl	24844 <nvs_delete>
	if (rc < 0) {
   24a40:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   24a44:	e7b8      	b.n	249b8 <settings_nvs_save+0x88>

00024a46 <settings_nvs_backend_init>:
{
   24a46:	b573      	push	{r0, r1, r4, r5, r6, lr}
   24a48:	4604      	mov	r4, r0
	cf->cf_nvs.flash_device = device_get_binding(cf->flash_dev_name);
   24a4a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   24a4c:	f7fb f9f8 	bl	1fe40 <z_impl_device_get_binding>
   24a50:	6320      	str	r0, [r4, #48]	; 0x30
	if (cf->cf_nvs.flash_device == NULL) {
   24a52:	b1c0      	cbz	r0, 24a86 <settings_nvs_backend_init+0x40>
	rc = nvs_mount(&cf->cf_nvs);
   24a54:	f104 0608 	add.w	r6, r4, #8
   24a58:	4630      	mov	r0, r6
   24a5a:	f7ee fc5d 	bl	13318 <nvs_mount>
	if (rc) {
   24a5e:	4605      	mov	r5, r0
   24a60:	b970      	cbnz	r0, 24a80 <settings_nvs_backend_init+0x3a>
	rc = nvs_read(&cf->cf_nvs, NVS_NAMECNT_ID, &last_name_id,
   24a62:	2302      	movs	r3, #2
   24a64:	f10d 0206 	add.w	r2, sp, #6
   24a68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   24a6c:	4630      	mov	r0, r6
   24a6e:	f7ff feed 	bl	2484c <nvs_read>
	if (rc < 0) {
   24a72:	2800      	cmp	r0, #0
		cf->last_name_id = last_name_id;
   24a74:	bfac      	ite	ge
   24a76:	f8bd 3006 	ldrhge.w	r3, [sp, #6]
		cf->last_name_id = NVS_NAMECNT_ID;
   24a7a:	f44f 4300 	movlt.w	r3, #32768	; 0x8000
		cf->last_name_id = last_name_id;
   24a7e:	8723      	strh	r3, [r4, #56]	; 0x38
}
   24a80:	4628      	mov	r0, r5
   24a82:	b002      	add	sp, #8
   24a84:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
   24a86:	f06f 0512 	mvn.w	r5, #18
   24a8a:	e7f9      	b.n	24a80 <settings_nvs_backend_init+0x3a>

00024a8c <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   24a8c:	b538      	push	{r3, r4, r5, lr}
   24a8e:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   24a90:	42ab      	cmp	r3, r5
{
   24a92:	4611      	mov	r1, r2
   24a94:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   24a96:	d804      	bhi.n	24aa2 <_copy+0x16>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   24a98:	461a      	mov	r2, r3
   24a9a:	f002 ffdf 	bl	27a5c <memcpy>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   24a9e:	4620      	mov	r0, r4
   24aa0:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   24aa2:	2400      	movs	r4, #0
   24aa4:	e7fb      	b.n	24a9e <_copy+0x12>

00024aa6 <_set>:
__ssp_bos_icheck3(memset, void *, int)
   24aa6:	f002 bffa 	b.w	27a9e <memset>

00024aaa <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   24aaa:	09c3      	lsrs	r3, r0, #7
   24aac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   24ab0:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   24ab4:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   24ab8:	b2c0      	uxtb	r0, r0
   24aba:	4770      	bx	lr

00024abc <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   24abc:	78cb      	ldrb	r3, [r1, #3]
   24abe:	7802      	ldrb	r2, [r0, #0]
   24ac0:	4053      	eors	r3, r2
   24ac2:	7003      	strb	r3, [r0, #0]
   24ac4:	884b      	ldrh	r3, [r1, #2]
   24ac6:	7842      	ldrb	r2, [r0, #1]
   24ac8:	4053      	eors	r3, r2
   24aca:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   24acc:	680a      	ldr	r2, [r1, #0]
   24ace:	7883      	ldrb	r3, [r0, #2]
   24ad0:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   24ad4:	7083      	strb	r3, [r0, #2]
   24ad6:	680a      	ldr	r2, [r1, #0]
   24ad8:	78c3      	ldrb	r3, [r0, #3]
   24ada:	4053      	eors	r3, r2
   24adc:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   24ade:	79cb      	ldrb	r3, [r1, #7]
   24ae0:	7902      	ldrb	r2, [r0, #4]
   24ae2:	4053      	eors	r3, r2
   24ae4:	7103      	strb	r3, [r0, #4]
   24ae6:	88cb      	ldrh	r3, [r1, #6]
   24ae8:	7942      	ldrb	r2, [r0, #5]
   24aea:	4053      	eors	r3, r2
   24aec:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   24aee:	684a      	ldr	r2, [r1, #4]
   24af0:	7983      	ldrb	r3, [r0, #6]
   24af2:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   24af6:	7183      	strb	r3, [r0, #6]
   24af8:	684a      	ldr	r2, [r1, #4]
   24afa:	79c3      	ldrb	r3, [r0, #7]
   24afc:	4053      	eors	r3, r2
   24afe:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   24b00:	7acb      	ldrb	r3, [r1, #11]
   24b02:	7a02      	ldrb	r2, [r0, #8]
   24b04:	4053      	eors	r3, r2
   24b06:	7203      	strb	r3, [r0, #8]
   24b08:	7a42      	ldrb	r2, [r0, #9]
   24b0a:	894b      	ldrh	r3, [r1, #10]
   24b0c:	4053      	eors	r3, r2
   24b0e:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   24b10:	688a      	ldr	r2, [r1, #8]
   24b12:	7a83      	ldrb	r3, [r0, #10]
   24b14:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   24b18:	7283      	strb	r3, [r0, #10]
   24b1a:	688a      	ldr	r2, [r1, #8]
   24b1c:	7ac3      	ldrb	r3, [r0, #11]
   24b1e:	4053      	eors	r3, r2
   24b20:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   24b22:	7bcb      	ldrb	r3, [r1, #15]
   24b24:	7b02      	ldrb	r2, [r0, #12]
   24b26:	4053      	eors	r3, r2
   24b28:	7303      	strb	r3, [r0, #12]
   24b2a:	89cb      	ldrh	r3, [r1, #14]
   24b2c:	7b42      	ldrb	r2, [r0, #13]
   24b2e:	4053      	eors	r3, r2
   24b30:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   24b32:	68ca      	ldr	r2, [r1, #12]
   24b34:	7b83      	ldrb	r3, [r0, #14]
   24b36:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   24b3a:	7383      	strb	r3, [r0, #14]
   24b3c:	68ca      	ldr	r2, [r1, #12]
   24b3e:	7bc3      	ldrb	r3, [r0, #15]
   24b40:	4053      	eors	r3, r2
   24b42:	73c3      	strb	r3, [r0, #15]
}
   24b44:	4770      	bx	lr

00024b46 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   24b46:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   24b48:	7802      	ldrb	r2, [r0, #0]
   24b4a:	f88d 2000 	strb.w	r2, [sp]
   24b4e:	7942      	ldrb	r2, [r0, #5]
   24b50:	f88d 2001 	strb.w	r2, [sp, #1]
   24b54:	7a82      	ldrb	r2, [r0, #10]
   24b56:	f88d 2002 	strb.w	r2, [sp, #2]
   24b5a:	7bc2      	ldrb	r2, [r0, #15]
   24b5c:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   24b60:	7902      	ldrb	r2, [r0, #4]
   24b62:	f88d 2004 	strb.w	r2, [sp, #4]
   24b66:	7a42      	ldrb	r2, [r0, #9]
   24b68:	f88d 2005 	strb.w	r2, [sp, #5]
   24b6c:	7b82      	ldrb	r2, [r0, #14]
   24b6e:	f88d 2006 	strb.w	r2, [sp, #6]
   24b72:	78c2      	ldrb	r2, [r0, #3]
   24b74:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   24b78:	7a02      	ldrb	r2, [r0, #8]
   24b7a:	f88d 2008 	strb.w	r2, [sp, #8]
   24b7e:	7b42      	ldrb	r2, [r0, #13]
   24b80:	f88d 2009 	strb.w	r2, [sp, #9]
   24b84:	7882      	ldrb	r2, [r0, #2]
   24b86:	f88d 200a 	strb.w	r2, [sp, #10]
   24b8a:	79c2      	ldrb	r2, [r0, #7]
   24b8c:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   24b90:	7b02      	ldrb	r2, [r0, #12]
   24b92:	f88d 200c 	strb.w	r2, [sp, #12]
   24b96:	7842      	ldrb	r2, [r0, #1]
   24b98:	7ac3      	ldrb	r3, [r0, #11]
   24b9a:	f88d 200d 	strb.w	r2, [sp, #13]
   24b9e:	7982      	ldrb	r2, [r0, #6]
   24ba0:	f88d 200e 	strb.w	r2, [sp, #14]
   24ba4:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   24ba8:	2310      	movs	r3, #16
   24baa:	466a      	mov	r2, sp
   24bac:	4619      	mov	r1, r3
   24bae:	f7ff ff6d 	bl	24a8c <_copy>
}
   24bb2:	b005      	add	sp, #20
   24bb4:	f85d fb04 	ldr.w	pc, [sp], #4

00024bb8 <mult_row_column>:
{
   24bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24bba:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   24bbc:	7808      	ldrb	r0, [r1, #0]
{
   24bbe:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   24bc0:	f7ff ff73 	bl	24aaa <_double_byte>
   24bc4:	4605      	mov	r5, r0
   24bc6:	7860      	ldrb	r0, [r4, #1]
   24bc8:	f7ff ff6f 	bl	24aaa <_double_byte>
   24bcc:	78a2      	ldrb	r2, [r4, #2]
   24bce:	7863      	ldrb	r3, [r4, #1]
   24bd0:	4053      	eors	r3, r2
   24bd2:	78e2      	ldrb	r2, [r4, #3]
   24bd4:	4053      	eors	r3, r2
   24bd6:	405d      	eors	r5, r3
   24bd8:	4045      	eors	r5, r0
   24bda:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   24bdc:	7860      	ldrb	r0, [r4, #1]
   24bde:	7827      	ldrb	r7, [r4, #0]
   24be0:	f7ff ff63 	bl	24aaa <_double_byte>
   24be4:	4605      	mov	r5, r0
   24be6:	78a0      	ldrb	r0, [r4, #2]
   24be8:	f7ff ff5f 	bl	24aaa <_double_byte>
   24bec:	78a3      	ldrb	r3, [r4, #2]
   24bee:	405f      	eors	r7, r3
   24bf0:	78e3      	ldrb	r3, [r4, #3]
   24bf2:	405f      	eors	r7, r3
   24bf4:	407d      	eors	r5, r7
   24bf6:	4045      	eors	r5, r0
   24bf8:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   24bfa:	78a0      	ldrb	r0, [r4, #2]
   24bfc:	7865      	ldrb	r5, [r4, #1]
   24bfe:	7827      	ldrb	r7, [r4, #0]
   24c00:	f7ff ff53 	bl	24aaa <_double_byte>
   24c04:	406f      	eors	r7, r5
   24c06:	4605      	mov	r5, r0
   24c08:	78e0      	ldrb	r0, [r4, #3]
   24c0a:	f7ff ff4e 	bl	24aaa <_double_byte>
   24c0e:	78e3      	ldrb	r3, [r4, #3]
   24c10:	405f      	eors	r7, r3
   24c12:	407d      	eors	r5, r7
   24c14:	4045      	eors	r5, r0
   24c16:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   24c18:	7820      	ldrb	r0, [r4, #0]
   24c1a:	f7ff ff46 	bl	24aaa <_double_byte>
   24c1e:	7863      	ldrb	r3, [r4, #1]
   24c20:	7825      	ldrb	r5, [r4, #0]
   24c22:	405d      	eors	r5, r3
   24c24:	78a3      	ldrb	r3, [r4, #2]
   24c26:	405d      	eors	r5, r3
   24c28:	4045      	eors	r5, r0
   24c2a:	78e0      	ldrb	r0, [r4, #3]
   24c2c:	f7ff ff3d 	bl	24aaa <_double_byte>
   24c30:	b2ed      	uxtb	r5, r5
   24c32:	4045      	eors	r5, r0
   24c34:	70f5      	strb	r5, [r6, #3]
}
   24c36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00024c38 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   24c38:	b570      	push	{r4, r5, r6, lr}
   24c3a:	4614      	mov	r4, r2
   24c3c:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   24c3e:	4605      	mov	r5, r0
   24c40:	2800      	cmp	r0, #0
   24c42:	d049      	beq.n	24cd8 <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   24c44:	2900      	cmp	r1, #0
   24c46:	d049      	beq.n	24cdc <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   24c48:	2a00      	cmp	r2, #0
   24c4a:	d049      	beq.n	24ce0 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   24c4c:	2310      	movs	r3, #16
   24c4e:	460a      	mov	r2, r1
   24c50:	4668      	mov	r0, sp
   24c52:	4619      	mov	r1, r3
   24c54:	f7ff ff1a 	bl	24a8c <_copy>
	add_round_key(state, s->words);
   24c58:	4621      	mov	r1, r4
   24c5a:	4668      	mov	r0, sp
   24c5c:	f7ff ff2e 	bl	24abc <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   24c60:	3410      	adds	r4, #16
   24c62:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   24c66:	4668      	mov	r0, sp
   24c68:	f7ef fa0c 	bl	14084 <sub_bytes>
		shift_rows(state);
   24c6c:	4668      	mov	r0, sp
   24c6e:	f7ff ff6a 	bl	24b46 <shift_rows>
	mult_row_column(t, s);
   24c72:	4669      	mov	r1, sp
   24c74:	a804      	add	r0, sp, #16
   24c76:	f7ff ff9f 	bl	24bb8 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   24c7a:	a901      	add	r1, sp, #4
   24c7c:	a805      	add	r0, sp, #20
   24c7e:	f7ff ff9b 	bl	24bb8 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   24c82:	a902      	add	r1, sp, #8
   24c84:	a806      	add	r0, sp, #24
   24c86:	f7ff ff97 	bl	24bb8 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   24c8a:	a903      	add	r1, sp, #12
   24c8c:	a807      	add	r0, sp, #28
   24c8e:	f7ff ff93 	bl	24bb8 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   24c92:	2310      	movs	r3, #16
   24c94:	4619      	mov	r1, r3
   24c96:	eb0d 0203 	add.w	r2, sp, r3
   24c9a:	4668      	mov	r0, sp
   24c9c:	f7ff fef6 	bl	24a8c <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   24ca0:	4621      	mov	r1, r4
   24ca2:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   24ca4:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   24ca6:	f7ff ff09 	bl	24abc <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   24caa:	42a6      	cmp	r6, r4
   24cac:	d1db      	bne.n	24c66 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   24cae:	f7ef f9e9 	bl	14084 <sub_bytes>
	shift_rows(state);
   24cb2:	4668      	mov	r0, sp
   24cb4:	f7ff ff47 	bl	24b46 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   24cb8:	4631      	mov	r1, r6
   24cba:	4668      	mov	r0, sp
   24cbc:	f7ff fefe 	bl	24abc <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   24cc0:	2310      	movs	r3, #16
   24cc2:	4619      	mov	r1, r3
   24cc4:	466a      	mov	r2, sp
   24cc6:	4628      	mov	r0, r5
   24cc8:	f7ff fee0 	bl	24a8c <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   24ccc:	4668      	mov	r0, sp
   24cce:	2210      	movs	r2, #16
   24cd0:	2100      	movs	r1, #0
   24cd2:	f7ff fee8 	bl	24aa6 <_set>

	return TC_CRYPTO_SUCCESS;
   24cd6:	2001      	movs	r0, #1
}
   24cd8:	b008      	add	sp, #32
   24cda:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   24cdc:	4608      	mov	r0, r1
   24cde:	e7fb      	b.n	24cd8 <tc_aes_encrypt+0xa0>
   24ce0:	4610      	mov	r0, r2
   24ce2:	e7f9      	b.n	24cd8 <tc_aes_encrypt+0xa0>

00024ce4 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   24ce4:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   24ce6:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   24ce8:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   24cea:	f912 3b10 	ldrsb.w	r3, [r2], #16
   24cee:	2b00      	cmp	r3, #0
   24cf0:	bfb4      	ite	lt
   24cf2:	2387      	movlt	r3, #135	; 0x87
   24cf4:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   24cf6:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   24cfa:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   24cfe:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   24d00:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   24d04:	d002      	beq.n	24d0c <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   24d06:	7813      	ldrb	r3, [r2, #0]
   24d08:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   24d0a:	e7f4      	b.n	24cf6 <gf_double+0x12>
	}
}
   24d0c:	bd10      	pop	{r4, pc}

00024d0e <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   24d0e:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   24d10:	b120      	cbz	r0, 24d1c <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   24d12:	2258      	movs	r2, #88	; 0x58
   24d14:	2100      	movs	r1, #0
   24d16:	f7ff fec6 	bl	24aa6 <_set>
   24d1a:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   24d1c:	bd08      	pop	{r3, pc}

00024d1e <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   24d1e:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   24d20:	4604      	mov	r4, r0
   24d22:	b188      	cbz	r0, 24d48 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   24d24:	2210      	movs	r2, #16
   24d26:	2100      	movs	r1, #0
   24d28:	f7ff febd 	bl	24aa6 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   24d2c:	2210      	movs	r2, #16
   24d2e:	f104 0030 	add.w	r0, r4, #48	; 0x30
   24d32:	2100      	movs	r1, #0
   24d34:	f7ff feb7 	bl	24aa6 <_set>
	s->leftover_offset = 0;
   24d38:	2300      	movs	r3, #0
   24d3a:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   24d3c:	2200      	movs	r2, #0
   24d3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   24d42:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   24d46:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   24d48:	bd10      	pop	{r4, pc}

00024d4a <tc_cmac_setup>:
{
   24d4a:	b570      	push	{r4, r5, r6, lr}
   24d4c:	460d      	mov	r5, r1
   24d4e:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   24d50:	4604      	mov	r4, r0
   24d52:	b310      	cbz	r0, 24d9a <tc_cmac_setup+0x50>
   24d54:	b311      	cbz	r1, 24d9c <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   24d56:	2258      	movs	r2, #88	; 0x58
   24d58:	2100      	movs	r1, #0
   24d5a:	f7ff fea4 	bl	24aa6 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   24d5e:	4629      	mov	r1, r5
	s->sched = sched;
   24d60:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   24d62:	4630      	mov	r0, r6
   24d64:	f7ef f99a 	bl	1409c <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   24d68:	2210      	movs	r2, #16
   24d6a:	2100      	movs	r1, #0
   24d6c:	4620      	mov	r0, r4
   24d6e:	f7ff fe9a 	bl	24aa6 <_set>
	gf_double (s->K1, s->iv);
   24d72:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   24d76:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   24d78:	4621      	mov	r1, r4
   24d7a:	4620      	mov	r0, r4
   24d7c:	f7ff ff5c 	bl	24c38 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   24d80:	4621      	mov	r1, r4
   24d82:	4628      	mov	r0, r5
   24d84:	f7ff ffae 	bl	24ce4 <gf_double>
	gf_double (s->K2, s->K1);
   24d88:	4629      	mov	r1, r5
   24d8a:	f104 0020 	add.w	r0, r4, #32
   24d8e:	f7ff ffa9 	bl	24ce4 <gf_double>
	tc_cmac_init(s);
   24d92:	4620      	mov	r0, r4
   24d94:	f7ff ffc3 	bl	24d1e <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   24d98:	2001      	movs	r0, #1
}
   24d9a:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   24d9c:	4608      	mov	r0, r1
   24d9e:	e7fc      	b.n	24d9a <tc_cmac_setup+0x50>

00024da0 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   24da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24da4:	460d      	mov	r5, r1
   24da6:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   24da8:	4604      	mov	r4, r0
   24daa:	2800      	cmp	r0, #0
   24dac:	d061      	beq.n	24e72 <tc_cmac_update+0xd2>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   24dae:	b912      	cbnz	r2, 24db6 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   24db0:	2001      	movs	r0, #1
}
   24db2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   24db6:	2900      	cmp	r1, #0
   24db8:	d05b      	beq.n	24e72 <tc_cmac_update+0xd2>
	if (s->countdown == 0) {
   24dba:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   24dbe:	ea53 0102 	orrs.w	r1, r3, r2
   24dc2:	d056      	beq.n	24e72 <tc_cmac_update+0xd2>
	s->countdown--;
   24dc4:	3b01      	subs	r3, #1
	if (s->leftover_offset > 0) {
   24dc6:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   24dca:	f142 32ff 	adc.w	r2, r2, #4294967295
   24dce:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   24dd2:	f1b8 0f00 	cmp.w	r8, #0
   24dd6:	d02a      	beq.n	24e2e <tc_cmac_update+0x8e>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   24dd8:	f1c8 0710 	rsb	r7, r8, #16
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   24ddc:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   24de0:	42be      	cmp	r6, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   24de2:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   24de4:	d208      	bcs.n	24df8 <tc_cmac_update+0x58>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   24de6:	462a      	mov	r2, r5
   24de8:	4633      	mov	r3, r6
   24dea:	4631      	mov	r1, r6
   24dec:	f7ff fe4e 	bl	24a8c <_copy>
			s->leftover_offset += data_length;
   24df0:	6c62      	ldr	r2, [r4, #68]	; 0x44
   24df2:	4432      	add	r2, r6
   24df4:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   24df6:	e7db      	b.n	24db0 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   24df8:	463b      	mov	r3, r7
   24dfa:	462a      	mov	r2, r5
   24dfc:	4639      	mov	r1, r7
   24dfe:	f7ff fe45 	bl	24a8c <_copy>
		data_length -= remaining_space;
   24e02:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   24e04:	2300      	movs	r3, #0
   24e06:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   24e08:	4446      	add	r6, r8
		data += remaining_space;
   24e0a:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24e0c:	1e63      	subs	r3, r4, #1
   24e0e:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   24e12:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   24e16:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24e1a:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   24e1c:	ea82 0200 	eor.w	r2, r2, r0
   24e20:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24e22:	d1f6      	bne.n	24e12 <tc_cmac_update+0x72>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   24e24:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   24e26:	4621      	mov	r1, r4
   24e28:	4620      	mov	r0, r4
   24e2a:	f7ff ff05 	bl	24c38 <tc_aes_encrypt>
   24e2e:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   24e32:	2e10      	cmp	r6, #16
   24e34:	d80a      	bhi.n	24e4c <tc_cmac_update+0xac>
	if (data_length > 0) {
   24e36:	2e00      	cmp	r6, #0
   24e38:	d0ba      	beq.n	24db0 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   24e3a:	4633      	mov	r3, r6
   24e3c:	462a      	mov	r2, r5
   24e3e:	4631      	mov	r1, r6
   24e40:	f104 0030 	add.w	r0, r4, #48	; 0x30
   24e44:	f7ff fe22 	bl	24a8c <_copy>
		s->leftover_offset = data_length;
   24e48:	6466      	str	r6, [r4, #68]	; 0x44
   24e4a:	e7b1      	b.n	24db0 <tc_cmac_update+0x10>
   24e4c:	1e63      	subs	r3, r4, #1
   24e4e:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   24e50:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   24e54:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24e58:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   24e5a:	ea82 0200 	eor.w	r2, r2, r0
   24e5e:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24e60:	d1f6      	bne.n	24e50 <tc_cmac_update+0xb0>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   24e62:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   24e64:	4621      	mov	r1, r4
   24e66:	4620      	mov	r0, r4
   24e68:	f7ff fee6 	bl	24c38 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   24e6c:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   24e6e:	3e10      	subs	r6, #16
   24e70:	e7df      	b.n	24e32 <tc_cmac_update+0x92>
		return TC_CRYPTO_FAIL;
   24e72:	2000      	movs	r0, #0
   24e74:	e79d      	b.n	24db2 <tc_cmac_update+0x12>

00024e76 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   24e76:	b570      	push	{r4, r5, r6, lr}
   24e78:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   24e7a:	4605      	mov	r5, r0
   24e7c:	b1e8      	cbz	r0, 24eba <tc_cmac_final+0x44>
   24e7e:	b369      	cbz	r1, 24edc <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   24e80:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   24e82:	2a10      	cmp	r2, #16
   24e84:	d11a      	bne.n	24ebc <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   24e86:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24e88:	1e63      	subs	r3, r4, #1
   24e8a:	3901      	subs	r1, #1
   24e8c:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   24e90:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   24e94:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   24e98:	4072      	eors	r2, r6
   24e9a:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24e9e:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   24ea0:	ea82 0206 	eor.w	r2, r2, r6
   24ea4:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24ea6:	d1f3      	bne.n	24e90 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   24ea8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   24eaa:	4621      	mov	r1, r4
   24eac:	4628      	mov	r0, r5
   24eae:	f7ff fec3 	bl	24c38 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   24eb2:	4620      	mov	r0, r4
   24eb4:	f7ff ff2b 	bl	24d0e <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   24eb8:	2001      	movs	r0, #1
}
   24eba:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   24ebc:	f102 0030 	add.w	r0, r2, #48	; 0x30
   24ec0:	2100      	movs	r1, #0
   24ec2:	f1c2 0210 	rsb	r2, r2, #16
   24ec6:	4420      	add	r0, r4
   24ec8:	f7ff fded 	bl	24aa6 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   24ecc:	6c63      	ldr	r3, [r4, #68]	; 0x44
   24ece:	4423      	add	r3, r4
   24ed0:	2280      	movs	r2, #128	; 0x80
   24ed2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   24ed6:	f104 0120 	add.w	r1, r4, #32
   24eda:	e7d5      	b.n	24e88 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   24edc:	4608      	mov	r0, r1
   24ede:	e7ec      	b.n	24eba <tc_cmac_final+0x44>

00024ee0 <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   24ee0:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   24ee2:	6800      	ldr	r0, [r0, #0]
   24ee4:	f7ef b94a 	b.w	1417c <z_arm_fatal_error>

00024ee8 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   24ee8:	2100      	movs	r1, #0
   24eea:	2001      	movs	r0, #1
   24eec:	f7ef b946 	b.w	1417c <z_arm_fatal_error>

00024ef0 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   24ef0:	b508      	push	{r3, lr}
	handler();
   24ef2:	f7ef f9dd 	bl	142b0 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   24ef6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   24efa:	f7ef bab5 	b.w	14468 <z_arm_exc_exit>

00024efe <_stdout_hook_default>:
}
   24efe:	f04f 30ff 	mov.w	r0, #4294967295
   24f02:	4770      	bx	lr

00024f04 <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   24f04:	f7fa bfc6 	b.w	1fe94 <z_impl_z_errno>

00024f08 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   24f08:	2806      	cmp	r0, #6
   24f0a:	d108      	bne.n	24f1e <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   24f0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   24f10:	2201      	movs	r2, #1
   24f12:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   24f16:	f3bf 8f4f 	dsb	sy
        __WFE();
   24f1a:	bf20      	wfe
    while (true)
   24f1c:	e7fd      	b.n	24f1a <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   24f1e:	4770      	bx	lr

00024f20 <pm_state_exit_post_ops>:
   24f20:	2300      	movs	r3, #0
   24f22:	f383 8811 	msr	BASEPRI, r3
   24f26:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   24f2a:	4770      	bx	lr

00024f2c <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   24f2c:	b530      	push	{r4, r5, lr}
   24f2e:	b085      	sub	sp, #20
   24f30:	4614      	mov	r4, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   24f32:	880a      	ldrh	r2, [r1, #0]
   24f34:	788b      	ldrb	r3, [r1, #2]
   24f36:	f8ad 2000 	strh.w	r2, [sp]
{
   24f3a:	4605      	mov	r5, r0
	(void)memset(res + 3, 0, 13);
   24f3c:	220d      	movs	r2, #13
   24f3e:	2100      	movs	r1, #0
   24f40:	f10d 0003 	add.w	r0, sp, #3
	memcpy(res, r, 3);
   24f44:	f88d 3002 	strb.w	r3, [sp, #2]
	(void)memset(res + 3, 0, 13);
   24f48:	f002 fda9 	bl	27a9e <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   24f4c:	466a      	mov	r2, sp
   24f4e:	4669      	mov	r1, sp
   24f50:	4628      	mov	r0, r5
   24f52:	f002 fa6b 	bl	2742c <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   24f56:	b928      	cbnz	r0, 24f64 <ah+0x38>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   24f58:	f8bd 2000 	ldrh.w	r2, [sp]
   24f5c:	f89d 3002 	ldrb.w	r3, [sp, #2]
   24f60:	8022      	strh	r2, [r4, #0]
   24f62:	70a3      	strb	r3, [r4, #2]
	 * result of ah.
	 */
	memcpy(out, res, 3);

	return 0;
}
   24f64:	b005      	add	sp, #20
   24f66:	bd30      	pop	{r4, r5, pc}

00024f68 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   24f68:	b513      	push	{r0, r1, r4, lr}
   24f6a:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   24f6c:	aa01      	add	r2, sp, #4
   24f6e:	3103      	adds	r1, #3
   24f70:	f7ff ffdc 	bl	24f2c <ah>
	if (err) {
   24f74:	b948      	cbnz	r0, 24f8a <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   24f76:	2203      	movs	r2, #3
   24f78:	a901      	add	r1, sp, #4
   24f7a:	4620      	mov	r0, r4
   24f7c:	f002 fd5e 	bl	27a3c <memcmp>
   24f80:	fab0 f080 	clz	r0, r0
   24f84:	0940      	lsrs	r0, r0, #5
}
   24f86:	b002      	add	sp, #8
   24f88:	bd10      	pop	{r4, pc}
		return false;
   24f8a:	2000      	movs	r0, #0
   24f8c:	e7fb      	b.n	24f86 <bt_rpa_irk_matches+0x1e>

00024f8e <bt_settings_decode_key>:
{
   24f8e:	b570      	push	{r4, r5, r6, lr}
   24f90:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   24f92:	2100      	movs	r1, #0
{
   24f94:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   24f96:	f7ff fca9 	bl	248ec <settings_name_next>
   24f9a:	280d      	cmp	r0, #13
   24f9c:	d118      	bne.n	24fd0 <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   24f9e:	7b23      	ldrb	r3, [r4, #12]
   24fa0:	2b30      	cmp	r3, #48	; 0x30
   24fa2:	d111      	bne.n	24fc8 <bt_settings_decode_key+0x3a>
		addr->type = BT_ADDR_LE_PUBLIC;
   24fa4:	2300      	movs	r3, #0
   24fa6:	702b      	strb	r3, [r5, #0]
   24fa8:	f104 060c 	add.w	r6, r4, #12
   24fac:	3506      	adds	r5, #6
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   24fae:	462a      	mov	r2, r5
   24fb0:	4620      	mov	r0, r4
   24fb2:	2301      	movs	r3, #1
   24fb4:	2102      	movs	r1, #2
	for (uint8_t i = 0; i < 6; i++) {
   24fb6:	3402      	adds	r4, #2
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   24fb8:	f7fe ffdd 	bl	23f76 <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   24fbc:	42b4      	cmp	r4, r6
   24fbe:	f105 35ff 	add.w	r5, r5, #4294967295
   24fc2:	d1f4      	bne.n	24fae <bt_settings_decode_key+0x20>
	return 0;
   24fc4:	2000      	movs	r0, #0
}
   24fc6:	bd70      	pop	{r4, r5, r6, pc}
	} else if (key[12] == '1') {
   24fc8:	2b31      	cmp	r3, #49	; 0x31
   24fca:	d101      	bne.n	24fd0 <bt_settings_decode_key+0x42>
		addr->type = BT_ADDR_LE_RANDOM;
   24fcc:	2301      	movs	r3, #1
   24fce:	e7ea      	b.n	24fa6 <bt_settings_decode_key+0x18>
		return -EINVAL;
   24fd0:	f06f 0015 	mvn.w	r0, #21
   24fd4:	e7f7      	b.n	24fc6 <bt_settings_decode_key+0x38>

00024fd6 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   24fd6:	b510      	push	{r4, lr}
   24fd8:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   24fda:	7801      	ldrb	r1, [r0, #0]
   24fdc:	7822      	ldrb	r2, [r4, #0]
   24fde:	428a      	cmp	r2, r1
{
   24fe0:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   24fe2:	d00f      	beq.n	25004 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   24fe4:	4669      	mov	r1, sp
   24fe6:	f7ef fffd 	bl	14fe4 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   24fea:	a905      	add	r1, sp, #20
   24fec:	4620      	mov	r0, r4
   24fee:	f7ef fff9 	bl	14fe4 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   24ff2:	2210      	movs	r2, #16
   24ff4:	f10d 0115 	add.w	r1, sp, #21
   24ff8:	f10d 0001 	add.w	r0, sp, #1
   24ffc:	f002 fd1e 	bl	27a3c <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   25000:	b00a      	add	sp, #40	; 0x28
   25002:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   25004:	2a01      	cmp	r2, #1
   25006:	d006      	beq.n	25016 <bt_uuid_cmp+0x40>
   25008:	2a02      	cmp	r2, #2
   2500a:	d007      	beq.n	2501c <bt_uuid_cmp+0x46>
   2500c:	b972      	cbnz	r2, 2502c <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   2500e:	8840      	ldrh	r0, [r0, #2]
   25010:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   25012:	1ac0      	subs	r0, r0, r3
   25014:	e7f4      	b.n	25000 <bt_uuid_cmp+0x2a>
   25016:	6840      	ldr	r0, [r0, #4]
   25018:	6863      	ldr	r3, [r4, #4]
   2501a:	e7fa      	b.n	25012 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2501c:	2210      	movs	r2, #16
   2501e:	1c61      	adds	r1, r4, #1
   25020:	3001      	adds	r0, #1
}
   25022:	b00a      	add	sp, #40	; 0x28
   25024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   25028:	f002 bd08 	b.w	27a3c <memcmp>
	switch (u1->type) {
   2502c:	f06f 0015 	mvn.w	r0, #21
   25030:	e7e6      	b.n	25000 <bt_uuid_cmp+0x2a>

00025032 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   25032:	2a04      	cmp	r2, #4
   25034:	d00a      	beq.n	2504c <bt_uuid_create+0x1a>
   25036:	2a10      	cmp	r2, #16
   25038:	d00d      	beq.n	25056 <bt_uuid_create+0x24>
   2503a:	2a02      	cmp	r2, #2
   2503c:	f04f 0300 	mov.w	r3, #0
   25040:	d115      	bne.n	2506e <bt_uuid_create+0x3c>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   25042:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   25044:	880b      	ldrh	r3, [r1, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   25046:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   25048:	2001      	movs	r0, #1
		break;
   2504a:	4770      	bx	lr
		uuid->type = BT_UUID_TYPE_32;
   2504c:	2301      	movs	r3, #1
   2504e:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   25050:	680a      	ldr	r2, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   25052:	6042      	str	r2, [r0, #4]
		break;
   25054:	e7f8      	b.n	25048 <bt_uuid_create+0x16>
		uuid->type = BT_UUID_TYPE_128;
   25056:	2302      	movs	r3, #2
   25058:	f800 3b01 	strb.w	r3, [r0], #1
   2505c:	f101 0310 	add.w	r3, r1, #16
   25060:	f851 2b04 	ldr.w	r2, [r1], #4
   25064:	f840 2b04 	str.w	r2, [r0], #4
   25068:	4299      	cmp	r1, r3
   2506a:	d1f9      	bne.n	25060 <bt_uuid_create+0x2e>
   2506c:	e7ec      	b.n	25048 <bt_uuid_create+0x16>
	switch (data_len) {
   2506e:	4618      	mov	r0, r3
}
   25070:	4770      	bx	lr

00025072 <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   25072:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   25074:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   25076:	2106      	movs	r1, #6
{
   25078:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   2507a:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   2507e:	f7f9 fce3 	bl	1ea48 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   25082:	b918      	cbnz	r0, 2508c <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   25084:	79a3      	ldrb	r3, [r4, #6]
   25086:	f063 033f 	orn	r3, r3, #63	; 0x3f
   2508a:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   2508c:	bd10      	pop	{r4, pc}

0002508e <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   2508e:	280f      	cmp	r0, #15
   25090:	d806      	bhi.n	250a0 <bt_hci_evt_get_flags+0x12>
   25092:	280d      	cmp	r0, #13
   25094:	d80b      	bhi.n	250ae <bt_hci_evt_get_flags+0x20>
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   25096:	2805      	cmp	r0, #5
   25098:	bf14      	ite	ne
   2509a:	2002      	movne	r0, #2
   2509c:	2003      	moveq	r0, #3
   2509e:	4770      	bx	lr
	switch (evt) {
   250a0:	2813      	cmp	r0, #19
   250a2:	d004      	beq.n	250ae <bt_hci_evt_get_flags+0x20>
   250a4:	281a      	cmp	r0, #26
   250a6:	bf14      	ite	ne
   250a8:	2002      	movne	r0, #2
   250aa:	2001      	moveq	r0, #1
   250ac:	4770      	bx	lr
   250ae:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   250b0:	4770      	bx	lr

000250b2 <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   250b2:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   250b6:	b193      	cbz	r3, 250de <update_sec_level+0x2c>
   250b8:	7b5a      	ldrb	r2, [r3, #13]
   250ba:	07d1      	lsls	r1, r2, #31
   250bc:	d50f      	bpl.n	250de <update_sec_level+0x2c>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   250be:	06d2      	lsls	r2, r2, #27
   250c0:	d50b      	bpl.n	250da <update_sec_level+0x28>
   250c2:	7b1b      	ldrb	r3, [r3, #12]
   250c4:	2b10      	cmp	r3, #16
   250c6:	d108      	bne.n	250da <update_sec_level+0x28>
			conn->sec_level = BT_SECURITY_L4;
   250c8:	2304      	movs	r3, #4
		conn->sec_level = BT_SECURITY_L2;
   250ca:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   250cc:	7a82      	ldrb	r2, [r0, #10]
   250ce:	7a40      	ldrb	r0, [r0, #9]
}
   250d0:	4282      	cmp	r2, r0
   250d2:	bf8c      	ite	hi
   250d4:	2000      	movhi	r0, #0
   250d6:	2001      	movls	r0, #1
   250d8:	4770      	bx	lr
			conn->sec_level = BT_SECURITY_L3;
   250da:	2303      	movs	r3, #3
   250dc:	e7f5      	b.n	250ca <update_sec_level+0x18>
		conn->sec_level = BT_SECURITY_L2;
   250de:	2302      	movs	r3, #2
   250e0:	e7f3      	b.n	250ca <update_sec_level+0x18>

000250e2 <atomic_or>:
{
   250e2:	4603      	mov	r3, r0
}
   250e4:	f3bf 8f5b 	dmb	ish
   250e8:	e853 0f00 	ldrex	r0, [r3]
   250ec:	ea40 0201 	orr.w	r2, r0, r1
   250f0:	e843 2c00 	strex	ip, r2, [r3]
   250f4:	f1bc 0f00 	cmp.w	ip, #0
   250f8:	d1f6      	bne.n	250e8 <atomic_or+0x6>
   250fa:	f3bf 8f5b 	dmb	ish
   250fe:	4770      	bx	lr

00025100 <bt_addr_copy>:
   25100:	680b      	ldr	r3, [r1, #0]
   25102:	6003      	str	r3, [r0, #0]
   25104:	888b      	ldrh	r3, [r1, #4]
   25106:	8083      	strh	r3, [r0, #4]
}
   25108:	4770      	bx	lr

0002510a <bt_addr_le_copy>:
   2510a:	680b      	ldr	r3, [r1, #0]
   2510c:	6003      	str	r3, [r0, #0]
   2510e:	888b      	ldrh	r3, [r1, #4]
   25110:	8083      	strh	r3, [r0, #4]
   25112:	798b      	ldrb	r3, [r1, #6]
   25114:	7183      	strb	r3, [r0, #6]
}
   25116:	4770      	bx	lr

00025118 <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   25118:	f3bf 8f5b 	dmb	ish
   2511c:	e850 3f00 	ldrex	r3, [r0]
   25120:	400b      	ands	r3, r1
   25122:	e840 3200 	strex	r2, r3, [r0]
   25126:	2a00      	cmp	r2, #0
   25128:	d1f8      	bne.n	2511c <atomic_and.isra.0+0x4>
   2512a:	f3bf 8f5b 	dmb	ish
}
   2512e:	4770      	bx	lr

00025130 <sys_put_le64>:
	dst[1] = val >> 8;
   25130:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   25134:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   25136:	0e00      	lsrs	r0, r0, #24
   25138:	7053      	strb	r3, [r2, #1]
   2513a:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   2513c:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   2513e:	f3c1 2007 	ubfx	r0, r1, #8, #8
   25142:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   25144:	7093      	strb	r3, [r2, #2]
   25146:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   25148:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   2514a:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   2514c:	71d1      	strb	r1, [r2, #7]
}
   2514e:	4770      	bx	lr

00025150 <bt_hci_disconnect>:
{
   25150:	b570      	push	{r4, r5, r6, lr}
   25152:	4606      	mov	r6, r0
   25154:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   25156:	f240 4006 	movw	r0, #1030	; 0x406
   2515a:	2103      	movs	r1, #3
   2515c:	f7f0 fb36 	bl	157cc <bt_hci_cmd_create>
	if (!buf) {
   25160:	4604      	mov	r4, r0
   25162:	b168      	cbz	r0, 25180 <bt_hci_disconnect+0x30>
   25164:	2103      	movs	r1, #3
   25166:	3008      	adds	r0, #8
   25168:	f7f7 fa92 	bl	1c690 <net_buf_simple_add>
	disconn->reason = reason;
   2516c:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   2516e:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   25170:	4621      	mov	r1, r4
   25172:	2200      	movs	r2, #0
}
   25174:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   25178:	f240 4006 	movw	r0, #1030	; 0x406
   2517c:	f7f0 bb6e 	b.w	1585c <bt_hci_cmd_send_sync>
}
   25180:	f06f 0068 	mvn.w	r0, #104	; 0x68
   25184:	bd70      	pop	{r4, r5, r6, pc}

00025186 <bt_le_set_data_len>:
{
   25186:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25188:	4607      	mov	r7, r0
   2518a:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   2518c:	f242 0022 	movw	r0, #8226	; 0x2022
   25190:	2106      	movs	r1, #6
{
   25192:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   25194:	f7f0 fb1a 	bl	157cc <bt_hci_cmd_create>
	if (!buf) {
   25198:	4604      	mov	r4, r0
   2519a:	b178      	cbz	r0, 251bc <bt_le_set_data_len+0x36>
   2519c:	2106      	movs	r1, #6
   2519e:	3008      	adds	r0, #8
   251a0:	f7f7 fa76 	bl	1c690 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   251a4:	883b      	ldrh	r3, [r7, #0]
   251a6:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   251a8:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   251aa:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   251ac:	4621      	mov	r1, r4
   251ae:	2200      	movs	r2, #0
}
   251b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   251b4:	f242 0022 	movw	r0, #8226	; 0x2022
   251b8:	f7f0 bb50 	b.w	1585c <bt_hci_cmd_send_sync>
}
   251bc:	f06f 0068 	mvn.w	r0, #104	; 0x68
   251c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000251c2 <bt_le_set_phy>:
{
   251c2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   251c6:	4680      	mov	r8, r0
   251c8:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   251ca:	f242 0032 	movw	r0, #8242	; 0x2032
   251ce:	2107      	movs	r1, #7
{
   251d0:	f89d 9020 	ldrb.w	r9, [sp, #32]
   251d4:	4616      	mov	r6, r2
   251d6:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   251d8:	f7f0 faf8 	bl	157cc <bt_hci_cmd_create>
	if (!buf) {
   251dc:	4604      	mov	r4, r0
   251de:	b198      	cbz	r0, 25208 <bt_le_set_phy+0x46>
   251e0:	2107      	movs	r1, #7
   251e2:	3008      	adds	r0, #8
   251e4:	f7f7 fa54 	bl	1c690 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   251e8:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   251ec:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   251ee:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   251f0:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   251f2:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   251f4:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   251f8:	4621      	mov	r1, r4
   251fa:	2200      	movs	r2, #0
}
   251fc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   25200:	f242 0032 	movw	r0, #8242	; 0x2032
   25204:	f7f0 bb2a 	b.w	1585c <bt_hci_cmd_send_sync>
}
   25208:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2520c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00025210 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   25210:	6880      	ldr	r0, [r0, #8]
   25212:	f7f0 bba5 	b.w	15960 <bt_hci_le_enh_conn_complete>

00025216 <le_legacy_conn_complete>:
{
   25216:	b500      	push	{lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   25218:	6881      	ldr	r1, [r0, #8]
{
   2521a:	b08b      	sub	sp, #44	; 0x2c
	enh.status         = evt->status;
   2521c:	780b      	ldrb	r3, [r1, #0]
   2521e:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   25222:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   25226:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   2522a:	78cb      	ldrb	r3, [r1, #3]
   2522c:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   25230:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   25234:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   25238:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   2523c:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   25240:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   25244:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   25248:	7c4b      	ldrb	r3, [r1, #17]
   2524a:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   2524e:	a803      	add	r0, sp, #12
   25250:	3104      	adds	r1, #4
   25252:	f7ff ff5a 	bl	2510a <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   25256:	4669      	mov	r1, sp
   25258:	2200      	movs	r2, #0
   2525a:	f10d 0013 	add.w	r0, sp, #19
   2525e:	9200      	str	r2, [sp, #0]
   25260:	f8ad 2004 	strh.w	r2, [sp, #4]
   25264:	f7ff ff4c 	bl	25100 <bt_addr_copy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   25268:	9200      	str	r2, [sp, #0]
   2526a:	f10d 0019 	add.w	r0, sp, #25
   2526e:	808a      	strh	r2, [r1, #4]
   25270:	f7ff ff46 	bl	25100 <bt_addr_copy>
	bt_hci_le_enh_conn_complete(evt);
   25274:	a802      	add	r0, sp, #8
   25276:	f7f0 fb73 	bl	15960 <bt_hci_le_enh_conn_complete>
}
   2527a:	b00b      	add	sp, #44	; 0x2c
   2527c:	f85d fb04 	ldr.w	pc, [sp], #4

00025280 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   25280:	8803      	ldrh	r3, [r0, #0]
   25282:	8842      	ldrh	r2, [r0, #2]
   25284:	4293      	cmp	r3, r2
{
   25286:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   25288:	d819      	bhi.n	252be <bt_le_conn_params_valid+0x3e>
   2528a:	2b05      	cmp	r3, #5
   2528c:	d917      	bls.n	252be <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   2528e:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   25292:	d814      	bhi.n	252be <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   25294:	8883      	ldrh	r3, [r0, #4]
   25296:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   2529a:	d210      	bcs.n	252be <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   2529c:	88c0      	ldrh	r0, [r0, #6]
   2529e:	f1a0 010a 	sub.w	r1, r0, #10
   252a2:	b289      	uxth	r1, r1
   252a4:	f640 4476 	movw	r4, #3190	; 0xc76
   252a8:	42a1      	cmp	r1, r4
   252aa:	d808      	bhi.n	252be <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   252ac:	3301      	adds	r3, #1
   252ae:	b29b      	uxth	r3, r3
   252b0:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   252b2:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   252b6:	bf34      	ite	cc
   252b8:	2001      	movcc	r0, #1
   252ba:	2000      	movcs	r0, #0
}
   252bc:	bd10      	pop	{r4, pc}
		return false;
   252be:	2000      	movs	r0, #0
   252c0:	e7fc      	b.n	252bc <bt_le_conn_params_valid+0x3c>

000252c2 <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   252c2:	2000      	movs	r0, #0
   252c4:	4770      	bx	lr

000252c6 <bt_addr_le_is_bonded>:
	return 0;
}
#endif

bool bt_addr_le_is_bonded(uint8_t id, const bt_addr_le_t *addr)
{
   252c6:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_BT_SMP)) {
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   252c8:	f7f6 fd5e 	bl	1bd88 <bt_keys_find_addr>

		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
   252cc:	b118      	cbz	r0, 252d6 <bt_addr_le_is_bonded+0x10>
   252ce:	89c0      	ldrh	r0, [r0, #14]
   252d0:	3800      	subs	r0, #0
   252d2:	bf18      	it	ne
   252d4:	2001      	movne	r0, #1
	} else {
		return false;
	}
}
   252d6:	bd08      	pop	{r3, pc}

000252d8 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   252d8:	f3bf 8f5b 	dmb	ish
   252dc:	6800      	ldr	r0, [r0, #0]
   252de:	f3bf 8f5b 	dmb	ish
}
   252e2:	4770      	bx	lr

000252e4 <bt_addr_copy>:
   252e4:	680b      	ldr	r3, [r1, #0]
   252e6:	6003      	str	r3, [r0, #0]
   252e8:	888b      	ldrh	r3, [r1, #4]
   252ea:	8083      	strh	r3, [r0, #4]
}
   252ec:	4770      	bx	lr

000252ee <bt_addr_le_copy>:
   252ee:	680b      	ldr	r3, [r1, #0]
   252f0:	6003      	str	r3, [r0, #0]
   252f2:	888b      	ldrh	r3, [r1, #4]
   252f4:	8083      	strh	r3, [r0, #4]
   252f6:	798b      	ldrb	r3, [r1, #6]
   252f8:	7183      	strb	r3, [r0, #6]
}
   252fa:	4770      	bx	lr

000252fc <hci_id_add>:
{
   252fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   252fe:	460f      	mov	r7, r1
   25300:	4614      	mov	r4, r2
	if (id >= CONFIG_BT_ID_MAX) {
   25302:	bb30      	cbnz	r0, 25352 <hci_id_add+0x56>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   25304:	2127      	movs	r1, #39	; 0x27
   25306:	f242 0027 	movw	r0, #8231	; 0x2027
   2530a:	f7f0 fa5f 	bl	157cc <bt_hci_cmd_create>
	if (!buf) {
   2530e:	4605      	mov	r5, r0
   25310:	b310      	cbz	r0, 25358 <hci_id_add+0x5c>
   25312:	2127      	movs	r1, #39	; 0x27
   25314:	3008      	adds	r0, #8
   25316:	f7f7 f9bb 	bl	1c690 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   2531a:	4639      	mov	r1, r7
   2531c:	f7ff ffe7 	bl	252ee <bt_addr_le_copy>
   25320:	4606      	mov	r6, r0
   25322:	4622      	mov	r2, r4
   25324:	1dc3      	adds	r3, r0, #7
   25326:	f104 0110 	add.w	r1, r4, #16
   2532a:	f852 0b04 	ldr.w	r0, [r2], #4
   2532e:	f843 0b04 	str.w	r0, [r3], #4
   25332:	428a      	cmp	r2, r1
   25334:	d1f9      	bne.n	2532a <hci_id_add+0x2e>
__ssp_bos_icheck3(memset, void *, int)
   25336:	2210      	movs	r2, #16
   25338:	2100      	movs	r1, #0
   2533a:	f106 0017 	add.w	r0, r6, #23
   2533e:	f002 fbae 	bl	27a9e <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   25342:	4629      	mov	r1, r5
   25344:	2200      	movs	r2, #0
}
   25346:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   2534a:	f242 0027 	movw	r0, #8231	; 0x2027
   2534e:	f7f0 ba85 	b.w	1585c <bt_hci_cmd_send_sync>
		return -EINVAL;
   25352:	f06f 0015 	mvn.w	r0, #21
}
   25356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   25358:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2535c:	e7fb      	b.n	25356 <hci_id_add+0x5a>

0002535e <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   2535e:	7a03      	ldrb	r3, [r0, #8]
   25360:	075b      	lsls	r3, r3, #29
{
   25362:	4602      	mov	r2, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   25364:	d505      	bpl.n	25372 <keys_add_id+0x14>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   25366:	4601      	mov	r1, r0
   25368:	322a      	adds	r2, #42	; 0x2a
   2536a:	f811 0b01 	ldrb.w	r0, [r1], #1
   2536e:	f7ff bfc5 	b.w	252fc <hci_id_add>
}
   25372:	4770      	bx	lr

00025374 <adv_unpause_enabled>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   25374:	f100 0310 	add.w	r3, r0, #16
   25378:	f3bf 8f5b 	dmb	ish
   2537c:	e853 2f00 	ldrex	r2, [r3]
   25380:	f422 4180 	bic.w	r1, r2, #16384	; 0x4000
   25384:	e843 1c00 	strex	ip, r1, [r3]
   25388:	f1bc 0f00 	cmp.w	ip, #0
   2538c:	d1f6      	bne.n	2537c <adv_unpause_enabled+0x8>
   2538e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   25392:	0453      	lsls	r3, r2, #17
   25394:	d502      	bpl.n	2539c <adv_unpause_enabled+0x28>
		bt_le_adv_set_enable(adv, true);
   25396:	2101      	movs	r1, #1
   25398:	f000 b951 	b.w	2563e <bt_le_adv_set_enable>
}
   2539c:	4770      	bx	lr

0002539e <addr_res_enable>:
{
   2539e:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   253a0:	2101      	movs	r1, #1
{
   253a2:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   253a4:	f242 002d 	movw	r0, #8237	; 0x202d
   253a8:	f7f0 fa10 	bl	157cc <bt_hci_cmd_create>
	if (!buf) {
   253ac:	4604      	mov	r4, r0
   253ae:	b158      	cbz	r0, 253c8 <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   253b0:	4629      	mov	r1, r5
   253b2:	3008      	adds	r0, #8
   253b4:	f001 fd86 	bl	26ec4 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   253b8:	4621      	mov	r1, r4
   253ba:	2200      	movs	r2, #0
}
   253bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   253c0:	f242 002d 	movw	r0, #8237	; 0x202d
   253c4:	f7f0 ba4a 	b.w	1585c <bt_hci_cmd_send_sync>
}
   253c8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   253cc:	bd38      	pop	{r3, r4, r5, pc}

000253ce <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   253ce:	f100 0210 	add.w	r2, r0, #16
{
   253d2:	b508      	push	{r3, lr}
   253d4:	4603      	mov	r3, r0
   253d6:	4610      	mov	r0, r2
   253d8:	f7ff ff7e 	bl	252d8 <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   253dc:	0641      	lsls	r1, r0, #25
   253de:	d511      	bpl.n	25404 <adv_pause_enabled+0x36>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   253e0:	f3bf 8f5b 	dmb	ish
   253e4:	e852 1f00 	ldrex	r1, [r2]
   253e8:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
   253ec:	e842 1000 	strex	r0, r1, [r2]
   253f0:	2800      	cmp	r0, #0
   253f2:	d1f7      	bne.n	253e4 <adv_pause_enabled+0x16>
   253f4:	f3bf 8f5b 	dmb	ish
		bt_le_adv_set_enable(adv, false);
   253f8:	4618      	mov	r0, r3
   253fa:	2100      	movs	r1, #0
}
   253fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_adv_set_enable(adv, false);
   25400:	f000 b91d 	b.w	2563e <bt_le_adv_set_enable>
}
   25404:	bd08      	pop	{r3, pc}

00025406 <bt_lookup_id_addr>:
{
   25406:	b510      	push	{r4, lr}
   25408:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
   2540a:	f7f6 fc83 	bl	1bd14 <bt_keys_find_irk>
		if (keys) {
   2540e:	b100      	cbz	r0, 25412 <bt_lookup_id_addr+0xc>
			return &keys->addr;
   25410:	1c44      	adds	r4, r0, #1
}
   25412:	4620      	mov	r0, r4
   25414:	bd10      	pop	{r4, pc}

00025416 <bt_id_set_adv_private_addr>:
{
   25416:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   25418:	2106      	movs	r1, #6
   2541a:	4668      	mov	r0, sp
   2541c:	f7f9 fb14 	bl	1ea48 <bt_rand>
	if (err) {
   25420:	b940      	cbnz	r0, 25434 <bt_id_set_adv_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   25422:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
   25426:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   25428:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2542c:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
   25430:	f7f0 ff46 	bl	162c0 <set_random_address>
}
   25434:	b003      	add	sp, #12
   25436:	f85d fb04 	ldr.w	pc, [sp], #4

0002543a <bt_id_adv_random_addr_check>:
}
   2543a:	2001      	movs	r0, #1
   2543c:	4770      	bx	lr

0002543e <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   2543e:	7a03      	ldrb	r3, [r0, #8]
   25440:	07d9      	lsls	r1, r3, #31
   25442:	d504      	bpl.n	2544e <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   25444:	f023 0301 	bic.w	r3, r3, #1
   25448:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   2544a:	f7f0 bfbb 	b.w	163c4 <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   2544e:	0799      	lsls	r1, r3, #30
   25450:	d504      	bpl.n	2545c <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   25452:	f023 0302 	bic.w	r3, r3, #2
   25456:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   25458:	f7f1 b868 	b.w	1652c <bt_id_del>
}
   2545c:	4770      	bx	lr

0002545e <bt_id_init>:
#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
}
   2545e:	2000      	movs	r0, #0
   25460:	4770      	bx	lr

00025462 <get_adv_channel_map>:
{
   25462:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   25464:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   25468:	bf0c      	ite	eq
   2546a:	2007      	moveq	r0, #7
   2546c:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   2546e:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   25470:	bf48      	it	mi
   25472:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   25476:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   25478:	bf48      	it	mi
   2547a:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   2547e:	4770      	bx	lr

00025480 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   25480:	f3bf 8f5b 	dmb	ish
   25484:	6800      	ldr	r0, [r0, #0]
   25486:	f3bf 8f5b 	dmb	ish
}
   2548a:	4770      	bx	lr

0002548c <atomic_and>:
{
   2548c:	4603      	mov	r3, r0
}
   2548e:	f3bf 8f5b 	dmb	ish
   25492:	e853 0f00 	ldrex	r0, [r3]
   25496:	ea00 0201 	and.w	r2, r0, r1
   2549a:	e843 2c00 	strex	ip, r2, [r3]
   2549e:	f1bc 0f00 	cmp.w	ip, #0
   254a2:	d1f6      	bne.n	25492 <atomic_and+0x6>
   254a4:	f3bf 8f5b 	dmb	ish
   254a8:	4770      	bx	lr

000254aa <bt_addr_le_copy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   254aa:	680b      	ldr	r3, [r1, #0]
   254ac:	6003      	str	r3, [r0, #0]
   254ae:	888b      	ldrh	r3, [r1, #4]
   254b0:	8083      	strh	r3, [r0, #4]
   254b2:	798b      	ldrb	r3, [r1, #6]
   254b4:	7183      	strb	r3, [r0, #6]
   254b6:	4770      	bx	lr

000254b8 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   254b8:	2301      	movs	r3, #1
{
   254ba:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   254bc:	fa03 f101 	lsl.w	r1, r3, r1
{
   254c0:	4604      	mov	r4, r0
	if (val) {
   254c2:	b162      	cbz	r2, 254de <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   254c4:	f3bf 8f5b 	dmb	ish
   254c8:	e854 3f00 	ldrex	r3, [r4]
   254cc:	430b      	orrs	r3, r1
   254ce:	e844 3200 	strex	r2, r3, [r4]
   254d2:	2a00      	cmp	r2, #0
   254d4:	d1f8      	bne.n	254c8 <atomic_set_bit_to+0x10>
   254d6:	f3bf 8f5b 	dmb	ish
	}
}
   254da:	bc10      	pop	{r4}
   254dc:	4770      	bx	lr
   254de:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   254e0:	43c9      	mvns	r1, r1
   254e2:	f7ff bfd3 	b.w	2548c <atomic_and>

000254e6 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   254e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   254ea:	b087      	sub	sp, #28
   254ec:	4605      	mov	r5, r0
   254ee:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   254f2:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   254f6:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   254fa:	460c      	mov	r4, r1
   254fc:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   254fe:	2100      	movs	r1, #0
   25500:	2210      	movs	r2, #16
   25502:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   25504:	461f      	mov	r7, r3
	struct bt_ad d[2] = {};
   25506:	f002 faca 	bl	27a9e <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   2550a:	b186      	cbz	r6, 2552e <le_adv_update.constprop.0+0x48>
		const char *name = bt_get_name();
   2550c:	f7f0 feba 	bl	16284 <bt_get_name>
   25510:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   25512:	2c00      	cmp	r4, #0
   25514:	d139      	bne.n	2558a <le_adv_update.constprop.0+0xa4>
   25516:	2f00      	cmp	r7, #0
   25518:	d142      	bne.n	255a0 <le_adv_update.constprop.0+0xba>
		data = (struct bt_data)BT_DATA(
   2551a:	4658      	mov	r0, fp
   2551c:	f7e7 fc59 	bl	cdd2 <strlen>
   25520:	2309      	movs	r3, #9
   25522:	f88d 3000 	strb.w	r3, [sp]
   25526:	f88d 0001 	strb.w	r0, [sp, #1]
   2552a:	f8cd b004 	str.w	fp, [sp, #4]
		if (name_type == ADV_NAME_TYPE_AD) {
   2552e:	2e01      	cmp	r6, #1
			d_len = 2;
   25530:	bf0c      	ite	eq
   25532:	2202      	moveq	r2, #2
		d_len = 1;
   25534:	2201      	movne	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   25536:	a902      	add	r1, sp, #8
   25538:	f242 0008 	movw	r0, #8200	; 0x2008
		d[0].len = ad_len;
   2553c:	e9cd 4802 	strd	r4, r8, [sp, #8]
			d[1].data = &data;
   25540:	bf04      	itt	eq
   25542:	f8cd d010 	streq.w	sp, [sp, #16]
			d[1].len = 1;
   25546:	9605      	streq	r6, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   25548:	f7f1 fa28 	bl	1699c <hci_set_ad>
		if (err) {
   2554c:	4604      	mov	r4, r0
   2554e:	b978      	cbnz	r0, 25570 <le_adv_update.constprop.0+0x8a>
	if (scannable) {
   25550:	f1ba 0f00 	cmp.w	sl, #0
   25554:	d126      	bne.n	255a4 <le_adv_update.constprop.0+0xbe>
   25556:	3510      	adds	r5, #16
   25558:	f3bf 8f5b 	dmb	ish
   2555c:	e855 3f00 	ldrex	r3, [r5]
   25560:	f043 0304 	orr.w	r3, r3, #4
   25564:	e845 3200 	strex	r2, r3, [r5]
   25568:	2a00      	cmp	r2, #0
   2556a:	d1f7      	bne.n	2555c <le_adv_update.constprop.0+0x76>
   2556c:	f3bf 8f5b 	dmb	ish
}
   25570:	4620      	mov	r0, r4
   25572:	b007      	add	sp, #28
   25574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   25578:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   2557c:	3a08      	subs	r2, #8
   2557e:	2a01      	cmp	r2, #1
   25580:	d925      	bls.n	255ce <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   25582:	3301      	adds	r3, #1
   25584:	4598      	cmp	r8, r3
   25586:	d1f7      	bne.n	25578 <le_adv_update.constprop.0+0x92>
   25588:	e7c5      	b.n	25516 <le_adv_update.constprop.0+0x30>
   2558a:	2300      	movs	r3, #0
   2558c:	e7fa      	b.n	25584 <le_adv_update.constprop.0+0x9e>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   2558e:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   25592:	3a08      	subs	r2, #8
   25594:	2a01      	cmp	r2, #1
   25596:	d91a      	bls.n	255ce <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   25598:	3301      	adds	r3, #1
   2559a:	4599      	cmp	r9, r3
   2559c:	d1f7      	bne.n	2558e <le_adv_update.constprop.0+0xa8>
   2559e:	e7bc      	b.n	2551a <le_adv_update.constprop.0+0x34>
   255a0:	2300      	movs	r3, #0
   255a2:	e7fa      	b.n	2559a <le_adv_update.constprop.0+0xb4>
		if (name_type == ADV_NAME_TYPE_SD) {
   255a4:	2e02      	cmp	r6, #2
   255a6:	f04f 0201 	mov.w	r2, #1
			d[1].len = 1;
   255aa:	bf08      	it	eq
   255ac:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   255ae:	a902      	add	r1, sp, #8
			d_len = 2;
   255b0:	bf08      	it	eq
   255b2:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   255b4:	f242 0009 	movw	r0, #8201	; 0x2009
			d[1].data = &data;
   255b8:	bf08      	it	eq
   255ba:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   255be:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   255c2:	f7f1 f9eb 	bl	1699c <hci_set_ad>
		if (err) {
   255c6:	2800      	cmp	r0, #0
   255c8:	d0c5      	beq.n	25556 <le_adv_update.constprop.0+0x70>
   255ca:	4604      	mov	r4, r0
   255cc:	e7d0      	b.n	25570 <le_adv_update.constprop.0+0x8a>
			return -EINVAL;
   255ce:	f06f 0415 	mvn.w	r4, #21
   255d2:	e7cd      	b.n	25570 <le_adv_update.constprop.0+0x8a>

000255d4 <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   255d4:	6843      	ldr	r3, [r0, #4]
   255d6:	f013 0008 	ands.w	r0, r3, #8
   255da:	d00a      	beq.n	255f2 <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   255dc:	035a      	lsls	r2, r3, #13
   255de:	d407      	bmi.n	255f0 <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   255e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
		return ADV_NAME_TYPE_SD;
   255e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   255e8:	bf0c      	ite	eq
   255ea:	2001      	moveq	r0, #1
   255ec:	2002      	movne	r0, #2
   255ee:	4770      	bx	lr
			return ADV_NAME_TYPE_AD;
   255f0:	2001      	movs	r0, #1
}
   255f2:	4770      	bx	lr

000255f4 <bt_le_adv_set_enable_legacy>:
{
   255f4:	b570      	push	{r4, r5, r6, lr}
   255f6:	4606      	mov	r6, r0
   255f8:	b086      	sub	sp, #24
   255fa:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   255fc:	f242 000a 	movw	r0, #8202	; 0x200a
   25600:	2101      	movs	r1, #1
   25602:	f7f0 f8e3 	bl	157cc <bt_hci_cmd_create>
	if (!buf) {
   25606:	4604      	mov	r4, r0
   25608:	b1b0      	cbz	r0, 25638 <bt_le_adv_set_enable_legacy+0x44>
   2560a:	3008      	adds	r0, #8
	if (enable) {
   2560c:	b195      	cbz	r5, 25634 <bt_le_adv_set_enable_legacy+0x40>
   2560e:	2101      	movs	r1, #1
   25610:	f001 fc58 	bl	26ec4 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   25614:	f106 0210 	add.w	r2, r6, #16
   25618:	a903      	add	r1, sp, #12
   2561a:	4620      	mov	r0, r4
   2561c:	9500      	str	r5, [sp, #0]
   2561e:	2306      	movs	r3, #6
   25620:	f7f0 f8c2 	bl	157a8 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   25624:	2200      	movs	r2, #0
   25626:	4621      	mov	r1, r4
   25628:	f242 000a 	movw	r0, #8202	; 0x200a
   2562c:	f7f0 f916 	bl	1585c <bt_hci_cmd_send_sync>
}
   25630:	b006      	add	sp, #24
   25632:	bd70      	pop	{r4, r5, r6, pc}
   25634:	4629      	mov	r1, r5
   25636:	e7eb      	b.n	25610 <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   25638:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2563c:	e7f8      	b.n	25630 <bt_le_adv_set_enable_legacy+0x3c>

0002563e <bt_le_adv_set_enable>:
	return bt_le_adv_set_enable_legacy(adv, enable);
   2563e:	f7ff bfd9 	b.w	255f4 <bt_le_adv_set_enable_legacy>

00025642 <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   25642:	3018      	adds	r0, #24
   25644:	f7fb bfe6 	b.w	21614 <k_work_cancel_delayable>

00025648 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   25648:	b510      	push	{r4, lr}
   2564a:	4603      	mov	r3, r0
	return list->head;
   2564c:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2564e:	2200      	movs	r2, #0
   25650:	b158      	cbz	r0, 2566a <sys_slist_find_and_remove+0x22>
   25652:	4288      	cmp	r0, r1
   25654:	d10f      	bne.n	25676 <sys_slist_find_and_remove+0x2e>
	return node->next;
   25656:	6808      	ldr	r0, [r1, #0]
	return list->tail;
   25658:	685c      	ldr	r4, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   2565a:	b93a      	cbnz	r2, 2566c <sys_slist_find_and_remove+0x24>
   2565c:	42a1      	cmp	r1, r4
	list->head = node;
   2565e:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   25660:	d100      	bne.n	25664 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   25662:	6058      	str	r0, [r3, #4]
	parent->next = child;
   25664:	2300      	movs	r3, #0
   25666:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   25668:	2001      	movs	r0, #1
   2566a:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   2566c:	42a1      	cmp	r1, r4
	parent->next = child;
   2566e:	6010      	str	r0, [r2, #0]
	list->tail = node;
   25670:	bf08      	it	eq
   25672:	605a      	streq	r2, [r3, #4]
}
   25674:	e7f6      	b.n	25664 <sys_slist_find_and_remove+0x1c>
	return node->next;
   25676:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   25678:	6800      	ldr	r0, [r0, #0]
   2567a:	e7e9      	b.n	25650 <sys_slist_find_and_remove+0x8>

0002567c <atomic_and>:
{
   2567c:	4603      	mov	r3, r0
}
   2567e:	f3bf 8f5b 	dmb	ish
   25682:	e853 0f00 	ldrex	r0, [r3]
   25686:	ea00 0201 	and.w	r2, r0, r1
   2568a:	e843 2c00 	strex	ip, r2, [r3]
   2568e:	f1bc 0f00 	cmp.w	ip, #0
   25692:	d1f6      	bne.n	25682 <atomic_and+0x6>
   25694:	f3bf 8f5b 	dmb	ish
   25698:	4770      	bx	lr

0002569a <tx_notify>:
{
   2569a:	b570      	push	{r4, r5, r6, lr}
   2569c:	4604      	mov	r4, r0
	__asm__ volatile(
   2569e:	f04f 0240 	mov.w	r2, #64	; 0x40
   256a2:	f3ef 8311 	mrs	r3, BASEPRI
   256a6:	f382 8812 	msr	BASEPRI_MAX, r2
   256aa:	f3bf 8f6f 	isb	sy
	return list->head;
   256ae:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   256b0:	b920      	cbnz	r0, 256bc <tx_notify+0x22>
	__asm__ volatile(
   256b2:	f383 8811 	msr	BASEPRI, r3
   256b6:	f3bf 8f6f 	isb	sy
}
   256ba:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   256bc:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return node->next;
   256be:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   256c0:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   256c2:	4288      	cmp	r0, r1
	list->tail = node;
   256c4:	bf08      	it	eq
   256c6:	6262      	streq	r2, [r4, #36]	; 0x24
   256c8:	f383 8811 	msr	BASEPRI, r3
   256cc:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   256d0:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   256d4:	f7f1 fd44 	bl	17160 <tx_free>
		cb(conn, user_data);
   256d8:	4631      	mov	r1, r6
   256da:	4620      	mov	r0, r4
   256dc:	47a8      	blx	r5
	while (1) {
   256de:	e7de      	b.n	2569e <tx_notify+0x4>

000256e0 <tx_complete_work>:
	tx_notify(conn);
   256e0:	3828      	subs	r0, #40	; 0x28
   256e2:	f7ff bfda 	b.w	2569a <tx_notify>

000256e6 <bt_conn_reset_rx_state>:
{
   256e6:	b510      	push	{r4, lr}
   256e8:	4604      	mov	r4, r0
	if (!conn->rx) {
   256ea:	6900      	ldr	r0, [r0, #16]
   256ec:	b118      	cbz	r0, 256f6 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   256ee:	f7f6 feb9 	bl	1c464 <net_buf_unref>
	conn->rx = NULL;
   256f2:	2300      	movs	r3, #0
   256f4:	6123      	str	r3, [r4, #16]
}
   256f6:	bd10      	pop	{r4, pc}

000256f8 <bt_conn_ref>:
{
   256f8:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   256fa:	f100 02c0 	add.w	r2, r0, #192	; 0xc0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   256fe:	f3bf 8f5b 	dmb	ish
   25702:	6813      	ldr	r3, [r2, #0]
   25704:	f3bf 8f5b 	dmb	ish
		if (!old) {
   25708:	b17b      	cbz	r3, 2572a <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2570a:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   2570e:	1c59      	adds	r1, r3, #1
   25710:	e852 4f00 	ldrex	r4, [r2]
   25714:	429c      	cmp	r4, r3
   25716:	d104      	bne.n	25722 <bt_conn_ref+0x2a>
   25718:	e842 1c00 	strex	ip, r1, [r2]
   2571c:	f1bc 0f00 	cmp.w	ip, #0
   25720:	d1f6      	bne.n	25710 <bt_conn_ref+0x18>
   25722:	f3bf 8f5b 	dmb	ish
   25726:	d1ea      	bne.n	256fe <bt_conn_ref+0x6>
}
   25728:	bd10      	pop	{r4, pc}
			return NULL;
   2572a:	4618      	mov	r0, r3
   2572c:	e7fc      	b.n	25728 <bt_conn_ref+0x30>

0002572e <conn_lookup_handle>:
{
   2572e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25732:	4607      	mov	r7, r0
   25734:	460e      	mov	r6, r1
   25736:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   25738:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2573a:	f04f 09c8 	mov.w	r9, #200	; 0xc8
	for (i = 0; i < size; i++) {
   2573e:	42b4      	cmp	r4, r6
   25740:	d103      	bne.n	2574a <conn_lookup_handle+0x1c>
	return NULL;
   25742:	2300      	movs	r3, #0
}
   25744:	4618      	mov	r0, r3
   25746:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2574a:	fb09 7004 	mla	r0, r9, r4, r7
   2574e:	f7ff ffd3 	bl	256f8 <bt_conn_ref>
   25752:	4603      	mov	r3, r0
		if (!conn) {
   25754:	b158      	cbz	r0, 2576e <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   25756:	7b45      	ldrb	r5, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   25758:	2d01      	cmp	r5, #1
   2575a:	d002      	beq.n	25762 <conn_lookup_handle+0x34>
   2575c:	3d07      	subs	r5, #7
   2575e:	2d01      	cmp	r5, #1
   25760:	d803      	bhi.n	2576a <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   25762:	881a      	ldrh	r2, [r3, #0]
   25764:	4542      	cmp	r2, r8
   25766:	d0ed      	beq.n	25744 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   25768:	4618      	mov	r0, r3
   2576a:	f7f1 ff27 	bl	175bc <bt_conn_unref>
	for (i = 0; i < size; i++) {
   2576e:	3401      	adds	r4, #1
   25770:	e7e5      	b.n	2573e <conn_lookup_handle+0x10>

00025772 <bt_conn_connected>:
{
   25772:	b510      	push	{r4, lr}
   25774:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   25776:	f7f2 fbe7 	bl	17f48 <bt_l2cap_connected>
	notify_connected(conn);
   2577a:	4620      	mov	r0, r4
}
   2577c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   25780:	f7f1 bcf8 	b.w	17174 <notify_connected>

00025784 <bt_conn_disconnect>:
{
   25784:	b538      	push	{r3, r4, r5, lr}
	switch (conn->state) {
   25786:	7b43      	ldrb	r3, [r0, #13]
   25788:	3b02      	subs	r3, #2
{
   2578a:	4604      	mov	r4, r0
	switch (conn->state) {
   2578c:	2b06      	cmp	r3, #6
   2578e:	d805      	bhi.n	2579c <bt_conn_disconnect+0x18>
   25790:	e8df f003 	tbb	[pc, r3]
   25794:	04040408 	.word	0x04040408
   25798:	0e0c      	.short	0x0e0c
   2579a:	0c          	.byte	0x0c
   2579b:	00          	.byte	0x00
   2579c:	f06f 057f 	mvn.w	r5, #127	; 0x7f
}
   257a0:	4628      	mov	r0, r5
   257a2:	bd38      	pop	{r3, r4, r5, pc}
		conn->err = reason;
   257a4:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   257a6:	2100      	movs	r1, #0
   257a8:	f7f1 ff40 	bl	1762c <bt_conn_set_state>
		return 0;
   257ac:	2500      	movs	r5, #0
   257ae:	e7f7      	b.n	257a0 <bt_conn_disconnect+0x1c>
	err = bt_hci_disconnect(conn->handle, reason);
   257b0:	8800      	ldrh	r0, [r0, #0]
   257b2:	f7ff fccd 	bl	25150 <bt_hci_disconnect>
	if (err) {
   257b6:	4605      	mov	r5, r0
   257b8:	2800      	cmp	r0, #0
   257ba:	d1f1      	bne.n	257a0 <bt_conn_disconnect+0x1c>
	if (conn->state == BT_CONN_CONNECTED) {
   257bc:	7b63      	ldrb	r3, [r4, #13]
   257be:	2b07      	cmp	r3, #7
   257c0:	d1ee      	bne.n	257a0 <bt_conn_disconnect+0x1c>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   257c2:	2108      	movs	r1, #8
   257c4:	4620      	mov	r0, r4
   257c6:	f7f1 ff31 	bl	1762c <bt_conn_set_state>
   257ca:	e7e9      	b.n	257a0 <bt_conn_disconnect+0x1c>

000257cc <bt_conn_set_security>:
{
   257cc:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   257ce:	7b43      	ldrb	r3, [r0, #13]
   257d0:	2b07      	cmp	r3, #7
{
   257d2:	4604      	mov	r4, r0
   257d4:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   257d6:	d124      	bne.n	25822 <bt_conn_set_security+0x56>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   257d8:	7a43      	ldrb	r3, [r0, #9]
   257da:	428b      	cmp	r3, r1
   257dc:	d224      	bcs.n	25828 <bt_conn_set_security+0x5c>
   257de:	7a83      	ldrb	r3, [r0, #10]
   257e0:	428b      	cmp	r3, r1
   257e2:	d221      	bcs.n	25828 <bt_conn_set_security+0x5c>
	if (val) {
   257e4:	060b      	lsls	r3, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   257e6:	f100 0004 	add.w	r0, r0, #4
   257ea:	d515      	bpl.n	25818 <bt_conn_set_security+0x4c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   257ec:	f3bf 8f5b 	dmb	ish
   257f0:	e850 3f00 	ldrex	r3, [r0]
   257f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   257f8:	e840 3200 	strex	r2, r3, [r0]
   257fc:	2a00      	cmp	r2, #0
   257fe:	d1f7      	bne.n	257f0 <bt_conn_set_security+0x24>
   25800:	f3bf 8f5b 	dmb	ish
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   25804:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   25808:	72a5      	strb	r5, [r4, #10]
		return bt_smp_start_security(conn);
   2580a:	4620      	mov	r0, r4
   2580c:	f7f5 fd8c 	bl	1b328 <bt_smp_start_security>
	if (err) {
   25810:	b108      	cbz	r0, 25816 <bt_conn_set_security+0x4a>
		conn->required_sec_level = conn->sec_level;
   25812:	7a63      	ldrb	r3, [r4, #9]
   25814:	72a3      	strb	r3, [r4, #10]
}
   25816:	bd38      	pop	{r3, r4, r5, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   25818:	f46f 6180 	mvn.w	r1, #1024	; 0x400
   2581c:	f7ff ff2e 	bl	2567c <atomic_and>
   25820:	e7f0      	b.n	25804 <bt_conn_set_security+0x38>
		return -ENOTCONN;
   25822:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   25826:	e7f6      	b.n	25816 <bt_conn_set_security+0x4a>
		return 0;
   25828:	2000      	movs	r0, #0
   2582a:	e7f4      	b.n	25816 <bt_conn_set_security+0x4a>

0002582c <bt_conn_get_security>:
}
   2582c:	7a40      	ldrb	r0, [r0, #9]
   2582e:	4770      	bx	lr

00025830 <bt_conn_is_peer_addr_le>:
{
   25830:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   25832:	7a03      	ldrb	r3, [r0, #8]
   25834:	428b      	cmp	r3, r1
{
   25836:	4604      	mov	r4, r0
   25838:	4615      	mov	r5, r2
	if (id != conn->id) {
   2583a:	d115      	bne.n	25868 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   2583c:	f100 0190 	add.w	r1, r0, #144	; 0x90
   25840:	2207      	movs	r2, #7
   25842:	4628      	mov	r0, r5
   25844:	f002 f8fa 	bl	27a3c <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   25848:	b180      	cbz	r0, 2586c <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   2584a:	78e3      	ldrb	r3, [r4, #3]
   2584c:	2207      	movs	r2, #7
   2584e:	b943      	cbnz	r3, 25862 <bt_conn_is_peer_addr_le+0x32>
   25850:	f104 019e 	add.w	r1, r4, #158	; 0x9e
   25854:	4628      	mov	r0, r5
   25856:	f002 f8f1 	bl	27a3c <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   2585a:	fab0 f080 	clz	r0, r0
   2585e:	0940      	lsrs	r0, r0, #5
}
   25860:	bd38      	pop	{r3, r4, r5, pc}
   25862:	f104 0197 	add.w	r1, r4, #151	; 0x97
   25866:	e7f5      	b.n	25854 <bt_conn_is_peer_addr_le+0x24>
		return false;
   25868:	2000      	movs	r0, #0
   2586a:	e7f9      	b.n	25860 <bt_conn_is_peer_addr_le+0x30>
		return true;
   2586c:	2001      	movs	r0, #1
   2586e:	e7f7      	b.n	25860 <bt_conn_is_peer_addr_le+0x30>

00025870 <bt_conn_get_dst>:
}
   25870:	3090      	adds	r0, #144	; 0x90
   25872:	4770      	bx	lr

00025874 <bt_conn_le_conn_update>:
{
   25874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25876:	4607      	mov	r7, r0
   25878:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   2587a:	f242 0013 	movw	r0, #8211	; 0x2013
   2587e:	210e      	movs	r1, #14
   25880:	f7ef ffa4 	bl	157cc <bt_hci_cmd_create>
	if (!buf) {
   25884:	4606      	mov	r6, r0
   25886:	b1d0      	cbz	r0, 258be <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   25888:	210e      	movs	r1, #14
   2588a:	3008      	adds	r0, #8
   2588c:	f7f6 ff00 	bl	1c690 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   25890:	220e      	movs	r2, #14
   25892:	4604      	mov	r4, r0
   25894:	2100      	movs	r1, #0
   25896:	f002 f902 	bl	27a9e <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   2589a:	883b      	ldrh	r3, [r7, #0]
   2589c:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   2589e:	882b      	ldrh	r3, [r5, #0]
   258a0:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   258a2:	886b      	ldrh	r3, [r5, #2]
   258a4:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   258a6:	88ab      	ldrh	r3, [r5, #4]
   258a8:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   258aa:	88eb      	ldrh	r3, [r5, #6]
   258ac:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   258ae:	4631      	mov	r1, r6
   258b0:	2200      	movs	r2, #0
}
   258b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   258b6:	f242 0013 	movw	r0, #8211	; 0x2013
   258ba:	f7ef bfcf 	b.w	1585c <bt_hci_cmd_send_sync>
}
   258be:	f06f 0068 	mvn.w	r0, #104	; 0x68
   258c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000258c4 <l2cap_connected>:
}
   258c4:	4770      	bx	lr

000258c6 <l2cap_disconnected>:
   258c6:	4770      	bx	lr

000258c8 <bt_l2cap_chan_del>:
{
   258c8:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   258ca:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   258ce:	4604      	mov	r4, r0
	if (!chan->conn) {
   258d0:	b123      	cbz	r3, 258dc <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   258d2:	686b      	ldr	r3, [r5, #4]
   258d4:	b103      	cbz	r3, 258d8 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   258d6:	4798      	blx	r3
	chan->conn = NULL;
   258d8:	2300      	movs	r3, #0
   258da:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   258dc:	68e3      	ldr	r3, [r4, #12]
   258de:	b10b      	cbz	r3, 258e4 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   258e0:	4620      	mov	r0, r4
   258e2:	4798      	blx	r3
	if (ops->released) {
   258e4:	69eb      	ldr	r3, [r5, #28]
   258e6:	b11b      	cbz	r3, 258f0 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   258e8:	4620      	mov	r0, r4
}
   258ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   258ee:	4718      	bx	r3
}
   258f0:	bd70      	pop	{r4, r5, r6, pc}

000258f2 <bt_l2cap_disconnected>:
	return list->head;
   258f2:	6d40      	ldr	r0, [r0, #84]	; 0x54
{
   258f4:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   258f6:	b160      	cbz	r0, 25912 <bt_l2cap_disconnected+0x20>
	return node->next;
   258f8:	f850 4908 	ldr.w	r4, [r0], #-8
   258fc:	b104      	cbz	r4, 25900 <bt_l2cap_disconnected+0xe>
   258fe:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   25900:	f7ff ffe2 	bl	258c8 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   25904:	b12c      	cbz	r4, 25912 <bt_l2cap_disconnected+0x20>
   25906:	68a3      	ldr	r3, [r4, #8]
   25908:	b103      	cbz	r3, 2590c <bt_l2cap_disconnected+0x1a>
   2590a:	3b08      	subs	r3, #8
{
   2590c:	4620      	mov	r0, r4
   2590e:	461c      	mov	r4, r3
   25910:	e7f6      	b.n	25900 <bt_l2cap_disconnected+0xe>
}
   25912:	bd10      	pop	{r4, pc}

00025914 <bt_l2cap_security_changed>:
	return list->head;
   25914:	6d40      	ldr	r0, [r0, #84]	; 0x54
{
   25916:	b538      	push	{r3, r4, r5, lr}
   25918:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2591a:	b178      	cbz	r0, 2593c <bt_l2cap_security_changed+0x28>
	return node->next;
   2591c:	f850 4908 	ldr.w	r4, [r0], #-8
   25920:	b104      	cbz	r4, 25924 <bt_l2cap_security_changed+0x10>
   25922:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   25924:	6843      	ldr	r3, [r0, #4]
   25926:	689b      	ldr	r3, [r3, #8]
   25928:	b10b      	cbz	r3, 2592e <bt_l2cap_security_changed+0x1a>
			chan->ops->encrypt_change(chan, hci_status);
   2592a:	4629      	mov	r1, r5
   2592c:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2592e:	b12c      	cbz	r4, 2593c <bt_l2cap_security_changed+0x28>
   25930:	68a3      	ldr	r3, [r4, #8]
   25932:	b103      	cbz	r3, 25936 <bt_l2cap_security_changed+0x22>
   25934:	3b08      	subs	r3, #8
{
   25936:	4620      	mov	r0, r4
   25938:	461c      	mov	r4, r3
   2593a:	e7f3      	b.n	25924 <bt_l2cap_security_changed+0x10>
}
   2593c:	bd38      	pop	{r3, r4, r5, pc}

0002593e <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   2593e:	3104      	adds	r1, #4
   25940:	f7f1 bf6a 	b.w	17818 <bt_conn_create_pdu_timeout>

00025944 <bt_l2cap_send_cb>:
{
   25944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25948:	4614      	mov	r4, r2
   2594a:	4605      	mov	r5, r0
   2594c:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   2594e:	f102 0008 	add.w	r0, r2, #8
   25952:	2104      	movs	r1, #4
   25954:	461e      	mov	r6, r3
   25956:	f8dd 8018 	ldr.w	r8, [sp, #24]
   2595a:	f7f6 fe41 	bl	1c5e0 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2595e:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   25960:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   25962:	3a04      	subs	r2, #4
   25964:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   25966:	4643      	mov	r3, r8
   25968:	4632      	mov	r2, r6
   2596a:	4621      	mov	r1, r4
   2596c:	4628      	mov	r0, r5
}
   2596e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   25972:	f7f1 bda1 	b.w	174b8 <bt_conn_send_cb>

00025976 <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   25976:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   25978:	b130      	cbz	r0, 25988 <bt_l2cap_le_lookup_tx_cid+0x12>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   2597a:	8b83      	ldrh	r3, [r0, #28]
   2597c:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2597e:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   25982:	d001      	beq.n	25988 <bt_l2cap_le_lookup_tx_cid+0x12>
	return node->next;
   25984:	6880      	ldr	r0, [r0, #8]
   25986:	e7f7      	b.n	25978 <bt_l2cap_le_lookup_tx_cid+0x2>
}
   25988:	4770      	bx	lr

0002598a <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   2598a:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2598c:	b130      	cbz	r0, 2599c <bt_l2cap_le_lookup_rx_cid+0x12>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2598e:	8983      	ldrh	r3, [r0, #12]
   25990:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   25992:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   25996:	d001      	beq.n	2599c <bt_l2cap_le_lookup_rx_cid+0x12>
	return node->next;
   25998:	6880      	ldr	r0, [r0, #8]
   2599a:	e7f7      	b.n	2598c <bt_l2cap_le_lookup_rx_cid+0x2>
}
   2599c:	4770      	bx	lr

0002599e <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   2599e:	4770      	bx	lr

000259a0 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   259a0:	4603      	mov	r3, r0
	return list->head;
   259a2:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   259a4:	b128      	cbz	r0, 259b2 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   259a6:	6859      	ldr	r1, [r3, #4]
	return node->next;
   259a8:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   259aa:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   259ac:	4288      	cmp	r0, r1
	list->tail = node;
   259ae:	bf08      	it	eq
   259b0:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   259b2:	4770      	bx	lr

000259b4 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   259b4:	4603      	mov	r3, r0
	size_t bytes = 0;
   259b6:	2000      	movs	r0, #0

	while (buf) {
   259b8:	b903      	cbnz	r3, 259bc <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   259ba:	4770      	bx	lr
		bytes += buf->len;
   259bc:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   259be:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   259c0:	4410      	add	r0, r2
		buf = buf->frags;
   259c2:	e7f9      	b.n	259b8 <net_buf_frags_len+0x4>

000259c4 <att_sent>:
	if (chan->ops->sent) {
   259c4:	684b      	ldr	r3, [r1, #4]
   259c6:	695b      	ldr	r3, [r3, #20]
{
   259c8:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   259ca:	b103      	cbz	r3, 259ce <att_sent+0xa>
		chan->ops->sent(chan);
   259cc:	4718      	bx	r3
}
   259ce:	4770      	bx	lr

000259d0 <attr_read_type_cb>:
{
   259d0:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   259d2:	68d4      	ldr	r4, [r2, #12]
   259d4:	7823      	ldrb	r3, [r4, #0]
   259d6:	3102      	adds	r1, #2
   259d8:	b913      	cbnz	r3, 259e0 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   259da:	7021      	strb	r1, [r4, #0]
	return true;
   259dc:	2001      	movs	r0, #1
   259de:	e006      	b.n	259ee <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   259e0:	428b      	cmp	r3, r1
   259e2:	d0fb      	beq.n	259dc <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   259e4:	8983      	ldrh	r3, [r0, #12]
   259e6:	3b02      	subs	r3, #2
   259e8:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   259ea:	2000      	movs	r0, #0
   259ec:	6110      	str	r0, [r2, #16]
}
   259ee:	bd10      	pop	{r4, pc}

000259f0 <att_prepare_write_req>:
}
   259f0:	2006      	movs	r0, #6
   259f2:	4770      	bx	lr

000259f4 <att_op_get_type>:
	switch (op) {
   259f4:	2852      	cmp	r0, #82	; 0x52
   259f6:	d830      	bhi.n	25a5a <att_op_get_type+0x66>
   259f8:	b388      	cbz	r0, 25a5e <att_op_get_type+0x6a>
   259fa:	1e43      	subs	r3, r0, #1
   259fc:	2b51      	cmp	r3, #81	; 0x51
   259fe:	d82e      	bhi.n	25a5e <att_op_get_type+0x6a>
   25a00:	e8df f003 	tbb	[pc, r3]
   25a04:	39333933 	.word	0x39333933
   25a08:	39333933 	.word	0x39333933
   25a0c:	39333933 	.word	0x39333933
   25a10:	39333933 	.word	0x39333933
   25a14:	2d333933 	.word	0x2d333933
   25a18:	3933392d 	.word	0x3933392d
   25a1c:	2d352d33 	.word	0x2d352d33
   25a20:	392d2937 	.word	0x392d2937
   25a24:	2d352d33 	.word	0x2d352d33
   25a28:	2d2d2d2d 	.word	0x2d2d2d2d
   25a2c:	2d2d2d2d 	.word	0x2d2d2d2d
   25a30:	2d2d2d2d 	.word	0x2d2d2d2d
   25a34:	2d2d2d2d 	.word	0x2d2d2d2d
   25a38:	2d2d2d2d 	.word	0x2d2d2d2d
   25a3c:	2d2d2d2d 	.word	0x2d2d2d2d
   25a40:	2d2d2d2d 	.word	0x2d2d2d2d
   25a44:	2d2d2d2d 	.word	0x2d2d2d2d
   25a48:	2d2d2d2d 	.word	0x2d2d2d2d
   25a4c:	2d2d2d2d 	.word	0x2d2d2d2d
   25a50:	2d2d2d2d 	.word	0x2d2d2d2d
   25a54:	3b2d      	.short	0x3b2d
   25a56:	2004      	movs	r0, #4
   25a58:	4770      	bx	lr
   25a5a:	28d2      	cmp	r0, #210	; 0xd2
   25a5c:	d00d      	beq.n	25a7a <att_op_get_type+0x86>
		return ATT_COMMAND;
   25a5e:	f010 0f40 	tst.w	r0, #64	; 0x40
   25a62:	bf0c      	ite	eq
   25a64:	2006      	moveq	r0, #6
   25a66:	2000      	movne	r0, #0
   25a68:	4770      	bx	lr
		return ATT_RESPONSE;
   25a6a:	2002      	movs	r0, #2
   25a6c:	4770      	bx	lr
		return ATT_NOTIFICATION;
   25a6e:	2003      	movs	r0, #3
   25a70:	4770      	bx	lr
		return ATT_INDICATION;
   25a72:	2005      	movs	r0, #5
   25a74:	4770      	bx	lr
		return ATT_REQUEST;
   25a76:	2001      	movs	r0, #1
   25a78:	4770      	bx	lr
		return ATT_COMMAND;
   25a7a:	2000      	movs	r0, #0
}
   25a7c:	4770      	bx	lr

00025a7e <bt_gatt_foreach_attr>:
{
   25a7e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   25a80:	e9cd 2301 	strd	r2, r3, [sp, #4]
   25a84:	2300      	movs	r3, #0
   25a86:	9300      	str	r3, [sp, #0]
   25a88:	461a      	mov	r2, r3
   25a8a:	f7f3 ffc5 	bl	19a18 <bt_gatt_foreach_attr_type>
}
   25a8e:	b005      	add	sp, #20
   25a90:	f85d fb04 	ldr.w	pc, [sp], #4

00025a94 <att_chan_mtu_updated>:
{
   25a94:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   25a96:	6806      	ldr	r6, [r0, #0]
	return list->head;
   25a98:	6ab3      	ldr	r3, [r6, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   25a9a:	b1c3      	cbz	r3, 25ace <att_chan_mtu_updated+0x3a>
   25a9c:	461a      	mov	r2, r3
	return node->next;
   25a9e:	f852 49f4 	ldr.w	r4, [r2], #-244
   25aa2:	b104      	cbz	r4, 25aa6 <att_chan_mtu_updated+0x12>
   25aa4:	3cf4      	subs	r4, #244	; 0xf4
{
   25aa6:	2300      	movs	r3, #0
   25aa8:	4619      	mov	r1, r3
		if (chan == updated_chan) {
   25aaa:	4290      	cmp	r0, r2
   25aac:	d007      	beq.n	25abe <att_chan_mtu_updated+0x2a>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   25aae:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   25ab0:	8b52      	ldrh	r2, [r2, #26]
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   25ab2:	42a9      	cmp	r1, r5
   25ab4:	bf38      	it	cc
   25ab6:	4629      	movcc	r1, r5
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   25ab8:	4293      	cmp	r3, r2
   25aba:	bf38      	it	cc
   25abc:	4613      	movcc	r3, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   25abe:	b13c      	cbz	r4, 25ad0 <att_chan_mtu_updated+0x3c>
   25ac0:	f8d4 50f4 	ldr.w	r5, [r4, #244]	; 0xf4
   25ac4:	b105      	cbz	r5, 25ac8 <att_chan_mtu_updated+0x34>
   25ac6:	3df4      	subs	r5, #244	; 0xf4
{
   25ac8:	4622      	mov	r2, r4
   25aca:	462c      	mov	r4, r5
   25acc:	e7ed      	b.n	25aaa <att_chan_mtu_updated+0x16>
   25ace:	4619      	mov	r1, r3
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   25ad0:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   25ad2:	8b42      	ldrh	r2, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   25ad4:	428c      	cmp	r4, r1
   25ad6:	d801      	bhi.n	25adc <att_chan_mtu_updated+0x48>
   25ad8:	429a      	cmp	r2, r3
   25ada:	d909      	bls.n	25af0 <att_chan_mtu_updated+0x5c>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   25adc:	429a      	cmp	r2, r3
   25ade:	bf38      	it	cc
   25ae0:	461a      	movcc	r2, r3
   25ae2:	42a1      	cmp	r1, r4
   25ae4:	6830      	ldr	r0, [r6, #0]
   25ae6:	bf38      	it	cc
   25ae8:	4621      	movcc	r1, r4
}
   25aea:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   25aec:	f7f4 bc86 	b.w	1a3fc <bt_gatt_att_max_mtu_changed>
}
   25af0:	bc70      	pop	{r4, r5, r6}
   25af2:	4770      	bx	lr

00025af4 <attr_read_group_cb>:
	if (!data->rsp->len) {
   25af4:	68d0      	ldr	r0, [r2, #12]
   25af6:	7803      	ldrb	r3, [r0, #0]
   25af8:	3104      	adds	r1, #4
   25afa:	b913      	cbnz	r3, 25b02 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   25afc:	7001      	strb	r1, [r0, #0]
	return true;
   25afe:	2001      	movs	r0, #1
}
   25b00:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   25b02:	428b      	cmp	r3, r1
   25b04:	d0fb      	beq.n	25afe <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   25b06:	6891      	ldr	r1, [r2, #8]
   25b08:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   25b0a:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   25b0c:	3b04      	subs	r3, #4
   25b0e:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   25b10:	6110      	str	r0, [r2, #16]
		return false;
   25b12:	4770      	bx	lr

00025b14 <chan_req_sent>:
	if (chan->req) {
   25b14:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   25b18:	b12b      	cbz	r3, 25b26 <chan_req_sent+0x12>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   25b1a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   25b1e:	2300      	movs	r3, #0
   25b20:	30c0      	adds	r0, #192	; 0xc0
   25b22:	f7fb bd71 	b.w	21608 <k_work_reschedule>
}
   25b26:	4770      	bx	lr

00025b28 <write_cb>:
{
   25b28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   25b2a:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   25b2c:	4601      	mov	r1, r0
{
   25b2e:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   25b30:	222a      	movs	r2, #42	; 0x2a
   25b32:	6820      	ldr	r0, [r4, #0]
   25b34:	f000 fd49 	bl	265ca <bt_gatt_check_perm>
   25b38:	4605      	mov	r5, r0
   25b3a:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   25b3c:	bb20      	cbnz	r0, 25b88 <write_cb+0x60>
	if (!data->req) {
   25b3e:	7a23      	ldrb	r3, [r4, #8]
   25b40:	b1ab      	cbz	r3, 25b6e <write_cb+0x46>
		flags |= BT_GATT_WRITE_FLAG_EXECUTE;
   25b42:	2b18      	cmp	r3, #24
   25b44:	bf14      	ite	ne
   25b46:	2300      	movne	r3, #0
   25b48:	2304      	moveq	r3, #4
	write = attr->write(data->conn, attr, data->value, data->len,
   25b4a:	9301      	str	r3, [sp, #4]
   25b4c:	8a63      	ldrh	r3, [r4, #18]
   25b4e:	9300      	str	r3, [sp, #0]
   25b50:	68b7      	ldr	r7, [r6, #8]
   25b52:	8a23      	ldrh	r3, [r4, #16]
   25b54:	68e2      	ldr	r2, [r4, #12]
   25b56:	6820      	ldr	r0, [r4, #0]
   25b58:	4631      	mov	r1, r6
   25b5a:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   25b5c:	1e03      	subs	r3, r0, #0
   25b5e:	db08      	blt.n	25b72 <write_cb+0x4a>
   25b60:	8a22      	ldrh	r2, [r4, #16]
   25b62:	4293      	cmp	r3, r2
   25b64:	d10e      	bne.n	25b84 <write_cb+0x5c>
	data->err = 0U;
   25b66:	2300      	movs	r3, #0
   25b68:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   25b6a:	2501      	movs	r5, #1
   25b6c:	e007      	b.n	25b7e <write_cb+0x56>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   25b6e:	2302      	movs	r3, #2
   25b70:	e7eb      	b.n	25b4a <write_cb+0x22>
	if (err < 0 && err >= -0xff) {
   25b72:	f113 0fff 	cmn.w	r3, #255	; 0xff
   25b76:	d305      	bcc.n	25b84 <write_cb+0x5c>
		return -err;
   25b78:	425b      	negs	r3, r3
   25b7a:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   25b7c:	7523      	strb	r3, [r4, #20]
}
   25b7e:	4628      	mov	r0, r5
   25b80:	b003      	add	sp, #12
   25b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   25b84:	230e      	movs	r3, #14
   25b86:	e7f9      	b.n	25b7c <write_cb+0x54>
		return BT_GATT_ITER_STOP;
   25b88:	2500      	movs	r5, #0
   25b8a:	e7f8      	b.n	25b7e <write_cb+0x56>

00025b8c <find_info_cb>:
{
   25b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   25b8e:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   25b90:	6816      	ldr	r6, [r2, #0]
{
   25b92:	4605      	mov	r5, r0
   25b94:	460f      	mov	r7, r1
   25b96:	4614      	mov	r4, r2
	if (!data->rsp) {
   25b98:	b963      	cbnz	r3, 25bb4 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   25b9a:	6850      	ldr	r0, [r2, #4]
   25b9c:	2101      	movs	r1, #1
   25b9e:	3008      	adds	r0, #8
   25ba0:	f7f6 fd76 	bl	1c690 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   25ba4:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   25ba6:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   25ba8:	781b      	ldrb	r3, [r3, #0]
   25baa:	2b00      	cmp	r3, #0
   25bac:	bf0c      	ite	eq
   25bae:	2301      	moveq	r3, #1
   25bb0:	2302      	movne	r3, #2
   25bb2:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   25bb4:	68a3      	ldr	r3, [r4, #8]
   25bb6:	781b      	ldrb	r3, [r3, #0]
   25bb8:	2b01      	cmp	r3, #1
   25bba:	d003      	beq.n	25bc4 <find_info_cb+0x38>
   25bbc:	2b02      	cmp	r3, #2
   25bbe:	d018      	beq.n	25bf2 <find_info_cb+0x66>
			return BT_GATT_ITER_STOP;
   25bc0:	2000      	movs	r0, #0
   25bc2:	e015      	b.n	25bf0 <find_info_cb+0x64>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   25bc4:	682b      	ldr	r3, [r5, #0]
   25bc6:	781b      	ldrb	r3, [r3, #0]
   25bc8:	2b00      	cmp	r3, #0
   25bca:	d1f9      	bne.n	25bc0 <find_info_cb+0x34>
   25bcc:	6860      	ldr	r0, [r4, #4]
   25bce:	2104      	movs	r1, #4
   25bd0:	3008      	adds	r0, #8
   25bd2:	f7f6 fd5d 	bl	1c690 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   25bd6:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   25bd8:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   25bda:	885b      	ldrh	r3, [r3, #2]
   25bdc:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   25bde:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   25be0:	8007      	strh	r7, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   25be2:	899b      	ldrh	r3, [r3, #12]
   25be4:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
   25be6:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   25be8:	2804      	cmp	r0, #4
   25bea:	bf94      	ite	ls
   25bec:	2000      	movls	r0, #0
   25bee:	2001      	movhi	r0, #1
}
   25bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   25bf2:	682b      	ldr	r3, [r5, #0]
   25bf4:	781b      	ldrb	r3, [r3, #0]
   25bf6:	2b02      	cmp	r3, #2
   25bf8:	d1e2      	bne.n	25bc0 <find_info_cb+0x34>
   25bfa:	6860      	ldr	r0, [r4, #4]
   25bfc:	2112      	movs	r1, #18
   25bfe:	3008      	adds	r0, #8
   25c00:	f7f6 fd46 	bl	1c690 <net_buf_simple_add>
   25c04:	4603      	mov	r3, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   25c06:	682a      	ldr	r2, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   25c08:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   25c0a:	f823 7b02 	strh.w	r7, [r3], #2
   25c0e:	1c51      	adds	r1, r2, #1
   25c10:	3211      	adds	r2, #17
   25c12:	f851 0b04 	ldr.w	r0, [r1], #4
   25c16:	f843 0b04 	str.w	r0, [r3], #4
   25c1a:	4291      	cmp	r1, r2
   25c1c:	d1f9      	bne.n	25c12 <find_info_cb+0x86>
		if (chan->chan.tx.mtu - data->buf->len >
   25c1e:	6863      	ldr	r3, [r4, #4]
   25c20:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
   25c22:	899b      	ldrh	r3, [r3, #12]
   25c24:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   25c26:	2812      	cmp	r0, #18
   25c28:	e7df      	b.n	25bea <find_info_cb+0x5e>

00025c2a <att_chan_read>:
{
   25c2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25c2e:	4680      	mov	r8, r0
   25c30:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   25c32:	4610      	mov	r0, r2
{
   25c34:	4699      	mov	r9, r3
   25c36:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   25c38:	f7ff febc 	bl	259b4 <net_buf_frags_len>
   25c3c:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   25c40:	4283      	cmp	r3, r0
{
   25c42:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   25c44:	d97a      	bls.n	25d3c <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   25c46:	f8d8 3004 	ldr.w	r3, [r8, #4]
   25c4a:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   25c4c:	4630      	mov	r0, r6
   25c4e:	f7f6 fc65 	bl	1c51c <net_buf_frag_last>
	size_t len, total = 0;
   25c52:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   25c56:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   25c58:	4630      	mov	r0, r6
   25c5a:	f7ff feab 	bl	259b4 <net_buf_frags_len>
   25c5e:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   25c62:	f105 0708 	add.w	r7, r5, #8
   25c66:	1a24      	subs	r4, r4, r0
   25c68:	4638      	mov	r0, r7
   25c6a:	f001 f917 	bl	26e9c <net_buf_simple_tailroom>
   25c6e:	4284      	cmp	r4, r0
   25c70:	d211      	bcs.n	25c96 <att_chan_read+0x6c>
   25c72:	4630      	mov	r0, r6
   25c74:	f7ff fe9e 	bl	259b4 <net_buf_frags_len>
   25c78:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   25c7c:	1a24      	subs	r4, r4, r0
		if (!len) {
   25c7e:	bb34      	cbnz	r4, 25cce <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   25c80:	79b0      	ldrb	r0, [r6, #6]
   25c82:	f7f6 f95d 	bl	1bf40 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   25c86:	2200      	movs	r2, #0
   25c88:	2300      	movs	r3, #0
   25c8a:	f001 f8f6 	bl	26e7a <net_buf_alloc_fixed>
			if (!frag) {
   25c8e:	4605      	mov	r5, r0
   25c90:	b930      	cbnz	r0, 25ca0 <att_chan_read+0x76>
	return total;
   25c92:	4657      	mov	r7, sl
   25c94:	e02c      	b.n	25cf0 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   25c96:	4638      	mov	r0, r7
   25c98:	f001 f900 	bl	26e9c <net_buf_simple_tailroom>
   25c9c:	4604      	mov	r4, r0
   25c9e:	e7ee      	b.n	25c7e <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   25ca0:	4601      	mov	r1, r0
   25ca2:	4630      	mov	r0, r6
   25ca4:	f7f6 fc7a 	bl	1c59c <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   25ca8:	4630      	mov	r0, r6
   25caa:	f7ff fe83 	bl	259b4 <net_buf_frags_len>
   25cae:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   25cb2:	f105 0708 	add.w	r7, r5, #8
   25cb6:	1a24      	subs	r4, r4, r0
   25cb8:	4638      	mov	r0, r7
   25cba:	f001 f8ef 	bl	26e9c <net_buf_simple_tailroom>
   25cbe:	4284      	cmp	r4, r0
   25cc0:	d21a      	bcs.n	25cf8 <att_chan_read+0xce>
   25cc2:	4630      	mov	r0, r6
   25cc4:	f7ff fe76 	bl	259b4 <net_buf_frags_len>
   25cc8:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   25ccc:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   25cce:	68a9      	ldr	r1, [r5, #8]
   25cd0:	89aa      	ldrh	r2, [r5, #12]
   25cd2:	f8db 7004 	ldr.w	r7, [fp, #4]
   25cd6:	9803      	ldr	r0, [sp, #12]
   25cd8:	f8cd 9000 	str.w	r9, [sp]
   25cdc:	440a      	add	r2, r1
   25cde:	b2a3      	uxth	r3, r4
   25ce0:	4659      	mov	r1, fp
   25ce2:	47b8      	blx	r7
		if (read < 0) {
   25ce4:	1e07      	subs	r7, r0, #0
   25ce6:	da0c      	bge.n	25d02 <att_chan_read+0xd8>
				return total;
   25ce8:	f1ba 0f00 	cmp.w	sl, #0
   25cec:	bf18      	it	ne
   25cee:	4657      	movne	r7, sl
}
   25cf0:	4638      	mov	r0, r7
   25cf2:	b005      	add	sp, #20
   25cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25cf8:	4638      	mov	r0, r7
   25cfa:	f001 f8cf 	bl	26e9c <net_buf_simple_tailroom>
   25cfe:	4604      	mov	r4, r0
   25d00:	e7e5      	b.n	25cce <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   25d02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   25d04:	b993      	cbnz	r3, 25d2c <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   25d06:	4639      	mov	r1, r7
   25d08:	f105 0008 	add.w	r0, r5, #8
   25d0c:	f7f6 fcc0 	bl	1c690 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   25d10:	4630      	mov	r0, r6
   25d12:	f7ff fe4f 	bl	259b4 <net_buf_frags_len>
   25d16:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
		offset += read;
   25d1a:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   25d1c:	4283      	cmp	r3, r0
		total += read;
   25d1e:	44ba      	add	sl, r7
		offset += read;
   25d20:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   25d24:	d9b5      	bls.n	25c92 <att_chan_read+0x68>
   25d26:	42a7      	cmp	r7, r4
   25d28:	d096      	beq.n	25c58 <att_chan_read+0x2e>
   25d2a:	e7b2      	b.n	25c92 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   25d2c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   25d2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   25d30:	4639      	mov	r1, r7
   25d32:	4628      	mov	r0, r5
   25d34:	4798      	blx	r3
   25d36:	2800      	cmp	r0, #0
   25d38:	d1e5      	bne.n	25d06 <att_chan_read+0xdc>
   25d3a:	e7aa      	b.n	25c92 <att_chan_read+0x68>
		return 0;
   25d3c:	2700      	movs	r7, #0
   25d3e:	e7d7      	b.n	25cf0 <att_chan_read+0xc6>

00025d40 <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   25d40:	b510      	push	{r4, lr}
	return list->head;
   25d42:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   25d44:	2200      	movs	r2, #0
   25d46:	b153      	cbz	r3, 25d5e <sys_slist_find_and_remove.isra.0+0x1e>
   25d48:	428b      	cmp	r3, r1
   25d4a:	d10e      	bne.n	25d6a <sys_slist_find_and_remove.isra.0+0x2a>
	return node->next;
   25d4c:	680b      	ldr	r3, [r1, #0]
	return list->tail;
   25d4e:	6844      	ldr	r4, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   25d50:	b932      	cbnz	r2, 25d60 <sys_slist_find_and_remove.isra.0+0x20>
   25d52:	42a1      	cmp	r1, r4
	list->head = node;
   25d54:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   25d56:	d100      	bne.n	25d5a <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   25d58:	6043      	str	r3, [r0, #4]
	parent->next = child;
   25d5a:	2300      	movs	r3, #0
   25d5c:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   25d5e:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   25d60:	42a1      	cmp	r1, r4
	parent->next = child;
   25d62:	6013      	str	r3, [r2, #0]
	list->tail = node;
   25d64:	bf08      	it	eq
   25d66:	6042      	streq	r2, [r0, #4]
}
   25d68:	e7f7      	b.n	25d5a <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   25d6a:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   25d6c:	681b      	ldr	r3, [r3, #0]
   25d6e:	e7ea      	b.n	25d46 <sys_slist_find_and_remove.isra.0+0x6>

00025d70 <chan_cfm_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   25d70:	3098      	adds	r0, #152	; 0x98
   25d72:	f3bf 8f5b 	dmb	ish
   25d76:	e850 3f00 	ldrex	r3, [r0]
   25d7a:	f023 0302 	bic.w	r3, r3, #2
   25d7e:	e840 3200 	strex	r2, r3, [r0]
   25d82:	2a00      	cmp	r2, #0
   25d84:	d1f7      	bne.n	25d76 <chan_cfm_sent+0x6>
   25d86:	f3bf 8f5b 	dmb	ish
}
   25d8a:	4770      	bx	lr

00025d8c <att_exec_write_req>:
   25d8c:	2006      	movs	r0, #6
   25d8e:	4770      	bx	lr

00025d90 <atomic_test_and_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   25d90:	2301      	movs	r3, #1
   25d92:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   25d96:	f3bf 8f5b 	dmb	ish
   25d9a:	e850 3f00 	ldrex	r3, [r0]
   25d9e:	ea43 0201 	orr.w	r2, r3, r1
   25da2:	e840 2c00 	strex	ip, r2, [r0]
   25da6:	f1bc 0f00 	cmp.w	ip, #0
   25daa:	d1f6      	bne.n	25d9a <atomic_test_and_set_bit+0xa>
   25dac:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   25db0:	4219      	tst	r1, r3
}
   25db2:	bf14      	ite	ne
   25db4:	2001      	movne	r0, #1
   25db6:	2000      	moveq	r0, #0
   25db8:	4770      	bx	lr

00025dba <read_cb>:
{
   25dba:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   25dbe:	f8d2 8000 	ldr.w	r8, [r2]
{
   25dc2:	4606      	mov	r6, r0
	data->err = 0x00;
   25dc4:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   25dc6:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = 0x00;
   25dca:	7317      	strb	r7, [r2, #12]
{
   25dcc:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   25dce:	4631      	mov	r1, r6
   25dd0:	2215      	movs	r2, #21
   25dd2:	f000 fbfa 	bl	265ca <bt_gatt_check_perm>
   25dd6:	4604      	mov	r4, r0
   25dd8:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   25dda:	b9a0      	cbnz	r0, 25e06 <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   25ddc:	e9cd 0000 	strd	r0, r0, [sp]
   25de0:	88ab      	ldrh	r3, [r5, #4]
   25de2:	68aa      	ldr	r2, [r5, #8]
   25de4:	4631      	mov	r1, r6
   25de6:	4640      	mov	r0, r8
   25de8:	f7ff ff1f 	bl	25c2a <att_chan_read>
	if (ret < 0) {
   25dec:	1e03      	subs	r3, r0, #0
   25dee:	da0c      	bge.n	25e0a <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   25df0:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   25df4:	bf26      	itte	cs
   25df6:	425b      	negcs	r3, r3
   25df8:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   25dfa:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   25dfc:	732b      	strb	r3, [r5, #12]
}
   25dfe:	4620      	mov	r0, r4
   25e00:	b002      	add	sp, #8
   25e02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   25e06:	463c      	mov	r4, r7
   25e08:	e7f9      	b.n	25dfe <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   25e0a:	2401      	movs	r4, #1
   25e0c:	e7f7      	b.n	25dfe <read_cb+0x44>

00025e0e <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   25e0e:	3098      	adds	r0, #152	; 0x98
   25e10:	f3bf 8f5b 	dmb	ish
   25e14:	e850 3f00 	ldrex	r3, [r0]
   25e18:	f023 0301 	bic.w	r3, r3, #1
   25e1c:	e840 3200 	strex	r2, r3, [r0]
   25e20:	2a00      	cmp	r2, #0
   25e22:	d1f7      	bne.n	25e14 <chan_rsp_sent+0x6>
   25e24:	f3bf 8f5b 	dmb	ish
}
   25e28:	4770      	bx	lr

00025e2a <chan_req_send>:
{
   25e2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   25e2c:	688f      	ldr	r7, [r1, #8]
{
   25e2e:	4604      	mov	r4, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   25e30:	4638      	mov	r0, r7
   25e32:	f7ff fdbf 	bl	259b4 <net_buf_frags_len>
   25e36:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   25e38:	4283      	cmp	r3, r0
{
   25e3a:	460d      	mov	r5, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   25e3c:	d30d      	bcc.n	25e5a <chan_req_send+0x30>
	req->buf = NULL;
   25e3e:	2600      	movs	r6, #0
	chan->req = req;
   25e40:	f8c4 109c 	str.w	r1, [r4, #156]	; 0x9c
	err = chan_send(chan, buf, NULL);
   25e44:	4632      	mov	r2, r6
	req->buf = NULL;
   25e46:	608e      	str	r6, [r1, #8]
	err = chan_send(chan, buf, NULL);
   25e48:	4620      	mov	r0, r4
   25e4a:	4639      	mov	r1, r7
   25e4c:	f7f2 fbc4 	bl	185d8 <chan_send>
	if (err) {
   25e50:	b110      	cbz	r0, 25e58 <chan_req_send+0x2e>
		req->buf = buf;
   25e52:	60af      	str	r7, [r5, #8]
		chan->req = NULL;
   25e54:	f8c4 609c 	str.w	r6, [r4, #156]	; 0x9c
}
   25e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   25e5a:	f06f 0079 	mvn.w	r0, #121	; 0x79
   25e5e:	e7fb      	b.n	25e58 <chan_req_send+0x2e>

00025e60 <bt_att_status>:
{
   25e60:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   25e62:	f3bf 8f5b 	dmb	ish
   25e66:	680b      	ldr	r3, [r1, #0]
   25e68:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   25e6c:	07db      	lsls	r3, r3, #31
{
   25e6e:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   25e70:	d518      	bpl.n	25ea4 <bt_att_status+0x44>
	if (!chan->att) {
   25e72:	f850 0c04 	ldr.w	r0, [r0, #-4]
   25e76:	b1a8      	cbz	r0, 25ea4 <bt_att_status+0x44>
	if (chan->req) {
   25e78:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   25e7c:	b993      	cbnz	r3, 25ea4 <bt_att_status+0x44>
	node = sys_slist_get(&chan->att->reqs);
   25e7e:	3004      	adds	r0, #4
   25e80:	f7ff fd8e 	bl	259a0 <sys_slist_get>
	if (!node) {
   25e84:	4604      	mov	r4, r0
   25e86:	b168      	cbz	r0, 25ea4 <bt_att_status+0x44>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   25e88:	4601      	mov	r1, r0
   25e8a:	1f28      	subs	r0, r5, #4
   25e8c:	f7f2 fc12 	bl	186b4 <bt_att_chan_req_send>
   25e90:	2800      	cmp	r0, #0
   25e92:	da07      	bge.n	25ea4 <bt_att_status+0x44>
	sys_slist_prepend(&chan->att->reqs, node);
   25e94:	f855 3c04 	ldr.w	r3, [r5, #-4]
	parent->next = child;
   25e98:	685a      	ldr	r2, [r3, #4]
   25e9a:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   25e9c:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   25e9e:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   25ea0:	b902      	cbnz	r2, 25ea4 <bt_att_status+0x44>
	list->tail = node;
   25ea2:	609c      	str	r4, [r3, #8]
}
   25ea4:	bd38      	pop	{r3, r4, r5, pc}

00025ea6 <att_req_send_process>:
{
   25ea6:	b570      	push	{r4, r5, r6, lr}
   25ea8:	4604      	mov	r4, r0
	node = sys_slist_get(&att->reqs);
   25eaa:	3004      	adds	r0, #4
   25eac:	f7ff fd78 	bl	259a0 <sys_slist_get>
	if (!node) {
   25eb0:	4605      	mov	r5, r0
   25eb2:	b1a8      	cbz	r0, 25ee0 <att_req_send_process+0x3a>
	return list->head;
   25eb4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   25eb6:	b138      	cbz	r0, 25ec8 <att_req_send_process+0x22>
	return node->next;
   25eb8:	f850 69f4 	ldr.w	r6, [r0], #-244
   25ebc:	b106      	cbz	r6, 25ec0 <att_req_send_process+0x1a>
   25ebe:	3ef4      	subs	r6, #244	; 0xf4
		if (!chan->req) {
   25ec0:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   25ec4:	b13b      	cbz	r3, 25ed6 <att_req_send_process+0x30>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   25ec6:	b966      	cbnz	r6, 25ee2 <att_req_send_process+0x3c>
	parent->next = child;
   25ec8:	6863      	ldr	r3, [r4, #4]
   25eca:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   25ecc:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   25ece:	6065      	str	r5, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   25ed0:	b933      	cbnz	r3, 25ee0 <att_req_send_process+0x3a>
	list->tail = node;
   25ed2:	60a5      	str	r5, [r4, #8]
}
   25ed4:	e004      	b.n	25ee0 <att_req_send_process+0x3a>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   25ed6:	4629      	mov	r1, r5
   25ed8:	f7f2 fbec 	bl	186b4 <bt_att_chan_req_send>
   25edc:	2800      	cmp	r0, #0
   25ede:	dbf2      	blt.n	25ec6 <att_req_send_process+0x20>
}
   25ee0:	bd70      	pop	{r4, r5, r6, pc}
	return node->next;
   25ee2:	f8d6 30f4 	ldr.w	r3, [r6, #244]	; 0xf4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   25ee6:	b103      	cbz	r3, 25eea <att_req_send_process+0x44>
   25ee8:	3bf4      	subs	r3, #244	; 0xf4
{
   25eea:	4630      	mov	r0, r6
   25eec:	461e      	mov	r6, r3
   25eee:	e7e7      	b.n	25ec0 <att_req_send_process+0x1a>

00025ef0 <process_queue>:
{
   25ef0:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   25ef2:	2200      	movs	r2, #0
{
   25ef4:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   25ef6:	2300      	movs	r3, #0
   25ef8:	4608      	mov	r0, r1
{
   25efa:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   25efc:	f7f6 f962 	bl	1c1c4 <net_buf_get>
	if (buf) {
   25f00:	4605      	mov	r5, r0
   25f02:	b160      	cbz	r0, 25f1e <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   25f04:	4601      	mov	r1, r0
   25f06:	2200      	movs	r2, #0
   25f08:	4620      	mov	r0, r4
   25f0a:	f7f2 fb65 	bl	185d8 <chan_send>
		if (err) {
   25f0e:	4604      	mov	r4, r0
   25f10:	b118      	cbz	r0, 25f1a <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   25f12:	4629      	mov	r1, r5
   25f14:	4630      	mov	r0, r6
   25f16:	f001 fbf6 	bl	27706 <k_queue_prepend>
}
   25f1a:	4620      	mov	r0, r4
   25f1c:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   25f1e:	f06f 0401 	mvn.w	r4, #1
   25f22:	e7fa      	b.n	25f1a <process_queue+0x2a>

00025f24 <bt_att_sent>:
{
   25f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   25f26:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
	struct bt_att *att = chan->att;
   25f2a:	f850 4c04 	ldr.w	r4, [r0, #-4]
{
   25f2e:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   25f30:	1f07      	subs	r7, r0, #4
	if (chan->sent) {
   25f32:	b10b      	cbz	r3, 25f38 <bt_att_sent+0x14>
		chan->sent(chan);
   25f34:	4638      	mov	r0, r7
   25f36:	4798      	blx	r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   25f38:	f3bf 8f5b 	dmb	ish
   25f3c:	f105 0394 	add.w	r3, r5, #148	; 0x94
   25f40:	e853 2f00 	ldrex	r2, [r3]
   25f44:	f022 0210 	bic.w	r2, r2, #16
   25f48:	e843 2100 	strex	r1, r2, [r3]
   25f4c:	2900      	cmp	r1, #0
   25f4e:	d1f7      	bne.n	25f40 <bt_att_sent+0x1c>
   25f50:	f3bf 8f5b 	dmb	ish
	if (!att) {
   25f54:	b30c      	cbz	r4, 25f9a <bt_att_sent+0x76>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   25f56:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   25f5a:	b98b      	cbnz	r3, 25f80 <bt_att_sent+0x5c>
   25f5c:	6863      	ldr	r3, [r4, #4]
   25f5e:	b17b      	cbz	r3, 25f80 <bt_att_sent+0x5c>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   25f60:	1d20      	adds	r0, r4, #4
   25f62:	f7ff fd1d 	bl	259a0 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   25f66:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   25f68:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   25f6a:	4638      	mov	r0, r7
   25f6c:	f7ff ff5d 	bl	25e2a <chan_req_send>
   25f70:	2800      	cmp	r0, #0
   25f72:	da12      	bge.n	25f9a <bt_att_sent+0x76>
	parent->next = child;
   25f74:	6863      	ldr	r3, [r4, #4]
   25f76:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   25f78:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   25f7a:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   25f7c:	b903      	cbnz	r3, 25f80 <bt_att_sent+0x5c>
	list->tail = node;
   25f7e:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   25f80:	f105 019c 	add.w	r1, r5, #156	; 0x9c
   25f84:	4638      	mov	r0, r7
   25f86:	f7ff ffb3 	bl	25ef0 <process_queue>
	if (!err) {
   25f8a:	b130      	cbz	r0, 25f9a <bt_att_sent+0x76>
	(void)process_queue(chan, &att->tx_queue);
   25f8c:	f104 010c 	add.w	r1, r4, #12
   25f90:	4638      	mov	r0, r7
}
   25f92:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   25f96:	f7ff bfab 	b.w	25ef0 <process_queue>
}
   25f9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00025f9c <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   25f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25fa0:	4688      	mov	r8, r1
   25fa2:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   25fa4:	2101      	movs	r1, #1
   25fa6:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   25fa8:	4605      	mov	r5, r0
   25faa:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   25fac:	f7f2 fbd4 	bl	18758 <bt_att_chan_create_pdu>
	if (!buf) {
   25fb0:	4604      	mov	r4, r0
   25fb2:	b170      	cbz	r0, 25fd2 <send_err_rsp.part.0+0x36>
   25fb4:	2104      	movs	r1, #4
   25fb6:	3008      	adds	r0, #8
   25fb8:	f7f6 fb6a 	bl	1c690 <net_buf_simple_add>
	rsp->request = req;
   25fbc:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   25fc0:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   25fc2:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   25fc6:	4621      	mov	r1, r4
   25fc8:	4628      	mov	r0, r5
}
   25fca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   25fce:	f7f2 bbb1 	b.w	18734 <bt_att_chan_send_rsp.constprop.0>
}
   25fd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00025fd6 <att_write_req>:
{
   25fd6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   25fd8:	460c      	mov	r4, r1
   25fda:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   25fdc:	f101 0008 	add.w	r0, r1, #8
   25fe0:	f000 ff50 	bl	26e84 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   25fe4:	89a2      	ldrh	r2, [r4, #12]
   25fe6:	9201      	str	r2, [sp, #4]
   25fe8:	68a2      	ldr	r2, [r4, #8]
   25fea:	9200      	str	r2, [sp, #0]
   25fec:	4603      	mov	r3, r0
   25fee:	2213      	movs	r2, #19
   25ff0:	2112      	movs	r1, #18
   25ff2:	4628      	mov	r0, r5
   25ff4:	f7f2 fc60 	bl	188b8 <att_write_rsp.constprop.0>
}
   25ff8:	b003      	add	sp, #12
   25ffa:	bd30      	pop	{r4, r5, pc}

00025ffc <att_write_cmd>:
{
   25ffc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   25ffe:	460c      	mov	r4, r1
   26000:	4605      	mov	r5, r0
   26002:	f101 0008 	add.w	r0, r1, #8
   26006:	f000 ff3d 	bl	26e84 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   2600a:	89a2      	ldrh	r2, [r4, #12]
   2600c:	9201      	str	r2, [sp, #4]
   2600e:	68a2      	ldr	r2, [r4, #8]
   26010:	9200      	str	r2, [sp, #0]
   26012:	2200      	movs	r2, #0
   26014:	4603      	mov	r3, r0
   26016:	4611      	mov	r1, r2
   26018:	4628      	mov	r0, r5
   2601a:	f7f2 fc4d 	bl	188b8 <att_write_rsp.constprop.0>
}
   2601e:	b003      	add	sp, #12
   26020:	bd30      	pop	{r4, r5, pc}

00026022 <att_read_blob_req>:
{
   26022:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   26024:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   26026:	8813      	ldrh	r3, [r2, #0]
   26028:	8852      	ldrh	r2, [r2, #2]
   2602a:	9200      	str	r2, [sp, #0]
   2602c:	210c      	movs	r1, #12
   2602e:	220d      	movs	r2, #13
   26030:	f7f2 fda4 	bl	18b7c <att_read_rsp>
}
   26034:	b003      	add	sp, #12
   26036:	f85d fb04 	ldr.w	pc, [sp], #4

0002603a <att_read_req>:
{
   2603a:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   2603c:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   2603e:	2200      	movs	r2, #0
   26040:	881b      	ldrh	r3, [r3, #0]
   26042:	9200      	str	r2, [sp, #0]
   26044:	210a      	movs	r1, #10
   26046:	220b      	movs	r2, #11
   26048:	f7f2 fd98 	bl	18b7c <att_read_rsp>
}
   2604c:	b003      	add	sp, #12
   2604e:	f85d fb04 	ldr.w	pc, [sp], #4

00026052 <att_mtu_req>:
{
   26052:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   26054:	6803      	ldr	r3, [r0, #0]
{
   26056:	4604      	mov	r4, r0
	struct bt_conn *conn = chan->att->conn;
   26058:	6818      	ldr	r0, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2605a:	f3bf 8f5b 	dmb	ish
   2605e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   26062:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   26066:	f3c3 05c0 	ubfx	r5, r3, #3, #1
   2606a:	071b      	lsls	r3, r3, #28
   2606c:	d41e      	bmi.n	260ac <att_mtu_req+0x5a>
	mtu_client = sys_le16_to_cpu(req->mtu);
   2606e:	688b      	ldr	r3, [r1, #8]
   26070:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   26072:	2e16      	cmp	r6, #22
   26074:	d91c      	bls.n	260b0 <att_mtu_req+0x5e>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   26076:	2202      	movs	r2, #2
   26078:	2103      	movs	r1, #3
   2607a:	f7f2 fc85 	bl	18988 <bt_att_create_pdu>
	if (!pdu) {
   2607e:	4607      	mov	r7, r0
   26080:	b1c0      	cbz	r0, 260b4 <att_mtu_req+0x62>
	return net_buf_simple_add(&buf->b, len);
   26082:	2102      	movs	r1, #2
   26084:	3008      	adds	r0, #8
   26086:	f7f6 fb03 	bl	1c690 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   2608a:	2341      	movs	r3, #65	; 0x41
   2608c:	7003      	strb	r3, [r0, #0]
   2608e:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   26090:	4639      	mov	r1, r7
   26092:	4620      	mov	r0, r4
   26094:	f7f2 fb4e 	bl	18734 <bt_att_chan_send_rsp.constprop.0>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   26098:	2e41      	cmp	r6, #65	; 0x41
   2609a:	bf28      	it	cs
   2609c:	2641      	movcs	r6, #65	; 0x41
	att_chan_mtu_updated(chan);
   2609e:	4620      	mov	r0, r4
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   260a0:	8366      	strh	r6, [r4, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   260a2:	8566      	strh	r6, [r4, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   260a4:	f7ff fcf6 	bl	25a94 <att_chan_mtu_updated>
	return 0;
   260a8:	4628      	mov	r0, r5
}
   260aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   260ac:	2006      	movs	r0, #6
   260ae:	e7fc      	b.n	260aa <att_mtu_req+0x58>
		return BT_ATT_ERR_INVALID_PDU;
   260b0:	2004      	movs	r0, #4
   260b2:	e7fa      	b.n	260aa <att_mtu_req+0x58>
		return BT_ATT_ERR_UNLIKELY;
   260b4:	200e      	movs	r0, #14
   260b6:	e7f8      	b.n	260aa <att_mtu_req+0x58>

000260b8 <bt_att_init>:
	bt_gatt_init();
   260b8:	f7f3 bbf6 	b.w	198a8 <bt_gatt_init>

000260bc <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   260bc:	898a      	ldrh	r2, [r1, #12]
   260be:	6889      	ldr	r1, [r1, #8]
   260c0:	2300      	movs	r3, #0
   260c2:	f7f2 bee1 	b.w	18e88 <att_handle_rsp>

000260c6 <bt_att_encrypt_change>:
	if (!att_chan->att) {
   260c6:	f850 3c04 	ldr.w	r3, [r0, #-4]
{
   260ca:	b570      	push	{r4, r5, r6, lr}
   260cc:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   260ce:	1f06      	subs	r6, r0, #4
	if (!att_chan->att) {
   260d0:	2b00      	cmp	r3, #0
   260d2:	d037      	beq.n	26144 <bt_att_encrypt_change+0x7e>
	if (hci_status) {
   260d4:	b171      	cbz	r1, 260f4 <bt_att_encrypt_change+0x2e>
		if (att_chan->req && att_chan->req->retrying) {
   260d6:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
   260da:	2b00      	cmp	r3, #0
   260dc:	d032      	beq.n	26144 <bt_att_encrypt_change+0x7e>
   260de:	7c1b      	ldrb	r3, [r3, #16]
   260e0:	07da      	lsls	r2, r3, #31
   260e2:	d52f      	bpl.n	26144 <bt_att_encrypt_change+0x7e>
		return BT_ATT_ERR_AUTHENTICATION;
   260e4:	2305      	movs	r3, #5
		att_handle_rsp(att_chan, NULL, 0, err);
   260e6:	2200      	movs	r2, #0
   260e8:	4630      	mov	r0, r6
   260ea:	4611      	mov	r1, r2
}
   260ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   260f0:	f7f2 beca 	b.w	18e88 <att_handle_rsp>
	struct bt_conn *conn = le_chan->chan.conn;
   260f4:	6805      	ldr	r5, [r0, #0]
	bt_gatt_encrypt_change(conn);
   260f6:	4628      	mov	r0, r5
   260f8:	f7f4 f994 	bl	1a424 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   260fc:	7a6b      	ldrb	r3, [r5, #9]
   260fe:	2b01      	cmp	r3, #1
   26100:	d020      	beq.n	26144 <bt_att_encrypt_change+0x7e>
	if (!(att_chan->req && att_chan->req->retrying)) {
   26102:	f8d4 4098 	ldr.w	r4, [r4, #152]	; 0x98
   26106:	b1ec      	cbz	r4, 26144 <bt_att_encrypt_change+0x7e>
   26108:	7c23      	ldrb	r3, [r4, #16]
   2610a:	07db      	lsls	r3, r3, #31
   2610c:	d51a      	bpl.n	26144 <bt_att_encrypt_change+0x7e>
	if (!req->encode) {
   2610e:	68e3      	ldr	r3, [r4, #12]
   26110:	2b00      	cmp	r3, #0
   26112:	d0e7      	beq.n	260e4 <bt_att_encrypt_change+0x1e>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   26114:	6962      	ldr	r2, [r4, #20]
   26116:	7c61      	ldrb	r1, [r4, #17]
   26118:	4630      	mov	r0, r6
   2611a:	f7f2 fb1d 	bl	18758 <bt_att_chan_create_pdu>
	if (!buf) {
   2611e:	4605      	mov	r5, r0
   26120:	b140      	cbz	r0, 26134 <bt_att_encrypt_change+0x6e>
	if (req->encode(buf, req->len, req->user_data)) {
   26122:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
   26126:	68e3      	ldr	r3, [r4, #12]
   26128:	4798      	blx	r3
   2612a:	4602      	mov	r2, r0
   2612c:	b120      	cbz	r0, 26138 <bt_att_encrypt_change+0x72>
		net_buf_unref(buf);
   2612e:	4628      	mov	r0, r5
   26130:	f7f6 f998 	bl	1c464 <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   26134:	230e      	movs	r3, #14
   26136:	e7d6      	b.n	260e6 <bt_att_encrypt_change+0x20>
	if (chan_send(att_chan, buf, NULL)) {
   26138:	4629      	mov	r1, r5
   2613a:	4630      	mov	r0, r6
   2613c:	f7f2 fa4c 	bl	185d8 <chan_send>
   26140:	2800      	cmp	r0, #0
   26142:	d1f4      	bne.n	2612e <bt_att_encrypt_change+0x68>
}
   26144:	bd70      	pop	{r4, r5, r6, pc}

00026146 <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   26146:	2001      	movs	r0, #1
   26148:	4770      	bx	lr

0002614a <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   2614a:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
   2614c:	f7f2 f824 	bl	18198 <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   26150:	b198      	cbz	r0, 2617a <bt_att_clear_out_of_sync_sent+0x30>
	return list->head;
   26152:	6a83      	ldr	r3, [r0, #40]	; 0x28
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   26154:	b18b      	cbz	r3, 2617a <bt_att_clear_out_of_sync_sent+0x30>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   26156:	f3bf 8f5b 	dmb	ish
   2615a:	3bf4      	subs	r3, #244	; 0xf4
   2615c:	f103 0298 	add.w	r2, r3, #152	; 0x98
   26160:	e852 1f00 	ldrex	r1, [r2]
   26164:	f021 0120 	bic.w	r1, r1, #32
   26168:	e842 1000 	strex	r0, r1, [r2]
   2616c:	2800      	cmp	r0, #0
   2616e:	d1f7      	bne.n	26160 <bt_att_clear_out_of_sync_sent+0x16>
   26170:	f3bf 8f5b 	dmb	ish
	return node->next;
   26174:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
   26178:	e7ec      	b.n	26154 <bt_att_clear_out_of_sync_sent+0xa>
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
	}
}
   2617a:	bd08      	pop	{r3, pc}

0002617c <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   2617c:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   2617e:	2104      	movs	r1, #4
   26180:	f7ff fc03 	bl	2598a <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   26184:	b138      	cbz	r0, 26196 <bt_att_out_of_sync_sent_on_fixed+0x1a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   26186:	f3bf 8f5b 	dmb	ish
   2618a:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
   2618e:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   26192:	f3c0 1040 	ubfx	r0, r0, #5, #1
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
}
   26196:	bd08      	pop	{r3, pc}

00026198 <gatt_ccc_changed>:
{
   26198:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   2619a:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   2619c:	895a      	ldrh	r2, [r3, #10]
   2619e:	428a      	cmp	r2, r1
   261a0:	d003      	beq.n	261aa <gatt_ccc_changed+0x12>
		ccc->value = value;
   261a2:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   261a4:	68db      	ldr	r3, [r3, #12]
   261a6:	b103      	cbz	r3, 261aa <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   261a8:	4718      	bx	r3
}
   261aa:	4770      	bx	lr

000261ac <gatt_indicate_rsp>:
{
   261ac:	b510      	push	{r4, lr}
   261ae:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   261b0:	68a3      	ldr	r3, [r4, #8]
{
   261b2:	460a      	mov	r2, r1
	if (params->func) {
   261b4:	b10b      	cbz	r3, 261ba <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   261b6:	4621      	mov	r1, r4
   261b8:	4798      	blx	r3
	params->_ref--;
   261ba:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   261bc:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   261be:	3b01      	subs	r3, #1
   261c0:	b2db      	uxtb	r3, r3
   261c2:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   261c4:	b122      	cbz	r2, 261d0 <gatt_indicate_rsp+0x24>
   261c6:	b91b      	cbnz	r3, 261d0 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   261c8:	4620      	mov	r0, r4
}
   261ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   261ce:	4710      	bx	r2
}
   261d0:	bd10      	pop	{r4, pc}

000261d2 <match_uuid>:
	data->attr = attr;
   261d2:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   261d4:	8091      	strh	r1, [r2, #4]
}
   261d6:	2000      	movs	r0, #0
   261d8:	4770      	bx	lr

000261da <ccc_set_cb>:
}
   261da:	2000      	movs	r0, #0
   261dc:	4770      	bx	lr

000261de <gen_hash_m>:
{
   261de:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   261e0:	6807      	ldr	r7, [r0, #0]
   261e2:	783d      	ldrb	r5, [r7, #0]
{
   261e4:	b089      	sub	sp, #36	; 0x24
   261e6:	4606      	mov	r6, r0
   261e8:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   261ea:	b10d      	cbz	r5, 261f0 <gen_hash_m+0x12>
	switch (u16->val) {
   261ec:	2501      	movs	r5, #1
   261ee:	e014      	b.n	2621a <gen_hash_m+0x3c>
   261f0:	887b      	ldrh	r3, [r7, #2]
   261f2:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   261f6:	d004      	beq.n	26202 <gen_hash_m+0x24>
   261f8:	d812      	bhi.n	26220 <gen_hash_m+0x42>
   261fa:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   261fe:	2b03      	cmp	r3, #3
   26200:	d8f4      	bhi.n	261ec <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   26202:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   26206:	2202      	movs	r2, #2
   26208:	f10d 010a 	add.w	r1, sp, #10
   2620c:	4620      	mov	r0, r4
   2620e:	f7fe fdc7 	bl	24da0 <tc_cmac_update>
   26212:	b9e0      	cbnz	r0, 2624e <gen_hash_m+0x70>
			state->err = -EINVAL;
   26214:	f06f 0315 	mvn.w	r3, #21
   26218:	65a3      	str	r3, [r4, #88]	; 0x58
}
   2621a:	4628      	mov	r0, r5
   2621c:	b009      	add	sp, #36	; 0x24
   2621e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   26220:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   26224:	33ff      	adds	r3, #255	; 0xff
   26226:	b29b      	uxth	r3, r3
   26228:	2b04      	cmp	r3, #4
   2622a:	d8df      	bhi.n	261ec <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   2622c:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   26230:	2202      	movs	r2, #2
   26232:	f10d 010a 	add.w	r1, sp, #10
   26236:	4620      	mov	r0, r4
   26238:	f7fe fdb2 	bl	24da0 <tc_cmac_update>
   2623c:	2800      	cmp	r0, #0
   2623e:	d0e9      	beq.n	26214 <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   26240:	887b      	ldrh	r3, [r7, #2]
   26242:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   26246:	2202      	movs	r2, #2
   26248:	f10d 010a 	add.w	r1, sp, #10
   2624c:	e016      	b.n	2627c <gen_hash_m+0x9e>
		value = sys_cpu_to_le16(u16->val);
   2624e:	887b      	ldrh	r3, [r7, #2]
   26250:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   26254:	2202      	movs	r2, #2
   26256:	f10d 010a 	add.w	r1, sp, #10
   2625a:	4620      	mov	r0, r4
   2625c:	f7fe fda0 	bl	24da0 <tc_cmac_update>
   26260:	2800      	cmp	r0, #0
   26262:	d0d7      	beq.n	26214 <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   26264:	2000      	movs	r0, #0
   26266:	aa03      	add	r2, sp, #12
   26268:	6877      	ldr	r7, [r6, #4]
   2626a:	9000      	str	r0, [sp, #0]
   2626c:	2313      	movs	r3, #19
   2626e:	4631      	mov	r1, r6
   26270:	47b8      	blx	r7
		if (len < 0) {
   26272:	1e02      	subs	r2, r0, #0
   26274:	da01      	bge.n	2627a <gen_hash_m+0x9c>
			state->err = len;
   26276:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   26278:	e7cf      	b.n	2621a <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   2627a:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2627c:	4620      	mov	r0, r4
   2627e:	f7fe fd8f 	bl	24da0 <tc_cmac_update>
   26282:	2800      	cmp	r0, #0
   26284:	d1b2      	bne.n	261ec <gen_hash_m+0xe>
   26286:	e7c5      	b.n	26214 <gen_hash_m+0x36>

00026288 <atomic_get>:
   26288:	f3bf 8f5b 	dmb	ish
   2628c:	6800      	ldr	r0, [r0, #0]
   2628e:	f3bf 8f5b 	dmb	ish
}
   26292:	4770      	bx	lr

00026294 <atomic_or>:
{
   26294:	4603      	mov	r3, r0
}
   26296:	f3bf 8f5b 	dmb	ish
   2629a:	e853 0f00 	ldrex	r0, [r3]
   2629e:	ea40 0201 	orr.w	r2, r0, r1
   262a2:	e843 2c00 	strex	ip, r2, [r3]
   262a6:	f1bc 0f00 	cmp.w	ip, #0
   262aa:	d1f6      	bne.n	2629a <atomic_or+0x6>
   262ac:	f3bf 8f5b 	dmb	ish
   262b0:	4770      	bx	lr

000262b2 <atomic_and>:
{
   262b2:	4603      	mov	r3, r0
}
   262b4:	f3bf 8f5b 	dmb	ish
   262b8:	e853 0f00 	ldrex	r0, [r3]
   262bc:	ea00 0201 	and.w	r2, r0, r1
   262c0:	e843 2c00 	strex	ip, r2, [r3]
   262c4:	f1bc 0f00 	cmp.w	ip, #0
   262c8:	d1f6      	bne.n	262b8 <atomic_and+0x6>
   262ca:	f3bf 8f5b 	dmb	ish
   262ce:	4770      	bx	lr

000262d0 <bt_addr_le_copy>:
   262d0:	680b      	ldr	r3, [r1, #0]
   262d2:	6003      	str	r3, [r0, #0]
   262d4:	888b      	ldrh	r3, [r1, #4]
   262d6:	8083      	strh	r3, [r0, #4]
   262d8:	798b      	ldrb	r3, [r1, #6]
   262da:	7183      	strb	r3, [r0, #6]
}
   262dc:	4770      	bx	lr

000262de <clear_ccc_cfg>:
{
   262de:	b513      	push	{r0, r1, r4, lr}
   262e0:	4602      	mov	r2, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   262e2:	2400      	movs	r4, #0
   262e4:	4669      	mov	r1, sp
   262e6:	3001      	adds	r0, #1
   262e8:	9400      	str	r4, [sp, #0]
   262ea:	f8cd 4003 	str.w	r4, [sp, #3]
   262ee:	f7ff ffef 	bl	262d0 <bt_addr_le_copy>
	cfg->id = 0U;
   262f2:	7014      	strb	r4, [r2, #0]
	cfg->value = 0U;
   262f4:	8114      	strh	r4, [r2, #8]
}
   262f6:	b002      	add	sp, #8
   262f8:	bd10      	pop	{r4, pc}

000262fa <clear_sc_cfg>:
__ssp_bos_icheck3(memset, void *, int)
   262fa:	2300      	movs	r3, #0
   262fc:	6003      	str	r3, [r0, #0]
   262fe:	6043      	str	r3, [r0, #4]
   26300:	6083      	str	r3, [r0, #8]
}
   26302:	4770      	bx	lr

00026304 <bt_gatt_attr_read.constprop.0>:
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   26304:	b538      	push	{r3, r4, r5, lr}
   26306:	f8bd 5010 	ldrh.w	r5, [sp, #16]
	if (offset > value_len) {
   2630a:	4295      	cmp	r5, r2
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   2630c:	460c      	mov	r4, r1
   2630e:	4611      	mov	r1, r2
	if (offset > value_len) {
   26310:	d30a      	bcc.n	26328 <bt_gatt_attr_read.constprop.0+0x24>
	len = MIN(buf_len, value_len - offset);
   26312:	1aad      	subs	r5, r5, r2
   26314:	42a5      	cmp	r5, r4
   26316:	bfa8      	it	ge
   26318:	4625      	movge	r5, r4
   2631a:	b2ad      	uxth	r5, r5
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2631c:	462a      	mov	r2, r5
   2631e:	4419      	add	r1, r3
   26320:	f001 fb9c 	bl	27a5c <memcpy>
}
   26324:	4628      	mov	r0, r5
   26326:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   26328:	f06f 0506 	mvn.w	r5, #6
   2632c:	e7fa      	b.n	26324 <bt_gatt_attr_read.constprop.0+0x20>

0002632e <bt_gatt_attr_read_service>:
{
   2632e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   26330:	460c      	mov	r4, r1
   26332:	4619      	mov	r1, r3
	struct bt_uuid *uuid = attr->user_data;
   26334:	68e3      	ldr	r3, [r4, #12]
	if (uuid->type == BT_UUID_TYPE_16) {
   26336:	781c      	ldrb	r4, [r3, #0]
{
   26338:	4610      	mov	r0, r2
   2633a:	f8bd 2018 	ldrh.w	r2, [sp, #24]
	if (uuid->type == BT_UUID_TYPE_16) {
   2633e:	b13c      	cbz	r4, 26350 <bt_gatt_attr_read_service+0x22>
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   26340:	2410      	movs	r4, #16
   26342:	3301      	adds	r3, #1
   26344:	9406      	str	r4, [sp, #24]
}
   26346:	b004      	add	sp, #16
   26348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2634c:	f7ff bfda 	b.w	26304 <bt_gatt_attr_read.constprop.0>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   26350:	885b      	ldrh	r3, [r3, #2]
   26352:	f8ad 300e 	strh.w	r3, [sp, #14]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   26356:	2302      	movs	r3, #2
   26358:	9300      	str	r3, [sp, #0]
   2635a:	f10d 030e 	add.w	r3, sp, #14
   2635e:	f7ff ffd1 	bl	26304 <bt_gatt_attr_read.constprop.0>
}
   26362:	b004      	add	sp, #16
   26364:	bd10      	pop	{r4, pc}

00026366 <cf_read>:
{
   26366:	b530      	push	{r4, r5, lr}
   26368:	b085      	sub	sp, #20
   2636a:	461d      	mov	r5, r3
	uint8_t data[1] = {};
   2636c:	2300      	movs	r3, #0
{
   2636e:	4614      	mov	r4, r2
	uint8_t data[1] = {};
   26370:	f88d 300c 	strb.w	r3, [sp, #12]
	cfg = find_cf_cfg(conn);
   26374:	f7f2 fee8 	bl	19148 <find_cf_cfg>
	if (cfg) {
   26378:	b110      	cbz	r0, 26380 <cf_read+0x1a>
		memcpy(data, cfg->data, sizeof(data));
   2637a:	7a03      	ldrb	r3, [r0, #8]
   2637c:	f88d 300c 	strb.w	r3, [sp, #12]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   26380:	2301      	movs	r3, #1
   26382:	9300      	str	r3, [sp, #0]
   26384:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   26388:	ab03      	add	r3, sp, #12
   2638a:	4629      	mov	r1, r5
   2638c:	4620      	mov	r0, r4
   2638e:	f7ff ffb9 	bl	26304 <bt_gatt_attr_read.constprop.0>
}
   26392:	b005      	add	sp, #20
   26394:	bd30      	pop	{r4, r5, pc}

00026396 <read_name>:
{
   26396:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2639a:	4614      	mov	r4, r2
   2639c:	461d      	mov	r5, r3
   2639e:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	const char *name = bt_get_name();
   263a2:	f7ef ff6f 	bl	16284 <bt_get_name>
   263a6:	4606      	mov	r6, r0
				 strlen(name));
   263a8:	f7e6 fd13 	bl	cdd2 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   263ac:	b280      	uxth	r0, r0
   263ae:	9006      	str	r0, [sp, #24]
   263b0:	4633      	mov	r3, r6
   263b2:	463a      	mov	r2, r7
   263b4:	4629      	mov	r1, r5
   263b6:	4620      	mov	r0, r4
}
   263b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   263bc:	f7ff bfa2 	b.w	26304 <bt_gatt_attr_read.constprop.0>

000263c0 <read_appearance>:
{
   263c0:	b530      	push	{r4, r5, lr}
   263c2:	b085      	sub	sp, #20
   263c4:	4614      	mov	r4, r2
   263c6:	461d      	mov	r5, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   263c8:	f7fe ff7b 	bl	252c2 <bt_get_appearance>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   263cc:	2302      	movs	r3, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   263ce:	f8ad 000e 	strh.w	r0, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   263d2:	9300      	str	r3, [sp, #0]
   263d4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   263d8:	f10d 030e 	add.w	r3, sp, #14
   263dc:	4629      	mov	r1, r5
   263de:	4620      	mov	r0, r4
   263e0:	f7ff ff90 	bl	26304 <bt_gatt_attr_read.constprop.0>
}
   263e4:	b005      	add	sp, #20
   263e6:	bd30      	pop	{r4, r5, pc}

000263e8 <read_ppcp>:
{
   263e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   263ea:	4619      	mov	r1, r3
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   263ec:	2318      	movs	r3, #24
   263ee:	f8ad 3008 	strh.w	r3, [sp, #8]
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
   263f2:	2328      	movs	r3, #40	; 0x28
   263f4:	f8ad 300a 	strh.w	r3, [sp, #10]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   263f8:	2300      	movs	r3, #0
   263fa:	f8ad 300c 	strh.w	r3, [sp, #12]
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   263fe:	232a      	movs	r3, #42	; 0x2a
   26400:	f8ad 300e 	strh.w	r3, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   26404:	2308      	movs	r3, #8
   26406:	9300      	str	r3, [sp, #0]
{
   26408:	4610      	mov	r0, r2
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   2640a:	446b      	add	r3, sp
   2640c:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   26410:	f7ff ff78 	bl	26304 <bt_gatt_attr_read.constprop.0>
}
   26414:	b005      	add	sp, #20
   26416:	f85d fb04 	ldr.w	pc, [sp], #4

0002641a <clear_cf_cfg>:
{
   2641a:	b513      	push	{r0, r1, r4, lr}
   2641c:	4602      	mov	r2, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   2641e:	2400      	movs	r4, #0
   26420:	4669      	mov	r1, sp
   26422:	3001      	adds	r0, #1
   26424:	9400      	str	r4, [sp, #0]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   26426:	320c      	adds	r2, #12
   26428:	f8cd 4003 	str.w	r4, [sp, #3]
   2642c:	f7ff ff50 	bl	262d0 <bt_addr_le_copy>
__ssp_bos_icheck3(memset, void *, int)
   26430:	f802 4c04 	strb.w	r4, [r2, #-4]
   26434:	f3bf 8f5b 	dmb	ish
   26438:	e852 3f00 	ldrex	r3, [r2]
   2643c:	e842 4100 	strex	r1, r4, [r2]
   26440:	2900      	cmp	r1, #0
   26442:	d1f9      	bne.n	26438 <clear_cf_cfg+0x1e>
   26444:	f3bf 8f5b 	dmb	ish
}
   26448:	b002      	add	sp, #8
   2644a:	bd10      	pop	{r4, pc}

0002644c <ccc_find_cfg>:
{
   2644c:	b510      	push	{r4, lr}
		if (id == ccc->cfg[i].id &&
   2644e:	7803      	ldrb	r3, [r0, #0]
   26450:	4293      	cmp	r3, r2
{
   26452:	4604      	mov	r4, r0
		if (id == ccc->cfg[i].id &&
   26454:	d001      	beq.n	2645a <ccc_find_cfg+0xe>
	return NULL;
   26456:	2000      	movs	r0, #0
}
   26458:	bd10      	pop	{r4, pc}
	return memcmp(a, b, sizeof(*a));
   2645a:	2207      	movs	r2, #7
   2645c:	3001      	adds	r0, #1
   2645e:	f001 faed 	bl	27a3c <memcmp>
		if (id == ccc->cfg[i].id &&
   26462:	2800      	cmp	r0, #0
   26464:	d1f7      	bne.n	26456 <ccc_find_cfg+0xa>
			return &ccc->cfg[i];
   26466:	4620      	mov	r0, r4
   26468:	e7f6      	b.n	26458 <ccc_find_cfg+0xc>

0002646a <find_ccc_cfg>:
{
   2646a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2646c:	460c      	mov	r4, r1
						    &cfg->peer)) {
   2646e:	1c4d      	adds	r5, r1, #1
		if (conn) {
   26470:	b148      	cbz	r0, 26486 <find_ccc_cfg+0x1c>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   26472:	7809      	ldrb	r1, [r1, #0]
   26474:	462a      	mov	r2, r5
   26476:	f7ff f9db 	bl	25830 <bt_conn_is_peer_addr_le>
	return NULL;
   2647a:	2800      	cmp	r0, #0
   2647c:	bf08      	it	eq
   2647e:	2400      	moveq	r4, #0
}
   26480:	4620      	mov	r0, r4
   26482:	b003      	add	sp, #12
   26484:	bd30      	pop	{r4, r5, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   26486:	9000      	str	r0, [sp, #0]
   26488:	2207      	movs	r2, #7
   2648a:	f8cd 0003 	str.w	r0, [sp, #3]
   2648e:	4669      	mov	r1, sp
   26490:	4628      	mov	r0, r5
   26492:	f001 fad3 	bl	27a3c <memcmp>
	return NULL;
   26496:	2800      	cmp	r0, #0
   26498:	bf18      	it	ne
   2649a:	2400      	movne	r4, #0
   2649c:	e7f0      	b.n	26480 <find_ccc_cfg+0x16>

0002649e <bt_gatt_attr_read_ccc>:
{
   2649e:	b530      	push	{r4, r5, lr}
	cfg = find_ccc_cfg(conn, ccc);
   264a0:	68c9      	ldr	r1, [r1, #12]
{
   264a2:	b085      	sub	sp, #20
   264a4:	4614      	mov	r4, r2
   264a6:	461d      	mov	r5, r3
	cfg = find_ccc_cfg(conn, ccc);
   264a8:	f7ff ffdf 	bl	2646a <find_ccc_cfg>
	if (cfg) {
   264ac:	b100      	cbz	r0, 264b0 <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(cfg->value);
   264ae:	8900      	ldrh	r0, [r0, #8]
   264b0:	f8ad 000e 	strh.w	r0, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   264b4:	2302      	movs	r3, #2
   264b6:	9300      	str	r3, [sp, #0]
   264b8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   264bc:	f10d 030e 	add.w	r3, sp, #14
   264c0:	4629      	mov	r1, r5
   264c2:	4620      	mov	r0, r4
   264c4:	f7ff ff1e 	bl	26304 <bt_gatt_attr_read.constprop.0>
}
   264c8:	b005      	add	sp, #20
   264ca:	bd30      	pop	{r4, r5, pc}

000264cc <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   264cc:	2a02      	cmp	r2, #2
{
   264ce:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   264d0:	d108      	bne.n	264e4 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   264d2:	2300      	movs	r3, #0
   264d4:	f100 0190 	add.w	r1, r0, #144	; 0x90
   264d8:	461a      	mov	r2, r3
   264da:	7a00      	ldrb	r0, [r0, #8]
   264dc:	f7f3 f886 	bl	195ec <sc_save>
}
   264e0:	2002      	movs	r0, #2
   264e2:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   264e4:	f7f3 f8ea 	bl	196bc <sc_clear>
   264e8:	e7fa      	b.n	264e0 <sc_ccc_cfg_write+0x14>

000264ea <sc_restore_rsp>:
{
   264ea:	b538      	push	{r3, r4, r5, lr}
   264ec:	4604      	mov	r4, r0
   264ee:	4615      	mov	r5, r2
	if (bt_att_fixed_chan_only(conn)) {
   264f0:	f7ff fe29 	bl	26146 <bt_att_fixed_chan_only>
   264f4:	b150      	cbz	r0, 2650c <sc_restore_rsp+0x22>
		cfg = find_cf_cfg(conn);
   264f6:	4620      	mov	r0, r4
   264f8:	f7f2 fe26 	bl	19148 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   264fc:	b130      	cbz	r0, 2650c <sc_restore_rsp+0x22>
   264fe:	7a03      	ldrb	r3, [r0, #8]
   26500:	07db      	lsls	r3, r3, #31
   26502:	d503      	bpl.n	2650c <sc_restore_rsp+0x22>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   26504:	2101      	movs	r1, #1
   26506:	300c      	adds	r0, #12
   26508:	f7ff fec4 	bl	26294 <atomic_or>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   2650c:	b955      	cbnz	r5, 26524 <sc_restore_rsp+0x3a>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   2650e:	7a20      	ldrb	r0, [r4, #8]
   26510:	f104 0190 	add.w	r1, r4, #144	; 0x90
   26514:	f7f3 f848 	bl	195a8 <find_sc_cfg>
		if (sc_cfg) {
   26518:	b120      	cbz	r0, 26524 <sc_restore_rsp+0x3a>
   2651a:	6085      	str	r5, [r0, #8]
}
   2651c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		sc_store(cfg);
   26520:	f7f2 be34 	b.w	1918c <sc_store>
}
   26524:	bd38      	pop	{r3, r4, r5, pc}

00026526 <bt_gatt_attr_value_handle>:
{
   26526:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   26528:	4604      	mov	r4, r0
   2652a:	b910      	cbnz	r0, 26532 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   2652c:	2000      	movs	r0, #0
}
   2652e:	b002      	add	sp, #8
   26530:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   26532:	2300      	movs	r3, #0
   26534:	f88d 3004 	strb.w	r3, [sp, #4]
   26538:	6800      	ldr	r0, [r0, #0]
   2653a:	f642 0303 	movw	r3, #10243	; 0x2803
   2653e:	a901      	add	r1, sp, #4
   26540:	f8ad 3006 	strh.w	r3, [sp, #6]
   26544:	f7fe fd47 	bl	24fd6 <bt_uuid_cmp>
   26548:	2800      	cmp	r0, #0
   2654a:	d1ef      	bne.n	2652c <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   2654c:	68e3      	ldr	r3, [r4, #12]
   2654e:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   26550:	2800      	cmp	r0, #0
   26552:	d1ec      	bne.n	2652e <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   26554:	4620      	mov	r0, r4
   26556:	f7f3 fa1b 	bl	19990 <bt_gatt_attr_get_handle>
   2655a:	3001      	adds	r0, #1
   2655c:	b280      	uxth	r0, r0
	return handle;
   2655e:	e7e6      	b.n	2652e <bt_gatt_attr_value_handle+0x8>

00026560 <bt_gatt_attr_read_chrc>:
{
   26560:	b570      	push	{r4, r5, r6, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   26562:	68cc      	ldr	r4, [r1, #12]
{
   26564:	b088      	sub	sp, #32
   26566:	4608      	mov	r0, r1
   26568:	461e      	mov	r6, r3
	pdu.properties = chrc->properties;
   2656a:	79a3      	ldrb	r3, [r4, #6]
   2656c:	f88d 300c 	strb.w	r3, [sp, #12]
{
   26570:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   26572:	f7ff ffd8 	bl	26526 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   26576:	6824      	ldr	r4, [r4, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   26578:	f8ad 000d 	strh.w	r0, [sp, #13]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   2657c:	7823      	ldrb	r3, [r4, #0]
   2657e:	b96b      	cbnz	r3, 2659c <bt_gatt_attr_read_chrc+0x3c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   26580:	8863      	ldrh	r3, [r4, #2]
   26582:	f8ad 300f 	strh.w	r3, [sp, #15]
		value_len += 2U;
   26586:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   26588:	9300      	str	r3, [sp, #0]
   2658a:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   2658e:	ab03      	add	r3, sp, #12
   26590:	4631      	mov	r1, r6
   26592:	4628      	mov	r0, r5
   26594:	f7ff feb6 	bl	26304 <bt_gatt_attr_read.constprop.0>
}
   26598:	b008      	add	sp, #32
   2659a:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   2659c:	1c63      	adds	r3, r4, #1
   2659e:	f10d 020f 	add.w	r2, sp, #15
   265a2:	3411      	adds	r4, #17
   265a4:	f853 1b04 	ldr.w	r1, [r3], #4
   265a8:	f842 1b04 	str.w	r1, [r2], #4
   265ac:	42a3      	cmp	r3, r4
   265ae:	d1f9      	bne.n	265a4 <bt_gatt_attr_read_chrc+0x44>
		value_len += 16U;
   265b0:	2313      	movs	r3, #19
   265b2:	e7e9      	b.n	26588 <bt_gatt_attr_read_chrc+0x28>

000265b4 <bt_gatt_foreach_attr>:
{
   265b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   265b6:	e9cd 2301 	strd	r2, r3, [sp, #4]
   265ba:	2300      	movs	r3, #0
   265bc:	9300      	str	r3, [sp, #0]
   265be:	461a      	mov	r2, r3
   265c0:	f7f3 fa2a 	bl	19a18 <bt_gatt_foreach_attr_type>
}
   265c4:	b005      	add	sp, #20
   265c6:	f85d fb04 	ldr.w	pc, [sp], #4

000265ca <bt_gatt_check_perm>:
{
   265ca:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   265cc:	07d4      	lsls	r4, r2, #31
{
   265ce:	4605      	mov	r5, r0
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   265d0:	7c88      	ldrb	r0, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   265d2:	d504      	bpl.n	265de <bt_gatt_check_perm+0x14>
   265d4:	f010 0f15 	tst.w	r0, #21
   265d8:	d01e      	beq.n	26618 <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   265da:	684b      	ldr	r3, [r1, #4]
   265dc:	b1e3      	cbz	r3, 26618 <bt_gatt_check_perm+0x4e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   265de:	0793      	lsls	r3, r2, #30
   265e0:	d504      	bpl.n	265ec <bt_gatt_check_perm+0x22>
   265e2:	f010 0f2a 	tst.w	r0, #42	; 0x2a
   265e6:	d019      	beq.n	2661c <bt_gatt_check_perm+0x52>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   265e8:	688b      	ldr	r3, [r1, #8]
   265ea:	b1bb      	cbz	r3, 2661c <bt_gatt_check_perm+0x52>
	mask &= attr->perm;
   265ec:	ea02 0400 	and.w	r4, r2, r0
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   265f0:	f014 0f30 	tst.w	r4, #48	; 0x30
   265f4:	d103      	bne.n	265fe <bt_gatt_check_perm+0x34>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   265f6:	f014 000c 	ands.w	r0, r4, #12
   265fa:	d107      	bne.n	2660c <bt_gatt_check_perm+0x42>
}
   265fc:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   265fe:	4628      	mov	r0, r5
   26600:	f7ff f914 	bl	2582c <bt_conn_get_security>
   26604:	2802      	cmp	r0, #2
   26606:	d8f6      	bhi.n	265f6 <bt_gatt_check_perm+0x2c>
			return BT_ATT_ERR_AUTHENTICATION;
   26608:	2005      	movs	r0, #5
   2660a:	e7f7      	b.n	265fc <bt_gatt_check_perm+0x32>
		if (!conn->encrypt) {
   2660c:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   2660e:	2b00      	cmp	r3, #0
   26610:	bf14      	ite	ne
   26612:	2000      	movne	r0, #0
   26614:	200f      	moveq	r0, #15
   26616:	e7f1      	b.n	265fc <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   26618:	2002      	movs	r0, #2
   2661a:	e7ef      	b.n	265fc <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   2661c:	2003      	movs	r0, #3
   2661e:	e7ed      	b.n	265fc <bt_gatt_check_perm+0x32>

00026620 <bt_gatt_change_aware>:
{
   26620:	b570      	push	{r4, r5, r6, lr}
   26622:	4606      	mov	r6, r0
   26624:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   26626:	f7f2 fd8f 	bl	19148 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2662a:	b910      	cbnz	r0, 26632 <bt_gatt_change_aware+0x12>
		return true;
   2662c:	2401      	movs	r4, #1
}
   2662e:	4620      	mov	r0, r4
   26630:	bd70      	pop	{r4, r5, r6, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   26632:	7a03      	ldrb	r3, [r0, #8]
   26634:	07da      	lsls	r2, r3, #31
   26636:	d5f9      	bpl.n	2662c <bt_gatt_change_aware+0xc>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   26638:	f100 050c 	add.w	r5, r0, #12
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2663c:	4628      	mov	r0, r5
   2663e:	f7ff fe23 	bl	26288 <atomic_get>
   26642:	07c3      	lsls	r3, r0, #31
   26644:	d4f2      	bmi.n	2662c <bt_gatt_change_aware+0xc>
	if (!req) {
   26646:	b90c      	cbnz	r4, 2664c <bt_gatt_change_aware+0x2c>
		return false;
   26648:	2400      	movs	r4, #0
   2664a:	e7f0      	b.n	2662e <bt_gatt_change_aware+0xe>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2664c:	f06f 0102 	mvn.w	r1, #2
   26650:	4628      	mov	r0, r5
   26652:	f7ff fe2e 	bl	262b2 <atomic_and>
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   26656:	f010 0f02 	tst.w	r0, #2
		bt_att_clear_out_of_sync_sent(conn);
   2665a:	4630      	mov	r0, r6
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   2665c:	d006      	beq.n	2666c <bt_gatt_change_aware+0x4c>
		bt_att_clear_out_of_sync_sent(conn);
   2665e:	f7ff fd74 	bl	2614a <bt_att_clear_out_of_sync_sent>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   26662:	2101      	movs	r1, #1
   26664:	4628      	mov	r0, r5
   26666:	f7ff fe15 	bl	26294 <atomic_or>
}
   2666a:	e7e0      	b.n	2662e <bt_gatt_change_aware+0xe>
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   2666c:	f7ff fd6b 	bl	26146 <bt_att_fixed_chan_only>
   26670:	2800      	cmp	r0, #0
   26672:	d0e9      	beq.n	26648 <bt_gatt_change_aware+0x28>
   26674:	4630      	mov	r0, r6
   26676:	f7ff fd81 	bl	2617c <bt_att_out_of_sync_sent_on_fixed>
   2667a:	4604      	mov	r4, r0
   2667c:	2800      	cmp	r0, #0
   2667e:	d0e3      	beq.n	26648 <bt_gatt_change_aware+0x28>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   26680:	f06f 0102 	mvn.w	r1, #2
   26684:	4628      	mov	r0, r5
   26686:	f7ff fe14 	bl	262b2 <atomic_and>
		bt_att_clear_out_of_sync_sent(conn);
   2668a:	4630      	mov	r0, r6
   2668c:	e7e7      	b.n	2665e <bt_gatt_change_aware+0x3e>

0002668e <ccc_delayed_store>:
{
   2668e:	b570      	push	{r4, r5, r6, lr}
		struct bt_conn *conn = ccc_store->conn_list[i];
   26690:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   26694:	4605      	mov	r5, r0
		if (!conn) {
   26696:	b194      	cbz	r4, 266be <ccc_delayed_store+0x30>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   26698:	f104 0690 	add.w	r6, r4, #144	; 0x90
   2669c:	7a20      	ldrb	r0, [r4, #8]
   2669e:	4631      	mov	r1, r6
   266a0:	f7fe fe11 	bl	252c6 <bt_addr_le_is_bonded>
   266a4:	b158      	cbz	r0, 266be <ccc_delayed_store+0x30>
			ccc_store->conn_list[i] = NULL;
   266a6:	2300      	movs	r3, #0
   266a8:	f845 3c08 	str.w	r3, [r5, #-8]
			bt_gatt_store_ccc(conn->id, &conn->le.dst);
   266ac:	7a20      	ldrb	r0, [r4, #8]
   266ae:	4631      	mov	r1, r6
   266b0:	f7f3 fec8 	bl	1a444 <bt_gatt_store_ccc>
			bt_conn_unref(conn);
   266b4:	4620      	mov	r0, r4
}
   266b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   266ba:	f7f0 bf7f 	b.w	175bc <bt_conn_unref>
}
   266be:	bd70      	pop	{r4, r5, r6, pc}

000266c0 <smp_pairing_rsp>:
}
   266c0:	2007      	movs	r0, #7
   266c2:	4770      	bx	lr

000266c4 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   266c4:	f3bf 8f5b 	dmb	ish
   266c8:	6800      	ldr	r0, [r0, #0]
   266ca:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   266ce:	4108      	asrs	r0, r1
}
   266d0:	f000 0001 	and.w	r0, r0, #1
   266d4:	4770      	bx	lr

000266d6 <update_keys_check>:
{
   266d6:	b510      	push	{r4, lr}
   266d8:	4603      	mov	r3, r0
	if (!keys ||
   266da:	b1d9      	cbz	r1, 26714 <update_keys_check+0x3e>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   266dc:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   266de:	f010 0f24 	tst.w	r0, #36	; 0x24
   266e2:	d017      	beq.n	26714 <update_keys_check+0x3e>
	return MIN(req->max_key_size, rsp->max_key_size);
   266e4:	7d1a      	ldrb	r2, [r3, #20]
   266e6:	7b5c      	ldrb	r4, [r3, #13]
	if (keys->enc_size > get_encryption_key_size(smp)) {
   266e8:	7b09      	ldrb	r1, [r1, #12]
   266ea:	42a2      	cmp	r2, r4
   266ec:	bf28      	it	cs
   266ee:	4622      	movcs	r2, r4
   266f0:	4291      	cmp	r1, r2
   266f2:	d901      	bls.n	266f8 <update_keys_check+0x22>
		return false;
   266f4:	2000      	movs	r0, #0
}
   266f6:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   266f8:	0682      	lsls	r2, r0, #26
   266fa:	d404      	bmi.n	26706 <update_keys_check+0x30>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   266fc:	7a18      	ldrb	r0, [r3, #8]
   266fe:	3800      	subs	r0, #0
   26700:	bf18      	it	ne
   26702:	2001      	movne	r0, #1
   26704:	e7f7      	b.n	266f6 <update_keys_check+0x20>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   26706:	2105      	movs	r1, #5
   26708:	1d18      	adds	r0, r3, #4
   2670a:	f7ff ffdb 	bl	266c4 <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   2670e:	2800      	cmp	r0, #0
   26710:	d1f4      	bne.n	266fc <update_keys_check+0x26>
   26712:	e7ef      	b.n	266f4 <update_keys_check+0x1e>
		return true;
   26714:	2001      	movs	r0, #1
   26716:	e7ee      	b.n	266f6 <update_keys_check+0x20>

00026718 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   26718:	2301      	movs	r3, #1
   2671a:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2671c:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2671e:	f3bf 8f5b 	dmb	ish
   26722:	e850 2f00 	ldrex	r2, [r0]
   26726:	401a      	ands	r2, r3
   26728:	e840 2100 	strex	r1, r2, [r0]
   2672c:	2900      	cmp	r1, #0
   2672e:	d1f8      	bne.n	26722 <atomic_clear_bit+0xa>
   26730:	f3bf 8f5b 	dmb	ish
}
   26734:	4770      	bx	lr

00026736 <bt_addr_le_copy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   26736:	680b      	ldr	r3, [r1, #0]
   26738:	6003      	str	r3, [r0, #0]
   2673a:	888b      	ldrh	r3, [r1, #4]
   2673c:	8083      	strh	r3, [r0, #4]
   2673e:	798b      	ldrb	r3, [r1, #6]
   26740:	7183      	strb	r3, [r0, #6]
}
   26742:	4770      	bx	lr

00026744 <bt_smp_aes_cmac>:
{
   26744:	b570      	push	{r4, r5, r6, lr}
   26746:	b0c2      	sub	sp, #264	; 0x108
   26748:	460d      	mov	r5, r1
   2674a:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   2674c:	4601      	mov	r1, r0
   2674e:	aa16      	add	r2, sp, #88	; 0x58
   26750:	4668      	mov	r0, sp
{
   26752:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   26754:	f7fe faf9 	bl	24d4a <tc_cmac_setup>
   26758:	b150      	cbz	r0, 26770 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   2675a:	4632      	mov	r2, r6
   2675c:	4629      	mov	r1, r5
   2675e:	4668      	mov	r0, sp
   26760:	f7fe fb1e 	bl	24da0 <tc_cmac_update>
   26764:	b120      	cbz	r0, 26770 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   26766:	4669      	mov	r1, sp
   26768:	4620      	mov	r0, r4
   2676a:	f7fe fb84 	bl	24e76 <tc_cmac_final>
   2676e:	b918      	cbnz	r0, 26778 <bt_smp_aes_cmac+0x34>
		return -EIO;
   26770:	f06f 0004 	mvn.w	r0, #4
}
   26774:	b042      	add	sp, #264	; 0x108
   26776:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   26778:	2000      	movs	r0, #0
   2677a:	e7fb      	b.n	26774 <bt_smp_aes_cmac+0x30>

0002677c <smp_security_request>:
   2677c:	2007      	movs	r0, #7
   2677e:	4770      	bx	lr

00026780 <smp_send.constprop.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   26780:	b537      	push	{r0, r1, r2, r4, r5, lr}
   26782:	4613      	mov	r3, r2
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   26784:	2200      	movs	r2, #0
   26786:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   26788:	4604      	mov	r4, r0
   2678a:	460d      	mov	r5, r1
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   2678c:	460a      	mov	r2, r1
   2678e:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   26792:	2106      	movs	r1, #6
   26794:	f7ff f8d6 	bl	25944 <bt_l2cap_send_cb>
   26798:	b128      	cbz	r0, 267a6 <smp_send.constprop.0+0x26>
		net_buf_unref(buf);
   2679a:	4628      	mov	r0, r5
}
   2679c:	b003      	add	sp, #12
   2679e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   267a2:	f7f5 be5f 	b.w	1c464 <net_buf_unref>
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   267a6:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   267aa:	2300      	movs	r3, #0
   267ac:	f504 70c0 	add.w	r0, r4, #384	; 0x180
}
   267b0:	b003      	add	sp, #12
   267b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   267b6:	f7fa bf27 	b.w	21608 <k_work_reschedule>

000267ba <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   267ba:	b510      	push	{r4, lr}
   267bc:	1e43      	subs	r3, r0, #1
   267be:	f100 0210 	add.w	r2, r0, #16
   267c2:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   267c4:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   267c8:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   267cc:	701c      	strb	r4, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   267ce:	4283      	cmp	r3, r0
		((uint8_t *)buf)[length - 1 - i] = tmp;
   267d0:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   267d2:	d1f7      	bne.n	267c4 <sys_mem_swap.constprop.0+0xa>
	}
}
   267d4:	bd10      	pop	{r4, pc}

000267d6 <smp_f6>:
{
   267d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   267da:	b097      	sub	sp, #92	; 0x5c
   267dc:	4604      	mov	r4, r0
   267de:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
   267e0:	a805      	add	r0, sp, #20
   267e2:	2210      	movs	r2, #16
{
   267e4:	461d      	mov	r5, r3
   267e6:	e9dd 981f 	ldrd	r9, r8, [sp, #124]	; 0x7c
   267ea:	9f21      	ldr	r7, [sp, #132]	; 0x84
	sys_memcpy_swap(m, n1, 16);
   267ec:	f7f3 ff22 	bl	1a634 <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   267f0:	2210      	movs	r2, #16
   267f2:	4631      	mov	r1, r6
   267f4:	a809      	add	r0, sp, #36	; 0x24
   267f6:	f7f3 ff1d 	bl	1a634 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   267fa:	2210      	movs	r2, #16
   267fc:	4629      	mov	r1, r5
   267fe:	a80d      	add	r0, sp, #52	; 0x34
   26800:	f7f3 ff18 	bl	1a634 <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   26804:	991e      	ldr	r1, [sp, #120]	; 0x78
   26806:	2203      	movs	r2, #3
   26808:	a811      	add	r0, sp, #68	; 0x44
   2680a:	f7f3 ff13 	bl	1a634 <sys_memcpy_swap>
	m[51] = a1->type;
   2680e:	4649      	mov	r1, r9
	memcpy(m + 52, a1->a.val, 6);
   26810:	f8d9 0001 	ldr.w	r0, [r9, #1]
	m[51] = a1->type;
   26814:	f811 3b01 	ldrb.w	r3, [r1], #1
   26818:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   2681c:	9012      	str	r0, [sp, #72]	; 0x48
   2681e:	888b      	ldrh	r3, [r1, #4]
   26820:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   26824:	2206      	movs	r2, #6
   26826:	a812      	add	r0, sp, #72	; 0x48
   26828:	f7f3 ff04 	bl	1a634 <sys_memcpy_swap>
	m[58] = a2->type;
   2682c:	4641      	mov	r1, r8
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   2682e:	2206      	movs	r2, #6
	m[58] = a2->type;
   26830:	f811 3b01 	ldrb.w	r3, [r1], #1
   26834:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   26838:	f8d8 3001 	ldr.w	r3, [r8, #1]
   2683c:	f8cd 304f 	str.w	r3, [sp, #79]	; 0x4f
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   26840:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
	memcpy(m + 59, a2->a.val, 6);
   26844:	888b      	ldrh	r3, [r1, #4]
   26846:	f8ad 3053 	strh.w	r3, [sp, #83]	; 0x53
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   2684a:	f7f3 fef3 	bl	1a634 <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   2684e:	4621      	mov	r1, r4
   26850:	2210      	movs	r2, #16
   26852:	a801      	add	r0, sp, #4
   26854:	f7f3 feee 	bl	1a634 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   26858:	463b      	mov	r3, r7
   2685a:	2241      	movs	r2, #65	; 0x41
   2685c:	a905      	add	r1, sp, #20
   2685e:	a801      	add	r0, sp, #4
   26860:	f7ff ff70 	bl	26744 <bt_smp_aes_cmac>
	if (err) {
   26864:	4604      	mov	r4, r0
   26866:	b910      	cbnz	r0, 2686e <smp_f6+0x98>
	sys_mem_swap(check, 16);
   26868:	4638      	mov	r0, r7
   2686a:	f7ff ffa6 	bl	267ba <sys_mem_swap.constprop.0>
}
   2686e:	4620      	mov	r0, r4
   26870:	b017      	add	sp, #92	; 0x5c
   26872:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00026876 <smp_f4>:
{
   26876:	b5f0      	push	{r4, r5, r6, r7, lr}
   26878:	b097      	sub	sp, #92	; 0x5c
   2687a:	4614      	mov	r4, r2
   2687c:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
   2687e:	2220      	movs	r2, #32
   26880:	4601      	mov	r1, r0
   26882:	a805      	add	r0, sp, #20
{
   26884:	461d      	mov	r5, r3
   26886:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   26888:	f7f3 fed4 	bl	1a634 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   2688c:	2220      	movs	r2, #32
   2688e:	4631      	mov	r1, r6
   26890:	a80d      	add	r0, sp, #52	; 0x34
   26892:	f7f3 fecf 	bl	1a634 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   26896:	4621      	mov	r1, r4
   26898:	2210      	movs	r2, #16
   2689a:	a801      	add	r0, sp, #4
	m[64] = z;
   2689c:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   268a0:	f7f3 fec8 	bl	1a634 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   268a4:	463b      	mov	r3, r7
   268a6:	2241      	movs	r2, #65	; 0x41
   268a8:	a905      	add	r1, sp, #20
   268aa:	a801      	add	r0, sp, #4
   268ac:	f7ff ff4a 	bl	26744 <bt_smp_aes_cmac>
	if (err) {
   268b0:	4604      	mov	r4, r0
   268b2:	b910      	cbnz	r0, 268ba <smp_f4+0x44>
	sys_mem_swap(res, 16);
   268b4:	4638      	mov	r0, r7
   268b6:	f7ff ff80 	bl	267ba <sys_mem_swap.constprop.0>
}
   268ba:	4620      	mov	r0, r4
   268bc:	b017      	add	sp, #92	; 0x5c
   268be:	bdf0      	pop	{r4, r5, r6, r7, pc}

000268c0 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   268c0:	2301      	movs	r3, #1
   268c2:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   268c4:	f3bf 8f5b 	dmb	ish
   268c8:	e850 2f00 	ldrex	r2, [r0]
   268cc:	431a      	orrs	r2, r3
   268ce:	e840 2100 	strex	r1, r2, [r0]
   268d2:	2900      	cmp	r1, #0
   268d4:	d1f8      	bne.n	268c8 <atomic_set_bit+0x8>
   268d6:	f3bf 8f5b 	dmb	ish
}
   268da:	4770      	bx	lr

000268dc <smp_keypress_notif>:
{
   268dc:	b508      	push	{r3, lr}
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   268de:	210e      	movs	r1, #14
   268e0:	f7ff ffee 	bl	268c0 <atomic_set_bit>
}
   268e4:	2000      	movs	r0, #0
   268e6:	bd08      	pop	{r3, pc}

000268e8 <smp_create_pdu.constprop.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   268e8:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   268ea:	1d05      	adds	r5, r0, #4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   268ec:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   268ee:	4628      	mov	r0, r5
   268f0:	2104      	movs	r1, #4
   268f2:	f7ff fee7 	bl	266c4 <atomic_test_bit>
   268f6:	b970      	cbnz	r0, 26916 <smp_create_pdu.constprop.0+0x2e>
		timeout = SMP_TIMEOUT;
   268f8:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   268fc:	2100      	movs	r1, #0
		timeout = K_NO_WAIT;
   268fe:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   26900:	4608      	mov	r0, r1
   26902:	f7ff f81c 	bl	2593e <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   26906:	4604      	mov	r4, r0
   26908:	b938      	cbnz	r0, 2691a <smp_create_pdu.constprop.0+0x32>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   2690a:	2104      	movs	r1, #4
   2690c:	4628      	mov	r0, r5
   2690e:	f7ff ffd7 	bl	268c0 <atomic_set_bit>
}
   26912:	4620      	mov	r0, r4
   26914:	bd70      	pop	{r4, r5, r6, pc}
		timeout = K_NO_WAIT;
   26916:	2200      	movs	r2, #0
   26918:	e7f0      	b.n	268fc <smp_create_pdu.constprop.0+0x14>
   2691a:	2101      	movs	r1, #1
   2691c:	3008      	adds	r0, #8
   2691e:	f7f5 feb7 	bl	1c690 <net_buf_simple_add>
	hdr->code = op;
   26922:	7006      	strb	r6, [r0, #0]
	return buf;
   26924:	e7f5      	b.n	26912 <smp_create_pdu.constprop.0+0x2a>

00026926 <send_pairing_rsp>:
{
   26926:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   26928:	2102      	movs	r1, #2
{
   2692a:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   2692c:	f7ff ffdc 	bl	268e8 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   26930:	4605      	mov	r5, r0
   26932:	b180      	cbz	r0, 26956 <send_pairing_rsp+0x30>
   26934:	2106      	movs	r1, #6
   26936:	3008      	adds	r0, #8
   26938:	f7f5 feaa 	bl	1c690 <net_buf_simple_add>
   2693c:	f8d4 3011 	ldr.w	r3, [r4, #17]
   26940:	6003      	str	r3, [r0, #0]
   26942:	f8b4 3015 	ldrh.w	r3, [r4, #21]
   26946:	8083      	strh	r3, [r0, #4]
	smp_send(smp, rsp_buf, NULL, NULL);
   26948:	2200      	movs	r2, #0
   2694a:	4620      	mov	r0, r4
   2694c:	4629      	mov	r1, r5
   2694e:	f7ff ff17 	bl	26780 <smp_send.constprop.0>
	return 0;
   26952:	2000      	movs	r0, #0
}
   26954:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   26956:	2008      	movs	r0, #8
   26958:	e7fc      	b.n	26954 <send_pairing_rsp+0x2e>

0002695a <smp_send_pairing_random>:
{
   2695a:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   2695c:	2104      	movs	r1, #4
{
   2695e:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   26960:	f7ff ffc2 	bl	268e8 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   26964:	4605      	mov	r5, r0
   26966:	b1a0      	cbz	r0, 26992 <smp_send_pairing_random+0x38>
   26968:	2110      	movs	r1, #16
   2696a:	3008      	adds	r0, #8
   2696c:	f7f5 fe90 	bl	1c690 <net_buf_simple_add>
   26970:	f104 0327 	add.w	r3, r4, #39	; 0x27
   26974:	f104 0237 	add.w	r2, r4, #55	; 0x37
   26978:	f853 1b04 	ldr.w	r1, [r3], #4
   2697c:	f840 1b04 	str.w	r1, [r0], #4
   26980:	4293      	cmp	r3, r2
   26982:	d1f9      	bne.n	26978 <smp_send_pairing_random+0x1e>
	smp_send(smp, rsp_buf, NULL, NULL);
   26984:	4620      	mov	r0, r4
   26986:	2200      	movs	r2, #0
   26988:	4629      	mov	r1, r5
   2698a:	f7ff fef9 	bl	26780 <smp_send.constprop.0>
	return 0;
   2698e:	2000      	movs	r0, #0
}
   26990:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   26992:	2008      	movs	r0, #8
   26994:	e7fc      	b.n	26990 <smp_send_pairing_random+0x36>

00026996 <smp_dhkey_check>:
{
   26996:	b570      	push	{r4, r5, r6, lr}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   26998:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
   2699c:	78db      	ldrb	r3, [r3, #3]
   2699e:	2b01      	cmp	r3, #1
{
   269a0:	4604      	mov	r4, r0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   269a2:	d119      	bne.n	269d8 <smp_dhkey_check+0x42>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   269a4:	688d      	ldr	r5, [r1, #8]
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   269a6:	1d06      	adds	r6, r0, #4
   269a8:	2110      	movs	r1, #16
   269aa:	4630      	mov	r0, r6
   269ac:	f7ff feb4 	bl	26718 <atomic_clear_bit>
   269b0:	462b      	mov	r3, r5
   269b2:	f104 02b7 	add.w	r2, r4, #183	; 0xb7
   269b6:	f105 0110 	add.w	r1, r5, #16
   269ba:	f853 0b04 	ldr.w	r0, [r3], #4
   269be:	f842 0b04 	str.w	r0, [r2], #4
   269c2:	428b      	cmp	r3, r1
   269c4:	d1f9      	bne.n	269ba <smp_dhkey_check+0x24>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   269c6:	2107      	movs	r1, #7
   269c8:	4630      	mov	r0, r6
   269ca:	f7ff fe7b 	bl	266c4 <atomic_test_bit>
   269ce:	b128      	cbz	r0, 269dc <smp_dhkey_check+0x46>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   269d0:	2109      	movs	r1, #9
   269d2:	4630      	mov	r0, r6
   269d4:	f7ff ff74 	bl	268c0 <atomic_set_bit>
}
   269d8:	2000      	movs	r0, #0
   269da:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   269dc:	210a      	movs	r1, #10
   269de:	4630      	mov	r0, r6
   269e0:	f7ff fe70 	bl	266c4 <atomic_test_bit>
   269e4:	2800      	cmp	r0, #0
   269e6:	d1f3      	bne.n	269d0 <smp_dhkey_check+0x3a>
		return compute_and_check_and_send_periph_dhcheck(smp);
   269e8:	4620      	mov	r0, r4
}
   269ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_check_and_send_periph_dhcheck(smp);
   269ee:	f7f4 ba05 	b.w	1adfc <compute_and_check_and_send_periph_dhcheck>

000269f2 <smp_signing_info>:
   269f2:	2007      	movs	r0, #7
   269f4:	4770      	bx	lr

000269f6 <atomic_test_and_clear_bit>:
{
   269f6:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   269f8:	2301      	movs	r3, #1
   269fa:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   269fe:	43ca      	mvns	r2, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   26a00:	f3bf 8f5b 	dmb	ish
   26a04:	e850 3f00 	ldrex	r3, [r0]
   26a08:	ea03 0c02 	and.w	ip, r3, r2
   26a0c:	e840 ce00 	strex	lr, ip, [r0]
   26a10:	f1be 0f00 	cmp.w	lr, #0
   26a14:	d1f6      	bne.n	26a04 <atomic_test_and_clear_bit+0xe>
   26a16:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   26a1a:	420b      	tst	r3, r1
}
   26a1c:	bf14      	ite	ne
   26a1e:	2001      	movne	r0, #1
   26a20:	2000      	moveq	r0, #0
   26a22:	f85d fb04 	ldr.w	pc, [sp], #4

00026a26 <smp_reset>:
{
   26a26:	b538      	push	{r3, r4, r5, lr}
   26a28:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   26a2a:	1d03      	adds	r3, r0, #4
   26a2c:	2500      	movs	r5, #0
   26a2e:	f3bf 8f5b 	dmb	ish
   26a32:	e853 2f00 	ldrex	r2, [r3]
   26a36:	e843 5100 	strex	r1, r5, [r3]
   26a3a:	2900      	cmp	r1, #0
   26a3c:	d1f9      	bne.n	26a32 <smp_reset+0xc>
   26a3e:	f3bf 8f5b 	dmb	ish
	(void)k_work_cancel_delayable(&smp->work);
   26a42:	f504 70c0 	add.w	r0, r4, #384	; 0x180
   26a46:	f7fa fde5 	bl	21614 <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
   26a4a:	7225      	strb	r5, [r4, #8]
   26a4c:	f3bf 8f5b 	dmb	ish
   26a50:	e854 3f00 	ldrex	r3, [r4]
   26a54:	e844 5200 	strex	r2, r5, [r4]
   26a58:	2a00      	cmp	r2, #0
   26a5a:	d1f9      	bne.n	26a50 <smp_reset+0x2a>
   26a5c:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   26a60:	4620      	mov	r0, r4
   26a62:	2101      	movs	r1, #1
}
   26a64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   26a68:	f7ff bf2a 	b.w	268c0 <atomic_set_bit>

00026a6c <smp_c1>:
{
   26a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   26a6e:	b089      	sub	sp, #36	; 0x24
   26a70:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
   26a74:	4605      	mov	r5, r0
	p1[0] = ia->type;
   26a76:	7830      	ldrb	r0, [r6, #0]
   26a78:	f88d 0000 	strb.w	r0, [sp]
	p1[1] = ra->type;
   26a7c:	7838      	ldrb	r0, [r7, #0]
   26a7e:	f88d 0001 	strb.w	r0, [sp, #1]
	memcpy(p1 + 2, preq, 7);
   26a82:	6810      	ldr	r0, [r2, #0]
   26a84:	f8cd 0002 	str.w	r0, [sp, #2]
   26a88:	8890      	ldrh	r0, [r2, #4]
   26a8a:	7992      	ldrb	r2, [r2, #6]
{
   26a8c:	9c10      	ldr	r4, [sp, #64]	; 0x40
	memcpy(p1 + 2, preq, 7);
   26a8e:	f88d 2008 	strb.w	r2, [sp, #8]
	memcpy(p1 + 9, pres, 7);
   26a92:	681a      	ldr	r2, [r3, #0]
   26a94:	f8cd 2009 	str.w	r2, [sp, #9]
   26a98:	889a      	ldrh	r2, [r3, #4]
   26a9a:	799b      	ldrb	r3, [r3, #6]
	memcpy(p1 + 2, preq, 7);
   26a9c:	f8ad 0006 	strh.w	r0, [sp, #6]
	memcpy(p1 + 9, pres, 7);
   26aa0:	f8ad 200d 	strh.w	r2, [sp, #13]
   26aa4:	f88d 300f 	strb.w	r3, [sp, #15]
	while (len--) {
   26aa8:	f101 0c10 	add.w	ip, r1, #16
   26aac:	4620      	mov	r0, r4
   26aae:	466a      	mov	r2, sp
   26ab0:	458c      	cmp	ip, r1
   26ab2:	d124      	bne.n	26afe <smp_c1+0x92>
	err = bt_encrypt_le(k, enc_data, enc_data);
   26ab4:	4622      	mov	r2, r4
   26ab6:	4621      	mov	r1, r4
   26ab8:	4628      	mov	r0, r5
   26aba:	f000 fcb7 	bl	2742c <bt_encrypt_le>
	if (err) {
   26abe:	4603      	mov	r3, r0
   26ac0:	bb70      	cbnz	r0, 26b20 <smp_c1+0xb4>
	memcpy(p2, ra->a.val, 6);
   26ac2:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   26ac6:	f8ad 2014 	strh.w	r2, [sp, #20]
	memcpy(p2 + 6, ia->a.val, 6);
   26aca:	f8d6 2001 	ldr.w	r2, [r6, #1]
	memcpy(p2, ra->a.val, 6);
   26ace:	f8d7 0001 	ldr.w	r0, [r7, #1]
	memcpy(p2 + 6, ia->a.val, 6);
   26ad2:	f8cd 2016 	str.w	r2, [sp, #22]
   26ad6:	f8b6 2005 	ldrh.w	r2, [r6, #5]
	memcpy(p2, ra->a.val, 6);
   26ada:	9004      	str	r0, [sp, #16]
	(void)memset(p2 + 12, 0, 4);
   26adc:	9307      	str	r3, [sp, #28]
	memcpy(p2 + 6, ia->a.val, 6);
   26ade:	f8ad 201a 	strh.w	r2, [sp, #26]
	while (len--) {
   26ae2:	f104 0010 	add.w	r0, r4, #16
   26ae6:	4623      	mov	r3, r4
   26ae8:	a904      	add	r1, sp, #16
   26aea:	4283      	cmp	r3, r0
   26aec:	d110      	bne.n	26b10 <smp_c1+0xa4>
	return bt_encrypt_le(k, enc_data, enc_data);
   26aee:	4622      	mov	r2, r4
   26af0:	4621      	mov	r1, r4
   26af2:	4628      	mov	r0, r5
}
   26af4:	b009      	add	sp, #36	; 0x24
   26af6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_encrypt_le(k, enc_data, enc_data);
   26afa:	f000 bc97 	b.w	2742c <bt_encrypt_le>
		*r++ = *p++ ^ *q++;
   26afe:	f811 3b01 	ldrb.w	r3, [r1], #1
   26b02:	f812 eb01 	ldrb.w	lr, [r2], #1
   26b06:	ea83 030e 	eor.w	r3, r3, lr
   26b0a:	f800 3b01 	strb.w	r3, [r0], #1
   26b0e:	e7cf      	b.n	26ab0 <smp_c1+0x44>
   26b10:	f813 2b01 	ldrb.w	r2, [r3], #1
   26b14:	f811 6b01 	ldrb.w	r6, [r1], #1
   26b18:	4072      	eors	r2, r6
   26b1a:	f803 2c01 	strb.w	r2, [r3, #-1]
   26b1e:	e7e4      	b.n	26aea <smp_c1+0x7e>
}
   26b20:	b009      	add	sp, #36	; 0x24
   26b22:	bdf0      	pop	{r4, r5, r6, r7, pc}

00026b24 <legacy_pairing_confirm>:
{
   26b24:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   26b26:	1d07      	adds	r7, r0, #4
{
   26b28:	b085      	sub	sp, #20
   26b2a:	4605      	mov	r5, r0
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   26b2c:	210a      	movs	r1, #10
   26b2e:	4638      	mov	r0, r7
   26b30:	f7ff fdc8 	bl	266c4 <atomic_test_bit>
   26b34:	bb88      	cbnz	r0, 26b9a <legacy_pairing_confirm+0x76>
			atomic_set_bit(smp->allowed_cmds,
   26b36:	2104      	movs	r1, #4
   26b38:	4628      	mov	r0, r5
   26b3a:	f7ff fec1 	bl	268c0 <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   26b3e:	2103      	movs	r1, #3
	struct bt_conn *conn = smp->chan.chan.conn;
   26b40:	f8d5 40ec 	ldr.w	r4, [r5, #236]	; 0xec
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   26b44:	f7ff fed0 	bl	268e8 <smp_create_pdu.constprop.0>
	if (!buf) {
   26b48:	4606      	mov	r6, r0
   26b4a:	b1c0      	cbz	r0, 26b7e <legacy_pairing_confirm+0x5a>
   26b4c:	2110      	movs	r1, #16
   26b4e:	3008      	adds	r0, #8
   26b50:	f7f5 fd9e 	bl	1c690 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   26b54:	f104 039e 	add.w	r3, r4, #158	; 0x9e
   26b58:	3497      	adds	r4, #151	; 0x97
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   26b5a:	9002      	str	r0, [sp, #8]
   26b5c:	9301      	str	r3, [sp, #4]
   26b5e:	9400      	str	r4, [sp, #0]
   26b60:	f105 0310 	add.w	r3, r5, #16
   26b64:	f105 0209 	add.w	r2, r5, #9
   26b68:	f105 0127 	add.w	r1, r5, #39	; 0x27
   26b6c:	f105 0047 	add.w	r0, r5, #71	; 0x47
   26b70:	f7ff ff7c 	bl	26a6c <smp_c1>
   26b74:	4604      	mov	r4, r0
   26b76:	b120      	cbz	r0, 26b82 <legacy_pairing_confirm+0x5e>
		net_buf_unref(buf);
   26b78:	4630      	mov	r0, r6
   26b7a:	f7f5 fc73 	bl	1c464 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   26b7e:	2008      	movs	r0, #8
   26b80:	e009      	b.n	26b96 <legacy_pairing_confirm+0x72>
	smp_send(smp, buf, NULL, NULL);
   26b82:	4602      	mov	r2, r0
   26b84:	4631      	mov	r1, r6
   26b86:	4628      	mov	r0, r5
   26b88:	f7ff fdfa 	bl	26780 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   26b8c:	4621      	mov	r1, r4
   26b8e:	4638      	mov	r0, r7
   26b90:	f7ff fdc2 	bl	26718 <atomic_clear_bit>
	return 0;
   26b94:	2000      	movs	r0, #0
}
   26b96:	b005      	add	sp, #20
   26b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   26b9a:	2100      	movs	r1, #0
   26b9c:	4638      	mov	r0, r7
   26b9e:	f7ff fe8f 	bl	268c0 <atomic_set_bit>
   26ba2:	e7f7      	b.n	26b94 <legacy_pairing_confirm+0x70>

00026ba4 <bt_smp_request_ltk>:
{
   26ba4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   26ba8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   26bac:	e9cd 2300 	strd	r2, r3, [sp]
   26bb0:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   26bb2:	f7f3 fd65 	bl	1a680 <smp_chan_get>
	if (!smp) {
   26bb6:	4605      	mov	r5, r0
   26bb8:	2800      	cmp	r0, #0
   26bba:	f000 8090 	beq.w	26cde <bt_smp_request_ltk+0x13a>
	if (ediv == 0U && rand == 0U &&
   26bbe:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   26bc2:	1d07      	adds	r7, r0, #4
	if (ediv == 0U && rand == 0U &&
   26bc4:	f1b9 0f00 	cmp.w	r9, #0
   26bc8:	d12a      	bne.n	26c20 <bt_smp_request_ltk+0x7c>
   26bca:	e9dd 2300 	ldrd	r2, r3, [sp]
   26bce:	4313      	orrs	r3, r2
   26bd0:	d126      	bne.n	26c20 <bt_smp_request_ltk+0x7c>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   26bd2:	2103      	movs	r1, #3
   26bd4:	4638      	mov	r0, r7
   26bd6:	f7ff fd75 	bl	266c4 <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   26bda:	b308      	cbz	r0, 26c20 <bt_smp_request_ltk+0x7c>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   26bdc:	2101      	movs	r1, #1
   26bde:	4638      	mov	r0, r7
   26be0:	f7ff fd70 	bl	266c4 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   26be4:	4606      	mov	r6, r0
   26be6:	b1d8      	cbz	r0, 26c20 <bt_smp_request_ltk+0x7c>
	return MIN(req->max_key_size, rsp->max_key_size);
   26be8:	7d2c      	ldrb	r4, [r5, #20]
   26bea:	7b6b      	ldrb	r3, [r5, #13]
   26bec:	429c      	cmp	r4, r3
   26bee:	bf28      	it	cs
   26bf0:	461c      	movcs	r4, r3
   26bf2:	4622      	mov	r2, r4
   26bf4:	f105 0147 	add.w	r1, r5, #71	; 0x47
   26bf8:	4640      	mov	r0, r8
   26bfa:	f000 ff2f 	bl	27a5c <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   26bfe:	2c0f      	cmp	r4, #15
   26c00:	d806      	bhi.n	26c10 <bt_smp_request_ltk+0x6c>
__ssp_bos_icheck3(memset, void *, int)
   26c02:	f1c4 0210 	rsb	r2, r4, #16
   26c06:	4649      	mov	r1, r9
   26c08:	eb08 0004 	add.w	r0, r8, r4
   26c0c:	f000 ff47 	bl	27a9e <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   26c10:	2101      	movs	r1, #1
   26c12:	4638      	mov	r0, r7
   26c14:	f7ff fe54 	bl	268c0 <atomic_set_bit>
}
   26c18:	4630      	mov	r0, r6
   26c1a:	b003      	add	sp, #12
   26c1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   26c20:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   26c24:	b983      	cbnz	r3, 26c48 <bt_smp_request_ltk+0xa4>
					     &conn->le.dst);
   26c26:	f104 0690 	add.w	r6, r4, #144	; 0x90
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   26c2a:	7a21      	ldrb	r1, [r4, #8]
   26c2c:	4632      	mov	r2, r6
   26c2e:	2020      	movs	r0, #32
   26c30:	f7f5 f85a 	bl	1bce8 <bt_keys_find>
   26c34:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
		if (!conn->le.keys) {
   26c38:	b930      	cbnz	r0, 26c48 <bt_smp_request_ltk+0xa4>
			conn->le.keys = bt_keys_find(BT_KEYS_PERIPH_LTK,
   26c3a:	7a21      	ldrb	r1, [r4, #8]
   26c3c:	4632      	mov	r2, r6
   26c3e:	2001      	movs	r0, #1
   26c40:	f7f5 f852 	bl	1bce8 <bt_keys_find>
   26c44:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	if (ediv == 0U && rand == 0U &&
   26c48:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   26c4c:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
	if (ediv == 0U && rand == 0U &&
   26c50:	b9ee      	cbnz	r6, 26c8e <bt_smp_request_ltk+0xea>
   26c52:	e9dd 2300 	ldrd	r2, r3, [sp]
   26c56:	4313      	orrs	r3, r2
   26c58:	d119      	bne.n	26c8e <bt_smp_request_ltk+0xea>
   26c5a:	b388      	cbz	r0, 26cc0 <bt_smp_request_ltk+0x11c>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   26c5c:	89c3      	ldrh	r3, [r0, #14]
   26c5e:	069a      	lsls	r2, r3, #26
   26c60:	d516      	bpl.n	26c90 <bt_smp_request_ltk+0xec>
		enc_size = conn->le.keys->enc_size;
   26c62:	7b04      	ldrb	r4, [r0, #12]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   26c64:	f100 011a 	add.w	r1, r0, #26
   26c68:	4622      	mov	r2, r4
   26c6a:	4640      	mov	r0, r8
   26c6c:	f000 fef6 	bl	27a5c <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   26c70:	2c0f      	cmp	r4, #15
   26c72:	d806      	bhi.n	26c82 <bt_smp_request_ltk+0xde>
__ssp_bos_icheck3(memset, void *, int)
   26c74:	f1c4 0210 	rsb	r2, r4, #16
   26c78:	4631      	mov	r1, r6
   26c7a:	eb08 0004 	add.w	r0, r8, r4
   26c7e:	f000 ff0e 	bl	27a9e <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   26c82:	2101      	movs	r1, #1
   26c84:	4638      	mov	r0, r7
   26c86:	f7ff fe1b 	bl	268c0 <atomic_set_bit>
		return true;
   26c8a:	2601      	movs	r6, #1
   26c8c:	e7c4      	b.n	26c18 <bt_smp_request_ltk+0x74>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   26c8e:	b1b8      	cbz	r0, 26cc0 <bt_smp_request_ltk+0x11c>
   26c90:	89c3      	ldrh	r3, [r0, #14]
   26c92:	07db      	lsls	r3, r3, #31
   26c94:	d514      	bpl.n	26cc0 <bt_smp_request_ltk+0x11c>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   26c96:	2208      	movs	r2, #8
   26c98:	4669      	mov	r1, sp
   26c9a:	3040      	adds	r0, #64	; 0x40
   26c9c:	f000 fece 	bl	27a3c <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   26ca0:	b970      	cbnz	r0, 26cc0 <bt_smp_request_ltk+0x11c>
	    !memcmp(conn->le.keys->periph_ltk.ediv, &ediv, 2)) {
   26ca2:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   26ca6:	2202      	movs	r2, #2
   26ca8:	a90a      	add	r1, sp, #40	; 0x28
   26caa:	3048      	adds	r0, #72	; 0x48
   26cac:	f000 fec6 	bl	27a3c <memcmp>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   26cb0:	4606      	mov	r6, r0
   26cb2:	b928      	cbnz	r0, 26cc0 <bt_smp_request_ltk+0x11c>
		enc_size = conn->le.keys->enc_size;
   26cb4:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
   26cb8:	7b0c      	ldrb	r4, [r1, #12]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   26cba:	314a      	adds	r1, #74	; 0x4a
   26cbc:	4622      	mov	r2, r4
   26cbe:	e7d4      	b.n	26c6a <bt_smp_request_ltk+0xc6>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   26cc0:	210f      	movs	r1, #15
   26cc2:	4638      	mov	r0, r7
   26cc4:	f7ff fcfe 	bl	266c4 <atomic_test_bit>
   26cc8:	b120      	cbz	r0, 26cd4 <bt_smp_request_ltk+0x130>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   26cca:	2202      	movs	r2, #2
   26ccc:	2106      	movs	r1, #6
   26cce:	4620      	mov	r0, r4
   26cd0:	f7f0 feb8 	bl	17a44 <bt_conn_security_changed>
	smp_reset(smp);
   26cd4:	4628      	mov	r0, r5
   26cd6:	f7ff fea6 	bl	26a26 <smp_reset>
	return false;
   26cda:	2600      	movs	r6, #0
   26cdc:	e79c      	b.n	26c18 <bt_smp_request_ltk+0x74>
		return false;
   26cde:	4606      	mov	r6, r0
   26ce0:	e79a      	b.n	26c18 <bt_smp_request_ltk+0x74>

00026ce2 <bt_smp_sign>:
   26ce2:	f06f 0085 	mvn.w	r0, #133	; 0x85
   26ce6:	4770      	bx	lr

00026ce8 <smp_error>:
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   26ce8:	1d03      	adds	r3, r0, #4
{
   26cea:	b573      	push	{r0, r1, r4, r5, r6, lr}
   26cec:	4605      	mov	r5, r0
   26cee:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   26cf0:	4618      	mov	r0, r3
   26cf2:	2103      	movs	r1, #3
   26cf4:	f7ff fce6 	bl	266c4 <atomic_test_bit>
   26cf8:	b1f0      	cbz	r0, 26d38 <smp_error+0x50>
		smp_pairing_complete(smp, reason);
   26cfa:	4631      	mov	r1, r6
   26cfc:	4628      	mov	r0, r5
   26cfe:	f7f4 fbd3 	bl	1b4a8 <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   26d02:	2105      	movs	r1, #5
   26d04:	4628      	mov	r0, r5
   26d06:	f7ff fdef 	bl	268e8 <smp_create_pdu.constprop.0>
	if (!buf) {
   26d0a:	4604      	mov	r4, r0
   26d0c:	b308      	cbz	r0, 26d52 <smp_error+0x6a>
   26d0e:	2101      	movs	r1, #1
   26d10:	3008      	adds	r0, #8
   26d12:	f7f5 fcbd 	bl	1c690 <net_buf_simple_add>
	rsp->reason = reason;
   26d16:	7006      	strb	r6, [r0, #0]
   26d18:	2600      	movs	r6, #0
   26d1a:	f8d5 00ec 	ldr.w	r0, [r5, #236]	; 0xec
   26d1e:	9600      	str	r6, [sp, #0]
   26d20:	4633      	mov	r3, r6
   26d22:	4622      	mov	r2, r4
   26d24:	2106      	movs	r1, #6
   26d26:	f7fe fe0d 	bl	25944 <bt_l2cap_send_cb>
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
   26d2a:	b118      	cbz	r0, 26d34 <smp_error+0x4c>
		net_buf_unref(buf);
   26d2c:	4620      	mov	r0, r4
   26d2e:	f7f5 fb99 	bl	1c464 <net_buf_unref>
	return 0;
   26d32:	4630      	mov	r0, r6
}
   26d34:	b002      	add	sp, #8
   26d36:	bd70      	pop	{r4, r5, r6, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   26d38:	2101      	movs	r1, #1
   26d3a:	4618      	mov	r0, r3
   26d3c:	f7ff fcc2 	bl	266c4 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   26d40:	2800      	cmp	r0, #0
   26d42:	d1da      	bne.n	26cfa <smp_error+0x12>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   26d44:	210f      	movs	r1, #15
   26d46:	4618      	mov	r0, r3
   26d48:	f7ff fcbc 	bl	266c4 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   26d4c:	2800      	cmp	r0, #0
   26d4e:	d1d4      	bne.n	26cfa <smp_error+0x12>
   26d50:	e7d7      	b.n	26d02 <smp_error+0x1a>
		return -ENOBUFS;
   26d52:	f06f 0068 	mvn.w	r0, #104	; 0x68
   26d56:	e7ed      	b.n	26d34 <smp_error+0x4c>

00026d58 <bt_smp_dhkey_ready>:
{
   26d58:	b570      	push	{r4, r5, r6, lr}
   26d5a:	4604      	mov	r4, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   26d5c:	2008      	movs	r0, #8
   26d5e:	f7f3 fc5b 	bl	1a618 <smp_find>
	if (smp) {
   26d62:	4605      	mov	r5, r0
   26d64:	b1e0      	cbz	r0, 26da0 <bt_smp_dhkey_ready+0x48>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   26d66:	1d06      	adds	r6, r0, #4
   26d68:	2108      	movs	r1, #8
   26d6a:	4630      	mov	r0, r6
   26d6c:	f7ff fcd4 	bl	26718 <atomic_clear_bit>
	if (!dhkey) {
   26d70:	b3bc      	cbz	r4, 26de2 <bt_smp_dhkey_ready+0x8a>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   26d72:	2107      	movs	r1, #7
   26d74:	f7ff fcd0 	bl	26718 <atomic_clear_bit>
   26d78:	4623      	mov	r3, r4
   26d7a:	f105 0297 	add.w	r2, r5, #151	; 0x97
   26d7e:	f104 0120 	add.w	r1, r4, #32
   26d82:	f853 0b04 	ldr.w	r0, [r3], #4
   26d86:	f842 0b04 	str.w	r0, [r2], #4
   26d8a:	428b      	cmp	r3, r1
   26d8c:	d1f9      	bne.n	26d82 <bt_smp_dhkey_ready+0x2a>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   26d8e:	210a      	movs	r1, #10
   26d90:	4630      	mov	r0, r6
   26d92:	f7ff fc97 	bl	266c4 <atomic_test_bit>
   26d96:	b170      	cbz	r0, 26db6 <bt_smp_dhkey_ready+0x5e>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   26d98:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   26d9a:	4630      	mov	r0, r6
   26d9c:	f7ff fd90 	bl	268c0 <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   26da0:	2007      	movs	r0, #7
   26da2:	f7f3 fc39 	bl	1a618 <smp_find>
		if (smp) {
   26da6:	4604      	mov	r4, r0
   26da8:	b1e8      	cbz	r0, 26de6 <bt_smp_dhkey_ready+0x8e>
			err = smp_dhkey_generate(smp);
   26daa:	f7f3 fccf 	bl	1a74c <smp_dhkey_generate>
			if (err) {
   26dae:	4601      	mov	r1, r0
   26db0:	b1c8      	cbz	r0, 26de6 <bt_smp_dhkey_ready+0x8e>
				smp_error(smp, err);
   26db2:	4620      	mov	r0, r4
   26db4:	e012      	b.n	26ddc <bt_smp_dhkey_ready+0x84>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   26db6:	2110      	movs	r1, #16
   26db8:	4630      	mov	r0, r6
   26dba:	f7ff fc83 	bl	266c4 <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   26dbe:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   26dc0:	2800      	cmp	r0, #0
   26dc2:	d1ea      	bne.n	26d9a <bt_smp_dhkey_ready+0x42>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   26dc4:	4630      	mov	r0, r6
   26dc6:	f7ff fc7d 	bl	266c4 <atomic_test_bit>
   26dca:	2800      	cmp	r0, #0
   26dcc:	d0e8      	beq.n	26da0 <bt_smp_dhkey_ready+0x48>
		return  compute_and_check_and_send_periph_dhcheck(smp);
   26dce:	4628      	mov	r0, r5
   26dd0:	f7f4 f814 	bl	1adfc <compute_and_check_and_send_periph_dhcheck>
		if (err) {
   26dd4:	4601      	mov	r1, r0
   26dd6:	2800      	cmp	r0, #0
   26dd8:	d0e2      	beq.n	26da0 <bt_smp_dhkey_ready+0x48>
			smp_error(smp, err);
   26dda:	4628      	mov	r0, r5
   26ddc:	f7ff ff84 	bl	26ce8 <smp_error>
   26de0:	e7de      	b.n	26da0 <bt_smp_dhkey_ready+0x48>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   26de2:	210b      	movs	r1, #11
   26de4:	e7f9      	b.n	26dda <bt_smp_dhkey_ready+0x82>
}
   26de6:	bd70      	pop	{r4, r5, r6, pc}

00026de8 <bt_smp_disconnected>:
{
   26de8:	b570      	push	{r4, r5, r6, lr}
   26dea:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   26dec:	f1a0 06ec 	sub.w	r6, r0, #236	; 0xec
	struct bt_keys *keys = chan->conn->le.keys;
   26df0:	f850 3b94 	ldr.w	r3, [r0], #148
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   26df4:	3ce8      	subs	r4, #232	; 0xe8
	struct bt_keys *keys = chan->conn->le.keys;
   26df6:	f8d3 50bc 	ldr.w	r5, [r3, #188]	; 0xbc
	(void)k_work_cancel_delayable(&smp->work);
   26dfa:	f7fa fc0b 	bl	21614 <k_work_cancel_delayable>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   26dfe:	2103      	movs	r1, #3
   26e00:	4620      	mov	r0, r4
   26e02:	f7ff fc5f 	bl	266c4 <atomic_test_bit>
   26e06:	b1a0      	cbz	r0, 26e32 <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   26e08:	2108      	movs	r1, #8
   26e0a:	4630      	mov	r0, r6
   26e0c:	f7f4 fb4c 	bl	1b4a8 <smp_pairing_complete>
	if (keys) {
   26e10:	b13d      	cbz	r5, 26e22 <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   26e12:	89eb      	ldrh	r3, [r5, #14]
   26e14:	b113      	cbz	r3, 26e1c <bt_smp_disconnected+0x34>
   26e16:	7b6b      	ldrb	r3, [r5, #13]
   26e18:	079b      	lsls	r3, r3, #30
   26e1a:	d502      	bpl.n	26e22 <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   26e1c:	4628      	mov	r0, r5
   26e1e:	f7f4 ffc3 	bl	1bda8 <bt_keys_clear>
__ssp_bos_icheck3(memset, void *, int)
   26e22:	4630      	mov	r0, r6
   26e24:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
}
   26e28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   26e2c:	2100      	movs	r1, #0
   26e2e:	f000 be36 	b.w	27a9e <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   26e32:	2101      	movs	r1, #1
   26e34:	4620      	mov	r0, r4
   26e36:	f7ff fc45 	bl	266c4 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   26e3a:	2800      	cmp	r0, #0
   26e3c:	d1e4      	bne.n	26e08 <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   26e3e:	210f      	movs	r1, #15
   26e40:	4620      	mov	r0, r4
   26e42:	f7ff fc3f 	bl	266c4 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   26e46:	2800      	cmp	r0, #0
   26e48:	d1de      	bne.n	26e08 <bt_smp_disconnected+0x20>
   26e4a:	e7e1      	b.n	26e10 <bt_smp_disconnected+0x28>

00026e4c <id_add>:
	bt_id_add(keys);
   26e4c:	f7ef baba 	b.w	163c4 <bt_id_add>

00026e50 <bt_keys_get_type>:
{
   26e50:	b570      	push	{r4, r5, r6, lr}
   26e52:	4604      	mov	r4, r0
   26e54:	460d      	mov	r5, r1
   26e56:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   26e58:	f7f4 ff46 	bl	1bce8 <bt_keys_find>
	if (keys) {
   26e5c:	b938      	cbnz	r0, 26e6e <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   26e5e:	4631      	mov	r1, r6
   26e60:	4628      	mov	r0, r5
   26e62:	f7f4 fef9 	bl	1bc58 <bt_keys_get_addr>
	if (!keys) {
   26e66:	b110      	cbz	r0, 26e6e <bt_keys_get_type+0x1e>
	keys->keys |= type;
   26e68:	89c3      	ldrh	r3, [r0, #14]
   26e6a:	431c      	orrs	r4, r3
   26e6c:	81c4      	strh	r4, [r0, #14]
}
   26e6e:	bd70      	pop	{r4, r5, r6, pc}

00026e70 <bt_keys_add_type>:
	keys->keys |= type;
   26e70:	89c3      	ldrh	r3, [r0, #14]
   26e72:	4319      	orrs	r1, r3
   26e74:	81c1      	strh	r1, [r0, #14]
}
   26e76:	4770      	bx	lr

00026e78 <fixed_data_unref>:
}
   26e78:	4770      	bx	lr

00026e7a <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   26e7a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   26e7c:	6849      	ldr	r1, [r1, #4]
   26e7e:	6809      	ldr	r1, [r1, #0]
   26e80:	f7f5 b8b2 	b.w	1bfe8 <net_buf_alloc_len>

00026e84 <net_buf_simple_pull_le16>:
{
   26e84:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   26e86:	6803      	ldr	r3, [r0, #0]
   26e88:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   26e8a:	2102      	movs	r1, #2
   26e8c:	f7f5 fbc6 	bl	1c61c <net_buf_simple_pull>
}
   26e90:	4620      	mov	r0, r4
   26e92:	bd10      	pop	{r4, pc}

00026e94 <net_buf_simple_headroom>:
	return buf->data - buf->__buf;
   26e94:	6802      	ldr	r2, [r0, #0]
   26e96:	6880      	ldr	r0, [r0, #8]
}
   26e98:	1a10      	subs	r0, r2, r0
   26e9a:	4770      	bx	lr

00026e9c <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   26e9c:	8883      	ldrh	r3, [r0, #4]
   26e9e:	88c2      	ldrh	r2, [r0, #6]
   26ea0:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   26ea2:	6803      	ldr	r3, [r0, #0]
   26ea4:	6880      	ldr	r0, [r0, #8]
   26ea6:	1a18      	subs	r0, r3, r0
}
   26ea8:	1a10      	subs	r0, r2, r0
   26eaa:	4770      	bx	lr

00026eac <net_buf_simple_add_mem>:
{
   26eac:	b538      	push	{r3, r4, r5, lr}
   26eae:	460d      	mov	r5, r1
   26eb0:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   26eb2:	4611      	mov	r1, r2
   26eb4:	f7f5 fbec 	bl	1c690 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   26eb8:	4622      	mov	r2, r4
   26eba:	4629      	mov	r1, r5
}
   26ebc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   26ec0:	f000 bdcc 	b.w	27a5c <memcpy>

00026ec4 <net_buf_simple_add_u8>:
{
   26ec4:	b510      	push	{r4, lr}
   26ec6:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
   26ec8:	2101      	movs	r1, #1
   26eca:	f7f5 fbe1 	bl	1c690 <net_buf_simple_add>
	*u8 = val;
   26ece:	7004      	strb	r4, [r0, #0]
}
   26ed0:	bd10      	pop	{r4, pc}

00026ed2 <adc_context_on_timer_expired>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   26ed2:	f1a0 0308 	sub.w	r3, r0, #8
   26ed6:	f3bf 8f5b 	dmb	ish
   26eda:	e853 2f00 	ldrex	r2, [r3]
   26ede:	1c51      	adds	r1, r2, #1
   26ee0:	e843 1c00 	strex	ip, r1, [r3]
   26ee4:	f1bc 0f00 	cmp.w	ip, #0
   26ee8:	d1f7      	bne.n	26eda <adc_context_on_timer_expired+0x8>
   26eea:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
   26eee:	b91a      	cbnz	r2, 26ef8 <adc_context_on_timer_expired+0x26>
		adc_context_start_sampling(ctx);
   26ef0:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
   26ef4:	f7f5 bc64 	b.w	1c7c0 <adc_context_start_sampling.isra.0>
		ctx->status = -EBUSY;
   26ef8:	f06f 030f 	mvn.w	r3, #15
   26efc:	6683      	str	r3, [r0, #104]	; 0x68
}
   26efe:	4770      	bx	lr

00026f00 <set_on_state>:
	__asm__ volatile(
   26f00:	f04f 0340 	mov.w	r3, #64	; 0x40
   26f04:	f3ef 8211 	mrs	r2, BASEPRI
   26f08:	f383 8812 	msr	BASEPRI_MAX, r3
   26f0c:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   26f10:	6803      	ldr	r3, [r0, #0]
   26f12:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   26f16:	f043 0302 	orr.w	r3, r3, #2
   26f1a:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   26f1c:	f382 8811 	msr	BASEPRI, r2
   26f20:	f3bf 8f6f 	isb	sy
}
   26f24:	4770      	bx	lr

00026f26 <async_start>:
{
   26f26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26f28:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   26f2a:	6904      	ldr	r4, [r0, #16]
{
   26f2c:	4605      	mov	r5, r0
   26f2e:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   26f30:	f04f 0040 	mov.w	r0, #64	; 0x40
   26f34:	f3ef 8c11 	mrs	ip, BASEPRI
   26f38:	f380 8812 	msr	BASEPRI_MAX, r0
   26f3c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   26f40:	260c      	movs	r6, #12
   26f42:	fb06 4601 	mla	r6, r6, r1, r4
   26f46:	6cb0      	ldr	r0, [r6, #72]	; 0x48
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   26f48:	f000 0e07 	and.w	lr, r0, #7
   26f4c:	f1be 0f01 	cmp.w	lr, #1
   26f50:	d110      	bne.n	26f74 <async_start+0x4e>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   26f52:	64b7      	str	r7, [r6, #72]	; 0x48
	int err = 0;
   26f54:	2600      	movs	r6, #0
	__asm__ volatile(
   26f56:	f38c 8811 	msr	BASEPRI, ip
   26f5a:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   26f5e:	b93e      	cbnz	r6, 26f70 <async_start+0x4a>
	subdata->cb = cb;
   26f60:	200c      	movs	r0, #12
   26f62:	4341      	muls	r1, r0
   26f64:	440c      	add	r4, r1
	subdata->user_data = user_data;
   26f66:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   26f6a:	686b      	ldr	r3, [r5, #4]
   26f6c:	585b      	ldr	r3, [r3, r1]
   26f6e:	4798      	blx	r3
}
   26f70:	4630      	mov	r0, r6
   26f72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   26f74:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
   26f78:	4287      	cmp	r7, r0
   26f7a:	bf14      	ite	ne
   26f7c:	f04f 36ff 	movne.w	r6, #4294967295
   26f80:	f06f 0677 	mvneq.w	r6, #119	; 0x77
   26f84:	e7e7      	b.n	26f56 <async_start+0x30>

00026f86 <api_start>:
{
   26f86:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   26f88:	2480      	movs	r4, #128	; 0x80
   26f8a:	9400      	str	r4, [sp, #0]
   26f8c:	f7ff ffcb 	bl	26f26 <async_start>
}
   26f90:	b002      	add	sp, #8
   26f92:	bd10      	pop	{r4, pc}

00026f94 <onoff_started_callback>:
	return &data->mgr[type];
   26f94:	6900      	ldr	r0, [r0, #16]
   26f96:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   26f98:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   26f9c:	2100      	movs	r1, #0
   26f9e:	4710      	bx	r2

00026fa0 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   26fa0:	2000      	movs	r0, #0
   26fa2:	f7f7 bfa7 	b.w	1eef4 <nrfx_clock_stop>

00026fa6 <api_stop>:
	return stop(dev, subsys, CTX_API);
   26fa6:	2280      	movs	r2, #128	; 0x80
   26fa8:	f7f5 be02 	b.w	1cbb0 <stop>

00026fac <blocking_start_callback>:
{
   26fac:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   26fae:	f7f9 be77 	b.w	20ca0 <z_impl_k_sem_give>

00026fb2 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26fb2:	6843      	ldr	r3, [r0, #4]
   26fb4:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   26fb6:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   26fba:	600b      	str	r3, [r1, #0]
}
   26fbc:	2000      	movs	r0, #0
   26fbe:	4770      	bx	lr

00026fc0 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26fc0:	6843      	ldr	r3, [r0, #4]
   26fc2:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   26fc4:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   26fc8:	4042      	eors	r2, r0
   26fca:	400a      	ands	r2, r1
   26fcc:	4042      	eors	r2, r0
    p_reg->OUT = value;
   26fce:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   26fd2:	2000      	movs	r0, #0
   26fd4:	4770      	bx	lr

00026fd6 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26fd6:	6843      	ldr	r3, [r0, #4]
   26fd8:	685b      	ldr	r3, [r3, #4]
}
   26fda:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   26fdc:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   26fe0:	4770      	bx	lr

00026fe2 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26fe2:	6843      	ldr	r3, [r0, #4]
   26fe4:	685b      	ldr	r3, [r3, #4]
}
   26fe6:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   26fe8:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   26fec:	4770      	bx	lr

00026fee <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26fee:	6843      	ldr	r3, [r0, #4]
   26ff0:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   26ff2:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   26ff6:	404b      	eors	r3, r1
    p_reg->OUT = value;
   26ff8:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   26ffc:	2000      	movs	r0, #0
   26ffe:	4770      	bx	lr

00027000 <erase_op>:
{
   27000:	b570      	push	{r4, r5, r6, lr}
   27002:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   27004:	f000 fb12 	bl	2762c <nrfx_nvmc_flash_page_size_get>
	if (e_ctx->enable_time_limit) {
   27008:	7b23      	ldrb	r3, [r4, #12]
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   2700a:	4605      	mov	r5, r0
	if (e_ctx->enable_time_limit) {
   2700c:	b10b      	cbz	r3, 27012 <erase_op+0x12>
		nrf_flash_sync_get_timestamp_begin();
   2700e:	f000 fa6c 	bl	274ea <nrf_flash_sync_get_timestamp_begin>
{
   27012:	2600      	movs	r6, #0
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   27014:	6860      	ldr	r0, [r4, #4]
   27016:	f7f8 fe4d 	bl	1fcb4 <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
   2701a:	68a3      	ldr	r3, [r4, #8]
   2701c:	1b5b      	subs	r3, r3, r5
   2701e:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
   27020:	6863      	ldr	r3, [r4, #4]
   27022:	442b      	add	r3, r5
   27024:	6063      	str	r3, [r4, #4]
		if (e_ctx->enable_time_limit) {
   27026:	7b23      	ldrb	r3, [r4, #12]
		i++;
   27028:	3601      	adds	r6, #1
		if (e_ctx->enable_time_limit) {
   2702a:	b93b      	cbnz	r3, 2703c <erase_op+0x3c>
	} while (e_ctx->len > 0);
   2702c:	68a3      	ldr	r3, [r4, #8]
   2702e:	2b00      	cmp	r3, #0
   27030:	d1f0      	bne.n	27014 <erase_op+0x14>
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
   27032:	68a0      	ldr	r0, [r4, #8]
}
   27034:	3800      	subs	r0, #0
   27036:	bf18      	it	ne
   27038:	2001      	movne	r0, #1
   2703a:	bd70      	pop	{r4, r5, r6, pc}
			if (nrf_flash_sync_check_time_limit(i)) {
   2703c:	4630      	mov	r0, r6
   2703e:	f7f8 f8a9 	bl	1f194 <nrf_flash_sync_check_time_limit>
   27042:	2800      	cmp	r0, #0
   27044:	d0f2      	beq.n	2702c <erase_op+0x2c>
   27046:	e7f4      	b.n	27032 <erase_op+0x32>

00027048 <is_regular_addr_valid>:
{
   27048:	b538      	push	{r3, r4, r5, lr}
   2704a:	4605      	mov	r5, r0
   2704c:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
   2704e:	f000 fae7 	bl	27620 <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
   27052:	2d00      	cmp	r5, #0
   27054:	db07      	blt.n	27066 <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
   27056:	42a8      	cmp	r0, r5
   27058:	d905      	bls.n	27066 <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
   2705a:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
   2705c:	4284      	cmp	r4, r0
   2705e:	bf8c      	ite	hi
   27060:	2000      	movhi	r0, #0
   27062:	2001      	movls	r0, #1
}
   27064:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
   27066:	2000      	movs	r0, #0
   27068:	e7fc      	b.n	27064 <is_regular_addr_valid+0x1c>

0002706a <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
   2706a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2706e:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
   27070:	6883      	ldr	r3, [r0, #8]
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
   27072:	f04f 0800 	mov.w	r8, #0
	info->index = 0U;

	api->page_layout(dev, &layout, &layout_size);
   27076:	691b      	ldr	r3, [r3, #16]
	info->start_offset = 0;
   27078:	f8c4 8000 	str.w	r8, [r4]
{
   2707c:	460d      	mov	r5, r1
   2707e:	4616      	mov	r6, r2
	info->index = 0U;
   27080:	f8c4 8008 	str.w	r8, [r4, #8]
	api->page_layout(dev, &layout, &layout_size);
   27084:	aa01      	add	r2, sp, #4
   27086:	4669      	mov	r1, sp
   27088:	4798      	blx	r3

	while (layout_size--) {
   2708a:	e9dd 7c00 	ldrd	r7, ip, [sp]
   2708e:	4640      	mov	r0, r8
		info->size = layout->pages_size;
   27090:	f107 0e04 	add.w	lr, r7, #4
	while (layout_size--) {
   27094:	4560      	cmp	r0, ip
   27096:	d104      	bne.n	270a2 <flash_get_page_info+0x38>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
   27098:	f06f 0015 	mvn.w	r0, #21
}
   2709c:	b003      	add	sp, #12
   2709e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		info->size = layout->pages_size;
   270a2:	f85e 9030 	ldr.w	r9, [lr, r0, lsl #3]
			index_jmp = index - info->index;
   270a6:	68a1      	ldr	r1, [r4, #8]
			index_jmp = (offs - info->start_offset) / info->size;
   270a8:	6822      	ldr	r2, [r4, #0]
		info->size = layout->pages_size;
   270aa:	f8c4 9004 	str.w	r9, [r4, #4]
		if (offs == 0) {
   270ae:	b985      	cbnz	r5, 270d2 <flash_get_page_info+0x68>
			index_jmp = index - info->index;
   270b0:	1a73      	subs	r3, r6, r1
		index_jmp = MIN(index_jmp, layout->pages_count);
   270b2:	f857 8030 	ldr.w	r8, [r7, r0, lsl #3]
   270b6:	4543      	cmp	r3, r8
   270b8:	bf28      	it	cs
   270ba:	4643      	movcs	r3, r8
		info->start_offset += (index_jmp * info->size);
   270bc:	fb03 2209 	mla	r2, r3, r9, r2
		info->index += index_jmp;
   270c0:	4419      	add	r1, r3
		if (index_jmp < layout->pages_count) {
   270c2:	4598      	cmp	r8, r3
		info->start_offset += (index_jmp * info->size);
   270c4:	6022      	str	r2, [r4, #0]
		info->index += index_jmp;
   270c6:	60a1      	str	r1, [r4, #8]
		if (index_jmp < layout->pages_count) {
   270c8:	f100 0001 	add.w	r0, r0, #1
   270cc:	d9e2      	bls.n	27094 <flash_get_page_info+0x2a>
			return 0;
   270ce:	2000      	movs	r0, #0
   270d0:	e7e4      	b.n	2709c <flash_get_page_info+0x32>
			index_jmp = (offs - info->start_offset) / info->size;
   270d2:	1aab      	subs	r3, r5, r2
   270d4:	fbb3 f3f9 	udiv	r3, r3, r9
   270d8:	e7eb      	b.n	270b2 <flash_get_page_info+0x48>

000270da <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   270da:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
   270dc:	2200      	movs	r2, #0
   270de:	f7ff bfc4 	b.w	2706a <flash_get_page_info>

000270e2 <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   270e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
   270e6:	6883      	ldr	r3, [r0, #8]
{
   270e8:	b086      	sub	sp, #24
	api->page_layout(dev, &layout, &num_blocks);
   270ea:	691b      	ldr	r3, [r3, #16]
{
   270ec:	4688      	mov	r8, r1
   270ee:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   270f0:	a901      	add	r1, sp, #4
   270f2:	aa02      	add	r2, sp, #8
   270f4:	4798      	blx	r3
	off_t off = 0;
   270f6:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
   270f8:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   270fa:	4625      	mov	r5, r4
   270fc:	9b02      	ldr	r3, [sp, #8]
   270fe:	42ab      	cmp	r3, r5
   27100:	d802      	bhi.n	27108 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   27102:	b006      	add	sp, #24
   27104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const struct flash_pages_layout *l = &layout[block];
   27108:	9f01      	ldr	r7, [sp, #4]
   2710a:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		for (i = 0; i < l->pages_count; i++) {
   2710e:	2600      	movs	r6, #0
		page_info.size = l->pages_size;
   27110:	687b      	ldr	r3, [r7, #4]
   27112:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   27114:	683a      	ldr	r2, [r7, #0]
   27116:	42b2      	cmp	r2, r6
   27118:	eb0a 0306 	add.w	r3, sl, r6
   2711c:	d802      	bhi.n	27124 <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   2711e:	3501      	adds	r5, #1
   27120:	469a      	mov	sl, r3
   27122:	e7eb      	b.n	270fc <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   27124:	4649      	mov	r1, r9
   27126:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
   27128:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   2712a:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   2712c:	47c0      	blx	r8
   2712e:	2800      	cmp	r0, #0
   27130:	d0e7      	beq.n	27102 <flash_page_foreach+0x20>
			off += page_info.size;
   27132:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   27134:	3601      	adds	r6, #1
			off += page_info.size;
   27136:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   27138:	e7ec      	b.n	27114 <flash_page_foreach+0x32>

0002713a <uarte_nrfx_config_get>:
	*cfg = data->uart_config;
   2713a:	6902      	ldr	r2, [r0, #16]
{
   2713c:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   2713e:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   27142:	e883 0003 	stmia.w	r3, {r0, r1}
}
   27146:	2000      	movs	r0, #0
   27148:	4770      	bx	lr

0002714a <uarte_nrfx_err_check>:
	return config->uarte_regs;
   2714a:	6843      	ldr	r3, [r0, #4]
   2714c:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   2714e:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   27152:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   27156:	4770      	bx	lr

00027158 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   27158:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   2715a:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   2715c:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2715e:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   27162:	b148      	cbz	r0, 27178 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
   27164:	7c52      	ldrb	r2, [r2, #17]
   27166:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   27168:	2000      	movs	r0, #0
   2716a:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   2716e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   27172:	2201      	movs	r2, #1
   27174:	601a      	str	r2, [r3, #0]
	return 0;
   27176:	4770      	bx	lr
		return -1;
   27178:	f04f 30ff 	mov.w	r0, #4294967295
}
   2717c:	4770      	bx	lr

0002717e <is_tx_ready.isra.0>:
	return config->uarte_regs;
   2717e:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   27180:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   27182:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   27186:	b940      	cbnz	r0, 2719a <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   27188:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2718a:	079b      	lsls	r3, r3, #30
   2718c:	d406      	bmi.n	2719c <is_tx_ready.isra.0+0x1e>
   2718e:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   27192:	3800      	subs	r0, #0
   27194:	bf18      	it	ne
   27196:	2001      	movne	r0, #1
   27198:	4770      	bx	lr
   2719a:	2001      	movs	r0, #1
}
   2719c:	4770      	bx	lr

0002719e <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   2719e:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   271a0:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   271a2:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   271a6:	05c9      	lsls	r1, r1, #23
   271a8:	d518      	bpl.n	271dc <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   271aa:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   271ae:	b1a9      	cbz	r1, 271dc <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   271b0:	f04f 0040 	mov.w	r0, #64	; 0x40
   271b4:	f3ef 8111 	mrs	r1, BASEPRI
   271b8:	f380 8812 	msr	BASEPRI_MAX, r0
   271bc:	f3bf 8f6f 	isb	sy
   271c0:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   271c4:	b130      	cbz	r0, 271d4 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   271c6:	2000      	movs	r0, #0
   271c8:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   271cc:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   271d0:	2001      	movs	r0, #1
   271d2:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
   271d4:	f381 8811 	msr	BASEPRI, r1
   271d8:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   271dc:	6852      	ldr	r2, [r2, #4]
   271de:	06d2      	lsls	r2, r2, #27
   271e0:	d515      	bpl.n	2720e <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
   271e2:	f04f 0140 	mov.w	r1, #64	; 0x40
   271e6:	f3ef 8211 	mrs	r2, BASEPRI
   271ea:	f381 8812 	msr	BASEPRI_MAX, r1
   271ee:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   271f2:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   271f6:	b111      	cbz	r1, 271fe <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   271f8:	2100      	movs	r1, #0
   271fa:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   271fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   27202:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   27206:	f382 8811 	msr	BASEPRI, r2
   2720a:	f3bf 8f6f 	isb	sy
}
   2720e:	4770      	bx	lr

00027210 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   27210:	4770      	bx	lr

00027212 <sys_clock_cycle_get_32>:
{
   27212:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   27214:	f7f6 fd6c 	bl	1dcf0 <z_nrf_rtc_timer_read>
}
   27218:	bd08      	pop	{r3, pc}

0002721a <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   2721a:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   2721c:	6843      	ldr	r3, [r0, #4]
   2721e:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   27220:	7a03      	ldrb	r3, [r0, #8]
   27222:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   27226:	3b01      	subs	r3, #1
   27228:	00db      	lsls	r3, r3, #3
   2722a:	6845      	ldr	r5, [r0, #4]
   2722c:	6814      	ldr	r4, [r2, #0]
   2722e:	441d      	add	r5, r3
   27230:	42ac      	cmp	r4, r5
   27232:	d902      	bls.n	2723a <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
   27234:	f06f 0001 	mvn.w	r0, #1
}
   27238:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   2723a:	7965      	ldrb	r5, [r4, #5]
   2723c:	428d      	cmp	r5, r1
   2723e:	d002      	beq.n	27246 <pinctrl_lookup_state+0x2c>
		(*state)++;
   27240:	3408      	adds	r4, #8
   27242:	6014      	str	r4, [r2, #0]
   27244:	e7f1      	b.n	2722a <pinctrl_lookup_state+0x10>
			return 0;
   27246:	2000      	movs	r0, #0
   27248:	e7f6      	b.n	27238 <pinctrl_lookup_state+0x1e>

0002724a <nrf_gpio_pin_clear>:
{
   2724a:	b507      	push	{r0, r1, r2, lr}
   2724c:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2724e:	a801      	add	r0, sp, #4
   27250:	f7f6 fef4 	bl	1e03c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   27254:	9a01      	ldr	r2, [sp, #4]
   27256:	2301      	movs	r3, #1
   27258:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   2725a:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
   2725e:	b003      	add	sp, #12
   27260:	f85d fb04 	ldr.w	pc, [sp], #4

00027264 <nrf_gpio_pin_set>:
{
   27264:	b507      	push	{r0, r1, r2, lr}
   27266:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   27268:	a801      	add	r0, sp, #4
   2726a:	f7f6 fee7 	bl	1e03c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2726e:	9a01      	ldr	r2, [sp, #4]
   27270:	2301      	movs	r3, #1
   27272:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   27274:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   27278:	b003      	add	sp, #12
   2727a:	f85d fb04 	ldr.w	pc, [sp], #4

0002727e <nrf_gpio_pin_write>:
    if (value == 0)
   2727e:	b909      	cbnz	r1, 27284 <nrf_gpio_pin_write+0x6>
        nrf_gpio_pin_clear(pin_number);
   27280:	f7ff bfe3 	b.w	2724a <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
   27284:	f7ff bfee 	b.w	27264 <nrf_gpio_pin_set>

00027288 <nrf_pin_configure.constprop.0>:
 *
 * @param pin Pin configuration.
 * @param dir Pin direction.
 * @param input Pin input buffer connection.
 */
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
   27288:	b573      	push	{r0, r1, r4, r5, r6, lr}
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input,
				       nrf_gpio_pin_drive_t drive)
{
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
   2728a:	f400 5380 	and.w	r3, r0, #4096	; 0x1000
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   2728e:	2b00      	cmp	r3, #0
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
   27290:	4604      	mov	r4, r0
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
   27292:	f000 033f 	and.w	r3, r0, #63	; 0x3f
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   27296:	a801      	add	r0, sp, #4
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   27298:	bf0b      	itete	eq
   2729a:	4615      	moveq	r5, r2
   2729c:	2501      	movne	r5, #1
   2729e:	460e      	moveq	r6, r1
   272a0:	2600      	movne	r6, #0
	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
   272a2:	9301      	str	r3, [sp, #4]
   272a4:	f7f6 feca 	bl	1e03c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   272a8:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   272aa:	f3c4 1281 	ubfx	r2, r4, #6, #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   272ae:	f404 6470 	and.w	r4, r4, #3840	; 0xf00
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   272b2:	ea44 0282 	orr.w	r2, r4, r2, lsl #2
   272b6:	4332      	orrs	r2, r6
    reg->PIN_CNF[pin_number] = cnf;
   272b8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   272bc:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   272c0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
}
   272c4:	b002      	add	sp, #8
   272c6:	bd70      	pop	{r4, r5, r6, pc}

000272c8 <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   272c8:	b570      	push	{r4, r5, r6, lr}
   272ca:	4615      	mov	r5, r2
   272cc:	4604      	mov	r4, r0
   272ce:	eb00 0681 	add.w	r6, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   272d2:	42b4      	cmp	r4, r6
   272d4:	d101      	bne.n	272da <pinctrl_configure_pins+0x12>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
   272d6:	2000      	movs	r0, #0
}
   272d8:	bd70      	pop	{r4, r5, r6, pc}
		__unused nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   272da:	6823      	ldr	r3, [r4, #0]
		switch (NRF_GET_FUN(pins[i])) {
   272dc:	0c1a      	lsrs	r2, r3, #16
   272de:	2a19      	cmp	r2, #25
   272e0:	d869      	bhi.n	273b6 <pinctrl_configure_pins+0xee>
   272e2:	e8df f002 	tbb	[pc, r2]
   272e6:	180d      	.short	0x180d
   272e8:	34243e1f 	.word	0x34243e1f
   272ec:	6868683e 	.word	0x6868683e
   272f0:	68484368 	.word	0x68484368
   272f4:	68686868 	.word	0x68686868
   272f8:	68686868 	.word	0x68686868
   272fc:	635e594d 	.word	0x635e594d
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
   27300:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   27304:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
   27308:	6820      	ldr	r0, [r4, #0]
        nrf_gpio_pin_set(pin_number);
   2730a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   2730e:	f7ff ffa9 	bl	27264 <nrf_gpio_pin_set>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   27312:	2201      	movs	r2, #1
   27314:	e004      	b.n	27320 <pinctrl_configure_pins+0x58>
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
   27316:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2731a:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   2731e:	2200      	movs	r2, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   27320:	4611      	mov	r1, r2
   27322:	e00f      	b.n	27344 <pinctrl_configure_pins+0x7c>
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
   27324:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   27328:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
   2732c:	e7ec      	b.n	27308 <pinctrl_configure_pins+0x40>
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
   2732e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   27332:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
   27336:	6820      	ldr	r0, [r4, #0]
        nrf_gpio_pin_clear(pin_number);
   27338:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   2733c:	f7ff ff85 	bl	2724a <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   27340:	2200      	movs	r2, #0
   27342:	2101      	movs	r1, #1
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   27344:	6820      	ldr	r0, [r4, #0]
   27346:	f7ff ff9f 	bl	27288 <nrf_pin_configure.constprop.0>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   2734a:	3404      	adds	r4, #4
   2734c:	e7c1      	b.n	272d2 <pinctrl_configure_pins+0xa>
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
   2734e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   27352:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
   27356:	6820      	ldr	r0, [r4, #0]
   27358:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   2735c:	f7ff ff75 	bl	2724a <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   27360:	e7d7      	b.n	27312 <pinctrl_configure_pins+0x4a>
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
   27362:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   27366:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   2736a:	e7d8      	b.n	2731e <pinctrl_configure_pins+0x56>
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
   2736c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   27370:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   27374:	e7d3      	b.n	2731e <pinctrl_configure_pins+0x56>
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
   27376:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2737a:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
   2737e:	e7ce      	b.n	2731e <pinctrl_configure_pins+0x56>
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
   27380:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   27384:	f8c5 3560 	str.w	r3, [r5, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   27388:	6820      	ldr	r0, [r4, #0]
   2738a:	f3c0 3140 	ubfx	r1, r0, #13, #1
   2738e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   27392:	f7ff ff74 	bl	2727e <nrf_gpio_pin_write>
   27396:	e7bc      	b.n	27312 <pinctrl_configure_pins+0x4a>
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
   27398:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2739c:	f8c5 3564 	str.w	r3, [r5, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   273a0:	e7f2      	b.n	27388 <pinctrl_configure_pins+0xc0>
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
   273a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   273a6:	f8c5 3568 	str.w	r3, [r5, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   273aa:	e7ed      	b.n	27388 <pinctrl_configure_pins+0xc0>
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
   273ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   273b0:	f8c5 356c 	str.w	r3, [r5, #1388]	; 0x56c
   273b4:	e7e8      	b.n	27388 <pinctrl_configure_pins+0xc0>
		switch (NRF_GET_FUN(pins[i])) {
   273b6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   273ba:	e78d      	b.n	272d8 <pinctrl_configure_pins+0x10>

000273bc <hci_driver_send>:
{
   273bc:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   273be:	8983      	ldrh	r3, [r0, #12]
{
   273c0:	4605      	mov	r5, r0
	if (!buf->len) {
   273c2:	b373      	cbz	r3, 27422 <hci_driver_send+0x66>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   273c4:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   273c6:	b1a3      	cbz	r3, 273f2 <hci_driver_send+0x36>
   273c8:	2b02      	cmp	r3, #2
   273ca:	d12a      	bne.n	27422 <hci_driver_send+0x66>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   273cc:	f04f 30ff 	mov.w	r0, #4294967295
   273d0:	f04f 31ff 	mov.w	r1, #4294967295
   273d4:	f7f6 fe64 	bl	1e0a0 <multithreading_lock_acquire>
	if (!errcode) {
   273d8:	4604      	mov	r4, r0
   273da:	b940      	cbnz	r0, 273ee <hci_driver_send+0x32>
		errcode = sdc_hci_data_put(acl->data);
   273dc:	68a8      	ldr	r0, [r5, #8]
   273de:	f7e6 fcb2 	bl	dd46 <sdc_hci_data_put>
   273e2:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   273e4:	f7f6 fe64 	bl	1e0b0 <multithreading_lock_release>
		if (errcode) {
   273e8:	b1b4      	cbz	r4, 27418 <hci_driver_send+0x5c>
			receive_signal_raise();
   273ea:	f7f6 ff9b 	bl	1e324 <receive_signal_raise>
}
   273ee:	4620      	mov	r0, r4
   273f0:	bd38      	pop	{r3, r4, r5, pc}
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   273f2:	f04f 30ff 	mov.w	r0, #4294967295
   273f6:	f04f 31ff 	mov.w	r1, #4294967295
   273fa:	f7f6 fe51 	bl	1e0a0 <multithreading_lock_acquire>
	if (!errcode) {
   273fe:	4604      	mov	r4, r0
   27400:	2800      	cmp	r0, #0
   27402:	d1f4      	bne.n	273ee <hci_driver_send+0x32>
		errcode = hci_internal_cmd_put(cmd->data);
   27404:	68a8      	ldr	r0, [r5, #8]
   27406:	f7f7 f82b 	bl	1e460 <hci_internal_cmd_put>
   2740a:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   2740c:	f7f6 fe50 	bl	1e0b0 <multithreading_lock_release>
	if (errcode) {
   27410:	2c00      	cmp	r4, #0
   27412:	d1ec      	bne.n	273ee <hci_driver_send+0x32>
	receive_signal_raise();
   27414:	f7f6 ff86 	bl	1e324 <receive_signal_raise>
		net_buf_unref(buf);
   27418:	4628      	mov	r0, r5
   2741a:	f7f5 f823 	bl	1c464 <net_buf_unref>
   2741e:	2400      	movs	r4, #0
   27420:	e7e5      	b.n	273ee <hci_driver_send+0x32>
	switch (type) {
   27422:	f06f 0415 	mvn.w	r4, #21
   27426:	e7e2      	b.n	273ee <hci_driver_send+0x32>

00027428 <receive_work_handler>:
	hci_driver_receive_process();
   27428:	f7f6 bf84 	b.w	1e334 <hci_driver_receive_process>

0002742c <bt_encrypt_le>:

int bt_encrypt_le(const uint8_t key[BT_ECB_BLOCK_SIZE],
		  const uint8_t plaintext[BT_ECB_BLOCK_SIZE],
		  uint8_t enc_data[BT_ECB_BLOCK_SIZE])
{
   2742c:	b530      	push	{r4, r5, lr}
   2742e:	b08d      	sub	sp, #52	; 0x34
   27430:	460c      	mov	r4, r1
	uint8_t enc_data_le[BT_ECB_BLOCK_SIZE];

	BT_HEXDUMP_DBG(key, BT_ECB_BLOCK_SIZE, "key");
	BT_HEXDUMP_DBG(plaintext, BT_ECB_BLOCK_SIZE, "plaintext");

	sys_memcpy_swap(key_le, key, BT_ECB_BLOCK_SIZE);
   27432:	4601      	mov	r1, r0
   27434:	4668      	mov	r0, sp
{
   27436:	4615      	mov	r5, r2
	sys_memcpy_swap(key_le, key, BT_ECB_BLOCK_SIZE);
   27438:	f7f7 fae0 	bl	1e9fc <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(plaintext_le, plaintext, BT_ECB_BLOCK_SIZE);
   2743c:	4621      	mov	r1, r4
   2743e:	a804      	add	r0, sp, #16
   27440:	f7f7 fadc 	bl	1e9fc <sys_memcpy_swap.constprop.0>

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   27444:	f04f 30ff 	mov.w	r0, #4294967295
   27448:	f04f 31ff 	mov.w	r1, #4294967295
   2744c:	f7f6 fe28 	bl	1e0a0 <multithreading_lock_acquire>

	if (!errcode) {
   27450:	4604      	mov	r4, r0
   27452:	b960      	cbnz	r0, 2746e <bt_encrypt_le+0x42>
		errcode = sdc_soc_ecb_block_encrypt(key_le, plaintext_le, enc_data_le);
   27454:	aa08      	add	r2, sp, #32
   27456:	a904      	add	r1, sp, #16
   27458:	4668      	mov	r0, sp
   2745a:	f7e6 f9f0 	bl	d83e <sdc_soc_ecb_block_encrypt>
   2745e:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   27460:	f7f6 fe26 	bl	1e0b0 <multithreading_lock_release>
	}

	if (!errcode) {
   27464:	b91c      	cbnz	r4, 2746e <bt_encrypt_le+0x42>
		sys_memcpy_swap(enc_data, enc_data_le, BT_ECB_BLOCK_SIZE);
   27466:	a908      	add	r1, sp, #32
   27468:	4628      	mov	r0, r5
   2746a:	f7f7 fac7 	bl	1e9fc <sys_memcpy_swap.constprop.0>

		BT_HEXDUMP_DBG(enc_data, BT_ECB_BLOCK_SIZE, "enc_data");
	}

	return errcode;
}
   2746e:	4620      	mov	r0, r4
   27470:	b00d      	add	sp, #52	; 0x34
   27472:	bd30      	pop	{r4, r5, pc}

00027474 <hci_cmd_le_generate_dhkey>:

uint8_t hci_cmd_le_generate_dhkey(struct bt_hci_cp_le_generate_dhkey *p_params)
{
	return cmd_le_generate_dhkey(p_params->key,
   27474:	2100      	movs	r1, #0
   27476:	f7f7 bc5d 	b.w	1ed34 <cmd_le_generate_dhkey>

0002747a <hci_cmd_le_generate_dhkey_v2>:
				     BT_HCI_LE_KEY_TYPE_GENERATED);
}

uint8_t hci_cmd_le_generate_dhkey_v2(struct bt_hci_cp_le_generate_dhkey_v2 *p_params)
{
	if (p_params->key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
   2747a:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
   2747e:	2901      	cmp	r1, #1
   27480:	d801      	bhi.n	27486 <hci_cmd_le_generate_dhkey_v2+0xc>
		return BT_HCI_ERR_INVALID_PARAM;
	}

	return cmd_le_generate_dhkey(p_params->key, p_params->key_type);
   27482:	f7f7 bc57 	b.w	1ed34 <cmd_le_generate_dhkey>
}
   27486:	2012      	movs	r0, #18
   27488:	4770      	bx	lr

0002748a <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   2748a:	4668      	mov	r0, sp
   2748c:	f020 0107 	bic.w	r1, r0, #7
   27490:	468d      	mov	sp, r1
   27492:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   27494:	f7dc fc0c 	bl	3cb0 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   27498:	f7ec fefc 	bl	14294 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   2749c:	f7ec ffe4 	bl	14468 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   274a0:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   274a4:	4685      	mov	sp, r0
   274a6:	4770      	bx	lr

000274a8 <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   274a8:	4668      	mov	r0, sp
   274aa:	f020 0107 	bic.w	r1, r0, #7
   274ae:	468d      	mov	sp, r1
   274b0:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   274b2:	f7dc fb7b 	bl	3bac <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   274b6:	f7ec feed 	bl	14294 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   274ba:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   274be:	4685      	mov	sp, r0
   274c0:	4770      	bx	lr

000274c2 <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   274c2:	4668      	mov	r0, sp
   274c4:	f020 0107 	bic.w	r1, r0, #7
   274c8:	468d      	mov	sp, r1
   274ca:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   274cc:	f7e5 fed7 	bl	d27e <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   274d0:	f7ec fee0 	bl	14294 <_arch_isr_direct_pm>
   274d4:	f7ec ffc8 	bl	14468 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   274d8:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   274dc:	4685      	mov	sp, r0
   274de:	4770      	bx	lr

000274e0 <nrfx_clock_enable>:
}
   274e0:	4770      	bx	lr

000274e2 <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   274e2:	f7dd b839 	b.w	4558 <MPSL_IRQ_CLOCK_Handler>

000274e6 <nrf_flash_sync_is_required>:
	return mpsl_is_initialized();
   274e6:	f7dd bbe7 	b.w	4cb8 <mpsl_is_initialized>

000274ea <nrf_flash_sync_get_timestamp_begin>:
}
   274ea:	4770      	bx	lr

000274ec <nrf52_errata_108>:
            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   274ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   274f0:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
   274f4:	1c42      	adds	r2, r0, #1
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   274f6:	bf04      	itt	eq
   274f8:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
   274fc:	f893 0fe0 	ldrbeq.w	r0, [r3, #4064]	; 0xfe0
}
   27500:	1f83      	subs	r3, r0, #6
   27502:	4258      	negs	r0, r3
   27504:	4158      	adcs	r0, r3
   27506:	4770      	bx	lr

00027508 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   27508:	4700      	bx	r0

0002750a <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   2750a:	f000 b9a4 	b.w	27856 <z_impl_k_busy_wait>

0002750e <nrf_gpio_pin_present_check>:
    switch (port)
   2750e:	0943      	lsrs	r3, r0, #5
   27510:	bf0c      	ite	eq
   27512:	f04f 33ff 	moveq.w	r3, #4294967295
   27516:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   27518:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   2751c:	fa23 f000 	lsr.w	r0, r3, r0
}
   27520:	f000 0001 	and.w	r0, r0, #1
   27524:	4770      	bx	lr

00027526 <pin_is_task_output>:
{
   27526:	b508      	push	{r3, lr}
   27528:	4602      	mov	r2, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   2752a:	f7f8 f805 	bl	1f538 <pin_is_output>
   2752e:	b110      	cbz	r0, 27536 <pin_is_task_output+0x10>
   27530:	4610      	mov	r0, r2
   27532:	f7f7 ffeb 	bl	1f50c <pin_in_use_by_te>
}
   27536:	f000 0001 	and.w	r0, r0, #1
   2753a:	bd08      	pop	{r3, pc}

0002753c <nrf_gpiote_in_event_get>:
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   2753c:	0080      	lsls	r0, r0, #2
}
   2753e:	f500 7080 	add.w	r0, r0, #256	; 0x100
   27542:	4770      	bx	lr

00027544 <nrf_gpio_reconfigure>:
{
   27544:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   27548:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2754a:	a801      	add	r0, sp, #4
{
   2754c:	460e      	mov	r6, r1
   2754e:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
   27552:	4690      	mov	r8, r2
   27554:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   27556:	f7f8 f871 	bl	1f63c <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2755a:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2755c:	f1b8 0f00 	cmp.w	r8, #0
   27560:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   27564:	bf14      	ite	ne
   27566:	2302      	movne	r3, #2
   27568:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2756a:	2e00      	cmp	r6, #0
   2756c:	bf18      	it	ne
   2756e:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   27572:	2d00      	cmp	r5, #0
   27574:	bf14      	ite	ne
   27576:	210c      	movne	r1, #12
   27578:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   2757a:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2757c:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   27580:	bf14      	ite	ne
   27582:	f44f 61e0 	movne.w	r1, #1792	; 0x700
   27586:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   27588:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2758a:	ea43 0301 	orr.w	r3, r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2758e:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   27592:	bf14      	ite	ne
   27594:	f44f 3140 	movne.w	r1, #196608	; 0x30000
   27598:	2100      	moveq	r1, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2759a:	430b      	orrs	r3, r1
    cnf &= ~to_update;
   2759c:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   275a0:	b106      	cbz	r6, 275a4 <nrf_gpio_reconfigure+0x60>
   275a2:	7836      	ldrb	r6, [r6, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   275a4:	f1b8 0f00 	cmp.w	r8, #0
   275a8:	d003      	beq.n	275b2 <nrf_gpio_reconfigure+0x6e>
   275aa:	f898 8000 	ldrb.w	r8, [r8]
   275ae:	ea4f 0848 	mov.w	r8, r8, lsl #1
   275b2:	431e      	orrs	r6, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   275b4:	b10d      	cbz	r5, 275ba <nrf_gpio_reconfigure+0x76>
   275b6:	782d      	ldrb	r5, [r5, #0]
   275b8:	00ad      	lsls	r5, r5, #2
   275ba:	ea46 0608 	orr.w	r6, r6, r8
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   275be:	b10c      	cbz	r4, 275c4 <nrf_gpio_reconfigure+0x80>
   275c0:	7822      	ldrb	r2, [r4, #0]
   275c2:	0214      	lsls	r4, r2, #8
   275c4:	4335      	orrs	r5, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   275c6:	b10f      	cbz	r7, 275cc <nrf_gpio_reconfigure+0x88>
   275c8:	783f      	ldrb	r7, [r7, #0]
   275ca:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   275cc:	432c      	orrs	r4, r5
   275ce:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
   275d0:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
   275d4:	b002      	add	sp, #8
   275d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000275da <nrf_gpio_cfg_sense_set>:
{
   275da:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   275dc:	f10d 030f 	add.w	r3, sp, #15
   275e0:	9301      	str	r3, [sp, #4]
   275e2:	2300      	movs	r3, #0
{
   275e4:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   275e8:	9300      	str	r3, [sp, #0]
   275ea:	461a      	mov	r2, r3
   275ec:	4619      	mov	r1, r3
   275ee:	f7ff ffa9 	bl	27544 <nrf_gpio_reconfigure>
}
   275f2:	b005      	add	sp, #20
   275f4:	f85d fb04 	ldr.w	pc, [sp], #4

000275f8 <is_valid_address>:
{
   275f8:	4603      	mov	r3, r0
   275fa:	4608      	mov	r0, r1
   275fc:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   27600:	690a      	ldr	r2, [r1, #16]
    return p_reg->CODESIZE;
   27602:	6949      	ldr	r1, [r1, #20]
    return flash_page_size_get() * flash_page_count_get();
   27604:	434a      	muls	r2, r1
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   27606:	4293      	cmp	r3, r2
   27608:	d308      	bcc.n	2761c <is_valid_address+0x24>
    if (uicr_allowed &&
   2760a:	b140      	cbz	r0, 2761e <is_valid_address+0x26>
        (addr - (uint32_t)NRF_UICR) < sizeof(NRF_UICR_Type))
   2760c:	f1a3 2010 	sub.w	r0, r3, #268439552	; 0x10001000
    if (uicr_allowed &&
   27610:	f5b0 7f04 	cmp.w	r0, #528	; 0x210
   27614:	bf2c      	ite	cs
   27616:	2000      	movcs	r0, #0
   27618:	2001      	movcc	r0, #1
   2761a:	4770      	bx	lr
        return true;
   2761c:	2001      	movs	r0, #1
}
   2761e:	4770      	bx	lr

00027620 <nrfx_nvmc_flash_size_get>:
    return p_reg->CODEPAGESIZE;
   27620:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   27624:	691a      	ldr	r2, [r3, #16]
    return p_reg->CODESIZE;
   27626:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   27628:	4350      	muls	r0, r2
   2762a:	4770      	bx	lr

0002762c <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
   2762c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   27630:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   27632:	4770      	bx	lr

00027634 <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
   27634:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   27638:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   2763a:	4770      	bx	lr

0002763c <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   2763c:	f7f8 bbaa 	b.w	1fd94 <_DoInit>

00027640 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   27640:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   27642:	f7ff fffb 	bl	2763c <SEGGER_RTT_Init>

	return 0;
}
   27646:	2000      	movs	r0, #0
   27648:	bd08      	pop	{r3, pc}

0002764a <z_device_state_init>:
}
   2764a:	4770      	bx	lr

0002764c <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   2764c:	b138      	cbz	r0, 2765e <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   2764e:	68c3      	ldr	r3, [r0, #12]
   27650:	8818      	ldrh	r0, [r3, #0]
   27652:	f3c0 0008 	ubfx	r0, r0, #0, #9
   27656:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   2765a:	4258      	negs	r0, r3
   2765c:	4158      	adcs	r0, r3
}
   2765e:	4770      	bx	lr

00027660 <z_early_memset>:
__ssp_bos_icheck3(memset, void *, int)
   27660:	f000 ba1d 	b.w	27a9e <memset>

00027664 <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   27664:	f000 b9fa 	b.w	27a5c <memcpy>

00027668 <k_heap_init>:
{
   27668:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   2766a:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   2766e:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   27672:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   27674:	f7eb b944 	b.w	12900 <sys_heap_init>

00027678 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   27678:	f3ef 8005 	mrs	r0, IPSR
}
   2767c:	3800      	subs	r0, #0
   2767e:	bf18      	it	ne
   27680:	2001      	movne	r0, #1
   27682:	4770      	bx	lr

00027684 <z_impl_k_thread_name_set>:
}
   27684:	f06f 0057 	mvn.w	r0, #87	; 0x57
   27688:	4770      	bx	lr

0002768a <k_thread_name_get>:
}
   2768a:	2000      	movs	r0, #0
   2768c:	4770      	bx	lr

0002768e <z_impl_k_thread_start>:
	z_sched_start(thread);
   2768e:	f7fa bb87 	b.w	21da0 <z_sched_start>

00027692 <z_pm_save_idle_exit>:
{
   27692:	b508      	push	{r3, lr}
	pm_system_resume();
   27694:	f7ec fbde 	bl	13e54 <pm_system_resume>
}
   27698:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   2769c:	f7ff bdb8 	b.w	27210 <sys_clock_idle_exit>

000276a0 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   276a0:	f990 300e 	ldrsb.w	r3, [r0, #14]
   276a4:	428b      	cmp	r3, r1
   276a6:	d001      	beq.n	276ac <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   276a8:	f7fa bcce 	b.w	22048 <z_set_prio>
}
   276ac:	2000      	movs	r0, #0
   276ae:	4770      	bx	lr

000276b0 <z_impl_k_mutex_init>:
{
   276b0:	4603      	mov	r3, r0
	mutex->owner = NULL;
   276b2:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   276b4:	e9c3 0002 	strd	r0, r0, [r3, #8]
   276b8:	e9c3 3300 	strd	r3, r3, [r3]
}
   276bc:	4770      	bx	lr

000276be <z_queue_node_peek>:
{
   276be:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   276c0:	4604      	mov	r4, r0
   276c2:	b130      	cbz	r0, 276d2 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   276c4:	6802      	ldr	r2, [r0, #0]
   276c6:	0793      	lsls	r3, r2, #30
   276c8:	d003      	beq.n	276d2 <z_queue_node_peek+0x14>
		ret = anode->data;
   276ca:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   276cc:	b109      	cbz	r1, 276d2 <z_queue_node_peek+0x14>
			k_free(anode);
   276ce:	f000 f9ad 	bl	27a2c <k_free>
}
   276d2:	4620      	mov	r0, r4
   276d4:	bd10      	pop	{r4, pc}

000276d6 <z_impl_k_queue_init>:
	list->head = NULL;
   276d6:	2300      	movs	r3, #0
	list->tail = NULL;
   276d8:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   276dc:	6083      	str	r3, [r0, #8]
   276de:	f100 030c 	add.w	r3, r0, #12
   276e2:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   276e6:	f100 0314 	add.w	r3, r0, #20
   276ea:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   276ee:	4770      	bx	lr

000276f0 <k_queue_append>:
{
   276f0:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   276f2:	2301      	movs	r3, #1
   276f4:	9300      	str	r3, [sp, #0]
   276f6:	2300      	movs	r3, #0
{
   276f8:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   276fa:	4619      	mov	r1, r3
   276fc:	f7f9 f99a 	bl	20a34 <queue_insert>
}
   27700:	b003      	add	sp, #12
   27702:	f85d fb04 	ldr.w	pc, [sp], #4

00027706 <k_queue_prepend>:
{
   27706:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   27708:	2300      	movs	r3, #0
{
   2770a:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   2770c:	9300      	str	r3, [sp, #0]
   2770e:	4619      	mov	r1, r3
   27710:	f7f9 f990 	bl	20a34 <queue_insert>
}
   27714:	b003      	add	sp, #12
   27716:	f85d fb04 	ldr.w	pc, [sp], #4

0002771a <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   2771a:	b15a      	cbz	r2, 27734 <z_impl_k_sem_init+0x1a>
   2771c:	428a      	cmp	r2, r1
   2771e:	d309      	bcc.n	27734 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   27720:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   27724:	e9c0 1202 	strd	r1, r2, [r0, #8]
   27728:	e9c0 0000 	strd	r0, r0, [r0]
   2772c:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   27730:	2000      	movs	r0, #0
   27732:	4770      	bx	lr
		return -EINVAL;
   27734:	f06f 0015 	mvn.w	r0, #21
}
   27738:	4770      	bx	lr

0002773a <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   2773a:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   2773c:	2301      	movs	r3, #1
   2773e:	408b      	lsls	r3, r1
   27740:	ea22 0303 	bic.w	r3, r2, r3
   27744:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   27746:	fa22 f001 	lsr.w	r0, r2, r1
}
   2774a:	f000 0001 	and.w	r0, r0, #1
   2774e:	4770      	bx	lr

00027750 <unschedule_locked>:
{
   27750:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   27752:	2103      	movs	r1, #3
{
   27754:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   27756:	300c      	adds	r0, #12
   27758:	f7ff ffef 	bl	2773a <flag_test_and_clear>
   2775c:	4604      	mov	r4, r0
   2775e:	b118      	cbz	r0, 27768 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   27760:	f105 0010 	add.w	r0, r5, #16
   27764:	f7fb f96c 	bl	22a40 <z_abort_timeout>
}
   27768:	4620      	mov	r0, r4
   2776a:	bd38      	pop	{r3, r4, r5, pc}

0002776c <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   2776c:	b120      	cbz	r0, 27778 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   2776e:	2200      	movs	r2, #0
   27770:	4611      	mov	r1, r2
   27772:	3088      	adds	r0, #136	; 0x88
   27774:	f7fa bffa 	b.w	2276c <z_sched_wake>
}
   27778:	4770      	bx	lr

0002777a <cancel_async_locked>:
	return (*flagp & BIT(bit)) != 0U;
   2777a:	68c3      	ldr	r3, [r0, #12]
{
   2777c:	b570      	push	{r4, r5, r6, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2777e:	f3c3 0540 	ubfx	r5, r3, #1, #1
   27782:	079b      	lsls	r3, r3, #30
{
   27784:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   27786:	d416      	bmi.n	277b6 <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   27788:	6886      	ldr	r6, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   2778a:	2102      	movs	r1, #2
   2778c:	300c      	adds	r0, #12
   2778e:	f7ff ffd4 	bl	2773a <flag_test_and_clear>
   27792:	b180      	cbz	r0, 277b6 <cancel_async_locked+0x3c>
	return list->head;
   27794:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   27798:	b16a      	cbz	r2, 277b6 <cancel_async_locked+0x3c>
   2779a:	4294      	cmp	r4, r2
   2779c:	d11b      	bne.n	277d6 <cancel_async_locked+0x5c>
	return node->next;
   2779e:	6822      	ldr	r2, [r4, #0]
	return list->tail;
   277a0:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
Z_GENLIST_REMOVE(slist, snode)
   277a4:	b98d      	cbnz	r5, 277ca <cancel_async_locked+0x50>
   277a6:	428c      	cmp	r4, r1
	list->head = node;
   277a8:	f8c6 2080 	str.w	r2, [r6, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   277ac:	d101      	bne.n	277b2 <cancel_async_locked+0x38>
	list->tail = node;
   277ae:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
	parent->next = child;
   277b2:	2300      	movs	r3, #0
   277b4:	6023      	str	r3, [r4, #0]
	return *flagp;
   277b6:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   277b8:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   277bc:	bf1e      	ittt	ne
   277be:	f043 0302 	orrne.w	r3, r3, #2
   277c2:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   277c4:	f003 000f 	andne.w	r0, r3, #15
}
   277c8:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_REMOVE(slist, snode)
   277ca:	428c      	cmp	r4, r1
	parent->next = child;
   277cc:	602a      	str	r2, [r5, #0]
	list->tail = node;
   277ce:	bf08      	it	eq
   277d0:	f8c6 5084 	streq.w	r5, [r6, #132]	; 0x84
}
   277d4:	e7ed      	b.n	277b2 <cancel_async_locked+0x38>
	return node->next;
   277d6:	4615      	mov	r5, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   277d8:	6812      	ldr	r2, [r2, #0]
   277da:	e7dd      	b.n	27798 <cancel_async_locked+0x1e>

000277dc <k_work_delayable_busy_get>:
   277dc:	f7f9 bd24 	b.w	21228 <k_work_busy_get>

000277e0 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   277e0:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   277e4:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   277e8:	4283      	cmp	r3, r0
		return b2 - b1;
   277ea:	bf14      	ite	ne
   277ec:	1ac0      	subne	r0, r0, r3
	return 0;
   277ee:	2000      	moveq	r0, #0
}
   277f0:	4770      	bx	lr

000277f2 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   277f2:	4603      	mov	r3, r0
   277f4:	b920      	cbnz	r0, 27800 <z_reschedule_irqlock+0xe>
   277f6:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   277fa:	b90a      	cbnz	r2, 27800 <z_reschedule_irqlock+0xe>
   277fc:	f7ec bd78 	b.w	142f0 <arch_swap>
   27800:	f383 8811 	msr	BASEPRI, r3
   27804:	f3bf 8f6f 	isb	sy
}
   27808:	4770      	bx	lr

0002780a <z_reschedule_unlocked>:
	__asm__ volatile(
   2780a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2780e:	f3ef 8011 	mrs	r0, BASEPRI
   27812:	f383 8812 	msr	BASEPRI_MAX, r3
   27816:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2781a:	f7ff bfea 	b.w	277f2 <z_reschedule_irqlock>

0002781e <z_priq_dumb_best>:
{
   2781e:	4603      	mov	r3, r0
	return list->head == list;
   27820:	6800      	ldr	r0, [r0, #0]
}
   27822:	4283      	cmp	r3, r0
   27824:	bf08      	it	eq
   27826:	2000      	moveq	r0, #0
   27828:	4770      	bx	lr

0002782a <z_unpend_all>:
{
   2782a:	b538      	push	{r3, r4, r5, lr}
   2782c:	4605      	mov	r5, r0
	int need_sched = 0;
   2782e:	2000      	movs	r0, #0
   27830:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27832:	42a5      	cmp	r5, r4
   27834:	d000      	beq.n	27838 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   27836:	b904      	cbnz	r4, 2783a <z_unpend_all+0x10>
}
   27838:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   2783a:	4620      	mov	r0, r4
   2783c:	f7fa f910 	bl	21a60 <z_unpend_thread>
		z_ready_thread(thread);
   27840:	4620      	mov	r0, r4
   27842:	f7fa fa77 	bl	21d34 <z_ready_thread>
		need_sched = 1;
   27846:	2001      	movs	r0, #1
   27848:	e7f2      	b.n	27830 <z_unpend_all+0x6>

0002784a <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   2784a:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   2784c:	f7fb fa46 	bl	22cdc <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   27850:	bd08      	pop	{r3, pc}

00027852 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   27852:	f7fb ba43 	b.w	22cdc <sys_clock_tick_get>

00027856 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   27856:	b108      	cbz	r0, 2785c <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   27858:	f7ed ba64 	b.w	14d24 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   2785c:	4770      	bx	lr

0002785e <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2785e:	f1b1 3fff 	cmp.w	r1, #4294967295
   27862:	bf08      	it	eq
   27864:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   27868:	b538      	push	{r3, r4, r5, lr}
   2786a:	4605      	mov	r5, r0
   2786c:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2786e:	d01d      	beq.n	278ac <sys_clock_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   27870:	ea51 0300 	orrs.w	r3, r1, r0
   27874:	d103      	bne.n	2787e <sys_clock_timeout_end_calc+0x20>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   27876:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   2787a:	f7fb ba2f 	b.w	22cdc <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   2787e:	f06f 0301 	mvn.w	r3, #1
   27882:	1a18      	subs	r0, r3, r0
   27884:	f04f 33ff 	mov.w	r3, #4294967295
   27888:	eb63 0101 	sbc.w	r1, r3, r1
   2788c:	2900      	cmp	r1, #0
   2788e:	da0c      	bge.n	278aa <sys_clock_timeout_end_calc+0x4c>
		return sys_clock_tick_get() + MAX(1, dt);
   27890:	f7fb fa24 	bl	22cdc <sys_clock_tick_get>
   27894:	2d01      	cmp	r5, #1
   27896:	4622      	mov	r2, r4
   27898:	f174 0400 	sbcs.w	r4, r4, #0
   2789c:	462b      	mov	r3, r5
   2789e:	bfbc      	itt	lt
   278a0:	2301      	movlt	r3, #1
   278a2:	2200      	movlt	r2, #0
   278a4:	1818      	adds	r0, r3, r0
   278a6:	eb41 0102 	adc.w	r1, r1, r2
}
   278aa:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   278ac:	f04f 30ff 	mov.w	r0, #4294967295
   278b0:	4601      	mov	r1, r0
   278b2:	e7fa      	b.n	278aa <sys_clock_timeout_end_calc+0x4c>

000278b4 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   278b4:	b510      	push	{r4, lr}
   278b6:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   278b8:	f7fb f8c2 	bl	22a40 <z_abort_timeout>

	if (inactive) {
   278bc:	b9b0      	cbnz	r0, 278ec <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   278be:	6a63      	ldr	r3, [r4, #36]	; 0x24
   278c0:	b10b      	cbz	r3, 278c6 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   278c2:	4620      	mov	r0, r4
   278c4:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   278c6:	f104 0018 	add.w	r0, r4, #24
   278ca:	f7fa fcf3 	bl	222b4 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   278ce:	b168      	cbz	r0, 278ec <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   278d0:	f7fa fa30 	bl	21d34 <z_ready_thread>
   278d4:	f04f 0340 	mov.w	r3, #64	; 0x40
   278d8:	f3ef 8011 	mrs	r0, BASEPRI
   278dc:	f383 8812 	msr	BASEPRI_MAX, r3
   278e0:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   278e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   278e8:	f7ff bf83 	b.w	277f2 <z_reschedule_irqlock>
   278ec:	bd10      	pop	{r4, pc}

000278ee <add_event>:
{
   278ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   278f0:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   278f2:	e9d0 1300 	ldrd	r1, r3, [r0]
   278f6:	4288      	cmp	r0, r1
   278f8:	4604      	mov	r4, r0
   278fa:	d00d      	beq.n	27918 <add_event+0x2a>
	if ((pending == NULL) ||
   278fc:	b163      	cbz	r3, 27918 <add_event+0x2a>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   278fe:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   27900:	b100      	cbz	r0, 27904 <add_event+0x16>
   27902:	3860      	subs	r0, #96	; 0x60
   27904:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   27908:	4639      	mov	r1, r7
   2790a:	f7ff ff69 	bl	277e0 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   2790e:	2800      	cmp	r0, #0
   27910:	dc02      	bgt.n	27918 <add_event+0x2a>
	return list->head == list;
   27912:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27914:	42b4      	cmp	r4, r6
   27916:	d109      	bne.n	2792c <add_event+0x3e>
	sys_dnode_t *const tail = list->tail;
   27918:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   2791a:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   2791e:	601d      	str	r5, [r3, #0]
	list->tail = node;
   27920:	6065      	str	r5, [r4, #4]
}
   27922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   27924:	6863      	ldr	r3, [r4, #4]
   27926:	42b3      	cmp	r3, r6
   27928:	d0f6      	beq.n	27918 <add_event+0x2a>
   2792a:	6836      	ldr	r6, [r6, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2792c:	2e00      	cmp	r6, #0
   2792e:	d0f3      	beq.n	27918 <add_event+0x2a>
		if (z_sched_prio_cmp(poller_thread(poller),
   27930:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   27932:	b101      	cbz	r1, 27936 <add_event+0x48>
   27934:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   27936:	4638      	mov	r0, r7
   27938:	f7ff ff52 	bl	277e0 <z_sched_prio_cmp>
   2793c:	2800      	cmp	r0, #0
   2793e:	ddf1      	ble.n	27924 <add_event+0x36>
	sys_dnode_t *const prev = successor->prev;
   27940:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   27942:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   27946:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   27948:	6075      	str	r5, [r6, #4]
			return;
   2794a:	e7ea      	b.n	27922 <add_event+0x34>

0002794c <signal_poll_event>:
{
   2794c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   27950:	6884      	ldr	r4, [r0, #8]
{
   27952:	4605      	mov	r5, r0
   27954:	460e      	mov	r6, r1
	if (poller != NULL) {
   27956:	b144      	cbz	r4, 2796a <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   27958:	7863      	ldrb	r3, [r4, #1]
   2795a:	2b01      	cmp	r3, #1
   2795c:	d136      	bne.n	279cc <signal_poll_event+0x80>
	if (!z_is_thread_pending(thread)) {
   2795e:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   27962:	f013 0302 	ands.w	r3, r3, #2
   27966:	d10a      	bne.n	2797e <signal_poll_event+0x32>
		poller->is_polling = false;
   27968:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   2796a:	68eb      	ldr	r3, [r5, #12]
   2796c:	f3c3 3145 	ubfx	r1, r3, #13, #6
   27970:	430e      	orrs	r6, r1
	event->poller = NULL;
   27972:	2000      	movs	r0, #0
	event->state |= state;
   27974:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
   27978:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   2797a:	60eb      	str	r3, [r5, #12]
	return retcode;
   2797c:	e00b      	b.n	27996 <signal_poll_event+0x4a>
	if (z_is_thread_timeout_expired(thread)) {
   2797e:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   27982:	f1b3 3fff 	cmp.w	r3, #4294967295
   27986:	bf08      	it	eq
   27988:	f112 0f02 	cmneq.w	r2, #2
   2798c:	d105      	bne.n	2799a <signal_poll_event+0x4e>
		poller->is_polling = false;
   2798e:	2300      	movs	r3, #0
   27990:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   27992:	f06f 000a 	mvn.w	r0, #10
}
   27996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2799a:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   2799e:	4640      	mov	r0, r8
   279a0:	f7fa f85e 	bl	21a60 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   279a4:	2e08      	cmp	r6, #8
   279a6:	bf0c      	ite	eq
   279a8:	f06f 0303 	mvneq.w	r3, #3
   279ac:	2300      	movne	r3, #0
   279ae:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   279b0:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   279b4:	06db      	lsls	r3, r3, #27
   279b6:	d102      	bne.n	279be <signal_poll_event+0x72>
	if (!z_is_thread_ready(thread)) {
   279b8:	f854 7c48 	ldr.w	r7, [r4, #-72]
   279bc:	b10f      	cbz	r7, 279c2 <signal_poll_event+0x76>
		poller->is_polling = false;
   279be:	2300      	movs	r3, #0
   279c0:	e7d2      	b.n	27968 <signal_poll_event+0x1c>
	z_ready_thread(thread);
   279c2:	4640      	mov	r0, r8
   279c4:	f7fa f9b6 	bl	21d34 <z_ready_thread>
		poller->is_polling = false;
   279c8:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   279ca:	e7ce      	b.n	2796a <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   279cc:	2b02      	cmp	r3, #2
   279ce:	d1f6      	bne.n	279be <signal_poll_event+0x72>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   279d0:	7823      	ldrb	r3, [r4, #0]
   279d2:	2b00      	cmp	r3, #0
   279d4:	d0c9      	beq.n	2796a <signal_poll_event+0x1e>
   279d6:	f854 7c04 	ldr.w	r7, [r4, #-4]
   279da:	2f00      	cmp	r7, #0
   279dc:	d0f4      	beq.n	279c8 <signal_poll_event+0x7c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   279de:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   279e2:	f1a4 0914 	sub.w	r9, r4, #20
   279e6:	f104 0014 	add.w	r0, r4, #20
   279ea:	f7fb f829 	bl	22a40 <z_abort_timeout>
		twork->poll_result = 0;
   279ee:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   279f2:	4649      	mov	r1, r9
   279f4:	4638      	mov	r0, r7
   279f6:	f7f9 fc4d 	bl	21294 <k_work_submit_to_queue>
		poller->is_polling = false;
   279fa:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   279fe:	e7b4      	b.n	2796a <signal_poll_event+0x1e>

00027a00 <z_handle_obj_poll_events>:
{
   27a00:	4603      	mov	r3, r0
	return list->head == list;
   27a02:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   27a04:	4283      	cmp	r3, r0
   27a06:	d008      	beq.n	27a1a <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   27a08:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   27a0c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   27a0e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   27a10:	2300      	movs	r3, #0
	node->prev = NULL;
   27a12:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   27a16:	f7ff bf99 	b.w	2794c <signal_poll_event>
}
   27a1a:	4770      	bx	lr

00027a1c <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   27a1c:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   27a1e:	e9c0 0000 	strd	r0, r0, [r0]
   27a22:	6083      	str	r3, [r0, #8]
}
   27a24:	4770      	bx	lr

00027a26 <z_impl_k_poll_signal_reset>:
	sig->signaled = 0U;
   27a26:	2300      	movs	r3, #0
   27a28:	6083      	str	r3, [r0, #8]
}
   27a2a:	4770      	bx	lr

00027a2c <k_free>:
	if (ptr != NULL) {
   27a2c:	b120      	cbz	r0, 27a38 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   27a2e:	1f01      	subs	r1, r0, #4
   27a30:	f850 0c04 	ldr.w	r0, [r0, #-4]
   27a34:	f7f8 bc04 	b.w	20240 <k_heap_free>
}
   27a38:	4770      	bx	lr

00027a3a <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   27a3a:	4770      	bx	lr

00027a3c <memcmp>:
   27a3c:	b510      	push	{r4, lr}
   27a3e:	3901      	subs	r1, #1
   27a40:	4402      	add	r2, r0
   27a42:	4290      	cmp	r0, r2
   27a44:	d101      	bne.n	27a4a <memcmp+0xe>
   27a46:	2000      	movs	r0, #0
   27a48:	e005      	b.n	27a56 <memcmp+0x1a>
   27a4a:	7803      	ldrb	r3, [r0, #0]
   27a4c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   27a50:	42a3      	cmp	r3, r4
   27a52:	d001      	beq.n	27a58 <memcmp+0x1c>
   27a54:	1b18      	subs	r0, r3, r4
   27a56:	bd10      	pop	{r4, pc}
   27a58:	3001      	adds	r0, #1
   27a5a:	e7f2      	b.n	27a42 <memcmp+0x6>

00027a5c <memcpy>:
   27a5c:	440a      	add	r2, r1
   27a5e:	4291      	cmp	r1, r2
   27a60:	f100 33ff 	add.w	r3, r0, #4294967295
   27a64:	d100      	bne.n	27a68 <memcpy+0xc>
   27a66:	4770      	bx	lr
   27a68:	b510      	push	{r4, lr}
   27a6a:	f811 4b01 	ldrb.w	r4, [r1], #1
   27a6e:	f803 4f01 	strb.w	r4, [r3, #1]!
   27a72:	4291      	cmp	r1, r2
   27a74:	d1f9      	bne.n	27a6a <memcpy+0xe>
   27a76:	bd10      	pop	{r4, pc}

00027a78 <__memcpy_chk>:
   27a78:	429a      	cmp	r2, r3
   27a7a:	b508      	push	{r3, lr}
   27a7c:	d901      	bls.n	27a82 <__memcpy_chk+0xa>
   27a7e:	f7ed f915 	bl	14cac <__chk_fail>
   27a82:	4281      	cmp	r1, r0
   27a84:	d804      	bhi.n	27a90 <__memcpy_chk+0x18>
   27a86:	188b      	adds	r3, r1, r2
   27a88:	4298      	cmp	r0, r3
   27a8a:	d3f8      	bcc.n	27a7e <__memcpy_chk+0x6>
   27a8c:	4281      	cmp	r1, r0
   27a8e:	d102      	bne.n	27a96 <__memcpy_chk+0x1e>
   27a90:	1883      	adds	r3, r0, r2
   27a92:	4299      	cmp	r1, r3
   27a94:	d3f3      	bcc.n	27a7e <__memcpy_chk+0x6>
   27a96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   27a9a:	f7ff bfdf 	b.w	27a5c <memcpy>

00027a9e <memset>:
   27a9e:	4402      	add	r2, r0
   27aa0:	4603      	mov	r3, r0
   27aa2:	4293      	cmp	r3, r2
   27aa4:	d100      	bne.n	27aa8 <memset+0xa>
   27aa6:	4770      	bx	lr
   27aa8:	f803 1b01 	strb.w	r1, [r3], #1
   27aac:	e7f9      	b.n	27aa2 <memset+0x4>

00027aae <__memset_chk>:
   27aae:	429a      	cmp	r2, r3
   27ab0:	b508      	push	{r3, lr}
   27ab2:	d901      	bls.n	27ab8 <__memset_chk+0xa>
   27ab4:	f7ed f8fa 	bl	14cac <__chk_fail>
   27ab8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   27abc:	f7ff bfef 	b.w	27a9e <memset>

00027ac0 <strcpy>:
   27ac0:	4603      	mov	r3, r0
   27ac2:	f811 2b01 	ldrb.w	r2, [r1], #1
   27ac6:	f803 2b01 	strb.w	r2, [r3], #1
   27aca:	2a00      	cmp	r2, #0
   27acc:	d1f9      	bne.n	27ac2 <strcpy+0x2>
   27ace:	4770      	bx	lr

00027ad0 <strncmp>:
   27ad0:	b510      	push	{r4, lr}
   27ad2:	4603      	mov	r3, r0
   27ad4:	b172      	cbz	r2, 27af4 <strncmp+0x24>
   27ad6:	3901      	subs	r1, #1
   27ad8:	1884      	adds	r4, r0, r2
   27ada:	f813 0b01 	ldrb.w	r0, [r3], #1
   27ade:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   27ae2:	4290      	cmp	r0, r2
   27ae4:	d101      	bne.n	27aea <strncmp+0x1a>
   27ae6:	42a3      	cmp	r3, r4
   27ae8:	d101      	bne.n	27aee <strncmp+0x1e>
   27aea:	1a80      	subs	r0, r0, r2
   27aec:	bd10      	pop	{r4, pc}
   27aee:	2800      	cmp	r0, #0
   27af0:	d1f3      	bne.n	27ada <strncmp+0xa>
   27af2:	e7fa      	b.n	27aea <strncmp+0x1a>
   27af4:	4610      	mov	r0, r2
   27af6:	e7f9      	b.n	27aec <strncmp+0x1c>

00027af8 <strnlen>:
   27af8:	b510      	push	{r4, lr}
   27afa:	4602      	mov	r2, r0
   27afc:	4401      	add	r1, r0
   27afe:	428a      	cmp	r2, r1
   27b00:	4613      	mov	r3, r2
   27b02:	d003      	beq.n	27b0c <strnlen+0x14>
   27b04:	781c      	ldrb	r4, [r3, #0]
   27b06:	3201      	adds	r2, #1
   27b08:	2c00      	cmp	r4, #0
   27b0a:	d1f8      	bne.n	27afe <strnlen+0x6>
   27b0c:	1a18      	subs	r0, r3, r0
   27b0e:	bd10      	pop	{r4, pc}

00027b10 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   27b10:	f7f7 bb70 	b.w	1f1f4 <SystemInit>
