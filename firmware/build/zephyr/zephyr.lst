
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:

void i2c_dump_msgs(const char *name, const struct i2c_msg *msgs,
		   uint8_t num_msgs, uint16_t addr)
{
	LOG_DBG("I2C msg: %s, addr=%x", name, addr);
	for (unsigned int i = 0; i < num_msgs; i++) {
   0:	80 58 00 20 cd 61 01 00 d7 bc 02 00 85 61 01 00     .X. .a.......a..

	if (IS_ENABLED(CONFIG_DK_LIBRARY_DYNAMIC_BUTTON_HANDLERS)) {
		k_mutex_init(&button_handler_mut);
	}

	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
  10:	85 61 01 00 85 61 01 00 85 61 01 00 00 00 00 00     .a...a...a......
	...
		gpio_flags_t flags =
			buttons[i].dt_flags & GPIO_ACTIVE_LOW ?
			GPIO_PULL_UP : GPIO_PULL_DOWN;
		err = gpio_pin_configure_dt(&buttons[i], GPIO_INPUT | flags);

		if (err) {
  2c:	3d 5b 01 00 85 61 01 00 00 00 00 00 e9 5a 01 00     =[...a.......Z..
			buttons[i].dt_flags & GPIO_ACTIVE_LOW ?
  3c:	85 61 01 00                                         .a..

00000040 <_irq_vector_table>:
			GPIO_PULL_UP : GPIO_PULL_DOWN;
  40:	15 5c 01 00 e3 03 03 00 15 5c 01 00 15 5c 01 00     .\.......\...\..
			LOG_ERR("Cannot configure button gpio");
			return err;
  50:	15 5c 01 00 15 5c 01 00 15 5c 01 00 15 5c 01 00     .\...\...\...\..
	}

	trig = (enum gpio_int_trig)(flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1));
	mode = (enum gpio_int_mode)(flags & (GPIO_INT_EDGE | GPIO_INT_DISABLE | GPIO_INT_ENABLE));

	return api->pin_interrupt_configure(port, pin, mode, trig);
  60:	ab 03 03 00 15 5c 01 00 15 5c 01 00 c9 03 03 00     .....\...\......
		if (err) {
			LOG_ERR("Cannot disable callbacks()");
			return err;
		}

		pin_mask |= BIT(buttons[i].pin);
  70:	15 5c 01 00 15 5c 01 00 15 5c 01 00 15 5c 01 00     .\...\...\...\..
 * @return a value from gpio_pin_interrupt_configure()
 */
static inline int gpio_pin_interrupt_configure_dt(const struct gpio_dt_spec *spec,
						  gpio_flags_t flags)
{
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
  80:	15 5c 01 00 15 5c 01 00 15 5c 01 00 15 5c 01 00     .\...\...\...\..
	__unused const struct gpio_driver_config *const cfg =
  90:	15 5c 01 00 15 5c 01 00 15 5c 01 00 15 5c 01 00     .\...\...\...\..
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
  a0:	15 5c 01 00 15 5c 01 00 15 5c 01 00 15 5c 01 00     .\...\...\...\..
  b0:	15 5c 01 00 15 5c 01 00 15 5c 01 00 15 5c 01 00     .\...\...\...\..
			return err;
  c0:	15 5c 01 00 15 5c 01 00 15 5c 01 00 15 5c 01 00     .\...\...\...\..
	}

	gpio_init_callback(&gpio_cb, button_pressed, pin_mask);

	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
		err = gpio_add_callback(buttons[i].port, &gpio_cb);
  d0:	15 5c 01 00 15 5c 01 00 15 5c 01 00                 .\...\...\..

Disassembly of section text:

000000e0 <memchr>:

	if (api->manage_callback == NULL) {
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
      e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
		if (err) {
      e4:	2a10      	cmp	r2, #16
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
      e6:	db2b      	blt.n	140 <CONFIG_IDLE_STACK_SIZE>
      e8:	f010 0f07 	tst.w	r0, #7
		return -ENOTSUP;
      ec:	d008      	beq.n	100 <CONFIG_KOBJECT_TEXT_AREA>
      ee:	f810 3b01 	ldrb.w	r3, [r0], #1
			LOG_ERR("Cannot add callback");
      f2:	3a01      	subs	r2, #1
      f4:	428b      	cmp	r3, r1
      f6:	d02d      	beq.n	154 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xa>
			return err;
      f8:	f010 0f07 	tst.w	r0, #7
		}
	}

	k_work_init_delayable(&buttons_scan, buttons_scan_fn);
      fc:	b342      	cbz	r2, 150 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x6>
      fe:	d1f6      	bne.n	ee <memchr+0xe>
     100:	b4f0      	push	{r4, r5, r6, r7}
     102:	ea41 2101 	orr.w	r1, r1, r1, lsl #8

	state = STATE_SCANNING;
     106:	ea41 4101 	orr.w	r1, r1, r1, lsl #16

	k_work_schedule(&buttons_scan, K_NO_WAIT);
     10a:	f022 0407 	bic.w	r4, r2, #7
     10e:	f07f 0700 	mvns.w	r7, #0
     112:	2300      	movs	r3, #0

	dk_read_buttons(NULL, NULL);
     114:	e8f0 5602 	ldrd	r5, r6, [r0], #8
     118:	3c08      	subs	r4, #8
     11a:	ea85 0501 	eor.w	r5, r5, r1

	atomic_set(&my_buttons, (atomic_val_t)get_buttons());
     11e:	ea86 0601 	eor.w	r6, r6, r1
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
     122:	fa85 f547 	uadd8	r5, r5, r7
     126:	faa3 f587 	sel	r5, r3, r7
     12a:	fa86 f647 	uadd8	r6, r6, r7
     12e:	faa5 f687 	sel	r6, r5, r7
     132:	b98e      	cbnz	r6, 158 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xe>
     134:	d1ee      	bne.n	114 <CONFIG_KOBJECT_TEXT_AREA+0x14>

	return 0;
     136:	bcf0      	pop	{r4, r5, r6, r7}
}
     138:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     13c:	f002 0207 	and.w	r2, r2, #7
     140:	b132      	cbz	r2, 150 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x6>
     142:	f810 3b01 	ldrb.w	r3, [r0], #1
     146:	3a01      	subs	r2, #1
     148:	ea83 0301 	eor.w	r3, r3, r1
     14c:	b113      	cbz	r3, 154 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xa>
     14e:	d1f8      	bne.n	142 <CONFIG_IDLE_STACK_SIZE+0x2>
     150:	2000      	movs	r0, #0
     152:	4770      	bx	lr
     154:	3801      	subs	r0, #1
     156:	4770      	bx	lr
     158:	2d00      	cmp	r5, #0
     15a:	bf06      	itte	eq
     15c:	4635      	moveq	r5, r6
     15e:	3803      	subeq	r0, #3
     160:	3807      	subne	r0, #7
     162:	f015 0f01 	tst.w	r5, #1
     166:	d107      	bne.n	178 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xb>
     168:	3001      	adds	r0, #1
     16a:	f415 7f80 	tst.w	r5, #256	; 0x100
     16e:	bf02      	ittt	eq
     170:	3001      	addeq	r0, #1
     172:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
     176:	3001      	addeq	r0, #1
     178:	bcf0      	pop	{r4, r5, r6, r7}
     17a:	3801      	subs	r0, #1
     17c:	4770      	bx	lr
     17e:	bf00      	nop

00000180 <__aeabi_drsub>:
     180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     184:	e002      	b.n	18c <__adddf3>
     186:	bf00      	nop

00000188 <__aeabi_dsub>:
     188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000018c <__adddf3>:
     18c:	b530      	push	{r4, r5, lr}
     18e:	ea4f 0441 	mov.w	r4, r1, lsl #1
     192:	ea4f 0543 	mov.w	r5, r3, lsl #1
     196:	ea94 0f05 	teq	r4, r5
     19a:	bf08      	it	eq
     19c:	ea90 0f02 	teqeq	r0, r2
     1a0:	bf1f      	itttt	ne
     1a2:	ea54 0c00 	orrsne.w	ip, r4, r0
     1a6:	ea55 0c02 	orrsne.w	ip, r5, r2
     1aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     1ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     1b2:	f000 80e2 	beq.w	37a <CONFIG_FLASH_SIZE+0x17a>
     1b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
     1ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     1be:	bfb8      	it	lt
     1c0:	426d      	neglt	r5, r5
     1c2:	dd0c      	ble.n	1de <__adddf3+0x52>
     1c4:	442c      	add	r4, r5
     1c6:	ea80 0202 	eor.w	r2, r0, r2
     1ca:	ea81 0303 	eor.w	r3, r1, r3
     1ce:	ea82 0000 	eor.w	r0, r2, r0
     1d2:	ea83 0101 	eor.w	r1, r3, r1
     1d6:	ea80 0202 	eor.w	r2, r0, r2
     1da:	ea81 0303 	eor.w	r3, r1, r3
     1de:	2d36      	cmp	r5, #54	; 0x36
     1e0:	bf88      	it	hi
     1e2:	bd30      	pophi	{r4, r5, pc}
     1e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     1e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
     1ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     1f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     1f4:	d002      	beq.n	1fc <__adddf3+0x70>
     1f6:	4240      	negs	r0, r0
     1f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     1fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     200:	ea4f 3303 	mov.w	r3, r3, lsl #12
     204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     208:	d002      	beq.n	210 <CONFIG_FLASH_SIZE+0x10>
     20a:	4252      	negs	r2, r2
     20c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     210:	ea94 0f05 	teq	r4, r5
     214:	f000 80a7 	beq.w	366 <CONFIG_FLASH_SIZE+0x166>
     218:	f1a4 0401 	sub.w	r4, r4, #1
     21c:	f1d5 0e20 	rsbs	lr, r5, #32
     220:	db0d      	blt.n	23e <CONFIG_FLASH_SIZE+0x3e>
     222:	fa02 fc0e 	lsl.w	ip, r2, lr
     226:	fa22 f205 	lsr.w	r2, r2, r5
     22a:	1880      	adds	r0, r0, r2
     22c:	f141 0100 	adc.w	r1, r1, #0
     230:	fa03 f20e 	lsl.w	r2, r3, lr
     234:	1880      	adds	r0, r0, r2
     236:	fa43 f305 	asr.w	r3, r3, r5
     23a:	4159      	adcs	r1, r3
     23c:	e00e      	b.n	25c <CONFIG_FLASH_SIZE+0x5c>
     23e:	f1a5 0520 	sub.w	r5, r5, #32
     242:	f10e 0e20 	add.w	lr, lr, #32
     246:	2a01      	cmp	r2, #1
     248:	fa03 fc0e 	lsl.w	ip, r3, lr
     24c:	bf28      	it	cs
     24e:	f04c 0c02 	orrcs.w	ip, ip, #2
     252:	fa43 f305 	asr.w	r3, r3, r5
     256:	18c0      	adds	r0, r0, r3
     258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     25c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     260:	d507      	bpl.n	272 <CONFIG_FLASH_SIZE+0x72>
     262:	f04f 0e00 	mov.w	lr, #0
     266:	f1dc 0c00 	rsbs	ip, ip, #0
     26a:	eb7e 0000 	sbcs.w	r0, lr, r0
     26e:	eb6e 0101 	sbc.w	r1, lr, r1
     272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     276:	d31b      	bcc.n	2b0 <CONFIG_FLASH_SIZE+0xb0>
     278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     27c:	d30c      	bcc.n	298 <CONFIG_FLASH_SIZE+0x98>
     27e:	0849      	lsrs	r1, r1, #1
     280:	ea5f 0030 	movs.w	r0, r0, rrx
     284:	ea4f 0c3c 	mov.w	ip, ip, rrx
     288:	f104 0401 	add.w	r4, r4, #1
     28c:	ea4f 5244 	mov.w	r2, r4, lsl #21
     290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     294:	f080 809a 	bcs.w	3cc <CONFIG_BT_CTLR_ECDH_STACK_SIZE+0x48>
     298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     29c:	bf08      	it	eq
     29e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     2a2:	f150 0000 	adcs.w	r0, r0, #0
     2a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     2aa:	ea41 0105 	orr.w	r1, r1, r5
     2ae:	bd30      	pop	{r4, r5, pc}
     2b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     2b4:	4140      	adcs	r0, r0
     2b6:	eb41 0101 	adc.w	r1, r1, r1
     2ba:	3c01      	subs	r4, #1
     2bc:	bf28      	it	cs
     2be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     2c2:	d2e9      	bcs.n	298 <CONFIG_FLASH_SIZE+0x98>
     2c4:	f091 0f00 	teq	r1, #0
     2c8:	bf04      	itt	eq
     2ca:	4601      	moveq	r1, r0
     2cc:	2000      	moveq	r0, #0
     2ce:	fab1 f381 	clz	r3, r1
     2d2:	bf08      	it	eq
     2d4:	3320      	addeq	r3, #32
     2d6:	f1a3 030b 	sub.w	r3, r3, #11
     2da:	f1b3 0220 	subs.w	r2, r3, #32
     2de:	da0c      	bge.n	2fa <CONFIG_FLASH_SIZE+0xfa>
     2e0:	320c      	adds	r2, #12
     2e2:	dd08      	ble.n	2f6 <CONFIG_FLASH_SIZE+0xf6>
     2e4:	f102 0c14 	add.w	ip, r2, #20
     2e8:	f1c2 020c 	rsb	r2, r2, #12
     2ec:	fa01 f00c 	lsl.w	r0, r1, ip
     2f0:	fa21 f102 	lsr.w	r1, r1, r2
     2f4:	e00c      	b.n	310 <CONFIG_FLASH_SIZE+0x110>
     2f6:	f102 0214 	add.w	r2, r2, #20
     2fa:	bfd8      	it	le
     2fc:	f1c2 0c20 	rsble	ip, r2, #32
     300:	fa01 f102 	lsl.w	r1, r1, r2
     304:	fa20 fc0c 	lsr.w	ip, r0, ip
     308:	bfdc      	itt	le
     30a:	ea41 010c 	orrle.w	r1, r1, ip
     30e:	4090      	lslle	r0, r2
     310:	1ae4      	subs	r4, r4, r3
     312:	bfa2      	ittt	ge
     314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     318:	4329      	orrge	r1, r5
     31a:	bd30      	popge	{r4, r5, pc}
     31c:	ea6f 0404 	mvn.w	r4, r4
     320:	3c1f      	subs	r4, #31
     322:	da1c      	bge.n	35e <CONFIG_FLASH_SIZE+0x15e>
     324:	340c      	adds	r4, #12
     326:	dc0e      	bgt.n	346 <CONFIG_FLASH_SIZE+0x146>
     328:	f104 0414 	add.w	r4, r4, #20
     32c:	f1c4 0220 	rsb	r2, r4, #32
     330:	fa20 f004 	lsr.w	r0, r0, r4
     334:	fa01 f302 	lsl.w	r3, r1, r2
     338:	ea40 0003 	orr.w	r0, r0, r3
     33c:	fa21 f304 	lsr.w	r3, r1, r4
     340:	ea45 0103 	orr.w	r1, r5, r3
     344:	bd30      	pop	{r4, r5, pc}
     346:	f1c4 040c 	rsb	r4, r4, #12
     34a:	f1c4 0220 	rsb	r2, r4, #32
     34e:	fa20 f002 	lsr.w	r0, r0, r2
     352:	fa01 f304 	lsl.w	r3, r1, r4
     356:	ea40 0003 	orr.w	r0, r0, r3
     35a:	4629      	mov	r1, r5
     35c:	bd30      	pop	{r4, r5, pc}
     35e:	fa21 f004 	lsr.w	r0, r1, r4
     362:	4629      	mov	r1, r5
     364:	bd30      	pop	{r4, r5, pc}
     366:	f094 0f00 	teq	r4, #0
     36a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     36e:	bf06      	itte	eq
     370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     374:	3401      	addeq	r4, #1
     376:	3d01      	subne	r5, #1
     378:	e74e      	b.n	218 <CONFIG_FLASH_SIZE+0x18>
     37a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     37e:	bf18      	it	ne
     380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     384:	d029      	beq.n	3da <CONFIG_BT_CTLR_ECDH_STACK_SIZE+0x56>
     386:	ea94 0f05 	teq	r4, r5
     38a:	bf08      	it	eq
     38c:	ea90 0f02 	teqeq	r0, r2
     390:	d005      	beq.n	39e <CONFIG_BT_CTLR_ECDH_STACK_SIZE+0x1a>
     392:	ea54 0c00 	orrs.w	ip, r4, r0
     396:	bf04      	itt	eq
     398:	4619      	moveq	r1, r3
     39a:	4610      	moveq	r0, r2
     39c:	bd30      	pop	{r4, r5, pc}
     39e:	ea91 0f03 	teq	r1, r3
     3a2:	bf1e      	ittt	ne
     3a4:	2100      	movne	r1, #0
     3a6:	2000      	movne	r0, #0
     3a8:	bd30      	popne	{r4, r5, pc}
     3aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     3ae:	d105      	bne.n	3bc <CONFIG_BT_CTLR_ECDH_STACK_SIZE+0x38>
     3b0:	0040      	lsls	r0, r0, #1
     3b2:	4149      	adcs	r1, r1
     3b4:	bf28      	it	cs
     3b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     3ba:	bd30      	pop	{r4, r5, pc}
     3bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     3c0:	bf3c      	itt	cc
     3c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     3c6:	bd30      	popcc	{r4, r5, pc}
     3c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     3cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     3d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     3d4:	f04f 0000 	mov.w	r0, #0
     3d8:	bd30      	pop	{r4, r5, pc}
     3da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     3de:	bf1a      	itte	ne
     3e0:	4619      	movne	r1, r3
     3e2:	4610      	movne	r0, r2
     3e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     3e8:	bf1c      	itt	ne
     3ea:	460b      	movne	r3, r1
     3ec:	4602      	movne	r2, r0
     3ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     3f2:	bf06      	itte	eq
     3f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     3f8:	ea91 0f03 	teqeq	r1, r3
     3fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     400:	bd30      	pop	{r4, r5, pc}
     402:	bf00      	nop

00000404 <__aeabi_ui2d>:
     404:	f090 0f00 	teq	r0, #0
     408:	bf04      	itt	eq
     40a:	2100      	moveq	r1, #0
     40c:	4770      	bxeq	lr
     40e:	b530      	push	{r4, r5, lr}
     410:	f44f 6480 	mov.w	r4, #1024	; 0x400
     414:	f104 0432 	add.w	r4, r4, #50	; 0x32
     418:	f04f 0500 	mov.w	r5, #0
     41c:	f04f 0100 	mov.w	r1, #0
     420:	e750      	b.n	2c4 <CONFIG_FLASH_SIZE+0xc4>
     422:	bf00      	nop

00000424 <__aeabi_i2d>:
     424:	f090 0f00 	teq	r0, #0
     428:	bf04      	itt	eq
     42a:	2100      	moveq	r1, #0
     42c:	4770      	bxeq	lr
     42e:	b530      	push	{r4, r5, lr}
     430:	f44f 6480 	mov.w	r4, #1024	; 0x400
     434:	f104 0432 	add.w	r4, r4, #50	; 0x32
     438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     43c:	bf48      	it	mi
     43e:	4240      	negmi	r0, r0
     440:	f04f 0100 	mov.w	r1, #0
     444:	e73e      	b.n	2c4 <CONFIG_FLASH_SIZE+0xc4>
     446:	bf00      	nop

00000448 <__aeabi_f2d>:
     448:	0042      	lsls	r2, r0, #1
     44a:	ea4f 01e2 	mov.w	r1, r2, asr #3
     44e:	ea4f 0131 	mov.w	r1, r1, rrx
     452:	ea4f 7002 	mov.w	r0, r2, lsl #28
     456:	bf1f      	itttt	ne
     458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     45c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     464:	4770      	bxne	lr
     466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     46a:	bf08      	it	eq
     46c:	4770      	bxeq	lr
     46e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     472:	bf04      	itt	eq
     474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     478:	4770      	bxeq	lr
     47a:	b530      	push	{r4, r5, lr}
     47c:	f44f 7460 	mov.w	r4, #896	; 0x380
     480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     488:	e71c      	b.n	2c4 <CONFIG_FLASH_SIZE+0xc4>
     48a:	bf00      	nop

0000048c <__aeabi_ul2d>:
     48c:	ea50 0201 	orrs.w	r2, r0, r1
     490:	bf08      	it	eq
     492:	4770      	bxeq	lr
     494:	b530      	push	{r4, r5, lr}
     496:	f04f 0500 	mov.w	r5, #0
     49a:	e00a      	b.n	4b2 <__aeabi_l2d+0x16>

0000049c <__aeabi_l2d>:
     49c:	ea50 0201 	orrs.w	r2, r0, r1
     4a0:	bf08      	it	eq
     4a2:	4770      	bxeq	lr
     4a4:	b530      	push	{r4, r5, lr}
     4a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     4aa:	d502      	bpl.n	4b2 <__aeabi_l2d+0x16>
     4ac:	4240      	negs	r0, r0
     4ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     4b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
     4b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
     4ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     4be:	f43f aed8 	beq.w	272 <CONFIG_FLASH_SIZE+0x72>
     4c2:	f04f 0203 	mov.w	r2, #3
     4c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4ca:	bf18      	it	ne
     4cc:	3203      	addne	r2, #3
     4ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4d2:	bf18      	it	ne
     4d4:	3203      	addne	r2, #3
     4d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     4da:	f1c2 0320 	rsb	r3, r2, #32
     4de:	fa00 fc03 	lsl.w	ip, r0, r3
     4e2:	fa20 f002 	lsr.w	r0, r0, r2
     4e6:	fa01 fe03 	lsl.w	lr, r1, r3
     4ea:	ea40 000e 	orr.w	r0, r0, lr
     4ee:	fa21 f102 	lsr.w	r1, r1, r2
     4f2:	4414      	add	r4, r2
     4f4:	e6bd      	b.n	272 <CONFIG_FLASH_SIZE+0x72>
     4f6:	bf00      	nop

000004f8 <__aeabi_dmul>:
     4f8:	b570      	push	{r4, r5, r6, lr}
     4fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
     4fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     506:	bf1d      	ittte	ne
     508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     50c:	ea94 0f0c 	teqne	r4, ip
     510:	ea95 0f0c 	teqne	r5, ip
     514:	f000 f8de 	bleq	6d4 <CONFIG_BT_HCI_TX_STACK_SIZE+0xd4>
     518:	442c      	add	r4, r5
     51a:	ea81 0603 	eor.w	r6, r1, r3
     51e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     52a:	bf18      	it	ne
     52c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     538:	d038      	beq.n	5ac <CONFIG_BT_LONG_WQ_STACK_SIZE+0x98>
     53a:	fba0 ce02 	umull	ip, lr, r0, r2
     53e:	f04f 0500 	mov.w	r5, #0
     542:	fbe1 e502 	umlal	lr, r5, r1, r2
     546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     54a:	fbe0 e503 	umlal	lr, r5, r0, r3
     54e:	f04f 0600 	mov.w	r6, #0
     552:	fbe1 5603 	umlal	r5, r6, r1, r3
     556:	f09c 0f00 	teq	ip, #0
     55a:	bf18      	it	ne
     55c:	f04e 0e01 	orrne.w	lr, lr, #1
     560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     56c:	d204      	bcs.n	578 <CONFIG_BT_LONG_WQ_STACK_SIZE+0x64>
     56e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     572:	416d      	adcs	r5, r5
     574:	eb46 0606 	adc.w	r6, r6, r6
     578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     57c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     58c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     590:	bf88      	it	hi
     592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     596:	d81e      	bhi.n	5d6 <CONFIG_BT_LONG_WQ_STACK_SIZE+0xc2>
     598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     59c:	bf08      	it	eq
     59e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     5a2:	f150 0000 	adcs.w	r0, r0, #0
     5a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     5aa:	bd70      	pop	{r4, r5, r6, pc}
     5ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     5b0:	ea46 0101 	orr.w	r1, r6, r1
     5b4:	ea40 0002 	orr.w	r0, r0, r2
     5b8:	ea81 0103 	eor.w	r1, r1, r3
     5bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     5c0:	bfc2      	ittt	gt
     5c2:	ebd4 050c 	rsbsgt	r5, r4, ip
     5c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     5ca:	bd70      	popgt	{r4, r5, r6, pc}
     5cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     5d0:	f04f 0e00 	mov.w	lr, #0
     5d4:	3c01      	subs	r4, #1
     5d6:	f300 80ab 	bgt.w	730 <CONFIG_BT_HCI_TX_STACK_SIZE+0x130>
     5da:	f114 0f36 	cmn.w	r4, #54	; 0x36
     5de:	bfde      	ittt	le
     5e0:	2000      	movle	r0, #0
     5e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     5e6:	bd70      	pople	{r4, r5, r6, pc}
     5e8:	f1c4 0400 	rsb	r4, r4, #0
     5ec:	3c20      	subs	r4, #32
     5ee:	da35      	bge.n	65c <CONFIG_BT_HCI_TX_STACK_SIZE+0x5c>
     5f0:	340c      	adds	r4, #12
     5f2:	dc1b      	bgt.n	62c <CONFIG_BT_HCI_TX_STACK_SIZE+0x2c>
     5f4:	f104 0414 	add.w	r4, r4, #20
     5f8:	f1c4 0520 	rsb	r5, r4, #32
     5fc:	fa00 f305 	lsl.w	r3, r0, r5
     600:	fa20 f004 	lsr.w	r0, r0, r4
     604:	fa01 f205 	lsl.w	r2, r1, r5
     608:	ea40 0002 	orr.w	r0, r0, r2
     60c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     618:	fa21 f604 	lsr.w	r6, r1, r4
     61c:	eb42 0106 	adc.w	r1, r2, r6
     620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     624:	bf08      	it	eq
     626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     62a:	bd70      	pop	{r4, r5, r6, pc}
     62c:	f1c4 040c 	rsb	r4, r4, #12
     630:	f1c4 0520 	rsb	r5, r4, #32
     634:	fa00 f304 	lsl.w	r3, r0, r4
     638:	fa20 f005 	lsr.w	r0, r0, r5
     63c:	fa01 f204 	lsl.w	r2, r1, r4
     640:	ea40 0002 	orr.w	r0, r0, r2
     644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     64c:	f141 0100 	adc.w	r1, r1, #0
     650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     654:	bf08      	it	eq
     656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     65a:	bd70      	pop	{r4, r5, r6, pc}
     65c:	f1c4 0520 	rsb	r5, r4, #32
     660:	fa00 f205 	lsl.w	r2, r0, r5
     664:	ea4e 0e02 	orr.w	lr, lr, r2
     668:	fa20 f304 	lsr.w	r3, r0, r4
     66c:	fa01 f205 	lsl.w	r2, r1, r5
     670:	ea43 0302 	orr.w	r3, r3, r2
     674:	fa21 f004 	lsr.w	r0, r1, r4
     678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     67c:	fa21 f204 	lsr.w	r2, r1, r4
     680:	ea20 0002 	bic.w	r0, r0, r2
     684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     68c:	bf08      	it	eq
     68e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     692:	bd70      	pop	{r4, r5, r6, pc}
     694:	f094 0f00 	teq	r4, #0
     698:	d10f      	bne.n	6ba <CONFIG_BT_HCI_TX_STACK_SIZE+0xba>
     69a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     69e:	0040      	lsls	r0, r0, #1
     6a0:	eb41 0101 	adc.w	r1, r1, r1
     6a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     6a8:	bf08      	it	eq
     6aa:	3c01      	subeq	r4, #1
     6ac:	d0f7      	beq.n	69e <CONFIG_BT_HCI_TX_STACK_SIZE+0x9e>
     6ae:	ea41 0106 	orr.w	r1, r1, r6
     6b2:	f095 0f00 	teq	r5, #0
     6b6:	bf18      	it	ne
     6b8:	4770      	bxne	lr
     6ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     6be:	0052      	lsls	r2, r2, #1
     6c0:	eb43 0303 	adc.w	r3, r3, r3
     6c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     6c8:	bf08      	it	eq
     6ca:	3d01      	subeq	r5, #1
     6cc:	d0f7      	beq.n	6be <CONFIG_BT_HCI_TX_STACK_SIZE+0xbe>
     6ce:	ea43 0306 	orr.w	r3, r3, r6
     6d2:	4770      	bx	lr
     6d4:	ea94 0f0c 	teq	r4, ip
     6d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     6dc:	bf18      	it	ne
     6de:	ea95 0f0c 	teqne	r5, ip
     6e2:	d00c      	beq.n	6fe <CONFIG_BT_HCI_TX_STACK_SIZE+0xfe>
     6e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     6e8:	bf18      	it	ne
     6ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     6ee:	d1d1      	bne.n	694 <CONFIG_BT_HCI_TX_STACK_SIZE+0x94>
     6f0:	ea81 0103 	eor.w	r1, r1, r3
     6f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     6f8:	f04f 0000 	mov.w	r0, #0
     6fc:	bd70      	pop	{r4, r5, r6, pc}
     6fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     702:	bf06      	itte	eq
     704:	4610      	moveq	r0, r2
     706:	4619      	moveq	r1, r3
     708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     70c:	d019      	beq.n	742 <CONFIG_BT_HCI_TX_STACK_SIZE+0x142>
     70e:	ea94 0f0c 	teq	r4, ip
     712:	d102      	bne.n	71a <CONFIG_BT_HCI_TX_STACK_SIZE+0x11a>
     714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     718:	d113      	bne.n	742 <CONFIG_BT_HCI_TX_STACK_SIZE+0x142>
     71a:	ea95 0f0c 	teq	r5, ip
     71e:	d105      	bne.n	72c <CONFIG_BT_HCI_TX_STACK_SIZE+0x12c>
     720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     724:	bf1c      	itt	ne
     726:	4610      	movne	r0, r2
     728:	4619      	movne	r1, r3
     72a:	d10a      	bne.n	742 <CONFIG_BT_HCI_TX_STACK_SIZE+0x142>
     72c:	ea81 0103 	eor.w	r1, r1, r3
     730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     73c:	f04f 0000 	mov.w	r0, #0
     740:	bd70      	pop	{r4, r5, r6, pc}
     742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     74a:	bd70      	pop	{r4, r5, r6, pc}

0000074c <__aeabi_ddiv>:
     74c:	b570      	push	{r4, r5, r6, lr}
     74e:	f04f 0cff 	mov.w	ip, #255	; 0xff
     752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     75a:	bf1d      	ittte	ne
     75c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     760:	ea94 0f0c 	teqne	r4, ip
     764:	ea95 0f0c 	teqne	r5, ip
     768:	f000 f8a7 	bleq	8ba <CONFIG_BT_RX_STACK_SIZE+0x22>
     76c:	eba4 0405 	sub.w	r4, r4, r5
     770:	ea81 0e03 	eor.w	lr, r1, r3
     774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     778:	ea4f 3101 	mov.w	r1, r1, lsl #12
     77c:	f000 8088 	beq.w	890 <CONFIG_ISR_STACK_SIZE+0x90>
     780:	ea4f 3303 	mov.w	r3, r3, lsl #12
     784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     78c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     790:	ea4f 2202 	mov.w	r2, r2, lsl #8
     794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     79c:	ea4f 2600 	mov.w	r6, r0, lsl #8
     7a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     7a4:	429d      	cmp	r5, r3
     7a6:	bf08      	it	eq
     7a8:	4296      	cmpeq	r6, r2
     7aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     7ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
     7b2:	d202      	bcs.n	7ba <__aeabi_ddiv+0x6e>
     7b4:	085b      	lsrs	r3, r3, #1
     7b6:	ea4f 0232 	mov.w	r2, r2, rrx
     7ba:	1ab6      	subs	r6, r6, r2
     7bc:	eb65 0503 	sbc.w	r5, r5, r3
     7c0:	085b      	lsrs	r3, r3, #1
     7c2:	ea4f 0232 	mov.w	r2, r2, rrx
     7c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     7ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     7ce:	ebb6 0e02 	subs.w	lr, r6, r2
     7d2:	eb75 0e03 	sbcs.w	lr, r5, r3
     7d6:	bf22      	ittt	cs
     7d8:	1ab6      	subcs	r6, r6, r2
     7da:	4675      	movcs	r5, lr
     7dc:	ea40 000c 	orrcs.w	r0, r0, ip
     7e0:	085b      	lsrs	r3, r3, #1
     7e2:	ea4f 0232 	mov.w	r2, r2, rrx
     7e6:	ebb6 0e02 	subs.w	lr, r6, r2
     7ea:	eb75 0e03 	sbcs.w	lr, r5, r3
     7ee:	bf22      	ittt	cs
     7f0:	1ab6      	subcs	r6, r6, r2
     7f2:	4675      	movcs	r5, lr
     7f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     7f8:	085b      	lsrs	r3, r3, #1
     7fa:	ea4f 0232 	mov.w	r2, r2, rrx
     7fe:	ebb6 0e02 	subs.w	lr, r6, r2
     802:	eb75 0e03 	sbcs.w	lr, r5, r3
     806:	bf22      	ittt	cs
     808:	1ab6      	subcs	r6, r6, r2
     80a:	4675      	movcs	r5, lr
     80c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     810:	085b      	lsrs	r3, r3, #1
     812:	ea4f 0232 	mov.w	r2, r2, rrx
     816:	ebb6 0e02 	subs.w	lr, r6, r2
     81a:	eb75 0e03 	sbcs.w	lr, r5, r3
     81e:	bf22      	ittt	cs
     820:	1ab6      	subcs	r6, r6, r2
     822:	4675      	movcs	r5, lr
     824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     828:	ea55 0e06 	orrs.w	lr, r5, r6
     82c:	d018      	beq.n	860 <CONFIG_ISR_STACK_SIZE+0x60>
     82e:	ea4f 1505 	mov.w	r5, r5, lsl #4
     832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     836:	ea4f 1606 	mov.w	r6, r6, lsl #4
     83a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     83e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     84a:	d1c0      	bne.n	7ce <__aeabi_ddiv+0x82>
     84c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     850:	d10b      	bne.n	86a <CONFIG_ISR_STACK_SIZE+0x6a>
     852:	ea41 0100 	orr.w	r1, r1, r0
     856:	f04f 0000 	mov.w	r0, #0
     85a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     85e:	e7b6      	b.n	7ce <__aeabi_ddiv+0x82>
     860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     864:	bf04      	itt	eq
     866:	4301      	orreq	r1, r0
     868:	2000      	moveq	r0, #0
     86a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     86e:	bf88      	it	hi
     870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     874:	f63f aeaf 	bhi.w	5d6 <CONFIG_BT_LONG_WQ_STACK_SIZE+0xc2>
     878:	ebb5 0c03 	subs.w	ip, r5, r3
     87c:	bf04      	itt	eq
     87e:	ebb6 0c02 	subseq.w	ip, r6, r2
     882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     886:	f150 0000 	adcs.w	r0, r0, #0
     88a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     88e:	bd70      	pop	{r4, r5, r6, pc}
     890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     89c:	bfc2      	ittt	gt
     89e:	ebd4 050c 	rsbsgt	r5, r4, ip
     8a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     8a6:	bd70      	popgt	{r4, r5, r6, pc}
     8a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     8ac:	f04f 0e00 	mov.w	lr, #0
     8b0:	3c01      	subs	r4, #1
     8b2:	e690      	b.n	5d6 <CONFIG_BT_LONG_WQ_STACK_SIZE+0xc2>
     8b4:	ea45 0e06 	orr.w	lr, r5, r6
     8b8:	e68d      	b.n	5d6 <CONFIG_BT_LONG_WQ_STACK_SIZE+0xc2>
     8ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     8be:	ea94 0f0c 	teq	r4, ip
     8c2:	bf08      	it	eq
     8c4:	ea95 0f0c 	teqeq	r5, ip
     8c8:	f43f af3b 	beq.w	742 <CONFIG_BT_HCI_TX_STACK_SIZE+0x142>
     8cc:	ea94 0f0c 	teq	r4, ip
     8d0:	d10a      	bne.n	8e8 <CONFIG_BT_RX_STACK_SIZE+0x50>
     8d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     8d6:	f47f af34 	bne.w	742 <CONFIG_BT_HCI_TX_STACK_SIZE+0x142>
     8da:	ea95 0f0c 	teq	r5, ip
     8de:	f47f af25 	bne.w	72c <CONFIG_BT_HCI_TX_STACK_SIZE+0x12c>
     8e2:	4610      	mov	r0, r2
     8e4:	4619      	mov	r1, r3
     8e6:	e72c      	b.n	742 <CONFIG_BT_HCI_TX_STACK_SIZE+0x142>
     8e8:	ea95 0f0c 	teq	r5, ip
     8ec:	d106      	bne.n	8fc <CONFIG_BT_RX_STACK_SIZE+0x64>
     8ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     8f2:	f43f aefd 	beq.w	6f0 <CONFIG_BT_HCI_TX_STACK_SIZE+0xf0>
     8f6:	4610      	mov	r0, r2
     8f8:	4619      	mov	r1, r3
     8fa:	e722      	b.n	742 <CONFIG_BT_HCI_TX_STACK_SIZE+0x142>
     8fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     900:	bf18      	it	ne
     902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     906:	f47f aec5 	bne.w	694 <CONFIG_BT_HCI_TX_STACK_SIZE+0x94>
     90a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     90e:	f47f af0d 	bne.w	72c <CONFIG_BT_HCI_TX_STACK_SIZE+0x12c>
     912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     916:	f47f aeeb 	bne.w	6f0 <CONFIG_BT_HCI_TX_STACK_SIZE+0xf0>
     91a:	e712      	b.n	742 <CONFIG_BT_HCI_TX_STACK_SIZE+0x142>

0000091c <__aeabi_d2f>:
     91c:	ea4f 0241 	mov.w	r2, r1, lsl #1
     920:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
     924:	bf24      	itt	cs
     926:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
     92a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
     92e:	d90d      	bls.n	94c <__aeabi_d2f+0x30>
     930:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     934:	ea4f 02c0 	mov.w	r2, r0, lsl #3
     938:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
     93c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
     940:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
     944:	bf08      	it	eq
     946:	f020 0001 	biceq.w	r0, r0, #1
     94a:	4770      	bx	lr
     94c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
     950:	d121      	bne.n	996 <__aeabi_d2f+0x7a>
     952:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
     956:	bfbc      	itt	lt
     958:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     95c:	4770      	bxlt	lr
     95e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     962:	ea4f 5252 	mov.w	r2, r2, lsr #21
     966:	f1c2 0218 	rsb	r2, r2, #24
     96a:	f1c2 0c20 	rsb	ip, r2, #32
     96e:	fa10 f30c 	lsls.w	r3, r0, ip
     972:	fa20 f002 	lsr.w	r0, r0, r2
     976:	bf18      	it	ne
     978:	f040 0001 	orrne.w	r0, r0, #1
     97c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     980:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     984:	fa03 fc0c 	lsl.w	ip, r3, ip
     988:	ea40 000c 	orr.w	r0, r0, ip
     98c:	fa23 f302 	lsr.w	r3, r3, r2
     990:	ea4f 0343 	mov.w	r3, r3, lsl #1
     994:	e7cc      	b.n	930 <__aeabi_d2f+0x14>
     996:	ea7f 5362 	mvns.w	r3, r2, asr #21
     99a:	d107      	bne.n	9ac <__aeabi_d2f+0x90>
     99c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     9a0:	bf1e      	ittt	ne
     9a2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     9a6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     9aa:	4770      	bxne	lr
     9ac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     9b0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     9b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     9b8:	4770      	bx	lr
     9ba:	bf00      	nop

000009bc <__aeabi_frsub>:
     9bc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
     9c0:	e002      	b.n	9c8 <__addsf3>
     9c2:	bf00      	nop

000009c4 <__aeabi_fsub>:
     9c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000009c8 <__addsf3>:
     9c8:	0042      	lsls	r2, r0, #1
     9ca:	bf1f      	itttt	ne
     9cc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
     9d0:	ea92 0f03 	teqne	r2, r3
     9d4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
     9d8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     9dc:	d06a      	beq.n	ab4 <__addsf3+0xec>
     9de:	ea4f 6212 	mov.w	r2, r2, lsr #24
     9e2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
     9e6:	bfc1      	itttt	gt
     9e8:	18d2      	addgt	r2, r2, r3
     9ea:	4041      	eorgt	r1, r0
     9ec:	4048      	eorgt	r0, r1
     9ee:	4041      	eorgt	r1, r0
     9f0:	bfb8      	it	lt
     9f2:	425b      	neglt	r3, r3
     9f4:	2b19      	cmp	r3, #25
     9f6:	bf88      	it	hi
     9f8:	4770      	bxhi	lr
     9fa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     9fe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     a02:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     a06:	bf18      	it	ne
     a08:	4240      	negne	r0, r0
     a0a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     a0e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     a12:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     a16:	bf18      	it	ne
     a18:	4249      	negne	r1, r1
     a1a:	ea92 0f03 	teq	r2, r3
     a1e:	d03f      	beq.n	aa0 <__addsf3+0xd8>
     a20:	f1a2 0201 	sub.w	r2, r2, #1
     a24:	fa41 fc03 	asr.w	ip, r1, r3
     a28:	eb10 000c 	adds.w	r0, r0, ip
     a2c:	f1c3 0320 	rsb	r3, r3, #32
     a30:	fa01 f103 	lsl.w	r1, r1, r3
     a34:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     a38:	d502      	bpl.n	a40 <__addsf3+0x78>
     a3a:	4249      	negs	r1, r1
     a3c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     a40:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     a44:	d313      	bcc.n	a6e <__addsf3+0xa6>
     a46:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
     a4a:	d306      	bcc.n	a5a <__addsf3+0x92>
     a4c:	0840      	lsrs	r0, r0, #1
     a4e:	ea4f 0131 	mov.w	r1, r1, rrx
     a52:	f102 0201 	add.w	r2, r2, #1
     a56:	2afe      	cmp	r2, #254	; 0xfe
     a58:	d251      	bcs.n	afe <__addsf3+0x136>
     a5a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     a5e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     a62:	bf08      	it	eq
     a64:	f020 0001 	biceq.w	r0, r0, #1
     a68:	ea40 0003 	orr.w	r0, r0, r3
     a6c:	4770      	bx	lr
     a6e:	0049      	lsls	r1, r1, #1
     a70:	eb40 0000 	adc.w	r0, r0, r0
     a74:	3a01      	subs	r2, #1
     a76:	bf28      	it	cs
     a78:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
     a7c:	d2ed      	bcs.n	a5a <__addsf3+0x92>
     a7e:	fab0 fc80 	clz	ip, r0
     a82:	f1ac 0c08 	sub.w	ip, ip, #8
     a86:	ebb2 020c 	subs.w	r2, r2, ip
     a8a:	fa00 f00c 	lsl.w	r0, r0, ip
     a8e:	bfaa      	itet	ge
     a90:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
     a94:	4252      	neglt	r2, r2
     a96:	4318      	orrge	r0, r3
     a98:	bfbc      	itt	lt
     a9a:	40d0      	lsrlt	r0, r2
     a9c:	4318      	orrlt	r0, r3
     a9e:	4770      	bx	lr
     aa0:	f092 0f00 	teq	r2, #0
     aa4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     aa8:	bf06      	itte	eq
     aaa:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     aae:	3201      	addeq	r2, #1
     ab0:	3b01      	subne	r3, #1
     ab2:	e7b5      	b.n	a20 <__addsf3+0x58>
     ab4:	ea4f 0341 	mov.w	r3, r1, lsl #1
     ab8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     abc:	bf18      	it	ne
     abe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     ac2:	d021      	beq.n	b08 <__addsf3+0x140>
     ac4:	ea92 0f03 	teq	r2, r3
     ac8:	d004      	beq.n	ad4 <__addsf3+0x10c>
     aca:	f092 0f00 	teq	r2, #0
     ace:	bf08      	it	eq
     ad0:	4608      	moveq	r0, r1
     ad2:	4770      	bx	lr
     ad4:	ea90 0f01 	teq	r0, r1
     ad8:	bf1c      	itt	ne
     ada:	2000      	movne	r0, #0
     adc:	4770      	bxne	lr
     ade:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     ae2:	d104      	bne.n	aee <__addsf3+0x126>
     ae4:	0040      	lsls	r0, r0, #1
     ae6:	bf28      	it	cs
     ae8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     aec:	4770      	bx	lr
     aee:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     af2:	bf3c      	itt	cc
     af4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     af8:	4770      	bxcc	lr
     afa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     afe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     b02:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     b06:	4770      	bx	lr
     b08:	ea7f 6222 	mvns.w	r2, r2, asr #24
     b0c:	bf16      	itet	ne
     b0e:	4608      	movne	r0, r1
     b10:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     b14:	4601      	movne	r1, r0
     b16:	0242      	lsls	r2, r0, #9
     b18:	bf06      	itte	eq
     b1a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     b1e:	ea90 0f01 	teqeq	r0, r1
     b22:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     b26:	4770      	bx	lr

00000b28 <__aeabi_ui2f>:
     b28:	f04f 0300 	mov.w	r3, #0
     b2c:	e004      	b.n	b38 <__aeabi_i2f+0x8>
     b2e:	bf00      	nop

00000b30 <__aeabi_i2f>:
     b30:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     b34:	bf48      	it	mi
     b36:	4240      	negmi	r0, r0
     b38:	ea5f 0c00 	movs.w	ip, r0
     b3c:	bf08      	it	eq
     b3e:	4770      	bxeq	lr
     b40:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     b44:	4601      	mov	r1, r0
     b46:	f04f 0000 	mov.w	r0, #0
     b4a:	e01c      	b.n	b86 <__aeabi_l2f+0x2a>

00000b4c <__aeabi_ul2f>:
     b4c:	ea50 0201 	orrs.w	r2, r0, r1
     b50:	bf08      	it	eq
     b52:	4770      	bxeq	lr
     b54:	f04f 0300 	mov.w	r3, #0
     b58:	e00a      	b.n	b70 <__aeabi_l2f+0x14>
     b5a:	bf00      	nop

00000b5c <__aeabi_l2f>:
     b5c:	ea50 0201 	orrs.w	r2, r0, r1
     b60:	bf08      	it	eq
     b62:	4770      	bxeq	lr
     b64:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     b68:	d502      	bpl.n	b70 <__aeabi_l2f+0x14>
     b6a:	4240      	negs	r0, r0
     b6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     b70:	ea5f 0c01 	movs.w	ip, r1
     b74:	bf02      	ittt	eq
     b76:	4684      	moveq	ip, r0
     b78:	4601      	moveq	r1, r0
     b7a:	2000      	moveq	r0, #0
     b7c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     b80:	bf08      	it	eq
     b82:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     b86:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     b8a:	fabc f28c 	clz	r2, ip
     b8e:	3a08      	subs	r2, #8
     b90:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     b94:	db10      	blt.n	bb8 <__aeabi_l2f+0x5c>
     b96:	fa01 fc02 	lsl.w	ip, r1, r2
     b9a:	4463      	add	r3, ip
     b9c:	fa00 fc02 	lsl.w	ip, r0, r2
     ba0:	f1c2 0220 	rsb	r2, r2, #32
     ba4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     ba8:	fa20 f202 	lsr.w	r2, r0, r2
     bac:	eb43 0002 	adc.w	r0, r3, r2
     bb0:	bf08      	it	eq
     bb2:	f020 0001 	biceq.w	r0, r0, #1
     bb6:	4770      	bx	lr
     bb8:	f102 0220 	add.w	r2, r2, #32
     bbc:	fa01 fc02 	lsl.w	ip, r1, r2
     bc0:	f1c2 0220 	rsb	r2, r2, #32
     bc4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     bc8:	fa21 f202 	lsr.w	r2, r1, r2
     bcc:	eb43 0002 	adc.w	r0, r3, r2
     bd0:	bf08      	it	eq
     bd2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     bd6:	4770      	bx	lr

00000bd8 <__aeabi_fmul>:
     bd8:	f04f 0cff 	mov.w	ip, #255	; 0xff
     bdc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     be0:	bf1e      	ittt	ne
     be2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     be6:	ea92 0f0c 	teqne	r2, ip
     bea:	ea93 0f0c 	teqne	r3, ip
     bee:	d06f      	beq.n	cd0 <__aeabi_fmul+0xf8>
     bf0:	441a      	add	r2, r3
     bf2:	ea80 0c01 	eor.w	ip, r0, r1
     bf6:	0240      	lsls	r0, r0, #9
     bf8:	bf18      	it	ne
     bfa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
     bfe:	d01e      	beq.n	c3e <__aeabi_fmul+0x66>
     c00:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     c04:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
     c08:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
     c0c:	fba0 3101 	umull	r3, r1, r0, r1
     c10:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     c14:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
     c18:	bf3e      	ittt	cc
     c1a:	0049      	lslcc	r1, r1, #1
     c1c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
     c20:	005b      	lslcc	r3, r3, #1
     c22:	ea40 0001 	orr.w	r0, r0, r1
     c26:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
     c2a:	2afd      	cmp	r2, #253	; 0xfd
     c2c:	d81d      	bhi.n	c6a <__aeabi_fmul+0x92>
     c2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     c32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     c36:	bf08      	it	eq
     c38:	f020 0001 	biceq.w	r0, r0, #1
     c3c:	4770      	bx	lr
     c3e:	f090 0f00 	teq	r0, #0
     c42:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     c46:	bf08      	it	eq
     c48:	0249      	lsleq	r1, r1, #9
     c4a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     c4e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
     c52:	3a7f      	subs	r2, #127	; 0x7f
     c54:	bfc2      	ittt	gt
     c56:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     c5a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     c5e:	4770      	bxgt	lr
     c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     c64:	f04f 0300 	mov.w	r3, #0
     c68:	3a01      	subs	r2, #1
     c6a:	dc5d      	bgt.n	d28 <__aeabi_fmul+0x150>
     c6c:	f112 0f19 	cmn.w	r2, #25
     c70:	bfdc      	itt	le
     c72:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
     c76:	4770      	bxle	lr
     c78:	f1c2 0200 	rsb	r2, r2, #0
     c7c:	0041      	lsls	r1, r0, #1
     c7e:	fa21 f102 	lsr.w	r1, r1, r2
     c82:	f1c2 0220 	rsb	r2, r2, #32
     c86:	fa00 fc02 	lsl.w	ip, r0, r2
     c8a:	ea5f 0031 	movs.w	r0, r1, rrx
     c8e:	f140 0000 	adc.w	r0, r0, #0
     c92:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
     c96:	bf08      	it	eq
     c98:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     c9c:	4770      	bx	lr
     c9e:	f092 0f00 	teq	r2, #0
     ca2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     ca6:	bf02      	ittt	eq
     ca8:	0040      	lsleq	r0, r0, #1
     caa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     cae:	3a01      	subeq	r2, #1
     cb0:	d0f9      	beq.n	ca6 <__aeabi_fmul+0xce>
     cb2:	ea40 000c 	orr.w	r0, r0, ip
     cb6:	f093 0f00 	teq	r3, #0
     cba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     cbe:	bf02      	ittt	eq
     cc0:	0049      	lsleq	r1, r1, #1
     cc2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     cc6:	3b01      	subeq	r3, #1
     cc8:	d0f9      	beq.n	cbe <__aeabi_fmul+0xe6>
     cca:	ea41 010c 	orr.w	r1, r1, ip
     cce:	e78f      	b.n	bf0 <__aeabi_fmul+0x18>
     cd0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     cd4:	ea92 0f0c 	teq	r2, ip
     cd8:	bf18      	it	ne
     cda:	ea93 0f0c 	teqne	r3, ip
     cde:	d00a      	beq.n	cf6 <__aeabi_fmul+0x11e>
     ce0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     ce4:	bf18      	it	ne
     ce6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     cea:	d1d8      	bne.n	c9e <__aeabi_fmul+0xc6>
     cec:	ea80 0001 	eor.w	r0, r0, r1
     cf0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     cf4:	4770      	bx	lr
     cf6:	f090 0f00 	teq	r0, #0
     cfa:	bf17      	itett	ne
     cfc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
     d00:	4608      	moveq	r0, r1
     d02:	f091 0f00 	teqne	r1, #0
     d06:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
     d0a:	d014      	beq.n	d36 <__aeabi_fmul+0x15e>
     d0c:	ea92 0f0c 	teq	r2, ip
     d10:	d101      	bne.n	d16 <__aeabi_fmul+0x13e>
     d12:	0242      	lsls	r2, r0, #9
     d14:	d10f      	bne.n	d36 <__aeabi_fmul+0x15e>
     d16:	ea93 0f0c 	teq	r3, ip
     d1a:	d103      	bne.n	d24 <__aeabi_fmul+0x14c>
     d1c:	024b      	lsls	r3, r1, #9
     d1e:	bf18      	it	ne
     d20:	4608      	movne	r0, r1
     d22:	d108      	bne.n	d36 <__aeabi_fmul+0x15e>
     d24:	ea80 0001 	eor.w	r0, r0, r1
     d28:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     d2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     d30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     d34:	4770      	bx	lr
     d36:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     d3a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
     d3e:	4770      	bx	lr

00000d40 <__aeabi_fdiv>:
     d40:	f04f 0cff 	mov.w	ip, #255	; 0xff
     d44:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     d48:	bf1e      	ittt	ne
     d4a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     d4e:	ea92 0f0c 	teqne	r2, ip
     d52:	ea93 0f0c 	teqne	r3, ip
     d56:	d069      	beq.n	e2c <__aeabi_fdiv+0xec>
     d58:	eba2 0203 	sub.w	r2, r2, r3
     d5c:	ea80 0c01 	eor.w	ip, r0, r1
     d60:	0249      	lsls	r1, r1, #9
     d62:	ea4f 2040 	mov.w	r0, r0, lsl #9
     d66:	d037      	beq.n	dd8 <__aeabi_fdiv+0x98>
     d68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     d6c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
     d70:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
     d74:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     d78:	428b      	cmp	r3, r1
     d7a:	bf38      	it	cc
     d7c:	005b      	lslcc	r3, r3, #1
     d7e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
     d82:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
     d86:	428b      	cmp	r3, r1
     d88:	bf24      	itt	cs
     d8a:	1a5b      	subcs	r3, r3, r1
     d8c:	ea40 000c 	orrcs.w	r0, r0, ip
     d90:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
     d94:	bf24      	itt	cs
     d96:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
     d9a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     d9e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
     da2:	bf24      	itt	cs
     da4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
     da8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     dac:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
     db0:	bf24      	itt	cs
     db2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
     db6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     dba:	011b      	lsls	r3, r3, #4
     dbc:	bf18      	it	ne
     dbe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
     dc2:	d1e0      	bne.n	d86 <__aeabi_fdiv+0x46>
     dc4:	2afd      	cmp	r2, #253	; 0xfd
     dc6:	f63f af50 	bhi.w	c6a <__aeabi_fmul+0x92>
     dca:	428b      	cmp	r3, r1
     dcc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     dd0:	bf08      	it	eq
     dd2:	f020 0001 	biceq.w	r0, r0, #1
     dd6:	4770      	bx	lr
     dd8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     ddc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     de0:	327f      	adds	r2, #127	; 0x7f
     de2:	bfc2      	ittt	gt
     de4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     de8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     dec:	4770      	bxgt	lr
     dee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     df2:	f04f 0300 	mov.w	r3, #0
     df6:	3a01      	subs	r2, #1
     df8:	e737      	b.n	c6a <__aeabi_fmul+0x92>
     dfa:	f092 0f00 	teq	r2, #0
     dfe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     e02:	bf02      	ittt	eq
     e04:	0040      	lsleq	r0, r0, #1
     e06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     e0a:	3a01      	subeq	r2, #1
     e0c:	d0f9      	beq.n	e02 <__aeabi_fdiv+0xc2>
     e0e:	ea40 000c 	orr.w	r0, r0, ip
     e12:	f093 0f00 	teq	r3, #0
     e16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     e1a:	bf02      	ittt	eq
     e1c:	0049      	lsleq	r1, r1, #1
     e1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     e22:	3b01      	subeq	r3, #1
     e24:	d0f9      	beq.n	e1a <__aeabi_fdiv+0xda>
     e26:	ea41 010c 	orr.w	r1, r1, ip
     e2a:	e795      	b.n	d58 <__aeabi_fdiv+0x18>
     e2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     e30:	ea92 0f0c 	teq	r2, ip
     e34:	d108      	bne.n	e48 <__aeabi_fdiv+0x108>
     e36:	0242      	lsls	r2, r0, #9
     e38:	f47f af7d 	bne.w	d36 <__aeabi_fmul+0x15e>
     e3c:	ea93 0f0c 	teq	r3, ip
     e40:	f47f af70 	bne.w	d24 <__aeabi_fmul+0x14c>
     e44:	4608      	mov	r0, r1
     e46:	e776      	b.n	d36 <__aeabi_fmul+0x15e>
     e48:	ea93 0f0c 	teq	r3, ip
     e4c:	d104      	bne.n	e58 <__aeabi_fdiv+0x118>
     e4e:	024b      	lsls	r3, r1, #9
     e50:	f43f af4c 	beq.w	cec <__aeabi_fmul+0x114>
     e54:	4608      	mov	r0, r1
     e56:	e76e      	b.n	d36 <__aeabi_fmul+0x15e>
     e58:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     e5c:	bf18      	it	ne
     e5e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     e62:	d1ca      	bne.n	dfa <__aeabi_fdiv+0xba>
     e64:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
     e68:	f47f af5c 	bne.w	d24 <__aeabi_fmul+0x14c>
     e6c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
     e70:	f47f af3c 	bne.w	cec <__aeabi_fmul+0x114>
     e74:	e75f      	b.n	d36 <__aeabi_fmul+0x15e>
     e76:	bf00      	nop

00000e78 <__gesf2>:
     e78:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
     e7c:	e006      	b.n	e8c <__cmpsf2+0x4>
     e7e:	bf00      	nop

00000e80 <__lesf2>:
     e80:	f04f 0c01 	mov.w	ip, #1
     e84:	e002      	b.n	e8c <__cmpsf2+0x4>
     e86:	bf00      	nop

00000e88 <__cmpsf2>:
     e88:	f04f 0c01 	mov.w	ip, #1
     e8c:	f84d cd04 	str.w	ip, [sp, #-4]!
     e90:	ea4f 0240 	mov.w	r2, r0, lsl #1
     e94:	ea4f 0341 	mov.w	r3, r1, lsl #1
     e98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     e9c:	bf18      	it	ne
     e9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     ea2:	d011      	beq.n	ec8 <__cmpsf2+0x40>
     ea4:	b001      	add	sp, #4
     ea6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
     eaa:	bf18      	it	ne
     eac:	ea90 0f01 	teqne	r0, r1
     eb0:	bf58      	it	pl
     eb2:	ebb2 0003 	subspl.w	r0, r2, r3
     eb6:	bf88      	it	hi
     eb8:	17c8      	asrhi	r0, r1, #31
     eba:	bf38      	it	cc
     ebc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
     ec0:	bf18      	it	ne
     ec2:	f040 0001 	orrne.w	r0, r0, #1
     ec6:	4770      	bx	lr
     ec8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     ecc:	d102      	bne.n	ed4 <__cmpsf2+0x4c>
     ece:	ea5f 2c40 	movs.w	ip, r0, lsl #9
     ed2:	d105      	bne.n	ee0 <__cmpsf2+0x58>
     ed4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
     ed8:	d1e4      	bne.n	ea4 <__cmpsf2+0x1c>
     eda:	ea5f 2c41 	movs.w	ip, r1, lsl #9
     ede:	d0e1      	beq.n	ea4 <__cmpsf2+0x1c>
     ee0:	f85d 0b04 	ldr.w	r0, [sp], #4
     ee4:	4770      	bx	lr
     ee6:	bf00      	nop

00000ee8 <__aeabi_cfrcmple>:
     ee8:	4684      	mov	ip, r0
     eea:	4608      	mov	r0, r1
     eec:	4661      	mov	r1, ip
     eee:	e7ff      	b.n	ef0 <__aeabi_cfcmpeq>

00000ef0 <__aeabi_cfcmpeq>:
     ef0:	b50f      	push	{r0, r1, r2, r3, lr}
     ef2:	f7ff ffc9 	bl	e88 <__cmpsf2>
     ef6:	2800      	cmp	r0, #0
     ef8:	bf48      	it	mi
     efa:	f110 0f00 	cmnmi.w	r0, #0
     efe:	bd0f      	pop	{r0, r1, r2, r3, pc}

00000f00 <__aeabi_fcmpeq>:
     f00:	f84d ed08 	str.w	lr, [sp, #-8]!
     f04:	f7ff fff4 	bl	ef0 <__aeabi_cfcmpeq>
     f08:	bf0c      	ite	eq
     f0a:	2001      	moveq	r0, #1
     f0c:	2000      	movne	r0, #0
     f0e:	f85d fb08 	ldr.w	pc, [sp], #8
     f12:	bf00      	nop

00000f14 <__aeabi_fcmplt>:
     f14:	f84d ed08 	str.w	lr, [sp, #-8]!
     f18:	f7ff ffea 	bl	ef0 <__aeabi_cfcmpeq>
     f1c:	bf34      	ite	cc
     f1e:	2001      	movcc	r0, #1
     f20:	2000      	movcs	r0, #0
     f22:	f85d fb08 	ldr.w	pc, [sp], #8
     f26:	bf00      	nop

00000f28 <__aeabi_fcmple>:
     f28:	f84d ed08 	str.w	lr, [sp, #-8]!
     f2c:	f7ff ffe0 	bl	ef0 <__aeabi_cfcmpeq>
     f30:	bf94      	ite	ls
     f32:	2001      	movls	r0, #1
     f34:	2000      	movhi	r0, #0
     f36:	f85d fb08 	ldr.w	pc, [sp], #8
     f3a:	bf00      	nop

00000f3c <__aeabi_fcmpge>:
     f3c:	f84d ed08 	str.w	lr, [sp, #-8]!
     f40:	f7ff ffd2 	bl	ee8 <__aeabi_cfrcmple>
     f44:	bf94      	ite	ls
     f46:	2001      	movls	r0, #1
     f48:	2000      	movhi	r0, #0
     f4a:	f85d fb08 	ldr.w	pc, [sp], #8
     f4e:	bf00      	nop

00000f50 <__aeabi_fcmpgt>:
     f50:	f84d ed08 	str.w	lr, [sp, #-8]!
     f54:	f7ff ffc8 	bl	ee8 <__aeabi_cfrcmple>
     f58:	bf34      	ite	cc
     f5a:	2001      	movcc	r0, #1
     f5c:	2000      	movcs	r0, #0
     f5e:	f85d fb08 	ldr.w	pc, [sp], #8
     f62:	bf00      	nop

00000f64 <__aeabi_f2iz>:
     f64:	ea4f 0240 	mov.w	r2, r0, lsl #1
     f68:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
     f6c:	d30f      	bcc.n	f8e <__aeabi_f2iz+0x2a>
     f6e:	f04f 039e 	mov.w	r3, #158	; 0x9e
     f72:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
     f76:	d90d      	bls.n	f94 <__aeabi_f2iz+0x30>
     f78:	ea4f 2300 	mov.w	r3, r0, lsl #8
     f7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     f80:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     f84:	fa23 f002 	lsr.w	r0, r3, r2
     f88:	bf18      	it	ne
     f8a:	4240      	negne	r0, r0
     f8c:	4770      	bx	lr
     f8e:	f04f 0000 	mov.w	r0, #0
     f92:	4770      	bx	lr
     f94:	f112 0f61 	cmn.w	r2, #97	; 0x61
     f98:	d101      	bne.n	f9e <__aeabi_f2iz+0x3a>
     f9a:	0242      	lsls	r2, r0, #9
     f9c:	d105      	bne.n	faa <__aeabi_f2iz+0x46>
     f9e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
     fa2:	bf08      	it	eq
     fa4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     fa8:	4770      	bx	lr
     faa:	f04f 0000 	mov.w	r0, #0
     fae:	4770      	bx	lr

00000fb0 <__aeabi_f2uiz>:
     fb0:	0042      	lsls	r2, r0, #1
     fb2:	d20e      	bcs.n	fd2 <__aeabi_f2uiz+0x22>
     fb4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
     fb8:	d30b      	bcc.n	fd2 <__aeabi_f2uiz+0x22>
     fba:	f04f 039e 	mov.w	r3, #158	; 0x9e
     fbe:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
     fc2:	d409      	bmi.n	fd8 <__aeabi_f2uiz+0x28>
     fc4:	ea4f 2300 	mov.w	r3, r0, lsl #8
     fc8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     fcc:	fa23 f002 	lsr.w	r0, r3, r2
     fd0:	4770      	bx	lr
     fd2:	f04f 0000 	mov.w	r0, #0
     fd6:	4770      	bx	lr
     fd8:	f112 0f61 	cmn.w	r2, #97	; 0x61
     fdc:	d101      	bne.n	fe2 <__aeabi_f2uiz+0x32>
     fde:	0242      	lsls	r2, r0, #9
     fe0:	d102      	bne.n	fe8 <__aeabi_f2uiz+0x38>
     fe2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     fe6:	4770      	bx	lr
     fe8:	f04f 0000 	mov.w	r0, #0
     fec:	4770      	bx	lr
     fee:	bf00      	nop

00000ff0 <__aeabi_uldivmod>:
     ff0:	b953      	cbnz	r3, 1008 <CONFIG_FPROTECT_BLOCK_SIZE+0x8>
     ff2:	b94a      	cbnz	r2, 1008 <CONFIG_FPROTECT_BLOCK_SIZE+0x8>
     ff4:	2900      	cmp	r1, #0
     ff6:	bf08      	it	eq
     ff8:	2800      	cmpeq	r0, #0
     ffa:	bf1c      	itt	ne
     ffc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    1000:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    1004:	f000 b80c 	b.w	1020 <__aeabi_idiv0>
    1008:	f1ad 0c08 	sub.w	ip, sp, #8
    100c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    1010:	f00b fef2 	bl	cdf8 <__udivmoddi4>
    1014:	f8dd e004 	ldr.w	lr, [sp, #4]
    1018:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    101c:	b004      	add	sp, #16
    101e:	4770      	bx	lr

00001020 <__aeabi_idiv0>:
    1020:	4770      	bx	lr
    1022:	bf00      	nop

00001024 <__gedf2>:
    1024:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    1028:	e006      	b.n	1038 <__cmpdf2+0x4>
    102a:	bf00      	nop

0000102c <__ledf2>:
    102c:	f04f 0c01 	mov.w	ip, #1
    1030:	e002      	b.n	1038 <__cmpdf2+0x4>
    1032:	bf00      	nop

00001034 <__cmpdf2>:
    1034:	f04f 0c01 	mov.w	ip, #1
    1038:	f84d cd04 	str.w	ip, [sp, #-4]!
    103c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    1040:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    1044:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    1048:	bf18      	it	ne
    104a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    104e:	d01b      	beq.n	1088 <__cmpdf2+0x54>
    1050:	b001      	add	sp, #4
    1052:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    1056:	bf0c      	ite	eq
    1058:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    105c:	ea91 0f03 	teqne	r1, r3
    1060:	bf02      	ittt	eq
    1062:	ea90 0f02 	teqeq	r0, r2
    1066:	2000      	moveq	r0, #0
    1068:	4770      	bxeq	lr
    106a:	f110 0f00 	cmn.w	r0, #0
    106e:	ea91 0f03 	teq	r1, r3
    1072:	bf58      	it	pl
    1074:	4299      	cmppl	r1, r3
    1076:	bf08      	it	eq
    1078:	4290      	cmpeq	r0, r2
    107a:	bf2c      	ite	cs
    107c:	17d8      	asrcs	r0, r3, #31
    107e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    1082:	f040 0001 	orr.w	r0, r0, #1
    1086:	4770      	bx	lr
    1088:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    108c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    1090:	d102      	bne.n	1098 <__cmpdf2+0x64>
    1092:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    1096:	d107      	bne.n	10a8 <__cmpdf2+0x74>
    1098:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    109c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    10a0:	d1d6      	bne.n	1050 <__cmpdf2+0x1c>
    10a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    10a6:	d0d3      	beq.n	1050 <__cmpdf2+0x1c>
    10a8:	f85d 0b04 	ldr.w	r0, [sp], #4
    10ac:	4770      	bx	lr
    10ae:	bf00      	nop

000010b0 <__aeabi_cdrcmple>:
    10b0:	4684      	mov	ip, r0
    10b2:	4610      	mov	r0, r2
    10b4:	4662      	mov	r2, ip
    10b6:	468c      	mov	ip, r1
    10b8:	4619      	mov	r1, r3
    10ba:	4663      	mov	r3, ip
    10bc:	e000      	b.n	10c0 <__aeabi_cdcmpeq>
    10be:	bf00      	nop

000010c0 <__aeabi_cdcmpeq>:
    10c0:	b501      	push	{r0, lr}
    10c2:	f7ff ffb7 	bl	1034 <__cmpdf2>
    10c6:	2800      	cmp	r0, #0
    10c8:	bf48      	it	mi
    10ca:	f110 0f00 	cmnmi.w	r0, #0
    10ce:	bd01      	pop	{r0, pc}

000010d0 <__aeabi_dcmpeq>:
    10d0:	f84d ed08 	str.w	lr, [sp, #-8]!
    10d4:	f7ff fff4 	bl	10c0 <__aeabi_cdcmpeq>
    10d8:	bf0c      	ite	eq
    10da:	2001      	moveq	r0, #1
    10dc:	2000      	movne	r0, #0
    10de:	f85d fb08 	ldr.w	pc, [sp], #8
    10e2:	bf00      	nop

000010e4 <__aeabi_dcmplt>:
    10e4:	f84d ed08 	str.w	lr, [sp, #-8]!
    10e8:	f7ff ffea 	bl	10c0 <__aeabi_cdcmpeq>
    10ec:	bf34      	ite	cc
    10ee:	2001      	movcc	r0, #1
    10f0:	2000      	movcs	r0, #0
    10f2:	f85d fb08 	ldr.w	pc, [sp], #8
    10f6:	bf00      	nop

000010f8 <__aeabi_dcmple>:
    10f8:	f84d ed08 	str.w	lr, [sp, #-8]!
    10fc:	f7ff ffe0 	bl	10c0 <__aeabi_cdcmpeq>
    1100:	bf94      	ite	ls
    1102:	2001      	movls	r0, #1
    1104:	2000      	movhi	r0, #0
    1106:	f85d fb08 	ldr.w	pc, [sp], #8
    110a:	bf00      	nop

0000110c <__aeabi_dcmpge>:
    110c:	f84d ed08 	str.w	lr, [sp, #-8]!
    1110:	f7ff ffce 	bl	10b0 <__aeabi_cdrcmple>
    1114:	bf94      	ite	ls
    1116:	2001      	movls	r0, #1
    1118:	2000      	movhi	r0, #0
    111a:	f85d fb08 	ldr.w	pc, [sp], #8
    111e:	bf00      	nop

00001120 <__aeabi_dcmpgt>:
    1120:	f84d ed08 	str.w	lr, [sp, #-8]!
    1124:	f7ff ffc4 	bl	10b0 <__aeabi_cdrcmple>
    1128:	bf34      	ite	cc
    112a:	2001      	movcc	r0, #1
    112c:	2000      	movcs	r0, #0
    112e:	f85d fb08 	ldr.w	pc, [sp], #8
    1132:	bf00      	nop

00001134 <ocrypto_bigint_add256>:
    1134:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    1138:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    113c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    1140:	185b      	adds	r3, r3, r1
    1142:	eb54 040c 	adcs.w	r4, r4, ip
    1146:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    114a:	414d      	adcs	r5, r1
    114c:	eb56 060c 	adcs.w	r6, r6, ip
    1150:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    1154:	414f      	adcs	r7, r1
    1156:	eb58 080c 	adcs.w	r8, r8, ip
    115a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    115e:	eb59 0901 	adcs.w	r9, r9, r1
    1162:	eb5a 0a0c 	adcs.w	sl, sl, ip
    1166:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    116a:	4180      	sbcs	r0, r0
    116c:	3001      	adds	r0, #1
    116e:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    1172:	4770      	bx	lr

00001174 <ocrypto_bigint_sub256>:
    1174:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    1178:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    117c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    1180:	1a5b      	subs	r3, r3, r1
    1182:	eb74 040c 	sbcs.w	r4, r4, ip
    1186:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    118a:	418d      	sbcs	r5, r1
    118c:	eb76 060c 	sbcs.w	r6, r6, ip
    1190:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    1194:	418f      	sbcs	r7, r1
    1196:	eb78 080c 	sbcs.w	r8, r8, ip
    119a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    119e:	eb79 0901 	sbcs.w	r9, r9, r1
    11a2:	eb7a 0a0c 	sbcs.w	sl, sl, ip
    11a6:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    11aa:	4180      	sbcs	r0, r0
    11ac:	4240      	negs	r0, r0
    11ae:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    11b2:	4770      	bx	lr

000011b4 <ocrypto_bigint_cadd256>:
    11b4:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    11b8:	4252      	negs	r2, r2
    11ba:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
    11be:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
    11c2:	4017      	ands	r7, r2
    11c4:	19db      	adds	r3, r3, r7
    11c6:	ea18 0802 	ands.w	r8, r8, r2
    11ca:	eb54 0408 	adcs.w	r4, r4, r8
    11ce:	ea19 0902 	ands.w	r9, r9, r2
    11d2:	eb55 0509 	adcs.w	r5, r5, r9
    11d6:	ea1a 0a02 	ands.w	sl, sl, r2
    11da:	eb56 060a 	adcs.w	r6, r6, sl
    11de:	c078      	stmia	r0!, {r3, r4, r5, r6}
    11e0:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
    11e4:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
    11e8:	4017      	ands	r7, r2
    11ea:	417b      	adcs	r3, r7
    11ec:	ea18 0802 	ands.w	r8, r8, r2
    11f0:	eb54 0408 	adcs.w	r4, r4, r8
    11f4:	ea19 0902 	ands.w	r9, r9, r2
    11f8:	eb55 0509 	adcs.w	r5, r5, r9
    11fc:	ea1a 0a02 	ands.w	sl, sl, r2
    1200:	eb56 060a 	adcs.w	r6, r6, sl
    1204:	c078      	stmia	r0!, {r3, r4, r5, r6}
    1206:	4180      	sbcs	r0, r0
    1208:	3001      	adds	r0, #1
    120a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    120e:	4770      	bx	lr

00001210 <ocrypto_bigint_csub256>:
    1210:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    1214:	4252      	negs	r2, r2
    1216:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
    121a:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
    121e:	4017      	ands	r7, r2
    1220:	1bdb      	subs	r3, r3, r7
    1222:	ea18 0802 	ands.w	r8, r8, r2
    1226:	eb74 0408 	sbcs.w	r4, r4, r8
    122a:	ea19 0902 	ands.w	r9, r9, r2
    122e:	eb75 0509 	sbcs.w	r5, r5, r9
    1232:	ea1a 0a02 	ands.w	sl, sl, r2
    1236:	eb76 060a 	sbcs.w	r6, r6, sl
    123a:	c078      	stmia	r0!, {r3, r4, r5, r6}
    123c:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
    1240:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
    1244:	4017      	ands	r7, r2
    1246:	41bb      	sbcs	r3, r7
    1248:	ea18 0802 	ands.w	r8, r8, r2
    124c:	eb74 0408 	sbcs.w	r4, r4, r8
    1250:	ea19 0902 	ands.w	r9, r9, r2
    1254:	eb75 0509 	sbcs.w	r5, r5, r9
    1258:	ea1a 0a02 	ands.w	sl, sl, r2
    125c:	eb76 060a 	sbcs.w	r6, r6, sl
    1260:	c078      	stmia	r0!, {r3, r4, r5, r6}
    1262:	4180      	sbcs	r0, r0
    1264:	4240      	negs	r0, r0
    1266:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    126a:	4770      	bx	lr

0000126c <ocrypto_bigint_cswap256>:
    126c:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
    1270:	4252      	negs	r2, r2
    1272:	f04f 0804 	mov.w	r8, #4

00001276 <cswap256_loop>:
    1276:	e890 0030 	ldmia.w	r0, {r4, r5}
    127a:	e891 00c0 	ldmia.w	r1, {r6, r7}
    127e:	1ba3      	subs	r3, r4, r6
    1280:	4013      	ands	r3, r2
    1282:	1ae4      	subs	r4, r4, r3
    1284:	18f6      	adds	r6, r6, r3
    1286:	1beb      	subs	r3, r5, r7
    1288:	4013      	ands	r3, r2
    128a:	1aed      	subs	r5, r5, r3
    128c:	18ff      	adds	r7, r7, r3
    128e:	c030      	stmia	r0!, {r4, r5}
    1290:	c1c0      	stmia	r1!, {r6, r7}
    1292:	f1b8 0801 	subs.w	r8, r8, #1
    1296:	d1ee      	bne.n	1276 <cswap256_loop>
    1298:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
    129c:	4770      	bx	lr
    129e:	bf00      	nop

000012a0 <ocrypto_mul256_noframe>:
    12a0:	b500      	push	{lr}
    12a2:	e892 07dc 	ldmia.w	r2, {r2, r3, r4, r6, r7, r8, r9, sl}
    12a6:	e92d 07dc 	stmdb	sp!, {r2, r3, r4, r6, r7, r8, r9, sl}
    12aa:	e8b1 5780 	ldmia.w	r1!, {r7, r8, r9, sl, ip, lr}
    12ae:	b402      	push	{r1}
    12b0:	fba7 5102 	umull	r5, r1, r7, r2
    12b4:	950a      	str	r5, [sp, #40]	; 0x28
    12b6:	fba8 0b02 	umull	r0, fp, r8, r2
    12ba:	fbe7 1063 	umaal	r1, r0, r7, r3
    12be:	fbe9 b062 	umaal	fp, r0, r9, r2
    12c2:	910b      	str	r1, [sp, #44]	; 0x2c
    12c4:	fba8 5103 	umull	r5, r1, r8, r3
    12c8:	fbea 0162 	umaal	r0, r1, sl, r2
    12cc:	fbe7 b564 	umaal	fp, r5, r7, r4
    12d0:	fbe7 0566 	umaal	r0, r5, r7, r6
    12d4:	fbe8 1566 	umaal	r1, r5, r8, r6
    12d8:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
    12dc:	fba9 b603 	umull	fp, r6, r9, r3
    12e0:	fbea 1663 	umaal	r1, r6, sl, r3
    12e4:	fbec 5663 	umaal	r5, r6, ip, r3
    12e8:	fbe8 0b64 	umaal	r0, fp, r8, r4
    12ec:	fbe9 1b64 	umaal	r1, fp, r9, r4
    12f0:	fbea 5b64 	umaal	r5, fp, sl, r4
    12f4:	fbec 6b64 	umaal	r6, fp, ip, r4
    12f8:	900d      	str	r0, [sp, #52]	; 0x34
    12fa:	fbac 3002 	umull	r3, r0, ip, r2
    12fe:	9c05      	ldr	r4, [sp, #20]
    1300:	fbee 5062 	umaal	r5, r0, lr, r2
    1304:	fbe9 6064 	umaal	r6, r0, r9, r4
    1308:	fbea b064 	umaal	fp, r0, sl, r4
    130c:	fbe7 3164 	umaal	r3, r1, r7, r4
    1310:	fbe8 5164 	umaal	r5, r1, r8, r4
    1314:	9c06      	ldr	r4, [sp, #24]
    1316:	fbe8 6164 	umaal	r6, r1, r8, r4
    131a:	fbe9 b164 	umaal	fp, r1, r9, r4
    131e:	fbea 0164 	umaal	r0, r1, sl, r4
    1322:	930e      	str	r3, [sp, #56]	; 0x38
    1324:	fba7 3204 	umull	r3, r2, r7, r4
    1328:	9c07      	ldr	r4, [sp, #28]
    132a:	fbe7 6264 	umaal	r6, r2, r7, r4
    132e:	fbe8 b264 	umaal	fp, r2, r8, r4
    1332:	fbe9 0264 	umaal	r0, r2, r9, r4
    1336:	fbea 1264 	umaal	r1, r2, sl, r4
    133a:	9c04      	ldr	r4, [sp, #16]
    133c:	fbe9 5364 	umaal	r5, r3, r9, r4
    1340:	fbea 6364 	umaal	r6, r3, sl, r4
    1344:	9c08      	ldr	r4, [sp, #32]
    1346:	fbe7 b364 	umaal	fp, r3, r7, r4
    134a:	fbe8 0364 	umaal	r0, r3, r8, r4
    134e:	fbe9 1364 	umaal	r1, r3, r9, r4
    1352:	fbea 2364 	umaal	r2, r3, sl, r4
    1356:	950f      	str	r5, [sp, #60]	; 0x3c
    1358:	f85d 9b04 	ldr.w	r9, [sp], #4
    135c:	e899 0600 	ldmia.w	r9, {r9, sl}
    1360:	f8dd 8000 	ldr.w	r8, [sp]
    1364:	fba9 5408 	umull	r5, r4, r9, r8
    1368:	fbea b468 	umaal	fp, r4, sl, r8
    136c:	f8dd 8010 	ldr.w	r8, [sp, #16]
    1370:	fbec 0468 	umaal	r0, r4, ip, r8
    1374:	fbee 1468 	umaal	r1, r4, lr, r8
    1378:	fbe9 2468 	umaal	r2, r4, r9, r8
    137c:	fbea 3468 	umaal	r3, r4, sl, r8
    1380:	f8dd 8004 	ldr.w	r8, [sp, #4]
    1384:	fbee 6568 	umaal	r6, r5, lr, r8
    1388:	fbe9 b568 	umaal	fp, r5, r9, r8
    138c:	fbea 0568 	umaal	r0, r5, sl, r8
    1390:	f8dd 8014 	ldr.w	r8, [sp, #20]
    1394:	fbec 1568 	umaal	r1, r5, ip, r8
    1398:	fbee 2568 	umaal	r2, r5, lr, r8
    139c:	fbe9 3568 	umaal	r3, r5, r9, r8
    13a0:	fbea 4568 	umaal	r4, r5, sl, r8
    13a4:	960f      	str	r6, [sp, #60]	; 0x3c
    13a6:	f8dd 8008 	ldr.w	r8, [sp, #8]
    13aa:	fbae 7608 	umull	r7, r6, lr, r8
    13ae:	fbe9 0668 	umaal	r0, r6, r9, r8
    13b2:	fbea 1668 	umaal	r1, r6, sl, r8
    13b6:	f8dd 8018 	ldr.w	r8, [sp, #24]
    13ba:	fbec 2668 	umaal	r2, r6, ip, r8
    13be:	fbee 3668 	umaal	r3, r6, lr, r8
    13c2:	fbe9 4668 	umaal	r4, r6, r9, r8
    13c6:	fbea 5668 	umaal	r5, r6, sl, r8
    13ca:	f8dd 800c 	ldr.w	r8, [sp, #12]
    13ce:	fbec b768 	umaal	fp, r7, ip, r8
    13d2:	fbee 0768 	umaal	r0, r7, lr, r8
    13d6:	fbe9 1768 	umaal	r1, r7, r9, r8
    13da:	fbea 2768 	umaal	r2, r7, sl, r8
    13de:	f8dd 801c 	ldr.w	r8, [sp, #28]
    13e2:	fbec 3768 	umaal	r3, r7, ip, r8
    13e6:	fbee 4768 	umaal	r4, r7, lr, r8
    13ea:	fbe9 5768 	umaal	r5, r7, r9, r8
    13ee:	fbea 6768 	umaal	r6, r7, sl, r8
    13f2:	b008      	add	sp, #32
    13f4:	bd00      	pop	{pc}
    13f6:	bf00      	nop

000013f8 <ocrypto_bigint_mul256>:
    13f8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    13fc:	b087      	sub	sp, #28
    13fe:	f7ff ff4f 	bl	12a0 <ocrypto_mul256_noframe>
    1402:	f8dd 801c 	ldr.w	r8, [sp, #28]
    1406:	f108 0820 	add.w	r8, r8, #32
    140a:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
    140e:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
    1410:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
    1414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00001418 <ocrypto_sqr256_noframe>:
    1418:	b500      	push	{lr}
    141a:	e891 5798 	ldmia.w	r1, {r3, r4, r7, r8, r9, sl, ip, lr}
    141e:	fba3 5203 	umull	r5, r2, r3, r3
    1422:	9501      	str	r5, [sp, #4]
    1424:	fba3 0104 	umull	r0, r1, r3, r4
    1428:	fbe3 2064 	umaal	r2, r0, r3, r4
    142c:	fbe3 1067 	umaal	r1, r0, r3, r7
    1430:	9202      	str	r2, [sp, #8]
    1432:	fba3 5207 	umull	r5, r2, r3, r7
    1436:	fbe3 0268 	umaal	r0, r2, r3, r8
    143a:	fbe4 1564 	umaal	r1, r5, r4, r4
    143e:	fbe3 0568 	umaal	r0, r5, r3, r8
    1442:	fbe3 2569 	umaal	r2, r5, r3, r9
    1446:	9103      	str	r1, [sp, #12]
    1448:	fba4 b607 	umull	fp, r6, r4, r7
    144c:	fbe3 2669 	umaal	r2, r6, r3, r9
    1450:	fbe3 566a 	umaal	r5, r6, r3, sl
    1454:	fbe4 0b67 	umaal	r0, fp, r4, r7
    1458:	fbe4 2b68 	umaal	r2, fp, r4, r8
    145c:	fbe3 5b6a 	umaal	r5, fp, r3, sl
    1460:	fbe3 6b6c 	umaal	r6, fp, r3, ip
    1464:	9004      	str	r0, [sp, #16]
    1466:	fba4 1008 	umull	r1, r0, r4, r8
    146a:	fbe4 5069 	umaal	r5, r0, r4, r9
    146e:	fbe3 606c 	umaal	r6, r0, r3, ip
    1472:	fbe3 b06e 	umaal	fp, r0, r3, lr
    1476:	fbe7 2167 	umaal	r2, r1, r7, r7
    147a:	fbe4 5169 	umaal	r5, r1, r4, r9
    147e:	fbe4 616a 	umaal	r6, r1, r4, sl
    1482:	fbe3 b16e 	umaal	fp, r1, r3, lr
    1486:	fbe4 016e 	umaal	r0, r1, r4, lr
    148a:	9205      	str	r2, [sp, #20]
    148c:	fba7 3208 	umull	r3, r2, r7, r8
    1490:	fbe4 626a 	umaal	r6, r2, r4, sl
    1494:	fbe4 b26c 	umaal	fp, r2, r4, ip
    1498:	fbe4 026e 	umaal	r0, r2, r4, lr
    149c:	fbe7 126e 	umaal	r1, r2, r7, lr
    14a0:	fbe7 5368 	umaal	r5, r3, r7, r8
    14a4:	fbe7 6369 	umaal	r6, r3, r7, r9
    14a8:	fbe4 b36c 	umaal	fp, r3, r4, ip
    14ac:	fbe7 036c 	umaal	r0, r3, r7, ip
    14b0:	fbe7 136e 	umaal	r1, r3, r7, lr
    14b4:	fbe8 236e 	umaal	r2, r3, r8, lr
    14b8:	9506      	str	r5, [sp, #24]
    14ba:	fba7 5409 	umull	r5, r4, r7, r9
    14be:	fbe7 b46a 	umaal	fp, r4, r7, sl
    14c2:	fbe7 046c 	umaal	r0, r4, r7, ip
    14c6:	fbe8 146c 	umaal	r1, r4, r8, ip
    14ca:	fbe8 246e 	umaal	r2, r4, r8, lr
    14ce:	fbe9 346e 	umaal	r3, r4, r9, lr
    14d2:	fbe8 6568 	umaal	r6, r5, r8, r8
    14d6:	fbe7 b56a 	umaal	fp, r5, r7, sl
    14da:	fbe8 056a 	umaal	r0, r5, r8, sl
    14de:	fbe8 156c 	umaal	r1, r5, r8, ip
    14e2:	fbe9 256c 	umaal	r2, r5, r9, ip
    14e6:	fbe9 356e 	umaal	r3, r5, r9, lr
    14ea:	fbea 456e 	umaal	r4, r5, sl, lr
    14ee:	9607      	str	r6, [sp, #28]
    14f0:	fba8 7609 	umull	r7, r6, r8, r9
    14f4:	fbe8 066a 	umaal	r0, r6, r8, sl
    14f8:	fbe9 166a 	umaal	r1, r6, r9, sl
    14fc:	fbe9 266c 	umaal	r2, r6, r9, ip
    1500:	fbea 366c 	umaal	r3, r6, sl, ip
    1504:	fbea 466e 	umaal	r4, r6, sl, lr
    1508:	fbec 566e 	umaal	r5, r6, ip, lr
    150c:	fbe8 b769 	umaal	fp, r7, r8, r9
    1510:	fbe9 0769 	umaal	r0, r7, r9, r9
    1514:	fbe9 176a 	umaal	r1, r7, r9, sl
    1518:	fbea 276a 	umaal	r2, r7, sl, sl
    151c:	fbea 376c 	umaal	r3, r7, sl, ip
    1520:	fbec 476c 	umaal	r4, r7, ip, ip
    1524:	fbec 576e 	umaal	r5, r7, ip, lr
    1528:	fbee 676e 	umaal	r6, r7, lr, lr
    152c:	bd00      	pop	{pc}
    152e:	bf00      	nop

00001530 <ocrypto_bigint_sqr256>:
    1530:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1534:	b087      	sub	sp, #28
    1536:	f7ff ff6f 	bl	1418 <ocrypto_sqr256_noframe>
    153a:	f8dd 801c 	ldr.w	r8, [sp, #28]
    153e:	f108 0820 	add.w	r8, r8, #32
    1542:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
    1546:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
    1548:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
    154c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00001550 <ocrypto_constant_time_equal>:
    1550:	b430      	push	{r4, r5}
    1552:	f04f 0300 	mov.w	r3, #0

00001556 <constant_time_equal_loop>:
    1556:	f810 4b01 	ldrb.w	r4, [r0], #1
    155a:	f811 5b01 	ldrb.w	r5, [r1], #1
    155e:	3a01      	subs	r2, #1
    1560:	ea84 0405 	eor.w	r4, r4, r5
    1564:	ea43 0304 	orr.w	r3, r3, r4
    1568:	d1f5      	bne.n	1556 <constant_time_equal_loop>
    156a:	f1a3 0301 	sub.w	r3, r3, #1
    156e:	ea4f 70d3 	mov.w	r0, r3, lsr #31
    1572:	bc30      	pop	{r4, r5}
    1574:	4770      	bx	lr
    1576:	bf00      	nop

00001578 <ocrypto_constant_time_is_zero>:
    1578:	f04f 0300 	mov.w	r3, #0

0000157c <constant_time_is_zero_loop>:
    157c:	f810 2b01 	ldrb.w	r2, [r0], #1
    1580:	3901      	subs	r1, #1
    1582:	ea43 0302 	orr.w	r3, r3, r2
    1586:	d1f9      	bne.n	157c <constant_time_is_zero_loop>
    1588:	f1a3 0301 	sub.w	r3, r3, #1
    158c:	ea4f 70d3 	mov.w	r0, r3, lsr #31
    1590:	4770      	bx	lr
    1592:	bf00      	nop

00001594 <ocrypto_constant_time_xor>:
    1594:	b430      	push	{r4, r5}

00001596 <constant_time_xor_loop>:
    1596:	f811 4b01 	ldrb.w	r4, [r1], #1
    159a:	f812 5b01 	ldrb.w	r5, [r2], #1
    159e:	406c      	eors	r4, r5
    15a0:	f800 4b01 	strb.w	r4, [r0], #1
    15a4:	3b01      	subs	r3, #1
    15a6:	d1f6      	bne.n	1596 <constant_time_xor_loop>
    15a8:	bc30      	pop	{r4, r5}
    15aa:	4770      	bx	lr

000015ac <ocrypto_mod_p256_add>:
    15ac:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    15b0:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    15b4:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    15b8:	185b      	adds	r3, r3, r1
    15ba:	eb54 040c 	adcs.w	r4, r4, ip
    15be:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    15c2:	414d      	adcs	r5, r1
    15c4:	eb56 060c 	adcs.w	r6, r6, ip
    15c8:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    15cc:	414f      	adcs	r7, r1
    15ce:	eb58 080c 	adcs.w	r8, r8, ip
    15d2:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    15d6:	eb59 0901 	adcs.w	r9, r9, r1
    15da:	eb5a 0a0c 	adcs.w	sl, sl, ip
    15de:	4189      	sbcs	r1, r1
    15e0:	f1b3 33ff 	subs.w	r3, r3, #4294967295	; 0xffffffff
    15e4:	f174 34ff 	sbcs.w	r4, r4, #4294967295	; 0xffffffff
    15e8:	f175 35ff 	sbcs.w	r5, r5, #4294967295	; 0xffffffff
    15ec:	f176 0600 	sbcs.w	r6, r6, #0
    15f0:	f177 0700 	sbcs.w	r7, r7, #0
    15f4:	f178 0800 	sbcs.w	r8, r8, #0
    15f8:	f179 0901 	sbcs.w	r9, r9, #1
    15fc:	f17a 3aff 	sbcs.w	sl, sl, #4294967295	; 0xffffffff
    1600:	f151 0100 	adcs.w	r1, r1, #0
    1604:	185b      	adds	r3, r3, r1
    1606:	414c      	adcs	r4, r1
    1608:	414d      	adcs	r5, r1
    160a:	f156 0600 	adcs.w	r6, r6, #0
    160e:	f157 0700 	adcs.w	r7, r7, #0
    1612:	f158 0800 	adcs.w	r8, r8, #0
    1616:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
    161a:	eb5a 0a01 	adcs.w	sl, sl, r1
    161e:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    1622:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    1626:	4770      	bx	lr

00001628 <ocrypto_mod_p256_sub>:
    1628:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    162c:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    1630:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    1634:	1a5b      	subs	r3, r3, r1
    1636:	eb74 040c 	sbcs.w	r4, r4, ip
    163a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    163e:	418d      	sbcs	r5, r1
    1640:	eb76 060c 	sbcs.w	r6, r6, ip
    1644:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    1648:	418f      	sbcs	r7, r1
    164a:	eb78 080c 	sbcs.w	r8, r8, ip
    164e:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    1652:	eb79 0901 	sbcs.w	r9, r9, r1
    1656:	eb7a 0a0c 	sbcs.w	sl, sl, ip
    165a:	4189      	sbcs	r1, r1
    165c:	185b      	adds	r3, r3, r1
    165e:	414c      	adcs	r4, r1
    1660:	414d      	adcs	r5, r1
    1662:	f156 0600 	adcs.w	r6, r6, #0
    1666:	f157 0700 	adcs.w	r7, r7, #0
    166a:	f158 0800 	adcs.w	r8, r8, #0
    166e:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
    1672:	eb5a 0a01 	adcs.w	sl, sl, r1
    1676:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    167a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    167e:	4770      	bx	lr

00001680 <mul_reduce>:
    1680:	eb18 0804 	adds.w	r8, r8, r4
    1684:	eb59 0905 	adcs.w	r9, r9, r5
    1688:	eb5a 0a06 	adcs.w	sl, sl, r6
    168c:	eb5b 0b07 	adcs.w	fp, fp, r7
    1690:	f05f 0c00 	movs.w	ip, #0
    1694:	f14c 0c00 	adc.w	ip, ip, #0
    1698:	eb18 0805 	adds.w	r8, r8, r5
    169c:	eb59 0906 	adcs.w	r9, r9, r6
    16a0:	eb5a 0a07 	adcs.w	sl, sl, r7
    16a4:	eb5b 0b07 	adcs.w	fp, fp, r7
    16a8:	eb50 000c 	adcs.w	r0, r0, ip
    16ac:	f05f 0c00 	movs.w	ip, #0
    16b0:	eb51 010c 	adcs.w	r1, r1, ip
    16b4:	eb52 020c 	adcs.w	r2, r2, ip
    16b8:	4163      	adcs	r3, r4
    16ba:	f14c 0c00 	adc.w	ip, ip, #0
    16be:	ebb8 0807 	subs.w	r8, r8, r7
    16c2:	f179 0900 	sbcs.w	r9, r9, #0
    16c6:	f17a 0a00 	sbcs.w	sl, sl, #0
    16ca:	eb7b 0b04 	sbcs.w	fp, fp, r4
    16ce:	41a8      	sbcs	r0, r5
    16d0:	41b1      	sbcs	r1, r6
    16d2:	41a2      	sbcs	r2, r4
    16d4:	41b3      	sbcs	r3, r6
    16d6:	f16c 0c00 	sbc.w	ip, ip, #0
    16da:	ebbb 0b05 	subs.w	fp, fp, r5
    16de:	41b0      	sbcs	r0, r6
    16e0:	41b9      	sbcs	r1, r7
    16e2:	41aa      	sbcs	r2, r5
    16e4:	41bb      	sbcs	r3, r7
    16e6:	f16c 0c00 	sbc.w	ip, ip, #0
    16ea:	ea6f 74ec 	mvn.w	r4, ip, asr #31
    16ee:	ebb8 0804 	subs.w	r8, r8, r4
    16f2:	eb79 0904 	sbcs.w	r9, r9, r4
    16f6:	eb7a 0a04 	sbcs.w	sl, sl, r4
    16fa:	f17b 0b00 	sbcs.w	fp, fp, #0
    16fe:	f170 0000 	sbcs.w	r0, r0, #0
    1702:	f171 0100 	sbcs.w	r1, r1, #0
    1706:	eb72 72d4 	sbcs.w	r2, r2, r4, lsr #31
    170a:	41a3      	sbcs	r3, r4
    170c:	f16c 0c00 	sbc.w	ip, ip, #0
    1710:	eb18 78ec 	adds.w	r8, r8, ip, asr #31
    1714:	eb59 79ec 	adcs.w	r9, r9, ip, asr #31
    1718:	eb5a 7aec 	adcs.w	sl, sl, ip, asr #31
    171c:	f15b 0b00 	adcs.w	fp, fp, #0
    1720:	f150 0400 	adcs.w	r4, r0, #0
    1724:	f151 0500 	adcs.w	r5, r1, #0
    1728:	eb52 76dc 	adcs.w	r6, r2, ip, lsr #31
    172c:	eb53 77ec 	adcs.w	r7, r3, ip, asr #31
    1730:	f14c 0c00 	adc.w	ip, ip, #0
    1734:	eb18 70ec 	adds.w	r0, r8, ip, asr #31
    1738:	eb59 71ec 	adcs.w	r1, r9, ip, asr #31
    173c:	eb5a 72ec 	adcs.w	r2, sl, ip, asr #31
    1740:	f15b 0300 	adcs.w	r3, fp, #0
    1744:	f154 0400 	adcs.w	r4, r4, #0
    1748:	f155 0500 	adcs.w	r5, r5, #0
    174c:	eb56 76dc 	adcs.w	r6, r6, ip, lsr #31
    1750:	eb57 77ec 	adcs.w	r7, r7, ip, asr #31
    1754:	4770      	bx	lr
    1756:	bf00      	nop

00001758 <ocrypto_mod_p256_mul>:
    1758:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    175c:	b087      	sub	sp, #28
    175e:	f7ff fd9f 	bl	12a0 <ocrypto_mul256_noframe>
    1762:	f8dd 8010 	ldr.w	r8, [sp, #16]
    1766:	f8dd 9014 	ldr.w	r9, [sp, #20]
    176a:	f8dd a018 	ldr.w	sl, [sp, #24]
    176e:	f7ff ff87 	bl	1680 <mul_reduce>
    1772:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
    1776:	f7ff ff83 	bl	1680 <mul_reduce>
    177a:	b003      	add	sp, #12
    177c:	f85d 8b04 	ldr.w	r8, [sp], #4
    1780:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
    1784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00001788 <ocrypto_mod_p256_sqr>:
    1788:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    178c:	b087      	sub	sp, #28
    178e:	f7ff fe43 	bl	1418 <ocrypto_sqr256_noframe>
    1792:	f8dd 8010 	ldr.w	r8, [sp, #16]
    1796:	f8dd 9014 	ldr.w	r9, [sp, #20]
    179a:	f8dd a018 	ldr.w	sl, [sp, #24]
    179e:	f7ff ff6f 	bl	1680 <mul_reduce>
    17a2:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
    17a6:	f7ff ff6b 	bl	1680 <mul_reduce>
    17aa:	b003      	add	sp, #12
    17ac:	f85d 8b04 	ldr.w	r8, [sp], #4
    17b0:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
    17b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000017b8 <__aeabi_dcmpun>:
    17b8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    17bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    17c0:	d102      	bne.n	17c8 <__aeabi_dcmpun+0x10>
    17c2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    17c6:	d10a      	bne.n	17de <__aeabi_dcmpun+0x26>
    17c8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    17cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    17d0:	d102      	bne.n	17d8 <__aeabi_dcmpun+0x20>
    17d2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    17d6:	d102      	bne.n	17de <__aeabi_dcmpun+0x26>
    17d8:	f04f 0000 	mov.w	r0, #0
    17dc:	4770      	bx	lr
    17de:	f04f 0001 	mov.w	r0, #1
    17e2:	4770      	bx	lr

000017e4 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>:
    17e4:	4801      	ldr	r0, [pc, #4]	; (17ec <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA+0x8>)
    17e6:	7800      	ldrb	r0, [r0, #0]
    17e8:	4770      	bx	lr
    17ea:	0000      	.short	0x0000
    17ec:	20000028 	.word	0x20000028

000017f0 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>:
    17f0:	b570      	push	{r4, r5, r6, lr}
    17f2:	f00b ffef 	bl	d7d4 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    17f6:	4c13      	ldr	r4, [pc, #76]	; (1844 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x54>)
    17f8:	f06f 0527 	mvn.w	r5, #39	; 0x27
    17fc:	b928      	cbnz	r0, 180a <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x1a>
    17fe:	f00c f81f 	bl	d840 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    1802:	b910      	cbnz	r0, 180a <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x1a>
    1804:	f00c f826 	bl	d854 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    1808:	b120      	cbz	r0, 1814 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
    180a:	480f      	ldr	r0, [pc, #60]	; (1848 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x58>)
    180c:	6060      	str	r0, [r4, #4]
    180e:	7065      	strb	r5, [r4, #1]
    1810:	2008      	movs	r0, #8
    1812:	e010      	b.n	1836 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    1814:	f00b ffb3 	bl	d77e <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    1818:	b940      	cbnz	r0, 182c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x3c>
    181a:	f00b ffba 	bl	d792 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    181e:	b928      	cbnz	r0, 182c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x3c>
    1820:	f00b ffce 	bl	d7c0 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    1824:	b910      	cbnz	r0, 182c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x3c>
    1826:	f00b ffdf 	bl	d7e8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    182a:	b130      	cbz	r0, 183a <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x4a>
    182c:	4806      	ldr	r0, [pc, #24]	; (1848 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x58>)
    182e:	3031      	adds	r0, #49	; 0x31
    1830:	6060      	str	r0, [r4, #4]
    1832:	7065      	strb	r5, [r4, #1]
    1834:	2004      	movs	r0, #4
    1836:	70a0      	strb	r0, [r4, #2]
    1838:	bd70      	pop	{r4, r5, r6, pc}
    183a:	21e8      	movs	r1, #232	; 0xe8
    183c:	2074      	movs	r0, #116	; 0x74
    183e:	f003 fbbf 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1842:	0000      	.short	0x0000
    1844:	20000028 	.word	0x20000028
    1848:	0001167c 	.word	0x0001167c

0000184c <mpsl_tx_power_radio_supported_power_adjust>:
    184c:	4907      	ldr	r1, [pc, #28]	; (186c <mpsl_tx_power_radio_supported_power_adjust+0x20>)
    184e:	f991 2002 	ldrsb.w	r2, [r1, #2]
    1852:	4290      	cmp	r0, r2
    1854:	da03      	bge.n	185e <mpsl_tx_power_radio_supported_power_adjust+0x12>
    1856:	f991 2001 	ldrsb.w	r2, [r1, #1]
    185a:	4290      	cmp	r0, r2
    185c:	dc01      	bgt.n	1862 <mpsl_tx_power_radio_supported_power_adjust+0x16>
    185e:	4610      	mov	r0, r2
    1860:	4770      	bx	lr
    1862:	6849      	ldr	r1, [r1, #4]
    1864:	1a80      	subs	r0, r0, r2
    1866:	5608      	ldrsb	r0, [r1, r0]
    1868:	4770      	bx	lr
    186a:	0000      	.short	0x0000
    186c:	20000028 	.word	0x20000028

00001870 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>:
    1870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1874:	461c      	mov	r4, r3
    1876:	4690      	mov	r8, r2
    1878:	460d      	mov	r5, r1
    187a:	4606      	mov	r6, r0
    187c:	f06f 0715 	mvn.w	r7, #21
    1880:	2804      	cmp	r0, #4
    1882:	d804      	bhi.n	188e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    1884:	b11c      	cbz	r4, 188e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    1886:	f00b fc1c 	bl	d0c2 <strlen+0x10>
    188a:	42a8      	cmp	r0, r5
    188c:	d802      	bhi.n	1894 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x24>
    188e:	4638      	mov	r0, r7
    1890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1894:	4805      	ldr	r0, [pc, #20]	; (18ac <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x3c>)
    1896:	4642      	mov	r2, r8
    1898:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    189c:	b118      	cbz	r0, 18a6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    189e:	5740      	ldrsb	r0, [r0, r5]
    18a0:	4282      	cmp	r2, r0
    18a2:	dd00      	ble.n	18a6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    18a4:	4602      	mov	r2, r0
    18a6:	7022      	strb	r2, [r4, #0]
    18a8:	2000      	movs	r0, #0
    18aa:	e7f1      	b.n	1890 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x20>
    18ac:	20000cd8 	.word	0x20000cd8
    18b0:	2800      	cmp	r0, #0
    18b2:	d019      	beq.n	18e8 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x78>
    18b4:	7803      	ldrb	r3, [r0, #0]
    18b6:	4913      	ldr	r1, [pc, #76]	; (1904 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x94>)
    18b8:	4a13      	ldr	r2, [pc, #76]	; (1908 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x98>)
    18ba:	b113      	cbz	r3, 18c2 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x52>
    18bc:	2b01      	cmp	r3, #1
    18be:	d00e      	beq.n	18de <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x6e>
    18c0:	e011      	b.n	18e6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x76>
    18c2:	7903      	ldrb	r3, [r0, #4]
    18c4:	2b01      	cmp	r3, #1
    18c6:	d000      	beq.n	18ca <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x5a>
    18c8:	b96b      	cbnz	r3, 18e6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x76>
    18ca:	7943      	ldrb	r3, [r0, #5]
    18cc:	b10b      	cbz	r3, 18d2 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x62>
    18ce:	2b01      	cmp	r3, #1
    18d0:	d109      	bne.n	18e6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x76>
    18d2:	6883      	ldr	r3, [r0, #8]
    18d4:	3b64      	subs	r3, #100	; 0x64
    18d6:	428b      	cmp	r3, r1
    18d8:	d205      	bcs.n	18e6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x76>
    18da:	68c0      	ldr	r0, [r0, #12]
    18dc:	e00e      	b.n	18fc <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x8c>
    18de:	7903      	ldrb	r3, [r0, #4]
    18e0:	2b01      	cmp	r3, #1
    18e2:	d002      	beq.n	18ea <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x7a>
    18e4:	b10b      	cbz	r3, 18ea <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x7a>
    18e6:	2000      	movs	r0, #0
    18e8:	4770      	bx	lr
    18ea:	7943      	ldrb	r3, [r0, #5]
    18ec:	b10b      	cbz	r3, 18f2 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x82>
    18ee:	2b01      	cmp	r3, #1
    18f0:	d1f9      	bne.n	18e6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x76>
    18f2:	68c3      	ldr	r3, [r0, #12]
    18f4:	3b64      	subs	r3, #100	; 0x64
    18f6:	428b      	cmp	r3, r1
    18f8:	d2f5      	bcs.n	18e6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x76>
    18fa:	6880      	ldr	r0, [r0, #8]
    18fc:	4290      	cmp	r0, r2
    18fe:	d8f2      	bhi.n	18e6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x76>
    1900:	2001      	movs	r0, #1
    1902:	4770      	bx	lr
    1904:	0001863d 	.word	0x0001863d
    1908:	0f423fff 	.word	0x0f423fff
    190c:	b510      	push	{r4, lr}
    190e:	4c05      	ldr	r4, [pc, #20]	; (1924 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0xb4>)
    1910:	6820      	ldr	r0, [r4, #0]
    1912:	b110      	cbz	r0, 191a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0xaa>
    1914:	4780      	blx	r0
    1916:	2000      	movs	r0, #0
    1918:	6020      	str	r0, [r4, #0]
    191a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    191e:	f002 b8bd 	b.w	3a9c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    1922:	0000      	.short	0x0000
    1924:	20000030 	.word	0x20000030

00001928 <mpsl_timeslot_session_open>:
    1928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    192c:	460e      	mov	r6, r1
    192e:	0005      	movs	r5, r0
    1930:	d004      	beq.n	193c <mpsl_timeslot_session_open+0x14>
    1932:	f000 f847 	bl	19c4 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    1936:	4607      	mov	r7, r0
    1938:	2400      	movs	r4, #0
    193a:	e00b      	b.n	1954 <mpsl_timeslot_session_open+0x2c>
    193c:	f06f 0015 	mvn.w	r0, #21
    1940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1944:	4620      	mov	r0, r4
    1946:	f000 f843 	bl	19d0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    194a:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
    194e:	b130      	cbz	r0, 195e <mpsl_timeslot_session_open+0x36>
    1950:	1c64      	adds	r4, r4, #1
    1952:	b2e4      	uxtb	r4, r4
    1954:	42bc      	cmp	r4, r7
    1956:	d3f5      	bcc.n	1944 <mpsl_timeslot_session_open+0x1c>
    1958:	f06f 000b 	mvn.w	r0, #11
    195c:	e7f0      	b.n	1940 <mpsl_timeslot_session_open+0x18>
    195e:	4627      	mov	r7, r4
    1960:	2cff      	cmp	r4, #255	; 0xff
    1962:	d0f9      	beq.n	1958 <mpsl_timeslot_session_open+0x30>
    1964:	4620      	mov	r0, r4
    1966:	f000 f833 	bl	19d0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    196a:	4604      	mov	r4, r0
    196c:	f00b fd75 	bl	d45a <strlen+0x3a8>
    1970:	f884 7028 	strb.w	r7, [r4, #40]	; 0x28
    1974:	4621      	mov	r1, r4
    1976:	4808      	ldr	r0, [pc, #32]	; (1998 <mpsl_timeslot_session_open+0x70>)
    1978:	f002 f868 	bl	3a4c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    197c:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    1980:	2820      	cmp	r0, #32
    1982:	d006      	beq.n	1992 <mpsl_timeslot_session_open+0x6a>
    1984:	2001      	movs	r0, #1
    1986:	6225      	str	r5, [r4, #32]
    1988:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    198c:	7037      	strb	r7, [r6, #0]
    198e:	2000      	movs	r0, #0
    1990:	e7d6      	b.n	1940 <mpsl_timeslot_session_open+0x18>
    1992:	f06f 0022 	mvn.w	r0, #34	; 0x22
    1996:	e7d3      	b.n	1940 <mpsl_timeslot_session_open+0x18>
    1998:	0000d185 	.word	0x0000d185

0000199c <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q>:
    199c:	b510      	push	{r4, lr}
    199e:	0782      	lsls	r2, r0, #30
    19a0:	d002      	beq.n	19a8 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0xc>
    19a2:	f06f 000d 	mvn.w	r0, #13
    19a6:	bd10      	pop	{r4, pc}
    19a8:	4a05      	ldr	r2, [pc, #20]	; (19c0 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0x24>)
    19aa:	7011      	strb	r1, [r2, #0]
    19ac:	6050      	str	r0, [r2, #4]
    19ae:	b128      	cbz	r0, 19bc <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0x20>
    19b0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    19b4:	010a      	lsls	r2, r1, #4
    19b6:	2100      	movs	r1, #0
    19b8:	f00b ffd0 	bl	d95c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    19bc:	2000      	movs	r0, #0
    19be:	bd10      	pop	{r4, pc}
    19c0:	20000034 	.word	0x20000034

000019c4 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
    19c4:	4801      	ldr	r0, [pc, #4]	; (19cc <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
    19c6:	7800      	ldrb	r0, [r0, #0]
    19c8:	4770      	bx	lr
    19ca:	0000      	.short	0x0000
    19cc:	20000034 	.word	0x20000034

000019d0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
    19d0:	4905      	ldr	r1, [pc, #20]	; (19e8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
    19d2:	780a      	ldrb	r2, [r1, #0]
    19d4:	4290      	cmp	r0, r2
    19d6:	d301      	bcc.n	19dc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
    19d8:	2000      	movs	r0, #0
    19da:	4770      	bx	lr
    19dc:	6849      	ldr	r1, [r1, #4]
    19de:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    19e2:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    19e6:	4770      	bx	lr
    19e8:	20000034 	.word	0x20000034

000019ec <MPSL_IRQ_RADIO_Handler>:
    19ec:	490e      	ldr	r1, [pc, #56]	; (1a28 <MPSL_IRQ_RADIO_Handler+0x3c>)
    19ee:	b510      	push	{r4, lr}
    19f0:	f891 002d 	ldrb.w	r0, [r1, #45]	; 0x2d
    19f4:	2820      	cmp	r0, #32
    19f6:	d012      	beq.n	1a1e <MPSL_IRQ_RADIO_Handler+0x32>
    19f8:	f891 002d 	ldrb.w	r0, [r1, #45]	; 0x2d
    19fc:	f5a1 6280 	sub.w	r2, r1, #1024	; 0x400
    1a00:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    1a04:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    1a08:	f891 102d 	ldrb.w	r1, [r1, #45]	; 0x2d
    1a0c:	6840      	ldr	r0, [r0, #4]
    1a0e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    1a12:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    1a16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1a1a:	2104      	movs	r1, #4
    1a1c:	4710      	bx	r2
    1a1e:	f640 0187 	movw	r1, #2183	; 0x887
    1a22:	2070      	movs	r0, #112	; 0x70
    1a24:	f003 facc 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1a28:	200010ec 	.word	0x200010ec
    1a2c:	b570      	push	{r4, r5, r6, lr}
    1a2e:	4605      	mov	r5, r0
    1a30:	2a20      	cmp	r2, #32
    1a32:	d028      	beq.n	1a86 <MPSL_IRQ_RADIO_Handler+0x9a>
    1a34:	4819      	ldr	r0, [pc, #100]	; (1a9c <MPSL_IRQ_RADIO_Handler+0xb0>)
    1a36:	4c1a      	ldr	r4, [pc, #104]	; (1aa0 <MPSL_IRQ_RADIO_Handler+0xb4>)
    1a38:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
    1a3c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1a40:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
    1a44:	4423      	add	r3, r4
    1a46:	2920      	cmp	r1, #32
    1a48:	d022      	beq.n	1a90 <MPSL_IRQ_RADIO_Handler+0xa4>
    1a4a:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
    1a4e:	7840      	ldrb	r0, [r0, #1]
    1a50:	784c      	ldrb	r4, [r1, #1]
    1a52:	7048      	strb	r0, [r1, #1]
    1a54:	4620      	mov	r0, r4
    1a56:	4601      	mov	r1, r0
    1a58:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
    1a5c:	4291      	cmp	r1, r2
    1a5e:	7005      	strb	r5, [r0, #0]
    1a60:	7840      	ldrb	r0, [r0, #1]
    1a62:	d1f8      	bne.n	1a56 <MPSL_IRQ_RADIO_Handler+0x6a>
    1a64:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
    1a68:	2a20      	cmp	r2, #32
    1a6a:	bf1a      	itte	ne
    1a6c:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
    1a70:	7054      	strbne	r4, [r2, #1]
    1a72:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
    1a76:	2220      	movs	r2, #32
    1a78:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
    1a7c:	f88c 2001 	strb.w	r2, [ip, #1]
    1a80:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
    1a84:	bd70      	pop	{r4, r5, r6, pc}
    1a86:	f240 2192 	movw	r1, #658	; 0x292
    1a8a:	2070      	movs	r0, #112	; 0x70
    1a8c:	f003 fa98 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1a90:	f893 4020 	ldrb.w	r4, [r3, #32]
    1a94:	7840      	ldrb	r0, [r0, #1]
    1a96:	f883 0020 	strb.w	r0, [r3, #32]
    1a9a:	e7db      	b.n	1a54 <MPSL_IRQ_RADIO_Handler+0x68>
    1a9c:	2000106c 	.word	0x2000106c
    1aa0:	200010ec 	.word	0x200010ec
    1aa4:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1aa8:	b085      	sub	sp, #20
    1aaa:	4615      	mov	r5, r2
    1aac:	460c      	mov	r4, r1
    1aae:	f002 f9e3 	bl	3e78 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1ab2:	4428      	add	r0, r5
    1ab4:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1ab8:	9102      	str	r1, [sp, #8]
    1aba:	6820      	ldr	r0, [r4, #0]
    1abc:	1a40      	subs	r0, r0, r1
    1abe:	0200      	lsls	r0, r0, #8
    1ac0:	17c1      	asrs	r1, r0, #31
    1ac2:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1ac6:	1200      	asrs	r0, r0, #8
    1ac8:	2800      	cmp	r0, #0
    1aca:	f300 80f0 	bgt.w	1cae <MPSL_IRQ_RADIO_Handler+0x2c2>
    1ace:	f8dd 8020 	ldr.w	r8, [sp, #32]
    1ad2:	48ca      	ldr	r0, [pc, #808]	; (1dfc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb0>)
    1ad4:	eb08 0148 	add.w	r1, r8, r8, lsl #1
    1ad8:	4408      	add	r0, r1
    1ada:	9003      	str	r0, [sp, #12]
    1adc:	f890 5020 	ldrb.w	r5, [r0, #32]
    1ae0:	2020      	movs	r0, #32
    1ae2:	4ec7      	ldr	r6, [pc, #796]	; (1e00 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb4>)
    1ae4:	46ea      	mov	sl, sp
    1ae6:	f10d 0904 	add.w	r9, sp, #4
    1aea:	f88d 0000 	strb.w	r0, [sp]
    1aee:	2d20      	cmp	r5, #32
    1af0:	bf1c      	itt	ne
    1af2:	48c4      	ldrne	r0, [pc, #784]	; (1e04 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb8>)
    1af4:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
    1af8:	d039      	beq.n	1b6e <MPSL_IRQ_RADIO_Handler+0x182>
    1afa:	bf00      	nop
    1afc:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    1b00:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    1b04:	f100 0108 	add.w	r1, r0, #8
    1b08:	68c0      	ldr	r0, [r0, #12]
    1b0a:	6827      	ldr	r7, [r4, #0]
    1b0c:	1a38      	subs	r0, r7, r0
    1b0e:	0200      	lsls	r0, r0, #8
    1b10:	17c2      	asrs	r2, r0, #31
    1b12:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1b16:	1200      	asrs	r0, r0, #8
    1b18:	d429      	bmi.n	1b6e <MPSL_IRQ_RADIO_Handler+0x182>
    1b1a:	89e0      	ldrh	r0, [r4, #14]
    1b1c:	b300      	cbz	r0, 1b60 <MPSL_IRQ_RADIO_Handler+0x174>
    1b1e:	89c8      	ldrh	r0, [r1, #14]
    1b20:	b9f0      	cbnz	r0, 1b60 <MPSL_IRQ_RADIO_Handler+0x174>
    1b22:	6808      	ldr	r0, [r1, #0]
    1b24:	9004      	str	r0, [sp, #16]
    1b26:	f003 f8a1 	bl	4c6c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    1b2a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1b2e:	bf08      	it	eq
    1b30:	200d      	moveq	r0, #13
    1b32:	d00b      	beq.n	1b4c <MPSL_IRQ_RADIO_Handler+0x160>
    1b34:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1b38:	3856      	subs	r0, #86	; 0x56
    1b3a:	bf08      	it	eq
    1b3c:	201c      	moveq	r0, #28
    1b3e:	d005      	beq.n	1b4c <MPSL_IRQ_RADIO_Handler+0x160>
    1b40:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1b44:	389f      	subs	r0, #159	; 0x9f
    1b46:	bf14      	ite	ne
    1b48:	2000      	movne	r0, #0
    1b4a:	2032      	moveq	r0, #50	; 0x32
    1b4c:	1c41      	adds	r1, r0, #1
    1b4e:	9804      	ldr	r0, [sp, #16]
    1b50:	1a38      	subs	r0, r7, r0
    1b52:	0200      	lsls	r0, r0, #8
    1b54:	17c2      	asrs	r2, r0, #31
    1b56:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1b5a:	1200      	asrs	r0, r0, #8
    1b5c:	4288      	cmp	r0, r1
    1b5e:	db06      	blt.n	1b6e <MPSL_IRQ_RADIO_Handler+0x182>
    1b60:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1b64:	f88a 5000 	strb.w	r5, [sl]
    1b68:	7845      	ldrb	r5, [r0, #1]
    1b6a:	2d20      	cmp	r5, #32
    1b6c:	d1c6      	bne.n	1afc <MPSL_IRQ_RADIO_Handler+0x110>
    1b6e:	f89a 0000 	ldrb.w	r0, [sl]
    1b72:	f889 0000 	strb.w	r0, [r9]
    1b76:	2d20      	cmp	r5, #32
    1b78:	bf1c      	itt	ne
    1b7a:	48a2      	ldrne	r0, [pc, #648]	; (1e04 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb8>)
    1b7c:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
    1b80:	f000 8138 	beq.w	1df4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xa8>
    1b84:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    1b88:	eb06 0780 	add.w	r7, r6, r0, lsl #2
    1b8c:	6860      	ldr	r0, [r4, #4]
    1b8e:	f8d7 8008 	ldr.w	r8, [r7, #8]
    1b92:	f107 0108 	add.w	r1, r7, #8
    1b96:	eba8 0000 	sub.w	r0, r8, r0
    1b9a:	0200      	lsls	r0, r0, #8
    1b9c:	17c2      	asrs	r2, r0, #31
    1b9e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1ba2:	1200      	asrs	r0, r0, #8
    1ba4:	d427      	bmi.n	1bf6 <MPSL_IRQ_RADIO_Handler+0x20a>
    1ba6:	89c8      	ldrh	r0, [r1, #14]
    1ba8:	2800      	cmp	r0, #0
    1baa:	f000 8123 	beq.w	1df4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xa8>
    1bae:	89e0      	ldrh	r0, [r4, #14]
    1bb0:	2800      	cmp	r0, #0
    1bb2:	f040 811f 	bne.w	1df4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xa8>
    1bb6:	f8d4 a000 	ldr.w	sl, [r4]
    1bba:	f003 f857 	bl	4c6c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    1bbe:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1bc2:	bf08      	it	eq
    1bc4:	200d      	moveq	r0, #13
    1bc6:	d00b      	beq.n	1be0 <MPSL_IRQ_RADIO_Handler+0x1f4>
    1bc8:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1bcc:	3856      	subs	r0, #86	; 0x56
    1bce:	bf08      	it	eq
    1bd0:	201c      	moveq	r0, #28
    1bd2:	d005      	beq.n	1be0 <MPSL_IRQ_RADIO_Handler+0x1f4>
    1bd4:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1bd8:	389f      	subs	r0, #159	; 0x9f
    1bda:	bf14      	ite	ne
    1bdc:	2000      	movne	r0, #0
    1bde:	2032      	moveq	r0, #50	; 0x32
    1be0:	1c41      	adds	r1, r0, #1
    1be2:	eba8 000a 	sub.w	r0, r8, sl
    1be6:	0200      	lsls	r0, r0, #8
    1be8:	17c2      	asrs	r2, r0, #31
    1bea:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1bee:	1200      	asrs	r0, r0, #8
    1bf0:	4288      	cmp	r0, r1
    1bf2:	f280 80ff 	bge.w	1df4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xa8>
    1bf6:	f889 5000 	strb.w	r5, [r9]
    1bfa:	7e39      	ldrb	r1, [r7, #24]
    1bfc:	7c20      	ldrb	r0, [r4, #16]
    1bfe:	4281      	cmp	r1, r0
    1c00:	d906      	bls.n	1c10 <MPSL_IRQ_RADIO_Handler+0x224>
    1c02:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1c06:	7845      	ldrb	r5, [r0, #1]
    1c08:	2d20      	cmp	r5, #32
    1c0a:	d1bb      	bne.n	1b84 <MPSL_IRQ_RADIO_Handler+0x198>
    1c0c:	f000 b8f2 	b.w	1df4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xa8>
    1c10:	f89d 0004 	ldrb.w	r0, [sp, #4]
    1c14:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    1c18:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    1c1c:	8ac1      	ldrh	r1, [r0, #22]
    1c1e:	68c5      	ldr	r5, [r0, #12]
    1c20:	bbe1      	cbnz	r1, 1c9c <MPSL_IRQ_RADIO_Handler+0x2b0>
    1c22:	89e1      	ldrh	r1, [r4, #14]
    1c24:	b3d1      	cbz	r1, 1c9c <MPSL_IRQ_RADIO_Handler+0x2b0>
    1c26:	6887      	ldr	r7, [r0, #8]
    1c28:	f003 f820 	bl	4c6c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    1c2c:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1c30:	bf08      	it	eq
    1c32:	200d      	moveq	r0, #13
    1c34:	d00b      	beq.n	1c4e <MPSL_IRQ_RADIO_Handler+0x262>
    1c36:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1c3a:	3856      	subs	r0, #86	; 0x56
    1c3c:	bf08      	it	eq
    1c3e:	201c      	moveq	r0, #28
    1c40:	d005      	beq.n	1c4e <MPSL_IRQ_RADIO_Handler+0x262>
    1c42:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1c46:	389f      	subs	r0, #159	; 0x9f
    1c48:	bf14      	ite	ne
    1c4a:	2000      	movne	r0, #0
    1c4c:	2032      	moveq	r0, #50	; 0x32
    1c4e:	1c41      	adds	r1, r0, #1
    1c50:	1be8      	subs	r0, r5, r7
    1c52:	0200      	lsls	r0, r0, #8
    1c54:	17c2      	asrs	r2, r0, #31
    1c56:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1c5a:	1200      	asrs	r0, r0, #8
    1c5c:	4288      	cmp	r0, r1
    1c5e:	da1d      	bge.n	1c9c <MPSL_IRQ_RADIO_Handler+0x2b0>
    1c60:	f003 f804 	bl	4c6c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    1c64:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1c68:	bf08      	it	eq
    1c6a:	200d      	moveq	r0, #13
    1c6c:	d00b      	beq.n	1c86 <MPSL_IRQ_RADIO_Handler+0x29a>
    1c6e:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1c72:	3856      	subs	r0, #86	; 0x56
    1c74:	bf08      	it	eq
    1c76:	201c      	moveq	r0, #28
    1c78:	d005      	beq.n	1c86 <MPSL_IRQ_RADIO_Handler+0x29a>
    1c7a:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1c7e:	389f      	subs	r0, #159	; 0x9f
    1c80:	bf14      	ite	ne
    1c82:	2000      	movne	r0, #0
    1c84:	2032      	moveq	r0, #50	; 0x32
    1c86:	f89d 1004 	ldrb.w	r1, [sp, #4]
    1c8a:	1c40      	adds	r0, r0, #1
    1c8c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    1c90:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    1c94:	6889      	ldr	r1, [r1, #8]
    1c96:	4408      	add	r0, r1
    1c98:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
    1c9c:	9802      	ldr	r0, [sp, #8]
    1c9e:	1a28      	subs	r0, r5, r0
    1ca0:	0200      	lsls	r0, r0, #8
    1ca2:	17c1      	asrs	r1, r0, #31
    1ca4:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1ca8:	1200      	asrs	r0, r0, #8
    1caa:	2800      	cmp	r0, #0
    1cac:	dd03      	ble.n	1cb6 <MPSL_IRQ_RADIO_Handler+0x2ca>
    1cae:	b009      	add	sp, #36	; 0x24
    1cb0:	2000      	movs	r0, #0
    1cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1cb6:	e9d4 1000 	ldrd	r1, r0, [r4]
    1cba:	1a40      	subs	r0, r0, r1
    1cbc:	4428      	add	r0, r5
    1cbe:	f025 417f 	bic.w	r1, r5, #4278190080	; 0xff000000
    1cc2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1cc6:	e9c4 1000 	strd	r1, r0, [r4]
    1cca:	9808      	ldr	r0, [sp, #32]
    1ccc:	9004      	str	r0, [sp, #16]
    1cce:	9803      	ldr	r0, [sp, #12]
    1cd0:	46ea      	mov	sl, sp
    1cd2:	f10d 0804 	add.w	r8, sp, #4
    1cd6:	f890 5020 	ldrb.w	r5, [r0, #32]
    1cda:	2020      	movs	r0, #32
    1cdc:	f88d 0000 	strb.w	r0, [sp]
    1ce0:	2d20      	cmp	r5, #32
    1ce2:	d03c      	beq.n	1d5e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x12>
    1ce4:	4847      	ldr	r0, [pc, #284]	; (1e04 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb8>)
    1ce6:	9904      	ldr	r1, [sp, #16]
    1ce8:	eb00 1b81 	add.w	fp, r0, r1, lsl #6
    1cec:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    1cf0:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    1cf4:	f100 0108 	add.w	r1, r0, #8
    1cf8:	68c0      	ldr	r0, [r0, #12]
    1cfa:	6827      	ldr	r7, [r4, #0]
    1cfc:	1a38      	subs	r0, r7, r0
    1cfe:	0200      	lsls	r0, r0, #8
    1d00:	17c2      	asrs	r2, r0, #31
    1d02:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1d06:	1200      	asrs	r0, r0, #8
    1d08:	d429      	bmi.n	1d5e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x12>
    1d0a:	89e0      	ldrh	r0, [r4, #14]
    1d0c:	b300      	cbz	r0, 1d50 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4>
    1d0e:	89c8      	ldrh	r0, [r1, #14]
    1d10:	b9f0      	cbnz	r0, 1d50 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4>
    1d12:	f8d1 9000 	ldr.w	r9, [r1]
    1d16:	f002 ffa9 	bl	4c6c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    1d1a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1d1e:	bf08      	it	eq
    1d20:	200d      	moveq	r0, #13
    1d22:	d00b      	beq.n	1d3c <MPSL_IRQ_RADIO_Handler+0x350>
    1d24:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1d28:	3856      	subs	r0, #86	; 0x56
    1d2a:	bf08      	it	eq
    1d2c:	201c      	moveq	r0, #28
    1d2e:	d005      	beq.n	1d3c <MPSL_IRQ_RADIO_Handler+0x350>
    1d30:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1d34:	389f      	subs	r0, #159	; 0x9f
    1d36:	bf14      	ite	ne
    1d38:	2000      	movne	r0, #0
    1d3a:	2032      	moveq	r0, #50	; 0x32
    1d3c:	1c41      	adds	r1, r0, #1
    1d3e:	eba7 0009 	sub.w	r0, r7, r9
    1d42:	0200      	lsls	r0, r0, #8
    1d44:	17c2      	asrs	r2, r0, #31
    1d46:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1d4a:	1200      	asrs	r0, r0, #8
    1d4c:	4288      	cmp	r0, r1
    1d4e:	db06      	blt.n	1d5e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x12>
    1d50:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1d54:	f88a 5000 	strb.w	r5, [sl]
    1d58:	7845      	ldrb	r5, [r0, #1]
    1d5a:	2d20      	cmp	r5, #32
    1d5c:	d1c6      	bne.n	1cec <MPSL_IRQ_RADIO_Handler+0x300>
    1d5e:	f89a 0000 	ldrb.w	r0, [sl]
    1d62:	f888 0000 	strb.w	r0, [r8]
    1d66:	9804      	ldr	r0, [sp, #16]
    1d68:	2d20      	cmp	r5, #32
    1d6a:	bf1c      	itt	ne
    1d6c:	4925      	ldrne	r1, [pc, #148]	; (1e04 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb8>)
    1d6e:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    1d72:	d03f      	beq.n	1df4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xa8>
    1d74:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    1d78:	eb06 0780 	add.w	r7, r6, r0, lsl #2
    1d7c:	6861      	ldr	r1, [r4, #4]
    1d7e:	f8d7 9008 	ldr.w	r9, [r7, #8]
    1d82:	f107 0008 	add.w	r0, r7, #8
    1d86:	eba9 0101 	sub.w	r1, r9, r1
    1d8a:	0209      	lsls	r1, r1, #8
    1d8c:	17ca      	asrs	r2, r1, #31
    1d8e:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1d92:	1209      	asrs	r1, r1, #8
    1d94:	d422      	bmi.n	1ddc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x90>
    1d96:	89c0      	ldrh	r0, [r0, #14]
    1d98:	b360      	cbz	r0, 1df4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xa8>
    1d9a:	89e0      	ldrh	r0, [r4, #14]
    1d9c:	bb50      	cbnz	r0, 1df4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xa8>
    1d9e:	f8d4 a000 	ldr.w	sl, [r4]
    1da2:	f002 ff63 	bl	4c6c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    1da6:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1daa:	bf08      	it	eq
    1dac:	200d      	moveq	r0, #13
    1dae:	d00b      	beq.n	1dc8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x7c>
    1db0:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1db4:	3856      	subs	r0, #86	; 0x56
    1db6:	bf08      	it	eq
    1db8:	201c      	moveq	r0, #28
    1dba:	d005      	beq.n	1dc8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x7c>
    1dbc:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1dc0:	389f      	subs	r0, #159	; 0x9f
    1dc2:	bf14      	ite	ne
    1dc4:	2000      	movne	r0, #0
    1dc6:	2032      	moveq	r0, #50	; 0x32
    1dc8:	1c41      	adds	r1, r0, #1
    1dca:	eba9 000a 	sub.w	r0, r9, sl
    1dce:	0200      	lsls	r0, r0, #8
    1dd0:	17c2      	asrs	r2, r0, #31
    1dd2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1dd6:	1200      	asrs	r0, r0, #8
    1dd8:	4288      	cmp	r0, r1
    1dda:	da0b      	bge.n	1df4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xa8>
    1ddc:	f888 5000 	strb.w	r5, [r8]
    1de0:	7e38      	ldrb	r0, [r7, #24]
    1de2:	7c21      	ldrb	r1, [r4, #16]
    1de4:	4288      	cmp	r0, r1
    1de6:	f67f af13 	bls.w	1c10 <MPSL_IRQ_RADIO_Handler+0x224>
    1dea:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1dee:	7845      	ldrb	r5, [r0, #1]
    1df0:	2d20      	cmp	r5, #32
    1df2:	d1bf      	bne.n	1d74 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x28>
    1df4:	b009      	add	sp, #36	; 0x24
    1df6:	2001      	movs	r0, #1
    1df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1dfc:	200010ec 	.word	0x200010ec
    1e00:	20000cec 	.word	0x20000cec
    1e04:	2000106c 	.word	0x2000106c
    1e08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1e0c:	460f      	mov	r7, r1
    1e0e:	4606      	mov	r6, r0
    1e10:	eb01 0047 	add.w	r0, r1, r7, lsl #1
    1e14:	494b      	ldr	r1, [pc, #300]	; (1f44 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1f8>)
    1e16:	4699      	mov	r9, r3
    1e18:	4408      	add	r0, r1
    1e1a:	4692      	mov	sl, r2
    1e1c:	f890 4020 	ldrb.w	r4, [r0, #32]
    1e20:	2020      	movs	r0, #32
    1e22:	7010      	strb	r0, [r2, #0]
    1e24:	f5a1 6880 	sub.w	r8, r1, #1024	; 0x400
    1e28:	2c20      	cmp	r4, #32
    1e2a:	bf1c      	itt	ne
    1e2c:	4846      	ldrne	r0, [pc, #280]	; (1f48 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1fc>)
    1e2e:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
    1e32:	d038      	beq.n	1ea6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x15a>
    1e34:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    1e38:	eb08 0080 	add.w	r0, r8, r0, lsl #2
    1e3c:	f100 0108 	add.w	r1, r0, #8
    1e40:	68c0      	ldr	r0, [r0, #12]
    1e42:	6835      	ldr	r5, [r6, #0]
    1e44:	1a28      	subs	r0, r5, r0
    1e46:	0200      	lsls	r0, r0, #8
    1e48:	17c2      	asrs	r2, r0, #31
    1e4a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1e4e:	1200      	asrs	r0, r0, #8
    1e50:	d429      	bmi.n	1ea6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x15a>
    1e52:	89f0      	ldrh	r0, [r6, #14]
    1e54:	b300      	cbz	r0, 1e98 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x14c>
    1e56:	89c8      	ldrh	r0, [r1, #14]
    1e58:	b9f0      	cbnz	r0, 1e98 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x14c>
    1e5a:	6808      	ldr	r0, [r1, #0]
    1e5c:	9000      	str	r0, [sp, #0]
    1e5e:	f002 ff05 	bl	4c6c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    1e62:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1e66:	bf08      	it	eq
    1e68:	200d      	moveq	r0, #13
    1e6a:	d00b      	beq.n	1e84 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x138>
    1e6c:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1e70:	3856      	subs	r0, #86	; 0x56
    1e72:	bf08      	it	eq
    1e74:	201c      	moveq	r0, #28
    1e76:	d005      	beq.n	1e84 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x138>
    1e78:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1e7c:	389f      	subs	r0, #159	; 0x9f
    1e7e:	bf14      	ite	ne
    1e80:	2000      	movne	r0, #0
    1e82:	2032      	moveq	r0, #50	; 0x32
    1e84:	1c41      	adds	r1, r0, #1
    1e86:	9800      	ldr	r0, [sp, #0]
    1e88:	1a28      	subs	r0, r5, r0
    1e8a:	0200      	lsls	r0, r0, #8
    1e8c:	17c2      	asrs	r2, r0, #31
    1e8e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1e92:	1200      	asrs	r0, r0, #8
    1e94:	4288      	cmp	r0, r1
    1e96:	db06      	blt.n	1ea6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x15a>
    1e98:	eb0b 0044 	add.w	r0, fp, r4, lsl #1
    1e9c:	f88a 4000 	strb.w	r4, [sl]
    1ea0:	7844      	ldrb	r4, [r0, #1]
    1ea2:	2c20      	cmp	r4, #32
    1ea4:	d1c6      	bne.n	1e34 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xe8>
    1ea6:	f89a 0000 	ldrb.w	r0, [sl]
    1eaa:	f889 0000 	strb.w	r0, [r9]
    1eae:	2c20      	cmp	r4, #32
    1eb0:	bf1c      	itt	ne
    1eb2:	4825      	ldrne	r0, [pc, #148]	; (1f48 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1fc>)
    1eb4:	eb00 1a87 	addne.w	sl, r0, r7, lsl #6
    1eb8:	d040      	beq.n	1f3c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1f0>
    1eba:	bf00      	nop
    1ebc:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    1ec0:	eb08 0780 	add.w	r7, r8, r0, lsl #2
    1ec4:	6870      	ldr	r0, [r6, #4]
    1ec6:	68bd      	ldr	r5, [r7, #8]
    1ec8:	f107 0108 	add.w	r1, r7, #8
    1ecc:	1a28      	subs	r0, r5, r0
    1ece:	0200      	lsls	r0, r0, #8
    1ed0:	17c2      	asrs	r2, r0, #31
    1ed2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1ed6:	1200      	asrs	r0, r0, #8
    1ed8:	d422      	bmi.n	1f20 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1d4>
    1eda:	89c8      	ldrh	r0, [r1, #14]
    1edc:	b370      	cbz	r0, 1f3c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1f0>
    1ede:	89f0      	ldrh	r0, [r6, #14]
    1ee0:	bb60      	cbnz	r0, 1f3c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1f0>
    1ee2:	f8d6 b000 	ldr.w	fp, [r6]
    1ee6:	f002 fec1 	bl	4c6c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    1eea:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1eee:	bf08      	it	eq
    1ef0:	200d      	moveq	r0, #13
    1ef2:	d00b      	beq.n	1f0c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1c0>
    1ef4:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1ef8:	3856      	subs	r0, #86	; 0x56
    1efa:	bf08      	it	eq
    1efc:	201c      	moveq	r0, #28
    1efe:	d005      	beq.n	1f0c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1c0>
    1f00:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1f04:	389f      	subs	r0, #159	; 0x9f
    1f06:	bf14      	ite	ne
    1f08:	2000      	movne	r0, #0
    1f0a:	2032      	moveq	r0, #50	; 0x32
    1f0c:	1c41      	adds	r1, r0, #1
    1f0e:	eba5 000b 	sub.w	r0, r5, fp
    1f12:	0200      	lsls	r0, r0, #8
    1f14:	17c2      	asrs	r2, r0, #31
    1f16:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1f1a:	1200      	asrs	r0, r0, #8
    1f1c:	4288      	cmp	r0, r1
    1f1e:	da0d      	bge.n	1f3c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1f0>
    1f20:	f889 4000 	strb.w	r4, [r9]
    1f24:	7e38      	ldrb	r0, [r7, #24]
    1f26:	7c31      	ldrb	r1, [r6, #16]
    1f28:	4288      	cmp	r0, r1
    1f2a:	d802      	bhi.n	1f32 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1e6>
    1f2c:	2000      	movs	r0, #0
    1f2e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1f32:	eb0a 0044 	add.w	r0, sl, r4, lsl #1
    1f36:	7844      	ldrb	r4, [r0, #1]
    1f38:	2c20      	cmp	r4, #32
    1f3a:	d1bf      	bne.n	1ebc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x170>
    1f3c:	2001      	movs	r0, #1
    1f3e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1f42:	0000      	.short	0x0000
    1f44:	200010ec 	.word	0x200010ec
    1f48:	2000106c 	.word	0x2000106c
    1f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1f50:	b082      	sub	sp, #8
    1f52:	4605      	mov	r5, r0
    1f54:	4614      	mov	r4, r2
    1f56:	4688      	mov	r8, r1
    1f58:	89d0      	ldrh	r0, [r2, #14]
    1f5a:	aa01      	add	r2, sp, #4
    1f5c:	4669      	mov	r1, sp
    1f5e:	f001 ffa7 	bl	3eb0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1f62:	f002 fcb5 	bl	48d0 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    1f66:	f001 ff87 	bl	3e78 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1f6a:	4607      	mov	r7, r0
    1f6c:	4820      	ldr	r0, [pc, #128]	; (1ff0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2a4>)
    1f6e:	f890 102d 	ldrb.w	r1, [r0, #45]	; 0x2d
    1f72:	2920      	cmp	r1, #32
    1f74:	d004      	beq.n	1f80 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x234>
    1f76:	68c0      	ldr	r0, [r0, #12]
    1f78:	1d40      	adds	r0, r0, #5
    1f7a:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1f7e:	e024      	b.n	1fca <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x27e>
    1f80:	89e0      	ldrh	r0, [r4, #14]
    1f82:	f105 0609 	add.w	r6, r5, #9
    1f86:	b1b0      	cbz	r0, 1fb6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x26a>
    1f88:	f002 ffa2 	bl	4ed0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1f8c:	b998      	cbnz	r0, 1fb6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x26a>
    1f8e:	f002 fe6d 	bl	4c6c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    1f92:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1f96:	bf08      	it	eq
    1f98:	200d      	moveq	r0, #13
    1f9a:	d00b      	beq.n	1fb4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x268>
    1f9c:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1fa0:	3856      	subs	r0, #86	; 0x56
    1fa2:	bf08      	it	eq
    1fa4:	201c      	moveq	r0, #28
    1fa6:	d005      	beq.n	1fb4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x268>
    1fa8:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1fac:	389f      	subs	r0, #159	; 0x9f
    1fae:	bf14      	ite	ne
    1fb0:	2000      	movne	r0, #0
    1fb2:	2032      	moveq	r0, #50	; 0x32
    1fb4:	4406      	add	r6, r0
    1fb6:	f1b8 0f00 	cmp.w	r8, #0
    1fba:	d104      	bne.n	1fc6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x27a>
    1fbc:	9800      	ldr	r0, [sp, #0]
    1fbe:	4287      	cmp	r7, r0
    1fc0:	bf84      	itt	hi
    1fc2:	1a38      	subhi	r0, r7, r0
    1fc4:	4406      	addhi	r6, r0
    1fc6:	f026 417f 	bic.w	r1, r6, #4278190080	; 0xff000000
    1fca:	e9d4 2000 	ldrd	r2, r0, [r4]
    1fce:	1a80      	subs	r0, r0, r2
    1fd0:	4408      	add	r0, r1
    1fd2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1fd6:	e9c4 1000 	strd	r1, r0, [r4]
    1fda:	42a9      	cmp	r1, r5
    1fdc:	bf24      	itt	cs
    1fde:	b002      	addcs	sp, #8
    1fe0:	e8bd 81f0 	ldmiacs.w	sp!, {r4, r5, r6, r7, r8, pc}
    1fe4:	68a0      	ldr	r0, [r4, #8]
    1fe6:	1c40      	adds	r0, r0, #1
    1fe8:	60a0      	str	r0, [r4, #8]
    1fea:	b002      	add	sp, #8
    1fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1ff0:	200010ec 	.word	0x200010ec
    1ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1ff8:	b097      	sub	sp, #92	; 0x5c
    1ffa:	4617      	mov	r7, r2
    1ffc:	468b      	mov	fp, r1
    1ffe:	4605      	mov	r5, r0
    2000:	f002 f9e8 	bl	43d4 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
    2004:	4604      	mov	r4, r0
    2006:	f002 fc63 	bl	48d0 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    200a:	4606      	mov	r6, r0
    200c:	f1bb 0f01 	cmp.w	fp, #1
    2010:	bf18      	it	ne
    2012:	f1bb 0f02 	cmpne.w	fp, #2
    2016:	d005      	beq.n	2024 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x24>
    2018:	f640 115d 	movw	r1, #2397	; 0x95d
    201c:	f04f 0070 	mov.w	r0, #112	; 0x70
    2020:	f002 ffce 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2024:	49f8      	ldr	r1, [pc, #992]	; (2408 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x408>)
    2026:	2001      	movs	r0, #1
    2028:	6008      	str	r0, [r1, #0]
    202a:	49f8      	ldr	r1, [pc, #992]	; (240c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x40c>)
    202c:	6889      	ldr	r1, [r1, #8]
    202e:	6008      	str	r0, [r1, #0]
    2030:	2000      	movs	r0, #0
    2032:	f88d 004e 	strb.w	r0, [sp, #78]	; 0x4e
    2036:	900c      	str	r0, [sp, #48]	; 0x30
    2038:	1e40      	subs	r0, r0, #1
    203a:	900d      	str	r0, [sp, #52]	; 0x34
    203c:	49f4      	ldr	r1, [pc, #976]	; (2410 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x410>)
    203e:	ebc7 00c7 	rsb	r0, r7, r7, lsl #3
    2042:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    2046:	f100 0108 	add.w	r1, r0, #8
    204a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
    204e:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
    2052:	e888 100e 	stmia.w	r8, {r1, r2, r3, ip}
    2056:	6980      	ldr	r0, [r0, #24]
    2058:	9012      	str	r0, [sp, #72]	; 0x48
    205a:	a80e      	add	r0, sp, #56	; 0x38
    205c:	f000 fbc4 	bl	27e8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x7e8>
    2060:	9007      	str	r0, [sp, #28]
    2062:	48ec      	ldr	r0, [pc, #944]	; (2414 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x414>)
    2064:	f8bd 8046 	ldrh.w	r8, [sp, #70]	; 0x46
    2068:	8b80      	ldrh	r0, [r0, #28]
    206a:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
    206e:	f1b8 0f00 	cmp.w	r8, #0
    2072:	bf04      	itt	eq
    2074:	2000      	moveq	r0, #0
    2076:	9006      	streq	r0, [sp, #24]
    2078:	d00b      	beq.n	2092 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x92>
    207a:	2001      	movs	r0, #1
    207c:	9006      	str	r0, [sp, #24]
    207e:	48e5      	ldr	r0, [pc, #916]	; (2414 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x414>)
    2080:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
    2084:	b928      	cbnz	r0, 2092 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x92>
    2086:	f002 ff23 	bl	4ed0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    208a:	2800      	cmp	r0, #0
    208c:	bf08      	it	eq
    208e:	2701      	moveq	r7, #1
    2090:	d000      	beq.n	2094 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x94>
    2092:	2700      	movs	r7, #0
    2094:	f002 fdea 	bl	4c6c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    2098:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    209c:	bf08      	it	eq
    209e:	200d      	moveq	r0, #13
    20a0:	d00b      	beq.n	20ba <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xba>
    20a2:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    20a6:	3856      	subs	r0, #86	; 0x56
    20a8:	bf08      	it	eq
    20aa:	201c      	moveq	r0, #28
    20ac:	d005      	beq.n	20ba <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xba>
    20ae:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    20b2:	389f      	subs	r0, #159	; 0x9f
    20b4:	bf14      	ite	ne
    20b6:	2000      	movne	r0, #0
    20b8:	2032      	moveq	r0, #50	; 0x32
    20ba:	f04f 0900 	mov.w	r9, #0
    20be:	46ca      	mov	sl, r9
    20c0:	900b      	str	r0, [sp, #44]	; 0x2c
    20c2:	4546      	cmp	r6, r8
    20c4:	d938      	bls.n	2138 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x138>
    20c6:	9907      	ldr	r1, [sp, #28]
    20c8:	f8df 934c 	ldr.w	r9, [pc, #844]	; 2418 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x418>
    20cc:	ea6f 0c06 	mvn.w	ip, r6
    20d0:	466b      	mov	r3, sp
    20d2:	aa16      	add	r2, sp, #88	; 0x58
    20d4:	eb01 000c 	add.w	r0, r1, ip
    20d8:	4549      	cmp	r1, r9
    20da:	d904      	bls.n	20e6 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xe6>
    20dc:	f240 516f 	movw	r1, #1391	; 0x56f
    20e0:	2070      	movs	r0, #112	; 0x70
    20e2:	f002 ff6d 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    20e6:	49cd      	ldr	r1, [pc, #820]	; (241c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x41c>)
    20e8:	458c      	cmp	ip, r1
    20ea:	dd04      	ble.n	20f6 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xf6>
    20ec:	f44f 61ae 	mov.w	r1, #1392	; 0x570
    20f0:	2070      	movs	r0, #112	; 0x70
    20f2:	f002 ff65 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    20f6:	49ca      	ldr	r1, [pc, #808]	; (2420 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x420>)
    20f8:	458c      	cmp	ip, r1
    20fa:	da04      	bge.n	2106 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x106>
    20fc:	f240 5171 	movw	r1, #1393	; 0x571
    2100:	2070      	movs	r0, #112	; 0x70
    2102:	f002 ff5d 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2106:	49c7      	ldr	r1, [pc, #796]	; (2424 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x424>)
    2108:	4281      	cmp	r1, r0
    210a:	bfdc      	itt	le
    210c:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    2110:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    2114:	dd05      	ble.n	2122 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x122>
    2116:	2800      	cmp	r0, #0
    2118:	bfbc      	itt	lt
    211a:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    211e:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    2122:	4619      	mov	r1, r3
    2124:	f001 fec4 	bl	3eb0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2128:	9800      	ldr	r0, [sp, #0]
    212a:	990e      	ldr	r1, [sp, #56]	; 0x38
    212c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2130:	9000      	str	r0, [sp, #0]
    2132:	1a08      	subs	r0, r1, r0
    2134:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
    2138:	2f00      	cmp	r7, #0
    213a:	bf18      	it	ne
    213c:	f8dd a02c 	ldrne.w	sl, [sp, #44]	; 0x2c
    2140:	d105      	bne.n	214e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x14e>
    2142:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    2146:	2800      	cmp	r0, #0
    2148:	bf18      	it	ne
    214a:	f04f 0a02 	movne.w	sl, #2
    214e:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    2152:	d008      	beq.n	2166 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x166>
    2154:	980e      	ldr	r0, [sp, #56]	; 0x38
    2156:	1b00      	subs	r0, r0, r4
    2158:	0200      	lsls	r0, r0, #8
    215a:	17c1      	asrs	r1, r0, #31
    215c:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    2160:	1200      	asrs	r0, r0, #8
    2162:	2801      	cmp	r0, #1
    2164:	da01      	bge.n	216a <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x16a>
    2166:	2003      	movs	r0, #3
    2168:	e00d      	b.n	2186 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x186>
    216a:	b157      	cbz	r7, 2182 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x182>
    216c:	48a9      	ldr	r0, [pc, #676]	; (2414 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x414>)
    216e:	f890 002b 	ldrb.w	r0, [r0, #43]	; 0x2b
    2172:	b130      	cbz	r0, 2182 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x182>
    2174:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    2178:	f110 0a00 	adds.w	sl, r0, #0
    217c:	bf18      	it	ne
    217e:	f04f 0a02 	movne.w	sl, #2
    2182:	4625      	mov	r5, r4
    2184:	2000      	movs	r0, #0
    2186:	4482      	add	sl, r0
    2188:	980e      	ldr	r0, [sp, #56]	; 0x38
    218a:	eba0 0009 	sub.w	r0, r0, r9
    218e:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    2192:	1e50      	subs	r0, r2, #1
    2194:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2198:	1b41      	subs	r1, r0, r5
    219a:	0209      	lsls	r1, r1, #8
    219c:	17cb      	asrs	r3, r1, #31
    219e:	eb01 6113 	add.w	r1, r1, r3, lsr #24
    21a2:	1209      	asrs	r1, r1, #8
    21a4:	4551      	cmp	r1, sl
    21a6:	db04      	blt.n	21b2 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1b2>
    21a8:	f1b9 0f00 	cmp.w	r9, #0
    21ac:	bf18      	it	ne
    21ae:	920e      	strne	r2, [sp, #56]	; 0x38
    21b0:	e02d      	b.n	220e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x20e>
    21b2:	f1b9 0f00 	cmp.w	r9, #0
    21b6:	d005      	beq.n	21c4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1c4>
    21b8:	f89d 004d 	ldrb.w	r0, [sp, #77]	; 0x4d
    21bc:	b920      	cbnz	r0, 21c8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1c8>
    21be:	f002 fb7d 	bl	48bc <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    21c2:	b108      	cbz	r0, 21c8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1c8>
    21c4:	b9af      	cbnz	r7, 21f2 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1f2>
    21c6:	e00c      	b.n	21e2 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1e2>
    21c8:	b92f      	cbnz	r7, 21d6 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1d6>
    21ca:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    21ce:	2800      	cmp	r0, #0
    21d0:	bf18      	it	ne
    21d2:	f1aa 0a02 	subne.w	sl, sl, #2
    21d6:	f04f 0900 	mov.w	r9, #0
    21da:	f88d 904c 	strb.w	r9, [sp, #76]	; 0x4c
    21de:	464e      	mov	r6, r9
    21e0:	e007      	b.n	21f2 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1f2>
    21e2:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    21e6:	b120      	cbz	r0, 21f2 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1f2>
    21e8:	2000      	movs	r0, #0
    21ea:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
    21ee:	f1aa 0a02 	sub.w	sl, sl, #2
    21f2:	980e      	ldr	r0, [sp, #56]	; 0x38
    21f4:	eba0 0009 	sub.w	r0, r0, r9
    21f8:	1e40      	subs	r0, r0, #1
    21fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    21fe:	1b41      	subs	r1, r0, r5
    2200:	0209      	lsls	r1, r1, #8
    2202:	17ca      	asrs	r2, r1, #31
    2204:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    2208:	1209      	asrs	r1, r1, #8
    220a:	4551      	cmp	r1, sl
    220c:	db7e      	blt.n	230c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x30c>
    220e:	9714      	str	r7, [sp, #80]	; 0x50
    2210:	4605      	mov	r5, r0
    2212:	f04f 0900 	mov.w	r9, #0
    2216:	9f06      	ldr	r7, [sp, #24]
    2218:	f001 ffb4 	bl	4184 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    221c:	1a28      	subs	r0, r5, r0
    221e:	0200      	lsls	r0, r0, #8
    2220:	17c1      	asrs	r1, r0, #31
    2222:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    2226:	ea4f 2a20 	mov.w	sl, r0, asr #8
    222a:	f002 fd1f 	bl	4c6c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    222e:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    2232:	bf08      	it	eq
    2234:	200d      	moveq	r0, #13
    2236:	d00b      	beq.n	2250 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x250>
    2238:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    223c:	3856      	subs	r0, #86	; 0x56
    223e:	bf08      	it	eq
    2240:	201c      	moveq	r0, #28
    2242:	d005      	beq.n	2250 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x250>
    2244:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    2248:	389f      	subs	r0, #159	; 0x9f
    224a:	bf14      	ite	ne
    224c:	2000      	movne	r0, #0
    224e:	2032      	moveq	r0, #50	; 0x32
    2250:	300b      	adds	r0, #11
    2252:	4582      	cmp	sl, r0
    2254:	da20      	bge.n	2298 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x298>
    2256:	f1bb 0f01 	cmp.w	fp, #1
    225a:	d002      	beq.n	2262 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x262>
    225c:	9814      	ldr	r0, [sp, #80]	; 0x50
    225e:	b140      	cbz	r0, 2272 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x272>
    2260:	e012      	b.n	2288 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x288>
    2262:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    2266:	d11c      	bne.n	22a2 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2a2>
    2268:	f640 01de 	movw	r1, #2270	; 0x8de
    226c:	2070      	movs	r0, #112	; 0x70
    226e:	f002 fea7 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2272:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    2276:	d007      	beq.n	2288 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x288>
    2278:	1b60      	subs	r0, r4, r5
    227a:	0200      	lsls	r0, r0, #8
    227c:	17c1      	asrs	r1, r0, #31
    227e:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    2282:	1200      	asrs	r0, r0, #8
    2284:	2804      	cmp	r0, #4
    2286:	dd04      	ble.n	2292 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x292>
    2288:	462c      	mov	r4, r5
    228a:	4620      	mov	r0, r4
    228c:	f001 ffa0 	bl	41d0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    2290:	e007      	b.n	22a2 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2a2>
    2292:	2800      	cmp	r0, #0
    2294:	dc63      	bgt.n	235e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x35e>
    2296:	e004      	b.n	22a2 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2a2>
    2298:	462c      	mov	r4, r5
    229a:	4620      	mov	r0, r4
    229c:	f001 ff98 	bl	41d0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    22a0:	46b9      	mov	r9, r7
    22a2:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    22a6:	d055      	beq.n	2354 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x354>
    22a8:	980e      	ldr	r0, [sp, #56]	; 0x38
    22aa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    22ac:	1b00      	subs	r0, r0, r4
    22ae:	1b12      	subs	r2, r2, r4
    22b0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    22b4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    22b8:	2801      	cmp	r0, #1
    22ba:	d350      	bcc.n	235e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x35e>
    22bc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    22c0:	bf98      	it	ls
    22c2:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    22c6:	d84a      	bhi.n	235e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x35e>
    22c8:	4620      	mov	r0, r4
    22ca:	f00b f973 	bl	d5b4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    22ce:	9907      	ldr	r1, [sp, #28]
    22d0:	4a52      	ldr	r2, [pc, #328]	; (241c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x41c>)
    22d2:	1a0d      	subs	r5, r1, r0
    22d4:	f04f 0a00 	mov.w	sl, #0
    22d8:	1aaa      	subs	r2, r5, r2
    22da:	f17a 0200 	sbcs.w	r2, sl, #0
    22de:	d318      	bcc.n	2312 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x312>
    22e0:	4b4e      	ldr	r3, [pc, #312]	; (241c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x41c>)
    22e2:	1a42      	subs	r2, r0, r1
    22e4:	1ad3      	subs	r3, r2, r3
    22e6:	f17a 0300 	sbcs.w	r3, sl, #0
    22ea:	d312      	bcc.n	2312 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x312>
    22ec:	4b4a      	ldr	r3, [pc, #296]	; (2418 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x418>)
    22ee:	42ab      	cmp	r3, r5
    22f0:	bf3e      	ittt	cc
    22f2:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    22f6:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    22fa:	1845      	addcc	r5, r0, r1
    22fc:	d309      	bcc.n	2312 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x312>
    22fe:	4293      	cmp	r3, r2
    2300:	d231      	bcs.n	2366 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x366>
    2302:	f5c1 2190 	rsb	r1, r1, #294912	; 0x48000
    2306:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    230a:	e000      	b.n	230e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x30e>
    230c:	e027      	b.n	235e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x35e>
    230e:	4408      	add	r0, r1
    2310:	4245      	negs	r5, r0
    2312:	4f40      	ldr	r7, [pc, #256]	; (2414 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x414>)
    2314:	7fb8      	ldrb	r0, [r7, #30]
    2316:	b358      	cbz	r0, 2370 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x370>
    2318:	f1bb 0f01 	cmp.w	fp, #1
    231c:	d005      	beq.n	232a <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x32a>
    231e:	2002      	movs	r0, #2
    2320:	f002 f992 	bl	4648 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2324:	2001      	movs	r0, #1
    2326:	f002 f98f 	bl	4648 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    232a:	45b0      	cmp	r8, r6
    232c:	d22c      	bcs.n	2388 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x388>
    232e:	eba5 0106 	sub.w	r1, r5, r6
    2332:	f04f 0002 	mov.w	r0, #2
    2336:	f002 f8d1 	bl	44dc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    233a:	b390      	cbz	r0, 23a2 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x3a2>
    233c:	f1b8 0f00 	cmp.w	r8, #0
    2340:	bf1c      	itt	ne
    2342:	eba5 0108 	subne.w	r1, r5, r8
    2346:	2001      	movne	r0, #1
    2348:	d034      	beq.n	23b4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x3b4>
    234a:	bf00      	nop
    234c:	f002 f8c6 	bl	44dc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    2350:	b338      	cbz	r0, 23a2 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x3a2>
    2352:	e02f      	b.n	23b4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x3b4>
    2354:	f640 11f1 	movw	r1, #2545	; 0x9f1
    2358:	2070      	movs	r0, #112	; 0x70
    235a:	f002 fe31 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    235e:	b017      	add	sp, #92	; 0x5c
    2360:	2000      	movs	r0, #0
    2362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2366:	f640 21c2 	movw	r1, #2754	; 0xac2
    236a:	2070      	movs	r0, #112	; 0x70
    236c:	f002 fe28 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2370:	45b0      	cmp	r8, r6
    2372:	bf34      	ite	cc
    2374:	4630      	movcc	r0, r6
    2376:	4640      	movcs	r0, r8
    2378:	301e      	adds	r0, #30
    237a:	42a8      	cmp	r0, r5
    237c:	dbcc      	blt.n	2318 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x318>
    237e:	f640 2105 	movw	r1, #2565	; 0xa05
    2382:	2070      	movs	r0, #112	; 0x70
    2384:	f002 fe1c 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2388:	d90c      	bls.n	23a4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x3a4>
    238a:	eba5 0108 	sub.w	r1, r5, r8
    238e:	2001      	movs	r0, #1
    2390:	f002 f8a4 	bl	44dc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    2394:	b128      	cbz	r0, 23a2 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x3a2>
    2396:	2e00      	cmp	r6, #0
    2398:	bf1c      	itt	ne
    239a:	1ba9      	subne	r1, r5, r6
    239c:	2002      	movne	r0, #2
    239e:	d009      	beq.n	23b4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x3b4>
    23a0:	e7d4      	b.n	234c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x34c>
    23a2:	e030      	b.n	2406 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x406>
    23a4:	ea56 0008 	orrs.w	r0, r6, r8
    23a8:	d004      	beq.n	23b4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x3b4>
    23aa:	f640 1141 	movw	r1, #2369	; 0x941
    23ae:	2070      	movs	r0, #112	; 0x70
    23b0:	f002 fe06 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    23b4:	4629      	mov	r1, r5
    23b6:	2000      	movs	r0, #0
    23b8:	f002 f890 	bl	44dc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    23bc:	b318      	cbz	r0, 2406 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x406>
    23be:	9806      	ldr	r0, [sp, #24]
    23c0:	2601      	movs	r6, #1
    23c2:	2800      	cmp	r0, #0
    23c4:	bf04      	itt	eq
    23c6:	f897 002b 	ldrbeq.w	r0, [r7, #43]	; 0x2b
    23ca:	2800      	cmpeq	r0, #0
    23cc:	d002      	beq.n	23d4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x3d4>
    23ce:	f1b9 0f00 	cmp.w	r9, #0
    23d2:	d033      	beq.n	243c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x43c>
    23d4:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
    23d8:	b118      	cbz	r0, 23e2 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x3e2>
    23da:	f002 fc4d 	bl	4c78 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    23de:	f887 a02a 	strb.w	sl, [r7, #42]	; 0x2a
    23e2:	f1b9 0f00 	cmp.w	r9, #0
    23e6:	d02c      	beq.n	2442 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x442>
    23e8:	980b      	ldr	r0, [sp, #44]	; 0x2c
    23ea:	1a20      	subs	r0, r4, r0
    23ec:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    23f0:	2005      	movs	r0, #5
    23f2:	f002 f873 	bl	44dc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    23f6:	b3e0      	cbz	r0, 2472 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x472>
    23f8:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
    23fc:	2800      	cmp	r0, #0
    23fe:	bf08      	it	eq
    2400:	f887 602b 	strbeq.w	r6, [r7, #43]	; 0x2b
    2404:	e025      	b.n	2452 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x452>
    2406:	e00f      	b.n	2428 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x428>
    2408:	40000508 	.word	0x40000508
    240c:	2000003c 	.word	0x2000003c
    2410:	20000cec 	.word	0x20000cec
    2414:	200010ec 	.word	0x200010ec
    2418:	1e847fff 	.word	0x1e847fff
    241c:	0f424000 	.word	0x0f424000
    2420:	f0bdc000 	.word	0xf0bdc000
    2424:	1e848000 	.word	0x1e848000
    2428:	2002      	movs	r0, #2
    242a:	f002 f90d 	bl	4648 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    242e:	2001      	movs	r0, #1
    2430:	f002 f90a 	bl	4648 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2434:	b017      	add	sp, #92	; 0x5c
    2436:	2000      	movs	r0, #0
    2438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    243c:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
    2440:	b190      	cbz	r0, 2468 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x468>
    2442:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
    2446:	b120      	cbz	r0, 2452 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x452>
    2448:	2005      	movs	r0, #5
    244a:	f002 f8fd 	bl	4648 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    244e:	f887 a02b 	strb.w	sl, [r7, #43]	; 0x2b
    2452:	eba5 0008 	sub.w	r0, r5, r8
    2456:	f1a0 0119 	sub.w	r1, r0, #25
    245a:	2900      	cmp	r1, #0
    245c:	dc0f      	bgt.n	247e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x47e>
    245e:	f640 212e 	movw	r1, #2606	; 0xa2e
    2462:	2070      	movs	r0, #112	; 0x70
    2464:	f002 fdac 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2468:	f002 fc22 	bl	4cb0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    246c:	f887 602a 	strb.w	r6, [r7, #42]	; 0x2a
    2470:	e7b7      	b.n	23e2 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x3e2>
    2472:	e7ff      	b.n	2474 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x474>
    2474:	f240 21f2 	movw	r1, #754	; 0x2f2
    2478:	2070      	movs	r0, #112	; 0x70
    247a:	f002 fda1 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    247e:	2003      	movs	r0, #3
    2480:	f002 f82c 	bl	44dc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    2484:	b1c0      	cbz	r0, 24b8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x4b8>
    2486:	480f      	ldr	r0, [pc, #60]	; (24c4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x4c4>)
    2488:	6880      	ldr	r0, [r0, #8]
    248a:	f8c0 a000 	str.w	sl, [r0]
    248e:	480e      	ldr	r0, [pc, #56]	; (24c8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x4c8>)
    2490:	f8c0 a000 	str.w	sl, [r0]
    2494:	ac0c      	add	r4, sp, #48	; 0x30
    2496:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    249a:	6038      	str	r0, [r7, #0]
    249c:	6079      	str	r1, [r7, #4]
    249e:	60ba      	str	r2, [r7, #8]
    24a0:	60fb      	str	r3, [r7, #12]
    24a2:	ac10      	add	r4, sp, #64	; 0x40
    24a4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    24a8:	6138      	str	r0, [r7, #16]
    24aa:	6179      	str	r1, [r7, #20]
    24ac:	61ba      	str	r2, [r7, #24]
    24ae:	61fb      	str	r3, [r7, #28]
    24b0:	b017      	add	sp, #92	; 0x5c
    24b2:	2001      	movs	r0, #1
    24b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    24b8:	f640 2136 	movw	r1, #2614	; 0xa36
    24bc:	2070      	movs	r0, #112	; 0x70
    24be:	f002 fd7f 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    24c2:	0000      	.short	0x0000
    24c4:	2000003c 	.word	0x2000003c
    24c8:	40000508 	.word	0x40000508
    24cc:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    24d0:	4606      	mov	r6, r0
    24d2:	7808      	ldrb	r0, [r1, #0]
    24d4:	7490      	strb	r0, [r2, #18]
    24d6:	7ac8      	ldrb	r0, [r1, #11]
    24d8:	7450      	strb	r0, [r2, #17]
    24da:	7a88      	ldrb	r0, [r1, #10]
    24dc:	7410      	strb	r0, [r2, #16]
    24de:	8908      	ldrh	r0, [r1, #8]
    24e0:	81d0      	strh	r0, [r2, #14]
    24e2:	f8df 8198 	ldr.w	r8, [pc, #408]	; 267c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x67c>
    24e6:	6870      	ldr	r0, [r6, #4]
    24e8:	469a      	mov	sl, r3
    24ea:	fba0 7908 	umull	r7, r9, r0, r8
    24ee:	4614      	mov	r4, r2
    24f0:	460d      	mov	r5, r1
    24f2:	6830      	ldr	r0, [r6, #0]
    24f4:	f00b f85e 	bl	d5b4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    24f8:	19c1      	adds	r1, r0, r7
    24fa:	7828      	ldrb	r0, [r5, #0]
    24fc:	ea4f 0c68 	mov.w	ip, r8, asr #1
    2500:	f149 0200 	adc.w	r2, r9, #0
    2504:	f1a8 0e01 	sub.w	lr, r8, #1
    2508:	f1cc 0b00 	rsb	fp, ip, #0
    250c:	b168      	cbz	r0, 252a <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x52a>
    250e:	89e0      	ldrh	r0, [r4, #14]
    2510:	7c67      	ldrb	r7, [r4, #17]
    2512:	43c0      	mvns	r0, r0
    2514:	f8d5 9004 	ldr.w	r9, [r5, #4]
    2518:	f104 020c 	add.w	r2, r4, #12
    251c:	4560      	cmp	r0, ip
    251e:	dd5f      	ble.n	25e0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x5e0>
    2520:	f44f 61ae 	mov.w	r1, #1392	; 0x570
    2524:	2070      	movs	r0, #112	; 0x70
    2526:	f002 fd4b 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    252a:	f8df 9154 	ldr.w	r9, [pc, #340]	; 2680 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x680>
    252e:	e9d5 0304 	ldrd	r0, r3, [r5, #16]
    2532:	eb11 0a09 	adds.w	sl, r1, r9
    2536:	f142 0900 	adc.w	r9, r2, #0
    253a:	ebb0 0a0a 	subs.w	sl, r0, sl
    253e:	eb73 0909 	sbcs.w	r9, r3, r9
    2542:	d245      	bcs.n	25d0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x5d0>
    2544:	1a41      	subs	r1, r0, r1
    2546:	eb73 0102 	sbcs.w	r1, r3, r2
    254a:	d341      	bcc.n	25d0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x5d0>
    254c:	1bc7      	subs	r7, r0, r7
    254e:	6870      	ldr	r0, [r6, #4]
    2550:	60a0      	str	r0, [r4, #8]
    2552:	4547      	cmp	r7, r8
    2554:	d305      	bcc.n	2562 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x562>
    2556:	1c40      	adds	r0, r0, #1
    2558:	f1a7 57f4 	sub.w	r7, r7, #511705088	; 0x1e800000
    255c:	f5a7 2790 	sub.w	r7, r7, #294912	; 0x48000
    2560:	60a0      	str	r0, [r4, #8]
    2562:	89e0      	ldrh	r0, [r4, #14]
    2564:	686d      	ldr	r5, [r5, #4]
    2566:	43c1      	mvns	r1, r0
    2568:	7c66      	ldrb	r6, [r4, #17]
    256a:	1878      	adds	r0, r7, r1
    256c:	f104 020c 	add.w	r2, r4, #12
    2570:	4577      	cmp	r7, lr
    2572:	d904      	bls.n	257e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x57e>
    2574:	f240 516f 	movw	r1, #1391	; 0x56f
    2578:	2070      	movs	r0, #112	; 0x70
    257a:	f002 fd21 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    257e:	4561      	cmp	r1, ip
    2580:	dcce      	bgt.n	2520 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x520>
    2582:	4559      	cmp	r1, fp
    2584:	db2f      	blt.n	25e6 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x5e6>
    2586:	4580      	cmp	r8, r0
    2588:	bfdc      	itt	le
    258a:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    258e:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    2592:	dd05      	ble.n	25a0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x5a0>
    2594:	2800      	cmp	r0, #0
    2596:	bfbc      	itt	lt
    2598:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    259c:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    25a0:	4621      	mov	r1, r4
    25a2:	f001 fc85 	bl	3eb0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    25a6:	6820      	ldr	r0, [r4, #0]
    25a8:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    25ac:	1978      	adds	r0, r7, r5
    25ae:	1c40      	adds	r0, r0, #1
    25b0:	6021      	str	r1, [r4, #0]
    25b2:	2e00      	cmp	r6, #0
    25b4:	bf08      	it	eq
    25b6:	307a      	addeq	r0, #122	; 0x7a
    25b8:	d003      	beq.n	25c2 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x5c2>
    25ba:	2e01      	cmp	r6, #1
    25bc:	bf08      	it	eq
    25be:	3048      	addeq	r0, #72	; 0x48
    25c0:	d134      	bne.n	262c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x62c>
    25c2:	f001 fc59 	bl	3e78 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    25c6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    25ca:	6060      	str	r0, [r4, #4]
    25cc:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    25d0:	6830      	ldr	r0, [r6, #0]
    25d2:	1e40      	subs	r0, r0, #1
    25d4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    25d8:	6020      	str	r0, [r4, #0]
    25da:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
    25de:	e7f4      	b.n	25ca <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x5ca>
    25e0:	4601      	mov	r1, r0
    25e2:	4558      	cmp	r0, fp
    25e4:	da04      	bge.n	25f0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x5f0>
    25e6:	f240 5171 	movw	r1, #1393	; 0x571
    25ea:	2070      	movs	r0, #112	; 0x70
    25ec:	f002 fce8 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    25f0:	4580      	cmp	r8, r0
    25f2:	bfdc      	itt	le
    25f4:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
    25f8:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
    25fc:	dd05      	ble.n	260a <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x60a>
    25fe:	2800      	cmp	r0, #0
    2600:	bfbc      	itt	lt
    2602:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
    2606:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
    260a:	4621      	mov	r1, r4
    260c:	f001 fc50 	bl	3eb0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2610:	6820      	ldr	r0, [r4, #0]
    2612:	2f00      	cmp	r7, #0
    2614:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    2618:	f109 0001 	add.w	r0, r9, #1
    261c:	6021      	str	r1, [r4, #0]
    261e:	bf08      	it	eq
    2620:	307a      	addeq	r0, #122	; 0x7a
    2622:	d008      	beq.n	2636 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x636>
    2624:	2f01      	cmp	r7, #1
    2626:	bf08      	it	eq
    2628:	3048      	addeq	r0, #72	; 0x48
    262a:	d004      	beq.n	2636 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x636>
    262c:	f240 6124 	movw	r1, #1572	; 0x624
    2630:	2070      	movs	r0, #112	; 0x70
    2632:	f002 fcc5 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2636:	f001 fc1f 	bl	3e78 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    263a:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    263e:	6061      	str	r1, [r4, #4]
    2640:	6870      	ldr	r0, [r6, #4]
    2642:	60a0      	str	r0, [r4, #8]
    2644:	2100      	movs	r1, #0
    2646:	4622      	mov	r2, r4
    2648:	6830      	ldr	r0, [r6, #0]
    264a:	f7ff fc7f 	bl	1f4c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x200>
    264e:	6832      	ldr	r2, [r6, #0]
    2650:	4653      	mov	r3, sl
    2652:	4621      	mov	r1, r4
    2654:	6928      	ldr	r0, [r5, #16]
    2656:	f7ff fa25 	bl	1aa4 <MPSL_IRQ_RADIO_Handler+0xb8>
    265a:	2800      	cmp	r0, #0
    265c:	bf18      	it	ne
    265e:	e8bd 9ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    2662:	e9d4 2100 	ldrd	r2, r1, [r4]
    2666:	6830      	ldr	r0, [r6, #0]
    2668:	1a89      	subs	r1, r1, r2
    266a:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    266e:	4408      	add	r0, r1
    2670:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2674:	e9c4 2000 	strd	r2, r0, [r4]
    2678:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    267c:	1e848000 	.word	0x1e848000
    2680:	0f424000 	.word	0x0f424000
    2684:	b570      	push	{r4, r5, r6, lr}
    2686:	4d1e      	ldr	r5, [pc, #120]	; (2700 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x700>)
    2688:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    268c:	2820      	cmp	r0, #32
    268e:	bf18      	it	ne
    2690:	bd70      	popne	{r4, r5, r6, pc}
    2692:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
    2696:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    269a:	4428      	add	r0, r5
    269c:	f890 4020 	ldrb.w	r4, [r0, #32]
    26a0:	2c20      	cmp	r4, #32
    26a2:	d027      	beq.n	26f4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x6f4>
    26a4:	4b17      	ldr	r3, [pc, #92]	; (2704 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x704>)
    26a6:	eb03 1182 	add.w	r1, r3, r2, lsl #6
    26aa:	eb01 0144 	add.w	r1, r1, r4, lsl #1
    26ae:	7849      	ldrb	r1, [r1, #1]
    26b0:	f880 1020 	strb.w	r1, [r0, #32]
    26b4:	20ff      	movs	r0, #255	; 0xff
    26b6:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    26ba:	f885 402d 	strb.w	r4, [r5, #45]	; 0x2d
    26be:	4621      	mov	r1, r4
    26c0:	2002      	movs	r0, #2
    26c2:	f000 f8cb 	bl	285c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x85c>
    26c6:	2000      	movs	r0, #0
    26c8:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
    26cc:	77a8      	strb	r0, [r5, #30]
    26ce:	490e      	ldr	r1, [pc, #56]	; (2708 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x708>)
    26d0:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    26d4:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    26d8:	7e00      	ldrb	r0, [r0, #24]
    26da:	2800      	cmp	r0, #0
    26dc:	bf08      	it	eq
    26de:	f002 fdc9 	bleq	5274 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>
    26e2:	2000      	movs	r0, #0
    26e4:	4909      	ldr	r1, [pc, #36]	; (270c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x70c>)
    26e6:	6849      	ldr	r1, [r1, #4]
    26e8:	2900      	cmp	r1, #0
    26ea:	bf08      	it	eq
    26ec:	bd70      	popeq	{r4, r5, r6, pc}
    26ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    26f2:	4708      	bx	r1
    26f4:	f44f 714b 	mov.w	r1, #812	; 0x32c
    26f8:	2070      	movs	r0, #112	; 0x70
    26fa:	f002 fc61 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    26fe:	0000      	.short	0x0000
    2700:	200010ec 	.word	0x200010ec
    2704:	2000106c 	.word	0x2000106c
    2708:	20000cec 	.word	0x20000cec
    270c:	2000003c 	.word	0x2000003c
    2710:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    2714:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 27d8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x7d8>
    2718:	f898 502c 	ldrb.w	r5, [r8, #44]	; 0x2c
    271c:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    2720:	4440      	add	r0, r8
    2722:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    2726:	2c20      	cmp	r4, #32
    2728:	bf08      	it	eq
    272a:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    272e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 27dc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x7dc>
    2732:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 27e0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x7e0>
    2736:	f5aa 7960 	sub.w	r9, sl, #896	; 0x380
    273a:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
    273e:	2607      	movs	r6, #7
    2740:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    2744:	2801      	cmp	r0, #1
    2746:	d00e      	beq.n	2766 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x766>
    2748:	2804      	cmp	r0, #4
    274a:	bf08      	it	eq
    274c:	2602      	moveq	r6, #2
    274e:	d00a      	beq.n	2766 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x766>
    2750:	2805      	cmp	r0, #5
    2752:	bf0c      	ite	eq
    2754:	2603      	moveq	r6, #3
    2756:	2806      	cmpne	r0, #6
    2758:	d005      	beq.n	2766 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x766>
    275a:	f640 01a8 	movw	r1, #2216	; 0x8a8
    275e:	f04f 0070 	mov.w	r0, #112	; 0x70
    2762:	f002 fc2d 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2766:	f1bb 0f00 	cmp.w	fp, #0
    276a:	bf18      	it	ne
    276c:	f3af 8000 	nopne.w
    2770:	f3ef 8010 	mrs	r0, PRIMASK
    2774:	b672      	cpsid	i
    2776:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    277a:	784a      	ldrb	r2, [r1, #1]
    277c:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    2780:	4441      	add	r1, r8
    2782:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    2786:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    278a:	42a2      	cmp	r2, r4
    278c:	bf04      	itt	eq
    278e:	2220      	moveq	r2, #32
    2790:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    2794:	b1c0      	cbz	r0, 27c8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x7c8>
    2796:	462a      	mov	r2, r5
    2798:	4621      	mov	r1, r4
    279a:	2001      	movs	r0, #1
    279c:	f000 f85e 	bl	285c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x85c>
    27a0:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    27a4:	eb09 0081 	add.w	r0, r9, r1, lsl #2
    27a8:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
    27ac:	6840      	ldr	r0, [r0, #4]
    27ae:	4631      	mov	r1, r6
    27b0:	4790      	blx	r2
    27b2:	f898 502c 	ldrb.w	r5, [r8, #44]	; 0x2c
    27b6:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    27ba:	4440      	add	r0, r8
    27bc:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    27c0:	2c20      	cmp	r4, #32
    27c2:	d1ba      	bne.n	273a <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x73a>
    27c4:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    27c8:	4806      	ldr	r0, [pc, #24]	; (27e4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x7e4>)
    27ca:	2800      	cmp	r0, #0
    27cc:	bf18      	it	ne
    27ce:	f3af 8000 	nopne.w
    27d2:	b662      	cpsie	i
    27d4:	e7df      	b.n	2796 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x796>
    27d6:	0000      	.short	0x0000
    27d8:	200010ec 	.word	0x200010ec
    27dc:	00000000 	.word	0x00000000
    27e0:	2000106c 	.word	0x2000106c
    27e4:	00000000 	.word	0x00000000
    27e8:	b510      	push	{r4, lr}
    27ea:	4604      	mov	r4, r0
    27ec:	6800      	ldr	r0, [r0, #0]
    27ee:	f00a fee1 	bl	d5b4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    27f2:	4602      	mov	r2, r0
    27f4:	89e0      	ldrh	r0, [r4, #14]
    27f6:	7b21      	ldrb	r1, [r4, #12]
    27f8:	4b14      	ldr	r3, [pc, #80]	; (284c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x84c>)
    27fa:	4408      	add	r0, r1
    27fc:	1c41      	adds	r1, r0, #1
    27fe:	1850      	adds	r0, r2, r1
    2800:	429a      	cmp	r2, r3
    2802:	d904      	bls.n	280e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x80e>
    2804:	f240 516f 	movw	r1, #1391	; 0x56f
    2808:	2070      	movs	r0, #112	; 0x70
    280a:	f002 fbd9 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    280e:	4a10      	ldr	r2, [pc, #64]	; (2850 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x850>)
    2810:	4291      	cmp	r1, r2
    2812:	dd04      	ble.n	281e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x81e>
    2814:	f44f 61ae 	mov.w	r1, #1392	; 0x570
    2818:	2070      	movs	r0, #112	; 0x70
    281a:	f002 fbd1 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    281e:	4a0d      	ldr	r2, [pc, #52]	; (2854 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x854>)
    2820:	4291      	cmp	r1, r2
    2822:	da04      	bge.n	282e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x82e>
    2824:	f240 5171 	movw	r1, #1393	; 0x571
    2828:	2070      	movs	r0, #112	; 0x70
    282a:	f002 fbc9 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    282e:	490a      	ldr	r1, [pc, #40]	; (2858 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x858>)
    2830:	4281      	cmp	r1, r0
    2832:	bfde      	ittt	le
    2834:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    2838:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    283c:	bd10      	pople	{r4, pc}
    283e:	2800      	cmp	r0, #0
    2840:	bfbc      	itt	lt
    2842:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    2846:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    284a:	bd10      	pop	{r4, pc}
    284c:	1e847fff 	.word	0x1e847fff
    2850:	0f424000 	.word	0x0f424000
    2854:	f0bdc000 	.word	0xf0bdc000
    2858:	1e848000 	.word	0x1e848000
    285c:	f8df c058 	ldr.w	ip, [pc, #88]	; 28b8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x8b8>
    2860:	b510      	push	{r4, lr}
    2862:	2300      	movs	r3, #0
    2864:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    2868:	2807      	cmp	r0, #7
    286a:	d21f      	bcs.n	28ac <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x8ac>
    286c:	e8df f000 	tbb	[pc, r0]
    2870:	05050505 	.word	0x05050505
    2874:	00040404 	.word	0x00040404
    2878:	2301      	movs	r3, #1
    287a:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    287e:	2b00      	cmp	r3, #0
    2880:	bf08      	it	eq
    2882:	bd10      	popeq	{r4, pc}
    2884:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    2888:	480c      	ldr	r0, [pc, #48]	; (28bc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x8bc>)
    288a:	4402      	add	r2, r0
    288c:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    2890:	2820      	cmp	r0, #32
    2892:	bf0e      	itee	eq
    2894:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    2898:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    289c:	7041      	strbne	r1, [r0, #1]
    289e:	2020      	movs	r0, #32
    28a0:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    28a4:	7058      	strb	r0, [r3, #1]
    28a6:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    28aa:	bd10      	pop	{r4, pc}
    28ac:	f44f 711a 	mov.w	r1, #616	; 0x268
    28b0:	2070      	movs	r0, #112	; 0x70
    28b2:	f002 fb85 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    28b6:	0000      	.short	0x0000
    28b8:	2000106c 	.word	0x2000106c
    28bc:	200010ec 	.word	0x200010ec
    28c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    28c4:	4617      	mov	r7, r2
    28c6:	f8df a158 	ldr.w	sl, [pc, #344]	; 2a20 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xa20>
    28ca:	eb02 0047 	add.w	r0, r2, r7, lsl #1
    28ce:	4450      	add	r0, sl
    28d0:	4688      	mov	r8, r1
    28d2:	f890 4020 	ldrb.w	r4, [r0, #32]
    28d6:	2901      	cmp	r1, #1
    28d8:	4625      	mov	r5, r4
    28da:	bf18      	it	ne
    28dc:	f1b8 0f02 	cmpne.w	r8, #2
    28e0:	d005      	beq.n	28ee <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x8ee>
    28e2:	f640 216c 	movw	r1, #2668	; 0xa6c
    28e6:	f04f 0070 	mov.w	r0, #112	; 0x70
    28ea:	f002 fb69 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    28ee:	f04f 0b00 	mov.w	fp, #0
    28f2:	2d20      	cmp	r5, #32
    28f4:	d044      	beq.n	2980 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x980>
    28f6:	f89a 001e 	ldrb.w	r0, [sl, #30]
    28fa:	2600      	movs	r6, #0
    28fc:	2800      	cmp	r0, #0
    28fe:	bf08      	it	eq
    2900:	2602      	moveq	r6, #2
    2902:	f001 fc3f 	bl	4184 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2906:	4b47      	ldr	r3, [pc, #284]	; (2a24 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xa24>)
    2908:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    290c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    2910:	688a      	ldr	r2, [r1, #8]
    2912:	68c9      	ldr	r1, [r1, #12]
    2914:	1a12      	subs	r2, r2, r0
    2916:	1a09      	subs	r1, r1, r0
    2918:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    291c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2920:	4296      	cmp	r6, r2
    2922:	bf99      	ittee	ls
    2924:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    2928:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    292c:	4a3e      	ldrhi	r2, [pc, #248]	; (2a28 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xa28>)
    292e:	eb02 1987 	addhi.w	r9, r2, r7, lsl #6
    2932:	d923      	bls.n	297c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x97c>
    2934:	4622      	mov	r2, r4
    2936:	eb09 0142 	add.w	r1, r9, r2, lsl #1
    293a:	784c      	ldrb	r4, [r1, #1]
    293c:	2c20      	cmp	r4, #32
    293e:	d015      	beq.n	296c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x96c>
    2940:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    2944:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
    2948:	f8dc 1008 	ldr.w	r1, [ip, #8]
    294c:	f8dc c00c 	ldr.w	ip, [ip, #12]
    2950:	1a09      	subs	r1, r1, r0
    2952:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2956:	ebac 0c00 	sub.w	ip, ip, r0
    295a:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    295e:	428e      	cmp	r6, r1
    2960:	bf9c      	itt	ls
    2962:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    2966:	f5bc 0f00 	cmpls.w	ip, #8388608	; 0x800000
    296a:	d8e3      	bhi.n	2934 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x934>
    296c:	2a20      	cmp	r2, #32
    296e:	d005      	beq.n	297c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x97c>
    2970:	463b      	mov	r3, r7
    2972:	2120      	movs	r1, #32
    2974:	2004      	movs	r0, #4
    2976:	f7ff f859 	bl	1a2c <MPSL_IRQ_RADIO_Handler+0x40>
    297a:	4604      	mov	r4, r0
    297c:	42ac      	cmp	r4, r5
    297e:	d10f      	bne.n	29a0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x9a0>
    2980:	f89a 002e 	ldrb.w	r0, [sl, #46]	; 0x2e
    2984:	2820      	cmp	r0, #32
    2986:	d00f      	beq.n	29a8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x9a8>
    2988:	9900      	ldr	r1, [sp, #0]
    298a:	f8da 0008 	ldr.w	r0, [sl, #8]
    298e:	1c89      	adds	r1, r1, #2
    2990:	1a08      	subs	r0, r1, r0
    2992:	0200      	lsls	r0, r0, #8
    2994:	17c1      	asrs	r1, r0, #31
    2996:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    299a:	1200      	asrs	r0, r0, #8
    299c:	2800      	cmp	r0, #0
    299e:	dd03      	ble.n	29a8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x9a8>
    29a0:	b003      	add	sp, #12
    29a2:	2000      	movs	r0, #0
    29a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    29a8:	2d20      	cmp	r5, #32
    29aa:	d016      	beq.n	29da <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x9da>
    29ac:	462a      	mov	r2, r5
    29ae:	4641      	mov	r1, r8
    29b0:	9800      	ldr	r0, [sp, #0]
    29b2:	f7ff fb1f 	bl	1ff4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2a8>
    29b6:	2800      	cmp	r0, #0
    29b8:	bf1f      	itttt	ne
    29ba:	f88a 502e 	strbne.w	r5, [sl, #46]	; 0x2e
    29be:	2002      	movne	r0, #2
    29c0:	b003      	addne	sp, #12
    29c2:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    29c6:	463b      	mov	r3, r7
    29c8:	462a      	mov	r2, r5
    29ca:	2120      	movs	r1, #32
    29cc:	2004      	movs	r0, #4
    29ce:	f7ff f82d 	bl	1a2c <MPSL_IRQ_RADIO_Handler+0x40>
    29d2:	b003      	add	sp, #12
    29d4:	2000      	movs	r0, #0
    29d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    29da:	f89a 002a 	ldrb.w	r0, [sl, #42]	; 0x2a
    29de:	b118      	cbz	r0, 29e8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x9e8>
    29e0:	f002 f94a 	bl	4c78 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    29e4:	f88a b02a 	strb.w	fp, [sl, #42]	; 0x2a
    29e8:	f89a 002b 	ldrb.w	r0, [sl, #43]	; 0x2b
    29ec:	b120      	cbz	r0, 29f8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x9f8>
    29ee:	2005      	movs	r0, #5
    29f0:	f001 fe2a 	bl	4648 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    29f4:	f88a b02b 	strb.w	fp, [sl, #43]	; 0x2b
    29f8:	2004      	movs	r0, #4
    29fa:	f001 fe25 	bl	4648 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    29fe:	f001 fe93 	bl	4728 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    2a02:	2020      	movs	r0, #32
    2a04:	f88a 002e 	strb.w	r0, [sl, #46]	; 0x2e
    2a08:	4808      	ldr	r0, [pc, #32]	; (2a2c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xa2c>)
    2a0a:	6880      	ldr	r0, [r0, #8]
    2a0c:	f8c0 b000 	str.w	fp, [r0]
    2a10:	4807      	ldr	r0, [pc, #28]	; (2a30 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xa30>)
    2a12:	f8c0 b000 	str.w	fp, [r0]
    2a16:	b003      	add	sp, #12
    2a18:	2001      	movs	r0, #1
    2a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2a1e:	0000      	.short	0x0000
    2a20:	200010ec 	.word	0x200010ec
    2a24:	20000cec 	.word	0x20000cec
    2a28:	2000106c 	.word	0x2000106c
    2a2c:	2000003c 	.word	0x2000003c
    2a30:	40000508 	.word	0x40000508

00002a34 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    2a34:	4906      	ldr	r1, [pc, #24]	; (2a50 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    2a36:	b510      	push	{r4, lr}
    2a38:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
    2a3c:	2a20      	cmp	r2, #32
    2a3e:	bf1c      	itt	ne
    2a40:	7788      	strbne	r0, [r1, #30]
    2a42:	bd10      	popne	{r4, pc}
    2a44:	f240 317a 	movw	r1, #890	; 0x37a
    2a48:	2070      	movs	r0, #112	; 0x70
    2a4a:	f002 fab9 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2a4e:	0000      	.short	0x0000
    2a50:	200010ec 	.word	0x200010ec

00002a54 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    2a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2a58:	4e69      	ldr	r6, [pc, #420]	; (2c00 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ac>)
    2a5a:	4607      	mov	r7, r0
    2a5c:	b08d      	sub	sp, #52	; 0x34
    2a5e:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
    2a62:	4688      	mov	r8, r1
    2a64:	2820      	cmp	r0, #32
    2a66:	d055      	beq.n	2b14 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc0>
    2a68:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
    2a6c:	f106 0408 	add.w	r4, r6, #8
    2a70:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2a74:	f5a6 6980 	sub.w	r9, r6, #1024	; 0x400
    2a78:	eb09 0a80 	add.w	sl, r9, r0, lsl #2
    2a7c:	2020      	movs	r0, #32
    2a7e:	f88d 0020 	strb.w	r0, [sp, #32]
    2a82:	f896 002c 	ldrb.w	r0, [r6, #44]	; 0x2c
    2a86:	aa0a      	add	r2, sp, #40	; 0x28
    2a88:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2a8c:	4430      	add	r0, r6
    2a8e:	a909      	add	r1, sp, #36	; 0x24
    2a90:	f890 5020 	ldrb.w	r5, [r0, #32]
    2a94:	68f0      	ldr	r0, [r6, #12]
    2a96:	9002      	str	r0, [sp, #8]
    2a98:	6830      	ldr	r0, [r6, #0]
    2a9a:	4438      	add	r0, r7
    2a9c:	f001 fa08 	bl	3eb0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2aa0:	f8da 000c 	ldr.w	r0, [sl, #12]
    2aa4:	9909      	ldr	r1, [sp, #36]	; 0x24
    2aa6:	2f65      	cmp	r7, #101	; 0x65
    2aa8:	4408      	add	r0, r1
    2aaa:	d338      	bcc.n	2b1e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    2aac:	4a55      	ldr	r2, [pc, #340]	; (2c04 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b0>)
    2aae:	2100      	movs	r1, #0
    2ab0:	1bd2      	subs	r2, r2, r7
    2ab2:	eb71 0201 	sbcs.w	r2, r1, r1
    2ab6:	d332      	bcc.n	2b1e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    2ab8:	6822      	ldr	r2, [r4, #0]
    2aba:	1a82      	subs	r2, r0, r2
    2abc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    2ac0:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    2ac4:	d82b      	bhi.n	2b1e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    2ac6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2aca:	6060      	str	r0, [r4, #4]
    2acc:	4630      	mov	r0, r6
    2ace:	f884 8010 	strb.w	r8, [r4, #16]
    2ad2:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    2ad6:	f10d 0a20 	add.w	sl, sp, #32
    2ada:	2d20      	cmp	r5, #32
    2adc:	bf1c      	itt	ne
    2ade:	494a      	ldrne	r1, [pc, #296]	; (2c08 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>)
    2ae0:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    2ae4:	d050      	beq.n	2b88 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    2ae6:	bf00      	nop
    2ae8:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    2aec:	eb09 0880 	add.w	r8, r9, r0, lsl #2
    2af0:	6861      	ldr	r1, [r4, #4]
    2af2:	f8d8 6008 	ldr.w	r6, [r8, #8]
    2af6:	f108 0008 	add.w	r0, r8, #8
    2afa:	1a71      	subs	r1, r6, r1
    2afc:	0209      	lsls	r1, r1, #8
    2afe:	17ca      	asrs	r2, r1, #31
    2b00:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    2b04:	1209      	asrs	r1, r1, #8
    2b06:	d42d      	bmi.n	2b64 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x110>
    2b08:	89c0      	ldrh	r0, [r0, #14]
    2b0a:	2800      	cmp	r0, #0
    2b0c:	d03c      	beq.n	2b88 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    2b0e:	89e0      	ldrh	r0, [r4, #14]
    2b10:	b148      	cbz	r0, 2b26 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xd2>
    2b12:	e039      	b.n	2b88 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    2b14:	f44f 6133 	mov.w	r1, #2864	; 0xb30
    2b18:	2070      	movs	r0, #112	; 0x70
    2b1a:	f002 fa51 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2b1e:	b00d      	add	sp, #52	; 0x34
    2b20:	2001      	movs	r0, #1
    2b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2b26:	6820      	ldr	r0, [r4, #0]
    2b28:	900c      	str	r0, [sp, #48]	; 0x30
    2b2a:	f002 f89f 	bl	4c6c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    2b2e:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    2b32:	bf08      	it	eq
    2b34:	200d      	moveq	r0, #13
    2b36:	d00b      	beq.n	2b50 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xfc>
    2b38:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    2b3c:	3856      	subs	r0, #86	; 0x56
    2b3e:	bf08      	it	eq
    2b40:	201c      	moveq	r0, #28
    2b42:	d005      	beq.n	2b50 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xfc>
    2b44:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    2b48:	389f      	subs	r0, #159	; 0x9f
    2b4a:	bf14      	ite	ne
    2b4c:	2000      	movne	r0, #0
    2b4e:	2032      	moveq	r0, #50	; 0x32
    2b50:	1c41      	adds	r1, r0, #1
    2b52:	980c      	ldr	r0, [sp, #48]	; 0x30
    2b54:	1a30      	subs	r0, r6, r0
    2b56:	0200      	lsls	r0, r0, #8
    2b58:	17c2      	asrs	r2, r0, #31
    2b5a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    2b5e:	1200      	asrs	r0, r0, #8
    2b60:	4288      	cmp	r0, r1
    2b62:	da11      	bge.n	2b88 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    2b64:	f88a 5000 	strb.w	r5, [sl]
    2b68:	f898 1018 	ldrb.w	r1, [r8, #24]
    2b6c:	7c20      	ldrb	r0, [r4, #16]
    2b6e:	4281      	cmp	r1, r0
    2b70:	d805      	bhi.n	2b7e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x12a>
    2b72:	9802      	ldr	r0, [sp, #8]
    2b74:	6060      	str	r0, [r4, #4]
    2b76:	b00d      	add	sp, #52	; 0x34
    2b78:	2002      	movs	r0, #2
    2b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2b7e:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    2b82:	7845      	ldrb	r5, [r0, #1]
    2b84:	2d20      	cmp	r5, #32
    2b86:	d1af      	bne.n	2ae8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x94>
    2b88:	2005      	movs	r0, #5
    2b8a:	f001 fd5d 	bl	4648 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2b8e:	4c1c      	ldr	r4, [pc, #112]	; (2c00 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ac>)
    2b90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2b94:	6060      	str	r0, [r4, #4]
    2b96:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    2b9a:	f89d 2020 	ldrb.w	r2, [sp, #32]
    2b9e:	2120      	movs	r1, #32
    2ba0:	2a20      	cmp	r2, #32
    2ba2:	d003      	beq.n	2bac <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x158>
    2ba4:	2005      	movs	r0, #5
    2ba6:	f7fe ff41 	bl	1a2c <MPSL_IRQ_RADIO_Handler+0x40>
    2baa:	e004      	b.n	2bb6 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x162>
    2bac:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    2bb0:	4420      	add	r0, r4
    2bb2:	f890 0020 	ldrb.w	r0, [r0, #32]
    2bb6:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
    2bba:	4913      	ldr	r1, [pc, #76]	; (2c08 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>)
    2bbc:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    2bc0:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
    2bc4:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    2bc8:	7048      	strb	r0, [r1, #1]
    2bca:	6820      	ldr	r0, [r4, #0]
    2bcc:	4438      	add	r0, r7
    2bce:	6020      	str	r0, [r4, #0]
    2bd0:	20ff      	movs	r0, #255	; 0xff
    2bd2:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    2bd6:	7e60      	ldrb	r0, [r4, #25]
    2bd8:	2801      	cmp	r0, #1
    2bda:	d105      	bne.n	2be8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x194>
    2bdc:	68e0      	ldr	r0, [r4, #12]
    2bde:	1e40      	subs	r0, r0, #1
    2be0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2be4:	f001 fb94 	bl	4310 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    2be8:	f89d 0020 	ldrb.w	r0, [sp, #32]
    2bec:	2820      	cmp	r0, #32
    2bee:	d003      	beq.n	2bf8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1a4>
    2bf0:	4806      	ldr	r0, [pc, #24]	; (2c0c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b8>)
    2bf2:	7840      	ldrb	r0, [r0, #1]
    2bf4:	f002 fab8 	bl	5168 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2bf8:	b00d      	add	sp, #52	; 0x34
    2bfa:	2000      	movs	r0, #0
    2bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2c00:	200010ec 	.word	0x200010ec
    2c04:	0f424000 	.word	0x0f424000
    2c08:	2000106c 	.word	0x2000106c
    2c0c:	2000003c 	.word	0x2000003c

00002c10 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
    2c10:	4806      	ldr	r0, [pc, #24]	; (2c2c <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA+0x1c>)
    2c12:	b510      	push	{r4, lr}
    2c14:	f890 102d 	ldrb.w	r1, [r0, #45]	; 0x2d
    2c18:	2920      	cmp	r1, #32
    2c1a:	bf1c      	itt	ne
    2c1c:	7e00      	ldrbne	r0, [r0, #24]
    2c1e:	bd10      	popne	{r4, pc}
    2c20:	f640 312a 	movw	r1, #2858	; 0xb2a
    2c24:	2070      	movs	r0, #112	; 0x70
    2c26:	f002 f9cb 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c2a:	0000      	.short	0x0000
    2c2c:	200010ec 	.word	0x200010ec

00002c30 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>:
    2c30:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
    2c34:	b570      	push	{r4, r5, r6, lr}
    2c36:	4807      	ldr	r0, [pc, #28]	; (2c54 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x24>)
    2c38:	4a07      	ldr	r2, [pc, #28]	; (2c58 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x28>)
    2c3a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    2c3e:	6901      	ldr	r1, [r0, #16]
    2c40:	3008      	adds	r0, #8
    2c42:	fba1 4502 	umull	r4, r5, r1, r2
    2c46:	f7ff fdcf 	bl	27e8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x7e8>
    2c4a:	1900      	adds	r0, r0, r4
    2c4c:	f145 0100 	adc.w	r1, r5, #0
    2c50:	bd70      	pop	{r4, r5, r6, pc}
    2c52:	0000      	.short	0x0000
    2c54:	20000cec 	.word	0x20000cec
    2c58:	1e848000 	.word	0x1e848000

00002c5c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    2c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2c5e:	4d6b      	ldr	r5, [pc, #428]	; (2e0c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b0>)
    2c60:	4a6b      	ldr	r2, [pc, #428]	; (2e10 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b4>)
    2c62:	f505 6480 	add.w	r4, r5, #1024	; 0x400
    2c66:	2601      	movs	r6, #1
    2c68:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
    2c6c:	2808      	cmp	r0, #8
    2c6e:	d27c      	bcs.n	2d6a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10e>
    2c70:	e8df f000 	tbb	[pc, r0]
    2c74:	a9977004 	.word	0xa9977004
    2c78:	b3ae41c7 	.word	0xb3ae41c7
    2c7c:	b919      	cbnz	r1, 2c86 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a>
    2c7e:	f002 f817 	bl	4cb0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    2c82:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    2c86:	8ae0      	ldrh	r0, [r4, #22]
    2c88:	b110      	cbz	r0, 2c90 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x34>
    2c8a:	f002 f921 	bl	4ed0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2c8e:	b180      	cbz	r0, 2cb2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x56>
    2c90:	f7ff fcf8 	bl	2684 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x684>
    2c94:	20ff      	movs	r0, #255	; 0xff
    2c96:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    2c9a:	6861      	ldr	r1, [r4, #4]
    2c9c:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    2ca0:	d003      	beq.n	2caa <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x4e>
    2ca2:	2005      	movs	r0, #5
    2ca4:	f001 fc1a 	bl	44dc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    2ca8:	b140      	cbz	r0, 2cbc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x60>
    2caa:	7e60      	ldrb	r0, [r4, #25]
    2cac:	2801      	cmp	r0, #1
    2cae:	d110      	bne.n	2cd2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x76>
    2cb0:	e009      	b.n	2cc6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6a>
    2cb2:	f640 0134 	movw	r1, #2100	; 0x834
    2cb6:	2070      	movs	r0, #112	; 0x70
    2cb8:	f002 f982 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2cbc:	f640 0139 	movw	r1, #2105	; 0x839
    2cc0:	2070      	movs	r0, #112	; 0x70
    2cc2:	f002 f97d 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2cc6:	68e0      	ldr	r0, [r4, #12]
    2cc8:	1e40      	subs	r0, r0, #1
    2cca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2cce:	f001 fb1f 	bl	4310 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    2cd2:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2cd6:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    2cda:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2cde:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    2ce2:	6840      	ldr	r0, [r0, #4]
    2ce4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    2ce8:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    2cec:	b001      	add	sp, #4
    2cee:	2101      	movs	r1, #1
    2cf0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    2cf4:	4710      	bx	r2
    2cf6:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
    2cfa:	b140      	cbz	r0, 2d0e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xb2>
    2cfc:	b919      	cbnz	r1, 2d06 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xaa>
    2cfe:	f001 ffd7 	bl	4cb0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    2d02:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    2d06:	2000      	movs	r0, #0
    2d08:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    2d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2d0e:	f7ff fcb9 	bl	2684 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x684>
    2d12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2d16:	6060      	str	r0, [r4, #4]
    2d18:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    2d1c:	f88d 0000 	strb.w	r0, [sp]
    2d20:	f89d 0000 	ldrb.w	r0, [sp]
    2d24:	b188      	cbz	r0, 2d4a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xee>
    2d26:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2d2a:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    2d2e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2d32:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    2d36:	6840      	ldr	r0, [r0, #4]
    2d38:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    2d3c:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    2d40:	b001      	add	sp, #4
    2d42:	2106      	movs	r1, #6
    2d44:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    2d48:	4710      	bx	r2
    2d4a:	f44f 6105 	mov.w	r1, #2128	; 0x850
    2d4e:	2070      	movs	r0, #112	; 0x70
    2d50:	f002 f936 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2d54:	f7ff fc96 	bl	2684 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x684>
    2d58:	f884 6026 	strb.w	r6, [r4, #38]	; 0x26
    2d5c:	f002 f8b8 	bl	4ed0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2d60:	b120      	cbz	r0, 2d6c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x110>
    2d62:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    2d66:	b130      	cbz	r0, 2d76 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x11a>
    2d68:	e009      	b.n	2d7e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x122>
    2d6a:	e04a      	b.n	2e02 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1a6>
    2d6c:	f640 015e 	movw	r1, #2142	; 0x85e
    2d70:	2070      	movs	r0, #112	; 0x70
    2d72:	f002 f925 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2d76:	f001 ff9b 	bl	4cb0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    2d7a:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    2d7e:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2d82:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    2d86:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2d8a:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    2d8e:	6840      	ldr	r0, [r0, #4]
    2d90:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    2d94:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    2d98:	b001      	add	sp, #4
    2d9a:	2100      	movs	r1, #0
    2d9c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    2da0:	4710      	bx	r2
    2da2:	f001 fd77 	bl	4894 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    2da6:	8ae0      	ldrh	r0, [r4, #22]
    2da8:	b110      	cbz	r0, 2db0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x154>
    2daa:	f002 f891 	bl	4ed0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2dae:	b128      	cbz	r0, 2dbc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x160>
    2db0:	f001 fd84 	bl	48bc <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    2db4:	2800      	cmp	r0, #0
    2db6:	bf18      	it	ne
    2db8:	7766      	strbne	r6, [r4, #29]
    2dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2dbc:	f640 0168 	movw	r1, #2152	; 0x868
    2dc0:	2070      	movs	r0, #112	; 0x70
    2dc2:	f002 f8fd 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2dc6:	4813      	ldr	r0, [pc, #76]	; (2e14 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b8>)
    2dc8:	6006      	str	r6, [r0, #0]
    2dca:	6890      	ldr	r0, [r2, #8]
    2dcc:	6006      	str	r6, [r0, #0]
    2dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2dd0:	7810      	ldrb	r0, [r2, #0]
    2dd2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    2dd6:	f002 b9c7 	b.w	5168 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2dda:	f7ff fc53 	bl	2684 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x684>
    2dde:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2de2:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    2de6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2dea:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    2dee:	6840      	ldr	r0, [r0, #4]
    2df0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    2df4:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    2df8:	b001      	add	sp, #4
    2dfa:	2105      	movs	r1, #5
    2dfc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    2e00:	4710      	bx	r2
    2e02:	f640 017b 	movw	r1, #2171	; 0x87b
    2e06:	2070      	movs	r0, #112	; 0x70
    2e08:	f002 f8da 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e0c:	20000cec 	.word	0x20000cec
    2e10:	2000003c 	.word	0x2000003c
    2e14:	40000508 	.word	0x40000508

00002e18 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    2e18:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2e1c:	4682      	mov	sl, r0
    2e1e:	48f0      	ldr	r0, [pc, #960]	; (31e0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c8>)
    2e20:	b095      	sub	sp, #84	; 0x54
    2e22:	6800      	ldr	r0, [r0, #0]
    2e24:	4def      	ldr	r5, [pc, #956]	; (31e4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3cc>)
    2e26:	05c0      	lsls	r0, r0, #23
    2e28:	0dc0      	lsrs	r0, r0, #23
    2e2a:	d00e      	beq.n	2e4a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    2e2c:	3810      	subs	r0, #16
    2e2e:	b240      	sxtb	r0, r0
    2e30:	2800      	cmp	r0, #0
    2e32:	bfb8      	it	lt
    2e34:	f000 000f 	andlt.w	r0, r0, #15
    2e38:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    2e3c:	bfac      	ite	ge
    2e3e:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    2e42:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    2e46:	0940      	lsrs	r0, r0, #5
    2e48:	d00d      	beq.n	2e66 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    2e4a:	9816      	ldr	r0, [sp, #88]	; 0x58
    2e4c:	f04f 0b00 	mov.w	fp, #0
    2e50:	7800      	ldrb	r0, [r0, #0]
    2e52:	2800      	cmp	r0, #0
    2e54:	bf18      	it	ne
    2e56:	2801      	cmpne	r0, #1
    2e58:	d018      	beq.n	2e8c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    2e5a:	f240 7104 	movw	r1, #1796	; 0x704
    2e5e:	f04f 0070 	mov.w	r0, #112	; 0x70
    2e62:	f002 f8ad 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e66:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    2e6a:	f04f 0b01 	mov.w	fp, #1
    2e6e:	2820      	cmp	r0, #32
    2e70:	d007      	beq.n	2e82 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    2e72:	9816      	ldr	r0, [sp, #88]	; 0x58
    2e74:	7800      	ldrb	r0, [r0, #0]
    2e76:	b148      	cbz	r0, 2e8c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    2e78:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    2e7c:	2070      	movs	r0, #112	; 0x70
    2e7e:	f002 f89f 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e82:	f240 61fd 	movw	r1, #1789	; 0x6fd
    2e86:	2070      	movs	r0, #112	; 0x70
    2e88:	f002 f89a 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e8c:	4cd6      	ldr	r4, [pc, #856]	; (31e8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d0>)
    2e8e:	b124      	cbz	r4, 2e9a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    2e90:	2100      	movs	r1, #0
    2e92:	f240 7007 	movw	r0, #1799	; 0x707
    2e96:	f3af 8000 	nop.w
    2e9a:	2000      	movs	r0, #0
    2e9c:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
    2ea0:	49d2      	ldr	r1, [pc, #840]	; (31ec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d4>)
    2ea2:	ebca 00ca 	rsb	r0, sl, sl, lsl #3
    2ea6:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    2eaa:	f04f 0901 	mov.w	r9, #1
    2eae:	9000      	str	r0, [sp, #0]
    2eb0:	b124      	cbz	r4, 2ebc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
    2eb2:	2100      	movs	r1, #0
    2eb4:	f240 7012 	movw	r0, #1810	; 0x712
    2eb8:	f3af 8000 	nop.w
    2ebc:	f1b9 0f00 	cmp.w	r9, #0
    2ec0:	d00a      	beq.n	2ed8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc0>
    2ec2:	bf00      	nop
    2ec4:	f895 602c 	ldrb.w	r6, [r5, #44]	; 0x2c
    2ec8:	f04f 0800 	mov.w	r8, #0
    2ecc:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
    2ed0:	f1bb 0f00 	cmp.w	fp, #0
    2ed4:	d007      	beq.n	2ee6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xce>
    2ed6:	e038      	b.n	2f4a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x132>
    2ed8:	48c5      	ldr	r0, [pc, #788]	; (31f0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d8>)
    2eda:	2800      	cmp	r0, #0
    2edc:	bf18      	it	ne
    2ede:	f3af 8000 	nopne.w
    2ee2:	b662      	cpsie	i
    2ee4:	e7ee      	b.n	2ec4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xac>
    2ee6:	4637      	mov	r7, r6
    2ee8:	2001      	movs	r0, #1
    2eea:	ea20 0607 	bic.w	r6, r0, r7
    2eee:	48c1      	ldr	r0, [pc, #772]	; (31f4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3dc>)
    2ef0:	2240      	movs	r2, #64	; 0x40
    2ef2:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    2ef6:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    2efa:	f00a fcb5 	bl	d868 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2efe:	b124      	cbz	r4, 2f0a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xf2>
    2f00:	2100      	movs	r1, #0
    2f02:	f240 502f 	movw	r0, #1327	; 0x52f
    2f06:	f3af 8000 	nop.w
    2f0a:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    2f0e:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    2f12:	4429      	add	r1, r5
    2f14:	4428      	add	r0, r5
    2f16:	8c0a      	ldrh	r2, [r1, #32]
    2f18:	8402      	strh	r2, [r0, #32]
    2f1a:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    2f1e:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    2f22:	b124      	cbz	r4, 2f2e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x116>
    2f24:	2100      	movs	r1, #0
    2f26:	f240 5033 	movw	r0, #1331	; 0x533
    2f2a:	f3af 8000 	nop.w
    2f2e:	b124      	cbz	r4, 2f3a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x122>
    2f30:	2100      	movs	r1, #0
    2f32:	f240 701c 	movw	r0, #1820	; 0x71c
    2f36:	f3af 8000 	nop.w
    2f3a:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    2f3e:	f88d 0008 	strb.w	r0, [sp, #8]
    2f42:	f89d 0008 	ldrb.w	r0, [sp, #8]
    2f46:	2800      	cmp	r0, #0
    2f48:	d1b2      	bne.n	2eb0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    2f4a:	b124      	cbz	r4, 2f56 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x13e>
    2f4c:	2100      	movs	r1, #0
    2f4e:	f240 7026 	movw	r0, #1830	; 0x726
    2f52:	f3af 8000 	nop.w
    2f56:	a802      	add	r0, sp, #8
    2f58:	f001 f91a 	bl	4190 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    2f5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    2f60:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    2f64:	4633      	mov	r3, r6
    2f66:	aa09      	add	r2, sp, #36	; 0x24
    2f68:	a80e      	add	r0, sp, #56	; 0x38
    2f6a:	9916      	ldr	r1, [sp, #88]	; 0x58
    2f6c:	f7ff faae 	bl	24cc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x4cc>
    2f70:	b124      	cbz	r4, 2f7c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x164>
    2f72:	2100      	movs	r1, #0
    2f74:	f240 702d 	movw	r0, #1837	; 0x72d
    2f78:	f3af 8000 	nop.w
    2f7c:	4a9d      	ldr	r2, [pc, #628]	; (31f4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3dc>)
    2f7e:	990e      	ldr	r1, [sp, #56]	; 0x38
    2f80:	eb02 1786 	add.w	r7, r2, r6, lsl #6
    2f84:	a809      	add	r0, sp, #36	; 0x24
    2f86:	f817 201a 	ldrb.w	r2, [r7, sl, lsl #1]
    2f8a:	2a01      	cmp	r2, #1
    2f8c:	bf18      	it	ne
    2f8e:	2a02      	cmpne	r2, #2
    2f90:	d138      	bne.n	3004 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ec>
    2f92:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2f94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2f96:	eba2 0201 	sub.w	r2, r2, r1
    2f9a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    2f9e:	eba3 0101 	sub.w	r1, r3, r1
    2fa2:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    2fa6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2faa:	2a02      	cmp	r2, #2
    2fac:	d364      	bcc.n	3078 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x260>
    2fae:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    2fb2:	bf98      	it	ls
    2fb4:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    2fb8:	d85e      	bhi.n	3078 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x260>
    2fba:	f04f 0801 	mov.w	r8, #1
    2fbe:	ab14      	add	r3, sp, #80	; 0x50
    2fc0:	aa13      	add	r2, sp, #76	; 0x4c
    2fc2:	4631      	mov	r1, r6
    2fc4:	f7fe ff20 	bl	1e08 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xbc>
    2fc8:	2800      	cmp	r0, #0
    2fca:	d05d      	beq.n	3088 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x270>
    2fcc:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
    2fd0:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
    2fd4:	4633      	mov	r3, r6
    2fd6:	428a      	cmp	r2, r1
    2fd8:	d05a      	beq.n	3090 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x278>
    2fda:	2005      	movs	r0, #5
    2fdc:	f7fe fd26 	bl	1a2c <MPSL_IRQ_RADIO_Handler+0x40>
    2fe0:	eb07 014a 	add.w	r1, r7, sl, lsl #1
    2fe4:	7048      	strb	r0, [r1, #1]
    2fe6:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    2fea:	2820      	cmp	r0, #32
    2fec:	bf1c      	itt	ne
    2fee:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    2ff2:	f880 a001 	strbne.w	sl, [r0, #1]
    2ff6:	d057      	beq.n	30a8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x290>
    2ff8:	4632      	mov	r2, r6
    2ffa:	4651      	mov	r1, sl
    2ffc:	f05f 0003 	movs.w	r0, #3
    3000:	f7ff fc2c 	bl	285c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x85c>
    3004:	b124      	cbz	r4, 3010 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f8>
    3006:	2100      	movs	r1, #0
    3008:	f240 7032 	movw	r0, #1842	; 0x732
    300c:	f3af 8000 	nop.w
    3010:	4879      	ldr	r0, [pc, #484]	; (31f8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e0>)
    3012:	2800      	cmp	r0, #0
    3014:	bf18      	it	ne
    3016:	f3af 8000 	nopne.w
    301a:	f3ef 8910 	mrs	r9, PRIMASK
    301e:	b672      	cpsid	i
    3020:	b124      	cbz	r4, 302c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x214>
    3022:	2100      	movs	r1, #0
    3024:	f44f 60e7 	mov.w	r0, #1848	; 0x738
    3028:	f3af 8000 	nop.w
    302c:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    3030:	f88d 0008 	strb.w	r0, [sp, #8]
    3034:	f89d 0008 	ldrb.w	r0, [sp, #8]
    3038:	2800      	cmp	r0, #0
    303a:	f47f af39 	bne.w	2eb0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    303e:	b124      	cbz	r4, 304a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x232>
    3040:	2100      	movs	r1, #0
    3042:	f44f 60e8 	mov.w	r0, #1856	; 0x740
    3046:	f3af 8000 	nop.w
    304a:	af09      	add	r7, sp, #36	; 0x24
    304c:	9800      	ldr	r0, [sp, #0]
    304e:	e897 100e 	ldmia.w	r7, {r1, r2, r3, ip}
    3052:	f100 0708 	add.w	r7, r0, #8
    3056:	f1b8 0f00 	cmp.w	r8, #0
    305a:	e887 100e 	stmia.w	r7, {r1, r2, r3, ip}
    305e:	990d      	ldr	r1, [sp, #52]	; 0x34
    3060:	6181      	str	r1, [r0, #24]
    3062:	d053      	beq.n	310c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f4>
    3064:	b124      	cbz	r4, 3070 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    3066:	2100      	movs	r1, #0
    3068:	f240 704d 	movw	r0, #1869	; 0x74d
    306c:	f3af 8000 	nop.w
    3070:	f1bb 0f00 	cmp.w	fp, #0
    3074:	d13a      	bne.n	30ec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d4>
    3076:	e01f      	b.n	30b8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2a0>
    3078:	4632      	mov	r2, r6
    307a:	4651      	mov	r1, sl
    307c:	2004      	movs	r0, #4
    307e:	f7ff fbed 	bl	285c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x85c>
    3082:	f04f 0801 	mov.w	r8, #1
    3086:	e7bd      	b.n	3004 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ec>
    3088:	4632      	mov	r2, r6
    308a:	4651      	mov	r1, sl
    308c:	2004      	movs	r0, #4
    308e:	e7b7      	b.n	3000 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1e8>
    3090:	2920      	cmp	r1, #32
    3092:	bf19      	ittee	ne
    3094:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    3098:	7840      	ldrbne	r0, [r0, #1]
    309a:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
    309e:	4428      	addeq	r0, r5
    30a0:	bf08      	it	eq
    30a2:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    30a6:	e79b      	b.n	2fe0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1c8>
    30a8:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    30ac:	4429      	add	r1, r5
    30ae:	f881 a020 	strb.w	sl, [r1, #32]
    30b2:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    30b6:	e79f      	b.n	2ff8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1e0>
    30b8:	9811      	ldr	r0, [sp, #68]	; 0x44
    30ba:	f010 0fff 	tst.w	r0, #255	; 0xff
    30be:	d015      	beq.n	30ec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d4>
    30c0:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    30c4:	2820      	cmp	r0, #32
    30c6:	d111      	bne.n	30ec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d4>
    30c8:	b124      	cbz	r4, 30d4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2bc>
    30ca:	2100      	movs	r1, #0
    30cc:	f240 7052 	movw	r0, #1874	; 0x752
    30d0:	f3af 8000 	nop.w
    30d4:	4632      	mov	r2, r6
    30d6:	2102      	movs	r1, #2
    30d8:	980e      	ldr	r0, [sp, #56]	; 0x38
    30da:	f7ff fbf1 	bl	28c0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x8c0>
    30de:	9010      	str	r0, [sp, #64]	; 0x40
    30e0:	b920      	cbnz	r0, 30ec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d4>
    30e2:	9816      	ldr	r0, [sp, #88]	; 0x58
    30e4:	7800      	ldrb	r0, [r0, #0]
    30e6:	b1f0      	cbz	r0, 3126 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x30e>
    30e8:	2801      	cmp	r0, #1
    30ea:	d02b      	beq.n	3144 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32c>
    30ec:	b124      	cbz	r4, 30f8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2e0>
    30ee:	2100      	movs	r1, #0
    30f0:	f240 706f 	movw	r0, #1903	; 0x76f
    30f4:	f3af 8000 	nop.w
    30f8:	20ff      	movs	r0, #255	; 0xff
    30fa:	f1bb 0f00 	cmp.w	fp, #0
    30fe:	bf18      	it	ne
    3100:	f885 0029 	strbne.w	r0, [r5, #41]	; 0x29
    3104:	d027      	beq.n	3156 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x33e>
    3106:	bf00      	nop
    3108:	f04f 0801 	mov.w	r8, #1
    310c:	b124      	cbz	r4, 3118 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x300>
    310e:	2100      	movs	r1, #0
    3110:	f44f 60f0 	mov.w	r0, #1920	; 0x780
    3114:	f3af 8000 	nop.w
    3118:	9810      	ldr	r0, [sp, #64]	; 0x40
    311a:	4e38      	ldr	r6, [pc, #224]	; (31fc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e4>)
    311c:	2802      	cmp	r0, #2
    311e:	d023      	beq.n	3168 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x350>
    3120:	2801      	cmp	r0, #1
    3122:	d029      	beq.n	3178 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x360>
    3124:	e02d      	b.n	3182 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36a>
    3126:	b124      	cbz	r4, 3132 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x31a>
    3128:	2100      	movs	r1, #0
    312a:	f240 705a 	movw	r0, #1882	; 0x75a
    312e:	f3af 8000 	nop.w
    3132:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
    3136:	4651      	mov	r1, sl
    3138:	2004      	movs	r0, #4
    313a:	f7ff fb8f 	bl	285c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x85c>
    313e:	f04f 0801 	mov.w	r8, #1
    3142:	e7e3      	b.n	310c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f4>
    3144:	2c00      	cmp	r4, #0
    3146:	f43f aeb3 	beq.w	2eb0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    314a:	2100      	movs	r1, #0
    314c:	f240 7065 	movw	r0, #1893	; 0x765
    3150:	f3af 8000 	nop.w
    3154:	e6ac      	b.n	2eb0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    3156:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
    315a:	2101      	movs	r1, #1
    315c:	4391      	bics	r1, r2
    315e:	f885 102c 	strb.w	r1, [r5, #44]	; 0x2c
    3162:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    3166:	e7cf      	b.n	3108 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f0>
    3168:	68a8      	ldr	r0, [r5, #8]
    316a:	990e      	ldr	r1, [sp, #56]	; 0x38
    316c:	1a40      	subs	r0, r0, r1
    316e:	f00a fa21 	bl	d5b4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    3172:	6871      	ldr	r1, [r6, #4]
    3174:	b921      	cbnz	r1, 3180 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x368>
    3176:	e004      	b.n	3182 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36a>
    3178:	6871      	ldr	r1, [r6, #4]
    317a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    317e:	b101      	cbz	r1, 3182 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36a>
    3180:	4788      	blx	r1
    3182:	f1b9 0f00 	cmp.w	r9, #0
    3186:	d024      	beq.n	31d2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3ba>
    3188:	b124      	cbz	r4, 3194 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x37c>
    318a:	2100      	movs	r1, #0
    318c:	f44f 60f2 	mov.w	r0, #1936	; 0x790
    3190:	f3af 8000 	nop.w
    3194:	f1b8 0f00 	cmp.w	r8, #0
    3198:	d011      	beq.n	31be <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a6>
    319a:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    319e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    31a2:	4428      	add	r0, r5
    31a4:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    31a8:	2820      	cmp	r0, #32
    31aa:	d008      	beq.n	31be <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a6>
    31ac:	b124      	cbz	r4, 31b8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a0>
    31ae:	2100      	movs	r1, #0
    31b0:	f240 7097 	movw	r0, #1943	; 0x797
    31b4:	f3af 8000 	nop.w
    31b8:	7870      	ldrb	r0, [r6, #1]
    31ba:	f001 ffd5 	bl	5168 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    31be:	b124      	cbz	r4, 31ca <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b2>
    31c0:	2100      	movs	r1, #0
    31c2:	f240 709c 	movw	r0, #1948	; 0x79c
    31c6:	f3af 8000 	nop.w
    31ca:	b017      	add	sp, #92	; 0x5c
    31cc:	4640      	mov	r0, r8
    31ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    31d2:	4807      	ldr	r0, [pc, #28]	; (31f0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d8>)
    31d4:	2800      	cmp	r0, #0
    31d6:	bf18      	it	ne
    31d8:	f3af 8000 	nopne.w
    31dc:	b662      	cpsie	i
    31de:	e7d3      	b.n	3188 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x370>
    31e0:	e000ed04 	.word	0xe000ed04
    31e4:	200010ec 	.word	0x200010ec
    31e8:	00000000 	.word	0x00000000
    31ec:	20000cec 	.word	0x20000cec
    31f0:	00000000 	.word	0x00000000
    31f4:	2000106c 	.word	0x2000106c
    31f8:	00000000 	.word	0x00000000
    31fc:	2000003c 	.word	0x2000003c

00003200 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    3200:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3204:	48c9      	ldr	r0, [pc, #804]	; (352c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x32c>)
    3206:	b08a      	sub	sp, #40	; 0x28
    3208:	6800      	ldr	r0, [r0, #0]
    320a:	05c0      	lsls	r0, r0, #23
    320c:	0dc0      	lsrs	r0, r0, #23
    320e:	d011      	beq.n	3234 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x34>
    3210:	3810      	subs	r0, #16
    3212:	b240      	sxtb	r0, r0
    3214:	2800      	cmp	r0, #0
    3216:	bfb8      	it	lt
    3218:	f000 000f 	andlt.w	r0, r0, #15
    321c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    3220:	bfac      	ite	ge
    3222:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    3226:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    322a:	0940      	lsrs	r0, r0, #5
    322c:	bf08      	it	eq
    322e:	f04f 0b01 	moveq.w	fp, #1
    3232:	d001      	beq.n	3238 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x38>
    3234:	f04f 0b00 	mov.w	fp, #0
    3238:	980a      	ldr	r0, [sp, #40]	; 0x28
    323a:	7800      	ldrb	r0, [r0, #0]
    323c:	2800      	cmp	r0, #0
    323e:	bf1e      	ittt	ne
    3240:	2000      	movne	r0, #0
    3242:	b00b      	addne	sp, #44	; 0x2c
    3244:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3248:	f04f 0a00 	mov.w	sl, #0
    324c:	4db8      	ldr	r5, [pc, #736]	; (3530 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x330>)
    324e:	4cb9      	ldr	r4, [pc, #740]	; (3534 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x334>)
    3250:	46d1      	mov	r9, sl
    3252:	b125      	cbz	r5, 325e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x5e>
    3254:	2100      	movs	r1, #0
    3256:	f240 50b9 	movw	r0, #1465	; 0x5b9
    325a:	f3af 8000 	nop.w
    325e:	f894 602c 	ldrb.w	r6, [r4, #44]	; 0x2c
    3262:	f884 9029 	strb.w	r9, [r4, #41]	; 0x29
    3266:	f04f 0800 	mov.w	r8, #0
    326a:	b125      	cbz	r5, 3276 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x76>
    326c:	2100      	movs	r1, #0
    326e:	f240 50be 	movw	r0, #1470	; 0x5be
    3272:	f3af 8000 	nop.w
    3276:	f1bb 0f00 	cmp.w	fp, #0
    327a:	d123      	bne.n	32c4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc4>
    327c:	4637      	mov	r7, r6
    327e:	2001      	movs	r0, #1
    3280:	ea20 0607 	bic.w	r6, r0, r7
    3284:	48ac      	ldr	r0, [pc, #688]	; (3538 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x338>)
    3286:	2240      	movs	r2, #64	; 0x40
    3288:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    328c:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    3290:	f00a faea 	bl	d868 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3294:	b125      	cbz	r5, 32a0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xa0>
    3296:	2100      	movs	r1, #0
    3298:	f240 502f 	movw	r0, #1327	; 0x52f
    329c:	f3af 8000 	nop.w
    32a0:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    32a4:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    32a8:	4421      	add	r1, r4
    32aa:	4420      	add	r0, r4
    32ac:	8c0a      	ldrh	r2, [r1, #32]
    32ae:	8402      	strh	r2, [r0, #32]
    32b0:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    32b4:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    32b8:	b125      	cbz	r5, 32c4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc4>
    32ba:	2100      	movs	r1, #0
    32bc:	f240 5033 	movw	r0, #1331	; 0x533
    32c0:	f3af 8000 	nop.w
    32c4:	b125      	cbz	r5, 32d0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xd0>
    32c6:	2100      	movs	r1, #0
    32c8:	f240 50c6 	movw	r0, #1478	; 0x5c6
    32cc:	f3af 8000 	nop.w
    32d0:	a808      	add	r0, sp, #32
    32d2:	f000 ff5d 	bl	4190 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    32d6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    32da:	e9cd 0106 	strd	r0, r1, [sp, #24]
    32de:	4633      	mov	r3, r6
    32e0:	466a      	mov	r2, sp
    32e2:	a806      	add	r0, sp, #24
    32e4:	990a      	ldr	r1, [sp, #40]	; 0x28
    32e6:	f7ff f8f1 	bl	24cc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x4cc>
    32ea:	b125      	cbz	r5, 32f6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xf6>
    32ec:	2100      	movs	r1, #0
    32ee:	f240 50cc 	movw	r0, #1484	; 0x5cc
    32f2:	f3af 8000 	nop.w
    32f6:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    32fa:	2820      	cmp	r0, #32
    32fc:	d019      	beq.n	3332 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x132>
    32fe:	68e0      	ldr	r0, [r4, #12]
    3300:	9900      	ldr	r1, [sp, #0]
    3302:	1a09      	subs	r1, r1, r0
    3304:	0209      	lsls	r1, r1, #8
    3306:	17ca      	asrs	r2, r1, #31
    3308:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    330c:	1209      	asrs	r1, r1, #8
    330e:	d510      	bpl.n	3332 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x132>
    3310:	e9dd 2100 	ldrd	r2, r1, [sp]
    3314:	1a89      	subs	r1, r1, r2
    3316:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
    331a:	4408      	add	r0, r1
    331c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3320:	e9cd 3000 	strd	r3, r0, [sp]
    3324:	4293      	cmp	r3, r2
    3326:	d202      	bcs.n	332e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x12e>
    3328:	9802      	ldr	r0, [sp, #8]
    332a:	1c40      	adds	r0, r0, #1
    332c:	9002      	str	r0, [sp, #8]
    332e:	f04f 0801 	mov.w	r8, #1
    3332:	b14d      	cbz	r5, 3348 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x148>
    3334:	2100      	movs	r1, #0
    3336:	f240 50df 	movw	r0, #1503	; 0x5df
    333a:	f3af 8000 	nop.w
    333e:	2100      	movs	r1, #0
    3340:	f240 50e5 	movw	r0, #1509	; 0x5e5
    3344:	f3af 8000 	nop.w
    3348:	9900      	ldr	r1, [sp, #0]
    334a:	9806      	ldr	r0, [sp, #24]
    334c:	9a01      	ldr	r2, [sp, #4]
    334e:	1a09      	subs	r1, r1, r0
    3350:	1a10      	subs	r0, r2, r0
    3352:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    3356:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    335a:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    335e:	bf98      	it	ls
    3360:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
    3364:	d803      	bhi.n	336e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x16e>
    3366:	f1bb 0f00 	cmp.w	fp, #0
    336a:	d10c      	bne.n	3386 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x186>
    336c:	e003      	b.n	3376 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x176>
    336e:	f1bb 0f00 	cmp.w	fp, #0
    3372:	d039      	beq.n	33e8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1e8>
    3374:	e0c0      	b.n	34f8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f8>
    3376:	4633      	mov	r3, r6
    3378:	4669      	mov	r1, sp
    337a:	4870      	ldr	r0, [pc, #448]	; (353c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x33c>)
    337c:	9a06      	ldr	r2, [sp, #24]
    337e:	f7fe fb91 	bl	1aa4 <MPSL_IRQ_RADIO_Handler+0xb8>
    3382:	ea48 0800 	orr.w	r8, r8, r0
    3386:	f1b8 0f00 	cmp.w	r8, #0
    338a:	d023      	beq.n	33d4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1d4>
    338c:	9800      	ldr	r0, [sp, #0]
    338e:	f00a f911 	bl	d5b4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    3392:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    3396:	f89d 200c 	ldrb.w	r2, [sp, #12]
    339a:	4b69      	ldr	r3, [pc, #420]	; (3540 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x340>)
    339c:	4411      	add	r1, r2
    339e:	1c49      	adds	r1, r1, #1
    33a0:	1842      	adds	r2, r0, r1
    33a2:	4298      	cmp	r0, r3
    33a4:	d856      	bhi.n	3454 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x254>
    33a6:	4865      	ldr	r0, [pc, #404]	; (353c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x33c>)
    33a8:	4281      	cmp	r1, r0
    33aa:	dc7c      	bgt.n	34a6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a6>
    33ac:	4240      	negs	r0, r0
    33ae:	4281      	cmp	r1, r0
    33b0:	db7a      	blt.n	34a8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a8>
    33b2:	1c58      	adds	r0, r3, #1
    33b4:	4290      	cmp	r0, r2
    33b6:	bfdc      	itt	le
    33b8:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    33bc:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    33c0:	dd05      	ble.n	33ce <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ce>
    33c2:	2a00      	cmp	r2, #0
    33c4:	bfbc      	itt	lt
    33c6:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    33ca:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    33ce:	980a      	ldr	r0, [sp, #40]	; 0x28
    33d0:	e9c0 2904 	strd	r2, r9, [r0, #16]
    33d4:	f04f 0a01 	mov.w	sl, #1
    33d8:	2d00      	cmp	r5, #0
    33da:	d07c      	beq.n	34d6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2d6>
    33dc:	2100      	movs	r1, #0
    33de:	f44f 60bf 	mov.w	r0, #1528	; 0x5f8
    33e2:	f3af 8000 	nop.w
    33e6:	e087      	b.n	34f8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f8>
    33e8:	9807      	ldr	r0, [sp, #28]
    33ea:	9002      	str	r0, [sp, #8]
    33ec:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    33f0:	aa08      	add	r2, sp, #32
    33f2:	a905      	add	r1, sp, #20
    33f4:	f8dd 8018 	ldr.w	r8, [sp, #24]
    33f8:	f000 fd5a 	bl	3eb0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    33fc:	f001 fa68 	bl	48d0 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    3400:	f000 fd3a 	bl	3e78 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    3404:	4607      	mov	r7, r0
    3406:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    340a:	2820      	cmp	r0, #32
    340c:	d027      	beq.n	345e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x25e>
    340e:	68e0      	ldr	r0, [r4, #12]
    3410:	1d40      	adds	r0, r0, #5
    3412:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3416:	bf00      	nop
    3418:	e9dd 2100 	ldrd	r2, r1, [sp]
    341c:	1a89      	subs	r1, r1, r2
    341e:	9000      	str	r0, [sp, #0]
    3420:	4408      	add	r0, r1
    3422:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3426:	9001      	str	r0, [sp, #4]
    3428:	9800      	ldr	r0, [sp, #0]
    342a:	4540      	cmp	r0, r8
    342c:	d202      	bcs.n	3434 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x234>
    342e:	9802      	ldr	r0, [sp, #8]
    3430:	1c40      	adds	r0, r0, #1
    3432:	9002      	str	r0, [sp, #8]
    3434:	201f      	movs	r0, #31
    3436:	f88d 000c 	strb.w	r0, [sp, #12]
    343a:	9800      	ldr	r0, [sp, #0]
    343c:	f00a f8ba 	bl	d5b4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    3440:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    3444:	f89d 200c 	ldrb.w	r2, [sp, #12]
    3448:	4b3d      	ldr	r3, [pc, #244]	; (3540 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x340>)
    344a:	4411      	add	r1, r2
    344c:	1c49      	adds	r1, r1, #1
    344e:	1842      	adds	r2, r0, r1
    3450:	4298      	cmp	r0, r3
    3452:	d92a      	bls.n	34aa <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2aa>
    3454:	f240 516f 	movw	r1, #1391	; 0x56f
    3458:	2070      	movs	r0, #112	; 0x70
    345a:	f001 fdb1 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    345e:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    3462:	f108 0609 	add.w	r6, r8, #9
    3466:	b1b0      	cbz	r0, 3496 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x296>
    3468:	f001 fd32 	bl	4ed0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    346c:	b998      	cbnz	r0, 3496 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x296>
    346e:	f001 fbfd 	bl	4c6c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    3472:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    3476:	bf08      	it	eq
    3478:	200d      	moveq	r0, #13
    347a:	d00b      	beq.n	3494 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x294>
    347c:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    3480:	3856      	subs	r0, #86	; 0x56
    3482:	bf08      	it	eq
    3484:	201c      	moveq	r0, #28
    3486:	d005      	beq.n	3494 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x294>
    3488:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    348c:	389f      	subs	r0, #159	; 0x9f
    348e:	bf14      	ite	ne
    3490:	4648      	movne	r0, r9
    3492:	2032      	moveq	r0, #50	; 0x32
    3494:	4406      	add	r6, r0
    3496:	9805      	ldr	r0, [sp, #20]
    3498:	4287      	cmp	r7, r0
    349a:	bf84      	itt	hi
    349c:	1a38      	subhi	r0, r7, r0
    349e:	4406      	addhi	r6, r0
    34a0:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    34a4:	e7b8      	b.n	3418 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x218>
    34a6:	e003      	b.n	34b0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b0>
    34a8:	e00a      	b.n	34c0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2c0>
    34aa:	4824      	ldr	r0, [pc, #144]	; (353c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x33c>)
    34ac:	4281      	cmp	r1, r0
    34ae:	dd04      	ble.n	34ba <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2ba>
    34b0:	f44f 61ae 	mov.w	r1, #1392	; 0x570
    34b4:	2070      	movs	r0, #112	; 0x70
    34b6:	f001 fd83 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    34ba:	4822      	ldr	r0, [pc, #136]	; (3544 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x344>)
    34bc:	4281      	cmp	r1, r0
    34be:	da04      	bge.n	34ca <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2ca>
    34c0:	f240 5171 	movw	r1, #1393	; 0x571
    34c4:	2070      	movs	r0, #112	; 0x70
    34c6:	f001 fd7b 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    34ca:	481f      	ldr	r0, [pc, #124]	; (3548 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x348>)
    34cc:	4290      	cmp	r0, r2
    34ce:	bfd8      	it	le
    34d0:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    34d4:	e000      	b.n	34d8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2d8>
    34d6:	e00f      	b.n	34f8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f8>
    34d8:	bfd8      	it	le
    34da:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    34de:	dd05      	ble.n	34ec <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2ec>
    34e0:	2a00      	cmp	r2, #0
    34e2:	bfbc      	itt	lt
    34e4:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    34e8:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    34ec:	980a      	ldr	r0, [sp, #40]	; 0x28
    34ee:	f04f 0a01 	mov.w	sl, #1
    34f2:	46d0      	mov	r8, sl
    34f4:	e9c0 2904 	strd	r2, r9, [r0, #16]
    34f8:	ea1a 0f08 	tst.w	sl, r8
    34fc:	d009      	beq.n	3512 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x312>
    34fe:	980a      	ldr	r0, [sp, #40]	; 0x28
    3500:	4911      	ldr	r1, [pc, #68]	; (3548 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x348>)
    3502:	9b02      	ldr	r3, [sp, #8]
    3504:	e9d0 2004 	ldrd	r2, r0, [r0, #16]
    3508:	fbe3 2001 	umlal	r2, r0, r3, r1
    350c:	990a      	ldr	r1, [sp, #40]	; 0x28
    350e:	e9c1 2004 	strd	r2, r0, [r1, #16]
    3512:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    3516:	f88d 0014 	strb.w	r0, [sp, #20]
    351a:	f89d 0014 	ldrb.w	r0, [sp, #20]
    351e:	2800      	cmp	r0, #0
    3520:	f47f ae97 	bne.w	3252 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x52>
    3524:	b00b      	add	sp, #44	; 0x2c
    3526:	4650      	mov	r0, sl
    3528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    352c:	e000ed04 	.word	0xe000ed04
    3530:	00000000 	.word	0x00000000
    3534:	200010ec 	.word	0x200010ec
    3538:	2000106c 	.word	0x2000106c
    353c:	0f424000 	.word	0x0f424000
    3540:	1e847fff 	.word	0x1e847fff
    3544:	f0bdc000 	.word	0xf0bdc000
    3548:	1e848000 	.word	0x1e848000

0000354c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    354c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3550:	4d94      	ldr	r5, [pc, #592]	; (37a4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x258>)
    3552:	b08c      	sub	sp, #48	; 0x30
    3554:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    3558:	2000      	movs	r0, #0
    355a:	9009      	str	r0, [sp, #36]	; 0x24
    355c:	9006      	str	r0, [sp, #24]
    355e:	2001      	movs	r0, #1
    3560:	f1a5 0980 	sub.w	r9, r5, #128	; 0x80
    3564:	f04f 0800 	mov.w	r8, #0
    3568:	4607      	mov	r7, r0
    356a:	4c8f      	ldr	r4, [pc, #572]	; (37a8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x25c>)
    356c:	f8cd 001c 	str.w	r0, [sp, #28]
    3570:	f000 fe08 	bl	4184 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    3574:	9008      	str	r0, [sp, #32]
    3576:	b124      	cbz	r4, 3582 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x36>
    3578:	2100      	movs	r1, #0
    357a:	f44f 60f6 	mov.w	r0, #1968	; 0x7b0
    357e:	f3af 8000 	nop.w
    3582:	9807      	ldr	r0, [sp, #28]
    3584:	2800      	cmp	r0, #0
    3586:	d03c      	beq.n	3602 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xb6>
    3588:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
    358c:	b124      	cbz	r4, 3598 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x4c>
    358e:	2100      	movs	r1, #0
    3590:	f240 70b5 	movw	r0, #1973	; 0x7b5
    3594:	f3af 8000 	nop.w
    3598:	f895 a02c 	ldrb.w	sl, [r5, #44]	; 0x2c
    359c:	2240      	movs	r2, #64	; 0x40
    359e:	ea27 060a 	bic.w	r6, r7, sl
    35a2:	eb09 1086 	add.w	r0, r9, r6, lsl #6
    35a6:	eb09 118a 	add.w	r1, r9, sl, lsl #6
    35aa:	4683      	mov	fp, r0
    35ac:	f00a f95c 	bl	d868 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    35b0:	b124      	cbz	r4, 35bc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x70>
    35b2:	2100      	movs	r1, #0
    35b4:	f240 502f 	movw	r0, #1327	; 0x52f
    35b8:	f3af 8000 	nop.w
    35bc:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    35c0:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    35c4:	4428      	add	r0, r5
    35c6:	4429      	add	r1, r5
    35c8:	9000      	str	r0, [sp, #0]
    35ca:	8c0a      	ldrh	r2, [r1, #32]
    35cc:	8402      	strh	r2, [r0, #32]
    35ce:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    35d2:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    35d6:	b124      	cbz	r4, 35e2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x96>
    35d8:	2100      	movs	r1, #0
    35da:	f240 5033 	movw	r0, #1331	; 0x533
    35de:	f3af 8000 	nop.w
    35e2:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    35e6:	f88d 0008 	strb.w	r0, [sp, #8]
    35ea:	f89d 0008 	ldrb.w	r0, [sp, #8]
    35ee:	b178      	cbz	r0, 3610 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xc4>
    35f0:	2c00      	cmp	r4, #0
    35f2:	bf1c      	itt	ne
    35f4:	2100      	movne	r1, #0
    35f6:	f240 70bb 	movwne	r0, #1979	; 0x7bb
    35fa:	d0b9      	beq.n	3570 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x24>
    35fc:	f3af 8000 	nop.w
    3600:	e7b6      	b.n	3570 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x24>
    3602:	486a      	ldr	r0, [pc, #424]	; (37ac <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x260>)
    3604:	2800      	cmp	r0, #0
    3606:	bf18      	it	ne
    3608:	f3af 8000 	nopne.w
    360c:	b662      	cpsie	i
    360e:	e7bb      	b.n	3588 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x3c>
    3610:	b124      	cbz	r4, 361c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xd0>
    3612:	2100      	movs	r1, #0
    3614:	f240 70bf 	movw	r0, #1983	; 0x7bf
    3618:	f3af 8000 	nop.w
    361c:	980c      	ldr	r0, [sp, #48]	; 0x30
    361e:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    3622:	2803      	cmp	r0, #3
    3624:	d17d      	bne.n	3722 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d6>
    3626:	9a00      	ldr	r2, [sp, #0]
    3628:	990c      	ldr	r1, [sp, #48]	; 0x30
    362a:	f892 0020 	ldrb.w	r0, [r2, #32]
    362e:	4288      	cmp	r0, r1
    3630:	bf14      	ite	ne
    3632:	f04f 0a00 	movne.w	sl, #0
    3636:	f04f 0a01 	moveq.w	sl, #1
    363a:	f102 0c20 	add.w	ip, r2, #32
    363e:	4683      	mov	fp, r0
    3640:	2220      	movs	r2, #32
    3642:	eb09 1386 	add.w	r3, r9, r6, lsl #6
    3646:	e003      	b.n	3650 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x104>
    3648:	4602      	mov	r2, r0
    364a:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    364e:	7840      	ldrb	r0, [r0, #1]
    3650:	4288      	cmp	r0, r1
    3652:	d002      	beq.n	365a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x10e>
    3654:	2820      	cmp	r0, #32
    3656:	d00a      	beq.n	366e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x122>
    3658:	e7f6      	b.n	3648 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xfc>
    365a:	2820      	cmp	r0, #32
    365c:	d007      	beq.n	366e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x122>
    365e:	4583      	cmp	fp, r0
    3660:	d107      	bne.n	3672 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x126>
    3662:	eb03 004b 	add.w	r0, r3, fp, lsl #1
    3666:	7840      	ldrb	r0, [r0, #1]
    3668:	f88c 0000 	strb.w	r0, [ip]
    366c:	e007      	b.n	367e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x132>
    366e:	4640      	mov	r0, r8
    3670:	e00c      	b.n	368c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x140>
    3672:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    3676:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    367a:	7840      	ldrb	r0, [r0, #1]
    367c:	7048      	strb	r0, [r1, #1]
    367e:	b124      	cbz	r4, 368a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x13e>
    3680:	2100      	movs	r1, #0
    3682:	f240 409a 	movw	r0, #1178	; 0x49a
    3686:	f3af 8000 	nop.w
    368a:	4638      	mov	r0, r7
    368c:	46c3      	mov	fp, r8
    368e:	ea10 0f0a 	tst.w	r0, sl
    3692:	bf18      	it	ne
    3694:	46bb      	movne	fp, r7
    3696:	2800      	cmp	r0, #0
    3698:	d04f      	beq.n	373a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ee>
    369a:	b124      	cbz	r4, 36a6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x15a>
    369c:	2100      	movs	r1, #0
    369e:	f240 70c4 	movw	r0, #1988	; 0x7c4
    36a2:	f3af 8000 	nop.w
    36a6:	4632      	mov	r2, r6
    36a8:	2001      	movs	r0, #1
    36aa:	990c      	ldr	r1, [sp, #48]	; 0x30
    36ac:	f7ff f8d6 	bl	285c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x85c>
    36b0:	b124      	cbz	r4, 36bc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x170>
    36b2:	2100      	movs	r1, #0
    36b4:	f240 70cd 	movw	r0, #1997	; 0x7cd
    36b8:	f3af 8000 	nop.w
    36bc:	483c      	ldr	r0, [pc, #240]	; (37b0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x264>)
    36be:	2800      	cmp	r0, #0
    36c0:	bf18      	it	ne
    36c2:	f3af 8000 	nopne.w
    36c6:	f3ef 8010 	mrs	r0, PRIMASK
    36ca:	b672      	cpsid	i
    36cc:	9007      	str	r0, [sp, #28]
    36ce:	b124      	cbz	r4, 36da <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x18e>
    36d0:	2100      	movs	r1, #0
    36d2:	f240 70d2 	movw	r0, #2002	; 0x7d2
    36d6:	f3af 8000 	nop.w
    36da:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    36de:	f88d 0008 	strb.w	r0, [sp, #8]
    36e2:	f89d 0008 	ldrb.w	r0, [sp, #8]
    36e6:	b138      	cbz	r0, 36f8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ac>
    36e8:	2c00      	cmp	r4, #0
    36ea:	bf1c      	itt	ne
    36ec:	2100      	movne	r1, #0
    36ee:	f240 70d6 	movwne	r0, #2006	; 0x7d6
    36f2:	f43f af3d 	beq.w	3570 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x24>
    36f6:	e781      	b.n	35fc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xb0>
    36f8:	f1bb 0f00 	cmp.w	fp, #0
    36fc:	d00a      	beq.n	3714 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c8>
    36fe:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    3702:	2820      	cmp	r0, #32
    3704:	d106      	bne.n	3714 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c8>
    3706:	4632      	mov	r2, r6
    3708:	2102      	movs	r1, #2
    370a:	9808      	ldr	r0, [sp, #32]
    370c:	f7ff f8d8 	bl	28c0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x8c0>
    3710:	9006      	str	r0, [sp, #24]
    3712:	b1f8      	cbz	r0, 3754 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x208>
    3714:	b124      	cbz	r4, 3720 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d4>
    3716:	2100      	movs	r1, #0
    3718:	f240 70ea 	movw	r0, #2026	; 0x7ea
    371c:	f3af 8000 	nop.w
    3720:	e000      	b.n	3724 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d8>
    3722:	e00a      	b.n	373a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ee>
    3724:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    3728:	ea27 0000 	bic.w	r0, r7, r0
    372c:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    3730:	20ff      	movs	r0, #255	; 0xff
    3732:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    3736:	2001      	movs	r0, #1
    3738:	9009      	str	r0, [sp, #36]	; 0x24
    373a:	b124      	cbz	r4, 3746 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1fa>
    373c:	2100      	movs	r1, #0
    373e:	f240 70f3 	movw	r0, #2035	; 0x7f3
    3742:	f3af 8000 	nop.w
    3746:	9806      	ldr	r0, [sp, #24]
    3748:	4e1a      	ldr	r6, [pc, #104]	; (37b4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x268>)
    374a:	2802      	cmp	r0, #2
    374c:	d009      	beq.n	3762 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x216>
    374e:	2801      	cmp	r0, #1
    3750:	d00f      	beq.n	3772 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x226>
    3752:	e013      	b.n	377c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>
    3754:	b194      	cbz	r4, 377c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>
    3756:	2100      	movs	r1, #0
    3758:	f240 70e5 	movw	r0, #2021	; 0x7e5
    375c:	f3af 8000 	nop.w
    3760:	e7ec      	b.n	373c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f0>
    3762:	68a9      	ldr	r1, [r5, #8]
    3764:	9808      	ldr	r0, [sp, #32]
    3766:	1a08      	subs	r0, r1, r0
    3768:	f009 ff24 	bl	d5b4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    376c:	6871      	ldr	r1, [r6, #4]
    376e:	b921      	cbnz	r1, 377a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22e>
    3770:	e004      	b.n	377c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>
    3772:	6871      	ldr	r1, [r6, #4]
    3774:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3778:	b101      	cbz	r1, 377c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>
    377a:	4788      	blx	r1
    377c:	9807      	ldr	r0, [sp, #28]
    377e:	b148      	cbz	r0, 3794 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x248>
    3780:	b124      	cbz	r4, 378c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x240>
    3782:	2100      	movs	r1, #0
    3784:	f640 0007 	movw	r0, #2055	; 0x807
    3788:	f3af 8000 	nop.w
    378c:	9809      	ldr	r0, [sp, #36]	; 0x24
    378e:	b00d      	add	sp, #52	; 0x34
    3790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3794:	4805      	ldr	r0, [pc, #20]	; (37ac <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x260>)
    3796:	2800      	cmp	r0, #0
    3798:	bf18      	it	ne
    379a:	f3af 8000 	nopne.w
    379e:	b662      	cpsie	i
    37a0:	e7ee      	b.n	3780 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x234>
    37a2:	0000      	.short	0x0000
    37a4:	200010ec 	.word	0x200010ec
	...
    37b4:	2000003c 	.word	0x2000003c

000037b8 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>:
    37b8:	2820      	cmp	r0, #32
    37ba:	bf24      	itt	cs
    37bc:	2000      	movcs	r0, #0
    37be:	4770      	bxcs	lr
    37c0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    37c4:	4b03      	ldr	r3, [pc, #12]	; (37d4 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI+0x1c>)
    37c6:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
    37ca:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    37ce:	6042      	str	r2, [r0, #4]
    37d0:	2001      	movs	r0, #1
    37d2:	4770      	bx	lr
    37d4:	20000cec 	.word	0x20000cec

000037d8 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    37d8:	b510      	push	{r4, lr}
    37da:	2820      	cmp	r0, #32
    37dc:	d211      	bcs.n	3802 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    37de:	490e      	ldr	r1, [pc, #56]	; (3818 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    37e0:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
    37e4:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    37e8:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    37ec:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    37f0:	b13b      	cbz	r3, 3802 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    37f2:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
    37f6:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    37fa:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    37fe:	2a01      	cmp	r2, #1
    3800:	d001      	beq.n	3806 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    3802:	2000      	movs	r0, #0
    3804:	bd10      	pop	{r4, pc}
    3806:	f891 202c 	ldrb.w	r2, [r1, #44]	; 0x2c
    380a:	4601      	mov	r1, r0
    380c:	2000      	movs	r0, #0
    380e:	f7ff f825 	bl	285c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x85c>
    3812:	2001      	movs	r0, #1
    3814:	bd10      	pop	{r4, pc}
    3816:	0000      	.short	0x0000
    3818:	200010ec 	.word	0x200010ec

0000381c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    381c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3820:	4e86      	ldr	r6, [pc, #536]	; (3a3c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x220>)
    3822:	4680      	mov	r8, r0
    3824:	f896 002c 	ldrb.w	r0, [r6, #44]	; 0x2c
    3828:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    382c:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    3830:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    3834:	2800      	cmp	r0, #0
    3836:	d071      	beq.n	391c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    3838:	f896 902c 	ldrb.w	r9, [r6, #44]	; 0x2c
    383c:	4d80      	ldr	r5, [pc, #512]	; (3a40 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x224>)
    383e:	b125      	cbz	r5, 384a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    3840:	2100      	movs	r1, #0
    3842:	f640 3076 	movw	r0, #2934	; 0xb76
    3846:	f3af 8000 	nop.w
    384a:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    384e:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    3852:	2801      	cmp	r0, #1
    3854:	d018      	beq.n	3888 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    3856:	b2c0      	uxtb	r0, r0
    3858:	2804      	cmp	r0, #4
    385a:	bf1c      	itt	ne
    385c:	2805      	cmpne	r0, #5
    385e:	2806      	cmpne	r0, #6
    3860:	d061      	beq.n	3926 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10a>
    3862:	b12d      	cbz	r5, 3870 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    3864:	f04f 0100 	mov.w	r1, #0
    3868:	f640 3082 	movw	r0, #2946	; 0xb82
    386c:	f3af 8000 	nop.w
    3870:	f001 fcd0 	bl	5214 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    3874:	b125      	cbz	r5, 3880 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    3876:	2100      	movs	r1, #0
    3878:	f640 3086 	movw	r0, #2950	; 0xb86
    387c:	f3af 8000 	nop.w
    3880:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    3884:	2801      	cmp	r0, #1
    3886:	d1e6      	bne.n	3856 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    3888:	2401      	movs	r4, #1
    388a:	b125      	cbz	r5, 3896 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    388c:	2100      	movs	r1, #0
    388e:	f640 308d 	movw	r0, #2957	; 0xb8d
    3892:	f3af 8000 	nop.w
    3896:	2c00      	cmp	r4, #0
    3898:	d04b      	beq.n	3932 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x116>
    389a:	2000      	movs	r0, #0
    389c:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
    38a0:	b125      	cbz	r5, 38ac <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    38a2:	2100      	movs	r1, #0
    38a4:	f640 3092 	movw	r0, #2962	; 0xb92
    38a8:	f3af 8000 	nop.w
    38ac:	f896 b02c 	ldrb.w	fp, [r6, #44]	; 0x2c
    38b0:	2001      	movs	r0, #1
    38b2:	ea20 090b 	bic.w	r9, r0, fp
    38b6:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    38ba:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    38be:	2240      	movs	r2, #64	; 0x40
    38c0:	f009 ffd2 	bl	d868 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    38c4:	b125      	cbz	r5, 38d0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    38c6:	2100      	movs	r1, #0
    38c8:	f240 502f 	movw	r0, #1327	; 0x52f
    38cc:	f3af 8000 	nop.w
    38d0:	eb09 0049 	add.w	r0, r9, r9, lsl #1
    38d4:	eb00 0a06 	add.w	sl, r0, r6
    38d8:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
    38dc:	4430      	add	r0, r6
    38de:	8c01      	ldrh	r1, [r0, #32]
    38e0:	f8aa 1020 	strh.w	r1, [sl, #32]
    38e4:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    38e8:	f88a 0022 	strb.w	r0, [sl, #34]	; 0x22
    38ec:	b125      	cbz	r5, 38f8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xdc>
    38ee:	2100      	movs	r1, #0
    38f0:	f240 5033 	movw	r0, #1331	; 0x533
    38f4:	f3af 8000 	nop.w
    38f8:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
    38fc:	f88d 0000 	strb.w	r0, [sp]
    3900:	f89d 0000 	ldrb.w	r0, [sp]
    3904:	b1e0      	cbz	r0, 3940 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x124>
    3906:	2d00      	cmp	r5, #0
    3908:	bf1c      	itt	ne
    390a:	2100      	movne	r1, #0
    390c:	f640 3098 	movwne	r0, #2968	; 0xb98
    3910:	d0bb      	beq.n	388a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    3912:	bf00      	nop
    3914:	f3af 8000 	nop.w
    3918:	e7b7      	b.n	388a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    391a:	e7ff      	b.n	391c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    391c:	f640 316d 	movw	r1, #2925	; 0xb6d
    3920:	2070      	movs	r0, #112	; 0x70
    3922:	f001 fb4d 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3926:	464a      	mov	r2, r9
    3928:	4641      	mov	r1, r8
    392a:	2001      	movs	r0, #1
    392c:	f7fe ff96 	bl	285c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x85c>
    3930:	e7a0      	b.n	3874 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    3932:	4844      	ldr	r0, [pc, #272]	; (3a44 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    3934:	2800      	cmp	r0, #0
    3936:	bf18      	it	ne
    3938:	f3af 8000 	nopne.w
    393c:	b662      	cpsie	i
    393e:	e7ac      	b.n	389a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    3940:	b125      	cbz	r5, 394c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x130>
    3942:	2100      	movs	r1, #0
    3944:	f640 309c 	movw	r0, #2972	; 0xb9c
    3948:	f3af 8000 	nop.w
    394c:	f89a 3021 	ldrb.w	r3, [sl, #33]	; 0x21
    3950:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    3954:	4640      	mov	r0, r8
    3956:	461c      	mov	r4, r3
    3958:	f04f 0b20 	mov.w	fp, #32
    395c:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    3960:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    3964:	e004      	b.n	3970 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x154>
    3966:	46a3      	mov	fp, r4
    3968:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    396c:	f89c 4001 	ldrb.w	r4, [ip, #1]
    3970:	4284      	cmp	r4, r0
    3972:	d002      	beq.n	397a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15e>
    3974:	2c20      	cmp	r4, #32
    3976:	d02b      	beq.n	39d0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    3978:	e7f5      	b.n	3966 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x14a>
    397a:	2c20      	cmp	r4, #32
    397c:	d028      	beq.n	39d0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    397e:	42a3      	cmp	r3, r4
    3980:	d104      	bne.n	398c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x170>
    3982:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    3986:	7840      	ldrb	r0, [r0, #1]
    3988:	7008      	strb	r0, [r1, #0]
    398a:	e005      	b.n	3998 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x17c>
    398c:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    3990:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    3994:	7840      	ldrb	r0, [r0, #1]
    3996:	7048      	strb	r0, [r1, #1]
    3998:	f1ba 0f00 	cmp.w	sl, #0
    399c:	d011      	beq.n	39c2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    399e:	b125      	cbz	r5, 39aa <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    39a0:	2100      	movs	r1, #0
    39a2:	f240 4092 	movw	r0, #1170	; 0x492
    39a6:	f3af 8000 	nop.w
    39aa:	f89a 0000 	ldrb.w	r0, [sl]
    39ae:	42a0      	cmp	r0, r4
    39b0:	d107      	bne.n	39c2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    39b2:	b125      	cbz	r5, 39be <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a2>
    39b4:	2100      	movs	r1, #0
    39b6:	f240 4095 	movw	r0, #1173	; 0x495
    39ba:	f3af 8000 	nop.w
    39be:	f88a b000 	strb.w	fp, [sl]
    39c2:	b15d      	cbz	r5, 39dc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    39c4:	2100      	movs	r1, #0
    39c6:	f240 409a 	movw	r0, #1178	; 0x49a
    39ca:	f3af 8000 	nop.w
    39ce:	e000      	b.n	39d2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b6>
    39d0:	b125      	cbz	r5, 39dc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    39d2:	2100      	movs	r1, #0
    39d4:	f44f 603a 	mov.w	r0, #2976	; 0xba0
    39d8:	f3af 8000 	nop.w
    39dc:	481a      	ldr	r0, [pc, #104]	; (3a48 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x22c>)
    39de:	2800      	cmp	r0, #0
    39e0:	bf18      	it	ne
    39e2:	f3af 8000 	nopne.w
    39e6:	f3ef 8410 	mrs	r4, PRIMASK
    39ea:	b672      	cpsid	i
    39ec:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
    39f0:	f88d 0000 	strb.w	r0, [sp]
    39f4:	f89d 0000 	ldrb.w	r0, [sp]
    39f8:	b138      	cbz	r0, 3a0a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ee>
    39fa:	2d00      	cmp	r5, #0
    39fc:	bf1c      	itt	ne
    39fe:	2100      	movne	r1, #0
    3a00:	f640 30a6 	movwne	r0, #2982	; 0xba6
    3a04:	f43f af41 	beq.w	388a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    3a08:	e784      	b.n	3914 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    3a0a:	f886 902c 	strb.w	r9, [r6, #44]	; 0x2c
    3a0e:	20ff      	movs	r0, #255	; 0xff
    3a10:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
    3a14:	b154      	cbz	r4, 3a2c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>
    3a16:	2d00      	cmp	r5, #0
    3a18:	bf08      	it	eq
    3a1a:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3a1e:	2100      	movs	r1, #0
    3a20:	f640 30b3 	movw	r0, #2995	; 0xbb3
    3a24:	f3af 8000 	nop.w
    3a28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3a2c:	4805      	ldr	r0, [pc, #20]	; (3a44 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    3a2e:	2800      	cmp	r0, #0
    3a30:	bf18      	it	ne
    3a32:	f3af 8000 	nopne.w
    3a36:	b662      	cpsie	i
    3a38:	e7ed      	b.n	3a16 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    3a3a:	0000      	.short	0x0000
    3a3c:	200010ec 	.word	0x200010ec
	...

00003a4c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    3a4c:	b570      	push	{r4, r5, r6, lr}
    3a4e:	460d      	mov	r5, r1
    3a50:	4606      	mov	r6, r0
    3a52:	f001 fa2b 	bl	4eac <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    3a56:	480f      	ldr	r0, [pc, #60]	; (3a94 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    3a58:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
    3a5c:	2400      	movs	r4, #0
    3a5e:	3880      	subs	r0, #128	; 0x80
    3a60:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    3a64:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    3a68:	b129      	cbz	r1, 3a76 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    3a6a:	1c61      	adds	r1, r4, #1
    3a6c:	b2cc      	uxtb	r4, r1
    3a6e:	2c20      	cmp	r4, #32
    3a70:	d3f8      	bcc.n	3a64 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    3a72:	2020      	movs	r0, #32
    3a74:	bd70      	pop	{r4, r5, r6, pc}
    3a76:	4808      	ldr	r0, [pc, #32]	; (3a98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT>)
    3a78:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    3a7c:	f840 6021 	str.w	r6, [r0, r1, lsl #2]
    3a80:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    3a84:	4621      	mov	r1, r4
    3a86:	6045      	str	r5, [r0, #4]
    3a88:	2001      	movs	r0, #1
    3a8a:	f7fe fee7 	bl	285c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x85c>
    3a8e:	4620      	mov	r0, r4
    3a90:	bd70      	pop	{r4, r5, r6, pc}
    3a92:	0000      	.short	0x0000
    3a94:	200010ec 	.word	0x200010ec
    3a98:	20000cec 	.word	0x20000cec

00003a9c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    3a9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3aa0:	f000 fb70 	bl	4184 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    3aa4:	4605      	mov	r5, r0
    3aa6:	f000 fe3f 	bl	4728 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    3aaa:	4c60      	ldr	r4, [pc, #384]	; (3c2c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x190>)
    3aac:	6860      	ldr	r0, [r4, #4]
    3aae:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    3ab2:	bf1c      	itt	ne
    3ab4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    3ab8:	6060      	strne	r0, [r4, #4]
    3aba:	7fa0      	ldrb	r0, [r4, #30]
    3abc:	4f5c      	ldr	r7, [pc, #368]	; (3c30 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x194>)
    3abe:	b990      	cbnz	r0, 3ae6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x4a>
    3ac0:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
    3ac4:	1a40      	subs	r0, r0, r1
    3ac6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3aca:	f44f 710c 	mov.w	r1, #560	; 0x230
    3ace:	f009 fd9c 	bl	d60a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    3ad2:	68e1      	ldr	r1, [r4, #12]
    3ad4:	4408      	add	r0, r1
    3ad6:	1a28      	subs	r0, r5, r0
    3ad8:	0200      	lsls	r0, r0, #8
    3ada:	17c1      	asrs	r1, r0, #31
    3adc:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    3ae0:	1200      	asrs	r0, r0, #8
    3ae2:	0fc0      	lsrs	r0, r0, #31
    3ae4:	d012      	beq.n	3b0c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x70>
    3ae6:	7e60      	ldrb	r0, [r4, #25]
    3ae8:	b320      	cbz	r0, 3b34 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x98>
    3aea:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    3aee:	f88d 0000 	strb.w	r0, [sp]
    3af2:	f89d 0000 	ldrb.w	r0, [sp]
    3af6:	b1e8      	cbz	r0, 3b34 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x98>
    3af8:	f000 fc72 	bl	43e0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    3afc:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    3b00:	b1f0      	cbz	r0, 3b40 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    3b02:	f240 31d5 	movw	r1, #981	; 0x3d5
    3b06:	2070      	movs	r0, #112	; 0x70
    3b08:	f001 fa5a 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3b0c:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    3b10:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    3b14:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    3b18:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    3b1c:	6840      	ldr	r0, [r0, #4]
    3b1e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    3b22:	f857 2021 	ldr.w	r2, [r7, r1, lsl #2]
    3b26:	2108      	movs	r1, #8
    3b28:	4790      	blx	r2
    3b2a:	f240 31bd 	movw	r1, #957	; 0x3bd
    3b2e:	2070      	movs	r0, #112	; 0x70
    3b30:	f001 fa46 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3b34:	1ce8      	adds	r0, r5, #3
    3b36:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3b3a:	f000 fb49 	bl	41d0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    3b3e:	e7dd      	b.n	3afc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x60>
    3b40:	2001      	movs	r0, #1
    3b42:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    3b46:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    3b4a:	2820      	cmp	r0, #32
    3b4c:	d021      	beq.n	3b92 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xf6>
    3b4e:	f894 902d 	ldrb.w	r9, [r4, #45]	; 0x2d
    3b52:	2020      	movs	r0, #32
    3b54:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    3b58:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    3b5c:	2600      	movs	r6, #0
    3b5e:	f884 6026 	strb.w	r6, [r4, #38]	; 0x26
    3b62:	f884 6027 	strb.w	r6, [r4, #39]	; 0x27
    3b66:	6026      	str	r6, [r4, #0]
    3b68:	f000 feb8 	bl	48dc <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>
    3b6c:	7720      	strb	r0, [r4, #28]
    3b6e:	f894 802c 	ldrb.w	r8, [r4, #44]	; 0x2c
    3b72:	eb08 0048 	add.w	r0, r8, r8, lsl #1
    3b76:	eb00 0a04 	add.w	sl, r0, r4
    3b7a:	f89a 0020 	ldrb.w	r0, [sl, #32]
    3b7e:	2820      	cmp	r0, #32
    3b80:	d012      	beq.n	3ba8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x10c>
    3b82:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    3b86:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    3b8a:	7e81      	ldrb	r1, [r0, #26]
    3b8c:	2901      	cmp	r1, #1
    3b8e:	d005      	beq.n	3b9c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x100>
    3b90:	e00a      	b.n	3ba8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x10c>
    3b92:	f44f 7176 	mov.w	r1, #984	; 0x3d8
    3b96:	2070      	movs	r0, #112	; 0x70
    3b98:	f001 fa12 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3b9c:	f100 0208 	add.w	r2, r0, #8
    3ba0:	2101      	movs	r1, #1
    3ba2:	4628      	mov	r0, r5
    3ba4:	f7fe f9d2 	bl	1f4c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x200>
    3ba8:	4642      	mov	r2, r8
    3baa:	2101      	movs	r1, #1
    3bac:	4628      	mov	r0, r5
    3bae:	f7fe fe87 	bl	28c0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x8c0>
    3bb2:	0007      	movs	r7, r0
    3bb4:	d0f8      	beq.n	3ba8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x10c>
    3bb6:	481f      	ldr	r0, [pc, #124]	; (3c34 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x198>)
    3bb8:	eb00 1088 	add.w	r0, r0, r8, lsl #6
    3bbc:	f810 0019 	ldrb.w	r0, [r0, r9, lsl #1]
    3bc0:	2802      	cmp	r0, #2
    3bc2:	d104      	bne.n	3bce <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x132>
    3bc4:	4642      	mov	r2, r8
    3bc6:	4649      	mov	r1, r9
    3bc8:	2006      	movs	r0, #6
    3bca:	f7fe fe47 	bl	285c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x85c>
    3bce:	20ff      	movs	r0, #255	; 0xff
    3bd0:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    3bd4:	f89a 0021 	ldrb.w	r0, [sl, #33]	; 0x21
    3bd8:	f8df 805c 	ldr.w	r8, [pc, #92]	; 3c38 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19c>
    3bdc:	2820      	cmp	r0, #32
    3bde:	bf1c      	itt	ne
    3be0:	f898 0001 	ldrbne.w	r0, [r8, #1]
    3be4:	f001 fac0 	blne	5168 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    3be8:	7f20      	ldrb	r0, [r4, #28]
    3bea:	b118      	cbz	r0, 3bf4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x158>
    3bec:	f000 fe52 	bl	4894 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    3bf0:	7726      	strb	r6, [r4, #28]
    3bf2:	7766      	strb	r6, [r4, #29]
    3bf4:	2f02      	cmp	r7, #2
    3bf6:	d00f      	beq.n	3c18 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x17c>
    3bf8:	2f01      	cmp	r7, #1
    3bfa:	bf18      	it	ne
    3bfc:	e8bd 8ff8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3c00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3c04:	f8d8 1004 	ldr.w	r1, [r8, #4]
    3c08:	2900      	cmp	r1, #0
    3c0a:	bf08      	it	eq
    3c0c:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3c10:	b001      	add	sp, #4
    3c12:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3c16:	4708      	bx	r1
    3c18:	68a0      	ldr	r0, [r4, #8]
    3c1a:	1b40      	subs	r0, r0, r5
    3c1c:	f009 fcca 	bl	d5b4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    3c20:	f8d8 1004 	ldr.w	r1, [r8, #4]
    3c24:	2900      	cmp	r1, #0
    3c26:	d1f3      	bne.n	3c10 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x174>
    3c28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3c2c:	200010ec 	.word	0x200010ec
    3c30:	20000cec 	.word	0x20000cec
    3c34:	2000106c 	.word	0x2000106c
    3c38:	2000003c 	.word	0x2000003c

00003c3c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    3c3c:	b530      	push	{r4, r5, lr}
    3c3e:	4c36      	ldr	r4, [pc, #216]	; (3d18 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xdc>)
    3c40:	4605      	mov	r5, r0
    3c42:	b083      	sub	sp, #12
    3c44:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    3c48:	2820      	cmp	r0, #32
    3c4a:	d008      	beq.n	3c5e <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x22>
    3c4c:	6860      	ldr	r0, [r4, #4]
    3c4e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    3c52:	d009      	beq.n	3c68 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2c>
    3c54:	f640 21a1 	movw	r1, #2721	; 0xaa1
    3c58:	2070      	movs	r0, #112	; 0x70
    3c5a:	f001 f9b1 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3c5e:	f44f 612a 	mov.w	r1, #2720	; 0xaa0
    3c62:	2070      	movs	r0, #112	; 0x70
    3c64:	f001 f9ac 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3c68:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    3c6c:	492b      	ldr	r1, [pc, #172]	; (3d1c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xe0>)
    3c6e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    3c72:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    3c76:	3008      	adds	r0, #8
    3c78:	f7fe fdb6 	bl	27e8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x7e8>
    3c7c:	4601      	mov	r1, r0
    3c7e:	4a28      	ldr	r2, [pc, #160]	; (3d20 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xe4>)
    3c80:	4428      	add	r0, r5
    3c82:	4291      	cmp	r1, r2
    3c84:	d904      	bls.n	3c90 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x54>
    3c86:	f240 516f 	movw	r1, #1391	; 0x56f
    3c8a:	2070      	movs	r0, #112	; 0x70
    3c8c:	f001 f998 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3c90:	4924      	ldr	r1, [pc, #144]	; (3d24 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xe8>)
    3c92:	428d      	cmp	r5, r1
    3c94:	dd04      	ble.n	3ca0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x64>
    3c96:	f44f 61ae 	mov.w	r1, #1392	; 0x570
    3c9a:	2070      	movs	r0, #112	; 0x70
    3c9c:	f001 f990 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3ca0:	4921      	ldr	r1, [pc, #132]	; (3d28 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xec>)
    3ca2:	428d      	cmp	r5, r1
    3ca4:	da04      	bge.n	3cb0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x74>
    3ca6:	f240 5171 	movw	r1, #1393	; 0x571
    3caa:	2070      	movs	r0, #112	; 0x70
    3cac:	f001 f988 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3cb0:	491e      	ldr	r1, [pc, #120]	; (3d2c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xf0>)
    3cb2:	4281      	cmp	r1, r0
    3cb4:	bfdc      	itt	le
    3cb6:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    3cba:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    3cbe:	dd05      	ble.n	3ccc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x90>
    3cc0:	2800      	cmp	r0, #0
    3cc2:	bfbc      	itt	lt
    3cc4:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    3cc8:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    3ccc:	aa01      	add	r2, sp, #4
    3cce:	4669      	mov	r1, sp
    3cd0:	f000 f8ee 	bl	3eb0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    3cd4:	f89d 0004 	ldrb.w	r0, [sp, #4]
    3cd8:	280f      	cmp	r0, #15
    3cda:	bf8c      	ite	hi
    3cdc:	2001      	movhi	r0, #1
    3cde:	2000      	movls	r0, #0
    3ce0:	9900      	ldr	r1, [sp, #0]
    3ce2:	4408      	add	r0, r1
    3ce4:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    3ce8:	6061      	str	r1, [r4, #4]
    3cea:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    3cee:	f88d 0000 	strb.w	r0, [sp]
    3cf2:	f89d 0000 	ldrb.w	r0, [sp]
    3cf6:	2800      	cmp	r0, #0
    3cf8:	bf04      	itt	eq
    3cfa:	b003      	addeq	sp, #12
    3cfc:	bd30      	popeq	{r4, r5, pc}
    3cfe:	2005      	movs	r0, #5
    3d00:	f000 fbec 	bl	44dc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    3d04:	2800      	cmp	r0, #0
    3d06:	bf1c      	itt	ne
    3d08:	b003      	addne	sp, #12
    3d0a:	bd30      	popne	{r4, r5, pc}
    3d0c:	f640 21a8 	movw	r1, #2728	; 0xaa8
    3d10:	2070      	movs	r0, #112	; 0x70
    3d12:	f001 f955 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3d16:	0000      	.short	0x0000
    3d18:	200010ec 	.word	0x200010ec
    3d1c:	20000cec 	.word	0x20000cec
    3d20:	1e847fff 	.word	0x1e847fff
    3d24:	0f424000 	.word	0x0f424000
    3d28:	f0bdc000 	.word	0xf0bdc000
    3d2c:	1e848000 	.word	0x1e848000

00003d30 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    3d30:	b570      	push	{r4, r5, r6, lr}
    3d32:	4c1c      	ldr	r4, [pc, #112]	; (3da4 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x74>)
    3d34:	2120      	movs	r1, #32
    3d36:	f884 1020 	strb.w	r1, [r4, #32]
    3d3a:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    3d3e:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    3d42:	2000      	movs	r0, #0
    3d44:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    3d48:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
    3d4c:	1e42      	subs	r2, r0, #1
    3d4e:	e9c4 0200 	strd	r0, r2, [r4]
    3d52:	77a0      	strb	r0, [r4, #30]
    3d54:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    3d58:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    3d5c:	7720      	strb	r0, [r4, #28]
    3d5e:	7760      	strb	r0, [r4, #29]
    3d60:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
    3d64:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
    3d68:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    3d6c:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    3d70:	2210      	movs	r2, #16
    3d72:	7088      	strb	r0, [r1, #2]
    3d74:	f801 0f04 	strb.w	r0, [r1, #4]!
    3d78:	1e52      	subs	r2, r2, #1
    3d7a:	d1fa      	bne.n	3d72 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x42>
    3d7c:	f000 fdb8 	bl	48f0 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>
    3d80:	4d09      	ldr	r5, [pc, #36]	; (3da8 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x78>)
    3d82:	2601      	movs	r6, #1
    3d84:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    3d88:	20ff      	movs	r0, #255	; 0xff
    3d8a:	7028      	strb	r0, [r5, #0]
    3d8c:	4807      	ldr	r0, [pc, #28]	; (3dac <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    3d8e:	f001 f9cd 	bl	512c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    3d92:	7068      	strb	r0, [r5, #1]
    3d94:	f001 fa28 	bl	51e8 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    3d98:	60a8      	str	r0, [r5, #8]
    3d9a:	f000 fd33 	bl	4804 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    3d9e:	f884 602f 	strb.w	r6, [r4, #47]	; 0x2f
    3da2:	bd70      	pop	{r4, r5, r6, pc}
    3da4:	200010ec 	.word	0x200010ec
    3da8:	2000003c 	.word	0x2000003c
    3dac:	00002711 	.word	0x00002711

00003db0 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>:
    3db0:	b500      	push	{lr}
    3db2:	b083      	sub	sp, #12
    3db4:	4668      	mov	r0, sp
    3db6:	f000 f9eb 	bl	4190 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    3dba:	9800      	ldr	r0, [sp, #0]
    3dbc:	f009 fbfa 	bl	d5b4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    3dc0:	9a01      	ldr	r2, [sp, #4]
    3dc2:	4b03      	ldr	r3, [pc, #12]	; (3dd0 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q+0x20>)
    3dc4:	2100      	movs	r1, #0
    3dc6:	fbe2 0103 	umlal	r0, r1, r2, r3
    3dca:	b003      	add	sp, #12
    3dcc:	bd00      	pop	{pc}
    3dce:	0000      	.short	0x0000
    3dd0:	1e848000 	.word	0x1e848000

00003dd4 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>:
    3dd4:	b570      	push	{r4, r5, r6, lr}
    3dd6:	4606      	mov	r6, r0
    3dd8:	b082      	sub	sp, #8
    3dda:	461d      	mov	r5, r3
    3ddc:	4610      	mov	r0, r2
    3dde:	f009 fbe9 	bl	d5b4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    3de2:	4604      	mov	r4, r0
    3de4:	4668      	mov	r0, sp
    3de6:	f000 f9d3 	bl	4190 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    3dea:	4920      	ldr	r1, [pc, #128]	; (3e6c <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x98>)
    3dec:	9801      	ldr	r0, [sp, #4]
    3dee:	fba0 0201 	umull	r0, r2, r0, r1
    3df2:	1a30      	subs	r0, r6, r0
    3df4:	bf44      	itt	mi
    3df6:	f5a0 00f7 	submi.w	r0, r0, #8093696	; 0x7b8000
    3dfa:	f110 50f8 	addsmi.w	r0, r0, #520093696	; 0x1f000000
    3dfe:	d504      	bpl.n	3e0a <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x36>
    3e00:	f640 31c8 	movw	r1, #3016	; 0xbc8
    3e04:	2070      	movs	r0, #112	; 0x70
    3e06:	f001 f8db 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3e0a:	4288      	cmp	r0, r1
    3e0c:	db04      	blt.n	3e18 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x44>
    3e0e:	f640 31c9 	movw	r1, #3017	; 0xbc9
    3e12:	2070      	movs	r0, #112	; 0x70
    3e14:	f001 f8d4 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3e18:	4a15      	ldr	r2, [pc, #84]	; (3e70 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x9c>)
    3e1a:	1a21      	subs	r1, r4, r0
    3e1c:	2300      	movs	r3, #0
    3e1e:	1a8a      	subs	r2, r1, r2
    3e20:	f173 0200 	sbcs.w	r2, r3, #0
    3e24:	d318      	bcc.n	3e58 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x84>
    3e26:	f8df c048 	ldr.w	ip, [pc, #72]	; 3e70 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x9c>
    3e2a:	1b02      	subs	r2, r0, r4
    3e2c:	ebb2 0c0c 	subs.w	ip, r2, ip
    3e30:	f173 0300 	sbcs.w	r3, r3, #0
    3e34:	d310      	bcc.n	3e58 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x84>
    3e36:	4b0f      	ldr	r3, [pc, #60]	; (3e74 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0xa0>)
    3e38:	428b      	cmp	r3, r1
    3e3a:	bf3e      	ittt	cc
    3e3c:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    3e40:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    3e44:	1901      	addcc	r1, r0, r4
    3e46:	d307      	bcc.n	3e58 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x84>
    3e48:	4293      	cmp	r3, r2
    3e4a:	d20a      	bcs.n	3e62 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x8e>
    3e4c:	f5c4 2190 	rsb	r1, r4, #294912	; 0x48000
    3e50:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    3e54:	4408      	add	r0, r1
    3e56:	4241      	negs	r1, r0
    3e58:	f101 000f 	add.w	r0, r1, #15
    3e5c:	b002      	add	sp, #8
    3e5e:	1a28      	subs	r0, r5, r0
    3e60:	bd70      	pop	{r4, r5, r6, pc}
    3e62:	f640 21c2 	movw	r1, #2754	; 0xac2
    3e66:	2070      	movs	r0, #112	; 0x70
    3e68:	f001 f8aa 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3e6c:	1e848000 	.word	0x1e848000
    3e70:	0f424000 	.word	0x0f424000
    3e74:	1e847fff 	.word	0x1e847fff

00003e78 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    3e78:	0b41      	lsrs	r1, r0, #13
    3e7a:	f248 6237 	movw	r2, #34359	; 0x8637
    3e7e:	4351      	muls	r1, r2
    3e80:	0c0a      	lsrs	r2, r1, #16
    3e82:	4b09      	ldr	r3, [pc, #36]	; (3ea8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    3e84:	0251      	lsls	r1, r2, #9
    3e86:	fb02 0203 	mla	r2, r2, r3, r0
    3e8a:	4808      	ldr	r0, [pc, #32]	; (3eac <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    3e8c:	4350      	muls	r0, r2
    3e8e:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    3e92:	306e      	adds	r0, #110	; 0x6e
    3e94:	0d40      	lsrs	r0, r0, #21
    3e96:	425b      	negs	r3, r3
    3e98:	fb10 f303 	smulbb	r3, r0, r3
    3e9c:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    3ea0:	bf88      	it	hi
    3ea2:	1c49      	addhi	r1, r1, #1
    3ea4:	4408      	add	r0, r1
    3ea6:	4770      	bx	lr
    3ea8:	ffffc2f7 	.word	0xffffc2f7
    3eac:	00010c6f 	.word	0x00010c6f

00003eb0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    3eb0:	0b43      	lsrs	r3, r0, #13
    3eb2:	f248 6c37 	movw	ip, #34359	; 0x8637
    3eb6:	fb03 f30c 	mul.w	r3, r3, ip
    3eba:	b430      	push	{r4, r5}
    3ebc:	0c1b      	lsrs	r3, r3, #16
    3ebe:	f8df c044 	ldr.w	ip, [pc, #68]	; 3f04 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    3ec2:	025c      	lsls	r4, r3, #9
    3ec4:	fb03 030c 	mla	r3, r3, ip, r0
    3ec8:	480f      	ldr	r0, [pc, #60]	; (3f08 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    3eca:	4358      	muls	r0, r3
    3ecc:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    3ed0:	eb04 000c 	add.w	r0, r4, ip
    3ed4:	f643 5409 	movw	r4, #15625	; 0x3d09
    3ed8:	fb1c f404 	smulbb	r4, ip, r4
    3edc:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    3ee0:	f643 5508 	movw	r5, #15624	; 0x3d08
    3ee4:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    3ee8:	442c      	add	r4, r5
    3eea:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    3eee:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    3ef2:	bf84      	itt	hi
    3ef4:	f04f 0c00 	movhi.w	ip, #0
    3ef8:	1c40      	addhi	r0, r0, #1
    3efa:	6008      	str	r0, [r1, #0]
    3efc:	f882 c000 	strb.w	ip, [r2]
    3f00:	bc30      	pop	{r4, r5}
    3f02:	4770      	bx	lr
    3f04:	ffffc2f7 	.word	0xffffc2f7
    3f08:	00010c6f 	.word	0x00010c6f

00003f0c <MPSL_IRQ_RTC0_Handler>:
    3f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3f10:	4d3b      	ldr	r5, [pc, #236]	; (4000 <MPSL_IRQ_RTC0_Handler+0xf4>)
    3f12:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    3f16:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 4004 <MPSL_IRQ_RTC0_Handler+0xf8>
    3f1a:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    3f1e:	f44f 6600 	mov.w	r6, #2048	; 0x800
    3f22:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    3f26:	f04f 0400 	mov.w	r4, #0
    3f2a:	d019      	beq.n	3f60 <MPSL_IRQ_RTC0_Handler+0x54>
    3f2c:	4836      	ldr	r0, [pc, #216]	; (4008 <MPSL_IRQ_RTC0_Handler+0xfc>)
    3f2e:	6800      	ldr	r0, [r0, #0]
    3f30:	b1b0      	cbz	r0, 3f60 <MPSL_IRQ_RTC0_Handler+0x54>
    3f32:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    3f36:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    3f3a:	f8d5 0540 	ldr.w	r0, [r5, #1344]	; 0x540
    3f3e:	f8d8 1000 	ldr.w	r1, [r8]
    3f42:	1a40      	subs	r0, r0, r1
    3f44:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3f48:	2802      	cmp	r0, #2
    3f4a:	d302      	bcc.n	3f52 <MPSL_IRQ_RTC0_Handler+0x46>
    3f4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3f50:	d906      	bls.n	3f60 <MPSL_IRQ_RTC0_Handler+0x54>
    3f52:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    3f56:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3f5a:	2004      	movs	r0, #4
    3f5c:	f7fe fe7e 	bl	2c5c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3f60:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    3f64:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    3f68:	d01a      	beq.n	3fa0 <MPSL_IRQ_RTC0_Handler+0x94>
    3f6a:	4828      	ldr	r0, [pc, #160]	; (400c <MPSL_IRQ_RTC0_Handler+0x100>)
    3f6c:	6800      	ldr	r0, [r0, #0]
    3f6e:	b1b8      	cbz	r0, 3fa0 <MPSL_IRQ_RTC0_Handler+0x94>
    3f70:	f8c5 4144 	str.w	r4, [r5, #324]	; 0x144
    3f74:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    3f78:	4825      	ldr	r0, [pc, #148]	; (4010 <MPSL_IRQ_RTC0_Handler+0x104>)
    3f7a:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    3f7e:	f8d8 1000 	ldr.w	r1, [r8]
    3f82:	1a40      	subs	r0, r0, r1
    3f84:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3f88:	2802      	cmp	r0, #2
    3f8a:	d302      	bcc.n	3f92 <MPSL_IRQ_RTC0_Handler+0x86>
    3f8c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3f90:	d906      	bls.n	3fa0 <MPSL_IRQ_RTC0_Handler+0x94>
    3f92:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    3f96:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3f9a:	2005      	movs	r0, #5
    3f9c:	f7fe fe5e 	bl	2c5c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3fa0:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    3fa4:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    3fa8:	d01a      	beq.n	3fe0 <MPSL_IRQ_RTC0_Handler+0xd4>
    3faa:	481a      	ldr	r0, [pc, #104]	; (4014 <MPSL_IRQ_RTC0_Handler+0x108>)
    3fac:	6800      	ldr	r0, [r0, #0]
    3fae:	b1b8      	cbz	r0, 3fe0 <MPSL_IRQ_RTC0_Handler+0xd4>
    3fb0:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    3fb4:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    3fb8:	4817      	ldr	r0, [pc, #92]	; (4018 <MPSL_IRQ_RTC0_Handler+0x10c>)
    3fba:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    3fbe:	f8d8 1000 	ldr.w	r1, [r8]
    3fc2:	1a40      	subs	r0, r0, r1
    3fc4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3fc8:	2802      	cmp	r0, #2
    3fca:	d302      	bcc.n	3fd2 <MPSL_IRQ_RTC0_Handler+0xc6>
    3fcc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3fd0:	d906      	bls.n	3fe0 <MPSL_IRQ_RTC0_Handler+0xd4>
    3fd2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    3fd6:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3fda:	2006      	movs	r0, #6
    3fdc:	f7fe fe3e 	bl	2c5c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3fe0:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    3fe4:	2800      	cmp	r0, #0
    3fe6:	bf08      	it	eq
    3fe8:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    3fec:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
    3ff0:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    3ff4:	4809      	ldr	r0, [pc, #36]	; (401c <MPSL_IRQ_RTC0_Handler+0x110>)
    3ff6:	68c1      	ldr	r1, [r0, #12]
    3ff8:	1c49      	adds	r1, r1, #1
    3ffa:	60c1      	str	r1, [r0, #12]
    3ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4000:	4000b000 	.word	0x4000b000
    4004:	4000b504 	.word	0x4000b504
    4008:	4000b140 	.word	0x4000b140
    400c:	4000b144 	.word	0x4000b144
    4010:	4000b004 	.word	0x4000b004
    4014:	4000b148 	.word	0x4000b148
    4018:	4000b008 	.word	0x4000b008
    401c:	20000048 	.word	0x20000048

00004020 <MPSL_IRQ_TIMER0_Handler>:
    4020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4024:	4d38      	ldr	r5, [pc, #224]	; (4108 <MPSL_IRQ_TIMER0_Handler+0xe8>)
    4026:	7828      	ldrb	r0, [r5, #0]
    4028:	2804      	cmp	r0, #4
    402a:	d068      	beq.n	40fe <MPSL_IRQ_TIMER0_Handler+0xde>
    402c:	1ca8      	adds	r0, r5, #2
    402e:	2201      	movs	r2, #1
    4030:	7801      	ldrb	r1, [r0, #0]
    4032:	b159      	cbz	r1, 404c <MPSL_IRQ_TIMER0_Handler+0x2c>
    4034:	2901      	cmp	r1, #1
    4036:	bf08      	it	eq
    4038:	706a      	strbeq	r2, [r5, #1]
    403a:	d002      	beq.n	4042 <MPSL_IRQ_TIMER0_Handler+0x22>
    403c:	7869      	ldrb	r1, [r5, #1]
    403e:	2900      	cmp	r1, #0
    4040:	d058      	beq.n	40f4 <MPSL_IRQ_TIMER0_Handler+0xd4>
    4042:	2102      	movs	r1, #2
    4044:	7001      	strb	r1, [r0, #0]
    4046:	7840      	ldrb	r0, [r0, #1]
    4048:	f000 fafe 	bl	4648 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    404c:	4c2f      	ldr	r4, [pc, #188]	; (410c <MPSL_IRQ_TIMER0_Handler+0xec>)
    404e:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    4052:	f04f 0800 	mov.w	r8, #0
    4056:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    405a:	f44f 7780 	mov.w	r7, #256	; 0x100
    405e:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    4062:	d00a      	beq.n	407a <MPSL_IRQ_TIMER0_Handler+0x5a>
    4064:	482a      	ldr	r0, [pc, #168]	; (4110 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    4066:	6800      	ldr	r0, [r0, #0]
    4068:	b138      	cbz	r0, 407a <MPSL_IRQ_TIMER0_Handler+0x5a>
    406a:	2003      	movs	r0, #3
    406c:	f000 faec 	bl	4648 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    4070:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    4074:	2003      	movs	r0, #3
    4076:	f7fe fdf1 	bl	2c5c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    407a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    407e:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    4082:	d00a      	beq.n	409a <MPSL_IRQ_TIMER0_Handler+0x7a>
    4084:	4823      	ldr	r0, [pc, #140]	; (4114 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    4086:	6800      	ldr	r0, [r0, #0]
    4088:	b138      	cbz	r0, 409a <MPSL_IRQ_TIMER0_Handler+0x7a>
    408a:	2002      	movs	r0, #2
    408c:	f000 fadc 	bl	4648 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    4090:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    4094:	2002      	movs	r0, #2
    4096:	f7fe fde1 	bl	2c5c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    409a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    409e:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    40a2:	d00a      	beq.n	40ba <MPSL_IRQ_TIMER0_Handler+0x9a>
    40a4:	481c      	ldr	r0, [pc, #112]	; (4118 <MPSL_IRQ_TIMER0_Handler+0xf8>)
    40a6:	6800      	ldr	r0, [r0, #0]
    40a8:	b138      	cbz	r0, 40ba <MPSL_IRQ_TIMER0_Handler+0x9a>
    40aa:	2001      	movs	r0, #1
    40ac:	f000 facc 	bl	4648 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    40b0:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    40b4:	2001      	movs	r0, #1
    40b6:	f7fe fdd1 	bl	2c5c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    40ba:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    40be:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    40c2:	bf08      	it	eq
    40c4:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    40c8:	4814      	ldr	r0, [pc, #80]	; (411c <MPSL_IRQ_TIMER0_Handler+0xfc>)
    40ca:	6800      	ldr	r0, [r0, #0]
    40cc:	2800      	cmp	r0, #0
    40ce:	bf08      	it	eq
    40d0:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    40d4:	2000      	movs	r0, #0
    40d6:	f000 fab7 	bl	4648 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    40da:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    40de:	2004      	movs	r0, #4
    40e0:	7028      	strb	r0, [r5, #0]
    40e2:	f8c5 8004 	str.w	r8, [r5, #4]
    40e6:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    40ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    40ee:	2000      	movs	r0, #0
    40f0:	f7fe bdb4 	b.w	2c5c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    40f4:	f240 419f 	movw	r1, #1183	; 0x49f
    40f8:	206c      	movs	r0, #108	; 0x6c
    40fa:	f000 ff61 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    40fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4102:	2007      	movs	r0, #7
    4104:	f7fe bdaa 	b.w	2c5c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    4108:	20000048 	.word	0x20000048
    410c:	40008000 	.word	0x40008000
    4110:	4000814c 	.word	0x4000814c
    4114:	40008148 	.word	0x40008148
    4118:	40008144 	.word	0x40008144
    411c:	40008140 	.word	0x40008140
    4120:	2201      	movs	r2, #1
    4122:	0211      	lsls	r1, r2, #8
    4124:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    4128:	2000      	movs	r0, #0
    412a:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    412e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    4132:	f3bf 8f4f 	dsb	sy
    4136:	f3bf 8f6f 	isb	sy
    413a:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    413e:	490e      	ldr	r1, [pc, #56]	; (4178 <MPSL_IRQ_TIMER0_Handler+0x158>)
    4140:	f841 2f04 	str.w	r2, [r1, #4]!
    4144:	1e43      	subs	r3, r0, #1
    4146:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    414a:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    414e:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    4152:	4b0a      	ldr	r3, [pc, #40]	; (417c <MPSL_IRQ_TIMER0_Handler+0x15c>)
    4154:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    4158:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    415c:	1d1b      	adds	r3, r3, #4
    415e:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    4162:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    4166:	1d1b      	adds	r3, r3, #4
    4168:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    416c:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    4170:	60ca      	str	r2, [r1, #12]
    4172:	4903      	ldr	r1, [pc, #12]	; (4180 <MPSL_IRQ_TIMER0_Handler+0x160>)
    4174:	7048      	strb	r0, [r1, #1]
    4176:	4770      	bx	lr
    4178:	40008000 	.word	0x40008000
    417c:	40008004 	.word	0x40008004
    4180:	20000048 	.word	0x20000048

00004184 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    4184:	4801      	ldr	r0, [pc, #4]	; (418c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    4186:	6800      	ldr	r0, [r0, #0]
    4188:	4770      	bx	lr
    418a:	0000      	.short	0x0000
    418c:	4000b504 	.word	0x4000b504

00004190 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>:
    4190:	b430      	push	{r4, r5}
    4192:	f3ef 8c10 	mrs	ip, PRIMASK
    4196:	b672      	cpsid	i
    4198:	2500      	movs	r5, #0
    419a:	4b0b      	ldr	r3, [pc, #44]	; (41c8 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x38>)
    419c:	4a0b      	ldr	r2, [pc, #44]	; (41cc <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x3c>)
    419e:	bf00      	nop
    41a0:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    41a4:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
    41a8:	b12c      	cbz	r4, 41b6 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x26>
    41aa:	68d1      	ldr	r1, [r2, #12]
    41ac:	1c49      	adds	r1, r1, #1
    41ae:	60d1      	str	r1, [r2, #12]
    41b0:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
    41b4:	e7f4      	b.n	41a0 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x10>
    41b6:	68d2      	ldr	r2, [r2, #12]
    41b8:	f1bc 0f00 	cmp.w	ip, #0
    41bc:	d100      	bne.n	41c0 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x30>
    41be:	b662      	cpsie	i
    41c0:	e9c0 1200 	strd	r1, r2, [r0]
    41c4:	bc30      	pop	{r4, r5}
    41c6:	4770      	bx	lr
    41c8:	4000b000 	.word	0x4000b000
    41cc:	20000048 	.word	0x20000048

000041d0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    41d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    41d4:	4e46      	ldr	r6, [pc, #280]	; (42f0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x120>)
    41d6:	4605      	mov	r5, r0
    41d8:	1eb7      	subs	r7, r6, #2
    41da:	7833      	ldrb	r3, [r6, #0]
    41dc:	68b9      	ldr	r1, [r7, #8]
    41de:	2b01      	cmp	r3, #1
    41e0:	bf04      	itt	eq
    41e2:	42a9      	cmpeq	r1, r5
    41e4:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    41e8:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    41ec:	4a41      	ldr	r2, [pc, #260]	; (42f4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x124>)
    41ee:	6010      	str	r0, [r2, #0]
    41f0:	4a42      	ldr	r2, [pc, #264]	; (42fc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x12c>)
    41f2:	4841      	ldr	r0, [pc, #260]	; (42f8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x128>)
    41f4:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    41f8:	f102 0c04 	add.w	ip, r2, #4
    41fc:	f04f 0400 	mov.w	r4, #0
    4200:	2b00      	cmp	r3, #0
    4202:	d062      	beq.n	42ca <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfa>
    4204:	483e      	ldr	r0, [pc, #248]	; (4300 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x130>)
    4206:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    420a:	f8cc 4540 	str.w	r4, [ip, #1344]	; 0x540
    420e:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    4212:	bf00      	nop
    4214:	f8d2 0148 	ldr.w	r0, [r2, #328]	; 0x148
    4218:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    421c:	f04f 0801 	mov.w	r8, #1
    4220:	2800      	cmp	r0, #0
    4222:	bf01      	itttt	eq
    4224:	f8d2 0104 	ldreq.w	r0, [r2, #260]	; 0x104
    4228:	2800      	cmpeq	r0, #0
    422a:	f44f 6000 	moveq.w	r0, #2048	; 0x800
    422e:	f8c9 0280 	streq.w	r0, [r9, #640]	; 0x280
    4232:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    4236:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    423a:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    423e:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    4242:	4830      	ldr	r0, [pc, #192]	; (4304 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x134>)
    4244:	f8d0 c000 	ldr.w	ip, [r0]
    4248:	eba5 0c0c 	sub.w	ip, r5, ip
    424c:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    4250:	f1bc 0f02 	cmp.w	ip, #2
    4254:	d344      	bcc.n	42e0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x110>
    4256:	f5bc 0f00 	cmp.w	ip, #8388608	; 0x800000
    425a:	d841      	bhi.n	42e0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x110>
    425c:	f8c2 5540 	str.w	r5, [r2, #1344]	; 0x540
    4260:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
    4264:	f8c2 c344 	str.w	ip, [r2, #836]	; 0x344
    4268:	b12b      	cbz	r3, 4276 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xa6>
    426a:	6802      	ldr	r2, [r0, #0]
    426c:	1a8a      	subs	r2, r1, r2
    426e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    4272:	2a02      	cmp	r2, #2
    4274:	d3f9      	bcc.n	426a <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x9a>
    4276:	f8c7 8004 	str.w	r8, [r7, #4]
    427a:	703c      	strb	r4, [r7, #0]
    427c:	f7ff ff50 	bl	4120 <MPSL_IRQ_TIMER0_Handler+0x100>
    4280:	4821      	ldr	r0, [pc, #132]	; (4308 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x138>)
    4282:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    4286:	f364 0101 	bfi	r1, r4, #0, #2
    428a:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    428e:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    4292:	2102      	movs	r1, #2
    4294:	f361 0201 	bfi	r2, r1, #0, #2
    4298:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    429c:	2104      	movs	r1, #4
    429e:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    42a2:	f8c0 800c 	str.w	r8, [r0, #12]
    42a6:	6879      	ldr	r1, [r7, #4]
    42a8:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    42ac:	1580      	asrs	r0, r0, #22
    42ae:	f8c9 0280 	str.w	r0, [r9, #640]	; 0x280
    42b2:	f8c9 0100 	str.w	r0, [r9, #256]	; 0x100
    42b6:	4915      	ldr	r1, [pc, #84]	; (430c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x13c>)
    42b8:	05c0      	lsls	r0, r0, #23
    42ba:	6008      	str	r0, [r1, #0]
    42bc:	2004      	movs	r0, #4
    42be:	60bd      	str	r5, [r7, #8]
    42c0:	7070      	strb	r0, [r6, #1]
    42c2:	f886 8000 	strb.w	r8, [r6]
    42c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    42ca:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    42ce:	f8c2 4540 	str.w	r4, [r2, #1344]	; 0x540
    42d2:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    42d6:	f8cc 4540 	str.w	r4, [ip, #1344]	; 0x540
    42da:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    42de:	e799      	b.n	4214 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x44>
    42e0:	2000      	movs	r0, #0
    42e2:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    42e6:	f240 2193 	movw	r1, #659	; 0x293
    42ea:	206c      	movs	r0, #108	; 0x6c
    42ec:	f000 fe68 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    42f0:	2000004a 	.word	0x2000004a
    42f4:	4001f508 	.word	0x4001f508
    42f8:	fffbfffd 	.word	0xfffbfffd
    42fc:	4000b000 	.word	0x4000b000
    4300:	fffafffd 	.word	0xfffafffd
    4304:	4000b504 	.word	0x4000b504
    4308:	40008000 	.word	0x40008000
    430c:	4001f504 	.word	0x4001f504

00004310 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    4310:	b570      	push	{r4, r5, r6, lr}
    4312:	4c2a      	ldr	r4, [pc, #168]	; (43bc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xac>)
    4314:	68a1      	ldr	r1, [r4, #8]
    4316:	4281      	cmp	r1, r0
    4318:	bf14      	ite	ne
    431a:	2201      	movne	r2, #1
    431c:	2200      	moveq	r2, #0
    431e:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 43c0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb0>
    4322:	f89c 5000 	ldrb.w	r5, [ip]
    4326:	2d02      	cmp	r5, #2
    4328:	d002      	beq.n	4330 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x20>
    432a:	2a00      	cmp	r2, #0
    432c:	d034      	beq.n	4398 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x88>
    432e:	e002      	b.n	4336 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x26>
    4330:	2a00      	cmp	r2, #0
    4332:	bf08      	it	eq
    4334:	bd70      	popeq	{r4, r5, r6, pc}
    4336:	7862      	ldrb	r2, [r4, #1]
    4338:	b39a      	cbz	r2, 43a2 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x92>
    433a:	4b22      	ldr	r3, [pc, #136]	; (43c4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    433c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4340:	601a      	str	r2, [r3, #0]
    4342:	4b21      	ldr	r3, [pc, #132]	; (43c8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>)
    4344:	1392      	asrs	r2, r2, #14
    4346:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    434a:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
    434e:	2200      	movs	r2, #0
    4350:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    4354:	4a1d      	ldr	r2, [pc, #116]	; (43cc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    4356:	6816      	ldr	r6, [r2, #0]
    4358:	1b86      	subs	r6, r0, r6
    435a:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
    435e:	2e02      	cmp	r6, #2
    4360:	d324      	bcc.n	43ac <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    4362:	f5b6 0f00 	cmp.w	r6, #8388608	; 0x800000
    4366:	d821      	bhi.n	43ac <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    4368:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    436c:	f44f 3680 	mov.w	r6, #65536	; 0x10000
    4370:	f8c3 6344 	str.w	r6, [r3, #836]	; 0x344
    4374:	b12d      	cbz	r5, 4382 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x72>
    4376:	6813      	ldr	r3, [r2, #0]
    4378:	1acb      	subs	r3, r1, r3
    437a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    437e:	2b02      	cmp	r3, #2
    4380:	d3f9      	bcc.n	4376 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x66>
    4382:	4b13      	ldr	r3, [pc, #76]	; (43d0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    4384:	2102      	movs	r1, #2
    4386:	074a      	lsls	r2, r1, #29
    4388:	601a      	str	r2, [r3, #0]
    438a:	60a0      	str	r0, [r4, #8]
    438c:	2004      	movs	r0, #4
    438e:	f88c 0001 	strb.w	r0, [ip, #1]
    4392:	f88c 1000 	strb.w	r1, [ip]
    4396:	bd70      	pop	{r4, r5, r6, pc}
    4398:	f240 21a1 	movw	r1, #673	; 0x2a1
    439c:	206c      	movs	r0, #108	; 0x6c
    439e:	f000 fe0f 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    43a2:	f240 21a5 	movw	r1, #677	; 0x2a5
    43a6:	206c      	movs	r0, #108	; 0x6c
    43a8:	f000 fe0a 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    43ac:	2000      	movs	r0, #0
    43ae:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    43b2:	f240 21b1 	movw	r1, #689	; 0x2b1
    43b6:	206c      	movs	r0, #108	; 0x6c
    43b8:	f000 fe02 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    43bc:	20000048 	.word	0x20000048
    43c0:	2000004a 	.word	0x2000004a
    43c4:	4001f508 	.word	0x4001f508
    43c8:	4000b000 	.word	0x4000b000
    43cc:	4000b504 	.word	0x4000b504
    43d0:	4001f504 	.word	0x4001f504

000043d4 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    43d4:	4801      	ldr	r0, [pc, #4]	; (43dc <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    43d6:	6880      	ldr	r0, [r0, #8]
    43d8:	4770      	bx	lr
    43da:	0000      	.short	0x0000
    43dc:	20000048 	.word	0x20000048

000043e0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    43e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    43e4:	4836      	ldr	r0, [pc, #216]	; (44c0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    43e6:	4a35      	ldr	r2, [pc, #212]	; (44bc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xdc>)
    43e8:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    43ec:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 44c4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>
    43f0:	1d03      	adds	r3, r0, #4
    43f2:	2100      	movs	r1, #0
    43f4:	f89c 4000 	ldrb.w	r4, [ip]
    43f8:	b184      	cbz	r4, 441c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x3c>
    43fa:	4a33      	ldr	r2, [pc, #204]	; (44c8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    43fc:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    4400:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    4404:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    4408:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    440c:	2301      	movs	r3, #1
    440e:	2a00      	cmp	r2, #0
    4410:	bf04      	itt	eq
    4412:	f8d0 0104 	ldreq.w	r0, [r0, #260]	; 0x104
    4416:	2800      	cmpeq	r0, #0
    4418:	d111      	bne.n	443e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x5e>
    441a:	e00a      	b.n	4432 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x52>
    441c:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    4420:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    4424:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    4428:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    442c:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    4430:	e7ea      	b.n	4408 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x28>
    4432:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    4436:	f44f 6000 	mov.w	r0, #2048	; 0x800
    443a:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
    443e:	2c02      	cmp	r4, #2
    4440:	d004      	beq.n	444c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x6c>
    4442:	f240 21bd 	movw	r1, #701	; 0x2bd
    4446:	206c      	movs	r0, #108	; 0x6c
    4448:	f000 fdba 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    444c:	4e1f      	ldr	r6, [pc, #124]	; (44cc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    444e:	6830      	ldr	r0, [r6, #0]
    4450:	4c1f      	ldr	r4, [pc, #124]	; (44d0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    4452:	1cc0      	adds	r0, r0, #3
    4454:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    4458:	68a2      	ldr	r2, [r4, #8]
    445a:	4d1e      	ldr	r5, [pc, #120]	; (44d4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf4>)
    445c:	4290      	cmp	r0, r2
    445e:	d00b      	beq.n	4478 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    4460:	6837      	ldr	r7, [r6, #0]
    4462:	1bd7      	subs	r7, r2, r7
    4464:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    4468:	2f04      	cmp	r7, #4
    446a:	d305      	bcc.n	4478 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    446c:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
    4470:	d802      	bhi.n	4478 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    4472:	f7ff fead 	bl	41d0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    4476:	e01b      	b.n	44b0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    4478:	6830      	ldr	r0, [r6, #0]
    447a:	1a10      	subs	r0, r2, r0
    447c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    4480:	2802      	cmp	r0, #2
    4482:	d313      	bcc.n	44ac <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xcc>
    4484:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    4488:	d810      	bhi.n	44ac <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xcc>
    448a:	4a13      	ldr	r2, [pc, #76]	; (44d8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf8>)
    448c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    4490:	6010      	str	r0, [r2, #0]
    4492:	6063      	str	r3, [r4, #4]
    4494:	7021      	strb	r1, [r4, #0]
    4496:	606b      	str	r3, [r5, #4]
    4498:	60eb      	str	r3, [r5, #12]
    449a:	0040      	lsls	r0, r0, #1
    449c:	1f11      	subs	r1, r2, #4
    449e:	6008      	str	r0, [r1, #0]
    44a0:	2004      	movs	r0, #4
    44a2:	f88c 0001 	strb.w	r0, [ip, #1]
    44a6:	f88c 3000 	strb.w	r3, [ip]
    44aa:	e001      	b.n	44b0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    44ac:	6063      	str	r3, [r4, #4]
    44ae:	7021      	strb	r1, [r4, #0]
    44b0:	6860      	ldr	r0, [r4, #4]
    44b2:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    44b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    44ba:	0000      	.short	0x0000
    44bc:	fffbfffd 	.word	0xfffbfffd
    44c0:	4000b000 	.word	0x4000b000
    44c4:	2000004a 	.word	0x2000004a
    44c8:	fffafffd 	.word	0xfffafffd
    44cc:	4000b504 	.word	0x4000b504
    44d0:	20000048 	.word	0x20000048
    44d4:	40008000 	.word	0x40008000
    44d8:	4001f508 	.word	0x4001f508

000044dc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    44dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    44e0:	4a54      	ldr	r2, [pc, #336]	; (4634 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x158>)
    44e2:	2500      	movs	r5, #0
    44e4:	2401      	movs	r4, #1
    44e6:	f892 c000 	ldrb.w	ip, [r2]
    44ea:	7853      	ldrb	r3, [r2, #1]
    44ec:	f44f 76a0 	mov.w	r6, #320	; 0x140
    44f0:	2807      	cmp	r0, #7
    44f2:	d27d      	bcs.n	45f0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x114>
    44f4:	e8df f000 	tbb	[pc, r0]
    44f8:	04040404 	.word	0x04040404
    44fc:	00585858 	.word	0x00585858
    4500:	4a4d      	ldr	r2, [pc, #308]	; (4638 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x15c>)
    4502:	6897      	ldr	r7, [r2, #8]
    4504:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
    4508:	bf04      	itt	eq
    450a:	7852      	ldrbeq	r2, [r2, #1]
    450c:	2a00      	cmpeq	r2, #0
    450e:	d003      	beq.n	4518 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x3c>
    4510:	f1bc 0f02 	cmp.w	ip, #2
    4514:	d005      	beq.n	4522 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    4516:	e026      	b.n	4566 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8a>
    4518:	f240 314d 	movw	r1, #845	; 0x34d
    451c:	206c      	movs	r0, #108	; 0x6c
    451e:	f000 fd4f 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4522:	1f1a      	subs	r2, r3, #4
    4524:	b2d2      	uxtb	r2, r2
    4526:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    452a:	f102 4680 	add.w	r6, r2, #1073741824	; 0x40000000
    452e:	f506 4630 	add.w	r6, r6, #45056	; 0xb000
    4532:	2200      	movs	r2, #0
    4534:	f1bc 0f01 	cmp.w	ip, #1
    4538:	d003      	beq.n	4542 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x66>
    453a:	f1bc 0f02 	cmp.w	ip, #2
    453e:	d008      	beq.n	4552 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x76>
    4540:	e00e      	b.n	4560 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x84>
    4542:	2b04      	cmp	r3, #4
    4544:	bf24      	itt	cs
    4546:	6837      	ldrcs	r7, [r6, #0]
    4548:	2f00      	cmpcs	r7, #0
    454a:	bf08      	it	eq
    454c:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
    4550:	e006      	b.n	4560 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x84>
    4552:	2b04      	cmp	r3, #4
    4554:	bf24      	itt	cs
    4556:	6837      	ldrcs	r7, [r6, #0]
    4558:	2f00      	cmpcs	r7, #0
    455a:	bf08      	it	eq
    455c:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
    4560:	f012 4f80 	tst.w	r2, #1073741824	; 0x40000000
    4564:	d1e5      	bne.n	4532 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x56>
    4566:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 463c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x160>
    456a:	f100 0210 	add.w	r2, r0, #16
    456e:	fa04 f202 	lsl.w	r2, r4, r2
    4572:	f8cc 2308 	str.w	r2, [ip, #776]	; 0x308
    4576:	f04f 0340 	mov.w	r3, #64	; 0x40
    457a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    457e:	b2db      	uxtb	r3, r3
    4580:	4463      	add	r3, ip
    4582:	601c      	str	r4, [r3, #0]
    4584:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    4588:	f8d0 3540 	ldr.w	r3, [r0, #1344]	; 0x540
    458c:	eba1 0303 	sub.w	r3, r1, r3
    4590:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    4594:	2b03      	cmp	r3, #3
    4596:	bf26      	itte	cs
    4598:	f8c0 1540 	strcs.w	r1, [r0, #1344]	; 0x540
    459c:	f8cc 2304 	strcs.w	r2, [ip, #772]	; 0x304
    45a0:	f8c0 5540 	strcc.w	r5, [r0, #1344]	; 0x540
    45a4:	d237      	bcs.n	4616 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x13a>
    45a6:	e03c      	b.n	4622 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x146>
    45a8:	f1bc 0f00 	cmp.w	ip, #0
    45ac:	d006      	beq.n	45bc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    45ae:	4283      	cmp	r3, r0
    45b0:	d104      	bne.n	45bc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    45b2:	f240 316d 	movw	r1, #877	; 0x36d
    45b6:	206c      	movs	r0, #108	; 0x6c
    45b8:	f000 fd02 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    45bc:	1f02      	subs	r2, r0, #4
    45be:	b2d3      	uxtb	r3, r2
    45c0:	2b03      	cmp	r3, #3
    45c2:	d304      	bcc.n	45ce <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf2>
    45c4:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    45c8:	206c      	movs	r0, #108	; 0x6c
    45ca:	f000 fcf9 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    45ce:	f8df c070 	ldr.w	ip, [pc, #112]	; 4640 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x164>
    45d2:	f103 0210 	add.w	r2, r3, #16
    45d6:	fa04 f202 	lsl.w	r2, r4, r2
    45da:	f8cc 2308 	str.w	r2, [ip, #776]	; 0x308
    45de:	f8cc 2348 	str.w	r2, [ip, #840]	; 0x348
    45e2:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    45e6:	f84c 5003 	str.w	r5, [ip, r3]
    45ea:	4b16      	ldr	r3, [pc, #88]	; (4644 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>)
    45ec:	681b      	ldr	r3, [r3, #0]
    45ee:	e000      	b.n	45f2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
    45f0:	e01a      	b.n	4628 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x14c>
    45f2:	1f00      	subs	r0, r0, #4
    45f4:	1acb      	subs	r3, r1, r3
    45f6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    45fa:	b2c0      	uxtb	r0, r0
    45fc:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    4600:	2b02      	cmp	r3, #2
    4602:	d30b      	bcc.n	461c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x140>
    4604:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    4608:	d808      	bhi.n	461c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x140>
    460a:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    460e:	f8cc 2304 	str.w	r2, [ip, #772]	; 0x304
    4612:	f8cc 2344 	str.w	r2, [ip, #836]	; 0x344
    4616:	2001      	movs	r0, #1
    4618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    461c:	2100      	movs	r1, #0
    461e:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    4622:	2000      	movs	r0, #0
    4624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4628:	f240 3171 	movw	r1, #881	; 0x371
    462c:	206c      	movs	r0, #108	; 0x6c
    462e:	f000 fcc7 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4632:	0000      	.short	0x0000
    4634:	2000004a 	.word	0x2000004a
    4638:	20000048 	.word	0x20000048
    463c:	40008000 	.word	0x40008000
    4640:	4000b000 	.word	0x4000b000
    4644:	4000b504 	.word	0x4000b504

00004648 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    4648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    464c:	2601      	movs	r6, #1
    464e:	2700      	movs	r7, #0
    4650:	f44f 78a0 	mov.w	r8, #320	; 0x140
    4654:	2807      	cmp	r0, #7
    4656:	d251      	bcs.n	46fc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>
    4658:	e8df f000 	tbb	[pc, r0]
    465c:	04040404 	.word	0x04040404
    4660:	00191919 	.word	0x00191919
    4664:	f100 0110 	add.w	r1, r0, #16
    4668:	fa06 f201 	lsl.w	r2, r6, r1
    466c:	4926      	ldr	r1, [pc, #152]	; (4708 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    466e:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    4672:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    4676:	2200      	movs	r2, #0
    4678:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    467c:	eb08 0280 	add.w	r2, r8, r0, lsl #2
    4680:	508f      	str	r7, [r1, r2]
    4682:	4922      	ldr	r1, [pc, #136]	; (470c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    4684:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    4688:	9000      	str	r0, [sp, #0]
    468a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    468e:	4d20      	ldr	r5, [pc, #128]	; (4710 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    4690:	1f01      	subs	r1, r0, #4
    4692:	b2cc      	uxtb	r4, r1
    4694:	7829      	ldrb	r1, [r5, #0]
    4696:	b179      	cbz	r1, 46b8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    4698:	786a      	ldrb	r2, [r5, #1]
    469a:	4282      	cmp	r2, r0
    469c:	d10c      	bne.n	46b8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    469e:	4a1d      	ldr	r2, [pc, #116]	; (4714 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    46a0:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    46a4:	6010      	str	r0, [r2, #0]
    46a6:	2901      	cmp	r1, #1
    46a8:	bf08      	it	eq
    46aa:	f7ff fd39 	bleq	4120 <MPSL_IRQ_TIMER0_Handler+0x100>
    46ae:	702f      	strb	r7, [r5, #0]
    46b0:	4919      	ldr	r1, [pc, #100]	; (4718 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd0>)
    46b2:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    46b6:	6088      	str	r0, [r1, #8]
    46b8:	4918      	ldr	r1, [pc, #96]	; (471c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd4>)
    46ba:	f104 0010 	add.w	r0, r4, #16
    46be:	fa06 f000 	lsl.w	r0, r6, r0
    46c2:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    46c6:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
    46ca:	00a0      	lsls	r0, r4, #2
    46cc:	4408      	add	r0, r1
    46ce:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    46d2:	4a13      	ldr	r2, [pc, #76]	; (4720 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd8>)
    46d4:	6812      	ldr	r2, [r2, #0]
    46d6:	1a80      	subs	r0, r0, r2
    46d8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    46dc:	2802      	cmp	r0, #2
    46de:	d307      	bcc.n	46f0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa8>
    46e0:	eb01 0284 	add.w	r2, r1, r4, lsl #2
    46e4:	2000      	movs	r0, #0
    46e6:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    46ea:	eb08 0084 	add.w	r0, r8, r4, lsl #2
    46ee:	500f      	str	r7, [r1, r0]
    46f0:	480c      	ldr	r0, [pc, #48]	; (4724 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xdc>)
    46f2:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    46f6:	9000      	str	r0, [sp, #0]
    46f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    46fc:	f240 31f5 	movw	r1, #1013	; 0x3f5
    4700:	206c      	movs	r0, #108	; 0x6c
    4702:	f000 fc5d 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4706:	0000      	.short	0x0000
    4708:	40008000 	.word	0x40008000
    470c:	40008140 	.word	0x40008140
    4710:	2000004a 	.word	0x2000004a
    4714:	4001f508 	.word	0x4001f508
    4718:	20000048 	.word	0x20000048
    471c:	4000b000 	.word	0x4000b000
    4720:	4000b504 	.word	0x4000b504
    4724:	4000b140 	.word	0x4000b140

00004728 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    4728:	4825      	ldr	r0, [pc, #148]	; (47c0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x98>)
    472a:	4a24      	ldr	r2, [pc, #144]	; (47bc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x94>)
    472c:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    4730:	4924      	ldr	r1, [pc, #144]	; (47c4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x9c>)
    4732:	1d03      	adds	r3, r0, #4
    4734:	f891 c000 	ldrb.w	ip, [r1]
    4738:	2100      	movs	r1, #0
    473a:	f1bc 0f00 	cmp.w	ip, #0
    473e:	d010      	beq.n	4762 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x3a>
    4740:	4a21      	ldr	r2, [pc, #132]	; (47c8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0xa0>)
    4742:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    4746:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    474a:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    474e:	bf00      	nop
    4750:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    4754:	2a00      	cmp	r2, #0
    4756:	bf04      	itt	eq
    4758:	f8d0 0104 	ldreq.w	r0, [r0, #260]	; 0x104
    475c:	2800      	cmpeq	r0, #0
    475e:	d111      	bne.n	4784 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x5c>
    4760:	e00a      	b.n	4778 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x50>
    4762:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    4766:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    476a:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    476e:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    4772:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    4776:	e7eb      	b.n	4750 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x28>
    4778:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    477c:	f44f 6000 	mov.w	r0, #2048	; 0x800
    4780:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
    4784:	4811      	ldr	r0, [pc, #68]	; (47cc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0xa4>)
    4786:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    478a:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    478e:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    4792:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    4796:	f100 0204 	add.w	r2, r0, #4
    479a:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    479e:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    47a2:	f102 0204 	add.w	r2, r2, #4
    47a6:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    47aa:	f8c0 1148 	str.w	r1, [r0, #328]	; 0x148
    47ae:	f102 0204 	add.w	r2, r2, #4
    47b2:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    47b6:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
    47ba:	4770      	bx	lr
    47bc:	fffbfffd 	.word	0xfffbfffd
    47c0:	4000b000 	.word	0x4000b000
    47c4:	2000004a 	.word	0x2000004a
    47c8:	fffafffd 	.word	0xfffafffd
    47cc:	40008000 	.word	0x40008000

000047d0 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>:
    47d0:	b510      	push	{r4, lr}
    47d2:	2807      	cmp	r0, #7
    47d4:	d20d      	bcs.n	47f2 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x22>
    47d6:	e8df f000 	tbb	[pc, r0]
    47da:	0404      	.short	0x0404
    47dc:	06060404 	.word	0x06060404
    47e0:	0006      	.short	0x0006
    47e2:	4906      	ldr	r1, [pc, #24]	; (47fc <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x2c>)
    47e4:	e002      	b.n	47ec <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x1c>
    47e6:	1f00      	subs	r0, r0, #4
    47e8:	4905      	ldr	r1, [pc, #20]	; (4800 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x30>)
    47ea:	b2c0      	uxtb	r0, r0
    47ec:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    47f0:	bd10      	pop	{r4, pc}
    47f2:	f240 3195 	movw	r1, #917	; 0x395
    47f6:	206c      	movs	r0, #108	; 0x6c
    47f8:	f000 fbe2 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    47fc:	40008140 	.word	0x40008140
    4800:	4000b140 	.word	0x4000b140

00004804 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    4804:	b570      	push	{r4, r5, r6, lr}
    4806:	481f      	ldr	r0, [pc, #124]	; (4884 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x80>)
    4808:	2400      	movs	r4, #0
    480a:	2104      	movs	r1, #4
    480c:	7004      	strb	r4, [r0, #0]
    480e:	1e80      	subs	r0, r0, #2
    4810:	7001      	strb	r1, [r0, #0]
    4812:	0589      	lsls	r1, r1, #22
    4814:	60c4      	str	r4, [r0, #12]
    4816:	6081      	str	r1, [r0, #8]
    4818:	f7ff fc82 	bl	4120 <MPSL_IRQ_TIMER0_Handler+0x100>
    481c:	2501      	movs	r5, #1
    481e:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    4822:	02eb      	lsls	r3, r5, #11
    4824:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    4828:	f3bf 8f4f 	dsb	sy
    482c:	f3bf 8f6f 	isb	sy
    4830:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    4834:	4814      	ldr	r0, [pc, #80]	; (4888 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x84>)
    4836:	6045      	str	r5, [r0, #4]
    4838:	6085      	str	r5, [r0, #8]
    483a:	4914      	ldr	r1, [pc, #80]	; (488c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x88>)
    483c:	680a      	ldr	r2, [r1, #0]
    483e:	2a00      	cmp	r2, #0
    4840:	d1fc      	bne.n	483c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x38>
    4842:	1e51      	subs	r1, r2, #1
    4844:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    4848:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    484c:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    4850:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    4854:	490e      	ldr	r1, [pc, #56]	; (4890 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x8c>)
    4856:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    485a:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    485e:	1d09      	adds	r1, r1, #4
    4860:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    4864:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    4868:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
    486c:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    4870:	6005      	str	r5, [r0, #0]
    4872:	f44f 7182 	mov.w	r1, #260	; 0x104
    4876:	f8c0 1344 	str.w	r1, [r0, #836]	; 0x344
    487a:	2102      	movs	r1, #2
    487c:	f8c0 1304 	str.w	r1, [r0, #772]	; 0x304
    4880:	bd70      	pop	{r4, r5, r6, pc}
    4882:	0000      	.short	0x0000
    4884:	2000004a 	.word	0x2000004a
    4888:	4000b000 	.word	0x4000b000
    488c:	4000b504 	.word	0x4000b504
    4890:	4000b004 	.word	0x4000b004

00004894 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>:
    4894:	4808      	ldr	r0, [pc, #32]	; (48b8 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ+0x24>)
    4896:	f990 0000 	ldrsb.w	r0, [r0]
    489a:	2800      	cmp	r0, #0
    489c:	bfb8      	it	lt
    489e:	4770      	bxlt	lr
    48a0:	f000 011f 	and.w	r1, r0, #31
    48a4:	2201      	movs	r2, #1
    48a6:	fa02 f101 	lsl.w	r1, r2, r1
    48aa:	0940      	lsrs	r0, r0, #5
    48ac:	0080      	lsls	r0, r0, #2
    48ae:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    48b2:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    48b6:	4770      	bx	lr
    48b8:	20000328 	.word	0x20000328

000048bc <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>:
    48bc:	4803      	ldr	r0, [pc, #12]	; (48cc <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI+0x10>)
    48be:	7800      	ldrb	r0, [r0, #0]
    48c0:	2803      	cmp	r0, #3
    48c2:	bf0c      	ite	eq
    48c4:	2001      	moveq	r0, #1
    48c6:	2000      	movne	r0, #0
    48c8:	4770      	bx	lr
    48ca:	0000      	.short	0x0000
    48cc:	20000314 	.word	0x20000314

000048d0 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>:
    48d0:	4801      	ldr	r0, [pc, #4]	; (48d8 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII+0x8>)
    48d2:	8840      	ldrh	r0, [r0, #2]
    48d4:	4770      	bx	lr
    48d6:	0000      	.short	0x0000
    48d8:	20000314 	.word	0x20000314

000048dc <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>:
    48dc:	4803      	ldr	r0, [pc, #12]	; (48ec <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI+0x10>)
    48de:	7800      	ldrb	r0, [r0, #0]
    48e0:	2802      	cmp	r0, #2
    48e2:	bf16      	itet	ne
    48e4:	2803      	cmpne	r0, #3
    48e6:	2001      	moveq	r0, #1
    48e8:	2000      	movne	r0, #0
    48ea:	4770      	bx	lr
    48ec:	20000314 	.word	0x20000314

000048f0 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>:
    48f0:	4802      	ldr	r0, [pc, #8]	; (48fc <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY+0xc>)
    48f2:	2100      	movs	r1, #0
    48f4:	7001      	strb	r1, [r0, #0]
    48f6:	8041      	strh	r1, [r0, #2]
    48f8:	4770      	bx	lr
    48fa:	0000      	.short	0x0000
    48fc:	20000314 	.word	0x20000314

00004900 <MPSL_IRQ_CLOCK_Handler>:
    4900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4904:	4c16      	ldr	r4, [pc, #88]	; (4960 <MPSL_IRQ_CLOCK_Handler+0x60>)
    4906:	7a60      	ldrb	r0, [r4, #9]
    4908:	2800      	cmp	r0, #0
    490a:	d027      	beq.n	495c <MPSL_IRQ_CLOCK_Handler+0x5c>
    490c:	f44f 7180 	mov.w	r1, #256	; 0x100
    4910:	058d      	lsls	r5, r1, #22
    4912:	4628      	mov	r0, r5
    4914:	f008 fe9d 	bl	d652 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    4918:	4680      	mov	r8, r0
    491a:	f44f 7182 	mov.w	r1, #260	; 0x104
    491e:	4628      	mov	r0, r5
    4920:	f008 fe97 	bl	d652 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    4924:	2600      	movs	r6, #0
    4926:	4607      	mov	r7, r0
    4928:	f1b8 0f00 	cmp.w	r8, #0
    492c:	d009      	beq.n	4942 <MPSL_IRQ_CLOCK_Handler+0x42>
    492e:	2001      	movs	r0, #1
    4930:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    4934:	7920      	ldrb	r0, [r4, #4]
    4936:	b120      	cbz	r0, 4942 <MPSL_IRQ_CLOCK_Handler+0x42>
    4938:	7126      	strb	r6, [r4, #4]
    493a:	69e0      	ldr	r0, [r4, #28]
    493c:	b108      	cbz	r0, 4942 <MPSL_IRQ_CLOCK_Handler+0x42>
    493e:	4780      	blx	r0
    4940:	61e6      	str	r6, [r4, #28]
    4942:	b137      	cbz	r7, 4952 <MPSL_IRQ_CLOCK_Handler+0x52>
    4944:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    4948:	2002      	movs	r0, #2
    494a:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    494e:	f000 fa6b 	bl	4e28 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    4952:	4640      	mov	r0, r8
    4954:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4958:	f000 b858 	b.w	4a0c <MPSL_IRQ_CLOCK_Handler+0x10c>
    495c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4960:	20000058 	.word	0x20000058
    4964:	b510      	push	{r4, lr}
    4966:	f008 ff1e 	bl	d7a6 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    496a:	b930      	cbnz	r0, 497a <MPSL_IRQ_CLOCK_Handler+0x7a>
    496c:	f008 ff3c 	bl	d7e8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4970:	b918      	cbnz	r0, 497a <MPSL_IRQ_CLOCK_Handler+0x7a>
    4972:	f008 ff6f 	bl	d854 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    4976:	2800      	cmp	r0, #0
    4978:	d002      	beq.n	4980 <MPSL_IRQ_CLOCK_Handler+0x80>
    497a:	4902      	ldr	r1, [pc, #8]	; (4984 <MPSL_IRQ_CLOCK_Handler+0x84>)
    497c:	2002      	movs	r0, #2
    497e:	6008      	str	r0, [r1, #0]
    4980:	bd10      	pop	{r4, pc}
    4982:	0000      	.short	0x0000
    4984:	40000c34 	.word	0x40000c34
    4988:	b570      	push	{r4, r5, r6, lr}
    498a:	f000 f991 	bl	4cb0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    498e:	f000 fa9f 	bl	4ed0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    4992:	4c09      	ldr	r4, [pc, #36]	; (49b8 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    4994:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    4998:	b130      	cbz	r0, 49a8 <MPSL_IRQ_CLOCK_Handler+0xa8>
    499a:	f7ff ffe3 	bl	4964 <MPSL_IRQ_CLOCK_Handler+0x64>
    499e:	2001      	movs	r0, #1
    49a0:	6128      	str	r0, [r5, #16]
    49a2:	2004      	movs	r0, #4
    49a4:	72a0      	strb	r0, [r4, #10]
    49a6:	e004      	b.n	49b2 <MPSL_IRQ_CLOCK_Handler+0xb2>
    49a8:	2003      	movs	r0, #3
    49aa:	72a0      	strb	r0, [r4, #10]
    49ac:	2001      	movs	r0, #1
    49ae:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    49b2:	2000      	movs	r0, #0
    49b4:	71e0      	strb	r0, [r4, #7]
    49b6:	bd70      	pop	{r4, r5, r6, pc}
    49b8:	20000058 	.word	0x20000058
    49bc:	b570      	push	{r4, r5, r6, lr}
    49be:	4c12      	ldr	r4, [pc, #72]	; (4a08 <MPSL_IRQ_CLOCK_Handler+0x108>)
    49c0:	79a0      	ldrb	r0, [r4, #6]
    49c2:	b1e0      	cbz	r0, 49fe <MPSL_IRQ_CLOCK_Handler+0xfe>
    49c4:	79e1      	ldrb	r1, [r4, #7]
    49c6:	1e40      	subs	r0, r0, #1
    49c8:	4281      	cmp	r1, r0
    49ca:	da18      	bge.n	49fe <MPSL_IRQ_CLOCK_Handler+0xfe>
    49cc:	f000 fa80 	bl	4ed0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    49d0:	4605      	mov	r5, r0
    49d2:	f000 fb69 	bl	50a8 <mpsl_temperature_get>
    49d6:	79a1      	ldrb	r1, [r4, #6]
    49d8:	2901      	cmp	r1, #1
    49da:	d902      	bls.n	49e2 <MPSL_IRQ_CLOCK_Handler+0xe2>
    49dc:	79e1      	ldrb	r1, [r4, #7]
    49de:	1c49      	adds	r1, r1, #1
    49e0:	71e1      	strb	r1, [r4, #7]
    49e2:	b10d      	cbz	r5, 49e8 <MPSL_IRQ_CLOCK_Handler+0xe8>
    49e4:	6961      	ldr	r1, [r4, #20]
    49e6:	e000      	b.n	49ea <MPSL_IRQ_CLOCK_Handler+0xea>
    49e8:	6921      	ldr	r1, [r4, #16]
    49ea:	1a41      	subs	r1, r0, r1
    49ec:	2902      	cmp	r1, #2
    49ee:	da02      	bge.n	49f6 <MPSL_IRQ_CLOCK_Handler+0xf6>
    49f0:	f111 0f02 	cmn.w	r1, #2
    49f4:	dc07      	bgt.n	4a06 <MPSL_IRQ_CLOCK_Handler+0x106>
    49f6:	b10d      	cbz	r5, 49fc <MPSL_IRQ_CLOCK_Handler+0xfc>
    49f8:	6160      	str	r0, [r4, #20]
    49fa:	e000      	b.n	49fe <MPSL_IRQ_CLOCK_Handler+0xfe>
    49fc:	6120      	str	r0, [r4, #16]
    49fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4a02:	f7ff bfc1 	b.w	4988 <MPSL_IRQ_CLOCK_Handler+0x88>
    4a06:	bd70      	pop	{r4, r5, r6, pc}
    4a08:	20000058 	.word	0x20000058
    4a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4a10:	4606      	mov	r6, r0
    4a12:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    4a16:	f44f 7186 	mov.w	r1, #268	; 0x10c
    4a1a:	4628      	mov	r0, r5
    4a1c:	f008 fe19 	bl	d652 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    4a20:	4680      	mov	r8, r0
    4a22:	f44f 7188 	mov.w	r1, #272	; 0x110
    4a26:	4628      	mov	r0, r5
    4a28:	f008 fe13 	bl	d652 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    4a2c:	4c27      	ldr	r4, [pc, #156]	; (4acc <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    4a2e:	4682      	mov	sl, r0
    4a30:	7827      	ldrb	r7, [r4, #0]
    4a32:	f104 0008 	add.w	r0, r4, #8
    4a36:	f008 fe80 	bl	d73a <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4a3a:	b110      	cbz	r0, 4a42 <MPSL_IRQ_CLOCK_Handler+0x142>
    4a3c:	f240 11b9 	movw	r1, #441	; 0x1b9
    4a40:	e016      	b.n	4a70 <MPSL_IRQ_CLOCK_Handler+0x170>
    4a42:	f04f 0901 	mov.w	r9, #1
    4a46:	b146      	cbz	r6, 4a5a <MPSL_IRQ_CLOCK_Handler+0x15a>
    4a48:	7aa0      	ldrb	r0, [r4, #10]
    4a4a:	2803      	cmp	r0, #3
    4a4c:	d105      	bne.n	4a5a <MPSL_IRQ_CLOCK_Handler+0x15a>
    4a4e:	2004      	movs	r0, #4
    4a50:	72a0      	strb	r0, [r4, #10]
    4a52:	f7ff ff87 	bl	4964 <MPSL_IRQ_CLOCK_Handler+0x64>
    4a56:	f8c5 9010 	str.w	r9, [r5, #16]
    4a5a:	2600      	movs	r6, #0
    4a5c:	f1b8 0f00 	cmp.w	r8, #0
    4a60:	d018      	beq.n	4a94 <MPSL_IRQ_CLOCK_Handler+0x194>
    4a62:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    4a66:	7aa0      	ldrb	r0, [r4, #10]
    4a68:	2804      	cmp	r0, #4
    4a6a:	d004      	beq.n	4a76 <MPSL_IRQ_CLOCK_Handler+0x176>
    4a6c:	f240 11cb 	movw	r1, #459	; 0x1cb
    4a70:	206d      	movs	r0, #109	; 0x6d
    4a72:	f000 faa5 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4a76:	f008 fe96 	bl	d7a6 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    4a7a:	b928      	cbnz	r0, 4a88 <MPSL_IRQ_CLOCK_Handler+0x188>
    4a7c:	f008 feb4 	bl	d7e8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4a80:	b910      	cbnz	r0, 4a88 <MPSL_IRQ_CLOCK_Handler+0x188>
    4a82:	f008 fee7 	bl	d854 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    4a86:	b108      	cbz	r0, 4a8c <MPSL_IRQ_CLOCK_Handler+0x18c>
    4a88:	4811      	ldr	r0, [pc, #68]	; (4ad0 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    4a8a:	6006      	str	r6, [r0, #0]
    4a8c:	2002      	movs	r0, #2
    4a8e:	72a0      	strb	r0, [r4, #10]
    4a90:	f000 f8f2 	bl	4c78 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    4a94:	f1ba 0f00 	cmp.w	sl, #0
    4a98:	d008      	beq.n	4aac <MPSL_IRQ_CLOCK_Handler+0x1ac>
    4a9a:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    4a9e:	7aa0      	ldrb	r0, [r4, #10]
    4aa0:	2802      	cmp	r0, #2
    4aa2:	d101      	bne.n	4aa8 <MPSL_IRQ_CLOCK_Handler+0x1a8>
    4aa4:	f7ff ff8a 	bl	49bc <MPSL_IRQ_CLOCK_Handler+0xbc>
    4aa8:	f8c5 9014 	str.w	r9, [r5, #20]
    4aac:	b13f      	cbz	r7, 4abe <MPSL_IRQ_CLOCK_Handler+0x1be>
    4aae:	7026      	strb	r6, [r4, #0]
    4ab0:	7aa0      	ldrb	r0, [r4, #10]
    4ab2:	2802      	cmp	r0, #2
    4ab4:	d101      	bne.n	4aba <MPSL_IRQ_CLOCK_Handler+0x1ba>
    4ab6:	f7ff ff67 	bl	4988 <MPSL_IRQ_CLOCK_Handler+0x88>
    4aba:	f000 f8dd 	bl	4c78 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    4abe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4ac2:	4802      	ldr	r0, [pc, #8]	; (4acc <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    4ac4:	3008      	adds	r0, #8
    4ac6:	f008 be4f 	b.w	d768 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    4aca:	0000      	.short	0x0000
    4acc:	20000058 	.word	0x20000058
    4ad0:	40000c34 	.word	0x40000c34
    4ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4ad8:	4c5f      	ldr	r4, [pc, #380]	; (4c58 <MPSL_IRQ_CLOCK_Handler+0x358>)
    4ada:	2700      	movs	r7, #0
    4adc:	4606      	mov	r6, r0
    4ade:	61a7      	str	r7, [r4, #24]
    4ae0:	7842      	ldrb	r2, [r0, #1]
    4ae2:	7881      	ldrb	r1, [r0, #2]
    4ae4:	7800      	ldrb	r0, [r0, #0]
    4ae6:	72e0      	strb	r0, [r4, #11]
    4ae8:	7162      	strb	r2, [r4, #5]
    4aea:	71a1      	strb	r1, [r4, #6]
    4aec:	71e7      	strb	r7, [r4, #7]
    4aee:	f04f 0801 	mov.w	r8, #1
    4af2:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    4af6:	2805      	cmp	r0, #5
    4af8:	d225      	bcs.n	4b46 <MPSL_IRQ_CLOCK_Handler+0x246>
    4afa:	e8df f000 	tbb	[pc, r0]
    4afe:	0310      	.short	0x0310
    4b00:	00222006 	.word	0x00222006
    4b04:	f8c4 8018 	str.w	r8, [r4, #24]
    4b08:	e009      	b.n	4b1e <MPSL_IRQ_CLOCK_Handler+0x21e>
    4b0a:	f000 f8d1 	bl	4cb0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    4b0e:	2101      	movs	r1, #1
    4b10:	4628      	mov	r0, r5
    4b12:	f008 fda3 	bl	d65c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    4b16:	2800      	cmp	r0, #0
    4b18:	d0f9      	beq.n	4b0e <MPSL_IRQ_CLOCK_Handler+0x20e>
    4b1a:	2002      	movs	r0, #2
    4b1c:	61a0      	str	r0, [r4, #24]
    4b1e:	f008 fdc9 	bl	d6b4 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    4b22:	b1b0      	cbz	r0, 4b52 <MPSL_IRQ_CLOCK_Handler+0x252>
    4b24:	f000 f9ee 	bl	4f04 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    4b28:	7e21      	ldrb	r1, [r4, #24]
    4b2a:	f001 0103 	and.w	r1, r1, #3
    4b2e:	4288      	cmp	r0, r1
    4b30:	d10f      	bne.n	4b52 <MPSL_IRQ_CLOCK_Handler+0x252>
    4b32:	79b0      	ldrb	r0, [r6, #6]
    4b34:	b150      	cbz	r0, 4b4c <MPSL_IRQ_CLOCK_Handler+0x24c>
    4b36:	2002      	movs	r0, #2
    4b38:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    4b3c:	e070      	b.n	4c20 <MPSL_IRQ_CLOCK_Handler+0x320>
    4b3e:	4847      	ldr	r0, [pc, #284]	; (4c5c <MPSL_IRQ_CLOCK_Handler+0x35c>)
    4b40:	e7ec      	b.n	4b1c <MPSL_IRQ_CLOCK_Handler+0x21c>
    4b42:	4847      	ldr	r0, [pc, #284]	; (4c60 <MPSL_IRQ_CLOCK_Handler+0x360>)
    4b44:	e7ea      	b.n	4b1c <MPSL_IRQ_CLOCK_Handler+0x21c>
    4b46:	f240 313a 	movw	r1, #826	; 0x33a
    4b4a:	e04d      	b.n	4be8 <MPSL_IRQ_CLOCK_Handler+0x2e8>
    4b4c:	f000 f9ae 	bl	4eac <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    4b50:	e066      	b.n	4c20 <MPSL_IRQ_CLOCK_Handler+0x320>
    4b52:	f8c5 800c 	str.w	r8, [r5, #12]
    4b56:	f44f 7a82 	mov.w	sl, #260	; 0x104
    4b5a:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    4b5e:	69a0      	ldr	r0, [r4, #24]
    4b60:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    4b64:	f008 fe0b 	bl	d77e <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    4b68:	b940      	cbnz	r0, 4b7c <MPSL_IRQ_CLOCK_Handler+0x27c>
    4b6a:	f008 fe12 	bl	d792 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    4b6e:	b928      	cbnz	r0, 4b7c <MPSL_IRQ_CLOCK_Handler+0x27c>
    4b70:	f008 fe26 	bl	d7c0 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    4b74:	b910      	cbnz	r0, 4b7c <MPSL_IRQ_CLOCK_Handler+0x27c>
    4b76:	f008 fe37 	bl	d7e8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4b7a:	b138      	cbz	r0, 4b8c <MPSL_IRQ_CLOCK_Handler+0x28c>
    4b7c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    4b80:	f8d0 0244 	ldr.w	r0, [r0, #580]	; 0x244
    4b84:	4937      	ldr	r1, [pc, #220]	; (4c64 <MPSL_IRQ_CLOCK_Handler+0x364>)
    4b86:	f3c0 3042 	ubfx	r0, r0, #13, #3
    4b8a:	6008      	str	r0, [r1, #0]
    4b8c:	f008 fdf7 	bl	d77e <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    4b90:	b940      	cbnz	r0, 4ba4 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    4b92:	f008 fdfe 	bl	d792 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    4b96:	b928      	cbnz	r0, 4ba4 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    4b98:	f008 fe12 	bl	d7c0 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    4b9c:	b910      	cbnz	r0, 4ba4 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    4b9e:	f008 fe23 	bl	d7e8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4ba2:	b118      	cbz	r0, 4bac <MPSL_IRQ_CLOCK_Handler+0x2ac>
    4ba4:	492f      	ldr	r1, [pc, #188]	; (4c64 <MPSL_IRQ_CLOCK_Handler+0x364>)
    4ba6:	3110      	adds	r1, #16
    4ba8:	f8c1 8000 	str.w	r8, [r1]
    4bac:	f8c5 8008 	str.w	r8, [r5, #8]
    4bb0:	2002      	movs	r0, #2
    4bb2:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    4bb6:	79b0      	ldrb	r0, [r6, #6]
    4bb8:	bb90      	cbnz	r0, 4c20 <MPSL_IRQ_CLOCK_Handler+0x320>
    4bba:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    4bbe:	f010 0f02 	tst.w	r0, #2
    4bc2:	d00f      	beq.n	4be4 <MPSL_IRQ_CLOCK_Handler+0x2e4>
    4bc4:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 4c68 <MPSL_IRQ_CLOCK_Handler+0x368>
    4bc8:	f8d9 1000 	ldr.w	r1, [r9]
    4bcc:	43c9      	mvns	r1, r1
    4bce:	f341 1100 	sbfx	r1, r1, #4, #1
    4bd2:	f101 0801 	add.w	r8, r1, #1
    4bd6:	f8d9 1000 	ldr.w	r1, [r9]
    4bda:	f041 0110 	orr.w	r1, r1, #16
    4bde:	f8c9 1000 	str.w	r1, [r9]
    4be2:	e007      	b.n	4bf4 <MPSL_IRQ_CLOCK_Handler+0x2f4>
    4be4:	f240 21fb 	movw	r1, #763	; 0x2fb
    4be8:	206d      	movs	r0, #109	; 0x6d
    4bea:	f000 f9e9 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4bee:	bf00      	nop
    4bf0:	f000 fb10 	bl	5214 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    4bf4:	4651      	mov	r1, sl
    4bf6:	4628      	mov	r0, r5
    4bf8:	f008 fd2b 	bl	d652 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    4bfc:	2800      	cmp	r0, #0
    4bfe:	d0f7      	beq.n	4bf0 <MPSL_IRQ_CLOCK_Handler+0x2f0>
    4c00:	f000 f954 	bl	4eac <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    4c04:	f1b8 0f00 	cmp.w	r8, #0
    4c08:	d105      	bne.n	4c16 <MPSL_IRQ_CLOCK_Handler+0x316>
    4c0a:	f8d9 1000 	ldr.w	r1, [r9]
    4c0e:	f021 0110 	bic.w	r1, r1, #16
    4c12:	f8c9 1000 	str.w	r1, [r9]
    4c16:	2002      	movs	r0, #2
    4c18:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    4c1c:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    4c20:	79a0      	ldrb	r0, [r4, #6]
    4c22:	b170      	cbz	r0, 4c42 <MPSL_IRQ_CLOCK_Handler+0x342>
    4c24:	7830      	ldrb	r0, [r6, #0]
    4c26:	b960      	cbnz	r0, 4c42 <MPSL_IRQ_CLOCK_Handler+0x342>
    4c28:	f000 f952 	bl	4ed0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    4c2c:	4606      	mov	r6, r0
    4c2e:	f000 fa3b 	bl	50a8 <mpsl_temperature_get>
    4c32:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    4c36:	b116      	cbz	r6, 4c3e <MPSL_IRQ_CLOCK_Handler+0x33e>
    4c38:	e9c4 1004 	strd	r1, r0, [r4, #16]
    4c3c:	e001      	b.n	4c42 <MPSL_IRQ_CLOCK_Handler+0x342>
    4c3e:	e9c4 0104 	strd	r0, r1, [r4, #16]
    4c42:	2101      	movs	r1, #1
    4c44:	4628      	mov	r0, r5
    4c46:	f008 fd09 	bl	d65c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    4c4a:	b108      	cbz	r0, 4c50 <MPSL_IRQ_CLOCK_Handler+0x350>
    4c4c:	f000 f93a 	bl	4ec4 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    4c50:	72a7      	strb	r7, [r4, #10]
    4c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4c56:	0000      	.short	0x0000
    4c58:	20000058 	.word	0x20000058
    4c5c:	00020001 	.word	0x00020001
    4c60:	00030001 	.word	0x00030001
    4c64:	4000053c 	.word	0x4000053c
    4c68:	e000ed10 	.word	0xe000ed10

00004c6c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>:
    4c6c:	4801      	ldr	r0, [pc, #4]	; (4c74 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q+0x8>)
    4c6e:	89c0      	ldrh	r0, [r0, #14]
    4c70:	4770      	bx	lr
    4c72:	0000      	.short	0x0000
    4c74:	20000058 	.word	0x20000058

00004c78 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    4c78:	b510      	push	{r4, lr}
    4c7a:	f3ef 8410 	mrs	r4, PRIMASK
    4c7e:	b672      	cpsid	i
    4c80:	480a      	ldr	r0, [pc, #40]	; (4cac <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    4c82:	7841      	ldrb	r1, [r0, #1]
    4c84:	b129      	cbz	r1, 4c92 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    4c86:	7841      	ldrb	r1, [r0, #1]
    4c88:	1e49      	subs	r1, r1, #1
    4c8a:	7041      	strb	r1, [r0, #1]
    4c8c:	7841      	ldrb	r1, [r0, #1]
    4c8e:	b129      	cbz	r1, 4c9c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    4c90:	e008      	b.n	4ca4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    4c92:	f44f 718e 	mov.w	r1, #284	; 0x11c
    4c96:	206d      	movs	r0, #109	; 0x6d
    4c98:	f000 f992 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4c9c:	7880      	ldrb	r0, [r0, #2]
    4c9e:	b908      	cbnz	r0, 4ca4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    4ca0:	f000 f924 	bl	4eec <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    4ca4:	2c00      	cmp	r4, #0
    4ca6:	d100      	bne.n	4caa <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    4ca8:	b662      	cpsie	i
    4caa:	bd10      	pop	{r4, pc}
    4cac:	20000058 	.word	0x20000058

00004cb0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    4cb0:	b510      	push	{r4, lr}
    4cb2:	f3ef 8410 	mrs	r4, PRIMASK
    4cb6:	b672      	cpsid	i
    4cb8:	4806      	ldr	r0, [pc, #24]	; (4cd4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    4cba:	7841      	ldrb	r1, [r0, #1]
    4cbc:	1c49      	adds	r1, r1, #1
    4cbe:	7041      	strb	r1, [r0, #1]
    4cc0:	7840      	ldrb	r0, [r0, #1]
    4cc2:	2801      	cmp	r0, #1
    4cc4:	d101      	bne.n	4cca <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    4cc6:	f008 fce0 	bl	d68a <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    4cca:	2c00      	cmp	r4, #0
    4ccc:	d100      	bne.n	4cd0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    4cce:	b662      	cpsie	i
    4cd0:	bd10      	pop	{r4, pc}
    4cd2:	0000      	.short	0x0000
    4cd4:	20000058 	.word	0x20000058

00004cd8 <mpsl_clock_hfclk_release>:
    4cd8:	4805      	ldr	r0, [pc, #20]	; (4cf0 <mpsl_clock_hfclk_release+0x18>)
    4cda:	b510      	push	{r4, lr}
    4cdc:	78c1      	ldrb	r1, [r0, #3]
    4cde:	b121      	cbz	r1, 4cea <mpsl_clock_hfclk_release+0x12>
    4ce0:	2100      	movs	r1, #0
    4ce2:	7101      	strb	r1, [r0, #4]
    4ce4:	70c1      	strb	r1, [r0, #3]
    4ce6:	f7ff ffc7 	bl	4c78 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    4cea:	2000      	movs	r0, #0
    4cec:	bd10      	pop	{r4, pc}
    4cee:	0000      	.short	0x0000
    4cf0:	20000058 	.word	0x20000058

00004cf4 <mpsl_clock_hfclk_request>:
    4cf4:	b570      	push	{r4, r5, r6, lr}
    4cf6:	4c0c      	ldr	r4, [pc, #48]	; (4d28 <mpsl_clock_hfclk_request+0x34>)
    4cf8:	78e1      	ldrb	r1, [r4, #3]
    4cfa:	b961      	cbnz	r1, 4d16 <mpsl_clock_hfclk_request+0x22>
    4cfc:	2501      	movs	r5, #1
    4cfe:	70e5      	strb	r5, [r4, #3]
    4d00:	61e0      	str	r0, [r4, #28]
    4d02:	f7ff ffd5 	bl	4cb0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    4d06:	f000 f8e3 	bl	4ed0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    4d0a:	b130      	cbz	r0, 4d1a <mpsl_clock_hfclk_request+0x26>
    4d0c:	69e0      	ldr	r0, [r4, #28]
    4d0e:	b110      	cbz	r0, 4d16 <mpsl_clock_hfclk_request+0x22>
    4d10:	4780      	blx	r0
    4d12:	2000      	movs	r0, #0
    4d14:	61e0      	str	r0, [r4, #28]
    4d16:	2000      	movs	r0, #0
    4d18:	bd70      	pop	{r4, r5, r6, pc}
    4d1a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    4d1e:	7125      	strb	r5, [r4, #4]
    4d20:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    4d24:	e7f7      	b.n	4d16 <mpsl_clock_hfclk_request+0x22>
    4d26:	0000      	.short	0x0000
    4d28:	20000058 	.word	0x20000058

00004d2c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    4d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4d30:	0005      	movs	r5, r0
    4d32:	f06f 0015 	mvn.w	r0, #21
    4d36:	d03f      	beq.n	4db8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    4d38:	7829      	ldrb	r1, [r5, #0]
    4d3a:	2904      	cmp	r1, #4
    4d3c:	d83c      	bhi.n	4db8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    4d3e:	2900      	cmp	r1, #0
    4d40:	7869      	ldrb	r1, [r5, #1]
    4d42:	d03b      	beq.n	4dbc <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x90>
    4d44:	2900      	cmp	r1, #0
    4d46:	d137      	bne.n	4db8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    4d48:	78a9      	ldrb	r1, [r5, #2]
    4d4a:	2900      	cmp	r1, #0
    4d4c:	d134      	bne.n	4db8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    4d4e:	2000      	movs	r0, #0
    4d50:	f008 fc4a 	bl	d5e8 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x34>
    4d54:	2000      	movs	r0, #0
    4d56:	f008 fc3a 	bl	d5ce <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    4d5a:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    4d5e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4d62:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    4d66:	2600      	movs	r6, #0
    4d68:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    4d6c:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    4d70:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    4d74:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    4d78:	4c14      	ldr	r4, [pc, #80]	; (4dcc <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    4d7a:	7066      	strb	r6, [r4, #1]
    4d7c:	88a8      	ldrh	r0, [r5, #4]
    4d7e:	81a0      	strh	r0, [r4, #12]
    4d80:	f008 fc7a 	bl	d678 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    4d84:	2701      	movs	r7, #1
    4d86:	b108      	cbz	r0, 4d8c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    4d88:	70e7      	strb	r7, [r4, #3]
    4d8a:	7067      	strb	r7, [r4, #1]
    4d8c:	2101      	movs	r1, #1
    4d8e:	4640      	mov	r0, r8
    4d90:	f008 fc64 	bl	d65c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    4d94:	b108      	cbz	r0, 4d9a <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    4d96:	f000 f895 	bl	4ec4 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    4d9a:	f240 50f5 	movw	r0, #1525	; 0x5f5
    4d9e:	81e0      	strh	r0, [r4, #14]
    4da0:	4628      	mov	r0, r5
    4da2:	f7ff fe97 	bl	4ad4 <MPSL_IRQ_CLOCK_Handler+0x1d4>
    4da6:	7267      	strb	r7, [r4, #9]
    4da8:	2000      	movs	r0, #0
    4daa:	f008 fc10 	bl	d5ce <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    4dae:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    4db2:	4630      	mov	r0, r6
    4db4:	f8c1 7100 	str.w	r7, [r1, #256]	; 0x100
    4db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4dbc:	2900      	cmp	r1, #0
    4dbe:	d0fb      	beq.n	4db8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    4dc0:	2920      	cmp	r1, #32
    4dc2:	d8f9      	bhi.n	4db8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    4dc4:	78a9      	ldrb	r1, [r5, #2]
    4dc6:	2921      	cmp	r1, #33	; 0x21
    4dc8:	d9c1      	bls.n	4d4e <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    4dca:	e7f5      	b.n	4db8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    4dcc:	20000058 	.word	0x20000058

00004dd0 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    4dd0:	4801      	ldr	r0, [pc, #4]	; (4dd8 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    4dd2:	8980      	ldrh	r0, [r0, #12]
    4dd4:	4770      	bx	lr
    4dd6:	0000      	.short	0x0000
    4dd8:	20000058 	.word	0x20000058

00004ddc <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>:
    4ddc:	b510      	push	{r4, lr}
    4dde:	480d      	ldr	r0, [pc, #52]	; (4e14 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    4de0:	f008 fcab 	bl	d73a <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4de4:	490b      	ldr	r1, [pc, #44]	; (4e14 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    4de6:	3908      	subs	r1, #8
    4de8:	b148      	cbz	r0, 4dfe <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x22>
    4dea:	2001      	movs	r0, #1
    4dec:	7008      	strb	r0, [r1, #0]
    4dee:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    4df2:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    4df6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4dfa:	f7ff bf59 	b.w	4cb0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    4dfe:	7a88      	ldrb	r0, [r1, #10]
    4e00:	2802      	cmp	r0, #2
    4e02:	d101      	bne.n	4e08 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x2c>
    4e04:	f7ff fdc0 	bl	4988 <MPSL_IRQ_CLOCK_Handler+0x88>
    4e08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4e0c:	4801      	ldr	r0, [pc, #4]	; (4e14 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    4e0e:	f008 bcab 	b.w	d768 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    4e12:	0000      	.short	0x0000
    4e14:	20000060 	.word	0x20000060

00004e18 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    4e18:	4802      	ldr	r0, [pc, #8]	; (4e24 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    4e1a:	7a80      	ldrb	r0, [r0, #10]
    4e1c:	2800      	cmp	r0, #0
    4e1e:	d000      	beq.n	4e22 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    4e20:	2001      	movs	r0, #1
    4e22:	4770      	bx	lr
    4e24:	20000058 	.word	0x20000058

00004e28 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    4e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4e2a:	4d1f      	ldr	r5, [pc, #124]	; (4ea8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    4e2c:	7ae8      	ldrb	r0, [r5, #11]
    4e2e:	2800      	cmp	r0, #0
    4e30:	d10f      	bne.n	4e52 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    4e32:	7e28      	ldrb	r0, [r5, #24]
    4e34:	f000 0003 	and.w	r0, r0, #3
    4e38:	f008 fc2c 	bl	d694 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    4e3c:	2800      	cmp	r0, #0
    4e3e:	d008      	beq.n	4e52 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    4e40:	f3ef 8110 	mrs	r1, PRIMASK
    4e44:	b672      	cpsid	i
    4e46:	f7ff ffe7 	bl	4e18 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    4e4a:	b118      	cbz	r0, 4e54 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    4e4c:	2900      	cmp	r1, #0
    4e4e:	d100      	bne.n	4e52 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    4e50:	b662      	cpsie	i
    4e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4e54:	2601      	movs	r6, #1
    4e56:	72ae      	strb	r6, [r5, #10]
    4e58:	b901      	cbnz	r1, 4e5c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    4e5a:	b662      	cpsie	i
    4e5c:	2018      	movs	r0, #24
    4e5e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    4e62:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    4e66:	61a6      	str	r6, [r4, #24]
    4e68:	f44f 7020 	mov.w	r0, #640	; 0x280
    4e6c:	f8ad 0000 	strh.w	r0, [sp]
    4e70:	f8bd 0000 	ldrh.w	r0, [sp]
    4e74:	1e41      	subs	r1, r0, #1
    4e76:	f8ad 1000 	strh.w	r1, [sp]
    4e7a:	d2f9      	bcs.n	4e70 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    4e7c:	2700      	movs	r7, #0
    4e7e:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    4e82:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    4e86:	4808      	ldr	r0, [pc, #32]	; (4ea8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    4e88:	3008      	adds	r0, #8
    4e8a:	f008 fc69 	bl	d760 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    4e8e:	702f      	strb	r7, [r5, #0]
    4e90:	f7ff fd7a 	bl	4988 <MPSL_IRQ_CLOCK_Handler+0x88>
    4e94:	6166      	str	r6, [r4, #20]
    4e96:	7968      	ldrb	r0, [r5, #5]
    4e98:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    4e9c:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    4ea0:	2018      	movs	r0, #24
    4ea2:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    4ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4ea8:	20000058 	.word	0x20000058

00004eac <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    4eac:	b510      	push	{r4, lr}
    4eae:	4c04      	ldr	r4, [pc, #16]	; (4ec0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    4eb0:	7e20      	ldrb	r0, [r4, #24]
    4eb2:	f000 0003 	and.w	r0, r0, #3
    4eb6:	f008 fbed 	bl	d694 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    4eba:	2800      	cmp	r0, #0
    4ebc:	d0f8      	beq.n	4eb0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    4ebe:	bd10      	pop	{r4, pc}
    4ec0:	20000058 	.word	0x20000058

00004ec4 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    4ec4:	4901      	ldr	r1, [pc, #4]	; (4ecc <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    4ec6:	2001      	movs	r0, #1
    4ec8:	7008      	strb	r0, [r1, #0]
    4eca:	4770      	bx	lr
    4ecc:	20000329 	.word	0x20000329

00004ed0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    4ed0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    4ed4:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    4ed8:	b918      	cbnz	r0, 4ee2 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    4eda:	4803      	ldr	r0, [pc, #12]	; (4ee8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    4edc:	7800      	ldrb	r0, [r0, #0]
    4ede:	2800      	cmp	r0, #0
    4ee0:	d000      	beq.n	4ee4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    4ee2:	2001      	movs	r0, #1
    4ee4:	4770      	bx	lr
    4ee6:	0000      	.short	0x0000
    4ee8:	20000329 	.word	0x20000329

00004eec <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    4eec:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    4ef0:	2101      	movs	r1, #1
    4ef2:	6041      	str	r1, [r0, #4]
    4ef4:	2100      	movs	r1, #0
    4ef6:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    4efa:	4801      	ldr	r0, [pc, #4]	; (4f00 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    4efc:	7001      	strb	r1, [r0, #0]
    4efe:	4770      	bx	lr
    4f00:	20000329 	.word	0x20000329

00004f04 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    4f04:	4802      	ldr	r0, [pc, #8]	; (4f10 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    4f06:	6800      	ldr	r0, [r0, #0]
    4f08:	f000 0003 	and.w	r0, r0, #3
    4f0c:	4770      	bx	lr
    4f0e:	0000      	.short	0x0000
    4f10:	4000041c 	.word	0x4000041c
    4f14:	b510      	push	{r4, lr}
    4f16:	b131      	cbz	r1, 4f26 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    4f18:	2901      	cmp	r1, #1
    4f1a:	d007      	beq.n	4f2c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    4f1c:	f240 3102 	movw	r1, #770	; 0x302
    4f20:	a005      	add	r0, pc, #20	; (adr r0, 4f38 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    4f22:	f000 f821 	bl	4f68 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    4f26:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    4f2a:	e001      	b.n	4f30 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    4f2c:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    4f30:	f000 0001 	and.w	r0, r0, #1
    4f34:	bd10      	pop	{r4, pc}
    4f36:	0000      	.short	0x0000
    4f38:	5f66726e 	.word	0x5f66726e
    4f3c:	636f6c63 	.word	0x636f6c63
    4f40:	00682e6b 	.word	0x00682e6b
    4f44:	f3bf 8f4f 	dsb	sy
    4f48:	4805      	ldr	r0, [pc, #20]	; (4f60 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
    4f4a:	6801      	ldr	r1, [r0, #0]
    4f4c:	4a05      	ldr	r2, [pc, #20]	; (4f64 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
    4f4e:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    4f52:	4311      	orrs	r1, r2
    4f54:	6001      	str	r1, [r0, #0]
    4f56:	f3bf 8f4f 	dsb	sy
    4f5a:	bf00      	nop
    4f5c:	e7fd      	b.n	4f5a <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
    4f5e:	0000      	.short	0x0000
    4f60:	e000ed0c 	.word	0xe000ed0c
    4f64:	05fa0004 	.word	0x05fa0004

00004f68 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    4f68:	b672      	cpsid	i
    4f6a:	4a03      	ldr	r2, [pc, #12]	; (4f78 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    4f6c:	6852      	ldr	r2, [r2, #4]
    4f6e:	b102      	cbz	r2, 4f72 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    4f70:	4790      	blx	r2
    4f72:	f7ff ffe7 	bl	4f44 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    4f76:	0000      	.short	0x0000
    4f78:	20000078 	.word	0x20000078
    4f7c:	4806      	ldr	r0, [pc, #24]	; (4f98 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    4f7e:	b510      	push	{r4, lr}
    4f80:	2100      	movs	r1, #0
    4f82:	6001      	str	r1, [r0, #0]
    4f84:	2101      	movs	r1, #1
    4f86:	6001      	str	r1, [r0, #0]
    4f88:	4608      	mov	r0, r1
    4f8a:	f008 fbaa 	bl	d6e2 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    4f8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4f92:	2001      	movs	r0, #1
    4f94:	f008 bb98 	b.w	d6c8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    4f98:	40001ffc 	.word	0x40001ffc
    4f9c:	4807      	ldr	r0, [pc, #28]	; (4fbc <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    4f9e:	b510      	push	{r4, lr}
    4fa0:	2101      	movs	r1, #1
    4fa2:	6041      	str	r1, [r0, #4]
    4fa4:	1e89      	subs	r1, r1, #2
    4fa6:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    4faa:	200c      	movs	r0, #12
    4fac:	f008 fb99 	bl	d6e2 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    4fb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4fb4:	200c      	movs	r0, #12
    4fb6:	f008 bb87 	b.w	d6c8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    4fba:	0000      	.short	0x0000
    4fbc:	4000c000 	.word	0x4000c000

00004fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    4fc0:	b50e      	push	{r1, r2, r3, lr}
    4fc2:	b672      	cpsid	i
    4fc4:	4a0f      	ldr	r2, [pc, #60]	; (5004 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    4fc6:	6855      	ldr	r5, [r2, #4]
    4fc8:	b1d5      	cbz	r5, 5000 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    4fca:	2200      	movs	r2, #0
    4fcc:	4603      	mov	r3, r0
    4fce:	466e      	mov	r6, sp
    4fd0:	240a      	movs	r4, #10
    4fd2:	e003      	b.n	4fdc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    4fd4:	fbb0 f0f4 	udiv	r0, r0, r4
    4fd8:	1c52      	adds	r2, r2, #1
    4fda:	b2d2      	uxtb	r2, r2
    4fdc:	2800      	cmp	r0, #0
    4fde:	d1f9      	bne.n	4fd4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    4fe0:	54b0      	strb	r0, [r6, r2]
    4fe2:	e009      	b.n	4ff8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    4fe4:	fbb3 f0f4 	udiv	r0, r3, r4
    4fe8:	fb04 3010 	mls	r0, r4, r0, r3
    4fec:	fbb3 f3f4 	udiv	r3, r3, r4
    4ff0:	1e52      	subs	r2, r2, #1
    4ff2:	b2d2      	uxtb	r2, r2
    4ff4:	3030      	adds	r0, #48	; 0x30
    4ff6:	54b0      	strb	r0, [r6, r2]
    4ff8:	2a00      	cmp	r2, #0
    4ffa:	d1f3      	bne.n	4fe4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    4ffc:	4630      	mov	r0, r6
    4ffe:	47a8      	blx	r5
    5000:	f7ff ffa0 	bl	4f44 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    5004:	20000078 	.word	0x20000078

00005008 <mpsl_init>:
    5008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    500c:	4c18      	ldr	r4, [pc, #96]	; (5070 <mpsl_init+0x68>)
    500e:	4606      	mov	r6, r0
    5010:	4617      	mov	r7, r2
    5012:	7860      	ldrb	r0, [r4, #1]
    5014:	460d      	mov	r5, r1
    5016:	b118      	cbz	r0, 5020 <mpsl_init+0x18>
    5018:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    501c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5020:	f7fc fbe6 	bl	17f0 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>
    5024:	b906      	cbnz	r6, 5028 <mpsl_init+0x20>
    5026:	4e13      	ldr	r6, [pc, #76]	; (5074 <mpsl_init+0x6c>)
    5028:	6067      	str	r7, [r4, #4]
    502a:	7025      	strb	r5, [r4, #0]
    502c:	f7ff ffa6 	bl	4f7c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    5030:	f7ff ffb4 	bl	4f9c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    5034:	4630      	mov	r0, r6
    5036:	f7ff fe79 	bl	4d2c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    503a:	0006      	movs	r6, r0
    503c:	d1ee      	bne.n	501c <mpsl_init+0x14>
    503e:	f7fe fe77 	bl	3d30 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    5042:	f7ff fef1 	bl	4e28 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    5046:	f008 fa0f 	bl	d468 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    504a:	4628      	mov	r0, r5
    504c:	f008 fb3c 	bl	d6c8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    5050:	2001      	movs	r0, #1
    5052:	2d00      	cmp	r5, #0
    5054:	db09      	blt.n	506a <mpsl_init+0x62>
    5056:	f005 011f 	and.w	r1, r5, #31
    505a:	fa00 f101 	lsl.w	r1, r0, r1
    505e:	096a      	lsrs	r2, r5, #5
    5060:	0092      	lsls	r2, r2, #2
    5062:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    5066:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    506a:	7060      	strb	r0, [r4, #1]
    506c:	4630      	mov	r0, r6
    506e:	e7d5      	b.n	501c <mpsl_init+0x14>
    5070:	20000078 	.word	0x20000078
    5074:	0000d704 	.word	0x0000d704

00005078 <mpsl_is_initialized>:
    5078:	4801      	ldr	r0, [pc, #4]	; (5080 <mpsl_is_initialized+0x8>)
    507a:	7840      	ldrb	r0, [r0, #1]
    507c:	4770      	bx	lr
    507e:	0000      	.short	0x0000
    5080:	20000078 	.word	0x20000078

00005084 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    5084:	4807      	ldr	r0, [pc, #28]	; (50a4 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    5086:	f990 0000 	ldrsb.w	r0, [r0]
    508a:	2800      	cmp	r0, #0
    508c:	db09      	blt.n	50a2 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    508e:	f000 021f 	and.w	r2, r0, #31
    5092:	2101      	movs	r1, #1
    5094:	4091      	lsls	r1, r2
    5096:	0940      	lsrs	r0, r0, #5
    5098:	0080      	lsls	r0, r0, #2
    509a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    509e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    50a2:	4770      	bx	lr
    50a4:	20000078 	.word	0x20000078

000050a8 <mpsl_temperature_get>:
    50a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    50ac:	2601      	movs	r6, #1
    50ae:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    50b2:	0331      	lsls	r1, r6, #12
    50b4:	f04f 0800 	mov.w	r8, #0
    50b8:	4640      	mov	r0, r8
    50ba:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    50be:	f3bf 8f4f 	dsb	sy
    50c2:	f3bf 8f6f 	isb	sy
    50c6:	4c16      	ldr	r4, [pc, #88]	; (5120 <mpsl_temperature_get+0x78>)
    50c8:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    50cc:	200c      	movs	r0, #12
    50ce:	f008 fb27 	bl	d720 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    50d2:	4d14      	ldr	r5, [pc, #80]	; (5124 <mpsl_temperature_get+0x7c>)
    50d4:	6828      	ldr	r0, [r5, #0]
    50d6:	43c0      	mvns	r0, r0
    50d8:	f340 1700 	sbfx	r7, r0, #4, #1
    50dc:	6828      	ldr	r0, [r5, #0]
    50de:	f040 0010 	orr.w	r0, r0, #16
    50e2:	6028      	str	r0, [r5, #0]
    50e4:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    50e8:	6026      	str	r6, [r4, #0]
    50ea:	1c7f      	adds	r7, r7, #1
    50ec:	e002      	b.n	50f4 <mpsl_temperature_get+0x4c>
    50ee:	bf00      	nop
    50f0:	f000 f890 	bl	5214 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    50f4:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    50f8:	2800      	cmp	r0, #0
    50fa:	d0f9      	beq.n	50f0 <mpsl_temperature_get+0x48>
    50fc:	b91f      	cbnz	r7, 5106 <mpsl_temperature_get+0x5e>
    50fe:	6828      	ldr	r0, [r5, #0]
    5100:	f020 0010 	bic.w	r0, r0, #16
    5104:	6028      	str	r0, [r5, #0]
    5106:	4808      	ldr	r0, [pc, #32]	; (5128 <mpsl_temperature_get+0x80>)
    5108:	6805      	ldr	r5, [r0, #0]
    510a:	6066      	str	r6, [r4, #4]
    510c:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    5110:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    5114:	200c      	movs	r0, #12
    5116:	f008 fb03 	bl	d720 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    511a:	4628      	mov	r0, r5
    511c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5120:	4000c000 	.word	0x4000c000
    5124:	e000ed10 	.word	0xe000ed10
    5128:	4000c508 	.word	0x4000c508

0000512c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    512c:	b510      	push	{r4, lr}
    512e:	4602      	mov	r2, r0
    5130:	2005      	movs	r0, #5
    5132:	490c      	ldr	r1, [pc, #48]	; (5164 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    5134:	e004      	b.n	5140 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    5136:	bf00      	nop
    5138:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    513c:	791b      	ldrb	r3, [r3, #4]
    513e:	b133      	cbz	r3, 514e <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    5140:	1e40      	subs	r0, r0, #1
    5142:	b2c0      	uxtb	r0, r0
    5144:	d2f8      	bcs.n	5138 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    5146:	2148      	movs	r1, #72	; 0x48
    5148:	2069      	movs	r0, #105	; 0x69
    514a:	f7ff ff39 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    514e:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    5152:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    5156:	2200      	movs	r2, #0
    5158:	714a      	strb	r2, [r1, #5]
    515a:	718a      	strb	r2, [r1, #6]
    515c:	2201      	movs	r2, #1
    515e:	710a      	strb	r2, [r1, #4]
    5160:	bd10      	pop	{r4, pc}
    5162:	0000      	.short	0x0000
    5164:	2000111c 	.word	0x2000111c

00005168 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    5168:	b510      	push	{r4, lr}
    516a:	2805      	cmp	r0, #5
    516c:	d301      	bcc.n	5172 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    516e:	2158      	movs	r1, #88	; 0x58
    5170:	e006      	b.n	5180 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    5172:	490a      	ldr	r1, [pc, #40]	; (519c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    5174:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    5178:	7901      	ldrb	r1, [r0, #4]
    517a:	2901      	cmp	r1, #1
    517c:	d003      	beq.n	5186 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    517e:	2159      	movs	r1, #89	; 0x59
    5180:	2069      	movs	r0, #105	; 0x69
    5182:	f7ff ff1d 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    5186:	7941      	ldrb	r1, [r0, #5]
    5188:	7982      	ldrb	r2, [r0, #6]
    518a:	1c49      	adds	r1, r1, #1
    518c:	b2c9      	uxtb	r1, r1
    518e:	428a      	cmp	r2, r1
    5190:	d000      	beq.n	5194 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    5192:	7141      	strb	r1, [r0, #5]
    5194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5198:	f7ff bf74 	b.w	5084 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    519c:	2000111c 	.word	0x2000111c

000051a0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    51a0:	b570      	push	{r4, r5, r6, lr}
    51a2:	2505      	movs	r5, #5
    51a4:	4e0e      	ldr	r6, [pc, #56]	; (51e0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    51a6:	4c0f      	ldr	r4, [pc, #60]	; (51e4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    51a8:	e016      	b.n	51d8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    51aa:	7821      	ldrb	r1, [r4, #0]
    51ac:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    51b0:	7902      	ldrb	r2, [r0, #4]
    51b2:	2a01      	cmp	r2, #1
    51b4:	d108      	bne.n	51c8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    51b6:	7942      	ldrb	r2, [r0, #5]
    51b8:	7983      	ldrb	r3, [r0, #6]
    51ba:	429a      	cmp	r2, r3
    51bc:	d004      	beq.n	51c8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    51be:	7942      	ldrb	r2, [r0, #5]
    51c0:	7182      	strb	r2, [r0, #6]
    51c2:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    51c6:	4780      	blx	r0
    51c8:	7820      	ldrb	r0, [r4, #0]
    51ca:	1c40      	adds	r0, r0, #1
    51cc:	b2c0      	uxtb	r0, r0
    51ce:	7020      	strb	r0, [r4, #0]
    51d0:	2805      	cmp	r0, #5
    51d2:	d301      	bcc.n	51d8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    51d4:	2000      	movs	r0, #0
    51d6:	7020      	strb	r0, [r4, #0]
    51d8:	1e6d      	subs	r5, r5, #1
    51da:	b2ed      	uxtb	r5, r5
    51dc:	d2e5      	bcs.n	51aa <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    51de:	bd70      	pop	{r4, r5, r6, pc}
    51e0:	2000111c 	.word	0x2000111c
    51e4:	2000032a 	.word	0x2000032a

000051e8 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    51e8:	b500      	push	{lr}
    51ea:	f008 fac8 	bl	d77e <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    51ee:	b940      	cbnz	r0, 5202 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    51f0:	f008 facf 	bl	d792 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    51f4:	b928      	cbnz	r0, 5202 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    51f6:	f008 fae3 	bl	d7c0 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    51fa:	b910      	cbnz	r0, 5202 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    51fc:	f008 faf4 	bl	d7e8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    5200:	b108      	cbz	r0, 5206 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    5202:	4802      	ldr	r0, [pc, #8]	; (520c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    5204:	bd00      	pop	{pc}
    5206:	4802      	ldr	r0, [pc, #8]	; (5210 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    5208:	bd00      	pop	{pc}
    520a:	0000      	.short	0x0000
    520c:	4000050c 	.word	0x4000050c
    5210:	4001e700 	.word	0x4001e700

00005214 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    5214:	b510      	push	{r4, lr}
    5216:	f008 fae7 	bl	d7e8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    521a:	b330      	cbz	r0, 526a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x56>
    521c:	f3ef 8010 	mrs	r0, PRIMASK
    5220:	b1c8      	cbz	r0, 5256 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x42>
    5222:	2100      	movs	r1, #0
    5224:	b672      	cpsid	i
    5226:	4812      	ldr	r0, [pc, #72]	; (5270 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x5c>)
    5228:	6802      	ldr	r2, [r0, #0]
    522a:	6803      	ldr	r3, [r0, #0]
    522c:	f3c2 1200 	ubfx	r2, r2, #4, #1
    5230:	f043 0310 	orr.w	r3, r3, #16
    5234:	6003      	str	r3, [r0, #0]
    5236:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    523a:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    523e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    5242:	431c      	orrs	r4, r3
    5244:	d000      	beq.n	5248 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x34>
    5246:	bf40      	sev
    5248:	bf20      	wfe
    524a:	bf00      	nop
    524c:	bf00      	nop
    524e:	bf00      	nop
    5250:	bf00      	nop
    5252:	b112      	cbz	r2, 525a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x46>
    5254:	e005      	b.n	5262 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x4e>
    5256:	2101      	movs	r1, #1
    5258:	e7e4      	b.n	5224 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x10>
    525a:	6802      	ldr	r2, [r0, #0]
    525c:	f022 0210 	bic.w	r2, r2, #16
    5260:	6002      	str	r2, [r0, #0]
    5262:	2900      	cmp	r1, #0
    5264:	d000      	beq.n	5268 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x54>
    5266:	b662      	cpsie	i
    5268:	bd10      	pop	{r4, pc}
    526a:	bf20      	wfe
    526c:	bd10      	pop	{r4, pc}
    526e:	0000      	.short	0x0000
    5270:	e000ed10 	.word	0xe000ed10

00005274 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>:
    5274:	4901      	ldr	r1, [pc, #4]	; (527c <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q+0x8>)
    5276:	2001      	movs	r0, #1
    5278:	7088      	strb	r0, [r1, #2]
    527a:	4770      	bx	lr
    527c:	20000080 	.word	0x20000080

00005280 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    5280:	0000da35 0000da6d 0000da57 0000da45     5...m...W...E...
    5290:	0000da51 0000da3f 0000da33 0000da31     Q...?...3...1...
    52a0:	0000da69 0000da5d 0000da4b 0000da39     i...]...K...9...
    52b0:	0000da2b 0000da23 0000da27 0000da1d     +...#...'.......

000052c0 <mpsl_fem_disable>:
    52c0:	4801      	ldr	r0, [pc, #4]	; (52c8 <mpsl_fem_disable+0x8>)
    52c2:	6800      	ldr	r0, [r0, #0]
    52c4:	6800      	ldr	r0, [r0, #0]
    52c6:	4700      	bx	r0
    52c8:	20000094 	.word	0x20000094

000052cc <mpsl_fem_lna_configuration_clear>:
    52cc:	4801      	ldr	r0, [pc, #4]	; (52d4 <mpsl_fem_lna_configuration_clear+0x8>)
    52ce:	6800      	ldr	r0, [r0, #0]
    52d0:	6940      	ldr	r0, [r0, #20]
    52d2:	4700      	bx	r0
    52d4:	20000094 	.word	0x20000094

000052d8 <mpsl_fem_lna_configuration_set>:
    52d8:	4a01      	ldr	r2, [pc, #4]	; (52e0 <mpsl_fem_lna_configuration_set+0x8>)
    52da:	6812      	ldr	r2, [r2, #0]
    52dc:	68d2      	ldr	r2, [r2, #12]
    52de:	4710      	bx	r2
    52e0:	20000094 	.word	0x20000094

000052e4 <mpsl_fem_lna_is_configured>:
    52e4:	4901      	ldr	r1, [pc, #4]	; (52ec <mpsl_fem_lna_is_configured+0x8>)
    52e6:	6809      	ldr	r1, [r1, #0]
    52e8:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    52ea:	4708      	bx	r1
    52ec:	20000094 	.word	0x20000094

000052f0 <mpsl_fem_pa_configuration_clear>:
    52f0:	4801      	ldr	r0, [pc, #4]	; (52f8 <mpsl_fem_pa_configuration_clear+0x8>)
    52f2:	6800      	ldr	r0, [r0, #0]
    52f4:	6900      	ldr	r0, [r0, #16]
    52f6:	4700      	bx	r0
    52f8:	20000094 	.word	0x20000094

000052fc <mpsl_fem_pa_configuration_set>:
    52fc:	4a01      	ldr	r2, [pc, #4]	; (5304 <mpsl_fem_pa_configuration_set+0x8>)
    52fe:	6812      	ldr	r2, [r2, #0]
    5300:	6892      	ldr	r2, [r2, #8]
    5302:	4710      	bx	r2
    5304:	20000094 	.word	0x20000094

00005308 <mpsl_fem_pa_gain_set>:
    5308:	4901      	ldr	r1, [pc, #4]	; (5310 <mpsl_fem_pa_gain_set+0x8>)
    530a:	6809      	ldr	r1, [r1, #0]
    530c:	6a49      	ldr	r1, [r1, #36]	; 0x24
    530e:	4708      	bx	r1
    5310:	20000094 	.word	0x20000094

00005314 <mpsl_fem_pa_is_configured>:
    5314:	4901      	ldr	r1, [pc, #4]	; (531c <mpsl_fem_pa_is_configured+0x8>)
    5316:	6809      	ldr	r1, [r1, #0]
    5318:	6a89      	ldr	r1, [r1, #40]	; 0x28
    531a:	4708      	bx	r1
    531c:	20000094 	.word	0x20000094

00005320 <mpsl_fem_tx_power_split>:
    5320:	4b01      	ldr	r3, [pc, #4]	; (5328 <mpsl_fem_tx_power_split+0x8>)
    5322:	681b      	ldr	r3, [r3, #0]
    5324:	685b      	ldr	r3, [r3, #4]
    5326:	4718      	bx	r3
    5328:	20000094 	.word	0x20000094

0000532c <mpsl_fem_device_config_254_apply_get>:
    532c:	4801      	ldr	r0, [pc, #4]	; (5334 <mpsl_fem_device_config_254_apply_get+0x8>)
    532e:	7800      	ldrb	r0, [r0, #0]
    5330:	4770      	bx	lr
    5332:	0000      	.short	0x0000
    5334:	2000032b 	.word	0x2000032b
    5338:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    533a:	4c14      	ldr	r4, [pc, #80]	; (538c <mpsl_fem_device_config_254_apply_get+0x60>)
    533c:	7a20      	ldrb	r0, [r4, #8]
    533e:	f88d 0001 	strb.w	r0, [sp, #1]
    5342:	79e0      	ldrb	r0, [r4, #7]
    5344:	f88d 0000 	strb.w	r0, [sp]
    5348:	79a0      	ldrb	r0, [r4, #6]
    534a:	f8ad 0004 	strh.w	r0, [sp, #4]
    534e:	7960      	ldrb	r0, [r4, #5]
    5350:	f8ad 0002 	strh.w	r0, [sp, #2]
    5354:	4668      	mov	r0, sp
    5356:	f006 f895 	bl	b484 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    535a:	b108      	cbz	r0, 5360 <mpsl_fem_device_config_254_apply_get+0x34>
    535c:	2183      	movs	r1, #131	; 0x83
    535e:	e010      	b.n	5382 <mpsl_fem_device_config_254_apply_get+0x56>
    5360:	68e0      	ldr	r0, [r4, #12]
    5362:	9002      	str	r0, [sp, #8]
    5364:	a802      	add	r0, sp, #8
    5366:	f006 f8a3 	bl	b4b0 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    536a:	b108      	cbz	r0, 5370 <mpsl_fem_device_config_254_apply_get+0x44>
    536c:	2187      	movs	r1, #135	; 0x87
    536e:	e008      	b.n	5382 <mpsl_fem_device_config_254_apply_get+0x56>
    5370:	4807      	ldr	r0, [pc, #28]	; (5390 <mpsl_fem_device_config_254_apply_get+0x64>)
    5372:	6800      	ldr	r0, [r0, #0]
    5374:	9003      	str	r0, [sp, #12]
    5376:	a803      	add	r0, sp, #12
    5378:	f00b fcd9 	bl	10d2e <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    537c:	2800      	cmp	r0, #0
    537e:	d003      	beq.n	5388 <mpsl_fem_device_config_254_apply_get+0x5c>
    5380:	218b      	movs	r1, #139	; 0x8b
    5382:	2003      	movs	r0, #3
    5384:	f000 f8ec 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5388:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    538a:	0000      	.short	0x0000
    538c:	20001144 	.word	0x20001144
    5390:	0000566c 	.word	0x0000566c

00005394 <sdc_build_revision_get>:
    5394:	b510      	push	{r4, lr}
    5396:	b128      	cbz	r0, 53a4 <sdc_build_revision_get+0x10>
    5398:	2214      	movs	r2, #20
    539a:	4904      	ldr	r1, [pc, #16]	; (53ac <sdc_build_revision_get+0x18>)
    539c:	f008 fa64 	bl	d868 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    53a0:	2000      	movs	r0, #0
    53a2:	bd10      	pop	{r4, pc}
    53a4:	f06f 0015 	mvn.w	r0, #21
    53a8:	bd10      	pop	{r4, pc}
    53aa:	0000      	.short	0x0000
    53ac:	00005688 	.word	0x00005688

000053b0 <sdc_cfg_set>:
    53b0:	b570      	push	{r4, r5, r6, lr}
    53b2:	0003      	movs	r3, r0
    53b4:	f06f 002c 	mvn.w	r0, #44	; 0x2c
    53b8:	d103      	bne.n	53c2 <sdc_cfg_set+0x12>
    53ba:	4c2e      	ldr	r4, [pc, #184]	; (5474 <sdc_cfg_set+0xc4>)
    53bc:	7863      	ldrb	r3, [r4, #1]
    53be:	b10b      	cbz	r3, 53c4 <sdc_cfg_set+0x14>
    53c0:	1180      	asrs	r0, r0, #6
    53c2:	bd70      	pop	{r4, r5, r6, pc}
    53c4:	b301      	cbz	r1, 5408 <sdc_cfg_set+0x58>
    53c6:	f06f 0515 	mvn.w	r5, #21
    53ca:	b38a      	cbz	r2, 5430 <sdc_cfg_set+0x80>
    53cc:	4b2a      	ldr	r3, [pc, #168]	; (5478 <sdc_cfg_set+0xc8>)
    53ce:	290c      	cmp	r1, #12
    53d0:	d24b      	bcs.n	546a <sdc_cfg_set+0xba>
    53d2:	e8df f001 	tbb	[pc, r1]
    53d6:	064a      	.short	0x064a
    53d8:	1d1a0c09 	.word	0x1d1a0c09
    53dc:	31202e25 	.word	0x31202e25
    53e0:	3b36      	.short	0x3b36
    53e2:	7810      	ldrb	r0, [r2, #0]
    53e4:	7018      	strb	r0, [r3, #0]
    53e6:	e035      	b.n	5454 <sdc_cfg_set+0xa4>
    53e8:	7810      	ldrb	r0, [r2, #0]
    53ea:	7058      	strb	r0, [r3, #1]
    53ec:	e032      	b.n	5454 <sdc_cfg_set+0xa4>
    53ee:	7890      	ldrb	r0, [r2, #2]
    53f0:	b1f0      	cbz	r0, 5430 <sdc_cfg_set+0x80>
    53f2:	78d0      	ldrb	r0, [r2, #3]
    53f4:	b1e0      	cbz	r0, 5430 <sdc_cfg_set+0x80>
    53f6:	7810      	ldrb	r0, [r2, #0]
    53f8:	281b      	cmp	r0, #27
    53fa:	d336      	bcc.n	546a <sdc_cfg_set+0xba>
    53fc:	7850      	ldrb	r0, [r2, #1]
    53fe:	281b      	cmp	r0, #27
    5400:	d333      	bcc.n	546a <sdc_cfg_set+0xba>
    5402:	6810      	ldr	r0, [r2, #0]
    5404:	f8c3 0005 	str.w	r0, [r3, #5]
    5408:	e024      	b.n	5454 <sdc_cfg_set+0xa4>
    540a:	6810      	ldr	r0, [r2, #0]
    540c:	60d8      	str	r0, [r3, #12]
    540e:	e021      	b.n	5454 <sdc_cfg_set+0xa4>
    5410:	7810      	ldrb	r0, [r2, #0]
    5412:	7098      	strb	r0, [r3, #2]
    5414:	e01e      	b.n	5454 <sdc_cfg_set+0xa4>
    5416:	7811      	ldrb	r1, [r2, #0]
    5418:	2900      	cmp	r1, #0
    541a:	d1d2      	bne.n	53c2 <sdc_cfg_set+0x12>
    541c:	70d9      	strb	r1, [r3, #3]
    541e:	e019      	b.n	5454 <sdc_cfg_set+0xa4>
    5420:	78e0      	ldrb	r0, [r4, #3]
    5422:	b110      	cbz	r0, 542a <sdc_cfg_set+0x7a>
    5424:	7810      	ldrb	r0, [r2, #0]
    5426:	2802      	cmp	r0, #2
    5428:	d31f      	bcc.n	546a <sdc_cfg_set+0xba>
    542a:	7810      	ldrb	r0, [r2, #0]
    542c:	7418      	strb	r0, [r3, #16]
    542e:	e011      	b.n	5454 <sdc_cfg_set+0xa4>
    5430:	e01b      	b.n	546a <sdc_cfg_set+0xba>
    5432:	8810      	ldrh	r0, [r2, #0]
    5434:	8258      	strh	r0, [r3, #18]
    5436:	e00d      	b.n	5454 <sdc_cfg_set+0xa4>
    5438:	7811      	ldrb	r1, [r2, #0]
    543a:	2900      	cmp	r1, #0
    543c:	d1c1      	bne.n	53c2 <sdc_cfg_set+0x12>
    543e:	7119      	strb	r1, [r3, #4]
    5440:	e008      	b.n	5454 <sdc_cfg_set+0xa4>
    5442:	7810      	ldrb	r0, [r2, #0]
    5444:	2802      	cmp	r0, #2
    5446:	d310      	bcc.n	546a <sdc_cfg_set+0xba>
    5448:	7518      	strb	r0, [r3, #20]
    544a:	e003      	b.n	5454 <sdc_cfg_set+0xa4>
    544c:	7811      	ldrb	r1, [r2, #0]
    544e:	2900      	cmp	r1, #0
    5450:	d1b7      	bne.n	53c2 <sdc_cfg_set+0x12>
    5452:	7559      	strb	r1, [r3, #21]
    5454:	2201      	movs	r2, #1
    5456:	4908      	ldr	r1, [pc, #32]	; (5478 <sdc_cfg_set+0xc8>)
    5458:	2000      	movs	r0, #0
    545a:	f008 fb21 	bl	daa0 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x2e>
    545e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    5462:	db04      	blt.n	546e <sdc_cfg_set+0xbe>
    5464:	f06f 000b 	mvn.w	r0, #11
    5468:	bd70      	pop	{r4, r5, r6, pc}
    546a:	4628      	mov	r0, r5
    546c:	bd70      	pop	{r4, r5, r6, pc}
    546e:	2101      	movs	r1, #1
    5470:	70a1      	strb	r1, [r4, #2]
    5472:	bd70      	pop	{r4, r5, r6, pc}
    5474:	20000098 	.word	0x20000098
    5478:	20001144 	.word	0x20001144

0000547c <sdc_enable>:
    547c:	b570      	push	{r4, r5, r6, lr}
    547e:	460c      	mov	r4, r1
    5480:	0005      	movs	r5, r0
    5482:	d019      	beq.n	54b8 <sdc_enable+0x3c>
    5484:	b1c4      	cbz	r4, 54b8 <sdc_enable+0x3c>
    5486:	f000 f925 	bl	56d4 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
    548a:	b1c0      	cbz	r0, 54be <sdc_enable+0x42>
    548c:	4628      	mov	r0, r5
    548e:	f7ff fe4d 	bl	512c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    5492:	4d0c      	ldr	r5, [pc, #48]	; (54c4 <sdc_enable+0x48>)
    5494:	2200      	movs	r2, #0
    5496:	490c      	ldr	r1, [pc, #48]	; (54c8 <sdc_enable+0x4c>)
    5498:	7028      	strb	r0, [r5, #0]
    549a:	4620      	mov	r0, r4
    549c:	f008 fb00 	bl	daa0 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x2e>
    54a0:	f00c f87d 	bl	1159e <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    54a4:	2100      	movs	r1, #0
    54a6:	7828      	ldrb	r0, [r5, #0]
    54a8:	f006 fa4a 	bl	b940 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    54ac:	f7ff ff44 	bl	5338 <mpsl_fem_device_config_254_apply_get+0xc>
    54b0:	2001      	movs	r0, #1
    54b2:	7068      	strb	r0, [r5, #1]
    54b4:	2000      	movs	r0, #0
    54b6:	bd70      	pop	{r4, r5, r6, pc}
    54b8:	f06f 0015 	mvn.w	r0, #21
    54bc:	bd70      	pop	{r4, r5, r6, pc}
    54be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    54c2:	bd70      	pop	{r4, r5, r6, pc}
    54c4:	20000098 	.word	0x20000098
    54c8:	20001144 	.word	0x20001144

000054cc <sdc_init>:
    54cc:	b530      	push	{r4, r5, lr}
    54ce:	b087      	sub	sp, #28
    54d0:	0005      	movs	r5, r0
    54d2:	d00c      	beq.n	54ee <sdc_init+0x22>
    54d4:	f7ff fdd0 	bl	5078 <mpsl_is_initialized>
    54d8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    54dc:	b120      	cbz	r0, 54e8 <sdc_init+0x1c>
    54de:	f7ff fc77 	bl	4dd0 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    54e2:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    54e6:	d905      	bls.n	54f4 <sdc_init+0x28>
    54e8:	4620      	mov	r0, r4
    54ea:	b007      	add	sp, #28
    54ec:	bd30      	pop	{r4, r5, pc}
    54ee:	f06f 0015 	mvn.w	r0, #21
    54f2:	e7fa      	b.n	54ea <sdc_init+0x1e>
    54f4:	4c15      	ldr	r4, [pc, #84]	; (554c <sdc_init+0x80>)
    54f6:	4816      	ldr	r0, [pc, #88]	; (5550 <sdc_init+0x84>)
    54f8:	6065      	str	r5, [r4, #4]
    54fa:	f000 f9f5 	bl	58e8 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    54fe:	2000      	movs	r0, #0
    5500:	7060      	strb	r0, [r4, #1]
    5502:	70a0      	strb	r0, [r4, #2]
    5504:	70e0      	strb	r0, [r4, #3]
    5506:	4601      	mov	r1, r0
    5508:	2218      	movs	r2, #24
    550a:	4668      	mov	r0, sp
    550c:	f008 fa26 	bl	d95c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5510:	2218      	movs	r2, #24
    5512:	4910      	ldr	r1, [pc, #64]	; (5554 <sdc_init+0x88>)
    5514:	4668      	mov	r0, sp
    5516:	f008 f9a7 	bl	d868 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    551a:	2218      	movs	r2, #24
    551c:	4669      	mov	r1, sp
    551e:	480e      	ldr	r0, [pc, #56]	; (5558 <sdc_init+0x8c>)
    5520:	f008 f9a2 	bl	d868 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5524:	f3ef 8410 	mrs	r4, PRIMASK
    5528:	b672      	cpsid	i
    552a:	f06f 000c 	mvn.w	r0, #12
    552e:	f000 fd57 	bl	5fe0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    5532:	480a      	ldr	r0, [pc, #40]	; (555c <sdc_init+0x90>)
    5534:	f000 fe22 	bl	617c <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    5538:	b118      	cbz	r0, 5542 <sdc_init+0x76>
    553a:	219e      	movs	r1, #158	; 0x9e
    553c:	2003      	movs	r0, #3
    553e:	f000 f80f 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5542:	b904      	cbnz	r4, 5546 <sdc_init+0x7a>
    5544:	b662      	cpsie	i
    5546:	2000      	movs	r0, #0
    5548:	e7cf      	b.n	54ea <sdc_init+0x1e>
    554a:	0000      	.short	0x0000
    554c:	20000098 	.word	0x20000098
    5550:	00005339 	.word	0x00005339
    5554:	00005670 	.word	0x00005670
    5558:	20001144 	.word	0x20001144
    555c:	00005701 	.word	0x00005701

00005560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    5560:	b50e      	push	{r1, r2, r3, lr}
    5562:	b672      	cpsid	i
    5564:	4a15      	ldr	r2, [pc, #84]	; (55bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    5566:	6855      	ldr	r5, [r2, #4]
    5568:	b1dd      	cbz	r5, 55a2 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x42>
    556a:	2200      	movs	r2, #0
    556c:	4603      	mov	r3, r0
    556e:	466e      	mov	r6, sp
    5570:	240a      	movs	r4, #10
    5572:	e003      	b.n	557c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    5574:	fbb0 f0f4 	udiv	r0, r0, r4
    5578:	1c52      	adds	r2, r2, #1
    557a:	b2d2      	uxtb	r2, r2
    557c:	2800      	cmp	r0, #0
    557e:	d1f9      	bne.n	5574 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    5580:	54b0      	strb	r0, [r6, r2]
    5582:	e00a      	b.n	559a <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x3a>
    5584:	b2d8      	uxtb	r0, r3
    5586:	fbb0 f7f4 	udiv	r7, r0, r4
    558a:	fbb3 f3f4 	udiv	r3, r3, r4
    558e:	fb04 0017 	mls	r0, r4, r7, r0
    5592:	1e52      	subs	r2, r2, #1
    5594:	b2d2      	uxtb	r2, r2
    5596:	3030      	adds	r0, #48	; 0x30
    5598:	54b0      	strb	r0, [r6, r2]
    559a:	2a00      	cmp	r2, #0
    559c:	d1f2      	bne.n	5584 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    559e:	4630      	mov	r0, r6
    55a0:	47a8      	blx	r5
    55a2:	f3bf 8f4f 	dsb	sy
    55a6:	4806      	ldr	r0, [pc, #24]	; (55c0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    55a8:	6801      	ldr	r1, [r0, #0]
    55aa:	4a06      	ldr	r2, [pc, #24]	; (55c4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    55ac:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    55b0:	4311      	orrs	r1, r2
    55b2:	6001      	str	r1, [r0, #0]
    55b4:	f3bf 8f4f 	dsb	sy
    55b8:	bf00      	nop
    55ba:	e7fd      	b.n	55b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x58>
    55bc:	20000098 	.word	0x20000098
    55c0:	e000ed0c 	.word	0xe000ed0c
    55c4:	05fa0004 	.word	0x05fa0004

000055c8 <sdc_support_adv>:
    55c8:	4806      	ldr	r0, [pc, #24]	; (55e4 <sdc_support_adv+0x1c>)
    55ca:	b510      	push	{r4, lr}
    55cc:	7881      	ldrb	r1, [r0, #2]
    55ce:	7840      	ldrb	r0, [r0, #1]
    55d0:	4301      	orrs	r1, r0
    55d2:	d002      	beq.n	55da <sdc_support_adv+0x12>
    55d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    55d8:	bd10      	pop	{r4, pc}
    55da:	f006 f9cf 	bl	b97c <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>
    55de:	2000      	movs	r0, #0
    55e0:	bd10      	pop	{r4, pc}
    55e2:	0000      	.short	0x0000
    55e4:	20000098 	.word	0x20000098

000055e8 <sdc_support_dle_peripheral>:
    55e8:	4806      	ldr	r0, [pc, #24]	; (5604 <sdc_support_dle_peripheral+0x1c>)
    55ea:	b510      	push	{r4, lr}
    55ec:	7881      	ldrb	r1, [r0, #2]
    55ee:	7840      	ldrb	r0, [r0, #1]
    55f0:	4301      	orrs	r1, r0
    55f2:	d002      	beq.n	55fa <sdc_support_dle_peripheral+0x12>
    55f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    55f8:	bd10      	pop	{r4, pc}
    55fa:	f005 ff71 	bl	b4e0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI>
    55fe:	2000      	movs	r0, #0
    5600:	bd10      	pop	{r4, pc}
    5602:	0000      	.short	0x0000
    5604:	20000098 	.word	0x20000098

00005608 <sdc_support_le_2m_phy>:
    5608:	4807      	ldr	r0, [pc, #28]	; (5628 <sdc_support_le_2m_phy+0x20>)
    560a:	b510      	push	{r4, lr}
    560c:	7881      	ldrb	r1, [r0, #2]
    560e:	7840      	ldrb	r0, [r0, #1]
    5610:	4301      	orrs	r1, r0
    5612:	d002      	beq.n	561a <sdc_support_le_2m_phy+0x12>
    5614:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5618:	bd10      	pop	{r4, pc}
    561a:	f00b fd55 	bl	110c8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
    561e:	f00b fd63 	bl	110e8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA>
    5622:	2000      	movs	r0, #0
    5624:	bd10      	pop	{r4, pc}
    5626:	0000      	.short	0x0000
    5628:	20000098 	.word	0x20000098

0000562c <sdc_support_peripheral>:
    562c:	4806      	ldr	r0, [pc, #24]	; (5648 <sdc_support_peripheral+0x1c>)
    562e:	b510      	push	{r4, lr}
    5630:	7881      	ldrb	r1, [r0, #2]
    5632:	7840      	ldrb	r0, [r0, #1]
    5634:	4301      	orrs	r1, r0
    5636:	d002      	beq.n	563e <sdc_support_peripheral+0x12>
    5638:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    563c:	bd10      	pop	{r4, pc}
    563e:	f006 f9af 	bl	b9a0 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>
    5642:	2000      	movs	r0, #0
    5644:	bd10      	pop	{r4, pc}
    5646:	0000      	.short	0x0000
    5648:	20000098 	.word	0x20000098

0000564c <sdc_support_phy_update_peripheral>:
    564c:	4806      	ldr	r0, [pc, #24]	; (5668 <sdc_support_phy_update_peripheral+0x1c>)
    564e:	b510      	push	{r4, lr}
    5650:	7881      	ldrb	r1, [r0, #2]
    5652:	7840      	ldrb	r0, [r0, #1]
    5654:	4301      	orrs	r1, r0
    5656:	d002      	beq.n	565e <sdc_support_phy_update_peripheral+0x12>
    5658:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    565c:	bd10      	pop	{r4, pc}
    565e:	f00b fd43 	bl	110e8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA>
    5662:	2000      	movs	r0, #0
    5664:	bd10      	pop	{r4, pc}
    5666:	0000      	.short	0x0000
    5668:	20000098 	.word	0x20000098
    566c:	00000001 	.word	0x00000001
    5670:	00010101 	.word	0x00010101
    5674:	031b1b00 	.word	0x031b1b00
    5678:	00000002 	.word	0x00000002
    567c:	00001d4c 	.word	0x00001d4c
    5680:	001f0003 	.word	0x001f0003
    5684:	00000000 	.word	0x00000000
    5688:	6f5fe7f2 	.word	0x6f5fe7f2
    568c:	e8f3a223 	.word	0xe8f3a223
    5690:	35c32f10 	.word	0x35c32f10
    5694:	fe1dd79e 	.word	0xfe1dd79e
    5698:	f942808f 	.word	0xf942808f

0000569c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
    569c:	4a05      	ldr	r2, [pc, #20]	; (56b4 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
    569e:	b510      	push	{r4, lr}
    56a0:	6852      	ldr	r2, [r2, #4]
    56a2:	b112      	cbz	r2, 56aa <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
    56a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    56a8:	4710      	bx	r2
    56aa:	2192      	movs	r1, #146	; 0x92
    56ac:	2004      	movs	r0, #4
    56ae:	f7ff ff57 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    56b2:	0000      	.short	0x0000
    56b4:	2000115c 	.word	0x2000115c

000056b8 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
    56b8:	4a05      	ldr	r2, [pc, #20]	; (56d0 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
    56ba:	b510      	push	{r4, lr}
    56bc:	6892      	ldr	r2, [r2, #8]
    56be:	b112      	cbz	r2, 56c6 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
    56c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    56c4:	4710      	bx	r2
    56c6:	2198      	movs	r1, #152	; 0x98
    56c8:	2004      	movs	r0, #4
    56ca:	f7ff ff49 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    56ce:	0000      	.short	0x0000
    56d0:	2000115c 	.word	0x2000115c

000056d4 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
    56d4:	4805      	ldr	r0, [pc, #20]	; (56ec <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
    56d6:	6801      	ldr	r1, [r0, #0]
    56d8:	b129      	cbz	r1, 56e6 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    56da:	6841      	ldr	r1, [r0, #4]
    56dc:	b119      	cbz	r1, 56e6 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    56de:	6880      	ldr	r0, [r0, #8]
    56e0:	b108      	cbz	r0, 56e6 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    56e2:	2001      	movs	r0, #1
    56e4:	4770      	bx	lr
    56e6:	2000      	movs	r0, #0
    56e8:	4770      	bx	lr
    56ea:	0000      	.short	0x0000
    56ec:	2000115c 	.word	0x2000115c

000056f0 <sdc_rand_source_register>:
    56f0:	4902      	ldr	r1, [pc, #8]	; (56fc <sdc_rand_source_register+0xc>)
    56f2:	c80d      	ldmia	r0, {r0, r2, r3}
    56f4:	e881 000d 	stmia.w	r1, {r0, r2, r3}
    56f8:	2000      	movs	r0, #0
    56fa:	4770      	bx	lr
    56fc:	2000115c 	.word	0x2000115c

00005700 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    5700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5702:	4c12      	ldr	r4, [pc, #72]	; (574c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    5704:	2600      	movs	r6, #0
    5706:	6825      	ldr	r5, [r4, #0]
    5708:	e011      	b.n	572e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    570a:	9800      	ldr	r0, [sp, #0]
    570c:	2802      	cmp	r0, #2
    570e:	d002      	beq.n	5716 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    5710:	2803      	cmp	r0, #3
    5712:	d10c      	bne.n	572e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    5714:	e006      	b.n	5724 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    5716:	6820      	ldr	r0, [r4, #0]
    5718:	b110      	cbz	r0, 5720 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    571a:	2000      	movs	r0, #0
    571c:	6026      	str	r6, [r4, #0]
    571e:	e005      	b.n	572c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    5720:	2128      	movs	r1, #40	; 0x28
    5722:	e00c      	b.n	573e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    5724:	6820      	ldr	r0, [r4, #0]
    5726:	b168      	cbz	r0, 5744 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    5728:	2001      	movs	r0, #1
    572a:	6026      	str	r6, [r4, #0]
    572c:	47a8      	blx	r5
    572e:	4668      	mov	r0, sp
    5730:	f000 fcf6 	bl	6120 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    5734:	2800      	cmp	r0, #0
    5736:	d0e8      	beq.n	570a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    5738:	2805      	cmp	r0, #5
    573a:	d005      	beq.n	5748 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    573c:	2135      	movs	r1, #53	; 0x35
    573e:	2004      	movs	r0, #4
    5740:	f7ff ff0e 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5744:	212d      	movs	r1, #45	; 0x2d
    5746:	e7fa      	b.n	573e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    5748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    574a:	0000      	.short	0x0000
    574c:	200000a0 	.word	0x200000a0
    5750:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    5752:	4c1f      	ldr	r4, [pc, #124]	; (57d0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd0>)
    5754:	4605      	mov	r5, r0
    5756:	7820      	ldrb	r0, [r4, #0]
    5758:	b140      	cbz	r0, 576c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x6c>
    575a:	78a2      	ldrb	r2, [r4, #2]
    575c:	1c61      	adds	r1, r4, #1
    575e:	4628      	mov	r0, r5
    5760:	1c92      	adds	r2, r2, #2
    5762:	f008 f881 	bl	d868 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5766:	2000      	movs	r0, #0
    5768:	7020      	strb	r0, [r4, #0]
    576a:	e021      	b.n	57b0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb0>
    576c:	4819      	ldr	r0, [pc, #100]	; (57d4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    576e:	f001 ff43 	bl	75f8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    5772:	2800      	cmp	r0, #0
    5774:	d01d      	beq.n	57b2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    5776:	4c17      	ldr	r4, [pc, #92]	; (57d4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    5778:	7820      	ldrb	r0, [r4, #0]
    577a:	2811      	cmp	r0, #17
    577c:	d104      	bne.n	5788 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x88>
    577e:	210a      	movs	r1, #10
    5780:	203e      	movs	r0, #62	; 0x3e
    5782:	f008 fa18 	bl	dbb6 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    5786:	b118      	cbz	r0, 5790 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x90>
    5788:	7820      	ldrb	r0, [r4, #0]
    578a:	2808      	cmp	r0, #8
    578c:	d005      	beq.n	579a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x9a>
    578e:	e009      	b.n	57a4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa4>
    5790:	4910      	ldr	r1, [pc, #64]	; (57d4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    5792:	4628      	mov	r0, r5
    5794:	f008 fc18 	bl	dfc8 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>
    5798:	e00a      	b.n	57b0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb0>
    579a:	2105      	movs	r1, #5
    579c:	203e      	movs	r0, #62	; 0x3e
    579e:	f008 fa0a 	bl	dbb6 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    57a2:	b138      	cbz	r0, 57b4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb4>
    57a4:	490b      	ldr	r1, [pc, #44]	; (57d4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    57a6:	4628      	mov	r0, r5
    57a8:	f008 fa61 	bl	dc6e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    57ac:	2800      	cmp	r0, #0
    57ae:	d000      	beq.n	57b2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    57b0:	2001      	movs	r0, #1
    57b2:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    57b4:	88a0      	ldrh	r0, [r4, #4]
    57b6:	f8ad 0000 	strh.w	r0, [sp]
    57ba:	a901      	add	r1, sp, #4
    57bc:	4668      	mov	r0, sp
    57be:	f008 fd32 	bl	e226 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
    57c2:	2800      	cmp	r0, #0
    57c4:	d0f5      	beq.n	57b2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    57c6:	219c      	movs	r1, #156	; 0x9c
    57c8:	2008      	movs	r0, #8
    57ca:	f7ff fec9 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    57ce:	0000      	.short	0x0000
    57d0:	200012fa 	.word	0x200012fa
    57d4:	200011f8 	.word	0x200011f8
    57d8:	b570      	push	{r4, r5, r6, lr}
    57da:	780a      	ldrb	r2, [r1, #0]
    57dc:	7082      	strb	r2, [r0, #2]
    57de:	b33a      	cbz	r2, 5830 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x130>
    57e0:	2a01      	cmp	r2, #1
    57e2:	d825      	bhi.n	5830 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x130>
    57e4:	2313      	movs	r3, #19
    57e6:	7003      	strb	r3, [r0, #0]
    57e8:	2300      	movs	r3, #0
    57ea:	e00a      	b.n	5802 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x102>
    57ec:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    57f0:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    57f4:	78a6      	ldrb	r6, [r4, #2]
    57f6:	70ee      	strb	r6, [r5, #3]
    57f8:	8864      	ldrh	r4, [r4, #2]
    57fa:	0a24      	lsrs	r4, r4, #8
    57fc:	1c5b      	adds	r3, r3, #1
    57fe:	712c      	strb	r4, [r5, #4]
    5800:	b2db      	uxtb	r3, r3
    5802:	4293      	cmp	r3, r2
    5804:	d3f2      	bcc.n	57ec <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xec>
    5806:	2300      	movs	r3, #0
    5808:	e00b      	b.n	5822 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x122>
    580a:	bf00      	nop
    580c:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    5810:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    5814:	792e      	ldrb	r6, [r5, #4]
    5816:	7166      	strb	r6, [r4, #5]
    5818:	88ad      	ldrh	r5, [r5, #4]
    581a:	0a2d      	lsrs	r5, r5, #8
    581c:	1c5b      	adds	r3, r3, #1
    581e:	71a5      	strb	r5, [r4, #6]
    5820:	b2db      	uxtb	r3, r3
    5822:	4293      	cmp	r3, r2
    5824:	d3f2      	bcc.n	580c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x10c>
    5826:	2101      	movs	r1, #1
    5828:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    582c:	b2c0      	uxtb	r0, r0
    582e:	bd70      	pop	{r4, r5, r6, pc}
    5830:	2000      	movs	r0, #0
    5832:	bd70      	pop	{r4, r5, r6, pc}

00005834 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    5834:	2840      	cmp	r0, #64	; 0x40
    5836:	d203      	bcs.n	5840 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0xc>
    5838:	1e40      	subs	r0, r0, #1
    583a:	b2c1      	uxtb	r1, r0
    583c:	4805      	ldr	r0, [pc, #20]	; (5854 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
    583e:	e005      	b.n	584c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x18>
    5840:	28ff      	cmp	r0, #255	; 0xff
    5842:	d005      	beq.n	5850 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1c>
    5844:	3840      	subs	r0, #64	; 0x40
    5846:	b2c1      	uxtb	r1, r0
    5848:	4802      	ldr	r0, [pc, #8]	; (5854 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
    584a:	3008      	adds	r0, #8
    584c:	f008 bbe6 	b.w	e01c <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y+0x54>
    5850:	2001      	movs	r0, #1
    5852:	4770      	bx	lr
    5854:	200000a4 	.word	0x200000a4

00005858 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    5858:	1e40      	subs	r0, r0, #1
    585a:	b2c1      	uxtb	r1, r0
    585c:	4801      	ldr	r0, [pc, #4]	; (5864 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0xc>)
    585e:	f008 bbdd 	b.w	e01c <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y+0x54>
    5862:	0000      	.short	0x0000
    5864:	200000b4 	.word	0x200000b4

00005868 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    5868:	4902      	ldr	r1, [pc, #8]	; (5874 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0xc>)
    586a:	6802      	ldr	r2, [r0, #0]
    586c:	610a      	str	r2, [r1, #16]
    586e:	6840      	ldr	r0, [r0, #4]
    5870:	6148      	str	r0, [r1, #20]
    5872:	4770      	bx	lr
    5874:	200000a4 	.word	0x200000a4

00005878 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    5878:	4905      	ldr	r1, [pc, #20]	; (5890 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
    587a:	6802      	ldr	r2, [r0, #0]
    587c:	600a      	str	r2, [r1, #0]
    587e:	6840      	ldr	r0, [r0, #4]
    5880:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
    5884:	600a      	str	r2, [r1, #0]
    5886:	4a03      	ldr	r2, [pc, #12]	; (5894 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x1c>)
    5888:	4310      	orrs	r0, r2
    588a:	6048      	str	r0, [r1, #4]
    588c:	4770      	bx	lr
    588e:	0000      	.short	0x0000
    5890:	200000a4 	.word	0x200000a4
    5894:	024007f8 	.word	0x024007f8

00005898 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
    5898:	4902      	ldr	r1, [pc, #8]	; (58a4 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0xc>)
    589a:	6802      	ldr	r2, [r0, #0]
    589c:	608a      	str	r2, [r1, #8]
    589e:	6840      	ldr	r0, [r0, #4]
    58a0:	60c8      	str	r0, [r1, #12]
    58a2:	4770      	bx	lr
    58a4:	200000a4 	.word	0x200000a4

000058a8 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    58a8:	4807      	ldr	r0, [pc, #28]	; (58c8 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x20>)
    58aa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    58ae:	2200      	movs	r2, #0
    58b0:	6001      	str	r1, [r0, #0]
    58b2:	0cc9      	lsrs	r1, r1, #19
    58b4:	6041      	str	r1, [r0, #4]
    58b6:	f100 0108 	add.w	r1, r0, #8
    58ba:	201f      	movs	r0, #31
    58bc:	600a      	str	r2, [r1, #0]
    58be:	604a      	str	r2, [r1, #4]
    58c0:	3108      	adds	r1, #8
    58c2:	e9c1 0200 	strd	r0, r2, [r1]
    58c6:	4770      	bx	lr
    58c8:	200000a4 	.word	0x200000a4

000058cc <sdc_hci_cmd_cb_reset>:
    58cc:	b510      	push	{r4, lr}
    58ce:	f7ff ffeb 	bl	58a8 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    58d2:	f00b fb72 	bl	10fba <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    58d6:	4604      	mov	r4, r0
    58d8:	4802      	ldr	r0, [pc, #8]	; (58e4 <sdc_hci_cmd_cb_reset+0x18>)
    58da:	6800      	ldr	r0, [r0, #0]
    58dc:	b100      	cbz	r0, 58e0 <sdc_hci_cmd_cb_reset+0x14>
    58de:	4780      	blx	r0
    58e0:	4620      	mov	r0, r4
    58e2:	bd10      	pop	{r4, pc}
    58e4:	200000bc 	.word	0x200000bc

000058e8 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    58e8:	4901      	ldr	r1, [pc, #4]	; (58f0 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    58ea:	6008      	str	r0, [r1, #0]
    58ec:	4770      	bx	lr
    58ee:	0000      	.short	0x0000
    58f0:	200000bc 	.word	0x200000bc

000058f4 <sdc_hci_cmd_vs_zephyr_read_version_info>:
    58f4:	2102      	movs	r1, #2
    58f6:	8001      	strh	r1, [r0, #0]
    58f8:	8041      	strh	r1, [r0, #2]
    58fa:	2100      	movs	r1, #0
    58fc:	7101      	strb	r1, [r0, #4]
    58fe:	21f2      	movs	r1, #242	; 0xf2
    5900:	7141      	strb	r1, [r0, #5]
    5902:	f645 71e7 	movw	r1, #24551	; 0x5fe7
    5906:	80c1      	strh	r1, [r0, #6]
    5908:	4901      	ldr	r1, [pc, #4]	; (5910 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    590a:	6081      	str	r1, [r0, #8]
    590c:	2000      	movs	r0, #0
    590e:	4770      	bx	lr
    5910:	f3a2236f 	.word	0xf3a2236f

00005914 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    5914:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    5916:	4604      	mov	r4, r0
    5918:	4669      	mov	r1, sp
    591a:	f008 ffd3 	bl	e8c4 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    591e:	b170      	cbz	r0, 593e <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    5920:	f240 215a 	movw	r1, #602	; 0x25a
    5924:	e008      	b.n	5938 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x24>
    5926:	bf00      	nop
    5928:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    592c:	4621      	mov	r1, r4
    592e:	f000 f8ab 	bl	5a88 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    5932:	b120      	cbz	r0, 593e <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    5934:	f240 215f 	movw	r1, #607	; 0x25f
    5938:	2017      	movs	r0, #23
    593a:	f7ff fe11 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    593e:	4668      	mov	r0, sp
    5940:	f000 f852 	bl	59e8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    5944:	2800      	cmp	r0, #0
    5946:	d0ef      	beq.n	5928 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x14>
    5948:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

0000594c <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
    594c:	b510      	push	{r4, lr}
    594e:	2802      	cmp	r0, #2
    5950:	d304      	bcc.n	595c <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x10>
    5952:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    5956:	2017      	movs	r0, #23
    5958:	f7ff fe02 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    595c:	4901      	ldr	r1, [pc, #4]	; (5964 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x18>)
    595e:	5c08      	ldrb	r0, [r1, r0]
    5960:	bd10      	pop	{r4, pc}
    5962:	0000      	.short	0x0000
    5964:	20001168 	.word	0x20001168

00005968 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    5968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    596a:	0005      	movs	r5, r0
    596c:	9500      	str	r5, [sp, #0]
    596e:	d010      	beq.n	5992 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2a>
    5970:	2600      	movs	r6, #0
    5972:	7808      	ldrb	r0, [r1, #0]
    5974:	7849      	ldrb	r1, [r1, #1]
    5976:	4604      	mov	r4, r0
    5978:	42a1      	cmp	r1, r4
    597a:	d900      	bls.n	597e <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x16>
    597c:	460c      	mov	r4, r1
    597e:	1cea      	adds	r2, r5, #3
    5980:	f022 0203 	bic.w	r2, r2, #3
    5984:	42aa      	cmp	r2, r5
    5986:	d006      	beq.n	5996 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2e>
    5988:	f240 1179 	movw	r1, #377	; 0x179
    598c:	2017      	movs	r0, #23
    598e:	f7ff fde7 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5992:	2601      	movs	r6, #1
    5994:	e7ed      	b.n	5972 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xa>
    5996:	4f13      	ldr	r7, [pc, #76]	; (59e4 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x7c>)
    5998:	7038      	strb	r0, [r7, #0]
    599a:	7079      	strb	r1, [r7, #1]
    599c:	4631      	mov	r1, r6
    599e:	4668      	mov	r0, sp
    59a0:	f000 f8ee 	bl	5b80 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf8>
    59a4:	2100      	movs	r1, #0
    59a6:	460b      	mov	r3, r1
    59a8:	9800      	ldr	r0, [sp, #0]
    59aa:	1cc0      	adds	r0, r0, #3
    59ac:	f020 0003 	bic.w	r0, r0, #3
    59b0:	9000      	str	r0, [sp, #0]
    59b2:	b96e      	cbnz	r6, 59d0 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x68>
    59b4:	eb07 0281 	add.w	r2, r7, r1, lsl #2
    59b8:	60d0      	str	r0, [r2, #12]
    59ba:	2000      	movs	r0, #0
    59bc:	e006      	b.n	59cc <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x64>
    59be:	bf00      	nop
    59c0:	f8d2 c00c 	ldr.w	ip, [r2, #12]
    59c4:	f84c 3020 	str.w	r3, [ip, r0, lsl #2]
    59c8:	1c40      	adds	r0, r0, #1
    59ca:	b2c0      	uxtb	r0, r0
    59cc:	42a0      	cmp	r0, r4
    59ce:	d3f7      	bcc.n	59c0 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x58>
    59d0:	9800      	ldr	r0, [sp, #0]
    59d2:	1c49      	adds	r1, r1, #1
    59d4:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    59d8:	b2c9      	uxtb	r1, r1
    59da:	9000      	str	r0, [sp, #0]
    59dc:	2902      	cmp	r1, #2
    59de:	d3e3      	bcc.n	59a8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x40>
    59e0:	1b40      	subs	r0, r0, r5
    59e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    59e4:	20001168 	.word	0x20001168

000059e8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    59e8:	b570      	push	{r4, r5, r6, lr}
    59ea:	4604      	mov	r4, r0
    59ec:	f009 f919 	bl	ec22 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    59f0:	b108      	cbz	r0, 59f6 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0xe>
    59f2:	2010      	movs	r0, #16
    59f4:	bd70      	pop	{r4, r5, r6, pc}
    59f6:	7825      	ldrb	r5, [r4, #0]
    59f8:	f000 f8fe 	bl	5bf8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    59fc:	4602      	mov	r2, r0
    59fe:	480c      	ldr	r0, [pc, #48]	; (5a30 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x48>)
    5a00:	8861      	ldrh	r1, [r4, #2]
    5a02:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    5a06:	e00e      	b.n	5a26 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3e>
    5a08:	68c3      	ldr	r3, [r0, #12]
    5a0a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    5a0e:	b143      	cbz	r3, 5a22 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    5a10:	1c4a      	adds	r2, r1, #1
    5a12:	8062      	strh	r2, [r4, #2]
    5a14:	80a1      	strh	r1, [r4, #4]
    5a16:	68c0      	ldr	r0, [r0, #12]
    5a18:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    5a1c:	60a0      	str	r0, [r4, #8]
    5a1e:	2000      	movs	r0, #0
    5a20:	bd70      	pop	{r4, r5, r6, pc}
    5a22:	1c49      	adds	r1, r1, #1
    5a24:	b289      	uxth	r1, r1
    5a26:	4291      	cmp	r1, r2
    5a28:	d3ee      	bcc.n	5a08 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x20>
    5a2a:	8061      	strh	r1, [r4, #2]
    5a2c:	2005      	movs	r0, #5
    5a2e:	bd70      	pop	{r4, r5, r6, pc}
    5a30:	20001168 	.word	0x20001168

00005a34 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    5a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5a38:	b121      	cbz	r1, 5a44 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
    5a3a:	2901      	cmp	r1, #1
    5a3c:	d002      	beq.n	5a44 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
    5a3e:	2000      	movs	r0, #0
    5a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5a44:	4c0f      	ldr	r4, [pc, #60]	; (5a84 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>)
    5a46:	2700      	movs	r7, #0
    5a48:	463b      	mov	r3, r7
    5a4a:	f64f 76ff 	movw	r6, #65535	; 0xffff
    5a4e:	eb04 0581 	add.w	r5, r4, r1, lsl #2
    5a52:	f814 c001 	ldrb.w	ip, [r4, r1]
    5a56:	e00a      	b.n	5a6e <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x3a>
    5a58:	19dc      	adds	r4, r3, r7
    5a5a:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    5a5e:	b2a4      	uxth	r4, r4
    5a60:	f85e e024 	ldr.w	lr, [lr, r4, lsl #2]
    5a64:	f1be 0f00 	cmp.w	lr, #0
    5a68:	d004      	beq.n	5a74 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x40>
    5a6a:	1c5b      	adds	r3, r3, #1
    5a6c:	b29b      	uxth	r3, r3
    5a6e:	459c      	cmp	ip, r3
    5a70:	d8f2      	bhi.n	5a58 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x24>
    5a72:	4634      	mov	r4, r6
    5a74:	8004      	strh	r4, [r0, #0]
    5a76:	4620      	mov	r0, r4
    5a78:	42b4      	cmp	r4, r6
    5a7a:	d0e0      	beq.n	5a3e <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xa>
    5a7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5a80:	f000 b834 	b.w	5aec <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>
    5a84:	20001168 	.word	0x20001168

00005a88 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    5a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5a8c:	4606      	mov	r6, r0
    5a8e:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    5a92:	460c      	mov	r4, r1
    5a94:	f243 0702 	movw	r7, #12290	; 0x3002
    5a98:	38ff      	subs	r0, #255	; 0xff
    5a9a:	d020      	beq.n	5ade <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    5a9c:	2c02      	cmp	r4, #2
    5a9e:	d302      	bcc.n	5aa6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1e>
    5aa0:	2007      	movs	r0, #7
    5aa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5aa6:	4630      	mov	r0, r6
    5aa8:	f000 f85a 	bl	5b60 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>
    5aac:	0005      	movs	r5, r0
    5aae:	d016      	beq.n	5ade <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    5ab0:	480c      	ldr	r0, [pc, #48]	; (5ae4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x5c>)
    5ab2:	4629      	mov	r1, r5
    5ab4:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
    5ab8:	4630      	mov	r0, r6
    5aba:	4790      	blx	r2
    5abc:	480a      	ldr	r0, [pc, #40]	; (5ae8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x60>)
    5abe:	2100      	movs	r1, #0
    5ac0:	eb00 0784 	add.w	r7, r0, r4, lsl #2
    5ac4:	68f8      	ldr	r0, [r7, #12]
    5ac6:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
    5aca:	4620      	mov	r0, r4
    5acc:	f000 f88a 	bl	5be4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    5ad0:	4602      	mov	r2, r0
    5ad2:	4629      	mov	r1, r5
    5ad4:	6878      	ldr	r0, [r7, #4]
    5ad6:	f008 fed4 	bl	e882 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    5ada:	2000      	movs	r0, #0
    5adc:	e7e1      	b.n	5aa2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    5ade:	4638      	mov	r0, r7
    5ae0:	e7df      	b.n	5aa2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    5ae2:	0000      	.short	0x0000
    5ae4:	00005c18 	.word	0x00005c18
    5ae8:	20001168 	.word	0x20001168
    5aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5af0:	4690      	mov	r8, r2
    5af2:	460d      	mov	r5, r1
    5af4:	4607      	mov	r7, r0
    5af6:	f008 fef6 	bl	e8e6 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    5afa:	b148      	cbz	r0, 5b10 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x88>
    5afc:	4816      	ldr	r0, [pc, #88]	; (5b58 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd0>)
    5afe:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    5b02:	68f0      	ldr	r0, [r6, #12]
    5b04:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
    5b08:	b128      	cbz	r0, 5b16 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x8e>
    5b0a:	f44f 719d 	mov.w	r1, #314	; 0x13a
    5b0e:	e015      	b.n	5b3c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    5b10:	f240 1139 	movw	r1, #313	; 0x139
    5b14:	e012      	b.n	5b3c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    5b16:	6870      	ldr	r0, [r6, #4]
    5b18:	2800      	cmp	r0, #0
    5b1a:	d01a      	beq.n	5b52 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xca>
    5b1c:	4628      	mov	r0, r5
    5b1e:	f000 f861 	bl	5be4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    5b22:	4601      	mov	r1, r0
    5b24:	6870      	ldr	r0, [r6, #4]
    5b26:	f008 fe54 	bl	e7d2 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    5b2a:	0004      	movs	r4, r0
    5b2c:	d010      	beq.n	5b50 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc8>
    5b2e:	68f0      	ldr	r0, [r6, #12]
    5b30:	2d02      	cmp	r5, #2
    5b32:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
    5b36:	d304      	bcc.n	5b42 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xba>
    5b38:	f240 1145 	movw	r1, #325	; 0x145
    5b3c:	2017      	movs	r0, #23
    5b3e:	f7ff fd0f 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5b42:	4806      	ldr	r0, [pc, #24]	; (5b5c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd4>)
    5b44:	4642      	mov	r2, r8
    5b46:	4621      	mov	r1, r4
    5b48:	f850 3025 	ldr.w	r3, [r0, r5, lsl #2]
    5b4c:	4638      	mov	r0, r7
    5b4e:	4798      	blx	r3
    5b50:	4620      	mov	r0, r4
    5b52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5b56:	0000      	.short	0x0000
    5b58:	20001168 	.word	0x20001168
    5b5c:	00005c10 	.word	0x00005c10
    5b60:	b570      	push	{r4, r5, r6, lr}
    5b62:	460c      	mov	r4, r1
    5b64:	4605      	mov	r5, r0
    5b66:	f008 febe 	bl	e8e6 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    5b6a:	2800      	cmp	r0, #0
    5b6c:	d005      	beq.n	5b7a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf2>
    5b6e:	4803      	ldr	r0, [pc, #12]	; (5b7c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf4>)
    5b70:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    5b74:	68c0      	ldr	r0, [r0, #12]
    5b76:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    5b7a:	bd70      	pop	{r4, r5, r6, pc}
    5b7c:	20001168 	.word	0x20001168
    5b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5b84:	4e16      	ldr	r6, [pc, #88]	; (5be0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x158>)
    5b86:	4688      	mov	r8, r1
    5b88:	4605      	mov	r5, r0
    5b8a:	2400      	movs	r4, #0
    5b8c:	6828      	ldr	r0, [r5, #0]
    5b8e:	1cc0      	adds	r0, r0, #3
    5b90:	f020 0003 	bic.w	r0, r0, #3
    5b94:	6028      	str	r0, [r5, #0]
    5b96:	4620      	mov	r0, r4
    5b98:	f000 f824 	bl	5be4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    5b9c:	5d31      	ldrb	r1, [r6, r4]
    5b9e:	4348      	muls	r0, r1
    5ba0:	f1b8 0f00 	cmp.w	r8, #0
    5ba4:	d001      	beq.n	5baa <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x122>
    5ba6:	2200      	movs	r2, #0
    5ba8:	e000      	b.n	5bac <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x124>
    5baa:	682a      	ldr	r2, [r5, #0]
    5bac:	4601      	mov	r1, r0
    5bae:	9200      	str	r2, [sp, #0]
    5bb0:	b132      	cbz	r2, 5bc0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    5bb2:	2700      	movs	r7, #0
    5bb4:	ea4f 000d 	mov.w	r0, sp
    5bb8:	f008 fe3c 	bl	e834 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    5bbc:	b11f      	cbz	r7, 5bc6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x13e>
    5bbe:	e006      	b.n	5bce <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x146>
    5bc0:	2701      	movs	r7, #1
    5bc2:	2000      	movs	r0, #0
    5bc4:	e7f8      	b.n	5bb8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x130>
    5bc6:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    5bca:	9a00      	ldr	r2, [sp, #0]
    5bcc:	604a      	str	r2, [r1, #4]
    5bce:	6829      	ldr	r1, [r5, #0]
    5bd0:	1c64      	adds	r4, r4, #1
    5bd2:	4408      	add	r0, r1
    5bd4:	b2e4      	uxtb	r4, r4
    5bd6:	6028      	str	r0, [r5, #0]
    5bd8:	2c02      	cmp	r4, #2
    5bda:	d3d7      	bcc.n	5b8c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x104>
    5bdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5be0:	20001168 	.word	0x20001168
    5be4:	4903      	ldr	r1, [pc, #12]	; (5bf4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x16c>)
    5be6:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    5bea:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    5bee:	1cc0      	adds	r0, r0, #3
    5bf0:	4008      	ands	r0, r1
    5bf2:	4770      	bx	lr
    5bf4:	00005c0c 	.word	0x00005c0c
    5bf8:	4903      	ldr	r1, [pc, #12]	; (5c08 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x180>)
    5bfa:	7808      	ldrb	r0, [r1, #0]
    5bfc:	7849      	ldrb	r1, [r1, #1]
    5bfe:	4288      	cmp	r0, r1
    5c00:	d200      	bcs.n	5c04 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x17c>
    5c02:	4608      	mov	r0, r1
    5c04:	4770      	bx	lr
    5c06:	0000      	.short	0x0000
    5c08:	20001168 	.word	0x20001168
    5c0c:	011002a0 	.word	0x011002a0
    5c10:	0000e8fb 	.word	0x0000e8fb
    5c14:	0000e8fb 	.word	0x0000e8fb
    5c18:	0001074b 	.word	0x0001074b
    5c1c:	0000fa6b 	.word	0x0000fa6b

00005c20 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    5c20:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5c24:	4c27      	ldr	r4, [pc, #156]	; (5cc4 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0xa4>)
    5c26:	4606      	mov	r6, r0
    5c28:	b081      	sub	sp, #4
    5c2a:	6820      	ldr	r0, [r4, #0]
    5c2c:	469a      	mov	sl, r3
    5c2e:	4693      	mov	fp, r2
    5c30:	b158      	cbz	r0, 5c4a <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    5c32:	7a01      	ldrb	r1, [r0, #8]
    5c34:	42b1      	cmp	r1, r6
    5c36:	d903      	bls.n	5c40 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    5c38:	6840      	ldr	r0, [r0, #4]
    5c3a:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    5c3e:	b140      	cbz	r0, 5c52 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    5c40:	f243 0002 	movw	r0, #12290	; 0x3002
    5c44:	b005      	add	sp, #20
    5c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5c4a:	21a5      	movs	r1, #165	; 0xa5
    5c4c:	2018      	movs	r0, #24
    5c4e:	f7ff fc87 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5c52:	4619      	mov	r1, r3
    5c54:	9802      	ldr	r0, [sp, #8]
    5c56:	f008 fe6a 	bl	e92e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    5c5a:	4680      	mov	r8, r0
    5c5c:	4658      	mov	r0, fp
    5c5e:	990e      	ldr	r1, [sp, #56]	; 0x38
    5c60:	f008 fe5b 	bl	e91a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    5c64:	4605      	mov	r5, r0
    5c66:	eb08 0005 	add.w	r0, r8, r5
    5c6a:	1d00      	adds	r0, r0, #4
    5c6c:	b287      	uxth	r7, r0
    5c6e:	6820      	ldr	r0, [r4, #0]
    5c70:	46a1      	mov	r9, r4
    5c72:	4639      	mov	r1, r7
    5c74:	6800      	ldr	r0, [r0, #0]
    5c76:	f008 fdac 	bl	e7d2 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    5c7a:	0004      	movs	r4, r0
    5c7c:	d01f      	beq.n	5cbe <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x9e>
    5c7e:	8067      	strh	r7, [r4, #2]
    5c80:	8025      	strh	r5, [r4, #0]
    5c82:	4629      	mov	r1, r5
    5c84:	1d20      	adds	r0, r4, #4
    5c86:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    5c88:	4607      	mov	r7, r0
    5c8a:	465a      	mov	r2, fp
    5c8c:	2301      	movs	r3, #1
    5c8e:	9500      	str	r5, [sp, #0]
    5c90:	f008 fcfe 	bl	e690 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    5c94:	8820      	ldrh	r0, [r4, #0]
    5c96:	4641      	mov	r1, r8
    5c98:	4438      	add	r0, r7
    5c9a:	230a      	movs	r3, #10
    5c9c:	9a02      	ldr	r2, [sp, #8]
    5c9e:	f8cd a000 	str.w	sl, [sp]
    5ca2:	f008 fcf5 	bl	e690 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    5ca6:	8820      	ldrh	r0, [r4, #0]
    5ca8:	19c1      	adds	r1, r0, r7
    5caa:	4638      	mov	r0, r7
    5cac:	f008 fd21 	bl	e6f2 <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>
    5cb0:	f8d9 0000 	ldr.w	r0, [r9]
    5cb4:	6840      	ldr	r0, [r0, #4]
    5cb6:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
    5cba:	2000      	movs	r0, #0
    5cbc:	e7c2      	b.n	5c44 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    5cbe:	2004      	movs	r0, #4
    5cc0:	e7c0      	b.n	5c44 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    5cc2:	0000      	.short	0x0000
    5cc4:	200000c0 	.word	0x200000c0

00005cc8 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    5cc8:	b570      	push	{r4, r5, r6, lr}
    5cca:	4c14      	ldr	r4, [pc, #80]	; (5d1c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    5ccc:	6823      	ldr	r3, [r4, #0]
    5cce:	b18b      	cbz	r3, 5cf4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    5cd0:	7a19      	ldrb	r1, [r3, #8]
    5cd2:	4281      	cmp	r1, r0
    5cd4:	d912      	bls.n	5cfc <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    5cd6:	685a      	ldr	r2, [r3, #4]
    5cd8:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    5cdc:	b171      	cbz	r1, 5cfc <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    5cde:	2500      	movs	r5, #0
    5ce0:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    5ce4:	884a      	ldrh	r2, [r1, #2]
    5ce6:	6818      	ldr	r0, [r3, #0]
    5ce8:	f008 fdcb 	bl	e882 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    5cec:	6821      	ldr	r1, [r4, #0]
    5cee:	2000      	movs	r0, #0
    5cf0:	7a0a      	ldrb	r2, [r1, #8]
    5cf2:	e00c      	b.n	5d0e <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    5cf4:	21c8      	movs	r1, #200	; 0xc8
    5cf6:	2018      	movs	r0, #24
    5cf8:	f7ff fc32 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5cfc:	f243 0002 	movw	r0, #12290	; 0x3002
    5d00:	bd70      	pop	{r4, r5, r6, pc}
    5d02:	684b      	ldr	r3, [r1, #4]
    5d04:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5d08:	b933      	cbnz	r3, 5d18 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    5d0a:	1c40      	adds	r0, r0, #1
    5d0c:	b2c0      	uxtb	r0, r0
    5d0e:	4282      	cmp	r2, r0
    5d10:	d8f7      	bhi.n	5d02 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    5d12:	6808      	ldr	r0, [r1, #0]
    5d14:	f008 fdaa 	bl	e86c <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    5d18:	2000      	movs	r0, #0
    5d1a:	bd70      	pop	{r4, r5, r6, pc}
    5d1c:	200000c0 	.word	0x200000c0

00005d20 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    5d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5d24:	460d      	mov	r5, r1
    5d26:	0004      	movs	r4, r0
    5d28:	4690      	mov	r8, r2
    5d2a:	f04f 0600 	mov.w	r6, #0
    5d2e:	d009      	beq.n	5d44 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x24>
    5d30:	2700      	movs	r7, #0
    5d32:	1ce0      	adds	r0, r4, #3
    5d34:	f020 0003 	bic.w	r0, r0, #3
    5d38:	42a0      	cmp	r0, r4
    5d3a:	d005      	beq.n	5d48 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x28>
    5d3c:	2186      	movs	r1, #134	; 0x86
    5d3e:	2018      	movs	r0, #24
    5d40:	f7ff fc0e 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5d44:	2701      	movs	r7, #1
    5d46:	e7f4      	b.n	5d32 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    5d48:	b1cd      	cbz	r5, 5d7e <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    5d4a:	4611      	mov	r1, r2
    5d4c:	2000      	movs	r0, #0
    5d4e:	f008 fd71 	bl	e834 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    5d52:	300c      	adds	r0, #12
    5d54:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    5d58:	b98f      	cbnz	r7, 5d7e <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    5d5a:	4f0a      	ldr	r7, [pc, #40]	; (5d84 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x64>)
    5d5c:	f104 000c 	add.w	r0, r4, #12
    5d60:	00aa      	lsls	r2, r5, #2
    5d62:	603c      	str	r4, [r7, #0]
    5d64:	7225      	strb	r5, [r4, #8]
    5d66:	6060      	str	r0, [r4, #4]
    5d68:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    5d6c:	6020      	str	r0, [r4, #0]
    5d6e:	2100      	movs	r1, #0
    5d70:	6860      	ldr	r0, [r4, #4]
    5d72:	f007 fdf3 	bl	d95c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5d76:	4641      	mov	r1, r8
    5d78:	6838      	ldr	r0, [r7, #0]
    5d7a:	f008 fd5b 	bl	e834 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    5d7e:	4630      	mov	r0, r6
    5d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5d84:	200000c0 	.word	0x200000c0

00005d88 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    5d88:	b570      	push	{r4, r5, r6, lr}
    5d8a:	4d08      	ldr	r5, [pc, #32]	; (5dac <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    5d8c:	6828      	ldr	r0, [r5, #0]
    5d8e:	2800      	cmp	r0, #0
    5d90:	d00a      	beq.n	5da8 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    5d92:	2400      	movs	r4, #0
    5d94:	e004      	b.n	5da0 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    5d96:	4620      	mov	r0, r4
    5d98:	f7ff ff96 	bl	5cc8 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    5d9c:	1c64      	adds	r4, r4, #1
    5d9e:	b2e4      	uxtb	r4, r4
    5da0:	6828      	ldr	r0, [r5, #0]
    5da2:	7a00      	ldrb	r0, [r0, #8]
    5da4:	42a0      	cmp	r0, r4
    5da6:	d8f6      	bhi.n	5d96 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    5da8:	bd70      	pop	{r4, r5, r6, pc}
    5daa:	0000      	.short	0x0000
    5dac:	200000c0 	.word	0x200000c0

00005db0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    5db0:	4909      	ldr	r1, [pc, #36]	; (5dd8 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    5db2:	b510      	push	{r4, lr}
    5db4:	4602      	mov	r2, r0
    5db6:	6809      	ldr	r1, [r1, #0]
    5db8:	2000      	movs	r0, #0
    5dba:	b149      	cbz	r1, 5dd0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    5dbc:	7a0b      	ldrb	r3, [r1, #8]
    5dbe:	4293      	cmp	r3, r2
    5dc0:	d905      	bls.n	5dce <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    5dc2:	6849      	ldr	r1, [r1, #4]
    5dc4:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    5dc8:	2900      	cmp	r1, #0
    5dca:	d000      	beq.n	5dce <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    5dcc:	1d08      	adds	r0, r1, #4
    5dce:	bd10      	pop	{r4, pc}
    5dd0:	21ee      	movs	r1, #238	; 0xee
    5dd2:	2018      	movs	r0, #24
    5dd4:	f7ff fbc4 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5dd8:	200000c0 	.word	0x200000c0

00005ddc <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    5ddc:	490a      	ldr	r1, [pc, #40]	; (5e08 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    5dde:	b510      	push	{r4, lr}
    5de0:	4602      	mov	r2, r0
    5de2:	6809      	ldr	r1, [r1, #0]
    5de4:	2000      	movs	r0, #0
    5de6:	b159      	cbz	r1, 5e00 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    5de8:	7a0b      	ldrb	r3, [r1, #8]
    5dea:	4293      	cmp	r3, r2
    5dec:	d907      	bls.n	5dfe <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    5dee:	6849      	ldr	r1, [r1, #4]
    5df0:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    5df4:	2900      	cmp	r1, #0
    5df6:	d002      	beq.n	5dfe <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    5df8:	f831 0b04 	ldrh.w	r0, [r1], #4
    5dfc:	4408      	add	r0, r1
    5dfe:	bd10      	pop	{r4, pc}
    5e00:	21fc      	movs	r1, #252	; 0xfc
    5e02:	2018      	movs	r0, #24
    5e04:	f7ff fbac 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5e08:	200000c0 	.word	0x200000c0
    5e0c:	b570      	push	{r4, r5, r6, lr}
    5e0e:	4b1e      	ldr	r3, [pc, #120]	; (5e88 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xac>)
    5e10:	6845      	ldr	r5, [r0, #4]
    5e12:	4604      	mov	r4, r0
    5e14:	2200      	movs	r2, #0
    5e16:	b1a1      	cbz	r1, 5e42 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x66>
    5e18:	2001      	movs	r0, #1
    5e1a:	7060      	strb	r0, [r4, #1]
    5e1c:	8858      	ldrh	r0, [r3, #2]
    5e1e:	0881      	lsrs	r1, r0, #2
    5e20:	f05f 0000 	movs.w	r0, #0
    5e24:	eb04 0340 	add.w	r3, r4, r0, lsl #1
    5e28:	eb04 0680 	add.w	r6, r4, r0, lsl #2
    5e2c:	831a      	strh	r2, [r3, #24]
    5e2e:	8419      	strh	r1, [r3, #32]
    5e30:	fb00 5301 	mla	r3, r0, r1, r5
    5e34:	6073      	str	r3, [r6, #4]
    5e36:	1823      	adds	r3, r4, r0
    5e38:	1c40      	adds	r0, r0, #1
    5e3a:	751a      	strb	r2, [r3, #20]
    5e3c:	2804      	cmp	r0, #4
    5e3e:	d3f1      	bcc.n	5e24 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x48>
    5e40:	bd70      	pop	{r4, r5, r6, pc}
    5e42:	7062      	strb	r2, [r4, #1]
    5e44:	f05f 0000 	movs.w	r0, #0
    5e48:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    5e4c:	830a      	strh	r2, [r1, #24]
    5e4e:	840a      	strh	r2, [r1, #32]
    5e50:	eb04 0180 	add.w	r1, r4, r0, lsl #2
    5e54:	604a      	str	r2, [r1, #4]
    5e56:	1821      	adds	r1, r4, r0
    5e58:	1c40      	adds	r0, r0, #1
    5e5a:	750a      	strb	r2, [r1, #20]
    5e5c:	2804      	cmp	r0, #4
    5e5e:	d3f3      	bcc.n	5e48 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x6c>
    5e60:	8858      	ldrh	r0, [r3, #2]
    5e62:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    5e66:	d201      	bcs.n	5e6c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x90>
    5e68:	0846      	lsrs	r6, r0, #1
    5e6a:	e000      	b.n	5e6e <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x92>
    5e6c:	26ff      	movs	r6, #255	; 0xff
    5e6e:	f008 fdd2 	bl	ea16 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11a>
    5e72:	6065      	str	r5, [r4, #4]
    5e74:	8420      	strh	r0, [r4, #32]
    5e76:	1829      	adds	r1, r5, r0
    5e78:	60a1      	str	r1, [r4, #8]
    5e7a:	8466      	strh	r6, [r4, #34]	; 0x22
    5e7c:	60e5      	str	r5, [r4, #12]
    5e7e:	84a0      	strh	r0, [r4, #36]	; 0x24
    5e80:	6121      	str	r1, [r4, #16]
    5e82:	84e6      	strh	r6, [r4, #38]	; 0x26
    5e84:	bd70      	pop	{r4, r5, r6, pc}
    5e86:	0000      	.short	0x0000
    5e88:	200000c4 	.word	0x200000c4

00005e8c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>:
    5e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5e90:	b170      	cbz	r0, 5eb0 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x24>
    5e92:	2500      	movs	r5, #0
    5e94:	4411      	add	r1, r2
    5e96:	b2cc      	uxtb	r4, r1
    5e98:	4e25      	ldr	r6, [pc, #148]	; (5f30 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0xa4>)
    5e9a:	1cc1      	adds	r1, r0, #3
    5e9c:	2700      	movs	r7, #0
    5e9e:	f021 0103 	bic.w	r1, r1, #3
    5ea2:	7034      	strb	r4, [r6, #0]
    5ea4:	4281      	cmp	r1, r0
    5ea6:	d005      	beq.n	5eb4 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x28>
    5ea8:	214e      	movs	r1, #78	; 0x4e
    5eaa:	2009      	movs	r0, #9
    5eac:	f7ff fb58 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5eb0:	2501      	movs	r5, #1
    5eb2:	e7ef      	b.n	5e94 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8>
    5eb4:	2b1f      	cmp	r3, #31
    5eb6:	d804      	bhi.n	5ec2 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x36>
    5eb8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    5ebc:	ea01 0183 	and.w	r1, r1, r3, lsl #2
    5ec0:	e009      	b.n	5ed6 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x4a>
    5ec2:	0059      	lsls	r1, r3, #1
    5ec4:	2bff      	cmp	r3, #255	; 0xff
    5ec6:	d90c      	bls.n	5ee2 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x56>
    5ec8:	f103 02ff 	add.w	r2, r3, #255	; 0xff
    5ecc:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    5ed0:	d200      	bcs.n	5ed4 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
    5ed2:	4611      	mov	r1, r2
    5ed4:	b289      	uxth	r1, r1
    5ed6:	f64f 72fc 	movw	r2, #65532	; 0xfffc
    5eda:	1cc9      	adds	r1, r1, #3
    5edc:	4011      	ands	r1, r2
    5ede:	b135      	cbz	r5, 5eee <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x62>
    5ee0:	e007      	b.n	5ef2 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x66>
    5ee2:	227c      	movs	r2, #124	; 0x7c
    5ee4:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    5ee8:	d3f4      	bcc.n	5ed4 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
    5eea:	217c      	movs	r1, #124	; 0x7c
    5eec:	e7f2      	b.n	5ed4 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
    5eee:	6070      	str	r0, [r6, #4]
    5ef0:	8071      	strh	r1, [r6, #2]
    5ef2:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    5ef6:	eb07 03c2 	add.w	r3, r7, r2, lsl #3
    5efa:	2200      	movs	r2, #0
    5efc:	6876      	ldr	r6, [r6, #4]
    5efe:	f04f 0c01 	mov.w	ip, #1
    5f02:	e00d      	b.n	5f20 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x94>
    5f04:	b94d      	cbnz	r5, 5f1a <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8e>
    5f06:	eb02 0782 	add.w	r7, r2, r2, lsl #2
    5f0a:	eb00 0e03 	add.w	lr, r0, r3
    5f0e:	f806 c037 	strb.w	ip, [r6, r7, lsl #3]
    5f12:	eb06 07c7 	add.w	r7, r6, r7, lsl #3
    5f16:	f8c7 e004 	str.w	lr, [r7, #4]
    5f1a:	1c52      	adds	r2, r2, #1
    5f1c:	440b      	add	r3, r1
    5f1e:	b2d2      	uxtb	r2, r2
    5f20:	42a2      	cmp	r2, r4
    5f22:	d3ef      	bcc.n	5f04 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x78>
    5f24:	1ddb      	adds	r3, r3, #7
    5f26:	f023 0007 	bic.w	r0, r3, #7
    5f2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5f2e:	0000      	.short	0x0000
    5f30:	200000c4 	.word	0x200000c4

00005f34 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>:
    5f34:	b570      	push	{r4, r5, r6, lr}
    5f36:	4a10      	ldr	r2, [pc, #64]	; (5f78 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x44>)
    5f38:	2000      	movs	r0, #0
    5f3a:	6851      	ldr	r1, [r2, #4]
    5f3c:	7812      	ldrb	r2, [r2, #0]
    5f3e:	e014      	b.n	5f6a <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x36>
    5f40:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    5f44:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
    5f48:	b16b      	cbz	r3, 5f66 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x32>
    5f4a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    5f4e:	eb11 04c0 	adds.w	r4, r1, r0, lsl #3
    5f52:	d00c      	beq.n	5f6e <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x3a>
    5f54:	2500      	movs	r5, #0
    5f56:	70a5      	strb	r5, [r4, #2]
    5f58:	2101      	movs	r1, #1
    5f5a:	4620      	mov	r0, r4
    5f5c:	f7ff ff56 	bl	5e0c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    5f60:	7025      	strb	r5, [r4, #0]
    5f62:	4620      	mov	r0, r4
    5f64:	bd70      	pop	{r4, r5, r6, pc}
    5f66:	1c40      	adds	r0, r0, #1
    5f68:	b2c0      	uxtb	r0, r0
    5f6a:	4290      	cmp	r0, r2
    5f6c:	d3e8      	bcc.n	5f40 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xc>
    5f6e:	21a9      	movs	r1, #169	; 0xa9
    5f70:	2009      	movs	r0, #9
    5f72:	f7ff faf5 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5f76:	0000      	.short	0x0000
    5f78:	200000c4 	.word	0x200000c4

00005f7c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>:
    5f7c:	4804      	ldr	r0, [pc, #16]	; (5f90 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x14>)
    5f7e:	b510      	push	{r4, lr}
    5f80:	8840      	ldrh	r0, [r0, #2]
    5f82:	0884      	lsrs	r4, r0, #2
    5f84:	f008 fd47 	bl	ea16 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11a>
    5f88:	4284      	cmp	r4, r0
    5f8a:	d300      	bcc.n	5f8e <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x12>
    5f8c:	4620      	mov	r0, r4
    5f8e:	bd10      	pop	{r4, pc}
    5f90:	200000c4 	.word	0x200000c4
    5f94:	b530      	push	{r4, r5, lr}
    5f96:	490d      	ldr	r1, [pc, #52]	; (5fcc <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x50>)
    5f98:	2001      	movs	r0, #1
    5f9a:	6048      	str	r0, [r1, #4]
    5f9c:	1e82      	subs	r2, r0, #2
    5f9e:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    5fa2:	490b      	ldr	r1, [pc, #44]	; (5fd0 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x54>)
    5fa4:	6088      	str	r0, [r1, #8]
    5fa6:	2300      	movs	r3, #0
    5fa8:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    5fac:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    5fb0:	4c08      	ldr	r4, [pc, #32]	; (5fd4 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x58>)
    5fb2:	6023      	str	r3, [r4, #0]
    5fb4:	1d25      	adds	r5, r4, #4
    5fb6:	6028      	str	r0, [r5, #0]
    5fb8:	6088      	str	r0, [r1, #8]
    5fba:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    5fbe:	6023      	str	r3, [r4, #0]
    5fc0:	6028      	str	r0, [r5, #0]
    5fc2:	4906      	ldr	r1, [pc, #24]	; (5fdc <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x60>)
    5fc4:	4804      	ldr	r0, [pc, #16]	; (5fd8 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x5c>)
    5fc6:	6008      	str	r0, [r1, #0]
    5fc8:	bd30      	pop	{r4, r5, pc}
    5fca:	0000      	.short	0x0000
    5fcc:	4000e000 	.word	0x4000e000
    5fd0:	4000f000 	.word	0x4000f000
    5fd4:	4000f500 	.word	0x4000f500
    5fd8:	3ff60000 	.word	0x3ff60000
    5fdc:	4001f508 	.word	0x4001f508

00005fe0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    5fe0:	b510      	push	{r4, lr}
    5fe2:	4604      	mov	r4, r0
    5fe4:	f7ff ffd6 	bl	5f94 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    5fe8:	f008 fde8 	bl	ebbc <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x42>
    5fec:	f000 f888 	bl	6100 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    5ff0:	4905      	ldr	r1, [pc, #20]	; (6008 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x28>)
    5ff2:	4804      	ldr	r0, [pc, #16]	; (6004 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x24>)
    5ff4:	6008      	str	r0, [r1, #0]
    5ff6:	4620      	mov	r0, r4
    5ff8:	f000 f8b8 	bl	616c <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    5ffc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6000:	f000 b8d0 	b.w	61a4 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    6004:	3ff60000 	.word	0x3ff60000
    6008:	4001f508 	.word	0x4001f508
    600c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6010:	4682      	mov	sl, r0
    6012:	4838      	ldr	r0, [pc, #224]	; (60f4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>)
    6014:	f007 fb91 	bl	d73a <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    6018:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 60f4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>
    601c:	b128      	cbz	r0, 602a <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x4a>
    601e:	2601      	movs	r6, #1
    6020:	f10b 0001 	add.w	r0, fp, #1
    6024:	21ff      	movs	r1, #255	; 0xff
    6026:	7001      	strb	r1, [r0, #0]
    6028:	e000      	b.n	602c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x4c>
    602a:	2600      	movs	r6, #0
    602c:	f44f 7580 	mov.w	r5, #256	; 0x100
    6030:	4c31      	ldr	r4, [pc, #196]	; (60f8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x118>)
    6032:	f04f 0800 	mov.w	r8, #0
    6036:	1d2f      	adds	r7, r5, #4
    6038:	2101      	movs	r1, #1
    603a:	6061      	str	r1, [r4, #4]
    603c:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    6040:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    6044:	f8c4 a504 	str.w	sl, [r4, #1284]	; 0x504
    6048:	6021      	str	r1, [r4, #0]
    604a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 60fc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x11c>
    604e:	e01c      	b.n	608a <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
    6050:	f8d9 0000 	ldr.w	r0, [r9]
    6054:	06c0      	lsls	r0, r0, #27
    6056:	d518      	bpl.n	608a <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
    6058:	200e      	movs	r0, #14
    605a:	f008 fdbe 	bl	ebda <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    605e:	f3ef 8010 	mrs	r0, PRIMASK
    6062:	9000      	str	r0, [sp, #0]
    6064:	b672      	cpsid	i
    6066:	2103      	movs	r1, #3
    6068:	4620      	mov	r0, r4
    606a:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
    606e:	4629      	mov	r1, r5
    6070:	f008 fdc0 	bl	ebf4 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    6074:	b930      	cbnz	r0, 6084 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa4>
    6076:	4639      	mov	r1, r7
    6078:	4620      	mov	r0, r4
    607a:	f008 fdbb 	bl	ebf4 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    607e:	b908      	cbnz	r0, 6084 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa4>
    6080:	f7ff f8c8 	bl	5214 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    6084:	9800      	ldr	r0, [sp, #0]
    6086:	b900      	cbnz	r0, 608a <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
    6088:	b662      	cpsie	i
    608a:	4629      	mov	r1, r5
    608c:	4620      	mov	r0, r4
    608e:	f008 fdb1 	bl	ebf4 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    6092:	b928      	cbnz	r0, 60a0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xc0>
    6094:	4639      	mov	r1, r7
    6096:	4620      	mov	r0, r4
    6098:	f008 fdac 	bl	ebf4 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    609c:	2800      	cmp	r0, #0
    609e:	d0d7      	beq.n	6050 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x70>
    60a0:	4639      	mov	r1, r7
    60a2:	4620      	mov	r0, r4
    60a4:	f008 fda6 	bl	ebf4 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    60a8:	2800      	cmp	r0, #0
    60aa:	d1c5      	bne.n	6038 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x58>
    60ac:	bb06      	cbnz	r6, 60f0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
    60ae:	f89b 1001 	ldrb.w	r1, [fp, #1]
    60b2:	f88d 1000 	strb.w	r1, [sp]
    60b6:	9900      	ldr	r1, [sp, #0]
    60b8:	9100      	str	r1, [sp, #0]
    60ba:	f89d 1000 	ldrb.w	r1, [sp]
    60be:	b109      	cbz	r1, 60c4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe4>
    60c0:	2501      	movs	r5, #1
    60c2:	e000      	b.n	60c6 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe6>
    60c4:	2500      	movs	r5, #0
    60c6:	f10b 0001 	add.w	r0, fp, #1
    60ca:	f880 8000 	strb.w	r8, [r0]
    60ce:	2003      	movs	r0, #3
    60d0:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    60d4:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    60d8:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    60dc:	200e      	movs	r0, #14
    60de:	f008 fd7c 	bl	ebda <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    60e2:	4804      	ldr	r0, [pc, #16]	; (60f4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>)
    60e4:	f007 fb40 	bl	d768 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    60e8:	b115      	cbz	r5, 60f0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
    60ea:	2011      	movs	r0, #17
    60ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    60f0:	2000      	movs	r0, #0
    60f2:	e7fb      	b.n	60ec <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
    60f4:	2000032c 	.word	0x2000032c
    60f8:	4000e000 	.word	0x4000e000
    60fc:	e000ed10 	.word	0xe000ed10

00006100 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    6100:	b510      	push	{r4, lr}
    6102:	4806      	ldr	r0, [pc, #24]	; (611c <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    6104:	f007 fb2c 	bl	d760 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    6108:	b118      	cbz	r0, 6112 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x12>
    610a:	2127      	movs	r1, #39	; 0x27
    610c:	201d      	movs	r0, #29
    610e:	f7ff fa27 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6112:	4802      	ldr	r0, [pc, #8]	; (611c <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    6114:	2100      	movs	r1, #0
    6116:	7041      	strb	r1, [r0, #1]
    6118:	bd10      	pop	{r4, pc}
    611a:	0000      	.short	0x0000
    611c:	2000032c 	.word	0x2000032c

00006120 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    6120:	b570      	push	{r4, r5, r6, lr}
    6122:	4911      	ldr	r1, [pc, #68]	; (6168 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    6124:	680a      	ldr	r2, [r1, #0]
    6126:	b1ea      	cbz	r2, 6164 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    6128:	2300      	movs	r3, #0
    612a:	461d      	mov	r5, r3
    612c:	2401      	movs	r4, #1
    612e:	684a      	ldr	r2, [r1, #4]
    6130:	1c52      	adds	r2, r2, #1
    6132:	604a      	str	r2, [r1, #4]
    6134:	2a09      	cmp	r2, #9
    6136:	d300      	bcc.n	613a <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    6138:	604d      	str	r5, [r1, #4]
    613a:	790e      	ldrb	r6, [r1, #4]
    613c:	fa04 f206 	lsl.w	r2, r4, r6
    6140:	680e      	ldr	r6, [r1, #0]
    6142:	4216      	tst	r6, r2
    6144:	d00b      	beq.n	615e <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    6146:	f3ef 8310 	mrs	r3, PRIMASK
    614a:	b672      	cpsid	i
    614c:	680c      	ldr	r4, [r1, #0]
    614e:	4394      	bics	r4, r2
    6150:	600c      	str	r4, [r1, #0]
    6152:	b903      	cbnz	r3, 6156 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    6154:	b662      	cpsie	i
    6156:	6849      	ldr	r1, [r1, #4]
    6158:	6001      	str	r1, [r0, #0]
    615a:	2000      	movs	r0, #0
    615c:	bd70      	pop	{r4, r5, r6, pc}
    615e:	1c5b      	adds	r3, r3, #1
    6160:	2b09      	cmp	r3, #9
    6162:	d3e4      	bcc.n	612e <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    6164:	2005      	movs	r0, #5
    6166:	bd70      	pop	{r4, r5, r6, pc}
    6168:	200000cc 	.word	0x200000cc

0000616c <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    616c:	4802      	ldr	r0, [pc, #8]	; (6178 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    616e:	2100      	movs	r1, #0
    6170:	6001      	str	r1, [r0, #0]
    6172:	6041      	str	r1, [r0, #4]
    6174:	4770      	bx	lr
    6176:	0000      	.short	0x0000
    6178:	200000cc 	.word	0x200000cc

0000617c <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    617c:	b510      	push	{r4, lr}
    617e:	4c08      	ldr	r4, [pc, #32]	; (61a0 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    6180:	7861      	ldrb	r1, [r4, #1]
    6182:	b109      	cbz	r1, 6188 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    6184:	200f      	movs	r0, #15
    6186:	bd10      	pop	{r4, pc}
    6188:	f7fe ffd0 	bl	512c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    618c:	7020      	strb	r0, [r4, #0]
    618e:	28ff      	cmp	r0, #255	; 0xff
    6190:	d001      	beq.n	6196 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    6192:	2000      	movs	r0, #0
    6194:	bd10      	pop	{r4, pc}
    6196:	2178      	movs	r1, #120	; 0x78
    6198:	201f      	movs	r0, #31
    619a:	f7ff f9e1 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    619e:	0000      	.short	0x0000
    61a0:	20000000 	.word	0x20000000

000061a4 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    61a4:	4901      	ldr	r1, [pc, #4]	; (61ac <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    61a6:	2000      	movs	r0, #0
    61a8:	7048      	strb	r0, [r1, #1]
    61aa:	4770      	bx	lr
    61ac:	20000000 	.word	0x20000000

000061b0 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    61b0:	4806      	ldr	r0, [pc, #24]	; (61cc <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    61b2:	4a07      	ldr	r2, [pc, #28]	; (61d0 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    61b4:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    61b6:	8852      	ldrh	r2, [r2, #2]
    61b8:	4291      	cmp	r1, r2
    61ba:	d104      	bne.n	61c6 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    61bc:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    61c0:	b108      	cbz	r0, 61c6 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    61c2:	2000      	movs	r0, #0
    61c4:	4770      	bx	lr
    61c6:	2001      	movs	r0, #1
    61c8:	4770      	bx	lr
    61ca:	0000      	.short	0x0000
    61cc:	200013fc 	.word	0x200013fc
    61d0:	20000318 	.word	0x20000318

000061d4 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    61d4:	4901      	ldr	r1, [pc, #4]	; (61dc <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    61d6:	8048      	strh	r0, [r1, #2]
    61d8:	4770      	bx	lr
    61da:	0000      	.short	0x0000
    61dc:	20000318 	.word	0x20000318

000061e0 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    61e0:	4808      	ldr	r0, [pc, #32]	; (6204 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    61e2:	4a09      	ldr	r2, [pc, #36]	; (6208 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    61e4:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    61e6:	8852      	ldrh	r2, [r2, #2]
    61e8:	4291      	cmp	r1, r2
    61ea:	d109      	bne.n	6200 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    61ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
    61f0:	8481      	strh	r1, [r0, #36]	; 0x24
    61f2:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    61f6:	b119      	cbz	r1, 6200 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    61f8:	2100      	movs	r1, #0
    61fa:	7001      	strb	r1, [r0, #0]
    61fc:	2001      	movs	r0, #1
    61fe:	4770      	bx	lr
    6200:	2000      	movs	r0, #0
    6202:	4770      	bx	lr
    6204:	200013fc 	.word	0x200013fc
    6208:	20000318 	.word	0x20000318

0000620c <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    620c:	4807      	ldr	r0, [pc, #28]	; (622c <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    620e:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    6212:	2901      	cmp	r1, #1
    6214:	d007      	beq.n	6226 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    6216:	2101      	movs	r1, #1
    6218:	7001      	strb	r1, [r0, #0]
    621a:	4805      	ldr	r0, [pc, #20]	; (6230 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    621c:	4903      	ldr	r1, [pc, #12]	; (622c <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    621e:	8800      	ldrh	r0, [r0, #0]
    6220:	8488      	strh	r0, [r1, #36]	; 0x24
    6222:	2001      	movs	r0, #1
    6224:	4770      	bx	lr
    6226:	2000      	movs	r0, #0
    6228:	4770      	bx	lr
    622a:	0000      	.short	0x0000
    622c:	200013fc 	.word	0x200013fc
    6230:	20000318 	.word	0x20000318

00006234 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    6234:	4906      	ldr	r1, [pc, #24]	; (6250 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    6236:	4b07      	ldr	r3, [pc, #28]	; (6254 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    6238:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    623a:	885b      	ldrh	r3, [r3, #2]
    623c:	429a      	cmp	r2, r3
    623e:	d105      	bne.n	624c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    6240:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    6244:	b112      	cbz	r2, 624c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    6246:	6001      	str	r1, [r0, #0]
    6248:	2001      	movs	r0, #1
    624a:	4770      	bx	lr
    624c:	2000      	movs	r0, #0
    624e:	4770      	bx	lr
    6250:	200013fc 	.word	0x200013fc
    6254:	20000318 	.word	0x20000318

00006258 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    6258:	4909      	ldr	r1, [pc, #36]	; (6280 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    625a:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    625c:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    6260:	3bff      	subs	r3, #255	; 0xff
    6262:	d002      	beq.n	626a <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    6264:	2100      	movs	r1, #0
    6266:	6001      	str	r1, [r0, #0]
    6268:	e007      	b.n	627a <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    626a:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    626e:	4904      	ldr	r1, [pc, #16]	; (6280 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    6270:	2a01      	cmp	r2, #1
    6272:	d002      	beq.n	627a <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    6274:	6001      	str	r1, [r0, #0]
    6276:	2001      	movs	r0, #1
    6278:	4770      	bx	lr
    627a:	2000      	movs	r0, #0
    627c:	4770      	bx	lr
    627e:	0000      	.short	0x0000
    6280:	200013fc 	.word	0x200013fc

00006284 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    6284:	4901      	ldr	r1, [pc, #4]	; (628c <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    6286:	8008      	strh	r0, [r1, #0]
    6288:	4770      	bx	lr
    628a:	0000      	.short	0x0000
    628c:	20000318 	.word	0x20000318

00006290 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    6290:	4905      	ldr	r1, [pc, #20]	; (62a8 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    6292:	2000      	movs	r0, #0
    6294:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    6298:	f64f 70ff 	movw	r0, #65535	; 0xffff
    629c:	8488      	strh	r0, [r1, #36]	; 0x24
    629e:	4903      	ldr	r1, [pc, #12]	; (62ac <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    62a0:	8008      	strh	r0, [r1, #0]
    62a2:	8048      	strh	r0, [r1, #2]
    62a4:	4770      	bx	lr
    62a6:	0000      	.short	0x0000
    62a8:	200013fc 	.word	0x200013fc
    62ac:	20000318 	.word	0x20000318
    62b0:	4905      	ldr	r1, [pc, #20]	; (62c8 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    62b2:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    62b4:	4282      	cmp	r2, r0
    62b6:	d105      	bne.n	62c4 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    62b8:	2000      	movs	r0, #0
    62ba:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    62be:	f64f 70ff 	movw	r0, #65535	; 0xffff
    62c2:	8488      	strh	r0, [r1, #36]	; 0x24
    62c4:	4770      	bx	lr
    62c6:	0000      	.short	0x0000
    62c8:	200013fc 	.word	0x200013fc

000062cc <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    62cc:	4a0a      	ldr	r2, [pc, #40]	; (62f8 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    62ce:	b110      	cbz	r0, 62d6 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    62d0:	2801      	cmp	r0, #1
    62d2:	d007      	beq.n	62e4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    62d4:	e00e      	b.n	62f4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    62d6:	7850      	ldrb	r0, [r2, #1]
    62d8:	b160      	cbz	r0, 62f4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    62da:	f8d2 0002 	ldr.w	r0, [r2, #2]
    62de:	6008      	str	r0, [r1, #0]
    62e0:	88d0      	ldrh	r0, [r2, #6]
    62e2:	e004      	b.n	62ee <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    62e4:	7810      	ldrb	r0, [r2, #0]
    62e6:	b128      	cbz	r0, 62f4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    62e8:	6890      	ldr	r0, [r2, #8]
    62ea:	6008      	str	r0, [r1, #0]
    62ec:	8990      	ldrh	r0, [r2, #12]
    62ee:	8088      	strh	r0, [r1, #4]
    62f0:	2001      	movs	r0, #1
    62f2:	4770      	bx	lr
    62f4:	2000      	movs	r0, #0
    62f6:	4770      	bx	lr
    62f8:	2000032e 	.word	0x2000032e

000062fc <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    62fc:	4a08      	ldr	r2, [pc, #32]	; (6320 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    62fe:	2301      	movs	r3, #1
    6300:	b138      	cbz	r0, 6312 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    6302:	2801      	cmp	r0, #1
    6304:	d104      	bne.n	6310 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    6306:	7013      	strb	r3, [r2, #0]
    6308:	6808      	ldr	r0, [r1, #0]
    630a:	6090      	str	r0, [r2, #8]
    630c:	8888      	ldrh	r0, [r1, #4]
    630e:	8190      	strh	r0, [r2, #12]
    6310:	4770      	bx	lr
    6312:	7053      	strb	r3, [r2, #1]
    6314:	6808      	ldr	r0, [r1, #0]
    6316:	f8c2 0002 	str.w	r0, [r2, #2]
    631a:	8888      	ldrh	r0, [r1, #4]
    631c:	80d0      	strh	r0, [r2, #6]
    631e:	4770      	bx	lr
    6320:	2000032e 	.word	0x2000032e

00006324 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    6324:	4906      	ldr	r1, [pc, #24]	; (6340 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    6326:	b110      	cbz	r0, 632e <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    6328:	2801      	cmp	r0, #1
    632a:	d002      	beq.n	6332 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    632c:	e005      	b.n	633a <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    632e:	7848      	ldrb	r0, [r1, #1]
    6330:	e000      	b.n	6334 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    6332:	7808      	ldrb	r0, [r1, #0]
    6334:	b108      	cbz	r0, 633a <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    6336:	2001      	movs	r0, #1
    6338:	4770      	bx	lr
    633a:	2000      	movs	r0, #0
    633c:	4770      	bx	lr
    633e:	0000      	.short	0x0000
    6340:	2000032e 	.word	0x2000032e

00006344 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    6344:	4901      	ldr	r1, [pc, #4]	; (634c <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    6346:	7708      	strb	r0, [r1, #28]
    6348:	4770      	bx	lr
    634a:	0000      	.short	0x0000
    634c:	20000cb2 	.word	0x20000cb2

00006350 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>:
    6350:	4801      	ldr	r0, [pc, #4]	; (6358 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ+0x8>)
    6352:	78c0      	ldrb	r0, [r0, #3]
    6354:	4770      	bx	lr
    6356:	0000      	.short	0x0000
    6358:	200000d4 	.word	0x200000d4

0000635c <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>:
    635c:	4801      	ldr	r0, [pc, #4]	; (6364 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY+0x8>)
    635e:	7900      	ldrb	r0, [r0, #4]
    6360:	4770      	bx	lr
    6362:	0000      	.short	0x0000
    6364:	200000d4 	.word	0x200000d4

00006368 <sym_TMJZXA73A2C5DMM5JAVJMETINB7KCHBEWVPWZQI>:
    6368:	4608      	mov	r0, r1
    636a:	2100      	movs	r1, #0
    636c:	7041      	strb	r1, [r0, #1]
    636e:	211a      	movs	r1, #26
    6370:	f800 1b04 	strb.w	r1, [r0], #4
    6374:	220e      	movs	r2, #14
    6376:	4901      	ldr	r1, [pc, #4]	; (637c <sym_TMJZXA73A2C5DMM5JAVJMETINB7KCHBEWVPWZQI+0x14>)
    6378:	f007 ba76 	b.w	d868 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    637c:	20000cc0 	.word	0x20000cc0

00006380 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
    6380:	b510      	push	{r4, lr}
    6382:	4604      	mov	r4, r0
    6384:	f000 f952 	bl	662c <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    6388:	b118      	cbz	r0, 6392 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x12>
    638a:	21c2      	movs	r1, #194	; 0xc2
    638c:	2027      	movs	r0, #39	; 0x27
    638e:	f7ff f8e7 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6392:	4803      	ldr	r0, [pc, #12]	; (63a0 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x20>)
    6394:	2101      	movs	r1, #1
    6396:	f009 f838 	bl	f40a <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    639a:	4802      	ldr	r0, [pc, #8]	; (63a4 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x24>)
    639c:	62c4      	str	r4, [r0, #44]	; 0x2c
    639e:	bd10      	pop	{r4, pc}
    63a0:	20000c90 	.word	0x20000c90
    63a4:	200000d4 	.word	0x200000d4

000063a8 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    63a8:	4901      	ldr	r1, [pc, #4]	; (63b0 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    63aa:	2001      	movs	r0, #1
    63ac:	7188      	strb	r0, [r1, #6]
    63ae:	4770      	bx	lr
    63b0:	200000d4 	.word	0x200000d4

000063b4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    63b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    63b8:	4c5e      	ldr	r4, [pc, #376]	; (6534 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x180>)
    63ba:	9d06      	ldr	r5, [sp, #24]
    63bc:	7826      	ldrb	r6, [r4, #0]
    63be:	2e00      	cmp	r6, #0
    63c0:	d16b      	bne.n	649a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    63c2:	2a00      	cmp	r2, #0
    63c4:	d069      	beq.n	649a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    63c6:	2b00      	cmp	r3, #0
    63c8:	d067      	beq.n	649a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    63ca:	2d00      	cmp	r5, #0
    63cc:	d065      	beq.n	649a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    63ce:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    63d2:	f104 0614 	add.w	r6, r4, #20
    63d6:	2000      	movs	r0, #0
    63d8:	e886 002c 	stmia.w	r6, {r2, r3, r5}
    63dc:	71a0      	strb	r0, [r4, #6]
    63de:	7160      	strb	r0, [r4, #5]
    63e0:	70e0      	strb	r0, [r4, #3]
    63e2:	70a0      	strb	r0, [r4, #2]
    63e4:	7120      	strb	r0, [r4, #4]
    63e6:	81a0      	strh	r0, [r4, #12]
    63e8:	81e0      	strh	r0, [r4, #14]
    63ea:	f000 f957 	bl	669c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    63ee:	4606      	mov	r6, r0
    63f0:	f000 f94e 	bl	6690 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    63f4:	4605      	mov	r5, r0
    63f6:	f005 ff35 	bl	c264 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    63fa:	f005 fc8d 	bl	bd18 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    63fe:	f995 0072 	ldrsb.w	r0, [r5, #114]	; 0x72
    6402:	f005 ffb3 	bl	c36c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    6406:	f105 001c 	add.w	r0, r5, #28
    640a:	f006 f885 	bl	c518 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    640e:	6968      	ldr	r0, [r5, #20]
    6410:	f006 f878 	bl	c504 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    6414:	f896 0024 	ldrb.w	r0, [r6, #36]	; 0x24
    6418:	f006 f8b2 	bl	c580 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    641c:	f104 0038 	add.w	r0, r4, #56	; 0x38
    6420:	6840      	ldr	r0, [r0, #4]
    6422:	f890 01c6 	ldrb.w	r0, [r0, #454]	; 0x1c6
    6426:	b108      	cbz	r0, 642c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x78>
    6428:	f005 fe9c 	bl	c164 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>
    642c:	f895 106f 	ldrb.w	r1, [r5, #111]	; 0x6f
    6430:	2001      	movs	r0, #1
    6432:	f005 fddb 	bl	bfec <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    6436:	2800      	cmp	r0, #0
    6438:	d075      	beq.n	6526 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x172>
    643a:	483f      	ldr	r0, [pc, #252]	; (6538 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x184>)
    643c:	f005 fe42 	bl	c0c4 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    6440:	8828      	ldrh	r0, [r5, #0]
    6442:	f7ff fccb 	bl	5ddc <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    6446:	6320      	str	r0, [r4, #48]	; 0x30
    6448:	8828      	ldrh	r0, [r5, #0]
    644a:	f7ff fcb1 	bl	5db0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    644e:	6360      	str	r0, [r4, #52]	; 0x34
    6450:	3678      	adds	r6, #120	; 0x78
    6452:	483a      	ldr	r0, [pc, #232]	; (653c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x188>)
    6454:	ce8e      	ldmia	r6!, {r1, r2, r3, r7}
    6456:	f100 0808 	add.w	r8, r0, #8
    645a:	e888 008e 	stmia.w	r8, {r1, r2, r3, r7}
    645e:	f856 1b04 	ldr.w	r1, [r6], #4
    6462:	f8c0 1021 	str.w	r1, [r0, #33]	; 0x21
    6466:	f856 198c 	ldr.w	r1, [r6], #-140
    646a:	f8c0 1025 	str.w	r1, [r0, #37]	; 0x25
    646e:	f000 f999 	bl	67a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x15c>
    6472:	4601      	mov	r1, r0
    6474:	8fa8      	ldrh	r0, [r5, #60]	; 0x3c
    6476:	f008 fd39 	bl	eeec <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    647a:	8f29      	ldrh	r1, [r5, #56]	; 0x38
    647c:	4281      	cmp	r1, r0
    647e:	d200      	bcs.n	6482 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xce>
    6480:	4608      	mov	r0, r1
    6482:	7220      	strb	r0, [r4, #8]
    6484:	46a0      	mov	r8, r4
    6486:	f895 106f 	ldrb.w	r1, [r5, #111]	; 0x6f
    648a:	f8b5 0042 	ldrh.w	r0, [r5, #66]	; 0x42
    648e:	7d37      	ldrb	r7, [r6, #20]
    6490:	f8b5 4040 	ldrh.w	r4, [r5, #64]	; 0x40
    6494:	2908      	cmp	r1, #8
    6496:	d104      	bne.n	64a2 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xee>
    6498:	e002      	b.n	64a0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xec>
    649a:	f44f 718d 	mov.w	r1, #282	; 0x11a
    649e:	e046      	b.n	652e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x17a>
    64a0:	2104      	movs	r1, #4
    64a2:	f008 fd23 	bl	eeec <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    64a6:	b90f      	cbnz	r7, 64ac <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xf8>
    64a8:	1d00      	adds	r0, r0, #4
    64aa:	b280      	uxth	r0, r0
    64ac:	4284      	cmp	r4, r0
    64ae:	d200      	bcs.n	64b2 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfe>
    64b0:	4620      	mov	r0, r4
    64b2:	b2c4      	uxtb	r4, r0
    64b4:	f888 4009 	strb.w	r4, [r8, #9]
    64b8:	7d31      	ldrb	r1, [r6, #20]
    64ba:	2900      	cmp	r1, #0
    64bc:	d002      	beq.n	64c4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x110>
    64be:	bf00      	nop
    64c0:	f04f 0104 	mov.w	r1, #4
    64c4:	4421      	add	r1, r4
    64c6:	f888 1007 	strb.w	r1, [r8, #7]
    64ca:	d014      	beq.n	64f6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x142>
    64cc:	481b      	ldr	r0, [pc, #108]	; (653c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x188>)
    64ce:	f04f 0701 	mov.w	r7, #1
    64d2:	f100 0008 	add.w	r0, r0, #8
    64d6:	7607      	strb	r7, [r0, #24]
    64d8:	e9d6 121c 	ldrd	r1, r2, [r6, #112]	; 0x70
    64dc:	e9c0 1204 	strd	r1, r2, [r0, #16]
    64e0:	f895 006f 	ldrb.w	r0, [r5, #111]	; 0x6f
    64e4:	f008 fc17 	bl	ed16 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    64e8:	4914      	ldr	r1, [pc, #80]	; (653c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x188>)
    64ea:	4603      	mov	r3, r0
    64ec:	4622      	mov	r2, r4
    64ee:	3108      	adds	r1, #8
    64f0:	4638      	mov	r0, r7
    64f2:	f005 fb7d 	bl	bbf0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    64f6:	2001      	movs	r0, #1
    64f8:	f000 fb9a 	bl	6c30 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e8>
    64fc:	4810      	ldr	r0, [pc, #64]	; (6540 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x18c>)
    64fe:	6800      	ldr	r0, [r0, #0]
    6500:	2803      	cmp	r0, #3
    6502:	d012      	beq.n	652a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x176>
    6504:	280b      	cmp	r0, #11
    6506:	d010      	beq.n	652a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x176>
    6508:	480c      	ldr	r0, [pc, #48]	; (653c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x188>)
    650a:	220e      	movs	r2, #14
    650c:	2100      	movs	r1, #0
    650e:	3052      	adds	r0, #82	; 0x52
    6510:	f007 fa24 	bl	d95c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6514:	4809      	ldr	r0, [pc, #36]	; (653c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x188>)
    6516:	88b1      	ldrh	r1, [r6, #4]
    6518:	3052      	adds	r0, #82	; 0x52
    651a:	8041      	strh	r1, [r0, #2]
    651c:	8829      	ldrh	r1, [r5, #0]
    651e:	8001      	strh	r1, [r0, #0]
    6520:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
    6524:	7101      	strb	r1, [r0, #4]
    6526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    652a:	f240 11d5 	movw	r1, #469	; 0x1d5
    652e:	2027      	movs	r0, #39	; 0x27
    6530:	f7ff f816 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6534:	200000d4 	.word	0x200000d4
    6538:	00006e30 	.word	0x00006e30
    653c:	20000c60 	.word	0x20000c60
    6540:	40001550 	.word	0x40001550

00006544 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    6544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6548:	4605      	mov	r5, r0
    654a:	f000 f8a7 	bl	669c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    654e:	4e32      	ldr	r6, [pc, #200]	; (6618 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xd4>)
    6550:	4604      	mov	r4, r0
    6552:	f04f 0800 	mov.w	r8, #0
    6556:	6a70      	ldr	r0, [r6, #36]	; 0x24
    6558:	7847      	ldrb	r7, [r0, #1]
    655a:	b10d      	cbz	r5, 6560 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x1c>
    655c:	2d01      	cmp	r5, #1
    655e:	d101      	bne.n	6564 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x20>
    6560:	f886 8001 	strb.w	r8, [r6, #1]
    6564:	7870      	ldrb	r0, [r6, #1]
    6566:	f04f 0901 	mov.w	r9, #1
    656a:	b150      	cbz	r0, 6582 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x3e>
    656c:	2801      	cmp	r0, #1
    656e:	d01a      	beq.n	65a6 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x62>
    6570:	2802      	cmp	r0, #2
    6572:	d034      	beq.n	65de <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x9a>
    6574:	2803      	cmp	r0, #3
    6576:	d048      	beq.n	660a <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc6>
    6578:	f240 411d 	movw	r1, #1053	; 0x41d
    657c:	2027      	movs	r0, #39	; 0x27
    657e:	f7fe ffef 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6582:	2d01      	cmp	r5, #1
    6584:	d032      	beq.n	65ec <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa8>
    6586:	f000 f8f9 	bl	677c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x134>
    658a:	4639      	mov	r1, r7
    658c:	2201      	movs	r2, #1
    658e:	6b70      	ldr	r0, [r6, #52]	; 0x34
    6590:	f007 ff1b 	bl	e3ca <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    6594:	e028      	b.n	65e8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa4>
    6596:	bf00      	nop
    6598:	f884 8008 	strb.w	r8, [r4, #8]
    659c:	e031      	b.n	6602 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xbe>
    659e:	bf00      	nop
    65a0:	f884 9008 	strb.w	r9, [r4, #8]
    65a4:	e02d      	b.n	6602 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xbe>
    65a6:	2d01      	cmp	r5, #1
    65a8:	d008      	beq.n	65bc <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x78>
    65aa:	f000 f8e7 	bl	677c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x134>
    65ae:	4639      	mov	r1, r7
    65b0:	2200      	movs	r2, #0
    65b2:	6b70      	ldr	r0, [r6, #52]	; 0x34
    65b4:	f007 ff09 	bl	e3ca <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    65b8:	2d02      	cmp	r5, #2
    65ba:	d00b      	beq.n	65d4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x90>
    65bc:	e9d4 011c 	ldrd	r0, r1, [r4, #112]	; 0x70
    65c0:	1c40      	adds	r0, r0, #1
    65c2:	f141 0100 	adc.w	r1, r1, #0
    65c6:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
    65ca:	7a20      	ldrb	r0, [r4, #8]
    65cc:	2801      	cmp	r0, #1
    65ce:	d003      	beq.n	65d8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    65d0:	f884 9008 	strb.w	r9, [r4, #8]
    65d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    65d8:	f884 8008 	strb.w	r8, [r4, #8]
    65dc:	e7fa      	b.n	65d4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x90>
    65de:	2d01      	cmp	r5, #1
    65e0:	d004      	beq.n	65ec <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa8>
    65e2:	6b70      	ldr	r0, [r6, #52]	; 0x34
    65e4:	f008 f8f0 	bl	e7c8 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    65e8:	2d02      	cmp	r5, #2
    65ea:	d0f3      	beq.n	65d4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x90>
    65ec:	e9d4 011c 	ldrd	r0, r1, [r4, #112]	; 0x70
    65f0:	1c40      	adds	r0, r0, #1
    65f2:	f141 0100 	adc.w	r1, r1, #0
    65f6:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
    65fa:	7a20      	ldrb	r0, [r4, #8]
    65fc:	2801      	cmp	r0, #1
    65fe:	d1cf      	bne.n	65a0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x5c>
    6600:	e7ca      	b.n	6598 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x54>
    6602:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6606:	f001 b8a5 	b.w	7754 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    660a:	2d01      	cmp	r5, #1
    660c:	d0e2      	beq.n	65d4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x90>
    660e:	6b70      	ldr	r0, [r6, #52]	; 0x34
    6610:	f008 f8da 	bl	e7c8 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    6614:	e7f5      	b.n	6602 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xbe>
    6616:	0000      	.short	0x0000
    6618:	200000d4 	.word	0x200000d4

0000661c <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>:
    661c:	4802      	ldr	r0, [pc, #8]	; (6628 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI+0xc>)
    661e:	89c0      	ldrh	r0, [r0, #14]
    6620:	f3c0 2080 	ubfx	r0, r0, #10, #1
    6624:	4770      	bx	lr
    6626:	0000      	.short	0x0000
    6628:	200000d4 	.word	0x200000d4

0000662c <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
    662c:	4804      	ldr	r0, [pc, #16]	; (6640 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x14>)
    662e:	7800      	ldrb	r0, [r0, #0]
    6630:	b108      	cbz	r0, 6636 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0xa>
    6632:	200c      	movs	r0, #12
    6634:	4770      	bx	lr
    6636:	4903      	ldr	r1, [pc, #12]	; (6644 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x18>)
    6638:	2000      	movs	r0, #0
    663a:	7708      	strb	r0, [r1, #28]
    663c:	4770      	bx	lr
    663e:	0000      	.short	0x0000
    6640:	200000d4 	.word	0x200000d4
    6644:	20000cb2 	.word	0x20000cb2

00006648 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    6648:	480c      	ldr	r0, [pc, #48]	; (667c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34>)
    664a:	b510      	push	{r4, lr}
    664c:	7801      	ldrb	r1, [r0, #0]
    664e:	b149      	cbz	r1, 6664 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c>
    6650:	f100 0138 	add.w	r1, r0, #56	; 0x38
    6654:	7800      	ldrb	r0, [r0, #0]
    6656:	2802      	cmp	r0, #2
    6658:	d008      	beq.n	666c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24>
    665a:	f240 11f1 	movw	r1, #497	; 0x1f1
    665e:	2027      	movs	r0, #39	; 0x27
    6660:	f7fe ff7e 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6668:	f000 b9fe 	b.w	6a68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x420>
    666c:	6848      	ldr	r0, [r1, #4]
    666e:	f8d0 01d8 	ldr.w	r0, [r0, #472]	; 0x1d8
    6672:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6676:	f005 bd2d 	b.w	c0d4 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>
    667a:	0000      	.short	0x0000
    667c:	200000d4 	.word	0x200000d4
    6680:	4a02      	ldr	r2, [pc, #8]	; (668c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44>)
    6682:	8993      	ldrh	r3, [r2, #12]
    6684:	4303      	orrs	r3, r0
    6686:	8193      	strh	r3, [r2, #12]
    6688:	6952      	ldr	r2, [r2, #20]
    668a:	4710      	bx	r2
    668c:	200000d4 	.word	0x200000d4
    6690:	4801      	ldr	r0, [pc, #4]	; (6698 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>)
    6692:	6840      	ldr	r0, [r0, #4]
    6694:	4770      	bx	lr
    6696:	0000      	.short	0x0000
    6698:	2000010c 	.word	0x2000010c
    669c:	4801      	ldr	r0, [pc, #4]	; (66a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c>)
    669e:	6840      	ldr	r0, [r0, #4]
    66a0:	3078      	adds	r0, #120	; 0x78
    66a2:	4770      	bx	lr
    66a4:	2000010c 	.word	0x2000010c
    66a8:	4a01      	ldr	r2, [pc, #4]	; (66b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68>)
    66aa:	2100      	movs	r1, #0
    66ac:	6952      	ldr	r2, [r2, #20]
    66ae:	4710      	bx	r2
    66b0:	200000d4 	.word	0x200000d4
    66b4:	b570      	push	{r4, r5, r6, lr}
    66b6:	f7ff fff1 	bl	669c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    66ba:	4604      	mov	r4, r0
    66bc:	f7ff ffe8 	bl	6690 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    66c0:	4605      	mov	r5, r0
    66c2:	4621      	mov	r1, r4
    66c4:	f008 fca3 	bl	f00e <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>
    66c8:	f895 102a 	ldrb.w	r1, [r5, #42]	; 0x2a
    66cc:	2901      	cmp	r1, #1
    66ce:	d112      	bne.n	66f6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xae>
    66d0:	2800      	cmp	r0, #0
    66d2:	d010      	beq.n	66f6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xae>
    66d4:	4808      	ldr	r0, [pc, #32]	; (66f8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb0>)
    66d6:	882a      	ldrh	r2, [r5, #0]
    66d8:	6841      	ldr	r1, [r0, #4]
    66da:	f501 7096 	add.w	r0, r1, #300	; 0x12c
    66de:	8142      	strh	r2, [r0, #10]
    66e0:	7a62      	ldrb	r2, [r4, #9]
    66e2:	7302      	strb	r2, [r0, #12]
    66e4:	7aa2      	ldrb	r2, [r4, #10]
    66e6:	7342      	strb	r2, [r0, #13]
    66e8:	2218      	movs	r2, #24
    66ea:	f000 ff61 	bl	75b0 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    66ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    66f2:	f001 b82f 	b.w	7754 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    66f6:	bd70      	pop	{r4, r5, r6, pc}
    66f8:	2000010c 	.word	0x2000010c
    66fc:	b570      	push	{r4, r5, r6, lr}
    66fe:	4605      	mov	r5, r0
    6700:	2901      	cmp	r1, #1
    6702:	d818      	bhi.n	6736 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xee>
    6704:	4c12      	ldr	r4, [pc, #72]	; (6750 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x108>)
    6706:	69a1      	ldr	r1, [r4, #24]
    6708:	4788      	blx	r1
    670a:	b1a0      	cbz	r0, 6736 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xee>
    670c:	7960      	ldrb	r0, [r4, #5]
    670e:	b990      	cbnz	r0, 6736 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xee>
    6710:	b9e5      	cbnz	r5, 674c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x104>
    6712:	f104 0010 	add.w	r0, r4, #16
    6716:	7801      	ldrb	r1, [r0, #0]
    6718:	06c8      	lsls	r0, r1, #27
    671a:	d405      	bmi.n	6728 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe0>
    671c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    671e:	7800      	ldrb	r0, [r0, #0]
    6720:	06c0      	lsls	r0, r0, #27
    6722:	d401      	bmi.n	6728 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe0>
    6724:	2001      	movs	r0, #1
    6726:	e000      	b.n	672a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe2>
    6728:	2000      	movs	r0, #0
    672a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    672c:	b92a      	cbnz	r2, 673a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    672e:	8962      	ldrh	r2, [r4, #10]
    6730:	b11a      	cbz	r2, 673a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    6732:	06c9      	lsls	r1, r1, #27
    6734:	d401      	bmi.n	673a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    6736:	2001      	movs	r0, #1
    6738:	bd70      	pop	{r4, r5, r6, pc}
    673a:	89a1      	ldrh	r1, [r4, #12]
    673c:	078a      	lsls	r2, r1, #30
    673e:	d503      	bpl.n	6748 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x100>
    6740:	6a22      	ldr	r2, [r4, #32]
    6742:	78d2      	ldrb	r2, [r2, #3]
    6744:	2a02      	cmp	r2, #2
    6746:	d001      	beq.n	674c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x104>
    6748:	4308      	orrs	r0, r1
    674a:	d1f4      	bne.n	6736 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xee>
    674c:	2000      	movs	r0, #0
    674e:	bd70      	pop	{r4, r5, r6, pc}
    6750:	200000d4 	.word	0x200000d4
    6754:	b530      	push	{r4, r5, lr}
    6756:	4b08      	ldr	r3, [pc, #32]	; (6778 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x130>)
    6758:	88dd      	ldrh	r5, [r3, #6]
    675a:	891c      	ldrh	r4, [r3, #8]
    675c:	b12a      	cbz	r2, 676a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x122>
    675e:	b908      	cbnz	r0, 6764 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x11c>
    6760:	b905      	cbnz	r5, 6764 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x11c>
    6762:	b114      	cbz	r4, 676a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x122>
    6764:	8958      	ldrh	r0, [r3, #10]
    6766:	1c40      	adds	r0, r0, #1
    6768:	8158      	strh	r0, [r3, #10]
    676a:	b111      	cbz	r1, 6772 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x12a>
    676c:	1c6d      	adds	r5, r5, #1
    676e:	80dd      	strh	r5, [r3, #6]
    6770:	bd30      	pop	{r4, r5, pc}
    6772:	1c64      	adds	r4, r4, #1
    6774:	811c      	strh	r4, [r3, #8]
    6776:	bd30      	pop	{r4, r5, pc}
    6778:	20000cb2 	.word	0x20000cb2
    677c:	b510      	push	{r4, lr}
    677e:	4c08      	ldr	r4, [pc, #32]	; (67a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x158>)
    6780:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6782:	b138      	cbz	r0, 6794 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x14c>
    6784:	8962      	ldrh	r2, [r4, #10]
    6786:	6a61      	ldr	r1, [r4, #36]	; 0x24
    6788:	1cd2      	adds	r2, r2, #3
    678a:	f007 f86d 	bl	d868 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    678e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6790:	6260      	str	r0, [r4, #36]	; 0x24
    6792:	bd10      	pop	{r4, pc}
    6794:	f240 4163 	movw	r1, #1123	; 0x463
    6798:	2027      	movs	r0, #39	; 0x27
    679a:	f7fe fee1 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    679e:	0000      	.short	0x0000
    67a0:	200000d4 	.word	0x200000d4
    67a4:	b510      	push	{r4, lr}
    67a6:	f7ff ff73 	bl	6690 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    67aa:	4604      	mov	r4, r0
    67ac:	f7ff ff76 	bl	669c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    67b0:	4601      	mov	r1, r0
    67b2:	7b42      	ldrb	r2, [r0, #13]
    67b4:	4815      	ldr	r0, [pc, #84]	; (680c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c4>)
    67b6:	2a24      	cmp	r2, #36	; 0x24
    67b8:	d00e      	beq.n	67d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x190>
    67ba:	7b89      	ldrb	r1, [r1, #14]
    67bc:	2924      	cmp	r1, #36	; 0x24
    67be:	d00b      	beq.n	67d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x190>
    67c0:	2a1f      	cmp	r2, #31
    67c2:	d00d      	beq.n	67e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x198>
    67c4:	2a20      	cmp	r2, #32
    67c6:	d00b      	beq.n	67e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x198>
    67c8:	2922      	cmp	r1, #34	; 0x22
    67ca:	d00f      	beq.n	67ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1a4>
    67cc:	f894 006e 	ldrb.w	r0, [r4, #110]	; 0x6e
    67d0:	2804      	cmp	r0, #4
    67d2:	d100      	bne.n	67d6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18e>
    67d4:	2008      	movs	r0, #8
    67d6:	bd10      	pop	{r4, pc}
    67d8:	6840      	ldr	r0, [r0, #4]
    67da:	f890 1276 	ldrb.w	r1, [r0, #630]	; 0x276
    67de:	e00e      	b.n	67fe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1b6>
    67e0:	2922      	cmp	r1, #34	; 0x22
    67e2:	d003      	beq.n	67ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1a4>
    67e4:	6840      	ldr	r0, [r0, #4]
    67e6:	f890 0126 	ldrb.w	r0, [r0, #294]	; 0x126
    67ea:	e005      	b.n	67f8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1b0>
    67ec:	6841      	ldr	r1, [r0, #4]
    67ee:	f891 0126 	ldrb.w	r0, [r1, #294]	; 0x126
    67f2:	f891 1067 	ldrb.w	r1, [r1, #103]	; 0x67
    67f6:	4008      	ands	r0, r1
    67f8:	f008 fa83 	bl	ed02 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    67fc:	4601      	mov	r1, r0
    67fe:	f894 006e 	ldrb.w	r0, [r4, #110]	; 0x6e
    6802:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6806:	f008 ba94 	b.w	ed32 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    680a:	0000      	.short	0x0000
    680c:	2000010c 	.word	0x2000010c
    6810:	e92d 5ffc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    6814:	468b      	mov	fp, r1
    6816:	4607      	mov	r7, r0
    6818:	f7ff ff40 	bl	669c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    681c:	f04f 0900 	mov.w	r9, #0
    6820:	4c61      	ldr	r4, [pc, #388]	; (69a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x360>)
    6822:	4605      	mov	r5, r0
    6824:	f88d 9000 	strb.w	r9, [sp]
    6828:	f8cd 9004 	str.w	r9, [sp, #4]
    682c:	7820      	ldrb	r0, [r4, #0]
    682e:	464e      	mov	r6, r9
    6830:	2802      	cmp	r0, #2
    6832:	d004      	beq.n	683e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1f6>
    6834:	f240 41ea 	movw	r1, #1258	; 0x4ea
    6838:	2027      	movs	r0, #39	; 0x27
    683a:	f7fe fe91 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    683e:	7ba0      	ldrb	r0, [r4, #14]
    6840:	0640      	lsls	r0, r0, #25
    6842:	d406      	bmi.n	6852 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x20a>
    6844:	2040      	movs	r0, #64	; 0x40
    6846:	f7ff ff2f 	bl	66a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    684a:	89e0      	ldrh	r0, [r4, #14]
    684c:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    6850:	81e0      	strh	r0, [r4, #14]
    6852:	7d28      	ldrb	r0, [r5, #20]
    6854:	b3df      	cbz	r7, 68ce <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x286>
    6856:	b180      	cbz	r0, 687a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x232>
    6858:	f005 fa98 	bl	bd8c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    685c:	f005 fa72 	bl	bd44 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    6860:	b958      	cbnz	r0, 687a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x232>
    6862:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6864:	7841      	ldrb	r1, [r0, #1]
    6866:	b141      	cbz	r1, 687a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x232>
    6868:	7800      	ldrb	r0, [r0, #0]
    686a:	7a29      	ldrb	r1, [r5, #8]
    686c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    6870:	4288      	cmp	r0, r1
    6872:	d102      	bne.n	687a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x232>
    6874:	2001      	movs	r0, #1
    6876:	70a0      	strb	r0, [r4, #2]
    6878:	e092      	b.n	69a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x358>
    687a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    687c:	7841      	ldrb	r1, [r0, #1]
    687e:	8161      	strh	r1, [r4, #10]
    6880:	b121      	cbz	r1, 688c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x244>
    6882:	6b60      	ldr	r0, [r4, #52]	; 0x34
    6884:	f007 ff6d 	bl	e762 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    6888:	62a0      	str	r0, [r4, #40]	; 0x28
    688a:	e000      	b.n	688e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x246>
    688c:	62a6      	str	r6, [r4, #40]	; 0x28
    688e:	89e0      	ldrh	r0, [r4, #14]
    6890:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    6894:	81e0      	strh	r0, [r4, #14]
    6896:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6898:	79e9      	ldrb	r1, [r5, #7]
    689a:	7800      	ldrb	r0, [r0, #0]
    689c:	f3c0 0080 	ubfx	r0, r0, #2, #1
    68a0:	4288      	cmp	r0, r1
    68a2:	d007      	beq.n	68b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x26c>
    68a4:	a801      	add	r0, sp, #4
    68a6:	f000 f975 	bl	6b94 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54c>
    68aa:	89e0      	ldrh	r0, [r4, #14]
    68ac:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    68b0:	81e0      	strh	r0, [r4, #14]
    68b2:	e001      	b.n	68b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x270>
    68b4:	f04f 0901 	mov.w	r9, #1
    68b8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    68ba:	7a29      	ldrb	r1, [r5, #8]
    68bc:	7800      	ldrb	r0, [r0, #0]
    68be:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    68c2:	4288      	cmp	r0, r1
    68c4:	d10e      	bne.n	68e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x29c>
    68c6:	4668      	mov	r0, sp
    68c8:	f000 f926 	bl	6b18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4d0>
    68cc:	e00a      	b.n	68e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x29c>
    68ce:	e7ff      	b.n	68d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x288>
    68d0:	b108      	cbz	r0, 68d6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x28e>
    68d2:	f005 fa55 	bl	bd80 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    68d6:	78e0      	ldrb	r0, [r4, #3]
    68d8:	1c40      	adds	r0, r0, #1
    68da:	70e0      	strb	r0, [r4, #3]
    68dc:	89e0      	ldrh	r0, [r4, #14]
    68de:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    68e2:	81e0      	strh	r0, [r4, #14]
    68e4:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 69a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x360>
    68e8:	7ce8      	ldrb	r0, [r5, #19]
    68ea:	f10a 0a38 	add.w	sl, sl, #56	; 0x38
    68ee:	b188      	cbz	r0, 6914 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2cc>
    68f0:	f7ff fece 	bl	6690 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    68f4:	492d      	ldr	r1, [pc, #180]	; (69ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x364>)
    68f6:	760e      	strb	r6, [r1, #24]
    68f8:	e9d5 231a 	ldrd	r2, r3, [r5, #104]	; 0x68
    68fc:	e9c1 2304 	strd	r2, r3, [r1, #16]
    6900:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
    6904:	f008 fa07 	bl	ed16 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    6908:	4603      	mov	r3, r0
    690a:	22fb      	movs	r2, #251	; 0xfb
    690c:	4927      	ldr	r1, [pc, #156]	; (69ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x364>)
    690e:	4630      	mov	r0, r6
    6910:	f005 f96e 	bl	bbf0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    6914:	f04f 0800 	mov.w	r8, #0
    6918:	f1bb 0f00 	cmp.w	fp, #0
    691c:	d104      	bne.n	6928 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2e0>
    691e:	78e1      	ldrb	r1, [r4, #3]
    6920:	2001      	movs	r0, #1
    6922:	f7ff feeb 	bl	66fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb4>
    6926:	b198      	cbz	r0, 6950 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x308>
    6928:	f005 fdd8 	bl	c4dc <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
    692c:	f89d 0000 	ldrb.w	r0, [sp]
    6930:	b110      	cbz	r0, 6938 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f0>
    6932:	2000      	movs	r0, #0
    6934:	f7ff fe06 	bl	6544 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    6938:	88a8      	ldrh	r0, [r5, #4]
    693a:	464a      	mov	r2, r9
    693c:	4639      	mov	r1, r7
    693e:	f7ff ff09 	bl	6754 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>
    6942:	b117      	cbz	r7, 694a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x302>
    6944:	70e6      	strb	r6, [r4, #3]
    6946:	f7ff feb5 	bl	66b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    694a:	f04f 0801 	mov.w	r8, #1
    694e:	e017      	b.n	6980 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x338>
    6950:	f89d 0000 	ldrb.w	r0, [sp]
    6954:	b110      	cbz	r0, 695c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x314>
    6956:	2001      	movs	r0, #1
    6958:	f7ff fdf4 	bl	6544 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    695c:	2000      	movs	r0, #0
    695e:	f000 f9a3 	bl	6ca8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x660>
    6962:	f89d 0000 	ldrb.w	r0, [sp]
    6966:	b110      	cbz	r0, 696e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x326>
    6968:	2002      	movs	r0, #2
    696a:	f7ff fdeb 	bl	6544 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    696e:	88a8      	ldrh	r0, [r5, #4]
    6970:	464a      	mov	r2, r9
    6972:	4639      	mov	r1, r7
    6974:	f7ff feee 	bl	6754 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>
    6978:	b117      	cbz	r7, 6980 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x338>
    697a:	70e6      	strb	r6, [r4, #3]
    697c:	f7ff fe9a 	bl	66b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    6980:	9801      	ldr	r0, [sp, #4]
    6982:	b150      	cbz	r0, 699a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x352>
    6984:	f007 fd79 	bl	e47a <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    6988:	f8da 1004 	ldr.w	r1, [sl, #4]
    698c:	1c40      	adds	r0, r0, #1
    698e:	7206      	strb	r6, [r0, #8]
    6990:	220b      	movs	r2, #11
    6992:	f000 fe0d 	bl	75b0 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    6996:	f000 fedd 	bl	7754 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    699a:	f1b8 0f00 	cmp.w	r8, #0
    699e:	d001      	beq.n	69a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x35c>
    69a0:	f000 f862 	bl	6a68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x420>
    69a4:	e8bd 9ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    69a8:	200000d4 	.word	0x200000d4
    69ac:	20000c68 	.word	0x20000c68
    69b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    69b4:	460f      	mov	r7, r1
    69b6:	4680      	mov	r8, r0
    69b8:	f7ff fe70 	bl	669c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    69bc:	4d28      	ldr	r5, [pc, #160]	; (6a60 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x418>)
    69be:	4604      	mov	r4, r0
    69c0:	7828      	ldrb	r0, [r5, #0]
    69c2:	2801      	cmp	r0, #1
    69c4:	d004      	beq.n	69d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x388>
    69c6:	f240 4172 	movw	r1, #1138	; 0x472
    69ca:	2027      	movs	r0, #39	; 0x27
    69cc:	f7fe fdc8 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    69d0:	7821      	ldrb	r1, [r4, #0]
    69d2:	2000      	movs	r0, #0
    69d4:	2601      	movs	r6, #1
    69d6:	b129      	cbz	r1, 69e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x39c>
    69d8:	7020      	strb	r0, [r4, #0]
    69da:	2100      	movs	r1, #0
    69dc:	2004      	movs	r0, #4
    69de:	f7ff fe4f 	bl	6680 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    69e2:	70a6      	strb	r6, [r4, #2]
    69e4:	6a29      	ldr	r1, [r5, #32]
    69e6:	7808      	ldrb	r0, [r1, #0]
    69e8:	43c0      	mvns	r0, r0
    69ea:	0780      	lsls	r0, r0, #30
    69ec:	d109      	bne.n	6a02 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3ba>
    69ee:	79a0      	ldrb	r0, [r4, #6]
    69f0:	bb78      	cbnz	r0, 6a52 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x40a>
    69f2:	2002      	movs	r0, #2
    69f4:	f7ff fe44 	bl	6680 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    69f8:	6a28      	ldr	r0, [r5, #32]
    69fa:	7800      	ldrb	r0, [r0, #0]
    69fc:	43c0      	mvns	r0, r0
    69fe:	0780      	lsls	r0, r0, #30
    6a00:	d027      	beq.n	6a52 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x40a>
    6a02:	6a28      	ldr	r0, [r5, #32]
    6a04:	7840      	ldrb	r0, [r0, #1]
    6a06:	b110      	cbz	r0, 6a0e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3c6>
    6a08:	2002      	movs	r0, #2
    6a0a:	71a0      	strb	r0, [r4, #6]
    6a0c:	e000      	b.n	6a10 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3c8>
    6a0e:	71a6      	strb	r6, [r4, #6]
    6a10:	7d20      	ldrb	r0, [r4, #20]
    6a12:	b190      	cbz	r0, 6a3a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f2>
    6a14:	f7ff fe3c 	bl	6690 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    6a18:	4912      	ldr	r1, [pc, #72]	; (6a64 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x41c>)
    6a1a:	7a6d      	ldrb	r5, [r5, #9]
    6a1c:	760e      	strb	r6, [r1, #24]
    6a1e:	e9d4 231c 	ldrd	r2, r3, [r4, #112]	; 0x70
    6a22:	e9c1 2304 	strd	r2, r3, [r1, #16]
    6a26:	f890 006f 	ldrb.w	r0, [r0, #111]	; 0x6f
    6a2a:	f008 f974 	bl	ed16 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    6a2e:	4603      	mov	r3, r0
    6a30:	462a      	mov	r2, r5
    6a32:	490c      	ldr	r1, [pc, #48]	; (6a64 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x41c>)
    6a34:	4630      	mov	r0, r6
    6a36:	f005 f8db 	bl	bbf0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    6a3a:	ea37 0708 	bics.w	r7, r7, r8
    6a3e:	d004      	beq.n	6a4a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x402>
    6a40:	2100      	movs	r1, #0
    6a42:	4608      	mov	r0, r1
    6a44:	f7ff fe5a 	bl	66fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb4>
    6a48:	b128      	cbz	r0, 6a56 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x40e>
    6a4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6a4e:	f000 b80b 	b.w	6a68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x420>
    6a52:	2003      	movs	r0, #3
    6a54:	e7d9      	b.n	6a0a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3c2>
    6a56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6a5a:	2000      	movs	r0, #0
    6a5c:	f000 b8e8 	b.w	6c30 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e8>
    6a60:	200000d4 	.word	0x200000d4
    6a64:	20000c68 	.word	0x20000c68
    6a68:	b510      	push	{r4, lr}
    6a6a:	f005 fa35 	bl	bed8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    6a6e:	f005 f953 	bl	bd18 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    6a72:	4c0e      	ldr	r4, [pc, #56]	; (6aac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x464>)
    6a74:	89e0      	ldrh	r0, [r4, #14]
    6a76:	f7ff fe17 	bl	66a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    6a7a:	69e2      	ldr	r2, [r4, #28]
    6a7c:	7961      	ldrb	r1, [r4, #5]
    6a7e:	78a0      	ldrb	r0, [r4, #2]
    6a80:	4790      	blx	r2
    6a82:	480b      	ldr	r0, [pc, #44]	; (6ab0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x468>)
    6a84:	7f00      	ldrb	r0, [r0, #28]
    6a86:	b168      	cbz	r0, 6aa4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x45c>
    6a88:	4909      	ldr	r1, [pc, #36]	; (6ab0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x468>)
    6a8a:	220e      	movs	r2, #14
    6a8c:	f101 000e 	add.w	r0, r1, #14
    6a90:	f006 feea 	bl	d868 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6a94:	4806      	ldr	r0, [pc, #24]	; (6ab0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x468>)
    6a96:	221d      	movs	r2, #29
    6a98:	2100      	movs	r1, #0
    6a9a:	301d      	adds	r0, #29
    6a9c:	f000 fd88 	bl	75b0 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    6aa0:	f000 fe58 	bl	7754 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    6aa4:	2000      	movs	r0, #0
    6aa6:	7020      	strb	r0, [r4, #0]
    6aa8:	bd10      	pop	{r4, pc}
    6aaa:	0000      	.short	0x0000
    6aac:	200000d4 	.word	0x200000d4
    6ab0:	20000cb2 	.word	0x20000cb2
    6ab4:	4808      	ldr	r0, [pc, #32]	; (6ad8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x490>)
    6ab6:	b510      	push	{r4, lr}
    6ab8:	7800      	ldrb	r0, [r0, #0]
    6aba:	2802      	cmp	r0, #2
    6abc:	d004      	beq.n	6ac8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x480>
    6abe:	f240 212a 	movw	r1, #554	; 0x22a
    6ac2:	2027      	movs	r0, #39	; 0x27
    6ac4:	f7fe fd4c 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6ac8:	4904      	ldr	r1, [pc, #16]	; (6adc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x494>)
    6aca:	2001      	movs	r0, #1
    6acc:	7308      	strb	r0, [r1, #12]
    6ace:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6ad2:	f7ff bfc9 	b.w	6a68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x420>
    6ad6:	0000      	.short	0x0000
    6ad8:	200000d4 	.word	0x200000d4
    6adc:	20000cb2 	.word	0x20000cb2
    6ae0:	4b0c      	ldr	r3, [pc, #48]	; (6b14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4cc>)
    6ae2:	b430      	push	{r4, r5}
    6ae4:	79db      	ldrb	r3, [r3, #7]
    6ae6:	b93a      	cbnz	r2, 6af8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4b0>
    6ae8:	2bff      	cmp	r3, #255	; 0xff
    6aea:	d105      	bne.n	6af8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4b0>
    6aec:	f890 206f 	ldrb.w	r2, [r0, #111]	; 0x6f
    6af0:	f890 406e 	ldrb.w	r4, [r0, #110]	; 0x6e
    6af4:	42a2      	cmp	r2, r4
    6af6:	d00a      	beq.n	6b0e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c6>
    6af8:	b129      	cbz	r1, 6b06 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4be>
    6afa:	f890 106f 	ldrb.w	r1, [r0, #111]	; 0x6f
    6afe:	bc30      	pop	{r4, r5}
    6b00:	4618      	mov	r0, r3
    6b02:	f005 bd13 	b.w	c52c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    6b06:	23ff      	movs	r3, #255	; 0xff
    6b08:	f890 106e 	ldrb.w	r1, [r0, #110]	; 0x6e
    6b0c:	e7f7      	b.n	6afe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4b6>
    6b0e:	bc30      	pop	{r4, r5}
    6b10:	4770      	bx	lr
    6b12:	0000      	.short	0x0000
    6b14:	200000d4 	.word	0x200000d4
    6b18:	b570      	push	{r4, r5, r6, lr}
    6b1a:	4606      	mov	r6, r0
    6b1c:	f7ff fdbe 	bl	669c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    6b20:	4a1b      	ldr	r2, [pc, #108]	; (6b90 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x548>)
    6b22:	4604      	mov	r4, r0
    6b24:	2501      	movs	r5, #1
    6b26:	6a51      	ldr	r1, [r2, #36]	; 0x24
    6b28:	7808      	ldrb	r0, [r1, #0]
    6b2a:	f000 0003 	and.w	r0, r0, #3
    6b2e:	2801      	cmp	r0, #1
    6b30:	d00c      	beq.n	6b4c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x504>
    6b32:	2802      	cmp	r0, #2
    6b34:	d00a      	beq.n	6b4c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x504>
    6b36:	2803      	cmp	r0, #3
    6b38:	d121      	bne.n	6b7e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x536>
    6b3a:	7025      	strb	r5, [r4, #0]
    6b3c:	89d0      	ldrh	r0, [r2, #14]
    6b3e:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    6b42:	81d0      	strh	r0, [r2, #14]
    6b44:	2001      	movs	r0, #1
    6b46:	f7ff fd9b 	bl	6680 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    6b4a:	e018      	b.n	6b7e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x536>
    6b4c:	7848      	ldrb	r0, [r1, #1]
    6b4e:	b1b0      	cbz	r0, 6b7e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x536>
    6b50:	89d1      	ldrh	r1, [r2, #14]
    6b52:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    6b56:	81d1      	strh	r1, [r2, #14]
    6b58:	6a91      	ldr	r1, [r2, #40]	; 0x28
    6b5a:	2900      	cmp	r1, #0
    6b5c:	d009      	beq.n	6b72 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x52a>
    6b5e:	28fb      	cmp	r0, #251	; 0xfb
    6b60:	d808      	bhi.n	6b74 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x52c>
    6b62:	7990      	ldrb	r0, [r2, #6]
    6b64:	b120      	cbz	r0, 6b70 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x528>
    6b66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6b6a:	2020      	movs	r0, #32
    6b6c:	f7ff bd9c 	b.w	66a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    6b70:	7035      	strb	r5, [r6, #0]
    6b72:	bd70      	pop	{r4, r5, r6, pc}
    6b74:	7950      	ldrb	r0, [r2, #5]
    6b76:	f040 0010 	orr.w	r0, r0, #16
    6b7a:	7150      	strb	r0, [r2, #5]
    6b7c:	bd70      	pop	{r4, r5, r6, pc}
    6b7e:	7a20      	ldrb	r0, [r4, #8]
    6b80:	2801      	cmp	r0, #1
    6b82:	d001      	beq.n	6b88 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x540>
    6b84:	7225      	strb	r5, [r4, #8]
    6b86:	bd70      	pop	{r4, r5, r6, pc}
    6b88:	2000      	movs	r0, #0
    6b8a:	7220      	strb	r0, [r4, #8]
    6b8c:	bd70      	pop	{r4, r5, r6, pc}
    6b8e:	0000      	.short	0x0000
    6b90:	200000d4 	.word	0x200000d4
    6b94:	b570      	push	{r4, r5, r6, lr}
    6b96:	4605      	mov	r5, r0
    6b98:	f7ff fd80 	bl	669c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    6b9c:	4604      	mov	r4, r0
    6b9e:	7980      	ldrb	r0, [r0, #6]
    6ba0:	2800      	cmp	r0, #0
    6ba2:	d02d      	beq.n	6c00 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5b8>
    6ba4:	2802      	cmp	r0, #2
    6ba6:	d10c      	bne.n	6bc2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x57a>
    6ba8:	481b      	ldr	r0, [pc, #108]	; (6c18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5d0>)
    6baa:	4629      	mov	r1, r5
    6bac:	6b00      	ldr	r0, [r0, #48]	; 0x30
    6bae:	f007 fbe0 	bl	e372 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    6bb2:	b330      	cbz	r0, 6c02 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5ba>
    6bb4:	e9d4 011a 	ldrd	r0, r1, [r4, #104]	; 0x68
    6bb8:	1c40      	adds	r0, r0, #1
    6bba:	f141 0100 	adc.w	r1, r1, #0
    6bbe:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
    6bc2:	2500      	movs	r5, #0
    6bc4:	71a5      	strb	r5, [r4, #6]
    6bc6:	78a0      	ldrb	r0, [r4, #2]
    6bc8:	b120      	cbz	r0, 6bd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x58c>
    6bca:	70a5      	strb	r5, [r4, #2]
    6bcc:	2100      	movs	r1, #0
    6bce:	2010      	movs	r0, #16
    6bd0:	f7ff fd56 	bl	6680 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    6bd4:	7860      	ldrb	r0, [r4, #1]
    6bd6:	b170      	cbz	r0, 6bf6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5ae>
    6bd8:	7065      	strb	r5, [r4, #1]
    6bda:	f7ff fb01 	bl	61e0 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    6bde:	b198      	cbz	r0, 6c08 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c0>
    6be0:	2100      	movs	r1, #0
    6be2:	2008      	movs	r0, #8
    6be4:	f7ff fd4c 	bl	6680 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    6be8:	e9d4 011a 	ldrd	r0, r1, [r4, #104]	; 0x68
    6bec:	1c40      	adds	r0, r0, #1
    6bee:	f141 0100 	adc.w	r1, r1, #0
    6bf2:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
    6bf6:	79e0      	ldrb	r0, [r4, #7]
    6bf8:	2801      	cmp	r0, #1
    6bfa:	d00a      	beq.n	6c12 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5ca>
    6bfc:	2001      	movs	r0, #1
    6bfe:	71e0      	strb	r0, [r4, #7]
    6c00:	bd70      	pop	{r4, r5, r6, pc}
    6c02:	f240 31b9 	movw	r1, #953	; 0x3b9
    6c06:	e001      	b.n	6c0c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c4>
    6c08:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    6c0c:	2027      	movs	r0, #39	; 0x27
    6c0e:	f7fe fca7 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6c12:	71e5      	strb	r5, [r4, #7]
    6c14:	bd70      	pop	{r4, r5, r6, pc}
    6c16:	0000      	.short	0x0000
    6c18:	200000d4 	.word	0x200000d4
    6c1c:	4803      	ldr	r0, [pc, #12]	; (6c2c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e4>)
    6c1e:	7800      	ldrb	r0, [r0, #0]
    6c20:	2800      	cmp	r0, #0
    6c22:	d001      	beq.n	6c28 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e0>
    6c24:	f7ff bf20 	b.w	6a68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x420>
    6c28:	4770      	bx	lr
    6c2a:	0000      	.short	0x0000
    6c2c:	200000d4 	.word	0x200000d4
    6c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6c34:	4606      	mov	r6, r0
    6c36:	f7ff fd2b 	bl	6690 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    6c3a:	4680      	mov	r8, r0
    6c3c:	f7ff fd2e 	bl	669c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    6c40:	4c16      	ldr	r4, [pc, #88]	; (6c9c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x654>)
    6c42:	4605      	mov	r5, r0
    6c44:	4632      	mov	r2, r6
    6c46:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    6c48:	6260      	str	r0, [r4, #36]	; 0x24
    6c4a:	2101      	movs	r1, #1
    6c4c:	4640      	mov	r0, r8
    6c4e:	f7ff ff47 	bl	6ae0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x498>
    6c52:	7d28      	ldrb	r0, [r5, #20]
    6c54:	2700      	movs	r7, #0
    6c56:	b170      	cbz	r0, 6c76 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x62e>
    6c58:	4811      	ldr	r0, [pc, #68]	; (6ca0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x658>)
    6c5a:	f005 fba9 	bl	c3b0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6c5e:	4811      	ldr	r0, [pc, #68]	; (6ca4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x65c>)
    6c60:	2101      	movs	r1, #1
    6c62:	7601      	strb	r1, [r0, #24]
    6c64:	e9d5 121c 	ldrd	r1, r2, [r5, #112]	; 0x70
    6c68:	e9c0 1204 	strd	r1, r2, [r0, #16]
    6c6c:	490c      	ldr	r1, [pc, #48]	; (6ca0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x658>)
    6c6e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6c70:	f005 f810 	bl	bc94 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    6c74:	e004      	b.n	6c80 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x638>
    6c76:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6c78:	f005 fb9a 	bl	c3b0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6c7c:	f005 f84c 	bl	bd18 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    6c80:	b916      	cbnz	r6, 6c88 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x640>
    6c82:	4638      	mov	r0, r7
    6c84:	f005 fa4a 	bl	c11c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    6c88:	2100      	movs	r1, #0
    6c8a:	f898 206e 	ldrb.w	r2, [r8, #110]	; 0x6e
    6c8e:	4608      	mov	r0, r1
    6c90:	f005 fc06 	bl	c4a0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    6c94:	2002      	movs	r0, #2
    6c96:	7020      	strb	r0, [r4, #0]
    6c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6c9c:	200000d4 	.word	0x200000d4
    6ca0:	20000b60 	.word	0x20000b60
    6ca4:	20000c68 	.word	0x20000c68
    6ca8:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    6cac:	4604      	mov	r4, r0
    6cae:	f7ff fcf5 	bl	669c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    6cb2:	4605      	mov	r5, r0
    6cb4:	f7ff fcec 	bl	6690 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    6cb8:	2700      	movs	r7, #0
    6cba:	4606      	mov	r6, r0
    6cbc:	f8df 9164 	ldr.w	r9, [pc, #356]	; 6e24 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7dc>
    6cc0:	f88d 7000 	strb.w	r7, [sp]
    6cc4:	4622      	mov	r2, r4
    6cc6:	4639      	mov	r1, r7
    6cc8:	f7ff ff0a 	bl	6ae0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x498>
    6ccc:	79a8      	ldrb	r0, [r5, #6]
    6cce:	f04f 0801 	mov.w	r8, #1
    6cd2:	f1a9 0420 	sub.w	r4, r9, #32
    6cd6:	b140      	cbz	r0, 6cea <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a2>
    6cd8:	2801      	cmp	r0, #1
    6cda:	d020      	beq.n	6d1e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d6>
    6cdc:	2802      	cmp	r0, #2
    6cde:	d02f      	beq.n	6d40 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f8>
    6ce0:	2803      	cmp	r0, #3
    6ce2:	d03b      	beq.n	6d5c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x714>
    6ce4:	f240 21d5 	movw	r1, #725	; 0x2d5
    6ce8:	e057      	b.n	6d9a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x752>
    6cea:	7a20      	ldrb	r0, [r4, #8]
    6cec:	2154      	movs	r1, #84	; 0x54
    6cee:	f8ad 0004 	strh.w	r0, [sp, #4]
    6cf2:	5388      	strh	r0, [r1, r6]
    6cf4:	4648      	mov	r0, r9
    6cf6:	f7ff fa9d 	bl	6234 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    6cfa:	b130      	cbz	r0, 6d0a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c2>
    6cfc:	2080      	movs	r0, #128	; 0x80
    6cfe:	6a21      	ldr	r1, [r4, #32]
    6d00:	f7ff fcbe 	bl	6680 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    6d04:	f885 8001 	strb.w	r8, [r5, #1]
    6d08:	e02c      	b.n	6d64 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x71c>
    6d0a:	466a      	mov	r2, sp
    6d0c:	a901      	add	r1, sp, #4
    6d0e:	6b20      	ldr	r0, [r4, #48]	; 0x30
    6d10:	f008 f819 	bl	ed46 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    6d14:	6220      	str	r0, [r4, #32]
    6d16:	b110      	cbz	r0, 6d1e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d6>
    6d18:	f895 104b 	ldrb.w	r1, [r5, #75]	; 0x4b
    6d1c:	b111      	cbz	r1, 6d24 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6dc>
    6d1e:	4842      	ldr	r0, [pc, #264]	; (6e28 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7e0>)
    6d20:	6220      	str	r0, [r4, #32]
    6d22:	e01f      	b.n	6d64 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x71c>
    6d24:	f89d 1000 	ldrb.w	r1, [sp]
    6d28:	b921      	cbnz	r1, 6d34 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ec>
    6d2a:	8007      	strh	r7, [r0, #0]
    6d2c:	7087      	strb	r7, [r0, #2]
    6d2e:	2101      	movs	r1, #1
    6d30:	f008 fb6b 	bl	f40a <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    6d34:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    6d38:	6a20      	ldr	r0, [r4, #32]
    6d3a:	f008 fb1a 	bl	f372 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>
    6d3e:	e011      	b.n	6d64 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x71c>
    6d40:	f8b6 0054 	ldrh.w	r0, [r6, #84]	; 0x54
    6d44:	f8ad 0004 	strh.w	r0, [sp, #4]
    6d48:	466a      	mov	r2, sp
    6d4a:	a901      	add	r1, sp, #4
    6d4c:	6b20      	ldr	r0, [r4, #48]	; 0x30
    6d4e:	f007 fffa 	bl	ed46 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    6d52:	6220      	str	r0, [r4, #32]
    6d54:	b930      	cbnz	r0, 6d64 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x71c>
    6d56:	f240 21c6 	movw	r1, #710	; 0x2c6
    6d5a:	e01e      	b.n	6d9a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x752>
    6d5c:	4648      	mov	r0, r9
    6d5e:	f7ff fa69 	bl	6234 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    6d62:	b1c0      	cbz	r0, 6d96 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x74e>
    6d64:	6a20      	ldr	r0, [r4, #32]
    6d66:	2308      	movs	r3, #8
    6d68:	7801      	ldrb	r1, [r0, #0]
    6d6a:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
    6d6e:	7001      	strb	r1, [r0, #0]
    6d70:	79ea      	ldrb	r2, [r5, #7]
    6d72:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    6d76:	4311      	orrs	r1, r2
    6d78:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
    6d7c:	7001      	strb	r1, [r0, #0]
    6d7e:	7a2a      	ldrb	r2, [r5, #8]
    6d80:	2304      	movs	r3, #4
    6d82:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    6d86:	4311      	orrs	r1, r2
    6d88:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    6d8c:	7001      	strb	r1, [r0, #0]
    6d8e:	43c9      	mvns	r1, r1
    6d90:	0789      	lsls	r1, r1, #30
    6d92:	d005      	beq.n	6da0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x758>
    6d94:	e007      	b.n	6da6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x75e>
    6d96:	f240 21cf 	movw	r1, #719	; 0x2cf
    6d9a:	2027      	movs	r0, #39	; 0x27
    6d9c:	f7fe fbe0 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6da0:	78c0      	ldrb	r0, [r0, #3]
    6da2:	2802      	cmp	r0, #2
    6da4:	d00f      	beq.n	6dc6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x77e>
    6da6:	6b20      	ldr	r0, [r4, #48]	; 0x30
    6da8:	f007 fbfd 	bl	e5a6 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    6dac:	b108      	cbz	r0, 6db2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x76a>
    6dae:	2101      	movs	r1, #1
    6db0:	e00a      	b.n	6dc8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x780>
    6db2:	6a20      	ldr	r0, [r4, #32]
    6db4:	7800      	ldrb	r0, [r0, #0]
    6db6:	43c0      	mvns	r0, r0
    6db8:	0780      	lsls	r0, r0, #30
    6dba:	d004      	beq.n	6dc6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x77e>
    6dbc:	f7ff f9f8 	bl	61b0 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    6dc0:	f080 0101 	eor.w	r1, r0, #1
    6dc4:	e000      	b.n	6dc8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x780>
    6dc6:	2100      	movs	r1, #0
    6dc8:	6a20      	ldr	r0, [r4, #32]
    6dca:	7802      	ldrb	r2, [r0, #0]
    6dcc:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    6dd0:	7001      	strb	r1, [r0, #0]
    6dd2:	7ce9      	ldrb	r1, [r5, #19]
    6dd4:	b181      	cbz	r1, 6df8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7b0>
    6dd6:	7841      	ldrb	r1, [r0, #1]
    6dd8:	b171      	cbz	r1, 6df8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7b0>
    6dda:	4814      	ldr	r0, [pc, #80]	; (6e2c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7e4>)
    6ddc:	f005 fae8 	bl	c3b0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6de0:	4811      	ldr	r0, [pc, #68]	; (6e28 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7e0>)
    6de2:	3828      	subs	r0, #40	; 0x28
    6de4:	7607      	strb	r7, [r0, #24]
    6de6:	e9d5 121a 	ldrd	r1, r2, [r5, #104]	; 0x68
    6dea:	e9c0 1204 	strd	r1, r2, [r0, #16]
    6dee:	480f      	ldr	r0, [pc, #60]	; (6e2c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7e4>)
    6df0:	6a21      	ldr	r1, [r4, #32]
    6df2:	f004 ff4f 	bl	bc94 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    6df6:	e003      	b.n	6e00 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7b8>
    6df8:	f005 fada 	bl	c3b0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6dfc:	f004 ff8c 	bl	bd18 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    6e00:	f896 206f 	ldrb.w	r2, [r6, #111]	; 0x6f
    6e04:	2101      	movs	r1, #1
    6e06:	2000      	movs	r0, #0
    6e08:	f005 fb4a 	bl	c4a0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    6e0c:	f884 8004 	strb.w	r8, [r4, #4]
    6e10:	6a21      	ldr	r1, [r4, #32]
    6e12:	880a      	ldrh	r2, [r1, #0]
    6e14:	8222      	strh	r2, [r4, #16]
    6e16:	7889      	ldrb	r1, [r1, #2]
    6e18:	74a1      	strb	r1, [r4, #18]
    6e1a:	f884 8000 	strb.w	r8, [r4]
    6e1e:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    6e22:	0000      	.short	0x0000
    6e24:	200000f4 	.word	0x200000f4
    6e28:	20000c90 	.word	0x20000c90
    6e2c:	20000b60 	.word	0x20000b60
    6e30:	00006ab5 	.word	0x00006ab5
    6e34:	00006811 	.word	0x00006811
    6e38:	000069b1 	.word	0x000069b1
    6e3c:	00006c1d 	.word	0x00006c1d

00006e40 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    6e40:	4800      	ldr	r0, [pc, #0]	; (6e44 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    6e42:	4770      	bx	lr
    6e44:	200015f5 	.word	0x200015f5

00006e48 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    6e48:	4904      	ldr	r1, [pc, #16]	; (6e5c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    6e4a:	788a      	ldrb	r2, [r1, #2]
    6e4c:	4282      	cmp	r2, r0
    6e4e:	d903      	bls.n	6e58 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    6e50:	4408      	add	r0, r1
    6e52:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    6e56:	4770      	bx	lr
    6e58:	2000      	movs	r0, #0
    6e5a:	4770      	bx	lr
    6e5c:	20001422 	.word	0x20001422

00006e60 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    6e60:	4904      	ldr	r1, [pc, #16]	; (6e74 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    6e62:	788a      	ldrb	r2, [r1, #2]
    6e64:	4282      	cmp	r2, r0
    6e66:	d903      	bls.n	6e70 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    6e68:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    6e6c:	3083      	adds	r0, #131	; 0x83
    6e6e:	4770      	bx	lr
    6e70:	2000      	movs	r0, #0
    6e72:	4770      	bx	lr
    6e74:	20001422 	.word	0x20001422

00006e78 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    6e78:	4a05      	ldr	r2, [pc, #20]	; (6e90 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    6e7a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    6e7e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    6e82:	6802      	ldr	r2, [r0, #0]
    6e84:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    6e88:	8880      	ldrh	r0, [r0, #4]
    6e8a:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    6e8e:	4770      	bx	lr
    6e90:	20001422 	.word	0x20001422

00006e94 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    6e94:	4904      	ldr	r1, [pc, #16]	; (6ea8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    6e96:	788a      	ldrb	r2, [r1, #2]
    6e98:	4282      	cmp	r2, r0
    6e9a:	d903      	bls.n	6ea4 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    6e9c:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    6ea0:	1cc0      	adds	r0, r0, #3
    6ea2:	4770      	bx	lr
    6ea4:	2000      	movs	r0, #0
    6ea6:	4770      	bx	lr
    6ea8:	20001422 	.word	0x20001422

00006eac <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    6eac:	b510      	push	{r4, lr}
    6eae:	f240 12d3 	movw	r2, #467	; 0x1d3
    6eb2:	2100      	movs	r1, #0
    6eb4:	4808      	ldr	r0, [pc, #32]	; (6ed8 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    6eb6:	f006 fd51 	bl	d95c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6eba:	2208      	movs	r2, #8
    6ebc:	21ff      	movs	r1, #255	; 0xff
    6ebe:	4807      	ldr	r0, [pc, #28]	; (6edc <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    6ec0:	f006 fd4c 	bl	d95c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6ec4:	4805      	ldr	r0, [pc, #20]	; (6edc <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    6ec6:	2100      	movs	r1, #0
    6ec8:	1f00      	subs	r0, r0, #4
    6eca:	7001      	strb	r1, [r0, #0]
    6ecc:	7041      	strb	r1, [r0, #1]
    6ece:	f44f 7161 	mov.w	r1, #900	; 0x384
    6ed2:	8041      	strh	r1, [r0, #2]
    6ed4:	bd10      	pop	{r4, pc}
    6ed6:	0000      	.short	0x0000
    6ed8:	20001422 	.word	0x20001422
    6edc:	20000320 	.word	0x20000320

00006ee0 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    6ee0:	4b0b      	ldr	r3, [pc, #44]	; (6f10 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    6ee2:	b510      	push	{r4, lr}
    6ee4:	789c      	ldrb	r4, [r3, #2]
    6ee6:	4284      	cmp	r4, r0
    6ee8:	d90f      	bls.n	6f0a <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2a>
    6eea:	4418      	add	r0, r3
    6eec:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    6ef0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    6ef4:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    6ef8:	700b      	strb	r3, [r1, #0]
    6efa:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    6efe:	6011      	str	r1, [r2, #0]
    6f00:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    6f04:	8090      	strh	r0, [r2, #4]
    6f06:	2001      	movs	r0, #1
    6f08:	bd10      	pop	{r4, pc}
    6f0a:	2000      	movs	r0, #0
    6f0c:	bd10      	pop	{r4, pc}
    6f0e:	0000      	.short	0x0000
    6f10:	20001422 	.word	0x20001422

00006f14 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    6f14:	4907      	ldr	r1, [pc, #28]	; (6f34 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    6f16:	788a      	ldrb	r2, [r1, #2]
    6f18:	4282      	cmp	r2, r0
    6f1a:	d909      	bls.n	6f30 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x1c>
    6f1c:	4408      	add	r0, r1
    6f1e:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    6f22:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    6f26:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    6f2a:	f000 0001 	and.w	r0, r0, #1
    6f2e:	4770      	bx	lr
    6f30:	2000      	movs	r0, #0
    6f32:	4770      	bx	lr
    6f34:	20001422 	.word	0x20001422

00006f38 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    6f38:	4801      	ldr	r0, [pc, #4]	; (6f40 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    6f3a:	8840      	ldrh	r0, [r0, #2]
    6f3c:	4770      	bx	lr
    6f3e:	0000      	.short	0x0000
    6f40:	2000031c 	.word	0x2000031c

00006f44 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
    6f44:	4905      	ldr	r1, [pc, #20]	; (6f5c <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x18>)
    6f46:	788a      	ldrb	r2, [r1, #2]
    6f48:	4282      	cmp	r2, r0
    6f4a:	d903      	bls.n	6f54 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x10>
    6f4c:	4408      	add	r0, r1
    6f4e:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    6f52:	b108      	cbz	r0, 6f58 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x14>
    6f54:	2000      	movs	r0, #0
    6f56:	4770      	bx	lr
    6f58:	2001      	movs	r0, #1
    6f5a:	4770      	bx	lr
    6f5c:	20001422 	.word	0x20001422

00006f60 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    6f60:	b570      	push	{r4, r5, r6, lr}
    6f62:	460d      	mov	r5, r1
    6f64:	4606      	mov	r6, r0
    6f66:	f000 f8c1 	bl	70ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xec>
    6f6a:	4c10      	ldr	r4, [pc, #64]	; (6fac <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x4c>)
    6f6c:	2810      	cmp	r0, #16
    6f6e:	d007      	beq.n	6f80 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    6f70:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
    6f74:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    6f78:	07c9      	lsls	r1, r1, #31
    6f7a:	d001      	beq.n	6f80 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    6f7c:	2001      	movs	r0, #1
    6f7e:	bd70      	pop	{r4, r5, r6, pc}
    6f80:	7861      	ldrb	r1, [r4, #1]
    6f82:	2908      	cmp	r1, #8
    6f84:	d210      	bcs.n	6fa8 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x48>
    6f86:	2810      	cmp	r0, #16
    6f88:	d008      	beq.n	6f9c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3c>
    6f8a:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    6f8e:	2101      	movs	r1, #1
    6f90:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    6f94:	7860      	ldrb	r0, [r4, #1]
    6f96:	1c40      	adds	r0, r0, #1
    6f98:	7060      	strb	r0, [r4, #1]
    6f9a:	e7ef      	b.n	6f7c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x1c>
    6f9c:	2201      	movs	r2, #1
    6f9e:	4629      	mov	r1, r5
    6fa0:	4630      	mov	r0, r6
    6fa2:	f000 f887 	bl	70b4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb4>
    6fa6:	e7f5      	b.n	6f94 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x34>
    6fa8:	2000      	movs	r0, #0
    6faa:	bd70      	pop	{r4, r5, r6, pc}
    6fac:	20001422 	.word	0x20001422

00006fb0 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    6fb0:	b570      	push	{r4, r5, r6, lr}
    6fb2:	4d0b      	ldr	r5, [pc, #44]	; (6fe0 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x30>)
    6fb4:	7828      	ldrb	r0, [r5, #0]
    6fb6:	1e40      	subs	r0, r0, #1
    6fb8:	b244      	sxtb	r4, r0
    6fba:	e00a      	b.n	6fd2 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x22>
    6fbc:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    6fc0:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    6fc4:	07c0      	lsls	r0, r0, #31
    6fc6:	d002      	beq.n	6fce <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x1e>
    6fc8:	b2e0      	uxtb	r0, r4
    6fca:	f000 f8ed 	bl	71a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a8>
    6fce:	1e64      	subs	r4, r4, #1
    6fd0:	b264      	sxtb	r4, r4
    6fd2:	2c00      	cmp	r4, #0
    6fd4:	daf2      	bge.n	6fbc <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xc>
    6fd6:	4903      	ldr	r1, [pc, #12]	; (6fe4 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x34>)
    6fd8:	2000      	movs	r0, #0
    6fda:	7048      	strb	r0, [r1, #1]
    6fdc:	bd70      	pop	{r4, r5, r6, pc}
    6fde:	0000      	.short	0x0000
    6fe0:	20001422 	.word	0x20001422
    6fe4:	2000031c 	.word	0x2000031c

00006fe8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    6fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6fec:	2400      	movs	r4, #0
    6fee:	4625      	mov	r5, r4
    6ff0:	4e18      	ldr	r6, [pc, #96]	; (7054 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x54>)
    6ff2:	e029      	b.n	7048 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x48>
    6ff4:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
    6ff8:	f897 015a 	ldrb.w	r0, [r7, #346]	; 0x15a
    6ffc:	07c0      	lsls	r0, r0, #31
    6ffe:	d021      	beq.n	7044 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x44>
    7000:	4628      	mov	r0, r5
    7002:	f000 f843 	bl	708c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8c>
    7006:	4603      	mov	r3, r0
    7008:	f7ff ff44 	bl	6e94 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    700c:	4601      	mov	r1, r0
    700e:	2000      	movs	r0, #0
    7010:	2b10      	cmp	r3, #16
    7012:	d009      	beq.n	7028 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28>
    7014:	18f2      	adds	r2, r6, r3
    7016:	f892 c13b 	ldrb.w	ip, [r2, #315]	; 0x13b
    701a:	f1bc 0f01 	cmp.w	ip, #1
    701e:	d002      	beq.n	7026 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x26>
    7020:	f892 214b 	ldrb.w	r2, [r2, #331]	; 0x14b
    7024:	b102      	cbz	r2, 7028 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28>
    7026:	2001      	movs	r0, #1
    7028:	1e40      	subs	r0, r0, #1
    702a:	4201      	tst	r1, r0
    702c:	d10a      	bne.n	7044 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x44>
    702e:	480a      	ldr	r0, [pc, #40]	; (7058 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x58>)
    7030:	f507 71aa 	add.w	r1, r7, #340	; 0x154
    7034:	5503      	strb	r3, [r0, r4]
    7036:	4620      	mov	r0, r4
    7038:	1c64      	adds	r4, r4, #1
    703a:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
    703e:	b2e4      	uxtb	r4, r4
    7040:	f005 fb56 	bl	c6f0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    7044:	1c6d      	adds	r5, r5, #1
    7046:	b2ed      	uxtb	r5, r5
    7048:	7830      	ldrb	r0, [r6, #0]
    704a:	42a8      	cmp	r0, r5
    704c:	d8d2      	bhi.n	6ff4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc>
    704e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7052:	0000      	.short	0x0000
    7054:	20001422 	.word	0x20001422
    7058:	20000320 	.word	0x20000320
    705c:	4602      	mov	r2, r0
    705e:	4809      	ldr	r0, [pc, #36]	; (7084 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x84>)
    7060:	b510      	push	{r4, lr}
    7062:	7800      	ldrb	r0, [r0, #0]
    7064:	460b      	mov	r3, r1
    7066:	b158      	cbz	r0, 7080 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x80>
    7068:	4807      	ldr	r0, [pc, #28]	; (7088 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x88>)
    706a:	7881      	ldrb	r1, [r0, #2]
    706c:	b141      	cbz	r1, 7080 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x80>
    706e:	b10b      	cbz	r3, 7074 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x74>
    7070:	1cc0      	adds	r0, r0, #3
    7072:	e001      	b.n	7078 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x78>
    7074:	4804      	ldr	r0, [pc, #16]	; (7088 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x88>)
    7076:	3083      	adds	r0, #131	; 0x83
    7078:	f004 fd14 	bl	baa4 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    707c:	2001      	movs	r0, #1
    707e:	bd10      	pop	{r4, pc}
    7080:	2000      	movs	r0, #0
    7082:	bd10      	pop	{r4, pc}
    7084:	2000031c 	.word	0x2000031c
    7088:	20001422 	.word	0x20001422
    708c:	4908      	ldr	r1, [pc, #32]	; (70b0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb0>)
    708e:	b510      	push	{r4, lr}
    7090:	4603      	mov	r3, r0
    7092:	2000      	movs	r0, #0
    7094:	788a      	ldrb	r2, [r1, #2]
    7096:	e006      	b.n	70a6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa6>
    7098:	180c      	adds	r4, r1, r0
    709a:	f894 4103 	ldrb.w	r4, [r4, #259]	; 0x103
    709e:	429c      	cmp	r4, r3
    70a0:	d004      	beq.n	70ac <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xac>
    70a2:	1c40      	adds	r0, r0, #1
    70a4:	b2c0      	uxtb	r0, r0
    70a6:	4282      	cmp	r2, r0
    70a8:	d8f6      	bhi.n	7098 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x98>
    70aa:	2010      	movs	r0, #16
    70ac:	bd10      	pop	{r4, pc}
    70ae:	0000      	.short	0x0000
    70b0:	20001422 	.word	0x20001422
    70b4:	b570      	push	{r4, r5, r6, lr}
    70b6:	4b0c      	ldr	r3, [pc, #48]	; (70e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe8>)
    70b8:	4604      	mov	r4, r0
    70ba:	7818      	ldrb	r0, [r3, #0]
    70bc:	1c45      	adds	r5, r0, #1
    70be:	701d      	strb	r5, [r3, #0]
    70c0:	2810      	cmp	r0, #16
    70c2:	d303      	bcc.n	70cc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xcc>
    70c4:	2146      	movs	r1, #70	; 0x46
    70c6:	2028      	movs	r0, #40	; 0x28
    70c8:	f7fe fa4a 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    70cc:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    70d0:	680d      	ldr	r5, [r1, #0]
    70d2:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
    70d6:	8889      	ldrh	r1, [r1, #4]
    70d8:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    70dc:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    70e0:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    70e4:	bd70      	pop	{r4, r5, r6, pc}
    70e6:	0000      	.short	0x0000
    70e8:	20001422 	.word	0x20001422
    70ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    70ee:	4c1a      	ldr	r4, [pc, #104]	; (7158 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x158>)
    70f0:	4603      	mov	r3, r0
    70f2:	2000      	movs	r0, #0
    70f4:	7825      	ldrb	r5, [r4, #0]
    70f6:	e02a      	b.n	714e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14e>
    70f8:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    70fc:	780f      	ldrb	r7, [r1, #0]
    70fe:	f892 c154 	ldrb.w	ip, [r2, #340]	; 0x154
    7102:	f892 6153 	ldrb.w	r6, [r2, #339]	; 0x153
    7106:	ea87 070c 	eor.w	r7, r7, ip
    710a:	405e      	eors	r6, r3
    710c:	443e      	add	r6, r7
    710e:	784f      	ldrb	r7, [r1, #1]
    7110:	f892 c155 	ldrb.w	ip, [r2, #341]	; 0x155
    7114:	ea87 070c 	eor.w	r7, r7, ip
    7118:	443e      	add	r6, r7
    711a:	788f      	ldrb	r7, [r1, #2]
    711c:	f892 c156 	ldrb.w	ip, [r2, #342]	; 0x156
    7120:	ea87 070c 	eor.w	r7, r7, ip
    7124:	443e      	add	r6, r7
    7126:	78cf      	ldrb	r7, [r1, #3]
    7128:	f892 c157 	ldrb.w	ip, [r2, #343]	; 0x157
    712c:	ea87 070c 	eor.w	r7, r7, ip
    7130:	443e      	add	r6, r7
    7132:	790f      	ldrb	r7, [r1, #4]
    7134:	f892 c158 	ldrb.w	ip, [r2, #344]	; 0x158
    7138:	f892 2159 	ldrb.w	r2, [r2, #345]	; 0x159
    713c:	ea87 070c 	eor.w	r7, r7, ip
    7140:	443e      	add	r6, r7
    7142:	794f      	ldrb	r7, [r1, #5]
    7144:	4057      	eors	r7, r2
    7146:	42f7      	cmn	r7, r6
    7148:	d004      	beq.n	7154 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x154>
    714a:	1c40      	adds	r0, r0, #1
    714c:	b2c0      	uxtb	r0, r0
    714e:	4285      	cmp	r5, r0
    7150:	d8d2      	bhi.n	70f8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf8>
    7152:	2010      	movs	r0, #16
    7154:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7156:	0000      	.short	0x0000
    7158:	20001422 	.word	0x20001422
    715c:	b570      	push	{r4, r5, r6, lr}
    715e:	4605      	mov	r5, r0
    7160:	f7ff ff94 	bl	708c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8c>
    7164:	2810      	cmp	r0, #16
    7166:	d11c      	bne.n	71a2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a2>
    7168:	4c0e      	ldr	r4, [pc, #56]	; (71a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a4>)
    716a:	7820      	ldrb	r0, [r4, #0]
    716c:	1e40      	subs	r0, r0, #1
    716e:	b2c0      	uxtb	r0, r0
    7170:	7020      	strb	r0, [r4, #0]
    7172:	42a8      	cmp	r0, r5
    7174:	d015      	beq.n	71a2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a2>
    7176:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    717a:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    717e:	f502 7080 	add.w	r0, r2, #256	; 0x100
    7182:	f8d2 2153 	ldr.w	r2, [r2, #339]	; 0x153
    7186:	f8c1 2153 	str.w	r2, [r1, #339]	; 0x153
    718a:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
    718e:	f8c1 0157 	str.w	r0, [r1, #343]	; 0x157
    7192:	7820      	ldrb	r0, [r4, #0]
    7194:	f7ff ff7a 	bl	708c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8c>
    7198:	2810      	cmp	r0, #16
    719a:	d002      	beq.n	71a2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a2>
    719c:	4420      	add	r0, r4
    719e:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    71a2:	bd70      	pop	{r4, r5, r6, pc}
    71a4:	20001422 	.word	0x20001422
    71a8:	4905      	ldr	r1, [pc, #20]	; (71c0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c0>)
    71aa:	784a      	ldrb	r2, [r1, #1]
    71ac:	1e52      	subs	r2, r2, #1
    71ae:	704a      	strb	r2, [r1, #1]
    71b0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    71b4:	2200      	movs	r2, #0
    71b6:	f881 215a 	strb.w	r2, [r1, #346]	; 0x15a
    71ba:	f7ff bfcf 	b.w	715c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x15c>
    71be:	0000      	.short	0x0000
    71c0:	20001422 	.word	0x20001422

000071c4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
    71c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    71c8:	4604      	mov	r4, r0
    71ca:	f04f 0801 	mov.w	r8, #1
    71ce:	b181      	cbz	r1, 71f2 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x2e>
    71d0:	f104 068f 	add.w	r6, r4, #143	; 0x8f
    71d4:	1e75      	subs	r5, r6, #1
    71d6:	f104 0078 	add.w	r0, r4, #120	; 0x78
    71da:	2901      	cmp	r1, #1
    71dc:	d022      	beq.n	7224 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x60>
    71de:	2902      	cmp	r1, #2
    71e0:	d045      	beq.n	726e <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xaa>
    71e2:	2903      	cmp	r1, #3
    71e4:	d11c      	bne.n	7220 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5c>
    71e6:	4631      	mov	r1, r6
    71e8:	4628      	mov	r0, r5
    71ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    71ee:	f007 bfcc 	b.w	f18a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    71f2:	f44f 7228 	mov.w	r2, #672	; 0x2a0
    71f6:	2100      	movs	r1, #0
    71f8:	f006 fbb0 	bl	d95c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    71fc:	f884 808e 	strb.w	r8, [r4, #142]	; 0x8e
    7200:	3484      	adds	r4, #132	; 0x84
    7202:	f004 fc1f 	bl	ba44 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    7206:	f644 122b 	movw	r2, #18731	; 0x492b
    720a:	4010      	ands	r0, r2
    720c:	6520      	str	r0, [r4, #80]	; 0x50
    720e:	f001 0106 	and.w	r1, r1, #6
    7212:	6561      	str	r1, [r4, #84]	; 0x54
    7214:	20fe      	movs	r0, #254	; 0xfe
    7216:	f884 0088 	strb.w	r0, [r4, #136]	; 0x88
    721a:	207f      	movs	r0, #127	; 0x7f
    721c:	f804 0c03 	strb.w	r0, [r4, #-3]
    7220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7224:	2700      	movs	r7, #0
    7226:	f8a4 71de 	strh.w	r7, [r4, #478]	; 0x1de
    722a:	f884 71d3 	strb.w	r7, [r4, #467]	; 0x1d3
    722e:	4a14      	ldr	r2, [pc, #80]	; (7280 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xbc>)
    7230:	6921      	ldr	r1, [r4, #16]
    7232:	440a      	add	r2, r1
    7234:	fbb2 f2f1 	udiv	r2, r2, r1
    7238:	f8c4 20ac 	str.w	r2, [r4, #172]	; 0xac
    723c:	f640 32b8 	movw	r2, #3000	; 0xbb8
    7240:	f8a4 20b0 	strh.w	r2, [r4, #176]	; 0xb0
    7244:	8b63      	ldrh	r3, [r4, #26]
    7246:	460a      	mov	r2, r1
    7248:	f000 f81c 	bl	7284 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc0>
    724c:	4631      	mov	r1, r6
    724e:	4628      	mov	r0, r5
    7250:	f007 ff9b 	bl	f18a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    7254:	f006 fae4 	bl	d820 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    7258:	b118      	cbz	r0, 7262 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x9e>
    725a:	6960      	ldr	r0, [r4, #20]
    725c:	f000 fbae 	bl	79bc <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    7260:	b110      	cbz	r0, 7268 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa4>
    7262:	f884 71c6 	strb.w	r7, [r4, #454]	; 0x1c6
    7266:	e7db      	b.n	7220 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5c>
    7268:	f884 81c6 	strb.w	r8, [r4, #454]	; 0x1c6
    726c:	e7d8      	b.n	7220 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5c>
    726e:	f8b4 3282 	ldrh.w	r3, [r4, #642]	; 0x282
    7272:	f8d4 227c 	ldr.w	r2, [r4, #636]	; 0x27c
    7276:	6921      	ldr	r1, [r4, #16]
    7278:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    727c:	f000 b802 	b.w	7284 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc0>
    7280:	01c9c37f 	.word	0x01c9c37f
    7284:	b530      	push	{r4, r5, lr}
    7286:	2400      	movs	r4, #0
    7288:	8784      	strh	r4, [r0, #60]	; 0x3c
    728a:	f8b0 4040 	ldrh.w	r4, [r0, #64]	; 0x40
    728e:	4d15      	ldr	r5, [pc, #84]	; (72e4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x120>)
    7290:	434c      	muls	r4, r1
    7292:	fbb4 f4f2 	udiv	r4, r4, r2
    7296:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
    729a:	f242 7410 	movw	r4, #10000	; 0x2710
    729e:	4363      	muls	r3, r4
    72a0:	fbb3 f3f2 	udiv	r3, r3, r2
    72a4:	1c5b      	adds	r3, r3, #1
    72a6:	b29b      	uxth	r3, r3
    72a8:	fb03 f402 	mul.w	r4, r3, r2
    72ac:	87c3      	strh	r3, [r0, #62]	; 0x3e
    72ae:	42ac      	cmp	r4, r5
    72b0:	d901      	bls.n	72b6 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xf2>
    72b2:	1e5b      	subs	r3, r3, #1
    72b4:	87c3      	strh	r3, [r0, #62]	; 0x3e
    72b6:	4b0c      	ldr	r3, [pc, #48]	; (72e8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x124>)
    72b8:	f240 2471 	movw	r4, #625	; 0x271
    72bc:	fbb3 f3f2 	udiv	r3, r3, r2
    72c0:	1c5b      	adds	r3, r3, #1
    72c2:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    72c6:	8f03      	ldrh	r3, [r0, #56]	; 0x38
    72c8:	4363      	muls	r3, r4
    72ca:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    72ce:	1e5b      	subs	r3, r3, #1
    72d0:	fbb3 f3f2 	udiv	r3, r3, r2
    72d4:	6343      	str	r3, [r0, #52]	; 0x34
    72d6:	6b03      	ldr	r3, [r0, #48]	; 0x30
    72d8:	434b      	muls	r3, r1
    72da:	fbb3 f1f2 	udiv	r1, r3, r2
    72de:	6301      	str	r1, [r0, #48]	; 0x30
    72e0:	bd30      	pop	{r4, r5, pc}
    72e2:	0000      	.short	0x0000
    72e4:	01e84800 	.word	0x01e84800
    72e8:	02625a00 	.word	0x02625a00

000072ec <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    72ec:	b570      	push	{r4, r5, r6, lr}
    72ee:	ea81 4111 	eor.w	r1, r1, r1, lsr #16
    72f2:	b28b      	uxth	r3, r1
    72f4:	7ac5      	ldrb	r5, [r0, #11]
    72f6:	ea83 0102 	eor.w	r1, r3, r2
    72fa:	2200      	movs	r2, #0
    72fc:	b2cc      	uxtb	r4, r1
    72fe:	0a09      	lsrs	r1, r1, #8
    7300:	fa94 f4a4 	rbit	r4, r4
    7304:	fa91 f1a1 	rbit	r1, r1
    7308:	0e24      	lsrs	r4, r4, #24
    730a:	0e09      	lsrs	r1, r1, #24
    730c:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    7310:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    7314:	1c52      	adds	r2, r2, #1
    7316:	4419      	add	r1, r3
    7318:	b2d2      	uxtb	r2, r2
    731a:	b289      	uxth	r1, r1
    731c:	2a03      	cmp	r2, #3
    731e:	d3ed      	bcc.n	72fc <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10>
    7320:	4059      	eors	r1, r3
    7322:	2225      	movs	r2, #37	; 0x25
    7324:	fbb1 f3f2 	udiv	r3, r1, r2
    7328:	fb02 1213 	mls	r2, r2, r3, r1
    732c:	eb00 03d2 	add.w	r3, r0, r2, lsr #3
    7330:	f002 0607 	and.w	r6, r2, #7
    7334:	785b      	ldrb	r3, [r3, #1]
    7336:	2401      	movs	r4, #1
    7338:	fa04 f606 	lsl.w	r6, r4, r6
    733c:	4233      	tst	r3, r6
    733e:	d001      	beq.n	7344 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x58>
    7340:	4610      	mov	r0, r2
    7342:	bd70      	pop	{r4, r5, r6, pc}
    7344:	434d      	muls	r5, r1
    7346:	0c29      	lsrs	r1, r5, #16
    7348:	1c49      	adds	r1, r1, #1
    734a:	b2c9      	uxtb	r1, r1
    734c:	2200      	movs	r2, #0
    734e:	1885      	adds	r5, r0, r2
    7350:	79ab      	ldrb	r3, [r5, #6]
    7352:	428b      	cmp	r3, r1
    7354:	d312      	bcc.n	737c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x90>
    7356:	f895 5001 	ldrb.w	r5, [r5, #1]
    735a:	2300      	movs	r3, #0
    735c:	fa04 f603 	lsl.w	r6, r4, r3
    7360:	4235      	tst	r5, r6
    7362:	d001      	beq.n	7368 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x7c>
    7364:	1e49      	subs	r1, r1, #1
    7366:	b2c9      	uxtb	r1, r1
    7368:	b121      	cbz	r1, 7374 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x88>
    736a:	1c5b      	adds	r3, r3, #1
    736c:	b2db      	uxtb	r3, r3
    736e:	2b08      	cmp	r3, #8
    7370:	d3f4      	bcc.n	735c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x70>
    7372:	e005      	b.n	7380 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x94>
    7374:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
    7378:	b2c0      	uxtb	r0, r0
    737a:	bd70      	pop	{r4, r5, r6, pc}
    737c:	1ac9      	subs	r1, r1, r3
    737e:	b2c9      	uxtb	r1, r1
    7380:	1c52      	adds	r2, r2, #1
    7382:	b2d2      	uxtb	r2, r2
    7384:	2a05      	cmp	r2, #5
    7386:	d3e2      	bcc.n	734e <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x62>
    7388:	f240 110d 	movw	r1, #269	; 0x10d
    738c:	2046      	movs	r0, #70	; 0x46
    738e:	f7fe f8e7 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7392:	0000      	movs	r0, r0
    7394:	b570      	push	{r4, r5, r6, lr}
    7396:	f890 2023 	ldrb.w	r2, [r0, #35]	; 0x23
    739a:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
    739e:	2401      	movs	r4, #1
    73a0:	fb03 2101 	mla	r1, r3, r1, r2
    73a4:	2225      	movs	r2, #37	; 0x25
    73a6:	fbb1 f3f2 	udiv	r3, r1, r2
    73aa:	fb02 1113 	mls	r1, r2, r3, r1
    73ae:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    73b2:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    73b6:	f001 0307 	and.w	r3, r1, #7
    73ba:	7dd2      	ldrb	r2, [r2, #23]
    73bc:	fa04 f303 	lsl.w	r3, r4, r3
    73c0:	421a      	tst	r2, r3
    73c2:	d003      	beq.n	73cc <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xe0>
    73c4:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
    73c8:	2000      	movs	r0, #0
    73ca:	bd70      	pop	{r4, r5, r6, pc}
    73cc:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
    73d0:	fbb1 f3f2 	udiv	r3, r1, r2
    73d4:	fb02 1113 	mls	r1, r2, r3, r1
    73d8:	1c49      	adds	r1, r1, #1
    73da:	b2c9      	uxtb	r1, r1
    73dc:	2300      	movs	r3, #0
    73de:	18c5      	adds	r5, r0, r3
    73e0:	7f2a      	ldrb	r2, [r5, #28]
    73e2:	428a      	cmp	r2, r1
    73e4:	d311      	bcc.n	740a <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x11e>
    73e6:	f895 5017 	ldrb.w	r5, [r5, #23]
    73ea:	2200      	movs	r2, #0
    73ec:	fa04 f602 	lsl.w	r6, r4, r2
    73f0:	4235      	tst	r5, r6
    73f2:	d001      	beq.n	73f8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10c>
    73f4:	1e49      	subs	r1, r1, #1
    73f6:	b2c9      	uxtb	r1, r1
    73f8:	b121      	cbz	r1, 7404 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x118>
    73fa:	1c52      	adds	r2, r2, #1
    73fc:	b2d2      	uxtb	r2, r2
    73fe:	2a08      	cmp	r2, #8
    7400:	d3f4      	bcc.n	73ec <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x100>
    7402:	e004      	b.n	740e <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x122>
    7404:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    7408:	e7dc      	b.n	73c4 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xd8>
    740a:	1a89      	subs	r1, r1, r2
    740c:	b2c9      	uxtb	r1, r1
    740e:	1c5b      	adds	r3, r3, #1
    7410:	b2db      	uxtb	r3, r3
    7412:	2b05      	cmp	r3, #5
    7414:	d3e3      	bcc.n	73de <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xf2>
    7416:	201f      	movs	r0, #31
    7418:	bd70      	pop	{r4, r5, r6, pc}
	...

0000741c <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>:
    741c:	7841      	ldrb	r1, [r0, #1]
    741e:	b141      	cbz	r1, 7432 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    7420:	78c0      	ldrb	r0, [r0, #3]
    7422:	2826      	cmp	r0, #38	; 0x26
    7424:	d203      	bcs.n	742e <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x12>
    7426:	4a04      	ldr	r2, [pc, #16]	; (7438 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x1c>)
    7428:	5c10      	ldrb	r0, [r2, r0]
    742a:	4288      	cmp	r0, r1
    742c:	d101      	bne.n	7432 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    742e:	2001      	movs	r0, #1
    7430:	4770      	bx	lr
    7432:	2000      	movs	r0, #0
    7434:	4770      	bx	lr
    7436:	0000      	.short	0x0000
    7438:	000116da 	.word	0x000116da

0000743c <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>:
    743c:	b510      	push	{r4, lr}
    743e:	2201      	movs	r2, #1
    7440:	70c1      	strb	r1, [r0, #3]
    7442:	2926      	cmp	r1, #38	; 0x26
    7444:	d202      	bcs.n	744c <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x10>
    7446:	4a06      	ldr	r2, [pc, #24]	; (7460 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x24>)
    7448:	5c52      	ldrb	r2, [r2, r1]
    744a:	e006      	b.n	745a <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    744c:	29ff      	cmp	r1, #255	; 0xff
    744e:	d004      	beq.n	745a <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    7450:	f240 411d 	movw	r1, #1053	; 0x41d
    7454:	202a      	movs	r0, #42	; 0x2a
    7456:	f7fe f883 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    745a:	7042      	strb	r2, [r0, #1]
    745c:	bd10      	pop	{r4, pc}
    745e:	0000      	.short	0x0000
    7460:	000116da 	.word	0x000116da

00007464 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>:
    7464:	4904      	ldr	r1, [pc, #16]	; (7478 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0x14>)
    7466:	7c89      	ldrb	r1, [r1, #18]
    7468:	0749      	lsls	r1, r1, #29
    746a:	d400      	bmi.n	746e <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xa>
    746c:	b108      	cbz	r0, 7472 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xe>
    746e:	2000      	movs	r0, #0
    7470:	4770      	bx	lr
    7472:	2001      	movs	r0, #1
    7474:	4770      	bx	lr
    7476:	0000      	.short	0x0000
    7478:	2000117c 	.word	0x2000117c

0000747c <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>:
    747c:	4803      	ldr	r0, [pc, #12]	; (748c <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0x10>)
    747e:	7c80      	ldrb	r0, [r0, #18]
    7480:	0780      	lsls	r0, r0, #30
    7482:	d401      	bmi.n	7488 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0xc>
    7484:	2001      	movs	r0, #1
    7486:	4770      	bx	lr
    7488:	2000      	movs	r0, #0
    748a:	4770      	bx	lr
    748c:	2000117c 	.word	0x2000117c

00007490 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>:
    7490:	4803      	ldr	r0, [pc, #12]	; (74a0 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x10>)
    7492:	7c80      	ldrb	r0, [r0, #18]
    7494:	07c0      	lsls	r0, r0, #31
    7496:	d001      	beq.n	749c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xc>
    7498:	2000      	movs	r0, #0
    749a:	4770      	bx	lr
    749c:	2001      	movs	r0, #1
    749e:	4770      	bx	lr
    74a0:	2000117c 	.word	0x2000117c

000074a4 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>:
    74a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    74a8:	4c12      	ldr	r4, [pc, #72]	; (74f4 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    74aa:	4607      	mov	r7, r0
    74ac:	460e      	mov	r6, r1
    74ae:	7da0      	ldrb	r0, [r4, #22]
    74b0:	b110      	cbz	r0, 74b8 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x14>
    74b2:	8b20      	ldrh	r0, [r4, #24]
    74b4:	2800      	cmp	r0, #0
    74b6:	d012      	beq.n	74de <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    74b8:	480e      	ldr	r0, [pc, #56]	; (74f4 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    74ba:	3014      	adds	r0, #20
    74bc:	4680      	mov	r8, r0
    74be:	f008 f823 	bl	f508 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    74c2:	b9a8      	cbnz	r0, 74f0 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    74c4:	8aa5      	ldrh	r5, [r4, #20]
    74c6:	8aa0      	ldrh	r0, [r4, #20]
    74c8:	4632      	mov	r2, r6
    74ca:	4639      	mov	r1, r7
    74cc:	f008 f860 	bl	f590 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2e>
    74d0:	b138      	cbz	r0, 74e2 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3e>
    74d2:	7da0      	ldrb	r0, [r4, #22]
    74d4:	b110      	cbz	r0, 74dc <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x38>
    74d6:	8b20      	ldrh	r0, [r4, #24]
    74d8:	1e40      	subs	r0, r0, #1
    74da:	8320      	strh	r0, [r4, #24]
    74dc:	2001      	movs	r0, #1
    74de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    74e2:	4640      	mov	r0, r8
    74e4:	f008 f810 	bl	f508 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    74e8:	b910      	cbnz	r0, 74f0 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    74ea:	8aa0      	ldrh	r0, [r4, #20]
    74ec:	42a8      	cmp	r0, r5
    74ee:	d1ea      	bne.n	74c6 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x22>
    74f0:	2000      	movs	r0, #0
    74f2:	e7f4      	b.n	74de <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    74f4:	2000117c 	.word	0x2000117c
    74f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    74fc:	468a      	mov	sl, r1
    74fe:	4699      	mov	r9, r3
    7500:	4615      	mov	r5, r2
    7502:	4604      	mov	r4, r0
    7504:	a901      	add	r1, sp, #4
    7506:	f007 fc61 	bl	edcc <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    750a:	bbe0      	cbnz	r0, 7586 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe2>
    750c:	9f02      	ldr	r7, [sp, #8]
    750e:	f04f 0800 	mov.w	r8, #0
    7512:	3778      	adds	r7, #120	; 0x78
    7514:	b18d      	cbz	r5, 753a <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x96>
    7516:	4620      	mov	r0, r4
    7518:	f7fe fc60 	bl	5ddc <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    751c:	0004      	movs	r4, r0
    751e:	d00f      	beq.n	7540 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x9c>
    7520:	4629      	mov	r1, r5
    7522:	f007 f812 	bl	e54a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    7526:	0006      	movs	r6, r0
    7528:	d003      	beq.n	7532 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x8e>
    752a:	481d      	ldr	r0, [pc, #116]	; (75a0 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xfc>)
    752c:	8840      	ldrh	r0, [r0, #2]
    752e:	42a8      	cmp	r0, r5
    7530:	d208      	bcs.n	7544 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xa0>
    7532:	2000      	movs	r0, #0
    7534:	b004      	add	sp, #16
    7536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    753a:	2001      	movs	r0, #1
    753c:	7578      	strb	r0, [r7, #21]
    753e:	e029      	b.n	7594 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf0>
    7540:	216e      	movs	r1, #110	; 0x6e
    7542:	e02a      	b.n	759a <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf6>
    7544:	4620      	mov	r0, r4
    7546:	4631      	mov	r1, r6
    7548:	aa03      	add	r2, sp, #12
    754a:	f006 fff7 	bl	e53c <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    754e:	9803      	ldr	r0, [sp, #12]
    7550:	f8a0 8000 	strh.w	r8, [r0]
    7554:	f880 8002 	strb.w	r8, [r0, #2]
    7558:	7d79      	ldrb	r1, [r7, #21]
    755a:	b109      	cbz	r1, 7560 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xbc>
    755c:	f04f 0a02 	mov.w	sl, #2
    7560:	4651      	mov	r1, sl
    7562:	f007 ff52 	bl	f40a <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    7566:	4631      	mov	r1, r6
    7568:	2603      	movs	r6, #3
    756a:	4620      	mov	r0, r4
    756c:	464a      	mov	r2, r9
    756e:	462b      	mov	r3, r5
    7570:	9600      	str	r6, [sp, #0]
    7572:	f006 fed7 	bl	e324 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>
    7576:	4620      	mov	r0, r4
    7578:	4629      	mov	r1, r5
    757a:	f006 ff98 	bl	e4ae <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    757e:	b158      	cbz	r0, 7598 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf4>
    7580:	4644      	mov	r4, r8
    7582:	a801      	add	r0, sp, #4
    7584:	e000      	b.n	7588 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe4>
    7586:	e005      	b.n	7594 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf0>
    7588:	f007 ffdf 	bl	f54a <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    758c:	9802      	ldr	r0, [sp, #8]
    758e:	f8a0 41ca 	strh.w	r4, [r0, #458]	; 0x1ca
    7592:	757c      	strb	r4, [r7, #21]
    7594:	2001      	movs	r0, #1
    7596:	e7cd      	b.n	7534 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x90>
    7598:	2184      	movs	r1, #132	; 0x84
    759a:	202b      	movs	r0, #43	; 0x2b
    759c:	f7fd ffe0 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    75a0:	2000117c 	.word	0x2000117c

000075a4 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>:
    75a4:	4901      	ldr	r1, [pc, #4]	; (75ac <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x8>)
    75a6:	2001      	movs	r0, #1
    75a8:	7008      	strb	r0, [r1, #0]
    75aa:	4770      	bx	lr
    75ac:	20001605 	.word	0x20001605

000075b0 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>:
    75b0:	b538      	push	{r3, r4, r5, lr}
    75b2:	b198      	cbz	r0, 75dc <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x2c>
    75b4:	7a03      	ldrb	r3, [r0, #8]
    75b6:	f88d 3000 	strb.w	r3, [sp]
    75ba:	9b00      	ldr	r3, [sp, #0]
    75bc:	9300      	str	r3, [sp, #0]
    75be:	f89d 3000 	ldrb.w	r3, [sp]
    75c2:	2b00      	cmp	r3, #0
    75c4:	d114      	bne.n	75f0 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x40>
    75c6:	6003      	str	r3, [r0, #0]
    75c8:	6041      	str	r1, [r0, #4]
    75ca:	f3ef 8310 	mrs	r3, PRIMASK
    75ce:	b672      	cpsid	i
    75d0:	4908      	ldr	r1, [pc, #32]	; (75f4 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x44>)
    75d2:	680c      	ldr	r4, [r1, #0]
    75d4:	b13c      	cbz	r4, 75e6 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x36>
    75d6:	684c      	ldr	r4, [r1, #4]
    75d8:	6020      	str	r0, [r4, #0]
    75da:	e005      	b.n	75e8 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x38>
    75dc:	f240 4141 	movw	r1, #1089	; 0x441
    75e0:	2010      	movs	r0, #16
    75e2:	f7fd ffbd 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    75e6:	6008      	str	r0, [r1, #0]
    75e8:	6048      	str	r0, [r1, #4]
    75ea:	b903      	cbnz	r3, 75ee <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x3e>
    75ec:	b662      	cpsie	i
    75ee:	7202      	strb	r2, [r0, #8]
    75f0:	bd38      	pop	{r3, r4, r5, pc}
    75f2:	0000      	.short	0x0000
    75f4:	20000118 	.word	0x20000118

000075f8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    75f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    75fc:	0004      	movs	r4, r0
    75fe:	d00a      	beq.n	7616 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1e>
    7600:	484d      	ldr	r0, [pc, #308]	; (7738 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x140>)
    7602:	2600      	movs	r6, #0
    7604:	7801      	ldrb	r1, [r0, #0]
    7606:	b149      	cbz	r1, 761c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x24>
    7608:	7066      	strb	r6, [r4, #1]
    760a:	2103      	movs	r1, #3
    760c:	7021      	strb	r1, [r4, #0]
    760e:	2101      	movs	r1, #1
    7610:	7121      	strb	r1, [r4, #4]
    7612:	7006      	strb	r6, [r0, #0]
    7614:	e08d      	b.n	7732 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13a>
    7616:	f240 315d 	movw	r1, #861	; 0x35d
    761a:	e050      	b.n	76be <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc6>
    761c:	f8df 811c 	ldr.w	r8, [pc, #284]	; 773c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x144>
    7620:	f88d 6000 	strb.w	r6, [sp]
    7624:	4668      	mov	r0, sp
    7626:	f000 f8b9 	bl	779c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2c>
    762a:	f89d 1000 	ldrb.w	r1, [sp]
    762e:	2900      	cmp	r1, #0
    7630:	d1f8      	bne.n	7624 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x2c>
    7632:	2800      	cmp	r0, #0
    7634:	d07e      	beq.n	7734 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13c>
    7636:	4605      	mov	r5, r0
    7638:	7a00      	ldrb	r0, [r0, #8]
    763a:	f88d 0000 	strb.w	r0, [sp]
    763e:	9800      	ldr	r0, [sp, #0]
    7640:	9000      	str	r0, [sp, #0]
    7642:	f89d 7000 	ldrb.w	r7, [sp]
    7646:	2f1f      	cmp	r7, #31
    7648:	d26e      	bcs.n	7728 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x130>
    764a:	e8df f007 	tbb	[pc, r7]
    764e:	3d6d      	.short	0x3d6d
    7650:	3d6d106d 	.word	0x3d6d106d
    7654:	3d3d4d3d 	.word	0x3d3d4d3d
    7658:	6d3d3d3d 	.word	0x6d3d3d3d
    765c:	3d3d6d10 	.word	0x3d3d6d10
    7660:	6d6d6d10 	.word	0x6d6d6d10
    7664:	103d3d6d 	.word	0x103d3d6d
    7668:	626d3d3d 	.word	0x626d3d3d
    766c:	0010      	.short	0x0010
    766e:	4834      	ldr	r0, [pc, #208]	; (7740 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x148>)
    7670:	6803      	ldr	r3, [r0, #0]
    7672:	2b00      	cmp	r3, #0
    7674:	d05c      	beq.n	7730 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x138>
    7676:	6868      	ldr	r0, [r5, #4]
    7678:	463a      	mov	r2, r7
    767a:	4621      	mov	r1, r4
    767c:	4798      	blx	r3
    767e:	7820      	ldrb	r0, [r4, #0]
    7680:	6869      	ldr	r1, [r5, #4]
    7682:	2811      	cmp	r0, #17
    7684:	d002      	beq.n	768c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x94>
    7686:	2814      	cmp	r0, #20
    7688:	d003      	beq.n	7692 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
    768a:	e01b      	b.n	76c4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    768c:	7920      	ldrb	r0, [r4, #4]
    768e:	b930      	cbnz	r0, 769e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa6>
    7690:	e018      	b.n	76c4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    7692:	7920      	ldrb	r0, [r4, #4]
    7694:	b1b0      	cbz	r0, 76c4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    7696:	4608      	mov	r0, r1
    7698:	f008 fa8e 	bl	fbb8 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    769c:	b990      	cbnz	r0, 76c4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    769e:	88e4      	ldrh	r4, [r4, #6]
    76a0:	2100      	movs	r1, #0
    76a2:	4620      	mov	r0, r4
    76a4:	f007 f904 	bl	e8b0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    76a8:	b160      	cbz	r0, 76c4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    76aa:	8800      	ldrh	r0, [r0, #0]
    76ac:	f007 fabe 	bl	ec2c <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    76b0:	2100      	movs	r1, #0
    76b2:	4620      	mov	r0, r4
    76b4:	f7fe f9e8 	bl	5a88 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    76b8:	b120      	cbz	r0, 76c4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    76ba:	f44f 71af 	mov.w	r1, #350	; 0x15e
    76be:	2010      	movs	r0, #16
    76c0:	f7fd ff4e 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    76c4:	722e      	strb	r6, [r5, #8]
    76c6:	e034      	b.n	7732 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13a>
    76c8:	f8d8 0000 	ldr.w	r0, [r8]
    76cc:	b358      	cbz	r0, 7726 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12e>
    76ce:	463a      	mov	r2, r7
    76d0:	4629      	mov	r1, r5
    76d2:	4620      	mov	r0, r4
    76d4:	f000 f892 	bl	77fc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8c>
    76d8:	b110      	cbz	r0, 76e0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xe8>
    76da:	2f0b      	cmp	r7, #11
    76dc:	d029      	beq.n	7732 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13a>
    76de:	e7f1      	b.n	76c4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    76e0:	2f0b      	cmp	r7, #11
    76e2:	d026      	beq.n	7732 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13a>
    76e4:	722e      	strb	r6, [r5, #8]
    76e6:	e79b      	b.n	7620 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x28>
    76e8:	f8d8 0000 	ldr.w	r0, [r8]
    76ec:	b180      	cbz	r0, 7710 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x118>
    76ee:	6868      	ldr	r0, [r5, #4]
    76f0:	7066      	strb	r6, [r4, #1]
    76f2:	2108      	movs	r1, #8
    76f4:	7021      	strb	r1, [r4, #0]
    76f6:	8801      	ldrh	r1, [r0, #0]
    76f8:	80a1      	strh	r1, [r4, #4]
    76fa:	f8d0 1290 	ldr.w	r1, [r0, #656]	; 0x290
    76fe:	f8c4 1006 	str.w	r1, [r4, #6]
    7702:	f8d0 1294 	ldr.w	r1, [r0, #660]	; 0x294
    7706:	f8c4 100a 	str.w	r1, [r4, #10]
    770a:	f8b0 0298 	ldrh.w	r0, [r0, #664]	; 0x298
    770e:	81e0      	strh	r0, [r4, #14]
    7710:	e7d8      	b.n	76c4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    7712:	480c      	ldr	r0, [pc, #48]	; (7744 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x14c>)
    7714:	6803      	ldr	r3, [r0, #0]
    7716:	b11b      	cbz	r3, 7720 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x128>
    7718:	2200      	movs	r2, #0
    771a:	4621      	mov	r1, r4
    771c:	4610      	mov	r0, r2
    771e:	4798      	blx	r3
    7720:	e7d0      	b.n	76c4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    7722:	e007      	b.n	7734 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13c>
    7724:	e000      	b.n	7728 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x130>
    7726:	e002      	b.n	772e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x136>
    7728:	f240 412d 	movw	r1, #1069	; 0x42d
    772c:	e7c7      	b.n	76be <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc6>
    772e:	e7c9      	b.n	76c4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    7730:	e7c8      	b.n	76c4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    7732:	2001      	movs	r0, #1
    7734:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7738:	20001605 	.word	0x20001605
    773c:	20000124 	.word	0x20000124
    7740:	20000120 	.word	0x20000120
    7744:	20000128 	.word	0x20000128

00007748 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    7748:	4901      	ldr	r1, [pc, #4]	; (7750 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    774a:	7008      	strb	r0, [r1, #0]
    774c:	f000 b928 	b.w	79a0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x230>
    7750:	20000114 	.word	0x20000114

00007754 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>:
    7754:	4801      	ldr	r0, [pc, #4]	; (775c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI+0x8>)
    7756:	7800      	ldrb	r0, [r0, #0]
    7758:	f7fd bd06 	b.w	5168 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    775c:	20000114 	.word	0x20000114

00007760 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q>:
    7760:	4902      	ldr	r1, [pc, #8]	; (776c <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0xc>)
    7762:	4801      	ldr	r0, [pc, #4]	; (7768 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x8>)
    7764:	6008      	str	r0, [r1, #0]
    7766:	4770      	bx	lr
    7768:	0000fae3 	.word	0x0000fae3
    776c:	20000120 	.word	0x20000120

00007770 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>:
    7770:	4905      	ldr	r1, [pc, #20]	; (7788 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x18>)
    7772:	4804      	ldr	r0, [pc, #16]	; (7784 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x14>)
    7774:	6008      	str	r0, [r1, #0]
    7776:	4906      	ldr	r1, [pc, #24]	; (7790 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x20>)
    7778:	4804      	ldr	r0, [pc, #16]	; (778c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1c>)
    777a:	6008      	str	r0, [r1, #0]
    777c:	4906      	ldr	r1, [pc, #24]	; (7798 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x28>)
    777e:	4805      	ldr	r0, [pc, #20]	; (7794 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x24>)
    7780:	6008      	str	r0, [r1, #0]
    7782:	4770      	bx	lr
    7784:	0000fae3 	.word	0x0000fae3
    7788:	20000120 	.word	0x20000120
    778c:	0000f623 	.word	0x0000f623
    7790:	20000124 	.word	0x20000124
    7794:	00006369 	.word	0x00006369
    7798:	20000128 	.word	0x20000128
    779c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    779e:	4605      	mov	r5, r0
    77a0:	4c15      	ldr	r4, [pc, #84]	; (77f8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x88>)
    77a2:	2000      	movs	r0, #0
    77a4:	7028      	strb	r0, [r5, #0]
    77a6:	6820      	ldr	r0, [r4, #0]
    77a8:	2800      	cmp	r0, #0
    77aa:	d023      	beq.n	77f4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x84>
    77ac:	7a01      	ldrb	r1, [r0, #8]
    77ae:	2601      	movs	r6, #1
    77b0:	f88d 1000 	strb.w	r1, [sp]
    77b4:	9900      	ldr	r1, [sp, #0]
    77b6:	9100      	str	r1, [sp, #0]
    77b8:	f89d 1000 	ldrb.w	r1, [sp]
    77bc:	2908      	cmp	r1, #8
    77be:	d107      	bne.n	77d0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x60>
    77c0:	6840      	ldr	r0, [r0, #4]
    77c2:	8800      	ldrh	r0, [r0, #0]
    77c4:	f7fe faf4 	bl	5db0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    77c8:	f006 fdc3 	bl	e352 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    77cc:	2800      	cmp	r0, #0
    77ce:	d011      	beq.n	77f4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x84>
    77d0:	f3ef 8110 	mrs	r1, PRIMASK
    77d4:	6820      	ldr	r0, [r4, #0]
    77d6:	b672      	cpsid	i
    77d8:	6802      	ldr	r2, [r0, #0]
    77da:	6022      	str	r2, [r4, #0]
    77dc:	b901      	cbnz	r1, 77e0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x70>
    77de:	b662      	cpsie	i
    77e0:	7a01      	ldrb	r1, [r0, #8]
    77e2:	f88d 1000 	strb.w	r1, [sp]
    77e6:	9900      	ldr	r1, [sp, #0]
    77e8:	9100      	str	r1, [sp, #0]
    77ea:	f89d 1000 	ldrb.w	r1, [sp]
    77ee:	2900      	cmp	r1, #0
    77f0:	d100      	bne.n	77f4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x84>
    77f2:	702e      	strb	r6, [r5, #0]
    77f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    77f6:	0000      	.short	0x0000
    77f8:	20000118 	.word	0x20000118
    77fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7800:	b086      	sub	sp, #24
    7802:	000f      	movs	r7, r1
    7804:	4604      	mov	r4, r0
    7806:	4691      	mov	r9, r2
    7808:	d013      	beq.n	7832 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc2>
    780a:	6878      	ldr	r0, [r7, #4]
    780c:	b188      	cbz	r0, 7832 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc2>
    780e:	f100 0578 	add.w	r5, r0, #120	; 0x78
    7812:	f500 7196 	add.w	r1, r0, #300	; 0x12c
    7816:	8806      	ldrh	r6, [r0, #0]
    7818:	4610      	mov	r0, r2
    781a:	f04f 0800 	mov.w	r8, #0
    781e:	2a10      	cmp	r2, #16
    7820:	d079      	beq.n	7916 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a6>
    7822:	dc09      	bgt.n	7838 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc8>
    7824:	f04f 0a01 	mov.w	sl, #1
    7828:	2801      	cmp	r0, #1
    782a:	d00a      	beq.n	7842 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xd2>
    782c:	2a0b      	cmp	r2, #11
    782e:	d171      	bne.n	7914 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a4>
    7830:	e01a      	b.n	7868 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xf8>
    7832:	f240 2182 	movw	r1, #642	; 0x282
    7836:	e0ad      	b.n	7994 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x224>
    7838:	281a      	cmp	r0, #26
    783a:	d04d      	beq.n	78d8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x168>
    783c:	2a1b      	cmp	r2, #27
    783e:	d169      	bne.n	7914 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a4>
    7840:	e027      	b.n	7892 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x122>
    7842:	2d00      	cmp	r5, #0
    7844:	d00f      	beq.n	7866 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xf6>
    7846:	f884 8001 	strb.w	r8, [r4, #1]
    784a:	f884 a000 	strb.w	sl, [r4]
    784e:	f884 8004 	strb.w	r8, [r4, #4]
    7852:	f8a4 6005 	strh.w	r6, [r4, #5]
    7856:	f895 0057 	ldrb.w	r0, [r5, #87]	; 0x57
    785a:	71e0      	strb	r0, [r4, #7]
    785c:	f835 0f58 	ldrh.w	r0, [r5, #88]!
    7860:	8120      	strh	r0, [r4, #8]
    7862:	8868      	ldrh	r0, [r5, #2]
    7864:	8160      	strh	r0, [r4, #10]
    7866:	e076      	b.n	7956 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1e6>
    7868:	4630      	mov	r0, r6
    786a:	f7fe fab7 	bl	5ddc <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    786e:	b168      	cbz	r0, 788c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x11c>
    7870:	f884 8001 	strb.w	r8, [r4, #1]
    7874:	220d      	movs	r2, #13
    7876:	7022      	strb	r2, [r4, #0]
    7878:	80e6      	strh	r6, [r4, #6]
    787a:	4641      	mov	r1, r8
    787c:	f8a4 a008 	strh.w	sl, [r4, #8]
    7880:	f884 a004 	strb.w	sl, [r4, #4]
    7884:	460a      	mov	r2, r1
    7886:	f006 ff37 	bl	e6f8 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    788a:	e064      	b.n	7956 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1e6>
    788c:	f44f 71ce 	mov.w	r1, #412	; 0x19c
    7890:	e080      	b.n	7994 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x224>
    7892:	f7ff fdfd 	bl	7490 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>
    7896:	b3e8      	cbz	r0, 7914 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a4>
    7898:	f887 8008 	strb.w	r8, [r7, #8]
    789c:	4630      	mov	r0, r6
    789e:	f8ad 6000 	strh.w	r6, [sp]
    78a2:	a902      	add	r1, sp, #8
    78a4:	f007 fa92 	bl	edcc <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    78a8:	b110      	cbz	r0, 78b0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x140>
    78aa:	f44f 71b7 	mov.w	r1, #366	; 0x16e
    78ae:	e071      	b.n	7994 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x224>
    78b0:	9803      	ldr	r0, [sp, #12]
    78b2:	f810 1f6a 	ldrb.w	r1, [r0, #106]!
    78b6:	f88d 1002 	strb.w	r1, [sp, #2]
    78ba:	7841      	ldrb	r1, [r0, #1]
    78bc:	f88d 1003 	strb.w	r1, [sp, #3]
    78c0:	8840      	ldrh	r0, [r0, #2]
    78c2:	f8ad 0004 	strh.w	r0, [sp, #4]
    78c6:	2102      	movs	r1, #2
    78c8:	4668      	mov	r0, sp
    78ca:	f009 fb9d 	bl	11008 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    78ce:	2800      	cmp	r0, #0
    78d0:	d034      	beq.n	793c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1cc>
    78d2:	f44f 71c2 	mov.w	r1, #388	; 0x184
    78d6:	e05d      	b.n	7994 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x224>
    78d8:	f7ff fdd0 	bl	747c <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>
    78dc:	b1d0      	cbz	r0, 7914 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a4>
    78de:	f887 8008 	strb.w	r8, [r7, #8]
    78e2:	a903      	add	r1, sp, #12
    78e4:	4630      	mov	r0, r6
    78e6:	f009 fa06 	bl	10cf6 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    78ea:	b110      	cbz	r0, 78f2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x182>
    78ec:	f240 118b 	movw	r1, #395	; 0x18b
    78f0:	e050      	b.n	7994 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x224>
    78f2:	f8ad 6000 	strh.w	r6, [sp]
    78f6:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    78fa:	f8ad 0002 	strh.w	r0, [sp, #2]
    78fe:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    7902:	f8ad 0004 	strh.w	r0, [sp, #4]
    7906:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    790a:	f8ad 0006 	strh.w	r0, [sp, #6]
    790e:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    7912:	e001      	b.n	7918 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a8>
    7914:	e015      	b.n	7942 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1d2>
    7916:	e009      	b.n	792c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1bc>
    7918:	f8ad 0008 	strh.w	r0, [sp, #8]
    791c:	4668      	mov	r0, sp
    791e:	f009 fa0e 	bl	10d3e <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    7922:	2800      	cmp	r0, #0
    7924:	d00a      	beq.n	793c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1cc>
    7926:	f44f 71ca 	mov.w	r1, #404	; 0x194
    792a:	e033      	b.n	7994 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x224>
    792c:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
    7930:	f000 0001 	and.w	r0, r0, #1
    7934:	f7ff fd96 	bl	7464 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>
    7938:	b130      	cbz	r0, 7948 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1d8>
    793a:	2000      	movs	r0, #0
    793c:	b006      	add	sp, #24
    793e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7942:	f1b9 0f08 	cmp.w	r9, #8
    7946:	d008      	beq.n	795a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1ea>
    7948:	4814      	ldr	r0, [pc, #80]	; (799c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x22c>)
    794a:	6803      	ldr	r3, [r0, #0]
    794c:	b11b      	cbz	r3, 7956 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1e6>
    794e:	6878      	ldr	r0, [r7, #4]
    7950:	464a      	mov	r2, r9
    7952:	4621      	mov	r1, r4
    7954:	4798      	blx	r3
    7956:	2001      	movs	r0, #1
    7958:	e7f0      	b.n	793c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1cc>
    795a:	4630      	mov	r0, r6
    795c:	f7fe fa28 	bl	5db0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    7960:	f006 fcf7 	bl	e352 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    7964:	b1a0      	cbz	r0, 7990 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x220>
    7966:	4630      	mov	r0, r6
    7968:	f007 f960 	bl	ec2c <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    796c:	2100      	movs	r1, #0
    796e:	4630      	mov	r0, r6
    7970:	f7fe f88a 	bl	5a88 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    7974:	2d00      	cmp	r5, #0
    7976:	d0ee      	beq.n	7956 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1e6>
    7978:	f884 8001 	strb.w	r8, [r4, #1]
    797c:	210a      	movs	r1, #10
    797e:	7021      	strb	r1, [r4, #0]
    7980:	f884 8004 	strb.w	r8, [r4, #4]
    7984:	f8a4 6005 	strh.w	r6, [r4, #5]
    7988:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    798c:	71e0      	strb	r0, [r4, #7]
    798e:	e7e2      	b.n	7956 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1e6>
    7990:	f240 21c3 	movw	r1, #707	; 0x2c3
    7994:	2010      	movs	r0, #16
    7996:	f7fd fde3 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    799a:	0000      	.short	0x0000
    799c:	20000124 	.word	0x20000124
    79a0:	4904      	ldr	r1, [pc, #16]	; (79b4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x244>)
    79a2:	2000      	movs	r0, #0
    79a4:	6048      	str	r0, [r1, #4]
    79a6:	6088      	str	r0, [r1, #8]
    79a8:	4903      	ldr	r1, [pc, #12]	; (79b8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x248>)
    79aa:	6008      	str	r0, [r1, #0]
    79ac:	6048      	str	r0, [r1, #4]
    79ae:	8108      	strh	r0, [r1, #8]
    79b0:	4770      	bx	lr
    79b2:	0000      	.short	0x0000
    79b4:	20000114 	.word	0x20000114
    79b8:	20001605 	.word	0x20001605

000079bc <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    79bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    79be:	f06f 021f 	mvn.w	r2, #31
    79c2:	0c01      	lsrs	r1, r0, #16
    79c4:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    79c8:	251f      	movs	r5, #31
    79ca:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    79ce:	3854      	subs	r0, #84	; 0x54
    79d0:	d00d      	beq.n	79ee <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    79d2:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    79d6:	3855      	subs	r0, #85	; 0x55
    79d8:	d009      	beq.n	79ee <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    79da:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    79de:	38aa      	subs	r0, #170	; 0xaa
    79e0:	d005      	beq.n	79ee <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    79e2:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    79e6:	38aa      	subs	r0, #170	; 0xaa
    79e8:	d001      	beq.n	79ee <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    79ea:	2001      	movs	r0, #1
    79ec:	e000      	b.n	79f0 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    79ee:	2000      	movs	r0, #0
    79f0:	2200      	movs	r2, #0
    79f2:	4613      	mov	r3, r2
    79f4:	ea4f 0402 	mov.w	r4, r2
    79f8:	ea82 0701 	eor.w	r7, r2, r1
    79fc:	43ff      	mvns	r7, r7
    79fe:	431f      	orrs	r7, r3
    7a00:	1c7f      	adds	r7, r7, #1
    7a02:	d00f      	beq.n	7a24 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
    7a04:	f006 0701 	and.w	r7, r6, #1
    7a08:	0852      	lsrs	r2, r2, #1
    7a0a:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    7a0e:	f005 0701 	and.w	r7, r5, #1
    7a12:	085b      	lsrs	r3, r3, #1
    7a14:	0876      	lsrs	r6, r6, #1
    7a16:	086d      	lsrs	r5, r5, #1
    7a18:	1c64      	adds	r4, r4, #1
    7a1a:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    7a1e:	2c16      	cmp	r4, #22
    7a20:	d3ea      	bcc.n	79f8 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
    7a22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7a24:	2000      	movs	r0, #0
    7a26:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007a28 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
    7a28:	b510      	push	{r4, lr}
    7a2a:	4804      	ldr	r0, [pc, #16]	; (7a3c <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    7a2c:	f007 ffc3 	bl	f9b6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb4>
    7a30:	4802      	ldr	r0, [pc, #8]	; (7a3c <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    7a32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7a36:	3008      	adds	r0, #8
    7a38:	f007 bfbd 	b.w	f9b6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb4>
    7a3c:	2000012c 	.word	0x2000012c

00007a40 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>:
    7a40:	4801      	ldr	r0, [pc, #4]	; (7a48 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ+0x8>)
    7a42:	f000 b809 	b.w	7a58 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    7a46:	0000      	.short	0x0000
    7a48:	2000012c 	.word	0x2000012c

00007a4c <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>:
    7a4c:	4801      	ldr	r0, [pc, #4]	; (7a54 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x8>)
    7a4e:	f000 b803 	b.w	7a58 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    7a52:	0000      	.short	0x0000
    7a54:	20000134 	.word	0x20000134
    7a58:	b510      	push	{r4, lr}
    7a5a:	e9d0 2100 	ldrd	r2, r1, [r0]
    7a5e:	4b09      	ldr	r3, [pc, #36]	; (7a84 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x38>)
    7a60:	4c09      	ldr	r4, [pc, #36]	; (7a88 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x3c>)
    7a62:	4353      	muls	r3, r2
    7a64:	4354      	muls	r4, r2
    7a66:	4051      	eors	r1, r2
    7a68:	ea81 12b2 	eor.w	r2, r1, r2, ror #6
    7a6c:	ea82 2241 	eor.w	r2, r2, r1, lsl #9
    7a70:	ea4f 41f1 	mov.w	r1, r1, ror #19
    7a74:	e9c0 2100 	strd	r2, r1, [r0]
    7a78:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
    7a7c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7a80:	4618      	mov	r0, r3
    7a82:	bd10      	pop	{r4, pc}
    7a84:	c6ef3760 	.word	0xc6ef3760
    7a88:	9e3779bb 	.word	0x9e3779bb

00007a8c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
    7a8c:	b570      	push	{r4, r5, r6, lr}
    7a8e:	4604      	mov	r4, r0
    7a90:	7c00      	ldrb	r0, [r0, #16]
    7a92:	b300      	cbz	r0, 7ad6 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    7a94:	2802      	cmp	r0, #2
    7a96:	d01e      	beq.n	7ad6 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    7a98:	f05f 0001 	movs.w	r0, #1
    7a9c:	f104 0149 	add.w	r1, r4, #73	; 0x49
    7aa0:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
    7aa4:	460d      	mov	r5, r1
    7aa6:	b1c0      	cbz	r0, 7ada <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4e>
    7aa8:	7de0      	ldrb	r0, [r4, #23]
    7aaa:	b1f0      	cbz	r0, 7aea <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x5e>
    7aac:	f8d4 0011 	ldr.w	r0, [r4, #17]
    7ab0:	f8c4 0049 	str.w	r0, [r4, #73]	; 0x49
    7ab4:	f8b4 0015 	ldrh.w	r0, [r4, #21]
    7ab8:	f8a4 004d 	strh.w	r0, [r4, #77]	; 0x4d
    7abc:	7c20      	ldrb	r0, [r4, #16]
    7abe:	f007 ff9b 	bl	f9f8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xf6>
    7ac2:	7620      	strb	r0, [r4, #24]
    7ac4:	2008      	movs	r0, #8
    7ac6:	7660      	strb	r0, [r4, #25]
    7ac8:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    7acc:	4629      	mov	r1, r5
    7ace:	f007 ff7f 	bl	f9d0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xce>
    7ad2:	b9a8      	cbnz	r0, 7b00 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x74>
    7ad4:	e00e      	b.n	7af4 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x68>
    7ad6:	2000      	movs	r0, #0
    7ad8:	e7e0      	b.n	7a9c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10>
    7ada:	2000      	movs	r0, #0
    7adc:	f7fe fbf6 	bl	62cc <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    7ae0:	2800      	cmp	r0, #0
    7ae2:	d1eb      	bne.n	7abc <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x30>
    7ae4:	f240 418a 	movw	r1, #1162	; 0x48a
    7ae8:	e001      	b.n	7aee <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x62>
    7aea:	f240 418e 	movw	r1, #1166	; 0x48e
    7aee:	202d      	movs	r0, #45	; 0x2d
    7af0:	f7fd fd36 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7af4:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    7af8:	4629      	mov	r1, r5
    7afa:	f007 ff72 	bl	f9e2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xe0>
    7afe:	b100      	cbz	r0, 7b02 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x76>
    7b00:	2001      	movs	r0, #1
    7b02:	76a0      	strb	r0, [r4, #26]
    7b04:	7e20      	ldrb	r0, [r4, #24]
    7b06:	b130      	cbz	r0, 7b16 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x8a>
    7b08:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
    7b0c:	f104 0150 	add.w	r1, r4, #80	; 0x50
    7b10:	f007 f928 	bl	ed64 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    7b14:	7660      	strb	r0, [r4, #25]
    7b16:	f7ff fa0f 	bl	6f38 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    7b1a:	490c      	ldr	r1, [pc, #48]	; (7b4c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xc0>)
    7b1c:	fba0 2301 	umull	r2, r3, r0, r1
    7b20:	f104 0040 	add.w	r0, r4, #64	; 0x40
    7b24:	f008 f901 	bl	fd2a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xe0>
    7b28:	2100      	movs	r1, #0
    7b2a:	4620      	mov	r0, r4
    7b2c:	f008 f8ab 	bl	fc86 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3c>
    7b30:	2000      	movs	r0, #0
    7b32:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    7b36:	78a0      	ldrb	r0, [r4, #2]
    7b38:	0740      	lsls	r0, r0, #29
    7b3a:	d505      	bpl.n	7b48 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xbc>
    7b3c:	4620      	mov	r0, r4
    7b3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7b42:	2100      	movs	r1, #0
    7b44:	f000 bdac 	b.w	86a0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x660>
    7b48:	bd70      	pop	{r4, r5, r6, pc}
    7b4a:	0000      	.short	0x0000
    7b4c:	000f4240 	.word	0x000f4240

00007b50 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
    7b50:	b530      	push	{r4, r5, lr}
    7b52:	460c      	mov	r4, r1
    7b54:	b08d      	sub	sp, #52	; 0x34
    7b56:	4605      	mov	r5, r0
    7b58:	4601      	mov	r1, r0
    7b5a:	2220      	movs	r2, #32
    7b5c:	a802      	add	r0, sp, #8
    7b5e:	f005 fe83 	bl	d868 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    7b62:	a80a      	add	r0, sp, #40	; 0x28
    7b64:	f008 f947 	bl	fdf6 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    7b68:	7aa0      	ldrb	r0, [r4, #10]
    7b6a:	f88d 0018 	strb.w	r0, [sp, #24]
    7b6e:	7820      	ldrb	r0, [r4, #0]
    7b70:	f88d 0008 	strb.w	r0, [sp, #8]
    7b74:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    7b78:	f8ad 0000 	strh.w	r0, [sp]
    7b7c:	f89d 0000 	ldrb.w	r0, [sp]
    7b80:	f000 0101 	and.w	r1, r0, #1
    7b84:	f3c0 0240 	ubfx	r2, r0, #1, #1
    7b88:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    7b8c:	f3c0 0280 	ubfx	r2, r0, #2, #1
    7b90:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
    7b94:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    7b98:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
    7b9c:	f3c0 1200 	ubfx	r2, r0, #4, #1
    7ba0:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    7ba4:	f3c0 1240 	ubfx	r2, r0, #5, #1
    7ba8:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    7bac:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7bb0:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
    7bb4:	f8ad 000a 	strh.w	r0, [sp, #10]
    7bb8:	7d20      	ldrb	r0, [r4, #20]
    7bba:	2801      	cmp	r0, #1
    7bbc:	d006      	beq.n	7bcc <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    7bbe:	2802      	cmp	r0, #2
    7bc0:	d004      	beq.n	7bcc <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    7bc2:	f240 21bb 	movw	r1, #699	; 0x2bb
    7bc6:	2006      	movs	r0, #6
    7bc8:	f7fd fcca 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7bcc:	f88d 000c 	strb.w	r0, [sp, #12]
    7bd0:	7a61      	ldrb	r1, [r4, #9]
    7bd2:	a80a      	add	r0, sp, #40	; 0x28
    7bd4:	f008 f8f6 	bl	fdc4 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
    7bd8:	7d20      	ldrb	r0, [r4, #20]
    7bda:	2101      	movs	r1, #1
    7bdc:	2802      	cmp	r0, #2
    7bde:	d102      	bne.n	7be6 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x96>
    7be0:	7d60      	ldrb	r0, [r4, #21]
    7be2:	1c40      	adds	r0, r0, #1
    7be4:	b2c1      	uxtb	r1, r0
    7be6:	7ea0      	ldrb	r0, [r4, #26]
    7be8:	1c40      	adds	r0, r0, #1
    7bea:	b2c2      	uxtb	r2, r0
    7bec:	a80a      	add	r0, sp, #40	; 0x28
    7bee:	f008 f8b0 	bl	fd52 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
    7bf2:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    7bf6:	0700      	lsls	r0, r0, #28
    7bf8:	d501      	bpl.n	7bfe <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xae>
    7bfa:	2000      	movs	r0, #0
    7bfc:	e020      	b.n	7c40 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf0>
    7bfe:	a80a      	add	r0, sp, #40	; 0x28
    7c00:	f008 f8b9 	bl	fd76 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    7c04:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    7c08:	2228      	movs	r2, #40	; 0x28
    7c0a:	f000 fdef 	bl	87ec <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    7c0e:	f240 2171 	movw	r1, #625	; 0x271
    7c12:	f200 20d9 	addw	r0, r0, #729	; 0x2d9
    7c16:	fbb0 f0f1 	udiv	r0, r0, r1
    7c1a:	4348      	muls	r0, r1
    7c1c:	f8d4 1002 	ldr.w	r1, [r4, #2]
    7c20:	f240 2371 	movw	r3, #625	; 0x271
    7c24:	0a0a      	lsrs	r2, r1, #8
    7c26:	f240 2171 	movw	r1, #625	; 0x271
    7c2a:	434a      	muls	r2, r1
    7c2c:	f8d4 1005 	ldr.w	r1, [r4, #5]
    7c30:	0a09      	lsrs	r1, r1, #8
    7c32:	4359      	muls	r1, r3
    7c34:	4290      	cmp	r0, r2
    7c36:	d801      	bhi.n	7c3c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xec>
    7c38:	9204      	str	r2, [sp, #16]
    7c3a:	e004      	b.n	7c46 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    7c3c:	4288      	cmp	r0, r1
    7c3e:	d801      	bhi.n	7c44 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf4>
    7c40:	9004      	str	r0, [sp, #16]
    7c42:	e000      	b.n	7c46 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    7c44:	9104      	str	r1, [sp, #16]
    7c46:	7ca0      	ldrb	r0, [r4, #18]
    7c48:	f88d 0017 	strb.w	r0, [sp, #23]
    7c4c:	7e20      	ldrb	r0, [r4, #24]
    7c4e:	2801      	cmp	r0, #1
    7c50:	d000      	beq.n	7c54 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x104>
    7c52:	2000      	movs	r0, #0
    7c54:	f88d 0014 	strb.w	r0, [sp, #20]
    7c58:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    7c5a:	f006 feea 	bl	ea32 <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>
    7c5e:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    7c60:	f006 ff8b 	bl	eb7a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>
    7c64:	2220      	movs	r2, #32
    7c66:	a902      	add	r1, sp, #8
    7c68:	4628      	mov	r0, r5
    7c6a:	f005 fdfd 	bl	d868 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    7c6e:	980a      	ldr	r0, [sp, #40]	; 0x28
    7c70:	6228      	str	r0, [r5, #32]
    7c72:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
    7c76:	84a8      	strh	r0, [r5, #36]	; 0x24
    7c78:	7ae0      	ldrb	r0, [r4, #11]
    7c7a:	b168      	cbz	r0, 7c98 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    7c7c:	2802      	cmp	r0, #2
    7c7e:	d00b      	beq.n	7c98 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    7c80:	f05f 0001 	movs.w	r0, #1
    7c84:	f885 004f 	strb.w	r0, [r5, #79]	; 0x4f
    7c88:	68e0      	ldr	r0, [r4, #12]
    7c8a:	6528      	str	r0, [r5, #80]	; 0x50
    7c8c:	8a20      	ldrh	r0, [r4, #16]
    7c8e:	f8a5 0054 	strh.w	r0, [r5, #84]	; 0x54
    7c92:	b00d      	add	sp, #52	; 0x34
    7c94:	2000      	movs	r0, #0
    7c96:	bd30      	pop	{r4, r5, pc}
    7c98:	2000      	movs	r0, #0
    7c9a:	e7f3      	b.n	7c84 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x134>

00007c9c <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
    7c9c:	4a0a      	ldr	r2, [pc, #40]	; (7cc8 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x2c>)
    7c9e:	b510      	push	{r4, lr}
    7ca0:	2100      	movs	r1, #0
    7ca2:	7011      	strb	r1, [r2, #0]
    7ca4:	4c09      	ldr	r4, [pc, #36]	; (7ccc <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x30>)
    7ca6:	6060      	str	r0, [r4, #4]
    7ca8:	f000 f822 	bl	7cf0 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    7cac:	b110      	cbz	r0, 7cb4 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x18>
    7cae:	f240 310a 	movw	r1, #778	; 0x30a
    7cb2:	e004      	b.n	7cbe <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x22>
    7cb4:	68a0      	ldr	r0, [r4, #8]
    7cb6:	2800      	cmp	r0, #0
    7cb8:	d104      	bne.n	7cc4 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x28>
    7cba:	f240 310d 	movw	r1, #781	; 0x30d
    7cbe:	202d      	movs	r0, #45	; 0x2d
    7cc0:	f7fd fc4e 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7cc4:	bd10      	pop	{r4, pc}
    7cc6:	0000      	.short	0x0000
    7cc8:	20001198 	.word	0x20001198
    7ccc:	2000013c 	.word	0x2000013c

00007cd0 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>:
    7cd0:	4902      	ldr	r1, [pc, #8]	; (7cdc <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0xc>)
    7cd2:	4801      	ldr	r0, [pc, #4]	; (7cd8 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0x8>)
    7cd4:	6088      	str	r0, [r1, #8]
    7cd6:	4770      	bx	lr
    7cd8:	000087d4 	.word	0x000087d4
    7cdc:	2000013c 	.word	0x2000013c

00007ce0 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
    7ce0:	4902      	ldr	r1, [pc, #8]	; (7cec <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0xc>)
    7ce2:	6008      	str	r0, [r1, #0]
    7ce4:	6889      	ldr	r1, [r1, #8]
    7ce6:	6809      	ldr	r1, [r1, #0]
    7ce8:	4708      	bx	r1
    7cea:	0000      	.short	0x0000
    7cec:	2000013c 	.word	0x2000013c

00007cf0 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
    7cf0:	4808      	ldr	r0, [pc, #32]	; (7d14 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    7cf2:	b510      	push	{r4, lr}
    7cf4:	7800      	ldrb	r0, [r0, #0]
    7cf6:	b110      	cbz	r0, 7cfe <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
    7cf8:	240c      	movs	r4, #12
    7cfa:	4620      	mov	r0, r4
    7cfc:	bd10      	pop	{r4, pc}
    7cfe:	2400      	movs	r4, #0
    7d00:	2218      	movs	r2, #24
    7d02:	4621      	mov	r1, r4
    7d04:	4803      	ldr	r0, [pc, #12]	; (7d14 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    7d06:	f005 fe29 	bl	d95c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7d0a:	f004 f8bd 	bl	be88 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7d0e:	f003 fee1 	bl	bad4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    7d12:	e7f2      	b.n	7cfa <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xa>
    7d14:	20001198 	.word	0x20001198

00007d18 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
    7d18:	4904      	ldr	r1, [pc, #16]	; (7d2c <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x14>)
    7d1a:	b510      	push	{r4, lr}
    7d1c:	7809      	ldrb	r1, [r1, #0]
    7d1e:	2901      	cmp	r1, #1
    7d20:	d101      	bne.n	7d26 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xe>
    7d22:	f000 fb7b 	bl	841c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3dc>
    7d26:	2000      	movs	r0, #0
    7d28:	bd10      	pop	{r4, pc}
    7d2a:	0000      	.short	0x0000
    7d2c:	20001198 	.word	0x20001198

00007d30 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>:
    7d30:	4902      	ldr	r1, [pc, #8]	; (7d3c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xc>)
    7d32:	4801      	ldr	r0, [pc, #4]	; (7d38 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8>)
    7d34:	6008      	str	r0, [r1, #0]
    7d36:	4770      	bx	lr
    7d38:	00008559 	.word	0x00008559
    7d3c:	20000148 	.word	0x20000148
    7d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7d44:	000f      	movs	r7, r1
    7d46:	4604      	mov	r4, r0
    7d48:	d023      	beq.n	7d92 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x62>
    7d4a:	f104 0020 	add.w	r0, r4, #32
    7d4e:	4605      	mov	r5, r0
    7d50:	f008 f83a 	bl	fdc8 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    7d54:	b9b0      	cbnz	r0, 7d84 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x54>
    7d56:	78a0      	ldrb	r0, [r4, #2]
    7d58:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    7d5c:	b350      	cbz	r0, 7db4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x84>
    7d5e:	4628      	mov	r0, r5
    7d60:	f008 f809 	bl	fd76 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    7d64:	4606      	mov	r6, r0
    7d66:	4628      	mov	r0, r5
    7d68:	f008 f82e 	bl	fdc8 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    7d6c:	1a30      	subs	r0, r6, r0
    7d6e:	b2c0      	uxtb	r0, r0
    7d70:	f008 f87f 	bl	fe72 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    7d74:	4601      	mov	r1, r0
    7d76:	4835      	ldr	r0, [pc, #212]	; (7e4c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x11c>)
    7d78:	6842      	ldr	r2, [r0, #4]
    7d7a:	4411      	add	r1, r2
    7d7c:	6041      	str	r1, [r0, #4]
    7d7e:	4628      	mov	r0, r5
    7d80:	f008 f840 	bl	fe04 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    7d84:	4628      	mov	r0, r5
    7d86:	f008 f802 	bl	fd8e <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    7d8a:	4601      	mov	r1, r0
    7d8c:	4620      	mov	r0, r4
    7d8e:	f007 ffb6 	bl	fcfe <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb4>
    7d92:	4d2f      	ldr	r5, [pc, #188]	; (7e50 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x120>)
    7d94:	f894 6056 	ldrb.w	r6, [r4, #86]	; 0x56
    7d98:	2100      	movs	r1, #0
    7d9a:	6868      	ldr	r0, [r5, #4]
    7d9c:	8001      	strh	r1, [r0, #0]
    7d9e:	f007 ffcf 	bl	fd40 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf6>
    7da2:	8860      	ldrh	r0, [r4, #2]
    7da4:	2813      	cmp	r0, #19
    7da6:	d013      	beq.n	7dd0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xa0>
    7da8:	dc09      	bgt.n	7dbe <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8e>
    7daa:	2810      	cmp	r0, #16
    7dac:	d036      	beq.n	7e1c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xec>
    7dae:	2812      	cmp	r0, #18
    7db0:	d109      	bne.n	7dc6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x96>
    7db2:	e031      	b.n	7e18 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe8>
    7db4:	4620      	mov	r0, r4
    7db6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7dba:	f000 bb2f 	b.w	841c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3dc>
    7dbe:	2815      	cmp	r0, #21
    7dc0:	d00f      	beq.n	7de2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
    7dc2:	281d      	cmp	r0, #29
    7dc4:	d00d      	beq.n	7de2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
    7dc6:	f240 614a 	movw	r1, #1610	; 0x64a
    7dca:	202d      	movs	r0, #45	; 0x2d
    7dcc:	f7fd fbc8 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7dd0:	2100      	movs	r1, #0
    7dd2:	6868      	ldr	r0, [r5, #4]
    7dd4:	f007 fb51 	bl	f47a <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    7dd8:	2101      	movs	r1, #1
    7dda:	6868      	ldr	r0, [r5, #4]
    7ddc:	f007 ffb0 	bl	fd40 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf6>
    7de0:	e020      	b.n	7e24 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
    7de2:	2101      	movs	r1, #1
    7de4:	6868      	ldr	r0, [r5, #4]
    7de6:	f007 fb48 	bl	f47a <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    7dea:	2101      	movs	r1, #1
    7dec:	6868      	ldr	r0, [r5, #4]
    7dee:	f007 ffa7 	bl	fd40 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf6>
    7df2:	b136      	cbz	r6, 7e02 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xd2>
    7df4:	f104 0157 	add.w	r1, r4, #87	; 0x57
    7df8:	6868      	ldr	r0, [r5, #4]
    7dfa:	f007 fb59 	bl	f4b0 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    7dfe:	2101      	movs	r1, #1
    7e00:	e006      	b.n	7e10 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe0>
    7e02:	f104 0150 	add.w	r1, r4, #80	; 0x50
    7e06:	6868      	ldr	r0, [r5, #4]
    7e08:	f007 fb52 	bl	f4b0 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    7e0c:	f894 104f 	ldrb.w	r1, [r4, #79]	; 0x4f
    7e10:	6868      	ldr	r0, [r5, #4]
    7e12:	f007 fb53 	bl	f4bc <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    7e16:	e005      	b.n	7e24 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
    7e18:	2106      	movs	r1, #6
    7e1a:	e000      	b.n	7e1e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xee>
    7e1c:	2102      	movs	r1, #2
    7e1e:	6868      	ldr	r0, [r5, #4]
    7e20:	f007 fb2b 	bl	f47a <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    7e24:	4620      	mov	r0, r4
    7e26:	f000 fcb1 	bl	878c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x74c>
    7e2a:	8860      	ldrh	r0, [r4, #2]
    7e2c:	281d      	cmp	r0, #29
    7e2e:	d007      	beq.n	7e40 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x110>
    7e30:	2815      	cmp	r0, #21
    7e32:	d005      	beq.n	7e40 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x110>
    7e34:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
    7e38:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7e3a:	6868      	ldr	r0, [r5, #4]
    7e3c:	f007 fb0d 	bl	f45a <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>
    7e40:	4639      	mov	r1, r7
    7e42:	4620      	mov	r0, r4
    7e44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7e48:	f000 b9e4 	b.w	8214 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d4>
    7e4c:	20001198 	.word	0x20001198
    7e50:	2000013c 	.word	0x2000013c
    7e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7e58:	4d2e      	ldr	r5, [pc, #184]	; (7f14 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e4>)
    7e5a:	4607      	mov	r7, r0
    7e5c:	7828      	ldrb	r0, [r5, #0]
    7e5e:	2802      	cmp	r0, #2
    7e60:	d005      	beq.n	7e6e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
    7e62:	7828      	ldrb	r0, [r5, #0]
    7e64:	2803      	cmp	r0, #3
    7e66:	d002      	beq.n	7e6e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
    7e68:	f640 41b9 	movw	r1, #3257	; 0xcb9
    7e6c:	e028      	b.n	7ec0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x190>
    7e6e:	4c2a      	ldr	r4, [pc, #168]	; (7f18 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e8>)
    7e70:	6820      	ldr	r0, [r4, #0]
    7e72:	7b01      	ldrb	r1, [r0, #12]
    7e74:	b109      	cbz	r1, 7e7a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x14a>
    7e76:	f007 ff4d 	bl	fd14 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xca>
    7e7a:	f8d4 c004 	ldr.w	ip, [r4, #4]
    7e7e:	f04f 0800 	mov.w	r8, #0
    7e82:	f89c 0000 	ldrb.w	r0, [ip]
    7e86:	f000 060f 	and.w	r6, r0, #15
    7e8a:	b33f      	cbz	r7, 7edc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ac>
    7e8c:	6821      	ldr	r1, [r4, #0]
    7e8e:	09c0      	lsrs	r0, r0, #7
    7e90:	f101 0349 	add.w	r3, r1, #73	; 0x49
    7e94:	f891 2048 	ldrb.w	r2, [r1, #72]	; 0x48
    7e98:	f10c 0109 	add.w	r1, ip, #9
    7e9c:	f006 feca 	bl	ec34 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    7ea0:	b1e0      	cbz	r0, 7edc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ac>
    7ea2:	4641      	mov	r1, r8
    7ea4:	6860      	ldr	r0, [r4, #4]
    7ea6:	f007 fac8 	bl	f43a <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>
    7eaa:	b1b8      	cbz	r0, 7edc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ac>
    7eac:	782a      	ldrb	r2, [r5, #0]
    7eae:	6820      	ldr	r0, [r4, #0]
    7eb0:	4631      	mov	r1, r6
    7eb2:	2a02      	cmp	r2, #2
    7eb4:	d007      	beq.n	7ec6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x196>
    7eb6:	782a      	ldrb	r2, [r5, #0]
    7eb8:	2a03      	cmp	r2, #3
    7eba:	d004      	beq.n	7ec6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x196>
    7ebc:	f640 4192 	movw	r1, #3218	; 0xc92
    7ec0:	202d      	movs	r0, #45	; 0x2d
    7ec2:	f7fd fb4d 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7ec6:	68a2      	ldr	r2, [r4, #8]
    7ec8:	782b      	ldrb	r3, [r5, #0]
    7eca:	6952      	ldr	r2, [r2, #20]
    7ecc:	f06f 0607 	mvn.w	r6, #7
    7ed0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    7ed4:	58d2      	ldr	r2, [r2, r3]
    7ed6:	4790      	blx	r2
    7ed8:	4606      	mov	r6, r0
    7eda:	e000      	b.n	7ede <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ae>
    7edc:	2601      	movs	r6, #1
    7ede:	7ba8      	ldrb	r0, [r5, #14]
    7ee0:	b118      	cbz	r0, 7eea <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ba>
    7ee2:	f003 ffd1 	bl	be88 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7ee6:	f003 fdf5 	bl	bad4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    7eea:	2e00      	cmp	r6, #0
    7eec:	d00f      	beq.n	7f0e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1de>
    7eee:	6820      	ldr	r0, [r4, #0]
    7ef0:	f007 ffd5 	bl	fe9e <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    7ef4:	b130      	cbz	r0, 7f04 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1d4>
    7ef6:	f003 ffef 	bl	bed8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7efa:	68a0      	ldr	r0, [r4, #8]
    7efc:	6880      	ldr	r0, [r0, #8]
    7efe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7f02:	4700      	bx	r0
    7f04:	6820      	ldr	r0, [r4, #0]
    7f06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7f0a:	f000 ba87 	b.w	841c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3dc>
    7f0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7f12:	0000      	.short	0x0000
    7f14:	20001198 	.word	0x20001198
    7f18:	2000013c 	.word	0x2000013c
    7f1c:	b510      	push	{r4, lr}
    7f1e:	2903      	cmp	r1, #3
    7f20:	d002      	beq.n	7f28 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1f8>
    7f22:	2905      	cmp	r1, #5
    7f24:	d10a      	bne.n	7f3c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x20c>
    7f26:	e002      	b.n	7f2e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1fe>
    7f28:	f000 fb7e 	bl	8628 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e8>
    7f2c:	e003      	b.n	7f36 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x206>
    7f2e:	4904      	ldr	r1, [pc, #16]	; (7f40 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x210>)
    7f30:	6809      	ldr	r1, [r1, #0]
    7f32:	b109      	cbz	r1, 7f38 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x208>
    7f34:	4788      	blx	r1
    7f36:	b108      	cbz	r0, 7f3c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x20c>
    7f38:	2000      	movs	r0, #0
    7f3a:	bd10      	pop	{r4, pc}
    7f3c:	2001      	movs	r0, #1
    7f3e:	bd10      	pop	{r4, pc}
    7f40:	20000148 	.word	0x20000148
    7f44:	4a09      	ldr	r2, [pc, #36]	; (7f6c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x23c>)
    7f46:	0003      	movs	r3, r0
    7f48:	6810      	ldr	r0, [r2, #0]
    7f4a:	d001      	beq.n	7f50 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x220>
    7f4c:	f000 ba66 	b.w	841c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3dc>
    7f50:	2900      	cmp	r1, #0
    7f52:	d009      	beq.n	7f68 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x238>
    7f54:	6891      	ldr	r1, [r2, #8]
    7f56:	4a06      	ldr	r2, [pc, #24]	; (7f70 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x240>)
    7f58:	6909      	ldr	r1, [r1, #16]
    7f5a:	7812      	ldrb	r2, [r2, #0]
    7f5c:	f06f 030f 	mvn.w	r3, #15
    7f60:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    7f64:	5889      	ldr	r1, [r1, r2]
    7f66:	4708      	bx	r1
    7f68:	4770      	bx	lr
    7f6a:	0000      	.short	0x0000
    7f6c:	2000013c 	.word	0x2000013c
    7f70:	20001198 	.word	0x20001198
    7f74:	b570      	push	{r4, r5, r6, lr}
    7f76:	4604      	mov	r4, r0
    7f78:	8840      	ldrh	r0, [r0, #2]
    7f7a:	2810      	cmp	r0, #16
    7f7c:	d019      	beq.n	7fb2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x282>
    7f7e:	4d10      	ldr	r5, [pc, #64]	; (7fc0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x290>)
    7f80:	7ba8      	ldrb	r0, [r5, #14]
    7f82:	b120      	cbz	r0, 7f8e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x25e>
    7f84:	f003 fdc6 	bl	bb14 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    7f88:	2040      	movs	r0, #64	; 0x40
    7f8a:	f003 ff8b 	bl	bea4 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    7f8e:	480d      	ldr	r0, [pc, #52]	; (7fc4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x294>)
    7f90:	6840      	ldr	r0, [r0, #4]
    7f92:	f004 fa0d 	bl	c3b0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7f96:	78a0      	ldrb	r0, [r4, #2]
    7f98:	0740      	lsls	r0, r0, #29
    7f9a:	d404      	bmi.n	7fa6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x276>
    7f9c:	2100      	movs	r1, #0
    7f9e:	7922      	ldrb	r2, [r4, #4]
    7fa0:	4608      	mov	r0, r1
    7fa2:	f004 fa7d 	bl	c4a0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    7fa6:	2000      	movs	r0, #0
    7fa8:	f004 f8b8 	bl	c11c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    7fac:	2002      	movs	r0, #2
    7fae:	7028      	strb	r0, [r5, #0]
    7fb0:	bd70      	pop	{r4, r5, r6, pc}
    7fb2:	4620      	mov	r0, r4
    7fb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7fb8:	2101      	movs	r1, #1
    7fba:	f7ff bec1 	b.w	7d40 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    7fbe:	0000      	.short	0x0000
    7fc0:	20001198 	.word	0x20001198
    7fc4:	2000013c 	.word	0x2000013c
    7fc8:	b510      	push	{r4, lr}
    7fca:	4c12      	ldr	r4, [pc, #72]	; (8014 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14>)
    7fcc:	6820      	ldr	r0, [r4, #0]
    7fce:	f000 f825 	bl	801c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c>
    7fd2:	6820      	ldr	r0, [r4, #0]
    7fd4:	f007 ff63 	bl	fe9e <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    7fd8:	2800      	cmp	r0, #0
    7fda:	6820      	ldr	r0, [r4, #0]
    7fdc:	d00b      	beq.n	7ff6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2c6>
    7fde:	490e      	ldr	r1, [pc, #56]	; (8018 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x18>)
    7fe0:	780a      	ldrb	r2, [r1, #0]
    7fe2:	2a02      	cmp	r2, #2
    7fe4:	d00b      	beq.n	7ffe <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ce>
    7fe6:	780a      	ldrb	r2, [r1, #0]
    7fe8:	2a03      	cmp	r2, #3
    7fea:	d008      	beq.n	7ffe <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ce>
    7fec:	f640 31c6 	movw	r1, #3014	; 0xbc6
    7ff0:	202d      	movs	r0, #45	; 0x2d
    7ff2:	f7fd fab5 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7ff6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7ffa:	f000 ba0f 	b.w	841c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3dc>
    7ffe:	68a2      	ldr	r2, [r4, #8]
    8000:	7809      	ldrb	r1, [r1, #0]
    8002:	68d2      	ldr	r2, [r2, #12]
    8004:	f06f 0307 	mvn.w	r3, #7
    8008:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    800c:	5851      	ldr	r1, [r2, r1]
    800e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8012:	4708      	bx	r1
    8014:	2000013c 	.word	0x2000013c
    8018:	20001198 	.word	0x20001198
    801c:	b510      	push	{r4, lr}
    801e:	7b01      	ldrb	r1, [r0, #12]
    8020:	b109      	cbz	r1, 8026 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x26>
    8022:	f007 fe77 	bl	fd14 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xca>
    8026:	4805      	ldr	r0, [pc, #20]	; (803c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3c>)
    8028:	7b80      	ldrb	r0, [r0, #14]
    802a:	2800      	cmp	r0, #0
    802c:	d005      	beq.n	803a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3a>
    802e:	f003 ff2b 	bl	be88 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    8032:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8036:	f003 bd4d 	b.w	bad4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    803a:	bd10      	pop	{r4, pc}
    803c:	20001198 	.word	0x20001198

00008040 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
    8040:	b5f0      	push	{r4, r5, r6, r7, lr}
    8042:	4d59      	ldr	r5, [pc, #356]	; (81a8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x168>)
    8044:	4604      	mov	r4, r0
    8046:	b08b      	sub	sp, #44	; 0x2c
    8048:	7828      	ldrb	r0, [r5, #0]
    804a:	bbe8      	cbnz	r0, 80c8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x88>
    804c:	7820      	ldrb	r0, [r4, #0]
    804e:	28ff      	cmp	r0, #255	; 0xff
    8050:	d03d      	beq.n	80ce <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8e>
    8052:	2000      	movs	r0, #0
    8054:	81a8      	strh	r0, [r5, #12]
    8056:	6068      	str	r0, [r5, #4]
    8058:	7068      	strb	r0, [r5, #1]
    805a:	70a8      	strb	r0, [r5, #2]
    805c:	f884 0061 	strb.w	r0, [r4, #97]	; 0x61
    8060:	4b52      	ldr	r3, [pc, #328]	; (81ac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16c>)
    8062:	af06      	add	r7, sp, #24
    8064:	4e52      	ldr	r6, [pc, #328]	; (81b0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x170>)
    8066:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    8068:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    806c:	68b0      	ldr	r0, [r6, #8]
    806e:	6840      	ldr	r0, [r0, #4]
    8070:	9009      	str	r0, [sp, #36]	; 0x24
    8072:	a806      	add	r0, sp, #24
    8074:	f004 f826 	bl	c0c4 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    8078:	f004 f8f4 	bl	c264 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    807c:	f004 fb68 	bl	c750 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>
    8080:	f003 ff02 	bl	be88 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    8084:	f003 fd26 	bl	bad4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    8088:	484a      	ldr	r0, [pc, #296]	; (81b4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x174>)
    808a:	f004 fa3b 	bl	c504 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    808e:	4847      	ldr	r0, [pc, #284]	; (81ac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16c>)
    8090:	1f00      	subs	r0, r0, #4
    8092:	f004 fa41 	bl	c518 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    8096:	f104 0020 	add.w	r0, r4, #32
    809a:	4607      	mov	r7, r0
    809c:	f007 feb2 	bl	fe04 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    80a0:	4638      	mov	r0, r7
    80a2:	f007 fe74 	bl	fd8e <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    80a6:	4601      	mov	r1, r0
    80a8:	4620      	mov	r0, r4
    80aa:	f007 fe28 	bl	fcfe <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb4>
    80ae:	f994 000e 	ldrsb.w	r0, [r4, #14]
    80b2:	f004 f95b 	bl	c36c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    80b6:	7921      	ldrb	r1, [r4, #4]
    80b8:	2000      	movs	r0, #0
    80ba:	f003 ff97 	bl	bfec <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    80be:	2101      	movs	r1, #1
    80c0:	60a8      	str	r0, [r5, #8]
    80c2:	b138      	cbz	r0, 80d4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x94>
    80c4:	7ea0      	ldrb	r0, [r4, #26]
    80c6:	e000      	b.n	80ca <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8a>
    80c8:	e001      	b.n	80ce <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8e>
    80ca:	b950      	cbnz	r0, 80e2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa2>
    80cc:	e004      	b.n	80d8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x98>
    80ce:	200c      	movs	r0, #12
    80d0:	b00b      	add	sp, #44	; 0x2c
    80d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    80d4:	7029      	strb	r1, [r5, #0]
    80d6:	e064      	b.n	81a2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x162>
    80d8:	7e20      	ldrb	r0, [r4, #24]
    80da:	b910      	cbnz	r0, 80e2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa2>
    80dc:	78a0      	ldrb	r0, [r4, #2]
    80de:	0740      	lsls	r0, r0, #29
    80e0:	d522      	bpl.n	8128 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xe8>
    80e2:	e9d4 1010 	ldrd	r1, r0, [r4, #64]	; 0x40
    80e6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    80ea:	4050      	eors	r0, r2
    80ec:	ea70 0101 	orns	r1, r0, r1
    80f0:	d01a      	beq.n	8128 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xe8>
    80f2:	f7fb fe5d 	bl	3db0 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    80f6:	e9d4 2310 	ldrd	r2, r3, [r4, #64]	; 0x40
    80fa:	1a80      	subs	r0, r0, r2
    80fc:	4199      	sbcs	r1, r3
    80fe:	d313      	bcc.n	8128 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xe8>
    8100:	f7fe ff1a 	bl	6f38 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    8104:	492c      	ldr	r1, [pc, #176]	; (81b8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x178>)
    8106:	fba0 2301 	umull	r2, r3, r0, r1
    810a:	f104 0040 	add.w	r0, r4, #64	; 0x40
    810e:	f007 fe0c 	bl	fd2a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xe0>
    8112:	2101      	movs	r1, #1
    8114:	4620      	mov	r0, r4
    8116:	f007 fdb6 	bl	fc86 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3c>
    811a:	78a0      	ldrb	r0, [r4, #2]
    811c:	0740      	lsls	r0, r0, #29
    811e:	d503      	bpl.n	8128 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xe8>
    8120:	2101      	movs	r1, #1
    8122:	4620      	mov	r0, r4
    8124:	f000 fabc 	bl	86a0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x660>
    8128:	f104 0130 	add.w	r1, r4, #48	; 0x30
    812c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    812e:	f006 fcf3 	bl	eb18 <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>
    8132:	f104 0138 	add.w	r1, r4, #56	; 0x38
    8136:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    8138:	f006 fcf1 	bl	eb1e <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>
    813c:	f7fe ff54 	bl	6fe8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    8140:	6870      	ldr	r0, [r6, #4]
    8142:	1cc0      	adds	r0, r0, #3
    8144:	f006 fe01 	bl	ed4a <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    8148:	73a8      	strb	r0, [r5, #14]
    814a:	78a0      	ldrb	r0, [r4, #2]
    814c:	07c0      	lsls	r0, r0, #31
    814e:	d028      	beq.n	81a2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x162>
    8150:	a903      	add	r1, sp, #12
    8152:	2000      	movs	r0, #0
    8154:	f006 fbb6 	bl	e8c4 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    8158:	b120      	cbz	r0, 8164 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x124>
    815a:	f640 118c 	movw	r1, #2444	; 0x98c
    815e:	202d      	movs	r0, #45	; 0x2d
    8160:	f7fd f9fe 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8164:	20ff      	movs	r0, #255	; 0xff
    8166:	73e8      	strb	r0, [r5, #15]
    8168:	69e6      	ldr	r6, [r4, #28]
    816a:	f106 070a 	add.w	r7, r6, #10
    816e:	e013      	b.n	8198 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x158>
    8170:	9c05      	ldr	r4, [sp, #20]
    8172:	42b4      	cmp	r4, r6
    8174:	d010      	beq.n	8198 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x158>
    8176:	7a72      	ldrb	r2, [r6, #9]
    8178:	7a60      	ldrb	r0, [r4, #9]
    817a:	463b      	mov	r3, r7
    817c:	f104 010a 	add.w	r1, r4, #10
    8180:	f006 fd58 	bl	ec34 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    8184:	b140      	cbz	r0, 8198 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x158>
    8186:	78a0      	ldrb	r0, [r4, #2]
    8188:	73e8      	strb	r0, [r5, #15]
    818a:	f8d4 0003 	ldr.w	r0, [r4, #3]
    818e:	6128      	str	r0, [r5, #16]
    8190:	f8b4 0007 	ldrh.w	r0, [r4, #7]
    8194:	82a8      	strh	r0, [r5, #20]
    8196:	e004      	b.n	81a2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x162>
    8198:	a803      	add	r0, sp, #12
    819a:	f7fd fc25 	bl	59e8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    819e:	2800      	cmp	r0, #0
    81a0:	d0e6      	beq.n	8170 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x130>
    81a2:	2000      	movs	r0, #0
    81a4:	e794      	b.n	80d0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x90>
    81a6:	0000      	.short	0x0000
    81a8:	20001198 	.word	0x20001198
    81ac:	000087b4 	.word	0x000087b4
    81b0:	2000013c 	.word	0x2000013c
    81b4:	8e89bed6 	.word	0x8e89bed6
    81b8:	000f4240 	.word	0x000f4240
    81bc:	b510      	push	{r4, lr}
    81be:	4604      	mov	r4, r0
    81c0:	f7ff ff3e 	bl	8040 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
    81c4:	2800      	cmp	r0, #0
    81c6:	d108      	bne.n	81da <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x19a>
    81c8:	4804      	ldr	r0, [pc, #16]	; (81dc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x19c>)
    81ca:	7800      	ldrb	r0, [r0, #0]
    81cc:	2801      	cmp	r0, #1
    81ce:	d003      	beq.n	81d8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x198>
    81d0:	2100      	movs	r1, #0
    81d2:	4620      	mov	r0, r4
    81d4:	f7ff fdb4 	bl	7d40 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    81d8:	2000      	movs	r0, #0
    81da:	bd10      	pop	{r4, pc}
    81dc:	20001198 	.word	0x20001198
    81e0:	480a      	ldr	r0, [pc, #40]	; (820c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1cc>)
    81e2:	b510      	push	{r4, lr}
    81e4:	490a      	ldr	r1, [pc, #40]	; (8210 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d0>)
    81e6:	6804      	ldr	r4, [r0, #0]
    81e8:	7808      	ldrb	r0, [r1, #0]
    81ea:	2800      	cmp	r0, #0
    81ec:	d00d      	beq.n	820a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ca>
    81ee:	7808      	ldrb	r0, [r1, #0]
    81f0:	2802      	cmp	r0, #2
    81f2:	d002      	beq.n	81fa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ba>
    81f4:	7808      	ldrb	r0, [r1, #0]
    81f6:	2803      	cmp	r0, #3
    81f8:	d102      	bne.n	8200 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1c0>
    81fa:	4620      	mov	r0, r4
    81fc:	f7ff ff0e 	bl	801c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c>
    8200:	4620      	mov	r0, r4
    8202:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8206:	f000 b909 	b.w	841c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3dc>
    820a:	bd10      	pop	{r4, pc}
    820c:	2000013c 	.word	0x2000013c
    8210:	20001198 	.word	0x20001198
    8214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8218:	4604      	mov	r4, r0
    821a:	4827      	ldr	r0, [pc, #156]	; (82b8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x278>)
    821c:	460d      	mov	r5, r1
    821e:	6840      	ldr	r0, [r0, #4]
    8220:	f004 f8c6 	bl	c3b0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    8224:	4e25      	ldr	r6, [pc, #148]	; (82bc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27c>)
    8226:	2004      	movs	r0, #4
    8228:	7030      	strb	r0, [r6, #0]
    822a:	b325      	cbz	r5, 8276 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x236>
    822c:	8860      	ldrh	r0, [r4, #2]
    822e:	2810      	cmp	r0, #16
    8230:	d02a      	beq.n	8288 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x248>
    8232:	f104 0020 	add.w	r0, r4, #32
    8236:	4680      	mov	r8, r0
    8238:	68b5      	ldr	r5, [r6, #8]
    823a:	f007 fd9c 	bl	fd76 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    823e:	4607      	mov	r7, r0
    8240:	4640      	mov	r0, r8
    8242:	f007 fdc1 	bl	fdc8 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    8246:	1a38      	subs	r0, r7, r0
    8248:	1e40      	subs	r0, r0, #1
    824a:	b2c0      	uxtb	r0, r0
    824c:	8861      	ldrh	r1, [r4, #2]
    824e:	2228      	movs	r2, #40	; 0x28
    8250:	f000 faec 	bl	882c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
    8254:	4405      	add	r5, r0
    8256:	78a0      	ldrb	r0, [r4, #2]
    8258:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    825c:	b130      	cbz	r0, 826c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x22c>
    825e:	6870      	ldr	r0, [r6, #4]
    8260:	4405      	add	r5, r0
    8262:	f007 fe0a 	bl	fe7a <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>
    8266:	4428      	add	r0, r5
    8268:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
    826c:	7922      	ldrb	r2, [r4, #4]
    826e:	4629      	mov	r1, r5
    8270:	2000      	movs	r0, #0
    8272:	f004 f8b3 	bl	c3dc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    8276:	8860      	ldrh	r0, [r4, #2]
    8278:	2813      	cmp	r0, #19
    827a:	d013      	beq.n	82a4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x264>
    827c:	dc09      	bgt.n	8292 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x252>
    827e:	2810      	cmp	r0, #16
    8280:	d017      	beq.n	82b2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x272>
    8282:	2812      	cmp	r0, #18
    8284:	d109      	bne.n	829a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x25a>
    8286:	e00d      	b.n	82a4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x264>
    8288:	7921      	ldrb	r1, [r4, #4]
    828a:	2000      	movs	r0, #0
    828c:	f003 fe74 	bl	bf78 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    8290:	e7f1      	b.n	8276 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x236>
    8292:	2815      	cmp	r0, #21
    8294:	d006      	beq.n	82a4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x264>
    8296:	281d      	cmp	r0, #29
    8298:	d004      	beq.n	82a4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x264>
    829a:	f640 5148 	movw	r1, #3400	; 0xd48
    829e:	202d      	movs	r0, #45	; 0x2d
    82a0:	f7fd f95e 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    82a4:	7922      	ldrb	r2, [r4, #4]
    82a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    82aa:	2101      	movs	r1, #1
    82ac:	2000      	movs	r0, #0
    82ae:	f004 b8f7 	b.w	c4a0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    82b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    82b6:	0000      	.short	0x0000
    82b8:	2000013c 	.word	0x2000013c
    82bc:	20001198 	.word	0x20001198
    82c0:	b510      	push	{r4, lr}
    82c2:	4604      	mov	r4, r0
    82c4:	7800      	ldrb	r0, [r0, #0]
    82c6:	460b      	mov	r3, r1
    82c8:	f884 00b5 	strb.w	r0, [r4, #181]	; 0xb5
    82cc:	29ff      	cmp	r1, #255	; 0xff
    82ce:	d010      	beq.n	82f2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2b2>
    82d0:	f104 02b7 	add.w	r2, r4, #183	; 0xb7
    82d4:	1e51      	subs	r1, r2, #1
    82d6:	4618      	mov	r0, r3
    82d8:	f7fe fe02 	bl	6ee0 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    82dc:	b130      	cbz	r0, 82ec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2ac>
    82de:	f894 00b6 	ldrb.w	r0, [r4, #182]	; 0xb6
    82e2:	f040 0002 	orr.w	r0, r0, #2
    82e6:	f884 00b6 	strb.w	r0, [r4, #182]	; 0xb6
    82ea:	e011      	b.n	8310 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2d0>
    82ec:	f640 7193 	movw	r1, #3987	; 0xf93
    82f0:	e023      	b.n	833a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2fa>
    82f2:	4813      	ldr	r0, [pc, #76]	; (8340 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x300>)
    82f4:	6840      	ldr	r0, [r0, #4]
    82f6:	7801      	ldrb	r1, [r0, #0]
    82f8:	f3c1 1180 	ubfx	r1, r1, #6, #1
    82fc:	f884 10b6 	strb.w	r1, [r4, #182]	; 0xb6
    8300:	f8d0 1003 	ldr.w	r1, [r0, #3]
    8304:	f8c4 10b7 	str.w	r1, [r4, #183]	; 0xb7
    8308:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    830c:	f8a4 00bb 	strh.w	r0, [r4, #187]	; 0xbb
    8310:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
    8314:	287f      	cmp	r0, #127	; 0x7f
    8316:	d00e      	beq.n	8336 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2f6>
    8318:	f884 00bd 	strb.w	r0, [r4, #189]	; 0xbd
    831c:	207f      	movs	r0, #127	; 0x7f
    831e:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    8322:	2219      	movs	r2, #25
    8324:	4621      	mov	r1, r4
    8326:	f104 00ac 	add.w	r0, r4, #172	; 0xac
    832a:	f7ff f941 	bl	75b0 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    832e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8332:	f7ff ba0f 	b.w	7754 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    8336:	f640 51fb 	movw	r1, #3579	; 0xdfb
    833a:	202d      	movs	r0, #45	; 0x2d
    833c:	f7fd f910 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8340:	2000013c 	.word	0x2000013c
    8344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8348:	4690      	mov	r8, r2
    834a:	460e      	mov	r6, r1
    834c:	4604      	mov	r4, r0
    834e:	2903      	cmp	r1, #3
    8350:	d004      	beq.n	835c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x31c>
    8352:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
    8356:	b108      	cbz	r0, 835c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x31c>
    8358:	2001      	movs	r0, #1
    835a:	e000      	b.n	835e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x31e>
    835c:	2000      	movs	r0, #0
    835e:	4681      	mov	r9, r0
    8360:	f003 fdac 	bl	bebc <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>
    8364:	4605      	mov	r5, r0
    8366:	2e03      	cmp	r6, #3
    8368:	d003      	beq.n	8372 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x332>
    836a:	2701      	movs	r7, #1
    836c:	2e05      	cmp	r6, #5
    836e:	d005      	beq.n	837c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x33c>
    8370:	e008      	b.n	8384 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x344>
    8372:	78a0      	ldrb	r0, [r4, #2]
    8374:	2702      	movs	r7, #2
    8376:	f3c0 0040 	ubfx	r0, r0, #1, #1
    837a:	e001      	b.n	8380 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x340>
    837c:	78a0      	ldrb	r0, [r4, #2]
    837e:	07c0      	lsls	r0, r0, #31
    8380:	2800      	cmp	r0, #0
    8382:	d042      	beq.n	840a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ca>
    8384:	f1b9 0f00 	cmp.w	r9, #0
    8388:	d13e      	bne.n	8408 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c8>
    838a:	4822      	ldr	r0, [pc, #136]	; (8414 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d4>)
    838c:	7b80      	ldrb	r0, [r0, #14]
    838e:	b140      	cbz	r0, 83a2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x362>
    8390:	f006 fcde 	bl	ed50 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    8394:	f888 0000 	strb.w	r0, [r8]
    8398:	28ff      	cmp	r0, #255	; 0xff
    839a:	d002      	beq.n	83a2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x362>
    839c:	f7fe fdba 	bl	6f14 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    83a0:	4305      	orrs	r5, r0
    83a2:	4e1d      	ldr	r6, [pc, #116]	; (8418 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d8>)
    83a4:	f894 204f 	ldrb.w	r2, [r4, #79]	; 0x4f
    83a8:	f104 0350 	add.w	r3, r4, #80	; 0x50
    83ac:	6871      	ldr	r1, [r6, #4]
    83ae:	f811 0b03 	ldrb.w	r0, [r1], #3
    83b2:	f3c0 1080 	ubfx	r0, r0, #6, #1
    83b6:	f006 fc3d 	bl	ec34 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    83ba:	f898 1000 	ldrb.w	r1, [r8]
    83be:	29ff      	cmp	r1, #255	; 0xff
    83c0:	d004      	beq.n	83cc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x38c>
    83c2:	b990      	cbnz	r0, 83ea <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3aa>
    83c4:	7e60      	ldrb	r0, [r4, #25]
    83c6:	4288      	cmp	r0, r1
    83c8:	d00f      	beq.n	83ea <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3aa>
    83ca:	e008      	b.n	83de <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x39e>
    83cc:	b138      	cbz	r0, 83de <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x39e>
    83ce:	6871      	ldr	r1, [r6, #4]
    83d0:	f811 0b03 	ldrb.w	r0, [r1], #3
    83d4:	f3c0 1080 	ubfx	r0, r0, #6, #1
    83d8:	f007 fc3c 	bl	fc54 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    83dc:	b128      	cbz	r0, 83ea <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3aa>
    83de:	2000      	movs	r0, #0
    83e0:	78a1      	ldrb	r1, [r4, #2]
    83e2:	0749      	lsls	r1, r1, #29
    83e4:	d503      	bpl.n	83ee <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ae>
    83e6:	b990      	cbnz	r0, 840e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ce>
    83e8:	e00e      	b.n	8408 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c8>
    83ea:	2001      	movs	r0, #1
    83ec:	e7f8      	b.n	83e0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a0>
    83ee:	b975      	cbnz	r5, 840e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ce>
    83f0:	7be0      	ldrb	r0, [r4, #15]
    83f2:	b108      	cbz	r0, 83f8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b8>
    83f4:	42b8      	cmp	r0, r7
    83f6:	d107      	bne.n	8408 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c8>
    83f8:	6871      	ldr	r1, [r6, #4]
    83fa:	f811 0b03 	ldrb.w	r0, [r1], #3
    83fe:	f3c0 1080 	ubfx	r0, r0, #6, #1
    8402:	f007 fc27 	bl	fc54 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    8406:	b110      	cbz	r0, 840e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ce>
    8408:	2000      	movs	r0, #0
    840a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    840e:	2001      	movs	r0, #1
    8410:	e7fb      	b.n	840a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ca>
    8412:	0000      	.short	0x0000
    8414:	20001198 	.word	0x20001198
    8418:	2000013c 	.word	0x2000013c
    841c:	b570      	push	{r4, r5, r6, lr}
    841e:	4604      	mov	r4, r0
    8420:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    8422:	4d13      	ldr	r5, [pc, #76]	; (8470 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x430>)
    8424:	1c40      	adds	r0, r0, #1
    8426:	8520      	strh	r0, [r4, #40]	; 0x28
    8428:	7ba8      	ldrb	r0, [r5, #14]
    842a:	2600      	movs	r6, #0
    842c:	b120      	cbz	r0, 8438 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f8>
    842e:	f003 fd2b 	bl	be88 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    8432:	f003 fb4f 	bl	bad4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    8436:	73ae      	strb	r6, [r5, #14]
    8438:	702e      	strb	r6, [r5, #0]
    843a:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
    843e:	b108      	cbz	r0, 8444 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x404>
    8440:	2101      	movs	r1, #1
    8442:	e00f      	b.n	8464 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x424>
    8444:	7b60      	ldrb	r0, [r4, #13]
    8446:	b160      	cbz	r0, 8462 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x422>
    8448:	8d21      	ldrh	r1, [r4, #40]	; 0x28
    844a:	4288      	cmp	r0, r1
    844c:	d809      	bhi.n	8462 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x422>
    844e:	2101      	movs	r1, #1
    8450:	4620      	mov	r0, r4
    8452:	f007 fd36 	bl	fec2 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    8456:	78a0      	ldrb	r0, [r4, #2]
    8458:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    845c:	07c0      	lsls	r0, r0, #31
    845e:	f7ff b979 	b.w	7754 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    8462:	2100      	movs	r1, #0
    8464:	4620      	mov	r0, r4
    8466:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    846a:	f007 bd2a 	b.w	fec2 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    846e:	0000      	.short	0x0000
    8470:	20001198 	.word	0x20001198
    8474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8476:	4604      	mov	r4, r0
    8478:	f890 006c 	ldrb.w	r0, [r0, #108]	; 0x6c
    847c:	4616      	mov	r6, r2
    847e:	460d      	mov	r5, r1
    8480:	f88d 0000 	strb.w	r0, [sp]
    8484:	9800      	ldr	r0, [sp, #0]
    8486:	9000      	str	r0, [sp, #0]
    8488:	f89d 0000 	ldrb.w	r0, [sp]
    848c:	b110      	cbz	r0, 8494 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
    848e:	f640 31fa 	movw	r1, #3066	; 0xbfa
    8492:	e055      	b.n	8540 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x500>
    8494:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
    8498:	2700      	movs	r7, #0
    849a:	8828      	ldrh	r0, [r5, #0]
    849c:	f8a4 0070 	strh.w	r0, [r4, #112]	; 0x70
    84a0:	2b00      	cmp	r3, #0
    84a2:	d14a      	bne.n	853a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4fa>
    84a4:	6928      	ldr	r0, [r5, #16]
    84a6:	f006 fca2 	bl	edee <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    84aa:	f8a4 0086 	strh.w	r0, [r4, #134]	; 0x86
    84ae:	8b28      	ldrh	r0, [r5, #24]
    84b0:	f8a4 0088 	strh.w	r0, [r4, #136]	; 0x88
    84b4:	8b68      	ldrh	r0, [r5, #26]
    84b6:	f8a4 008a 	strh.w	r0, [r4, #138]	; 0x8a
    84ba:	f895 01c7 	ldrb.w	r0, [r5, #455]	; 0x1c7
    84be:	f884 008c 	strb.w	r0, [r4, #140]	; 0x8c
    84c2:	7e20      	ldrb	r0, [r4, #24]
    84c4:	f104 0149 	add.w	r1, r4, #73	; 0x49
    84c8:	460d      	mov	r5, r1
    84ca:	b120      	cbz	r0, 84d6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x496>
    84cc:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    84d0:	f007 fa87 	bl	f9e2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xe0>
    84d4:	b940      	cbnz	r0, 84e8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4a8>
    84d6:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    84da:	b170      	cbz	r0, 84fa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4ba>
    84dc:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    84e0:	4629      	mov	r1, r5
    84e2:	f007 fa75 	bl	f9d0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xce>
    84e6:	b140      	cbz	r0, 84fa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4ba>
    84e8:	f8d4 0049 	ldr.w	r0, [r4, #73]	; 0x49
    84ec:	f8c4 007a 	str.w	r0, [r4, #122]	; 0x7a
    84f0:	f8b4 004d 	ldrh.w	r0, [r4, #77]	; 0x4d
    84f4:	f8a4 007e 	strh.w	r0, [r4, #126]	; 0x7e
    84f8:	e003      	b.n	8502 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4c2>
    84fa:	f8c4 707a 	str.w	r7, [r4, #122]	; 0x7a
    84fe:	f8a4 707e 	strh.w	r7, [r4, #126]	; 0x7e
    8502:	4814      	ldr	r0, [pc, #80]	; (8554 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x514>)
    8504:	2eff      	cmp	r6, #255	; 0xff
    8506:	6840      	ldr	r0, [r0, #4]
    8508:	7801      	ldrb	r1, [r0, #0]
    850a:	f3c1 1180 	ubfx	r1, r1, #6, #1
    850e:	f884 1073 	strb.w	r1, [r4, #115]	; 0x73
    8512:	f850 1f03 	ldr.w	r1, [r0, #3]!
    8516:	d016      	beq.n	8546 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x506>
    8518:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
    851c:	8880      	ldrh	r0, [r0, #4]
    851e:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
    8522:	f104 0274 	add.w	r2, r4, #116	; 0x74
    8526:	1e51      	subs	r1, r2, #1
    8528:	4630      	mov	r0, r6
    852a:	f7fe fcd9 	bl	6ee0 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    852e:	b128      	cbz	r0, 853c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4fc>
    8530:	f814 0f73 	ldrb.w	r0, [r4, #115]!
    8534:	f040 0002 	orr.w	r0, r0, #2
    8538:	7020      	strb	r0, [r4, #0]
    853a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    853c:	f640 411b 	movw	r1, #3099	; 0xc1b
    8540:	202d      	movs	r0, #45	; 0x2d
    8542:	f7fd f80d 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8546:	f844 1f74 	str.w	r1, [r4, #116]!
    854a:	8880      	ldrh	r0, [r0, #4]
    854c:	80a0      	strh	r0, [r4, #4]
    854e:	60e7      	str	r7, [r4, #12]
    8550:	8227      	strh	r7, [r4, #16]
    8552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8554:	2000013c 	.word	0x2000013c
    8558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    855a:	4604      	mov	r4, r0
    855c:	20ff      	movs	r0, #255	; 0xff
    855e:	f88d 0000 	strb.w	r0, [sp]
    8562:	2601      	movs	r6, #1
    8564:	466a      	mov	r2, sp
    8566:	2105      	movs	r1, #5
    8568:	4620      	mov	r0, r4
    856a:	f7ff feeb 	bl	8344 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x304>
    856e:	b160      	cbz	r0, 858a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x54a>
    8570:	4d2c      	ldr	r5, [pc, #176]	; (8624 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e4>)
    8572:	4f2b      	ldr	r7, [pc, #172]	; (8620 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e0>)
    8574:	6869      	ldr	r1, [r5, #4]
    8576:	7bfa      	ldrb	r2, [r7, #15]
    8578:	f107 0310 	add.w	r3, r7, #16
    857c:	f811 0b03 	ldrb.w	r0, [r1], #3
    8580:	f3c0 1080 	ubfx	r0, r0, #6, #1
    8584:	f006 fb56 	bl	ec34 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    8588:	b110      	cbz	r0, 8590 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x550>
    858a:	2600      	movs	r6, #0
    858c:	4630      	mov	r0, r6
    858e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8590:	686a      	ldr	r2, [r5, #4]
    8592:	69e0      	ldr	r0, [r4, #28]
    8594:	7812      	ldrb	r2, [r2, #0]
    8596:	f810 1f8e 	ldrb.w	r1, [r0, #142]!
    859a:	f3c2 1240 	ubfx	r2, r2, #5, #1
    859e:	4011      	ands	r1, r2
    85a0:	7001      	strb	r1, [r0, #0]
    85a2:	2201      	movs	r2, #1
    85a4:	4620      	mov	r0, r4
    85a6:	69e1      	ldr	r1, [r4, #28]
    85a8:	f000 f8a8 	bl	86fc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6bc>
    85ac:	2300      	movs	r3, #0
    85ae:	f89d 2000 	ldrb.w	r2, [sp]
    85b2:	4620      	mov	r0, r4
    85b4:	69e1      	ldr	r1, [r4, #28]
    85b6:	f7ff ff5d 	bl	8474 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x434>
    85ba:	220e      	movs	r2, #14
    85bc:	4621      	mov	r1, r4
    85be:	f104 0064 	add.w	r0, r4, #100	; 0x64
    85c2:	f7fe fff5 	bl	75b0 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    85c6:	69e0      	ldr	r0, [r4, #28]
    85c8:	2203      	movs	r2, #3
    85ca:	8801      	ldrh	r1, [r0, #0]
    85cc:	f8a4 10a8 	strh.w	r1, [r4, #168]	; 0xa8
    85d0:	f890 008e 	ldrb.w	r0, [r0, #142]	; 0x8e
    85d4:	f884 00aa 	strb.w	r0, [r4, #170]	; 0xaa
    85d8:	4621      	mov	r1, r4
    85da:	f104 009e 	add.w	r0, r4, #158	; 0x9e
    85de:	f7fe ffe7 	bl	75b0 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    85e2:	f7ff f8b7 	bl	7754 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    85e6:	2000      	movs	r0, #0
    85e8:	7038      	strb	r0, [r7, #0]
    85ea:	2200      	movs	r2, #0
    85ec:	4621      	mov	r1, r4
    85ee:	69e0      	ldr	r0, [r4, #28]
    85f0:	f000 fa74 	bl	8adc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>
    85f4:	69e0      	ldr	r0, [r4, #28]
    85f6:	8800      	ldrh	r0, [r0, #0]
    85f8:	f7fd fbda 	bl	5db0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    85fc:	f006 f834 	bl	e668 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    8600:	6868      	ldr	r0, [r5, #4]
    8602:	69e1      	ldr	r1, [r4, #28]
    8604:	f8d0 2003 	ldr.w	r2, [r0, #3]
    8608:	f841 2f03 	str.w	r2, [r1, #3]!
    860c:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    8610:	808a      	strh	r2, [r1, #4]
    8612:	7800      	ldrb	r0, [r0, #0]
    8614:	69e1      	ldr	r1, [r4, #28]
    8616:	f3c0 1080 	ubfx	r0, r0, #6, #1
    861a:	7088      	strb	r0, [r1, #2]
    861c:	e7b6      	b.n	858c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x54c>
    861e:	0000      	.short	0x0000
    8620:	20001198 	.word	0x20001198
    8624:	2000013c 	.word	0x2000013c
    8628:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    862c:	4604      	mov	r4, r0
    862e:	20ff      	movs	r0, #255	; 0xff
    8630:	f88d 0000 	strb.w	r0, [sp]
    8634:	2501      	movs	r5, #1
    8636:	466a      	mov	r2, sp
    8638:	2103      	movs	r1, #3
    863a:	4620      	mov	r0, r4
    863c:	f7ff fe82 	bl	8344 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x304>
    8640:	b330      	cbz	r0, 8690 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x650>
    8642:	7b20      	ldrb	r0, [r4, #12]
    8644:	2700      	movs	r7, #0
    8646:	b168      	cbz	r0, 8664 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x624>
    8648:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
    864c:	f88d 0004 	strb.w	r0, [sp, #4]
    8650:	9801      	ldr	r0, [sp, #4]
    8652:	9001      	str	r0, [sp, #4]
    8654:	f89d 0004 	ldrb.w	r0, [sp, #4]
    8658:	b920      	cbnz	r0, 8664 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x624>
    865a:	f89d 1000 	ldrb.w	r1, [sp]
    865e:	4620      	mov	r0, r4
    8660:	f7ff fe2e 	bl	82c0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>
    8664:	4e0c      	ldr	r6, [pc, #48]	; (8698 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x658>)
    8666:	2104      	movs	r1, #4
    8668:	6870      	ldr	r0, [r6, #4]
    866a:	8007      	strh	r7, [r0, #0]
    866c:	f006 ff05 	bl	f47a <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    8670:	4620      	mov	r0, r4
    8672:	f000 f88b 	bl	878c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x74c>
    8676:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    867a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    867c:	6870      	ldr	r0, [r6, #4]
    867e:	f006 ff33 	bl	f4e8 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>
    8682:	4906      	ldr	r1, [pc, #24]	; (869c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x65c>)
    8684:	2005      	movs	r0, #5
    8686:	7008      	strb	r0, [r1, #0]
    8688:	6870      	ldr	r0, [r6, #4]
    868a:	f003 fe91 	bl	c3b0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    868e:	e000      	b.n	8692 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x652>
    8690:	2500      	movs	r5, #0
    8692:	4628      	mov	r0, r5
    8694:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    8698:	2000013c 	.word	0x2000013c
    869c:	20001198 	.word	0x20001198
    86a0:	b570      	push	{r4, r5, r6, lr}
    86a2:	4604      	mov	r4, r0
    86a4:	460e      	mov	r6, r1
    86a6:	7e40      	ldrb	r0, [r0, #25]
    86a8:	f7fe fbf4 	bl	6e94 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    86ac:	0005      	movs	r5, r0
    86ae:	d019      	beq.n	86e4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a4>
    86b0:	2110      	movs	r1, #16
    86b2:	f006 fd3a 	bl	f12a <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    86b6:	2800      	cmp	r0, #0
    86b8:	d114      	bne.n	86e4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a4>
    86ba:	2001      	movs	r0, #1
    86bc:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    86c0:	f104 0157 	add.w	r1, r4, #87	; 0x57
    86c4:	4632      	mov	r2, r6
    86c6:	460c      	mov	r4, r1
    86c8:	4628      	mov	r0, r5
    86ca:	f006 fae3 	bl	ec94 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    86ce:	4621      	mov	r1, r4
    86d0:	4c05      	ldr	r4, [pc, #20]	; (86e8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a8>)
    86d2:	6860      	ldr	r0, [r4, #4]
    86d4:	f006 feec 	bl	f4b0 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    86d8:	6860      	ldr	r0, [r4, #4]
    86da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    86de:	2101      	movs	r1, #1
    86e0:	f006 beec 	b.w	f4bc <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    86e4:	bd70      	pop	{r4, r5, r6, pc}
    86e6:	0000      	.short	0x0000
    86e8:	2000013c 	.word	0x2000013c
    86ec:	4802      	ldr	r0, [pc, #8]	; (86f8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6b8>)
    86ee:	2101      	movs	r1, #1
    86f0:	6800      	ldr	r0, [r0, #0]
    86f2:	f7ff bb25 	b.w	7d40 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    86f6:	0000      	.short	0x0000
    86f8:	2000013c 	.word	0x2000013c
    86fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8700:	4e21      	ldr	r6, [pc, #132]	; (8788 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x748>)
    8702:	4680      	mov	r8, r0
    8704:	460c      	mov	r4, r1
    8706:	6870      	ldr	r0, [r6, #4]
    8708:	4615      	mov	r5, r2
    870a:	f850 1f0f 	ldr.w	r1, [r0, #15]!
    870e:	6161      	str	r1, [r4, #20]
    8710:	8881      	ldrh	r1, [r0, #4]
    8712:	83a1      	strh	r1, [r4, #28]
    8714:	7981      	ldrb	r1, [r0, #6]
    8716:	77a1      	strb	r1, [r4, #30]
    8718:	8940      	ldrh	r0, [r0, #10]
    871a:	f006 fb64 	bl	ede6 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    871e:	4607      	mov	r7, r0
    8720:	6120      	str	r0, [r4, #16]
    8722:	6870      	ldr	r0, [r6, #4]
    8724:	4639      	mov	r1, r7
    8726:	7d80      	ldrb	r0, [r0, #22]
    8728:	f006 fcf6 	bl	f118 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    872c:	8420      	strh	r0, [r4, #32]
    872e:	6870      	ldr	r0, [r6, #4]
    8730:	4639      	mov	r1, r7
    8732:	f8b0 0017 	ldrh.w	r0, [r0, #23]
    8736:	f006 fceb 	bl	f110 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    873a:	6260      	str	r0, [r4, #36]	; 0x24
    873c:	6870      	ldr	r0, [r6, #4]
    873e:	f830 1f1b 	ldrh.w	r1, [r0, #27]!
    8742:	8321      	strh	r1, [r4, #24]
    8744:	8841      	ldrh	r1, [r0, #2]
    8746:	8361      	strh	r1, [r4, #26]
    8748:	6841      	ldr	r1, [r0, #4]
    874a:	f8c4 108f 	str.w	r1, [r4, #143]	; 0x8f
    874e:	7a01      	ldrb	r1, [r0, #8]
    8750:	f884 1093 	strb.w	r1, [r4, #147]	; 0x93
    8754:	7a41      	ldrb	r1, [r0, #9]
    8756:	f001 011f 	and.w	r1, r1, #31
    875a:	f884 109a 	strb.w	r1, [r4, #154]	; 0x9a
    875e:	7a40      	ldrb	r0, [r0, #9]
    8760:	0940      	lsrs	r0, r0, #5
    8762:	f884 01c7 	strb.w	r0, [r4, #455]	; 0x1c7
    8766:	f104 0066 	add.w	r0, r4, #102	; 0x66
    876a:	7205      	strb	r5, [r0, #8]
    876c:	7245      	strb	r5, [r0, #9]
    876e:	21ff      	movs	r1, #255	; 0xff
    8770:	7281      	strb	r1, [r0, #10]
    8772:	2100      	movs	r1, #0
    8774:	3836      	subs	r0, #54	; 0x36
    8776:	f007 f899 	bl	f8ac <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    877a:	f898 000e 	ldrb.w	r0, [r8, #14]
    877e:	f884 0072 	strb.w	r0, [r4, #114]	; 0x72
    8782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8786:	0000      	.short	0x0000
    8788:	2000013c 	.word	0x2000013c
    878c:	b570      	push	{r4, r5, r6, lr}
    878e:	4d07      	ldr	r5, [pc, #28]	; (87ac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x76c>)
    8790:	4604      	mov	r4, r0
    8792:	f100 0149 	add.w	r1, r0, #73	; 0x49
    8796:	6868      	ldr	r0, [r5, #4]
    8798:	f006 fe97 	bl	f4ca <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
    879c:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
    87a0:	6868      	ldr	r0, [r5, #4]
    87a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    87a6:	f006 be96 	b.w	f4d6 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    87aa:	0000      	.short	0x0000
    87ac:	2000013c 	.word	0x2000013c
    87b0:	00555555 	.word	0x00555555
    87b4:	00007fc9 	.word	0x00007fc9
    87b8:	00007e55 	.word	0x00007e55
    87bc:	00007f45 	.word	0x00007f45
    87c0:	00000000 	.word	0x00000000
    87c4:	00007f1d 	.word	0x00007f1d
    87c8:	00007f75 	.word	0x00007f75
    87cc:	0000fc7b 	.word	0x0000fc7b
    87d0:	0000fc81 	.word	0x0000fc81
    87d4:	000081bd 	.word	0x000081bd
    87d8:	000081e1 	.word	0x000081e1
    87dc:	000086ed 	.word	0x000086ed
    87e0:	000087d0 	.word	0x000087d0
    87e4:	000087c8 	.word	0x000087c8
    87e8:	000087c4 	.word	0x000087c4

000087ec <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
    87ec:	b510      	push	{r4, lr}
    87ee:	1e42      	subs	r2, r0, #1
    87f0:	2a02      	cmp	r2, #2
    87f2:	d901      	bls.n	87f8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0xc>
    87f4:	21ca      	movs	r1, #202	; 0xca
    87f6:	e009      	b.n	880c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x20>
    87f8:	1e40      	subs	r0, r0, #1
    87fa:	2910      	cmp	r1, #16
    87fc:	d009      	beq.n	8812 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x26>
    87fe:	2912      	cmp	r1, #18
    8800:	d00c      	beq.n	881c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    8802:	2913      	cmp	r1, #19
    8804:	d00a      	beq.n	881c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    8806:	2915      	cmp	r1, #21
    8808:	d005      	beq.n	8816 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x2a>
    880a:	21d8      	movs	r1, #216	; 0xd8
    880c:	202f      	movs	r0, #47	; 0x2f
    880e:	f7fc fea7 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8812:	4905      	ldr	r1, [pc, #20]	; (8828 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    8814:	e004      	b.n	8820 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    8816:	4904      	ldr	r1, [pc, #16]	; (8828 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    8818:	1d89      	adds	r1, r1, #6
    881a:	e001      	b.n	8820 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    881c:	4902      	ldr	r1, [pc, #8]	; (8828 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    881e:	1f89      	subs	r1, r1, #6
    8820:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    8824:	bd10      	pop	{r4, pc}
    8826:	0000      	.short	0x0000
    8828:	0000fe92 	.word	0x0000fe92

0000882c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
    882c:	1e42      	subs	r2, r0, #1
    882e:	b510      	push	{r4, lr}
    8830:	b2d2      	uxtb	r2, r2
    8832:	2a01      	cmp	r2, #1
    8834:	d903      	bls.n	883e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    8836:	291d      	cmp	r1, #29
    8838:	d001      	beq.n	883e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    883a:	21ee      	movs	r1, #238	; 0xee
    883c:	e00d      	b.n	885a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
    883e:	2913      	cmp	r1, #19
    8840:	d013      	beq.n	886a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    8842:	dc04      	bgt.n	884e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x22>
    8844:	2910      	cmp	r1, #16
    8846:	d00b      	beq.n	8860 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x34>
    8848:	2912      	cmp	r1, #18
    884a:	d104      	bne.n	8856 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2a>
    884c:	e00d      	b.n	886a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    884e:	2915      	cmp	r1, #21
    8850:	d008      	beq.n	8864 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x38>
    8852:	291d      	cmp	r1, #29
    8854:	d00e      	beq.n	8874 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x48>
    8856:	f44f 7181 	mov.w	r1, #258	; 0x102
    885a:	202f      	movs	r0, #47	; 0x2f
    885c:	f7fc fe80 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8860:	4807      	ldr	r0, [pc, #28]	; (8880 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    8862:	e004      	b.n	886e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    8864:	4806      	ldr	r0, [pc, #24]	; (8880 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    8866:	3008      	adds	r0, #8
    8868:	e001      	b.n	886e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    886a:	4805      	ldr	r0, [pc, #20]	; (8880 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    886c:	1d00      	adds	r0, r0, #4
    886e:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    8872:	bd10      	pop	{r4, pc}
    8874:	f240 315a 	movw	r1, #858	; 0x35a
    8878:	fb10 f001 	smulbb	r0, r0, r1
    887c:	bd10      	pop	{r4, pc}
    887e:	0000      	.short	0x0000
    8880:	0000fe80 	.word	0x0000fe80

00008884 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>:
    8884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8888:	4604      	mov	r4, r0
    888a:	f890 00d8 	ldrb.w	r0, [r0, #216]	; 0xd8
    888e:	4616      	mov	r6, r2
    8890:	460f      	mov	r7, r1
    8892:	2800      	cmp	r0, #0
    8894:	d15e      	bne.n	8954 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd0>
    8896:	4621      	mov	r1, r4
    8898:	484d      	ldr	r0, [pc, #308]	; (89d0 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x14c>)
    889a:	f7fb f8d7 	bl	3a4c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    889e:	4605      	mov	r5, r0
    88a0:	2820      	cmp	r0, #32
    88a2:	d057      	beq.n	8954 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd0>
    88a4:	2250      	movs	r2, #80	; 0x50
    88a6:	2100      	movs	r1, #0
    88a8:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    88ac:	f005 f856 	bl	d95c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    88b0:	f884 50c0 	strb.w	r5, [r4, #192]	; 0xc0
    88b4:	2501      	movs	r5, #1
    88b6:	f8c4 70c4 	str.w	r7, [r4, #196]	; 0xc4
    88ba:	f884 50d8 	strb.w	r5, [r4, #216]	; 0xd8
    88be:	b137      	cbz	r7, 88ce <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x4a>
    88c0:	f7ff f8c4 	bl	7a4c <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    88c4:	f000 0007 	and.w	r0, r0, #7
    88c8:	1c40      	adds	r0, r0, #1
    88ca:	f887 01f4 	strb.w	r0, [r7, #500]	; 0x1f4
    88ce:	4620      	mov	r0, r4
    88d0:	f007 fcc9 	bl	10266 <CONFIG_PM_SRAM_SIZE+0x266>
    88d4:	f8a4 00e8 	strh.w	r0, [r4, #232]	; 0xe8
    88d8:	2002      	movs	r0, #2
    88da:	f884 00ea 	strb.w	r0, [r4, #234]	; 0xea
    88de:	46a8      	mov	r8, r5
    88e0:	f884 50eb 	strb.w	r5, [r4, #235]	; 0xeb
    88e4:	2500      	movs	r5, #0
    88e6:	f804 5fe0 	strb.w	r5, [r4, #224]!
    88ea:	f7fc f9bf 	bl	4c6c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    88ee:	4607      	mov	r7, r0
    88f0:	f004 fe57 	bl	d5a2 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    88f4:	8921      	ldrh	r1, [r4, #8]
    88f6:	3ce0      	subs	r4, #224	; 0xe0
    88f8:	4288      	cmp	r0, r1
    88fa:	d800      	bhi.n	88fe <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x7a>
    88fc:	4608      	mov	r0, r1
    88fe:	4438      	add	r0, r7
    8900:	30cc      	adds	r0, #204	; 0xcc
    8902:	b287      	uxth	r7, r0
    8904:	4620      	mov	r0, r4
    8906:	f007 f957 	bl	fbb8 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    890a:	b330      	cbz	r0, 895a <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd6>
    890c:	f008 fe2d 	bl	1156a <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    8910:	f500 60cd 	add.w	r0, r0, #1640	; 0x668
    8914:	b281      	uxth	r1, r0
    8916:	4630      	mov	r0, r6
    8918:	f004 fe77 	bl	d60a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    891c:	4430      	add	r0, r6
    891e:	f8c4 00e4 	str.w	r0, [r4, #228]	; 0xe4
    8922:	34c4      	adds	r4, #196	; 0xc4
    8924:	f7fb fa44 	bl	3db0 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    8928:	19c0      	adds	r0, r0, r7
    892a:	4169      	adcs	r1, r5
    892c:	e9c4 010b 	strd	r0, r1, [r4, #44]	; 0x2c
    8930:	f804 5c03 	strb.w	r5, [r4, #-3]
    8934:	f884 8004 	strb.w	r8, [r4, #4]
    8938:	2001      	movs	r0, #1
    893a:	f007 fa9a 	bl	fe72 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    893e:	f500 7088 	add.w	r0, r0, #272	; 0x110
    8942:	1a30      	subs	r0, r6, r0
    8944:	60a0      	str	r0, [r4, #8]
    8946:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    894a:	0841      	lsrs	r1, r0, #1
    894c:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
    8950:	3cc4      	subs	r4, #196	; 0xc4
    8952:	e022      	b.n	899a <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x116>
    8954:	200c      	movs	r0, #12
    8956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    895a:	4620      	mov	r0, r4
    895c:	f007 fbd6 	bl	1010c <CONFIG_PM_SRAM_SIZE+0x10c>
    8960:	f844 0fe4 	str.w	r0, [r4, #228]!
    8964:	f804 8c23 	strb.w	r8, [r4, #-35]
    8968:	f7fb fa22 	bl	3db0 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    896c:	4680      	mov	r8, r0
    896e:	4689      	mov	r9, r1
    8970:	f7ff f86c 	bl	7a4c <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    8974:	f242 7110 	movw	r1, #10000	; 0x2710
    8978:	fbb0 f2f1 	udiv	r2, r0, r1
    897c:	fb01 0012 	mls	r0, r1, r2, r0
    8980:	1839      	adds	r1, r7, r0
    8982:	eb11 0108 	adds.w	r1, r1, r8
    8986:	eb45 0009 	adc.w	r0, r5, r9
    898a:	e9c4 1003 	strd	r1, r0, [r4, #12]
    898e:	3ce4      	subs	r4, #228	; 0xe4
    8990:	b196      	cbz	r6, 89b8 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x134>
    8992:	1989      	adds	r1, r1, r6
    8994:	4168      	adcs	r0, r5
    8996:	e9c4 1040 	strd	r1, r0, [r4, #256]	; 0x100
    899a:	f894 00c0 	ldrb.w	r0, [r4, #192]	; 0xc0
    899e:	f104 01e0 	add.w	r1, r4, #224	; 0xe0
    89a2:	f007 fc5e 	bl	10262 <CONFIG_PM_SRAM_SIZE+0x262>
    89a6:	b168      	cbz	r0, 89c4 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x140>
    89a8:	f8a4 50f8 	strh.w	r5, [r4, #248]	; 0xf8
    89ac:	2100      	movs	r1, #0
    89ae:	4620      	mov	r0, r4
    89b0:	f007 f92e 	bl	fc10 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    89b4:	2000      	movs	r0, #0
    89b6:	e7ce      	b.n	8956 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd2>
    89b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    89bc:	0841      	lsrs	r1, r0, #1
    89be:	e9c4 0140 	strd	r0, r1, [r4, #256]	; 0x100
    89c2:	e7ea      	b.n	899a <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x116>
    89c4:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
    89c8:	2030      	movs	r0, #48	; 0x30
    89ca:	f7fc fdc9 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    89ce:	0000      	.short	0x0000
    89d0:	000103e3 	.word	0x000103e3

000089d4 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>:
    89d4:	4803      	ldr	r0, [pc, #12]	; (89e4 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ+0x10>)
    89d6:	2100      	movs	r1, #0
    89d8:	7001      	strb	r1, [r0, #0]
    89da:	2201      	movs	r2, #1
    89dc:	7082      	strb	r2, [r0, #2]
    89de:	7041      	strb	r1, [r0, #1]
    89e0:	f007 baaf 	b.w	ff42 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
    89e4:	2000014c 	.word	0x2000014c

000089e8 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>:
    89e8:	4901      	ldr	r1, [pc, #4]	; (89f0 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x8>)
    89ea:	7008      	strb	r0, [r1, #0]
    89ec:	4770      	bx	lr
    89ee:	0000      	.short	0x0000
    89f0:	2000014c 	.word	0x2000014c

000089f4 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>:
    89f4:	4908      	ldr	r1, [pc, #32]	; (8a18 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x24>)
    89f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    89fa:	fbb1 f1f2 	udiv	r1, r1, r2
    89fe:	b510      	push	{r4, lr}
    8a00:	f501 7125 	add.w	r1, r1, #660	; 0x294
    8a04:	f006 ff6b 	bl	f8de <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    8a08:	f640 0148 	movw	r1, #2120	; 0x848
    8a0c:	4288      	cmp	r0, r1
    8a0e:	d300      	bcc.n	8a12 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x1e>
    8a10:	4608      	mov	r0, r1
    8a12:	b280      	uxth	r0, r0
    8a14:	bd10      	pop	{r4, pc}
    8a16:	0000      	.short	0x0000
    8a18:	0001527d 	.word	0x0001527d

00008a1c <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>:
    8a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8a20:	4c10      	ldr	r4, [pc, #64]	; (8a64 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x48>)
    8a22:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
    8a26:	f003 fbdd 	bl	c1e4 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    8a2a:	4606      	mov	r6, r0
    8a2c:	7820      	ldrb	r0, [r4, #0]
    8a2e:	b128      	cbz	r0, 8a3c <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x20>
    8a30:	4632      	mov	r2, r6
    8a32:	4639      	mov	r1, r7
    8a34:	4628      	mov	r0, r5
    8a36:	f006 f9e0 	bl	edfa <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    8a3a:	4605      	mov	r5, r0
    8a3c:	6860      	ldr	r0, [r4, #4]
    8a3e:	4285      	cmp	r5, r0
    8a40:	d005      	beq.n	8a4e <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x32>
    8a42:	68e1      	ldr	r1, [r4, #12]
    8a44:	1a28      	subs	r0, r5, r0
    8a46:	4408      	add	r0, r1
    8a48:	60e0      	str	r0, [r4, #12]
    8a4a:	f7fb f8f7 	bl	3c3c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    8a4e:	6065      	str	r5, [r4, #4]
    8a50:	42ae      	cmp	r6, r5
    8a52:	d801      	bhi.n	8a58 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3c>
    8a54:	7860      	ldrb	r0, [r4, #1]
    8a56:	b110      	cbz	r0, 8a5e <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x42>
    8a58:	2000      	movs	r0, #0
    8a5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8a5e:	2001      	movs	r0, #1
    8a60:	e7fb      	b.n	8a5a <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3e>
    8a62:	0000      	.short	0x0000
    8a64:	2000014c 	.word	0x2000014c

00008a68 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>:
    8a68:	b510      	push	{r4, lr}
    8a6a:	4604      	mov	r4, r0
    8a6c:	2906      	cmp	r1, #6
    8a6e:	d22e      	bcs.n	8ace <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x66>
    8a70:	e8df f001 	tbb	[pc, r1]
    8a74:	14031105 	.word	0x14031105
    8a78:	2815      	.short	0x2815
    8a7a:	2100      	movs	r1, #0
    8a7c:	e006      	b.n	8a8c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x24>
    8a7e:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    8a82:	b110      	cbz	r0, 8a8a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x22>
    8a84:	4620      	mov	r0, r4
    8a86:	f007 fb7f 	bl	10188 <CONFIG_PM_SRAM_SIZE+0x188>
    8a8a:	2101      	movs	r1, #1
    8a8c:	4620      	mov	r0, r4
    8a8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8a92:	f000 b8fb 	b.w	8c8c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1b0>
    8a96:	2003      	movs	r0, #3
    8a98:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
    8a9c:	bd10      	pop	{r4, pc}
    8a9e:	f003 fba7 	bl	c1f0 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>
    8aa2:	f8c4 0254 	str.w	r0, [r4, #596]	; 0x254
    8aa6:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    8aaa:	f003 fc65 	bl	c378 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8aae:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
    8ab2:	1a09      	subs	r1, r1, r0
    8ab4:	4808      	ldr	r0, [pc, #32]	; (8ad8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x70>)
    8ab6:	6842      	ldr	r2, [r0, #4]
    8ab8:	440a      	add	r2, r1
    8aba:	6042      	str	r2, [r0, #4]
    8abc:	6882      	ldr	r2, [r0, #8]
    8abe:	4411      	add	r1, r2
    8ac0:	6081      	str	r1, [r0, #8]
    8ac2:	bd10      	pop	{r4, pc}
    8ac4:	4620      	mov	r0, r4
    8ac6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8aca:	f007 bb48 	b.w	1015e <CONFIG_PM_SRAM_SIZE+0x15e>
    8ace:	f240 715b 	movw	r1, #1883	; 0x75b
    8ad2:	2030      	movs	r0, #48	; 0x30
    8ad4:	f7fc fd44 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8ad8:	2000014c 	.word	0x2000014c

00008adc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>:
    8adc:	b570      	push	{r4, r5, r6, lr}
    8ade:	460c      	mov	r4, r1
    8ae0:	4605      	mov	r5, r0
    8ae2:	b112      	cbz	r2, 8aea <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xe>
    8ae4:	f240 7185 	movw	r1, #1925	; 0x785
    8ae8:	e010      	b.n	8b0c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x30>
    8aea:	f003 fb7b 	bl	c1e4 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    8aee:	4601      	mov	r1, r0
    8af0:	2200      	movs	r2, #0
    8af2:	4620      	mov	r0, r4
    8af4:	f007 fc29 	bl	1034a <CONFIG_PM_SRAM_SIZE+0x34a>
    8af8:	f894 00c0 	ldrb.w	r0, [r4, #192]	; 0xc0
    8afc:	462a      	mov	r2, r5
    8afe:	4905      	ldr	r1, [pc, #20]	; (8b14 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x38>)
    8b00:	f7fa fe5a 	bl	37b8 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>
    8b04:	2800      	cmp	r0, #0
    8b06:	d104      	bne.n	8b12 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x36>
    8b08:	f240 716e 	movw	r1, #1902	; 0x76e
    8b0c:	2030      	movs	r0, #48	; 0x30
    8b0e:	f7fc fd27 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8b12:	bd70      	pop	{r4, r5, r6, pc}
    8b14:	00010483 	.word	0x00010483
    8b18:	b510      	push	{r4, lr}
    8b1a:	280c      	cmp	r0, #12
    8b1c:	d304      	bcc.n	8b28 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4c>
    8b1e:	f44f 7157 	mov.w	r1, #860	; 0x35c
    8b22:	2006      	movs	r0, #6
    8b24:	f7fc fd1c 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8b28:	4901      	ldr	r1, [pc, #4]	; (8b30 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x54>)
    8b2a:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    8b2e:	bd10      	pop	{r4, pc}
    8b30:	000106a6 	.word	0x000106a6
    8b34:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    8b36:	4c18      	ldr	r4, [pc, #96]	; (8b98 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xbc>)
    8b38:	2001      	movs	r0, #1
    8b3a:	7060      	strb	r0, [r4, #1]
    8b3c:	f64f 75ff 	movw	r5, #65535	; 0xffff
    8b40:	e00b      	b.n	8b5a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7e>
    8b42:	2100      	movs	r1, #0
    8b44:	f005 feb4 	bl	e8b0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    8b48:	0006      	movs	r6, r0
    8b4a:	d010      	beq.n	8b6e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x92>
    8b4c:	f896 024c 	ldrb.w	r0, [r6, #588]	; 0x24c
    8b50:	f7fa fe64 	bl	381c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    8b54:	4630      	mov	r0, r6
    8b56:	f007 fbeb 	bl	10330 <CONFIG_PM_SRAM_SIZE+0x330>
    8b5a:	4669      	mov	r1, sp
    8b5c:	2000      	movs	r0, #0
    8b5e:	f005 feb1 	bl	e8c4 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    8b62:	b180      	cbz	r0, 8b86 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaa>
    8b64:	f240 1103 	movw	r1, #259	; 0x103
    8b68:	2030      	movs	r0, #48	; 0x30
    8b6a:	f7fc fcf9 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8b6e:	f240 1123 	movw	r1, #291	; 0x123
    8b72:	e7f9      	b.n	8b68 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x8c>
    8b74:	9802      	ldr	r0, [sp, #8]
    8b76:	b130      	cbz	r0, 8b86 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaa>
    8b78:	f890 1204 	ldrb.w	r1, [r0, #516]	; 0x204
    8b7c:	b119      	cbz	r1, 8b86 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaa>
    8b7e:	8800      	ldrh	r0, [r0, #0]
    8b80:	42a8      	cmp	r0, r5
    8b82:	d1de      	bne.n	8b42 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x66>
    8b84:	e004      	b.n	8b90 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xb4>
    8b86:	4668      	mov	r0, sp
    8b88:	f7fc ff2e 	bl	59e8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    8b8c:	2800      	cmp	r0, #0
    8b8e:	d0f1      	beq.n	8b74 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x98>
    8b90:	2000      	movs	r0, #0
    8b92:	7060      	strb	r0, [r4, #1]
    8b94:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    8b96:	0000      	.short	0x0000
    8b98:	2000014c 	.word	0x2000014c
    8b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8ba0:	4604      	mov	r4, r0
    8ba2:	4839      	ldr	r0, [pc, #228]	; (8c88 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1ac>)
    8ba4:	461e      	mov	r6, r3
    8ba6:	4690      	mov	r8, r2
    8ba8:	7880      	ldrb	r0, [r0, #2]
    8baa:	4689      	mov	r9, r1
    8bac:	2500      	movs	r5, #0
    8bae:	2800      	cmp	r0, #0
    8bb0:	d063      	beq.n	8c7a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x19e>
    8bb2:	f7fc f931 	bl	4e18 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    8bb6:	b3e0      	cbz	r0, 8c32 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x156>
    8bb8:	f8b4 01f0 	ldrh.w	r0, [r4, #496]	; 0x1f0
    8bbc:	2802      	cmp	r0, #2
    8bbe:	d35c      	bcc.n	8c7a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x19e>
    8bc0:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
    8bc4:	2802      	cmp	r0, #2
    8bc6:	d058      	beq.n	8c7a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x19e>
    8bc8:	f894 021a 	ldrb.w	r0, [r4, #538]	; 0x21a
    8bcc:	bb88      	cbnz	r0, 8c32 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x156>
    8bce:	f894 01c7 	ldrb.w	r0, [r4, #455]	; 0x1c7
    8bd2:	f7ff ffa1 	bl	8b18 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    8bd6:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    8bda:	b281      	uxth	r1, r0
    8bdc:	8031      	strh	r1, [r6, #0]
    8bde:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
    8be2:	2700      	movs	r7, #0
    8be4:	2801      	cmp	r0, #1
    8be6:	d00d      	beq.n	8c04 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x128>
    8be8:	6920      	ldr	r0, [r4, #16]
    8bea:	f004 fd0e 	bl	d60a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8bee:	f8b4 21de 	ldrh.w	r2, [r4, #478]	; 0x1de
    8bf2:	4442      	add	r2, r8
    8bf4:	eba2 0109 	sub.w	r1, r2, r9
    8bf8:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
    8bfc:	1a82      	subs	r2, r0, r2
    8bfe:	fb01 7502 	mla	r5, r1, r2, r7
    8c02:	e035      	b.n	8c70 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x194>
    8c04:	f894 008a 	ldrb.w	r0, [r4, #138]	; 0x8a
    8c08:	2803      	cmp	r0, #3
    8c0a:	d039      	beq.n	8c80 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a4>
    8c0c:	2101      	movs	r1, #1
    8c0e:	2000      	movs	r0, #0
    8c10:	f006 f9ae 	bl	ef70 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    8c14:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8c16:	1847      	adds	r7, r0, r1
    8c18:	8831      	ldrh	r1, [r6, #0]
    8c1a:	f8d4 01fc 	ldr.w	r0, [r4, #508]	; 0x1fc
    8c1e:	f004 fcf4 	bl	d60a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8c22:	f8d4 21f8 	ldr.w	r2, [r4, #504]	; 0x1f8
    8c26:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
    8c2a:	1a82      	subs	r2, r0, r2
    8c2c:	fb01 5502 	mla	r5, r1, r2, r5
    8c30:	e000      	b.n	8c34 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x158>
    8c32:	e022      	b.n	8c7a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x19e>
    8c34:	f8c4 01f8 	str.w	r0, [r4, #504]	; 0x1f8
    8c38:	8831      	ldrh	r1, [r6, #0]
    8c3a:	4638      	mov	r0, r7
    8c3c:	f004 fce5 	bl	d60a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8c40:	f8d4 1208 	ldr.w	r1, [r4, #520]	; 0x208
    8c44:	f8c4 0208 	str.w	r0, [r4, #520]	; 0x208
    8c48:	1a41      	subs	r1, r0, r1
    8c4a:	440d      	add	r5, r1
    8c4c:	8831      	ldrh	r1, [r6, #0]
    8c4e:	6920      	ldr	r0, [r4, #16]
    8c50:	f004 fcdb 	bl	d60a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8c54:	f8b4 21de 	ldrh.w	r2, [r4, #478]	; 0x1de
    8c58:	4442      	add	r2, r8
    8c5a:	eba2 0109 	sub.w	r1, r2, r9
    8c5e:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
    8c62:	1a89      	subs	r1, r1, r2
    8c64:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
    8c68:	1a82      	subs	r2, r0, r2
    8c6a:	1e49      	subs	r1, r1, #1
    8c6c:	fb01 5502 	mla	r5, r1, r2, r5
    8c70:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
    8c74:	2001      	movs	r0, #1
    8c76:	f884 021a 	strb.w	r0, [r4, #538]	; 0x21a
    8c7a:	4628      	mov	r0, r5
    8c7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8c80:	f8d4 01fc 	ldr.w	r0, [r4, #508]	; 0x1fc
    8c84:	e7c6      	b.n	8c14 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x138>
    8c86:	0000      	.short	0x0000
    8c88:	2000014c 	.word	0x2000014c
    8c8c:	b538      	push	{r3, r4, r5, lr}
    8c8e:	2500      	movs	r5, #0
    8c90:	4604      	mov	r4, r0
    8c92:	2901      	cmp	r1, #1
    8c94:	d102      	bne.n	8c9c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1c0>
    8c96:	4810      	ldr	r0, [pc, #64]	; (8cd8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1fc>)
    8c98:	7840      	ldrb	r0, [r0, #1]
    8c9a:	b170      	cbz	r0, 8cba <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1de>
    8c9c:	2004      	movs	r0, #4
    8c9e:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
    8ca2:	bf00      	nop
    8ca4:	f007 fa69 	bl	1017a <CONFIG_PM_SRAM_SIZE+0x17a>
    8ca8:	f8a4 524a 	strh.w	r5, [r4, #586]	; 0x24a
    8cac:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    8cb0:	f8a4 0216 	strh.w	r0, [r4, #534]	; 0x216
    8cb4:	f884 5219 	strb.w	r5, [r4, #537]	; 0x219
    8cb8:	bd38      	pop	{r3, r4, r5, pc}
    8cba:	9500      	str	r5, [sp, #0]
    8cbc:	f8b4 11cc 	ldrh.w	r1, [r4, #460]	; 0x1cc
    8cc0:	2301      	movs	r3, #1
    8cc2:	2200      	movs	r2, #0
    8cc4:	4620      	mov	r0, r4
    8cc6:	f000 f809 	bl	8cdc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x200>
    8cca:	2800      	cmp	r0, #0
    8ccc:	d0ea      	beq.n	8ca4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1c8>
    8cce:	f240 61cf 	movw	r1, #1743	; 0x6cf
    8cd2:	2030      	movs	r0, #48	; 0x30
    8cd4:	f7fc fc44 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8cd8:	2000014c 	.word	0x2000014c
    8cdc:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8ce0:	b08b      	sub	sp, #44	; 0x2c
    8ce2:	4604      	mov	r4, r0
    8ce4:	f890 006f 	ldrb.w	r0, [r0, #111]	; 0x6f
    8ce8:	4699      	mov	r9, r3
    8cea:	460f      	mov	r7, r1
    8cec:	9307      	str	r3, [sp, #28]
    8cee:	9005      	str	r0, [sp, #20]
    8cf0:	f008 fc3b 	bl	1156a <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    8cf4:	4605      	mov	r5, r0
    8cf6:	f894 01c7 	ldrb.w	r0, [r4, #455]	; 0x1c7
    8cfa:	f7ff ff0d 	bl	8b18 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    8cfe:	4428      	add	r0, r5
    8d00:	f8ad 0004 	strh.w	r0, [sp, #4]
    8d04:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
    8d08:	280d      	cmp	r0, #13
    8d0a:	d004      	beq.n	8d16 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x23a>
    8d0c:	2000      	movs	r0, #0
    8d0e:	9008      	str	r0, [sp, #32]
    8d10:	980d      	ldr	r0, [sp, #52]	; 0x34
    8d12:	b110      	cbz	r0, 8d1a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x23e>
    8d14:	e02e      	b.n	8d74 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x298>
    8d16:	2001      	movs	r0, #1
    8d18:	e7f9      	b.n	8d0e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x232>
    8d1a:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
    8d1e:	2803      	cmp	r0, #3
    8d20:	d128      	bne.n	8d74 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x298>
    8d22:	9808      	ldr	r0, [sp, #32]
    8d24:	b330      	cbz	r0, 8d74 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x298>
    8d26:	f8b4 0274 	ldrh.w	r0, [r4, #628]	; 0x274
    8d2a:	42b8      	cmp	r0, r7
    8d2c:	d122      	bne.n	8d74 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x298>
    8d2e:	f8d4 020c 	ldr.w	r0, [r4, #524]	; 0x20c
    8d32:	f8c4 01f8 	str.w	r0, [r4, #504]	; 0x1f8
    8d36:	6920      	ldr	r0, [r4, #16]
    8d38:	f8c4 01fc 	str.w	r0, [r4, #508]	; 0x1fc
    8d3c:	f8b4 024a 	ldrh.w	r0, [r4, #586]	; 0x24a
    8d40:	f8b4 11de 	ldrh.w	r1, [r4, #478]	; 0x1de
    8d44:	4408      	add	r0, r1
    8d46:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    8d4a:	4620      	mov	r0, r4
    8d4c:	f007 fccb 	bl	106e6 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>
    8d50:	f8d4 0278 	ldr.w	r0, [r4, #632]	; 0x278
    8d54:	6260      	str	r0, [r4, #36]	; 0x24
    8d56:	f8b4 0276 	ldrh.w	r0, [r4, #630]	; 0x276
    8d5a:	8420      	strh	r0, [r4, #32]
    8d5c:	f8d4 027c 	ldr.w	r0, [r4, #636]	; 0x27c
    8d60:	6120      	str	r0, [r4, #16]
    8d62:	f8b4 0280 	ldrh.w	r0, [r4, #640]	; 0x280
    8d66:	8320      	strh	r0, [r4, #24]
    8d68:	f8b4 0282 	ldrh.w	r0, [r4, #642]	; 0x282
    8d6c:	8360      	strh	r0, [r4, #26]
    8d6e:	2002      	movs	r0, #2
    8d70:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
    8d74:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    8d78:	f504 7508 	add.w	r5, r4, #544	; 0x220
    8d7c:	1a38      	subs	r0, r7, r0
    8d7e:	fa0f fa80 	sxth.w	sl, r0
    8d82:	f8b4 0248 	ldrh.w	r0, [r4, #584]	; 0x248
    8d86:	1a38      	subs	r0, r7, r0
    8d88:	fa0f f880 	sxth.w	r8, r0
    8d8c:	f1b8 0f00 	cmp.w	r8, #0
    8d90:	da08      	bge.n	8da4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2c8>
    8d92:	f8d4 0238 	ldr.w	r0, [r4, #568]	; 0x238
    8d96:	f8d4 123c 	ldr.w	r1, [r4, #572]	; 0x23c
    8d9a:	46d0      	mov	r8, sl
    8d9c:	e9c4 0190 	strd	r0, r1, [r4, #576]	; 0x240
    8da0:	2001      	movs	r0, #1
    8da2:	9007      	str	r0, [sp, #28]
    8da4:	ab01      	add	r3, sp, #4
    8da6:	4652      	mov	r2, sl
    8da8:	4641      	mov	r1, r8
    8daa:	4620      	mov	r0, r4
    8dac:	f7ff fef6 	bl	8b9c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xc0>
    8db0:	9004      	str	r0, [sp, #16]
    8db2:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
    8db6:	f8df b334 	ldr.w	fp, [pc, #820]	; 90ec <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x610>
    8dba:	b140      	cbz	r0, 8dce <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2f2>
    8dbc:	2801      	cmp	r0, #1
    8dbe:	d07d      	beq.n	8ebc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3e0>
    8dc0:	2802      	cmp	r0, #2
    8dc2:	d051      	beq.n	8e68 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x38c>
    8dc4:	2803      	cmp	r0, #3
    8dc6:	d07a      	beq.n	8ebe <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3e2>
    8dc8:	f240 514b 	movw	r1, #1355	; 0x54b
    8dcc:	e18a      	b.n	90e4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x608>
    8dce:	2101      	movs	r1, #1
    8dd0:	2000      	movs	r0, #0
    8dd2:	f006 f8cd 	bl	ef70 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    8dd6:	4606      	mov	r6, r0
    8dd8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    8dda:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    8dde:	4430      	add	r0, r6
    8de0:	f004 fc13 	bl	d60a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8de4:	f8c4 0208 	str.w	r0, [r4, #520]	; 0x208
    8de8:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    8dec:	6920      	ldr	r0, [r4, #16]
    8dee:	f004 fc0c 	bl	d60a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8df2:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
    8df6:	a907      	add	r1, sp, #28
    8df8:	a806      	add	r0, sp, #24
    8dfa:	f003 f95b 	bl	c0b4 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>
    8dfe:	e9d4 0190 	ldrd	r0, r1, [r4, #576]	; 0x240
    8e02:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    8e06:	f7fa ffe5 	bl	3dd4 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>
    8e0a:	4682      	mov	sl, r0
    8e0c:	4620      	mov	r0, r4
    8e0e:	f007 f9a6 	bl	1015e <CONFIG_PM_SRAM_SIZE+0x15e>
    8e12:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    8e16:	f8d4 8250 	ldr.w	r8, [r4, #592]	; 0x250
    8e1a:	f003 fad9 	bl	c3d0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8e1e:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    8e22:	4401      	add	r1, r0
    8e24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    8e28:	fbb1 f0f0 	udiv	r0, r1, r0
    8e2c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8e2e:	f8d4 2208 	ldr.w	r2, [r4, #520]	; 0x208
    8e32:	4431      	add	r1, r6
    8e34:	1a08      	subs	r0, r1, r0
    8e36:	1a81      	subs	r1, r0, r2
    8e38:	4441      	add	r1, r8
    8e3a:	3920      	subs	r1, #32
    8e3c:	eba1 060a 	sub.w	r6, r1, sl
    8e40:	0050      	lsls	r0, r2, #1
    8e42:	8c21      	ldrh	r1, [r4, #32]
    8e44:	3060      	adds	r0, #96	; 0x60
    8e46:	4401      	add	r1, r0
    8e48:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    8e4c:	f007 f9f7 	bl	1023e <CONFIG_PM_SRAM_SIZE+0x23e>
    8e50:	3022      	adds	r0, #34	; 0x22
    8e52:	f8cb 0010 	str.w	r0, [fp, #16]
    8e56:	f8d4 0250 	ldr.w	r0, [r4, #592]	; 0x250
    8e5a:	1a30      	subs	r0, r6, r0
    8e5c:	f5b0 7fde 	cmp.w	r0, #444	; 0x1bc
    8e60:	d258      	bcs.n	8f14 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x438>
    8e62:	f240 41e4 	movw	r1, #1252	; 0x4e4
    8e66:	e13d      	b.n	90e4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x608>
    8e68:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8e6a:	f8d4 01fc 	ldr.w	r0, [r4, #508]	; 0x1fc
    8e6e:	4408      	add	r0, r1
    8e70:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    8e74:	f004 fbc9 	bl	d60a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8e78:	f8c4 0208 	str.w	r0, [r4, #520]	; 0x208
    8e7c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    8e80:	6920      	ldr	r0, [r4, #16]
    8e82:	f004 fbc2 	bl	d60a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8e86:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
    8e8a:	4620      	mov	r0, r4
    8e8c:	f007 f967 	bl	1015e <CONFIG_PM_SRAM_SIZE+0x15e>
    8e90:	f8b4 01de 	ldrh.w	r0, [r4, #478]	; 0x1de
    8e94:	bb10      	cbnz	r0, 8edc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x400>
    8e96:	f1b9 0f00 	cmp.w	r9, #0
    8e9a:	d01f      	beq.n	8edc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x400>
    8e9c:	f894 806f 	ldrb.w	r8, [r4, #111]	; 0x6f
    8ea0:	4640      	mov	r0, r8
    8ea2:	f003 fa95 	bl	c3d0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8ea6:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    8eaa:	4401      	add	r1, r0
    8eac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    8eb0:	fbb1 f0f0 	udiv	r0, r1, r0
    8eb4:	f8d4 1208 	ldr.w	r1, [r4, #520]	; 0x208
    8eb8:	4408      	add	r0, r1
    8eba:	e001      	b.n	8ec0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3e4>
    8ebc:	e02b      	b.n	8f16 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x43a>
    8ebe:	e047      	b.n	8f50 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x474>
    8ec0:	6a62      	ldr	r2, [r4, #36]	; 0x24
    8ec2:	f8d4 11fc 	ldr.w	r1, [r4, #508]	; 0x1fc
    8ec6:	4411      	add	r1, r2
    8ec8:	1a0e      	subs	r6, r1, r0
    8eca:	4640      	mov	r0, r8
    8ecc:	f003 fa54 	bl	c378 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8ed0:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
    8ed4:	1a08      	subs	r0, r1, r0
    8ed6:	4406      	add	r6, r0
    8ed8:	3e20      	subs	r6, #32
    8eda:	e006      	b.n	8eea <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x40e>
    8edc:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8ede:	f8d4 01fc 	ldr.w	r0, [r4, #508]	; 0x1fc
    8ee2:	4408      	add	r0, r1
    8ee4:	f8d4 1208 	ldr.w	r1, [r4, #520]	; 0x208
    8ee8:	1a46      	subs	r6, r0, r1
    8eea:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
    8eee:	f8d4 11f8 	ldr.w	r1, [r4, #504]	; 0x1f8
    8ef2:	f8d4 0208 	ldr.w	r0, [r4, #520]	; 0x208
    8ef6:	fb01 0002 	mla	r0, r1, r2, r0
    8efa:	0040      	lsls	r0, r0, #1
    8efc:	8c21      	ldrh	r1, [r4, #32]
    8efe:	3060      	adds	r0, #96	; 0x60
    8f00:	4401      	add	r1, r0
    8f02:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    8f06:	f007 f99a 	bl	1023e <CONFIG_PM_SRAM_SIZE+0x23e>
    8f0a:	f8cb 0010 	str.w	r0, [fp, #16]
    8f0e:	2001      	movs	r0, #1
    8f10:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
    8f14:	e061      	b.n	8fda <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4fe>
    8f16:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
    8f1a:	6920      	ldr	r0, [r4, #16]
    8f1c:	f8b4 11de 	ldrh.w	r1, [r4, #478]	; 0x1de
    8f20:	1a86      	subs	r6, r0, r2
    8f22:	eb01 000a 	add.w	r0, r1, sl
    8f26:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
    8f2a:	f8d4 c1f8 	ldr.w	ip, [r4, #504]	; 0x1f8
    8f2e:	1a40      	subs	r0, r0, r1
    8f30:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
    8f34:	1e40      	subs	r0, r0, #1
    8f36:	fb0c 3101 	mla	r1, ip, r1, r3
    8f3a:	fb00 1002 	mla	r0, r0, r2, r1
    8f3e:	0040      	lsls	r0, r0, #1
    8f40:	8c21      	ldrh	r1, [r4, #32]
    8f42:	3060      	adds	r0, #96	; 0x60
    8f44:	4401      	add	r1, r0
    8f46:	fb06 f608 	mul.w	r6, r6, r8
    8f4a:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    8f4e:	e040      	b.n	8fd2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4f6>
    8f50:	6920      	ldr	r0, [r4, #16]
    8f52:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
    8f56:	fb00 f008 	mul.w	r0, r0, r8
    8f5a:	fb08 0611 	mls	r6, r8, r1, r0
    8f5e:	f894 0085 	ldrb.w	r0, [r4, #133]	; 0x85
    8f62:	2824      	cmp	r0, #36	; 0x24
    8f64:	d003      	beq.n	8f6e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x492>
    8f66:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
    8f6a:	2824      	cmp	r0, #36	; 0x24
    8f6c:	d109      	bne.n	8f82 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4a6>
    8f6e:	f8b4 0274 	ldrh.w	r0, [r4, #628]	; 0x274
    8f72:	1a38      	subs	r0, r7, r0
    8f74:	b200      	sxth	r0, r0
    8f76:	2800      	cmp	r0, #0
    8f78:	db03      	blt.n	8f82 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4a6>
    8f7a:	f894 0277 	ldrb.w	r0, [r4, #631]	; 0x277
    8f7e:	b100      	cbz	r0, 8f82 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4a6>
    8f80:	9005      	str	r0, [sp, #20]
    8f82:	9807      	ldr	r0, [sp, #28]
    8f84:	b1d8      	cbz	r0, 8fbe <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4e2>
    8f86:	f8b4 01de 	ldrh.w	r0, [r4, #478]	; 0x1de
    8f8a:	b9c0      	cbnz	r0, 8fbe <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4e2>
    8f8c:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    8f90:	2800      	cmp	r0, #0
    8f92:	d07d      	beq.n	9090 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5b4>
    8f94:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    8f98:	f003 fa1a 	bl	c3d0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8f9c:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    8fa0:	4401      	add	r1, r0
    8fa2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    8fa6:	fbb1 f0f0 	udiv	r0, r1, r0
    8faa:	1a36      	subs	r6, r6, r0
    8fac:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    8fb0:	f003 f9e2 	bl	c378 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8fb4:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
    8fb8:	1a08      	subs	r0, r1, r0
    8fba:	4406      	add	r6, r0
    8fbc:	3e20      	subs	r6, #32
    8fbe:	f8b4 11de 	ldrh.w	r1, [r4, #478]	; 0x1de
    8fc2:	eb01 000a 	add.w	r0, r1, sl
    8fc6:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
    8fca:	4348      	muls	r0, r1
    8fcc:	0041      	lsls	r1, r0, #1
    8fce:	3160      	adds	r1, #96	; 0x60
    8fd0:	9805      	ldr	r0, [sp, #20]
    8fd2:	f007 f934 	bl	1023e <CONFIG_PM_SRAM_SIZE+0x23e>
    8fd6:	f8cb 0010 	str.w	r0, [fp, #16]
    8fda:	9804      	ldr	r0, [sp, #16]
    8fdc:	f8db 2010 	ldr.w	r2, [fp, #16]
    8fe0:	1a31      	subs	r1, r6, r0
    8fe2:	f8d4 620c 	ldr.w	r6, [r4, #524]	; 0x20c
    8fe6:	6920      	ldr	r0, [r4, #16]
    8fe8:	1b80      	subs	r0, r0, r6
    8fea:	f2a0 2046 	subw	r0, r0, #582	; 0x246
    8fee:	f8cb 0014 	str.w	r0, [fp, #20]
    8ff2:	4282      	cmp	r2, r0
    8ff4:	d800      	bhi.n	8ff8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x51c>
    8ff6:	4610      	mov	r0, r2
    8ff8:	f8c4 01d8 	str.w	r0, [r4, #472]	; 0x1d8
    8ffc:	2600      	movs	r6, #0
    8ffe:	702e      	strb	r6, [r5, #0]
    9000:	2064      	movs	r0, #100	; 0x64
    9002:	8128      	strh	r0, [r5, #8]
    9004:	e9d4 2090 	ldrd	r2, r0, [r4, #576]	; 0x240
    9008:	1851      	adds	r1, r2, r1
    900a:	4170      	adcs	r0, r6
    900c:	e9c5 1004 	strd	r1, r0, [r5, #16]
    9010:	f104 0030 	add.w	r0, r4, #48	; 0x30
    9014:	f006 fc34 	bl	f880 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    9018:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
    901c:	4408      	add	r0, r1
    901e:	6068      	str	r0, [r5, #4]
    9020:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
    9024:	e9c4 0190 	strd	r0, r1, [r4, #576]	; 0x240
    9028:	f8a4 7248 	strh.w	r7, [r4, #584]	; 0x248
    902c:	72ae      	strb	r6, [r5, #10]
    902e:	f8b4 01c8 	ldrh.w	r0, [r4, #456]	; 0x1c8
    9032:	1bc0      	subs	r0, r0, r7
    9034:	b200      	sxth	r0, r0
    9036:	2800      	cmp	r0, #0
    9038:	dd01      	ble.n	903e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x562>
    903a:	2002      	movs	r0, #2
    903c:	72a8      	strb	r0, [r5, #10]
    903e:	9808      	ldr	r0, [sp, #32]
    9040:	b338      	cbz	r0, 9092 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5b6>
    9042:	f1b9 0f00 	cmp.w	r9, #0
    9046:	d01c      	beq.n	9082 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a6>
    9048:	f8b4 11f0 	ldrh.w	r1, [r4, #496]	; 0x1f0
    904c:	b3f1      	cbz	r1, 90cc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5f0>
    904e:	f8b4 01f2 	ldrh.w	r0, [r4, #498]	; 0x1f2
    9052:	bf00      	nop
    9054:	f8a4 01f2 	strh.w	r0, [r4, #498]	; 0x1f2
    9058:	f894 21f4 	ldrb.w	r2, [r4, #500]	; 0x1f4
    905c:	1c40      	adds	r0, r0, #1
    905e:	4342      	muls	r2, r0
    9060:	428a      	cmp	r2, r1
    9062:	d20e      	bcs.n	9082 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a6>
    9064:	7aa8      	ldrb	r0, [r5, #10]
    9066:	b160      	cbz	r0, 9082 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a6>
    9068:	72ae      	strb	r6, [r5, #10]
    906a:	f8b4 01f2 	ldrh.w	r0, [r4, #498]	; 0x1f2
    906e:	1c40      	adds	r0, r0, #1
    9070:	f8a4 01f2 	strh.w	r0, [r4, #498]	; 0x1f2
    9074:	f7fe fce4 	bl	7a40 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
    9078:	f000 0007 	and.w	r0, r0, #7
    907c:	1c40      	adds	r0, r0, #1
    907e:	f884 01f4 	strb.w	r0, [r4, #500]	; 0x1f4
    9082:	f894 024c 	ldrb.w	r0, [r4, #588]	; 0x24c
    9086:	4629      	mov	r1, r5
    9088:	f007 f8eb 	bl	10262 <CONFIG_PM_SRAM_SIZE+0x262>
    908c:	b340      	cbz	r0, 90e0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x604>
    908e:	e001      	b.n	9094 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5b8>
    9090:	e009      	b.n	90a6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ca>
    9092:	e00b      	b.n	90ac <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5d0>
    9094:	980d      	ldr	r0, [sp, #52]	; 0x34
    9096:	f080 0001 	eor.w	r0, r0, #1
    909a:	f884 0218 	strb.w	r0, [r4, #536]	; 0x218
    909e:	2000      	movs	r0, #0
    90a0:	b00f      	add	sp, #60	; 0x3c
    90a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    90a6:	f240 5136 	movw	r1, #1334	; 0x536
    90aa:	e01b      	b.n	90e4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x608>
    90ac:	f1b9 0f00 	cmp.w	r9, #0
    90b0:	d1ca      	bne.n	9048 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x56c>
    90b2:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
    90b6:	2800      	cmp	r0, #0
    90b8:	d0e3      	beq.n	9082 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a6>
    90ba:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
    90be:	6920      	ldr	r0, [r4, #16]
    90c0:	1a41      	subs	r1, r0, r1
    90c2:	4628      	mov	r0, r5
    90c4:	f005 ff66 	bl	ef94 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    90c8:	0400      	lsls	r0, r0, #16
    90ca:	e000      	b.n	90ce <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5f2>
    90cc:	e006      	b.n	90dc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x600>
    90ce:	0c00      	lsrs	r0, r0, #16
    90d0:	d0d7      	beq.n	9082 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a6>
    90d2:	9918      	ldr	r1, [sp, #96]	; 0x60
    90d4:	b101      	cbz	r1, 90d8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5fc>
    90d6:	8008      	strh	r0, [r1, #0]
    90d8:	2001      	movs	r0, #1
    90da:	e7e1      	b.n	90a0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5c4>
    90dc:	2000      	movs	r0, #0
    90de:	e7b9      	b.n	9054 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x578>
    90e0:	f240 5194 	movw	r1, #1428	; 0x594
    90e4:	2030      	movs	r0, #48	; 0x30
    90e6:	f7fc fa3b 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    90ea:	0000      	.short	0x0000
    90ec:	2000014c 	.word	0x2000014c
    90f0:	b570      	push	{r4, r5, r6, lr}
    90f2:	4604      	mov	r4, r0
    90f4:	f004 fa55 	bl	d5a2 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    90f8:	2864      	cmp	r0, #100	; 0x64
    90fa:	d901      	bls.n	9100 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x624>
    90fc:	4605      	mov	r5, r0
    90fe:	e000      	b.n	9102 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x626>
    9100:	2564      	movs	r5, #100	; 0x64
    9102:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    9106:	2128      	movs	r1, #40	; 0x28
    9108:	f006 ff99 	bl	1003e <CONFIG_PM_SRAM_SIZE+0x3e>
    910c:	4428      	add	r0, r5
    910e:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
    9112:	f500 7010 	add.w	r0, r0, #576	; 0x240
    9116:	180e      	adds	r6, r1, r0
    9118:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    911c:	2128      	movs	r1, #40	; 0x28
    911e:	f006 ff8e 	bl	1003e <CONFIG_PM_SRAM_SIZE+0x3e>
    9122:	f500 7229 	add.w	r2, r0, #676	; 0x2a4
    9126:	4620      	mov	r0, r4
    9128:	6b21      	ldr	r1, [r4, #48]	; 0x30
    912a:	f006 fb46 	bl	f7ba <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    912e:	4605      	mov	r5, r0
    9130:	4632      	mov	r2, r6
    9132:	4620      	mov	r0, r4
    9134:	6921      	ldr	r1, [r4, #16]
    9136:	f006 fb40 	bl	f7ba <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    913a:	4907      	ldr	r1, [pc, #28]	; (9158 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x67c>)
    913c:	4285      	cmp	r5, r0
    913e:	6088      	str	r0, [r1, #8]
    9140:	d200      	bcs.n	9144 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x668>
    9142:	4628      	mov	r0, r5
    9144:	6048      	str	r0, [r1, #4]
    9146:	f8d4 0224 	ldr.w	r0, [r4, #548]	; 0x224
    914a:	f2a0 1069 	subw	r0, r0, #361	; 0x169
    914e:	60c8      	str	r0, [r1, #12]
    9150:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9154:	f7fa bd72 	b.w	3c3c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    9158:	2000014c 	.word	0x2000014c

0000915c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>:
    915c:	4806      	ldr	r0, [pc, #24]	; (9178 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x1c>)
    915e:	4905      	ldr	r1, [pc, #20]	; (9174 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x18>)
    9160:	6501      	str	r1, [r0, #80]	; 0x50
    9162:	4906      	ldr	r1, [pc, #24]	; (917c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x20>)
    9164:	6541      	str	r1, [r0, #84]	; 0x54
    9166:	4807      	ldr	r0, [pc, #28]	; (9184 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x28>)
    9168:	4905      	ldr	r1, [pc, #20]	; (9180 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x24>)
    916a:	6501      	str	r1, [r0, #80]	; 0x50
    916c:	4906      	ldr	r1, [pc, #24]	; (9188 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x2c>)
    916e:	6541      	str	r1, [r0, #84]	; 0x54
    9170:	4770      	bx	lr
    9172:	0000      	.short	0x0000
    9174:	0000a57d 	.word	0x0000a57d
    9178:	2000017c 	.word	0x2000017c
    917c:	0000a661 	.word	0x0000a661
    9180:	0000ad1d 	.word	0x0000ad1d
    9184:	20000214 	.word	0x20000214
    9188:	0000ad4d 	.word	0x0000ad4d

0000918c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>:
    918c:	481e      	ldr	r0, [pc, #120]	; (9208 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x7c>)
    918e:	491d      	ldr	r1, [pc, #116]	; (9204 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x78>)
    9190:	6081      	str	r1, [r0, #8]
    9192:	491e      	ldr	r1, [pc, #120]	; (920c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x80>)
    9194:	6041      	str	r1, [r0, #4]
    9196:	491e      	ldr	r1, [pc, #120]	; (9210 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x84>)
    9198:	6001      	str	r1, [r0, #0]
    919a:	491e      	ldr	r1, [pc, #120]	; (9214 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x88>)
    919c:	6281      	str	r1, [r0, #40]	; 0x28
    919e:	491e      	ldr	r1, [pc, #120]	; (9218 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x8c>)
    91a0:	62c1      	str	r1, [r0, #44]	; 0x2c
    91a2:	491e      	ldr	r1, [pc, #120]	; (921c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x90>)
    91a4:	60c1      	str	r1, [r0, #12]
    91a6:	491e      	ldr	r1, [pc, #120]	; (9220 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x94>)
    91a8:	6181      	str	r1, [r0, #24]
    91aa:	491e      	ldr	r1, [pc, #120]	; (9224 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x98>)
    91ac:	6301      	str	r1, [r0, #48]	; 0x30
    91ae:	491e      	ldr	r1, [pc, #120]	; (9228 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x9c>)
    91b0:	6201      	str	r1, [r0, #32]
    91b2:	491e      	ldr	r1, [pc, #120]	; (922c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa0>)
    91b4:	64c1      	str	r1, [r0, #76]	; 0x4c
    91b6:	491e      	ldr	r1, [pc, #120]	; (9230 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa4>)
    91b8:	6481      	str	r1, [r0, #72]	; 0x48
    91ba:	491e      	ldr	r1, [pc, #120]	; (9234 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa8>)
    91bc:	6441      	str	r1, [r0, #68]	; 0x44
    91be:	491e      	ldr	r1, [pc, #120]	; (9238 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xac>)
    91c0:	6341      	str	r1, [r0, #52]	; 0x34
    91c2:	491e      	ldr	r1, [pc, #120]	; (923c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb0>)
    91c4:	61c1      	str	r1, [r0, #28]
    91c6:	491e      	ldr	r1, [pc, #120]	; (9240 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb4>)
    91c8:	6241      	str	r1, [r0, #36]	; 0x24
    91ca:	481f      	ldr	r0, [pc, #124]	; (9248 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xbc>)
    91cc:	491d      	ldr	r1, [pc, #116]	; (9244 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb8>)
    91ce:	6081      	str	r1, [r0, #8]
    91d0:	491e      	ldr	r1, [pc, #120]	; (924c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc0>)
    91d2:	61c1      	str	r1, [r0, #28]
    91d4:	491e      	ldr	r1, [pc, #120]	; (9250 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc4>)
    91d6:	6241      	str	r1, [r0, #36]	; 0x24
    91d8:	491e      	ldr	r1, [pc, #120]	; (9254 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc8>)
    91da:	62c1      	str	r1, [r0, #44]	; 0x2c
    91dc:	491e      	ldr	r1, [pc, #120]	; (9258 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xcc>)
    91de:	6101      	str	r1, [r0, #16]
    91e0:	491e      	ldr	r1, [pc, #120]	; (925c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd0>)
    91e2:	6141      	str	r1, [r0, #20]
    91e4:	491e      	ldr	r1, [pc, #120]	; (9260 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd4>)
    91e6:	6441      	str	r1, [r0, #68]	; 0x44
    91e8:	491e      	ldr	r1, [pc, #120]	; (9264 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd8>)
    91ea:	6341      	str	r1, [r0, #52]	; 0x34
    91ec:	491e      	ldr	r1, [pc, #120]	; (9268 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xdc>)
    91ee:	6181      	str	r1, [r0, #24]
    91f0:	491e      	ldr	r1, [pc, #120]	; (926c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe0>)
    91f2:	6301      	str	r1, [r0, #48]	; 0x30
    91f4:	491e      	ldr	r1, [pc, #120]	; (9270 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe4>)
    91f6:	6481      	str	r1, [r0, #72]	; 0x48
    91f8:	491e      	ldr	r1, [pc, #120]	; (9274 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe8>)
    91fa:	64c1      	str	r1, [r0, #76]	; 0x4c
    91fc:	491e      	ldr	r1, [pc, #120]	; (9278 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xec>)
    91fe:	6381      	str	r1, [r0, #56]	; 0x38
    9200:	4770      	bx	lr
    9202:	0000      	.short	0x0000
    9204:	0000aa49 	.word	0x0000aa49
    9208:	2000017c 	.word	0x2000017c
    920c:	0000a2a1 	.word	0x0000a2a1
    9210:	0000a305 	.word	0x0000a305
    9214:	0000a735 	.word	0x0000a735
    9218:	0000a779 	.word	0x0000a779
    921c:	0000a3b9 	.word	0x0000a3b9
    9220:	0000aa21 	.word	0x0000aa21
    9224:	0000ab59 	.word	0x0000ab59
    9228:	0000a471 	.word	0x0000a471
    922c:	0000a705 	.word	0x0000a705
    9230:	0000a6d9 	.word	0x0000a6d9
    9234:	0000a9c9 	.word	0x0000a9c9
    9238:	0000a9f9 	.word	0x0000a9f9
    923c:	0000aa81 	.word	0x0000aa81
    9240:	0000a4c5 	.word	0x0000a4c5
    9244:	0000af75 	.word	0x0000af75
    9248:	20000214 	.word	0x20000214
    924c:	0000af9d 	.word	0x0000af9d
    9250:	0000aced 	.word	0x0000aced
    9254:	0000adc5 	.word	0x0000adc5
    9258:	0000acc1 	.word	0x0000acc1
    925c:	0000aec9 	.word	0x0000aec9
    9260:	0000ae49 	.word	0x0000ae49
    9264:	0000ae75 	.word	0x0000ae75
    9268:	0000aeed 	.word	0x0000aeed
    926c:	0000aff9 	.word	0x0000aff9
    9270:	0000ad7d 	.word	0x0000ad7d
    9274:	0000adad 	.word	0x0000adad
    9278:	0000ae99 	.word	0x0000ae99

0000927c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>:
    927c:	4806      	ldr	r0, [pc, #24]	; (9298 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x1c>)
    927e:	4905      	ldr	r1, [pc, #20]	; (9294 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x18>)
    9280:	6581      	str	r1, [r0, #88]	; 0x58
    9282:	4906      	ldr	r1, [pc, #24]	; (929c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x20>)
    9284:	6601      	str	r1, [r0, #96]	; 0x60
    9286:	4807      	ldr	r0, [pc, #28]	; (92a4 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x28>)
    9288:	4905      	ldr	r1, [pc, #20]	; (92a0 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x24>)
    928a:	6581      	str	r1, [r0, #88]	; 0x58
    928c:	4906      	ldr	r1, [pc, #24]	; (92a8 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2c>)
    928e:	65c1      	str	r1, [r0, #92]	; 0x5c
    9290:	4770      	bx	lr
    9292:	0000      	.short	0x0000
    9294:	0000a799 	.word	0x0000a799
    9298:	2000017c 	.word	0x2000017c
    929c:	0000a879 	.word	0x0000a879
    92a0:	0000adf1 	.word	0x0000adf1
    92a4:	20000214 	.word	0x20000214
    92a8:	0000ae21 	.word	0x0000ae21

000092ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>:
    92ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    92ae:	4c7c      	ldr	r4, [pc, #496]	; (94a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f4>)
    92b0:	2101      	movs	r1, #1
    92b2:	f1a4 0610 	sub.w	r6, r4, #16
    92b6:	7021      	strb	r1, [r4, #0]
    92b8:	2500      	movs	r5, #0
    92ba:	6060      	str	r0, [r4, #4]
    92bc:	8075      	strh	r5, [r6, #2]
    92be:	7075      	strb	r5, [r6, #1]
    92c0:	7035      	strb	r5, [r6, #0]
    92c2:	f880 11d3 	strb.w	r1, [r0, #467]	; 0x1d3
    92c6:	8800      	ldrh	r0, [r0, #0]
    92c8:	f7fc fd88 	bl	5ddc <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    92cc:	b180      	cbz	r0, 92f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44>
    92ce:	6860      	ldr	r0, [r4, #4]
    92d0:	8800      	ldrh	r0, [r0, #0]
    92d2:	f7fc ffd7 	bl	6284 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    92d6:	6860      	ldr	r0, [r4, #4]
    92d8:	8800      	ldrh	r0, [r0, #0]
    92da:	f7fc ff7b 	bl	61d4 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    92de:	6860      	ldr	r0, [r4, #4]
    92e0:	f8b0 11ca 	ldrh.w	r1, [r0, #458]	; 0x1ca
    92e4:	b1c9      	cbz	r1, 931a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    92e6:	3078      	adds	r0, #120	; 0x78
    92e8:	f007 fa44 	bl	10774 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    92ec:	b118      	cbz	r0, 92f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4a>
    92ee:	e014      	b.n	931a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    92f0:	f640 3166 	movw	r1, #2918	; 0xb66
    92f4:	e06c      	b.n	93d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x124>
    92f6:	6860      	ldr	r0, [r4, #4]
    92f8:	f890 1118 	ldrb.w	r1, [r0, #280]	; 0x118
    92fc:	f88d 1000 	strb.w	r1, [sp]
    9300:	9900      	ldr	r1, [sp, #0]
    9302:	9100      	str	r1, [sp, #0]
    9304:	f89d 1000 	ldrb.w	r1, [sp]
    9308:	b139      	cbz	r1, 931a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    930a:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    930e:	2301      	movs	r3, #1
    9310:	4619      	mov	r1, r3
    9312:	3078      	adds	r0, #120	; 0x78
    9314:	f005 fd84 	bl	ee20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9318:	b180      	cbz	r0, 933c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x90>
    931a:	6860      	ldr	r0, [r4, #4]
    931c:	3078      	adds	r0, #120	; 0x78
    931e:	f007 fa29 	bl	10774 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    9322:	b128      	cbz	r0, 9330 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x84>
    9324:	6860      	ldr	r0, [r4, #4]
    9326:	f890 010c 	ldrb.w	r0, [r0, #268]	; 0x10c
    932a:	bf00      	nop
    932c:	f000 fbb2 	bl	9a94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e8>
    9330:	6860      	ldr	r0, [r4, #4]
    9332:	f890 11d5 	ldrb.w	r1, [r0, #469]	; 0x1d5
    9336:	b189      	cbz	r1, 935c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0>
    9338:	80b5      	strh	r5, [r6, #4]
    933a:	e01e      	b.n	937a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce>
    933c:	6860      	ldr	r0, [r4, #4]
    933e:	f8a0 50b8 	strh.w	r5, [r0, #184]	; 0xb8
    9342:	f890 1119 	ldrb.w	r1, [r0, #281]	; 0x119
    9346:	f880 110e 	strb.w	r1, [r0, #270]	; 0x10e
    934a:	2100      	movs	r1, #0
    934c:	2002      	movs	r0, #2
    934e:	f000 fe53 	bl	9ff8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    9352:	6860      	ldr	r0, [r4, #4]
    9354:	f880 51d2 	strb.w	r5, [r0, #466]	; 0x1d2
    9358:	2002      	movs	r0, #2
    935a:	e7e7      	b.n	932c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80>
    935c:	f890 11aa 	ldrb.w	r1, [r0, #426]	; 0x1aa
    9360:	f88d 1000 	strb.w	r1, [sp]
    9364:	9900      	ldr	r1, [sp, #0]
    9366:	9100      	str	r1, [sp, #0]
    9368:	f89d 1000 	ldrb.w	r1, [sp]
    936c:	b919      	cbnz	r1, 9376 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca>
    936e:	8d01      	ldrh	r1, [r0, #40]	; 0x28
    9370:	8b02      	ldrh	r2, [r0, #24]
    9372:	4291      	cmp	r1, r2
    9374:	d800      	bhi.n	9378 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcc>
    9376:	8b01      	ldrh	r1, [r0, #24]
    9378:	80b1      	strh	r1, [r6, #4]
    937a:	f8b0 11ce 	ldrh.w	r1, [r0, #462]	; 0x1ce
    937e:	1e49      	subs	r1, r1, #1
    9380:	b28f      	uxth	r7, r1
    9382:	f8b0 11d0 	ldrh.w	r1, [r0, #464]	; 0x1d0
    9386:	4439      	add	r1, r7
    9388:	f8a0 11d0 	strh.w	r1, [r0, #464]	; 0x1d0
    938c:	f830 1fb4 	ldrh.w	r1, [r0, #180]!
    9390:	4439      	add	r1, r7
    9392:	8001      	strh	r1, [r0, #0]
    9394:	f001 fe5e 	bl	b054 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1da8>
    9398:	b120      	cbz	r0, 93a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf8>
    939a:	6860      	ldr	r0, [r4, #4]
    939c:	f850 1fa8 	ldr.w	r1, [r0, #168]!
    93a0:	4439      	add	r1, r7
    93a2:	6001      	str	r1, [r0, #0]
    93a4:	6861      	ldr	r1, [r4, #4]
    93a6:	f8b1 01ca 	ldrh.w	r0, [r1, #458]	; 0x1ca
    93aa:	2801      	cmp	r0, #1
    93ac:	d802      	bhi.n	93b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x108>
    93ae:	1c40      	adds	r0, r0, #1
    93b0:	f8a1 01ca 	strh.w	r0, [r1, #458]	; 0x1ca
    93b4:	b10f      	cbz	r7, 93ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10e>
    93b6:	f881 51dc 	strb.w	r5, [r1, #476]	; 0x1dc
    93ba:	f881 51d2 	strb.w	r5, [r1, #466]	; 0x1d2
    93be:	f8b1 21ce 	ldrh.w	r2, [r1, #462]	; 0x1ce
    93c2:	f101 0078 	add.w	r0, r1, #120	; 0x78
    93c6:	f005 febf 	bl	f148 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    93ca:	b120      	cbz	r0, 93d6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12a>
    93cc:	f640 31ad 	movw	r1, #2989	; 0xbad
    93d0:	2031      	movs	r0, #49	; 0x31
    93d2:	f7fc f8c5 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    93d6:	6860      	ldr	r0, [r4, #4]
    93d8:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    93dc:	290b      	cmp	r1, #11
    93de:	d001      	beq.n	93e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x138>
    93e0:	290c      	cmp	r1, #12
    93e2:	d119      	bne.n	9418 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
    93e4:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
    93e8:	f8b0 3274 	ldrh.w	r3, [r0, #628]	; 0x274
    93ec:	1ad2      	subs	r2, r2, r3
    93ee:	b212      	sxth	r2, r2
    93f0:	2a00      	cmp	r2, #0
    93f2:	db11      	blt.n	9418 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
    93f4:	f8d0 1276 	ldr.w	r1, [r0, #630]	; 0x276
    93f8:	f8c0 108f 	str.w	r1, [r0, #143]	; 0x8f
    93fc:	f890 127a 	ldrb.w	r1, [r0, #634]	; 0x27a
    9400:	f880 1093 	strb.w	r1, [r0, #147]	; 0x93
    9404:	2103      	movs	r1, #3
    9406:	f7fd fedd 	bl	71c4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    940a:	6860      	ldr	r0, [r4, #4]
    940c:	f880 5086 	strb.w	r5, [r0, #134]	; 0x86
    9410:	21ff      	movs	r1, #255	; 0xff
    9412:	f880 10dc 	strb.w	r1, [r0, #220]	; 0xdc
    9416:	e026      	b.n	9466 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    9418:	2924      	cmp	r1, #36	; 0x24
    941a:	d111      	bne.n	9440 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    941c:	f8b0 107c 	ldrh.w	r1, [r0, #124]	; 0x7c
    9420:	f8b0 2274 	ldrh.w	r2, [r0, #628]	; 0x274
    9424:	1a89      	subs	r1, r1, r2
    9426:	b209      	sxth	r1, r1
    9428:	2900      	cmp	r1, #0
    942a:	db09      	blt.n	9440 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    942c:	f880 5086 	strb.w	r5, [r0, #134]	; 0x86
    9430:	f000 fe9c 	bl	a16c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xec0>
    9434:	2800      	cmp	r0, #0
    9436:	6860      	ldr	r0, [r4, #4]
    9438:	f880 5124 	strb.w	r5, [r0, #292]	; 0x124
    943c:	d029      	beq.n	9492 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e6>
    943e:	e012      	b.n	9466 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    9440:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9444:	2924      	cmp	r1, #36	; 0x24
    9446:	d001      	beq.n	944c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a0>
    9448:	2925      	cmp	r1, #37	; 0x25
    944a:	d10c      	bne.n	9466 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    944c:	f8b0 107c 	ldrh.w	r1, [r0, #124]	; 0x7c
    9450:	f8b0 2274 	ldrh.w	r2, [r0, #628]	; 0x274
    9454:	1a89      	subs	r1, r1, r2
    9456:	b209      	sxth	r1, r1
    9458:	2900      	cmp	r1, #0
    945a:	db04      	blt.n	9466 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    945c:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    9460:	f000 fe84 	bl	a16c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xec0>
    9464:	b1a8      	cbz	r0, 9492 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e6>
    9466:	480f      	ldr	r0, [pc, #60]	; (94a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f8>)
    9468:	9000      	str	r0, [sp, #0]
    946a:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
    946e:	4b0e      	ldr	r3, [pc, #56]	; (94a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fc>)
    9470:	4a0e      	ldr	r2, [pc, #56]	; (94ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x200>)
    9472:	f7fc ff9f 	bl	63b4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    9476:	6860      	ldr	r0, [r4, #4]
    9478:	2301      	movs	r3, #1
    947a:	2105      	movs	r1, #5
    947c:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9480:	3078      	adds	r0, #120	; 0x78
    9482:	f005 fccd 	bl	ee20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9486:	2800      	cmp	r0, #0
    9488:	d009      	beq.n	949e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f2>
    948a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    948e:	f7fc bf8b 	b.w	63a8 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    9492:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    9496:	2100      	movs	r1, #0
    9498:	4608      	mov	r0, r1
    949a:	f000 bbd9 	b.w	9c50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9a4>
    949e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    94a0:	20000174 	.word	0x20000174
    94a4:	00009c51 	.word	0x00009c51
    94a8:	00009771 	.word	0x00009771
    94ac:	0000a0b9 	.word	0x0000a0b9
    94b0:	4804      	ldr	r0, [pc, #16]	; (94c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x218>)
    94b2:	2100      	movs	r1, #0
    94b4:	6840      	ldr	r0, [r0, #4]
    94b6:	f820 1fc0 	strh.w	r1, [r0, #192]!
    94ba:	7881      	ldrb	r1, [r0, #2]
    94bc:	1c49      	adds	r1, r1, #1
    94be:	7081      	strb	r1, [r0, #2]
    94c0:	4770      	bx	lr
    94c2:	0000      	.short	0x0000
    94c4:	20000174 	.word	0x20000174
    94c8:	4807      	ldr	r0, [pc, #28]	; (94e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23c>)
    94ca:	b510      	push	{r4, lr}
    94cc:	6841      	ldr	r1, [r0, #4]
    94ce:	f811 0fc2 	ldrb.w	r0, [r1, #194]!
    94d2:	1e40      	subs	r0, r0, #1
    94d4:	b240      	sxtb	r0, r0
    94d6:	7008      	strb	r0, [r1, #0]
    94d8:	2800      	cmp	r0, #0
    94da:	da04      	bge.n	94e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23a>
    94dc:	f240 118d 	movw	r1, #397	; 0x18d
    94e0:	2031      	movs	r0, #49	; 0x31
    94e2:	f7fc f83d 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    94e6:	bd10      	pop	{r4, pc}
    94e8:	20000174 	.word	0x20000174
    94ec:	491d      	ldr	r1, [pc, #116]	; (9564 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b8>)
    94ee:	b508      	push	{r3, lr}
    94f0:	6849      	ldr	r1, [r1, #4]
    94f2:	f891 2086 	ldrb.w	r2, [r1, #134]	; 0x86
    94f6:	b1b8      	cbz	r0, 9528 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x27c>
    94f8:	2a10      	cmp	r2, #16
    94fa:	d006      	beq.n	950a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x25e>
    94fc:	2a14      	cmp	r2, #20
    94fe:	d007      	beq.n	9510 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
    9500:	2a15      	cmp	r2, #21
    9502:	d008      	beq.n	9516 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x26a>
    9504:	2a1b      	cmp	r2, #27
    9506:	d127      	bne.n	9558 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ac>
    9508:	e008      	b.n	951c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x270>
    950a:	2101      	movs	r1, #1
    950c:	200b      	movs	r0, #11
    950e:	e007      	b.n	9520 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x274>
    9510:	f001 fb88 	bl	ac24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    9514:	e006      	b.n	9524 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x278>
    9516:	f000 fd8d 	bl	a034 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd88>
    951a:	e003      	b.n	9524 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x278>
    951c:	2101      	movs	r1, #1
    951e:	2006      	movs	r0, #6
    9520:	f000 fd6a 	bl	9ff8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    9524:	2001      	movs	r0, #1
    9526:	bd08      	pop	{r3, pc}
    9528:	2a21      	cmp	r2, #33	; 0x21
    952a:	d004      	beq.n	9536 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x28a>
    952c:	2a28      	cmp	r2, #40	; 0x28
    952e:	d113      	bne.n	9558 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ac>
    9530:	2101      	movs	r1, #1
    9532:	2011      	movs	r0, #17
    9534:	e7f4      	b.n	9520 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x274>
    9536:	f891 0124 	ldrb.w	r0, [r1, #292]	; 0x124
    953a:	2802      	cmp	r0, #2
    953c:	d00e      	beq.n	955c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b0>
    953e:	f891 0124 	ldrb.w	r0, [r1, #292]	; 0x124
    9542:	2801      	cmp	r0, #1
    9544:	d108      	bne.n	9558 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ac>
    9546:	f891 0125 	ldrb.w	r0, [r1, #293]	; 0x125
    954a:	f88d 0000 	strb.w	r0, [sp]
    954e:	9800      	ldr	r0, [sp, #0]
    9550:	9000      	str	r0, [sp, #0]
    9552:	f89d 0000 	ldrb.w	r0, [sp]
    9556:	b108      	cbz	r0, 955c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b0>
    9558:	2000      	movs	r0, #0
    955a:	bd08      	pop	{r3, pc}
    955c:	2101      	movs	r1, #1
    955e:	2017      	movs	r0, #23
    9560:	e7de      	b.n	9520 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x274>
    9562:	0000      	.short	0x0000
    9564:	20000174 	.word	0x20000174
    9568:	b538      	push	{r3, r4, r5, lr}
    956a:	2800      	cmp	r0, #0
    956c:	d16d      	bne.n	964a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x39e>
    956e:	4c38      	ldr	r4, [pc, #224]	; (9650 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a4>)
    9570:	6860      	ldr	r0, [r4, #4]
    9572:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    9576:	07ca      	lsls	r2, r1, #31
    9578:	d002      	beq.n	9580 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2d4>
    957a:	2101      	movs	r1, #1
    957c:	2009      	movs	r0, #9
    957e:	e05d      	b.n	963c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x390>
    9580:	078a      	lsls	r2, r1, #30
    9582:	d50a      	bpl.n	959a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ee>
    9584:	2101      	movs	r1, #1
    9586:	200c      	movs	r0, #12
    9588:	f000 fd36 	bl	9ff8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    958c:	6860      	ldr	r0, [r4, #4]
    958e:	f810 1fc5 	ldrb.w	r1, [r0, #197]!
    9592:	f041 0101 	orr.w	r1, r1, #1
    9596:	7001      	strb	r1, [r0, #0]
    9598:	e052      	b.n	9640 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x394>
    959a:	074a      	lsls	r2, r1, #29
    959c:	d502      	bpl.n	95a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2f8>
    959e:	2101      	movs	r1, #1
    95a0:	2013      	movs	r0, #19
    95a2:	e04b      	b.n	963c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x390>
    95a4:	070a      	lsls	r2, r1, #28
    95a6:	d506      	bpl.n	95b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x30a>
    95a8:	f890 1108 	ldrb.w	r1, [r0, #264]	; 0x108
    95ac:	f880 110e 	strb.w	r1, [r0, #270]	; 0x10e
    95b0:	2101      	movs	r1, #1
    95b2:	2007      	movs	r0, #7
    95b4:	e042      	b.n	963c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x390>
    95b6:	f011 0f30 	tst.w	r1, #48	; 0x30
    95ba:	d046      	beq.n	964a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x39e>
    95bc:	f890 111b 	ldrb.w	r1, [r0, #283]	; 0x11b
    95c0:	f88d 1000 	strb.w	r1, [sp]
    95c4:	9900      	ldr	r1, [sp, #0]
    95c6:	9100      	str	r1, [sp, #0]
    95c8:	f89d 1000 	ldrb.w	r1, [sp]
    95cc:	bbd1      	cbnz	r1, 9644 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x398>
    95ce:	f890 111a 	ldrb.w	r1, [r0, #282]	; 0x11a
    95d2:	2500      	movs	r5, #0
    95d4:	f88d 1000 	strb.w	r1, [sp]
    95d8:	9900      	ldr	r1, [sp, #0]
    95da:	9100      	str	r1, [sp, #0]
    95dc:	f89d 1000 	ldrb.w	r1, [sp]
    95e0:	b1c1      	cbz	r1, 9614 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x368>
    95e2:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    95e6:	2924      	cmp	r1, #36	; 0x24
    95e8:	d02d      	beq.n	9646 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x39a>
    95ea:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    95ee:	2924      	cmp	r1, #36	; 0x24
    95f0:	d029      	beq.n	9646 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x39a>
    95f2:	2300      	movs	r3, #0
    95f4:	f200 2276 	addw	r2, r0, #630	; 0x276
    95f8:	f500 718d 	add.w	r1, r0, #282	; 0x11a
    95fc:	f006 f8cf 	bl	f79e <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    9600:	6860      	ldr	r0, [r4, #4]
    9602:	f810 1f87 	ldrb.w	r1, [r0, #135]!
    9606:	f001 01df 	and.w	r1, r1, #223	; 0xdf
    960a:	f041 0110 	orr.w	r1, r1, #16
    960e:	7001      	strb	r1, [r0, #0]
    9610:	f880 5093 	strb.w	r5, [r0, #147]	; 0x93
    9614:	6860      	ldr	r0, [r4, #4]
    9616:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    961a:	06c9      	lsls	r1, r1, #27
    961c:	d515      	bpl.n	964a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x39e>
    961e:	f006 f8d9 	bl	f7d4 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    9622:	f000 f92b 	bl	987c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d0>
    9626:	6861      	ldr	r1, [r4, #4]
    9628:	f101 0030 	add.w	r0, r1, #48	; 0x30
    962c:	8bc2      	ldrh	r2, [r0, #30]
    962e:	f8a1 210e 	strh.w	r2, [r1, #270]	; 0x10e
    9632:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    9634:	f8a1 0110 	strh.w	r0, [r1, #272]	; 0x110
    9638:	2101      	movs	r1, #1
    963a:	2015      	movs	r0, #21
    963c:	f000 fcdc 	bl	9ff8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    9640:	2001      	movs	r0, #1
    9642:	bd38      	pop	{r3, r4, r5, pc}
    9644:	e001      	b.n	964a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x39e>
    9646:	2301      	movs	r3, #1
    9648:	e7d4      	b.n	95f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x348>
    964a:	2000      	movs	r0, #0
    964c:	e7f9      	b.n	9642 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x396>
    964e:	0000      	.short	0x0000
    9650:	20000174 	.word	0x20000174
    9654:	b570      	push	{r4, r5, r6, lr}
    9656:	460d      	mov	r5, r1
    9658:	4606      	mov	r6, r0
    965a:	f005 fe66 	bl	f32a <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    965e:	4604      	mov	r4, r0
    9660:	4630      	mov	r0, r6
    9662:	f005 fe6e 	bl	f342 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    9666:	4629      	mov	r1, r5
    9668:	f000 f81e 	bl	96a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3fc>
    966c:	b1b8      	cbz	r0, 969e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3f2>
    966e:	4620      	mov	r0, r4
    9670:	f005 fc70 	bl	ef54 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    9674:	0001      	movs	r1, r0
    9676:	d00d      	beq.n	9694 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3e8>
    9678:	480a      	ldr	r0, [pc, #40]	; (96a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3f8>)
    967a:	6840      	ldr	r0, [r0, #4]
    967c:	f890 206f 	ldrb.w	r2, [r0, #111]	; 0x6f
    9680:	428a      	cmp	r2, r1
    9682:	d007      	beq.n	9694 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3e8>
    9684:	f890 1124 	ldrb.w	r1, [r0, #292]	; 0x124
    9688:	2901      	cmp	r1, #1
    968a:	d005      	beq.n	9698 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3ec>
    968c:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    9690:	4220      	tst	r0, r4
    9692:	d004      	beq.n	969e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3f2>
    9694:	2001      	movs	r0, #1
    9696:	bd70      	pop	{r4, r5, r6, pc}
    9698:	f890 0127 	ldrb.w	r0, [r0, #295]	; 0x127
    969c:	e7f8      	b.n	9690 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3e4>
    969e:	2000      	movs	r0, #0
    96a0:	bd70      	pop	{r4, r5, r6, pc}
    96a2:	0000      	.short	0x0000
    96a4:	20000174 	.word	0x20000174
    96a8:	b570      	push	{r4, r5, r6, lr}
    96aa:	460d      	mov	r5, r1
    96ac:	4604      	mov	r4, r0
    96ae:	f005 fc51 	bl	ef54 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    96b2:	b350      	cbz	r0, 970a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45e>
    96b4:	4916      	ldr	r1, [pc, #88]	; (9710 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x464>)
    96b6:	6849      	ldr	r1, [r1, #4]
    96b8:	f891 206e 	ldrb.w	r2, [r1, #110]	; 0x6e
    96bc:	4282      	cmp	r2, r0
    96be:	d024      	beq.n	970a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45e>
    96c0:	f891 3124 	ldrb.w	r3, [r1, #292]	; 0x124
    96c4:	2b01      	cmp	r3, #1
    96c6:	d005      	beq.n	96d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x428>
    96c8:	f891 306a 	ldrb.w	r3, [r1, #106]	; 0x6a
    96cc:	4223      	tst	r3, r4
    96ce:	d013      	beq.n	96f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44c>
    96d0:	b11d      	cbz	r5, 96da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42e>
    96d2:	e01a      	b.n	970a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45e>
    96d4:	f891 3126 	ldrb.w	r3, [r1, #294]	; 0x126
    96d8:	e7f8      	b.n	96cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x420>
    96da:	f891 1067 	ldrb.w	r1, [r1, #103]	; 0x67
    96de:	4221      	tst	r1, r4
    96e0:	d113      	bne.n	970a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45e>
    96e2:	b15a      	cbz	r2, 96fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x450>
    96e4:	2a04      	cmp	r2, #4
    96e6:	d00e      	beq.n	9706 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45a>
    96e8:	2804      	cmp	r0, #4
    96ea:	d00c      	beq.n	9706 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45a>
    96ec:	2a08      	cmp	r2, #8
    96ee:	d00a      	beq.n	9706 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45a>
    96f0:	2808      	cmp	r0, #8
    96f2:	d008      	beq.n	9706 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45a>
    96f4:	4282      	cmp	r2, r0
    96f6:	d908      	bls.n	970a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45e>
    96f8:	2000      	movs	r0, #0
    96fa:	bd70      	pop	{r4, r5, r6, pc}
    96fc:	f44f 71c5 	mov.w	r1, #394	; 0x18a
    9700:	2006      	movs	r0, #6
    9702:	f7fb ff2d 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9706:	4282      	cmp	r2, r0
    9708:	d3f6      	bcc.n	96f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44c>
    970a:	2001      	movs	r0, #1
    970c:	bd70      	pop	{r4, r5, r6, pc}
    970e:	0000      	.short	0x0000
    9710:	20000174 	.word	0x20000174
    9714:	b510      	push	{r4, lr}
    9716:	4c10      	ldr	r4, [pc, #64]	; (9758 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4ac>)
    9718:	2301      	movs	r3, #1
    971a:	2100      	movs	r1, #0
    971c:	6860      	ldr	r0, [r4, #4]
    971e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9722:	3078      	adds	r0, #120	; 0x78
    9724:	f005 fb7c 	bl	ee20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9728:	b140      	cbz	r0, 973c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x490>
    972a:	6860      	ldr	r0, [r4, #4]
    972c:	2301      	movs	r3, #1
    972e:	2104      	movs	r1, #4
    9730:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9734:	3078      	adds	r0, #120	; 0x78
    9736:	f005 fb73 	bl	ee20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    973a:	b108      	cbz	r0, 9740 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x494>
    973c:	2000      	movs	r0, #0
    973e:	bd10      	pop	{r4, pc}
    9740:	6860      	ldr	r0, [r4, #4]
    9742:	f890 00b2 	ldrb.w	r0, [r0, #178]	; 0xb2
    9746:	2800      	cmp	r0, #0
    9748:	d0f9      	beq.n	973e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x492>
    974a:	2100      	movs	r1, #0
    974c:	2012      	movs	r0, #18
    974e:	f000 fc53 	bl	9ff8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    9752:	2001      	movs	r0, #1
    9754:	bd10      	pop	{r4, pc}
    9756:	0000      	.short	0x0000
    9758:	20000174 	.word	0x20000174
    975c:	4903      	ldr	r1, [pc, #12]	; (976c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4c0>)
    975e:	2000      	movs	r0, #0
    9760:	6849      	ldr	r1, [r1, #4]
    9762:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    9766:	f881 00be 	strb.w	r0, [r1, #190]	; 0xbe
    976a:	4770      	bx	lr
    976c:	20000174 	.word	0x20000174
    9770:	490d      	ldr	r1, [pc, #52]	; (97a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4fc>)
    9772:	4602      	mov	r2, r0
    9774:	7848      	ldrb	r0, [r1, #1]
    9776:	b9a0      	cbnz	r0, 97a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4f6>
    9778:	f101 0010 	add.w	r0, r1, #16
    977c:	6840      	ldr	r0, [r0, #4]
    977e:	b142      	cbz	r2, 9792 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4e6>
    9780:	7889      	ldrb	r1, [r1, #2]
    9782:	0709      	lsls	r1, r1, #28
    9784:	d503      	bpl.n	978e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4e2>
    9786:	f890 0088 	ldrb.w	r0, [r0, #136]	; 0x88
    978a:	2808      	cmp	r0, #8
    978c:	d009      	beq.n	97a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4f6>
    978e:	2001      	movs	r0, #1
    9790:	4770      	bx	lr
    9792:	f100 0130 	add.w	r1, r0, #48	; 0x30
    9796:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    9798:	8f01      	ldrh	r1, [r0, #56]	; 0x38
    979a:	428a      	cmp	r2, r1
    979c:	d801      	bhi.n	97a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4f6>
    979e:	f7ff b93d 	b.w	8a1c <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>
    97a2:	2000      	movs	r0, #0
    97a4:	4770      	bx	lr
    97a6:	0000      	.short	0x0000
    97a8:	20000164 	.word	0x20000164
    97ac:	b538      	push	{r3, r4, r5, lr}
    97ae:	4c32      	ldr	r4, [pc, #200]	; (9878 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>)
    97b0:	4605      	mov	r5, r0
    97b2:	6860      	ldr	r0, [r4, #4]
    97b4:	3078      	adds	r0, #120	; 0x78
    97b6:	f006 ffdd 	bl	10774 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    97ba:	2800      	cmp	r0, #0
    97bc:	d15b      	bne.n	9876 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ca>
    97be:	2d00      	cmp	r5, #0
    97c0:	d159      	bne.n	9876 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ca>
    97c2:	6860      	ldr	r0, [r4, #4]
    97c4:	2301      	movs	r3, #1
    97c6:	4619      	mov	r1, r3
    97c8:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    97cc:	3078      	adds	r0, #120	; 0x78
    97ce:	f005 fb27 	bl	ee20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    97d2:	2800      	cmp	r0, #0
    97d4:	d14f      	bne.n	9876 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ca>
    97d6:	6860      	ldr	r0, [r4, #4]
    97d8:	f890 1118 	ldrb.w	r1, [r0, #280]	; 0x118
    97dc:	f88d 1000 	strb.w	r1, [sp]
    97e0:	9900      	ldr	r1, [sp, #0]
    97e2:	9100      	str	r1, [sp, #0]
    97e4:	f89d 2000 	ldrb.w	r2, [sp]
    97e8:	2100      	movs	r1, #0
    97ea:	b142      	cbz	r2, 97fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x552>
    97ec:	f8a0 10b8 	strh.w	r1, [r0, #184]	; 0xb8
    97f0:	f890 1119 	ldrb.w	r1, [r0, #281]	; 0x119
    97f4:	f880 110e 	strb.w	r1, [r0, #270]	; 0x10e
    97f8:	2100      	movs	r1, #0
    97fa:	2002      	movs	r0, #2
    97fc:	e030      	b.n	9860 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b4>
    97fe:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9802:	2301      	movs	r3, #1
    9804:	2104      	movs	r1, #4
    9806:	3078      	adds	r0, #120	; 0x78
    9808:	f005 fb0a 	bl	ee20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    980c:	4605      	mov	r5, r0
    980e:	f7ff feab 	bl	9568 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2bc>
    9812:	2800      	cmp	r0, #0
    9814:	d12f      	bne.n	9876 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ca>
    9816:	4628      	mov	r0, r5
    9818:	f7ff fe68 	bl	94ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x240>
    981c:	2800      	cmp	r0, #0
    981e:	d12a      	bne.n	9876 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ca>
    9820:	f7ff ff78 	bl	9714 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x468>
    9824:	2800      	cmp	r0, #0
    9826:	d126      	bne.n	9876 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ca>
    9828:	6860      	ldr	r0, [r4, #4]
    982a:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    982e:	290a      	cmp	r1, #10
    9830:	d01a      	beq.n	9868 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5bc>
    9832:	2d00      	cmp	r5, #0
    9834:	d11f      	bne.n	9876 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ca>
    9836:	f000 fb2b 	bl	9e90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbe4>
    983a:	2800      	cmp	r0, #0
    983c:	d11b      	bne.n	9876 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ca>
    983e:	6860      	ldr	r0, [r4, #4]
    9840:	2301      	movs	r3, #1
    9842:	2100      	movs	r1, #0
    9844:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9848:	3078      	adds	r0, #120	; 0x78
    984a:	f005 fae9 	bl	ee20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    984e:	2800      	cmp	r0, #0
    9850:	d011      	beq.n	9876 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ca>
    9852:	6860      	ldr	r0, [r4, #4]
    9854:	f890 026c 	ldrb.w	r0, [r0, #620]	; 0x26c
    9858:	2800      	cmp	r0, #0
    985a:	d00c      	beq.n	9876 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ca>
    985c:	2100      	movs	r1, #0
    985e:	20ff      	movs	r0, #255	; 0xff
    9860:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    9864:	f000 bbc8 	b.w	9ff8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    9868:	f890 1109 	ldrb.w	r1, [r0, #265]	; 0x109
    986c:	f880 110e 	strb.w	r1, [r0, #270]	; 0x10e
    9870:	2100      	movs	r1, #0
    9872:	2007      	movs	r0, #7
    9874:	e7f4      	b.n	9860 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b4>
    9876:	bd38      	pop	{r3, r4, r5, pc}
    9878:	20000174 	.word	0x20000174
    987c:	480a      	ldr	r0, [pc, #40]	; (98a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5fc>)
    987e:	b510      	push	{r4, lr}
    9880:	6843      	ldr	r3, [r0, #4]
    9882:	f893 0064 	ldrb.w	r0, [r3, #100]	; 0x64
    9886:	2801      	cmp	r0, #1
    9888:	d00a      	beq.n	98a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5f4>
    988a:	f503 72a2 	add.w	r2, r3, #324	; 0x144
    988e:	f103 0130 	add.w	r1, r3, #48	; 0x30
    9892:	8818      	ldrh	r0, [r3, #0]
    9894:	f005 ff5b 	bl	f74e <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    9898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    989c:	f7fd bf5a 	b.w	7754 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    98a0:	2002      	movs	r0, #2
    98a2:	f883 0064 	strb.w	r0, [r3, #100]	; 0x64
    98a6:	bd10      	pop	{r4, pc}
    98a8:	20000174 	.word	0x20000174
    98ac:	b570      	push	{r4, r5, r6, lr}
    98ae:	4c24      	ldr	r4, [pc, #144]	; (9940 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x694>)
    98b0:	0006      	movs	r6, r0
    98b2:	f104 0510 	add.w	r5, r4, #16
    98b6:	d12f      	bne.n	9918 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x66c>
    98b8:	f000 f8a2 	bl	9a00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x754>
    98bc:	f000 f844 	bl	9948 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x69c>
    98c0:	0006      	movs	r6, r0
    98c2:	d129      	bne.n	9918 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x66c>
    98c4:	8860      	ldrh	r0, [r4, #2]
    98c6:	0741      	lsls	r1, r0, #29
    98c8:	d506      	bpl.n	98d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x62c>
    98ca:	6869      	ldr	r1, [r5, #4]
    98cc:	f891 1088 	ldrb.w	r1, [r1, #136]	; 0x88
    98d0:	2907      	cmp	r1, #7
    98d2:	d101      	bne.n	98d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x62c>
    98d4:	2101      	movs	r1, #1
    98d6:	7021      	strb	r1, [r4, #0]
    98d8:	0780      	lsls	r0, r0, #30
    98da:	d512      	bpl.n	9902 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x656>
    98dc:	68a0      	ldr	r0, [r4, #8]
    98de:	78c0      	ldrb	r0, [r0, #3]
    98e0:	2826      	cmp	r0, #38	; 0x26
    98e2:	d205      	bcs.n	98f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x644>
    98e4:	4917      	ldr	r1, [pc, #92]	; (9944 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x698>)
    98e6:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    98ea:	b109      	cbz	r1, 98f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x644>
    98ec:	4788      	blx	r1
    98ee:	e008      	b.n	9902 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x656>
    98f0:	28ff      	cmp	r0, #255	; 0xff
    98f2:	d004      	beq.n	98fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x652>
    98f4:	f240 71c9 	movw	r1, #1993	; 0x7c9
    98f8:	2031      	movs	r0, #49	; 0x31
    98fa:	f7fb fe31 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    98fe:	f001 f9d3 	bl	aca8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19fc>
    9902:	78a0      	ldrb	r0, [r4, #2]
    9904:	06c0      	lsls	r0, r0, #27
    9906:	d507      	bpl.n	9918 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x66c>
    9908:	6868      	ldr	r0, [r5, #4]
    990a:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    990e:	290b      	cmp	r1, #11
    9910:	d102      	bne.n	9918 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x66c>
    9912:	210c      	movs	r1, #12
    9914:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    9918:	7860      	ldrb	r0, [r4, #1]
    991a:	0700      	lsls	r0, r0, #28
    991c:	d50d      	bpl.n	993a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x68e>
    991e:	6868      	ldr	r0, [r5, #4]
    9920:	2301      	movs	r3, #1
    9922:	2105      	movs	r1, #5
    9924:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9928:	3078      	adds	r0, #120	; 0x78
    992a:	f005 fa79 	bl	ee20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    992e:	b108      	cbz	r0, 9934 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x688>
    9930:	2608      	movs	r6, #8
    9932:	e002      	b.n	993a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x68e>
    9934:	2000      	movs	r0, #0
    9936:	f7fc fe05 	bl	6544 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    993a:	4630      	mov	r0, r6
    993c:	bd70      	pop	{r4, r5, r6, pc}
    993e:	0000      	.short	0x0000
    9940:	20000164 	.word	0x20000164
    9944:	20000214 	.word	0x20000214
    9948:	b570      	push	{r4, r5, r6, lr}
    994a:	4d2b      	ldr	r5, [pc, #172]	; (99f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x74c>)
    994c:	2000      	movs	r0, #0
    994e:	78a9      	ldrb	r1, [r5, #2]
    9950:	07c9      	lsls	r1, r1, #31
    9952:	d017      	beq.n	9984 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6d8>
    9954:	68e8      	ldr	r0, [r5, #12]
    9956:	f105 0410 	add.w	r4, r5, #16
    995a:	2301      	movs	r3, #1
    995c:	78c6      	ldrb	r6, [r0, #3]
    995e:	6860      	ldr	r0, [r4, #4]
    9960:	2105      	movs	r1, #5
    9962:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9966:	3078      	adds	r0, #120	; 0x78
    9968:	f005 fa5a 	bl	ee20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    996c:	b158      	cbz	r0, 9986 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6da>
    996e:	1eb6      	subs	r6, r6, #2
    9970:	2e0a      	cmp	r6, #10
    9972:	d206      	bcs.n	9982 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6d6>
    9974:	e8df f006 	tbb	[pc, r6]
    9978:	05050707 	.word	0x05050707
    997c:	05050707 	.word	0x05050707
    9980:	0707      	.short	0x0707
    9982:	2008      	movs	r0, #8
    9984:	bd70      	pop	{r4, r5, r6, pc}
    9986:	68e8      	ldr	r0, [r5, #12]
    9988:	f7fd fd48 	bl	741c <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>
    998c:	b138      	cbz	r0, 999e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6f2>
    998e:	68e8      	ldr	r0, [r5, #12]
    9990:	78c5      	ldrb	r5, [r0, #3]
    9992:	b145      	cbz	r5, 99a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6fa>
    9994:	2d01      	cmp	r5, #1
    9996:	d006      	beq.n	99a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6fa>
    9998:	2d16      	cmp	r5, #22
    999a:	d118      	bne.n	99ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x722>
    999c:	e003      	b.n	99a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6fa>
    999e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    99a2:	f000 bdd1 	b.w	a548 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x129c>
    99a6:	6860      	ldr	r0, [r4, #4]
    99a8:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    99ac:	f005 fa86 	bl	eebc <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    99b0:	b168      	cbz	r0, 99ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x722>
    99b2:	6861      	ldr	r1, [r4, #4]
    99b4:	f891 0085 	ldrb.w	r0, [r1, #133]	; 0x85
    99b8:	281f      	cmp	r0, #31
    99ba:	d008      	beq.n	99ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x722>
    99bc:	2820      	cmp	r0, #32
    99be:	d003      	beq.n	99c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x71c>
    99c0:	2d16      	cmp	r5, #22
    99c2:	d00c      	beq.n	99de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x732>
    99c4:	2002      	movs	r0, #2
    99c6:	bd70      	pop	{r4, r5, r6, pc}
    99c8:	2027      	movs	r0, #39	; 0x27
    99ca:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    99ce:	2d26      	cmp	r5, #38	; 0x26
    99d0:	d207      	bcs.n	99e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x736>
    99d2:	480a      	ldr	r0, [pc, #40]	; (99fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x750>)
    99d4:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    99d8:	b118      	cbz	r0, 99e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x736>
    99da:	4780      	blx	r0
    99dc:	e003      	b.n	99e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x73a>
    99de:	2020      	movs	r0, #32
    99e0:	bd70      	pop	{r4, r5, r6, pc}
    99e2:	f000 fdb1 	bl	a548 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x129c>
    99e6:	6861      	ldr	r1, [r4, #4]
    99e8:	e9f1 233a 	ldrd	r2, r3, [r1, #232]!	; 0xe8
    99ec:	1c52      	adds	r2, r2, #1
    99ee:	f143 0300 	adc.w	r3, r3, #0
    99f2:	e9c1 2300 	strd	r2, r3, [r1]
    99f6:	bd70      	pop	{r4, r5, r6, pc}
    99f8:	20000164 	.word	0x20000164
    99fc:	2000017c 	.word	0x2000017c
    9a00:	b570      	push	{r4, r5, r6, lr}
    9a02:	4e23      	ldr	r6, [pc, #140]	; (9a90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e4>)
    9a04:	78b0      	ldrb	r0, [r6, #2]
    9a06:	0700      	lsls	r0, r0, #28
    9a08:	d540      	bpl.n	9a8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e0>
    9a0a:	f106 0410 	add.w	r4, r6, #16
    9a0e:	6860      	ldr	r0, [r4, #4]
    9a10:	3078      	adds	r0, #120	; 0x78
    9a12:	f006 feaf 	bl	10774 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    9a16:	b148      	cbz	r0, 9a2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x780>
    9a18:	6860      	ldr	r0, [r4, #4]
    9a1a:	21fe      	movs	r1, #254	; 0xfe
    9a1c:	2500      	movs	r5, #0
    9a1e:	f880 110c 	strb.w	r1, [r0, #268]	; 0x10c
    9a22:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    9a26:	2919      	cmp	r1, #25
    9a28:	d10c      	bne.n	9a44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x798>
    9a2a:	e004      	b.n	9a36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x78a>
    9a2c:	f240 71d3 	movw	r1, #2003	; 0x7d3
    9a30:	2031      	movs	r0, #49	; 0x31
    9a32:	f7fb fd95 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9a36:	f880 50c3 	strb.w	r5, [r0, #195]	; 0xc3
    9a3a:	f7ff fd45 	bl	94c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    9a3e:	6860      	ldr	r0, [r4, #4]
    9a40:	f880 5086 	strb.w	r5, [r0, #134]	; 0x86
    9a44:	6860      	ldr	r0, [r4, #4]
    9a46:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9a4a:	291f      	cmp	r1, #31
    9a4c:	d002      	beq.n	9a54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7a8>
    9a4e:	2929      	cmp	r1, #41	; 0x29
    9a50:	d113      	bne.n	9a7a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7ce>
    9a52:	e00b      	b.n	9a6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7c0>
    9a54:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    9a58:	f005 fa30 	bl	eebc <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    9a5c:	b108      	cbz	r0, 9a62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7b6>
    9a5e:	2027      	movs	r0, #39	; 0x27
    9a60:	e000      	b.n	9a64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7b8>
    9a62:	2020      	movs	r0, #32
    9a64:	6861      	ldr	r1, [r4, #4]
    9a66:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    9a6a:	e006      	b.n	9a7a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7ce>
    9a6c:	2101      	movs	r1, #1
    9a6e:	f880 126d 	strb.w	r1, [r0, #621]	; 0x26d
    9a72:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    9a76:	f880 50be 	strb.w	r5, [r0, #190]	; 0xbe
    9a7a:	6860      	ldr	r0, [r4, #4]
    9a7c:	f890 1088 	ldrb.w	r1, [r0, #136]	; 0x88
    9a80:	2908      	cmp	r1, #8
    9a82:	d103      	bne.n	9a8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e0>
    9a84:	2102      	movs	r1, #2
    9a86:	7031      	strb	r1, [r6, #0]
    9a88:	f880 110c 	strb.w	r1, [r0, #268]	; 0x10c
    9a8c:	bd70      	pop	{r4, r5, r6, pc}
    9a8e:	0000      	.short	0x0000
    9a90:	20000164 	.word	0x20000164
    9a94:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    9a96:	4606      	mov	r6, r0
    9a98:	4668      	mov	r0, sp
    9a9a:	f7fc fbdd 	bl	6258 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    9a9e:	b310      	cbz	r0, 9ae6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x83a>
    9aa0:	2222      	movs	r2, #34	; 0x22
    9aa2:	2100      	movs	r1, #0
    9aa4:	9800      	ldr	r0, [sp, #0]
    9aa6:	f003 ff59 	bl	d95c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    9aaa:	2103      	movs	r1, #3
    9aac:	9800      	ldr	r0, [sp, #0]
    9aae:	f005 fcac 	bl	f40a <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    9ab2:	9800      	ldr	r0, [sp, #0]
    9ab4:	7801      	ldrb	r1, [r0, #0]
    9ab6:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    9aba:	7001      	strb	r1, [r0, #0]
    9abc:	4631      	mov	r1, r6
    9abe:	f7fd fcbd 	bl	743c <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>
    9ac2:	4c62      	ldr	r4, [pc, #392]	; (9c4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9a0>)
    9ac4:	f644 152f 	movw	r5, #18735	; 0x492f
    9ac8:	2e0e      	cmp	r6, #14
    9aca:	d079      	beq.n	9bc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    9acc:	dc0e      	bgt.n	9aec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x840>
    9ace:	f1a6 0602 	sub.w	r6, r6, #2
    9ad2:	2e0c      	cmp	r6, #12
    9ad4:	d21c      	bcs.n	9b10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x864>
    9ad6:	e8df f006 	tbb	[pc, r6]
    9ada:	1b1e      	.short	0x1b1e
    9adc:	23aeae52 	.word	0x23aeae52
    9ae0:	ae1b5f1b 	.word	0xae1b5f1b
    9ae4:	363c      	.short	0x363c
    9ae6:	f640 210a 	movw	r1, #2570	; 0xa0a
    9aea:	e0aa      	b.n	9c42 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x996>
    9aec:	2e15      	cmp	r6, #21
    9aee:	d068      	beq.n	9bc2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x916>
    9af0:	dc08      	bgt.n	9b04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x858>
    9af2:	2e11      	cmp	r6, #17
    9af4:	d01a      	beq.n	9b2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x880>
    9af6:	2e12      	cmp	r6, #18
    9af8:	d017      	beq.n	9b2a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x87e>
    9afa:	2e13      	cmp	r6, #19
    9afc:	d015      	beq.n	9b2a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x87e>
    9afe:	2e14      	cmp	r6, #20
    9b00:	d106      	bne.n	9b10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x864>
    9b02:	e05e      	b.n	9bc2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x916>
    9b04:	2e16      	cmp	r6, #22
    9b06:	d030      	beq.n	9b6a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8be>
    9b08:	2e17      	cmp	r6, #23
    9b0a:	d075      	beq.n	9bf8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x94c>
    9b0c:	2eff      	cmp	r6, #255	; 0xff
    9b0e:	d072      	beq.n	9bf6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x94a>
    9b10:	f640 217b 	movw	r1, #2683	; 0xa7b
    9b14:	e095      	b.n	9c42 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x996>
    9b16:	6861      	ldr	r1, [r4, #4]
    9b18:	9800      	ldr	r0, [sp, #0]
    9b1a:	f891 110e 	ldrb.w	r1, [r1, #270]	; 0x10e
    9b1e:	e016      	b.n	9b4e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8a2>
    9b20:	6860      	ldr	r0, [r4, #4]
    9b22:	9900      	ldr	r1, [sp, #0]
    9b24:	f890 010e 	ldrb.w	r0, [r0, #270]	; 0x10e
    9b28:	7108      	strb	r0, [r1, #4]
    9b2a:	e084      	b.n	9c36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98a>
    9b2c:	6860      	ldr	r0, [r4, #4]
    9b2e:	f890 110b 	ldrb.w	r1, [r0, #267]	; 0x10b
    9b32:	9800      	ldr	r0, [sp, #0]
    9b34:	f005 fc45 	bl	f3c2 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>
    9b38:	6860      	ldr	r0, [r4, #4]
    9b3a:	f890 110a 	ldrb.w	r1, [r0, #266]	; 0x10a
    9b3e:	9800      	ldr	r0, [sp, #0]
    9b40:	f005 fc41 	bl	f3c6 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>
    9b44:	e077      	b.n	9c36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98a>
    9b46:	6861      	ldr	r1, [r4, #4]
    9b48:	9800      	ldr	r0, [sp, #0]
    9b4a:	f891 110a 	ldrb.w	r1, [r1, #266]	; 0x10a
    9b4e:	7101      	strb	r1, [r0, #4]
    9b50:	e071      	b.n	9c36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98a>
    9b52:	9800      	ldr	r0, [sp, #0]
    9b54:	210c      	movs	r1, #12
    9b56:	7101      	strb	r1, [r0, #4]
    9b58:	2159      	movs	r1, #89	; 0x59
    9b5a:	7141      	strb	r1, [r0, #5]
    9b5c:	2100      	movs	r1, #0
    9b5e:	7181      	strb	r1, [r0, #6]
    9b60:	21a7      	movs	r1, #167	; 0xa7
    9b62:	71c1      	strb	r1, [r0, #7]
    9b64:	2111      	movs	r1, #17
    9b66:	7201      	strb	r1, [r0, #8]
    9b68:	e065      	b.n	9c36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98a>
    9b6a:	9800      	ldr	r0, [sp, #0]
    9b6c:	f8d4 1004 	ldr.w	r1, [r4, #4]
    9b70:	f891 2126 	ldrb.w	r2, [r1, #294]	; 0x126
    9b74:	7102      	strb	r2, [r0, #4]
    9b76:	f891 1127 	ldrb.w	r1, [r1, #295]	; 0x127
    9b7a:	7141      	strb	r1, [r0, #5]
    9b7c:	e05b      	b.n	9c36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98a>
    9b7e:	6861      	ldr	r1, [r4, #4]
    9b80:	9800      	ldr	r0, [sp, #0]
    9b82:	f501 71f4 	add.w	r1, r1, #488	; 0x1e8
    9b86:	f005 fc31 	bl	f3ec <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>
    9b8a:	6861      	ldr	r1, [r4, #4]
    9b8c:	9800      	ldr	r0, [sp, #0]
    9b8e:	f501 7182 	add.w	r1, r1, #260	; 0x104
    9b92:	f005 fc28 	bl	f3e6 <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>
    9b96:	e04e      	b.n	9c36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98a>
    9b98:	f001 ff54 	bl	ba44 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    9b9c:	4028      	ands	r0, r5
    9b9e:	f001 0106 	and.w	r1, r1, #6
    9ba2:	e9cd 0101 	strd	r0, r1, [sp, #4]
    9ba6:	6861      	ldr	r1, [r4, #4]
    9ba8:	f89d 0004 	ldrb.w	r0, [sp, #4]
    9bac:	f891 10d4 	ldrb.w	r1, [r1, #212]	; 0xd4
    9bb0:	4008      	ands	r0, r1
    9bb2:	f88d 0004 	strb.w	r0, [sp, #4]
    9bb6:	a901      	add	r1, sp, #4
    9bb8:	9800      	ldr	r0, [sp, #0]
    9bba:	f005 fc21 	bl	f400 <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>
    9bbe:	e03a      	b.n	9c36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98a>
    9bc0:	e025      	b.n	9c0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x962>
    9bc2:	6860      	ldr	r0, [r4, #4]
    9bc4:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
    9bc8:	9800      	ldr	r0, [sp, #0]
    9bca:	f005 fc26 	bl	f41a <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>
    9bce:	6860      	ldr	r0, [r4, #4]
    9bd0:	f8b0 1110 	ldrh.w	r1, [r0, #272]	; 0x110
    9bd4:	9800      	ldr	r0, [sp, #0]
    9bd6:	f005 fc24 	bl	f422 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>
    9bda:	6860      	ldr	r0, [r4, #4]
    9bdc:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    9be0:	9800      	ldr	r0, [sp, #0]
    9be2:	f005 fc22 	bl	f42a <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>
    9be6:	6860      	ldr	r0, [r4, #4]
    9be8:	f8b0 110e 	ldrh.w	r1, [r0, #270]	; 0x10e
    9bec:	9800      	ldr	r0, [sp, #0]
    9bee:	f005 fc20 	bl	f432 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>
    9bf2:	e020      	b.n	9c36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98a>
    9bf4:	e000      	b.n	9bf8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x94c>
    9bf6:	e016      	b.n	9c26 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x97a>
    9bf8:	6861      	ldr	r1, [r4, #4]
    9bfa:	f891 0124 	ldrb.w	r0, [r1, #292]	; 0x124
    9bfe:	2801      	cmp	r0, #1
    9c00:	9800      	ldr	r0, [sp, #0]
    9c02:	d0b5      	beq.n	9b70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8c4>
    9c04:	f811 2f6a 	ldrb.w	r2, [r1, #106]!
    9c08:	7102      	strb	r2, [r0, #4]
    9c0a:	7849      	ldrb	r1, [r1, #1]
    9c0c:	e7b5      	b.n	9b7a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8ce>
    9c0e:	f001 ff19 	bl	ba44 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    9c12:	4028      	ands	r0, r5
    9c14:	f001 0106 	and.w	r1, r1, #6
    9c18:	e9cd 0101 	strd	r0, r1, [sp, #4]
    9c1c:	a901      	add	r1, sp, #4
    9c1e:	9800      	ldr	r0, [sp, #0]
    9c20:	f005 fbe9 	bl	f3f6 <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>
    9c24:	e007      	b.n	9c36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98a>
    9c26:	6860      	ldr	r0, [r4, #4]
    9c28:	f890 226f 	ldrb.w	r2, [r0, #623]	; 0x26f
    9c2c:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
    9c30:	9800      	ldr	r0, [sp, #0]
    9c32:	f005 fbca 	bl	f3ca <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>
    9c36:	f7fc fae9 	bl	620c <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    9c3a:	2800      	cmp	r0, #0
    9c3c:	d104      	bne.n	9c48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x99c>
    9c3e:	f640 217f 	movw	r1, #2687	; 0xa7f
    9c42:	2031      	movs	r0, #49	; 0x31
    9c44:	f7fb fc8c 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9c48:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    9c4a:	0000      	.short	0x0000
    9c4c:	20000174 	.word	0x20000174
    9c50:	e92d 5ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    9c54:	4e8d      	ldr	r6, [pc, #564]	; (9e8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbe0>)
    9c56:	468a      	mov	sl, r1
    9c58:	6870      	ldr	r0, [r6, #4]
    9c5a:	8800      	ldrh	r0, [r0, #0]
    9c5c:	f7fc f8be 	bl	5ddc <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    9c60:	0007      	movs	r7, r0
    9c62:	d00c      	beq.n	9c7e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9d2>
    9c64:	f1a6 0510 	sub.w	r5, r6, #16
    9c68:	f04f 0400 	mov.w	r4, #0
    9c6c:	8868      	ldrh	r0, [r5, #2]
    9c6e:	05c0      	lsls	r0, r0, #23
    9c70:	d50a      	bpl.n	9c88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9dc>
    9c72:	6870      	ldr	r0, [r6, #4]
    9c74:	f8a0 40b4 	strh.w	r4, [r0, #180]	; 0xb4
    9c78:	f880 41dc 	strb.w	r4, [r0, #476]	; 0x1dc
    9c7c:	e009      	b.n	9c92 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9e6>
    9c7e:	f640 515c 	movw	r1, #3420	; 0xd5c
    9c82:	2031      	movs	r0, #49	; 0x31
    9c84:	f7fb fc6c 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9c88:	6871      	ldr	r1, [r6, #4]
    9c8a:	f831 0fb4 	ldrh.w	r0, [r1, #180]!
    9c8e:	1c40      	adds	r0, r0, #1
    9c90:	8008      	strh	r0, [r1, #0]
    9c92:	f001 f9df 	bl	b054 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1da8>
    9c96:	f04f 0901 	mov.w	r9, #1
    9c9a:	b348      	cbz	r0, 9cf0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa44>
    9c9c:	8868      	ldrh	r0, [r5, #2]
    9c9e:	0500      	lsls	r0, r0, #20
    9ca0:	d506      	bpl.n	9cb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa04>
    9ca2:	6870      	ldr	r0, [r6, #4]
    9ca4:	f890 108c 	ldrb.w	r1, [r0, #140]	; 0x8c
    9ca8:	b111      	cbz	r1, 9cb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa04>
    9caa:	f8c0 40a8 	str.w	r4, [r0, #168]	; 0xa8
    9cae:	e01f      	b.n	9cf0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa44>
    9cb0:	6871      	ldr	r1, [r6, #4]
    9cb2:	f8d1 00a8 	ldr.w	r0, [r1, #168]	; 0xa8
    9cb6:	1c40      	adds	r0, r0, #1
    9cb8:	f8c1 00a8 	str.w	r0, [r1, #168]	; 0xa8
    9cbc:	f8d1 20ac 	ldr.w	r2, [r1, #172]	; 0xac
    9cc0:	4282      	cmp	r2, r0
    9cc2:	d301      	bcc.n	9cc8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa1c>
    9cc4:	1a13      	subs	r3, r2, r0
    9cc6:	e000      	b.n	9cca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa1e>
    9cc8:	2300      	movs	r3, #0
    9cca:	f8b5 c004 	ldrh.w	ip, [r5, #4]
    9cce:	f10c 0c05 	add.w	ip, ip, #5
    9cd2:	4563      	cmp	r3, ip
    9cd4:	d801      	bhi.n	9cda <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa2e>
    9cd6:	f881 90b2 	strb.w	r9, [r1, #178]	; 0xb2
    9cda:	4290      	cmp	r0, r2
    9cdc:	d308      	bcc.n	9cf0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa44>
    9cde:	f501 709d 	add.w	r0, r1, #314	; 0x13a
    9ce2:	220c      	movs	r2, #12
    9ce4:	f8c1 40a8 	str.w	r4, [r1, #168]	; 0xa8
    9ce8:	f7fd fc62 	bl	75b0 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    9cec:	f7fd fd32 	bl	7754 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9cf0:	8868      	ldrh	r0, [r5, #2]
    9cf2:	f04f 0b02 	mov.w	fp, #2
    9cf6:	f410 7f40 	tst.w	r0, #768	; 0x300
    9cfa:	d00e      	beq.n	9d1a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa6e>
    9cfc:	6870      	ldr	r0, [r6, #4]
    9cfe:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
    9d02:	b111      	cbz	r1, 9d0a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa5e>
    9d04:	2903      	cmp	r1, #3
    9d06:	d108      	bne.n	9d1a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa6e>
    9d08:	e002      	b.n	9d10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa64>
    9d0a:	f880 908a 	strb.w	r9, [r0, #138]	; 0x8a
    9d0e:	e001      	b.n	9d14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa68>
    9d10:	f880 b08a 	strb.w	fp, [r0, #138]	; 0x8a
    9d14:	2101      	movs	r1, #1
    9d16:	f7fe fea7 	bl	8a68 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    9d1a:	6870      	ldr	r0, [r6, #4]
    9d1c:	46b0      	mov	r8, r6
    9d1e:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
    9d22:	2901      	cmp	r1, #1
    9d24:	d104      	bne.n	9d30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa84>
    9d26:	8869      	ldrh	r1, [r5, #2]
    9d28:	0549      	lsls	r1, r1, #21
    9d2a:	d501      	bpl.n	9d30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa84>
    9d2c:	f880 b08a 	strb.w	fp, [r0, #138]	; 0x8a
    9d30:	9900      	ldr	r1, [sp, #0]
    9d32:	2900      	cmp	r1, #0
    9d34:	d179      	bne.n	9e2a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb7e>
    9d36:	78a9      	ldrb	r1, [r5, #2]
    9d38:	0649      	lsls	r1, r1, #25
    9d3a:	d502      	bpl.n	9d42 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa96>
    9d3c:	f8a0 41f0 	strh.w	r4, [r0, #496]	; 0x1f0
    9d40:	e004      	b.n	9d4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xaa0>
    9d42:	f8b0 11f0 	ldrh.w	r1, [r0, #496]	; 0x1f0
    9d46:	1c49      	adds	r1, r1, #1
    9d48:	f8a0 11f0 	strh.w	r1, [r0, #496]	; 0x1f0
    9d4c:	4650      	mov	r0, sl
    9d4e:	f7ff fdad 	bl	98ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x600>
    9d52:	ea40 000a 	orr.w	r0, r0, sl
    9d56:	4682      	mov	sl, r0
    9d58:	f7ff fd28 	bl	97ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x500>
    9d5c:	f8d8 6004 	ldr.w	r6, [r8, #4]
    9d60:	f8b6 01d0 	ldrh.w	r0, [r6, #464]	; 0x1d0
    9d64:	1c40      	adds	r0, r0, #1
    9d66:	f8a6 01d0 	strh.w	r0, [r6, #464]	; 0x1d0
    9d6a:	f896 01d4 	ldrb.w	r0, [r6, #468]	; 0x1d4
    9d6e:	b128      	cbz	r0, 9d7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xad0>
    9d70:	f7fc fc54 	bl	661c <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>
    9d74:	b1b0      	cbz	r0, 9da4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xaf8>
    9d76:	f8a6 41d0 	strh.w	r4, [r6, #464]	; 0x1d0
    9d7a:	e013      	b.n	9da4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xaf8>
    9d7c:	f7fc faee 	bl	635c <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>
    9d80:	b108      	cbz	r0, 9d86 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xada>
    9d82:	f8a6 41d0 	strh.w	r4, [r6, #464]	; 0x1d0
    9d86:	f7fc fae3 	bl	6350 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>
    9d8a:	b158      	cbz	r0, 9da4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xaf8>
    9d8c:	f896 01dc 	ldrb.w	r0, [r6, #476]	; 0x1dc
    9d90:	1c40      	adds	r0, r0, #1
    9d92:	b2c0      	uxtb	r0, r0
    9d94:	f886 01dc 	strb.w	r0, [r6, #476]	; 0x1dc
    9d98:	2802      	cmp	r0, #2
    9d9a:	d903      	bls.n	9da4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xaf8>
    9d9c:	f8a6 41d0 	strh.w	r4, [r6, #464]	; 0x1d0
    9da0:	f886 41dc 	strb.w	r4, [r6, #476]	; 0x1dc
    9da4:	f8d8 0004 	ldr.w	r0, [r8, #4]
    9da8:	4646      	mov	r6, r8
    9daa:	2301      	movs	r3, #1
    9dac:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9db0:	2100      	movs	r1, #0
    9db2:	3078      	adds	r0, #120	; 0x78
    9db4:	f005 f834 	bl	ee20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9db8:	b920      	cbnz	r0, 9dc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb18>
    9dba:	6870      	ldr	r0, [r6, #4]
    9dbc:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    9dc0:	280c      	cmp	r0, #12
    9dc2:	d160      	bne.n	9e86 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbda>
    9dc4:	6870      	ldr	r0, [r6, #4]
    9dc6:	2301      	movs	r3, #1
    9dc8:	2100      	movs	r1, #0
    9dca:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9dce:	3078      	adds	r0, #120	; 0x78
    9dd0:	f005 f826 	bl	ee20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9dd4:	b350      	cbz	r0, 9e2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb80>
    9dd6:	6870      	ldr	r0, [r6, #4]
    9dd8:	2301      	movs	r3, #1
    9dda:	2100      	movs	r1, #0
    9ddc:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    9de0:	3078      	adds	r0, #120	; 0x78
    9de2:	f005 f81d 	bl	ee20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9de6:	b308      	cbz	r0, 9e2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb80>
    9de8:	6870      	ldr	r0, [r6, #4]
    9dea:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
    9dee:	2902      	cmp	r1, #2
    9df0:	d149      	bne.n	9e86 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbda>
    9df2:	f890 01dc 	ldrb.w	r0, [r0, #476]	; 0x1dc
    9df6:	b9c8      	cbnz	r0, 9e2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb80>
    9df8:	4638      	mov	r0, r7
    9dfa:	f004 faaa 	bl	e352 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    9dfe:	b1a8      	cbz	r0, 9e2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb80>
    9e00:	6870      	ldr	r0, [r6, #4]
    9e02:	3078      	adds	r0, #120	; 0x78
    9e04:	f006 fcb6 	bl	10774 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    9e08:	b980      	cbnz	r0, 9e2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb80>
    9e0a:	6871      	ldr	r1, [r6, #4]
    9e0c:	f8b1 01ca 	ldrh.w	r0, [r1, #458]	; 0x1ca
    9e10:	2801      	cmp	r0, #1
    9e12:	d938      	bls.n	9e86 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbda>
    9e14:	f881 91d2 	strb.w	r9, [r1, #466]	; 0x1d2
    9e18:	f8b1 00b6 	ldrh.w	r0, [r1, #182]	; 0xb6
    9e1c:	f8b1 20b4 	ldrh.w	r2, [r1, #180]	; 0xb4
    9e20:	1e83      	subs	r3, r0, #2
    9e22:	429a      	cmp	r2, r3
    9e24:	db03      	blt.n	9e2e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb82>
    9e26:	2001      	movs	r0, #1
    9e28:	e004      	b.n	9e34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb88>
    9e2a:	e01d      	b.n	9e68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbbc>
    9e2c:	e02b      	b.n	9e86 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbda>
    9e2e:	1a80      	subs	r0, r0, r2
    9e30:	1e40      	subs	r0, r0, #1
    9e32:	b280      	uxth	r0, r0
    9e34:	f8b1 21d0 	ldrh.w	r2, [r1, #464]	; 0x1d0
    9e38:	88ab      	ldrh	r3, [r5, #4]
    9e3a:	429a      	cmp	r2, r3
    9e3c:	d301      	bcc.n	9e42 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb96>
    9e3e:	2201      	movs	r2, #1
    9e40:	e002      	b.n	9e48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb9c>
    9e42:	1a9a      	subs	r2, r3, r2
    9e44:	1c52      	adds	r2, r2, #1
    9e46:	b292      	uxth	r2, r2
    9e48:	4290      	cmp	r0, r2
    9e4a:	d900      	bls.n	9e4e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xba2>
    9e4c:	4610      	mov	r0, r2
    9e4e:	2801      	cmp	r0, #1
    9e50:	d102      	bne.n	9e58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbac>
    9e52:	bf00      	nop
    9e54:	f881 41d2 	strb.w	r4, [r1, #466]	; 0x1d2
    9e58:	6871      	ldr	r1, [r6, #4]
    9e5a:	f8b1 207c 	ldrh.w	r2, [r1, #124]	; 0x7c
    9e5e:	4410      	add	r0, r2
    9e60:	f8a1 01cc 	strh.w	r0, [r1, #460]	; 0x1cc
    9e64:	f001 f9ca 	bl	b1fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f50>
    9e68:	78a8      	ldrb	r0, [r5, #2]
    9e6a:	4652      	mov	r2, sl
    9e6c:	f3c0 1180 	ubfx	r1, r0, #6, #1
    9e70:	9800      	ldr	r0, [sp, #0]
    9e72:	f001 f903 	bl	b07c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dd0>
    9e76:	f8d8 0004 	ldr.w	r0, [r8, #4]
    9e7a:	f880 41d3 	strb.w	r4, [r0, #467]	; 0x1d3
    9e7e:	e8bd 5ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    9e82:	f7fc b9ad 	b.w	61e0 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    9e86:	2001      	movs	r0, #1
    9e88:	6871      	ldr	r1, [r6, #4]
    9e8a:	e7e3      	b.n	9e54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xba8>
    9e8c:	20000174 	.word	0x20000174
    9e90:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    9e92:	4c58      	ldr	r4, [pc, #352]	; (9ff4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd48>)
    9e94:	2301      	movs	r3, #1
    9e96:	2100      	movs	r1, #0
    9e98:	6860      	ldr	r0, [r4, #4]
    9e9a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9e9e:	3078      	adds	r0, #120	; 0x78
    9ea0:	f004 ffbe 	bl	ee20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9ea4:	2800      	cmp	r0, #0
    9ea6:	d07c      	beq.n	9fa2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcf6>
    9ea8:	6860      	ldr	r0, [r4, #4]
    9eaa:	f890 112b 	ldrb.w	r1, [r0, #299]	; 0x12b
    9eae:	2500      	movs	r5, #0
    9eb0:	b139      	cbz	r1, 9ec2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc16>
    9eb2:	2100      	movs	r1, #0
    9eb4:	200e      	movs	r0, #14
    9eb6:	f000 f89f 	bl	9ff8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    9eba:	6860      	ldr	r0, [r4, #4]
    9ebc:	f880 512b 	strb.w	r5, [r0, #299]	; 0x12b
    9ec0:	e096      	b.n	9ff0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd44>
    9ec2:	f890 112a 	ldrb.w	r1, [r0, #298]	; 0x12a
    9ec6:	b119      	cbz	r1, 9ed0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc24>
    9ec8:	f890 10c5 	ldrb.w	r1, [r0, #197]	; 0xc5
    9ecc:	0789      	lsls	r1, r1, #30
    9ece:	d016      	beq.n	9efe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc52>
    9ed0:	f890 111a 	ldrb.w	r1, [r0, #282]	; 0x11a
    9ed4:	f88d 1004 	strb.w	r1, [sp, #4]
    9ed8:	9901      	ldr	r1, [sp, #4]
    9eda:	9101      	str	r1, [sp, #4]
    9edc:	f89d 1004 	ldrb.w	r1, [sp, #4]
    9ee0:	b141      	cbz	r1, 9ef4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc48>
    9ee2:	f890 111b 	ldrb.w	r1, [r0, #283]	; 0x11b
    9ee6:	f88d 1000 	strb.w	r1, [sp]
    9eea:	9900      	ldr	r1, [sp, #0]
    9eec:	9100      	str	r1, [sp, #0]
    9eee:	f89d 1000 	ldrb.w	r1, [sp]
    9ef2:	b189      	cbz	r1, 9f18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc6c>
    9ef4:	f890 1124 	ldrb.w	r1, [r0, #292]	; 0x124
    9ef8:	2901      	cmp	r1, #1
    9efa:	d030      	beq.n	9f5e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcb2>
    9efc:	e072      	b.n	9fe4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd38>
    9efe:	2100      	movs	r1, #0
    9f00:	200c      	movs	r0, #12
    9f02:	f000 f879 	bl	9ff8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    9f06:	6860      	ldr	r0, [r4, #4]
    9f08:	f810 1fc5 	ldrb.w	r1, [r0, #197]!
    9f0c:	f041 0101 	orr.w	r1, r1, #1
    9f10:	7001      	strb	r1, [r0, #0]
    9f12:	f880 5065 	strb.w	r5, [r0, #101]	; 0x65
    9f16:	e06b      	b.n	9ff0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd44>
    9f18:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    9f1c:	2924      	cmp	r1, #36	; 0x24
    9f1e:	d01c      	beq.n	9f5a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcae>
    9f20:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9f24:	2924      	cmp	r1, #36	; 0x24
    9f26:	d018      	beq.n	9f5a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcae>
    9f28:	f05f 0300 	movs.w	r3, #0
    9f2c:	f200 2276 	addw	r2, r0, #630	; 0x276
    9f30:	f500 718d 	add.w	r1, r0, #282	; 0x11a
    9f34:	f005 fc33 	bl	f79e <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    9f38:	6860      	ldr	r0, [r4, #4]
    9f3a:	f880 511a 	strb.w	r5, [r0, #282]	; 0x11a
    9f3e:	2100      	movs	r1, #0
    9f40:	2014      	movs	r0, #20
    9f42:	f000 f859 	bl	9ff8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    9f46:	6861      	ldr	r1, [r4, #4]
    9f48:	f101 0030 	add.w	r0, r1, #48	; 0x30
    9f4c:	8bc2      	ldrh	r2, [r0, #30]
    9f4e:	f8a1 210e 	strh.w	r2, [r1, #270]	; 0x10e
    9f52:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    9f54:	f8a1 0110 	strh.w	r0, [r1, #272]	; 0x110
    9f58:	e04a      	b.n	9ff0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd44>
    9f5a:	2301      	movs	r3, #1
    9f5c:	e7e6      	b.n	9f2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc80>
    9f5e:	f890 1125 	ldrb.w	r1, [r0, #293]	; 0x125
    9f62:	f88d 1000 	strb.w	r1, [sp]
    9f66:	9900      	ldr	r1, [sp, #0]
    9f68:	9100      	str	r1, [sp, #0]
    9f6a:	f89d 1000 	ldrb.w	r1, [sp]
    9f6e:	bb31      	cbnz	r1, 9fbe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd12>
    9f70:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9f74:	2301      	movs	r3, #1
    9f76:	210b      	movs	r1, #11
    9f78:	3078      	adds	r0, #120	; 0x78
    9f7a:	f004 ff51 	bl	ee20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9f7e:	b9f0      	cbnz	r0, 9fbe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd12>
    9f80:	6860      	ldr	r0, [r4, #4]
    9f82:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
    9f86:	f006 fbfd 	bl	10784 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    9f8a:	4605      	mov	r5, r0
    9f8c:	6860      	ldr	r0, [r4, #4]
    9f8e:	f890 006f 	ldrb.w	r0, [r0, #111]	; 0x6f
    9f92:	f006 fbf7 	bl	10784 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    9f96:	4606      	mov	r6, r0
    9f98:	6860      	ldr	r0, [r4, #4]
    9f9a:	f890 1126 	ldrb.w	r1, [r0, #294]	; 0x126
    9f9e:	4628      	mov	r0, r5
    9fa0:	e000      	b.n	9fa4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcf8>
    9fa2:	e020      	b.n	9fe6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd3a>
    9fa4:	f006 fbf9 	bl	1079a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    9fa8:	b150      	cbz	r0, 9fc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd14>
    9faa:	6860      	ldr	r0, [r4, #4]
    9fac:	f890 1127 	ldrb.w	r1, [r0, #295]	; 0x127
    9fb0:	4630      	mov	r0, r6
    9fb2:	f006 fbf2 	bl	1079a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    9fb6:	b118      	cbz	r0, 9fc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd14>
    9fb8:	2000      	movs	r0, #0
    9fba:	f000 f929 	bl	a210 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf64>
    9fbe:	e011      	b.n	9fe4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd38>
    9fc0:	6860      	ldr	r0, [r4, #4]
    9fc2:	2301      	movs	r3, #1
    9fc4:	2103      	movs	r1, #3
    9fc6:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9fca:	3078      	adds	r0, #120	; 0x78
    9fcc:	f004 ff28 	bl	ee20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9fd0:	b940      	cbnz	r0, 9fe4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd38>
    9fd2:	6860      	ldr	r0, [r4, #4]
    9fd4:	2301      	movs	r3, #1
    9fd6:	2102      	movs	r1, #2
    9fd8:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9fdc:	3078      	adds	r0, #120	; 0x78
    9fde:	f004 ff1f 	bl	ee20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9fe2:	b108      	cbz	r0, 9fe8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd3c>
    9fe4:	2000      	movs	r0, #0
    9fe6:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    9fe8:	2100      	movs	r1, #0
    9fea:	2016      	movs	r0, #22
    9fec:	f000 f804 	bl	9ff8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    9ff0:	2001      	movs	r0, #1
    9ff2:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    9ff4:	20000174 	.word	0x20000174
    9ff8:	b570      	push	{r4, r5, r6, lr}
    9ffa:	4c0d      	ldr	r4, [pc, #52]	; (a030 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd84>)
    9ffc:	4606      	mov	r6, r0
    9ffe:	460d      	mov	r5, r1
    a000:	6860      	ldr	r0, [r4, #4]
    a002:	3078      	adds	r0, #120	; 0x78
    a004:	f006 fbb6 	bl	10774 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    a008:	b120      	cbz	r0, a014 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd68>
    a00a:	f640 2184 	movw	r1, #2692	; 0xa84
    a00e:	2031      	movs	r0, #49	; 0x31
    a010:	f7fb faa6 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a014:	6862      	ldr	r2, [r4, #4]
    a016:	2000      	movs	r0, #0
    a018:	f882 610c 	strb.w	r6, [r2, #268]	; 0x10c
    a01c:	b115      	cbz	r5, a024 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    a01e:	f8a2 00c0 	strh.w	r0, [r2, #192]	; 0xc0
    a022:	bd70      	pop	{r4, r5, r6, pc}
    a024:	f822 0fba 	strh.w	r0, [r2, #186]!
    a028:	2001      	movs	r0, #1
    a02a:	7110      	strb	r0, [r2, #4]
    a02c:	bd70      	pop	{r4, r5, r6, pc}
    a02e:	0000      	.short	0x0000
    a030:	20000174 	.word	0x20000174
    a034:	b538      	push	{r3, r4, r5, lr}
    a036:	4c1f      	ldr	r4, [pc, #124]	; (a0b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe08>)
    a038:	2500      	movs	r5, #0
    a03a:	6860      	ldr	r0, [r4, #4]
    a03c:	f890 1258 	ldrb.w	r1, [r0, #600]	; 0x258
    a040:	2901      	cmp	r1, #1
    a042:	d00a      	beq.n	a05a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdae>
    a044:	2902      	cmp	r1, #2
    a046:	d133      	bne.n	a0b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe04>
    a048:	f890 10c4 	ldrb.w	r1, [r0, #196]	; 0xc4
    a04c:	b1d9      	cbz	r1, a086 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdda>
    a04e:	2106      	movs	r1, #6
    a050:	f880 110e 	strb.w	r1, [r0, #270]	; 0x10e
    a054:	2101      	movs	r1, #1
    a056:	2002      	movs	r0, #2
    a058:	e025      	b.n	a0a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdfa>
    a05a:	f890 11be 	ldrb.w	r1, [r0, #446]	; 0x1be
    a05e:	f88d 1000 	strb.w	r1, [sp]
    a062:	9900      	ldr	r1, [sp, #0]
    a064:	9100      	str	r1, [sp, #0]
    a066:	f89d 1000 	ldrb.w	r1, [sp]
    a06a:	2900      	cmp	r1, #0
    a06c:	d120      	bne.n	a0b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe04>
    a06e:	f100 03f0 	add.w	r3, r0, #240	; 0xf0
    a072:	f500 71f0 	add.w	r1, r0, #480	; 0x1e0
    a076:	2200      	movs	r2, #0
    a078:	f200 2059 	addw	r0, r0, #601	; 0x259
    a07c:	f004 fe88 	bl	ed90 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    a080:	2101      	movs	r1, #1
    a082:	2005      	movs	r0, #5
    a084:	e00f      	b.n	a0a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdfa>
    a086:	2203      	movs	r2, #3
    a088:	2106      	movs	r1, #6
    a08a:	f880 210b 	strb.w	r2, [r0, #267]	; 0x10b
    a08e:	f880 110a 	strb.w	r1, [r0, #266]	; 0x10a
    a092:	f890 00d4 	ldrb.w	r0, [r0, #212]	; 0xd4
    a096:	0880      	lsrs	r0, r0, #2
    a098:	f010 0f01 	tst.w	r0, #1
    a09c:	d001      	beq.n	a0a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdf6>
    a09e:	2011      	movs	r0, #17
    a0a0:	e000      	b.n	a0a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdf8>
    a0a2:	200d      	movs	r0, #13
    a0a4:	2101      	movs	r1, #1
    a0a6:	f7ff ffa7 	bl	9ff8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    a0aa:	6860      	ldr	r0, [r4, #4]
    a0ac:	f880 5258 	strb.w	r5, [r0, #600]	; 0x258
    a0b0:	bd38      	pop	{r3, r4, r5, pc}
    a0b2:	0000      	.short	0x0000
    a0b4:	20000174 	.word	0x20000174
    a0b8:	b570      	push	{r4, r5, r6, lr}
    a0ba:	4b2b      	ldr	r3, [pc, #172]	; (a168 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xebc>)
    a0bc:	4602      	mov	r2, r0
    a0be:	8858      	ldrh	r0, [r3, #2]
    a0c0:	4310      	orrs	r0, r2
    a0c2:	8058      	strh	r0, [r3, #2]
    a0c4:	f103 0010 	add.w	r0, r3, #16
    a0c8:	2a40      	cmp	r2, #64	; 0x40
    a0ca:	6840      	ldr	r0, [r0, #4]
    a0cc:	d00d      	beq.n	a0ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe3e>
    a0ce:	0796      	lsls	r6, r2, #30
    a0d0:	f04f 0500 	mov.w	r5, #0
    a0d4:	f04f 0401 	mov.w	r4, #1
    a0d8:	ea4f 76c2 	mov.w	r6, r2, lsl #31
    a0dc:	d50c      	bpl.n	a0f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4c>
    a0de:	b14e      	cbz	r6, a0f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe48>
    a0e0:	f640 41c9 	movw	r1, #3273	; 0xcc9
    a0e4:	2031      	movs	r0, #49	; 0x31
    a0e6:	f7fb fa3b 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a0ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a0ee:	2104      	movs	r1, #4
    a0f0:	f7fe bcba 	b.w	8a68 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    a0f4:	6099      	str	r1, [r3, #8]
    a0f6:	e01c      	b.n	a132 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe86>
    a0f8:	b1c6      	cbz	r6, a12c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe80>
    a0fa:	60d9      	str	r1, [r3, #12]
    a0fc:	78c9      	ldrb	r1, [r1, #3]
    a0fe:	2906      	cmp	r1, #6
    a100:	d002      	beq.n	a108 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe5c>
    a102:	290b      	cmp	r1, #11
    a104:	d112      	bne.n	a12c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe80>
    a106:	e009      	b.n	a11c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe70>
    a108:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a10c:	2917      	cmp	r1, #23
    a10e:	d10d      	bne.n	a12c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe80>
    a110:	2100      	movs	r1, #0
    a112:	e9c0 1138 	strd	r1, r1, [r0, #224]	; 0xe0
    a116:	f880 408b 	strb.w	r4, [r0, #139]	; 0x8b
    a11a:	e007      	b.n	a12c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe80>
    a11c:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a120:	2911      	cmp	r1, #17
    a122:	d103      	bne.n	a12c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe80>
    a124:	f880 508b 	strb.w	r5, [r0, #139]	; 0x8b
    a128:	f880 40c4 	strb.w	r4, [r0, #196]	; 0xc4
    a12c:	0791      	lsls	r1, r2, #30
    a12e:	d516      	bpl.n	a15e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb2>
    a130:	6899      	ldr	r1, [r3, #8]
    a132:	78c9      	ldrb	r1, [r1, #3]
    a134:	2905      	cmp	r1, #5
    a136:	d002      	beq.n	a13e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe92>
    a138:	290b      	cmp	r1, #11
    a13a:	d110      	bne.n	a15e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb2>
    a13c:	e009      	b.n	a152 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea6>
    a13e:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a142:	2915      	cmp	r1, #21
    a144:	d10b      	bne.n	a15e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb2>
    a146:	2100      	movs	r1, #0
    a148:	e9c0 113a 	strd	r1, r1, [r0, #232]	; 0xe8
    a14c:	f880 408c 	strb.w	r4, [r0, #140]	; 0x8c
    a150:	e005      	b.n	a15e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb2>
    a152:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a156:	2910      	cmp	r1, #16
    a158:	d101      	bne.n	a15e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb2>
    a15a:	f880 508c 	strb.w	r5, [r0, #140]	; 0x8c
    a15e:	0690      	lsls	r0, r2, #26
    a160:	d501      	bpl.n	a166 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeba>
    a162:	2008      	movs	r0, #8
    a164:	7058      	strb	r0, [r3, #1]
    a166:	bd70      	pop	{r4, r5, r6, pc}
    a168:	20000164 	.word	0x20000164
    a16c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a170:	4c26      	ldr	r4, [pc, #152]	; (a20c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf60>)
    a172:	2501      	movs	r5, #1
    a174:	6862      	ldr	r2, [r4, #4]
    a176:	f892 0276 	ldrb.w	r0, [r2, #630]	; 0x276
    a17a:	b108      	cbz	r0, a180 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed4>
    a17c:	2701      	movs	r7, #1
    a17e:	e000      	b.n	a182 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed6>
    a180:	2700      	movs	r7, #0
    a182:	f892 1277 	ldrb.w	r1, [r2, #631]	; 0x277
    a186:	b109      	cbz	r1, a18c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xee0>
    a188:	2601      	movs	r6, #1
    a18a:	e000      	b.n	a18e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xee2>
    a18c:	2600      	movs	r6, #0
    a18e:	b90f      	cbnz	r7, a194 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xee8>
    a190:	f892 006e 	ldrb.w	r0, [r2, #110]	; 0x6e
    a194:	b90e      	cbnz	r6, a19a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeee>
    a196:	f892 106f 	ldrb.w	r1, [r2, #111]	; 0x6f
    a19a:	f102 0366 	add.w	r3, r2, #102	; 0x66
    a19e:	7218      	strb	r0, [r3, #8]
    a1a0:	7259      	strb	r1, [r3, #9]
    a1a2:	20ff      	movs	r0, #255	; 0xff
    a1a4:	7298      	strb	r0, [r3, #10]
    a1a6:	f892 0124 	ldrb.w	r0, [r2, #292]	; 0x124
    a1aa:	2801      	cmp	r0, #1
    a1ac:	d001      	beq.n	a1b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf06>
    a1ae:	b907      	cbnz	r7, a1b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf06>
    a1b0:	b116      	cbz	r6, a1b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf0c>
    a1b2:	2000      	movs	r0, #0
    a1b4:	f000 f82c 	bl	a210 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf64>
    a1b8:	6860      	ldr	r0, [r4, #4]
    a1ba:	3030      	adds	r0, #48	; 0x30
    a1bc:	f005 fb60 	bl	f880 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    a1c0:	4607      	mov	r7, r0
    a1c2:	2105      	movs	r1, #5
    a1c4:	6860      	ldr	r0, [r4, #4]
    a1c6:	f7fe fc4f 	bl	8a68 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    a1ca:	6860      	ldr	r0, [r4, #4]
    a1cc:	3030      	adds	r0, #48	; 0x30
    a1ce:	f005 fb57 	bl	f880 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    a1d2:	4606      	mov	r6, r0
    a1d4:	42b7      	cmp	r7, r6
    a1d6:	d20a      	bcs.n	a1ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf42>
    a1d8:	f7f8 fd1a 	bl	2c10 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
    a1dc:	4601      	mov	r1, r0
    a1de:	1bf0      	subs	r0, r6, r7
    a1e0:	2865      	cmp	r0, #101	; 0x65
    a1e2:	d200      	bcs.n	a1e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf3a>
    a1e4:	2065      	movs	r0, #101	; 0x65
    a1e6:	f7f8 fc35 	bl	2a54 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    a1ea:	b100      	cbz	r0, a1ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf42>
    a1ec:	2500      	movs	r5, #0
    a1ee:	6860      	ldr	r0, [r4, #4]
    a1f0:	f005 faf0 	bl	f7d4 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    a1f4:	b138      	cbz	r0, a206 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf5a>
    a1f6:	6863      	ldr	r3, [r4, #4]
    a1f8:	f503 72a2 	add.w	r2, r3, #324	; 0x144
    a1fc:	8818      	ldrh	r0, [r3, #0]
    a1fe:	f103 0130 	add.w	r1, r3, #48	; 0x30
    a202:	f005 faa4 	bl	f74e <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    a206:	4628      	mov	r0, r5
    a208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a20c:	20000174 	.word	0x20000174
    a210:	b510      	push	{r4, lr}
    a212:	4c11      	ldr	r4, [pc, #68]	; (a258 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfac>)
    a214:	6861      	ldr	r1, [r4, #4]
    a216:	880a      	ldrh	r2, [r1, #0]
    a218:	f8a1 2188 	strh.w	r2, [r1, #392]	; 0x188
    a21c:	f881 0186 	strb.w	r0, [r1, #390]	; 0x186
    a220:	f891 006e 	ldrb.w	r0, [r1, #110]	; 0x6e
    a224:	f006 faae 	bl	10784 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    a228:	6861      	ldr	r1, [r4, #4]
    a22a:	f881 018a 	strb.w	r0, [r1, #394]	; 0x18a
    a22e:	f891 006f 	ldrb.w	r0, [r1, #111]	; 0x6f
    a232:	f006 faa7 	bl	10784 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    a236:	6861      	ldr	r1, [r4, #4]
    a238:	2211      	movs	r2, #17
    a23a:	f881 018b 	strb.w	r0, [r1, #395]	; 0x18b
    a23e:	f501 70be 	add.w	r0, r1, #380	; 0x17c
    a242:	f7fd f9b5 	bl	75b0 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    a246:	6861      	ldr	r1, [r4, #4]
    a248:	2000      	movs	r0, #0
    a24a:	f881 0124 	strb.w	r0, [r1, #292]	; 0x124
    a24e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a252:	f7fd ba7f 	b.w	7754 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a256:	0000      	.short	0x0000
    a258:	20000174 	.word	0x20000174
    a25c:	b570      	push	{r4, r5, r6, lr}
    a25e:	4d0f      	ldr	r5, [pc, #60]	; (a29c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xff0>)
    a260:	686c      	ldr	r4, [r5, #4]
    a262:	f894 1085 	ldrb.w	r1, [r4, #133]	; 0x85
    a266:	2920      	cmp	r1, #32
    a268:	d002      	beq.n	a270 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfc4>
    a26a:	2927      	cmp	r1, #39	; 0x27
    a26c:	d003      	beq.n	a276 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfca>
    a26e:	e011      	b.n	a294 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfe8>
    a270:	f7ff ffce 	bl	a210 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf64>
    a274:	e008      	b.n	a288 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfdc>
    a276:	f894 2086 	ldrb.w	r2, [r4, #134]	; 0x86
    a27a:	f104 0078 	add.w	r0, r4, #120	; 0x78
    a27e:	2301      	movs	r3, #1
    a280:	210b      	movs	r1, #11
    a282:	f004 fdcd 	bl	ee20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a286:	b138      	cbz	r0, a298 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfec>
    a288:	6869      	ldr	r1, [r5, #4]
    a28a:	2000      	movs	r0, #0
    a28c:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a290:	f881 00be 	strb.w	r0, [r1, #190]	; 0xbe
    a294:	2000      	movs	r0, #0
    a296:	bd70      	pop	{r4, r5, r6, pc}
    a298:	202a      	movs	r0, #42	; 0x2a
    a29a:	e7e9      	b.n	a270 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfc4>
    a29c:	20000174 	.word	0x20000174
    a2a0:	b570      	push	{r4, r5, r6, lr}
    a2a2:	4c17      	ldr	r4, [pc, #92]	; (a300 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1054>)
    a2a4:	2301      	movs	r3, #1
    a2a6:	2100      	movs	r1, #0
    a2a8:	6860      	ldr	r0, [r4, #4]
    a2aa:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a2ae:	3078      	adds	r0, #120	; 0x78
    a2b0:	f004 fdb6 	bl	ee20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a2b4:	b1b0      	cbz	r0, a2e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1038>
    a2b6:	f1a4 0510 	sub.w	r5, r4, #16
    a2ba:	68e8      	ldr	r0, [r5, #12]
    a2bc:	f005 f809 	bl	f2d2 <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>
    a2c0:	6861      	ldr	r1, [r4, #4]
    a2c2:	f8a1 0274 	strh.w	r0, [r1, #628]	; 0x274
    a2c6:	f8b1 107c 	ldrh.w	r1, [r1, #124]	; 0x7c
    a2ca:	f006 fa74 	bl	107b6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    a2ce:	b158      	cbz	r0, a2e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x103c>
    a2d0:	6861      	ldr	r1, [r4, #4]
    a2d2:	2028      	movs	r0, #40	; 0x28
    a2d4:	2208      	movs	r2, #8
    a2d6:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    a2da:	f101 009d 	add.w	r0, r1, #157	; 0x9d
    a2de:	f7fd f967 	bl	75b0 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    a2e2:	e00b      	b.n	a2fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1050>
    a2e4:	2001      	movs	r0, #1
    a2e6:	bd70      	pop	{r4, r5, r6, pc}
    a2e8:	6861      	ldr	r1, [r4, #4]
    a2ea:	68e8      	ldr	r0, [r5, #12]
    a2ec:	f201 2176 	addw	r1, r1, #630	; 0x276
    a2f0:	f004 ffea 	bl	f2c8 <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>
    a2f4:	6861      	ldr	r1, [r4, #4]
    a2f6:	200b      	movs	r0, #11
    a2f8:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    a2fc:	2000      	movs	r0, #0
    a2fe:	bd70      	pop	{r4, r5, r6, pc}
    a300:	20000174 	.word	0x20000174
    a304:	b570      	push	{r4, r5, r6, lr}
    a306:	4d2b      	ldr	r5, [pc, #172]	; (a3b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1108>)
    a308:	2301      	movs	r3, #1
    a30a:	2100      	movs	r1, #0
    a30c:	6868      	ldr	r0, [r5, #4]
    a30e:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a312:	3078      	adds	r0, #120	; 0x78
    a314:	f004 fd84 	bl	ee20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a318:	b1d8      	cbz	r0, a352 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10a6>
    a31a:	f1a5 0410 	sub.w	r4, r5, #16
    a31e:	2100      	movs	r1, #0
    a320:	68e0      	ldr	r0, [r4, #12]
    a322:	f004 ffa9 	bl	f278 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>
    a326:	b1b0      	cbz	r0, a356 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10aa>
    a328:	68e0      	ldr	r0, [r4, #12]
    a32a:	6869      	ldr	r1, [r5, #4]
    a32c:	f8b0 000d 	ldrh.w	r0, [r0, #13]
    a330:	f8a1 0274 	strh.w	r0, [r1, #628]	; 0x274
    a334:	f8b1 107c 	ldrh.w	r1, [r1, #124]	; 0x7c
    a338:	f006 fa3d 	bl	107b6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    a33c:	b178      	cbz	r0, a35e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10b2>
    a33e:	6869      	ldr	r1, [r5, #4]
    a340:	2028      	movs	r0, #40	; 0x28
    a342:	2208      	movs	r2, #8
    a344:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    a348:	f101 009d 	add.w	r0, r1, #157	; 0x9d
    a34c:	f7fd f930 	bl	75b0 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    a350:	e02e      	b.n	a3b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1104>
    a352:	2001      	movs	r0, #1
    a354:	bd70      	pop	{r4, r5, r6, pc}
    a356:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a35a:	f000 b8f5 	b.w	a548 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x129c>
    a35e:	68e0      	ldr	r0, [r4, #12]
    a360:	f004 ffba 	bl	f2d8 <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>
    a364:	f004 fd3f 	bl	ede6 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    a368:	4606      	mov	r6, r0
    a36a:	6868      	ldr	r0, [r5, #4]
    a36c:	4631      	mov	r1, r6
    a36e:	f8c0 627c 	str.w	r6, [r0, #636]	; 0x27c
    a372:	68e0      	ldr	r0, [r4, #12]
    a374:	7900      	ldrb	r0, [r0, #4]
    a376:	f004 fecf 	bl	f118 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    a37a:	6869      	ldr	r1, [r5, #4]
    a37c:	f8a1 0276 	strh.w	r0, [r1, #630]	; 0x276
    a380:	68e0      	ldr	r0, [r4, #12]
    a382:	4631      	mov	r1, r6
    a384:	f8b0 0005 	ldrh.w	r0, [r0, #5]
    a388:	f004 fec2 	bl	f110 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    a38c:	6869      	ldr	r1, [r5, #4]
    a38e:	f8c1 0278 	str.w	r0, [r1, #632]	; 0x278
    a392:	68e0      	ldr	r0, [r4, #12]
    a394:	f004 ffa3 	bl	f2de <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>
    a398:	6869      	ldr	r1, [r5, #4]
    a39a:	f8a1 0280 	strh.w	r0, [r1, #640]	; 0x280
    a39e:	68e0      	ldr	r0, [r4, #12]
    a3a0:	f004 ffa0 	bl	f2e4 <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>
    a3a4:	6869      	ldr	r1, [r5, #4]
    a3a6:	f8a1 0282 	strh.w	r0, [r1, #642]	; 0x282
    a3aa:	200d      	movs	r0, #13
    a3ac:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    a3b0:	2000      	movs	r0, #0
    a3b2:	bd70      	pop	{r4, r5, r6, pc}
    a3b4:	20000174 	.word	0x20000174
    a3b8:	b538      	push	{r3, r4, r5, lr}
    a3ba:	4c2c      	ldr	r4, [pc, #176]	; (a46c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11c0>)
    a3bc:	2301      	movs	r3, #1
    a3be:	2100      	movs	r1, #0
    a3c0:	6860      	ldr	r0, [r4, #4]
    a3c2:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a3c6:	3078      	adds	r0, #120	; 0x78
    a3c8:	f004 fd2a 	bl	ee20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a3cc:	b970      	cbnz	r0, a3ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1140>
    a3ce:	6860      	ldr	r0, [r4, #4]
    a3d0:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a3d4:	2a12      	cmp	r2, #18
    a3d6:	d009      	beq.n	a3ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1140>
    a3d8:	2301      	movs	r3, #1
    a3da:	2105      	movs	r1, #5
    a3dc:	3078      	adds	r0, #120	; 0x78
    a3de:	f004 fd1f 	bl	ee20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a3e2:	b108      	cbz	r0, a3e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x113c>
    a3e4:	2008      	movs	r0, #8
    a3e6:	bd38      	pop	{r3, r4, r5, pc}
    a3e8:	2001      	movs	r0, #1
    a3ea:	bd38      	pop	{r3, r4, r5, pc}
    a3ec:	6860      	ldr	r0, [r4, #4]
    a3ee:	f890 00c4 	ldrb.w	r0, [r0, #196]	; 0xc4
    a3f2:	b908      	cbnz	r0, a3f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x114c>
    a3f4:	f7ff f85c 	bl	94b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    a3f8:	4d1c      	ldr	r5, [pc, #112]	; (a46c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11c0>)
    a3fa:	6861      	ldr	r1, [r4, #4]
    a3fc:	3d10      	subs	r5, #16
    a3fe:	f501 71f0 	add.w	r1, r1, #480	; 0x1e0
    a402:	68e8      	ldr	r0, [r5, #12]
    a404:	f004 ff7d 	bl	f302 <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>
    a408:	6861      	ldr	r1, [r4, #4]
    a40a:	68e8      	ldr	r0, [r5, #12]
    a40c:	f501 7180 	add.w	r1, r1, #256	; 0x100
    a410:	f004 ff6e 	bl	f2f0 <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>
    a414:	6861      	ldr	r1, [r4, #4]
    a416:	f891 028c 	ldrb.w	r0, [r1, #652]	; 0x28c
    a41a:	f88d 0000 	strb.w	r0, [sp]
    a41e:	9800      	ldr	r0, [sp, #0]
    a420:	9000      	str	r0, [sp, #0]
    a422:	f89d 0000 	ldrb.w	r0, [sp]
    a426:	b120      	cbz	r0, a432 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1186>
    a428:	f240 21a2 	movw	r1, #674	; 0x2a2
    a42c:	2031      	movs	r0, #49	; 0x31
    a42e:	f7fb f897 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a432:	8808      	ldrh	r0, [r1, #0]
    a434:	f8a1 028e 	strh.w	r0, [r1, #654]	; 0x28e
    a438:	f501 7124 	add.w	r1, r1, #656	; 0x290
    a43c:	68e8      	ldr	r0, [r5, #12]
    a43e:	f004 ff5b 	bl	f2f8 <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>
    a442:	6861      	ldr	r1, [r4, #4]
    a444:	68e8      	ldr	r0, [r5, #12]
    a446:	f501 7126 	add.w	r1, r1, #664	; 0x298
    a44a:	f004 ff4e 	bl	f2ea <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>
    a44e:	6861      	ldr	r1, [r4, #4]
    a450:	2207      	movs	r2, #7
    a452:	f501 7021 	add.w	r0, r1, #644	; 0x284
    a456:	f7fd f8ab 	bl	75b0 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    a45a:	6861      	ldr	r1, [r4, #4]
    a45c:	2014      	movs	r0, #20
    a45e:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    a462:	f7fd f977 	bl	7754 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a466:	2000      	movs	r0, #0
    a468:	bd38      	pop	{r3, r4, r5, pc}
    a46a:	0000      	.short	0x0000
    a46c:	20000174 	.word	0x20000174
    a470:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    a472:	4c13      	ldr	r4, [pc, #76]	; (a4c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1214>)
    a474:	6860      	ldr	r0, [r4, #4]
    a476:	f890 0087 	ldrb.w	r0, [r0, #135]	; 0x87
    a47a:	07c0      	lsls	r0, r0, #31
    a47c:	d001      	beq.n	a482 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11d6>
    a47e:	2001      	movs	r0, #1
    a480:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    a482:	480f      	ldr	r0, [pc, #60]	; (a4c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1214>)
    a484:	4669      	mov	r1, sp
    a486:	3810      	subs	r0, #16
    a488:	68c0      	ldr	r0, [r0, #12]
    a48a:	f004 ff40 	bl	f30e <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>
    a48e:	f001 fad9 	bl	ba44 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    a492:	f644 122f 	movw	r2, #18735	; 0x492f
    a496:	4010      	ands	r0, r2
    a498:	e9dd 5200 	ldrd	r5, r2, [sp]
    a49c:	6863      	ldr	r3, [r4, #4]
    a49e:	4005      	ands	r5, r0
    a4a0:	f001 0106 	and.w	r1, r1, #6
    a4a4:	f843 5fd4 	str.w	r5, [r3, #212]!
    a4a8:	400a      	ands	r2, r1
    a4aa:	605a      	str	r2, [r3, #4]
    a4ac:	f7ff f800 	bl	94b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    a4b0:	6860      	ldr	r0, [r4, #4]
    a4b2:	f810 1f87 	ldrb.w	r1, [r0, #135]!
    a4b6:	f041 0101 	orr.w	r1, r1, #1
    a4ba:	7001      	strb	r1, [r0, #0]
    a4bc:	2000      	movs	r0, #0
    a4be:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    a4c0:	20000174 	.word	0x20000174
    a4c4:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    a4c8:	4d1e      	ldr	r5, [pc, #120]	; (a544 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1298>)
    a4ca:	2301      	movs	r3, #1
    a4cc:	2107      	movs	r1, #7
    a4ce:	6868      	ldr	r0, [r5, #4]
    a4d0:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a4d4:	3078      	adds	r0, #120	; 0x78
    a4d6:	f004 fca3 	bl	ee20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a4da:	b380      	cbz	r0, a53e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1292>
    a4dc:	f1a5 0010 	sub.w	r0, r5, #16
    a4e0:	4669      	mov	r1, sp
    a4e2:	68c0      	ldr	r0, [r0, #12]
    a4e4:	f004 ff18 	bl	f318 <sym_KIWKQDEBPWXHISYFTEC7I32RP3MHD6CJEPVDW6I>
    a4e8:	686e      	ldr	r6, [r5, #4]
    a4ea:	f89d 7004 	ldrb.w	r7, [sp, #4]
    a4ee:	36d4      	adds	r6, #212	; 0xd4
    a4f0:	9c00      	ldr	r4, [sp, #0]
    a4f2:	f001 faa7 	bl	ba44 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    a4f6:	4004      	ands	r4, r0
    a4f8:	f644 102f 	movw	r0, #18735	; 0x492f
    a4fc:	4004      	ands	r4, r0
    a4fe:	400f      	ands	r7, r1
    a500:	f007 0006 	and.w	r0, r7, #6
    a504:	6034      	str	r4, [r6, #0]
    a506:	6070      	str	r0, [r6, #4]
    a508:	6869      	ldr	r1, [r5, #4]
    a50a:	2000      	movs	r0, #0
    a50c:	f881 00be 	strb.w	r0, [r1, #190]	; 0xbe
    a510:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a514:	880a      	ldrh	r2, [r1, #0]
    a516:	f8a1 2198 	strh.w	r2, [r1, #408]	; 0x198
    a51a:	f881 0196 	strb.w	r0, [r1, #406]	; 0x196
    a51e:	9a00      	ldr	r2, [sp, #0]
    a520:	f8c1 219a 	str.w	r2, [r1, #410]	; 0x19a
    a524:	9a01      	ldr	r2, [sp, #4]
    a526:	f8c1 219e 	str.w	r2, [r1, #414]	; 0x19e
    a52a:	f501 70c6 	add.w	r0, r1, #396	; 0x18c
    a52e:	2205      	movs	r2, #5
    a530:	f7fd f83e 	bl	75b0 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    a534:	f7fd f90e 	bl	7754 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a538:	2000      	movs	r0, #0
    a53a:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    a53e:	e7ff      	b.n	a540 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1294>
    a540:	2001      	movs	r0, #1
    a542:	e7fa      	b.n	a53a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x128e>
    a544:	20000174 	.word	0x20000174
    a548:	480b      	ldr	r0, [pc, #44]	; (a578 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12cc>)
    a54a:	b510      	push	{r4, lr}
    a54c:	6840      	ldr	r0, [r0, #4]
    a54e:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    a552:	070a      	lsls	r2, r1, #28
    a554:	d501      	bpl.n	a55a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12ae>
    a556:	2001      	movs	r0, #1
    a558:	bd10      	pop	{r4, pc}
    a55a:	f041 0108 	orr.w	r1, r1, #8
    a55e:	f880 1087 	strb.w	r1, [r0, #135]	; 0x87
    a562:	4905      	ldr	r1, [pc, #20]	; (a578 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12cc>)
    a564:	3910      	subs	r1, #16
    a566:	68c9      	ldr	r1, [r1, #12]
    a568:	78c9      	ldrb	r1, [r1, #3]
    a56a:	f880 1108 	strb.w	r1, [r0, #264]	; 0x108
    a56e:	f7fe ff9f 	bl	94b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    a572:	2000      	movs	r0, #0
    a574:	bd10      	pop	{r4, pc}
    a576:	0000      	.short	0x0000
    a578:	20000174 	.word	0x20000174
    a57c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    a580:	4d36      	ldr	r5, [pc, #216]	; (a65c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13b0>)
    a582:	6868      	ldr	r0, [r5, #4]
    a584:	f890 0087 	ldrb.w	r0, [r0, #135]	; 0x87
    a588:	f010 0f30 	tst.w	r0, #48	; 0x30
    a58c:	d002      	beq.n	a594 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12e8>
    a58e:	2001      	movs	r0, #1
    a590:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    a594:	4c31      	ldr	r4, [pc, #196]	; (a65c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13b0>)
    a596:	3c10      	subs	r4, #16
    a598:	68e0      	ldr	r0, [r4, #12]
    a59a:	f004 fed8 	bl	f34e <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    a59e:	b328      	cbz	r0, a5ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1340>
    a5a0:	68e0      	ldr	r0, [r4, #12]
    a5a2:	f004 fec6 	bl	f332 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    a5a6:	4607      	mov	r7, r0
    a5a8:	68e0      	ldr	r0, [r4, #12]
    a5aa:	f004 fec6 	bl	f33a <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    a5ae:	4680      	mov	r8, r0
    a5b0:	68e0      	ldr	r0, [r4, #12]
    a5b2:	f004 febc 	bl	f32e <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    a5b6:	4606      	mov	r6, r0
    a5b8:	68e0      	ldr	r0, [r4, #12]
    a5ba:	f004 febc 	bl	f336 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    a5be:	4601      	mov	r1, r0
    a5c0:	9700      	str	r7, [sp, #0]
    a5c2:	6868      	ldr	r0, [r5, #4]
    a5c4:	4643      	mov	r3, r8
    a5c6:	4632      	mov	r2, r6
    a5c8:	3030      	adds	r0, #48	; 0x30
    a5ca:	f005 f993 	bl	f8f4 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    a5ce:	78a0      	ldrb	r0, [r4, #2]
    a5d0:	0781      	lsls	r1, r0, #30
    a5d2:	f04f 0001 	mov.w	r0, #1
    a5d6:	d503      	bpl.n	a5e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1334>
    a5d8:	68a1      	ldr	r1, [r4, #8]
    a5da:	78c9      	ldrb	r1, [r1, #3]
    a5dc:	2914      	cmp	r1, #20
    a5de:	d009      	beq.n	a5f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1348>
    a5e0:	6869      	ldr	r1, [r5, #4]
    a5e2:	f891 1085 	ldrb.w	r1, [r1, #133]	; 0x85
    a5e6:	291c      	cmp	r1, #28
    a5e8:	d004      	beq.n	a5f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1348>
    a5ea:	e006      	b.n	a5fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x134e>
    a5ec:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    a5f0:	f7ff bfaa 	b.w	a548 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x129c>
    a5f4:	6869      	ldr	r1, [r5, #4]
    a5f6:	f881 0064 	strb.w	r0, [r1, #100]	; 0x64
    a5fa:	686b      	ldr	r3, [r5, #4]
    a5fc:	f893 0064 	ldrb.w	r0, [r3, #100]	; 0x64
    a600:	2801      	cmp	r0, #1
    a602:	d011      	beq.n	a628 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x137c>
    a604:	f893 011b 	ldrb.w	r0, [r3, #283]	; 0x11b
    a608:	f88d 0004 	strb.w	r0, [sp, #4]
    a60c:	9801      	ldr	r0, [sp, #4]
    a60e:	9001      	str	r0, [sp, #4]
    a610:	f89d 0004 	ldrb.w	r0, [sp, #4]
    a614:	b940      	cbnz	r0, a628 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x137c>
    a616:	f893 011a 	ldrb.w	r0, [r3, #282]	; 0x11a
    a61a:	f88d 0000 	strb.w	r0, [sp]
    a61e:	9800      	ldr	r0, [sp, #0]
    a620:	9000      	str	r0, [sp, #0]
    a622:	f89d 0000 	ldrb.w	r0, [sp]
    a626:	b148      	cbz	r0, a63c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1390>
    a628:	f813 0f87 	ldrb.w	r0, [r3, #135]!
    a62c:	f040 0010 	orr.w	r0, r0, #16
    a630:	f883 0000 	strb.w	r0, [r3]
    a634:	f7fe ff3c 	bl	94b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    a638:	2000      	movs	r0, #0
    a63a:	e7a9      	b.n	a590 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12e4>
    a63c:	f893 0087 	ldrb.w	r0, [r3, #135]	; 0x87
    a640:	f503 72ad 	add.w	r2, r3, #346	; 0x15a
    a644:	f040 0020 	orr.w	r0, r0, #32
    a648:	f883 0087 	strb.w	r0, [r3, #135]	; 0x87
    a64c:	f103 0130 	add.w	r1, r3, #48	; 0x30
    a650:	8818      	ldrh	r0, [r3, #0]
    a652:	f005 f956 	bl	f902 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    a656:	f7fd f87d 	bl	7754 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a65a:	e7eb      	b.n	a634 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1388>
    a65c:	20000174 	.word	0x20000174
    a660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a664:	4c1b      	ldr	r4, [pc, #108]	; (a6d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1428>)
    a666:	2301      	movs	r3, #1
    a668:	210a      	movs	r1, #10
    a66a:	6860      	ldr	r0, [r4, #4]
    a66c:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a670:	3078      	adds	r0, #120	; 0x78
    a672:	f004 fbd5 	bl	ee20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a676:	b358      	cbz	r0, a6d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1424>
    a678:	f1a4 0510 	sub.w	r5, r4, #16
    a67c:	68e8      	ldr	r0, [r5, #12]
    a67e:	f004 fe66 	bl	f34e <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    a682:	b1d0      	cbz	r0, a6ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x140e>
    a684:	68e8      	ldr	r0, [r5, #12]
    a686:	f004 fe54 	bl	f332 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    a68a:	4680      	mov	r8, r0
    a68c:	68e8      	ldr	r0, [r5, #12]
    a68e:	f004 fe54 	bl	f33a <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    a692:	4607      	mov	r7, r0
    a694:	68e8      	ldr	r0, [r5, #12]
    a696:	f004 fe4a 	bl	f32e <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    a69a:	4606      	mov	r6, r0
    a69c:	68e8      	ldr	r0, [r5, #12]
    a69e:	f004 fe4a 	bl	f336 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    a6a2:	4601      	mov	r1, r0
    a6a4:	f8cd 8000 	str.w	r8, [sp]
    a6a8:	6860      	ldr	r0, [r4, #4]
    a6aa:	463b      	mov	r3, r7
    a6ac:	4632      	mov	r2, r6
    a6ae:	3030      	adds	r0, #48	; 0x30
    a6b0:	f005 f920 	bl	f8f4 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    a6b4:	6860      	ldr	r0, [r4, #4]
    a6b6:	f005 f88d 	bl	f7d4 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    a6ba:	6861      	ldr	r1, [r4, #4]
    a6bc:	2000      	movs	r0, #0
    a6be:	f881 00be 	strb.w	r0, [r1, #190]	; 0xbe
    a6c2:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a6c6:	f7ff f8d9 	bl	987c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d0>
    a6ca:	2000      	movs	r0, #0
    a6cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a6d0:	2001      	movs	r0, #1
    a6d2:	e7fb      	b.n	a6cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1420>
    a6d4:	20000174 	.word	0x20000174
    a6d8:	b510      	push	{r4, lr}
    a6da:	4c09      	ldr	r4, [pc, #36]	; (a700 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1454>)
    a6dc:	6860      	ldr	r0, [r4, #4]
    a6de:	f890 0087 	ldrb.w	r0, [r0, #135]	; 0x87
    a6e2:	0740      	lsls	r0, r0, #29
    a6e4:	d501      	bpl.n	a6ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x143e>
    a6e6:	2001      	movs	r0, #1
    a6e8:	bd10      	pop	{r4, pc}
    a6ea:	f7fe fee1 	bl	94b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    a6ee:	6860      	ldr	r0, [r4, #4]
    a6f0:	f810 1f87 	ldrb.w	r1, [r0, #135]!
    a6f4:	f041 0104 	orr.w	r1, r1, #4
    a6f8:	7001      	strb	r1, [r0, #0]
    a6fa:	2000      	movs	r0, #0
    a6fc:	bd10      	pop	{r4, pc}
    a6fe:	0000      	.short	0x0000
    a700:	20000174 	.word	0x20000174
    a704:	b510      	push	{r4, lr}
    a706:	4c0a      	ldr	r4, [pc, #40]	; (a730 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1484>)
    a708:	2301      	movs	r3, #1
    a70a:	2109      	movs	r1, #9
    a70c:	6860      	ldr	r0, [r4, #4]
    a70e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a712:	3078      	adds	r0, #120	; 0x78
    a714:	f004 fb84 	bl	ee20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a718:	2800      	cmp	r0, #0
    a71a:	d007      	beq.n	a72c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1480>
    a71c:	6860      	ldr	r0, [r4, #4]
    a71e:	2100      	movs	r1, #0
    a720:	f800 1fb2 	strb.w	r1, [r0, #178]!
    a724:	7301      	strb	r1, [r0, #12]
    a726:	f800 1c2d 	strb.w	r1, [r0, #-45]
    a72a:	4608      	mov	r0, r1
    a72c:	bd10      	pop	{r4, pc}
    a72e:	0000      	.short	0x0000
    a730:	20000174 	.word	0x20000174
    a734:	b510      	push	{r4, lr}
    a736:	4c0f      	ldr	r4, [pc, #60]	; (a774 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14c8>)
    a738:	2301      	movs	r3, #1
    a73a:	2100      	movs	r1, #0
    a73c:	6860      	ldr	r0, [r4, #4]
    a73e:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a742:	3078      	adds	r0, #120	; 0x78
    a744:	f004 fb6c 	bl	ee20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a748:	b138      	cbz	r0, a75a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14ae>
    a74a:	f7fe feb1 	bl	94b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    a74e:	6861      	ldr	r1, [r4, #4]
    a750:	2010      	movs	r0, #16
    a752:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    a756:	2000      	movs	r0, #0
    a758:	bd10      	pop	{r4, pc}
    a75a:	6860      	ldr	r0, [r4, #4]
    a75c:	2301      	movs	r3, #1
    a75e:	2105      	movs	r1, #5
    a760:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a764:	3078      	adds	r0, #120	; 0x78
    a766:	f004 fb5b 	bl	ee20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a76a:	b108      	cbz	r0, a770 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14c4>
    a76c:	2008      	movs	r0, #8
    a76e:	bd10      	pop	{r4, pc}
    a770:	2001      	movs	r0, #1
    a772:	bd10      	pop	{r4, pc}
    a774:	20000174 	.word	0x20000174
    a778:	4806      	ldr	r0, [pc, #24]	; (a794 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14e8>)
    a77a:	6840      	ldr	r0, [r0, #4]
    a77c:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a780:	2911      	cmp	r1, #17
    a782:	d001      	beq.n	a788 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14dc>
    a784:	2002      	movs	r0, #2
    a786:	4770      	bx	lr
    a788:	2112      	movs	r1, #18
    a78a:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    a78e:	2000      	movs	r0, #0
    a790:	4770      	bx	lr
    a792:	0000      	.short	0x0000
    a794:	20000174 	.word	0x20000174
    a798:	b538      	push	{r3, r4, r5, lr}
    a79a:	4c36      	ldr	r4, [pc, #216]	; (a874 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c8>)
    a79c:	2301      	movs	r3, #1
    a79e:	210b      	movs	r1, #11
    a7a0:	6860      	ldr	r0, [r4, #4]
    a7a2:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a7a6:	3078      	adds	r0, #120	; 0x78
    a7a8:	f004 fb3a 	bl	ee20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a7ac:	bb80      	cbnz	r0, a810 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1564>
    a7ae:	6860      	ldr	r0, [r4, #4]
    a7b0:	2301      	movs	r3, #1
    a7b2:	2100      	movs	r1, #0
    a7b4:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a7b8:	3078      	adds	r0, #120	; 0x78
    a7ba:	f004 fb31 	bl	ee20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a7be:	b328      	cbz	r0, a80c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1560>
    a7c0:	6860      	ldr	r0, [r4, #4]
    a7c2:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    a7c6:	2824      	cmp	r0, #36	; 0x24
    a7c8:	d023      	beq.n	a812 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1566>
    a7ca:	f1a4 0510 	sub.w	r5, r4, #16
    a7ce:	68e8      	ldr	r0, [r5, #12]
    a7d0:	f004 fdd9 	bl	f386 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>
    a7d4:	b1f8      	cbz	r0, a816 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x156a>
    a7d6:	6860      	ldr	r0, [r4, #4]
    a7d8:	2102      	movs	r1, #2
    a7da:	30d4      	adds	r0, #212	; 0xd4
    a7dc:	f005 ff79 	bl	106d2 <CONFIG_PM_SRAM_SIZE+0x6d2>
    a7e0:	68e8      	ldr	r0, [r5, #12]
    a7e2:	7941      	ldrb	r1, [r0, #5]
    a7e4:	f001 0207 	and.w	r2, r1, #7
    a7e8:	6861      	ldr	r1, [r4, #4]
    a7ea:	f881 2067 	strb.w	r2, [r1, #103]	; 0x67
    a7ee:	7900      	ldrb	r0, [r0, #4]
    a7f0:	f000 0007 	and.w	r0, r0, #7
    a7f4:	f881 0066 	strb.w	r0, [r1, #102]	; 0x66
    a7f8:	f891 3125 	ldrb.w	r3, [r1, #293]	; 0x125
    a7fc:	f88d 3000 	strb.w	r3, [sp]
    a800:	9b00      	ldr	r3, [sp, #0]
    a802:	9300      	str	r3, [sp, #0]
    a804:	f89d 3000 	ldrb.w	r3, [sp]
    a808:	bb5b      	cbnz	r3, a862 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b6>
    a80a:	e008      	b.n	a81e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1572>
    a80c:	2001      	movs	r0, #1
    a80e:	bd38      	pop	{r3, r4, r5, pc}
    a810:	e7ff      	b.n	a812 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1566>
    a812:	2020      	movs	r0, #32
    a814:	e7fb      	b.n	a80e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1562>
    a816:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    a81a:	f7ff be95 	b.w	a548 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x129c>
    a81e:	f891 3124 	ldrb.w	r3, [r1, #292]	; 0x124
    a822:	2b01      	cmp	r3, #1
    a824:	d01d      	beq.n	a862 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b6>
    a826:	f101 036e 	add.w	r3, r1, #110	; 0x6e
    a82a:	785d      	ldrb	r5, [r3, #1]
    a82c:	4285      	cmp	r5, r0
    a82e:	d106      	bne.n	a83e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1592>
    a830:	7818      	ldrb	r0, [r3, #0]
    a832:	4290      	cmp	r0, r2
    a834:	d103      	bne.n	a83e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1592>
    a836:	2002      	movs	r0, #2
    a838:	f881 0124 	strb.w	r0, [r1, #292]	; 0x124
    a83c:	e011      	b.n	a862 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b6>
    a83e:	f501 70bc 	add.w	r0, r1, #376	; 0x178
    a842:	880a      	ldrh	r2, [r1, #0]
    a844:	f820 2b02 	strh.w	r2, [r0], #2
    a848:	f891 2066 	ldrb.w	r2, [r1, #102]	; 0x66
    a84c:	f800 2b01 	strb.w	r2, [r0], #1
    a850:	f891 2067 	ldrb.w	r2, [r1, #103]	; 0x67
    a854:	f800 290d 	strb.w	r2, [r0], #-13
    a858:	221b      	movs	r2, #27
    a85a:	f7fc fea9 	bl	75b0 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    a85e:	f7fc ff79 	bl	7754 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a862:	6861      	ldr	r1, [r4, #4]
    a864:	2021      	movs	r0, #33	; 0x21
    a866:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    a86a:	f7fe fe21 	bl	94b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    a86e:	2000      	movs	r0, #0
    a870:	e7cd      	b.n	a80e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1562>
    a872:	0000      	.short	0x0000
    a874:	20000174 	.word	0x20000174
    a878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a87c:	4951      	ldr	r1, [pc, #324]	; (a9c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1718>)
    a87e:	6848      	ldr	r0, [r1, #4]
    a880:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a884:	2a20      	cmp	r2, #32
    a886:	d009      	beq.n	a89c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15f0>
    a888:	f05f 0600 	movs.w	r6, #0
    a88c:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a890:	2a22      	cmp	r2, #34	; 0x22
    a892:	d005      	beq.n	a8a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15f4>
    a894:	b3a6      	cbz	r6, a900 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1654>
    a896:	f100 0485 	add.w	r4, r0, #133	; 0x85
    a89a:	e003      	b.n	a8a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15f8>
    a89c:	2601      	movs	r6, #1
    a89e:	e7f5      	b.n	a88c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15e0>
    a8a0:	f100 0486 	add.w	r4, r0, #134	; 0x86
    a8a4:	4688      	mov	r8, r1
    a8a6:	2102      	movs	r1, #2
    a8a8:	30d4      	adds	r0, #212	; 0xd4
    a8aa:	f005 ff12 	bl	106d2 <CONFIG_PM_SRAM_SIZE+0x6d2>
    a8ae:	4d45      	ldr	r5, [pc, #276]	; (a9c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1718>)
    a8b0:	3d10      	subs	r5, #16
    a8b2:	68e8      	ldr	r0, [r5, #12]
    a8b4:	f004 fd71 	bl	f39a <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>
    a8b8:	2700      	movs	r7, #0
    a8ba:	b328      	cbz	r0, a908 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x165c>
    a8bc:	4631      	mov	r1, r6
    a8be:	68e8      	ldr	r0, [r5, #12]
    a8c0:	f7fe fec8 	bl	9654 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a8>
    a8c4:	b300      	cbz	r0, a908 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x165c>
    a8c6:	4646      	mov	r6, r8
    a8c8:	466a      	mov	r2, sp
    a8ca:	f8d8 0004 	ldr.w	r0, [r8, #4]
    a8ce:	68e9      	ldr	r1, [r5, #12]
    a8d0:	f004 fbd8 	bl	f084 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>
    a8d4:	b3a8      	cbz	r0, a942 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1696>
    a8d6:	68e8      	ldr	r0, [r5, #12]
    a8d8:	f004 fd31 	bl	f33e <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    a8dc:	6871      	ldr	r1, [r6, #4]
    a8de:	f8a1 0274 	strh.w	r0, [r1, #628]	; 0x274
    a8e2:	f8b1 107c 	ldrh.w	r1, [r1, #124]	; 0x7c
    a8e6:	f005 ff66 	bl	107b6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    a8ea:	b358      	cbz	r0, a944 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1698>
    a8ec:	6871      	ldr	r1, [r6, #4]
    a8ee:	2028      	movs	r0, #40	; 0x28
    a8f0:	2208      	movs	r2, #8
    a8f2:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    a8f6:	f101 009d 	add.w	r0, r1, #157	; 0x9d
    a8fa:	f7fc fe59 	bl	75b0 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    a8fe:	e055      	b.n	a9ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1700>
    a900:	e7ff      	b.n	a902 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1656>
    a902:	2002      	movs	r0, #2
    a904:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a908:	f8d8 0004 	ldr.w	r0, [r8, #4]
    a90c:	f04f 0900 	mov.w	r9, #0
    a910:	f890 1124 	ldrb.w	r1, [r0, #292]	; 0x124
    a914:	2901      	cmp	r1, #1
    a916:	d016      	beq.n	a946 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x169a>
    a918:	f880 7124 	strb.w	r7, [r0, #292]	; 0x124
    a91c:	b1fe      	cbz	r6, a95e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16b2>
    a91e:	68e8      	ldr	r0, [r5, #12]
    a920:	f8d8 1004 	ldr.w	r1, [r8, #4]
    a924:	2201      	movs	r2, #1
    a926:	78c0      	ldrb	r0, [r0, #3]
    a928:	f881 0109 	strb.w	r0, [r1, #265]	; 0x109
    a92c:	4082      	lsls	r2, r0
    a92e:	f3c2 6000 	ubfx	r0, r2, #24, #1
    a932:	b160      	cbz	r0, a94e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16a2>
    a934:	200a      	movs	r0, #10
    a936:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a93a:	f891 00be 	ldrb.w	r0, [r1, #190]	; 0xbe
    a93e:	b9a0      	cbnz	r0, a96a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16be>
    a940:	e008      	b.n	a954 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16a8>
    a942:	e014      	b.n	a96e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c2>
    a944:	e027      	b.n	a996 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16ea>
    a946:	201e      	movs	r0, #30
    a948:	f7ff fc62 	bl	a210 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf64>
    a94c:	e7e6      	b.n	a91c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1670>
    a94e:	f240 31fd 	movw	r1, #1021	; 0x3fd
    a952:	e001      	b.n	a958 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16ac>
    a954:	f240 4105 	movw	r1, #1029	; 0x405
    a958:	2031      	movs	r0, #49	; 0x31
    a95a:	f7fa fe01 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a95e:	7027      	strb	r7, [r4, #0]
    a960:	f7fe fdb2 	bl	94c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    a964:	f7ff fdf0 	bl	a548 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x129c>
    a968:	4681      	mov	r9, r0
    a96a:	4648      	mov	r0, r9
    a96c:	e7ca      	b.n	a904 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1658>
    a96e:	6870      	ldr	r0, [r6, #4]
    a970:	f890 1124 	ldrb.w	r1, [r0, #292]	; 0x124
    a974:	2901      	cmp	r1, #1
    a976:	d009      	beq.n	a98c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16e0>
    a978:	f880 7124 	strb.w	r7, [r0, #292]	; 0x124
    a97c:	6870      	ldr	r0, [r6, #4]
    a97e:	f100 0186 	add.w	r1, r0, #134	; 0x86
    a982:	42a1      	cmp	r1, r4
    a984:	d112      	bne.n	a9ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1700>
    a986:	f880 7086 	strb.w	r7, [r0, #134]	; 0x86
    a98a:	e00f      	b.n	a9ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1700>
    a98c:	2000      	movs	r0, #0
    a98e:	f7ff fc3f 	bl	a210 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf64>
    a992:	7027      	strb	r7, [r4, #0]
    a994:	e7f2      	b.n	a97c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d0>
    a996:	6870      	ldr	r0, [r6, #4]
    a998:	f89d 1000 	ldrb.w	r1, [sp]
    a99c:	f880 1276 	strb.w	r1, [r0, #630]	; 0x276
    a9a0:	f89d 1001 	ldrb.w	r1, [sp, #1]
    a9a4:	f880 1277 	strb.w	r1, [r0, #631]	; 0x277
    a9a8:	2024      	movs	r0, #36	; 0x24
    a9aa:	7020      	strb	r0, [r4, #0]
    a9ac:	6870      	ldr	r0, [r6, #4]
    a9ae:	f100 0186 	add.w	r1, r0, #134	; 0x86
    a9b2:	42a1      	cmp	r1, r4
    a9b4:	d102      	bne.n	a9bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1710>
    a9b6:	f7fe fd87 	bl	94c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    a9ba:	e001      	b.n	a9c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1714>
    a9bc:	f880 70be 	strb.w	r7, [r0, #190]	; 0xbe
    a9c0:	2000      	movs	r0, #0
    a9c2:	e79f      	b.n	a904 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1658>
    a9c4:	20000174 	.word	0x20000174
    a9c8:	b570      	push	{r4, r5, r6, lr}
    a9ca:	480a      	ldr	r0, [pc, #40]	; (a9f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1748>)
    a9cc:	2102      	movs	r1, #2
    a9ce:	6840      	ldr	r0, [r0, #4]
    a9d0:	30d4      	adds	r0, #212	; 0xd4
    a9d2:	f005 fe7e 	bl	106d2 <CONFIG_PM_SRAM_SIZE+0x6d2>
    a9d6:	4c07      	ldr	r4, [pc, #28]	; (a9f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1748>)
    a9d8:	3c10      	subs	r4, #16
    a9da:	68e0      	ldr	r0, [r4, #12]
    a9dc:	f004 fced 	bl	f3ba <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>
    a9e0:	4605      	mov	r5, r0
    a9e2:	68e0      	ldr	r0, [r4, #12]
    a9e4:	f004 fceb 	bl	f3be <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>
    a9e8:	4601      	mov	r1, r0
    a9ea:	4628      	mov	r0, r5
    a9ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a9f0:	f005 beed 	b.w	107ce <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    a9f4:	20000174 	.word	0x20000174
    a9f8:	4808      	ldr	r0, [pc, #32]	; (aa1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1770>)
    a9fa:	68c0      	ldr	r0, [r0, #12]
    a9fc:	7901      	ldrb	r1, [r0, #4]
    a9fe:	4807      	ldr	r0, [pc, #28]	; (aa1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1770>)
    aa00:	3010      	adds	r0, #16
    aa02:	6840      	ldr	r0, [r0, #4]
    aa04:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    aa08:	2820      	cmp	r0, #32
    aa0a:	d005      	beq.n	aa18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x176c>
    aa0c:	2827      	cmp	r0, #39	; 0x27
    aa0e:	d003      	beq.n	aa18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x176c>
    aa10:	f05f 00fe 	movs.w	r0, #254	; 0xfe
    aa14:	f005 bedb 	b.w	107ce <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    aa18:	2016      	movs	r0, #22
    aa1a:	e7fb      	b.n	aa14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1768>
    aa1c:	20000164 	.word	0x20000164
    aa20:	b510      	push	{r4, lr}
    aa22:	4c08      	ldr	r4, [pc, #32]	; (aa44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1798>)
    aa24:	6860      	ldr	r0, [r4, #4]
    aa26:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    aa2a:	2817      	cmp	r0, #23
    aa2c:	d001      	beq.n	aa32 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1786>
    aa2e:	2002      	movs	r0, #2
    aa30:	bd10      	pop	{r4, pc}
    aa32:	f7fe fd49 	bl	94c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    aa36:	6861      	ldr	r1, [r4, #4]
    aa38:	201b      	movs	r0, #27
    aa3a:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    aa3e:	2000      	movs	r0, #0
    aa40:	bd10      	pop	{r4, pc}
    aa42:	0000      	.short	0x0000
    aa44:	20000174 	.word	0x20000174
    aa48:	b510      	push	{r4, lr}
    aa4a:	4c0c      	ldr	r4, [pc, #48]	; (aa7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17d0>)
    aa4c:	2301      	movs	r3, #1
    aa4e:	4619      	mov	r1, r3
    aa50:	6860      	ldr	r0, [r4, #4]
    aa52:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    aa56:	3078      	adds	r0, #120	; 0x78
    aa58:	f004 f9e2 	bl	ee20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    aa5c:	b108      	cbz	r0, aa62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17b6>
    aa5e:	2000      	movs	r0, #0
    aa60:	bd10      	pop	{r4, pc}
    aa62:	4806      	ldr	r0, [pc, #24]	; (aa7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17d0>)
    aa64:	3810      	subs	r0, #16
    aa66:	68c0      	ldr	r0, [r0, #12]
    aa68:	f004 fc6d 	bl	f346 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>
    aa6c:	6861      	ldr	r1, [r4, #4]
    aa6e:	f881 0089 	strb.w	r0, [r1, #137]	; 0x89
    aa72:	2007      	movs	r0, #7
    aa74:	f881 0088 	strb.w	r0, [r1, #136]	; 0x88
    aa78:	e7f1      	b.n	aa5e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17b2>
    aa7a:	0000      	.short	0x0000
    aa7c:	20000174 	.word	0x20000174
    aa80:	b570      	push	{r4, r5, r6, lr}
    aa82:	4834      	ldr	r0, [pc, #208]	; (ab54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a8>)
    aa84:	4c33      	ldr	r4, [pc, #204]	; (ab54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a8>)
    aa86:	2500      	movs	r5, #0
    aa88:	68c0      	ldr	r0, [r0, #12]
    aa8a:	3410      	adds	r4, #16
    aa8c:	6862      	ldr	r2, [r4, #4]
    aa8e:	7901      	ldrb	r1, [r0, #4]
    aa90:	f892 0085 	ldrb.w	r0, [r2, #133]	; 0x85
    aa94:	390e      	subs	r1, #14
    aa96:	290a      	cmp	r1, #10
    aa98:	d259      	bcs.n	ab4e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    aa9a:	e8df f001 	tbb	[pc, r1]
    aa9e:	5805      	.short	0x5805
    aaa0:	581a5858 	.word	0x581a5858
    aaa4:	442c5820 	.word	0x442c5820
    aaa8:	2804      	cmp	r0, #4
    aaaa:	d150      	bne.n	ab4e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    aaac:	f7fe fe56 	bl	975c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4b0>
    aab0:	6860      	ldr	r0, [r4, #4]
    aab2:	2205      	movs	r2, #5
    aab4:	f500 73c6 	add.w	r3, r0, #396	; 0x18c
    aab8:	8801      	ldrh	r1, [r0, #0]
    aaba:	f8a0 1198 	strh.w	r1, [r0, #408]	; 0x198
    aabe:	211a      	movs	r1, #26
    aac0:	f880 1196 	strb.w	r1, [r0, #406]	; 0x196
    aac4:	4601      	mov	r1, r0
    aac6:	4618      	mov	r0, r3
    aac8:	f7fc fd72 	bl	75b0 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    aacc:	f7fc fe42 	bl	7754 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    aad0:	e03d      	b.n	ab4e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    aad2:	280e      	cmp	r0, #14
    aad4:	d13b      	bne.n	ab4e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    aad6:	f7ff fe15 	bl	a704 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1458>
    aada:	4605      	mov	r5, r0
    aadc:	e037      	b.n	ab4e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    aade:	281c      	cmp	r0, #28
    aae0:	d135      	bne.n	ab4e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    aae2:	f7fe fe3b 	bl	975c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4b0>
    aae6:	6860      	ldr	r0, [r4, #4]
    aae8:	2105      	movs	r1, #5
    aaea:	30d4      	adds	r0, #212	; 0xd4
    aaec:	f005 fde7 	bl	106be <CONFIG_PM_SRAM_SIZE+0x6be>
    aaf0:	f7fe fec4 	bl	987c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d0>
    aaf4:	e02b      	b.n	ab4e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    aaf6:	2820      	cmp	r0, #32
    aaf8:	d001      	beq.n	aafe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1852>
    aafa:	2827      	cmp	r0, #39	; 0x27
    aafc:	d127      	bne.n	ab4e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    aafe:	f7fe fe2d 	bl	975c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4b0>
    ab02:	6860      	ldr	r0, [r4, #4]
    ab04:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    ab08:	2921      	cmp	r1, #33	; 0x21
    ab0a:	d020      	beq.n	ab4e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    ab0c:	2108      	movs	r1, #8
    ab0e:	30d4      	adds	r0, #212	; 0xd4
    ab10:	f005 fdd5 	bl	106be <CONFIG_PM_SRAM_SIZE+0x6be>
    ab14:	6860      	ldr	r0, [r4, #4]
    ab16:	210b      	movs	r1, #11
    ab18:	30d4      	adds	r0, #212	; 0xd4
    ab1a:	f005 fdd0 	bl	106be <CONFIG_PM_SRAM_SIZE+0x6be>
    ab1e:	201a      	movs	r0, #26
    ab20:	f7ff fb76 	bl	a210 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf64>
    ab24:	e013      	b.n	ab4e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    ab26:	f892 0086 	ldrb.w	r0, [r2, #134]	; 0x86
    ab2a:	2822      	cmp	r0, #34	; 0x22
    ab2c:	d10f      	bne.n	ab4e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    ab2e:	2600      	movs	r6, #0
    ab30:	f882 6086 	strb.w	r6, [r2, #134]	; 0x86
    ab34:	f7fe fcc8 	bl	94c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    ab38:	6860      	ldr	r0, [r4, #4]
    ab3a:	f890 0124 	ldrb.w	r0, [r0, #292]	; 0x124
    ab3e:	2801      	cmp	r0, #1
    ab40:	d102      	bne.n	ab48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x189c>
    ab42:	2000      	movs	r0, #0
    ab44:	f7ff fb64 	bl	a210 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf64>
    ab48:	6860      	ldr	r0, [r4, #4]
    ab4a:	f880 6124 	strb.w	r6, [r0, #292]	; 0x124
    ab4e:	4628      	mov	r0, r5
    ab50:	bd70      	pop	{r4, r5, r6, pc}
    ab52:	0000      	.short	0x0000
    ab54:	20000164 	.word	0x20000164
    ab58:	b570      	push	{r4, r5, r6, lr}
    ab5a:	4c31      	ldr	r4, [pc, #196]	; (ac20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1974>)
    ab5c:	6860      	ldr	r0, [r4, #4]
    ab5e:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    ab62:	0789      	lsls	r1, r1, #30
    ab64:	d507      	bpl.n	ab76 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18ca>
    ab66:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    ab6a:	2301      	movs	r3, #1
    ab6c:	2108      	movs	r1, #8
    ab6e:	3078      	adds	r0, #120	; 0x78
    ab70:	f004 f956 	bl	ee20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ab74:	b1f8      	cbz	r0, abb6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x190a>
    ab76:	6860      	ldr	r0, [r4, #4]
    ab78:	f890 00c5 	ldrb.w	r0, [r0, #197]	; 0xc5
    ab7c:	0780      	lsls	r0, r0, #30
    ab7e:	d414      	bmi.n	abaa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18fe>
    ab80:	4d27      	ldr	r5, [pc, #156]	; (ac20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1974>)
    ab82:	3d10      	subs	r5, #16
    ab84:	68e8      	ldr	r0, [r5, #12]
    ab86:	f004 fbe0 	bl	f34a <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>
    ab8a:	6861      	ldr	r1, [r4, #4]
    ab8c:	f881 00cf 	strb.w	r0, [r1, #207]	; 0xcf
    ab90:	68e8      	ldr	r0, [r5, #12]
    ab92:	f830 2f05 	ldrh.w	r2, [r0, #5]!
    ab96:	f8a1 20d0 	strh.w	r2, [r1, #208]	; 0xd0
    ab9a:	8840      	ldrh	r0, [r0, #2]
    ab9c:	f8a1 00d2 	strh.w	r0, [r1, #210]	; 0xd2
    aba0:	f811 0fc5 	ldrb.w	r0, [r1, #197]!
    aba4:	f040 0002 	orr.w	r0, r0, #2
    aba8:	7008      	strb	r0, [r1, #0]
    abaa:	6860      	ldr	r0, [r4, #4]
    abac:	f890 10c5 	ldrb.w	r1, [r0, #197]	; 0xc5
    abb0:	07c9      	lsls	r1, r1, #31
    abb2:	d002      	beq.n	abba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x190e>
    abb4:	e015      	b.n	abe2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1936>
    abb6:	2001      	movs	r0, #1
    abb8:	bd70      	pop	{r4, r5, r6, pc}
    abba:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    abbe:	078a      	lsls	r2, r1, #30
    abc0:	d504      	bpl.n	abcc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1920>
    abc2:	f240 21e2 	movw	r1, #738	; 0x2e2
    abc6:	2031      	movs	r0, #49	; 0x31
    abc8:	f7fa fcca 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    abcc:	f041 0102 	orr.w	r1, r1, #2
    abd0:	f880 1087 	strb.w	r1, [r0, #135]	; 0x87
    abd4:	f7fe fc6c 	bl	94b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    abd8:	6860      	ldr	r0, [r4, #4]
    abda:	f890 00c5 	ldrb.w	r0, [r0, #197]	; 0xc5
    abde:	07c0      	lsls	r0, r0, #31
    abe0:	d007      	beq.n	abf2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1946>
    abe2:	6861      	ldr	r1, [r4, #4]
    abe4:	2201      	movs	r2, #1
    abe6:	f101 00c6 	add.w	r0, r1, #198	; 0xc6
    abea:	f7fc fce1 	bl	75b0 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    abee:	f7fc fdb1 	bl	7754 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    abf2:	6860      	ldr	r0, [r4, #4]
    abf4:	2100      	movs	r1, #0
    abf6:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    abfa:	2a06      	cmp	r2, #6
    abfc:	d103      	bne.n	ac06 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x195a>
    abfe:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    ac02:	f880 10be 	strb.w	r1, [r0, #190]	; 0xbe
    ac06:	f890 212a 	ldrb.w	r2, [r0, #298]	; 0x12a
    ac0a:	b132      	cbz	r2, ac1a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x196e>
    ac0c:	f880 112a 	strb.w	r1, [r0, #298]	; 0x12a
    ac10:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    ac14:	b90a      	cbnz	r2, ac1a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x196e>
    ac16:	f880 10be 	strb.w	r1, [r0, #190]	; 0xbe
    ac1a:	2000      	movs	r0, #0
    ac1c:	bd70      	pop	{r4, r5, r6, pc}
    ac1e:	0000      	.short	0x0000
    ac20:	20000174 	.word	0x20000174
    ac24:	b510      	push	{r4, lr}
    ac26:	4c1f      	ldr	r4, [pc, #124]	; (aca4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19f8>)
    ac28:	6863      	ldr	r3, [r4, #4]
    ac2a:	f893 0112 	ldrb.w	r0, [r3, #274]	; 0x112
    ac2e:	2808      	cmp	r0, #8
    ac30:	d20d      	bcs.n	ac4e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19a2>
    ac32:	f500 72f4 	add.w	r2, r0, #488	; 0x1e8
    ac36:	f1c0 0008 	rsb	r0, r0, #8
    ac3a:	b2c1      	uxtb	r1, r0
    ac3c:	1898      	adds	r0, r3, r2
    ac3e:	f7fa fd2d 	bl	569c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    ac42:	6861      	ldr	r1, [r4, #4]
    ac44:	f891 2112 	ldrb.w	r2, [r1, #274]	; 0x112
    ac48:	4410      	add	r0, r2
    ac4a:	f881 0112 	strb.w	r0, [r1, #274]	; 0x112
    ac4e:	6863      	ldr	r3, [r4, #4]
    ac50:	f893 0112 	ldrb.w	r0, [r3, #274]	; 0x112
    ac54:	3808      	subs	r0, #8
    ac56:	2804      	cmp	r0, #4
    ac58:	d20d      	bcs.n	ac76 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19ca>
    ac5a:	f500 7282 	add.w	r2, r0, #260	; 0x104
    ac5e:	f1c0 0004 	rsb	r0, r0, #4
    ac62:	b2c1      	uxtb	r1, r0
    ac64:	1898      	adds	r0, r3, r2
    ac66:	f7fa fd19 	bl	569c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    ac6a:	6861      	ldr	r1, [r4, #4]
    ac6c:	f891 2112 	ldrb.w	r2, [r1, #274]	; 0x112
    ac70:	4410      	add	r0, r2
    ac72:	f881 0112 	strb.w	r0, [r1, #274]	; 0x112
    ac76:	6860      	ldr	r0, [r4, #4]
    ac78:	f890 1112 	ldrb.w	r1, [r0, #274]	; 0x112
    ac7c:	290c      	cmp	r1, #12
    ac7e:	d30f      	bcc.n	aca0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19f4>
    ac80:	d005      	beq.n	ac8e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19e2>
    ac82:	f640 013b 	movw	r1, #2107	; 0x83b
    ac86:	f04f 0031 	mov.w	r0, #49	; 0x31
    ac8a:	f7fa fc69 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ac8e:	2100      	movs	r1, #0
    ac90:	f880 1112 	strb.w	r1, [r0, #274]	; 0x112
    ac94:	2101      	movs	r1, #1
    ac96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ac9a:	2004      	movs	r0, #4
    ac9c:	f7ff b9ac 	b.w	9ff8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    aca0:	bd10      	pop	{r4, pc}
    aca2:	0000      	.short	0x0000
    aca4:	20000174 	.word	0x20000174
    aca8:	4804      	ldr	r0, [pc, #16]	; (acbc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a10>)
    acaa:	2129      	movs	r1, #41	; 0x29
    acac:	6840      	ldr	r0, [r0, #4]
    acae:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    acb2:	2100      	movs	r1, #0
    acb4:	f880 126c 	strb.w	r1, [r0, #620]	; 0x26c
    acb8:	4770      	bx	lr
    acba:	0000      	.short	0x0000
    acbc:	20000174 	.word	0x20000174
    acc0:	4809      	ldr	r0, [pc, #36]	; (ace8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a3c>)
    acc2:	b510      	push	{r4, lr}
    acc4:	6840      	ldr	r0, [r0, #4]
    acc6:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    acca:	2914      	cmp	r1, #20
    accc:	d004      	beq.n	acd8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a2c>
    acce:	f240 61fd 	movw	r1, #1789	; 0x6fd
    acd2:	2031      	movs	r0, #49	; 0x31
    acd4:	f7fa fc44 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    acd8:	2101      	movs	r1, #1
    acda:	f880 10c3 	strb.w	r1, [r0, #195]	; 0xc3
    acde:	2115      	movs	r1, #21
    ace0:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    ace4:	bd10      	pop	{r4, pc}
    ace6:	0000      	.short	0x0000
    ace8:	20000174 	.word	0x20000174
    acec:	b510      	push	{r4, lr}
    acee:	4c0a      	ldr	r4, [pc, #40]	; (ad18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a6c>)
    acf0:	6860      	ldr	r0, [r4, #4]
    acf2:	f890 0087 	ldrb.w	r0, [r0, #135]	; 0x87
    acf6:	07c0      	lsls	r0, r0, #31
    acf8:	d008      	beq.n	ad0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a60>
    acfa:	f7fe fbe5 	bl	94c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    acfe:	6860      	ldr	r0, [r4, #4]
    ad00:	f810 1f87 	ldrb.w	r1, [r0, #135]!
    ad04:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
    ad08:	7001      	strb	r1, [r0, #0]
    ad0a:	bd10      	pop	{r4, pc}
    ad0c:	f44f 61dd 	mov.w	r1, #1768	; 0x6e8
    ad10:	2031      	movs	r0, #49	; 0x31
    ad12:	f7fa fc25 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ad16:	0000      	.short	0x0000
    ad18:	20000174 	.word	0x20000174
    ad1c:	b510      	push	{r4, lr}
    ad1e:	4c0a      	ldr	r4, [pc, #40]	; (ad48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a9c>)
    ad20:	2301      	movs	r3, #1
    ad22:	2100      	movs	r1, #0
    ad24:	6860      	ldr	r0, [r4, #4]
    ad26:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    ad2a:	3078      	adds	r0, #120	; 0x78
    ad2c:	f004 f878 	bl	ee20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ad30:	b120      	cbz	r0, ad3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a90>
    ad32:	6861      	ldr	r1, [r4, #4]
    ad34:	201c      	movs	r0, #28
    ad36:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    ad3a:	bd10      	pop	{r4, pc}
    ad3c:	f240 7184 	movw	r1, #1924	; 0x784
    ad40:	2031      	movs	r0, #49	; 0x31
    ad42:	f7fa fc0d 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ad46:	0000      	.short	0x0000
    ad48:	20000174 	.word	0x20000174
    ad4c:	480a      	ldr	r0, [pc, #40]	; (ad78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1acc>)
    ad4e:	b510      	push	{r4, lr}
    ad50:	6840      	ldr	r0, [r0, #4]
    ad52:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    ad56:	f3c1 1201 	ubfx	r2, r1, #4, #2
    ad5a:	2a01      	cmp	r2, #1
    ad5c:	d004      	beq.n	ad68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1abc>
    ad5e:	f240 718b 	movw	r1, #1931	; 0x78b
    ad62:	2031      	movs	r0, #49	; 0x31
    ad64:	f7fa fbfc 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ad68:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    ad6c:	f880 1087 	strb.w	r1, [r0, #135]	; 0x87
    ad70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ad74:	f7fe bba8 	b.w	94c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    ad78:	20000174 	.word	0x20000174
    ad7c:	b510      	push	{r4, lr}
    ad7e:	4c0a      	ldr	r4, [pc, #40]	; (ada8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1afc>)
    ad80:	2301      	movs	r3, #1
    ad82:	2100      	movs	r1, #0
    ad84:	6860      	ldr	r0, [r4, #4]
    ad86:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    ad8a:	3078      	adds	r0, #120	; 0x78
    ad8c:	f004 f848 	bl	ee20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ad90:	b120      	cbz	r0, ad9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1af0>
    ad92:	6861      	ldr	r1, [r4, #4]
    ad94:	200e      	movs	r0, #14
    ad96:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    ad9a:	bd10      	pop	{r4, pc}
    ad9c:	f240 7177 	movw	r1, #1911	; 0x777
    ada0:	2031      	movs	r0, #49	; 0x31
    ada2:	f7fa fbdd 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ada6:	0000      	.short	0x0000
    ada8:	20000174 	.word	0x20000174
    adac:	4804      	ldr	r0, [pc, #16]	; (adc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b14>)
    adae:	6840      	ldr	r0, [r0, #4]
    adb0:	f810 1f87 	ldrb.w	r1, [r0, #135]!
    adb4:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
    adb8:	7001      	strb	r1, [r0, #0]
    adba:	f7fe bb85 	b.w	94c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    adbe:	0000      	.short	0x0000
    adc0:	20000174 	.word	0x20000174
    adc4:	4809      	ldr	r0, [pc, #36]	; (adec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b40>)
    adc6:	b510      	push	{r4, lr}
    adc8:	6840      	ldr	r0, [r0, #4]
    adca:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    adce:	2910      	cmp	r1, #16
    add0:	d004      	beq.n	addc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b30>
    add2:	f240 61f5 	movw	r1, #1781	; 0x6f5
    add6:	2031      	movs	r0, #49	; 0x31
    add8:	f7fa fbc2 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    addc:	2101      	movs	r1, #1
    adde:	f880 10c3 	strb.w	r1, [r0, #195]	; 0xc3
    ade2:	2111      	movs	r1, #17
    ade4:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    ade8:	bd10      	pop	{r4, pc}
    adea:	0000      	.short	0x0000
    adec:	20000174 	.word	0x20000174
    adf0:	b510      	push	{r4, lr}
    adf2:	4c0a      	ldr	r4, [pc, #40]	; (ae1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b70>)
    adf4:	2301      	movs	r3, #1
    adf6:	2100      	movs	r1, #0
    adf8:	6860      	ldr	r0, [r4, #4]
    adfa:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    adfe:	3078      	adds	r0, #120	; 0x78
    ae00:	f004 f80e 	bl	ee20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ae04:	b120      	cbz	r0, ae10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b64>
    ae06:	6861      	ldr	r1, [r4, #4]
    ae08:	201f      	movs	r0, #31
    ae0a:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    ae0e:	bd10      	pop	{r4, pc}
    ae10:	f240 7197 	movw	r1, #1943	; 0x797
    ae14:	2031      	movs	r0, #49	; 0x31
    ae16:	f7fa fba3 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ae1a:	0000      	.short	0x0000
    ae1c:	20000174 	.word	0x20000174
    ae20:	4808      	ldr	r0, [pc, #32]	; (ae44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b98>)
    ae22:	b510      	push	{r4, lr}
    ae24:	6840      	ldr	r0, [r0, #4]
    ae26:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    ae2a:	2921      	cmp	r1, #33	; 0x21
    ae2c:	d005      	beq.n	ae3a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b8e>
    ae2e:	b121      	cbz	r1, ae3a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b8e>
    ae30:	f240 719e 	movw	r1, #1950	; 0x79e
    ae34:	2031      	movs	r0, #49	; 0x31
    ae36:	f7fa fb93 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ae3a:	2122      	movs	r1, #34	; 0x22
    ae3c:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    ae40:	bd10      	pop	{r4, pc}
    ae42:	0000      	.short	0x0000
    ae44:	20000174 	.word	0x20000174
    ae48:	4809      	ldr	r0, [pc, #36]	; (ae70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bc4>)
    ae4a:	b510      	push	{r4, lr}
    ae4c:	6840      	ldr	r0, [r0, #4]
    ae4e:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    ae52:	2928      	cmp	r1, #40	; 0x28
    ae54:	d006      	beq.n	ae64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bb8>
    ae56:	2915      	cmp	r1, #21
    ae58:	d006      	beq.n	ae68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bbc>
    ae5a:	f240 711e 	movw	r1, #1822	; 0x71e
    ae5e:	2031      	movs	r0, #49	; 0x31
    ae60:	f7fa fb7e 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ae64:	2100      	movs	r1, #0
    ae66:	e000      	b.n	ae6a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bbe>
    ae68:	2119      	movs	r1, #25
    ae6a:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    ae6e:	bd10      	pop	{r4, pc}
    ae70:	20000174 	.word	0x20000174
    ae74:	4807      	ldr	r0, [pc, #28]	; (ae94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1be8>)
    ae76:	b510      	push	{r4, lr}
    ae78:	6840      	ldr	r0, [r0, #4]
    ae7a:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    ae7e:	2915      	cmp	r1, #21
    ae80:	d004      	beq.n	ae8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1be0>
    ae82:	f240 710a 	movw	r1, #1802	; 0x70a
    ae86:	2031      	movs	r0, #49	; 0x31
    ae88:	f7fa fb6a 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ae8c:	2119      	movs	r1, #25
    ae8e:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    ae92:	bd10      	pop	{r4, pc}
    ae94:	20000174 	.word	0x20000174
    ae98:	b510      	push	{r4, lr}
    ae9a:	4c0a      	ldr	r4, [pc, #40]	; (aec4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c18>)
    ae9c:	2301      	movs	r3, #1
    ae9e:	2100      	movs	r1, #0
    aea0:	6860      	ldr	r0, [r4, #4]
    aea2:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    aea6:	3078      	adds	r0, #120	; 0x78
    aea8:	f003 ffba 	bl	ee20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    aeac:	b120      	cbz	r0, aeb8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c0c>
    aeae:	6861      	ldr	r1, [r4, #4]
    aeb0:	2004      	movs	r0, #4
    aeb2:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    aeb6:	bd10      	pop	{r4, pc}
    aeb8:	f240 61ef 	movw	r1, #1775	; 0x6ef
    aebc:	2031      	movs	r0, #49	; 0x31
    aebe:	f7fa fb4f 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aec2:	0000      	.short	0x0000
    aec4:	20000174 	.word	0x20000174
    aec8:	4807      	ldr	r0, [pc, #28]	; (aee8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c3c>)
    aeca:	b510      	push	{r4, lr}
    aecc:	6840      	ldr	r0, [r0, #4]
    aece:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    aed2:	2915      	cmp	r1, #21
    aed4:	d004      	beq.n	aee0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c34>
    aed6:	f240 7104 	movw	r1, #1796	; 0x704
    aeda:	2031      	movs	r0, #49	; 0x31
    aedc:	f7fa fb40 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aee0:	2117      	movs	r1, #23
    aee2:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    aee6:	bd10      	pop	{r4, pc}
    aee8:	20000174 	.word	0x20000174
    aeec:	b538      	push	{r3, r4, r5, lr}
    aeee:	4d20      	ldr	r5, [pc, #128]	; (af70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cc4>)
    aef0:	6869      	ldr	r1, [r5, #4]
    aef2:	f891 0086 	ldrb.w	r0, [r1, #134]	; 0x86
    aef6:	281b      	cmp	r0, #27
    aef8:	d002      	beq.n	af00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c54>
    aefa:	f240 7137 	movw	r1, #1847	; 0x737
    aefe:	e00e      	b.n	af1e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c72>
    af00:	2400      	movs	r4, #0
    af02:	f881 40c3 	strb.w	r4, [r1, #195]	; 0xc3
    af06:	f891 01be 	ldrb.w	r0, [r1, #446]	; 0x1be
    af0a:	f88d 0000 	strb.w	r0, [sp]
    af0e:	9800      	ldr	r0, [sp, #0]
    af10:	9000      	str	r0, [sp, #0]
    af12:	f89d 0000 	ldrb.w	r0, [sp]
    af16:	2201      	movs	r2, #1
    af18:	b120      	cbz	r0, af24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c78>
    af1a:	f240 713b 	movw	r1, #1851	; 0x73b
    af1e:	2031      	movs	r0, #49	; 0x31
    af20:	f7fa fb1e 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    af24:	4812      	ldr	r0, [pc, #72]	; (af70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cc4>)
    af26:	f891 30c4 	ldrb.w	r3, [r1, #196]	; 0xc4
    af2a:	6840      	ldr	r0, [r0, #4]
    af2c:	f500 70db 	add.w	r0, r0, #438	; 0x1b6
    af30:	b143      	cbz	r3, af44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c98>
    af32:	f881 40c4 	strb.w	r4, [r1, #196]	; 0xc4
    af36:	880a      	ldrh	r2, [r1, #0]
    af38:	f8a1 21c2 	strh.w	r2, [r1, #450]	; 0x1c2
    af3c:	f881 41c0 	strb.w	r4, [r1, #448]	; 0x1c0
    af40:	220a      	movs	r2, #10
    af42:	e007      	b.n	af54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ca8>
    af44:	880b      	ldrh	r3, [r1, #0]
    af46:	f8a1 31c2 	strh.w	r3, [r1, #450]	; 0x1c2
    af4a:	f881 41c0 	strb.w	r4, [r1, #448]	; 0x1c0
    af4e:	f881 21c4 	strb.w	r2, [r1, #452]	; 0x1c4
    af52:	2209      	movs	r2, #9
    af54:	f7fc fb2c 	bl	75b0 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    af58:	6868      	ldr	r0, [r5, #4]
    af5a:	8800      	ldrh	r0, [r0, #0]
    af5c:	f7fa ff28 	bl	5db0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    af60:	f003 fb82 	bl	e668 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    af64:	f7fc fbf6 	bl	7754 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    af68:	6868      	ldr	r0, [r5, #4]
    af6a:	f880 4086 	strb.w	r4, [r0, #134]	; 0x86
    af6e:	bd38      	pop	{r3, r4, r5, pc}
    af70:	20000174 	.word	0x20000174
    af74:	b510      	push	{r4, lr}
    af76:	4c08      	ldr	r4, [pc, #32]	; (af98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cec>)
    af78:	2301      	movs	r3, #1
    af7a:	4619      	mov	r1, r3
    af7c:	6860      	ldr	r0, [r4, #4]
    af7e:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    af82:	3078      	adds	r0, #120	; 0x78
    af84:	f003 ff4c 	bl	ee20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    af88:	2800      	cmp	r0, #0
    af8a:	d103      	bne.n	af94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ce8>
    af8c:	6861      	ldr	r1, [r4, #4]
    af8e:	2008      	movs	r0, #8
    af90:	f881 0088 	strb.w	r0, [r1, #136]	; 0x88
    af94:	bd10      	pop	{r4, pc}
    af96:	0000      	.short	0x0000
    af98:	20000174 	.word	0x20000174
    af9c:	4815      	ldr	r0, [pc, #84]	; (aff4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d48>)
    af9e:	b510      	push	{r4, lr}
    afa0:	6880      	ldr	r0, [r0, #8]
    afa2:	7901      	ldrb	r1, [r0, #4]
    afa4:	4813      	ldr	r0, [pc, #76]	; (aff4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d48>)
    afa6:	3010      	adds	r0, #16
    afa8:	6840      	ldr	r0, [r0, #4]
    afaa:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    afae:	2a0a      	cmp	r2, #10
    afb0:	d109      	bne.n	afc6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d1a>
    afb2:	f890 2109 	ldrb.w	r2, [r0, #265]	; 0x109
    afb6:	428a      	cmp	r2, r1
    afb8:	d105      	bne.n	afc6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d1a>
    afba:	2100      	movs	r1, #0
    afbc:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    afc0:	f880 10be 	strb.w	r1, [r0, #190]	; 0xbe
    afc4:	bd10      	pop	{r4, pc}
    afc6:	f890 2087 	ldrb.w	r2, [r0, #135]	; 0x87
    afca:	0713      	lsls	r3, r2, #28
    afcc:	d507      	bpl.n	afde <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d32>
    afce:	f002 01f7 	and.w	r1, r2, #247	; 0xf7
    afd2:	f880 1087 	strb.w	r1, [r0, #135]	; 0x87
    afd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    afda:	f7fe ba75 	b.w	94c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    afde:	29ff      	cmp	r1, #255	; 0xff
    afe0:	d004      	beq.n	afec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d40>
    afe2:	f240 61e2 	movw	r1, #1762	; 0x6e2
    afe6:	2031      	movs	r0, #49	; 0x31
    afe8:	f7fa faba 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    afec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    aff0:	f7ff be5a 	b.w	aca8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19fc>
    aff4:	20000164 	.word	0x20000164
    aff8:	b510      	push	{r4, lr}
    affa:	4c15      	ldr	r4, [pc, #84]	; (b050 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1da4>)
    affc:	6860      	ldr	r0, [r4, #4]
    affe:	f890 10c5 	ldrb.w	r1, [r0, #197]	; 0xc5
    b002:	0789      	lsls	r1, r1, #30
    b004:	d411      	bmi.n	b02a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d7e>
    b006:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b00a:	2301      	movs	r3, #1
    b00c:	2100      	movs	r1, #0
    b00e:	3078      	adds	r0, #120	; 0x78
    b010:	f003 ff06 	bl	ee20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b014:	b120      	cbz	r0, b020 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d74>
    b016:	6861      	ldr	r1, [r4, #4]
    b018:	2006      	movs	r0, #6
    b01a:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    b01e:	e009      	b.n	b034 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d88>
    b020:	f240 7163 	movw	r1, #1891	; 0x763
    b024:	2031      	movs	r0, #49	; 0x31
    b026:	f7fa fa9b 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b02a:	2100      	movs	r1, #0
    b02c:	f880 10be 	strb.w	r1, [r0, #190]	; 0xbe
    b030:	f880 112a 	strb.w	r1, [r0, #298]	; 0x12a
    b034:	6860      	ldr	r0, [r4, #4]
    b036:	f890 0087 	ldrb.w	r0, [r0, #135]	; 0x87
    b03a:	0780      	lsls	r0, r0, #30
    b03c:	d507      	bpl.n	b04e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1da2>
    b03e:	f7fe fa43 	bl	94c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    b042:	6860      	ldr	r0, [r4, #4]
    b044:	f810 1f87 	ldrb.w	r1, [r0, #135]!
    b048:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
    b04c:	7001      	strb	r1, [r0, #0]
    b04e:	bd10      	pop	{r4, pc}
    b050:	20000174 	.word	0x20000174
    b054:	4808      	ldr	r0, [pc, #32]	; (b078 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dcc>)
    b056:	b510      	push	{r4, lr}
    b058:	6840      	ldr	r0, [r0, #4]
    b05a:	f890 108c 	ldrb.w	r1, [r0, #140]	; 0x8c
    b05e:	b941      	cbnz	r1, b072 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dc6>
    b060:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    b064:	2301      	movs	r3, #1
    b066:	2106      	movs	r1, #6
    b068:	3078      	adds	r0, #120	; 0x78
    b06a:	f003 fed9 	bl	ee20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b06e:	2800      	cmp	r0, #0
    b070:	d000      	beq.n	b074 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dc8>
    b072:	2001      	movs	r0, #1
    b074:	bd10      	pop	{r4, pc}
    b076:	0000      	.short	0x0000
    b078:	20000174 	.word	0x20000174
    b07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b07e:	4c5e      	ldr	r4, [pc, #376]	; (b1f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f4c>)
    b080:	4607      	mov	r7, r0
    b082:	4615      	mov	r5, r2
    b084:	6860      	ldr	r0, [r4, #4]
    b086:	2200      	movs	r2, #0
    b088:	b111      	cbz	r1, b090 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1de4>
    b08a:	f8a0 21de 	strh.w	r2, [r0, #478]	; 0x1de
    b08e:	e006      	b.n	b09e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1df2>
    b090:	f8b0 11de 	ldrh.w	r1, [r0, #478]	; 0x1de
    b094:	f8b0 21ce 	ldrh.w	r2, [r0, #462]	; 0x1ce
    b098:	4411      	add	r1, r2
    b09a:	f8a0 11de 	strh.w	r1, [r0, #478]	; 0x1de
    b09e:	f890 1118 	ldrb.w	r1, [r0, #280]	; 0x118
    b0a2:	f88d 1000 	strb.w	r1, [sp]
    b0a6:	9900      	ldr	r1, [sp, #0]
    b0a8:	9100      	str	r1, [sp, #0]
    b0aa:	f89d 1000 	ldrb.w	r1, [sp]
    b0ae:	b939      	cbnz	r1, b0c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e14>
    b0b0:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    b0b4:	2301      	movs	r3, #1
    b0b6:	4619      	mov	r1, r3
    b0b8:	3078      	adds	r0, #120	; 0x78
    b0ba:	f003 feb1 	bl	ee20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b0be:	b130      	cbz	r0, b0ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e22>
    b0c0:	6860      	ldr	r0, [r4, #4]
    b0c2:	f830 1fb8 	ldrh.w	r1, [r0, #184]!
    b0c6:	f8b0 2116 	ldrh.w	r2, [r0, #278]	; 0x116
    b0ca:	4411      	add	r1, r2
    b0cc:	8001      	strh	r1, [r0, #0]
    b0ce:	6861      	ldr	r1, [r4, #4]
    b0d0:	f891 00be 	ldrb.w	r0, [r1, #190]	; 0xbe
    b0d4:	b130      	cbz	r0, b0e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e38>
    b0d6:	f8b1 20ba 	ldrh.w	r2, [r1, #186]	; 0xba
    b0da:	f8b1 31ce 	ldrh.w	r3, [r1, #462]	; 0x1ce
    b0de:	441a      	add	r2, r3
    b0e0:	f8a1 20ba 	strh.w	r2, [r1, #186]	; 0xba
    b0e4:	f991 20c2 	ldrsb.w	r2, [r1, #194]	; 0xc2
    b0e8:	2a00      	cmp	r2, #0
    b0ea:	dd06      	ble.n	b0fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e4e>
    b0ec:	f8b1 30c0 	ldrh.w	r3, [r1, #192]	; 0xc0
    b0f0:	f8b1 61ce 	ldrh.w	r6, [r1, #462]	; 0x1ce
    b0f4:	4433      	add	r3, r6
    b0f6:	f8a1 30c0 	strh.w	r3, [r1, #192]	; 0xc0
    b0fa:	263d      	movs	r6, #61	; 0x3d
    b0fc:	b117      	cbz	r7, b104 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e58>
    b0fe:	f881 60a6 	strb.w	r6, [r1, #166]	; 0xa6
    b102:	e016      	b.n	b132 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e86>
    b104:	4b3c      	ldr	r3, [pc, #240]	; (b1f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f4c>)
    b106:	3b10      	subs	r3, #16
    b108:	781b      	ldrb	r3, [r3, #0]
    b10a:	2b02      	cmp	r3, #2
    b10c:	d00b      	beq.n	b126 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e7a>
    b10e:	2b01      	cmp	r3, #1
    b110:	d015      	beq.n	b13e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e92>
    b112:	b36d      	cbz	r5, b170 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ec4>
    b114:	f101 009d 	add.w	r0, r1, #157	; 0x9d
    b118:	2208      	movs	r2, #8
    b11a:	f7fc fa49 	bl	75b0 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    b11e:	06e8      	lsls	r0, r5, #27
    b120:	d510      	bpl.n	b144 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e98>
    b122:	201e      	movs	r0, #30
    b124:	e01b      	b.n	b15e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1eb2>
    b126:	f891 010e 	ldrb.w	r0, [r1, #270]	; 0x10e
    b12a:	2806      	cmp	r0, #6
    b12c:	d048      	beq.n	b1c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f14>
    b12e:	2016      	movs	r0, #22
    b130:	e046      	b.n	b1c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f14>
    b132:	f101 009d 	add.w	r0, r1, #157	; 0x9d
    b136:	2208      	movs	r2, #8
    b138:	f7fc fa3a 	bl	75b0 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    b13c:	e049      	b.n	b1d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f26>
    b13e:	f891 0089 	ldrb.w	r0, [r1, #137]	; 0x89
    b142:	e03d      	b.n	b1c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f14>
    b144:	0728      	lsls	r0, r5, #28
    b146:	d503      	bpl.n	b150 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ea4>
    b148:	6860      	ldr	r0, [r4, #4]
    b14a:	f880 60a6 	strb.w	r6, [r0, #166]	; 0xa6
    b14e:	e040      	b.n	b1d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f26>
    b150:	06a8      	lsls	r0, r5, #26
    b152:	d501      	bpl.n	b158 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1eac>
    b154:	2023      	movs	r0, #35	; 0x23
    b156:	e002      	b.n	b15e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1eb2>
    b158:	07a8      	lsls	r0, r5, #30
    b15a:	d004      	beq.n	b166 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1eba>
    b15c:	202a      	movs	r0, #42	; 0x2a
    b15e:	6861      	ldr	r1, [r4, #4]
    b160:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    b164:	e035      	b.n	b1d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f26>
    b166:	f640 4173 	movw	r1, #3187	; 0xc73
    b16a:	2031      	movs	r0, #49	; 0x31
    b16c:	f7fa f9f8 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b170:	b128      	cbz	r0, b17e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ed2>
    b172:	f8b1 00ba 	ldrh.w	r0, [r1, #186]	; 0xba
    b176:	f8b1 30bc 	ldrh.w	r3, [r1, #188]	; 0xbc
    b17a:	4298      	cmp	r0, r3
    b17c:	d216      	bcs.n	b1ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f00>
    b17e:	2a00      	cmp	r2, #0
    b180:	dd05      	ble.n	b18e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ee2>
    b182:	f8b1 00c0 	ldrh.w	r0, [r1, #192]	; 0xc0
    b186:	f8b1 20bc 	ldrh.w	r2, [r1, #188]	; 0xbc
    b18a:	4290      	cmp	r0, r2
    b18c:	d20e      	bcs.n	b1ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f00>
    b18e:	f8b1 20b8 	ldrh.w	r2, [r1, #184]	; 0xb8
    b192:	f8b1 00b6 	ldrh.w	r0, [r1, #182]	; 0xb6
    b196:	4282      	cmp	r2, r0
    b198:	d30a      	bcc.n	b1b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f04>
    b19a:	f891 2118 	ldrb.w	r2, [r1, #280]	; 0x118
    b19e:	f88d 2000 	strb.w	r2, [sp]
    b1a2:	9a00      	ldr	r2, [sp, #0]
    b1a4:	9200      	str	r2, [sp, #0]
    b1a6:	f89d 2000 	ldrb.w	r2, [sp]
    b1aa:	b10a      	cbz	r2, b1b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f04>
    b1ac:	2022      	movs	r0, #34	; 0x22
    b1ae:	e007      	b.n	b1c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f14>
    b1b0:	f891 208a 	ldrb.w	r2, [r1, #138]	; 0x8a
    b1b4:	b13a      	cbz	r2, b1c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f1a>
    b1b6:	f8b1 20b4 	ldrh.w	r2, [r1, #180]	; 0xb4
    b1ba:	4282      	cmp	r2, r0
    b1bc:	d309      	bcc.n	b1d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f26>
    b1be:	2008      	movs	r0, #8
    b1c0:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    b1c4:	e7b5      	b.n	b132 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e86>
    b1c6:	f8b1 00b4 	ldrh.w	r0, [r1, #180]	; 0xb4
    b1ca:	2806      	cmp	r0, #6
    b1cc:	d301      	bcc.n	b1d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f26>
    b1ce:	203e      	movs	r0, #62	; 0x3e
    b1d0:	e7f6      	b.n	b1c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f14>
    b1d2:	6860      	ldr	r0, [r4, #4]
    b1d4:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    b1d8:	f88d 1000 	strb.w	r1, [sp]
    b1dc:	9900      	ldr	r1, [sp, #0]
    b1de:	9100      	str	r1, [sp, #0]
    b1e0:	f89d 1000 	ldrb.w	r1, [sp]
    b1e4:	b119      	cbz	r1, b1ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f42>
    b1e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    b1ea:	f005 bab4 	b.w	10756 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    b1ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    b1f2:	2100      	movs	r1, #0
    b1f4:	f7fd bc38 	b.w	8a68 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    b1f8:	20000174 	.word	0x20000174
    b1fc:	b570      	push	{r4, r5, r6, lr}
    b1fe:	4d2e      	ldr	r5, [pc, #184]	; (b2b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x200c>)
    b200:	6868      	ldr	r0, [r5, #4]
    b202:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
    b206:	b151      	cbz	r1, b21e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f72>
    b208:	2901      	cmp	r1, #1
    b20a:	d008      	beq.n	b21e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f72>
    b20c:	2902      	cmp	r1, #2
    b20e:	d009      	beq.n	b224 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f78>
    b210:	2903      	cmp	r1, #3
    b212:	d007      	beq.n	b224 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f78>
    b214:	f640 21f1 	movw	r1, #2801	; 0xaf1
    b218:	2031      	movs	r0, #49	; 0x31
    b21a:	f7fa f9a1 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b21e:	f8b0 11cc 	ldrh.w	r1, [r0, #460]	; 0x1cc
    b222:	e037      	b.n	b294 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fe8>
    b224:	f890 1088 	ldrb.w	r1, [r0, #136]	; 0x88
    b228:	2908      	cmp	r1, #8
    b22a:	d036      	beq.n	b29a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fee>
    b22c:	f8b0 20b4 	ldrh.w	r2, [r0, #180]	; 0xb4
    b230:	f8b0 10b6 	ldrh.w	r1, [r0, #182]	; 0xb6
    b234:	2400      	movs	r4, #0
    b236:	1c93      	adds	r3, r2, #2
    b238:	4299      	cmp	r1, r3
    b23a:	d306      	bcc.n	b24a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f9e>
    b23c:	1a89      	subs	r1, r1, r2
    b23e:	1e89      	subs	r1, r1, #2
    b240:	040c      	lsls	r4, r1, #16
    b242:	0c24      	lsrs	r4, r4, #16
    b244:	d001      	beq.n	b24a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f9e>
    b246:	1e64      	subs	r4, r4, #1
    b248:	b2a4      	uxth	r4, r4
    b24a:	f890 10b2 	ldrb.w	r1, [r0, #178]	; 0xb2
    b24e:	b139      	cbz	r1, b260 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fb4>
    b250:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b254:	2301      	movs	r3, #1
    b256:	2109      	movs	r1, #9
    b258:	3078      	adds	r0, #120	; 0x78
    b25a:	f003 fde1 	bl	ee20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b25e:	b340      	cbz	r0, b2b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2006>
    b260:	f7ff fef8 	bl	b054 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1da8>
    b264:	b178      	cbz	r0, b286 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fda>
    b266:	686a      	ldr	r2, [r5, #4]
    b268:	2000      	movs	r0, #0
    b26a:	f8d2 10ac 	ldr.w	r1, [r2, #172]	; 0xac
    b26e:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
    b272:	1c93      	adds	r3, r2, #2
    b274:	4299      	cmp	r1, r3
    b276:	d303      	bcc.n	b280 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fd4>
    b278:	1a88      	subs	r0, r1, r2
    b27a:	1e80      	subs	r0, r0, #2
    b27c:	d000      	beq.n	b280 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fd4>
    b27e:	1e40      	subs	r0, r0, #1
    b280:	42a0      	cmp	r0, r4
    b282:	d200      	bcs.n	b286 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fda>
    b284:	b284      	uxth	r4, r0
    b286:	b10c      	cbz	r4, b28c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fe0>
    b288:	1e64      	subs	r4, r4, #1
    b28a:	b2a4      	uxth	r4, r4
    b28c:	6868      	ldr	r0, [r5, #4]
    b28e:	f8b0 11cc 	ldrh.w	r1, [r0, #460]	; 0x1cc
    b292:	4421      	add	r1, r4
    b294:	f8a0 11c8 	strh.w	r1, [r0, #456]	; 0x1c8
    b298:	bd70      	pop	{r4, r5, r6, pc}
    b29a:	f8b0 10b4 	ldrh.w	r1, [r0, #180]	; 0xb4
    b29e:	2903      	cmp	r1, #3
    b2a0:	d3bd      	bcc.n	b21e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f72>
    b2a2:	f830 1f7c 	ldrh.w	r1, [r0, #124]!
    b2a6:	8f42      	ldrh	r2, [r0, #58]	; 0x3a
    b2a8:	4411      	add	r1, r2
    b2aa:	1c49      	adds	r1, r1, #1
    b2ac:	f8a0 114c 	strh.w	r1, [r0, #332]	; 0x14c
    b2b0:	bd70      	pop	{r4, r5, r6, pc}
    b2b2:	2400      	movs	r4, #0
    b2b4:	e7ea      	b.n	b28c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fe0>
    b2b6:	0000      	.short	0x0000
    b2b8:	20000174 	.word	0x20000174

0000b2bc <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    b2bc:	4903      	ldr	r1, [pc, #12]	; (b2cc <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    b2be:	884a      	ldrh	r2, [r1, #2]
    b2c0:	8002      	strh	r2, [r0, #0]
    b2c2:	7809      	ldrb	r1, [r1, #0]
    b2c4:	7081      	strb	r1, [r0, #2]
    b2c6:	2000      	movs	r0, #0
    b2c8:	4770      	bx	lr
    b2ca:	0000      	.short	0x0000
    b2cc:	2000117c 	.word	0x2000117c

0000b2d0 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    b2d0:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    b2d2:	460c      	mov	r4, r1
    b2d4:	4605      	mov	r5, r0
    b2d6:	8800      	ldrh	r0, [r0, #0]
    b2d8:	4669      	mov	r1, sp
    b2da:	f003 fd77 	bl	edcc <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    b2de:	2200      	movs	r2, #0
    b2e0:	b128      	cbz	r0, b2ee <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x1e>
    b2e2:	f8c4 2002 	str.w	r2, [r4, #2]
    b2e6:	71a2      	strb	r2, [r4, #6]
    b2e8:	8022      	strh	r2, [r4, #0]
    b2ea:	2002      	movs	r0, #2
    b2ec:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    b2ee:	9901      	ldr	r1, [sp, #4]
    b2f0:	f111 0178 	adds.w	r1, r1, #120	; 0x78
    b2f4:	f881 2064 	strb.w	r2, [r1, #100]	; 0x64
    b2f8:	f8d1 0017 	ldr.w	r0, [r1, #23]
    b2fc:	f8c4 0002 	str.w	r0, [r4, #2]
    b300:	7ec8      	ldrb	r0, [r1, #27]
    b302:	71a0      	strb	r0, [r4, #6]
    b304:	8828      	ldrh	r0, [r5, #0]
    b306:	8020      	strh	r0, [r4, #0]
    b308:	f891 0064 	ldrb.w	r0, [r1, #100]	; 0x64
    b30c:	f88d 0008 	strb.w	r0, [sp, #8]
    b310:	9802      	ldr	r0, [sp, #8]
    b312:	9002      	str	r0, [sp, #8]
    b314:	f89d 0008 	ldrb.w	r0, [sp, #8]
    b318:	2800      	cmp	r0, #0
    b31a:	d1eb      	bne.n	b2f4 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x24>
    b31c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

0000b320 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    b320:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    b322:	460d      	mov	r5, r1
    b324:	4606      	mov	r6, r0
    b326:	8800      	ldrh	r0, [r0, #0]
    b328:	4669      	mov	r1, sp
    b32a:	f003 fd4f 	bl	edcc <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    b32e:	2800      	cmp	r0, #0
    b330:	d11a      	bne.n	b368 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>
    b332:	f8dd 4004 	ldr.w	r4, [sp, #4]
    b336:	2700      	movs	r7, #0
    b338:	f884 7070 	strb.w	r7, [r4, #112]	; 0x70
    b33c:	f814 0f6e 	ldrb.w	r0, [r4, #110]!
    b340:	f005 fee9 	bl	11116 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e>
    b344:	70a8      	strb	r0, [r5, #2]
    b346:	7860      	ldrb	r0, [r4, #1]
    b348:	f005 fee5 	bl	11116 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e>
    b34c:	70e8      	strb	r0, [r5, #3]
    b34e:	78a0      	ldrb	r0, [r4, #2]
    b350:	f88d 0008 	strb.w	r0, [sp, #8]
    b354:	9802      	ldr	r0, [sp, #8]
    b356:	9002      	str	r0, [sp, #8]
    b358:	f89d 0008 	ldrb.w	r0, [sp, #8]
    b35c:	3c6e      	subs	r4, #110	; 0x6e
    b35e:	2800      	cmp	r0, #0
    b360:	d1ea      	bne.n	b338 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x18>
    b362:	8830      	ldrh	r0, [r6, #0]
    b364:	8028      	strh	r0, [r5, #0]
    b366:	2000      	movs	r0, #0
    b368:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

0000b36c <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    b36c:	4903      	ldr	r1, [pc, #12]	; (b37c <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x10>)
    b36e:	888a      	ldrh	r2, [r1, #4]
    b370:	8002      	strh	r2, [r0, #0]
    b372:	88c9      	ldrh	r1, [r1, #6]
    b374:	8041      	strh	r1, [r0, #2]
    b376:	2000      	movs	r0, #0
    b378:	4770      	bx	lr
    b37a:	0000      	.short	0x0000
    b37c:	200002b4 	.word	0x200002b4

0000b380 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    b380:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    b382:	2400      	movs	r4, #0
    b384:	a902      	add	r1, sp, #8
    b386:	f88d 4004 	strb.w	r4, [sp, #4]
    b38a:	f88d 4008 	strb.w	r4, [sp, #8]
    b38e:	9100      	str	r1, [sp, #0]
    b390:	7882      	ldrb	r2, [r0, #2]
    b392:	7841      	ldrb	r1, [r0, #1]
    b394:	7800      	ldrb	r0, [r0, #0]
    b396:	ab01      	add	r3, sp, #4
    b398:	f006 f848 	bl	1142c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x344>
    b39c:	2800      	cmp	r0, #0
    b39e:	d112      	bne.n	b3c6 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x46>
    b3a0:	f89d 0004 	ldrb.w	r0, [sp, #4]
    b3a4:	f005 ff83 	bl	112ae <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c6>
    b3a8:	b170      	cbz	r0, b3c8 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    b3aa:	f89d 0008 	ldrb.w	r0, [sp, #8]
    b3ae:	f005 ff7e 	bl	112ae <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c6>
    b3b2:	b148      	cbz	r0, b3c8 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    b3b4:	4805      	ldr	r0, [pc, #20]	; (b3cc <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x4c>)
    b3b6:	f89d 1004 	ldrb.w	r1, [sp, #4]
    b3ba:	7381      	strb	r1, [r0, #14]
    b3bc:	f89d 1008 	ldrb.w	r1, [sp, #8]
    b3c0:	73c1      	strb	r1, [r0, #15]
    b3c2:	8204      	strh	r4, [r0, #16]
    b3c4:	2000      	movs	r0, #0
    b3c6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    b3c8:	2011      	movs	r0, #17
    b3ca:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    b3cc:	2000117c 	.word	0x2000117c

0000b3d0 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
    b3d0:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    b3d4:	460f      	mov	r7, r1
    b3d6:	4605      	mov	r5, r0
    b3d8:	7806      	ldrb	r6, [r0, #0]
    b3da:	f005 ff1b 	bl	11214 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x12c>
    b3de:	2800      	cmp	r0, #0
    b3e0:	d10a      	bne.n	b3f8 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    b3e2:	4628      	mov	r0, r5
    b3e4:	f005 fef0 	bl	111c8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xe0>
    b3e8:	2800      	cmp	r0, #0
    b3ea:	d105      	bne.n	b3f8 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    b3ec:	2001      	movs	r0, #1
    b3ee:	f7fa faad 	bl	594c <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    b3f2:	4286      	cmp	r6, r0
    b3f4:	d302      	bcc.n	b3fc <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x2c>
    b3f6:	2007      	movs	r0, #7
    b3f8:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    b3fc:	2101      	movs	r1, #1
    b3fe:	4630      	mov	r0, r6
    b400:	f003 fa56 	bl	e8b0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    b404:	0004      	movs	r4, r0
    b406:	d004      	beq.n	b412 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x42>
    b408:	f004 fd98 	bl	ff3c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    b40c:	b170      	cbz	r0, b42c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x5c>
    b40e:	200c      	movs	r0, #12
    b410:	e7f2      	b.n	b3f8 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    b412:	2200      	movs	r2, #0
    b414:	2101      	movs	r1, #1
    b416:	4630      	mov	r0, r6
    b418:	f003 fa40 	bl	e89c <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    b41c:	0004      	movs	r4, r0
    b41e:	d013      	beq.n	b448 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x78>
    b420:	4817      	ldr	r0, [pc, #92]	; (b480 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xb0>)
    b422:	f990 1000 	ldrsb.w	r1, [r0]
    b426:	4620      	mov	r0, r4
    b428:	f004 fb24 	bl	fa74 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    b42c:	4620      	mov	r0, r4
    b42e:	f004 fbcd 	bl	fbcc <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    b432:	7038      	strb	r0, [r7, #0]
    b434:	74e8      	strb	r0, [r5, #19]
    b436:	4629      	mov	r1, r5
    b438:	4620      	mov	r0, r4
    b43a:	f7fc fb89 	bl	7b50 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>
    b43e:	4606      	mov	r6, r0
    b440:	7e68      	ldrb	r0, [r5, #25]
    b442:	b1d0      	cbz	r0, b47a <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xaa>
    b444:	b12e      	cbz	r6, b452 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x82>
    b446:	e018      	b.n	b47a <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xaa>
    b448:	f241 215a 	movw	r1, #4698	; 0x125a
    b44c:	2039      	movs	r0, #57	; 0x39
    b44e:	f7fa f887 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b452:	2200      	movs	r2, #0
    b454:	4668      	mov	r0, sp
    b456:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    b458:	f003 faee 	bl	ea38 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    b45c:	2200      	movs	r2, #0
    b45e:	2101      	movs	r1, #1
    b460:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    b462:	f003 fb5f 	bl	eb24 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    b466:	2204      	movs	r2, #4
    b468:	4668      	mov	r0, sp
    b46a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    b46c:	f003 fae4 	bl	ea38 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    b470:	2200      	movs	r2, #0
    b472:	4611      	mov	r1, r2
    b474:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    b476:	f003 fb55 	bl	eb24 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    b47a:	4630      	mov	r0, r6
    b47c:	e7bc      	b.n	b3f8 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    b47e:	0000      	.short	0x0000
    b480:	200002ac 	.word	0x200002ac

0000b484 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    b484:	7801      	ldrb	r1, [r0, #0]
    b486:	b171      	cbz	r1, b4a6 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    b488:	7841      	ldrb	r1, [r0, #1]
    b48a:	b161      	cbz	r1, b4a6 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    b48c:	8841      	ldrh	r1, [r0, #2]
    b48e:	291b      	cmp	r1, #27
    b490:	d309      	bcc.n	b4a6 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    b492:	8881      	ldrh	r1, [r0, #4]
    b494:	291b      	cmp	r1, #27
    b496:	d306      	bcc.n	b4a6 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    b498:	4904      	ldr	r1, [pc, #16]	; (b4ac <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    b49a:	6802      	ldr	r2, [r0, #0]
    b49c:	600a      	str	r2, [r1, #0]
    b49e:	8880      	ldrh	r0, [r0, #4]
    b4a0:	8088      	strh	r0, [r1, #4]
    b4a2:	2000      	movs	r0, #0
    b4a4:	4770      	bx	lr
    b4a6:	2012      	movs	r0, #18
    b4a8:	4770      	bx	lr
    b4aa:	0000      	.short	0x0000
    b4ac:	2000117c 	.word	0x2000117c

0000b4b0 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    b4b0:	6800      	ldr	r0, [r0, #0]
    b4b2:	f240 41e2 	movw	r1, #1250	; 0x4e2
    b4b6:	4288      	cmp	r0, r1
    b4b8:	d303      	bcc.n	b4c2 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    b4ba:	4903      	ldr	r1, [pc, #12]	; (b4c8 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    b4bc:	6088      	str	r0, [r1, #8]
    b4be:	2000      	movs	r0, #0
    b4c0:	4770      	bx	lr
    b4c2:	2012      	movs	r0, #18
    b4c4:	4770      	bx	lr
    b4c6:	0000      	.short	0x0000
    b4c8:	2000117c 	.word	0x2000117c

0000b4cc <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    b4cc:	4a03      	ldr	r2, [pc, #12]	; (b4dc <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    b4ce:	e9d2 1200 	ldrd	r1, r2, [r2]
    b4d2:	6001      	str	r1, [r0, #0]
    b4d4:	6042      	str	r2, [r0, #4]
    b4d6:	2000      	movs	r0, #0
    b4d8:	4770      	bx	lr
    b4da:	0000      	.short	0x0000
    b4dc:	0000b938 	.word	0x0000b938

0000b4e0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI>:
    b4e0:	b510      	push	{r4, lr}
    b4e2:	2005      	movs	r0, #5
    b4e4:	f000 faa2 	bl	ba2c <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    b4e8:	f7fd fe38 	bl	915c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>
    b4ec:	4902      	ldr	r1, [pc, #8]	; (b4f8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x18>)
    b4ee:	4801      	ldr	r0, [pc, #4]	; (b4f4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x14>)
    b4f0:	6048      	str	r0, [r1, #4]
    b4f2:	bd10      	pop	{r4, pc}
    b4f4:	0000b4fd 	.word	0x0000b4fd
    b4f8:	200002ac 	.word	0x200002ac
    b4fc:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    b500:	4613      	mov	r3, r2
    b502:	4a33      	ldr	r2, [pc, #204]	; (b5d0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xf0>)
    b504:	460f      	mov	r7, r1
    b506:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
    b50a:	8814      	ldrh	r4, [r2, #0]
    b50c:	f8b0 6056 	ldrh.w	r6, [r0, #86]	; 0x56
    b510:	428c      	cmp	r4, r1
    b512:	d200      	bcs.n	b516 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x36>
    b514:	4621      	mov	r1, r4
    b516:	4688      	mov	r8, r1
    b518:	8891      	ldrh	r1, [r2, #4]
    b51a:	42b1      	cmp	r1, r6
    b51c:	d200      	bcs.n	b520 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x40>
    b51e:	460e      	mov	r6, r1
    b520:	8851      	ldrh	r1, [r2, #2]
    b522:	f640 0448 	movw	r4, #2120	; 0x848
    b526:	42a1      	cmp	r1, r4
    b528:	d300      	bcc.n	b52c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x4c>
    b52a:	4621      	mov	r1, r4
    b52c:	88d5      	ldrh	r5, [r2, #6]
    b52e:	42a5      	cmp	r5, r4
    b530:	d300      	bcc.n	b534 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x54>
    b532:	4625      	mov	r5, r4
    b534:	42a1      	cmp	r1, r4
    b536:	d200      	bcs.n	b53a <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x5a>
    b538:	460c      	mov	r4, r1
    b53a:	f44f 72a4 	mov.w	r2, #328	; 0x148
    b53e:	2e1b      	cmp	r6, #27
    b540:	d001      	beq.n	b546 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x66>
    b542:	4295      	cmp	r5, r2
    b544:	d104      	bne.n	b550 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x70>
    b546:	f1b8 0f1b 	cmp.w	r8, #27
    b54a:	d03e      	beq.n	b5ca <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xea>
    b54c:	4294      	cmp	r4, r2
    b54e:	d03c      	beq.n	b5ca <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xea>
    b550:	466a      	mov	r2, sp
    b552:	4619      	mov	r1, r3
    b554:	f005 fece 	bl	112f4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x20c>
    b558:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    b55c:	4641      	mov	r1, r8
    b55e:	4540      	cmp	r0, r8
    b560:	d900      	bls.n	b564 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x84>
    b562:	4608      	mov	r0, r1
    b564:	80f8      	strh	r0, [r7, #6]
    b566:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    b56a:	42a1      	cmp	r1, r4
    b56c:	d800      	bhi.n	b570 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x90>
    b56e:	460c      	mov	r4, r1
    b570:	813c      	strh	r4, [r7, #8]
    b572:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    b576:	42b1      	cmp	r1, r6
    b578:	d800      	bhi.n	b57c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x9c>
    b57a:	460e      	mov	r6, r1
    b57c:	807e      	strh	r6, [r7, #2]
    b57e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    b582:	42a9      	cmp	r1, r5
    b584:	d800      	bhi.n	b588 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xa8>
    b586:	460d      	mov	r5, r1
    b588:	80bd      	strh	r5, [r7, #4]
    b58a:	21ff      	movs	r1, #255	; 0xff
    b58c:	7039      	strb	r1, [r7, #0]
    b58e:	381b      	subs	r0, #27
    b590:	28e0      	cmp	r0, #224	; 0xe0
    b592:	d902      	bls.n	b59a <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xba>
    b594:	f640 41b8 	movw	r1, #3256	; 0xcb8
    b598:	e014      	b.n	b5c4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xe4>
    b59a:	3e1b      	subs	r6, #27
    b59c:	2ee0      	cmp	r6, #224	; 0xe0
    b59e:	d902      	bls.n	b5a6 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xc6>
    b5a0:	f640 41ba 	movw	r1, #3258	; 0xcba
    b5a4:	e00e      	b.n	b5c4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xe4>
    b5a6:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    b5aa:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    b5ae:	4284      	cmp	r4, r0
    b5b0:	d902      	bls.n	b5b8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xd8>
    b5b2:	f640 41bc 	movw	r1, #3260	; 0xcbc
    b5b6:	e005      	b.n	b5c4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xe4>
    b5b8:	f5a5 75a4 	sub.w	r5, r5, #328	; 0x148
    b5bc:	4285      	cmp	r5, r0
    b5be:	d904      	bls.n	b5ca <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xea>
    b5c0:	f640 41be 	movw	r1, #3262	; 0xcbe
    b5c4:	2039      	movs	r0, #57	; 0x39
    b5c6:	f7f9 ffcb 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b5ca:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    b5ce:	0000      	.short	0x0000
    b5d0:	200002b4 	.word	0x200002b4
    b5d4:	b510      	push	{r4, lr}
    b5d6:	480e      	ldr	r0, [pc, #56]	; (b610 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x130>)
    b5d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    b5dc:	4b0d      	ldr	r3, [pc, #52]	; (b614 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x134>)
    b5de:	8281      	strh	r1, [r0, #20]
    b5e0:	2100      	movs	r1, #0
    b5e2:	7581      	strb	r1, [r0, #22]
    b5e4:	8301      	strh	r1, [r0, #24]
    b5e6:	221b      	movs	r2, #27
    b5e8:	801a      	strh	r2, [r3, #0]
    b5ea:	f44f 74a4 	mov.w	r4, #328	; 0x148
    b5ee:	805c      	strh	r4, [r3, #2]
    b5f0:	809a      	strh	r2, [r3, #4]
    b5f2:	80dc      	strh	r4, [r3, #6]
    b5f4:	7381      	strb	r1, [r0, #14]
    b5f6:	73c1      	strb	r1, [r0, #15]
    b5f8:	2303      	movs	r3, #3
    b5fa:	7003      	strb	r3, [r0, #0]
    b5fc:	2302      	movs	r3, #2
    b5fe:	7043      	strb	r3, [r0, #1]
    b600:	8042      	strh	r2, [r0, #2]
    b602:	8082      	strh	r2, [r0, #4]
    b604:	f640 62a6 	movw	r2, #3750	; 0xea6
    b608:	6082      	str	r2, [r0, #8]
    b60a:	7481      	strb	r1, [r0, #18]
    b60c:	7301      	strb	r1, [r0, #12]
    b60e:	bd10      	pop	{r4, pc}
    b610:	2000117c 	.word	0x2000117c
    b614:	200002b4 	.word	0x200002b4
    b618:	b510      	push	{r4, lr}
    b61a:	2101      	movs	r1, #1
    b61c:	2000      	movs	r0, #0
    b61e:	f003 f947 	bl	e8b0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    b622:	0004      	movs	r4, r0
    b624:	d10c      	bne.n	b640 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
    b626:	2200      	movs	r2, #0
    b628:	2101      	movs	r1, #1
    b62a:	4610      	mov	r0, r2
    b62c:	f003 f936 	bl	e89c <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    b630:	0004      	movs	r4, r0
    b632:	d007      	beq.n	b644 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x164>
    b634:	4806      	ldr	r0, [pc, #24]	; (b650 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x170>)
    b636:	f990 1000 	ldrsb.w	r1, [r0]
    b63a:	4620      	mov	r0, r4
    b63c:	f004 fa1a 	bl	fa74 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    b640:	4620      	mov	r0, r4
    b642:	bd10      	pop	{r4, pc}
    b644:	f240 2135 	movw	r1, #565	; 0x235
    b648:	2039      	movs	r0, #57	; 0x39
    b64a:	f7f9 ff89 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b64e:	0000      	.short	0x0000
    b650:	200002ac 	.word	0x200002ac

0000b654 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
    b654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b658:	b088      	sub	sp, #32
    b65a:	460c      	mov	r4, r1
    b65c:	4606      	mov	r6, r0
    b65e:	f004 fab8 	bl	fbd2 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    b662:	b198      	cbz	r0, b68c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x38>
    b664:	4630      	mov	r0, r6
    b666:	f004 faa7 	bl	fbb8 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    b66a:	b130      	cbz	r0, b67a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x26>
    b66c:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    b670:	2012      	movs	r0, #18
    b672:	2900      	cmp	r1, #0
    b674:	d00b      	beq.n	b68e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    b676:	2980      	cmp	r1, #128	; 0x80
    b678:	d809      	bhi.n	b68e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    b67a:	4630      	mov	r0, r6
    b67c:	f004 fa8b 	bl	fb96 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>
    b680:	b140      	cbz	r0, b694 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    b682:	4630      	mov	r0, r6
    b684:	f004 f9c0 	bl	fa08 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
    b688:	b130      	cbz	r0, b698 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x44>
    b68a:	e009      	b.n	b6a0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x4c>
    b68c:	2042      	movs	r0, #66	; 0x42
    b68e:	b008      	add	sp, #32
    b690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b694:	200c      	movs	r0, #12
    b696:	e7fa      	b.n	b68e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    b698:	4630      	mov	r0, r6
    b69a:	f004 fa87 	bl	fbac <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
    b69e:	b3c0      	cbz	r0, b712 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xbe>
    b6a0:	4630      	mov	r0, r6
    b6a2:	f004 fc4b 	bl	ff3c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    b6a6:	2800      	cmp	r0, #0
    b6a8:	d1f4      	bne.n	b694 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    b6aa:	4630      	mov	r0, r6
    b6ac:	f004 f9c7 	bl	fa3e <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>
    b6b0:	2800      	cmp	r0, #0
    b6b2:	d1ef      	bne.n	b694 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    b6b4:	4630      	mov	r0, r6
    b6b6:	f7fc f9e9 	bl	7a8c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
    b6ba:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    b6be:	f242 7110 	movw	r1, #10000	; 0x2710
    b6c2:	fb00 f801 	mul.w	r8, r0, r1
    b6c6:	78e1      	ldrb	r1, [r4, #3]
    b6c8:	4630      	mov	r0, r6
    b6ca:	f004 fa5b 	bl	fb84 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
    b6ce:	4630      	mov	r0, r6
    b6d0:	f004 fa6e 	bl	fbb0 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    b6d4:	b300      	cbz	r0, b718 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc4>
    b6d6:	2200      	movs	r2, #0
    b6d8:	4611      	mov	r1, r2
    b6da:	a801      	add	r0, sp, #4
    b6dc:	f7fa f9aa 	bl	5a34 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    b6e0:	0004      	movs	r4, r0
    b6e2:	d06d      	beq.n	b7c0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x16c>
    b6e4:	2100      	movs	r1, #0
    b6e6:	f7fb fd6d 	bl	71c4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    b6ea:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    b6ee:	8020      	strh	r0, [r4, #0]
    b6f0:	4621      	mov	r1, r4
    b6f2:	4630      	mov	r0, r6
    b6f4:	f004 fa80 	bl	fbf8 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
    b6f8:	f000 f9a4 	bl	ba44 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    b6fc:	0940      	lsrs	r0, r0, #5
    b6fe:	ea40 60c1 	orr.w	r0, r0, r1, lsl #27
    b702:	07c0      	lsls	r0, r0, #31
    b704:	4d3a      	ldr	r5, [pc, #232]	; (b7f0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>)
    b706:	f104 0030 	add.w	r0, r4, #48	; 0x30
    b70a:	d00f      	beq.n	b72c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xd8>
    b70c:	8869      	ldrh	r1, [r5, #2]
    b70e:	88aa      	ldrh	r2, [r5, #4]
    b710:	e00e      	b.n	b730 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xdc>
    b712:	e7ff      	b.n	b714 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc0>
    b714:	2012      	movs	r0, #18
    b716:	e7ba      	b.n	b68e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    b718:	4642      	mov	r2, r8
    b71a:	2100      	movs	r1, #0
    b71c:	4630      	mov	r0, r6
    b71e:	f7fd f8b1 	bl	8884 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    b722:	2800      	cmp	r0, #0
    b724:	d0b3      	beq.n	b68e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    b726:	f241 417b 	movw	r1, #5243	; 0x147b
    b72a:	e053      	b.n	b7d4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x180>
    b72c:	211b      	movs	r1, #27
    b72e:	460a      	mov	r2, r1
    b730:	84c1      	strh	r1, [r0, #38]	; 0x26
    b732:	8502      	strh	r2, [r0, #40]	; 0x28
    b734:	68a8      	ldr	r0, [r5, #8]
    b736:	6320      	str	r0, [r4, #48]	; 0x30
    b738:	f641 574c 	movw	r7, #7500	; 0x1d4c
    b73c:	4630      	mov	r0, r6
    b73e:	f004 fa3f 	bl	fbc0 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    b742:	b910      	cbnz	r0, b74a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xf6>
    b744:	4630      	mov	r0, r6
    b746:	f004 fa55 	bl	fbf4 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    b74a:	6127      	str	r7, [r4, #16]
    b74c:	8821      	ldrh	r1, [r4, #0]
    b74e:	f8ad 1008 	strh.w	r1, [sp, #8]
    b752:	7ba9      	ldrb	r1, [r5, #14]
    b754:	f88d 100a 	strb.w	r1, [sp, #10]
    b758:	7be9      	ldrb	r1, [r5, #15]
    b75a:	f88d 100b 	strb.w	r1, [sp, #11]
    b75e:	8a29      	ldrh	r1, [r5, #16]
    b760:	f8ad 100c 	strh.w	r1, [sp, #12]
    b764:	a905      	add	r1, sp, #20
    b766:	9100      	str	r1, [sp, #0]
    b768:	2001      	movs	r0, #1
    b76a:	ab04      	add	r3, sp, #16
    b76c:	aa02      	add	r2, sp, #8
    b76e:	4621      	mov	r1, r4
    b770:	f005 fdf6 	bl	11360 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x278>
    b774:	b140      	cbz	r0, b788 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x134>
    b776:	2100      	movs	r1, #0
    b778:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    b77c:	f7fa f984 	bl	5a88 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    b780:	b1f0      	cbz	r0, b7c0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x16c>
    b782:	f241 41cb 	movw	r1, #5323	; 0x14cb
    b786:	e025      	b.n	b7d4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x180>
    b788:	f89d 0010 	ldrb.w	r0, [sp, #16]
    b78c:	f88d 0018 	strb.w	r0, [sp, #24]
    b790:	f89d 0014 	ldrb.w	r0, [sp, #20]
    b794:	f88d 0019 	strb.w	r0, [sp, #25]
    b798:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    b79c:	f8ad 001a 	strh.w	r0, [sp, #26]
    b7a0:	a906      	add	r1, sp, #24
    b7a2:	4620      	mov	r0, r4
    b7a4:	f003 fbd2 	bl	ef4c <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    b7a8:	7868      	ldrb	r0, [r5, #1]
    b7aa:	9000      	str	r0, [sp, #0]
    b7ac:	782b      	ldrb	r3, [r5, #0]
    b7ae:	88aa      	ldrh	r2, [r5, #4]
    b7b0:	8869      	ldrh	r1, [r5, #2]
    b7b2:	8820      	ldrh	r0, [r4, #0]
    b7b4:	f7fa fa34 	bl	5c20 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    b7b8:	b120      	cbz	r0, b7c4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x170>
    b7ba:	f241 41d6 	movw	r1, #5334	; 0x14d6
    b7be:	e009      	b.n	b7d4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x180>
    b7c0:	2009      	movs	r0, #9
    b7c2:	e764      	b.n	b68e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    b7c4:	4642      	mov	r2, r8
    b7c6:	4621      	mov	r1, r4
    b7c8:	4630      	mov	r0, r6
    b7ca:	f7fd f85b 	bl	8884 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    b7ce:	b120      	cbz	r0, b7da <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x186>
    b7d0:	f241 41d8 	movw	r1, #5336	; 0x14d8
    b7d4:	2039      	movs	r0, #57	; 0x39
    b7d6:	f7f9 fec3 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b7da:	4806      	ldr	r0, [pc, #24]	; (b7f4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a0>)
    b7dc:	6843      	ldr	r3, [r0, #4]
    b7de:	b123      	cbz	r3, b7ea <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x196>
    b7e0:	2200      	movs	r2, #0
    b7e2:	f504 718d 	add.w	r1, r4, #282	; 0x11a
    b7e6:	4620      	mov	r0, r4
    b7e8:	4798      	blx	r3
    b7ea:	2000      	movs	r0, #0
    b7ec:	e74f      	b.n	b68e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    b7ee:	0000      	.short	0x0000
    b7f0:	2000117c 	.word	0x2000117c
    b7f4:	200002ac 	.word	0x200002ac
    b7f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b7fc:	b088      	sub	sp, #32
    b7fe:	4604      	mov	r4, r0
    b800:	8800      	ldrh	r0, [r0, #0]
    b802:	a906      	add	r1, sp, #24
    b804:	f003 fae2 	bl	edcc <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    b808:	2800      	cmp	r0, #0
    b80a:	d147      	bne.n	b89c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x248>
    b80c:	9807      	ldr	r0, [sp, #28]
    b80e:	f890 1162 	ldrb.w	r1, [r0, #354]	; 0x162
    b812:	f88d 1008 	strb.w	r1, [sp, #8]
    b816:	9902      	ldr	r1, [sp, #8]
    b818:	9102      	str	r1, [sp, #8]
    b81a:	f89d 1008 	ldrb.w	r1, [sp, #8]
    b81e:	3078      	adds	r0, #120	; 0x78
    b820:	b101      	cbz	r1, b824 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1d0>
    b822:	2101      	movs	r1, #1
    b824:	f88d 100c 	strb.w	r1, [sp, #12]
    b828:	7bc1      	ldrb	r1, [r0, #15]
    b82a:	f04f 0800 	mov.w	r8, #0
    b82e:	0689      	lsls	r1, r1, #26
    b830:	d502      	bpl.n	b838 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1e4>
    b832:	f89d 100c 	ldrb.w	r1, [sp, #12]
    b836:	b149      	cbz	r1, b84c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1f8>
    b838:	f05f 0100 	movs.w	r1, #0
    b83c:	f88d 1004 	strb.w	r1, [sp, #4]
    b840:	2105      	movs	r1, #5
    b842:	305c      	adds	r0, #92	; 0x5c
    b844:	f004 ffcb 	bl	107de <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x88>
    b848:	b110      	cbz	r0, b850 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1fc>
    b84a:	e004      	b.n	b856 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x202>
    b84c:	2101      	movs	r1, #1
    b84e:	e7f5      	b.n	b83c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1e8>
    b850:	f89d 0004 	ldrb.w	r0, [sp, #4]
    b854:	b308      	cbz	r0, b89a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x246>
    b856:	8921      	ldrh	r1, [r4, #8]
    b858:	88e0      	ldrh	r0, [r4, #6]
    b85a:	f005 fd3d 	bl	112d8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1f0>
    b85e:	2800      	cmp	r0, #0
    b860:	d11c      	bne.n	b89c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x248>
    b862:	88a1      	ldrh	r1, [r4, #4]
    b864:	8860      	ldrh	r0, [r4, #2]
    b866:	f005 fd37 	bl	112d8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1f0>
    b86a:	2800      	cmp	r0, #0
    b86c:	d116      	bne.n	b89c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x248>
    b86e:	8921      	ldrh	r1, [r4, #8]
    b870:	88e0      	ldrh	r0, [r4, #6]
    b872:	f005 fd27 	bl	112c4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
    b876:	2800      	cmp	r0, #0
    b878:	d110      	bne.n	b89c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x248>
    b87a:	88a1      	ldrh	r1, [r4, #4]
    b87c:	8860      	ldrh	r0, [r4, #2]
    b87e:	f005 fd21 	bl	112c4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
    b882:	0006      	movs	r6, r0
    b884:	d10a      	bne.n	b89c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x248>
    b886:	9807      	ldr	r0, [sp, #28]
    b888:	f500 758d 	add.w	r5, r0, #282	; 0x11a
    b88c:	27ff      	movs	r7, #255	; 0xff
    b88e:	706f      	strb	r7, [r5, #1]
    b890:	f89d 100c 	ldrb.w	r1, [sp, #12]
    b894:	b129      	cbz	r1, b8a2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x24e>
    b896:	263a      	movs	r6, #58	; 0x3a
    b898:	e02e      	b.n	b8f8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2a4>
    b89a:	201a      	movs	r0, #26
    b89c:	b008      	add	sp, #32
    b89e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b8a2:	4641      	mov	r1, r8
    b8a4:	aa03      	add	r2, sp, #12
    b8a6:	f005 fd25 	bl	112f4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x20c>
    b8aa:	8861      	ldrh	r1, [r4, #2]
    b8ac:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    b8b0:	4281      	cmp	r1, r0
    b8b2:	d200      	bcs.n	b8b6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x262>
    b8b4:	4608      	mov	r0, r1
    b8b6:	80e8      	strh	r0, [r5, #6]
    b8b8:	88a1      	ldrh	r1, [r4, #4]
    b8ba:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    b8be:	4281      	cmp	r1, r0
    b8c0:	d200      	bcs.n	b8c4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x270>
    b8c2:	4608      	mov	r0, r1
    b8c4:	8128      	strh	r0, [r5, #8]
    b8c6:	88e2      	ldrh	r2, [r4, #6]
    b8c8:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    b8cc:	428a      	cmp	r2, r1
    b8ce:	d200      	bcs.n	b8d2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x27e>
    b8d0:	4611      	mov	r1, r2
    b8d2:	8069      	strh	r1, [r5, #2]
    b8d4:	8922      	ldrh	r2, [r4, #8]
    b8d6:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    b8da:	428a      	cmp	r2, r1
    b8dc:	d200      	bcs.n	b8e0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x28c>
    b8de:	4611      	mov	r1, r2
    b8e0:	f640 0248 	movw	r2, #2120	; 0x848
    b8e4:	80a9      	strh	r1, [r5, #4]
    b8e6:	4291      	cmp	r1, r2
    b8e8:	d300      	bcc.n	b8ec <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x298>
    b8ea:	4611      	mov	r1, r2
    b8ec:	80a9      	strh	r1, [r5, #4]
    b8ee:	4290      	cmp	r0, r2
    b8f0:	d200      	bcs.n	b8f4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2a0>
    b8f2:	4602      	mov	r2, r0
    b8f4:	812a      	strh	r2, [r5, #8]
    b8f6:	702f      	strb	r7, [r5, #0]
    b8f8:	f885 8001 	strb.w	r8, [r5, #1]
    b8fc:	4630      	mov	r0, r6
    b8fe:	e7cd      	b.n	b89c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x248>
    b900:	b510      	push	{r4, lr}
    b902:	4604      	mov	r4, r0
    b904:	88c1      	ldrh	r1, [r0, #6]
    b906:	8880      	ldrh	r0, [r0, #4]
    b908:	f005 fce6 	bl	112d8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1f0>
    b90c:	2800      	cmp	r0, #0
    b90e:	d10f      	bne.n	b930 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2dc>
    b910:	8861      	ldrh	r1, [r4, #2]
    b912:	8820      	ldrh	r0, [r4, #0]
    b914:	f005 fce0 	bl	112d8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1f0>
    b918:	2800      	cmp	r0, #0
    b91a:	d109      	bne.n	b930 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2dc>
    b91c:	4805      	ldr	r0, [pc, #20]	; (b934 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2e0>)
    b91e:	88a1      	ldrh	r1, [r4, #4]
    b920:	8081      	strh	r1, [r0, #4]
    b922:	8821      	ldrh	r1, [r4, #0]
    b924:	8001      	strh	r1, [r0, #0]
    b926:	88e1      	ldrh	r1, [r4, #6]
    b928:	80c1      	strh	r1, [r0, #6]
    b92a:	8861      	ldrh	r1, [r4, #2]
    b92c:	8041      	strh	r1, [r0, #2]
    b92e:	2000      	movs	r0, #0
    b930:	bd10      	pop	{r4, pc}
    b932:	0000      	.short	0x0000
    b934:	200002b4 	.word	0x200002b4
    b938:	0c11a70c 	.word	0x0c11a70c
    b93c:	11a70059 	.word	0x11a70059

0000b940 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    b940:	b510      	push	{r4, lr}
    b942:	f7fb ff01 	bl	7748 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    b946:	4805      	ldr	r0, [pc, #20]	; (b95c <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x1c>)
    b948:	6840      	ldr	r0, [r0, #4]
    b94a:	f005 fde7 	bl	1151c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x434>
    b94e:	f005 fb59 	bl	11004 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    b952:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b956:	f7fc b867 	b.w	7a28 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    b95a:	0000      	.short	0x0000
    b95c:	200002bc 	.word	0x200002bc

0000b960 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    b960:	b510      	push	{r4, lr}
    b962:	4c05      	ldr	r4, [pc, #20]	; (b978 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x18>)
    b964:	68a0      	ldr	r0, [r4, #8]
    b966:	f005 fdd9 	bl	1151c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x434>
    b96a:	68e0      	ldr	r0, [r4, #12]
    b96c:	f005 fdd6 	bl	1151c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x434>
    b970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b974:	f005 bbab 	b.w	110ce <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    b978:	200002bc 	.word	0x200002bc

0000b97c <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>:
    b97c:	b510      	push	{r4, lr}
    b97e:	4905      	ldr	r1, [pc, #20]	; (b994 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x18>)
    b980:	4805      	ldr	r0, [pc, #20]	; (b998 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    b982:	f005 fdbe 	bl	11502 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x41a>
    b986:	4804      	ldr	r0, [pc, #16]	; (b998 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    b988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b98c:	4903      	ldr	r1, [pc, #12]	; (b99c <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x20>)
    b98e:	1d00      	adds	r0, r0, #4
    b990:	f005 bdb7 	b.w	11502 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x41a>
    b994:	200002cc 	.word	0x200002cc
    b998:	200002c0 	.word	0x200002c0
    b99c:	200002d4 	.word	0x200002d4

0000b9a0 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>:
    b9a0:	b510      	push	{r4, lr}
    b9a2:	4908      	ldr	r1, [pc, #32]	; (b9c4 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x24>)
    b9a4:	4808      	ldr	r0, [pc, #32]	; (b9c8 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    b9a6:	f005 fdac 	bl	11502 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x41a>
    b9aa:	4807      	ldr	r0, [pc, #28]	; (b9c8 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    b9ac:	4907      	ldr	r1, [pc, #28]	; (b9cc <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x2c>)
    b9ae:	1d00      	adds	r0, r0, #4
    b9b0:	f005 fda7 	bl	11502 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x41a>
    b9b4:	4804      	ldr	r0, [pc, #16]	; (b9c8 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    b9b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b9ba:	4905      	ldr	r1, [pc, #20]	; (b9d0 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x30>)
    b9bc:	3008      	adds	r0, #8
    b9be:	f005 bda0 	b.w	11502 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x41a>
    b9c2:	0000      	.short	0x0000
    b9c4:	200002e4 	.word	0x200002e4
    b9c8:	200002c0 	.word	0x200002c0
    b9cc:	200002ec 	.word	0x200002ec
    b9d0:	200002dc 	.word	0x200002dc

0000b9d4 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
    b9d4:	4801      	ldr	r0, [pc, #4]	; (b9dc <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
    b9d6:	7800      	ldrb	r0, [r0, #0]
    b9d8:	4770      	bx	lr
    b9da:	0000      	.short	0x0000
    b9dc:	200002bc 	.word	0x200002bc
    b9e0:	b510      	push	{r4, lr}
    b9e2:	f7fc f975 	bl	7cd0 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>
    b9e6:	f7fc fff5 	bl	89d4 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>
    b9ea:	4803      	ldr	r0, [pc, #12]	; (b9f8 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x24>)
    b9ec:	f7fc f956 	bl	7c9c <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
    b9f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b9f4:	f7fb beb4 	b.w	7760 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q>
    b9f8:	2000160f 	.word	0x2000160f
    b9fc:	4909      	ldr	r1, [pc, #36]	; (ba24 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x50>)
    b9fe:	b510      	push	{r4, lr}
    ba00:	2001      	movs	r0, #1
    ba02:	7008      	strb	r0, [r1, #0]
    ba04:	f7fc f994 	bl	7d30 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>
    ba08:	f7fd fbc0 	bl	918c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>
    ba0c:	f003 f910 	bl	ec30 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    ba10:	4805      	ldr	r0, [pc, #20]	; (ba28 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x54>)
    ba12:	f7fa fcb5 	bl	6380 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
    ba16:	2000      	movs	r0, #0
    ba18:	f7f9 ff7c 	bl	5914 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    ba1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ba20:	f7fb bea6 	b.w	7770 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>
    ba24:	200002bc 	.word	0x200002bc
    ba28:	2000160f 	.word	0x2000160f

0000ba2c <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    ba2c:	4a04      	ldr	r2, [pc, #16]	; (ba40 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x14>)
    ba2e:	08c1      	lsrs	r1, r0, #3
    ba30:	f000 0307 	and.w	r3, r0, #7
    ba34:	2001      	movs	r0, #1
    ba36:	4098      	lsls	r0, r3
    ba38:	5c53      	ldrb	r3, [r2, r1]
    ba3a:	4303      	orrs	r3, r0
    ba3c:	5453      	strb	r3, [r2, r1]
    ba3e:	4770      	bx	lr
    ba40:	20000020 	.word	0x20000020

0000ba44 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    ba44:	4901      	ldr	r1, [pc, #4]	; (ba4c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    ba46:	e9d1 0100 	ldrd	r0, r1, [r1]
    ba4a:	4770      	bx	lr
    ba4c:	20000020 	.word	0x20000020

0000ba50 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    ba50:	4806      	ldr	r0, [pc, #24]	; (ba6c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x1c>)
    ba52:	8801      	ldrh	r1, [r0, #0]
    ba54:	7900      	ldrb	r0, [r0, #4]
    ba56:	0602      	lsls	r2, r0, #24
    ba58:	ea42 2011 	orr.w	r0, r2, r1, lsr #8
    ba5c:	f000 0001 	and.w	r0, r0, #1
    ba60:	1800      	adds	r0, r0, r0
    ba62:	b2c0      	uxtb	r0, r0
    ba64:	f040 0001 	orr.w	r0, r0, #1
    ba68:	4770      	bx	lr
    ba6a:	0000      	.short	0x0000
    ba6c:	20000020 	.word	0x20000020

0000ba70 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    ba70:	b510      	push	{r4, lr}
    ba72:	f7f9 f9ad 	bl	4dd0 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    ba76:	2200      	movs	r2, #0
    ba78:	4b08      	ldr	r3, [pc, #32]	; (ba9c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    ba7a:	4611      	mov	r1, r2
    ba7c:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    ba80:	4284      	cmp	r4, r0
    ba82:	d303      	bcc.n	ba8c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    ba84:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    ba88:	7882      	ldrb	r2, [r0, #2]
    ba8a:	e003      	b.n	ba94 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    ba8c:	1c49      	adds	r1, r1, #1
    ba8e:	b2c9      	uxtb	r1, r1
    ba90:	290c      	cmp	r1, #12
    ba92:	d3f3      	bcc.n	ba7c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    ba94:	4802      	ldr	r0, [pc, #8]	; (baa0 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    ba96:	7002      	strb	r2, [r0, #0]
    ba98:	bd10      	pop	{r4, pc}
    ba9a:	0000      	.short	0x0000
    ba9c:	0001156e 	.word	0x0001156e
    baa0:	2000033c 	.word	0x2000033c

0000baa4 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    baa4:	b570      	push	{r4, r5, r6, lr}
    baa6:	4605      	mov	r5, r0
    baa8:	4616      	mov	r6, r2
    baaa:	460c      	mov	r4, r1
    baac:	2002      	movs	r0, #2
    baae:	f000 f9b7 	bl	be20 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    bab2:	4906      	ldr	r1, [pc, #24]	; (bacc <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    bab4:	2001      	movs	r0, #1
    bab6:	1ef6      	subs	r6, r6, #3
    bab8:	7008      	strb	r0, [r1, #0]
    baba:	4805      	ldr	r0, [pc, #20]	; (bad0 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    babc:	6006      	str	r6, [r0, #0]
    babe:	4804      	ldr	r0, [pc, #16]	; (bad0 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    bac0:	3808      	subs	r0, #8
    bac2:	6005      	str	r5, [r0, #0]
    bac4:	1f00      	subs	r0, r0, #4
    bac6:	6004      	str	r4, [r0, #0]
    bac8:	bd70      	pop	{r4, r5, r6, pc}
    baca:	0000      	.short	0x0000
    bacc:	2000033d 	.word	0x2000033d
    bad0:	4000f510 	.word	0x4000f510

0000bad4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    bad4:	b510      	push	{r4, lr}
    bad6:	4c0c      	ldr	r4, [pc, #48]	; (bb08 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    bad8:	7820      	ldrb	r0, [r4, #0]
    bada:	b180      	cbz	r0, bafe <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    badc:	490b      	ldr	r1, [pc, #44]	; (bb0c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    bade:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    bae2:	6008      	str	r0, [r1, #0]
    bae4:	f000 f86a 	bl	bbbc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    bae8:	2100      	movs	r1, #0
    baea:	b120      	cbz	r0, baf6 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    baec:	2001      	movs	r0, #1
    baee:	7060      	strb	r0, [r4, #1]
    baf0:	4807      	ldr	r0, [pc, #28]	; (bb10 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    baf2:	6800      	ldr	r0, [r0, #0]
    baf4:	e001      	b.n	bafa <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    baf6:	7061      	strb	r1, [r4, #1]
    baf8:	2010      	movs	r0, #16
    bafa:	70a0      	strb	r0, [r4, #2]
    bafc:	7021      	strb	r1, [r4, #0]
    bafe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bb02:	2000      	movs	r0, #0
    bb04:	f000 b98c 	b.w	be20 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    bb08:	2000033d 	.word	0x2000033d
    bb0c:	4001f508 	.word	0x4001f508
    bb10:	4000f400 	.word	0x4000f400

0000bb14 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    bb14:	b510      	push	{r4, lr}
    bb16:	2002      	movs	r0, #2
    bb18:	f000 f982 	bl	be20 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    bb1c:	4904      	ldr	r1, [pc, #16]	; (bb30 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    bb1e:	2001      	movs	r0, #1
    bb20:	7008      	strb	r0, [r1, #0]
    bb22:	f000 f859 	bl	bbd8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    bb26:	4903      	ldr	r1, [pc, #12]	; (bb34 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    bb28:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    bb2c:	6008      	str	r0, [r1, #0]
    bb2e:	bd10      	pop	{r4, pc}
    bb30:	2000033d 	.word	0x2000033d
    bb34:	4001f504 	.word	0x4001f504

0000bb38 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    bb38:	4803      	ldr	r0, [pc, #12]	; (bb48 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    bb3a:	2100      	movs	r1, #0
    bb3c:	7001      	strb	r1, [r0, #0]
    bb3e:	7041      	strb	r1, [r0, #1]
    bb40:	2110      	movs	r1, #16
    bb42:	7081      	strb	r1, [r0, #2]
    bb44:	4770      	bx	lr
    bb46:	0000      	.short	0x0000
    bb48:	2000033d 	.word	0x2000033d

0000bb4c <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    bb4c:	4807      	ldr	r0, [pc, #28]	; (bb6c <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    bb4e:	b510      	push	{r4, lr}
    bb50:	7801      	ldrb	r1, [r0, #0]
    bb52:	b141      	cbz	r1, bb66 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    bb54:	f000 f832 	bl	bbbc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    bb58:	b118      	cbz	r0, bb62 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    bb5a:	4805      	ldr	r0, [pc, #20]	; (bb70 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    bb5c:	6800      	ldr	r0, [r0, #0]
    bb5e:	b2c0      	uxtb	r0, r0
    bb60:	bd10      	pop	{r4, pc}
    bb62:	2010      	movs	r0, #16
    bb64:	bd10      	pop	{r4, pc}
    bb66:	7880      	ldrb	r0, [r0, #2]
    bb68:	bd10      	pop	{r4, pc}
    bb6a:	0000      	.short	0x0000
    bb6c:	2000033d 	.word	0x2000033d
    bb70:	4000f400 	.word	0x4000f400

0000bb74 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    bb74:	4808      	ldr	r0, [pc, #32]	; (bb98 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    bb76:	b510      	push	{r4, lr}
    bb78:	7801      	ldrb	r1, [r0, #0]
    bb7a:	b159      	cbz	r1, bb94 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    bb7c:	4807      	ldr	r0, [pc, #28]	; (bb9c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    bb7e:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    bb82:	b128      	cbz	r0, bb90 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    bb84:	f000 f80c 	bl	bba0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    bb88:	2800      	cmp	r0, #0
    bb8a:	d000      	beq.n	bb8e <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    bb8c:	2001      	movs	r0, #1
    bb8e:	bd10      	pop	{r4, pc}
    bb90:	2002      	movs	r0, #2
    bb92:	bd10      	pop	{r4, pc}
    bb94:	7840      	ldrb	r0, [r0, #1]
    bb96:	bd10      	pop	{r4, pc}
    bb98:	2000033d 	.word	0x2000033d
    bb9c:	4000f000 	.word	0x4000f000
    bba0:	4805      	ldr	r0, [pc, #20]	; (bbb8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    bba2:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    bba6:	b111      	cbz	r1, bbae <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    bba8:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    bbac:	b108      	cbz	r0, bbb2 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    bbae:	2000      	movs	r0, #0
    bbb0:	4770      	bx	lr
    bbb2:	2001      	movs	r0, #1
    bbb4:	4770      	bx	lr
    bbb6:	0000      	.short	0x0000
    bbb8:	4000f000 	.word	0x4000f000
    bbbc:	4805      	ldr	r0, [pc, #20]	; (bbd4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    bbbe:	b510      	push	{r4, lr}
    bbc0:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    bbc4:	b120      	cbz	r0, bbd0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    bbc6:	f7ff ffeb 	bl	bba0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    bbca:	b108      	cbz	r0, bbd0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    bbcc:	2001      	movs	r0, #1
    bbce:	bd10      	pop	{r4, pc}
    bbd0:	2000      	movs	r0, #0
    bbd2:	bd10      	pop	{r4, pc}
    bbd4:	4000f000 	.word	0x4000f000
    bbd8:	4804      	ldr	r0, [pc, #16]	; (bbec <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    bbda:	2100      	movs	r1, #0
    bbdc:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    bbe0:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    bbe4:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    bbe8:	4770      	bx	lr
    bbea:	0000      	.short	0x0000
    bbec:	4000f000 	.word	0x4000f000

0000bbf0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>:
    bbf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bbf4:	4604      	mov	r4, r0
    bbf6:	461e      	mov	r6, r3
    bbf8:	4690      	mov	r8, r2
    bbfa:	460f      	mov	r7, r1
    bbfc:	2001      	movs	r0, #1
    bbfe:	f000 f90f 	bl	be20 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    bc02:	4d1e      	ldr	r5, [pc, #120]	; (bc7c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x8c>)
    bc04:	481e      	ldr	r0, [pc, #120]	; (bc80 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x90>)
    bc06:	f004 0103 	and.w	r1, r4, #3
    bc0a:	712e      	strb	r6, [r5, #4]
    bc0c:	6800      	ldr	r0, [r0, #0]
    bc0e:	0432      	lsls	r2, r6, #16
    bc10:	f361 0007 	bfi	r0, r1, #0, #8
    bc14:	f366 200f 	bfi	r0, r6, #8, #8
    bc18:	0c00      	lsrs	r0, r0, #16
    bc1a:	4e1a      	ldr	r6, [pc, #104]	; (bc84 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    bc1c:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
    bc20:	4308      	orrs	r0, r1
    bc22:	f8c6 0504 	str.w	r0, [r6, #1284]	; 0x504
    bc26:	4818      	ldr	r0, [pc, #96]	; (bc88 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    bc28:	6007      	str	r7, [r0, #0]
    bc2a:	f001 fddd 	bl	d7e8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    bc2e:	b938      	cbnz	r0, bc40 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x50>
    bc30:	4815      	ldr	r0, [pc, #84]	; (bc88 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    bc32:	3010      	adds	r0, #16
    bc34:	6801      	ldr	r1, [r0, #0]
    bc36:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    bc3a:	ea41 0108 	orr.w	r1, r1, r8
    bc3e:	6001      	str	r1, [r0, #0]
    bc40:	f000 f8e4 	bl	be0c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    bc44:	b10c      	cbz	r4, bc4a <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x5a>
    bc46:	2c04      	cmp	r4, #4
    bc48:	d107      	bne.n	bc5a <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x6a>
    bc4a:	4811      	ldr	r0, [pc, #68]	; (bc90 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xa0>)
    bc4c:	490d      	ldr	r1, [pc, #52]	; (bc84 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    bc4e:	4a0f      	ldr	r2, [pc, #60]	; (bc8c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x9c>)
    bc50:	1d09      	adds	r1, r1, #4
    bc52:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    bc56:	f8c0 1514 	str.w	r1, [r0, #1300]	; 0x514
    bc5a:	2001      	movs	r0, #1
    bc5c:	7068      	strb	r0, [r5, #1]
    bc5e:	70ec      	strb	r4, [r5, #3]
    bc60:	b11c      	cbz	r4, bc6a <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    bc62:	2c01      	cmp	r4, #1
    bc64:	d001      	beq.n	bc6a <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    bc66:	2c02      	cmp	r4, #2
    bc68:	d106      	bne.n	bc78 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x88>
    bc6a:	7028      	strb	r0, [r5, #0]
    bc6c:	2100      	movs	r1, #0
    bc6e:	f8c6 1100 	str.w	r1, [r6, #256]	; 0x100
    bc72:	f8c6 1200 	str.w	r1, [r6, #512]	; 0x200
    bc76:	6030      	str	r0, [r6, #0]
    bc78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bc7c:	20000340 	.word	0x20000340
    bc80:	0000be1c 	.word	0x0000be1c
    bc84:	4000f000 	.word	0x4000f000
    bc88:	4000f508 	.word	0x4000f508
    bc8c:	4000f100 	.word	0x4000f100
    bc90:	4001f088 	.word	0x4001f088

0000bc94 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>:
    bc94:	b570      	push	{r4, r5, r6, lr}
    bc96:	4a1c      	ldr	r2, [pc, #112]	; (bd08 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x74>)
    bc98:	7853      	ldrb	r3, [r2, #1]
    bc9a:	b1a3      	cbz	r3, bcc6 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x32>
    bc9c:	4b1b      	ldr	r3, [pc, #108]	; (bd0c <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x78>)
    bc9e:	6019      	str	r1, [r3, #0]
    bca0:	1d19      	adds	r1, r3, #4
    bca2:	6008      	str	r0, [r1, #0]
    bca4:	2501      	movs	r5, #1
    bca6:	7095      	strb	r5, [r2, #2]
    bca8:	4610      	mov	r0, r2
    bcaa:	78d6      	ldrb	r6, [r2, #3]
    bcac:	4b18      	ldr	r3, [pc, #96]	; (bd10 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    bcae:	7800      	ldrb	r0, [r0, #0]
    bcb0:	4c18      	ldr	r4, [pc, #96]	; (bd14 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x80>)
    bcb2:	2100      	movs	r1, #0
    bcb4:	b156      	cbz	r6, bccc <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x38>
    bcb6:	2e04      	cmp	r6, #4
    bcb8:	d01b      	beq.n	bcf2 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5e>
    bcba:	b308      	cbz	r0, bd00 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6c>
    bcbc:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    bcc0:	0668      	lsls	r0, r5, #25
    bcc2:	6018      	str	r0, [r3, #0]
    bcc4:	bd70      	pop	{r4, r5, r6, pc}
    bcc6:	f44f 71c2 	mov.w	r1, #388	; 0x184
    bcca:	e01a      	b.n	bd02 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    bccc:	b178      	cbz	r0, bcee <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5a>
    bcce:	4620      	mov	r0, r4
    bcd0:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    bcd4:	f44f 3600 	mov.w	r6, #131072	; 0x20000
    bcd8:	601e      	str	r6, [r3, #0]
    bcda:	1271      	asrs	r1, r6, #9
    bcdc:	f005 fc7c 	bl	115d8 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    bce0:	2800      	cmp	r0, #0
    bce2:	d0ef      	beq.n	bcc4 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x30>
    bce4:	6065      	str	r5, [r4, #4]
    bce6:	480a      	ldr	r0, [pc, #40]	; (bd10 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    bce8:	1d00      	adds	r0, r0, #4
    bcea:	6006      	str	r6, [r0, #0]
    bcec:	bd70      	pop	{r4, r5, r6, pc}
    bcee:	21b3      	movs	r1, #179	; 0xb3
    bcf0:	e007      	b.n	bd02 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    bcf2:	7015      	strb	r5, [r2, #0]
    bcf4:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    bcf8:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    bcfc:	6025      	str	r5, [r4, #0]
    bcfe:	bd70      	pop	{r4, r5, r6, pc}
    bd00:	21c6      	movs	r1, #198	; 0xc6
    bd02:	203c      	movs	r0, #60	; 0x3c
    bd04:	f7f9 fc2c 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bd08:	20000340 	.word	0x20000340
    bd0c:	4000f50c 	.word	0x4000f50c
    bd10:	4001f504 	.word	0x4001f504
    bd14:	4000f000 	.word	0x4000f000

0000bd18 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    bd18:	b570      	push	{r4, r5, r6, lr}
    bd1a:	4d05      	ldr	r5, [pc, #20]	; (bd30 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x18>)
    bd1c:	2400      	movs	r4, #0
    bd1e:	7828      	ldrb	r0, [r5, #0]
    bd20:	b110      	cbz	r0, bd28 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x10>
    bd22:	f000 f873 	bl	be0c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    bd26:	702c      	strb	r4, [r5, #0]
    bd28:	706c      	strb	r4, [r5, #1]
    bd2a:	70ac      	strb	r4, [r5, #2]
    bd2c:	bd70      	pop	{r4, r5, r6, pc}
    bd2e:	0000      	.short	0x0000
    bd30:	20000340 	.word	0x20000340

0000bd34 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    bd34:	4802      	ldr	r0, [pc, #8]	; (bd40 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    bd36:	2100      	movs	r1, #0
    bd38:	7001      	strb	r1, [r0, #0]
    bd3a:	7041      	strb	r1, [r0, #1]
    bd3c:	7081      	strb	r1, [r0, #2]
    bd3e:	4770      	bx	lr
    bd40:	20000340 	.word	0x20000340

0000bd44 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    bd44:	480b      	ldr	r0, [pc, #44]	; (bd74 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x30>)
    bd46:	b510      	push	{r4, lr}
    bd48:	7800      	ldrb	r0, [r0, #0]
    bd4a:	b158      	cbz	r0, bd64 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>
    bd4c:	f44f 7182 	mov.w	r1, #260	; 0x104
    bd50:	4809      	ldr	r0, [pc, #36]	; (bd78 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x34>)
    bd52:	f005 fc41 	bl	115d8 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    bd56:	b140      	cbz	r0, bd6a <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x26>
    bd58:	4808      	ldr	r0, [pc, #32]	; (bd7c <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x38>)
    bd5a:	6800      	ldr	r0, [r0, #0]
    bd5c:	2800      	cmp	r0, #0
    bd5e:	d000      	beq.n	bd62 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1e>
    bd60:	2001      	movs	r0, #1
    bd62:	bd10      	pop	{r4, pc}
    bd64:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
    bd68:	e001      	b.n	bd6e <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x2a>
    bd6a:	f240 11eb 	movw	r1, #491	; 0x1eb
    bd6e:	203c      	movs	r0, #60	; 0x3c
    bd70:	f7f9 fbf6 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bd74:	20000340 	.word	0x20000340
    bd78:	4000f000 	.word	0x4000f000
    bd7c:	4000f400 	.word	0x4000f400

0000bd80 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    bd80:	4801      	ldr	r0, [pc, #4]	; (bd88 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    bd82:	2101      	movs	r1, #1
    bd84:	6081      	str	r1, [r0, #8]
    bd86:	4770      	bx	lr
    bd88:	4000f000 	.word	0x4000f000

0000bd8c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    bd8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bd90:	481b      	ldr	r0, [pc, #108]	; (be00 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x74>)
    bd92:	7800      	ldrb	r0, [r0, #0]
    bd94:	b1d8      	cbz	r0, bdce <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x42>
    bd96:	f8df 806c 	ldr.w	r8, [pc, #108]	; be04 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    bd9a:	f44f 7682 	mov.w	r6, #260	; 0x104
    bd9e:	4631      	mov	r1, r6
    bda0:	4640      	mov	r0, r8
    bda2:	f005 fc19 	bl	115d8 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    bda6:	2800      	cmp	r0, #0
    bda8:	d128      	bne.n	bdfc <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>
    bdaa:	2002      	movs	r0, #2
    bdac:	f8c8 0304 	str.w	r0, [r8, #772]	; 0x304
    bdb0:	4c15      	ldr	r4, [pc, #84]	; (be08 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x7c>)
    bdb2:	6820      	ldr	r0, [r4, #0]
    bdb4:	43c0      	mvns	r0, r0
    bdb6:	f340 1500 	sbfx	r5, r0, #4, #1
    bdba:	6820      	ldr	r0, [r4, #0]
    bdbc:	f040 0010 	orr.w	r0, r0, #16
    bdc0:	6020      	str	r0, [r4, #0]
    bdc2:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    bdc6:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    bdca:	1c6d      	adds	r5, r5, #1
    bdcc:	e008      	b.n	bde0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x54>
    bdce:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
    bdd2:	203c      	movs	r0, #60	; 0x3c
    bdd4:	f7f9 fbc4 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bdd8:	f8c9 7280 	str.w	r7, [r9, #640]	; 0x280
    bddc:	f7f9 fa1a 	bl	5214 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    bde0:	4631      	mov	r1, r6
    bde2:	4640      	mov	r0, r8
    bde4:	f005 fbf8 	bl	115d8 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    bde8:	2800      	cmp	r0, #0
    bdea:	d0f5      	beq.n	bdd8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x4c>
    bdec:	b91d      	cbnz	r5, bdf6 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6a>
    bdee:	6820      	ldr	r0, [r4, #0]
    bdf0:	f020 0010 	bic.w	r0, r0, #16
    bdf4:	6020      	str	r0, [r4, #0]
    bdf6:	2002      	movs	r0, #2
    bdf8:	f8c8 0308 	str.w	r0, [r8, #776]	; 0x308
    bdfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    be00:	20000340 	.word	0x20000340
    be04:	4000f000 	.word	0x4000f000
    be08:	e000ed10 	.word	0xe000ed10
    be0c:	4902      	ldr	r1, [pc, #8]	; (be18 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x8c>)
    be0e:	4801      	ldr	r0, [pc, #4]	; (be14 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x88>)
    be10:	6008      	str	r0, [r1, #0]
    be12:	4770      	bx	lr
    be14:	02020000 	.word	0x02020000
    be18:	4001f508 	.word	0x4001f508
    be1c:	00010000 	.word	0x00010000

0000be20 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    be20:	b510      	push	{r4, lr}
    be22:	4604      	mov	r4, r0
    be24:	f000 f820 	bl	be68 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
    be28:	2c00      	cmp	r4, #0
    be2a:	d00e      	beq.n	be4a <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2a>
    be2c:	4a0b      	ldr	r2, [pc, #44]	; (be5c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    be2e:	480b      	ldr	r0, [pc, #44]	; (be5c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    be30:	490b      	ldr	r1, [pc, #44]	; (be60 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    be32:	3214      	adds	r2, #20
    be34:	2c01      	cmp	r4, #1
    be36:	d005      	beq.n	be44 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x24>
    be38:	2c02      	cmp	r4, #2
    be3a:	d007      	beq.n	be4c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2c>
    be3c:	2181      	movs	r1, #129	; 0x81
    be3e:	203d      	movs	r0, #61	; 0x3d
    be40:	f7f9 fb8e 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    be44:	2302      	movs	r3, #2
    be46:	6003      	str	r3, [r0, #0]
    be48:	6011      	str	r1, [r2, #0]
    be4a:	bd10      	pop	{r4, pc}
    be4c:	2303      	movs	r3, #3
    be4e:	6003      	str	r3, [r0, #0]
    be50:	6011      	str	r1, [r2, #0]
    be52:	4904      	ldr	r1, [pc, #16]	; (be64 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    be54:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    be58:	6008      	str	r0, [r1, #0]
    be5a:	bd10      	pop	{r4, pc}
    be5c:	4000f500 	.word	0x4000f500
    be60:	20001711 	.word	0x20001711
    be64:	4001f504 	.word	0x4001f504
    be68:	4805      	ldr	r0, [pc, #20]	; (be80 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    be6a:	b510      	push	{r4, lr}
    be6c:	2100      	movs	r1, #0
    be6e:	6001      	str	r1, [r0, #0]
    be70:	6001      	str	r1, [r0, #0]
    be72:	f7ff ff51 	bl	bd18 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    be76:	4903      	ldr	r1, [pc, #12]	; (be84 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    be78:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    be7c:	6008      	str	r0, [r1, #0]
    be7e:	bd10      	pop	{r4, pc}
    be80:	4000f500 	.word	0x4000f500
    be84:	4001f508 	.word	0x4001f508

0000be88 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    be88:	4805      	ldr	r0, [pc, #20]	; (bea0 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    be8a:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    be8e:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    be92:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    be96:	2100      	movs	r1, #0
    be98:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    be9c:	4770      	bx	lr
    be9e:	0000      	.short	0x0000
    bea0:	40001000 	.word	0x40001000

0000bea4 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    bea4:	4904      	ldr	r1, [pc, #16]	; (beb8 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    bea6:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
    beaa:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    beae:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    beb2:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    beb6:	4770      	bx	lr
    beb8:	40001000 	.word	0x40001000

0000bebc <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>:
    bebc:	4801      	ldr	r0, [pc, #4]	; (bec4 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I+0x8>)
    bebe:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    bec2:	4770      	bx	lr
    bec4:	200011c0 	.word	0x200011c0

0000bec8 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>:
    bec8:	4902      	ldr	r1, [pc, #8]	; (bed4 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I+0xc>)
    beca:	5c08      	ldrb	r0, [r1, r0]
    becc:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    bed0:	4770      	bx	lr
    bed2:	0000      	.short	0x0000
    bed4:	0000cbf6 	.word	0x0000cbf6

0000bed8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    bed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    beda:	4c24      	ldr	r4, [pc, #144]	; (bf6c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x94>)
    bedc:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    bee0:	f010 0f10 	tst.w	r0, #16
    bee4:	d001      	beq.n	beea <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x12>
    bee6:	2701      	movs	r7, #1
    bee8:	e000      	b.n	beec <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14>
    beea:	2700      	movs	r7, #0
    beec:	2010      	movs	r0, #16
    beee:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    bef2:	2002      	movs	r0, #2
    bef4:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    bef8:	481d      	ldr	r0, [pc, #116]	; (bf70 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x98>)
    befa:	2500      	movs	r5, #0
    befc:	491d      	ldr	r1, [pc, #116]	; (bf74 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>)
    befe:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
    bf02:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
    bf06:	6008      	str	r0, [r1, #0]
    bf08:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    bf0c:	f44f 7688 	mov.w	r6, #272	; 0x110
    bf10:	f010 0fff 	tst.w	r0, #255	; 0xff
    bf14:	d019      	beq.n	bf4a <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x72>
    bf16:	20ff      	movs	r0, #255	; 0xff
    bf18:	f88d 0000 	strb.w	r0, [sp]
    bf1c:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    bf20:	2001      	movs	r0, #1
    bf22:	6120      	str	r0, [r4, #16]
    bf24:	e005      	b.n	bf32 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x5a>
    bf26:	bf00      	nop
    bf28:	f89d 0000 	ldrb.w	r0, [sp]
    bf2c:	1e40      	subs	r0, r0, #1
    bf2e:	f88d 0000 	strb.w	r0, [sp]
    bf32:	f89d 0000 	ldrb.w	r0, [sp]
    bf36:	b128      	cbz	r0, bf44 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6c>
    bf38:	4631      	mov	r1, r6
    bf3a:	4620      	mov	r0, r4
    bf3c:	f005 fb7b 	bl	11636 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    bf40:	2800      	cmp	r0, #0
    bf42:	d0f1      	beq.n	bf28 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x50>
    bf44:	f89d 0000 	ldrb.w	r0, [sp]
    bf48:	b158      	cbz	r0, bf62 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8a>
    bf4a:	f000 fc49 	bl	c7e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x90>
    bf4e:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    bf52:	f000 fdd1 	bl	caf8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    bf56:	2f00      	cmp	r7, #0
    bf58:	d002      	beq.n	bf60 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x88>
    bf5a:	2010      	movs	r0, #16
    bf5c:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    bf60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bf62:	f640 0163 	movw	r1, #2147	; 0x863
    bf66:	203e      	movs	r0, #62	; 0x3e
    bf68:	f7f9 fafa 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bf6c:	40001000 	.word	0x40001000
    bf70:	200011c0 	.word	0x200011c0
    bf74:	4001f508 	.word	0x4001f508

0000bf78 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    bf78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bf7c:	4d18      	ldr	r5, [pc, #96]	; (bfe0 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x68>)
    bf7e:	4607      	mov	r7, r0
    bf80:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    bf84:	07c2      	lsls	r2, r0, #31
    bf86:	d00f      	beq.n	bfa8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x30>
    bf88:	4c16      	ldr	r4, [pc, #88]	; (bfe4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x6c>)
    bf8a:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
    bf8e:	f042 0201 	orr.w	r2, r2, #1
    bf92:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
    bf96:	f040 0002 	orr.w	r0, r0, #2
    bf9a:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    bf9e:	2601      	movs	r6, #1
    bfa0:	b13f      	cbz	r7, bfb2 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x3a>
    bfa2:	2f01      	cmp	r7, #1
    bfa4:	d00b      	beq.n	bfbe <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x46>
    bfa6:	e010      	b.n	bfca <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    bfa8:	f44f 61e9 	mov.w	r1, #1864	; 0x748
    bfac:	203e      	movs	r0, #62	; 0x3e
    bfae:	f7f9 fad7 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bfb2:	4608      	mov	r0, r1
    bfb4:	f000 fdfa 	bl	cbac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>
    bfb8:	726e      	strb	r6, [r5, #9]
    bfba:	6026      	str	r6, [r4, #0]
    bfbc:	e005      	b.n	bfca <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    bfbe:	4608      	mov	r0, r1
    bfc0:	f000 fdda 	bl	cb78 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x428>
    bfc4:	2002      	movs	r0, #2
    bfc6:	7268      	strb	r0, [r5, #9]
    bfc8:	6066      	str	r6, [r4, #4]
    bfca:	4807      	ldr	r0, [pc, #28]	; (bfe8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    bfcc:	64c6      	str	r6, [r0, #76]	; 0x4c
    bfce:	4806      	ldr	r0, [pc, #24]	; (bfe8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    bfd0:	300c      	adds	r0, #12
    bfd2:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    bfd6:	4638      	mov	r0, r7
    bfd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    bfdc:	f000 bd5e 	b.w	ca9c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34c>
    bfe0:	200011c0 	.word	0x200011c0
    bfe4:	40001000 	.word	0x40001000
    bfe8:	40008000 	.word	0x40008000

0000bfec <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    bfec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bff0:	4c2c      	ldr	r4, [pc, #176]	; (c0a4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb8>)
    bff2:	0006      	movs	r6, r0
    bff4:	4d2c      	ldr	r5, [pc, #176]	; (c0a8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xbc>)
    bff6:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    bffa:	f8df 80b0 	ldr.w	r8, [pc, #176]	; c0ac <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc0>
    bffe:	f040 0002 	orr.w	r0, r0, #2
    c002:	4689      	mov	r9, r1
    c004:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    c008:	f04f 0700 	mov.w	r7, #0
    c00c:	d002      	beq.n	c014 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x28>
    c00e:	2e01      	cmp	r6, #1
    c010:	d020      	beq.n	c054 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x68>
    c012:	e036      	b.n	c082 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    c014:	4608      	mov	r0, r1
    c016:	f000 fdc9 	bl	cbac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>
    c01a:	2001      	movs	r0, #1
    c01c:	7260      	strb	r0, [r4, #9]
    c01e:	79e0      	ldrb	r0, [r4, #7]
    c020:	2801      	cmp	r0, #1
    c022:	d105      	bne.n	c030 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x44>
    c024:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    c028:	f040 0008 	orr.w	r0, r0, #8
    c02c:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    c030:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    c032:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    c036:	62a0      	str	r0, [r4, #40]	; 0x28
    c038:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    c03c:	f8c8 0000 	str.w	r0, [r8]
    c040:	491b      	ldr	r1, [pc, #108]	; (c0b0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc4>)
    c042:	f831 0019 	ldrh.w	r0, [r1, r9, lsl #1]
    c046:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    c04a:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
    c04e:	fbb0 f7f1 	udiv	r7, r0, r1
    c052:	e016      	b.n	c082 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    c054:	4608      	mov	r0, r1
    c056:	f000 fd8f 	bl	cb78 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x428>
    c05a:	2002      	movs	r0, #2
    c05c:	7260      	strb	r0, [r4, #9]
    c05e:	79e0      	ldrb	r0, [r4, #7]
    c060:	2801      	cmp	r0, #1
    c062:	d105      	bne.n	c070 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    c064:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    c068:	f040 0004 	orr.w	r0, r0, #4
    c06c:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    c070:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    c072:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    c076:	62a0      	str	r0, [r4, #40]	; 0x28
    c078:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    c07c:	f8c8 0000 	str.w	r0, [r8]
    c080:	2729      	movs	r7, #41	; 0x29
    c082:	f000 fc19 	bl	c8b8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x168>
    c086:	f001 fa83 	bl	d590 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
    c08a:	b120      	cbz	r0, c096 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xaa>
    c08c:	f7ff ff24 	bl	bed8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    c090:	2000      	movs	r0, #0
    c092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c096:	2100      	movs	r1, #0
    c098:	4630      	mov	r0, r6
    c09a:	f000 fcff 	bl	ca9c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34c>
    c09e:	4638      	mov	r0, r7
    c0a0:	e7f7      	b.n	c092 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xa6>
    c0a2:	0000      	.short	0x0000
    c0a4:	200011c0 	.word	0x200011c0
    c0a8:	40001000 	.word	0x40001000
    c0ac:	4001f504 	.word	0x4001f504
    c0b0:	0000cbf0 	.word	0x0000cbf0

0000c0b4 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>:
    c0b4:	4a02      	ldr	r2, [pc, #8]	; (c0c0 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY+0xc>)
    c0b6:	6b13      	ldr	r3, [r2, #48]	; 0x30
    c0b8:	6003      	str	r3, [r0, #0]
    c0ba:	6b50      	ldr	r0, [r2, #52]	; 0x34
    c0bc:	6008      	str	r0, [r1, #0]
    c0be:	4770      	bx	lr
    c0c0:	200011c0 	.word	0x200011c0

0000c0c4 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    c0c4:	b510      	push	{r4, lr}
    c0c6:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    c0c8:	4901      	ldr	r1, [pc, #4]	; (c0d0 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    c0ca:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    c0ce:	bd10      	pop	{r4, pc}
    c0d0:	200011b0 	.word	0x200011b0

0000c0d4 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>:
    c0d4:	490f      	ldr	r1, [pc, #60]	; (c114 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x40>)
    c0d6:	b510      	push	{r4, lr}
    c0d8:	69ca      	ldr	r2, [r1, #28]
    c0da:	4282      	cmp	r2, r0
    c0dc:	d302      	bcc.n	c0e4 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x10>
    c0de:	f640 01f7 	movw	r1, #2295	; 0x8f7
    c0e2:	e00b      	b.n	c0fc <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x28>
    c0e4:	2201      	movs	r2, #1
    c0e6:	730a      	strb	r2, [r1, #12]
    c0e8:	6108      	str	r0, [r1, #16]
    c0ea:	490b      	ldr	r1, [pc, #44]	; (c118 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x44>)
    c0ec:	644a      	str	r2, [r1, #68]	; 0x44
    c0ee:	1d0a      	adds	r2, r1, #4
    c0f0:	f8d2 3540 	ldr.w	r3, [r2, #1344]	; 0x540
    c0f4:	4283      	cmp	r3, r0
    c0f6:	d304      	bcc.n	c102 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x2e>
    c0f8:	f44f 6110 	mov.w	r1, #2304	; 0x900
    c0fc:	203e      	movs	r0, #62	; 0x3e
    c0fe:	f7f9 fa2f 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c102:	2300      	movs	r3, #0
    c104:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144
    c108:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    c10c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c110:	f000 bc98 	b.w	ca44 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f4>
    c114:	200011c0 	.word	0x200011c0
    c118:	40008000 	.word	0x40008000

0000c11c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    c11c:	b570      	push	{r4, r5, r6, lr}
    c11e:	4c0f      	ldr	r4, [pc, #60]	; (c15c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x40>)
    c120:	4603      	mov	r3, r0
    c122:	2002      	movs	r0, #2
    c124:	7320      	strb	r0, [r4, #12]
    c126:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
    c12a:	2096      	movs	r0, #150	; 0x96
    c12c:	f894 1020 	ldrb.w	r1, [r4, #32]
    c130:	7d22      	ldrb	r2, [r4, #20]
    c132:	2d01      	cmp	r5, #1
    c134:	d00e      	beq.n	c154 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x38>
    c136:	f000 fd97 	bl	cc68 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    c13a:	6120      	str	r0, [r4, #16]
    c13c:	4808      	ldr	r0, [pc, #32]	; (c160 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    c13e:	2100      	movs	r1, #0
    c140:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    c144:	6921      	ldr	r1, [r4, #16]
    c146:	69e0      	ldr	r0, [r4, #28]
    c148:	4408      	add	r0, r1
    c14a:	4905      	ldr	r1, [pc, #20]	; (c160 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    c14c:	1d09      	adds	r1, r1, #4
    c14e:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    c152:	bd70      	pop	{r4, r5, r6, pc}
    c154:	f000 fda6 	bl	cca4 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    c158:	e7ef      	b.n	c13a <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x1e>
    c15a:	0000      	.short	0x0000
    c15c:	200011c0 	.word	0x200011c0
    c160:	40008000 	.word	0x40008000

0000c164 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>:
    c164:	b510      	push	{r4, lr}
    c166:	f001 fb5b 	bl	d820 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    c16a:	2800      	cmp	r0, #0
    c16c:	d006      	beq.n	c17c <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x18>
    c16e:	4804      	ldr	r0, [pc, #16]	; (c180 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x1c>)
    c170:	6801      	ldr	r1, [r0, #0]
    c172:	f021 0101 	bic.w	r1, r1, #1
    c176:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
    c17a:	6001      	str	r1, [r0, #0]
    c17c:	bd10      	pop	{r4, pc}
    c17e:	0000      	.short	0x0000
    c180:	40001774 	.word	0x40001774

0000c184 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    c184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c188:	2238      	movs	r2, #56	; 0x38
    c18a:	2100      	movs	r1, #0
    c18c:	4813      	ldr	r0, [pc, #76]	; (c1dc <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    c18e:	f001 fbe5 	bl	d95c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    c192:	f000 fcb1 	bl	caf8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    c196:	f001 fafc 	bl	d792 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    c19a:	4d11      	ldr	r5, [pc, #68]	; (c1e0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    c19c:	4e10      	ldr	r6, [pc, #64]	; (c1e0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    c19e:	2400      	movs	r4, #0
    c1a0:	4f0f      	ldr	r7, [pc, #60]	; (c1e0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    c1a2:	3508      	adds	r5, #8
    c1a4:	3610      	adds	r6, #16
    c1a6:	b928      	cbnz	r0, c1b4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    c1a8:	f001 fb0a 	bl	d7c0 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    c1ac:	b910      	cbnz	r0, c1b4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    c1ae:	f001 fb11 	bl	d7d4 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    c1b2:	b108      	cbz	r0, c1b8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    c1b4:	2224      	movs	r2, #36	; 0x24
    c1b6:	e006      	b.n	c1c6 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    c1b8:	f001 fb4c 	bl	d854 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    c1bc:	b910      	cbnz	r0, c1c4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    c1be:	f001 fb3f 	bl	d840 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    c1c2:	b140      	cbz	r0, c1d6 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    c1c4:	2240      	movs	r2, #64	; 0x40
    c1c6:	21ff      	movs	r1, #255	; 0xff
    c1c8:	4638      	mov	r0, r7
    c1ca:	f001 fbc7 	bl	d95c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    c1ce:	602c      	str	r4, [r5, #0]
    c1d0:	6034      	str	r4, [r6, #0]
    c1d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c1d6:	2238      	movs	r2, #56	; 0x38
    c1d8:	e7f5      	b.n	c1c6 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    c1da:	0000      	.short	0x0000
    c1dc:	200011c0 	.word	0x200011c0
    c1e0:	40000e00 	.word	0x40000e00

0000c1e4 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    c1e4:	4801      	ldr	r0, [pc, #4]	; (c1ec <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x8>)
    c1e6:	69c0      	ldr	r0, [r0, #28]
    c1e8:	4770      	bx	lr
    c1ea:	0000      	.short	0x0000
    c1ec:	200011c0 	.word	0x200011c0

0000c1f0 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>:
    c1f0:	4801      	ldr	r0, [pc, #4]	; (c1f8 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x8>)
    c1f2:	6980      	ldr	r0, [r0, #24]
    c1f4:	4770      	bx	lr
    c1f6:	0000      	.short	0x0000
    c1f8:	200011c0 	.word	0x200011c0

0000c1fc <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    c1fc:	b510      	push	{r4, lr}
    c1fe:	f000 fc2f 	bl	ca60 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x310>
    c202:	f7ff fe69 	bl	bed8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    c206:	f7f9 f85b 	bl	52c0 <mpsl_fem_disable>
    c20a:	b130      	cbz	r0, c21a <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    c20c:	1c40      	adds	r0, r0, #1
    c20e:	d004      	beq.n	c21a <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    c210:	f240 5126 	movw	r1, #1318	; 0x526
    c214:	203e      	movs	r0, #62	; 0x3e
    c216:	f7f9 f9a3 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c21a:	480f      	ldr	r0, [pc, #60]	; (c258 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x5c>)
    c21c:	4a0f      	ldr	r2, [pc, #60]	; (c25c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x60>)
    c21e:	6a81      	ldr	r1, [r0, #40]	; 0x28
    c220:	f041 6144 	orr.w	r1, r1, #205520896	; 0xc400000
    c224:	6011      	str	r1, [r2, #0]
    c226:	2400      	movs	r4, #0
    c228:	6284      	str	r4, [r0, #40]	; 0x28
    c22a:	7304      	strb	r4, [r0, #12]
    c22c:	61c4      	str	r4, [r0, #28]
    c22e:	6184      	str	r4, [r0, #24]
    c230:	f000 fc16 	bl	ca60 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x310>
    c234:	480a      	ldr	r0, [pc, #40]	; (c260 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x64>)
    c236:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    c23a:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    c23e:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    c242:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    c246:	2001      	movs	r0, #1
    c248:	f005 f9e4 	bl	11614 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    c24c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c250:	2001      	movs	r0, #1
    c252:	f005 b9d2 	b.w	115fa <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    c256:	0000      	.short	0x0000
    c258:	200011c0 	.word	0x200011c0
    c25c:	4001f508 	.word	0x4001f508
    c260:	40008000 	.word	0x40008000

0000c264 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    c264:	b570      	push	{r4, r5, r6, lr}
    c266:	2001      	movs	r0, #1
    c268:	f005 f9d4 	bl	11614 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    c26c:	4c37      	ldr	r4, [pc, #220]	; (c34c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    c26e:	2000      	movs	r0, #0
    c270:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    c274:	2001      	movs	r0, #1
    c276:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    c27a:	f001 fac1 	bl	d800 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    c27e:	4d34      	ldr	r5, [pc, #208]	; (c350 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    c280:	b118      	cbz	r0, c28a <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x26>
    c282:	6828      	ldr	r0, [r5, #0]
    c284:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    c288:	6028      	str	r0, [r5, #0]
    c28a:	f001 faad 	bl	d7e8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c28e:	b128      	cbz	r0, c29c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x38>
    c290:	6828      	ldr	r0, [r5, #0]
    c292:	4930      	ldr	r1, [pc, #192]	; (c354 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    c294:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    c298:	4308      	orrs	r0, r1
    c29a:	6028      	str	r0, [r5, #0]
    c29c:	f001 fac0 	bl	d820 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    c2a0:	b138      	cbz	r0, c2b2 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4e>
    c2a2:	482b      	ldr	r0, [pc, #172]	; (c350 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    c2a4:	1d00      	adds	r0, r0, #4
    c2a6:	6801      	ldr	r1, [r0, #0]
    c2a8:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    c2ac:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    c2b0:	6001      	str	r1, [r0, #0]
    c2b2:	4927      	ldr	r1, [pc, #156]	; (c350 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    c2b4:	4828      	ldr	r0, [pc, #160]	; (c358 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    c2b6:	313c      	adds	r1, #60	; 0x3c
    c2b8:	6008      	str	r0, [r1, #0]
    c2ba:	f7f9 f837 	bl	532c <mpsl_fem_device_config_254_apply_get>
    c2be:	b140      	cbz	r0, c2d2 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    c2c0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c2c4:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    c2c8:	1c41      	adds	r1, r0, #1
    c2ca:	d002      	beq.n	c2d2 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    c2cc:	4920      	ldr	r1, [pc, #128]	; (c350 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    c2ce:	3110      	adds	r1, #16
    c2d0:	6008      	str	r0, [r1, #0]
    c2d2:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    c2d6:	6e00      	ldr	r0, [r0, #96]	; 0x60
    c2d8:	1c41      	adds	r1, r0, #1
    c2da:	d004      	beq.n	c2e6 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x82>
    c2dc:	491f      	ldr	r1, [pc, #124]	; (c35c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    c2de:	680a      	ldr	r2, [r1, #0]
    c2e0:	f360 4217 	bfi	r2, r0, #16, #8
    c2e4:	600a      	str	r2, [r1, #0]
    c2e6:	f240 1103 	movw	r1, #259	; 0x103
    c2ea:	f240 605b 	movw	r0, #1627	; 0x65b
    c2ee:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    c2f2:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    c2f6:	2001      	movs	r0, #1
    c2f8:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
    c2fc:	f000 f842 	bl	c384 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    c300:	f240 2001 	movw	r0, #513	; 0x201
    c304:	f8c4 0650 	str.w	r0, [r4, #1616]	; 0x650
    c308:	2002      	movs	r0, #2
    c30a:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    c30e:	4914      	ldr	r1, [pc, #80]	; (c360 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    c310:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    c314:	6008      	str	r0, [r1, #0]
    c316:	4913      	ldr	r1, [pc, #76]	; (c364 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    c318:	2000      	movs	r0, #0
    c31a:	4d13      	ldr	r5, [pc, #76]	; (c368 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    c31c:	8608      	strh	r0, [r1, #48]	; 0x30
    c31e:	3110      	adds	r1, #16
    c320:	61c8      	str	r0, [r1, #28]
    c322:	f881 002c 	strb.w	r0, [r1, #44]	; 0x2c
    c326:	7028      	strb	r0, [r5, #0]
    c328:	2001      	movs	r0, #1
    c32a:	f005 f966 	bl	115fa <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    c32e:	2010      	movs	r0, #16
    c330:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    c334:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    c338:	2002      	movs	r0, #2
    c33a:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    c33e:	6868      	ldr	r0, [r5, #4]
    c340:	2800      	cmp	r0, #0
    c342:	d002      	beq.n	c34a <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe6>
    c344:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c348:	4700      	bx	r0
    c34a:	bd70      	pop	{r4, r5, r6, pc}
    c34c:	40001000 	.word	0x40001000
    c350:	4000173c 	.word	0x4000173c
    c354:	80000096 	.word	0x80000096
    c358:	8900002c 	.word	0x8900002c
    c35c:	4000158c 	.word	0x4000158c
    c360:	4001f504 	.word	0x4001f504
    c364:	200011b0 	.word	0x200011b0
    c368:	200002f4 	.word	0x200002f4

0000c36c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    c36c:	4901      	ldr	r1, [pc, #4]	; (c374 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    c36e:	7548      	strb	r0, [r1, #21]
    c370:	4770      	bx	lr
    c372:	0000      	.short	0x0000
    c374:	200011c0 	.word	0x200011c0

0000c378 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    c378:	4901      	ldr	r1, [pc, #4]	; (c380 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x8>)
    c37a:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    c37e:	4770      	bx	lr
    c380:	0000cc44 	.word	0x0000cc44

0000c384 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>:
    c384:	4908      	ldr	r1, [pc, #32]	; (c3a8 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x24>)
    c386:	b510      	push	{r4, lr}
    c388:	7508      	strb	r0, [r1, #20]
    c38a:	4908      	ldr	r1, [pc, #32]	; (c3ac <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x28>)
    c38c:	2801      	cmp	r0, #1
    c38e:	d006      	beq.n	c39e <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1a>
    c390:	2802      	cmp	r0, #2
    c392:	d006      	beq.n	c3a2 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1e>
    c394:	f640 5135 	movw	r1, #3381	; 0xd35
    c398:	203e      	movs	r0, #62	; 0x3e
    c39a:	f7f9 f8e1 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c39e:	2003      	movs	r0, #3
    c3a0:	e000      	b.n	c3a4 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x20>
    c3a2:	2004      	movs	r0, #4
    c3a4:	6008      	str	r0, [r1, #0]
    c3a6:	bd10      	pop	{r4, pc}
    c3a8:	200011c0 	.word	0x200011c0
    c3ac:	40001510 	.word	0x40001510

0000c3b0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    c3b0:	4905      	ldr	r1, [pc, #20]	; (c3c8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    c3b2:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    c3b6:	4805      	ldr	r0, [pc, #20]	; (c3cc <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x1c>)
    c3b8:	f810 1f2c 	ldrb.w	r1, [r0, #44]!
    c3bc:	f041 0101 	orr.w	r1, r1, #1
    c3c0:	7001      	strb	r1, [r0, #0]
    c3c2:	f000 ba3f 	b.w	c844 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    c3c6:	0000      	.short	0x0000
    c3c8:	40001000 	.word	0x40001000
    c3cc:	200011c0 	.word	0x200011c0

0000c3d0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    c3d0:	4901      	ldr	r1, [pc, #4]	; (c3d8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x8>)
    c3d2:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    c3d6:	4770      	bx	lr
    c3d8:	0000cc50 	.word	0x0000cc50

0000c3dc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    c3dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c3e0:	f8df 90a0 	ldr.w	r9, [pc, #160]	; c484 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xa8>
    c3e4:	4d28      	ldr	r5, [pc, #160]	; (c488 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xac>)
    c3e6:	460f      	mov	r7, r1
    c3e8:	0006      	movs	r6, r0
    c3ea:	4614      	mov	r4, r2
    c3ec:	f04f 0801 	mov.w	r8, #1
    c3f0:	d004      	beq.n	c3fc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x20>
    c3f2:	2e01      	cmp	r6, #1
    c3f4:	d010      	beq.n	c418 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x3c>
    c3f6:	f240 71f4 	movw	r1, #2036	; 0x7f4
    c3fa:	e039      	b.n	c470 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x94>
    c3fc:	4610      	mov	r0, r2
    c3fe:	f000 fbd5 	bl	cbac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>
    c402:	4822      	ldr	r0, [pc, #136]	; (c48c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb0>)
    c404:	f885 8009 	strb.w	r8, [r5, #9]
    c408:	f830 1014 	ldrh.w	r1, [r0, r4, lsl #1]
    c40c:	4638      	mov	r0, r7
    c40e:	f000 fb7b 	bl	cb08 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b8>
    c412:	4604      	mov	r4, r0
    c414:	4648      	mov	r0, r9
    c416:	e00c      	b.n	c432 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x56>
    c418:	4610      	mov	r0, r2
    c41a:	f000 fbad 	bl	cb78 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x428>
    c41e:	2002      	movs	r0, #2
    c420:	7268      	strb	r0, [r5, #9]
    c422:	f649 71ba 	movw	r1, #40890	; 0x9fba
    c426:	4638      	mov	r0, r7
    c428:	f000 fb6e 	bl	cb08 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b8>
    c42c:	4604      	mov	r4, r0
    c42e:	4815      	ldr	r0, [pc, #84]	; (c484 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xa8>)
    c430:	1d00      	adds	r0, r0, #4
    c432:	f000 fb27 	bl	ca84 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x334>
    c436:	4f16      	ldr	r7, [pc, #88]	; (c490 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb4>)
    c438:	f8c7 4540 	str.w	r4, [r7, #1344]	; 0x540
    c43c:	4916      	ldr	r1, [pc, #88]	; (c498 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xbc>)
    c43e:	4815      	ldr	r0, [pc, #84]	; (c494 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb8>)
    c440:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    c444:	2010      	movs	r0, #16
    c446:	f8c9 0304 	str.w	r0, [r9, #772]	; 0x304
    c44a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    c44c:	4913      	ldr	r1, [pc, #76]	; (c49c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc0>)
    c44e:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    c452:	62a8      	str	r0, [r5, #40]	; 0x28
    c454:	0138      	lsls	r0, r7, #4
    c456:	6008      	str	r0, [r1, #0]
    c458:	f000 fa2e 	bl	c8b8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x168>
    c45c:	f8c7 804c 	str.w	r8, [r7, #76]	; 0x4c
    c460:	480b      	ldr	r0, [pc, #44]	; (c490 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb4>)
    c462:	300c      	adds	r0, #12
    c464:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    c468:	42a0      	cmp	r0, r4
    c46a:	d304      	bcc.n	c476 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x9a>
    c46c:	f640 010a 	movw	r1, #2058	; 0x80a
    c470:	203e      	movs	r0, #62	; 0x3e
    c472:	f7f9 f875 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c476:	4621      	mov	r1, r4
    c478:	4630      	mov	r0, r6
    c47a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c47e:	f000 bb0d 	b.w	ca9c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34c>
    c482:	0000      	.short	0x0000
    c484:	40001000 	.word	0x40001000
    c488:	200011c0 	.word	0x200011c0
    c48c:	0000cbf0 	.word	0x0000cbf0
    c490:	40008000 	.word	0x40008000
    c494:	40008140 	.word	0x40008140
    c498:	4001f098 	.word	0x4001f098
    c49c:	4001f504 	.word	0x4001f504

0000c4a0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    c4a0:	4b0d      	ldr	r3, [pc, #52]	; (c4d8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    c4a2:	b510      	push	{r4, lr}
    c4a4:	71d8      	strb	r0, [r3, #7]
    c4a6:	729a      	strb	r2, [r3, #10]
    c4a8:	b151      	cbz	r1, c4c0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    c4aa:	2002      	movs	r0, #2
    c4ac:	7218      	strb	r0, [r3, #8]
    c4ae:	2801      	cmp	r0, #1
    c4b0:	d008      	beq.n	c4c4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    c4b2:	2802      	cmp	r0, #2
    c4b4:	d00f      	beq.n	c4d6 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    c4b6:	f640 211d 	movw	r1, #2589	; 0xa1d
    c4ba:	203e      	movs	r0, #62	; 0x3e
    c4bc:	f7f9 f850 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c4c0:	2001      	movs	r0, #1
    c4c2:	e7f3      	b.n	c4ac <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    c4c4:	7a58      	ldrb	r0, [r3, #9]
    c4c6:	2802      	cmp	r0, #2
    c4c8:	d105      	bne.n	c4d6 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    c4ca:	f000 f97f 	bl	c7cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x7c>
    c4ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c4d2:	f000 baad 	b.w	ca30 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e0>
    c4d6:	bd10      	pop	{r4, pc}
    c4d8:	200011c0 	.word	0x200011c0

0000c4dc <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
    c4dc:	4902      	ldr	r1, [pc, #8]	; (c4e8 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0xc>)
    c4de:	2000      	movs	r0, #0
    c4e0:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    c4e4:	4770      	bx	lr
    c4e6:	0000      	.short	0x0000
    c4e8:	40008000 	.word	0x40008000

0000c4ec <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    c4ec:	4904      	ldr	r1, [pc, #16]	; (c500 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x14>)
    c4ee:	f8d1 1548 	ldr.w	r1, [r1, #1352]	; 0x548
    c4f2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    c4f6:	4249      	negs	r1, r1
    c4f8:	7001      	strb	r1, [r0, #0]
    c4fa:	2001      	movs	r0, #1
    c4fc:	4770      	bx	lr
    c4fe:	0000      	.short	0x0000
    c500:	40001000 	.word	0x40001000

0000c504 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    c504:	4903      	ldr	r1, [pc, #12]	; (c514 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    c506:	0e02      	lsrs	r2, r0, #24
    c508:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
    c50c:	0200      	lsls	r0, r0, #8
    c50e:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
    c512:	4770      	bx	lr
    c514:	40001000 	.word	0x40001000

0000c518 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    c518:	6800      	ldr	r0, [r0, #0]
    c51a:	4903      	ldr	r1, [pc, #12]	; (c528 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x10>)
    c51c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    c520:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    c524:	4770      	bx	lr
    c526:	0000      	.short	0x0000
    c528:	40001000 	.word	0x40001000

0000c52c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>:
    c52c:	b510      	push	{r4, lr}
    c52e:	2200      	movs	r2, #0
    c530:	2901      	cmp	r1, #1
    c532:	d006      	beq.n	c542 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x16>
    c534:	2902      	cmp	r1, #2
    c536:	d002      	beq.n	c53e <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x12>
    c538:	f44f 712f 	mov.w	r1, #700	; 0x2bc
    c53c:	e014      	b.n	c568 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x3c>
    c53e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    c542:	490b      	ldr	r1, [pc, #44]	; (c570 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x44>)
    c544:	430a      	orrs	r2, r1
    c546:	490b      	ldr	r1, [pc, #44]	; (c574 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    c548:	600a      	str	r2, [r1, #0]
    c54a:	490b      	ldr	r1, [pc, #44]	; (c578 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x4c>)
    c54c:	4308      	orrs	r0, r1
    c54e:	4909      	ldr	r1, [pc, #36]	; (c574 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    c550:	1d09      	adds	r1, r1, #4
    c552:	6008      	str	r0, [r1, #0]
    c554:	4809      	ldr	r0, [pc, #36]	; (c57c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x50>)
    c556:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    c55a:	b2c0      	uxtb	r0, r0
    c55c:	2803      	cmp	r0, #3
    c55e:	d001      	beq.n	c564 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x38>
    c560:	280b      	cmp	r0, #11
    c562:	d104      	bne.n	c56e <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x42>
    c564:	f44f 7135 	mov.w	r1, #724	; 0x2d4
    c568:	203e      	movs	r0, #62	; 0x3e
    c56a:	f7f8 fff9 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c56e:	bd10      	pop	{r4, pc}
    c570:	00100108 	.word	0x00100108
    c574:	40001514 	.word	0x40001514
    c578:	02030000 	.word	0x02030000
    c57c:	40001000 	.word	0x40001000

0000c580 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    c580:	4901      	ldr	r1, [pc, #4]	; (c588 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    c582:	7588      	strb	r0, [r1, #22]
    c584:	4770      	bx	lr
    c586:	0000      	.short	0x0000
    c588:	200011c0 	.word	0x200011c0

0000c58c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    c58c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c590:	4852      	ldr	r0, [pc, #328]	; (c6dc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    c592:	f04f 0a01 	mov.w	sl, #1
    c596:	f8c0 a04c 	str.w	sl, [r0, #76]	; 0x4c
    c59a:	4850      	ldr	r0, [pc, #320]	; (c6dc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    c59c:	300c      	adds	r0, #12
    c59e:	f8d0 7540 	ldr.w	r7, [r0, #1344]	; 0x540
    c5a2:	f000 fff3 	bl	d58c <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>
    c5a6:	4c4e      	ldr	r4, [pc, #312]	; (c6e0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    c5a8:	e9c4 070c 	strd	r0, r7, [r4, #48]	; 0x30
    c5ac:	f000 f918 	bl	c7e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x90>
    c5b0:	494c      	ldr	r1, [pc, #304]	; (c6e4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    c5b2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    c5b4:	6008      	str	r0, [r1, #0]
    c5b6:	f8df 9130 	ldr.w	r9, [pc, #304]	; c6e8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>
    c5ba:	2000      	movs	r0, #0
    c5bc:	62a0      	str	r0, [r4, #40]	; 0x28
    c5be:	f8d9 2200 	ldr.w	r2, [r9, #512]	; 0x200
    c5c2:	f240 131d 	movw	r3, #285	; 0x11d
    c5c6:	439a      	bics	r2, r3
    c5c8:	f8c9 2200 	str.w	r2, [r9, #512]	; 0x200
    c5cc:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    c5d0:	f000 f986 	bl	c8e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x190>
    c5d4:	4605      	mov	r5, r0
    c5d6:	4841      	ldr	r0, [pc, #260]	; (c6dc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    c5d8:	3008      	adds	r0, #8
    c5da:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    c5de:	4e3f      	ldr	r6, [pc, #252]	; (c6dc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    c5e0:	61e0      	str	r0, [r4, #28]
    c5e2:	1d36      	adds	r6, r6, #4
    c5e4:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    c5e8:	61a0      	str	r0, [r4, #24]
    c5ea:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    c5ee:	7d21      	ldrb	r1, [r4, #20]
    c5f0:	f884 1020 	strb.w	r1, [r4, #32]
    c5f4:	7a61      	ldrb	r1, [r4, #9]
    c5f6:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    c5fa:	46a0      	mov	r8, r4
    c5fc:	2400      	movs	r4, #0
    c5fe:	4639      	mov	r1, r7
    c600:	4628      	mov	r0, r5
    c602:	f000 f9e1 	bl	c9c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x278>
    c606:	b910      	cbnz	r0, c60e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x82>
    c608:	f8c9 a010 	str.w	sl, [r9, #16]
    c60c:	2401      	movs	r4, #1
    c60e:	4f34      	ldr	r7, [pc, #208]	; (c6e0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    c610:	07e8      	lsls	r0, r5, #31
    c612:	f1a7 0710 	sub.w	r7, r7, #16
    c616:	d002      	beq.n	c61e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x92>
    c618:	6838      	ldr	r0, [r7, #0]
    c61a:	4780      	blx	r0
    c61c:	e032      	b.n	c684 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf8>
    c61e:	07a8      	lsls	r0, r5, #30
    c620:	d527      	bpl.n	c672 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe6>
    c622:	0768      	lsls	r0, r5, #29
    c624:	d41f      	bmi.n	c666 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    c626:	f001 f8fb 	bl	d820 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    c62a:	b9e0      	cbnz	r0, c666 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    c62c:	f001 f8e8 	bl	d800 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    c630:	b9c8      	cbnz	r0, c666 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    c632:	482e      	ldr	r0, [pc, #184]	; (c6ec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>)
    c634:	6800      	ldr	r0, [r0, #0]
    c636:	f3c0 6c00 	ubfx	ip, r0, #24, #1
    c63a:	f3c0 5142 	ubfx	r1, r0, #21, #3
    c63e:	f000 030f 	and.w	r3, r0, #15
    c642:	f3c0 1203 	ubfx	r2, r0, #4, #4
    c646:	f3c0 2003 	ubfx	r0, r0, #8, #4
    c64a:	f1bc 0f00 	cmp.w	ip, #0
    c64e:	d00a      	beq.n	c666 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    c650:	b10b      	cbz	r3, c656 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xca>
    c652:	b102      	cbz	r2, c656 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xca>
    c654:	b938      	cbnz	r0, c666 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    c656:	4825      	ldr	r0, [pc, #148]	; (c6ec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>)
    c658:	1d00      	adds	r0, r0, #4
    c65a:	6800      	ldr	r0, [r0, #0]
    c65c:	b118      	cbz	r0, c666 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    c65e:	2903      	cmp	r1, #3
    c660:	d201      	bcs.n	c666 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    c662:	f045 0504 	orr.w	r5, r5, #4
    c666:	f345 0080 	sbfx	r0, r5, #2, #1
    c66a:	4621      	mov	r1, r4
    c66c:	1c40      	adds	r0, r0, #1
    c66e:	687a      	ldr	r2, [r7, #4]
    c670:	e007      	b.n	c682 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf6>
    c672:	f015 0f28 	tst.w	r5, #40	; 0x28
    c676:	d005      	beq.n	c684 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf8>
    c678:	f345 1140 	sbfx	r1, r5, #5, #1
    c67c:	68ba      	ldr	r2, [r7, #8]
    c67e:	4620      	mov	r0, r4
    c680:	1c49      	adds	r1, r1, #1
    c682:	4790      	blx	r2
    c684:	06e8      	lsls	r0, r5, #27
    c686:	d501      	bpl.n	c68c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x100>
    c688:	68f8      	ldr	r0, [r7, #12]
    c68a:	4780      	blx	r0
    c68c:	f898 1009 	ldrb.w	r1, [r8, #9]
    c690:	4640      	mov	r0, r8
    c692:	2902      	cmp	r1, #2
    c694:	d120      	bne.n	c6d8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>
    c696:	7b01      	ldrb	r1, [r0, #12]
    c698:	2900      	cmp	r1, #0
    c69a:	d01d      	beq.n	c6d8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>
    c69c:	2902      	cmp	r1, #2
    c69e:	d004      	beq.n	c6aa <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x11e>
    c6a0:	2901      	cmp	r1, #1
    c6a2:	d009      	beq.n	c6b8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x12c>
    c6a4:	f640 4114 	movw	r1, #3092	; 0xc14
    c6a8:	e00d      	b.n	c6c6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13a>
    c6aa:	69c1      	ldr	r1, [r0, #28]
    c6ac:	f8d8 0010 	ldr.w	r0, [r8, #16]
    c6b0:	4408      	add	r0, r1
    c6b2:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    c6b6:	e00b      	b.n	c6d0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x144>
    c6b8:	6901      	ldr	r1, [r0, #16]
    c6ba:	f8d8 001c 	ldr.w	r0, [r8, #28]
    c6be:	4281      	cmp	r1, r0
    c6c0:	d804      	bhi.n	c6cc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x140>
    c6c2:	f640 4115 	movw	r1, #3093	; 0xc15
    c6c6:	203e      	movs	r0, #62	; 0x3e
    c6c8:	f7f8 ff4a 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c6cc:	f8c6 1540 	str.w	r1, [r6, #1344]	; 0x540
    c6d0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c6d4:	f000 b9b6 	b.w	ca44 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f4>
    c6d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c6dc:	40008000 	.word	0x40008000
    c6e0:	200011c0 	.word	0x200011c0
    c6e4:	4001f508 	.word	0x4001f508
    c6e8:	40001000 	.word	0x40001000
    c6ec:	40001450 	.word	0x40001450

0000c6f0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    c6f0:	b570      	push	{r4, r5, r6, lr}
    c6f2:	4b16      	ldr	r3, [pc, #88]	; (c74c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x5c>)
    c6f4:	888c      	ldrh	r4, [r1, #4]
    c6f6:	eb03 0580 	add.w	r5, r3, r0, lsl #2
    c6fa:	f8c5 4620 	str.w	r4, [r5, #1568]	; 0x620
    c6fe:	780c      	ldrb	r4, [r1, #0]
    c700:	f8d1 1001 	ldr.w	r1, [r1, #1]
    c704:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    c708:	f8c5 1600 	str.w	r1, [r5, #1536]	; 0x600
    c70c:	f8d3 1640 	ldr.w	r1, [r3, #1600]	; 0x640
    c710:	2401      	movs	r4, #1
    c712:	4084      	lsls	r4, r0
    c714:	b2c9      	uxtb	r1, r1
    c716:	b2e5      	uxtb	r5, r4
    c718:	4329      	orrs	r1, r5
    c71a:	b132      	cbz	r2, c72a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a>
    c71c:	2a01      	cmp	r2, #1
    c71e:	d00a      	beq.n	c736 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x46>
    c720:	f240 518d 	movw	r1, #1421	; 0x58d
    c724:	203e      	movs	r0, #62	; 0x3e
    c726:	f7f8 ff1b 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c72a:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    c72e:	f3c0 2007 	ubfx	r0, r0, #8, #8
    c732:	43a0      	bics	r0, r4
    c734:	e004      	b.n	c740 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    c736:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    c73a:	f3c0 2007 	ubfx	r0, r0, #8, #8
    c73e:	4328      	orrs	r0, r5
    c740:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    c744:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
    c748:	bd70      	pop	{r4, r5, r6, pc}
    c74a:	0000      	.short	0x0000
    c74c:	40001000 	.word	0x40001000

0000c750 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>:
    c750:	4901      	ldr	r1, [pc, #4]	; (c758 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8>)
    c752:	2001      	movs	r0, #1
    c754:	7008      	strb	r0, [r1, #0]
    c756:	4770      	bx	lr
    c758:	200002f4 	.word	0x200002f4
    c75c:	480b      	ldr	r0, [pc, #44]	; (c78c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c>)
    c75e:	7d81      	ldrb	r1, [r0, #22]
    c760:	480b      	ldr	r0, [pc, #44]	; (c790 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x40>)
    c762:	5c40      	ldrb	r0, [r0, r1]
    c764:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    c768:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    c76c:	d204      	bcs.n	c778 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x28>
    c76e:	f6a0 1038 	subw	r0, r0, #2360	; 0x938
    c772:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    c776:	e001      	b.n	c77c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c>
    c778:	f5a0 6016 	sub.w	r0, r0, #2400	; 0x960
    c77c:	4a05      	ldr	r2, [pc, #20]	; (c794 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>)
    c77e:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    c782:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    c786:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
    c78a:	4770      	bx	lr
    c78c:	200011c0 	.word	0x200011c0
    c790:	0000cbf6 	.word	0x0000cbf6
    c794:	40001000 	.word	0x40001000
    c798:	b508      	push	{r3, lr}
    c79a:	490b      	ldr	r1, [pc, #44]	; (c7c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x78>)
    c79c:	466b      	mov	r3, sp
    c79e:	f991 2015 	ldrsb.w	r2, [r1, #21]
    c7a2:	7d89      	ldrb	r1, [r1, #22]
    c7a4:	f000 faca 	bl	cd3c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>
    c7a8:	f99d 0000 	ldrsb.w	r0, [sp]
    c7ac:	f000 fa9a 	bl	cce4 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    c7b0:	f10d 0001 	add.w	r0, sp, #1
    c7b4:	f7f8 fda8 	bl	5308 <mpsl_fem_pa_gain_set>
    c7b8:	2800      	cmp	r0, #0
    c7ba:	d004      	beq.n	c7c6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x76>
    c7bc:	f240 51ce 	movw	r1, #1486	; 0x5ce
    c7c0:	203e      	movs	r0, #62	; 0x3e
    c7c2:	f7f8 fecd 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c7c6:	bd08      	pop	{r3, pc}
    c7c8:	200011c0 	.word	0x200011c0
    c7cc:	4803      	ldr	r0, [pc, #12]	; (c7dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8c>)
    c7ce:	7a01      	ldrb	r1, [r0, #8]
    c7d0:	2901      	cmp	r1, #1
    c7d2:	d102      	bne.n	c7da <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8a>
    c7d4:	7a80      	ldrb	r0, [r0, #10]
    c7d6:	f7ff bfdf 	b.w	c798 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x48>
    c7da:	4770      	bx	lr
    c7dc:	200011c0 	.word	0x200011c0
    c7e0:	480d      	ldr	r0, [pc, #52]	; (c818 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc8>)
    c7e2:	b510      	push	{r4, lr}
    c7e4:	7a40      	ldrb	r0, [r0, #9]
    c7e6:	2801      	cmp	r0, #1
    c7e8:	d00c      	beq.n	c804 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb4>
    c7ea:	2802      	cmp	r0, #2
    c7ec:	d113      	bne.n	c816 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    c7ee:	f7f8 fd6d 	bl	52cc <mpsl_fem_lna_configuration_clear>
    c7f2:	2800      	cmp	r0, #0
    c7f4:	d00f      	beq.n	c816 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    c7f6:	1c40      	adds	r0, r0, #1
    c7f8:	d00d      	beq.n	c816 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    c7fa:	f640 017a 	movw	r1, #2170	; 0x87a
    c7fe:	203e      	movs	r0, #62	; 0x3e
    c800:	f7f8 feae 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c804:	f7f8 fd74 	bl	52f0 <mpsl_fem_pa_configuration_clear>
    c808:	2800      	cmp	r0, #0
    c80a:	d004      	beq.n	c816 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    c80c:	1c40      	adds	r0, r0, #1
    c80e:	d002      	beq.n	c816 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    c810:	f640 0174 	movw	r1, #2164	; 0x874
    c814:	e7f3      	b.n	c7fe <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xae>
    c816:	bd10      	pop	{r4, pc}
    c818:	200011c0 	.word	0x200011c0
    c81c:	4808      	ldr	r0, [pc, #32]	; (c840 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf0>)
    c81e:	2100      	movs	r1, #0
    c820:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    c824:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    c828:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    c82c:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    c830:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    c834:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    c838:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    c83c:	4770      	bx	lr
    c83e:	0000      	.short	0x0000
    c840:	40001000 	.word	0x40001000
    c844:	4818      	ldr	r0, [pc, #96]	; (c8a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x158>)
    c846:	b510      	push	{r4, lr}
    c848:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    c84c:	07c1      	lsls	r1, r0, #31
    c84e:	d029      	beq.n	c8a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    c850:	0781      	lsls	r1, r0, #30
    c852:	d514      	bpl.n	c87e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x12e>
    c854:	4815      	ldr	r0, [pc, #84]	; (c8ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x15c>)
    c856:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    c85a:	f041 0101 	orr.w	r1, r1, #1
    c85e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c862:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    c866:	b2c0      	uxtb	r0, r0
    c868:	280b      	cmp	r0, #11
    c86a:	d005      	beq.n	c878 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    c86c:	280a      	cmp	r0, #10
    c86e:	d003      	beq.n	c878 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    c870:	2803      	cmp	r0, #3
    c872:	d001      	beq.n	c878 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    c874:	2802      	cmp	r0, #2
    c876:	d115      	bne.n	c8a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    c878:	f240 51f7 	movw	r1, #1527	; 0x5f7
    c87c:	e00f      	b.n	c89e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x14e>
    c87e:	0740      	lsls	r0, r0, #29
    c880:	d510      	bpl.n	c8a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    c882:	480a      	ldr	r0, [pc, #40]	; (c8ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x15c>)
    c884:	490a      	ldr	r1, [pc, #40]	; (c8b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x160>)
    c886:	3008      	adds	r0, #8
    c888:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    c88c:	f44f 71a0 	mov.w	r1, #320	; 0x140
    c890:	4808      	ldr	r0, [pc, #32]	; (c8b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x164>)
    c892:	f004 fed5 	bl	11640 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    c896:	2800      	cmp	r0, #0
    c898:	d004      	beq.n	c8a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    c89a:	f240 51ff 	movw	r1, #1535	; 0x5ff
    c89e:	203e      	movs	r0, #62	; 0x3e
    c8a0:	f7f8 fe5e 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c8a4:	bd10      	pop	{r4, pc}
    c8a6:	0000      	.short	0x0000
    c8a8:	200011c0 	.word	0x200011c0
    c8ac:	40001000 	.word	0x40001000
    c8b0:	4001f098 	.word	0x4001f098
    c8b4:	40008000 	.word	0x40008000
    c8b8:	4808      	ldr	r0, [pc, #32]	; (c8dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18c>)
    c8ba:	4601      	mov	r1, r0
    c8bc:	79c2      	ldrb	r2, [r0, #7]
    c8be:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
    c8c2:	b112      	cbz	r2, c8ca <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17a>
    c8c4:	2a01      	cmp	r2, #1
    c8c6:	d003      	beq.n	c8d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x180>
    c8c8:	e006      	b.n	c8d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x188>
    c8ca:	f041 0102 	orr.w	r1, r1, #2
    c8ce:	e001      	b.n	c8d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x184>
    c8d0:	f041 0104 	orr.w	r1, r1, #4
    c8d4:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    c8d8:	f7ff bfb4 	b.w	c844 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    c8dc:	200011c0 	.word	0x200011c0
    c8e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c8e4:	4d34      	ldr	r5, [pc, #208]	; (c9b8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x268>)
    c8e6:	2400      	movs	r4, #0
    c8e8:	7b28      	ldrb	r0, [r5, #12]
    c8ea:	b138      	cbz	r0, c8fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>
    c8ec:	f44f 71a2 	mov.w	r1, #324	; 0x144
    c8f0:	4832      	ldr	r0, [pc, #200]	; (c9bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26c>)
    c8f2:	f004 fea5 	bl	11640 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    c8f6:	b108      	cbz	r0, c8fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>
    c8f8:	2601      	movs	r6, #1
    c8fa:	e000      	b.n	c8fe <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ae>
    c8fc:	2600      	movs	r6, #0
    c8fe:	7a68      	ldrb	r0, [r5, #9]
    c900:	4f2f      	ldr	r7, [pc, #188]	; (c9c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x270>)
    c902:	f44f 7186 	mov.w	r1, #268	; 0x10c
    c906:	2801      	cmp	r0, #1
    c908:	d002      	beq.n	c910 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c0>
    c90a:	2802      	cmp	r0, #2
    c90c:	d006      	beq.n	c91c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1cc>
    c90e:	e016      	b.n	c93e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    c910:	4638      	mov	r0, r7
    c912:	f004 fe90 	bl	11636 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    c916:	b190      	cbz	r0, c93e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    c918:	2408      	movs	r4, #8
    c91a:	e010      	b.n	c93e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    c91c:	4638      	mov	r0, r7
    c91e:	f004 fe8a 	bl	11636 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    c922:	b100      	cbz	r0, c926 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1d6>
    c924:	2402      	movs	r4, #2
    c926:	f8d7 0400 	ldr.w	r0, [r7, #1024]	; 0x400
    c92a:	43c0      	mvns	r0, r0
    c92c:	f340 0000 	sbfx	r0, r0, #0, #1
    c930:	1c40      	adds	r0, r0, #1
    c932:	d101      	bne.n	c938 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e8>
    c934:	f044 0404 	orr.w	r4, r4, #4
    c938:	b10e      	cbz	r6, c93e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    c93a:	f044 0401 	orr.w	r4, r4, #1
    c93e:	f014 0f0b 	tst.w	r4, #11
    c942:	d107      	bne.n	c954 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    c944:	f44f 7188 	mov.w	r1, #272	; 0x110
    c948:	4638      	mov	r0, r7
    c94a:	f004 fe74 	bl	11636 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    c94e:	b108      	cbz	r0, c954 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    c950:	f044 0410 	orr.w	r4, r4, #16
    c954:	481b      	ldr	r0, [pc, #108]	; (c9c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x274>)
    c956:	7800      	ldrb	r0, [r0, #0]
    c958:	b1f8      	cbz	r0, c99a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x24a>
    c95a:	f8d7 0640 	ldr.w	r0, [r7, #1600]	; 0x640
    c95e:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    c962:	d007      	beq.n	c974 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    c964:	f44f 718a 	mov.w	r1, #276	; 0x114
    c968:	4638      	mov	r0, r7
    c96a:	f004 fe64 	bl	11636 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    c96e:	b108      	cbz	r0, c974 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    c970:	2001      	movs	r0, #1
    c972:	e000      	b.n	c976 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x226>
    c974:	2000      	movs	r0, #0
    c976:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
    c97a:	b13e      	cbz	r6, c98c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23c>
    c97c:	f44f 718c 	mov.w	r1, #280	; 0x118
    c980:	4638      	mov	r0, r7
    c982:	f004 fe58 	bl	11636 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    c986:	b108      	cbz	r0, c98c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23c>
    c988:	2001      	movs	r0, #1
    c98a:	e000      	b.n	c98e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23e>
    c98c:	2000      	movs	r0, #0
    c98e:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
    c992:	f8d7 0410 	ldr.w	r0, [r7, #1040]	; 0x410
    c996:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
    c99a:	f7ff ff3f 	bl	c81c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xcc>
    c99e:	06e0      	lsls	r0, r4, #27
    c9a0:	d506      	bpl.n	c9b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    c9a2:	0720      	lsls	r0, r4, #28
    c9a4:	d404      	bmi.n	c9b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    c9a6:	7a68      	ldrb	r0, [r5, #9]
    c9a8:	2801      	cmp	r0, #1
    c9aa:	d101      	bne.n	c9b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    c9ac:	f044 0420 	orr.w	r4, r4, #32
    c9b0:	4620      	mov	r0, r4
    c9b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c9b6:	0000      	.short	0x0000
    c9b8:	200011c0 	.word	0x200011c0
    c9bc:	40008000 	.word	0x40008000
    c9c0:	40001000 	.word	0x40001000
    c9c4:	200002f4 	.word	0x200002f4
    c9c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c9cc:	4c17      	ldr	r4, [pc, #92]	; (ca2c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>)
    c9ce:	460d      	mov	r5, r1
    c9d0:	7a21      	ldrb	r1, [r4, #8]
    c9d2:	b129      	cbz	r1, c9e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x290>
    c9d4:	f010 0f11 	tst.w	r0, #17
    c9d8:	d007      	beq.n	c9ea <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x29a>
    c9da:	f7ff fa7d 	bl	bed8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    c9de:	e023      	b.n	ca28 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d8>
    c9e0:	f000 f88a 	bl	caf8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    c9e4:	2000      	movs	r0, #0
    c9e6:	7320      	strb	r0, [r4, #12]
    c9e8:	e01e      	b.n	ca28 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d8>
    c9ea:	2901      	cmp	r1, #1
    c9ec:	d001      	beq.n	c9f2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a2>
    c9ee:	2601      	movs	r6, #1
    c9f0:	e000      	b.n	c9f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a4>
    c9f2:	2600      	movs	r6, #0
    c9f4:	79e0      	ldrb	r0, [r4, #7]
    c9f6:	2801      	cmp	r0, #1
    c9f8:	d00e      	beq.n	ca18 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c8>
    c9fa:	2700      	movs	r7, #0
    c9fc:	f000 f87c 	bl	caf8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    ca00:	2196      	movs	r1, #150	; 0x96
    ca02:	4630      	mov	r0, r6
    ca04:	f000 f88e 	bl	cb24 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3d4>
    ca08:	4601      	mov	r1, r0
    ca0a:	b14f      	cbz	r7, ca20 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d0>
    ca0c:	353b      	adds	r5, #59	; 0x3b
    ca0e:	428d      	cmp	r5, r1
    ca10:	d904      	bls.n	ca1c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2cc>
    ca12:	2000      	movs	r0, #0
    ca14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ca18:	2701      	movs	r7, #1
    ca1a:	e7ef      	b.n	c9fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ac>
    ca1c:	2001      	movs	r0, #1
    ca1e:	71e0      	strb	r0, [r4, #7]
    ca20:	7aa2      	ldrb	r2, [r4, #10]
    ca22:	4630      	mov	r0, r6
    ca24:	f7ff fcda 	bl	c3dc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    ca28:	2001      	movs	r0, #1
    ca2a:	e7f3      	b.n	ca14 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c4>
    ca2c:	200011c0 	.word	0x200011c0
    ca30:	4803      	ldr	r0, [pc, #12]	; (ca40 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f0>)
    ca32:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    ca36:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    ca3a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    ca3e:	4770      	bx	lr
    ca40:	40001000 	.word	0x40001000
    ca44:	4804      	ldr	r0, [pc, #16]	; (ca58 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x308>)
    ca46:	6a81      	ldr	r1, [r0, #40]	; 0x28
    ca48:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    ca4c:	6281      	str	r1, [r0, #40]	; 0x28
    ca4e:	4903      	ldr	r1, [pc, #12]	; (ca5c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x30c>)
    ca50:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    ca54:	6008      	str	r0, [r1, #0]
    ca56:	4770      	bx	lr
    ca58:	200011c0 	.word	0x200011c0
    ca5c:	4001f504 	.word	0x4001f504
    ca60:	4a07      	ldr	r2, [pc, #28]	; (ca80 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x330>)
    ca62:	2000      	movs	r0, #0
    ca64:	3208      	adds	r2, #8
    ca66:	4906      	ldr	r1, [pc, #24]	; (ca80 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x330>)
    ca68:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    ca6c:	1d0a      	adds	r2, r1, #4
    ca6e:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    ca72:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    ca76:	4902      	ldr	r1, [pc, #8]	; (ca80 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x330>)
    ca78:	310c      	adds	r1, #12
    ca7a:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    ca7e:	4770      	bx	lr
    ca80:	40008000 	.word	0x40008000
    ca84:	4903      	ldr	r1, [pc, #12]	; (ca94 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x344>)
    ca86:	79c9      	ldrb	r1, [r1, #7]
    ca88:	2900      	cmp	r1, #0
    ca8a:	d102      	bne.n	ca92 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x342>
    ca8c:	4902      	ldr	r1, [pc, #8]	; (ca98 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x348>)
    ca8e:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    ca92:	4770      	bx	lr
    ca94:	200011c0 	.word	0x200011c0
    ca98:	4001f098 	.word	0x4001f098
    ca9c:	b510      	push	{r4, lr}
    ca9e:	4a14      	ldr	r2, [pc, #80]	; (caf0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a0>)
    caa0:	b120      	cbz	r0, caac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x35c>
    caa2:	2801      	cmp	r0, #1
    caa4:	d011      	beq.n	caca <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x37a>
    caa6:	f240 712c 	movw	r1, #1836	; 0x72c
    caaa:	e01c      	b.n	cae6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x396>
    caac:	f101 0028 	add.w	r0, r1, #40	; 0x28
    cab0:	e9c2 1002 	strd	r1, r0, [r2, #8]
    cab4:	490f      	ldr	r1, [pc, #60]	; (caf4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a4>)
    cab6:	480e      	ldr	r0, [pc, #56]	; (caf0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a0>)
    cab8:	f7f8 fc20 	bl	52fc <mpsl_fem_pa_configuration_set>
    cabc:	2800      	cmp	r0, #0
    cabe:	d015      	beq.n	caec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x39c>
    cac0:	1c40      	adds	r0, r0, #1
    cac2:	d013      	beq.n	caec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x39c>
    cac4:	f240 711b 	movw	r1, #1819	; 0x71b
    cac8:	e00d      	b.n	cae6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x396>
    caca:	f101 0029 	add.w	r0, r1, #41	; 0x29
    cace:	e9c2 1002 	strd	r1, r0, [r2, #8]
    cad2:	4908      	ldr	r1, [pc, #32]	; (caf4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a4>)
    cad4:	4806      	ldr	r0, [pc, #24]	; (caf0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a0>)
    cad6:	f7f8 fbff 	bl	52d8 <mpsl_fem_lna_configuration_set>
    cada:	2800      	cmp	r0, #0
    cadc:	d006      	beq.n	caec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x39c>
    cade:	1c40      	adds	r0, r0, #1
    cae0:	d004      	beq.n	caec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x39c>
    cae2:	f44f 61e5 	mov.w	r1, #1832	; 0x728
    cae6:	203e      	movs	r0, #62	; 0x3e
    cae8:	f7f8 fd3a 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    caec:	bd10      	pop	{r4, pc}
    caee:	0000      	.short	0x0000
    caf0:	200002fc 	.word	0x200002fc
    caf4:	0000cc20 	.word	0x0000cc20
    caf8:	4802      	ldr	r0, [pc, #8]	; (cb04 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b4>)
    cafa:	2100      	movs	r1, #0
    cafc:	71c1      	strb	r1, [r0, #7]
    cafe:	7201      	strb	r1, [r0, #8]
    cb00:	7241      	strb	r1, [r0, #9]
    cb02:	4770      	bx	lr
    cb04:	200011c0 	.word	0x200011c0
    cb08:	4a05      	ldr	r2, [pc, #20]	; (cb20 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3d0>)
    cb0a:	79d2      	ldrb	r2, [r2, #7]
    cb0c:	2a01      	cmp	r2, #1
    cb0e:	d006      	beq.n	cb1e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ce>
    cb10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    cb14:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    cb18:	fbb1 f1f2 	udiv	r1, r1, r2
    cb1c:	1a40      	subs	r0, r0, r1
    cb1e:	4770      	bx	lr
    cb20:	200011c0 	.word	0x200011c0
    cb24:	b570      	push	{r4, r5, r6, lr}
    cb26:	4c13      	ldr	r4, [pc, #76]	; (cb74 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x424>)
    cb28:	4603      	mov	r3, r0
    cb2a:	460d      	mov	r5, r1
    cb2c:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    cb30:	2000      	movs	r0, #0
    cb32:	b15a      	cbz	r2, cb4c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3fc>
    cb34:	4621      	mov	r1, r4
    cb36:	f891 1020 	ldrb.w	r1, [r1, #32]
    cb3a:	b163      	cbz	r3, cb56 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x406>
    cb3c:	2b01      	cmp	r3, #1
    cb3e:	d111      	bne.n	cb64 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x414>
    cb40:	2a01      	cmp	r2, #1
    cb42:	4628      	mov	r0, r5
    cb44:	d012      	beq.n	cb6c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x41c>
    cb46:	f004 fd80 	bl	1164a <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    cb4a:	e009      	b.n	cb60 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x410>
    cb4c:	f640 0127 	movw	r1, #2087	; 0x827
    cb50:	203e      	movs	r0, #62	; 0x3e
    cb52:	f7f8 fd05 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cb56:	2a01      	cmp	r2, #1
    cb58:	4628      	mov	r0, r5
    cb5a:	d004      	beq.n	cb66 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x416>
    cb5c:	f004 fd83 	bl	11666 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    cb60:	69e1      	ldr	r1, [r4, #28]
    cb62:	4408      	add	r0, r1
    cb64:	bd70      	pop	{r4, r5, r6, pc}
    cb66:	f000 f8d1 	bl	cd0c <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    cb6a:	e7f9      	b.n	cb60 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x410>
    cb6c:	f000 f8c0 	bl	ccf0 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    cb70:	e7f6      	b.n	cb60 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x410>
    cb72:	0000      	.short	0x0000
    cb74:	200011c0 	.word	0x200011c0
    cb78:	b510      	push	{r4, lr}
    cb7a:	f7ff fc03 	bl	c384 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    cb7e:	f7ff fded 	bl	c75c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    cb82:	f7ff fe23 	bl	c7cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x7c>
    cb86:	f7ff ff53 	bl	ca30 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e0>
    cb8a:	f000 fe49 	bl	d820 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    cb8e:	2800      	cmp	r0, #0
    cb90:	d108      	bne.n	cba4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x454>
    cb92:	f000 fe35 	bl	d800 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    cb96:	2800      	cmp	r0, #0
    cb98:	d104      	bne.n	cba4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x454>
    cb9a:	4803      	ldr	r0, [pc, #12]	; (cba8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x458>)
    cb9c:	6801      	ldr	r1, [r0, #0]
    cb9e:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    cba2:	6001      	str	r1, [r0, #0]
    cba4:	bd10      	pop	{r4, pc}
    cba6:	0000      	.short	0x0000
    cba8:	40001568 	.word	0x40001568
    cbac:	b510      	push	{r4, lr}
    cbae:	4604      	mov	r4, r0
    cbb0:	f7ff fbe8 	bl	c384 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    cbb4:	f7ff fdd2 	bl	c75c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    cbb8:	4620      	mov	r0, r4
    cbba:	f7ff fded 	bl	c798 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x48>
    cbbe:	f000 fe2f 	bl	d820 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    cbc2:	2800      	cmp	r0, #0
    cbc4:	d00d      	beq.n	cbe2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x492>
    cbc6:	4a09      	ldr	r2, [pc, #36]	; (cbec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x49c>)
    cbc8:	6811      	ldr	r1, [r2, #0]
    cbca:	0650      	lsls	r0, r2, #25
    cbcc:	2c02      	cmp	r4, #2
    cbce:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    cbd2:	d007      	beq.n	cbe4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x494>
    cbd4:	f3c0 2006 	ubfx	r0, r0, #8, #7
    cbd8:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    cbdc:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    cbe0:	6010      	str	r0, [r2, #0]
    cbe2:	bd10      	pop	{r4, pc}
    cbe4:	f3c0 6006 	ubfx	r0, r0, #24, #7
    cbe8:	e7f6      	b.n	cbd8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x488>
    cbea:	0000      	.short	0x0000
    cbec:	40001588 	.word	0x40001588
    cbf0:	a62c0000 	.word	0xa62c0000
    cbf4:	0604a1e0 	.word	0x0604a1e0
    cbf8:	0e0c0a08 	.word	0x0e0c0a08
    cbfc:	16141210 	.word	0x16141210
    cc00:	201e1c18 	.word	0x201e1c18
    cc04:	28262422 	.word	0x28262422
    cc08:	302e2c2a 	.word	0x302e2c2a
    cc0c:	38363432 	.word	0x38363432
    cc10:	403e3c3a 	.word	0x403e3c3a
    cc14:	48464442 	.word	0x48464442
    cc18:	024e4c4a 	.word	0x024e4c4a
    cc1c:	0000501a 	.word	0x0000501a
    cc20:	00000001 	.word	0x00000001
    cc24:	40001110 	.word	0x40001110
	...
    cc3c:	00001e14 	.word	0x00001e14
    cc40:	00001130 	.word	0x00001130
    cc44:	00000000 	.word	0x00000000
    cc48:	00000028 	.word	0x00000028
    cc4c:	00000018 	.word	0x00000018
    cc50:	00000000 	.word	0x00000000
    cc54:	00001e14 	.word	0x00001e14
    cc58:	00001130 	.word	0x00001130
    cc5c:	00000000 	.word	0x00000000
    cc60:	00001770 	.word	0x00001770
    cc64:	00000fa0 	.word	0x00000fa0

0000cc68 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    cc68:	b570      	push	{r4, r5, r6, lr}
    cc6a:	4605      	mov	r5, r0
    cc6c:	4614      	mov	r4, r2
    cc6e:	4608      	mov	r0, r1
    cc70:	f7ff fbae 	bl	c3d0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    cc74:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    cc78:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    cc7c:	ebc0 01c1 	rsb	r1, r0, r1, lsl #3
    cc80:	4807      	ldr	r0, [pc, #28]	; (cca0 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA+0x38>)
    cc82:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    cc86:	4408      	add	r0, r1
    cc88:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    cc8c:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    cc90:	fbb0 f5f1 	udiv	r5, r0, r1
    cc94:	4620      	mov	r0, r4
    cc96:	f7ff fb6f 	bl	c378 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    cc9a:	4428      	add	r0, r5
    cc9c:	1d40      	adds	r0, r0, #5
    cc9e:	bd70      	pop	{r4, r5, r6, pc}
    cca0:	0000cd30 	.word	0x0000cd30

0000cca4 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    cca4:	b570      	push	{r4, r5, r6, lr}
    cca6:	4d0e      	ldr	r5, [pc, #56]	; (cce0 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    cca8:	461c      	mov	r4, r3
    ccaa:	3d08      	subs	r5, #8
    ccac:	4b0c      	ldr	r3, [pc, #48]	; (cce0 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    ccae:	f835 1011 	ldrh.w	r1, [r5, r1, lsl #1]
    ccb2:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    ccb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    ccba:	ebc5 10c0 	rsb	r0, r5, r0, lsl #7
    ccbe:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    ccc2:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    ccc6:	4418      	add	r0, r3
    ccc8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    cccc:	fbb0 f5f1 	udiv	r5, r0, r1
    ccd0:	4610      	mov	r0, r2
    ccd2:	f7ff fb51 	bl	c378 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    ccd6:	4428      	add	r0, r5
    ccd8:	4420      	add	r0, r4
    ccda:	1d40      	adds	r0, r0, #5
    ccdc:	bd70      	pop	{r4, r5, r6, pc}
    ccde:	0000      	.short	0x0000
    cce0:	0000cd30 	.word	0x0000cd30

0000cce4 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    cce4:	4901      	ldr	r1, [pc, #4]	; (ccec <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    cce6:	b2c0      	uxtb	r0, r0
    cce8:	6008      	str	r0, [r1, #0]
    ccea:	4770      	bx	lr
    ccec:	4000150c 	.word	0x4000150c

0000ccf0 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    ccf0:	4a05      	ldr	r2, [pc, #20]	; (cd08 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x18>)
    ccf2:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    ccf6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ccfa:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    ccfe:	fbb1 f1f2 	udiv	r1, r1, r2
    cd02:	4408      	add	r0, r1
    cd04:	1e80      	subs	r0, r0, #2
    cd06:	4770      	bx	lr
    cd08:	0000cd28 	.word	0x0000cd28

0000cd0c <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    cd0c:	4a05      	ldr	r2, [pc, #20]	; (cd24 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>)
    cd0e:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    cd12:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    cd16:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    cd1a:	fbb1 f1f2 	udiv	r1, r1, r2
    cd1e:	4408      	add	r0, r1
    cd20:	4770      	bx	lr
    cd22:	0000      	.short	0x0000
    cd24:	0000cd28 	.word	0x0000cd28
    cd28:	05dc0000 	.word	0x05dc0000
    cd2c:	000003e8 	.word	0x000003e8
    cd30:	00000000 	.word	0x00000000
    cd34:	00001e14 	.word	0x00001e14
    cd38:	00001130 	.word	0x00001130

0000cd3c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>:
    cd3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cd40:	461e      	mov	r6, r3
    cd42:	4617      	mov	r7, r2
    cd44:	460c      	mov	r4, r1
    cd46:	4605      	mov	r5, r0
    cd48:	f7f4 fd4c 	bl	17e4 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>
    cd4c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; cdf4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb8>
    cd50:	4680      	mov	r8, r0
    cd52:	f899 0000 	ldrb.w	r0, [r9]
    cd56:	42a8      	cmp	r0, r5
    cd58:	d110      	bne.n	cd7c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    cd5a:	f899 1001 	ldrb.w	r1, [r9, #1]
    cd5e:	4648      	mov	r0, r9
    cd60:	42a1      	cmp	r1, r4
    cd62:	d10b      	bne.n	cd7c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    cd64:	f990 1002 	ldrsb.w	r1, [r0, #2]
    cd68:	42b9      	cmp	r1, r7
    cd6a:	d107      	bne.n	cd7c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    cd6c:	78c2      	ldrb	r2, [r0, #3]
    cd6e:	4542      	cmp	r2, r8
    cd70:	d104      	bne.n	cd7c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    cd72:	8881      	ldrh	r1, [r0, #4]
    cd74:	8031      	strh	r1, [r6, #0]
    cd76:	7980      	ldrb	r0, [r0, #6]
    cd78:	70b0      	strb	r0, [r6, #2]
    cd7a:	e036      	b.n	cdea <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xae>
    cd7c:	463a      	mov	r2, r7
    cd7e:	4621      	mov	r1, r4
    cd80:	2d01      	cmp	r5, #1
    cd82:	d009      	beq.n	cd98 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x5c>
    cd84:	2d02      	cmp	r5, #2
    cd86:	d009      	beq.n	cd9c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x60>
    cd88:	2d04      	cmp	r5, #4
    cd8a:	d009      	beq.n	cda0 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
    cd8c:	2d08      	cmp	r5, #8
    cd8e:	d009      	beq.n	cda4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x68>
    cd90:	f240 4133 	movw	r1, #1075	; 0x433
    cd94:	2006      	movs	r0, #6
    cd96:	e00c      	b.n	cdb2 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x76>
    cd98:	2000      	movs	r0, #0
    cd9a:	e004      	b.n	cda6 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    cd9c:	2001      	movs	r0, #1
    cd9e:	e002      	b.n	cda6 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    cda0:	2003      	movs	r0, #3
    cda2:	e000      	b.n	cda6 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    cda4:	2002      	movs	r0, #2
    cda6:	466b      	mov	r3, sp
    cda8:	f7f4 fd62 	bl	1870 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>
    cdac:	b118      	cbz	r0, cdb6 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x7a>
    cdae:	213d      	movs	r1, #61	; 0x3d
    cdb0:	2075      	movs	r0, #117	; 0x75
    cdb2:	f7f8 fbd5 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cdb6:	4620      	mov	r0, r4
    cdb8:	f7ff f886 	bl	bec8 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>
    cdbc:	4602      	mov	r2, r0
    cdbe:	4631      	mov	r1, r6
    cdc0:	f99d 0000 	ldrsb.w	r0, [sp]
    cdc4:	f7f8 faac 	bl	5320 <mpsl_fem_tx_power_split>
    cdc8:	4601      	mov	r1, r0
    cdca:	f889 1007 	strb.w	r1, [r9, #7]
    cdce:	8831      	ldrh	r1, [r6, #0]
    cdd0:	f8a9 1004 	strh.w	r1, [r9, #4]
    cdd4:	78b1      	ldrb	r1, [r6, #2]
    cdd6:	f889 1006 	strb.w	r1, [r9, #6]
    cdda:	f889 5000 	strb.w	r5, [r9]
    cdde:	f889 4001 	strb.w	r4, [r9, #1]
    cde2:	f889 7002 	strb.w	r7, [r9, #2]
    cde6:	f889 8003 	strb.w	r8, [r9, #3]
    cdea:	f999 0007 	ldrsb.w	r0, [r9, #7]
    cdee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    cdf2:	0000      	.short	0x0000
    cdf4:	20000345 	.word	0x20000345

0000cdf8 <__udivmoddi4>:
    cdf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cdfc:	4607      	mov	r7, r0
    cdfe:	468c      	mov	ip, r1
    ce00:	4608      	mov	r0, r1
    ce02:	9e09      	ldr	r6, [sp, #36]	; 0x24
    ce04:	4615      	mov	r5, r2
    ce06:	463c      	mov	r4, r7
    ce08:	4619      	mov	r1, r3
    ce0a:	2b00      	cmp	r3, #0
    ce0c:	f040 80c6 	bne.w	cf9c <__udivmoddi4+0x1a4>
    ce10:	4282      	cmp	r2, r0
    ce12:	fab2 f782 	clz	r7, r2
    ce16:	d946      	bls.n	cea6 <__udivmoddi4+0xae>
    ce18:	b14f      	cbz	r7, ce2e <__udivmoddi4+0x36>
    ce1a:	f1c7 0e20 	rsb	lr, r7, #32
    ce1e:	fa24 fe0e 	lsr.w	lr, r4, lr
    ce22:	fa00 f307 	lsl.w	r3, r0, r7
    ce26:	40bd      	lsls	r5, r7
    ce28:	ea4e 0c03 	orr.w	ip, lr, r3
    ce2c:	40bc      	lsls	r4, r7
    ce2e:	ea4f 4815 	mov.w	r8, r5, lsr #16
    ce32:	fa1f fe85 	uxth.w	lr, r5
    ce36:	fbbc f9f8 	udiv	r9, ip, r8
    ce3a:	0c22      	lsrs	r2, r4, #16
    ce3c:	fb08 c319 	mls	r3, r8, r9, ip
    ce40:	fb09 fa0e 	mul.w	sl, r9, lr
    ce44:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    ce48:	459a      	cmp	sl, r3
    ce4a:	d928      	bls.n	ce9e <__udivmoddi4+0xa6>
    ce4c:	18eb      	adds	r3, r5, r3
    ce4e:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
    ce52:	d204      	bcs.n	ce5e <__udivmoddi4+0x66>
    ce54:	459a      	cmp	sl, r3
    ce56:	d902      	bls.n	ce5e <__udivmoddi4+0x66>
    ce58:	f1a9 0002 	sub.w	r0, r9, #2
    ce5c:	442b      	add	r3, r5
    ce5e:	eba3 030a 	sub.w	r3, r3, sl
    ce62:	b2a4      	uxth	r4, r4
    ce64:	fbb3 f2f8 	udiv	r2, r3, r8
    ce68:	fb08 3312 	mls	r3, r8, r2, r3
    ce6c:	fb02 fe0e 	mul.w	lr, r2, lr
    ce70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    ce74:	45a6      	cmp	lr, r4
    ce76:	d914      	bls.n	cea2 <__udivmoddi4+0xaa>
    ce78:	192c      	adds	r4, r5, r4
    ce7a:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
    ce7e:	d203      	bcs.n	ce88 <__udivmoddi4+0x90>
    ce80:	45a6      	cmp	lr, r4
    ce82:	d901      	bls.n	ce88 <__udivmoddi4+0x90>
    ce84:	1e93      	subs	r3, r2, #2
    ce86:	442c      	add	r4, r5
    ce88:	eba4 040e 	sub.w	r4, r4, lr
    ce8c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    ce90:	b11e      	cbz	r6, ce9a <__udivmoddi4+0xa2>
    ce92:	40fc      	lsrs	r4, r7
    ce94:	2300      	movs	r3, #0
    ce96:	6034      	str	r4, [r6, #0]
    ce98:	6073      	str	r3, [r6, #4]
    ce9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ce9e:	4648      	mov	r0, r9
    cea0:	e7dd      	b.n	ce5e <__udivmoddi4+0x66>
    cea2:	4613      	mov	r3, r2
    cea4:	e7f0      	b.n	ce88 <__udivmoddi4+0x90>
    cea6:	b902      	cbnz	r2, ceaa <__udivmoddi4+0xb2>
    cea8:	deff      	udf	#255	; 0xff
    ceaa:	bb87      	cbnz	r7, cf0e <__udivmoddi4+0x116>
    ceac:	1a83      	subs	r3, r0, r2
    ceae:	2101      	movs	r1, #1
    ceb0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    ceb4:	b2aa      	uxth	r2, r5
    ceb6:	fbb3 fcfe 	udiv	ip, r3, lr
    ceba:	0c20      	lsrs	r0, r4, #16
    cebc:	fb0e 331c 	mls	r3, lr, ip, r3
    cec0:	fb0c f802 	mul.w	r8, ip, r2
    cec4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    cec8:	4598      	cmp	r8, r3
    ceca:	d963      	bls.n	cf94 <__udivmoddi4+0x19c>
    cecc:	18eb      	adds	r3, r5, r3
    cece:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    ced2:	d204      	bcs.n	cede <__udivmoddi4+0xe6>
    ced4:	4598      	cmp	r8, r3
    ced6:	d902      	bls.n	cede <__udivmoddi4+0xe6>
    ced8:	f1ac 0002 	sub.w	r0, ip, #2
    cedc:	442b      	add	r3, r5
    cede:	eba3 0308 	sub.w	r3, r3, r8
    cee2:	b2a4      	uxth	r4, r4
    cee4:	fbb3 fcfe 	udiv	ip, r3, lr
    cee8:	fb0e 331c 	mls	r3, lr, ip, r3
    ceec:	fb0c f202 	mul.w	r2, ip, r2
    cef0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    cef4:	42a2      	cmp	r2, r4
    cef6:	d94f      	bls.n	cf98 <__udivmoddi4+0x1a0>
    cef8:	192c      	adds	r4, r5, r4
    cefa:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
    cefe:	d204      	bcs.n	cf0a <__udivmoddi4+0x112>
    cf00:	42a2      	cmp	r2, r4
    cf02:	d902      	bls.n	cf0a <__udivmoddi4+0x112>
    cf04:	f1ac 0302 	sub.w	r3, ip, #2
    cf08:	442c      	add	r4, r5
    cf0a:	1aa4      	subs	r4, r4, r2
    cf0c:	e7be      	b.n	ce8c <__udivmoddi4+0x94>
    cf0e:	f1c7 0c20 	rsb	ip, r7, #32
    cf12:	fa20 f80c 	lsr.w	r8, r0, ip
    cf16:	fa00 f307 	lsl.w	r3, r0, r7
    cf1a:	fa24 fc0c 	lsr.w	ip, r4, ip
    cf1e:	40bd      	lsls	r5, r7
    cf20:	ea4c 0203 	orr.w	r2, ip, r3
    cf24:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    cf28:	b2ab      	uxth	r3, r5
    cf2a:	fbb8 fcfe 	udiv	ip, r8, lr
    cf2e:	0c11      	lsrs	r1, r2, #16
    cf30:	fb0e 801c 	mls	r0, lr, ip, r8
    cf34:	fb0c f903 	mul.w	r9, ip, r3
    cf38:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
    cf3c:	4581      	cmp	r9, r0
    cf3e:	fa04 f407 	lsl.w	r4, r4, r7
    cf42:	d923      	bls.n	cf8c <__udivmoddi4+0x194>
    cf44:	1828      	adds	r0, r5, r0
    cf46:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
    cf4a:	d204      	bcs.n	cf56 <__udivmoddi4+0x15e>
    cf4c:	4581      	cmp	r9, r0
    cf4e:	d902      	bls.n	cf56 <__udivmoddi4+0x15e>
    cf50:	f1ac 0102 	sub.w	r1, ip, #2
    cf54:	4428      	add	r0, r5
    cf56:	eba0 0009 	sub.w	r0, r0, r9
    cf5a:	b292      	uxth	r2, r2
    cf5c:	fbb0 fcfe 	udiv	ip, r0, lr
    cf60:	fb0e 001c 	mls	r0, lr, ip, r0
    cf64:	fb0c f803 	mul.w	r8, ip, r3
    cf68:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
    cf6c:	4598      	cmp	r8, r3
    cf6e:	d90f      	bls.n	cf90 <__udivmoddi4+0x198>
    cf70:	18eb      	adds	r3, r5, r3
    cf72:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
    cf76:	d204      	bcs.n	cf82 <__udivmoddi4+0x18a>
    cf78:	4598      	cmp	r8, r3
    cf7a:	d902      	bls.n	cf82 <__udivmoddi4+0x18a>
    cf7c:	f1ac 0202 	sub.w	r2, ip, #2
    cf80:	442b      	add	r3, r5
    cf82:	eba3 0308 	sub.w	r3, r3, r8
    cf86:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
    cf8a:	e791      	b.n	ceb0 <__udivmoddi4+0xb8>
    cf8c:	4661      	mov	r1, ip
    cf8e:	e7e2      	b.n	cf56 <__udivmoddi4+0x15e>
    cf90:	4662      	mov	r2, ip
    cf92:	e7f6      	b.n	cf82 <__udivmoddi4+0x18a>
    cf94:	4660      	mov	r0, ip
    cf96:	e7a2      	b.n	cede <__udivmoddi4+0xe6>
    cf98:	4663      	mov	r3, ip
    cf9a:	e7b6      	b.n	cf0a <__udivmoddi4+0x112>
    cf9c:	4283      	cmp	r3, r0
    cf9e:	d905      	bls.n	cfac <__udivmoddi4+0x1b4>
    cfa0:	b10e      	cbz	r6, cfa6 <__udivmoddi4+0x1ae>
    cfa2:	e9c6 7000 	strd	r7, r0, [r6]
    cfa6:	2100      	movs	r1, #0
    cfa8:	4608      	mov	r0, r1
    cfaa:	e776      	b.n	ce9a <__udivmoddi4+0xa2>
    cfac:	fab3 f183 	clz	r1, r3
    cfb0:	b981      	cbnz	r1, cfd4 <__udivmoddi4+0x1dc>
    cfb2:	4283      	cmp	r3, r0
    cfb4:	d301      	bcc.n	cfba <__udivmoddi4+0x1c2>
    cfb6:	42ba      	cmp	r2, r7
    cfb8:	d80a      	bhi.n	cfd0 <__udivmoddi4+0x1d8>
    cfba:	1abc      	subs	r4, r7, r2
    cfbc:	eb60 0303 	sbc.w	r3, r0, r3
    cfc0:	2001      	movs	r0, #1
    cfc2:	469c      	mov	ip, r3
    cfc4:	2e00      	cmp	r6, #0
    cfc6:	d068      	beq.n	d09a <__udivmoddi4+0x2a2>
    cfc8:	e9c6 4c00 	strd	r4, ip, [r6]
    cfcc:	2100      	movs	r1, #0
    cfce:	e764      	b.n	ce9a <__udivmoddi4+0xa2>
    cfd0:	4608      	mov	r0, r1
    cfd2:	e7f7      	b.n	cfc4 <__udivmoddi4+0x1cc>
    cfd4:	f1c1 0c20 	rsb	ip, r1, #32
    cfd8:	408b      	lsls	r3, r1
    cfda:	fa22 f40c 	lsr.w	r4, r2, ip
    cfde:	431c      	orrs	r4, r3
    cfe0:	fa02 f501 	lsl.w	r5, r2, r1
    cfe4:	fa00 f301 	lsl.w	r3, r0, r1
    cfe8:	fa27 f20c 	lsr.w	r2, r7, ip
    cfec:	fa20 fb0c 	lsr.w	fp, r0, ip
    cff0:	ea4f 4914 	mov.w	r9, r4, lsr #16
    cff4:	4313      	orrs	r3, r2
    cff6:	fbbb f8f9 	udiv	r8, fp, r9
    cffa:	fa1f fe84 	uxth.w	lr, r4
    cffe:	fb09 bb18 	mls	fp, r9, r8, fp
    d002:	0c1a      	lsrs	r2, r3, #16
    d004:	fb08 fa0e 	mul.w	sl, r8, lr
    d008:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
    d00c:	4592      	cmp	sl, r2
    d00e:	fa07 f701 	lsl.w	r7, r7, r1
    d012:	d93e      	bls.n	d092 <__udivmoddi4+0x29a>
    d014:	18a2      	adds	r2, r4, r2
    d016:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
    d01a:	d204      	bcs.n	d026 <__udivmoddi4+0x22e>
    d01c:	4592      	cmp	sl, r2
    d01e:	d902      	bls.n	d026 <__udivmoddi4+0x22e>
    d020:	f1a8 0002 	sub.w	r0, r8, #2
    d024:	4422      	add	r2, r4
    d026:	eba2 020a 	sub.w	r2, r2, sl
    d02a:	b29b      	uxth	r3, r3
    d02c:	fbb2 f8f9 	udiv	r8, r2, r9
    d030:	fb09 2218 	mls	r2, r9, r8, r2
    d034:	fb08 fe0e 	mul.w	lr, r8, lr
    d038:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
    d03c:	4596      	cmp	lr, r2
    d03e:	d92a      	bls.n	d096 <__udivmoddi4+0x29e>
    d040:	18a2      	adds	r2, r4, r2
    d042:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    d046:	d204      	bcs.n	d052 <__udivmoddi4+0x25a>
    d048:	4596      	cmp	lr, r2
    d04a:	d902      	bls.n	d052 <__udivmoddi4+0x25a>
    d04c:	f1a8 0302 	sub.w	r3, r8, #2
    d050:	4422      	add	r2, r4
    d052:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    d056:	fba0 9305 	umull	r9, r3, r0, r5
    d05a:	eba2 020e 	sub.w	r2, r2, lr
    d05e:	429a      	cmp	r2, r3
    d060:	46ce      	mov	lr, r9
    d062:	4698      	mov	r8, r3
    d064:	d302      	bcc.n	d06c <__udivmoddi4+0x274>
    d066:	d106      	bne.n	d076 <__udivmoddi4+0x27e>
    d068:	454f      	cmp	r7, r9
    d06a:	d204      	bcs.n	d076 <__udivmoddi4+0x27e>
    d06c:	ebb9 0e05 	subs.w	lr, r9, r5
    d070:	eb63 0804 	sbc.w	r8, r3, r4
    d074:	3801      	subs	r0, #1
    d076:	b186      	cbz	r6, d09a <__udivmoddi4+0x2a2>
    d078:	ebb7 030e 	subs.w	r3, r7, lr
    d07c:	eb62 0708 	sbc.w	r7, r2, r8
    d080:	fa07 fc0c 	lsl.w	ip, r7, ip
    d084:	40cb      	lsrs	r3, r1
    d086:	ea4c 0303 	orr.w	r3, ip, r3
    d08a:	40cf      	lsrs	r7, r1
    d08c:	e9c6 3700 	strd	r3, r7, [r6]
    d090:	e79c      	b.n	cfcc <__udivmoddi4+0x1d4>
    d092:	4640      	mov	r0, r8
    d094:	e7c7      	b.n	d026 <__udivmoddi4+0x22e>
    d096:	4643      	mov	r3, r8
    d098:	e7db      	b.n	d052 <__udivmoddi4+0x25a>
    d09a:	4631      	mov	r1, r6
    d09c:	e6fd      	b.n	ce9a <__udivmoddi4+0xa2>

0000d09e <strcmp>:
    d09e:	f810 2b01 	ldrb.w	r2, [r0], #1
    d0a2:	f811 3b01 	ldrb.w	r3, [r1], #1
    d0a6:	2a01      	cmp	r2, #1
    d0a8:	bf28      	it	cs
    d0aa:	429a      	cmpcs	r2, r3
    d0ac:	d0f7      	beq.n	d09e <strcmp>
    d0ae:	1ad0      	subs	r0, r2, r3
    d0b0:	4770      	bx	lr

0000d0b2 <strlen>:
    d0b2:	4603      	mov	r3, r0
    d0b4:	f813 2b01 	ldrb.w	r2, [r3], #1
    d0b8:	2a00      	cmp	r2, #0
    d0ba:	d1fb      	bne.n	d0b4 <strlen+0x2>
    d0bc:	1a18      	subs	r0, r3, r0
    d0be:	3801      	subs	r0, #1
    d0c0:	4770      	bx	lr
    d0c2:	2804      	cmp	r0, #4
    d0c4:	d202      	bcs.n	d0cc <strlen+0x1a>
    d0c6:	f04f 0028 	mov.w	r0, #40	; 0x28
    d0ca:	4770      	bx	lr
    d0cc:	d102      	bne.n	d0d4 <strlen+0x22>
    d0ce:	f04f 0010 	mov.w	r0, #16
    d0d2:	4770      	bx	lr
    d0d4:	f04f 0000 	mov.w	r0, #0
    d0d8:	4770      	bx	lr
    d0da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d0de:	000d      	movs	r5, r1
    d0e0:	4604      	mov	r4, r0
    d0e2:	f04f 0602 	mov.w	r6, #2
    d0e6:	f04f 0701 	mov.w	r7, #1
    d0ea:	d008      	beq.n	d0fe <strlen+0x4c>
    d0ec:	7828      	ldrb	r0, [r5, #0]
    d0ee:	b1d0      	cbz	r0, d126 <strlen+0x74>
    d0f0:	2801      	cmp	r0, #1
    d0f2:	d007      	beq.n	d104 <strlen+0x52>
    d0f4:	2802      	cmp	r0, #2
    d0f6:	d014      	beq.n	d122 <strlen+0x70>
    d0f8:	2803      	cmp	r0, #3
    d0fa:	d13e      	bne.n	d17a <strlen+0xc8>
    d0fc:	e016      	b.n	d12c <strlen+0x7a>
    d0fe:	f880 7029 	strb.w	r7, [r0, #41]	; 0x29
    d102:	e00e      	b.n	d122 <strlen+0x70>
    d104:	6868      	ldr	r0, [r5, #4]
    d106:	28c8      	cmp	r0, #200	; 0xc8
    d108:	d303      	bcc.n	d112 <strlen+0x60>
    d10a:	2103      	movs	r1, #3
    d10c:	f7f5 fca2 	bl	2a54 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    d110:	b108      	cbz	r0, d116 <strlen+0x64>
    d112:	2600      	movs	r6, #0
    d114:	e007      	b.n	d126 <strlen+0x74>
    d116:	4620      	mov	r0, r4
    d118:	6869      	ldr	r1, [r5, #4]
    d11a:	f000 f943 	bl	d3a4 <strlen+0x2f2>
    d11e:	2601      	movs	r6, #1
    d120:	e001      	b.n	d126 <strlen+0x74>
    d122:	f7f4 fbf3 	bl	190c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x9c>
    d126:	4630      	mov	r0, r6
    d128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d12c:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    d130:	2800      	cmp	r0, #0
    d132:	d1f6      	bne.n	d122 <strlen+0x70>
    d134:	6868      	ldr	r0, [r5, #4]
    d136:	f7f4 fbbb 	bl	18b0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x40>
    d13a:	b1f0      	cbz	r0, d17a <strlen+0xc8>
    d13c:	6869      	ldr	r1, [r5, #4]
    d13e:	7808      	ldrb	r0, [r1, #0]
    d140:	b130      	cbz	r0, d150 <strlen+0x9e>
    d142:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    d146:	2805      	cmp	r0, #5
    d148:	d008      	beq.n	d15c <strlen+0xaa>
    d14a:	f44f 71be 	mov.w	r1, #380	; 0x17c
    d14e:	e011      	b.n	d174 <strlen+0xc2>
    d150:	4620      	mov	r0, r4
    d152:	f000 f92f 	bl	d3b4 <strlen+0x302>
    d156:	f884 7025 	strb.w	r7, [r4, #37]	; 0x25
    d15a:	e7e2      	b.n	d122 <strlen+0x70>
    d15c:	4620      	mov	r0, r4
    d15e:	f000 f942 	bl	d3e6 <strlen+0x334>
    d162:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    d166:	4621      	mov	r1, r4
    d168:	f000 f80a 	bl	d180 <strlen+0xce>
    d16c:	2800      	cmp	r0, #0
    d16e:	d1d8      	bne.n	d122 <strlen+0x70>
    d170:	f44f 71bf 	mov.w	r1, #382	; 0x17e
    d174:	206a      	movs	r0, #106	; 0x6a
    d176:	f7f7 ff23 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d17a:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
    d17e:	e7d0      	b.n	d122 <strlen+0x70>
    d180:	f7f5 be4a 	b.w	2e18 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    d184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d188:	460d      	mov	r5, r1
    d18a:	0004      	movs	r4, r0
    d18c:	d00c      	beq.n	d1a8 <strlen+0xf6>
    d18e:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
    d192:	2700      	movs	r7, #0
    d194:	2002      	movs	r0, #2
    d196:	2d09      	cmp	r5, #9
    d198:	d270      	bcs.n	d27c <strlen+0x1ca>
    d19a:	e8df f005 	tbb	[pc, r5]
    d19e:	1108      	.short	0x1108
    d1a0:	70653535 	.word	0x70653535
    d1a4:	0093a588 	.word	0x0093a588
    d1a8:	f44f 71cb 	mov.w	r1, #406	; 0x196
    d1ac:	e0f7      	b.n	d39e <strlen+0x2ec>
    d1ae:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    d1b2:	2804      	cmp	r0, #4
    d1b4:	d07a      	beq.n	d2ac <strlen+0x1fa>
    d1b6:	2803      	cmp	r0, #3
    d1b8:	d0fc      	beq.n	d1b4 <strlen+0x102>
    d1ba:	f240 11a1 	movw	r1, #417	; 0x1a1
    d1be:	e0ee      	b.n	d39e <strlen+0x2ec>
    d1c0:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    d1c4:	2804      	cmp	r0, #4
    d1c6:	d004      	beq.n	d1d2 <strlen+0x120>
    d1c8:	2803      	cmp	r0, #3
    d1ca:	d002      	beq.n	d1d2 <strlen+0x120>
    d1cc:	f240 11a5 	movw	r1, #421	; 0x1a5
    d1d0:	e0e5      	b.n	d39e <strlen+0x2ec>
    d1d2:	2005      	movs	r0, #5
    d1d4:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    d1d8:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
    d1dc:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    d1e0:	bbb0      	cbnz	r0, d250 <strlen+0x19e>
    d1e2:	2100      	movs	r1, #0
    d1e4:	4620      	mov	r0, r4
    d1e6:	f000 f8dd 	bl	d3a4 <strlen+0x2f2>
    d1ea:	7820      	ldrb	r0, [r4, #0]
    d1ec:	2801      	cmp	r0, #1
    d1ee:	d006      	beq.n	d1fe <strlen+0x14c>
    d1f0:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    d1f4:	e9c4 0106 	strd	r0, r1, [r4, #24]
    d1f8:	2100      	movs	r1, #0
    d1fa:	6a22      	ldr	r2, [r4, #32]
    d1fc:	e048      	b.n	d290 <strlen+0x1de>
    d1fe:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    d202:	f7f5 fd15 	bl	2c30 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>
    d206:	e7f5      	b.n	d1f4 <strlen+0x142>
    d208:	f894 1026 	ldrb.w	r1, [r4, #38]	; 0x26
    d20c:	2904      	cmp	r1, #4
    d20e:	d004      	beq.n	d21a <strlen+0x168>
    d210:	2903      	cmp	r1, #3
    d212:	d002      	beq.n	d21a <strlen+0x168>
    d214:	f240 11c3 	movw	r1, #451	; 0x1c3
    d218:	e0c1      	b.n	d39e <strlen+0x2ec>
    d21a:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
    d21e:	b122      	cbz	r2, d22a <strlen+0x178>
    d220:	4621      	mov	r1, r4
    d222:	4630      	mov	r0, r6
    d224:	f000 f8fe 	bl	d424 <strlen+0x372>
    d228:	e0b1      	b.n	d38e <strlen+0x2dc>
    d22a:	2904      	cmp	r1, #4
    d22c:	d000      	beq.n	d230 <strlen+0x17e>
    d22e:	2001      	movs	r0, #1
    d230:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    d234:	6a22      	ldr	r2, [r4, #32]
    d236:	2d02      	cmp	r5, #2
    d238:	d00b      	beq.n	d252 <strlen+0x1a0>
    d23a:	2106      	movs	r1, #6
    d23c:	4630      	mov	r0, r6
    d23e:	4790      	blx	r2
    d240:	2800      	cmp	r0, #0
    d242:	d06d      	beq.n	d320 <strlen+0x26e>
    d244:	7800      	ldrb	r0, [r0, #0]
    d246:	2800      	cmp	r0, #0
    d248:	d06a      	beq.n	d320 <strlen+0x26e>
    d24a:	f240 11dd 	movw	r1, #477	; 0x1dd
    d24e:	e0a6      	b.n	d39e <strlen+0x2ec>
    d250:	e034      	b.n	d2bc <strlen+0x20a>
    d252:	2105      	movs	r1, #5
    d254:	4630      	mov	r0, r6
    d256:	4790      	blx	r2
    d258:	2800      	cmp	r0, #0
    d25a:	d07c      	beq.n	d356 <strlen+0x2a4>
    d25c:	7800      	ldrb	r0, [r0, #0]
    d25e:	2800      	cmp	r0, #0
    d260:	d079      	beq.n	d356 <strlen+0x2a4>
    d262:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
    d266:	e09a      	b.n	d39e <strlen+0x2ec>
    d268:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    d26c:	2805      	cmp	r0, #5
    d26e:	d002      	beq.n	d276 <strlen+0x1c4>
    d270:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
    d274:	e093      	b.n	d39e <strlen+0x2ec>
    d276:	2102      	movs	r1, #2
    d278:	6a22      	ldr	r2, [r4, #32]
    d27a:	e009      	b.n	d290 <strlen+0x1de>
    d27c:	e07e      	b.n	d37c <strlen+0x2ca>
    d27e:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    d282:	2805      	cmp	r0, #5
    d284:	d002      	beq.n	d28c <strlen+0x1da>
    d286:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
    d28a:	e088      	b.n	d39e <strlen+0x2ec>
    d28c:	6a22      	ldr	r2, [r4, #32]
    d28e:	2101      	movs	r1, #1
    d290:	4630      	mov	r0, r6
    d292:	4790      	blx	r2
    d294:	4601      	mov	r1, r0
    d296:	4620      	mov	r0, r4
    d298:	f7ff ff1f 	bl	d0da <strlen+0x28>
    d29c:	2802      	cmp	r0, #2
    d29e:	d076      	beq.n	d38e <strlen+0x2dc>
    d2a0:	b3e8      	cbz	r0, d31e <strlen+0x26c>
    d2a2:	2801      	cmp	r0, #1
    d2a4:	d06d      	beq.n	d382 <strlen+0x2d0>
    d2a6:	f240 212a 	movw	r1, #554	; 0x22a
    d2aa:	e078      	b.n	d39e <strlen+0x2ec>
    d2ac:	e071      	b.n	d392 <strlen+0x2e0>
    d2ae:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    d2b2:	2805      	cmp	r0, #5
    d2b4:	d002      	beq.n	d2bc <strlen+0x20a>
    d2b6:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
    d2ba:	e070      	b.n	d39e <strlen+0x2ec>
    d2bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d2c0:	f7f4 bb24 	b.w	190c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x9c>
    d2c4:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    d2c8:	2805      	cmp	r0, #5
    d2ca:	d002      	beq.n	d2d2 <strlen+0x220>
    d2cc:	f240 11f5 	movw	r1, #501	; 0x1f5
    d2d0:	e065      	b.n	d39e <strlen+0x2ec>
    d2d2:	6a22      	ldr	r2, [r4, #32]
    d2d4:	210a      	movs	r1, #10
    d2d6:	4630      	mov	r0, r6
    d2d8:	4790      	blx	r2
    d2da:	4601      	mov	r1, r0
    d2dc:	4620      	mov	r0, r4
    d2de:	f7ff fefc 	bl	d0da <strlen+0x28>
    d2e2:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
    d2e6:	e05a      	b.n	d39e <strlen+0x2ec>
    d2e8:	f894 1026 	ldrb.w	r1, [r4, #38]	; 0x26
    d2ec:	2905      	cmp	r1, #5
    d2ee:	d007      	beq.n	d300 <strlen+0x24e>
    d2f0:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
    d2f4:	b10a      	cbz	r2, d2fa <strlen+0x248>
    d2f6:	2903      	cmp	r1, #3
    d2f8:	d002      	beq.n	d300 <strlen+0x24e>
    d2fa:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
    d2fe:	e04e      	b.n	d39e <strlen+0x2ec>
    d300:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
    d304:	b129      	cbz	r1, d312 <strlen+0x260>
    d306:	4621      	mov	r1, r4
    d308:	4630      	mov	r0, r6
    d30a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d30e:	f000 b889 	b.w	d424 <strlen+0x372>
    d312:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
    d316:	b199      	cbz	r1, d340 <strlen+0x28e>
    d318:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
    d31c:	e001      	b.n	d322 <strlen+0x270>
    d31e:	e033      	b.n	d388 <strlen+0x2d6>
    d320:	e035      	b.n	d38e <strlen+0x2dc>
    d322:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    d326:	6a22      	ldr	r2, [r4, #32]
    d328:	2108      	movs	r1, #8
    d32a:	4630      	mov	r0, r6
    d32c:	4790      	blx	r2
    d32e:	2800      	cmp	r0, #0
    d330:	d011      	beq.n	d356 <strlen+0x2a4>
    d332:	7800      	ldrb	r0, [r0, #0]
    d334:	2800      	cmp	r0, #0
    d336:	d00e      	beq.n	d356 <strlen+0x2a4>
    d338:	f44f 7102 	mov.w	r1, #520	; 0x208
    d33c:	e02f      	b.n	d39e <strlen+0x2ec>
    d33e:	e00a      	b.n	d356 <strlen+0x2a4>
    d340:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
    d344:	b161      	cbz	r1, d360 <strlen+0x2ae>
    d346:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    d34a:	4621      	mov	r1, r4
    d34c:	f7ff ff18 	bl	d180 <strlen+0xce>
    d350:	b118      	cbz	r0, d35a <strlen+0x2a8>
    d352:	f884 7025 	strb.w	r7, [r4, #37]	; 0x25
    d356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d35a:	f44f 7103 	mov.w	r1, #524	; 0x20c
    d35e:	e01e      	b.n	d39e <strlen+0x2ec>
    d360:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    d364:	6a22      	ldr	r2, [r4, #32]
    d366:	2107      	movs	r1, #7
    d368:	4630      	mov	r0, r6
    d36a:	4790      	blx	r2
    d36c:	2800      	cmp	r0, #0
    d36e:	d0f2      	beq.n	d356 <strlen+0x2a4>
    d370:	7800      	ldrb	r0, [r0, #0]
    d372:	2800      	cmp	r0, #0
    d374:	d0ef      	beq.n	d356 <strlen+0x2a4>
    d376:	f44f 7105 	mov.w	r1, #532	; 0x214
    d37a:	e010      	b.n	d39e <strlen+0x2ec>
    d37c:	f240 2119 	movw	r1, #537	; 0x219
    d380:	e00d      	b.n	d39e <strlen+0x2ec>
    d382:	2104      	movs	r1, #4
    d384:	6a22      	ldr	r2, [r4, #32]
    d386:	e783      	b.n	d290 <strlen+0x1de>
    d388:	2103      	movs	r1, #3
    d38a:	6a22      	ldr	r2, [r4, #32]
    d38c:	e780      	b.n	d290 <strlen+0x1de>
    d38e:	2d00      	cmp	r5, #0
    d390:	d1e1      	bne.n	d356 <strlen+0x2a4>
    d392:	f000 f8fd 	bl	d590 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
    d396:	2800      	cmp	r0, #0
    d398:	d0dd      	beq.n	d356 <strlen+0x2a4>
    d39a:	f240 2133 	movw	r1, #563	; 0x233
    d39e:	206a      	movs	r0, #106	; 0x6a
    d3a0:	f7f7 fe0e 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d3a4:	4602      	mov	r2, r0
    d3a6:	7803      	ldrb	r3, [r0, #0]
    d3a8:	6840      	ldr	r0, [r0, #4]
    d3aa:	4408      	add	r0, r1
    d3ac:	6050      	str	r0, [r2, #4]
    d3ae:	3859      	subs	r0, #89	; 0x59
    d3b0:	f7f6 bc44 	b.w	3c3c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    d3b4:	2201      	movs	r2, #1
    d3b6:	7002      	strb	r2, [r0, #0]
    d3b8:	2200      	movs	r2, #0
    d3ba:	72c2      	strb	r2, [r0, #11]
    d3bc:	790a      	ldrb	r2, [r1, #4]
    d3be:	b172      	cbz	r2, d3de <strlen+0x32c>
    d3c0:	2200      	movs	r2, #0
    d3c2:	8102      	strh	r2, [r0, #8]
    d3c4:	794a      	ldrb	r2, [r1, #5]
    d3c6:	b162      	cbz	r2, d3e2 <strlen+0x330>
    d3c8:	2203      	movs	r2, #3
    d3ca:	7282      	strb	r2, [r0, #10]
    d3cc:	688a      	ldr	r2, [r1, #8]
    d3ce:	326a      	adds	r2, #106	; 0x6a
    d3d0:	6042      	str	r2, [r0, #4]
    d3d2:	68c9      	ldr	r1, [r1, #12]
    d3d4:	6101      	str	r1, [r0, #16]
    d3d6:	2103      	movs	r1, #3
    d3d8:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    d3dc:	4770      	bx	lr
    d3de:	222b      	movs	r2, #43	; 0x2b
    d3e0:	e7ef      	b.n	d3c2 <strlen+0x310>
    d3e2:	2202      	movs	r2, #2
    d3e4:	e7f1      	b.n	d3ca <strlen+0x318>
    d3e6:	b510      	push	{r4, lr}
    d3e8:	2200      	movs	r2, #0
    d3ea:	7002      	strb	r2, [r0, #0]
    d3ec:	72c2      	strb	r2, [r0, #11]
    d3ee:	790a      	ldrb	r2, [r1, #4]
    d3f0:	b1a2      	cbz	r2, d41c <strlen+0x36a>
    d3f2:	2200      	movs	r2, #0
    d3f4:	8102      	strh	r2, [r0, #8]
    d3f6:	794a      	ldrb	r2, [r1, #5]
    d3f8:	b192      	cbz	r2, d420 <strlen+0x36e>
    d3fa:	2203      	movs	r2, #3
    d3fc:	7282      	strb	r2, [r0, #10]
    d3fe:	68ca      	ldr	r2, [r1, #12]
    d400:	326a      	adds	r2, #106	; 0x6a
    d402:	6042      	str	r2, [r0, #4]
    d404:	e9d0 4206 	ldrd	r4, r2, [r0, #24]
    d408:	6889      	ldr	r1, [r1, #8]
    d40a:	17cb      	asrs	r3, r1, #31
    d40c:	1861      	adds	r1, r4, r1
    d40e:	415a      	adcs	r2, r3
    d410:	e9c0 1204 	strd	r1, r2, [r0, #16]
    d414:	2104      	movs	r1, #4
    d416:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    d41a:	bd10      	pop	{r4, pc}
    d41c:	222b      	movs	r2, #43	; 0x2b
    d41e:	e7e9      	b.n	d3f4 <strlen+0x342>
    d420:	2202      	movs	r2, #2
    d422:	e7eb      	b.n	d3fc <strlen+0x34a>
    d424:	b570      	push	{r4, r5, r6, lr}
    d426:	4605      	mov	r5, r0
    d428:	460c      	mov	r4, r1
    d42a:	f891 0027 	ldrb.w	r0, [r1, #39]	; 0x27
    d42e:	f7f6 f9d3 	bl	37d8 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    d432:	b178      	cbz	r0, d454 <strlen+0x3a2>
    d434:	4620      	mov	r0, r4
    d436:	f000 f810 	bl	d45a <strlen+0x3a8>
    d43a:	6a22      	ldr	r2, [r4, #32]
    d43c:	2109      	movs	r1, #9
    d43e:	4628      	mov	r0, r5
    d440:	4790      	blx	r2
    d442:	2800      	cmp	r0, #0
    d444:	d008      	beq.n	d458 <strlen+0x3a6>
    d446:	7800      	ldrb	r0, [r0, #0]
    d448:	2800      	cmp	r0, #0
    d44a:	d005      	beq.n	d458 <strlen+0x3a6>
    d44c:	21dc      	movs	r1, #220	; 0xdc
    d44e:	206a      	movs	r0, #106	; 0x6a
    d450:	f7f7 fdb6 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d454:	21d8      	movs	r1, #216	; 0xd8
    d456:	e7fa      	b.n	d44e <strlen+0x39c>
    d458:	bd70      	pop	{r4, r5, r6, pc}
    d45a:	2100      	movs	r1, #0
    d45c:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    d460:	f800 1f24 	strb.w	r1, [r0, #36]!
    d464:	7041      	strb	r1, [r0, #1]
    d466:	4770      	bx	lr

0000d468 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    d468:	b570      	push	{r4, r5, r6, lr}
    d46a:	f7f4 faab 	bl	19c4 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    d46e:	4605      	mov	r5, r0
    d470:	2400      	movs	r4, #0
    d472:	e006      	b.n	d482 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    d474:	4620      	mov	r0, r4
    d476:	f7f4 faab 	bl	19d0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    d47a:	f7ff ffee 	bl	d45a <strlen+0x3a8>
    d47e:	1c64      	adds	r4, r4, #1
    d480:	b2e4      	uxtb	r4, r4
    d482:	42ac      	cmp	r4, r5
    d484:	d3f6      	bcc.n	d474 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    d486:	bd70      	pop	{r4, r5, r6, pc}

0000d488 <mpsl_timeslot_request>:
    d488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d48c:	460d      	mov	r5, r1
    d48e:	f7f4 fa9f 	bl	19d0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    d492:	0004      	movs	r4, r0
    d494:	d008      	beq.n	d4a8 <mpsl_timeslot_request+0x20>
    d496:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    d49a:	f06f 0622 	mvn.w	r6, #34	; 0x22
    d49e:	2801      	cmp	r0, #1
    d4a0:	d006      	beq.n	d4b0 <mpsl_timeslot_request+0x28>
    d4a2:	2802      	cmp	r0, #2
    d4a4:	d111      	bne.n	d4ca <mpsl_timeslot_request+0x42>
    d4a6:	e003      	b.n	d4b0 <mpsl_timeslot_request+0x28>
    d4a8:	f06f 0001 	mvn.w	r0, #1
    d4ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d4b0:	f06f 0715 	mvn.w	r7, #21
    d4b4:	b15d      	cbz	r5, d4ce <mpsl_timeslot_request+0x46>
    d4b6:	4628      	mov	r0, r5
    d4b8:	f7f4 f9fa 	bl	18b0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x40>
    d4bc:	b138      	cbz	r0, d4ce <mpsl_timeslot_request+0x46>
    d4be:	7828      	ldrb	r0, [r5, #0]
    d4c0:	b138      	cbz	r0, d4d2 <mpsl_timeslot_request+0x4a>
    d4c2:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    d4c6:	2802      	cmp	r0, #2
    d4c8:	d008      	beq.n	d4dc <mpsl_timeslot_request+0x54>
    d4ca:	4630      	mov	r0, r6
    d4cc:	e7ee      	b.n	d4ac <mpsl_timeslot_request+0x24>
    d4ce:	4638      	mov	r0, r7
    d4d0:	e7ec      	b.n	d4ac <mpsl_timeslot_request+0x24>
    d4d2:	4629      	mov	r1, r5
    d4d4:	4620      	mov	r0, r4
    d4d6:	f7ff ff6d 	bl	d3b4 <strlen+0x302>
    d4da:	e003      	b.n	d4e4 <mpsl_timeslot_request+0x5c>
    d4dc:	4629      	mov	r1, r5
    d4de:	4620      	mov	r0, r4
    d4e0:	f7ff ff81 	bl	d3e6 <strlen+0x334>
    d4e4:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    d4e8:	4621      	mov	r1, r4
    d4ea:	f7ff fe49 	bl	d180 <strlen+0xce>
    d4ee:	b108      	cbz	r0, d4f4 <mpsl_timeslot_request+0x6c>
    d4f0:	2000      	movs	r0, #0
    d4f2:	e7db      	b.n	d4ac <mpsl_timeslot_request+0x24>
    d4f4:	f240 21b1 	movw	r1, #689	; 0x2b1
    d4f8:	206a      	movs	r0, #106	; 0x6a
    d4fa:	f7f7 fd61 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>

0000d4fe <mpsl_timeslot_session_close>:
    d4fe:	b510      	push	{r4, lr}
    d500:	4604      	mov	r4, r0
    d502:	f7f4 fa65 	bl	19d0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    d506:	0001      	movs	r1, r0
    d508:	d005      	beq.n	d516 <mpsl_timeslot_session_close+0x18>
    d50a:	f891 0024 	ldrb.w	r0, [r1, #36]	; 0x24
    d50e:	f06f 0222 	mvn.w	r2, #34	; 0x22
    d512:	b978      	cbnz	r0, d534 <mpsl_timeslot_session_close+0x36>
    d514:	e002      	b.n	d51c <mpsl_timeslot_session_close+0x1e>
    d516:	f06f 0001 	mvn.w	r0, #1
    d51a:	bd10      	pop	{r4, pc}
    d51c:	f891 0026 	ldrb.w	r0, [r1, #38]	; 0x26
    d520:	b140      	cbz	r0, d534 <mpsl_timeslot_session_close+0x36>
    d522:	2802      	cmp	r0, #2
    d524:	d008      	beq.n	d538 <mpsl_timeslot_session_close+0x3a>
    d526:	2801      	cmp	r0, #1
    d528:	d006      	beq.n	d538 <mpsl_timeslot_session_close+0x3a>
    d52a:	2001      	movs	r0, #1
    d52c:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
    d530:	2000      	movs	r0, #0
    d532:	bd10      	pop	{r4, pc}
    d534:	4610      	mov	r0, r2
    d536:	bd10      	pop	{r4, pc}
    d538:	4620      	mov	r0, r4
    d53a:	f7ff ff73 	bl	d424 <strlen+0x372>
    d53e:	e7f7      	b.n	d530 <mpsl_timeslot_session_close+0x32>

0000d540 <mpsl_timeslot_session_count_set>:
    d540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d544:	460e      	mov	r6, r1
    d546:	4607      	mov	r7, r0
    d548:	f7f4 fa3c 	bl	19c4 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    d54c:	4605      	mov	r5, r0
    d54e:	2400      	movs	r4, #0
    d550:	e00b      	b.n	d56a <mpsl_timeslot_session_count_set+0x2a>
    d552:	4620      	mov	r0, r4
    d554:	f7f4 fa3c 	bl	19d0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    d558:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
    d55c:	b118      	cbz	r0, d566 <mpsl_timeslot_session_count_set+0x26>
    d55e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d566:	1c64      	adds	r4, r4, #1
    d568:	b2e4      	uxtb	r4, r4
    d56a:	42ac      	cmp	r4, r5
    d56c:	d3f1      	bcc.n	d552 <mpsl_timeslot_session_count_set+0x12>
    d56e:	2e08      	cmp	r6, #8
    d570:	d902      	bls.n	d578 <mpsl_timeslot_session_count_set+0x38>
    d572:	f06f 0015 	mvn.w	r0, #21
    d576:	e7f4      	b.n	d562 <mpsl_timeslot_session_count_set+0x22>
    d578:	b117      	cbz	r7, d580 <mpsl_timeslot_session_count_set+0x40>
    d57a:	4631      	mov	r1, r6
    d57c:	4638      	mov	r0, r7
    d57e:	e001      	b.n	d584 <mpsl_timeslot_session_count_set+0x44>
    d580:	2100      	movs	r1, #0
    d582:	4608      	mov	r0, r1
    d584:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d588:	f7f4 ba08 	b.w	199c <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q>

0000d58c <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>:
    d58c:	f7f6 bdfa 	b.w	4184 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>

0000d590 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>:
    d590:	b510      	push	{r4, lr}
    d592:	2000      	movs	r0, #0
    d594:	f7f7 f91c 	bl	47d0 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>
    d598:	6800      	ldr	r0, [r0, #0]
    d59a:	2800      	cmp	r0, #0
    d59c:	bf18      	it	ne
    d59e:	2001      	movne	r0, #1
    d5a0:	bd10      	pop	{r4, pc}

0000d5a2 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
    d5a2:	b510      	push	{r4, lr}
    d5a4:	f7f7 f994 	bl	48d0 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    d5a8:	f7f6 fc66 	bl	3e78 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    d5ac:	f000 f802 	bl	d5b4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    d5b0:	b280      	uxth	r0, r0
    d5b2:	bd10      	pop	{r4, pc}

0000d5b4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
    d5b4:	0a41      	lsrs	r1, r0, #9
    d5b6:	f643 5209 	movw	r2, #15625	; 0x3d09
    d5ba:	4351      	muls	r1, r2
    d5bc:	f3c0 0008 	ubfx	r0, r0, #0, #9
    d5c0:	fb10 f002 	smulbb	r0, r0, r2
    d5c4:	f500 7080 	add.w	r0, r0, #256	; 0x100
    d5c8:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    d5cc:	4770      	bx	lr
    d5ce:	2800      	cmp	r0, #0
    d5d0:	db09      	blt.n	d5e6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x32>
    d5d2:	f000 021f 	and.w	r2, r0, #31
    d5d6:	2101      	movs	r1, #1
    d5d8:	4091      	lsls	r1, r2
    d5da:	0940      	lsrs	r0, r0, #5
    d5dc:	0080      	lsls	r0, r0, #2
    d5de:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d5e2:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d5e6:	4770      	bx	lr
    d5e8:	2800      	cmp	r0, #0
    d5ea:	db0d      	blt.n	d608 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x54>
    d5ec:	f000 021f 	and.w	r2, r0, #31
    d5f0:	2101      	movs	r1, #1
    d5f2:	4091      	lsls	r1, r2
    d5f4:	0940      	lsrs	r0, r0, #5
    d5f6:	0080      	lsls	r0, r0, #2
    d5f8:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d5fc:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    d600:	f3bf 8f4f 	dsb	sy
    d604:	f3bf 8f6f 	isb	sy
    d608:	4770      	bx	lr

0000d60a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    d60a:	b570      	push	{r4, r5, r6, lr}
    d60c:	4602      	mov	r2, r0
    d60e:	2000      	movs	r0, #0
    d610:	2900      	cmp	r1, #0
    d612:	d01d      	beq.n	d650 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x46>
    d614:	fba2 0101 	umull	r0, r1, r2, r1
    d618:	0a40      	lsrs	r0, r0, #9
    d61a:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
    d61e:	0a49      	lsrs	r1, r1, #9
    d620:	1c40      	adds	r0, r0, #1
    d622:	f141 0100 	adc.w	r1, r1, #0
    d626:	f240 72a1 	movw	r2, #1953	; 0x7a1
    d62a:	1883      	adds	r3, r0, r2
    d62c:	f141 0100 	adc.w	r1, r1, #0
    d630:	1c5b      	adds	r3, r3, #1
    d632:	f141 0400 	adc.w	r4, r1, #0
    d636:	2100      	movs	r1, #0
    d638:	f1d3 33ff 	rsbs	r3, r3, #4294967295	; 0xffffffff
    d63c:	41a1      	sbcs	r1, r4
    d63e:	d203      	bcs.n	d648 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
    d640:	2172      	movs	r1, #114	; 0x72
    d642:	206d      	movs	r0, #109	; 0x6d
    d644:	f7f7 fcbc 	bl	4fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d648:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
    d64c:	fbb0 f0f2 	udiv	r0, r0, r2
    d650:	bd70      	pop	{r4, r5, r6, pc}
    d652:	5840      	ldr	r0, [r0, r1]
    d654:	2800      	cmp	r0, #0
    d656:	d000      	beq.n	d65a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x50>
    d658:	2001      	movs	r0, #1
    d65a:	4770      	bx	lr
    d65c:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    d660:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    d664:	f002 0201 	and.w	r2, r2, #1
    d668:	03c0      	lsls	r0, r0, #15
    d66a:	d503      	bpl.n	d674 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    d66c:	428a      	cmp	r2, r1
    d66e:	d101      	bne.n	d674 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    d670:	2001      	movs	r0, #1
    d672:	4770      	bx	lr
    d674:	2000      	movs	r0, #0
    d676:	4770      	bx	lr

0000d678 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    d678:	b510      	push	{r4, lr}
    d67a:	2101      	movs	r1, #1
    d67c:	0788      	lsls	r0, r1, #30
    d67e:	f7f7 fc49 	bl	4f14 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    d682:	2800      	cmp	r0, #0
    d684:	d000      	beq.n	d688 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    d686:	2001      	movs	r0, #1
    d688:	bd10      	pop	{r4, pc}

0000d68a <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    d68a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    d68e:	2101      	movs	r1, #1
    d690:	6001      	str	r1, [r0, #0]
    d692:	4770      	bx	lr

0000d694 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    d694:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    d698:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    d69c:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    d6a0:	f002 0203 	and.w	r2, r2, #3
    d6a4:	03c9      	lsls	r1, r1, #15
    d6a6:	d503      	bpl.n	d6b0 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    d6a8:	4282      	cmp	r2, r0
    d6aa:	d101      	bne.n	d6b0 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    d6ac:	2001      	movs	r0, #1
    d6ae:	4770      	bx	lr
    d6b0:	2000      	movs	r0, #0
    d6b2:	4770      	bx	lr

0000d6b4 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    d6b4:	b510      	push	{r4, lr}
    d6b6:	2100      	movs	r1, #0
    d6b8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    d6bc:	f7f7 fc2a 	bl	4f14 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    d6c0:	2800      	cmp	r0, #0
    d6c2:	d000      	beq.n	d6c6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    d6c4:	2001      	movs	r0, #1
    d6c6:	bd10      	pop	{r4, pc}
    d6c8:	2800      	cmp	r0, #0
    d6ca:	db09      	blt.n	d6e0 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    d6cc:	f000 021f 	and.w	r2, r0, #31
    d6d0:	2101      	movs	r1, #1
    d6d2:	4091      	lsls	r1, r2
    d6d4:	0940      	lsrs	r0, r0, #5
    d6d6:	0080      	lsls	r0, r0, #2
    d6d8:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d6dc:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d6e0:	4770      	bx	lr
    d6e2:	2800      	cmp	r0, #0
    d6e4:	db0d      	blt.n	d702 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    d6e6:	f000 021f 	and.w	r2, r0, #31
    d6ea:	2101      	movs	r1, #1
    d6ec:	4091      	lsls	r1, r2
    d6ee:	0940      	lsrs	r0, r0, #5
    d6f0:	0080      	lsls	r0, r0, #2
    d6f2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d6f6:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    d6fa:	f3bf 8f4f 	dsb	sy
    d6fe:	f3bf 8f6f 	isb	sy
    d702:	4770      	bx	lr
    d704:	00021000 	.word	0x00021000
    d708:	000000fa 	.word	0x000000fa
    d70c:	63a70f14 	.word	0x63a70f14
    d710:	c477f9cf 	.word	0xc477f9cf
    d714:	e931f9ef 	.word	0xe931f9ef
    d718:	03bcf561 	.word	0x03bcf561
    d71c:	2b06749a 	.word	0x2b06749a
    d720:	2800      	cmp	r0, #0
    d722:	db09      	blt.n	d738 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
    d724:	f000 021f 	and.w	r2, r0, #31
    d728:	2101      	movs	r1, #1
    d72a:	4091      	lsls	r1, r2
    d72c:	0940      	lsrs	r0, r0, #5
    d72e:	0080      	lsls	r0, r0, #2
    d730:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d734:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d738:	4770      	bx	lr

0000d73a <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    d73a:	f3ef 8110 	mrs	r1, PRIMASK
    d73e:	b672      	cpsid	i
    d740:	7802      	ldrb	r2, [r0, #0]
    d742:	2a01      	cmp	r2, #1
    d744:	d001      	beq.n	d74a <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    d746:	2201      	movs	r2, #1
    d748:	e000      	b.n	d74c <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    d74a:	2200      	movs	r2, #0
    d74c:	2301      	movs	r3, #1
    d74e:	7003      	strb	r3, [r0, #0]
    d750:	b901      	cbnz	r1, d754 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    d752:	b662      	cpsie	i
    d754:	b10a      	cbz	r2, d75a <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    d756:	2000      	movs	r0, #0
    d758:	4770      	bx	lr
    d75a:	f06f 0022 	mvn.w	r0, #34	; 0x22
    d75e:	4770      	bx	lr

0000d760 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    d760:	2100      	movs	r1, #0
    d762:	7001      	strb	r1, [r0, #0]
    d764:	4608      	mov	r0, r1
    d766:	4770      	bx	lr

0000d768 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    d768:	f3ef 8110 	mrs	r1, PRIMASK
    d76c:	b672      	cpsid	i
    d76e:	2200      	movs	r2, #0
    d770:	7002      	strb	r2, [r0, #0]
    d772:	b901      	cbnz	r1, d776 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    d774:	b662      	cpsie	i
    d776:	2000      	movs	r0, #0
    d778:	4770      	bx	lr

0000d77a <mpsl_low_priority_process>:
    d77a:	f7f7 bd11 	b.w	51a0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

0000d77e <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    d77e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d782:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d786:	280f      	cmp	r0, #15
    d788:	d001      	beq.n	d78e <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    d78a:	2000      	movs	r0, #0
    d78c:	4770      	bx	lr
    d78e:	2001      	movs	r0, #1
    d790:	4770      	bx	lr

0000d792 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    d792:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d796:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d79a:	280a      	cmp	r0, #10
    d79c:	d001      	beq.n	d7a2 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    d79e:	2000      	movs	r0, #0
    d7a0:	4770      	bx	lr
    d7a2:	2001      	movs	r0, #1
    d7a4:	4770      	bx	lr

0000d7a6 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
    d7a6:	b500      	push	{lr}
    d7a8:	f7ff fff3 	bl	d792 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    d7ac:	b120      	cbz	r0, d7b8 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
    d7ae:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d7b2:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    d7b6:	b108      	cbz	r0, d7bc <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
    d7b8:	2000      	movs	r0, #0
    d7ba:	bd00      	pop	{pc}
    d7bc:	2001      	movs	r0, #1
    d7be:	bd00      	pop	{pc}

0000d7c0 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    d7c0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d7c4:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d7c8:	280e      	cmp	r0, #14
    d7ca:	d001      	beq.n	d7d0 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    d7cc:	2000      	movs	r0, #0
    d7ce:	4770      	bx	lr
    d7d0:	2001      	movs	r0, #1
    d7d2:	4770      	bx	lr

0000d7d4 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    d7d4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d7d8:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d7dc:	2810      	cmp	r0, #16
    d7de:	d001      	beq.n	d7e4 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    d7e0:	2000      	movs	r0, #0
    d7e2:	4770      	bx	lr
    d7e4:	2001      	movs	r0, #1
    d7e6:	4770      	bx	lr

0000d7e8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    d7e8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d7ec:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d7f0:	2806      	cmp	r0, #6
    d7f2:	d003      	beq.n	d7fc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    d7f4:	1c40      	adds	r0, r0, #1
    d7f6:	d001      	beq.n	d7fc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    d7f8:	2000      	movs	r0, #0
    d7fa:	4770      	bx	lr
    d7fc:	2001      	movs	r0, #1
    d7fe:	4770      	bx	lr

0000d800 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    d800:	b500      	push	{lr}
    d802:	f7ff fff1 	bl	d7e8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    d806:	b148      	cbz	r0, d81c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    d808:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d80c:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    d810:	2806      	cmp	r0, #6
    d812:	d303      	bcc.n	d81c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    d814:	1c40      	adds	r0, r0, #1
    d816:	d001      	beq.n	d81c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    d818:	2001      	movs	r0, #1
    d81a:	bd00      	pop	{pc}
    d81c:	2000      	movs	r0, #0
    d81e:	bd00      	pop	{pc}

0000d820 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    d820:	b500      	push	{lr}
    d822:	f7ff ffe1 	bl	d7e8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    d826:	b138      	cbz	r0, d838 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    d828:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d82c:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    d830:	2806      	cmp	r0, #6
    d832:	d303      	bcc.n	d83c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    d834:	1c40      	adds	r0, r0, #1
    d836:	d001      	beq.n	d83c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    d838:	2000      	movs	r0, #0
    d83a:	bd00      	pop	{pc}
    d83c:	2001      	movs	r0, #1
    d83e:	bd00      	pop	{pc}

0000d840 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    d840:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d844:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d848:	280d      	cmp	r0, #13
    d84a:	d001      	beq.n	d850 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    d84c:	2000      	movs	r0, #0
    d84e:	4770      	bx	lr
    d850:	2001      	movs	r0, #1
    d852:	4770      	bx	lr

0000d854 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    d854:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d858:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d85c:	2808      	cmp	r0, #8
    d85e:	d001      	beq.n	d864 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    d860:	2000      	movs	r0, #0
    d862:	4770      	bx	lr
    d864:	2001      	movs	r0, #1
    d866:	4770      	bx	lr

0000d868 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    d868:	b4f0      	push	{r4, r5, r6, r7}
    d86a:	ea80 0c01 	eor.w	ip, r0, r1
    d86e:	4603      	mov	r3, r0
    d870:	f01c 0f03 	tst.w	ip, #3
    d874:	d13c      	bne.n	d8f0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    d876:	f013 0f03 	tst.w	r3, #3
    d87a:	d00b      	beq.n	d894 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
    d87c:	2a00      	cmp	r2, #0
    d87e:	bf04      	itt	eq
    d880:	bcf0      	popeq	{r4, r5, r6, r7}
    d882:	4770      	bxeq	lr
    d884:	f811 cb01 	ldrb.w	ip, [r1], #1
    d888:	f803 cb01 	strb.w	ip, [r3], #1
    d88c:	1e52      	subs	r2, r2, #1
    d88e:	f013 0f03 	tst.w	r3, #3
    d892:	d1f3      	bne.n	d87c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
    d894:	2a03      	cmp	r2, #3
    d896:	d94f      	bls.n	d938 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    d898:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    d89c:	d24c      	bcs.n	d938 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    d89e:	f1c2 0c00 	rsb	ip, r2, #0
    d8a2:	ea4f 74ec 	mov.w	r4, ip, asr #31
    d8a6:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
    d8aa:	ea4f 0cac 	mov.w	ip, ip, asr #2
    d8ae:	f1cc 0c00 	rsb	ip, ip, #0
    d8b2:	f1bc 0f00 	cmp.w	ip, #0
    d8b6:	dd1b      	ble.n	d8f0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    d8b8:	1f0d      	subs	r5, r1, #4
    d8ba:	1f1c      	subs	r4, r3, #4
    d8bc:	f01c 0f01 	tst.w	ip, #1
    d8c0:	d003      	beq.n	d8ca <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
    d8c2:	f855 6f04 	ldr.w	r6, [r5, #4]!
    d8c6:	f844 6f04 	str.w	r6, [r4, #4]!
    d8ca:	ea5f 066c 	movs.w	r6, ip, asr #1
    d8ce:	d007      	beq.n	d8e0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
    d8d0:	686f      	ldr	r7, [r5, #4]
    d8d2:	6067      	str	r7, [r4, #4]
    d8d4:	f855 7f08 	ldr.w	r7, [r5, #8]!
    d8d8:	f844 7f08 	str.w	r7, [r4, #8]!
    d8dc:	1e76      	subs	r6, r6, #1
    d8de:	d1f7      	bne.n	d8d0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
    d8e0:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    d8e4:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    d8e8:	f1cc 0c00 	rsb	ip, ip, #0
    d8ec:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    d8f0:	2a00      	cmp	r2, #0
    d8f2:	bf04      	itt	eq
    d8f4:	bcf0      	popeq	{r4, r5, r6, r7}
    d8f6:	4770      	bxeq	lr
    d8f8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    d8fc:	d226      	bcs.n	d94c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    d8fe:	2a00      	cmp	r2, #0
    d900:	bfdc      	itt	le
    d902:	bcf0      	pople	{r4, r5, r6, r7}
    d904:	4770      	bxle	lr
    d906:	1e49      	subs	r1, r1, #1
    d908:	1e5b      	subs	r3, r3, #1
    d90a:	f012 0f01 	tst.w	r2, #1
    d90e:	d003      	beq.n	d918 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
    d910:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    d914:	f803 cf01 	strb.w	ip, [r3, #1]!
    d918:	1052      	asrs	r2, r2, #1
    d91a:	bf04      	itt	eq
    d91c:	bcf0      	popeq	{r4, r5, r6, r7}
    d91e:	4770      	bxeq	lr
    d920:	f891 c001 	ldrb.w	ip, [r1, #1]
    d924:	f883 c001 	strb.w	ip, [r3, #1]
    d928:	f811 cf02 	ldrb.w	ip, [r1, #2]!
    d92c:	f803 cf02 	strb.w	ip, [r3, #2]!
    d930:	1e52      	subs	r2, r2, #1
    d932:	d1f5      	bne.n	d920 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
    d934:	bcf0      	pop	{r4, r5, r6, r7}
    d936:	4770      	bx	lr
    d938:	2a04      	cmp	r2, #4
    d93a:	d3d9      	bcc.n	d8f0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    d93c:	f851 cb04 	ldr.w	ip, [r1], #4
    d940:	1f12      	subs	r2, r2, #4
    d942:	f843 cb04 	str.w	ip, [r3], #4
    d946:	2a04      	cmp	r2, #4
    d948:	d2f8      	bcs.n	d93c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
    d94a:	e7d1      	b.n	d8f0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    d94c:	f811 cb01 	ldrb.w	ip, [r1], #1
    d950:	f803 cb01 	strb.w	ip, [r3], #1
    d954:	1e52      	subs	r2, r2, #1
    d956:	d1f9      	bne.n	d94c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    d958:	bcf0      	pop	{r4, r5, r6, r7}
    d95a:	4770      	bx	lr

0000d95c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    d95c:	b470      	push	{r4, r5, r6}
    d95e:	4603      	mov	r3, r0
    d960:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    d964:	f010 0f03 	tst.w	r0, #3
    d968:	d009      	beq.n	d97e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    d96a:	2a00      	cmp	r2, #0
    d96c:	bf04      	itt	eq
    d96e:	bc70      	popeq	{r4, r5, r6}
    d970:	4770      	bxeq	lr
    d972:	f803 cb01 	strb.w	ip, [r3], #1
    d976:	1e52      	subs	r2, r2, #1
    d978:	f013 0f03 	tst.w	r3, #3
    d97c:	d1f5      	bne.n	d96a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
    d97e:	b2c9      	uxtb	r1, r1
    d980:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    d984:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
    d988:	2a03      	cmp	r2, #3
    d98a:	d939      	bls.n	da00 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    d98c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    d990:	d236      	bcs.n	da00 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    d992:	4251      	negs	r1, r2
    d994:	17cc      	asrs	r4, r1, #31
    d996:	eb01 7194 	add.w	r1, r1, r4, lsr #30
    d99a:	1089      	asrs	r1, r1, #2
    d99c:	424e      	negs	r6, r1
    d99e:	2e00      	cmp	r6, #0
    d9a0:	dd11      	ble.n	d9c6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    d9a2:	1f19      	subs	r1, r3, #4
    d9a4:	f016 0f01 	tst.w	r6, #1
    d9a8:	bf18      	it	ne
    d9aa:	f841 5f04 	strne.w	r5, [r1, #4]!
    d9ae:	1074      	asrs	r4, r6, #1
    d9b0:	d004      	beq.n	d9bc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
    d9b2:	604d      	str	r5, [r1, #4]
    d9b4:	f841 5f08 	str.w	r5, [r1, #8]!
    d9b8:	1e64      	subs	r4, r4, #1
    d9ba:	d1fa      	bne.n	d9b2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
    d9bc:	4271      	negs	r1, r6
    d9be:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    d9c2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    d9c6:	2a00      	cmp	r2, #0
    d9c8:	bf04      	itt	eq
    d9ca:	bc70      	popeq	{r4, r5, r6}
    d9cc:	4770      	bxeq	lr
    d9ce:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    d9d2:	d21d      	bcs.n	da10 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    d9d4:	2a00      	cmp	r2, #0
    d9d6:	bfdc      	itt	le
    d9d8:	bc70      	pople	{r4, r5, r6}
    d9da:	4770      	bxle	lr
    d9dc:	1e59      	subs	r1, r3, #1
    d9de:	f012 0f01 	tst.w	r2, #1
    d9e2:	bf18      	it	ne
    d9e4:	f801 cf01 	strbne.w	ip, [r1, #1]!
    d9e8:	1052      	asrs	r2, r2, #1
    d9ea:	bf04      	itt	eq
    d9ec:	bc70      	popeq	{r4, r5, r6}
    d9ee:	4770      	bxeq	lr
    d9f0:	f881 c001 	strb.w	ip, [r1, #1]
    d9f4:	f801 cf02 	strb.w	ip, [r1, #2]!
    d9f8:	1e52      	subs	r2, r2, #1
    d9fa:	d1f9      	bne.n	d9f0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
    d9fc:	bc70      	pop	{r4, r5, r6}
    d9fe:	4770      	bx	lr
    da00:	2a04      	cmp	r2, #4
    da02:	d3e0      	bcc.n	d9c6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    da04:	1f12      	subs	r2, r2, #4
    da06:	f843 5b04 	str.w	r5, [r3], #4
    da0a:	2a04      	cmp	r2, #4
    da0c:	d2fa      	bcs.n	da04 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
    da0e:	e7da      	b.n	d9c6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    da10:	f803 cb01 	strb.w	ip, [r3], #1
    da14:	1e52      	subs	r2, r2, #1
    da16:	d1fb      	bne.n	da10 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    da18:	bc70      	pop	{r4, r5, r6}
    da1a:	4770      	bx	lr
    da1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    da20:	4770      	bx	lr
    da22:	2000      	movs	r0, #0
    da24:	4770      	bx	lr
    da26:	2000      	movs	r0, #0
    da28:	4770      	bx	lr
    da2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    da2e:	4770      	bx	lr
    da30:	4770      	bx	lr
    da32:	4770      	bx	lr
    da34:	2000      	movs	r0, #0
    da36:	4770      	bx	lr
    da38:	2100      	movs	r1, #0
    da3a:	7001      	strb	r1, [r0, #0]
    da3c:	4770      	bx	lr
    da3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    da42:	4770      	bx	lr
    da44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    da48:	4770      	bx	lr
    da4a:	2100      	movs	r1, #0
    da4c:	7001      	strb	r1, [r0, #0]
    da4e:	4770      	bx	lr
    da50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    da54:	4770      	bx	lr
    da56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    da5a:	4770      	bx	lr
    da5c:	7800      	ldrb	r0, [r0, #0]
    da5e:	2800      	cmp	r0, #0
    da60:	d001      	beq.n	da66 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x10a>
    da62:	f06f 0015 	mvn.w	r0, #21
    da66:	4770      	bx	lr
    da68:	2000      	movs	r0, #0
    da6a:	4770      	bx	lr
    da6c:	2200      	movs	r2, #0
    da6e:	f000 b800 	b.w	da72 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>

0000da72 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>:
    da72:	b570      	push	{r4, r5, r6, lr}
    da74:	4614      	mov	r4, r2
    da76:	460d      	mov	r5, r1
    da78:	1b00      	subs	r0, r0, r4
    da7a:	f06f 017f 	mvn.w	r1, #127	; 0x7f
    da7e:	4288      	cmp	r0, r1
    da80:	da01      	bge.n	da86 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x14>
    da82:	4608      	mov	r0, r1
    da84:	e002      	b.n	da8c <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
    da86:	287f      	cmp	r0, #127	; 0x7f
    da88:	dd00      	ble.n	da8c <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
    da8a:	207f      	movs	r0, #127	; 0x7f
    da8c:	b240      	sxtb	r0, r0
    da8e:	f7f3 fedd 	bl	184c <mpsl_tx_power_radio_supported_power_adjust>
    da92:	7028      	strb	r0, [r5, #0]
    da94:	706c      	strb	r4, [r5, #1]
    da96:	2100      	movs	r1, #0
    da98:	4420      	add	r0, r4
    da9a:	70a9      	strb	r1, [r5, #2]
    da9c:	b240      	sxtb	r0, r0
    da9e:	bd70      	pop	{r4, r5, r6, pc}
    daa0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    daa4:	460c      	mov	r4, r1
    daa6:	4681      	mov	r9, r0
    daa8:	7849      	ldrb	r1, [r1, #1]
    daaa:	f100 0003 	add.w	r0, r0, #3
    daae:	f88d 1000 	strb.w	r1, [sp]
    dab2:	f020 0003 	bic.w	r0, r0, #3
    dab6:	78a1      	ldrb	r1, [r4, #2]
    dab8:	0016      	movs	r6, r2
    daba:	4605      	mov	r5, r0
    dabc:	f88d 1001 	strb.w	r1, [sp, #1]
    dac0:	d000      	beq.n	dac4 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x52>
    dac2:	2000      	movs	r0, #0
    dac4:	4669      	mov	r1, sp
    dac6:	f7f7 ff4f 	bl	5968 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    daca:	4428      	add	r0, r5
    dacc:	78a1      	ldrb	r1, [r4, #2]
    dace:	4605      	mov	r5, r0
    dad0:	b131      	cbz	r1, dae0 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x6e>
    dad2:	8a63      	ldrh	r3, [r4, #18]
    dad4:	78e2      	ldrb	r2, [r4, #3]
    dad6:	b106      	cbz	r6, dada <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x68>
    dad8:	2000      	movs	r0, #0
    dada:	f7f8 f9d7 	bl	5e8c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>
    dade:	4405      	add	r5, r0
    dae0:	7820      	ldrb	r0, [r4, #0]
    dae2:	7861      	ldrb	r1, [r4, #1]
    dae4:	46b2      	mov	sl, r6
    dae6:	2600      	movs	r6, #0
    dae8:	4408      	add	r0, r1
    daea:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    daee:	4637      	mov	r7, r6
    daf0:	e008      	b.n	db04 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x92>
    daf2:	7a23      	ldrb	r3, [r4, #8]
    daf4:	79e2      	ldrb	r2, [r4, #7]
    daf6:	79a1      	ldrb	r1, [r4, #6]
    daf8:	7960      	ldrb	r0, [r4, #5]
    dafa:	f000 feff 	bl	e8fc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    dafe:	1c7f      	adds	r7, r7, #1
    db00:	4406      	add	r6, r0
    db02:	b2ff      	uxtb	r7, r7
    db04:	4547      	cmp	r7, r8
    db06:	d3f4      	bcc.n	daf2 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x80>
    db08:	1ced      	adds	r5, r5, #3
    db0a:	f025 0003 	bic.w	r0, r5, #3
    db0e:	4604      	mov	r4, r0
    db10:	f1ba 0f00 	cmp.w	sl, #0
    db14:	d000      	beq.n	db18 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0xa6>
    db16:	2000      	movs	r0, #0
    db18:	4632      	mov	r2, r6
    db1a:	4641      	mov	r1, r8
    db1c:	f7f8 f900 	bl	5d20 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    db20:	4420      	add	r0, r4
    db22:	1dc0      	adds	r0, r0, #7
    db24:	f020 0007 	bic.w	r0, r0, #7
    db28:	eba0 0009 	sub.w	r0, r0, r9
    db2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000db30 <sdc_soc_ecb_block_encrypt>:
    db30:	b530      	push	{r4, r5, lr}
    db32:	460d      	mov	r5, r1
    db34:	b08d      	sub	sp, #52	; 0x34
    db36:	4614      	mov	r4, r2
    db38:	4601      	mov	r1, r0
    db3a:	2210      	movs	r2, #16
    db3c:	4668      	mov	r0, sp
    db3e:	f7ff fe93 	bl	d868 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    db42:	2210      	movs	r2, #16
    db44:	4629      	mov	r1, r5
    db46:	a804      	add	r0, sp, #16
    db48:	f7ff fe8e 	bl	d868 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    db4c:	4668      	mov	r0, sp
    db4e:	f001 f856 	bl	ebfe <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    db52:	b118      	cbz	r0, db5c <sdc_soc_ecb_block_encrypt+0x2c>
    db54:	f06f 0015 	mvn.w	r0, #21
    db58:	b00d      	add	sp, #52	; 0x34
    db5a:	bd30      	pop	{r4, r5, pc}
    db5c:	2210      	movs	r2, #16
    db5e:	4620      	mov	r0, r4
    db60:	a908      	add	r1, sp, #32
    db62:	f7ff fe81 	bl	d868 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    db66:	2000      	movs	r0, #0
    db68:	e7f6      	b.n	db58 <sdc_soc_ecb_block_encrypt+0x28>

0000db6a <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>:
    db6a:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    db6c:	4604      	mov	r4, r0
    db6e:	1d01      	adds	r1, r0, #4
    db70:	4668      	mov	r0, sp
    db72:	f7f9 fc97 	bl	74a4 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>
    db76:	2800      	cmp	r0, #0
    db78:	d004      	beq.n	db84 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I+0x1a>
    db7a:	4669      	mov	r1, sp
    db7c:	4620      	mov	r0, r4
    db7e:	f000 f848 	bl	dc12 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
    db82:	2001      	movs	r0, #1
    db84:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000db86 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    db86:	b50e      	push	{r1, r2, r3, lr}
    db88:	4601      	mov	r1, r0
    db8a:	4668      	mov	r0, sp
    db8c:	f000 f827 	bl	dbde <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    db90:	4668      	mov	r0, sp
    db92:	f001 fce6 	bl	f562 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    db96:	bd0e      	pop	{r1, r2, r3, pc}

0000db98 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>:
    db98:	b510      	push	{r4, lr}
    db9a:	4604      	mov	r4, r0
    db9c:	4620      	mov	r0, r4
    db9e:	f7f7 fdd7 	bl	5750 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x50>
    dba2:	2800      	cmp	r0, #0
    dba4:	d006      	beq.n	dbb4 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1c>
    dba6:	78a1      	ldrb	r1, [r4, #2]
    dba8:	7820      	ldrb	r0, [r4, #0]
    dbaa:	f000 f804 	bl	dbb6 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    dbae:	2800      	cmp	r0, #0
    dbb0:	d0f4      	beq.n	db9c <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x4>
    dbb2:	2001      	movs	r0, #1
    dbb4:	bd10      	pop	{r4, pc}
    dbb6:	b570      	push	{r4, r5, r6, lr}
    dbb8:	460c      	mov	r4, r1
    dbba:	4605      	mov	r5, r0
    dbbc:	f7f7 fe3a 	bl	5834 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    dbc0:	2800      	cmp	r0, #0
    dbc2:	d002      	beq.n	dbca <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x32>
    dbc4:	2d3e      	cmp	r5, #62	; 0x3e
    dbc6:	d001      	beq.n	dbcc <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x34>
    dbc8:	2001      	movs	r0, #1
    dbca:	bd70      	pop	{r4, r5, r6, pc}
    dbcc:	2c12      	cmp	r4, #18
    dbce:	d004      	beq.n	dbda <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x42>
    dbd0:	4620      	mov	r0, r4
    dbd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    dbd6:	f7f7 be3f 	b.w	5858 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    dbda:	2000      	movs	r0, #0
    dbdc:	bd70      	pop	{r4, r5, r6, pc}

0000dbde <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    dbde:	880a      	ldrh	r2, [r1, #0]
    dbe0:	f3c2 020b 	ubfx	r2, r2, #0, #12
    dbe4:	8002      	strh	r2, [r0, #0]
    dbe6:	884a      	ldrh	r2, [r1, #2]
    dbe8:	8042      	strh	r2, [r0, #2]
    dbea:	784a      	ldrb	r2, [r1, #1]
    dbec:	0993      	lsrs	r3, r2, #6
    dbee:	2200      	movs	r2, #0
    dbf0:	7142      	strb	r2, [r0, #5]
    dbf2:	784b      	ldrb	r3, [r1, #1]
    dbf4:	f3c3 1301 	ubfx	r3, r3, #4, #2
    dbf8:	b11b      	cbz	r3, dc02 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    dbfa:	2b01      	cmp	r3, #1
    dbfc:	d005      	beq.n	dc0a <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    dbfe:	2b02      	cmp	r3, #2
    dc00:	d005      	beq.n	dc0e <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    dc02:	7102      	strb	r2, [r0, #4]
    dc04:	1d09      	adds	r1, r1, #4
    dc06:	6081      	str	r1, [r0, #8]
    dc08:	4770      	bx	lr
    dc0a:	2201      	movs	r2, #1
    dc0c:	e7f9      	b.n	dc02 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    dc0e:	2202      	movs	r2, #2
    dc10:	e7f7      	b.n	dc02 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000dc12 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    dc12:	b510      	push	{r4, lr}
    dc14:	460c      	mov	r4, r1
    dc16:	7809      	ldrb	r1, [r1, #0]
    dc18:	7001      	strb	r1, [r0, #0]
    dc1a:	7841      	ldrb	r1, [r0, #1]
    dc1c:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    dc20:	7041      	strb	r1, [r0, #1]
    dc22:	8822      	ldrh	r2, [r4, #0]
    dc24:	f3c2 2203 	ubfx	r2, r2, #8, #4
    dc28:	4311      	orrs	r1, r2
    dc2a:	7041      	strb	r1, [r0, #1]
    dc2c:	78a2      	ldrb	r2, [r4, #2]
    dc2e:	7082      	strb	r2, [r0, #2]
    dc30:	8862      	ldrh	r2, [r4, #2]
    dc32:	f001 01cf 	and.w	r1, r1, #207	; 0xcf
    dc36:	0a12      	lsrs	r2, r2, #8
    dc38:	70c2      	strb	r2, [r0, #3]
    dc3a:	7041      	strb	r1, [r0, #1]
    dc3c:	7922      	ldrb	r2, [r4, #4]
    dc3e:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    dc42:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    dc46:	7041      	strb	r1, [r0, #1]
    dc48:	7962      	ldrb	r2, [r4, #5]
    dc4a:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    dc4e:	7041      	strb	r1, [r0, #1]
    dc50:	68a1      	ldr	r1, [r4, #8]
    dc52:	1d02      	adds	r2, r0, #4
    dc54:	4291      	cmp	r1, r2
    dc56:	d006      	beq.n	dc66 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x54>
    dc58:	8862      	ldrh	r2, [r4, #2]
    dc5a:	2afb      	cmp	r2, #251	; 0xfb
    dc5c:	d300      	bcc.n	dc60 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x4e>
    dc5e:	22fb      	movs	r2, #251	; 0xfb
    dc60:	1d00      	adds	r0, r0, #4
    dc62:	f7ff fe01 	bl	d868 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    dc66:	78a0      	ldrb	r0, [r4, #2]
    dc68:	1d00      	adds	r0, r0, #4
    dc6a:	b2c0      	uxtb	r0, r0
    dc6c:	bd10      	pop	{r4, pc}

0000dc6e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    dc6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dc72:	4604      	mov	r4, r0
    dc74:	f891 c000 	ldrb.w	ip, [r1]
    dc78:	2000      	movs	r0, #0
    dc7a:	2513      	movs	r5, #19
    dc7c:	260c      	movs	r6, #12
    dc7e:	2705      	movs	r7, #5
    dc80:	223e      	movs	r2, #62	; 0x3e
    dc82:	23ff      	movs	r3, #255	; 0xff
    dc84:	f1bc 0f1b 	cmp.w	ip, #27
    dc88:	d27d      	bcs.n	dd86 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x118>
    dc8a:	e8df f00c 	tbb	[pc, ip]
    dc8e:	0e7c      	.short	0x0e7c
    dc90:	872d2725 	.word	0x872d2725
    dc94:	d0bda391 	.word	0xd0bda391
    dc98:	f2f4ddd2 	.word	0xf2f4ddd2
    dc9c:	537c7cf1 	.word	0x537c7cf1
    dca0:	edeeefff 	.word	0xedeeefff
    dca4:	e9eaebec 	.word	0xe9eaebec
    dca8:	00e8      	.short	0x00e8
    dcaa:	7026      	strb	r6, [r4, #0]
    dcac:	7908      	ldrb	r0, [r1, #4]
    dcae:	70a0      	strb	r0, [r4, #2]
    dcb0:	7948      	ldrb	r0, [r1, #5]
    dcb2:	70e0      	strb	r0, [r4, #3]
    dcb4:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    dcb8:	0a00      	lsrs	r0, r0, #8
    dcba:	7120      	strb	r0, [r4, #4]
    dcbc:	79c8      	ldrb	r0, [r1, #7]
    dcbe:	7160      	strb	r0, [r4, #5]
    dcc0:	7a08      	ldrb	r0, [r1, #8]
    dcc2:	71a0      	strb	r0, [r4, #6]
    dcc4:	8908      	ldrh	r0, [r1, #8]
    dcc6:	0a00      	lsrs	r0, r0, #8
    dcc8:	71e0      	strb	r0, [r4, #7]
    dcca:	7a88      	ldrb	r0, [r1, #10]
    dccc:	7220      	strb	r0, [r4, #8]
    dcce:	8948      	ldrh	r0, [r1, #10]
    dcd0:	0a00      	lsrs	r0, r0, #8
    dcd2:	7260      	strb	r0, [r4, #9]
    dcd4:	2008      	movs	r0, #8
    dcd6:	e174      	b.n	dfc2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    dcd8:	2010      	movs	r0, #16
    dcda:	e000      	b.n	dcde <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x70>
    dcdc:	201a      	movs	r0, #26
    dcde:	7020      	strb	r0, [r4, #0]
    dce0:	7908      	ldrb	r0, [r1, #4]
    dce2:	70a0      	strb	r0, [r4, #2]
    dce4:	2001      	movs	r0, #1
    dce6:	e16c      	b.n	dfc2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    dce8:	7022      	strb	r2, [r4, #0]
    dcea:	2001      	movs	r0, #1
    dcec:	70a0      	strb	r0, [r4, #2]
    dcee:	7908      	ldrb	r0, [r1, #4]
    dcf0:	70e0      	strb	r0, [r4, #3]
    dcf2:	7988      	ldrb	r0, [r1, #6]
    dcf4:	7120      	strb	r0, [r4, #4]
    dcf6:	88c8      	ldrh	r0, [r1, #6]
    dcf8:	0a00      	lsrs	r0, r0, #8
    dcfa:	7160      	strb	r0, [r4, #5]
    dcfc:	7a08      	ldrb	r0, [r1, #8]
    dcfe:	71a0      	strb	r0, [r4, #6]
    dd00:	7a48      	ldrb	r0, [r1, #9]
    dd02:	71e0      	strb	r0, [r4, #7]
    dd04:	f8d1 000a 	ldr.w	r0, [r1, #10]
    dd08:	60a0      	str	r0, [r4, #8]
    dd0a:	89c8      	ldrh	r0, [r1, #14]
    dd0c:	81a0      	strh	r0, [r4, #12]
    dd0e:	7c08      	ldrb	r0, [r1, #16]
    dd10:	73a0      	strb	r0, [r4, #14]
    dd12:	8a08      	ldrh	r0, [r1, #16]
    dd14:	0a00      	lsrs	r0, r0, #8
    dd16:	73e0      	strb	r0, [r4, #15]
    dd18:	7c88      	ldrb	r0, [r1, #18]
    dd1a:	7420      	strb	r0, [r4, #16]
    dd1c:	8a48      	ldrh	r0, [r1, #18]
    dd1e:	0a00      	lsrs	r0, r0, #8
    dd20:	7460      	strb	r0, [r4, #17]
    dd22:	7d08      	ldrb	r0, [r1, #20]
    dd24:	74a0      	strb	r0, [r4, #18]
    dd26:	8a88      	ldrh	r0, [r1, #20]
    dd28:	0a00      	lsrs	r0, r0, #8
    dd2a:	74e0      	strb	r0, [r4, #19]
    dd2c:	7d88      	ldrb	r0, [r1, #22]
    dd2e:	7520      	strb	r0, [r4, #20]
    dd30:	4628      	mov	r0, r5
    dd32:	e146      	b.n	dfc2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    dd34:	7022      	strb	r2, [r4, #0]
    dd36:	200a      	movs	r0, #10
    dd38:	70a0      	strb	r0, [r4, #2]
    dd3a:	f811 0f04 	ldrb.w	r0, [r1, #4]!
    dd3e:	70e0      	strb	r0, [r4, #3]
    dd40:	7888      	ldrb	r0, [r1, #2]
    dd42:	7120      	strb	r0, [r4, #4]
    dd44:	8848      	ldrh	r0, [r1, #2]
    dd46:	0a00      	lsrs	r0, r0, #8
    dd48:	7160      	strb	r0, [r4, #5]
    dd4a:	7908      	ldrb	r0, [r1, #4]
    dd4c:	71a0      	strb	r0, [r4, #6]
    dd4e:	7948      	ldrb	r0, [r1, #5]
    dd50:	71e0      	strb	r0, [r4, #7]
    dd52:	f8d1 0006 	ldr.w	r0, [r1, #6]
    dd56:	60a0      	str	r0, [r4, #8]
    dd58:	8948      	ldrh	r0, [r1, #10]
    dd5a:	81a0      	strh	r0, [r4, #12]
    dd5c:	68c8      	ldr	r0, [r1, #12]
    dd5e:	f8c4 000e 	str.w	r0, [r4, #14]
    dd62:	8a08      	ldrh	r0, [r1, #16]
    dd64:	8260      	strh	r0, [r4, #18]
    dd66:	f8d1 0012 	ldr.w	r0, [r1, #18]
    dd6a:	6160      	str	r0, [r4, #20]
    dd6c:	8ac8      	ldrh	r0, [r1, #22]
    dd6e:	8320      	strh	r0, [r4, #24]
    dd70:	7e08      	ldrb	r0, [r1, #24]
    dd72:	76a0      	strb	r0, [r4, #26]
    dd74:	8b08      	ldrh	r0, [r1, #24]
    dd76:	0a00      	lsrs	r0, r0, #8
    dd78:	76e0      	strb	r0, [r4, #27]
    dd7a:	7e88      	ldrb	r0, [r1, #26]
    dd7c:	7720      	strb	r0, [r4, #28]
    dd7e:	8b48      	ldrh	r0, [r1, #26]
    dd80:	0a00      	lsrs	r0, r0, #8
    dd82:	7760      	strb	r0, [r4, #29]
    dd84:	e000      	b.n	dd88 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x11a>
    dd86:	e097      	b.n	deb8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24a>
    dd88:	7f08      	ldrb	r0, [r1, #28]
    dd8a:	77a0      	strb	r0, [r4, #30]
    dd8c:	8b88      	ldrh	r0, [r1, #28]
    dd8e:	0a00      	lsrs	r0, r0, #8
    dd90:	77e0      	strb	r0, [r4, #31]
    dd92:	7f88      	ldrb	r0, [r1, #30]
    dd94:	f884 0020 	strb.w	r0, [r4, #32]
    dd98:	201f      	movs	r0, #31
    dd9a:	e112      	b.n	dfc2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    dd9c:	7022      	strb	r2, [r4, #0]
    dd9e:	2014      	movs	r0, #20
    dda0:	70a0      	strb	r0, [r4, #2]
    dda2:	7908      	ldrb	r0, [r1, #4]
    dda4:	70e0      	strb	r0, [r4, #3]
    dda6:	8888      	ldrh	r0, [r1, #4]
    dda8:	0a00      	lsrs	r0, r0, #8
    ddaa:	7120      	strb	r0, [r4, #4]
    ddac:	7988      	ldrb	r0, [r1, #6]
    ddae:	e0a6      	b.n	defe <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x290>
    ddb0:	7022      	strb	r2, [r4, #0]
    ddb2:	2004      	movs	r0, #4
    ddb4:	70a0      	strb	r0, [r4, #2]
    ddb6:	7908      	ldrb	r0, [r1, #4]
    ddb8:	70e0      	strb	r0, [r4, #3]
    ddba:	7988      	ldrb	r0, [r1, #6]
    ddbc:	7120      	strb	r0, [r4, #4]
    ddbe:	88c8      	ldrh	r0, [r1, #6]
    ddc0:	0a00      	lsrs	r0, r0, #8
    ddc2:	7160      	strb	r0, [r4, #5]
    ddc4:	6888      	ldr	r0, [r1, #8]
    ddc6:	f8c4 0006 	str.w	r0, [r4, #6]
    ddca:	68c8      	ldr	r0, [r1, #12]
    ddcc:	f8c4 000a 	str.w	r0, [r4, #10]
    ddd0:	200c      	movs	r0, #12
    ddd2:	e0f6      	b.n	dfc2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    ddd4:	7022      	strb	r2, [r4, #0]
    ddd6:	2003      	movs	r0, #3
    ddd8:	70a0      	strb	r0, [r4, #2]
    ddda:	7908      	ldrb	r0, [r1, #4]
    dddc:	70e0      	strb	r0, [r4, #3]
    ddde:	7988      	ldrb	r0, [r1, #6]
    dde0:	7120      	strb	r0, [r4, #4]
    dde2:	88c8      	ldrh	r0, [r1, #6]
    dde4:	0a00      	lsrs	r0, r0, #8
    dde6:	7160      	strb	r0, [r4, #5]
    dde8:	7a08      	ldrb	r0, [r1, #8]
    ddea:	71a0      	strb	r0, [r4, #6]
    ddec:	8908      	ldrh	r0, [r1, #8]
    ddee:	0a00      	lsrs	r0, r0, #8
    ddf0:	71e0      	strb	r0, [r4, #7]
    ddf2:	7a88      	ldrb	r0, [r1, #10]
    ddf4:	7220      	strb	r0, [r4, #8]
    ddf6:	8948      	ldrh	r0, [r1, #10]
    ddf8:	0a00      	lsrs	r0, r0, #8
    ddfa:	7260      	strb	r0, [r4, #9]
    ddfc:	7b08      	ldrb	r0, [r1, #12]
    ddfe:	72a0      	strb	r0, [r4, #10]
    de00:	8988      	ldrh	r0, [r1, #12]
    de02:	0a00      	lsrs	r0, r0, #8
    de04:	72e0      	strb	r0, [r4, #11]
    de06:	e0b6      	b.n	df76 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x308>
    de08:	7022      	strb	r2, [r4, #0]
    de0a:	70a7      	strb	r7, [r4, #2]
    de0c:	7908      	ldrb	r0, [r1, #4]
    de0e:	70e0      	strb	r0, [r4, #3]
    de10:	8888      	ldrh	r0, [r1, #4]
    de12:	0a00      	lsrs	r0, r0, #8
    de14:	7120      	strb	r0, [r4, #4]
    de16:	f8d1 0006 	ldr.w	r0, [r1, #6]
    de1a:	f8c4 0005 	str.w	r0, [r4, #5]
    de1e:	f8d1 000a 	ldr.w	r0, [r1, #10]
    de22:	f8c4 0009 	str.w	r0, [r4, #9]
    de26:	89c8      	ldrh	r0, [r1, #14]
    de28:	f8a4 000d 	strh.w	r0, [r4, #13]
    de2c:	e0c8      	b.n	dfc0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x352>
    de2e:	2011      	movs	r0, #17
    de30:	e045      	b.n	debe <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x250>
    de32:	7027      	strb	r7, [r4, #0]
    de34:	7908      	ldrb	r0, [r1, #4]
    de36:	70a0      	strb	r0, [r4, #2]
    de38:	7948      	ldrb	r0, [r1, #5]
    de3a:	70e0      	strb	r0, [r4, #3]
    de3c:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    de40:	0a00      	lsrs	r0, r0, #8
    de42:	7120      	strb	r0, [r4, #4]
    de44:	79c8      	ldrb	r0, [r1, #7]
    de46:	e05a      	b.n	defe <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x290>
    de48:	2008      	movs	r0, #8
    de4a:	7020      	strb	r0, [r4, #0]
    de4c:	7908      	ldrb	r0, [r1, #4]
    de4e:	70a0      	strb	r0, [r4, #2]
    de50:	7988      	ldrb	r0, [r1, #6]
    de52:	70e0      	strb	r0, [r4, #3]
    de54:	88c8      	ldrh	r0, [r1, #6]
    de56:	0a00      	lsrs	r0, r0, #8
    de58:	7120      	strb	r0, [r4, #4]
    de5a:	7a08      	ldrb	r0, [r1, #8]
    de5c:	e04f      	b.n	defe <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x290>
    de5e:	e09a      	b.n	df96 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    de60:	e06e      	b.n	df40 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2d2>
    de62:	e04f      	b.n	df04 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x296>
    de64:	e07a      	b.n	df5c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ee>
    de66:	e088      	b.n	df7a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x30c>
    de68:	e041      	b.n	deee <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x280>
    de6a:	e030      	b.n	dece <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x260>
    de6c:	e011      	b.n	de92 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x224>
    de6e:	e00d      	b.n	de8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x21e>
    de70:	e024      	b.n	debc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24e>
    de72:	e01b      	b.n	deac <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x23e>
    de74:	e7ff      	b.n	de76 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x208>
    de76:	2030      	movs	r0, #48	; 0x30
    de78:	7020      	strb	r0, [r4, #0]
    de7a:	7908      	ldrb	r0, [r1, #4]
    de7c:	70a0      	strb	r0, [r4, #2]
    de7e:	7988      	ldrb	r0, [r1, #6]
    de80:	70e0      	strb	r0, [r4, #3]
    de82:	88c8      	ldrh	r0, [r1, #6]
    de84:	0a00      	lsrs	r0, r0, #8
    de86:	7120      	strb	r0, [r4, #4]
    de88:	2003      	movs	r0, #3
    de8a:	e09a      	b.n	dfc2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    de8c:	7022      	strb	r2, [r4, #0]
    de8e:	2007      	movs	r0, #7
    de90:	e03a      	b.n	df08 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x29a>
    de92:	7022      	strb	r2, [r4, #0]
    de94:	70a6      	strb	r6, [r4, #2]
    de96:	7908      	ldrb	r0, [r1, #4]
    de98:	70e0      	strb	r0, [r4, #3]
    de9a:	7988      	ldrb	r0, [r1, #6]
    de9c:	7120      	strb	r0, [r4, #4]
    de9e:	88c8      	ldrh	r0, [r1, #6]
    dea0:	0a00      	lsrs	r0, r0, #8
    dea2:	7160      	strb	r0, [r4, #5]
    dea4:	7a08      	ldrb	r0, [r1, #8]
    dea6:	71a0      	strb	r0, [r4, #6]
    dea8:	7a48      	ldrb	r0, [r1, #9]
    deaa:	e01d      	b.n	dee8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x27a>
    deac:	4620      	mov	r0, r4
    deae:	1d09      	adds	r1, r1, #4
    deb0:	f7f7 fc92 	bl	57d8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>
    deb4:	2800      	cmp	r0, #0
    deb6:	d109      	bne.n	decc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x25e>
    deb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    debc:	2057      	movs	r0, #87	; 0x57
    debe:	7020      	strb	r0, [r4, #0]
    dec0:	7908      	ldrb	r0, [r1, #4]
    dec2:	70a0      	strb	r0, [r4, #2]
    dec4:	8888      	ldrh	r0, [r1, #4]
    dec6:	0a00      	lsrs	r0, r0, #8
    dec8:	70e0      	strb	r0, [r4, #3]
    deca:	2002      	movs	r0, #2
    decc:	e079      	b.n	dfc2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    dece:	7022      	strb	r2, [r4, #0]
    ded0:	2012      	movs	r0, #18
    ded2:	70a0      	strb	r0, [r4, #2]
    ded4:	7908      	ldrb	r0, [r1, #4]
    ded6:	70e0      	strb	r0, [r4, #3]
    ded8:	7948      	ldrb	r0, [r1, #5]
    deda:	7120      	strb	r0, [r4, #4]
    dedc:	7988      	ldrb	r0, [r1, #6]
    dede:	7160      	strb	r0, [r4, #5]
    dee0:	88c8      	ldrh	r0, [r1, #6]
    dee2:	0a00      	lsrs	r0, r0, #8
    dee4:	71a0      	strb	r0, [r4, #6]
    dee6:	7a08      	ldrb	r0, [r1, #8]
    dee8:	71e0      	strb	r0, [r4, #7]
    deea:	2006      	movs	r0, #6
    deec:	e069      	b.n	dfc2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    deee:	7023      	strb	r3, [r4, #0]
    def0:	20a1      	movs	r0, #161	; 0xa1
    def2:	70a0      	strb	r0, [r4, #2]
    def4:	7908      	ldrb	r0, [r1, #4]
    def6:	70e0      	strb	r0, [r4, #3]
    def8:	7948      	ldrb	r0, [r1, #5]
    defa:	7120      	strb	r0, [r4, #4]
    defc:	2000      	movs	r0, #0
    defe:	7160      	strb	r0, [r4, #5]
    df00:	2004      	movs	r0, #4
    df02:	e05e      	b.n	dfc2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    df04:	7023      	strb	r3, [r4, #0]
    df06:	20a2      	movs	r0, #162	; 0xa2
    df08:	70a0      	strb	r0, [r4, #2]
    df0a:	7908      	ldrb	r0, [r1, #4]
    df0c:	70e0      	strb	r0, [r4, #3]
    df0e:	8888      	ldrh	r0, [r1, #4]
    df10:	0a00      	lsrs	r0, r0, #8
    df12:	7120      	strb	r0, [r4, #4]
    df14:	7988      	ldrb	r0, [r1, #6]
    df16:	7160      	strb	r0, [r4, #5]
    df18:	88c8      	ldrh	r0, [r1, #6]
    df1a:	0a00      	lsrs	r0, r0, #8
    df1c:	71a0      	strb	r0, [r4, #6]
    df1e:	7a08      	ldrb	r0, [r1, #8]
    df20:	71e0      	strb	r0, [r4, #7]
    df22:	8908      	ldrh	r0, [r1, #8]
    df24:	0a00      	lsrs	r0, r0, #8
    df26:	7220      	strb	r0, [r4, #8]
    df28:	7a88      	ldrb	r0, [r1, #10]
    df2a:	7260      	strb	r0, [r4, #9]
    df2c:	8948      	ldrh	r0, [r1, #10]
    df2e:	0a00      	lsrs	r0, r0, #8
    df30:	72a0      	strb	r0, [r4, #10]
    df32:	7b08      	ldrb	r0, [r1, #12]
    df34:	72e0      	strb	r0, [r4, #11]
    df36:	8988      	ldrh	r0, [r1, #12]
    df38:	0a00      	lsrs	r0, r0, #8
    df3a:	7320      	strb	r0, [r4, #12]
    df3c:	200b      	movs	r0, #11
    df3e:	e040      	b.n	dfc2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    df40:	7023      	strb	r3, [r4, #0]
    df42:	20a3      	movs	r0, #163	; 0xa3
    df44:	70a0      	strb	r0, [r4, #2]
    df46:	7908      	ldrb	r0, [r1, #4]
    df48:	70e0      	strb	r0, [r4, #3]
    df4a:	8888      	ldrh	r0, [r1, #4]
    df4c:	0a00      	lsrs	r0, r0, #8
    df4e:	7120      	strb	r0, [r4, #4]
    df50:	7988      	ldrb	r0, [r1, #6]
    df52:	7160      	strb	r0, [r4, #5]
    df54:	79c8      	ldrb	r0, [r1, #7]
    df56:	71a0      	strb	r0, [r4, #6]
    df58:	2005      	movs	r0, #5
    df5a:	e032      	b.n	dfc2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    df5c:	7022      	strb	r2, [r4, #0]
    df5e:	70a5      	strb	r5, [r4, #2]
    df60:	7908      	ldrb	r0, [r1, #4]
    df62:	70e0      	strb	r0, [r4, #3]
    df64:	7948      	ldrb	r0, [r1, #5]
    df66:	7120      	strb	r0, [r4, #4]
    df68:	f8d1 0006 	ldr.w	r0, [r1, #6]
    df6c:	f8c4 0005 	str.w	r0, [r4, #5]
    df70:	8948      	ldrh	r0, [r1, #10]
    df72:	f8a4 0009 	strh.w	r0, [r4, #9]
    df76:	200a      	movs	r0, #10
    df78:	e023      	b.n	dfc2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    df7a:	7023      	strb	r3, [r4, #0]
    df7c:	20a4      	movs	r0, #164	; 0xa4
    df7e:	70a0      	strb	r0, [r4, #2]
    df80:	7908      	ldrb	r0, [r1, #4]
    df82:	70e0      	strb	r0, [r4, #3]
    df84:	8888      	ldrh	r0, [r1, #4]
    df86:	0a00      	lsrs	r0, r0, #8
    df88:	7120      	strb	r0, [r4, #4]
    df8a:	7988      	ldrb	r0, [r1, #6]
    df8c:	7160      	strb	r0, [r4, #5]
    df8e:	79c8      	ldrb	r0, [r1, #7]
    df90:	71a0      	strb	r0, [r4, #6]
    df92:	2007      	movs	r0, #7
    df94:	e015      	b.n	dfc2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    df96:	7023      	strb	r3, [r4, #0]
    df98:	2080      	movs	r0, #128	; 0x80
    df9a:	70a0      	strb	r0, [r4, #2]
    df9c:	888a      	ldrh	r2, [r1, #4]
    df9e:	f8a4 2003 	strh.w	r2, [r4, #3]
    dfa2:	88ca      	ldrh	r2, [r1, #6]
    dfa4:	f8a4 2005 	strh.w	r2, [r4, #5]
    dfa8:	7a0a      	ldrb	r2, [r1, #8]
    dfaa:	71e2      	strb	r2, [r4, #7]
    dfac:	894a      	ldrh	r2, [r1, #10]
    dfae:	8122      	strh	r2, [r4, #8]
    dfb0:	898a      	ldrh	r2, [r1, #12]
    dfb2:	8162      	strh	r2, [r4, #10]
    dfb4:	89ca      	ldrh	r2, [r1, #14]
    dfb6:	81a2      	strh	r2, [r4, #12]
    dfb8:	7c09      	ldrb	r1, [r1, #16]
    dfba:	f001 0101 	and.w	r1, r1, #1
    dfbe:	73a1      	strb	r1, [r4, #14]
    dfc0:	200d      	movs	r0, #13
    dfc2:	7060      	strb	r0, [r4, #1]
    dfc4:	1c80      	adds	r0, r0, #2
    dfc6:	e777      	b.n	deb8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24a>

0000dfc8 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>:
    dfc8:	223e      	movs	r2, #62	; 0x3e
    dfca:	7002      	strb	r2, [r0, #0]
    dfcc:	2201      	movs	r2, #1
    dfce:	7082      	strb	r2, [r0, #2]
    dfd0:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    dfd4:	70c2      	strb	r2, [r0, #3]
    dfd6:	788a      	ldrb	r2, [r1, #2]
    dfd8:	7102      	strb	r2, [r0, #4]
    dfda:	884a      	ldrh	r2, [r1, #2]
    dfdc:	0a12      	lsrs	r2, r2, #8
    dfde:	7142      	strb	r2, [r0, #5]
    dfe0:	790a      	ldrb	r2, [r1, #4]
    dfe2:	7182      	strb	r2, [r0, #6]
    dfe4:	794a      	ldrb	r2, [r1, #5]
    dfe6:	71c2      	strb	r2, [r0, #7]
    dfe8:	f8d1 2006 	ldr.w	r2, [r1, #6]
    dfec:	6082      	str	r2, [r0, #8]
    dfee:	894a      	ldrh	r2, [r1, #10]
    dff0:	8182      	strh	r2, [r0, #12]
    dff2:	7e0a      	ldrb	r2, [r1, #24]
    dff4:	7382      	strb	r2, [r0, #14]
    dff6:	8b0a      	ldrh	r2, [r1, #24]
    dff8:	0a12      	lsrs	r2, r2, #8
    dffa:	73c2      	strb	r2, [r0, #15]
    dffc:	7e8a      	ldrb	r2, [r1, #26]
    dffe:	7402      	strb	r2, [r0, #16]
    e000:	8b4a      	ldrh	r2, [r1, #26]
    e002:	0a12      	lsrs	r2, r2, #8
    e004:	7442      	strb	r2, [r0, #17]
    e006:	7f0a      	ldrb	r2, [r1, #28]
    e008:	7482      	strb	r2, [r0, #18]
    e00a:	8b8a      	ldrh	r2, [r1, #28]
    e00c:	0a12      	lsrs	r2, r2, #8
    e00e:	74c2      	strb	r2, [r0, #19]
    e010:	7f89      	ldrb	r1, [r1, #30]
    e012:	7501      	strb	r1, [r0, #20]
    e014:	2113      	movs	r1, #19
    e016:	7041      	strb	r1, [r0, #1]
    e018:	4608      	mov	r0, r1
    e01a:	4770      	bx	lr
    e01c:	094a      	lsrs	r2, r1, #5
    e01e:	f001 011f 	and.w	r1, r1, #31
    e022:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
    e026:	40c8      	lsrs	r0, r1
    e028:	f000 0001 	and.w	r0, r0, #1
    e02c:	4770      	bx	lr

0000e02e <sdc_hci_data_get>:
    e02e:	b510      	push	{r4, lr}
    e030:	b120      	cbz	r0, e03c <sdc_hci_data_get+0xe>
    e032:	f7ff fd9a 	bl	db6a <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>
    e036:	b120      	cbz	r0, e042 <sdc_hci_data_get+0x14>
    e038:	2000      	movs	r0, #0
    e03a:	bd10      	pop	{r4, pc}
    e03c:	f06f 0015 	mvn.w	r0, #21
    e040:	bd10      	pop	{r4, pc}
    e042:	f06f 0022 	mvn.w	r0, #34	; 0x22
    e046:	bd10      	pop	{r4, pc}

0000e048 <sdc_hci_data_put>:
    e048:	b510      	push	{r4, lr}
    e04a:	f06f 0415 	mvn.w	r4, #21
    e04e:	b120      	cbz	r0, e05a <sdc_hci_data_put+0x12>
    e050:	f7ff fd99 	bl	db86 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    e054:	b108      	cbz	r0, e05a <sdc_hci_data_put+0x12>
    e056:	2000      	movs	r0, #0
    e058:	bd10      	pop	{r4, pc}
    e05a:	4620      	mov	r0, r4
    e05c:	bd10      	pop	{r4, pc}

0000e05e <sdc_hci_evt_get>:
    e05e:	b510      	push	{r4, lr}
    e060:	b120      	cbz	r0, e06c <sdc_hci_evt_get+0xe>
    e062:	f7ff fd99 	bl	db98 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>
    e066:	b120      	cbz	r0, e072 <sdc_hci_evt_get+0x14>
    e068:	2000      	movs	r0, #0
    e06a:	bd10      	pop	{r4, pc}
    e06c:	f06f 0015 	mvn.w	r0, #21
    e070:	bd10      	pop	{r4, pc}
    e072:	f06f 0022 	mvn.w	r0, #34	; 0x22
    e076:	bd10      	pop	{r4, pc}

0000e078 <sdc_hci_get>:
    e078:	b118      	cbz	r0, e082 <sdc_hci_get+0xa>
    e07a:	b111      	cbz	r1, e082 <sdc_hci_get+0xa>
    e07c:	f06f 0022 	mvn.w	r0, #34	; 0x22
    e080:	4770      	bx	lr
    e082:	f06f 0015 	mvn.w	r0, #21
    e086:	4770      	bx	lr

0000e088 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    e088:	f002 bf30 	b.w	10eec <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000e08c <sdc_hci_cmd_cb_read_transmit_power_level>:
    e08c:	f002 bf7e 	b.w	10f8c <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000e090 <sdc_hci_cmd_cb_set_event_mask>:
    e090:	b510      	push	{r4, lr}
    e092:	f7f7 fbf1 	bl	5878 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    e096:	2000      	movs	r0, #0
    e098:	bd10      	pop	{r4, pc}

0000e09a <sdc_hci_cmd_cb_set_event_mask_page_2>:
    e09a:	b510      	push	{r4, lr}
    e09c:	f7f7 fbfc 	bl	5898 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    e0a0:	2000      	movs	r0, #0
    e0a2:	bd10      	pop	{r4, pc}

0000e0a4 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    e0a4:	f002 bf8e 	b.w	10fc4 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000e0a8 <sdc_hci_cmd_vs_conn_event_extend>:
    e0a8:	b508      	push	{r3, lr}
    e0aa:	7800      	ldrb	r0, [r0, #0]
    e0ac:	f88d 0000 	strb.w	r0, [sp]
    e0b0:	4668      	mov	r0, sp
    e0b2:	f002 fe3c 	bl	10d2e <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    e0b6:	bd08      	pop	{r3, pc}

0000e0b8 <sdc_hci_cmd_vs_conn_update>:
    e0b8:	2001      	movs	r0, #1
    e0ba:	4770      	bx	lr

0000e0bc <sdc_hci_cmd_vs_event_length_set>:
    e0bc:	f7fd b9f8 	b.w	b4b0 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000e0c0 <sdc_hci_cmd_vs_llpm_mode_set>:
    e0c0:	2001      	movs	r0, #1
    e0c2:	4770      	bx	lr

0000e0c4 <sdc_hci_cmd_vs_peripheral_latency_mode_set>:
    e0c4:	7881      	ldrb	r1, [r0, #2]
    e0c6:	8800      	ldrh	r0, [r0, #0]
    e0c8:	f002 bdf9 	b.w	10cbe <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY>

0000e0cc <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    e0cc:	7800      	ldrb	r0, [r0, #0]
    e0ce:	b100      	cbz	r0, e0d2 <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    e0d0:	2001      	movs	r0, #1
    e0d2:	f002 bdef 	b.w	10cb4 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000e0d6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    e0d6:	b570      	push	{r4, r5, r6, lr}
    e0d8:	4605      	mov	r5, r0
    e0da:	2210      	movs	r2, #16
    e0dc:	2100      	movs	r1, #0
    e0de:	f7ff fc3d 	bl	d95c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e0e2:	2210      	movs	r2, #16
    e0e4:	2100      	movs	r1, #0
    e0e6:	f105 0010 	add.w	r0, r5, #16
    e0ea:	f7ff fc37 	bl	d95c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e0ee:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    e0f2:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    e0f6:	1c40      	adds	r0, r0, #1
    e0f8:	d10b      	bne.n	e112 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    e0fa:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    e0fe:	1c40      	adds	r0, r0, #1
    e100:	d107      	bne.n	e112 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    e102:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    e106:	1c40      	adds	r0, r0, #1
    e108:	d103      	bne.n	e112 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    e10a:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    e10e:	1c40      	adds	r0, r0, #1
    e110:	d00b      	beq.n	e12a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
    e112:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    e116:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    e11a:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    e11e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    e122:	612a      	str	r2, [r5, #16]
    e124:	6168      	str	r0, [r5, #20]
    e126:	61a9      	str	r1, [r5, #24]
    e128:	61eb      	str	r3, [r5, #28]
    e12a:	2000      	movs	r0, #0
    e12c:	f7f8 f8fa 	bl	6324 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    e130:	b918      	cbnz	r0, e13a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
    e132:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    e136:	07c0      	lsls	r0, r0, #31
    e138:	d118      	bne.n	e16c <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    e13a:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    e13e:	1c40      	adds	r0, r0, #1
    e140:	d10b      	bne.n	e15a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    e142:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    e146:	1c40      	adds	r0, r0, #1
    e148:	d107      	bne.n	e15a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    e14a:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    e14e:	1c40      	adds	r0, r0, #1
    e150:	d103      	bne.n	e15a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    e152:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    e156:	1c40      	adds	r0, r0, #1
    e158:	d008      	beq.n	e16c <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    e15a:	f854 0f90 	ldr.w	r0, [r4, #144]!
    e15e:	6861      	ldr	r1, [r4, #4]
    e160:	68a2      	ldr	r2, [r4, #8]
    e162:	68e3      	ldr	r3, [r4, #12]
    e164:	6028      	str	r0, [r5, #0]
    e166:	6069      	str	r1, [r5, #4]
    e168:	60aa      	str	r2, [r5, #8]
    e16a:	60eb      	str	r3, [r5, #12]
    e16c:	2000      	movs	r0, #0
    e16e:	bd70      	pop	{r4, r5, r6, pc}

0000e170 <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    e170:	b538      	push	{r3, r4, r5, lr}
    e172:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    e176:	4604      	mov	r4, r0
    e178:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    e17c:	1c40      	adds	r0, r0, #1
    e17e:	d105      	bne.n	e18c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    e180:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    e184:	43c0      	mvns	r0, r0
    e186:	0400      	lsls	r0, r0, #16
    e188:	0c00      	lsrs	r0, r0, #16
    e18a:	d03e      	beq.n	e20a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    e18c:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    e190:	07c0      	lsls	r0, r0, #31
    e192:	d03a      	beq.n	e20a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    e194:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    e198:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
    e19c:	f8ad 1000 	strh.w	r1, [sp]
    e1a0:	f8c4 0001 	str.w	r0, [r4, #1]
    e1a4:	f8bd 0000 	ldrh.w	r0, [sp]
    e1a8:	f8a4 0005 	strh.w	r0, [r4, #5]
    e1ac:	79a0      	ldrb	r0, [r4, #6]
    e1ae:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    e1b2:	71a0      	strb	r0, [r4, #6]
    e1b4:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    e1b8:	1c40      	adds	r0, r0, #1
    e1ba:	d00f      	beq.n	e1dc <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    e1bc:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    e1c0:	1c40      	adds	r0, r0, #1
    e1c2:	d00b      	beq.n	e1dc <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    e1c4:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    e1c8:	1c40      	adds	r0, r0, #1
    e1ca:	d007      	beq.n	e1dc <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    e1cc:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    e1d0:	1c40      	adds	r0, r0, #1
    e1d2:	d003      	beq.n	e1dc <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    e1d4:	2000      	movs	r0, #0
    e1d6:	f7f8 f8a5 	bl	6324 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    e1da:	b140      	cbz	r0, e1ee <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x7e>
    e1dc:	2210      	movs	r2, #16
    e1de:	2100      	movs	r1, #0
    e1e0:	1de0      	adds	r0, r4, #7
    e1e2:	f7ff fbbb 	bl	d95c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e1e6:	2001      	movs	r0, #1
    e1e8:	7020      	strb	r0, [r4, #0]
    e1ea:	2000      	movs	r0, #0
    e1ec:	bd38      	pop	{r3, r4, r5, pc}
    e1ee:	f855 2f90 	ldr.w	r2, [r5, #144]!
    e1f2:	6869      	ldr	r1, [r5, #4]
    e1f4:	68a8      	ldr	r0, [r5, #8]
    e1f6:	68eb      	ldr	r3, [r5, #12]
    e1f8:	f8c4 2007 	str.w	r2, [r4, #7]
    e1fc:	f8c4 100b 	str.w	r1, [r4, #11]
    e200:	f8c4 000f 	str.w	r0, [r4, #15]
    e204:	f8c4 3013 	str.w	r3, [r4, #19]
    e208:	e7ed      	b.n	e1e6 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
    e20a:	2000      	movs	r0, #0
    e20c:	e7ec      	b.n	e1e8 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>

0000e20e <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    e20e:	f002 bd80 	b.w	10d12 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000e212 <sdc_hci_cmd_ip_read_bd_addr>:
    e212:	f002 be7c 	b.w	10f0e <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000e216 <sdc_hci_cmd_ip_read_local_version_information>:
    e216:	f7fd b959 	b.w	b4cc <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000e21a <sdc_hci_cmd_le_add_device_to_filter_accept_list>:
    e21a:	f002 bb3e 	b.w	1089a <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000e21e <sdc_hci_cmd_le_clear_filter_accept_list>:
    e21e:	f002 bb53 	b.w	108c8 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000e222 <sdc_hci_cmd_le_encrypt>:
    e222:	f002 bb5b 	b.w	108dc <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000e226 <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
    e226:	8802      	ldrh	r2, [r0, #0]
    e228:	800a      	strh	r2, [r1, #0]
    e22a:	f002 bb60 	b.w	108ee <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

0000e22e <sdc_hci_cmd_le_long_term_key_request_reply>:
    e22e:	8802      	ldrh	r2, [r0, #0]
    e230:	800a      	strh	r2, [r1, #0]
    e232:	f002 bb75 	b.w	10920 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>

0000e236 <sdc_hci_cmd_le_rand>:
    e236:	f002 bb9d 	b.w	10974 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000e23a <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
    e23a:	f002 bba1 	b.w	10980 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

0000e23e <sdc_hci_cmd_le_read_buffer_size>:
    e23e:	f7fd b83d 	b.w	b2bc <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000e242 <sdc_hci_cmd_le_read_channel_map>:
    e242:	f7fd b845 	b.w	b2d0 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000e246 <sdc_hci_cmd_le_read_filter_accept_list_size>:
    e246:	f002 bbd2 	b.w	109ee <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000e24a <sdc_hci_cmd_le_read_max_data_length>:
    e24a:	f002 bba2 	b.w	10992 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000e24e <sdc_hci_cmd_le_read_phy>:
    e24e:	f7fd b867 	b.w	b320 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000e252 <sdc_hci_cmd_le_read_remote_features>:
    e252:	f002 bba7 	b.w	109a4 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000e256 <sdc_hci_cmd_le_read_suggested_default_data_length>:
    e256:	f7fd b889 	b.w	b36c <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000e25a <sdc_hci_cmd_le_read_transmit_power>:
    e25a:	f002 bbbf 	b.w	109dc <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000e25e <sdc_hci_cmd_le_remove_device_from_filter_accept_list>:
    e25e:	f002 bbca 	b.w	109f6 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000e262 <sdc_hci_cmd_le_set_adv_data>:
    e262:	f002 bbdd 	b.w	10a20 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

0000e266 <sdc_hci_cmd_le_set_adv_enable>:
    e266:	f002 bbf0 	b.w	10a4a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

0000e26a <sdc_hci_cmd_le_set_adv_params>:
    e26a:	f002 bc21 	b.w	10ab0 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

0000e26e <sdc_hci_cmd_le_set_data_length>:
    e26e:	f002 bcb4 	b.w	10bda <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000e272 <sdc_hci_cmd_le_set_default_phy>:
    e272:	f7fd b885 	b.w	b380 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000e276 <sdc_hci_cmd_le_set_event_mask>:
    e276:	b510      	push	{r4, lr}
    e278:	f7f7 faf6 	bl	5868 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    e27c:	2000      	movs	r0, #0
    e27e:	bd10      	pop	{r4, pc}

0000e280 <sdc_hci_cmd_le_set_phy>:
    e280:	f002 bccb 	b.w	10c1a <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000e284 <sdc_hci_cmd_le_set_random_address>:
    e284:	f002 bce2 	b.w	10c4c <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000e288 <sdc_hci_cmd_le_set_scan_response_data>:
    e288:	f002 bcee 	b.w	10c68 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>

0000e28c <sdc_hci_cmd_le_write_suggested_default_data_length>:
    e28c:	f002 bd01 	b.w	10c92 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000e290 <sdc_hci_cmd_lc_disconnect>:
    e290:	f002 bab5 	b.w	107fe <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000e294 <sdc_hci_cmd_lc_read_remote_version_information>:
    e294:	f002 be47 	b.w	10f26 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    e298:	b570      	push	{r4, r5, r6, lr}
    e29a:	880b      	ldrh	r3, [r1, #0]
    e29c:	7f04      	ldrb	r4, [r0, #28]
    e29e:	f100 0524 	add.w	r5, r0, #36	; 0x24
    e2a2:	f3c3 060e 	ubfx	r6, r3, #0, #15
    e2a6:	8802      	ldrh	r2, [r0, #0]
    e2a8:	4435      	add	r5, r6
    e2aa:	1da4      	adds	r4, r4, #6
    e2ac:	882d      	ldrh	r5, [r5, #0]
    e2ae:	4422      	add	r2, r4
    e2b0:	b292      	uxth	r2, r2
    e2b2:	4425      	add	r5, r4
    e2b4:	1e54      	subs	r4, r2, #1
    e2b6:	442c      	add	r4, r5
    e2b8:	fb94 f4f2 	sdiv	r4, r4, r2
    e2bc:	fb02 6204 	mla	r2, r2, r4, r6
    e2c0:	8840      	ldrh	r0, [r0, #2]
    e2c2:	b292      	uxth	r2, r2
    e2c4:	4290      	cmp	r0, r2
    e2c6:	d903      	bls.n	e2d0 <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    e2c8:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    e2cc:	4310      	orrs	r0, r2
    e2ce:	e002      	b.n	e2d6 <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    e2d0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    e2d4:	4398      	bics	r0, r3
    e2d6:	8008      	strh	r0, [r1, #0]
    e2d8:	bd70      	pop	{r4, r5, r6, pc}
    e2da:	0442      	lsls	r2, r0, #17
    e2dc:	ebb2 4f41 	cmp.w	r2, r1, lsl #17
    e2e0:	d107      	bne.n	e2f2 <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    e2e2:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    e2e6:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    e2ea:	4288      	cmp	r0, r1
    e2ec:	d001      	beq.n	e2f2 <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    e2ee:	2001      	movs	r0, #1
    e2f0:	4770      	bx	lr
    e2f2:	2000      	movs	r0, #0
    e2f4:	4770      	bx	lr

0000e2f6 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>:
    e2f6:	b570      	push	{r4, r5, r6, lr}
    e2f8:	7f00      	ldrb	r0, [r0, #28]
    e2fa:	461c      	mov	r4, r3
    e2fc:	1d80      	adds	r0, r0, #6
    e2fe:	4408      	add	r0, r1
    e300:	4613      	mov	r3, r2
    e302:	8809      	ldrh	r1, [r1, #0]
    e304:	9a04      	ldr	r2, [sp, #16]
    e306:	1cc9      	adds	r1, r1, #3
    e308:	b289      	uxth	r1, r1
    e30a:	1915      	adds	r5, r2, r4
    e30c:	1ec0      	subs	r0, r0, #3
    e30e:	428d      	cmp	r5, r1
    e310:	d805      	bhi.n	e31e <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x28>
    e312:	1881      	adds	r1, r0, r2
    e314:	4622      	mov	r2, r4
    e316:	4618      	mov	r0, r3
    e318:	f7ff faa6 	bl	d868 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e31c:	e000      	b.n	e320 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x2a>
    e31e:	2400      	movs	r4, #0
    e320:	4620      	mov	r0, r4
    e322:	bd70      	pop	{r4, r5, r6, pc}

0000e324 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>:
    e324:	b570      	push	{r4, r5, r6, lr}
    e326:	7f00      	ldrb	r0, [r0, #28]
    e328:	461c      	mov	r4, r3
    e32a:	1d80      	adds	r0, r0, #6
    e32c:	4408      	add	r0, r1
    e32e:	4613      	mov	r3, r2
    e330:	8809      	ldrh	r1, [r1, #0]
    e332:	9a04      	ldr	r2, [sp, #16]
    e334:	1cc9      	adds	r1, r1, #3
    e336:	b289      	uxth	r1, r1
    e338:	1915      	adds	r5, r2, r4
    e33a:	1ec0      	subs	r0, r0, #3
    e33c:	428d      	cmp	r5, r1
    e33e:	d805      	bhi.n	e34c <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x28>
    e340:	4410      	add	r0, r2
    e342:	4622      	mov	r2, r4
    e344:	4619      	mov	r1, r3
    e346:	f7ff fa8f 	bl	d868 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e34a:	e000      	b.n	e34e <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x2a>
    e34c:	2400      	movs	r4, #0
    e34e:	4620      	mov	r0, r4
    e350:	bd70      	pop	{r4, r5, r6, pc}

0000e352 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    e352:	8881      	ldrh	r1, [r0, #4]
    e354:	88c0      	ldrh	r0, [r0, #6]
    e356:	4288      	cmp	r0, r1
    e358:	d101      	bne.n	e35e <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    e35a:	2001      	movs	r0, #1
    e35c:	4770      	bx	lr
    e35e:	2000      	movs	r0, #0
    e360:	4770      	bx	lr

0000e362 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>:
    e362:	8881      	ldrh	r1, [r0, #4]
    e364:	8900      	ldrh	r0, [r0, #8]
    e366:	4288      	cmp	r0, r1
    e368:	d101      	bne.n	e36e <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI+0xc>
    e36a:	2001      	movs	r0, #1
    e36c:	4770      	bx	lr
    e36e:	2000      	movs	r0, #0
    e370:	4770      	bx	lr

0000e372 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    e372:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e376:	460f      	mov	r7, r1
    e378:	4604      	mov	r4, r0
    e37a:	f100 0124 	add.w	r1, r0, #36	; 0x24
    e37e:	8880      	ldrh	r0, [r0, #4]
    e380:	2600      	movs	r6, #0
    e382:	f3c0 000e 	ubfx	r0, r0, #0, #15
    e386:	1845      	adds	r5, r0, r1
    e388:	603e      	str	r6, [r7, #0]
    e38a:	8a20      	ldrh	r0, [r4, #16]
    e38c:	2800      	cmp	r0, #0
    e38e:	d01a      	beq.n	e3c6 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x54>
    e390:	89a1      	ldrh	r1, [r4, #12]
    e392:	4408      	add	r0, r1
    e394:	b280      	uxth	r0, r0
    e396:	81a0      	strh	r0, [r4, #12]
    e398:	8829      	ldrh	r1, [r5, #0]
    e39a:	4288      	cmp	r0, r1
    e39c:	d905      	bls.n	e3aa <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x38>
    e39e:	f44f 71b3 	mov.w	r1, #358	; 0x166
    e3a2:	f04f 0014 	mov.w	r0, #20
    e3a6:	f7f7 f8db 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e3aa:	d10a      	bne.n	e3c2 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x50>
    e3ac:	69a0      	ldr	r0, [r4, #24]
    e3ae:	b108      	cbz	r0, e3b4 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x42>
    e3b0:	7f40      	ldrb	r0, [r0, #29]
    e3b2:	70a8      	strb	r0, [r5, #2]
    e3b4:	f104 0104 	add.w	r1, r4, #4
    e3b8:	4620      	mov	r0, r4
    e3ba:	f7ff ff6d 	bl	e298 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e3be:	81a6      	strh	r6, [r4, #12]
    e3c0:	603d      	str	r5, [r7, #0]
    e3c2:	8226      	strh	r6, [r4, #16]
    e3c4:	2001      	movs	r0, #1
    e3c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e3ca <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    e3ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e3cc:	4604      	mov	r4, r0
    e3ce:	f100 0324 	add.w	r3, r0, #36	; 0x24
    e3d2:	88c0      	ldrh	r0, [r0, #6]
    e3d4:	460e      	mov	r6, r1
    e3d6:	f3c0 070e 	ubfx	r7, r0, #0, #15
    e3da:	8a60      	ldrh	r0, [r4, #18]
    e3dc:	19d9      	adds	r1, r3, r7
    e3de:	b108      	cbz	r0, e3e4 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1a>
    e3e0:	42b0      	cmp	r0, r6
    e3e2:	d201      	bcs.n	e3e8 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>
    e3e4:	2000      	movs	r0, #0
    e3e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e3e8:	89e0      	ldrh	r0, [r4, #14]
    e3ea:	2500      	movs	r5, #0
    e3ec:	b140      	cbz	r0, e400 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x36>
    e3ee:	f8b1 c000 	ldrh.w	ip, [r1]
    e3f2:	4560      	cmp	r0, ip
    e3f4:	d008      	beq.n	e408 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
    e3f6:	f240 2151 	movw	r1, #593	; 0x251
    e3fa:	2014      	movs	r0, #20
    e3fc:	f7f7 f8b0 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e400:	7f60      	ldrb	r0, [r4, #29]
    e402:	7088      	strb	r0, [r1, #2]
    e404:	800d      	strh	r5, [r1, #0]
    e406:	e00e      	b.n	e426 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    e408:	f894 c01c 	ldrb.w	ip, [r4, #28]
    e40c:	4418      	add	r0, r3
    e40e:	f10c 0c06 	add.w	ip, ip, #6
    e412:	44bc      	add	ip, r7
    e414:	4460      	add	r0, ip
    e416:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    e41a:	f820 cc03 	strh.w	ip, [r0, #-3]
    e41e:	f894 c020 	ldrb.w	ip, [r4, #32]
    e422:	f800 cc01 	strb.w	ip, [r0, #-1]
    e426:	89e0      	ldrh	r0, [r4, #14]
    e428:	4430      	add	r0, r6
    e42a:	81e0      	strh	r0, [r4, #14]
    e42c:	8808      	ldrh	r0, [r1, #0]
    e42e:	4430      	add	r0, r6
    e430:	8008      	strh	r0, [r1, #0]
    e432:	b19a      	cbz	r2, e45c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x92>
    e434:	1da1      	adds	r1, r4, #6
    e436:	4620      	mov	r0, r4
    e438:	f7ff ff2e 	bl	e298 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e43c:	81e5      	strh	r5, [r4, #14]
    e43e:	7f60      	ldrb	r0, [r4, #29]
    e440:	1c40      	adds	r0, r0, #1
    e442:	7760      	strb	r0, [r4, #29]
    e444:	7da0      	ldrb	r0, [r4, #22]
    e446:	f88d 0000 	strb.w	r0, [sp]
    e44a:	9800      	ldr	r0, [sp, #0]
    e44c:	9000      	str	r0, [sp, #0]
    e44e:	f89d 0000 	ldrb.w	r0, [sp]
    e452:	b178      	cbz	r0, e474 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    e454:	88e0      	ldrh	r0, [r4, #6]
    e456:	82a0      	strh	r0, [r4, #20]
    e458:	75a5      	strb	r5, [r4, #22]
    e45a:	e00b      	b.n	e474 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    e45c:	7f20      	ldrb	r0, [r4, #28]
    e45e:	89e1      	ldrh	r1, [r4, #14]
    e460:	1d80      	adds	r0, r0, #6
    e462:	4438      	add	r0, r7
    e464:	4419      	add	r1, r3
    e466:	4408      	add	r0, r1
    e468:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    e46c:	83e1      	strh	r1, [r4, #30]
    e46e:	7880      	ldrb	r0, [r0, #2]
    e470:	f884 0020 	strb.w	r0, [r4, #32]
    e474:	8265      	strh	r5, [r4, #18]
    e476:	2001      	movs	r0, #1
    e478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000e47a <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>:
    e47a:	1cc0      	adds	r0, r0, #3
    e47c:	4770      	bx	lr

0000e47e <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    e47e:	b510      	push	{r4, lr}
    e480:	4604      	mov	r4, r0
    e482:	88c0      	ldrh	r0, [r0, #6]
    e484:	88a1      	ldrh	r1, [r4, #4]
    e486:	4281      	cmp	r1, r0
    e488:	d007      	beq.n	e49a <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    e48a:	89a0      	ldrh	r0, [r4, #12]
    e48c:	b928      	cbnz	r0, e49a <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    e48e:	8a20      	ldrh	r0, [r4, #16]
    e490:	b918      	cbnz	r0, e49a <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    e492:	88a0      	ldrh	r0, [r4, #4]
    e494:	8aa1      	ldrh	r1, [r4, #20]
    e496:	4288      	cmp	r0, r1
    e498:	d101      	bne.n	e49e <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x20>
    e49a:	2000      	movs	r0, #0
    e49c:	bd10      	pop	{r4, pc}
    e49e:	1d21      	adds	r1, r4, #4
    e4a0:	4620      	mov	r0, r4
    e4a2:	f7ff fef9 	bl	e298 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e4a6:	2000      	movs	r0, #0
    e4a8:	8220      	strh	r0, [r4, #16]
    e4aa:	2001      	movs	r0, #1
    e4ac:	bd10      	pop	{r4, pc}

0000e4ae <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    e4ae:	b510      	push	{r4, lr}
    e4b0:	4604      	mov	r4, r0
    e4b2:	f100 0224 	add.w	r2, r0, #36	; 0x24
    e4b6:	88c0      	ldrh	r0, [r0, #6]
    e4b8:	f3c0 000e 	ubfx	r0, r0, #0, #15
    e4bc:	4402      	add	r2, r0
    e4be:	8820      	ldrh	r0, [r4, #0]
    e4c0:	2845      	cmp	r0, #69	; 0x45
    e4c2:	d200      	bcs.n	e4c6 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    e4c4:	2045      	movs	r0, #69	; 0x45
    e4c6:	4288      	cmp	r0, r1
    e4c8:	d204      	bcs.n	e4d4 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    e4ca:	f240 1119 	movw	r1, #281	; 0x119
    e4ce:	2014      	movs	r0, #20
    e4d0:	f7f7 f846 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e4d4:	7de0      	ldrb	r0, [r4, #23]
    e4d6:	2800      	cmp	r0, #0
    e4d8:	d003      	beq.n	e4e2 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    e4da:	8810      	ldrh	r0, [r2, #0]
    e4dc:	4288      	cmp	r0, r1
    e4de:	d201      	bcs.n	e4e4 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    e4e0:	2000      	movs	r0, #0
    e4e2:	bd10      	pop	{r4, pc}
    e4e4:	8011      	strh	r1, [r2, #0]
    e4e6:	1da1      	adds	r1, r4, #6
    e4e8:	4620      	mov	r0, r4
    e4ea:	f7ff fed5 	bl	e298 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e4ee:	2000      	movs	r0, #0
    e4f0:	75e0      	strb	r0, [r4, #23]
    e4f2:	2001      	movs	r0, #1
    e4f4:	bd10      	pop	{r4, pc}

0000e4f6 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    e4f6:	b530      	push	{r4, r5, lr}
    e4f8:	88c4      	ldrh	r4, [r0, #6]
    e4fa:	8881      	ldrh	r1, [r0, #4]
    e4fc:	f100 0224 	add.w	r2, r0, #36	; 0x24
    e500:	f3c1 030e 	ubfx	r3, r1, #0, #15
    e504:	4413      	add	r3, r2
    e506:	8882      	ldrh	r2, [r0, #4]
    e508:	8a85      	ldrh	r5, [r0, #20]
    e50a:	42aa      	cmp	r2, r5
    e50c:	d012      	beq.n	e534 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    e50e:	42a1      	cmp	r1, r4
    e510:	d010      	beq.n	e534 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    e512:	8981      	ldrh	r1, [r0, #12]
    e514:	b971      	cbnz	r1, e534 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    e516:	6982      	ldr	r2, [r0, #24]
    e518:	b172      	cbz	r2, e538 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    e51a:	4610      	mov	r0, r2
    e51c:	f7ff ff21 	bl	e362 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>
    e520:	b950      	cbnz	r0, e538 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    e522:	8910      	ldrh	r0, [r2, #8]
    e524:	3224      	adds	r2, #36	; 0x24
    e526:	f3c0 000e 	ubfx	r0, r0, #0, #15
    e52a:	4410      	add	r0, r2
    e52c:	7899      	ldrb	r1, [r3, #2]
    e52e:	7880      	ldrb	r0, [r0, #2]
    e530:	4288      	cmp	r0, r1
    e532:	d101      	bne.n	e538 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    e534:	2000      	movs	r0, #0
    e536:	bd30      	pop	{r4, r5, pc}
    e538:	4618      	mov	r0, r3
    e53a:	bd30      	pop	{r4, r5, pc}

0000e53c <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    e53c:	7f00      	ldrb	r0, [r0, #28]
    e53e:	1d80      	adds	r0, r0, #6
    e540:	4408      	add	r0, r1
    e542:	1ec0      	subs	r0, r0, #3
    e544:	6010      	str	r0, [r2, #0]
    e546:	8808      	ldrh	r0, [r1, #0]
    e548:	4770      	bx	lr

0000e54a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    e54a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e54e:	460e      	mov	r6, r1
    e550:	88c1      	ldrh	r1, [r0, #6]
    e552:	8902      	ldrh	r2, [r0, #8]
    e554:	4604      	mov	r4, r0
    e556:	f100 0824 	add.w	r8, r0, #36	; 0x24
    e55a:	8800      	ldrh	r0, [r0, #0]
    e55c:	f3c1 050e 	ubfx	r5, r1, #0, #15
    e560:	f3c2 070e 	ubfx	r7, r2, #0, #15
    e564:	2845      	cmp	r0, #69	; 0x45
    e566:	d200      	bcs.n	e56a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    e568:	2045      	movs	r0, #69	; 0x45
    e56a:	42b0      	cmp	r0, r6
    e56c:	d203      	bcs.n	e576 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    e56e:	21db      	movs	r1, #219	; 0xdb
    e570:	2014      	movs	r0, #20
    e572:	f7f6 fff5 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e576:	4610      	mov	r0, r2
    e578:	f7ff feaf 	bl	e2da <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    e57c:	b110      	cbz	r0, e584 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    e57e:	2000      	movs	r0, #0
    e580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e584:	42af      	cmp	r7, r5
    e586:	d908      	bls.n	e59a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    e588:	7f21      	ldrb	r1, [r4, #28]
    e58a:	1b78      	subs	r0, r7, r5
    e58c:	1a40      	subs	r0, r0, r1
    e58e:	1f80      	subs	r0, r0, #6
    e590:	4286      	cmp	r6, r0
    e592:	dd02      	ble.n	e59a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    e594:	2000      	movs	r0, #0
    e596:	75e0      	strb	r0, [r4, #23]
    e598:	e7f1      	b.n	e57e <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    e59a:	eb08 0005 	add.w	r0, r8, r5
    e59e:	2101      	movs	r1, #1
    e5a0:	8006      	strh	r6, [r0, #0]
    e5a2:	75e1      	strb	r1, [r4, #23]
    e5a4:	e7ec      	b.n	e580 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000e5a6 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    e5a6:	b538      	push	{r3, r4, r5, lr}
    e5a8:	88c4      	ldrh	r4, [r0, #6]
    e5aa:	8881      	ldrh	r1, [r0, #4]
    e5ac:	f100 0224 	add.w	r2, r0, #36	; 0x24
    e5b0:	f3c1 030e 	ubfx	r3, r1, #0, #15
    e5b4:	441a      	add	r2, r3
    e5b6:	42a1      	cmp	r1, r4
    e5b8:	d010      	beq.n	e5dc <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    e5ba:	8983      	ldrh	r3, [r0, #12]
    e5bc:	8a05      	ldrh	r5, [r0, #16]
    e5be:	8812      	ldrh	r2, [r2, #0]
    e5c0:	442b      	add	r3, r5
    e5c2:	4293      	cmp	r3, r2
    e5c4:	d308      	bcc.n	e5d8 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    e5c6:	f8ad 1000 	strh.w	r1, [sp]
    e5ca:	4669      	mov	r1, sp
    e5cc:	f7ff fe64 	bl	e298 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e5d0:	f8bd 0000 	ldrh.w	r0, [sp]
    e5d4:	42a0      	cmp	r0, r4
    e5d6:	d001      	beq.n	e5dc <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    e5d8:	2001      	movs	r0, #1
    e5da:	bd38      	pop	{r3, r4, r5, pc}
    e5dc:	2000      	movs	r0, #0
    e5de:	bd38      	pop	{r3, r4, r5, pc}

0000e5e0 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    e5e0:	b570      	push	{r4, r5, r6, lr}
    e5e2:	88c6      	ldrh	r6, [r0, #6]
    e5e4:	8885      	ldrh	r5, [r0, #4]
    e5e6:	4603      	mov	r3, r0
    e5e8:	f100 0424 	add.w	r4, r0, #36	; 0x24
    e5ec:	f3c5 000e 	ubfx	r0, r5, #0, #15
    e5f0:	4420      	add	r0, r4
    e5f2:	42b5      	cmp	r5, r6
    e5f4:	d102      	bne.n	e5fc <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    e5f6:	2000      	movs	r0, #0
    e5f8:	8218      	strh	r0, [r3, #16]
    e5fa:	bd70      	pop	{r4, r5, r6, pc}
    e5fc:	8804      	ldrh	r4, [r0, #0]
    e5fe:	899d      	ldrh	r5, [r3, #12]
    e600:	7f1e      	ldrb	r6, [r3, #28]
    e602:	1b64      	subs	r4, r4, r5
    e604:	4435      	add	r5, r6
    e606:	4428      	add	r0, r5
    e608:	880d      	ldrh	r5, [r1, #0]
    e60a:	b2a4      	uxth	r4, r4
    e60c:	1cc0      	adds	r0, r0, #3
    e60e:	42a5      	cmp	r5, r4
    e610:	d900      	bls.n	e614 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    e612:	800c      	strh	r4, [r1, #0]
    e614:	899c      	ldrh	r4, [r3, #12]
    e616:	b124      	cbz	r4, e622 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    e618:	2400      	movs	r4, #0
    e61a:	7014      	strb	r4, [r2, #0]
    e61c:	8809      	ldrh	r1, [r1, #0]
    e61e:	8219      	strh	r1, [r3, #16]
    e620:	bd70      	pop	{r4, r5, r6, pc}
    e622:	2401      	movs	r4, #1
    e624:	e7f9      	b.n	e61a <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000e626 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>:
    e626:	b508      	push	{r3, lr}
    e628:	8a81      	ldrh	r1, [r0, #20]
    e62a:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    e62e:	3aff      	subs	r2, #255	; 0xff
    e630:	d008      	beq.n	e644 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x1e>
    e632:	7d82      	ldrb	r2, [r0, #22]
    e634:	f88d 2000 	strb.w	r2, [sp]
    e638:	9a00      	ldr	r2, [sp, #0]
    e63a:	9200      	str	r2, [sp, #0]
    e63c:	f89d 2000 	ldrb.w	r2, [sp]
    e640:	b952      	cbnz	r2, e658 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
    e642:	e004      	b.n	e64e <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x28>
    e644:	f240 318e 	movw	r1, #910	; 0x38e
    e648:	2014      	movs	r0, #20
    e64a:	f7f6 ff89 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e64e:	8880      	ldrh	r0, [r0, #4]
    e650:	4281      	cmp	r1, r0
    e652:	d101      	bne.n	e658 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
    e654:	2000      	movs	r0, #0
    e656:	bd08      	pop	{r3, pc}
    e658:	2001      	movs	r0, #1
    e65a:	bd08      	pop	{r3, pc}

0000e65c <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>:
    e65c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e660:	8281      	strh	r1, [r0, #20]
    e662:	2100      	movs	r1, #0
    e664:	7581      	strb	r1, [r0, #22]
    e666:	4770      	bx	lr

0000e668 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>:
    e668:	b510      	push	{r4, lr}
    e66a:	8a81      	ldrh	r1, [r0, #20]
    e66c:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    e670:	3aff      	subs	r2, #255	; 0xff
    e672:	d004      	beq.n	e67e <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x16>
    e674:	f240 316a 	movw	r1, #874	; 0x36a
    e678:	2014      	movs	r0, #20
    e67a:	f7f6 ff71 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e67e:	88c1      	ldrh	r1, [r0, #6]
    e680:	8281      	strh	r1, [r0, #20]
    e682:	89c1      	ldrh	r1, [r0, #14]
    e684:	b109      	cbz	r1, e68a <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x22>
    e686:	21ff      	movs	r1, #255	; 0xff
    e688:	e000      	b.n	e68c <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x24>
    e68a:	2100      	movs	r1, #0
    e68c:	7581      	strb	r1, [r0, #22]
    e68e:	bd10      	pop	{r4, pc}

0000e690 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    e690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e694:	461d      	mov	r5, r3
    e696:	4616      	mov	r6, r2
    e698:	9f06      	ldr	r7, [sp, #24]
    e69a:	460b      	mov	r3, r1
    e69c:	4604      	mov	r4, r0
    e69e:	463a      	mov	r2, r7
    e6a0:	4629      	mov	r1, r5
    e6a2:	4630      	mov	r0, r6
    e6a4:	f000 f84f 	bl	e746 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    e6a8:	4283      	cmp	r3, r0
    e6aa:	d201      	bcs.n	e6b0 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    e6ac:	21a8      	movs	r1, #168	; 0xa8
    e6ae:	e018      	b.n	e6e2 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    e6b0:	1ce0      	adds	r0, r4, #3
    e6b2:	f020 0103 	bic.w	r1, r0, #3
    e6b6:	4620      	mov	r0, r4
    e6b8:	42a1      	cmp	r1, r4
    e6ba:	d001      	beq.n	e6c0 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x30>
    e6bc:	21a9      	movs	r1, #169	; 0xa9
    e6be:	e010      	b.n	e6e2 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    e6c0:	2224      	movs	r2, #36	; 0x24
    e6c2:	2100      	movs	r1, #0
    e6c4:	f7ff f94a 	bl	d95c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e6c8:	f64f 70ff 	movw	r0, #65535	; 0xffff
    e6cc:	82a0      	strh	r0, [r4, #20]
    e6ce:	19a8      	adds	r0, r5, r6
    e6d0:	1d80      	adds	r0, r0, #6
    e6d2:	4378      	muls	r0, r7
    e6d4:	b280      	uxth	r0, r0
    e6d6:	7725      	strb	r5, [r4, #28]
    e6d8:	8060      	strh	r0, [r4, #2]
    e6da:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    e6de:	d903      	bls.n	e6e8 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x58>
    e6e0:	21af      	movs	r1, #175	; 0xaf
    e6e2:	2014      	movs	r0, #20
    e6e4:	f7f6 ff3c 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e6e8:	8026      	strh	r6, [r4, #0]
    e6ea:	2000      	movs	r0, #0
    e6ec:	7760      	strb	r0, [r4, #29]
    e6ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e6f2 <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>:
    e6f2:	6181      	str	r1, [r0, #24]
    e6f4:	6188      	str	r0, [r1, #24]
    e6f6:	4770      	bx	lr

0000e6f8 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    e6f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e6fc:	460b      	mov	r3, r1
    e6fe:	4604      	mov	r4, r0
    e700:	f100 0124 	add.w	r1, r0, #36	; 0x24
    e704:	8905      	ldrh	r5, [r0, #8]
    e706:	8946      	ldrh	r6, [r0, #10]
    e708:	8880      	ldrh	r0, [r0, #4]
    e70a:	f3c5 070e 	ubfx	r7, r5, #0, #15
    e70e:	4439      	add	r1, r7
    e710:	460f      	mov	r7, r1
    e712:	4285      	cmp	r5, r0
    e714:	d102      	bne.n	e71c <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x24>
    e716:	2000      	movs	r0, #0
    e718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e71c:	b10a      	cbz	r2, e722 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x2a>
    e71e:	1cc8      	adds	r0, r1, #3
    e720:	6010      	str	r0, [r2, #0]
    e722:	b123      	cbz	r3, e72e <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x36>
    e724:	7f22      	ldrb	r2, [r4, #28]
    e726:	1cf9      	adds	r1, r7, #3
    e728:	4618      	mov	r0, r3
    e72a:	f7ff f89d 	bl	d868 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e72e:	883f      	ldrh	r7, [r7, #0]
    e730:	f104 0108 	add.w	r1, r4, #8
    e734:	4620      	mov	r0, r4
    e736:	f7ff fdaf 	bl	e298 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e73a:	42b5      	cmp	r5, r6
    e73c:	d101      	bne.n	e742 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x4a>
    e73e:	8920      	ldrh	r0, [r4, #8]
    e740:	8160      	strh	r0, [r4, #10]
    e742:	4638      	mov	r0, r7
    e744:	e7e8      	b.n	e718 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x20>

0000e746 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    e746:	4401      	add	r1, r0
    e748:	1d89      	adds	r1, r1, #6
    e74a:	4351      	muls	r1, r2
    e74c:	b28a      	uxth	r2, r1
    e74e:	2100      	movs	r1, #0
    e750:	2845      	cmp	r0, #69	; 0x45
    e752:	d202      	bcs.n	e75a <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x14>
    e754:	f1c0 0045 	rsb	r0, r0, #69	; 0x45
    e758:	b281      	uxth	r1, r0
    e75a:	3224      	adds	r2, #36	; 0x24
    e75c:	1850      	adds	r0, r2, r1
    e75e:	b280      	uxth	r0, r0
    e760:	4770      	bx	lr

0000e762 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    e762:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e766:	4688      	mov	r8, r1
    e768:	88c1      	ldrh	r1, [r0, #6]
    e76a:	4604      	mov	r4, r0
    e76c:	8900      	ldrh	r0, [r0, #8]
    e76e:	f3c1 060e 	ubfx	r6, r1, #0, #15
    e772:	f104 0524 	add.w	r5, r4, #36	; 0x24
    e776:	f3c0 070e 	ubfx	r7, r0, #0, #15
    e77a:	eb05 0906 	add.w	r9, r5, r6
    e77e:	f7ff fdac 	bl	e2da <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    e782:	2200      	movs	r2, #0
    e784:	b998      	cbnz	r0, e7ae <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    e786:	8820      	ldrh	r0, [r4, #0]
    e788:	2845      	cmp	r0, #69	; 0x45
    e78a:	d200      	bcs.n	e78e <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    e78c:	2045      	movs	r0, #69	; 0x45
    e78e:	42b7      	cmp	r7, r6
    e790:	d906      	bls.n	e7a0 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    e792:	7f23      	ldrb	r3, [r4, #28]
    e794:	1bb9      	subs	r1, r7, r6
    e796:	1ac9      	subs	r1, r1, r3
    e798:	1f89      	subs	r1, r1, #6
    e79a:	4281      	cmp	r1, r0
    e79c:	da00      	bge.n	e7a0 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    e79e:	4608      	mov	r0, r1
    e7a0:	89e1      	ldrh	r1, [r4, #14]
    e7a2:	b111      	cbz	r1, e7aa <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    e7a4:	f8b9 3000 	ldrh.w	r3, [r9]
    e7a8:	1ac0      	subs	r0, r0, r3
    e7aa:	4540      	cmp	r0, r8
    e7ac:	da03      	bge.n	e7b6 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    e7ae:	8262      	strh	r2, [r4, #18]
    e7b0:	2000      	movs	r0, #0
    e7b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e7b6:	7f20      	ldrb	r0, [r4, #28]
    e7b8:	4429      	add	r1, r5
    e7ba:	1d80      	adds	r0, r0, #6
    e7bc:	4430      	add	r0, r6
    e7be:	4408      	add	r0, r1
    e7c0:	f8a4 8012 	strh.w	r8, [r4, #18]
    e7c4:	1ec0      	subs	r0, r0, #3
    e7c6:	e7f4      	b.n	e7b2 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000e7c8 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>:
    e7c8:	2100      	movs	r1, #0
    e7ca:	81c1      	strh	r1, [r0, #14]
    e7cc:	8241      	strh	r1, [r0, #18]
    e7ce:	7581      	strb	r1, [r0, #22]
    e7d0:	4770      	bx	lr

0000e7d2 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    e7d2:	b570      	push	{r4, r5, r6, lr}
    e7d4:	2300      	movs	r3, #0
    e7d6:	f1a1 0208 	sub.w	r2, r1, #8
    e7da:	f64f 74f7 	movw	r4, #65527	; 0xfff7
    e7de:	42a2      	cmp	r2, r4
    e7e0:	d304      	bcc.n	e7ec <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    e7e2:	f240 11cd 	movw	r1, #461	; 0x1cd
    e7e6:	2015      	movs	r0, #21
    e7e8:	f7f6 feba 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e7ec:	6802      	ldr	r2, [r0, #0]
    e7ee:	b90a      	cbnz	r2, e7f4 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x22>
    e7f0:	e01e      	b.n	e830 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    e7f2:	4610      	mov	r0, r2
    e7f4:	6802      	ldr	r2, [r0, #0]
    e7f6:	8893      	ldrh	r3, [r2, #4]
    e7f8:	428b      	cmp	r3, r1
    e7fa:	d002      	beq.n	e802 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x30>
    e7fc:	6813      	ldr	r3, [r2, #0]
    e7fe:	2b00      	cmp	r3, #0
    e800:	d1f7      	bne.n	e7f2 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x20>
    e802:	8894      	ldrh	r4, [r2, #4]
    e804:	4613      	mov	r3, r2
    e806:	428c      	cmp	r4, r1
    e808:	d101      	bne.n	e80e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x3c>
    e80a:	6811      	ldr	r1, [r2, #0]
    e80c:	e00d      	b.n	e82a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x58>
    e80e:	f101 0508 	add.w	r5, r1, #8
    e812:	b2ae      	uxth	r6, r5
    e814:	2500      	movs	r5, #0
    e816:	42b4      	cmp	r4, r6
    e818:	d309      	bcc.n	e82e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5c>
    e81a:	1a64      	subs	r4, r4, r1
    e81c:	4411      	add	r1, r2
    e81e:	600d      	str	r5, [r1, #0]
    e820:	808c      	strh	r4, [r1, #4]
    e822:	6802      	ldr	r2, [r0, #0]
    e824:	6812      	ldr	r2, [r2, #0]
    e826:	6002      	str	r2, [r0, #0]
    e828:	600a      	str	r2, [r1, #0]
    e82a:	6001      	str	r1, [r0, #0]
    e82c:	e000      	b.n	e830 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    e82e:	2300      	movs	r3, #0
    e830:	4618      	mov	r0, r3
    e832:	bd70      	pop	{r4, r5, r6, pc}

0000e834 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    e834:	b510      	push	{r4, lr}
    e836:	000c      	movs	r4, r1
    e838:	d004      	beq.n	e844 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x10>
    e83a:	2c08      	cmp	r4, #8
    e83c:	d207      	bcs.n	e84e <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    e83e:	f240 1195 	movw	r1, #405	; 0x195
    e842:	e00a      	b.n	e85a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x26>
    e844:	b108      	cbz	r0, e84a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x16>
    e846:	2100      	movs	r1, #0
    e848:	6001      	str	r1, [r0, #0]
    e84a:	2000      	movs	r0, #0
    e84c:	bd10      	pop	{r4, pc}
    e84e:	b158      	cbz	r0, e868 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x34>
    e850:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    e854:	d304      	bcc.n	e860 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x2c>
    e856:	f240 11a7 	movw	r1, #423	; 0x1a7
    e85a:	2015      	movs	r0, #21
    e85c:	f7f6 fe80 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e860:	b2a1      	uxth	r1, r4
    e862:	6800      	ldr	r0, [r0, #0]
    e864:	f000 f814 	bl	e890 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    e868:	1d20      	adds	r0, r4, #4
    e86a:	bd10      	pop	{r4, pc}

0000e86c <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    e86c:	2100      	movs	r1, #0
    e86e:	6802      	ldr	r2, [r0, #0]
    e870:	e003      	b.n	e87a <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    e872:	8893      	ldrh	r3, [r2, #4]
    e874:	6812      	ldr	r2, [r2, #0]
    e876:	4419      	add	r1, r3
    e878:	b289      	uxth	r1, r1
    e87a:	2a00      	cmp	r2, #0
    e87c:	d1f9      	bne.n	e872 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    e87e:	f000 b807 	b.w	e890 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000e882 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    e882:	2300      	movs	r3, #0
    e884:	600b      	str	r3, [r1, #0]
    e886:	808a      	strh	r2, [r1, #4]
    e888:	6802      	ldr	r2, [r0, #0]
    e88a:	600a      	str	r2, [r1, #0]
    e88c:	6001      	str	r1, [r0, #0]
    e88e:	4770      	bx	lr
    e890:	2300      	movs	r3, #0
    e892:	6043      	str	r3, [r0, #4]
    e894:	1d02      	adds	r2, r0, #4
    e896:	8101      	strh	r1, [r0, #8]
    e898:	6002      	str	r2, [r0, #0]
    e89a:	4770      	bx	lr

0000e89c <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>:
    e89c:	f5a0 437f 	sub.w	r3, r0, #65280	; 0xff00
    e8a0:	3bff      	subs	r3, #255	; 0xff
    e8a2:	d001      	beq.n	e8a8 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0xc>
    e8a4:	2902      	cmp	r1, #2
    e8a6:	d301      	bcc.n	e8ac <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x10>
    e8a8:	2000      	movs	r0, #0
    e8aa:	4770      	bx	lr
    e8ac:	f7f7 b91e 	b.w	5aec <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>

0000e8b0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    e8b0:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    e8b4:	3aff      	subs	r2, #255	; 0xff
    e8b6:	d001      	beq.n	e8bc <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xc>
    e8b8:	2902      	cmp	r1, #2
    e8ba:	d301      	bcc.n	e8c0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x10>
    e8bc:	2000      	movs	r0, #0
    e8be:	4770      	bx	lr
    e8c0:	f7f7 b94e 	b.w	5b60 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>

0000e8c4 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>:
    e8c4:	b570      	push	{r4, r5, r6, lr}
    e8c6:	4605      	mov	r5, r0
    e8c8:	460c      	mov	r4, r1
    e8ca:	4608      	mov	r0, r1
    e8cc:	f000 f9a9 	bl	ec22 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    e8d0:	b108      	cbz	r0, e8d6 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x12>
    e8d2:	2010      	movs	r0, #16
    e8d4:	bd70      	pop	{r4, r5, r6, pc}
    e8d6:	2d02      	cmp	r5, #2
    e8d8:	d301      	bcc.n	e8de <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x1a>
    e8da:	2007      	movs	r0, #7
    e8dc:	bd70      	pop	{r4, r5, r6, pc}
    e8de:	7025      	strb	r5, [r4, #0]
    e8e0:	2000      	movs	r0, #0
    e8e2:	8060      	strh	r0, [r4, #2]
    e8e4:	bd70      	pop	{r4, r5, r6, pc}
    e8e6:	b510      	push	{r4, lr}
    e8e8:	4604      	mov	r4, r0
    e8ea:	f7f7 f985 	bl	5bf8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    e8ee:	42a0      	cmp	r0, r4
    e8f0:	d901      	bls.n	e8f6 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x32>
    e8f2:	2001      	movs	r0, #1
    e8f4:	bd10      	pop	{r4, pc}
    e8f6:	2000      	movs	r0, #0
    e8f8:	bd10      	pop	{r4, pc}
    e8fa:	4770      	bx	lr

0000e8fc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    e8fc:	b570      	push	{r4, r5, r6, lr}
    e8fe:	460e      	mov	r6, r1
    e900:	461d      	mov	r5, r3
    e902:	4611      	mov	r1, r2
    e904:	f000 f813 	bl	e92e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    e908:	4604      	mov	r4, r0
    e90a:	4629      	mov	r1, r5
    e90c:	4630      	mov	r0, r6
    e90e:	f000 f804 	bl	e91a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    e912:	4420      	add	r0, r4
    e914:	1d00      	adds	r0, r0, #4
    e916:	b280      	uxth	r0, r0
    e918:	bd70      	pop	{r4, r5, r6, pc}
    e91a:	b510      	push	{r4, lr}
    e91c:	460a      	mov	r2, r1
    e91e:	2101      	movs	r1, #1
    e920:	f7ff ff11 	bl	e746 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    e924:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    e928:	1cc0      	adds	r0, r0, #3
    e92a:	4008      	ands	r0, r1
    e92c:	bd10      	pop	{r4, pc}
    e92e:	b510      	push	{r4, lr}
    e930:	460a      	mov	r2, r1
    e932:	210a      	movs	r1, #10
    e934:	f7ff ff07 	bl	e746 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    e938:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    e93c:	1cc0      	adds	r0, r0, #3
    e93e:	4008      	ands	r0, r1
    e940:	bd10      	pop	{r4, pc}
    e942:	b109      	cbz	r1, e948 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x4c>
    e944:	2100      	movs	r1, #0
    e946:	e000      	b.n	e94a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x4e>
    e948:	2102      	movs	r1, #2
    e94a:	1843      	adds	r3, r0, r1
    e94c:	7d1a      	ldrb	r2, [r3, #20]
    e94e:	2a02      	cmp	r2, #2
    e950:	d008      	beq.n	e964 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x68>
    e952:	7d5b      	ldrb	r3, [r3, #21]
    e954:	2b02      	cmp	r3, #2
    e956:	d009      	beq.n	e96c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x70>
    e958:	2a03      	cmp	r2, #3
    e95a:	d003      	beq.n	e964 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x68>
    e95c:	2b03      	cmp	r3, #3
    e95e:	d005      	beq.n	e96c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x70>
    e960:	2000      	movs	r0, #0
    e962:	4770      	bx	lr
    e964:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    e968:	8b00      	ldrh	r0, [r0, #24]
    e96a:	4770      	bx	lr
    e96c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    e970:	8b40      	ldrh	r0, [r0, #26]
    e972:	4770      	bx	lr
    e974:	b109      	cbz	r1, e97a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7e>
    e976:	2100      	movs	r1, #0
    e978:	e000      	b.n	e97c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x80>
    e97a:	2102      	movs	r1, #2
    e97c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    e980:	8b01      	ldrh	r1, [r0, #24]
    e982:	b911      	cbnz	r1, e98a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8e>
    e984:	8b40      	ldrh	r0, [r0, #26]
    e986:	2800      	cmp	r0, #0
    e988:	d000      	beq.n	e98c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x90>
    e98a:	2001      	movs	r0, #1
    e98c:	4770      	bx	lr
    e98e:	b538      	push	{r3, r4, r5, lr}
    e990:	7883      	ldrb	r3, [r0, #2]
    e992:	f88d 3000 	strb.w	r3, [sp]
    e996:	9b00      	ldr	r3, [sp, #0]
    e998:	9300      	str	r3, [sp, #0]
    e99a:	f89d 3000 	ldrb.w	r3, [sp]
    e99e:	b95b      	cbnz	r3, e9b8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xbc>
    e9a0:	2400      	movs	r4, #0
    e9a2:	b10a      	cbz	r2, e9a8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xac>
    e9a4:	2300      	movs	r3, #0
    e9a6:	e000      	b.n	e9aa <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xae>
    e9a8:	2302      	movs	r3, #2
    e9aa:	18c2      	adds	r2, r0, r3
    e9ac:	7d15      	ldrb	r5, [r2, #20]
    e9ae:	2d02      	cmp	r5, #2
    e9b0:	d004      	beq.n	e9bc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc0>
    e9b2:	7d52      	ldrb	r2, [r2, #21]
    e9b4:	2a02      	cmp	r2, #2
    e9b6:	d004      	beq.n	e9c2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc6>
    e9b8:	2000      	movs	r0, #0
    e9ba:	bd38      	pop	{r3, r4, r5, pc}
    e9bc:	461a      	mov	r2, r3
    e9be:	1c5b      	adds	r3, r3, #1
    e9c0:	e000      	b.n	e9c4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc8>
    e9c2:	1c5a      	adds	r2, r3, #1
    e9c4:	b179      	cbz	r1, e9e6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xea>
    e9c6:	18c5      	adds	r5, r0, r3
    e9c8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    e9cc:	752c      	strb	r4, [r5, #20]
    e9ce:	831c      	strh	r4, [r3, #24]
    e9d0:	2303      	movs	r3, #3
    e9d2:	1884      	adds	r4, r0, r2
    e9d4:	7523      	strb	r3, [r4, #20]
    e9d6:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    e9da:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    e9de:	685b      	ldr	r3, [r3, #4]
    e9e0:	600b      	str	r3, [r1, #0]
    e9e2:	8b00      	ldrh	r0, [r0, #24]
    e9e4:	8088      	strh	r0, [r1, #4]
    e9e6:	2001      	movs	r0, #1
    e9e8:	bd38      	pop	{r3, r4, r5, pc}
    e9ea:	b510      	push	{r4, lr}
    e9ec:	b109      	cbz	r1, e9f2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf6>
    e9ee:	2100      	movs	r1, #0
    e9f0:	e000      	b.n	e9f4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf8>
    e9f2:	2102      	movs	r1, #2
    e9f4:	1843      	adds	r3, r0, r1
    e9f6:	7d1c      	ldrb	r4, [r3, #20]
    e9f8:	4294      	cmp	r4, r2
    e9fa:	d103      	bne.n	ea04 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x108>
    e9fc:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    ea00:	8b00      	ldrh	r0, [r0, #24]
    ea02:	bd10      	pop	{r4, pc}
    ea04:	7d5b      	ldrb	r3, [r3, #21]
    ea06:	4293      	cmp	r3, r2
    ea08:	d103      	bne.n	ea12 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x116>
    ea0a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    ea0e:	8b40      	ldrh	r0, [r0, #26]
    ea10:	bd10      	pop	{r4, pc}
    ea12:	2000      	movs	r0, #0
    ea14:	bd10      	pop	{r4, pc}
    ea16:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    ea1a:	d201      	bcs.n	ea20 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x124>
    ea1c:	0841      	lsrs	r1, r0, #1
    ea1e:	e000      	b.n	ea22 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x126>
    ea20:	21ff      	movs	r1, #255	; 0xff
    ea22:	1a40      	subs	r0, r0, r1
    ea24:	f240 6172 	movw	r1, #1650	; 0x672
    ea28:	4288      	cmp	r0, r1
    ea2a:	db00      	blt.n	ea2e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x132>
    ea2c:	4608      	mov	r0, r1
    ea2e:	b280      	uxth	r0, r0
    ea30:	4770      	bx	lr

0000ea32 <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>:
    ea32:	2101      	movs	r1, #1
    ea34:	f7ff bf85 	b.w	e942 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>

0000ea38 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>:
    ea38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ea3c:	4606      	mov	r6, r0
    ea3e:	f342 0780 	sbfx	r7, r2, #2, #1
    ea42:	7848      	ldrb	r0, [r1, #1]
    ea44:	460c      	mov	r4, r1
    ea46:	f022 0504 	bic.w	r5, r2, #4
    ea4a:	1c7f      	adds	r7, r7, #1
    ea4c:	b100      	cbz	r0, ea50 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x18>
    ea4e:	b90d      	cbnz	r5, ea54 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x1c>
    ea50:	4328      	orrs	r0, r5
    ea52:	d104      	bne.n	ea5e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x26>
    ea54:	b145      	cbz	r5, ea68 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x30>
    ea56:	2100      	movs	r1, #0
    ea58:	4620      	mov	r0, r4
    ea5a:	f7f7 f9d7 	bl	5e0c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    ea5e:	20ff      	movs	r0, #255	; 0xff
    ea60:	70a0      	strb	r0, [r4, #2]
    ea62:	b11f      	cbz	r7, ea6c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x34>
    ea64:	2000      	movs	r0, #0
    ea66:	e002      	b.n	ea6e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x36>
    ea68:	2101      	movs	r1, #1
    ea6a:	e7f5      	b.n	ea58 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x20>
    ea6c:	2002      	movs	r0, #2
    ea6e:	1821      	adds	r1, r4, r0
    ea70:	7d09      	ldrb	r1, [r1, #20]
    ea72:	2903      	cmp	r1, #3
    ea74:	d102      	bne.n	ea7c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    ea76:	2d02      	cmp	r5, #2
    ea78:	d000      	beq.n	ea7c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    ea7a:	1c40      	adds	r0, r0, #1
    ea7c:	1822      	adds	r2, r4, r0
    ea7e:	2101      	movs	r1, #1
    ea80:	7511      	strb	r1, [r2, #20]
    ea82:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    ea86:	2200      	movs	r2, #0
    ea88:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    ea8c:	830a      	strh	r2, [r1, #24]
    ea8e:	6840      	ldr	r0, [r0, #4]
    ea90:	70a2      	strb	r2, [r4, #2]
    ea92:	4631      	mov	r1, r6
    ea94:	f362 010f 	bfi	r1, r2, #0, #16
    ea98:	e9c6 0100 	strd	r0, r1, [r6]
    ea9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000eaa0 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>:
    eaa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    eaa4:	461e      	mov	r6, r3
    eaa6:	4613      	mov	r3, r2
    eaa8:	4604      	mov	r4, r0
    eaaa:	b109      	cbz	r1, eab0 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x10>
    eaac:	2000      	movs	r0, #0
    eaae:	e000      	b.n	eab2 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x12>
    eab0:	2002      	movs	r0, #2
    eab2:	21ff      	movs	r1, #255	; 0xff
    eab4:	70a1      	strb	r1, [r4, #2]
    eab6:	1821      	adds	r1, r4, r0
    eab8:	7d0a      	ldrb	r2, [r1, #20]
    eaba:	2a01      	cmp	r2, #1
    eabc:	d003      	beq.n	eac6 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x26>
    eabe:	7d49      	ldrb	r1, [r1, #21]
    eac0:	2901      	cmp	r1, #1
    eac2:	d10c      	bne.n	eade <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x3e>
    eac4:	1c40      	adds	r0, r0, #1
    eac6:	eb04 0540 	add.w	r5, r4, r0, lsl #1
    eaca:	2700      	movs	r7, #0
    eacc:	8b29      	ldrh	r1, [r5, #24]
    eace:	f8b5 c020 	ldrh.w	ip, [r5, #32]
    ead2:	198a      	adds	r2, r1, r6
    ead4:	4562      	cmp	r2, ip
    ead6:	d905      	bls.n	eae4 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x44>
    ead8:	4420      	add	r0, r4
    eada:	832f      	strh	r7, [r5, #24]
    eadc:	7507      	strb	r7, [r0, #20]
    eade:	2000      	movs	r0, #0
    eae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    eae4:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    eae8:	4632      	mov	r2, r6
    eaea:	6840      	ldr	r0, [r0, #4]
    eaec:	4408      	add	r0, r1
    eaee:	4619      	mov	r1, r3
    eaf0:	f7fe feba 	bl	d868 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    eaf4:	8b28      	ldrh	r0, [r5, #24]
    eaf6:	4430      	add	r0, r6
    eaf8:	8328      	strh	r0, [r5, #24]
    eafa:	70a7      	strb	r7, [r4, #2]
    eafc:	2001      	movs	r0, #1
    eafe:	e7ef      	b.n	eae0 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x40>

0000eb00 <sym_SYX5A4D5YT7FQ4PORL5PYZ5T6BOBVEZRWNZWOOA>:
    eb00:	2202      	movs	r2, #2
    eb02:	2100      	movs	r1, #0
    eb04:	f7ff bf71 	b.w	e9ea <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

0000eb08 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>:
    eb08:	b510      	push	{r4, lr}
    eb0a:	2101      	movs	r1, #1
    eb0c:	f7ff ff32 	bl	e974 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x78>
    eb10:	2800      	cmp	r0, #0
    eb12:	d000      	beq.n	eb16 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY+0xe>
    eb14:	2001      	movs	r0, #1
    eb16:	bd10      	pop	{r4, pc}

0000eb18 <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>:
    eb18:	2201      	movs	r2, #1
    eb1a:	f7ff bf38 	b.w	e98e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x92>

0000eb1e <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>:
    eb1e:	2200      	movs	r2, #0
    eb20:	f7ff bf35 	b.w	e98e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x92>

0000eb24 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>:
    eb24:	b570      	push	{r4, r5, r6, lr}
    eb26:	b109      	cbz	r1, eb2c <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x8>
    eb28:	2300      	movs	r3, #0
    eb2a:	e000      	b.n	eb2e <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0xa>
    eb2c:	2302      	movs	r3, #2
    eb2e:	21ff      	movs	r1, #255	; 0xff
    eb30:	7081      	strb	r1, [r0, #2]
    eb32:	18c1      	adds	r1, r0, r3
    eb34:	2402      	movs	r4, #2
    eb36:	7d0d      	ldrb	r5, [r1, #20]
    eb38:	2d01      	cmp	r5, #1
    eb3a:	d007      	beq.n	eb4c <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x28>
    eb3c:	7d4d      	ldrb	r5, [r1, #21]
    eb3e:	2d01      	cmp	r5, #1
    eb40:	d009      	beq.n	eb56 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x32>
    eb42:	f44f 718b 	mov.w	r1, #278	; 0x116
    eb46:	2009      	movs	r0, #9
    eb48:	f7f6 fd0a 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eb4c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    eb50:	831a      	strh	r2, [r3, #24]
    eb52:	750c      	strb	r4, [r1, #20]
    eb54:	e003      	b.n	eb5e <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x3a>
    eb56:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    eb5a:	835a      	strh	r2, [r3, #26]
    eb5c:	754c      	strb	r4, [r1, #21]
    eb5e:	2100      	movs	r1, #0
    eb60:	7081      	strb	r1, [r0, #2]
    eb62:	bd70      	pop	{r4, r5, r6, pc}

0000eb64 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>:
    eb64:	2101      	movs	r1, #1
    eb66:	7001      	strb	r1, [r0, #0]
    eb68:	4770      	bx	lr

0000eb6a <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>:
    eb6a:	2201      	movs	r2, #1
    eb6c:	4611      	mov	r1, r2
    eb6e:	f7ff bf3c 	b.w	e9ea <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

0000eb72 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>:
    eb72:	2201      	movs	r2, #1
    eb74:	2100      	movs	r1, #0
    eb76:	f7ff bf38 	b.w	e9ea <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

0000eb7a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>:
    eb7a:	2100      	movs	r1, #0
    eb7c:	f7ff bee1 	b.w	e942 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    eb80:	2800      	cmp	r0, #0
    eb82:	db09      	blt.n	eb98 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x1e>
    eb84:	f000 021f 	and.w	r2, r0, #31
    eb88:	2101      	movs	r1, #1
    eb8a:	4091      	lsls	r1, r2
    eb8c:	0940      	lsrs	r0, r0, #5
    eb8e:	0080      	lsls	r0, r0, #2
    eb90:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    eb94:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    eb98:	4770      	bx	lr
    eb9a:	2800      	cmp	r0, #0
    eb9c:	db0d      	blt.n	ebba <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x40>
    eb9e:	f000 021f 	and.w	r2, r0, #31
    eba2:	2101      	movs	r1, #1
    eba4:	4091      	lsls	r1, r2
    eba6:	0940      	lsrs	r0, r0, #5
    eba8:	0080      	lsls	r0, r0, #2
    ebaa:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    ebae:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    ebb2:	f3bf 8f4f 	dsb	sy
    ebb6:	f3bf 8f6f 	isb	sy
    ebba:	4770      	bx	lr
    ebbc:	b510      	push	{r4, lr}
    ebbe:	200e      	movs	r0, #14
    ebc0:	f7ff ffeb 	bl	eb9a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    ebc4:	200e      	movs	r0, #14
    ebc6:	f7ff ffdb 	bl	eb80 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    ebca:	200f      	movs	r0, #15
    ebcc:	f7ff ffe5 	bl	eb9a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    ebd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ebd4:	200f      	movs	r0, #15
    ebd6:	f7ff bfd3 	b.w	eb80 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    ebda:	2800      	cmp	r0, #0
    ebdc:	db09      	blt.n	ebf2 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x78>
    ebde:	f000 021f 	and.w	r2, r0, #31
    ebe2:	2101      	movs	r1, #1
    ebe4:	4091      	lsls	r1, r2
    ebe6:	0940      	lsrs	r0, r0, #5
    ebe8:	0080      	lsls	r0, r0, #2
    ebea:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    ebee:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    ebf2:	4770      	bx	lr
    ebf4:	5840      	ldr	r0, [r0, r1]
    ebf6:	2800      	cmp	r0, #0
    ebf8:	d000      	beq.n	ebfc <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x82>
    ebfa:	2001      	movs	r0, #1
    ebfc:	4770      	bx	lr

0000ebfe <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    ebfe:	b510      	push	{r4, lr}
    ec00:	4604      	mov	r4, r0
    ec02:	4620      	mov	r0, r4
    ec04:	f7f7 fa02 	bl	600c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x2c>
    ec08:	2811      	cmp	r0, #17
    ec0a:	d0fa      	beq.n	ec02 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x4>
    ec0c:	bd10      	pop	{r4, pc}

0000ec0e <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    ec0e:	b510      	push	{r4, lr}
    ec10:	f7ff fff5 	bl	ebfe <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    ec14:	2800      	cmp	r0, #0
    ec16:	d003      	beq.n	ec20 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x12>
    ec18:	21a0      	movs	r1, #160	; 0xa0
    ec1a:	201d      	movs	r0, #29
    ec1c:	f7f6 fca0 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ec20:	bd10      	pop	{r4, pc}

0000ec22 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>:
    ec22:	b108      	cbz	r0, ec28 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI+0x6>
    ec24:	2000      	movs	r0, #0
    ec26:	4770      	bx	lr
    ec28:	2001      	movs	r0, #1
    ec2a:	4770      	bx	lr

0000ec2c <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    ec2c:	f7f7 bb40 	b.w	62b0 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000ec30 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    ec30:	f7f7 bb2e 	b.w	6290 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000ec34 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>:
    ec34:	b510      	push	{r4, lr}
    ec36:	4050      	eors	r0, r2
    ec38:	780a      	ldrb	r2, [r1, #0]
    ec3a:	781c      	ldrb	r4, [r3, #0]
    ec3c:	4062      	eors	r2, r4
    ec3e:	4410      	add	r0, r2
    ec40:	784a      	ldrb	r2, [r1, #1]
    ec42:	785c      	ldrb	r4, [r3, #1]
    ec44:	4062      	eors	r2, r4
    ec46:	4410      	add	r0, r2
    ec48:	788a      	ldrb	r2, [r1, #2]
    ec4a:	789c      	ldrb	r4, [r3, #2]
    ec4c:	4062      	eors	r2, r4
    ec4e:	4410      	add	r0, r2
    ec50:	78ca      	ldrb	r2, [r1, #3]
    ec52:	78dc      	ldrb	r4, [r3, #3]
    ec54:	4062      	eors	r2, r4
    ec56:	4410      	add	r0, r2
    ec58:	790a      	ldrb	r2, [r1, #4]
    ec5a:	791c      	ldrb	r4, [r3, #4]
    ec5c:	7949      	ldrb	r1, [r1, #5]
    ec5e:	4062      	eors	r2, r4
    ec60:	4410      	add	r0, r2
    ec62:	795a      	ldrb	r2, [r3, #5]
    ec64:	4051      	eors	r1, r2
    ec66:	42c1      	cmn	r1, r0
    ec68:	d101      	bne.n	ec6e <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI+0x3a>
    ec6a:	2001      	movs	r0, #1
    ec6c:	bd10      	pop	{r4, pc}
    ec6e:	2000      	movs	r0, #0
    ec70:	bd10      	pop	{r4, pc}

0000ec72 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    ec72:	b510      	push	{r4, lr}
    ec74:	2900      	cmp	r1, #0
    ec76:	4604      	mov	r4, r0
    ec78:	f04f 0106 	mov.w	r1, #6
    ec7c:	d002      	beq.n	ec84 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    ec7e:	f7f6 fd0d 	bl	569c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    ec82:	e001      	b.n	ec88 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    ec84:	f7f6 fd18 	bl	56b8 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    ec88:	7960      	ldrb	r0, [r4, #5]
    ec8a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    ec8e:	7160      	strb	r0, [r4, #5]
    ec90:	bd10      	pop	{r4, pc}

0000ec92 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    ec92:	4770      	bx	lr

0000ec94 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    ec94:	b530      	push	{r4, r5, lr}
    ec96:	460c      	mov	r4, r1
    ec98:	4605      	mov	r5, r0
    ec9a:	b08d      	sub	sp, #52	; 0x34
    ec9c:	f04f 0103 	mov.w	r1, #3
    eca0:	f104 0003 	add.w	r0, r4, #3
    eca4:	b112      	cbz	r2, ecac <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    eca6:	f7f6 fcf9 	bl	569c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    ecaa:	e001      	b.n	ecb0 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    ecac:	f7f6 fd04 	bl	56b8 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    ecb0:	7960      	ldrb	r0, [r4, #5]
    ecb2:	220d      	movs	r2, #13
    ecb4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    ecb8:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    ecbc:	7160      	strb	r0, [r4, #5]
    ecbe:	2100      	movs	r1, #0
    ecc0:	a804      	add	r0, sp, #16
    ecc2:	f7fe fe4b 	bl	d95c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    ecc6:	78e0      	ldrb	r0, [r4, #3]
    ecc8:	f88d 001f 	strb.w	r0, [sp, #31]
    eccc:	7920      	ldrb	r0, [r4, #4]
    ecce:	f88d 001e 	strb.w	r0, [sp, #30]
    ecd2:	7960      	ldrb	r0, [r4, #5]
    ecd4:	f88d 001d 	strb.w	r0, [sp, #29]
    ecd8:	2210      	movs	r2, #16
    ecda:	4629      	mov	r1, r5
    ecdc:	4668      	mov	r0, sp
    ecde:	f7fe fdc3 	bl	d868 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ece2:	4668      	mov	r0, sp
    ece4:	f7ff ff93 	bl	ec0e <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    ece8:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    ecec:	7020      	strb	r0, [r4, #0]
    ecee:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    ecf2:	7060      	strb	r0, [r4, #1]
    ecf4:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    ecf8:	70a0      	strb	r0, [r4, #2]
    ecfa:	b00d      	add	sp, #52	; 0x34
    ecfc:	bd30      	pop	{r4, r5, pc}

0000ecfe <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>:
    ecfe:	f7f7 beb3 	b.w	6a68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x420>
    ed02:	07c1      	lsls	r1, r0, #31
    ed04:	d001      	beq.n	ed0a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0xc>
    ed06:	2001      	movs	r0, #1
    ed08:	4770      	bx	lr
    ed0a:	0780      	lsls	r0, r0, #30
    ed0c:	d501      	bpl.n	ed12 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x14>
    ed0e:	2002      	movs	r0, #2
    ed10:	4770      	bx	lr
    ed12:	2000      	movs	r0, #0
    ed14:	4770      	bx	lr
    ed16:	b510      	push	{r4, lr}
    ed18:	2801      	cmp	r0, #1
    ed1a:	d008      	beq.n	ed2e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    ed1c:	2802      	cmp	r0, #2
    ed1e:	d004      	beq.n	ed2a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x2c>
    ed20:	f240 31f3 	movw	r1, #1011	; 0x3f3
    ed24:	2006      	movs	r0, #6
    ed26:	f7f6 fc1b 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ed2a:	2001      	movs	r0, #1
    ed2c:	bd10      	pop	{r4, pc}
    ed2e:	2000      	movs	r0, #0
    ed30:	bd10      	pop	{r4, pc}
    ed32:	2900      	cmp	r1, #0
    ed34:	d004      	beq.n	ed40 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x42>
    ed36:	2801      	cmp	r0, #1
    ed38:	d003      	beq.n	ed42 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    ed3a:	2901      	cmp	r1, #1
    ed3c:	d001      	beq.n	ed42 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    ed3e:	2002      	movs	r0, #2
    ed40:	4770      	bx	lr
    ed42:	2001      	movs	r0, #1
    ed44:	4770      	bx	lr
    ed46:	f7ff bc4b 	b.w	e5e0 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000ed4a <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    ed4a:	2101      	movs	r1, #1
    ed4c:	f7f8 b986 	b.w	705c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5c>

0000ed50 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    ed50:	b510      	push	{r4, lr}
    ed52:	f002 fc2f 	bl	115b4 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    ed56:	b118      	cbz	r0, ed60 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    ed58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ed5c:	f7fc bef6 	b.w	bb4c <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    ed60:	20ff      	movs	r0, #255	; 0xff
    ed62:	bd10      	pop	{r4, pc}

0000ed64 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    ed64:	b510      	push	{r4, lr}
    ed66:	f7f8 f9c1 	bl	70ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xec>
    ed6a:	2810      	cmp	r0, #16
    ed6c:	d003      	beq.n	ed76 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    ed6e:	f7f8 f98d 	bl	708c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8c>
    ed72:	2810      	cmp	r0, #16
    ed74:	d100      	bne.n	ed78 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x14>
    ed76:	2008      	movs	r0, #8
    ed78:	bd10      	pop	{r4, pc}

0000ed7a <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    ed7a:	b510      	push	{r4, lr}
    ed7c:	f7f8 f9b6 	bl	70ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xec>
    ed80:	2810      	cmp	r0, #16
    ed82:	d003      	beq.n	ed8c <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY+0x12>
    ed84:	f7f8 fa10 	bl	71a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a8>
    ed88:	2001      	movs	r0, #1
    ed8a:	bd10      	pop	{r4, pc}
    ed8c:	2000      	movs	r0, #0
    ed8e:	bd10      	pop	{r4, pc}

0000ed90 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    ed90:	b570      	push	{r4, r5, r6, lr}
    ed92:	460e      	mov	r6, r1
    ed94:	b08c      	sub	sp, #48	; 0x30
    ed96:	4614      	mov	r4, r2
    ed98:	4601      	mov	r1, r0
    ed9a:	461d      	mov	r5, r3
    ed9c:	2210      	movs	r2, #16
    ed9e:	4668      	mov	r0, sp
    eda0:	f000 f928 	bl	eff4 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    eda4:	2210      	movs	r2, #16
    eda6:	4631      	mov	r1, r6
    eda8:	a804      	add	r0, sp, #16
    edaa:	f000 f923 	bl	eff4 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    edae:	4668      	mov	r0, sp
    edb0:	f7ff ff2d 	bl	ec0e <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    edb4:	a908      	add	r1, sp, #32
    edb6:	f04f 0210 	mov.w	r2, #16
    edba:	4628      	mov	r0, r5
    edbc:	b11c      	cbz	r4, edc6 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    edbe:	f000 f919 	bl	eff4 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    edc2:	b00c      	add	sp, #48	; 0x30
    edc4:	bd70      	pop	{r4, r5, r6, pc}
    edc6:	f7fe fd4f 	bl	d868 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    edca:	e7fa      	b.n	edc2 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>

0000edcc <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    edcc:	b510      	push	{r4, lr}
    edce:	460c      	mov	r4, r1
    edd0:	2100      	movs	r1, #0
    edd2:	f7ff fd6d 	bl	e8b0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    edd6:	6060      	str	r0, [r4, #4]
    edd8:	b118      	cbz	r0, ede2 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x16>
    edda:	2001      	movs	r0, #1
    eddc:	7020      	strb	r0, [r4, #0]
    edde:	2000      	movs	r0, #0
    ede0:	bd10      	pop	{r4, pc}
    ede2:	2002      	movs	r0, #2
    ede4:	bd10      	pop	{r4, pc}

0000ede6 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    ede6:	f240 41e2 	movw	r1, #1250	; 0x4e2
    edea:	4348      	muls	r0, r1
    edec:	4770      	bx	lr

0000edee <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    edee:	f240 41e2 	movw	r1, #1250	; 0x4e2
    edf2:	fbb0 f0f1 	udiv	r0, r0, r1
    edf6:	b280      	uxth	r0, r0
    edf8:	4770      	bx	lr

0000edfa <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
    edfa:	b570      	push	{r4, r5, r6, lr}
    edfc:	4604      	mov	r4, r0
    edfe:	4290      	cmp	r0, r2
    ee00:	d20b      	bcs.n	ee1a <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x20>
    ee02:	1b10      	subs	r0, r2, r4
    ee04:	2865      	cmp	r0, #101	; 0x65
    ee06:	d200      	bcs.n	ee0a <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>
    ee08:	2065      	movs	r0, #101	; 0x65
    ee0a:	1825      	adds	r5, r4, r0
    ee0c:	428d      	cmp	r5, r1
    ee0e:	d803      	bhi.n	ee18 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x1e>
    ee10:	2103      	movs	r1, #3
    ee12:	f7f3 fe1f 	bl	2a54 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    ee16:	b108      	cbz	r0, ee1c <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x22>
    ee18:	4620      	mov	r0, r4
    ee1a:	bd70      	pop	{r4, r5, r6, pc}
    ee1c:	4628      	mov	r0, r5
    ee1e:	bd70      	pop	{r4, r5, r6, pc}

0000ee20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    ee20:	b510      	push	{r4, lr}
    ee22:	f1a2 030f 	sub.w	r3, r2, #15
    ee26:	290c      	cmp	r1, #12
    ee28:	d244      	bcs.n	eeb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ee2a:	e8df f001 	tbb	[pc, r1]
    ee2e:	0806      	.short	0x0806
    ee30:	1815120d 	.word	0x1815120d
    ee34:	4127241c 	.word	0x4127241c
    ee38:	312a      	.short	0x312a
    ee3a:	b3c2      	cbz	r2, eeae <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x8e>
    ee3c:	e03a      	b.n	eeb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ee3e:	2a07      	cmp	r2, #7
    ee40:	d03a      	beq.n	eeb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ee42:	2a08      	cmp	r2, #8
    ee44:	d038      	beq.n	eeb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ee46:	e035      	b.n	eeb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ee48:	2a0c      	cmp	r2, #12
    ee4a:	d035      	beq.n	eeb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ee4c:	2a0b      	cmp	r2, #11
    ee4e:	d033      	beq.n	eeb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ee50:	e030      	b.n	eeb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ee52:	2a0d      	cmp	r2, #13
    ee54:	d030      	beq.n	eeb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ee56:	e02d      	b.n	eeb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ee58:	2b0c      	cmp	r3, #12
    ee5a:	d92d      	bls.n	eeb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ee5c:	e02a      	b.n	eeb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ee5e:	3a10      	subs	r2, #16
    ee60:	2a0b      	cmp	r2, #11
    ee62:	d929      	bls.n	eeb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ee64:	e026      	b.n	eeb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ee66:	2b03      	cmp	r3, #3
    ee68:	d926      	bls.n	eeb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ee6a:	f890 004c 	ldrb.w	r0, [r0, #76]	; 0x4c
    ee6e:	b308      	cbz	r0, eeb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ee70:	2a1b      	cmp	r2, #27
    ee72:	d921      	bls.n	eeb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ee74:	e01e      	b.n	eeb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ee76:	2a04      	cmp	r2, #4
    ee78:	d01e      	beq.n	eeb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ee7a:	e01b      	b.n	eeb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ee7c:	2a06      	cmp	r2, #6
    ee7e:	d01b      	beq.n	eeb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ee80:	e018      	b.n	eeb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ee82:	2a1c      	cmp	r2, #28
    ee84:	d018      	beq.n	eeb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ee86:	2a1d      	cmp	r2, #29
    ee88:	d016      	beq.n	eeb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ee8a:	2a1e      	cmp	r2, #30
    ee8c:	d014      	beq.n	eeb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ee8e:	e011      	b.n	eeb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ee90:	2a1f      	cmp	r2, #31
    ee92:	d011      	beq.n	eeb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ee94:	2a20      	cmp	r2, #32
    ee96:	d00f      	beq.n	eeb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ee98:	2a21      	cmp	r2, #33	; 0x21
    ee9a:	d00d      	beq.n	eeb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ee9c:	2a22      	cmp	r2, #34	; 0x22
    ee9e:	d00b      	beq.n	eeb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    eea0:	2a23      	cmp	r2, #35	; 0x23
    eea2:	d009      	beq.n	eeb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    eea4:	2a24      	cmp	r2, #36	; 0x24
    eea6:	d007      	beq.n	eeb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    eea8:	2a27      	cmp	r2, #39	; 0x27
    eeaa:	d005      	beq.n	eeb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    eeac:	e002      	b.n	eeb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    eeae:	e003      	b.n	eeb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    eeb0:	2a0e      	cmp	r2, #14
    eeb2:	d001      	beq.n	eeb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    eeb4:	2000      	movs	r0, #0
    eeb6:	bd10      	pop	{r4, pc}
    eeb8:	2001      	movs	r0, #1
    eeba:	bd10      	pop	{r4, pc}

0000eebc <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    eebc:	280c      	cmp	r0, #12
    eebe:	d013      	beq.n	eee8 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    eec0:	280b      	cmp	r0, #11
    eec2:	d011      	beq.n	eee8 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    eec4:	280d      	cmp	r0, #13
    eec6:	d00f      	beq.n	eee8 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    eec8:	281f      	cmp	r0, #31
    eeca:	d00d      	beq.n	eee8 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    eecc:	2820      	cmp	r0, #32
    eece:	d00b      	beq.n	eee8 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    eed0:	2821      	cmp	r0, #33	; 0x21
    eed2:	d009      	beq.n	eee8 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    eed4:	2822      	cmp	r0, #34	; 0x22
    eed6:	d007      	beq.n	eee8 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    eed8:	2823      	cmp	r0, #35	; 0x23
    eeda:	d005      	beq.n	eee8 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    eedc:	2824      	cmp	r0, #36	; 0x24
    eede:	d003      	beq.n	eee8 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    eee0:	2827      	cmp	r0, #39	; 0x27
    eee2:	d001      	beq.n	eee8 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    eee4:	2000      	movs	r0, #0
    eee6:	4770      	bx	lr
    eee8:	2001      	movs	r0, #1
    eeea:	4770      	bx	lr

0000eeec <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    eeec:	f011 0f0c 	tst.w	r1, #12
    eef0:	d018      	beq.n	ef24 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x38>
    eef2:	074a      	lsls	r2, r1, #29
    eef4:	f44f 7116 	mov.w	r1, #600	; 0x258
    eef8:	2a00      	cmp	r2, #0
    eefa:	da02      	bge.n	ef02 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    eefc:	f04f 0210 	mov.w	r2, #16
    ef00:	e001      	b.n	ef06 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    ef02:	f04f 0240 	mov.w	r2, #64	; 0x40
    ef06:	da01      	bge.n	ef0c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    ef08:	f04f 0196 	mov.w	r1, #150	; 0x96
    ef0c:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    ef10:	eba0 0301 	sub.w	r3, r0, r1
    ef14:	4288      	cmp	r0, r1
    ef16:	d903      	bls.n	ef20 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    ef18:	fb93 f0f2 	sdiv	r0, r3, r2
    ef1c:	b280      	uxth	r0, r0
    ef1e:	4770      	bx	lr
    ef20:	2000      	movs	r0, #0
    ef22:	4770      	bx	lr
    ef24:	2902      	cmp	r1, #2
    ef26:	d008      	beq.n	ef3a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    ef28:	2870      	cmp	r0, #112	; 0x70
    ef2a:	d9f9      	bls.n	ef20 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    ef2c:	3870      	subs	r0, #112	; 0x70
    ef2e:	17c1      	asrs	r1, r0, #31
    ef30:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    ef34:	f3c0 00cf 	ubfx	r0, r0, #3, #16
    ef38:	4770      	bx	lr
    ef3a:	283c      	cmp	r0, #60	; 0x3c
    ef3c:	d9f0      	bls.n	ef20 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    ef3e:	383c      	subs	r0, #60	; 0x3c
    ef40:	17c1      	asrs	r1, r0, #31
    ef42:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    ef46:	f3c0 008f 	ubfx	r0, r0, #2, #16
    ef4a:	4770      	bx	lr

0000ef4c <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    ef4c:	6809      	ldr	r1, [r1, #0]
    ef4e:	f8c0 106a 	str.w	r1, [r0, #106]	; 0x6a
    ef52:	4770      	bx	lr

0000ef54 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>:
    ef54:	07c1      	lsls	r1, r0, #31
    ef56:	d001      	beq.n	ef5c <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x8>
    ef58:	2001      	movs	r0, #1
    ef5a:	4770      	bx	lr
    ef5c:	0781      	lsls	r1, r0, #30
    ef5e:	d501      	bpl.n	ef64 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x10>
    ef60:	2002      	movs	r0, #2
    ef62:	4770      	bx	lr
    ef64:	0740      	lsls	r0, r0, #29
    ef66:	d501      	bpl.n	ef6c <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x18>
    ef68:	2008      	movs	r0, #8
    ef6a:	4770      	bx	lr
    ef6c:	2000      	movs	r0, #0
    ef6e:	4770      	bx	lr

0000ef70 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
    ef70:	b510      	push	{r4, lr}
    ef72:	f640 12c4 	movw	r2, #2500	; 0x9c4
    ef76:	2901      	cmp	r1, #1
    ef78:	d006      	beq.n	ef88 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x18>
    ef7a:	2902      	cmp	r1, #2
    ef7c:	d005      	beq.n	ef8a <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
    ef7e:	f240 31ba 	movw	r1, #954	; 0x3ba
    ef82:	2029      	movs	r0, #41	; 0x29
    ef84:	f7f6 faec 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ef88:	b108      	cbz	r0, ef8e <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1e>
    ef8a:	4610      	mov	r0, r2
    ef8c:	bd10      	pop	{r4, pc}
    ef8e:	f240 40e2 	movw	r0, #1250	; 0x4e2
    ef92:	bd10      	pop	{r4, pc}

0000ef94 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    ef94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ef98:	4607      	mov	r7, r0
    ef9a:	460e      	mov	r6, r1
    ef9c:	e9d7 5404 	ldrd	r5, r4, [r7, #16]
    efa0:	f7f4 f92e 	bl	3200 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    efa4:	b198      	cbz	r0, efce <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x3a>
    efa6:	b31e      	cbz	r6, eff0 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    efa8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    efac:	1b40      	subs	r0, r0, r5
    efae:	2300      	movs	r3, #0
    efb0:	eb61 0104 	sbc.w	r1, r1, r4
    efb4:	461a      	mov	r2, r3
    efb6:	1a1b      	subs	r3, r3, r0
    efb8:	418a      	sbcs	r2, r1
    efba:	da19      	bge.n	eff0 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    efbc:	1c42      	adds	r2, r0, #1
    efbe:	f171 0100 	sbcs.w	r1, r1, #0
    efc2:	db07      	blt.n	efd4 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x40>
    efc4:	f240 2136 	movw	r1, #566	; 0x236
    efc8:	2029      	movs	r0, #41	; 0x29
    efca:	f7f6 fac9 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    efce:	f44f 710b 	mov.w	r1, #556	; 0x22c
    efd2:	e7f9      	b.n	efc8 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>
    efd4:	4430      	add	r0, r6
    efd6:	1e40      	subs	r0, r0, #1
    efd8:	fbb0 f1f6 	udiv	r1, r0, r6
    efdc:	fb01 f006 	mul.w	r0, r1, r6
    efe0:	1828      	adds	r0, r5, r0
    efe2:	f144 0400 	adc.w	r4, r4, #0
    efe6:	e9c7 0404 	strd	r0, r4, [r7, #16]
    efea:	4608      	mov	r0, r1
    efec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    eff0:	2000      	movs	r0, #0
    eff2:	e7fb      	b.n	efec <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x58>

0000eff4 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    eff4:	b530      	push	{r4, r5, lr}
    eff6:	4613      	mov	r3, r2
    eff8:	e006      	b.n	f008 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    effa:	18cc      	adds	r4, r1, r3
    effc:	1ad5      	subs	r5, r2, r3
    effe:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    f002:	1e5b      	subs	r3, r3, #1
    f004:	5544      	strb	r4, [r0, r5]
    f006:	b2db      	uxtb	r3, r3
    f008:	2b00      	cmp	r3, #0
    f00a:	d1f6      	bne.n	effa <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    f00c:	bd30      	pop	{r4, r5, pc}

0000f00e <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>:
    f00e:	b538      	push	{r3, r4, r5, lr}
    f010:	4605      	mov	r5, r0
    f012:	460c      	mov	r4, r1
    f014:	4668      	mov	r0, sp
    f016:	f7fd fa69 	bl	c4ec <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    f01a:	b310      	cbz	r0, f062 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x54>
    f01c:	f99d 0000 	ldrsb.w	r0, [sp]
    f020:	7260      	strb	r0, [r4, #9]
    f022:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
    f026:	72a1      	strb	r1, [r4, #10]
    f028:	f994 100b 	ldrsb.w	r1, [r4, #11]
    f02c:	2200      	movs	r2, #0
    f02e:	1a41      	subs	r1, r0, r1
    f030:	d500      	bpl.n	f034 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x26>
    f032:	4249      	negs	r1, r1
    f034:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
    f038:	428b      	cmp	r3, r1
    f03a:	dc10      	bgt.n	f05e <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    f03c:	2bff      	cmp	r3, #255	; 0xff
    f03e:	d00e      	beq.n	f05e <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    f040:	7b21      	ldrb	r1, [r4, #12]
    f042:	1c49      	adds	r1, r1, #1
    f044:	b2c9      	uxtb	r1, r1
    f046:	7321      	strb	r1, [r4, #12]
    f048:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
    f04c:	4299      	cmp	r1, r3
    f04e:	d802      	bhi.n	f056 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x48>
    f050:	7ae1      	ldrb	r1, [r4, #11]
    f052:	297f      	cmp	r1, #127	; 0x7f
    f054:	d103      	bne.n	f05e <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    f056:	72e0      	strb	r0, [r4, #11]
    f058:	2000      	movs	r0, #0
    f05a:	7320      	strb	r0, [r4, #12]
    f05c:	2201      	movs	r2, #1
    f05e:	4610      	mov	r0, r2
    f060:	bd38      	pop	{r3, r4, r5, pc}
    f062:	207f      	movs	r0, #127	; 0x7f
    f064:	7260      	strb	r0, [r4, #9]
    f066:	2000      	movs	r0, #0
    f068:	bd38      	pop	{r3, r4, r5, pc}

0000f06a <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    f06a:	2300      	movs	r3, #0
    f06c:	6303      	str	r3, [r0, #48]	; 0x30
    f06e:	8702      	strh	r2, [r0, #56]	; 0x38
    f070:	f240 2371 	movw	r3, #625	; 0x271
    f074:	435a      	muls	r2, r3
    f076:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    f07a:	1e52      	subs	r2, r2, #1
    f07c:	fbb2 f1f1 	udiv	r1, r2, r1
    f080:	6341      	str	r1, [r0, #52]	; 0x34
    f082:	4770      	bx	lr

0000f084 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>:
    f084:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    f088:	4607      	mov	r7, r0
    f08a:	4690      	mov	r8, r2
    f08c:	468b      	mov	fp, r1
    f08e:	2601      	movs	r6, #1
    f090:	4608      	mov	r0, r1
    f092:	f000 f94a 	bl	f32a <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    f096:	4682      	mov	sl, r0
    f098:	4658      	mov	r0, fp
    f09a:	f000 f952 	bl	f342 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    f09e:	4681      	mov	r9, r0
    f0a0:	f7ff ff58 	bl	ef54 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    f0a4:	4604      	mov	r4, r0
    f0a6:	4650      	mov	r0, sl
    f0a8:	f7ff ff54 	bl	ef54 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    f0ac:	4605      	mov	r5, r0
    f0ae:	ea54 0005 	orrs.w	r0, r4, r5
    f0b2:	d100      	bne.n	f0b6 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x32>
    f0b4:	2600      	movs	r6, #0
    f0b6:	f7fc fccb 	bl	ba50 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f0ba:	ea10 0f09 	tst.w	r0, r9
    f0be:	d100      	bne.n	f0c2 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x3e>
    f0c0:	2400      	movs	r4, #0
    f0c2:	f7fc fcc5 	bl	ba50 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f0c6:	ea10 0f0a 	tst.w	r0, sl
    f0ca:	d100      	bne.n	f0ce <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x4a>
    f0cc:	2500      	movs	r5, #0
    f0ce:	f897 006e 	ldrb.w	r0, [r7, #110]	; 0x6e
    f0d2:	42a0      	cmp	r0, r4
    f0d4:	d100      	bne.n	f0d8 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x54>
    f0d6:	2400      	movs	r4, #0
    f0d8:	f888 4000 	strb.w	r4, [r8]
    f0dc:	f897 006f 	ldrb.w	r0, [r7, #111]	; 0x6f
    f0e0:	42a8      	cmp	r0, r5
    f0e2:	d100      	bne.n	f0e6 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x62>
    f0e4:	2500      	movs	r5, #0
    f0e6:	f888 5001 	strb.w	r5, [r8, #1]
    f0ea:	b974      	cbnz	r4, f10a <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    f0ec:	b96d      	cbnz	r5, f10a <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    f0ee:	4658      	mov	r0, fp
    f0f0:	f000 f925 	bl	f33e <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    f0f4:	f8b7 107c 	ldrh.w	r1, [r7, #124]	; 0x7c
    f0f8:	1a40      	subs	r0, r0, r1
    f0fa:	b200      	sxth	r0, r0
    f0fc:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    f100:	4288      	cmp	r0, r1
    f102:	dc01      	bgt.n	f108 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x84>
    f104:	2800      	cmp	r0, #0
    f106:	dc00      	bgt.n	f10a <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    f108:	2600      	movs	r6, #0
    f10a:	4630      	mov	r0, r6
    f10c:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

0000f110 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
    f110:	f240 41e2 	movw	r1, #1250	; 0x4e2
    f114:	4348      	muls	r0, r1
    f116:	4770      	bx	lr

0000f118 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    f118:	f240 2171 	movw	r1, #625	; 0x271
    f11c:	fb10 f001 	smulbb	r0, r0, r1
    f120:	f64f 71ff 	movw	r1, #65535	; 0xffff
    f124:	ea01 0040 	and.w	r0, r1, r0, lsl #1
    f128:	4770      	bx	lr

0000f12a <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    f12a:	b510      	push	{r4, lr}
    f12c:	2300      	movs	r3, #0
    f12e:	461a      	mov	r2, r3
    f130:	e003      	b.n	f13a <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    f132:	5c84      	ldrb	r4, [r0, r2]
    f134:	4323      	orrs	r3, r4
    f136:	1c52      	adds	r2, r2, #1
    f138:	b2d2      	uxtb	r2, r2
    f13a:	428a      	cmp	r2, r1
    f13c:	d3f9      	bcc.n	f132 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    f13e:	b10b      	cbz	r3, f144 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    f140:	2000      	movs	r0, #0
    f142:	bd10      	pop	{r4, pc}
    f144:	2001      	movs	r0, #1
    f146:	bd10      	pop	{r4, pc}

0000f148 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    f148:	b510      	push	{r4, lr}
    f14a:	4604      	mov	r4, r0
    f14c:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    f150:	b108      	cbz	r0, f156 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    f152:	2825      	cmp	r0, #37	; 0x25
    f154:	d901      	bls.n	f15a <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    f156:	2012      	movs	r0, #18
    f158:	bd10      	pop	{r4, pc}
    f15a:	b12a      	cbz	r2, f168 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>
    f15c:	7da0      	ldrb	r0, [r4, #22]
    f15e:	b128      	cbz	r0, f16c <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x24>
    f160:	2801      	cmp	r0, #1
    f162:	d009      	beq.n	f178 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x30>
    f164:	201f      	movs	r0, #31
    f166:	bd10      	pop	{r4, pc}
    f168:	2000      	movs	r0, #0
    f16a:	bd10      	pop	{r4, pc}
    f16c:	4620      	mov	r0, r4
    f16e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f172:	4611      	mov	r1, r2
    f174:	f7f8 b90e 	b.w	7394 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xa8>
    f178:	88a2      	ldrh	r2, [r4, #4]
    f17a:	6949      	ldr	r1, [r1, #20]
    f17c:	f104 0016 	add.w	r0, r4, #22
    f180:	f7f8 f8b4 	bl	72ec <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    f184:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
    f188:	e7ee      	b.n	f168 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>

0000f18a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    f18a:	b530      	push	{r4, r5, lr}
    f18c:	1c42      	adds	r2, r0, #1
    f18e:	428a      	cmp	r2, r1
    f190:	d004      	beq.n	f19c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x12>
    f192:	680a      	ldr	r2, [r1, #0]
    f194:	f8c0 2001 	str.w	r2, [r0, #1]
    f198:	7909      	ldrb	r1, [r1, #4]
    f19a:	7141      	strb	r1, [r0, #5]
    f19c:	7941      	ldrb	r1, [r0, #5]
    f19e:	f001 011f 	and.w	r1, r1, #31
    f1a2:	7141      	strb	r1, [r0, #5]
    f1a4:	2100      	movs	r1, #0
    f1a6:	72c1      	strb	r1, [r0, #11]
    f1a8:	1843      	adds	r3, r0, r1
    f1aa:	1c49      	adds	r1, r1, #1
    f1ac:	785c      	ldrb	r4, [r3, #1]
    f1ae:	b2c9      	uxtb	r1, r1
    f1b0:	f004 0201 	and.w	r2, r4, #1
    f1b4:	0864      	lsrs	r4, r4, #1
    f1b6:	f004 0501 	and.w	r5, r4, #1
    f1ba:	4415      	add	r5, r2
    f1bc:	0862      	lsrs	r2, r4, #1
    f1be:	f002 0401 	and.w	r4, r2, #1
    f1c2:	442c      	add	r4, r5
    f1c4:	0852      	lsrs	r2, r2, #1
    f1c6:	f002 0501 	and.w	r5, r2, #1
    f1ca:	442c      	add	r4, r5
    f1cc:	0852      	lsrs	r2, r2, #1
    f1ce:	f002 0501 	and.w	r5, r2, #1
    f1d2:	442c      	add	r4, r5
    f1d4:	0852      	lsrs	r2, r2, #1
    f1d6:	f002 0501 	and.w	r5, r2, #1
    f1da:	442c      	add	r4, r5
    f1dc:	0852      	lsrs	r2, r2, #1
    f1de:	f002 0501 	and.w	r5, r2, #1
    f1e2:	442c      	add	r4, r5
    f1e4:	eb04 0252 	add.w	r2, r4, r2, lsr #1
    f1e8:	719a      	strb	r2, [r3, #6]
    f1ea:	7ac3      	ldrb	r3, [r0, #11]
    f1ec:	2905      	cmp	r1, #5
    f1ee:	441a      	add	r2, r3
    f1f0:	72c2      	strb	r2, [r0, #11]
    f1f2:	d3d9      	bcc.n	f1a8 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x1e>
    f1f4:	bd30      	pop	{r4, r5, pc}
    f1f6:	b570      	push	{r4, r5, r6, lr}
    f1f8:	f8d0 201f 	ldr.w	r2, [r0, #31]
    f1fc:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
    f200:	f012 0fff 	tst.w	r2, #255	; 0xff
    f204:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    f208:	d108      	bne.n	f21c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    f20a:	f3c2 2407 	ubfx	r4, r2, #8, #8
    f20e:	b92c      	cbnz	r4, f21c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    f210:	f3c2 4407 	ubfx	r4, r2, #16, #8
    f214:	b914      	cbnz	r4, f21c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    f216:	0e12      	lsrs	r2, r2, #24
    f218:	d100      	bne.n	f21c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    f21a:	b35b      	cbz	r3, f274 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    f21c:	f8b0 2019 	ldrh.w	r2, [r0, #25]
    f220:	f8b0 501b 	ldrh.w	r5, [r0, #27]
    f224:	f8b0 4017 	ldrh.w	r4, [r0, #23]
    f228:	7d83      	ldrb	r3, [r0, #22]
    f22a:	b141      	cbz	r1, f23e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb4>
    f22c:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    f230:	d905      	bls.n	f23e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb4>
    f232:	f640 5107 	movw	r1, #3335	; 0xd07
    f236:	428a      	cmp	r2, r1
    f238:	d801      	bhi.n	f23e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb4>
    f23a:	2101      	movs	r1, #1
    f23c:	e000      	b.n	f240 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb6>
    f23e:	2100      	movs	r1, #0
    f240:	7846      	ldrb	r6, [r0, #1]
    f242:	2e22      	cmp	r6, #34	; 0x22
    f244:	d116      	bne.n	f274 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    f246:	b959      	cbnz	r1, f260 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xd6>
    f248:	1f91      	subs	r1, r2, #6
    f24a:	f640 467a 	movw	r6, #3194	; 0xc7a
    f24e:	42b1      	cmp	r1, r6
    f250:	d810      	bhi.n	f274 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    f252:	b17b      	cbz	r3, f274 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    f254:	2b08      	cmp	r3, #8
    f256:	d80d      	bhi.n	f274 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    f258:	4293      	cmp	r3, r2
    f25a:	d20b      	bcs.n	f274 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    f25c:	4294      	cmp	r4, r2
    f25e:	d809      	bhi.n	f274 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    f260:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    f264:	d206      	bcs.n	f274 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    f266:	f8b0 001d 	ldrh.w	r0, [r0, #29]
    f26a:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
    f26e:	d801      	bhi.n	f274 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    f270:	2001      	movs	r0, #1
    f272:	bd70      	pop	{r4, r5, r6, pc}
    f274:	2000      	movs	r0, #0
    f276:	bd70      	pop	{r4, r5, r6, pc}

0000f278 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>:
    f278:	b570      	push	{r4, r5, r6, lr}
    f27a:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    f27e:	f8b0 5009 	ldrh.w	r5, [r0, #9]
    f282:	f830 4f05 	ldrh.w	r4, [r0, #5]!
    f286:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    f28a:	88c0      	ldrh	r0, [r0, #6]
    f28c:	b131      	cbz	r1, f29c <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x24>
    f28e:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    f292:	d903      	bls.n	f29c <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x24>
    f294:	f640 5107 	movw	r1, #3335	; 0xd07
    f298:	428a      	cmp	r2, r1
    f29a:	d90b      	bls.n	f2b4 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x3c>
    f29c:	1f91      	subs	r1, r2, #6
    f29e:	f640 467a 	movw	r6, #3194	; 0xc7a
    f2a2:	42b1      	cmp	r1, r6
    f2a4:	d80e      	bhi.n	f2c4 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    f2a6:	b16b      	cbz	r3, f2c4 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    f2a8:	2b08      	cmp	r3, #8
    f2aa:	d80b      	bhi.n	f2c4 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    f2ac:	4293      	cmp	r3, r2
    f2ae:	d209      	bcs.n	f2c4 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    f2b0:	4294      	cmp	r4, r2
    f2b2:	d807      	bhi.n	f2c4 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    f2b4:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    f2b8:	d204      	bcs.n	f2c4 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    f2ba:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
    f2be:	d801      	bhi.n	f2c4 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    f2c0:	2001      	movs	r0, #1
    f2c2:	bd70      	pop	{r4, r5, r6, pc}
    f2c4:	2000      	movs	r0, #0
    f2c6:	bd70      	pop	{r4, r5, r6, pc}

0000f2c8 <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>:
    f2c8:	6842      	ldr	r2, [r0, #4]
    f2ca:	600a      	str	r2, [r1, #0]
    f2cc:	7a00      	ldrb	r0, [r0, #8]
    f2ce:	7108      	strb	r0, [r1, #4]
    f2d0:	4770      	bx	lr

0000f2d2 <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>:
    f2d2:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    f2d6:	4770      	bx	lr

0000f2d8 <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>:
    f2d8:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    f2dc:	4770      	bx	lr

0000f2de <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>:
    f2de:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    f2e2:	4770      	bx	lr

0000f2e4 <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>:
    f2e4:	f8b0 000b 	ldrh.w	r0, [r0, #11]
    f2e8:	4770      	bx	lr

0000f2ea <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>:
    f2ea:	8980      	ldrh	r0, [r0, #12]
    f2ec:	8008      	strh	r0, [r1, #0]
    f2ee:	4770      	bx	lr

0000f2f0 <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>:
    f2f0:	f8d0 0016 	ldr.w	r0, [r0, #22]
    f2f4:	6008      	str	r0, [r1, #0]
    f2f6:	4770      	bx	lr

0000f2f8 <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>:
    f2f8:	6842      	ldr	r2, [r0, #4]
    f2fa:	600a      	str	r2, [r1, #0]
    f2fc:	6880      	ldr	r0, [r0, #8]
    f2fe:	6048      	str	r0, [r1, #4]
    f300:	4770      	bx	lr

0000f302 <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>:
    f302:	f850 2f0e 	ldr.w	r2, [r0, #14]!
    f306:	600a      	str	r2, [r1, #0]
    f308:	6840      	ldr	r0, [r0, #4]
    f30a:	6048      	str	r0, [r1, #4]
    f30c:	4770      	bx	lr

0000f30e <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>:
    f30e:	6842      	ldr	r2, [r0, #4]
    f310:	600a      	str	r2, [r1, #0]
    f312:	6880      	ldr	r0, [r0, #8]
    f314:	6048      	str	r0, [r1, #4]
    f316:	4770      	bx	lr

0000f318 <sym_KIWKQDEBPWXHISYFTEC7I32RP3MHD6CJEPVDW6I>:
    f318:	6842      	ldr	r2, [r0, #4]
    f31a:	600a      	str	r2, [r1, #0]
    f31c:	6880      	ldr	r0, [r0, #8]
    f31e:	6048      	str	r0, [r1, #4]
    f320:	4770      	bx	lr

0000f322 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>:
    f322:	7800      	ldrb	r0, [r0, #0]
    f324:	f000 0003 	and.w	r0, r0, #3
    f328:	4770      	bx	lr

0000f32a <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>:
    f32a:	7900      	ldrb	r0, [r0, #4]
    f32c:	4770      	bx	lr

0000f32e <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>:
    f32e:	8880      	ldrh	r0, [r0, #4]
    f330:	4770      	bx	lr

0000f332 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>:
    f332:	88c0      	ldrh	r0, [r0, #6]
    f334:	4770      	bx	lr

0000f336 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>:
    f336:	8900      	ldrh	r0, [r0, #8]
    f338:	4770      	bx	lr

0000f33a <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>:
    f33a:	8940      	ldrh	r0, [r0, #10]
    f33c:	4770      	bx	lr

0000f33e <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>:
    f33e:	88c0      	ldrh	r0, [r0, #6]
    f340:	4770      	bx	lr

0000f342 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>:
    f342:	7940      	ldrb	r0, [r0, #5]
    f344:	4770      	bx	lr

0000f346 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>:
    f346:	7900      	ldrb	r0, [r0, #4]
    f348:	4770      	bx	lr

0000f34a <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>:
    f34a:	7900      	ldrb	r0, [r0, #4]
    f34c:	4770      	bx	lr

0000f34e <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>:
    f34e:	8901      	ldrh	r1, [r0, #8]
    f350:	291b      	cmp	r1, #27
    f352:	d30c      	bcc.n	f36e <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    f354:	8941      	ldrh	r1, [r0, #10]
    f356:	f44f 72a4 	mov.w	r2, #328	; 0x148
    f35a:	4291      	cmp	r1, r2
    f35c:	d307      	bcc.n	f36e <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    f35e:	8881      	ldrh	r1, [r0, #4]
    f360:	291b      	cmp	r1, #27
    f362:	d304      	bcc.n	f36e <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    f364:	88c0      	ldrh	r0, [r0, #6]
    f366:	4290      	cmp	r0, r2
    f368:	d301      	bcc.n	f36e <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    f36a:	2001      	movs	r0, #1
    f36c:	4770      	bx	lr
    f36e:	2000      	movs	r0, #0
    f370:	4770      	bx	lr

0000f372 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>:
    f372:	b510      	push	{r4, lr}
    f374:	29fb      	cmp	r1, #251	; 0xfb
    f376:	d904      	bls.n	f382 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA+0x10>
    f378:	f240 51fe 	movw	r1, #1534	; 0x5fe
    f37c:	202a      	movs	r0, #42	; 0x2a
    f37e:	f7f6 f8ef 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f382:	7041      	strb	r1, [r0, #1]
    f384:	bd10      	pop	{r4, pc}

0000f386 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>:
    f386:	7901      	ldrb	r1, [r0, #4]
    f388:	0749      	lsls	r1, r1, #29
    f38a:	d004      	beq.n	f396 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    f38c:	7940      	ldrb	r0, [r0, #5]
    f38e:	0740      	lsls	r0, r0, #29
    f390:	d001      	beq.n	f396 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    f392:	2001      	movs	r0, #1
    f394:	4770      	bx	lr
    f396:	2000      	movs	r0, #0
    f398:	4770      	bx	lr

0000f39a <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>:
    f39a:	7901      	ldrb	r1, [r0, #4]
    f39c:	7940      	ldrb	r0, [r0, #5]
    f39e:	f001 0107 	and.w	r1, r1, #7
    f3a2:	1e4a      	subs	r2, r1, #1
    f3a4:	f000 0007 	and.w	r0, r0, #7
    f3a8:	4011      	ands	r1, r2
    f3aa:	1e42      	subs	r2, r0, #1
    f3ac:	4010      	ands	r0, r2
    f3ae:	4301      	orrs	r1, r0
    f3b0:	d001      	beq.n	f3b6 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x1c>
    f3b2:	2000      	movs	r0, #0
    f3b4:	4770      	bx	lr
    f3b6:	2001      	movs	r0, #1
    f3b8:	4770      	bx	lr

0000f3ba <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>:
    f3ba:	7900      	ldrb	r0, [r0, #4]
    f3bc:	4770      	bx	lr

0000f3be <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>:
    f3be:	7940      	ldrb	r0, [r0, #5]
    f3c0:	4770      	bx	lr

0000f3c2 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>:
    f3c2:	7101      	strb	r1, [r0, #4]
    f3c4:	4770      	bx	lr

0000f3c6 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>:
    f3c6:	7141      	strb	r1, [r0, #5]
    f3c8:	4770      	bx	lr

0000f3ca <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>:
    f3ca:	b510      	push	{r4, lr}
    f3cc:	2a1b      	cmp	r2, #27
    f3ce:	d904      	bls.n	f3da <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA+0x10>
    f3d0:	f240 4127 	movw	r1, #1063	; 0x427
    f3d4:	202a      	movs	r0, #42	; 0x2a
    f3d6:	f7f6 f8c3 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f3da:	7042      	strb	r2, [r0, #1]
    f3dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f3e0:	1cc0      	adds	r0, r0, #3
    f3e2:	f7fe ba41 	b.w	d868 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>

0000f3e6 <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>:
    f3e6:	6809      	ldr	r1, [r1, #0]
    f3e8:	60c1      	str	r1, [r0, #12]
    f3ea:	4770      	bx	lr

0000f3ec <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>:
    f3ec:	680a      	ldr	r2, [r1, #0]
    f3ee:	6042      	str	r2, [r0, #4]
    f3f0:	6849      	ldr	r1, [r1, #4]
    f3f2:	6081      	str	r1, [r0, #8]
    f3f4:	4770      	bx	lr

0000f3f6 <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>:
    f3f6:	680a      	ldr	r2, [r1, #0]
    f3f8:	6042      	str	r2, [r0, #4]
    f3fa:	6849      	ldr	r1, [r1, #4]
    f3fc:	6081      	str	r1, [r0, #8]
    f3fe:	4770      	bx	lr

0000f400 <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>:
    f400:	680a      	ldr	r2, [r1, #0]
    f402:	6042      	str	r2, [r0, #4]
    f404:	6849      	ldr	r1, [r1, #4]
    f406:	6081      	str	r1, [r0, #8]
    f408:	4770      	bx	lr

0000f40a <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>:
    f40a:	7802      	ldrb	r2, [r0, #0]
    f40c:	f001 0103 	and.w	r1, r1, #3
    f410:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    f414:	430a      	orrs	r2, r1
    f416:	7002      	strb	r2, [r0, #0]
    f418:	4770      	bx	lr

0000f41a <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>:
    f41a:	7101      	strb	r1, [r0, #4]
    f41c:	0a09      	lsrs	r1, r1, #8
    f41e:	7141      	strb	r1, [r0, #5]
    f420:	4770      	bx	lr

0000f422 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>:
    f422:	7181      	strb	r1, [r0, #6]
    f424:	0a09      	lsrs	r1, r1, #8
    f426:	71c1      	strb	r1, [r0, #7]
    f428:	4770      	bx	lr

0000f42a <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>:
    f42a:	7201      	strb	r1, [r0, #8]
    f42c:	0a09      	lsrs	r1, r1, #8
    f42e:	7241      	strb	r1, [r0, #9]
    f430:	4770      	bx	lr

0000f432 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>:
    f432:	7281      	strb	r1, [r0, #10]
    f434:	0a09      	lsrs	r1, r1, #8
    f436:	72c1      	strb	r1, [r0, #11]
    f438:	4770      	bx	lr

0000f43a <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>:
    f43a:	7802      	ldrb	r2, [r0, #0]
    f43c:	f002 020f 	and.w	r2, r2, #15
    f440:	2a03      	cmp	r2, #3
    f442:	d003      	beq.n	f44c <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x12>
    f444:	2a05      	cmp	r2, #5
    f446:	d104      	bne.n	f452 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x18>
    f448:	f7ff bed5 	b.w	f1f6 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x6c>
    f44c:	7840      	ldrb	r0, [r0, #1]
    f44e:	280c      	cmp	r0, #12
    f450:	d001      	beq.n	f456 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x1c>
    f452:	2000      	movs	r0, #0
    f454:	4770      	bx	lr
    f456:	2001      	movs	r0, #1
    f458:	4770      	bx	lr

0000f45a <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>:
    f45a:	b570      	push	{r4, r5, r6, lr}
    f45c:	4614      	mov	r4, r2
    f45e:	4605      	mov	r5, r0
    f460:	2a1f      	cmp	r2, #31
    f462:	d903      	bls.n	f46c <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I+0x12>
    f464:	21b5      	movs	r1, #181	; 0xb5
    f466:	202a      	movs	r0, #42	; 0x2a
    f468:	f7f6 f87a 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f46c:	f105 0009 	add.w	r0, r5, #9
    f470:	f7fe f9fa 	bl	d868 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f474:	1da4      	adds	r4, r4, #6
    f476:	706c      	strb	r4, [r5, #1]
    f478:	bd70      	pop	{r4, r5, r6, pc}

0000f47a <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>:
    f47a:	b510      	push	{r4, lr}
    f47c:	7802      	ldrb	r2, [r0, #0]
    f47e:	f001 030f 	and.w	r3, r1, #15
    f482:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    f486:	431a      	orrs	r2, r3
    f488:	7002      	strb	r2, [r0, #0]
    f48a:	2907      	cmp	r1, #7
    f48c:	d20c      	bcs.n	f4a8 <__kernel_ram_size+0x8>
    f48e:	e8df f001 	tbb	[pc, r1]
    f492:	0604      	.short	0x0604
    f494:	08040604 	.word	0x08040604
    f498:	0004      	.short	0x0004
    f49a:	2106      	movs	r1, #6
    f49c:	e002      	b.n	f4a4 <__kernel_ram_size+0x4>
    f49e:	210c      	movs	r1, #12
    f4a0:	e000      	b.n	f4a4 <__kernel_ram_size+0x4>
    f4a2:	2122      	movs	r1, #34	; 0x22
    f4a4:	7041      	strb	r1, [r0, #1]
    f4a6:	bd10      	pop	{r4, pc}
    f4a8:	216f      	movs	r1, #111	; 0x6f
    f4aa:	202a      	movs	r0, #42	; 0x2a
    f4ac:	f7f6 f858 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000f4b0 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>:
    f4b0:	680a      	ldr	r2, [r1, #0]
    f4b2:	f840 2f09 	str.w	r2, [r0, #9]!
    f4b6:	8889      	ldrh	r1, [r1, #4]
    f4b8:	8081      	strh	r1, [r0, #4]
    f4ba:	4770      	bx	lr

0000f4bc <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>:
    f4bc:	7802      	ldrb	r2, [r0, #0]
    f4be:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    f4c2:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    f4c6:	7002      	strb	r2, [r0, #0]
    f4c8:	4770      	bx	lr

0000f4ca <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>:
    f4ca:	680a      	ldr	r2, [r1, #0]
    f4cc:	f840 2f03 	str.w	r2, [r0, #3]!
    f4d0:	8889      	ldrh	r1, [r1, #4]
    f4d2:	8081      	strh	r1, [r0, #4]
    f4d4:	4770      	bx	lr

0000f4d6 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>:
    f4d6:	7802      	ldrb	r2, [r0, #0]
    f4d8:	2340      	movs	r3, #64	; 0x40
    f4da:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    f4de:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    f4e2:	430a      	orrs	r2, r1
    f4e4:	7002      	strb	r2, [r0, #0]
    f4e6:	4770      	bx	lr

0000f4e8 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>:
    f4e8:	b570      	push	{r4, r5, r6, lr}
    f4ea:	4614      	mov	r4, r2
    f4ec:	4605      	mov	r5, r0
    f4ee:	2a1f      	cmp	r2, #31
    f4f0:	d903      	bls.n	f4fa <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY+0x12>
    f4f2:	21d7      	movs	r1, #215	; 0xd7
    f4f4:	202a      	movs	r0, #42	; 0x2a
    f4f6:	f7f6 f833 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f4fa:	f105 0009 	add.w	r0, r5, #9
    f4fe:	f7fe f9b3 	bl	d868 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f502:	1da4      	adds	r4, r4, #6
    f504:	706c      	strb	r4, [r5, #1]
    f506:	bd70      	pop	{r4, r5, r6, pc}

0000f508 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>:
    f508:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    f50c:	4604      	mov	r4, r0
    f50e:	2000      	movs	r0, #0
    f510:	f7f6 fa1c 	bl	594c <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    f514:	2600      	movs	r6, #0
    f516:	4605      	mov	r5, r0
    f518:	4637      	mov	r7, r6
    f51a:	e00e      	b.n	f53a <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x32>
    f51c:	8820      	ldrh	r0, [r4, #0]
    f51e:	1c40      	adds	r0, r0, #1
    f520:	b280      	uxth	r0, r0
    f522:	8020      	strh	r0, [r4, #0]
    f524:	42a8      	cmp	r0, r5
    f526:	d300      	bcc.n	f52a <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x22>
    f528:	8027      	strh	r7, [r4, #0]
    f52a:	8820      	ldrh	r0, [r4, #0]
    f52c:	4669      	mov	r1, sp
    f52e:	f7ff fc4d 	bl	edcc <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f532:	2800      	cmp	r0, #0
    f534:	d007      	beq.n	f546 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x3e>
    f536:	1c76      	adds	r6, r6, #1
    f538:	b2f6      	uxtb	r6, r6
    f53a:	42ae      	cmp	r6, r5
    f53c:	d3ee      	bcc.n	f51c <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x14>
    f53e:	f64f 70ff 	movw	r0, #65535	; 0xffff
    f542:	8020      	strh	r0, [r4, #0]
    f544:	2012      	movs	r0, #18
    f546:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

0000f54a <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>:
    f54a:	6841      	ldr	r1, [r0, #4]
    f54c:	2200      	movs	r2, #0
    f54e:	f891 31d2 	ldrb.w	r3, [r1, #466]	; 0x1d2
    f552:	2b00      	cmp	r3, #0
    f554:	d004      	beq.n	f560 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x16>
    f556:	f881 21d2 	strb.w	r2, [r1, #466]	; 0x1d2
    f55a:	6840      	ldr	r0, [r0, #4]
    f55c:	f000 bd08 	b.w	ff70 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
    f560:	4770      	bx	lr

0000f562 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    f562:	b510      	push	{r4, lr}
    f564:	7901      	ldrb	r1, [r0, #4]
    f566:	b119      	cbz	r1, f570 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    f568:	2901      	cmp	r1, #1
    f56a:	d006      	beq.n	f57a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    f56c:	2000      	movs	r0, #0
    f56e:	bd10      	pop	{r4, pc}
    f570:	8842      	ldrh	r2, [r0, #2]
    f572:	6883      	ldr	r3, [r0, #8]
    f574:	8800      	ldrh	r0, [r0, #0]
    f576:	2102      	movs	r1, #2
    f578:	e003      	b.n	f582 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    f57a:	8842      	ldrh	r2, [r0, #2]
    f57c:	6883      	ldr	r3, [r0, #8]
    f57e:	8800      	ldrh	r0, [r0, #0]
    f580:	2101      	movs	r1, #1
    f582:	f7f7 ffb9 	bl	74f8 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x54>
    f586:	b908      	cbnz	r0, f58c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2a>
    f588:	f7f8 f80c 	bl	75a4 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>
    f58c:	2001      	movs	r0, #1
    f58e:	bd10      	pop	{r4, pc}
    f590:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    f594:	460e      	mov	r6, r1
    f596:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    f59a:	4617      	mov	r7, r2
    f59c:	39ff      	subs	r1, #255	; 0xff
    f59e:	d014      	beq.n	f5ca <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x68>
    f5a0:	8030      	strh	r0, [r6, #0]
    f5a2:	2100      	movs	r1, #0
    f5a4:	7171      	strb	r1, [r6, #5]
    f5a6:	f7f6 fc03 	bl	5db0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    f5aa:	4604      	mov	r4, r0
    f5ac:	f7fe ffa3 	bl	e4f6 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    f5b0:	0005      	movs	r5, r0
    f5b2:	d00a      	beq.n	f5ca <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x68>
    f5b4:	4620      	mov	r0, r4
    f5b6:	4629      	mov	r1, r5
    f5b8:	aa01      	add	r2, sp, #4
    f5ba:	f7fe ffbf 	bl	e53c <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    f5be:	8070      	strh	r0, [r6, #2]
    f5c0:	b130      	cbz	r0, f5d0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x6e>
    f5c2:	28fb      	cmp	r0, #251	; 0xfb
    f5c4:	d906      	bls.n	f5d4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x72>
    f5c6:	21ae      	movs	r1, #174	; 0xae
    f5c8:	e026      	b.n	f618 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    f5ca:	2000      	movs	r0, #0
    f5cc:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    f5d0:	21ad      	movs	r1, #173	; 0xad
    f5d2:	e021      	b.n	f618 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    f5d4:	9801      	ldr	r0, [sp, #4]
    f5d6:	f7ff fea4 	bl	f322 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>
    f5da:	2801      	cmp	r0, #1
    f5dc:	d003      	beq.n	f5e6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x84>
    f5de:	2802      	cmp	r0, #2
    f5e0:	d001      	beq.n	f5e6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x84>
    f5e2:	21bd      	movs	r1, #189	; 0xbd
    f5e4:	e018      	b.n	f618 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    f5e6:	7130      	strb	r0, [r6, #4]
    f5e8:	4629      	mov	r1, r5
    f5ea:	8873      	ldrh	r3, [r6, #2]
    f5ec:	2503      	movs	r5, #3
    f5ee:	4620      	mov	r0, r4
    f5f0:	463a      	mov	r2, r7
    f5f2:	9500      	str	r5, [sp, #0]
    f5f4:	f7fe fe7f 	bl	e2f6 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>
    f5f8:	4620      	mov	r0, r4
    f5fa:	60b7      	str	r7, [r6, #8]
    f5fc:	f7fe ff3f 	bl	e47e <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    f600:	b138      	cbz	r0, f612 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb0>
    f602:	2100      	movs	r1, #0
    f604:	4620      	mov	r0, r4
    f606:	460a      	mov	r2, r1
    f608:	f7ff f876 	bl	e6f8 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    f60c:	b118      	cbz	r0, f616 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb4>
    f60e:	2001      	movs	r0, #1
    f610:	e7dc      	b.n	f5cc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x6a>
    f612:	21cd      	movs	r1, #205	; 0xcd
    f614:	e000      	b.n	f618 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    f616:	21d2      	movs	r1, #210	; 0xd2
    f618:	202b      	movs	r0, #43	; 0x2b
    f61a:	f7f5 ffa1 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000f61e <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    f61e:	f7f8 b9bf 	b.w	79a0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x230>
    f622:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f626:	460c      	mov	r4, r1
    f628:	b180      	cbz	r0, f64c <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x2e>
    f62a:	2700      	movs	r7, #0
    f62c:	4606      	mov	r6, r0
    f62e:	f500 7596 	add.w	r5, r0, #300	; 0x12c
    f632:	2a10      	cmp	r2, #16
    f634:	d060      	beq.n	f6f8 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xda>
    f636:	dc0c      	bgt.n	f652 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x34>
    f638:	f1a2 0205 	sub.w	r2, r2, #5
    f63c:	2a08      	cmp	r2, #8
    f63e:	d210      	bcs.n	f662 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x44>
    f640:	e8df f002 	tbb	[pc, r2]
    f644:	0f0f124e 	.word	0x0f0f124e
    f648:	540f2033 	.word	0x540f2033
    f64c:	f44f 7112 	mov.w	r1, #584	; 0x248
    f650:	e034      	b.n	f6bc <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x9e>
    f652:	2a11      	cmp	r2, #17
    f654:	d072      	beq.n	f73c <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x11e>
    f656:	2a18      	cmp	r2, #24
    f658:	d068      	beq.n	f72c <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x10e>
    f65a:	2a1a      	cmp	r2, #26
    f65c:	d057      	beq.n	f70e <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xf0>
    f65e:	2a1b      	cmp	r2, #27
    f660:	d060      	beq.n	f724 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x106>
    f662:	f240 2175 	movw	r1, #629	; 0x275
    f666:	e029      	b.n	f6bc <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x9e>
    f668:	7067      	strb	r7, [r4, #1]
    f66a:	2007      	movs	r0, #7
    f66c:	7020      	strb	r0, [r4, #0]
    f66e:	8537      	strh	r7, [r6, #40]	; 0x28
    f670:	f855 0f80 	ldr.w	r0, [r5, #128]!
    f674:	6060      	str	r0, [r4, #4]
    f676:	6868      	ldr	r0, [r5, #4]
    f678:	60a0      	str	r0, [r4, #8]
    f67a:	8928      	ldrh	r0, [r5, #8]
    f67c:	81a0      	strh	r0, [r4, #12]
    f67e:	7127      	strb	r7, [r4, #4]
    f680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f684:	8830      	ldrh	r0, [r6, #0]
    f686:	f7f6 fb93 	bl	5db0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    f68a:	4680      	mov	r8, r0
    f68c:	f7fe ffcb 	bl	e626 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    f690:	b110      	cbz	r0, f698 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x7a>
    f692:	f240 11b9 	movw	r1, #441	; 0x1b9
    f696:	e011      	b.n	f6bc <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x9e>
    f698:	7067      	strb	r7, [r4, #1]
    f69a:	200c      	movs	r0, #12
    f69c:	7020      	strb	r0, [r4, #0]
    f69e:	f895 0094 	ldrb.w	r0, [r5, #148]	; 0x94
    f6a2:	7120      	strb	r0, [r4, #4]
    f6a4:	8830      	ldrh	r0, [r6, #0]
    f6a6:	80e0      	strh	r0, [r4, #6]
    f6a8:	e015      	b.n	f6d6 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xb8>
    f6aa:	8830      	ldrh	r0, [r6, #0]
    f6ac:	f7f6 fb80 	bl	5db0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    f6b0:	4680      	mov	r8, r0
    f6b2:	f7fe ffb8 	bl	e626 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    f6b6:	b120      	cbz	r0, f6c2 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xa4>
    f6b8:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
    f6bc:	2010      	movs	r0, #16
    f6be:	f7f5 ff4f 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f6c2:	7067      	strb	r7, [r4, #1]
    f6c4:	200b      	movs	r0, #11
    f6c6:	7020      	strb	r0, [r4, #0]
    f6c8:	f815 0f94 	ldrb.w	r0, [r5, #148]!
    f6cc:	7120      	strb	r0, [r4, #4]
    f6ce:	8830      	ldrh	r0, [r6, #0]
    f6d0:	80e0      	strh	r0, [r4, #6]
    f6d2:	7928      	ldrb	r0, [r5, #4]
    f6d4:	7220      	strb	r0, [r4, #8]
    f6d6:	4640      	mov	r0, r8
    f6d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f6dc:	f7fe bfbe 	b.w	e65c <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    f6e0:	7067      	strb	r7, [r4, #1]
    f6e2:	2006      	movs	r0, #6
    f6e4:	7020      	strb	r0, [r4, #0]
    f6e6:	f855 0f6a 	ldr.w	r0, [r5, #106]!
    f6ea:	e00a      	b.n	f702 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xe4>
    f6ec:	7067      	strb	r7, [r4, #1]
    f6ee:	200e      	movs	r0, #14
    f6f0:	7020      	strb	r0, [r4, #0]
    f6f2:	8830      	ldrh	r0, [r6, #0]
    f6f4:	8088      	strh	r0, [r1, #4]
    f6f6:	e7c3      	b.n	f680 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x62>
    f6f8:	7067      	strb	r7, [r4, #1]
    f6fa:	2012      	movs	r0, #18
    f6fc:	7020      	strb	r0, [r4, #0]
    f6fe:	f855 0f22 	ldr.w	r0, [r5, #34]!
    f702:	6060      	str	r0, [r4, #4]
    f704:	6868      	ldr	r0, [r5, #4]
    f706:	60a0      	str	r0, [r4, #8]
    f708:	68a8      	ldr	r0, [r5, #8]
    f70a:	60e0      	str	r0, [r4, #12]
    f70c:	e7b8      	b.n	f680 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x62>
    f70e:	7067      	strb	r7, [r4, #1]
    f710:	2018      	movs	r0, #24
    f712:	7020      	strb	r0, [r4, #0]
    f714:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    f716:	6060      	str	r0, [r4, #4]
    f718:	6be8      	ldr	r0, [r5, #60]	; 0x3c
    f71a:	60a0      	str	r0, [r4, #8]
    f71c:	f8b5 0040 	ldrh.w	r0, [r5, #64]	; 0x40
    f720:	81a0      	strh	r0, [r4, #12]
    f722:	e7ad      	b.n	f680 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x62>
    f724:	2019      	movs	r0, #25
    f726:	7020      	strb	r0, [r4, #0]
    f728:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
    f72a:	e004      	b.n	f736 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x118>
    f72c:	7067      	strb	r7, [r4, #1]
    f72e:	2016      	movs	r0, #22
    f730:	7020      	strb	r0, [r4, #0]
    f732:	f8d5 000a 	ldr.w	r0, [r5, #10]
    f736:	6048      	str	r0, [r1, #4]
    f738:	e7a2      	b.n	f680 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x62>
    f73a:	e7ff      	b.n	f73c <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x11e>
    f73c:	7067      	strb	r7, [r4, #1]
    f73e:	2013      	movs	r0, #19
    f740:	7020      	strb	r0, [r4, #0]
    f742:	f855 0f5a 	ldr.w	r0, [r5, #90]!
    f746:	6060      	str	r0, [r4, #4]
    f748:	88a8      	ldrh	r0, [r5, #4]
    f74a:	8120      	strh	r0, [r4, #8]
    f74c:	e798      	b.n	f680 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x62>

0000f74e <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    f74e:	b4f0      	push	{r4, r5, r6, r7}
    f750:	8150      	strh	r0, [r2, #10]
    f752:	890d      	ldrh	r5, [r1, #8]
    f754:	4614      	mov	r4, r2
    f756:	8195      	strh	r5, [r2, #12]
    f758:	898a      	ldrh	r2, [r1, #12]
    f75a:	81e2      	strh	r2, [r4, #14]
    f75c:	8948      	ldrh	r0, [r1, #10]
    f75e:	8220      	strh	r0, [r4, #16]
    f760:	89ce      	ldrh	r6, [r1, #14]
    f762:	8266      	strh	r6, [r4, #18]
    f764:	8dcf      	ldrh	r7, [r1, #46]	; 0x2e
    f766:	42b7      	cmp	r7, r6
    f768:	d108      	bne.n	f77c <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    f76a:	8d4e      	ldrh	r6, [r1, #42]	; 0x2a
    f76c:	4286      	cmp	r6, r0
    f76e:	d105      	bne.n	f77c <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    f770:	8e0e      	ldrh	r6, [r1, #48]	; 0x30
    f772:	4296      	cmp	r6, r2
    f774:	d102      	bne.n	f77c <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    f776:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
    f778:	42aa      	cmp	r2, r5
    f77a:	d001      	beq.n	f780 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    f77c:	2201      	movs	r2, #1
    f77e:	e000      	b.n	f782 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x34>
    f780:	2200      	movs	r2, #0
    f782:	7522      	strb	r2, [r4, #20]
    f784:	8548      	strh	r0, [r1, #42]	; 0x2a
    f786:	8a60      	ldrh	r0, [r4, #18]
    f788:	85c8      	strh	r0, [r1, #46]	; 0x2e
    f78a:	89a0      	ldrh	r0, [r4, #12]
    f78c:	8588      	strh	r0, [r1, #44]	; 0x2c
    f78e:	89e0      	ldrh	r0, [r4, #14]
    f790:	8608      	strh	r0, [r1, #48]	; 0x30
    f792:	4620      	mov	r0, r4
    f794:	bcf0      	pop	{r4, r5, r6, r7}
    f796:	2210      	movs	r2, #16
    f798:	4619      	mov	r1, r3
    f79a:	f7f7 bf09 	b.w	75b0 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>

0000f79e <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    f79e:	b510      	push	{r4, lr}
    f7a0:	888c      	ldrh	r4, [r1, #4]
    f7a2:	890a      	ldrh	r2, [r1, #8]
    f7a4:	884b      	ldrh	r3, [r1, #2]
    f7a6:	88c9      	ldrh	r1, [r1, #6]
    f7a8:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
    f7ac:	f8a0 1050 	strh.w	r1, [r0, #80]	; 0x50
    f7b0:	f8a0 404e 	strh.w	r4, [r0, #78]	; 0x4e
    f7b4:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
    f7b8:	bd10      	pop	{r4, pc}

0000f7ba <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    f7ba:	b570      	push	{r4, r5, r6, lr}
    f7bc:	4615      	mov	r5, r2
    f7be:	460c      	mov	r4, r1
    f7c0:	f000 f8ce 	bl	f960 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x5e>
    f7c4:	3096      	adds	r0, #150	; 0x96
    f7c6:	4428      	add	r0, r5
    f7c8:	42a0      	cmp	r0, r4
    f7ca:	d801      	bhi.n	f7d0 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    f7cc:	1a20      	subs	r0, r4, r0
    f7ce:	bd70      	pop	{r4, r5, r6, pc}
    f7d0:	2000      	movs	r0, #0
    f7d2:	bd70      	pop	{r4, r5, r6, pc}

0000f7d4 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    f7d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f7d8:	4604      	mov	r4, r0
    f7da:	8f47      	ldrh	r7, [r0, #58]	; 0x3a
    f7dc:	8fc6      	ldrh	r6, [r0, #62]	; 0x3e
    f7de:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
    f7e2:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
    f7e6:	4285      	cmp	r5, r0
    f7e8:	d300      	bcc.n	f7ec <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x18>
    f7ea:	4605      	mov	r5, r0
    f7ec:	4620      	mov	r0, r4
    f7ee:	f894 106f 	ldrb.w	r1, [r4, #111]	; 0x6f
    f7f2:	f000 f8a5 	bl	f940 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x3e>
    f7f6:	4601      	mov	r1, r0
    f7f8:	8765      	strh	r5, [r4, #58]	; 0x3a
    f7fa:	87e1      	strh	r1, [r4, #62]	; 0x3e
    f7fc:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
    f800:	f104 0030 	add.w	r0, r4, #48	; 0x30
    f804:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    f808:	4680      	mov	r8, r0
    f80a:	42aa      	cmp	r2, r5
    f80c:	d200      	bcs.n	f810 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3c>
    f80e:	462a      	mov	r2, r5
    f810:	428b      	cmp	r3, r1
    f812:	d200      	bcs.n	f816 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x42>
    f814:	460b      	mov	r3, r1
    f816:	8202      	strh	r2, [r0, #16]
    f818:	f8a8 3012 	strh.w	r3, [r8, #18]
    f81c:	42bd      	cmp	r5, r7
    f81e:	d101      	bne.n	f824 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x50>
    f820:	42b1      	cmp	r1, r6
    f822:	d001      	beq.n	f828 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x54>
    f824:	2001      	movs	r0, #1
    f826:	e000      	b.n	f82a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x56>
    f828:	2000      	movs	r0, #0
    f82a:	4681      	mov	r9, r0
    f82c:	f8b4 504c 	ldrh.w	r5, [r4, #76]	; 0x4c
    f830:	f8b4 0046 	ldrh.w	r0, [r4, #70]	; 0x46
    f834:	8f27      	ldrh	r7, [r4, #56]	; 0x38
    f836:	8fa6      	ldrh	r6, [r4, #60]	; 0x3c
    f838:	4285      	cmp	r5, r0
    f83a:	d300      	bcc.n	f83e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x6a>
    f83c:	4605      	mov	r5, r0
    f83e:	f894 106e 	ldrb.w	r1, [r4, #110]	; 0x6e
    f842:	4620      	mov	r0, r4
    f844:	f000 f884 	bl	f950 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x4e>
    f848:	f894 1064 	ldrb.w	r1, [r4, #100]	; 0x64
    f84c:	2902      	cmp	r1, #2
    f84e:	d108      	bne.n	f862 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x8e>
    f850:	42af      	cmp	r7, r5
    f852:	d200      	bcs.n	f856 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x82>
    f854:	463d      	mov	r5, r7
    f856:	4286      	cmp	r6, r0
    f858:	d200      	bcs.n	f85c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x88>
    f85a:	4630      	mov	r0, r6
    f85c:	2100      	movs	r1, #0
    f85e:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
    f862:	f8a8 5008 	strh.w	r5, [r8, #8]
    f866:	f8a8 000c 	strh.w	r0, [r8, #12]
    f86a:	42bd      	cmp	r5, r7
    f86c:	d101      	bne.n	f872 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9e>
    f86e:	42b0      	cmp	r0, r6
    f870:	d001      	beq.n	f876 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xa2>
    f872:	2001      	movs	r0, #1
    f874:	e000      	b.n	f878 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xa4>
    f876:	2000      	movs	r0, #0
    f878:	ea40 0009 	orr.w	r0, r0, r9
    f87c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000f880 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>:
    f880:	6840      	ldr	r0, [r0, #4]
    f882:	4770      	bx	lr

0000f884 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
    f884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f888:	4616      	mov	r6, r2
    f88a:	460f      	mov	r7, r1
    f88c:	4604      	mov	r4, r0
    f88e:	f000 f867 	bl	f960 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x5e>
    f892:	4605      	mov	r5, r0
    f894:	463a      	mov	r2, r7
    f896:	6921      	ldr	r1, [r4, #16]
    f898:	6b20      	ldr	r0, [r4, #48]	; 0x30
    f89a:	f000 f84c 	bl	f936 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    f89e:	19a9      	adds	r1, r5, r6
    f8a0:	4281      	cmp	r1, r0
    f8a2:	d300      	bcc.n	f8a6 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY+0x22>
    f8a4:	4608      	mov	r0, r1
    f8a6:	6360      	str	r0, [r4, #52]	; 0x34
    f8a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f8ac <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    f8ac:	221b      	movs	r2, #27
    f8ae:	8402      	strh	r2, [r0, #32]
    f8b0:	8382      	strh	r2, [r0, #28]
    f8b2:	82c2      	strh	r2, [r0, #22]
    f8b4:	8282      	strh	r2, [r0, #20]
    f8b6:	8142      	strh	r2, [r0, #10]
    f8b8:	8202      	strh	r2, [r0, #16]
    f8ba:	8102      	strh	r2, [r0, #8]
    f8bc:	8542      	strh	r2, [r0, #42]	; 0x2a
    f8be:	8582      	strh	r2, [r0, #44]	; 0x2c
    f8c0:	8482      	strh	r2, [r0, #36]	; 0x24
    f8c2:	2900      	cmp	r1, #0
    f8c4:	d10a      	bne.n	f8dc <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    f8c6:	f44f 71a4 	mov.w	r1, #328	; 0x148
    f8ca:	8441      	strh	r1, [r0, #34]	; 0x22
    f8cc:	83c1      	strh	r1, [r0, #30]
    f8ce:	8341      	strh	r1, [r0, #26]
    f8d0:	8301      	strh	r1, [r0, #24]
    f8d2:	81c1      	strh	r1, [r0, #14]
    f8d4:	8241      	strh	r1, [r0, #18]
    f8d6:	8181      	strh	r1, [r0, #12]
    f8d8:	85c1      	strh	r1, [r0, #46]	; 0x2e
    f8da:	8601      	strh	r1, [r0, #48]	; 0x30
    f8dc:	4770      	bx	lr

0000f8de <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    f8de:	6800      	ldr	r0, [r0, #0]
    f8e0:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    f8e4:	4290      	cmp	r0, r2
    f8e6:	d903      	bls.n	f8f0 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    f8e8:	1a40      	subs	r0, r0, r1
    f8ea:	389c      	subs	r0, #156	; 0x9c
    f8ec:	0840      	lsrs	r0, r0, #1
    f8ee:	4770      	bx	lr
    f8f0:	2000      	movs	r0, #0
    f8f2:	4770      	bx	lr

0000f8f4 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    f8f4:	b510      	push	{r4, lr}
    f8f6:	9c02      	ldr	r4, [sp, #8]
    f8f8:	8281      	strh	r1, [r0, #20]
    f8fa:	82c2      	strh	r2, [r0, #22]
    f8fc:	8303      	strh	r3, [r0, #24]
    f8fe:	8344      	strh	r4, [r0, #26]
    f900:	bd10      	pop	{r4, pc}

0000f902 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    f902:	b430      	push	{r4, r5}
    f904:	8150      	strh	r0, [r2, #10]
    f906:	8a88      	ldrh	r0, [r1, #20]
    f908:	8190      	strh	r0, [r2, #12]
    f90a:	8ac8      	ldrh	r0, [r1, #22]
    f90c:	81d0      	strh	r0, [r2, #14]
    f90e:	8b08      	ldrh	r0, [r1, #24]
    f910:	8210      	strh	r0, [r2, #16]
    f912:	8b48      	ldrh	r0, [r1, #26]
    f914:	4614      	mov	r4, r2
    f916:	8250      	strh	r0, [r2, #18]
    f918:	4620      	mov	r0, r4
    f91a:	bc30      	pop	{r4, r5}
    f91c:	221a      	movs	r2, #26
    f91e:	4619      	mov	r1, r3
    f920:	f7f7 be46 	b.w	75b0 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    f924:	2902      	cmp	r1, #2
    f926:	d003      	beq.n	f930 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2e>
    f928:	00c0      	lsls	r0, r0, #3
    f92a:	3070      	adds	r0, #112	; 0x70
    f92c:	b280      	uxth	r0, r0
    f92e:	4770      	bx	lr
    f930:	0080      	lsls	r0, r0, #2
    f932:	303c      	adds	r0, #60	; 0x3c
    f934:	e7fa      	b.n	f92c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2a>
    f936:	4288      	cmp	r0, r1
    f938:	d300      	bcc.n	f93c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x3a>
    f93a:	4608      	mov	r0, r1
    f93c:	1a80      	subs	r0, r0, r2
    f93e:	4770      	bx	lr
    f940:	f8b0 1052 	ldrh.w	r1, [r0, #82]	; 0x52
    f944:	f8b0 0048 	ldrh.w	r0, [r0, #72]	; 0x48
    f948:	4281      	cmp	r1, r0
    f94a:	d200      	bcs.n	f94e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x4c>
    f94c:	4608      	mov	r0, r1
    f94e:	4770      	bx	lr
    f950:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
    f954:	f8b0 004a 	ldrh.w	r0, [r0, #74]	; 0x4a
    f958:	4281      	cmp	r1, r0
    f95a:	d200      	bcs.n	f95e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x5c>
    f95c:	4608      	mov	r0, r1
    f95e:	4770      	bx	lr
    f960:	2196      	movs	r1, #150	; 0x96
    f962:	f890 306f 	ldrb.w	r3, [r0, #111]	; 0x6f
    f966:	f890 206e 	ldrb.w	r2, [r0, #110]	; 0x6e
    f96a:	f000 b800 	b.w	f96e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x6c>
    f96e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f972:	460d      	mov	r5, r1
    f974:	4606      	mov	r6, r0
    f976:	4698      	mov	r8, r3
    f978:	4617      	mov	r7, r2
    f97a:	8f00      	ldrh	r0, [r0, #56]	; 0x38
    f97c:	4611      	mov	r1, r2
    f97e:	f7ff ffd1 	bl	f924 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x22>
    f982:	4604      	mov	r4, r0
    f984:	4639      	mov	r1, r7
    f986:	4630      	mov	r0, r6
    f988:	f7ff ffe2 	bl	f950 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x4e>
    f98c:	42a0      	cmp	r0, r4
    f98e:	d200      	bcs.n	f992 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x90>
    f990:	4604      	mov	r4, r0
    f992:	f8b6 0040 	ldrh.w	r0, [r6, #64]	; 0x40
    f996:	4641      	mov	r1, r8
    f998:	f7ff ffc4 	bl	f924 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x22>
    f99c:	4607      	mov	r7, r0
    f99e:	4641      	mov	r1, r8
    f9a0:	4630      	mov	r0, r6
    f9a2:	f7ff ffcd 	bl	f940 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x3e>
    f9a6:	42b8      	cmp	r0, r7
    f9a8:	d300      	bcc.n	f9ac <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xaa>
    f9aa:	4638      	mov	r0, r7
    f9ac:	4420      	add	r0, r4
    f9ae:	4428      	add	r0, r5
    f9b0:	1d80      	adds	r0, r0, #6
    f9b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f9b6:	b510      	push	{r4, lr}
    f9b8:	4604      	mov	r4, r0
    f9ba:	2108      	movs	r1, #8
    f9bc:	4620      	mov	r0, r4
    f9be:	f7f5 fe7b 	bl	56b8 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    f9c2:	6820      	ldr	r0, [r4, #0]
    f9c4:	2800      	cmp	r0, #0
    f9c6:	d102      	bne.n	f9ce <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xcc>
    f9c8:	6860      	ldr	r0, [r4, #4]
    f9ca:	2800      	cmp	r0, #0
    f9cc:	d0f5      	beq.n	f9ba <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb8>
    f9ce:	bd10      	pop	{r4, pc}
    f9d0:	2801      	cmp	r0, #1
    f9d2:	d102      	bne.n	f9da <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xd8>
    f9d4:	7948      	ldrb	r0, [r1, #5]
    f9d6:	0980      	lsrs	r0, r0, #6
    f9d8:	d001      	beq.n	f9de <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xdc>
    f9da:	2000      	movs	r0, #0
    f9dc:	4770      	bx	lr
    f9de:	2001      	movs	r0, #1
    f9e0:	4770      	bx	lr
    f9e2:	2801      	cmp	r0, #1
    f9e4:	d106      	bne.n	f9f4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xf2>
    f9e6:	7948      	ldrb	r0, [r1, #5]
    f9e8:	2101      	movs	r1, #1
    f9ea:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    f9ee:	d101      	bne.n	f9f4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xf2>
    f9f0:	2001      	movs	r0, #1
    f9f2:	4770      	bx	lr
    f9f4:	2000      	movs	r0, #0
    f9f6:	4770      	bx	lr
    f9f8:	2802      	cmp	r0, #2
    f9fa:	d003      	beq.n	fa04 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x102>
    f9fc:	2803      	cmp	r0, #3
    f9fe:	d001      	beq.n	fa04 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x102>
    fa00:	2000      	movs	r0, #0
    fa02:	4770      	bx	lr
    fa04:	2001      	movs	r0, #1
    fa06:	4770      	bx	lr

0000fa08 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
    fa08:	b510      	push	{r4, lr}
    fa0a:	4604      	mov	r4, r0
    fa0c:	7c00      	ldrb	r0, [r0, #16]
    fa0e:	f7ff fff3 	bl	f9f8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xf6>
    fa12:	b148      	cbz	r0, fa28 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    fa14:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
    fa18:	f104 0150 	add.w	r1, r4, #80	; 0x50
    fa1c:	f7ff f9a2 	bl	ed64 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    fa20:	2808      	cmp	r0, #8
    fa22:	d001      	beq.n	fa28 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    fa24:	2001      	movs	r0, #1
    fa26:	bd10      	pop	{r4, pc}
    fa28:	7c20      	ldrb	r0, [r4, #16]
    fa2a:	b118      	cbz	r0, fa34 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    fa2c:	2802      	cmp	r0, #2
    fa2e:	d001      	beq.n	fa34 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    fa30:	7de0      	ldrb	r0, [r4, #23]
    fa32:	bd10      	pop	{r4, pc}
    fa34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fa38:	2000      	movs	r0, #0
    fa3a:	f7f6 bc73 	b.w	6324 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>

0000fa3e <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>:
    fa3e:	b508      	push	{r3, lr}
    fa40:	f890 106c 	ldrb.w	r1, [r0, #108]	; 0x6c
    fa44:	f88d 1000 	strb.w	r1, [sp]
    fa48:	9900      	ldr	r1, [sp, #0]
    fa4a:	9100      	str	r1, [sp, #0]
    fa4c:	f89d 1000 	ldrb.w	r1, [sp]
    fa50:	b109      	cbz	r1, fa56 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x18>
    fa52:	2001      	movs	r0, #1
    fa54:	bd08      	pop	{r3, pc}
    fa56:	f890 0096 	ldrb.w	r0, [r0, #150]	; 0x96
    fa5a:	f88d 0000 	strb.w	r0, [sp]
    fa5e:	9800      	ldr	r0, [sp, #0]
    fa60:	9000      	str	r0, [sp, #0]
    fa62:	f89d 0000 	ldrb.w	r0, [sp]
    fa66:	2000      	movs	r0, #0
    fa68:	bd08      	pop	{r3, pc}

0000fa6a <sym_2ORNMU44KG57RJ5GYPW4FCTEFWDXBHWXYAE3J6I>:
    fa6a:	20ff      	movs	r0, #255	; 0xff
    fa6c:	7008      	strb	r0, [r1, #0]
    fa6e:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
    fa70:	f7ff b878 	b.w	eb64 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>

0000fa74 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>:
    fa74:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    fa76:	460d      	mov	r5, r1
    fa78:	4604      	mov	r4, r0
    fa7a:	f44f 7288 	mov.w	r2, #272	; 0x110
    fa7e:	2100      	movs	r1, #0
    fa80:	f7fd ff6c 	bl	d95c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    fa84:	20ff      	movs	r0, #255	; 0xff
    fa86:	7020      	strb	r0, [r4, #0]
    fa88:	207f      	movs	r0, #127	; 0x7f
    fa8a:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    fa8e:	2013      	movs	r0, #19
    fa90:	8060      	strh	r0, [r4, #2]
    fa92:	f7f6 fa4f 	bl	5f34 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>
    fa96:	4601      	mov	r1, r0
    fa98:	62e0      	str	r0, [r4, #44]	; 0x2c
    fa9a:	2200      	movs	r2, #0
    fa9c:	4668      	mov	r0, sp
    fa9e:	f7fe ffcb 	bl	ea38 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    faa2:	2200      	movs	r2, #0
    faa4:	2101      	movs	r1, #1
    faa6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    faa8:	f7ff f83c 	bl	eb24 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    faac:	2204      	movs	r2, #4
    faae:	4668      	mov	r0, sp
    fab0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    fab2:	f7fe ffc1 	bl	ea38 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    fab6:	2200      	movs	r2, #0
    fab8:	4611      	mov	r1, r2
    faba:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    fabc:	f7ff f832 	bl	eb24 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    fac0:	73a5      	strb	r5, [r4, #14]
    fac2:	f104 0020 	add.w	r0, r4, #32
    fac6:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    faca:	f000 b994 	b.w	fdf6 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>

0000face <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
    face:	7880      	ldrb	r0, [r0, #2]
    fad0:	f3c0 0080 	ubfx	r0, r0, #2, #1
    fad4:	b108      	cbz	r0, fada <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0xc>
    fad6:	2000      	movs	r0, #0
    fad8:	4770      	bx	lr
    fada:	201f      	movs	r0, #31
    fadc:	4770      	bx	lr

0000fade <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>:
    fade:	f7f8 bc9d 	b.w	841c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3dc>

0000fae2 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI>:
    fae2:	b570      	push	{r4, r5, r6, lr}
    fae4:	2300      	movs	r3, #0
    fae6:	2a03      	cmp	r2, #3
    fae8:	d015      	beq.n	fb16 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x34>
    faea:	2a0e      	cmp	r2, #14
    faec:	d01a      	beq.n	fb24 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x42>
    faee:	2a12      	cmp	r2, #18
    faf0:	d030      	beq.n	fb54 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x72>
    faf2:	2a19      	cmp	r2, #25
    faf4:	d004      	beq.n	fb00 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x1e>
    faf6:	f240 21d2 	movw	r1, #722	; 0x2d2
    fafa:	202d      	movs	r0, #45	; 0x2d
    fafc:	f7f5 fd30 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fb00:	704b      	strb	r3, [r1, #1]
    fb02:	2217      	movs	r2, #23
    fb04:	700a      	strb	r2, [r1, #0]
    fb06:	f850 2fb5 	ldr.w	r2, [r0, #181]!
    fb0a:	604a      	str	r2, [r1, #4]
    fb0c:	6842      	ldr	r2, [r0, #4]
    fb0e:	608a      	str	r2, [r1, #8]
    fb10:	7a00      	ldrb	r0, [r0, #8]
    fb12:	7308      	strb	r0, [r1, #12]
    fb14:	bd70      	pop	{r4, r5, r6, pc}
    fb16:	704b      	strb	r3, [r1, #1]
    fb18:	2205      	movs	r2, #5
    fb1a:	700a      	strb	r2, [r1, #0]
    fb1c:	f8d0 00a8 	ldr.w	r0, [r0, #168]	; 0xa8
    fb20:	6048      	str	r0, [r1, #4]
    fb22:	bd70      	pop	{r4, r5, r6, pc}
    fb24:	4605      	mov	r5, r0
    fb26:	704b      	strb	r3, [r1, #1]
    fb28:	2011      	movs	r0, #17
    fb2a:	460c      	mov	r4, r1
    fb2c:	7008      	strb	r0, [r1, #0]
    fb2e:	2220      	movs	r2, #32
    fb30:	f105 016e 	add.w	r1, r5, #110	; 0x6e
    fb34:	1d20      	adds	r0, r4, #4
    fb36:	f7fd fe97 	bl	d868 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    fb3a:	2001      	movs	r0, #1
    fb3c:	7220      	strb	r0, [r4, #8]
    fb3e:	7920      	ldrb	r0, [r4, #4]
    fb40:	2800      	cmp	r0, #0
    fb42:	d1ee      	bne.n	fb22 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x40>
    fb44:	69e8      	ldr	r0, [r5, #28]
    fb46:	8800      	ldrh	r0, [r0, #0]
    fb48:	f7f6 f932 	bl	5db0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    fb4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fb50:	f7fe bd84 	b.w	e65c <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    fb54:	704b      	strb	r3, [r1, #1]
    fb56:	2214      	movs	r2, #20
    fb58:	700a      	strb	r2, [r1, #0]
    fb5a:	f850 2f98 	ldr.w	r2, [r0, #152]!
    fb5e:	604a      	str	r2, [r1, #4]
    fb60:	8880      	ldrh	r0, [r0, #4]
    fb62:	8108      	strh	r0, [r1, #8]
    fb64:	bd70      	pop	{r4, r5, r6, pc}

0000fb66 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
    fb66:	6880      	ldr	r0, [r0, #8]
    fb68:	4770      	bx	lr

0000fb6a <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
    fb6a:	2001      	movs	r0, #1
    fb6c:	4770      	bx	lr

0000fb6e <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
    fb6e:	b510      	push	{r4, lr}
    fb70:	4604      	mov	r4, r0
    fb72:	3020      	adds	r0, #32
    fb74:	f000 f8ff 	bl	fd76 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    fb78:	8861      	ldrh	r1, [r4, #2]
    fb7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fb7e:	2228      	movs	r2, #40	; 0x28
    fb80:	f7f8 be34 	b.w	87ec <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>

0000fb84 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
    fb84:	2200      	movs	r2, #0
    fb86:	8502      	strh	r2, [r0, #40]	; 0x28
    fb88:	8843      	ldrh	r3, [r0, #2]
    fb8a:	2b1d      	cmp	r3, #29
    fb8c:	d001      	beq.n	fb92 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y+0xe>
    fb8e:	7341      	strb	r1, [r0, #13]
    fb90:	4770      	bx	lr
    fb92:	7342      	strb	r2, [r0, #13]
    fb94:	4770      	bx	lr

0000fb96 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>:
    fb96:	b510      	push	{r4, lr}
    fb98:	2400      	movs	r4, #0
    fb9a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    fb9c:	f7fe ffb0 	bl	eb00 <sym_SYX5A4D5YT7FQ4PORL5PYZ5T6BOBVEZRWNZWOOA>
    fba0:	b100      	cbz	r0, fba4 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0xe>
    fba2:	2001      	movs	r0, #1
    fba4:	4384      	bics	r4, r0
    fba6:	f084 0001 	eor.w	r0, r4, #1
    fbaa:	bd10      	pop	{r4, pc}

0000fbac <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
    fbac:	2000      	movs	r0, #0
    fbae:	4770      	bx	lr

0000fbb0 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
    fbb0:	7880      	ldrb	r0, [r0, #2]
    fbb2:	f000 0001 	and.w	r0, r0, #1
    fbb6:	4770      	bx	lr

0000fbb8 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
    fbb8:	7880      	ldrb	r0, [r0, #2]
    fbba:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    fbbe:	4770      	bx	lr

0000fbc0 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
    fbc0:	2001      	movs	r0, #1
    fbc2:	4770      	bx	lr

0000fbc4 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
    fbc4:	7880      	ldrb	r0, [r0, #2]
    fbc6:	f3c0 0040 	ubfx	r0, r0, #1, #1
    fbca:	4770      	bx	lr

0000fbcc <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
    fbcc:	f990 000e 	ldrsb.w	r0, [r0, #14]
    fbd0:	4770      	bx	lr

0000fbd2 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
    fbd2:	7800      	ldrb	r0, [r0, #0]
    fbd4:	28ff      	cmp	r0, #255	; 0xff
    fbd6:	d001      	beq.n	fbdc <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ+0xa>
    fbd8:	2001      	movs	r0, #1
    fbda:	4770      	bx	lr
    fbdc:	2000      	movs	r0, #0
    fbde:	4770      	bx	lr

0000fbe0 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>:
    fbe0:	680a      	ldr	r2, [r1, #0]
    fbe2:	f840 2f11 	str.w	r2, [r0, #17]!
    fbe6:	8889      	ldrh	r1, [r1, #4]
    fbe8:	8081      	strh	r1, [r0, #4]
    fbea:	2101      	movs	r1, #1
    fbec:	7181      	strb	r1, [r0, #6]
    fbee:	4770      	bx	lr

0000fbf0 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
    fbf0:	7b00      	ldrb	r0, [r0, #12]
    fbf2:	4770      	bx	lr

0000fbf4 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
    fbf4:	2001      	movs	r0, #1
    fbf6:	4770      	bx	lr

0000fbf8 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
    fbf8:	61c1      	str	r1, [r0, #28]
    fbfa:	f890 2048 	ldrb.w	r2, [r0, #72]	; 0x48
    fbfe:	724a      	strb	r2, [r1, #9]
    fc00:	f8d0 2049 	ldr.w	r2, [r0, #73]	; 0x49
    fc04:	f8c1 200a 	str.w	r2, [r1, #10]
    fc08:	f8b0 004d 	ldrh.w	r0, [r0, #77]	; 0x4d
    fc0c:	81c8      	strh	r0, [r1, #14]
    fc0e:	4770      	bx	lr

0000fc10 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
    fc10:	f880 1060 	strb.w	r1, [r0, #96]	; 0x60
    fc14:	4770      	bx	lr

0000fc16 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
    fc16:	b510      	push	{r4, lr}
    fc18:	4604      	mov	r4, r0
    fc1a:	7880      	ldrb	r0, [r0, #2]
    fc1c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    fc20:	b158      	cbz	r0, fc3a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x24>
    fc22:	233c      	movs	r3, #60	; 0x3c
    fc24:	22ff      	movs	r2, #255	; 0xff
    fc26:	4620      	mov	r0, r4
    fc28:	69e1      	ldr	r1, [r4, #28]
    fc2a:	f7f8 fc23 	bl	8474 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x434>
    fc2e:	220e      	movs	r2, #14
    fc30:	4621      	mov	r1, r4
    fc32:	f104 0064 	add.w	r0, r4, #100	; 0x64
    fc36:	f7f7 fcbb 	bl	75b0 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    fc3a:	78a0      	ldrb	r0, [r4, #2]
    fc3c:	07c0      	lsls	r0, r0, #31
    fc3e:	f7f7 fd89 	bl	7754 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    fc42:	2001      	movs	r0, #1
    fc44:	f884 0061 	strb.w	r0, [r4, #97]	; 0x61
    fc48:	bd10      	pop	{r4, pc}

0000fc4a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
    fc4a:	7bc0      	ldrb	r0, [r0, #15]
    fc4c:	2800      	cmp	r0, #0
    fc4e:	d000      	beq.n	fc52 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8>
    fc50:	2001      	movs	r0, #1
    fc52:	4770      	bx	lr
    fc54:	b510      	push	{r4, lr}
    fc56:	f7ff f885 	bl	ed64 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    fc5a:	4604      	mov	r4, r0
    fc5c:	f7f7 f972 	bl	6f44 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    fc60:	b138      	cbz	r0, fc72 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x28>
    fc62:	4620      	mov	r0, r4
    fc64:	f7f7 f916 	bl	6e94 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    fc68:	b118      	cbz	r0, fc72 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x28>
    fc6a:	2110      	movs	r1, #16
    fc6c:	f7ff fa5d 	bl	f12a <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    fc70:	b108      	cbz	r0, fc76 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2c>
    fc72:	2000      	movs	r0, #0
    fc74:	bd10      	pop	{r4, pc}
    fc76:	2001      	movs	r0, #1
    fc78:	bd10      	pop	{r4, pc}
    fc7a:	2101      	movs	r1, #1
    fc7c:	f7f8 b860 	b.w	7d40 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    fc80:	2101      	movs	r1, #1
    fc82:	f7f8 b85d 	b.w	7d40 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    fc86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fc8a:	4604      	mov	r4, r0
    fc8c:	460f      	mov	r7, r1
    fc8e:	7e40      	ldrb	r0, [r0, #25]
    fc90:	f7f7 f8e6 	bl	6e60 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    fc94:	4606      	mov	r6, r0
    fc96:	7e20      	ldrb	r0, [r4, #24]
    fc98:	f104 0549 	add.w	r5, r4, #73	; 0x49
    fc9c:	b120      	cbz	r0, fca8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x5e>
    fc9e:	b11e      	cbz	r6, fca8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x5e>
    fca0:	7e60      	ldrb	r0, [r4, #25]
    fca2:	f7f7 f8d1 	bl	6e48 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    fca6:	b1a0      	cbz	r0, fcd2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x88>
    fca8:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    fcac:	2800      	cmp	r0, #0
    fcae:	d024      	beq.n	fcfa <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb0>
    fcb0:	7ea0      	ldrb	r0, [r4, #26]
    fcb2:	2800      	cmp	r0, #0
    fcb4:	d021      	beq.n	fcfa <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb0>
    fcb6:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    fcba:	4629      	mov	r1, r5
    fcbc:	f7ff fe91 	bl	f9e2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xe0>
    fcc0:	b1a8      	cbz	r0, fcee <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa4>
    fcc2:	f7f7 f8bd 	bl	6e40 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    fcc6:	463a      	mov	r2, r7
    fcc8:	4629      	mov	r1, r5
    fcca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    fcce:	f7fe bfe1 	b.w	ec94 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    fcd2:	2001      	movs	r0, #1
    fcd4:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
    fcd8:	463a      	mov	r2, r7
    fcda:	4629      	mov	r1, r5
    fcdc:	4630      	mov	r0, r6
    fcde:	f7fe ffd9 	bl	ec94 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    fce2:	7e61      	ldrb	r1, [r4, #25]
    fce4:	4628      	mov	r0, r5
    fce6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    fcea:	f7f7 b8c5 	b.w	6e78 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    fcee:	4639      	mov	r1, r7
    fcf0:	4628      	mov	r0, r5
    fcf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    fcf6:	f7fe bfbc 	b.w	ec72 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    fcfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fcfe:	b510      	push	{r4, lr}
    fd00:	4604      	mov	r4, r0
    fd02:	4608      	mov	r0, r1
    fd04:	f7fc fc3c 	bl	c580 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    fd08:	7921      	ldrb	r1, [r4, #4]
    fd0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fd0e:	2025      	movs	r0, #37	; 0x25
    fd10:	f7fc bc0c 	b.w	c52c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    fd14:	b510      	push	{r4, lr}
    fd16:	4604      	mov	r4, r0
    fd18:	3026      	adds	r0, #38	; 0x26
    fd1a:	f7fc fbe7 	bl	c4ec <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    fd1e:	2800      	cmp	r0, #0
    fd20:	d102      	bne.n	fd28 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xde>
    fd22:	207f      	movs	r0, #127	; 0x7f
    fd24:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    fd28:	bd10      	pop	{r4, pc}
    fd2a:	b570      	push	{r4, r5, r6, lr}
    fd2c:	4614      	mov	r4, r2
    fd2e:	461d      	mov	r5, r3
    fd30:	4606      	mov	r6, r0
    fd32:	f7f4 f83d 	bl	3db0 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    fd36:	1900      	adds	r0, r0, r4
    fd38:	4169      	adcs	r1, r5
    fd3a:	e9c6 0100 	strd	r0, r1, [r6]
    fd3e:	bd70      	pop	{r4, r5, r6, pc}
    fd40:	7802      	ldrb	r2, [r0, #0]
    fd42:	2320      	movs	r3, #32
    fd44:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    fd48:	ea03 1141 	and.w	r1, r3, r1, lsl #5
    fd4c:	430a      	orrs	r2, r1
    fd4e:	7002      	strb	r2, [r0, #0]
    fd50:	4770      	bx	lr

0000fd52 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
    fd52:	b570      	push	{r4, r5, r6, lr}
    fd54:	7001      	strb	r1, [r0, #0]
    fd56:	7042      	strb	r2, [r0, #1]
    fd58:	4614      	mov	r4, r2
    fd5a:	460d      	mov	r5, r1
    fd5c:	7880      	ldrb	r0, [r0, #2]
    fd5e:	f000 f87f 	bl	fe60 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    fd62:	fb10 f005 	smulbb	r0, r0, r5
    fd66:	4360      	muls	r0, r4
    fd68:	28ff      	cmp	r0, #255	; 0xff
    fd6a:	d303      	bcc.n	fd74 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y+0x22>
    fd6c:	215c      	movs	r1, #92	; 0x5c
    fd6e:	202e      	movs	r0, #46	; 0x2e
    fd70:	f7f5 fbf6 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fd74:	bd70      	pop	{r4, r5, r6, pc}

0000fd76 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
    fd76:	b510      	push	{r4, lr}
    fd78:	4604      	mov	r4, r0
    fd7a:	7880      	ldrb	r0, [r0, #2]
    fd7c:	f000 f870 	bl	fe60 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    fd80:	7861      	ldrb	r1, [r4, #1]
    fd82:	7822      	ldrb	r2, [r4, #0]
    fd84:	fb11 f102 	smulbb	r1, r1, r2
    fd88:	4348      	muls	r0, r1
    fd8a:	b2c0      	uxtb	r0, r0
    fd8c:	bd10      	pop	{r4, pc}

0000fd8e <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
    fd8e:	b510      	push	{r4, lr}
    fd90:	4604      	mov	r4, r0
    fd92:	f000 f84d 	bl	fe30 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x2c>
    fd96:	7961      	ldrb	r1, [r4, #5]
    fd98:	1c49      	adds	r1, r1, #1
    fd9a:	b2c9      	uxtb	r1, r1
    fd9c:	7161      	strb	r1, [r4, #5]
    fd9e:	7862      	ldrb	r2, [r4, #1]
    fda0:	4291      	cmp	r1, r2
    fda2:	d10b      	bne.n	fdbc <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    fda4:	2200      	movs	r2, #0
    fda6:	7162      	strb	r2, [r4, #5]
    fda8:	78e1      	ldrb	r1, [r4, #3]
    fdaa:	4301      	orrs	r1, r0
    fdac:	70e1      	strb	r1, [r4, #3]
    fdae:	78a3      	ldrb	r3, [r4, #2]
    fdb0:	4299      	cmp	r1, r3
    fdb2:	d103      	bne.n	fdbc <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    fdb4:	70e2      	strb	r2, [r4, #3]
    fdb6:	7921      	ldrb	r1, [r4, #4]
    fdb8:	1c49      	adds	r1, r1, #1
    fdba:	7121      	strb	r1, [r4, #4]
    fdbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fdc0:	f000 b825 	b.w	fe0e <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0xa>

0000fdc4 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
    fdc4:	7081      	strb	r1, [r0, #2]
    fdc6:	4770      	bx	lr

0000fdc8 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
    fdc8:	b570      	push	{r4, r5, r6, lr}
    fdca:	4604      	mov	r4, r0
    fdcc:	7880      	ldrb	r0, [r0, #2]
    fdce:	f000 f847 	bl	fe60 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    fdd2:	7861      	ldrb	r1, [r4, #1]
    fdd4:	fb11 f500 	smulbb	r5, r1, r0
    fdd8:	78e0      	ldrb	r0, [r4, #3]
    fdda:	f000 f841 	bl	fe60 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    fdde:	7861      	ldrb	r1, [r4, #1]
    fde0:	7962      	ldrb	r2, [r4, #5]
    fde2:	fb10 2001 	smlabb	r0, r0, r1, r2
    fde6:	7821      	ldrb	r1, [r4, #0]
    fde8:	7922      	ldrb	r2, [r4, #4]
    fdea:	1a89      	subs	r1, r1, r2
    fdec:	fb11 f105 	smulbb	r1, r1, r5
    fdf0:	1a08      	subs	r0, r1, r0
    fdf2:	b2c0      	uxtb	r0, r0
    fdf4:	bd70      	pop	{r4, r5, r6, pc}

0000fdf6 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
    fdf6:	2100      	movs	r1, #0
    fdf8:	6001      	str	r1, [r0, #0]
    fdfa:	8081      	strh	r1, [r0, #4]
    fdfc:	2101      	movs	r1, #1
    fdfe:	7041      	strb	r1, [r0, #1]
    fe00:	7001      	strb	r1, [r0, #0]
    fe02:	4770      	bx	lr

0000fe04 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
    fe04:	2100      	movs	r1, #0
    fe06:	70c1      	strb	r1, [r0, #3]
    fe08:	7141      	strb	r1, [r0, #5]
    fe0a:	7101      	strb	r1, [r0, #4]
    fe0c:	4770      	bx	lr
    fe0e:	b510      	push	{r4, lr}
    fe10:	2801      	cmp	r0, #1
    fe12:	d007      	beq.n	fe24 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x20>
    fe14:	2802      	cmp	r0, #2
    fe16:	d007      	beq.n	fe28 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x24>
    fe18:	2804      	cmp	r0, #4
    fe1a:	d007      	beq.n	fe2c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x28>
    fe1c:	2139      	movs	r1, #57	; 0x39
    fe1e:	202e      	movs	r0, #46	; 0x2e
    fe20:	f7f5 fb9e 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fe24:	2025      	movs	r0, #37	; 0x25
    fe26:	bd10      	pop	{r4, pc}
    fe28:	2026      	movs	r0, #38	; 0x26
    fe2a:	bd10      	pop	{r4, pc}
    fe2c:	2027      	movs	r0, #39	; 0x27
    fe2e:	bd10      	pop	{r4, pc}
    fe30:	4601      	mov	r1, r0
    fe32:	2000      	movs	r0, #0
    fe34:	788a      	ldrb	r2, [r1, #2]
    fe36:	07d3      	lsls	r3, r2, #31
    fe38:	d002      	beq.n	fe40 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x3c>
    fe3a:	78cb      	ldrb	r3, [r1, #3]
    fe3c:	07db      	lsls	r3, r3, #31
    fe3e:	d006      	beq.n	fe4e <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4a>
    fe40:	0793      	lsls	r3, r2, #30
    fe42:	d506      	bpl.n	fe52 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    fe44:	78cb      	ldrb	r3, [r1, #3]
    fe46:	079b      	lsls	r3, r3, #30
    fe48:	d403      	bmi.n	fe52 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    fe4a:	2002      	movs	r0, #2
    fe4c:	4770      	bx	lr
    fe4e:	2001      	movs	r0, #1
    fe50:	4770      	bx	lr
    fe52:	0752      	lsls	r2, r2, #29
    fe54:	d5fc      	bpl.n	fe50 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    fe56:	78c9      	ldrb	r1, [r1, #3]
    fe58:	0749      	lsls	r1, r1, #29
    fe5a:	d4f9      	bmi.n	fe50 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    fe5c:	2004      	movs	r0, #4
    fe5e:	4770      	bx	lr
    fe60:	f3c0 0180 	ubfx	r1, r0, #2, #1
    fe64:	f3c0 0240 	ubfx	r2, r0, #1, #1
    fe68:	4411      	add	r1, r2
    fe6a:	f000 0001 	and.w	r0, r0, #1
    fe6e:	4408      	add	r0, r1
    fe70:	4770      	bx	lr

0000fe72 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
    fe72:	f240 315a 	movw	r1, #858	; 0x35a
    fe76:	4348      	muls	r0, r1
    fe78:	4770      	bx	lr

0000fe7a <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>:
    fe7a:	f240 20ef 	movw	r0, #751	; 0x2ef
    fe7e:	4770      	bx	lr
    fe80:	041c020e 	.word	0x041c020e
    fe84:	0c600630 	.word	0x0c600630
    fe88:	06b4035a 	.word	0x06b4035a
    fe8c:	0bf505c5 	.word	0x0bf505c5
    fe90:	01a31225 	.word	0x01a31225
    fe94:	05bf03b1 	.word	0x05bf03b1
    fe98:	064902ef 	.word	0x064902ef
    fe9c:	09a3      	.short	0x09a3

0000fe9e <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
    fe9e:	b510      	push	{r4, lr}
    fea0:	f890 1108 	ldrb.w	r1, [r0, #264]	; 0x108
    fea4:	b109      	cbz	r1, feaa <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0xc>
    fea6:	2000      	movs	r0, #0
    fea8:	bd10      	pop	{r4, pc}
    feaa:	f890 10c8 	ldrb.w	r1, [r0, #200]	; 0xc8
    feae:	b131      	cbz	r1, febe <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x20>
    feb0:	e9d0 1233 	ldrd	r1, r2, [r0, #204]	; 0xcc
    feb4:	428a      	cmp	r2, r1
    feb6:	d902      	bls.n	febe <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x20>
    feb8:	f7ff fead 	bl	fc16 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    febc:	e7f3      	b.n	fea6 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x8>
    febe:	2001      	movs	r0, #1
    fec0:	bd10      	pop	{r4, pc}

0000fec2 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
    fec2:	b510      	push	{r4, lr}
    fec4:	b131      	cbz	r1, fed4 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x12>
    fec6:	2901      	cmp	r1, #1
    fec8:	d008      	beq.n	fedc <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x1a>
    feca:	f240 7195 	movw	r1, #1941	; 0x795
    fece:	2030      	movs	r0, #48	; 0x30
    fed0:	f7f5 fb46 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fed8:	f000 b9ec 	b.w	102b4 <CONFIG_PM_SRAM_SIZE+0x2b4>
    fedc:	2100      	movs	r1, #0
    fede:	f880 10c8 	strb.w	r1, [r0, #200]	; 0xc8
    fee2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fee6:	f000 b948 	b.w	1017a <CONFIG_PM_SRAM_SIZE+0x17a>

0000feea <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>:
    feea:	b510      	push	{r4, lr}
    feec:	4604      	mov	r4, r0
    feee:	f890 00d8 	ldrb.w	r0, [r0, #216]	; 0xd8
    fef2:	2800      	cmp	r0, #0
    fef4:	d019      	beq.n	ff2a <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x40>
    fef6:	2001      	movs	r0, #1
    fef8:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
    fefc:	4601      	mov	r1, r0
    fefe:	4620      	mov	r0, r4
    ff00:	f7ff fe86 	bl	fc10 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    ff04:	f894 00d8 	ldrb.w	r0, [r4, #216]	; 0xd8
    ff08:	b170      	cbz	r0, ff28 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x3e>
    ff0a:	f814 0fc0 	ldrb.w	r0, [r4, #192]!
    ff0e:	f7f3 fb1d 	bl	354c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    ff12:	7820      	ldrb	r0, [r4, #0]
    ff14:	f7f3 fc82 	bl	381c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    ff18:	f814 09c0 	ldrb.w	r0, [r4], #-192
    ff1c:	f7f3 fc5c 	bl	37d8 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    ff20:	b120      	cbz	r0, ff2c <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x42>
    ff22:	2000      	movs	r0, #0
    ff24:	f884 00d8 	strb.w	r0, [r4, #216]	; 0xd8
    ff28:	2000      	movs	r0, #0
    ff2a:	bd10      	pop	{r4, pc}
    ff2c:	f240 2109 	movw	r1, #521	; 0x209
    ff30:	2030      	movs	r0, #48	; 0x30
    ff32:	f7f5 fb15 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000ff36 <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>:
    ff36:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
    ff3a:	4770      	bx	lr

0000ff3c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>:
    ff3c:	f890 00d8 	ldrb.w	r0, [r0, #216]	; 0xd8
    ff40:	4770      	bx	lr

0000ff42 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>:
    ff42:	b50e      	push	{r1, r2, r3, lr}
    ff44:	4669      	mov	r1, sp
    ff46:	2001      	movs	r0, #1
    ff48:	f7fe fcbc 	bl	e8c4 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    ff4c:	b138      	cbz	r0, ff5e <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x1c>
    ff4e:	f240 1137 	movw	r1, #311	; 0x137
    ff52:	2030      	movs	r0, #48	; 0x30
    ff54:	f7f5 fb04 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ff58:	9802      	ldr	r0, [sp, #8]
    ff5a:	f7ff ffc6 	bl	feea <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
    ff5e:	4668      	mov	r0, sp
    ff60:	f7f5 fd42 	bl	59e8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    ff64:	2800      	cmp	r0, #0
    ff66:	d0f7      	beq.n	ff58 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x16>
    ff68:	f7f8 fde4 	bl	8b34 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x58>
    ff6c:	2000      	movs	r0, #0
    ff6e:	bd0e      	pop	{r1, r2, r3, pc}

0000ff70 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>:
    ff70:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    ff72:	4604      	mov	r4, r0
    ff74:	f890 01d3 	ldrb.w	r0, [r0, #467]	; 0x1d3
    ff78:	2800      	cmp	r0, #0
    ff7a:	d15f      	bne.n	1003c <CONFIG_PM_SRAM_SIZE+0x3c>
    ff7c:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
    ff80:	2803      	cmp	r0, #3
    ff82:	d15b      	bne.n	1003c <CONFIG_PM_SRAM_SIZE+0x3c>
    ff84:	f7f3 ff14 	bl	3db0 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    ff88:	f8d4 3238 	ldr.w	r3, [r4, #568]	; 0x238
    ff8c:	f8d4 223c 	ldr.w	r2, [r4, #572]	; 0x23c
    ff90:	1ac0      	subs	r0, r0, r3
    ff92:	eb61 0102 	sbc.w	r1, r1, r2
    ff96:	2300      	movs	r3, #0
    ff98:	461a      	mov	r2, r3
    ff9a:	1a1b      	subs	r3, r3, r0
    ff9c:	418a      	sbcs	r2, r1
    ff9e:	da4d      	bge.n	1003c <CONFIG_PM_SRAM_SIZE+0x3c>
    ffa0:	1c42      	adds	r2, r0, #1
    ffa2:	f171 0100 	sbcs.w	r1, r1, #0
    ffa6:	db02      	blt.n	ffae <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3e>
    ffa8:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
    ffac:	e036      	b.n	1001c <CONFIG_PM_SRAM_SIZE+0x1c>
    ffae:	6921      	ldr	r1, [r4, #16]
    ffb0:	b111      	cbz	r1, ffb8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x48>
    ffb2:	fbb0 f0f1 	udiv	r0, r0, r1
    ffb6:	e000      	b.n	ffba <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4a>
    ffb8:	2000      	movs	r0, #0
    ffba:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    ffbe:	1c40      	adds	r0, r0, #1
    ffc0:	4408      	add	r0, r1
    ffc2:	f8a4 0214 	strh.w	r0, [r4, #532]	; 0x214
    ffc6:	f8b4 0214 	ldrh.w	r0, [r4, #532]	; 0x214
    ffca:	f8b4 11cc 	ldrh.w	r1, [r4, #460]	; 0x1cc
    ffce:	1a08      	subs	r0, r1, r0
    ffd0:	b200      	sxth	r0, r0
    ffd2:	2800      	cmp	r0, #0
    ffd4:	dd32      	ble.n	1003c <CONFIG_PM_SRAM_SIZE+0x3c>
    ffd6:	f894 024c 	ldrb.w	r0, [r4, #588]	; 0x24c
    ffda:	f7f3 fab7 	bl	354c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    ffde:	2800      	cmp	r0, #0
    ffe0:	d02c      	beq.n	1003c <CONFIG_PM_SRAM_SIZE+0x3c>
    ffe2:	20ff      	movs	r0, #255	; 0xff
    ffe4:	f884 0219 	strb.w	r0, [r4, #537]	; 0x219
    ffe8:	f8b4 00b6 	ldrh.w	r0, [r4, #182]	; 0xb6
    ffec:	f8b4 10b4 	ldrh.w	r1, [r4, #180]	; 0xb4
    fff0:	ae01      	add	r6, sp, #4
    fff2:	1a40      	subs	r0, r0, r1
    fff4:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    fff8:	1e40      	subs	r0, r0, #1
    fffa:	4408      	add	r0, r1
    fffc:	b285      	uxth	r5, r0
    fffe:	e017      	b.n	10030 <CONFIG_PM_SRAM_SIZE+0x30>
   10000:	9600      	str	r6, [sp, #0]
   10002:	f8b4 1214 	ldrh.w	r1, [r4, #532]	; 0x214
   10006:	2300      	movs	r3, #0
   10008:	2201      	movs	r2, #1
   1000a:	4620      	mov	r0, r4
   1000c:	f7f8 fe66 	bl	8cdc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x200>
   10010:	2800      	cmp	r0, #0
   10012:	d013      	beq.n	1003c <CONFIG_PM_SRAM_SIZE+0x3c>
   10014:	2801      	cmp	r0, #1
   10016:	d004      	beq.n	10022 <CONFIG_PM_SRAM_SIZE+0x22>
   10018:	f240 6101 	movw	r1, #1537	; 0x601
   1001c:	2030      	movs	r0, #48	; 0x30
   1001e:	f7f5 fa9f 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10022:	f8b4 0214 	ldrh.w	r0, [r4, #532]	; 0x214
   10026:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   1002a:	4408      	add	r0, r1
   1002c:	f8a4 0214 	strh.w	r0, [r4, #532]	; 0x214
   10030:	f8b4 0214 	ldrh.w	r0, [r4, #532]	; 0x214
   10034:	1a28      	subs	r0, r5, r0
   10036:	b200      	sxth	r0, r0
   10038:	2800      	cmp	r0, #0
   1003a:	dae1      	bge.n	10000 <CONFIG_PM_SRAM_SIZE>
   1003c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   1003e:	2000      	movs	r0, #0
   10040:	4770      	bx	lr
   10042:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10046:	4604      	mov	r4, r0
   10048:	2501      	movs	r5, #1
   1004a:	f000 f90c 	bl	10266 <CONFIG_PM_SRAM_SIZE+0x266>
   1004e:	2600      	movs	r6, #0
   10050:	f8a4 00e8 	strh.w	r0, [r4, #232]	; 0xe8
   10054:	f884 60e0 	strb.w	r6, [r4, #224]	; 0xe0
   10058:	2701      	movs	r7, #1
   1005a:	f884 70eb 	strb.w	r7, [r4, #235]	; 0xeb
   1005e:	f894 10c8 	ldrb.w	r1, [r4, #200]	; 0xc8
   10062:	f104 08e0 	add.w	r8, r4, #224	; 0xe0
   10066:	b169      	cbz	r1, 10084 <CONFIG_PM_SRAM_SIZE+0x84>
   10068:	e9f4 013c 	ldrd	r0, r1, [r4, #240]!	; 0xf0
   1006c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10070:	1880      	adds	r0, r0, r2
   10072:	f141 0100 	adc.w	r1, r1, #0
   10076:	e864 013c 	strd	r0, r1, [r4], #-240	; 0xf0
   1007a:	2100      	movs	r1, #0
   1007c:	4640      	mov	r0, r8
   1007e:	f7fe ff89 	bl	ef94 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
   10082:	e00d      	b.n	100a0 <CONFIG_PM_SRAM_SIZE+0xa0>
   10084:	4620      	mov	r0, r4
   10086:	f7ff fd6e 	bl	fb66 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
   1008a:	4601      	mov	r1, r0
   1008c:	e9f4 203c 	ldrd	r2, r0, [r4, #240]!	; 0xf0
   10090:	1852      	adds	r2, r2, r1
   10092:	4170      	adcs	r0, r6
   10094:	e864 203c 	strd	r2, r0, [r4], #-240	; 0xf0
   10098:	4640      	mov	r0, r8
   1009a:	f7fe ff7b 	bl	ef94 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
   1009e:	1c45      	adds	r5, r0, #1
   100a0:	f8b4 00f8 	ldrh.w	r0, [r4, #248]	; 0xf8
   100a4:	1c41      	adds	r1, r0, #1
   100a6:	290a      	cmp	r1, #10
   100a8:	d202      	bcs.n	100b0 <CONFIG_PM_SRAM_SIZE+0xb0>
   100aa:	4428      	add	r0, r5
   100ac:	f8a4 00f8 	strh.w	r0, [r4, #248]	; 0xf8
   100b0:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
   100b4:	b138      	cbz	r0, 100c6 <CONFIG_PM_SRAM_SIZE+0xc6>
   100b6:	f8b4 00f8 	ldrh.w	r0, [r4, #248]	; 0xf8
   100ba:	1c40      	adds	r0, r0, #1
   100bc:	280a      	cmp	r0, #10
   100be:	d302      	bcc.n	100c6 <CONFIG_PM_SRAM_SIZE+0xc6>
   100c0:	f884 70ea 	strb.w	r7, [r4, #234]	; 0xea
   100c4:	e002      	b.n	100cc <CONFIG_PM_SRAM_SIZE+0xcc>
   100c6:	2002      	movs	r0, #2
   100c8:	f884 00ea 	strb.w	r0, [r4, #234]	; 0xea
   100cc:	4620      	mov	r0, r4
   100ce:	f000 f823 	bl	10118 <CONFIG_PM_SRAM_SIZE+0x118>
   100d2:	b120      	cbz	r0, 100de <CONFIG_PM_SRAM_SIZE+0xde>
   100d4:	4620      	mov	r0, r4
   100d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   100da:	f000 b80e 	b.w	100fa <CONFIG_PM_SRAM_SIZE+0xfa>
   100de:	f894 00c0 	ldrb.w	r0, [r4, #192]	; 0xc0
   100e2:	4641      	mov	r1, r8
   100e4:	f000 f8bd 	bl	10262 <CONFIG_PM_SRAM_SIZE+0x262>
   100e8:	2800      	cmp	r0, #0
   100ea:	d104      	bne.n	100f6 <CONFIG_PM_SRAM_SIZE+0xf6>
   100ec:	f44f 61d5 	mov.w	r1, #1704	; 0x6a8
   100f0:	2030      	movs	r0, #48	; 0x30
   100f2:	f7f5 fa35 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   100f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   100fa:	b510      	push	{r4, lr}
   100fc:	4604      	mov	r4, r0
   100fe:	f814 0fc0 	ldrb.w	r0, [r4, #192]!
   10102:	f7f3 fb69 	bl	37d8 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
   10106:	2000      	movs	r0, #0
   10108:	7620      	strb	r0, [r4, #24]
   1010a:	bd10      	pop	{r4, pc}
   1010c:	b510      	push	{r4, lr}
   1010e:	f7ff fd2e 	bl	fb6e <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
   10112:	f500 7088 	add.w	r0, r0, #272	; 0x110
   10116:	bd10      	pop	{r4, pc}
   10118:	b570      	push	{r4, r5, r6, lr}
   1011a:	4605      	mov	r5, r0
   1011c:	f890 0108 	ldrb.w	r0, [r0, #264]	; 0x108
   10120:	b108      	cbz	r0, 10126 <CONFIG_PM_SRAM_SIZE+0x126>
   10122:	2001      	movs	r0, #1
   10124:	bd70      	pop	{r4, r5, r6, pc}
   10126:	e9d5 1040 	ldrd	r1, r0, [r5, #256]	; 0x100
   1012a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   1012e:	4050      	eors	r0, r2
   10130:	ea70 0101 	orns	r1, r0, r1
   10134:	d011      	beq.n	1015a <CONFIG_PM_SRAM_SIZE+0x15a>
   10136:	2400      	movs	r4, #0
   10138:	4628      	mov	r0, r5
   1013a:	f7ff ffe7 	bl	1010c <CONFIG_PM_SRAM_SIZE+0x10c>
   1013e:	e9f5 123c 	ldrd	r1, r2, [r5, #240]!	; 0xf0
   10142:	1840      	adds	r0, r0, r1
   10144:	4154      	adcs	r4, r2
   10146:	e9d5 2104 	ldrd	r2, r1, [r5, #16]
   1014a:	3df0      	subs	r5, #240	; 0xf0
   1014c:	1a10      	subs	r0, r2, r0
   1014e:	41a1      	sbcs	r1, r4
   10150:	d503      	bpl.n	1015a <CONFIG_PM_SRAM_SIZE+0x15a>
   10152:	4628      	mov	r0, r5
   10154:	f7ff fd5f 	bl	fc16 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
   10158:	e7e3      	b.n	10122 <CONFIG_PM_SRAM_SIZE+0x122>
   1015a:	2000      	movs	r0, #0
   1015c:	bd70      	pop	{r4, r5, r6, pc}
   1015e:	b510      	push	{r4, lr}
   10160:	4604      	mov	r4, r0
   10162:	f890 006f 	ldrb.w	r0, [r0, #111]	; 0x6f
   10166:	f000 f9f2 	bl	1054e <CONFIG_PM_SRAM_SIZE+0x54e>
   1016a:	4602      	mov	r2, r0
   1016c:	4620      	mov	r0, r4
   1016e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10172:	f240 111b 	movw	r1, #283	; 0x11b
   10176:	f7ff bb85 	b.w	f884 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
   1017a:	b510      	push	{r4, lr}
   1017c:	f7fc f83e 	bl	c1fc <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
   10180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10184:	f7f3 bc8a 	b.w	3a9c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
   10188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1018c:	4604      	mov	r4, r0
   1018e:	f890 021a 	ldrb.w	r0, [r0, #538]	; 0x21a
   10192:	2800      	cmp	r0, #0
   10194:	d051      	beq.n	1023a <CONFIG_PM_SRAM_SIZE+0x23a>
   10196:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
   1019a:	2803      	cmp	r0, #3
   1019c:	d14d      	bne.n	1023a <CONFIG_PM_SRAM_SIZE+0x23a>
   1019e:	f894 906f 	ldrb.w	r9, [r4, #111]	; 0x6f
   101a2:	f001 f9e2 	bl	1156a <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
   101a6:	4605      	mov	r5, r0
   101a8:	f894 01c7 	ldrb.w	r0, [r4, #455]	; 0x1c7
   101ac:	f7f8 fcb4 	bl	8b18 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
   101b0:	4428      	add	r0, r5
   101b2:	b286      	uxth	r6, r0
   101b4:	f894 01c7 	ldrb.w	r0, [r4, #455]	; 0x1c7
   101b8:	f7f8 fcae 	bl	8b18 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
   101bc:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
   101c0:	fa1f f880 	uxth.w	r8, r0
   101c4:	4648      	mov	r0, r9
   101c6:	f7fc f8d7 	bl	c378 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   101ca:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
   101ce:	1a0d      	subs	r5, r1, r0
   101d0:	4648      	mov	r0, r9
   101d2:	f7fc f8fd 	bl	c3d0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   101d6:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
   101da:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   101de:	fbb0 f0fa 	udiv	r0, r0, sl
   101e2:	1a2d      	subs	r5, r5, r0
   101e4:	4648      	mov	r0, r9
   101e6:	f7fc f8c7 	bl	c378 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   101ea:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
   101ee:	1a0f      	subs	r7, r1, r0
   101f0:	4648      	mov	r0, r9
   101f2:	f7fc f8ed 	bl	c3d0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   101f6:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
   101fa:	4401      	add	r1, r0
   101fc:	fbb1 f0fa 	udiv	r0, r1, sl
   10200:	1a39      	subs	r1, r7, r0
   10202:	f1a1 0060 	sub.w	r0, r1, #96	; 0x60
   10206:	4370      	muls	r0, r6
   10208:	fbb0 f2f8 	udiv	r2, r0, r8
   1020c:	2029      	movs	r0, #41	; 0x29
   1020e:	eb00 0051 	add.w	r0, r0, r1, lsr #1
   10212:	3260      	adds	r2, #96	; 0x60
   10214:	eba0 0152 	sub.w	r1, r0, r2, lsr #1
   10218:	eb00 0052 	add.w	r0, r0, r2, lsr #1
   1021c:	42a9      	cmp	r1, r5
   1021e:	d801      	bhi.n	10224 <CONFIG_PM_SRAM_SIZE+0x224>
   10220:	4285      	cmp	r5, r0
   10222:	d901      	bls.n	10228 <CONFIG_PM_SRAM_SIZE+0x228>
   10224:	f7f4 fdda 	bl	4ddc <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>
   10228:	4631      	mov	r1, r6
   1022a:	6920      	ldr	r0, [r4, #16]
   1022c:	f7fd f9ed 	bl	d60a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
   10230:	2100      	movs	r1, #0
   10232:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
   10236:	f884 121a 	strb.w	r1, [r4, #538]	; 0x21a
   1023a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1023e:	b570      	push	{r4, r5, r6, lr}
   10240:	460c      	mov	r4, r1
   10242:	4605      	mov	r5, r0
   10244:	f7fc f8c4 	bl	c3d0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10248:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
   1024c:	4408      	add	r0, r1
   1024e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   10252:	fbb0 f6f1 	udiv	r6, r0, r1
   10256:	4628      	mov	r0, r5
   10258:	f7fc f88e 	bl	c378 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   1025c:	4430      	add	r0, r6
   1025e:	4420      	add	r0, r4
   10260:	bd70      	pop	{r4, r5, r6, pc}
   10262:	f7f2 bdd9 	b.w	2e18 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
   10266:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   10268:	4604      	mov	r4, r0
   1026a:	f7ff fca9 	bl	fbc0 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   1026e:	b1f8      	cbz	r0, 102b0 <CONFIG_PM_SRAM_SIZE+0x2b0>
   10270:	4620      	mov	r0, r4
   10272:	f7ff fc9d 	bl	fbb0 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   10276:	b918      	cbnz	r0, 10280 <CONFIG_PM_SRAM_SIZE+0x280>
   10278:	4620      	mov	r0, r4
   1027a:	f7ff fca3 	bl	fbc4 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   1027e:	b140      	cbz	r0, 10292 <CONFIG_PM_SRAM_SIZE+0x292>
   10280:	2449      	movs	r4, #73	; 0x49
   10282:	4668      	mov	r0, sp
   10284:	f7f5 f846 	bl	5314 <mpsl_fem_pa_is_configured>
   10288:	f89d 0000 	ldrb.w	r0, [sp]
   1028c:	b118      	cbz	r0, 10296 <CONFIG_PM_SRAM_SIZE+0x296>
   1028e:	2501      	movs	r5, #1
   10290:	e002      	b.n	10298 <CONFIG_PM_SRAM_SIZE+0x298>
   10292:	2442      	movs	r4, #66	; 0x42
   10294:	e7f5      	b.n	10282 <CONFIG_PM_SRAM_SIZE+0x282>
   10296:	2500      	movs	r5, #0
   10298:	a801      	add	r0, sp, #4
   1029a:	f7f5 f823 	bl	52e4 <mpsl_fem_lna_is_configured>
   1029e:	f89d 0004 	ldrb.w	r0, [sp, #4]
   102a2:	b100      	cbz	r0, 102a6 <CONFIG_PM_SRAM_SIZE+0x2a6>
   102a4:	2001      	movs	r0, #1
   102a6:	4305      	orrs	r5, r0
   102a8:	d000      	beq.n	102ac <CONFIG_PM_SRAM_SIZE+0x2ac>
   102aa:	3409      	adds	r4, #9
   102ac:	4620      	mov	r0, r4
   102ae:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   102b0:	206b      	movs	r0, #107	; 0x6b
   102b2:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   102b4:	b570      	push	{r4, r5, r6, lr}
   102b6:	4604      	mov	r4, r0
   102b8:	f890 00c1 	ldrb.w	r0, [r0, #193]	; 0xc1
   102bc:	2500      	movs	r5, #0
   102be:	b138      	cbz	r0, 102d0 <CONFIG_PM_SRAM_SIZE+0x2d0>
   102c0:	f7f7 fbbe 	bl	7a40 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
   102c4:	f242 7110 	movw	r1, #10000	; 0x2710
   102c8:	fbb0 f2f1 	udiv	r2, r0, r1
   102cc:	fb01 0512 	mls	r5, r1, r2, r0
   102d0:	4620      	mov	r0, r4
   102d2:	f7ff fc48 	bl	fb66 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
   102d6:	e9d4 213c 	ldrd	r2, r1, [r4, #240]	; 0xf0
   102da:	4428      	add	r0, r5
   102dc:	34e0      	adds	r4, #224	; 0xe0
   102de:	2500      	movs	r5, #0
   102e0:	1882      	adds	r2, r0, r2
   102e2:	eb45 0001 	adc.w	r0, r5, r1
   102e6:	e9c4 2004 	strd	r2, r0, [r4, #16]
   102ea:	f804 5b0b 	strb.w	r5, [r4], #11
   102ee:	2001      	movs	r0, #1
   102f0:	f804 0901 	strb.w	r0, [r4], #-1
   102f4:	2002      	movs	r0, #2
   102f6:	f804 09ea 	strb.w	r0, [r4], #-234
   102fa:	4620      	mov	r0, r4
   102fc:	f7ff ffb3 	bl	10266 <CONFIG_PM_SRAM_SIZE+0x266>
   10300:	f8a4 00e8 	strh.w	r0, [r4, #232]	; 0xe8
   10304:	4620      	mov	r0, r4
   10306:	f7ff ff07 	bl	10118 <CONFIG_PM_SRAM_SIZE+0x118>
   1030a:	b930      	cbnz	r0, 1031a <CONFIG_PM_SRAM_SIZE+0x31a>
   1030c:	f894 00c0 	ldrb.w	r0, [r4, #192]	; 0xc0
   10310:	f104 01e0 	add.w	r1, r4, #224	; 0xe0
   10314:	f7ff ffa5 	bl	10262 <CONFIG_PM_SRAM_SIZE+0x262>
   10318:	b128      	cbz	r0, 10326 <CONFIG_PM_SRAM_SIZE+0x326>
   1031a:	f8a4 50f8 	strh.w	r5, [r4, #248]	; 0xf8
   1031e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10322:	f7ff bf2a 	b.w	1017a <CONFIG_PM_SRAM_SIZE+0x17a>
   10326:	f240 61ef 	movw	r1, #1775	; 0x6ef
   1032a:	2030      	movs	r0, #48	; 0x30
   1032c:	f7f5 f918 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10330:	b510      	push	{r4, lr}
   10332:	4604      	mov	r4, r0
   10334:	2000      	movs	r0, #0
   10336:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
   1033a:	f894 024c 	ldrb.w	r0, [r4, #588]	; 0x24c
   1033e:	f7f3 fa4b 	bl	37d8 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
   10342:	2020      	movs	r0, #32
   10344:	f884 024c 	strb.w	r0, [r4, #588]	; 0x24c
   10348:	bd10      	pop	{r4, pc}
   1034a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1034e:	4604      	mov	r4, r0
   10350:	2500      	movs	r5, #0
   10352:	f880 50c8 	strb.w	r5, [r0, #200]	; 0xc8
   10356:	e9d4 673c 	ldrd	r6, r7, [r4, #240]	; 0xf0
   1035a:	4689      	mov	r9, r1
   1035c:	f880 50d8 	strb.w	r5, [r0, #216]	; 0xd8
   10360:	f04f 0801 	mov.w	r8, #1
   10364:	f880 80d9 	strb.w	r8, [r0, #217]	; 0xd9
   10368:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
   1036c:	4641      	mov	r1, r8
   1036e:	34c0      	adds	r4, #192	; 0xc0
   10370:	f7f6 ff28 	bl	71c4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
   10374:	6860      	ldr	r0, [r4, #4]
   10376:	f8c0 6238 	str.w	r6, [r0, #568]	; 0x238
   1037a:	f8c0 723c 	str.w	r7, [r0, #572]	; 0x23c
   1037e:	6861      	ldr	r1, [r4, #4]
   10380:	7820      	ldrb	r0, [r4, #0]
   10382:	f881 024c 	strb.w	r0, [r1, #588]	; 0x24c
   10386:	6861      	ldr	r1, [r4, #4]
   10388:	f8c1 9250 	str.w	r9, [r1, #592]	; 0x250
   1038c:	6860      	ldr	r0, [r4, #4]
   1038e:	e9c0 6790 	strd	r6, r7, [r0, #576]	; 0x240
   10392:	6864      	ldr	r4, [r4, #4]
   10394:	f884 5204 	strb.w	r5, [r4, #516]	; 0x204
   10398:	2300      	movs	r3, #0
   1039a:	f8a4 5248 	strh.w	r5, [r4, #584]	; 0x248
   1039e:	461a      	mov	r2, r3
   103a0:	4619      	mov	r1, r3
   103a2:	4620      	mov	r0, r4
   103a4:	9500      	str	r5, [sp, #0]
   103a6:	f7f8 fc99 	bl	8cdc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x200>
   103aa:	b120      	cbz	r0, 103b6 <CONFIG_PM_SRAM_SIZE+0x3b6>
   103ac:	f240 211d 	movw	r1, #541	; 0x21d
   103b0:	2030      	movs	r0, #48	; 0x30
   103b2:	f7f5 f8d5 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   103b6:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
   103ba:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
   103be:	f884 8204 	strb.w	r8, [r4, #516]	; 0x204
   103c2:	f8a4 5216 	strh.w	r5, [r4, #534]	; 0x216
   103c6:	f8a4 5214 	strh.w	r5, [r4, #532]	; 0x214
   103ca:	347c      	adds	r4, #124	; 0x7c
   103cc:	f884 519d 	strb.w	r5, [r4, #413]	; 0x19d
   103d0:	8820      	ldrh	r0, [r4, #0]
   103d2:	1e40      	subs	r0, r0, #1
   103d4:	8020      	strh	r0, [r4, #0]
   103d6:	f8a4 51ce 	strh.w	r5, [r4, #462]	; 0x1ce
   103da:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   103de:	f7ff becc 	b.w	1017a <CONFIG_PM_SRAM_SIZE+0x17a>
   103e2:	b570      	push	{r4, r5, r6, lr}
   103e4:	b140      	cbz	r0, 103f8 <CONFIG_PM_SRAM_SIZE+0x3f8>
   103e6:	2909      	cmp	r1, #9
   103e8:	d248      	bcs.n	1047c <CONFIG_PM_SRAM_SIZE+0x47c>
   103ea:	e8df f001 	tbb	[pc, r1]
   103ee:	1507      	.short	0x1507
   103f0:	47373b3b 	.word	0x47373b3b
   103f4:	00433f29 	.word	0x00433f29
   103f8:	21ca      	movs	r1, #202	; 0xca
   103fa:	e03c      	b.n	10476 <CONFIG_PM_SRAM_SIZE+0x476>
   103fc:	4604      	mov	r4, r0
   103fe:	f7f7 fc6f 	bl	7ce0 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
   10402:	b110      	cbz	r0, 1040a <CONFIG_PM_SRAM_SIZE+0x40a>
   10404:	f240 2179 	movw	r1, #633	; 0x279
   10408:	e035      	b.n	10476 <CONFIG_PM_SRAM_SIZE+0x476>
   1040a:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
   1040e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10412:	38ff      	subs	r0, #255	; 0xff
   10414:	f7f3 bc12 	b.w	3c3c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
   10418:	4605      	mov	r5, r0
   1041a:	f7ff fbcd 	bl	fbb8 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
   1041e:	b9a8      	cbnz	r0, 1044c <CONFIG_PM_SRAM_SIZE+0x44c>
   10420:	4628      	mov	r0, r5
   10422:	f7ff fe73 	bl	1010c <CONFIG_PM_SRAM_SIZE+0x10c>
   10426:	4604      	mov	r4, r0
   10428:	f8d5 00e4 	ldr.w	r0, [r5, #228]	; 0xe4
   1042c:	42a0      	cmp	r0, r4
   1042e:	d20b      	bcs.n	10448 <CONFIG_PM_SRAM_SIZE+0x448>
   10430:	1a20      	subs	r0, r4, r0
   10432:	2103      	movs	r1, #3
   10434:	f7f2 fb0e 	bl	2a54 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
   10438:	b130      	cbz	r0, 10448 <CONFIG_PM_SRAM_SIZE+0x448>
   1043a:	4628      	mov	r0, r5
   1043c:	f8c5 40e4 	str.w	r4, [r5, #228]	; 0xe4
   10440:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10444:	f7ff bb4b 	b.w	fade <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
   10448:	f8c5 40e4 	str.w	r4, [r5, #228]	; 0xe4
   1044c:	4628      	mov	r0, r5
   1044e:	f7f7 fc63 	bl	7d18 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
   10452:	2800      	cmp	r0, #0
   10454:	d014      	beq.n	10480 <CONFIG_PM_SRAM_SIZE+0x480>
   10456:	f44f 712b 	mov.w	r1, #684	; 0x2ac
   1045a:	e00c      	b.n	10476 <CONFIG_PM_SRAM_SIZE+0x476>
   1045c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10460:	f7fc b894 	b.w	c58c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
   10464:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10468:	f7ff bdeb 	b.w	10042 <CONFIG_PM_SRAM_SIZE+0x42>
   1046c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10470:	f7ff be43 	b.w	100fa <CONFIG_PM_SRAM_SIZE+0xfa>
   10474:	21ea      	movs	r1, #234	; 0xea
   10476:	2030      	movs	r0, #48	; 0x30
   10478:	f7f5 f872 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1047c:	21ee      	movs	r1, #238	; 0xee
   1047e:	e7fa      	b.n	10476 <CONFIG_PM_SRAM_SIZE+0x476>
   10480:	bd70      	pop	{r4, r5, r6, pc}
   10482:	b510      	push	{r4, lr}
   10484:	0004      	movs	r4, r0
   10486:	d008      	beq.n	1049a <CONFIG_PM_SRAM_SIZE+0x49a>
   10488:	2909      	cmp	r1, #9
   1048a:	d25e      	bcs.n	1054a <CONFIG_PM_SRAM_SIZE+0x54a>
   1048c:	e8df f001 	tbb	[pc, r1]
   10490:	40403807 	.word	0x40403807
   10494:	4c455d3c 	.word	0x4c455d3c
   10498:	0059      	.short	0x0059
   1049a:	2193      	movs	r1, #147	; 0x93
   1049c:	e052      	b.n	10544 <CONFIG_PM_SRAM_SIZE+0x544>
   1049e:	2100      	movs	r1, #0
   104a0:	f8c4 1254 	str.w	r1, [r4, #596]	; 0x254
   104a4:	f894 1218 	ldrb.w	r1, [r4, #536]	; 0x218
   104a8:	4620      	mov	r0, r4
   104aa:	b189      	cbz	r1, 104d0 <CONFIG_PM_SRAM_SIZE+0x4d0>
   104ac:	f8b0 2216 	ldrh.w	r2, [r0, #534]	; 0x216
   104b0:	f8b0 107c 	ldrh.w	r1, [r0, #124]	; 0x7c
   104b4:	428a      	cmp	r2, r1
   104b6:	d106      	bne.n	104c6 <CONFIG_PM_SRAM_SIZE+0x4c6>
   104b8:	f8b0 21cc 	ldrh.w	r2, [r0, #460]	; 0x1cc
   104bc:	1a51      	subs	r1, r2, r1
   104be:	f8a0 11ce 	strh.w	r1, [r0, #462]	; 0x1ce
   104c2:	4611      	mov	r1, r2
   104c4:	e00d      	b.n	104e2 <CONFIG_PM_SRAM_SIZE+0x4e2>
   104c6:	1a51      	subs	r1, r2, r1
   104c8:	f8a0 11ce 	strh.w	r1, [r0, #462]	; 0x1ce
   104cc:	b291      	uxth	r1, r2
   104ce:	e008      	b.n	104e2 <CONFIG_PM_SRAM_SIZE+0x4e2>
   104d0:	f8b0 1214 	ldrh.w	r1, [r0, #532]	; 0x214
   104d4:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
   104d8:	1a89      	subs	r1, r1, r2
   104da:	f8a0 11ce 	strh.w	r1, [r0, #462]	; 0x1ce
   104de:	f8b0 1214 	ldrh.w	r1, [r0, #532]	; 0x214
   104e2:	f8a0 107c 	strh.w	r1, [r0, #124]	; 0x7c
   104e6:	e9d0 128c 	ldrd	r1, r2, [r0, #560]	; 0x230
   104ea:	f8c0 1238 	str.w	r1, [r0, #568]	; 0x238
   104ee:	f8c0 223c 	str.w	r2, [r0, #572]	; 0x23c
   104f2:	f7f8 fedb 	bl	92ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>
   104f6:	4620      	mov	r0, r4
   104f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   104fc:	f7f8 bdf8 	b.w	90f0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x614>
   10500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10504:	f000 b925 	b.w	10752 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>
   10508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1050c:	f7fc b83e 	b.w	c58c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
   10510:	4620      	mov	r0, r4
   10512:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10516:	f000 b827 	b.w	10568 <CONFIG_PM_SRAM_SIZE+0x568>
   1051a:	2001      	movs	r0, #1
   1051c:	f7f2 fa8a 	bl	2a34 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
   10520:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10524:	f7fe bbeb 	b.w	ecfe <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>
   10528:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
   1052c:	2804      	cmp	r0, #4
   1052e:	d001      	beq.n	10534 <CONFIG_PM_SRAM_SIZE+0x534>
   10530:	21b5      	movs	r1, #181	; 0xb5
   10532:	e007      	b.n	10544 <CONFIG_PM_SRAM_SIZE+0x544>
   10534:	4620      	mov	r0, r4
   10536:	f7ff fefb 	bl	10330 <CONFIG_PM_SRAM_SIZE+0x330>
   1053a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1053e:	f7f7 b909 	b.w	7754 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   10542:	21be      	movs	r1, #190	; 0xbe
   10544:	2030      	movs	r0, #48	; 0x30
   10546:	f7f5 f80b 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1054a:	21c2      	movs	r1, #194	; 0xc2
   1054c:	e7fa      	b.n	10544 <CONFIG_PM_SRAM_SIZE+0x544>
   1054e:	b510      	push	{r4, lr}
   10550:	f7fb ff3e 	bl	c3d0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10554:	f64d 7141 	movw	r1, #57153	; 0xdf41
   10558:	4408      	add	r0, r1
   1055a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1055e:	fbb0 f0f1 	udiv	r0, r0, r1
   10562:	f200 1079 	addw	r0, r0, #377	; 0x179
   10566:	bd10      	pop	{r4, pc}
   10568:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   1056a:	4604      	mov	r4, r0
   1056c:	f7f3 fc20 	bl	3db0 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
   10570:	f8d4 3238 	ldr.w	r3, [r4, #568]	; 0x238
   10574:	f8d4 223c 	ldr.w	r2, [r4, #572]	; 0x23c
   10578:	1ac0      	subs	r0, r0, r3
   1057a:	eb61 0102 	sbc.w	r1, r1, r2
   1057e:	2200      	movs	r2, #0
   10580:	4613      	mov	r3, r2
   10582:	1a12      	subs	r2, r2, r0
   10584:	418b      	sbcs	r3, r1
   10586:	db02      	blt.n	1058e <CONFIG_PM_SRAM_SIZE+0x58e>
   10588:	f240 6111 	movw	r1, #1553	; 0x611
   1058c:	e052      	b.n	10634 <CONFIG_PM_SRAM_SIZE+0x634>
   1058e:	1c42      	adds	r2, r0, #1
   10590:	f171 0100 	sbcs.w	r1, r1, #0
   10594:	db02      	blt.n	1059c <CONFIG_PM_SRAM_SIZE+0x59c>
   10596:	f240 6112 	movw	r1, #1554	; 0x612
   1059a:	e04b      	b.n	10634 <CONFIG_PM_SRAM_SIZE+0x634>
   1059c:	6922      	ldr	r2, [r4, #16]
   1059e:	2100      	movs	r1, #0
   105a0:	b10a      	cbz	r2, 105a6 <CONFIG_PM_SRAM_SIZE+0x5a6>
   105a2:	fbb0 f1f2 	udiv	r1, r0, r2
   105a6:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
   105aa:	280d      	cmp	r0, #13
   105ac:	d00c      	beq.n	105c8 <CONFIG_PM_SRAM_SIZE+0x5c8>
   105ae:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
   105b2:	f8b4 2216 	ldrh.w	r2, [r4, #534]	; 0x216
   105b6:	1843      	adds	r3, r0, r1
   105b8:	1ad3      	subs	r3, r2, r3
   105ba:	b21b      	sxth	r3, r3
   105bc:	2b00      	cmp	r3, #0
   105be:	db06      	blt.n	105ce <CONFIG_PM_SRAM_SIZE+0x5ce>
   105c0:	1c52      	adds	r2, r2, #1
   105c2:	f8a4 2216 	strh.w	r2, [r4, #534]	; 0x216
   105c6:	e006      	b.n	105d6 <CONFIG_PM_SRAM_SIZE+0x5d6>
   105c8:	f8b4 0216 	ldrh.w	r0, [r4, #534]	; 0x216
   105cc:	e012      	b.n	105f4 <CONFIG_PM_SRAM_SIZE+0x5f4>
   105ce:	1c49      	adds	r1, r1, #1
   105d0:	4408      	add	r0, r1
   105d2:	f8a4 0216 	strh.w	r0, [r4, #534]	; 0x216
   105d6:	f894 0219 	ldrb.w	r0, [r4, #537]	; 0x219
   105da:	f88d 0000 	strb.w	r0, [sp]
   105de:	9800      	ldr	r0, [sp, #0]
   105e0:	9000      	str	r0, [sp, #0]
   105e2:	f89d 0000 	ldrb.w	r0, [sp]
   105e6:	b940      	cbnz	r0, 105fa <CONFIG_PM_SRAM_SIZE+0x5fa>
   105e8:	f8b4 0216 	ldrh.w	r0, [r4, #534]	; 0x216
   105ec:	f8b4 11cc 	ldrh.w	r1, [r4, #460]	; 0x1cc
   105f0:	4288      	cmp	r0, r1
   105f2:	d102      	bne.n	105fa <CONFIG_PM_SRAM_SIZE+0x5fa>
   105f4:	1c40      	adds	r0, r0, #1
   105f6:	f8a4 0216 	strh.w	r0, [r4, #534]	; 0x216
   105fa:	f8b4 024a 	ldrh.w	r0, [r4, #586]	; 0x24a
   105fe:	1c40      	adds	r0, r0, #1
   10600:	f8a4 024a 	strh.w	r0, [r4, #586]	; 0x24a
   10604:	f8b4 00b6 	ldrh.w	r0, [r4, #182]	; 0xb6
   10608:	f8b4 10b4 	ldrh.w	r1, [r4, #180]	; 0xb4
   1060c:	1a40      	subs	r0, r0, r1
   1060e:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
   10612:	1e40      	subs	r0, r0, #1
   10614:	4408      	add	r0, r1
   10616:	b285      	uxth	r5, r0
   10618:	e026      	b.n	10668 <CONFIG_PM_SRAM_SIZE+0x668>
   1061a:	a801      	add	r0, sp, #4
   1061c:	2300      	movs	r3, #0
   1061e:	9000      	str	r0, [sp, #0]
   10620:	461a      	mov	r2, r3
   10622:	4620      	mov	r0, r4
   10624:	f7f8 fb5a 	bl	8cdc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x200>
   10628:	2800      	cmp	r0, #0
   1062a:	d03b      	beq.n	106a4 <CONFIG_PM_SRAM_SIZE+0x6a4>
   1062c:	2801      	cmp	r0, #1
   1062e:	d004      	beq.n	1063a <CONFIG_PM_SRAM_SIZE+0x63a>
   10630:	f240 6151 	movw	r1, #1617	; 0x651
   10634:	2030      	movs	r0, #48	; 0x30
   10636:	f7f4 ff93 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1063a:	f8b4 0216 	ldrh.w	r0, [r4, #534]	; 0x216
   1063e:	f8b4 11c8 	ldrh.w	r1, [r4, #456]	; 0x1c8
   10642:	1a42      	subs	r2, r0, r1
   10644:	b212      	sxth	r2, r2
   10646:	2a00      	cmp	r2, #0
   10648:	da09      	bge.n	1065e <CONFIG_PM_SRAM_SIZE+0x65e>
   1064a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1064e:	4402      	add	r2, r0
   10650:	1aaa      	subs	r2, r5, r2
   10652:	b212      	sxth	r2, r2
   10654:	2a00      	cmp	r2, #0
   10656:	da02      	bge.n	1065e <CONFIG_PM_SRAM_SIZE+0x65e>
   10658:	f8a4 1216 	strh.w	r1, [r4, #534]	; 0x216
   1065c:	e004      	b.n	10668 <CONFIG_PM_SRAM_SIZE+0x668>
   1065e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   10662:	4408      	add	r0, r1
   10664:	f8a4 0216 	strh.w	r0, [r4, #534]	; 0x216
   10668:	f8b4 1216 	ldrh.w	r1, [r4, #534]	; 0x216
   1066c:	1a68      	subs	r0, r5, r1
   1066e:	b200      	sxth	r0, r0
   10670:	2800      	cmp	r0, #0
   10672:	dad2      	bge.n	1061a <CONFIG_PM_SRAM_SIZE+0x61a>
   10674:	f894 008a 	ldrb.w	r0, [r4, #138]	; 0x8a
   10678:	b190      	cbz	r0, 106a0 <CONFIG_PM_SRAM_SIZE+0x6a0>
   1067a:	2008      	movs	r0, #8
   1067c:	f884 00a6 	strb.w	r0, [r4, #166]	; 0xa6
   10680:	2208      	movs	r2, #8
   10682:	4621      	mov	r1, r4
   10684:	f104 009d 	add.w	r0, r4, #157	; 0x9d
   10688:	f7f6 ff92 	bl	75b0 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
   1068c:	4620      	mov	r0, r4
   1068e:	f000 f862 	bl	10756 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
   10692:	4620      	mov	r0, r4
   10694:	f7ff fe4c 	bl	10330 <CONFIG_PM_SRAM_SIZE+0x330>
   10698:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
   1069c:	f7f7 b85a 	b.w	7754 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   106a0:	203e      	movs	r0, #62	; 0x3e
   106a2:	e7eb      	b.n	1067c <CONFIG_PM_SRAM_SIZE+0x67c>
   106a4:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   106a6:	01f4      	.short	0x01f4
   106a8:	009600fa 	.word	0x009600fa
   106ac:	004b0064 	.word	0x004b0064
   106b0:	001e0032 	.word	0x001e0032
   106b4:	000a0014 	.word	0x000a0014
   106b8:	00020005 	.word	0x00020005
   106bc:	0001      	.short	0x0001
   106be:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
   106c2:	f001 0307 	and.w	r3, r1, #7
   106c6:	7802      	ldrb	r2, [r0, #0]
   106c8:	2101      	movs	r1, #1
   106ca:	4099      	lsls	r1, r3
   106cc:	438a      	bics	r2, r1
   106ce:	7002      	strb	r2, [r0, #0]
   106d0:	4770      	bx	lr
   106d2:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
   106d6:	f001 0307 	and.w	r3, r1, #7
   106da:	7802      	ldrb	r2, [r0, #0]
   106dc:	2101      	movs	r1, #1
   106de:	4099      	lsls	r1, r3
   106e0:	430a      	orrs	r2, r1
   106e2:	7002      	strb	r2, [r0, #0]
   106e4:	4770      	bx	lr

000106e6 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>:
   106e6:	b510      	push	{r4, lr}
   106e8:	4604      	mov	r4, r0
   106ea:	f8d0 027c 	ldr.w	r0, [r0, #636]	; 0x27c
   106ee:	6921      	ldr	r1, [r4, #16]
   106f0:	4288      	cmp	r0, r1
   106f2:	d109      	bne.n	10708 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
   106f4:	f8b4 1280 	ldrh.w	r1, [r4, #640]	; 0x280
   106f8:	8b22      	ldrh	r2, [r4, #24]
   106fa:	4291      	cmp	r1, r2
   106fc:	d104      	bne.n	10708 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
   106fe:	f8b4 1282 	ldrh.w	r1, [r4, #642]	; 0x282
   10702:	8b62      	ldrh	r2, [r4, #26]
   10704:	4291      	cmp	r1, r2
   10706:	d016      	beq.n	10736 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x50>
   10708:	8821      	ldrh	r1, [r4, #0]
   1070a:	f8a4 11ae 	strh.w	r1, [r4, #430]	; 0x1ae
   1070e:	f7fe fb6e 	bl	edee <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
   10712:	f8a4 01b0 	strh.w	r0, [r4, #432]	; 0x1b0
   10716:	f8b4 0280 	ldrh.w	r0, [r4, #640]	; 0x280
   1071a:	f8a4 01b2 	strh.w	r0, [r4, #434]	; 0x1b2
   1071e:	f8b4 0282 	ldrh.w	r0, [r4, #642]	; 0x282
   10722:	f8a4 01b4 	strh.w	r0, [r4, #436]	; 0x1b4
   10726:	2206      	movs	r2, #6
   10728:	4621      	mov	r1, r4
   1072a:	f504 70d1 	add.w	r0, r4, #418	; 0x1a2
   1072e:	f7f6 ff3f 	bl	75b0 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
   10732:	f7f7 f80f 	bl	7754 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   10736:	2102      	movs	r1, #2
   10738:	4620      	mov	r0, r4
   1073a:	f7f6 fd43 	bl	71c4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
   1073e:	2000      	movs	r0, #0
   10740:	f804 0f86 	strb.w	r0, [r4, #134]!
   10744:	2003      	movs	r0, #3
   10746:	7120      	strb	r0, [r4, #4]
   10748:	bd10      	pop	{r4, pc}

0001074a <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
   1074a:	f7f5 babd 	b.w	5cc8 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

0001074e <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>:
   1074e:	2000      	movs	r0, #0
   10750:	4770      	bx	lr

00010752 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>:
   10752:	f7f5 bf79 	b.w	6648 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>

00010756 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>:
   10756:	2100      	movs	r1, #0
   10758:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
   1075c:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
   10760:	f880 108a 	strb.w	r1, [r0, #138]	; 0x8a
   10764:	f890 11d3 	ldrb.w	r1, [r0, #467]	; 0x1d3
   10768:	b109      	cbz	r1, 1076e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x18>
   1076a:	2102      	movs	r1, #2
   1076c:	e000      	b.n	10770 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a>
   1076e:	2103      	movs	r1, #3
   10770:	f7f8 b97a 	b.w	8a68 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
   10774:	f890 0094 	ldrb.w	r0, [r0, #148]	; 0x94
   10778:	28fe      	cmp	r0, #254	; 0xfe
   1077a:	d001      	beq.n	10780 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2a>
   1077c:	2001      	movs	r0, #1
   1077e:	4770      	bx	lr
   10780:	2000      	movs	r0, #0
   10782:	4770      	bx	lr
   10784:	b510      	push	{r4, lr}
   10786:	2801      	cmp	r0, #1
   10788:	d006      	beq.n	10798 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
   1078a:	2802      	cmp	r0, #2
   1078c:	d004      	beq.n	10798 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
   1078e:	f240 21a9 	movw	r1, #681	; 0x2a9
   10792:	2006      	movs	r0, #6
   10794:	f7f4 fee4 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10798:	bd10      	pop	{r4, pc}
   1079a:	2801      	cmp	r0, #1
   1079c:	d002      	beq.n	107a4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x4e>
   1079e:	2802      	cmp	r0, #2
   107a0:	d105      	bne.n	107ae <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
   107a2:	e002      	b.n	107aa <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x54>
   107a4:	2901      	cmp	r1, #1
   107a6:	d004      	beq.n	107b2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
   107a8:	e001      	b.n	107ae <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
   107aa:	2902      	cmp	r1, #2
   107ac:	d001      	beq.n	107b2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
   107ae:	2000      	movs	r0, #0
   107b0:	4770      	bx	lr
   107b2:	2001      	movs	r0, #1
   107b4:	4770      	bx	lr
   107b6:	1a40      	subs	r0, r0, r1
   107b8:	b200      	sxth	r0, r0
   107ba:	f647 71fe 	movw	r1, #32766	; 0x7ffe
   107be:	4288      	cmp	r0, r1
   107c0:	dc01      	bgt.n	107c6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x70>
   107c2:	2800      	cmp	r0, #0
   107c4:	dc01      	bgt.n	107ca <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x74>
   107c6:	2001      	movs	r0, #1
   107c8:	4770      	bx	lr
   107ca:	2000      	movs	r0, #0
   107cc:	4770      	bx	lr
   107ce:	4602      	mov	r2, r0
   107d0:	2000      	movs	r0, #0
   107d2:	2a16      	cmp	r2, #22
   107d4:	d102      	bne.n	107dc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x86>
   107d6:	4608      	mov	r0, r1
   107d8:	f7f9 bd40 	b.w	a25c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfb0>
   107dc:	4770      	bx	lr
   107de:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
   107e2:	f001 0107 	and.w	r1, r1, #7
   107e6:	7800      	ldrb	r0, [r0, #0]
   107e8:	40c8      	lsrs	r0, r1
   107ea:	f000 0001 	and.w	r0, r0, #1
   107ee:	4770      	bx	lr
   107f0:	b118      	cbz	r0, 107fa <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xa4>
   107f2:	2802      	cmp	r0, #2
   107f4:	d001      	beq.n	107fa <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xa4>
   107f6:	2001      	movs	r0, #1
   107f8:	4770      	bx	lr
   107fa:	2000      	movs	r0, #0
   107fc:	4770      	bx	lr

000107fe <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
   107fe:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   10800:	7881      	ldrb	r1, [r0, #2]
   10802:	4604      	mov	r4, r0
   10804:	291a      	cmp	r1, #26
   10806:	d025      	beq.n	10854 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x56>
   10808:	dc0e      	bgt.n	10828 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2a>
   1080a:	2916      	cmp	r1, #22
   1080c:	d22c      	bcs.n	10868 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
   1080e:	e8df f001 	tbb	[pc, r1]
   10812:	2b2b      	.short	0x2b2b
   10814:	212b2b2b 	.word	0x212b2b2b
   10818:	2b2b2b2b 	.word	0x2b2b2b2b
   1081c:	2b2b2b2b 	.word	0x2b2b2b2b
   10820:	2b2b2b2b 	.word	0x2b2b2b2b
   10824:	2121212b 	.word	0x2121212b
   10828:	292a      	cmp	r1, #42	; 0x2a
   1082a:	d01d      	beq.n	10868 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
   1082c:	dc0b      	bgt.n	10846 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x48>
   1082e:	f1a1 011e 	sub.w	r1, r1, #30
   10832:	290c      	cmp	r1, #12
   10834:	d218      	bcs.n	10868 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
   10836:	e8df f001 	tbb	[pc, r1]
   1083a:	1717      	.short	0x1717
   1083c:	17171717 	.word	0x17171717
   10840:	17171717 	.word	0x17171717
   10844:	0d17      	.short	0x0d17
   10846:	393a      	subs	r1, #58	; 0x3a
   10848:	2904      	cmp	r1, #4
   1084a:	d20d      	bcs.n	10868 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
   1084c:	e8df f001 	tbb	[pc, r1]
   10850:	020c020c 	.word	0x020c020c
   10854:	8820      	ldrh	r0, [r4, #0]
   10856:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
   1085a:	d205      	bcs.n	10868 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
   1085c:	4669      	mov	r1, sp
   1085e:	f7fe fab5 	bl	edcc <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10862:	b118      	cbz	r0, 1086c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6e>
   10864:	2002      	movs	r0, #2
   10866:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   10868:	2012      	movs	r0, #18
   1086a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   1086c:	9801      	ldr	r0, [sp, #4]
   1086e:	f890 1118 	ldrb.w	r1, [r0, #280]	; 0x118
   10872:	f88d 1008 	strb.w	r1, [sp, #8]
   10876:	9902      	ldr	r1, [sp, #8]
   10878:	9102      	str	r1, [sp, #8]
   1087a:	f89d 1008 	ldrb.w	r1, [sp, #8]
   1087e:	f500 708c 	add.w	r0, r0, #280	; 0x118
   10882:	b109      	cbz	r1, 10888 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x8a>
   10884:	200c      	movs	r0, #12
   10886:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   10888:	21ff      	movs	r1, #255	; 0xff
   1088a:	7001      	strb	r1, [r0, #0]
   1088c:	78a1      	ldrb	r1, [r4, #2]
   1088e:	7041      	strb	r1, [r0, #1]
   10890:	4668      	mov	r0, sp
   10892:	f7fe fe5a 	bl	f54a <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
   10896:	2000      	movs	r0, #0
   10898:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0001089a <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
   1089a:	b510      	push	{r4, lr}
   1089c:	4604      	mov	r4, r0
   1089e:	f000 fe01 	bl	114a4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3bc>
   108a2:	b108      	cbz	r0, 108a8 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
   108a4:	200c      	movs	r0, #12
   108a6:	bd10      	pop	{r4, pc}
   108a8:	7820      	ldrb	r0, [r4, #0]
   108aa:	b118      	cbz	r0, 108b4 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
   108ac:	2801      	cmp	r0, #1
   108ae:	d001      	beq.n	108b4 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
   108b0:	2012      	movs	r0, #18
   108b2:	bd10      	pop	{r4, pc}
   108b4:	f7ff ff9c 	bl	107f0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x9a>
   108b8:	1c61      	adds	r1, r4, #1
   108ba:	f7f6 fb51 	bl	6f60 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
   108be:	b108      	cbz	r0, 108c4 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
   108c0:	2000      	movs	r0, #0
   108c2:	bd10      	pop	{r4, pc}
   108c4:	2007      	movs	r0, #7
   108c6:	bd10      	pop	{r4, pc}

000108c8 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
   108c8:	b510      	push	{r4, lr}
   108ca:	f000 fdeb 	bl	114a4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3bc>
   108ce:	b108      	cbz	r0, 108d4 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
   108d0:	200c      	movs	r0, #12
   108d2:	bd10      	pop	{r4, pc}
   108d4:	f7f6 fb6c 	bl	6fb0 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
   108d8:	2000      	movs	r0, #0
   108da:	bd10      	pop	{r4, pc}

000108dc <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
   108dc:	b510      	push	{r4, lr}
   108de:	460b      	mov	r3, r1
   108e0:	2201      	movs	r2, #1
   108e2:	f100 0110 	add.w	r1, r0, #16
   108e6:	f7fe fa53 	bl	ed90 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
   108ea:	2000      	movs	r0, #0
   108ec:	bd10      	pop	{r4, pc}

000108ee <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
   108ee:	b510      	push	{r4, lr}
   108f0:	8800      	ldrh	r0, [r0, #0]
   108f2:	2100      	movs	r1, #0
   108f4:	f7fd ffdc 	bl	e8b0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   108f8:	b118      	cbz	r0, 10902 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
   108fa:	f890 1258 	ldrb.w	r1, [r0, #600]	; 0x258
   108fe:	b111      	cbz	r1, 10906 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
   10900:	e007      	b.n	10912 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
   10902:	2002      	movs	r0, #2
   10904:	bd10      	pop	{r4, pc}
   10906:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
   1090a:	2914      	cmp	r1, #20
   1090c:	d003      	beq.n	10916 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
   1090e:	2915      	cmp	r1, #21
   10910:	d001      	beq.n	10916 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
   10912:	200c      	movs	r0, #12
   10914:	bd10      	pop	{r4, pc}
   10916:	2102      	movs	r1, #2
   10918:	f880 1258 	strb.w	r1, [r0, #600]	; 0x258
   1091c:	2000      	movs	r0, #0
   1091e:	bd10      	pop	{r4, pc}

00010920 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>:
   10920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10922:	4605      	mov	r5, r0
   10924:	8800      	ldrh	r0, [r0, #0]
   10926:	2100      	movs	r1, #0
   10928:	f7fd ffc2 	bl	e8b0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   1092c:	0004      	movs	r4, r0
   1092e:	d003      	beq.n	10938 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x18>
   10930:	f894 0258 	ldrb.w	r0, [r4, #600]	; 0x258
   10934:	b110      	cbz	r0, 1093c <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x1c>
   10936:	e011      	b.n	1095c <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3c>
   10938:	2002      	movs	r0, #2
   1093a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1093c:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
   10940:	2814      	cmp	r0, #20
   10942:	d001      	beq.n	10948 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x28>
   10944:	2815      	cmp	r0, #21
   10946:	d109      	bne.n	1095c <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3c>
   10948:	f894 028c 	ldrb.w	r0, [r4, #652]	; 0x28c
   1094c:	f88d 0000 	strb.w	r0, [sp]
   10950:	9800      	ldr	r0, [sp, #0]
   10952:	9000      	str	r0, [sp, #0]
   10954:	f89d 0000 	ldrb.w	r0, [sp]
   10958:	2601      	movs	r6, #1
   1095a:	b108      	cbz	r0, 10960 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x40>
   1095c:	200c      	movs	r0, #12
   1095e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10960:	2210      	movs	r2, #16
   10962:	1ca9      	adds	r1, r5, #2
   10964:	f204 2059 	addw	r0, r4, #601	; 0x259
   10968:	f7fc ff7e 	bl	d868 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1096c:	f884 6258 	strb.w	r6, [r4, #600]	; 0x258
   10970:	2000      	movs	r0, #0
   10972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00010974 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
   10974:	b510      	push	{r4, lr}
   10976:	2108      	movs	r1, #8
   10978:	f7f4 fe9e 	bl	56b8 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
   1097c:	2000      	movs	r0, #0
   1097e:	bd10      	pop	{r4, pc}

00010980 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
   10980:	b510      	push	{r4, lr}
   10982:	4604      	mov	r4, r0
   10984:	f7fa fe48 	bl	b618 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x138>
   10988:	f7ff f920 	bl	fbcc <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
   1098c:	7020      	strb	r0, [r4, #0]
   1098e:	2000      	movs	r0, #0
   10990:	bd10      	pop	{r4, pc}

00010992 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
   10992:	21fb      	movs	r1, #251	; 0xfb
   10994:	8001      	strh	r1, [r0, #0]
   10996:	f640 0248 	movw	r2, #2120	; 0x848
   1099a:	8042      	strh	r2, [r0, #2]
   1099c:	8081      	strh	r1, [r0, #4]
   1099e:	80c2      	strh	r2, [r0, #6]
   109a0:	2000      	movs	r0, #0
   109a2:	4770      	bx	lr

000109a4 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
   109a4:	b51c      	push	{r2, r3, r4, lr}
   109a6:	8800      	ldrh	r0, [r0, #0]
   109a8:	4669      	mov	r1, sp
   109aa:	f7fe fa0f 	bl	edcc <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   109ae:	2800      	cmp	r0, #0
   109b0:	d10d      	bne.n	109ce <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2a>
   109b2:	f89d 0000 	ldrb.w	r0, [sp]
   109b6:	9c01      	ldr	r4, [sp, #4]
   109b8:	2801      	cmp	r0, #1
   109ba:	f504 748c 	add.w	r4, r4, #280	; 0x118
   109be:	d103      	bne.n	109c8 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x24>
   109c0:	9801      	ldr	r0, [sp, #4]
   109c2:	f000 fcf0 	bl	113a6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2be>
   109c6:	b118      	cbz	r0, 109d0 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2c>
   109c8:	7ce0      	ldrb	r0, [r4, #19]
   109ca:	b118      	cbz	r0, 109d4 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x30>
   109cc:	203a      	movs	r0, #58	; 0x3a
   109ce:	bd1c      	pop	{r2, r3, r4, pc}
   109d0:	2002      	movs	r0, #2
   109d2:	bd1c      	pop	{r2, r3, r4, pc}
   109d4:	2001      	movs	r0, #1
   109d6:	74e0      	strb	r0, [r4, #19]
   109d8:	2000      	movs	r0, #0
   109da:	bd1c      	pop	{r2, r3, r4, pc}

000109dc <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
   109dc:	b510      	push	{r4, lr}
   109de:	4604      	mov	r4, r0
   109e0:	20d8      	movs	r0, #216	; 0xd8
   109e2:	7020      	strb	r0, [r4, #0]
   109e4:	f000 fcdc 	bl	113a0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b8>
   109e8:	7060      	strb	r0, [r4, #1]
   109ea:	2000      	movs	r0, #0
   109ec:	bd10      	pop	{r4, pc}

000109ee <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
   109ee:	2108      	movs	r1, #8
   109f0:	7001      	strb	r1, [r0, #0]
   109f2:	2000      	movs	r0, #0
   109f4:	4770      	bx	lr

000109f6 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
   109f6:	b510      	push	{r4, lr}
   109f8:	4604      	mov	r4, r0
   109fa:	f000 fd53 	bl	114a4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3bc>
   109fe:	b108      	cbz	r0, 10a04 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
   10a00:	200c      	movs	r0, #12
   10a02:	bd10      	pop	{r4, pc}
   10a04:	7820      	ldrb	r0, [r4, #0]
   10a06:	b108      	cbz	r0, 10a0c <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
   10a08:	2801      	cmp	r0, #1
   10a0a:	d107      	bne.n	10a1c <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
   10a0c:	f7ff fef0 	bl	107f0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x9a>
   10a10:	1c61      	adds	r1, r4, #1
   10a12:	f7fe f9b2 	bl	ed7a <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
   10a16:	b108      	cbz	r0, 10a1c <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
   10a18:	2000      	movs	r0, #0
   10a1a:	bd10      	pop	{r4, pc}
   10a1c:	2012      	movs	r0, #18
   10a1e:	bd10      	pop	{r4, pc}

00010a20 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
   10a20:	b51c      	push	{r2, r3, r4, lr}
   10a22:	4604      	mov	r4, r0
   10a24:	f7fa fdf8 	bl	b618 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x138>
   10a28:	2000      	movs	r0, #0
   10a2a:	f88d 0002 	strb.w	r0, [sp, #2]
   10a2e:	2103      	movs	r1, #3
   10a30:	f88d 1001 	strb.w	r1, [sp, #1]
   10a34:	f814 1b01 	ldrb.w	r1, [r4], #1
   10a38:	f88d 1003 	strb.w	r1, [sp, #3]
   10a3c:	f88d 0000 	strb.w	r0, [sp]
   10a40:	4668      	mov	r0, sp
   10a42:	9401      	str	r4, [sp, #4]
   10a44:	f000 f97d 	bl	10d42 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
   10a48:	bd1c      	pop	{r2, r3, r4, pc}

00010a4a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
   10a4a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   10a4c:	4605      	mov	r5, r0
   10a4e:	f7fa fde3 	bl	b618 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x138>
   10a52:	4606      	mov	r6, r0
   10a54:	7828      	ldrb	r0, [r5, #0]
   10a56:	2400      	movs	r4, #0
   10a58:	b160      	cbz	r0, 10a74 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
   10a5a:	f88d 4000 	strb.w	r4, [sp]
   10a5e:	2001      	movs	r0, #1
   10a60:	f10d 0101 	add.w	r1, sp, #1
   10a64:	f7f5 fc32 	bl	62cc <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
   10a68:	b120      	cbz	r0, 10a74 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
   10a6a:	4668      	mov	r0, sp
   10a6c:	f000 f897 	bl	10b9e <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>
   10a70:	2800      	cmp	r0, #0
   10a72:	d112      	bne.n	10a9a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
   10a74:	f88d 400c 	strb.w	r4, [sp, #12]
   10a78:	4630      	mov	r0, r6
   10a7a:	f7ff f89d 	bl	fbb8 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
   10a7e:	b118      	cbz	r0, 10a88 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x3e>
   10a80:	2080      	movs	r0, #128	; 0x80
   10a82:	f8ad 000d 	strh.w	r0, [sp, #13]
   10a86:	e001      	b.n	10a8c <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x42>
   10a88:	f8ad 400d 	strh.w	r4, [sp, #13]
   10a8c:	f88d 400f 	strb.w	r4, [sp, #15]
   10a90:	7828      	ldrb	r0, [r5, #0]
   10a92:	2801      	cmp	r0, #1
   10a94:	d003      	beq.n	10a9e <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x54>
   10a96:	b138      	cbz	r0, 10aa8 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x5e>
   10a98:	2012      	movs	r0, #18
   10a9a:	b004      	add	sp, #16
   10a9c:	bd70      	pop	{r4, r5, r6, pc}
   10a9e:	a903      	add	r1, sp, #12
   10aa0:	4630      	mov	r0, r6
   10aa2:	f7fa fdd7 	bl	b654 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
   10aa6:	e7f8      	b.n	10a9a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
   10aa8:	4630      	mov	r0, r6
   10aaa:	f000 fc92 	bl	113d2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2ea>
   10aae:	e7f4      	b.n	10a9a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>

00010ab0 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
   10ab0:	b530      	push	{r4, r5, lr}
   10ab2:	b08b      	sub	sp, #44	; 0x2c
   10ab4:	4604      	mov	r4, r0
   10ab6:	f7fa fdaf 	bl	b618 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x138>
   10aba:	4602      	mov	r2, r0
   10abc:	7920      	ldrb	r0, [r4, #4]
   10abe:	2804      	cmp	r0, #4
   10ac0:	d803      	bhi.n	10aca <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1a>
   10ac2:	8860      	ldrh	r0, [r4, #2]
   10ac4:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
   10ac8:	d902      	bls.n	10ad0 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x20>
   10aca:	2012      	movs	r0, #18
   10acc:	b00b      	add	sp, #44	; 0x2c
   10ace:	bd30      	pop	{r4, r5, pc}
   10ad0:	2500      	movs	r5, #0
   10ad2:	f88d 5004 	strb.w	r5, [sp, #4]
   10ad6:	7921      	ldrb	r1, [r4, #4]
   10ad8:	9500      	str	r5, [sp, #0]
   10ada:	f89d 0000 	ldrb.w	r0, [sp]
   10ade:	2905      	cmp	r1, #5
   10ae0:	f040 0010 	orr.w	r0, r0, #16
   10ae4:	f88d 0000 	strb.w	r0, [sp]
   10ae8:	d254      	bcs.n	10b94 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xe4>
   10aea:	e8df f001 	tbb	[pc, r1]
   10aee:	0803      	.short	0x0803
   10af0:	000b1105 	.word	0x000b1105
   10af4:	f040 0001 	orr.w	r0, r0, #1
   10af8:	f040 0002 	orr.w	r0, r0, #2
   10afc:	e006      	b.n	10b0c <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x5c>
   10afe:	f040 0009 	orr.w	r0, r0, #9
   10b02:	e001      	b.n	10b08 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x58>
   10b04:	f040 0001 	orr.w	r0, r0, #1
   10b08:	f040 0004 	orr.w	r0, r0, #4
   10b0c:	f88d 0000 	strb.w	r0, [sp]
   10b10:	f8bd 0000 	ldrh.w	r0, [sp]
   10b14:	9000      	str	r0, [sp, #0]
   10b16:	f8bd 0000 	ldrh.w	r0, [sp]
   10b1a:	f8ad 0005 	strh.w	r0, [sp, #5]
   10b1e:	8821      	ldrh	r1, [r4, #0]
   10b20:	f8dd 0006 	ldr.w	r0, [sp, #6]
   10b24:	f361 201f 	bfi	r0, r1, #8, #24
   10b28:	f8cd 0006 	str.w	r0, [sp, #6]
   10b2c:	8861      	ldrh	r1, [r4, #2]
   10b2e:	f8dd 0009 	ldr.w	r0, [sp, #9]
   10b32:	f361 201f 	bfi	r0, r1, #8, #24
   10b36:	f8cd 0009 	str.w	r0, [sp, #9]
   10b3a:	7b60      	ldrb	r0, [r4, #13]
   10b3c:	f88d 000d 	strb.w	r0, [sp, #13]
   10b40:	7960      	ldrb	r0, [r4, #5]
   10b42:	f88d 000e 	strb.w	r0, [sp, #14]
   10b46:	79a0      	ldrb	r0, [r4, #6]
   10b48:	f88d 000f 	strb.w	r0, [sp, #15]
   10b4c:	f8d4 0007 	ldr.w	r0, [r4, #7]
   10b50:	9004      	str	r0, [sp, #16]
   10b52:	f8b4 000b 	ldrh.w	r0, [r4, #11]
   10b56:	f8ad 0014 	strh.w	r0, [sp, #20]
   10b5a:	7ba0      	ldrb	r0, [r4, #14]
   10b5c:	f88d 0016 	strb.w	r0, [sp, #22]
   10b60:	207f      	movs	r0, #127	; 0x7f
   10b62:	f88d 0017 	strb.w	r0, [sp, #23]
   10b66:	2001      	movs	r0, #1
   10b68:	f88d 0018 	strb.w	r0, [sp, #24]
   10b6c:	f88d 5019 	strb.w	r5, [sp, #25]
   10b70:	f88d 001a 	strb.w	r0, [sp, #26]
   10b74:	f88d 501b 	strb.w	r5, [sp, #27]
   10b78:	4610      	mov	r0, r2
   10b7a:	f7ff f839 	bl	fbf0 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
   10b7e:	f88d 001c 	strb.w	r0, [sp, #28]
   10b82:	f88d 501d 	strb.w	r5, [sp, #29]
   10b86:	f88d 501e 	strb.w	r5, [sp, #30]
   10b8a:	a909      	add	r1, sp, #36	; 0x24
   10b8c:	a801      	add	r0, sp, #4
   10b8e:	f7fa fc1f 	bl	b3d0 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
   10b92:	e79b      	b.n	10acc <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1c>
   10b94:	f241 01cf 	movw	r1, #4303	; 0x10cf
   10b98:	2039      	movs	r0, #57	; 0x39
   10b9a:	f7f4 fce1 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00010b9e <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>:
   10b9e:	b570      	push	{r4, r5, r6, lr}
   10ba0:	4604      	mov	r4, r0
   10ba2:	7800      	ldrb	r0, [r0, #0]
   10ba4:	2101      	movs	r1, #1
   10ba6:	f7fd fe83 	bl	e8b0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   10baa:	0005      	movs	r5, r0
   10bac:	d007      	beq.n	10bbe <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x20>
   10bae:	f7ff f9c5 	bl	ff3c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   10bb2:	b160      	cbz	r0, 10bce <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
   10bb4:	4628      	mov	r0, r5
   10bb6:	f7ff f805 	bl	fbc4 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   10bba:	b110      	cbz	r0, 10bc2 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x24>
   10bbc:	e005      	b.n	10bca <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x2c>
   10bbe:	2042      	movs	r0, #66	; 0x42
   10bc0:	bd70      	pop	{r4, r5, r6, pc}
   10bc2:	4628      	mov	r0, r5
   10bc4:	f7fe fff4 	bl	fbb0 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   10bc8:	b108      	cbz	r0, 10bce <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
   10bca:	200c      	movs	r0, #12
   10bcc:	bd70      	pop	{r4, r5, r6, pc}
   10bce:	1c61      	adds	r1, r4, #1
   10bd0:	4628      	mov	r0, r5
   10bd2:	f7ff f805 	bl	fbe0 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>
   10bd6:	2000      	movs	r0, #0
   10bd8:	bd70      	pop	{r4, r5, r6, pc}

00010bda <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
   10bda:	b50e      	push	{r1, r2, r3, lr}
   10bdc:	8882      	ldrh	r2, [r0, #4]
   10bde:	f244 2390 	movw	r3, #17040	; 0x4290
   10be2:	429a      	cmp	r2, r3
   10be4:	d901      	bls.n	10bea <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x10>
   10be6:	2012      	movs	r0, #18
   10be8:	bd0e      	pop	{r1, r2, r3, pc}
   10bea:	f640 0348 	movw	r3, #2120	; 0x848
   10bee:	429a      	cmp	r2, r3
   10bf0:	d300      	bcc.n	10bf4 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
   10bf2:	461a      	mov	r2, r3
   10bf4:	8803      	ldrh	r3, [r0, #0]
   10bf6:	f8ad 3000 	strh.w	r3, [sp]
   10bfa:	8843      	ldrh	r3, [r0, #2]
   10bfc:	f8ad 3002 	strh.w	r3, [sp, #2]
   10c00:	f8ad 2004 	strh.w	r2, [sp, #4]
   10c04:	8843      	ldrh	r3, [r0, #2]
   10c06:	f8ad 3006 	strh.w	r3, [sp, #6]
   10c0a:	f8ad 2008 	strh.w	r2, [sp, #8]
   10c0e:	8800      	ldrh	r0, [r0, #0]
   10c10:	8008      	strh	r0, [r1, #0]
   10c12:	4668      	mov	r0, sp
   10c14:	f7fa fdf0 	bl	b7f8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a4>
   10c18:	bd0e      	pop	{r1, r2, r3, pc}

00010c1a <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
   10c1a:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   10c1c:	4604      	mov	r4, r0
   10c1e:	f10d 0007 	add.w	r0, sp, #7
   10c22:	9000      	str	r0, [sp, #0]
   10c24:	7922      	ldrb	r2, [r4, #4]
   10c26:	78e1      	ldrb	r1, [r4, #3]
   10c28:	78a0      	ldrb	r0, [r4, #2]
   10c2a:	f10d 0306 	add.w	r3, sp, #6
   10c2e:	f000 fbfd 	bl	1142c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x344>
   10c32:	2800      	cmp	r0, #0
   10c34:	d109      	bne.n	10c4a <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x30>
   10c36:	8820      	ldrh	r0, [r4, #0]
   10c38:	f8ad 0004 	strh.w	r0, [sp, #4]
   10c3c:	f8b4 0005 	ldrh.w	r0, [r4, #5]
   10c40:	f8ad 0008 	strh.w	r0, [sp, #8]
   10c44:	a801      	add	r0, sp, #4
   10c46:	f000 f937 	bl	10eb8 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
   10c4a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00010c4c <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
   10c4c:	b510      	push	{r4, lr}
   10c4e:	4604      	mov	r4, r0
   10c50:	2001      	movs	r0, #1
   10c52:	f000 fa83 	bl	1115c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x74>
   10c56:	b128      	cbz	r0, 10c64 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
   10c58:	4621      	mov	r1, r4
   10c5a:	2001      	movs	r0, #1
   10c5c:	f7f5 fb4e 	bl	62fc <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
   10c60:	2000      	movs	r0, #0
   10c62:	bd10      	pop	{r4, pc}
   10c64:	200c      	movs	r0, #12
   10c66:	bd10      	pop	{r4, pc}

00010c68 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
   10c68:	b51c      	push	{r2, r3, r4, lr}
   10c6a:	4604      	mov	r4, r0
   10c6c:	f7fa fcd4 	bl	b618 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x138>
   10c70:	2000      	movs	r0, #0
   10c72:	f88d 0000 	strb.w	r0, [sp]
   10c76:	f88d 0002 	strb.w	r0, [sp, #2]
   10c7a:	2003      	movs	r0, #3
   10c7c:	f88d 0001 	strb.w	r0, [sp, #1]
   10c80:	f814 0b01 	ldrb.w	r0, [r4], #1
   10c84:	f88d 0003 	strb.w	r0, [sp, #3]
   10c88:	4668      	mov	r0, sp
   10c8a:	9401      	str	r4, [sp, #4]
   10c8c:	f000 f8c2 	bl	10e14 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
   10c90:	bd1c      	pop	{r2, r3, r4, pc}

00010c92 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
   10c92:	b51c      	push	{r2, r3, r4, lr}
   10c94:	8801      	ldrh	r1, [r0, #0]
   10c96:	f8ad 1000 	strh.w	r1, [sp]
   10c9a:	8841      	ldrh	r1, [r0, #2]
   10c9c:	f8ad 1002 	strh.w	r1, [sp, #2]
   10ca0:	8801      	ldrh	r1, [r0, #0]
   10ca2:	f8ad 1004 	strh.w	r1, [sp, #4]
   10ca6:	8840      	ldrh	r0, [r0, #2]
   10ca8:	f8ad 0006 	strh.w	r0, [sp, #6]
   10cac:	4668      	mov	r0, sp
   10cae:	f7fa fe27 	bl	b900 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2ac>
   10cb2:	bd1c      	pop	{r2, r3, r4, pc}

00010cb4 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
   10cb4:	b510      	push	{r4, lr}
   10cb6:	f7f5 fb45 	bl	6344 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
   10cba:	2000      	movs	r0, #0
   10cbc:	bd10      	pop	{r4, pc}

00010cbe <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY>:
   10cbe:	b510      	push	{r4, lr}
   10cc0:	460c      	mov	r4, r1
   10cc2:	2100      	movs	r1, #0
   10cc4:	f7fd fdf4 	bl	e8b0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   10cc8:	b118      	cbz	r0, 10cd2 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x14>
   10cca:	2c02      	cmp	r4, #2
   10ccc:	d903      	bls.n	10cd6 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x18>
   10cce:	2012      	movs	r0, #18
   10cd0:	bd10      	pop	{r4, pc}
   10cd2:	2002      	movs	r0, #2
   10cd4:	bd10      	pop	{r4, pc}
   10cd6:	f014 0101 	ands.w	r1, r4, #1
   10cda:	f880 11d5 	strb.w	r1, [r0, #469]	; 0x1d5
   10cde:	f3c4 0240 	ubfx	r2, r4, #1, #1
   10ce2:	f880 21d4 	strb.w	r2, [r0, #468]	; 0x1d4
   10ce6:	d004      	beq.n	10cf2 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x34>
   10ce8:	f890 11d2 	ldrb.w	r1, [r0, #466]	; 0x1d2
   10cec:	b109      	cbz	r1, 10cf2 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x34>
   10cee:	f7ff f93f 	bl	ff70 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
   10cf2:	2000      	movs	r0, #0
   10cf4:	bd10      	pop	{r4, pc}

00010cf6 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
   10cf6:	b51c      	push	{r2, r3, r4, lr}
   10cf8:	460c      	mov	r4, r1
   10cfa:	4669      	mov	r1, sp
   10cfc:	f7fe f866 	bl	edcc <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10d00:	2800      	cmp	r0, #0
   10d02:	d105      	bne.n	10d10 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x1a>
   10d04:	2100      	movs	r1, #0
   10d06:	4622      	mov	r2, r4
   10d08:	9801      	ldr	r0, [sp, #4]
   10d0a:	f000 faf3 	bl	112f4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x20c>
   10d0e:	2000      	movs	r0, #0
   10d10:	bd1c      	pop	{r2, r3, r4, pc}

00010d12 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
   10d12:	b510      	push	{r4, lr}
   10d14:	4604      	mov	r4, r0
   10d16:	2000      	movs	r0, #0
   10d18:	f000 fa20 	bl	1115c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x74>
   10d1c:	b128      	cbz	r0, 10d2a <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x18>
   10d1e:	4621      	mov	r1, r4
   10d20:	2000      	movs	r0, #0
   10d22:	f7f5 faeb 	bl	62fc <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
   10d26:	2000      	movs	r0, #0
   10d28:	bd10      	pop	{r4, pc}
   10d2a:	200c      	movs	r0, #12
   10d2c:	bd10      	pop	{r4, pc}

00010d2e <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
   10d2e:	b510      	push	{r4, lr}
   10d30:	7800      	ldrb	r0, [r0, #0]
   10d32:	b100      	cbz	r0, 10d36 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ+0x8>
   10d34:	2001      	movs	r0, #1
   10d36:	f7f7 fe57 	bl	89e8 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>
   10d3a:	2000      	movs	r0, #0
   10d3c:	bd10      	pop	{r4, pc}

00010d3e <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
   10d3e:	f7fa bd5b 	b.w	b7f8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a4>

00010d42 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
   10d42:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   10d46:	4606      	mov	r6, r0
   10d48:	7845      	ldrb	r5, [r0, #1]
   10d4a:	7800      	ldrb	r0, [r0, #0]
   10d4c:	2101      	movs	r1, #1
   10d4e:	f7fd fdaf 	bl	e8b0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   10d52:	0004      	movs	r4, r0
   10d54:	d01e      	beq.n	10d94 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x52>
   10d56:	f7fe feba 	bl	face <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
   10d5a:	78f1      	ldrb	r1, [r6, #3]
   10d5c:	4281      	cmp	r1, r0
   10d5e:	d800      	bhi.n	10d62 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x20>
   10d60:	4608      	mov	r0, r1
   10d62:	4607      	mov	r7, r0
   10d64:	2d04      	cmp	r5, #4
   10d66:	d018      	beq.n	10d9a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x58>
   10d68:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   10d6a:	f7fd fefe 	bl	eb6a <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
   10d6e:	4438      	add	r0, r7
   10d70:	b281      	uxth	r1, r0
   10d72:	4620      	mov	r0, r4
   10d74:	2201      	movs	r2, #1
   10d76:	f000 fa03 	bl	11180 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x98>
   10d7a:	2800      	cmp	r0, #0
   10d7c:	d10b      	bne.n	10d96 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
   10d7e:	2d03      	cmp	r5, #3
   10d80:	d000      	beq.n	10d84 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
   10d82:	b1df      	cbz	r7, 10dbc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   10d84:	4620      	mov	r0, r4
   10d86:	f7fe ff1b 	bl	fbc0 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   10d8a:	7871      	ldrb	r1, [r6, #1]
   10d8c:	2903      	cmp	r1, #3
   10d8e:	d010      	beq.n	10db2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
   10d90:	b9a0      	cbnz	r0, 10dbc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   10d92:	e004      	b.n	10d9e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x5c>
   10d94:	2042      	movs	r0, #66	; 0x42
   10d96:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   10d9a:	b97f      	cbnz	r7, 10dbc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   10d9c:	e7f2      	b.n	10d84 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
   10d9e:	2904      	cmp	r1, #4
   10da0:	d107      	bne.n	10db2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
   10da2:	4620      	mov	r0, r4
   10da4:	f7ff f8ca 	bl	ff3c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   10da8:	b140      	cbz	r0, 10dbc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   10daa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   10dac:	f7fd feac 	bl	eb08 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>
   10db0:	b120      	cbz	r0, 10dbc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   10db2:	2d01      	cmp	r5, #1
   10db4:	d004      	beq.n	10dc0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
   10db6:	2d03      	cmp	r5, #3
   10db8:	d002      	beq.n	10dc0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
   10dba:	e00e      	b.n	10dda <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x98>
   10dbc:	2012      	movs	r0, #18
   10dbe:	e7ea      	b.n	10d96 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
   10dc0:	4620      	mov	r0, r4
   10dc2:	f7fe fefd 	bl	fbc0 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   10dc6:	b108      	cbz	r0, 10dcc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x8a>
   10dc8:	2200      	movs	r2, #0
   10dca:	e002      	b.n	10dd2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
   10dcc:	2d01      	cmp	r5, #1
   10dce:	d013      	beq.n	10df8 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xb6>
   10dd0:	2201      	movs	r2, #1
   10dd2:	4668      	mov	r0, sp
   10dd4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   10dd6:	f7fd fe2f 	bl	ea38 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   10dda:	2d04      	cmp	r5, #4
   10ddc:	d018      	beq.n	10e10 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
   10dde:	6872      	ldr	r2, [r6, #4]
   10de0:	463b      	mov	r3, r7
   10de2:	2101      	movs	r1, #1
   10de4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   10de6:	f7fd fe5b 	bl	eaa0 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
   10dea:	b138      	cbz	r0, 10dfc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xba>
   10dec:	7870      	ldrb	r0, [r6, #1]
   10dee:	2802      	cmp	r0, #2
   10df0:	d006      	beq.n	10e00 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
   10df2:	2803      	cmp	r0, #3
   10df4:	d004      	beq.n	10e00 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
   10df6:	e00b      	b.n	10e10 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
   10df8:	2202      	movs	r2, #2
   10dfa:	e7ea      	b.n	10dd2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
   10dfc:	2007      	movs	r0, #7
   10dfe:	e7ca      	b.n	10d96 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
   10e00:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   10e02:	f7fd feb2 	bl	eb6a <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
   10e06:	4602      	mov	r2, r0
   10e08:	2101      	movs	r1, #1
   10e0a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   10e0c:	f7fd fe8a 	bl	eb24 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   10e10:	2000      	movs	r0, #0
   10e12:	e7c0      	b.n	10d96 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>

00010e14 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
   10e14:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   10e18:	4607      	mov	r7, r0
   10e1a:	7845      	ldrb	r5, [r0, #1]
   10e1c:	78c6      	ldrb	r6, [r0, #3]
   10e1e:	7800      	ldrb	r0, [r0, #0]
   10e20:	2101      	movs	r1, #1
   10e22:	f7fd fd45 	bl	e8b0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   10e26:	0004      	movs	r4, r0
   10e28:	d003      	beq.n	10e32 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x1e>
   10e2a:	f7fe fecb 	bl	fbc4 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   10e2e:	b118      	cbz	r0, 10e38 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x24>
   10e30:	e003      	b.n	10e3a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x26>
   10e32:	2042      	movs	r0, #66	; 0x42
   10e34:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   10e38:	2600      	movs	r6, #0
   10e3a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   10e3c:	f7fd fe99 	bl	eb72 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>
   10e40:	4430      	add	r0, r6
   10e42:	b281      	uxth	r1, r0
   10e44:	4688      	mov	r8, r1
   10e46:	4620      	mov	r0, r4
   10e48:	2201      	movs	r2, #1
   10e4a:	f000 f999 	bl	11180 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x98>
   10e4e:	2800      	cmp	r0, #0
   10e50:	d1f0      	bne.n	10e34 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   10e52:	2d04      	cmp	r5, #4
   10e54:	d008      	beq.n	10e68 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
   10e56:	2d03      	cmp	r5, #3
   10e58:	d00a      	beq.n	10e70 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x5c>
   10e5a:	b12e      	cbz	r6, 10e68 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
   10e5c:	4620      	mov	r0, r4
   10e5e:	f7ff f86d 	bl	ff3c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   10e62:	b118      	cbz	r0, 10e6c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x58>
   10e64:	200c      	movs	r0, #12
   10e66:	e7e5      	b.n	10e34 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   10e68:	2012      	movs	r0, #18
   10e6a:	e7e3      	b.n	10e34 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   10e6c:	2d01      	cmp	r5, #1
   10e6e:	d10c      	bne.n	10e8a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x76>
   10e70:	4620      	mov	r0, r4
   10e72:	f7fe fea5 	bl	fbc0 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   10e76:	b108      	cbz	r0, 10e7c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x68>
   10e78:	2204      	movs	r2, #4
   10e7a:	e002      	b.n	10e82 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
   10e7c:	2d01      	cmp	r5, #1
   10e7e:	d010      	beq.n	10ea2 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x8e>
   10e80:	2205      	movs	r2, #5
   10e82:	4668      	mov	r0, sp
   10e84:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   10e86:	f7fd fdd7 	bl	ea38 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   10e8a:	687a      	ldr	r2, [r7, #4]
   10e8c:	4633      	mov	r3, r6
   10e8e:	2100      	movs	r1, #0
   10e90:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   10e92:	f7fd fe05 	bl	eaa0 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
   10e96:	b130      	cbz	r0, 10ea6 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x92>
   10e98:	2d02      	cmp	r5, #2
   10e9a:	d006      	beq.n	10eaa <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
   10e9c:	2d03      	cmp	r5, #3
   10e9e:	d004      	beq.n	10eaa <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
   10ea0:	e008      	b.n	10eb4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xa0>
   10ea2:	2206      	movs	r2, #6
   10ea4:	e7ed      	b.n	10e82 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
   10ea6:	2007      	movs	r0, #7
   10ea8:	e7c4      	b.n	10e34 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   10eaa:	4642      	mov	r2, r8
   10eac:	2100      	movs	r1, #0
   10eae:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   10eb0:	f7fd fe38 	bl	eb24 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   10eb4:	2000      	movs	r0, #0
   10eb6:	e7bd      	b.n	10e34 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>

00010eb8 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
   10eb8:	b510      	push	{r4, lr}
   10eba:	4604      	mov	r4, r0
   10ebc:	8880      	ldrh	r0, [r0, #4]
   10ebe:	b128      	cbz	r0, 10ecc <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   10ec0:	2801      	cmp	r0, #1
   10ec2:	d003      	beq.n	10ecc <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   10ec4:	2802      	cmp	r0, #2
   10ec6:	d001      	beq.n	10ecc <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   10ec8:	2012      	movs	r0, #18
   10eca:	bd10      	pop	{r4, pc}
   10ecc:	78e0      	ldrb	r0, [r4, #3]
   10ece:	f000 f9ee 	bl	112ae <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c6>
   10ed2:	b148      	cbz	r0, 10ee8 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   10ed4:	78a0      	ldrb	r0, [r4, #2]
   10ed6:	f000 f9ea 	bl	112ae <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c6>
   10eda:	b128      	cbz	r0, 10ee8 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   10edc:	4620      	mov	r0, r4
   10ede:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10ee2:	2101      	movs	r1, #1
   10ee4:	f000 b890 	b.w	11008 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
   10ee8:	2011      	movs	r0, #17
   10eea:	bd10      	pop	{r4, pc}

00010eec <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
   10eec:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   10eee:	460c      	mov	r4, r1
   10ef0:	4605      	mov	r5, r0
   10ef2:	8800      	ldrh	r0, [r0, #0]
   10ef4:	4669      	mov	r1, sp
   10ef6:	f7fd ff69 	bl	edcc <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10efa:	2800      	cmp	r0, #0
   10efc:	d106      	bne.n	10f0c <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
   10efe:	9801      	ldr	r0, [sp, #4]
   10f00:	8829      	ldrh	r1, [r5, #0]
   10f02:	8021      	strh	r1, [r4, #0]
   10f04:	f8b0 00b0 	ldrh.w	r0, [r0, #176]	; 0xb0
   10f08:	8060      	strh	r0, [r4, #2]
   10f0a:	2000      	movs	r0, #0
   10f0c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

00010f0e <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
   10f0e:	b510      	push	{r4, lr}
   10f10:	4604      	mov	r4, r0
   10f12:	4601      	mov	r1, r0
   10f14:	2000      	movs	r0, #0
   10f16:	f7f5 f9d9 	bl	62cc <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
   10f1a:	b910      	cbnz	r0, 10f22 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
   10f1c:	2000      	movs	r0, #0
   10f1e:	6020      	str	r0, [r4, #0]
   10f20:	80a0      	strh	r0, [r4, #4]
   10f22:	2000      	movs	r0, #0
   10f24:	bd10      	pop	{r4, pc}

00010f26 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
   10f26:	b50e      	push	{r1, r2, r3, lr}
   10f28:	8800      	ldrh	r0, [r0, #0]
   10f2a:	4669      	mov	r1, sp
   10f2c:	f7fd ff4e 	bl	edcc <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10f30:	b960      	cbnz	r0, 10f4c <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x26>
   10f32:	9801      	ldr	r0, [sp, #4]
   10f34:	f000 fa37 	bl	113a6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2be>
   10f38:	b140      	cbz	r0, 10f4c <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x26>
   10f3a:	9801      	ldr	r0, [sp, #4]
   10f3c:	4601      	mov	r1, r0
   10f3e:	f890 212a 	ldrb.w	r2, [r0, #298]	; 0x12a
   10f42:	3078      	adds	r0, #120	; 0x78
   10f44:	f501 7195 	add.w	r1, r1, #298	; 0x12a
   10f48:	b962      	cbnz	r2, 10f64 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x3e>
   10f4a:	e001      	b.n	10f50 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2a>
   10f4c:	2002      	movs	r0, #2
   10f4e:	bd0e      	pop	{r1, r2, r3, pc}
   10f50:	f890 2056 	ldrb.w	r2, [r0, #86]	; 0x56
   10f54:	f88d 2008 	strb.w	r2, [sp, #8]
   10f58:	9a02      	ldr	r2, [sp, #8]
   10f5a:	9202      	str	r2, [sp, #8]
   10f5c:	f89d 3008 	ldrb.w	r3, [sp, #8]
   10f60:	2201      	movs	r2, #1
   10f62:	b10b      	cbz	r3, 10f68 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x42>
   10f64:	203a      	movs	r0, #58	; 0x3a
   10f66:	bd0e      	pop	{r1, r2, r3, pc}
   10f68:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
   10f6c:	079b      	lsls	r3, r3, #30
   10f6e:	d008      	beq.n	10f82 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x5c>
   10f70:	2201      	movs	r2, #1
   10f72:	304e      	adds	r0, #78	; 0x4e
   10f74:	9901      	ldr	r1, [sp, #4]
   10f76:	f7f6 fb1b 	bl	75b0 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
   10f7a:	f7f6 fbeb 	bl	7754 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   10f7e:	2000      	movs	r0, #0
   10f80:	bd0e      	pop	{r1, r2, r3, pc}
   10f82:	700a      	strb	r2, [r1, #0]
   10f84:	4668      	mov	r0, sp
   10f86:	f7fe fae0 	bl	f54a <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
   10f8a:	e7f8      	b.n	10f7e <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x58>

00010f8c <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
   10f8c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   10f8e:	460c      	mov	r4, r1
   10f90:	4605      	mov	r5, r0
   10f92:	8800      	ldrh	r0, [r0, #0]
   10f94:	4669      	mov	r1, sp
   10f96:	f7fd ff19 	bl	edcc <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10f9a:	b108      	cbz	r0, 10fa0 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
   10f9c:	2002      	movs	r0, #2
   10f9e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   10fa0:	78a8      	ldrb	r0, [r5, #2]
   10fa2:	b130      	cbz	r0, 10fb2 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x26>
   10fa4:	f000 f9fc 	bl	113a0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b8>
   10fa8:	70a0      	strb	r0, [r4, #2]
   10faa:	8828      	ldrh	r0, [r5, #0]
   10fac:	8020      	strh	r0, [r4, #0]
   10fae:	2000      	movs	r0, #0
   10fb0:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   10fb2:	9801      	ldr	r0, [sp, #4]
   10fb4:	f890 0072 	ldrb.w	r0, [r0, #114]	; 0x72
   10fb8:	e7f6      	b.n	10fa8 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

00010fba <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
   10fba:	b510      	push	{r4, lr}
   10fbc:	f7fa fcd0 	bl	b960 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
   10fc0:	2000      	movs	r0, #0
   10fc2:	bd10      	pop	{r4, pc}

00010fc4 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
   10fc4:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   10fc8:	4604      	mov	r4, r0
   10fca:	8840      	ldrh	r0, [r0, #2]
   10fcc:	460d      	mov	r5, r1
   10fce:	b1b8      	cbz	r0, 11000 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3c>
   10fd0:	8820      	ldrh	r0, [r4, #0]
   10fd2:	4669      	mov	r1, sp
   10fd4:	f7fd fefa 	bl	edcc <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10fd8:	2800      	cmp	r0, #0
   10fda:	d10f      	bne.n	10ffc <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>
   10fdc:	8820      	ldrh	r0, [r4, #0]
   10fde:	8028      	strh	r0, [r5, #0]
   10fe0:	9e01      	ldr	r6, [sp, #4]
   10fe2:	f106 0510 	add.w	r5, r6, #16
   10fe6:	3678      	adds	r6, #120	; 0x78
   10fe8:	682f      	ldr	r7, [r5, #0]
   10fea:	8862      	ldrh	r2, [r4, #2]
   10fec:	4639      	mov	r1, r7
   10fee:	4630      	mov	r0, r6
   10ff0:	f7fe f83b 	bl	f06a <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
   10ff4:	6828      	ldr	r0, [r5, #0]
   10ff6:	42b8      	cmp	r0, r7
   10ff8:	d1f6      	bne.n	10fe8 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x24>
   10ffa:	2000      	movs	r0, #0
   10ffc:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   11000:	2012      	movs	r0, #18
   11002:	e7fb      	b.n	10ffc <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>

00011004 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
   11004:	f000 b863 	b.w	110ce <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

00011008 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
   11008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1100c:	b086      	sub	sp, #24
   1100e:	4689      	mov	r9, r1
   11010:	4607      	mov	r7, r0
   11012:	8800      	ldrh	r0, [r0, #0]
   11014:	a901      	add	r1, sp, #4
   11016:	f7fd fed9 	bl	edcc <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1101a:	2800      	cmp	r0, #0
   1101c:	d136      	bne.n	1108c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>
   1101e:	9802      	ldr	r0, [sp, #8]
   11020:	4601      	mov	r1, r0
   11022:	4688      	mov	r8, r1
   11024:	f890 1176 	ldrb.w	r1, [r0, #374]	; 0x176
   11028:	f500 748c 	add.w	r4, r0, #280	; 0x118
   1102c:	f88d 1000 	strb.w	r1, [sp]
   11030:	9900      	ldr	r1, [sp, #0]
   11032:	9100      	str	r1, [sp, #0]
   11034:	f89d 1000 	ldrb.w	r1, [sp]
   11038:	3078      	adds	r0, #120	; 0x78
   1103a:	b109      	cbz	r1, 11040 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x38>
   1103c:	2601      	movs	r6, #1
   1103e:	e000      	b.n	11042 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3a>
   11040:	2600      	movs	r6, #0
   11042:	7b81      	ldrb	r1, [r0, #14]
   11044:	2921      	cmp	r1, #33	; 0x21
   11046:	d100      	bne.n	1104a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x42>
   11048:	b13e      	cbz	r6, 1105a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x52>
   1104a:	2500      	movs	r5, #0
   1104c:	305c      	adds	r0, #92	; 0x5c
   1104e:	2108      	movs	r1, #8
   11050:	4682      	mov	sl, r0
   11052:	f7ff fbc4 	bl	107de <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x88>
   11056:	b110      	cbz	r0, 1105e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x56>
   11058:	e007      	b.n	1106a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
   1105a:	2501      	movs	r5, #1
   1105c:	e7f6      	b.n	1104c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x44>
   1105e:	210b      	movs	r1, #11
   11060:	4650      	mov	r0, sl
   11062:	f7ff fbbc 	bl	107de <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x88>
   11066:	b900      	cbnz	r0, 1106a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
   11068:	b17d      	cbz	r5, 1108a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x82>
   1106a:	a804      	add	r0, sp, #16
   1106c:	9000      	str	r0, [sp, #0]
   1106e:	f89d 0004 	ldrb.w	r0, [sp, #4]
   11072:	ab03      	add	r3, sp, #12
   11074:	463a      	mov	r2, r7
   11076:	4641      	mov	r1, r8
   11078:	f000 f972 	bl	11360 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x278>
   1107c:	0005      	movs	r5, r0
   1107e:	d105      	bne.n	1108c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>
   11080:	340c      	adds	r4, #12
   11082:	20ff      	movs	r0, #255	; 0xff
   11084:	7060      	strb	r0, [r4, #1]
   11086:	b936      	cbnz	r6, 11096 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
   11088:	e003      	b.n	11092 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>
   1108a:	201a      	movs	r0, #26
   1108c:	b006      	add	sp, #24
   1108e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11092:	7820      	ldrb	r0, [r4, #0]
   11094:	b108      	cbz	r0, 1109a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x92>
   11096:	253a      	movs	r5, #58	; 0x3a
   11098:	e012      	b.n	110c0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xb8>
   1109a:	f884 9000 	strb.w	r9, [r4]
   1109e:	f89d 000c 	ldrb.w	r0, [sp, #12]
   110a2:	70a0      	strb	r0, [r4, #2]
   110a4:	f89d 1010 	ldrb.w	r1, [sp, #16]
   110a8:	70e1      	strb	r1, [r4, #3]
   110aa:	f88d 0000 	strb.w	r0, [sp]
   110ae:	f88d 1001 	strb.w	r1, [sp, #1]
   110b2:	88b8      	ldrh	r0, [r7, #4]
   110b4:	f8ad 0002 	strh.w	r0, [sp, #2]
   110b8:	4669      	mov	r1, sp
   110ba:	4640      	mov	r0, r8
   110bc:	f7fd ff46 	bl	ef4c <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
   110c0:	2000      	movs	r0, #0
   110c2:	7060      	strb	r0, [r4, #1]
   110c4:	4628      	mov	r0, r5
   110c6:	e7e1      	b.n	1108c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>

000110c8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
   110c8:	2008      	movs	r0, #8
   110ca:	f7fa bcaf 	b.w	ba2c <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>

000110ce <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
   110ce:	b510      	push	{r4, lr}
   110d0:	f7fd fddf 	bl	ec92 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
   110d4:	f7f5 feea 	bl	6eac <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
   110d8:	f7fa fcca 	bl	ba70 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
   110dc:	f7fe fa9f 	bl	f61e <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
   110e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   110e4:	f7fa ba76 	b.w	b5d4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xf4>

000110e8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA>:
   110e8:	f7f8 b8c8 	b.w	927c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>
   110ec:	f44f 71a4 	mov.w	r1, #328	; 0x148
   110f0:	4288      	cmp	r0, r1
   110f2:	d303      	bcc.n	110fc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14>
   110f4:	f640 0148 	movw	r1, #2120	; 0x848
   110f8:	4288      	cmp	r0, r1
   110fa:	d300      	bcc.n	110fe <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x16>
   110fc:	4608      	mov	r0, r1
   110fe:	b280      	uxth	r0, r0
   11100:	4770      	bx	lr
   11102:	07c1      	lsls	r1, r0, #31
   11104:	d001      	beq.n	1110a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22>
   11106:	2001      	movs	r0, #1
   11108:	4770      	bx	lr
   1110a:	0780      	lsls	r0, r0, #30
   1110c:	d501      	bpl.n	11112 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2a>
   1110e:	2002      	movs	r0, #2
   11110:	4770      	bx	lr
   11112:	2000      	movs	r0, #0
   11114:	4770      	bx	lr
   11116:	b510      	push	{r4, lr}
   11118:	2801      	cmp	r0, #1
   1111a:	d006      	beq.n	1112a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x42>
   1111c:	2802      	cmp	r0, #2
   1111e:	d004      	beq.n	1112a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x42>
   11120:	f240 21a9 	movw	r1, #681	; 0x2a9
   11124:	2006      	movs	r0, #6
   11126:	f7f4 fa1b 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1112a:	bd10      	pop	{r4, pc}
   1112c:	b50e      	push	{r1, r2, r3, lr}
   1112e:	4669      	mov	r1, sp
   11130:	2001      	movs	r0, #1
   11132:	f7fd fbc7 	bl	e8c4 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   11136:	b150      	cbz	r0, 1114e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x66>
   11138:	f44f 71a3 	mov.w	r1, #326	; 0x146
   1113c:	2039      	movs	r0, #57	; 0x39
   1113e:	f7f4 fa0f 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11142:	9802      	ldr	r0, [sp, #8]
   11144:	f7fe fefa 	bl	ff3c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   11148:	b108      	cbz	r0, 1114e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x66>
   1114a:	2001      	movs	r0, #1
   1114c:	bd0e      	pop	{r1, r2, r3, pc}
   1114e:	4668      	mov	r0, sp
   11150:	f7f4 fc4a 	bl	59e8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   11154:	2800      	cmp	r0, #0
   11156:	d0f4      	beq.n	11142 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x5a>
   11158:	2000      	movs	r0, #0
   1115a:	bd0e      	pop	{r1, r2, r3, pc}
   1115c:	b510      	push	{r4, lr}
   1115e:	f7ff ffe5 	bl	1112c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x44>
   11162:	b158      	cbz	r0, 1117c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x94>
   11164:	f7fa fa58 	bl	b618 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x138>
   11168:	4604      	mov	r4, r0
   1116a:	f7fe fd2b 	bl	fbc4 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   1116e:	b918      	cbnz	r0, 11178 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x90>
   11170:	4620      	mov	r0, r4
   11172:	f7fe fd1d 	bl	fbb0 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   11176:	b108      	cbz	r0, 1117c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x94>
   11178:	2000      	movs	r0, #0
   1117a:	bd10      	pop	{r4, pc}
   1117c:	2001      	movs	r0, #1
   1117e:	bd10      	pop	{r4, pc}
   11180:	b570      	push	{r4, r5, r6, lr}
   11182:	460c      	mov	r4, r1
   11184:	4605      	mov	r5, r0
   11186:	b112      	cbz	r2, 1118e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xa6>
   11188:	291f      	cmp	r1, #31
   1118a:	d80c      	bhi.n	111a6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xbe>
   1118c:	e016      	b.n	111bc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd4>
   1118e:	f7f4 fef5 	bl	5f7c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>
   11192:	42a0      	cmp	r0, r4
   11194:	d201      	bcs.n	1119a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xb2>
   11196:	2007      	movs	r0, #7
   11198:	bd70      	pop	{r4, r5, r6, pc}
   1119a:	4628      	mov	r0, r5
   1119c:	f7fe fd10 	bl	fbc0 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   111a0:	b118      	cbz	r0, 111aa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xc2>
   111a2:	2c1f      	cmp	r4, #31
   111a4:	d901      	bls.n	111aa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xc2>
   111a6:	2012      	movs	r0, #18
   111a8:	bd70      	pop	{r4, r5, r6, pc}
   111aa:	4628      	mov	r0, r5
   111ac:	f7fe fd11 	bl	fbd2 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   111b0:	b130      	cbz	r0, 111c0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd8>
   111b2:	4621      	mov	r1, r4
   111b4:	4628      	mov	r0, r5
   111b6:	f7fe fcd8 	bl	fb6a <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
   111ba:	b118      	cbz	r0, 111c4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xdc>
   111bc:	2000      	movs	r0, #0
   111be:	bd70      	pop	{r4, r5, r6, pc}
   111c0:	2042      	movs	r0, #66	; 0x42
   111c2:	bd70      	pop	{r4, r5, r6, pc}
   111c4:	2045      	movs	r0, #69	; 0x45
   111c6:	bd70      	pop	{r4, r5, r6, pc}
   111c8:	b510      	push	{r4, lr}
   111ca:	4604      	mov	r4, r0
   111cc:	7840      	ldrb	r0, [r0, #1]
   111ce:	06c1      	lsls	r1, r0, #27
   111d0:	d51c      	bpl.n	1120c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x124>
   111d2:	07c0      	lsls	r0, r0, #31
   111d4:	d00b      	beq.n	111ee <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x106>
   111d6:	f7fa fbfd 	bl	b9d4 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
   111da:	b1b8      	cbz	r0, 1120c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x124>
   111dc:	7860      	ldrb	r0, [r4, #1]
   111de:	06c1      	lsls	r1, r0, #27
   111e0:	d405      	bmi.n	111ee <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x106>
   111e2:	0700      	lsls	r0, r0, #28
   111e4:	d503      	bpl.n	111ee <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x106>
   111e6:	7d20      	ldrb	r0, [r4, #20]
   111e8:	2802      	cmp	r0, #2
   111ea:	d10f      	bne.n	1120c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x124>
   111ec:	e010      	b.n	11210 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x128>
   111ee:	7d20      	ldrb	r0, [r4, #20]
   111f0:	2802      	cmp	r0, #2
   111f2:	d001      	beq.n	111f8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x110>
   111f4:	7ea0      	ldrb	r0, [r4, #26]
   111f6:	b948      	cbnz	r0, 1120c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x124>
   111f8:	7860      	ldrb	r0, [r4, #1]
   111fa:	0700      	lsls	r0, r0, #28
   111fc:	d408      	bmi.n	11210 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x128>
   111fe:	f8d4 0005 	ldr.w	r0, [r4, #5]
   11202:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   11206:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   1120a:	d201      	bcs.n	11210 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x128>
   1120c:	2011      	movs	r0, #17
   1120e:	bd10      	pop	{r4, pc}
   11210:	2000      	movs	r0, #0
   11212:	bd10      	pop	{r4, pc}
   11214:	b538      	push	{r3, r4, r5, lr}
   11216:	4604      	mov	r4, r0
   11218:	7800      	ldrb	r0, [r0, #0]
   1121a:	28ef      	cmp	r0, #239	; 0xef
   1121c:	d843      	bhi.n	112a6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1be>
   1121e:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   11222:	f8ad 0000 	strh.w	r0, [sp]
   11226:	9800      	ldr	r0, [sp, #0]
   11228:	f000 f917 	bl	1145a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x372>
   1122c:	b3a0      	cbz	r0, 11298 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1b0>
   1122e:	7861      	ldrb	r1, [r4, #1]
   11230:	0708      	lsls	r0, r1, #28
   11232:	d40b      	bmi.n	1124c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x164>
   11234:	f8d4 0002 	ldr.w	r0, [r4, #2]
   11238:	f8d4 3005 	ldr.w	r3, [r4, #5]
   1123c:	0a02      	lsrs	r2, r0, #8
   1123e:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
   11242:	d830      	bhi.n	112a6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1be>
   11244:	2220      	movs	r2, #32
   11246:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
   1124a:	d82c      	bhi.n	112a6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1be>
   1124c:	7a60      	ldrb	r0, [r4, #9]
   1124e:	b318      	cbz	r0, 11298 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1b0>
   11250:	2807      	cmp	r0, #7
   11252:	d828      	bhi.n	112a6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1be>
   11254:	7aa0      	ldrb	r0, [r4, #10]
   11256:	b128      	cbz	r0, 11264 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x17c>
   11258:	2801      	cmp	r0, #1
   1125a:	d003      	beq.n	11264 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x17c>
   1125c:	2802      	cmp	r0, #2
   1125e:	d001      	beq.n	11264 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x17c>
   11260:	2803      	cmp	r0, #3
   11262:	d120      	bne.n	112a6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1be>
   11264:	074a      	lsls	r2, r1, #29
   11266:	d403      	bmi.n	11270 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x188>
   11268:	2802      	cmp	r0, #2
   1126a:	d001      	beq.n	11270 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x188>
   1126c:	2803      	cmp	r0, #3
   1126e:	d105      	bne.n	1127c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x194>
   11270:	7ae0      	ldrb	r0, [r4, #11]
   11272:	b108      	cbz	r0, 11278 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x190>
   11274:	2801      	cmp	r0, #1
   11276:	d116      	bne.n	112a6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1be>
   11278:	0748      	lsls	r0, r1, #29
   1127a:	d407      	bmi.n	1128c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a4>
   1127c:	7ca0      	ldrb	r0, [r4, #18]
   1127e:	b128      	cbz	r0, 1128c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a4>
   11280:	2801      	cmp	r0, #1
   11282:	d003      	beq.n	1128c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a4>
   11284:	2802      	cmp	r0, #2
   11286:	d001      	beq.n	1128c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a4>
   11288:	2803      	cmp	r0, #3
   1128a:	d10c      	bne.n	112a6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1be>
   1128c:	06c8      	lsls	r0, r1, #27
   1128e:	7d20      	ldrb	r0, [r4, #20]
   11290:	d503      	bpl.n	1129a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1b2>
   11292:	2801      	cmp	r0, #1
   11294:	d107      	bne.n	112a6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1be>
   11296:	e002      	b.n	1129e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1b6>
   11298:	e005      	b.n	112a6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1be>
   1129a:	2802      	cmp	r0, #2
   1129c:	d003      	beq.n	112a6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1be>
   1129e:	7e20      	ldrb	r0, [r4, #24]
   112a0:	b118      	cbz	r0, 112aa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c2>
   112a2:	2801      	cmp	r0, #1
   112a4:	d001      	beq.n	112aa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c2>
   112a6:	2012      	movs	r0, #18
   112a8:	bd38      	pop	{r3, r4, r5, pc}
   112aa:	2000      	movs	r0, #0
   112ac:	bd38      	pop	{r3, r4, r5, pc}
   112ae:	b510      	push	{r4, lr}
   112b0:	0004      	movs	r4, r0
   112b2:	d005      	beq.n	112c0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d8>
   112b4:	f7fa fbcc 	bl	ba50 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   112b8:	4384      	bics	r4, r0
   112ba:	d001      	beq.n	112c0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d8>
   112bc:	2000      	movs	r0, #0
   112be:	bd10      	pop	{r4, pc}
   112c0:	2001      	movs	r0, #1
   112c2:	bd10      	pop	{r4, pc}
   112c4:	28fb      	cmp	r0, #251	; 0xfb
   112c6:	d803      	bhi.n	112d0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1e8>
   112c8:	f640 0048 	movw	r0, #2120	; 0x848
   112cc:	4281      	cmp	r1, r0
   112ce:	d901      	bls.n	112d4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1ec>
   112d0:	2011      	movs	r0, #17
   112d2:	4770      	bx	lr
   112d4:	2000      	movs	r0, #0
   112d6:	4770      	bx	lr
   112d8:	381b      	subs	r0, #27
   112da:	28e1      	cmp	r0, #225	; 0xe1
   112dc:	d206      	bcs.n	112ec <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x204>
   112de:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
   112e2:	d303      	bcc.n	112ec <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x204>
   112e4:	f244 2090 	movw	r0, #17040	; 0x4290
   112e8:	4281      	cmp	r1, r0
   112ea:	d901      	bls.n	112f0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x208>
   112ec:	2012      	movs	r0, #18
   112ee:	4770      	bx	lr
   112f0:	2000      	movs	r0, #0
   112f2:	4770      	bx	lr
   112f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   112f8:	4606      	mov	r6, r0
   112fa:	f8b0 7056 	ldrh.w	r7, [r0, #86]	; 0x56
   112fe:	f8b0 4058 	ldrh.w	r4, [r0, #88]	; 0x58
   11302:	4615      	mov	r5, r2
   11304:	3030      	adds	r0, #48	; 0x30
   11306:	f7f7 fb75 	bl	89f4 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>
   1130a:	4680      	mov	r8, r0
   1130c:	2102      	movs	r1, #2
   1130e:	f7fd fded 	bl	eeec <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   11312:	4287      	cmp	r7, r0
   11314:	d200      	bcs.n	11318 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x230>
   11316:	4638      	mov	r0, r7
   11318:	4607      	mov	r7, r0
   1131a:	2102      	movs	r1, #2
   1131c:	4640      	mov	r0, r8
   1131e:	f7fd fde5 	bl	eeec <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   11322:	4284      	cmp	r4, r0
   11324:	d200      	bcs.n	11328 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x240>
   11326:	4620      	mov	r0, r4
   11328:	8831      	ldrh	r1, [r6, #0]
   1132a:	8029      	strh	r1, [r5, #0]
   1132c:	2f1b      	cmp	r7, #27
   1132e:	d913      	bls.n	11358 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x270>
   11330:	2ffb      	cmp	r7, #251	; 0xfb
   11332:	d300      	bcc.n	11336 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x24e>
   11334:	27fb      	movs	r7, #251	; 0xfb
   11336:	806f      	strh	r7, [r5, #2]
   11338:	281b      	cmp	r0, #27
   1133a:	d90f      	bls.n	1135c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x274>
   1133c:	28fb      	cmp	r0, #251	; 0xfb
   1133e:	d300      	bcc.n	11342 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x25a>
   11340:	20fb      	movs	r0, #251	; 0xfb
   11342:	80e8      	strh	r0, [r5, #6]
   11344:	4640      	mov	r0, r8
   11346:	f7ff fed1 	bl	110ec <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4>
   1134a:	80a8      	strh	r0, [r5, #4]
   1134c:	4640      	mov	r0, r8
   1134e:	f7ff fecd 	bl	110ec <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4>
   11352:	8128      	strh	r0, [r5, #8]
   11354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11358:	271b      	movs	r7, #27
   1135a:	e7ec      	b.n	11336 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x24e>
   1135c:	201b      	movs	r0, #27
   1135e:	e7f0      	b.n	11342 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x25a>
   11360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11364:	7890      	ldrb	r0, [r2, #2]
   11366:	9e06      	ldr	r6, [sp, #24]
   11368:	461d      	mov	r5, r3
   1136a:	4614      	mov	r4, r2
   1136c:	b908      	cbnz	r0, 11372 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x28a>
   1136e:	f7fa fb6f 	bl	ba50 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   11372:	78e4      	ldrb	r4, [r4, #3]
   11374:	4607      	mov	r7, r0
   11376:	b914      	cbnz	r4, 1137e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x296>
   11378:	f7fa fb6a 	bl	ba50 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   1137c:	4604      	mov	r4, r0
   1137e:	b16f      	cbz	r7, 1139c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b4>
   11380:	b164      	cbz	r4, 1139c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b4>
   11382:	4638      	mov	r0, r7
   11384:	f7ff febd 	bl	11102 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a>
   11388:	4620      	mov	r0, r4
   1138a:	f7ff feba 	bl	11102 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a>
   1138e:	b12f      	cbz	r7, 1139c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b4>
   11390:	b124      	cbz	r4, 1139c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b4>
   11392:	702f      	strb	r7, [r5, #0]
   11394:	7034      	strb	r4, [r6, #0]
   11396:	2000      	movs	r0, #0
   11398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1139c:	2009      	movs	r0, #9
   1139e:	e7fb      	b.n	11398 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b0>
   113a0:	207f      	movs	r0, #127	; 0x7f
   113a2:	f000 b83c 	b.w	1141e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x336>
   113a6:	b508      	push	{r3, lr}
   113a8:	f890 1204 	ldrb.w	r1, [r0, #516]	; 0x204
   113ac:	f890 00a5 	ldrb.w	r0, [r0, #165]	; 0xa5
   113b0:	f88d 0000 	strb.w	r0, [sp]
   113b4:	9800      	ldr	r0, [sp, #0]
   113b6:	9000      	str	r0, [sp, #0]
   113b8:	f89d 0000 	ldrb.w	r0, [sp]
   113bc:	b100      	cbz	r0, 113c0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2d8>
   113be:	2001      	movs	r0, #1
   113c0:	1e40      	subs	r0, r0, #1
   113c2:	4208      	tst	r0, r1
   113c4:	d003      	beq.n	113ce <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e6>
   113c6:	2904      	cmp	r1, #4
   113c8:	d001      	beq.n	113ce <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e6>
   113ca:	2001      	movs	r0, #1
   113cc:	bd08      	pop	{r3, pc}
   113ce:	2000      	movs	r0, #0
   113d0:	bd08      	pop	{r3, pc}
   113d2:	b570      	push	{r4, r5, r6, lr}
   113d4:	4605      	mov	r5, r0
   113d6:	f7fe fbfc 	bl	fbd2 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   113da:	b170      	cbz	r0, 113fa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x312>
   113dc:	4628      	mov	r0, r5
   113de:	f7fe fdad 	bl	ff3c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   113e2:	2800      	cmp	r0, #0
   113e4:	d008      	beq.n	113f8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x310>
   113e6:	4628      	mov	r0, r5
   113e8:	f7fe fda5 	bl	ff36 <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>
   113ec:	4604      	mov	r4, r0
   113ee:	4628      	mov	r0, r5
   113f0:	f7fe fd7b 	bl	feea <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
   113f4:	b118      	cbz	r0, 113fe <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x316>
   113f6:	200c      	movs	r0, #12
   113f8:	bd70      	pop	{r4, r5, r6, pc}
   113fa:	2042      	movs	r0, #66	; 0x42
   113fc:	bd70      	pop	{r4, r5, r6, pc}
   113fe:	b164      	cbz	r4, 1141a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x332>
   11400:	8820      	ldrh	r0, [r4, #0]
   11402:	f7fd fc13 	bl	ec2c <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
   11406:	8820      	ldrh	r0, [r4, #0]
   11408:	2100      	movs	r1, #0
   1140a:	f7f4 fb3d 	bl	5a88 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   1140e:	b120      	cbz	r0, 1141a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x332>
   11410:	f241 41fd 	movw	r1, #5373	; 0x14fd
   11414:	2039      	movs	r0, #57	; 0x39
   11416:	f7f4 f8a3 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1141a:	2000      	movs	r0, #0
   1141c:	bd70      	pop	{r4, r5, r6, pc}
   1141e:	b508      	push	{r3, lr}
   11420:	f640 1288 	movw	r2, #2440	; 0x988
   11424:	4669      	mov	r1, sp
   11426:	f7f3 ff7b 	bl	5320 <mpsl_fem_tx_power_split>
   1142a:	bd08      	pop	{r3, pc}
   1142c:	b530      	push	{r4, r5, lr}
   1142e:	f340 0400 	sbfx	r4, r0, #0, #1
   11432:	f340 0040 	sbfx	r0, r0, #1, #1
   11436:	1c40      	adds	r0, r0, #1
   11438:	9d03      	ldr	r5, [sp, #12]
   1143a:	1c64      	adds	r4, r4, #1
   1143c:	d000      	beq.n	11440 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x358>
   1143e:	b119      	cbz	r1, 11448 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x360>
   11440:	b100      	cbz	r0, 11444 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x35c>
   11442:	b10a      	cbz	r2, 11448 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x360>
   11444:	b91c      	cbnz	r4, 1144e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x366>
   11446:	e001      	b.n	1144c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x364>
   11448:	2011      	movs	r0, #17
   1144a:	bd30      	pop	{r4, r5, pc}
   1144c:	2100      	movs	r1, #0
   1144e:	7019      	strb	r1, [r3, #0]
   11450:	b900      	cbnz	r0, 11454 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x36c>
   11452:	2200      	movs	r2, #0
   11454:	702a      	strb	r2, [r5, #0]
   11456:	2000      	movs	r0, #0
   11458:	bd30      	pop	{r4, r5, pc}
   1145a:	b2c0      	uxtb	r0, r0
   1145c:	06c1      	lsls	r1, r0, #27
   1145e:	d40c      	bmi.n	1147a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x392>
   11460:	0681      	lsls	r1, r0, #26
   11462:	ea4f 71c0 	mov.w	r1, r0, lsl #31
   11466:	d503      	bpl.n	11470 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x388>
   11468:	b9d1      	cbnz	r1, 114a0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b8>
   1146a:	0781      	lsls	r1, r0, #30
   1146c:	d418      	bmi.n	114a0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b8>
   1146e:	e001      	b.n	11474 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38c>
   11470:	2900      	cmp	r1, #0
   11472:	d1fa      	bne.n	1146a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x382>
   11474:	0700      	lsls	r0, r0, #28
   11476:	d413      	bmi.n	114a0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b8>
   11478:	e010      	b.n	1149c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b4>
   1147a:	0641      	lsls	r1, r0, #25
   1147c:	d410      	bmi.n	114a0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b8>
   1147e:	0681      	lsls	r1, r0, #26
   11480:	d40e      	bmi.n	114a0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b8>
   11482:	07c1      	lsls	r1, r0, #31
   11484:	ea4f 7180 	mov.w	r1, r0, lsl #30
   11488:	d004      	beq.n	11494 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ac>
   1148a:	2900      	cmp	r1, #0
   1148c:	db02      	blt.n	11494 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ac>
   1148e:	0740      	lsls	r0, r0, #29
   11490:	d404      	bmi.n	1149c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b4>
   11492:	e005      	b.n	114a0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b8>
   11494:	0701      	lsls	r1, r0, #28
   11496:	d403      	bmi.n	114a0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b8>
   11498:	0740      	lsls	r0, r0, #29
   1149a:	d401      	bmi.n	114a0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b8>
   1149c:	2001      	movs	r0, #1
   1149e:	4770      	bx	lr
   114a0:	2000      	movs	r0, #0
   114a2:	4770      	bx	lr
   114a4:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   114a6:	4669      	mov	r1, sp
   114a8:	2001      	movs	r0, #1
   114aa:	f7fd fa0b 	bl	e8c4 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   114ae:	b178      	cbz	r0, 114d0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3e8>
   114b0:	f44f 71b2 	mov.w	r1, #356	; 0x164
   114b4:	2039      	movs	r0, #57	; 0x39
   114b6:	f7f4 f853 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   114ba:	9c02      	ldr	r4, [sp, #8]
   114bc:	4620      	mov	r0, r4
   114be:	f7fe fd3d 	bl	ff3c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   114c2:	b128      	cbz	r0, 114d0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3e8>
   114c4:	4620      	mov	r0, r4
   114c6:	f7fe fbc0 	bl	fc4a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
   114ca:	b108      	cbz	r0, 114d0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3e8>
   114cc:	2001      	movs	r0, #1
   114ce:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   114d0:	4668      	mov	r0, sp
   114d2:	f7f4 fa89 	bl	59e8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   114d6:	2800      	cmp	r0, #0
   114d8:	d0ef      	beq.n	114ba <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3d2>
   114da:	2000      	movs	r0, #0
   114dc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   114de:	b510      	push	{r4, lr}
   114e0:	f7fe fd2f 	bl	ff42 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
   114e4:	b108      	cbz	r0, 114ea <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x402>
   114e6:	21e7      	movs	r1, #231	; 0xe7
   114e8:	e003      	b.n	114f2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x40a>
   114ea:	f7f6 fc01 	bl	7cf0 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
   114ee:	b118      	cbz	r0, 114f8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x410>
   114f0:	21ec      	movs	r1, #236	; 0xec
   114f2:	2001      	movs	r0, #1
   114f4:	f7f4 f834 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   114f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   114fc:	2001      	movs	r0, #1
   114fe:	f7f4 ba09 	b.w	5914 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   11502:	6802      	ldr	r2, [r0, #0]
   11504:	b912      	cbnz	r2, 1150c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x424>
   11506:	6001      	str	r1, [r0, #0]
   11508:	4770      	bx	lr
   1150a:	4602      	mov	r2, r0
   1150c:	6850      	ldr	r0, [r2, #4]
   1150e:	b108      	cbz	r0, 11514 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x42c>
   11510:	428a      	cmp	r2, r1
   11512:	d1fa      	bne.n	1150a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x422>
   11514:	428a      	cmp	r2, r1
   11516:	d0f7      	beq.n	11508 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x420>
   11518:	6051      	str	r1, [r2, #4]
   1151a:	4770      	bx	lr
   1151c:	b510      	push	{r4, lr}
   1151e:	4604      	mov	r4, r0
   11520:	e002      	b.n	11528 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x440>
   11522:	6820      	ldr	r0, [r4, #0]
   11524:	4780      	blx	r0
   11526:	6864      	ldr	r4, [r4, #4]
   11528:	2c00      	cmp	r4, #0
   1152a:	d1fa      	bne.n	11522 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x43a>
   1152c:	bd10      	pop	{r4, pc}
   1152e:	b510      	push	{r4, lr}
   11530:	2000      	movs	r0, #0
   11532:	f7f4 f9ef 	bl	5914 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   11536:	f7f4 fc27 	bl	5d88 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
   1153a:	f7f4 fea9 	bl	6290 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
   1153e:	f7f5 f875 	bl	662c <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
   11542:	2800      	cmp	r0, #0
   11544:	d003      	beq.n	1154e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x466>
   11546:	21c6      	movs	r1, #198	; 0xc6
   11548:	2001      	movs	r0, #1
   1154a:	f7f4 f809 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1154e:	bd10      	pop	{r4, pc}
   11550:	b510      	push	{r4, lr}
   11552:	f7ff ffc4 	bl	114de <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3f6>
   11556:	f7ff f8fa 	bl	1074e <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>
   1155a:	2800      	cmp	r0, #0
   1155c:	d004      	beq.n	11568 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x480>
   1155e:	f240 1103 	movw	r1, #259	; 0x103
   11562:	2001      	movs	r0, #1
   11564:	f7f3 fffc 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11568:	bd10      	pop	{r4, pc}

0001156a <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>:
   1156a:	f7f3 bc31 	b.w	4dd0 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
   1156e:	0001      	.short	0x0001
   11570:	0002000b 	.word	0x0002000b
   11574:	0005000a 	.word	0x0005000a
   11578:	000a0009 	.word	0x000a0009
   1157c:	00140008 	.word	0x00140008
   11580:	001e0007 	.word	0x001e0007
   11584:	00320006 	.word	0x00320006
   11588:	004b0005 	.word	0x004b0005
   1158c:	00640004 	.word	0x00640004
   11590:	00960003 	.word	0x00960003
   11594:	00fa0002 	.word	0x00fa0002
   11598:	01f40001 	.word	0x01f40001
	...

0001159e <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
   1159e:	b510      	push	{r4, lr}
   115a0:	f7fa fdf0 	bl	c184 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
   115a4:	f000 f81d 	bl	115e2 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
   115a8:	f7fa fac6 	bl	bb38 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
   115ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   115b0:	f7fa bbc0 	b.w	bd34 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

000115b4 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
   115b4:	b510      	push	{r4, lr}
   115b6:	24c8      	movs	r4, #200	; 0xc8
   115b8:	1e64      	subs	r4, r4, #1
   115ba:	b2e4      	uxtb	r4, r4
   115bc:	f7fa fada 	bl	bb74 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
   115c0:	2802      	cmp	r0, #2
   115c2:	d003      	beq.n	115cc <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
   115c4:	2801      	cmp	r0, #1
   115c6:	d000      	beq.n	115ca <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
   115c8:	2000      	movs	r0, #0
   115ca:	bd10      	pop	{r4, pc}
   115cc:	2c00      	cmp	r4, #0
   115ce:	d1f3      	bne.n	115b8 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
   115d0:	219e      	movs	r1, #158	; 0x9e
   115d2:	203b      	movs	r0, #59	; 0x3b
   115d4:	f7f3 ffc4 	bl	5560 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   115d8:	5840      	ldr	r0, [r0, r1]
   115da:	2800      	cmp	r0, #0
   115dc:	d000      	beq.n	115e0 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x2c>
   115de:	2001      	movs	r0, #1
   115e0:	4770      	bx	lr

000115e2 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
   115e2:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   115e6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   115ea:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
   115ee:	f3bf 8f4f 	dsb	sy
   115f2:	f3bf 8f6f 	isb	sy
   115f6:	f7fa bc37 	b.w	be68 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
   115fa:	2800      	cmp	r0, #0
   115fc:	db09      	blt.n	11612 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
   115fe:	f000 021f 	and.w	r2, r0, #31
   11602:	2101      	movs	r1, #1
   11604:	4091      	lsls	r1, r2
   11606:	0940      	lsrs	r0, r0, #5
   11608:	0080      	lsls	r0, r0, #2
   1160a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   1160e:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   11612:	4770      	bx	lr
   11614:	2800      	cmp	r0, #0
   11616:	db0d      	blt.n	11634 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
   11618:	f000 021f 	and.w	r2, r0, #31
   1161c:	2101      	movs	r1, #1
   1161e:	4091      	lsls	r1, r2
   11620:	0940      	lsrs	r0, r0, #5
   11622:	0080      	lsls	r0, r0, #2
   11624:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   11628:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   1162c:	f3bf 8f4f 	dsb	sy
   11630:	f3bf 8f6f 	isb	sy
   11634:	4770      	bx	lr
   11636:	5840      	ldr	r0, [r0, r1]
   11638:	2800      	cmp	r0, #0
   1163a:	d000      	beq.n	1163e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5c>
   1163c:	2001      	movs	r0, #1
   1163e:	4770      	bx	lr
   11640:	5840      	ldr	r0, [r0, r1]
   11642:	2800      	cmp	r0, #0
   11644:	d000      	beq.n	11648 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x66>
   11646:	2001      	movs	r0, #1
   11648:	4770      	bx	lr

0001164a <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
   1164a:	b510      	push	{r4, lr}
   1164c:	4604      	mov	r4, r0
   1164e:	4608      	mov	r0, r1
   11650:	f7fa febe 	bl	c3d0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   11654:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   11658:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   1165c:	fbb0 f0f1 	udiv	r0, r0, r1
   11660:	1a20      	subs	r0, r4, r0
   11662:	1e80      	subs	r0, r0, #2
   11664:	bd10      	pop	{r4, pc}

00011666 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
   11666:	b510      	push	{r4, lr}
   11668:	4604      	mov	r4, r0
   1166a:	4608      	mov	r0, r1
   1166c:	f7fa feb0 	bl	c3d0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   11670:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   11674:	fbb0 f0f1 	udiv	r0, r0, r1
   11678:	1a20      	subs	r0, r4, r0
   1167a:	bd10      	pop	{r4, pc}
   1167c:	d8d8d8d8 	.word	0xd8d8d8d8
   11680:	d8d8d8d8 	.word	0xd8d8d8d8
   11684:	d8d8d8d8 	.word	0xd8d8d8d8
   11688:	d8d8d8d8 	.word	0xd8d8d8d8
   1168c:	d8d8d8d8 	.word	0xd8d8d8d8
   11690:	ecececec 	.word	0xecececec
   11694:	f0f0f0f0 	.word	0xf0f0f0f0
   11698:	f4f4f4f4 	.word	0xf4f4f4f4
   1169c:	f8f8f8f8 	.word	0xf8f8f8f8
   116a0:	fcfcfcfc 	.word	0xfcfcfcfc
   116a4:	03020000 	.word	0x03020000
   116a8:	07060504 	.word	0x07060504
   116ac:	d8d8d808 	.word	0xd8d8d808
   116b0:	d8d8d8d8 	.word	0xd8d8d8d8
   116b4:	d8d8d8d8 	.word	0xd8d8d8d8
   116b8:	d8d8d8d8 	.word	0xd8d8d8d8
   116bc:	d8d8d8d8 	.word	0xd8d8d8d8
   116c0:	ecececd8 	.word	0xecececd8
   116c4:	f0f0f0ec 	.word	0xf0f0f0ec
   116c8:	f4f4f4f0 	.word	0xf4f4f4f0
   116cc:	f8f8f8f4 	.word	0xf8f8f8f4
   116d0:	fcfcfcf8 	.word	0xfcfcfcf8
   116d4:	000000fc 	.word	0x000000fc
   116d8:	0403      	.short	0x0403
   116da:	080c      	.short	0x080c
   116dc:	010d1702 	.word	0x010d1702
   116e0:	09090201 	.word	0x09090201
   116e4:	02060101 	.word	0x02060101
   116e8:	03181809 	.word	0x03181809
   116ec:	09090101 	.word	0x09090101
   116f0:	03050303 	.word	0x03050303
   116f4:	02220102 	.word	0x02220102
   116f8:	10092402 	.word	0x10092402
   116fc:	05050404 	.word	0x05050404

00011700 <AnalogRead>:

// ------------------------------------------------
// high level read adc channel and convert to float voltage
// ------------------------------------------------
float AnalogRead(int channel)
{
   11700:	b508      	push	{r3, lr}

	int16_t sv = readOneChannel(channel);
   11702:	f000 fb2b 	bl	11d5c <readOneChannel>
	if(sv == BAD_ANALOG_READ)
   11706:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
   1170a:	d00d      	beq.n	11728 <AnalogRead+0x28>
			multip = 16384;
			break;
	}
	
	// the 3.6 relates to the voltage divider being used in my circuit
	float fout = (sv * 3.6 / multip);
   1170c:	f7ee fe8a 	bl	424 <__aeabi_i2d>
   11710:	a307      	add	r3, pc, #28	; (adr r3, 11730 <AnalogRead+0x30>)
   11712:	e9d3 2300 	ldrd	r2, r3, [r3]
   11716:	f7ee feef 	bl	4f8 <__aeabi_dmul>
   1171a:	2200      	movs	r2, #0
   1171c:	4b06      	ldr	r3, [pc, #24]	; (11738 <AnalogRead+0x38>)
   1171e:	f7ee feeb 	bl	4f8 <__aeabi_dmul>
   11722:	f7ef f8fb 	bl	91c <__aeabi_d2f>
	return fout;
}
   11726:	bd08      	pop	{r3, pc}
		return sv;
   11728:	f7ef fa02 	bl	b30 <__aeabi_i2f>
   1172c:	e7fb      	b.n	11726 <AnalogRead+0x26>
   1172e:	bf00      	nop
   11730:	cccccccd 	.word	0xcccccccd
   11734:	400ccccc 	.word	0x400ccccc
   11738:	3f500000 	.word	0x3f500000

0001173c <connected>:
static const struct bt_data sd[] = {
	BT_DATA_BYTES(BT_DATA_UUID128_ALL, BT_UUID_MELTYBLE_VAL),
};

static void connected(struct bt_conn *conn, uint8_t err)
{
   1173c:	b508      	push	{r3, lr}
	if (err) {
   1173e:	b931      	cbnz	r1, 1174e <connected+0x12>
		printk("Connection failed (err %u)\n", err);
		return;
	}

	printk("Connected\n");
   11740:	4805      	ldr	r0, [pc, #20]	; (11758 <connected+0x1c>)
   11742:	f019 fa84 	bl	2ac4e <printk>

	is_connected = 1;
   11746:	4b05      	ldr	r3, [pc, #20]	; (1175c <connected+0x20>)
   11748:	2201      	movs	r2, #1
   1174a:	601a      	str	r2, [r3, #0]

}
   1174c:	bd08      	pop	{r3, pc}
		printk("Connection failed (err %u)\n", err);
   1174e:	4804      	ldr	r0, [pc, #16]	; (11760 <connected+0x24>)
   11750:	f019 fa7d 	bl	2ac4e <printk>
		return;
   11754:	e7fa      	b.n	1174c <connected+0x10>
   11756:	bf00      	nop
   11758:	000315a4 	.word	0x000315a4
   1175c:	20002058 	.word	0x20002058
   11760:	00031588 	.word	0x00031588

00011764 <security_changed>:
}

#ifdef CONFIG_BT_LBS_SECURITY_ENABLED
static void security_changed(struct bt_conn *conn, bt_security_t level,
			     enum bt_security_err err)
{
   11764:	b5f0      	push	{r4, r5, r6, r7, lr}
   11766:	b093      	sub	sp, #76	; 0x4c
   11768:	460e      	mov	r6, r1
   1176a:	4615      	mov	r5, r2
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   1176c:	f01b fa01 	bl	2cb72 <bt_conn_get_dst>
   11770:	4604      	mov	r4, r0
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   11772:	7803      	ldrb	r3, [r0, #0]
   11774:	2b03      	cmp	r3, #3
   11776:	d83e      	bhi.n	117f6 <security_changed+0x92>
   11778:	e8df f003 	tbb	[pc, r3]
   1177c:	37312702 	.word	0x37312702
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   11780:	4b23      	ldr	r3, [pc, #140]	; (11810 <security_changed+0xac>)
   11782:	e893 0003 	ldmia.w	r3, {r0, r1}
   11786:	9007      	str	r0, [sp, #28]
   11788:	f8ad 1020 	strh.w	r1, [sp, #32]
   1178c:	0c09      	lsrs	r1, r1, #16
   1178e:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
   11792:	79a3      	ldrb	r3, [r4, #6]
   11794:	7962      	ldrb	r2, [r4, #5]
   11796:	7921      	ldrb	r1, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
   11798:	78e0      	ldrb	r0, [r4, #3]
   1179a:	78a7      	ldrb	r7, [r4, #2]
   1179c:	7864      	ldrb	r4, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   1179e:	f10d 0c1c 	add.w	ip, sp, #28
   117a2:	f8cd c014 	str.w	ip, [sp, #20]
   117a6:	9404      	str	r4, [sp, #16]
   117a8:	9703      	str	r7, [sp, #12]
   117aa:	9002      	str	r0, [sp, #8]
   117ac:	9101      	str	r1, [sp, #4]
   117ae:	9200      	str	r2, [sp, #0]
   117b0:	4a18      	ldr	r2, [pc, #96]	; (11814 <security_changed+0xb0>)
   117b2:	211e      	movs	r1, #30
   117b4:	a80a      	add	r0, sp, #40	; 0x28
   117b6:	f019 fa58 	bl	2ac6a <snprintk>

	if (!err) {
   117ba:	bb15      	cbnz	r5, 11802 <security_changed+0x9e>
		printk("Security changed: %s level %u\n", addr, level);
   117bc:	4632      	mov	r2, r6
   117be:	a90a      	add	r1, sp, #40	; 0x28
   117c0:	4815      	ldr	r0, [pc, #84]	; (11818 <security_changed+0xb4>)
   117c2:	f019 fa44 	bl	2ac4e <printk>
	} else {
		printk("Security failed: %s level %u err %d\n", addr, level,
			err);
	}
}
   117c6:	b013      	add	sp, #76	; 0x4c
   117c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
   117ca:	4b14      	ldr	r3, [pc, #80]	; (1181c <security_changed+0xb8>)
   117cc:	e893 0003 	ldmia.w	r3, {r0, r1}
   117d0:	9007      	str	r0, [sp, #28]
   117d2:	f8ad 1020 	strh.w	r1, [sp, #32]
   117d6:	0c09      	lsrs	r1, r1, #16
   117d8:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
		break;
   117dc:	e7d9      	b.n	11792 <security_changed+0x2e>
		strcpy(type, "public-id");
   117de:	4a10      	ldr	r2, [pc, #64]	; (11820 <security_changed+0xbc>)
   117e0:	ab07      	add	r3, sp, #28
   117e2:	ca07      	ldmia	r2, {r0, r1, r2}
   117e4:	c303      	stmia	r3!, {r0, r1}
   117e6:	801a      	strh	r2, [r3, #0]
		break;
   117e8:	e7d3      	b.n	11792 <security_changed+0x2e>
		strcpy(type, "random-id");
   117ea:	4a0e      	ldr	r2, [pc, #56]	; (11824 <security_changed+0xc0>)
   117ec:	ab07      	add	r3, sp, #28
   117ee:	ca07      	ldmia	r2, {r0, r1, r2}
   117f0:	c303      	stmia	r3!, {r0, r1}
   117f2:	801a      	strh	r2, [r3, #0]
		break;
   117f4:	e7cd      	b.n	11792 <security_changed+0x2e>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   117f6:	4a0c      	ldr	r2, [pc, #48]	; (11828 <security_changed+0xc4>)
   117f8:	210a      	movs	r1, #10
   117fa:	a807      	add	r0, sp, #28
   117fc:	f019 fa35 	bl	2ac6a <snprintk>
		break;
   11800:	e7c7      	b.n	11792 <security_changed+0x2e>
		printk("Security failed: %s level %u err %d\n", addr, level,
   11802:	462b      	mov	r3, r5
   11804:	4632      	mov	r2, r6
   11806:	a90a      	add	r1, sp, #40	; 0x28
   11808:	4808      	ldr	r0, [pc, #32]	; (1182c <security_changed+0xc8>)
   1180a:	f019 fa20 	bl	2ac4e <printk>
}
   1180e:	e7da      	b.n	117c6 <security_changed+0x62>
   11810:	000315b0 	.word	0x000315b0
   11814:	000315c8 	.word	0x000315c8
   11818:	000315ec 	.word	0x000315ec
   1181c:	000315b8 	.word	0x000315b8
   11820:	00031634 	.word	0x00031634
   11824:	00031640 	.word	0x00031640
   11828:	000315c0 	.word	0x000315c0
   1182c:	0003160c 	.word	0x0003160c

00011830 <disconnected>:
{
   11830:	b508      	push	{r3, lr}
	printk("Disconnected (reason %u)\n", reason);
   11832:	4804      	ldr	r0, [pc, #16]	; (11844 <disconnected+0x14>)
   11834:	f019 fa0b 	bl	2ac4e <printk>
	clear_melty_parameters_initialized();
   11838:	f000 fafc 	bl	11e34 <clear_melty_parameters_initialized>
	is_connected = 0;
   1183c:	4b02      	ldr	r3, [pc, #8]	; (11848 <disconnected+0x18>)
   1183e:	2200      	movs	r2, #0
   11840:	601a      	str	r2, [r3, #0]
}
   11842:	bd08      	pop	{r3, pc}
   11844:	0003164c 	.word	0x0003164c
   11848:	20002058 	.word	0x20002058

0001184c <auth_cancel>:

	printk("Passkey for %s: %06u\n", addr, passkey);
}

static void auth_cancel(struct bt_conn *conn)
{
   1184c:	b570      	push	{r4, r5, r6, lr}
   1184e:	b092      	sub	sp, #72	; 0x48
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   11850:	f01b f98f 	bl	2cb72 <bt_conn_get_dst>
   11854:	4604      	mov	r4, r0
	switch (addr->type) {
   11856:	7803      	ldrb	r3, [r0, #0]
   11858:	2b03      	cmp	r3, #3
   1185a:	d83a      	bhi.n	118d2 <auth_cancel+0x86>
   1185c:	e8df f003 	tbb	[pc, r3]
   11860:	332d2302 	.word	0x332d2302
		strcpy(type, "public");
   11864:	4b1e      	ldr	r3, [pc, #120]	; (118e0 <auth_cancel+0x94>)
   11866:	e893 0003 	ldmia.w	r3, {r0, r1}
   1186a:	9007      	str	r0, [sp, #28]
   1186c:	f8ad 1020 	strh.w	r1, [sp, #32]
   11870:	0c09      	lsrs	r1, r1, #16
   11872:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
   11876:	79a3      	ldrb	r3, [r4, #6]
   11878:	7962      	ldrb	r2, [r4, #5]
   1187a:	7921      	ldrb	r1, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
   1187c:	78e0      	ldrb	r0, [r4, #3]
   1187e:	78a5      	ldrb	r5, [r4, #2]
   11880:	7864      	ldrb	r4, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   11882:	ae07      	add	r6, sp, #28
   11884:	9605      	str	r6, [sp, #20]
   11886:	9404      	str	r4, [sp, #16]
   11888:	9503      	str	r5, [sp, #12]
   1188a:	9002      	str	r0, [sp, #8]
   1188c:	9101      	str	r1, [sp, #4]
   1188e:	9200      	str	r2, [sp, #0]
   11890:	4a14      	ldr	r2, [pc, #80]	; (118e4 <auth_cancel+0x98>)
   11892:	211e      	movs	r1, #30
   11894:	a80a      	add	r0, sp, #40	; 0x28
   11896:	f019 f9e8 	bl	2ac6a <snprintk>

	printk("Pairing cancelled: %s\n", addr);
   1189a:	a90a      	add	r1, sp, #40	; 0x28
   1189c:	4812      	ldr	r0, [pc, #72]	; (118e8 <auth_cancel+0x9c>)
   1189e:	f019 f9d6 	bl	2ac4e <printk>
}
   118a2:	b012      	add	sp, #72	; 0x48
   118a4:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
   118a6:	4b11      	ldr	r3, [pc, #68]	; (118ec <auth_cancel+0xa0>)
   118a8:	e893 0003 	ldmia.w	r3, {r0, r1}
   118ac:	9007      	str	r0, [sp, #28]
   118ae:	f8ad 1020 	strh.w	r1, [sp, #32]
   118b2:	0c09      	lsrs	r1, r1, #16
   118b4:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
		break;
   118b8:	e7dd      	b.n	11876 <auth_cancel+0x2a>
		strcpy(type, "public-id");
   118ba:	4a0d      	ldr	r2, [pc, #52]	; (118f0 <auth_cancel+0xa4>)
   118bc:	ab07      	add	r3, sp, #28
   118be:	ca07      	ldmia	r2, {r0, r1, r2}
   118c0:	c303      	stmia	r3!, {r0, r1}
   118c2:	801a      	strh	r2, [r3, #0]
		break;
   118c4:	e7d7      	b.n	11876 <auth_cancel+0x2a>
		strcpy(type, "random-id");
   118c6:	4a0b      	ldr	r2, [pc, #44]	; (118f4 <auth_cancel+0xa8>)
   118c8:	ab07      	add	r3, sp, #28
   118ca:	ca07      	ldmia	r2, {r0, r1, r2}
   118cc:	c303      	stmia	r3!, {r0, r1}
   118ce:	801a      	strh	r2, [r3, #0]
		break;
   118d0:	e7d1      	b.n	11876 <auth_cancel+0x2a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   118d2:	4a09      	ldr	r2, [pc, #36]	; (118f8 <auth_cancel+0xac>)
   118d4:	210a      	movs	r1, #10
   118d6:	a807      	add	r0, sp, #28
   118d8:	f019 f9c7 	bl	2ac6a <snprintk>
		break;
   118dc:	e7cb      	b.n	11876 <auth_cancel+0x2a>
   118de:	bf00      	nop
   118e0:	000315b0 	.word	0x000315b0
   118e4:	000315c8 	.word	0x000315c8
   118e8:	00031668 	.word	0x00031668
   118ec:	000315b8 	.word	0x000315b8
   118f0:	00031634 	.word	0x00031634
   118f4:	00031640 	.word	0x00031640
   118f8:	000315c0 	.word	0x000315c0

000118fc <pairing_complete>:

static void pairing_complete(struct bt_conn *conn, bool bonded)
{
   118fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   118fe:	b093      	sub	sp, #76	; 0x4c
   11900:	460d      	mov	r5, r1
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   11902:	f01b f936 	bl	2cb72 <bt_conn_get_dst>
   11906:	4604      	mov	r4, r0
	switch (addr->type) {
   11908:	7803      	ldrb	r3, [r0, #0]
   1190a:	2b03      	cmp	r3, #3
   1190c:	d83b      	bhi.n	11986 <pairing_complete+0x8a>
   1190e:	e8df f003 	tbb	[pc, r3]
   11912:	2402      	.short	0x2402
   11914:	342e      	.short	0x342e
		strcpy(type, "public");
   11916:	4b1f      	ldr	r3, [pc, #124]	; (11994 <pairing_complete+0x98>)
   11918:	e893 0003 	ldmia.w	r3, {r0, r1}
   1191c:	9007      	str	r0, [sp, #28]
   1191e:	f8ad 1020 	strh.w	r1, [sp, #32]
   11922:	0c09      	lsrs	r1, r1, #16
   11924:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
   11928:	79a3      	ldrb	r3, [r4, #6]
   1192a:	7962      	ldrb	r2, [r4, #5]
   1192c:	7921      	ldrb	r1, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
   1192e:	78e0      	ldrb	r0, [r4, #3]
   11930:	78a6      	ldrb	r6, [r4, #2]
   11932:	7864      	ldrb	r4, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   11934:	af07      	add	r7, sp, #28
   11936:	9705      	str	r7, [sp, #20]
   11938:	9404      	str	r4, [sp, #16]
   1193a:	9603      	str	r6, [sp, #12]
   1193c:	9002      	str	r0, [sp, #8]
   1193e:	9101      	str	r1, [sp, #4]
   11940:	9200      	str	r2, [sp, #0]
   11942:	4a15      	ldr	r2, [pc, #84]	; (11998 <pairing_complete+0x9c>)
   11944:	211e      	movs	r1, #30
   11946:	a80a      	add	r0, sp, #40	; 0x28
   11948:	f019 f98f 	bl	2ac6a <snprintk>

	printk("Pairing completed: %s, bonded: %d\n", addr, bonded);
   1194c:	462a      	mov	r2, r5
   1194e:	a90a      	add	r1, sp, #40	; 0x28
   11950:	4812      	ldr	r0, [pc, #72]	; (1199c <pairing_complete+0xa0>)
   11952:	f019 f97c 	bl	2ac4e <printk>
}
   11956:	b013      	add	sp, #76	; 0x4c
   11958:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
   1195a:	4b11      	ldr	r3, [pc, #68]	; (119a0 <pairing_complete+0xa4>)
   1195c:	e893 0003 	ldmia.w	r3, {r0, r1}
   11960:	9007      	str	r0, [sp, #28]
   11962:	f8ad 1020 	strh.w	r1, [sp, #32]
   11966:	0c09      	lsrs	r1, r1, #16
   11968:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
		break;
   1196c:	e7dc      	b.n	11928 <pairing_complete+0x2c>
		strcpy(type, "public-id");
   1196e:	4a0d      	ldr	r2, [pc, #52]	; (119a4 <pairing_complete+0xa8>)
   11970:	ab07      	add	r3, sp, #28
   11972:	ca07      	ldmia	r2, {r0, r1, r2}
   11974:	c303      	stmia	r3!, {r0, r1}
   11976:	801a      	strh	r2, [r3, #0]
		break;
   11978:	e7d6      	b.n	11928 <pairing_complete+0x2c>
		strcpy(type, "random-id");
   1197a:	4a0b      	ldr	r2, [pc, #44]	; (119a8 <pairing_complete+0xac>)
   1197c:	ab07      	add	r3, sp, #28
   1197e:	ca07      	ldmia	r2, {r0, r1, r2}
   11980:	c303      	stmia	r3!, {r0, r1}
   11982:	801a      	strh	r2, [r3, #0]
		break;
   11984:	e7d0      	b.n	11928 <pairing_complete+0x2c>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   11986:	4a09      	ldr	r2, [pc, #36]	; (119ac <pairing_complete+0xb0>)
   11988:	210a      	movs	r1, #10
   1198a:	a807      	add	r0, sp, #28
   1198c:	f019 f96d 	bl	2ac6a <snprintk>
		break;
   11990:	e7ca      	b.n	11928 <pairing_complete+0x2c>
   11992:	bf00      	nop
   11994:	000315b0 	.word	0x000315b0
   11998:	000315c8 	.word	0x000315c8
   1199c:	00031680 	.word	0x00031680
   119a0:	000315b8 	.word	0x000315b8
   119a4:	00031634 	.word	0x00031634
   119a8:	00031640 	.word	0x00031640
   119ac:	000315c0 	.word	0x000315c0

000119b0 <pairing_failed>:

static void pairing_failed(struct bt_conn *conn, enum bt_security_err reason)
{
   119b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   119b2:	b093      	sub	sp, #76	; 0x4c
   119b4:	460d      	mov	r5, r1
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   119b6:	f01b f8dc 	bl	2cb72 <bt_conn_get_dst>
   119ba:	4604      	mov	r4, r0
	switch (addr->type) {
   119bc:	7803      	ldrb	r3, [r0, #0]
   119be:	2b03      	cmp	r3, #3
   119c0:	d83b      	bhi.n	11a3a <pairing_failed+0x8a>
   119c2:	e8df f003 	tbb	[pc, r3]
   119c6:	2402      	.short	0x2402
   119c8:	342e      	.short	0x342e
		strcpy(type, "public");
   119ca:	4b1f      	ldr	r3, [pc, #124]	; (11a48 <pairing_failed+0x98>)
   119cc:	e893 0003 	ldmia.w	r3, {r0, r1}
   119d0:	9007      	str	r0, [sp, #28]
   119d2:	f8ad 1020 	strh.w	r1, [sp, #32]
   119d6:	0c09      	lsrs	r1, r1, #16
   119d8:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
   119dc:	79a3      	ldrb	r3, [r4, #6]
   119de:	7962      	ldrb	r2, [r4, #5]
   119e0:	7921      	ldrb	r1, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
   119e2:	78e0      	ldrb	r0, [r4, #3]
   119e4:	78a6      	ldrb	r6, [r4, #2]
   119e6:	7864      	ldrb	r4, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   119e8:	af07      	add	r7, sp, #28
   119ea:	9705      	str	r7, [sp, #20]
   119ec:	9404      	str	r4, [sp, #16]
   119ee:	9603      	str	r6, [sp, #12]
   119f0:	9002      	str	r0, [sp, #8]
   119f2:	9101      	str	r1, [sp, #4]
   119f4:	9200      	str	r2, [sp, #0]
   119f6:	4a15      	ldr	r2, [pc, #84]	; (11a4c <pairing_failed+0x9c>)
   119f8:	211e      	movs	r1, #30
   119fa:	a80a      	add	r0, sp, #40	; 0x28
   119fc:	f019 f935 	bl	2ac6a <snprintk>

	printk("Pairing failed conn: %s, reason %d\n", addr, reason);
   11a00:	462a      	mov	r2, r5
   11a02:	a90a      	add	r1, sp, #40	; 0x28
   11a04:	4812      	ldr	r0, [pc, #72]	; (11a50 <pairing_failed+0xa0>)
   11a06:	f019 f922 	bl	2ac4e <printk>
}
   11a0a:	b013      	add	sp, #76	; 0x4c
   11a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
   11a0e:	4b11      	ldr	r3, [pc, #68]	; (11a54 <pairing_failed+0xa4>)
   11a10:	e893 0003 	ldmia.w	r3, {r0, r1}
   11a14:	9007      	str	r0, [sp, #28]
   11a16:	f8ad 1020 	strh.w	r1, [sp, #32]
   11a1a:	0c09      	lsrs	r1, r1, #16
   11a1c:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
		break;
   11a20:	e7dc      	b.n	119dc <pairing_failed+0x2c>
		strcpy(type, "public-id");
   11a22:	4a0d      	ldr	r2, [pc, #52]	; (11a58 <pairing_failed+0xa8>)
   11a24:	ab07      	add	r3, sp, #28
   11a26:	ca07      	ldmia	r2, {r0, r1, r2}
   11a28:	c303      	stmia	r3!, {r0, r1}
   11a2a:	801a      	strh	r2, [r3, #0]
		break;
   11a2c:	e7d6      	b.n	119dc <pairing_failed+0x2c>
		strcpy(type, "random-id");
   11a2e:	4a0b      	ldr	r2, [pc, #44]	; (11a5c <pairing_failed+0xac>)
   11a30:	ab07      	add	r3, sp, #28
   11a32:	ca07      	ldmia	r2, {r0, r1, r2}
   11a34:	c303      	stmia	r3!, {r0, r1}
   11a36:	801a      	strh	r2, [r3, #0]
		break;
   11a38:	e7d0      	b.n	119dc <pairing_failed+0x2c>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   11a3a:	4a09      	ldr	r2, [pc, #36]	; (11a60 <pairing_failed+0xb0>)
   11a3c:	210a      	movs	r1, #10
   11a3e:	a807      	add	r0, sp, #28
   11a40:	f019 f913 	bl	2ac6a <snprintk>
		break;
   11a44:	e7ca      	b.n	119dc <pairing_failed+0x2c>
   11a46:	bf00      	nop
   11a48:	000315b0 	.word	0x000315b0
   11a4c:	000315c8 	.word	0x000315c8
   11a50:	000316a4 	.word	0x000316a4
   11a54:	000315b8 	.word	0x000315b8
   11a58:	00031634 	.word	0x00031634
   11a5c:	00031640 	.word	0x00031640
   11a60:	000315c0 	.word	0x000315c0

00011a64 <auth_passkey_display>:
{
   11a64:	b5f0      	push	{r4, r5, r6, r7, lr}
   11a66:	b093      	sub	sp, #76	; 0x4c
   11a68:	460d      	mov	r5, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   11a6a:	f01b f882 	bl	2cb72 <bt_conn_get_dst>
   11a6e:	4604      	mov	r4, r0
	switch (addr->type) {
   11a70:	7803      	ldrb	r3, [r0, #0]
   11a72:	2b03      	cmp	r3, #3
   11a74:	d83b      	bhi.n	11aee <auth_passkey_display+0x8a>
   11a76:	e8df f003 	tbb	[pc, r3]
   11a7a:	2402      	.short	0x2402
   11a7c:	342e      	.short	0x342e
		strcpy(type, "public");
   11a7e:	4b1f      	ldr	r3, [pc, #124]	; (11afc <auth_passkey_display+0x98>)
   11a80:	e893 0003 	ldmia.w	r3, {r0, r1}
   11a84:	9007      	str	r0, [sp, #28]
   11a86:	f8ad 1020 	strh.w	r1, [sp, #32]
   11a8a:	0c09      	lsrs	r1, r1, #16
   11a8c:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
   11a90:	79a3      	ldrb	r3, [r4, #6]
   11a92:	7962      	ldrb	r2, [r4, #5]
   11a94:	7921      	ldrb	r1, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
   11a96:	78e0      	ldrb	r0, [r4, #3]
   11a98:	78a6      	ldrb	r6, [r4, #2]
   11a9a:	7864      	ldrb	r4, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   11a9c:	af07      	add	r7, sp, #28
   11a9e:	9705      	str	r7, [sp, #20]
   11aa0:	9404      	str	r4, [sp, #16]
   11aa2:	9603      	str	r6, [sp, #12]
   11aa4:	9002      	str	r0, [sp, #8]
   11aa6:	9101      	str	r1, [sp, #4]
   11aa8:	9200      	str	r2, [sp, #0]
   11aaa:	4a15      	ldr	r2, [pc, #84]	; (11b00 <auth_passkey_display+0x9c>)
   11aac:	211e      	movs	r1, #30
   11aae:	a80a      	add	r0, sp, #40	; 0x28
   11ab0:	f019 f8db 	bl	2ac6a <snprintk>
	printk("Passkey for %s: %06u\n", addr, passkey);
   11ab4:	462a      	mov	r2, r5
   11ab6:	a90a      	add	r1, sp, #40	; 0x28
   11ab8:	4812      	ldr	r0, [pc, #72]	; (11b04 <auth_passkey_display+0xa0>)
   11aba:	f019 f8c8 	bl	2ac4e <printk>
}
   11abe:	b013      	add	sp, #76	; 0x4c
   11ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
   11ac2:	4b11      	ldr	r3, [pc, #68]	; (11b08 <auth_passkey_display+0xa4>)
   11ac4:	e893 0003 	ldmia.w	r3, {r0, r1}
   11ac8:	9007      	str	r0, [sp, #28]
   11aca:	f8ad 1020 	strh.w	r1, [sp, #32]
   11ace:	0c09      	lsrs	r1, r1, #16
   11ad0:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
		break;
   11ad4:	e7dc      	b.n	11a90 <auth_passkey_display+0x2c>
		strcpy(type, "public-id");
   11ad6:	4a0d      	ldr	r2, [pc, #52]	; (11b0c <auth_passkey_display+0xa8>)
   11ad8:	ab07      	add	r3, sp, #28
   11ada:	ca07      	ldmia	r2, {r0, r1, r2}
   11adc:	c303      	stmia	r3!, {r0, r1}
   11ade:	801a      	strh	r2, [r3, #0]
		break;
   11ae0:	e7d6      	b.n	11a90 <auth_passkey_display+0x2c>
		strcpy(type, "random-id");
   11ae2:	4a0b      	ldr	r2, [pc, #44]	; (11b10 <auth_passkey_display+0xac>)
   11ae4:	ab07      	add	r3, sp, #28
   11ae6:	ca07      	ldmia	r2, {r0, r1, r2}
   11ae8:	c303      	stmia	r3!, {r0, r1}
   11aea:	801a      	strh	r2, [r3, #0]
		break;
   11aec:	e7d0      	b.n	11a90 <auth_passkey_display+0x2c>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   11aee:	4a09      	ldr	r2, [pc, #36]	; (11b14 <auth_passkey_display+0xb0>)
   11af0:	210a      	movs	r1, #10
   11af2:	a807      	add	r0, sp, #28
   11af4:	f019 f8b9 	bl	2ac6a <snprintk>
		break;
   11af8:	e7ca      	b.n	11a90 <auth_passkey_display+0x2c>
   11afa:	bf00      	nop
   11afc:	000315b0 	.word	0x000315b0
   11b00:	000315c8 	.word	0x000315c8
   11b04:	000316c8 	.word	0x000316c8
   11b08:	000315b8 	.word	0x000315b8
   11b0c:	00031634 	.word	0x00031634
   11b10:	00031640 	.word	0x00031640
   11b14:	000315c0 	.word	0x000315c0

00011b18 <check_heart_beat>:
static struct bt_conn_auth_cb conn_auth_callbacks;
#endif


bool check_heart_beat(void)
{
   11b18:	b508      	push	{r3, lr}
		(void) arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t) ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
   11b1a:	f01f f83f 	bl	30b9c <z_impl_k_uptime_ticks>
 *
 * @return Current uptime in milliseconds.
 */
static inline int64_t k_uptime_get(void)
{
	return k_ticks_to_ms_floor64(k_uptime_ticks());
   11b1e:	4684      	mov	ip, r0
   11b20:	468e      	mov	lr, r1
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   11b22:	014a      	lsls	r2, r1, #5
   11b24:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
   11b28:	0140      	lsls	r0, r0, #5
   11b2a:	ebb0 030c 	subs.w	r3, r0, ip
   11b2e:	eb62 0201 	sbc.w	r2, r2, r1
   11b32:	0092      	lsls	r2, r2, #2
   11b34:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
   11b38:	009b      	lsls	r3, r3, #2
   11b3a:	eb13 030c 	adds.w	r3, r3, ip
   11b3e:	eb42 0101 	adc.w	r1, r2, r1
   11b42:	00c9      	lsls	r1, r1, #3
   11b44:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
   11b48:	f3c3 3310 	ubfx	r3, r3, #12, #17
   11b4c:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   11b50:	0bc9      	lsrs	r1, r1, #15
	static bool heart_beat_good = false;
	static uint8_t last_heart_beat = 0;
	static uint64_t time_at_last_check = 0;

	if (k_uptime_get() - time_at_last_check > HEART_BEAT_CHECK_FREQ_MS) {
   11b52:	481f      	ldr	r0, [pc, #124]	; (11bd0 <check_heart_beat+0xb8>)
   11b54:	6802      	ldr	r2, [r0, #0]
   11b56:	6840      	ldr	r0, [r0, #4]
   11b58:	1a9b      	subs	r3, r3, r2
   11b5a:	eb61 0100 	sbc.w	r1, r1, r0
   11b5e:	f240 2259 	movw	r2, #601	; 0x259
   11b62:	4293      	cmp	r3, r2
   11b64:	f171 0300 	sbcs.w	r3, r1, #0
   11b68:	d202      	bcs.n	11b70 <check_heart_beat+0x58>
			heart_beat_good = false;
		}
	}
	
	return heart_beat_good;
}
   11b6a:	4b1a      	ldr	r3, [pc, #104]	; (11bd4 <check_heart_beat+0xbc>)
   11b6c:	7818      	ldrb	r0, [r3, #0]
   11b6e:	bd08      	pop	{r3, pc}
   11b70:	f01f f814 	bl	30b9c <z_impl_k_uptime_ticks>
   11b74:	014a      	lsls	r2, r1, #5
   11b76:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
   11b7a:	0143      	lsls	r3, r0, #5
   11b7c:	1a1b      	subs	r3, r3, r0
   11b7e:	eb62 0201 	sbc.w	r2, r2, r1
   11b82:	0092      	lsls	r2, r2, #2
   11b84:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
   11b88:	009b      	lsls	r3, r3, #2
   11b8a:	181b      	adds	r3, r3, r0
   11b8c:	eb42 0101 	adc.w	r1, r2, r1
   11b90:	00c9      	lsls	r1, r1, #3
   11b92:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
   11b96:	f3c3 3310 	ubfx	r3, r3, #12, #17
   11b9a:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   11b9e:	0bc9      	lsrs	r1, r1, #15
		time_at_last_check = k_uptime_get();
   11ba0:	4a0b      	ldr	r2, [pc, #44]	; (11bd0 <check_heart_beat+0xb8>)
   11ba2:	6013      	str	r3, [r2, #0]
   11ba4:	6051      	str	r1, [r2, #4]
		int current_heart_beat = get_heart_beat();
   11ba6:	f000 f957 	bl	11e58 <get_heart_beat>
		if (current_heart_beat != last_heart_beat && current_heart_beat >= 10 && current_heart_beat <= 13) {
   11baa:	4b0b      	ldr	r3, [pc, #44]	; (11bd8 <check_heart_beat+0xc0>)
   11bac:	781b      	ldrb	r3, [r3, #0]
   11bae:	4298      	cmp	r0, r3
   11bb0:	d009      	beq.n	11bc6 <check_heart_beat+0xae>
   11bb2:	2809      	cmp	r0, #9
   11bb4:	dd07      	ble.n	11bc6 <check_heart_beat+0xae>
   11bb6:	280d      	cmp	r0, #13
   11bb8:	dc05      	bgt.n	11bc6 <check_heart_beat+0xae>
			last_heart_beat = current_heart_beat;
   11bba:	4b07      	ldr	r3, [pc, #28]	; (11bd8 <check_heart_beat+0xc0>)
   11bbc:	7018      	strb	r0, [r3, #0]
			heart_beat_good = true;
   11bbe:	4b05      	ldr	r3, [pc, #20]	; (11bd4 <check_heart_beat+0xbc>)
   11bc0:	2201      	movs	r2, #1
   11bc2:	701a      	strb	r2, [r3, #0]
   11bc4:	e7d1      	b.n	11b6a <check_heart_beat+0x52>
			heart_beat_good = false;
   11bc6:	4b03      	ldr	r3, [pc, #12]	; (11bd4 <check_heart_beat+0xbc>)
   11bc8:	2200      	movs	r2, #0
   11bca:	701a      	strb	r2, [r3, #0]
   11bcc:	e7cd      	b.n	11b6a <check_heart_beat+0x52>
   11bce:	bf00      	nop
   11bd0:	20001820 	.word	0x20001820
   11bd4:	2000375e 	.word	0x2000375e
   11bd8:	2000375f 	.word	0x2000375f

00011bdc <main>:

void main(void)
{
   11bdc:	b510      	push	{r4, lr}
   11bde:	b088      	sub	sp, #32
	lis331dlh_read_data_polling();
   11be0:	f001 f87c 	bl	12cdc <lis331dlh_read_data_polling>
	
	int err;

	printk("Starting Bluetooth Peripheral LBS example\n");
   11be4:	4832      	ldr	r0, [pc, #200]	; (11cb0 <main+0xd4>)
   11be6:	f019 f832 	bl	2ac4e <printk>

	if (IS_ENABLED(CONFIG_BT_LBS_SECURITY_ENABLED)) {
		err = bt_conn_auth_cb_register(&conn_auth_callbacks);
   11bea:	4832      	ldr	r0, [pc, #200]	; (11cb4 <main+0xd8>)
   11bec:	f008 fc6c 	bl	1a4c8 <bt_conn_auth_cb_register>
		if (err) {
   11bf0:	bb50      	cbnz	r0, 11c48 <main+0x6c>
			printk("Failed to register authorization callbacks.\n");
			return;
		}

		err = bt_conn_auth_info_cb_register(&conn_auth_info_callbacks);
   11bf2:	4831      	ldr	r0, [pc, #196]	; (11cb8 <main+0xdc>)
   11bf4:	f008 fc90 	bl	1a518 <bt_conn_auth_info_cb_register>
		if (err) {
   11bf8:	bb58      	cbnz	r0, 11c52 <main+0x76>
			printk("Failed to register authorization info callbacks.\n");
			return;
		}
	}

	err = bt_enable(NULL);
   11bfa:	2000      	movs	r0, #0
   11bfc:	f006 fc2e 	bl	1845c <bt_enable>
	if (err) {
   11c00:	4601      	mov	r1, r0
   11c02:	bb50      	cbnz	r0, 11c5a <main+0x7e>
		printk("Bluetooth init failed (err %d)\n", err);
		return;
	}

	printk("Bluetooth initialized\n");
   11c04:	482d      	ldr	r0, [pc, #180]	; (11cbc <main+0xe0>)
   11c06:	f019 f822 	bl	2ac4e <printk>

	if (IS_ENABLED(CONFIG_SETTINGS)) {
		settings_load();
   11c0a:	f019 fdfe 	bl	2b80a <settings_load>
	}

	err = bt_melty_init();
   11c0e:	f018 fec7 	bl	2a9a0 <bt_melty_init>
	if (err) {
   11c12:	4601      	mov	r1, r0
   11c14:	bb28      	cbnz	r0, 11c62 <main+0x86>
		printk("Failed to init LBS (err:%d)\n", err);
		return;
	}

	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
   11c16:	f10d 0c0c 	add.w	ip, sp, #12
   11c1a:	4c29      	ldr	r4, [pc, #164]	; (11cc0 <main+0xe4>)
   11c1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   11c1e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   11c22:	6823      	ldr	r3, [r4, #0]
   11c24:	f8cc 3000 	str.w	r3, [ip]
   11c28:	2301      	movs	r3, #1
   11c2a:	9300      	str	r3, [sp, #0]
   11c2c:	4b25      	ldr	r3, [pc, #148]	; (11cc4 <main+0xe8>)
   11c2e:	2202      	movs	r2, #2
   11c30:	4925      	ldr	r1, [pc, #148]	; (11cc8 <main+0xec>)
   11c32:	a803      	add	r0, sp, #12
   11c34:	f007 fb5a 	bl	192ec <bt_le_adv_start>
			      sd, ARRAY_SIZE(sd));
	if (err) {
   11c38:	4601      	mov	r1, r0
   11c3a:	b9b0      	cbnz	r0, 11c6a <main+0x8e>
		printk("Advertising failed to start (err %d)\n", err);
		return;
	}

	printk("Advertising successfully started\n");
   11c3c:	4823      	ldr	r0, [pc, #140]	; (11ccc <main+0xf0>)
   11c3e:	f019 f806 	bl	2ac4e <printk>
	
	init_melty();
   11c42:	f000 fa1d 	bl	12080 <init_melty>
   11c46:	e020      	b.n	11c8a <main+0xae>
			printk("Failed to register authorization callbacks.\n");
   11c48:	4821      	ldr	r0, [pc, #132]	; (11cd0 <main+0xf4>)
   11c4a:	f019 f800 	bl	2ac4e <printk>

		status_led_flash(is_connected);

	}

}
   11c4e:	b008      	add	sp, #32
   11c50:	bd10      	pop	{r4, pc}
			printk("Failed to register authorization info callbacks.\n");
   11c52:	4820      	ldr	r0, [pc, #128]	; (11cd4 <main+0xf8>)
   11c54:	f018 fffb 	bl	2ac4e <printk>
			return;
   11c58:	e7f9      	b.n	11c4e <main+0x72>
		printk("Bluetooth init failed (err %d)\n", err);
   11c5a:	481f      	ldr	r0, [pc, #124]	; (11cd8 <main+0xfc>)
   11c5c:	f018 fff7 	bl	2ac4e <printk>
		return;
   11c60:	e7f5      	b.n	11c4e <main+0x72>
		printk("Failed to init LBS (err:%d)\n", err);
   11c62:	481e      	ldr	r0, [pc, #120]	; (11cdc <main+0x100>)
   11c64:	f018 fff3 	bl	2ac4e <printk>
		return;
   11c68:	e7f1      	b.n	11c4e <main+0x72>
		printk("Advertising failed to start (err %d)\n", err);
   11c6a:	481d      	ldr	r0, [pc, #116]	; (11ce0 <main+0x104>)
   11c6c:	f018 ffef 	bl	2ac4e <printk>
		return;
   11c70:	e7ed      	b.n	11c4e <main+0x72>
		update_melty_stats(0, get_battery_voltage());	//assures voltage is updated even if throttle at 0
   11c72:	f000 faf7 	bl	12264 <get_battery_voltage>
   11c76:	4601      	mov	r1, r0
   11c78:	2000      	movs	r0, #0
   11c7a:	f000 faff 	bl	1227c <update_melty_stats>
		motors_safe();
   11c7e:	f000 fa73 	bl	12168 <motors_safe>
		status_led_flash(is_connected);
   11c82:	4b18      	ldr	r3, [pc, #96]	; (11ce4 <main+0x108>)
   11c84:	6818      	ldr	r0, [r3, #0]
   11c86:	f000 fec7 	bl	12a18 <status_led_flash>
		while (is_connected == 1 && get_melty_parameters_initialized()
   11c8a:	4b16      	ldr	r3, [pc, #88]	; (11ce4 <main+0x108>)
   11c8c:	681b      	ldr	r3, [r3, #0]
   11c8e:	2b01      	cmp	r3, #1
   11c90:	d1ef      	bne.n	11c72 <main+0x96>
   11c92:	f000 f8d5 	bl	11e40 <get_melty_parameters_initialized>
   11c96:	2800      	cmp	r0, #0
   11c98:	d0eb      	beq.n	11c72 <main+0x96>
		 && get_throttle() != 0 && check_heart_beat()) {
   11c9a:	f000 f8e9 	bl	11e70 <get_throttle>
   11c9e:	2800      	cmp	r0, #0
   11ca0:	d0e7      	beq.n	11c72 <main+0x96>
   11ca2:	f7ff ff39 	bl	11b18 <check_heart_beat>
   11ca6:	2800      	cmp	r0, #0
   11ca8:	d0e3      	beq.n	11c72 <main+0x96>
			do_melty();
   11caa:	f000 fb05 	bl	122b8 <do_melty>
   11cae:	e7ec      	b.n	11c8a <main+0xae>
   11cb0:	000316e0 	.word	0x000316e0
   11cb4:	2000057c 	.word	0x2000057c
   11cb8:	20000594 	.word	0x20000594
   11cbc:	00031790 	.word	0x00031790
   11cc0:	000314d0 	.word	0x000314d0
   11cc4:	00031830 	.word	0x00031830
   11cc8:	00031820 	.word	0x00031820
   11ccc:	000317f0 	.word	0x000317f0
   11cd0:	0003170c 	.word	0x0003170c
   11cd4:	0003173c 	.word	0x0003173c
   11cd8:	00031770 	.word	0x00031770
   11cdc:	000317a8 	.word	0x000317a8
   11ce0:	000317c8 	.word	0x000317c8
   11ce4:	20002058 	.word	0x20002058

00011ce8 <getAdcDevice>:
{
   11ce8:	b508      	push	{r3, lr}
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   11cea:	4802      	ldr	r0, [pc, #8]	; (11cf4 <getAdcDevice+0xc>)
   11cec:	f013 fd4a 	bl	25784 <z_impl_device_get_binding>
}
   11cf0:	bd08      	pop	{r3, pc}
   11cf2:	bf00      	nop
   11cf4:	00031838 	.word	0x00031838

00011cf8 <init_adc>:
{
   11cf8:	b538      	push	{r3, r4, r5, lr}
   11cfa:	4604      	mov	r4, r0
	const struct device *adc_dev = getAdcDevice();
   11cfc:	f7ff fff4 	bl	11ce8 <getAdcDevice>
   11d00:	4605      	mov	r5, r0
	if(_LastChannel != channel)
   11d02:	4b12      	ldr	r3, [pc, #72]	; (11d4c <init_adc+0x54>)
   11d04:	781b      	ldrb	r3, [r3, #0]
   11d06:	42a3      	cmp	r3, r4
   11d08:	d004      	beq.n	11d14 <init_adc+0x1c>
		_IsInitialized = false;
   11d0a:	4b11      	ldr	r3, [pc, #68]	; (11d50 <init_adc+0x58>)
   11d0c:	2200      	movs	r2, #0
   11d0e:	701a      	strb	r2, [r3, #0]
		_LastChannel = channel;
   11d10:	4b0e      	ldr	r3, [pc, #56]	; (11d4c <init_adc+0x54>)
   11d12:	701c      	strb	r4, [r3, #0]
	if ( adc_dev != NULL && !_IsInitialized)
   11d14:	b18d      	cbz	r5, 11d3a <init_adc+0x42>
   11d16:	4b0e      	ldr	r3, [pc, #56]	; (11d50 <init_adc+0x58>)
   11d18:	781b      	ldrb	r3, [r3, #0]
   11d1a:	b973      	cbnz	r3, 11d3a <init_adc+0x42>
		m_1st_channel_cfg.channel_id = channel;
   11d1c:	490d      	ldr	r1, [pc, #52]	; (11d54 <init_adc+0x5c>)
   11d1e:	790b      	ldrb	r3, [r1, #4]
   11d20:	f364 0304 	bfi	r3, r4, #0, #5
   11d24:	710b      	strb	r3, [r1, #4]
        m_1st_channel_cfg.input_positive = channel+1,
   11d26:	3401      	adds	r4, #1
   11d28:	714c      	strb	r4, [r1, #5]
				const struct adc_channel_cfg *channel_cfg);

static inline int z_impl_adc_channel_setup(const struct device *dev,
					   const struct adc_channel_cfg *channel_cfg)
{
	const struct adc_driver_api *api =
   11d2a:	68ab      	ldr	r3, [r5, #8]
				(const struct adc_driver_api *)dev->api;

	return api->channel_setup(dev, channel_cfg);
   11d2c:	681b      	ldr	r3, [r3, #0]
   11d2e:	4628      	mov	r0, r5
   11d30:	4798      	blx	r3
		if(ret != 0)
   11d32:	b948      	cbnz	r0, 11d48 <init_adc+0x50>
			_IsInitialized = true;	// we don't have any other analog users
   11d34:	4b06      	ldr	r3, [pc, #24]	; (11d50 <init_adc+0x58>)
   11d36:	2201      	movs	r2, #1
   11d38:	701a      	strb	r2, [r3, #0]
	memset(m_sample_buffer, 0, sizeof(m_sample_buffer));
   11d3a:	4b07      	ldr	r3, [pc, #28]	; (11d58 <init_adc+0x60>)
   11d3c:	2200      	movs	r2, #0
   11d3e:	601a      	str	r2, [r3, #0]
   11d40:	605a      	str	r2, [r3, #4]
   11d42:	609a      	str	r2, [r3, #8]
}
   11d44:	4628      	mov	r0, r5
   11d46:	bd38      	pop	{r3, r4, r5, pc}
			adc_dev = NULL;
   11d48:	2500      	movs	r5, #0
   11d4a:	e7f6      	b.n	11d3a <init_adc+0x42>
   11d4c:	20000914 	.word	0x20000914
   11d50:	20003760 	.word	0x20003760
   11d54:	200005a4 	.word	0x200005a4
   11d58:	2000205c 	.word	0x2000205c

00011d5c <readOneChannel>:
{
   11d5c:	b500      	push	{lr}
   11d5e:	b087      	sub	sp, #28
	const struct adc_sequence sequence = {
   11d60:	2300      	movs	r3, #0
   11d62:	9301      	str	r3, [sp, #4]
		.channels    = BIT(channel),		// bit mask of channels to read
   11d64:	2201      	movs	r2, #1
   11d66:	4082      	lsls	r2, r0
	const struct adc_sequence sequence = {
   11d68:	9202      	str	r2, [sp, #8]
   11d6a:	4a0f      	ldr	r2, [pc, #60]	; (11da8 <readOneChannel+0x4c>)
   11d6c:	9203      	str	r2, [sp, #12]
   11d6e:	220c      	movs	r2, #12
   11d70:	9204      	str	r2, [sp, #16]
   11d72:	220a      	movs	r2, #10
   11d74:	f88d 2014 	strb.w	r2, [sp, #20]
   11d78:	f88d 3015 	strb.w	r3, [sp, #21]
   11d7c:	f88d 3016 	strb.w	r3, [sp, #22]
	const struct device *adc_dev = init_adc(channel);
   11d80:	f7ff ffba 	bl	11cf8 <init_adc>
	if (adc_dev)
   11d84:	b150      	cbz	r0, 11d9c <readOneChannel+0x40>
		       const struct adc_sequence *sequence);

static inline int z_impl_adc_read(const struct device *dev,
				  const struct adc_sequence *sequence)
{
	const struct adc_driver_api *api =
   11d86:	6882      	ldr	r2, [r0, #8]
				(const struct adc_driver_api *)dev->api;

	return api->read(dev, sequence);
   11d88:	6852      	ldr	r2, [r2, #4]
   11d8a:	a901      	add	r1, sp, #4
   11d8c:	4790      	blx	r2
		if(ret == 0)
   11d8e:	b940      	cbnz	r0, 11da2 <readOneChannel+0x46>
			sample_value = m_sample_buffer[0];
   11d90:	4b05      	ldr	r3, [pc, #20]	; (11da8 <readOneChannel+0x4c>)
   11d92:	f9b3 0000 	ldrsh.w	r0, [r3]
}
   11d96:	b007      	add	sp, #28
   11d98:	f85d fb04 	ldr.w	pc, [sp], #4
	int16_t sample_value = BAD_ANALOG_READ;
   11d9c:	f06f 007a 	mvn.w	r0, #122	; 0x7a
   11da0:	e7f9      	b.n	11d96 <readOneChannel+0x3a>
   11da2:	f06f 007a 	mvn.w	r0, #122	; 0x7a
   11da6:	e7f6      	b.n	11d96 <readOneChannel+0x3a>
   11da8:	2000205c 	.word	0x2000205c

00011dac <melty_ccc_cfg_changed>:
static u_int8_t heart_beat;

static void melty_ccc_cfg_changed(const struct bt_gatt_attr *attr,
				  uint16_t value)
{
	notify_enabled = (value == BT_GATT_CCC_NOTIFY);
   11dac:	2901      	cmp	r1, #1
   11dae:	bf14      	ite	ne
   11db0:	2100      	movne	r1, #0
   11db2:	2101      	moveq	r1, #1
   11db4:	4b01      	ldr	r3, [pc, #4]	; (11dbc <melty_ccc_cfg_changed+0x10>)
   11db6:	7019      	strb	r1, [r3, #0]
}
   11db8:	4770      	bx	lr
   11dba:	bf00      	nop
   11dbc:	20003764 	.word	0x20003764

00011dc0 <update_melty_config>:

static ssize_t update_melty_config(struct bt_conn *conn,
			 const struct bt_gatt_attr *attr,
			 const void *buf,
			 uint16_t len, uint16_t offset, uint8_t flags)
{
   11dc0:	b570      	push	{r4, r5, r6, lr}
   11dc2:	461d      	mov	r5, r3
   11dc4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	LOG_DBG("Attribute write, handle: %u, conn: %p", attr->handle,
		(void *)conn);

	if (len != 7U) {
   11dc8:	2d07      	cmp	r5, #7
   11dca:	d11e      	bne.n	11e0a <update_melty_config+0x4a>
   11dcc:	4614      	mov	r4, r2
		LOG_DBG("Write led: Incorrect data length");
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	if (offset != 0) {
   11dce:	b9fb      	cbnz	r3, 11e10 <update_melty_config+0x50>
		LOG_DBG("Write led: Incorrect data offset");
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

    melty_parameters_initialized = false;
   11dd0:	4e11      	ldr	r6, [pc, #68]	; (11e18 <update_melty_config+0x58>)
   11dd2:	7033      	strb	r3, [r6, #0]

    radius = (((uint8_t *)buf)[0] + ((uint8_t *)buf)[1] * 256) / 1000.0f;
   11dd4:	7813      	ldrb	r3, [r2, #0]
   11dd6:	7850      	ldrb	r0, [r2, #1]
   11dd8:	eb03 2000 	add.w	r0, r3, r0, lsl #8
   11ddc:	f7ee fea8 	bl	b30 <__aeabi_i2f>
   11de0:	490e      	ldr	r1, [pc, #56]	; (11e1c <update_melty_config+0x5c>)
   11de2:	f7ee ffad 	bl	d40 <__aeabi_fdiv>
   11de6:	4b0e      	ldr	r3, [pc, #56]	; (11e20 <update_melty_config+0x60>)
   11de8:	6018      	str	r0, [r3, #0]
    led_offset = ((uint8_t *)buf)[2];
   11dea:	78a2      	ldrb	r2, [r4, #2]
   11dec:	4b0d      	ldr	r3, [pc, #52]	; (11e24 <update_melty_config+0x64>)
   11dee:	701a      	strb	r2, [r3, #0]
    throttle = ((uint8_t *)buf)[3];
   11df0:	78e2      	ldrb	r2, [r4, #3]
   11df2:	4b0d      	ldr	r3, [pc, #52]	; (11e28 <update_melty_config+0x68>)
   11df4:	701a      	strb	r2, [r3, #0]
    translate_direction = ((int8_t *)buf)[4];
   11df6:	7922      	ldrb	r2, [r4, #4]
   11df8:	4b0c      	ldr	r3, [pc, #48]	; (11e2c <update_melty_config+0x6c>)
   11dfa:	701a      	strb	r2, [r3, #0]
    heart_beat = ((int8_t *)buf)[5];
   11dfc:	7962      	ldrb	r2, [r4, #5]
   11dfe:	4b0c      	ldr	r3, [pc, #48]	; (11e30 <update_melty_config+0x70>)
   11e00:	701a      	strb	r2, [r3, #0]
    //byte 6 reserved

    melty_parameters_initialized = true;
   11e02:	2301      	movs	r3, #1
   11e04:	7033      	strb	r3, [r6, #0]
    LOG_DBG("params updated");

	return len;
   11e06:	4628      	mov	r0, r5
}
   11e08:	bd70      	pop	{r4, r5, r6, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   11e0a:	f06f 000c 	mvn.w	r0, #12
   11e0e:	e7fb      	b.n	11e08 <update_melty_config+0x48>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   11e10:	f06f 0006 	mvn.w	r0, #6
   11e14:	e7f8      	b.n	11e08 <update_melty_config+0x48>
   11e16:	bf00      	nop
   11e18:	20003763 	.word	0x20003763
   11e1c:	447a0000 	.word	0x447a0000
   11e20:	20002068 	.word	0x20002068
   11e24:	20003762 	.word	0x20003762
   11e28:	20003765 	.word	0x20003765
   11e2c:	20003766 	.word	0x20003766
   11e30:	20003761 	.word	0x20003761

00011e34 <clear_melty_parameters_initialized>:

void clear_melty_parameters_initialized(void) {
    melty_parameters_initialized = false;
   11e34:	4b01      	ldr	r3, [pc, #4]	; (11e3c <clear_melty_parameters_initialized+0x8>)
   11e36:	2200      	movs	r2, #0
   11e38:	701a      	strb	r2, [r3, #0]
}
   11e3a:	4770      	bx	lr
   11e3c:	20003763 	.word	0x20003763

00011e40 <get_melty_parameters_initialized>:

bool get_melty_parameters_initialized(void) {
    return melty_parameters_initialized;
}
   11e40:	4b01      	ldr	r3, [pc, #4]	; (11e48 <get_melty_parameters_initialized+0x8>)
   11e42:	7818      	ldrb	r0, [r3, #0]
   11e44:	4770      	bx	lr
   11e46:	bf00      	nop
   11e48:	20003763 	.word	0x20003763

00011e4c <get_radius>:

float get_radius(void) {
    return radius;
}
   11e4c:	4b01      	ldr	r3, [pc, #4]	; (11e54 <get_radius+0x8>)
   11e4e:	6818      	ldr	r0, [r3, #0]
   11e50:	4770      	bx	lr
   11e52:	bf00      	nop
   11e54:	20002068 	.word	0x20002068

00011e58 <get_heart_beat>:


u_int8_t get_heart_beat(void) {
    return heart_beat;
}
   11e58:	4b01      	ldr	r3, [pc, #4]	; (11e60 <get_heart_beat+0x8>)
   11e5a:	7818      	ldrb	r0, [r3, #0]
   11e5c:	4770      	bx	lr
   11e5e:	bf00      	nop
   11e60:	20003761 	.word	0x20003761

00011e64 <get_translate_direction>:

u_int8_t get_translate_direction(void) {
    return translate_direction;
}
   11e64:	4b01      	ldr	r3, [pc, #4]	; (11e6c <get_translate_direction+0x8>)
   11e66:	7818      	ldrb	r0, [r3, #0]
   11e68:	4770      	bx	lr
   11e6a:	bf00      	nop
   11e6c:	20003766 	.word	0x20003766

00011e70 <get_throttle>:

u_int8_t get_throttle(void) {
    return throttle;
}
   11e70:	4b01      	ldr	r3, [pc, #4]	; (11e78 <get_throttle+0x8>)
   11e72:	7818      	ldrb	r0, [r3, #0]
   11e74:	4770      	bx	lr
   11e76:	bf00      	nop
   11e78:	20003765 	.word	0x20003765

00011e7c <get_led_offset>:

u_int8_t get_led_offset(void) {
    return led_offset;
}
   11e7c:	4b01      	ldr	r3, [pc, #4]	; (11e84 <get_led_offset+0x8>)
   11e7e:	7818      	ldrb	r0, [r3, #0]
   11e80:	4770      	bx	lr
   11e82:	bf00      	nop
   11e84:	20003762 	.word	0x20003762

00011e88 <bt_send_melty_stats>:
	return 0;
}

int bt_send_melty_stats(u_int8_t melty_stats[3])
{
	if (!notify_enabled) {
   11e88:	4a0d      	ldr	r2, [pc, #52]	; (11ec0 <bt_send_melty_stats+0x38>)
   11e8a:	7812      	ldrb	r2, [r2, #0]
   11e8c:	b1aa      	cbz	r2, 11eba <bt_send_melty_stats+0x32>
{
   11e8e:	b500      	push	{lr}
   11e90:	b087      	sub	sp, #28
   11e92:	4603      	mov	r3, r0
				 const struct bt_gatt_attr *attr,
				 const void *data, uint16_t len)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
   11e94:	2000      	movs	r0, #0
   11e96:	9000      	str	r0, [sp, #0]
   11e98:	9001      	str	r0, [sp, #4]
   11e9a:	9002      	str	r0, [sp, #8]
   11e9c:	9003      	str	r0, [sp, #12]
   11e9e:	9004      	str	r0, [sp, #16]
   11ea0:	9005      	str	r0, [sp, #20]

	params.attr = attr;
   11ea2:	4a08      	ldr	r2, [pc, #32]	; (11ec4 <bt_send_melty_stats+0x3c>)
   11ea4:	9201      	str	r2, [sp, #4]
	params.data = data;
   11ea6:	9302      	str	r3, [sp, #8]
	params.len = len;
   11ea8:	2303      	movs	r3, #3
   11eaa:	f8ad 300c 	strh.w	r3, [sp, #12]
#if defined(CONFIG_BT_EATT)
	params.chan_opt = BT_ATT_CHAN_OPT_NONE;
#endif /* CONFIG_BT_EATT */

	return bt_gatt_notify_cb(conn, &params);
   11eae:	4669      	mov	r1, sp
   11eb0:	f00b fade 	bl	1d470 <bt_gatt_notify_cb>
	}

	return bt_gatt_notify(NULL, &meltyble_svc.attrs[2],
			      melty_stats,
			      3);
}
   11eb4:	b007      	add	sp, #28
   11eb6:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EACCES;
   11eba:	f06f 000c 	mvn.w	r0, #12
}
   11ebe:	4770      	bx	lr
   11ec0:	20003764 	.word	0x20003764
   11ec4:	00031874 	.word	0x00031874

00011ec8 <get_accel_force>:
	gpio_pin_set(dev, MOTOR_PIN1, 0);
	gpio_pin_set(dev, MOTOR_PIN2, 0);
}


static float get_accel_force(void){
   11ec8:	b508      	push	{r3, lr}

	float relative_adc_read = adc_multi_sample(ADC_READS, ACCEL_ADC_CHANNEL) - zero_g_accel;
   11eca:	2104      	movs	r1, #4
   11ecc:	2001      	movs	r0, #1
   11ece:	f018 fd69 	bl	2a9a4 <adc_multi_sample>
	if (g_force < 0) g_force = 0;

	//test!
	return 15;
	return g_force;
}
   11ed2:	4801      	ldr	r0, [pc, #4]	; (11ed8 <get_accel_force+0x10>)
   11ed4:	bd08      	pop	{r3, pc}
   11ed6:	bf00      	nop
   11ed8:	41700000 	.word	0x41700000

00011edc <get_smoothed_accel_force>:

static float get_smoothed_accel_force(void){
   11edc:	b510      	push	{r4, lr}

    static float smoothed_accel = 0;

    if (smoothed_accel == 0) {
   11ede:	4b0f      	ldr	r3, [pc, #60]	; (11f1c <get_smoothed_accel_force+0x40>)
   11ee0:	681c      	ldr	r4, [r3, #0]
   11ee2:	2100      	movs	r1, #0
   11ee4:	4620      	mov	r0, r4
   11ee6:	f7ef f80b 	bl	f00 <__aeabi_fcmpeq>
   11eea:	b130      	cbz	r0, 11efa <get_smoothed_accel_force+0x1e>
        smoothed_accel = get_accel_force();
   11eec:	f7ff ffec 	bl	11ec8 <get_accel_force>
   11ef0:	4b0a      	ldr	r3, [pc, #40]	; (11f1c <get_smoothed_accel_force+0x40>)
   11ef2:	6018      	str	r0, [r3, #0]
    } else {
        smoothed_accel = (smoothed_accel * ACCEL_SMOOTHING_FACTOR) + (get_accel_force() * (1.0f - ACCEL_SMOOTHING_FACTOR));
    }

	return smoothed_accel;
}
   11ef4:	4b09      	ldr	r3, [pc, #36]	; (11f1c <get_smoothed_accel_force+0x40>)
   11ef6:	6818      	ldr	r0, [r3, #0]
   11ef8:	bd10      	pop	{r4, pc}
        smoothed_accel = (smoothed_accel * ACCEL_SMOOTHING_FACTOR) + (get_accel_force() * (1.0f - ACCEL_SMOOTHING_FACTOR));
   11efa:	4909      	ldr	r1, [pc, #36]	; (11f20 <get_smoothed_accel_force+0x44>)
   11efc:	4620      	mov	r0, r4
   11efe:	f7ee fe6b 	bl	bd8 <__aeabi_fmul>
   11f02:	4604      	mov	r4, r0
   11f04:	f7ff ffe0 	bl	11ec8 <get_accel_force>
   11f08:	4906      	ldr	r1, [pc, #24]	; (11f24 <get_smoothed_accel_force+0x48>)
   11f0a:	f7ee fe65 	bl	bd8 <__aeabi_fmul>
   11f0e:	4601      	mov	r1, r0
   11f10:	4620      	mov	r0, r4
   11f12:	f7ee fd59 	bl	9c8 <__addsf3>
   11f16:	4b01      	ldr	r3, [pc, #4]	; (11f1c <get_smoothed_accel_force+0x40>)
   11f18:	6018      	str	r0, [r3, #0]
   11f1a:	e7eb      	b.n	11ef4 <get_smoothed_accel_force+0x18>
   11f1c:	20002074 	.word	0x20002074
   11f20:	3f7ae148 	.word	0x3f7ae148
   11f24:	3ca3d700 	.word	0x3ca3d700

00011f28 <get_rotation_interval_ms>:

static float get_rotation_interval_ms(void){
   11f28:	b510      	push	{r4, lr}

	//increasing causes tracking speed to decrease
	float radius_in_cm = get_radius();
   11f2a:	f7ff ff8f 	bl	11e4c <get_radius>
   11f2e:	4604      	mov	r4, r0

 	//calculate RPM from g's - derived from "G = 0.00001118 * r * RPM^2"
	float rpm;
	rpm = get_smoothed_accel_force() * 89445.0f;                               
   11f30:	f7ff ffd4 	bl	11edc <get_smoothed_accel_force>
   11f34:	4912      	ldr	r1, [pc, #72]	; (11f80 <get_rotation_interval_ms+0x58>)
   11f36:	f7ee fe4f 	bl	bd8 <__aeabi_fmul>
	rpm = rpm / radius_in_cm;
   11f3a:	4621      	mov	r1, r4
   11f3c:	f7ee ff00 	bl	d40 <__aeabi_fdiv>
	rpm = sqrt(rpm);	
   11f40:	f7ee fa82 	bl	448 <__aeabi_f2d>
   11f44:	f018 f8d0 	bl	2a0e8 <sqrt>
   11f48:	f7ee fce8 	bl	91c <__aeabi_d2f>
   11f4c:	4601      	mov	r1, r0

	float rotation_interval = (1.0f / rpm) * 60 * 1000;
   11f4e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
   11f52:	f7ee fef5 	bl	d40 <__aeabi_fdiv>
   11f56:	490b      	ldr	r1, [pc, #44]	; (11f84 <get_rotation_interval_ms+0x5c>)
   11f58:	f7ee fe3e 	bl	bd8 <__aeabi_fmul>
   11f5c:	490a      	ldr	r1, [pc, #40]	; (11f88 <get_rotation_interval_ms+0x60>)
   11f5e:	f7ee fe3b 	bl	bd8 <__aeabi_fmul>
   11f62:	4604      	mov	r4, r0
	if (rotation_interval > 250) rotation_interval = 250;
   11f64:	4909      	ldr	r1, [pc, #36]	; (11f8c <get_rotation_interval_ms+0x64>)
   11f66:	f7ee fff3 	bl	f50 <__aeabi_fcmpgt>
   11f6a:	b100      	cbz	r0, 11f6e <get_rotation_interval_ms+0x46>
   11f6c:	4c07      	ldr	r4, [pc, #28]	; (11f8c <get_rotation_interval_ms+0x64>)
	if (rotation_interval < 0) rotation_interval = 250;
   11f6e:	2100      	movs	r1, #0
   11f70:	4620      	mov	r0, r4
   11f72:	f7ee ffcf 	bl	f14 <__aeabi_fcmplt>
   11f76:	b908      	cbnz	r0, 11f7c <get_rotation_interval_ms+0x54>
	return rotation_interval;
}
   11f78:	4620      	mov	r0, r4
   11f7a:	bd10      	pop	{r4, pc}
	if (rotation_interval < 0) rotation_interval = 250;
   11f7c:	4c03      	ldr	r4, [pc, #12]	; (11f8c <get_rotation_interval_ms+0x64>)
	return rotation_interval;
   11f7e:	e7fb      	b.n	11f78 <get_rotation_interval_ms+0x50>
   11f80:	47aeb280 	.word	0x47aeb280
   11f84:	42700000 	.word	0x42700000
   11f88:	447a0000 	.word	0x447a0000
   11f8c:	437a0000 	.word	0x437a0000

00011f90 <get_melty_parameters>:
float get_battery_voltage(void) {
	float voltage = adc_multi_sample(BATTERY_ADC_READS, BATTERY_V_ADC_CHANNEL);
	return voltage * BATTERY_VOLTAGE_DIVIDER_RATIO;
}

static struct melty_parameters_t get_melty_parameters(void) {
   11f90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11f94:	4604      	mov	r4, r0

	float led_offset_portion = get_led_offset() / 100.0f;
   11f96:	f7ff ff71 	bl	11e7c <get_led_offset>
   11f9a:	f7ee fdc9 	bl	b30 <__aeabi_i2f>
   11f9e:	4931      	ldr	r1, [pc, #196]	; (12064 <get_melty_parameters+0xd4>)
   11fa0:	f7ee fece 	bl	d40 <__aeabi_fdiv>
   11fa4:	4681      	mov	r9, r0
	float motor_on_portion = get_throttle() / 100.0f;	
   11fa6:	f7ff ff63 	bl	11e70 <get_throttle>
   11faa:	f7ee fdc1 	bl	b30 <__aeabi_i2f>
   11fae:	492d      	ldr	r1, [pc, #180]	; (12064 <get_melty_parameters+0xd4>)
   11fb0:	f7ee fec6 	bl	d40 <__aeabi_fdiv>
   11fb4:	4606      	mov	r6, r0
	float led_on_portion = .4f * (1.1f - motor_on_portion);     //LED width changed with throttle
   11fb6:	4601      	mov	r1, r0
   11fb8:	482b      	ldr	r0, [pc, #172]	; (12068 <get_melty_parameters+0xd8>)
   11fba:	f7ee fd03 	bl	9c4 <__aeabi_fsub>
   11fbe:	492b      	ldr	r1, [pc, #172]	; (1206c <get_melty_parameters+0xdc>)
   11fc0:	f7ee fe0a 	bl	bd8 <__aeabi_fmul>
   11fc4:	4607      	mov	r7, r0

	struct melty_parameters_t melty_parameters;
	melty_parameters.rotation_interval_us = get_rotation_interval_ms() * 1000;
   11fc6:	f7ff ffaf 	bl	11f28 <get_rotation_interval_ms>
   11fca:	4929      	ldr	r1, [pc, #164]	; (12070 <get_melty_parameters+0xe0>)
   11fcc:	f7ee fe04 	bl	bd8 <__aeabi_fmul>
   11fd0:	f7ee ffee 	bl	fb0 <__aeabi_f2uiz>
   11fd4:	6020      	str	r0, [r4, #0]

	//if under defined RPM - just try to spin up
    if (melty_parameters.rotation_interval_us > MAX_TRANSLATION_ROTATION_INTERVAL_US) motor_on_portion = 1;
   11fd6:	f7ee fda7 	bl	b28 <__aeabi_ui2f>
   11fda:	4605      	mov	r5, r0
   11fdc:	4925      	ldr	r1, [pc, #148]	; (12074 <get_melty_parameters+0xe4>)
   11fde:	f7ee ffb7 	bl	f50 <__aeabi_fcmpgt>
   11fe2:	b108      	cbz	r0, 11fe8 <get_melty_parameters+0x58>
   11fe4:	f04f 567e 	mov.w	r6, #1065353216	; 0x3f800000

    //if we are too slow - don't even try to track heading
	if (melty_parameters.rotation_interval_us > MAX_TRACKING_ROTATION_INTERVAL_US) {
   11fe8:	4923      	ldr	r1, [pc, #140]	; (12078 <get_melty_parameters+0xe8>)
   11fea:	4628      	mov	r0, r5
   11fec:	f7ee ffb0 	bl	f50 <__aeabi_fcmpgt>
   11ff0:	b108      	cbz	r0, 11ff6 <get_melty_parameters+0x66>
        melty_parameters.rotation_interval_us = MAX_TRACKING_ROTATION_INTERVAL_US;
   11ff2:	4b22      	ldr	r3, [pc, #136]	; (1207c <get_melty_parameters+0xec>)
   11ff4:	6023      	str	r3, [r4, #0]
    }

	u_int32_t motor_on_us = motor_on_portion * melty_parameters.rotation_interval_us;
   11ff6:	6825      	ldr	r5, [r4, #0]
   11ff8:	4628      	mov	r0, r5
   11ffa:	f7ee fd95 	bl	b28 <__aeabi_ui2f>
   11ffe:	4680      	mov	r8, r0
   12000:	4631      	mov	r1, r6
   12002:	f7ee fde9 	bl	bd8 <__aeabi_fmul>
   12006:	f7ee ffd3 	bl	fb0 <__aeabi_f2uiz>
   1200a:	4606      	mov	r6, r0
	
    u_int32_t led_on_us = led_on_portion * melty_parameters.rotation_interval_us;
   1200c:	4639      	mov	r1, r7
   1200e:	4640      	mov	r0, r8
   12010:	f7ee fde2 	bl	bd8 <__aeabi_fmul>
   12014:	f7ee ffcc 	bl	fb0 <__aeabi_f2uiz>
   12018:	4607      	mov	r7, r0
	u_int32_t led_offset_us = led_offset_portion * melty_parameters.rotation_interval_us;
   1201a:	4649      	mov	r1, r9
   1201c:	4640      	mov	r0, r8
   1201e:	f7ee fddb 	bl	bd8 <__aeabi_fmul>
   12022:	f7ee ffc5 	bl	fb0 <__aeabi_f2uiz>
   12026:	4603      	mov	r3, r0

    //center LED on offset
	if (led_on_us / 2 <= led_offset_us) {
   12028:	0878      	lsrs	r0, r7, #1
   1202a:	ebb3 0f57 	cmp.w	r3, r7, lsr #1
   1202e:	d315      	bcc.n	1205c <get_melty_parameters+0xcc>
        melty_parameters.led_start = led_offset_us - (led_on_us / 2);
   12030:	1a1b      	subs	r3, r3, r0
   12032:	6063      	str	r3, [r4, #4]
    } else {
       melty_parameters.led_start =  (melty_parameters.rotation_interval_us + led_offset_us) - (led_on_us / 2); 
    }

 	melty_parameters.led_stop = melty_parameters.led_start + led_on_us;
   12034:	6860      	ldr	r0, [r4, #4]
   12036:	4407      	add	r7, r0
   12038:	60a7      	str	r7, [r4, #8]
	
	if (melty_parameters.led_stop > melty_parameters.rotation_interval_us)
   1203a:	42bd      	cmp	r5, r7
   1203c:	d201      	bcs.n	12042 <get_melty_parameters+0xb2>
		melty_parameters.led_stop = melty_parameters.led_stop - melty_parameters.rotation_interval_us;
   1203e:	1b7f      	subs	r7, r7, r5
   12040:	60a7      	str	r7, [r4, #8]

	melty_parameters.motor_start1 = (melty_parameters.rotation_interval_us - motor_on_us) / 2;
   12042:	1bab      	subs	r3, r5, r6
   12044:	085b      	lsrs	r3, r3, #1
   12046:	60e3      	str	r3, [r4, #12]
	melty_parameters.motor_stop1 = melty_parameters.motor_start1 + motor_on_us;
   12048:	4433      	add	r3, r6
   1204a:	6123      	str	r3, [r4, #16]

	melty_parameters.motor_start2 = melty_parameters.rotation_interval_us - (motor_on_us / 2);
   1204c:	0873      	lsrs	r3, r6, #1
   1204e:	eba5 0556 	sub.w	r5, r5, r6, lsr #1
   12052:	6165      	str	r5, [r4, #20]
	melty_parameters.motor_stop2 = motor_on_us / 2;
   12054:	61a3      	str	r3, [r4, #24]

	return melty_parameters;

}
   12056:	4620      	mov	r0, r4
   12058:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
       melty_parameters.led_start =  (melty_parameters.rotation_interval_us + led_offset_us) - (led_on_us / 2); 
   1205c:	442b      	add	r3, r5
   1205e:	1a1b      	subs	r3, r3, r0
   12060:	6063      	str	r3, [r4, #4]
   12062:	e7e7      	b.n	12034 <get_melty_parameters+0xa4>
   12064:	42c80000 	.word	0x42c80000
   12068:	3f8ccccd 	.word	0x3f8ccccd
   1206c:	3ecccccd 	.word	0x3ecccccd
   12070:	447a0000 	.word	0x447a0000
   12074:	486a6001 	.word	0x486a6001
   12078:	48ea6001 	.word	0x48ea6001
   1207c:	00075300 	.word	0x00075300

00012080 <init_melty>:
void init_melty(void){
   12080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	dev = DEVICE_DT_GET(DT_NODELABEL(gpio0));
   12082:	4b34      	ldr	r3, [pc, #208]	; (12154 <init_melty+0xd4>)
   12084:	4a34      	ldr	r2, [pc, #208]	; (12158 <init_melty+0xd8>)
   12086:	6013      	str	r3, [r2, #0]
	const struct gpio_driver_api *api =
   12088:	689d      	ldr	r5, [r3, #8]
	__unused const struct gpio_driver_config *const cfg =
   1208a:	685a      	ldr	r2, [r3, #4]
	struct gpio_driver_data *data =
   1208c:	691c      	ldr	r4, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1208e:	6813      	ldr	r3, [r2, #0]
   12090:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   12094:	d036      	beq.n	12104 <init_melty+0x84>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   12096:	6823      	ldr	r3, [r4, #0]
   12098:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   1209c:	6023      	str	r3, [r4, #0]
	return api->pin_configure(port, pin, flags);
   1209e:	682b      	ldr	r3, [r5, #0]
   120a0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   120a4:	210d      	movs	r1, #13
   120a6:	482b      	ldr	r0, [pc, #172]	; (12154 <init_melty+0xd4>)
   120a8:	4798      	blx	r3
	gpio_pin_configure(dev, MOTOR_PIN1, GPIO_OUTPUT); 
   120aa:	4b2b      	ldr	r3, [pc, #172]	; (12158 <init_melty+0xd8>)
   120ac:	681c      	ldr	r4, [r3, #0]
	const struct gpio_driver_api *api =
   120ae:	68a6      	ldr	r6, [r4, #8]
	__unused const struct gpio_driver_config *const cfg =
   120b0:	6863      	ldr	r3, [r4, #4]
	struct gpio_driver_data *data =
   120b2:	6925      	ldr	r5, [r4, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   120b4:	681b      	ldr	r3, [r3, #0]
   120b6:	f013 0f10 	tst.w	r3, #16
   120ba:	d030      	beq.n	1211e <init_melty+0x9e>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   120bc:	682b      	ldr	r3, [r5, #0]
   120be:	f023 0310 	bic.w	r3, r3, #16
   120c2:	602b      	str	r3, [r5, #0]
	return api->pin_configure(port, pin, flags);
   120c4:	6833      	ldr	r3, [r6, #0]
   120c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   120ca:	2104      	movs	r1, #4
   120cc:	4620      	mov	r0, r4
   120ce:	4798      	blx	r3
	gpio_pin_configure(dev, MOTOR_PIN2, GPIO_OUTPUT); 
   120d0:	4b21      	ldr	r3, [pc, #132]	; (12158 <init_melty+0xd8>)
   120d2:	681c      	ldr	r4, [r3, #0]
	const struct gpio_driver_api *api =
   120d4:	68a6      	ldr	r6, [r4, #8]
	__unused const struct gpio_driver_config *const cfg =
   120d6:	6863      	ldr	r3, [r4, #4]
	struct gpio_driver_data *data =
   120d8:	6925      	ldr	r5, [r4, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   120da:	681b      	ldr	r3, [r3, #0]
   120dc:	f013 0f08 	tst.w	r3, #8
   120e0:	d02a      	beq.n	12138 <init_melty+0xb8>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   120e2:	682b      	ldr	r3, [r5, #0]
   120e4:	f023 0308 	bic.w	r3, r3, #8
   120e8:	602b      	str	r3, [r5, #0]
	return api->pin_configure(port, pin, flags);
   120ea:	6833      	ldr	r3, [r6, #0]
   120ec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   120f0:	2103      	movs	r1, #3
   120f2:	4620      	mov	r0, r4
   120f4:	4798      	blx	r3
	zero_g_accel = adc_multi_sample(INIT_ADC_READS, ACCEL_ADC_CHANNEL);
   120f6:	2104      	movs	r1, #4
   120f8:	20c8      	movs	r0, #200	; 0xc8
   120fa:	f018 fc53 	bl	2a9a4 <adc_multi_sample>
   120fe:	4b17      	ldr	r3, [pc, #92]	; (1215c <init_melty+0xdc>)
   12100:	6018      	str	r0, [r3, #0]
}
   12102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   12104:	4e16      	ldr	r6, [pc, #88]	; (12160 <init_melty+0xe0>)
   12106:	f240 22da 	movw	r2, #730	; 0x2da
   1210a:	4631      	mov	r1, r6
   1210c:	4815      	ldr	r0, [pc, #84]	; (12164 <init_melty+0xe4>)
   1210e:	f018 ffbe 	bl	2b08e <assert_print>
   12112:	f240 21da 	movw	r1, #730	; 0x2da
   12116:	4630      	mov	r0, r6
   12118:	f018 ffb2 	bl	2b080 <assert_post_action>
   1211c:	e7bb      	b.n	12096 <init_melty+0x16>
   1211e:	4f10      	ldr	r7, [pc, #64]	; (12160 <init_melty+0xe0>)
   12120:	f240 22da 	movw	r2, #730	; 0x2da
   12124:	4639      	mov	r1, r7
   12126:	480f      	ldr	r0, [pc, #60]	; (12164 <init_melty+0xe4>)
   12128:	f018 ffb1 	bl	2b08e <assert_print>
   1212c:	f240 21da 	movw	r1, #730	; 0x2da
   12130:	4638      	mov	r0, r7
   12132:	f018 ffa5 	bl	2b080 <assert_post_action>
   12136:	e7c1      	b.n	120bc <init_melty+0x3c>
   12138:	4f09      	ldr	r7, [pc, #36]	; (12160 <init_melty+0xe0>)
   1213a:	f240 22da 	movw	r2, #730	; 0x2da
   1213e:	4639      	mov	r1, r7
   12140:	4808      	ldr	r0, [pc, #32]	; (12164 <init_melty+0xe4>)
   12142:	f018 ffa4 	bl	2b08e <assert_print>
   12146:	f240 21da 	movw	r1, #730	; 0x2da
   1214a:	4638      	mov	r0, r7
   1214c:	f018 ff98 	bl	2b080 <assert_post_action>
   12150:	e7c7      	b.n	120e2 <init_melty+0x62>
   12152:	bf00      	nop
   12154:	000310ac 	.word	0x000310ac
   12158:	20002070 	.word	0x20002070
   1215c:	20002078 	.word	0x20002078
   12160:	000318c4 	.word	0x000318c4
   12164:	000318f8 	.word	0x000318f8

00012168 <motors_safe>:
void motors_safe(void) {
   12168:	b570      	push	{r4, r5, r6, lr}
	gpio_pin_set(dev, MOTOR_PIN1, 0);
   1216a:	4b3b      	ldr	r3, [pc, #236]	; (12258 <motors_safe+0xf0>)
   1216c:	681c      	ldr	r4, [r3, #0]
	__unused const struct gpio_driver_config *const cfg =
   1216e:	6863      	ldr	r3, [r4, #4]
	const struct gpio_driver_data *const data =
   12170:	6925      	ldr	r5, [r4, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   12172:	681b      	ldr	r3, [r3, #0]
   12174:	f013 0f10 	tst.w	r3, #16
   12178:	d02a      	beq.n	121d0 <motors_safe+0x68>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1217a:	682b      	ldr	r3, [r5, #0]
   1217c:	f013 0f10 	tst.w	r3, #16
   12180:	d133      	bne.n	121ea <motors_safe+0x82>
   12182:	2500      	movs	r5, #0
	__unused const struct gpio_driver_config *const cfg =
   12184:	6863      	ldr	r3, [r4, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   12186:	681b      	ldr	r3, [r3, #0]
   12188:	f013 0f10 	tst.w	r3, #16
   1218c:	d02f      	beq.n	121ee <motors_safe+0x86>
	if (value != 0)	{
   1218e:	2d00      	cmp	r5, #0
   12190:	d03a      	beq.n	12208 <motors_safe+0xa0>
	const struct gpio_driver_api *api =
   12192:	68a3      	ldr	r3, [r4, #8]
	return api->port_set_bits_raw(port, pins);
   12194:	68db      	ldr	r3, [r3, #12]
   12196:	2110      	movs	r1, #16
   12198:	4620      	mov	r0, r4
   1219a:	4798      	blx	r3
	gpio_pin_set(dev, MOTOR_PIN2, 0);
   1219c:	4b2e      	ldr	r3, [pc, #184]	; (12258 <motors_safe+0xf0>)
   1219e:	681c      	ldr	r4, [r3, #0]
	__unused const struct gpio_driver_config *const cfg =
   121a0:	6863      	ldr	r3, [r4, #4]
	const struct gpio_driver_data *const data =
   121a2:	6925      	ldr	r5, [r4, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   121a4:	681b      	ldr	r3, [r3, #0]
   121a6:	f013 0f08 	tst.w	r3, #8
   121aa:	d033      	beq.n	12214 <motors_safe+0xac>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   121ac:	682b      	ldr	r3, [r5, #0]
   121ae:	f013 0f08 	tst.w	r3, #8
   121b2:	d13c      	bne.n	1222e <motors_safe+0xc6>
   121b4:	2500      	movs	r5, #0
	__unused const struct gpio_driver_config *const cfg =
   121b6:	6863      	ldr	r3, [r4, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   121b8:	681b      	ldr	r3, [r3, #0]
   121ba:	f013 0f08 	tst.w	r3, #8
   121be:	d038      	beq.n	12232 <motors_safe+0xca>
	if (value != 0)	{
   121c0:	2d00      	cmp	r5, #0
   121c2:	d043      	beq.n	1224c <motors_safe+0xe4>
	const struct gpio_driver_api *api =
   121c4:	68a3      	ldr	r3, [r4, #8]
	return api->port_set_bits_raw(port, pins);
   121c6:	68db      	ldr	r3, [r3, #12]
   121c8:	2108      	movs	r1, #8
   121ca:	4620      	mov	r0, r4
   121cc:	4798      	blx	r3
}
   121ce:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   121d0:	4e22      	ldr	r6, [pc, #136]	; (1225c <motors_safe+0xf4>)
   121d2:	f240 5225 	movw	r2, #1317	; 0x525
   121d6:	4631      	mov	r1, r6
   121d8:	4821      	ldr	r0, [pc, #132]	; (12260 <motors_safe+0xf8>)
   121da:	f018 ff58 	bl	2b08e <assert_print>
   121de:	f240 5125 	movw	r1, #1317	; 0x525
   121e2:	4630      	mov	r0, r6
   121e4:	f018 ff4c 	bl	2b080 <assert_post_action>
   121e8:	e7c7      	b.n	1217a <motors_safe+0x12>
		value = (value != 0) ? 0 : 1;
   121ea:	2501      	movs	r5, #1
   121ec:	e7ca      	b.n	12184 <motors_safe+0x1c>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   121ee:	4e1b      	ldr	r6, [pc, #108]	; (1225c <motors_safe+0xf4>)
   121f0:	f240 42fc 	movw	r2, #1276	; 0x4fc
   121f4:	4631      	mov	r1, r6
   121f6:	481a      	ldr	r0, [pc, #104]	; (12260 <motors_safe+0xf8>)
   121f8:	f018 ff49 	bl	2b08e <assert_print>
   121fc:	f240 41fc 	movw	r1, #1276	; 0x4fc
   12200:	4630      	mov	r0, r6
   12202:	f018 ff3d 	bl	2b080 <assert_post_action>
   12206:	e7c2      	b.n	1218e <motors_safe+0x26>
	const struct gpio_driver_api *api =
   12208:	68a3      	ldr	r3, [r4, #8]
	return api->port_clear_bits_raw(port, pins);
   1220a:	691b      	ldr	r3, [r3, #16]
   1220c:	2110      	movs	r1, #16
   1220e:	4620      	mov	r0, r4
   12210:	4798      	blx	r3
   12212:	e7c3      	b.n	1219c <motors_safe+0x34>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   12214:	4e11      	ldr	r6, [pc, #68]	; (1225c <motors_safe+0xf4>)
   12216:	f240 5225 	movw	r2, #1317	; 0x525
   1221a:	4631      	mov	r1, r6
   1221c:	4810      	ldr	r0, [pc, #64]	; (12260 <motors_safe+0xf8>)
   1221e:	f018 ff36 	bl	2b08e <assert_print>
   12222:	f240 5125 	movw	r1, #1317	; 0x525
   12226:	4630      	mov	r0, r6
   12228:	f018 ff2a 	bl	2b080 <assert_post_action>
   1222c:	e7be      	b.n	121ac <motors_safe+0x44>
		value = (value != 0) ? 0 : 1;
   1222e:	2501      	movs	r5, #1
   12230:	e7c1      	b.n	121b6 <motors_safe+0x4e>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   12232:	4e0a      	ldr	r6, [pc, #40]	; (1225c <motors_safe+0xf4>)
   12234:	f240 42fc 	movw	r2, #1276	; 0x4fc
   12238:	4631      	mov	r1, r6
   1223a:	4809      	ldr	r0, [pc, #36]	; (12260 <motors_safe+0xf8>)
   1223c:	f018 ff27 	bl	2b08e <assert_print>
   12240:	f240 41fc 	movw	r1, #1276	; 0x4fc
   12244:	4630      	mov	r0, r6
   12246:	f018 ff1b 	bl	2b080 <assert_post_action>
   1224a:	e7b9      	b.n	121c0 <motors_safe+0x58>
	const struct gpio_driver_api *api =
   1224c:	68a3      	ldr	r3, [r4, #8]
	return api->port_clear_bits_raw(port, pins);
   1224e:	691b      	ldr	r3, [r3, #16]
   12250:	2108      	movs	r1, #8
   12252:	4620      	mov	r0, r4
   12254:	4798      	blx	r3
   12256:	e7ba      	b.n	121ce <motors_safe+0x66>
   12258:	20002070 	.word	0x20002070
   1225c:	000318c4 	.word	0x000318c4
   12260:	000318f8 	.word	0x000318f8

00012264 <get_battery_voltage>:
float get_battery_voltage(void) {
   12264:	b508      	push	{r3, lr}
	float voltage = adc_multi_sample(BATTERY_ADC_READS, BATTERY_V_ADC_CHANNEL);
   12266:	2105      	movs	r1, #5
   12268:	2001      	movs	r0, #1
   1226a:	f018 fb9b 	bl	2a9a4 <adc_multi_sample>
	return voltage * BATTERY_VOLTAGE_DIVIDER_RATIO;
   1226e:	4902      	ldr	r1, [pc, #8]	; (12278 <get_battery_voltage+0x14>)
   12270:	f7ee fcb2 	bl	bd8 <__aeabi_fmul>
}
   12274:	bd08      	pop	{r3, pc}
   12276:	bf00      	nop
   12278:	41300000 	.word	0x41300000

0001227c <update_melty_stats>:

void update_melty_stats(int rotation_interval_ms, float battery_voltage) {
   1227c:	b500      	push	{lr}
   1227e:	b083      	sub	sp, #12
   12280:	460a      	mov	r2, r1
	u_int8_t melty_stats[3] = {0, 0, 0};
   12282:	4b0b      	ldr	r3, [pc, #44]	; (122b0 <update_melty_stats+0x34>)
   12284:	681b      	ldr	r3, [r3, #0]
   12286:	f8ad 3004 	strh.w	r3, [sp, #4]
   1228a:	0c1b      	lsrs	r3, r3, #16
   1228c:	f88d 3006 	strb.w	r3, [sp, #6]
	melty_stats[0] = rotation_interval_ms;
   12290:	f88d 0004 	strb.w	r0, [sp, #4]
	melty_stats[2] = battery_voltage * 10.0f;
   12294:	4907      	ldr	r1, [pc, #28]	; (122b4 <update_melty_stats+0x38>)
   12296:	4610      	mov	r0, r2
   12298:	f7ee fc9e 	bl	bd8 <__aeabi_fmul>
   1229c:	f7ee fe88 	bl	fb0 <__aeabi_f2uiz>
   122a0:	f88d 0006 	strb.w	r0, [sp, #6]
	bt_send_melty_stats(melty_stats);
   122a4:	a801      	add	r0, sp, #4
   122a6:	f7ff fdef 	bl	11e88 <bt_send_melty_stats>
}
   122aa:	b003      	add	sp, #12
   122ac:	f85d fb04 	ldr.w	pc, [sp], #4
   122b0:	000314e4 	.word	0x000314e4
   122b4:	41200000 	.word	0x41200000

000122b8 <do_melty>:

void do_melty(void){
   122b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   122bc:	b090      	sub	sp, #64	; 0x40
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   122be:	f01d fbf6 	bl	2faae <sys_clock_cycle_get_32>
   122c2:	4605      	mov	r5, r0

	/* capture initial time stamp */
	u_int32_t start_time;
	start_time = k_cycle_get_32();

	struct melty_parameters_t melty_parameters = get_melty_parameters();
   122c4:	a809      	add	r0, sp, #36	; 0x24
   122c6:	f7ff fe63 	bl	11f90 <get_melty_parameters>

	update_melty_stats(melty_parameters.rotation_interval_us / 1000, get_battery_voltage());
   122ca:	9c09      	ldr	r4, [sp, #36]	; 0x24
   122cc:	4ba5      	ldr	r3, [pc, #660]	; (12564 <do_melty+0x2ac>)
   122ce:	fba3 3404 	umull	r3, r4, r3, r4
   122d2:	09a4      	lsrs	r4, r4, #6
   122d4:	f7ff ffc6 	bl	12264 <get_battery_voltage>
   122d8:	4601      	mov	r1, r0
   122da:	4620      	mov	r0, r4
   122dc:	f7ff ffce 	bl	1227c <update_melty_stats>

	cycle_count++;
   122e0:	4aa1      	ldr	r2, [pc, #644]	; (12568 <do_melty+0x2b0>)
   122e2:	6813      	ldr	r3, [r2, #0]
   122e4:	3301      	adds	r3, #1
   122e6:	6013      	str	r3, [r2, #0]
	u_int32_t time_spent_this_rotation_us = 0;
   122e8:	2400      	movs	r4, #0

	while(time_spent_this_rotation_us < melty_parameters.rotation_interval_us) {
   122ea:	e1e8      	b.n	126be <do_melty+0x406>
        melty_parameters = get_melty_parameters();

		//assures BLE gets time to do it's thing
		k_sleep(K_USEC(sleep_time_us));

		if (get_translate_direction() == TRANSLATE_FORWARD || (get_translate_direction() == TRANSLATE_IDLE && cycle_count % 2 == 0)) {
   122ec:	f7ff fdba 	bl	11e64 <get_translate_direction>
   122f0:	2800      	cmp	r0, #0
   122f2:	f040 8247 	bne.w	12784 <do_melty+0x4cc>
   122f6:	4b9c      	ldr	r3, [pc, #624]	; (12568 <do_melty+0x2b0>)
   122f8:	681b      	ldr	r3, [r3, #0]
   122fa:	f013 0f01 	tst.w	r3, #1
   122fe:	f040 8241 	bne.w	12784 <do_melty+0x4cc>
   12302:	e1f7      	b.n	126f4 <do_melty+0x43c>
			if (time_spent_this_rotation_us >= melty_parameters.motor_start1 && 
				time_spent_this_rotation_us <= melty_parameters.motor_stop1) {
					gpio_pin_set(dev, MOTOR_PIN1, 1);
   12304:	4b99      	ldr	r3, [pc, #612]	; (1256c <do_melty+0x2b4>)
   12306:	681e      	ldr	r6, [r3, #0]
	__unused const struct gpio_driver_config *const cfg =
   12308:	6873      	ldr	r3, [r6, #4]
	const struct gpio_driver_data *const data =
   1230a:	6937      	ldr	r7, [r6, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1230c:	681b      	ldr	r3, [r3, #0]
   1230e:	f013 0f10 	tst.w	r3, #16
   12312:	d010      	beq.n	12336 <do_melty+0x7e>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   12314:	683b      	ldr	r3, [r7, #0]
   12316:	f013 0f10 	tst.w	r3, #16
   1231a:	d11a      	bne.n	12352 <do_melty+0x9a>
   1231c:	2701      	movs	r7, #1
	__unused const struct gpio_driver_config *const cfg =
   1231e:	6873      	ldr	r3, [r6, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   12320:	681b      	ldr	r3, [r3, #0]
   12322:	f013 0f10 	tst.w	r3, #16
   12326:	d016      	beq.n	12356 <do_melty+0x9e>
	if (value != 0)	{
   12328:	b31f      	cbz	r7, 12372 <do_melty+0xba>
	const struct gpio_driver_api *api =
   1232a:	68b3      	ldr	r3, [r6, #8]
	return api->port_set_bits_raw(port, pins);
   1232c:	68db      	ldr	r3, [r3, #12]
   1232e:	2110      	movs	r1, #16
   12330:	4630      	mov	r0, r6
   12332:	4798      	blx	r3
   12334:	e202      	b.n	1273c <do_melty+0x484>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   12336:	f8df 8238 	ldr.w	r8, [pc, #568]	; 12570 <do_melty+0x2b8>
   1233a:	f240 5225 	movw	r2, #1317	; 0x525
   1233e:	4641      	mov	r1, r8
   12340:	488c      	ldr	r0, [pc, #560]	; (12574 <do_melty+0x2bc>)
   12342:	f018 fea4 	bl	2b08e <assert_print>
   12346:	f240 5125 	movw	r1, #1317	; 0x525
   1234a:	4640      	mov	r0, r8
   1234c:	f018 fe98 	bl	2b080 <assert_post_action>
   12350:	e7e0      	b.n	12314 <do_melty+0x5c>
		value = (value != 0) ? 0 : 1;
   12352:	2700      	movs	r7, #0
   12354:	e7e3      	b.n	1231e <do_melty+0x66>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   12356:	f8df 8218 	ldr.w	r8, [pc, #536]	; 12570 <do_melty+0x2b8>
   1235a:	f240 42fc 	movw	r2, #1276	; 0x4fc
   1235e:	4641      	mov	r1, r8
   12360:	4884      	ldr	r0, [pc, #528]	; (12574 <do_melty+0x2bc>)
   12362:	f018 fe94 	bl	2b08e <assert_print>
   12366:	f240 41fc 	movw	r1, #1276	; 0x4fc
   1236a:	4640      	mov	r0, r8
   1236c:	f018 fe88 	bl	2b080 <assert_post_action>
   12370:	e7da      	b.n	12328 <do_melty+0x70>
	const struct gpio_driver_api *api =
   12372:	68b3      	ldr	r3, [r6, #8]
	return api->port_clear_bits_raw(port, pins);
   12374:	691b      	ldr	r3, [r3, #16]
   12376:	2110      	movs	r1, #16
   12378:	4630      	mov	r0, r6
   1237a:	4798      	blx	r3
	return gpio_pin_set_raw(port, pin, value);
   1237c:	e1de      	b.n	1273c <do_melty+0x484>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1237e:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 12570 <do_melty+0x2b8>
   12382:	f240 5225 	movw	r2, #1317	; 0x525
   12386:	4641      	mov	r1, r8
   12388:	487a      	ldr	r0, [pc, #488]	; (12574 <do_melty+0x2bc>)
   1238a:	f018 fe80 	bl	2b08e <assert_print>
   1238e:	f240 5125 	movw	r1, #1317	; 0x525
   12392:	4640      	mov	r0, r8
   12394:	f018 fe74 	bl	2b080 <assert_post_action>
   12398:	e1bc      	b.n	12714 <do_melty+0x45c>
		value = (value != 0) ? 0 : 1;
   1239a:	2701      	movs	r7, #1
   1239c:	e1c0      	b.n	12720 <do_melty+0x468>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1239e:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 12570 <do_melty+0x2b8>
   123a2:	f240 42fc 	movw	r2, #1276	; 0x4fc
   123a6:	4641      	mov	r1, r8
   123a8:	4872      	ldr	r0, [pc, #456]	; (12574 <do_melty+0x2bc>)
   123aa:	f018 fe70 	bl	2b08e <assert_print>
   123ae:	f240 41fc 	movw	r1, #1276	; 0x4fc
   123b2:	4640      	mov	r0, r8
   123b4:	f018 fe64 	bl	2b080 <assert_post_action>
   123b8:	e1b8      	b.n	1272c <do_melty+0x474>
	const struct gpio_driver_api *api =
   123ba:	68b3      	ldr	r3, [r6, #8]
	return api->port_clear_bits_raw(port, pins);
   123bc:	691b      	ldr	r3, [r3, #16]
   123be:	2110      	movs	r1, #16
   123c0:	4630      	mov	r0, r6
   123c2:	4798      	blx	r3
	return gpio_pin_set_raw(port, pin, value);
   123c4:	e1ba      	b.n	1273c <do_melty+0x484>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   123c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 12570 <do_melty+0x2b8>
   123ca:	f240 5225 	movw	r2, #1317	; 0x525
   123ce:	4641      	mov	r1, r8
   123d0:	4868      	ldr	r0, [pc, #416]	; (12574 <do_melty+0x2bc>)
   123d2:	f018 fe5c 	bl	2b08e <assert_print>
   123d6:	f240 5125 	movw	r1, #1317	; 0x525
   123da:	4640      	mov	r0, r8
   123dc:	f018 fe50 	bl	2b080 <assert_post_action>
   123e0:	e1bc      	b.n	1275c <do_melty+0x4a4>
		value = (value != 0) ? 0 : 1;
   123e2:	2700      	movs	r7, #0
   123e4:	e1c0      	b.n	12768 <do_melty+0x4b0>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   123e6:	f8df 8188 	ldr.w	r8, [pc, #392]	; 12570 <do_melty+0x2b8>
   123ea:	f240 42fc 	movw	r2, #1276	; 0x4fc
   123ee:	4641      	mov	r1, r8
   123f0:	4860      	ldr	r0, [pc, #384]	; (12574 <do_melty+0x2bc>)
   123f2:	f018 fe4c 	bl	2b08e <assert_print>
   123f6:	f240 41fc 	movw	r1, #1276	; 0x4fc
   123fa:	4640      	mov	r0, r8
   123fc:	f018 fe40 	bl	2b080 <assert_post_action>
   12400:	e1b8      	b.n	12774 <do_melty+0x4bc>
	const struct gpio_driver_api *api =
   12402:	68b3      	ldr	r3, [r6, #8]
	return api->port_clear_bits_raw(port, pins);
   12404:	691b      	ldr	r3, [r3, #16]
   12406:	2108      	movs	r1, #8
   12408:	4630      	mov	r0, r6
   1240a:	4798      	blx	r3
	return gpio_pin_set_raw(port, pin, value);
   1240c:	e1ba      	b.n	12784 <do_melty+0x4cc>

			if (time_spent_this_rotation_us >= melty_parameters.motor_start2 || 
				time_spent_this_rotation_us <= melty_parameters.motor_stop2) {
					gpio_pin_set(dev, MOTOR_PIN2, 1);
			} else {
					gpio_pin_set(dev, MOTOR_PIN2, 0);
   1240e:	4b57      	ldr	r3, [pc, #348]	; (1256c <do_melty+0x2b4>)
   12410:	681e      	ldr	r6, [r3, #0]
	__unused const struct gpio_driver_config *const cfg =
   12412:	6873      	ldr	r3, [r6, #4]
	const struct gpio_driver_data *const data =
   12414:	6937      	ldr	r7, [r6, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   12416:	681b      	ldr	r3, [r3, #0]
   12418:	f013 0f08 	tst.w	r3, #8
   1241c:	d010      	beq.n	12440 <do_melty+0x188>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1241e:	683b      	ldr	r3, [r7, #0]
   12420:	f013 0f08 	tst.w	r3, #8
   12424:	d11a      	bne.n	1245c <do_melty+0x1a4>
   12426:	2700      	movs	r7, #0
	__unused const struct gpio_driver_config *const cfg =
   12428:	6873      	ldr	r3, [r6, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1242a:	681b      	ldr	r3, [r3, #0]
   1242c:	f013 0f08 	tst.w	r3, #8
   12430:	d016      	beq.n	12460 <do_melty+0x1a8>
	if (value != 0)	{
   12432:	b31f      	cbz	r7, 1247c <do_melty+0x1c4>
	const struct gpio_driver_api *api =
   12434:	68b3      	ldr	r3, [r6, #8]
	return api->port_set_bits_raw(port, pins);
   12436:	68db      	ldr	r3, [r3, #12]
   12438:	2108      	movs	r1, #8
   1243a:	4630      	mov	r0, r6
   1243c:	4798      	blx	r3
   1243e:	e1a1      	b.n	12784 <do_melty+0x4cc>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   12440:	f8df 812c 	ldr.w	r8, [pc, #300]	; 12570 <do_melty+0x2b8>
   12444:	f240 5225 	movw	r2, #1317	; 0x525
   12448:	4641      	mov	r1, r8
   1244a:	484a      	ldr	r0, [pc, #296]	; (12574 <do_melty+0x2bc>)
   1244c:	f018 fe1f 	bl	2b08e <assert_print>
   12450:	f240 5125 	movw	r1, #1317	; 0x525
   12454:	4640      	mov	r0, r8
   12456:	f018 fe13 	bl	2b080 <assert_post_action>
   1245a:	e7e0      	b.n	1241e <do_melty+0x166>
		value = (value != 0) ? 0 : 1;
   1245c:	2701      	movs	r7, #1
   1245e:	e7e3      	b.n	12428 <do_melty+0x170>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   12460:	f8df 810c 	ldr.w	r8, [pc, #268]	; 12570 <do_melty+0x2b8>
   12464:	f240 42fc 	movw	r2, #1276	; 0x4fc
   12468:	4641      	mov	r1, r8
   1246a:	4842      	ldr	r0, [pc, #264]	; (12574 <do_melty+0x2bc>)
   1246c:	f018 fe0f 	bl	2b08e <assert_print>
   12470:	f240 41fc 	movw	r1, #1276	; 0x4fc
   12474:	4640      	mov	r0, r8
   12476:	f018 fe03 	bl	2b080 <assert_post_action>
   1247a:	e7da      	b.n	12432 <do_melty+0x17a>
	const struct gpio_driver_api *api =
   1247c:	68b3      	ldr	r3, [r6, #8]
	return api->port_clear_bits_raw(port, pins);
   1247e:	691b      	ldr	r3, [r3, #16]
   12480:	2108      	movs	r1, #8
   12482:	4630      	mov	r0, r6
   12484:	4798      	blx	r3
	return gpio_pin_set_raw(port, pin, value);
   12486:	e17d      	b.n	12784 <do_melty+0x4cc>
			}

		}

		if (get_translate_direction() == TRANSLATE_REVERSE || (get_translate_direction() == TRANSLATE_IDLE && cycle_count %2 == 1)) {
   12488:	f7ff fcec 	bl	11e64 <get_translate_direction>
   1248c:	2800      	cmp	r0, #0
   1248e:	f040 81c6 	bne.w	1281e <do_melty+0x566>
   12492:	4b35      	ldr	r3, [pc, #212]	; (12568 <do_melty+0x2b0>)
   12494:	681b      	ldr	r3, [r3, #0]
   12496:	f013 0f01 	tst.w	r3, #1
   1249a:	f000 81c0 	beq.w	1281e <do_melty+0x566>
   1249e:	e176      	b.n	1278e <do_melty+0x4d6>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   124a0:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 12570 <do_melty+0x2b8>
   124a4:	f240 5225 	movw	r2, #1317	; 0x525
   124a8:	4641      	mov	r1, r8
   124aa:	4832      	ldr	r0, [pc, #200]	; (12574 <do_melty+0x2bc>)
   124ac:	f018 fdef 	bl	2b08e <assert_print>
   124b0:	f240 5125 	movw	r1, #1317	; 0x525
   124b4:	4640      	mov	r0, r8
   124b6:	f018 fde3 	bl	2b080 <assert_post_action>
   124ba:	e178      	b.n	127ae <do_melty+0x4f6>
		value = (value != 0) ? 0 : 1;
   124bc:	2700      	movs	r7, #0
   124be:	e17c      	b.n	127ba <do_melty+0x502>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   124c0:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 12570 <do_melty+0x2b8>
   124c4:	f240 42fc 	movw	r2, #1276	; 0x4fc
   124c8:	4641      	mov	r1, r8
   124ca:	482a      	ldr	r0, [pc, #168]	; (12574 <do_melty+0x2bc>)
   124cc:	f018 fddf 	bl	2b08e <assert_print>
   124d0:	f240 41fc 	movw	r1, #1276	; 0x4fc
   124d4:	4640      	mov	r0, r8
   124d6:	f018 fdd3 	bl	2b080 <assert_post_action>
   124da:	e174      	b.n	127c6 <do_melty+0x50e>
	const struct gpio_driver_api *api =
   124dc:	68b3      	ldr	r3, [r6, #8]
	return api->port_clear_bits_raw(port, pins);
   124de:	691b      	ldr	r3, [r3, #16]
   124e0:	2110      	movs	r1, #16
   124e2:	4630      	mov	r0, r6
   124e4:	4798      	blx	r3
	return gpio_pin_set_raw(port, pin, value);
   124e6:	e176      	b.n	127d6 <do_melty+0x51e>
			if (time_spent_this_rotation_us >= melty_parameters.motor_start2 || 
				time_spent_this_rotation_us <= melty_parameters.motor_stop2) {
					gpio_pin_set(dev, MOTOR_PIN1, 1);
			} else {
					gpio_pin_set(dev, MOTOR_PIN1, 0);
   124e8:	4b20      	ldr	r3, [pc, #128]	; (1256c <do_melty+0x2b4>)
   124ea:	681e      	ldr	r6, [r3, #0]
	__unused const struct gpio_driver_config *const cfg =
   124ec:	6873      	ldr	r3, [r6, #4]
	const struct gpio_driver_data *const data =
   124ee:	6937      	ldr	r7, [r6, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   124f0:	681b      	ldr	r3, [r3, #0]
   124f2:	f013 0f10 	tst.w	r3, #16
   124f6:	d010      	beq.n	1251a <do_melty+0x262>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   124f8:	683b      	ldr	r3, [r7, #0]
   124fa:	f013 0f10 	tst.w	r3, #16
   124fe:	d11a      	bne.n	12536 <do_melty+0x27e>
   12500:	2700      	movs	r7, #0
	__unused const struct gpio_driver_config *const cfg =
   12502:	6873      	ldr	r3, [r6, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   12504:	681b      	ldr	r3, [r3, #0]
   12506:	f013 0f10 	tst.w	r3, #16
   1250a:	d016      	beq.n	1253a <do_melty+0x282>
	if (value != 0)	{
   1250c:	b31f      	cbz	r7, 12556 <do_melty+0x29e>
	const struct gpio_driver_api *api =
   1250e:	68b3      	ldr	r3, [r6, #8]
	return api->port_set_bits_raw(port, pins);
   12510:	68db      	ldr	r3, [r3, #12]
   12512:	2110      	movs	r1, #16
   12514:	4630      	mov	r0, r6
   12516:	4798      	blx	r3
   12518:	e15d      	b.n	127d6 <do_melty+0x51e>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1251a:	f8df 8054 	ldr.w	r8, [pc, #84]	; 12570 <do_melty+0x2b8>
   1251e:	f240 5225 	movw	r2, #1317	; 0x525
   12522:	4641      	mov	r1, r8
   12524:	4813      	ldr	r0, [pc, #76]	; (12574 <do_melty+0x2bc>)
   12526:	f018 fdb2 	bl	2b08e <assert_print>
   1252a:	f240 5125 	movw	r1, #1317	; 0x525
   1252e:	4640      	mov	r0, r8
   12530:	f018 fda6 	bl	2b080 <assert_post_action>
   12534:	e7e0      	b.n	124f8 <do_melty+0x240>
		value = (value != 0) ? 0 : 1;
   12536:	2701      	movs	r7, #1
   12538:	e7e3      	b.n	12502 <do_melty+0x24a>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1253a:	f8df 8034 	ldr.w	r8, [pc, #52]	; 12570 <do_melty+0x2b8>
   1253e:	f240 42fc 	movw	r2, #1276	; 0x4fc
   12542:	4641      	mov	r1, r8
   12544:	480b      	ldr	r0, [pc, #44]	; (12574 <do_melty+0x2bc>)
   12546:	f018 fda2 	bl	2b08e <assert_print>
   1254a:	f240 41fc 	movw	r1, #1276	; 0x4fc
   1254e:	4640      	mov	r0, r8
   12550:	f018 fd96 	bl	2b080 <assert_post_action>
   12554:	e7da      	b.n	1250c <do_melty+0x254>
	const struct gpio_driver_api *api =
   12556:	68b3      	ldr	r3, [r6, #8]
	return api->port_clear_bits_raw(port, pins);
   12558:	691b      	ldr	r3, [r3, #16]
   1255a:	2110      	movs	r1, #16
   1255c:	4630      	mov	r0, r6
   1255e:	4798      	blx	r3
	return gpio_pin_set_raw(port, pin, value);
   12560:	e139      	b.n	127d6 <do_melty+0x51e>
   12562:	bf00      	nop
   12564:	10624dd3 	.word	0x10624dd3
   12568:	2000206c 	.word	0x2000206c
   1256c:	20002070 	.word	0x20002070
   12570:	000318c4 	.word	0x000318c4
   12574:	000318f8 	.word	0x000318f8
			}

		if (time_spent_this_rotation_us >= melty_parameters.motor_start1 && 
				time_spent_this_rotation_us <= melty_parameters.motor_stop1) {
					gpio_pin_set(dev, MOTOR_PIN2, 1);
   12578:	4b3f      	ldr	r3, [pc, #252]	; (12678 <do_melty+0x3c0>)
   1257a:	681e      	ldr	r6, [r3, #0]
	__unused const struct gpio_driver_config *const cfg =
   1257c:	6873      	ldr	r3, [r6, #4]
	const struct gpio_driver_data *const data =
   1257e:	6937      	ldr	r7, [r6, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   12580:	681b      	ldr	r3, [r3, #0]
   12582:	f013 0f08 	tst.w	r3, #8
   12586:	d010      	beq.n	125aa <do_melty+0x2f2>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   12588:	683b      	ldr	r3, [r7, #0]
   1258a:	f013 0f08 	tst.w	r3, #8
   1258e:	d11a      	bne.n	125c6 <do_melty+0x30e>
   12590:	2701      	movs	r7, #1
	__unused const struct gpio_driver_config *const cfg =
   12592:	6873      	ldr	r3, [r6, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   12594:	681b      	ldr	r3, [r3, #0]
   12596:	f013 0f08 	tst.w	r3, #8
   1259a:	d016      	beq.n	125ca <do_melty+0x312>
	if (value != 0)	{
   1259c:	b31f      	cbz	r7, 125e6 <do_melty+0x32e>
	const struct gpio_driver_api *api =
   1259e:	68b3      	ldr	r3, [r6, #8]
	return api->port_set_bits_raw(port, pins);
   125a0:	68db      	ldr	r3, [r3, #12]
   125a2:	2108      	movs	r1, #8
   125a4:	4630      	mov	r0, r6
   125a6:	4798      	blx	r3
   125a8:	e139      	b.n	1281e <do_melty+0x566>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   125aa:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 1267c <do_melty+0x3c4>
   125ae:	f240 5225 	movw	r2, #1317	; 0x525
   125b2:	4641      	mov	r1, r8
   125b4:	4832      	ldr	r0, [pc, #200]	; (12680 <do_melty+0x3c8>)
   125b6:	f018 fd6a 	bl	2b08e <assert_print>
   125ba:	f240 5125 	movw	r1, #1317	; 0x525
   125be:	4640      	mov	r0, r8
   125c0:	f018 fd5e 	bl	2b080 <assert_post_action>
   125c4:	e7e0      	b.n	12588 <do_melty+0x2d0>
		value = (value != 0) ? 0 : 1;
   125c6:	2700      	movs	r7, #0
   125c8:	e7e3      	b.n	12592 <do_melty+0x2da>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   125ca:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 1267c <do_melty+0x3c4>
   125ce:	f240 42fc 	movw	r2, #1276	; 0x4fc
   125d2:	4641      	mov	r1, r8
   125d4:	482a      	ldr	r0, [pc, #168]	; (12680 <do_melty+0x3c8>)
   125d6:	f018 fd5a 	bl	2b08e <assert_print>
   125da:	f240 41fc 	movw	r1, #1276	; 0x4fc
   125de:	4640      	mov	r0, r8
   125e0:	f018 fd4e 	bl	2b080 <assert_post_action>
   125e4:	e7da      	b.n	1259c <do_melty+0x2e4>
	const struct gpio_driver_api *api =
   125e6:	68b3      	ldr	r3, [r6, #8]
	return api->port_clear_bits_raw(port, pins);
   125e8:	691b      	ldr	r3, [r3, #16]
   125ea:	2108      	movs	r1, #8
   125ec:	4630      	mov	r0, r6
   125ee:	4798      	blx	r3
	return gpio_pin_set_raw(port, pin, value);
   125f0:	e115      	b.n	1281e <do_melty+0x566>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   125f2:	f8df 8088 	ldr.w	r8, [pc, #136]	; 1267c <do_melty+0x3c4>
   125f6:	f240 5225 	movw	r2, #1317	; 0x525
   125fa:	4641      	mov	r1, r8
   125fc:	4820      	ldr	r0, [pc, #128]	; (12680 <do_melty+0x3c8>)
   125fe:	f018 fd46 	bl	2b08e <assert_print>
   12602:	f240 5125 	movw	r1, #1317	; 0x525
   12606:	4640      	mov	r0, r8
   12608:	f018 fd3a 	bl	2b080 <assert_post_action>
   1260c:	e0f3      	b.n	127f6 <do_melty+0x53e>
		value = (value != 0) ? 0 : 1;
   1260e:	2701      	movs	r7, #1
   12610:	e0f7      	b.n	12802 <do_melty+0x54a>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   12612:	f8df 8068 	ldr.w	r8, [pc, #104]	; 1267c <do_melty+0x3c4>
   12616:	f240 42fc 	movw	r2, #1276	; 0x4fc
   1261a:	4641      	mov	r1, r8
   1261c:	4818      	ldr	r0, [pc, #96]	; (12680 <do_melty+0x3c8>)
   1261e:	f018 fd36 	bl	2b08e <assert_print>
   12622:	f240 41fc 	movw	r1, #1276	; 0x4fc
   12626:	4640      	mov	r0, r8
   12628:	f018 fd2a 	bl	2b080 <assert_post_action>
   1262c:	e0ef      	b.n	1280e <do_melty+0x556>
	const struct gpio_driver_api *api =
   1262e:	68b3      	ldr	r3, [r6, #8]
	return api->port_clear_bits_raw(port, pins);
   12630:	691b      	ldr	r3, [r3, #16]
   12632:	2108      	movs	r1, #8
   12634:	4630      	mov	r0, r6
   12636:	4798      	blx	r3
	return gpio_pin_set_raw(port, pin, value);
   12638:	e0f1      	b.n	1281e <do_melty+0x566>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1263a:	f8df 8040 	ldr.w	r8, [pc, #64]	; 1267c <do_melty+0x3c4>
   1263e:	f240 5225 	movw	r2, #1317	; 0x525
   12642:	4641      	mov	r1, r8
   12644:	480e      	ldr	r0, [pc, #56]	; (12680 <do_melty+0x3c8>)
   12646:	f018 fd22 	bl	2b08e <assert_print>
   1264a:	f240 5125 	movw	r1, #1317	; 0x525
   1264e:	4640      	mov	r0, r8
   12650:	f018 fd16 	bl	2b080 <assert_post_action>
   12654:	e0f4      	b.n	12840 <do_melty+0x588>
		value = (value != 0) ? 0 : 1;
   12656:	2700      	movs	r7, #0
   12658:	e0f8      	b.n	1284c <do_melty+0x594>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1265a:	f8df 8020 	ldr.w	r8, [pc, #32]	; 1267c <do_melty+0x3c4>
   1265e:	f240 42fc 	movw	r2, #1276	; 0x4fc
   12662:	4641      	mov	r1, r8
   12664:	4806      	ldr	r0, [pc, #24]	; (12680 <do_melty+0x3c8>)
   12666:	f018 fd12 	bl	2b08e <assert_print>
   1266a:	f240 41fc 	movw	r1, #1276	; 0x4fc
   1266e:	4640      	mov	r0, r8
   12670:	f018 fd06 	bl	2b080 <assert_post_action>
   12674:	e0f0      	b.n	12858 <do_melty+0x5a0>
   12676:	bf00      	nop
   12678:	20002070 	.word	0x20002070
   1267c:	000318c4 	.word	0x000318c4
   12680:	000318f8 	.word	0x000318f8
	const struct gpio_driver_api *api =
   12684:	68b3      	ldr	r3, [r6, #8]
	return api->port_clear_bits_raw(port, pins);
   12686:	691b      	ldr	r3, [r3, #16]
   12688:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   1268c:	4630      	mov	r0, r6
   1268e:	4798      	blx	r3
   12690:	f01d fa0d 	bl	2faae <sys_clock_cycle_get_32>
		}
		
		/* capture final time stamp */
		stop_time = k_cycle_get_32();

		cycles_spent = stop_time - start_time;
   12694:	1b43      	subs	r3, r0, r5
		} else {
			/* Slower algorithm but input is first divided before being multiplied
			 * which prevents overflow of intermediate value.
			 */
			return (t / from_hz) * to_hz + ((t % from_hz) * to_hz + off) / from_hz;
   12696:	0bda      	lsrs	r2, r3, #15
   12698:	48a3      	ldr	r0, [pc, #652]	; (12928 <do_melty+0x670>)
   1269a:	fba2 2100 	umull	r2, r1, r2, r0
   1269e:	f3c3 030e 	ubfx	r3, r3, #0, #15
   126a2:	fba3 3000 	umull	r3, r0, r3, r0
   126a6:	0bdb      	lsrs	r3, r3, #15
   126a8:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
   126ac:	18d2      	adds	r2, r2, r3
		if (cycles_spent < 0) cycles_spent = cycles_spent + UINT32_MAX;
		time_spent_this_rotation_us += SYS_CLOCK_HW_CYCLES_TO_NS_AVG(cycles_spent, 1) / 1000;
   126ae:	4b9f      	ldr	r3, [pc, #636]	; (1292c <do_melty+0x674>)
   126b0:	fba3 3202 	umull	r3, r2, r3, r2
   126b4:	eb04 1492 	add.w	r4, r4, r2, lsr #6
   126b8:	f01d f9f9 	bl	2faae <sys_clock_cycle_get_32>
   126bc:	4605      	mov	r5, r0
	while(time_spent_this_rotation_us < melty_parameters.rotation_interval_us) {
   126be:	9b09      	ldr	r3, [sp, #36]	; 0x24
   126c0:	42a3      	cmp	r3, r4
   126c2:	f240 819f 	bls.w	12a04 <do_melty+0x74c>
        melty_parameters = get_melty_parameters();
   126c6:	4668      	mov	r0, sp
   126c8:	f7ff fc62 	bl	11f90 <get_melty_parameters>
   126cc:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
   126d0:	46ec      	mov	ip, sp
   126d2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   126d6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   126da:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
   126de:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
	return z_impl_k_sleep(timeout);
   126e2:	2001      	movs	r0, #1
   126e4:	2100      	movs	r1, #0
   126e6:	f015 ff3b 	bl	28560 <z_impl_k_sleep>
		if (get_translate_direction() == TRANSLATE_FORWARD || (get_translate_direction() == TRANSLATE_IDLE && cycle_count % 2 == 0)) {
   126ea:	f7ff fbbb 	bl	11e64 <get_translate_direction>
   126ee:	2801      	cmp	r0, #1
   126f0:	f47f adfc 	bne.w	122ec <do_melty+0x34>
			if (time_spent_this_rotation_us >= melty_parameters.motor_start1 && 
   126f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   126f6:	42a3      	cmp	r3, r4
   126f8:	d803      	bhi.n	12702 <do_melty+0x44a>
				time_spent_this_rotation_us <= melty_parameters.motor_stop1) {
   126fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
			if (time_spent_this_rotation_us >= melty_parameters.motor_start1 && 
   126fc:	42a3      	cmp	r3, r4
   126fe:	f4bf ae01 	bcs.w	12304 <do_melty+0x4c>
					gpio_pin_set(dev, MOTOR_PIN1, 0);
   12702:	4b8b      	ldr	r3, [pc, #556]	; (12930 <do_melty+0x678>)
   12704:	681e      	ldr	r6, [r3, #0]
	__unused const struct gpio_driver_config *const cfg =
   12706:	6873      	ldr	r3, [r6, #4]
	const struct gpio_driver_data *const data =
   12708:	6937      	ldr	r7, [r6, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1270a:	681b      	ldr	r3, [r3, #0]
   1270c:	f013 0f10 	tst.w	r3, #16
   12710:	f43f ae35 	beq.w	1237e <do_melty+0xc6>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   12714:	683b      	ldr	r3, [r7, #0]
   12716:	f013 0f10 	tst.w	r3, #16
   1271a:	f47f ae3e 	bne.w	1239a <do_melty+0xe2>
   1271e:	2700      	movs	r7, #0
	__unused const struct gpio_driver_config *const cfg =
   12720:	6873      	ldr	r3, [r6, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   12722:	681b      	ldr	r3, [r3, #0]
   12724:	f013 0f10 	tst.w	r3, #16
   12728:	f43f ae39 	beq.w	1239e <do_melty+0xe6>
	if (value != 0)	{
   1272c:	2f00      	cmp	r7, #0
   1272e:	f43f ae44 	beq.w	123ba <do_melty+0x102>
	const struct gpio_driver_api *api =
   12732:	68b3      	ldr	r3, [r6, #8]
	return api->port_set_bits_raw(port, pins);
   12734:	68db      	ldr	r3, [r3, #12]
   12736:	2110      	movs	r1, #16
   12738:	4630      	mov	r0, r6
   1273a:	4798      	blx	r3
			if (time_spent_this_rotation_us >= melty_parameters.motor_start2 || 
   1273c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1273e:	42a3      	cmp	r3, r4
   12740:	d903      	bls.n	1274a <do_melty+0x492>
				time_spent_this_rotation_us <= melty_parameters.motor_stop2) {
   12742:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
			if (time_spent_this_rotation_us >= melty_parameters.motor_start2 || 
   12744:	42a3      	cmp	r3, r4
   12746:	f4ff ae62 	bcc.w	1240e <do_melty+0x156>
					gpio_pin_set(dev, MOTOR_PIN2, 1);
   1274a:	4b79      	ldr	r3, [pc, #484]	; (12930 <do_melty+0x678>)
   1274c:	681e      	ldr	r6, [r3, #0]
	__unused const struct gpio_driver_config *const cfg =
   1274e:	6873      	ldr	r3, [r6, #4]
	const struct gpio_driver_data *const data =
   12750:	6937      	ldr	r7, [r6, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   12752:	681b      	ldr	r3, [r3, #0]
   12754:	f013 0f08 	tst.w	r3, #8
   12758:	f43f ae35 	beq.w	123c6 <do_melty+0x10e>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1275c:	683b      	ldr	r3, [r7, #0]
   1275e:	f013 0f08 	tst.w	r3, #8
   12762:	f47f ae3e 	bne.w	123e2 <do_melty+0x12a>
   12766:	2701      	movs	r7, #1
	__unused const struct gpio_driver_config *const cfg =
   12768:	6873      	ldr	r3, [r6, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1276a:	681b      	ldr	r3, [r3, #0]
   1276c:	f013 0f08 	tst.w	r3, #8
   12770:	f43f ae39 	beq.w	123e6 <do_melty+0x12e>
	if (value != 0)	{
   12774:	2f00      	cmp	r7, #0
   12776:	f43f ae44 	beq.w	12402 <do_melty+0x14a>
	const struct gpio_driver_api *api =
   1277a:	68b3      	ldr	r3, [r6, #8]
	return api->port_set_bits_raw(port, pins);
   1277c:	68db      	ldr	r3, [r3, #12]
   1277e:	2108      	movs	r1, #8
   12780:	4630      	mov	r0, r6
   12782:	4798      	blx	r3
		if (get_translate_direction() == TRANSLATE_REVERSE || (get_translate_direction() == TRANSLATE_IDLE && cycle_count %2 == 1)) {
   12784:	f7ff fb6e 	bl	11e64 <get_translate_direction>
   12788:	2802      	cmp	r0, #2
   1278a:	f47f ae7d 	bne.w	12488 <do_melty+0x1d0>
			if (time_spent_this_rotation_us >= melty_parameters.motor_start2 || 
   1278e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   12790:	42a3      	cmp	r3, r4
   12792:	d903      	bls.n	1279c <do_melty+0x4e4>
				time_spent_this_rotation_us <= melty_parameters.motor_stop2) {
   12794:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
			if (time_spent_this_rotation_us >= melty_parameters.motor_start2 || 
   12796:	42a3      	cmp	r3, r4
   12798:	f4ff aea6 	bcc.w	124e8 <do_melty+0x230>
					gpio_pin_set(dev, MOTOR_PIN1, 1);
   1279c:	4b64      	ldr	r3, [pc, #400]	; (12930 <do_melty+0x678>)
   1279e:	681e      	ldr	r6, [r3, #0]
	__unused const struct gpio_driver_config *const cfg =
   127a0:	6873      	ldr	r3, [r6, #4]
	const struct gpio_driver_data *const data =
   127a2:	6937      	ldr	r7, [r6, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   127a4:	681b      	ldr	r3, [r3, #0]
   127a6:	f013 0f10 	tst.w	r3, #16
   127aa:	f43f ae79 	beq.w	124a0 <do_melty+0x1e8>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   127ae:	683b      	ldr	r3, [r7, #0]
   127b0:	f013 0f10 	tst.w	r3, #16
   127b4:	f47f ae82 	bne.w	124bc <do_melty+0x204>
   127b8:	2701      	movs	r7, #1
	__unused const struct gpio_driver_config *const cfg =
   127ba:	6873      	ldr	r3, [r6, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   127bc:	681b      	ldr	r3, [r3, #0]
   127be:	f013 0f10 	tst.w	r3, #16
   127c2:	f43f ae7d 	beq.w	124c0 <do_melty+0x208>
	if (value != 0)	{
   127c6:	2f00      	cmp	r7, #0
   127c8:	f43f ae88 	beq.w	124dc <do_melty+0x224>
	const struct gpio_driver_api *api =
   127cc:	68b3      	ldr	r3, [r6, #8]
	return api->port_set_bits_raw(port, pins);
   127ce:	68db      	ldr	r3, [r3, #12]
   127d0:	2110      	movs	r1, #16
   127d2:	4630      	mov	r0, r6
   127d4:	4798      	blx	r3
		if (time_spent_this_rotation_us >= melty_parameters.motor_start1 && 
   127d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   127d8:	42a3      	cmp	r3, r4
   127da:	d803      	bhi.n	127e4 <do_melty+0x52c>
				time_spent_this_rotation_us <= melty_parameters.motor_stop1) {
   127dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		if (time_spent_this_rotation_us >= melty_parameters.motor_start1 && 
   127de:	42a3      	cmp	r3, r4
   127e0:	f4bf aeca 	bcs.w	12578 <do_melty+0x2c0>
					gpio_pin_set(dev, MOTOR_PIN2, 0);
   127e4:	4b52      	ldr	r3, [pc, #328]	; (12930 <do_melty+0x678>)
   127e6:	681e      	ldr	r6, [r3, #0]
	__unused const struct gpio_driver_config *const cfg =
   127e8:	6873      	ldr	r3, [r6, #4]
	const struct gpio_driver_data *const data =
   127ea:	6937      	ldr	r7, [r6, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   127ec:	681b      	ldr	r3, [r3, #0]
   127ee:	f013 0f08 	tst.w	r3, #8
   127f2:	f43f aefe 	beq.w	125f2 <do_melty+0x33a>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   127f6:	683b      	ldr	r3, [r7, #0]
   127f8:	f013 0f08 	tst.w	r3, #8
   127fc:	f47f af07 	bne.w	1260e <do_melty+0x356>
   12800:	2700      	movs	r7, #0
	__unused const struct gpio_driver_config *const cfg =
   12802:	6873      	ldr	r3, [r6, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   12804:	681b      	ldr	r3, [r3, #0]
   12806:	f013 0f08 	tst.w	r3, #8
   1280a:	f43f af02 	beq.w	12612 <do_melty+0x35a>
	if (value != 0)	{
   1280e:	2f00      	cmp	r7, #0
   12810:	f43f af0d 	beq.w	1262e <do_melty+0x376>
	const struct gpio_driver_api *api =
   12814:	68b3      	ldr	r3, [r6, #8]
	return api->port_set_bits_raw(port, pins);
   12816:	68db      	ldr	r3, [r3, #12]
   12818:	2108      	movs	r1, #8
   1281a:	4630      	mov	r0, r6
   1281c:	4798      	blx	r3
		if (melty_parameters.led_start > melty_parameters.led_stop) {
   1281e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12820:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   12822:	4293      	cmp	r3, r2
   12824:	d961      	bls.n	128ea <do_melty+0x632>
    		if (time_spent_this_rotation_us >= melty_parameters.led_start || time_spent_this_rotation_us <= melty_parameters.led_stop) {
   12826:	42a3      	cmp	r3, r4
   12828:	d901      	bls.n	1282e <do_melty+0x576>
   1282a:	42a2      	cmp	r2, r4
   1282c:	d31e      	bcc.n	1286c <do_melty+0x5b4>
				gpio_pin_set(dev, MELTY_LED_PIN, 1);
   1282e:	4b40      	ldr	r3, [pc, #256]	; (12930 <do_melty+0x678>)
   12830:	681e      	ldr	r6, [r3, #0]
	__unused const struct gpio_driver_config *const cfg =
   12832:	6873      	ldr	r3, [r6, #4]
	const struct gpio_driver_data *const data =
   12834:	6937      	ldr	r7, [r6, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   12836:	681b      	ldr	r3, [r3, #0]
   12838:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   1283c:	f43f aefd 	beq.w	1263a <do_melty+0x382>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   12840:	683b      	ldr	r3, [r7, #0]
   12842:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   12846:	f47f af06 	bne.w	12656 <do_melty+0x39e>
   1284a:	2701      	movs	r7, #1
	__unused const struct gpio_driver_config *const cfg =
   1284c:	6873      	ldr	r3, [r6, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1284e:	681b      	ldr	r3, [r3, #0]
   12850:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   12854:	f43f af01 	beq.w	1265a <do_melty+0x3a2>
	if (value != 0)	{
   12858:	2f00      	cmp	r7, #0
   1285a:	f43f af13 	beq.w	12684 <do_melty+0x3cc>
	const struct gpio_driver_api *api =
   1285e:	68b3      	ldr	r3, [r6, #8]
	return api->port_set_bits_raw(port, pins);
   12860:	68db      	ldr	r3, [r3, #12]
   12862:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   12866:	4630      	mov	r0, r6
   12868:	4798      	blx	r3
   1286a:	e711      	b.n	12690 <do_melty+0x3d8>
				gpio_pin_set(dev, MELTY_LED_PIN, 0);
   1286c:	4b30      	ldr	r3, [pc, #192]	; (12930 <do_melty+0x678>)
   1286e:	681e      	ldr	r6, [r3, #0]
	__unused const struct gpio_driver_config *const cfg =
   12870:	6873      	ldr	r3, [r6, #4]
	const struct gpio_driver_data *const data =
   12872:	6937      	ldr	r7, [r6, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   12874:	681b      	ldr	r3, [r3, #0]
   12876:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   1287a:	d011      	beq.n	128a0 <do_melty+0x5e8>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1287c:	683b      	ldr	r3, [r7, #0]
   1287e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   12882:	d11b      	bne.n	128bc <do_melty+0x604>
   12884:	2700      	movs	r7, #0
	__unused const struct gpio_driver_config *const cfg =
   12886:	6873      	ldr	r3, [r6, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   12888:	681b      	ldr	r3, [r3, #0]
   1288a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   1288e:	d017      	beq.n	128c0 <do_melty+0x608>
	if (value != 0)	{
   12890:	b327      	cbz	r7, 128dc <do_melty+0x624>
	const struct gpio_driver_api *api =
   12892:	68b3      	ldr	r3, [r6, #8]
	return api->port_set_bits_raw(port, pins);
   12894:	68db      	ldr	r3, [r3, #12]
   12896:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   1289a:	4630      	mov	r0, r6
   1289c:	4798      	blx	r3
   1289e:	e6f7      	b.n	12690 <do_melty+0x3d8>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   128a0:	f8df 8090 	ldr.w	r8, [pc, #144]	; 12934 <do_melty+0x67c>
   128a4:	f240 5225 	movw	r2, #1317	; 0x525
   128a8:	4641      	mov	r1, r8
   128aa:	4823      	ldr	r0, [pc, #140]	; (12938 <do_melty+0x680>)
   128ac:	f018 fbef 	bl	2b08e <assert_print>
   128b0:	f240 5125 	movw	r1, #1317	; 0x525
   128b4:	4640      	mov	r0, r8
   128b6:	f018 fbe3 	bl	2b080 <assert_post_action>
   128ba:	e7df      	b.n	1287c <do_melty+0x5c4>
		value = (value != 0) ? 0 : 1;
   128bc:	2701      	movs	r7, #1
   128be:	e7e2      	b.n	12886 <do_melty+0x5ce>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   128c0:	f8df 8070 	ldr.w	r8, [pc, #112]	; 12934 <do_melty+0x67c>
   128c4:	f240 42fc 	movw	r2, #1276	; 0x4fc
   128c8:	4641      	mov	r1, r8
   128ca:	481b      	ldr	r0, [pc, #108]	; (12938 <do_melty+0x680>)
   128cc:	f018 fbdf 	bl	2b08e <assert_print>
   128d0:	f240 41fc 	movw	r1, #1276	; 0x4fc
   128d4:	4640      	mov	r0, r8
   128d6:	f018 fbd3 	bl	2b080 <assert_post_action>
   128da:	e7d9      	b.n	12890 <do_melty+0x5d8>
	const struct gpio_driver_api *api =
   128dc:	68b3      	ldr	r3, [r6, #8]
	return api->port_clear_bits_raw(port, pins);
   128de:	691b      	ldr	r3, [r3, #16]
   128e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   128e4:	4630      	mov	r0, r6
   128e6:	4798      	blx	r3
	return gpio_pin_set_raw(port, pin, value);
   128e8:	e6d2      	b.n	12690 <do_melty+0x3d8>
			if (time_spent_this_rotation_us >= melty_parameters.led_start && time_spent_this_rotation_us <= melty_parameters.led_stop) {
   128ea:	42a3      	cmp	r3, r4
   128ec:	d801      	bhi.n	128f2 <do_melty+0x63a>
   128ee:	42a2      	cmp	r2, r4
   128f0:	d224      	bcs.n	1293c <do_melty+0x684>
				gpio_pin_set(dev, MELTY_LED_PIN, 0);
   128f2:	4b0f      	ldr	r3, [pc, #60]	; (12930 <do_melty+0x678>)
   128f4:	681e      	ldr	r6, [r3, #0]
	__unused const struct gpio_driver_config *const cfg =
   128f6:	6873      	ldr	r3, [r6, #4]
	const struct gpio_driver_data *const data =
   128f8:	6937      	ldr	r7, [r6, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   128fa:	681b      	ldr	r3, [r3, #0]
   128fc:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   12900:	d05b      	beq.n	129ba <do_melty+0x702>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   12902:	683b      	ldr	r3, [r7, #0]
   12904:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   12908:	d165      	bne.n	129d6 <do_melty+0x71e>
   1290a:	2700      	movs	r7, #0
	__unused const struct gpio_driver_config *const cfg =
   1290c:	6873      	ldr	r3, [r6, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1290e:	681b      	ldr	r3, [r3, #0]
   12910:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   12914:	d061      	beq.n	129da <do_melty+0x722>
	if (value != 0)	{
   12916:	2f00      	cmp	r7, #0
   12918:	d06d      	beq.n	129f6 <do_melty+0x73e>
	const struct gpio_driver_api *api =
   1291a:	68b3      	ldr	r3, [r6, #8]
	return api->port_set_bits_raw(port, pins);
   1291c:	68db      	ldr	r3, [r3, #12]
   1291e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   12922:	4630      	mov	r0, r6
   12924:	4798      	blx	r3
   12926:	e6b3      	b.n	12690 <do_melty+0x3d8>
   12928:	3b9aca00 	.word	0x3b9aca00
   1292c:	10624dd3 	.word	0x10624dd3
   12930:	20002070 	.word	0x20002070
   12934:	000318c4 	.word	0x000318c4
   12938:	000318f8 	.word	0x000318f8
				gpio_pin_set(dev, MELTY_LED_PIN, 1);
   1293c:	4b33      	ldr	r3, [pc, #204]	; (12a0c <do_melty+0x754>)
   1293e:	681e      	ldr	r6, [r3, #0]
	__unused const struct gpio_driver_config *const cfg =
   12940:	6873      	ldr	r3, [r6, #4]
	const struct gpio_driver_data *const data =
   12942:	6937      	ldr	r7, [r6, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   12944:	681b      	ldr	r3, [r3, #0]
   12946:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   1294a:	d011      	beq.n	12970 <do_melty+0x6b8>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1294c:	683b      	ldr	r3, [r7, #0]
   1294e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   12952:	d11b      	bne.n	1298c <do_melty+0x6d4>
   12954:	2701      	movs	r7, #1
	__unused const struct gpio_driver_config *const cfg =
   12956:	6873      	ldr	r3, [r6, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   12958:	681b      	ldr	r3, [r3, #0]
   1295a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   1295e:	d017      	beq.n	12990 <do_melty+0x6d8>
	if (value != 0)	{
   12960:	b327      	cbz	r7, 129ac <do_melty+0x6f4>
	const struct gpio_driver_api *api =
   12962:	68b3      	ldr	r3, [r6, #8]
	return api->port_set_bits_raw(port, pins);
   12964:	68db      	ldr	r3, [r3, #12]
   12966:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   1296a:	4630      	mov	r0, r6
   1296c:	4798      	blx	r3
   1296e:	e68f      	b.n	12690 <do_melty+0x3d8>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   12970:	f8df 809c 	ldr.w	r8, [pc, #156]	; 12a10 <do_melty+0x758>
   12974:	f240 5225 	movw	r2, #1317	; 0x525
   12978:	4641      	mov	r1, r8
   1297a:	4826      	ldr	r0, [pc, #152]	; (12a14 <do_melty+0x75c>)
   1297c:	f018 fb87 	bl	2b08e <assert_print>
   12980:	f240 5125 	movw	r1, #1317	; 0x525
   12984:	4640      	mov	r0, r8
   12986:	f018 fb7b 	bl	2b080 <assert_post_action>
   1298a:	e7df      	b.n	1294c <do_melty+0x694>
		value = (value != 0) ? 0 : 1;
   1298c:	2700      	movs	r7, #0
   1298e:	e7e2      	b.n	12956 <do_melty+0x69e>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   12990:	f8df 807c 	ldr.w	r8, [pc, #124]	; 12a10 <do_melty+0x758>
   12994:	f240 42fc 	movw	r2, #1276	; 0x4fc
   12998:	4641      	mov	r1, r8
   1299a:	481e      	ldr	r0, [pc, #120]	; (12a14 <do_melty+0x75c>)
   1299c:	f018 fb77 	bl	2b08e <assert_print>
   129a0:	f240 41fc 	movw	r1, #1276	; 0x4fc
   129a4:	4640      	mov	r0, r8
   129a6:	f018 fb6b 	bl	2b080 <assert_post_action>
   129aa:	e7d9      	b.n	12960 <do_melty+0x6a8>
	const struct gpio_driver_api *api =
   129ac:	68b3      	ldr	r3, [r6, #8]
	return api->port_clear_bits_raw(port, pins);
   129ae:	691b      	ldr	r3, [r3, #16]
   129b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   129b4:	4630      	mov	r0, r6
   129b6:	4798      	blx	r3
	return gpio_pin_set_raw(port, pin, value);
   129b8:	e66a      	b.n	12690 <do_melty+0x3d8>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   129ba:	f8df 8054 	ldr.w	r8, [pc, #84]	; 12a10 <do_melty+0x758>
   129be:	f240 5225 	movw	r2, #1317	; 0x525
   129c2:	4641      	mov	r1, r8
   129c4:	4813      	ldr	r0, [pc, #76]	; (12a14 <do_melty+0x75c>)
   129c6:	f018 fb62 	bl	2b08e <assert_print>
   129ca:	f240 5125 	movw	r1, #1317	; 0x525
   129ce:	4640      	mov	r0, r8
   129d0:	f018 fb56 	bl	2b080 <assert_post_action>
   129d4:	e795      	b.n	12902 <do_melty+0x64a>
		value = (value != 0) ? 0 : 1;
   129d6:	2701      	movs	r7, #1
   129d8:	e798      	b.n	1290c <do_melty+0x654>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   129da:	f8df 8034 	ldr.w	r8, [pc, #52]	; 12a10 <do_melty+0x758>
   129de:	f240 42fc 	movw	r2, #1276	; 0x4fc
   129e2:	4641      	mov	r1, r8
   129e4:	480b      	ldr	r0, [pc, #44]	; (12a14 <do_melty+0x75c>)
   129e6:	f018 fb52 	bl	2b08e <assert_print>
   129ea:	f240 41fc 	movw	r1, #1276	; 0x4fc
   129ee:	4640      	mov	r0, r8
   129f0:	f018 fb46 	bl	2b080 <assert_post_action>
   129f4:	e78f      	b.n	12916 <do_melty+0x65e>
	const struct gpio_driver_api *api =
   129f6:	68b3      	ldr	r3, [r6, #8]
	return api->port_clear_bits_raw(port, pins);
   129f8:	691b      	ldr	r3, [r3, #16]
   129fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   129fe:	4630      	mov	r0, r6
   12a00:	4798      	blx	r3
	return gpio_pin_set_raw(port, pin, value);
   12a02:	e645      	b.n	12690 <do_melty+0x3d8>
		start_time = k_cycle_get_32();
	}

}
   12a04:	b010      	add	sp, #64	; 0x40
   12a06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12a0a:	bf00      	nop
   12a0c:	20002070 	.word	0x20002070
   12a10:	000318c4 	.word	0x000318c4
   12a14:	000318f8 	.word	0x000318f8

00012a18 <status_led_flash>:

void status_led_flash(int connected) {
   12a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12a1c:	4605      	mov	r5, r0

	gpio_pin_set(dev, MELTY_LED_PIN, 0);
   12a1e:	4b74      	ldr	r3, [pc, #464]	; (12bf0 <status_led_flash+0x1d8>)
   12a20:	681c      	ldr	r4, [r3, #0]
	__unused const struct gpio_driver_config *const cfg =
   12a22:	6863      	ldr	r3, [r4, #4]
	const struct gpio_driver_data *const data =
   12a24:	6926      	ldr	r6, [r4, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   12a26:	681b      	ldr	r3, [r3, #0]
   12a28:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   12a2c:	d053      	beq.n	12ad6 <status_led_flash+0xbe>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   12a2e:	6833      	ldr	r3, [r6, #0]
   12a30:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   12a34:	d15c      	bne.n	12af0 <status_led_flash+0xd8>
   12a36:	2600      	movs	r6, #0
	__unused const struct gpio_driver_config *const cfg =
   12a38:	6863      	ldr	r3, [r4, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   12a3a:	681b      	ldr	r3, [r3, #0]
   12a3c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   12a40:	d058      	beq.n	12af4 <status_led_flash+0xdc>
	if (value != 0)	{
   12a42:	2e00      	cmp	r6, #0
   12a44:	d063      	beq.n	12b0e <status_led_flash+0xf6>
	const struct gpio_driver_api *api =
   12a46:	68a3      	ldr	r3, [r4, #8]
	return api->port_set_bits_raw(port, pins);
   12a48:	68db      	ldr	r3, [r3, #12]
   12a4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   12a4e:	4620      	mov	r0, r4
   12a50:	4798      	blx	r3
	
    //do accel dependent flash if not connected (provides easy way to verify accelerometer is working)
	//fast flash if connected
    if (connected == 0) {
   12a52:	2d00      	cmp	r5, #0
   12a54:	f040 8084 	bne.w	12b60 <status_led_flash+0x148>
   12a58:	f641 109a 	movw	r0, #6554	; 0x199a
   12a5c:	2100      	movs	r1, #0
   12a5e:	f015 fd7f 	bl	28560 <z_impl_k_sleep>
        k_sleep(K_MSEC(200));
        int on_time = 1 + (int)(get_accel_force() * 50.0f);
   12a62:	f7ff fa31 	bl	11ec8 <get_accel_force>
   12a66:	4963      	ldr	r1, [pc, #396]	; (12bf4 <status_led_flash+0x1dc>)
   12a68:	f7ee f8b6 	bl	bd8 <__aeabi_fmul>
   12a6c:	f7ee fa7a 	bl	f64 <__aeabi_f2iz>
   12a70:	1c44      	adds	r4, r0, #1

        if (on_time > 0) {
   12a72:	2c00      	cmp	r4, #0
   12a74:	f340 8097 	ble.w	12ba6 <status_led_flash+0x18e>
            gpio_pin_set(dev, MELTY_LED_PIN, 1);
   12a78:	4b5d      	ldr	r3, [pc, #372]	; (12bf0 <status_led_flash+0x1d8>)
   12a7a:	681e      	ldr	r6, [r3, #0]
	__unused const struct gpio_driver_config *const cfg =
   12a7c:	6873      	ldr	r3, [r6, #4]
	const struct gpio_driver_data *const data =
   12a7e:	6937      	ldr	r7, [r6, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   12a80:	681b      	ldr	r3, [r3, #0]
   12a82:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   12a86:	d049      	beq.n	12b1c <status_led_flash+0x104>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   12a88:	683b      	ldr	r3, [r7, #0]
   12a8a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   12a8e:	d100      	bne.n	12a92 <status_led_flash+0x7a>
   12a90:	2501      	movs	r5, #1
	__unused const struct gpio_driver_config *const cfg =
   12a92:	6873      	ldr	r3, [r6, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   12a94:	681b      	ldr	r3, [r3, #0]
   12a96:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   12a9a:	d04d      	beq.n	12b38 <status_led_flash+0x120>
	if (value != 0)	{
   12a9c:	2d00      	cmp	r5, #0
   12a9e:	d058      	beq.n	12b52 <status_led_flash+0x13a>
	const struct gpio_driver_api *api =
   12aa0:	68b3      	ldr	r3, [r6, #8]
	return api->port_set_bits_raw(port, pins);
   12aa2:	68db      	ldr	r3, [r3, #12]
   12aa4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   12aa8:	4630      	mov	r0, r6
   12aaa:	4798      	blx	r3
            k_sleep(K_MSEC(on_time));
   12aac:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
   12ab0:	17c1      	asrs	r1, r0, #31
			return ((t * to_hz + off) / from_hz);
   12ab2:	03c9      	lsls	r1, r1, #15
   12ab4:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   12ab8:	03c0      	lsls	r0, r0, #15
   12aba:	f240 34e7 	movw	r4, #999	; 0x3e7
   12abe:	1900      	adds	r0, r0, r4
   12ac0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   12ac4:	f04f 0300 	mov.w	r3, #0
   12ac8:	f141 0100 	adc.w	r1, r1, #0
   12acc:	f7ee fa90 	bl	ff0 <__aeabi_uldivmod>
   12ad0:	f015 fd46 	bl	28560 <z_impl_k_sleep>
   12ad4:	e067      	b.n	12ba6 <status_led_flash+0x18e>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   12ad6:	4f48      	ldr	r7, [pc, #288]	; (12bf8 <status_led_flash+0x1e0>)
   12ad8:	f240 5225 	movw	r2, #1317	; 0x525
   12adc:	4639      	mov	r1, r7
   12ade:	4847      	ldr	r0, [pc, #284]	; (12bfc <status_led_flash+0x1e4>)
   12ae0:	f018 fad5 	bl	2b08e <assert_print>
   12ae4:	f240 5125 	movw	r1, #1317	; 0x525
   12ae8:	4638      	mov	r0, r7
   12aea:	f018 fac9 	bl	2b080 <assert_post_action>
   12aee:	e79e      	b.n	12a2e <status_led_flash+0x16>
		value = (value != 0) ? 0 : 1;
   12af0:	2601      	movs	r6, #1
   12af2:	e7a1      	b.n	12a38 <status_led_flash+0x20>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   12af4:	4f40      	ldr	r7, [pc, #256]	; (12bf8 <status_led_flash+0x1e0>)
   12af6:	f240 42fc 	movw	r2, #1276	; 0x4fc
   12afa:	4639      	mov	r1, r7
   12afc:	483f      	ldr	r0, [pc, #252]	; (12bfc <status_led_flash+0x1e4>)
   12afe:	f018 fac6 	bl	2b08e <assert_print>
   12b02:	f240 41fc 	movw	r1, #1276	; 0x4fc
   12b06:	4638      	mov	r0, r7
   12b08:	f018 faba 	bl	2b080 <assert_post_action>
   12b0c:	e799      	b.n	12a42 <status_led_flash+0x2a>
	const struct gpio_driver_api *api =
   12b0e:	68a3      	ldr	r3, [r4, #8]
	return api->port_clear_bits_raw(port, pins);
   12b10:	691b      	ldr	r3, [r3, #16]
   12b12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   12b16:	4620      	mov	r0, r4
   12b18:	4798      	blx	r3
   12b1a:	e79a      	b.n	12a52 <status_led_flash+0x3a>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   12b1c:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 12bf8 <status_led_flash+0x1e0>
   12b20:	f240 5225 	movw	r2, #1317	; 0x525
   12b24:	4641      	mov	r1, r8
   12b26:	4835      	ldr	r0, [pc, #212]	; (12bfc <status_led_flash+0x1e4>)
   12b28:	f018 fab1 	bl	2b08e <assert_print>
   12b2c:	f240 5125 	movw	r1, #1317	; 0x525
   12b30:	4640      	mov	r0, r8
   12b32:	f018 faa5 	bl	2b080 <assert_post_action>
   12b36:	e7a7      	b.n	12a88 <status_led_flash+0x70>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   12b38:	4f2f      	ldr	r7, [pc, #188]	; (12bf8 <status_led_flash+0x1e0>)
   12b3a:	f240 42fc 	movw	r2, #1276	; 0x4fc
   12b3e:	4639      	mov	r1, r7
   12b40:	482e      	ldr	r0, [pc, #184]	; (12bfc <status_led_flash+0x1e4>)
   12b42:	f018 faa4 	bl	2b08e <assert_print>
   12b46:	f240 41fc 	movw	r1, #1276	; 0x4fc
   12b4a:	4638      	mov	r0, r7
   12b4c:	f018 fa98 	bl	2b080 <assert_post_action>
   12b50:	e7a4      	b.n	12a9c <status_led_flash+0x84>
	const struct gpio_driver_api *api =
   12b52:	68b3      	ldr	r3, [r6, #8]
	return api->port_clear_bits_raw(port, pins);
   12b54:	691b      	ldr	r3, [r3, #16]
   12b56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   12b5a:	4630      	mov	r0, r6
   12b5c:	4798      	blx	r3
   12b5e:	e7a5      	b.n	12aac <status_led_flash+0x94>
   12b60:	f240 6067 	movw	r0, #1639	; 0x667
   12b64:	2100      	movs	r1, #0
   12b66:	f015 fcfb 	bl	28560 <z_impl_k_sleep>
        }
    } else {
        k_sleep(K_MSEC(50));
        gpio_pin_set(dev, MELTY_LED_PIN, 1);
   12b6a:	4b21      	ldr	r3, [pc, #132]	; (12bf0 <status_led_flash+0x1d8>)
   12b6c:	681d      	ldr	r5, [r3, #0]
	__unused const struct gpio_driver_config *const cfg =
   12b6e:	686b      	ldr	r3, [r5, #4]
	const struct gpio_driver_data *const data =
   12b70:	692c      	ldr	r4, [r5, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   12b72:	681b      	ldr	r3, [r3, #0]
   12b74:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   12b78:	d017      	beq.n	12baa <status_led_flash+0x192>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   12b7a:	6823      	ldr	r3, [r4, #0]
   12b7c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   12b80:	d120      	bne.n	12bc4 <status_led_flash+0x1ac>
   12b82:	2401      	movs	r4, #1
	__unused const struct gpio_driver_config *const cfg =
   12b84:	686b      	ldr	r3, [r5, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   12b86:	681b      	ldr	r3, [r3, #0]
   12b88:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   12b8c:	d01c      	beq.n	12bc8 <status_led_flash+0x1b0>
	if (value != 0)	{
   12b8e:	b344      	cbz	r4, 12be2 <status_led_flash+0x1ca>
	const struct gpio_driver_api *api =
   12b90:	68ab      	ldr	r3, [r5, #8]
	return api->port_set_bits_raw(port, pins);
   12b92:	68db      	ldr	r3, [r3, #12]
   12b94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   12b98:	4628      	mov	r0, r5
   12b9a:	4798      	blx	r3
   12b9c:	f240 6067 	movw	r0, #1639	; 0x667
   12ba0:	2100      	movs	r1, #0
   12ba2:	f015 fcdd 	bl	28560 <z_impl_k_sleep>
        k_sleep(K_MSEC(50));
    }

}
   12ba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   12baa:	4e13      	ldr	r6, [pc, #76]	; (12bf8 <status_led_flash+0x1e0>)
   12bac:	f240 5225 	movw	r2, #1317	; 0x525
   12bb0:	4631      	mov	r1, r6
   12bb2:	4812      	ldr	r0, [pc, #72]	; (12bfc <status_led_flash+0x1e4>)
   12bb4:	f018 fa6b 	bl	2b08e <assert_print>
   12bb8:	f240 5125 	movw	r1, #1317	; 0x525
   12bbc:	4630      	mov	r0, r6
   12bbe:	f018 fa5f 	bl	2b080 <assert_post_action>
   12bc2:	e7da      	b.n	12b7a <status_led_flash+0x162>
		value = (value != 0) ? 0 : 1;
   12bc4:	2400      	movs	r4, #0
   12bc6:	e7dd      	b.n	12b84 <status_led_flash+0x16c>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   12bc8:	4e0b      	ldr	r6, [pc, #44]	; (12bf8 <status_led_flash+0x1e0>)
   12bca:	f240 42fc 	movw	r2, #1276	; 0x4fc
   12bce:	4631      	mov	r1, r6
   12bd0:	480a      	ldr	r0, [pc, #40]	; (12bfc <status_led_flash+0x1e4>)
   12bd2:	f018 fa5c 	bl	2b08e <assert_print>
   12bd6:	f240 41fc 	movw	r1, #1276	; 0x4fc
   12bda:	4630      	mov	r0, r6
   12bdc:	f018 fa50 	bl	2b080 <assert_post_action>
   12be0:	e7d5      	b.n	12b8e <status_led_flash+0x176>
	const struct gpio_driver_api *api =
   12be2:	68ab      	ldr	r3, [r5, #8]
	return api->port_clear_bits_raw(port, pins);
   12be4:	691b      	ldr	r3, [r3, #16]
   12be6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   12bea:	4628      	mov	r0, r5
   12bec:	4798      	blx	r3
   12bee:	e7d5      	b.n	12b9c <status_led_flash+0x184>
   12bf0:	20002070 	.word	0x20002070
   12bf4:	42480000 	.word	0x42480000
   12bf8:	000318c4 	.word	0x000318c4
   12bfc:	000318f8 	.word	0x000318f8

00012c00 <platform_read>:
    return 0; // Success

}

               
int32_t platform_read(void *handle, uint8_t Reg, uint8_t *Bufp, uint16_t len) {
   12c00:	b570      	push	{r4, r5, r6, lr}
   12c02:	b086      	sub	sp, #24
   12c04:	4616      	mov	r6, r2
   12c06:	461d      	mov	r5, r3
   12c08:	f88d 1007 	strb.w	r1, [sp, #7]

    Reg |= 0x80;
   12c0c:	b2c9      	uxtb	r1, r1
   12c0e:	f061 017f 	orn	r1, r1, #127	; 0x7f
   12c12:	f88d 1007 	strb.w	r1, [sp, #7]

    // Write the register address
    int ret = i2c_write(i2c_dev, &Reg, 1, I2C_ADDRESS);
   12c16:	4b16      	ldr	r3, [pc, #88]	; (12c70 <platform_read+0x70>)
   12c18:	6818      	ldr	r0, [r3, #0]
static inline int i2c_write(const struct device *dev, const uint8_t *buf,
			    uint32_t num_bytes, uint16_t addr)
{
	struct i2c_msg msg;

	msg.buf = (uint8_t *)buf;
   12c1a:	f10d 0307 	add.w	r3, sp, #7
   12c1e:	9303      	str	r3, [sp, #12]
	msg.len = num_bytes;
   12c20:	2201      	movs	r2, #1
   12c22:	9204      	str	r2, [sp, #16]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   12c24:	2302      	movs	r3, #2
   12c26:	f88d 3014 	strb.w	r3, [sp, #20]
	const struct i2c_driver_api *api =
   12c2a:	6883      	ldr	r3, [r0, #8]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   12c2c:	689c      	ldr	r4, [r3, #8]
   12c2e:	2319      	movs	r3, #25
   12c30:	a903      	add	r1, sp, #12
   12c32:	47a0      	blx	r4
    if (ret < 0) {
   12c34:	1e04      	subs	r4, r0, #0
   12c36:	db12      	blt.n	12c5e <platform_read+0x5e>
        printk("Failed to write register address\n");
        return ret;
    }

    // Read from the register
    ret = i2c_read(i2c_dev, Bufp, len, I2C_ADDRESS);
   12c38:	4b0d      	ldr	r3, [pc, #52]	; (12c70 <platform_read+0x70>)
   12c3a:	6818      	ldr	r0, [r3, #0]
static inline int i2c_read(const struct device *dev, uint8_t *buf,
			   uint32_t num_bytes, uint16_t addr)
{
	struct i2c_msg msg;

	msg.buf = buf;
   12c3c:	9603      	str	r6, [sp, #12]
	msg.len = num_bytes;
   12c3e:	9504      	str	r5, [sp, #16]
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
   12c40:	2303      	movs	r3, #3
   12c42:	f88d 3014 	strb.w	r3, [sp, #20]
	const struct i2c_driver_api *api =
   12c46:	6883      	ldr	r3, [r0, #8]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   12c48:	689c      	ldr	r4, [r3, #8]
   12c4a:	2319      	movs	r3, #25
   12c4c:	2201      	movs	r2, #1
   12c4e:	a903      	add	r1, sp, #12
   12c50:	47a0      	blx	r4
    if (ret < 0) {
   12c52:	1e04      	subs	r4, r0, #0
   12c54:	db07      	blt.n	12c66 <platform_read+0x66>
        printk("Failed to read data\n");
        return ret;
    }

    return 0; // Success
   12c56:	2400      	movs	r4, #0
}
   12c58:	4620      	mov	r0, r4
   12c5a:	b006      	add	sp, #24
   12c5c:	bd70      	pop	{r4, r5, r6, pc}
        printk("Failed to write register address\n");
   12c5e:	4805      	ldr	r0, [pc, #20]	; (12c74 <platform_read+0x74>)
   12c60:	f017 fff5 	bl	2ac4e <printk>
        return ret;
   12c64:	e7f8      	b.n	12c58 <platform_read+0x58>
        printk("Failed to read data\n");
   12c66:	4804      	ldr	r0, [pc, #16]	; (12c78 <platform_read+0x78>)
   12c68:	f017 fff1 	bl	2ac4e <printk>
        return ret;
   12c6c:	e7f4      	b.n	12c58 <platform_read+0x58>
   12c6e:	bf00      	nop
   12c70:	2000064c 	.word	0x2000064c
   12c74:	00031910 	.word	0x00031910
   12c78:	00031934 	.word	0x00031934

00012c7c <platform_write>:
int32_t platform_write(void *handle, uint8_t Reg, const uint8_t *Bufp, uint16_t len){
   12c7c:	b590      	push	{r4, r7, lr}
   12c7e:	b085      	sub	sp, #20
   12c80:	af00      	add	r7, sp, #0
   12c82:	4694      	mov	ip, r2
   12c84:	461a      	mov	r2, r3
    uint8_t buf[len + 1]; // Buffer to hold the register address and the data to write
   12c86:	1c5c      	adds	r4, r3, #1
   12c88:	3308      	adds	r3, #8
   12c8a:	08db      	lsrs	r3, r3, #3
   12c8c:	4668      	mov	r0, sp
   12c8e:	eba0 03c3 	sub.w	r3, r0, r3, lsl #3
   12c92:	469d      	mov	sp, r3
    Reg |= 0x80;
   12c94:	f041 0380 	orr.w	r3, r1, #128	; 0x80
    buf[0] = Reg;
   12c98:	4668      	mov	r0, sp
   12c9a:	f800 3b01 	strb.w	r3, [r0], #1
    memcpy(&buf[1], Bufp, len);
   12c9e:	4661      	mov	r1, ip
   12ca0:	f01e f83a 	bl	30d18 <memcpy>
    int ret = i2c_write(i2c_dev, buf, len + 1, I2C_ADDRESS);
   12ca4:	4b0b      	ldr	r3, [pc, #44]	; (12cd4 <platform_write+0x58>)
   12ca6:	6818      	ldr	r0, [r3, #0]
	msg.buf = (uint8_t *)buf;
   12ca8:	f8c7 d004 	str.w	sp, [r7, #4]
	msg.len = num_bytes;
   12cac:	60bc      	str	r4, [r7, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   12cae:	2302      	movs	r3, #2
   12cb0:	733b      	strb	r3, [r7, #12]
	const struct i2c_driver_api *api =
   12cb2:	6883      	ldr	r3, [r0, #8]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   12cb4:	689c      	ldr	r4, [r3, #8]
   12cb6:	2319      	movs	r3, #25
   12cb8:	2201      	movs	r2, #1
   12cba:	1d39      	adds	r1, r7, #4
   12cbc:	47a0      	blx	r4
    if (ret < 0) {
   12cbe:	1e04      	subs	r4, r0, #0
   12cc0:	db04      	blt.n	12ccc <platform_write+0x50>
    return 0; // Success
   12cc2:	2400      	movs	r4, #0
}
   12cc4:	4620      	mov	r0, r4
   12cc6:	3714      	adds	r7, #20
   12cc8:	46bd      	mov	sp, r7
   12cca:	bd90      	pop	{r4, r7, pc}
        printk("Failed to write data to register\n");
   12ccc:	4802      	ldr	r0, [pc, #8]	; (12cd8 <platform_write+0x5c>)
   12cce:	f017 ffbe 	bl	2ac4e <printk>
        return ret;
   12cd2:	e7f7      	b.n	12cc4 <platform_write+0x48>
   12cd4:	2000064c 	.word	0x2000064c
   12cd8:	0003194c 	.word	0x0003194c

00012cdc <lis331dlh_read_data_polling>:
{
}


void lis331dlh_read_data_polling(void)
{
   12cdc:	b580      	push	{r7, lr}
   12cde:	b08a      	sub	sp, #40	; 0x28

  i2c_configure(i2c_dev, i2c_cfg);
   12ce0:	4b34      	ldr	r3, [pc, #208]	; (12db4 <lis331dlh_read_data_polling+0xd8>)
   12ce2:	6818      	ldr	r0, [r3, #0]
   12ce4:	4b34      	ldr	r3, [pc, #208]	; (12db8 <lis331dlh_read_data_polling+0xdc>)
   12ce6:	6819      	ldr	r1, [r3, #0]
	const struct i2c_driver_api *api =
   12ce8:	6883      	ldr	r3, [r0, #8]
	return api->configure(dev, dev_config);
   12cea:	681b      	ldr	r3, [r3, #0]
   12cec:	4798      	blx	r3
  
  /* Initialize mems driver interface */
  stmdev_ctx_t dev_ctx;
  dev_ctx.write_reg = platform_write;
   12cee:	4b33      	ldr	r3, [pc, #204]	; (12dbc <lis331dlh_read_data_polling+0xe0>)
   12cf0:	9306      	str	r3, [sp, #24]
  dev_ctx.read_reg = platform_read;
   12cf2:	4b33      	ldr	r3, [pc, #204]	; (12dc0 <lis331dlh_read_data_polling+0xe4>)
   12cf4:	9307      	str	r3, [sp, #28]
  dev_ctx.mdelay = platform_delay;
   12cf6:	4b33      	ldr	r3, [pc, #204]	; (12dc4 <lis331dlh_read_data_polling+0xe8>)
   12cf8:	9308      	str	r3, [sp, #32]
  dev_ctx.handle = NULL;
   12cfa:	2300      	movs	r3, #0
   12cfc:	9309      	str	r3, [sp, #36]	; 0x24
  
  /* Wait sensor boot time */
  platform_delay(BOOT_TIME);
   12cfe:	2005      	movs	r0, #5
   12d00:	f017 fe69 	bl	2a9d6 <platform_delay>
  
  /* Check device ID */
  lis331dlh_device_id_get(&dev_ctx, &whoamI);
   12d04:	4c30      	ldr	r4, [pc, #192]	; (12dc8 <lis331dlh_read_data_polling+0xec>)
   12d06:	4621      	mov	r1, r4
   12d08:	a806      	add	r0, sp, #24
   12d0a:	f017 fefa 	bl	2ab02 <lis331dlh_device_id_get>

  if (whoamI != LIS331DLH_ID) {
   12d0e:	7823      	ldrb	r3, [r4, #0]
   12d10:	2b32      	cmp	r3, #50	; 0x32
   12d12:	d003      	beq.n	12d1c <lis331dlh_read_data_polling+0x40>
    while (1) {
      platform_delay(BOOT_TIME);
   12d14:	2005      	movs	r0, #5
   12d16:	f017 fe5e 	bl	2a9d6 <platform_delay>
    while (1) {
   12d1a:	e7fb      	b.n	12d14 <lis331dlh_read_data_polling+0x38>
    }
  }

  platform_delay(BOOT_TIME);
   12d1c:	2005      	movs	r0, #5
   12d1e:	f017 fe5a 	bl	2a9d6 <platform_delay>

  /* Enable Block Data Update */
  lis331dlh_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
   12d22:	2101      	movs	r1, #1
   12d24:	a806      	add	r0, sp, #24
   12d26:	f017 feaa 	bl	2aa7e <lis331dlh_block_data_update_set>
  /* Set full scale */
  lis331dlh_full_scale_set(&dev_ctx, LIS331DLH_2g);
   12d2a:	2100      	movs	r1, #0
   12d2c:	a806      	add	r0, sp, #24
   12d2e:	f017 fe8d 	bl	2aa4c <lis331dlh_full_scale_set>
  /* Accelerometer - High Pass / Slope path */
  //lis331dlh_hp_path_set(&dev_ctx, LIS331DLH_HP_DISABLE);
  //lis331dlh_hp_path_set(&dev_ctx, LIS331DLH_HP_ON_OUT);
  //lis331dlh_hp_reset_get(&dev_ctx);
  /* Set Output Data Rate */
  lis331dlh_data_rate_set(&dev_ctx, LIS331DLH_ODR_5Hz);
   12d32:	2105      	movs	r1, #5
   12d34:	a806      	add	r0, sp, #24
   12d36:	f017 fe69 	bl	2aa0c <lis331dlh_data_rate_set>
  /* Read samples in polling mode (no int) */
  while (1) {

    /* Read output only if new value is available */
    lis331dlh_reg_t reg;
    lis331dlh_status_reg_get(&dev_ctx, &reg.status_reg);
   12d3a:	a905      	add	r1, sp, #20
   12d3c:	a806      	add	r0, sp, #24
   12d3e:	f017 feb7 	bl	2aab0 <lis331dlh_status_reg_get>

    if (reg.status_reg.zyxda) 
   12d42:	f89d 3014 	ldrb.w	r3, [sp, #20]
   12d46:	f013 0f08 	tst.w	r3, #8
   12d4a:	d0f6      	beq.n	12d3a <lis331dlh_read_data_polling+0x5e>
    {
      /* Read acceleration data */
      memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
   12d4c:	4d1f      	ldr	r5, [pc, #124]	; (12dcc <lis331dlh_read_data_polling+0xf0>)
   12d4e:	2206      	movs	r2, #6
   12d50:	2100      	movs	r1, #0
   12d52:	4628      	mov	r0, r5
   12d54:	f01e f801 	bl	30d5a <memset>
      lis331dlh_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
   12d58:	4629      	mov	r1, r5
   12d5a:	a806      	add	r0, sp, #24
   12d5c:	f017 feaf 	bl	2aabe <lis331dlh_acceleration_raw_get>

      acceleration_mg[0] =
        lis331dlh_from_fs8_to_mg(data_raw_acceleration[0]);
   12d60:	f9b5 0000 	ldrsh.w	r0, [r5]
   12d64:	f000 f83a 	bl	12ddc <lis331dlh_from_fs8_to_mg>
      acceleration_mg[0] =
   12d68:	4c19      	ldr	r4, [pc, #100]	; (12dd0 <lis331dlh_read_data_polling+0xf4>)
   12d6a:	6020      	str	r0, [r4, #0]
      acceleration_mg[1] =
        lis331dlh_from_fs8_to_mg(data_raw_acceleration[1]);
   12d6c:	f9b5 0002 	ldrsh.w	r0, [r5, #2]
   12d70:	f000 f834 	bl	12ddc <lis331dlh_from_fs8_to_mg>
      acceleration_mg[1] =
   12d74:	6060      	str	r0, [r4, #4]
      acceleration_mg[2] =
        lis331dlh_from_fs8_to_mg(data_raw_acceleration[2]);
   12d76:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
   12d7a:	f000 f82f 	bl	12ddc <lis331dlh_from_fs8_to_mg>
   12d7e:	4605      	mov	r5, r0
      acceleration_mg[2] =
   12d80:	60a0      	str	r0, [r4, #8]

    

      sprintf((char *)tx_buffer,
              "Acceleration [mg]:%4.2f\t%4.2f\t%4.2f\r\n",
              acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
   12d82:	f8d4 8004 	ldr.w	r8, [r4, #4]
      sprintf((char *)tx_buffer,
   12d86:	6820      	ldr	r0, [r4, #0]
   12d88:	f7ed fb5e 	bl	448 <__aeabi_f2d>
   12d8c:	4606      	mov	r6, r0
   12d8e:	460f      	mov	r7, r1
   12d90:	4628      	mov	r0, r5
   12d92:	f7ed fb59 	bl	448 <__aeabi_f2d>
   12d96:	e9cd 0102 	strd	r0, r1, [sp, #8]
   12d9a:	4640      	mov	r0, r8
   12d9c:	f7ed fb54 	bl	448 <__aeabi_f2d>
   12da0:	e9cd 0100 	strd	r0, r1, [sp]
   12da4:	4632      	mov	r2, r6
   12da6:	463b      	mov	r3, r7
   12da8:	490a      	ldr	r1, [pc, #40]	; (12dd4 <lis331dlh_read_data_polling+0xf8>)
   12daa:	480b      	ldr	r0, [pc, #44]	; (12dd8 <lis331dlh_read_data_polling+0xfc>)
   12dac:	f017 fc50 	bl	2a650 <siprintf>
  while (1) {
   12db0:	e7c3      	b.n	12d3a <lis331dlh_read_data_polling+0x5e>
   12db2:	bf00      	nop
   12db4:	2000064c 	.word	0x2000064c
   12db8:	20000648 	.word	0x20000648
   12dbc:	00012c7d 	.word	0x00012c7d
   12dc0:	00012c01 	.word	0x00012c01
   12dc4:	0002a9d7 	.word	0x0002a9d7
   12dc8:	20003767 	.word	0x20003767
   12dcc:	20002088 	.word	0x20002088
   12dd0:	2000207c 	.word	0x2000207c
   12dd4:	00031970 	.word	0x00031970
   12dd8:	20002090 	.word	0x20002090

00012ddc <lis331dlh_from_fs8_to_mg>:
{
  return ((float_t)lsb * 2.0f / 16.0f);
}

float_t lis331dlh_from_fs8_to_mg(int16_t lsb)
{
   12ddc:	b508      	push	{r3, lr}
  return ((float_t)lsb * 3.9f / 16.0f);
   12dde:	f7ed fea7 	bl	b30 <__aeabi_i2f>
   12de2:	4904      	ldr	r1, [pc, #16]	; (12df4 <lis331dlh_from_fs8_to_mg+0x18>)
   12de4:	f7ed fef8 	bl	bd8 <__aeabi_fmul>
   12de8:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
   12dec:	f7ed fef4 	bl	bd8 <__aeabi_fmul>
}
   12df0:	bd08      	pop	{r3, pc}
   12df2:	bf00      	nop
   12df4:	4079999a 	.word	0x4079999a

00012df8 <crc8_ccitt>:
uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
   12df8:	f04f 0c00 	mov.w	ip, #0
   12dfc:	4594      	cmp	ip, r2
   12dfe:	d215      	bcs.n	12e2c <crc8_ccitt+0x34>
{
   12e00:	b410      	push	{r4}
		val ^= p[i];
   12e02:	f811 300c 	ldrb.w	r3, [r1, ip]
   12e06:	4043      	eors	r3, r0
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   12e08:	0918      	lsrs	r0, r3, #4
   12e0a:	4c09      	ldr	r4, [pc, #36]	; (12e30 <crc8_ccitt+0x38>)
   12e0c:	5620      	ldrsb	r0, [r4, r0]
   12e0e:	ea80 1003 	eor.w	r0, r0, r3, lsl #4
   12e12:	b2c3      	uxtb	r3, r0
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   12e14:	f3c0 1003 	ubfx	r0, r0, #4, #4
   12e18:	5620      	ldrsb	r0, [r4, r0]
   12e1a:	ea80 1003 	eor.w	r0, r0, r3, lsl #4
   12e1e:	b2c0      	uxtb	r0, r0
	for (i = 0; i < cnt; i++) {
   12e20:	f10c 0c01 	add.w	ip, ip, #1
   12e24:	4594      	cmp	ip, r2
   12e26:	d3ec      	bcc.n	12e02 <crc8_ccitt+0xa>
	}
	return val;
}
   12e28:	bc10      	pop	{r4}
   12e2a:	4770      	bx	lr
   12e2c:	4770      	bx	lr
   12e2e:	bf00      	nop
   12e30:	00031998 	.word	0x00031998

00012e34 <u8_to_dec>:
 */

#include <zephyr/sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   12e34:	b510      	push	{r4, lr}
   12e36:	4686      	mov	lr, r0
	uint8_t divisor = 100;
	uint8_t num_digits = 0;
   12e38:	2000      	movs	r0, #0
	uint8_t divisor = 100;
   12e3a:	2364      	movs	r3, #100	; 0x64
	uint8_t digit;

	while (buflen > 0 && divisor > 0) {
   12e3c:	e010      	b.n	12e60 <u8_to_dec+0x2c>
		digit = value / divisor;
		if (digit != 0 || divisor == 1 || num_digits != 0) {
			*buf = (char)digit + '0';
   12e3e:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
   12e42:	f80e cb01 	strb.w	ip, [lr], #1
			buf++;
			buflen--;
   12e46:	3901      	subs	r1, #1
   12e48:	b2c9      	uxtb	r1, r1
			num_digits++;
   12e4a:	3001      	adds	r0, #1
   12e4c:	b2c0      	uxtb	r0, r0
		}

		value -= digit * divisor;
   12e4e:	fbb2 f4f3 	udiv	r4, r2, r3
   12e52:	fb03 2214 	mls	r2, r3, r4, r2
   12e56:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   12e58:	4c09      	ldr	r4, [pc, #36]	; (12e80 <u8_to_dec+0x4c>)
   12e5a:	fba4 4303 	umull	r4, r3, r4, r3
   12e5e:	08db      	lsrs	r3, r3, #3
	while (buflen > 0 && divisor > 0) {
   12e60:	b149      	cbz	r1, 12e76 <u8_to_dec+0x42>
   12e62:	b143      	cbz	r3, 12e76 <u8_to_dec+0x42>
		digit = value / divisor;
   12e64:	fbb2 fcf3 	udiv	ip, r2, r3
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   12e68:	429a      	cmp	r2, r3
   12e6a:	d2e8      	bcs.n	12e3e <u8_to_dec+0xa>
   12e6c:	2b01      	cmp	r3, #1
   12e6e:	d0e6      	beq.n	12e3e <u8_to_dec+0xa>
   12e70:	2800      	cmp	r0, #0
   12e72:	d0ec      	beq.n	12e4e <u8_to_dec+0x1a>
   12e74:	e7e3      	b.n	12e3e <u8_to_dec+0xa>
	}

	if (buflen) {
   12e76:	b111      	cbz	r1, 12e7e <u8_to_dec+0x4a>
		*buf = '\0';
   12e78:	2300      	movs	r3, #0
   12e7a:	f88e 3000 	strb.w	r3, [lr]
	}

	return num_digits;
}
   12e7e:	bd10      	pop	{r4, pc}
   12e80:	cccccccd 	.word	0xcccccccd

00012e84 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   12e84:	b570      	push	{r4, r5, r6, lr}
   12e86:	4604      	mov	r4, r0
   12e88:	460d      	mov	r5, r1
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   12e8a:	6843      	ldr	r3, [r0, #4]

	return method & SYS_NOTIFY_METHOD_MASK;
   12e8c:	f003 0303 	and.w	r3, r3, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   12e90:	6081      	str	r1, [r0, #8]
	switch (method) {
   12e92:	2b02      	cmp	r3, #2
   12e94:	d013      	beq.n	12ebe <sys_notify_finalize+0x3a>
   12e96:	2b03      	cmp	r3, #3
   12e98:	d00e      	beq.n	12eb8 <sys_notify_finalize+0x34>
   12e9a:	2b01      	cmp	r3, #1
   12e9c:	d012      	beq.n	12ec4 <sys_notify_finalize+0x40>
		break;
	case SYS_NOTIFY_METHOD_SIGNAL:
		sig = notify->method.signal;
		break;
	default:
		__ASSERT_NO_MSG(false);
   12e9e:	4e0e      	ldr	r6, [pc, #56]	; (12ed8 <sys_notify_finalize+0x54>)
   12ea0:	2245      	movs	r2, #69	; 0x45
   12ea2:	4631      	mov	r1, r6
   12ea4:	480d      	ldr	r0, [pc, #52]	; (12edc <sys_notify_finalize+0x58>)
   12ea6:	f018 f8f2 	bl	2b08e <assert_print>
   12eaa:	2145      	movs	r1, #69	; 0x45
   12eac:	4630      	mov	r0, r6
   12eae:	f018 f8e7 	bl	2b080 <assert_post_action>
	sys_notify_generic_callback rv = NULL;
   12eb2:	2600      	movs	r6, #0
	struct k_poll_signal *sig = NULL;
   12eb4:	4630      	mov	r0, r6
   12eb6:	e007      	b.n	12ec8 <sys_notify_finalize+0x44>
		rv = notify->method.callback;
   12eb8:	6806      	ldr	r6, [r0, #0]
	struct k_poll_signal *sig = NULL;
   12eba:	2000      	movs	r0, #0
		break;
   12ebc:	e004      	b.n	12ec8 <sys_notify_finalize+0x44>
		sig = notify->method.signal;
   12ebe:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   12ec0:	2600      	movs	r6, #0
		break;
   12ec2:	e001      	b.n	12ec8 <sys_notify_finalize+0x44>
	switch (method) {
   12ec4:	2600      	movs	r6, #0
   12ec6:	4630      	mov	r0, r6
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   12ec8:	2300      	movs	r3, #0
   12eca:	6063      	str	r3, [r4, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   12ecc:	b110      	cbz	r0, 12ed4 <sys_notify_finalize+0x50>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   12ece:	4629      	mov	r1, r5
   12ed0:	f016 fd04 	bl	298dc <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   12ed4:	4630      	mov	r0, r6
   12ed6:	bd70      	pop	{r4, r5, r6, pc}
   12ed8:	000319a8 	.word	0x000319a8
   12edc:	000318f8 	.word	0x000318f8

00012ee0 <char_out>:

	return c;
}

static int char_out(int c, void *ctx_p)
{
   12ee0:	b508      	push	{r3, lr}
	(void) ctx_p;
	return _char_out(c);
   12ee2:	4b02      	ldr	r3, [pc, #8]	; (12eec <char_out+0xc>)
   12ee4:	681b      	ldr	r3, [r3, #0]
   12ee6:	4798      	blx	r3
}
   12ee8:	bd08      	pop	{r3, pc}
   12eea:	bf00      	nop
   12eec:	20000650 	.word	0x20000650

00012ef0 <__printk_hook_install>:
	_char_out = fn;
   12ef0:	4b01      	ldr	r3, [pc, #4]	; (12ef8 <__printk_hook_install+0x8>)
   12ef2:	6018      	str	r0, [r3, #0]
}
   12ef4:	4770      	bx	lr
   12ef6:	bf00      	nop
   12ef8:	20000650 	.word	0x20000650

00012efc <vprintk>:

void vprintk(const char *fmt, va_list ap)
{
   12efc:	b500      	push	{lr}
   12efe:	b083      	sub	sp, #12
   12f00:	4602      	mov	r2, r0
   12f02:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   12f04:	2100      	movs	r1, #0
   12f06:	9100      	str	r1, [sp, #0]
   12f08:	4802      	ldr	r0, [pc, #8]	; (12f14 <vprintk+0x18>)
   12f0a:	f000 fe79 	bl	13c00 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
   12f0e:	b003      	add	sp, #12
   12f10:	f85d fb04 	ldr.w	pc, [sp], #4
   12f14:	00012ee1 	.word	0x00012ee1

00012f18 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   12f18:	b510      	push	{r4, lr}
   12f1a:	b086      	sub	sp, #24
   12f1c:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
   12f1e:	9003      	str	r0, [sp, #12]
   12f20:	9104      	str	r1, [sp, #16]
   12f22:	2100      	movs	r1, #0
   12f24:	9105      	str	r1, [sp, #20]
   12f26:	9100      	str	r1, [sp, #0]
   12f28:	a903      	add	r1, sp, #12
   12f2a:	4806      	ldr	r0, [pc, #24]	; (12f44 <vsnprintk+0x2c>)
   12f2c:	f000 fe68 	bl	13c00 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
   12f30:	9b05      	ldr	r3, [sp, #20]
   12f32:	9a04      	ldr	r2, [sp, #16]
   12f34:	4293      	cmp	r3, r2
   12f36:	da01      	bge.n	12f3c <vsnprintk+0x24>
		str[ctx.count] = '\0';
   12f38:	2200      	movs	r2, #0
   12f3a:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
   12f3c:	9805      	ldr	r0, [sp, #20]
   12f3e:	b006      	add	sp, #24
   12f40:	bd10      	pop	{r4, pc}
   12f42:	bf00      	nop
   12f44:	0002ac1f 	.word	0x0002ac1f

00012f48 <process_complete>:
 * from the manager to the output list for notification.
 */
static void process_complete(struct onoff_manager *mgr,
			     sys_slist_t *clients,
			     int res)
{
   12f48:	b538      	push	{r3, r4, r5, lr}
   12f4a:	4604      	mov	r4, r0
   12f4c:	468c      	mov	ip, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12f4e:	8b83      	ldrh	r3, [r0, #28]

	if (res < 0) {
   12f50:	2a00      	cmp	r2, #0
   12f52:	db13      	blt.n	12f7c <process_complete+0x34>
   12f54:	f003 0307 	and.w	r3, r3, #7
		/* Enter ERROR state and notify all clients. */
		*clients = mgr->clients;
		sys_slist_init(&mgr->clients);
		set_state(mgr, ONOFF_STATE_ERROR);
	} else if ((state == ONOFF_STATE_TO_ON)
		   || (state == ONOFF_STATE_RESETTING)) {
   12f58:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   12f5a:	2a01      	cmp	r2, #1
   12f5c:	d91a      	bls.n	12f94 <process_complete+0x4c>
			set_state(mgr, ONOFF_STATE_OFF);
		}
		if (process_recheck(mgr) != EVT_NOP) {
			mgr->flags |= ONOFF_FLAG_RECHECK;
		}
	} else if (state == ONOFF_STATE_TO_OFF) {
   12f5e:	2b04      	cmp	r3, #4
   12f60:	d04e      	beq.n	13000 <process_complete+0xb8>
		set_state(mgr, ONOFF_STATE_OFF);
		if (process_recheck(mgr) != EVT_NOP) {
			mgr->flags |= ONOFF_FLAG_RECHECK;
		}
	} else {
		__ASSERT_NO_MSG(false);
   12f62:	4c2e      	ldr	r4, [pc, #184]	; (1301c <process_complete+0xd4>)
   12f64:	f240 121b 	movw	r2, #283	; 0x11b
   12f68:	4621      	mov	r1, r4
   12f6a:	482d      	ldr	r0, [pc, #180]	; (13020 <process_complete+0xd8>)
   12f6c:	f018 f88f 	bl	2b08e <assert_print>
   12f70:	f240 111b 	movw	r1, #283	; 0x11b
   12f74:	4620      	mov	r0, r4
   12f76:	f018 f883 	bl	2b080 <assert_post_action>
	}
}
   12f7a:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
   12f7c:	e9d0 0100 	ldrd	r0, r1, [r0]
   12f80:	e88c 0003 	stmia.w	ip, {r0, r1}
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   12f84:	2300      	movs	r3, #0
   12f86:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
   12f88:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
   12f8a:	2101      	movs	r1, #1
   12f8c:	4620      	mov	r0, r4
   12f8e:	f017 fe7a 	bl	2ac86 <set_state>
   12f92:	e7f2      	b.n	12f7a <process_complete+0x32>
		*clients = mgr->clients;
   12f94:	e9d0 0100 	ldrd	r0, r1, [r0]
   12f98:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
   12f9c:	2200      	movs	r2, #0
   12f9e:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
   12fa0:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
   12fa2:	2b06      	cmp	r3, #6
   12fa4:	d00f      	beq.n	12fc6 <process_complete+0x7e>
			__ASSERT_NO_MSG(state == ONOFF_STATE_RESETTING);
   12fa6:	2b05      	cmp	r3, #5
   12fa8:	d11d      	bne.n	12fe6 <process_complete+0x9e>
			set_state(mgr, ONOFF_STATE_OFF);
   12faa:	2100      	movs	r1, #0
   12fac:	4620      	mov	r0, r4
   12fae:	f017 fe6a 	bl	2ac86 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   12fb2:	4620      	mov	r0, r4
   12fb4:	f017 fe8e 	bl	2acd4 <process_recheck>
   12fb8:	2800      	cmp	r0, #0
   12fba:	d0de      	beq.n	12f7a <process_complete+0x32>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   12fbc:	8ba3      	ldrh	r3, [r4, #28]
   12fbe:	f043 0320 	orr.w	r3, r3, #32
   12fc2:	83a3      	strh	r3, [r4, #28]
   12fc4:	e7d9      	b.n	12f7a <process_complete+0x32>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   12fc6:	f8dc 3000 	ldr.w	r3, [ip]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   12fca:	b13b      	cbz	r3, 12fdc <process_complete+0x94>
				mgr->refs += 1U;
   12fcc:	8be2      	ldrh	r2, [r4, #30]
   12fce:	3201      	adds	r2, #1
   12fd0:	83e2      	strh	r2, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
   12fd2:	2b00      	cmp	r3, #0
   12fd4:	d0f9      	beq.n	12fca <process_complete+0x82>
	return node->next;
   12fd6:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   12fd8:	2b00      	cmp	r3, #0
   12fda:	d1f6      	bne.n	12fca <process_complete+0x82>
			set_state(mgr, ONOFF_STATE_ON);
   12fdc:	2102      	movs	r1, #2
   12fde:	4620      	mov	r0, r4
   12fe0:	f017 fe51 	bl	2ac86 <set_state>
   12fe4:	e7e5      	b.n	12fb2 <process_complete+0x6a>
			__ASSERT_NO_MSG(state == ONOFF_STATE_RESETTING);
   12fe6:	4d0d      	ldr	r5, [pc, #52]	; (1301c <process_complete+0xd4>)
   12fe8:	f240 1209 	movw	r2, #265	; 0x109
   12fec:	4629      	mov	r1, r5
   12fee:	480c      	ldr	r0, [pc, #48]	; (13020 <process_complete+0xd8>)
   12ff0:	f018 f84d 	bl	2b08e <assert_print>
   12ff4:	f240 1109 	movw	r1, #265	; 0x109
   12ff8:	4628      	mov	r0, r5
   12ffa:	f018 f841 	bl	2b080 <assert_post_action>
   12ffe:	e7d4      	b.n	12faa <process_complete+0x62>
		set_state(mgr, ONOFF_STATE_OFF);
   13000:	2100      	movs	r1, #0
   13002:	f017 fe40 	bl	2ac86 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   13006:	4620      	mov	r0, r4
   13008:	f017 fe64 	bl	2acd4 <process_recheck>
   1300c:	2800      	cmp	r0, #0
   1300e:	d0b4      	beq.n	12f7a <process_complete+0x32>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   13010:	8ba3      	ldrh	r3, [r4, #28]
   13012:	f043 0320 	orr.w	r3, r3, #32
   13016:	83a3      	strh	r3, [r4, #28]
   13018:	e7af      	b.n	12f7a <process_complete+0x32>
   1301a:	bf00      	nop
   1301c:	000319cc 	.word	0x000319cc
   13020:	000318f8 	.word	0x000318f8

00013024 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   13024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13028:	b083      	sub	sp, #12
   1302a:	4604      	mov	r4, r0
   1302c:	4616      	mov	r6, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1302e:	8b83      	ldrh	r3, [r0, #28]
   13030:	f003 0707 	and.w	r7, r3, #7
	int res = 0;
	bool processing = ((mgr->flags & ONOFF_FLAG_PROCESSING) != 0);
   13034:	f003 0808 	and.w	r8, r3, #8

	__ASSERT_NO_MSG(evt != EVT_NOP);
   13038:	460d      	mov	r5, r1
   1303a:	b131      	cbz	r1, 1304a <process_event+0x26>

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   1303c:	f1b8 0f00 	cmp.w	r8, #0
   13040:	d111      	bne.n	13066 <process_event+0x42>
	list->head = NULL;
   13042:	2300      	movs	r3, #0
   13044:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
   13046:	9301      	str	r3, [sp, #4]
}
   13048:	e0a7      	b.n	1319a <process_event+0x176>
	__ASSERT_NO_MSG(evt != EVT_NOP);
   1304a:	f8df 92e8 	ldr.w	r9, [pc, #744]	; 13334 <process_event+0x310>
   1304e:	f240 1233 	movw	r2, #307	; 0x133
   13052:	4649      	mov	r1, r9
   13054:	48b8      	ldr	r0, [pc, #736]	; (13338 <process_event+0x314>)
   13056:	f018 f81a 	bl	2b08e <assert_print>
   1305a:	f240 1133 	movw	r1, #307	; 0x133
   1305e:	4648      	mov	r0, r9
   13060:	f018 f80e 	bl	2b080 <assert_post_action>
   13064:	e7ea      	b.n	1303c <process_event+0x18>
		if (evt == EVT_COMPLETE) {
   13066:	2d01      	cmp	r5, #1
   13068:	d013      	beq.n	13092 <process_event+0x6e>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);
   1306a:	2d02      	cmp	r5, #2
   1306c:	d116      	bne.n	1309c <process_event+0x78>

			mgr->flags |= ONOFF_FLAG_RECHECK;
   1306e:	8ba3      	ldrh	r3, [r4, #28]
   13070:	f043 0320 	orr.w	r3, r3, #32
   13074:	83a3      	strh	r3, [r4, #28]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   13076:	f104 0014 	add.w	r0, r4, #20
   1307a:	f013 f82d 	bl	260d8 <z_spin_unlock_valid>
   1307e:	2800      	cmp	r0, #0
   13080:	f000 8175 	beq.w	1336e <process_event+0x34a>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   13084:	f386 8811 	msr	BASEPRI, r6
   13088:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   1308c:	b003      	add	sp, #12
   1308e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   13092:	8ba3      	ldrh	r3, [r4, #28]
   13094:	f043 0310 	orr.w	r3, r3, #16
   13098:	83a3      	strh	r3, [r4, #28]
   1309a:	e7ec      	b.n	13076 <process_event+0x52>
			__ASSERT_NO_MSG(evt == EVT_RECHECK);
   1309c:	4da5      	ldr	r5, [pc, #660]	; (13334 <process_event+0x310>)
   1309e:	f44f 729e 	mov.w	r2, #316	; 0x13c
   130a2:	4629      	mov	r1, r5
   130a4:	48a4      	ldr	r0, [pc, #656]	; (13338 <process_event+0x314>)
   130a6:	f017 fff2 	bl	2b08e <assert_print>
   130aa:	f44f 719e 	mov.w	r1, #316	; 0x13c
   130ae:	4628      	mov	r0, r5
   130b0:	f017 ffe6 	bl	2b080 <assert_post_action>
   130b4:	e7db      	b.n	1306e <process_event+0x4a>
			evt = process_recheck(mgr);
   130b6:	4620      	mov	r0, r4
   130b8:	f017 fe0c 	bl	2acd4 <process_recheck>
   130bc:	4605      	mov	r5, r0
   130be:	e06e      	b.n	1319e <process_event+0x17a>
			res = mgr->last_res;
   130c0:	f8d4 9018 	ldr.w	r9, [r4, #24]
			process_complete(mgr, &clients, res);
   130c4:	464a      	mov	r2, r9
   130c6:	4669      	mov	r1, sp
   130c8:	4620      	mov	r0, r4
   130ca:	f7ff ff3d 	bl	12f48 <process_complete>
		onoff_transition_fn transit = NULL;
   130ce:	2500      	movs	r5, #0
   130d0:	e010      	b.n	130f4 <process_event+0xd0>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
   130d2:	2f00      	cmp	r7, #0
   130d4:	d17f      	bne.n	131d6 <process_event+0x1b2>
	return list->head;
   130d6:	6823      	ldr	r3, [r4, #0]
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   130d8:	2b00      	cmp	r3, #0
   130da:	f000 8089 	beq.w	131f0 <process_event+0x1cc>
			transit = mgr->transitions->start;
   130de:	6923      	ldr	r3, [r4, #16]
   130e0:	681d      	ldr	r5, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
   130e2:	2d00      	cmp	r5, #0
   130e4:	f000 8091 	beq.w	1320a <process_event+0x1e6>
			set_state(mgr, ONOFF_STATE_TO_ON);
   130e8:	2106      	movs	r1, #6
   130ea:	4620      	mov	r0, r4
   130ec:	f017 fdcb 	bl	2ac86 <set_state>
		res = 0;
   130f0:	f04f 0900 	mov.w	r9, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   130f4:	8ba3      	ldrh	r3, [r4, #28]
   130f6:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   130fa:	45b8      	cmp	r8, r7
   130fc:	f000 8100 	beq.w	13300 <process_event+0x2dc>
   13100:	68a2      	ldr	r2, [r4, #8]
   13102:	2a00      	cmp	r2, #0
   13104:	f000 80fe 	beq.w	13304 <process_event+0x2e0>
   13108:	2201      	movs	r2, #1
		if (do_monitors
   1310a:	4617      	mov	r7, r2
   1310c:	b91a      	cbnz	r2, 13116 <process_event+0xf2>
   1310e:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
   13110:	2a00      	cmp	r2, #0
   13112:	f000 80f9 	beq.w	13308 <process_event+0x2e4>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   13116:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
   1311a:	83a3      	strh	r3, [r4, #28]
			k_spin_unlock(&mgr->lock, key);
   1311c:	f104 0a14 	add.w	sl, r4, #20
   13120:	4650      	mov	r0, sl
   13122:	f012 ffd9 	bl	260d8 <z_spin_unlock_valid>
   13126:	2800      	cmp	r0, #0
   13128:	f000 80f2 	beq.w	13310 <process_event+0x2ec>
   1312c:	f386 8811 	msr	BASEPRI, r6
   13130:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   13134:	2f00      	cmp	r7, #0
   13136:	f040 80f7 	bne.w	13328 <process_event+0x304>
   1313a:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
   1313c:	b12b      	cbz	r3, 1314a <process_event+0x126>
				notify_all(mgr, &clients, state, res);
   1313e:	464b      	mov	r3, r9
   13140:	4642      	mov	r2, r8
   13142:	4669      	mov	r1, sp
   13144:	4620      	mov	r0, r4
   13146:	f017 fe07 	bl	2ad58 <notify_all>
			if (transit != NULL) {
   1314a:	b115      	cbz	r5, 13152 <process_event+0x12e>
				transit(mgr, transition_complete);
   1314c:	497b      	ldr	r1, [pc, #492]	; (1333c <process_event+0x318>)
   1314e:	4620      	mov	r0, r4
   13150:	47a8      	blx	r5
	__asm__ volatile(
   13152:	f04f 0340 	mov.w	r3, #64	; 0x40
   13156:	f3ef 8611 	mrs	r6, BASEPRI
   1315a:	f383 8812 	msr	BASEPRI_MAX, r3
   1315e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   13162:	4650      	mov	r0, sl
   13164:	f012 ffa8 	bl	260b8 <z_spin_lock_valid>
   13168:	2800      	cmp	r0, #0
   1316a:	f000 80eb 	beq.w	13344 <process_event+0x320>
	z_spin_lock_set_owner(l);
   1316e:	4650      	mov	r0, sl
   13170:	f012 ffc2 	bl	260f8 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   13174:	8ba3      	ldrh	r3, [r4, #28]
   13176:	f023 0308 	bic.w	r3, r3, #8
   1317a:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   1317c:	8ba3      	ldrh	r3, [r4, #28]
   1317e:	f013 0f10 	tst.w	r3, #16
   13182:	f000 80ea 	beq.w	1335a <process_event+0x336>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   13186:	f023 0310 	bic.w	r3, r3, #16
   1318a:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
   1318c:	2501      	movs	r5, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   1318e:	8ba7      	ldrh	r7, [r4, #28]
   13190:	f007 0707 	and.w	r7, r7, #7
	} while (evt != EVT_NOP);
   13194:	2d00      	cmp	r5, #0
   13196:	f43f af6e 	beq.w	13076 <process_event+0x52>
		if (evt == EVT_RECHECK) {
   1319a:	2d02      	cmp	r5, #2
   1319c:	d08b      	beq.n	130b6 <process_event+0x92>
		if (evt == EVT_NOP) {
   1319e:	2d00      	cmp	r5, #0
   131a0:	f43f af69 	beq.w	13076 <process_event+0x52>
		if (evt == EVT_COMPLETE) {
   131a4:	2d01      	cmp	r5, #1
   131a6:	d08b      	beq.n	130c0 <process_event+0x9c>
		} else if (evt == EVT_START) {
   131a8:	2d03      	cmp	r5, #3
   131aa:	d092      	beq.n	130d2 <process_event+0xae>
		} else if (evt == EVT_STOP) {
   131ac:	2d04      	cmp	r5, #4
   131ae:	d03a      	beq.n	13226 <process_event+0x202>
		} else if (evt == EVT_RESET) {
   131b0:	2d05      	cmp	r5, #5
   131b2:	f040 8096 	bne.w	132e2 <process_event+0x2be>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   131b6:	2f01      	cmp	r7, #1
   131b8:	d16b      	bne.n	13292 <process_event+0x26e>
   131ba:	6823      	ldr	r3, [r4, #0]
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   131bc:	2b00      	cmp	r3, #0
   131be:	d075      	beq.n	132ac <process_event+0x288>
			transit = mgr->transitions->reset;
   131c0:	6923      	ldr	r3, [r4, #16]
   131c2:	689d      	ldr	r5, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
   131c4:	2d00      	cmp	r5, #0
   131c6:	d07e      	beq.n	132c6 <process_event+0x2a2>
			set_state(mgr, ONOFF_STATE_RESETTING);
   131c8:	2105      	movs	r1, #5
   131ca:	4620      	mov	r0, r4
   131cc:	f017 fd5b 	bl	2ac86 <set_state>
		res = 0;
   131d0:	f04f 0900 	mov.w	r9, #0
   131d4:	e78e      	b.n	130f4 <process_event+0xd0>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
   131d6:	4d57      	ldr	r5, [pc, #348]	; (13334 <process_event+0x310>)
   131d8:	f44f 72ab 	mov.w	r2, #342	; 0x156
   131dc:	4629      	mov	r1, r5
   131de:	4856      	ldr	r0, [pc, #344]	; (13338 <process_event+0x314>)
   131e0:	f017 ff55 	bl	2b08e <assert_print>
   131e4:	f44f 71ab 	mov.w	r1, #342	; 0x156
   131e8:	4628      	mov	r0, r5
   131ea:	f017 ff49 	bl	2b080 <assert_post_action>
   131ee:	e772      	b.n	130d6 <process_event+0xb2>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   131f0:	4d50      	ldr	r5, [pc, #320]	; (13334 <process_event+0x310>)
   131f2:	f240 1257 	movw	r2, #343	; 0x157
   131f6:	4629      	mov	r1, r5
   131f8:	484f      	ldr	r0, [pc, #316]	; (13338 <process_event+0x314>)
   131fa:	f017 ff48 	bl	2b08e <assert_print>
   131fe:	f240 1157 	movw	r1, #343	; 0x157
   13202:	4628      	mov	r0, r5
   13204:	f017 ff3c 	bl	2b080 <assert_post_action>
   13208:	e769      	b.n	130de <process_event+0xba>
			__ASSERT_NO_MSG(transit != NULL);
   1320a:	f8df 8128 	ldr.w	r8, [pc, #296]	; 13334 <process_event+0x310>
   1320e:	f44f 72ad 	mov.w	r2, #346	; 0x15a
   13212:	4641      	mov	r1, r8
   13214:	4848      	ldr	r0, [pc, #288]	; (13338 <process_event+0x314>)
   13216:	f017 ff3a 	bl	2b08e <assert_print>
   1321a:	f44f 71ad 	mov.w	r1, #346	; 0x15a
   1321e:	4640      	mov	r0, r8
   13220:	f017 ff2e 	bl	2b080 <assert_post_action>
   13224:	e760      	b.n	130e8 <process_event+0xc4>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
   13226:	2f02      	cmp	r7, #2
   13228:	d10b      	bne.n	13242 <process_event+0x21e>
			__ASSERT_NO_MSG(mgr->refs == 0);
   1322a:	8be3      	ldrh	r3, [r4, #30]
   1322c:	b9b3      	cbnz	r3, 1325c <process_event+0x238>
			transit = mgr->transitions->stop;
   1322e:	6923      	ldr	r3, [r4, #16]
   13230:	685d      	ldr	r5, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
   13232:	b305      	cbz	r5, 13276 <process_event+0x252>
			set_state(mgr, ONOFF_STATE_TO_OFF);
   13234:	2104      	movs	r1, #4
   13236:	4620      	mov	r0, r4
   13238:	f017 fd25 	bl	2ac86 <set_state>
		res = 0;
   1323c:	f04f 0900 	mov.w	r9, #0
   13240:	e758      	b.n	130f4 <process_event+0xd0>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
   13242:	4d3c      	ldr	r5, [pc, #240]	; (13334 <process_event+0x310>)
   13244:	f240 125d 	movw	r2, #349	; 0x15d
   13248:	4629      	mov	r1, r5
   1324a:	483b      	ldr	r0, [pc, #236]	; (13338 <process_event+0x314>)
   1324c:	f017 ff1f 	bl	2b08e <assert_print>
   13250:	f240 115d 	movw	r1, #349	; 0x15d
   13254:	4628      	mov	r0, r5
   13256:	f017 ff13 	bl	2b080 <assert_post_action>
   1325a:	e7e6      	b.n	1322a <process_event+0x206>
			__ASSERT_NO_MSG(mgr->refs == 0);
   1325c:	4d35      	ldr	r5, [pc, #212]	; (13334 <process_event+0x310>)
   1325e:	f44f 72af 	mov.w	r2, #350	; 0x15e
   13262:	4629      	mov	r1, r5
   13264:	4834      	ldr	r0, [pc, #208]	; (13338 <process_event+0x314>)
   13266:	f017 ff12 	bl	2b08e <assert_print>
   1326a:	f44f 71af 	mov.w	r1, #350	; 0x15e
   1326e:	4628      	mov	r0, r5
   13270:	f017 ff06 	bl	2b080 <assert_post_action>
   13274:	e7db      	b.n	1322e <process_event+0x20a>
			__ASSERT_NO_MSG(transit != NULL);
   13276:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 13334 <process_event+0x310>
   1327a:	f240 1261 	movw	r2, #353	; 0x161
   1327e:	4641      	mov	r1, r8
   13280:	482d      	ldr	r0, [pc, #180]	; (13338 <process_event+0x314>)
   13282:	f017 ff04 	bl	2b08e <assert_print>
   13286:	f240 1161 	movw	r1, #353	; 0x161
   1328a:	4640      	mov	r0, r8
   1328c:	f017 fef8 	bl	2b080 <assert_post_action>
   13290:	e7d0      	b.n	13234 <process_event+0x210>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   13292:	4d28      	ldr	r5, [pc, #160]	; (13334 <process_event+0x310>)
   13294:	f44f 72b2 	mov.w	r2, #356	; 0x164
   13298:	4629      	mov	r1, r5
   1329a:	4827      	ldr	r0, [pc, #156]	; (13338 <process_event+0x314>)
   1329c:	f017 fef7 	bl	2b08e <assert_print>
   132a0:	f44f 71b2 	mov.w	r1, #356	; 0x164
   132a4:	4628      	mov	r0, r5
   132a6:	f017 feeb 	bl	2b080 <assert_post_action>
   132aa:	e786      	b.n	131ba <process_event+0x196>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   132ac:	4d21      	ldr	r5, [pc, #132]	; (13334 <process_event+0x310>)
   132ae:	f240 1265 	movw	r2, #357	; 0x165
   132b2:	4629      	mov	r1, r5
   132b4:	4820      	ldr	r0, [pc, #128]	; (13338 <process_event+0x314>)
   132b6:	f017 feea 	bl	2b08e <assert_print>
   132ba:	f240 1165 	movw	r1, #357	; 0x165
   132be:	4628      	mov	r0, r5
   132c0:	f017 fede 	bl	2b080 <assert_post_action>
   132c4:	e77c      	b.n	131c0 <process_event+0x19c>
			__ASSERT_NO_MSG(transit != NULL);
   132c6:	f8df 806c 	ldr.w	r8, [pc, #108]	; 13334 <process_event+0x310>
   132ca:	f44f 72b4 	mov.w	r2, #360	; 0x168
   132ce:	4641      	mov	r1, r8
   132d0:	4819      	ldr	r0, [pc, #100]	; (13338 <process_event+0x314>)
   132d2:	f017 fedc 	bl	2b08e <assert_print>
   132d6:	f44f 71b4 	mov.w	r1, #360	; 0x168
   132da:	4640      	mov	r0, r8
   132dc:	f017 fed0 	bl	2b080 <assert_post_action>
   132e0:	e772      	b.n	131c8 <process_event+0x1a4>
			__ASSERT_NO_MSG(false);
   132e2:	4d14      	ldr	r5, [pc, #80]	; (13334 <process_event+0x310>)
   132e4:	f240 126b 	movw	r2, #363	; 0x16b
   132e8:	4629      	mov	r1, r5
   132ea:	4813      	ldr	r0, [pc, #76]	; (13338 <process_event+0x314>)
   132ec:	f017 fecf 	bl	2b08e <assert_print>
   132f0:	f240 116b 	movw	r1, #363	; 0x16b
   132f4:	4628      	mov	r0, r5
   132f6:	f017 fec3 	bl	2b080 <assert_post_action>
		onoff_transition_fn transit = NULL;
   132fa:	2500      	movs	r5, #0
		res = 0;
   132fc:	46a9      	mov	r9, r5
   132fe:	e6f9      	b.n	130f4 <process_event+0xd0>
				   && !sys_slist_is_empty(&mgr->monitors);
   13300:	2200      	movs	r2, #0
   13302:	e702      	b.n	1310a <process_event+0xe6>
   13304:	2200      	movs	r2, #0
   13306:	e700      	b.n	1310a <process_event+0xe6>
		    || (transit != NULL)) {
   13308:	2d00      	cmp	r5, #0
   1330a:	f47f af04 	bne.w	13116 <process_event+0xf2>
   1330e:	e735      	b.n	1317c <process_event+0x158>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   13310:	f8df b02c 	ldr.w	fp, [pc, #44]	; 13340 <process_event+0x31c>
   13314:	22b9      	movs	r2, #185	; 0xb9
   13316:	4659      	mov	r1, fp
   13318:	4807      	ldr	r0, [pc, #28]	; (13338 <process_event+0x314>)
   1331a:	f017 feb8 	bl	2b08e <assert_print>
   1331e:	21b9      	movs	r1, #185	; 0xb9
   13320:	4658      	mov	r0, fp
   13322:	f017 fead 	bl	2b080 <assert_post_action>
   13326:	e701      	b.n	1312c <process_event+0x108>
				notify_monitors(mgr, state, res);
   13328:	464a      	mov	r2, r9
   1332a:	4641      	mov	r1, r8
   1332c:	4620      	mov	r0, r4
   1332e:	f017 fcb2 	bl	2ac96 <notify_monitors>
   13332:	e702      	b.n	1313a <process_event+0x116>
   13334:	000319cc 	.word	0x000319cc
   13338:	000318f8 	.word	0x000318f8
   1333c:	0001338d 	.word	0x0001338d
   13340:	000319f0 	.word	0x000319f0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   13344:	4d0f      	ldr	r5, [pc, #60]	; (13384 <process_event+0x360>)
   13346:	228e      	movs	r2, #142	; 0x8e
   13348:	4629      	mov	r1, r5
   1334a:	480f      	ldr	r0, [pc, #60]	; (13388 <process_event+0x364>)
   1334c:	f017 fe9f 	bl	2b08e <assert_print>
   13350:	218e      	movs	r1, #142	; 0x8e
   13352:	4628      	mov	r0, r5
   13354:	f017 fe94 	bl	2b080 <assert_post_action>
   13358:	e709      	b.n	1316e <process_event+0x14a>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   1335a:	f013 0f20 	tst.w	r3, #32
   1335e:	d004      	beq.n	1336a <process_event+0x346>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   13360:	f023 0320 	bic.w	r3, r3, #32
   13364:	83a3      	strh	r3, [r4, #28]
			evt = EVT_RECHECK;
   13366:	2502      	movs	r5, #2
   13368:	e711      	b.n	1318e <process_event+0x16a>
		evt = EVT_NOP;
   1336a:	2500      	movs	r5, #0
   1336c:	e70f      	b.n	1318e <process_event+0x16a>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1336e:	4c05      	ldr	r4, [pc, #20]	; (13384 <process_event+0x360>)
   13370:	22b9      	movs	r2, #185	; 0xb9
   13372:	4621      	mov	r1, r4
   13374:	4804      	ldr	r0, [pc, #16]	; (13388 <process_event+0x364>)
   13376:	f017 fe8a 	bl	2b08e <assert_print>
   1337a:	21b9      	movs	r1, #185	; 0xb9
   1337c:	4620      	mov	r0, r4
   1337e:	f017 fe7f 	bl	2b080 <assert_post_action>
   13382:	e67f      	b.n	13084 <process_event+0x60>
   13384:	000319f0 	.word	0x000319f0
   13388:	000318f8 	.word	0x000318f8

0001338c <transition_complete>:
{
   1338c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13390:	4604      	mov	r4, r0
   13392:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   13394:	f100 0614 	add.w	r6, r0, #20
   13398:	f04f 0340 	mov.w	r3, #64	; 0x40
   1339c:	f3ef 8711 	mrs	r7, BASEPRI
   133a0:	f383 8812 	msr	BASEPRI_MAX, r3
   133a4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   133a8:	4630      	mov	r0, r6
   133aa:	f012 fe85 	bl	260b8 <z_spin_lock_valid>
   133ae:	b150      	cbz	r0, 133c6 <transition_complete+0x3a>
	z_spin_lock_set_owner(l);
   133b0:	4630      	mov	r0, r6
   133b2:	f012 fea1 	bl	260f8 <z_spin_lock_set_owner>
	mgr->last_res = res;
   133b6:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
   133b8:	463a      	mov	r2, r7
   133ba:	2101      	movs	r1, #1
   133bc:	4620      	mov	r0, r4
   133be:	f7ff fe31 	bl	13024 <process_event>
}
   133c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   133c6:	f8df 8018 	ldr.w	r8, [pc, #24]	; 133e0 <transition_complete+0x54>
   133ca:	228e      	movs	r2, #142	; 0x8e
   133cc:	4641      	mov	r1, r8
   133ce:	4805      	ldr	r0, [pc, #20]	; (133e4 <transition_complete+0x58>)
   133d0:	f017 fe5d 	bl	2b08e <assert_print>
   133d4:	218e      	movs	r1, #142	; 0x8e
   133d6:	4640      	mov	r0, r8
   133d8:	f017 fe52 	bl	2b080 <assert_post_action>
   133dc:	e7e8      	b.n	133b0 <transition_complete+0x24>
   133de:	bf00      	nop
   133e0:	000319f0 	.word	0x000319f0
   133e4:	000318f8 	.word	0x000318f8

000133e8 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   133e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   133ec:	4604      	mov	r4, r0
   133ee:	4688      	mov	r8, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   133f0:	f017 fc89 	bl	2ad06 <validate_args>

	if (rv < 0) {
   133f4:	1e06      	subs	r6, r0, #0
   133f6:	db53      	blt.n	134a0 <onoff_request+0xb8>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   133f8:	f104 0714 	add.w	r7, r4, #20
   133fc:	f04f 0340 	mov.w	r3, #64	; 0x40
   13400:	f3ef 8911 	mrs	r9, BASEPRI
   13404:	f383 8812 	msr	BASEPRI_MAX, r3
   13408:	f3bf 8f6f 	isb	sy
   1340c:	4638      	mov	r0, r7
   1340e:	f012 fe53 	bl	260b8 <z_spin_lock_valid>
   13412:	b1e8      	cbz	r0, 13450 <onoff_request+0x68>
	z_spin_lock_set_owner(l);
   13414:	4638      	mov	r0, r7
   13416:	f012 fe6f 	bl	260f8 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1341a:	8ba5      	ldrh	r5, [r4, #28]
   1341c:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   13420:	8be3      	ldrh	r3, [r4, #30]
   13422:	f64f 72ff 	movw	r2, #65535	; 0xffff
   13426:	4293      	cmp	r3, r2
   13428:	d050      	beq.n	134cc <onoff_request+0xe4>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
   1342a:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
   1342c:	2d02      	cmp	r5, #2
   1342e:	d01a      	beq.n	13466 <onoff_request+0x7e>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
   13430:	b305      	cbz	r5, 13474 <onoff_request+0x8c>
		   || (state == ONOFF_STATE_TO_OFF)
   13432:	2d04      	cmp	r5, #4
   13434:	d01e      	beq.n	13474 <onoff_request+0x8c>
		   || (state == ONOFF_STATE_TO_ON)) {
   13436:	2d06      	cmp	r5, #6
   13438:	d01c      	beq.n	13474 <onoff_request+0x8c>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
   1343a:	2d05      	cmp	r5, #5
   1343c:	d04d      	beq.n	134da <onoff_request+0xf2>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   1343e:	2d01      	cmp	r5, #1
   13440:	d131      	bne.n	134a6 <onoff_request+0xbe>
		rv = -EIO;
   13442:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
   13446:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
   1344a:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
   1344c:	4652      	mov	r2, sl
   1344e:	e017      	b.n	13480 <onoff_request+0x98>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   13450:	4d36      	ldr	r5, [pc, #216]	; (1352c <onoff_request+0x144>)
   13452:	228e      	movs	r2, #142	; 0x8e
   13454:	4629      	mov	r1, r5
   13456:	4836      	ldr	r0, [pc, #216]	; (13530 <onoff_request+0x148>)
   13458:	f017 fe19 	bl	2b08e <assert_print>
   1345c:	218e      	movs	r1, #142	; 0x8e
   1345e:	4628      	mov	r0, r5
   13460:	f017 fe0e 	bl	2b080 <assert_post_action>
   13464:	e7d6      	b.n	13414 <onoff_request+0x2c>
		mgr->refs += 1U;
   13466:	3301      	adds	r3, #1
   13468:	83e3      	strh	r3, [r4, #30]
		notify = true;
   1346a:	f04f 0a01 	mov.w	sl, #1
	bool start = false;             /* trigger a start transition */
   1346e:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
   13470:	461a      	mov	r2, r3
   13472:	e005      	b.n	13480 <onoff_request+0x98>
		start = (state == ONOFF_STATE_OFF);
   13474:	fab5 f385 	clz	r3, r5
   13478:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
   1347a:	f04f 0a00 	mov.w	sl, #0
		add_client = true;
   1347e:	2201      	movs	r2, #1
	}

out:
	if (add_client) {
   13480:	b142      	cbz	r2, 13494 <onoff_request+0xac>
	parent->next = child;
   13482:	2200      	movs	r2, #0
   13484:	f8c8 2000 	str.w	r2, [r8]
	return list->tail;
   13488:	6862      	ldr	r2, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   1348a:	b36a      	cbz	r2, 134e8 <onoff_request+0x100>
	parent->next = child;
   1348c:	f8c2 8000 	str.w	r8, [r2]
	list->tail = node;
   13490:	f8c4 8004 	str.w	r8, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
   13494:	b36b      	cbz	r3, 134f2 <onoff_request+0x10a>
		process_event(mgr, EVT_RECHECK, key);
   13496:	464a      	mov	r2, r9
   13498:	2102      	movs	r1, #2
   1349a:	4620      	mov	r0, r4
   1349c:	f7ff fdc2 	bl	13024 <process_event>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   134a0:	4630      	mov	r0, r6
   134a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   134a6:	4e23      	ldr	r6, [pc, #140]	; (13534 <onoff_request+0x14c>)
   134a8:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
   134ac:	4631      	mov	r1, r6
   134ae:	4820      	ldr	r0, [pc, #128]	; (13530 <onoff_request+0x148>)
   134b0:	f017 fded 	bl	2b08e <assert_print>
   134b4:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   134b8:	4630      	mov	r0, r6
   134ba:	f017 fde1 	bl	2b080 <assert_post_action>
		rv = -EIO;
   134be:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
   134c2:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
   134c6:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
   134c8:	4652      	mov	r2, sl
   134ca:	e7d9      	b.n	13480 <onoff_request+0x98>
		rv = -EAGAIN;
   134cc:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
   134d0:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
   134d4:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
   134d6:	4652      	mov	r2, sl
   134d8:	e7d2      	b.n	13480 <onoff_request+0x98>
		rv = -ENOTSUP;
   134da:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
   134de:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
   134e2:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
   134e4:	4652      	mov	r2, sl
   134e6:	e7cb      	b.n	13480 <onoff_request+0x98>
   134e8:	f8c4 8004 	str.w	r8, [r4, #4]
	list->head = node;
   134ec:	f8c4 8000 	str.w	r8, [r4]
}
   134f0:	e7d0      	b.n	13494 <onoff_request+0xac>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   134f2:	4638      	mov	r0, r7
   134f4:	f012 fdf0 	bl	260d8 <z_spin_unlock_valid>
   134f8:	b168      	cbz	r0, 13516 <onoff_request+0x12e>
	__asm__ volatile(
   134fa:	f389 8811 	msr	BASEPRI, r9
   134fe:	f3bf 8f6f 	isb	sy
		if (notify) {
   13502:	f1ba 0f00 	cmp.w	sl, #0
   13506:	d0cb      	beq.n	134a0 <onoff_request+0xb8>
			notify_one(mgr, cli, state, 0);
   13508:	2300      	movs	r3, #0
   1350a:	462a      	mov	r2, r5
   1350c:	4641      	mov	r1, r8
   1350e:	4620      	mov	r0, r4
   13510:	f017 fc0f 	bl	2ad32 <notify_one>
   13514:	e7c4      	b.n	134a0 <onoff_request+0xb8>
   13516:	4f05      	ldr	r7, [pc, #20]	; (1352c <onoff_request+0x144>)
   13518:	22b9      	movs	r2, #185	; 0xb9
   1351a:	4639      	mov	r1, r7
   1351c:	4804      	ldr	r0, [pc, #16]	; (13530 <onoff_request+0x148>)
   1351e:	f017 fdb6 	bl	2b08e <assert_print>
   13522:	21b9      	movs	r1, #185	; 0xb9
   13524:	4638      	mov	r0, r7
   13526:	f017 fdab 	bl	2b080 <assert_post_action>
   1352a:	e7e6      	b.n	134fa <onoff_request+0x112>
   1352c:	000319f0 	.word	0x000319f0
   13530:	000318f8 	.word	0x000318f8
   13534:	000319cc 	.word	0x000319cc

00013538 <sys_heap_free>:
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
	if (mem == NULL) {
   13538:	b3b1      	cbz	r1, 135a8 <sys_heap_free+0x70>
{
   1353a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
   1353e:	6804      	ldr	r4, [r0, #0]
	chunkid_t c = mem_to_chunkid(h, mem);
   13540:	4620      	mov	r0, r4
   13542:	f017 fcc9 	bl	2aed8 <mem_to_chunkid>
   13546:	4605      	mov	r5, r0

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   13548:	00c6      	lsls	r6, r0, #3

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   1354a:	1cb7      	adds	r7, r6, #2
   1354c:	5be3      	ldrh	r3, [r4, r7]

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
   1354e:	f013 0f01 	tst.w	r3, #1
   13552:	d012      	beq.n	1357a <sys_heap_free+0x42>
   13554:	5be3      	ldrh	r3, [r4, r7]
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
   13556:	eb05 0353 	add.w	r3, r5, r3, lsr #1
		return ((uint16_t *)cmem)[f];
   1355a:	f834 2033 	ldrh.w	r2, [r4, r3, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   1355e:	1a9b      	subs	r3, r3, r2
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
   13560:	429d      	cmp	r5, r3
   13562:	d116      	bne.n	13592 <sys_heap_free+0x5a>
	void *cmem = &buf[c];
   13564:	4426      	add	r6, r4
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   13566:	8873      	ldrh	r3, [r6, #2]
   13568:	f023 0301 	bic.w	r3, r3, #1
   1356c:	8073      	strh	r3, [r6, #2]
#ifdef CONFIG_SYS_HEAP_LISTENER
	heap_listener_notify_free(HEAP_ID_FROM_POINTER(heap), mem,
				  chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	free_chunk(h, c);
   1356e:	4629      	mov	r1, r5
   13570:	4620      	mov	r0, r4
   13572:	f017 fccd 	bl	2af10 <free_chunk>
}
   13576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(chunk_used(h, c),
   1357a:	f8df 8030 	ldr.w	r8, [pc, #48]	; 135ac <sys_heap_free+0x74>
   1357e:	22ac      	movs	r2, #172	; 0xac
   13580:	4641      	mov	r1, r8
   13582:	480b      	ldr	r0, [pc, #44]	; (135b0 <sys_heap_free+0x78>)
   13584:	f017 fd83 	bl	2b08e <assert_print>
   13588:	21ac      	movs	r1, #172	; 0xac
   1358a:	4640      	mov	r0, r8
   1358c:	f017 fd78 	bl	2b080 <assert_post_action>
   13590:	e7e0      	b.n	13554 <sys_heap_free+0x1c>
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
   13592:	4f06      	ldr	r7, [pc, #24]	; (135ac <sys_heap_free+0x74>)
   13594:	22b4      	movs	r2, #180	; 0xb4
   13596:	4639      	mov	r1, r7
   13598:	4805      	ldr	r0, [pc, #20]	; (135b0 <sys_heap_free+0x78>)
   1359a:	f017 fd78 	bl	2b08e <assert_print>
   1359e:	21b4      	movs	r1, #180	; 0xb4
   135a0:	4638      	mov	r0, r7
   135a2:	f017 fd6d 	bl	2b080 <assert_post_action>
   135a6:	e7dd      	b.n	13564 <sys_heap_free+0x2c>
   135a8:	4770      	bx	lr
   135aa:	bf00      	nop
   135ac:	00031a20 	.word	0x00031a20
   135b0:	000318f8 	.word	0x000318f8

000135b4 <sys_heap_aligned_alloc>:

	return mem;
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   135b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   135b8:	460c      	mov	r4, r1
   135ba:	4615      	mov	r5, r2
	struct z_heap *h = heap->heap;
   135bc:	6806      	ldr	r6, [r0, #0]
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   135be:	424b      	negs	r3, r1
   135c0:	ea03 0801 	and.w	r8, r3, r1
	if (align != rew) {
   135c4:	ea31 0303 	bics.w	r3, r1, r3
   135c8:	d041      	beq.n	1364e <sys_heap_aligned_alloc+0x9a>
		align -= rew;
   135ca:	eba1 0408 	sub.w	r4, r1, r8
		gap = MIN(rew, chunk_header_bytes(h));
   135ce:	f1b8 0f03 	cmp.w	r8, #3
   135d2:	d847      	bhi.n	13664 <sys_heap_aligned_alloc+0xb0>
   135d4:	4647      	mov	r7, r8
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   135d6:	1e63      	subs	r3, r4, #1
   135d8:	4223      	tst	r3, r4
   135da:	d145      	bne.n	13668 <sys_heap_aligned_alloc+0xb4>

	if (bytes == 0 || size_too_big(h, bytes)) {
   135dc:	2d00      	cmp	r5, #0
   135de:	d065      	beq.n	136ac <sys_heap_aligned_alloc+0xf8>
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   135e0:	68b3      	ldr	r3, [r6, #8]
   135e2:	ebb3 0fd5 	cmp.w	r3, r5, lsr #3
   135e6:	d963      	bls.n	136b0 <sys_heap_aligned_alloc+0xfc>
	/*
	 * Find a free block that is guaranteed to fit.
	 * We over-allocate to account for alignment and then free
	 * the extra allocations afterwards.
	 */
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   135e8:	1961      	adds	r1, r4, r5
   135ea:	1bc9      	subs	r1, r1, r7
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   135ec:	310b      	adds	r1, #11
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   135ee:	08c9      	lsrs	r1, r1, #3
   135f0:	4630      	mov	r0, r6
   135f2:	f017 fcbe 	bl	2af72 <alloc_chunk>

	if (c0 == 0) {
   135f6:	4607      	mov	r7, r0
   135f8:	2800      	cmp	r0, #0
   135fa:	d05b      	beq.n	136b4 <sys_heap_aligned_alloc+0x100>
		return NULL;
	}
	uint8_t *mem = chunk_mem(h, c0);
   135fc:	4601      	mov	r1, r0
   135fe:	4630      	mov	r0, r6
   13600:	f017 fbe7 	bl	2add2 <chunk_mem>

	/* Align allocated memory */
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   13604:	4440      	add	r0, r8
   13606:	4420      	add	r0, r4
   13608:	3801      	subs	r0, #1
   1360a:	4264      	negs	r4, r4
   1360c:	4004      	ands	r4, r0
   1360e:	eba4 0408 	sub.w	r4, r4, r8
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   13612:	4425      	add	r5, r4
   13614:	3507      	adds	r5, #7
   13616:	f025 0507 	bic.w	r5, r5, #7

	/* Get corresponding chunks */
	chunkid_t c = mem_to_chunkid(h, mem);
   1361a:	4621      	mov	r1, r4
   1361c:	4630      	mov	r0, r6
   1361e:	f017 fc5b 	bl	2aed8 <mem_to_chunkid>
   13622:	4680      	mov	r8, r0
	chunkid_t c_end = end - chunk_buf(h);
   13624:	1bad      	subs	r5, r5, r6
   13626:	10ed      	asrs	r5, r5, #3
	CHECK(c >= c0 && c  < c_end && c_end <= c0 + padded_sz);

	/* Split and free unused prefix */
	if (c > c0) {
   13628:	4287      	cmp	r7, r0
   1362a:	d32b      	bcc.n	13684 <sys_heap_aligned_alloc+0xd0>
	void *cmem = &buf[c];
   1362c:	ea4f 07c8 	mov.w	r7, r8, lsl #3
		return ((uint16_t *)cmem)[f];
   13630:	eb06 03c8 	add.w	r3, r6, r8, lsl #3
   13634:	885b      	ldrh	r3, [r3, #2]
	return c + chunk_size(h, c);
   13636:	eb08 0353 	add.w	r3, r8, r3, lsr #1
		split_chunks(h, c0, c);
		free_list_add(h, c0);
	}

	/* Split and free unused suffix */
	if (right_chunk(h, c) > c_end) {
   1363a:	429d      	cmp	r5, r3
   1363c:	d32c      	bcc.n	13698 <sys_heap_aligned_alloc+0xe4>
	void *cmem = &buf[c];
   1363e:	443e      	add	r6, r7
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   13640:	8873      	ldrh	r3, [r6, #2]
   13642:	f043 0301 	orr.w	r3, r3, #1
   13646:	8073      	strh	r3, [r6, #2]
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   13648:	4620      	mov	r0, r4
   1364a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   1364e:	2904      	cmp	r1, #4
   13650:	d903      	bls.n	1365a <sys_heap_aligned_alloc+0xa6>
		rew = 0;
   13652:	f04f 0800 	mov.w	r8, #0
		gap = chunk_header_bytes(h);
   13656:	2704      	movs	r7, #4
   13658:	e7bd      	b.n	135d6 <sys_heap_aligned_alloc+0x22>
			return sys_heap_alloc(heap, bytes);
   1365a:	4611      	mov	r1, r2
   1365c:	f017 fcc4 	bl	2afe8 <sys_heap_alloc>
   13660:	4604      	mov	r4, r0
   13662:	e7f1      	b.n	13648 <sys_heap_aligned_alloc+0x94>
		gap = MIN(rew, chunk_header_bytes(h));
   13664:	2704      	movs	r7, #4
   13666:	e7b6      	b.n	135d6 <sys_heap_aligned_alloc+0x22>
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   13668:	f8df 904c 	ldr.w	r9, [pc, #76]	; 136b8 <sys_heap_aligned_alloc+0x104>
   1366c:	f44f 72a0 	mov.w	r2, #320	; 0x140
   13670:	4649      	mov	r1, r9
   13672:	4812      	ldr	r0, [pc, #72]	; (136bc <sys_heap_aligned_alloc+0x108>)
   13674:	f017 fd0b 	bl	2b08e <assert_print>
   13678:	f44f 71a0 	mov.w	r1, #320	; 0x140
   1367c:	4648      	mov	r0, r9
   1367e:	f017 fcff 	bl	2b080 <assert_post_action>
   13682:	e7ab      	b.n	135dc <sys_heap_aligned_alloc+0x28>
		split_chunks(h, c0, c);
   13684:	4602      	mov	r2, r0
   13686:	4639      	mov	r1, r7
   13688:	4630      	mov	r0, r6
   1368a:	f017 fbee 	bl	2ae6a <split_chunks>
		free_list_add(h, c0);
   1368e:	4639      	mov	r1, r7
   13690:	4630      	mov	r0, r6
   13692:	f017 fc31 	bl	2aef8 <free_list_add>
   13696:	e7c9      	b.n	1362c <sys_heap_aligned_alloc+0x78>
		split_chunks(h, c, c_end);
   13698:	462a      	mov	r2, r5
   1369a:	4641      	mov	r1, r8
   1369c:	4630      	mov	r0, r6
   1369e:	f017 fbe4 	bl	2ae6a <split_chunks>
		free_list_add(h, c_end);
   136a2:	4629      	mov	r1, r5
   136a4:	4630      	mov	r0, r6
   136a6:	f017 fc27 	bl	2aef8 <free_list_add>
   136aa:	e7c8      	b.n	1363e <sys_heap_aligned_alloc+0x8a>
		return NULL;
   136ac:	2400      	movs	r4, #0
   136ae:	e7cb      	b.n	13648 <sys_heap_aligned_alloc+0x94>
   136b0:	2400      	movs	r4, #0
   136b2:	e7c9      	b.n	13648 <sys_heap_aligned_alloc+0x94>
		return NULL;
   136b4:	2400      	movs	r4, #0
   136b6:	e7c7      	b.n	13648 <sys_heap_aligned_alloc+0x94>
   136b8:	00031a20 	.word	0x00031a20
   136bc:	000318f8 	.word	0x000318f8

000136c0 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   136c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   136c4:	4606      	mov	r6, r0
   136c6:	460d      	mov	r5, r1
   136c8:	4614      	mov	r4, r2
	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
   136ca:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
   136ce:	d222      	bcs.n	13716 <sys_heap_init+0x56>
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   136d0:	2c04      	cmp	r4, #4
   136d2:	d92d      	bls.n	13730 <sys_heap_init+0x70>
	bytes -= heap_footer_bytes(bytes);
   136d4:	1f22      	subs	r2, r4, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   136d6:	1dec      	adds	r4, r5, #7
   136d8:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   136dc:	4415      	add	r5, r2
   136de:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   136e2:	1b2d      	subs	r5, r5, r4
   136e4:	ea4f 08d5 	mov.w	r8, r5, lsr #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   136e8:	2d17      	cmp	r5, #23
   136ea:	d92e      	bls.n	1374a <sys_heap_init+0x8a>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   136ec:	6034      	str	r4, [r6, #0]
	h->end_chunk = heap_sz;
   136ee:	f8c4 8008 	str.w	r8, [r4, #8]
	h->avail_buckets = 0;
   136f2:	2300      	movs	r3, #0
   136f4:	60e3      	str	r3, [r4, #12]
	return 31 - __builtin_clz(usable_sz);
   136f6:	fab8 f688 	clz	r6, r8
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   136fa:	f1c6 0720 	rsb	r7, r6, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   136fe:	f1c6 0624 	rsb	r6, r6, #36	; 0x24
   13702:	00b6      	lsls	r6, r6, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   13704:	3607      	adds	r6, #7
   13706:	ea4f 09d6 	mov.w	r9, r6, lsr #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   1370a:	f109 0301 	add.w	r3, r9, #1
   1370e:	4543      	cmp	r3, r8
   13710:	d828      	bhi.n	13764 <sys_heap_init+0xa4>
{
   13712:	2300      	movs	r3, #0
   13714:	e039      	b.n	1378a <sys_heap_init+0xca>
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
   13716:	4f30      	ldr	r7, [pc, #192]	; (137d8 <sys_heap_init+0x118>)
   13718:	f240 12e3 	movw	r2, #483	; 0x1e3
   1371c:	4639      	mov	r1, r7
   1371e:	482f      	ldr	r0, [pc, #188]	; (137dc <sys_heap_init+0x11c>)
   13720:	f017 fcb5 	bl	2b08e <assert_print>
   13724:	f240 11e3 	movw	r1, #483	; 0x1e3
   13728:	4638      	mov	r0, r7
   1372a:	f017 fca9 	bl	2b080 <assert_post_action>
   1372e:	e7cf      	b.n	136d0 <sys_heap_init+0x10>
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   13730:	4f29      	ldr	r7, [pc, #164]	; (137d8 <sys_heap_init+0x118>)
   13732:	f44f 72f5 	mov.w	r2, #490	; 0x1ea
   13736:	4639      	mov	r1, r7
   13738:	4828      	ldr	r0, [pc, #160]	; (137dc <sys_heap_init+0x11c>)
   1373a:	f017 fca8 	bl	2b08e <assert_print>
   1373e:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
   13742:	4638      	mov	r0, r7
   13744:	f017 fc9c 	bl	2b080 <assert_post_action>
   13748:	e7c4      	b.n	136d4 <sys_heap_init+0x14>
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   1374a:	4f23      	ldr	r7, [pc, #140]	; (137d8 <sys_heap_init+0x118>)
   1374c:	f240 12f3 	movw	r2, #499	; 0x1f3
   13750:	4639      	mov	r1, r7
   13752:	4822      	ldr	r0, [pc, #136]	; (137dc <sys_heap_init+0x11c>)
   13754:	f017 fc9b 	bl	2b08e <assert_print>
   13758:	f240 11f3 	movw	r1, #499	; 0x1f3
   1375c:	4638      	mov	r0, r7
   1375e:	f017 fc8f 	bl	2b080 <assert_post_action>
   13762:	e7c3      	b.n	136ec <sys_heap_init+0x2c>
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   13764:	f8df a070 	ldr.w	sl, [pc, #112]	; 137d8 <sys_heap_init+0x118>
   13768:	f44f 7201 	mov.w	r2, #516	; 0x204
   1376c:	4651      	mov	r1, sl
   1376e:	481b      	ldr	r0, [pc, #108]	; (137dc <sys_heap_init+0x11c>)
   13770:	f017 fc8d 	bl	2b08e <assert_print>
   13774:	f44f 7101 	mov.w	r1, #516	; 0x204
   13778:	4650      	mov	r0, sl
   1377a:	f017 fc81 	bl	2b080 <assert_post_action>
   1377e:	e7c8      	b.n	13712 <sys_heap_init+0x52>

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
   13780:	1d1a      	adds	r2, r3, #4
   13782:	2100      	movs	r1, #0
   13784:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
   13788:	3301      	adds	r3, #1
   1378a:	42bb      	cmp	r3, r7
   1378c:	dbf8      	blt.n	13780 <sys_heap_init+0xc0>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1378e:	ea4f 0349 	mov.w	r3, r9, lsl #1
		((uint16_t *)cmem)[f] = val;
   13792:	b29b      	uxth	r3, r3
   13794:	8063      	strh	r3, [r4, #2]
   13796:	2200      	movs	r2, #0
   13798:	8022      	strh	r2, [r4, #0]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1379a:	f043 0301 	orr.w	r3, r3, #1
   1379e:	8063      	strh	r3, [r4, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   137a0:	eba8 0809 	sub.w	r8, r8, r9
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   137a4:	ea4f 0148 	mov.w	r1, r8, lsl #1
	void *cmem = &buf[c];
   137a8:	f026 0607 	bic.w	r6, r6, #7
		((uint16_t *)cmem)[f] = val;
   137ac:	1cb3      	adds	r3, r6, #2
   137ae:	52e1      	strh	r1, [r4, r3]
   137b0:	f824 9006 	strh.w	r9, [r4, r6]
	void *cmem = &buf[c];
   137b4:	f025 0307 	bic.w	r3, r5, #7
		((uint16_t *)cmem)[f] = val;
   137b8:	1ca9      	adds	r1, r5, #2
   137ba:	5262      	strh	r2, [r4, r1]
   137bc:	4425      	add	r5, r4
   137be:	f824 8003 	strh.w	r8, [r4, r3]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   137c2:	886b      	ldrh	r3, [r5, #2]
   137c4:	f043 0301 	orr.w	r3, r3, #1
   137c8:	806b      	strh	r3, [r5, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   137ca:	4649      	mov	r1, r9
   137cc:	4620      	mov	r0, r4
   137ce:	f017 fb93 	bl	2aef8 <free_list_add>
}
   137d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   137d6:	bf00      	nop
   137d8:	00031a20 	.word	0x00031a20
   137dc:	000318f8 	.word	0x000318f8

000137e0 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
   137e0:	4684      	mov	ip, r0
	const char *sp = *str;
   137e2:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
   137e4:	2000      	movs	r0, #0

	while (isdigit((int)(unsigned char)*sp)) {
   137e6:	e005      	b.n	137f4 <extract_decimal+0x14>
		val = 10U * val + *sp++ - '0';
   137e8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   137ec:	3201      	adds	r2, #1
   137ee:	eb03 0040 	add.w	r0, r3, r0, lsl #1
   137f2:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   137f4:	7813      	ldrb	r3, [r2, #0]
   137f6:	4904      	ldr	r1, [pc, #16]	; (13808 <extract_decimal+0x28>)
   137f8:	5c59      	ldrb	r1, [r3, r1]
   137fa:	f011 0f04 	tst.w	r1, #4
   137fe:	d1f3      	bne.n	137e8 <extract_decimal+0x8>
	}
	*str = sp;
   13800:	f8cc 2000 	str.w	r2, [ip]
	return val;
}
   13804:	4770      	bx	lr
   13806:	bf00      	nop
   13808:	00035321 	.word	0x00035321

0001380c <extract_conversion>:
 *
 * @return pointer to the first character that follows the specification.
 */
static inline const char *extract_conversion(struct conversion *conv,
					     const char *sp)
{
   1380c:	b570      	push	{r4, r5, r6, lr}
   1380e:	b082      	sub	sp, #8
   13810:	4604      	mov	r4, r0
	*conv = (struct conversion) {
   13812:	2300      	movs	r3, #0
   13814:	6003      	str	r3, [r0, #0]
   13816:	6043      	str	r3, [r0, #4]
   13818:	6083      	str	r3, [r0, #8]
	/* Skip over the opening %.  If the conversion specifier is %,
	 * that's the only thing that should be there, so
	 * fast-exit.
	 */
	++sp;
	if (*sp == '%') {
   1381a:	784b      	ldrb	r3, [r1, #1]
   1381c:	2b25      	cmp	r3, #37	; 0x25
   1381e:	d002      	beq.n	13826 <extract_conversion+0x1a>
   13820:	1c4e      	adds	r6, r1, #1
	bool loop = true;
   13822:	2501      	movs	r5, #1
   13824:	e01f      	b.n	13866 <extract_conversion+0x5a>
		conv->specifier = *sp++;
   13826:	1c88      	adds	r0, r1, #2
   13828:	70e3      	strb	r3, [r4, #3]
		return sp;
   1382a:	e145      	b.n	13ab8 <extract_conversion+0x2ac>
			conv->flag_dash = true;
   1382c:	7823      	ldrb	r3, [r4, #0]
   1382e:	f043 0304 	orr.w	r3, r3, #4
   13832:	7023      	strb	r3, [r4, #0]
		if (loop) {
   13834:	b1b5      	cbz	r5, 13864 <extract_conversion+0x58>
			++sp;
   13836:	3601      	adds	r6, #1
   13838:	e014      	b.n	13864 <extract_conversion+0x58>
			conv->flag_plus = true;
   1383a:	7823      	ldrb	r3, [r4, #0]
   1383c:	f043 0308 	orr.w	r3, r3, #8
   13840:	7023      	strb	r3, [r4, #0]
			break;
   13842:	e7f7      	b.n	13834 <extract_conversion+0x28>
			conv->flag_space = true;
   13844:	7823      	ldrb	r3, [r4, #0]
   13846:	f043 0310 	orr.w	r3, r3, #16
   1384a:	7023      	strb	r3, [r4, #0]
			break;
   1384c:	e7f2      	b.n	13834 <extract_conversion+0x28>
			conv->flag_hash = true;
   1384e:	7823      	ldrb	r3, [r4, #0]
   13850:	f043 0320 	orr.w	r3, r3, #32
   13854:	7023      	strb	r3, [r4, #0]
			break;
   13856:	e7ed      	b.n	13834 <extract_conversion+0x28>
			conv->flag_zero = true;
   13858:	7823      	ldrb	r3, [r4, #0]
   1385a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1385e:	7023      	strb	r3, [r4, #0]
			break;
   13860:	e7e8      	b.n	13834 <extract_conversion+0x28>
		switch (*sp) {
   13862:	2500      	movs	r5, #0
	} while (loop);
   13864:	b345      	cbz	r5, 138b8 <extract_conversion+0xac>
		switch (*sp) {
   13866:	7833      	ldrb	r3, [r6, #0]
   13868:	3b20      	subs	r3, #32
   1386a:	2b10      	cmp	r3, #16
   1386c:	d8f9      	bhi.n	13862 <extract_conversion+0x56>
   1386e:	a201      	add	r2, pc, #4	; (adr r2, 13874 <extract_conversion+0x68>)
   13870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   13874:	00013845 	.word	0x00013845
   13878:	00013863 	.word	0x00013863
   1387c:	00013863 	.word	0x00013863
   13880:	0001384f 	.word	0x0001384f
   13884:	00013863 	.word	0x00013863
   13888:	00013863 	.word	0x00013863
   1388c:	00013863 	.word	0x00013863
   13890:	00013863 	.word	0x00013863
   13894:	00013863 	.word	0x00013863
   13898:	00013863 	.word	0x00013863
   1389c:	00013863 	.word	0x00013863
   138a0:	0001383b 	.word	0x0001383b
   138a4:	00013863 	.word	0x00013863
   138a8:	0001382d 	.word	0x0001382d
   138ac:	00013863 	.word	0x00013863
   138b0:	00013863 	.word	0x00013863
   138b4:	00013859 	.word	0x00013859
	if (conv->flag_zero && conv->flag_dash) {
   138b8:	7823      	ldrb	r3, [r4, #0]
   138ba:	f003 0344 	and.w	r3, r3, #68	; 0x44
   138be:	2b44      	cmp	r3, #68	; 0x44
   138c0:	d05f      	beq.n	13982 <extract_conversion+0x176>
	}

	sp = extract_flags(conv, sp);
	sp = extract_width(conv, sp);
   138c2:	9601      	str	r6, [sp, #4]
	conv->width_present = true;
   138c4:	7823      	ldrb	r3, [r4, #0]
   138c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   138ca:	7023      	strb	r3, [r4, #0]
	if (*sp == '*') {
   138cc:	7833      	ldrb	r3, [r6, #0]
   138ce:	2b2a      	cmp	r3, #42	; 0x2a
   138d0:	d05c      	beq.n	1398c <extract_conversion+0x180>
	size_t width = extract_decimal(&sp);
   138d2:	a801      	add	r0, sp, #4
   138d4:	f7ff ff84 	bl	137e0 <extract_decimal>
	if (sp != wp) {
   138d8:	9b01      	ldr	r3, [sp, #4]
   138da:	429e      	cmp	r6, r3
   138dc:	d00f      	beq.n	138fe <extract_conversion+0xf2>
		conv->width_present = true;
   138de:	7823      	ldrb	r3, [r4, #0]
   138e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   138e4:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
   138e6:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
   138e8:	b2db      	uxtb	r3, r3
   138ea:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
   138ee:	2800      	cmp	r0, #0
   138f0:	db54      	blt.n	1399c <extract_conversion+0x190>
   138f2:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
   138f4:	4313      	orrs	r3, r2
   138f6:	7822      	ldrb	r2, [r4, #0]
   138f8:	f363 0241 	bfi	r2, r3, #1, #1
   138fc:	7022      	strb	r2, [r4, #0]
	return sp;
   138fe:	9b01      	ldr	r3, [sp, #4]
	sp = extract_prec(conv, sp);
   13900:	9301      	str	r3, [sp, #4]
	conv->prec_present = (*sp == '.');
   13902:	781b      	ldrb	r3, [r3, #0]
   13904:	2b2e      	cmp	r3, #46	; 0x2e
   13906:	bf14      	ite	ne
   13908:	2300      	movne	r3, #0
   1390a:	2301      	moveq	r3, #1
   1390c:	7862      	ldrb	r2, [r4, #1]
   1390e:	f363 0241 	bfi	r2, r3, #1, #1
   13912:	7062      	strb	r2, [r4, #1]
	if (!conv->prec_present) {
   13914:	2b00      	cmp	r3, #0
   13916:	d043      	beq.n	139a0 <extract_conversion+0x194>
	++sp;
   13918:	9b01      	ldr	r3, [sp, #4]
   1391a:	1c5a      	adds	r2, r3, #1
   1391c:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
   1391e:	785b      	ldrb	r3, [r3, #1]
   13920:	2b2a      	cmp	r3, #42	; 0x2a
   13922:	d03f      	beq.n	139a4 <extract_conversion+0x198>
	size_t prec = extract_decimal(&sp);
   13924:	a801      	add	r0, sp, #4
   13926:	f7ff ff5b 	bl	137e0 <extract_decimal>
	conv->prec_value = prec;
   1392a:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
   1392c:	7823      	ldrb	r3, [r4, #0]
   1392e:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
   13932:	2800      	cmp	r0, #0
   13934:	db3e      	blt.n	139b4 <extract_conversion+0x1a8>
   13936:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
   13938:	4313      	orrs	r3, r2
   1393a:	7822      	ldrb	r2, [r4, #0]
   1393c:	f363 0241 	bfi	r2, r3, #1, #1
   13940:	7022      	strb	r2, [r4, #0]
	return sp;
   13942:	9801      	ldr	r0, [sp, #4]
	switch (*sp) {
   13944:	7803      	ldrb	r3, [r0, #0]
   13946:	3b4c      	subs	r3, #76	; 0x4c
   13948:	2b2e      	cmp	r3, #46	; 0x2e
   1394a:	f200 809d 	bhi.w	13a88 <extract_conversion+0x27c>
   1394e:	e8df f003 	tbb	[pc, r3]
   13952:	9b90      	.short	0x9b90
   13954:	9b9b9b9b 	.word	0x9b9b9b9b
   13958:	9b9b9b9b 	.word	0x9b9b9b9b
   1395c:	9b9b9b9b 	.word	0x9b9b9b9b
   13960:	9b9b9b9b 	.word	0x9b9b9b9b
   13964:	9b9b9b9b 	.word	0x9b9b9b9b
   13968:	9b9b9b9b 	.word	0x9b9b9b9b
   1396c:	9b339b9b 	.word	0x9b339b9b
   13970:	9b459b57 	.word	0x9b459b57
   13974:	9b9b9b9b 	.word	0x9b9b9b9b
   13978:	9b899b9b 	.word	0x9b899b9b
   1397c:	9b9b9b9b 	.word	0x9b9b9b9b
   13980:	82          	.byte	0x82
   13981:	00          	.byte	0x00
		conv->flag_zero = false;
   13982:	7823      	ldrb	r3, [r4, #0]
   13984:	f36f 1386 	bfc	r3, #6, #1
   13988:	7023      	strb	r3, [r4, #0]
   1398a:	e79a      	b.n	138c2 <extract_conversion+0xb6>
		conv->width_star = true;
   1398c:	7863      	ldrb	r3, [r4, #1]
   1398e:	f043 0301 	orr.w	r3, r3, #1
   13992:	7063      	strb	r3, [r4, #1]
		return ++sp;
   13994:	4633      	mov	r3, r6
   13996:	3301      	adds	r3, #1
   13998:	9301      	str	r3, [sp, #4]
   1399a:	e7b1      	b.n	13900 <extract_conversion+0xf4>
				      || (width != (size_t)conv->width_value));
   1399c:	2201      	movs	r2, #1
   1399e:	e7a9      	b.n	138f4 <extract_conversion+0xe8>
		return sp;
   139a0:	9801      	ldr	r0, [sp, #4]
   139a2:	e7cf      	b.n	13944 <extract_conversion+0x138>
		conv->prec_star = true;
   139a4:	7863      	ldrb	r3, [r4, #1]
   139a6:	f043 0304 	orr.w	r3, r3, #4
   139aa:	7063      	strb	r3, [r4, #1]
		return ++sp;
   139ac:	4610      	mov	r0, r2
   139ae:	3001      	adds	r0, #1
   139b0:	9001      	str	r0, [sp, #4]
   139b2:	e7c7      	b.n	13944 <extract_conversion+0x138>
			      || (prec != (size_t)conv->prec_value));
   139b4:	2201      	movs	r2, #1
   139b6:	e7bf      	b.n	13938 <extract_conversion+0x12c>
		if (*++sp == 'h') {
   139b8:	1c42      	adds	r2, r0, #1
   139ba:	7843      	ldrb	r3, [r0, #1]
   139bc:	2b68      	cmp	r3, #104	; 0x68
   139be:	d006      	beq.n	139ce <extract_conversion+0x1c2>
			conv->length_mod = LENGTH_H;
   139c0:	7863      	ldrb	r3, [r4, #1]
   139c2:	2102      	movs	r1, #2
   139c4:	f361 03c6 	bfi	r3, r1, #3, #4
   139c8:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'h') {
   139ca:	4610      	mov	r0, r2
   139cc:	e01e      	b.n	13a0c <extract_conversion+0x200>
			conv->length_mod = LENGTH_HH;
   139ce:	7863      	ldrb	r3, [r4, #1]
   139d0:	2201      	movs	r2, #1
   139d2:	f362 03c6 	bfi	r3, r2, #3, #4
   139d6:	7063      	strb	r3, [r4, #1]
			++sp;
   139d8:	3002      	adds	r0, #2
   139da:	e017      	b.n	13a0c <extract_conversion+0x200>
		if (*++sp == 'l') {
   139dc:	1c42      	adds	r2, r0, #1
   139de:	7843      	ldrb	r3, [r0, #1]
   139e0:	2b6c      	cmp	r3, #108	; 0x6c
   139e2:	d006      	beq.n	139f2 <extract_conversion+0x1e6>
			conv->length_mod = LENGTH_L;
   139e4:	7863      	ldrb	r3, [r4, #1]
   139e6:	2103      	movs	r1, #3
   139e8:	f361 03c6 	bfi	r3, r1, #3, #4
   139ec:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'l') {
   139ee:	4610      	mov	r0, r2
   139f0:	e00c      	b.n	13a0c <extract_conversion+0x200>
			conv->length_mod = LENGTH_LL;
   139f2:	7863      	ldrb	r3, [r4, #1]
   139f4:	2204      	movs	r2, #4
   139f6:	f362 03c6 	bfi	r3, r2, #3, #4
   139fa:	7063      	strb	r3, [r4, #1]
			++sp;
   139fc:	3002      	adds	r0, #2
   139fe:	e005      	b.n	13a0c <extract_conversion+0x200>
		conv->length_mod = LENGTH_J;
   13a00:	7863      	ldrb	r3, [r4, #1]
   13a02:	2205      	movs	r2, #5
   13a04:	f362 03c6 	bfi	r3, r2, #3, #4
   13a08:	7063      	strb	r3, [r4, #1]
		++sp;
   13a0a:	3001      	adds	r0, #1
	conv->specifier = *sp++;
   13a0c:	f810 3b01 	ldrb.w	r3, [r0], #1
   13a10:	70e3      	strb	r3, [r4, #3]
	switch (conv->specifier) {
   13a12:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
   13a16:	2a37      	cmp	r2, #55	; 0x37
   13a18:	d87d      	bhi.n	13b16 <extract_conversion+0x30a>
   13a1a:	e8df f002 	tbb	[pc, r2]
   13a1e:	7c5e      	.short	0x7c5e
   13a20:	5e5e7c7c 	.word	0x5e5e7c7c
   13a24:	7c7c7c5e 	.word	0x7c7c7c5e
   13a28:	7c7c7c7c 	.word	0x7c7c7c7c
   13a2c:	7c7c7c7c 	.word	0x7c7c7c7c
   13a30:	7c7c7c7c 	.word	0x7c7c7c7c
   13a34:	7c7c4f7c 	.word	0x7c7c4f7c
   13a38:	7c7c7c7c 	.word	0x7c7c7c7c
   13a3c:	7c5e7c7c 	.word	0x7c5e7c7c
   13a40:	5e5e3a4f 	.word	0x5e5e3a4f
   13a44:	7c3a7c5e 	.word	0x7c3a7c5e
   13a48:	657c7c7c 	.word	0x657c7c7c
   13a4c:	7c7c714f 	.word	0x7c7c714f
   13a50:	7c4f7c71 	.word	0x7c4f7c71
   13a54:	4f7c      	.short	0x4f7c
		conv->length_mod = LENGTH_Z;
   13a56:	7863      	ldrb	r3, [r4, #1]
   13a58:	2206      	movs	r2, #6
   13a5a:	f362 03c6 	bfi	r3, r2, #3, #4
   13a5e:	7063      	strb	r3, [r4, #1]
		++sp;
   13a60:	3001      	adds	r0, #1
		break;
   13a62:	e7d3      	b.n	13a0c <extract_conversion+0x200>
		conv->length_mod = LENGTH_T;
   13a64:	7863      	ldrb	r3, [r4, #1]
   13a66:	2207      	movs	r2, #7
   13a68:	f362 03c6 	bfi	r3, r2, #3, #4
   13a6c:	7063      	strb	r3, [r4, #1]
		++sp;
   13a6e:	3001      	adds	r0, #1
		break;
   13a70:	e7cc      	b.n	13a0c <extract_conversion+0x200>
		conv->length_mod = LENGTH_UPPER_L;
   13a72:	7863      	ldrb	r3, [r4, #1]
   13a74:	2208      	movs	r2, #8
   13a76:	f362 03c6 	bfi	r3, r2, #3, #4
   13a7a:	7063      	strb	r3, [r4, #1]
		++sp;
   13a7c:	3001      	adds	r0, #1
		conv->unsupported = true;
   13a7e:	7823      	ldrb	r3, [r4, #0]
   13a80:	f043 0302 	orr.w	r3, r3, #2
   13a84:	7023      	strb	r3, [r4, #0]
		break;
   13a86:	e7c1      	b.n	13a0c <extract_conversion+0x200>
		conv->length_mod = LENGTH_NONE;
   13a88:	7863      	ldrb	r3, [r4, #1]
   13a8a:	f36f 03c6 	bfc	r3, #3, #4
   13a8e:	7063      	strb	r3, [r4, #1]
		break;
   13a90:	e7bc      	b.n	13a0c <extract_conversion+0x200>
		conv->specifier_cat = SPECIFIER_SINT;
   13a92:	78a2      	ldrb	r2, [r4, #2]
   13a94:	2101      	movs	r1, #1
   13a96:	f361 0202 	bfi	r2, r1, #0, #3
   13a9a:	70a2      	strb	r2, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
   13a9c:	7862      	ldrb	r2, [r4, #1]
   13a9e:	f002 0278 	and.w	r2, r2, #120	; 0x78
   13aa2:	2a40      	cmp	r2, #64	; 0x40
   13aa4:	d010      	beq.n	13ac8 <extract_conversion+0x2bc>
		if (conv->specifier == 'c') {
   13aa6:	2b63      	cmp	r3, #99	; 0x63
   13aa8:	d013      	beq.n	13ad2 <extract_conversion+0x2c6>
	conv->unsupported |= unsupported;
   13aaa:	7823      	ldrb	r3, [r4, #0]
   13aac:	f3c3 0240 	ubfx	r2, r3, #1, #1
   13ab0:	4315      	orrs	r5, r2
   13ab2:	f365 0341 	bfi	r3, r5, #1, #1
   13ab6:	7023      	strb	r3, [r4, #0]
	sp = extract_length(conv, sp);
	sp = extract_specifier(conv, sp);

	return sp;
}
   13ab8:	b002      	add	sp, #8
   13aba:	bd70      	pop	{r4, r5, r6, pc}
		conv->specifier_cat = SPECIFIER_UINT;
   13abc:	78a2      	ldrb	r2, [r4, #2]
   13abe:	2102      	movs	r1, #2
   13ac0:	f361 0202 	bfi	r2, r1, #0, #3
   13ac4:	70a2      	strb	r2, [r4, #2]
   13ac6:	e7e9      	b.n	13a9c <extract_conversion+0x290>
			conv->invalid = true;
   13ac8:	7821      	ldrb	r1, [r4, #0]
   13aca:	f041 0101 	orr.w	r1, r1, #1
   13ace:	7021      	strb	r1, [r4, #0]
   13ad0:	e7e9      	b.n	13aa6 <extract_conversion+0x29a>
			unsupported = (conv->length_mod != LENGTH_NONE);
   13ad2:	1e15      	subs	r5, r2, #0
   13ad4:	bf18      	it	ne
   13ad6:	2501      	movne	r5, #1
   13ad8:	e7e7      	b.n	13aaa <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_FP;
   13ada:	78a3      	ldrb	r3, [r4, #2]
   13adc:	2204      	movs	r2, #4
   13ade:	f362 0302 	bfi	r3, r2, #0, #3
   13ae2:	70a3      	strb	r3, [r4, #2]
			unsupported = true;
   13ae4:	2501      	movs	r5, #1
			break;
   13ae6:	e7e0      	b.n	13aaa <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
   13ae8:	78a3      	ldrb	r3, [r4, #2]
   13aea:	2203      	movs	r2, #3
   13aec:	f362 0302 	bfi	r3, r2, #0, #3
   13af0:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
   13af2:	7863      	ldrb	r3, [r4, #1]
   13af4:	f003 0378 	and.w	r3, r3, #120	; 0x78
   13af8:	2b40      	cmp	r3, #64	; 0x40
   13afa:	d1d6      	bne.n	13aaa <extract_conversion+0x29e>
			unsupported = true;
   13afc:	2501      	movs	r5, #1
   13afe:	e7d4      	b.n	13aaa <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
   13b00:	78a3      	ldrb	r3, [r4, #2]
   13b02:	2203      	movs	r2, #3
   13b04:	f362 0302 	bfi	r3, r2, #0, #3
   13b08:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod != LENGTH_NONE) {
   13b0a:	7863      	ldrb	r3, [r4, #1]
   13b0c:	f013 0f78 	tst.w	r3, #120	; 0x78
   13b10:	d0cb      	beq.n	13aaa <extract_conversion+0x29e>
			unsupported = true;
   13b12:	2501      	movs	r5, #1
   13b14:	e7c9      	b.n	13aaa <extract_conversion+0x29e>
		conv->invalid = true;
   13b16:	7823      	ldrb	r3, [r4, #0]
   13b18:	f043 0301 	orr.w	r3, r3, #1
   13b1c:	7023      	strb	r3, [r4, #0]
		break;
   13b1e:	e7c4      	b.n	13aaa <extract_conversion+0x29e>

00013b20 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
   13b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b24:	b083      	sub	sp, #12
   13b26:	4604      	mov	r4, r0
   13b28:	460d      	mov	r5, r1
   13b2a:	9201      	str	r2, [sp, #4]
   13b2c:	469a      	mov	sl, r3
   13b2e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
   13b30:	78d3      	ldrb	r3, [r2, #3]
   13b32:	4a32      	ldr	r2, [pc, #200]	; (13bfc <encode_uint+0xdc>)
   13b34:	f813 b002 	ldrb.w	fp, [r3, r2]
   13b38:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
   13b3c:	2b6f      	cmp	r3, #111	; 0x6f
   13b3e:	d00f      	beq.n	13b60 <encode_uint+0x40>
   13b40:	d906      	bls.n	13b50 <encode_uint+0x30>
   13b42:	2b70      	cmp	r3, #112	; 0x70
   13b44:	d00f      	beq.n	13b66 <encode_uint+0x46>
   13b46:	2b78      	cmp	r3, #120	; 0x78
   13b48:	d110      	bne.n	13b6c <encode_uint+0x4c>
		return 16;
   13b4a:	f04f 0910 	mov.w	r9, #16
   13b4e:	e023      	b.n	13b98 <encode_uint+0x78>
	switch (specifier) {
   13b50:	2b58      	cmp	r3, #88	; 0x58
   13b52:	d002      	beq.n	13b5a <encode_uint+0x3a>
   13b54:	f04f 090a 	mov.w	r9, #10
   13b58:	e01e      	b.n	13b98 <encode_uint+0x78>
		return 16;
   13b5a:	f04f 0910 	mov.w	r9, #16
   13b5e:	e01b      	b.n	13b98 <encode_uint+0x78>
		return 8;
   13b60:	f04f 0908 	mov.w	r9, #8
   13b64:	e018      	b.n	13b98 <encode_uint+0x78>
		return 16;
   13b66:	f04f 0910 	mov.w	r9, #16
   13b6a:	e015      	b.n	13b98 <encode_uint+0x78>
	switch (specifier) {
   13b6c:	f04f 090a 	mov.w	r9, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
   13b70:	e012      	b.n	13b98 <encode_uint+0x78>

	do {
		unsigned int lsv = (unsigned int)(value % radix);

		*--bp = (lsv <= 9) ? ('0' + lsv)
   13b72:	b2d2      	uxtb	r2, r2
   13b74:	3230      	adds	r2, #48	; 0x30
   13b76:	b2d2      	uxtb	r2, r2
   13b78:	f806 2d01 	strb.w	r2, [r6, #-1]!
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
   13b7c:	463a      	mov	r2, r7
   13b7e:	4643      	mov	r3, r8
   13b80:	4620      	mov	r0, r4
   13b82:	4629      	mov	r1, r5
   13b84:	f7ed fa34 	bl	ff0 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
   13b88:	42bc      	cmp	r4, r7
   13b8a:	f175 0300 	sbcs.w	r3, r5, #0
   13b8e:	d319      	bcc.n	13bc4 <encode_uint+0xa4>
   13b90:	4556      	cmp	r6, sl
   13b92:	d917      	bls.n	13bc4 <encode_uint+0xa4>
		value /= radix;
   13b94:	4604      	mov	r4, r0
   13b96:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
   13b98:	f04f 0800 	mov.w	r8, #0
   13b9c:	464f      	mov	r7, r9
   13b9e:	464a      	mov	r2, r9
   13ba0:	4643      	mov	r3, r8
   13ba2:	4620      	mov	r0, r4
   13ba4:	4629      	mov	r1, r5
   13ba6:	f7ed fa23 	bl	ff0 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   13baa:	2a09      	cmp	r2, #9
   13bac:	d9e1      	bls.n	13b72 <encode_uint+0x52>
   13bae:	f1bb 0f01 	cmp.w	fp, #1
   13bb2:	d003      	beq.n	13bbc <encode_uint+0x9c>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   13bb4:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   13bb6:	3257      	adds	r2, #87	; 0x57
   13bb8:	b2d2      	uxtb	r2, r2
   13bba:	e7dd      	b.n	13b78 <encode_uint+0x58>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   13bbc:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   13bbe:	3237      	adds	r2, #55	; 0x37
   13bc0:	b2d2      	uxtb	r2, r2
   13bc2:	e7d9      	b.n	13b78 <encode_uint+0x58>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
   13bc4:	9b01      	ldr	r3, [sp, #4]
   13bc6:	781b      	ldrb	r3, [r3, #0]
   13bc8:	f013 0f20 	tst.w	r3, #32
   13bcc:	d005      	beq.n	13bda <encode_uint+0xba>
		if (radix == 8) {
   13bce:	f1b9 0f08 	cmp.w	r9, #8
   13bd2:	d006      	beq.n	13be2 <encode_uint+0xc2>
			conv->altform_0 = true;
		} else if (radix == 16) {
   13bd4:	f1b9 0f10 	cmp.w	r9, #16
   13bd8:	d009      	beq.n	13bee <encode_uint+0xce>
			;
		}
	}

	return bp;
}
   13bda:	4630      	mov	r0, r6
   13bdc:	b003      	add	sp, #12
   13bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
   13be2:	9a01      	ldr	r2, [sp, #4]
   13be4:	7893      	ldrb	r3, [r2, #2]
   13be6:	f043 0308 	orr.w	r3, r3, #8
   13bea:	7093      	strb	r3, [r2, #2]
   13bec:	e7f5      	b.n	13bda <encode_uint+0xba>
			conv->altform_0c = true;
   13bee:	9a01      	ldr	r2, [sp, #4]
   13bf0:	7893      	ldrb	r3, [r2, #2]
   13bf2:	f043 0310 	orr.w	r3, r3, #16
   13bf6:	7093      	strb	r3, [r2, #2]
   13bf8:	e7ef      	b.n	13bda <encode_uint+0xba>
   13bfa:	bf00      	nop
   13bfc:	00035321 	.word	0x00035321

00013c00 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
   13c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c04:	b091      	sub	sp, #68	; 0x44
   13c06:	4606      	mov	r6, r0
   13c08:	460d      	mov	r5, r1
   13c0a:	4691      	mov	r9, r2
   13c0c:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   13c0e:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   13c10:	f899 0000 	ldrb.w	r0, [r9]
   13c14:	2800      	cmp	r0, #0
   13c16:	f000 82d5 	beq.w	141c4 <z_cbvprintf_impl+0x5c4>
		if (*fp != '%') {
   13c1a:	2825      	cmp	r0, #37	; 0x25
   13c1c:	d008      	beq.n	13c30 <z_cbvprintf_impl+0x30>
			OUTC(*fp++);
   13c1e:	f109 0901 	add.w	r9, r9, #1
   13c22:	4629      	mov	r1, r5
   13c24:	47b0      	blx	r6
   13c26:	2800      	cmp	r0, #0
   13c28:	f2c0 82cd 	blt.w	141c6 <z_cbvprintf_impl+0x5c6>
   13c2c:	3401      	adds	r4, #1
			continue;
   13c2e:	e7ef      	b.n	13c10 <z_cbvprintf_impl+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
   13c30:	2300      	movs	r3, #0
   13c32:	9304      	str	r3, [sp, #16]
   13c34:	9305      	str	r3, [sp, #20]
   13c36:	9306      	str	r3, [sp, #24]
   13c38:	9307      	str	r3, [sp, #28]
   13c3a:	9308      	str	r3, [sp, #32]
   13c3c:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
   13c3e:	4649      	mov	r1, r9
   13c40:	a806      	add	r0, sp, #24
   13c42:	f7ff fde3 	bl	1380c <extract_conversion>
   13c46:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
   13c48:	f89d 3019 	ldrb.w	r3, [sp, #25]
   13c4c:	f013 0f01 	tst.w	r3, #1
   13c50:	f000 8097 	beq.w	13d82 <z_cbvprintf_impl+0x182>
			width = va_arg(ap, int);
   13c54:	9b03      	ldr	r3, [sp, #12]
   13c56:	1d1a      	adds	r2, r3, #4
   13c58:	9203      	str	r2, [sp, #12]
   13c5a:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
   13c5c:	2f00      	cmp	r7, #0
   13c5e:	f2c0 8088 	blt.w	13d72 <z_cbvprintf_impl+0x172>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
   13c62:	f89d 3019 	ldrb.w	r3, [sp, #25]
   13c66:	f013 0f04 	tst.w	r3, #4
   13c6a:	f000 809c 	beq.w	13da6 <z_cbvprintf_impl+0x1a6>
			int arg = va_arg(ap, int);
   13c6e:	9b03      	ldr	r3, [sp, #12]
   13c70:	1d1a      	adds	r2, r3, #4
   13c72:	9203      	str	r2, [sp, #12]
   13c74:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
   13c78:	f1ba 0f00 	cmp.w	sl, #0
   13c7c:	f2c0 808a 	blt.w	13d94 <z_cbvprintf_impl+0x194>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
   13c80:	2300      	movs	r3, #0
   13c82:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
   13c84:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
   13c86:	f89d 301a 	ldrb.w	r3, [sp, #26]
   13c8a:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
   13c8e:	f89d 1019 	ldrb.w	r1, [sp, #25]
   13c92:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
   13c96:	2b01      	cmp	r3, #1
   13c98:	f000 808e 	beq.w	13db8 <z_cbvprintf_impl+0x1b8>
			if (length_mod == LENGTH_HH) {
				value->sint = (signed char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
   13c9c:	2b02      	cmp	r3, #2
   13c9e:	f000 80d3 	beq.w	13e48 <z_cbvprintf_impl+0x248>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
   13ca2:	2b04      	cmp	r3, #4
   13ca4:	f000 8124 	beq.w	13ef0 <z_cbvprintf_impl+0x2f0>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
   13ca8:	2b03      	cmp	r3, #3
   13caa:	f000 813b 	beq.w	13f24 <z_cbvprintf_impl+0x324>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
   13cae:	f89d 8018 	ldrb.w	r8, [sp, #24]
   13cb2:	f018 0b03 	ands.w	fp, r8, #3
   13cb6:	f040 813b 	bne.w	13f30 <z_cbvprintf_impl+0x330>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
   13cba:	f89d 301b 	ldrb.w	r3, [sp, #27]
   13cbe:	3b25      	subs	r3, #37	; 0x25
   13cc0:	2b53      	cmp	r3, #83	; 0x53
   13cc2:	f200 81e6 	bhi.w	14092 <z_cbvprintf_impl+0x492>
   13cc6:	e8df f013 	tbh	[pc, r3, lsl #1]
   13cca:	0140      	.short	0x0140
   13ccc:	01e401e4 	.word	0x01e401e4
   13cd0:	01e401e4 	.word	0x01e401e4
   13cd4:	01e401e4 	.word	0x01e401e4
   13cd8:	01e401e4 	.word	0x01e401e4
   13cdc:	01e401e4 	.word	0x01e401e4
   13ce0:	01e401e4 	.word	0x01e401e4
   13ce4:	01e401e4 	.word	0x01e401e4
   13ce8:	01e401e4 	.word	0x01e401e4
   13cec:	01e401e4 	.word	0x01e401e4
   13cf0:	01e401e4 	.word	0x01e401e4
   13cf4:	01e401e4 	.word	0x01e401e4
   13cf8:	01e401e4 	.word	0x01e401e4
   13cfc:	01e401e4 	.word	0x01e401e4
   13d00:	01e401e4 	.word	0x01e401e4
   13d04:	01e401e4 	.word	0x01e401e4
   13d08:	01e401e4 	.word	0x01e401e4
   13d0c:	01e401e4 	.word	0x01e401e4
   13d10:	01e401e4 	.word	0x01e401e4
   13d14:	01e401e4 	.word	0x01e401e4
   13d18:	01e401e4 	.word	0x01e401e4
   13d1c:	01e401e4 	.word	0x01e401e4
   13d20:	01e401e4 	.word	0x01e401e4
   13d24:	01e401e4 	.word	0x01e401e4
   13d28:	01e401e4 	.word	0x01e401e4
   13d2c:	01e401e4 	.word	0x01e401e4
   13d30:	01e40181 	.word	0x01e40181
   13d34:	01e401e4 	.word	0x01e401e4
   13d38:	01e401e4 	.word	0x01e401e4
   13d3c:	01e401e4 	.word	0x01e401e4
   13d40:	01e401e4 	.word	0x01e401e4
   13d44:	015e01e4 	.word	0x015e01e4
   13d48:	01e40167 	.word	0x01e40167
   13d4c:	01e401e4 	.word	0x01e401e4
   13d50:	016701e4 	.word	0x016701e4
   13d54:	01e401e4 	.word	0x01e401e4
   13d58:	01e401e4 	.word	0x01e401e4
   13d5c:	018101be 	.word	0x018101be
   13d60:	01e401a2 	.word	0x01e401a2
   13d64:	014d01e4 	.word	0x014d01e4
   13d68:	018101e4 	.word	0x018101e4
   13d6c:	01e401e4 	.word	0x01e401e4
   13d70:	0181      	.short	0x0181
				conv->flag_dash = true;
   13d72:	f89d 3018 	ldrb.w	r3, [sp, #24]
   13d76:	f043 0304 	orr.w	r3, r3, #4
   13d7a:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
   13d7e:	427f      	negs	r7, r7
   13d80:	e76f      	b.n	13c62 <z_cbvprintf_impl+0x62>
		} else if (conv->width_present) {
   13d82:	f99d 3018 	ldrsb.w	r3, [sp, #24]
   13d86:	2b00      	cmp	r3, #0
   13d88:	db02      	blt.n	13d90 <z_cbvprintf_impl+0x190>
		int width = -1;
   13d8a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   13d8e:	e768      	b.n	13c62 <z_cbvprintf_impl+0x62>
			width = conv->width_value;
   13d90:	9f07      	ldr	r7, [sp, #28]
   13d92:	e766      	b.n	13c62 <z_cbvprintf_impl+0x62>
				conv->prec_present = false;
   13d94:	f89d 3019 	ldrb.w	r3, [sp, #25]
   13d98:	f36f 0341 	bfc	r3, #1, #1
   13d9c:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
   13da0:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   13da4:	e76c      	b.n	13c80 <z_cbvprintf_impl+0x80>
		} else if (conv->prec_present) {
   13da6:	f013 0f02 	tst.w	r3, #2
   13daa:	d002      	beq.n	13db2 <z_cbvprintf_impl+0x1b2>
			precision = conv->prec_value;
   13dac:	f8dd a020 	ldr.w	sl, [sp, #32]
   13db0:	e766      	b.n	13c80 <z_cbvprintf_impl+0x80>
		int precision = -1;
   13db2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   13db6:	e763      	b.n	13c80 <z_cbvprintf_impl+0x80>
			switch (length_mod) {
   13db8:	1ecb      	subs	r3, r1, #3
   13dba:	2b04      	cmp	r3, #4
   13dbc:	d804      	bhi.n	13dc8 <z_cbvprintf_impl+0x1c8>
   13dbe:	e8df f003 	tbb	[pc, r3]
   13dc2:	1d0b      	.short	0x1d0b
   13dc4:	3529      	.short	0x3529
   13dc6:	35          	.byte	0x35
   13dc7:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   13dc8:	9b03      	ldr	r3, [sp, #12]
   13dca:	1d1a      	adds	r2, r3, #4
   13dcc:	9203      	str	r2, [sp, #12]
   13dce:	681b      	ldr	r3, [r3, #0]
   13dd0:	17da      	asrs	r2, r3, #31
   13dd2:	9304      	str	r3, [sp, #16]
   13dd4:	9205      	str	r2, [sp, #20]
				break;
   13dd6:	e006      	b.n	13de6 <z_cbvprintf_impl+0x1e6>
					value->sint = va_arg(ap, long);
   13dd8:	9b03      	ldr	r3, [sp, #12]
   13dda:	1d1a      	adds	r2, r3, #4
   13ddc:	9203      	str	r2, [sp, #12]
   13dde:	681b      	ldr	r3, [r3, #0]
   13de0:	17da      	asrs	r2, r3, #31
   13de2:	9304      	str	r3, [sp, #16]
   13de4:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
   13de6:	2901      	cmp	r1, #1
   13de8:	d028      	beq.n	13e3c <z_cbvprintf_impl+0x23c>
			} else if (length_mod == LENGTH_H) {
   13dea:	2902      	cmp	r1, #2
   13dec:	f47f af5f 	bne.w	13cae <z_cbvprintf_impl+0xae>
				value->sint = (short)value->sint;
   13df0:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
   13df4:	17da      	asrs	r2, r3, #31
   13df6:	9304      	str	r3, [sp, #16]
   13df8:	9205      	str	r2, [sp, #20]
   13dfa:	e758      	b.n	13cae <z_cbvprintf_impl+0xae>
					(sint_value_type)va_arg(ap, long long);
   13dfc:	9b03      	ldr	r3, [sp, #12]
   13dfe:	3307      	adds	r3, #7
   13e00:	f023 0307 	bic.w	r3, r3, #7
   13e04:	f103 0208 	add.w	r2, r3, #8
   13e08:	9203      	str	r2, [sp, #12]
   13e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
   13e0e:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
   13e12:	e7e8      	b.n	13de6 <z_cbvprintf_impl+0x1e6>
					(sint_value_type)va_arg(ap, intmax_t);
   13e14:	9b03      	ldr	r3, [sp, #12]
   13e16:	3307      	adds	r3, #7
   13e18:	f023 0307 	bic.w	r3, r3, #7
   13e1c:	f103 0208 	add.w	r2, r3, #8
   13e20:	9203      	str	r2, [sp, #12]
   13e22:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
   13e26:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
   13e2a:	e7dc      	b.n	13de6 <z_cbvprintf_impl+0x1e6>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   13e2c:	9b03      	ldr	r3, [sp, #12]
   13e2e:	1d1a      	adds	r2, r3, #4
   13e30:	9203      	str	r2, [sp, #12]
   13e32:	681b      	ldr	r3, [r3, #0]
   13e34:	17da      	asrs	r2, r3, #31
				value->sint =
   13e36:	9304      	str	r3, [sp, #16]
   13e38:	9205      	str	r2, [sp, #20]
				break;
   13e3a:	e7d4      	b.n	13de6 <z_cbvprintf_impl+0x1e6>
				value->sint = (signed char)value->sint;
   13e3c:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   13e40:	17da      	asrs	r2, r3, #31
   13e42:	9304      	str	r3, [sp, #16]
   13e44:	9205      	str	r2, [sp, #20]
   13e46:	e732      	b.n	13cae <z_cbvprintf_impl+0xae>
			switch (length_mod) {
   13e48:	1ecb      	subs	r3, r1, #3
   13e4a:	2b04      	cmp	r3, #4
   13e4c:	d804      	bhi.n	13e58 <z_cbvprintf_impl+0x258>
   13e4e:	e8df f003 	tbb	[pc, r3]
   13e52:	1f0b      	.short	0x1f0b
   13e54:	4135      	.short	0x4135
   13e56:	41          	.byte	0x41
   13e57:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
   13e58:	9b03      	ldr	r3, [sp, #12]
   13e5a:	1d1a      	adds	r2, r3, #4
   13e5c:	9203      	str	r2, [sp, #12]
   13e5e:	681b      	ldr	r3, [r3, #0]
   13e60:	9304      	str	r3, [sp, #16]
   13e62:	2300      	movs	r3, #0
   13e64:	9305      	str	r3, [sp, #20]
				break;
   13e66:	e01e      	b.n	13ea6 <z_cbvprintf_impl+0x2a6>
				    && (conv->specifier == 'c')) {
   13e68:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
   13e6c:	2b63      	cmp	r3, #99	; 0x63
   13e6e:	d007      	beq.n	13e80 <z_cbvprintf_impl+0x280>
					value->uint = va_arg(ap, unsigned long);
   13e70:	9b03      	ldr	r3, [sp, #12]
   13e72:	1d1a      	adds	r2, r3, #4
   13e74:	9203      	str	r2, [sp, #12]
   13e76:	681b      	ldr	r3, [r3, #0]
   13e78:	9304      	str	r3, [sp, #16]
   13e7a:	2300      	movs	r3, #0
   13e7c:	9305      	str	r3, [sp, #20]
   13e7e:	e012      	b.n	13ea6 <z_cbvprintf_impl+0x2a6>
					value->uint = (wchar_t)va_arg(ap,
   13e80:	9b03      	ldr	r3, [sp, #12]
   13e82:	1d1a      	adds	r2, r3, #4
   13e84:	9203      	str	r2, [sp, #12]
   13e86:	681b      	ldr	r3, [r3, #0]
   13e88:	9304      	str	r3, [sp, #16]
   13e8a:	2300      	movs	r3, #0
   13e8c:	9305      	str	r3, [sp, #20]
   13e8e:	e00a      	b.n	13ea6 <z_cbvprintf_impl+0x2a6>
					(uint_value_type)va_arg(ap,
   13e90:	9b03      	ldr	r3, [sp, #12]
   13e92:	3307      	adds	r3, #7
   13e94:	f023 0307 	bic.w	r3, r3, #7
   13e98:	f103 0208 	add.w	r2, r3, #8
   13e9c:	9203      	str	r2, [sp, #12]
   13e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
   13ea2:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
   13ea6:	2901      	cmp	r1, #1
   13ea8:	d01c      	beq.n	13ee4 <z_cbvprintf_impl+0x2e4>
			} else if (length_mod == LENGTH_H) {
   13eaa:	2902      	cmp	r1, #2
   13eac:	f47f aeff 	bne.w	13cae <z_cbvprintf_impl+0xae>
				value->uint = (unsigned short)value->uint;
   13eb0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   13eb4:	9304      	str	r3, [sp, #16]
   13eb6:	2300      	movs	r3, #0
   13eb8:	9305      	str	r3, [sp, #20]
   13eba:	e6f8      	b.n	13cae <z_cbvprintf_impl+0xae>
					(uint_value_type)va_arg(ap,
   13ebc:	9b03      	ldr	r3, [sp, #12]
   13ebe:	3307      	adds	r3, #7
   13ec0:	f023 0307 	bic.w	r3, r3, #7
   13ec4:	f103 0208 	add.w	r2, r3, #8
   13ec8:	9203      	str	r2, [sp, #12]
   13eca:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
   13ece:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
   13ed2:	e7e8      	b.n	13ea6 <z_cbvprintf_impl+0x2a6>
					(uint_value_type)va_arg(ap, size_t);
   13ed4:	9b03      	ldr	r3, [sp, #12]
   13ed6:	1d1a      	adds	r2, r3, #4
   13ed8:	9203      	str	r2, [sp, #12]
   13eda:	681b      	ldr	r3, [r3, #0]
				value->uint =
   13edc:	9304      	str	r3, [sp, #16]
   13ede:	2300      	movs	r3, #0
   13ee0:	9305      	str	r3, [sp, #20]
				break;
   13ee2:	e7e0      	b.n	13ea6 <z_cbvprintf_impl+0x2a6>
				value->uint = (unsigned char)value->uint;
   13ee4:	f89d 3010 	ldrb.w	r3, [sp, #16]
   13ee8:	9304      	str	r3, [sp, #16]
   13eea:	2300      	movs	r3, #0
   13eec:	9305      	str	r3, [sp, #20]
   13eee:	e6de      	b.n	13cae <z_cbvprintf_impl+0xae>
			if (length_mod == LENGTH_UPPER_L) {
   13ef0:	2908      	cmp	r1, #8
   13ef2:	d00b      	beq.n	13f0c <z_cbvprintf_impl+0x30c>
				value->dbl = va_arg(ap, double);
   13ef4:	9b03      	ldr	r3, [sp, #12]
   13ef6:	3307      	adds	r3, #7
   13ef8:	f023 0307 	bic.w	r3, r3, #7
   13efc:	f103 0208 	add.w	r2, r3, #8
   13f00:	9203      	str	r2, [sp, #12]
   13f02:	e9d3 2300 	ldrd	r2, r3, [r3]
   13f06:	e9cd 2304 	strd	r2, r3, [sp, #16]
   13f0a:	e6d0      	b.n	13cae <z_cbvprintf_impl+0xae>
				value->ldbl = va_arg(ap, long double);
   13f0c:	9b03      	ldr	r3, [sp, #12]
   13f0e:	3307      	adds	r3, #7
   13f10:	f023 0307 	bic.w	r3, r3, #7
   13f14:	f103 0208 	add.w	r2, r3, #8
   13f18:	9203      	str	r2, [sp, #12]
   13f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
   13f1e:	e9cd 2304 	strd	r2, r3, [sp, #16]
   13f22:	e6c4      	b.n	13cae <z_cbvprintf_impl+0xae>
			value->ptr = va_arg(ap, void *);
   13f24:	9b03      	ldr	r3, [sp, #12]
   13f26:	1d1a      	adds	r2, r3, #4
   13f28:	9203      	str	r2, [sp, #12]
   13f2a:	681b      	ldr	r3, [r3, #0]
   13f2c:	9304      	str	r3, [sp, #16]
   13f2e:	e6be      	b.n	13cae <z_cbvprintf_impl+0xae>
			OUTS(sp, fp);
   13f30:	9f02      	ldr	r7, [sp, #8]
   13f32:	463b      	mov	r3, r7
   13f34:	464a      	mov	r2, r9
   13f36:	4629      	mov	r1, r5
   13f38:	4630      	mov	r0, r6
   13f3a:	f017 f887 	bl	2b04c <outs>
   13f3e:	2800      	cmp	r0, #0
   13f40:	f2c0 8141 	blt.w	141c6 <z_cbvprintf_impl+0x5c6>
   13f44:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
   13f46:	46b9      	mov	r9, r7
			continue;
   13f48:	e662      	b.n	13c10 <z_cbvprintf_impl+0x10>
		case '%':
			OUTC('%');
   13f4a:	4629      	mov	r1, r5
   13f4c:	2025      	movs	r0, #37	; 0x25
   13f4e:	47b0      	blx	r6
   13f50:	2800      	cmp	r0, #0
   13f52:	f2c0 8138 	blt.w	141c6 <z_cbvprintf_impl+0x5c6>
   13f56:	3401      	adds	r4, #1
		char sign = 0;
   13f58:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
   13f5a:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
   13f5e:	f04f 0900 	mov.w	r9, #0
			break;
   13f62:	e09b      	b.n	1409c <z_cbvprintf_impl+0x49c>
		case 's': {
			bps = (const char *)value->ptr;
   13f64:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
   13f68:	f1ba 0f00 	cmp.w	sl, #0
   13f6c:	db07      	blt.n	13f7e <z_cbvprintf_impl+0x37e>
				len = strnlen(bps, precision);
   13f6e:	4651      	mov	r1, sl
   13f70:	4648      	mov	r0, r9
   13f72:	f01c ff84 	bl	30e7e <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
   13f76:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
   13f7a:	46d8      	mov	r8, fp
			precision = -1;

			break;
   13f7c:	e08e      	b.n	1409c <z_cbvprintf_impl+0x49c>
				len = strlen(bps);
   13f7e:	4648      	mov	r0, r9
   13f80:	f7f9 f897 	bl	d0b2 <strlen>
   13f84:	e7f7      	b.n	13f76 <z_cbvprintf_impl+0x376>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   13f86:	9b04      	ldr	r3, [sp, #16]
   13f88:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
   13f8c:	46d8      	mov	r8, fp
			bpe = buf + 1;
   13f8e:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
   13f92:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
   13f96:	e081      	b.n	1409c <z_cbvprintf_impl+0x49c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
   13f98:	f018 0f08 	tst.w	r8, #8
   13f9c:	d105      	bne.n	13faa <z_cbvprintf_impl+0x3aa>
				sign = '+';
			} else if (conv->flag_space) {
   13f9e:	f018 0810 	ands.w	r8, r8, #16
   13fa2:	d004      	beq.n	13fae <z_cbvprintf_impl+0x3ae>
				sign = ' ';
   13fa4:	f04f 0820 	mov.w	r8, #32
   13fa8:	e001      	b.n	13fae <z_cbvprintf_impl+0x3ae>
				sign = '+';
   13faa:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
   13fae:	9a04      	ldr	r2, [sp, #16]
   13fb0:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
   13fb2:	2b00      	cmp	r3, #0
   13fb4:	db02      	blt.n	13fbc <z_cbvprintf_impl+0x3bc>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
   13fb6:	9204      	str	r2, [sp, #16]
   13fb8:	9305      	str	r3, [sp, #20]
   13fba:	e008      	b.n	13fce <z_cbvprintf_impl+0x3ce>
				value->uint = (uint_value_type)-sint;
   13fbc:	4252      	negs	r2, r2
   13fbe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   13fc2:	9204      	str	r2, [sp, #16]
   13fc4:	9305      	str	r3, [sp, #20]
				sign = '-';
   13fc6:	f04f 082d 	mov.w	r8, #45	; 0x2d
   13fca:	e000      	b.n	13fce <z_cbvprintf_impl+0x3ce>
		switch (conv->specifier) {
   13fcc:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
   13fce:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   13fd2:	9300      	str	r3, [sp, #0]
   13fd4:	ab0a      	add	r3, sp, #40	; 0x28
   13fd6:	aa06      	add	r2, sp, #24
   13fd8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   13fdc:	f7ff fda0 	bl	13b20 <encode_uint>
   13fe0:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
   13fe2:	f1ba 0f00 	cmp.w	sl, #0
   13fe6:	f2c0 8088 	blt.w	140fa <z_cbvprintf_impl+0x4fa>
				size_t len = bpe - bps;
   13fea:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   13fee:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
   13ff2:	f89d 2018 	ldrb.w	r2, [sp, #24]
   13ff6:	f36f 1286 	bfc	r2, #6, #1
   13ffa:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
   13ffe:	459a      	cmp	sl, r3
   14000:	d97e      	bls.n	14100 <z_cbvprintf_impl+0x500>
					conv->pad0_value = precision - (int)len;
   14002:	ebaa 0303 	sub.w	r3, sl, r3
   14006:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
   14008:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
   1400c:	e046      	b.n	1409c <z_cbvprintf_impl+0x49c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
   1400e:	9804      	ldr	r0, [sp, #16]
   14010:	b928      	cbnz	r0, 1401e <z_cbvprintf_impl+0x41e>
		char sign = 0;
   14012:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
   14014:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 141cc <z_cbvprintf_impl+0x5cc>
			bps = "(nil)";
   14018:	f1aa 0905 	sub.w	r9, sl, #5
   1401c:	e03e      	b.n	1409c <z_cbvprintf_impl+0x49c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   1401e:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   14022:	9300      	str	r3, [sp, #0]
   14024:	ab0a      	add	r3, sp, #40	; 0x28
   14026:	aa06      	add	r2, sp, #24
   14028:	2100      	movs	r1, #0
   1402a:	f7ff fd79 	bl	13b20 <encode_uint>
   1402e:	4681      	mov	r9, r0
				conv->altform_0c = true;
   14030:	f89d 301a 	ldrb.w	r3, [sp, #26]
   14034:	f043 0310 	orr.w	r3, r3, #16
   14038:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
   1403c:	2378      	movs	r3, #120	; 0x78
   1403e:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
   14042:	46d8      	mov	r8, fp
				goto prec_int_pad0;
   14044:	e7cd      	b.n	13fe2 <z_cbvprintf_impl+0x3e2>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
   14046:	9a04      	ldr	r2, [sp, #16]
	switch ((enum length_mod_enum)conv->length_mod) {
   14048:	f89d 3019 	ldrb.w	r3, [sp, #25]
   1404c:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   14050:	2b07      	cmp	r3, #7
   14052:	d806      	bhi.n	14062 <z_cbvprintf_impl+0x462>
   14054:	e8df f003 	tbb	[pc, r3]
   14058:	0f0d0b04 	.word	0x0f0d0b04
   1405c:	1b191511 	.word	0x1b191511
		*(int *)dp = count;
   14060:	6014      	str	r4, [r2, #0]
		char sign = 0;
   14062:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
   14064:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
   14068:	f04f 0900 	mov.w	r9, #0
}
   1406c:	e016      	b.n	1409c <z_cbvprintf_impl+0x49c>
		*(signed char *)dp = (signed char)count;
   1406e:	7014      	strb	r4, [r2, #0]
		break;
   14070:	e7f7      	b.n	14062 <z_cbvprintf_impl+0x462>
		*(short *)dp = (short)count;
   14072:	8014      	strh	r4, [r2, #0]
		break;
   14074:	e7f5      	b.n	14062 <z_cbvprintf_impl+0x462>
		*(long *)dp = (long)count;
   14076:	6014      	str	r4, [r2, #0]
		break;
   14078:	e7f3      	b.n	14062 <z_cbvprintf_impl+0x462>
		*(long long *)dp = (long long)count;
   1407a:	17e3      	asrs	r3, r4, #31
   1407c:	6014      	str	r4, [r2, #0]
   1407e:	6053      	str	r3, [r2, #4]
		break;
   14080:	e7ef      	b.n	14062 <z_cbvprintf_impl+0x462>
		*(intmax_t *)dp = (intmax_t)count;
   14082:	17e3      	asrs	r3, r4, #31
   14084:	6014      	str	r4, [r2, #0]
   14086:	6053      	str	r3, [r2, #4]
		break;
   14088:	e7eb      	b.n	14062 <z_cbvprintf_impl+0x462>
		*(size_t *)dp = (size_t)count;
   1408a:	6014      	str	r4, [r2, #0]
		break;
   1408c:	e7e9      	b.n	14062 <z_cbvprintf_impl+0x462>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   1408e:	6014      	str	r4, [r2, #0]
		break;
   14090:	e7e7      	b.n	14062 <z_cbvprintf_impl+0x462>
		switch (conv->specifier) {
   14092:	46d8      	mov	r8, fp
   14094:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
   14098:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
   1409c:	f1b9 0f00 	cmp.w	r9, #0
   140a0:	f000 808d 	beq.w	141be <z_cbvprintf_impl+0x5be>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
   140a4:	ebaa 0209 	sub.w	r2, sl, r9
		int pad_len = 0;

		if (sign != 0) {
   140a8:	f1b8 0f00 	cmp.w	r8, #0
   140ac:	d000      	beq.n	140b0 <z_cbvprintf_impl+0x4b0>
			nj_len += 1U;
   140ae:	3201      	adds	r2, #1
		}

		if (conv->altform_0c) {
   140b0:	f89d 101a 	ldrb.w	r1, [sp, #26]
   140b4:	f011 0f10 	tst.w	r1, #16
   140b8:	d025      	beq.n	14106 <z_cbvprintf_impl+0x506>
			nj_len += 2U;
   140ba:	3202      	adds	r2, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
   140bc:	9b07      	ldr	r3, [sp, #28]
   140be:	4413      	add	r3, r2
		if (conv->pad_fp) {
   140c0:	f011 0f40 	tst.w	r1, #64	; 0x40
   140c4:	d001      	beq.n	140ca <z_cbvprintf_impl+0x4ca>
			nj_len += conv->pad0_pre_exp;
   140c6:	9a08      	ldr	r2, [sp, #32]
   140c8:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
   140ca:	2f00      	cmp	r7, #0
   140cc:	dd31      	ble.n	14132 <z_cbvprintf_impl+0x532>
			width -= (int)nj_len;
   140ce:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
   140d0:	f89d 3018 	ldrb.w	r3, [sp, #24]
   140d4:	f013 0f04 	tst.w	r3, #4
   140d8:	d12b      	bne.n	14132 <z_cbvprintf_impl+0x532>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
   140da:	f013 0f40 	tst.w	r3, #64	; 0x40
   140de:	d017      	beq.n	14110 <z_cbvprintf_impl+0x510>
					if (sign != 0) {
   140e0:	f1b8 0f00 	cmp.w	r8, #0
   140e4:	d017      	beq.n	14116 <z_cbvprintf_impl+0x516>
						OUTC(sign);
   140e6:	4629      	mov	r1, r5
   140e8:	4640      	mov	r0, r8
   140ea:	47b0      	blx	r6
   140ec:	2800      	cmp	r0, #0
   140ee:	db6a      	blt.n	141c6 <z_cbvprintf_impl+0x5c6>
   140f0:	3401      	adds	r4, #1
						sign = 0;
   140f2:	46d8      	mov	r8, fp
					}
					pad = '0';
   140f4:	f04f 0b30 	mov.w	fp, #48	; 0x30
   140f8:	e00f      	b.n	1411a <z_cbvprintf_impl+0x51a>
		const char *bpe = buf + sizeof(buf);
   140fa:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
   140fe:	e7cd      	b.n	1409c <z_cbvprintf_impl+0x49c>
   14100:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
   14104:	e7ca      	b.n	1409c <z_cbvprintf_impl+0x49c>
		} else if (conv->altform_0) {
   14106:	f011 0f08 	tst.w	r1, #8
   1410a:	d0d7      	beq.n	140bc <z_cbvprintf_impl+0x4bc>
			nj_len += 1U;
   1410c:	3201      	adds	r2, #1
   1410e:	e7d5      	b.n	140bc <z_cbvprintf_impl+0x4bc>
				char pad = ' ';
   14110:	f04f 0b20 	mov.w	fp, #32
   14114:	e001      	b.n	1411a <z_cbvprintf_impl+0x51a>
					pad = '0';
   14116:	f04f 0b30 	mov.w	fp, #48	; 0x30
   1411a:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
   1411c:	1e5f      	subs	r7, r3, #1
   1411e:	2b00      	cmp	r3, #0
   14120:	dd07      	ble.n	14132 <z_cbvprintf_impl+0x532>
					OUTC(pad);
   14122:	4629      	mov	r1, r5
   14124:	4658      	mov	r0, fp
   14126:	47b0      	blx	r6
   14128:	2800      	cmp	r0, #0
   1412a:	db4c      	blt.n	141c6 <z_cbvprintf_impl+0x5c6>
   1412c:	3401      	adds	r4, #1
				while (width-- > 0) {
   1412e:	463b      	mov	r3, r7
   14130:	e7f4      	b.n	1411c <z_cbvprintf_impl+0x51c>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
   14132:	f1b8 0f00 	cmp.w	r8, #0
   14136:	d005      	beq.n	14144 <z_cbvprintf_impl+0x544>
			OUTC(sign);
   14138:	4629      	mov	r1, r5
   1413a:	4640      	mov	r0, r8
   1413c:	47b0      	blx	r6
   1413e:	2800      	cmp	r0, #0
   14140:	db41      	blt.n	141c6 <z_cbvprintf_impl+0x5c6>
   14142:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
   14144:	f89d 301a 	ldrb.w	r3, [sp, #26]
   14148:	f3c3 1200 	ubfx	r2, r3, #4, #1
   1414c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   14150:	4313      	orrs	r3, r2
   14152:	d005      	beq.n	14160 <z_cbvprintf_impl+0x560>
				OUTC('0');
   14154:	4629      	mov	r1, r5
   14156:	2030      	movs	r0, #48	; 0x30
   14158:	47b0      	blx	r6
   1415a:	2800      	cmp	r0, #0
   1415c:	db33      	blt.n	141c6 <z_cbvprintf_impl+0x5c6>
   1415e:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
   14160:	f89d 301a 	ldrb.w	r3, [sp, #26]
   14164:	f013 0f10 	tst.w	r3, #16
   14168:	d006      	beq.n	14178 <z_cbvprintf_impl+0x578>
				OUTC(conv->specifier);
   1416a:	4629      	mov	r1, r5
   1416c:	f89d 001b 	ldrb.w	r0, [sp, #27]
   14170:	47b0      	blx	r6
   14172:	2800      	cmp	r0, #0
   14174:	db27      	blt.n	141c6 <z_cbvprintf_impl+0x5c6>
   14176:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
   14178:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
   1417a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
   1417e:	2b00      	cmp	r3, #0
   14180:	dd07      	ble.n	14192 <z_cbvprintf_impl+0x592>
				OUTC('0');
   14182:	4629      	mov	r1, r5
   14184:	2030      	movs	r0, #48	; 0x30
   14186:	47b0      	blx	r6
   14188:	2800      	cmp	r0, #0
   1418a:	db1c      	blt.n	141c6 <z_cbvprintf_impl+0x5c6>
   1418c:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
   1418e:	4643      	mov	r3, r8
   14190:	e7f3      	b.n	1417a <z_cbvprintf_impl+0x57a>
			}

			OUTS(bps, bpe);
   14192:	4653      	mov	r3, sl
   14194:	464a      	mov	r2, r9
   14196:	4629      	mov	r1, r5
   14198:	4630      	mov	r0, r6
   1419a:	f016 ff57 	bl	2b04c <outs>
   1419e:	2800      	cmp	r0, #0
   141a0:	db11      	blt.n	141c6 <z_cbvprintf_impl+0x5c6>
   141a2:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
   141a4:	2f00      	cmp	r7, #0
   141a6:	dd07      	ble.n	141b8 <z_cbvprintf_impl+0x5b8>
			OUTC(' ');
   141a8:	4629      	mov	r1, r5
   141aa:	2020      	movs	r0, #32
   141ac:	47b0      	blx	r6
   141ae:	2800      	cmp	r0, #0
   141b0:	db09      	blt.n	141c6 <z_cbvprintf_impl+0x5c6>
   141b2:	3401      	adds	r4, #1
			--width;
   141b4:	3f01      	subs	r7, #1
   141b6:	e7f5      	b.n	141a4 <z_cbvprintf_impl+0x5a4>
		fp = extract_conversion(conv, sp);
   141b8:	f8dd 9008 	ldr.w	r9, [sp, #8]
   141bc:	e528      	b.n	13c10 <z_cbvprintf_impl+0x10>
   141be:	f8dd 9008 	ldr.w	r9, [sp, #8]
   141c2:	e525      	b.n	13c10 <z_cbvprintf_impl+0x10>
		}
	}

	return count;
   141c4:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
   141c6:	b011      	add	sp, #68	; 0x44
   141c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   141cc:	00031a49 	.word	0x00031a49

000141d0 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   141d0:	f00f bc44 	b.w	23a5c <SystemInit>

000141d4 <minimal_hexdump_line_print>:
{
	vprintk(fmt, ap);
}

static void minimal_hexdump_line_print(const char *data, size_t length)
{
   141d4:	b570      	push	{r4, r5, r6, lr}
   141d6:	4606      	mov	r6, r0
   141d8:	460d      	mov	r5, r1
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
   141da:	2400      	movs	r4, #0
   141dc:	e003      	b.n	141e6 <minimal_hexdump_line_print+0x12>
		if (i < length) {
			printk("%02x ", (unsigned char)data[i] & 0xFFu);
		} else {
			printk("   ");
   141de:	4815      	ldr	r0, [pc, #84]	; (14234 <minimal_hexdump_line_print+0x60>)
   141e0:	f016 fd35 	bl	2ac4e <printk>
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
   141e4:	3401      	adds	r4, #1
   141e6:	2c07      	cmp	r4, #7
   141e8:	d806      	bhi.n	141f8 <minimal_hexdump_line_print+0x24>
		if (i < length) {
   141ea:	42ac      	cmp	r4, r5
   141ec:	d2f7      	bcs.n	141de <minimal_hexdump_line_print+0xa>
			printk("%02x ", (unsigned char)data[i] & 0xFFu);
   141ee:	5d31      	ldrb	r1, [r6, r4]
   141f0:	4811      	ldr	r0, [pc, #68]	; (14238 <minimal_hexdump_line_print+0x64>)
   141f2:	f016 fd2c 	bl	2ac4e <printk>
   141f6:	e7f5      	b.n	141e4 <minimal_hexdump_line_print+0x10>
		}
	}

	printk("|");
   141f8:	4810      	ldr	r0, [pc, #64]	; (1423c <minimal_hexdump_line_print+0x68>)
   141fa:	f016 fd28 	bl	2ac4e <printk>

	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
   141fe:	2400      	movs	r4, #0
   14200:	e003      	b.n	1420a <minimal_hexdump_line_print+0x36>
		if (i < length) {
			unsigned char c = data[i];

			printk("%c", isprint((int)c) != 0 ? c : '.');
   14202:	480f      	ldr	r0, [pc, #60]	; (14240 <minimal_hexdump_line_print+0x6c>)
   14204:	f016 fd23 	bl	2ac4e <printk>
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
   14208:	3401      	adds	r4, #1
   1420a:	2c07      	cmp	r4, #7
   1420c:	d80d      	bhi.n	1422a <minimal_hexdump_line_print+0x56>
		if (i < length) {
   1420e:	42ac      	cmp	r4, r5
   14210:	d207      	bcs.n	14222 <minimal_hexdump_line_print+0x4e>
			unsigned char c = data[i];
   14212:	5d31      	ldrb	r1, [r6, r4]
			printk("%c", isprint((int)c) != 0 ? c : '.');
   14214:	4b0b      	ldr	r3, [pc, #44]	; (14244 <minimal_hexdump_line_print+0x70>)
   14216:	5ccb      	ldrb	r3, [r1, r3]
   14218:	f013 0f97 	tst.w	r3, #151	; 0x97
   1421c:	d1f1      	bne.n	14202 <minimal_hexdump_line_print+0x2e>
   1421e:	212e      	movs	r1, #46	; 0x2e
   14220:	e7ef      	b.n	14202 <minimal_hexdump_line_print+0x2e>
		} else {
			printk(" ");
   14222:	4809      	ldr	r0, [pc, #36]	; (14248 <minimal_hexdump_line_print+0x74>)
   14224:	f016 fd13 	bl	2ac4e <printk>
   14228:	e7ee      	b.n	14208 <minimal_hexdump_line_print+0x34>
		}
	}
	printk("\n");
   1422a:	4808      	ldr	r0, [pc, #32]	; (1424c <minimal_hexdump_line_print+0x78>)
   1422c:	f016 fd0f 	bl	2ac4e <printk>
}
   14230:	bd70      	pop	{r4, r5, r6, pc}
   14232:	bf00      	nop
   14234:	00031a54 	.word	0x00031a54
   14238:	00031a4c 	.word	0x00031a4c
   1423c:	00031a58 	.word	0x00031a58
   14240:	00031a5c 	.word	0x00031a5c
   14244:	00035321 	.word	0x00035321
   14248:	00031a50 	.word	0x00031a50
   1424c:	00034f70 	.word	0x00034f70

00014250 <z_log_minimal_hexdump_print>:

void z_log_minimal_hexdump_print(int level, const void *data, size_t size)
{
   14250:	b570      	push	{r4, r5, r6, lr}
   14252:	4606      	mov	r6, r0
   14254:	460d      	mov	r5, r1
   14256:	4614      	mov	r4, r2
	const char *data_buffer = (const char *)data;
	while (size > 0U) {
   14258:	e00b      	b.n	14272 <z_log_minimal_hexdump_print+0x22>
	z_log_minimal_printk("\n"); \
} while (false)

static inline char z_log_minimal_level_to_char(int level)
{
	switch (level) {
   1425a:	2145      	movs	r1, #69	; 0x45
		printk("%c: ", z_log_minimal_level_to_char(level));
   1425c:	4811      	ldr	r0, [pc, #68]	; (142a4 <z_log_minimal_hexdump_print+0x54>)
   1425e:	f016 fcf6 	bl	2ac4e <printk>
		minimal_hexdump_line_print(data_buffer, size);
   14262:	4621      	mov	r1, r4
   14264:	4628      	mov	r0, r5
   14266:	f7ff ffb5 	bl	141d4 <minimal_hexdump_line_print>

		if (size < HEXDUMP_BYTES_IN_LINE) {
   1426a:	2c07      	cmp	r4, #7
   1426c:	d918      	bls.n	142a0 <z_log_minimal_hexdump_print+0x50>
			break;
		}

		size -= HEXDUMP_BYTES_IN_LINE;
   1426e:	3c08      	subs	r4, #8
		data_buffer += HEXDUMP_BYTES_IN_LINE;
   14270:	3508      	adds	r5, #8
	while (size > 0U) {
   14272:	b1ac      	cbz	r4, 142a0 <z_log_minimal_hexdump_print+0x50>
   14274:	1e73      	subs	r3, r6, #1
   14276:	2b03      	cmp	r3, #3
   14278:	d80e      	bhi.n	14298 <z_log_minimal_hexdump_print+0x48>
   1427a:	a201      	add	r2, pc, #4	; (adr r2, 14280 <z_log_minimal_hexdump_print+0x30>)
   1427c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   14280:	0001425b 	.word	0x0001425b
   14284:	0001429d 	.word	0x0001429d
   14288:	00014291 	.word	0x00014291
   1428c:	00014295 	.word	0x00014295
	case LOG_LEVEL_ERR:
		return 'E';
	case LOG_LEVEL_WRN:
		return 'W';
	case LOG_LEVEL_INF:
		return 'I';
   14290:	2149      	movs	r1, #73	; 0x49
   14292:	e7e3      	b.n	1425c <z_log_minimal_hexdump_print+0xc>
	case LOG_LEVEL_DBG:
		return 'D';
   14294:	2144      	movs	r1, #68	; 0x44
   14296:	e7e1      	b.n	1425c <z_log_minimal_hexdump_print+0xc>
	default:
		return '?';
   14298:	213f      	movs	r1, #63	; 0x3f
   1429a:	e7df      	b.n	1425c <z_log_minimal_hexdump_print+0xc>
		return 'W';
   1429c:	2157      	movs	r1, #87	; 0x57
   1429e:	e7dd      	b.n	1425c <z_log_minimal_hexdump_print+0xc>
	}
}
   142a0:	bd70      	pop	{r4, r5, r6, pc}
   142a2:	bf00      	nop
   142a4:	00031a60 	.word	0x00031a60

000142a8 <nvs_startup>:
	}
	return 0;
}

static int nvs_startup(struct nvs_fs *fs)
{
   142a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   142ac:	b087      	sub	sp, #28
   142ae:	4604      	mov	r4, r0
	size_t ate_size, empty_len;
	/* Initialize addr to 0 for the case fs->sector_count == 0. This
	 * should never happen as this is verified in nvs_mount() but both
	 * Coverity and GCC believe the contrary.
	 */
	uint32_t addr = 0U;
   142b0:	2300      	movs	r3, #0
   142b2:	9303      	str	r3, [sp, #12]
	uint16_t i, closed_sectors = 0;
	uint8_t erase_value = fs->flash_parameters->erase_value;
   142b4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   142b6:	791f      	ldrb	r7, [r3, #4]

	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
   142b8:	f100 0914 	add.w	r9, r0, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   142bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   142c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   142c4:	4648      	mov	r0, r9
   142c6:	f011 ff51 	bl	2616c <z_impl_k_mutex_lock>
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   142ca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   142cc:	681b      	ldr	r3, [r3, #0]
   142ce:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
   142d0:	2a01      	cmp	r2, #1
   142d2:	d906      	bls.n	142e2 <nvs_startup+0x3a>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   142d4:	1dd6      	adds	r6, r2, #7
   142d6:	4253      	negs	r3, r2
   142d8:	401e      	ands	r6, r3
	uint16_t i, closed_sectors = 0;
   142da:	f04f 0800 	mov.w	r8, #0

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
	/* step through the sectors to find a open sector following
	 * a closed sector, this is where NVS can write.
	 */
	for (i = 0; i < fs->sector_count; i++) {
   142de:	4645      	mov	r5, r8
   142e0:	e003      	b.n	142ea <nvs_startup+0x42>
		return len;
   142e2:	2608      	movs	r6, #8
   142e4:	e7f9      	b.n	142da <nvs_startup+0x32>
	for (i = 0; i < fs->sector_count; i++) {
   142e6:	3501      	adds	r5, #1
   142e8:	b2ad      	uxth	r5, r5
   142ea:	89e3      	ldrh	r3, [r4, #14]
   142ec:	42ab      	cmp	r3, r5
   142ee:	d91c      	bls.n	1432a <nvs_startup+0x82>
		addr = (i << ADDR_SECT_SHIFT) +
		       (uint16_t)(fs->sector_size - ate_size);
   142f0:	89a1      	ldrh	r1, [r4, #12]
   142f2:	1b89      	subs	r1, r1, r6
   142f4:	b289      	uxth	r1, r1
		addr = (i << ADDR_SECT_SHIFT) +
   142f6:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   142fa:	9103      	str	r1, [sp, #12]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   142fc:	2308      	movs	r3, #8
   142fe:	463a      	mov	r2, r7
   14300:	4620      	mov	r0, r4
   14302:	f016 ff3a 	bl	2b17a <nvs_flash_cmp_const>
					 sizeof(struct nvs_ate));
		if (rc) {
   14306:	2800      	cmp	r0, #0
   14308:	d0ed      	beq.n	142e6 <nvs_startup+0x3e>
			/* closed sector */
			closed_sectors++;
   1430a:	f108 0801 	add.w	r8, r8, #1
   1430e:	fa1f f888 	uxth.w	r8, r8
			nvs_sector_advance(fs, &addr);
   14312:	a903      	add	r1, sp, #12
   14314:	4620      	mov	r0, r4
   14316:	f016 fef7 	bl	2b108 <nvs_sector_advance>
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   1431a:	2308      	movs	r3, #8
   1431c:	463a      	mov	r2, r7
   1431e:	9903      	ldr	r1, [sp, #12]
   14320:	4620      	mov	r0, r4
   14322:	f016 ff2a 	bl	2b17a <nvs_flash_cmp_const>
						 sizeof(struct nvs_ate));
			if (!rc) {
   14326:	2800      	cmp	r0, #0
   14328:	d1dd      	bne.n	142e6 <nvs_startup+0x3e>
				break;
			}
		}
	}
	/* all sectors are closed, this is not a nvs fs */
	if (closed_sectors == fs->sector_count) {
   1432a:	89e3      	ldrh	r3, [r4, #14]
   1432c:	4543      	cmp	r3, r8
   1432e:	f000 80f3 	beq.w	14518 <nvs_startup+0x270>
		rc = -EDEADLK;
		goto end;
	}

	if (i == fs->sector_count) {
   14332:	42ab      	cmp	r3, r5
   14334:	d00d      	beq.n	14352 <nvs_startup+0xaa>

	/* addr contains address of closing ate in the most recent sector,
	 * search for the last valid ate using the recover_last_ate routine
	 */

	rc = nvs_recover_last_ate(fs, &addr);
   14336:	a903      	add	r1, sp, #12
   14338:	4620      	mov	r0, r4
   1433a:	f016 ff8d 	bl	2b258 <nvs_recover_last_ate>
	if (rc) {
   1433e:	4605      	mov	r5, r0
   14340:	2800      	cmp	r0, #0
   14342:	f040 80c7 	bne.w	144d4 <nvs_startup+0x22c>

	/* addr contains address of the last valid ate in the most recent sector
	 * search for the first ate containing all cells erased, in the process
	 * also update fs->data_wra.
	 */
	fs->ate_wra = addr;
   14346:	9b03      	ldr	r3, [sp, #12]
   14348:	6063      	str	r3, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
   1434a:	0c1b      	lsrs	r3, r3, #16
   1434c:	041b      	lsls	r3, r3, #16
   1434e:	60a3      	str	r3, [r4, #8]

	while (fs->ate_wra >= fs->data_wra) {
   14350:	e010      	b.n	14374 <nvs_startup+0xcc>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
   14352:	2308      	movs	r3, #8
   14354:	463a      	mov	r2, r7
   14356:	9903      	ldr	r1, [sp, #12]
   14358:	1b89      	subs	r1, r1, r6
   1435a:	4620      	mov	r0, r4
   1435c:	f016 ff0d 	bl	2b17a <nvs_flash_cmp_const>
		if (!rc) {
   14360:	2800      	cmp	r0, #0
   14362:	d1e8      	bne.n	14336 <nvs_startup+0x8e>
			nvs_sector_advance(fs, &addr);
   14364:	a903      	add	r1, sp, #12
   14366:	4620      	mov	r0, r4
   14368:	f016 fece 	bl	2b108 <nvs_sector_advance>
   1436c:	e7e3      	b.n	14336 <nvs_startup+0x8e>
				rc = -ESPIPE;
				goto end;
			}
		}

		fs->ate_wra -= ate_size;
   1436e:	6863      	ldr	r3, [r4, #4]
   14370:	1b9b      	subs	r3, r3, r6
   14372:	6063      	str	r3, [r4, #4]
	while (fs->ate_wra >= fs->data_wra) {
   14374:	6861      	ldr	r1, [r4, #4]
   14376:	68a3      	ldr	r3, [r4, #8]
   14378:	4299      	cmp	r1, r3
   1437a:	d32e      	bcc.n	143da <nvs_startup+0x132>
		rc = nvs_flash_ate_rd(fs, fs->ate_wra, &last_ate);
   1437c:	aa04      	add	r2, sp, #16
   1437e:	4620      	mov	r0, r4
   14380:	f016 feb1 	bl	2b0e6 <nvs_flash_ate_rd>
		if (rc) {
   14384:	4605      	mov	r5, r0
   14386:	2800      	cmp	r0, #0
   14388:	f040 80a4 	bne.w	144d4 <nvs_startup+0x22c>
		rc = nvs_ate_cmp_const(&last_ate, erase_value);
   1438c:	4639      	mov	r1, r7
   1438e:	a804      	add	r0, sp, #16
   14390:	f016 feae 	bl	2b0f0 <nvs_ate_cmp_const>
		if (!rc) {
   14394:	b308      	cbz	r0, 143da <nvs_startup+0x132>
		if (nvs_ate_valid(fs, &last_ate)) {
   14396:	a904      	add	r1, sp, #16
   14398:	4620      	mov	r0, r4
   1439a:	f016 ff41 	bl	2b220 <nvs_ate_valid>
   1439e:	2800      	cmp	r0, #0
   143a0:	d0e5      	beq.n	1436e <nvs_startup+0xc6>
			fs->data_wra = addr & ADDR_SECT_MASK;
   143a2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   143a6:	0419      	lsls	r1, r3, #16
   143a8:	60a1      	str	r1, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   143aa:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   143ae:	f8bd 0014 	ldrh.w	r0, [sp, #20]
   143b2:	4403      	add	r3, r0
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   143b4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   143b6:	6812      	ldr	r2, [r2, #0]
   143b8:	b2d5      	uxtb	r5, r2
	if (write_block_size <= 1U) {
   143ba:	2d01      	cmp	r5, #1
   143bc:	d903      	bls.n	143c6 <nvs_startup+0x11e>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   143be:	442b      	add	r3, r5
   143c0:	3b01      	subs	r3, #1
   143c2:	426a      	negs	r2, r5
   143c4:	4013      	ands	r3, r2
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   143c6:	440b      	add	r3, r1
   143c8:	60a3      	str	r3, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   143ca:	6862      	ldr	r2, [r4, #4]
   143cc:	4293      	cmp	r3, r2
   143ce:	d1ce      	bne.n	1436e <nvs_startup+0xc6>
   143d0:	2800      	cmp	r0, #0
   143d2:	d0cc      	beq.n	1436e <nvs_startup+0xc6>
				rc = -ESPIPE;
   143d4:	f06f 051c 	mvn.w	r5, #28
   143d8:	e083      	b.n	144e2 <nvs_startup+0x23a>
	 * we might need to restart gc if it has not yet finished. Otherwise
	 * just erase the sector.
	 * When gc needs to be restarted, first erase the sector otherwise the
	 * data might not fit into the sector.
	 */
	addr = fs->ate_wra & ADDR_SECT_MASK;
   143da:	88e3      	ldrh	r3, [r4, #6]
   143dc:	041b      	lsls	r3, r3, #16
   143de:	9303      	str	r3, [sp, #12]
	nvs_sector_advance(fs, &addr);
   143e0:	a903      	add	r1, sp, #12
   143e2:	4620      	mov	r0, r4
   143e4:	f016 fe90 	bl	2b108 <nvs_sector_advance>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
   143e8:	89a3      	ldrh	r3, [r4, #12]
   143ea:	463a      	mov	r2, r7
   143ec:	9903      	ldr	r1, [sp, #12]
   143ee:	4620      	mov	r0, r4
   143f0:	f016 fec3 	bl	2b17a <nvs_flash_cmp_const>
	if (rc < 0) {
   143f4:	1e05      	subs	r5, r0, #0
   143f6:	db6d      	blt.n	144d4 <nvs_startup+0x22c>
		goto end;
	}
	if (rc) {
   143f8:	2d00      	cmp	r5, #0
   143fa:	d058      	beq.n	144ae <nvs_startup+0x206>
		 * (gc_done_ate) that indicates that gc was finished.
		 */
		bool gc_done_marker = false;
		struct nvs_ate gc_done_ate;

		addr = fs->ate_wra + ate_size;
   143fc:	6863      	ldr	r3, [r4, #4]
   143fe:	4433      	add	r3, r6
   14400:	9303      	str	r3, [sp, #12]
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
   14402:	e002      	b.n	1440a <nvs_startup+0x162>
			    (gc_done_ate.id == 0xffff) &&
			    (gc_done_ate.len == 0U)) {
				gc_done_marker = true;
				break;
			}
			addr += ate_size;
   14404:	9b03      	ldr	r3, [sp, #12]
   14406:	4433      	add	r3, r6
   14408:	9303      	str	r3, [sp, #12]
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
   1440a:	9903      	ldr	r1, [sp, #12]
   1440c:	b28a      	uxth	r2, r1
   1440e:	89a3      	ldrh	r3, [r4, #12]
   14410:	1b9b      	subs	r3, r3, r6
   14412:	429a      	cmp	r2, r3
   14414:	d218      	bcs.n	14448 <nvs_startup+0x1a0>
			rc = nvs_flash_ate_rd(fs, addr, &gc_done_ate);
   14416:	aa01      	add	r2, sp, #4
   14418:	4620      	mov	r0, r4
   1441a:	f016 fe64 	bl	2b0e6 <nvs_flash_ate_rd>
			if (rc) {
   1441e:	4605      	mov	r5, r0
   14420:	2800      	cmp	r0, #0
   14422:	d157      	bne.n	144d4 <nvs_startup+0x22c>
			if (nvs_ate_valid(fs, &gc_done_ate) &&
   14424:	a901      	add	r1, sp, #4
   14426:	4620      	mov	r0, r4
   14428:	f016 fefa 	bl	2b220 <nvs_ate_valid>
   1442c:	2800      	cmp	r0, #0
   1442e:	d0e9      	beq.n	14404 <nvs_startup+0x15c>
			    (gc_done_ate.id == 0xffff) &&
   14430:	f8bd 2004 	ldrh.w	r2, [sp, #4]
			if (nvs_ate_valid(fs, &gc_done_ate) &&
   14434:	f64f 73ff 	movw	r3, #65535	; 0xffff
   14438:	429a      	cmp	r2, r3
   1443a:	d1e3      	bne.n	14404 <nvs_startup+0x15c>
			    (gc_done_ate.len == 0U)) {
   1443c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
			    (gc_done_ate.id == 0xffff) &&
   14440:	2b00      	cmp	r3, #0
   14442:	d1df      	bne.n	14404 <nvs_startup+0x15c>
				gc_done_marker = true;
   14444:	2301      	movs	r3, #1
   14446:	e000      	b.n	1444a <nvs_startup+0x1a2>
		bool gc_done_marker = false;
   14448:	2300      	movs	r3, #0
		}

		if (gc_done_marker) {
   1444a:	b9d3      	cbnz	r3, 14482 <nvs_startup+0x1da>
			addr = fs->ate_wra & ADDR_SECT_MASK;
			nvs_sector_advance(fs, &addr);
			rc = nvs_flash_erase_sector(fs, addr);
			goto end;
		}
		LOG_INF("No GC Done marker found: restarting gc");
   1444c:	2149      	movs	r1, #73	; 0x49
   1444e:	4834      	ldr	r0, [pc, #208]	; (14520 <nvs_startup+0x278>)
   14450:	f016 fe2c 	bl	2b0ac <z_log_minimal_printk>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   14454:	6861      	ldr	r1, [r4, #4]
   14456:	4620      	mov	r0, r4
   14458:	f016 feb7 	bl	2b1ca <nvs_flash_erase_sector>
		if (rc) {
   1445c:	4605      	mov	r5, r0
   1445e:	2800      	cmp	r0, #0
   14460:	d138      	bne.n	144d4 <nvs_startup+0x22c>
			goto end;
		}
		fs->ate_wra &= ADDR_SECT_MASK;
   14462:	88e3      	ldrh	r3, [r4, #6]
   14464:	041b      	lsls	r3, r3, #16
   14466:	6063      	str	r3, [r4, #4]
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   14468:	89a2      	ldrh	r2, [r4, #12]
   1446a:	eba2 0246 	sub.w	r2, r2, r6, lsl #1
   1446e:	4413      	add	r3, r2
   14470:	6063      	str	r3, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
   14472:	0c1b      	lsrs	r3, r3, #16
   14474:	041b      	lsls	r3, r3, #16
   14476:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   14478:	4620      	mov	r0, r4
   1447a:	f017 f854 	bl	2b526 <nvs_gc>
   1447e:	4605      	mov	r5, r0
		goto end;
   14480:	e028      	b.n	144d4 <nvs_startup+0x22c>
			LOG_INF("GC Done marker found");
   14482:	2149      	movs	r1, #73	; 0x49
   14484:	4827      	ldr	r0, [pc, #156]	; (14524 <nvs_startup+0x27c>)
   14486:	f016 fe11 	bl	2b0ac <z_log_minimal_printk>
			addr = fs->ate_wra & ADDR_SECT_MASK;
   1448a:	88e3      	ldrh	r3, [r4, #6]
   1448c:	041b      	lsls	r3, r3, #16
   1448e:	9303      	str	r3, [sp, #12]
			nvs_sector_advance(fs, &addr);
   14490:	a903      	add	r1, sp, #12
   14492:	4620      	mov	r0, r4
   14494:	f016 fe38 	bl	2b108 <nvs_sector_advance>
			rc = nvs_flash_erase_sector(fs, addr);
   14498:	9903      	ldr	r1, [sp, #12]
   1449a:	4620      	mov	r0, r4
   1449c:	f016 fe95 	bl	2b1ca <nvs_flash_erase_sector>
   144a0:	4605      	mov	r5, r0
			goto end;
   144a2:	e017      	b.n	144d4 <nvs_startup+0x22c>
		}
		if (!rc) {
			break;
		}

		fs->data_wra += fs->flash_parameters->write_block_size;
   144a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   144a6:	681a      	ldr	r2, [r3, #0]
   144a8:	68a3      	ldr	r3, [r4, #8]
   144aa:	4413      	add	r3, r2
   144ac:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra > fs->data_wra) {
   144ae:	6863      	ldr	r3, [r4, #4]
   144b0:	68a1      	ldr	r1, [r4, #8]
   144b2:	428b      	cmp	r3, r1
   144b4:	d908      	bls.n	144c8 <nvs_startup+0x220>
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
   144b6:	1a5b      	subs	r3, r3, r1
   144b8:	463a      	mov	r2, r7
   144ba:	4620      	mov	r0, r4
   144bc:	f016 fe5d 	bl	2b17a <nvs_flash_cmp_const>
		if (rc < 0) {
   144c0:	1e05      	subs	r5, r0, #0
   144c2:	db07      	blt.n	144d4 <nvs_startup+0x22c>
		if (!rc) {
   144c4:	2d00      	cmp	r5, #0
   144c6:	d1ed      	bne.n	144a4 <nvs_startup+0x1fc>

	/* If the ate_wra is pointing to the first ate write location in a
	 * sector and data_wra is not 0, erase the sector as it contains no
	 * valid data (this also avoids closing a sector without any data).
	 */
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   144c8:	6861      	ldr	r1, [r4, #4]
   144ca:	eb01 0246 	add.w	r2, r1, r6, lsl #1
   144ce:	89a3      	ldrh	r3, [r4, #12]
   144d0:	429a      	cmp	r2, r3
   144d2:	d00d      	beq.n	144f0 <nvs_startup+0x248>

end:
	/* If the sector is empty add a gc done ate to avoid having insufficient
	 * space when doing gc.
	 */
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   144d4:	b92d      	cbnz	r5, 144e2 <nvs_startup+0x23a>
   144d6:	88a2      	ldrh	r2, [r4, #4]
		      (fs->sector_size - 2 * ate_size))) {
   144d8:	89a3      	ldrh	r3, [r4, #12]
   144da:	eba3 0646 	sub.w	r6, r3, r6, lsl #1
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   144de:	42b2      	cmp	r2, r6
   144e0:	d015      	beq.n	1450e <nvs_startup+0x266>
	return z_impl_k_mutex_unlock(mutex);
   144e2:	4648      	mov	r0, r9
   144e4:	f011 ff38 	bl	26358 <z_impl_k_mutex_unlock>

		rc = nvs_add_gc_done_ate(fs);
	}
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
   144e8:	4628      	mov	r0, r5
   144ea:	b007      	add	sp, #28
   144ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   144f0:	68a2      	ldr	r2, [r4, #8]
   144f2:	0c0b      	lsrs	r3, r1, #16
   144f4:	041b      	lsls	r3, r3, #16
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   144f6:	429a      	cmp	r2, r3
   144f8:	d0ec      	beq.n	144d4 <nvs_startup+0x22c>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   144fa:	4620      	mov	r0, r4
   144fc:	f016 fe65 	bl	2b1ca <nvs_flash_erase_sector>
		if (rc) {
   14500:	4605      	mov	r5, r0
   14502:	2800      	cmp	r0, #0
   14504:	d1e6      	bne.n	144d4 <nvs_startup+0x22c>
		fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   14506:	88e3      	ldrh	r3, [r4, #6]
   14508:	041b      	lsls	r3, r3, #16
   1450a:	60a3      	str	r3, [r4, #8]
   1450c:	e7e2      	b.n	144d4 <nvs_startup+0x22c>
		rc = nvs_add_gc_done_ate(fs);
   1450e:	4620      	mov	r0, r4
   14510:	f016 fff3 	bl	2b4fa <nvs_add_gc_done_ate>
   14514:	4605      	mov	r5, r0
   14516:	e7e4      	b.n	144e2 <nvs_startup+0x23a>
		rc = -EDEADLK;
   14518:	f06f 052c 	mvn.w	r5, #44	; 0x2c
   1451c:	e7e1      	b.n	144e2 <nvs_startup+0x23a>
   1451e:	bf00      	nop
   14520:	00031a84 	.word	0x00031a84
   14524:	00031a68 	.word	0x00031a68

00014528 <nvs_mount>:

	return 0;
}

int nvs_mount(struct nvs_fs *fs)
{
   14528:	b530      	push	{r4, r5, lr}
   1452a:	b085      	sub	sp, #20
   1452c:	4604      	mov	r4, r0

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
   1452e:	3014      	adds	r0, #20
	return z_impl_k_mutex_init(mutex);
   14530:	f01c fa2d 	bl	3098e <z_impl_k_mutex_init>

	fs->flash_parameters = flash_get_parameters(fs->flash_device);
   14534:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 */
__syscall const struct flash_parameters *flash_get_parameters(const struct device *dev);

static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
   14536:	6883      	ldr	r3, [r0, #8]
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
   14538:	68db      	ldr	r3, [r3, #12]
   1453a:	4798      	blx	r3
   1453c:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
   1453e:	b300      	cbz	r0, 14582 <nvs_mount+0x5a>
		LOG_ERR("Could not obtain flash parameters");
		return -EINVAL;
	}

	write_block_size = flash_get_write_block_size(fs->flash_device);
   14540:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	const struct flash_driver_api *api =
   14542:	6883      	ldr	r3, [r0, #8]
	return api->get_parameters(dev)->write_block_size;
   14544:	68db      	ldr	r3, [r3, #12]
   14546:	4798      	blx	r3
   14548:	6803      	ldr	r3, [r0, #0]

	/* check that the write block size is supported */
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
   1454a:	3b01      	subs	r3, #1
   1454c:	2b1f      	cmp	r3, #31
   1454e:	d81f      	bhi.n	14590 <nvs_mount+0x68>
		LOG_ERR("Unsupported write block size");
		return -EINVAL;
	}

	/* check that sector size is a multiple of pagesize */
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
   14550:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   14552:	6821      	ldr	r1, [r4, #0]
		union { uintptr_t x; struct flash_pages_info * val; } parm2 = { .val = info };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
   14554:	aa01      	add	r2, sp, #4
   14556:	f01b f85f 	bl	2f618 <z_impl_flash_get_page_info_by_offs>
	if (rc) {
   1455a:	bb00      	cbnz	r0, 1459e <nvs_mount+0x76>
		LOG_ERR("Unable to get page info");
		return -EINVAL;
	}
	if (!fs->sector_size || fs->sector_size % info.size) {
   1455c:	89a3      	ldrh	r3, [r4, #12]
   1455e:	b32b      	cbz	r3, 145ac <nvs_mount+0x84>
   14560:	9a02      	ldr	r2, [sp, #8]
   14562:	fbb3 f1f2 	udiv	r1, r3, r2
   14566:	fb02 3311 	mls	r3, r2, r1, r3
   1456a:	b9fb      	cbnz	r3, 145ac <nvs_mount+0x84>
		LOG_ERR("Invalid sector size");
		return -EINVAL;
	}

	/* check the number of sectors, it should be at least 2 */
	if (fs->sector_count < 2) {
   1456c:	89e3      	ldrh	r3, [r4, #14]
   1456e:	2b01      	cmp	r3, #1
   14570:	d923      	bls.n	145ba <nvs_mount+0x92>
		LOG_ERR("Configuration error - sector count");
		return -EINVAL;
	}

	rc = nvs_startup(fs);
   14572:	4620      	mov	r0, r4
   14574:	f7ff fe98 	bl	142a8 <nvs_startup>
	if (rc) {
   14578:	4605      	mov	r5, r0
   1457a:	b328      	cbz	r0, 145c8 <nvs_mount+0xa0>
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
   1457c:	4628      	mov	r0, r5
   1457e:	b005      	add	sp, #20
   14580:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("Could not obtain flash parameters");
   14582:	2145      	movs	r1, #69	; 0x45
   14584:	481c      	ldr	r0, [pc, #112]	; (145f8 <nvs_mount+0xd0>)
   14586:	f016 fd91 	bl	2b0ac <z_log_minimal_printk>
		return -EINVAL;
   1458a:	f06f 0515 	mvn.w	r5, #21
   1458e:	e7f5      	b.n	1457c <nvs_mount+0x54>
		LOG_ERR("Unsupported write block size");
   14590:	2145      	movs	r1, #69	; 0x45
   14592:	481a      	ldr	r0, [pc, #104]	; (145fc <nvs_mount+0xd4>)
   14594:	f016 fd8a 	bl	2b0ac <z_log_minimal_printk>
		return -EINVAL;
   14598:	f06f 0515 	mvn.w	r5, #21
   1459c:	e7ee      	b.n	1457c <nvs_mount+0x54>
		LOG_ERR("Unable to get page info");
   1459e:	2145      	movs	r1, #69	; 0x45
   145a0:	4817      	ldr	r0, [pc, #92]	; (14600 <nvs_mount+0xd8>)
   145a2:	f016 fd83 	bl	2b0ac <z_log_minimal_printk>
		return -EINVAL;
   145a6:	f06f 0515 	mvn.w	r5, #21
   145aa:	e7e7      	b.n	1457c <nvs_mount+0x54>
		LOG_ERR("Invalid sector size");
   145ac:	2145      	movs	r1, #69	; 0x45
   145ae:	4815      	ldr	r0, [pc, #84]	; (14604 <nvs_mount+0xdc>)
   145b0:	f016 fd7c 	bl	2b0ac <z_log_minimal_printk>
		return -EINVAL;
   145b4:	f06f 0515 	mvn.w	r5, #21
   145b8:	e7e0      	b.n	1457c <nvs_mount+0x54>
		LOG_ERR("Configuration error - sector count");
   145ba:	2145      	movs	r1, #69	; 0x45
   145bc:	4812      	ldr	r0, [pc, #72]	; (14608 <nvs_mount+0xe0>)
   145be:	f016 fd75 	bl	2b0ac <z_log_minimal_printk>
		return -EINVAL;
   145c2:	f06f 0515 	mvn.w	r5, #21
   145c6:	e7d9      	b.n	1457c <nvs_mount+0x54>
	fs->ready = true;
   145c8:	2301      	movs	r3, #1
   145ca:	7423      	strb	r3, [r4, #16]
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
   145cc:	89a3      	ldrh	r3, [r4, #12]
   145ce:	89e2      	ldrh	r2, [r4, #14]
   145d0:	2149      	movs	r1, #73	; 0x49
   145d2:	480e      	ldr	r0, [pc, #56]	; (1460c <nvs_mount+0xe4>)
   145d4:	f016 fd6a 	bl	2b0ac <z_log_minimal_printk>
	LOG_INF("alloc wra: %d, %x",
   145d8:	6862      	ldr	r2, [r4, #4]
   145da:	b293      	uxth	r3, r2
   145dc:	0c12      	lsrs	r2, r2, #16
   145de:	2149      	movs	r1, #73	; 0x49
   145e0:	480b      	ldr	r0, [pc, #44]	; (14610 <nvs_mount+0xe8>)
   145e2:	f016 fd63 	bl	2b0ac <z_log_minimal_printk>
	LOG_INF("data wra: %d, %x",
   145e6:	68a2      	ldr	r2, [r4, #8]
   145e8:	b293      	uxth	r3, r2
   145ea:	0c12      	lsrs	r2, r2, #16
   145ec:	2149      	movs	r1, #73	; 0x49
   145ee:	4809      	ldr	r0, [pc, #36]	; (14614 <nvs_mount+0xec>)
   145f0:	f016 fd5c 	bl	2b0ac <z_log_minimal_printk>
	return 0;
   145f4:	e7c2      	b.n	1457c <nvs_mount+0x54>
   145f6:	bf00      	nop
   145f8:	00031acc 	.word	0x00031acc
   145fc:	00031af4 	.word	0x00031af4
   14600:	00031b18 	.word	0x00031b18
   14604:	00031b38 	.word	0x00031b38
   14608:	00031b54 	.word	0x00031b54
   1460c:	00031b7c 	.word	0x00031b7c
   14610:	00031b98 	.word	0x00031b98
   14614:	00031bb0 	.word	0x00031bb0

00014618 <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
   14618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1461c:	b087      	sub	sp, #28
   1461e:	9201      	str	r2, [sp, #4]
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
   14620:	f890 b010 	ldrb.w	fp, [r0, #16]
   14624:	f1bb 0f00 	cmp.w	fp, #0
   14628:	d026      	beq.n	14678 <nvs_write+0x60>
   1462a:	4604      	mov	r4, r0
   1462c:	460e      	mov	r6, r1
   1462e:	4699      	mov	r9, r3
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   14630:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   14632:	681b      	ldr	r3, [r3, #0]
   14634:	b2d9      	uxtb	r1, r3
	if (write_block_size <= 1U) {
   14636:	2901      	cmp	r1, #1
   14638:	d925      	bls.n	14686 <nvs_write+0x6e>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   1463a:	f101 0a07 	add.w	sl, r1, #7
   1463e:	424a      	negs	r2, r1
   14640:	ea0a 0a02 	and.w	sl, sl, r2
	if (write_block_size <= 1U) {
   14644:	2901      	cmp	r1, #1
   14646:	d921      	bls.n	1468c <nvs_write+0x74>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   14648:	b2db      	uxtb	r3, r3
   1464a:	eb03 0809 	add.w	r8, r3, r9
   1464e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   14652:	425b      	negs	r3, r3
   14654:	ea08 0803 	and.w	r8, r8, r3

	/* The maximum data size is sector size - 4 ate
	 * where: 1 ate for data, 1 ate for sector close, 1 ate for gc done,
	 * and 1 ate to always allow a delete.
	 */
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   14658:	89a3      	ldrh	r3, [r4, #12]
   1465a:	eba3 038a 	sub.w	r3, r3, sl, lsl #2
   1465e:	4599      	cmp	r9, r3
   14660:	f200 8089 	bhi.w	14776 <nvs_write+0x15e>
   14664:	f1b9 0f00 	cmp.w	r9, #0
   14668:	d003      	beq.n	14672 <nvs_write+0x5a>
	    ((len > 0) && (data == NULL))) {
   1466a:	9b01      	ldr	r3, [sp, #4]
   1466c:	2b00      	cmp	r3, #0
   1466e:	f000 8085 	beq.w	1477c <nvs_write+0x164>
		return -EINVAL;
	}

	/* find latest entry with same id */
	wlk_addr = fs->ate_wra;
   14672:	6863      	ldr	r3, [r4, #4]
   14674:	9303      	str	r3, [sp, #12]
	rd_addr = wlk_addr;
   14676:	e00f      	b.n	14698 <nvs_write+0x80>
		LOG_ERR("NVS not initialized");
   14678:	2145      	movs	r1, #69	; 0x45
   1467a:	4842      	ldr	r0, [pc, #264]	; (14784 <nvs_write+0x16c>)
   1467c:	f016 fd16 	bl	2b0ac <z_log_minimal_printk>
		return -EACCES;
   14680:	f06f 050c 	mvn.w	r5, #12
   14684:	e06f      	b.n	14766 <nvs_write+0x14e>
		return len;
   14686:	f04f 0a08 	mov.w	sl, #8
   1468a:	e7db      	b.n	14644 <nvs_write+0x2c>
   1468c:	46c8      	mov	r8, r9
   1468e:	e7e3      	b.n	14658 <nvs_write+0x40>
		}
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
			prev_found = true;
			break;
		}
		if (wlk_addr == fs->ate_wra) {
   14690:	6862      	ldr	r2, [r4, #4]
   14692:	9b03      	ldr	r3, [sp, #12]
   14694:	429a      	cmp	r2, r3
   14696:	d013      	beq.n	146c0 <nvs_write+0xa8>
		rd_addr = wlk_addr;
   14698:	9f03      	ldr	r7, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   1469a:	aa04      	add	r2, sp, #16
   1469c:	a903      	add	r1, sp, #12
   1469e:	4620      	mov	r0, r4
   146a0:	f016 fe3a 	bl	2b318 <nvs_prev_ate>
		if (rc) {
   146a4:	4605      	mov	r5, r0
   146a6:	2800      	cmp	r0, #0
   146a8:	d15d      	bne.n	14766 <nvs_write+0x14e>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   146aa:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   146ae:	429e      	cmp	r6, r3
   146b0:	d1ee      	bne.n	14690 <nvs_write+0x78>
   146b2:	a904      	add	r1, sp, #16
   146b4:	4620      	mov	r0, r4
   146b6:	f016 fdb3 	bl	2b220 <nvs_ate_valid>
   146ba:	2800      	cmp	r0, #0
   146bc:	d0e8      	beq.n	14690 <nvs_write+0x78>
   146be:	e001      	b.n	146c4 <nvs_write+0xac>
	bool prev_found = false;
   146c0:	f04f 0b00 	mov.w	fp, #0
			break;
		}
	}

	if (prev_found) {
   146c4:	f1bb 0f00 	cmp.w	fp, #0
   146c8:	d018      	beq.n	146fc <nvs_write+0xe4>
		/* previous entry found */
		rd_addr &= ADDR_SECT_MASK;
   146ca:	0c3f      	lsrs	r7, r7, #16
   146cc:	043f      	lsls	r7, r7, #16
		rd_addr += wlk_ate.offset;
   146ce:	f8bd 1012 	ldrh.w	r1, [sp, #18]
   146d2:	4439      	add	r1, r7

		if (len == 0) {
   146d4:	f1b9 0f00 	cmp.w	r9, #0
   146d8:	d103      	bne.n	146e2 <nvs_write+0xca>
			/* do not try to compare with empty data */
			if (wlk_ate.len == 0U) {
   146da:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   146de:	b983      	cbnz	r3, 14702 <nvs_write+0xea>
   146e0:	e041      	b.n	14766 <nvs_write+0x14e>
				/* skip delete entry as it is already the
				 * last one
				 */
				return 0;
			}
		} else if (len == wlk_ate.len) {
   146e2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   146e6:	4599      	cmp	r9, r3
   146e8:	d10b      	bne.n	14702 <nvs_write+0xea>
			/* do not try to compare if lengths are not equal */
			/* compare the data and if equal return 0 */
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
   146ea:	464b      	mov	r3, r9
   146ec:	9a01      	ldr	r2, [sp, #4]
   146ee:	4620      	mov	r0, r4
   146f0:	f016 fd17 	bl	2b122 <nvs_flash_block_cmp>
			if (rc <= 0) {
   146f4:	2800      	cmp	r0, #0
   146f6:	dc04      	bgt.n	14702 <nvs_write+0xea>
				return rc;
   146f8:	4605      	mov	r5, r0
   146fa:	e034      	b.n	14766 <nvs_write+0x14e>
			}
		}
	} else {
		/* skip delete entry for non-existing entry */
		if (len == 0) {
   146fc:	f1b9 0f00 	cmp.w	r9, #0
   14700:	d031      	beq.n	14766 <nvs_write+0x14e>
			return 0;
		}
	}

	/* calculate required space if the entry contains data */
	if (data_size) {
   14702:	f1b8 0f00 	cmp.w	r8, #0
   14706:	d01d      	beq.n	14744 <nvs_write+0x12c>
		/* Leave space for delete ate */
		required_space = data_size + ate_size;
   14708:	fa1a f788 	uxtah	r7, sl, r8
   1470c:	b2bf      	uxth	r7, r7
	}

	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
   1470e:	f104 0814 	add.w	r8, r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   14712:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14716:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1471a:	4640      	mov	r0, r8
   1471c:	f011 fd26 	bl	2616c <z_impl_k_mutex_lock>

	gc_count = 0;
	while (1) {
		if (gc_count == fs->sector_count) {
   14720:	89e3      	ldrh	r3, [r4, #14]
   14722:	429d      	cmp	r5, r3
   14724:	d01a      	beq.n	1475c <nvs_write+0x144>
			 */
			rc = -ENOSPC;
			goto end;
		}

		if (fs->ate_wra >= (fs->data_wra + required_space)) {
   14726:	6862      	ldr	r2, [r4, #4]
   14728:	68a3      	ldr	r3, [r4, #8]
   1472a:	443b      	add	r3, r7
   1472c:	429a      	cmp	r2, r3
   1472e:	d20b      	bcs.n	14748 <nvs_write+0x130>
			}
			break;
		}


		rc = nvs_sector_close(fs);
   14730:	4620      	mov	r0, r4
   14732:	f016 ffb8 	bl	2b6a6 <nvs_sector_close>
		if (rc) {
   14736:	b9d0      	cbnz	r0, 1476e <nvs_write+0x156>
			goto end;
		}

		rc = nvs_gc(fs);
   14738:	4620      	mov	r0, r4
   1473a:	f016 fef4 	bl	2b526 <nvs_gc>
		if (rc) {
   1473e:	b9c0      	cbnz	r0, 14772 <nvs_write+0x15a>
			goto end;
		}
		gc_count++;
   14740:	3501      	adds	r5, #1
		if (gc_count == fs->sector_count) {
   14742:	e7ed      	b.n	14720 <nvs_write+0x108>
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
   14744:	2700      	movs	r7, #0
   14746:	e7e2      	b.n	1470e <nvs_write+0xf6>
			rc = nvs_flash_wrt_entry(fs, id, data, len);
   14748:	464b      	mov	r3, r9
   1474a:	9a01      	ldr	r2, [sp, #4]
   1474c:	4631      	mov	r1, r6
   1474e:	4620      	mov	r0, r4
   14750:	f016 ff8a 	bl	2b668 <nvs_flash_wrt_entry>
			if (rc) {
   14754:	4605      	mov	r5, r0
   14756:	b918      	cbnz	r0, 14760 <nvs_write+0x148>
	}
	rc = len;
   14758:	464d      	mov	r5, r9
   1475a:	e001      	b.n	14760 <nvs_write+0x148>
			rc = -ENOSPC;
   1475c:	f06f 051b 	mvn.w	r5, #27
	return z_impl_k_mutex_unlock(mutex);
   14760:	4640      	mov	r0, r8
   14762:	f011 fdf9 	bl	26358 <z_impl_k_mutex_unlock>
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
   14766:	4628      	mov	r0, r5
   14768:	b007      	add	sp, #28
   1476a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rc = nvs_sector_close(fs);
   1476e:	4605      	mov	r5, r0
   14770:	e7f6      	b.n	14760 <nvs_write+0x148>
		rc = nvs_gc(fs);
   14772:	4605      	mov	r5, r0
   14774:	e7f4      	b.n	14760 <nvs_write+0x148>
		return -EINVAL;
   14776:	f06f 0515 	mvn.w	r5, #21
   1477a:	e7f4      	b.n	14766 <nvs_write+0x14e>
   1477c:	f06f 0515 	mvn.w	r5, #21
   14780:	e7f1      	b.n	14766 <nvs_write+0x14e>
   14782:	bf00      	nop
   14784:	00031ab0 	.word	0x00031ab0

00014788 <nvs_read_hist>:
	return nvs_write(fs, id, NULL, 0);
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
   14788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1478c:	b084      	sub	sp, #16
   1478e:	4699      	mov	r9, r3
   14790:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
   14794:	7c03      	ldrb	r3, [r0, #16]
   14796:	b1a3      	cbz	r3, 147c2 <nvs_read_hist+0x3a>
   14798:	4604      	mov	r4, r0
   1479a:	460f      	mov	r7, r1
   1479c:	4692      	mov	sl, r2
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   1479e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   147a0:	681b      	ldr	r3, [r3, #0]
   147a2:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
   147a4:	2a01      	cmp	r2, #1
   147a6:	d913      	bls.n	147d0 <nvs_read_hist+0x48>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   147a8:	4613      	mov	r3, r2
   147aa:	3207      	adds	r2, #7
   147ac:	425b      	negs	r3, r3
   147ae:	4013      	ands	r3, r2
		return -EACCES;
	}

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));

	if (len > (fs->sector_size - 2 * ate_size)) {
   147b0:	89a2      	ldrh	r2, [r4, #12]
   147b2:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
   147b6:	4599      	cmp	r9, r3
   147b8:	d84b      	bhi.n	14852 <nvs_read_hist+0xca>
	if (wlk_addr == NVS_LOOKUP_CACHE_NO_ADDR) {
		rc = -ENOENT;
		goto err;
	}
#else
	wlk_addr = fs->ate_wra;
   147ba:	6866      	ldr	r6, [r4, #4]
   147bc:	9603      	str	r6, [sp, #12]
	cnt_his = 0U;
   147be:	2500      	movs	r5, #0
#endif
	rd_addr = wlk_addr;

	while (cnt_his <= cnt) {
   147c0:	e00c      	b.n	147dc <nvs_read_hist+0x54>
		LOG_ERR("NVS not initialized");
   147c2:	2145      	movs	r1, #69	; 0x45
   147c4:	4827      	ldr	r0, [pc, #156]	; (14864 <nvs_read_hist+0xdc>)
   147c6:	f016 fc71 	bl	2b0ac <z_log_minimal_printk>
		return -EACCES;
   147ca:	f06f 030c 	mvn.w	r3, #12
   147ce:	e035      	b.n	1483c <nvs_read_hist+0xb4>
		return len;
   147d0:	2308      	movs	r3, #8
   147d2:	e7ed      	b.n	147b0 <nvs_read_hist+0x28>
			goto err;
		}
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
			cnt_his++;
		}
		if (wlk_addr == fs->ate_wra) {
   147d4:	6862      	ldr	r2, [r4, #4]
   147d6:	9b03      	ldr	r3, [sp, #12]
   147d8:	429a      	cmp	r2, r3
   147da:	d016      	beq.n	1480a <nvs_read_hist+0x82>
	while (cnt_his <= cnt) {
   147dc:	45a8      	cmp	r8, r5
   147de:	d314      	bcc.n	1480a <nvs_read_hist+0x82>
		rd_addr = wlk_addr;
   147e0:	9e03      	ldr	r6, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   147e2:	aa01      	add	r2, sp, #4
   147e4:	a903      	add	r1, sp, #12
   147e6:	4620      	mov	r0, r4
   147e8:	f016 fd96 	bl	2b318 <nvs_prev_ate>
		if (rc) {
   147ec:	4603      	mov	r3, r0
   147ee:	bb28      	cbnz	r0, 1483c <nvs_read_hist+0xb4>
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
   147f0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   147f4:	429f      	cmp	r7, r3
   147f6:	d1ed      	bne.n	147d4 <nvs_read_hist+0x4c>
   147f8:	a901      	add	r1, sp, #4
   147fa:	4620      	mov	r0, r4
   147fc:	f016 fd10 	bl	2b220 <nvs_ate_valid>
   14800:	2800      	cmp	r0, #0
   14802:	d0e7      	beq.n	147d4 <nvs_read_hist+0x4c>
			cnt_his++;
   14804:	3501      	adds	r5, #1
   14806:	b2ad      	uxth	r5, r5
   14808:	e7e4      	b.n	147d4 <nvs_read_hist+0x4c>
			break;
		}
	}

	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   1480a:	6862      	ldr	r2, [r4, #4]
   1480c:	9b03      	ldr	r3, [sp, #12]
   1480e:	429a      	cmp	r2, r3
   14810:	d018      	beq.n	14844 <nvs_read_hist+0xbc>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   14812:	f8bd 3008 	ldrh.w	r3, [sp, #8]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   14816:	b1fb      	cbz	r3, 14858 <nvs_read_hist+0xd0>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   14818:	45a8      	cmp	r8, r5
   1481a:	d820      	bhi.n	1485e <nvs_read_hist+0xd6>
		return -ENOENT;
	}

	rd_addr &= ADDR_SECT_MASK;
   1481c:	0c36      	lsrs	r6, r6, #16
   1481e:	0436      	lsls	r6, r6, #16
	rd_addr += wlk_ate.offset;
   14820:	f8bd 1006 	ldrh.w	r1, [sp, #6]
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   14824:	454b      	cmp	r3, r9
   14826:	bf28      	it	cs
   14828:	464b      	movcs	r3, r9
   1482a:	4652      	mov	r2, sl
   1482c:	4431      	add	r1, r6
   1482e:	4620      	mov	r0, r4
   14830:	f016 fc4a 	bl	2b0c8 <nvs_flash_rd>
	if (rc) {
   14834:	4603      	mov	r3, r0
   14836:	b908      	cbnz	r0, 1483c <nvs_read_hist+0xb4>
		goto err;
	}

	return wlk_ate.len;
   14838:	f8bd 3008 	ldrh.w	r3, [sp, #8]

err:
	return rc;
}
   1483c:	4618      	mov	r0, r3
   1483e:	b004      	add	sp, #16
   14840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   14844:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   14848:	429f      	cmp	r7, r3
   1484a:	d0e2      	beq.n	14812 <nvs_read_hist+0x8a>
		return -ENOENT;
   1484c:	f06f 0301 	mvn.w	r3, #1
   14850:	e7f4      	b.n	1483c <nvs_read_hist+0xb4>
		return -EINVAL;
   14852:	f06f 0315 	mvn.w	r3, #21
   14856:	e7f1      	b.n	1483c <nvs_read_hist+0xb4>
		return -ENOENT;
   14858:	f06f 0301 	mvn.w	r3, #1
   1485c:	e7ee      	b.n	1483c <nvs_read_hist+0xb4>
   1485e:	f06f 0301 	mvn.w	r3, #1
   14862:	e7eb      	b.n	1483c <nvs_read_hist+0xb4>
   14864:	00031ab0 	.word	0x00031ab0

00014868 <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
   14868:	4b13      	ldr	r3, [pc, #76]	; (148b8 <flash_area_open+0x50>)
   1486a:	681b      	ldr	r3, [r3, #0]
   1486c:	b1f3      	cbz	r3, 148ac <flash_area_open+0x44>
{
   1486e:	b570      	push	{r4, r5, r6, lr}
   14870:	460d      	mov	r5, r1
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
   14872:	2300      	movs	r3, #0
   14874:	e000      	b.n	14878 <flash_area_open+0x10>
   14876:	3301      	adds	r3, #1
   14878:	4a10      	ldr	r2, [pc, #64]	; (148bc <flash_area_open+0x54>)
   1487a:	6812      	ldr	r2, [r2, #0]
   1487c:	4293      	cmp	r3, r2
   1487e:	da08      	bge.n	14892 <flash_area_open+0x2a>
		if (flash_map[i].fa_id == idx) {
   14880:	011a      	lsls	r2, r3, #4
   14882:	490d      	ldr	r1, [pc, #52]	; (148b8 <flash_area_open+0x50>)
   14884:	680c      	ldr	r4, [r1, #0]
   14886:	eb04 1603 	add.w	r6, r4, r3, lsl #4
   1488a:	5ca2      	ldrb	r2, [r4, r2]
   1488c:	4290      	cmp	r0, r2
   1488e:	d1f2      	bne.n	14876 <flash_area_open+0xe>
   14890:	e000      	b.n	14894 <flash_area_open+0x2c>
			return &flash_map[i];
		}
	}

	return NULL;
   14892:	2600      	movs	r6, #0
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
	if (area == NULL) {
   14894:	b16e      	cbz	r6, 148b2 <flash_area_open+0x4a>
		return -ENOENT;
	}

	if (!area->fa_dev || !device_is_ready(area->fa_dev)) {
   14896:	68f0      	ldr	r0, [r6, #12]
   14898:	b128      	cbz	r0, 148a6 <flash_area_open+0x3e>
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   1489a:	f01b ffff 	bl	3089c <z_device_is_ready>
   1489e:	b110      	cbz	r0, 148a6 <flash_area_open+0x3e>
		return -ENODEV;
	}

	*fap = area;
   148a0:	602e      	str	r6, [r5, #0]

	return 0;
   148a2:	2000      	movs	r0, #0
}
   148a4:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
   148a6:	f06f 0012 	mvn.w	r0, #18
   148aa:	e7fb      	b.n	148a4 <flash_area_open+0x3c>
		return -EACCES;
   148ac:	f06f 000c 	mvn.w	r0, #12
}
   148b0:	4770      	bx	lr
		return -ENOENT;
   148b2:	f06f 0001 	mvn.w	r0, #1
   148b6:	e7f5      	b.n	148a4 <flash_area_open+0x3c>
   148b8:	20000654 	.word	0x20000654
   148bc:	00031c20 	.word	0x00031c20

000148c0 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
   148c0:	b500      	push	{lr}
   148c2:	b08b      	sub	sp, #44	; 0x2c
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
   148c4:	ab03      	add	r3, sp, #12
   148c6:	9300      	str	r3, [sp, #0]
   148c8:	4b02      	ldr	r3, [pc, #8]	; (148d4 <flash_area_get_sectors+0x14>)
   148ca:	f016 ff67 	bl	2b79c <flash_area_layout>
}
   148ce:	b00b      	add	sp, #44	; 0x2c
   148d0:	f85d fb04 	ldr.w	pc, [sp], #4
   148d4:	0002b761 	.word	0x0002b761

000148d8 <settings_save_one>:

/*
 * Append a single value to persisted config. Don't store duplicate value.
 */
int settings_save_one(const char *name, const void *value, size_t val_len)
{
   148d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
   148dc:	4b0f      	ldr	r3, [pc, #60]	; (1491c <settings_save_one+0x44>)
   148de:	681d      	ldr	r5, [r3, #0]
	if (!cs) {
   148e0:	b1cd      	cbz	r5, 14916 <settings_save_one+0x3e>
   148e2:	4680      	mov	r8, r0
   148e4:	460f      	mov	r7, r1
   148e6:	4614      	mov	r4, r2
	return z_impl_k_mutex_lock(mutex, timeout);
   148e8:	4e0d      	ldr	r6, [pc, #52]	; (14920 <settings_save_one+0x48>)
   148ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   148ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   148f2:	4630      	mov	r0, r6
   148f4:	f011 fc3a 	bl	2616c <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
   148f8:	686b      	ldr	r3, [r5, #4]
   148fa:	f8d3 9008 	ldr.w	r9, [r3, #8]
   148fe:	4623      	mov	r3, r4
   14900:	463a      	mov	r2, r7
   14902:	4641      	mov	r1, r8
   14904:	4628      	mov	r0, r5
   14906:	47c8      	blx	r9
   14908:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   1490a:	4630      	mov	r0, r6
   1490c:	f011 fd24 	bl	26358 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
   14910:	4620      	mov	r0, r4
   14912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -ENOENT;
   14916:	f06f 0401 	mvn.w	r4, #1
   1491a:	e7f9      	b.n	14910 <settings_save_one+0x38>
   1491c:	20002480 	.word	0x20002480
   14920:	200009c4 	.word	0x200009c4

00014924 <settings_src_register>:
	parent->next = child;
   14924:	2300      	movs	r3, #0
   14926:	6003      	str	r3, [r0, #0]
	return list->tail;
   14928:	4b05      	ldr	r3, [pc, #20]	; (14940 <settings_src_register+0x1c>)
   1492a:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   1492c:	b11b      	cbz	r3, 14936 <settings_src_register+0x12>
	parent->next = child;
   1492e:	6018      	str	r0, [r3, #0]
	list->tail = node;
   14930:	4b03      	ldr	r3, [pc, #12]	; (14940 <settings_src_register+0x1c>)
   14932:	6058      	str	r0, [r3, #4]
}
   14934:	4770      	bx	lr
   14936:	4b02      	ldr	r3, [pc, #8]	; (14940 <settings_src_register+0x1c>)
   14938:	6058      	str	r0, [r3, #4]
	list->head = node;
   1493a:	6018      	str	r0, [r3, #0]
}
   1493c:	4770      	bx	lr
   1493e:	bf00      	nop
   14940:	20002478 	.word	0x20002478

00014944 <settings_dst_register>:
	settings_save_dst = cs;
   14944:	4b01      	ldr	r3, [pc, #4]	; (1494c <settings_dst_register+0x8>)
   14946:	6018      	str	r0, [r3, #0]
}
   14948:	4770      	bx	lr
   1494a:	bf00      	nop
   1494c:	20002480 	.word	0x20002480

00014950 <settings_load_subtree>:
{
   14950:	b530      	push	{r4, r5, lr}
   14952:	b085      	sub	sp, #20
   14954:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
   14956:	2300      	movs	r3, #0
   14958:	9301      	str	r3, [sp, #4]
   1495a:	9302      	str	r3, [sp, #8]
   1495c:	9303      	str	r3, [sp, #12]
   1495e:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   14960:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14964:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14968:	480c      	ldr	r0, [pc, #48]	; (1499c <settings_load_subtree+0x4c>)
   1496a:	f011 fbff 	bl	2616c <z_impl_k_mutex_lock>
	return list->head;
   1496e:	4b0c      	ldr	r3, [pc, #48]	; (149a0 <settings_load_subtree+0x50>)
   14970:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   14972:	b14c      	cbz	r4, 14988 <settings_load_subtree+0x38>
		cs->cs_itf->csi_load(cs, &arg);
   14974:	6863      	ldr	r3, [r4, #4]
   14976:	681b      	ldr	r3, [r3, #0]
   14978:	a901      	add	r1, sp, #4
   1497a:	4620      	mov	r0, r4
   1497c:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   1497e:	2c00      	cmp	r4, #0
   14980:	d0f7      	beq.n	14972 <settings_load_subtree+0x22>
	return node->next;
   14982:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   14984:	2c00      	cmp	r4, #0
   14986:	d1f4      	bne.n	14972 <settings_load_subtree+0x22>
	rc = settings_commit_subtree(subtree);
   14988:	4628      	mov	r0, r5
   1498a:	f000 f8eb 	bl	14b64 <settings_commit_subtree>
   1498e:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   14990:	4802      	ldr	r0, [pc, #8]	; (1499c <settings_load_subtree+0x4c>)
   14992:	f011 fce1 	bl	26358 <z_impl_k_mutex_unlock>
}
   14996:	4620      	mov	r0, r4
   14998:	b005      	add	sp, #20
   1499a:	bd30      	pop	{r4, r5, pc}
   1499c:	200009c4 	.word	0x200009c4
   149a0:	20002478 	.word	0x20002478

000149a4 <settings_load_subtree_direct>:
{
   149a4:	b510      	push	{r4, lr}
   149a6:	b084      	sub	sp, #16
	const struct settings_load_arg arg = {
   149a8:	9001      	str	r0, [sp, #4]
   149aa:	9102      	str	r1, [sp, #8]
   149ac:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
   149ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   149b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   149b6:	480b      	ldr	r0, [pc, #44]	; (149e4 <settings_load_subtree_direct+0x40>)
   149b8:	f011 fbd8 	bl	2616c <z_impl_k_mutex_lock>
	return list->head;
   149bc:	4b0a      	ldr	r3, [pc, #40]	; (149e8 <settings_load_subtree_direct+0x44>)
   149be:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   149c0:	b14c      	cbz	r4, 149d6 <settings_load_subtree_direct+0x32>
		cs->cs_itf->csi_load(cs, &arg);
   149c2:	6863      	ldr	r3, [r4, #4]
   149c4:	681b      	ldr	r3, [r3, #0]
   149c6:	a901      	add	r1, sp, #4
   149c8:	4620      	mov	r0, r4
   149ca:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   149cc:	2c00      	cmp	r4, #0
   149ce:	d0f7      	beq.n	149c0 <settings_load_subtree_direct+0x1c>
	return node->next;
   149d0:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   149d2:	2c00      	cmp	r4, #0
   149d4:	d1f4      	bne.n	149c0 <settings_load_subtree_direct+0x1c>
	return z_impl_k_mutex_unlock(mutex);
   149d6:	4803      	ldr	r0, [pc, #12]	; (149e4 <settings_load_subtree_direct+0x40>)
   149d8:	f011 fcbe 	bl	26358 <z_impl_k_mutex_unlock>
}
   149dc:	2000      	movs	r0, #0
   149de:	b004      	add	sp, #16
   149e0:	bd10      	pop	{r4, pc}
   149e2:	bf00      	nop
   149e4:	200009c4 	.word	0x200009c4
   149e8:	20002478 	.word	0x20002478

000149ec <settings_store_init>:
	list->head = NULL;
   149ec:	4b02      	ldr	r3, [pc, #8]	; (149f8 <settings_store_init+0xc>)
   149ee:	2200      	movs	r2, #0
   149f0:	601a      	str	r2, [r3, #0]
	list->tail = NULL;
   149f2:	605a      	str	r2, [r3, #4]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
   149f4:	4770      	bx	lr
   149f6:	bf00      	nop
   149f8:	20002478 	.word	0x20002478

000149fc <settings_init>:


void settings_store_init(void);

void settings_init(void)
{
   149fc:	b508      	push	{r3, lr}
	list->head = NULL;
   149fe:	4b03      	ldr	r3, [pc, #12]	; (14a0c <settings_init+0x10>)
   14a00:	2200      	movs	r2, #0
   14a02:	601a      	str	r2, [r3, #0]
	list->tail = NULL;
   14a04:	605a      	str	r2, [r3, #4]
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
   14a06:	f7ff fff1 	bl	149ec <settings_store_init>
}
   14a0a:	bd08      	pop	{r3, pc}
   14a0c:	20002484 	.word	0x20002484

00014a10 <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
   14a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14a14:	b082      	sub	sp, #8
   14a16:	4606      	mov	r6, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
   14a18:	460f      	mov	r7, r1
   14a1a:	b109      	cbz	r1, 14a20 <settings_parse_and_lookup+0x10>
		*next = NULL;
   14a1c:	2300      	movs	r3, #0
   14a1e:	600b      	str	r3, [r1, #0]
				*next = tmpnext;
			}
			continue;
		}
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
			bestmatch = ch;
   14a20:	4c2e      	ldr	r4, [pc, #184]	; (14adc <settings_parse_and_lookup+0xcc>)
   14a22:	2500      	movs	r5, #0
   14a24:	e004      	b.n	14a30 <settings_parse_and_lookup+0x20>
			if (next) {
   14a26:	b10f      	cbz	r7, 14a2c <settings_parse_and_lookup+0x1c>
				*next = tmpnext;
   14a28:	9b01      	ldr	r3, [sp, #4]
   14a2a:	603b      	str	r3, [r7, #0]
			bestmatch = ch;
   14a2c:	4625      	mov	r5, r4
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   14a2e:	3414      	adds	r4, #20
   14a30:	4b2b      	ldr	r3, [pc, #172]	; (14ae0 <settings_parse_and_lookup+0xd0>)
   14a32:	429c      	cmp	r4, r3
   14a34:	d819      	bhi.n	14a6a <settings_parse_and_lookup+0x5a>
   14a36:	4b2a      	ldr	r3, [pc, #168]	; (14ae0 <settings_parse_and_lookup+0xd0>)
   14a38:	429c      	cmp	r4, r3
   14a3a:	d222      	bcs.n	14a82 <settings_parse_and_lookup+0x72>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   14a3c:	aa01      	add	r2, sp, #4
   14a3e:	6821      	ldr	r1, [r4, #0]
   14a40:	4630      	mov	r0, r6
   14a42:	f016 feed 	bl	2b820 <settings_name_steq>
   14a46:	2800      	cmp	r0, #0
   14a48:	d0f1      	beq.n	14a2e <settings_parse_and_lookup+0x1e>
		if (!bestmatch) {
   14a4a:	2d00      	cmp	r5, #0
   14a4c:	d0eb      	beq.n	14a26 <settings_parse_and_lookup+0x16>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   14a4e:	2200      	movs	r2, #0
   14a50:	6829      	ldr	r1, [r5, #0]
   14a52:	6820      	ldr	r0, [r4, #0]
   14a54:	f016 fee4 	bl	2b820 <settings_name_steq>
   14a58:	2800      	cmp	r0, #0
   14a5a:	d0e8      	beq.n	14a2e <settings_parse_and_lookup+0x1e>
			if (next) {
   14a5c:	b11f      	cbz	r7, 14a66 <settings_parse_and_lookup+0x56>
				*next = tmpnext;
   14a5e:	9b01      	ldr	r3, [sp, #4]
   14a60:	603b      	str	r3, [r7, #0]
			bestmatch = ch;
   14a62:	4625      	mov	r5, r4
   14a64:	e7e3      	b.n	14a2e <settings_parse_and_lookup+0x1e>
   14a66:	4625      	mov	r5, r4
   14a68:	e7e1      	b.n	14a2e <settings_parse_and_lookup+0x1e>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   14a6a:	f8df 8078 	ldr.w	r8, [pc, #120]	; 14ae4 <settings_parse_and_lookup+0xd4>
   14a6e:	2294      	movs	r2, #148	; 0x94
   14a70:	4641      	mov	r1, r8
   14a72:	481d      	ldr	r0, [pc, #116]	; (14ae8 <settings_parse_and_lookup+0xd8>)
   14a74:	f016 fb0b 	bl	2b08e <assert_print>
   14a78:	2194      	movs	r1, #148	; 0x94
   14a7a:	4640      	mov	r0, r8
   14a7c:	f016 fb00 	bl	2b080 <assert_post_action>
   14a80:	e7d9      	b.n	14a36 <settings_parse_and_lookup+0x26>
	return list->head;
   14a82:	4b1a      	ldr	r3, [pc, #104]	; (14aec <settings_parse_and_lookup+0xdc>)
   14a84:	681c      	ldr	r4, [r3, #0]
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   14a86:	b15c      	cbz	r4, 14aa0 <settings_parse_and_lookup+0x90>
   14a88:	3c14      	subs	r4, #20
   14a8a:	e009      	b.n	14aa0 <settings_parse_and_lookup+0x90>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
			continue;
		}
		if (!bestmatch) {
			bestmatch = (struct settings_handler_static *)ch;
			if (next) {
   14a8c:	b10f      	cbz	r7, 14a92 <settings_parse_and_lookup+0x82>
				*next = tmpnext;
   14a8e:	9b01      	ldr	r3, [sp, #4]
   14a90:	603b      	str	r3, [r7, #0]
			bestmatch = (struct settings_handler_static *)ch;
   14a92:	4625      	mov	r5, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   14a94:	f114 0314 	adds.w	r3, r4, #20
   14a98:	d01a      	beq.n	14ad0 <settings_parse_and_lookup+0xc0>
	return node->next;
   14a9a:	6964      	ldr	r4, [r4, #20]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   14a9c:	b104      	cbz	r4, 14aa0 <settings_parse_and_lookup+0x90>
   14a9e:	3c14      	subs	r4, #20
   14aa0:	b1c4      	cbz	r4, 14ad4 <settings_parse_and_lookup+0xc4>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   14aa2:	aa01      	add	r2, sp, #4
   14aa4:	6821      	ldr	r1, [r4, #0]
   14aa6:	4630      	mov	r0, r6
   14aa8:	f016 feba 	bl	2b820 <settings_name_steq>
   14aac:	2800      	cmp	r0, #0
   14aae:	d0f1      	beq.n	14a94 <settings_parse_and_lookup+0x84>
		if (!bestmatch) {
   14ab0:	2d00      	cmp	r5, #0
   14ab2:	d0eb      	beq.n	14a8c <settings_parse_and_lookup+0x7c>
			}
			continue;
		}
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   14ab4:	2200      	movs	r2, #0
   14ab6:	6829      	ldr	r1, [r5, #0]
   14ab8:	6820      	ldr	r0, [r4, #0]
   14aba:	f016 feb1 	bl	2b820 <settings_name_steq>
   14abe:	2800      	cmp	r0, #0
   14ac0:	d0e8      	beq.n	14a94 <settings_parse_and_lookup+0x84>
			bestmatch = (struct settings_handler_static *)ch;
			if (next) {
   14ac2:	b11f      	cbz	r7, 14acc <settings_parse_and_lookup+0xbc>
				*next = tmpnext;
   14ac4:	9b01      	ldr	r3, [sp, #4]
   14ac6:	603b      	str	r3, [r7, #0]
			bestmatch = (struct settings_handler_static *)ch;
   14ac8:	4625      	mov	r5, r4
   14aca:	e7e3      	b.n	14a94 <settings_parse_and_lookup+0x84>
   14acc:	4625      	mov	r5, r4
   14ace:	e7e1      	b.n	14a94 <settings_parse_and_lookup+0x84>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   14ad0:	461c      	mov	r4, r3
   14ad2:	e7e5      	b.n	14aa0 <settings_parse_and_lookup+0x90>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
   14ad4:	4628      	mov	r0, r5
   14ad6:	b002      	add	sp, #8
   14ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14adc:	0003144c 	.word	0x0003144c
   14ae0:	000314c4 	.word	0x000314c4
   14ae4:	00031c24 	.word	0x00031c24
   14ae8:	000318f8 	.word	0x000318f8
   14aec:	20002484 	.word	0x20002484

00014af0 <settings_call_set_handler>:
int settings_call_set_handler(const char *name,
			      size_t len,
			      settings_read_cb read_cb,
			      void *read_cb_arg,
			      const struct settings_load_arg *load_arg)
{
   14af0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14af4:	b085      	sub	sp, #20
   14af6:	4604      	mov	r4, r0
   14af8:	4688      	mov	r8, r1
   14afa:	4617      	mov	r7, r2
   14afc:	461e      	mov	r6, r3
   14afe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
	int rc;
	const char *name_key = name;
   14b00:	9003      	str	r0, [sp, #12]

	if (load_arg && load_arg->subtree &&
   14b02:	b12d      	cbz	r5, 14b10 <settings_call_set_handler+0x20>
   14b04:	6829      	ldr	r1, [r5, #0]
   14b06:	b119      	cbz	r1, 14b10 <settings_call_set_handler+0x20>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
   14b08:	aa03      	add	r2, sp, #12
   14b0a:	f016 fe89 	bl	2b820 <settings_name_steq>
	if (load_arg && load_arg->subtree &&
   14b0e:	b160      	cbz	r0, 14b2a <settings_call_set_handler+0x3a>
		return 0;
	}

	if (load_arg && load_arg->cb) {
   14b10:	b175      	cbz	r5, 14b30 <settings_call_set_handler+0x40>
   14b12:	f8d5 9004 	ldr.w	r9, [r5, #4]
   14b16:	f1b9 0f00 	cmp.w	r9, #0
   14b1a:	d009      	beq.n	14b30 <settings_call_set_handler+0x40>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
   14b1c:	68ab      	ldr	r3, [r5, #8]
   14b1e:	9300      	str	r3, [sp, #0]
   14b20:	4633      	mov	r3, r6
   14b22:	463a      	mov	r2, r7
   14b24:	4641      	mov	r1, r8
   14b26:	9803      	ldr	r0, [sp, #12]
   14b28:	47c8      	blx	r9
			LOG_DBG("set-value OK. key: %s",
				name);
		}
	}
	return rc;
}
   14b2a:	b005      	add	sp, #20
   14b2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		ch = settings_parse_and_lookup(name, &name_key);
   14b30:	a903      	add	r1, sp, #12
   14b32:	4620      	mov	r0, r4
   14b34:	f7ff ff6c 	bl	14a10 <settings_parse_and_lookup>
		if (!ch) {
   14b38:	b178      	cbz	r0, 14b5a <settings_call_set_handler+0x6a>
		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
   14b3a:	6885      	ldr	r5, [r0, #8]
   14b3c:	4633      	mov	r3, r6
   14b3e:	463a      	mov	r2, r7
   14b40:	4641      	mov	r1, r8
   14b42:	9803      	ldr	r0, [sp, #12]
   14b44:	47a8      	blx	r5
   14b46:	4603      	mov	r3, r0
		if (rc != 0) {
   14b48:	2800      	cmp	r0, #0
   14b4a:	d0ee      	beq.n	14b2a <settings_call_set_handler+0x3a>
			LOG_ERR("set-value failure. key: %s error(%d)",
   14b4c:	4622      	mov	r2, r4
   14b4e:	2145      	movs	r1, #69	; 0x45
   14b50:	4803      	ldr	r0, [pc, #12]	; (14b60 <settings_call_set_handler+0x70>)
   14b52:	f016 faab 	bl	2b0ac <z_log_minimal_printk>
			rc = 0;
   14b56:	2000      	movs	r0, #0
   14b58:	e7e7      	b.n	14b2a <settings_call_set_handler+0x3a>
			return 0;
   14b5a:	2000      	movs	r0, #0
   14b5c:	e7e5      	b.n	14b2a <settings_call_set_handler+0x3a>
   14b5e:	bf00      	nop
   14b60:	00031c58 	.word	0x00031c58

00014b64 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
   14b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14b66:	4605      	mov	r5, r0
	int rc;
	int rc2;

	rc = 0;

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   14b68:	4c22      	ldr	r4, [pc, #136]	; (14bf4 <settings_commit_subtree+0x90>)
	rc = 0;
   14b6a:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   14b6c:	e000      	b.n	14b70 <settings_commit_subtree+0xc>
   14b6e:	3414      	adds	r4, #20
   14b70:	4b21      	ldr	r3, [pc, #132]	; (14bf8 <settings_commit_subtree+0x94>)
   14b72:	429c      	cmp	r4, r3
   14b74:	d812      	bhi.n	14b9c <settings_commit_subtree+0x38>
   14b76:	4b20      	ldr	r3, [pc, #128]	; (14bf8 <settings_commit_subtree+0x94>)
   14b78:	429c      	cmp	r4, r3
   14b7a:	d21a      	bcs.n	14bb2 <settings_commit_subtree+0x4e>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   14b7c:	b135      	cbz	r5, 14b8c <settings_commit_subtree+0x28>
   14b7e:	2200      	movs	r2, #0
   14b80:	4629      	mov	r1, r5
   14b82:	6820      	ldr	r0, [r4, #0]
   14b84:	f016 fe4c 	bl	2b820 <settings_name_steq>
   14b88:	2800      	cmp	r0, #0
   14b8a:	d0f0      	beq.n	14b6e <settings_commit_subtree+0xa>
			continue;
		}
		if (ch->h_commit) {
   14b8c:	68e3      	ldr	r3, [r4, #12]
   14b8e:	2b00      	cmp	r3, #0
   14b90:	d0ed      	beq.n	14b6e <settings_commit_subtree+0xa>
			rc2 = ch->h_commit();
   14b92:	4798      	blx	r3
			if (!rc) {
   14b94:	2e00      	cmp	r6, #0
   14b96:	d1ea      	bne.n	14b6e <settings_commit_subtree+0xa>
				rc = rc2;
   14b98:	4606      	mov	r6, r0
   14b9a:	e7e8      	b.n	14b6e <settings_commit_subtree+0xa>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   14b9c:	4f17      	ldr	r7, [pc, #92]	; (14bfc <settings_commit_subtree+0x98>)
   14b9e:	22f4      	movs	r2, #244	; 0xf4
   14ba0:	4639      	mov	r1, r7
   14ba2:	4817      	ldr	r0, [pc, #92]	; (14c00 <settings_commit_subtree+0x9c>)
   14ba4:	f016 fa73 	bl	2b08e <assert_print>
   14ba8:	21f4      	movs	r1, #244	; 0xf4
   14baa:	4638      	mov	r0, r7
   14bac:	f016 fa68 	bl	2b080 <assert_post_action>
   14bb0:	e7e1      	b.n	14b76 <settings_commit_subtree+0x12>
	return list->head;
   14bb2:	4b14      	ldr	r3, [pc, #80]	; (14c04 <settings_commit_subtree+0xa0>)
   14bb4:	681c      	ldr	r4, [r3, #0]
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   14bb6:	b13c      	cbz	r4, 14bc8 <settings_commit_subtree+0x64>
   14bb8:	3c14      	subs	r4, #20
   14bba:	e005      	b.n	14bc8 <settings_commit_subtree+0x64>
Z_GENLIST_PEEK_NEXT(slist, snode)
   14bbc:	f114 0314 	adds.w	r3, r4, #20
   14bc0:	d013      	beq.n	14bea <settings_commit_subtree+0x86>
	return node->next;
   14bc2:	6964      	ldr	r4, [r4, #20]
   14bc4:	b104      	cbz	r4, 14bc8 <settings_commit_subtree+0x64>
   14bc6:	3c14      	subs	r4, #20
   14bc8:	b18c      	cbz	r4, 14bee <settings_commit_subtree+0x8a>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   14bca:	b135      	cbz	r5, 14bda <settings_commit_subtree+0x76>
   14bcc:	2200      	movs	r2, #0
   14bce:	4629      	mov	r1, r5
   14bd0:	6820      	ldr	r0, [r4, #0]
   14bd2:	f016 fe25 	bl	2b820 <settings_name_steq>
   14bd6:	2800      	cmp	r0, #0
   14bd8:	d0f0      	beq.n	14bbc <settings_commit_subtree+0x58>
			continue;
		}
		if (ch->h_commit) {
   14bda:	68e3      	ldr	r3, [r4, #12]
   14bdc:	2b00      	cmp	r3, #0
   14bde:	d0ed      	beq.n	14bbc <settings_commit_subtree+0x58>
			rc2 = ch->h_commit();
   14be0:	4798      	blx	r3
			if (!rc) {
   14be2:	2e00      	cmp	r6, #0
   14be4:	d1ea      	bne.n	14bbc <settings_commit_subtree+0x58>
				rc = rc2;
   14be6:	4606      	mov	r6, r0
   14be8:	e7e8      	b.n	14bbc <settings_commit_subtree+0x58>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   14bea:	461c      	mov	r4, r3
   14bec:	e7ec      	b.n	14bc8 <settings_commit_subtree+0x64>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
   14bee:	4630      	mov	r0, r6
   14bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14bf2:	bf00      	nop
   14bf4:	0003144c 	.word	0x0003144c
   14bf8:	000314c4 	.word	0x000314c4
   14bfc:	00031c24 	.word	0x00031c24
   14c00:	000318f8 	.word	0x000318f8
   14c04:	20002484 	.word	0x20002484

00014c08 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
   14c08:	b508      	push	{r3, lr}

	int err = 0;

	if (settings_subsys_initialized) {
   14c0a:	4b07      	ldr	r3, [pc, #28]	; (14c28 <settings_subsys_init+0x20>)
   14c0c:	781b      	ldrb	r3, [r3, #0]
   14c0e:	b10b      	cbz	r3, 14c14 <settings_subsys_init+0xc>
		return 0;
   14c10:	2000      	movs	r0, #0
	if (!err) {
		settings_subsys_initialized = true;
	}

	return err;
}
   14c12:	bd08      	pop	{r3, pc}
	settings_init();
   14c14:	f7ff fef2 	bl	149fc <settings_init>
	err = settings_backend_init(); /* func rises kernel panic once error */
   14c18:	f000 f87a 	bl	14d10 <settings_backend_init>
	if (!err) {
   14c1c:	2800      	cmp	r0, #0
   14c1e:	d1f8      	bne.n	14c12 <settings_subsys_init+0xa>
		settings_subsys_initialized = true;
   14c20:	4b01      	ldr	r3, [pc, #4]	; (14c28 <settings_subsys_init+0x20>)
   14c22:	2201      	movs	r2, #1
   14c24:	701a      	strb	r2, [r3, #0]
   14c26:	e7f4      	b.n	14c12 <settings_subsys_init+0xa>
   14c28:	20003768 	.word	0x20003768

00014c2c <settings_nvs_load>:
	return 0;
}

static int settings_nvs_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
   14c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14c30:	b098      	sub	sp, #96	; 0x60
   14c32:	4680      	mov	r8, r0
   14c34:	4689      	mov	r9, r1
	char name[SETTINGS_MAX_NAME_LEN + SETTINGS_EXTRA_LEN + 1];
	char buf;
	ssize_t rc1, rc2;
	uint16_t name_id = NVS_NAMECNT_ID;

	name_id = cf->last_name_id + 1;
   14c36:	8f04      	ldrh	r4, [r0, #56]	; 0x38
   14c38:	3401      	adds	r4, #1
   14c3a:	b2a4      	uxth	r4, r4
	int ret = 0;
   14c3c:	f04f 0a00 	mov.w	sl, #0
   14c40:	e00f      	b.n	14c62 <settings_nvs_load+0x36>
		 */
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
			       &buf, sizeof(buf));

		if ((rc1 <= 0) && (rc2 <= 0)) {
   14c42:	2800      	cmp	r0, #0
   14c44:	dc28      	bgt.n	14c98 <settings_nvs_load+0x6c>
   14c46:	e00b      	b.n	14c60 <settings_nvs_load+0x34>
			/* Settings item is not stored correctly in the NVS.
			 * NVS entry for its name or value is either missing
			 * or deleted. Clean dirty entries to make space for
			 * future settings item.
			 */
			if (name_id == cf->last_name_id) {
   14c48:	f8b8 3038 	ldrh.w	r3, [r8, #56]	; 0x38
   14c4c:	42ab      	cmp	r3, r5
   14c4e:	d03e      	beq.n	14cce <settings_nvs_load+0xa2>
				cf->last_name_id--;
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
					  &cf->last_name_id, sizeof(uint16_t));
			}
			nvs_delete(&cf->cf_nvs, name_id);
   14c50:	4629      	mov	r1, r5
   14c52:	4638      	mov	r0, r7
   14c54:	f016 fd58 	bl	2b708 <nvs_delete>
			nvs_delete(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET);
   14c58:	4621      	mov	r1, r4
   14c5a:	4638      	mov	r0, r7
   14c5c:	f016 fd54 	bl	2b708 <nvs_delete>
{
   14c60:	462c      	mov	r4, r5
		name_id--;
   14c62:	1e65      	subs	r5, r4, #1
   14c64:	b2ad      	uxth	r5, r5
		if (name_id == NVS_NAMECNT_ID) {
   14c66:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   14c6a:	d02c      	beq.n	14cc6 <settings_nvs_load+0x9a>
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   14c6c:	f108 0708 	add.w	r7, r8, #8
   14c70:	234a      	movs	r3, #74	; 0x4a
   14c72:	aa03      	add	r2, sp, #12
   14c74:	4629      	mov	r1, r5
   14c76:	4638      	mov	r0, r7
   14c78:	f016 fd4c 	bl	2b714 <nvs_read>
   14c7c:	4606      	mov	r6, r0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   14c7e:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
   14c82:	343f      	adds	r4, #63	; 0x3f
   14c84:	b2a4      	uxth	r4, r4
   14c86:	2301      	movs	r3, #1
   14c88:	f10d 020b 	add.w	r2, sp, #11
   14c8c:	4621      	mov	r1, r4
   14c8e:	4638      	mov	r0, r7
   14c90:	f016 fd40 	bl	2b714 <nvs_read>
		if ((rc1 <= 0) && (rc2 <= 0)) {
   14c94:	2e00      	cmp	r6, #0
   14c96:	ddd4      	ble.n	14c42 <settings_nvs_load+0x16>
		if ((rc1 <= 0) || (rc2 <= 0)) {
   14c98:	2e00      	cmp	r6, #0
   14c9a:	ddd5      	ble.n	14c48 <settings_nvs_load+0x1c>
   14c9c:	2800      	cmp	r0, #0
   14c9e:	ddd3      	ble.n	14c48 <settings_nvs_load+0x1c>
			continue;
		}

		/* Found a name, this might not include a trailing \0 */
		name[rc1] = '\0';
   14ca0:	ab18      	add	r3, sp, #96	; 0x60
   14ca2:	441e      	add	r6, r3
   14ca4:	2300      	movs	r3, #0
   14ca6:	f806 3c54 	strb.w	r3, [r6, #-84]
		read_fn_arg.fs = &cf->cf_nvs;
   14caa:	9716      	str	r7, [sp, #88]	; 0x58
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;
   14cac:	f8ad 405c 	strh.w	r4, [sp, #92]	; 0x5c

		ret = settings_call_set_handler(
   14cb0:	f8cd 9000 	str.w	r9, [sp]
   14cb4:	ab16      	add	r3, sp, #88	; 0x58
   14cb6:	4a0b      	ldr	r2, [pc, #44]	; (14ce4 <settings_nvs_load+0xb8>)
   14cb8:	4601      	mov	r1, r0
   14cba:	a803      	add	r0, sp, #12
   14cbc:	f7ff ff18 	bl	14af0 <settings_call_set_handler>
			name, rc2,
			settings_nvs_read_fn, &read_fn_arg,
			(void *)arg);
		if (ret) {
   14cc0:	4682      	mov	sl, r0
   14cc2:	2800      	cmp	r0, #0
   14cc4:	d0cc      	beq.n	14c60 <settings_nvs_load+0x34>
			break;
		}
	}
	return ret;
}
   14cc6:	4650      	mov	r0, sl
   14cc8:	b018      	add	sp, #96	; 0x60
   14cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				cf->last_name_id--;
   14cce:	3b01      	subs	r3, #1
   14cd0:	4642      	mov	r2, r8
   14cd2:	f822 3f38 	strh.w	r3, [r2, #56]!
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   14cd6:	2302      	movs	r3, #2
   14cd8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   14cdc:	4638      	mov	r0, r7
   14cde:	f7ff fc9b 	bl	14618 <nvs_write>
   14ce2:	e7b5      	b.n	14c50 <settings_nvs_load+0x24>
   14ce4:	0002b8b1 	.word	0x0002b8b1

00014ce8 <settings_nvs_src>:
{
   14ce8:	b508      	push	{r3, lr}
	cf->cf_store.cs_itf = &settings_nvs_itf;
   14cea:	4b03      	ldr	r3, [pc, #12]	; (14cf8 <settings_nvs_src+0x10>)
   14cec:	6043      	str	r3, [r0, #4]
	settings_src_register(&cf->cf_store);
   14cee:	f7ff fe19 	bl	14924 <settings_src_register>
}
   14cf2:	2000      	movs	r0, #0
   14cf4:	bd08      	pop	{r3, pc}
   14cf6:	bf00      	nop
   14cf8:	20000658 	.word	0x20000658

00014cfc <settings_nvs_dst>:
{
   14cfc:	b508      	push	{r3, lr}
	cf->cf_store.cs_itf = &settings_nvs_itf;
   14cfe:	4b03      	ldr	r3, [pc, #12]	; (14d0c <settings_nvs_dst+0x10>)
   14d00:	6043      	str	r3, [r0, #4]
	settings_dst_register(&cf->cf_store);
   14d02:	f7ff fe1f 	bl	14944 <settings_dst_register>
}
   14d06:	2000      	movs	r0, #0
   14d08:	bd08      	pop	{r3, pc}
   14d0a:	bf00      	nop
   14d0c:	20000658 	.word	0x20000658

00014d10 <settings_backend_init>:
	LOG_DBG("Initialized");
	return 0;
}

int settings_backend_init(void)
{
   14d10:	b510      	push	{r4, lr}
   14d12:	b084      	sub	sp, #16
	int rc;
	uint16_t cnt = 0;
	size_t nvs_sector_size, nvs_size = 0;
	const struct flash_area *fa;
	struct flash_sector hw_flash_sector;
	uint32_t sector_cnt = 1;
   14d14:	2301      	movs	r3, #1
   14d16:	9300      	str	r3, [sp, #0]

	rc = flash_area_open(SETTINGS_PARTITION, &fa);
   14d18:	a903      	add	r1, sp, #12
   14d1a:	2004      	movs	r0, #4
   14d1c:	f7ff fda4 	bl	14868 <flash_area_open>
	if (rc) {
   14d20:	4603      	mov	r3, r0
   14d22:	b110      	cbz	r0, 14d2a <settings_backend_init+0x1a>
	}

	rc = settings_nvs_dst(&default_settings_nvs);

	return rc;
}
   14d24:	4618      	mov	r0, r3
   14d26:	b004      	add	sp, #16
   14d28:	bd10      	pop	{r4, pc}
	rc = flash_area_get_sectors(SETTINGS_PARTITION, &sector_cnt,
   14d2a:	aa01      	add	r2, sp, #4
   14d2c:	4669      	mov	r1, sp
   14d2e:	2004      	movs	r0, #4
   14d30:	f7ff fdc6 	bl	148c0 <flash_area_get_sectors>
   14d34:	4603      	mov	r3, r0
	if (rc == -ENODEV) {
   14d36:	f110 0f13 	cmn.w	r0, #19
   14d3a:	d0f3      	beq.n	14d24 <settings_backend_init+0x14>
	} else if (rc != 0 && rc != -ENOMEM) {
   14d3c:	b140      	cbz	r0, 14d50 <settings_backend_init+0x40>
   14d3e:	f110 0f0c 	cmn.w	r0, #12
   14d42:	d005      	beq.n	14d50 <settings_backend_init+0x40>
		k_panic();
   14d44:	4040      	eors	r0, r0
   14d46:	f380 8811 	msr	BASEPRI, r0
   14d4a:	f04f 0004 	mov.w	r0, #4
   14d4e:	df02      	svc	2
	nvs_sector_size = CONFIG_SETTINGS_NVS_SECTOR_SIZE_MULT *
   14d50:	9c02      	ldr	r4, [sp, #8]
	if (nvs_sector_size > UINT16_MAX) {
   14d52:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
   14d56:	d223      	bcs.n	14da0 <settings_backend_init+0x90>
	size_t nvs_sector_size, nvs_size = 0;
   14d58:	2200      	movs	r2, #0
	uint16_t cnt = 0;
   14d5a:	4613      	mov	r3, r2
	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
   14d5c:	2b07      	cmp	r3, #7
   14d5e:	d807      	bhi.n	14d70 <settings_backend_init+0x60>
		nvs_size += nvs_sector_size;
   14d60:	4422      	add	r2, r4
		if (nvs_size > fa->fa_size) {
   14d62:	9903      	ldr	r1, [sp, #12]
   14d64:	6889      	ldr	r1, [r1, #8]
   14d66:	4291      	cmp	r1, r2
   14d68:	d302      	bcc.n	14d70 <settings_backend_init+0x60>
		cnt++;
   14d6a:	3301      	adds	r3, #1
   14d6c:	b29b      	uxth	r3, r3
   14d6e:	e7f5      	b.n	14d5c <settings_backend_init+0x4c>
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
   14d70:	480d      	ldr	r0, [pc, #52]	; (14da8 <settings_backend_init+0x98>)
   14d72:	8284      	strh	r4, [r0, #20]
	default_settings_nvs.cf_nvs.sector_count = cnt;
   14d74:	82c3      	strh	r3, [r0, #22]
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
   14d76:	9b03      	ldr	r3, [sp, #12]
   14d78:	685a      	ldr	r2, [r3, #4]
   14d7a:	6082      	str	r2, [r0, #8]
	default_settings_nvs.flash_dev = fa->fa_dev;
   14d7c:	68db      	ldr	r3, [r3, #12]
   14d7e:	63c3      	str	r3, [r0, #60]	; 0x3c
	rc = settings_nvs_backend_init(&default_settings_nvs);
   14d80:	f016 fe44 	bl	2ba0c <settings_nvs_backend_init>
	if (rc) {
   14d84:	4603      	mov	r3, r0
   14d86:	2800      	cmp	r0, #0
   14d88:	d1cc      	bne.n	14d24 <settings_backend_init+0x14>
	rc = settings_nvs_src(&default_settings_nvs);
   14d8a:	4807      	ldr	r0, [pc, #28]	; (14da8 <settings_backend_init+0x98>)
   14d8c:	f7ff ffac 	bl	14ce8 <settings_nvs_src>
	if (rc) {
   14d90:	4603      	mov	r3, r0
   14d92:	2800      	cmp	r0, #0
   14d94:	d1c6      	bne.n	14d24 <settings_backend_init+0x14>
	rc = settings_nvs_dst(&default_settings_nvs);
   14d96:	4804      	ldr	r0, [pc, #16]	; (14da8 <settings_backend_init+0x98>)
   14d98:	f7ff ffb0 	bl	14cfc <settings_nvs_dst>
   14d9c:	4603      	mov	r3, r0
	return rc;
   14d9e:	e7c1      	b.n	14d24 <settings_backend_init+0x14>
		return -EDOM;
   14da0:	f06f 0320 	mvn.w	r3, #32
   14da4:	e7be      	b.n	14d24 <settings_backend_init+0x14>
   14da6:	bf00      	nop
   14da8:	2000248c 	.word	0x2000248c

00014dac <pm_system_resume>:
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}

void pm_system_resume(void)
{
   14dac:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
   14dae:	4b3b      	ldr	r3, [pc, #236]	; (14e9c <pm_system_resume+0xf0>)
   14db0:	7d1d      	ldrb	r5, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   14db2:	f005 031f 	and.w	r3, r5, #31
   14db6:	2201      	movs	r2, #1
   14db8:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14dba:	0969      	lsrs	r1, r5, #5
   14dbc:	4b38      	ldr	r3, [pc, #224]	; (14ea0 <pm_system_resume+0xf4>)
   14dbe:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   14dc2:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14dc4:	f3bf 8f5b 	dmb	ish
   14dc8:	e853 1f00 	ldrex	r1, [r3]
   14dcc:	ea01 0400 	and.w	r4, r1, r0
   14dd0:	e843 4600 	strex	r6, r4, [r3]
   14dd4:	2e00      	cmp	r6, #0
   14dd6:	d1f7      	bne.n	14dc8 <pm_system_resume+0x1c>
   14dd8:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   14ddc:	420a      	tst	r2, r1
   14dde:	d100      	bne.n	14de2 <pm_system_resume+0x36>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
			0, 0};
	}
}
   14de0:	bd70      	pop	{r4, r5, r6, pc}
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
   14de2:	4a30      	ldr	r2, [pc, #192]	; (14ea4 <pm_system_resume+0xf8>)
   14de4:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   14de8:	0098      	lsls	r0, r3, #2
   14dea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	if (pm_state_exit_post_ops != NULL) {
   14dee:	492e      	ldr	r1, [pc, #184]	; (14ea8 <pm_system_resume+0xfc>)
   14df0:	b1a9      	cbz	r1, 14e1e <pm_system_resume+0x72>
		pm_state_exit_post_ops(info->state, info->substate_id);
   14df2:	7859      	ldrb	r1, [r3, #1]
   14df4:	5c10      	ldrb	r0, [r2, r0]
   14df6:	f016 ffe4 	bl	2bdc2 <pm_state_exit_post_ops>
	__asm__ volatile(
   14dfa:	f04f 0340 	mov.w	r3, #64	; 0x40
   14dfe:	f3ef 8611 	mrs	r6, BASEPRI
   14e02:	f383 8812 	msr	BASEPRI_MAX, r3
   14e06:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   14e0a:	4828      	ldr	r0, [pc, #160]	; (14eac <pm_system_resume+0x100>)
   14e0c:	f011 f954 	bl	260b8 <z_spin_lock_valid>
   14e10:	b158      	cbz	r0, 14e2a <pm_system_resume+0x7e>
	z_spin_lock_set_owner(l);
   14e12:	4826      	ldr	r0, [pc, #152]	; (14eac <pm_system_resume+0x100>)
   14e14:	f011 f970 	bl	260f8 <z_spin_lock_set_owner>
	return list->head;
   14e18:	4b25      	ldr	r3, [pc, #148]	; (14eb0 <pm_system_resume+0x104>)
   14e1a:	681c      	ldr	r4, [r3, #0]
   14e1c:	e01b      	b.n	14e56 <pm_system_resume+0xaa>
	__asm__ volatile(
   14e1e:	2300      	movs	r3, #0
   14e20:	f383 8811 	msr	BASEPRI, r3
   14e24:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   14e28:	e7e7      	b.n	14dfa <pm_system_resume+0x4e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   14e2a:	4c22      	ldr	r4, [pc, #136]	; (14eb4 <pm_system_resume+0x108>)
   14e2c:	228e      	movs	r2, #142	; 0x8e
   14e2e:	4621      	mov	r1, r4
   14e30:	4821      	ldr	r0, [pc, #132]	; (14eb8 <pm_system_resume+0x10c>)
   14e32:	f016 f92c 	bl	2b08e <assert_print>
   14e36:	218e      	movs	r1, #142	; 0x8e
   14e38:	4620      	mov	r0, r4
   14e3a:	f016 f921 	bl	2b080 <assert_post_action>
   14e3e:	e7e8      	b.n	14e12 <pm_system_resume+0x66>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   14e40:	4b16      	ldr	r3, [pc, #88]	; (14e9c <pm_system_resume+0xf0>)
   14e42:	7d1b      	ldrb	r3, [r3, #20]
   14e44:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   14e48:	4916      	ldr	r1, [pc, #88]	; (14ea4 <pm_system_resume+0xf8>)
   14e4a:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
   14e4e:	4790      	blx	r2
Z_GENLIST_PEEK_NEXT(slist, snode)
   14e50:	b10c      	cbz	r4, 14e56 <pm_system_resume+0xaa>
	return node->next;
   14e52:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   14e54:	b124      	cbz	r4, 14e60 <pm_system_resume+0xb4>
   14e56:	b11c      	cbz	r4, 14e60 <pm_system_resume+0xb4>
			callback = notifier->state_exit;
   14e58:	68a2      	ldr	r2, [r4, #8]
		if (callback) {
   14e5a:	2a00      	cmp	r2, #0
   14e5c:	d1f0      	bne.n	14e40 <pm_system_resume+0x94>
   14e5e:	e7f7      	b.n	14e50 <pm_system_resume+0xa4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   14e60:	4812      	ldr	r0, [pc, #72]	; (14eac <pm_system_resume+0x100>)
   14e62:	f011 f939 	bl	260d8 <z_spin_unlock_valid>
   14e66:	b170      	cbz	r0, 14e86 <pm_system_resume+0xda>
	__asm__ volatile(
   14e68:	f386 8811 	msr	BASEPRI, r6
   14e6c:	f3bf 8f6f 	isb	sy
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   14e70:	4a0c      	ldr	r2, [pc, #48]	; (14ea4 <pm_system_resume+0xf8>)
   14e72:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   14e76:	00a9      	lsls	r1, r5, #2
   14e78:	eb02 0585 	add.w	r5, r2, r5, lsl #2
   14e7c:	2300      	movs	r3, #0
   14e7e:	5053      	str	r3, [r2, r1]
   14e80:	606b      	str	r3, [r5, #4]
   14e82:	60ab      	str	r3, [r5, #8]
}
   14e84:	e7ac      	b.n	14de0 <pm_system_resume+0x34>
   14e86:	4c0b      	ldr	r4, [pc, #44]	; (14eb4 <pm_system_resume+0x108>)
   14e88:	22b9      	movs	r2, #185	; 0xb9
   14e8a:	4621      	mov	r1, r4
   14e8c:	480a      	ldr	r0, [pc, #40]	; (14eb8 <pm_system_resume+0x10c>)
   14e8e:	f016 f8fe 	bl	2b08e <assert_print>
   14e92:	21b9      	movs	r1, #185	; 0xb9
   14e94:	4620      	mov	r0, r4
   14e96:	f016 f8f3 	bl	2b080 <assert_post_action>
   14e9a:	e7e5      	b.n	14e68 <pm_system_resume+0xbc>
   14e9c:	200036f4 	.word	0x200036f4
   14ea0:	200024f4 	.word	0x200024f4
   14ea4:	200024e8 	.word	0x200024e8
   14ea8:	0002bdc3 	.word	0x0002bdc3
   14eac:	200024d0 	.word	0x200024d0
   14eb0:	200024d4 	.word	0x200024d4
   14eb4:	000319f0 	.word	0x000319f0
   14eb8:	000318f8 	.word	0x000318f8

00014ebc <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   14ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14ebe:	4604      	mov	r4, r0
	uint8_t id = CURRENT_CPU;
   14ec0:	4b72      	ldr	r3, [pc, #456]	; (1508c <pm_system_suspend+0x1d0>)
   14ec2:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
   14ec4:	f04f 0340 	mov.w	r3, #64	; 0x40
   14ec8:	f3ef 8611 	mrs	r6, BASEPRI
   14ecc:	f383 8812 	msr	BASEPRI_MAX, r3
   14ed0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   14ed4:	486e      	ldr	r0, [pc, #440]	; (15090 <pm_system_suspend+0x1d4>)
   14ed6:	f011 f8ef 	bl	260b8 <z_spin_lock_valid>
   14eda:	2800      	cmp	r0, #0
   14edc:	d045      	beq.n	14f6a <pm_system_suspend+0xae>
	z_spin_lock_set_owner(l);
   14ede:	486c      	ldr	r0, [pc, #432]	; (15090 <pm_system_suspend+0x1d4>)
   14ee0:	f011 f90a 	bl	260f8 <z_spin_lock_set_owner>
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   14ee4:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   14ee8:	4a6a      	ldr	r2, [pc, #424]	; (15094 <pm_system_suspend+0x1d8>)
   14eea:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   14eee:	2b00      	cmp	r3, #0
   14ef0:	d046      	beq.n	14f80 <pm_system_suspend+0xc4>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   14ef2:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
   14ef6:	4b68      	ldr	r3, [pc, #416]	; (15098 <pm_system_suspend+0x1dc>)
   14ef8:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   14efc:	4617      	mov	r7, r2
   14efe:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   14f02:	ea4f 0e83 	mov.w	lr, r3, lsl #2
   14f06:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   14f0a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   14f0e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   14f12:	2300      	movs	r3, #0
   14f14:	f807 300e 	strb.w	r3, [r7, lr]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   14f18:	485d      	ldr	r0, [pc, #372]	; (15090 <pm_system_suspend+0x1d4>)
   14f1a:	f011 f8dd 	bl	260d8 <z_spin_unlock_valid>
   14f1e:	2800      	cmp	r0, #0
   14f20:	d03d      	beq.n	14f9e <pm_system_suspend+0xe2>
	__asm__ volatile(
   14f22:	f386 8811 	msr	BASEPRI, r6
   14f26:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   14f2a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   14f2e:	4a5a      	ldr	r2, [pc, #360]	; (15098 <pm_system_suspend+0x1dc>)
   14f30:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   14f34:	2b00      	cmp	r3, #0
   14f36:	f000 80a7 	beq.w	15088 <pm_system_suspend+0x1cc>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   14f3a:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   14f3e:	d139      	bne.n	14fb4 <pm_system_suspend+0xf8>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   14f40:	f012 fb64 	bl	2760c <k_sched_lock>
	__asm__ volatile(
   14f44:	f04f 0340 	mov.w	r3, #64	; 0x40
   14f48:	f3ef 8611 	mrs	r6, BASEPRI
   14f4c:	f383 8812 	msr	BASEPRI_MAX, r3
   14f50:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   14f54:	4851      	ldr	r0, [pc, #324]	; (1509c <pm_system_suspend+0x1e0>)
   14f56:	f011 f8af 	bl	260b8 <z_spin_lock_valid>
   14f5a:	2800      	cmp	r0, #0
   14f5c:	d03f      	beq.n	14fde <pm_system_suspend+0x122>
	z_spin_lock_set_owner(l);
   14f5e:	484f      	ldr	r0, [pc, #316]	; (1509c <pm_system_suspend+0x1e0>)
   14f60:	f011 f8ca 	bl	260f8 <z_spin_lock_set_owner>
	return list->head;
   14f64:	4b4e      	ldr	r3, [pc, #312]	; (150a0 <pm_system_suspend+0x1e4>)
   14f66:	681c      	ldr	r4, [r3, #0]
   14f68:	e04f      	b.n	1500a <pm_system_suspend+0x14e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   14f6a:	4f4e      	ldr	r7, [pc, #312]	; (150a4 <pm_system_suspend+0x1e8>)
   14f6c:	228e      	movs	r2, #142	; 0x8e
   14f6e:	4639      	mov	r1, r7
   14f70:	484d      	ldr	r0, [pc, #308]	; (150a8 <pm_system_suspend+0x1ec>)
   14f72:	f016 f88c 	bl	2b08e <assert_print>
   14f76:	218e      	movs	r1, #142	; 0x8e
   14f78:	4638      	mov	r0, r7
   14f7a:	f016 f881 	bl	2b080 <assert_post_action>
   14f7e:	e7ae      	b.n	14ede <pm_system_suspend+0x22>
		info = pm_policy_next_state(id, ticks);
   14f80:	4621      	mov	r1, r4
   14f82:	4628      	mov	r0, r5
   14f84:	f000 f89a 	bl	150bc <pm_policy_next_state>
		if (info != NULL) {
   14f88:	2800      	cmp	r0, #0
   14f8a:	d0c5      	beq.n	14f18 <pm_system_suspend+0x5c>
			z_cpus_pm_state[id] = *info;
   14f8c:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   14f90:	4a41      	ldr	r2, [pc, #260]	; (15098 <pm_system_suspend+0x1dc>)
   14f92:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   14f96:	c807      	ldmia	r0, {r0, r1, r2}
   14f98:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   14f9c:	e7bc      	b.n	14f18 <pm_system_suspend+0x5c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   14f9e:	4f41      	ldr	r7, [pc, #260]	; (150a4 <pm_system_suspend+0x1e8>)
   14fa0:	22b9      	movs	r2, #185	; 0xb9
   14fa2:	4639      	mov	r1, r7
   14fa4:	4840      	ldr	r0, [pc, #256]	; (150a8 <pm_system_suspend+0x1ec>)
   14fa6:	f016 f872 	bl	2b08e <assert_print>
   14faa:	21b9      	movs	r1, #185	; 0xb9
   14fac:	4638      	mov	r0, r7
   14fae:	f016 f867 	bl	2b080 <assert_post_action>
   14fb2:	e7b6      	b.n	14f22 <pm_system_suspend+0x66>
		     k_us_to_ticks_ceil32(
   14fb4:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   14fb8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   14fbc:	6898      	ldr	r0, [r3, #8]
			return (uint32_t)((t * to_hz + off) / from_hz);
   14fbe:	0c41      	lsrs	r1, r0, #17
   14fc0:	03c0      	lsls	r0, r0, #15
   14fc2:	4b3a      	ldr	r3, [pc, #232]	; (150ac <pm_system_suspend+0x1f0>)
   14fc4:	18c0      	adds	r0, r0, r3
   14fc6:	4a3a      	ldr	r2, [pc, #232]	; (150b0 <pm_system_suspend+0x1f4>)
   14fc8:	f04f 0300 	mov.w	r3, #0
   14fcc:	f141 0100 	adc.w	r1, r1, #0
   14fd0:	f7ec f80e 	bl	ff0 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
   14fd4:	2101      	movs	r1, #1
   14fd6:	1a20      	subs	r0, r4, r0
   14fd8:	f013 fddc 	bl	28b94 <z_set_timeout_expiry>
   14fdc:	e7b0      	b.n	14f40 <pm_system_suspend+0x84>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   14fde:	4c31      	ldr	r4, [pc, #196]	; (150a4 <pm_system_suspend+0x1e8>)
   14fe0:	228e      	movs	r2, #142	; 0x8e
   14fe2:	4621      	mov	r1, r4
   14fe4:	4830      	ldr	r0, [pc, #192]	; (150a8 <pm_system_suspend+0x1ec>)
   14fe6:	f016 f852 	bl	2b08e <assert_print>
   14fea:	218e      	movs	r1, #142	; 0x8e
   14fec:	4620      	mov	r0, r4
   14fee:	f016 f847 	bl	2b080 <assert_post_action>
   14ff2:	e7b4      	b.n	14f5e <pm_system_suspend+0xa2>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   14ff4:	4b25      	ldr	r3, [pc, #148]	; (1508c <pm_system_suspend+0x1d0>)
   14ff6:	7d1b      	ldrb	r3, [r3, #20]
   14ff8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   14ffc:	4926      	ldr	r1, [pc, #152]	; (15098 <pm_system_suspend+0x1dc>)
   14ffe:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
   15002:	4790      	blx	r2
Z_GENLIST_PEEK_NEXT(slist, snode)
   15004:	b10c      	cbz	r4, 1500a <pm_system_suspend+0x14e>
	return node->next;
   15006:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   15008:	b124      	cbz	r4, 15014 <pm_system_suspend+0x158>
   1500a:	b11c      	cbz	r4, 15014 <pm_system_suspend+0x158>
			callback = notifier->state_entry;
   1500c:	6862      	ldr	r2, [r4, #4]
		if (callback) {
   1500e:	2a00      	cmp	r2, #0
   15010:	d1f0      	bne.n	14ff4 <pm_system_suspend+0x138>
   15012:	e7f7      	b.n	15004 <pm_system_suspend+0x148>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   15014:	4821      	ldr	r0, [pc, #132]	; (1509c <pm_system_suspend+0x1e0>)
   15016:	f011 f85f 	bl	260d8 <z_spin_unlock_valid>
   1501a:	b350      	cbz	r0, 15072 <pm_system_suspend+0x1b6>
	__asm__ volatile(
   1501c:	f386 8811 	msr	BASEPRI, r6
   15020:	f3bf 8f6f 	isb	sy
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   15024:	f005 031f 	and.w	r3, r5, #31
   15028:	2101      	movs	r1, #1
   1502a:	4099      	lsls	r1, r3

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1502c:	096b      	lsrs	r3, r5, #5
   1502e:	4a21      	ldr	r2, [pc, #132]	; (150b4 <pm_system_suspend+0x1f8>)
   15030:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15034:	f3bf 8f5b 	dmb	ish
   15038:	e853 2f00 	ldrex	r2, [r3]
   1503c:	430a      	orrs	r2, r1
   1503e:	e843 2000 	strex	r0, r2, [r3]
   15042:	2800      	cmp	r0, #0
   15044:	d1f8      	bne.n	15038 <pm_system_suspend+0x17c>
   15046:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
   1504a:	4b1b      	ldr	r3, [pc, #108]	; (150b8 <pm_system_suspend+0x1fc>)
   1504c:	b15b      	cbz	r3, 15066 <pm_system_suspend+0x1aa>
		pm_state_set(info->state, info->substate_id);
   1504e:	4a12      	ldr	r2, [pc, #72]	; (15098 <pm_system_suspend+0x1dc>)
   15050:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   15054:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   15058:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1505c:	7859      	ldrb	r1, [r3, #1]
   1505e:	f812 0025 	ldrb.w	r0, [r2, r5, lsl #2]
   15062:	f016 fea2 	bl	2bdaa <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   15066:	f7ff fea1 	bl	14dac <pm_system_resume>
	k_sched_unlock();
   1506a:	f012 ffe3 	bl	28034 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
   1506e:	2001      	movs	r0, #1
}
   15070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15072:	4c0c      	ldr	r4, [pc, #48]	; (150a4 <pm_system_suspend+0x1e8>)
   15074:	22b9      	movs	r2, #185	; 0xb9
   15076:	4621      	mov	r1, r4
   15078:	480b      	ldr	r0, [pc, #44]	; (150a8 <pm_system_suspend+0x1ec>)
   1507a:	f016 f808 	bl	2b08e <assert_print>
   1507e:	21b9      	movs	r1, #185	; 0xb9
   15080:	4620      	mov	r0, r4
   15082:	f015 fffd 	bl	2b080 <assert_post_action>
   15086:	e7c9      	b.n	1501c <pm_system_suspend+0x160>
		return false;
   15088:	2000      	movs	r0, #0
   1508a:	e7f1      	b.n	15070 <pm_system_suspend+0x1b4>
   1508c:	200036f4 	.word	0x200036f4
   15090:	200024cc 	.word	0x200024cc
   15094:	200024dc 	.word	0x200024dc
   15098:	200024e8 	.word	0x200024e8
   1509c:	200024d0 	.word	0x200024d0
   150a0:	200024d4 	.word	0x200024d4
   150a4:	000319f0 	.word	0x000319f0
   150a8:	000318f8 	.word	0x000318f8
   150ac:	000f423f 	.word	0x000f423f
   150b0:	000f4240 	.word	0x000f4240
   150b4:	200024f4 	.word	0x200024f4
   150b8:	0002bdab 	.word	0x0002bdab

000150bc <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   150bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   150c0:	b082      	sub	sp, #8
   150c2:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   150c4:	a901      	add	r1, sp, #4
   150c6:	f000 f845 	bl	15154 <pm_state_cpu_get_all>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   150ca:	1e44      	subs	r4, r0, #1
   150cc:	b224      	sxth	r4, r4
   150ce:	e007      	b.n	150e0 <pm_policy_next_state+0x24>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
		    (exit_latency >= max_latency_ticks)) {
			continue;
		}

		if ((ticks == K_TICKS_FOREVER) ||
   150d0:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
   150d4:	d033      	beq.n	1513e <pm_policy_next_state+0x82>
		    (ticks >= (min_residency + exit_latency))) {
   150d6:	4440      	add	r0, r8
		if ((ticks == K_TICKS_FOREVER) ||
   150d8:	42b0      	cmp	r0, r6
   150da:	d930      	bls.n	1513e <pm_policy_next_state+0x82>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   150dc:	3c01      	subs	r4, #1
   150de:	b224      	sxth	r4, r4
   150e0:	2c00      	cmp	r4, #0
   150e2:	db2b      	blt.n	1513c <pm_policy_next_state+0x80>
		const struct pm_state_info *state = &cpu_states[i];
   150e4:	9b01      	ldr	r3, [sp, #4]
   150e6:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   150ea:	eb03 0582 	add.w	r5, r3, r2, lsl #2
		if (pm_policy_state_lock_is_active(state->state, state->substate_id)) {
   150ee:	7869      	ldrb	r1, [r5, #1]
   150f0:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
   150f4:	f016 fcaf 	bl	2ba56 <pm_policy_state_lock_is_active>
   150f8:	2800      	cmp	r0, #0
   150fa:	d1ef      	bne.n	150dc <pm_policy_next_state+0x20>
		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
   150fc:	6868      	ldr	r0, [r5, #4]
   150fe:	0c41      	lsrs	r1, r0, #17
   15100:	03c0      	lsls	r0, r0, #15
   15102:	4f11      	ldr	r7, [pc, #68]	; (15148 <pm_policy_next_state+0x8c>)
   15104:	19c0      	adds	r0, r0, r7
   15106:	4a11      	ldr	r2, [pc, #68]	; (1514c <pm_policy_next_state+0x90>)
   15108:	f04f 0300 	mov.w	r3, #0
   1510c:	f141 0100 	adc.w	r1, r1, #0
   15110:	f7eb ff6e 	bl	ff0 <__aeabi_uldivmod>
   15114:	4680      	mov	r8, r0
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);
   15116:	68ab      	ldr	r3, [r5, #8]
   15118:	0c59      	lsrs	r1, r3, #17
   1511a:	03db      	lsls	r3, r3, #15
   1511c:	19d8      	adds	r0, r3, r7
   1511e:	4a0b      	ldr	r2, [pc, #44]	; (1514c <pm_policy_next_state+0x90>)
   15120:	f04f 0300 	mov.w	r3, #0
   15124:	f141 0100 	adc.w	r1, r1, #0
   15128:	f7eb ff62 	bl	ff0 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   1512c:	4b08      	ldr	r3, [pc, #32]	; (15150 <pm_policy_next_state+0x94>)
   1512e:	681b      	ldr	r3, [r3, #0]
   15130:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   15134:	d0cc      	beq.n	150d0 <pm_policy_next_state+0x14>
   15136:	4283      	cmp	r3, r0
   15138:	d8ca      	bhi.n	150d0 <pm_policy_next_state+0x14>
   1513a:	e7cf      	b.n	150dc <pm_policy_next_state+0x20>
			return state;
		}
	}

	return NULL;
   1513c:	2500      	movs	r5, #0
}
   1513e:	4628      	mov	r0, r5
   15140:	b002      	add	sp, #8
   15142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15146:	bf00      	nop
   15148:	000f423f 	.word	0x000f423f
   1514c:	000f4240 	.word	0x000f4240
   15150:	2000066c 	.word	0x2000066c

00015154 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   15154:	b908      	cbnz	r0, 1515a <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   15156:	4b02      	ldr	r3, [pc, #8]	; (15160 <pm_state_cpu_get_all+0xc>)
   15158:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   1515a:	2000      	movs	r0, #0
   1515c:	4770      	bx	lr
   1515e:	bf00      	nop
   15160:	00031c94 	.word	0x00031c94

00015164 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
   15164:	b470      	push	{r4, r5, r6}
   15166:	b08d      	sub	sp, #52	; 0x34
   15168:	4606      	mov	r6, r0
   1516a:	460d      	mov	r5, r1
	const unsigned int rconst[11] = {
   1516c:	f10d 0c04 	add.w	ip, sp, #4
   15170:	4c2b      	ldr	r4, [pc, #172]	; (15220 <tc_aes128_set_encrypt_key+0xbc>)
   15172:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   15174:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   15178:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1517a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1517e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   15182:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
   15186:	2e00      	cmp	r6, #0
   15188:	d045      	beq.n	15216 <tc_aes128_set_encrypt_key+0xb2>
   1518a:	4630      	mov	r0, r6
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
   1518c:	2d00      	cmp	r5, #0
   1518e:	d044      	beq.n	1521a <tc_aes128_set_encrypt_key+0xb6>
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
   15190:	2300      	movs	r3, #0
   15192:	e00f      	b.n	151b4 <tc_aes128_set_encrypt_key+0x50>
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   15194:	f815 4023 	ldrb.w	r4, [r5, r3, lsl #2]
   15198:	eb05 0183 	add.w	r1, r5, r3, lsl #2
   1519c:	784a      	ldrb	r2, [r1, #1]
   1519e:	0412      	lsls	r2, r2, #16
   151a0:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   151a4:	788c      	ldrb	r4, [r1, #2]
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   151a6:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   151aa:	78c9      	ldrb	r1, [r1, #3]
   151ac:	430a      	orrs	r2, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   151ae:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for (i = 0; i < Nk; ++i) {
   151b2:	3301      	adds	r3, #1
   151b4:	2b03      	cmp	r3, #3
   151b6:	d9ed      	bls.n	15194 <tc_aes128_set_encrypt_key+0x30>
   151b8:	e006      	b.n	151c8 <tc_aes128_set_encrypt_key+0x64>
	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
		}
		s->words[i] = s->words[i-Nk] ^ t;
   151ba:	1f19      	subs	r1, r3, #4
   151bc:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   151c0:	404a      	eors	r2, r1
   151c2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for (; i < (Nb * (Nr + 1)); ++i) {
   151c6:	3301      	adds	r3, #1
   151c8:	2b2b      	cmp	r3, #43	; 0x2b
   151ca:	d820      	bhi.n	1520e <tc_aes128_set_encrypt_key+0xaa>
		t = s->words[i-1];
   151cc:	1e5a      	subs	r2, r3, #1
   151ce:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
		if ((i % Nk) == 0) {
   151d2:	f013 0f03 	tst.w	r3, #3
   151d6:	d1f0      	bne.n	151ba <tc_aes128_set_encrypt_key+0x56>
	return (((a) >> 24)|((a) << 8));
   151d8:	ea4f 6232 	mov.w	r2, r2, ror #24
			t = subword(rotword(t)) ^ rconst[i/Nk];
   151dc:	0e11      	lsrs	r1, r2, #24
   151de:	4c11      	ldr	r4, [pc, #68]	; (15224 <tc_aes128_set_encrypt_key+0xc0>)
   151e0:	5c65      	ldrb	r5, [r4, r1]
   151e2:	f3c2 4107 	ubfx	r1, r2, #16, #8
   151e6:	5c61      	ldrb	r1, [r4, r1]
   151e8:	0409      	lsls	r1, r1, #16
   151ea:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
   151ee:	f3c2 2507 	ubfx	r5, r2, #8, #8
   151f2:	5d65      	ldrb	r5, [r4, r5]
   151f4:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
   151f8:	b2d2      	uxtb	r2, r2
   151fa:	5ca2      	ldrb	r2, [r4, r2]
   151fc:	4311      	orrs	r1, r2
   151fe:	f023 0203 	bic.w	r2, r3, #3
   15202:	ac0c      	add	r4, sp, #48	; 0x30
   15204:	4422      	add	r2, r4
   15206:	f852 2c2c 	ldr.w	r2, [r2, #-44]
   1520a:	404a      	eors	r2, r1
   1520c:	e7d5      	b.n	151ba <tc_aes128_set_encrypt_key+0x56>
	}

	return TC_CRYPTO_SUCCESS;
   1520e:	2001      	movs	r0, #1
}
   15210:	b00d      	add	sp, #52	; 0x34
   15212:	bc70      	pop	{r4, r5, r6}
   15214:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   15216:	2000      	movs	r0, #0
   15218:	e7fa      	b.n	15210 <tc_aes128_set_encrypt_key+0xac>
		return TC_CRYPTO_FAIL;
   1521a:	2000      	movs	r0, #0
   1521c:	e7f8      	b.n	15210 <tc_aes128_set_encrypt_key+0xac>
   1521e:	bf00      	nop
   15220:	000314e8 	.word	0x000314e8
   15224:	00031c94 	.word	0x00031c94

00015228 <tc_aes_encrypt>:
int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   15228:	2800      	cmp	r0, #0
   1522a:	f000 8366 	beq.w	158fa <tc_aes_encrypt+0x6d2>
{
   1522e:	b5f0      	push	{r4, r5, r6, r7, lr}
   15230:	b089      	sub	sp, #36	; 0x24
   15232:	4615      	mov	r5, r2
   15234:	4606      	mov	r6, r0
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   15236:	2900      	cmp	r1, #0
   15238:	f000 8361 	beq.w	158fe <tc_aes_encrypt+0x6d6>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   1523c:	2a00      	cmp	r2, #0
   1523e:	f000 8360 	beq.w	15902 <tc_aes_encrypt+0x6da>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   15242:	2310      	movs	r3, #16
   15244:	460a      	mov	r2, r1
   15246:	4619      	mov	r1, r3
   15248:	eb0d 0003 	add.w	r0, sp, r3
   1524c:	f016 fc05 	bl	2ba5a <_copy>
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   15250:	682b      	ldr	r3, [r5, #0]
   15252:	f89d 2010 	ldrb.w	r2, [sp, #16]
   15256:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   1525a:	f88d 2010 	strb.w	r2, [sp, #16]
   1525e:	f3c3 4207 	ubfx	r2, r3, #16, #8
   15262:	f89d 1011 	ldrb.w	r1, [sp, #17]
   15266:	404a      	eors	r2, r1
   15268:	f88d 2011 	strb.w	r2, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   1526c:	f3c3 2207 	ubfx	r2, r3, #8, #8
   15270:	f89d 1012 	ldrb.w	r1, [sp, #18]
   15274:	404a      	eors	r2, r1
   15276:	f88d 2012 	strb.w	r2, [sp, #18]
   1527a:	b2db      	uxtb	r3, r3
   1527c:	f89d 2013 	ldrb.w	r2, [sp, #19]
   15280:	4053      	eors	r3, r2
   15282:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   15286:	686b      	ldr	r3, [r5, #4]
   15288:	f89d 2014 	ldrb.w	r2, [sp, #20]
   1528c:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   15290:	f88d 2014 	strb.w	r2, [sp, #20]
   15294:	f3c3 4207 	ubfx	r2, r3, #16, #8
   15298:	f89d 1015 	ldrb.w	r1, [sp, #21]
   1529c:	404a      	eors	r2, r1
   1529e:	f88d 2015 	strb.w	r2, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   152a2:	f3c3 2207 	ubfx	r2, r3, #8, #8
   152a6:	f89d 1016 	ldrb.w	r1, [sp, #22]
   152aa:	404a      	eors	r2, r1
   152ac:	f88d 2016 	strb.w	r2, [sp, #22]
   152b0:	b2db      	uxtb	r3, r3
   152b2:	f89d 2017 	ldrb.w	r2, [sp, #23]
   152b6:	4053      	eors	r3, r2
   152b8:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   152bc:	68ab      	ldr	r3, [r5, #8]
   152be:	f89d 2018 	ldrb.w	r2, [sp, #24]
   152c2:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   152c6:	f88d 2018 	strb.w	r2, [sp, #24]
   152ca:	f3c3 4207 	ubfx	r2, r3, #16, #8
   152ce:	f89d 1019 	ldrb.w	r1, [sp, #25]
   152d2:	404a      	eors	r2, r1
   152d4:	f88d 2019 	strb.w	r2, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   152d8:	f3c3 2207 	ubfx	r2, r3, #8, #8
   152dc:	f89d 101a 	ldrb.w	r1, [sp, #26]
   152e0:	404a      	eors	r2, r1
   152e2:	f88d 201a 	strb.w	r2, [sp, #26]
   152e6:	b2db      	uxtb	r3, r3
   152e8:	f89d 201b 	ldrb.w	r2, [sp, #27]
   152ec:	4053      	eors	r3, r2
   152ee:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   152f2:	68eb      	ldr	r3, [r5, #12]
   152f4:	f89d 201c 	ldrb.w	r2, [sp, #28]
   152f8:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   152fc:	f88d 201c 	strb.w	r2, [sp, #28]
   15300:	f3c3 4207 	ubfx	r2, r3, #16, #8
   15304:	f89d 101d 	ldrb.w	r1, [sp, #29]
   15308:	404a      	eors	r2, r1
   1530a:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   1530e:	f3c3 2207 	ubfx	r2, r3, #8, #8
   15312:	f89d 101e 	ldrb.w	r1, [sp, #30]
   15316:	404a      	eors	r2, r1
   15318:	f88d 201e 	strb.w	r2, [sp, #30]
   1531c:	b2db      	uxtb	r3, r3
   1531e:	f89d 201f 	ldrb.w	r2, [sp, #31]
   15322:	4053      	eors	r3, r2
   15324:	f88d 301f 	strb.w	r3, [sp, #31]
	add_round_key(state, s->words);

	for (i = 0; i < (Nr - 1); ++i) {
   15328:	2400      	movs	r4, #0
}
   1532a:	e211      	b.n	15750 <tc_aes_encrypt+0x528>
		s[i] = sbox[s[i]];
   1532c:	a904      	add	r1, sp, #16
   1532e:	5cc8      	ldrb	r0, [r1, r3]
   15330:	4a02      	ldr	r2, [pc, #8]	; (1533c <tc_aes_encrypt+0x114>)
   15332:	5c10      	ldrb	r0, [r2, r0]
   15334:	54c8      	strb	r0, [r1, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
   15336:	3301      	adds	r3, #1
   15338:	e002      	b.n	15340 <tc_aes_encrypt+0x118>
   1533a:	bf00      	nop
   1533c:	00031c94 	.word	0x00031c94
   15340:	2b0f      	cmp	r3, #15
   15342:	d9f3      	bls.n	1532c <tc_aes_encrypt+0x104>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   15344:	f89d 3010 	ldrb.w	r3, [sp, #16]
   15348:	f88d 3000 	strb.w	r3, [sp]
   1534c:	f89d 3015 	ldrb.w	r3, [sp, #21]
   15350:	f88d 3001 	strb.w	r3, [sp, #1]
   15354:	f89d 301a 	ldrb.w	r3, [sp, #26]
   15358:	f88d 3002 	strb.w	r3, [sp, #2]
   1535c:	f89d 301f 	ldrb.w	r3, [sp, #31]
   15360:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   15364:	f89d 3014 	ldrb.w	r3, [sp, #20]
   15368:	f88d 3004 	strb.w	r3, [sp, #4]
   1536c:	f89d 3019 	ldrb.w	r3, [sp, #25]
   15370:	f88d 3005 	strb.w	r3, [sp, #5]
   15374:	f89d 301e 	ldrb.w	r3, [sp, #30]
   15378:	f88d 3006 	strb.w	r3, [sp, #6]
   1537c:	f89d 3013 	ldrb.w	r3, [sp, #19]
   15380:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   15384:	f89d 3018 	ldrb.w	r3, [sp, #24]
   15388:	f88d 3008 	strb.w	r3, [sp, #8]
   1538c:	f89d 301d 	ldrb.w	r3, [sp, #29]
   15390:	f88d 3009 	strb.w	r3, [sp, #9]
   15394:	f89d 3012 	ldrb.w	r3, [sp, #18]
   15398:	f88d 300a 	strb.w	r3, [sp, #10]
   1539c:	f89d 3017 	ldrb.w	r3, [sp, #23]
   153a0:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   153a4:	f89d 301c 	ldrb.w	r3, [sp, #28]
   153a8:	f88d 300c 	strb.w	r3, [sp, #12]
   153ac:	f89d 3011 	ldrb.w	r3, [sp, #17]
   153b0:	f88d 300d 	strb.w	r3, [sp, #13]
   153b4:	f89d 3016 	ldrb.w	r3, [sp, #22]
   153b8:	f88d 300e 	strb.w	r3, [sp, #14]
   153bc:	f89d 301b 	ldrb.w	r3, [sp, #27]
   153c0:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   153c4:	2310      	movs	r3, #16
   153c6:	466a      	mov	r2, sp
   153c8:	4619      	mov	r1, r3
   153ca:	eb0d 0003 	add.w	r0, sp, r3
   153ce:	f016 fb44 	bl	2ba5a <_copy>
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   153d2:	f89d 0010 	ldrb.w	r0, [sp, #16]
   153d6:	f016 fb51 	bl	2ba7c <_double_byte>
   153da:	4607      	mov	r7, r0
   153dc:	f89d 0011 	ldrb.w	r0, [sp, #17]
   153e0:	f016 fb4c 	bl	2ba7c <_double_byte>
   153e4:	4601      	mov	r1, r0
   153e6:	f89d 0011 	ldrb.w	r0, [sp, #17]
   153ea:	f89d 2012 	ldrb.w	r2, [sp, #18]
   153ee:	f89d 3013 	ldrb.w	r3, [sp, #19]
   153f2:	4041      	eors	r1, r0
   153f4:	404f      	eors	r7, r1
   153f6:	407a      	eors	r2, r7
   153f8:	4053      	eors	r3, r2
   153fa:	f88d 3000 	strb.w	r3, [sp]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   153fe:	f89d 7010 	ldrb.w	r7, [sp, #16]
   15402:	f016 fb3b 	bl	2ba7c <_double_byte>
   15406:	4047      	eors	r7, r0
   15408:	b2ff      	uxtb	r7, r7
   1540a:	f89d 0012 	ldrb.w	r0, [sp, #18]
   1540e:	f016 fb35 	bl	2ba7c <_double_byte>
   15412:	4602      	mov	r2, r0
   15414:	f89d 0012 	ldrb.w	r0, [sp, #18]
   15418:	f89d 3013 	ldrb.w	r3, [sp, #19]
   1541c:	4042      	eors	r2, r0
   1541e:	4057      	eors	r7, r2
   15420:	405f      	eors	r7, r3
   15422:	f88d 7001 	strb.w	r7, [sp, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   15426:	f89d 7010 	ldrb.w	r7, [sp, #16]
   1542a:	f89d 3011 	ldrb.w	r3, [sp, #17]
   1542e:	405f      	eors	r7, r3
   15430:	f016 fb24 	bl	2ba7c <_double_byte>
   15434:	4047      	eors	r7, r0
   15436:	b2ff      	uxtb	r7, r7
   15438:	f89d 0013 	ldrb.w	r0, [sp, #19]
   1543c:	f016 fb1e 	bl	2ba7c <_double_byte>
   15440:	f89d 3013 	ldrb.w	r3, [sp, #19]
   15444:	4058      	eors	r0, r3
   15446:	4047      	eors	r7, r0
   15448:	f88d 7002 	strb.w	r7, [sp, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   1544c:	f89d 0010 	ldrb.w	r0, [sp, #16]
   15450:	f016 fb14 	bl	2ba7c <_double_byte>
   15454:	f89d 2010 	ldrb.w	r2, [sp, #16]
   15458:	f89d 3011 	ldrb.w	r3, [sp, #17]
   1545c:	f89d 7012 	ldrb.w	r7, [sp, #18]
   15460:	4050      	eors	r0, r2
   15462:	4043      	eors	r3, r0
   15464:	405f      	eors	r7, r3
   15466:	b2ff      	uxtb	r7, r7
   15468:	f89d 0013 	ldrb.w	r0, [sp, #19]
   1546c:	f016 fb06 	bl	2ba7c <_double_byte>
   15470:	4047      	eors	r7, r0
   15472:	f88d 7003 	strb.w	r7, [sp, #3]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   15476:	f89d 0014 	ldrb.w	r0, [sp, #20]
   1547a:	f016 faff 	bl	2ba7c <_double_byte>
   1547e:	4607      	mov	r7, r0
   15480:	f89d 0015 	ldrb.w	r0, [sp, #21]
   15484:	f016 fafa 	bl	2ba7c <_double_byte>
   15488:	4601      	mov	r1, r0
   1548a:	f89d 0015 	ldrb.w	r0, [sp, #21]
   1548e:	f89d 2016 	ldrb.w	r2, [sp, #22]
   15492:	f89d 3017 	ldrb.w	r3, [sp, #23]
   15496:	4041      	eors	r1, r0
   15498:	404f      	eors	r7, r1
   1549a:	407a      	eors	r2, r7
   1549c:	4053      	eors	r3, r2
   1549e:	f88d 3004 	strb.w	r3, [sp, #4]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   154a2:	f89d 7014 	ldrb.w	r7, [sp, #20]
   154a6:	f016 fae9 	bl	2ba7c <_double_byte>
   154aa:	4047      	eors	r7, r0
   154ac:	b2ff      	uxtb	r7, r7
   154ae:	f89d 0016 	ldrb.w	r0, [sp, #22]
   154b2:	f016 fae3 	bl	2ba7c <_double_byte>
   154b6:	4602      	mov	r2, r0
   154b8:	f89d 0016 	ldrb.w	r0, [sp, #22]
   154bc:	f89d 3017 	ldrb.w	r3, [sp, #23]
   154c0:	4042      	eors	r2, r0
   154c2:	4057      	eors	r7, r2
   154c4:	405f      	eors	r7, r3
   154c6:	f88d 7005 	strb.w	r7, [sp, #5]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   154ca:	f89d 7014 	ldrb.w	r7, [sp, #20]
   154ce:	f89d 3015 	ldrb.w	r3, [sp, #21]
   154d2:	405f      	eors	r7, r3
   154d4:	f016 fad2 	bl	2ba7c <_double_byte>
   154d8:	4047      	eors	r7, r0
   154da:	b2ff      	uxtb	r7, r7
   154dc:	f89d 0017 	ldrb.w	r0, [sp, #23]
   154e0:	f016 facc 	bl	2ba7c <_double_byte>
   154e4:	f89d 3017 	ldrb.w	r3, [sp, #23]
   154e8:	4058      	eors	r0, r3
   154ea:	4047      	eors	r7, r0
   154ec:	f88d 7006 	strb.w	r7, [sp, #6]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   154f0:	f89d 0014 	ldrb.w	r0, [sp, #20]
   154f4:	f016 fac2 	bl	2ba7c <_double_byte>
   154f8:	f89d 2014 	ldrb.w	r2, [sp, #20]
   154fc:	f89d 3015 	ldrb.w	r3, [sp, #21]
   15500:	f89d 7016 	ldrb.w	r7, [sp, #22]
   15504:	4050      	eors	r0, r2
   15506:	4043      	eors	r3, r0
   15508:	405f      	eors	r7, r3
   1550a:	b2ff      	uxtb	r7, r7
   1550c:	f89d 0017 	ldrb.w	r0, [sp, #23]
   15510:	f016 fab4 	bl	2ba7c <_double_byte>
   15514:	4047      	eors	r7, r0
   15516:	f88d 7007 	strb.w	r7, [sp, #7]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1551a:	f89d 0018 	ldrb.w	r0, [sp, #24]
   1551e:	f016 faad 	bl	2ba7c <_double_byte>
   15522:	4607      	mov	r7, r0
   15524:	f89d 0019 	ldrb.w	r0, [sp, #25]
   15528:	f016 faa8 	bl	2ba7c <_double_byte>
   1552c:	4601      	mov	r1, r0
   1552e:	f89d 0019 	ldrb.w	r0, [sp, #25]
   15532:	f89d 201a 	ldrb.w	r2, [sp, #26]
   15536:	f89d 301b 	ldrb.w	r3, [sp, #27]
   1553a:	4041      	eors	r1, r0
   1553c:	404f      	eors	r7, r1
   1553e:	407a      	eors	r2, r7
   15540:	4053      	eors	r3, r2
   15542:	f88d 3008 	strb.w	r3, [sp, #8]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   15546:	f89d 7018 	ldrb.w	r7, [sp, #24]
   1554a:	f016 fa97 	bl	2ba7c <_double_byte>
   1554e:	4047      	eors	r7, r0
   15550:	b2ff      	uxtb	r7, r7
   15552:	f89d 001a 	ldrb.w	r0, [sp, #26]
   15556:	f016 fa91 	bl	2ba7c <_double_byte>
   1555a:	4602      	mov	r2, r0
   1555c:	f89d 001a 	ldrb.w	r0, [sp, #26]
   15560:	f89d 301b 	ldrb.w	r3, [sp, #27]
   15564:	4042      	eors	r2, r0
   15566:	4057      	eors	r7, r2
   15568:	405f      	eors	r7, r3
   1556a:	f88d 7009 	strb.w	r7, [sp, #9]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   1556e:	f89d 7018 	ldrb.w	r7, [sp, #24]
   15572:	f89d 3019 	ldrb.w	r3, [sp, #25]
   15576:	405f      	eors	r7, r3
   15578:	f016 fa80 	bl	2ba7c <_double_byte>
   1557c:	4047      	eors	r7, r0
   1557e:	b2ff      	uxtb	r7, r7
   15580:	f89d 001b 	ldrb.w	r0, [sp, #27]
   15584:	f016 fa7a 	bl	2ba7c <_double_byte>
   15588:	f89d 301b 	ldrb.w	r3, [sp, #27]
   1558c:	4058      	eors	r0, r3
   1558e:	4047      	eors	r7, r0
   15590:	f88d 700a 	strb.w	r7, [sp, #10]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   15594:	f89d 0018 	ldrb.w	r0, [sp, #24]
   15598:	f016 fa70 	bl	2ba7c <_double_byte>
   1559c:	f89d 2018 	ldrb.w	r2, [sp, #24]
   155a0:	f89d 3019 	ldrb.w	r3, [sp, #25]
   155a4:	f89d 701a 	ldrb.w	r7, [sp, #26]
   155a8:	4050      	eors	r0, r2
   155aa:	4043      	eors	r3, r0
   155ac:	405f      	eors	r7, r3
   155ae:	b2ff      	uxtb	r7, r7
   155b0:	f89d 001b 	ldrb.w	r0, [sp, #27]
   155b4:	f016 fa62 	bl	2ba7c <_double_byte>
   155b8:	4047      	eors	r7, r0
   155ba:	f88d 700b 	strb.w	r7, [sp, #11]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   155be:	f89d 001c 	ldrb.w	r0, [sp, #28]
   155c2:	f016 fa5b 	bl	2ba7c <_double_byte>
   155c6:	4607      	mov	r7, r0
   155c8:	f89d 001d 	ldrb.w	r0, [sp, #29]
   155cc:	f016 fa56 	bl	2ba7c <_double_byte>
   155d0:	4601      	mov	r1, r0
   155d2:	f89d 001d 	ldrb.w	r0, [sp, #29]
   155d6:	f89d 201e 	ldrb.w	r2, [sp, #30]
   155da:	f89d 301f 	ldrb.w	r3, [sp, #31]
   155de:	4041      	eors	r1, r0
   155e0:	404f      	eors	r7, r1
   155e2:	407a      	eors	r2, r7
   155e4:	4053      	eors	r3, r2
   155e6:	f88d 300c 	strb.w	r3, [sp, #12]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   155ea:	f89d 701c 	ldrb.w	r7, [sp, #28]
   155ee:	f016 fa45 	bl	2ba7c <_double_byte>
   155f2:	4047      	eors	r7, r0
   155f4:	b2ff      	uxtb	r7, r7
   155f6:	f89d 001e 	ldrb.w	r0, [sp, #30]
   155fa:	f016 fa3f 	bl	2ba7c <_double_byte>
   155fe:	4602      	mov	r2, r0
   15600:	f89d 001e 	ldrb.w	r0, [sp, #30]
   15604:	f89d 301f 	ldrb.w	r3, [sp, #31]
   15608:	4042      	eors	r2, r0
   1560a:	4057      	eors	r7, r2
   1560c:	405f      	eors	r7, r3
   1560e:	f88d 700d 	strb.w	r7, [sp, #13]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   15612:	f89d 701c 	ldrb.w	r7, [sp, #28]
   15616:	f89d 301d 	ldrb.w	r3, [sp, #29]
   1561a:	405f      	eors	r7, r3
   1561c:	f016 fa2e 	bl	2ba7c <_double_byte>
   15620:	4047      	eors	r7, r0
   15622:	b2ff      	uxtb	r7, r7
   15624:	f89d 001f 	ldrb.w	r0, [sp, #31]
   15628:	f016 fa28 	bl	2ba7c <_double_byte>
   1562c:	f89d 301f 	ldrb.w	r3, [sp, #31]
   15630:	4058      	eors	r0, r3
   15632:	4047      	eors	r7, r0
   15634:	f88d 700e 	strb.w	r7, [sp, #14]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   15638:	f89d 001c 	ldrb.w	r0, [sp, #28]
   1563c:	f016 fa1e 	bl	2ba7c <_double_byte>
   15640:	f89d 201c 	ldrb.w	r2, [sp, #28]
   15644:	f89d 301d 	ldrb.w	r3, [sp, #29]
   15648:	f89d 701e 	ldrb.w	r7, [sp, #30]
   1564c:	4050      	eors	r0, r2
   1564e:	4043      	eors	r3, r0
   15650:	405f      	eors	r7, r3
   15652:	b2ff      	uxtb	r7, r7
   15654:	f89d 001f 	ldrb.w	r0, [sp, #31]
   15658:	f016 fa10 	bl	2ba7c <_double_byte>
   1565c:	4047      	eors	r7, r0
   1565e:	f88d 700f 	strb.w	r7, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   15662:	2310      	movs	r3, #16
   15664:	466a      	mov	r2, sp
   15666:	4619      	mov	r1, r3
   15668:	eb0d 0003 	add.w	r0, sp, r3
   1566c:	f016 f9f5 	bl	2ba5a <_copy>
		sub_bytes(state);
		shift_rows(state);
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   15670:	3401      	adds	r4, #1
   15672:	0123      	lsls	r3, r4, #4
   15674:	eb05 1204 	add.w	r2, r5, r4, lsl #4
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   15678:	58eb      	ldr	r3, [r5, r3]
   1567a:	f89d 1010 	ldrb.w	r1, [sp, #16]
   1567e:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   15682:	f88d 1010 	strb.w	r1, [sp, #16]
   15686:	f3c3 4107 	ubfx	r1, r3, #16, #8
   1568a:	f89d 0011 	ldrb.w	r0, [sp, #17]
   1568e:	4041      	eors	r1, r0
   15690:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   15694:	f3c3 2107 	ubfx	r1, r3, #8, #8
   15698:	f89d 0012 	ldrb.w	r0, [sp, #18]
   1569c:	4041      	eors	r1, r0
   1569e:	f88d 1012 	strb.w	r1, [sp, #18]
   156a2:	b2db      	uxtb	r3, r3
   156a4:	f89d 1013 	ldrb.w	r1, [sp, #19]
   156a8:	404b      	eors	r3, r1
   156aa:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   156ae:	6853      	ldr	r3, [r2, #4]
   156b0:	f89d 1014 	ldrb.w	r1, [sp, #20]
   156b4:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   156b8:	f88d 1014 	strb.w	r1, [sp, #20]
   156bc:	f3c3 4107 	ubfx	r1, r3, #16, #8
   156c0:	f89d 0015 	ldrb.w	r0, [sp, #21]
   156c4:	4041      	eors	r1, r0
   156c6:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   156ca:	f3c3 2107 	ubfx	r1, r3, #8, #8
   156ce:	f89d 0016 	ldrb.w	r0, [sp, #22]
   156d2:	4041      	eors	r1, r0
   156d4:	f88d 1016 	strb.w	r1, [sp, #22]
   156d8:	b2db      	uxtb	r3, r3
   156da:	f89d 1017 	ldrb.w	r1, [sp, #23]
   156de:	404b      	eors	r3, r1
   156e0:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   156e4:	6893      	ldr	r3, [r2, #8]
   156e6:	f89d 1018 	ldrb.w	r1, [sp, #24]
   156ea:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   156ee:	f88d 1018 	strb.w	r1, [sp, #24]
   156f2:	f3c3 4107 	ubfx	r1, r3, #16, #8
   156f6:	f89d 0019 	ldrb.w	r0, [sp, #25]
   156fa:	4041      	eors	r1, r0
   156fc:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   15700:	f3c3 2107 	ubfx	r1, r3, #8, #8
   15704:	f89d 001a 	ldrb.w	r0, [sp, #26]
   15708:	4041      	eors	r1, r0
   1570a:	f88d 101a 	strb.w	r1, [sp, #26]
   1570e:	b2db      	uxtb	r3, r3
   15710:	f89d 101b 	ldrb.w	r1, [sp, #27]
   15714:	404b      	eors	r3, r1
   15716:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   1571a:	68d3      	ldr	r3, [r2, #12]
   1571c:	f89d 201c 	ldrb.w	r2, [sp, #28]
   15720:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   15724:	f88d 201c 	strb.w	r2, [sp, #28]
   15728:	f3c3 4207 	ubfx	r2, r3, #16, #8
   1572c:	f89d 101d 	ldrb.w	r1, [sp, #29]
   15730:	404a      	eors	r2, r1
   15732:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   15736:	f3c3 2207 	ubfx	r2, r3, #8, #8
   1573a:	f89d 101e 	ldrb.w	r1, [sp, #30]
   1573e:	404a      	eors	r2, r1
   15740:	f88d 201e 	strb.w	r2, [sp, #30]
   15744:	b2db      	uxtb	r3, r3
   15746:	f89d 201f 	ldrb.w	r2, [sp, #31]
   1574a:	4053      	eors	r3, r2
   1574c:	f88d 301f 	strb.w	r3, [sp, #31]
	for (i = 0; i < (Nr - 1); ++i) {
   15750:	2c08      	cmp	r4, #8
   15752:	d801      	bhi.n	15758 <tc_aes_encrypt+0x530>
	for (i = 0; i < (Nb * Nk); ++i) {
   15754:	2300      	movs	r3, #0
   15756:	e5f3      	b.n	15340 <tc_aes_encrypt+0x118>
   15758:	2300      	movs	r3, #0
   1575a:	e005      	b.n	15768 <tc_aes_encrypt+0x540>
		s[i] = sbox[s[i]];
   1575c:	aa04      	add	r2, sp, #16
   1575e:	5cd1      	ldrb	r1, [r2, r3]
   15760:	4869      	ldr	r0, [pc, #420]	; (15908 <tc_aes_encrypt+0x6e0>)
   15762:	5c41      	ldrb	r1, [r0, r1]
   15764:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
   15766:	3301      	adds	r3, #1
   15768:	2b0f      	cmp	r3, #15
   1576a:	d9f7      	bls.n	1575c <tc_aes_encrypt+0x534>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1576c:	f89d 3010 	ldrb.w	r3, [sp, #16]
   15770:	f88d 3000 	strb.w	r3, [sp]
   15774:	f89d 3015 	ldrb.w	r3, [sp, #21]
   15778:	f88d 3001 	strb.w	r3, [sp, #1]
   1577c:	f89d 301a 	ldrb.w	r3, [sp, #26]
   15780:	f88d 3002 	strb.w	r3, [sp, #2]
   15784:	f89d 301f 	ldrb.w	r3, [sp, #31]
   15788:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   1578c:	f89d 3014 	ldrb.w	r3, [sp, #20]
   15790:	f88d 3004 	strb.w	r3, [sp, #4]
   15794:	f89d 3019 	ldrb.w	r3, [sp, #25]
   15798:	f88d 3005 	strb.w	r3, [sp, #5]
   1579c:	f89d 301e 	ldrb.w	r3, [sp, #30]
   157a0:	f88d 3006 	strb.w	r3, [sp, #6]
   157a4:	f89d 3013 	ldrb.w	r3, [sp, #19]
   157a8:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   157ac:	f89d 3018 	ldrb.w	r3, [sp, #24]
   157b0:	f88d 3008 	strb.w	r3, [sp, #8]
   157b4:	f89d 301d 	ldrb.w	r3, [sp, #29]
   157b8:	f88d 3009 	strb.w	r3, [sp, #9]
   157bc:	f89d 3012 	ldrb.w	r3, [sp, #18]
   157c0:	f88d 300a 	strb.w	r3, [sp, #10]
   157c4:	f89d 3017 	ldrb.w	r3, [sp, #23]
   157c8:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   157cc:	f89d 301c 	ldrb.w	r3, [sp, #28]
   157d0:	f88d 300c 	strb.w	r3, [sp, #12]
   157d4:	f89d 3011 	ldrb.w	r3, [sp, #17]
   157d8:	f88d 300d 	strb.w	r3, [sp, #13]
   157dc:	f89d 3016 	ldrb.w	r3, [sp, #22]
   157e0:	f88d 300e 	strb.w	r3, [sp, #14]
   157e4:	f89d 301b 	ldrb.w	r3, [sp, #27]
   157e8:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   157ec:	2310      	movs	r3, #16
   157ee:	466a      	mov	r2, sp
   157f0:	4619      	mov	r1, r3
   157f2:	eb0d 0003 	add.w	r0, sp, r3
   157f6:	f016 f930 	bl	2ba5a <_copy>
	}

	sub_bytes(state);
	shift_rows(state);
	add_round_key(state, s->words + Nb*(i+1));
   157fa:	1c63      	adds	r3, r4, #1
   157fc:	011a      	lsls	r2, r3, #4
   157fe:	eb05 1303 	add.w	r3, r5, r3, lsl #4
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   15802:	58aa      	ldr	r2, [r5, r2]
   15804:	f89d 1010 	ldrb.w	r1, [sp, #16]
   15808:	ea81 6112 	eor.w	r1, r1, r2, lsr #24
   1580c:	f88d 1010 	strb.w	r1, [sp, #16]
   15810:	f3c2 4107 	ubfx	r1, r2, #16, #8
   15814:	f89d 0011 	ldrb.w	r0, [sp, #17]
   15818:	4041      	eors	r1, r0
   1581a:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   1581e:	f3c2 2107 	ubfx	r1, r2, #8, #8
   15822:	f89d 0012 	ldrb.w	r0, [sp, #18]
   15826:	4041      	eors	r1, r0
   15828:	f88d 1012 	strb.w	r1, [sp, #18]
   1582c:	b2d2      	uxtb	r2, r2
   1582e:	f89d 1013 	ldrb.w	r1, [sp, #19]
   15832:	404a      	eors	r2, r1
   15834:	f88d 2013 	strb.w	r2, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   15838:	685a      	ldr	r2, [r3, #4]
   1583a:	f89d 1014 	ldrb.w	r1, [sp, #20]
   1583e:	ea81 6112 	eor.w	r1, r1, r2, lsr #24
   15842:	f88d 1014 	strb.w	r1, [sp, #20]
   15846:	f3c2 4107 	ubfx	r1, r2, #16, #8
   1584a:	f89d 0015 	ldrb.w	r0, [sp, #21]
   1584e:	4041      	eors	r1, r0
   15850:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   15854:	f3c2 2107 	ubfx	r1, r2, #8, #8
   15858:	f89d 0016 	ldrb.w	r0, [sp, #22]
   1585c:	4041      	eors	r1, r0
   1585e:	f88d 1016 	strb.w	r1, [sp, #22]
   15862:	b2d2      	uxtb	r2, r2
   15864:	f89d 1017 	ldrb.w	r1, [sp, #23]
   15868:	404a      	eors	r2, r1
   1586a:	f88d 2017 	strb.w	r2, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   1586e:	689a      	ldr	r2, [r3, #8]
   15870:	f89d 1018 	ldrb.w	r1, [sp, #24]
   15874:	ea81 6112 	eor.w	r1, r1, r2, lsr #24
   15878:	f88d 1018 	strb.w	r1, [sp, #24]
   1587c:	f3c2 4107 	ubfx	r1, r2, #16, #8
   15880:	f89d 0019 	ldrb.w	r0, [sp, #25]
   15884:	4041      	eors	r1, r0
   15886:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   1588a:	f3c2 2107 	ubfx	r1, r2, #8, #8
   1588e:	f89d 001a 	ldrb.w	r0, [sp, #26]
   15892:	4041      	eors	r1, r0
   15894:	f88d 101a 	strb.w	r1, [sp, #26]
   15898:	b2d2      	uxtb	r2, r2
   1589a:	f89d 101b 	ldrb.w	r1, [sp, #27]
   1589e:	404a      	eors	r2, r1
   158a0:	f88d 201b 	strb.w	r2, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   158a4:	68db      	ldr	r3, [r3, #12]
   158a6:	f89d 201c 	ldrb.w	r2, [sp, #28]
   158aa:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   158ae:	f88d 201c 	strb.w	r2, [sp, #28]
   158b2:	f3c3 4207 	ubfx	r2, r3, #16, #8
   158b6:	f89d 101d 	ldrb.w	r1, [sp, #29]
   158ba:	404a      	eors	r2, r1
   158bc:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   158c0:	f3c3 2207 	ubfx	r2, r3, #8, #8
   158c4:	f89d 101e 	ldrb.w	r1, [sp, #30]
   158c8:	404a      	eors	r2, r1
   158ca:	f88d 201e 	strb.w	r2, [sp, #30]
   158ce:	b2db      	uxtb	r3, r3
   158d0:	f89d 201f 	ldrb.w	r2, [sp, #31]
   158d4:	4053      	eors	r3, r2
   158d6:	f88d 301f 	strb.w	r3, [sp, #31]

	(void)_copy(out, sizeof(state), state, sizeof(state));
   158da:	2310      	movs	r3, #16
   158dc:	eb0d 0203 	add.w	r2, sp, r3
   158e0:	4619      	mov	r1, r3
   158e2:	4630      	mov	r0, r6
   158e4:	f016 f8b9 	bl	2ba5a <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   158e8:	2210      	movs	r2, #16
   158ea:	2100      	movs	r1, #0
   158ec:	eb0d 0002 	add.w	r0, sp, r2
   158f0:	f016 f8c0 	bl	2ba74 <_set>

	return TC_CRYPTO_SUCCESS;
   158f4:	2001      	movs	r0, #1
}
   158f6:	b009      	add	sp, #36	; 0x24
   158f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   158fa:	2000      	movs	r0, #0
}
   158fc:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   158fe:	2000      	movs	r0, #0
   15900:	e7f9      	b.n	158f6 <tc_aes_encrypt+0x6ce>
		return TC_CRYPTO_FAIL;
   15902:	2000      	movs	r0, #0
   15904:	e7f7      	b.n	158f6 <tc_aes_encrypt+0x6ce>
   15906:	bf00      	nop
   15908:	00031c94 	.word	0x00031c94

0001590c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   1590c:	4901      	ldr	r1, [pc, #4]	; (15914 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   1590e:	2210      	movs	r2, #16
	str	r2, [r1]
   15910:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   15912:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   15914:	e000ed10 	.word	0xe000ed10

00015918 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   15918:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   1591a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   1591c:	f380 8811 	msr	BASEPRI, r0
	isb
   15920:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   15924:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   15928:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   1592a:	b662      	cpsie	i
	isb
   1592c:	f3bf 8f6f 	isb	sy

	bx	lr
   15930:	4770      	bx	lr
   15932:	bf00      	nop

00015934 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   15934:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   15936:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   15938:	f381 8811 	msr	BASEPRI, r1

	wfe
   1593c:	bf20      	wfe

	msr	BASEPRI, r0
   1593e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   15942:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   15944:	4770      	bx	lr
   15946:	bf00      	nop

00015948 <esf_dump>:
#include <kernel_arch_data.h>
#include <zephyr/logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
   15948:	b510      	push	{r4, lr}
   1594a:	b082      	sub	sp, #8
   1594c:	4604      	mov	r4, r0
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   1594e:	6883      	ldr	r3, [r0, #8]
   15950:	9300      	str	r3, [sp, #0]
   15952:	6843      	ldr	r3, [r0, #4]
   15954:	6802      	ldr	r2, [r0, #0]
   15956:	2145      	movs	r1, #69	; 0x45
   15958:	480b      	ldr	r0, [pc, #44]	; (15988 <esf_dump+0x40>)
   1595a:	f015 fba7 	bl	2b0ac <z_log_minimal_printk>
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   1595e:	6963      	ldr	r3, [r4, #20]
   15960:	9300      	str	r3, [sp, #0]
   15962:	6923      	ldr	r3, [r4, #16]
   15964:	68e2      	ldr	r2, [r4, #12]
   15966:	2145      	movs	r1, #69	; 0x45
   15968:	4808      	ldr	r0, [pc, #32]	; (1598c <esf_dump+0x44>)
   1596a:	f015 fb9f 	bl	2b0ac <z_log_minimal_printk>
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   1596e:	69e2      	ldr	r2, [r4, #28]
   15970:	2145      	movs	r1, #69	; 0x45
   15972:	4807      	ldr	r0, [pc, #28]	; (15990 <esf_dump+0x48>)
   15974:	f015 fb9a 	bl	2b0ac <z_log_minimal_printk>
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   15978:	69a2      	ldr	r2, [r4, #24]
   1597a:	2145      	movs	r1, #69	; 0x45
   1597c:	4805      	ldr	r0, [pc, #20]	; (15994 <esf_dump+0x4c>)
   1597e:	f015 fb95 	bl	2b0ac <z_log_minimal_printk>
		esf->basic.pc);
}
   15982:	b002      	add	sp, #8
   15984:	bd10      	pop	{r4, pc}
   15986:	bf00      	nop
   15988:	00031d94 	.word	0x00031d94
   1598c:	00031dc8 	.word	0x00031dc8
   15990:	00031dfc 	.word	0x00031dfc
   15994:	00031e10 	.word	0x00031e10

00015998 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   15998:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   1599a:	2800      	cmp	r0, #0
   1599c:	db07      	blt.n	159ae <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1599e:	f000 021f 	and.w	r2, r0, #31
   159a2:	0940      	lsrs	r0, r0, #5
   159a4:	2301      	movs	r3, #1
   159a6:	4093      	lsls	r3, r2
   159a8:	4a01      	ldr	r2, [pc, #4]	; (159b0 <arch_irq_enable+0x18>)
   159aa:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
   159ae:	4770      	bx	lr
   159b0:	e000e100 	.word	0xe000e100

000159b4 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   159b4:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   159b6:	2800      	cmp	r0, #0
   159b8:	db0c      	blt.n	159d4 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   159ba:	f000 021f 	and.w	r2, r0, #31
   159be:	0940      	lsrs	r0, r0, #5
   159c0:	2301      	movs	r3, #1
   159c2:	4093      	lsls	r3, r2
   159c4:	3020      	adds	r0, #32
   159c6:	4a04      	ldr	r2, [pc, #16]	; (159d8 <arch_irq_disable+0x24>)
   159c8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   159cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   159d0:	f3bf 8f6f 	isb	sy
}
   159d4:	4770      	bx	lr
   159d6:	bf00      	nop
   159d8:	e000e100 	.word	0xe000e100

000159dc <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   159dc:	0942      	lsrs	r2, r0, #5
   159de:	4b05      	ldr	r3, [pc, #20]	; (159f4 <arch_irq_is_enabled+0x18>)
   159e0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   159e4:	f000 001f 	and.w	r0, r0, #31
   159e8:	2301      	movs	r3, #1
   159ea:	fa03 f000 	lsl.w	r0, r3, r0
}
   159ee:	4010      	ands	r0, r2
   159f0:	4770      	bx	lr
   159f2:	bf00      	nop
   159f4:	e000e100 	.word	0xe000e100

000159f8 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
   159f8:	b570      	push	{r4, r5, r6, lr}
   159fa:	4604      	mov	r4, r0
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   159fc:	f012 0f01 	tst.w	r2, #1
   15a00:	d10d      	bne.n	15a1e <z_arm_irq_priority_set+0x26>
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
		} else {
			/* Use caller supplied prio level as-is */
		}
	} else {
		prio += _IRQ_PRIO_OFFSET;
   15a02:	1c8d      	adds	r5, r1, #2
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   15a04:	2d07      	cmp	r5, #7
   15a06:	d90b      	bls.n	15a20 <z_arm_irq_priority_set+0x28>
   15a08:	4e0f      	ldr	r6, [pc, #60]	; (15a48 <z_arm_irq_priority_set+0x50>)
   15a0a:	225b      	movs	r2, #91	; 0x5b
   15a0c:	4631      	mov	r1, r6
   15a0e:	480f      	ldr	r0, [pc, #60]	; (15a4c <z_arm_irq_priority_set+0x54>)
   15a10:	f015 fb3d 	bl	2b08e <assert_print>
   15a14:	215b      	movs	r1, #91	; 0x5b
   15a16:	4630      	mov	r0, r6
   15a18:	f015 fb32 	bl	2b080 <assert_post_action>
   15a1c:	e000      	b.n	15a20 <z_arm_irq_priority_set+0x28>
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   15a1e:	2500      	movs	r5, #0
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   15a20:	b260      	sxtb	r0, r4
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   15a22:	2800      	cmp	r0, #0
   15a24:	db08      	blt.n	15a38 <z_arm_irq_priority_set+0x40>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   15a26:	016d      	lsls	r5, r5, #5
   15a28:	b2ed      	uxtb	r5, r5
   15a2a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
   15a2e:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
   15a32:	f880 5300 	strb.w	r5, [r0, #768]	; 0x300
}
   15a36:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   15a38:	f000 000f 	and.w	r0, r0, #15
   15a3c:	016d      	lsls	r5, r5, #5
   15a3e:	b2ed      	uxtb	r5, r5
   15a40:	4b03      	ldr	r3, [pc, #12]	; (15a50 <z_arm_irq_priority_set+0x58>)
   15a42:	541d      	strb	r5, [r3, r0]
   15a44:	e7f7      	b.n	15a36 <z_arm_irq_priority_set+0x3e>
   15a46:	bf00      	nop
   15a48:	00031e44 	.word	0x00031e44
   15a4c:	000318f8 	.word	0x000318f8
   15a50:	e000ed14 	.word	0xe000ed14

00015a54 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   15a54:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   15a56:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   15a58:	4b05      	ldr	r3, [pc, #20]	; (15a70 <_arch_isr_direct_pm+0x1c>)
   15a5a:	699b      	ldr	r3, [r3, #24]
   15a5c:	b90b      	cbnz	r3, 15a62 <_arch_isr_direct_pm+0xe>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   15a5e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   15a60:	bd08      	pop	{r3, pc}
		_kernel.idle = 0;
   15a62:	4b03      	ldr	r3, [pc, #12]	; (15a70 <_arch_isr_direct_pm+0x1c>)
   15a64:	2200      	movs	r2, #0
   15a66:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   15a68:	f01a ff75 	bl	30956 <z_pm_save_idle_exit>
   15a6c:	e7f7      	b.n	15a5e <_arch_isr_direct_pm+0xa>
   15a6e:	bf00      	nop
   15a70:	200036f4 	.word	0x200036f4

00015a74 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   15a74:	bf30      	wfi
    b z_SysNmiOnReset
   15a76:	f7ff bffd 	b.w	15a74 <z_SysNmiOnReset>
   15a7a:	bf00      	nop

00015a7c <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   15a7c:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   15a7e:	4b0b      	ldr	r3, [pc, #44]	; (15aac <z_arm_prep_c+0x30>)
   15a80:	4a0b      	ldr	r2, [pc, #44]	; (15ab0 <z_arm_prep_c+0x34>)
   15a82:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   15a86:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   15a88:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   15a8c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   15a90:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   15a94:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   15a98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   15a9c:	f00f ff7a 	bl	25994 <z_bss_zero>
	z_data_copy();
   15aa0:	f012 fec4 	bl	2882c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   15aa4:	f000 fb78 	bl	16198 <z_arm_interrupt_init>
	z_cstart();
   15aa8:	f00f ffd2 	bl	25a50 <z_cstart>
   15aac:	e000ed00 	.word	0xe000ed00
   15ab0:	00000000 	.word	0x00000000

00015ab4 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   15ab4:	4a09      	ldr	r2, [pc, #36]	; (15adc <arch_swap+0x28>)
   15ab6:	6893      	ldr	r3, [r2, #8]
   15ab8:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
   15aba:	4909      	ldr	r1, [pc, #36]	; (15ae0 <arch_swap+0x2c>)
   15abc:	6809      	ldr	r1, [r1, #0]
   15abe:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   15ac0:	4908      	ldr	r1, [pc, #32]	; (15ae4 <arch_swap+0x30>)
   15ac2:	684b      	ldr	r3, [r1, #4]
   15ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   15ac8:	604b      	str	r3, [r1, #4]
   15aca:	2300      	movs	r3, #0
   15acc:	f383 8811 	msr	BASEPRI, r3
   15ad0:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   15ad4:	6893      	ldr	r3, [r2, #8]
}
   15ad6:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   15ad8:	4770      	bx	lr
   15ada:	bf00      	nop
   15adc:	200036f4 	.word	0x200036f4
   15ae0:	00034eb0 	.word	0x00034eb0
   15ae4:	e000ed00 	.word	0xe000ed00

00015ae8 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   15ae8:	4912      	ldr	r1, [pc, #72]	; (15b34 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   15aea:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   15aec:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   15af0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   15af2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   15af6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   15afa:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   15afc:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   15b00:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   15b04:	4f0c      	ldr	r7, [pc, #48]	; (15b38 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   15b06:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   15b0a:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   15b0c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   15b0e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   15b10:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   15b12:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   15b14:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   15b16:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   15b1a:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   15b1c:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   15b1e:	f000 fbe5 	bl	162ec <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   15b22:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   15b26:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   15b2a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   15b2e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   15b32:	4770      	bx	lr
    ldr r1, =_kernel
   15b34:	200036f4 	.word	0x200036f4
    ldr v4, =_SCS_ICSR
   15b38:	e000ed04 	.word	0xe000ed04

00015b3c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   15b3c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   15b40:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   15b42:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   15b46:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   15b4a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   15b4c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   15b50:	2902      	cmp	r1, #2
    beq _oops
   15b52:	d0ff      	beq.n	15b54 <_oops>

00015b54 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   15b54:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   15b56:	f016 f8b2 	bl	2bcbe <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   15b5a:	bd01      	pop	{r0, pc}

00015b5c <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
   15b5c:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   15b5e:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
   15b62:	490d      	ldr	r1, [pc, #52]	; (15b98 <arch_new_thread+0x3c>)
   15b64:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
   15b68:	f021 0101 	bic.w	r1, r1, #1
   15b6c:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
   15b70:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   15b74:	9b01      	ldr	r3, [sp, #4]
   15b76:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   15b7a:	9b02      	ldr	r3, [sp, #8]
   15b7c:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   15b80:	9b03      	ldr	r3, [sp, #12]
   15b82:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   15b86:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   15b8a:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe = (struct __basic_sf *)
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
   15b8e:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   15b90:	2300      	movs	r3, #0
   15b92:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   15b94:	bc10      	pop	{r4}
   15b96:	4770      	bx	lr
   15b98:	0002adbf 	.word	0x0002adbf

00015b9c <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   15b9c:	4b11      	ldr	r3, [pc, #68]	; (15be4 <z_check_thread_stack_fail+0x48>)
   15b9e:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
   15ba0:	b1ea      	cbz	r2, 15bde <z_check_thread_stack_fail+0x42>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   15ba2:	f110 0f16 	cmn.w	r0, #22
   15ba6:	d010      	beq.n	15bca <z_check_thread_stack_fail+0x2e>
   15ba8:	6e93      	ldr	r3, [r2, #104]	; 0x68
   15baa:	f1a3 0c40 	sub.w	ip, r3, #64	; 0x40
   15bae:	4584      	cmp	ip, r0
   15bb0:	d805      	bhi.n	15bbe <z_check_thread_stack_fail+0x22>
   15bb2:	4283      	cmp	r3, r0
   15bb4:	d905      	bls.n	15bc2 <z_check_thread_stack_fail+0x26>
   15bb6:	428b      	cmp	r3, r1
   15bb8:	d805      	bhi.n	15bc6 <z_check_thread_stack_fail+0x2a>
   15bba:	2100      	movs	r1, #0
   15bbc:	e00a      	b.n	15bd4 <z_check_thread_stack_fail+0x38>
   15bbe:	2100      	movs	r1, #0
   15bc0:	e008      	b.n	15bd4 <z_check_thread_stack_fail+0x38>
   15bc2:	2100      	movs	r1, #0
   15bc4:	e006      	b.n	15bd4 <z_check_thread_stack_fail+0x38>
   15bc6:	2101      	movs	r1, #1
   15bc8:	e004      	b.n	15bd4 <z_check_thread_stack_fail+0x38>
   15bca:	6e93      	ldr	r3, [r2, #104]	; 0x68
   15bcc:	428b      	cmp	r3, r1
   15bce:	bf94      	ite	ls
   15bd0:	2100      	movls	r1, #0
   15bd2:	2101      	movhi	r1, #1
   15bd4:	b909      	cbnz	r1, 15bda <z_check_thread_stack_fail+0x3e>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
   15bd6:	2000      	movs	r0, #0
}
   15bd8:	4770      	bx	lr
		return thread->stack_info.start;
   15bda:	6e90      	ldr	r0, [r2, #104]	; 0x68
   15bdc:	4770      	bx	lr
		return 0;
   15bde:	2000      	movs	r0, #0
   15be0:	4770      	bx	lr
   15be2:	bf00      	nop
   15be4:	200036f4 	.word	0x200036f4

00015be8 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   15be8:	b508      	push	{r3, lr}
   15bea:	460d      	mov	r5, r1
   15bec:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   15bee:	4b08      	ldr	r3, [pc, #32]	; (15c10 <arch_switch_to_main_thread+0x28>)
   15bf0:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   15bf2:	f000 fb7b 	bl	162ec <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   15bf6:	4620      	mov	r0, r4
   15bf8:	f385 8809 	msr	PSP, r5
   15bfc:	2100      	movs	r1, #0
   15bfe:	b663      	cpsie	if
   15c00:	f381 8811 	msr	BASEPRI, r1
   15c04:	f3bf 8f6f 	isb	sy
   15c08:	2200      	movs	r2, #0
   15c0a:	2300      	movs	r3, #0
   15c0c:	f015 f8d7 	bl	2adbe <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   15c10:	200036f4 	.word	0x200036f4

00015c14 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   15c14:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   15c16:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   15c18:	4a0b      	ldr	r2, [pc, #44]	; (15c48 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   15c1a:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   15c1c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   15c1e:	bf1e      	ittt	ne
	movne	r1, #0
   15c20:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   15c22:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   15c24:	f01a fe97 	blne	30956 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   15c28:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   15c2a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   15c2e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   15c32:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   15c36:	4905      	ldr	r1, [pc, #20]	; (15c4c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   15c38:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   15c3a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   15c3c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   15c3e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   15c42:	4903      	ldr	r1, [pc, #12]	; (15c50 <_isr_wrapper+0x3c>)
	bx r1
   15c44:	4708      	bx	r1
   15c46:	0000      	.short	0x0000
	ldr r2, =_kernel
   15c48:	200036f4 	.word	0x200036f4
	ldr r1, =_sw_isr_table
   15c4c:	0003116c 	.word	0x0003116c
	ldr r1, =z_arm_int_exit
   15c50:	00015c55 	.word	0x00015c55

00015c54 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   15c54:	4b04      	ldr	r3, [pc, #16]	; (15c68 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   15c56:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   15c58:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   15c5a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   15c5c:	d003      	beq.n	15c66 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   15c5e:	4903      	ldr	r1, [pc, #12]	; (15c6c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   15c60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   15c64:	600a      	str	r2, [r1, #0]

00015c66 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   15c66:	4770      	bx	lr
	ldr r3, =_kernel
   15c68:	200036f4 	.word	0x200036f4
	ldr r1, =_SCS_ICSR
   15c6c:	e000ed04 	.word	0xe000ed04

00015c70 <bus_fault>:
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
   15c70:	b570      	push	{r4, r5, r6, lr}
   15c72:	4605      	mov	r5, r0
   15c74:	460e      	mov	r6, r1
   15c76:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
   15c78:	2145      	movs	r1, #69	; 0x45
   15c7a:	482e      	ldr	r0, [pc, #184]	; (15d34 <bus_fault+0xc4>)
   15c7c:	f015 fa16 	bl	2b0ac <z_log_minimal_printk>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   15c80:	4b2d      	ldr	r3, [pc, #180]	; (15d38 <bus_fault+0xc8>)
   15c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15c84:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   15c88:	d124      	bne.n	15cd4 <bus_fault+0x64>
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   15c8a:	4b2b      	ldr	r3, [pc, #172]	; (15d38 <bus_fault+0xc8>)
   15c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15c8e:	f413 6f00 	tst.w	r3, #2048	; 0x800
   15c92:	d124      	bne.n	15cde <bus_fault+0x6e>
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   15c94:	4b28      	ldr	r3, [pc, #160]	; (15d38 <bus_fault+0xc8>)
   15c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15c98:	f413 7f00 	tst.w	r3, #512	; 0x200
   15c9c:	d124      	bne.n	15ce8 <bus_fault+0x78>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   15c9e:	4b26      	ldr	r3, [pc, #152]	; (15d38 <bus_fault+0xc8>)
   15ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15ca2:	f413 6f80 	tst.w	r3, #1024	; 0x400
   15ca6:	d135      	bne.n	15d14 <bus_fault+0xa4>
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   15ca8:	4b23      	ldr	r3, [pc, #140]	; (15d38 <bus_fault+0xc8>)
   15caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15cac:	f413 7f80 	tst.w	r3, #256	; 0x100
   15cb0:	d135      	bne.n	15d1e <bus_fault+0xae>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   15cb2:	4b21      	ldr	r3, [pc, #132]	; (15d38 <bus_fault+0xc8>)
   15cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15cb6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   15cba:	d135      	bne.n	15d28 <bus_fault+0xb8>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   15cbc:	4a1e      	ldr	r2, [pc, #120]	; (15d38 <bus_fault+0xc8>)
   15cbe:	6a93      	ldr	r3, [r2, #40]	; 0x28
   15cc0:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   15cc4:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
   15cc6:	2101      	movs	r1, #1
   15cc8:	4628      	mov	r0, r5
   15cca:	f016 f80a 	bl	2bce2 <memory_fault_recoverable>
   15cce:	7020      	strb	r0, [r4, #0]

	return reason;
}
   15cd0:	2000      	movs	r0, #0
   15cd2:	bd70      	pop	{r4, r5, r6, pc}
		PR_FAULT_INFO("  Stacking error");
   15cd4:	2145      	movs	r1, #69	; 0x45
   15cd6:	4819      	ldr	r0, [pc, #100]	; (15d3c <bus_fault+0xcc>)
   15cd8:	f015 f9e8 	bl	2b0ac <z_log_minimal_printk>
   15cdc:	e7d5      	b.n	15c8a <bus_fault+0x1a>
		PR_FAULT_INFO("  Unstacking error");
   15cde:	2145      	movs	r1, #69	; 0x45
   15ce0:	4817      	ldr	r0, [pc, #92]	; (15d40 <bus_fault+0xd0>)
   15ce2:	f015 f9e3 	bl	2b0ac <z_log_minimal_printk>
   15ce6:	e7d5      	b.n	15c94 <bus_fault+0x24>
		PR_FAULT_INFO("  Precise data bus error");
   15ce8:	2145      	movs	r1, #69	; 0x45
   15cea:	4816      	ldr	r0, [pc, #88]	; (15d44 <bus_fault+0xd4>)
   15cec:	f015 f9de 	bl	2b0ac <z_log_minimal_printk>
		STORE_xFAR(bfar, SCB->BFAR);
   15cf0:	4b11      	ldr	r3, [pc, #68]	; (15d38 <bus_fault+0xc8>)
   15cf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   15cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15cf6:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   15cfa:	d0d0      	beq.n	15c9e <bus_fault+0x2e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   15cfc:	2145      	movs	r1, #69	; 0x45
   15cfe:	4812      	ldr	r0, [pc, #72]	; (15d48 <bus_fault+0xd8>)
   15d00:	f015 f9d4 	bl	2b0ac <z_log_minimal_printk>
			if (from_hard_fault != 0) {
   15d04:	2e00      	cmp	r6, #0
   15d06:	d0ca      	beq.n	15c9e <bus_fault+0x2e>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   15d08:	4a0b      	ldr	r2, [pc, #44]	; (15d38 <bus_fault+0xc8>)
   15d0a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   15d0c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   15d10:	6293      	str	r3, [r2, #40]	; 0x28
   15d12:	e7c4      	b.n	15c9e <bus_fault+0x2e>
		PR_FAULT_INFO("  Imprecise data bus error");
   15d14:	2145      	movs	r1, #69	; 0x45
   15d16:	480d      	ldr	r0, [pc, #52]	; (15d4c <bus_fault+0xdc>)
   15d18:	f015 f9c8 	bl	2b0ac <z_log_minimal_printk>
   15d1c:	e7c4      	b.n	15ca8 <bus_fault+0x38>
		PR_FAULT_INFO("  Instruction bus error");
   15d1e:	2145      	movs	r1, #69	; 0x45
   15d20:	480b      	ldr	r0, [pc, #44]	; (15d50 <bus_fault+0xe0>)
   15d22:	f015 f9c3 	bl	2b0ac <z_log_minimal_printk>
   15d26:	e7c9      	b.n	15cbc <bus_fault+0x4c>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   15d28:	2145      	movs	r1, #69	; 0x45
   15d2a:	480a      	ldr	r0, [pc, #40]	; (15d54 <bus_fault+0xe4>)
   15d2c:	f015 f9be 	bl	2b0ac <z_log_minimal_printk>
   15d30:	e7c4      	b.n	15cbc <bus_fault+0x4c>
   15d32:	bf00      	nop
   15d34:	00031e7c 	.word	0x00031e7c
   15d38:	e000ed00 	.word	0xe000ed00
   15d3c:	00031e98 	.word	0x00031e98
   15d40:	00031eb0 	.word	0x00031eb0
   15d44:	00031ec8 	.word	0x00031ec8
   15d48:	00031ee8 	.word	0x00031ee8
   15d4c:	00031f04 	.word	0x00031f04
   15d50:	00031f24 	.word	0x00031f24
   15d54:	00031f44 	.word	0x00031f44

00015d58 <usage_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
{
   15d58:	b508      	push	{r3, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   15d5a:	2145      	movs	r1, #69	; 0x45
   15d5c:	4823      	ldr	r0, [pc, #140]	; (15dec <usage_fault+0x94>)
   15d5e:	f015 f9a5 	bl	2b0ac <z_log_minimal_printk>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   15d62:	4b23      	ldr	r3, [pc, #140]	; (15df0 <usage_fault+0x98>)
   15d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15d66:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   15d6a:	d121      	bne.n	15db0 <usage_fault+0x58>
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   15d6c:	4b20      	ldr	r3, [pc, #128]	; (15df0 <usage_fault+0x98>)
   15d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15d70:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   15d74:	d121      	bne.n	15dba <usage_fault+0x62>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   15d76:	4b1e      	ldr	r3, [pc, #120]	; (15df0 <usage_fault+0x98>)
   15d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15d7a:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   15d7e:	d121      	bne.n	15dc4 <usage_fault+0x6c>
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   15d80:	4b1b      	ldr	r3, [pc, #108]	; (15df0 <usage_fault+0x98>)
   15d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15d84:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   15d88:	d121      	bne.n	15dce <usage_fault+0x76>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   15d8a:	4b19      	ldr	r3, [pc, #100]	; (15df0 <usage_fault+0x98>)
   15d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15d8e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   15d92:	d121      	bne.n	15dd8 <usage_fault+0x80>
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   15d94:	4b16      	ldr	r3, [pc, #88]	; (15df0 <usage_fault+0x98>)
   15d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15d98:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   15d9c:	d121      	bne.n	15de2 <usage_fault+0x8a>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   15d9e:	4a14      	ldr	r2, [pc, #80]	; (15df0 <usage_fault+0x98>)
   15da0:	6a93      	ldr	r3, [r2, #40]	; 0x28
   15da2:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   15da6:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   15daa:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
   15dac:	2000      	movs	r0, #0
   15dae:	bd08      	pop	{r3, pc}
		PR_FAULT_INFO("  Division by zero");
   15db0:	2145      	movs	r1, #69	; 0x45
   15db2:	4810      	ldr	r0, [pc, #64]	; (15df4 <usage_fault+0x9c>)
   15db4:	f015 f97a 	bl	2b0ac <z_log_minimal_printk>
   15db8:	e7d8      	b.n	15d6c <usage_fault+0x14>
		PR_FAULT_INFO("  Unaligned memory access");
   15dba:	2145      	movs	r1, #69	; 0x45
   15dbc:	480e      	ldr	r0, [pc, #56]	; (15df8 <usage_fault+0xa0>)
   15dbe:	f015 f975 	bl	2b0ac <z_log_minimal_printk>
   15dc2:	e7d8      	b.n	15d76 <usage_fault+0x1e>
		PR_FAULT_INFO("  No coprocessor instructions");
   15dc4:	2145      	movs	r1, #69	; 0x45
   15dc6:	480d      	ldr	r0, [pc, #52]	; (15dfc <usage_fault+0xa4>)
   15dc8:	f015 f970 	bl	2b0ac <z_log_minimal_printk>
   15dcc:	e7d8      	b.n	15d80 <usage_fault+0x28>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   15dce:	2145      	movs	r1, #69	; 0x45
   15dd0:	480b      	ldr	r0, [pc, #44]	; (15e00 <usage_fault+0xa8>)
   15dd2:	f015 f96b 	bl	2b0ac <z_log_minimal_printk>
   15dd6:	e7d8      	b.n	15d8a <usage_fault+0x32>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   15dd8:	2145      	movs	r1, #69	; 0x45
   15dda:	480a      	ldr	r0, [pc, #40]	; (15e04 <usage_fault+0xac>)
   15ddc:	f015 f966 	bl	2b0ac <z_log_minimal_printk>
   15de0:	e7d8      	b.n	15d94 <usage_fault+0x3c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   15de2:	2145      	movs	r1, #69	; 0x45
   15de4:	4808      	ldr	r0, [pc, #32]	; (15e08 <usage_fault+0xb0>)
   15de6:	f015 f961 	bl	2b0ac <z_log_minimal_printk>
   15dea:	e7d8      	b.n	15d9e <usage_fault+0x46>
   15dec:	00031f78 	.word	0x00031f78
   15df0:	e000ed00 	.word	0xe000ed00
   15df4:	00031f98 	.word	0x00031f98
   15df8:	00031fb0 	.word	0x00031fb0
   15dfc:	00031fd0 	.word	0x00031fd0
   15e00:	00031ff4 	.word	0x00031ff4
   15e04:	00032020 	.word	0x00032020
   15e08:	00032040 	.word	0x00032040

00015e0c <debug_monitor>:
 *
 * See z_arm_fault_dump() for example.
 *
 */
static void debug_monitor(z_arch_esf_t *esf, bool *recoverable)
{
   15e0c:	b508      	push	{r3, lr}
	*recoverable = false;
   15e0e:	2300      	movs	r3, #0
   15e10:	700b      	strb	r3, [r1, #0]

	PR_FAULT_INFO(
   15e12:	2145      	movs	r1, #69	; 0x45
   15e14:	4801      	ldr	r0, [pc, #4]	; (15e1c <debug_monitor+0x10>)
   15e16:	f015 f949 	bl	2b0ac <z_log_minimal_printk>

		*recoverable = memory_fault_recoverable(esf, false);
	}

#endif
}
   15e1a:	bd08      	pop	{r3, pc}
   15e1c:	00032070 	.word	0x00032070

00015e20 <reserved_exception>:
 *
 * See z_arm_fault_dump() for example.
 *
 */
static void reserved_exception(const z_arch_esf_t *esf, int fault)
{
   15e20:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	PR_FAULT_INFO("***** %s %d) *****",
   15e22:	290f      	cmp	r1, #15
   15e24:	dc07      	bgt.n	15e36 <reserved_exception+0x16>
   15e26:	4a05      	ldr	r2, [pc, #20]	; (15e3c <reserved_exception+0x1c>)
   15e28:	f1a1 0310 	sub.w	r3, r1, #16
   15e2c:	2145      	movs	r1, #69	; 0x45
   15e2e:	4804      	ldr	r0, [pc, #16]	; (15e40 <reserved_exception+0x20>)
   15e30:	f015 f93c 	bl	2b0ac <z_log_minimal_printk>
	       fault < 16 ? "Reserved Exception (" : "Spurious interrupt (IRQ ",
	       fault - 16);
}
   15e34:	bd08      	pop	{r3, pc}
	PR_FAULT_INFO("***** %s %d) *****",
   15e36:	4a03      	ldr	r2, [pc, #12]	; (15e44 <reserved_exception+0x24>)
   15e38:	e7f6      	b.n	15e28 <reserved_exception+0x8>
   15e3a:	bf00      	nop
   15e3c:	000320b8 	.word	0x000320b8
   15e40:	000320d0 	.word	0x000320d0
   15e44:	0003209c 	.word	0x0003209c

00015e48 <mem_manage_fault>:
{
   15e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15e4a:	4605      	mov	r5, r0
   15e4c:	460c      	mov	r4, r1
   15e4e:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
   15e50:	2145      	movs	r1, #69	; 0x45
   15e52:	4847      	ldr	r0, [pc, #284]	; (15f70 <mem_manage_fault+0x128>)
   15e54:	f015 f92a 	bl	2b0ac <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   15e58:	4b46      	ldr	r3, [pc, #280]	; (15f74 <mem_manage_fault+0x12c>)
   15e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15e5c:	f013 0f10 	tst.w	r3, #16
   15e60:	d13a      	bne.n	15ed8 <mem_manage_fault+0x90>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   15e62:	4b44      	ldr	r3, [pc, #272]	; (15f74 <mem_manage_fault+0x12c>)
   15e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15e66:	f013 0f08 	tst.w	r3, #8
   15e6a:	d13a      	bne.n	15ee2 <mem_manage_fault+0x9a>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   15e6c:	4b41      	ldr	r3, [pc, #260]	; (15f74 <mem_manage_fault+0x12c>)
   15e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15e70:	f013 0f02 	tst.w	r3, #2
   15e74:	d13a      	bne.n	15eec <mem_manage_fault+0xa4>
	uint32_t mmfar = -EINVAL;
   15e76:	f06f 0715 	mvn.w	r7, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   15e7a:	4b3e      	ldr	r3, [pc, #248]	; (15f74 <mem_manage_fault+0x12c>)
   15e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15e7e:	f013 0f01 	tst.w	r3, #1
   15e82:	d14d      	bne.n	15f20 <mem_manage_fault+0xd8>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   15e84:	4b3b      	ldr	r3, [pc, #236]	; (15f74 <mem_manage_fault+0x12c>)
   15e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15e88:	f013 0f20 	tst.w	r3, #32
   15e8c:	d14d      	bne.n	15f2a <mem_manage_fault+0xe2>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   15e8e:	4b39      	ldr	r3, [pc, #228]	; (15f74 <mem_manage_fault+0x12c>)
   15e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15e92:	f013 0f10 	tst.w	r3, #16
   15e96:	d104      	bne.n	15ea2 <mem_manage_fault+0x5a>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   15e98:	4b36      	ldr	r3, [pc, #216]	; (15f74 <mem_manage_fault+0x12c>)
   15e9a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   15e9c:	f014 0402 	ands.w	r4, r4, #2
   15ea0:	d004      	beq.n	15eac <mem_manage_fault+0x64>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   15ea2:	4b34      	ldr	r3, [pc, #208]	; (15f74 <mem_manage_fault+0x12c>)
   15ea4:	685c      	ldr	r4, [r3, #4]
   15ea6:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
   15eaa:	d143      	bne.n	15f34 <mem_manage_fault+0xec>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   15eac:	4b31      	ldr	r3, [pc, #196]	; (15f74 <mem_manage_fault+0x12c>)
   15eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15eb0:	f013 0f20 	tst.w	r3, #32
   15eb4:	d004      	beq.n	15ec0 <mem_manage_fault+0x78>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   15eb6:	4a2f      	ldr	r2, [pc, #188]	; (15f74 <mem_manage_fault+0x12c>)
   15eb8:	6a53      	ldr	r3, [r2, #36]	; 0x24
   15eba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   15ebe:	6253      	str	r3, [r2, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   15ec0:	492c      	ldr	r1, [pc, #176]	; (15f74 <mem_manage_fault+0x12c>)
   15ec2:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   15ec4:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   15ec8:	628b      	str	r3, [r1, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   15eca:	2101      	movs	r1, #1
   15ecc:	4628      	mov	r0, r5
   15ece:	f015 ff08 	bl	2bce2 <memory_fault_recoverable>
   15ed2:	7030      	strb	r0, [r6, #0]
}
   15ed4:	4620      	mov	r0, r4
   15ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		PR_FAULT_INFO("  Stacking error (context area might be"
   15ed8:	2145      	movs	r1, #69	; 0x45
   15eda:	4827      	ldr	r0, [pc, #156]	; (15f78 <mem_manage_fault+0x130>)
   15edc:	f015 f8e6 	bl	2b0ac <z_log_minimal_printk>
   15ee0:	e7bf      	b.n	15e62 <mem_manage_fault+0x1a>
		PR_FAULT_INFO("  Unstacking error");
   15ee2:	2145      	movs	r1, #69	; 0x45
   15ee4:	4825      	ldr	r0, [pc, #148]	; (15f7c <mem_manage_fault+0x134>)
   15ee6:	f015 f8e1 	bl	2b0ac <z_log_minimal_printk>
   15eea:	e7bf      	b.n	15e6c <mem_manage_fault+0x24>
		PR_FAULT_INFO("  Data Access Violation");
   15eec:	2145      	movs	r1, #69	; 0x45
   15eee:	4824      	ldr	r0, [pc, #144]	; (15f80 <mem_manage_fault+0x138>)
   15ef0:	f015 f8dc 	bl	2b0ac <z_log_minimal_printk>
		uint32_t temp = SCB->MMFAR;
   15ef4:	4b1f      	ldr	r3, [pc, #124]	; (15f74 <mem_manage_fault+0x12c>)
   15ef6:	6b5f      	ldr	r7, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   15ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15efa:	f013 0f80 	tst.w	r3, #128	; 0x80
   15efe:	d102      	bne.n	15f06 <mem_manage_fault+0xbe>
	uint32_t mmfar = -EINVAL;
   15f00:	f06f 0715 	mvn.w	r7, #21
   15f04:	e7b9      	b.n	15e7a <mem_manage_fault+0x32>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   15f06:	463a      	mov	r2, r7
   15f08:	2145      	movs	r1, #69	; 0x45
   15f0a:	481e      	ldr	r0, [pc, #120]	; (15f84 <mem_manage_fault+0x13c>)
   15f0c:	f015 f8ce 	bl	2b0ac <z_log_minimal_printk>
			if (from_hard_fault != 0) {
   15f10:	2c00      	cmp	r4, #0
   15f12:	d0b2      	beq.n	15e7a <mem_manage_fault+0x32>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   15f14:	4a17      	ldr	r2, [pc, #92]	; (15f74 <mem_manage_fault+0x12c>)
   15f16:	6a93      	ldr	r3, [r2, #40]	; 0x28
   15f18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   15f1c:	6293      	str	r3, [r2, #40]	; 0x28
   15f1e:	e7ac      	b.n	15e7a <mem_manage_fault+0x32>
		PR_FAULT_INFO("  Instruction Access Violation");
   15f20:	2145      	movs	r1, #69	; 0x45
   15f22:	4819      	ldr	r0, [pc, #100]	; (15f88 <mem_manage_fault+0x140>)
   15f24:	f015 f8c2 	bl	2b0ac <z_log_minimal_printk>
   15f28:	e7ac      	b.n	15e84 <mem_manage_fault+0x3c>
		PR_FAULT_INFO(
   15f2a:	2145      	movs	r1, #69	; 0x45
   15f2c:	4817      	ldr	r0, [pc, #92]	; (15f8c <mem_manage_fault+0x144>)
   15f2e:	f015 f8bd 	bl	2b0ac <z_log_minimal_printk>
   15f32:	e7ac      	b.n	15e8e <mem_manage_fault+0x46>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   15f34:	4629      	mov	r1, r5
   15f36:	4638      	mov	r0, r7
   15f38:	f7ff fe30 	bl	15b9c <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   15f3c:	4607      	mov	r7, r0
   15f3e:	b990      	cbnz	r0, 15f66 <mem_manage_fault+0x11e>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
   15f40:	4b0c      	ldr	r3, [pc, #48]	; (15f74 <mem_manage_fault+0x12c>)
   15f42:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   15f44:	f014 0410 	ands.w	r4, r4, #16
   15f48:	d0b0      	beq.n	15eac <mem_manage_fault+0x64>
   15f4a:	4c11      	ldr	r4, [pc, #68]	; (15f90 <mem_manage_fault+0x148>)
   15f4c:	f240 1253 	movw	r2, #339	; 0x153
   15f50:	4621      	mov	r1, r4
   15f52:	4810      	ldr	r0, [pc, #64]	; (15f94 <mem_manage_fault+0x14c>)
   15f54:	f015 f89b 	bl	2b08e <assert_print>
   15f58:	f240 1153 	movw	r1, #339	; 0x153
   15f5c:	4620      	mov	r0, r4
   15f5e:	f015 f88f 	bl	2b080 <assert_post_action>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   15f62:	463c      	mov	r4, r7
   15f64:	e7a2      	b.n	15eac <mem_manage_fault+0x64>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   15f66:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   15f6a:	2402      	movs	r4, #2
   15f6c:	e79e      	b.n	15eac <mem_manage_fault+0x64>
   15f6e:	bf00      	nop
   15f70:	000320e8 	.word	0x000320e8
   15f74:	e000ed00 	.word	0xe000ed00
   15f78:	00032104 	.word	0x00032104
   15f7c:	00031eb0 	.word	0x00031eb0
   15f80:	0003213c 	.word	0x0003213c
   15f84:	0003215c 	.word	0x0003215c
   15f88:	00032178 	.word	0x00032178
   15f8c:	00031f44 	.word	0x00031f44
   15f90:	0003219c 	.word	0x0003219c
   15f94:	000318f8 	.word	0x000318f8

00015f98 <hard_fault>:
{
   15f98:	b570      	push	{r4, r5, r6, lr}
   15f9a:	4606      	mov	r6, r0
   15f9c:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** HARD FAULT *****");
   15f9e:	2145      	movs	r1, #69	; 0x45
   15fa0:	4836      	ldr	r0, [pc, #216]	; (1607c <hard_fault+0xe4>)
   15fa2:	f015 f883 	bl	2b0ac <z_log_minimal_printk>
	*recoverable = false;
   15fa6:	2300      	movs	r3, #0
   15fa8:	702b      	strb	r3, [r5, #0]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   15faa:	4b35      	ldr	r3, [pc, #212]	; (16080 <hard_fault+0xe8>)
   15fac:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   15fae:	f014 0402 	ands.w	r4, r4, #2
   15fb2:	d127      	bne.n	16004 <hard_fault+0x6c>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   15fb4:	4b32      	ldr	r3, [pc, #200]	; (16080 <hard_fault+0xe8>)
   15fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   15fb8:	2b00      	cmp	r3, #0
   15fba:	db2a      	blt.n	16012 <hard_fault+0x7a>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   15fbc:	4b30      	ldr	r3, [pc, #192]	; (16080 <hard_fault+0xe8>)
   15fbe:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   15fc0:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
   15fc4:	d04c      	beq.n	16060 <hard_fault+0xc8>
		PR_EXC("  Fault escalation (see below)");
   15fc6:	2145      	movs	r1, #69	; 0x45
   15fc8:	482e      	ldr	r0, [pc, #184]	; (16084 <hard_fault+0xec>)
   15fca:	f015 f86f 	bl	2b0ac <z_log_minimal_printk>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   15fce:	69b3      	ldr	r3, [r6, #24]
	uint16_t fault_insn = *(ret_addr - 1);
   15fd0:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   15fd4:	f64d 7302 	movw	r3, #57090	; 0xdf02
   15fd8:	429a      	cmp	r2, r3
   15fda:	d01f      	beq.n	1601c <hard_fault+0x84>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   15fdc:	4b28      	ldr	r3, [pc, #160]	; (16080 <hard_fault+0xe8>)
   15fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15fe0:	f013 0fff 	tst.w	r3, #255	; 0xff
   15fe4:	d121      	bne.n	1602a <hard_fault+0x92>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   15fe6:	4b26      	ldr	r3, [pc, #152]	; (16080 <hard_fault+0xe8>)
   15fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15fea:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
   15fee:	d123      	bne.n	16038 <hard_fault+0xa0>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   15ff0:	4b23      	ldr	r3, [pc, #140]	; (16080 <hard_fault+0xe8>)
   15ff2:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   15ff4:	0c24      	lsrs	r4, r4, #16
   15ff6:	0424      	lsls	r4, r4, #16
   15ff8:	b32c      	cbz	r4, 16046 <hard_fault+0xae>
			reason = usage_fault(esf);
   15ffa:	4630      	mov	r0, r6
   15ffc:	f7ff feac 	bl	15d58 <usage_fault>
   16000:	4604      	mov	r4, r0
   16002:	e004      	b.n	1600e <hard_fault+0x76>
		PR_EXC("  Bus fault on vector table read");
   16004:	2145      	movs	r1, #69	; 0x45
   16006:	4820      	ldr	r0, [pc, #128]	; (16088 <hard_fault+0xf0>)
   16008:	f015 f850 	bl	2b0ac <z_log_minimal_printk>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   1600c:	2400      	movs	r4, #0
}
   1600e:	4620      	mov	r0, r4
   16010:	bd70      	pop	{r4, r5, r6, pc}
		PR_EXC("  Debug event");
   16012:	2145      	movs	r1, #69	; 0x45
   16014:	481d      	ldr	r0, [pc, #116]	; (1608c <hard_fault+0xf4>)
   16016:	f015 f849 	bl	2b0ac <z_log_minimal_printk>
   1601a:	e7f8      	b.n	1600e <hard_fault+0x76>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   1601c:	6832      	ldr	r2, [r6, #0]
   1601e:	2145      	movs	r1, #69	; 0x45
   16020:	481b      	ldr	r0, [pc, #108]	; (16090 <hard_fault+0xf8>)
   16022:	f015 f843 	bl	2b0ac <z_log_minimal_printk>
			reason = esf->basic.r0;
   16026:	6834      	ldr	r4, [r6, #0]
   16028:	e7f1      	b.n	1600e <hard_fault+0x76>
			reason = mem_manage_fault(esf, 1, recoverable);
   1602a:	462a      	mov	r2, r5
   1602c:	2101      	movs	r1, #1
   1602e:	4630      	mov	r0, r6
   16030:	f7ff ff0a 	bl	15e48 <mem_manage_fault>
   16034:	4604      	mov	r4, r0
   16036:	e7ea      	b.n	1600e <hard_fault+0x76>
			reason = bus_fault(esf, 1, recoverable);
   16038:	462a      	mov	r2, r5
   1603a:	2101      	movs	r1, #1
   1603c:	4630      	mov	r0, r6
   1603e:	f7ff fe17 	bl	15c70 <bus_fault>
   16042:	4604      	mov	r4, r0
   16044:	e7e3      	b.n	1600e <hard_fault+0x76>
			__ASSERT(0,
   16046:	4d13      	ldr	r5, [pc, #76]	; (16094 <hard_fault+0xfc>)
   16048:	f240 22d7 	movw	r2, #727	; 0x2d7
   1604c:	4629      	mov	r1, r5
   1604e:	4812      	ldr	r0, [pc, #72]	; (16098 <hard_fault+0x100>)
   16050:	f015 f81d 	bl	2b08e <assert_print>
   16054:	f240 21d7 	movw	r1, #727	; 0x2d7
   16058:	4628      	mov	r0, r5
   1605a:	f015 f811 	bl	2b080 <assert_post_action>
   1605e:	e7d6      	b.n	1600e <hard_fault+0x76>
		__ASSERT(0,
   16060:	4d0c      	ldr	r5, [pc, #48]	; (16094 <hard_fault+0xfc>)
   16062:	f240 22db 	movw	r2, #731	; 0x2db
   16066:	4629      	mov	r1, r5
   16068:	480b      	ldr	r0, [pc, #44]	; (16098 <hard_fault+0x100>)
   1606a:	f015 f810 	bl	2b08e <assert_print>
   1606e:	f240 21db 	movw	r1, #731	; 0x2db
   16072:	4628      	mov	r0, r5
   16074:	f015 f804 	bl	2b080 <assert_post_action>
	return reason;
   16078:	e7c9      	b.n	1600e <hard_fault+0x76>
   1607a:	bf00      	nop
   1607c:	000321d8 	.word	0x000321d8
   16080:	e000ed00 	.word	0xe000ed00
   16084:	00032230 	.word	0x00032230
   16088:	000321f4 	.word	0x000321f4
   1608c:	0003221c 	.word	0x0003221c
   16090:	00032254 	.word	0x00032254
   16094:	0003219c 	.word	0x0003219c
   16098:	000318f8 	.word	0x000318f8

0001609c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   1609c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1609e:	b08b      	sub	sp, #44	; 0x2c
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   160a0:	4b30      	ldr	r3, [pc, #192]	; (16164 <z_arm_fault+0xc8>)
   160a2:	685d      	ldr	r5, [r3, #4]
   160a4:	f3c5 0508 	ubfx	r5, r5, #0, #9
   160a8:	2300      	movs	r3, #0
   160aa:	f383 8811 	msr	BASEPRI, r3
   160ae:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   160b2:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   160b6:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   160ba:	d11f      	bne.n	160fc <z_arm_fault+0x60>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   160bc:	f002 030c 	and.w	r3, r2, #12
   160c0:	2b08      	cmp	r3, #8
   160c2:	d011      	beq.n	160e8 <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   160c4:	f012 0f08 	tst.w	r2, #8
   160c8:	d015      	beq.n	160f6 <z_arm_fault+0x5a>
			ptr_esf =  (z_arch_esf_t *)psp;
   160ca:	460c      	mov	r4, r1
	*nested_exc = false;
   160cc:	2600      	movs	r6, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   160ce:	b1c4      	cbz	r4, 16102 <z_arm_fault+0x66>

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
   160d0:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   160d4:	4629      	mov	r1, r5
   160d6:	4620      	mov	r0, r4
   160d8:	f015 fe05 	bl	2bce6 <fault_handle>
   160dc:	4605      	mov	r5, r0
	if (recoverable) {
   160de:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   160e2:	b1db      	cbz	r3, 1611c <z_arm_fault+0x80>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
   160e4:	b00b      	add	sp, #44	; 0x2c
   160e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   160e8:	2145      	movs	r1, #69	; 0x45
   160ea:	481f      	ldr	r0, [pc, #124]	; (16168 <z_arm_fault+0xcc>)
   160ec:	f014 ffde 	bl	2b0ac <z_log_minimal_printk>
	*nested_exc = false;
   160f0:	2600      	movs	r6, #0
		return NULL;
   160f2:	4634      	mov	r4, r6
   160f4:	e7eb      	b.n	160ce <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
   160f6:	4604      	mov	r4, r0
			*nested_exc = true;
   160f8:	2601      	movs	r6, #1
   160fa:	e7e8      	b.n	160ce <z_arm_fault+0x32>
	*nested_exc = false;
   160fc:	2600      	movs	r6, #0
		return NULL;
   160fe:	4634      	mov	r4, r6
   16100:	e7e5      	b.n	160ce <z_arm_fault+0x32>
	__ASSERT(esf != NULL,
   16102:	4f1a      	ldr	r7, [pc, #104]	; (1616c <z_arm_fault+0xd0>)
   16104:	f240 4205 	movw	r2, #1029	; 0x405
   16108:	4639      	mov	r1, r7
   1610a:	4819      	ldr	r0, [pc, #100]	; (16170 <z_arm_fault+0xd4>)
   1610c:	f014 ffbf 	bl	2b08e <assert_print>
   16110:	f240 4105 	movw	r1, #1029	; 0x405
   16114:	4638      	mov	r0, r7
   16116:	f014 ffb3 	bl	2b080 <assert_post_action>
   1611a:	e7d9      	b.n	160d0 <z_arm_fault+0x34>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   1611c:	f10d 0c04 	add.w	ip, sp, #4
   16120:	6820      	ldr	r0, [r4, #0]
   16122:	6861      	ldr	r1, [r4, #4]
   16124:	68a2      	ldr	r2, [r4, #8]
   16126:	68e3      	ldr	r3, [r4, #12]
   16128:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1612c:	6920      	ldr	r0, [r4, #16]
   1612e:	6961      	ldr	r1, [r4, #20]
   16130:	69a2      	ldr	r2, [r4, #24]
   16132:	69e3      	ldr	r3, [r4, #28]
   16134:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
	if (nested_exc) {
   16138:	b146      	cbz	r6, 1614c <z_arm_fault+0xb0>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   1613a:	f3c3 0208 	ubfx	r2, r3, #0, #9
   1613e:	b95a      	cbnz	r2, 16158 <z_arm_fault+0xbc>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   16140:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   16144:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   16148:	9308      	str	r3, [sp, #32]
   1614a:	e005      	b.n	16158 <z_arm_fault+0xbc>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   1614c:	9b08      	ldr	r3, [sp, #32]
   1614e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   16152:	f023 0301 	bic.w	r3, r3, #1
   16156:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
   16158:	a901      	add	r1, sp, #4
   1615a:	4628      	mov	r0, r5
   1615c:	f015 fda3 	bl	2bca6 <z_arm_fatal_error>
   16160:	e7c0      	b.n	160e4 <z_arm_fault+0x48>
   16162:	bf00      	nop
   16164:	e000ed00 	.word	0xe000ed00
   16168:	00032278 	.word	0x00032278
   1616c:	0003219c 	.word	0x0003219c
   16170:	000318f8 	.word	0x000318f8

00016174 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   16174:	4a02      	ldr	r2, [pc, #8]	; (16180 <z_arm_fault_init+0xc>)
   16176:	6953      	ldr	r3, [r2, #20]
   16178:	f043 0310 	orr.w	r3, r3, #16
   1617c:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   1617e:	4770      	bx	lr
   16180:	e000ed00 	.word	0xe000ed00

00016184 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   16184:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   16188:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   1618c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   1618e:	4672      	mov	r2, lr
	bl z_arm_fault
   16190:	f7ff ff84 	bl	1609c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   16194:	bd01      	pop	{r0, pc}
   16196:	bf00      	nop

00016198 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   16198:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   1619a:	e006      	b.n	161aa <z_arm_interrupt_init+0x12>
   1619c:	f002 010f 	and.w	r1, r2, #15
   161a0:	4b09      	ldr	r3, [pc, #36]	; (161c8 <z_arm_interrupt_init+0x30>)
   161a2:	440b      	add	r3, r1
   161a4:	2140      	movs	r1, #64	; 0x40
   161a6:	7619      	strb	r1, [r3, #24]
   161a8:	3201      	adds	r2, #1
   161aa:	2a26      	cmp	r2, #38	; 0x26
   161ac:	dc0a      	bgt.n	161c4 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
   161ae:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   161b0:	2b00      	cmp	r3, #0
   161b2:	dbf3      	blt.n	1619c <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   161b4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   161b8:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   161bc:	2140      	movs	r1, #64	; 0x40
   161be:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
   161c2:	e7f1      	b.n	161a8 <z_arm_interrupt_init+0x10>
	}
}
   161c4:	4770      	bx	lr
   161c6:	bf00      	nop
   161c8:	e000ecfc 	.word	0xe000ecfc

000161cc <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   161cc:	2000      	movs	r0, #0
    msr CONTROL, r0
   161ce:	f380 8814 	msr	CONTROL, r0
    isb
   161d2:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   161d6:	f7fd fffb 	bl	141d0 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   161da:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   161dc:	490d      	ldr	r1, [pc, #52]	; (16214 <__start+0x48>)
    str r0, [r1]
   161de:	6008      	str	r0, [r1, #0]
    dsb
   161e0:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   161e4:	480c      	ldr	r0, [pc, #48]	; (16218 <__start+0x4c>)
    msr msp, r0
   161e6:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   161ea:	f000 f82d 	bl	16248 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   161ee:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   161f0:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   161f4:	4809      	ldr	r0, [pc, #36]	; (1621c <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   161f6:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
   161fa:	1840      	adds	r0, r0, r1
    msr PSP, r0
   161fc:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   16200:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   16204:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   16206:	4308      	orrs	r0, r1
    msr CONTROL, r0
   16208:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   1620c:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   16210:	f7ff fc34 	bl	15a7c <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   16214:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   16218:	20005880 	.word	0x20005880
    ldr r0, =z_interrupt_stacks
   1621c:	20005a40 	.word	0x20005a40

00016220 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   16220:	4b08      	ldr	r3, [pc, #32]	; (16244 <z_arm_clear_arm_mpu_config+0x24>)
   16222:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
	int num_regions =
   16226:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
   1622a:	2300      	movs	r3, #0
   1622c:	e006      	b.n	1623c <z_arm_clear_arm_mpu_config+0x1c>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
   1622e:	4a05      	ldr	r2, [pc, #20]	; (16244 <z_arm_clear_arm_mpu_config+0x24>)
   16230:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
   16234:	2100      	movs	r1, #0
   16236:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
   1623a:	3301      	adds	r3, #1
   1623c:	4283      	cmp	r3, r0
   1623e:	dbf6      	blt.n	1622e <z_arm_clear_arm_mpu_config+0xe>
		ARM_MPU_ClrRegion(i);
	}
}
   16240:	4770      	bx	lr
   16242:	bf00      	nop
   16244:	e000ed00 	.word	0xe000ed00

00016248 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   16248:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   1624a:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   1624c:	2400      	movs	r4, #0
   1624e:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   16252:	f7ff ffe5 	bl	16220 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   16256:	4623      	mov	r3, r4
   16258:	e008      	b.n	1626c <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
   1625a:	f103 0120 	add.w	r1, r3, #32
   1625e:	4a0e      	ldr	r2, [pc, #56]	; (16298 <z_arm_init_arch_hw_at_boot+0x50>)
   16260:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16264:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   16268:	3301      	adds	r3, #1
   1626a:	b2db      	uxtb	r3, r3
   1626c:	2b07      	cmp	r3, #7
   1626e:	d9f4      	bls.n	1625a <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   16270:	2300      	movs	r3, #0
   16272:	e008      	b.n	16286 <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
   16274:	f103 0160 	add.w	r1, r3, #96	; 0x60
   16278:	4a07      	ldr	r2, [pc, #28]	; (16298 <z_arm_init_arch_hw_at_boot+0x50>)
   1627a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1627e:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   16282:	3301      	adds	r3, #1
   16284:	b2db      	uxtb	r3, r3
   16286:	2b07      	cmp	r3, #7
   16288:	d9f4      	bls.n	16274 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
   1628a:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   1628c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   16290:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   16294:	bd10      	pop	{r4, pc}
   16296:	bf00      	nop
   16298:	e000e100 	.word	0xe000e100

0001629c <z_impl_k_thread_abort>:
#include <kswap.h>
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
   1629c:	b508      	push	{r3, lr}
	if (_current == thread) {
   1629e:	4b0a      	ldr	r3, [pc, #40]	; (162c8 <z_impl_k_thread_abort+0x2c>)
   162a0:	689b      	ldr	r3, [r3, #8]
   162a2:	4283      	cmp	r3, r0
   162a4:	d002      	beq.n	162ac <z_impl_k_thread_abort+0x10>
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
		}
	}

	z_thread_abort(thread);
   162a6:	f012 f9a5 	bl	285f4 <z_thread_abort>
}
   162aa:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   162ac:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   162b0:	2b00      	cmp	r3, #0
   162b2:	d0f8      	beq.n	162a6 <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   162b4:	4b05      	ldr	r3, [pc, #20]	; (162cc <z_impl_k_thread_abort+0x30>)
   162b6:	685a      	ldr	r2, [r3, #4]
   162b8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   162bc:	605a      	str	r2, [r3, #4]
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   162be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   162c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   162c4:	625a      	str	r2, [r3, #36]	; 0x24
   162c6:	e7ee      	b.n	162a6 <z_impl_k_thread_abort+0xa>
   162c8:	200036f4 	.word	0x200036f4
   162cc:	e000ed00 	.word	0xe000ed00

000162d0 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   162d0:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   162d2:	4b03      	ldr	r3, [pc, #12]	; (162e0 <z_arm_configure_static_mpu_regions+0x10>)
   162d4:	4a03      	ldr	r2, [pc, #12]	; (162e4 <z_arm_configure_static_mpu_regions+0x14>)
   162d6:	2101      	movs	r1, #1
   162d8:	4803      	ldr	r0, [pc, #12]	; (162e8 <z_arm_configure_static_mpu_regions+0x18>)
   162da:	f000 f8a9 	bl	16430 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   162de:	bd08      	pop	{r3, pc}
   162e0:	20010000 	.word	0x20010000
   162e4:	20000000 	.word	0x20000000
   162e8:	000322ac 	.word	0x000322ac

000162ec <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   162ec:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   162ee:	6e83      	ldr	r3, [r0, #104]	; 0x68
   162f0:	3b40      	subs	r3, #64	; 0x40
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   162f2:	4805      	ldr	r0, [pc, #20]	; (16308 <z_arm_configure_dynamic_mpu_regions+0x1c>)
   162f4:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
   162f6:	2340      	movs	r3, #64	; 0x40
   162f8:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   162fa:	4b04      	ldr	r3, [pc, #16]	; (1630c <z_arm_configure_dynamic_mpu_regions+0x20>)
   162fc:	6083      	str	r3, [r0, #8]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   162fe:	2101      	movs	r1, #1
   16300:	f000 f8ae 	bl	16460 <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_enable();
#endif
}
   16304:	bd08      	pop	{r3, pc}
   16306:	bf00      	nop
   16308:	200024f8 	.word	0x200024f8
   1630c:	150b0000 	.word	0x150b0000

00016310 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   16310:	4a08      	ldr	r2, [pc, #32]	; (16334 <region_init+0x24>)
   16312:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   16316:	680b      	ldr	r3, [r1, #0]
   16318:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   1631c:	4303      	orrs	r3, r0
   1631e:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   16322:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   16326:	688b      	ldr	r3, [r1, #8]
   16328:	f043 0301 	orr.w	r3, r3, #1
   1632c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
   16330:	4770      	bx	lr
   16332:	bf00      	nop
   16334:	e000ed00 	.word	0xe000ed00

00016338 <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
   16338:	b510      	push	{r4, lr}
   1633a:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
   1633c:	2807      	cmp	r0, #7
   1633e:	d803      	bhi.n	16348 <region_allocate_and_init+0x10>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
   16340:	f7ff ffe6 	bl	16310 <region_init>

	return index;
   16344:	4620      	mov	r0, r4
}
   16346:	bd10      	pop	{r4, pc}
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   16348:	4602      	mov	r2, r0
   1634a:	2145      	movs	r1, #69	; 0x45
   1634c:	4802      	ldr	r0, [pc, #8]	; (16358 <region_allocate_and_init+0x20>)
   1634e:	f014 fead 	bl	2b0ac <z_log_minimal_printk>
		return -EINVAL;
   16352:	f06f 0015 	mvn.w	r0, #21
   16356:	e7f6      	b.n	16346 <region_allocate_and_init+0xe>
   16358:	000322b8 	.word	0x000322b8

0001635c <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   1635c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16360:	4680      	mov	r8, r0
   16362:	460f      	mov	r7, r1
   16364:	4699      	mov	r9, r3
	int i;
	int reg_index = start_reg_index;
   16366:	4616      	mov	r6, r2

	for (i = 0; i < regions_num; i++) {
   16368:	2500      	movs	r5, #0
   1636a:	e009      	b.n	16380 <mpu_configure_regions+0x24>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
   1636c:	4621      	mov	r1, r4
   1636e:	b2f0      	uxtb	r0, r6
   16370:	f015 fcef 	bl	2bd52 <mpu_configure_region>
   16374:	4606      	mov	r6, r0

		if (reg_index == -EINVAL) {
   16376:	f110 0f16 	cmn.w	r0, #22
   1637a:	d019      	beq.n	163b0 <mpu_configure_regions+0x54>
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
   1637c:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
   1637e:	3501      	adds	r5, #1
   16380:	42bd      	cmp	r5, r7
   16382:	da15      	bge.n	163b0 <mpu_configure_regions+0x54>
		if (regions[i].size == 0U) {
   16384:	eb05 0445 	add.w	r4, r5, r5, lsl #1
   16388:	eb08 0484 	add.w	r4, r8, r4, lsl #2
   1638c:	6862      	ldr	r2, [r4, #4]
   1638e:	2a00      	cmp	r2, #0
   16390:	d0f5      	beq.n	1637e <mpu_configure_regions+0x22>
		if (do_sanity_check &&
   16392:	f1b9 0f00 	cmp.w	r9, #0
   16396:	d0e9      	beq.n	1636c <mpu_configure_regions+0x10>
				(!mpu_partition_is_valid(&regions[i]))) {
   16398:	4620      	mov	r0, r4
   1639a:	f015 fcc9 	bl	2bd30 <mpu_partition_is_valid>
		if (do_sanity_check &&
   1639e:	2800      	cmp	r0, #0
   163a0:	d1e4      	bne.n	1636c <mpu_configure_regions+0x10>
			LOG_ERR("Partition %u: sanity check failed.", i);
   163a2:	462a      	mov	r2, r5
   163a4:	2145      	movs	r1, #69	; 0x45
   163a6:	4804      	ldr	r0, [pc, #16]	; (163b8 <mpu_configure_regions+0x5c>)
   163a8:	f014 fe80 	bl	2b0ac <z_log_minimal_printk>
			return -EINVAL;
   163ac:	f06f 0615 	mvn.w	r6, #21
	}

	return reg_index;
}
   163b0:	4630      	mov	r0, r6
   163b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   163b6:	bf00      	nop
   163b8:	000322e4 	.word	0x000322e4

000163bc <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
   163bc:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
   163be:	4c03      	ldr	r4, [pc, #12]	; (163cc <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   163c0:	2301      	movs	r3, #1
   163c2:	7822      	ldrb	r2, [r4, #0]
   163c4:	f7ff ffca 	bl	1635c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   163c8:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
   163ca:	bd10      	pop	{r4, pc}
   163cc:	20003769 	.word	0x20003769

000163d0 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
   163d0:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   163d2:	2300      	movs	r3, #0
   163d4:	4a09      	ldr	r2, [pc, #36]	; (163fc <mpu_configure_dynamic_mpu_regions+0x2c>)
   163d6:	7812      	ldrb	r2, [r2, #0]
   163d8:	f7ff ffc0 	bl	1635c <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   163dc:	f110 0f16 	cmn.w	r0, #22
   163e0:	d00a      	beq.n	163f8 <mpu_configure_dynamic_mpu_regions+0x28>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   163e2:	4603      	mov	r3, r0
   163e4:	e006      	b.n	163f4 <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
   163e6:	4a06      	ldr	r2, [pc, #24]	; (16400 <mpu_configure_dynamic_mpu_regions+0x30>)
   163e8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
   163ec:	2100      	movs	r1, #0
   163ee:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
   163f2:	3301      	adds	r3, #1
   163f4:	2b07      	cmp	r3, #7
   163f6:	ddf6      	ble.n	163e6 <mpu_configure_dynamic_mpu_regions+0x16>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
   163f8:	bd08      	pop	{r3, pc}
   163fa:	bf00      	nop
   163fc:	20003769 	.word	0x20003769
   16400:	e000ed00 	.word	0xe000ed00

00016404 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   16404:	4b04      	ldr	r3, [pc, #16]	; (16418 <arm_core_mpu_enable+0x14>)
   16406:	2205      	movs	r2, #5
   16408:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   1640c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   16410:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   16414:	4770      	bx	lr
   16416:	bf00      	nop
   16418:	e000ed00 	.word	0xe000ed00

0001641c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   1641c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   16420:	4b02      	ldr	r3, [pc, #8]	; (1642c <arm_core_mpu_disable+0x10>)
   16422:	2200      	movs	r2, #0
   16424:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   16428:	4770      	bx	lr
   1642a:	bf00      	nop
   1642c:	e000ed00 	.word	0xe000ed00

00016430 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   16430:	b510      	push	{r4, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   16432:	f7ff ffc3 	bl	163bc <mpu_configure_static_mpu_regions>
   16436:	f110 0f16 	cmn.w	r0, #22
   1643a:	d000      	beq.n	1643e <arm_core_mpu_configure_static_mpu_regions+0xe>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   1643c:	bd10      	pop	{r4, pc}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   1643e:	4c06      	ldr	r4, [pc, #24]	; (16458 <arm_core_mpu_configure_static_mpu_regions+0x28>)
   16440:	f44f 728b 	mov.w	r2, #278	; 0x116
   16444:	4621      	mov	r1, r4
   16446:	4805      	ldr	r0, [pc, #20]	; (1645c <arm_core_mpu_configure_static_mpu_regions+0x2c>)
   16448:	f014 fe21 	bl	2b08e <assert_print>
   1644c:	f44f 718b 	mov.w	r1, #278	; 0x116
   16450:	4620      	mov	r0, r4
   16452:	f014 fe15 	bl	2b080 <assert_post_action>
}
   16456:	e7f1      	b.n	1643c <arm_core_mpu_configure_static_mpu_regions+0xc>
   16458:	0003230c 	.word	0x0003230c
   1645c:	000318f8 	.word	0x000318f8

00016460 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
   16460:	b510      	push	{r4, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
   16462:	f7ff ffb5 	bl	163d0 <mpu_configure_dynamic_mpu_regions>
   16466:	f110 0f16 	cmn.w	r0, #22
   1646a:	d000      	beq.n	1646e <arm_core_mpu_configure_dynamic_mpu_regions+0xe>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
   1646c:	bd10      	pop	{r4, pc}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   1646e:	4c06      	ldr	r4, [pc, #24]	; (16488 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
   16470:	f240 1235 	movw	r2, #309	; 0x135
   16474:	4621      	mov	r1, r4
   16476:	4805      	ldr	r0, [pc, #20]	; (1648c <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
   16478:	f014 fe09 	bl	2b08e <assert_print>
   1647c:	f240 1135 	movw	r1, #309	; 0x135
   16480:	4620      	mov	r0, r4
   16482:	f014 fdfd 	bl	2b080 <assert_post_action>
}
   16486:	e7f1      	b.n	1646c <arm_core_mpu_configure_dynamic_mpu_regions+0xc>
   16488:	0003230c 	.word	0x0003230c
   1648c:	000318f8 	.word	0x000318f8

00016490 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   16490:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   16492:	4b1f      	ldr	r3, [pc, #124]	; (16510 <z_arm_mpu_init+0x80>)
   16494:	681d      	ldr	r5, [r3, #0]
   16496:	2d08      	cmp	r5, #8
   16498:	d803      	bhi.n	164a2 <z_arm_mpu_init+0x12>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   1649a:	f7ff ffbf 	bl	1641c <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1649e:	2400      	movs	r4, #0
   164a0:	e018      	b.n	164d4 <z_arm_mpu_init+0x44>
		__ASSERT(0,
   164a2:	4c1c      	ldr	r4, [pc, #112]	; (16514 <z_arm_mpu_init+0x84>)
   164a4:	f240 124d 	movw	r2, #333	; 0x14d
   164a8:	4621      	mov	r1, r4
   164aa:	481b      	ldr	r0, [pc, #108]	; (16518 <z_arm_mpu_init+0x88>)
   164ac:	f014 fdef 	bl	2b08e <assert_print>
   164b0:	f240 114d 	movw	r1, #333	; 0x14d
   164b4:	4620      	mov	r0, r4
   164b6:	f014 fde3 	bl	2b080 <assert_post_action>
		return -1;
   164ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   164be:	e017      	b.n	164f0 <z_arm_mpu_init+0x60>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   164c0:	4b13      	ldr	r3, [pc, #76]	; (16510 <z_arm_mpu_init+0x80>)
   164c2:	6859      	ldr	r1, [r3, #4]
   164c4:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   164c8:	0093      	lsls	r3, r2, #2
   164ca:	4419      	add	r1, r3
   164cc:	4620      	mov	r0, r4
   164ce:	f7ff ff1f 	bl	16310 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   164d2:	3401      	adds	r4, #1
   164d4:	42a5      	cmp	r5, r4
   164d6:	d8f3      	bhi.n	164c0 <z_arm_mpu_init+0x30>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   164d8:	4b10      	ldr	r3, [pc, #64]	; (1651c <z_arm_mpu_init+0x8c>)
   164da:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
   164dc:	f7ff ff92 	bl	16404 <arm_core_mpu_enable>

	/* Sanity check for number of regions in Cortex-M0+, M3, and M4. */
#if defined(CONFIG_CPU_CORTEX_M0PLUS) || \
	defined(CONFIG_CPU_CORTEX_M3) || \
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
   164e0:	4b0f      	ldr	r3, [pc, #60]	; (16520 <z_arm_mpu_init+0x90>)
   164e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   164e6:	f3c3 2307 	ubfx	r3, r3, #8, #8
   164ea:	2b08      	cmp	r3, #8
   164ec:	d101      	bne.n	164f2 <z_arm_mpu_init+0x62>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   164ee:	2000      	movs	r0, #0
}
   164f0:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT(
   164f2:	4c08      	ldr	r4, [pc, #32]	; (16514 <z_arm_mpu_init+0x84>)
   164f4:	f240 12ad 	movw	r2, #429	; 0x1ad
   164f8:	4621      	mov	r1, r4
   164fa:	4807      	ldr	r0, [pc, #28]	; (16518 <z_arm_mpu_init+0x88>)
   164fc:	f014 fdc7 	bl	2b08e <assert_print>
   16500:	f240 11ad 	movw	r1, #429	; 0x1ad
   16504:	4620      	mov	r0, r4
   16506:	f014 fdbb 	bl	2b080 <assert_post_action>
	return 0;
   1650a:	2000      	movs	r0, #0
   1650c:	e7f0      	b.n	164f0 <z_arm_mpu_init+0x60>
   1650e:	bf00      	nop
   16510:	000323a4 	.word	0x000323a4
   16514:	0003230c 	.word	0x0003230c
   16518:	000318f8 	.word	0x000318f8
   1651c:	20003769 	.word	0x20003769
   16520:	e000ed00 	.word	0xe000ed00

00016524 <malloc_prepare>:

	/*
	 * Validate that the memory space available for the newlib heap is
	 * greater than the minimum required size.
	 */
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
   16524:	4b0b      	ldr	r3, [pc, #44]	; (16554 <malloc_prepare+0x30>)
   16526:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
   1652a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   1652e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   16532:	d301      	bcc.n	16538 <malloc_prepare+0x14>
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
   16534:	2000      	movs	r0, #0
   16536:	4770      	bx	lr
{
   16538:	b510      	push	{r4, lr}
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
   1653a:	4c07      	ldr	r4, [pc, #28]	; (16558 <malloc_prepare+0x34>)
   1653c:	2281      	movs	r2, #129	; 0x81
   1653e:	4621      	mov	r1, r4
   16540:	4806      	ldr	r0, [pc, #24]	; (1655c <malloc_prepare+0x38>)
   16542:	f014 fda4 	bl	2b08e <assert_print>
   16546:	2181      	movs	r1, #129	; 0x81
   16548:	4620      	mov	r0, r4
   1654a:	f014 fd99 	bl	2b080 <assert_post_action>
}
   1654e:	2000      	movs	r0, #0
   16550:	bd10      	pop	{r4, pc}
   16552:	bf00      	nop
   16554:	20007390 	.word	0x20007390
   16558:	00032344 	.word	0x00032344
   1655c:	000318f8 	.word	0x000318f8

00016560 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   16560:	4b01      	ldr	r3, [pc, #4]	; (16568 <__stdout_hook_install+0x8>)
   16562:	6018      	str	r0, [r3, #0]
}
   16564:	4770      	bx	lr
   16566:	bf00      	nop
   16568:	20000670 	.word	0x20000670

0001656c <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   1656c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1656e:	4605      	mov	r5, r0
   16570:	460f      	mov	r7, r1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   16572:	2400      	movs	r4, #0
   16574:	e004      	b.n	16580 <z_impl_zephyr_write_stdout+0x14>
		if (*(buf + i) == '\n') {
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
   16576:	4b09      	ldr	r3, [pc, #36]	; (1659c <z_impl_zephyr_write_stdout+0x30>)
   16578:	681b      	ldr	r3, [r3, #0]
   1657a:	7830      	ldrb	r0, [r6, #0]
   1657c:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   1657e:	3401      	adds	r4, #1
   16580:	42bc      	cmp	r4, r7
   16582:	da08      	bge.n	16596 <z_impl_zephyr_write_stdout+0x2a>
		if (*(buf + i) == '\n') {
   16584:	192e      	adds	r6, r5, r4
   16586:	5d2b      	ldrb	r3, [r5, r4]
   16588:	2b0a      	cmp	r3, #10
   1658a:	d1f4      	bne.n	16576 <z_impl_zephyr_write_stdout+0xa>
			_stdout_hook('\r');
   1658c:	4b03      	ldr	r3, [pc, #12]	; (1659c <z_impl_zephyr_write_stdout+0x30>)
   1658e:	681b      	ldr	r3, [r3, #0]
   16590:	200d      	movs	r0, #13
   16592:	4798      	blx	r3
   16594:	e7ef      	b.n	16576 <z_impl_zephyr_write_stdout+0xa>
	}
	return nbytes;
}
   16596:	4638      	mov	r0, r7
   16598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1659a:	bf00      	nop
   1659c:	20000670 	.word	0x20000670

000165a0 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
   165a0:	4602      	mov	r2, r0
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
   165a2:	4b08      	ldr	r3, [pc, #32]	; (165c4 <_sbrk+0x24>)
   165a4:	6819      	ldr	r1, [r3, #0]
   165a6:	4b08      	ldr	r3, [pc, #32]	; (165c8 <_sbrk+0x28>)
   165a8:	18c8      	adds	r0, r1, r3

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   165aa:	440a      	add	r2, r1
   165ac:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
   165b0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   165b4:	429a      	cmp	r2, r3
   165b6:	d202      	bcs.n	165be <_sbrk+0x1e>
		heap_sz += count;
   165b8:	4b02      	ldr	r3, [pc, #8]	; (165c4 <_sbrk+0x24>)
   165ba:	601a      	str	r2, [r3, #0]
		ret = ptr;
   165bc:	4770      	bx	lr

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
   165be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	return ret;
}
   165c2:	4770      	bx	lr
   165c4:	20002504 	.word	0x20002504
   165c8:	20007390 	.word	0x20007390

000165cc <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
   165cc:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(lock != NULL);
   165ce:	4604      	mov	r4, r0
   165d0:	b138      	cbz	r0, 165e2 <__retarget_lock_acquire_recursive+0x16>
	return z_impl_k_mutex_lock(mutex, timeout);
   165d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   165d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   165da:	4620      	mov	r0, r4
   165dc:	f00f fdc6 	bl	2616c <z_impl_k_mutex_lock>
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
   165e0:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(lock != NULL);
   165e2:	4d06      	ldr	r5, [pc, #24]	; (165fc <__retarget_lock_acquire_recursive+0x30>)
   165e4:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
   165e8:	4629      	mov	r1, r5
   165ea:	4805      	ldr	r0, [pc, #20]	; (16600 <__retarget_lock_acquire_recursive+0x34>)
   165ec:	f014 fd4f 	bl	2b08e <assert_print>
   165f0:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
   165f4:	4628      	mov	r0, r5
   165f6:	f014 fd43 	bl	2b080 <assert_post_action>
   165fa:	e7ea      	b.n	165d2 <__retarget_lock_acquire_recursive+0x6>
   165fc:	00032344 	.word	0x00032344
   16600:	000318f8 	.word	0x000318f8

00016604 <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
   16604:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(lock != NULL);
   16606:	4604      	mov	r4, r0
   16608:	b118      	cbz	r0, 16612 <__retarget_lock_release_recursive+0xe>
	return z_impl_k_mutex_unlock(mutex);
   1660a:	4620      	mov	r0, r4
   1660c:	f00f fea4 	bl	26358 <z_impl_k_mutex_unlock>
	k_mutex_unlock((struct k_mutex *)lock);
}
   16610:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(lock != NULL);
   16612:	4d06      	ldr	r5, [pc, #24]	; (1662c <__retarget_lock_release_recursive+0x28>)
   16614:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
   16618:	4629      	mov	r1, r5
   1661a:	4805      	ldr	r0, [pc, #20]	; (16630 <__retarget_lock_release_recursive+0x2c>)
   1661c:	f014 fd37 	bl	2b08e <assert_print>
   16620:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
   16624:	4628      	mov	r0, r5
   16626:	f014 fd2b 	bl	2b080 <assert_post_action>
   1662a:	e7ee      	b.n	1660a <__retarget_lock_release_recursive+0x6>
   1662c:	00032344 	.word	0x00032344
   16630:	000318f8 	.word	0x000318f8

00016634 <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
   16634:	b508      	push	{r3, lr}
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
   16636:	221d      	movs	r2, #29
   16638:	4904      	ldr	r1, [pc, #16]	; (1664c <__chk_fail+0x18>)
   1663a:	2002      	movs	r0, #2
   1663c:	f015 fbab 	bl	2bd96 <_write>
	k_oops();
   16640:	4040      	eors	r0, r0
   16642:	f380 8811 	msr	BASEPRI, r0
   16646:	f04f 0003 	mov.w	r0, #3
   1664a:	df02      	svc	2
	CODE_UNREACHABLE;
   1664c:	00032374 	.word	0x00032374

00016650 <nordicsemi_nrf52_init>:
	__asm__ volatile(
   16650:	f04f 0340 	mov.w	r3, #64	; 0x40
   16654:	f3ef 8211 	mrs	r2, BASEPRI
   16658:	f383 8812 	msr	BASEPRI_MAX, r3
   1665c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   16660:	2301      	movs	r3, #1
   16662:	4906      	ldr	r1, [pc, #24]	; (1667c <nordicsemi_nrf52_init+0x2c>)
   16664:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   16668:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   1666c:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
   16670:	f382 8811 	msr	BASEPRI, r2
   16674:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   16678:	2000      	movs	r0, #0
   1667a:	4770      	bx	lr
   1667c:	4001e000 	.word	0x4001e000

00016680 <sys_arch_reboot>:
    *p_gpregret = val;
   16680:	b2c0      	uxtb	r0, r0
   16682:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   16686:	f8c2 051c 	str.w	r0, [r2, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   1668a:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1668e:	4905      	ldr	r1, [pc, #20]	; (166a4 <sys_arch_reboot+0x24>)
   16690:	68ca      	ldr	r2, [r1, #12]
   16692:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   16696:	4b04      	ldr	r3, [pc, #16]	; (166a8 <sys_arch_reboot+0x28>)
   16698:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1669a:	60cb      	str	r3, [r1, #12]
   1669c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   166a0:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   166a2:	e7fd      	b.n	166a0 <sys_arch_reboot+0x20>
   166a4:	e000ed00 	.word	0xe000ed00
   166a8:	05fa0004 	.word	0x05fa0004

000166ac <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   166ac:	b130      	cbz	r0, 166bc <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
   166ae:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   166b0:	0180      	lsls	r0, r0, #6
   166b2:	4b03      	ldr	r3, [pc, #12]	; (166c0 <arch_busy_wait+0x14>)
   166b4:	f043 0301 	orr.w	r3, r3, #1
   166b8:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
   166ba:	bd08      	pop	{r3, pc}
   166bc:	4770      	bx	lr
   166be:	bf00      	nop
   166c0:	00031580 	.word	0x00031580

000166c4 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   166c4:	2940      	cmp	r1, #64	; 0x40
   166c6:	bf28      	it	cs
   166c8:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
   166ca:	2300      	movs	r3, #0
   166cc:	428b      	cmp	r3, r1
   166ce:	d21c      	bcs.n	1670a <bt_hex_real+0x46>
{
   166d0:	b430      	push	{r4, r5}
		str[i * 2]     = hex[b[i] >> 4];
   166d2:	f810 c003 	ldrb.w	ip, [r0, r3]
   166d6:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
   166da:	005a      	lsls	r2, r3, #1
   166dc:	4d0d      	ldr	r5, [pc, #52]	; (16714 <bt_hex_real+0x50>)
   166de:	f815 c00c 	ldrb.w	ip, [r5, ip]
   166e2:	4c0d      	ldr	r4, [pc, #52]	; (16718 <bt_hex_real+0x54>)
   166e4:	f804 c013 	strb.w	ip, [r4, r3, lsl #1]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   166e8:	f810 c003 	ldrb.w	ip, [r0, r3]
   166ec:	f00c 0c0f 	and.w	ip, ip, #15
   166f0:	3201      	adds	r2, #1
   166f2:	f815 500c 	ldrb.w	r5, [r5, ip]
   166f6:	54a5      	strb	r5, [r4, r2]
	for (i = 0; i < len; i++) {
   166f8:	3301      	adds	r3, #1
   166fa:	428b      	cmp	r3, r1
   166fc:	d3e9      	bcc.n	166d2 <bt_hex_real+0xe>
	}

	str[i * 2] = '\0';
   166fe:	4806      	ldr	r0, [pc, #24]	; (16718 <bt_hex_real+0x54>)
   16700:	2200      	movs	r2, #0
   16702:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]

	return str;
}
   16706:	bc30      	pop	{r4, r5}
   16708:	4770      	bx	lr
	str[i * 2] = '\0';
   1670a:	4803      	ldr	r0, [pc, #12]	; (16718 <bt_hex_real+0x54>)
   1670c:	2200      	movs	r2, #0
   1670e:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]
}
   16712:	4770      	bx	lr
   16714:	000323c8 	.word	0x000323c8
   16718:	20002528 	.word	0x20002528

0001671c <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
   1671c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1671e:	b08b      	sub	sp, #44	; 0x2c
   16720:	4604      	mov	r4, r0
	switch (addr->type) {
   16722:	7803      	ldrb	r3, [r0, #0]
   16724:	2b03      	cmp	r3, #3
   16726:	d838      	bhi.n	1679a <bt_addr_le_str_real+0x7e>
   16728:	e8df f003 	tbb	[pc, r3]
   1672c:	312b2102 	.word	0x312b2102
		strcpy(type, "public");
   16730:	4b1d      	ldr	r3, [pc, #116]	; (167a8 <bt_addr_le_str_real+0x8c>)
   16732:	e893 0003 	ldmia.w	r3, {r0, r1}
   16736:	9007      	str	r0, [sp, #28]
   16738:	f8ad 1020 	strh.w	r1, [sp, #32]
   1673c:	0c09      	lsrs	r1, r1, #16
   1673e:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
   16742:	7963      	ldrb	r3, [r4, #5]
   16744:	7922      	ldrb	r2, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
   16746:	78e1      	ldrb	r1, [r4, #3]
   16748:	78a0      	ldrb	r0, [r4, #2]
   1674a:	7866      	ldrb	r6, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   1674c:	4d17      	ldr	r5, [pc, #92]	; (167ac <bt_addr_le_str_real+0x90>)
   1674e:	af07      	add	r7, sp, #28
   16750:	9705      	str	r7, [sp, #20]
   16752:	9604      	str	r6, [sp, #16]
   16754:	9003      	str	r0, [sp, #12]
   16756:	9102      	str	r1, [sp, #8]
   16758:	9201      	str	r2, [sp, #4]
   1675a:	9300      	str	r3, [sp, #0]
   1675c:	79a3      	ldrb	r3, [r4, #6]
   1675e:	4a14      	ldr	r2, [pc, #80]	; (167b0 <bt_addr_le_str_real+0x94>)
   16760:	211e      	movs	r1, #30
   16762:	4628      	mov	r0, r5
   16764:	f014 fa81 	bl	2ac6a <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   16768:	4628      	mov	r0, r5
   1676a:	b00b      	add	sp, #44	; 0x2c
   1676c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
   1676e:	4b11      	ldr	r3, [pc, #68]	; (167b4 <bt_addr_le_str_real+0x98>)
   16770:	e893 0003 	ldmia.w	r3, {r0, r1}
   16774:	9007      	str	r0, [sp, #28]
   16776:	f8ad 1020 	strh.w	r1, [sp, #32]
   1677a:	0c09      	lsrs	r1, r1, #16
   1677c:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
		break;
   16780:	e7df      	b.n	16742 <bt_addr_le_str_real+0x26>
		strcpy(type, "public-id");
   16782:	4a0d      	ldr	r2, [pc, #52]	; (167b8 <bt_addr_le_str_real+0x9c>)
   16784:	ab07      	add	r3, sp, #28
   16786:	ca07      	ldmia	r2, {r0, r1, r2}
   16788:	c303      	stmia	r3!, {r0, r1}
   1678a:	801a      	strh	r2, [r3, #0]
		break;
   1678c:	e7d9      	b.n	16742 <bt_addr_le_str_real+0x26>
		strcpy(type, "random-id");
   1678e:	4a0b      	ldr	r2, [pc, #44]	; (167bc <bt_addr_le_str_real+0xa0>)
   16790:	ab07      	add	r3, sp, #28
   16792:	ca07      	ldmia	r2, {r0, r1, r2}
   16794:	c303      	stmia	r3!, {r0, r1}
   16796:	801a      	strh	r2, [r3, #0]
		break;
   16798:	e7d3      	b.n	16742 <bt_addr_le_str_real+0x26>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   1679a:	4a09      	ldr	r2, [pc, #36]	; (167c0 <bt_addr_le_str_real+0xa4>)
   1679c:	210a      	movs	r1, #10
   1679e:	a807      	add	r0, sp, #28
   167a0:	f014 fa63 	bl	2ac6a <snprintk>
		break;
   167a4:	e7cd      	b.n	16742 <bt_addr_le_str_real+0x26>
   167a6:	bf00      	nop
   167a8:	000315b0 	.word	0x000315b0
   167ac:	20002508 	.word	0x20002508
   167b0:	000315c8 	.word	0x000315c8
   167b4:	000315b8 	.word	0x000315b8
   167b8:	00031634 	.word	0x00031634
   167bc:	00031640 	.word	0x00031640
   167c0:	000315c0 	.word	0x000315c0

000167c4 <save_id>:
}

#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
   167c4:	b508      	push	{r3, lr}
	int err;
	BT_INFO("Saving ID");
   167c6:	2149      	movs	r1, #73	; 0x49
   167c8:	4808      	ldr	r0, [pc, #32]	; (167ec <save_id+0x28>)
   167ca:	f014 fc6f 	bl	2b0ac <z_log_minimal_printk>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
   167ce:	4908      	ldr	r1, [pc, #32]	; (167f0 <save_id+0x2c>)
   167d0:	79ca      	ldrb	r2, [r1, #7]
	err = settings_save_one("bt/id", &bt_dev.id_addr,
   167d2:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   167d6:	4807      	ldr	r0, [pc, #28]	; (167f4 <save_id+0x30>)
   167d8:	f7fe f87e 	bl	148d8 <settings_save_one>
	if (err) {
   167dc:	b900      	cbnz	r0, 167e0 <save_id+0x1c>
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
	if (err) {
		BT_ERR("Failed to save IRK (err %d)", err);
	}
#endif
}
   167de:	bd08      	pop	{r3, pc}
   167e0:	4602      	mov	r2, r0
		BT_ERR("Failed to save ID (err %d)", err);
   167e2:	2145      	movs	r1, #69	; 0x45
   167e4:	4804      	ldr	r0, [pc, #16]	; (167f8 <save_id+0x34>)
   167e6:	f014 fc61 	bl	2b0ac <z_log_minimal_printk>
}
   167ea:	e7f8      	b.n	167de <save_id+0x1a>
   167ec:	000323e4 	.word	0x000323e4
   167f0:	20000350 	.word	0x20000350
   167f4:	000323f4 	.word	0x000323f4
   167f8:	000323fc 	.word	0x000323fc

000167fc <set>:
{
   167fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   167fe:	b083      	sub	sp, #12
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16800:	f3bf 8f5b 	dmb	ish
   16804:	492d      	ldr	r1, [pc, #180]	; (168bc <set+0xc0>)
   16806:	680c      	ldr	r4, [r1, #0]
   16808:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   1680c:	f014 0401 	ands.w	r4, r4, #1
   16810:	d02b      	beq.n	1686a <set+0x6e>
   16812:	4605      	mov	r5, r0
   16814:	4617      	mov	r7, r2
   16816:	461e      	mov	r6, r3
	if (!name) {
   16818:	b350      	cbz	r0, 16870 <set+0x74>
	len = settings_name_next(name, &next);
   1681a:	a901      	add	r1, sp, #4
   1681c:	f015 f82a 	bl	2b874 <settings_name_next>
   16820:	4602      	mov	r2, r0
	if (!strncmp(name, "id", len)) {
   16822:	4927      	ldr	r1, [pc, #156]	; (168c0 <set+0xc4>)
   16824:	4628      	mov	r0, r5
   16826:	f01a fb16 	bl	30e56 <strncmp>
   1682a:	4605      	mov	r5, r0
   1682c:	2800      	cmp	r0, #0
   1682e:	d142      	bne.n	168b6 <set+0xba>
   16830:	f3bf 8f5b 	dmb	ish
   16834:	4b21      	ldr	r3, [pc, #132]	; (168bc <set+0xc0>)
   16836:	681b      	ldr	r3, [r3, #0]
   16838:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1683c:	f3c3 04c0 	ubfx	r4, r3, #3, #1
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
   16840:	f013 0f08 	tst.w	r3, #8
   16844:	d11b      	bne.n	1687e <set+0x82>
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
   16846:	2207      	movs	r2, #7
   16848:	491e      	ldr	r1, [pc, #120]	; (168c4 <set+0xc8>)
   1684a:	4630      	mov	r0, r6
   1684c:	47b8      	blx	r7
		if (len < sizeof(bt_dev.id_addr[0])) {
   1684e:	2806      	cmp	r0, #6
   16850:	d821      	bhi.n	16896 <set+0x9a>
			if (len < 0) {
   16852:	2800      	cmp	r0, #0
   16854:	db19      	blt.n	1688a <set+0x8e>
				BT_ERR("Invalid length ID address in storage");
   16856:	2145      	movs	r1, #69	; 0x45
   16858:	481b      	ldr	r0, [pc, #108]	; (168c8 <set+0xcc>)
   1685a:	f014 fc27 	bl	2b0ac <z_log_minimal_printk>
			(void)memset(bt_dev.id_addr, 0,
   1685e:	4b19      	ldr	r3, [pc, #100]	; (168c4 <set+0xc8>)
   16860:	2200      	movs	r2, #0
   16862:	601a      	str	r2, [r3, #0]
   16864:	f8c3 2003 	str.w	r2, [r3, #3]
			bt_dev.id_count = 0U;
   16868:	71da      	strb	r2, [r3, #7]
}
   1686a:	4620      	mov	r0, r4
   1686c:	b003      	add	sp, #12
   1686e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BT_ERR("Insufficient number of arguments");
   16870:	2145      	movs	r1, #69	; 0x45
   16872:	4816      	ldr	r0, [pc, #88]	; (168cc <set+0xd0>)
   16874:	f014 fc1a 	bl	2b0ac <z_log_minimal_printk>
		return -ENOENT;
   16878:	f06f 0401 	mvn.w	r4, #1
   1687c:	e7f5      	b.n	1686a <set+0x6e>
			BT_WARN("Ignoring identities stored in flash");
   1687e:	2157      	movs	r1, #87	; 0x57
   16880:	4813      	ldr	r0, [pc, #76]	; (168d0 <set+0xd4>)
   16882:	f014 fc13 	bl	2b0ac <z_log_minimal_printk>
			return 0;
   16886:	462c      	mov	r4, r5
   16888:	e7ef      	b.n	1686a <set+0x6e>
				BT_ERR("Failed to read ID address from storage"
   1688a:	4602      	mov	r2, r0
   1688c:	2145      	movs	r1, #69	; 0x45
   1688e:	4811      	ldr	r0, [pc, #68]	; (168d4 <set+0xd8>)
   16890:	f014 fc0c 	bl	2b0ac <z_log_minimal_printk>
   16894:	e7e3      	b.n	1685e <set+0x62>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
   16896:	4b10      	ldr	r3, [pc, #64]	; (168d8 <set+0xdc>)
   16898:	fba3 2300 	umull	r2, r3, r3, r0
   1689c:	1ac2      	subs	r2, r0, r3
   1689e:	eb03 0252 	add.w	r2, r3, r2, lsr #1
   168a2:	f3c2 0287 	ubfx	r2, r2, #2, #8
   168a6:	4b07      	ldr	r3, [pc, #28]	; (168c4 <set+0xc8>)
   168a8:	71da      	strb	r2, [r3, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
   168aa:	4623      	mov	r3, r4
   168ac:	e000      	b.n	168b0 <set+0xb4>
   168ae:	3301      	adds	r3, #1
   168b0:	4293      	cmp	r3, r2
   168b2:	dbfc      	blt.n	168ae <set+0xb2>
   168b4:	e7d9      	b.n	1686a <set+0x6e>
	return -ENOENT;
   168b6:	f06f 0401 	mvn.w	r4, #1
   168ba:	e7d6      	b.n	1686a <set+0x6e>
   168bc:	2000041c 	.word	0x2000041c
   168c0:	00032444 	.word	0x00032444
   168c4:	20000350 	.word	0x20000350
   168c8:	000324ac 	.word	0x000324ac
   168cc:	0003241c 	.word	0x0003241c
   168d0:	00032448 	.word	0x00032448
   168d4:	00032474 	.word	0x00032474
   168d8:	24924925 	.word	0x24924925

000168dc <bt_settings_encode_key>:
{
   168dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   168e0:	b088      	sub	sp, #32
   168e2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
	if (key) {
   168e4:	b1dc      	cbz	r4, 1691e <bt_settings_encode_key+0x42>
			 addr->a.val[5], addr->a.val[4], addr->a.val[3],
   168e6:	799d      	ldrb	r5, [r3, #6]
   168e8:	795e      	ldrb	r6, [r3, #5]
   168ea:	791f      	ldrb	r7, [r3, #4]
			 addr->a.val[2], addr->a.val[1], addr->a.val[0],
   168ec:	f893 c003 	ldrb.w	ip, [r3, #3]
   168f0:	f893 e002 	ldrb.w	lr, [r3, #2]
   168f4:	f893 8001 	ldrb.w	r8, [r3, #1]
			 addr->type, key);
   168f8:	781b      	ldrb	r3, [r3, #0]
		snprintk(path, path_size,
   168fa:	9407      	str	r4, [sp, #28]
   168fc:	9306      	str	r3, [sp, #24]
   168fe:	f8cd 8014 	str.w	r8, [sp, #20]
   16902:	f8cd e010 	str.w	lr, [sp, #16]
   16906:	f8cd c00c 	str.w	ip, [sp, #12]
   1690a:	9702      	str	r7, [sp, #8]
   1690c:	9601      	str	r6, [sp, #4]
   1690e:	9500      	str	r5, [sp, #0]
   16910:	4613      	mov	r3, r2
   16912:	4a0e      	ldr	r2, [pc, #56]	; (1694c <bt_settings_encode_key+0x70>)
   16914:	f014 f9a9 	bl	2ac6a <snprintk>
}
   16918:	b008      	add	sp, #32
   1691a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			 addr->a.val[5], addr->a.val[4], addr->a.val[3],
   1691e:	799c      	ldrb	r4, [r3, #6]
   16920:	795d      	ldrb	r5, [r3, #5]
   16922:	791e      	ldrb	r6, [r3, #4]
			 addr->a.val[2], addr->a.val[1], addr->a.val[0],
   16924:	78df      	ldrb	r7, [r3, #3]
   16926:	f893 c002 	ldrb.w	ip, [r3, #2]
   1692a:	f893 e001 	ldrb.w	lr, [r3, #1]
			 addr->type);
   1692e:	781b      	ldrb	r3, [r3, #0]
		snprintk(path, path_size,
   16930:	9306      	str	r3, [sp, #24]
   16932:	f8cd e014 	str.w	lr, [sp, #20]
   16936:	f8cd c010 	str.w	ip, [sp, #16]
   1693a:	9703      	str	r7, [sp, #12]
   1693c:	9602      	str	r6, [sp, #8]
   1693e:	9501      	str	r5, [sp, #4]
   16940:	9400      	str	r4, [sp, #0]
   16942:	4613      	mov	r3, r2
   16944:	4a02      	ldr	r2, [pc, #8]	; (16950 <bt_settings_encode_key+0x74>)
   16946:	f014 f990 	bl	2ac6a <snprintk>
}
   1694a:	e7e5      	b.n	16918 <bt_settings_encode_key+0x3c>
   1694c:	000324d8 	.word	0x000324d8
   16950:	000324fc 	.word	0x000324fc

00016954 <bt_settings_save_id>:

K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
   16954:	b508      	push	{r3, lr}
	k_work_submit(&save_id_work);
   16956:	4802      	ldr	r0, [pc, #8]	; (16960 <bt_settings_save_id+0xc>)
   16958:	f010 fa84 	bl	26e64 <k_work_submit>
}
   1695c:	bd08      	pop	{r3, pc}
   1695e:	bf00      	nop
   16960:	20000674 	.word	0x20000674

00016964 <commit>:

static int commit(void)
{
   16964:	b510      	push	{r4, lr}
   16966:	f3bf 8f5b 	dmb	ish
   1696a:	4b21      	ldr	r3, [pc, #132]	; (169f0 <commit+0x8c>)
   1696c:	681c      	ldr	r4, [r3, #0]
   1696e:	f3bf 8f5b 	dmb	ish
	int err;

	BT_DBG("");

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   16972:	f014 0401 	ands.w	r4, r4, #1
   16976:	d022      	beq.n	169be <commit+0x5a>
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
		bt_set_name(CONFIG_BT_DEVICE_NAME);
	}
#endif
	if (!bt_dev.id_count) {
   16978:	3bcc      	subs	r3, #204	; 0xcc
   1697a:	79db      	ldrb	r3, [r3, #7]
   1697c:	b30b      	cbz	r3, 169c2 <commit+0x5e>
			BT_ERR("Unable to setup an identity address");
			return err;
		}
	}

	if (!bt_dev.id_count) {
   1697e:	4b1d      	ldr	r3, [pc, #116]	; (169f4 <commit+0x90>)
   16980:	79db      	ldrb	r3, [r3, #7]
   16982:	b91b      	cbnz	r3, 1698c <commit+0x28>
		err = bt_setup_random_id_addr();
   16984:	f002 f91e 	bl	18bc4 <bt_setup_random_id_addr>
		if (err) {
   16988:	4604      	mov	r4, r0
   1698a:	bb20      	cbnz	r0, 169d6 <commit+0x72>
   1698c:	f3bf 8f5b 	dmb	ish
   16990:	4b17      	ldr	r3, [pc, #92]	; (169f0 <commit+0x8c>)
   16992:	681b      	ldr	r3, [r3, #0]
   16994:	f3bf 8f5b 	dmb	ish
			BT_ERR("Unable to setup an identity address");
			return err;
		}
	}

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   16998:	f013 0f04 	tst.w	r3, #4
   1699c:	d020      	beq.n	169e0 <commit+0x7c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1699e:	4b14      	ldr	r3, [pc, #80]	; (169f0 <commit+0x8c>)
   169a0:	f3bf 8f5b 	dmb	ish
   169a4:	e853 4f00 	ldrex	r4, [r3]
   169a8:	f424 3280 	bic.w	r2, r4, #65536	; 0x10000
   169ac:	e843 2100 	strex	r1, r2, [r3]
   169b0:	2900      	cmp	r1, #0
   169b2:	d1f7      	bne.n	169a4 <commit+0x40>
   169b4:	f3bf 8f5b 	dmb	ish
	}

	/* If any part of the Identity Information of the device has been
	 * generated this Identity needs to be saved persistently.
	 */
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
   169b8:	f414 3480 	ands.w	r4, r4, #65536	; 0x10000
   169bc:	d113      	bne.n	169e6 <commit+0x82>
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
}
   169be:	4620      	mov	r0, r4
   169c0:	bd10      	pop	{r4, pc}
		err = bt_setup_public_id_addr();
   169c2:	f002 f897 	bl	18af4 <bt_setup_public_id_addr>
		if (err) {
   169c6:	4604      	mov	r4, r0
   169c8:	2800      	cmp	r0, #0
   169ca:	d0d8      	beq.n	1697e <commit+0x1a>
			BT_ERR("Unable to setup an identity address");
   169cc:	2145      	movs	r1, #69	; 0x45
   169ce:	480a      	ldr	r0, [pc, #40]	; (169f8 <commit+0x94>)
   169d0:	f014 fb6c 	bl	2b0ac <z_log_minimal_printk>
			return err;
   169d4:	e7f3      	b.n	169be <commit+0x5a>
			BT_ERR("Unable to setup an identity address");
   169d6:	2145      	movs	r1, #69	; 0x45
   169d8:	4807      	ldr	r0, [pc, #28]	; (169f8 <commit+0x94>)
   169da:	f014 fb67 	bl	2b0ac <z_log_minimal_printk>
			return err;
   169de:	e7ee      	b.n	169be <commit+0x5a>
		bt_finalize_init();
   169e0:	f001 fcfa 	bl	183d8 <bt_finalize_init>
   169e4:	e7db      	b.n	1699e <commit+0x3a>
		bt_settings_save_id();
   169e6:	f7ff ffb5 	bl	16954 <bt_settings_save_id>
	return 0;
   169ea:	2400      	movs	r4, #0
   169ec:	e7e7      	b.n	169be <commit+0x5a>
   169ee:	bf00      	nop
   169f0:	2000041c 	.word	0x2000041c
   169f4:	20000350 	.word	0x20000350
   169f8:	00032520 	.word	0x00032520

000169fc <bt_settings_init>:

SETTINGS_STATIC_HANDLER_DEFINE(bt, "bt", NULL, set, commit, NULL);

int bt_settings_init(void)
{
   169fc:	b510      	push	{r4, lr}
	int err;

	BT_DBG("");

	err = settings_subsys_init();
   169fe:	f7fe f903 	bl	14c08 <settings_subsys_init>
	if (err) {
   16a02:	4604      	mov	r4, r0
   16a04:	b908      	cbnz	r0, 16a0a <bt_settings_init+0xe>
		BT_ERR("settings_subsys_init failed (err %d)", err);
		return err;
	}

	return 0;
}
   16a06:	4620      	mov	r0, r4
   16a08:	bd10      	pop	{r4, pc}
		BT_ERR("settings_subsys_init failed (err %d)", err);
   16a0a:	4602      	mov	r2, r0
   16a0c:	2145      	movs	r1, #69	; 0x45
   16a0e:	4802      	ldr	r0, [pc, #8]	; (16a18 <bt_settings_init+0x1c>)
   16a10:	f014 fb4c 	bl	2b0ac <z_log_minimal_printk>
		return err;
   16a14:	e7f7      	b.n	16a06 <bt_settings_init+0xa>
   16a16:	bf00      	nop
   16a18:	0003254c 	.word	0x0003254c

00016a1c <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(const struct device *d)
{
   16a1c:	b570      	push	{r4, r5, r6, lr}
   16a1e:	b084      	sub	sp, #16
	ARG_UNUSED(d);

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   16a20:	ae02      	add	r6, sp, #8
   16a22:	2400      	movs	r4, #0
   16a24:	9402      	str	r4, [sp, #8]
   16a26:	9403      	str	r4, [sp, #12]
   16a28:	4b08      	ldr	r3, [pc, #32]	; (16a4c <long_wq_init+0x30>)
   16a2a:	9302      	str	r3, [sp, #8]

	k_work_queue_init(&bt_long_wq);
   16a2c:	4d08      	ldr	r5, [pc, #32]	; (16a50 <long_wq_init+0x34>)
   16a2e:	4628      	mov	r0, r5
   16a30:	f010 fa20 	bl	26e74 <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
   16a34:	9600      	str	r6, [sp, #0]
   16a36:	230a      	movs	r3, #10
   16a38:	f44f 62a3 	mov.w	r2, #1304	; 0x518
   16a3c:	4905      	ldr	r1, [pc, #20]	; (16a54 <long_wq_init+0x38>)
   16a3e:	4628      	mov	r0, r5
   16a40:	f010 fa32 	bl	26ea8 <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
   16a44:	4620      	mov	r0, r4
   16a46:	b004      	add	sp, #16
   16a48:	bd70      	pop	{r4, r5, r6, pc}
   16a4a:	bf00      	nop
   16a4c:	00032588 	.word	0x00032588
   16a50:	20001828 	.word	0x20001828
   16a54:	20003780 	.word	0x20003780

00016a58 <bt_long_wq_schedule>:
{
   16a58:	b508      	push	{r3, lr}
   16a5a:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
   16a5c:	4801      	ldr	r0, [pc, #4]	; (16a64 <bt_long_wq_schedule+0xc>)
   16a5e:	f010 fb0b 	bl	27078 <k_work_schedule_for_queue>
}
   16a62:	bd08      	pop	{r3, pc}
   16a64:	20001828 	.word	0x20001828

00016a68 <bt_long_wq_reschedule>:
{
   16a68:	b508      	push	{r3, lr}
   16a6a:	4601      	mov	r1, r0
	return k_work_reschedule_for_queue(&bt_long_wq, dwork, timeout);
   16a6c:	4801      	ldr	r0, [pc, #4]	; (16a74 <bt_long_wq_reschedule+0xc>)
   16a6e:	f010 fb67 	bl	27140 <k_work_reschedule_for_queue>
}
   16a72:	bd08      	pop	{r3, pc}
   16a74:	20001828 	.word	0x20001828

00016a78 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   16a78:	b510      	push	{r4, lr}
   16a7a:	4686      	mov	lr, r0
   16a7c:	468c      	mov	ip, r1
	switch (src->type) {
   16a7e:	7803      	ldrb	r3, [r0, #0]
   16a80:	2b01      	cmp	r3, #1
   16a82:	d018      	beq.n	16ab6 <uuid_to_uuid128+0x3e>
   16a84:	2b02      	cmp	r3, #2
   16a86:	d032      	beq.n	16aee <uuid_to_uuid128+0x76>
   16a88:	b103      	cbz	r3, 16a8c <uuid_to_uuid128+0x14>
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   16a8a:	bd10      	pop	{r4, pc}
		*dst = uuid128_base;
   16a8c:	4c22      	ldr	r4, [pc, #136]	; (16b18 <uuid_to_uuid128+0xa0>)
   16a8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   16a90:	f8cc 0000 	str.w	r0, [ip]
   16a94:	f8cc 1004 	str.w	r1, [ip, #4]
   16a98:	f8cc 2008 	str.w	r2, [ip, #8]
   16a9c:	f8cc 300c 	str.w	r3, [ip, #12]
   16aa0:	7823      	ldrb	r3, [r4, #0]
   16aa2:	f88c 3010 	strb.w	r3, [ip, #16]
		sys_put_le16(BT_UUID_16(src)->val,
   16aa6:	f8be 3002 	ldrh.w	r3, [lr, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
   16aaa:	f88c 300d 	strb.w	r3, [ip, #13]
	dst[1] = val >> 8;
   16aae:	0a1b      	lsrs	r3, r3, #8
   16ab0:	f88c 300e 	strb.w	r3, [ip, #14]
}
   16ab4:	e7e9      	b.n	16a8a <uuid_to_uuid128+0x12>
		*dst = uuid128_base;
   16ab6:	4c18      	ldr	r4, [pc, #96]	; (16b18 <uuid_to_uuid128+0xa0>)
   16ab8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   16aba:	f8cc 0000 	str.w	r0, [ip]
   16abe:	f8cc 1004 	str.w	r1, [ip, #4]
   16ac2:	f8cc 2008 	str.w	r2, [ip, #8]
   16ac6:	f8cc 300c 	str.w	r3, [ip, #12]
   16aca:	7823      	ldrb	r3, [r4, #0]
   16acc:	f88c 3010 	strb.w	r3, [ip, #16]
		sys_put_le32(BT_UUID_32(src)->val,
   16ad0:	f8de 3004 	ldr.w	r3, [lr, #4]
	dst[0] = val;
   16ad4:	f88c 300d 	strb.w	r3, [ip, #13]
	dst[1] = val >> 8;
   16ad8:	f3c3 2207 	ubfx	r2, r3, #8, #8
   16adc:	f88c 200e 	strb.w	r2, [ip, #14]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
   16ae0:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   16ae2:	f88c 200f 	strb.w	r2, [ip, #15]
	dst[1] = val >> 8;
   16ae6:	0e1b      	lsrs	r3, r3, #24
   16ae8:	f88c 3010 	strb.w	r3, [ip, #16]
}
   16aec:	e7cd      	b.n	16a8a <uuid_to_uuid128+0x12>
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   16aee:	6800      	ldr	r0, [r0, #0]
   16af0:	f8de 1004 	ldr.w	r1, [lr, #4]
   16af4:	f8de 2008 	ldr.w	r2, [lr, #8]
   16af8:	f8de 300c 	ldr.w	r3, [lr, #12]
   16afc:	f8cc 0000 	str.w	r0, [ip]
   16b00:	f8cc 1004 	str.w	r1, [ip, #4]
   16b04:	f8cc 2008 	str.w	r2, [ip, #8]
   16b08:	f8cc 300c 	str.w	r3, [ip, #12]
   16b0c:	f89e 3010 	ldrb.w	r3, [lr, #16]
   16b10:	f88c 3010 	strb.w	r3, [ip, #16]
   16b14:	e7b9      	b.n	16a8a <uuid_to_uuid128+0x12>
   16b16:	bf00      	nop
   16b18:	00032594 	.word	0x00032594

00016b1c <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   16b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16b1e:	4604      	mov	r4, r0
   16b20:	4616      	mov	r6, r2
   16b22:	461d      	mov	r5, r3
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   16b24:	2801      	cmp	r0, #1
   16b26:	d003      	beq.n	16b30 <bt_buf_get_rx+0x14>
   16b28:	2803      	cmp	r0, #3
   16b2a:	d001      	beq.n	16b30 <bt_buf_get_rx+0x14>
   16b2c:	2805      	cmp	r0, #5
   16b2e:	d10d      	bne.n	16b4c <bt_buf_get_rx+0x30>
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
   16b30:	4632      	mov	r2, r6
   16b32:	462b      	mov	r3, r5
   16b34:	480b      	ldr	r0, [pc, #44]	; (16b64 <bt_buf_get_rx+0x48>)
   16b36:	f018 fb07 	bl	2f148 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   16b3a:	4605      	mov	r5, r0
   16b3c:	b120      	cbz	r0, 16b48 <bt_buf_get_rx+0x2c>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
   16b3e:	2100      	movs	r1, #0
   16b40:	3008      	adds	r0, #8
   16b42:	f009 fadf 	bl	20104 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   16b46:	752c      	strb	r4, [r5, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   16b48:	4628      	mov	r0, r5
   16b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   16b4c:	4f06      	ldr	r7, [pc, #24]	; (16b68 <bt_buf_get_rx+0x4c>)
   16b4e:	2241      	movs	r2, #65	; 0x41
   16b50:	4639      	mov	r1, r7
   16b52:	4806      	ldr	r0, [pc, #24]	; (16b6c <bt_buf_get_rx+0x50>)
   16b54:	f014 fa9b 	bl	2b08e <assert_print>
   16b58:	2141      	movs	r1, #65	; 0x41
   16b5a:	4638      	mov	r0, r7
   16b5c:	f014 fa90 	bl	2b080 <assert_post_action>
   16b60:	e7e6      	b.n	16b30 <bt_buf_get_rx+0x14>
   16b62:	bf00      	nop
   16b64:	20000af8 	.word	0x20000af8
   16b68:	000325a8 	.word	0x000325a8
   16b6c:	000318f8 	.word	0x000318f8

00016b70 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   16b70:	b510      	push	{r4, lr}
   16b72:	4602      	mov	r2, r0
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   16b74:	4b0a      	ldr	r3, [pc, #40]	; (16ba0 <bt_buf_get_cmd_complete+0x30>)
   16b76:	f8d3 0138 	ldr.w	r0, [r3, #312]	; 0x138
   16b7a:	b158      	cbz	r0, 16b94 <bt_buf_get_cmd_complete+0x24>
		buf = net_buf_ref(bt_dev.sent_cmd);
   16b7c:	f009 fc3a 	bl	203f4 <net_buf_ref>
   16b80:	4604      	mov	r4, r0
   16b82:	2301      	movs	r3, #1
   16b84:	7503      	strb	r3, [r0, #20]

		bt_buf_set_type(buf, BT_BUF_EVT);
		buf->len = 0U;
   16b86:	2100      	movs	r1, #0
   16b88:	8181      	strh	r1, [r0, #12]
   16b8a:	3008      	adds	r0, #8
   16b8c:	f009 faba 	bl	20104 <net_buf_simple_reserve>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   16b90:	4620      	mov	r0, r4
   16b92:	bd10      	pop	{r4, pc}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   16b94:	460b      	mov	r3, r1
   16b96:	2001      	movs	r0, #1
   16b98:	f7ff ffc0 	bl	16b1c <bt_buf_get_rx>
   16b9c:	4604      	mov	r4, r0
   16b9e:	e7f7      	b.n	16b90 <bt_buf_get_cmd_complete+0x20>
   16ba0:	20000350 	.word	0x20000350

00016ba4 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   16ba4:	b510      	push	{r4, lr}
	switch (evt) {
   16ba6:	280f      	cmp	r0, #15
   16ba8:	d90d      	bls.n	16bc6 <bt_buf_get_evt+0x22>
   16baa:	2813      	cmp	r0, #19
   16bac:	d10d      	bne.n	16bca <bt_buf_get_evt+0x26>
	return net_buf_alloc_fixed(pool, timeout);
   16bae:	4814      	ldr	r0, [pc, #80]	; (16c00 <bt_buf_get_evt+0x5c>)
   16bb0:	f018 faca 	bl	2f148 <net_buf_alloc_fixed>
	case BT_HCI_EVT_NUM_COMPLETED_PACKETS:
		{
			struct net_buf *buf;

			buf = net_buf_alloc(&num_complete_pool, timeout);
			if (buf) {
   16bb4:	4604      	mov	r4, r0
   16bb6:	b198      	cbz	r0, 16be0 <bt_buf_get_evt+0x3c>
	net_buf_simple_reserve(&buf->b, reserve);
   16bb8:	2100      	movs	r1, #0
   16bba:	3008      	adds	r0, #8
   16bbc:	f009 faa2 	bl	20104 <net_buf_simple_reserve>
   16bc0:	2301      	movs	r3, #1
   16bc2:	7523      	strb	r3, [r4, #20]
}
   16bc4:	e00c      	b.n	16be0 <bt_buf_get_evt+0x3c>
	switch (evt) {
   16bc6:	280e      	cmp	r0, #14
   16bc8:	d205      	bcs.n	16bd6 <bt_buf_get_evt+0x32>
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return bt_buf_get_cmd_complete(timeout);
	default:
#if defined(CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT)
		if (discardable) {
   16bca:	b959      	cbnz	r1, 16be4 <bt_buf_get_evt+0x40>

			return buf;
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   16bcc:	2001      	movs	r0, #1
   16bce:	f7ff ffa5 	bl	16b1c <bt_buf_get_rx>
   16bd2:	4604      	mov	r4, r0
   16bd4:	e004      	b.n	16be0 <bt_buf_get_evt+0x3c>
		return bt_buf_get_cmd_complete(timeout);
   16bd6:	4610      	mov	r0, r2
   16bd8:	4619      	mov	r1, r3
   16bda:	f7ff ffc9 	bl	16b70 <bt_buf_get_cmd_complete>
   16bde:	4604      	mov	r4, r0
	}
}
   16be0:	4620      	mov	r0, r4
   16be2:	bd10      	pop	{r4, pc}
	return net_buf_alloc_fixed(pool, timeout);
   16be4:	4807      	ldr	r0, [pc, #28]	; (16c04 <bt_buf_get_evt+0x60>)
   16be6:	f018 faaf 	bl	2f148 <net_buf_alloc_fixed>
			if (buf) {
   16bea:	4604      	mov	r4, r0
   16bec:	2800      	cmp	r0, #0
   16bee:	d0f7      	beq.n	16be0 <bt_buf_get_evt+0x3c>
	net_buf_simple_reserve(&buf->b, reserve);
   16bf0:	2100      	movs	r1, #0
   16bf2:	3008      	adds	r0, #8
   16bf4:	f009 fa86 	bl	20104 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   16bf8:	2301      	movs	r3, #1
   16bfa:	7523      	strb	r3, [r4, #20]
			return buf;
   16bfc:	e7f0      	b.n	16be0 <bt_buf_get_evt+0x3c>
   16bfe:	bf00      	nop
   16c00:	20000b2c 	.word	0x20000b2c
   16c04:	20000a5c 	.word	0x20000a5c

00016c08 <conn_handle_disconnected>:
}

static uint16_t disconnected_handles[CONFIG_BT_MAX_CONN];
static void conn_handle_disconnected(uint16_t handle)
{
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   16c08:	2300      	movs	r3, #0
   16c0a:	b103      	cbz	r3, 16c0e <conn_handle_disconnected+0x6>
			 * handle 0 can be used as a valid non-zero handle.
			 */
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
		}
	}
}
   16c0c:	4770      	bx	lr
		if (!disconnected_handles[i]) {
   16c0e:	4a05      	ldr	r2, [pc, #20]	; (16c24 <conn_handle_disconnected+0x1c>)
   16c10:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
   16c14:	b922      	cbnz	r2, 16c20 <conn_handle_disconnected+0x18>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   16c16:	f440 4270 	orr.w	r2, r0, #61440	; 0xf000
   16c1a:	4902      	ldr	r1, [pc, #8]	; (16c24 <conn_handle_disconnected+0x1c>)
   16c1c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   16c20:	3301      	adds	r3, #1
   16c22:	e7f2      	b.n	16c0a <conn_handle_disconnected+0x2>
   16c24:	200025c4 	.word	0x200025c4

00016c28 <conn_handle_is_disconnected>:

static bool conn_handle_is_disconnected(uint16_t handle)
{
	handle |= ~BT_ACL_HANDLE_MASK;
   16c28:	f440 4070 	orr.w	r0, r0, #61440	; 0xf000

	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   16c2c:	2300      	movs	r3, #0
   16c2e:	b10b      	cbz	r3, 16c34 <conn_handle_is_disconnected+0xc>
			disconnected_handles[i] = 0;
			return true;
		}
	}

	return false;
   16c30:	2000      	movs	r0, #0
}
   16c32:	4770      	bx	lr
		if (disconnected_handles[i] == handle) {
   16c34:	4a06      	ldr	r2, [pc, #24]	; (16c50 <conn_handle_is_disconnected+0x28>)
   16c36:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
   16c3a:	4282      	cmp	r2, r0
   16c3c:	d001      	beq.n	16c42 <conn_handle_is_disconnected+0x1a>
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   16c3e:	3301      	adds	r3, #1
   16c40:	e7f5      	b.n	16c2e <conn_handle_is_disconnected+0x6>
			disconnected_handles[i] = 0;
   16c42:	4a03      	ldr	r2, [pc, #12]	; (16c50 <conn_handle_is_disconnected+0x28>)
   16c44:	2100      	movs	r1, #0
   16c46:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			return true;
   16c4a:	2001      	movs	r0, #1
   16c4c:	4770      	bx	lr
   16c4e:	bf00      	nop
   16c50:	200025c4 	.word	0x200025c4

00016c54 <read_local_ver_complete>:
}


static void read_local_ver_complete(struct net_buf *buf)
{
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   16c54:	6882      	ldr	r2, [r0, #8]

	BT_DBG("status 0x%02x", rp->status);

	bt_dev.hci_version = rp->hci_version;
   16c56:	7851      	ldrb	r1, [r2, #1]
   16c58:	4b08      	ldr	r3, [pc, #32]	; (16c7c <read_local_ver_complete+0x28>)
   16c5a:	f883 1068 	strb.w	r1, [r3, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   16c5e:	8851      	ldrh	r1, [r2, #2]
   16c60:	f8a3 106a 	strh.w	r1, [r3, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
   16c64:	7911      	ldrb	r1, [r2, #4]
   16c66:	f883 1069 	strb.w	r1, [r3, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   16c6a:	f8b2 1007 	ldrh.w	r1, [r2, #7]
   16c6e:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   16c72:	f8b2 2005 	ldrh.w	r2, [r2, #5]
   16c76:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
}
   16c7a:	4770      	bx	lr
   16c7c:	20000350 	.word	0x20000350

00016c80 <read_le_features_complete>:

static void read_le_features_complete(struct net_buf *buf)
{
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
   16c80:	6882      	ldr	r2, [r0, #8]

	BT_DBG("status 0x%02x", rp->status);

	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   16c82:	4b03      	ldr	r3, [pc, #12]	; (16c90 <read_le_features_complete+0x10>)
   16c84:	f8d2 0001 	ldr.w	r0, [r2, #1]
   16c88:	f8d2 1005 	ldr.w	r1, [r2, #5]
   16c8c:	c303      	stmia	r3!, {r0, r1}
}
   16c8e:	4770      	bx	lr
   16c90:	20000420 	.word	0x20000420

00016c94 <read_supported_commands_complete>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_HOST_FEATURE, buf, NULL);
}

static void read_supported_commands_complete(struct net_buf *buf)
{
   16c94:	b530      	push	{r4, r5, lr}
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
   16c96:	6884      	ldr	r4, [r0, #8]

	BT_DBG("status 0x%02x", rp->status);

	memcpy(bt_dev.supported_commands, rp->commands,
   16c98:	f104 0c01 	add.w	ip, r4, #1
   16c9c:	4d09      	ldr	r5, [pc, #36]	; (16cc4 <read_supported_commands_complete+0x30>)
   16c9e:	3441      	adds	r4, #65	; 0x41
   16ca0:	46ae      	mov	lr, r5
   16ca2:	f8dc 0000 	ldr.w	r0, [ip]
   16ca6:	f8dc 1004 	ldr.w	r1, [ip, #4]
   16caa:	f8dc 2008 	ldr.w	r2, [ip, #8]
   16cae:	f8dc 300c 	ldr.w	r3, [ip, #12]
   16cb2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   16cb6:	f10c 0c10 	add.w	ip, ip, #16
   16cba:	4675      	mov	r5, lr
   16cbc:	45a4      	cmp	ip, r4
   16cbe:	d1ef      	bne.n	16ca0 <read_supported_commands_complete+0xc>
	 * supported if TinyCrypt ECC is used for emulation.
	 */
	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		bt_hci_ecc_supported_commands(bt_dev.supported_commands);
	}
}
   16cc0:	bd30      	pop	{r4, r5, pc}
   16cc2:	bf00      	nop
   16cc4:	200003c8 	.word	0x200003c8

00016cc8 <read_local_features_complete>:

static void read_local_features_complete(struct net_buf *buf)
{
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
   16cc8:	6882      	ldr	r2, [r0, #8]

	BT_DBG("status 0x%02x", rp->status);

	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   16cca:	4b03      	ldr	r3, [pc, #12]	; (16cd8 <read_local_features_complete+0x10>)
   16ccc:	f8d2 0001 	ldr.w	r0, [r2, #1]
   16cd0:	f8d2 1005 	ldr.w	r1, [r2, #5]
   16cd4:	c303      	stmia	r3!, {r0, r1}
}
   16cd6:	4770      	bx	lr
   16cd8:	200003c0 	.word	0x200003c0

00016cdc <le_read_supp_states_complete>:

static void le_read_supp_states_complete(struct net_buf *buf)
{
	struct bt_hci_rp_le_read_supp_states *rp = (void *)buf->data;
   16cdc:	6883      	ldr	r3, [r0, #8]
 *
 *  @return 16-bit integer in host endianness.
 */
static inline uint16_t sys_get_le16(const uint8_t src[2])
{
	return ((uint16_t)src[1] << 8) | src[0];
   16cde:	7a19      	ldrb	r1, [r3, #8]
   16ce0:	79da      	ldrb	r2, [r3, #7]
   16ce2:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
   16ce6:	7998      	ldrb	r0, [r3, #6]
   16ce8:	795a      	ldrb	r2, [r3, #5]
   16cea:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 *
 *  @return 32-bit integer in host endianness.
 */
static inline uint32_t sys_get_le32(const uint8_t src[4])
{
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   16cee:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
	return ((uint16_t)src[1] << 8) | src[0];
   16cf2:	7918      	ldrb	r0, [r3, #4]
   16cf4:	78d9      	ldrb	r1, [r3, #3]
   16cf6:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
   16cfa:	7898      	ldrb	r0, [r3, #2]
   16cfc:	785b      	ldrb	r3, [r3, #1]
   16cfe:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   16d02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16

	BT_DBG("status 0x%02x", rp->status);

	bt_dev.le.states = sys_get_le64(rp->le_states);
   16d06:	4903      	ldr	r1, [pc, #12]	; (16d14 <le_read_supp_states_complete+0x38>)
   16d08:	f8c1 30d8 	str.w	r3, [r1, #216]	; 0xd8
   16d0c:	f8c1 20dc 	str.w	r2, [r1, #220]	; 0xdc
}
   16d10:	4770      	bx	lr
   16d12:	bf00      	nop
   16d14:	20000350 	.word	0x20000350

00016d18 <le_read_resolving_list_size_complete>:

#if defined(CONFIG_BT_SMP)
static void le_read_resolving_list_size_complete(struct net_buf *buf)
{
	struct bt_hci_rp_le_read_rl_size *rp = (void *)buf->data;
   16d18:	6883      	ldr	r3, [r0, #8]

	BT_DBG("Resolving List size %u", rp->rl_size);

	bt_dev.le.rl_size = rp->rl_size;
   16d1a:	785a      	ldrb	r2, [r3, #1]
   16d1c:	4b01      	ldr	r3, [pc, #4]	; (16d24 <le_read_resolving_list_size_complete+0xc>)
   16d1e:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
}
   16d22:	4770      	bx	lr
   16d24:	20000350 	.word	0x20000350

00016d28 <hci_data_buf_overflow>:
{
   16d28:	b508      	push	{r3, lr}
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
   16d2a:	6883      	ldr	r3, [r0, #8]
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   16d2c:	781a      	ldrb	r2, [r3, #0]
   16d2e:	2157      	movs	r1, #87	; 0x57
   16d30:	4801      	ldr	r0, [pc, #4]	; (16d38 <hci_data_buf_overflow+0x10>)
   16d32:	f014 f9bb 	bl	2b0ac <z_log_minimal_printk>
}
   16d36:	bd08      	pop	{r3, pc}
   16d38:	00032610 	.word	0x00032610

00016d3c <handle_event_common>:
{
   16d3c:	b510      	push	{r4, lr}
   16d3e:	4686      	mov	lr, r0
   16d40:	4608      	mov	r0, r1
	for (i = 0; i < num_handlers; i++) {
   16d42:	f04f 0c00 	mov.w	ip, #0
   16d46:	4563      	cmp	r3, ip
   16d48:	d918      	bls.n	16d7c <handle_event_common+0x40>
		const struct event_handler *handler = &handlers[i];
   16d4a:	eb02 01cc 	add.w	r1, r2, ip, lsl #3
		if (handler->event != event) {
   16d4e:	f812 403c 	ldrb.w	r4, [r2, ip, lsl #3]
   16d52:	4574      	cmp	r4, lr
   16d54:	d107      	bne.n	16d66 <handle_event_common+0x2a>
		if (buf->len < handler->min_len) {
   16d56:	8982      	ldrh	r2, [r0, #12]
   16d58:	784b      	ldrb	r3, [r1, #1]
   16d5a:	429a      	cmp	r2, r3
   16d5c:	d306      	bcc.n	16d6c <handle_event_common+0x30>
		handler->handler(buf);
   16d5e:	684b      	ldr	r3, [r1, #4]
   16d60:	4798      	blx	r3
		return 0;
   16d62:	2000      	movs	r0, #0
}
   16d64:	bd10      	pop	{r4, pc}
	for (i = 0; i < num_handlers; i++) {
   16d66:	f10c 0c01 	add.w	ip, ip, #1
   16d6a:	e7ec      	b.n	16d46 <handle_event_common+0xa>
			BT_ERR("Too small (%u bytes) event 0x%02x",
   16d6c:	4673      	mov	r3, lr
   16d6e:	2145      	movs	r1, #69	; 0x45
   16d70:	4804      	ldr	r0, [pc, #16]	; (16d84 <handle_event_common+0x48>)
   16d72:	f014 f99b 	bl	2b0ac <z_log_minimal_printk>
			return -EINVAL;
   16d76:	f06f 0015 	mvn.w	r0, #21
   16d7a:	e7f3      	b.n	16d64 <handle_event_common+0x28>
	return -EOPNOTSUPP;
   16d7c:	f06f 005e 	mvn.w	r0, #94	; 0x5e
   16d80:	e7f0      	b.n	16d64 <handle_event_common+0x28>
   16d82:	bf00      	nop
   16d84:	00032640 	.word	0x00032640

00016d88 <hci_reset_complete>:
	uint8_t status = buf->data[0];
   16d88:	6883      	ldr	r3, [r0, #8]
   16d8a:	781b      	ldrb	r3, [r3, #0]
	if (status) {
   16d8c:	b993      	cbnz	r3, 16db4 <hci_reset_complete+0x2c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16d8e:	f3bf 8f5b 	dmb	ish
   16d92:	4b09      	ldr	r3, [pc, #36]	; (16db8 <hci_reset_complete+0x30>)
   16d94:	f853 2fcc 	ldr.w	r2, [r3, #204]!
   16d98:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
   16d9c:	f002 0209 	and.w	r2, r2, #9
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   16da0:	f3bf 8f5b 	dmb	ish
   16da4:	e853 1f00 	ldrex	r1, [r3]
   16da8:	e843 2000 	strex	r0, r2, [r3]
   16dac:	2800      	cmp	r0, #0
   16dae:	d1f9      	bne.n	16da4 <hci_reset_complete+0x1c>
   16db0:	f3bf 8f5b 	dmb	ish
}
   16db4:	4770      	bx	lr
   16db6:	bf00      	nop
   16db8:	20000350 	.word	0x20000350

00016dbc <le_read_buffer_size_complete>:
{
   16dbc:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   16dbe:	6882      	ldr	r2, [r0, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   16dc0:	f8b2 3001 	ldrh.w	r3, [r2, #1]
   16dc4:	b299      	uxth	r1, r3
   16dc6:	4806      	ldr	r0, [pc, #24]	; (16de0 <le_read_buffer_size_complete+0x24>)
   16dc8:	f8a0 30fc 	strh.w	r3, [r0, #252]	; 0xfc
	if (!bt_dev.le.acl_mtu) {
   16dcc:	b901      	cbnz	r1, 16dd0 <le_read_buffer_size_complete+0x14>
}
   16dce:	bd08      	pop	{r3, pc}
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   16dd0:	78d1      	ldrb	r1, [r2, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
   16dd2:	460a      	mov	r2, r1
   16dd4:	f500 7080 	add.w	r0, r0, #256	; 0x100
   16dd8:	f019 fe1a 	bl	30a10 <z_impl_k_sem_init>
   16ddc:	e7f7      	b.n	16dce <le_read_buffer_size_complete+0x12>
   16dde:	bf00      	nop
   16de0:	20000350 	.word	0x20000350

00016de4 <read_buffer_size_complete>:
{
   16de4:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   16de6:	6882      	ldr	r2, [r0, #8]
	if (bt_dev.le.acl_mtu) {
   16de8:	4b08      	ldr	r3, [pc, #32]	; (16e0c <read_buffer_size_complete+0x28>)
   16dea:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
   16dee:	b103      	cbz	r3, 16df2 <read_buffer_size_complete+0xe>
}
   16df0:	bd08      	pop	{r3, pc}
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   16df2:	f8b2 3001 	ldrh.w	r3, [r2, #1]
   16df6:	4805      	ldr	r0, [pc, #20]	; (16e0c <read_buffer_size_complete+0x28>)
   16df8:	f8a0 30fc 	strh.w	r3, [r0, #252]	; 0xfc
	pkts = sys_le16_to_cpu(rp->acl_max_num);
   16dfc:	8891      	ldrh	r1, [r2, #4]
   16dfe:	460a      	mov	r2, r1
   16e00:	f500 7080 	add.w	r0, r0, #256	; 0x100
   16e04:	f019 fe04 	bl	30a10 <z_impl_k_sem_init>
   16e08:	e7f2      	b.n	16df0 <read_buffer_size_complete+0xc>
   16e0a:	bf00      	nop
   16e0c:	20000350 	.word	0x20000350

00016e10 <find_pending_connect>:
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   16e10:	2801      	cmp	r0, #1
   16e12:	d001      	beq.n	16e18 <find_pending_connect+0x8>
	return NULL;
   16e14:	2000      	movs	r0, #0
}
   16e16:	4770      	bx	lr
{
   16e18:	b500      	push	{lr}
   16e1a:	b083      	sub	sp, #12
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   16e1c:	2205      	movs	r2, #5
   16e1e:	4b0d      	ldr	r3, [pc, #52]	; (16e54 <find_pending_connect+0x44>)
   16e20:	f893 0067 	ldrb.w	r0, [r3, #103]	; 0x67
   16e24:	f003 f9d2 	bl	1a1cc <bt_conn_lookup_state_le>
		if (!conn) {
   16e28:	b110      	cbz	r0, 16e30 <find_pending_connect+0x20>
}
   16e2a:	b003      	add	sp, #12
   16e2c:	f85d fb04 	ldr.w	pc, [sp], #4
						       BT_ADDR_LE_NONE,
   16e30:	4b09      	ldr	r3, [pc, #36]	; (16e58 <find_pending_connect+0x48>)
   16e32:	e893 0003 	ldmia.w	r3, {r0, r1}
   16e36:	9000      	str	r0, [sp, #0]
   16e38:	f8ad 1004 	strh.w	r1, [sp, #4]
   16e3c:	0c09      	lsrs	r1, r1, #16
   16e3e:	f88d 1006 	strb.w	r1, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   16e42:	2204      	movs	r2, #4
   16e44:	4669      	mov	r1, sp
   16e46:	4b03      	ldr	r3, [pc, #12]	; (16e54 <find_pending_connect+0x44>)
   16e48:	f893 0067 	ldrb.w	r0, [r3, #103]	; 0x67
   16e4c:	f003 f9be 	bl	1a1cc <bt_conn_lookup_state_le>
		return conn;
   16e50:	e7eb      	b.n	16e2a <find_pending_connect+0x1a>
   16e52:	bf00      	nop
   16e54:	20000350 	.word	0x20000350
   16e58:	00031514 	.word	0x00031514

00016e5c <le_conn_complete_adv_timeout>:
{
   16e5c:	b510      	push	{r4, lr}
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   16e5e:	f002 f867 	bl	18f30 <bt_le_adv_lookup_legacy>
		atomic_clear_bit(adv->flags, BT_ADV_ENABLED);
   16e62:	3010      	adds	r0, #16
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16e64:	f3bf 8f5b 	dmb	ish
   16e68:	e850 3f00 	ldrex	r3, [r0]
   16e6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   16e70:	e840 3200 	strex	r2, r3, [r0]
   16e74:	2a00      	cmp	r2, #0
   16e76:	d1f7      	bne.n	16e68 <le_conn_complete_adv_timeout+0xc>
   16e78:	f3bf 8f5b 	dmb	ish
		conn = find_pending_connect(BT_HCI_ROLE_PERIPHERAL, NULL);
   16e7c:	2100      	movs	r1, #0
   16e7e:	2001      	movs	r0, #1
   16e80:	f7ff ffc6 	bl	16e10 <find_pending_connect>
		if (!conn) {
   16e84:	4604      	mov	r4, r0
   16e86:	b140      	cbz	r0, 16e9a <le_conn_complete_adv_timeout+0x3e>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   16e88:	233c      	movs	r3, #60	; 0x3c
   16e8a:	7303      	strb	r3, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   16e8c:	2100      	movs	r1, #0
   16e8e:	f002 fecd 	bl	19c2c <bt_conn_set_state>
		bt_conn_unref(conn);
   16e92:	4620      	mov	r0, r4
   16e94:	f002 fe8e 	bl	19bb4 <bt_conn_unref>
}
   16e98:	bd10      	pop	{r4, pc}
			BT_ERR("No pending peripheral connection");
   16e9a:	2145      	movs	r1, #69	; 0x45
   16e9c:	4801      	ldr	r0, [pc, #4]	; (16ea4 <le_conn_complete_adv_timeout+0x48>)
   16e9e:	f014 f905 	bl	2b0ac <z_log_minimal_printk>
			return;
   16ea2:	e7f9      	b.n	16e98 <le_conn_complete_adv_timeout+0x3c>
   16ea4:	00032668 	.word	0x00032668

00016ea8 <hci_disconn_complete>:
{
   16ea8:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   16eaa:	6884      	ldr	r4, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   16eac:	f8b4 6001 	ldrh.w	r6, [r4, #1]
	if (evt->status) {
   16eb0:	7823      	ldrb	r3, [r4, #0]
   16eb2:	b103      	cbz	r3, 16eb6 <hci_disconn_complete+0xe>
}
   16eb4:	bd70      	pop	{r4, r5, r6, pc}
	conn = bt_conn_lookup_handle(handle);
   16eb6:	4630      	mov	r0, r6
   16eb8:	f002 feae 	bl	19c18 <bt_conn_lookup_handle>
	if (!conn) {
   16ebc:	4605      	mov	r5, r0
   16ebe:	b158      	cbz	r0, 16ed8 <hci_disconn_complete+0x30>
	conn->err = evt->reason;
   16ec0:	78e3      	ldrb	r3, [r4, #3]
   16ec2:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   16ec4:	2100      	movs	r1, #0
   16ec6:	f002 feb1 	bl	19c2c <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
   16eca:	78ab      	ldrb	r3, [r5, #2]
   16ecc:	2b01      	cmp	r3, #1
   16ece:	d009      	beq.n	16ee4 <hci_disconn_complete+0x3c>
		bt_conn_unref(conn);
   16ed0:	4628      	mov	r0, r5
   16ed2:	f002 fe6f 	bl	19bb4 <bt_conn_unref>
		return;
   16ed6:	e7ed      	b.n	16eb4 <hci_disconn_complete+0xc>
		BT_ERR("Unable to look up conn with handle %u", handle);
   16ed8:	4632      	mov	r2, r6
   16eda:	2145      	movs	r1, #69	; 0x45
   16edc:	4803      	ldr	r0, [pc, #12]	; (16eec <hci_disconn_complete+0x44>)
   16ede:	f014 f8e5 	bl	2b0ac <z_log_minimal_printk>
		return;
   16ee2:	e7e7      	b.n	16eb4 <hci_disconn_complete+0xc>
	bt_conn_unref(conn);
   16ee4:	4628      	mov	r0, r5
   16ee6:	f002 fe65 	bl	19bb4 <bt_conn_unref>
   16eea:	e7e3      	b.n	16eb4 <hci_disconn_complete+0xc>
   16eec:	00032690 	.word	0x00032690

00016ef0 <le_phy_update_complete>:
{
   16ef0:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_phy_update_complete *evt = (void *)buf->data;
   16ef2:	6883      	ldr	r3, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   16ef4:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   16ef8:	4620      	mov	r0, r4
   16efa:	f002 fe8d 	bl	19c18 <bt_conn_lookup_handle>
	if (!conn) {
   16efe:	b110      	cbz	r0, 16f06 <le_phy_update_complete+0x16>
	bt_conn_unref(conn);
   16f00:	f002 fe58 	bl	19bb4 <bt_conn_unref>
}
   16f04:	bd10      	pop	{r4, pc}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   16f06:	4622      	mov	r2, r4
   16f08:	2145      	movs	r1, #69	; 0x45
   16f0a:	4802      	ldr	r0, [pc, #8]	; (16f14 <le_phy_update_complete+0x24>)
   16f0c:	f014 f8ce 	bl	2b0ac <z_log_minimal_printk>
		return;
   16f10:	e7f8      	b.n	16f04 <le_phy_update_complete+0x14>
   16f12:	bf00      	nop
   16f14:	000326bc 	.word	0x000326bc

00016f18 <le_data_len_change>:
{
   16f18:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_data_len_change *evt = (void *)buf->data;
   16f1a:	6883      	ldr	r3, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   16f1c:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   16f1e:	4620      	mov	r0, r4
   16f20:	f002 fe7a 	bl	19c18 <bt_conn_lookup_handle>
	if (!conn) {
   16f24:	b110      	cbz	r0, 16f2c <le_data_len_change+0x14>
	bt_conn_unref(conn);
   16f26:	f002 fe45 	bl	19bb4 <bt_conn_unref>
}
   16f2a:	bd10      	pop	{r4, pc}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   16f2c:	4622      	mov	r2, r4
   16f2e:	2145      	movs	r1, #69	; 0x45
   16f30:	4801      	ldr	r0, [pc, #4]	; (16f38 <le_data_len_change+0x20>)
   16f32:	f014 f8bb 	bl	2b0ac <z_log_minimal_printk>
		return;
   16f36:	e7f8      	b.n	16f2a <le_data_len_change+0x12>
   16f38:	000326bc 	.word	0x000326bc

00016f3c <le_remote_feat_complete>:
{
   16f3c:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   16f3e:	6884      	ldr	r4, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   16f40:	f8b4 5001 	ldrh.w	r5, [r4, #1]
	conn = bt_conn_lookup_handle(handle);
   16f44:	4628      	mov	r0, r5
   16f46:	f002 fe67 	bl	19c18 <bt_conn_lookup_handle>
	if (!conn) {
   16f4a:	b1d8      	cbz	r0, 16f84 <le_remote_feat_complete+0x48>
   16f4c:	4603      	mov	r3, r0
	if (!evt->status) {
   16f4e:	7822      	ldrb	r2, [r4, #0]
   16f50:	b93a      	cbnz	r2, 16f62 <le_remote_feat_complete+0x26>
   16f52:	f8d4 1003 	ldr.w	r1, [r4, #3]
   16f56:	f8d4 2007 	ldr.w	r2, [r4, #7]
   16f5a:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
   16f5e:	f8c0 20b8 	str.w	r2, [r0, #184]	; 0xb8
	atomic_set_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH);
   16f62:	1d1a      	adds	r2, r3, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16f64:	f3bf 8f5b 	dmb	ish
   16f68:	e852 1f00 	ldrex	r1, [r2]
   16f6c:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
   16f70:	e842 1000 	strex	r0, r1, [r2]
   16f74:	2800      	cmp	r0, #0
   16f76:	d1f7      	bne.n	16f68 <le_remote_feat_complete+0x2c>
   16f78:	f3bf 8f5b 	dmb	ish
	bt_conn_unref(conn);
   16f7c:	4618      	mov	r0, r3
   16f7e:	f002 fe19 	bl	19bb4 <bt_conn_unref>
}
   16f82:	bd38      	pop	{r3, r4, r5, pc}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   16f84:	462a      	mov	r2, r5
   16f86:	2145      	movs	r1, #69	; 0x45
   16f88:	4801      	ldr	r0, [pc, #4]	; (16f90 <le_remote_feat_complete+0x54>)
   16f8a:	f014 f88f 	bl	2b0ac <z_log_minimal_printk>
		return;
   16f8e:	e7f8      	b.n	16f82 <le_remote_feat_complete+0x46>
   16f90:	000326bc 	.word	0x000326bc

00016f94 <hci_num_completed_packets>:
{
   16f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   16f98:	f8d0 8008 	ldr.w	r8, [r0, #8]
	for (i = 0; i < evt->num_handles; i++) {
   16f9c:	2700      	movs	r7, #0
   16f9e:	e051      	b.n	17044 <hci_num_completed_packets+0xb0>
				conn->pending_no_cb--;
   16fa0:	3b01      	subs	r3, #1
   16fa2:	61e3      	str	r3, [r4, #28]
   16fa4:	f382 8811 	msr	BASEPRI, r2
   16fa8:	f3bf 8f6f 	isb	sy
				k_sem_give(bt_conn_get_pkts(conn));
   16fac:	4620      	mov	r0, r4
   16fae:	f002 fc0b 	bl	197c8 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   16fb2:	f00f fbbb 	bl	2672c <z_impl_k_sem_give>
				continue;
   16fb6:	e024      	b.n	17002 <hci_num_completed_packets+0x6e>
   16fb8:	f382 8811 	msr	BASEPRI, r2
   16fbc:	f3bf 8f6f 	isb	sy
			if (!node) {
   16fc0:	2b00      	cmp	r3, #0
   16fc2:	d037      	beq.n	17034 <hci_num_completed_packets+0xa0>
	__asm__ volatile(
   16fc4:	f04f 0240 	mov.w	r2, #64	; 0x40
   16fc8:	f3ef 8111 	mrs	r1, BASEPRI
   16fcc:	f382 8812 	msr	BASEPRI_MAX, r2
   16fd0:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   16fd4:	68da      	ldr	r2, [r3, #12]
   16fd6:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
   16fd8:	2200      	movs	r2, #0
   16fda:	60da      	str	r2, [r3, #12]
	parent->next = child;
   16fdc:	601a      	str	r2, [r3, #0]
	return list->tail;
   16fde:	6a62      	ldr	r2, [r4, #36]	; 0x24
Z_GENLIST_APPEND(slist, snode)
   16fe0:	2a00      	cmp	r2, #0
   16fe2:	d045      	beq.n	17070 <hci_num_completed_packets+0xdc>
	parent->next = child;
   16fe4:	6013      	str	r3, [r2, #0]
	list->tail = node;
   16fe6:	6263      	str	r3, [r4, #36]	; 0x24
	__asm__ volatile(
   16fe8:	f381 8811 	msr	BASEPRI, r1
   16fec:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   16ff0:	f104 0028 	add.w	r0, r4, #40	; 0x28
   16ff4:	f00f ff36 	bl	26e64 <k_work_submit>
			k_sem_give(bt_conn_get_pkts(conn));
   16ff8:	4620      	mov	r0, r4
   16ffa:	f002 fbe5 	bl	197c8 <bt_conn_get_pkts>
   16ffe:	f00f fb95 	bl	2672c <z_impl_k_sem_give>
{
   17002:	462e      	mov	r6, r5
		while (count--) {
   17004:	1e75      	subs	r5, r6, #1
   17006:	b2ad      	uxth	r5, r5
   17008:	b1c6      	cbz	r6, 1703c <hci_num_completed_packets+0xa8>
	__asm__ volatile(
   1700a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1700e:	f3ef 8211 	mrs	r2, BASEPRI
   17012:	f383 8812 	msr	BASEPRI_MAX, r3
   17016:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   1701a:	69e3      	ldr	r3, [r4, #28]
   1701c:	2b00      	cmp	r3, #0
   1701e:	d1bf      	bne.n	16fa0 <hci_num_completed_packets+0xc>
	return list->head;
   17020:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   17022:	2b00      	cmp	r3, #0
   17024:	d0c8      	beq.n	16fb8 <hci_num_completed_packets+0x24>
	return node->next;
   17026:	6819      	ldr	r1, [r3, #0]
	list->head = node;
   17028:	6161      	str	r1, [r4, #20]
	return list->tail;
   1702a:	69a0      	ldr	r0, [r4, #24]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1702c:	4298      	cmp	r0, r3
   1702e:	d1c3      	bne.n	16fb8 <hci_num_completed_packets+0x24>
	list->tail = node;
   17030:	61a1      	str	r1, [r4, #24]
}
   17032:	e7c1      	b.n	16fb8 <hci_num_completed_packets+0x24>
				BT_ERR("packets count mismatch");
   17034:	2145      	movs	r1, #69	; 0x45
   17036:	4811      	ldr	r0, [pc, #68]	; (1707c <hci_num_completed_packets+0xe8>)
   17038:	f014 f838 	bl	2b0ac <z_log_minimal_printk>
		bt_conn_unref(conn);
   1703c:	4620      	mov	r0, r4
   1703e:	f002 fdb9 	bl	19bb4 <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
   17042:	3701      	adds	r7, #1
   17044:	f898 3000 	ldrb.w	r3, [r8]
   17048:	429f      	cmp	r7, r3
   1704a:	da14      	bge.n	17076 <hci_num_completed_packets+0xe2>
		handle = sys_le16_to_cpu(evt->h[i].handle);
   1704c:	eb08 0387 	add.w	r3, r8, r7, lsl #2
   17050:	f8b3 5001 	ldrh.w	r5, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   17054:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   17058:	4628      	mov	r0, r5
   1705a:	f002 fddd 	bl	19c18 <bt_conn_lookup_handle>
		if (!conn) {
   1705e:	4604      	mov	r4, r0
   17060:	2800      	cmp	r0, #0
   17062:	d1cf      	bne.n	17004 <hci_num_completed_packets+0x70>
			BT_ERR("No connection for handle %u", handle);
   17064:	462a      	mov	r2, r5
   17066:	2145      	movs	r1, #69	; 0x45
   17068:	4805      	ldr	r0, [pc, #20]	; (17080 <hci_num_completed_packets+0xec>)
   1706a:	f014 f81f 	bl	2b0ac <z_log_minimal_printk>
			continue;
   1706e:	e7e8      	b.n	17042 <hci_num_completed_packets+0xae>
	list->tail = node;
   17070:	6263      	str	r3, [r4, #36]	; 0x24
	list->head = node;
   17072:	6223      	str	r3, [r4, #32]
}
   17074:	e7b8      	b.n	16fe8 <hci_num_completed_packets+0x54>
}
   17076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1707a:	bf00      	nop
   1707c:	0003270c 	.word	0x0003270c
   17080:	000326e8 	.word	0x000326e8

00017084 <hci_cmd_done>:
{
   17084:	b570      	push	{r4, r5, r6, lr}
   17086:	b082      	sub	sp, #8
   17088:	4605      	mov	r5, r0
   1708a:	460e      	mov	r6, r1
   1708c:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   1708e:	7990      	ldrb	r0, [r2, #6]
   17090:	f008 feee 	bl	1fe70 <net_buf_pool_get>
   17094:	4b47      	ldr	r3, [pc, #284]	; (171b4 <hci_cmd_done+0x130>)
   17096:	4283      	cmp	r3, r0
   17098:	d00e      	beq.n	170b8 <hci_cmd_done+0x34>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
   1709a:	79a4      	ldrb	r4, [r4, #6]
   1709c:	4620      	mov	r0, r4
   1709e:	f008 fee7 	bl	1fe70 <net_buf_pool_get>
   170a2:	4b44      	ldr	r3, [pc, #272]	; (171b4 <hci_cmd_done+0x130>)
   170a4:	9301      	str	r3, [sp, #4]
   170a6:	9000      	str	r0, [sp, #0]
   170a8:	4623      	mov	r3, r4
   170aa:	462a      	mov	r2, r5
   170ac:	2157      	movs	r1, #87	; 0x57
   170ae:	4842      	ldr	r0, [pc, #264]	; (171b8 <hci_cmd_done+0x134>)
   170b0:	f013 fffc 	bl	2b0ac <z_log_minimal_printk>
}
   170b4:	b002      	add	sp, #8
   170b6:	bd70      	pop	{r4, r5, r6, pc}
	if (cmd(buf)->opcode != opcode) {
   170b8:	4620      	mov	r0, r4
   170ba:	f018 f820 	bl	2f0fe <net_buf_id>
   170be:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   170c2:	483e      	ldr	r0, [pc, #248]	; (171bc <hci_cmd_done+0x138>)
   170c4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   170c8:	8843      	ldrh	r3, [r0, #2]
   170ca:	42ab      	cmp	r3, r5
   170cc:	d132      	bne.n	17134 <hci_cmd_done+0xb0>
	if (bt_dev.sent_cmd) {
   170ce:	4b3c      	ldr	r3, [pc, #240]	; (171c0 <hci_cmd_done+0x13c>)
   170d0:	f8d3 0138 	ldr.w	r0, [r3, #312]	; 0x138
   170d4:	b128      	cbz	r0, 170e2 <hci_cmd_done+0x5e>
		net_buf_unref(bt_dev.sent_cmd);
   170d6:	f009 f955 	bl	20384 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   170da:	4b39      	ldr	r3, [pc, #228]	; (171c0 <hci_cmd_done+0x13c>)
   170dc:	2200      	movs	r2, #0
   170de:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	if (cmd(buf)->state && !status) {
   170e2:	4620      	mov	r0, r4
   170e4:	f018 f80b 	bl	2f0fe <net_buf_id>
   170e8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   170ec:	4b33      	ldr	r3, [pc, #204]	; (171bc <hci_cmd_done+0x138>)
   170ee:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   170f2:	6843      	ldr	r3, [r0, #4]
   170f4:	b103      	cbz	r3, 170f8 <hci_cmd_done+0x74>
   170f6:	b366      	cbz	r6, 17152 <hci_cmd_done+0xce>
	if (cmd(buf)->sync) {
   170f8:	4620      	mov	r0, r4
   170fa:	f018 f800 	bl	2f0fe <net_buf_id>
   170fe:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   17102:	4b2e      	ldr	r3, [pc, #184]	; (171bc <hci_cmd_done+0x138>)
   17104:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   17108:	6883      	ldr	r3, [r0, #8]
   1710a:	2b00      	cmp	r3, #0
   1710c:	d0d2      	beq.n	170b4 <hci_cmd_done+0x30>
		cmd(buf)->status = status;
   1710e:	4620      	mov	r0, r4
   17110:	f017 fff5 	bl	2f0fe <net_buf_id>
   17114:	4d29      	ldr	r5, [pc, #164]	; (171bc <hci_cmd_done+0x138>)
   17116:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1711a:	f805 6020 	strb.w	r6, [r5, r0, lsl #2]
		k_sem_give(cmd(buf)->sync);
   1711e:	4620      	mov	r0, r4
   17120:	f017 ffed 	bl	2f0fe <net_buf_id>
   17124:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   17128:	eb05 0580 	add.w	r5, r5, r0, lsl #2
   1712c:	68a8      	ldr	r0, [r5, #8]
   1712e:	f00f fafd 	bl	2672c <z_impl_k_sem_give>
}
   17132:	e7bf      	b.n	170b4 <hci_cmd_done+0x30>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
   17134:	4620      	mov	r0, r4
   17136:	f017 ffe2 	bl	2f0fe <net_buf_id>
   1713a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1713e:	4b1f      	ldr	r3, [pc, #124]	; (171bc <hci_cmd_done+0x138>)
   17140:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   17144:	8843      	ldrh	r3, [r0, #2]
   17146:	462a      	mov	r2, r5
   17148:	2157      	movs	r1, #87	; 0x57
   1714a:	481e      	ldr	r0, [pc, #120]	; (171c4 <hci_cmd_done+0x140>)
   1714c:	f013 ffae 	bl	2b0ac <z_log_minimal_printk>
		return;
   17150:	e7b0      	b.n	170b4 <hci_cmd_done+0x30>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   17152:	4620      	mov	r0, r4
   17154:	f017 ffd3 	bl	2f0fe <net_buf_id>
   17158:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1715c:	4b17      	ldr	r3, [pc, #92]	; (171bc <hci_cmd_done+0x138>)
   1715e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   17162:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   17164:	6813      	ldr	r3, [r2, #0]
   17166:	6851      	ldr	r1, [r2, #4]
   17168:	7a10      	ldrb	r0, [r2, #8]
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   1716a:	f001 051f 	and.w	r5, r1, #31
   1716e:	2201      	movs	r2, #1
   17170:	40aa      	lsls	r2, r5

	if (val) {
   17172:	b170      	cbz	r0, 17192 <hci_cmd_done+0x10e>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   17174:	0949      	lsrs	r1, r1, #5
   17176:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   1717a:	f3bf 8f5b 	dmb	ish
   1717e:	e853 1f00 	ldrex	r1, [r3]
   17182:	4311      	orrs	r1, r2
   17184:	e843 1000 	strex	r0, r1, [r3]
   17188:	2800      	cmp	r0, #0
   1718a:	d1f8      	bne.n	1717e <hci_cmd_done+0xfa>
   1718c:	f3bf 8f5b 	dmb	ish
   17190:	e7b2      	b.n	170f8 <hci_cmd_done+0x74>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17192:	0949      	lsrs	r1, r1, #5
   17194:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   17198:	43d2      	mvns	r2, r2
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1719a:	f3bf 8f5b 	dmb	ish
   1719e:	e853 1f00 	ldrex	r1, [r3]
   171a2:	4011      	ands	r1, r2
   171a4:	e843 1000 	strex	r0, r1, [r3]
   171a8:	2800      	cmp	r0, #0
   171aa:	d1f8      	bne.n	1719e <hci_cmd_done+0x11a>
   171ac:	f3bf 8f5b 	dmb	ish
	}
}
   171b0:	e7a2      	b.n	170f8 <hci_cmd_done+0x74>
   171b2:	bf00      	nop
   171b4:	20000ac4 	.word	0x20000ac4
   171b8:	00032728 	.word	0x00032728
   171bc:	200025ac 	.word	0x200025ac
   171c0:	20000350 	.word	0x20000350
   171c4:	00032764 	.word	0x00032764

000171c8 <hci_cmd_status>:
{
   171c8:	b538      	push	{r3, r4, r5, lr}
   171ca:	4604      	mov	r4, r0
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   171cc:	2104      	movs	r1, #4
   171ce:	3008      	adds	r0, #8
   171d0:	f009 f9b0 	bl	20534 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   171d4:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   171d6:	4622      	mov	r2, r4
   171d8:	7801      	ldrb	r1, [r0, #0]
   171da:	8840      	ldrh	r0, [r0, #2]
   171dc:	f7ff ff52 	bl	17084 <hci_cmd_done>
	if (ncmd) {
   171e0:	b905      	cbnz	r5, 171e4 <hci_cmd_status+0x1c>
}
   171e2:	bd38      	pop	{r3, r4, r5, pc}
	z_impl_k_sem_give(sem);
   171e4:	4801      	ldr	r0, [pc, #4]	; (171ec <hci_cmd_status+0x24>)
   171e6:	f00f faa1 	bl	2672c <z_impl_k_sem_give>
   171ea:	e7fa      	b.n	171e2 <hci_cmd_status+0x1a>
   171ec:	20000470 	.word	0x20000470

000171f0 <hci_cmd_complete>:
{
   171f0:	b538      	push	{r3, r4, r5, lr}
   171f2:	4604      	mov	r4, r0
   171f4:	2103      	movs	r1, #3
   171f6:	3008      	adds	r0, #8
   171f8:	f009 f99c 	bl	20534 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   171fc:	7805      	ldrb	r5, [r0, #0]
	status = buf->data[0];
   171fe:	68a3      	ldr	r3, [r4, #8]
	hci_cmd_done(opcode, status, buf);
   17200:	4622      	mov	r2, r4
   17202:	7819      	ldrb	r1, [r3, #0]
   17204:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   17208:	f7ff ff3c 	bl	17084 <hci_cmd_done>
	if (ncmd) {
   1720c:	b905      	cbnz	r5, 17210 <hci_cmd_complete+0x20>
}
   1720e:	bd38      	pop	{r3, r4, r5, pc}
   17210:	4801      	ldr	r0, [pc, #4]	; (17218 <hci_cmd_complete+0x28>)
   17212:	f00f fa8b 	bl	2672c <z_impl_k_sem_give>
   17216:	e7fa      	b.n	1720e <hci_cmd_complete+0x1e>
   17218:	20000470 	.word	0x20000470

0001721c <hci_hardware_error>:
{
   1721c:	b508      	push	{r3, lr}
   1721e:	2101      	movs	r1, #1
   17220:	3008      	adds	r0, #8
   17222:	f009 f987 	bl	20534 <net_buf_simple_pull_mem>
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   17226:	7802      	ldrb	r2, [r0, #0]
   17228:	2145      	movs	r1, #69	; 0x45
   1722a:	4802      	ldr	r0, [pc, #8]	; (17234 <hci_hardware_error+0x18>)
   1722c:	f013 ff3e 	bl	2b0ac <z_log_minimal_printk>
}
   17230:	bd08      	pop	{r3, pc}
   17232:	bf00      	nop
   17234:	0003279c 	.word	0x0003279c

00017238 <handle_event>:
{
   17238:	b570      	push	{r4, r5, r6, lr}
   1723a:	b082      	sub	sp, #8
   1723c:	4605      	mov	r5, r0
   1723e:	460c      	mov	r4, r1
	err = handle_event_common(event, buf, handlers, num_handlers);
   17240:	f7ff fd7c 	bl	16d3c <handle_event_common>
	if (err == -EOPNOTSUPP) {
   17244:	f110 0f5f 	cmn.w	r0, #95	; 0x5f
   17248:	d001      	beq.n	1724e <handle_event+0x16>
}
   1724a:	b002      	add	sp, #8
   1724c:	bd70      	pop	{r4, r5, r6, pc}
		BT_WARN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   1724e:	89a6      	ldrh	r6, [r4, #12]
   17250:	4631      	mov	r1, r6
   17252:	68a0      	ldr	r0, [r4, #8]
   17254:	f7ff fa36 	bl	166c4 <bt_hex_real>
   17258:	9000      	str	r0, [sp, #0]
   1725a:	4633      	mov	r3, r6
   1725c:	462a      	mov	r2, r5
   1725e:	2157      	movs	r1, #87	; 0x57
   17260:	4801      	ldr	r0, [pc, #4]	; (17268 <handle_event+0x30>)
   17262:	f013 ff23 	bl	2b0ac <z_log_minimal_printk>
}
   17266:	e7f0      	b.n	1724a <handle_event+0x12>
   17268:	000327c4 	.word	0x000327c4

0001726c <hci_le_meta_event>:
{
   1726c:	b510      	push	{r4, lr}
   1726e:	4604      	mov	r4, r0
   17270:	2101      	movs	r1, #1
   17272:	3008      	adds	r0, #8
   17274:	f009 f95e 	bl	20534 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   17278:	230a      	movs	r3, #10
   1727a:	4a03      	ldr	r2, [pc, #12]	; (17288 <hci_le_meta_event+0x1c>)
   1727c:	4621      	mov	r1, r4
   1727e:	7800      	ldrb	r0, [r0, #0]
   17280:	f7ff ffda 	bl	17238 <handle_event>
}
   17284:	bd10      	pop	{r4, pc}
   17286:	bf00      	nop
   17288:	00032c14 	.word	0x00032c14

0001728c <rx_queue_put>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_queue_put(struct net_buf *buf)
{
   1728c:	b508      	push	{r3, lr}
   1728e:	4601      	mov	r1, r0
	net_buf_slist_put(&bt_dev.rx_queue, buf);
   17290:	4807      	ldr	r0, [pc, #28]	; (172b0 <rx_queue_put+0x24>)
   17292:	f008 ff5f 	bl	20154 <net_buf_slist_put>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
	const int err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
   17296:	4907      	ldr	r1, [pc, #28]	; (172b4 <rx_queue_put+0x28>)
   17298:	4807      	ldr	r0, [pc, #28]	; (172b8 <rx_queue_put+0x2c>)
   1729a:	f019 fc16 	bl	30aca <k_work_submit_to_queue>
#endif /* CONFIG_BT_RECV_WORKQ_SYS */
	if (err < 0) {
   1729e:	1e02      	subs	r2, r0, #0
   172a0:	db00      	blt.n	172a4 <rx_queue_put+0x18>
		BT_ERR("Could not submit rx_work: %d", err);
	}
}
   172a2:	bd08      	pop	{r3, pc}
		BT_ERR("Could not submit rx_work: %d", err);
   172a4:	2145      	movs	r1, #69	; 0x45
   172a6:	4805      	ldr	r0, [pc, #20]	; (172bc <rx_queue_put+0x30>)
   172a8:	f013 ff00 	bl	2b0ac <z_log_minimal_printk>
}
   172ac:	e7f9      	b.n	172a2 <rx_queue_put+0x16>
   172ae:	bf00      	nop
   172b0:	2000048c 	.word	0x2000048c
   172b4:	200006c0 	.word	0x200006c0
   172b8:	200018c8 	.word	0x200018c8
   172bc:	000327ec 	.word	0x000327ec

000172c0 <hci_acl>:
{
   172c0:	b570      	push	{r4, r5, r6, lr}
   172c2:	4604      	mov	r4, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   172c4:	8983      	ldrh	r3, [r0, #12]
   172c6:	2b03      	cmp	r3, #3
   172c8:	d917      	bls.n	172fa <hci_acl+0x3a>
   172ca:	2104      	movs	r1, #4
   172cc:	f104 0008 	add.w	r0, r4, #8
   172d0:	f009 f930 	bl	20534 <net_buf_simple_pull_mem>
	len = sys_le16_to_cpu(hdr->len);
   172d4:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   172d6:	8800      	ldrh	r0, [r0, #0]
	flags = bt_acl_flags(handle);
   172d8:	0b06      	lsrs	r6, r0, #12
	acl(buf)->handle = bt_acl_handle(handle);
   172da:	f3c0 000b 	ubfx	r0, r0, #0, #12
   172de:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   172e0:	22ff      	movs	r2, #255	; 0xff
   172e2:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
   172e4:	89a2      	ldrh	r2, [r4, #12]
   172e6:	429a      	cmp	r2, r3
   172e8:	d014      	beq.n	17314 <hci_acl+0x54>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   172ea:	2145      	movs	r1, #69	; 0x45
   172ec:	4816      	ldr	r0, [pc, #88]	; (17348 <hci_acl+0x88>)
   172ee:	f013 fedd 	bl	2b0ac <z_log_minimal_printk>
		net_buf_unref(buf);
   172f2:	4620      	mov	r0, r4
   172f4:	f009 f846 	bl	20384 <net_buf_unref>
}
   172f8:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   172fa:	f240 12eb 	movw	r2, #491	; 0x1eb
   172fe:	4913      	ldr	r1, [pc, #76]	; (1734c <hci_acl+0x8c>)
   17300:	4813      	ldr	r0, [pc, #76]	; (17350 <hci_acl+0x90>)
   17302:	f013 fec4 	bl	2b08e <assert_print>
   17306:	4040      	eors	r0, r0
   17308:	f380 8811 	msr	BASEPRI, r0
   1730c:	f04f 0003 	mov.w	r0, #3
   17310:	df02      	svc	2
   17312:	e7da      	b.n	172ca <hci_acl+0xa>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   17314:	f002 fc80 	bl	19c18 <bt_conn_lookup_handle>
	if (!conn) {
   17318:	4605      	mov	r5, r0
   1731a:	b158      	cbz	r0, 17334 <hci_acl+0x74>
	acl(buf)->index = bt_conn_index(conn);
   1731c:	f002 fd60 	bl	19de0 <bt_conn_index>
   17320:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   17322:	4632      	mov	r2, r6
   17324:	4621      	mov	r1, r4
   17326:	4628      	mov	r0, r5
   17328:	f015 fb15 	bl	2c956 <bt_conn_recv>
	bt_conn_unref(conn);
   1732c:	4628      	mov	r0, r5
   1732e:	f002 fc41 	bl	19bb4 <bt_conn_unref>
   17332:	e7e1      	b.n	172f8 <hci_acl+0x38>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   17334:	8ae2      	ldrh	r2, [r4, #22]
   17336:	2145      	movs	r1, #69	; 0x45
   17338:	4806      	ldr	r0, [pc, #24]	; (17354 <hci_acl+0x94>)
   1733a:	f013 feb7 	bl	2b0ac <z_log_minimal_printk>
		net_buf_unref(buf);
   1733e:	4620      	mov	r0, r4
   17340:	f009 f820 	bl	20384 <net_buf_unref>
		return;
   17344:	e7d8      	b.n	172f8 <hci_acl+0x38>
   17346:	bf00      	nop
   17348:	00032844 	.word	0x00032844
   1734c:	00032810 	.word	0x00032810
   17350:	000318f8 	.word	0x000318f8
   17354:	00032870 	.word	0x00032870

00017358 <le_conn_update_complete>:
{
   17358:	b570      	push	{r4, r5, r6, lr}
   1735a:	b082      	sub	sp, #8
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   1735c:	6884      	ldr	r4, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   1735e:	f8b4 6001 	ldrh.w	r6, [r4, #1]
	conn = bt_conn_lookup_handle(handle);
   17362:	4630      	mov	r0, r6
   17364:	f002 fc58 	bl	19c18 <bt_conn_lookup_handle>
	if (!conn) {
   17368:	b148      	cbz	r0, 1737e <le_conn_update_complete+0x26>
   1736a:	4605      	mov	r5, r0
	if (!evt->status) {
   1736c:	7823      	ldrb	r3, [r4, #0]
   1736e:	b163      	cbz	r3, 1738a <le_conn_update_complete+0x32>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   17370:	2b1a      	cmp	r3, #26
   17372:	d019      	beq.n	173a8 <le_conn_update_complete+0x50>
	bt_conn_unref(conn);
   17374:	4628      	mov	r0, r5
   17376:	f002 fc1d 	bl	19bb4 <bt_conn_unref>
}
   1737a:	b002      	add	sp, #8
   1737c:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   1737e:	4632      	mov	r2, r6
   17380:	2145      	movs	r1, #69	; 0x45
   17382:	481d      	ldr	r0, [pc, #116]	; (173f8 <le_conn_update_complete+0xa0>)
   17384:	f013 fe92 	bl	2b0ac <z_log_minimal_printk>
		return;
   17388:	e7f7      	b.n	1737a <le_conn_update_complete+0x22>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   1738a:	f8b4 3003 	ldrh.w	r3, [r4, #3]
   1738e:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   17392:	f8b4 3005 	ldrh.w	r3, [r4, #5]
   17396:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   1739a:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   1739e:	f8a0 30ae 	strh.w	r3, [r0, #174]	; 0xae
		notify_le_param_updated(conn);
   173a2:	f002 fd73 	bl	19e8c <notify_le_param_updated>
   173a6:	e7e5      	b.n	17374 <le_conn_update_complete+0x1c>
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   173a8:	78c3      	ldrb	r3, [r0, #3]
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   173aa:	2b01      	cmp	r3, #1
   173ac:	d1e2      	bne.n	17374 <le_conn_update_complete+0x1c>
		   !atomic_test_and_set_bit(conn->flags,
   173ae:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   173b0:	f3bf 8f5b 	dmb	ish
   173b4:	e853 2f00 	ldrex	r2, [r3]
   173b8:	f442 7100 	orr.w	r1, r2, #512	; 0x200
   173bc:	e843 1000 	strex	r0, r1, [r3]
   173c0:	2800      	cmp	r0, #0
   173c2:	d1f7      	bne.n	173b4 <le_conn_update_complete+0x5c>
   173c4:	f3bf 8f5b 	dmb	ish
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   173c8:	f412 7f00 	tst.w	r2, #512	; 0x200
   173cc:	d1d2      	bne.n	17374 <le_conn_update_complete+0x1c>
		param.interval_min = conn->le.interval_min;
   173ce:	f8b5 30a8 	ldrh.w	r3, [r5, #168]	; 0xa8
   173d2:	f8ad 3000 	strh.w	r3, [sp]
		param.interval_max = conn->le.interval_max;
   173d6:	f8b5 30aa 	ldrh.w	r3, [r5, #170]	; 0xaa
   173da:	f8ad 3002 	strh.w	r3, [sp, #2]
		param.latency = conn->le.pending_latency;
   173de:	f8b5 30b0 	ldrh.w	r3, [r5, #176]	; 0xb0
   173e2:	f8ad 3004 	strh.w	r3, [sp, #4]
		param.timeout = conn->le.pending_timeout;
   173e6:	f8b5 30b2 	ldrh.w	r3, [r5, #178]	; 0xb2
   173ea:	f8ad 3006 	strh.w	r3, [sp, #6]
		bt_l2cap_update_conn_param(conn, &param);
   173ee:	4669      	mov	r1, sp
   173f0:	4628      	mov	r0, r5
   173f2:	f015 fcc3 	bl	2cd7c <bt_l2cap_update_conn_param>
   173f6:	e7bd      	b.n	17374 <le_conn_update_complete+0x1c>
   173f8:	000326bc 	.word	0x000326bc

000173fc <hci_event>:
{
   173fc:	b538      	push	{r3, r4, r5, lr}
   173fe:	4604      	mov	r4, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   17400:	8983      	ldrh	r3, [r0, #12]
   17402:	2b01      	cmp	r3, #1
   17404:	d916      	bls.n	17434 <hci_event+0x38>
   17406:	2102      	movs	r1, #2
   17408:	f104 0008 	add.w	r0, r4, #8
   1740c:	f009 f892 	bl	20534 <net_buf_simple_pull_mem>
   17410:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   17412:	7803      	ldrb	r3, [r0, #0]
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   17414:	3b05      	subs	r3, #5
   17416:	2b15      	cmp	r3, #21
   17418:	d81b      	bhi.n	17452 <hci_event+0x56>
   1741a:	e8df f003 	tbb	[pc, r3]
   1741e:	1a18      	.short	0x1a18
   17420:	1a1a1a1a 	.word	0x1a1a1a1a
   17424:	281a1a1a 	.word	0x281a1a1a
   17428:	1a1a1a28 	.word	0x1a1a1a28
   1742c:	1a1a1a28 	.word	0x1a1a1a28
   17430:	281a1a1a 	.word	0x281a1a1a
	BT_ASSERT(buf->len >= sizeof(*hdr));
   17434:	f640 1259 	movw	r2, #2393	; 0x959
   17438:	4914      	ldr	r1, [pc, #80]	; (1748c <hci_event+0x90>)
   1743a:	4815      	ldr	r0, [pc, #84]	; (17490 <hci_event+0x94>)
   1743c:	f013 fe27 	bl	2b08e <assert_print>
   17440:	4040      	eors	r0, r0
   17442:	f380 8811 	msr	BASEPRI, r0
   17446:	f04f 0003 	mov.w	r0, #3
   1744a:	df02      	svc	2
   1744c:	e7db      	b.n	17406 <hci_event+0xa>
   1744e:	2303      	movs	r3, #3
   17450:	e000      	b.n	17454 <hci_event+0x58>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   17452:	2302      	movs	r3, #2
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   17454:	f013 0f02 	tst.w	r3, #2
   17458:	d00b      	beq.n	17472 <hci_event+0x76>
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   1745a:	2306      	movs	r3, #6
   1745c:	4a0d      	ldr	r2, [pc, #52]	; (17494 <hci_event+0x98>)
   1745e:	4621      	mov	r1, r4
   17460:	7828      	ldrb	r0, [r5, #0]
   17462:	f7ff fee9 	bl	17238 <handle_event>
	net_buf_unref(buf);
   17466:	4620      	mov	r0, r4
   17468:	f008 ff8c 	bl	20384 <net_buf_unref>
}
   1746c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_EVT_FLAG_RECV_PRIO;
   1746e:	2301      	movs	r3, #1
   17470:	e7f0      	b.n	17454 <hci_event+0x58>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   17472:	f640 125d 	movw	r2, #2397	; 0x95d
   17476:	4905      	ldr	r1, [pc, #20]	; (1748c <hci_event+0x90>)
   17478:	4805      	ldr	r0, [pc, #20]	; (17490 <hci_event+0x94>)
   1747a:	f013 fe08 	bl	2b08e <assert_print>
   1747e:	4040      	eors	r0, r0
   17480:	f380 8811 	msr	BASEPRI, r0
   17484:	f04f 0003 	mov.w	r0, #3
   17488:	df02      	svc	2
   1748a:	e7e6      	b.n	1745a <hci_event+0x5e>
   1748c:	00032810 	.word	0x00032810
   17490:	000318f8 	.word	0x000318f8
   17494:	00032c74 	.word	0x00032c74

00017498 <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
   17498:	b510      	push	{r4, lr}
	int err;

	struct net_buf *buf;

	BT_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   1749a:	4813      	ldr	r0, [pc, #76]	; (174e8 <rx_work_handler+0x50>)
   1749c:	f008 fec6 	bl	2022c <net_buf_slist_get>
	if (!buf) {
   174a0:	b188      	cbz	r0, 174c6 <rx_work_handler+0x2e>
   174a2:	4604      	mov	r4, r0
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   174a4:	7d02      	ldrb	r2, [r0, #20]
	}

	BT_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf),
	       buf->len);

	switch (bt_buf_get_type(buf)) {
   174a6:	2a01      	cmp	r2, #1
   174a8:	d00e      	beq.n	174c8 <rx_work_handler+0x30>
   174aa:	2a03      	cmp	r2, #3
   174ac:	d10f      	bne.n	174ce <rx_work_handler+0x36>
#if defined(CONFIG_BT_CONN)
	case BT_BUF_ACL_IN:
		hci_acl(buf);
   174ae:	f7ff ff07 	bl	172c0 <hci_acl>
	return list->head;
   174b2:	4b0e      	ldr	r3, [pc, #56]	; (174ec <rx_work_handler+0x54>)
   174b4:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
   174b8:	b12b      	cbz	r3, 174c6 <rx_work_handler+0x2e>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
   174ba:	490d      	ldr	r1, [pc, #52]	; (174f0 <rx_work_handler+0x58>)
   174bc:	480d      	ldr	r0, [pc, #52]	; (174f4 <rx_work_handler+0x5c>)
   174be:	f019 fb04 	bl	30aca <k_work_submit_to_queue>
#endif
		if (err < 0) {
   174c2:	1e02      	subs	r2, r0, #0
   174c4:	db0b      	blt.n	174de <rx_work_handler+0x46>
			BT_ERR("Could not submit rx_work: %d", err);
		}
	}
}
   174c6:	bd10      	pop	{r4, pc}
		hci_event(buf);
   174c8:	f7ff ff98 	bl	173fc <hci_event>
		break;
   174cc:	e7f1      	b.n	174b2 <rx_work_handler+0x1a>
		BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   174ce:	2145      	movs	r1, #69	; 0x45
   174d0:	4809      	ldr	r0, [pc, #36]	; (174f8 <rx_work_handler+0x60>)
   174d2:	f013 fdeb 	bl	2b0ac <z_log_minimal_printk>
		net_buf_unref(buf);
   174d6:	4620      	mov	r0, r4
   174d8:	f008 ff54 	bl	20384 <net_buf_unref>
		break;
   174dc:	e7e9      	b.n	174b2 <rx_work_handler+0x1a>
			BT_ERR("Could not submit rx_work: %d", err);
   174de:	2145      	movs	r1, #69	; 0x45
   174e0:	4806      	ldr	r0, [pc, #24]	; (174fc <rx_work_handler+0x64>)
   174e2:	f013 fde3 	bl	2b0ac <z_log_minimal_printk>
   174e6:	e7ee      	b.n	174c6 <rx_work_handler+0x2e>
   174e8:	2000048c 	.word	0x2000048c
   174ec:	20000350 	.word	0x20000350
   174f0:	200006c0 	.word	0x200006c0
   174f4:	200018c8 	.word	0x200018c8
   174f8:	00032898 	.word	0x00032898
   174fc:	000327ec 	.word	0x000327ec

00017500 <bt_hci_cmd_state_set_init>:
{
   17500:	b510      	push	{r4, lr}
   17502:	460c      	mov	r4, r1
	state->target = target;
   17504:	600a      	str	r2, [r1, #0]
	state->bit = bit;
   17506:	604b      	str	r3, [r1, #4]
	state->val = val;
   17508:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1750c:	720b      	strb	r3, [r1, #8]
	cmd(buf)->state = state;
   1750e:	f017 fdf6 	bl	2f0fe <net_buf_id>
   17512:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   17516:	4b02      	ldr	r3, [pc, #8]	; (17520 <bt_hci_cmd_state_set_init+0x20>)
   17518:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1751c:	6044      	str	r4, [r0, #4]
}
   1751e:	bd10      	pop	{r4, pc}
   17520:	200025ac 	.word	0x200025ac

00017524 <bt_hci_cmd_create>:
{
   17524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   17528:	4606      	mov	r6, r0
   1752a:	460f      	mov	r7, r1
	return net_buf_alloc_fixed(pool, timeout);
   1752c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   17530:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17534:	481e      	ldr	r0, [pc, #120]	; (175b0 <bt_hci_cmd_create+0x8c>)
   17536:	f017 fe07 	bl	2f148 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
   1753a:	4604      	mov	r4, r0
   1753c:	b368      	cbz	r0, 1759a <bt_hci_cmd_create+0x76>
	net_buf_simple_reserve(&buf->b, reserve);
   1753e:	f104 0908 	add.w	r9, r4, #8
   17542:	2100      	movs	r1, #0
   17544:	4648      	mov	r0, r9
   17546:	f008 fddd 	bl	20104 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1754a:	f04f 0800 	mov.w	r8, #0
   1754e:	f884 8014 	strb.w	r8, [r4, #20]
	cmd(buf)->opcode = opcode;
   17552:	4620      	mov	r0, r4
   17554:	f017 fdd3 	bl	2f0fe <net_buf_id>
   17558:	4d16      	ldr	r5, [pc, #88]	; (175b4 <bt_hci_cmd_create+0x90>)
   1755a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1755e:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   17562:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   17564:	4620      	mov	r0, r4
   17566:	f017 fdca 	bl	2f0fe <net_buf_id>
   1756a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1756e:	eb05 0380 	add.w	r3, r5, r0, lsl #2
   17572:	f8c3 8008 	str.w	r8, [r3, #8]
	cmd(buf)->state = NULL;
   17576:	4620      	mov	r0, r4
   17578:	f017 fdc1 	bl	2f0fe <net_buf_id>
   1757c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   17580:	eb05 0580 	add.w	r5, r5, r0, lsl #2
   17584:	f8c5 8004 	str.w	r8, [r5, #4]
	return net_buf_simple_add(&buf->b, len);
   17588:	2103      	movs	r1, #3
   1758a:	4648      	mov	r0, r9
   1758c:	f009 f812 	bl	205b4 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
   17590:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
   17592:	7087      	strb	r7, [r0, #2]
}
   17594:	4620      	mov	r0, r4
   17596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__ASSERT_NO_MSG(buf);
   1759a:	4d07      	ldr	r5, [pc, #28]	; (175b8 <bt_hci_cmd_create+0x94>)
   1759c:	22ff      	movs	r2, #255	; 0xff
   1759e:	4629      	mov	r1, r5
   175a0:	4806      	ldr	r0, [pc, #24]	; (175bc <bt_hci_cmd_create+0x98>)
   175a2:	f013 fd74 	bl	2b08e <assert_print>
   175a6:	21ff      	movs	r1, #255	; 0xff
   175a8:	4628      	mov	r0, r5
   175aa:	f013 fd69 	bl	2b080 <assert_post_action>
   175ae:	e7c6      	b.n	1753e <bt_hci_cmd_create+0x1a>
   175b0:	20000ac4 	.word	0x20000ac4
   175b4:	200025ac 	.word	0x200025ac
   175b8:	00032810 	.word	0x00032810
   175bc:	000318f8 	.word	0x000318f8

000175c0 <bt_hci_cmd_send_sync>:
{
   175c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   175c2:	b087      	sub	sp, #28
   175c4:	4606      	mov	r6, r0
   175c6:	4615      	mov	r5, r2
	if (!buf) {
   175c8:	460c      	mov	r4, r1
   175ca:	b351      	cbz	r1, 17622 <bt_hci_cmd_send_sync+0x62>
	return z_impl_k_sem_init(sem, initial_count, limit);
   175cc:	2201      	movs	r2, #1
   175ce:	2100      	movs	r1, #0
   175d0:	4668      	mov	r0, sp
   175d2:	f019 fa1d 	bl	30a10 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   175d6:	4620      	mov	r0, r4
   175d8:	f017 fd91 	bl	2f0fe <net_buf_id>
   175dc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   175e0:	4b25      	ldr	r3, [pc, #148]	; (17678 <bt_hci_cmd_send_sync+0xb8>)
   175e2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   175e6:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   175ea:	4620      	mov	r0, r4
   175ec:	f008 ff02 	bl	203f4 <net_buf_ref>
   175f0:	4601      	mov	r1, r0
   175f2:	4822      	ldr	r0, [pc, #136]	; (1767c <bt_hci_cmd_send_sync+0xbc>)
   175f4:	f008 fe94 	bl	20320 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   175f8:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   175fc:	2300      	movs	r3, #0
   175fe:	4668      	mov	r0, sp
   17600:	f00f f8d2 	bl	267a8 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   17604:	b9a8      	cbnz	r0, 17632 <bt_hci_cmd_send_sync+0x72>
	status = cmd(buf)->status;
   17606:	4620      	mov	r0, r4
   17608:	f017 fd79 	bl	2f0fe <net_buf_id>
   1760c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   17610:	4b19      	ldr	r3, [pc, #100]	; (17678 <bt_hci_cmd_send_sync+0xb8>)
   17612:	f813 7020 	ldrb.w	r7, [r3, r0, lsl #2]
	if (status) {
   17616:	b9cf      	cbnz	r7, 1764c <bt_hci_cmd_send_sync+0x8c>
	if (rsp) {
   17618:	b34d      	cbz	r5, 1766e <bt_hci_cmd_send_sync+0xae>
		*rsp = buf;
   1761a:	602c      	str	r4, [r5, #0]
	return 0;
   1761c:	2000      	movs	r0, #0
}
   1761e:	b007      	add	sp, #28
   17620:	bdf0      	pop	{r4, r5, r6, r7, pc}
		buf = bt_hci_cmd_create(opcode, 0);
   17622:	f7ff ff7f 	bl	17524 <bt_hci_cmd_create>
		if (!buf) {
   17626:	4604      	mov	r4, r0
   17628:	2800      	cmp	r0, #0
   1762a:	d1cf      	bne.n	175cc <bt_hci_cmd_send_sync+0xc>
			return -ENOBUFS;
   1762c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   17630:	e7f5      	b.n	1761e <bt_hci_cmd_send_sync+0x5e>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   17632:	f240 1247 	movw	r2, #327	; 0x147
   17636:	4912      	ldr	r1, [pc, #72]	; (17680 <bt_hci_cmd_send_sync+0xc0>)
   17638:	4812      	ldr	r0, [pc, #72]	; (17684 <bt_hci_cmd_send_sync+0xc4>)
   1763a:	f013 fd28 	bl	2b08e <assert_print>
   1763e:	4040      	eors	r0, r0
   17640:	f380 8811 	msr	BASEPRI, r0
   17644:	f04f 0003 	mov.w	r0, #3
   17648:	df02      	svc	2
   1764a:	e7dc      	b.n	17606 <bt_hci_cmd_send_sync+0x46>
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
   1764c:	463b      	mov	r3, r7
   1764e:	4632      	mov	r2, r6
   17650:	2157      	movs	r1, #87	; 0x57
   17652:	480d      	ldr	r0, [pc, #52]	; (17688 <bt_hci_cmd_send_sync+0xc8>)
   17654:	f013 fd2a 	bl	2b0ac <z_log_minimal_printk>
		net_buf_unref(buf);
   17658:	4620      	mov	r0, r4
   1765a:	f008 fe93 	bl	20384 <net_buf_unref>
		switch (status) {
   1765e:	2f09      	cmp	r7, #9
   17660:	d002      	beq.n	17668 <bt_hci_cmd_send_sync+0xa8>
			return -EIO;
   17662:	f06f 0004 	mvn.w	r0, #4
   17666:	e7da      	b.n	1761e <bt_hci_cmd_send_sync+0x5e>
			return -ECONNREFUSED;
   17668:	f06f 006e 	mvn.w	r0, #110	; 0x6e
   1766c:	e7d7      	b.n	1761e <bt_hci_cmd_send_sync+0x5e>
		net_buf_unref(buf);
   1766e:	4620      	mov	r0, r4
   17670:	f008 fe88 	bl	20384 <net_buf_unref>
	return 0;
   17674:	2000      	movs	r0, #0
   17676:	e7d2      	b.n	1761e <bt_hci_cmd_send_sync+0x5e>
   17678:	200025ac 	.word	0x200025ac
   1767c:	20000494 	.word	0x20000494
   17680:	00032810 	.word	0x00032810
   17684:	000318f8 	.word	0x000318f8
   17688:	000328b4 	.word	0x000328b4

0001768c <common_init>:
{
   1768c:	b510      	push	{r4, lr}
   1768e:	b082      	sub	sp, #8
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   17690:	4b22      	ldr	r3, [pc, #136]	; (1771c <common_init+0x90>)
   17692:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
   17696:	689b      	ldr	r3, [r3, #8]
   17698:	f013 0f01 	tst.w	r3, #1
   1769c:	d10d      	bne.n	176ba <common_init+0x2e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   1769e:	aa01      	add	r2, sp, #4
   176a0:	2100      	movs	r1, #0
   176a2:	f640 4003 	movw	r0, #3075	; 0xc03
   176a6:	f7ff ff8b 	bl	175c0 <bt_hci_cmd_send_sync>
		if (err) {
   176aa:	4604      	mov	r4, r0
   176ac:	b968      	cbnz	r0, 176ca <common_init+0x3e>
		hci_reset_complete(rsp);
   176ae:	9801      	ldr	r0, [sp, #4]
   176b0:	f7ff fb6a 	bl	16d88 <hci_reset_complete>
		net_buf_unref(rsp);
   176b4:	9801      	ldr	r0, [sp, #4]
   176b6:	f008 fe65 	bl	20384 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   176ba:	aa01      	add	r2, sp, #4
   176bc:	2100      	movs	r1, #0
   176be:	f241 0003 	movw	r0, #4099	; 0x1003
   176c2:	f7ff ff7d 	bl	175c0 <bt_hci_cmd_send_sync>
	if (err) {
   176c6:	4604      	mov	r4, r0
   176c8:	b110      	cbz	r0, 176d0 <common_init+0x44>
}
   176ca:	4620      	mov	r0, r4
   176cc:	b002      	add	sp, #8
   176ce:	bd10      	pop	{r4, pc}
	read_local_features_complete(rsp);
   176d0:	9801      	ldr	r0, [sp, #4]
   176d2:	f7ff faf9 	bl	16cc8 <read_local_features_complete>
	net_buf_unref(rsp);
   176d6:	9801      	ldr	r0, [sp, #4]
   176d8:	f008 fe54 	bl	20384 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   176dc:	aa01      	add	r2, sp, #4
   176de:	2100      	movs	r1, #0
   176e0:	f241 0001 	movw	r0, #4097	; 0x1001
   176e4:	f7ff ff6c 	bl	175c0 <bt_hci_cmd_send_sync>
	if (err) {
   176e8:	4604      	mov	r4, r0
   176ea:	2800      	cmp	r0, #0
   176ec:	d1ed      	bne.n	176ca <common_init+0x3e>
	read_local_ver_complete(rsp);
   176ee:	9801      	ldr	r0, [sp, #4]
   176f0:	f7ff fab0 	bl	16c54 <read_local_ver_complete>
	net_buf_unref(rsp);
   176f4:	9801      	ldr	r0, [sp, #4]
   176f6:	f008 fe45 	bl	20384 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   176fa:	aa01      	add	r2, sp, #4
   176fc:	2100      	movs	r1, #0
   176fe:	f241 0002 	movw	r0, #4098	; 0x1002
   17702:	f7ff ff5d 	bl	175c0 <bt_hci_cmd_send_sync>
	if (err) {
   17706:	4604      	mov	r4, r0
   17708:	2800      	cmp	r0, #0
   1770a:	d1de      	bne.n	176ca <common_init+0x3e>
	read_supported_commands_complete(rsp);
   1770c:	9801      	ldr	r0, [sp, #4]
   1770e:	f7ff fac1 	bl	16c94 <read_supported_commands_complete>
	net_buf_unref(rsp);
   17712:	9801      	ldr	r0, [sp, #4]
   17714:	f008 fe36 	bl	20384 <net_buf_unref>
	return 0;
   17718:	e7d7      	b.n	176ca <common_init+0x3e>
   1771a:	bf00      	nop
   1771c:	20000350 	.word	0x20000350

00017720 <hci_le_read_max_data_len>:
{
   17720:	b570      	push	{r4, r5, r6, lr}
   17722:	b082      	sub	sp, #8
   17724:	4605      	mov	r5, r0
   17726:	460c      	mov	r4, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   17728:	aa01      	add	r2, sp, #4
   1772a:	2100      	movs	r1, #0
   1772c:	f242 002f 	movw	r0, #8239	; 0x202f
   17730:	f7ff ff46 	bl	175c0 <bt_hci_cmd_send_sync>
	if (err) {
   17734:	4606      	mov	r6, r0
   17736:	b960      	cbnz	r0, 17752 <hci_le_read_max_data_len+0x32>
	rp = (void *)rsp->data;
   17738:	9801      	ldr	r0, [sp, #4]
   1773a:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   1773c:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   17740:	802a      	strh	r2, [r5, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   17742:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   17746:	8023      	strh	r3, [r4, #0]
	net_buf_unref(rsp);
   17748:	f008 fe1c 	bl	20384 <net_buf_unref>
}
   1774c:	4630      	mov	r0, r6
   1774e:	b002      	add	sp, #8
   17750:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Failed to read DLE max data len");
   17752:	2145      	movs	r1, #69	; 0x45
   17754:	4801      	ldr	r0, [pc, #4]	; (1775c <hci_le_read_max_data_len+0x3c>)
   17756:	f013 fca9 	bl	2b0ac <z_log_minimal_printk>
		return err;
   1775a:	e7f7      	b.n	1774c <hci_le_read_max_data_len+0x2c>
   1775c:	000328d8 	.word	0x000328d8

00017760 <le_set_event_mask>:
{
   17760:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   17762:	2108      	movs	r1, #8
   17764:	f242 0001 	movw	r0, #8193	; 0x2001
   17768:	f7ff fedc 	bl	17524 <bt_hci_cmd_create>
	if (!buf) {
   1776c:	2800      	cmp	r0, #0
   1776e:	d04e      	beq.n	1780e <le_set_event_mask+0xae>
   17770:	4604      	mov	r4, r0
   17772:	2108      	movs	r1, #8
   17774:	4408      	add	r0, r1
   17776:	f008 ff1d 	bl	205b4 <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
   1777a:	4b26      	ldr	r3, [pc, #152]	; (17814 <le_set_event_mask+0xb4>)
   1777c:	f893 10d0 	ldrb.w	r1, [r3, #208]	; 0xd0
		if ((IS_ENABLED(CONFIG_BT_SMP) &&
   17780:	f011 0f40 	tst.w	r1, #64	; 0x40
   17784:	d03b      	beq.n	177fe <le_set_event_mask+0x9e>
			mask |= BT_EVT_MASK_LE_ENH_CONN_COMPLETE;
   17786:	f240 2e02 	movw	lr, #514	; 0x202
   1778a:	f04f 0c00 	mov.w	ip, #0
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
   1778e:	f04e 030c 	orr.w	r3, lr, #12
   17792:	4662      	mov	r2, ip
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   17794:	f011 0f02 	tst.w	r1, #2
   17798:	d001      	beq.n	1779e <le_set_event_mask+0x3e>
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   1779a:	f04e 032c 	orr.w	r3, lr, #44	; 0x2c
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   1779e:	f011 0f20 	tst.w	r1, #32
   177a2:	d001      	beq.n	177a8 <le_set_event_mask+0x48>
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   177a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
		    (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
   177a8:	4d1a      	ldr	r5, [pc, #104]	; (17814 <le_set_event_mask+0xb4>)
   177aa:	f895 c0d1 	ldrb.w	ip, [r5, #209]	; 0xd1
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   177ae:	f01c 0f09 	tst.w	ip, #9
   177b2:	d001      	beq.n	177b8 <le_set_event_mask+0x58>
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   177b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   177b8:	f011 0f01 	tst.w	r1, #1
   177bc:	d001      	beq.n	177c2 <le_set_event_mask+0x62>
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
   177be:	f043 0310 	orr.w	r3, r3, #16
	    (BT_CMD_TEST(bt_dev.supported_commands, 34, 1)) &&
   177c2:	4914      	ldr	r1, [pc, #80]	; (17814 <le_set_event_mask+0xb4>)
   177c4:	f891 109a 	ldrb.w	r1, [r1, #154]	; 0x9a
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   177c8:	f001 0106 	and.w	r1, r1, #6
   177cc:	2906      	cmp	r1, #6
   177ce:	d01b      	beq.n	17808 <le_set_event_mask+0xa8>
	dst[0] = val;
   177d0:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   177d2:	f3c3 2107 	ubfx	r1, r3, #8, #8
   177d6:	7041      	strb	r1, [r0, #1]
	sys_put_le16(val >> 16, &dst[2]);
   177d8:	0c19      	lsrs	r1, r3, #16
	dst[0] = val;
   177da:	7081      	strb	r1, [r0, #2]
	dst[1] = val >> 8;
   177dc:	0e1b      	lsrs	r3, r3, #24
   177de:	70c3      	strb	r3, [r0, #3]
	dst[0] = val;
   177e0:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   177e2:	f3c2 2307 	ubfx	r3, r2, #8, #8
   177e6:	7143      	strb	r3, [r0, #5]
	sys_put_le16(val >> 16, &dst[2]);
   177e8:	0c13      	lsrs	r3, r2, #16
	dst[0] = val;
   177ea:	7183      	strb	r3, [r0, #6]
	dst[1] = val >> 8;
   177ec:	0e12      	lsrs	r2, r2, #24
   177ee:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   177f0:	2200      	movs	r2, #0
   177f2:	4621      	mov	r1, r4
   177f4:	f242 0001 	movw	r0, #8193	; 0x2001
   177f8:	f7ff fee2 	bl	175c0 <bt_hci_cmd_send_sync>
}
   177fc:	bd38      	pop	{r3, r4, r5, pc}
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
   177fe:	f04f 0e03 	mov.w	lr, #3
   17802:	f04f 0c00 	mov.w	ip, #0
   17806:	e7c2      	b.n	1778e <le_set_event_mask+0x2e>
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
   17808:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
   1780c:	e7e0      	b.n	177d0 <le_set_event_mask+0x70>
		return -ENOBUFS;
   1780e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   17812:	e7f3      	b.n	177fc <le_set_event_mask+0x9c>
   17814:	20000350 	.word	0x20000350

00017818 <le_init>:
{
   17818:	b510      	push	{r4, lr}
   1781a:	b082      	sub	sp, #8
	if (!BT_FEAT_LE(bt_dev.features)) {
   1781c:	4b54      	ldr	r3, [pc, #336]	; (17970 <le_init+0x158>)
   1781e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   17822:	f013 0f40 	tst.w	r3, #64	; 0x40
   17826:	d00a      	beq.n	1783e <le_init+0x26>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   17828:	aa01      	add	r2, sp, #4
   1782a:	2100      	movs	r1, #0
   1782c:	f242 0003 	movw	r0, #8195	; 0x2003
   17830:	f7ff fec6 	bl	175c0 <bt_hci_cmd_send_sync>
	if (err) {
   17834:	4603      	mov	r3, r0
   17836:	b148      	cbz	r0, 1784c <le_init+0x34>
}
   17838:	4618      	mov	r0, r3
   1783a:	b002      	add	sp, #8
   1783c:	bd10      	pop	{r4, pc}
		BT_ERR("Non-LE capable controller detected!");
   1783e:	2145      	movs	r1, #69	; 0x45
   17840:	484c      	ldr	r0, [pc, #304]	; (17974 <le_init+0x15c>)
   17842:	f013 fc33 	bl	2b0ac <z_log_minimal_printk>
		return -ENODEV;
   17846:	f06f 0312 	mvn.w	r3, #18
   1784a:	e7f5      	b.n	17838 <le_init+0x20>
	read_le_features_complete(rsp);
   1784c:	9801      	ldr	r0, [sp, #4]
   1784e:	f7ff fa17 	bl	16c80 <read_le_features_complete>
	net_buf_unref(rsp);
   17852:	9801      	ldr	r0, [sp, #4]
   17854:	f008 fd96 	bl	20384 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   17858:	aa01      	add	r2, sp, #4
   1785a:	2100      	movs	r1, #0
   1785c:	f242 0002 	movw	r0, #8194	; 0x2002
   17860:	f7ff feae 	bl	175c0 <bt_hci_cmd_send_sync>
		if (err) {
   17864:	4603      	mov	r3, r0
   17866:	2800      	cmp	r0, #0
   17868:	d1e6      	bne.n	17838 <le_init+0x20>
		le_read_buffer_size_complete(rsp);
   1786a:	9801      	ldr	r0, [sp, #4]
   1786c:	f7ff faa6 	bl	16dbc <le_read_buffer_size_complete>
		net_buf_unref(rsp);
   17870:	9801      	ldr	r0, [sp, #4]
   17872:	f008 fd87 	bl	20384 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   17876:	4b3e      	ldr	r3, [pc, #248]	; (17970 <le_init+0x158>)
   17878:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   1787c:	f013 0f20 	tst.w	r3, #32
   17880:	d024      	beq.n	178cc <le_init+0xb4>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   17882:	4b3b      	ldr	r3, [pc, #236]	; (17970 <le_init+0x158>)
   17884:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   17888:	f013 0f08 	tst.w	r3, #8
   1788c:	d137      	bne.n	178fe <le_init+0xe6>
	    BT_FEAT_LE_DLE(bt_dev.le.features)) {
   1788e:	4b38      	ldr	r3, [pc, #224]	; (17970 <le_init+0x158>)
   17890:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   17894:	f013 0f20 	tst.w	r3, #32
   17898:	d141      	bne.n	1791e <le_init+0x106>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
   1789a:	4b35      	ldr	r3, [pc, #212]	; (17970 <le_init+0x158>)
   1789c:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   178a0:	f013 0f40 	tst.w	r3, #64	; 0x40
   178a4:	d00e      	beq.n	178c4 <le_init+0xac>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
   178a6:	aa01      	add	r2, sp, #4
   178a8:	2100      	movs	r1, #0
   178aa:	f242 002a 	movw	r0, #8234	; 0x202a
   178ae:	f7ff fe87 	bl	175c0 <bt_hci_cmd_send_sync>
		if (err) {
   178b2:	4603      	mov	r3, r0
   178b4:	2800      	cmp	r0, #0
   178b6:	d1bf      	bne.n	17838 <le_init+0x20>
		le_read_resolving_list_size_complete(rsp);
   178b8:	9801      	ldr	r0, [sp, #4]
   178ba:	f7ff fa2d 	bl	16d18 <le_read_resolving_list_size_complete>
		net_buf_unref(rsp);
   178be:	9801      	ldr	r0, [sp, #4]
   178c0:	f008 fd60 	bl	20384 <net_buf_unref>
	return  le_set_event_mask();
   178c4:	f7ff ff4c 	bl	17760 <le_set_event_mask>
   178c8:	4603      	mov	r3, r0
   178ca:	e7b5      	b.n	17838 <le_init+0x20>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   178cc:	2102      	movs	r1, #2
   178ce:	f640 406d 	movw	r0, #3181	; 0xc6d
   178d2:	f7ff fe27 	bl	17524 <bt_hci_cmd_create>
		if (!buf) {
   178d6:	4604      	mov	r4, r0
   178d8:	2800      	cmp	r0, #0
   178da:	d046      	beq.n	1796a <le_init+0x152>
   178dc:	2102      	movs	r1, #2
   178de:	3008      	adds	r0, #8
   178e0:	f008 fe68 	bl	205b4 <net_buf_simple_add>
		cp_le->le = 0x01;
   178e4:	2301      	movs	r3, #1
   178e6:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   178e8:	2200      	movs	r2, #0
   178ea:	7042      	strb	r2, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   178ec:	4621      	mov	r1, r4
   178ee:	f640 406d 	movw	r0, #3181	; 0xc6d
   178f2:	f7ff fe65 	bl	175c0 <bt_hci_cmd_send_sync>
		if (err) {
   178f6:	4603      	mov	r3, r0
   178f8:	2800      	cmp	r0, #0
   178fa:	d0c2      	beq.n	17882 <le_init+0x6a>
   178fc:	e79c      	b.n	17838 <le_init+0x20>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   178fe:	aa01      	add	r2, sp, #4
   17900:	2100      	movs	r1, #0
   17902:	f242 001c 	movw	r0, #8220	; 0x201c
   17906:	f7ff fe5b 	bl	175c0 <bt_hci_cmd_send_sync>
		if (err) {
   1790a:	4603      	mov	r3, r0
   1790c:	2800      	cmp	r0, #0
   1790e:	d193      	bne.n	17838 <le_init+0x20>
		le_read_supp_states_complete(rsp);
   17910:	9801      	ldr	r0, [sp, #4]
   17912:	f7ff f9e3 	bl	16cdc <le_read_supp_states_complete>
		net_buf_unref(rsp);
   17916:	9801      	ldr	r0, [sp, #4]
   17918:	f008 fd34 	bl	20384 <net_buf_unref>
   1791c:	e7b7      	b.n	1788e <le_init+0x76>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   1791e:	f10d 0102 	add.w	r1, sp, #2
   17922:	4668      	mov	r0, sp
   17924:	f7ff fefc 	bl	17720 <hci_le_read_max_data_len>
		if (err) {
   17928:	4603      	mov	r3, r0
   1792a:	2800      	cmp	r0, #0
   1792c:	d184      	bne.n	17838 <le_init+0x20>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   1792e:	2104      	movs	r1, #4
   17930:	f242 0024 	movw	r0, #8228	; 0x2024
   17934:	f7ff fdf6 	bl	17524 <bt_hci_cmd_create>
		if (!buf) {
   17938:	4604      	mov	r4, r0
   1793a:	b198      	cbz	r0, 17964 <le_init+0x14c>
   1793c:	2104      	movs	r1, #4
   1793e:	3008      	adds	r0, #8
   17940:	f008 fe38 	bl	205b4 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   17944:	f8bd 3000 	ldrh.w	r3, [sp]
   17948:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   1794a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   1794e:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   17950:	2200      	movs	r2, #0
   17952:	4621      	mov	r1, r4
   17954:	f242 0024 	movw	r0, #8228	; 0x2024
   17958:	f7ff fe32 	bl	175c0 <bt_hci_cmd_send_sync>
		if (err) {
   1795c:	4603      	mov	r3, r0
   1795e:	2800      	cmp	r0, #0
   17960:	d09b      	beq.n	1789a <le_init+0x82>
   17962:	e769      	b.n	17838 <le_init+0x20>
			return -ENOBUFS;
   17964:	f06f 0368 	mvn.w	r3, #104	; 0x68
   17968:	e766      	b.n	17838 <le_init+0x20>
			return -ENOBUFS;
   1796a:	f06f 0368 	mvn.w	r3, #104	; 0x68
   1796e:	e763      	b.n	17838 <le_init+0x20>
   17970:	20000350 	.word	0x20000350
   17974:	00032900 	.word	0x00032900

00017978 <bt_br_init>:
{
   17978:	b510      	push	{r4, lr}
   1797a:	b082      	sub	sp, #8
	if (bt_dev.le.acl_mtu) {
   1797c:	4b0b      	ldr	r3, [pc, #44]	; (179ac <bt_br_init+0x34>)
   1797e:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
   17982:	b11b      	cbz	r3, 1798c <bt_br_init+0x14>
		return 0;
   17984:	2400      	movs	r4, #0
}
   17986:	4620      	mov	r0, r4
   17988:	b002      	add	sp, #8
   1798a:	bd10      	pop	{r4, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   1798c:	aa01      	add	r2, sp, #4
   1798e:	2100      	movs	r1, #0
   17990:	f241 0005 	movw	r0, #4101	; 0x1005
   17994:	f7ff fe14 	bl	175c0 <bt_hci_cmd_send_sync>
	if (err) {
   17998:	4604      	mov	r4, r0
   1799a:	2800      	cmp	r0, #0
   1799c:	d1f3      	bne.n	17986 <bt_br_init+0xe>
	read_buffer_size_complete(rsp);
   1799e:	9801      	ldr	r0, [sp, #4]
   179a0:	f7ff fa20 	bl	16de4 <read_buffer_size_complete>
	net_buf_unref(rsp);
   179a4:	9801      	ldr	r0, [sp, #4]
   179a6:	f008 fced 	bl	20384 <net_buf_unref>
	return 0;
   179aa:	e7ec      	b.n	17986 <bt_br_init+0xe>
   179ac:	20000350 	.word	0x20000350

000179b0 <set_event_mask>:
{
   179b0:	b510      	push	{r4, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   179b2:	2108      	movs	r1, #8
   179b4:	f640 4001 	movw	r0, #3073	; 0xc01
   179b8:	f7ff fdb4 	bl	17524 <bt_hci_cmd_create>
	if (!buf) {
   179bc:	b338      	cbz	r0, 17a0e <set_event_mask+0x5e>
   179be:	4604      	mov	r4, r0
   179c0:	2108      	movs	r1, #8
   179c2:	4408      	add	r0, r1
   179c4:	f008 fdf6 	bl	205b4 <net_buf_simple_add>
	    BT_FEAT_LE_ENCR(bt_dev.le.features)) {
   179c8:	4b12      	ldr	r3, [pc, #72]	; (17a14 <set_event_mask+0x64>)
   179ca:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   179ce:	f013 0f01 	tst.w	r3, #1
   179d2:	d119      	bne.n	17a08 <set_event_mask+0x58>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
   179d4:	4a10      	ldr	r2, [pc, #64]	; (17a18 <set_event_mask+0x68>)
   179d6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
	sys_put_le16(val, dst);
   179da:	b291      	uxth	r1, r2
	dst[0] = val;
   179dc:	7002      	strb	r2, [r0, #0]
	dst[1] = val >> 8;
   179de:	0a09      	lsrs	r1, r1, #8
   179e0:	7041      	strb	r1, [r0, #1]
	sys_put_le16(val >> 16, &dst[2]);
   179e2:	0c11      	lsrs	r1, r2, #16
	dst[0] = val;
   179e4:	7081      	strb	r1, [r0, #2]
	dst[1] = val >> 8;
   179e6:	0e12      	lsrs	r2, r2, #24
   179e8:	70c2      	strb	r2, [r0, #3]
	sys_put_le16(val, dst);
   179ea:	b29a      	uxth	r2, r3
	dst[0] = val;
   179ec:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
   179ee:	0a12      	lsrs	r2, r2, #8
   179f0:	7142      	strb	r2, [r0, #5]
	sys_put_le16(val >> 16, &dst[2]);
   179f2:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   179f4:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   179f6:	0e1b      	lsrs	r3, r3, #24
   179f8:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   179fa:	2200      	movs	r2, #0
   179fc:	4621      	mov	r1, r4
   179fe:	f640 4001 	movw	r0, #3073	; 0xc01
   17a02:	f7ff fddd 	bl	175c0 <bt_hci_cmd_send_sync>
}
   17a06:	bd10      	pop	{r4, pc}
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
   17a08:	4a04      	ldr	r2, [pc, #16]	; (17a1c <set_event_mask+0x6c>)
   17a0a:	4b05      	ldr	r3, [pc, #20]	; (17a20 <set_event_mask+0x70>)
   17a0c:	e7e5      	b.n	179da <set_event_mask+0x2a>
		return -ENOBUFS;
   17a0e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   17a12:	e7f8      	b.n	17a06 <set_event_mask+0x56>
   17a14:	20000350 	.word	0x20000350
   17a18:	02008810 	.word	0x02008810
   17a1c:	02008890 	.word	0x02008890
   17a20:	20008000 	.word	0x20008000

00017a24 <hci_vs_init>:
{
   17a24:	b510      	push	{r4, lr}
   17a26:	b082      	sub	sp, #8
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   17a28:	aa01      	add	r2, sp, #4
   17a2a:	2100      	movs	r1, #0
   17a2c:	f64f 4001 	movw	r0, #64513	; 0xfc01
   17a30:	f7ff fdc6 	bl	175c0 <bt_hci_cmd_send_sync>
	if (err) {
   17a34:	bb38      	cbnz	r0, 17a86 <hci_vs_init+0x62>
	net_buf_unref(rsp);
   17a36:	9801      	ldr	r0, [sp, #4]
   17a38:	f008 fca4 	bl	20384 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   17a3c:	aa01      	add	r2, sp, #4
   17a3e:	2100      	movs	r1, #0
   17a40:	f64f 4002 	movw	r0, #64514	; 0xfc02
   17a44:	f7ff fdbc 	bl	175c0 <bt_hci_cmd_send_sync>
	if (err) {
   17a48:	bb18      	cbnz	r0, 17a92 <hci_vs_init+0x6e>
	rp.cmds = (void *)rsp->data;
   17a4a:	9801      	ldr	r0, [sp, #4]
   17a4c:	6883      	ldr	r3, [r0, #8]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   17a4e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
   17a52:	4c15      	ldr	r4, [pc, #84]	; (17aa8 <hci_vs_init+0x84>)
   17a54:	f8a4 30b9 	strh.w	r3, [r4, #185]	; 0xb9
	net_buf_unref(rsp);
   17a58:	f008 fc94 	bl	20384 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   17a5c:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
   17a60:	f013 0f04 	tst.w	r3, #4
   17a64:	d013      	beq.n	17a8e <hci_vs_init+0x6a>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   17a66:	aa01      	add	r2, sp, #4
   17a68:	2100      	movs	r1, #0
   17a6a:	f64f 4003 	movw	r0, #64515	; 0xfc03
   17a6e:	f7ff fda7 	bl	175c0 <bt_hci_cmd_send_sync>
		if (err) {
   17a72:	b998      	cbnz	r0, 17a9c <hci_vs_init+0x78>
		rp.feat = (void *)rsp->data;
   17a74:	9801      	ldr	r0, [sp, #4]
   17a76:	6883      	ldr	r3, [r0, #8]
		memcpy(bt_dev.vs_features, rp.feat->features,
   17a78:	785a      	ldrb	r2, [r3, #1]
   17a7a:	4b0b      	ldr	r3, [pc, #44]	; (17aa8 <hci_vs_init+0x84>)
   17a7c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		net_buf_unref(rsp);
   17a80:	f008 fc80 	bl	20384 <net_buf_unref>
   17a84:	e003      	b.n	17a8e <hci_vs_init+0x6a>
		BT_WARN("Vendor HCI extensions not available");
   17a86:	2157      	movs	r1, #87	; 0x57
   17a88:	4808      	ldr	r0, [pc, #32]	; (17aac <hci_vs_init+0x88>)
   17a8a:	f013 fb0f 	bl	2b0ac <z_log_minimal_printk>
}
   17a8e:	b002      	add	sp, #8
   17a90:	bd10      	pop	{r4, pc}
		BT_WARN("Failed to read supported vendor commands");
   17a92:	2157      	movs	r1, #87	; 0x57
   17a94:	4806      	ldr	r0, [pc, #24]	; (17ab0 <hci_vs_init+0x8c>)
   17a96:	f013 fb09 	bl	2b0ac <z_log_minimal_printk>
		return;
   17a9a:	e7f8      	b.n	17a8e <hci_vs_init+0x6a>
			BT_WARN("Failed to read supported vendor features");
   17a9c:	2157      	movs	r1, #87	; 0x57
   17a9e:	4805      	ldr	r0, [pc, #20]	; (17ab4 <hci_vs_init+0x90>)
   17aa0:	f013 fb04 	bl	2b0ac <z_log_minimal_printk>
			return;
   17aa4:	e7f3      	b.n	17a8e <hci_vs_init+0x6a>
   17aa6:	bf00      	nop
   17aa8:	20000350 	.word	0x20000350
   17aac:	0003292c 	.word	0x0003292c
   17ab0:	00032958 	.word	0x00032958
   17ab4:	00032988 	.word	0x00032988

00017ab8 <hci_init>:
{
   17ab8:	b508      	push	{r3, lr}
	err = common_init();
   17aba:	f7ff fde7 	bl	1768c <common_init>
	if (err) {
   17abe:	4603      	mov	r3, r0
   17ac0:	b108      	cbz	r0, 17ac6 <hci_init+0xe>
}
   17ac2:	4618      	mov	r0, r3
   17ac4:	bd08      	pop	{r3, pc}
	err = le_init();
   17ac6:	f7ff fea7 	bl	17818 <le_init>
	if (err) {
   17aca:	4603      	mov	r3, r0
   17acc:	2800      	cmp	r0, #0
   17ace:	d1f8      	bne.n	17ac2 <hci_init+0xa>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   17ad0:	4b10      	ldr	r3, [pc, #64]	; (17b14 <hci_init+0x5c>)
   17ad2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   17ad6:	f013 0f20 	tst.w	r3, #32
   17ada:	d00e      	beq.n	17afa <hci_init+0x42>
	else if (!bt_dev.le.acl_mtu) {
   17adc:	4b0d      	ldr	r3, [pc, #52]	; (17b14 <hci_init+0x5c>)
   17ade:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
   17ae2:	b183      	cbz	r3, 17b06 <hci_init+0x4e>
	err = set_event_mask();
   17ae4:	f7ff ff64 	bl	179b0 <set_event_mask>
	if (err) {
   17ae8:	4603      	mov	r3, r0
   17aea:	2800      	cmp	r0, #0
   17aec:	d1e9      	bne.n	17ac2 <hci_init+0xa>
	hci_vs_init();
   17aee:	f7ff ff99 	bl	17a24 <hci_vs_init>
	err = bt_id_init();
   17af2:	f014 fc94 	bl	2c41e <bt_id_init>
   17af6:	4603      	mov	r3, r0
	if (err) {
   17af8:	e7e3      	b.n	17ac2 <hci_init+0xa>
		err = bt_br_init();
   17afa:	f7ff ff3d 	bl	17978 <bt_br_init>
		if (err) {
   17afe:	4603      	mov	r3, r0
   17b00:	2800      	cmp	r0, #0
   17b02:	d0ef      	beq.n	17ae4 <hci_init+0x2c>
   17b04:	e7dd      	b.n	17ac2 <hci_init+0xa>
		BT_ERR("ACL BR/EDR buffers not initialized");
   17b06:	2145      	movs	r1, #69	; 0x45
   17b08:	4803      	ldr	r0, [pc, #12]	; (17b18 <hci_init+0x60>)
   17b0a:	f013 facf 	bl	2b0ac <z_log_minimal_printk>
		return -EIO;
   17b0e:	f06f 0304 	mvn.w	r3, #4
   17b12:	e7d6      	b.n	17ac2 <hci_init+0xa>
   17b14:	20000350 	.word	0x20000350
   17b18:	000329b8 	.word	0x000329b8

00017b1c <bt_hci_le_rand>:
{
   17b1c:	b570      	push	{r4, r5, r6, lr}
   17b1e:	b082      	sub	sp, #8
   17b20:	4606      	mov	r6, r0
   17b22:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   17b24:	4b12      	ldr	r3, [pc, #72]	; (17b70 <bt_hci_le_rand+0x54>)
   17b26:	f993 3093 	ldrsb.w	r3, [r3, #147]	; 0x93
   17b2a:	2b00      	cmp	r3, #0
   17b2c:	da1d      	bge.n	17b6a <bt_hci_le_rand+0x4e>
	while (len > 0) {
   17b2e:	b1c4      	cbz	r4, 17b62 <bt_hci_le_rand+0x46>
		count = MIN(len, sizeof(rp->rand));
   17b30:	4625      	mov	r5, r4
   17b32:	2c08      	cmp	r4, #8
   17b34:	bf28      	it	cs
   17b36:	2508      	movcs	r5, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   17b38:	aa01      	add	r2, sp, #4
   17b3a:	2100      	movs	r1, #0
   17b3c:	f242 0018 	movw	r0, #8216	; 0x2018
   17b40:	f7ff fd3e 	bl	175c0 <bt_hci_cmd_send_sync>
		if (err) {
   17b44:	4603      	mov	r3, r0
   17b46:	b968      	cbnz	r0, 17b64 <bt_hci_le_rand+0x48>
		rp = (void *)rsp->data;
   17b48:	9b01      	ldr	r3, [sp, #4]
   17b4a:	6899      	ldr	r1, [r3, #8]
   17b4c:	462a      	mov	r2, r5
   17b4e:	3101      	adds	r1, #1
   17b50:	4630      	mov	r0, r6
   17b52:	f019 f8e1 	bl	30d18 <memcpy>
		net_buf_unref(rsp);
   17b56:	9801      	ldr	r0, [sp, #4]
   17b58:	f008 fc14 	bl	20384 <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
   17b5c:	442e      	add	r6, r5
		len -= count;
   17b5e:	1b64      	subs	r4, r4, r5
   17b60:	e7e5      	b.n	17b2e <bt_hci_le_rand+0x12>
	return 0;
   17b62:	2300      	movs	r3, #0
}
   17b64:	4618      	mov	r0, r3
   17b66:	b002      	add	sp, #8
   17b68:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTSUP;
   17b6a:	f06f 0385 	mvn.w	r3, #133	; 0x85
   17b6e:	e7f9      	b.n	17b64 <bt_hci_le_rand+0x48>
   17b70:	20000350 	.word	0x20000350

00017b74 <conn_auto_initiate>:
	if (conn->state != BT_CONN_CONNECTED) {
   17b74:	7b43      	ldrb	r3, [r0, #13]
   17b76:	2b07      	cmp	r3, #7
   17b78:	d000      	beq.n	17b7c <conn_auto_initiate+0x8>
   17b7a:	4770      	bx	lr
{
   17b7c:	b510      	push	{r4, lr}
   17b7e:	b084      	sub	sp, #16
   17b80:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17b82:	f3bf 8f5b 	dmb	ish
   17b86:	6843      	ldr	r3, [r0, #4]
   17b88:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   17b8c:	f413 6f00 	tst.w	r3, #2048	; 0x800
   17b90:	d10c      	bne.n	17bac <conn_auto_initiate+0x38>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   17b92:	78c3      	ldrb	r3, [r0, #3]
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   17b94:	b12b      	cbz	r3, 17ba2 <conn_auto_initiate+0x2e>
	     BT_FEAT_LE_PER_INIT_FEAT_XCHG(bt_dev.le.features))) {
   17b96:	4b27      	ldr	r3, [pc, #156]	; (17c34 <conn_auto_initiate+0xc0>)
   17b98:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   17b9c:	f013 0f08 	tst.w	r3, #8
   17ba0:	d004      	beq.n	17bac <conn_auto_initiate+0x38>
		err = hci_le_read_remote_features(conn);
   17ba2:	4620      	mov	r0, r4
   17ba4:	f014 fa1f 	bl	2bfe6 <hci_le_read_remote_features>
		if (err) {
   17ba8:	4602      	mov	r2, r0
   17baa:	b9c0      	cbnz	r0, 17bde <conn_auto_initiate+0x6a>
	    BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
   17bac:	4b21      	ldr	r3, [pc, #132]	; (17c34 <conn_auto_initiate+0xc0>)
   17bae:	f893 30d1 	ldrb.w	r3, [r3, #209]	; 0xd1
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   17bb2:	f013 0f01 	tst.w	r3, #1
   17bb6:	d003      	beq.n	17bc0 <conn_auto_initiate+0x4c>
	    !skip_auto_phy_update_on_conn_establishment(conn)) {
   17bb8:	4620      	mov	r0, r4
   17bba:	f014 f9de 	bl	2bf7a <skip_auto_phy_update_on_conn_establishment>
	    BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
   17bbe:	b198      	cbz	r0, 17be8 <conn_auto_initiate+0x74>
	    BT_FEAT_LE_DLE(bt_dev.le.features)) {
   17bc0:	4b1c      	ldr	r3, [pc, #112]	; (17c34 <conn_auto_initiate+0xc0>)
   17bc2:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   17bc6:	f013 0f20 	tst.w	r3, #32
   17bca:	d006      	beq.n	17bda <conn_auto_initiate+0x66>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   17bcc:	4b19      	ldr	r3, [pc, #100]	; (17c34 <conn_auto_initiate+0xc0>)
   17bce:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
   17bd2:	689b      	ldr	r3, [r3, #8]
   17bd4:	f013 0f02 	tst.w	r3, #2
   17bd8:	d115      	bne.n	17c06 <conn_auto_initiate+0x92>
}
   17bda:	b004      	add	sp, #16
   17bdc:	bd10      	pop	{r4, pc}
			BT_ERR("Failed read remote features (%d)", err);
   17bde:	2145      	movs	r1, #69	; 0x45
   17be0:	4815      	ldr	r0, [pc, #84]	; (17c38 <conn_auto_initiate+0xc4>)
   17be2:	f013 fa63 	bl	2b0ac <z_log_minimal_printk>
   17be6:	e7e1      	b.n	17bac <conn_auto_initiate+0x38>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   17be8:	2100      	movs	r1, #0
   17bea:	9100      	str	r1, [sp, #0]
   17bec:	2302      	movs	r3, #2
   17bee:	461a      	mov	r2, r3
   17bf0:	4620      	mov	r0, r4
   17bf2:	f014 fa48 	bl	2c086 <bt_le_set_phy>
		if (err) {
   17bf6:	4602      	mov	r2, r0
   17bf8:	2800      	cmp	r0, #0
   17bfa:	d0e1      	beq.n	17bc0 <conn_auto_initiate+0x4c>
			BT_ERR("Failed LE Set PHY (%d)", err);
   17bfc:	2145      	movs	r1, #69	; 0x45
   17bfe:	480f      	ldr	r0, [pc, #60]	; (17c3c <conn_auto_initiate+0xc8>)
   17c00:	f013 fa54 	bl	2b0ac <z_log_minimal_printk>
   17c04:	e7dc      	b.n	17bc0 <conn_auto_initiate+0x4c>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   17c06:	f10d 010e 	add.w	r1, sp, #14
   17c0a:	a803      	add	r0, sp, #12
   17c0c:	f7ff fd88 	bl	17720 <hci_le_read_max_data_len>
			if (!err) {
   17c10:	2800      	cmp	r0, #0
   17c12:	d1e2      	bne.n	17bda <conn_auto_initiate+0x66>
				err = bt_le_set_data_len(conn,
   17c14:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   17c18:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   17c1c:	4620      	mov	r0, r4
   17c1e:	f014 fa15 	bl	2c04c <bt_le_set_data_len>
				if (err) {
   17c22:	4602      	mov	r2, r0
   17c24:	2800      	cmp	r0, #0
   17c26:	d0d8      	beq.n	17bda <conn_auto_initiate+0x66>
					BT_ERR("Failed to set data len (%d)", err);
   17c28:	2145      	movs	r1, #69	; 0x45
   17c2a:	4805      	ldr	r0, [pc, #20]	; (17c40 <conn_auto_initiate+0xcc>)
   17c2c:	f013 fa3e 	bl	2b0ac <z_log_minimal_printk>
		}
   17c30:	e7d3      	b.n	17bda <conn_auto_initiate+0x66>
   17c32:	bf00      	nop
   17c34:	20000350 	.word	0x20000350
   17c38:	000329e0 	.word	0x000329e0
   17c3c:	00032a08 	.word	0x00032a08
   17c40:	00032a24 	.word	0x00032a24

00017c44 <bt_hci_le_enh_conn_complete>:
{
   17c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17c48:	b084      	sub	sp, #16
   17c4a:	4604      	mov	r4, r0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   17c4c:	f8b0 7001 	ldrh.w	r7, [r0, #1]
   17c50:	fa1f f887 	uxth.w	r8, r7
	bool is_disconnected = conn_handle_is_disconnected(handle);
   17c54:	4640      	mov	r0, r8
   17c56:	f7fe ffe7 	bl	16c28 <conn_handle_is_disconnected>
   17c5a:	4606      	mov	r6, r0
	bt_id_pending_keys_update();
   17c5c:	f000 fd84 	bl	18768 <bt_id_pending_keys_update>
	if (evt->status) {
   17c60:	7820      	ldrb	r0, [r4, #0]
   17c62:	b150      	cbz	r0, 17c7a <bt_hci_le_enh_conn_complete+0x36>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   17c64:	283c      	cmp	r0, #60	; 0x3c
   17c66:	d005      	beq.n	17c74 <bt_hci_le_enh_conn_complete+0x30>
		BT_WARN("Unexpected status 0x%02x", evt->status);
   17c68:	4602      	mov	r2, r0
   17c6a:	2157      	movs	r1, #87	; 0x57
   17c6c:	4861      	ldr	r0, [pc, #388]	; (17df4 <bt_hci_le_enh_conn_complete+0x1b0>)
   17c6e:	f013 fa1d 	bl	2b0ac <z_log_minimal_printk>
		return;
   17c72:	e056      	b.n	17d22 <bt_hci_le_enh_conn_complete+0xde>
			le_conn_complete_adv_timeout();
   17c74:	f7ff f8f2 	bl	16e5c <le_conn_complete_adv_timeout>
			return;
   17c78:	e053      	b.n	17d22 <bt_hci_le_enh_conn_complete+0xde>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   17c7a:	7923      	ldrb	r3, [r4, #4]
   17c7c:	3b02      	subs	r3, #2
   17c7e:	b2db      	uxtb	r3, r3
   17c80:	2b01      	cmp	r3, #1
   17c82:	d951      	bls.n	17d28 <bt_hci_le_enh_conn_complete+0xe4>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   17c84:	78e3      	ldrb	r3, [r4, #3]
   17c86:	2b01      	cmp	r3, #1
   17c88:	d067      	beq.n	17d5a <bt_hci_le_enh_conn_complete+0x116>
				bt_lookup_id_addr(id, &evt->peer_addr));
   17c8a:	1d25      	adds	r5, r4, #4
		bt_addr_le_copy(&id_addr,
   17c8c:	4629      	mov	r1, r5
   17c8e:	f014 fb8c 	bl	2c3aa <bt_lookup_id_addr>
   17c92:	4603      	mov	r3, r0
	memcpy(dst, src, sizeof(*dst));
   17c94:	6800      	ldr	r0, [r0, #0]
   17c96:	9000      	str	r0, [sp, #0]
   17c98:	889a      	ldrh	r2, [r3, #4]
   17c9a:	799b      	ldrb	r3, [r3, #6]
   17c9c:	f8ad 2004 	strh.w	r2, [sp, #4]
   17ca0:	f88d 3006 	strb.w	r3, [sp, #6]
   17ca4:	6860      	ldr	r0, [r4, #4]
   17ca6:	9002      	str	r0, [sp, #8]
   17ca8:	8922      	ldrh	r2, [r4, #8]
   17caa:	7aa3      	ldrb	r3, [r4, #10]
   17cac:	f8ad 200c 	strh.w	r2, [sp, #12]
   17cb0:	f88d 300e 	strb.w	r3, [sp, #14]
	conn = find_pending_connect(evt->role, &id_addr);
   17cb4:	4669      	mov	r1, sp
   17cb6:	78e0      	ldrb	r0, [r4, #3]
   17cb8:	f7ff f8aa 	bl	16e10 <find_pending_connect>
   17cbc:	4605      	mov	r5, r0
	    evt->role == BT_HCI_ROLE_PERIPHERAL &&
   17cbe:	78e3      	ldrb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   17cc0:	2b01      	cmp	r3, #1
   17cc2:	d04e      	beq.n	17d62 <bt_hci_le_enh_conn_complete+0x11e>
	if (!conn) {
   17cc4:	2d00      	cmp	r5, #0
   17cc6:	d05f      	beq.n	17d88 <bt_hci_le_enh_conn_complete+0x144>
	conn->handle = handle;
   17cc8:	462b      	mov	r3, r5
   17cca:	f823 7b90 	strh.w	r7, [r3], #144
   17cce:	9800      	ldr	r0, [sp, #0]
   17cd0:	f8c5 0090 	str.w	r0, [r5, #144]	; 0x90
   17cd4:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   17cd8:	f89d 2006 	ldrb.w	r2, [sp, #6]
   17cdc:	8099      	strh	r1, [r3, #4]
   17cde:	719a      	strb	r2, [r3, #6]
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   17ce0:	f8b4 3017 	ldrh.w	r3, [r4, #23]
   17ce4:	f8a5 30a6 	strh.w	r3, [r5, #166]	; 0xa6
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   17ce8:	f8b4 3019 	ldrh.w	r3, [r4, #25]
   17cec:	f8a5 30ac 	strh.w	r3, [r5, #172]	; 0xac
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   17cf0:	f8b4 301b 	ldrh.w	r3, [r4, #27]
   17cf4:	f8a5 30ae 	strh.w	r3, [r5, #174]	; 0xae
	conn->role = evt->role;
   17cf8:	78e3      	ldrb	r3, [r4, #3]
   17cfa:	70eb      	strb	r3, [r5, #3]
	conn->err = 0U;
   17cfc:	2200      	movs	r2, #0
   17cfe:	732a      	strb	r2, [r5, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   17d00:	2b01      	cmp	r3, #1
   17d02:	d04e      	beq.n	17da2 <bt_hci_le_enh_conn_complete+0x15e>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   17d04:	2107      	movs	r1, #7
   17d06:	4628      	mov	r0, r5
   17d08:	f001 ff90 	bl	19c2c <bt_conn_set_state>
	if (is_disconnected) {
   17d0c:	2e00      	cmp	r6, #0
   17d0e:	d16b      	bne.n	17de8 <bt_hci_le_enh_conn_complete+0x1a4>
	bt_conn_connected(conn);
   17d10:	4628      	mov	r0, r5
   17d12:	f014 fe8f 	bl	2ca34 <bt_conn_connected>
	conn_auto_initiate(conn);
   17d16:	4628      	mov	r0, r5
   17d18:	f7ff ff2c 	bl	17b74 <conn_auto_initiate>
	bt_conn_unref(conn);
   17d1c:	4628      	mov	r0, r5
   17d1e:	f001 ff49 	bl	19bb4 <bt_conn_unref>
}
   17d22:	b004      	add	sp, #16
   17d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17d28:	6860      	ldr	r0, [r4, #4]
   17d2a:	9000      	str	r0, [sp, #0]
   17d2c:	8922      	ldrh	r2, [r4, #8]
   17d2e:	7aa3      	ldrb	r3, [r4, #10]
   17d30:	f8ad 2004 	strh.w	r2, [sp, #4]
   17d34:	f88d 3006 	strb.w	r3, [sp, #6]
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   17d38:	f89d 3000 	ldrb.w	r3, [sp]
   17d3c:	3b02      	subs	r3, #2
   17d3e:	f88d 3000 	strb.w	r3, [sp]
	memcpy(dst, src, sizeof(*dst));
   17d42:	f8d4 3011 	ldr.w	r3, [r4, #17]
   17d46:	f8cd 3009 	str.w	r3, [sp, #9]
   17d4a:	f8b4 3015 	ldrh.w	r3, [r4, #21]
   17d4e:	f8ad 300d 	strh.w	r3, [sp, #13]
		peer_addr.type = BT_ADDR_LE_RANDOM;
   17d52:	2301      	movs	r3, #1
   17d54:	f88d 3008 	strb.w	r3, [sp, #8]
   17d58:	e7ac      	b.n	17cb4 <bt_hci_le_enh_conn_complete+0x70>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   17d5a:	4b27      	ldr	r3, [pc, #156]	; (17df8 <bt_hci_le_enh_conn_complete+0x1b4>)
   17d5c:	f893 0067 	ldrb.w	r0, [r3, #103]	; 0x67
   17d60:	e793      	b.n	17c8a <bt_hci_le_enh_conn_complete+0x46>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   17d62:	f001 f8e5 	bl	18f30 <bt_le_adv_lookup_legacy>
		atomic_clear_bit(adv->flags, BT_ADV_ENABLED);
   17d66:	f100 0310 	add.w	r3, r0, #16
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17d6a:	f3bf 8f5b 	dmb	ish
   17d6e:	e853 2f00 	ldrex	r2, [r3]
   17d72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   17d76:	e843 2100 	strex	r1, r2, [r3]
   17d7a:	2900      	cmp	r1, #0
   17d7c:	d1f7      	bne.n	17d6e <bt_hci_le_enh_conn_complete+0x12a>
   17d7e:	f3bf 8f5b 	dmb	ish
		(void)bt_le_lim_adv_cancel_timeout(adv);
   17d82:	f014 fc97 	bl	2c6b4 <bt_le_lim_adv_cancel_timeout>
   17d86:	e79d      	b.n	17cc4 <bt_hci_le_enh_conn_complete+0x80>
		BT_ERR("No pending conn for peer %s",
   17d88:	1d20      	adds	r0, r4, #4
   17d8a:	f7fe fcc7 	bl	1671c <bt_addr_le_str_real>
   17d8e:	4602      	mov	r2, r0
   17d90:	2145      	movs	r1, #69	; 0x45
   17d92:	481a      	ldr	r0, [pc, #104]	; (17dfc <bt_hci_le_enh_conn_complete+0x1b8>)
   17d94:	f013 f98a 	bl	2b0ac <z_log_minimal_printk>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   17d98:	211f      	movs	r1, #31
   17d9a:	4640      	mov	r0, r8
   17d9c:	f014 f93c 	bl	2c018 <bt_hci_disconnect>
		return;
   17da0:	e7bf      	b.n	17d22 <bt_hci_le_enh_conn_complete+0xde>
   17da2:	9802      	ldr	r0, [sp, #8]
   17da4:	f8c5 0097 	str.w	r0, [r5, #151]	; 0x97
   17da8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   17dac:	f89d 300e 	ldrb.w	r3, [sp, #14]
   17db0:	f8a5 209b 	strh.w	r2, [r5, #155]	; 0x9b
   17db4:	f885 309d 	strb.w	r3, [r5, #157]	; 0x9d
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   17db8:	f001 f8ba 	bl	18f30 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
   17dbc:	7a2b      	ldrb	r3, [r5, #8]
   17dbe:	4a0e      	ldr	r2, [pc, #56]	; (17df8 <bt_hci_le_enh_conn_complete+0x1b4>)
   17dc0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   17dc4:	18d1      	adds	r1, r2, r3
   17dc6:	58d3      	ldr	r3, [r2, r3]
   17dc8:	f8c5 309e 	str.w	r3, [r5, #158]	; 0x9e
   17dcc:	8888      	ldrh	r0, [r1, #4]
   17dce:	798b      	ldrb	r3, [r1, #6]
   17dd0:	f8a5 00a2 	strh.w	r0, [r5, #162]	; 0xa2
   17dd4:	f885 30a4 	strb.w	r3, [r5, #164]	; 0xa4
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   17dd8:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
   17ddc:	f013 0f40 	tst.w	r3, #64	; 0x40
   17de0:	d090      	beq.n	17d04 <bt_hci_le_enh_conn_complete+0xc0>
			bt_le_adv_resume();
   17de2:	f014 fc6c 	bl	2c6be <bt_le_adv_resume>
   17de6:	e78d      	b.n	17d04 <bt_hci_le_enh_conn_complete+0xc0>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   17de8:	2101      	movs	r1, #1
   17dea:	4628      	mov	r0, r5
   17dec:	f001 ff1e 	bl	19c2c <bt_conn_set_state>
   17df0:	e78e      	b.n	17d10 <bt_hci_le_enh_conn_complete+0xcc>
   17df2:	bf00      	nop
   17df4:	00032a48 	.word	0x00032a48
   17df8:	20000350 	.word	0x20000350
   17dfc:	00032a68 	.word	0x00032a68

00017e00 <hci_encrypt_key_refresh_complete>:
{
   17e00:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
   17e02:	6883      	ldr	r3, [r0, #8]
	uint8_t status = evt->status;
   17e04:	781c      	ldrb	r4, [r3, #0]
	handle = sys_le16_to_cpu(evt->handle);
   17e06:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   17e0a:	4630      	mov	r0, r6
   17e0c:	f001 ff04 	bl	19c18 <bt_conn_lookup_handle>
	if (!conn) {
   17e10:	b188      	cbz	r0, 17e36 <hci_encrypt_key_refresh_complete+0x36>
   17e12:	4605      	mov	r5, r0
	if (status) {
   17e14:	b9ac      	cbnz	r4, 17e42 <hci_encrypt_key_refresh_complete+0x42>
	if (conn->type == BT_CONN_TYPE_LE) {
   17e16:	7883      	ldrb	r3, [r0, #2]
   17e18:	2b01      	cmp	r3, #1
   17e1a:	d01e      	beq.n	17e5a <hci_encrypt_key_refresh_complete+0x5a>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   17e1c:	4620      	mov	r0, r4
   17e1e:	f014 f9c1 	bl	2c1a4 <bt_security_err_get>
   17e22:	4602      	mov	r2, r0
   17e24:	4621      	mov	r1, r4
   17e26:	4628      	mov	r0, r5
   17e28:	f002 f928 	bl	1a07c <bt_conn_security_changed>
	if (status) {
   17e2c:	b9f4      	cbnz	r4, 17e6c <hci_encrypt_key_refresh_complete+0x6c>
	bt_conn_unref(conn);
   17e2e:	4628      	mov	r0, r5
   17e30:	f001 fec0 	bl	19bb4 <bt_conn_unref>
}
   17e34:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Unable to look up conn with handle %u", handle);
   17e36:	4632      	mov	r2, r6
   17e38:	2145      	movs	r1, #69	; 0x45
   17e3a:	4811      	ldr	r0, [pc, #68]	; (17e80 <hci_encrypt_key_refresh_complete+0x80>)
   17e3c:	f013 f936 	bl	2b0ac <z_log_minimal_printk>
		return;
   17e40:	e7f8      	b.n	17e34 <hci_encrypt_key_refresh_complete+0x34>
		bt_conn_security_changed(conn, status,
   17e42:	4620      	mov	r0, r4
   17e44:	f014 f9ae 	bl	2c1a4 <bt_security_err_get>
   17e48:	4602      	mov	r2, r0
   17e4a:	4621      	mov	r1, r4
   17e4c:	4628      	mov	r0, r5
   17e4e:	f002 f915 	bl	1a07c <bt_conn_security_changed>
		bt_conn_unref(conn);
   17e52:	4628      	mov	r0, r5
   17e54:	f001 feae 	bl	19bb4 <bt_conn_unref>
		return;
   17e58:	e7ec      	b.n	17e34 <hci_encrypt_key_refresh_complete+0x34>
		bt_smp_update_keys(conn);
   17e5a:	f007 fd55 	bl	1f908 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   17e5e:	4628      	mov	r0, r5
   17e60:	f014 f88d 	bl	2bf7e <update_sec_level>
   17e64:	2800      	cmp	r0, #0
   17e66:	d1d9      	bne.n	17e1c <hci_encrypt_key_refresh_complete+0x1c>
			status = BT_HCI_ERR_AUTH_FAIL;
   17e68:	2405      	movs	r4, #5
   17e6a:	e7d7      	b.n	17e1c <hci_encrypt_key_refresh_complete+0x1c>
		BT_ERR("Failed to set required security level");
   17e6c:	2145      	movs	r1, #69	; 0x45
   17e6e:	4805      	ldr	r0, [pc, #20]	; (17e84 <hci_encrypt_key_refresh_complete+0x84>)
   17e70:	f013 f91c 	bl	2b0ac <z_log_minimal_printk>
		bt_conn_disconnect(conn, status);
   17e74:	4621      	mov	r1, r4
   17e76:	4628      	mov	r0, r5
   17e78:	f014 fde4 	bl	2ca44 <bt_conn_disconnect>
   17e7c:	e7d7      	b.n	17e2e <hci_encrypt_key_refresh_complete+0x2e>
   17e7e:	bf00      	nop
   17e80:	00032690 	.word	0x00032690
   17e84:	00032a8c 	.word	0x00032a8c

00017e88 <hci_encrypt_change>:
{
   17e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
   17e8a:	6886      	ldr	r6, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   17e8c:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	uint8_t status = evt->status;
   17e90:	7835      	ldrb	r5, [r6, #0]
	conn = bt_conn_lookup_handle(handle);
   17e92:	4638      	mov	r0, r7
   17e94:	f001 fec0 	bl	19c18 <bt_conn_lookup_handle>
	if (!conn) {
   17e98:	b198      	cbz	r0, 17ec2 <hci_encrypt_change+0x3a>
   17e9a:	4604      	mov	r4, r0
	if (status) {
   17e9c:	b9bd      	cbnz	r5, 17ece <hci_encrypt_change+0x46>
	conn->encrypt = evt->encrypt;
   17e9e:	78f3      	ldrb	r3, [r6, #3]
   17ea0:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
   17ea2:	7882      	ldrb	r2, [r0, #2]
   17ea4:	2a01      	cmp	r2, #1
   17ea6:	d01e      	beq.n	17ee6 <hci_encrypt_change+0x5e>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   17ea8:	4628      	mov	r0, r5
   17eaa:	f014 f97b 	bl	2c1a4 <bt_security_err_get>
   17eae:	4602      	mov	r2, r0
   17eb0:	4629      	mov	r1, r5
   17eb2:	4620      	mov	r0, r4
   17eb4:	f002 f8e2 	bl	1a07c <bt_conn_security_changed>
	if (status) {
   17eb8:	bb05      	cbnz	r5, 17efc <hci_encrypt_change+0x74>
	bt_conn_unref(conn);
   17eba:	4620      	mov	r0, r4
   17ebc:	f001 fe7a 	bl	19bb4 <bt_conn_unref>
}
   17ec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		BT_ERR("Unable to look up conn with handle %u", handle);
   17ec2:	463a      	mov	r2, r7
   17ec4:	2145      	movs	r1, #69	; 0x45
   17ec6:	4812      	ldr	r0, [pc, #72]	; (17f10 <hci_encrypt_change+0x88>)
   17ec8:	f013 f8f0 	bl	2b0ac <z_log_minimal_printk>
		return;
   17ecc:	e7f8      	b.n	17ec0 <hci_encrypt_change+0x38>
		bt_conn_security_changed(conn, status,
   17ece:	4628      	mov	r0, r5
   17ed0:	f014 f968 	bl	2c1a4 <bt_security_err_get>
   17ed4:	4602      	mov	r2, r0
   17ed6:	4629      	mov	r1, r5
   17ed8:	4620      	mov	r0, r4
   17eda:	f002 f8cf 	bl	1a07c <bt_conn_security_changed>
		bt_conn_unref(conn);
   17ede:	4620      	mov	r0, r4
   17ee0:	f001 fe68 	bl	19bb4 <bt_conn_unref>
		return;
   17ee4:	e7ec      	b.n	17ec0 <hci_encrypt_change+0x38>
		if (conn->encrypt) {
   17ee6:	b933      	cbnz	r3, 17ef6 <hci_encrypt_change+0x6e>
		if (!update_sec_level(conn)) {
   17ee8:	4620      	mov	r0, r4
   17eea:	f014 f848 	bl	2bf7e <update_sec_level>
   17eee:	2800      	cmp	r0, #0
   17ef0:	d1da      	bne.n	17ea8 <hci_encrypt_change+0x20>
			status = BT_HCI_ERR_AUTH_FAIL;
   17ef2:	2505      	movs	r5, #5
   17ef4:	e7d8      	b.n	17ea8 <hci_encrypt_change+0x20>
			bt_smp_update_keys(conn);
   17ef6:	f007 fd07 	bl	1f908 <bt_smp_update_keys>
   17efa:	e7f5      	b.n	17ee8 <hci_encrypt_change+0x60>
		BT_ERR("Failed to set required security level");
   17efc:	2145      	movs	r1, #69	; 0x45
   17efe:	4805      	ldr	r0, [pc, #20]	; (17f14 <hci_encrypt_change+0x8c>)
   17f00:	f013 f8d4 	bl	2b0ac <z_log_minimal_printk>
		bt_conn_disconnect(conn, status);
   17f04:	4629      	mov	r1, r5
   17f06:	4620      	mov	r0, r4
   17f08:	f014 fd9c 	bl	2ca44 <bt_conn_disconnect>
   17f0c:	e7d5      	b.n	17eba <hci_encrypt_change+0x32>
   17f0e:	bf00      	nop
   17f10:	00032690 	.word	0x00032690
   17f14:	00032a8c 	.word	0x00032a8c

00017f18 <bt_send>:
{
   17f18:	b508      	push	{r3, lr}
	return bt_dev.drv->send(buf);
   17f1a:	4b03      	ldr	r3, [pc, #12]	; (17f28 <bt_send+0x10>)
   17f1c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
   17f20:	695b      	ldr	r3, [r3, #20]
   17f22:	4798      	blx	r3
}
   17f24:	bd08      	pop	{r3, pc}
   17f26:	bf00      	nop
   17f28:	20000350 	.word	0x20000350

00017f2c <bt_hci_cmd_send>:
{
   17f2c:	b538      	push	{r3, r4, r5, lr}
   17f2e:	4604      	mov	r4, r0
	if (!buf) {
   17f30:	460d      	mov	r5, r1
   17f32:	b151      	cbz	r1, 17f4a <bt_hci_cmd_send+0x1e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   17f34:	f640 4335 	movw	r3, #3125	; 0xc35
   17f38:	429c      	cmp	r4, r3
   17f3a:	d00e      	beq.n	17f5a <bt_hci_cmd_send+0x2e>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   17f3c:	4629      	mov	r1, r5
   17f3e:	480e      	ldr	r0, [pc, #56]	; (17f78 <bt_hci_cmd_send+0x4c>)
   17f40:	f008 f9ee 	bl	20320 <net_buf_put>
	return 0;
   17f44:	2400      	movs	r4, #0
}
   17f46:	4620      	mov	r0, r4
   17f48:	bd38      	pop	{r3, r4, r5, pc}
		buf = bt_hci_cmd_create(opcode, 0);
   17f4a:	f7ff faeb 	bl	17524 <bt_hci_cmd_create>
		if (!buf) {
   17f4e:	4605      	mov	r5, r0
   17f50:	2800      	cmp	r0, #0
   17f52:	d1ef      	bne.n	17f34 <bt_hci_cmd_send+0x8>
			return -ENOBUFS;
   17f54:	f06f 0468 	mvn.w	r4, #104	; 0x68
   17f58:	e7f5      	b.n	17f46 <bt_hci_cmd_send+0x1a>
		err = bt_send(buf);
   17f5a:	4628      	mov	r0, r5
   17f5c:	f7ff ffdc 	bl	17f18 <bt_send>
		if (err) {
   17f60:	4604      	mov	r4, r0
   17f62:	2800      	cmp	r0, #0
   17f64:	d0ef      	beq.n	17f46 <bt_hci_cmd_send+0x1a>
			BT_ERR("Unable to send to driver (err %d)", err);
   17f66:	4602      	mov	r2, r0
   17f68:	2145      	movs	r1, #69	; 0x45
   17f6a:	4804      	ldr	r0, [pc, #16]	; (17f7c <bt_hci_cmd_send+0x50>)
   17f6c:	f013 f89e 	bl	2b0ac <z_log_minimal_printk>
			net_buf_unref(buf);
   17f70:	4628      	mov	r0, r5
   17f72:	f008 fa07 	bl	20384 <net_buf_unref>
		return err;
   17f76:	e7e6      	b.n	17f46 <bt_hci_cmd_send+0x1a>
   17f78:	20000494 	.word	0x20000494
   17f7c:	00032ab8 	.word	0x00032ab8

00017f80 <le_ltk_reply>:
{
   17f80:	b570      	push	{r4, r5, r6, lr}
   17f82:	4605      	mov	r5, r0
   17f84:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
   17f86:	2112      	movs	r1, #18
   17f88:	f242 001a 	movw	r0, #8218	; 0x201a
   17f8c:	f7ff faca 	bl	17524 <bt_hci_cmd_create>
	if (!buf) {
   17f90:	b1b8      	cbz	r0, 17fc2 <le_ltk_reply+0x42>
   17f92:	4606      	mov	r6, r0
   17f94:	2112      	movs	r1, #18
   17f96:	3008      	adds	r0, #8
   17f98:	f008 fb0c 	bl	205b4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   17f9c:	4603      	mov	r3, r0
   17f9e:	f823 5b02 	strh.w	r5, [r3], #2
   17fa2:	f8d4 c000 	ldr.w	ip, [r4]
   17fa6:	6865      	ldr	r5, [r4, #4]
   17fa8:	68a1      	ldr	r1, [r4, #8]
   17faa:	68e2      	ldr	r2, [r4, #12]
   17fac:	f8c0 c002 	str.w	ip, [r0, #2]
   17fb0:	605d      	str	r5, [r3, #4]
   17fb2:	6099      	str	r1, [r3, #8]
   17fb4:	60da      	str	r2, [r3, #12]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
   17fb6:	4631      	mov	r1, r6
   17fb8:	f242 001a 	movw	r0, #8218	; 0x201a
   17fbc:	f7ff ffb6 	bl	17f2c <bt_hci_cmd_send>
}
   17fc0:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Out of command buffers");
   17fc2:	2145      	movs	r1, #69	; 0x45
   17fc4:	4801      	ldr	r0, [pc, #4]	; (17fcc <le_ltk_reply+0x4c>)
   17fc6:	f013 f871 	bl	2b0ac <z_log_minimal_printk>
		return;
   17fca:	e7f9      	b.n	17fc0 <le_ltk_reply+0x40>
   17fcc:	00032ae0 	.word	0x00032ae0

00017fd0 <le_ltk_neg_reply>:
{
   17fd0:	b538      	push	{r3, r4, r5, lr}
   17fd2:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
   17fd4:	2102      	movs	r1, #2
   17fd6:	f242 001b 	movw	r0, #8219	; 0x201b
   17fda:	f7ff faa3 	bl	17524 <bt_hci_cmd_create>
	if (!buf) {
   17fde:	b158      	cbz	r0, 17ff8 <le_ltk_neg_reply+0x28>
   17fe0:	4605      	mov	r5, r0
   17fe2:	2102      	movs	r1, #2
   17fe4:	3008      	adds	r0, #8
   17fe6:	f008 fae5 	bl	205b4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   17fea:	8004      	strh	r4, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   17fec:	4629      	mov	r1, r5
   17fee:	f242 001b 	movw	r0, #8219	; 0x201b
   17ff2:	f7ff ff9b 	bl	17f2c <bt_hci_cmd_send>
}
   17ff6:	bd38      	pop	{r3, r4, r5, pc}
		BT_ERR("Out of command buffers");
   17ff8:	2145      	movs	r1, #69	; 0x45
   17ffa:	4802      	ldr	r0, [pc, #8]	; (18004 <le_ltk_neg_reply+0x34>)
   17ffc:	f013 f856 	bl	2b0ac <z_log_minimal_printk>
		return;
   18000:	e7f9      	b.n	17ff6 <le_ltk_neg_reply+0x26>
   18002:	bf00      	nop
   18004:	00032ae0 	.word	0x00032ae0

00018008 <le_ltk_request>:
{
   18008:	b570      	push	{r4, r5, r6, lr}
   1800a:	b086      	sub	sp, #24
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
   1800c:	6884      	ldr	r4, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   1800e:	8825      	ldrh	r5, [r4, #0]
	conn = bt_conn_lookup_handle(handle);
   18010:	4628      	mov	r0, r5
   18012:	f001 fe01 	bl	19c18 <bt_conn_lookup_handle>
	if (!conn) {
   18016:	b1a0      	cbz	r0, 18042 <le_ltk_request+0x3a>
   18018:	4606      	mov	r6, r0
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
   1801a:	f8d4 2002 	ldr.w	r2, [r4, #2]
   1801e:	f8d4 3006 	ldr.w	r3, [r4, #6]
   18022:	a902      	add	r1, sp, #8
   18024:	9101      	str	r1, [sp, #4]
   18026:	8961      	ldrh	r1, [r4, #10]
   18028:	9100      	str	r1, [sp, #0]
   1802a:	f016 fdc7 	bl	2ebbc <bt_smp_request_ltk>
   1802e:	b170      	cbz	r0, 1804e <le_ltk_request+0x46>
		le_ltk_reply(handle, ltk);
   18030:	a902      	add	r1, sp, #8
   18032:	4628      	mov	r0, r5
   18034:	f7ff ffa4 	bl	17f80 <le_ltk_reply>
	bt_conn_unref(conn);
   18038:	4630      	mov	r0, r6
   1803a:	f001 fdbb 	bl	19bb4 <bt_conn_unref>
}
   1803e:	b006      	add	sp, #24
   18040:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   18042:	462a      	mov	r2, r5
   18044:	2145      	movs	r1, #69	; 0x45
   18046:	4804      	ldr	r0, [pc, #16]	; (18058 <le_ltk_request+0x50>)
   18048:	f013 f830 	bl	2b0ac <z_log_minimal_printk>
		return;
   1804c:	e7f7      	b.n	1803e <le_ltk_request+0x36>
		le_ltk_neg_reply(handle);
   1804e:	4628      	mov	r0, r5
   18050:	f7ff ffbe 	bl	17fd0 <le_ltk_neg_reply>
   18054:	e7f0      	b.n	18038 <le_ltk_request+0x30>
   18056:	bf00      	nop
   18058:	000326bc 	.word	0x000326bc

0001805c <le_conn_param_neg_reply>:
{
   1805c:	b570      	push	{r4, r5, r6, lr}
   1805e:	4605      	mov	r5, r0
   18060:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   18062:	2103      	movs	r1, #3
   18064:	f242 0021 	movw	r0, #8225	; 0x2021
   18068:	f7ff fa5c 	bl	17524 <bt_hci_cmd_create>
	if (!buf) {
   1806c:	b160      	cbz	r0, 18088 <le_conn_param_neg_reply+0x2c>
   1806e:	4606      	mov	r6, r0
   18070:	2103      	movs	r1, #3
   18072:	3008      	adds	r0, #8
   18074:	f008 fa9e 	bl	205b4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   18078:	8005      	strh	r5, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   1807a:	7084      	strb	r4, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1807c:	4631      	mov	r1, r6
   1807e:	f242 0021 	movw	r0, #8225	; 0x2021
   18082:	f7ff ff53 	bl	17f2c <bt_hci_cmd_send>
}
   18086:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Unable to allocate buffer");
   18088:	2145      	movs	r1, #69	; 0x45
   1808a:	4802      	ldr	r0, [pc, #8]	; (18094 <le_conn_param_neg_reply+0x38>)
   1808c:	f013 f80e 	bl	2b0ac <z_log_minimal_printk>
		return;
   18090:	e7f9      	b.n	18086 <le_conn_param_neg_reply+0x2a>
   18092:	bf00      	nop
   18094:	00032afc 	.word	0x00032afc

00018098 <le_conn_param_req>:
{
   18098:	b530      	push	{r4, r5, lr}
   1809a:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   1809c:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   1809e:	881c      	ldrh	r4, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   180a0:	885a      	ldrh	r2, [r3, #2]
   180a2:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   180a6:	889a      	ldrh	r2, [r3, #4]
   180a8:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   180ac:	88da      	ldrh	r2, [r3, #6]
   180ae:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   180b2:	891b      	ldrh	r3, [r3, #8]
   180b4:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   180b8:	4620      	mov	r0, r4
   180ba:	f001 fdad 	bl	19c18 <bt_conn_lookup_handle>
	if (!conn) {
   180be:	b168      	cbz	r0, 180dc <le_conn_param_req+0x44>
   180c0:	4605      	mov	r5, r0
	if (!le_param_req(conn, &param)) {
   180c2:	4669      	mov	r1, sp
   180c4:	f001 ff48 	bl	19f58 <le_param_req>
   180c8:	b990      	cbnz	r0, 180f0 <le_conn_param_req+0x58>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   180ca:	211e      	movs	r1, #30
   180cc:	4620      	mov	r0, r4
   180ce:	f7ff ffc5 	bl	1805c <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   180d2:	4628      	mov	r0, r5
   180d4:	f001 fd6e 	bl	19bb4 <bt_conn_unref>
}
   180d8:	b003      	add	sp, #12
   180da:	bd30      	pop	{r4, r5, pc}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   180dc:	4622      	mov	r2, r4
   180de:	2145      	movs	r1, #69	; 0x45
   180e0:	4806      	ldr	r0, [pc, #24]	; (180fc <le_conn_param_req+0x64>)
   180e2:	f012 ffe3 	bl	2b0ac <z_log_minimal_printk>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   180e6:	2102      	movs	r1, #2
   180e8:	4620      	mov	r0, r4
   180ea:	f7ff ffb7 	bl	1805c <le_conn_param_neg_reply>
		return;
   180ee:	e7f3      	b.n	180d8 <le_conn_param_req+0x40>
		le_conn_param_req_reply(handle, &param);
   180f0:	4669      	mov	r1, sp
   180f2:	4620      	mov	r0, r4
   180f4:	f014 f87b 	bl	2c1ee <le_conn_param_req_reply>
   180f8:	e7eb      	b.n	180d2 <le_conn_param_req+0x3a>
   180fa:	bf00      	nop
   180fc:	000326bc 	.word	0x000326bc

00018100 <send_cmd>:
{
   18100:	b538      	push	{r3, r4, r5, lr}
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   18102:	2200      	movs	r2, #0
   18104:	2300      	movs	r3, #0
   18106:	4826      	ldr	r0, [pc, #152]	; (181a0 <send_cmd+0xa0>)
   18108:	f007 ffce 	bl	200a8 <net_buf_get>
	BT_ASSERT(buf);
   1810c:	4604      	mov	r4, r0
   1810e:	b310      	cbz	r0, 18156 <send_cmd+0x56>
   18110:	4d24      	ldr	r5, [pc, #144]	; (181a4 <send_cmd+0xa4>)
   18112:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   18116:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1811a:	f505 7090 	add.w	r0, r5, #288	; 0x120
   1811e:	f00e fb43 	bl	267a8 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   18122:	f8d5 3138 	ldr.w	r3, [r5, #312]	; 0x138
   18126:	b153      	cbz	r3, 1813e <send_cmd+0x3e>
		BT_ERR("Uncleared pending sent_cmd");
   18128:	2145      	movs	r1, #69	; 0x45
   1812a:	481f      	ldr	r0, [pc, #124]	; (181a8 <send_cmd+0xa8>)
   1812c:	f012 ffbe 	bl	2b0ac <z_log_minimal_printk>
		net_buf_unref(bt_dev.sent_cmd);
   18130:	f8d5 0138 	ldr.w	r0, [r5, #312]	; 0x138
   18134:	f008 f926 	bl	20384 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   18138:	2300      	movs	r3, #0
   1813a:	f8c5 3138 	str.w	r3, [r5, #312]	; 0x138
	bt_dev.sent_cmd = net_buf_ref(buf);
   1813e:	4620      	mov	r0, r4
   18140:	f008 f958 	bl	203f4 <net_buf_ref>
   18144:	4b17      	ldr	r3, [pc, #92]	; (181a4 <send_cmd+0xa4>)
   18146:	f8c3 0138 	str.w	r0, [r3, #312]	; 0x138
	err = bt_send(buf);
   1814a:	4620      	mov	r0, r4
   1814c:	f7ff fee4 	bl	17f18 <bt_send>
	if (err) {
   18150:	4602      	mov	r2, r0
   18152:	b968      	cbnz	r0, 18170 <send_cmd+0x70>
}
   18154:	bd38      	pop	{r3, r4, r5, pc}
	BT_ASSERT(buf);
   18156:	f640 126c 	movw	r2, #2412	; 0x96c
   1815a:	4914      	ldr	r1, [pc, #80]	; (181ac <send_cmd+0xac>)
   1815c:	4814      	ldr	r0, [pc, #80]	; (181b0 <send_cmd+0xb0>)
   1815e:	f012 ff96 	bl	2b08e <assert_print>
   18162:	4040      	eors	r0, r0
   18164:	f380 8811 	msr	BASEPRI, r0
   18168:	f04f 0003 	mov.w	r0, #3
   1816c:	df02      	svc	2
   1816e:	e7cf      	b.n	18110 <send_cmd+0x10>
		BT_ERR("Unable to send to driver (err %d)", err);
   18170:	2145      	movs	r1, #69	; 0x45
   18172:	4810      	ldr	r0, [pc, #64]	; (181b4 <send_cmd+0xb4>)
   18174:	f012 ff9a 	bl	2b0ac <z_log_minimal_printk>
	z_impl_k_sem_give(sem);
   18178:	480f      	ldr	r0, [pc, #60]	; (181b8 <send_cmd+0xb8>)
   1817a:	f00e fad7 	bl	2672c <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   1817e:	4620      	mov	r0, r4
   18180:	f016 ffbd 	bl	2f0fe <net_buf_id>
   18184:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   18188:	4b0c      	ldr	r3, [pc, #48]	; (181bc <send_cmd+0xbc>)
   1818a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1818e:	4622      	mov	r2, r4
   18190:	211f      	movs	r1, #31
   18192:	8840      	ldrh	r0, [r0, #2]
   18194:	f7fe ff76 	bl	17084 <hci_cmd_done>
		net_buf_unref(buf);
   18198:	4620      	mov	r0, r4
   1819a:	f008 f8f3 	bl	20384 <net_buf_unref>
   1819e:	e7d9      	b.n	18154 <send_cmd+0x54>
   181a0:	20000494 	.word	0x20000494
   181a4:	20000350 	.word	0x20000350
   181a8:	00032b1c 	.word	0x00032b1c
   181ac:	00032810 	.word	0x00032810
   181b0:	000318f8 	.word	0x000318f8
   181b4:	00032ab8 	.word	0x00032ab8
   181b8:	20000470 	.word	0x20000470
   181bc:	200025ac 	.word	0x200025ac

000181c0 <process_events>:
{
   181c0:	b538      	push	{r3, r4, r5, lr}
   181c2:	4604      	mov	r4, r0
   181c4:	460d      	mov	r5, r1
	BT_DBG("count %d", count);
   181c6:	e008      	b.n	181da <process_events+0x1a>
				send_cmd();
   181c8:	f7ff ff9a 	bl	18100 <send_cmd>
   181cc:	e003      	b.n	181d6 <process_events+0x16>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
   181ce:	2157      	movs	r1, #87	; 0x57
   181d0:	480b      	ldr	r0, [pc, #44]	; (18200 <process_events+0x40>)
   181d2:	f012 ff6b 	bl	2b0ac <z_log_minimal_printk>
	for (; count; ev++, count--) {
   181d6:	3414      	adds	r4, #20
   181d8:	3d01      	subs	r5, #1
   181da:	b185      	cbz	r5, 181fe <process_events+0x3e>
		switch (ev->state) {
   181dc:	68e2      	ldr	r2, [r4, #12]
   181de:	f3c2 3245 	ubfx	r2, r2, #13, #6
   181e2:	2a01      	cmp	r2, #1
   181e4:	d9f7      	bls.n	181d6 <process_events+0x16>
   181e6:	2a04      	cmp	r2, #4
   181e8:	d1f1      	bne.n	181ce <process_events+0xe>
			if (ev->tag == BT_EVENT_CMD_TX) {
   181ea:	7b23      	ldrb	r3, [r4, #12]
   181ec:	2b00      	cmp	r3, #0
   181ee:	d0eb      	beq.n	181c8 <process_events+0x8>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   181f0:	2b01      	cmp	r3, #1
   181f2:	d1f0      	bne.n	181d6 <process_events+0x16>
					conn = CONTAINER_OF(ev->fifo,
   181f4:	6920      	ldr	r0, [r4, #16]
					bt_conn_process_tx(conn);
   181f6:	3838      	subs	r0, #56	; 0x38
   181f8:	f002 f922 	bl	1a440 <bt_conn_process_tx>
   181fc:	e7eb      	b.n	181d6 <process_events+0x16>
}
   181fe:	bd38      	pop	{r3, r4, r5, pc}
   18200:	00032b3c 	.word	0x00032b3c

00018204 <hci_tx_thread>:
{
   18204:	b538      	push	{r3, r4, r5, lr}
   18206:	e011      	b.n	1822c <hci_tx_thread+0x28>
		BT_ASSERT(err == 0);
   18208:	f640 12d3 	movw	r2, #2515	; 0x9d3
   1820c:	4912      	ldr	r1, [pc, #72]	; (18258 <hci_tx_thread+0x54>)
   1820e:	4813      	ldr	r0, [pc, #76]	; (1825c <hci_tx_thread+0x58>)
   18210:	f012 ff3d 	bl	2b08e <assert_print>
   18214:	4040      	eors	r0, r0
   18216:	f380 8811 	msr	BASEPRI, r0
   1821a:	f04f 0003 	mov.w	r0, #3
   1821e:	df02      	svc	2
		process_events(events, ev_count);
   18220:	4621      	mov	r1, r4
   18222:	480f      	ldr	r0, [pc, #60]	; (18260 <hci_tx_thread+0x5c>)
   18224:	f7ff ffcc 	bl	181c0 <process_events>
	z_impl_k_yield();
   18228:	f010 f86e 	bl	28308 <z_impl_k_yield>
		events[0].state = K_POLL_STATE_NOT_READY;
   1822c:	4d0c      	ldr	r5, [pc, #48]	; (18260 <hci_tx_thread+0x5c>)
   1822e:	68eb      	ldr	r3, [r5, #12]
   18230:	f36f 3352 	bfc	r3, #13, #6
   18234:	60eb      	str	r3, [r5, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   18236:	f105 0014 	add.w	r0, r5, #20
   1823a:	f001 fc97 	bl	19b6c <bt_conn_prepare_events>
   1823e:	1c44      	adds	r4, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
   18240:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   18244:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18248:	4621      	mov	r1, r4
   1824a:	4628      	mov	r0, r5
   1824c:	f011 fa52 	bl	296f4 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   18250:	2800      	cmp	r0, #0
   18252:	d1d9      	bne.n	18208 <hci_tx_thread+0x4>
   18254:	e7e4      	b.n	18220 <hci_tx_thread+0x1c>
   18256:	bf00      	nop
   18258:	00032810 	.word	0x00032810
   1825c:	000318f8 	.word	0x000318f8
   18260:	20000684 	.word	0x20000684

00018264 <hci_event_prio>:
{
   18264:	b570      	push	{r4, r5, r6, lr}
   18266:	b082      	sub	sp, #8
   18268:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   1826a:	f100 0508 	add.w	r5, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   1826e:	4628      	mov	r0, r5
   18270:	f016 ff79 	bl	2f166 <net_buf_simple_headroom>
   18274:	f8ad 0004 	strh.w	r0, [sp, #4]
	state->len = buf->len;
   18278:	89a3      	ldrh	r3, [r4, #12]
   1827a:	f8ad 3006 	strh.w	r3, [sp, #6]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   1827e:	2b01      	cmp	r3, #1
   18280:	d915      	bls.n	182ae <hci_event_prio+0x4a>
	return net_buf_simple_pull_mem(&buf->b, len);
   18282:	2102      	movs	r1, #2
   18284:	4628      	mov	r0, r5
   18286:	f008 f955 	bl	20534 <net_buf_simple_pull_mem>
   1828a:	4605      	mov	r5, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1828c:	7803      	ldrb	r3, [r0, #0]
	switch (evt) {
   1828e:	3b05      	subs	r3, #5
   18290:	2b15      	cmp	r3, #21
   18292:	d81b      	bhi.n	182cc <hci_event_prio+0x68>
   18294:	e8df f003 	tbb	[pc, r3]
   18298:	1a1a1a18 	.word	0x1a1a1a18
   1829c:	1a1a1a1a 	.word	0x1a1a1a1a
   182a0:	1a31311a 	.word	0x1a31311a
   182a4:	1a311a1a 	.word	0x1a311a1a
   182a8:	1a1a1a1a 	.word	0x1a1a1a1a
   182ac:	311a      	.short	0x311a
	BT_ASSERT(buf->len >= sizeof(*hdr));
   182ae:	f640 526f 	movw	r2, #3439	; 0xd6f
   182b2:	491b      	ldr	r1, [pc, #108]	; (18320 <hci_event_prio+0xbc>)
   182b4:	481b      	ldr	r0, [pc, #108]	; (18324 <hci_event_prio+0xc0>)
   182b6:	f012 feea 	bl	2b08e <assert_print>
   182ba:	4040      	eors	r0, r0
   182bc:	f380 8811 	msr	BASEPRI, r0
   182c0:	f04f 0003 	mov.w	r0, #3
   182c4:	df02      	svc	2
   182c6:	e7dc      	b.n	18282 <hci_event_prio+0x1e>
   182c8:	2603      	movs	r6, #3
   182ca:	e000      	b.n	182ce <hci_event_prio+0x6a>
		return BT_HCI_EVT_FLAG_RECV;
   182cc:	2602      	movs	r6, #2
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   182ce:	f016 0f01 	tst.w	r6, #1
   182d2:	d014      	beq.n	182fe <hci_event_prio+0x9a>
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   182d4:	2305      	movs	r3, #5
   182d6:	4a14      	ldr	r2, [pc, #80]	; (18328 <hci_event_prio+0xc4>)
   182d8:	4621      	mov	r1, r4
   182da:	7828      	ldrb	r0, [r5, #0]
   182dc:	f7fe ffac 	bl	17238 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   182e0:	f016 0f02 	tst.w	r6, #2
   182e4:	d018      	beq.n	18318 <hci_event_prio+0xb4>
	buf->data = buf->__buf + state->offset;
   182e6:	6923      	ldr	r3, [r4, #16]
   182e8:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   182ec:	4413      	add	r3, r2
   182ee:	60a3      	str	r3, [r4, #8]
	buf->len = state->len;
   182f0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   182f4:	81a3      	strh	r3, [r4, #12]
}
   182f6:	b002      	add	sp, #8
   182f8:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_EVT_FLAG_RECV_PRIO;
   182fa:	2601      	movs	r6, #1
   182fc:	e7e7      	b.n	182ce <hci_event_prio+0x6a>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   182fe:	f640 5273 	movw	r2, #3443	; 0xd73
   18302:	4907      	ldr	r1, [pc, #28]	; (18320 <hci_event_prio+0xbc>)
   18304:	4807      	ldr	r0, [pc, #28]	; (18324 <hci_event_prio+0xc0>)
   18306:	f012 fec2 	bl	2b08e <assert_print>
   1830a:	4040      	eors	r0, r0
   1830c:	f380 8811 	msr	BASEPRI, r0
   18310:	f04f 0003 	mov.w	r0, #3
   18314:	df02      	svc	2
   18316:	e7dd      	b.n	182d4 <hci_event_prio+0x70>
		net_buf_unref(buf);
   18318:	4620      	mov	r0, r4
   1831a:	f008 f833 	bl	20384 <net_buf_unref>
}
   1831e:	e7ea      	b.n	182f6 <hci_event_prio+0x92>
   18320:	00032810 	.word	0x00032810
   18324:	000318f8 	.word	0x000318f8
   18328:	00032ca4 	.word	0x00032ca4

0001832c <bt_recv>:
{
   1832c:	b538      	push	{r3, r4, r5, lr}
   1832e:	4604      	mov	r4, r0
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   18330:	7d05      	ldrb	r5, [r0, #20]
	switch (bt_buf_get_type(buf)) {
   18332:	2d01      	cmp	r5, #1
   18334:	d006      	beq.n	18344 <bt_recv+0x18>
   18336:	462a      	mov	r2, r5
   18338:	2d03      	cmp	r5, #3
   1833a:	d129      	bne.n	18390 <bt_recv+0x64>
		rx_queue_put(buf);
   1833c:	f7fe ffa6 	bl	1728c <rx_queue_put>
		return 0;
   18340:	2000      	movs	r0, #0
}
   18342:	bd38      	pop	{r3, r4, r5, pc}
		struct bt_hci_evt_hdr *hdr = (void *)buf->data;
   18344:	6883      	ldr	r3, [r0, #8]
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   18346:	781b      	ldrb	r3, [r3, #0]
	switch (evt) {
   18348:	3b05      	subs	r3, #5
   1834a:	2b15      	cmp	r3, #21
   1834c:	d80e      	bhi.n	1836c <bt_recv+0x40>
   1834e:	e8df f003 	tbb	[pc, r3]
   18352:	0d0b      	.short	0x0d0b
   18354:	0d0d0d0d 	.word	0x0d0d0d0d
   18358:	0e0d0d0d 	.word	0x0e0d0d0d
   1835c:	0d0d0d0e 	.word	0x0d0d0d0e
   18360:	0d0d0d0e 	.word	0x0d0d0d0e
   18364:	0e0d0d0d 	.word	0x0e0d0d0d
   18368:	2503      	movs	r5, #3
   1836a:	e000      	b.n	1836e <bt_recv+0x42>
		return BT_HCI_EVT_FLAG_RECV;
   1836c:	2502      	movs	r5, #2
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   1836e:	f015 0f01 	tst.w	r5, #1
   18372:	d104      	bne.n	1837e <bt_recv+0x52>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   18374:	f015 0f02 	tst.w	r5, #2
   18378:	d105      	bne.n	18386 <bt_recv+0x5a>
		return 0;
   1837a:	2000      	movs	r0, #0
   1837c:	e7e1      	b.n	18342 <bt_recv+0x16>
			hci_event_prio(buf);
   1837e:	4620      	mov	r0, r4
   18380:	f7ff ff70 	bl	18264 <hci_event_prio>
   18384:	e7f6      	b.n	18374 <bt_recv+0x48>
			rx_queue_put(buf);
   18386:	4620      	mov	r0, r4
   18388:	f7fe ff80 	bl	1728c <rx_queue_put>
		return 0;
   1838c:	2000      	movs	r0, #0
   1838e:	e7d8      	b.n	18342 <bt_recv+0x16>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   18390:	2145      	movs	r1, #69	; 0x45
   18392:	4804      	ldr	r0, [pc, #16]	; (183a4 <bt_recv+0x78>)
   18394:	f012 fe8a 	bl	2b0ac <z_log_minimal_printk>
		net_buf_unref(buf);
   18398:	4620      	mov	r0, r4
   1839a:	f007 fff3 	bl	20384 <net_buf_unref>
		return -EINVAL;
   1839e:	f06f 0015 	mvn.w	r0, #21
   183a2:	e7ce      	b.n	18342 <bt_recv+0x16>
   183a4:	00032b64 	.word	0x00032b64

000183a8 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   183a8:	4b0a      	ldr	r3, [pc, #40]	; (183d4 <bt_hci_driver_register+0x2c>)
   183aa:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
   183ae:	b943      	cbnz	r3, 183c2 <bt_hci_driver_register+0x1a>
	if (!drv->open || !drv->send) {
   183b0:	68c3      	ldr	r3, [r0, #12]
   183b2:	b14b      	cbz	r3, 183c8 <bt_hci_driver_register+0x20>
   183b4:	6943      	ldr	r3, [r0, #20]
   183b6:	b153      	cbz	r3, 183ce <bt_hci_driver_register+0x26>
	bt_dev.drv = drv;
   183b8:	4b06      	ldr	r3, [pc, #24]	; (183d4 <bt_hci_driver_register+0x2c>)
   183ba:	f8c3 0160 	str.w	r0, [r3, #352]	; 0x160
	return 0;
   183be:	2000      	movs	r0, #0
   183c0:	4770      	bx	lr
		return -EALREADY;
   183c2:	f06f 0077 	mvn.w	r0, #119	; 0x77
   183c6:	4770      	bx	lr
		return -EINVAL;
   183c8:	f06f 0015 	mvn.w	r0, #21
   183cc:	4770      	bx	lr
   183ce:	f06f 0015 	mvn.w	r0, #21
}
   183d2:	4770      	bx	lr
   183d4:	20000350 	.word	0x20000350

000183d8 <bt_finalize_init>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   183d8:	4b06      	ldr	r3, [pc, #24]	; (183f4 <bt_finalize_init+0x1c>)
   183da:	f3bf 8f5b 	dmb	ish
   183de:	e853 2f00 	ldrex	r2, [r3]
   183e2:	f042 0204 	orr.w	r2, r2, #4
   183e6:	e843 2100 	strex	r1, r2, [r3]
   183ea:	2900      	cmp	r1, #0
   183ec:	d1f7      	bne.n	183de <bt_finalize_init+0x6>
   183ee:	f3bf 8f5b 	dmb	ish
}
   183f2:	4770      	bx	lr
   183f4:	2000041c 	.word	0x2000041c

000183f8 <bt_init>:
{
   183f8:	b510      	push	{r4, lr}
	err = hci_init();
   183fa:	f7ff fb5d 	bl	17ab8 <hci_init>
	if (err) {
   183fe:	4604      	mov	r4, r0
   18400:	b9a8      	cbnz	r0, 1842e <bt_init+0x36>
		err = bt_conn_init();
   18402:	f002 f8a1 	bl	1a548 <bt_conn_init>
		if (err) {
   18406:	4604      	mov	r4, r0
   18408:	b988      	cbnz	r0, 1842e <bt_init+0x36>
		if (!bt_dev.id_count) {
   1840a:	4b0c      	ldr	r3, [pc, #48]	; (1843c <bt_init+0x44>)
   1840c:	79db      	ldrb	r3, [r3, #7]
   1840e:	b183      	cbz	r3, 18432 <bt_init+0x3a>
   18410:	4b0b      	ldr	r3, [pc, #44]	; (18440 <bt_init+0x48>)
   18412:	f3bf 8f5b 	dmb	ish
   18416:	e853 2f00 	ldrex	r2, [r3]
   1841a:	f042 0208 	orr.w	r2, r2, #8
   1841e:	e843 2100 	strex	r1, r2, [r3]
   18422:	2900      	cmp	r1, #0
   18424:	d1f7      	bne.n	18416 <bt_init+0x1e>
   18426:	f3bf 8f5b 	dmb	ish
	bt_finalize_init();
   1842a:	f7ff ffd5 	bl	183d8 <bt_finalize_init>
}
   1842e:	4620      	mov	r0, r4
   18430:	bd10      	pop	{r4, pc}
			BT_INFO("No ID address. App must call settings_load()");
   18432:	2149      	movs	r1, #73	; 0x49
   18434:	4803      	ldr	r0, [pc, #12]	; (18444 <bt_init+0x4c>)
   18436:	f012 fe39 	bl	2b0ac <z_log_minimal_printk>
			return 0;
   1843a:	e7f8      	b.n	1842e <bt_init+0x36>
   1843c:	20000350 	.word	0x20000350
   18440:	2000041c 	.word	0x2000041c
   18444:	00032b80 	.word	0x00032b80

00018448 <init_work>:
{
   18448:	b508      	push	{r3, lr}
	err = bt_init();
   1844a:	f7ff ffd5 	bl	183f8 <bt_init>
	if (ready_cb) {
   1844e:	4b02      	ldr	r3, [pc, #8]	; (18458 <init_work+0x10>)
   18450:	681b      	ldr	r3, [r3, #0]
   18452:	b103      	cbz	r3, 18456 <init_work+0xe>
		ready_cb(err);
   18454:	4798      	blx	r3
}
   18456:	bd08      	pop	{r3, pc}
   18458:	200025c8 	.word	0x200025c8

0001845c <bt_enable>:
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
   1845c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1845e:	b089      	sub	sp, #36	; 0x24
	int err;

	if (!bt_dev.drv) {
   18460:	4b3c      	ldr	r3, [pc, #240]	; (18554 <bt_enable+0xf8>)
   18462:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
   18466:	b31b      	cbz	r3, 184b0 <bt_enable+0x54>
   18468:	4605      	mov	r5, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1846a:	4b3b      	ldr	r3, [pc, #236]	; (18558 <bt_enable+0xfc>)
   1846c:	f3bf 8f5b 	dmb	ish
   18470:	e853 2f00 	ldrex	r2, [r3]
   18474:	f022 0202 	bic.w	r2, r2, #2
   18478:	e843 2100 	strex	r1, r2, [r3]
   1847c:	2900      	cmp	r1, #0
   1847e:	d1f7      	bne.n	18470 <bt_enable+0x14>
   18480:	f3bf 8f5b 	dmb	ish
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18484:	f3bf 8f5b 	dmb	ish
   18488:	e853 2f00 	ldrex	r2, [r3]
   1848c:	f042 0101 	orr.w	r1, r2, #1
   18490:	e843 1000 	strex	r0, r1, [r3]
   18494:	2800      	cmp	r0, #0
   18496:	d1f7      	bne.n	18488 <bt_enable+0x2c>
   18498:	f3bf 8f5b 	dmb	ish
		return -ENODEV;
	}

	atomic_clear_bit(bt_dev.flags, BT_DEV_DISABLE);

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   1849c:	f012 0f01 	tst.w	r2, #1
   184a0:	d155      	bne.n	1854e <bt_enable+0xf2>
		return -EALREADY;
	}

	if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		err = bt_settings_init();
   184a2:	f7fe faab 	bl	169fc <bt_settings_init>
		if (err) {
   184a6:	4604      	mov	r4, r0
   184a8:	b148      	cbz	r0, 184be <bt_enable+0x62>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   184aa:	4620      	mov	r0, r4
   184ac:	b009      	add	sp, #36	; 0x24
   184ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BT_ERR("No HCI driver registered");
   184b0:	2145      	movs	r1, #69	; 0x45
   184b2:	482a      	ldr	r0, [pc, #168]	; (1855c <bt_enable+0x100>)
   184b4:	f012 fdfa 	bl	2b0ac <z_log_minimal_printk>
		return -ENODEV;
   184b8:	f06f 0412 	mvn.w	r4, #18
   184bc:	e7f5      	b.n	184aa <bt_enable+0x4e>
	ready_cb = cb;
   184be:	4b28      	ldr	r3, [pc, #160]	; (18560 <bt_enable+0x104>)
   184c0:	601d      	str	r5, [r3, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   184c2:	4e24      	ldr	r6, [pc, #144]	; (18554 <bt_enable+0xf8>)
   184c4:	2201      	movs	r2, #1
   184c6:	4611      	mov	r1, r2
   184c8:	f506 7090 	add.w	r0, r6, #288	; 0x120
   184cc:	f018 faa0 	bl	30a10 <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
   184d0:	f506 70a2 	add.w	r0, r6, #324	; 0x144
   184d4:	f018 fa78 	bl	309c8 <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   184d8:	4f22      	ldr	r7, [pc, #136]	; (18564 <bt_enable+0x108>)
   184da:	2200      	movs	r2, #0
   184dc:	2300      	movs	r3, #0
   184de:	e9cd 2306 	strd	r2, r3, [sp, #24]
   184e2:	2400      	movs	r4, #0
   184e4:	9404      	str	r4, [sp, #16]
   184e6:	f06f 0308 	mvn.w	r3, #8
   184ea:	9303      	str	r3, [sp, #12]
   184ec:	9402      	str	r4, [sp, #8]
   184ee:	9401      	str	r4, [sp, #4]
   184f0:	9400      	str	r4, [sp, #0]
   184f2:	4b1d      	ldr	r3, [pc, #116]	; (18568 <bt_enable+0x10c>)
   184f4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   184f8:	491c      	ldr	r1, [pc, #112]	; (1856c <bt_enable+0x110>)
   184fa:	4638      	mov	r0, r7
   184fc:	f00d fd2c 	bl	25f58 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   18500:	491b      	ldr	r1, [pc, #108]	; (18570 <bt_enable+0x114>)
   18502:	4638      	mov	r0, r7
   18504:	f018 fa13 	bl	3092e <z_impl_k_thread_name_set>
	k_work_queue_start(&bt_workq, rx_thread_stack,
   18508:	4f1a      	ldr	r7, [pc, #104]	; (18574 <bt_enable+0x118>)
   1850a:	9400      	str	r4, [sp, #0]
   1850c:	f06f 0307 	mvn.w	r3, #7
   18510:	f640 0298 	movw	r2, #2200	; 0x898
   18514:	4918      	ldr	r1, [pc, #96]	; (18578 <bt_enable+0x11c>)
   18516:	4638      	mov	r0, r7
   18518:	f00e fcc6 	bl	26ea8 <k_work_queue_start>
   1851c:	4917      	ldr	r1, [pc, #92]	; (1857c <bt_enable+0x120>)
   1851e:	4638      	mov	r0, r7
   18520:	f018 fa05 	bl	3092e <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   18524:	f8d6 3160 	ldr.w	r3, [r6, #352]	; 0x160
   18528:	68db      	ldr	r3, [r3, #12]
   1852a:	4798      	blx	r3
	if (err) {
   1852c:	4604      	mov	r4, r0
   1852e:	b920      	cbnz	r0, 1853a <bt_enable+0xde>
	if (!cb) {
   18530:	b14d      	cbz	r5, 18546 <bt_enable+0xea>
	k_work_submit(&bt_dev.init);
   18532:	4813      	ldr	r0, [pc, #76]	; (18580 <bt_enable+0x124>)
   18534:	f00e fc96 	bl	26e64 <k_work_submit>
	return 0;
   18538:	e7b7      	b.n	184aa <bt_enable+0x4e>
		BT_ERR("HCI driver open failed (%d)", err);
   1853a:	4602      	mov	r2, r0
   1853c:	2145      	movs	r1, #69	; 0x45
   1853e:	4811      	ldr	r0, [pc, #68]	; (18584 <bt_enable+0x128>)
   18540:	f012 fdb4 	bl	2b0ac <z_log_minimal_printk>
		return err;
   18544:	e7b1      	b.n	184aa <bt_enable+0x4e>
		return bt_init();
   18546:	f7ff ff57 	bl	183f8 <bt_init>
   1854a:	4604      	mov	r4, r0
   1854c:	e7ad      	b.n	184aa <bt_enable+0x4e>
		return -EALREADY;
   1854e:	f06f 0477 	mvn.w	r4, #119	; 0x77
   18552:	e7aa      	b.n	184aa <bt_enable+0x4e>
   18554:	20000350 	.word	0x20000350
   18558:	2000041c 	.word	0x2000041c
   1855c:	00032bb4 	.word	0x00032bb4
   18560:	200025c8 	.word	0x200025c8
   18564:	20001968 	.word	0x20001968
   18568:	00018205 	.word	0x00018205
   1856c:	20004600 	.word	0x20004600
   18570:	00032bd4 	.word	0x00032bd4
   18574:	200018c8 	.word	0x200018c8
   18578:	20003d00 	.word	0x20003d00
   1857c:	00032bdc 	.word	0x00032bdc
   18580:	2000040c 	.word	0x2000040c
   18584:	00032be4 	.word	0x00032be4

00018588 <bt_is_ready>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18588:	f3bf 8f5b 	dmb	ish
   1858c:	4b03      	ldr	r3, [pc, #12]	; (1859c <bt_is_ready+0x14>)
   1858e:	f8d3 00cc 	ldr.w	r0, [r3, #204]	; 0xcc
   18592:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   18596:	f3c0 0080 	ubfx	r0, r0, #2, #1
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
   1859a:	4770      	bx	lr
   1859c:	20000350 	.word	0x20000350

000185a0 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   185a0:	4800      	ldr	r0, [pc, #0]	; (185a4 <bt_get_name+0x4>)
   185a2:	4770      	bx	lr
   185a4:	00031814 	.word	0x00031814

000185a8 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   185a8:	b570      	push	{r4, r5, r6, lr}
   185aa:	4605      	mov	r5, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   185ac:	2400      	movs	r4, #0
   185ae:	e001      	b.n	185b4 <id_find+0xc>
   185b0:	3401      	adds	r4, #1
   185b2:	b2e4      	uxtb	r4, r4
   185b4:	4b09      	ldr	r3, [pc, #36]	; (185dc <id_find+0x34>)
   185b6:	79db      	ldrb	r3, [r3, #7]
   185b8:	42a3      	cmp	r3, r4
   185ba:	d90b      	bls.n	185d4 <id_find+0x2c>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   185bc:	4626      	mov	r6, r4
   185be:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
   185c2:	2207      	movs	r2, #7
   185c4:	4905      	ldr	r1, [pc, #20]	; (185dc <id_find+0x34>)
   185c6:	4419      	add	r1, r3
   185c8:	4628      	mov	r0, r5
   185ca:	f018 fb95 	bl	30cf8 <memcmp>
   185ce:	2800      	cmp	r0, #0
   185d0:	d1ee      	bne.n	185b0 <id_find+0x8>
   185d2:	e001      	b.n	185d8 <id_find+0x30>
			return id;
		}
	}

	return -ENOENT;
   185d4:	f06f 0601 	mvn.w	r6, #1
}
   185d8:	4630      	mov	r0, r6
   185da:	bd70      	pop	{r4, r5, r6, pc}
   185dc:	20000350 	.word	0x20000350

000185e0 <bt_id_pending_keys_update_set>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   185e0:	4b08      	ldr	r3, [pc, #32]	; (18604 <bt_id_pending_keys_update_set+0x24>)
   185e2:	f3bf 8f5b 	dmb	ish
   185e6:	e853 2f00 	ldrex	r2, [r3]
   185ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
   185ee:	e843 2c00 	strex	ip, r2, [r3]
   185f2:	f1bc 0f00 	cmp.w	ip, #0
   185f6:	d1f6      	bne.n	185e6 <bt_id_pending_keys_update_set+0x6>
   185f8:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
   185fc:	7a03      	ldrb	r3, [r0, #8]
   185fe:	4319      	orrs	r1, r3
   18600:	7201      	strb	r1, [r0, #8]
}
   18602:	4770      	bx	lr
   18604:	2000041c 	.word	0x2000041c

00018608 <set_random_address>:
{
   18608:	b538      	push	{r3, r4, r5, lr}
   1860a:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
   1860c:	2206      	movs	r2, #6
   1860e:	4913      	ldr	r1, [pc, #76]	; (1865c <set_random_address+0x54>)
   18610:	f018 fb72 	bl	30cf8 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   18614:	b900      	cbnz	r0, 18618 <set_random_address+0x10>
}
   18616:	bd38      	pop	{r3, r4, r5, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   18618:	2106      	movs	r1, #6
   1861a:	f242 0005 	movw	r0, #8197	; 0x2005
   1861e:	f7fe ff81 	bl	17524 <bt_hci_cmd_create>
	if (!buf) {
   18622:	4605      	mov	r5, r0
   18624:	b1b8      	cbz	r0, 18656 <set_random_address+0x4e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   18626:	2206      	movs	r2, #6
   18628:	4621      	mov	r1, r4
   1862a:	3008      	adds	r0, #8
   1862c:	f016 fda8 	bl	2f180 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   18630:	2200      	movs	r2, #0
   18632:	4629      	mov	r1, r5
   18634:	f242 0005 	movw	r0, #8197	; 0x2005
   18638:	f7fe ffc2 	bl	175c0 <bt_hci_cmd_send_sync>
	if (err) {
   1863c:	2800      	cmp	r0, #0
   1863e:	d1ea      	bne.n	18616 <set_random_address+0xe>
	memcpy(dst, src, sizeof(*dst));
   18640:	4b07      	ldr	r3, [pc, #28]	; (18660 <set_random_address+0x58>)
   18642:	6822      	ldr	r2, [r4, #0]
   18644:	f8c3 2061 	str.w	r2, [r3, #97]	; 0x61
   18648:	88a2      	ldrh	r2, [r4, #4]
   1864a:	f8a3 2065 	strh.w	r2, [r3, #101]	; 0x65
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   1864e:	2201      	movs	r2, #1
   18650:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	return 0;
   18654:	e7df      	b.n	18616 <set_random_address+0xe>
		return -ENOBUFS;
   18656:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1865a:	e7dc      	b.n	18616 <set_random_address+0xe>
   1865c:	200003b1 	.word	0x200003b1
   18660:	20000350 	.word	0x20000350

00018664 <le_set_privacy_mode>:
{
   18664:	b510      	push	{r4, lr}
   18666:	b082      	sub	sp, #8
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
   18668:	4a16      	ldr	r2, [pc, #88]	; (186c4 <le_set_privacy_mode+0x60>)
   1866a:	f892 209f 	ldrb.w	r2, [r2, #159]	; 0x9f
   1866e:	f012 0f04 	tst.w	r2, #4
   18672:	d01e      	beq.n	186b2 <le_set_privacy_mode+0x4e>
   18674:	4603      	mov	r3, r0
	memcpy(dst, src, sizeof(*dst));
   18676:	6800      	ldr	r0, [r0, #0]
   18678:	9000      	str	r0, [sp, #0]
   1867a:	889a      	ldrh	r2, [r3, #4]
   1867c:	799b      	ldrb	r3, [r3, #6]
   1867e:	f8ad 2004 	strh.w	r2, [sp, #4]
   18682:	f88d 3006 	strb.w	r3, [sp, #6]
	cp.mode = mode;
   18686:	f88d 1007 	strb.w	r1, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   1868a:	2108      	movs	r1, #8
   1868c:	f242 004e 	movw	r0, #8270	; 0x204e
   18690:	f7fe ff48 	bl	17524 <bt_hci_cmd_create>
	if (!buf) {
   18694:	4604      	mov	r4, r0
   18696:	b190      	cbz	r0, 186be <le_set_privacy_mode+0x5a>
   18698:	2208      	movs	r2, #8
   1869a:	4669      	mov	r1, sp
   1869c:	4410      	add	r0, r2
   1869e:	f016 fd6f 	bl	2f180 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
   186a2:	2200      	movs	r2, #0
   186a4:	4621      	mov	r1, r4
   186a6:	f242 004e 	movw	r0, #8270	; 0x204e
   186aa:	f7fe ff89 	bl	175c0 <bt_hci_cmd_send_sync>
}
   186ae:	b002      	add	sp, #8
   186b0:	bd10      	pop	{r4, pc}
		BT_WARN("Set privacy mode command is not supported");
   186b2:	2157      	movs	r1, #87	; 0x57
   186b4:	4804      	ldr	r0, [pc, #16]	; (186c8 <le_set_privacy_mode+0x64>)
   186b6:	f012 fcf9 	bl	2b0ac <z_log_minimal_printk>
		return 0;
   186ba:	2000      	movs	r0, #0
   186bc:	e7f7      	b.n	186ae <le_set_privacy_mode+0x4a>
		return -ENOBUFS;
   186be:	f06f 0068 	mvn.w	r0, #104	; 0x68
   186c2:	e7f4      	b.n	186ae <le_set_privacy_mode+0x4a>
   186c4:	20000350 	.word	0x20000350
   186c8:	00032ccc 	.word	0x00032ccc

000186cc <id_create>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
{
   186cc:	b530      	push	{r4, r5, lr}
   186ce:	b085      	sub	sp, #20
   186d0:	4604      	mov	r4, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   186d2:	460d      	mov	r5, r1
   186d4:	b149      	cbz	r1, 186ea <id_create+0x1e>
   186d6:	2300      	movs	r3, #0
   186d8:	9302      	str	r3, [sp, #8]
   186da:	f8cd 300b 	str.w	r3, [sp, #11]
	return memcmp(a, b, sizeof(*a));
   186de:	2207      	movs	r2, #7
   186e0:	a902      	add	r1, sp, #8
   186e2:	4628      	mov	r0, r5
   186e4:	f018 fb08 	bl	30cf8 <memcmp>
   186e8:	bb50      	cbnz	r0, 18740 <id_create+0x74>
		bt_addr_le_t new_addr;

		do {
			int err;

			err = bt_addr_le_create_static(&new_addr);
   186ea:	4668      	mov	r0, sp
   186ec:	f013 fc37 	bl	2bf5e <bt_addr_le_create_static>
			if (err) {
   186f0:	4603      	mov	r3, r0
   186f2:	bb10      	cbnz	r0, 1873a <id_create+0x6e>
				return err;
			}
			/* Make sure we didn't generate a duplicate */
		} while (id_find(&new_addr) >= 0);
   186f4:	4668      	mov	r0, sp
   186f6:	f7ff ff57 	bl	185a8 <id_find>
   186fa:	2800      	cmp	r0, #0
   186fc:	daf5      	bge.n	186ea <id_create+0x1e>

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   186fe:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   18702:	4a17      	ldr	r2, [pc, #92]	; (18760 <id_create+0x94>)
   18704:	18a3      	adds	r3, r4, r2
   18706:	9800      	ldr	r0, [sp, #0]
   18708:	50a0      	str	r0, [r4, r2]
   1870a:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   1870e:	f89d 1006 	ldrb.w	r1, [sp, #6]
   18712:	8098      	strh	r0, [r3, #4]
   18714:	7199      	strb	r1, [r3, #6]

		if (addr) {
   18716:	b12d      	cbz	r5, 18724 <id_create+0x58>
   18718:	58a2      	ldr	r2, [r4, r2]
   1871a:	602a      	str	r2, [r5, #0]
   1871c:	889a      	ldrh	r2, [r3, #4]
   1871e:	799b      	ldrb	r3, [r3, #6]
   18720:	80aa      	strh	r2, [r5, #4]
   18722:	71ab      	strb	r3, [r5, #6]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18724:	f3bf 8f5b 	dmb	ish
   18728:	4b0e      	ldr	r3, [pc, #56]	; (18764 <id_create+0x98>)
   1872a:	681a      	ldr	r2, [r3, #0]
   1872c:	f3bf 8f5b 	dmb	ish
   18730:	f3c2 0380 	ubfx	r3, r2, #2, #1
#endif
	/* Only store if stack was already initialized. Before initialization
	 * we don't know the flash content, so it's potentially harmful to
	 * try to write anything there.
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   18734:	f012 0f04 	tst.w	r2, #4
   18738:	d10d      	bne.n	18756 <id_create+0x8a>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
}
   1873a:	4618      	mov	r0, r3
   1873c:	b005      	add	sp, #20
   1873e:	bd30      	pop	{r4, r5, pc}
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   18740:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   18744:	4a06      	ldr	r2, [pc, #24]	; (18760 <id_create+0x94>)
   18746:	18a3      	adds	r3, r4, r2
   18748:	6829      	ldr	r1, [r5, #0]
   1874a:	50a1      	str	r1, [r4, r2]
   1874c:	88a9      	ldrh	r1, [r5, #4]
   1874e:	79aa      	ldrb	r2, [r5, #6]
   18750:	8099      	strh	r1, [r3, #4]
   18752:	719a      	strb	r2, [r3, #6]
}
   18754:	e7e6      	b.n	18724 <id_create+0x58>
		bt_settings_save_id();
   18756:	f7fe f8fd 	bl	16954 <bt_settings_save_id>
	return 0;
   1875a:	2300      	movs	r3, #0
   1875c:	e7ed      	b.n	1873a <id_create+0x6e>
   1875e:	bf00      	nop
   18760:	20000350 	.word	0x20000350
   18764:	2000041c 	.word	0x2000041c

00018768 <bt_id_pending_keys_update>:
{
   18768:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1876a:	4b0b      	ldr	r3, [pc, #44]	; (18798 <bt_id_pending_keys_update+0x30>)
   1876c:	f3bf 8f5b 	dmb	ish
   18770:	e853 2f00 	ldrex	r2, [r3]
   18774:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
   18778:	e843 1000 	strex	r0, r1, [r3]
   1877c:	2800      	cmp	r0, #0
   1877e:	d1f7      	bne.n	18770 <bt_id_pending_keys_update+0x8>
   18780:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   18784:	f412 4f00 	tst.w	r2, #32768	; 0x8000
   18788:	d100      	bne.n	1878c <bt_id_pending_keys_update+0x24>
}
   1878a:	bd08      	pop	{r3, pc}
			bt_keys_foreach(BT_KEYS_IRK, pending_id_update, NULL);
   1878c:	2200      	movs	r2, #0
   1878e:	4903      	ldr	r1, [pc, #12]	; (1879c <bt_id_pending_keys_update+0x34>)
   18790:	2002      	movs	r0, #2
   18792:	f007 f9a5 	bl	1fae0 <bt_keys_foreach>
}
   18796:	e7f8      	b.n	1878a <bt_id_pending_keys_update+0x22>
   18798:	2000041c 	.word	0x2000041c
   1879c:	0002c3f5 	.word	0x0002c3f5

000187a0 <bt_id_add>:
{
   187a0:	b538      	push	{r3, r4, r5, lr}
   187a2:	4604      	mov	r4, r0
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   187a4:	4b40      	ldr	r3, [pc, #256]	; (188a8 <bt_id_add+0x108>)
   187a6:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
   187aa:	b123      	cbz	r3, 187b6 <bt_id_add+0x16>
   187ac:	4a3e      	ldr	r2, [pc, #248]	; (188a8 <bt_id_add+0x108>)
   187ae:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
   187b2:	4293      	cmp	r3, r2
   187b4:	d20a      	bcs.n	187cc <bt_id_add+0x2c>
		bt_dev.le.rl_entries++;
   187b6:	4a3c      	ldr	r2, [pc, #240]	; (188a8 <bt_id_add+0x108>)
   187b8:	f892 3119 	ldrb.w	r3, [r2, #281]	; 0x119
   187bc:	3301      	adds	r3, #1
   187be:	f882 3119 	strb.w	r3, [r2, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   187c2:	7a23      	ldrb	r3, [r4, #8]
   187c4:	f043 0304 	orr.w	r3, r3, #4
   187c8:	7223      	strb	r3, [r4, #8]
}
   187ca:	bd38      	pop	{r3, r4, r5, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   187cc:	2206      	movs	r2, #6
   187ce:	2100      	movs	r1, #0
   187d0:	4608      	mov	r0, r1
   187d2:	f001 fcfb 	bl	1a1cc <bt_conn_lookup_state_le>
	if (conn) {
   187d6:	4605      	mov	r5, r0
   187d8:	b138      	cbz	r0, 187ea <bt_id_add+0x4a>
		bt_id_pending_keys_update_set(keys, BT_KEYS_ID_PENDING_ADD);
   187da:	2101      	movs	r1, #1
   187dc:	4620      	mov	r0, r4
   187de:	f7ff feff 	bl	185e0 <bt_id_pending_keys_update_set>
		bt_conn_unref(conn);
   187e2:	4628      	mov	r0, r5
   187e4:	f001 f9e6 	bl	19bb4 <bt_conn_unref>
		return;
   187e8:	e7ef      	b.n	187ca <bt_id_add+0x2a>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   187ea:	2100      	movs	r1, #0
   187ec:	482f      	ldr	r0, [pc, #188]	; (188ac <bt_id_add+0x10c>)
   187ee:	f000 fb97 	bl	18f20 <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries) {
   187f2:	4b2d      	ldr	r3, [pc, #180]	; (188a8 <bt_id_add+0x108>)
   187f4:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
   187f8:	bb33      	cbnz	r3, 18848 <bt_id_add+0xa8>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
   187fa:	4b2b      	ldr	r3, [pc, #172]	; (188a8 <bt_id_add+0x108>)
   187fc:	f893 2119 	ldrb.w	r2, [r3, #281]	; 0x119
   18800:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
   18804:	429a      	cmp	r2, r3
   18806:	d029      	beq.n	1885c <bt_id_add+0xbc>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
   18808:	1c65      	adds	r5, r4, #1
   1880a:	4622      	mov	r2, r4
   1880c:	f812 0b2a 	ldrb.w	r0, [r2], #42
   18810:	4629      	mov	r1, r5
   18812:	f013 fd86 	bl	2c322 <hci_id_add>
	if (err) {
   18816:	2800      	cmp	r0, #0
   18818:	d13b      	bne.n	18892 <bt_id_add+0xf2>
	bt_dev.le.rl_entries++;
   1881a:	4a23      	ldr	r2, [pc, #140]	; (188a8 <bt_id_add+0x108>)
   1881c:	f892 3119 	ldrb.w	r3, [r2, #281]	; 0x119
   18820:	3301      	adds	r3, #1
   18822:	f882 3119 	strb.w	r3, [r2, #281]	; 0x119
	keys->state |= BT_KEYS_ID_ADDED;
   18826:	7a23      	ldrb	r3, [r4, #8]
   18828:	f043 0304 	orr.w	r3, r3, #4
   1882c:	7223      	strb	r3, [r4, #8]
	err = le_set_privacy_mode(&keys->addr, BT_HCI_LE_PRIVACY_MODE_DEVICE);
   1882e:	2101      	movs	r1, #1
   18830:	4628      	mov	r0, r5
   18832:	f7ff ff17 	bl	18664 <le_set_privacy_mode>
	if (err) {
   18836:	bb88      	cbnz	r0, 1889c <bt_id_add+0xfc>
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   18838:	2001      	movs	r0, #1
   1883a:	f013 fd23 	bl	2c284 <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   1883e:	2100      	movs	r1, #0
   18840:	481b      	ldr	r0, [pc, #108]	; (188b0 <bt_id_add+0x110>)
   18842:	f000 fb6d 	bl	18f20 <bt_le_ext_adv_foreach>
   18846:	e7c0      	b.n	187ca <bt_id_add+0x2a>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   18848:	2000      	movs	r0, #0
   1884a:	f013 fd1b 	bl	2c284 <addr_res_enable>
		if (err) {
   1884e:	2800      	cmp	r0, #0
   18850:	d0d3      	beq.n	187fa <bt_id_add+0x5a>
			BT_WARN("Failed to disable address resolution");
   18852:	2157      	movs	r1, #87	; 0x57
   18854:	4817      	ldr	r0, [pc, #92]	; (188b4 <bt_id_add+0x114>)
   18856:	f012 fc29 	bl	2b0ac <z_log_minimal_printk>
			goto done;
   1885a:	e7ed      	b.n	18838 <bt_id_add+0x98>
		BT_WARN("Resolving list size exceeded. Switching to host.");
   1885c:	2157      	movs	r1, #87	; 0x57
   1885e:	4816      	ldr	r0, [pc, #88]	; (188b8 <bt_id_add+0x118>)
   18860:	f012 fc24 	bl	2b0ac <z_log_minimal_printk>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
   18864:	2200      	movs	r2, #0
   18866:	4611      	mov	r1, r2
   18868:	f242 0029 	movw	r0, #8233	; 0x2029
   1886c:	f7fe fea8 	bl	175c0 <bt_hci_cmd_send_sync>
		if (err) {
   18870:	b950      	cbnz	r0, 18888 <bt_id_add+0xe8>
		bt_dev.le.rl_entries++;
   18872:	4a0d      	ldr	r2, [pc, #52]	; (188a8 <bt_id_add+0x108>)
   18874:	f892 3119 	ldrb.w	r3, [r2, #281]	; 0x119
   18878:	3301      	adds	r3, #1
   1887a:	f882 3119 	strb.w	r3, [r2, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   1887e:	7a23      	ldrb	r3, [r4, #8]
   18880:	f043 0304 	orr.w	r3, r3, #4
   18884:	7223      	strb	r3, [r4, #8]
		goto done;
   18886:	e7d7      	b.n	18838 <bt_id_add+0x98>
			BT_ERR("Failed to clear resolution list");
   18888:	2145      	movs	r1, #69	; 0x45
   1888a:	480c      	ldr	r0, [pc, #48]	; (188bc <bt_id_add+0x11c>)
   1888c:	f012 fc0e 	bl	2b0ac <z_log_minimal_printk>
			goto done;
   18890:	e7d2      	b.n	18838 <bt_id_add+0x98>
		BT_ERR("Failed to add IRK to controller");
   18892:	2145      	movs	r1, #69	; 0x45
   18894:	480a      	ldr	r0, [pc, #40]	; (188c0 <bt_id_add+0x120>)
   18896:	f012 fc09 	bl	2b0ac <z_log_minimal_printk>
		goto done;
   1889a:	e7cd      	b.n	18838 <bt_id_add+0x98>
		BT_ERR("Failed to set privacy mode");
   1889c:	2145      	movs	r1, #69	; 0x45
   1889e:	4809      	ldr	r0, [pc, #36]	; (188c4 <bt_id_add+0x124>)
   188a0:	f012 fc04 	bl	2b0ac <z_log_minimal_printk>
		goto done;
   188a4:	e7c8      	b.n	18838 <bt_id_add+0x98>
   188a6:	bf00      	nop
   188a8:	20000350 	.word	0x20000350
   188ac:	0002c2b3 	.word	0x0002c2b3
   188b0:	0002c255 	.word	0x0002c255
   188b4:	00032cfc 	.word	0x00032cfc
   188b8:	00032d28 	.word	0x00032d28
   188bc:	00032d60 	.word	0x00032d60
   188c0:	00032d88 	.word	0x00032d88
   188c4:	00032db0 	.word	0x00032db0

000188c8 <bt_id_del>:
{
   188c8:	b538      	push	{r3, r4, r5, lr}
   188ca:	4604      	mov	r4, r0
	if (!bt_dev.le.rl_size ||
   188cc:	4b33      	ldr	r3, [pc, #204]	; (1899c <bt_id_del+0xd4>)
   188ce:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
   188d2:	b12b      	cbz	r3, 188e0 <bt_id_del+0x18>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   188d4:	4a31      	ldr	r2, [pc, #196]	; (1899c <bt_id_del+0xd4>)
   188d6:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
   188da:	3301      	adds	r3, #1
	if (!bt_dev.le.rl_size ||
   188dc:	429a      	cmp	r2, r3
   188de:	dd0a      	ble.n	188f6 <bt_id_del+0x2e>
		bt_dev.le.rl_entries--;
   188e0:	4a2e      	ldr	r2, [pc, #184]	; (1899c <bt_id_del+0xd4>)
   188e2:	f892 3119 	ldrb.w	r3, [r2, #281]	; 0x119
   188e6:	3b01      	subs	r3, #1
   188e8:	f882 3119 	strb.w	r3, [r2, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   188ec:	7a23      	ldrb	r3, [r4, #8]
   188ee:	f023 0304 	bic.w	r3, r3, #4
   188f2:	7223      	strb	r3, [r4, #8]
}
   188f4:	bd38      	pop	{r3, r4, r5, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   188f6:	2206      	movs	r2, #6
   188f8:	2100      	movs	r1, #0
   188fa:	4608      	mov	r0, r1
   188fc:	f001 fc66 	bl	1a1cc <bt_conn_lookup_state_le>
	if (conn) {
   18900:	4605      	mov	r5, r0
   18902:	b138      	cbz	r0, 18914 <bt_id_del+0x4c>
		bt_id_pending_keys_update_set(keys, BT_KEYS_ID_PENDING_DEL);
   18904:	2102      	movs	r1, #2
   18906:	4620      	mov	r0, r4
   18908:	f7ff fe6a 	bl	185e0 <bt_id_pending_keys_update_set>
		bt_conn_unref(conn);
   1890c:	4628      	mov	r0, r5
   1890e:	f001 f951 	bl	19bb4 <bt_conn_unref>
		return;
   18912:	e7ef      	b.n	188f4 <bt_id_del+0x2c>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   18914:	2100      	movs	r1, #0
   18916:	4822      	ldr	r0, [pc, #136]	; (189a0 <bt_id_del+0xd8>)
   18918:	f000 fb02 	bl	18f20 <bt_le_ext_adv_foreach>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   1891c:	2000      	movs	r0, #0
   1891e:	f013 fcb1 	bl	2c284 <addr_res_enable>
	if (err) {
   18922:	4602      	mov	r2, r0
   18924:	b9e8      	cbnz	r0, 18962 <bt_id_del+0x9a>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   18926:	4a1d      	ldr	r2, [pc, #116]	; (1899c <bt_id_del+0xd4>)
   18928:	f892 3119 	ldrb.w	r3, [r2, #281]	; 0x119
   1892c:	f892 2118 	ldrb.w	r2, [r2, #280]	; 0x118
   18930:	4293      	cmp	r3, r2
   18932:	d81b      	bhi.n	1896c <bt_id_del+0xa4>
	err = hci_id_del(&keys->addr);
   18934:	1c60      	adds	r0, r4, #1
   18936:	f013 fcd7 	bl	2c2e8 <hci_id_del>
	if (err) {
   1893a:	bb28      	cbnz	r0, 18988 <bt_id_del+0xc0>
	bt_dev.le.rl_entries--;
   1893c:	4a17      	ldr	r2, [pc, #92]	; (1899c <bt_id_del+0xd4>)
   1893e:	f892 3119 	ldrb.w	r3, [r2, #281]	; 0x119
   18942:	3b01      	subs	r3, #1
   18944:	f882 3119 	strb.w	r3, [r2, #281]	; 0x119
	keys->state &= ~BT_KEYS_ID_ADDED;
   18948:	7a23      	ldrb	r3, [r4, #8]
   1894a:	f023 0304 	bic.w	r3, r3, #4
   1894e:	7223      	strb	r3, [r4, #8]
	if (bt_dev.le.rl_entries) {
   18950:	4b12      	ldr	r3, [pc, #72]	; (1899c <bt_id_del+0xd4>)
   18952:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
   18956:	b9e3      	cbnz	r3, 18992 <bt_id_del+0xca>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   18958:	2100      	movs	r1, #0
   1895a:	4812      	ldr	r0, [pc, #72]	; (189a4 <bt_id_del+0xdc>)
   1895c:	f000 fae0 	bl	18f20 <bt_le_ext_adv_foreach>
   18960:	e7c8      	b.n	188f4 <bt_id_del+0x2c>
		BT_ERR("Disabling address resolution failed (err %d)", err);
   18962:	2145      	movs	r1, #69	; 0x45
   18964:	4810      	ldr	r0, [pc, #64]	; (189a8 <bt_id_del+0xe0>)
   18966:	f012 fba1 	bl	2b0ac <z_log_minimal_printk>
		goto done;
   1896a:	e7f1      	b.n	18950 <bt_id_del+0x88>
		bt_dev.le.rl_entries--;
   1896c:	3b01      	subs	r3, #1
   1896e:	4a0b      	ldr	r2, [pc, #44]	; (1899c <bt_id_del+0xd4>)
   18970:	f882 3119 	strb.w	r3, [r2, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   18974:	7a23      	ldrb	r3, [r4, #8]
   18976:	f023 0304 	bic.w	r3, r3, #4
   1897a:	7223      	strb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   1897c:	2200      	movs	r2, #0
   1897e:	490b      	ldr	r1, [pc, #44]	; (189ac <bt_id_del+0xe4>)
   18980:	2002      	movs	r0, #2
   18982:	f007 f8ad 	bl	1fae0 <bt_keys_foreach>
		goto done;
   18986:	e7e3      	b.n	18950 <bt_id_del+0x88>
		BT_ERR("Failed to remove IRK from controller");
   18988:	2145      	movs	r1, #69	; 0x45
   1898a:	4809      	ldr	r0, [pc, #36]	; (189b0 <bt_id_del+0xe8>)
   1898c:	f012 fb8e 	bl	2b0ac <z_log_minimal_printk>
		goto done;
   18990:	e7de      	b.n	18950 <bt_id_del+0x88>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   18992:	2001      	movs	r0, #1
   18994:	f013 fc76 	bl	2c284 <addr_res_enable>
   18998:	e7de      	b.n	18958 <bt_id_del+0x90>
   1899a:	bf00      	nop
   1899c:	20000350 	.word	0x20000350
   189a0:	0002c2b3 	.word	0x0002c2b3
   189a4:	0002c255 	.word	0x0002c255
   189a8:	00032dd0 	.word	0x00032dd0
   189ac:	0002c38f 	.word	0x0002c38f
   189b0:	00032e04 	.word	0x00032e04

000189b4 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   189b4:	b570      	push	{r4, r5, r6, lr}
   189b6:	b088      	sub	sp, #32
   189b8:	460c      	mov	r4, r1
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   189ba:	4605      	mov	r5, r0
   189bc:	b1e0      	cbz	r0, 189f8 <bt_id_create+0x44>
   189be:	2300      	movs	r3, #0
   189c0:	9304      	str	r3, [sp, #16]
   189c2:	f8cd 3013 	str.w	r3, [sp, #19]
	return memcmp(a, b, sizeof(*a));
   189c6:	2207      	movs	r2, #7
   189c8:	a904      	add	r1, sp, #16
   189ca:	f018 f995 	bl	30cf8 <memcmp>
   189ce:	b198      	cbz	r0, 189f8 <bt_id_create+0x44>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   189d0:	782b      	ldrb	r3, [r5, #0]
   189d2:	2b01      	cmp	r3, #1
   189d4:	d104      	bne.n	189e0 <bt_id_create+0x2c>
		    !BT_ADDR_IS_STATIC(&addr->a)) {
   189d6:	79ab      	ldrb	r3, [r5, #6]
		if (addr->type != BT_ADDR_LE_RANDOM ||
   189d8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   189dc:	2bc0      	cmp	r3, #192	; 0xc0
   189de:	d006      	beq.n	189ee <bt_id_create+0x3a>
			BT_ERR("Only static random identity address supported");
   189e0:	2145      	movs	r1, #69	; 0x45
   189e2:	4820      	ldr	r0, [pc, #128]	; (18a64 <bt_id_create+0xb0>)
   189e4:	f012 fb62 	bl	2b0ac <z_log_minimal_printk>
			return -EINVAL;
   189e8:	f06f 0015 	mvn.w	r0, #21
   189ec:	e02c      	b.n	18a48 <bt_id_create+0x94>
		}

		if (id_find(addr) >= 0) {
   189ee:	4628      	mov	r0, r5
   189f0:	f7ff fdda 	bl	185a8 <id_find>
   189f4:	2800      	cmp	r0, #0
   189f6:	da29      	bge.n	18a4c <bt_id_create+0x98>
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   189f8:	bb74      	cbnz	r4, 18a58 <bt_id_create+0xa4>
		return -EINVAL;
	}

	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   189fa:	4b1b      	ldr	r3, [pc, #108]	; (18a68 <bt_id_create+0xb4>)
   189fc:	79db      	ldrb	r3, [r3, #7]
   189fe:	2b01      	cmp	r3, #1
   18a00:	d02d      	beq.n	18a5e <bt_id_create+0xaa>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18a02:	f3bf 8f5b 	dmb	ish
   18a06:	4b19      	ldr	r3, [pc, #100]	; (18a6c <bt_id_create+0xb8>)
   18a08:	681b      	ldr	r3, [r3, #0]
   18a0a:	f3bf 8f5b 	dmb	ish
		return -ENOMEM;
	}

	/* bt_rand is not available before Bluetooth enable has been called */
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   18a0e:	f013 0f01 	tst.w	r3, #1
   18a12:	d10e      	bne.n	18a32 <bt_id_create+0x7e>
		uint8_t zero_irk[16] = { 0 };
   18a14:	2300      	movs	r3, #0
   18a16:	9300      	str	r3, [sp, #0]
   18a18:	9301      	str	r3, [sp, #4]
   18a1a:	9302      	str	r3, [sp, #8]
   18a1c:	9303      	str	r3, [sp, #12]

		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   18a1e:	b1c5      	cbz	r5, 18a52 <bt_id_create+0x9e>
   18a20:	9306      	str	r3, [sp, #24]
   18a22:	f8cd 301b 	str.w	r3, [sp, #27]
   18a26:	2207      	movs	r2, #7
   18a28:	a906      	add	r1, sp, #24
   18a2a:	4628      	mov	r0, r5
   18a2c:	f018 f964 	bl	30cf8 <memcmp>
   18a30:	b178      	cbz	r0, 18a52 <bt_id_create+0x9e>
		    !(irk && memcmp(irk, zero_irk, 16))) {
			return -EINVAL;
		}
	}

	new_id = bt_dev.id_count++;
   18a32:	4b0d      	ldr	r3, [pc, #52]	; (18a68 <bt_id_create+0xb4>)
   18a34:	79de      	ldrb	r6, [r3, #7]
   18a36:	1c72      	adds	r2, r6, #1
   18a38:	71da      	strb	r2, [r3, #7]
	err = id_create(new_id, addr, irk);
   18a3a:	4622      	mov	r2, r4
   18a3c:	4629      	mov	r1, r5
   18a3e:	4630      	mov	r0, r6
   18a40:	f7ff fe44 	bl	186cc <id_create>
	if (err) {
   18a44:	b900      	cbnz	r0, 18a48 <bt_id_create+0x94>
		return err;
	}

	return new_id;
   18a46:	4630      	mov	r0, r6
}
   18a48:	b008      	add	sp, #32
   18a4a:	bd70      	pop	{r4, r5, r6, pc}
			return -EALREADY;
   18a4c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   18a50:	e7fa      	b.n	18a48 <bt_id_create+0x94>
			return -EINVAL;
   18a52:	f06f 0015 	mvn.w	r0, #21
   18a56:	e7f7      	b.n	18a48 <bt_id_create+0x94>
		return -EINVAL;
   18a58:	f06f 0015 	mvn.w	r0, #21
   18a5c:	e7f4      	b.n	18a48 <bt_id_create+0x94>
		return -ENOMEM;
   18a5e:	f06f 000b 	mvn.w	r0, #11
   18a62:	e7f1      	b.n	18a48 <bt_id_create+0x94>
   18a64:	00032e30 	.word	0x00032e30
   18a68:	20000350 	.word	0x20000350
   18a6c:	2000041c 	.word	0x2000041c

00018a70 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   18a70:	b570      	push	{r4, r5, r6, lr}
   18a72:	b086      	sub	sp, #24
   18a74:	4604      	mov	r4, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   18a76:	aa01      	add	r2, sp, #4
   18a78:	2100      	movs	r1, #0
   18a7a:	f241 0009 	movw	r0, #4105	; 0x1009
   18a7e:	f7fe fd9f 	bl	175c0 <bt_hci_cmd_send_sync>
	if (err) {
   18a82:	b9f0      	cbnz	r0, 18ac2 <bt_id_read_public_addr+0x52>
		BT_WARN("Failed to read public address");
		return 0U;
	}

	rp = (void *)rsp->data;
   18a84:	9b01      	ldr	r3, [sp, #4]
   18a86:	689e      	ldr	r6, [r3, #8]

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   18a88:	1c75      	adds	r5, r6, #1
   18a8a:	2300      	movs	r3, #0
   18a8c:	9302      	str	r3, [sp, #8]
   18a8e:	f8ad 300c 	strh.w	r3, [sp, #12]
	return memcmp(a, b, sizeof(*a));
   18a92:	2206      	movs	r2, #6
   18a94:	a902      	add	r1, sp, #8
   18a96:	4628      	mov	r0, r5
   18a98:	f018 f92e 	bl	30cf8 <memcmp>
   18a9c:	b158      	cbz	r0, 18ab6 <bt_id_read_public_addr+0x46>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   18a9e:	4b13      	ldr	r3, [pc, #76]	; (18aec <bt_id_read_public_addr+0x7c>)
   18aa0:	e893 0003 	ldmia.w	r3, {r0, r1}
   18aa4:	9004      	str	r0, [sp, #16]
   18aa6:	f8ad 1014 	strh.w	r1, [sp, #20]
   18aaa:	2206      	movs	r2, #6
   18aac:	a904      	add	r1, sp, #16
   18aae:	4628      	mov	r0, r5
   18ab0:	f018 f922 	bl	30cf8 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   18ab4:	b958      	cbnz	r0, 18ace <bt_id_read_public_addr+0x5e>
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
   18ab6:	9801      	ldr	r0, [sp, #4]
   18ab8:	f007 fc64 	bl	20384 <net_buf_unref>
		return 0U;
   18abc:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   18abe:	b006      	add	sp, #24
   18ac0:	bd70      	pop	{r4, r5, r6, pc}
		BT_WARN("Failed to read public address");
   18ac2:	2157      	movs	r1, #87	; 0x57
   18ac4:	480a      	ldr	r0, [pc, #40]	; (18af0 <bt_id_read_public_addr+0x80>)
   18ac6:	f012 faf1 	bl	2b0ac <z_log_minimal_printk>
		return 0U;
   18aca:	2000      	movs	r0, #0
   18acc:	e7f7      	b.n	18abe <bt_id_read_public_addr+0x4e>
   18ace:	f8d6 3001 	ldr.w	r3, [r6, #1]
   18ad2:	f8c4 3001 	str.w	r3, [r4, #1]
   18ad6:	88ab      	ldrh	r3, [r5, #4]
   18ad8:	f8a4 3005 	strh.w	r3, [r4, #5]
	addr->type = BT_ADDR_LE_PUBLIC;
   18adc:	2300      	movs	r3, #0
   18ade:	7023      	strb	r3, [r4, #0]
	net_buf_unref(rsp);
   18ae0:	9801      	ldr	r0, [sp, #4]
   18ae2:	f007 fc4f 	bl	20384 <net_buf_unref>
	return 1U;
   18ae6:	2001      	movs	r0, #1
   18ae8:	e7e9      	b.n	18abe <bt_id_read_public_addr+0x4e>
   18aea:	bf00      	nop
   18aec:	0003151c 	.word	0x0003151c
   18af0:	00032e64 	.word	0x00032e64

00018af4 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   18af4:	b500      	push	{lr}
   18af6:	b083      	sub	sp, #12
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   18af8:	4668      	mov	r0, sp
   18afa:	f7ff ffb9 	bl	18a70 <bt_id_read_public_addr>
   18afe:	4b06      	ldr	r3, [pc, #24]	; (18b18 <bt_setup_public_id_addr+0x24>)
   18b00:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   18b02:	b918      	cbnz	r0, 18b0c <bt_setup_public_id_addr+0x18>
		return 0;
   18b04:	2000      	movs	r0, #0
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
}
   18b06:	b003      	add	sp, #12
   18b08:	f85d fb04 	ldr.w	pc, [sp], #4
	return id_create(BT_ID_DEFAULT, &addr, irk);
   18b0c:	2200      	movs	r2, #0
   18b0e:	4669      	mov	r1, sp
   18b10:	4610      	mov	r0, r2
   18b12:	f7ff fddb 	bl	186cc <id_create>
   18b16:	e7f6      	b.n	18b06 <bt_setup_public_id_addr+0x12>
   18b18:	20000350 	.word	0x20000350

00018b1c <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   18b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   18b1e:	b083      	sub	sp, #12
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   18b20:	4b24      	ldr	r3, [pc, #144]	; (18bb4 <bt_read_static_addr+0x98>)
   18b22:	f893 40ba 	ldrb.w	r4, [r3, #186]	; 0xba
   18b26:	f014 0401 	ands.w	r4, r4, #1
   18b2a:	d010      	beq.n	18b4e <bt_read_static_addr+0x32>
   18b2c:	4605      	mov	r5, r0
   18b2e:	460e      	mov	r6, r1
		BT_WARN("Read Static Addresses command not available");
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   18b30:	aa01      	add	r2, sp, #4
   18b32:	2100      	movs	r1, #0
   18b34:	f64f 4009 	movw	r0, #64521	; 0xfc09
   18b38:	f7fe fd42 	bl	175c0 <bt_hci_cmd_send_sync>
	if (err) {
   18b3c:	4684      	mov	ip, r0
   18b3e:	b958      	cbnz	r0, 18b58 <bt_read_static_addr+0x3c>
		BT_WARN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	rp = (void *)rsp->data;
   18b40:	9b01      	ldr	r3, [sp, #4]
   18b42:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   18b44:	785c      	ldrb	r4, [r3, #1]
   18b46:	42b4      	cmp	r4, r6
   18b48:	bf28      	it	cs
   18b4a:	4634      	movcs	r4, r6
		BT_WARN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	for (i = 0; i < cnt; i++) {
   18b4c:	e023      	b.n	18b96 <bt_read_static_addr+0x7a>
		BT_WARN("Read Static Addresses command not available");
   18b4e:	2157      	movs	r1, #87	; 0x57
   18b50:	4819      	ldr	r0, [pc, #100]	; (18bb8 <bt_read_static_addr+0x9c>)
   18b52:	f012 faab 	bl	2b0ac <z_log_minimal_printk>
		return 0;
   18b56:	e024      	b.n	18ba2 <bt_read_static_addr+0x86>
		BT_WARN("Failed to read static addresses");
   18b58:	2157      	movs	r1, #87	; 0x57
   18b5a:	4818      	ldr	r0, [pc, #96]	; (18bbc <bt_read_static_addr+0xa0>)
   18b5c:	f012 faa6 	bl	2b0ac <z_log_minimal_printk>
		return 0;
   18b60:	2400      	movs	r4, #0
   18b62:	e01e      	b.n	18ba2 <bt_read_static_addr+0x86>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   18b64:	2116      	movs	r1, #22
   18b66:	fb01 f10c 	mul.w	r1, r1, ip
   18b6a:	186a      	adds	r2, r5, r1
   18b6c:	f8d3 e002 	ldr.w	lr, [r3, #2]
   18b70:	f8d3 7006 	ldr.w	r7, [r3, #6]
   18b74:	f8d3 600a 	ldr.w	r6, [r3, #10]
   18b78:	f8d3 000e 	ldr.w	r0, [r3, #14]
   18b7c:	f845 e001 	str.w	lr, [r5, r1]
   18b80:	6057      	str	r7, [r2, #4]
   18b82:	6096      	str	r6, [r2, #8]
   18b84:	60d0      	str	r0, [r2, #12]
   18b86:	f8d3 e012 	ldr.w	lr, [r3, #18]
   18b8a:	f8c2 e010 	str.w	lr, [r2, #16]
   18b8e:	8ad9      	ldrh	r1, [r3, #22]
   18b90:	8291      	strh	r1, [r2, #20]
	for (i = 0; i < cnt; i++) {
   18b92:	f10c 0c01 	add.w	ip, ip, #1
   18b96:	4564      	cmp	r4, ip
   18b98:	dce4      	bgt.n	18b64 <bt_read_static_addr+0x48>
	}

	net_buf_unref(rsp);
   18b9a:	9801      	ldr	r0, [sp, #4]
   18b9c:	f007 fbf2 	bl	20384 <net_buf_unref>
	if (!cnt) {
   18ba0:	b114      	cbz	r4, 18ba8 <bt_read_static_addr+0x8c>
		BT_WARN("No static addresses stored in controller");
	}

	return cnt;
}
   18ba2:	4620      	mov	r0, r4
   18ba4:	b003      	add	sp, #12
   18ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BT_WARN("No static addresses stored in controller");
   18ba8:	2157      	movs	r1, #87	; 0x57
   18baa:	4805      	ldr	r0, [pc, #20]	; (18bc0 <bt_read_static_addr+0xa4>)
   18bac:	f012 fa7e 	bl	2b0ac <z_log_minimal_printk>
   18bb0:	e7f7      	b.n	18ba2 <bt_read_static_addr+0x86>
   18bb2:	bf00      	nop
   18bb4:	20000350 	.word	0x20000350
   18bb8:	00032e88 	.word	0x00032e88
   18bbc:	00032ebc 	.word	0x00032ebc
   18bc0:	00032ee4 	.word	0x00032ee4

00018bc4 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   18bc4:	b510      	push	{r4, lr}
   18bc6:	b088      	sub	sp, #32
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   18bc8:	4b18      	ldr	r3, [pc, #96]	; (18c2c <bt_setup_random_id_addr+0x68>)
   18bca:	79dc      	ldrb	r4, [r3, #7]
   18bcc:	b934      	cbnz	r4, 18bdc <bt_setup_random_id_addr+0x18>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   18bce:	2101      	movs	r1, #1
   18bd0:	a802      	add	r0, sp, #8
   18bd2:	f7ff ffa3 	bl	18b1c <bt_read_static_addr>
   18bd6:	4b15      	ldr	r3, [pc, #84]	; (18c2c <bt_setup_random_id_addr+0x68>)
   18bd8:	71d8      	strb	r0, [r3, #7]

		if (bt_dev.id_count) {
   18bda:	b948      	cbnz	r0, 18bf0 <bt_setup_random_id_addr+0x2c>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   18bdc:	2100      	movs	r1, #0
   18bde:	4608      	mov	r0, r1
   18be0:	f7ff fee8 	bl	189b4 <bt_id_create>
   18be4:	4603      	mov	r3, r0
}
   18be6:	4618      	mov	r0, r3
   18be8:	b008      	add	sp, #32
   18bea:	bd10      	pop	{r4, pc}
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   18bec:	3401      	adds	r4, #1
   18bee:	b2e4      	uxtb	r4, r4
   18bf0:	4b0e      	ldr	r3, [pc, #56]	; (18c2c <bt_setup_random_id_addr+0x68>)
   18bf2:	79db      	ldrb	r3, [r3, #7]
   18bf4:	42a3      	cmp	r3, r4
   18bf6:	d916      	bls.n	18c26 <bt_setup_random_id_addr+0x62>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   18bf8:	aa02      	add	r2, sp, #8
   18bfa:	2316      	movs	r3, #22
   18bfc:	fb04 f303 	mul.w	r3, r4, r3
   18c00:	18d1      	adds	r1, r2, r3
	memcpy(dst, src, sizeof(*dst));
   18c02:	58d3      	ldr	r3, [r2, r3]
   18c04:	f8cd 3001 	str.w	r3, [sp, #1]
   18c08:	888b      	ldrh	r3, [r1, #4]
   18c0a:	f8ad 3005 	strh.w	r3, [sp, #5]
				addr.type = BT_ADDR_LE_RANDOM;
   18c0e:	2301      	movs	r3, #1
   18c10:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   18c14:	2200      	movs	r2, #0
   18c16:	4669      	mov	r1, sp
   18c18:	4620      	mov	r0, r4
   18c1a:	f7ff fd57 	bl	186cc <id_create>
				if (err) {
   18c1e:	4603      	mov	r3, r0
   18c20:	2800      	cmp	r0, #0
   18c22:	d0e3      	beq.n	18bec <bt_setup_random_id_addr+0x28>
   18c24:	e7df      	b.n	18be6 <bt_setup_random_id_addr+0x22>
			return 0;
   18c26:	2300      	movs	r3, #0
   18c28:	e7dd      	b.n	18be6 <bt_setup_random_id_addr+0x22>
   18c2a:	bf00      	nop
   18c2c:	20000350 	.word	0x20000350

00018c30 <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   18c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18c32:	460d      	mov	r5, r1
   18c34:	461e      	mov	r6, r3
	const bt_addr_le_t *id_addr;
	int err = 0;

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];
   18c36:	7804      	ldrb	r4, [r0, #0]

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   18c38:	f011 0f01 	tst.w	r1, #1
   18c3c:	d027      	beq.n	18c8e <bt_id_set_adv_own_addr+0x5e>
   18c3e:	4617      	mov	r7, r2
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   18c40:	b142      	cbz	r2, 18c54 <bt_id_set_adv_own_addr+0x24>
   18c42:	f011 0f20 	tst.w	r1, #32
   18c46:	d005      	beq.n	18c54 <bt_id_set_adv_own_addr+0x24>
		    !BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
   18c48:	4b22      	ldr	r3, [pc, #136]	; (18cd4 <bt_id_set_adv_own_addr+0xa4>)
   18c4a:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   18c4e:	f013 0f40 	tst.w	r3, #64	; 0x40
   18c52:	d038      	beq.n	18cc6 <bt_id_set_adv_own_addr+0x96>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   18c54:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   18c58:	4a1e      	ldr	r2, [pc, #120]	; (18cd4 <bt_id_set_adv_own_addr+0xa4>)
   18c5a:	5cd3      	ldrb	r3, [r2, r3]
   18c5c:	2b01      	cmp	r3, #1
   18c5e:	d00d      	beq.n	18c7c <bt_id_set_adv_own_addr+0x4c>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   18c60:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   18c64:	4b1b      	ldr	r3, [pc, #108]	; (18cd4 <bt_id_set_adv_own_addr+0xa4>)
   18c66:	5d1b      	ldrb	r3, [r3, r4]
   18c68:	7033      	strb	r3, [r6, #0]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   18c6a:	b37f      	cbz	r7, 18ccc <bt_id_set_adv_own_addr+0x9c>
   18c6c:	f015 0f20 	tst.w	r5, #32
   18c70:	d02e      	beq.n	18cd0 <bt_id_set_adv_own_addr+0xa0>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   18c72:	f043 0302 	orr.w	r3, r3, #2
   18c76:	7033      	strb	r3, [r6, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   18c78:	2000      	movs	r0, #0
   18c7a:	e017      	b.n	18cac <bt_id_set_adv_own_addr+0x7c>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   18c7c:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   18c80:	4411      	add	r1, r2
   18c82:	3101      	adds	r1, #1
   18c84:	f013 fb9a 	bl	2c3bc <bt_id_set_adv_random_addr>
				if (err) {
   18c88:	2800      	cmp	r0, #0
   18c8a:	d0e9      	beq.n	18c60 <bt_id_set_adv_own_addr+0x30>
   18c8c:	e00e      	b.n	18cac <bt_id_set_adv_own_addr+0x7c>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   18c8e:	f011 0f04 	tst.w	r1, #4
   18c92:	d013      	beq.n	18cbc <bt_id_set_adv_own_addr+0x8c>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   18c94:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   18c98:	4a0e      	ldr	r2, [pc, #56]	; (18cd4 <bt_id_set_adv_own_addr+0xa4>)
   18c9a:	5cd3      	ldrb	r3, [r2, r3]
   18c9c:	2b01      	cmp	r3, #1
   18c9e:	d006      	beq.n	18cae <bt_id_set_adv_own_addr+0x7e>
	int err = 0;
   18ca0:	2000      	movs	r0, #0
			*own_addr_type = id_addr->type;
   18ca2:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   18ca6:	4b0b      	ldr	r3, [pc, #44]	; (18cd4 <bt_id_set_adv_own_addr+0xa4>)
   18ca8:	5d1b      	ldrb	r3, [r3, r4]
   18caa:	7033      	strb	r3, [r6, #0]
}
   18cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   18cae:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   18cb2:	4411      	add	r1, r2
   18cb4:	3101      	adds	r1, #1
   18cb6:	f013 fb81 	bl	2c3bc <bt_id_set_adv_random_addr>
   18cba:	e7f2      	b.n	18ca2 <bt_id_set_adv_own_addr+0x72>
			err = bt_id_set_adv_private_addr(adv);
   18cbc:	f013 fb83 	bl	2c3c6 <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   18cc0:	2301      	movs	r3, #1
   18cc2:	7033      	strb	r3, [r6, #0]
		if (err) {
   18cc4:	e7f2      	b.n	18cac <bt_id_set_adv_own_addr+0x7c>
			return -ENOTSUP;
   18cc6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   18cca:	e7ef      	b.n	18cac <bt_id_set_adv_own_addr+0x7c>
	return 0;
   18ccc:	2000      	movs	r0, #0
   18cce:	e7ed      	b.n	18cac <bt_id_set_adv_own_addr+0x7c>
   18cd0:	2000      	movs	r0, #0
   18cd2:	e7eb      	b.n	18cac <bt_id_set_adv_own_addr+0x7c>
   18cd4:	20000350 	.word	0x20000350

00018cd8 <adv_new_legacy>:
	bt_dev.adv = adv_new();
	return bt_dev.adv;
#else
	return &bt_dev.adv;
#endif
}
   18cd8:	4800      	ldr	r0, [pc, #0]	; (18cdc <adv_new_legacy+0x4>)
   18cda:	4770      	bx	lr
   18cdc:	20000368 	.word	0x20000368

00018ce0 <set_data_add_complete>:
	return valid_adv_ext_param(param);
}

static int set_data_add_complete(uint8_t *set_data, uint8_t set_data_len_max,
			const struct bt_ad *ad, size_t ad_len, uint8_t *data_len)
{
   18ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18ce4:	b083      	sub	sp, #12
   18ce6:	4605      	mov	r5, r0
   18ce8:	4688      	mov	r8, r1
   18cea:	9201      	str	r2, [sp, #4]
   18cec:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;

	for (size_t i = 0; i < ad_len; i++) {
   18cee:	f04f 0a00 	mov.w	sl, #0
	uint8_t set_data_len = 0;
   18cf2:	4653      	mov	r3, sl
	for (size_t i = 0; i < ad_len; i++) {
   18cf4:	9a00      	ldr	r2, [sp, #0]
   18cf6:	4552      	cmp	r2, sl
   18cf8:	d940      	bls.n	18d7c <set_data_add_complete+0x9c>
		const struct bt_data *data = ad[i].data;
   18cfa:	9a01      	ldr	r2, [sp, #4]
   18cfc:	eb02 09ca 	add.w	r9, r2, sl, lsl #3
   18d00:	f852 703a 	ldr.w	r7, [r2, sl, lsl #3]

		for (size_t j = 0; j < ad[i].len; j++) {
   18d04:	2400      	movs	r4, #0
   18d06:	e01d      	b.n	18d44 <set_data_add_complete+0x64>
				ssize_t shortened_len = set_data_len_max -
							(set_data_len + 2);

				if (!(type == BT_DATA_NAME_COMPLETE &&
				      shortened_len > 0)) {
					BT_ERR("Too big advertising data");
   18d08:	2145      	movs	r1, #69	; 0x45
   18d0a:	481e      	ldr	r0, [pc, #120]	; (18d84 <set_data_add_complete+0xa4>)
   18d0c:	f012 f9ce 	bl	2b0ac <z_log_minimal_printk>
					return -EINVAL;
   18d10:	f06f 0015 	mvn.w	r0, #21
		}
	}

	*data_len = set_data_len;
	return 0;
}
   18d14:	b003      	add	sp, #12
   18d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			set_data[set_data_len++] = len + 1;
   18d1a:	b2d6      	uxtb	r6, r2
   18d1c:	1c59      	adds	r1, r3, #1
   18d1e:	b2c9      	uxtb	r1, r1
   18d20:	f106 0b01 	add.w	fp, r6, #1
   18d24:	f805 b00e 	strb.w	fp, [r5, lr]
			set_data[set_data_len++] = type;
   18d28:	3302      	adds	r3, #2
   18d2a:	fa5f fb83 	uxtb.w	fp, r3
   18d2e:	f805 c001 	strb.w	ip, [r5, r1]
   18d32:	6841      	ldr	r1, [r0, #4]
   18d34:	eb05 000b 	add.w	r0, r5, fp
   18d38:	f017 ffee 	bl	30d18 <memcpy>
			set_data_len += len;
   18d3c:	eb0b 0306 	add.w	r3, fp, r6
   18d40:	b2db      	uxtb	r3, r3
		for (size_t j = 0; j < ad[i].len; j++) {
   18d42:	3401      	adds	r4, #1
   18d44:	f8d9 2004 	ldr.w	r2, [r9, #4]
   18d48:	4294      	cmp	r4, r2
   18d4a:	d214      	bcs.n	18d76 <set_data_add_complete+0x96>
			size_t len = data[j].data_len;
   18d4c:	eb07 00c4 	add.w	r0, r7, r4, lsl #3
   18d50:	7842      	ldrb	r2, [r0, #1]
			uint8_t type = data[j].type;
   18d52:	f817 c034 	ldrb.w	ip, [r7, r4, lsl #3]
			if ((set_data_len + len + 2) > set_data_len_max) {
   18d56:	469e      	mov	lr, r3
   18d58:	1899      	adds	r1, r3, r2
   18d5a:	3102      	adds	r1, #2
   18d5c:	4541      	cmp	r1, r8
   18d5e:	d9dc      	bls.n	18d1a <set_data_add_complete+0x3a>
							(set_data_len + 2);
   18d60:	1c9a      	adds	r2, r3, #2
				ssize_t shortened_len = set_data_len_max -
   18d62:	eba8 0202 	sub.w	r2, r8, r2
				if (!(type == BT_DATA_NAME_COMPLETE &&
   18d66:	f1bc 0f09 	cmp.w	ip, #9
   18d6a:	d1cd      	bne.n	18d08 <set_data_add_complete+0x28>
   18d6c:	2a00      	cmp	r2, #0
   18d6e:	ddcb      	ble.n	18d08 <set_data_add_complete+0x28>
				type = BT_DATA_NAME_SHORTENED;
   18d70:	f04f 0c08 	mov.w	ip, #8
   18d74:	e7d1      	b.n	18d1a <set_data_add_complete+0x3a>
	for (size_t i = 0; i < ad_len; i++) {
   18d76:	f10a 0a01 	add.w	sl, sl, #1
   18d7a:	e7bb      	b.n	18cf4 <set_data_add_complete+0x14>
	*data_len = set_data_len;
   18d7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   18d7e:	7013      	strb	r3, [r2, #0]
	return 0;
   18d80:	2000      	movs	r0, #0
   18d82:	e7c7      	b.n	18d14 <set_data_add_complete+0x34>
   18d84:	00032f1c 	.word	0x00032f1c

00018d88 <valid_adv_ext_param>:
{
   18d88:	b510      	push	{r4, lr}
   18d8a:	b082      	sub	sp, #8
   18d8c:	4604      	mov	r4, r0
	if (param->id >= bt_dev.id_count ||
   18d8e:	7800      	ldrb	r0, [r0, #0]
   18d90:	4b23      	ldr	r3, [pc, #140]	; (18e20 <valid_adv_ext_param+0x98>)
   18d92:	79db      	ldrb	r3, [r3, #7]
   18d94:	4298      	cmp	r0, r3
   18d96:	d302      	bcc.n	18d9e <valid_adv_ext_param+0x16>
		return false;
   18d98:	2000      	movs	r0, #0
}
   18d9a:	b002      	add	sp, #8
   18d9c:	bd10      	pop	{r4, pc}
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   18d9e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   18da2:	2300      	movs	r3, #0
   18da4:	9300      	str	r3, [sp, #0]
   18da6:	f8cd 3003 	str.w	r3, [sp, #3]
	return memcmp(a, b, sizeof(*a));
   18daa:	2207      	movs	r2, #7
   18dac:	4669      	mov	r1, sp
   18dae:	4b1c      	ldr	r3, [pc, #112]	; (18e20 <valid_adv_ext_param+0x98>)
   18db0:	4418      	add	r0, r3
   18db2:	f017 ffa1 	bl	30cf8 <memcmp>
	if (param->id >= bt_dev.id_count ||
   18db6:	2800      	cmp	r0, #0
   18db8:	d0ee      	beq.n	18d98 <valid_adv_ext_param+0x10>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   18dba:	6863      	ldr	r3, [r4, #4]
   18dbc:	f013 0f01 	tst.w	r3, #1
   18dc0:	d107      	bne.n	18dd2 <valid_adv_ext_param+0x4a>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   18dc2:	4a17      	ldr	r2, [pc, #92]	; (18e20 <valid_adv_ext_param+0x98>)
   18dc4:	f892 2068 	ldrb.w	r2, [r2, #104]	; 0x68
   18dc8:	2a08      	cmp	r2, #8
   18dca:	d802      	bhi.n	18dd2 <valid_adv_ext_param+0x4a>
		    param->interval_min < 0x00a0) {
   18dcc:	68a2      	ldr	r2, [r4, #8]
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   18dce:	2a9f      	cmp	r2, #159	; 0x9f
   18dd0:	d91b      	bls.n	18e0a <valid_adv_ext_param+0x82>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   18dd2:	f013 0f30 	tst.w	r3, #48	; 0x30
   18dd6:	d001      	beq.n	18ddc <valid_adv_ext_param+0x54>
	    !param->peer) {
   18dd8:	6922      	ldr	r2, [r4, #16]
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   18dda:	b1c2      	cbz	r2, 18e0e <valid_adv_ext_param+0x86>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   18ddc:	f013 0f10 	tst.w	r3, #16
   18de0:	d108      	bne.n	18df4 <valid_adv_ext_param+0x6c>
	    !param->peer) {
   18de2:	6922      	ldr	r2, [r4, #16]
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   18de4:	b132      	cbz	r2, 18df4 <valid_adv_ext_param+0x6c>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   18de6:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   18dea:	f5b3 3f60 	cmp.w	r3, #229376	; 0x38000
   18dee:	d014      	beq.n	18e1a <valid_adv_ext_param+0x92>
	return true;
   18df0:	2001      	movs	r0, #1
   18df2:	e7d2      	b.n	18d9a <valid_adv_ext_param+0x12>
		if (param->interval_min > param->interval_max ||
   18df4:	68a2      	ldr	r2, [r4, #8]
   18df6:	68e1      	ldr	r1, [r4, #12]
   18df8:	428a      	cmp	r2, r1
   18dfa:	d80a      	bhi.n	18e12 <valid_adv_ext_param+0x8a>
   18dfc:	2a1f      	cmp	r2, #31
   18dfe:	d90a      	bls.n	18e16 <valid_adv_ext_param+0x8e>
		    param->interval_min < 0x0020 ||
   18e00:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
   18e04:	d9ef      	bls.n	18de6 <valid_adv_ext_param+0x5e>
			return false;
   18e06:	2000      	movs	r0, #0
   18e08:	e7c7      	b.n	18d9a <valid_adv_ext_param+0x12>
			return false;
   18e0a:	2000      	movs	r0, #0
   18e0c:	e7c5      	b.n	18d9a <valid_adv_ext_param+0x12>
		return false;
   18e0e:	2000      	movs	r0, #0
   18e10:	e7c3      	b.n	18d9a <valid_adv_ext_param+0x12>
			return false;
   18e12:	2000      	movs	r0, #0
   18e14:	e7c1      	b.n	18d9a <valid_adv_ext_param+0x12>
   18e16:	2000      	movs	r0, #0
   18e18:	e7bf      	b.n	18d9a <valid_adv_ext_param+0x12>
		return false;
   18e1a:	2000      	movs	r0, #0
   18e1c:	e7bd      	b.n	18d9a <valid_adv_ext_param+0x12>
   18e1e:	bf00      	nop
   18e20:	20000350 	.word	0x20000350

00018e24 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   18e24:	b5f0      	push	{r4, r5, r6, r7, lr}
   18e26:	b085      	sub	sp, #20
   18e28:	4604      	mov	r4, r0
   18e2a:	460f      	mov	r7, r1
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   18e2c:	4605      	mov	r5, r0
   18e2e:	f815 2b09 	ldrb.w	r2, [r5], #9
   18e32:	4b1f      	ldr	r3, [pc, #124]	; (18eb0 <le_adv_start_add_conn+0x8c>)
   18e34:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   18e38:	2300      	movs	r3, #0
   18e3a:	9300      	str	r3, [sp, #0]
   18e3c:	f8cd 3003 	str.w	r3, [sp, #3]
   18e40:	2207      	movs	r2, #7
   18e42:	4669      	mov	r1, sp
   18e44:	4628      	mov	r0, r5
   18e46:	f017 ff57 	bl	30cf8 <memcmp>
   18e4a:	b9b8      	cbnz	r0, 18e7c <le_adv_start_add_conn+0x58>
   18e4c:	4606      	mov	r6, r0
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   18e4e:	4b19      	ldr	r3, [pc, #100]	; (18eb4 <le_adv_start_add_conn+0x90>)
   18e50:	e893 0003 	ldmia.w	r3, {r0, r1}
   18e54:	9002      	str	r0, [sp, #8]
   18e56:	f8ad 100c 	strh.w	r1, [sp, #12]
   18e5a:	0c09      	lsrs	r1, r1, #16
   18e5c:	f88d 100e 	strb.w	r1, [sp, #14]
   18e60:	a902      	add	r1, sp, #8
   18e62:	7820      	ldrb	r0, [r4, #0]
   18e64:	f013 fe41 	bl	2caea <bt_conn_add_le>
		if (!conn) {
   18e68:	4604      	mov	r4, r0
   18e6a:	b120      	cbz	r0, 18e76 <le_adv_start_add_conn+0x52>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECTING_ADV);
   18e6c:	2104      	movs	r1, #4
   18e6e:	f000 fedd 	bl	19c2c <bt_conn_set_state>
		*out_conn = conn;
   18e72:	603c      	str	r4, [r7, #0]
		return 0;
   18e74:	e012      	b.n	18e9c <le_adv_start_add_conn+0x78>
			return -ENOMEM;
   18e76:	f06f 060b 	mvn.w	r6, #11
   18e7a:	e00f      	b.n	18e9c <le_adv_start_add_conn+0x78>
	}

	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   18e7c:	4629      	mov	r1, r5
   18e7e:	7820      	ldrb	r0, [r4, #0]
   18e80:	f001 f960 	bl	1a144 <bt_conn_exists_le>
   18e84:	b968      	cbnz	r0, 18ea2 <le_adv_start_add_conn+0x7e>
		return -EINVAL;
	}

	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   18e86:	4629      	mov	r1, r5
   18e88:	7820      	ldrb	r0, [r4, #0]
   18e8a:	f013 fe2e 	bl	2caea <bt_conn_add_le>
	if (!conn) {
   18e8e:	4604      	mov	r4, r0
   18e90:	b150      	cbz	r0, 18ea8 <le_adv_start_add_conn+0x84>
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
   18e92:	2105      	movs	r1, #5
   18e94:	f000 feca 	bl	19c2c <bt_conn_set_state>
	*out_conn = conn;
   18e98:	603c      	str	r4, [r7, #0]
	return 0;
   18e9a:	2600      	movs	r6, #0
}
   18e9c:	4630      	mov	r0, r6
   18e9e:	b005      	add	sp, #20
   18ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EINVAL;
   18ea2:	f06f 0615 	mvn.w	r6, #21
   18ea6:	e7f9      	b.n	18e9c <le_adv_start_add_conn+0x78>
		return -ENOMEM;
   18ea8:	f06f 060b 	mvn.w	r6, #11
   18eac:	e7f6      	b.n	18e9c <le_adv_start_add_conn+0x78>
   18eae:	bf00      	nop
   18eb0:	20000350 	.word	0x20000350
   18eb4:	00031524 	.word	0x00031524

00018eb8 <le_adv_stop_free_conn>:

static void le_adv_stop_free_conn(const struct bt_le_ext_adv *adv, uint8_t status)
{
   18eb8:	b570      	push	{r4, r5, r6, lr}
   18eba:	b084      	sub	sp, #16
   18ebc:	4604      	mov	r4, r0
   18ebe:	460e      	mov	r6, r1
	struct bt_conn *conn;

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   18ec0:	f100 0509 	add.w	r5, r0, #9
   18ec4:	2300      	movs	r3, #0
   18ec6:	9300      	str	r3, [sp, #0]
   18ec8:	f8cd 3003 	str.w	r3, [sp, #3]
   18ecc:	2207      	movs	r2, #7
   18ece:	4669      	mov	r1, sp
   18ed0:	4628      	mov	r0, r5
   18ed2:	f017 ff11 	bl	30cf8 <memcmp>
   18ed6:	b9c8      	cbnz	r0, 18f0c <le_adv_stop_free_conn+0x54>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   18ed8:	4b10      	ldr	r3, [pc, #64]	; (18f1c <le_adv_stop_free_conn+0x64>)
   18eda:	e893 0003 	ldmia.w	r3, {r0, r1}
   18ede:	9002      	str	r0, [sp, #8]
   18ee0:	f8ad 100c 	strh.w	r1, [sp, #12]
   18ee4:	0c09      	lsrs	r1, r1, #16
   18ee6:	f88d 100e 	strb.w	r1, [sp, #14]
   18eea:	2204      	movs	r2, #4
   18eec:	a902      	add	r1, sp, #8
   18eee:	7820      	ldrb	r0, [r4, #0]
   18ef0:	f001 f96c 	bl	1a1cc <bt_conn_lookup_state_le>
   18ef4:	4604      	mov	r4, r0
	} else {
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
					       BT_CONN_CONNECTING_DIR_ADV);
	}

	if (conn) {
   18ef6:	b13c      	cbz	r4, 18f08 <le_adv_stop_free_conn+0x50>
		conn->err = status;
   18ef8:	7326      	strb	r6, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   18efa:	2100      	movs	r1, #0
   18efc:	4620      	mov	r0, r4
   18efe:	f000 fe95 	bl	19c2c <bt_conn_set_state>
		bt_conn_unref(conn);
   18f02:	4620      	mov	r0, r4
   18f04:	f000 fe56 	bl	19bb4 <bt_conn_unref>
	}
}
   18f08:	b004      	add	sp, #16
   18f0a:	bd70      	pop	{r4, r5, r6, pc}
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   18f0c:	2205      	movs	r2, #5
   18f0e:	4629      	mov	r1, r5
   18f10:	7820      	ldrb	r0, [r4, #0]
   18f12:	f001 f95b 	bl	1a1cc <bt_conn_lookup_state_le>
   18f16:	4604      	mov	r4, r0
   18f18:	e7ed      	b.n	18ef6 <le_adv_stop_free_conn+0x3e>
   18f1a:	bf00      	nop
   18f1c:	00031524 	.word	0x00031524

00018f20 <bt_le_ext_adv_foreach>:
{
   18f20:	b508      	push	{r3, lr}
   18f22:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
   18f24:	4801      	ldr	r0, [pc, #4]	; (18f2c <bt_le_ext_adv_foreach+0xc>)
   18f26:	4798      	blx	r3
}
   18f28:	bd08      	pop	{r3, pc}
   18f2a:	bf00      	nop
   18f2c:	20000368 	.word	0x20000368

00018f30 <bt_le_adv_lookup_legacy>:
}
   18f30:	4800      	ldr	r0, [pc, #0]	; (18f34 <bt_le_adv_lookup_legacy+0x4>)
   18f32:	4770      	bx	lr
   18f34:	20000368 	.word	0x20000368

00018f38 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   18f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18f3c:	b08f      	sub	sp, #60	; 0x3c
   18f3e:	9204      	str	r2, [sp, #16]
   18f40:	9305      	str	r3, [sp, #20]
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
   18f42:	2300      	movs	r3, #0
   18f44:	9307      	str	r3, [sp, #28]
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
   18f46:	690f      	ldr	r7, [r1, #16]
   18f48:	ebb7 0b03 	subs.w	fp, r7, r3
   18f4c:	bf18      	it	ne
   18f4e:	f04f 0b01 	movne.w	fp, #1
   18f52:	f3bf 8f5b 	dmb	ish
   18f56:	4bb9      	ldr	r3, [pc, #740]	; (1923c <bt_le_adv_start_legacy+0x304>)
   18f58:	681b      	ldr	r3, [r3, #0]
   18f5a:	f3bf 8f5b 	dmb	ish
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   18f5e:	f013 0f04 	tst.w	r3, #4
   18f62:	f000 81b2 	beq.w	192ca <bt_le_adv_start_legacy+0x392>
   18f66:	4605      	mov	r5, r0
   18f68:	460c      	mov	r4, r1
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   18f6a:	4608      	mov	r0, r1
   18f6c:	f013 fb51 	bl	2c612 <valid_adv_param>
   18f70:	2800      	cmp	r0, #0
   18f72:	f000 81ad 	beq.w	192d0 <bt_le_adv_start_legacy+0x398>
		return -EINVAL;
	}

	if (!bt_id_adv_random_addr_check(param)) {
   18f76:	4620      	mov	r0, r4
   18f78:	f013 fa3a 	bl	2c3f0 <bt_id_adv_random_addr_check>
   18f7c:	4681      	mov	r9, r0
   18f7e:	2800      	cmp	r0, #0
   18f80:	f000 81a9 	beq.w	192d6 <bt_le_adv_start_legacy+0x39e>
		return -EINVAL;
	}

	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   18f84:	f105 0610 	add.w	r6, r5, #16
   18f88:	f3bf 8f5b 	dmb	ish
   18f8c:	692b      	ldr	r3, [r5, #16]
   18f8e:	f3bf 8f5b 	dmb	ish
   18f92:	f3c3 1a80 	ubfx	sl, r3, #6, #1
   18f96:	f013 0f40 	tst.w	r3, #64	; 0x40
   18f9a:	f040 819f 	bne.w	192dc <bt_le_adv_start_legacy+0x3a4>
		return -EALREADY;
	}

	(void)memset(&set_param, 0, sizeof(set_param));
   18f9e:	2300      	movs	r3, #0
   18fa0:	9308      	str	r3, [sp, #32]
   18fa2:	9309      	str	r3, [sp, #36]	; 0x24
   18fa4:	930a      	str	r3, [sp, #40]	; 0x28
   18fa6:	f8cd 302b 	str.w	r3, [sp, #43]	; 0x2b

	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   18faa:	68a3      	ldr	r3, [r4, #8]
   18fac:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   18fb0:	68e3      	ldr	r3, [r4, #12]
   18fb2:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = get_adv_channel_map(param->options);
   18fb6:	f8d4 8004 	ldr.w	r8, [r4, #4]
   18fba:	4640      	mov	r0, r8
   18fbc:	f013 fa52 	bl	2c464 <get_adv_channel_map>
   18fc0:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	set_param.filter_policy = get_filter_policy(param->options);
   18fc4:	4640      	mov	r0, r8
   18fc6:	f013 fa4b 	bl	2c460 <get_filter_policy>
   18fca:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e

	if (adv->id != param->id) {
   18fce:	782a      	ldrb	r2, [r5, #0]
   18fd0:	7823      	ldrb	r3, [r4, #0]
   18fd2:	429a      	cmp	r2, r3
   18fd4:	d00c      	beq.n	18ff0 <bt_le_adv_start_legacy+0xb8>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   18fd6:	4b99      	ldr	r3, [pc, #612]	; (1923c <bt_le_adv_start_legacy+0x304>)
   18fd8:	f3bf 8f5b 	dmb	ish
   18fdc:	e853 2f00 	ldrex	r2, [r3]
   18fe0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   18fe4:	e843 2100 	strex	r1, r2, [r3]
   18fe8:	2900      	cmp	r1, #0
   18fea:	d1f7      	bne.n	18fdc <bt_le_adv_start_legacy+0xa4>
   18fec:	f3bf 8f5b 	dmb	ish
		atomic_clear_bit(bt_dev.flags, BT_DEV_RPA_VALID);
	}

	adv->id = param->id;
   18ff0:	7823      	ldrb	r3, [r4, #0]
   18ff2:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
   18ff4:	4a92      	ldr	r2, [pc, #584]	; (19240 <bt_le_adv_start_legacy+0x308>)
   18ff6:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67

	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   18ffa:	f10d 0325 	add.w	r3, sp, #37	; 0x25
   18ffe:	465a      	mov	r2, fp
   19000:	6861      	ldr	r1, [r4, #4]
   19002:	4628      	mov	r0, r5
   19004:	f7ff fe14 	bl	18c30 <bt_id_set_adv_own_addr>
				     &set_param.own_addr_type);
	if (err) {
   19008:	4680      	mov	r8, r0
   1900a:	2800      	cmp	r0, #0
   1900c:	f040 80ef 	bne.w	191ee <bt_le_adv_start_legacy+0x2b6>
		return err;
	}

	if (dir_adv) {
   19010:	b31f      	cbz	r7, 1905a <bt_le_adv_start_legacy+0x122>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   19012:	6923      	ldr	r3, [r4, #16]
   19014:	681a      	ldr	r2, [r3, #0]
   19016:	f8c5 2009 	str.w	r2, [r5, #9]
   1901a:	889a      	ldrh	r2, [r3, #4]
   1901c:	799b      	ldrb	r3, [r3, #6]
   1901e:	f8a5 200d 	strh.w	r2, [r5, #13]
   19022:	73eb      	strb	r3, [r5, #15]
	} else {
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
	}

	name_type = get_adv_name_type_param(param);
   19024:	4620      	mov	r0, r4
   19026:	f013 fb05 	bl	2c634 <get_adv_name_type_param>
   1902a:	4683      	mov	fp, r0

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   1902c:	6863      	ldr	r3, [r4, #4]
   1902e:	f013 0f01 	tst.w	r3, #1
   19032:	d022      	beq.n	1907a <bt_le_adv_start_legacy+0x142>
		if (dir_adv) {
   19034:	b1ef      	cbz	r7, 19072 <bt_le_adv_start_legacy+0x13a>
			if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
   19036:	f013 0f10 	tst.w	r3, #16
   1903a:	d016      	beq.n	1906a <bt_le_adv_start_legacy+0x132>
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
   1903c:	2304      	movs	r3, #4
   1903e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
			} else {
				set_param.type = BT_HCI_ADV_DIRECT_IND;
			}

			bt_addr_le_copy(&set_param.direct_addr, param->peer);
   19042:	6923      	ldr	r3, [r4, #16]
	memcpy(dst, src, sizeof(*dst));
   19044:	681a      	ldr	r2, [r3, #0]
   19046:	f8cd 2026 	str.w	r2, [sp, #38]	; 0x26
   1904a:	889a      	ldrh	r2, [r3, #4]
   1904c:	799b      	ldrb	r3, [r3, #6]
   1904e:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
   19052:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bool dir_adv = (param->peer != NULL), scannable = false;
   19056:	46d1      	mov	r9, sl
}
   19058:	e017      	b.n	1908a <bt_le_adv_start_legacy+0x152>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   1905a:	2300      	movs	r3, #0
   1905c:	930c      	str	r3, [sp, #48]	; 0x30
   1905e:	f8cd 3033 	str.w	r3, [sp, #51]	; 0x33
   19062:	f8c5 3009 	str.w	r3, [r5, #9]
   19066:	60eb      	str	r3, [r5, #12]
   19068:	e7dc      	b.n	19024 <bt_le_adv_start_legacy+0xec>
				set_param.type = BT_HCI_ADV_DIRECT_IND;
   1906a:	2301      	movs	r3, #1
   1906c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   19070:	e7e7      	b.n	19042 <bt_le_adv_start_legacy+0x10a>
		} else {
			scannable = true;
			set_param.type = BT_HCI_ADV_IND;
   19072:	2300      	movs	r3, #0
   19074:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   19078:	e007      	b.n	1908a <bt_le_adv_start_legacy+0x152>
		}
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   1907a:	f413 7f00 	tst.w	r3, #512	; 0x200
   1907e:	d101      	bne.n	19084 <bt_le_adv_start_legacy+0x14c>
   19080:	9b18      	ldr	r3, [sp, #96]	; 0x60
   19082:	b35b      	cbz	r3, 190dc <bt_le_adv_start_legacy+0x1a4>
		   (name_type == ADV_NAME_TYPE_SD)) {
		scannable = true;
		set_param.type = BT_HCI_ADV_SCAN_IND;
   19084:	2302      	movs	r3, #2
   19086:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	} else {
		set_param.type = BT_HCI_ADV_NONCONN_IND;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   1908a:	210f      	movs	r1, #15
   1908c:	f242 0006 	movw	r0, #8198	; 0x2006
   19090:	f7fe fa48 	bl	17524 <bt_hci_cmd_create>
	if (!buf) {
   19094:	4680      	mov	r8, r0
   19096:	2800      	cmp	r0, #0
   19098:	f000 8123 	beq.w	192e2 <bt_le_adv_start_legacy+0x3aa>
   1909c:	220f      	movs	r2, #15
   1909e:	a908      	add	r1, sp, #32
   190a0:	3008      	adds	r0, #8
   190a2:	f016 f86d 	bl	2f180 <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   190a6:	2200      	movs	r2, #0
   190a8:	4641      	mov	r1, r8
   190aa:	f242 0006 	movw	r0, #8198	; 0x2006
   190ae:	f7fe fa87 	bl	175c0 <bt_hci_cmd_send_sync>
	if (err) {
   190b2:	4680      	mov	r8, r0
   190b4:	2800      	cmp	r0, #0
   190b6:	f040 809a 	bne.w	191ee <bt_le_adv_start_legacy+0x2b6>
		return err;
	}

	if (!dir_adv) {
   190ba:	b1b7      	cbz	r7, 190ea <bt_le_adv_start_legacy+0x1b2>
			return err;
		}
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   190bc:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   190be:	f013 0f01 	tst.w	r3, #1
   190c2:	d02a      	beq.n	1911a <bt_le_adv_start_legacy+0x1e2>
		err = le_adv_start_add_conn(adv, &conn);
   190c4:	a907      	add	r1, sp, #28
   190c6:	4628      	mov	r0, r5
   190c8:	f7ff feac 	bl	18e24 <le_adv_start_add_conn>
		if (err) {
   190cc:	b328      	cbz	r0, 1911a <bt_le_adv_start_legacy+0x1e2>
			if (err == -ENOMEM && !dir_adv &&
   190ce:	f110 0f0c 	cmn.w	r0, #12
   190d2:	f040 8109 	bne.w	192e8 <bt_le_adv_start_legacy+0x3b0>
   190d6:	b1d7      	cbz	r7, 1910e <bt_le_adv_start_legacy+0x1d6>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
				goto set_adv_state;
			}

			return err;
   190d8:	4680      	mov	r8, r0
   190da:	e088      	b.n	191ee <bt_le_adv_start_legacy+0x2b6>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   190dc:	2802      	cmp	r0, #2
   190de:	d0d1      	beq.n	19084 <bt_le_adv_start_legacy+0x14c>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   190e0:	2303      	movs	r3, #3
   190e2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	bool dir_adv = (param->peer != NULL), scannable = false;
   190e6:	46d1      	mov	r9, sl
   190e8:	e7cf      	b.n	1908a <bt_le_adv_start_legacy+0x152>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   190ea:	f8cd b00c 	str.w	fp, [sp, #12]
   190ee:	f8cd 9008 	str.w	r9, [sp, #8]
   190f2:	2300      	movs	r3, #0
   190f4:	9301      	str	r3, [sp, #4]
   190f6:	9b19      	ldr	r3, [sp, #100]	; 0x64
   190f8:	9300      	str	r3, [sp, #0]
   190fa:	9b18      	ldr	r3, [sp, #96]	; 0x60
   190fc:	9a05      	ldr	r2, [sp, #20]
   190fe:	9904      	ldr	r1, [sp, #16]
   19100:	4628      	mov	r0, r5
   19102:	f013 f9fb 	bl	2c4fc <le_adv_update>
		if (err) {
   19106:	2800      	cmp	r0, #0
   19108:	d0d8      	beq.n	190bc <bt_le_adv_start_legacy+0x184>
			return err;
   1910a:	4680      	mov	r8, r0
   1910c:	e06f      	b.n	191ee <bt_le_adv_start_legacy+0x2b6>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   1910e:	6862      	ldr	r2, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
   19110:	f012 0f02 	tst.w	r2, #2
   19114:	d00c      	beq.n	19130 <bt_le_adv_start_legacy+0x1f8>
			return err;
   19116:	4680      	mov	r8, r0
   19118:	e069      	b.n	191ee <bt_le_adv_start_legacy+0x2b6>
		}
	}

	err = bt_le_adv_set_enable(adv, true);
   1911a:	2101      	movs	r1, #1
   1911c:	4628      	mov	r0, r5
   1911e:	f013 fac5 	bl	2c6ac <bt_le_adv_set_enable>
	if (err) {
   19122:	4605      	mov	r5, r0
   19124:	2800      	cmp	r0, #0
   19126:	d166      	bne.n	191f6 <bt_le_adv_start_legacy+0x2be>
		}

		return err;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   19128:	9807      	ldr	r0, [sp, #28]
   1912a:	b108      	cbz	r0, 19130 <bt_le_adv_start_legacy+0x1f8>
		/* If undirected connectable advertiser we have created a
		 * connection object that we don't yet give to the application.
		 * Since we don't give the application a reference to manage in
		 * this case, we need to release this reference here
		 */
		bt_conn_unref(conn);
   1912c:	f000 fd42 	bl	19bb4 <bt_conn_unref>
	}

set_adv_state:
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   19130:	2f00      	cmp	r7, #0
   19132:	d06e      	beq.n	19212 <bt_le_adv_start_legacy+0x2da>
   19134:	4643      	mov	r3, r8
	if (val) {
   19136:	f013 0f01 	tst.w	r3, #1
   1913a:	d072      	beq.n	19222 <bt_le_adv_start_legacy+0x2ea>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1913c:	f3bf 8f5b 	dmb	ish
   19140:	e856 3f00 	ldrex	r3, [r6]
   19144:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   19148:	e846 3200 	strex	r2, r3, [r6]
   1914c:	2a00      	cmp	r2, #0
   1914e:	d1f7      	bne.n	19140 <bt_le_adv_start_legacy+0x208>
   19150:	f3bf 8f5b 	dmb	ish
   19154:	f1bb 0f01 	cmp.w	fp, #1
   19158:	d176      	bne.n	19248 <bt_le_adv_start_legacy+0x310>
   1915a:	f3bf 8f5b 	dmb	ish
   1915e:	e856 3f00 	ldrex	r3, [r6]
   19162:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   19166:	e846 3200 	strex	r2, r3, [r6]
   1916a:	2a00      	cmp	r2, #0
   1916c:	d1f7      	bne.n	1915e <bt_le_adv_start_legacy+0x226>
   1916e:	f3bf 8f5b 	dmb	ish
   19172:	f1bb 0f02 	cmp.w	fp, #2
   19176:	d174      	bne.n	19262 <bt_le_adv_start_legacy+0x32a>
   19178:	f3bf 8f5b 	dmb	ish
   1917c:	e856 3f00 	ldrex	r3, [r6]
   19180:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   19184:	e846 3200 	strex	r2, r3, [r6]
   19188:	2a00      	cmp	r2, #0
   1918a:	d1f7      	bne.n	1917c <bt_le_adv_start_legacy+0x244>
   1918c:	f3bf 8f5b 	dmb	ish

	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
			  name_type == ADV_NAME_TYPE_SD);

	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
			  param->options & BT_LE_ADV_OPT_CONNECTABLE);
   19190:	6863      	ldr	r3, [r4, #4]
   19192:	f013 0f01 	tst.w	r3, #1
   19196:	d071      	beq.n	1927c <bt_le_adv_start_legacy+0x344>
   19198:	f3bf 8f5b 	dmb	ish
   1919c:	e856 3f00 	ldrex	r3, [r6]
   191a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   191a4:	e846 3200 	strex	r2, r3, [r6]
   191a8:	2a00      	cmp	r2, #0
   191aa:	d1f7      	bne.n	1919c <bt_le_adv_start_legacy+0x264>
   191ac:	f3bf 8f5b 	dmb	ish
   191b0:	f1b9 0f00 	cmp.w	r9, #0
   191b4:	d06f      	beq.n	19296 <bt_le_adv_start_legacy+0x35e>
   191b6:	f3bf 8f5b 	dmb	ish
   191ba:	e856 3f00 	ldrex	r3, [r6]
   191be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   191c2:	e846 3200 	strex	r2, r3, [r6]
   191c6:	2a00      	cmp	r2, #0
   191c8:	d1f7      	bne.n	191ba <bt_le_adv_start_legacy+0x282>
   191ca:	f3bf 8f5b 	dmb	ish

	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);
   191ce:	6863      	ldr	r3, [r4, #4]
   191d0:	f013 0f04 	tst.w	r3, #4
   191d4:	d06c      	beq.n	192b0 <bt_le_adv_start_legacy+0x378>
   191d6:	f3bf 8f5b 	dmb	ish
   191da:	e856 3f00 	ldrex	r3, [r6]
   191de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   191e2:	e846 3200 	strex	r2, r3, [r6]
   191e6:	2a00      	cmp	r2, #0
   191e8:	d1f7      	bne.n	191da <bt_le_adv_start_legacy+0x2a2>
   191ea:	f3bf 8f5b 	dmb	ish

	return 0;
}
   191ee:	4640      	mov	r0, r8
   191f0:	b00f      	add	sp, #60	; 0x3c
   191f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		BT_ERR("Failed to start advertiser");
   191f6:	2145      	movs	r1, #69	; 0x45
   191f8:	4812      	ldr	r0, [pc, #72]	; (19244 <bt_le_adv_start_legacy+0x30c>)
   191fa:	f011 ff57 	bl	2b0ac <z_log_minimal_printk>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   191fe:	9807      	ldr	r0, [sp, #28]
   19200:	b128      	cbz	r0, 1920e <bt_le_adv_start_legacy+0x2d6>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   19202:	2100      	movs	r1, #0
   19204:	f000 fd12 	bl	19c2c <bt_conn_set_state>
			bt_conn_unref(conn);
   19208:	9807      	ldr	r0, [sp, #28]
   1920a:	f000 fcd3 	bl	19bb4 <bt_conn_unref>
		return err;
   1920e:	46a8      	mov	r8, r5
   19210:	e7ed      	b.n	191ee <bt_le_adv_start_legacy+0x2b6>
			  !(param->options & BT_LE_ADV_OPT_ONE_TIME));
   19212:	6863      	ldr	r3, [r4, #4]
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   19214:	f013 0f02 	tst.w	r3, #2
   19218:	d001      	beq.n	1921e <bt_le_adv_start_legacy+0x2e6>
   1921a:	4643      	mov	r3, r8
   1921c:	e78b      	b.n	19136 <bt_le_adv_start_legacy+0x1fe>
   1921e:	2301      	movs	r3, #1
   19220:	e789      	b.n	19136 <bt_le_adv_start_legacy+0x1fe>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   19222:	f3bf 8f5b 	dmb	ish
   19226:	e856 3f00 	ldrex	r3, [r6]
   1922a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   1922e:	e846 3200 	strex	r2, r3, [r6]
   19232:	2a00      	cmp	r2, #0
   19234:	d1f7      	bne.n	19226 <bt_le_adv_start_legacy+0x2ee>
   19236:	f3bf 8f5b 	dmb	ish
   1923a:	e78b      	b.n	19154 <bt_le_adv_start_legacy+0x21c>
   1923c:	2000041c 	.word	0x2000041c
   19240:	20000350 	.word	0x20000350
   19244:	00032f3c 	.word	0x00032f3c
   19248:	f3bf 8f5b 	dmb	ish
   1924c:	e856 3f00 	ldrex	r3, [r6]
   19250:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   19254:	e846 3200 	strex	r2, r3, [r6]
   19258:	2a00      	cmp	r2, #0
   1925a:	d1f7      	bne.n	1924c <bt_le_adv_start_legacy+0x314>
   1925c:	f3bf 8f5b 	dmb	ish
   19260:	e787      	b.n	19172 <bt_le_adv_start_legacy+0x23a>
   19262:	f3bf 8f5b 	dmb	ish
   19266:	e856 3f00 	ldrex	r3, [r6]
   1926a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   1926e:	e846 3200 	strex	r2, r3, [r6]
   19272:	2a00      	cmp	r2, #0
   19274:	d1f7      	bne.n	19266 <bt_le_adv_start_legacy+0x32e>
   19276:	f3bf 8f5b 	dmb	ish
   1927a:	e789      	b.n	19190 <bt_le_adv_start_legacy+0x258>
   1927c:	f3bf 8f5b 	dmb	ish
   19280:	e856 3f00 	ldrex	r3, [r6]
   19284:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   19288:	e846 3200 	strex	r2, r3, [r6]
   1928c:	2a00      	cmp	r2, #0
   1928e:	d1f7      	bne.n	19280 <bt_le_adv_start_legacy+0x348>
   19290:	f3bf 8f5b 	dmb	ish
   19294:	e78c      	b.n	191b0 <bt_le_adv_start_legacy+0x278>
   19296:	f3bf 8f5b 	dmb	ish
   1929a:	e856 3f00 	ldrex	r3, [r6]
   1929e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
   192a2:	e846 3200 	strex	r2, r3, [r6]
   192a6:	2a00      	cmp	r2, #0
   192a8:	d1f7      	bne.n	1929a <bt_le_adv_start_legacy+0x362>
   192aa:	f3bf 8f5b 	dmb	ish
   192ae:	e78e      	b.n	191ce <bt_le_adv_start_legacy+0x296>
   192b0:	f3bf 8f5b 	dmb	ish
   192b4:	e856 3f00 	ldrex	r3, [r6]
   192b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   192bc:	e846 3200 	strex	r2, r3, [r6]
   192c0:	2a00      	cmp	r2, #0
   192c2:	d1f7      	bne.n	192b4 <bt_le_adv_start_legacy+0x37c>
   192c4:	f3bf 8f5b 	dmb	ish
}
   192c8:	e791      	b.n	191ee <bt_le_adv_start_legacy+0x2b6>
		return -EAGAIN;
   192ca:	f06f 080a 	mvn.w	r8, #10
   192ce:	e78e      	b.n	191ee <bt_le_adv_start_legacy+0x2b6>
		return -EINVAL;
   192d0:	f06f 0815 	mvn.w	r8, #21
   192d4:	e78b      	b.n	191ee <bt_le_adv_start_legacy+0x2b6>
		return -EINVAL;
   192d6:	f06f 0815 	mvn.w	r8, #21
   192da:	e788      	b.n	191ee <bt_le_adv_start_legacy+0x2b6>
		return -EALREADY;
   192dc:	f06f 0877 	mvn.w	r8, #119	; 0x77
   192e0:	e785      	b.n	191ee <bt_le_adv_start_legacy+0x2b6>
		return -ENOBUFS;
   192e2:	f06f 0868 	mvn.w	r8, #104	; 0x68
   192e6:	e782      	b.n	191ee <bt_le_adv_start_legacy+0x2b6>
			return err;
   192e8:	4680      	mov	r8, r0
   192ea:	e780      	b.n	191ee <bt_le_adv_start_legacy+0x2b6>

000192ec <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   192ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   192f0:	b082      	sub	sp, #8
   192f2:	4606      	mov	r6, r0
   192f4:	460c      	mov	r4, r1
   192f6:	4615      	mov	r5, r2
   192f8:	461f      	mov	r7, r3
	struct bt_le_ext_adv *adv = adv_new_legacy();
   192fa:	f7ff fced 	bl	18cd8 <adv_new_legacy>
	int err;

	if (!adv) {
   192fe:	b1f8      	cbz	r0, 19340 <bt_le_adv_start+0x54>
   19300:	4680      	mov	r8, r0

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   19302:	9b08      	ldr	r3, [sp, #32]
   19304:	9301      	str	r3, [sp, #4]
   19306:	9700      	str	r7, [sp, #0]
   19308:	462b      	mov	r3, r5
   1930a:	4622      	mov	r2, r4
   1930c:	4631      	mov	r1, r6
   1930e:	f7ff fe13 	bl	18f38 <bt_le_adv_start_legacy>
   19312:	4606      	mov	r6, r0

	if (err) {
		bt_le_adv_delete_legacy();
	}

	if (ad_is_limited(ad, ad_len)) {
   19314:	4629      	mov	r1, r5
   19316:	4620      	mov	r0, r4
   19318:	f013 f883 	bl	2c422 <ad_is_limited>
   1931c:	b918      	cbnz	r0, 19326 <bt_le_adv_start+0x3a>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   1931e:	4630      	mov	r0, r6
   19320:	b002      	add	sp, #8
   19322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   19326:	f108 0818 	add.w	r8, r8, #24
   1932a:	4907      	ldr	r1, [pc, #28]	; (19348 <bt_le_adv_start+0x5c>)
   1932c:	4640      	mov	r0, r8
   1932e:	f00d fe39 	bl	26fa4 <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   19332:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   19336:	2300      	movs	r3, #0
   19338:	4640      	mov	r0, r8
   1933a:	f00d ff63 	bl	27204 <k_work_reschedule>
   1933e:	e7ee      	b.n	1931e <bt_le_adv_start+0x32>
		return -ENOMEM;
   19340:	f06f 060b 	mvn.w	r6, #11
   19344:	e7eb      	b.n	1931e <bt_le_adv_start+0x32>
   19346:	bf00      	nop
   19348:	000193c1 	.word	0x000193c1

0001934c <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   1934c:	b510      	push	{r4, lr}
	struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   1934e:	f7ff fdef 	bl	18f30 <bt_le_adv_lookup_legacy>
	int err;

	if (!adv) {
   19352:	b1d0      	cbz	r0, 1938a <bt_le_adv_stop+0x3e>
   19354:	4604      	mov	r4, r0
		BT_ERR("No valid legacy adv");
		return 0;
	}

	(void)bt_le_lim_adv_cancel_timeout(adv);
   19356:	f013 f9ad 	bl	2c6b4 <bt_le_lim_adv_cancel_timeout>

	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);
   1935a:	f104 0310 	add.w	r3, r4, #16
   1935e:	f3bf 8f5b 	dmb	ish
   19362:	e853 2f00 	ldrex	r2, [r3]
   19366:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   1936a:	e843 2100 	strex	r1, r2, [r3]
   1936e:	2900      	cmp	r1, #0
   19370:	d1f7      	bne.n	19362 <bt_le_adv_stop+0x16>
   19372:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19376:	f3bf 8f5b 	dmb	ish
   1937a:	6923      	ldr	r3, [r4, #16]
   1937c:	f3bf 8f5b 	dmb	ish

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   19380:	f013 0f40 	tst.w	r3, #64	; 0x40
   19384:	d107      	bne.n	19396 <bt_le_adv_stop+0x4a>
		/* Legacy advertiser exists, but is not currently advertising.
		 * This happens when keep advertising behavior is active but
		 * no conn object is available to do connectable advertising.
		 */
		bt_le_adv_delete_legacy();
		return 0;
   19386:	2000      	movs	r0, #0
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   19388:	bd10      	pop	{r4, pc}
		BT_ERR("No valid legacy adv");
   1938a:	2145      	movs	r1, #69	; 0x45
   1938c:	480b      	ldr	r0, [pc, #44]	; (193bc <bt_le_adv_stop+0x70>)
   1938e:	f011 fe8d 	bl	2b0ac <z_log_minimal_printk>
		return 0;
   19392:	2000      	movs	r0, #0
   19394:	e7f8      	b.n	19388 <bt_le_adv_stop+0x3c>
   19396:	f3bf 8f5b 	dmb	ish
   1939a:	6923      	ldr	r3, [r4, #16]
   1939c:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   193a0:	f413 7f00 	tst.w	r3, #512	; 0x200
   193a4:	d104      	bne.n	193b0 <bt_le_adv_stop+0x64>
		err = bt_le_adv_set_enable_legacy(adv, false);
   193a6:	2100      	movs	r1, #0
   193a8:	4620      	mov	r0, r4
   193aa:	f013 f957 	bl	2c65c <bt_le_adv_set_enable_legacy>
		if (err) {
   193ae:	e7eb      	b.n	19388 <bt_le_adv_stop+0x3c>
		le_adv_stop_free_conn(adv, 0);
   193b0:	2100      	movs	r1, #0
   193b2:	4620      	mov	r0, r4
   193b4:	f7ff fd80 	bl	18eb8 <le_adv_stop_free_conn>
   193b8:	e7f5      	b.n	193a6 <bt_le_adv_stop+0x5a>
   193ba:	bf00      	nop
   193bc:	00032f5c 	.word	0x00032f5c

000193c0 <adv_timeout>:
}
#endif /* defined(CONFIG_BT_EXT_ADV) */


static void adv_timeout(struct k_work *work)
{
   193c0:	b508      	push	{r3, lr}
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   193c2:	f7ff ffc3 	bl	1934c <bt_le_adv_stop>
   193c6:	4602      	mov	r2, r0
#endif
	BT_WARN("Failed to stop advertising: %d", err);
   193c8:	2157      	movs	r1, #87	; 0x57
   193ca:	4802      	ldr	r0, [pc, #8]	; (193d4 <adv_timeout+0x14>)
   193cc:	f011 fe6e 	bl	2b0ac <z_log_minimal_printk>
}
   193d0:	bd08      	pop	{r3, pc}
   193d2:	bf00      	nop
   193d4:	00032f78 	.word	0x00032f78

000193d8 <bt_pub_key_is_debug>:
	0x5c, 0x15, 0x52, 0x5a, 0xbf, 0x9a, 0x32, 0x63,
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
   193d8:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   193da:	2240      	movs	r2, #64	; 0x40
   193dc:	4903      	ldr	r1, [pc, #12]	; (193ec <bt_pub_key_is_debug+0x14>)
   193de:	f017 fc8b 	bl	30cf8 <memcmp>
}
   193e2:	fab0 f080 	clz	r0, r0
   193e6:	0940      	lsrs	r0, r0, #5
   193e8:	bd08      	pop	{r3, pc}
   193ea:	bf00      	nop
   193ec:	0003304c 	.word	0x0003304c

000193f0 <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   193f0:	b538      	push	{r3, r4, r5, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   193f2:	4b42      	ldr	r3, [pc, #264]	; (194fc <bt_pub_key_gen+0x10c>)
   193f4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   193f8:	f003 0306 	and.w	r3, r3, #6
   193fc:	2b06      	cmp	r3, #6
   193fe:	d106      	bne.n	1940e <bt_pub_key_gen+0x1e>
			new_cb->func(debug_public_key);
			return 0;
		}
	}

	if (!new_cb) {
   19400:	2800      	cmp	r0, #0
   19402:	d077      	beq.n	194f4 <bt_pub_key_gen+0x104>
   19404:	4b3e      	ldr	r3, [pc, #248]	; (19500 <bt_pub_key_gen+0x110>)
   19406:	6819      	ldr	r1, [r3, #0]
		return -EINVAL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   19408:	b179      	cbz	r1, 1942a <bt_pub_key_gen+0x3a>
   1940a:	1f0b      	subs	r3, r1, #4
   1940c:	e010      	b.n	19430 <bt_pub_key_gen+0x40>
		BT_WARN("ECC HCI commands not available");
   1940e:	2157      	movs	r1, #87	; 0x57
   19410:	483c      	ldr	r0, [pc, #240]	; (19504 <bt_pub_key_gen+0x114>)
   19412:	f011 fe4b 	bl	2b0ac <z_log_minimal_printk>
		return -ENOTSUP;
   19416:	f06f 0585 	mvn.w	r5, #133	; 0x85
   1941a:	e041      	b.n	194a0 <bt_pub_key_gen+0xb0>
		if (cb == new_cb) {
			BT_WARN("Callback already registered");
   1941c:	2157      	movs	r1, #87	; 0x57
   1941e:	483a      	ldr	r0, [pc, #232]	; (19508 <bt_pub_key_gen+0x118>)
   19420:	f011 fe44 	bl	2b0ac <z_log_minimal_printk>
			return -EALREADY;
   19424:	f06f 0577 	mvn.w	r5, #119	; 0x77
   19428:	e03a      	b.n	194a0 <bt_pub_key_gen+0xb0>
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1942a:	460b      	mov	r3, r1
   1942c:	e000      	b.n	19430 <bt_pub_key_gen+0x40>
   1942e:	4613      	mov	r3, r2
   19430:	b13b      	cbz	r3, 19442 <bt_pub_key_gen+0x52>
		if (cb == new_cb) {
   19432:	4298      	cmp	r0, r3
   19434:	d0f2      	beq.n	1941c <bt_pub_key_gen+0x2c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   19436:	1d1a      	adds	r2, r3, #4
   19438:	d0f9      	beq.n	1942e <bt_pub_key_gen+0x3e>
	return node->next;
   1943a:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1943c:	b10b      	cbz	r3, 19442 <bt_pub_key_gen+0x52>
   1943e:	3b04      	subs	r3, #4
   19440:	e7f6      	b.n	19430 <bt_pub_key_gen+0x40>
		}
	}

	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
   19442:	1d02      	adds	r2, r0, #4
	parent->next = child;
   19444:	6041      	str	r1, [r0, #4]
	list->head = node;
   19446:	4b2e      	ldr	r3, [pc, #184]	; (19500 <bt_pub_key_gen+0x110>)
   19448:	601a      	str	r2, [r3, #0]
	return list->tail;
   1944a:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1944c:	b18b      	cbz	r3, 19472 <bt_pub_key_gen+0x82>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1944e:	4b2f      	ldr	r3, [pc, #188]	; (1950c <bt_pub_key_gen+0x11c>)
   19450:	f3bf 8f5b 	dmb	ish
   19454:	e853 2f00 	ldrex	r2, [r3]
   19458:	f042 0120 	orr.w	r1, r2, #32
   1945c:	e843 1000 	strex	r0, r1, [r3]
   19460:	2800      	cmp	r0, #0
   19462:	d1f7      	bne.n	19454 <bt_pub_key_gen+0x64>
   19464:	f3bf 8f5b 	dmb	ish

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   19468:	f012 0f20 	tst.w	r2, #32
   1946c:	d004      	beq.n	19478 <bt_pub_key_gen+0x88>
		return 0;
   1946e:	2500      	movs	r5, #0
   19470:	e016      	b.n	194a0 <bt_pub_key_gen+0xb0>
	list->tail = node;
   19472:	4b23      	ldr	r3, [pc, #140]	; (19500 <bt_pub_key_gen+0x110>)
   19474:	605a      	str	r2, [r3, #4]
}
   19476:	e7ea      	b.n	1944e <bt_pub_key_gen+0x5e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   19478:	f3bf 8f5b 	dmb	ish
   1947c:	e853 2f00 	ldrex	r2, [r3]
   19480:	f022 0210 	bic.w	r2, r2, #16
   19484:	e843 2100 	strex	r1, r2, [r3]
   19488:	2900      	cmp	r1, #0
   1948a:	d1f7      	bne.n	1947c <bt_pub_key_gen+0x8c>
   1948c:	f3bf 8f5b 	dmb	ish
	}

	atomic_clear_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   19490:	2200      	movs	r2, #0
   19492:	4611      	mov	r1, r2
   19494:	f242 0025 	movw	r0, #8229	; 0x2025
   19498:	f7fe f892 	bl	175c0 <bt_hci_cmd_send_sync>
	if (err) {
   1949c:	4605      	mov	r5, r0
   1949e:	b908      	cbnz	r0, 194a4 <bt_pub_key_gen+0xb4>
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
   194a0:	4628      	mov	r0, r5
   194a2:	bd38      	pop	{r3, r4, r5, pc}
		BT_ERR("Sending LE P256 Public Key command failed");
   194a4:	2145      	movs	r1, #69	; 0x45
   194a6:	481a      	ldr	r0, [pc, #104]	; (19510 <bt_pub_key_gen+0x120>)
   194a8:	f011 fe00 	bl	2b0ac <z_log_minimal_printk>
   194ac:	4b17      	ldr	r3, [pc, #92]	; (1950c <bt_pub_key_gen+0x11c>)
   194ae:	f3bf 8f5b 	dmb	ish
   194b2:	e853 2f00 	ldrex	r2, [r3]
   194b6:	f022 0220 	bic.w	r2, r2, #32
   194ba:	e843 2100 	strex	r1, r2, [r3]
   194be:	2900      	cmp	r1, #0
   194c0:	d1f7      	bne.n	194b2 <bt_pub_key_gen+0xc2>
   194c2:	f3bf 8f5b 	dmb	ish
	return list->head;
   194c6:	4b0e      	ldr	r3, [pc, #56]	; (19500 <bt_pub_key_gen+0x110>)
   194c8:	681c      	ldr	r4, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   194ca:	b13c      	cbz	r4, 194dc <bt_pub_key_gen+0xec>
   194cc:	3c04      	subs	r4, #4
   194ce:	e005      	b.n	194dc <bt_pub_key_gen+0xec>
Z_GENLIST_PEEK_NEXT(slist, snode)
   194d0:	f114 0f04 	cmn.w	r4, #4
   194d4:	d009      	beq.n	194ea <bt_pub_key_gen+0xfa>
	return node->next;
   194d6:	6864      	ldr	r4, [r4, #4]
   194d8:	b13c      	cbz	r4, 194ea <bt_pub_key_gen+0xfa>
   194da:	3c04      	subs	r4, #4
   194dc:	b12c      	cbz	r4, 194ea <bt_pub_key_gen+0xfa>
			if (cb->func) {
   194de:	6823      	ldr	r3, [r4, #0]
   194e0:	2b00      	cmp	r3, #0
   194e2:	d0f5      	beq.n	194d0 <bt_pub_key_gen+0xe0>
				cb->func(NULL);
   194e4:	2000      	movs	r0, #0
   194e6:	4798      	blx	r3
   194e8:	e7f2      	b.n	194d0 <bt_pub_key_gen+0xe0>
	list->head = NULL;
   194ea:	4b05      	ldr	r3, [pc, #20]	; (19500 <bt_pub_key_gen+0x110>)
   194ec:	2200      	movs	r2, #0
   194ee:	601a      	str	r2, [r3, #0]
	list->tail = NULL;
   194f0:	605a      	str	r2, [r3, #4]
		return err;
   194f2:	e7d5      	b.n	194a0 <bt_pub_key_gen+0xb0>
		return -EINVAL;
   194f4:	f06f 0515 	mvn.w	r5, #21
   194f8:	e7d2      	b.n	194a0 <bt_pub_key_gen+0xb0>
   194fa:	bf00      	nop
   194fc:	20000350 	.word	0x20000350
   19500:	20002610 	.word	0x20002610
   19504:	00032fa4 	.word	0x00032fa4
   19508:	00032fc8 	.word	0x00032fc8
   1950c:	2000041c 	.word	0x2000041c
   19510:	00032fec 	.word	0x00032fec

00019514 <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19514:	f3bf 8f5b 	dmb	ish
   19518:	4b05      	ldr	r3, [pc, #20]	; (19530 <bt_pub_key_get+0x1c>)
   1951a:	681b      	ldr	r3, [r3, #0]
   1951c:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_USE_DEBUG_KEYS) &&
	    BT_CMD_TEST(bt_dev.supported_commands, 41, 2)) {
		return debug_public_key;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   19520:	f013 0f10 	tst.w	r3, #16
   19524:	d001      	beq.n	1952a <bt_pub_key_get+0x16>
		return pub_key;
   19526:	4803      	ldr	r0, [pc, #12]	; (19534 <bt_pub_key_get+0x20>)
	}

	return NULL;
}
   19528:	4770      	bx	lr
	return NULL;
   1952a:	2000      	movs	r0, #0
   1952c:	4770      	bx	lr
   1952e:	bf00      	nop
   19530:	2000041c 	.word	0x2000041c
   19534:	200025d0 	.word	0x200025d0

00019538 <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[BT_PUB_KEY_LEN], bt_dh_key_cb_t cb)
{
   19538:	b510      	push	{r4, lr}
	int err;

	if (dh_key_cb == cb) {
   1953a:	4b18      	ldr	r3, [pc, #96]	; (1959c <bt_dh_key_gen+0x64>)
   1953c:	681b      	ldr	r3, [r3, #0]
   1953e:	428b      	cmp	r3, r1
   19540:	d026      	beq.n	19590 <bt_dh_key_gen+0x58>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   19542:	b9cb      	cbnz	r3, 19578 <bt_dh_key_gen+0x40>
   19544:	f3bf 8f5b 	dmb	ish
   19548:	4b15      	ldr	r3, [pc, #84]	; (195a0 <bt_dh_key_gen+0x68>)
   1954a:	681b      	ldr	r3, [r3, #0]
   1954c:	f3bf 8f5b 	dmb	ish
   19550:	f013 0f20 	tst.w	r3, #32
   19554:	d110      	bne.n	19578 <bt_dh_key_gen+0x40>
   19556:	f3bf 8f5b 	dmb	ish
   1955a:	4b11      	ldr	r3, [pc, #68]	; (195a0 <bt_dh_key_gen+0x68>)
   1955c:	681b      	ldr	r3, [r3, #0]
   1955e:	f3bf 8f5b 	dmb	ish
		return -EBUSY;
	}

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   19562:	f013 0f10 	tst.w	r3, #16
   19566:	d016      	beq.n	19596 <bt_dh_key_gen+0x5e>
		return -EADDRNOTAVAIL;
	}

	dh_key_cb = cb;
   19568:	4b0c      	ldr	r3, [pc, #48]	; (1959c <bt_dh_key_gen+0x64>)
   1956a:	6019      	str	r1, [r3, #0]
	if (IS_ENABLED(CONFIG_BT_USE_DEBUG_KEYS) &&
	    BT_CMD_TEST(bt_dev.supported_commands, 41, 2)) {
		err = hci_generate_dhkey_v2(remote_pk,
					    BT_HCI_LE_KEY_TYPE_DEBUG);
	} else {
		err = hci_generate_dhkey_v1(remote_pk);
   1956c:	f013 f8f9 	bl	2c762 <hci_generate_dhkey_v1>
	}

	if (err) {
   19570:	4604      	mov	r4, r0
   19572:	b920      	cbnz	r0, 1957e <bt_dh_key_gen+0x46>
		BT_WARN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
   19574:	4620      	mov	r0, r4
   19576:	bd10      	pop	{r4, pc}
		return -EBUSY;
   19578:	f06f 040f 	mvn.w	r4, #15
   1957c:	e7fa      	b.n	19574 <bt_dh_key_gen+0x3c>
		dh_key_cb = NULL;
   1957e:	4b07      	ldr	r3, [pc, #28]	; (1959c <bt_dh_key_gen+0x64>)
   19580:	2200      	movs	r2, #0
   19582:	601a      	str	r2, [r3, #0]
		BT_WARN("Failed to generate DHKey (err %d)", err);
   19584:	4602      	mov	r2, r0
   19586:	2157      	movs	r1, #87	; 0x57
   19588:	4806      	ldr	r0, [pc, #24]	; (195a4 <bt_dh_key_gen+0x6c>)
   1958a:	f011 fd8f 	bl	2b0ac <z_log_minimal_printk>
		return err;
   1958e:	e7f1      	b.n	19574 <bt_dh_key_gen+0x3c>
		return -EALREADY;
   19590:	f06f 0477 	mvn.w	r4, #119	; 0x77
   19594:	e7ee      	b.n	19574 <bt_dh_key_gen+0x3c>
		return -EADDRNOTAVAIL;
   19596:	f06f 047c 	mvn.w	r4, #124	; 0x7c
   1959a:	e7eb      	b.n	19574 <bt_dh_key_gen+0x3c>
   1959c:	200025cc 	.word	0x200025cc
   195a0:	2000041c 	.word	0x2000041c
   195a4:	0003301c 	.word	0x0003301c

000195a8 <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
   195a8:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
   195aa:	6885      	ldr	r5, [r0, #8]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   195ac:	4b23      	ldr	r3, [pc, #140]	; (1963c <bt_hci_evt_le_pkey_complete+0x94>)
   195ae:	f3bf 8f5b 	dmb	ish
   195b2:	e853 2f00 	ldrex	r2, [r3]
   195b6:	f022 0220 	bic.w	r2, r2, #32
   195ba:	e843 2100 	strex	r1, r2, [r3]
   195be:	2900      	cmp	r1, #0
   195c0:	d1f7      	bne.n	195b2 <bt_hci_evt_le_pkey_complete+0xa>
   195c2:	f3bf 8f5b 	dmb	ish

	BT_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
   195c6:	782b      	ldrb	r3, [r5, #0]
   195c8:	b123      	cbz	r3, 195d4 <bt_hci_evt_le_pkey_complete+0x2c>
	return list->head;
   195ca:	4b1d      	ldr	r3, [pc, #116]	; (19640 <bt_hci_evt_le_pkey_complete+0x98>)
   195cc:	681c      	ldr	r4, [r3, #0]
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   195ce:	b32c      	cbz	r4, 1961c <bt_hci_evt_le_pkey_complete+0x74>
   195d0:	3c04      	subs	r4, #4
   195d2:	e023      	b.n	1961c <bt_hci_evt_le_pkey_complete+0x74>
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
   195d4:	1c6c      	adds	r4, r5, #1
   195d6:	4e1b      	ldr	r6, [pc, #108]	; (19644 <bt_hci_evt_le_pkey_complete+0x9c>)
   195d8:	f105 0e41 	add.w	lr, r5, #65	; 0x41
   195dc:	46b4      	mov	ip, r6
   195de:	6820      	ldr	r0, [r4, #0]
   195e0:	6861      	ldr	r1, [r4, #4]
   195e2:	68a2      	ldr	r2, [r4, #8]
   195e4:	68e3      	ldr	r3, [r4, #12]
   195e6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   195ea:	3410      	adds	r4, #16
   195ec:	4666      	mov	r6, ip
   195ee:	4574      	cmp	r4, lr
   195f0:	d1f4      	bne.n	195dc <bt_hci_evt_le_pkey_complete+0x34>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   195f2:	4b12      	ldr	r3, [pc, #72]	; (1963c <bt_hci_evt_le_pkey_complete+0x94>)
   195f4:	f3bf 8f5b 	dmb	ish
   195f8:	e853 2f00 	ldrex	r2, [r3]
   195fc:	f042 0210 	orr.w	r2, r2, #16
   19600:	e843 2100 	strex	r1, r2, [r3]
   19604:	2900      	cmp	r1, #0
   19606:	d1f7      	bne.n	195f8 <bt_hci_evt_le_pkey_complete+0x50>
   19608:	f3bf 8f5b 	dmb	ish
}
   1960c:	e7dd      	b.n	195ca <bt_hci_evt_le_pkey_complete+0x22>
		if (cb->func) {
			cb->func(evt->status ? NULL : pub_key);
   1960e:	2000      	movs	r0, #0
   19610:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   19612:	1d23      	adds	r3, r4, #4
   19614:	d00b      	beq.n	1962e <bt_hci_evt_le_pkey_complete+0x86>
	return node->next;
   19616:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   19618:	b15c      	cbz	r4, 19632 <bt_hci_evt_le_pkey_complete+0x8a>
   1961a:	3c04      	subs	r4, #4
   1961c:	b14c      	cbz	r4, 19632 <bt_hci_evt_le_pkey_complete+0x8a>
		if (cb->func) {
   1961e:	6823      	ldr	r3, [r4, #0]
   19620:	2b00      	cmp	r3, #0
   19622:	d0f6      	beq.n	19612 <bt_hci_evt_le_pkey_complete+0x6a>
			cb->func(evt->status ? NULL : pub_key);
   19624:	782a      	ldrb	r2, [r5, #0]
   19626:	2a00      	cmp	r2, #0
   19628:	d1f1      	bne.n	1960e <bt_hci_evt_le_pkey_complete+0x66>
   1962a:	4806      	ldr	r0, [pc, #24]	; (19644 <bt_hci_evt_le_pkey_complete+0x9c>)
   1962c:	e7f0      	b.n	19610 <bt_hci_evt_le_pkey_complete+0x68>
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1962e:	461c      	mov	r4, r3
   19630:	e7f4      	b.n	1961c <bt_hci_evt_le_pkey_complete+0x74>
	list->head = NULL;
   19632:	4b03      	ldr	r3, [pc, #12]	; (19640 <bt_hci_evt_le_pkey_complete+0x98>)
   19634:	2200      	movs	r2, #0
   19636:	601a      	str	r2, [r3, #0]
	list->tail = NULL;
   19638:	605a      	str	r2, [r3, #4]
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
   1963a:	bd70      	pop	{r4, r5, r6, pc}
   1963c:	2000041c 	.word	0x2000041c
   19640:	20002610 	.word	0x20002610
   19644:	200025d0 	.word	0x200025d0

00019648 <bt_hci_evt_le_dhkey_complete>:

void bt_hci_evt_le_dhkey_complete(struct net_buf *buf)
{
   19648:	b508      	push	{r3, lr}
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
   1964a:	6880      	ldr	r0, [r0, #8]

	BT_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
   1964c:	4b06      	ldr	r3, [pc, #24]	; (19668 <bt_hci_evt_le_dhkey_complete+0x20>)
   1964e:	681b      	ldr	r3, [r3, #0]
   19650:	b143      	cbz	r3, 19664 <bt_hci_evt_le_dhkey_complete+0x1c>
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
   19652:	4a05      	ldr	r2, [pc, #20]	; (19668 <bt_hci_evt_le_dhkey_complete+0x20>)
   19654:	2100      	movs	r1, #0
   19656:	6011      	str	r1, [r2, #0]
		cb(evt->status ? NULL : evt->dhkey);
   19658:	7802      	ldrb	r2, [r0, #0]
   1965a:	b90a      	cbnz	r2, 19660 <bt_hci_evt_le_dhkey_complete+0x18>
   1965c:	3001      	adds	r0, #1
   1965e:	e000      	b.n	19662 <bt_hci_evt_le_dhkey_complete+0x1a>
   19660:	2000      	movs	r0, #0
   19662:	4798      	blx	r3
	}
}
   19664:	bd08      	pop	{r3, pc}
   19666:	bf00      	nop
   19668:	200025cc 	.word	0x200025cc

0001966c <tx_free>:
		return "(unknown)";
	}
}

static void tx_free(struct bt_conn_tx *tx)
{
   1966c:	b508      	push	{r3, lr}
   1966e:	4601      	mov	r1, r0
	tx->cb = NULL;
   19670:	2300      	movs	r3, #0
   19672:	6043      	str	r3, [r0, #4]
	tx->user_data = NULL;
   19674:	6083      	str	r3, [r0, #8]
	tx->pending_no_cb = 0U;
   19676:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   19678:	4801      	ldr	r0, [pc, #4]	; (19680 <tx_free+0x14>)
   1967a:	f017 f9b2 	bl	309e2 <k_queue_append>
}
   1967e:	bd08      	pop	{r3, pc}
   19680:	20000a0c 	.word	0x20000a0c

00019684 <notify_disconnected>:
		}
	}
}

static void notify_disconnected(struct bt_conn *conn)
{
   19684:	b570      	push	{r4, r5, r6, lr}
   19686:	4605      	mov	r5, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   19688:	4b14      	ldr	r3, [pc, #80]	; (196dc <notify_disconnected+0x58>)
   1968a:	681c      	ldr	r4, [r3, #0]
   1968c:	e003      	b.n	19696 <notify_disconnected+0x12>
		if (cb->disconnected) {
			cb->disconnected(conn, conn->err);
   1968e:	7b29      	ldrb	r1, [r5, #12]
   19690:	4628      	mov	r0, r5
   19692:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   19694:	69a4      	ldr	r4, [r4, #24]
   19696:	b11c      	cbz	r4, 196a0 <notify_disconnected+0x1c>
		if (cb->disconnected) {
   19698:	6863      	ldr	r3, [r4, #4]
   1969a:	2b00      	cmp	r3, #0
   1969c:	d1f7      	bne.n	1968e <notify_disconnected+0xa>
   1969e:	e7f9      	b.n	19694 <notify_disconnected+0x10>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   196a0:	4c0f      	ldr	r4, [pc, #60]	; (196e0 <notify_disconnected+0x5c>)
   196a2:	e000      	b.n	196a6 <notify_disconnected+0x22>
   196a4:	341c      	adds	r4, #28
   196a6:	4b0f      	ldr	r3, [pc, #60]	; (196e4 <notify_disconnected+0x60>)
   196a8:	429c      	cmp	r4, r3
   196aa:	d809      	bhi.n	196c0 <notify_disconnected+0x3c>
   196ac:	4b0d      	ldr	r3, [pc, #52]	; (196e4 <notify_disconnected+0x60>)
   196ae:	429c      	cmp	r4, r3
   196b0:	d213      	bcs.n	196da <notify_disconnected+0x56>
		if (cb->disconnected) {
   196b2:	6863      	ldr	r3, [r4, #4]
   196b4:	2b00      	cmp	r3, #0
   196b6:	d0f5      	beq.n	196a4 <notify_disconnected+0x20>
			cb->disconnected(conn, conn->err);
   196b8:	7b29      	ldrb	r1, [r5, #12]
   196ba:	4628      	mov	r0, r5
   196bc:	4798      	blx	r3
   196be:	e7f1      	b.n	196a4 <notify_disconnected+0x20>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   196c0:	4e09      	ldr	r6, [pc, #36]	; (196e8 <notify_disconnected+0x64>)
   196c2:	f240 5252 	movw	r2, #1362	; 0x552
   196c6:	4631      	mov	r1, r6
   196c8:	4808      	ldr	r0, [pc, #32]	; (196ec <notify_disconnected+0x68>)
   196ca:	f011 fce0 	bl	2b08e <assert_print>
   196ce:	f240 5152 	movw	r1, #1362	; 0x552
   196d2:	4630      	mov	r0, r6
   196d4:	f011 fcd4 	bl	2b080 <assert_post_action>
   196d8:	e7e8      	b.n	196ac <notify_disconnected+0x28>
		}
	}
}
   196da:	bd70      	pop	{r4, r5, r6, pc}
   196dc:	20002624 	.word	0x20002624
   196e0:	00031300 	.word	0x00031300
   196e4:	0003131c 	.word	0x0003131c
   196e8:	0003308c 	.word	0x0003308c
   196ec:	000318f8 	.word	0x000318f8

000196f0 <conn_tx_destroy>:
{
   196f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   196f2:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(tx);
   196f4:	460d      	mov	r5, r1
   196f6:	b151      	cbz	r1, 1970e <conn_tx_destroy+0x1e>
	bt_conn_tx_cb_t cb = tx->cb;
   196f8:	686e      	ldr	r6, [r5, #4]
	void *user_data = tx->user_data;
   196fa:	68af      	ldr	r7, [r5, #8]
	tx_free(tx);
   196fc:	4628      	mov	r0, r5
   196fe:	f7ff ffb5 	bl	1966c <tx_free>
	cb(conn, user_data, -ESHUTDOWN);
   19702:	f06f 026d 	mvn.w	r2, #109	; 0x6d
   19706:	4639      	mov	r1, r7
   19708:	4620      	mov	r0, r4
   1970a:	47b0      	blx	r6
}
   1970c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT_NO_MSG(tx);
   1970e:	4e05      	ldr	r6, [pc, #20]	; (19724 <conn_tx_destroy+0x34>)
   19710:	2237      	movs	r2, #55	; 0x37
   19712:	4631      	mov	r1, r6
   19714:	4804      	ldr	r0, [pc, #16]	; (19728 <conn_tx_destroy+0x38>)
   19716:	f011 fcba 	bl	2b08e <assert_print>
   1971a:	2137      	movs	r1, #55	; 0x37
   1971c:	4630      	mov	r0, r6
   1971e:	f011 fcaf 	bl	2b080 <assert_post_action>
   19722:	e7e9      	b.n	196f8 <conn_tx_destroy+0x8>
   19724:	0003308c 	.word	0x0003308c
   19728:	000318f8 	.word	0x000318f8

0001972c <notify_connected>:
{
   1972c:	b570      	push	{r4, r5, r6, lr}
   1972e:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   19730:	4b14      	ldr	r3, [pc, #80]	; (19784 <notify_connected+0x58>)
   19732:	681c      	ldr	r4, [r3, #0]
   19734:	e003      	b.n	1973e <notify_connected+0x12>
			cb->connected(conn, conn->err);
   19736:	7b29      	ldrb	r1, [r5, #12]
   19738:	4628      	mov	r0, r5
   1973a:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1973c:	69a4      	ldr	r4, [r4, #24]
   1973e:	b11c      	cbz	r4, 19748 <notify_connected+0x1c>
		if (cb->connected) {
   19740:	6823      	ldr	r3, [r4, #0]
   19742:	2b00      	cmp	r3, #0
   19744:	d1f7      	bne.n	19736 <notify_connected+0xa>
   19746:	e7f9      	b.n	1973c <notify_connected+0x10>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   19748:	4c0f      	ldr	r4, [pc, #60]	; (19788 <notify_connected+0x5c>)
   1974a:	e000      	b.n	1974e <notify_connected+0x22>
   1974c:	341c      	adds	r4, #28
   1974e:	4b0f      	ldr	r3, [pc, #60]	; (1978c <notify_connected+0x60>)
   19750:	429c      	cmp	r4, r3
   19752:	d809      	bhi.n	19768 <notify_connected+0x3c>
   19754:	4b0d      	ldr	r3, [pc, #52]	; (1978c <notify_connected+0x60>)
   19756:	429c      	cmp	r4, r3
   19758:	d213      	bcs.n	19782 <notify_connected+0x56>
		if (cb->connected) {
   1975a:	6823      	ldr	r3, [r4, #0]
   1975c:	2b00      	cmp	r3, #0
   1975e:	d0f5      	beq.n	1974c <notify_connected+0x20>
			cb->connected(conn, conn->err);
   19760:	7b29      	ldrb	r1, [r5, #12]
   19762:	4628      	mov	r0, r5
   19764:	4798      	blx	r3
   19766:	e7f1      	b.n	1974c <notify_connected+0x20>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   19768:	4e09      	ldr	r6, [pc, #36]	; (19790 <notify_connected+0x64>)
   1976a:	f240 5241 	movw	r2, #1345	; 0x541
   1976e:	4631      	mov	r1, r6
   19770:	4808      	ldr	r0, [pc, #32]	; (19794 <notify_connected+0x68>)
   19772:	f011 fc8c 	bl	2b08e <assert_print>
   19776:	f240 5141 	movw	r1, #1345	; 0x541
   1977a:	4630      	mov	r0, r6
   1977c:	f011 fc80 	bl	2b080 <assert_post_action>
   19780:	e7e8      	b.n	19754 <notify_connected+0x28>
}
   19782:	bd70      	pop	{r4, r5, r6, pc}
   19784:	20002624 	.word	0x20002624
   19788:	00031300 	.word	0x00031300
   1978c:	0003131c 	.word	0x0003131c
   19790:	0003308c 	.word	0x0003308c
   19794:	000318f8 	.word	0x000318f8

00019798 <conn_tx_alloc>:
{
   19798:	b508      	push	{r3, lr}
	return z_impl_z_current_get();
   1979a:	f00e ff25 	bl	285e8 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   1979e:	4b08      	ldr	r3, [pc, #32]	; (197c0 <conn_tx_alloc+0x28>)
   197a0:	4283      	cmp	r3, r0
   197a2:	d007      	beq.n	197b4 <conn_tx_alloc+0x1c>
	return z_impl_k_queue_get(queue, timeout);
   197a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   197a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   197ac:	4805      	ldr	r0, [pc, #20]	; (197c4 <conn_tx_alloc+0x2c>)
   197ae:	f00c ff45 	bl	2663c <z_impl_k_queue_get>
}
   197b2:	bd08      	pop	{r3, pc}
   197b4:	2200      	movs	r2, #0
   197b6:	2300      	movs	r3, #0
   197b8:	4802      	ldr	r0, [pc, #8]	; (197c4 <conn_tx_alloc+0x2c>)
   197ba:	f00c ff3f 	bl	2663c <z_impl_k_queue_get>
		return k_fifo_get(&free_tx, K_NO_WAIT);
   197be:	e7f8      	b.n	197b2 <conn_tx_alloc+0x1a>
   197c0:	20001fb0 	.word	0x20001fb0
   197c4:	20000a0c 	.word	0x20000a0c

000197c8 <bt_conn_get_pkts>:
}
   197c8:	4800      	ldr	r0, [pc, #0]	; (197cc <bt_conn_get_pkts+0x4>)
   197ca:	4770      	bx	lr
   197cc:	20000450 	.word	0x20000450

000197d0 <send_frag>:
{
   197d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   197d4:	4605      	mov	r5, r0
   197d6:	460e      	mov	r6, r1
   197d8:	4691      	mov	r9, r2
   197da:	461c      	mov	r4, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   197dc:	694f      	ldr	r7, [r1, #20]
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);
   197de:	f7ff fff3 	bl	197c8 <bt_conn_get_pkts>
   197e2:	4680      	mov	r8, r0
	return z_impl_k_sem_take(sem, timeout);
   197e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   197e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   197ec:	f00c ffdc 	bl	267a8 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   197f0:	7b6b      	ldrb	r3, [r5, #13]
   197f2:	2b07      	cmp	r3, #7
   197f4:	d160      	bne.n	198b8 <send_frag+0xe8>
   197f6:	f04f 0240 	mov.w	r2, #64	; 0x40
   197fa:	f3ef 8311 	mrs	r3, BASEPRI
   197fe:	f382 8812 	msr	BASEPRI_MAX, r2
   19802:	f3bf 8f6f 	isb	sy
	if (tx) {
   19806:	b1af      	cbz	r7, 19834 <send_frag+0x64>
	parent->next = child;
   19808:	2200      	movs	r2, #0
   1980a:	603a      	str	r2, [r7, #0]
	return list->tail;
   1980c:	69aa      	ldr	r2, [r5, #24]
Z_GENLIST_APPEND(slist, snode)
   1980e:	b172      	cbz	r2, 1982e <send_frag+0x5e>
	parent->next = child;
   19810:	6017      	str	r7, [r2, #0]
	list->tail = node;
   19812:	61af      	str	r7, [r5, #24]
	__asm__ volatile(
   19814:	f383 8811 	msr	BASEPRI, r3
   19818:	f3bf 8f6f 	isb	sy
		err = send_acl(conn, buf, flags);
   1981c:	464a      	mov	r2, r9
   1981e:	4631      	mov	r1, r6
   19820:	4628      	mov	r0, r5
   19822:	f012 fff2 	bl	2c80a <send_acl>
	if (err) {
   19826:	4602      	mov	r2, r0
   19828:	b988      	cbnz	r0, 1984e <send_frag+0x7e>
	return true;
   1982a:	2001      	movs	r0, #1
   1982c:	e050      	b.n	198d0 <send_frag+0x100>
   1982e:	61af      	str	r7, [r5, #24]
	list->head = node;
   19830:	616f      	str	r7, [r5, #20]
}
   19832:	e7ef      	b.n	19814 <send_frag+0x44>
	return list->tail;
   19834:	69aa      	ldr	r2, [r5, #24]
		if (tail_tx) {
   19836:	b13a      	cbz	r2, 19848 <send_frag+0x78>
			pending_no_cb = &tail_tx->pending_no_cb;
   19838:	f102 0a0c 	add.w	sl, r2, #12
		(*pending_no_cb)++;
   1983c:	f8da 2000 	ldr.w	r2, [sl]
   19840:	3201      	adds	r2, #1
   19842:	f8ca 2000 	str.w	r2, [sl]
   19846:	e7e5      	b.n	19814 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   19848:	f105 0a1c 	add.w	sl, r5, #28
   1984c:	e7f6      	b.n	1983c <send_frag+0x6c>
		BT_ERR("Unable to send to driver (err %d)", err);
   1984e:	2145      	movs	r1, #69	; 0x45
   19850:	482a      	ldr	r0, [pc, #168]	; (198fc <send_frag+0x12c>)
   19852:	f011 fc2b 	bl	2b0ac <z_log_minimal_printk>
	__asm__ volatile(
   19856:	f04f 0340 	mov.w	r3, #64	; 0x40
   1985a:	f3ef 8911 	mrs	r9, BASEPRI
   1985e:	f383 8812 	msr	BASEPRI_MAX, r3
   19862:	f3bf 8f6f 	isb	sy
		if (tx) {
   19866:	b1df      	cbz	r7, 198a0 <send_frag+0xd0>
			sys_slist_find_and_remove(&conn->tx_pending, &tx->node);
   19868:	f105 0114 	add.w	r1, r5, #20
	return list->head;
   1986c:	696b      	ldr	r3, [r5, #20]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1986e:	2200      	movs	r2, #0
   19870:	b1f3      	cbz	r3, 198b0 <send_frag+0xe0>
   19872:	429f      	cmp	r7, r3
   19874:	d002      	beq.n	1987c <send_frag+0xac>
   19876:	461a      	mov	r2, r3
   19878:	681b      	ldr	r3, [r3, #0]
   1987a:	e7f9      	b.n	19870 <send_frag+0xa0>
Z_GENLIST_REMOVE(slist, snode)
   1987c:	b13a      	cbz	r2, 1988e <send_frag+0xbe>
	return node->next;
   1987e:	683b      	ldr	r3, [r7, #0]
	parent->next = child;
   19880:	6013      	str	r3, [r2, #0]
	return list->tail;
   19882:	684b      	ldr	r3, [r1, #4]
Z_GENLIST_REMOVE(slist, snode)
   19884:	429f      	cmp	r7, r3
   19886:	d009      	beq.n	1989c <send_frag+0xcc>
	parent->next = child;
   19888:	2300      	movs	r3, #0
   1988a:	603b      	str	r3, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   1988c:	e010      	b.n	198b0 <send_frag+0xe0>
	return node->next;
   1988e:	683b      	ldr	r3, [r7, #0]
	list->head = node;
   19890:	616b      	str	r3, [r5, #20]
	return list->tail;
   19892:	684a      	ldr	r2, [r1, #4]
Z_GENLIST_REMOVE(slist, snode)
   19894:	4297      	cmp	r7, r2
   19896:	d1f7      	bne.n	19888 <send_frag+0xb8>
	list->tail = node;
   19898:	604b      	str	r3, [r1, #4]
}
   1989a:	e7f5      	b.n	19888 <send_frag+0xb8>
	list->tail = node;
   1989c:	604a      	str	r2, [r1, #4]
}
   1989e:	e7f3      	b.n	19888 <send_frag+0xb8>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   198a0:	f8da 3000 	ldr.w	r3, [sl]
   198a4:	b1b3      	cbz	r3, 198d4 <send_frag+0x104>
			(*pending_no_cb)--;
   198a6:	f8da 3000 	ldr.w	r3, [sl]
   198aa:	3b01      	subs	r3, #1
   198ac:	f8ca 3000 	str.w	r3, [sl]
	__asm__ volatile(
   198b0:	f389 8811 	msr	BASEPRI, r9
   198b4:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   198b8:	4640      	mov	r0, r8
   198ba:	f00c ff37 	bl	2672c <z_impl_k_sem_give>
	if (tx) {
   198be:	b12f      	cbz	r7, 198cc <send_frag+0xfc>
		tx_data(buf)->tx = NULL;
   198c0:	2300      	movs	r3, #0
   198c2:	6173      	str	r3, [r6, #20]
		conn_tx_destroy(conn, tx);
   198c4:	4639      	mov	r1, r7
   198c6:	4628      	mov	r0, r5
   198c8:	f7ff ff12 	bl	196f0 <conn_tx_destroy>
	if (always_consume) {
   198cc:	b984      	cbnz	r4, 198f0 <send_frag+0x120>
	return false;
   198ce:	4620      	mov	r0, r4
}
   198d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   198d4:	f8df b028 	ldr.w	fp, [pc, #40]	; 19900 <send_frag+0x130>
   198d8:	f44f 720a 	mov.w	r2, #552	; 0x228
   198dc:	4659      	mov	r1, fp
   198de:	4809      	ldr	r0, [pc, #36]	; (19904 <send_frag+0x134>)
   198e0:	f011 fbd5 	bl	2b08e <assert_print>
   198e4:	f44f 710a 	mov.w	r1, #552	; 0x228
   198e8:	4658      	mov	r0, fp
   198ea:	f011 fbc9 	bl	2b080 <assert_post_action>
   198ee:	e7da      	b.n	198a6 <send_frag+0xd6>
		net_buf_unref(buf);
   198f0:	4630      	mov	r0, r6
   198f2:	f006 fd47 	bl	20384 <net_buf_unref>
	return false;
   198f6:	2000      	movs	r0, #0
   198f8:	e7ea      	b.n	198d0 <send_frag+0x100>
   198fa:	bf00      	nop
   198fc:	00032ab8 	.word	0x00032ab8
   19900:	0003308c 	.word	0x0003308c
   19904:	000318f8 	.word	0x000318f8

00019908 <bt_conn_new>:
{
   19908:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   1990a:	2300      	movs	r3, #0
   1990c:	428b      	cmp	r3, r1
   1990e:	d228      	bcs.n	19962 <bt_conn_new+0x5a>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   19910:	24c8      	movs	r4, #200	; 0xc8
   19912:	fb04 0403 	mla	r4, r4, r3, r0
   19916:	f104 02c0 	add.w	r2, r4, #192	; 0xc0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1991a:	f04f 0c01 	mov.w	ip, #1
   1991e:	f3bf 8f5b 	dmb	ish
   19922:	e852 ef00 	ldrex	lr, [r2]
   19926:	f1be 0f00 	cmp.w	lr, #0
   1992a:	d103      	bne.n	19934 <bt_conn_new+0x2c>
   1992c:	e842 c500 	strex	r5, ip, [r2]
   19930:	2d00      	cmp	r5, #0
   19932:	d1f6      	bne.n	19922 <bt_conn_new+0x1a>
   19934:	f3bf 8f5b 	dmb	ish
   19938:	d111      	bne.n	1995e <bt_conn_new+0x56>
	if (!conn) {
   1993a:	b174      	cbz	r4, 1995a <bt_conn_new+0x52>
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
   1993c:	22c0      	movs	r2, #192	; 0xc0
   1993e:	2100      	movs	r1, #0
   19940:	4620      	mov	r0, r4
   19942:	f017 fa0a 	bl	30d5a <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   19946:	4908      	ldr	r1, [pc, #32]	; (19968 <bt_conn_new+0x60>)
   19948:	f104 0060 	add.w	r0, r4, #96	; 0x60
   1994c:	f00d fb2a 	bl	26fa4 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   19950:	4906      	ldr	r1, [pc, #24]	; (1996c <bt_conn_new+0x64>)
   19952:	f104 0028 	add.w	r0, r4, #40	; 0x28
   19956:	f00d fa0f 	bl	26d78 <k_work_init>
}
   1995a:	4620      	mov	r0, r4
   1995c:	bd38      	pop	{r3, r4, r5, pc}
	for (i = 0; i < size; i++) {
   1995e:	4463      	add	r3, ip
   19960:	e7d4      	b.n	1990c <bt_conn_new+0x4>
	struct bt_conn *conn = NULL;
   19962:	2400      	movs	r4, #0
   19964:	e7e9      	b.n	1993a <bt_conn_new+0x32>
   19966:	bf00      	nop
   19968:	0001a2a1 	.word	0x0001a2a1
   1996c:	0002c801 	.word	0x0002c801

00019970 <acl_conn_new>:

	atomic_set_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_UPDATE);
}

static struct bt_conn *acl_conn_new(void)
{
   19970:	b508      	push	{r3, lr}
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   19972:	2101      	movs	r1, #1
   19974:	4801      	ldr	r0, [pc, #4]	; (1997c <acl_conn_new+0xc>)
   19976:	f7ff ffc7 	bl	19908 <bt_conn_new>
}
   1997a:	bd08      	pop	{r3, pc}
   1997c:	200019e8 	.word	0x200019e8

00019980 <bt_acl_recv>:
{
   19980:	b570      	push	{r4, r5, r6, lr}
   19982:	4604      	mov	r4, r0
   19984:	460d      	mov	r5, r1
	switch (flags) {
   19986:	2a01      	cmp	r2, #1
   19988:	d020      	beq.n	199cc <bt_acl_recv+0x4c>
   1998a:	2a02      	cmp	r2, #2
   1998c:	d14f      	bne.n	19a2e <bt_acl_recv+0xae>
		if (conn->rx) {
   1998e:	6903      	ldr	r3, [r0, #16]
   19990:	b133      	cbz	r3, 199a0 <bt_acl_recv+0x20>
			BT_ERR("Unexpected first L2CAP frame");
   19992:	2145      	movs	r1, #69	; 0x45
   19994:	482f      	ldr	r0, [pc, #188]	; (19a54 <bt_acl_recv+0xd4>)
   19996:	f011 fb89 	bl	2b0ac <z_log_minimal_printk>
			bt_conn_reset_rx_state(conn);
   1999a:	4620      	mov	r0, r4
   1999c:	f012 ff9d 	bl	2c8da <bt_conn_reset_rx_state>
		conn->rx = buf;
   199a0:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   199a2:	6921      	ldr	r1, [r4, #16]
   199a4:	898a      	ldrh	r2, [r1, #12]
   199a6:	2a01      	cmp	r2, #1
   199a8:	d94b      	bls.n	19a42 <bt_acl_recv+0xc2>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   199aa:	6888      	ldr	r0, [r1, #8]
	return ((uint16_t)src[1] << 8) | src[0];
   199ac:	7845      	ldrb	r5, [r0, #1]
   199ae:	7803      	ldrb	r3, [r0, #0]
   199b0:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   199b4:	3304      	adds	r3, #4
   199b6:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   199b8:	429a      	cmp	r2, r3
   199ba:	d342      	bcc.n	19a42 <bt_acl_recv+0xc2>
	if (conn->rx->len > acl_total_len) {
   199bc:	d842      	bhi.n	19a44 <bt_acl_recv+0xc4>
	conn->rx = NULL;
   199be:	2300      	movs	r3, #0
   199c0:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   199c2:	2201      	movs	r2, #1
   199c4:	4620      	mov	r0, r4
   199c6:	f000 fee3 	bl	1a790 <bt_l2cap_recv>
   199ca:	e03a      	b.n	19a42 <bt_acl_recv+0xc2>
		if (!conn->rx) {
   199cc:	6900      	ldr	r0, [r0, #16]
   199ce:	b180      	cbz	r0, 199f2 <bt_acl_recv+0x72>
		if (!buf->len) {
   199d0:	898e      	ldrh	r6, [r1, #12]
   199d2:	b1ce      	cbz	r6, 19a08 <bt_acl_recv+0x88>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   199d4:	3008      	adds	r0, #8
   199d6:	f015 fbca 	bl	2f16e <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   199da:	4286      	cmp	r6, r0
   199dc:	d818      	bhi.n	19a10 <bt_acl_recv+0x90>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
   199de:	6920      	ldr	r0, [r4, #16]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   199e0:	89aa      	ldrh	r2, [r5, #12]
   199e2:	68a9      	ldr	r1, [r5, #8]
   199e4:	3008      	adds	r0, #8
   199e6:	f015 fbcb 	bl	2f180 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   199ea:	4628      	mov	r0, r5
   199ec:	f006 fcca 	bl	20384 <net_buf_unref>
		break;
   199f0:	e7d7      	b.n	199a2 <bt_acl_recv+0x22>
			BT_ERR("Unexpected L2CAP continuation");
   199f2:	2145      	movs	r1, #69	; 0x45
   199f4:	4818      	ldr	r0, [pc, #96]	; (19a58 <bt_acl_recv+0xd8>)
   199f6:	f011 fb59 	bl	2b0ac <z_log_minimal_printk>
			bt_conn_reset_rx_state(conn);
   199fa:	4620      	mov	r0, r4
   199fc:	f012 ff6d 	bl	2c8da <bt_conn_reset_rx_state>
			net_buf_unref(buf);
   19a00:	4628      	mov	r0, r5
   19a02:	f006 fcbf 	bl	20384 <net_buf_unref>
			return;
   19a06:	e01c      	b.n	19a42 <bt_acl_recv+0xc2>
			net_buf_unref(buf);
   19a08:	4608      	mov	r0, r1
   19a0a:	f006 fcbb 	bl	20384 <net_buf_unref>
			return;
   19a0e:	e018      	b.n	19a42 <bt_acl_recv+0xc2>
			BT_ERR("Not enough buffer space for L2CAP data");
   19a10:	2145      	movs	r1, #69	; 0x45
   19a12:	4812      	ldr	r0, [pc, #72]	; (19a5c <bt_acl_recv+0xdc>)
   19a14:	f011 fb4a 	bl	2b0ac <z_log_minimal_printk>
			bt_l2cap_recv(conn, conn->rx, false);
   19a18:	2200      	movs	r2, #0
   19a1a:	6921      	ldr	r1, [r4, #16]
   19a1c:	4620      	mov	r0, r4
   19a1e:	f000 feb7 	bl	1a790 <bt_l2cap_recv>
			conn->rx = NULL;
   19a22:	2300      	movs	r3, #0
   19a24:	6123      	str	r3, [r4, #16]
			net_buf_unref(buf);
   19a26:	4628      	mov	r0, r5
   19a28:	f006 fcac 	bl	20384 <net_buf_unref>
			return;
   19a2c:	e009      	b.n	19a42 <bt_acl_recv+0xc2>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   19a2e:	2145      	movs	r1, #69	; 0x45
   19a30:	480b      	ldr	r0, [pc, #44]	; (19a60 <bt_acl_recv+0xe0>)
   19a32:	f011 fb3b 	bl	2b0ac <z_log_minimal_printk>
		bt_conn_reset_rx_state(conn);
   19a36:	4620      	mov	r0, r4
   19a38:	f012 ff4f 	bl	2c8da <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   19a3c:	4628      	mov	r0, r5
   19a3e:	f006 fca1 	bl	20384 <net_buf_unref>
}
   19a42:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("ACL len mismatch (%u > %u)",
   19a44:	2145      	movs	r1, #69	; 0x45
   19a46:	4807      	ldr	r0, [pc, #28]	; (19a64 <bt_acl_recv+0xe4>)
   19a48:	f011 fb30 	bl	2b0ac <z_log_minimal_printk>
		bt_conn_reset_rx_state(conn);
   19a4c:	4620      	mov	r0, r4
   19a4e:	f012 ff44 	bl	2c8da <bt_conn_reset_rx_state>
		return;
   19a52:	e7f6      	b.n	19a42 <bt_acl_recv+0xc2>
   19a54:	000330bc 	.word	0x000330bc
   19a58:	000330e0 	.word	0x000330e0
   19a5c:	00033104 	.word	0x00033104
   19a60:	00033130 	.word	0x00033130
   19a64:	00033154 	.word	0x00033154

00019a68 <conn_cleanup>:
{
   19a68:	b538      	push	{r3, r4, r5, lr}
   19a6a:	4605      	mov	r5, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   19a6c:	2200      	movs	r2, #0
   19a6e:	2300      	movs	r3, #0
   19a70:	f105 0038 	add.w	r0, r5, #56	; 0x38
   19a74:	f006 fb18 	bl	200a8 <net_buf_get>
   19a78:	4603      	mov	r3, r0
   19a7a:	b160      	cbz	r0, 19a96 <conn_cleanup+0x2e>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   19a7c:	695c      	ldr	r4, [r3, #20]
		tx_data(buf)->tx = NULL;
   19a7e:	2200      	movs	r2, #0
   19a80:	615a      	str	r2, [r3, #20]
		net_buf_unref(buf);
   19a82:	4618      	mov	r0, r3
   19a84:	f006 fc7e 	bl	20384 <net_buf_unref>
		if (tx) {
   19a88:	2c00      	cmp	r4, #0
   19a8a:	d0ef      	beq.n	19a6c <conn_cleanup+0x4>
			conn_tx_destroy(conn, tx);
   19a8c:	4621      	mov	r1, r4
   19a8e:	4628      	mov	r0, r5
   19a90:	f7ff fe2e 	bl	196f0 <conn_tx_destroy>
   19a94:	e7ea      	b.n	19a6c <conn_cleanup+0x4>
	return list->head;
   19a96:	696b      	ldr	r3, [r5, #20]
	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
   19a98:	b15b      	cbz	r3, 19ab2 <conn_cleanup+0x4a>
   19a9a:	4c12      	ldr	r4, [pc, #72]	; (19ae4 <conn_cleanup+0x7c>)
   19a9c:	f240 22b5 	movw	r2, #693	; 0x2b5
   19aa0:	4621      	mov	r1, r4
   19aa2:	4811      	ldr	r0, [pc, #68]	; (19ae8 <conn_cleanup+0x80>)
   19aa4:	f011 faf3 	bl	2b08e <assert_print>
   19aa8:	f240 21b5 	movw	r1, #693	; 0x2b5
   19aac:	4620      	mov	r0, r4
   19aae:	f011 fae7 	bl	2b080 <assert_post_action>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   19ab2:	69eb      	ldr	r3, [r5, #28]
   19ab4:	b94b      	cbnz	r3, 19aca <conn_cleanup+0x62>
	bt_conn_reset_rx_state(conn);
   19ab6:	4628      	mov	r0, r5
   19ab8:	f012 ff0f 	bl	2c8da <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   19abc:	2200      	movs	r2, #0
   19abe:	2300      	movs	r3, #0
   19ac0:	f105 0060 	add.w	r0, r5, #96	; 0x60
   19ac4:	f00d fb9e 	bl	27204 <k_work_reschedule>
}
   19ac8:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   19aca:	4c06      	ldr	r4, [pc, #24]	; (19ae4 <conn_cleanup+0x7c>)
   19acc:	f240 22b6 	movw	r2, #694	; 0x2b6
   19ad0:	4621      	mov	r1, r4
   19ad2:	4805      	ldr	r0, [pc, #20]	; (19ae8 <conn_cleanup+0x80>)
   19ad4:	f011 fadb 	bl	2b08e <assert_print>
   19ad8:	f240 21b6 	movw	r1, #694	; 0x2b6
   19adc:	4620      	mov	r0, r4
   19ade:	f011 facf 	bl	2b080 <assert_post_action>
   19ae2:	e7e8      	b.n	19ab6 <conn_cleanup+0x4e>
   19ae4:	0003308c 	.word	0x0003308c
   19ae8:	000318f8 	.word	0x000318f8

00019aec <bt_conn_send_cb>:
{
   19aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19af0:	461f      	mov	r7, r3
	if (conn->state != BT_CONN_CONNECTED) {
   19af2:	7b43      	ldrb	r3, [r0, #13]
   19af4:	2b07      	cmp	r3, #7
   19af6:	d117      	bne.n	19b28 <bt_conn_send_cb+0x3c>
   19af8:	4604      	mov	r4, r0
   19afa:	460d      	mov	r5, r1
   19afc:	4616      	mov	r6, r2
	if (cb) {
   19afe:	b35a      	cbz	r2, 19b58 <bt_conn_send_cb+0x6c>
		tx = conn_tx_alloc();
   19b00:	f7ff fe4a 	bl	19798 <conn_tx_alloc>
		if (!tx) {
   19b04:	4680      	mov	r8, r0
   19b06:	b1b0      	cbz	r0, 19b36 <bt_conn_send_cb+0x4a>
		if (conn->state != BT_CONN_CONNECTED) {
   19b08:	7b63      	ldrb	r3, [r4, #13]
   19b0a:	2b07      	cmp	r3, #7
   19b0c:	d11a      	bne.n	19b44 <bt_conn_send_cb+0x58>
		tx->cb = cb;
   19b0e:	6046      	str	r6, [r0, #4]
		tx->user_data = user_data;
   19b10:	6087      	str	r7, [r0, #8]
		tx->pending_no_cb = 0U;
   19b12:	2300      	movs	r3, #0
   19b14:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   19b16:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
   19b18:	4629      	mov	r1, r5
   19b1a:	f104 0038 	add.w	r0, r4, #56	; 0x38
   19b1e:	f006 fbff 	bl	20320 <net_buf_put>
	return 0;
   19b22:	2000      	movs	r0, #0
}
   19b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		BT_ERR("not connected!");
   19b28:	2145      	movs	r1, #69	; 0x45
   19b2a:	480d      	ldr	r0, [pc, #52]	; (19b60 <bt_conn_send_cb+0x74>)
   19b2c:	f011 fabe 	bl	2b0ac <z_log_minimal_printk>
		return -ENOTCONN;
   19b30:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   19b34:	e7f6      	b.n	19b24 <bt_conn_send_cb+0x38>
			BT_ERR("Unable to allocate TX context");
   19b36:	2145      	movs	r1, #69	; 0x45
   19b38:	480a      	ldr	r0, [pc, #40]	; (19b64 <bt_conn_send_cb+0x78>)
   19b3a:	f011 fab7 	bl	2b0ac <z_log_minimal_printk>
			return -ENOBUFS;
   19b3e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   19b42:	e7ef      	b.n	19b24 <bt_conn_send_cb+0x38>
			BT_WARN("Disconnected while allocating context");
   19b44:	2157      	movs	r1, #87	; 0x57
   19b46:	4808      	ldr	r0, [pc, #32]	; (19b68 <bt_conn_send_cb+0x7c>)
   19b48:	f011 fab0 	bl	2b0ac <z_log_minimal_printk>
			tx_free(tx);
   19b4c:	4640      	mov	r0, r8
   19b4e:	f7ff fd8d 	bl	1966c <tx_free>
			return -ENOTCONN;
   19b52:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   19b56:	e7e5      	b.n	19b24 <bt_conn_send_cb+0x38>
		tx_data(buf)->tx = NULL;
   19b58:	2300      	movs	r3, #0
   19b5a:	614b      	str	r3, [r1, #20]
   19b5c:	e7dc      	b.n	19b18 <bt_conn_send_cb+0x2c>
   19b5e:	bf00      	nop
   19b60:	00033174 	.word	0x00033174
   19b64:	00033188 	.word	0x00033188
   19b68:	000331ac 	.word	0x000331ac

00019b6c <bt_conn_prepare_events>:
{
   19b6c:	b570      	push	{r4, r5, r6, lr}
   19b6e:	4606      	mov	r6, r0
	z_impl_k_poll_signal_init(sig);
   19b70:	4c0e      	ldr	r4, [pc, #56]	; (19bac <bt_conn_prepare_events+0x40>)
   19b72:	4620      	mov	r0, r4
   19b74:	f017 f8ae 	bl	30cd4 <z_impl_k_poll_signal_init>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   19b78:	4623      	mov	r3, r4
   19b7a:	2200      	movs	r2, #0
   19b7c:	2101      	movs	r1, #1
   19b7e:	4630      	mov	r0, r6
   19b80:	f00f fd70 	bl	29664 <k_poll_event_init>
   19b84:	2501      	movs	r5, #1
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   19b86:	2400      	movs	r4, #0
   19b88:	b10c      	cbz	r4, 19b8e <bt_conn_prepare_events+0x22>
}
   19b8a:	4628      	mov	r0, r5
   19b8c:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn_prepare_events(conn, &events[ev_count])) {
   19b8e:	eb05 0185 	add.w	r1, r5, r5, lsl #2
   19b92:	eb06 0181 	add.w	r1, r6, r1, lsl #2
   19b96:	4b06      	ldr	r3, [pc, #24]	; (19bb0 <bt_conn_prepare_events+0x44>)
   19b98:	20c8      	movs	r0, #200	; 0xc8
   19b9a:	fb00 3004 	mla	r0, r0, r4, r3
   19b9e:	f012 fea5 	bl	2c8ec <conn_prepare_events>
   19ba2:	b900      	cbnz	r0, 19ba6 <bt_conn_prepare_events+0x3a>
			ev_count++;
   19ba4:	3501      	adds	r5, #1
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   19ba6:	3401      	adds	r4, #1
   19ba8:	e7ee      	b.n	19b88 <bt_conn_prepare_events+0x1c>
   19baa:	bf00      	nop
   19bac:	200006d0 	.word	0x200006d0
   19bb0:	200019e8 	.word	0x200019e8

00019bb4 <bt_conn_unref>:
{
   19bb4:	b538      	push	{r3, r4, r5, lr}
   19bb6:	4604      	mov	r4, r0
	old = atomic_dec(&conn->ref);
   19bb8:	f100 03c0 	add.w	r3, r0, #192	; 0xc0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   19bbc:	f3bf 8f5b 	dmb	ish
   19bc0:	e853 2f00 	ldrex	r2, [r3]
   19bc4:	1e51      	subs	r1, r2, #1
   19bc6:	e843 1000 	strex	r0, r1, [r3]
   19bca:	2800      	cmp	r0, #0
   19bcc:	d1f8      	bne.n	19bc0 <bt_conn_unref+0xc>
   19bce:	f3bf 8f5b 	dmb	ish
	__ASSERT(old > 0, "Conn reference counter is 0");
   19bd2:	2a00      	cmp	r2, #0
   19bd4:	dd03      	ble.n	19bde <bt_conn_unref+0x2a>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   19bd6:	78a3      	ldrb	r3, [r4, #2]
   19bd8:	2b01      	cmp	r3, #1
   19bda:	d00d      	beq.n	19bf8 <bt_conn_unref+0x44>
}
   19bdc:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT(old > 0, "Conn reference counter is 0");
   19bde:	4d0c      	ldr	r5, [pc, #48]	; (19c10 <bt_conn_unref+0x5c>)
   19be0:	f240 427e 	movw	r2, #1150	; 0x47e
   19be4:	4629      	mov	r1, r5
   19be6:	480b      	ldr	r0, [pc, #44]	; (19c14 <bt_conn_unref+0x60>)
   19be8:	f011 fa51 	bl	2b08e <assert_print>
   19bec:	f240 417e 	movw	r1, #1150	; 0x47e
   19bf0:	4628      	mov	r0, r5
   19bf2:	f011 fa45 	bl	2b080 <assert_post_action>
   19bf6:	e7ee      	b.n	19bd6 <bt_conn_unref+0x22>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19bf8:	f3bf 8f5b 	dmb	ish
   19bfc:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   19c00:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   19c04:	2b00      	cmp	r3, #0
   19c06:	d1e9      	bne.n	19bdc <bt_conn_unref+0x28>
		bt_le_adv_resume();
   19c08:	f012 fd59 	bl	2c6be <bt_le_adv_resume>
}
   19c0c:	e7e6      	b.n	19bdc <bt_conn_unref+0x28>
   19c0e:	bf00      	nop
   19c10:	0003308c 	.word	0x0003308c
   19c14:	000318f8 	.word	0x000318f8

00019c18 <bt_conn_lookup_handle>:
{
   19c18:	b508      	push	{r3, lr}
   19c1a:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   19c1c:	2101      	movs	r1, #1
   19c1e:	4802      	ldr	r0, [pc, #8]	; (19c28 <bt_conn_lookup_handle+0x10>)
   19c20:	f012 fecc 	bl	2c9bc <conn_lookup_handle>
}
   19c24:	bd08      	pop	{r3, pc}
   19c26:	bf00      	nop
   19c28:	200019e8 	.word	0x200019e8

00019c2c <bt_conn_set_state>:
{
   19c2c:	b570      	push	{r4, r5, r6, lr}
   19c2e:	460d      	mov	r5, r1
	if (conn->state == state) {
   19c30:	7b46      	ldrb	r6, [r0, #13]
   19c32:	428e      	cmp	r6, r1
   19c34:	d010      	beq.n	19c58 <bt_conn_set_state+0x2c>
   19c36:	4604      	mov	r4, r0
	conn->state = state;
   19c38:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
   19c3a:	b916      	cbnz	r6, 19c42 <bt_conn_set_state+0x16>
		if (conn->type != BT_CONN_TYPE_ISO) {
   19c3c:	7883      	ldrb	r3, [r0, #2]
   19c3e:	2b08      	cmp	r3, #8
   19c40:	d12b      	bne.n	19c9a <bt_conn_set_state+0x6e>
	switch (conn->state) {
   19c42:	7b63      	ldrb	r3, [r4, #13]
   19c44:	2b08      	cmp	r3, #8
   19c46:	f200 80a8 	bhi.w	19d9a <bt_conn_set_state+0x16e>
   19c4a:	e8df f003 	tbb	[pc, r3]
   19c4e:	a242      	.short	0xa242
   19c50:	a5a5a5a5 	.word	0xa5a5a5a5
   19c54:	29a5      	.short	0x29a5
   19c56:	a5          	.byte	0xa5
   19c57:	00          	.byte	0x00
	switch (state) {
   19c58:	2908      	cmp	r1, #8
   19c5a:	d81a      	bhi.n	19c92 <bt_conn_set_state+0x66>
   19c5c:	e8df f001 	tbb	[pc, r1]
   19c60:	110b1b05 	.word	0x110b1b05
   19c64:	15130d0f 	.word	0x15130d0f
   19c68:	17          	.byte	0x17
   19c69:	00          	.byte	0x00
   19c6a:	4a4f      	ldr	r2, [pc, #316]	; (19da8 <bt_conn_set_state+0x17c>)
		BT_WARN("no transition %s", state2str(state));
   19c6c:	2157      	movs	r1, #87	; 0x57
   19c6e:	484f      	ldr	r0, [pc, #316]	; (19dac <bt_conn_set_state+0x180>)
   19c70:	f011 fa1c 	bl	2b0ac <z_log_minimal_printk>
		return;
   19c74:	e090      	b.n	19d98 <bt_conn_set_state+0x16c>
		return "connecting-scan";
   19c76:	4a4e      	ldr	r2, [pc, #312]	; (19db0 <bt_conn_set_state+0x184>)
   19c78:	e7f8      	b.n	19c6c <bt_conn_set_state+0x40>
		return "connecting-dir-adv";
   19c7a:	4a4e      	ldr	r2, [pc, #312]	; (19db4 <bt_conn_set_state+0x188>)
   19c7c:	e7f6      	b.n	19c6c <bt_conn_set_state+0x40>
		return "connecting-adv";
   19c7e:	4a4e      	ldr	r2, [pc, #312]	; (19db8 <bt_conn_set_state+0x18c>)
   19c80:	e7f4      	b.n	19c6c <bt_conn_set_state+0x40>
		return "connecting-auto";
   19c82:	4a4e      	ldr	r2, [pc, #312]	; (19dbc <bt_conn_set_state+0x190>)
   19c84:	e7f2      	b.n	19c6c <bt_conn_set_state+0x40>
		return "connecting";
   19c86:	4a4e      	ldr	r2, [pc, #312]	; (19dc0 <bt_conn_set_state+0x194>)
   19c88:	e7f0      	b.n	19c6c <bt_conn_set_state+0x40>
		return "connected";
   19c8a:	4a4e      	ldr	r2, [pc, #312]	; (19dc4 <bt_conn_set_state+0x198>)
   19c8c:	e7ee      	b.n	19c6c <bt_conn_set_state+0x40>
		return "disconnecting";
   19c8e:	4a4e      	ldr	r2, [pc, #312]	; (19dc8 <bt_conn_set_state+0x19c>)
   19c90:	e7ec      	b.n	19c6c <bt_conn_set_state+0x40>
		return "(unknown)";
   19c92:	4a4e      	ldr	r2, [pc, #312]	; (19dcc <bt_conn_set_state+0x1a0>)
   19c94:	e7ea      	b.n	19c6c <bt_conn_set_state+0x40>
		return "disconnect-complete";
   19c96:	4a4e      	ldr	r2, [pc, #312]	; (19dd0 <bt_conn_set_state+0x1a4>)
   19c98:	e7e8      	b.n	19c6c <bt_conn_set_state+0x40>
			bt_conn_ref(conn);
   19c9a:	f012 fe68 	bl	2c96e <bt_conn_ref>
   19c9e:	e7d0      	b.n	19c42 <bt_conn_set_state+0x16>
		if (conn->type == BT_CONN_TYPE_SCO) {
   19ca0:	78a3      	ldrb	r3, [r4, #2]
   19ca2:	2b04      	cmp	r3, #4
   19ca4:	d078      	beq.n	19d98 <bt_conn_set_state+0x16c>
		k_fifo_init(&conn->tx_queue);
   19ca6:	f104 0038 	add.w	r0, r4, #56	; 0x38
	z_impl_k_queue_init(queue);
   19caa:	f016 fe8d 	bl	309c8 <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(sig, result);
   19cae:	2100      	movs	r1, #0
   19cb0:	4848      	ldr	r0, [pc, #288]	; (19dd4 <bt_conn_set_state+0x1a8>)
   19cb2:	f00f fe13 	bl	298dc <z_impl_k_poll_signal_raise>
	list->head = NULL;
   19cb6:	2300      	movs	r3, #0
   19cb8:	6563      	str	r3, [r4, #84]	; 0x54
	list->tail = NULL;
   19cba:	65a3      	str	r3, [r4, #88]	; 0x58
		    conn->role == BT_CONN_ROLE_PERIPHERAL) {
   19cbc:	78e3      	ldrb	r3, [r4, #3]
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   19cbe:	2b01      	cmp	r3, #1
   19cc0:	d16a      	bne.n	19d98 <bt_conn_set_state+0x16c>
			k_work_schedule(&conn->deferred_work,
   19cc2:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   19cc6:	2300      	movs	r3, #0
   19cc8:	f104 0060 	add.w	r0, r4, #96	; 0x60
   19ccc:	f00d fa30 	bl	27130 <k_work_schedule>
   19cd0:	e062      	b.n	19d98 <bt_conn_set_state+0x16c>
		if (conn->type == BT_CONN_TYPE_SCO) {
   19cd2:	78a3      	ldrb	r3, [r4, #2]
   19cd4:	2b04      	cmp	r3, #4
   19cd6:	d008      	beq.n	19cea <bt_conn_set_state+0xbe>
		switch (old_state) {
   19cd8:	2e08      	cmp	r6, #8
   19cda:	d85d      	bhi.n	19d98 <bt_conn_set_state+0x16c>
   19cdc:	e8df f006 	tbb	[pc, r6]
   19ce0:	4b370953 	.word	0x4b370953
   19ce4:	532d414f 	.word	0x532d414f
   19ce8:	53          	.byte	0x53
   19ce9:	00          	.byte	0x00
			bt_conn_unref(conn);
   19cea:	4620      	mov	r0, r4
   19cec:	f7ff ff62 	bl	19bb4 <bt_conn_unref>
			break;
   19cf0:	e052      	b.n	19d98 <bt_conn_set_state+0x16c>
			tx_notify(conn);
   19cf2:	4620      	mov	r0, r4
   19cf4:	f012 fd61 	bl	2c7ba <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   19cf8:	78a3      	ldrb	r3, [r4, #2]
   19cfa:	2b01      	cmp	r3, #1
   19cfc:	d011      	beq.n	19d22 <bt_conn_set_state+0xf6>
			atomic_set_bit(conn->flags, BT_CONN_CLEANUP);
   19cfe:	3404      	adds	r4, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   19d00:	f3bf 8f5b 	dmb	ish
   19d04:	e854 3f00 	ldrex	r3, [r4]
   19d08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   19d0c:	e844 3200 	strex	r2, r3, [r4]
   19d10:	2a00      	cmp	r2, #0
   19d12:	d1f7      	bne.n	19d04 <bt_conn_set_state+0xd8>
   19d14:	f3bf 8f5b 	dmb	ish
   19d18:	2100      	movs	r1, #0
   19d1a:	482e      	ldr	r0, [pc, #184]	; (19dd4 <bt_conn_set_state+0x1a8>)
   19d1c:	f00f fdde 	bl	298dc <z_impl_k_poll_signal_raise>
   19d20:	e03a      	b.n	19d98 <bt_conn_set_state+0x16c>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
   19d22:	f104 0560 	add.w	r5, r4, #96	; 0x60
   19d26:	4628      	mov	r0, r5
   19d28:	f00d f96a 	bl	27000 <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   19d2c:	f010 0f0c 	tst.w	r0, #12
   19d30:	d0e5      	beq.n	19cfe <bt_conn_set_state+0xd2>
				k_work_cancel_delayable(&conn->deferred_work);
   19d32:	4628      	mov	r0, r5
   19d34:	f00d fa6e 	bl	27214 <k_work_cancel_delayable>
   19d38:	e7e1      	b.n	19cfe <bt_conn_set_state+0xd2>
			if (conn->err) {
   19d3a:	7b23      	ldrb	r3, [r4, #12]
   19d3c:	b91b      	cbnz	r3, 19d46 <bt_conn_set_state+0x11a>
			bt_conn_unref(conn);
   19d3e:	4620      	mov	r0, r4
   19d40:	f7ff ff38 	bl	19bb4 <bt_conn_unref>
			break;
   19d44:	e028      	b.n	19d98 <bt_conn_set_state+0x16c>
				notify_connected(conn);
   19d46:	4620      	mov	r0, r4
   19d48:	f7ff fcf0 	bl	1972c <notify_connected>
   19d4c:	e7f7      	b.n	19d3e <bt_conn_set_state+0x112>
			if (conn->err) {
   19d4e:	7b23      	ldrb	r3, [r4, #12]
   19d50:	b91b      	cbnz	r3, 19d5a <bt_conn_set_state+0x12e>
			bt_conn_unref(conn);
   19d52:	4620      	mov	r0, r4
   19d54:	f7ff ff2e 	bl	19bb4 <bt_conn_unref>
			break;
   19d58:	e01e      	b.n	19d98 <bt_conn_set_state+0x16c>
				notify_connected(conn);
   19d5a:	4620      	mov	r0, r4
   19d5c:	f7ff fce6 	bl	1972c <notify_connected>
   19d60:	e7f7      	b.n	19d52 <bt_conn_set_state+0x126>
			if (conn->err) {
   19d62:	7b23      	ldrb	r3, [r4, #12]
   19d64:	b91b      	cbnz	r3, 19d6e <bt_conn_set_state+0x142>
			bt_conn_unref(conn);
   19d66:	4620      	mov	r0, r4
   19d68:	f7ff ff24 	bl	19bb4 <bt_conn_unref>
			break;
   19d6c:	e014      	b.n	19d98 <bt_conn_set_state+0x16c>
				notify_connected(conn);
   19d6e:	4620      	mov	r0, r4
   19d70:	f7ff fcdc 	bl	1972c <notify_connected>
   19d74:	e7f7      	b.n	19d66 <bt_conn_set_state+0x13a>
			bt_conn_unref(conn);
   19d76:	4620      	mov	r0, r4
   19d78:	f7ff ff1c 	bl	19bb4 <bt_conn_unref>
			break;
   19d7c:	e00c      	b.n	19d98 <bt_conn_set_state+0x16c>
			bt_conn_unref(conn);
   19d7e:	4620      	mov	r0, r4
   19d80:	f7ff ff18 	bl	19bb4 <bt_conn_unref>
			break;
   19d84:	e008      	b.n	19d98 <bt_conn_set_state+0x16c>
			BT_WARN("Invalid (%u) old state", state);
   19d86:	462a      	mov	r2, r5
   19d88:	2157      	movs	r1, #87	; 0x57
   19d8a:	4813      	ldr	r0, [pc, #76]	; (19dd8 <bt_conn_set_state+0x1ac>)
   19d8c:	f011 f98e 	bl	2b0ac <z_log_minimal_printk>
   19d90:	e002      	b.n	19d98 <bt_conn_set_state+0x16c>
		process_unack_tx(conn);
   19d92:	4620      	mov	r0, r4
   19d94:	f012 fd5f 	bl	2c856 <process_unack_tx>
}
   19d98:	bd70      	pop	{r4, r5, r6, pc}
		BT_WARN("no valid (%u) state was set", state);
   19d9a:	462a      	mov	r2, r5
   19d9c:	2157      	movs	r1, #87	; 0x57
   19d9e:	480f      	ldr	r0, [pc, #60]	; (19ddc <bt_conn_set_state+0x1b0>)
   19da0:	f011 f984 	bl	2b0ac <z_log_minimal_printk>
   19da4:	e7f8      	b.n	19d98 <bt_conn_set_state+0x16c>
   19da6:	bf00      	nop
   19da8:	00033264 	.word	0x00033264
   19dac:	00033274 	.word	0x00033274
   19db0:	000331f8 	.word	0x000331f8
   19db4:	00033208 	.word	0x00033208
   19db8:	0003321c 	.word	0x0003321c
   19dbc:	0003322c 	.word	0x0003322c
   19dc0:	0003323c 	.word	0x0003323c
   19dc4:	00033248 	.word	0x00033248
   19dc8:	00033254 	.word	0x00033254
   19dcc:	000331d8 	.word	0x000331d8
   19dd0:	000331e4 	.word	0x000331e4
   19dd4:	200006d0 	.word	0x200006d0
   19dd8:	0003328c 	.word	0x0003328c
   19ddc:	000332a8 	.word	0x000332a8

00019de0 <bt_conn_index>:
{
   19de0:	b538      	push	{r3, r4, r5, lr}
		index = conn - acl_conns;
   19de2:	4b0b      	ldr	r3, [pc, #44]	; (19e10 <bt_conn_index+0x30>)
   19de4:	1ac4      	subs	r4, r0, r3
   19de6:	10e4      	asrs	r4, r4, #3
   19de8:	4a0a      	ldr	r2, [pc, #40]	; (19e14 <bt_conn_index+0x34>)
   19dea:	fb02 f404 	mul.w	r4, r2, r4
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   19dee:	4298      	cmp	r0, r3
   19df0:	d00b      	beq.n	19e0a <bt_conn_index+0x2a>
   19df2:	4d09      	ldr	r5, [pc, #36]	; (19e18 <bt_conn_index+0x38>)
   19df4:	f240 429c 	movw	r2, #1180	; 0x49c
   19df8:	4629      	mov	r1, r5
   19dfa:	4808      	ldr	r0, [pc, #32]	; (19e1c <bt_conn_index+0x3c>)
   19dfc:	f011 f947 	bl	2b08e <assert_print>
   19e00:	f240 419c 	movw	r1, #1180	; 0x49c
   19e04:	4628      	mov	r0, r5
   19e06:	f011 f93b 	bl	2b080 <assert_post_action>
}
   19e0a:	b2e0      	uxtb	r0, r4
   19e0c:	bd38      	pop	{r3, r4, r5, pc}
   19e0e:	bf00      	nop
   19e10:	200019e8 	.word	0x200019e8
   19e14:	c28f5c29 	.word	0xc28f5c29
   19e18:	0003308c 	.word	0x0003308c
   19e1c:	000318f8 	.word	0x000318f8

00019e20 <bt_conn_create_pdu_timeout>:
{
   19e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19e24:	4604      	mov	r4, r0
   19e26:	460f      	mov	r7, r1
   19e28:	4616      	mov	r6, r2
   19e2a:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(!k_is_in_isr());
   19e2c:	f016 fd79 	bl	30922 <k_is_in_isr>
   19e30:	b970      	cbnz	r0, 19e50 <bt_conn_create_pdu_timeout+0x30>
	if (!pool) {
   19e32:	b1dc      	cbz	r4, 19e6c <bt_conn_create_pdu_timeout+0x4c>
	return net_buf_alloc_fixed(pool, timeout);
   19e34:	4632      	mov	r2, r6
   19e36:	462b      	mov	r3, r5
   19e38:	4620      	mov	r0, r4
   19e3a:	f015 f985 	bl	2f148 <net_buf_alloc_fixed>
	if (!buf) {
   19e3e:	4604      	mov	r4, r0
   19e40:	b1b0      	cbz	r0, 19e70 <bt_conn_create_pdu_timeout+0x50>
	net_buf_simple_reserve(&buf->b, reserve);
   19e42:	1d39      	adds	r1, r7, #4
   19e44:	3008      	adds	r0, #8
   19e46:	f006 f95d 	bl	20104 <net_buf_simple_reserve>
}
   19e4a:	4620      	mov	r0, r4
   19e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(!k_is_in_isr());
   19e50:	f8df 8028 	ldr.w	r8, [pc, #40]	; 19e7c <bt_conn_create_pdu_timeout+0x5c>
   19e54:	f44f 6297 	mov.w	r2, #1208	; 0x4b8
   19e58:	4641      	mov	r1, r8
   19e5a:	4809      	ldr	r0, [pc, #36]	; (19e80 <bt_conn_create_pdu_timeout+0x60>)
   19e5c:	f011 f917 	bl	2b08e <assert_print>
   19e60:	f44f 6197 	mov.w	r1, #1208	; 0x4b8
   19e64:	4640      	mov	r0, r8
   19e66:	f011 f90b 	bl	2b080 <assert_post_action>
   19e6a:	e7e2      	b.n	19e32 <bt_conn_create_pdu_timeout+0x12>
		pool = &acl_tx_pool;
   19e6c:	4c05      	ldr	r4, [pc, #20]	; (19e84 <bt_conn_create_pdu_timeout+0x64>)
   19e6e:	e7e1      	b.n	19e34 <bt_conn_create_pdu_timeout+0x14>
		BT_WARN("Unable to allocate buffer within timeout");
   19e70:	2157      	movs	r1, #87	; 0x57
   19e72:	4805      	ldr	r0, [pc, #20]	; (19e88 <bt_conn_create_pdu_timeout+0x68>)
   19e74:	f011 f91a 	bl	2b0ac <z_log_minimal_printk>
		return NULL;
   19e78:	e7e7      	b.n	19e4a <bt_conn_create_pdu_timeout+0x2a>
   19e7a:	bf00      	nop
   19e7c:	0003308c 	.word	0x0003308c
   19e80:	000318f8 	.word	0x000318f8
   19e84:	20000a28 	.word	0x20000a28
   19e88:	000332cc 	.word	0x000332cc

00019e8c <notify_le_param_updated>:
{
   19e8c:	b570      	push	{r4, r5, r6, lr}
   19e8e:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19e90:	f3bf 8f5b 	dmb	ish
   19e94:	6843      	ldr	r3, [r0, #4]
   19e96:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   19e9a:	f413 7f80 	tst.w	r3, #256	; 0x100
   19e9e:	d010      	beq.n	19ec2 <notify_le_param_updated+0x36>
   19ea0:	1d02      	adds	r2, r0, #4
	    conn->le.interval >= conn->le.interval_min &&
   19ea2:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
   19ea6:	f8b0 10a8 	ldrh.w	r1, [r0, #168]	; 0xa8
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   19eaa:	428b      	cmp	r3, r1
   19eac:	d309      	bcc.n	19ec2 <notify_le_param_updated+0x36>
	    conn->le.interval <= conn->le.interval_max &&
   19eae:	f8b0 10aa 	ldrh.w	r1, [r0, #170]	; 0xaa
	    conn->le.interval >= conn->le.interval_min &&
   19eb2:	428b      	cmp	r3, r1
   19eb4:	d805      	bhi.n	19ec2 <notify_le_param_updated+0x36>
	    conn->le.latency == conn->le.pending_latency &&
   19eb6:	f8d0 10ac 	ldr.w	r1, [r0, #172]	; 0xac
   19eba:	f8d0 30b0 	ldr.w	r3, [r0, #176]	; 0xb0
   19ebe:	4299      	cmp	r1, r3
   19ec0:	d002      	beq.n	19ec8 <notify_le_param_updated+0x3c>
	for (cb = callback_list; cb; cb = cb->_next) {
   19ec2:	4b20      	ldr	r3, [pc, #128]	; (19f44 <notify_le_param_updated+0xb8>)
   19ec4:	681d      	ldr	r5, [r3, #0]
   19ec6:	e015      	b.n	19ef4 <notify_le_param_updated+0x68>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   19ec8:	f3bf 8f5b 	dmb	ish
   19ecc:	e852 3f00 	ldrex	r3, [r2]
   19ed0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   19ed4:	e842 3100 	strex	r1, r3, [r2]
   19ed8:	2900      	cmp	r1, #0
   19eda:	d1f7      	bne.n	19ecc <notify_le_param_updated+0x40>
   19edc:	f3bf 8f5b 	dmb	ish
}
   19ee0:	e7ef      	b.n	19ec2 <notify_le_param_updated+0x36>
			cb->le_param_updated(conn, conn->le.interval,
   19ee2:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   19ee6:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   19eea:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   19eee:	4620      	mov	r0, r4
   19ef0:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   19ef2:	69ad      	ldr	r5, [r5, #24]
   19ef4:	b11d      	cbz	r5, 19efe <notify_le_param_updated+0x72>
		if (cb->le_param_updated) {
   19ef6:	68ee      	ldr	r6, [r5, #12]
   19ef8:	2e00      	cmp	r6, #0
   19efa:	d1f2      	bne.n	19ee2 <notify_le_param_updated+0x56>
   19efc:	e7f9      	b.n	19ef2 <notify_le_param_updated+0x66>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   19efe:	4d12      	ldr	r5, [pc, #72]	; (19f48 <notify_le_param_updated+0xbc>)
   19f00:	e000      	b.n	19f04 <notify_le_param_updated+0x78>
   19f02:	351c      	adds	r5, #28
   19f04:	4b11      	ldr	r3, [pc, #68]	; (19f4c <notify_le_param_updated+0xc0>)
   19f06:	429d      	cmp	r5, r3
   19f08:	d80e      	bhi.n	19f28 <notify_le_param_updated+0x9c>
   19f0a:	4b10      	ldr	r3, [pc, #64]	; (19f4c <notify_le_param_updated+0xc0>)
   19f0c:	429d      	cmp	r5, r3
   19f0e:	d218      	bcs.n	19f42 <notify_le_param_updated+0xb6>
		if (cb->le_param_updated) {
   19f10:	68ee      	ldr	r6, [r5, #12]
   19f12:	2e00      	cmp	r6, #0
   19f14:	d0f5      	beq.n	19f02 <notify_le_param_updated+0x76>
			cb->le_param_updated(conn, conn->le.interval,
   19f16:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   19f1a:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   19f1e:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   19f22:	4620      	mov	r0, r4
   19f24:	47b0      	blx	r6
   19f26:	e7ec      	b.n	19f02 <notify_le_param_updated+0x76>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   19f28:	4e09      	ldr	r6, [pc, #36]	; (19f50 <notify_le_param_updated+0xc4>)
   19f2a:	f240 528b 	movw	r2, #1419	; 0x58b
   19f2e:	4631      	mov	r1, r6
   19f30:	4808      	ldr	r0, [pc, #32]	; (19f54 <notify_le_param_updated+0xc8>)
   19f32:	f011 f8ac 	bl	2b08e <assert_print>
   19f36:	f240 518b 	movw	r1, #1419	; 0x58b
   19f3a:	4630      	mov	r0, r6
   19f3c:	f011 f8a0 	bl	2b080 <assert_post_action>
   19f40:	e7e3      	b.n	19f0a <notify_le_param_updated+0x7e>
}
   19f42:	bd70      	pop	{r4, r5, r6, pc}
   19f44:	20002624 	.word	0x20002624
   19f48:	00031300 	.word	0x00031300
   19f4c:	0003131c 	.word	0x0003131c
   19f50:	0003308c 	.word	0x0003308c
   19f54:	000318f8 	.word	0x000318f8

00019f58 <le_param_req>:
{
   19f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19f5c:	4606      	mov	r6, r0
   19f5e:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   19f60:	4608      	mov	r0, r1
   19f62:	f012 f8f7 	bl	2c154 <bt_le_conn_params_valid>
   19f66:	4607      	mov	r7, r0
   19f68:	2800      	cmp	r0, #0
   19f6a:	d034      	beq.n	19fd6 <le_param_req+0x7e>
	for (cb = callback_list; cb; cb = cb->_next) {
   19f6c:	4b1d      	ldr	r3, [pc, #116]	; (19fe4 <le_param_req+0x8c>)
   19f6e:	681c      	ldr	r4, [r3, #0]
   19f70:	e000      	b.n	19f74 <le_param_req+0x1c>
   19f72:	69a4      	ldr	r4, [r4, #24]
   19f74:	b16c      	cbz	r4, 19f92 <le_param_req+0x3a>
		if (!cb->le_param_req) {
   19f76:	68a3      	ldr	r3, [r4, #8]
   19f78:	2b00      	cmp	r3, #0
   19f7a:	d0fa      	beq.n	19f72 <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
   19f7c:	4629      	mov	r1, r5
   19f7e:	4630      	mov	r0, r6
   19f80:	4798      	blx	r3
   19f82:	b338      	cbz	r0, 19fd4 <le_param_req+0x7c>
		if (!bt_le_conn_params_valid(param)) {
   19f84:	4628      	mov	r0, r5
   19f86:	f012 f8e5 	bl	2c154 <bt_le_conn_params_valid>
   19f8a:	2800      	cmp	r0, #0
   19f8c:	d1f1      	bne.n	19f72 <le_param_req+0x1a>
			return false;
   19f8e:	4607      	mov	r7, r0
   19f90:	e021      	b.n	19fd6 <le_param_req+0x7e>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   19f92:	4c15      	ldr	r4, [pc, #84]	; (19fe8 <le_param_req+0x90>)
   19f94:	e00d      	b.n	19fb2 <le_param_req+0x5a>
   19f96:	4b15      	ldr	r3, [pc, #84]	; (19fec <le_param_req+0x94>)
   19f98:	429c      	cmp	r4, r3
   19f9a:	d21c      	bcs.n	19fd6 <le_param_req+0x7e>
		if (!cb->le_param_req) {
   19f9c:	68a3      	ldr	r3, [r4, #8]
   19f9e:	b13b      	cbz	r3, 19fb0 <le_param_req+0x58>
		if (!cb->le_param_req(conn, param)) {
   19fa0:	4629      	mov	r1, r5
   19fa2:	4630      	mov	r0, r6
   19fa4:	4798      	blx	r3
   19fa6:	b1c8      	cbz	r0, 19fdc <le_param_req+0x84>
		if (!bt_le_conn_params_valid(param)) {
   19fa8:	4628      	mov	r0, r5
   19faa:	f012 f8d3 	bl	2c154 <bt_le_conn_params_valid>
   19fae:	b1b8      	cbz	r0, 19fe0 <le_param_req+0x88>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   19fb0:	341c      	adds	r4, #28
   19fb2:	4b0e      	ldr	r3, [pc, #56]	; (19fec <le_param_req+0x94>)
   19fb4:	429c      	cmp	r4, r3
   19fb6:	d9ee      	bls.n	19f96 <le_param_req+0x3e>
   19fb8:	f8df 8034 	ldr.w	r8, [pc, #52]	; 19ff0 <le_param_req+0x98>
   19fbc:	f240 52d3 	movw	r2, #1491	; 0x5d3
   19fc0:	4641      	mov	r1, r8
   19fc2:	480c      	ldr	r0, [pc, #48]	; (19ff4 <le_param_req+0x9c>)
   19fc4:	f011 f863 	bl	2b08e <assert_print>
   19fc8:	f240 51d3 	movw	r1, #1491	; 0x5d3
   19fcc:	4640      	mov	r0, r8
   19fce:	f011 f857 	bl	2b080 <assert_post_action>
   19fd2:	e7e0      	b.n	19f96 <le_param_req+0x3e>
			return false;
   19fd4:	4607      	mov	r7, r0
}
   19fd6:	4638      	mov	r0, r7
   19fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return false;
   19fdc:	4607      	mov	r7, r0
   19fde:	e7fa      	b.n	19fd6 <le_param_req+0x7e>
			return false;
   19fe0:	4607      	mov	r7, r0
   19fe2:	e7f8      	b.n	19fd6 <le_param_req+0x7e>
   19fe4:	20002624 	.word	0x20002624
   19fe8:	00031300 	.word	0x00031300
   19fec:	0003131c 	.word	0x0003131c
   19ff0:	0003308c 	.word	0x0003308c
   19ff4:	000318f8 	.word	0x000318f8

00019ff8 <bt_conn_identity_resolved>:

#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_SMP)
void bt_conn_identity_resolved(struct bt_conn *conn)
{
   19ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19ffa:	4605      	mov	r5, r0
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   19ffc:	78c3      	ldrb	r3, [r0, #3]
   19ffe:	b923      	cbnz	r3, 1a00a <bt_conn_identity_resolved+0x12>
		rpa = &conn->le.resp_addr;
   1a000:	f100 069e 	add.w	r6, r0, #158	; 0x9e
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   1a004:	4b18      	ldr	r3, [pc, #96]	; (1a068 <bt_conn_identity_resolved+0x70>)
   1a006:	681c      	ldr	r4, [r3, #0]
   1a008:	e008      	b.n	1a01c <bt_conn_identity_resolved+0x24>
		rpa = &conn->le.init_addr;
   1a00a:	f100 0697 	add.w	r6, r0, #151	; 0x97
   1a00e:	e7f9      	b.n	1a004 <bt_conn_identity_resolved+0xc>
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   1a010:	f105 0290 	add.w	r2, r5, #144	; 0x90
   1a014:	4631      	mov	r1, r6
   1a016:	4628      	mov	r0, r5
   1a018:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1a01a:	69a4      	ldr	r4, [r4, #24]
   1a01c:	b11c      	cbz	r4, 1a026 <bt_conn_identity_resolved+0x2e>
		if (cb->identity_resolved) {
   1a01e:	6923      	ldr	r3, [r4, #16]
   1a020:	2b00      	cmp	r3, #0
   1a022:	d1f5      	bne.n	1a010 <bt_conn_identity_resolved+0x18>
   1a024:	e7f9      	b.n	1a01a <bt_conn_identity_resolved+0x22>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1a026:	4c11      	ldr	r4, [pc, #68]	; (1a06c <bt_conn_identity_resolved+0x74>)
   1a028:	e000      	b.n	1a02c <bt_conn_identity_resolved+0x34>
   1a02a:	341c      	adds	r4, #28
   1a02c:	4b10      	ldr	r3, [pc, #64]	; (1a070 <bt_conn_identity_resolved+0x78>)
   1a02e:	429c      	cmp	r4, r3
   1a030:	d80b      	bhi.n	1a04a <bt_conn_identity_resolved+0x52>
   1a032:	4b0f      	ldr	r3, [pc, #60]	; (1a070 <bt_conn_identity_resolved+0x78>)
   1a034:	429c      	cmp	r4, r3
   1a036:	d215      	bcs.n	1a064 <bt_conn_identity_resolved+0x6c>
		if (cb->identity_resolved) {
   1a038:	6923      	ldr	r3, [r4, #16]
   1a03a:	2b00      	cmp	r3, #0
   1a03c:	d0f5      	beq.n	1a02a <bt_conn_identity_resolved+0x32>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   1a03e:	f105 0290 	add.w	r2, r5, #144	; 0x90
   1a042:	4631      	mov	r1, r6
   1a044:	4628      	mov	r0, r5
   1a046:	4798      	blx	r3
   1a048:	e7ef      	b.n	1a02a <bt_conn_identity_resolved+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1a04a:	4f0a      	ldr	r7, [pc, #40]	; (1a074 <bt_conn_identity_resolved+0x7c>)
   1a04c:	f44f 62f2 	mov.w	r2, #1936	; 0x790
   1a050:	4639      	mov	r1, r7
   1a052:	4809      	ldr	r0, [pc, #36]	; (1a078 <bt_conn_identity_resolved+0x80>)
   1a054:	f011 f81b 	bl	2b08e <assert_print>
   1a058:	f44f 61f2 	mov.w	r1, #1936	; 0x790
   1a05c:	4638      	mov	r0, r7
   1a05e:	f011 f80f 	bl	2b080 <assert_post_action>
   1a062:	e7e6      	b.n	1a032 <bt_conn_identity_resolved+0x3a>
		}
	}
}
   1a064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a066:	bf00      	nop
   1a068:	20002624 	.word	0x20002624
   1a06c:	00031300 	.word	0x00031300
   1a070:	0003131c 	.word	0x0003131c
   1a074:	0003308c 	.word	0x0003308c
   1a078:	000318f8 	.word	0x000318f8

0001a07c <bt_conn_security_changed>:
	conn->required_sec_level = conn->sec_level;
}

void bt_conn_security_changed(struct bt_conn *conn, uint8_t hci_err,
			      enum bt_security_err err)
{
   1a07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a07e:	4605      	mov	r5, r0
   1a080:	460c      	mov	r4, r1
   1a082:	4616      	mov	r6, r2
	struct bt_conn_cb *cb;

	reset_pairing(conn);
   1a084:	f012 fb96 	bl	2c7b4 <reset_pairing>
	bt_l2cap_security_changed(conn, hci_err);
   1a088:	4621      	mov	r1, r4
   1a08a:	4628      	mov	r0, r5
   1a08c:	f012 fde8 	bl	2cc60 <bt_l2cap_security_changed>
	if (IS_ENABLED(CONFIG_BT_ISO_CENTRAL)) {
		bt_iso_security_changed(conn, hci_err);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   1a090:	4b15      	ldr	r3, [pc, #84]	; (1a0e8 <bt_conn_security_changed+0x6c>)
   1a092:	681c      	ldr	r4, [r3, #0]
   1a094:	e004      	b.n	1a0a0 <bt_conn_security_changed+0x24>
		if (cb->security_changed) {
			cb->security_changed(conn, conn->sec_level, err);
   1a096:	4632      	mov	r2, r6
   1a098:	7a69      	ldrb	r1, [r5, #9]
   1a09a:	4628      	mov	r0, r5
   1a09c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1a09e:	69a4      	ldr	r4, [r4, #24]
   1a0a0:	b11c      	cbz	r4, 1a0aa <bt_conn_security_changed+0x2e>
		if (cb->security_changed) {
   1a0a2:	6963      	ldr	r3, [r4, #20]
   1a0a4:	2b00      	cmp	r3, #0
   1a0a6:	d1f6      	bne.n	1a096 <bt_conn_security_changed+0x1a>
   1a0a8:	e7f9      	b.n	1a09e <bt_conn_security_changed+0x22>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1a0aa:	4c10      	ldr	r4, [pc, #64]	; (1a0ec <bt_conn_security_changed+0x70>)
   1a0ac:	e000      	b.n	1a0b0 <bt_conn_security_changed+0x34>
   1a0ae:	341c      	adds	r4, #28
   1a0b0:	4b0f      	ldr	r3, [pc, #60]	; (1a0f0 <bt_conn_security_changed+0x74>)
   1a0b2:	429c      	cmp	r4, r3
   1a0b4:	d80a      	bhi.n	1a0cc <bt_conn_security_changed+0x50>
   1a0b6:	4b0e      	ldr	r3, [pc, #56]	; (1a0f0 <bt_conn_security_changed+0x74>)
   1a0b8:	429c      	cmp	r4, r3
   1a0ba:	d214      	bcs.n	1a0e6 <bt_conn_security_changed+0x6a>
		if (cb->security_changed) {
   1a0bc:	6963      	ldr	r3, [r4, #20]
   1a0be:	2b00      	cmp	r3, #0
   1a0c0:	d0f5      	beq.n	1a0ae <bt_conn_security_changed+0x32>
			cb->security_changed(conn, conn->sec_level, err);
   1a0c2:	4632      	mov	r2, r6
   1a0c4:	7a69      	ldrb	r1, [r5, #9]
   1a0c6:	4628      	mov	r0, r5
   1a0c8:	4798      	blx	r3
   1a0ca:	e7f0      	b.n	1a0ae <bt_conn_security_changed+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1a0cc:	4f09      	ldr	r7, [pc, #36]	; (1a0f4 <bt_conn_security_changed+0x78>)
   1a0ce:	f240 72fc 	movw	r2, #2044	; 0x7fc
   1a0d2:	4639      	mov	r1, r7
   1a0d4:	4808      	ldr	r0, [pc, #32]	; (1a0f8 <bt_conn_security_changed+0x7c>)
   1a0d6:	f010 ffda 	bl	2b08e <assert_print>
   1a0da:	f240 71fc 	movw	r1, #2044	; 0x7fc
   1a0de:	4638      	mov	r0, r7
   1a0e0:	f010 ffce 	bl	2b080 <assert_post_action>
   1a0e4:	e7e7      	b.n	1a0b6 <bt_conn_security_changed+0x3a>
		}
#endif /* CONFIG_BT_BREDR */

	}
#endif
}
   1a0e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a0e8:	20002624 	.word	0x20002624
   1a0ec:	00031300 	.word	0x00031300
   1a0f0:	0003131c 	.word	0x0003131c
   1a0f4:	0003308c 	.word	0x0003308c
   1a0f8:	000318f8 	.word	0x000318f8

0001a0fc <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   1a0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a0fe:	4607      	mov	r7, r0
   1a100:	460e      	mov	r6, r1
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1a102:	2400      	movs	r4, #0
   1a104:	b114      	cbz	r4, 1a10c <bt_conn_lookup_addr_le+0x10>
		}

		return conn;
	}

	return NULL;
   1a106:	2500      	movs	r5, #0
}
   1a108:	4628      	mov	r0, r5
   1a10a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1a10c:	4b0c      	ldr	r3, [pc, #48]	; (1a140 <bt_conn_lookup_addr_le+0x44>)
   1a10e:	20c8      	movs	r0, #200	; 0xc8
   1a110:	fb00 3004 	mla	r0, r0, r4, r3
   1a114:	f012 fc2b 	bl	2c96e <bt_conn_ref>
		if (!conn) {
   1a118:	4605      	mov	r5, r0
   1a11a:	b170      	cbz	r0, 1a13a <bt_conn_lookup_addr_le+0x3e>
		if (conn->type != BT_CONN_TYPE_LE) {
   1a11c:	7883      	ldrb	r3, [r0, #2]
   1a11e:	2b01      	cmp	r3, #1
   1a120:	d109      	bne.n	1a136 <bt_conn_lookup_addr_le+0x3a>
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   1a122:	4632      	mov	r2, r6
   1a124:	4639      	mov	r1, r7
   1a126:	f012 fcfd 	bl	2cb24 <bt_conn_is_peer_addr_le>
   1a12a:	2800      	cmp	r0, #0
   1a12c:	d1ec      	bne.n	1a108 <bt_conn_lookup_addr_le+0xc>
			bt_conn_unref(conn);
   1a12e:	4628      	mov	r0, r5
   1a130:	f7ff fd40 	bl	19bb4 <bt_conn_unref>
			continue;
   1a134:	e001      	b.n	1a13a <bt_conn_lookup_addr_le+0x3e>
			bt_conn_unref(conn);
   1a136:	f7ff fd3d 	bl	19bb4 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1a13a:	3401      	adds	r4, #1
   1a13c:	e7e2      	b.n	1a104 <bt_conn_lookup_addr_le+0x8>
   1a13e:	bf00      	nop
   1a140:	200019e8 	.word	0x200019e8

0001a144 <bt_conn_exists_le>:
{
   1a144:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   1a146:	f7ff ffd9 	bl	1a0fc <bt_conn_lookup_addr_le>
	if (conn) {
   1a14a:	b908      	cbnz	r0, 1a150 <bt_conn_exists_le+0xc>
	return false;
   1a14c:	2000      	movs	r0, #0
}
   1a14e:	bd10      	pop	{r4, pc}
   1a150:	4604      	mov	r4, r0
		BT_WARN("Found valid connection in %s state",
   1a152:	7b43      	ldrb	r3, [r0, #13]
	switch (state) {
   1a154:	2b08      	cmp	r3, #8
   1a156:	d81e      	bhi.n	1a196 <bt_conn_exists_le+0x52>
   1a158:	e8df f003 	tbb	[pc, r3]
   1a15c:	150f1f05 	.word	0x150f1f05
   1a160:	19171113 	.word	0x19171113
   1a164:	1b          	.byte	0x1b
   1a165:	00          	.byte	0x00
   1a166:	4a0e      	ldr	r2, [pc, #56]	; (1a1a0 <bt_conn_exists_le+0x5c>)
		BT_WARN("Found valid connection in %s state",
   1a168:	2157      	movs	r1, #87	; 0x57
   1a16a:	480e      	ldr	r0, [pc, #56]	; (1a1a4 <bt_conn_exists_le+0x60>)
   1a16c:	f010 ff9e 	bl	2b0ac <z_log_minimal_printk>
		bt_conn_unref(conn);
   1a170:	4620      	mov	r0, r4
   1a172:	f7ff fd1f 	bl	19bb4 <bt_conn_unref>
		return true;
   1a176:	2001      	movs	r0, #1
   1a178:	e7e9      	b.n	1a14e <bt_conn_exists_le+0xa>
		return "connecting-scan";
   1a17a:	4a0b      	ldr	r2, [pc, #44]	; (1a1a8 <bt_conn_exists_le+0x64>)
   1a17c:	e7f4      	b.n	1a168 <bt_conn_exists_le+0x24>
		return "connecting-dir-adv";
   1a17e:	4a0b      	ldr	r2, [pc, #44]	; (1a1ac <bt_conn_exists_le+0x68>)
   1a180:	e7f2      	b.n	1a168 <bt_conn_exists_le+0x24>
		return "connecting-adv";
   1a182:	4a0b      	ldr	r2, [pc, #44]	; (1a1b0 <bt_conn_exists_le+0x6c>)
   1a184:	e7f0      	b.n	1a168 <bt_conn_exists_le+0x24>
		return "connecting-auto";
   1a186:	4a0b      	ldr	r2, [pc, #44]	; (1a1b4 <bt_conn_exists_le+0x70>)
   1a188:	e7ee      	b.n	1a168 <bt_conn_exists_le+0x24>
		return "connecting";
   1a18a:	4a0b      	ldr	r2, [pc, #44]	; (1a1b8 <bt_conn_exists_le+0x74>)
   1a18c:	e7ec      	b.n	1a168 <bt_conn_exists_le+0x24>
		return "connected";
   1a18e:	4a0b      	ldr	r2, [pc, #44]	; (1a1bc <bt_conn_exists_le+0x78>)
   1a190:	e7ea      	b.n	1a168 <bt_conn_exists_le+0x24>
		return "disconnecting";
   1a192:	4a0b      	ldr	r2, [pc, #44]	; (1a1c0 <bt_conn_exists_le+0x7c>)
   1a194:	e7e8      	b.n	1a168 <bt_conn_exists_le+0x24>
		return "(unknown)";
   1a196:	4a0b      	ldr	r2, [pc, #44]	; (1a1c4 <bt_conn_exists_le+0x80>)
   1a198:	e7e6      	b.n	1a168 <bt_conn_exists_le+0x24>
		return "disconnect-complete";
   1a19a:	4a0b      	ldr	r2, [pc, #44]	; (1a1c8 <bt_conn_exists_le+0x84>)
   1a19c:	e7e4      	b.n	1a168 <bt_conn_exists_le+0x24>
   1a19e:	bf00      	nop
   1a1a0:	00033264 	.word	0x00033264
   1a1a4:	000332fc 	.word	0x000332fc
   1a1a8:	000331f8 	.word	0x000331f8
   1a1ac:	00033208 	.word	0x00033208
   1a1b0:	0003321c 	.word	0x0003321c
   1a1b4:	0003322c 	.word	0x0003322c
   1a1b8:	0003323c 	.word	0x0003323c
   1a1bc:	00033248 	.word	0x00033248
   1a1c0:	00033254 	.word	0x00033254
   1a1c4:	000331d8 	.word	0x000331d8
   1a1c8:	000331e4 	.word	0x000331e4

0001a1cc <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   1a1cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a1d0:	4680      	mov	r8, r0
   1a1d2:	460f      	mov	r7, r1
   1a1d4:	4616      	mov	r6, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1a1d6:	2400      	movs	r4, #0
   1a1d8:	b11c      	cbz	r4, 1a1e2 <bt_conn_lookup_state_le+0x16>
		}

		return conn;
	}

	return NULL;
   1a1da:	2500      	movs	r5, #0
}
   1a1dc:	4628      	mov	r0, r5
   1a1de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1a1e2:	4b11      	ldr	r3, [pc, #68]	; (1a228 <bt_conn_lookup_state_le+0x5c>)
   1a1e4:	20c8      	movs	r0, #200	; 0xc8
   1a1e6:	fb00 3004 	mla	r0, r0, r4, r3
   1a1ea:	f012 fbc0 	bl	2c96e <bt_conn_ref>
		if (!conn) {
   1a1ee:	4605      	mov	r5, r0
   1a1f0:	b188      	cbz	r0, 1a216 <bt_conn_lookup_state_le+0x4a>
		if (conn->type != BT_CONN_TYPE_LE) {
   1a1f2:	7883      	ldrb	r3, [r0, #2]
   1a1f4:	2b01      	cmp	r3, #1
   1a1f6:	d110      	bne.n	1a21a <bt_conn_lookup_state_le+0x4e>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   1a1f8:	b127      	cbz	r7, 1a204 <bt_conn_lookup_state_le+0x38>
   1a1fa:	463a      	mov	r2, r7
   1a1fc:	4641      	mov	r1, r8
   1a1fe:	f012 fc91 	bl	2cb24 <bt_conn_is_peer_addr_le>
   1a202:	b168      	cbz	r0, 1a220 <bt_conn_lookup_state_le+0x54>
		if (!(conn->state == state && conn->id == id)) {
   1a204:	7b6b      	ldrb	r3, [r5, #13]
   1a206:	42b3      	cmp	r3, r6
   1a208:	d102      	bne.n	1a210 <bt_conn_lookup_state_le+0x44>
   1a20a:	7a2b      	ldrb	r3, [r5, #8]
   1a20c:	4543      	cmp	r3, r8
   1a20e:	d0e5      	beq.n	1a1dc <bt_conn_lookup_state_le+0x10>
			bt_conn_unref(conn);
   1a210:	4628      	mov	r0, r5
   1a212:	f7ff fccf 	bl	19bb4 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1a216:	3401      	adds	r4, #1
   1a218:	e7de      	b.n	1a1d8 <bt_conn_lookup_state_le+0xc>
			bt_conn_unref(conn);
   1a21a:	f7ff fccb 	bl	19bb4 <bt_conn_unref>
			continue;
   1a21e:	e7fa      	b.n	1a216 <bt_conn_lookup_state_le+0x4a>
			bt_conn_unref(conn);
   1a220:	4628      	mov	r0, r5
   1a222:	f7ff fcc7 	bl	19bb4 <bt_conn_unref>
			continue;
   1a226:	e7f6      	b.n	1a216 <bt_conn_lookup_state_le+0x4a>
   1a228:	200019e8 	.word	0x200019e8

0001a22c <send_conn_le_param_update>:
{
   1a22c:	b538      	push	{r3, r4, r5, lr}
   1a22e:	4604      	mov	r4, r0
   1a230:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   1a232:	4608      	mov	r0, r1
   1a234:	f011 ff8e 	bl	2c154 <bt_le_conn_params_valid>
   1a238:	b360      	cbz	r0, 1a294 <send_conn_le_param_update+0x68>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   1a23a:	4b18      	ldr	r3, [pc, #96]	; (1a29c <send_conn_le_param_update+0x70>)
   1a23c:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   1a240:	f013 0f02 	tst.w	r3, #2
   1a244:	d004      	beq.n	1a250 <send_conn_le_param_update+0x24>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   1a246:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   1a24a:	f013 0f02 	tst.w	r3, #2
   1a24e:	d113      	bne.n	1a278 <send_conn_le_param_update+0x4c>
	     (conn->role == BT_HCI_ROLE_CENTRAL)) {
   1a250:	78e3      	ldrb	r3, [r4, #3]
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   1a252:	b9d3      	cbnz	r3, 1a28a <send_conn_le_param_update+0x5e>
		rc = bt_conn_le_conn_update(conn, param);
   1a254:	4629      	mov	r1, r5
   1a256:	4620      	mov	r0, r4
   1a258:	f012 fc8d 	bl	2cb76 <bt_conn_le_conn_update>
		if (rc == 0) {
   1a25c:	b9c8      	cbnz	r0, 1a292 <send_conn_le_param_update+0x66>
			conn->le.interval_min = param->interval_min;
   1a25e:	882b      	ldrh	r3, [r5, #0]
   1a260:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.interval_max = param->interval_max;
   1a264:	886b      	ldrh	r3, [r5, #2]
   1a266:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
			conn->le.pending_latency = param->latency;
   1a26a:	88ab      	ldrh	r3, [r5, #4]
   1a26c:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
			conn->le.pending_timeout = param->timeout;
   1a270:	88eb      	ldrh	r3, [r5, #6]
   1a272:	f8a4 30b2 	strh.w	r3, [r4, #178]	; 0xb2
		return rc;
   1a276:	e00c      	b.n	1a292 <send_conn_le_param_update+0x66>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a278:	f3bf 8f5b 	dmb	ish
   1a27c:	6863      	ldr	r3, [r4, #4]
   1a27e:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   1a282:	f413 7f00 	tst.w	r3, #512	; 0x200
   1a286:	d1e3      	bne.n	1a250 <send_conn_le_param_update+0x24>
   1a288:	e7e4      	b.n	1a254 <send_conn_le_param_update+0x28>
	return bt_l2cap_update_conn_param(conn, param);
   1a28a:	4629      	mov	r1, r5
   1a28c:	4620      	mov	r0, r4
   1a28e:	f012 fd75 	bl	2cd7c <bt_l2cap_update_conn_param>
}
   1a292:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1a294:	f06f 0015 	mvn.w	r0, #21
   1a298:	e7fb      	b.n	1a292 <send_conn_le_param_update+0x66>
   1a29a:	bf00      	nop
   1a29c:	20000350 	.word	0x20000350

0001a2a0 <deferred_work>:
{
   1a2a0:	b530      	push	{r4, r5, lr}
   1a2a2:	b085      	sub	sp, #20
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   1a2a4:	f1a0 0460 	sub.w	r4, r0, #96	; 0x60
	if (conn->state == BT_CONN_DISCONNECTED) {
   1a2a8:	f810 3c53 	ldrb.w	r3, [r0, #-83]
   1a2ac:	b3b3      	cbz	r3, 1a31c <deferred_work+0x7c>
	if (conn->type != BT_CONN_TYPE_LE) {
   1a2ae:	f810 3c5e 	ldrb.w	r3, [r0, #-94]
   1a2b2:	2b01      	cmp	r3, #1
   1a2b4:	d130      	bne.n	1a318 <deferred_work+0x78>
	if (atomic_test_and_clear_bit(conn->flags,
   1a2b6:	f1a0 055c 	sub.w	r5, r0, #92	; 0x5c
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1a2ba:	f3bf 8f5b 	dmb	ish
   1a2be:	e855 3f00 	ldrex	r3, [r5]
   1a2c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
   1a2c6:	e845 2100 	strex	r1, r2, [r5]
   1a2ca:	2900      	cmp	r1, #0
   1a2cc:	d1f7      	bne.n	1a2be <deferred_work+0x1e>
   1a2ce:	f3bf 8f5b 	dmb	ish
   1a2d2:	f413 7f80 	tst.w	r3, #256	; 0x100
   1a2d6:	d02b      	beq.n	1a330 <deferred_work+0x90>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   1a2d8:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   1a2dc:	f8ad 3000 	strh.w	r3, [sp]
   1a2e0:	f8b0 304a 	ldrh.w	r3, [r0, #74]	; 0x4a
   1a2e4:	f8ad 3002 	strh.w	r3, [sp, #2]
   1a2e8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
   1a2ec:	f8ad 3004 	strh.w	r3, [sp, #4]
   1a2f0:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
   1a2f4:	f8ad 3006 	strh.w	r3, [sp, #6]
		send_conn_le_param_update(conn, param);
   1a2f8:	4669      	mov	r1, sp
   1a2fa:	4620      	mov	r0, r4
   1a2fc:	f7ff ff96 	bl	1a22c <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1a300:	f3bf 8f5b 	dmb	ish
   1a304:	e855 3f00 	ldrex	r3, [r5]
   1a308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1a30c:	e845 3200 	strex	r2, r3, [r5]
   1a310:	2a00      	cmp	r2, #0
   1a312:	d1f7      	bne.n	1a304 <deferred_work+0x64>
   1a314:	f3bf 8f5b 	dmb	ish
}
   1a318:	b005      	add	sp, #20
   1a31a:	bd30      	pop	{r4, r5, pc}
		bt_l2cap_disconnected(conn);
   1a31c:	4620      	mov	r0, r4
   1a31e:	f012 fc7e 	bl	2cc1e <bt_l2cap_disconnected>
		notify_disconnected(conn);
   1a322:	4620      	mov	r0, r4
   1a324:	f7ff f9ae 	bl	19684 <notify_disconnected>
		bt_conn_unref(conn);
   1a328:	4620      	mov	r0, r4
   1a32a:	f7ff fc43 	bl	19bb4 <bt_conn_unref>
		return;
   1a32e:	e7f3      	b.n	1a318 <deferred_work+0x78>
		param = BT_LE_CONN_PARAM(
   1a330:	4a05      	ldr	r2, [pc, #20]	; (1a348 <deferred_work+0xa8>)
   1a332:	ab02      	add	r3, sp, #8
   1a334:	e892 0003 	ldmia.w	r2, {r0, r1}
   1a338:	e883 0003 	stmia.w	r3, {r0, r1}
		send_conn_le_param_update(conn, param);
   1a33c:	4619      	mov	r1, r3
   1a33e:	4620      	mov	r0, r4
   1a340:	f7ff ff74 	bl	1a22c <send_conn_le_param_update>
   1a344:	e7dc      	b.n	1a300 <deferred_work+0x60>
   1a346:	bf00      	nop
   1a348:	0003152c 	.word	0x0003152c

0001a34c <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   1a34c:	b508      	push	{r3, lr}
   1a34e:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   1a350:	4801      	ldr	r0, [pc, #4]	; (1a358 <bt_conn_create_frag_timeout+0xc>)
   1a352:	f7ff fd65 	bl	19e20 <bt_conn_create_pdu_timeout>
#endif /* CONFIG_NET_BUF_LOG */
}
   1a356:	bd08      	pop	{r3, pc}
   1a358:	20000a90 	.word	0x20000a90

0001a35c <create_frag>:
{
   1a35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a35e:	4606      	mov	r6, r0
   1a360:	460d      	mov	r5, r1
		frag = bt_conn_create_frag(0);
   1a362:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1a366:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a36a:	2000      	movs	r0, #0
   1a36c:	f7ff ffee 	bl	1a34c <bt_conn_create_frag_timeout>
   1a370:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   1a372:	7b73      	ldrb	r3, [r6, #13]
   1a374:	2b07      	cmp	r3, #7
   1a376:	d11a      	bne.n	1a3ae <create_frag+0x52>
	tx_data(frag)->tx = NULL;
   1a378:	2300      	movs	r3, #0
   1a37a:	6143      	str	r3, [r0, #20]
	return bt_dev.le.acl_mtu;
   1a37c:	4b10      	ldr	r3, [pc, #64]	; (1a3c0 <create_frag+0x64>)
   1a37e:	f8b3 60fc 	ldrh.w	r6, [r3, #252]	; 0xfc
	return net_buf_simple_tailroom(&buf->b);
   1a382:	f100 0708 	add.w	r7, r0, #8
   1a386:	4638      	mov	r0, r7
   1a388:	f014 fef1 	bl	2f16e <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   1a38c:	4286      	cmp	r6, r0
   1a38e:	d212      	bcs.n	1a3b6 <create_frag+0x5a>
	return bt_dev.le.acl_mtu;
   1a390:	4b0b      	ldr	r3, [pc, #44]	; (1a3c0 <create_frag+0x64>)
   1a392:	f8b3 60fc 	ldrh.w	r6, [r3, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1a396:	4632      	mov	r2, r6
   1a398:	f855 1f08 	ldr.w	r1, [r5, #8]!
   1a39c:	4638      	mov	r0, r7
   1a39e:	f014 feef 	bl	2f180 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   1a3a2:	4631      	mov	r1, r6
   1a3a4:	4628      	mov	r0, r5
   1a3a6:	f006 f8a7 	bl	204f8 <net_buf_simple_pull>
}
   1a3aa:	4620      	mov	r0, r4
   1a3ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		net_buf_unref(frag);
   1a3ae:	f005 ffe9 	bl	20384 <net_buf_unref>
		return NULL;
   1a3b2:	2400      	movs	r4, #0
   1a3b4:	e7f9      	b.n	1a3aa <create_frag+0x4e>
	return net_buf_simple_tailroom(&buf->b);
   1a3b6:	4638      	mov	r0, r7
   1a3b8:	f014 fed9 	bl	2f16e <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   1a3bc:	b286      	uxth	r6, r0
   1a3be:	e7ea      	b.n	1a396 <create_frag+0x3a>
   1a3c0:	20000350 	.word	0x20000350

0001a3c4 <send_buf>:
{
   1a3c4:	b538      	push	{r3, r4, r5, lr}
   1a3c6:	4605      	mov	r5, r0
   1a3c8:	460c      	mov	r4, r1
	if (buf->len <= conn_mtu(conn)) {
   1a3ca:	898b      	ldrh	r3, [r1, #12]
	return bt_dev.le.acl_mtu;
   1a3cc:	4a1b      	ldr	r2, [pc, #108]	; (1a43c <send_buf+0x78>)
   1a3ce:	f8b2 20fc 	ldrh.w	r2, [r2, #252]	; 0xfc
	if (buf->len <= conn_mtu(conn)) {
   1a3d2:	429a      	cmp	r2, r3
   1a3d4:	d21f      	bcs.n	1a416 <send_buf+0x52>
	frag = create_frag(conn, buf);
   1a3d6:	f7ff ffc1 	bl	1a35c <create_frag>
	if (!frag) {
   1a3da:	4601      	mov	r1, r0
   1a3dc:	b350      	cbz	r0, 1a434 <send_buf+0x70>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   1a3de:	2301      	movs	r3, #1
   1a3e0:	2200      	movs	r2, #0
   1a3e2:	4628      	mov	r0, r5
   1a3e4:	f7ff f9f4 	bl	197d0 <send_frag>
   1a3e8:	4603      	mov	r3, r0
   1a3ea:	b1c8      	cbz	r0, 1a420 <send_buf+0x5c>
	while (buf->len > conn_mtu(conn)) {
   1a3ec:	89a3      	ldrh	r3, [r4, #12]
	return bt_dev.le.acl_mtu;
   1a3ee:	4a13      	ldr	r2, [pc, #76]	; (1a43c <send_buf+0x78>)
   1a3f0:	f8b2 20fc 	ldrh.w	r2, [r2, #252]	; 0xfc
	while (buf->len > conn_mtu(conn)) {
   1a3f4:	429a      	cmp	r2, r3
   1a3f6:	d215      	bcs.n	1a424 <send_buf+0x60>
		frag = create_frag(conn, buf);
   1a3f8:	4621      	mov	r1, r4
   1a3fa:	4628      	mov	r0, r5
   1a3fc:	f7ff ffae 	bl	1a35c <create_frag>
		if (!frag) {
   1a400:	4601      	mov	r1, r0
   1a402:	b1c8      	cbz	r0, 1a438 <send_buf+0x74>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   1a404:	2301      	movs	r3, #1
   1a406:	461a      	mov	r2, r3
   1a408:	4628      	mov	r0, r5
   1a40a:	f7ff f9e1 	bl	197d0 <send_frag>
   1a40e:	4603      	mov	r3, r0
   1a410:	2800      	cmp	r0, #0
   1a412:	d1eb      	bne.n	1a3ec <send_buf+0x28>
   1a414:	e004      	b.n	1a420 <send_buf+0x5c>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   1a416:	2300      	movs	r3, #0
   1a418:	2202      	movs	r2, #2
   1a41a:	f7ff f9d9 	bl	197d0 <send_frag>
   1a41e:	4603      	mov	r3, r0
}
   1a420:	4618      	mov	r0, r3
   1a422:	bd38      	pop	{r3, r4, r5, pc}
	return send_frag(conn, buf, FRAG_END, false);
   1a424:	2300      	movs	r3, #0
   1a426:	2203      	movs	r2, #3
   1a428:	4621      	mov	r1, r4
   1a42a:	4628      	mov	r0, r5
   1a42c:	f7ff f9d0 	bl	197d0 <send_frag>
   1a430:	4603      	mov	r3, r0
   1a432:	e7f5      	b.n	1a420 <send_buf+0x5c>
		return false;
   1a434:	2300      	movs	r3, #0
   1a436:	e7f3      	b.n	1a420 <send_buf+0x5c>
			return false;
   1a438:	2300      	movs	r3, #0
   1a43a:	e7f1      	b.n	1a420 <send_buf+0x5c>
   1a43c:	20000350 	.word	0x20000350

0001a440 <bt_conn_process_tx>:
{
   1a440:	b570      	push	{r4, r5, r6, lr}
   1a442:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   1a444:	7b43      	ldrb	r3, [r0, #13]
   1a446:	b97b      	cbnz	r3, 1a468 <bt_conn_process_tx+0x28>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
   1a448:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1a44a:	f3bf 8f5b 	dmb	ish
   1a44e:	e853 2f00 	ldrex	r2, [r3]
   1a452:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   1a456:	e843 1000 	strex	r0, r1, [r3]
   1a45a:	2800      	cmp	r0, #0
   1a45c:	d1f7      	bne.n	1a44e <bt_conn_process_tx+0xe>
   1a45e:	f3bf 8f5b 	dmb	ish
	if (conn->state == BT_CONN_DISCONNECTED &&
   1a462:	f012 0f40 	tst.w	r2, #64	; 0x40
   1a466:	d10d      	bne.n	1a484 <bt_conn_process_tx+0x44>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   1a468:	2200      	movs	r2, #0
   1a46a:	2300      	movs	r3, #0
   1a46c:	f104 0038 	add.w	r0, r4, #56	; 0x38
   1a470:	f005 fe1a 	bl	200a8 <net_buf_get>
	BT_ASSERT(buf);
   1a474:	4605      	mov	r5, r0
   1a476:	b148      	cbz	r0, 1a48c <bt_conn_process_tx+0x4c>
	if (!send_buf(conn, buf)) {
   1a478:	4629      	mov	r1, r5
   1a47a:	4620      	mov	r0, r4
   1a47c:	f7ff ffa2 	bl	1a3c4 <send_buf>
   1a480:	b188      	cbz	r0, 1a4a6 <bt_conn_process_tx+0x66>
}
   1a482:	bd70      	pop	{r4, r5, r6, pc}
		conn_cleanup(conn);
   1a484:	4620      	mov	r0, r4
   1a486:	f7ff faef 	bl	19a68 <conn_cleanup>
		return;
   1a48a:	e7fa      	b.n	1a482 <bt_conn_process_tx+0x42>
	BT_ASSERT(buf);
   1a48c:	f240 320b 	movw	r2, #779	; 0x30b
   1a490:	490b      	ldr	r1, [pc, #44]	; (1a4c0 <bt_conn_process_tx+0x80>)
   1a492:	480c      	ldr	r0, [pc, #48]	; (1a4c4 <bt_conn_process_tx+0x84>)
   1a494:	f010 fdfb 	bl	2b08e <assert_print>
   1a498:	4040      	eors	r0, r0
   1a49a:	f380 8811 	msr	BASEPRI, r0
   1a49e:	f04f 0003 	mov.w	r0, #3
   1a4a2:	df02      	svc	2
   1a4a4:	e7e8      	b.n	1a478 <bt_conn_process_tx+0x38>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   1a4a6:	696e      	ldr	r6, [r5, #20]
		tx_data(buf)->tx = NULL;
   1a4a8:	2300      	movs	r3, #0
   1a4aa:	616b      	str	r3, [r5, #20]
		net_buf_unref(buf);
   1a4ac:	4628      	mov	r0, r5
   1a4ae:	f005 ff69 	bl	20384 <net_buf_unref>
		if (tx) {
   1a4b2:	2e00      	cmp	r6, #0
   1a4b4:	d0e5      	beq.n	1a482 <bt_conn_process_tx+0x42>
			conn_tx_destroy(conn, tx);
   1a4b6:	4631      	mov	r1, r6
   1a4b8:	4620      	mov	r0, r4
   1a4ba:	f7ff f919 	bl	196f0 <conn_tx_destroy>
   1a4be:	e7e0      	b.n	1a482 <bt_conn_process_tx+0x42>
   1a4c0:	0003308c 	.word	0x0003308c
   1a4c4:	000318f8 	.word	0x000318f8

0001a4c8 <bt_conn_auth_cb_register>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
   1a4c8:	4603      	mov	r3, r0
   1a4ca:	b140      	cbz	r0, 1a4de <bt_conn_auth_cb_register+0x16>
		bt_auth = NULL;
		return 0;
	}

	if (bt_auth) {
   1a4cc:	4a11      	ldr	r2, [pc, #68]	; (1a514 <bt_conn_auth_cb_register+0x4c>)
   1a4ce:	6812      	ldr	r2, [r2, #0]
   1a4d0:	b9a2      	cbnz	r2, 1a4fc <bt_conn_auth_cb_register+0x34>
	}

	/* The cancel callback must always be provided if the app provides
	 * interactive callbacks.
	 */
	if (!cb->cancel &&
   1a4d2:	6902      	ldr	r2, [r0, #16]
   1a4d4:	b132      	cbz	r2, 1a4e4 <bt_conn_auth_cb_register+0x1c>
#endif
	     cb->pairing_confirm)) {
		return -EINVAL;
	}

	bt_auth = cb;
   1a4d6:	4a0f      	ldr	r2, [pc, #60]	; (1a514 <bt_conn_auth_cb_register+0x4c>)
   1a4d8:	6013      	str	r3, [r2, #0]
	return 0;
   1a4da:	2000      	movs	r0, #0
   1a4dc:	4770      	bx	lr
		bt_auth = NULL;
   1a4de:	4b0d      	ldr	r3, [pc, #52]	; (1a514 <bt_conn_auth_cb_register+0x4c>)
   1a4e0:	6018      	str	r0, [r3, #0]
		return 0;
   1a4e2:	4770      	bx	lr
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
   1a4e4:	6802      	ldr	r2, [r0, #0]
	if (!cb->cancel &&
   1a4e6:	b962      	cbnz	r2, 1a502 <bt_conn_auth_cb_register+0x3a>
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
   1a4e8:	6842      	ldr	r2, [r0, #4]
   1a4ea:	b96a      	cbnz	r2, 1a508 <bt_conn_auth_cb_register+0x40>
   1a4ec:	6882      	ldr	r2, [r0, #8]
   1a4ee:	b972      	cbnz	r2, 1a50e <bt_conn_auth_cb_register+0x46>
	     cb->pairing_confirm)) {
   1a4f0:	6942      	ldr	r2, [r0, #20]
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
   1a4f2:	2a00      	cmp	r2, #0
   1a4f4:	d0ef      	beq.n	1a4d6 <bt_conn_auth_cb_register+0xe>
		return -EINVAL;
   1a4f6:	f06f 0015 	mvn.w	r0, #21
}
   1a4fa:	4770      	bx	lr
		return -EALREADY;
   1a4fc:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1a500:	4770      	bx	lr
		return -EINVAL;
   1a502:	f06f 0015 	mvn.w	r0, #21
   1a506:	4770      	bx	lr
   1a508:	f06f 0015 	mvn.w	r0, #21
   1a50c:	4770      	bx	lr
   1a50e:	f06f 0015 	mvn.w	r0, #21
   1a512:	4770      	bx	lr
   1a514:	20002618 	.word	0x20002618

0001a518 <bt_conn_auth_info_cb_register>:
}
#endif

int bt_conn_auth_info_cb_register(struct bt_conn_auth_info_cb *cb)
{
	CHECKIF(cb == NULL) {
   1a518:	b180      	cbz	r0, 1a53c <bt_conn_auth_info_cb_register+0x24>
		return -EINVAL;
	}

	sys_slist_append(&bt_auth_info_cbs, &cb->node);
   1a51a:	f100 020c 	add.w	r2, r0, #12
	parent->next = child;
   1a51e:	2100      	movs	r1, #0
   1a520:	60c1      	str	r1, [r0, #12]
	return list->tail;
   1a522:	4b08      	ldr	r3, [pc, #32]	; (1a544 <bt_conn_auth_info_cb_register+0x2c>)
   1a524:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   1a526:	b123      	cbz	r3, 1a532 <bt_conn_auth_info_cb_register+0x1a>
	parent->next = child;
   1a528:	601a      	str	r2, [r3, #0]
	list->tail = node;
   1a52a:	4b06      	ldr	r3, [pc, #24]	; (1a544 <bt_conn_auth_info_cb_register+0x2c>)
   1a52c:	605a      	str	r2, [r3, #4]

	return 0;
   1a52e:	2000      	movs	r0, #0
}
   1a530:	4770      	bx	lr
	list->tail = node;
   1a532:	4b04      	ldr	r3, [pc, #16]	; (1a544 <bt_conn_auth_info_cb_register+0x2c>)
   1a534:	605a      	str	r2, [r3, #4]
	list->head = node;
   1a536:	601a      	str	r2, [r3, #0]
   1a538:	4608      	mov	r0, r1
}
   1a53a:	4770      	bx	lr
		return -EINVAL;
   1a53c:	f06f 0015 	mvn.w	r0, #21
}
   1a540:	4770      	bx	lr
   1a542:	bf00      	nop
   1a544:	2000261c 	.word	0x2000261c

0001a548 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   1a548:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
   1a54a:	2400      	movs	r4, #0
   1a54c:	e006      	b.n	1a55c <bt_conn_init+0x14>
		k_fifo_put(&free_tx, &conn_tx[i]);
   1a54e:	490a      	ldr	r1, [pc, #40]	; (1a578 <bt_conn_init+0x30>)
   1a550:	eb01 1104 	add.w	r1, r1, r4, lsl #4
   1a554:	4809      	ldr	r0, [pc, #36]	; (1a57c <bt_conn_init+0x34>)
   1a556:	f016 fa44 	bl	309e2 <k_queue_append>
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
   1a55a:	3401      	adds	r4, #1
   1a55c:	2c02      	cmp	r4, #2
   1a55e:	d9f6      	bls.n	1a54e <bt_conn_init+0x6>
	}

	bt_att_init();
   1a560:	f001 fa76 	bl	1ba50 <bt_att_init>

	err = bt_smp_init();
   1a564:	f005 fa64 	bl	1fa30 <bt_smp_init>
	if (err) {
   1a568:	4604      	mov	r4, r0
   1a56a:	b108      	cbz	r0, 1a570 <bt_conn_init+0x28>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   1a56c:	4620      	mov	r0, r4
   1a56e:	bd10      	pop	{r4, pc}
	bt_l2cap_init();
   1a570:	f012 fc31 	bl	2cdd6 <bt_l2cap_init>
	return 0;
   1a574:	e7fa      	b.n	1a56c <bt_conn_init+0x24>
   1a576:	bf00      	nop
   1a578:	20002628 	.word	0x20002628
   1a57c:	20000a0c 	.word	0x20000a0c

0001a580 <get_ident>:

static uint8_t get_ident(void)
{
	static uint8_t ident;

	ident++;
   1a580:	4a05      	ldr	r2, [pc, #20]	; (1a598 <get_ident+0x18>)
   1a582:	7813      	ldrb	r3, [r2, #0]
   1a584:	3301      	adds	r3, #1
   1a586:	b2db      	uxtb	r3, r3
   1a588:	7013      	strb	r3, [r2, #0]
	/* handle integer overflow (0 is not valid) */
	if (!ident) {
   1a58a:	b90b      	cbnz	r3, 1a590 <get_ident+0x10>
		ident++;
   1a58c:	3301      	adds	r3, #1
   1a58e:	7013      	strb	r3, [r2, #0]
	}

	return ident;
}
   1a590:	4b01      	ldr	r3, [pc, #4]	; (1a598 <get_ident+0x18>)
   1a592:	7818      	ldrb	r0, [r3, #0]
   1a594:	4770      	bx	lr
   1a596:	bf00      	nop
   1a598:	2000376a 	.word	0x2000376a

0001a59c <l2cap_accept>:
	(void)k_work_cancel_delayable(&le_chan->rtx_work);
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   1a59c:	b510      	push	{r4, lr}
   1a59e:	4602      	mov	r2, r0
		.recv = l2cap_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   1a5a0:	2000      	movs	r0, #0
   1a5a2:	b130      	cbz	r0, 1a5b2 <l2cap_accept+0x16>
		*chan = &l2cap->chan.chan;

		return 0;
	}

	BT_ERR("No available L2CAP context for conn %p", conn);
   1a5a4:	2145      	movs	r1, #69	; 0x45
   1a5a6:	480b      	ldr	r0, [pc, #44]	; (1a5d4 <l2cap_accept+0x38>)
   1a5a8:	f010 fd80 	bl	2b0ac <z_log_minimal_printk>

	return -ENOMEM;
   1a5ac:	f06f 000b 	mvn.w	r0, #11
}
   1a5b0:	bd10      	pop	{r4, pc}
		if (l2cap->chan.chan.conn) {
   1a5b2:	2394      	movs	r3, #148	; 0x94
   1a5b4:	fb00 f303 	mul.w	r3, r0, r3
   1a5b8:	4c07      	ldr	r4, [pc, #28]	; (1a5d8 <l2cap_accept+0x3c>)
   1a5ba:	58e3      	ldr	r3, [r4, r3]
   1a5bc:	b10b      	cbz	r3, 1a5c2 <l2cap_accept+0x26>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   1a5be:	3001      	adds	r0, #1
   1a5c0:	e7ef      	b.n	1a5a2 <l2cap_accept+0x6>
		l2cap->chan.chan.ops = &ops;
   1a5c2:	4b05      	ldr	r3, [pc, #20]	; (1a5d8 <l2cap_accept+0x3c>)
   1a5c4:	2294      	movs	r2, #148	; 0x94
   1a5c6:	fb02 3300 	mla	r3, r2, r0, r3
   1a5ca:	4a04      	ldr	r2, [pc, #16]	; (1a5dc <l2cap_accept+0x40>)
   1a5cc:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
   1a5ce:	600b      	str	r3, [r1, #0]
		return 0;
   1a5d0:	e7ee      	b.n	1a5b0 <l2cap_accept+0x14>
   1a5d2:	bf00      	nop
   1a5d4:	0003334c 	.word	0x0003334c
   1a5d8:	20002658 	.word	0x20002658
   1a5dc:	00033528 	.word	0x00033528

0001a5e0 <le_conn_param_rsp>:
{
   1a5e0:	b508      	push	{r3, lr}
	if (buf->len < sizeof(*rsp)) {
   1a5e2:	898b      	ldrh	r3, [r1, #12]
   1a5e4:	2b01      	cmp	r3, #1
   1a5e6:	d900      	bls.n	1a5ea <le_conn_param_rsp+0xa>
}
   1a5e8:	bd08      	pop	{r3, pc}
		BT_ERR("Too small LE conn param rsp");
   1a5ea:	2145      	movs	r1, #69	; 0x45
   1a5ec:	4801      	ldr	r0, [pc, #4]	; (1a5f4 <le_conn_param_rsp+0x14>)
   1a5ee:	f010 fd5d 	bl	2b0ac <z_log_minimal_printk>
		return;
   1a5f2:	e7f9      	b.n	1a5e8 <le_conn_param_rsp+0x8>
   1a5f4:	00033378 	.word	0x00033378

0001a5f8 <l2cap_chan_add>:
{
   1a5f8:	b510      	push	{r4, lr}
	if (!le_chan) {
   1a5fa:	b191      	cbz	r1, 1a622 <l2cap_chan_add+0x2a>
   1a5fc:	460b      	mov	r3, r1
	atomic_clear(chan->status);
   1a5fe:	3110      	adds	r1, #16
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1a600:	f04f 0c00 	mov.w	ip, #0
   1a604:	f3bf 8f5b 	dmb	ish
   1a608:	e851 ef00 	ldrex	lr, [r1]
   1a60c:	e841 c400 	strex	r4, ip, [r1]
   1a610:	2c00      	cmp	r4, #0
   1a612:	d1f9      	bne.n	1a608 <l2cap_chan_add+0x10>
   1a614:	f3bf 8f5b 	dmb	ish
	bt_l2cap_chan_add(conn, chan, destroy);
   1a618:	4619      	mov	r1, r3
   1a61a:	f012 faf0 	bl	2cbfe <bt_l2cap_chan_add>
	return true;
   1a61e:	2001      	movs	r0, #1
}
   1a620:	bd10      	pop	{r4, pc}
		BT_ERR("Unable to allocate L2CAP channel ID");
   1a622:	2145      	movs	r1, #69	; 0x45
   1a624:	4802      	ldr	r0, [pc, #8]	; (1a630 <l2cap_chan_add+0x38>)
   1a626:	f010 fd41 	bl	2b0ac <z_log_minimal_printk>
		return false;
   1a62a:	2000      	movs	r0, #0
   1a62c:	e7f8      	b.n	1a620 <l2cap_chan_add+0x28>
   1a62e:	bf00      	nop
   1a630:	0003339c 	.word	0x0003339c

0001a634 <bt_l2cap_connected>:
{
   1a634:	b570      	push	{r4, r5, r6, lr}
   1a636:	b082      	sub	sp, #8
   1a638:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1a63a:	4c21      	ldr	r4, [pc, #132]	; (1a6c0 <bt_l2cap_connected+0x8c>)
   1a63c:	e000      	b.n	1a640 <bt_l2cap_connected+0xc>
   1a63e:	340c      	adds	r4, #12
   1a640:	4b20      	ldr	r3, [pc, #128]	; (1a6c4 <bt_l2cap_connected+0x90>)
   1a642:	429c      	cmp	r4, r3
   1a644:	d82d      	bhi.n	1a6a2 <bt_l2cap_connected+0x6e>
   1a646:	4b1f      	ldr	r3, [pc, #124]	; (1a6c4 <bt_l2cap_connected+0x90>)
   1a648:	429c      	cmp	r4, r3
   1a64a:	d237      	bcs.n	1a6bc <bt_l2cap_connected+0x88>
		if (fchan->accept(conn, &chan) < 0) {
   1a64c:	6863      	ldr	r3, [r4, #4]
   1a64e:	a901      	add	r1, sp, #4
   1a650:	4628      	mov	r0, r5
   1a652:	4798      	blx	r3
   1a654:	2800      	cmp	r0, #0
   1a656:	dbf2      	blt.n	1a63e <bt_l2cap_connected+0xa>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   1a658:	9901      	ldr	r1, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   1a65a:	8823      	ldrh	r3, [r4, #0]
   1a65c:	828b      	strh	r3, [r1, #20]
		le_chan->tx.cid = fchan->cid;
   1a65e:	848b      	strh	r3, [r1, #36]	; 0x24
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   1a660:	68a2      	ldr	r2, [r4, #8]
   1a662:	4628      	mov	r0, r5
   1a664:	f7ff ffc8 	bl	1a5f8 <l2cap_chan_add>
   1a668:	b340      	cbz	r0, 1a6bc <bt_l2cap_connected+0x88>
		if (chan->ops->connected) {
   1a66a:	9801      	ldr	r0, [sp, #4]
   1a66c:	6843      	ldr	r3, [r0, #4]
   1a66e:	681b      	ldr	r3, [r3, #0]
   1a670:	b103      	cbz	r3, 1a674 <bt_l2cap_connected+0x40>
			chan->ops->connected(chan);
   1a672:	4798      	blx	r3
		atomic_set_bit(chan->status, BT_L2CAP_STATUS_OUT);
   1a674:	9b01      	ldr	r3, [sp, #4]
   1a676:	3310      	adds	r3, #16
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1a678:	f3bf 8f5b 	dmb	ish
   1a67c:	e853 2f00 	ldrex	r2, [r3]
   1a680:	f042 0201 	orr.w	r2, r2, #1
   1a684:	e843 2100 	strex	r1, r2, [r3]
   1a688:	2900      	cmp	r1, #0
   1a68a:	d1f7      	bne.n	1a67c <bt_l2cap_connected+0x48>
   1a68c:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   1a690:	9801      	ldr	r0, [sp, #4]
   1a692:	6843      	ldr	r3, [r0, #4]
   1a694:	699b      	ldr	r3, [r3, #24]
   1a696:	2b00      	cmp	r3, #0
   1a698:	d0d1      	beq.n	1a63e <bt_l2cap_connected+0xa>
			chan->ops->status(chan, chan->status);
   1a69a:	f100 0110 	add.w	r1, r0, #16
   1a69e:	4798      	blx	r3
   1a6a0:	e7cd      	b.n	1a63e <bt_l2cap_connected+0xa>
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1a6a2:	4e09      	ldr	r6, [pc, #36]	; (1a6c8 <bt_l2cap_connected+0x94>)
   1a6a4:	f240 1281 	movw	r2, #385	; 0x181
   1a6a8:	4631      	mov	r1, r6
   1a6aa:	4808      	ldr	r0, [pc, #32]	; (1a6cc <bt_l2cap_connected+0x98>)
   1a6ac:	f010 fcef 	bl	2b08e <assert_print>
   1a6b0:	f240 1181 	movw	r1, #385	; 0x181
   1a6b4:	4630      	mov	r0, r6
   1a6b6:	f010 fce3 	bl	2b080 <assert_post_action>
   1a6ba:	e7c4      	b.n	1a646 <bt_l2cap_connected+0x12>
}
   1a6bc:	b002      	add	sp, #8
   1a6be:	bd70      	pop	{r4, r5, r6, pc}
   1a6c0:	000312dc 	.word	0x000312dc
   1a6c4:	00031300 	.word	0x00031300
   1a6c8:	000333c8 	.word	0x000333c8
   1a6cc:	000318f8 	.word	0x000318f8

0001a6d0 <l2cap_create_le_sig_pdu>:
{
   1a6d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a6d2:	460c      	mov	r4, r1
   1a6d4:	4616      	mov	r6, r2
   1a6d6:	461d      	mov	r5, r3
	buf = bt_l2cap_create_pdu_timeout(pool, 0, L2CAP_RTX_TIMEOUT);
   1a6d8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1a6dc:	2300      	movs	r3, #0
   1a6de:	2100      	movs	r1, #0
   1a6e0:	4608      	mov	r0, r1
   1a6e2:	f012 fae2 	bl	2ccaa <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   1a6e6:	4607      	mov	r7, r0
   1a6e8:	b140      	cbz	r0, 1a6fc <l2cap_create_le_sig_pdu+0x2c>
	return net_buf_simple_add(&buf->b, len);
   1a6ea:	2104      	movs	r1, #4
   1a6ec:	3008      	adds	r0, #8
   1a6ee:	f005 ff61 	bl	205b4 <net_buf_simple_add>
	hdr->code = code;
   1a6f2:	7004      	strb	r4, [r0, #0]
	hdr->ident = ident;
   1a6f4:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   1a6f6:	8045      	strh	r5, [r0, #2]
}
   1a6f8:	4638      	mov	r0, r7
   1a6fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
   1a6fc:	4622      	mov	r2, r4
   1a6fe:	2145      	movs	r1, #69	; 0x45
   1a700:	4801      	ldr	r0, [pc, #4]	; (1a708 <l2cap_create_le_sig_pdu+0x38>)
   1a702:	f010 fcd3 	bl	2b0ac <z_log_minimal_printk>
		return NULL;
   1a706:	e7f7      	b.n	1a6f8 <l2cap_create_le_sig_pdu+0x28>
   1a708:	000333fc 	.word	0x000333fc

0001a70c <l2cap_recv>:
{
   1a70c:	b570      	push	{r4, r5, r6, lr}
   1a70e:	b082      	sub	sp, #8
	if (buf->len < sizeof(*hdr)) {
   1a710:	898b      	ldrh	r3, [r1, #12]
   1a712:	2b03      	cmp	r3, #3
   1a714:	d917      	bls.n	1a746 <l2cap_recv+0x3a>
   1a716:	4606      	mov	r6, r0
   1a718:	460c      	mov	r4, r1
	return net_buf_simple_pull_mem(&buf->b, len);
   1a71a:	2104      	movs	r1, #4
   1a71c:	f104 0008 	add.w	r0, r4, #8
   1a720:	f005 ff08 	bl	20534 <net_buf_simple_pull_mem>
   1a724:	4605      	mov	r5, r0
	len = sys_le16_to_cpu(hdr->len);
   1a726:	8843      	ldrh	r3, [r0, #2]
	if (buf->len != len) {
   1a728:	89a2      	ldrh	r2, [r4, #12]
   1a72a:	429a      	cmp	r2, r3
   1a72c:	d112      	bne.n	1a754 <l2cap_recv+0x48>
	if (!hdr->ident) {
   1a72e:	7843      	ldrb	r3, [r0, #1]
   1a730:	b1ab      	cbz	r3, 1a75e <l2cap_recv+0x52>
	switch (hdr->code) {
   1a732:	7802      	ldrb	r2, [r0, #0]
   1a734:	2a01      	cmp	r2, #1
   1a736:	d00a      	beq.n	1a74e <l2cap_recv+0x42>
   1a738:	2a13      	cmp	r2, #19
   1a73a:	d115      	bne.n	1a768 <l2cap_recv+0x5c>
		le_conn_param_rsp(l2cap, buf);
   1a73c:	4621      	mov	r1, r4
   1a73e:	4630      	mov	r0, r6
   1a740:	f7ff ff4e 	bl	1a5e0 <le_conn_param_rsp>
		break;
   1a744:	e003      	b.n	1a74e <l2cap_recv+0x42>
		BT_ERR("Too small L2CAP signaling PDU");
   1a746:	2145      	movs	r1, #69	; 0x45
   1a748:	480d      	ldr	r0, [pc, #52]	; (1a780 <l2cap_recv+0x74>)
   1a74a:	f010 fcaf 	bl	2b0ac <z_log_minimal_printk>
}
   1a74e:	2000      	movs	r0, #0
   1a750:	b002      	add	sp, #8
   1a752:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   1a754:	2145      	movs	r1, #69	; 0x45
   1a756:	480b      	ldr	r0, [pc, #44]	; (1a784 <l2cap_recv+0x78>)
   1a758:	f010 fca8 	bl	2b0ac <z_log_minimal_printk>
		return 0;
   1a75c:	e7f7      	b.n	1a74e <l2cap_recv+0x42>
		BT_ERR("Invalid ident value in L2CAP PDU");
   1a75e:	2145      	movs	r1, #69	; 0x45
   1a760:	4809      	ldr	r0, [pc, #36]	; (1a788 <l2cap_recv+0x7c>)
   1a762:	f010 fca3 	bl	2b0ac <z_log_minimal_printk>
		return 0;
   1a766:	e7f2      	b.n	1a74e <l2cap_recv+0x42>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
   1a768:	2157      	movs	r1, #87	; 0x57
   1a76a:	4808      	ldr	r0, [pc, #32]	; (1a78c <l2cap_recv+0x80>)
   1a76c:	f010 fc9e 	bl	2b0ac <z_log_minimal_printk>
		l2cap_send_reject(chan->conn, hdr->ident,
   1a770:	7869      	ldrb	r1, [r5, #1]
   1a772:	2200      	movs	r2, #0
   1a774:	9200      	str	r2, [sp, #0]
   1a776:	4613      	mov	r3, r2
   1a778:	6830      	ldr	r0, [r6, #0]
   1a77a:	f012 fab0 	bl	2ccde <l2cap_send_reject>
		break;
   1a77e:	e7e6      	b.n	1a74e <l2cap_recv+0x42>
   1a780:	0003342c 	.word	0x0003342c
   1a784:	00033450 	.word	0x00033450
   1a788:	00033478 	.word	0x00033478
   1a78c:	000334a0 	.word	0x000334a0

0001a790 <bt_l2cap_recv>:
{
   1a790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a792:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1a794:	898b      	ldrh	r3, [r1, #12]
   1a796:	2b03      	cmp	r3, #3
   1a798:	d911      	bls.n	1a7be <bt_l2cap_recv+0x2e>
   1a79a:	4605      	mov	r5, r0
   1a79c:	4616      	mov	r6, r2
   1a79e:	2104      	movs	r1, #4
   1a7a0:	f104 0008 	add.w	r0, r4, #8
   1a7a4:	f005 fec6 	bl	20534 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   1a7a8:	8847      	ldrh	r7, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   1a7aa:	4639      	mov	r1, r7
   1a7ac:	4628      	mov	r0, r5
   1a7ae:	f012 fad4 	bl	2cd5a <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1a7b2:	b160      	cbz	r0, 1a7ce <bt_l2cap_recv+0x3e>
	l2cap_chan_recv(chan, buf, complete);
   1a7b4:	4632      	mov	r2, r6
   1a7b6:	4621      	mov	r1, r4
   1a7b8:	f012 fa05 	bl	2cbc6 <l2cap_chan_recv>
}
   1a7bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		BT_ERR("Too small L2CAP PDU received");
   1a7be:	2145      	movs	r1, #69	; 0x45
   1a7c0:	4807      	ldr	r0, [pc, #28]	; (1a7e0 <bt_l2cap_recv+0x50>)
   1a7c2:	f010 fc73 	bl	2b0ac <z_log_minimal_printk>
		net_buf_unref(buf);
   1a7c6:	4620      	mov	r0, r4
   1a7c8:	f005 fddc 	bl	20384 <net_buf_unref>
		return;
   1a7cc:	e7f6      	b.n	1a7bc <bt_l2cap_recv+0x2c>
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
   1a7ce:	463a      	mov	r2, r7
   1a7d0:	2157      	movs	r1, #87	; 0x57
   1a7d2:	4804      	ldr	r0, [pc, #16]	; (1a7e4 <bt_l2cap_recv+0x54>)
   1a7d4:	f010 fc6a 	bl	2b0ac <z_log_minimal_printk>
		net_buf_unref(buf);
   1a7d8:	4620      	mov	r0, r4
   1a7da:	f005 fdd3 	bl	20384 <net_buf_unref>
		return;
   1a7de:	e7ed      	b.n	1a7bc <bt_l2cap_recv+0x2c>
   1a7e0:	000334c4 	.word	0x000334c4
   1a7e4:	000334e8 	.word	0x000334e8

0001a7e8 <tx_meta_data_alloc>:

static struct bt_att_tx_meta_data tx_meta_data[CONFIG_BT_CONN_TX_MAX];
K_FIFO_DEFINE(free_att_tx_meta_data);

static struct bt_att_tx_meta_data *tx_meta_data_alloc(k_timeout_t timeout)
{
   1a7e8:	b508      	push	{r3, lr}
   1a7ea:	4602      	mov	r2, r0
   1a7ec:	460b      	mov	r3, r1
	return z_impl_k_queue_get(queue, timeout);
   1a7ee:	4802      	ldr	r0, [pc, #8]	; (1a7f8 <tx_meta_data_alloc+0x10>)
   1a7f0:	f00b ff24 	bl	2663c <z_impl_k_queue_get>
	return k_fifo_get(&free_att_tx_meta_data, timeout);
}
   1a7f4:	bd08      	pop	{r3, pc}
   1a7f6:	bf00      	nop
   1a7f8:	200009f0 	.word	0x200009f0

0001a7fc <att_cb>:

	chan_unknown(conn, user_data, err);
}

static bt_conn_tx_cb_t att_cb(const struct net_buf *buf)
{
   1a7fc:	b510      	push	{r4, lr}
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   1a7fe:	6883      	ldr	r3, [r0, #8]
   1a800:	7818      	ldrb	r0, [r3, #0]
   1a802:	f012 fb36 	bl	2ce72 <att_op_get_type>

	switch (op_type) {
   1a806:	2805      	cmp	r0, #5
   1a808:	d80a      	bhi.n	1a820 <att_cb+0x24>
   1a80a:	e8df f000 	tbb	[pc, r0]
   1a80e:	0507      	.short	0x0507
   1a810:	05170703 	.word	0x05170703
   1a814:	480a      	ldr	r0, [pc, #40]	; (1a840 <att_cb+0x44>)
   1a816:	e000      	b.n	1a81a <att_cb+0x1e>
		return att_rsp_sent;
	case ATT_CONFIRMATION:
		return att_cfm_sent;
	case ATT_REQUEST:
	case ATT_INDICATION:
		return att_req_sent;
   1a818:	480a      	ldr	r0, [pc, #40]	; (1a844 <att_cb+0x48>)
	default:
		__ASSERT(false, "Unknown op type 0x%02X", op_type);
	}

	return att_unknown;
}
   1a81a:	bd10      	pop	{r4, pc}
		return att_tx_complete;
   1a81c:	480a      	ldr	r0, [pc, #40]	; (1a848 <att_cb+0x4c>)
   1a81e:	e7fc      	b.n	1a81a <att_cb+0x1e>
		__ASSERT(false, "Unknown op type 0x%02X", op_type);
   1a820:	4c0a      	ldr	r4, [pc, #40]	; (1a84c <att_cb+0x50>)
   1a822:	f240 2256 	movw	r2, #598	; 0x256
   1a826:	4621      	mov	r1, r4
   1a828:	4809      	ldr	r0, [pc, #36]	; (1a850 <att_cb+0x54>)
   1a82a:	f010 fc30 	bl	2b08e <assert_print>
   1a82e:	f240 2156 	movw	r1, #598	; 0x256
   1a832:	4620      	mov	r0, r4
   1a834:	f010 fc24 	bl	2b080 <assert_post_action>
	return att_unknown;
   1a838:	4806      	ldr	r0, [pc, #24]	; (1a854 <att_cb+0x58>)
   1a83a:	e7ee      	b.n	1a81a <att_cb+0x1e>
		return att_cfm_sent;
   1a83c:	4806      	ldr	r0, [pc, #24]	; (1a858 <att_cb+0x5c>)
   1a83e:	e7ec      	b.n	1a81a <att_cb+0x1e>
   1a840:	0002d669 	.word	0x0002d669
   1a844:	0002d631 	.word	0x0002d631
   1a848:	0002d615 	.word	0x0002d615
   1a84c:	0003354c 	.word	0x0003354c
   1a850:	000318f8 	.word	0x000318f8
   1a854:	0002d5f9 	.word	0x0002d5f9
   1a858:	0002d64d 	.word	0x0002d64d

0001a85c <att_chan_new>:
	att_chan_mtu_updated(att_chan);
}
#endif /* CONFIG_BT_EATT */

static struct bt_att_chan *att_chan_new(struct bt_att *att, atomic_val_t flags)
{
   1a85c:	b570      	push	{r4, r5, r6, lr}
   1a85e:	b082      	sub	sp, #8
   1a860:	4605      	mov	r5, r0
   1a862:	460e      	mov	r6, r1
	return list->head;
   1a864:	6a83      	ldr	r3, [r0, #40]	; 0x28
		.reconfigured = bt_att_reconfigured,
	#endif /* CONFIG_BT_EATT */
	};
	struct bt_att_chan *chan;

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1a866:	b103      	cbz	r3, 1a86a <att_chan_new+0xe>
   1a868:	3bf0      	subs	r3, #240	; 0xf0
   1a86a:	9301      	str	r3, [sp, #4]
	int quota = 0;
   1a86c:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1a86e:	e008      	b.n	1a882 <att_chan_new+0x26>
		if (chan->att == att) {
			quota++;
   1a870:	3201      	adds	r2, #1
   1a872:	e00b      	b.n	1a88c <att_chan_new+0x30>
		}

		if (quota == ATT_CHAN_MAX) {
			BT_WARN("Maximum number of channels reached: %d", quota);
   1a874:	2157      	movs	r1, #87	; 0x57
   1a876:	4822      	ldr	r0, [pc, #136]	; (1a900 <att_chan_new+0xa4>)
   1a878:	f010 fc18 	bl	2b0ac <z_log_minimal_printk>
			return NULL;
   1a87c:	2400      	movs	r4, #0
   1a87e:	e035      	b.n	1a8ec <att_chan_new+0x90>
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1a880:	9301      	str	r3, [sp, #4]
   1a882:	9c01      	ldr	r4, [sp, #4]
   1a884:	b16c      	cbz	r4, 1a8a2 <att_chan_new+0x46>
		if (chan->att == att) {
   1a886:	6823      	ldr	r3, [r4, #0]
   1a888:	42ab      	cmp	r3, r5
   1a88a:	d0f1      	beq.n	1a870 <att_chan_new+0x14>
		if (quota == ATT_CHAN_MAX) {
   1a88c:	2a01      	cmp	r2, #1
   1a88e:	d0f1      	beq.n	1a874 <att_chan_new+0x18>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1a890:	f114 03f0 	adds.w	r3, r4, #240	; 0xf0
   1a894:	d0f4      	beq.n	1a880 <att_chan_new+0x24>
	return node->next;
   1a896:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1a89a:	2b00      	cmp	r3, #0
   1a89c:	d0f0      	beq.n	1a880 <att_chan_new+0x24>
   1a89e:	3bf0      	subs	r3, #240	; 0xf0
   1a8a0:	e7ee      	b.n	1a880 <att_chan_new+0x24>
		}
	}

	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1a8a2:	2200      	movs	r2, #0
   1a8a4:	2300      	movs	r3, #0
   1a8a6:	a901      	add	r1, sp, #4
   1a8a8:	4816      	ldr	r0, [pc, #88]	; (1a904 <att_chan_new+0xa8>)
   1a8aa:	f00b fa3b 	bl	25d24 <k_mem_slab_alloc>
   1a8ae:	bb00      	cbnz	r0, 1a8f2 <att_chan_new+0x96>
   1a8b0:	22f8      	movs	r2, #248	; 0xf8
   1a8b2:	2100      	movs	r1, #0
   1a8b4:	9801      	ldr	r0, [sp, #4]
   1a8b6:	f016 fa50 	bl	30d5a <memset>
		BT_WARN("No available ATT channel for conn %p", att->conn);
		return NULL;
	}

	(void)memset(chan, 0, sizeof(*chan));
	chan->chan.chan.ops = &ops;
   1a8ba:	9801      	ldr	r0, [sp, #4]
   1a8bc:	4b12      	ldr	r3, [pc, #72]	; (1a908 <att_chan_new+0xac>)
   1a8be:	6083      	str	r3, [r0, #8]
	k_fifo_init(&chan->tx_queue);
   1a8c0:	30a0      	adds	r0, #160	; 0xa0
	z_impl_k_queue_init(queue);
   1a8c2:	f016 f881 	bl	309c8 <z_impl_k_queue_init>
	atomic_set(chan->flags, flags);
   1a8c6:	9b01      	ldr	r3, [sp, #4]
   1a8c8:	3398      	adds	r3, #152	; 0x98
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1a8ca:	f3bf 8f5b 	dmb	ish
   1a8ce:	e853 2f00 	ldrex	r2, [r3]
   1a8d2:	e843 6100 	strex	r1, r6, [r3]
   1a8d6:	2900      	cmp	r1, #0
   1a8d8:	d1f9      	bne.n	1a8ce <att_chan_new+0x72>
   1a8da:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   1a8de:	9b01      	ldr	r3, [sp, #4]
   1a8e0:	601d      	str	r5, [r3, #0]
	att_chan_attach(att, chan);
   1a8e2:	9901      	ldr	r1, [sp, #4]
   1a8e4:	4628      	mov	r0, r5
   1a8e6:	f012 fb45 	bl	2cf74 <att_chan_attach>

	return chan;
   1a8ea:	9c01      	ldr	r4, [sp, #4]
}
   1a8ec:	4620      	mov	r0, r4
   1a8ee:	b002      	add	sp, #8
   1a8f0:	bd70      	pop	{r4, r5, r6, pc}
		BT_WARN("No available ATT channel for conn %p", att->conn);
   1a8f2:	682a      	ldr	r2, [r5, #0]
   1a8f4:	2157      	movs	r1, #87	; 0x57
   1a8f6:	4805      	ldr	r0, [pc, #20]	; (1a90c <att_chan_new+0xb0>)
   1a8f8:	f010 fbd8 	bl	2b0ac <z_log_minimal_printk>
		return NULL;
   1a8fc:	e7f6      	b.n	1a8ec <att_chan_new+0x90>
   1a8fe:	bf00      	nop
   1a900:	0003357c 	.word	0x0003357c
   1a904:	2000095c 	.word	0x2000095c
   1a908:	200006e0 	.word	0x200006e0
   1a90c:	000335a8 	.word	0x000335a8

0001a910 <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   1a910:	b570      	push	{r4, r5, r6, lr}
   1a912:	b082      	sub	sp, #8
   1a914:	4604      	mov	r4, r0
   1a916:	460d      	mov	r5, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   1a918:	2200      	movs	r2, #0
   1a91a:	2300      	movs	r3, #0
   1a91c:	a901      	add	r1, sp, #4
   1a91e:	4815      	ldr	r0, [pc, #84]	; (1a974 <bt_att_accept+0x64>)
   1a920:	f00b fa00 	bl	25d24 <k_mem_slab_alloc>
   1a924:	b9d0      	cbnz	r0, 1a95c <bt_att_accept+0x4c>
   1a926:	4606      	mov	r6, r0
	return z_impl_z_current_get();
   1a928:	f00d fe5e 	bl	285e8 <z_impl_z_current_get>
		BT_ERR("No available ATT context for conn %p", conn);
		return -ENOMEM;
	}

	att_handle_rsp_thread = k_current_get();
   1a92c:	4b12      	ldr	r3, [pc, #72]	; (1a978 <bt_att_accept+0x68>)
   1a92e:	6018      	str	r0, [r3, #0]
   1a930:	2230      	movs	r2, #48	; 0x30
   1a932:	2100      	movs	r1, #0
   1a934:	9801      	ldr	r0, [sp, #4]
   1a936:	f016 fa10 	bl	30d5a <memset>

	(void)memset(att, 0, sizeof(*att));
	att->conn = conn;
   1a93a:	9b01      	ldr	r3, [sp, #4]
   1a93c:	601c      	str	r4, [r3, #0]
	sys_slist_init(&att->reqs);
   1a93e:	9801      	ldr	r0, [sp, #4]
	list->head = NULL;
   1a940:	2100      	movs	r1, #0
   1a942:	6041      	str	r1, [r0, #4]
	list->tail = NULL;
   1a944:	6081      	str	r1, [r0, #8]
	list->head = NULL;
   1a946:	6281      	str	r1, [r0, #40]	; 0x28
	list->tail = NULL;
   1a948:	62c1      	str	r1, [r0, #44]	; 0x2c
#if defined(CONFIG_BT_EATT)
	k_work_init_delayable(&att->eatt.connection_work,
			      att_enhanced_connection_work_handler);
#endif /* CONFIG_BT_EATT */

	chan = att_chan_new(att, 0);
   1a94a:	f7ff ff87 	bl	1a85c <att_chan_new>
	if (!chan) {
   1a94e:	4603      	mov	r3, r0
   1a950:	b160      	cbz	r0, 1a96c <bt_att_accept+0x5c>
		return -ENOMEM;
	}

	*ch = &chan->chan.chan;
   1a952:	3304      	adds	r3, #4
   1a954:	602b      	str	r3, [r5, #0]

	return 0;
}
   1a956:	4630      	mov	r0, r6
   1a958:	b002      	add	sp, #8
   1a95a:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("No available ATT context for conn %p", conn);
   1a95c:	4622      	mov	r2, r4
   1a95e:	2145      	movs	r1, #69	; 0x45
   1a960:	4806      	ldr	r0, [pc, #24]	; (1a97c <bt_att_accept+0x6c>)
   1a962:	f010 fba3 	bl	2b0ac <z_log_minimal_printk>
		return -ENOMEM;
   1a966:	f06f 060b 	mvn.w	r6, #11
   1a96a:	e7f4      	b.n	1a956 <bt_att_accept+0x46>
		return -ENOMEM;
   1a96c:	f06f 060b 	mvn.w	r6, #11
   1a970:	e7f1      	b.n	1a956 <bt_att_accept+0x46>
   1a972:	bf00      	nop
   1a974:	2000093c 	.word	0x2000093c
   1a978:	200026ec 	.word	0x200026ec
   1a97c:	000335d4 	.word	0x000335d4

0001a980 <bt_att_released>:
{
   1a980:	b500      	push	{lr}
   1a982:	b083      	sub	sp, #12
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1a984:	3804      	subs	r0, #4
   1a986:	9001      	str	r0, [sp, #4]
	k_mem_slab_free(&chan_slab, (void **)&chan);
   1a988:	a901      	add	r1, sp, #4
   1a98a:	4803      	ldr	r0, [pc, #12]	; (1a998 <bt_att_released+0x18>)
   1a98c:	f00b fa2e 	bl	25dec <k_mem_slab_free>
}
   1a990:	b003      	add	sp, #12
   1a992:	f85d fb04 	ldr.w	pc, [sp], #4
   1a996:	bf00      	nop
   1a998:	2000095c 	.word	0x2000095c

0001a99c <read_group_cb>:
{
   1a99c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a99e:	b085      	sub	sp, #20
   1a9a0:	4605      	mov	r5, r0
   1a9a2:	460e      	mov	r6, r1
   1a9a4:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   1a9a6:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1a9a8:	2300      	movs	r3, #0
   1a9aa:	f88d 3008 	strb.w	r3, [sp, #8]
   1a9ae:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1a9b2:	f8ad 300a 	strh.w	r3, [sp, #10]
   1a9b6:	a902      	add	r1, sp, #8
   1a9b8:	6800      	ldr	r0, [r0, #0]
   1a9ba:	f011 fa7c 	bl	2beb6 <bt_uuid_cmp>
   1a9be:	b158      	cbz	r0, 1a9d8 <read_group_cb+0x3c>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1a9c0:	2300      	movs	r3, #0
   1a9c2:	f88d 300c 	strb.w	r3, [sp, #12]
   1a9c6:	f642 0301 	movw	r3, #10241	; 0x2801
   1a9ca:	f8ad 300e 	strh.w	r3, [sp, #14]
   1a9ce:	a903      	add	r1, sp, #12
   1a9d0:	6828      	ldr	r0, [r5, #0]
   1a9d2:	f011 fa70 	bl	2beb6 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1a9d6:	bb28      	cbnz	r0, 1aa24 <read_group_cb+0x88>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1a9d8:	6861      	ldr	r1, [r4, #4]
   1a9da:	6828      	ldr	r0, [r5, #0]
   1a9dc:	f011 fa6b 	bl	2beb6 <bt_uuid_cmp>
   1a9e0:	bb40      	cbnz	r0, 1aa34 <read_group_cb+0x98>
	if (data->rsp->len &&
   1a9e2:	68e3      	ldr	r3, [r4, #12]
   1a9e4:	781a      	ldrb	r2, [r3, #0]
   1a9e6:	b12a      	cbz	r2, 1a9f4 <read_group_cb+0x58>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   1a9e8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   1a9ea:	68a1      	ldr	r1, [r4, #8]
   1a9ec:	8989      	ldrh	r1, [r1, #12]
   1a9ee:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   1a9f0:	4293      	cmp	r3, r2
   1a9f2:	db24      	blt.n	1aa3e <read_group_cb+0xa2>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   1a9f4:	68a0      	ldr	r0, [r4, #8]
	return net_buf_simple_add(&buf->b, len);
   1a9f6:	2104      	movs	r1, #4
   1a9f8:	3008      	adds	r0, #8
   1a9fa:	f005 fddb 	bl	205b4 <net_buf_simple_add>
   1a9fe:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1aa00:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1aa02:	6923      	ldr	r3, [r4, #16]
   1aa04:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1aa06:	9401      	str	r4, [sp, #4]
   1aa08:	4b10      	ldr	r3, [pc, #64]	; (1aa4c <read_group_cb+0xb0>)
   1aa0a:	9300      	str	r3, [sp, #0]
   1aa0c:	2300      	movs	r3, #0
   1aa0e:	68a2      	ldr	r2, [r4, #8]
   1aa10:	4629      	mov	r1, r5
   1aa12:	4638      	mov	r0, r7
   1aa14:	f012 faf8 	bl	2d008 <att_chan_read>
	if (read < 0) {
   1aa18:	2800      	cmp	r0, #0
   1aa1a:	db12      	blt.n	1aa42 <read_group_cb+0xa6>
	if (!data->group) {
   1aa1c:	6923      	ldr	r3, [r4, #16]
   1aa1e:	b193      	cbz	r3, 1aa46 <read_group_cb+0xaa>
	return BT_GATT_ITER_CONTINUE;
   1aa20:	2001      	movs	r0, #1
   1aa22:	e00a      	b.n	1aa3a <read_group_cb+0x9e>
		if (data->group &&
   1aa24:	6923      	ldr	r3, [r4, #16]
   1aa26:	b11b      	cbz	r3, 1aa30 <read_group_cb+0x94>
		    handle > sys_le16_to_cpu(data->group->end_handle)) {
   1aa28:	885a      	ldrh	r2, [r3, #2]
		if (data->group &&
   1aa2a:	42b2      	cmp	r2, r6
   1aa2c:	d200      	bcs.n	1aa30 <read_group_cb+0x94>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1aa2e:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   1aa30:	2001      	movs	r0, #1
   1aa32:	e002      	b.n	1aa3a <read_group_cb+0x9e>
		data->group = NULL;
   1aa34:	2300      	movs	r3, #0
   1aa36:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   1aa38:	2001      	movs	r0, #1
}
   1aa3a:	b005      	add	sp, #20
   1aa3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ITER_STOP;
   1aa3e:	2000      	movs	r0, #0
   1aa40:	e7fb      	b.n	1aa3a <read_group_cb+0x9e>
		return BT_GATT_ITER_STOP;
   1aa42:	2000      	movs	r0, #0
   1aa44:	e7f9      	b.n	1aa3a <read_group_cb+0x9e>
		return BT_GATT_ITER_STOP;
   1aa46:	2000      	movs	r0, #0
   1aa48:	e7f7      	b.n	1aa3a <read_group_cb+0x9e>
   1aa4a:	bf00      	nop
   1aa4c:	0002ce45 	.word	0x0002ce45

0001aa50 <read_type_cb>:
{
   1aa50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1aa54:	b083      	sub	sp, #12
   1aa56:	4606      	mov	r6, r0
   1aa58:	4688      	mov	r8, r1
   1aa5a:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   1aa5c:	6817      	ldr	r7, [r2, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   1aa5e:	687d      	ldr	r5, [r7, #4]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1aa60:	6851      	ldr	r1, [r2, #4]
   1aa62:	6800      	ldr	r0, [r0, #0]
   1aa64:	f011 fa27 	bl	2beb6 <bt_uuid_cmp>
   1aa68:	b120      	cbz	r0, 1aa74 <read_type_cb+0x24>
		return BT_GATT_ITER_CONTINUE;
   1aa6a:	2501      	movs	r5, #1
}
   1aa6c:	4628      	mov	r0, r5
   1aa6e:	b003      	add	sp, #12
   1aa70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1aa74:	2295      	movs	r2, #149	; 0x95
   1aa76:	4631      	mov	r1, r6
   1aa78:	4628      	mov	r0, r5
   1aa7a:	f013 fb2a 	bl	2e0d2 <bt_gatt_check_perm>
   1aa7e:	4605      	mov	r5, r0
   1aa80:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1aa82:	b130      	cbz	r0, 1aa92 <read_type_cb+0x42>
		if (data->rsp->len) {
   1aa84:	68e3      	ldr	r3, [r4, #12]
   1aa86:	781b      	ldrb	r3, [r3, #0]
   1aa88:	b10b      	cbz	r3, 1aa8e <read_type_cb+0x3e>
			data->err = 0x00;
   1aa8a:	2300      	movs	r3, #0
   1aa8c:	7523      	strb	r3, [r4, #20]
		return BT_GATT_ITER_STOP;
   1aa8e:	2500      	movs	r5, #0
   1aa90:	e7ec      	b.n	1aa6c <read_type_cb+0x1c>
	data->err = 0x00;
   1aa92:	f04f 0900 	mov.w	r9, #0
   1aa96:	f884 9014 	strb.w	r9, [r4, #20]
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1aa9a:	68a0      	ldr	r0, [r4, #8]
   1aa9c:	f005 fcc4 	bl	20428 <net_buf_frag_last>
   1aaa0:	2102      	movs	r1, #2
   1aaa2:	3008      	adds	r0, #8
   1aaa4:	f005 fd86 	bl	205b4 <net_buf_simple_add>
   1aaa8:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   1aaaa:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1aaae:	9401      	str	r4, [sp, #4]
   1aab0:	4b10      	ldr	r3, [pc, #64]	; (1aaf4 <read_type_cb+0xa4>)
   1aab2:	9300      	str	r3, [sp, #0]
   1aab4:	464b      	mov	r3, r9
   1aab6:	68a2      	ldr	r2, [r4, #8]
   1aab8:	4631      	mov	r1, r6
   1aaba:	4638      	mov	r0, r7
   1aabc:	f012 faa4 	bl	2d008 <att_chan_read>
	if (read < 0) {
   1aac0:	2800      	cmp	r0, #0
   1aac2:	db06      	blt.n	1aad2 <read_type_cb+0x82>
	if (!data->item) {
   1aac4:	6923      	ldr	r3, [r4, #16]
   1aac6:	2b00      	cmp	r3, #0
   1aac8:	d0d0      	beq.n	1aa6c <read_type_cb+0x1c>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   1aaca:	8d7d      	ldrh	r5, [r7, #42]	; 0x2a
   1aacc:	68a3      	ldr	r3, [r4, #8]
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
	size_t bytes = 0;
   1aace:	2200      	movs	r2, #0

	while (buf) {
   1aad0:	e006      	b.n	1aae0 <read_type_cb+0x90>
		data->err = err_to_att(read);
   1aad2:	f012 f99b 	bl	2ce0c <err_to_att>
   1aad6:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   1aad8:	e7c8      	b.n	1aa6c <read_type_cb+0x1c>
		bytes += buf->len;
   1aada:	8999      	ldrh	r1, [r3, #12]
   1aadc:	440a      	add	r2, r1
		buf = buf->frags;
   1aade:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1aae0:	2b00      	cmp	r3, #0
   1aae2:	d1fa      	bne.n	1aada <read_type_cb+0x8a>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   1aae4:	1aaa      	subs	r2, r5, r2
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1aae6:	68e3      	ldr	r3, [r4, #12]
   1aae8:	781d      	ldrb	r5, [r3, #0]
   1aaea:	42aa      	cmp	r2, r5
   1aaec:	bf94      	ite	ls
   1aaee:	2500      	movls	r5, #0
   1aaf0:	2501      	movhi	r5, #1
   1aaf2:	e7bb      	b.n	1aa6c <read_type_cb+0x1c>
   1aaf4:	0002ce1d 	.word	0x0002ce1d

0001aaf8 <find_type_cb>:
{
   1aaf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aafc:	b093      	sub	sp, #76	; 0x4c
   1aafe:	4605      	mov	r5, r0
   1ab00:	460e      	mov	r6, r1
   1ab02:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   1ab04:	6817      	ldr	r7, [r2, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   1ab06:	f8d7 8004 	ldr.w	r8, [r7, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1ab0a:	2300      	movs	r3, #0
   1ab0c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   1ab10:	f642 0301 	movw	r3, #10241	; 0x2801
   1ab14:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   1ab18:	a910      	add	r1, sp, #64	; 0x40
   1ab1a:	6800      	ldr	r0, [r0, #0]
   1ab1c:	f011 f9cb 	bl	2beb6 <bt_uuid_cmp>
   1ab20:	b928      	cbnz	r0, 1ab2e <find_type_cb+0x36>
	data->group = NULL;
   1ab22:	2300      	movs	r3, #0
   1ab24:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
   1ab26:	2001      	movs	r0, #1
}
   1ab28:	b013      	add	sp, #76	; 0x4c
   1ab2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   1ab2e:	2300      	movs	r3, #0
   1ab30:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
   1ab34:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1ab38:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
   1ab3c:	a911      	add	r1, sp, #68	; 0x44
   1ab3e:	6828      	ldr	r0, [r5, #0]
   1ab40:	f011 f9b9 	bl	2beb6 <bt_uuid_cmp>
   1ab44:	b928      	cbnz	r0, 1ab52 <find_type_cb+0x5a>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   1ab46:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
   1ab48:	6860      	ldr	r0, [r4, #4]
   1ab4a:	4603      	mov	r3, r0
	size_t bytes = 0;
   1ab4c:	f04f 0c00 	mov.w	ip, #0
	while (buf) {
   1ab50:	e00a      	b.n	1ab68 <find_type_cb+0x70>
		if (data->group &&
   1ab52:	68a3      	ldr	r3, [r4, #8]
   1ab54:	b11b      	cbz	r3, 1ab5e <find_type_cb+0x66>
		    handle > sys_le16_to_cpu(data->group->end_handle)) {
   1ab56:	885a      	ldrh	r2, [r3, #2]
		if (data->group &&
   1ab58:	42b2      	cmp	r2, r6
   1ab5a:	d200      	bcs.n	1ab5e <find_type_cb+0x66>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1ab5c:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   1ab5e:	2001      	movs	r0, #1
   1ab60:	e7e2      	b.n	1ab28 <find_type_cb+0x30>
		bytes += buf->len;
   1ab62:	899a      	ldrh	r2, [r3, #12]
   1ab64:	4494      	add	ip, r2
		buf = buf->frags;
   1ab66:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1ab68:	2b00      	cmp	r3, #0
   1ab6a:	d1fa      	bne.n	1ab62 <find_type_cb+0x6a>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   1ab6c:	eba1 0c0c 	sub.w	ip, r1, ip
   1ab70:	f1bc 0f03 	cmp.w	ip, #3
   1ab74:	d801      	bhi.n	1ab7a <find_type_cb+0x82>
		return BT_GATT_ITER_STOP;
   1ab76:	2000      	movs	r0, #0
   1ab78:	e7d6      	b.n	1ab28 <find_type_cb+0x30>
	frag = net_buf_frag_last(data->buf);
   1ab7a:	f005 fc55 	bl	20428 <net_buf_frag_last>
   1ab7e:	4681      	mov	r9, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   1ab80:	f8b7 a02a 	ldrh.w	sl, [r7, #42]	; 0x2a
   1ab84:	6863      	ldr	r3, [r4, #4]
	size_t bytes = 0;
   1ab86:	2200      	movs	r2, #0
	while (buf) {
   1ab88:	e002      	b.n	1ab90 <find_type_cb+0x98>
		bytes += buf->len;
   1ab8a:	8999      	ldrh	r1, [r3, #12]
   1ab8c:	440a      	add	r2, r1
		buf = buf->frags;
   1ab8e:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1ab90:	2b00      	cmp	r3, #0
   1ab92:	d1fa      	bne.n	1ab8a <find_type_cb+0x92>
   1ab94:	ebaa 0a02 	sub.w	sl, sl, r2
	return net_buf_simple_tailroom(&buf->b);
   1ab98:	f109 0b08 	add.w	fp, r9, #8
   1ab9c:	4658      	mov	r0, fp
   1ab9e:	f014 fae6 	bl	2f16e <net_buf_simple_tailroom>
   1aba2:	4582      	cmp	sl, r0
   1aba4:	d228      	bcs.n	1abf8 <find_type_cb+0x100>
   1aba6:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   1aba8:	6863      	ldr	r3, [r4, #4]
	size_t bytes = 0;
   1abaa:	2200      	movs	r2, #0
	while (buf) {
   1abac:	e002      	b.n	1abb4 <find_type_cb+0xbc>
		bytes += buf->len;
   1abae:	8999      	ldrh	r1, [r3, #12]
   1abb0:	440a      	add	r2, r1
		buf = buf->frags;
   1abb2:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1abb4:	2b00      	cmp	r3, #0
   1abb6:	d1fa      	bne.n	1abae <find_type_cb+0xb6>
   1abb8:	1a80      	subs	r0, r0, r2
	if (!len) {
   1abba:	b308      	cbz	r0, 1ac00 <find_type_cb+0x108>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   1abbc:	686f      	ldr	r7, [r5, #4]
   1abbe:	2300      	movs	r3, #0
   1abc0:	9300      	str	r3, [sp, #0]
   1abc2:	2310      	movs	r3, #16
   1abc4:	aa0c      	add	r2, sp, #48	; 0x30
   1abc6:	4629      	mov	r1, r5
   1abc8:	4640      	mov	r0, r8
   1abca:	47b8      	blx	r7
	if (read < 0) {
   1abcc:	1e05      	subs	r5, r0, #0
   1abce:	dba8      	blt.n	1ab22 <find_type_cb+0x2a>
	if (read != data->value_len) {
   1abd0:	7c22      	ldrb	r2, [r4, #16]
   1abd2:	42aa      	cmp	r2, r5
   1abd4:	d030      	beq.n	1ac38 <find_type_cb+0x140>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1abd6:	68e1      	ldr	r1, [r4, #12]
   1abd8:	a807      	add	r0, sp, #28
   1abda:	f011 f98a 	bl	2bef2 <bt_uuid_create>
   1abde:	b1f8      	cbz	r0, 1ac20 <find_type_cb+0x128>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   1abe0:	b2ea      	uxtb	r2, r5
   1abe2:	a90c      	add	r1, sp, #48	; 0x30
   1abe4:	a802      	add	r0, sp, #8
   1abe6:	f011 f984 	bl	2bef2 <bt_uuid_create>
   1abea:	b1f8      	cbz	r0, 1ac2c <find_type_cb+0x134>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   1abec:	a902      	add	r1, sp, #8
   1abee:	a807      	add	r0, sp, #28
   1abf0:	f011 f961 	bl	2beb6 <bt_uuid_cmp>
   1abf4:	b340      	cbz	r0, 1ac48 <find_type_cb+0x150>
   1abf6:	e794      	b.n	1ab22 <find_type_cb+0x2a>
	return net_buf_simple_tailroom(&buf->b);
   1abf8:	4658      	mov	r0, fp
   1abfa:	f014 fab8 	bl	2f16e <net_buf_simple_tailroom>
   1abfe:	e7dc      	b.n	1abba <find_type_cb+0xc2>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   1ac00:	6863      	ldr	r3, [r4, #4]
   1ac02:	7998      	ldrb	r0, [r3, #6]
   1ac04:	f005 f934 	bl	1fe70 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1ac08:	2200      	movs	r2, #0
   1ac0a:	2300      	movs	r3, #0
   1ac0c:	f014 fa9c 	bl	2f148 <net_buf_alloc_fixed>
		if (!frag) {
   1ac10:	4681      	mov	r9, r0
   1ac12:	2800      	cmp	r0, #0
   1ac14:	d088      	beq.n	1ab28 <find_type_cb+0x30>
		net_buf_frag_add(data->buf, frag);
   1ac16:	4601      	mov	r1, r0
   1ac18:	6860      	ldr	r0, [r4, #4]
   1ac1a:	f005 fc4b 	bl	204b4 <net_buf_frag_add>
   1ac1e:	e7cd      	b.n	1abbc <find_type_cb+0xc4>
			BT_WARN("Unable to create UUID: size %u", data->value_len);
   1ac20:	7c22      	ldrb	r2, [r4, #16]
   1ac22:	2157      	movs	r1, #87	; 0x57
   1ac24:	480f      	ldr	r0, [pc, #60]	; (1ac64 <find_type_cb+0x16c>)
   1ac26:	f010 fa41 	bl	2b0ac <z_log_minimal_printk>
			goto skip;
   1ac2a:	e77a      	b.n	1ab22 <find_type_cb+0x2a>
			BT_WARN("Unable to create UUID: size %d", read);
   1ac2c:	462a      	mov	r2, r5
   1ac2e:	2157      	movs	r1, #87	; 0x57
   1ac30:	480d      	ldr	r0, [pc, #52]	; (1ac68 <find_type_cb+0x170>)
   1ac32:	f010 fa3b 	bl	2b0ac <z_log_minimal_printk>
			goto skip;
   1ac36:	e774      	b.n	1ab22 <find_type_cb+0x2a>
	} else if (memcmp(data->value, uuid, read)) {
   1ac38:	462a      	mov	r2, r5
   1ac3a:	a90c      	add	r1, sp, #48	; 0x30
   1ac3c:	68e0      	ldr	r0, [r4, #12]
   1ac3e:	f016 f85b 	bl	30cf8 <memcmp>
   1ac42:	2800      	cmp	r0, #0
   1ac44:	f47f af6d 	bne.w	1ab22 <find_type_cb+0x2a>
	data->err = 0x00;
   1ac48:	2300      	movs	r3, #0
   1ac4a:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   1ac4c:	2104      	movs	r1, #4
   1ac4e:	f109 0008 	add.w	r0, r9, #8
   1ac52:	f005 fcaf 	bl	205b4 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   1ac56:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1ac58:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1ac5a:	68a3      	ldr	r3, [r4, #8]
   1ac5c:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   1ac5e:	2001      	movs	r0, #1
   1ac60:	e762      	b.n	1ab28 <find_type_cb+0x30>
   1ac62:	bf00      	nop
   1ac64:	00033600 	.word	0x00033600
   1ac68:	00033624 	.word	0x00033624

0001ac6c <bt_att_connected>:
{
   1ac6c:	b510      	push	{r4, lr}
   1ac6e:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   1ac70:	3804      	subs	r0, #4
	atomic_set_bit(att_chan->flags, ATT_CONNECTED);
   1ac72:	f104 0394 	add.w	r3, r4, #148	; 0x94
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1ac76:	f3bf 8f5b 	dmb	ish
   1ac7a:	e853 2f00 	ldrex	r2, [r3]
   1ac7e:	f042 0204 	orr.w	r2, r2, #4
   1ac82:	e843 2100 	strex	r1, r2, [r3]
   1ac86:	2900      	cmp	r1, #0
   1ac88:	d1f7      	bne.n	1ac7a <bt_att_connected+0xe>
   1ac8a:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ac8e:	f3bf 8f5b 	dmb	ish
   1ac92:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   1ac96:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   1ac9a:	f013 0f08 	tst.w	r3, #8
   1ac9e:	d102      	bne.n	1aca6 <bt_att_connected+0x3a>
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1aca0:	2317      	movs	r3, #23
   1aca2:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1aca4:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
   1aca6:	f012 fb17 	bl	2d2d8 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   1acaa:	4904      	ldr	r1, [pc, #16]	; (1acbc <bt_att_connected+0x50>)
   1acac:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   1acb0:	f00c f978 	bl	26fa4 <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   1acb4:	6820      	ldr	r0, [r4, #0]
   1acb6:	f002 fd33 	bl	1d720 <bt_gatt_connected>
}
   1acba:	bd10      	pop	{r4, pc}
   1acbc:	0001bcf9 	.word	0x0001bcf9

0001acc0 <att_get>:
{
   1acc0:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1acc2:	7b43      	ldrb	r3, [r0, #13]
   1acc4:	2b07      	cmp	r3, #7
   1acc6:	d111      	bne.n	1acec <att_get+0x2c>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   1acc8:	2104      	movs	r1, #4
   1acca:	f012 f846 	bl	2cd5a <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1acce:	4604      	mov	r4, r0
   1acd0:	b190      	cbz	r0, 1acf8 <att_get+0x38>
   1acd2:	f3bf 8f5b 	dmb	ish
   1acd6:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
   1acda:	f3bf 8f5b 	dmb	ish
	__ASSERT(atomic_test_bit(att_chan->flags, ATT_CONNECTED),
   1acde:	f013 0f04 	tst.w	r3, #4
   1ace2:	d00e      	beq.n	1ad02 <att_get+0x42>
	return att_chan->att;
   1ace4:	f854 4c04 	ldr.w	r4, [r4, #-4]
}
   1ace8:	4620      	mov	r0, r4
   1acea:	bd38      	pop	{r3, r4, r5, pc}
		BT_WARN("Not connected");
   1acec:	2157      	movs	r1, #87	; 0x57
   1acee:	480b      	ldr	r0, [pc, #44]	; (1ad1c <att_get+0x5c>)
   1acf0:	f010 f9dc 	bl	2b0ac <z_log_minimal_printk>
		return NULL;
   1acf4:	2400      	movs	r4, #0
   1acf6:	e7f7      	b.n	1ace8 <att_get+0x28>
		BT_ERR("Unable to find ATT channel");
   1acf8:	2145      	movs	r1, #69	; 0x45
   1acfa:	4809      	ldr	r0, [pc, #36]	; (1ad20 <att_get+0x60>)
   1acfc:	f010 f9d6 	bl	2b0ac <z_log_minimal_printk>
		return NULL;
   1ad00:	e7f2      	b.n	1ace8 <att_get+0x28>
	__ASSERT(atomic_test_bit(att_chan->flags, ATT_CONNECTED),
   1ad02:	4d08      	ldr	r5, [pc, #32]	; (1ad24 <att_get+0x64>)
   1ad04:	f640 322d 	movw	r2, #2861	; 0xb2d
   1ad08:	4629      	mov	r1, r5
   1ad0a:	4807      	ldr	r0, [pc, #28]	; (1ad28 <att_get+0x68>)
   1ad0c:	f010 f9bf 	bl	2b08e <assert_print>
   1ad10:	f640 312d 	movw	r1, #2861	; 0xb2d
   1ad14:	4628      	mov	r0, r5
   1ad16:	f010 f9b3 	bl	2b080 <assert_post_action>
   1ad1a:	e7e3      	b.n	1ace4 <att_get+0x24>
   1ad1c:	00033648 	.word	0x00033648
   1ad20:	0003365c 	.word	0x0003365c
   1ad24:	0003354c 	.word	0x0003354c
   1ad28:	000318f8 	.word	0x000318f8

0001ad2c <chan_unknown>:
{
   1ad2c:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(data);
   1ad2e:	460c      	mov	r4, r1
   1ad30:	b151      	cbz	r1, 1ad48 <chan_unknown+0x1c>
   1ad32:	2300      	movs	r3, #0
   1ad34:	6023      	str	r3, [r4, #0]
   1ad36:	6063      	str	r3, [r4, #4]
   1ad38:	60a3      	str	r3, [r4, #8]
   1ad3a:	60e3      	str	r3, [r4, #12]
   1ad3c:	6123      	str	r3, [r4, #16]
	k_fifo_put(&free_att_tx_meta_data, data);
   1ad3e:	4621      	mov	r1, r4
   1ad40:	4807      	ldr	r0, [pc, #28]	; (1ad60 <chan_unknown+0x34>)
   1ad42:	f015 fe4e 	bl	309e2 <k_queue_append>
}
   1ad46:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(data);
   1ad48:	4d06      	ldr	r5, [pc, #24]	; (1ad64 <chan_unknown+0x38>)
   1ad4a:	22a4      	movs	r2, #164	; 0xa4
   1ad4c:	4629      	mov	r1, r5
   1ad4e:	4806      	ldr	r0, [pc, #24]	; (1ad68 <chan_unknown+0x3c>)
   1ad50:	f010 f99d 	bl	2b08e <assert_print>
   1ad54:	21a4      	movs	r1, #164	; 0xa4
   1ad56:	4628      	mov	r0, r5
   1ad58:	f010 f992 	bl	2b080 <assert_post_action>
   1ad5c:	e7e9      	b.n	1ad32 <chan_unknown+0x6>
   1ad5e:	bf00      	nop
   1ad60:	200009f0 	.word	0x200009f0
   1ad64:	0003354c 	.word	0x0003354c
   1ad68:	000318f8 	.word	0x000318f8

0001ad6c <chan_cfm_sent>:
{
   1ad6c:	b538      	push	{r3, r4, r5, lr}
   1ad6e:	460c      	mov	r4, r1
	struct bt_att_chan *chan = data->att_chan;
   1ad70:	680b      	ldr	r3, [r1, #0]
		atomic_clear_bit(chan->flags, ATT_PENDING_CFM);
   1ad72:	3398      	adds	r3, #152	; 0x98
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1ad74:	f3bf 8f5b 	dmb	ish
   1ad78:	e853 2f00 	ldrex	r2, [r3]
   1ad7c:	f022 0202 	bic.w	r2, r2, #2
   1ad80:	e843 2100 	strex	r1, r2, [r3]
   1ad84:	2900      	cmp	r1, #0
   1ad86:	d1f7      	bne.n	1ad78 <chan_cfm_sent+0xc>
   1ad88:	f3bf 8f5b 	dmb	ish
	__ASSERT_NO_MSG(data);
   1ad8c:	b154      	cbz	r4, 1ada4 <chan_cfm_sent+0x38>
   1ad8e:	2300      	movs	r3, #0
   1ad90:	6023      	str	r3, [r4, #0]
   1ad92:	6063      	str	r3, [r4, #4]
   1ad94:	60a3      	str	r3, [r4, #8]
   1ad96:	60e3      	str	r3, [r4, #12]
   1ad98:	6123      	str	r3, [r4, #16]
	k_fifo_put(&free_att_tx_meta_data, data);
   1ad9a:	4621      	mov	r1, r4
   1ad9c:	4807      	ldr	r0, [pc, #28]	; (1adbc <chan_cfm_sent+0x50>)
   1ad9e:	f015 fe20 	bl	309e2 <k_queue_append>
}
   1ada2:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(data);
   1ada4:	4d06      	ldr	r5, [pc, #24]	; (1adc0 <chan_cfm_sent+0x54>)
   1ada6:	22a4      	movs	r2, #164	; 0xa4
   1ada8:	4629      	mov	r1, r5
   1adaa:	4806      	ldr	r0, [pc, #24]	; (1adc4 <chan_cfm_sent+0x58>)
   1adac:	f010 f96f 	bl	2b08e <assert_print>
   1adb0:	21a4      	movs	r1, #164	; 0xa4
   1adb2:	4628      	mov	r0, r5
   1adb4:	f010 f964 	bl	2b080 <assert_post_action>
   1adb8:	e7e9      	b.n	1ad8e <chan_cfm_sent+0x22>
   1adba:	bf00      	nop
   1adbc:	200009f0 	.word	0x200009f0
   1adc0:	0003354c 	.word	0x0003354c
   1adc4:	000318f8 	.word	0x000318f8

0001adc8 <chan_rsp_sent>:
{
   1adc8:	b538      	push	{r3, r4, r5, lr}
   1adca:	460c      	mov	r4, r1
	struct bt_att_chan *chan = data->att_chan;
   1adcc:	680b      	ldr	r3, [r1, #0]
		atomic_clear_bit(chan->flags, ATT_PENDING_RSP);
   1adce:	3398      	adds	r3, #152	; 0x98
   1add0:	f3bf 8f5b 	dmb	ish
   1add4:	e853 2f00 	ldrex	r2, [r3]
   1add8:	f022 0201 	bic.w	r2, r2, #1
   1addc:	e843 2100 	strex	r1, r2, [r3]
   1ade0:	2900      	cmp	r1, #0
   1ade2:	d1f7      	bne.n	1add4 <chan_rsp_sent+0xc>
   1ade4:	f3bf 8f5b 	dmb	ish
	__ASSERT_NO_MSG(data);
   1ade8:	b154      	cbz	r4, 1ae00 <chan_rsp_sent+0x38>
   1adea:	2300      	movs	r3, #0
   1adec:	6023      	str	r3, [r4, #0]
   1adee:	6063      	str	r3, [r4, #4]
   1adf0:	60a3      	str	r3, [r4, #8]
   1adf2:	60e3      	str	r3, [r4, #12]
   1adf4:	6123      	str	r3, [r4, #16]
	k_fifo_put(&free_att_tx_meta_data, data);
   1adf6:	4621      	mov	r1, r4
   1adf8:	4807      	ldr	r0, [pc, #28]	; (1ae18 <chan_rsp_sent+0x50>)
   1adfa:	f015 fdf2 	bl	309e2 <k_queue_append>
}
   1adfe:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(data);
   1ae00:	4d06      	ldr	r5, [pc, #24]	; (1ae1c <chan_rsp_sent+0x54>)
   1ae02:	22a4      	movs	r2, #164	; 0xa4
   1ae04:	4629      	mov	r1, r5
   1ae06:	4806      	ldr	r0, [pc, #24]	; (1ae20 <chan_rsp_sent+0x58>)
   1ae08:	f010 f941 	bl	2b08e <assert_print>
   1ae0c:	21a4      	movs	r1, #164	; 0xa4
   1ae0e:	4628      	mov	r0, r5
   1ae10:	f010 f936 	bl	2b080 <assert_post_action>
   1ae14:	e7e9      	b.n	1adea <chan_rsp_sent+0x22>
   1ae16:	bf00      	nop
   1ae18:	200009f0 	.word	0x200009f0
   1ae1c:	0003354c 	.word	0x0003354c
   1ae20:	000318f8 	.word	0x000318f8

0001ae24 <chan_req_sent>:
{
   1ae24:	b538      	push	{r3, r4, r5, lr}
   1ae26:	460c      	mov	r4, r1
	struct bt_att_chan *chan = data->att_chan;
   1ae28:	6808      	ldr	r0, [r1, #0]
	if (chan->req) {
   1ae2a:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   1ae2e:	b12b      	cbz	r3, 1ae3c <chan_req_sent+0x18>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   1ae30:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1ae34:	2300      	movs	r3, #0
   1ae36:	30c0      	adds	r0, #192	; 0xc0
   1ae38:	f00c f9e4 	bl	27204 <k_work_reschedule>
	__ASSERT_NO_MSG(data);
   1ae3c:	b154      	cbz	r4, 1ae54 <chan_req_sent+0x30>
   1ae3e:	2300      	movs	r3, #0
   1ae40:	6023      	str	r3, [r4, #0]
   1ae42:	6063      	str	r3, [r4, #4]
   1ae44:	60a3      	str	r3, [r4, #8]
   1ae46:	60e3      	str	r3, [r4, #12]
   1ae48:	6123      	str	r3, [r4, #16]
	k_fifo_put(&free_att_tx_meta_data, data);
   1ae4a:	4621      	mov	r1, r4
   1ae4c:	4807      	ldr	r0, [pc, #28]	; (1ae6c <chan_req_sent+0x48>)
   1ae4e:	f015 fdc8 	bl	309e2 <k_queue_append>
}
   1ae52:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(data);
   1ae54:	4d06      	ldr	r5, [pc, #24]	; (1ae70 <chan_req_sent+0x4c>)
   1ae56:	22a4      	movs	r2, #164	; 0xa4
   1ae58:	4629      	mov	r1, r5
   1ae5a:	4806      	ldr	r0, [pc, #24]	; (1ae74 <chan_req_sent+0x50>)
   1ae5c:	f010 f917 	bl	2b08e <assert_print>
   1ae60:	21a4      	movs	r1, #164	; 0xa4
   1ae62:	4628      	mov	r0, r5
   1ae64:	f010 f90c 	bl	2b080 <assert_post_action>
   1ae68:	e7e9      	b.n	1ae3e <chan_req_sent+0x1a>
   1ae6a:	bf00      	nop
   1ae6c:	200009f0 	.word	0x200009f0
   1ae70:	0003354c 	.word	0x0003354c
   1ae74:	000318f8 	.word	0x000318f8

0001ae78 <chan_tx_complete>:
{
   1ae78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ae7c:	4605      	mov	r5, r0
   1ae7e:	460c      	mov	r4, r1
   1ae80:	4691      	mov	r9, r2
	bt_gatt_complete_func_t func = data->func;
   1ae82:	688e      	ldr	r6, [r1, #8]
	uint16_t attr_count = data->attr_count;
   1ae84:	888f      	ldrh	r7, [r1, #4]
	void *ud = data->user_data;
   1ae86:	f8d1 800c 	ldr.w	r8, [r1, #12]
	__ASSERT_NO_MSG(data);
   1ae8a:	b179      	cbz	r1, 1aeac <chan_tx_complete+0x34>
   1ae8c:	2300      	movs	r3, #0
   1ae8e:	6023      	str	r3, [r4, #0]
   1ae90:	6063      	str	r3, [r4, #4]
   1ae92:	60a3      	str	r3, [r4, #8]
   1ae94:	60e3      	str	r3, [r4, #12]
   1ae96:	6123      	str	r3, [r4, #16]
	k_fifo_put(&free_att_tx_meta_data, data);
   1ae98:	4621      	mov	r1, r4
   1ae9a:	480f      	ldr	r0, [pc, #60]	; (1aed8 <chan_tx_complete+0x60>)
   1ae9c:	f015 fda1 	bl	309e2 <k_queue_append>
	if (!err && func) {
   1aea0:	f1b9 0f00 	cmp.w	r9, #0
   1aea4:	d115      	bne.n	1aed2 <chan_tx_complete+0x5a>
   1aea6:	b1a6      	cbz	r6, 1aed2 <chan_tx_complete+0x5a>
		for (uint16_t i = 0; i < attr_count; i++) {
   1aea8:	2400      	movs	r4, #0
   1aeaa:	e010      	b.n	1aece <chan_tx_complete+0x56>
	__ASSERT_NO_MSG(data);
   1aeac:	f8df a02c 	ldr.w	sl, [pc, #44]	; 1aedc <chan_tx_complete+0x64>
   1aeb0:	22a4      	movs	r2, #164	; 0xa4
   1aeb2:	4651      	mov	r1, sl
   1aeb4:	480a      	ldr	r0, [pc, #40]	; (1aee0 <chan_tx_complete+0x68>)
   1aeb6:	f010 f8ea 	bl	2b08e <assert_print>
   1aeba:	21a4      	movs	r1, #164	; 0xa4
   1aebc:	4650      	mov	r0, sl
   1aebe:	f010 f8df 	bl	2b080 <assert_post_action>
   1aec2:	e7e3      	b.n	1ae8c <chan_tx_complete+0x14>
			func(conn, ud);
   1aec4:	4641      	mov	r1, r8
   1aec6:	4628      	mov	r0, r5
   1aec8:	47b0      	blx	r6
		for (uint16_t i = 0; i < attr_count; i++) {
   1aeca:	3401      	adds	r4, #1
   1aecc:	b2a4      	uxth	r4, r4
   1aece:	42a7      	cmp	r7, r4
   1aed0:	d8f8      	bhi.n	1aec4 <chan_tx_complete+0x4c>
}
   1aed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1aed6:	bf00      	nop
   1aed8:	200009f0 	.word	0x200009f0
   1aedc:	0003354c 	.word	0x0003354c
   1aee0:	000318f8 	.word	0x000318f8

0001aee4 <chan_send>:
{
   1aee4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1aee8:	b085      	sub	sp, #20
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   1aeea:	694e      	ldr	r6, [r1, #20]
	hdr = (void *)buf->data;
   1aeec:	688a      	ldr	r2, [r1, #8]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1aeee:	f3bf 8f5b 	dmb	ish
   1aef2:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
   1aef6:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   1aefa:	f013 0f04 	tst.w	r3, #4
   1aefe:	d04e      	beq.n	1af9e <chan_send+0xba>
   1af00:	4681      	mov	r9, r0
   1af02:	460c      	mov	r4, r1
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   1af04:	7813      	ldrb	r3, [r2, #0]
   1af06:	2bd2      	cmp	r3, #210	; 0xd2
   1af08:	d023      	beq.n	1af52 <chan_send+0x6e>
	state->offset = net_buf_simple_headroom(buf);
   1af0a:	f104 0008 	add.w	r0, r4, #8
   1af0e:	f014 f92a 	bl	2f166 <net_buf_simple_headroom>
   1af12:	b285      	uxth	r5, r0
   1af14:	f8ad 500c 	strh.w	r5, [sp, #12]
	state->len = buf->len;
   1af18:	89a7      	ldrh	r7, [r4, #12]
   1af1a:	f8ad 700e 	strh.w	r7, [sp, #14]
	data->att_chan = chan;
   1af1e:	f8c6 9000 	str.w	r9, [r6]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1af22:	f8d9 3000 	ldr.w	r3, [r9]
   1af26:	f8d3 8000 	ldr.w	r8, [r3]
   1af2a:	4620      	mov	r0, r4
   1af2c:	f7ff fc66 	bl	1a7fc <att_cb>
   1af30:	4603      	mov	r3, r0
   1af32:	9600      	str	r6, [sp, #0]
   1af34:	4622      	mov	r2, r4
   1af36:	2104      	movs	r1, #4
   1af38:	4640      	mov	r0, r8
   1af3a:	f011 febb 	bl	2ccb4 <bt_l2cap_send_cb>
	if (err) {
   1af3e:	4680      	mov	r8, r0
   1af40:	b118      	cbz	r0, 1af4a <chan_send+0x66>
	buf->data = buf->__buf + state->offset;
   1af42:	6920      	ldr	r0, [r4, #16]
   1af44:	4428      	add	r0, r5
   1af46:	60a0      	str	r0, [r4, #8]
	buf->len = state->len;
   1af48:	81a7      	strh	r7, [r4, #12]
}
   1af4a:	4640      	mov	r0, r8
   1af4c:	b005      	add	sp, #20
   1af4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = bt_smp_sign(chan->att->conn, buf);
   1af52:	6803      	ldr	r3, [r0, #0]
   1af54:	6818      	ldr	r0, [r3, #0]
   1af56:	f013 ff08 	bl	2ed6a <bt_smp_sign>
		if (err) {
   1af5a:	4680      	mov	r8, r0
   1af5c:	2800      	cmp	r0, #0
   1af5e:	d0d4      	beq.n	1af0a <chan_send+0x26>
			BT_ERR("Error signing data");
   1af60:	2145      	movs	r1, #69	; 0x45
   1af62:	4810      	ldr	r0, [pc, #64]	; (1afa4 <chan_send+0xc0>)
   1af64:	f010 f8a2 	bl	2b0ac <z_log_minimal_printk>
			tx_meta_data_free(bt_att_tx_meta_data(buf));
   1af68:	6965      	ldr	r5, [r4, #20]
	__ASSERT_NO_MSG(data);
   1af6a:	b16d      	cbz	r5, 1af88 <chan_send+0xa4>
   1af6c:	2300      	movs	r3, #0
   1af6e:	602b      	str	r3, [r5, #0]
   1af70:	606b      	str	r3, [r5, #4]
   1af72:	60ab      	str	r3, [r5, #8]
   1af74:	60eb      	str	r3, [r5, #12]
   1af76:	612b      	str	r3, [r5, #16]
	k_fifo_put(&free_att_tx_meta_data, data);
   1af78:	4629      	mov	r1, r5
   1af7a:	480b      	ldr	r0, [pc, #44]	; (1afa8 <chan_send+0xc4>)
   1af7c:	f015 fd31 	bl	309e2 <k_queue_append>
			net_buf_unref(buf);
   1af80:	4620      	mov	r0, r4
   1af82:	f005 f9ff 	bl	20384 <net_buf_unref>
			return err;
   1af86:	e7e0      	b.n	1af4a <chan_send+0x66>
	__ASSERT_NO_MSG(data);
   1af88:	4e08      	ldr	r6, [pc, #32]	; (1afac <chan_send+0xc8>)
   1af8a:	22a4      	movs	r2, #164	; 0xa4
   1af8c:	4631      	mov	r1, r6
   1af8e:	4808      	ldr	r0, [pc, #32]	; (1afb0 <chan_send+0xcc>)
   1af90:	f010 f87d 	bl	2b08e <assert_print>
   1af94:	21a4      	movs	r1, #164	; 0xa4
   1af96:	4630      	mov	r0, r6
   1af98:	f010 f872 	bl	2b080 <assert_post_action>
   1af9c:	e7e6      	b.n	1af6c <chan_send+0x88>
		return -EINVAL;
   1af9e:	f06f 0815 	mvn.w	r8, #21
   1afa2:	e7d2      	b.n	1af4a <chan_send+0x66>
   1afa4:	0003367c 	.word	0x0003367c
   1afa8:	200009f0 	.word	0x200009f0
   1afac:	0003354c 	.word	0x0003354c
   1afb0:	000318f8 	.word	0x000318f8

0001afb4 <bt_att_chan_req_send>:
{
   1afb4:	b570      	push	{r4, r5, r6, lr}
   1afb6:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(chan);
   1afb8:	4605      	mov	r5, r0
   1afba:	b1b0      	cbz	r0, 1afea <bt_att_chan_req_send+0x36>
	__ASSERT_NO_MSG(req);
   1afbc:	b314      	cbz	r4, 1b004 <bt_att_chan_req_send+0x50>
	__ASSERT_NO_MSG(req->func);
   1afbe:	6863      	ldr	r3, [r4, #4]
   1afc0:	b36b      	cbz	r3, 1b01e <bt_att_chan_req_send+0x6a>
	__ASSERT_NO_MSG(!chan->req);
   1afc2:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
   1afc6:	b15b      	cbz	r3, 1afe0 <bt_att_chan_req_send+0x2c>
   1afc8:	4e1b      	ldr	r6, [pc, #108]	; (1b038 <bt_att_chan_req_send+0x84>)
   1afca:	f240 321a 	movw	r2, #794	; 0x31a
   1afce:	4631      	mov	r1, r6
   1afd0:	481a      	ldr	r0, [pc, #104]	; (1b03c <bt_att_chan_req_send+0x88>)
   1afd2:	f010 f85c 	bl	2b08e <assert_print>
   1afd6:	f240 311a 	movw	r1, #794	; 0x31a
   1afda:	4630      	mov	r0, r6
   1afdc:	f010 f850 	bl	2b080 <assert_post_action>
	return chan_req_send(chan, req);
   1afe0:	4621      	mov	r1, r4
   1afe2:	4628      	mov	r0, r5
   1afe4:	f012 f9ba 	bl	2d35c <chan_req_send>
}
   1afe8:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(chan);
   1afea:	4e13      	ldr	r6, [pc, #76]	; (1b038 <bt_att_chan_req_send+0x84>)
   1afec:	f240 3217 	movw	r2, #791	; 0x317
   1aff0:	4631      	mov	r1, r6
   1aff2:	4812      	ldr	r0, [pc, #72]	; (1b03c <bt_att_chan_req_send+0x88>)
   1aff4:	f010 f84b 	bl	2b08e <assert_print>
   1aff8:	f240 3117 	movw	r1, #791	; 0x317
   1affc:	4630      	mov	r0, r6
   1affe:	f010 f83f 	bl	2b080 <assert_post_action>
   1b002:	e7db      	b.n	1afbc <bt_att_chan_req_send+0x8>
	__ASSERT_NO_MSG(req);
   1b004:	4e0c      	ldr	r6, [pc, #48]	; (1b038 <bt_att_chan_req_send+0x84>)
   1b006:	f44f 7246 	mov.w	r2, #792	; 0x318
   1b00a:	4631      	mov	r1, r6
   1b00c:	480b      	ldr	r0, [pc, #44]	; (1b03c <bt_att_chan_req_send+0x88>)
   1b00e:	f010 f83e 	bl	2b08e <assert_print>
   1b012:	f44f 7146 	mov.w	r1, #792	; 0x318
   1b016:	4630      	mov	r0, r6
   1b018:	f010 f832 	bl	2b080 <assert_post_action>
   1b01c:	e7cf      	b.n	1afbe <bt_att_chan_req_send+0xa>
	__ASSERT_NO_MSG(req->func);
   1b01e:	4e06      	ldr	r6, [pc, #24]	; (1b038 <bt_att_chan_req_send+0x84>)
   1b020:	f240 3219 	movw	r2, #793	; 0x319
   1b024:	4631      	mov	r1, r6
   1b026:	4805      	ldr	r0, [pc, #20]	; (1b03c <bt_att_chan_req_send+0x88>)
   1b028:	f010 f831 	bl	2b08e <assert_print>
   1b02c:	f240 3119 	movw	r1, #793	; 0x319
   1b030:	4630      	mov	r0, r6
   1b032:	f010 f825 	bl	2b080 <assert_post_action>
   1b036:	e7c4      	b.n	1afc2 <bt_att_chan_req_send+0xe>
   1b038:	0003354c 	.word	0x0003354c
   1b03c:	000318f8 	.word	0x000318f8

0001b040 <bt_att_chan_create_pdu>:
{
   1b040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1b042:	1c53      	adds	r3, r2, #1
   1b044:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
   1b046:	4293      	cmp	r3, r2
   1b048:	d80c      	bhi.n	1b064 <bt_att_chan_create_pdu+0x24>
   1b04a:	460c      	mov	r4, r1
	switch (att_op_get_type(op)) {
   1b04c:	4608      	mov	r0, r1
   1b04e:	f011 ff10 	bl	2ce72 <att_op_get_type>
   1b052:	2802      	cmp	r0, #2
   1b054:	d00c      	beq.n	1b070 <bt_att_chan_create_pdu+0x30>
   1b056:	2804      	cmp	r0, #4
   1b058:	d00a      	beq.n	1b070 <bt_att_chan_create_pdu+0x30>
		timeout = K_FOREVER;
   1b05a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1b05e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1b062:	e008      	b.n	1b076 <bt_att_chan_create_pdu+0x36>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   1b064:	2157      	movs	r1, #87	; 0x57
   1b066:	4817      	ldr	r0, [pc, #92]	; (1b0c4 <bt_att_chan_create_pdu+0x84>)
   1b068:	f010 f820 	bl	2b0ac <z_log_minimal_printk>
		return NULL;
   1b06c:	2500      	movs	r5, #0
   1b06e:	e017      	b.n	1b0a0 <bt_att_chan_create_pdu+0x60>
		timeout = BT_ATT_TIMEOUT;
   1b070:	f44f 2670 	mov.w	r6, #983040	; 0xf0000
   1b074:	2700      	movs	r7, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   1b076:	4632      	mov	r2, r6
   1b078:	463b      	mov	r3, r7
   1b07a:	2100      	movs	r1, #0
   1b07c:	4608      	mov	r0, r1
   1b07e:	f011 fe14 	bl	2ccaa <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   1b082:	4605      	mov	r5, r0
   1b084:	b170      	cbz	r0, 1b0a4 <bt_att_chan_create_pdu+0x64>
	data = tx_meta_data_alloc(timeout);
   1b086:	4630      	mov	r0, r6
   1b088:	4639      	mov	r1, r7
   1b08a:	f7ff fbad 	bl	1a7e8 <tx_meta_data_alloc>
	if (!data) {
   1b08e:	4606      	mov	r6, r0
   1b090:	b170      	cbz	r0, 1b0b0 <bt_att_chan_create_pdu+0x70>
	bt_att_tx_meta_data(buf) = data;
   1b092:	6168      	str	r0, [r5, #20]
	return net_buf_simple_add(&buf->b, len);
   1b094:	2101      	movs	r1, #1
   1b096:	f105 0008 	add.w	r0, r5, #8
   1b09a:	f005 fa8b 	bl	205b4 <net_buf_simple_add>
	hdr->code = op;
   1b09e:	7004      	strb	r4, [r0, #0]
}
   1b0a0:	4628      	mov	r0, r5
   1b0a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   1b0a4:	4622      	mov	r2, r4
   1b0a6:	2145      	movs	r1, #69	; 0x45
   1b0a8:	4807      	ldr	r0, [pc, #28]	; (1b0c8 <bt_att_chan_create_pdu+0x88>)
   1b0aa:	f00f ffff 	bl	2b0ac <z_log_minimal_printk>
		return NULL;
   1b0ae:	e7f7      	b.n	1b0a0 <bt_att_chan_create_pdu+0x60>
		BT_WARN("Unable to allocate ATT TX meta");
   1b0b0:	2157      	movs	r1, #87	; 0x57
   1b0b2:	4806      	ldr	r0, [pc, #24]	; (1b0cc <bt_att_chan_create_pdu+0x8c>)
   1b0b4:	f00f fffa 	bl	2b0ac <z_log_minimal_printk>
		net_buf_unref(buf);
   1b0b8:	4628      	mov	r0, r5
   1b0ba:	f005 f963 	bl	20384 <net_buf_unref>
		return NULL;
   1b0be:	4635      	mov	r5, r6
   1b0c0:	e7ee      	b.n	1b0a0 <bt_att_chan_create_pdu+0x60>
   1b0c2:	bf00      	nop
   1b0c4:	00033694 	.word	0x00033694
   1b0c8:	000333fc 	.word	0x000333fc
   1b0cc:	000336c0 	.word	0x000336c0

0001b0d0 <bt_att_recv>:
{
   1b0d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buf->len < sizeof(*hdr)) {
   1b0d4:	898b      	ldrh	r3, [r1, #12]
   1b0d6:	b1bb      	cbz	r3, 1b108 <bt_att_recv+0x38>
   1b0d8:	4606      	mov	r6, r0
   1b0da:	460d      	mov	r5, r1
   1b0dc:	1f07      	subs	r7, r0, #4
	return net_buf_simple_pull_mem(&buf->b, len);
   1b0de:	2101      	movs	r1, #1
   1b0e0:	f105 0008 	add.w	r0, r5, #8
   1b0e4:	f005 fa26 	bl	20534 <net_buf_simple_pull_mem>
   1b0e8:	4604      	mov	r4, r0
	if (!att_chan->att) {
   1b0ea:	f856 3c04 	ldr.w	r3, [r6, #-4]
   1b0ee:	b17b      	cbz	r3, 1b110 <bt_att_recv+0x40>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1b0f0:	2300      	movs	r3, #0
   1b0f2:	2b0d      	cmp	r3, #13
   1b0f4:	d813      	bhi.n	1b11e <bt_att_recv+0x4e>
		if (hdr->code == handlers[i].op) {
   1b0f6:	f894 c000 	ldrb.w	ip, [r4]
   1b0fa:	4a3e      	ldr	r2, [pc, #248]	; (1b1f4 <bt_att_recv+0x124>)
   1b0fc:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   1b100:	4594      	cmp	ip, r2
   1b102:	d008      	beq.n	1b116 <bt_att_recv+0x46>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1b104:	3301      	adds	r3, #1
   1b106:	e7f4      	b.n	1b0f2 <bt_att_recv+0x22>
		BT_ERR("Too small ATT PDU received");
   1b108:	2145      	movs	r1, #69	; 0x45
   1b10a:	483b      	ldr	r0, [pc, #236]	; (1b1f8 <bt_att_recv+0x128>)
   1b10c:	f00f ffce 	bl	2b0ac <z_log_minimal_printk>
}
   1b110:	2000      	movs	r0, #0
   1b112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			handler = &handlers[i];
   1b116:	4a37      	ldr	r2, [pc, #220]	; (1b1f4 <bt_att_recv+0x124>)
   1b118:	eb02 08c3 	add.w	r8, r2, r3, lsl #3
			break;
   1b11c:	e001      	b.n	1b122 <bt_att_recv+0x52>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1b11e:	f04f 0800 	mov.w	r8, #0
	if (!handler) {
   1b122:	f1b8 0f00 	cmp.w	r8, #0
   1b126:	d01e      	beq.n	1b166 <bt_att_recv+0x96>
		if (handler->type == ATT_REQUEST &&
   1b128:	f898 3002 	ldrb.w	r3, [r8, #2]
   1b12c:	2b01      	cmp	r3, #1
   1b12e:	d02e      	beq.n	1b18e <bt_att_recv+0xbe>
		} else if (handler->type == ATT_INDICATION &&
   1b130:	f898 3002 	ldrb.w	r3, [r8, #2]
   1b134:	2b05      	cmp	r3, #5
   1b136:	d040      	beq.n	1b1ba <bt_att_recv+0xea>
	if (buf->len < handler->expect_len) {
   1b138:	89aa      	ldrh	r2, [r5, #12]
   1b13a:	f898 3001 	ldrb.w	r3, [r8, #1]
   1b13e:	429a      	cmp	r2, r3
   1b140:	d350      	bcc.n	1b1e4 <bt_att_recv+0x114>
		err = handler->func(att_chan, buf);
   1b142:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1b146:	4629      	mov	r1, r5
   1b148:	4638      	mov	r0, r7
   1b14a:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   1b14c:	f898 3002 	ldrb.w	r3, [r8, #2]
   1b150:	2b01      	cmp	r3, #1
   1b152:	d1dd      	bne.n	1b110 <bt_att_recv+0x40>
   1b154:	2800      	cmp	r0, #0
   1b156:	d0db      	beq.n	1b110 <bt_att_recv+0x40>
		send_err_rsp(att_chan, hdr->code, 0, err);
   1b158:	4603      	mov	r3, r0
   1b15a:	2200      	movs	r2, #0
   1b15c:	7821      	ldrb	r1, [r4, #0]
   1b15e:	4638      	mov	r0, r7
   1b160:	f012 fa90 	bl	2d684 <send_err_rsp>
   1b164:	e7d4      	b.n	1b110 <bt_att_recv+0x40>
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
   1b166:	7822      	ldrb	r2, [r4, #0]
   1b168:	2157      	movs	r1, #87	; 0x57
   1b16a:	4824      	ldr	r0, [pc, #144]	; (1b1fc <bt_att_recv+0x12c>)
   1b16c:	f00f ff9e 	bl	2b0ac <z_log_minimal_printk>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   1b170:	7824      	ldrb	r4, [r4, #0]
   1b172:	4620      	mov	r0, r4
   1b174:	f011 fe7d 	bl	2ce72 <att_op_get_type>
   1b178:	2800      	cmp	r0, #0
   1b17a:	d0c9      	beq.n	1b110 <bt_att_recv+0x40>
   1b17c:	2805      	cmp	r0, #5
   1b17e:	d0c7      	beq.n	1b110 <bt_att_recv+0x40>
			send_err_rsp(att_chan, hdr->code, 0,
   1b180:	2306      	movs	r3, #6
   1b182:	2200      	movs	r2, #0
   1b184:	4621      	mov	r1, r4
   1b186:	4638      	mov	r0, r7
   1b188:	f012 fa7c 	bl	2d684 <send_err_rsp>
		return 0;
   1b18c:	e7c0      	b.n	1b110 <bt_att_recv+0x40>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   1b18e:	f106 0394 	add.w	r3, r6, #148	; 0x94
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b192:	f3bf 8f5b 	dmb	ish
   1b196:	e853 2f00 	ldrex	r2, [r3]
   1b19a:	f042 0101 	orr.w	r1, r2, #1
   1b19e:	e843 1000 	strex	r0, r1, [r3]
   1b1a2:	2800      	cmp	r0, #0
   1b1a4:	d1f7      	bne.n	1b196 <bt_att_recv+0xc6>
   1b1a6:	f3bf 8f5b 	dmb	ish
		if (handler->type == ATT_REQUEST &&
   1b1aa:	f012 0f01 	tst.w	r2, #1
   1b1ae:	d0bf      	beq.n	1b130 <bt_att_recv+0x60>
			BT_WARN("Ignoring unexpected request");
   1b1b0:	2157      	movs	r1, #87	; 0x57
   1b1b2:	4813      	ldr	r0, [pc, #76]	; (1b200 <bt_att_recv+0x130>)
   1b1b4:	f00f ff7a 	bl	2b0ac <z_log_minimal_printk>
			return 0;
   1b1b8:	e7aa      	b.n	1b110 <bt_att_recv+0x40>
			   atomic_test_and_set_bit(att_chan->flags,
   1b1ba:	3694      	adds	r6, #148	; 0x94
   1b1bc:	f3bf 8f5b 	dmb	ish
   1b1c0:	e856 3f00 	ldrex	r3, [r6]
   1b1c4:	f043 0202 	orr.w	r2, r3, #2
   1b1c8:	e846 2100 	strex	r1, r2, [r6]
   1b1cc:	2900      	cmp	r1, #0
   1b1ce:	d1f7      	bne.n	1b1c0 <bt_att_recv+0xf0>
   1b1d0:	f3bf 8f5b 	dmb	ish
		} else if (handler->type == ATT_INDICATION &&
   1b1d4:	f013 0f02 	tst.w	r3, #2
   1b1d8:	d0ae      	beq.n	1b138 <bt_att_recv+0x68>
			BT_WARN("Ignoring unexpected indication");
   1b1da:	2157      	movs	r1, #87	; 0x57
   1b1dc:	4809      	ldr	r0, [pc, #36]	; (1b204 <bt_att_recv+0x134>)
   1b1de:	f00f ff65 	bl	2b0ac <z_log_minimal_printk>
			return 0;
   1b1e2:	e795      	b.n	1b110 <bt_att_recv+0x40>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1b1e4:	7823      	ldrb	r3, [r4, #0]
   1b1e6:	2145      	movs	r1, #69	; 0x45
   1b1e8:	4807      	ldr	r0, [pc, #28]	; (1b208 <bt_att_recv+0x138>)
   1b1ea:	f00f ff5f 	bl	2b0ac <z_log_minimal_printk>
		err = BT_ATT_ERR_INVALID_PDU;
   1b1ee:	2004      	movs	r0, #4
   1b1f0:	e7ac      	b.n	1b14c <bt_att_recv+0x7c>
   1b1f2:	bf00      	nop
   1b1f4:	000337e8 	.word	0x000337e8
   1b1f8:	000336e4 	.word	0x000336e4
   1b1fc:	00033704 	.word	0x00033704
   1b200:	00033724 	.word	0x00033724
   1b204:	00033748 	.word	0x00033748
   1b208:	0003376c 	.word	0x0003376c

0001b20c <att_write_rsp>:
{
   1b20c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b210:	b08a      	sub	sp, #40	; 0x28
   1b212:	4604      	mov	r4, r0
   1b214:	4616      	mov	r6, r2
   1b216:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1b218:	6803      	ldr	r3, [r0, #0]
   1b21a:	4688      	mov	r8, r1
   1b21c:	3900      	subs	r1, #0
   1b21e:	bf18      	it	ne
   1b220:	2101      	movne	r1, #1
   1b222:	6818      	ldr	r0, [r3, #0]
   1b224:	f012 ff96 	bl	2e154 <bt_gatt_change_aware>
   1b228:	b128      	cbz	r0, 1b236 <att_write_rsp+0x2a>
	if (!handle) {
   1b22a:	b9c5      	cbnz	r5, 1b25e <att_write_rsp+0x52>
		return BT_ATT_ERR_INVALID_HANDLE;
   1b22c:	2701      	movs	r7, #1
}
   1b22e:	4638      	mov	r0, r7
   1b230:	b00a      	add	sp, #40	; 0x28
   1b232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1b236:	3498      	adds	r4, #152	; 0x98
   1b238:	f3bf 8f5b 	dmb	ish
   1b23c:	e854 3f00 	ldrex	r3, [r4]
   1b240:	f043 0220 	orr.w	r2, r3, #32
   1b244:	e844 2100 	strex	r1, r2, [r4]
   1b248:	2900      	cmp	r1, #0
   1b24a:	d1f7      	bne.n	1b23c <att_write_rsp+0x30>
   1b24c:	f3bf 8f5b 	dmb	ish
   1b250:	f013 0f20 	tst.w	r3, #32
   1b254:	d001      	beq.n	1b25a <att_write_rsp+0x4e>
			return 0;
   1b256:	2700      	movs	r7, #0
   1b258:	e7e9      	b.n	1b22e <att_write_rsp+0x22>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1b25a:	2712      	movs	r7, #18
   1b25c:	e7e7      	b.n	1b22e <att_write_rsp+0x22>
	(void)memset(&data, 0, sizeof(data));
   1b25e:	2300      	movs	r3, #0
   1b260:	9304      	str	r3, [sp, #16]
   1b262:	9305      	str	r3, [sp, #20]
   1b264:	9306      	str	r3, [sp, #24]
   1b266:	9307      	str	r3, [sp, #28]
   1b268:	9308      	str	r3, [sp, #32]
   1b26a:	9309      	str	r3, [sp, #36]	; 0x24
	if (rsp) {
   1b26c:	b13e      	cbz	r6, 1b27e <att_write_rsp+0x72>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   1b26e:	461a      	mov	r2, r3
   1b270:	4631      	mov	r1, r6
   1b272:	4620      	mov	r0, r4
   1b274:	f7ff fee4 	bl	1b040 <bt_att_chan_create_pdu>
   1b278:	9005      	str	r0, [sp, #20]
		if (!data.buf) {
   1b27a:	2800      	cmp	r0, #0
   1b27c:	d052      	beq.n	1b324 <att_write_rsp+0x118>
	data.conn = chan->att->conn;
   1b27e:	6823      	ldr	r3, [r4, #0]
   1b280:	681b      	ldr	r3, [r3, #0]
   1b282:	9304      	str	r3, [sp, #16]
	data.req = req;
   1b284:	f88d 8018 	strb.w	r8, [sp, #24]
	data.offset = offset;
   1b288:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   1b28c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	data.value = value;
   1b290:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1b292:	9307      	str	r3, [sp, #28]
	data.len = len;
   1b294:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   1b298:	f8ad 3020 	strh.w	r3, [sp, #32]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1b29c:	2301      	movs	r3, #1
   1b29e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1b2a2:	ab04      	add	r3, sp, #16
   1b2a4:	9302      	str	r3, [sp, #8]
   1b2a6:	4b20      	ldr	r3, [pc, #128]	; (1b328 <att_write_rsp+0x11c>)
   1b2a8:	9301      	str	r3, [sp, #4]
   1b2aa:	2200      	movs	r2, #0
   1b2ac:	9200      	str	r2, [sp, #0]
   1b2ae:	4613      	mov	r3, r2
   1b2b0:	4629      	mov	r1, r5
   1b2b2:	4628      	mov	r0, r5
   1b2b4:	f001 fbc2 	bl	1ca3c <bt_gatt_foreach_attr_type>
	if (data.err) {
   1b2b8:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
   1b2bc:	b937      	cbnz	r7, 1b2cc <att_write_rsp+0xc0>
	if (data.buf) {
   1b2be:	9905      	ldr	r1, [sp, #20]
   1b2c0:	2900      	cmp	r1, #0
   1b2c2:	d0b4      	beq.n	1b22e <att_write_rsp+0x22>
		bt_att_chan_send_rsp(chan, data.buf);
   1b2c4:	4620      	mov	r0, r4
   1b2c6:	f012 f982 	bl	2d5ce <bt_att_chan_send_rsp>
   1b2ca:	e7b0      	b.n	1b22e <att_write_rsp+0x22>
		if (rsp) {
   1b2cc:	b926      	cbnz	r6, 1b2d8 <att_write_rsp+0xcc>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   1b2ce:	f1b8 0f18 	cmp.w	r8, #24
   1b2d2:	d024      	beq.n	1b31e <att_write_rsp+0x112>
   1b2d4:	2700      	movs	r7, #0
   1b2d6:	e7aa      	b.n	1b22e <att_write_rsp+0x22>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1b2d8:	9b05      	ldr	r3, [sp, #20]
   1b2da:	695e      	ldr	r6, [r3, #20]
	__ASSERT_NO_MSG(data);
   1b2dc:	b1a6      	cbz	r6, 1b308 <att_write_rsp+0xfc>
   1b2de:	2300      	movs	r3, #0
   1b2e0:	6033      	str	r3, [r6, #0]
   1b2e2:	6073      	str	r3, [r6, #4]
   1b2e4:	60b3      	str	r3, [r6, #8]
   1b2e6:	60f3      	str	r3, [r6, #12]
   1b2e8:	6133      	str	r3, [r6, #16]
	k_fifo_put(&free_att_tx_meta_data, data);
   1b2ea:	4631      	mov	r1, r6
   1b2ec:	480f      	ldr	r0, [pc, #60]	; (1b32c <att_write_rsp+0x120>)
   1b2ee:	f015 fb78 	bl	309e2 <k_queue_append>
			net_buf_unref(data.buf);
   1b2f2:	9805      	ldr	r0, [sp, #20]
   1b2f4:	f005 f846 	bl	20384 <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   1b2f8:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   1b2fc:	462a      	mov	r2, r5
   1b2fe:	4641      	mov	r1, r8
   1b300:	4620      	mov	r0, r4
   1b302:	f012 f9bf 	bl	2d684 <send_err_rsp>
   1b306:	e7e2      	b.n	1b2ce <att_write_rsp+0xc2>
	__ASSERT_NO_MSG(data);
   1b308:	4f09      	ldr	r7, [pc, #36]	; (1b330 <att_write_rsp+0x124>)
   1b30a:	22a4      	movs	r2, #164	; 0xa4
   1b30c:	4639      	mov	r1, r7
   1b30e:	4809      	ldr	r0, [pc, #36]	; (1b334 <att_write_rsp+0x128>)
   1b310:	f00f febd 	bl	2b08e <assert_print>
   1b314:	21a4      	movs	r1, #164	; 0xa4
   1b316:	4638      	mov	r0, r7
   1b318:	f00f feb2 	bl	2b080 <assert_post_action>
   1b31c:	e7df      	b.n	1b2de <att_write_rsp+0xd2>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   1b31e:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
   1b322:	e784      	b.n	1b22e <att_write_rsp+0x22>
			return BT_ATT_ERR_UNLIKELY;
   1b324:	270e      	movs	r7, #14
   1b326:	e782      	b.n	1b22e <att_write_rsp+0x22>
   1b328:	0002cfa9 	.word	0x0002cfa9
   1b32c:	200009f0 	.word	0x200009f0
   1b330:	0003354c 	.word	0x0003354c
   1b334:	000318f8 	.word	0x000318f8

0001b338 <att_req_retry>:
{
   1b338:	b570      	push	{r4, r5, r6, lr}
	struct bt_att_req *req = att_chan->req;
   1b33a:	f8d0 409c 	ldr.w	r4, [r0, #156]	; 0x9c
	if (!req->encode) {
   1b33e:	68e3      	ldr	r3, [r4, #12]
   1b340:	2b00      	cmp	r3, #0
   1b342:	d04b      	beq.n	1b3dc <att_req_retry+0xa4>
   1b344:	4605      	mov	r5, r0
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   1b346:	6962      	ldr	r2, [r4, #20]
   1b348:	7c61      	ldrb	r1, [r4, #17]
   1b34a:	f7ff fe79 	bl	1b040 <bt_att_chan_create_pdu>
	if (!buf) {
   1b34e:	4606      	mov	r6, r0
   1b350:	2800      	cmp	r0, #0
   1b352:	d045      	beq.n	1b3e0 <att_req_retry+0xa8>
	if (req->encode(buf, req->len, req->user_data)) {
   1b354:	68e3      	ldr	r3, [r4, #12]
   1b356:	69a2      	ldr	r2, [r4, #24]
   1b358:	6961      	ldr	r1, [r4, #20]
   1b35a:	4798      	blx	r3
   1b35c:	b930      	cbnz	r0, 1b36c <att_req_retry+0x34>
	if (chan_send(att_chan, buf)) {
   1b35e:	4631      	mov	r1, r6
   1b360:	4628      	mov	r0, r5
   1b362:	f7ff fdbf 	bl	1aee4 <chan_send>
   1b366:	b9e8      	cbnz	r0, 1b3a4 <att_req_retry+0x6c>
	return BT_ATT_ERR_SUCCESS;
   1b368:	2000      	movs	r0, #0
}
   1b36a:	bd70      	pop	{r4, r5, r6, pc}
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1b36c:	6974      	ldr	r4, [r6, #20]
	__ASSERT_NO_MSG(data);
   1b36e:	b174      	cbz	r4, 1b38e <att_req_retry+0x56>
   1b370:	2300      	movs	r3, #0
   1b372:	6023      	str	r3, [r4, #0]
   1b374:	6063      	str	r3, [r4, #4]
   1b376:	60a3      	str	r3, [r4, #8]
   1b378:	60e3      	str	r3, [r4, #12]
   1b37a:	6123      	str	r3, [r4, #16]
	k_fifo_put(&free_att_tx_meta_data, data);
   1b37c:	4621      	mov	r1, r4
   1b37e:	4819      	ldr	r0, [pc, #100]	; (1b3e4 <att_req_retry+0xac>)
   1b380:	f015 fb2f 	bl	309e2 <k_queue_append>
		net_buf_unref(buf);
   1b384:	4630      	mov	r0, r6
   1b386:	f004 fffd 	bl	20384 <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   1b38a:	200e      	movs	r0, #14
   1b38c:	e7ed      	b.n	1b36a <att_req_retry+0x32>
	__ASSERT_NO_MSG(data);
   1b38e:	4d16      	ldr	r5, [pc, #88]	; (1b3e8 <att_req_retry+0xb0>)
   1b390:	22a4      	movs	r2, #164	; 0xa4
   1b392:	4629      	mov	r1, r5
   1b394:	4815      	ldr	r0, [pc, #84]	; (1b3ec <att_req_retry+0xb4>)
   1b396:	f00f fe7a 	bl	2b08e <assert_print>
   1b39a:	21a4      	movs	r1, #164	; 0xa4
   1b39c:	4628      	mov	r0, r5
   1b39e:	f00f fe6f 	bl	2b080 <assert_post_action>
   1b3a2:	e7e5      	b.n	1b370 <att_req_retry+0x38>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1b3a4:	6974      	ldr	r4, [r6, #20]
	__ASSERT_NO_MSG(data);
   1b3a6:	b174      	cbz	r4, 1b3c6 <att_req_retry+0x8e>
   1b3a8:	2300      	movs	r3, #0
   1b3aa:	6023      	str	r3, [r4, #0]
   1b3ac:	6063      	str	r3, [r4, #4]
   1b3ae:	60a3      	str	r3, [r4, #8]
   1b3b0:	60e3      	str	r3, [r4, #12]
   1b3b2:	6123      	str	r3, [r4, #16]
	k_fifo_put(&free_att_tx_meta_data, data);
   1b3b4:	4621      	mov	r1, r4
   1b3b6:	480b      	ldr	r0, [pc, #44]	; (1b3e4 <att_req_retry+0xac>)
   1b3b8:	f015 fb13 	bl	309e2 <k_queue_append>
		net_buf_unref(buf);
   1b3bc:	4630      	mov	r0, r6
   1b3be:	f004 ffe1 	bl	20384 <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   1b3c2:	200e      	movs	r0, #14
   1b3c4:	e7d1      	b.n	1b36a <att_req_retry+0x32>
	__ASSERT_NO_MSG(data);
   1b3c6:	4d08      	ldr	r5, [pc, #32]	; (1b3e8 <att_req_retry+0xb0>)
   1b3c8:	22a4      	movs	r2, #164	; 0xa4
   1b3ca:	4629      	mov	r1, r5
   1b3cc:	4807      	ldr	r0, [pc, #28]	; (1b3ec <att_req_retry+0xb4>)
   1b3ce:	f00f fe5e 	bl	2b08e <assert_print>
   1b3d2:	21a4      	movs	r1, #164	; 0xa4
   1b3d4:	4628      	mov	r0, r5
   1b3d6:	f00f fe53 	bl	2b080 <assert_post_action>
   1b3da:	e7e5      	b.n	1b3a8 <att_req_retry+0x70>
		return BT_ATT_ERR_AUTHENTICATION;
   1b3dc:	2005      	movs	r0, #5
   1b3de:	e7c4      	b.n	1b36a <att_req_retry+0x32>
		return BT_ATT_ERR_UNLIKELY;
   1b3e0:	200e      	movs	r0, #14
   1b3e2:	e7c2      	b.n	1b36a <att_req_retry+0x32>
   1b3e4:	200009f0 	.word	0x200009f0
   1b3e8:	0003354c 	.word	0x0003354c
   1b3ec:	000318f8 	.word	0x000318f8

0001b3f0 <bt_att_create_pdu>:
{
   1b3f0:	b570      	push	{r4, r5, r6, lr}
   1b3f2:	460e      	mov	r6, r1
   1b3f4:	4615      	mov	r5, r2
	att = att_get(conn);
   1b3f6:	f7ff fc63 	bl	1acc0 <att_get>
	if (!att) {
   1b3fa:	4604      	mov	r4, r0
   1b3fc:	b340      	cbz	r0, 1b450 <bt_att_create_pdu+0x60>
	return list->head;
   1b3fe:	6a84      	ldr	r4, [r0, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b400:	b14c      	cbz	r4, 1b416 <bt_att_create_pdu+0x26>
   1b402:	3cf0      	subs	r4, #240	; 0xf0
   1b404:	d009      	beq.n	1b41a <bt_att_create_pdu+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1b406:	f114 00f0 	adds.w	r0, r4, #240	; 0xf0
   1b40a:	d00b      	beq.n	1b424 <bt_att_create_pdu+0x34>
	return node->next;
   1b40c:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   1b410:	b140      	cbz	r0, 1b424 <bt_att_create_pdu+0x34>
   1b412:	38f0      	subs	r0, #240	; 0xf0
   1b414:	e006      	b.n	1b424 <bt_att_create_pdu+0x34>
   1b416:	4620      	mov	r0, r4
   1b418:	e004      	b.n	1b424 <bt_att_create_pdu+0x34>
   1b41a:	4620      	mov	r0, r4
   1b41c:	e002      	b.n	1b424 <bt_att_create_pdu+0x34>
   1b41e:	4603      	mov	r3, r0
   1b420:	4604      	mov	r4, r0
   1b422:	4618      	mov	r0, r3
   1b424:	b1b4      	cbz	r4, 1b454 <bt_att_create_pdu+0x64>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1b426:	1c6b      	adds	r3, r5, #1
   1b428:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
   1b42a:	4293      	cmp	r3, r2
   1b42c:	d90a      	bls.n	1b444 <bt_att_create_pdu+0x54>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b42e:	2800      	cmp	r0, #0
   1b430:	d0f5      	beq.n	1b41e <bt_att_create_pdu+0x2e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1b432:	f110 03f0 	adds.w	r3, r0, #240	; 0xf0
   1b436:	d0f3      	beq.n	1b420 <bt_att_create_pdu+0x30>
	return node->next;
   1b438:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
   1b43c:	2b00      	cmp	r3, #0
   1b43e:	d0ef      	beq.n	1b420 <bt_att_create_pdu+0x30>
   1b440:	3bf0      	subs	r3, #240	; 0xf0
   1b442:	e7ed      	b.n	1b420 <bt_att_create_pdu+0x30>
		return bt_att_chan_create_pdu(chan, op, len);
   1b444:	462a      	mov	r2, r5
   1b446:	4631      	mov	r1, r6
   1b448:	4620      	mov	r0, r4
   1b44a:	f7ff fdf9 	bl	1b040 <bt_att_chan_create_pdu>
   1b44e:	4604      	mov	r4, r0
}
   1b450:	4620      	mov	r0, r4
   1b452:	bd70      	pop	{r4, r5, r6, pc}
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
   1b454:	1c6a      	adds	r2, r5, #1
   1b456:	2157      	movs	r1, #87	; 0x57
   1b458:	4801      	ldr	r0, [pc, #4]	; (1b460 <bt_att_create_pdu+0x70>)
   1b45a:	f00f fe27 	bl	2b0ac <z_log_minimal_printk>
	return NULL;
   1b45e:	e7f7      	b.n	1b450 <bt_att_create_pdu+0x60>
   1b460:	00033790 	.word	0x00033790

0001b464 <att_read_group_rsp>:
{
   1b464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b468:	b08a      	sub	sp, #40	; 0x28
   1b46a:	4605      	mov	r5, r0
   1b46c:	4688      	mov	r8, r1
   1b46e:	4616      	mov	r6, r2
   1b470:	461f      	mov	r7, r3
	(void)memset(&data, 0, sizeof(data));
   1b472:	2400      	movs	r4, #0
   1b474:	9405      	str	r4, [sp, #20]
   1b476:	9406      	str	r4, [sp, #24]
   1b478:	9407      	str	r4, [sp, #28]
   1b47a:	9408      	str	r4, [sp, #32]
   1b47c:	9409      	str	r4, [sp, #36]	; 0x24
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   1b47e:	2201      	movs	r2, #1
   1b480:	2111      	movs	r1, #17
   1b482:	6840      	ldr	r0, [r0, #4]
   1b484:	f7ff ffb4 	bl	1b3f0 <bt_att_create_pdu>
   1b488:	9007      	str	r0, [sp, #28]
	if (!data.buf) {
   1b48a:	2800      	cmp	r0, #0
   1b48c:	d043      	beq.n	1b516 <att_read_group_rsp+0xb2>
	data.chan = chan;
   1b48e:	9505      	str	r5, [sp, #20]
	data.uuid = uuid;
   1b490:	f8cd 8018 	str.w	r8, [sp, #24]
	return net_buf_simple_add(&buf->b, len);
   1b494:	2101      	movs	r1, #1
   1b496:	3008      	adds	r0, #8
   1b498:	f005 f88c 	bl	205b4 <net_buf_simple_add>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1b49c:	9008      	str	r0, [sp, #32]
	data.rsp->len = 0U;
   1b49e:	4622      	mov	r2, r4
   1b4a0:	7004      	strb	r4, [r0, #0]
	data.group = NULL;
   1b4a2:	9409      	str	r4, [sp, #36]	; 0x24
   1b4a4:	ab05      	add	r3, sp, #20
   1b4a6:	9302      	str	r3, [sp, #8]
   1b4a8:	4b1c      	ldr	r3, [pc, #112]	; (1b51c <att_read_group_rsp+0xb8>)
   1b4aa:	9301      	str	r3, [sp, #4]
   1b4ac:	9400      	str	r4, [sp, #0]
   1b4ae:	4623      	mov	r3, r4
   1b4b0:	4639      	mov	r1, r7
   1b4b2:	4630      	mov	r0, r6
   1b4b4:	f001 fac2 	bl	1ca3c <bt_gatt_foreach_attr_type>
	if (!data.rsp->len) {
   1b4b8:	9b08      	ldr	r3, [sp, #32]
   1b4ba:	781c      	ldrb	r4, [r3, #0]
   1b4bc:	b144      	cbz	r4, 1b4d0 <att_read_group_rsp+0x6c>
	bt_att_chan_send_rsp(chan, data.buf);
   1b4be:	9907      	ldr	r1, [sp, #28]
   1b4c0:	4628      	mov	r0, r5
   1b4c2:	f012 f884 	bl	2d5ce <bt_att_chan_send_rsp>
	return 0;
   1b4c6:	2400      	movs	r4, #0
}
   1b4c8:	4620      	mov	r0, r4
   1b4ca:	b00a      	add	sp, #40	; 0x28
   1b4cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1b4d0:	9b07      	ldr	r3, [sp, #28]
   1b4d2:	695f      	ldr	r7, [r3, #20]
	__ASSERT_NO_MSG(data);
   1b4d4:	b19f      	cbz	r7, 1b4fe <att_read_group_rsp+0x9a>
   1b4d6:	2300      	movs	r3, #0
   1b4d8:	603b      	str	r3, [r7, #0]
   1b4da:	607b      	str	r3, [r7, #4]
   1b4dc:	60bb      	str	r3, [r7, #8]
   1b4de:	60fb      	str	r3, [r7, #12]
   1b4e0:	613b      	str	r3, [r7, #16]
	k_fifo_put(&free_att_tx_meta_data, data);
   1b4e2:	4639      	mov	r1, r7
   1b4e4:	480e      	ldr	r0, [pc, #56]	; (1b520 <att_read_group_rsp+0xbc>)
   1b4e6:	f015 fa7c 	bl	309e2 <k_queue_append>
		net_buf_unref(data.buf);
   1b4ea:	9807      	ldr	r0, [sp, #28]
   1b4ec:	f004 ff4a 	bl	20384 <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, start_handle,
   1b4f0:	230a      	movs	r3, #10
   1b4f2:	4632      	mov	r2, r6
   1b4f4:	2110      	movs	r1, #16
   1b4f6:	4628      	mov	r0, r5
   1b4f8:	f012 f8c4 	bl	2d684 <send_err_rsp>
		return 0;
   1b4fc:	e7e4      	b.n	1b4c8 <att_read_group_rsp+0x64>
	__ASSERT_NO_MSG(data);
   1b4fe:	f8df 8024 	ldr.w	r8, [pc, #36]	; 1b524 <att_read_group_rsp+0xc0>
   1b502:	22a4      	movs	r2, #164	; 0xa4
   1b504:	4641      	mov	r1, r8
   1b506:	4808      	ldr	r0, [pc, #32]	; (1b528 <att_read_group_rsp+0xc4>)
   1b508:	f00f fdc1 	bl	2b08e <assert_print>
   1b50c:	21a4      	movs	r1, #164	; 0xa4
   1b50e:	4640      	mov	r0, r8
   1b510:	f00f fdb6 	bl	2b080 <assert_post_action>
   1b514:	e7df      	b.n	1b4d6 <att_read_group_rsp+0x72>
		return BT_ATT_ERR_UNLIKELY;
   1b516:	240e      	movs	r4, #14
   1b518:	e7d6      	b.n	1b4c8 <att_read_group_rsp+0x64>
   1b51a:	bf00      	nop
   1b51c:	0001a99d 	.word	0x0001a99d
   1b520:	200009f0 	.word	0x200009f0
   1b524:	0003354c 	.word	0x0003354c
   1b528:	000318f8 	.word	0x000318f8

0001b52c <att_read_mult_vl_req>:
{
   1b52c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b52e:	b089      	sub	sp, #36	; 0x24
   1b530:	4606      	mov	r6, r0
   1b532:	460d      	mov	r5, r1
	struct bt_conn *conn = chan->chan.chan.conn;
   1b534:	6844      	ldr	r4, [r0, #4]
	if (!bt_gatt_change_aware(conn, true)) {
   1b536:	2101      	movs	r1, #1
   1b538:	4620      	mov	r0, r4
   1b53a:	f012 fe0b 	bl	2e154 <bt_gatt_change_aware>
   1b53e:	b9a0      	cbnz	r0, 1b56a <att_read_mult_vl_req+0x3e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1b540:	3698      	adds	r6, #152	; 0x98
   1b542:	f3bf 8f5b 	dmb	ish
   1b546:	e856 3f00 	ldrex	r3, [r6]
   1b54a:	f043 0220 	orr.w	r2, r3, #32
   1b54e:	e846 2100 	strex	r1, r2, [r6]
   1b552:	2900      	cmp	r1, #0
   1b554:	d1f7      	bne.n	1b546 <att_read_mult_vl_req+0x1a>
   1b556:	f3bf 8f5b 	dmb	ish
   1b55a:	f013 0f20 	tst.w	r3, #32
   1b55e:	d002      	beq.n	1b566 <att_read_mult_vl_req+0x3a>
			return 0;
   1b560:	2000      	movs	r0, #0
}
   1b562:	b009      	add	sp, #36	; 0x24
   1b564:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1b566:	2012      	movs	r0, #18
   1b568:	e7fb      	b.n	1b562 <att_read_mult_vl_req+0x36>
	(void)memset(&data, 0, sizeof(data));
   1b56a:	2200      	movs	r2, #0
   1b56c:	9204      	str	r2, [sp, #16]
   1b56e:	9205      	str	r2, [sp, #20]
   1b570:	9206      	str	r2, [sp, #24]
   1b572:	9207      	str	r2, [sp, #28]
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
   1b574:	2121      	movs	r1, #33	; 0x21
   1b576:	4620      	mov	r0, r4
   1b578:	f7ff ff3a 	bl	1b3f0 <bt_att_create_pdu>
   1b57c:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   1b57e:	2800      	cmp	r0, #0
   1b580:	d043      	beq.n	1b60a <att_read_mult_vl_req+0xde>
	data.chan = chan;
   1b582:	9604      	str	r6, [sp, #16]
	while (buf->len >= sizeof(uint16_t)) {
   1b584:	89ab      	ldrh	r3, [r5, #12]
   1b586:	2b01      	cmp	r3, #1
   1b588:	d939      	bls.n	1b5fe <att_read_mult_vl_req+0xd2>
	return net_buf_simple_pull_le16(&buf->b);
   1b58a:	f105 0008 	add.w	r0, r5, #8
   1b58e:	f013 fde2 	bl	2f156 <net_buf_simple_pull_le16>
   1b592:	4604      	mov	r4, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1b594:	2301      	movs	r3, #1
   1b596:	f88d 301c 	strb.w	r3, [sp, #28]
   1b59a:	ab04      	add	r3, sp, #16
   1b59c:	9302      	str	r3, [sp, #8]
   1b59e:	4b1c      	ldr	r3, [pc, #112]	; (1b610 <att_read_mult_vl_req+0xe4>)
   1b5a0:	9301      	str	r3, [sp, #4]
   1b5a2:	2200      	movs	r2, #0
   1b5a4:	9200      	str	r2, [sp, #0]
   1b5a6:	4613      	mov	r3, r2
   1b5a8:	4601      	mov	r1, r0
   1b5aa:	f001 fa47 	bl	1ca3c <bt_gatt_foreach_attr_type>
		if (data.err) {
   1b5ae:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1b5b2:	2b00      	cmp	r3, #0
   1b5b4:	d0e6      	beq.n	1b584 <att_read_mult_vl_req+0x58>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1b5b6:	9b06      	ldr	r3, [sp, #24]
   1b5b8:	695f      	ldr	r7, [r3, #20]
	__ASSERT_NO_MSG(data);
   1b5ba:	b1af      	cbz	r7, 1b5e8 <att_read_mult_vl_req+0xbc>
   1b5bc:	2500      	movs	r5, #0
   1b5be:	603d      	str	r5, [r7, #0]
   1b5c0:	607d      	str	r5, [r7, #4]
   1b5c2:	60bd      	str	r5, [r7, #8]
   1b5c4:	60fd      	str	r5, [r7, #12]
   1b5c6:	613d      	str	r5, [r7, #16]
	k_fifo_put(&free_att_tx_meta_data, data);
   1b5c8:	4639      	mov	r1, r7
   1b5ca:	4812      	ldr	r0, [pc, #72]	; (1b614 <att_read_mult_vl_req+0xe8>)
   1b5cc:	f015 fa09 	bl	309e2 <k_queue_append>
			net_buf_unref(data.buf);
   1b5d0:	9806      	ldr	r0, [sp, #24]
   1b5d2:	f004 fed7 	bl	20384 <net_buf_unref>
			send_err_rsp(chan, BT_ATT_OP_READ_MULT_VL_REQ, handle,
   1b5d6:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1b5da:	4622      	mov	r2, r4
   1b5dc:	2120      	movs	r1, #32
   1b5de:	4630      	mov	r0, r6
   1b5e0:	f012 f850 	bl	2d684 <send_err_rsp>
			return 0;
   1b5e4:	4628      	mov	r0, r5
   1b5e6:	e7bc      	b.n	1b562 <att_read_mult_vl_req+0x36>
	__ASSERT_NO_MSG(data);
   1b5e8:	4d0b      	ldr	r5, [pc, #44]	; (1b618 <att_read_mult_vl_req+0xec>)
   1b5ea:	22a4      	movs	r2, #164	; 0xa4
   1b5ec:	4629      	mov	r1, r5
   1b5ee:	480b      	ldr	r0, [pc, #44]	; (1b61c <att_read_mult_vl_req+0xf0>)
   1b5f0:	f00f fd4d 	bl	2b08e <assert_print>
   1b5f4:	21a4      	movs	r1, #164	; 0xa4
   1b5f6:	4628      	mov	r0, r5
   1b5f8:	f00f fd42 	bl	2b080 <assert_post_action>
   1b5fc:	e7de      	b.n	1b5bc <att_read_mult_vl_req+0x90>
	bt_att_chan_send_rsp(chan, data.buf);
   1b5fe:	9906      	ldr	r1, [sp, #24]
   1b600:	4630      	mov	r0, r6
   1b602:	f011 ffe4 	bl	2d5ce <bt_att_chan_send_rsp>
	return 0;
   1b606:	2000      	movs	r0, #0
   1b608:	e7ab      	b.n	1b562 <att_read_mult_vl_req+0x36>
		return BT_ATT_ERR_UNLIKELY;
   1b60a:	200e      	movs	r0, #14
   1b60c:	e7a9      	b.n	1b562 <att_read_mult_vl_req+0x36>
   1b60e:	bf00      	nop
   1b610:	0002d15d 	.word	0x0002d15d
   1b614:	200009f0 	.word	0x200009f0
   1b618:	0003354c 	.word	0x0003354c
   1b61c:	000318f8 	.word	0x000318f8

0001b620 <att_read_mult_req>:
{
   1b620:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b622:	b089      	sub	sp, #36	; 0x24
   1b624:	4606      	mov	r6, r0
   1b626:	460d      	mov	r5, r1
	struct bt_conn *conn = chan->chan.chan.conn;
   1b628:	6844      	ldr	r4, [r0, #4]
	if (!bt_gatt_change_aware(conn, true)) {
   1b62a:	2101      	movs	r1, #1
   1b62c:	4620      	mov	r0, r4
   1b62e:	f012 fd91 	bl	2e154 <bt_gatt_change_aware>
   1b632:	b9a0      	cbnz	r0, 1b65e <att_read_mult_req+0x3e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1b634:	3698      	adds	r6, #152	; 0x98
   1b636:	f3bf 8f5b 	dmb	ish
   1b63a:	e856 3f00 	ldrex	r3, [r6]
   1b63e:	f043 0220 	orr.w	r2, r3, #32
   1b642:	e846 2100 	strex	r1, r2, [r6]
   1b646:	2900      	cmp	r1, #0
   1b648:	d1f7      	bne.n	1b63a <att_read_mult_req+0x1a>
   1b64a:	f3bf 8f5b 	dmb	ish
   1b64e:	f013 0f20 	tst.w	r3, #32
   1b652:	d002      	beq.n	1b65a <att_read_mult_req+0x3a>
			return 0;
   1b654:	2000      	movs	r0, #0
}
   1b656:	b009      	add	sp, #36	; 0x24
   1b658:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1b65a:	2012      	movs	r0, #18
   1b65c:	e7fb      	b.n	1b656 <att_read_mult_req+0x36>
	(void)memset(&data, 0, sizeof(data));
   1b65e:	2200      	movs	r2, #0
   1b660:	9204      	str	r2, [sp, #16]
   1b662:	9205      	str	r2, [sp, #20]
   1b664:	9206      	str	r2, [sp, #24]
   1b666:	9207      	str	r2, [sp, #28]
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   1b668:	210f      	movs	r1, #15
   1b66a:	4620      	mov	r0, r4
   1b66c:	f7ff fec0 	bl	1b3f0 <bt_att_create_pdu>
   1b670:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   1b672:	2800      	cmp	r0, #0
   1b674:	d043      	beq.n	1b6fe <att_read_mult_req+0xde>
	data.chan = chan;
   1b676:	9604      	str	r6, [sp, #16]
	while (buf->len >= sizeof(uint16_t)) {
   1b678:	89ab      	ldrh	r3, [r5, #12]
   1b67a:	2b01      	cmp	r3, #1
   1b67c:	d939      	bls.n	1b6f2 <att_read_mult_req+0xd2>
   1b67e:	f105 0008 	add.w	r0, r5, #8
   1b682:	f013 fd68 	bl	2f156 <net_buf_simple_pull_le16>
   1b686:	4604      	mov	r4, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1b688:	2301      	movs	r3, #1
   1b68a:	f88d 301c 	strb.w	r3, [sp, #28]
   1b68e:	ab04      	add	r3, sp, #16
   1b690:	9302      	str	r3, [sp, #8]
   1b692:	4b1c      	ldr	r3, [pc, #112]	; (1b704 <att_read_mult_req+0xe4>)
   1b694:	9301      	str	r3, [sp, #4]
   1b696:	2200      	movs	r2, #0
   1b698:	9200      	str	r2, [sp, #0]
   1b69a:	4613      	mov	r3, r2
   1b69c:	4601      	mov	r1, r0
   1b69e:	f001 f9cd 	bl	1ca3c <bt_gatt_foreach_attr_type>
		if (data.err) {
   1b6a2:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1b6a6:	2b00      	cmp	r3, #0
   1b6a8:	d0e6      	beq.n	1b678 <att_read_mult_req+0x58>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1b6aa:	9b06      	ldr	r3, [sp, #24]
   1b6ac:	695f      	ldr	r7, [r3, #20]
	__ASSERT_NO_MSG(data);
   1b6ae:	b1af      	cbz	r7, 1b6dc <att_read_mult_req+0xbc>
   1b6b0:	2500      	movs	r5, #0
   1b6b2:	603d      	str	r5, [r7, #0]
   1b6b4:	607d      	str	r5, [r7, #4]
   1b6b6:	60bd      	str	r5, [r7, #8]
   1b6b8:	60fd      	str	r5, [r7, #12]
   1b6ba:	613d      	str	r5, [r7, #16]
	k_fifo_put(&free_att_tx_meta_data, data);
   1b6bc:	4639      	mov	r1, r7
   1b6be:	4812      	ldr	r0, [pc, #72]	; (1b708 <att_read_mult_req+0xe8>)
   1b6c0:	f015 f98f 	bl	309e2 <k_queue_append>
			net_buf_unref(data.buf);
   1b6c4:	9806      	ldr	r0, [sp, #24]
   1b6c6:	f004 fe5d 	bl	20384 <net_buf_unref>
			send_err_rsp(chan, BT_ATT_OP_READ_MULT_REQ, handle,
   1b6ca:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1b6ce:	4622      	mov	r2, r4
   1b6d0:	210e      	movs	r1, #14
   1b6d2:	4630      	mov	r0, r6
   1b6d4:	f011 ffd6 	bl	2d684 <send_err_rsp>
			return 0;
   1b6d8:	4628      	mov	r0, r5
   1b6da:	e7bc      	b.n	1b656 <att_read_mult_req+0x36>
	__ASSERT_NO_MSG(data);
   1b6dc:	4d0b      	ldr	r5, [pc, #44]	; (1b70c <att_read_mult_req+0xec>)
   1b6de:	22a4      	movs	r2, #164	; 0xa4
   1b6e0:	4629      	mov	r1, r5
   1b6e2:	480b      	ldr	r0, [pc, #44]	; (1b710 <att_read_mult_req+0xf0>)
   1b6e4:	f00f fcd3 	bl	2b08e <assert_print>
   1b6e8:	21a4      	movs	r1, #164	; 0xa4
   1b6ea:	4628      	mov	r0, r5
   1b6ec:	f00f fcc8 	bl	2b080 <assert_post_action>
   1b6f0:	e7de      	b.n	1b6b0 <att_read_mult_req+0x90>
	bt_att_chan_send_rsp(chan, data.buf);
   1b6f2:	9906      	ldr	r1, [sp, #24]
   1b6f4:	4630      	mov	r0, r6
   1b6f6:	f011 ff6a 	bl	2d5ce <bt_att_chan_send_rsp>
	return 0;
   1b6fa:	2000      	movs	r0, #0
   1b6fc:	e7ab      	b.n	1b656 <att_read_mult_req+0x36>
		return BT_ATT_ERR_UNLIKELY;
   1b6fe:	200e      	movs	r0, #14
   1b700:	e7a9      	b.n	1b656 <att_read_mult_req+0x36>
   1b702:	bf00      	nop
   1b704:	0002d1c3 	.word	0x0002d1c3
   1b708:	200009f0 	.word	0x200009f0
   1b70c:	0003354c 	.word	0x0003354c
   1b710:	000318f8 	.word	0x000318f8

0001b714 <att_read_rsp>:
{
   1b714:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b718:	b089      	sub	sp, #36	; 0x24
   1b71a:	4604      	mov	r4, r0
   1b71c:	4689      	mov	r9, r1
   1b71e:	4616      	mov	r6, r2
   1b720:	461d      	mov	r5, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   1b722:	6847      	ldr	r7, [r0, #4]
	if (!bt_gatt_change_aware(conn, true)) {
   1b724:	2101      	movs	r1, #1
   1b726:	4638      	mov	r0, r7
   1b728:	f012 fd14 	bl	2e154 <bt_gatt_change_aware>
   1b72c:	b128      	cbz	r0, 1b73a <att_read_rsp+0x26>
	if (!handle) {
   1b72e:	b9c5      	cbnz	r5, 1b762 <att_read_rsp+0x4e>
		return BT_ATT_ERR_INVALID_HANDLE;
   1b730:	2601      	movs	r6, #1
}
   1b732:	4630      	mov	r0, r6
   1b734:	b009      	add	sp, #36	; 0x24
   1b736:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1b73a:	3498      	adds	r4, #152	; 0x98
   1b73c:	f3bf 8f5b 	dmb	ish
   1b740:	e854 3f00 	ldrex	r3, [r4]
   1b744:	f043 0220 	orr.w	r2, r3, #32
   1b748:	e844 2100 	strex	r1, r2, [r4]
   1b74c:	2900      	cmp	r1, #0
   1b74e:	d1f7      	bne.n	1b740 <att_read_rsp+0x2c>
   1b750:	f3bf 8f5b 	dmb	ish
   1b754:	f013 0f20 	tst.w	r3, #32
   1b758:	d001      	beq.n	1b75e <att_read_rsp+0x4a>
			return 0;
   1b75a:	2600      	movs	r6, #0
   1b75c:	e7e9      	b.n	1b732 <att_read_rsp+0x1e>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1b75e:	2612      	movs	r6, #18
   1b760:	e7e7      	b.n	1b732 <att_read_rsp+0x1e>
	(void)memset(&data, 0, sizeof(data));
   1b762:	2200      	movs	r2, #0
   1b764:	9204      	str	r2, [sp, #16]
   1b766:	9205      	str	r2, [sp, #20]
   1b768:	9206      	str	r2, [sp, #24]
   1b76a:	9207      	str	r2, [sp, #28]
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   1b76c:	4631      	mov	r1, r6
   1b76e:	4638      	mov	r0, r7
   1b770:	f7ff fe3e 	bl	1b3f0 <bt_att_create_pdu>
   1b774:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   1b776:	2800      	cmp	r0, #0
   1b778:	d045      	beq.n	1b806 <att_read_rsp+0xf2>
	data.chan = chan;
   1b77a:	9404      	str	r4, [sp, #16]
	data.offset = offset;
   1b77c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   1b780:	f8ad 3014 	strh.w	r3, [sp, #20]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1b784:	2301      	movs	r3, #1
   1b786:	f88d 301c 	strb.w	r3, [sp, #28]
   1b78a:	ab04      	add	r3, sp, #16
   1b78c:	9302      	str	r3, [sp, #8]
   1b78e:	4b1f      	ldr	r3, [pc, #124]	; (1b80c <att_read_rsp+0xf8>)
   1b790:	9301      	str	r3, [sp, #4]
   1b792:	2200      	movs	r2, #0
   1b794:	9200      	str	r2, [sp, #0]
   1b796:	4613      	mov	r3, r2
   1b798:	4629      	mov	r1, r5
   1b79a:	4628      	mov	r0, r5
   1b79c:	f001 f94e 	bl	1ca3c <bt_gatt_foreach_attr_type>
	if (data.err) {
   1b7a0:	f89d 601c 	ldrb.w	r6, [sp, #28]
   1b7a4:	b926      	cbnz	r6, 1b7b0 <att_read_rsp+0x9c>
	bt_att_chan_send_rsp(chan, data.buf);
   1b7a6:	9906      	ldr	r1, [sp, #24]
   1b7a8:	4620      	mov	r0, r4
   1b7aa:	f011 ff10 	bl	2d5ce <bt_att_chan_send_rsp>
	return 0;
   1b7ae:	e7c0      	b.n	1b732 <att_read_rsp+0x1e>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1b7b0:	9b06      	ldr	r3, [sp, #24]
   1b7b2:	f8d3 8014 	ldr.w	r8, [r3, #20]
	__ASSERT_NO_MSG(data);
   1b7b6:	f1b8 0f00 	cmp.w	r8, #0
   1b7ba:	d019      	beq.n	1b7f0 <att_read_rsp+0xdc>
   1b7bc:	2600      	movs	r6, #0
   1b7be:	f8c8 6000 	str.w	r6, [r8]
   1b7c2:	f8c8 6004 	str.w	r6, [r8, #4]
   1b7c6:	f8c8 6008 	str.w	r6, [r8, #8]
   1b7ca:	f8c8 600c 	str.w	r6, [r8, #12]
   1b7ce:	f8c8 6010 	str.w	r6, [r8, #16]
	k_fifo_put(&free_att_tx_meta_data, data);
   1b7d2:	4641      	mov	r1, r8
   1b7d4:	480e      	ldr	r0, [pc, #56]	; (1b810 <att_read_rsp+0xfc>)
   1b7d6:	f015 f904 	bl	309e2 <k_queue_append>
		net_buf_unref(data.buf);
   1b7da:	9806      	ldr	r0, [sp, #24]
   1b7dc:	f004 fdd2 	bl	20384 <net_buf_unref>
		send_err_rsp(chan, op, handle, data.err);
   1b7e0:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1b7e4:	462a      	mov	r2, r5
   1b7e6:	4649      	mov	r1, r9
   1b7e8:	4620      	mov	r0, r4
   1b7ea:	f011 ff4b 	bl	2d684 <send_err_rsp>
		return 0;
   1b7ee:	e7a0      	b.n	1b732 <att_read_rsp+0x1e>
	__ASSERT_NO_MSG(data);
   1b7f0:	4e08      	ldr	r6, [pc, #32]	; (1b814 <att_read_rsp+0x100>)
   1b7f2:	22a4      	movs	r2, #164	; 0xa4
   1b7f4:	4631      	mov	r1, r6
   1b7f6:	4808      	ldr	r0, [pc, #32]	; (1b818 <att_read_rsp+0x104>)
   1b7f8:	f00f fc49 	bl	2b08e <assert_print>
   1b7fc:	21a4      	movs	r1, #164	; 0xa4
   1b7fe:	4630      	mov	r0, r6
   1b800:	f00f fc3e 	bl	2b080 <assert_post_action>
   1b804:	e7da      	b.n	1b7bc <att_read_rsp+0xa8>
		return BT_ATT_ERR_UNLIKELY;
   1b806:	260e      	movs	r6, #14
   1b808:	e793      	b.n	1b732 <att_read_rsp+0x1e>
   1b80a:	bf00      	nop
   1b80c:	0002d1c3 	.word	0x0002d1c3
   1b810:	200009f0 	.word	0x200009f0
   1b814:	0003354c 	.word	0x0003354c
   1b818:	000318f8 	.word	0x000318f8

0001b81c <att_read_type_rsp>:
{
   1b81c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b820:	b08a      	sub	sp, #40	; 0x28
   1b822:	4605      	mov	r5, r0
   1b824:	4688      	mov	r8, r1
   1b826:	4616      	mov	r6, r2
   1b828:	461f      	mov	r7, r3
	(void)memset(&data, 0, sizeof(data));
   1b82a:	2400      	movs	r4, #0
   1b82c:	9404      	str	r4, [sp, #16]
   1b82e:	9405      	str	r4, [sp, #20]
   1b830:	9406      	str	r4, [sp, #24]
   1b832:	9407      	str	r4, [sp, #28]
   1b834:	9408      	str	r4, [sp, #32]
   1b836:	9409      	str	r4, [sp, #36]	; 0x24
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   1b838:	2201      	movs	r2, #1
   1b83a:	2109      	movs	r1, #9
   1b83c:	6840      	ldr	r0, [r0, #4]
   1b83e:	f7ff fdd7 	bl	1b3f0 <bt_att_create_pdu>
   1b842:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   1b844:	2800      	cmp	r0, #0
   1b846:	d044      	beq.n	1b8d2 <att_read_type_rsp+0xb6>
	data.chan = chan;
   1b848:	9504      	str	r5, [sp, #16]
	data.uuid = uuid;
   1b84a:	f8cd 8014 	str.w	r8, [sp, #20]
	return net_buf_simple_add(&buf->b, len);
   1b84e:	2101      	movs	r1, #1
   1b850:	3008      	adds	r0, #8
   1b852:	f004 feaf 	bl	205b4 <net_buf_simple_add>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1b856:	9007      	str	r0, [sp, #28]
	data.rsp->len = 0U;
   1b858:	4622      	mov	r2, r4
   1b85a:	7004      	strb	r4, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1b85c:	230a      	movs	r3, #10
   1b85e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   1b862:	ab04      	add	r3, sp, #16
   1b864:	9302      	str	r3, [sp, #8]
   1b866:	4b1c      	ldr	r3, [pc, #112]	; (1b8d8 <att_read_type_rsp+0xbc>)
   1b868:	9301      	str	r3, [sp, #4]
   1b86a:	9400      	str	r4, [sp, #0]
   1b86c:	4623      	mov	r3, r4
   1b86e:	4639      	mov	r1, r7
   1b870:	4630      	mov	r0, r6
   1b872:	f001 f8e3 	bl	1ca3c <bt_gatt_foreach_attr_type>
	if (data.err) {
   1b876:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
   1b87a:	b93c      	cbnz	r4, 1b88c <att_read_type_rsp+0x70>
	bt_att_chan_send_rsp(chan, data.buf);
   1b87c:	9906      	ldr	r1, [sp, #24]
   1b87e:	4628      	mov	r0, r5
   1b880:	f011 fea5 	bl	2d5ce <bt_att_chan_send_rsp>
}
   1b884:	4620      	mov	r0, r4
   1b886:	b00a      	add	sp, #40	; 0x28
   1b888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1b88c:	9b06      	ldr	r3, [sp, #24]
   1b88e:	695f      	ldr	r7, [r3, #20]
	__ASSERT_NO_MSG(data);
   1b890:	b1a7      	cbz	r7, 1b8bc <att_read_type_rsp+0xa0>
   1b892:	2400      	movs	r4, #0
   1b894:	603c      	str	r4, [r7, #0]
   1b896:	607c      	str	r4, [r7, #4]
   1b898:	60bc      	str	r4, [r7, #8]
   1b89a:	60fc      	str	r4, [r7, #12]
   1b89c:	613c      	str	r4, [r7, #16]
	k_fifo_put(&free_att_tx_meta_data, data);
   1b89e:	4639      	mov	r1, r7
   1b8a0:	480e      	ldr	r0, [pc, #56]	; (1b8dc <att_read_type_rsp+0xc0>)
   1b8a2:	f015 f89e 	bl	309e2 <k_queue_append>
		net_buf_unref(data.buf);
   1b8a6:	9806      	ldr	r0, [sp, #24]
   1b8a8:	f004 fd6c 	bl	20384 <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_READ_TYPE_REQ, start_handle,
   1b8ac:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   1b8b0:	4632      	mov	r2, r6
   1b8b2:	2108      	movs	r1, #8
   1b8b4:	4628      	mov	r0, r5
   1b8b6:	f011 fee5 	bl	2d684 <send_err_rsp>
		return 0;
   1b8ba:	e7e3      	b.n	1b884 <att_read_type_rsp+0x68>
	__ASSERT_NO_MSG(data);
   1b8bc:	4c08      	ldr	r4, [pc, #32]	; (1b8e0 <att_read_type_rsp+0xc4>)
   1b8be:	22a4      	movs	r2, #164	; 0xa4
   1b8c0:	4621      	mov	r1, r4
   1b8c2:	4808      	ldr	r0, [pc, #32]	; (1b8e4 <att_read_type_rsp+0xc8>)
   1b8c4:	f00f fbe3 	bl	2b08e <assert_print>
   1b8c8:	21a4      	movs	r1, #164	; 0xa4
   1b8ca:	4620      	mov	r0, r4
   1b8cc:	f00f fbd8 	bl	2b080 <assert_post_action>
   1b8d0:	e7df      	b.n	1b892 <att_read_type_rsp+0x76>
		return BT_ATT_ERR_UNLIKELY;
   1b8d2:	240e      	movs	r4, #14
   1b8d4:	e7d6      	b.n	1b884 <att_read_type_rsp+0x68>
   1b8d6:	bf00      	nop
   1b8d8:	0001aa51 	.word	0x0001aa51
   1b8dc:	200009f0 	.word	0x200009f0
   1b8e0:	0003354c 	.word	0x0003354c
   1b8e4:	000318f8 	.word	0x000318f8

0001b8e8 <att_find_type_rsp>:
{
   1b8e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b8ea:	b08b      	sub	sp, #44	; 0x2c
   1b8ec:	4604      	mov	r4, r0
   1b8ee:	460e      	mov	r6, r1
   1b8f0:	4615      	mov	r5, r2
   1b8f2:	461f      	mov	r7, r3
	(void)memset(&data, 0, sizeof(data));
   1b8f4:	2200      	movs	r2, #0
   1b8f6:	9205      	str	r2, [sp, #20]
   1b8f8:	9206      	str	r2, [sp, #24]
   1b8fa:	9207      	str	r2, [sp, #28]
   1b8fc:	9208      	str	r2, [sp, #32]
   1b8fe:	9209      	str	r2, [sp, #36]	; 0x24
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   1b900:	2107      	movs	r1, #7
   1b902:	6840      	ldr	r0, [r0, #4]
   1b904:	f7ff fd74 	bl	1b3f0 <bt_att_create_pdu>
   1b908:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   1b90a:	2800      	cmp	r0, #0
   1b90c:	d041      	beq.n	1b992 <att_find_type_rsp+0xaa>
	data.chan = chan;
   1b90e:	9405      	str	r4, [sp, #20]
	data.group = NULL;
   1b910:	2200      	movs	r2, #0
   1b912:	9207      	str	r2, [sp, #28]
	data.value = value;
   1b914:	9708      	str	r7, [sp, #32]
	data.value_len = value_len;
   1b916:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   1b91a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1b91e:	230a      	movs	r3, #10
   1b920:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   1b924:	ab05      	add	r3, sp, #20
   1b926:	9302      	str	r3, [sp, #8]
   1b928:	4b1b      	ldr	r3, [pc, #108]	; (1b998 <att_find_type_rsp+0xb0>)
   1b92a:	9301      	str	r3, [sp, #4]
   1b92c:	9200      	str	r2, [sp, #0]
   1b92e:	4613      	mov	r3, r2
   1b930:	4629      	mov	r1, r5
   1b932:	4630      	mov	r0, r6
   1b934:	f001 f882 	bl	1ca3c <bt_gatt_foreach_attr_type>
	if (data.err) {
   1b938:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
   1b93c:	b935      	cbnz	r5, 1b94c <att_find_type_rsp+0x64>
	bt_att_chan_send_rsp(chan, data.buf);
   1b93e:	9906      	ldr	r1, [sp, #24]
   1b940:	4620      	mov	r0, r4
   1b942:	f011 fe44 	bl	2d5ce <bt_att_chan_send_rsp>
}
   1b946:	4628      	mov	r0, r5
   1b948:	b00b      	add	sp, #44	; 0x2c
   1b94a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1b94c:	9b06      	ldr	r3, [sp, #24]
   1b94e:	695f      	ldr	r7, [r3, #20]
	__ASSERT_NO_MSG(data);
   1b950:	b1a7      	cbz	r7, 1b97c <att_find_type_rsp+0x94>
   1b952:	2500      	movs	r5, #0
   1b954:	603d      	str	r5, [r7, #0]
   1b956:	607d      	str	r5, [r7, #4]
   1b958:	60bd      	str	r5, [r7, #8]
   1b95a:	60fd      	str	r5, [r7, #12]
   1b95c:	613d      	str	r5, [r7, #16]
	k_fifo_put(&free_att_tx_meta_data, data);
   1b95e:	4639      	mov	r1, r7
   1b960:	480e      	ldr	r0, [pc, #56]	; (1b99c <att_find_type_rsp+0xb4>)
   1b962:	f015 f83e 	bl	309e2 <k_queue_append>
		net_buf_unref(data.buf);
   1b966:	9806      	ldr	r0, [sp, #24]
   1b968:	f004 fd0c 	bl	20384 <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
   1b96c:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   1b970:	4632      	mov	r2, r6
   1b972:	2106      	movs	r1, #6
   1b974:	4620      	mov	r0, r4
   1b976:	f011 fe85 	bl	2d684 <send_err_rsp>
		return 0;
   1b97a:	e7e4      	b.n	1b946 <att_find_type_rsp+0x5e>
	__ASSERT_NO_MSG(data);
   1b97c:	4d08      	ldr	r5, [pc, #32]	; (1b9a0 <att_find_type_rsp+0xb8>)
   1b97e:	22a4      	movs	r2, #164	; 0xa4
   1b980:	4629      	mov	r1, r5
   1b982:	4808      	ldr	r0, [pc, #32]	; (1b9a4 <att_find_type_rsp+0xbc>)
   1b984:	f00f fb83 	bl	2b08e <assert_print>
   1b988:	21a4      	movs	r1, #164	; 0xa4
   1b98a:	4628      	mov	r0, r5
   1b98c:	f00f fb78 	bl	2b080 <assert_post_action>
   1b990:	e7df      	b.n	1b952 <att_find_type_rsp+0x6a>
		return BT_ATT_ERR_UNLIKELY;
   1b992:	250e      	movs	r5, #14
   1b994:	e7d7      	b.n	1b946 <att_find_type_rsp+0x5e>
   1b996:	bf00      	nop
   1b998:	0001aaf9 	.word	0x0001aaf9
   1b99c:	200009f0 	.word	0x200009f0
   1b9a0:	0003354c 	.word	0x0003354c
   1b9a4:	000318f8 	.word	0x000318f8

0001b9a8 <att_find_info_rsp>:
{
   1b9a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b9aa:	b089      	sub	sp, #36	; 0x24
   1b9ac:	4604      	mov	r4, r0
   1b9ae:	460d      	mov	r5, r1
   1b9b0:	4616      	mov	r6, r2
	(void)memset(&data, 0, sizeof(data));
   1b9b2:	2200      	movs	r2, #0
   1b9b4:	9204      	str	r2, [sp, #16]
   1b9b6:	9205      	str	r2, [sp, #20]
   1b9b8:	9206      	str	r2, [sp, #24]
   1b9ba:	9207      	str	r2, [sp, #28]
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   1b9bc:	2105      	movs	r1, #5
   1b9be:	6840      	ldr	r0, [r0, #4]
   1b9c0:	f7ff fd16 	bl	1b3f0 <bt_att_create_pdu>
   1b9c4:	9005      	str	r0, [sp, #20]
	if (!data.buf) {
   1b9c6:	2800      	cmp	r0, #0
   1b9c8:	d037      	beq.n	1ba3a <att_find_info_rsp+0x92>
	data.chan = chan;
   1b9ca:	9404      	str	r4, [sp, #16]
   1b9cc:	ab04      	add	r3, sp, #16
   1b9ce:	9302      	str	r3, [sp, #8]
   1b9d0:	4b1b      	ldr	r3, [pc, #108]	; (1ba40 <att_find_info_rsp+0x98>)
   1b9d2:	9301      	str	r3, [sp, #4]
   1b9d4:	2200      	movs	r2, #0
   1b9d6:	9200      	str	r2, [sp, #0]
   1b9d8:	4613      	mov	r3, r2
   1b9da:	4631      	mov	r1, r6
   1b9dc:	4628      	mov	r0, r5
   1b9de:	f001 f82d 	bl	1ca3c <bt_gatt_foreach_attr_type>
	if (!data.rsp) {
   1b9e2:	9b06      	ldr	r3, [sp, #24]
   1b9e4:	b133      	cbz	r3, 1b9f4 <att_find_info_rsp+0x4c>
	bt_att_chan_send_rsp(chan, data.buf);
   1b9e6:	9905      	ldr	r1, [sp, #20]
   1b9e8:	4620      	mov	r0, r4
   1b9ea:	f011 fdf0 	bl	2d5ce <bt_att_chan_send_rsp>
	return 0;
   1b9ee:	2000      	movs	r0, #0
}
   1b9f0:	b009      	add	sp, #36	; 0x24
   1b9f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1b9f4:	9b05      	ldr	r3, [sp, #20]
   1b9f6:	695f      	ldr	r7, [r3, #20]
	__ASSERT_NO_MSG(data);
   1b9f8:	b1a7      	cbz	r7, 1ba24 <att_find_info_rsp+0x7c>
   1b9fa:	2600      	movs	r6, #0
   1b9fc:	603e      	str	r6, [r7, #0]
   1b9fe:	607e      	str	r6, [r7, #4]
   1ba00:	60be      	str	r6, [r7, #8]
   1ba02:	60fe      	str	r6, [r7, #12]
   1ba04:	613e      	str	r6, [r7, #16]
	k_fifo_put(&free_att_tx_meta_data, data);
   1ba06:	4639      	mov	r1, r7
   1ba08:	480e      	ldr	r0, [pc, #56]	; (1ba44 <att_find_info_rsp+0x9c>)
   1ba0a:	f014 ffea 	bl	309e2 <k_queue_append>
		net_buf_unref(data.buf);
   1ba0e:	9805      	ldr	r0, [sp, #20]
   1ba10:	f004 fcb8 	bl	20384 <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_FIND_INFO_REQ, start_handle,
   1ba14:	230a      	movs	r3, #10
   1ba16:	462a      	mov	r2, r5
   1ba18:	2104      	movs	r1, #4
   1ba1a:	4620      	mov	r0, r4
   1ba1c:	f011 fe32 	bl	2d684 <send_err_rsp>
		return 0;
   1ba20:	4630      	mov	r0, r6
   1ba22:	e7e5      	b.n	1b9f0 <att_find_info_rsp+0x48>
	__ASSERT_NO_MSG(data);
   1ba24:	4e08      	ldr	r6, [pc, #32]	; (1ba48 <att_find_info_rsp+0xa0>)
   1ba26:	22a4      	movs	r2, #164	; 0xa4
   1ba28:	4631      	mov	r1, r6
   1ba2a:	4808      	ldr	r0, [pc, #32]	; (1ba4c <att_find_info_rsp+0xa4>)
   1ba2c:	f00f fb2f 	bl	2b08e <assert_print>
   1ba30:	21a4      	movs	r1, #164	; 0xa4
   1ba32:	4630      	mov	r0, r6
   1ba34:	f00f fb24 	bl	2b080 <assert_post_action>
   1ba38:	e7df      	b.n	1b9fa <att_find_info_rsp+0x52>
		return BT_ATT_ERR_UNLIKELY;
   1ba3a:	200e      	movs	r0, #14
   1ba3c:	e7d8      	b.n	1b9f0 <att_find_info_rsp+0x48>
   1ba3e:	bf00      	nop
   1ba40:	0002d20b 	.word	0x0002d20b
   1ba44:	200009f0 	.word	0x200009f0
   1ba48:	0003354c 	.word	0x0003354c
   1ba4c:	000318f8 	.word	0x000318f8

0001ba50 <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
   1ba50:	b510      	push	{r4, lr}
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
   1ba52:	2400      	movs	r4, #0
   1ba54:	e008      	b.n	1ba68 <bt_att_init+0x18>
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   1ba56:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1ba5a:	0093      	lsls	r3, r2, #2
   1ba5c:	4905      	ldr	r1, [pc, #20]	; (1ba74 <bt_att_init+0x24>)
   1ba5e:	4419      	add	r1, r3
   1ba60:	4805      	ldr	r0, [pc, #20]	; (1ba78 <bt_att_init+0x28>)
   1ba62:	f014 ffbe 	bl	309e2 <k_queue_append>
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
   1ba66:	3401      	adds	r4, #1
   1ba68:	2c02      	cmp	r4, #2
   1ba6a:	d9f4      	bls.n	1ba56 <bt_att_init+0x6>
	}

	bt_gatt_init();
   1ba6c:	f000 ff54 	bl	1c918 <bt_gatt_init>

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
   1ba70:	bd10      	pop	{r4, pc}
   1ba72:	bf00      	nop
   1ba74:	2000270c 	.word	0x2000270c
   1ba78:	200009f0 	.word	0x200009f0

0001ba7c <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   1ba7c:	b530      	push	{r4, r5, lr}
   1ba7e:	b083      	sub	sp, #12
   1ba80:	4605      	mov	r5, r0
   1ba82:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   1ba84:	2300      	movs	r3, #0
   1ba86:	9301      	str	r3, [sp, #4]
   1ba88:	f00c fdae 	bl	285e8 <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   1ba8c:	4b0d      	ldr	r3, [pc, #52]	; (1bac4 <bt_att_req_alloc+0x48>)
   1ba8e:	681b      	ldr	r3, [r3, #0]
   1ba90:	4283      	cmp	r3, r0
   1ba92:	d012      	beq.n	1baba <bt_att_req_alloc+0x3e>
		 */
		timeout = K_NO_WAIT;
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   1ba94:	462a      	mov	r2, r5
   1ba96:	4623      	mov	r3, r4
   1ba98:	a901      	add	r1, sp, #4
   1ba9a:	480b      	ldr	r0, [pc, #44]	; (1bac8 <bt_att_req_alloc+0x4c>)
   1ba9c:	f00a f942 	bl	25d24 <k_mem_slab_alloc>
   1baa0:	b970      	cbnz	r0, 1bac0 <bt_att_req_alloc+0x44>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   1baa2:	9b01      	ldr	r3, [sp, #4]
   1baa4:	2200      	movs	r2, #0
   1baa6:	601a      	str	r2, [r3, #0]
   1baa8:	605a      	str	r2, [r3, #4]
   1baaa:	609a      	str	r2, [r3, #8]
   1baac:	60da      	str	r2, [r3, #12]
   1baae:	611a      	str	r2, [r3, #16]
   1bab0:	615a      	str	r2, [r3, #20]
   1bab2:	619a      	str	r2, [r3, #24]

	return req;
   1bab4:	9801      	ldr	r0, [sp, #4]
}
   1bab6:	b003      	add	sp, #12
   1bab8:	bd30      	pop	{r4, r5, pc}
		timeout = K_NO_WAIT;
   1baba:	2500      	movs	r5, #0
   1babc:	462c      	mov	r4, r5
   1babe:	e7e9      	b.n	1ba94 <bt_att_req_alloc+0x18>
		return NULL;
   1bac0:	2000      	movs	r0, #0
   1bac2:	e7f8      	b.n	1bab6 <bt_att_req_alloc+0x3a>
   1bac4:	200026ec 	.word	0x200026ec
   1bac8:	2000097c 	.word	0x2000097c

0001bacc <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   1bacc:	b530      	push	{r4, r5, lr}
   1bace:	b083      	sub	sp, #12
   1bad0:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
   1bad2:	6883      	ldr	r3, [r0, #8]
   1bad4:	b18b      	cbz	r3, 1bafa <bt_att_req_free+0x2e>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
   1bad6:	695c      	ldr	r4, [r3, #20]
	__ASSERT_NO_MSG(data);
   1bad8:	b1ac      	cbz	r4, 1bb06 <bt_att_req_free+0x3a>
   1bada:	2500      	movs	r5, #0
   1badc:	6025      	str	r5, [r4, #0]
   1bade:	6065      	str	r5, [r4, #4]
   1bae0:	60a5      	str	r5, [r4, #8]
   1bae2:	60e5      	str	r5, [r4, #12]
   1bae4:	6125      	str	r5, [r4, #16]
	k_fifo_put(&free_att_tx_meta_data, data);
   1bae6:	4621      	mov	r1, r4
   1bae8:	480c      	ldr	r0, [pc, #48]	; (1bb1c <bt_att_req_free+0x50>)
   1baea:	f014 ff7a 	bl	309e2 <k_queue_append>
		net_buf_unref(req->buf);
   1baee:	9b01      	ldr	r3, [sp, #4]
   1baf0:	6898      	ldr	r0, [r3, #8]
   1baf2:	f004 fc47 	bl	20384 <net_buf_unref>
		req->buf = NULL;
   1baf6:	9b01      	ldr	r3, [sp, #4]
   1baf8:	609d      	str	r5, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   1bafa:	a901      	add	r1, sp, #4
   1bafc:	4808      	ldr	r0, [pc, #32]	; (1bb20 <bt_att_req_free+0x54>)
   1bafe:	f00a f975 	bl	25dec <k_mem_slab_free>
}
   1bb02:	b003      	add	sp, #12
   1bb04:	bd30      	pop	{r4, r5, pc}
	__ASSERT_NO_MSG(data);
   1bb06:	4d07      	ldr	r5, [pc, #28]	; (1bb24 <bt_att_req_free+0x58>)
   1bb08:	22a4      	movs	r2, #164	; 0xa4
   1bb0a:	4629      	mov	r1, r5
   1bb0c:	4806      	ldr	r0, [pc, #24]	; (1bb28 <bt_att_req_free+0x5c>)
   1bb0e:	f00f fabe 	bl	2b08e <assert_print>
   1bb12:	21a4      	movs	r1, #164	; 0xa4
   1bb14:	4628      	mov	r0, r5
   1bb16:	f00f fab3 	bl	2b080 <assert_post_action>
   1bb1a:	e7de      	b.n	1bada <bt_att_req_free+0xe>
   1bb1c:	200009f0 	.word	0x200009f0
   1bb20:	2000097c 	.word	0x2000097c
   1bb24:	0003354c 	.word	0x0003354c
   1bb28:	000318f8 	.word	0x000318f8

0001bb2c <att_handle_rsp>:
{
   1bb2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1bb30:	b082      	sub	sp, #8
   1bb32:	4604      	mov	r4, r0
   1bb34:	460f      	mov	r7, r1
   1bb36:	4691      	mov	r9, r2
   1bb38:	461e      	mov	r6, r3
	k_work_cancel_delayable(&chan->timeout_work);
   1bb3a:	30c0      	adds	r0, #192	; 0xc0
   1bb3c:	f00b fb6a 	bl	27214 <k_work_cancel_delayable>
	if (!chan->req) {
   1bb40:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   1bb44:	b1f8      	cbz	r0, 1bb86 <att_handle_rsp+0x5a>
	if (chan->req == &cancel) {
   1bb46:	4b15      	ldr	r3, [pc, #84]	; (1bb9c <att_handle_rsp+0x70>)
   1bb48:	4298      	cmp	r0, r3
   1bb4a:	d022      	beq.n	1bb92 <att_handle_rsp+0x66>
	func = chan->req->func;
   1bb4c:	6845      	ldr	r5, [r0, #4]
	chan->req->func = NULL;
   1bb4e:	f04f 0a00 	mov.w	sl, #0
   1bb52:	f8c0 a004 	str.w	sl, [r0, #4]
	params = chan->req->user_data;
   1bb56:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   1bb5a:	f8d0 8018 	ldr.w	r8, [r0, #24]
	bt_att_req_free(chan->req);
   1bb5e:	f7ff ffb5 	bl	1bacc <bt_att_req_free>
	chan->req = NULL;
   1bb62:	f8c4 a09c 	str.w	sl, [r4, #156]	; 0x9c
	att_req_send_process(chan->att);
   1bb66:	6820      	ldr	r0, [r4, #0]
   1bb68:	f011 fc43 	bl	2d3f2 <att_req_send_process>
	if (func) {
   1bb6c:	b13d      	cbz	r5, 1bb7e <att_handle_rsp+0x52>
		func(chan->att->conn, err, pdu, len, params);
   1bb6e:	6823      	ldr	r3, [r4, #0]
   1bb70:	6818      	ldr	r0, [r3, #0]
   1bb72:	f8cd 8000 	str.w	r8, [sp]
   1bb76:	464b      	mov	r3, r9
   1bb78:	463a      	mov	r2, r7
   1bb7a:	4631      	mov	r1, r6
   1bb7c:	47a8      	blx	r5
}
   1bb7e:	2000      	movs	r0, #0
   1bb80:	b002      	add	sp, #8
   1bb82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		BT_WARN("No pending ATT request");
   1bb86:	2157      	movs	r1, #87	; 0x57
   1bb88:	4805      	ldr	r0, [pc, #20]	; (1bba0 <att_handle_rsp+0x74>)
   1bb8a:	f00f fa8f 	bl	2b0ac <z_log_minimal_printk>
	bt_att_func_t func = NULL;
   1bb8e:	2500      	movs	r5, #0
		goto process;
   1bb90:	e7e9      	b.n	1bb66 <att_handle_rsp+0x3a>
		chan->req = NULL;
   1bb92:	2500      	movs	r5, #0
   1bb94:	f8c4 509c 	str.w	r5, [r4, #156]	; 0x9c
		goto process;
   1bb98:	e7e5      	b.n	1bb66 <att_handle_rsp+0x3a>
   1bb9a:	bf00      	nop
   1bb9c:	200026f0 	.word	0x200026f0
   1bba0:	000337b0 	.word	0x000337b0

0001bba4 <att_chan_detach>:
{
   1bba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bba6:	4606      	mov	r6, r0
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   1bba8:	4602      	mov	r2, r0
   1bbaa:	f852 0bf0 	ldr.w	r0, [r2], #240
   1bbae:	f100 0428 	add.w	r4, r0, #40	; 0x28
	return list->head;
   1bbb2:	6a83      	ldr	r3, [r0, #40]	; 0x28
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1bbb4:	2100      	movs	r1, #0
   1bbb6:	e00b      	b.n	1bbd0 <att_chan_detach+0x2c>
	return node->next;
   1bbb8:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
	list->head = node;
   1bbbc:	6283      	str	r3, [r0, #40]	; 0x28
	return list->tail;
   1bbbe:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_REMOVE(slist, snode)
   1bbc0:	428a      	cmp	r2, r1
   1bbc2:	d110      	bne.n	1bbe6 <att_chan_detach+0x42>
	list->tail = node;
   1bbc4:	6063      	str	r3, [r4, #4]
}
   1bbc6:	e00e      	b.n	1bbe6 <att_chan_detach+0x42>
	list->tail = node;
   1bbc8:	6061      	str	r1, [r4, #4]
}
   1bbca:	e00c      	b.n	1bbe6 <att_chan_detach+0x42>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1bbcc:	4619      	mov	r1, r3
   1bbce:	681b      	ldr	r3, [r3, #0]
   1bbd0:	b1d3      	cbz	r3, 1bc08 <att_chan_detach+0x64>
   1bbd2:	429a      	cmp	r2, r3
   1bbd4:	d1fa      	bne.n	1bbcc <att_chan_detach+0x28>
Z_GENLIST_REMOVE(slist, snode)
   1bbd6:	2900      	cmp	r1, #0
   1bbd8:	d0ee      	beq.n	1bbb8 <att_chan_detach+0x14>
	return node->next;
   1bbda:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
	parent->next = child;
   1bbde:	600b      	str	r3, [r1, #0]
	return list->tail;
   1bbe0:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_REMOVE(slist, snode)
   1bbe2:	429a      	cmp	r2, r3
   1bbe4:	d0f0      	beq.n	1bbc8 <att_chan_detach+0x24>
	parent->next = child;
   1bbe6:	2300      	movs	r3, #0
   1bbe8:	f8c6 30f0 	str.w	r3, [r6, #240]	; 0xf0
Z_GENLIST_REMOVE(slist, snode)
   1bbec:	e00c      	b.n	1bc08 <att_chan_detach+0x64>
   1bbee:	2300      	movs	r3, #0
   1bbf0:	6023      	str	r3, [r4, #0]
   1bbf2:	6063      	str	r3, [r4, #4]
   1bbf4:	60a3      	str	r3, [r4, #8]
   1bbf6:	60e3      	str	r3, [r4, #12]
   1bbf8:	6123      	str	r3, [r4, #16]
	k_fifo_put(&free_att_tx_meta_data, data);
   1bbfa:	4621      	mov	r1, r4
   1bbfc:	4813      	ldr	r0, [pc, #76]	; (1bc4c <att_chan_detach+0xa8>)
   1bbfe:	f014 fef0 	bl	309e2 <k_queue_append>
		net_buf_unref(buf);
   1bc02:	4628      	mov	r0, r5
   1bc04:	f004 fbbe 	bl	20384 <net_buf_unref>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   1bc08:	2200      	movs	r2, #0
   1bc0a:	2300      	movs	r3, #0
   1bc0c:	f106 00a0 	add.w	r0, r6, #160	; 0xa0
   1bc10:	f004 fa4a 	bl	200a8 <net_buf_get>
   1bc14:	4605      	mov	r5, r0
   1bc16:	b168      	cbz	r0, 1bc34 <att_chan_detach+0x90>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1bc18:	696c      	ldr	r4, [r5, #20]
	__ASSERT_NO_MSG(data);
   1bc1a:	2c00      	cmp	r4, #0
   1bc1c:	d1e7      	bne.n	1bbee <att_chan_detach+0x4a>
   1bc1e:	4f0c      	ldr	r7, [pc, #48]	; (1bc50 <att_chan_detach+0xac>)
   1bc20:	22a4      	movs	r2, #164	; 0xa4
   1bc22:	4639      	mov	r1, r7
   1bc24:	480b      	ldr	r0, [pc, #44]	; (1bc54 <att_chan_detach+0xb0>)
   1bc26:	f00f fa32 	bl	2b08e <assert_print>
   1bc2a:	21a4      	movs	r1, #164	; 0xa4
   1bc2c:	4638      	mov	r0, r7
   1bc2e:	f00f fa27 	bl	2b080 <assert_post_action>
   1bc32:	e7dc      	b.n	1bbee <att_chan_detach+0x4a>
	if (chan->req) {
   1bc34:	f8d6 309c 	ldr.w	r3, [r6, #156]	; 0x9c
   1bc38:	b12b      	cbz	r3, 1bc46 <att_chan_detach+0xa2>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   1bc3a:	230e      	movs	r3, #14
   1bc3c:	2200      	movs	r2, #0
   1bc3e:	4611      	mov	r1, r2
   1bc40:	4630      	mov	r0, r6
   1bc42:	f7ff ff73 	bl	1bb2c <att_handle_rsp>
	chan->att = NULL;
   1bc46:	2300      	movs	r3, #0
   1bc48:	6033      	str	r3, [r6, #0]
}
   1bc4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bc4c:	200009f0 	.word	0x200009f0
   1bc50:	0003354c 	.word	0x0003354c
   1bc54:	000318f8 	.word	0x000318f8

0001bc58 <att_reset>:
{
   1bc58:	b570      	push	{r4, r5, r6, lr}
   1bc5a:	b084      	sub	sp, #16
   1bc5c:	9003      	str	r0, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   1bc5e:	e00c      	b.n	1bc7a <att_reset+0x22>
   1bc60:	2300      	movs	r3, #0
   1bc62:	6023      	str	r3, [r4, #0]
   1bc64:	6063      	str	r3, [r4, #4]
   1bc66:	60a3      	str	r3, [r4, #8]
   1bc68:	60e3      	str	r3, [r4, #12]
   1bc6a:	6123      	str	r3, [r4, #16]
	k_fifo_put(&free_att_tx_meta_data, data);
   1bc6c:	4621      	mov	r1, r4
   1bc6e:	481e      	ldr	r0, [pc, #120]	; (1bce8 <att_reset+0x90>)
   1bc70:	f014 feb7 	bl	309e2 <k_queue_append>
		net_buf_unref(buf);
   1bc74:	4628      	mov	r0, r5
   1bc76:	f004 fb85 	bl	20384 <net_buf_unref>
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   1bc7a:	2200      	movs	r2, #0
   1bc7c:	2300      	movs	r3, #0
   1bc7e:	9803      	ldr	r0, [sp, #12]
   1bc80:	300c      	adds	r0, #12
   1bc82:	f004 fa11 	bl	200a8 <net_buf_get>
   1bc86:	4605      	mov	r5, r0
   1bc88:	b1c8      	cbz	r0, 1bcbe <att_reset+0x66>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1bc8a:	696c      	ldr	r4, [r5, #20]
	__ASSERT_NO_MSG(data);
   1bc8c:	2c00      	cmp	r4, #0
   1bc8e:	d1e7      	bne.n	1bc60 <att_reset+0x8>
   1bc90:	4e16      	ldr	r6, [pc, #88]	; (1bcec <att_reset+0x94>)
   1bc92:	22a4      	movs	r2, #164	; 0xa4
   1bc94:	4631      	mov	r1, r6
   1bc96:	4816      	ldr	r0, [pc, #88]	; (1bcf0 <att_reset+0x98>)
   1bc98:	f00f f9f9 	bl	2b08e <assert_print>
   1bc9c:	21a4      	movs	r1, #164	; 0xa4
   1bc9e:	4630      	mov	r0, r6
   1bca0:	f00f f9ee 	bl	2b080 <assert_post_action>
   1bca4:	e7dc      	b.n	1bc60 <att_reset+0x8>
	list->tail = node;
   1bca6:	609a      	str	r2, [r3, #8]
}
   1bca8:	e011      	b.n	1bcce <att_reset+0x76>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   1bcaa:	6818      	ldr	r0, [r3, #0]
   1bcac:	69a3      	ldr	r3, [r4, #24]
   1bcae:	9300      	str	r3, [sp, #0]
   1bcb0:	2300      	movs	r3, #0
   1bcb2:	461a      	mov	r2, r3
   1bcb4:	210e      	movs	r1, #14
   1bcb6:	47a8      	blx	r5
		bt_att_req_free(req);
   1bcb8:	4620      	mov	r0, r4
   1bcba:	f7ff ff07 	bl	1bacc <bt_att_req_free>
	while (!sys_slist_is_empty(&att->reqs)) {
   1bcbe:	9b03      	ldr	r3, [sp, #12]
	return list->head;
   1bcc0:	685c      	ldr	r4, [r3, #4]
   1bcc2:	b144      	cbz	r4, 1bcd6 <att_reset+0x7e>
	return node->next;
   1bcc4:	6822      	ldr	r2, [r4, #0]
	list->head = node;
   1bcc6:	605a      	str	r2, [r3, #4]
	return list->tail;
   1bcc8:	6899      	ldr	r1, [r3, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1bcca:	42a1      	cmp	r1, r4
   1bccc:	d0eb      	beq.n	1bca6 <att_reset+0x4e>
		if (req->func) {
   1bcce:	6865      	ldr	r5, [r4, #4]
   1bcd0:	2d00      	cmp	r5, #0
   1bcd2:	d1ea      	bne.n	1bcaa <att_reset+0x52>
   1bcd4:	e7f0      	b.n	1bcb8 <att_reset+0x60>
	att->conn = NULL;
   1bcd6:	2200      	movs	r2, #0
   1bcd8:	601a      	str	r2, [r3, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   1bcda:	a903      	add	r1, sp, #12
   1bcdc:	4805      	ldr	r0, [pc, #20]	; (1bcf4 <att_reset+0x9c>)
   1bcde:	f00a f885 	bl	25dec <k_mem_slab_free>
}
   1bce2:	b004      	add	sp, #16
   1bce4:	bd70      	pop	{r4, r5, r6, pc}
   1bce6:	bf00      	nop
   1bce8:	200009f0 	.word	0x200009f0
   1bcec:	0003354c 	.word	0x0003354c
   1bcf0:	000318f8 	.word	0x000318f8
   1bcf4:	2000093c 	.word	0x2000093c

0001bcf8 <att_timeout>:
{
   1bcf8:	b510      	push	{r4, lr}
   1bcfa:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
   1bcfc:	2145      	movs	r1, #69	; 0x45
   1bcfe:	4804      	ldr	r0, [pc, #16]	; (1bd10 <att_timeout+0x18>)
   1bd00:	f00f f9d4 	bl	2b0ac <z_log_minimal_printk>
	bt_att_disconnected(&chan->chan.chan);
   1bd04:	f1a4 00bc 	sub.w	r0, r4, #188	; 0xbc
   1bd08:	f011 fe6f 	bl	2d9ea <bt_att_disconnected>
}
   1bd0c:	bd10      	pop	{r4, pc}
   1bd0e:	bf00      	nop
   1bd10:	000337cc 	.word	0x000337cc

0001bd14 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
   1bd14:	b570      	push	{r4, r5, r6, lr}
   1bd16:	460c      	mov	r4, r1
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
   1bd18:	4605      	mov	r5, r0
   1bd1a:	b170      	cbz	r0, 1bd3a <bt_att_send+0x26>
	__ASSERT_NO_MSG(buf);
   1bd1c:	b1d4      	cbz	r4, 1bd54 <bt_att_send+0x40>

	att = att_get(conn);
   1bd1e:	4628      	mov	r0, r5
   1bd20:	f7fe ffce 	bl	1acc0 <att_get>
	if (!att) {
   1bd24:	4605      	mov	r5, r0
   1bd26:	b310      	cbz	r0, 1bd6e <bt_att_send+0x5a>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
		net_buf_unref(buf);
		return -ENOTCONN;
	}

	net_buf_put(&att->tx_queue, buf);
   1bd28:	4621      	mov	r1, r4
   1bd2a:	300c      	adds	r0, #12
   1bd2c:	f004 faf8 	bl	20320 <net_buf_put>
	att_send_process(att);
   1bd30:	4628      	mov	r0, r5
   1bd32:	f011 fc09 	bl	2d548 <att_send_process>

	return 0;
   1bd36:	2000      	movs	r0, #0
}
   1bd38:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(conn);
   1bd3a:	4e1b      	ldr	r6, [pc, #108]	; (1bda8 <bt_att_send+0x94>)
   1bd3c:	f640 6288 	movw	r2, #3720	; 0xe88
   1bd40:	4631      	mov	r1, r6
   1bd42:	481a      	ldr	r0, [pc, #104]	; (1bdac <bt_att_send+0x98>)
   1bd44:	f00f f9a3 	bl	2b08e <assert_print>
   1bd48:	f640 6188 	movw	r1, #3720	; 0xe88
   1bd4c:	4630      	mov	r0, r6
   1bd4e:	f00f f997 	bl	2b080 <assert_post_action>
   1bd52:	e7e3      	b.n	1bd1c <bt_att_send+0x8>
	__ASSERT_NO_MSG(buf);
   1bd54:	4e14      	ldr	r6, [pc, #80]	; (1bda8 <bt_att_send+0x94>)
   1bd56:	f640 6289 	movw	r2, #3721	; 0xe89
   1bd5a:	4631      	mov	r1, r6
   1bd5c:	4813      	ldr	r0, [pc, #76]	; (1bdac <bt_att_send+0x98>)
   1bd5e:	f00f f996 	bl	2b08e <assert_print>
   1bd62:	f640 6189 	movw	r1, #3721	; 0xe89
   1bd66:	4630      	mov	r0, r6
   1bd68:	f00f f98a 	bl	2b080 <assert_post_action>
   1bd6c:	e7d7      	b.n	1bd1e <bt_att_send+0xa>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1bd6e:	6965      	ldr	r5, [r4, #20]
	__ASSERT_NO_MSG(data);
   1bd70:	b17d      	cbz	r5, 1bd92 <bt_att_send+0x7e>
   1bd72:	2300      	movs	r3, #0
   1bd74:	602b      	str	r3, [r5, #0]
   1bd76:	606b      	str	r3, [r5, #4]
   1bd78:	60ab      	str	r3, [r5, #8]
   1bd7a:	60eb      	str	r3, [r5, #12]
   1bd7c:	612b      	str	r3, [r5, #16]
	k_fifo_put(&free_att_tx_meta_data, data);
   1bd7e:	4629      	mov	r1, r5
   1bd80:	480b      	ldr	r0, [pc, #44]	; (1bdb0 <bt_att_send+0x9c>)
   1bd82:	f014 fe2e 	bl	309e2 <k_queue_append>
		net_buf_unref(buf);
   1bd86:	4620      	mov	r0, r4
   1bd88:	f004 fafc 	bl	20384 <net_buf_unref>
		return -ENOTCONN;
   1bd8c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1bd90:	e7d2      	b.n	1bd38 <bt_att_send+0x24>
	__ASSERT_NO_MSG(data);
   1bd92:	4e05      	ldr	r6, [pc, #20]	; (1bda8 <bt_att_send+0x94>)
   1bd94:	22a4      	movs	r2, #164	; 0xa4
   1bd96:	4631      	mov	r1, r6
   1bd98:	4804      	ldr	r0, [pc, #16]	; (1bdac <bt_att_send+0x98>)
   1bd9a:	f00f f978 	bl	2b08e <assert_print>
   1bd9e:	21a4      	movs	r1, #164	; 0xa4
   1bda0:	4630      	mov	r0, r6
   1bda2:	f00f f96d 	bl	2b080 <assert_post_action>
   1bda6:	e7e4      	b.n	1bd72 <bt_att_send+0x5e>
   1bda8:	0003354c 	.word	0x0003354c
   1bdac:	000318f8 	.word	0x000318f8
   1bdb0:	200009f0 	.word	0x200009f0

0001bdb4 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   1bdb4:	b570      	push	{r4, r5, r6, lr}
   1bdb6:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
   1bdb8:	4605      	mov	r5, r0
   1bdba:	b180      	cbz	r0, 1bdde <bt_att_req_send+0x2a>
	__ASSERT_NO_MSG(req);
   1bdbc:	b1e4      	cbz	r4, 1bdf8 <bt_att_req_send+0x44>

	att = att_get(conn);
   1bdbe:	4628      	mov	r0, r5
   1bdc0:	f7fe ff7e 	bl	1acc0 <att_get>
	if (!att) {
   1bdc4:	4603      	mov	r3, r0
   1bdc6:	b338      	cbz	r0, 1be18 <bt_att_req_send+0x64>
	parent->next = child;
   1bdc8:	2200      	movs	r2, #0
   1bdca:	6022      	str	r2, [r4, #0]
	return list->tail;
   1bdcc:	6882      	ldr	r2, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   1bdce:	b302      	cbz	r2, 1be12 <bt_att_req_send+0x5e>
	parent->next = child;
   1bdd0:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1bdd2:	6084      	str	r4, [r0, #8]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   1bdd4:	4618      	mov	r0, r3
   1bdd6:	f011 fb0c 	bl	2d3f2 <att_req_send_process>

	return 0;
   1bdda:	2000      	movs	r0, #0
}
   1bddc:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(conn);
   1bdde:	4e10      	ldr	r6, [pc, #64]	; (1be20 <bt_att_req_send+0x6c>)
   1bde0:	f640 629e 	movw	r2, #3742	; 0xe9e
   1bde4:	4631      	mov	r1, r6
   1bde6:	480f      	ldr	r0, [pc, #60]	; (1be24 <bt_att_req_send+0x70>)
   1bde8:	f00f f951 	bl	2b08e <assert_print>
   1bdec:	f640 619e 	movw	r1, #3742	; 0xe9e
   1bdf0:	4630      	mov	r0, r6
   1bdf2:	f00f f945 	bl	2b080 <assert_post_action>
   1bdf6:	e7e1      	b.n	1bdbc <bt_att_req_send+0x8>
	__ASSERT_NO_MSG(req);
   1bdf8:	4e09      	ldr	r6, [pc, #36]	; (1be20 <bt_att_req_send+0x6c>)
   1bdfa:	f640 629f 	movw	r2, #3743	; 0xe9f
   1bdfe:	4631      	mov	r1, r6
   1be00:	4808      	ldr	r0, [pc, #32]	; (1be24 <bt_att_req_send+0x70>)
   1be02:	f00f f944 	bl	2b08e <assert_print>
   1be06:	f640 619f 	movw	r1, #3743	; 0xe9f
   1be0a:	4630      	mov	r0, r6
   1be0c:	f00f f938 	bl	2b080 <assert_post_action>
   1be10:	e7d5      	b.n	1bdbe <bt_att_req_send+0xa>
   1be12:	6084      	str	r4, [r0, #8]
	list->head = node;
   1be14:	6044      	str	r4, [r0, #4]
}
   1be16:	e7dd      	b.n	1bdd4 <bt_att_req_send+0x20>
		return -ENOTCONN;
   1be18:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1be1c:	e7de      	b.n	1bddc <bt_att_req_send+0x28>
   1be1e:	bf00      	nop
   1be20:	0003354c 	.word	0x0003354c
   1be24:	000318f8 	.word	0x000318f8

0001be28 <gatt_ccc_conn_queue_is_empty>:
	}
}

static bool gatt_ccc_conn_queue_is_empty(void)
{
	for (size_t i = 0; i < CONFIG_BT_MAX_CONN; i++) {
   1be28:	2300      	movs	r3, #0
   1be2a:	b10b      	cbz	r3, 1be30 <gatt_ccc_conn_queue_is_empty+0x8>
		if (gatt_ccc_store.conn_list[i]) {
			return false;
		}
	}

	return true;
   1be2c:	2001      	movs	r0, #1
   1be2e:	4770      	bx	lr
		if (gatt_ccc_store.conn_list[i]) {
   1be30:	4a03      	ldr	r2, [pc, #12]	; (1be40 <gatt_ccc_conn_queue_is_empty+0x18>)
   1be32:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   1be36:	b90a      	cbnz	r2, 1be3c <gatt_ccc_conn_queue_is_empty+0x14>
	for (size_t i = 0; i < CONFIG_BT_MAX_CONN; i++) {
   1be38:	3301      	adds	r3, #1
   1be3a:	e7f6      	b.n	1be2a <gatt_ccc_conn_queue_is_empty+0x2>
			return false;
   1be3c:	2000      	movs	r0, #0
}
   1be3e:	4770      	bx	lr
   1be40:	20001b28 	.word	0x20001b28

0001be44 <db_hash_set>:

SETTINGS_STATIC_HANDLER_DEFINE(bt_cf, "bt/cf", NULL, cf_set, NULL, NULL);

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
   1be44:	b510      	push	{r4, lr}
   1be46:	4614      	mov	r4, r2
	ssize_t len;

	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   1be48:	2210      	movs	r2, #16
   1be4a:	4907      	ldr	r1, [pc, #28]	; (1be68 <db_hash_set+0x24>)
   1be4c:	4618      	mov	r0, r3
   1be4e:	47a0      	blx	r4
	if (len < 0) {
   1be50:	1e04      	subs	r4, r0, #0
   1be52:	db02      	blt.n	1be5a <db_hash_set+0x16>
	}

	BT_HEXDUMP_DBG(db_hash.stored_hash, sizeof(db_hash.stored_hash),
		       "Stored Hash: ");

	return 0;
   1be54:	2400      	movs	r4, #0
}
   1be56:	4620      	mov	r0, r4
   1be58:	bd10      	pop	{r4, pc}
		BT_ERR("Failed to decode value (err %zd)", len);
   1be5a:	4622      	mov	r2, r4
   1be5c:	2145      	movs	r1, #69	; 0x45
   1be5e:	4803      	ldr	r0, [pc, #12]	; (1be6c <db_hash_set+0x28>)
   1be60:	f00f f924 	bl	2b0ac <z_log_minimal_printk>
		return len;
   1be64:	e7f7      	b.n	1be56 <db_hash_set+0x12>
   1be66:	bf00      	nop
   1be68:	20001ac0 	.word	0x20001ac0
   1be6c:	00033858 	.word	0x00033858

0001be70 <db_hash_store>:
{
   1be70:	b508      	push	{r3, lr}
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   1be72:	2210      	movs	r2, #16
   1be74:	4905      	ldr	r1, [pc, #20]	; (1be8c <db_hash_store+0x1c>)
   1be76:	4806      	ldr	r0, [pc, #24]	; (1be90 <db_hash_store+0x20>)
   1be78:	f7f8 fd2e 	bl	148d8 <settings_save_one>
	if (err) {
   1be7c:	b900      	cbnz	r0, 1be80 <db_hash_store+0x10>
}
   1be7e:	bd08      	pop	{r3, pc}
   1be80:	4602      	mov	r2, r0
		BT_ERR("Failed to save Database Hash (err %d)", err);
   1be82:	2145      	movs	r1, #69	; 0x45
   1be84:	4803      	ldr	r0, [pc, #12]	; (1be94 <db_hash_store+0x24>)
   1be86:	f00f f911 	bl	2b0ac <z_log_minimal_printk>
}
   1be8a:	e7f8      	b.n	1be7e <db_hash_store+0xe>
   1be8c:	20001ab0 	.word	0x20001ab0
   1be90:	00033880 	.word	0x00033880
   1be94:	00033888 	.word	0x00033888

0001be98 <find_cf_cfg>:
{
   1be98:	b570      	push	{r4, r5, r6, lr}
   1be9a:	b082      	sub	sp, #8
   1be9c:	4606      	mov	r6, r0
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1be9e:	2400      	movs	r4, #0
   1bea0:	e00b      	b.n	1beba <find_cf_cfg+0x22>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1bea2:	4628      	mov	r0, r5
   1bea4:	2300      	movs	r3, #0
   1bea6:	9300      	str	r3, [sp, #0]
   1bea8:	f8cd 3003 	str.w	r3, [sp, #3]
	return memcmp(a, b, sizeof(*a));
   1beac:	2207      	movs	r2, #7
   1beae:	4669      	mov	r1, sp
   1beb0:	3001      	adds	r0, #1
   1beb2:	f014 ff21 	bl	30cf8 <memcmp>
   1beb6:	b1a0      	cbz	r0, 1bee2 <find_cf_cfg+0x4a>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1beb8:	3401      	adds	r4, #1
   1beba:	2c01      	cmp	r4, #1
   1bebc:	d810      	bhi.n	1bee0 <find_cf_cfg+0x48>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1bebe:	4d0a      	ldr	r5, [pc, #40]	; (1bee8 <find_cf_cfg+0x50>)
   1bec0:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (!conn) {
   1bec4:	2e00      	cmp	r6, #0
   1bec6:	d0ec      	beq.n	1bea2 <find_cf_cfg+0xa>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1bec8:	4907      	ldr	r1, [pc, #28]	; (1bee8 <find_cf_cfg+0x50>)
   1beca:	0123      	lsls	r3, r4, #4
   1becc:	eb01 1204 	add.w	r2, r1, r4, lsl #4
   1bed0:	3201      	adds	r2, #1
   1bed2:	5cc9      	ldrb	r1, [r1, r3]
   1bed4:	4630      	mov	r0, r6
   1bed6:	f010 fe25 	bl	2cb24 <bt_conn_is_peer_addr_le>
   1beda:	2800      	cmp	r0, #0
   1bedc:	d0ec      	beq.n	1beb8 <find_cf_cfg+0x20>
   1bede:	e000      	b.n	1bee2 <find_cf_cfg+0x4a>
	return NULL;
   1bee0:	2500      	movs	r5, #0
}
   1bee2:	4628      	mov	r0, r5
   1bee4:	b002      	add	sp, #8
   1bee6:	bd70      	pop	{r4, r5, r6, pc}
   1bee8:	20002750 	.word	0x20002750

0001beec <find_sc_cfg>:
{
   1beec:	b570      	push	{r4, r5, r6, lr}
   1beee:	4605      	mov	r5, r0
   1bef0:	460e      	mov	r6, r1
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1bef2:	2400      	movs	r4, #0
   1bef4:	e000      	b.n	1bef8 <find_sc_cfg+0xc>
   1bef6:	3401      	adds	r4, #1
   1bef8:	2c01      	cmp	r4, #1
   1befa:	d817      	bhi.n	1bf2c <find_sc_cfg+0x40>
		if (id == sc_cfg[i].id &&
   1befc:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1bf00:	4a0b      	ldr	r2, [pc, #44]	; (1bf30 <find_sc_cfg+0x44>)
   1bf02:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   1bf06:	429d      	cmp	r5, r3
   1bf08:	d1f5      	bne.n	1bef6 <find_sc_cfg+0xa>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
   1bf0a:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   1bf0e:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   1bf12:	2207      	movs	r2, #7
   1bf14:	4631      	mov	r1, r6
   1bf16:	3001      	adds	r0, #1
   1bf18:	f014 feee 	bl	30cf8 <memcmp>
		if (id == sc_cfg[i].id &&
   1bf1c:	2800      	cmp	r0, #0
   1bf1e:	d1ea      	bne.n	1bef6 <find_sc_cfg+0xa>
			return &sc_cfg[i];
   1bf20:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1bf24:	4802      	ldr	r0, [pc, #8]	; (1bf30 <find_sc_cfg+0x44>)
   1bf26:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   1bf2a:	e000      	b.n	1bf2e <find_sc_cfg+0x42>
	return NULL;
   1bf2c:	2000      	movs	r0, #0
}
   1bf2e:	bd70      	pop	{r4, r5, r6, pc}
   1bf30:	20002774 	.word	0x20002774

0001bf34 <ccc_save>:
{
   1bf34:	b538      	push	{r3, r4, r5, lr}
   1bf36:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1bf38:	6882      	ldr	r2, [r0, #8]
   1bf3a:	4b0d      	ldr	r3, [pc, #52]	; (1bf70 <ccc_save+0x3c>)
   1bf3c:	429a      	cmp	r2, r3
   1bf3e:	d001      	beq.n	1bf44 <ccc_save+0x10>
}
   1bf40:	2001      	movs	r0, #1
   1bf42:	bd38      	pop	{r3, r4, r5, pc}
   1bf44:	460d      	mov	r5, r1
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
   1bf46:	7922      	ldrb	r2, [r4, #4]
   1bf48:	6821      	ldr	r1, [r4, #0]
   1bf4a:	68c0      	ldr	r0, [r0, #12]
   1bf4c:	f011 fec0 	bl	2dcd0 <ccc_find_cfg>
	if (!cfg) {
   1bf50:	2800      	cmp	r0, #0
   1bf52:	d0f5      	beq.n	1bf40 <ccc_save+0xc>
	save->store[save->count].handle = handle;
   1bf54:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
   1bf58:	1c9a      	adds	r2, r3, #2
   1bf5a:	f824 5022 	strh.w	r5, [r4, r2, lsl #2]
	save->store[save->count].value = cfg->value;
   1bf5e:	8901      	ldrh	r1, [r0, #8]
   1bf60:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   1bf64:	8051      	strh	r1, [r2, #2]
	save->count++;
   1bf66:	3301      	adds	r3, #1
   1bf68:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
	return BT_GATT_ITER_CONTINUE;
   1bf6c:	e7e8      	b.n	1bf40 <ccc_save+0xc>
   1bf6e:	bf00      	nop
   1bf70:	0001c675 	.word	0x0001c675

0001bf74 <find_cf_cfg_by_addr>:
{
   1bf74:	b570      	push	{r4, r5, r6, lr}
   1bf76:	4605      	mov	r5, r0
   1bf78:	460e      	mov	r6, r1
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1bf7a:	2400      	movs	r4, #0
   1bf7c:	e000      	b.n	1bf80 <find_cf_cfg_by_addr+0xc>
   1bf7e:	3401      	adds	r4, #1
   1bf80:	2c01      	cmp	r4, #1
   1bf82:	d811      	bhi.n	1bfa8 <find_cf_cfg_by_addr+0x34>
			if (id == cf_cfg[i].id &&
   1bf84:	0123      	lsls	r3, r4, #4
   1bf86:	4a09      	ldr	r2, [pc, #36]	; (1bfac <find_cf_cfg_by_addr+0x38>)
   1bf88:	5cd3      	ldrb	r3, [r2, r3]
   1bf8a:	42ab      	cmp	r3, r5
   1bf8c:	d1f7      	bne.n	1bf7e <find_cf_cfg_by_addr+0xa>
			    !bt_addr_le_cmp(addr, &cf_cfg[i].peer)) {
   1bf8e:	eb02 1104 	add.w	r1, r2, r4, lsl #4
   1bf92:	2207      	movs	r2, #7
   1bf94:	3101      	adds	r1, #1
   1bf96:	4630      	mov	r0, r6
   1bf98:	f014 feae 	bl	30cf8 <memcmp>
			if (id == cf_cfg[i].id &&
   1bf9c:	2800      	cmp	r0, #0
   1bf9e:	d1ee      	bne.n	1bf7e <find_cf_cfg_by_addr+0xa>
				return &cf_cfg[i];
   1bfa0:	4802      	ldr	r0, [pc, #8]	; (1bfac <find_cf_cfg_by_addr+0x38>)
   1bfa2:	eb00 1004 	add.w	r0, r0, r4, lsl #4
   1bfa6:	e000      	b.n	1bfaa <find_cf_cfg_by_addr+0x36>
	return NULL;
   1bfa8:	2000      	movs	r0, #0
}
   1bfaa:	bd70      	pop	{r4, r5, r6, pc}
   1bfac:	20002750 	.word	0x20002750

0001bfb0 <sc_store>:
{
   1bfb0:	b530      	push	{r4, r5, lr}
   1bfb2:	b08d      	sub	sp, #52	; 0x34
   1bfb4:	4604      	mov	r4, r0
	if (cfg->id) {
   1bfb6:	7802      	ldrb	r2, [r0, #0]
   1bfb8:	b1aa      	cbz	r2, 1bfe6 <sc_store+0x36>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
   1bfba:	ad02      	add	r5, sp, #8
   1bfbc:	2104      	movs	r1, #4
   1bfbe:	4628      	mov	r0, r5
   1bfc0:	f7f6 ff38 	bl	12e34 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
   1bfc4:	9500      	str	r5, [sp, #0]
   1bfc6:	1c63      	adds	r3, r4, #1
   1bfc8:	4a0e      	ldr	r2, [pc, #56]	; (1c004 <sc_store+0x54>)
   1bfca:	2124      	movs	r1, #36	; 0x24
   1bfcc:	a803      	add	r0, sp, #12
   1bfce:	f7fa fc85 	bl	168dc <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
   1bfd2:	2204      	movs	r2, #4
   1bfd4:	f104 0108 	add.w	r1, r4, #8
   1bfd8:	a803      	add	r0, sp, #12
   1bfda:	f7f8 fc7d 	bl	148d8 <settings_save_one>
	if (err) {
   1bfde:	4602      	mov	r2, r0
   1bfe0:	b950      	cbnz	r0, 1bff8 <sc_store+0x48>
}
   1bfe2:	b00d      	add	sp, #52	; 0x34
   1bfe4:	bd30      	pop	{r4, r5, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
   1bfe6:	2300      	movs	r3, #0
   1bfe8:	9300      	str	r3, [sp, #0]
   1bfea:	1c43      	adds	r3, r0, #1
   1bfec:	4a05      	ldr	r2, [pc, #20]	; (1c004 <sc_store+0x54>)
   1bfee:	2124      	movs	r1, #36	; 0x24
   1bff0:	a803      	add	r0, sp, #12
   1bff2:	f7fa fc73 	bl	168dc <bt_settings_encode_key>
   1bff6:	e7ec      	b.n	1bfd2 <sc_store+0x22>
		BT_ERR("failed to store SC (err %d)", err);
   1bff8:	2145      	movs	r1, #69	; 0x45
   1bffa:	4803      	ldr	r0, [pc, #12]	; (1c008 <sc_store+0x58>)
   1bffc:	f00f f856 	bl	2b0ac <z_log_minimal_printk>
		return;
   1c000:	e7ef      	b.n	1bfe2 <sc_store+0x32>
   1c002:	bf00      	nop
   1c004:	000338b4 	.word	0x000338b4
   1c008:	000338b8 	.word	0x000338b8

0001c00c <bt_gatt_store_cf>:
{
   1c00c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c00e:	b08d      	sub	sp, #52	; 0x34
   1c010:	4604      	mov	r4, r0
	cfg = find_cf_cfg(conn);
   1c012:	f7ff ff41 	bl	1be98 <find_cf_cfg>
	if (!cfg) {
   1c016:	4605      	mov	r5, r0
   1c018:	b348      	cbz	r0, 1c06e <bt_gatt_store_cf+0x62>
		str = (char *)cfg->data;
   1c01a:	f100 0608 	add.w	r6, r0, #8
		if (conn->id) {
   1c01e:	7a22      	ldrb	r2, [r4, #8]
   1c020:	b9b2      	cbnz	r2, 1c050 <bt_gatt_store_cf+0x44>
		len = sizeof(cfg->data);
   1c022:	2701      	movs	r7, #1
	if (!cfg || !conn->id) {
   1c024:	b10d      	cbz	r5, 1c02a <bt_gatt_store_cf+0x1e>
   1c026:	7a23      	ldrb	r3, [r4, #8]
   1c028:	b943      	cbnz	r3, 1c03c <bt_gatt_store_cf+0x30>
		bt_settings_encode_key(key, sizeof(key), "cf",
   1c02a:	2300      	movs	r3, #0
   1c02c:	9300      	str	r3, [sp, #0]
   1c02e:	f104 0390 	add.w	r3, r4, #144	; 0x90
   1c032:	4a13      	ldr	r2, [pc, #76]	; (1c080 <bt_gatt_store_cf+0x74>)
   1c034:	2124      	movs	r1, #36	; 0x24
   1c036:	a803      	add	r0, sp, #12
   1c038:	f7fa fc50 	bl	168dc <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
   1c03c:	463a      	mov	r2, r7
   1c03e:	4631      	mov	r1, r6
   1c040:	a803      	add	r0, sp, #12
   1c042:	f7f8 fc49 	bl	148d8 <settings_save_one>
	if (err) {
   1c046:	4604      	mov	r4, r0
   1c048:	b9a0      	cbnz	r0, 1c074 <bt_gatt_store_cf+0x68>
}
   1c04a:	4620      	mov	r0, r4
   1c04c:	b00d      	add	sp, #52	; 0x34
   1c04e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   1c050:	af02      	add	r7, sp, #8
   1c052:	2104      	movs	r1, #4
   1c054:	4638      	mov	r0, r7
   1c056:	f7f6 feed 	bl	12e34 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   1c05a:	9700      	str	r7, [sp, #0]
   1c05c:	f104 0390 	add.w	r3, r4, #144	; 0x90
   1c060:	4a07      	ldr	r2, [pc, #28]	; (1c080 <bt_gatt_store_cf+0x74>)
   1c062:	2124      	movs	r1, #36	; 0x24
   1c064:	a803      	add	r0, sp, #12
   1c066:	f7fa fc39 	bl	168dc <bt_settings_encode_key>
		len = sizeof(cfg->data);
   1c06a:	2701      	movs	r7, #1
   1c06c:	e7da      	b.n	1c024 <bt_gatt_store_cf+0x18>
		str = NULL;
   1c06e:	4606      	mov	r6, r0
		len = 0;
   1c070:	2700      	movs	r7, #0
   1c072:	e7d7      	b.n	1c024 <bt_gatt_store_cf+0x18>
		BT_ERR("Failed to store Client Features (err %d)", err);
   1c074:	4602      	mov	r2, r0
   1c076:	2145      	movs	r1, #69	; 0x45
   1c078:	4802      	ldr	r0, [pc, #8]	; (1c084 <bt_gatt_store_cf+0x78>)
   1c07a:	f00f f817 	bl	2b0ac <z_log_minimal_printk>
		return err;
   1c07e:	e7e4      	b.n	1c04a <bt_gatt_store_cf+0x3e>
   1c080:	000338dc 	.word	0x000338dc
   1c084:	000338e0 	.word	0x000338e0

0001c088 <bt_gatt_clear_sc>:
{
   1c088:	b530      	push	{r4, r5, lr}
   1c08a:	b08d      	sub	sp, #52	; 0x34
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   1c08c:	f7ff ff2e 	bl	1beec <find_sc_cfg>
	if (!cfg) {
   1c090:	b1b0      	cbz	r0, 1c0c0 <bt_gatt_clear_sc+0x38>
   1c092:	4604      	mov	r4, r0
		if (cfg->id) {
   1c094:	7802      	ldrb	r2, [r0, #0]
   1c096:	b1b2      	cbz	r2, 1c0c6 <bt_gatt_clear_sc+0x3e>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
   1c098:	ad02      	add	r5, sp, #8
   1c09a:	2104      	movs	r1, #4
   1c09c:	4628      	mov	r0, r5
   1c09e:	f7f6 fec9 	bl	12e34 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
   1c0a2:	9500      	str	r5, [sp, #0]
   1c0a4:	1c63      	adds	r3, r4, #1
   1c0a6:	4a0f      	ldr	r2, [pc, #60]	; (1c0e4 <bt_gatt_clear_sc+0x5c>)
   1c0a8:	2124      	movs	r1, #36	; 0x24
   1c0aa:	a803      	add	r0, sp, #12
   1c0ac:	f7fa fc16 	bl	168dc <bt_settings_encode_key>
		err = settings_delete(key);
   1c0b0:	a803      	add	r0, sp, #12
   1c0b2:	f00f fbaf 	bl	2b814 <settings_delete>
		if (err) {
   1c0b6:	4602      	mov	r2, r0
   1c0b8:	b970      	cbnz	r0, 1c0d8 <bt_gatt_clear_sc+0x50>
	clear_sc_cfg(cfg);
   1c0ba:	4620      	mov	r0, r4
   1c0bc:	f011 fe28 	bl	2dd10 <clear_sc_cfg>
}
   1c0c0:	2000      	movs	r0, #0
   1c0c2:	b00d      	add	sp, #52	; 0x34
   1c0c4:	bd30      	pop	{r4, r5, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
   1c0c6:	2300      	movs	r3, #0
   1c0c8:	9300      	str	r3, [sp, #0]
   1c0ca:	1c43      	adds	r3, r0, #1
   1c0cc:	4a05      	ldr	r2, [pc, #20]	; (1c0e4 <bt_gatt_clear_sc+0x5c>)
   1c0ce:	2124      	movs	r1, #36	; 0x24
   1c0d0:	a803      	add	r0, sp, #12
   1c0d2:	f7fa fc03 	bl	168dc <bt_settings_encode_key>
   1c0d6:	e7eb      	b.n	1c0b0 <bt_gatt_clear_sc+0x28>
			BT_ERR("failed to delete SC (err %d)", err);
   1c0d8:	2145      	movs	r1, #69	; 0x45
   1c0da:	4803      	ldr	r0, [pc, #12]	; (1c0e8 <bt_gatt_clear_sc+0x60>)
   1c0dc:	f00e ffe6 	bl	2b0ac <z_log_minimal_printk>
   1c0e0:	e7eb      	b.n	1c0ba <bt_gatt_clear_sc+0x32>
   1c0e2:	bf00      	nop
   1c0e4:	000338b4 	.word	0x000338b4
   1c0e8:	00033910 	.word	0x00033910

0001c0ec <sc_clear>:
{
   1c0ec:	b538      	push	{r3, r4, r5, lr}
   1c0ee:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1c0f0:	f100 0590 	add.w	r5, r0, #144	; 0x90
   1c0f4:	4629      	mov	r1, r5
   1c0f6:	7a00      	ldrb	r0, [r0, #8]
   1c0f8:	f010 f8a0 	bl	2c23c <bt_addr_le_is_bonded>
   1c0fc:	b158      	cbz	r0, 1c116 <sc_clear+0x2a>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   1c0fe:	4629      	mov	r1, r5
   1c100:	7a20      	ldrb	r0, [r4, #8]
   1c102:	f7ff ffc1 	bl	1c088 <bt_gatt_clear_sc>
		if (err) {
   1c106:	4602      	mov	r2, r0
   1c108:	b900      	cbnz	r0, 1c10c <sc_clear+0x20>
}
   1c10a:	bd38      	pop	{r3, r4, r5, pc}
			BT_ERR("Failed to clear SC %d", err);
   1c10c:	2145      	movs	r1, #69	; 0x45
   1c10e:	4806      	ldr	r0, [pc, #24]	; (1c128 <sc_clear+0x3c>)
   1c110:	f00e ffcc 	bl	2b0ac <z_log_minimal_printk>
   1c114:	e7f9      	b.n	1c10a <sc_clear+0x1e>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1c116:	4629      	mov	r1, r5
   1c118:	7a20      	ldrb	r0, [r4, #8]
   1c11a:	f7ff fee7 	bl	1beec <find_sc_cfg>
		if (cfg) {
   1c11e:	2800      	cmp	r0, #0
   1c120:	d0f3      	beq.n	1c10a <sc_clear+0x1e>
			clear_sc_cfg(cfg);
   1c122:	f011 fdf5 	bl	2dd10 <clear_sc_cfg>
}
   1c126:	e7f0      	b.n	1c10a <sc_clear+0x1e>
   1c128:	00033934 	.word	0x00033934

0001c12c <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
   1c12c:	b508      	push	{r3, lr}
   1c12e:	4613      	mov	r3, r2
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
   1c130:	6881      	ldr	r1, [r0, #8]
   1c132:	4a08      	ldr	r2, [pc, #32]	; (1c154 <remove_peer_from_attr+0x28>)
   1c134:	4291      	cmp	r1, r2
   1c136:	d001      	beq.n	1c13c <remove_peer_from_attr+0x10>
	if (cfg) {
		memset(cfg, 0, sizeof(*cfg));
	}

	return BT_GATT_ITER_CONTINUE;
}
   1c138:	2001      	movs	r0, #1
   1c13a:	bd08      	pop	{r3, pc}
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
   1c13c:	791a      	ldrb	r2, [r3, #4]
   1c13e:	6819      	ldr	r1, [r3, #0]
   1c140:	68c0      	ldr	r0, [r0, #12]
   1c142:	f011 fdc5 	bl	2dcd0 <ccc_find_cfg>
	if (cfg) {
   1c146:	2800      	cmp	r0, #0
   1c148:	d0f6      	beq.n	1c138 <remove_peer_from_attr+0xc>
   1c14a:	2200      	movs	r2, #0
   1c14c:	6002      	str	r2, [r0, #0]
   1c14e:	6042      	str	r2, [r0, #4]
   1c150:	8102      	strh	r2, [r0, #8]
   1c152:	e7f1      	b.n	1c138 <remove_peer_from_attr+0xc>
   1c154:	0001c675 	.word	0x0001c675

0001c158 <bt_gatt_service_init>:
{
   1c158:	b538      	push	{r3, r4, r5, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1c15a:	4b15      	ldr	r3, [pc, #84]	; (1c1b0 <bt_gatt_service_init+0x58>)
   1c15c:	2201      	movs	r2, #1
   1c15e:	f3bf 8f5b 	dmb	ish
   1c162:	e853 1f00 	ldrex	r1, [r3]
   1c166:	2900      	cmp	r1, #0
   1c168:	d103      	bne.n	1c172 <bt_gatt_service_init+0x1a>
   1c16a:	e843 2000 	strex	r0, r2, [r3]
   1c16e:	2800      	cmp	r0, #0
   1c170:	d1f7      	bne.n	1c162 <bt_gatt_service_init+0xa>
   1c172:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   1c176:	d11a      	bne.n	1c1ae <bt_gatt_service_init+0x56>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1c178:	4c0e      	ldr	r4, [pc, #56]	; (1c1b4 <bt_gatt_service_init+0x5c>)
   1c17a:	e008      	b.n	1c18e <bt_gatt_service_init+0x36>
   1c17c:	4b0e      	ldr	r3, [pc, #56]	; (1c1b8 <bt_gatt_service_init+0x60>)
   1c17e:	429c      	cmp	r4, r3
   1c180:	d215      	bcs.n	1c1ae <bt_gatt_service_init+0x56>
		last_static_handle += svc->attr_count;
   1c182:	6863      	ldr	r3, [r4, #4]
   1c184:	4a0d      	ldr	r2, [pc, #52]	; (1c1bc <bt_gatt_service_init+0x64>)
   1c186:	8811      	ldrh	r1, [r2, #0]
   1c188:	440b      	add	r3, r1
   1c18a:	8013      	strh	r3, [r2, #0]
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1c18c:	3408      	adds	r4, #8
   1c18e:	4b0a      	ldr	r3, [pc, #40]	; (1c1b8 <bt_gatt_service_init+0x60>)
   1c190:	429c      	cmp	r4, r3
   1c192:	d9f3      	bls.n	1c17c <bt_gatt_service_init+0x24>
   1c194:	4d0a      	ldr	r5, [pc, #40]	; (1c1c0 <bt_gatt_service_init+0x68>)
   1c196:	f240 520e 	movw	r2, #1294	; 0x50e
   1c19a:	4629      	mov	r1, r5
   1c19c:	4809      	ldr	r0, [pc, #36]	; (1c1c4 <bt_gatt_service_init+0x6c>)
   1c19e:	f00e ff76 	bl	2b08e <assert_print>
   1c1a2:	f240 510e 	movw	r1, #1294	; 0x50e
   1c1a6:	4628      	mov	r0, r5
   1c1a8:	f00e ff6a 	bl	2b080 <assert_post_action>
   1c1ac:	e7e6      	b.n	1c17c <bt_gatt_service_init+0x24>
}
   1c1ae:	bd38      	pop	{r3, r4, r5, pc}
   1c1b0:	200027a4 	.word	0x200027a4
   1c1b4:	0003131c 	.word	0x0003131c
   1c1b8:	00031334 	.word	0x00031334
   1c1bc:	2000375c 	.word	0x2000375c
   1c1c0:	00033950 	.word	0x00033950
   1c1c4:	000318f8 	.word	0x000318f8

0001c1c8 <sc_indicate>:
{
   1c1c8:	b510      	push	{r4, lr}
   1c1ca:	4602      	mov	r2, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1c1cc:	4c17      	ldr	r4, [pc, #92]	; (1c22c <sc_indicate+0x64>)
   1c1ce:	f3bf 8f5b 	dmb	ish
   1c1d2:	e854 3f00 	ldrex	r3, [r4]
   1c1d6:	f043 0001 	orr.w	r0, r3, #1
   1c1da:	e844 0c00 	strex	ip, r0, [r4]
   1c1de:	f1bc 0f00 	cmp.w	ip, #0
   1c1e2:	d1f6      	bne.n	1c1d2 <sc_indicate+0xa>
   1c1e4:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1c1e8:	f013 0f01 	tst.w	r3, #1
   1c1ec:	d10d      	bne.n	1c20a <sc_indicate+0x42>
		gatt_sc.start = start;
   1c1ee:	f1a4 0350 	sub.w	r3, r4, #80	; 0x50
   1c1f2:	831a      	strh	r2, [r3, #24]
		gatt_sc.end = end;
   1c1f4:	8359      	strh	r1, [r3, #26]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c1f6:	f3bf 8f5b 	dmb	ish
   1c1fa:	4b0d      	ldr	r3, [pc, #52]	; (1c230 <sc_indicate+0x68>)
   1c1fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   1c1fe:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
   1c202:	f013 0f02 	tst.w	r3, #2
   1c206:	d00a      	beq.n	1c21e <sc_indicate+0x56>
}
   1c208:	bd10      	pop	{r4, pc}
	if (!update_range(&gatt_sc.start, &gatt_sc.end, start, end)) {
   1c20a:	4809      	ldr	r0, [pc, #36]	; (1c230 <sc_indicate+0x68>)
   1c20c:	460b      	mov	r3, r1
   1c20e:	f100 011a 	add.w	r1, r0, #26
   1c212:	3018      	adds	r0, #24
   1c214:	f011 fc35 	bl	2da82 <update_range>
   1c218:	2800      	cmp	r0, #0
   1c21a:	d1ec      	bne.n	1c1f6 <sc_indicate+0x2e>
   1c21c:	e7f4      	b.n	1c208 <sc_indicate+0x40>
	k_work_reschedule(&gatt_sc.work, timeout);
   1c21e:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1c222:	2300      	movs	r3, #0
   1c224:	4803      	ldr	r0, [pc, #12]	; (1c234 <sc_indicate+0x6c>)
   1c226:	f00a ffed 	bl	27204 <k_work_reschedule>
   1c22a:	e7ed      	b.n	1c208 <sc_indicate+0x40>
   1c22c:	20001bb0 	.word	0x20001bb0
   1c230:	20001b60 	.word	0x20001b60
   1c234:	20001b80 	.word	0x20001b80

0001c238 <sc_indicate_rsp>:
{
   1c238:	b510      	push	{r4, lr}
   1c23a:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1c23c:	4b1c      	ldr	r3, [pc, #112]	; (1c2b0 <sc_indicate_rsp+0x78>)
   1c23e:	f103 0250 	add.w	r2, r3, #80	; 0x50
   1c242:	f3bf 8f5b 	dmb	ish
   1c246:	e852 1f00 	ldrex	r1, [r2]
   1c24a:	f021 0102 	bic.w	r1, r1, #2
   1c24e:	e842 1000 	strex	r0, r1, [r2]
   1c252:	2800      	cmp	r0, #0
   1c254:	d1f7      	bne.n	1c246 <sc_indicate_rsp+0xe>
   1c256:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c25a:	f3bf 8f5b 	dmb	ish
   1c25e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   1c260:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1c264:	f013 0f01 	tst.w	r3, #1
   1c268:	d104      	bne.n	1c274 <sc_indicate_rsp+0x3c>
	if (bt_att_fixed_chan_only(conn)) {
   1c26a:	4620      	mov	r0, r4
   1c26c:	f011 fbcf 	bl	2da0e <bt_att_fixed_chan_only>
   1c270:	b930      	cbnz	r0, 1c280 <sc_indicate_rsp+0x48>
}
   1c272:	bd10      	pop	{r4, pc}
	k_work_reschedule(&gatt_sc.work, timeout);
   1c274:	2200      	movs	r2, #0
   1c276:	2300      	movs	r3, #0
   1c278:	480e      	ldr	r0, [pc, #56]	; (1c2b4 <sc_indicate_rsp+0x7c>)
   1c27a:	f00a ffc3 	bl	27204 <k_work_reschedule>
   1c27e:	e7f4      	b.n	1c26a <sc_indicate_rsp+0x32>
		cfg = find_cf_cfg(conn);
   1c280:	4620      	mov	r0, r4
   1c282:	f7ff fe09 	bl	1be98 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   1c286:	4603      	mov	r3, r0
   1c288:	2800      	cmp	r0, #0
   1c28a:	d0f2      	beq.n	1c272 <sc_indicate_rsp+0x3a>
   1c28c:	7a02      	ldrb	r2, [r0, #8]
   1c28e:	f012 0f01 	tst.w	r2, #1
   1c292:	d0ee      	beq.n	1c272 <sc_indicate_rsp+0x3a>
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1c294:	330c      	adds	r3, #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1c296:	f3bf 8f5b 	dmb	ish
   1c29a:	e853 2f00 	ldrex	r2, [r3]
   1c29e:	f042 0201 	orr.w	r2, r2, #1
   1c2a2:	e843 2100 	strex	r1, r2, [r3]
   1c2a6:	2900      	cmp	r1, #0
   1c2a8:	d1f7      	bne.n	1c29a <sc_indicate_rsp+0x62>
   1c2aa:	f3bf 8f5b 	dmb	ish
}
   1c2ae:	e7e0      	b.n	1c272 <sc_indicate_rsp+0x3a>
   1c2b0:	20001b60 	.word	0x20001b60
   1c2b4:	20001b80 	.word	0x20001b80

0001c2b8 <sc_commit>:
{
   1c2b8:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1c2ba:	4b10      	ldr	r3, [pc, #64]	; (1c2fc <sc_commit+0x44>)
   1c2bc:	f103 0250 	add.w	r2, r3, #80	; 0x50
   1c2c0:	f3bf 8f5b 	dmb	ish
   1c2c4:	e852 1f00 	ldrex	r1, [r2]
   1c2c8:	f021 0102 	bic.w	r1, r1, #2
   1c2cc:	e842 1000 	strex	r0, r1, [r2]
   1c2d0:	2800      	cmp	r0, #0
   1c2d2:	d1f7      	bne.n	1c2c4 <sc_commit+0xc>
   1c2d4:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c2d8:	f3bf 8f5b 	dmb	ish
   1c2dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   1c2de:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1c2e2:	f013 0f01 	tst.w	r3, #1
   1c2e6:	d101      	bne.n	1c2ec <sc_commit+0x34>
}
   1c2e8:	2000      	movs	r0, #0
   1c2ea:	bd08      	pop	{r3, pc}
	k_work_reschedule(&gatt_sc.work, timeout);
   1c2ec:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1c2f0:	2300      	movs	r3, #0
   1c2f2:	4803      	ldr	r0, [pc, #12]	; (1c300 <sc_commit+0x48>)
   1c2f4:	f00a ff86 	bl	27204 <k_work_reschedule>
   1c2f8:	e7f6      	b.n	1c2e8 <sc_commit+0x30>
   1c2fa:	bf00      	nop
   1c2fc:	20001b60 	.word	0x20001b60
   1c300:	20001b80 	.word	0x20001b80

0001c304 <gatt_ccc_conn_is_queued>:
{
   1c304:	b510      	push	{r4, lr}
   1c306:	4604      	mov	r4, r0
	return (conn == gatt_ccc_store.conn_list[bt_conn_index(conn)]);
   1c308:	f7fd fd6a 	bl	19de0 <bt_conn_index>
   1c30c:	4b03      	ldr	r3, [pc, #12]	; (1c31c <gatt_ccc_conn_is_queued+0x18>)
   1c30e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
   1c312:	42a0      	cmp	r0, r4
   1c314:	bf14      	ite	ne
   1c316:	2000      	movne	r0, #0
   1c318:	2001      	moveq	r0, #1
   1c31a:	bd10      	pop	{r4, pc}
   1c31c:	20001b28 	.word	0x20001b28

0001c320 <gatt_ccc_conn_unqueue>:
{
   1c320:	b510      	push	{r4, lr}
	uint8_t index = bt_conn_index(conn);
   1c322:	f7fd fd5d 	bl	19de0 <bt_conn_index>
   1c326:	4604      	mov	r4, r0
	if (gatt_ccc_store.conn_list[index] != NULL) {
   1c328:	4b05      	ldr	r3, [pc, #20]	; (1c340 <gatt_ccc_conn_unqueue+0x20>)
   1c32a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1c32e:	b128      	cbz	r0, 1c33c <gatt_ccc_conn_unqueue+0x1c>
		bt_conn_unref(gatt_ccc_store.conn_list[index]);
   1c330:	f7fd fc40 	bl	19bb4 <bt_conn_unref>
		gatt_ccc_store.conn_list[index] = NULL;
   1c334:	4b02      	ldr	r3, [pc, #8]	; (1c340 <gatt_ccc_conn_unqueue+0x20>)
   1c336:	2200      	movs	r2, #0
   1c338:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
}
   1c33c:	bd10      	pop	{r4, pc}
   1c33e:	bf00      	nop
   1c340:	20001b28 	.word	0x20001b28

0001c344 <gatt_ccc_conn_enqueue>:
{
   1c344:	b538      	push	{r3, r4, r5, lr}
   1c346:	4604      	mov	r4, r0
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   1c348:	f7ff ffdc 	bl	1c304 <gatt_ccc_conn_is_queued>
   1c34c:	b100      	cbz	r0, 1c350 <gatt_ccc_conn_enqueue+0xc>
}
   1c34e:	bd38      	pop	{r3, r4, r5, pc}
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1c350:	f104 0190 	add.w	r1, r4, #144	; 0x90
   1c354:	7a20      	ldrb	r0, [r4, #8]
   1c356:	f00f ff71 	bl	2c23c <bt_addr_le_is_bonded>
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   1c35a:	2800      	cmp	r0, #0
   1c35c:	d0f7      	beq.n	1c34e <gatt_ccc_conn_enqueue+0xa>
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   1c35e:	4620      	mov	r0, r4
   1c360:	f7fd fd3e 	bl	19de0 <bt_conn_index>
   1c364:	4605      	mov	r5, r0
			bt_conn_ref(conn);
   1c366:	4620      	mov	r0, r4
   1c368:	f010 fb01 	bl	2c96e <bt_conn_ref>
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   1c36c:	4905      	ldr	r1, [pc, #20]	; (1c384 <gatt_ccc_conn_enqueue+0x40>)
   1c36e:	f841 0025 	str.w	r0, [r1, r5, lsl #2]
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   1c372:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   1c376:	2300      	movs	r3, #0
   1c378:	f101 0008 	add.w	r0, r1, #8
   1c37c:	f00a ff42 	bl	27204 <k_work_reschedule>
}
   1c380:	e7e5      	b.n	1c34e <gatt_ccc_conn_enqueue+0xa>
   1c382:	bf00      	nop
   1c384:	20001b28 	.word	0x20001b28

0001c388 <db_hash_commit>:
{
   1c388:	b510      	push	{r4, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1c38a:	4b0f      	ldr	r3, [pc, #60]	; (1c3c8 <db_hash_commit+0x40>)
   1c38c:	f3bf 8f5b 	dmb	ish
   1c390:	e853 2f00 	ldrex	r2, [r3]
   1c394:	f042 0208 	orr.w	r2, r2, #8
   1c398:	e843 2100 	strex	r1, r2, [r3]
   1c39c:	2900      	cmp	r1, #0
   1c39e:	d1f7      	bne.n	1c390 <db_hash_commit+0x8>
   1c3a0:	f3bf 8f5b 	dmb	ish
		err = bt_long_wq_reschedule(&db_hash.work, K_NO_WAIT);
   1c3a4:	2200      	movs	r2, #0
   1c3a6:	2300      	movs	r3, #0
   1c3a8:	4808      	ldr	r0, [pc, #32]	; (1c3cc <db_hash_commit+0x44>)
   1c3aa:	f7fa fb5d 	bl	16a68 <bt_long_wq_reschedule>
	if (err > 0) {
   1c3ae:	1e04      	subs	r4, r0, #0
   1c3b0:	dd02      	ble.n	1c3b8 <db_hash_commit+0x30>
		err = 0;
   1c3b2:	2400      	movs	r4, #0
}
   1c3b4:	4620      	mov	r0, r4
   1c3b6:	bd10      	pop	{r4, pc}
	if (err) {
   1c3b8:	2c00      	cmp	r4, #0
   1c3ba:	d0fb      	beq.n	1c3b4 <db_hash_commit+0x2c>
		BT_ERR("Unable to reschedule database hash process (err %d)", err);
   1c3bc:	4622      	mov	r2, r4
   1c3be:	2145      	movs	r1, #69	; 0x45
   1c3c0:	4803      	ldr	r0, [pc, #12]	; (1c3d0 <db_hash_commit+0x48>)
   1c3c2:	f00e fe73 	bl	2b0ac <z_log_minimal_printk>
   1c3c6:	e7f5      	b.n	1c3b4 <db_hash_commit+0x2c>
   1c3c8:	20001bb0 	.word	0x20001bb0
   1c3cc:	20001ad0 	.word	0x20001ad0
   1c3d0:	00033980 	.word	0x00033980

0001c3d4 <ccc_load>:
{
   1c3d4:	b530      	push	{r4, r5, lr}
   1c3d6:	b083      	sub	sp, #12
   1c3d8:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1c3da:	6882      	ldr	r2, [r0, #8]
   1c3dc:	4b22      	ldr	r3, [pc, #136]	; (1c468 <ccc_load+0x94>)
   1c3de:	429a      	cmp	r2, r3
   1c3e0:	d002      	beq.n	1c3e8 <ccc_load+0x14>
		return BT_GATT_ITER_CONTINUE;
   1c3e2:	2001      	movs	r0, #1
}
   1c3e4:	b003      	add	sp, #12
   1c3e6:	bd30      	pop	{r4, r5, pc}
	ccc = attr->user_data;
   1c3e8:	68c5      	ldr	r5, [r0, #12]
	if (!load->entry) {
   1c3ea:	68a3      	ldr	r3, [r4, #8]
   1c3ec:	b143      	cbz	r3, 1c400 <ccc_load+0x2c>
	} else if (!load->count) {
   1c3ee:	68e2      	ldr	r2, [r4, #12]
   1c3f0:	2a00      	cmp	r2, #0
   1c3f2:	d037      	beq.n	1c464 <ccc_load+0x90>
	if (load->entry->handle != handle) {
   1c3f4:	881b      	ldrh	r3, [r3, #0]
   1c3f6:	428b      	cmp	r3, r1
   1c3f8:	d009      	beq.n	1c40e <ccc_load+0x3a>
		if (load->entry->handle < handle) {
   1c3fa:	d312      	bcc.n	1c422 <ccc_load+0x4e>
		return BT_GATT_ITER_CONTINUE;
   1c3fc:	2001      	movs	r0, #1
   1c3fe:	e7f1      	b.n	1c3e4 <ccc_load+0x10>
		ccc_clear(ccc, load->addr_with_id.addr, load->addr_with_id.id);
   1c400:	7922      	ldrb	r2, [r4, #4]
   1c402:	6821      	ldr	r1, [r4, #0]
   1c404:	4628      	mov	r0, r5
   1c406:	f011 fd03 	bl	2de10 <ccc_clear>
		return BT_GATT_ITER_CONTINUE;
   1c40a:	2001      	movs	r0, #1
   1c40c:	e7ea      	b.n	1c3e4 <ccc_load+0x10>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
   1c40e:	7922      	ldrb	r2, [r4, #4]
   1c410:	6821      	ldr	r1, [r4, #0]
   1c412:	4628      	mov	r0, r5
   1c414:	f011 fc5c 	bl	2dcd0 <ccc_find_cfg>
	if (!cfg) {
   1c418:	4603      	mov	r3, r0
   1c41a:	b160      	cbz	r0, 1c436 <ccc_load+0x62>
	cfg->value = load->entry->value;
   1c41c:	68a2      	ldr	r2, [r4, #8]
   1c41e:	8852      	ldrh	r2, [r2, #2]
   1c420:	811a      	strh	r2, [r3, #8]
	load->entry++;
   1c422:	68a3      	ldr	r3, [r4, #8]
   1c424:	3304      	adds	r3, #4
   1c426:	60a3      	str	r3, [r4, #8]
	load->count--;
   1c428:	68e0      	ldr	r0, [r4, #12]
   1c42a:	3801      	subs	r0, #1
   1c42c:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1c42e:	3800      	subs	r0, #0
   1c430:	bf18      	it	ne
   1c432:	2001      	movne	r0, #1
   1c434:	e7d6      	b.n	1c3e4 <ccc_load+0x10>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
   1c436:	2200      	movs	r2, #0
   1c438:	9200      	str	r2, [sp, #0]
   1c43a:	f8cd 2003 	str.w	r2, [sp, #3]
   1c43e:	4669      	mov	r1, sp
   1c440:	4628      	mov	r0, r5
   1c442:	f011 fc45 	bl	2dcd0 <ccc_find_cfg>
		if (!cfg) {
   1c446:	4603      	mov	r3, r0
   1c448:	2800      	cmp	r0, #0
   1c44a:	d0ea      	beq.n	1c422 <ccc_load+0x4e>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
   1c44c:	6822      	ldr	r2, [r4, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1c44e:	6811      	ldr	r1, [r2, #0]
   1c450:	f8c0 1001 	str.w	r1, [r0, #1]
   1c454:	8891      	ldrh	r1, [r2, #4]
   1c456:	7992      	ldrb	r2, [r2, #6]
   1c458:	f8a0 1005 	strh.w	r1, [r0, #5]
   1c45c:	71c2      	strb	r2, [r0, #7]
		cfg->id = load->addr_with_id.id;
   1c45e:	7922      	ldrb	r2, [r4, #4]
   1c460:	7002      	strb	r2, [r0, #0]
   1c462:	e7db      	b.n	1c41c <ccc_load+0x48>
		return BT_GATT_ITER_STOP;
   1c464:	2000      	movs	r0, #0
   1c466:	e7bd      	b.n	1c3e4 <ccc_load+0x10>
   1c468:	0001c675 	.word	0x0001c675

0001c46c <cf_write>:
{
   1c46c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c470:	461e      	mov	r6, r3
   1c472:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   1c476:	2b01      	cmp	r3, #1
   1c478:	d838      	bhi.n	1c4ec <cf_write+0x80>
   1c47a:	4605      	mov	r5, r0
   1c47c:	4617      	mov	r7, r2
	if (offset + len > sizeof(cfg->data)) {
   1c47e:	46b0      	mov	r8, r6
   1c480:	4433      	add	r3, r6
   1c482:	2b01      	cmp	r3, #1
   1c484:	d835      	bhi.n	1c4f2 <cf_write+0x86>
	cfg = find_cf_cfg(conn);
   1c486:	f7ff fd07 	bl	1be98 <find_cf_cfg>
	if (!cfg) {
   1c48a:	4604      	mov	r4, r0
   1c48c:	b318      	cbz	r0, 1c4d6 <cf_write+0x6a>
	if (!cfg) {
   1c48e:	b334      	cbz	r4, 1c4de <cf_write+0x72>
	if (!cf_set_value(cfg, value, len)) {
   1c490:	4632      	mov	r2, r6
   1c492:	4639      	mov	r1, r7
   1c494:	4620      	mov	r0, r4
   1c496:	f011 fb16 	bl	2dac6 <cf_set_value>
   1c49a:	b368      	cbz	r0, 1c4f8 <cf_write+0x8c>
   1c49c:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   1c4a0:	f8c4 3001 	str.w	r3, [r4, #1]
   1c4a4:	f8b5 2094 	ldrh.w	r2, [r5, #148]	; 0x94
   1c4a8:	f895 3096 	ldrb.w	r3, [r5, #150]	; 0x96
   1c4ac:	f8a4 2005 	strh.w	r2, [r4, #5]
   1c4b0:	71e3      	strb	r3, [r4, #7]
	cfg->id = conn->id;
   1c4b2:	7a2b      	ldrb	r3, [r5, #8]
   1c4b4:	f804 3b0c 	strb.w	r3, [r4], #12
   1c4b8:	f3bf 8f5b 	dmb	ish
   1c4bc:	e854 3f00 	ldrex	r3, [r4]
   1c4c0:	f043 0301 	orr.w	r3, r3, #1
   1c4c4:	e844 3200 	strex	r2, r3, [r4]
   1c4c8:	2a00      	cmp	r2, #0
   1c4ca:	d1f7      	bne.n	1c4bc <cf_write+0x50>
   1c4cc:	f3bf 8f5b 	dmb	ish
}
   1c4d0:	4640      	mov	r0, r8
   1c4d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg = find_cf_cfg(NULL);
   1c4d6:	f7ff fcdf 	bl	1be98 <find_cf_cfg>
   1c4da:	4604      	mov	r4, r0
   1c4dc:	e7d7      	b.n	1c48e <cf_write+0x22>
		BT_WARN("No space to store Client Supported Features");
   1c4de:	2157      	movs	r1, #87	; 0x57
   1c4e0:	4807      	ldr	r0, [pc, #28]	; (1c500 <cf_write+0x94>)
   1c4e2:	f00e fde3 	bl	2b0ac <z_log_minimal_printk>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1c4e6:	f06f 0810 	mvn.w	r8, #16
   1c4ea:	e7f1      	b.n	1c4d0 <cf_write+0x64>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1c4ec:	f06f 0806 	mvn.w	r8, #6
   1c4f0:	e7ee      	b.n	1c4d0 <cf_write+0x64>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1c4f2:	f06f 080c 	mvn.w	r8, #12
   1c4f6:	e7eb      	b.n	1c4d0 <cf_write+0x64>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1c4f8:	f06f 0812 	mvn.w	r8, #18
   1c4fc:	e7e8      	b.n	1c4d0 <cf_write+0x64>
   1c4fe:	bf00      	nop
   1c500:	000339bc 	.word	0x000339bc

0001c504 <sc_save>:
{
   1c504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c508:	b082      	sub	sp, #8
   1c50a:	4607      	mov	r7, r0
   1c50c:	4688      	mov	r8, r1
   1c50e:	4616      	mov	r6, r2
   1c510:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   1c512:	f7ff fceb 	bl	1beec <find_sc_cfg>
	if (!cfg) {
   1c516:	4604      	mov	r4, r0
   1c518:	b1a8      	cbz	r0, 1c546 <sc_save+0x42>
	if (!(cfg->data.start || cfg->data.end)) {
   1c51a:	8923      	ldrh	r3, [r4, #8]
   1c51c:	b90b      	cbnz	r3, 1c522 <sc_save+0x1e>
   1c51e:	8963      	ldrh	r3, [r4, #10]
   1c520:	b363      	cbz	r3, 1c57c <sc_save+0x78>
	modified = update_range(&cfg->data.start, &cfg->data.end, start, end);
   1c522:	462b      	mov	r3, r5
   1c524:	4632      	mov	r2, r6
   1c526:	f104 010a 	add.w	r1, r4, #10
   1c52a:	f104 0008 	add.w	r0, r4, #8
   1c52e:	f011 faa8 	bl	2da82 <update_range>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   1c532:	b128      	cbz	r0, 1c540 <sc_save+0x3c>
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
   1c534:	4621      	mov	r1, r4
   1c536:	f811 0b01 	ldrb.w	r0, [r1], #1
   1c53a:	f00f fe7f 	bl	2c23c <bt_addr_le_is_bonded>
   1c53e:	bb00      	cbnz	r0, 1c582 <sc_save+0x7e>
}
   1c540:	b002      	add	sp, #8
   1c542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1c546:	9000      	str	r0, [sp, #0]
   1c548:	f8cd 0003 	str.w	r0, [sp, #3]
   1c54c:	4669      	mov	r1, sp
   1c54e:	f7ff fccd 	bl	1beec <find_sc_cfg>
		if (!cfg) {
   1c552:	4604      	mov	r4, r0
   1c554:	b168      	cbz	r0, 1c572 <sc_save+0x6e>
		cfg->id = id;
   1c556:	4603      	mov	r3, r0
   1c558:	f803 7b01 	strb.w	r7, [r3], #1
   1c55c:	f8d8 2000 	ldr.w	r2, [r8]
   1c560:	f8c0 2001 	str.w	r2, [r0, #1]
   1c564:	f8b8 1004 	ldrh.w	r1, [r8, #4]
   1c568:	f898 2006 	ldrb.w	r2, [r8, #6]
   1c56c:	8099      	strh	r1, [r3, #4]
   1c56e:	719a      	strb	r2, [r3, #6]
   1c570:	e7d3      	b.n	1c51a <sc_save+0x16>
			BT_ERR("unable to save SC: no cfg left");
   1c572:	2145      	movs	r1, #69	; 0x45
   1c574:	4805      	ldr	r0, [pc, #20]	; (1c58c <sc_save+0x88>)
   1c576:	f00e fd99 	bl	2b0ac <z_log_minimal_printk>
			return;
   1c57a:	e7e1      	b.n	1c540 <sc_save+0x3c>
		cfg->data.start = start;
   1c57c:	8126      	strh	r6, [r4, #8]
		cfg->data.end = end;
   1c57e:	8165      	strh	r5, [r4, #10]
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   1c580:	e7d8      	b.n	1c534 <sc_save+0x30>
		sc_store(cfg);
   1c582:	4620      	mov	r0, r4
   1c584:	f7ff fd14 	bl	1bfb0 <sc_store>
   1c588:	e7da      	b.n	1c540 <sc_save+0x3c>
   1c58a:	bf00      	nop
   1c58c:	000339f0 	.word	0x000339f0

0001c590 <cf_set>:
{
   1c590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c594:	b084      	sub	sp, #16
	if (!name) {
   1c596:	b330      	cbz	r0, 1c5e6 <cf_set+0x56>
   1c598:	460c      	mov	r4, r1
   1c59a:	4615      	mov	r5, r2
   1c59c:	461e      	mov	r6, r3
   1c59e:	4607      	mov	r7, r0
	err = bt_settings_decode_key(name, &addr);
   1c5a0:	a902      	add	r1, sp, #8
   1c5a2:	f00f fc4b 	bl	2be3c <bt_settings_decode_key>
	if (err) {
   1c5a6:	4680      	mov	r8, r0
   1c5a8:	bb20      	cbnz	r0, 1c5f4 <cf_set+0x64>
	settings_name_next(name, &next);
   1c5aa:	a901      	add	r1, sp, #4
   1c5ac:	4638      	mov	r0, r7
   1c5ae:	f00f f961 	bl	2b874 <settings_name_next>
	if (!next) {
   1c5b2:	9801      	ldr	r0, [sp, #4]
   1c5b4:	b370      	cbz	r0, 1c614 <cf_set+0x84>
		unsigned long next_id = strtoul(next, NULL, 10);
   1c5b6:	220a      	movs	r2, #10
   1c5b8:	2100      	movs	r1, #0
   1c5ba:	f00e f8db 	bl	2a774 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   1c5be:	bb08      	cbnz	r0, 1c604 <cf_set+0x74>
		id = (uint8_t)next_id;
   1c5c0:	b2c7      	uxtb	r7, r0
	cfg = find_cf_cfg_by_addr(id, &addr);
   1c5c2:	a902      	add	r1, sp, #8
   1c5c4:	4638      	mov	r0, r7
   1c5c6:	f7ff fcd5 	bl	1bf74 <find_cf_cfg_by_addr>
	if (!cfg) {
   1c5ca:	4601      	mov	r1, r0
   1c5cc:	b320      	cbz	r0, 1c618 <cf_set+0x88>
	if (len_rd) {
   1c5ce:	2c00      	cmp	r4, #0
   1c5d0:	d041      	beq.n	1c656 <cf_set+0xc6>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
   1c5d2:	2201      	movs	r2, #1
   1c5d4:	3108      	adds	r1, #8
   1c5d6:	4630      	mov	r0, r6
   1c5d8:	47a8      	blx	r5
		if (len < 0) {
   1c5da:	1e04      	subs	r4, r0, #0
   1c5dc:	db34      	blt.n	1c648 <cf_set+0xb8>
}
   1c5de:	4640      	mov	r0, r8
   1c5e0:	b004      	add	sp, #16
   1c5e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		BT_ERR("Insufficient number of arguments");
   1c5e6:	2145      	movs	r1, #69	; 0x45
   1c5e8:	481d      	ldr	r0, [pc, #116]	; (1c660 <cf_set+0xd0>)
   1c5ea:	f00e fd5f 	bl	2b0ac <z_log_minimal_printk>
		return -EINVAL;
   1c5ee:	f06f 0815 	mvn.w	r8, #21
   1c5f2:	e7f4      	b.n	1c5de <cf_set+0x4e>
		BT_ERR("Unable to decode address %s", name);
   1c5f4:	463a      	mov	r2, r7
   1c5f6:	2145      	movs	r1, #69	; 0x45
   1c5f8:	481a      	ldr	r0, [pc, #104]	; (1c664 <cf_set+0xd4>)
   1c5fa:	f00e fd57 	bl	2b0ac <z_log_minimal_printk>
		return -EINVAL;
   1c5fe:	f06f 0815 	mvn.w	r8, #21
   1c602:	e7ec      	b.n	1c5de <cf_set+0x4e>
			BT_ERR("Invalid local identity %lu", next_id);
   1c604:	4602      	mov	r2, r0
   1c606:	2145      	movs	r1, #69	; 0x45
   1c608:	4817      	ldr	r0, [pc, #92]	; (1c668 <cf_set+0xd8>)
   1c60a:	f00e fd4f 	bl	2b0ac <z_log_minimal_printk>
			return -EINVAL;
   1c60e:	f06f 0815 	mvn.w	r8, #21
   1c612:	e7e4      	b.n	1c5de <cf_set+0x4e>
		id = BT_ID_DEFAULT;
   1c614:	2700      	movs	r7, #0
   1c616:	e7d4      	b.n	1c5c2 <cf_set+0x32>
		cfg = find_cf_cfg(NULL);
   1c618:	f7ff fc3e 	bl	1be98 <find_cf_cfg>
		if (!cfg) {
   1c61c:	4601      	mov	r1, r0
   1c61e:	b160      	cbz	r0, 1c63a <cf_set+0xaa>
		cfg->id = id;
   1c620:	4603      	mov	r3, r0
   1c622:	f803 7b01 	strb.w	r7, [r3], #1
   1c626:	9802      	ldr	r0, [sp, #8]
   1c628:	f8c1 0001 	str.w	r0, [r1, #1]
   1c62c:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   1c630:	f89d 200e 	ldrb.w	r2, [sp, #14]
   1c634:	8098      	strh	r0, [r3, #4]
   1c636:	719a      	strb	r2, [r3, #6]
}
   1c638:	e7c9      	b.n	1c5ce <cf_set+0x3e>
			BT_ERR("Unable to restore CF: no cfg left");
   1c63a:	2145      	movs	r1, #69	; 0x45
   1c63c:	480b      	ldr	r0, [pc, #44]	; (1c66c <cf_set+0xdc>)
   1c63e:	f00e fd35 	bl	2b0ac <z_log_minimal_printk>
			return -ENOMEM;
   1c642:	f06f 080b 	mvn.w	r8, #11
   1c646:	e7ca      	b.n	1c5de <cf_set+0x4e>
			BT_ERR("Failed to decode value (err %zd)", len);
   1c648:	4622      	mov	r2, r4
   1c64a:	2145      	movs	r1, #69	; 0x45
   1c64c:	4808      	ldr	r0, [pc, #32]	; (1c670 <cf_set+0xe0>)
   1c64e:	f00e fd2d 	bl	2b0ac <z_log_minimal_printk>
			return len;
   1c652:	46a0      	mov	r8, r4
   1c654:	e7c3      	b.n	1c5de <cf_set+0x4e>
		clear_cf_cfg(cfg);
   1c656:	4608      	mov	r0, r1
   1c658:	f011 fbe1 	bl	2de1e <clear_cf_cfg>
   1c65c:	e7bf      	b.n	1c5de <cf_set+0x4e>
   1c65e:	bf00      	nop
   1c660:	0003241c 	.word	0x0003241c
   1c664:	00033a14 	.word	0x00033a14
   1c668:	00033a38 	.word	0x00033a38
   1c66c:	00033a58 	.word	0x00033a58
   1c670:	00033858 	.word	0x00033858

0001c674 <bt_gatt_attr_write_ccc>:
{
   1c674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c678:	461c      	mov	r4, r3
   1c67a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1c67e:	f8d1 800c 	ldr.w	r8, [r1, #12]
	if (offset) {
   1c682:	2b00      	cmp	r3, #0
   1c684:	d158      	bne.n	1c738 <bt_gatt_attr_write_ccc+0xc4>
   1c686:	4606      	mov	r6, r0
   1c688:	460f      	mov	r7, r1
	if (!len || len > sizeof(uint16_t)) {
   1c68a:	1e63      	subs	r3, r4, #1
   1c68c:	b29b      	uxth	r3, r3
   1c68e:	2b01      	cmp	r3, #1
   1c690:	d855      	bhi.n	1c73e <bt_gatt_attr_write_ccc+0xca>
	if (len < sizeof(uint16_t)) {
   1c692:	2c01      	cmp	r4, #1
   1c694:	d923      	bls.n	1c6de <bt_gatt_attr_write_ccc+0x6a>
   1c696:	7853      	ldrb	r3, [r2, #1]
   1c698:	7815      	ldrb	r5, [r2, #0]
   1c69a:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
   1c69e:	4641      	mov	r1, r8
   1c6a0:	4630      	mov	r0, r6
   1c6a2:	f011 fae9 	bl	2dc78 <find_ccc_cfg>
	if (!cfg) {
   1c6a6:	4681      	mov	r9, r0
   1c6a8:	b1d8      	cbz	r0, 1c6e2 <bt_gatt_attr_write_ccc+0x6e>
	if (ccc->cfg_write) {
   1c6aa:	f8d8 3010 	ldr.w	r3, [r8, #16]
   1c6ae:	b143      	cbz	r3, 1c6c2 <bt_gatt_attr_write_ccc+0x4e>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   1c6b0:	462a      	mov	r2, r5
   1c6b2:	4639      	mov	r1, r7
   1c6b4:	4630      	mov	r0, r6
   1c6b6:	4798      	blx	r3
		if (write < 0) {
   1c6b8:	2800      	cmp	r0, #0
   1c6ba:	db0e      	blt.n	1c6da <bt_gatt_attr_write_ccc+0x66>
		if (write != sizeof(value) && write != 1) {
   1c6bc:	3801      	subs	r0, #1
   1c6be:	2801      	cmp	r0, #1
   1c6c0:	d840      	bhi.n	1c744 <bt_gatt_attr_write_ccc+0xd0>
	value_changed = cfg->value != value;
   1c6c2:	f8b9 a008 	ldrh.w	sl, [r9, #8]
	cfg->value = value;
   1c6c6:	f8a9 5008 	strh.w	r5, [r9, #8]
	if (cfg->value != ccc->value) {
   1c6ca:	f8b8 300a 	ldrh.w	r3, [r8, #10]
   1c6ce:	429d      	cmp	r5, r3
   1c6d0:	d125      	bne.n	1c71e <bt_gatt_attr_write_ccc+0xaa>
	if (value_changed) {
   1c6d2:	45aa      	cmp	sl, r5
   1c6d4:	d128      	bne.n	1c728 <bt_gatt_attr_write_ccc+0xb4>
	if (!value) {
   1c6d6:	b35d      	cbz	r5, 1c730 <bt_gatt_attr_write_ccc+0xbc>
	return len;
   1c6d8:	4620      	mov	r0, r4
}
   1c6da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		value = *(uint8_t *)buf;
   1c6de:	7815      	ldrb	r5, [r2, #0]
   1c6e0:	e7dd      	b.n	1c69e <bt_gatt_attr_write_ccc+0x2a>
		if (!value) {
   1c6e2:	b90d      	cbnz	r5, 1c6e8 <bt_gatt_attr_write_ccc+0x74>
			return len;
   1c6e4:	4620      	mov	r0, r4
   1c6e6:	e7f8      	b.n	1c6da <bt_gatt_attr_write_ccc+0x66>
		cfg = find_ccc_cfg(NULL, ccc);
   1c6e8:	4641      	mov	r1, r8
   1c6ea:	2000      	movs	r0, #0
   1c6ec:	f011 fac4 	bl	2dc78 <find_ccc_cfg>
		if (!cfg) {
   1c6f0:	4681      	mov	r9, r0
   1c6f2:	b168      	cbz	r0, 1c710 <bt_gatt_attr_write_ccc+0x9c>
   1c6f4:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
   1c6f8:	f8c0 3001 	str.w	r3, [r0, #1]
   1c6fc:	f8b6 2094 	ldrh.w	r2, [r6, #148]	; 0x94
   1c700:	f896 3096 	ldrb.w	r3, [r6, #150]	; 0x96
   1c704:	f8a0 2005 	strh.w	r2, [r0, #5]
   1c708:	71c3      	strb	r3, [r0, #7]
		cfg->id = conn->id;
   1c70a:	7a33      	ldrb	r3, [r6, #8]
   1c70c:	7003      	strb	r3, [r0, #0]
   1c70e:	e7cc      	b.n	1c6aa <bt_gatt_attr_write_ccc+0x36>
			BT_WARN("No space to store CCC cfg");
   1c710:	2157      	movs	r1, #87	; 0x57
   1c712:	480e      	ldr	r0, [pc, #56]	; (1c74c <bt_gatt_attr_write_ccc+0xd8>)
   1c714:	f00e fcca 	bl	2b0ac <z_log_minimal_printk>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1c718:	f06f 0010 	mvn.w	r0, #16
   1c71c:	e7dd      	b.n	1c6da <bt_gatt_attr_write_ccc+0x66>
		gatt_ccc_changed(attr, ccc);
   1c71e:	4641      	mov	r1, r8
   1c720:	4638      	mov	r0, r7
   1c722:	f011 fa0b 	bl	2db3c <gatt_ccc_changed>
   1c726:	e7d4      	b.n	1c6d2 <bt_gatt_attr_write_ccc+0x5e>
		gatt_ccc_conn_enqueue(conn);
   1c728:	4630      	mov	r0, r6
   1c72a:	f7ff fe0b 	bl	1c344 <gatt_ccc_conn_enqueue>
   1c72e:	e7d2      	b.n	1c6d6 <bt_gatt_attr_write_ccc+0x62>
		clear_ccc_cfg(cfg);
   1c730:	4648      	mov	r0, r9
   1c732:	f011 fb61 	bl	2ddf8 <clear_ccc_cfg>
   1c736:	e7cf      	b.n	1c6d8 <bt_gatt_attr_write_ccc+0x64>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1c738:	f06f 0006 	mvn.w	r0, #6
   1c73c:	e7cd      	b.n	1c6da <bt_gatt_attr_write_ccc+0x66>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1c73e:	f06f 000c 	mvn.w	r0, #12
   1c742:	e7ca      	b.n	1c6da <bt_gatt_attr_write_ccc+0x66>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   1c744:	f06f 000d 	mvn.w	r0, #13
   1c748:	e7c7      	b.n	1c6da <bt_gatt_attr_write_ccc+0x66>
   1c74a:	bf00      	nop
   1c74c:	00033a80 	.word	0x00033a80

0001c750 <sc_set>:
{
   1c750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c754:	b086      	sub	sp, #24
	if (!name) {
   1c756:	b330      	cbz	r0, 1c7a6 <sc_set+0x56>
   1c758:	460c      	mov	r4, r1
   1c75a:	4615      	mov	r5, r2
   1c75c:	461e      	mov	r6, r3
   1c75e:	4607      	mov	r7, r0
	err = bt_settings_decode_key(name, &addr);
   1c760:	a902      	add	r1, sp, #8
   1c762:	f00f fb6b 	bl	2be3c <bt_settings_decode_key>
	if (err) {
   1c766:	4680      	mov	r8, r0
   1c768:	bb20      	cbnz	r0, 1c7b4 <sc_set+0x64>
	settings_name_next(name, &next);
   1c76a:	a901      	add	r1, sp, #4
   1c76c:	4638      	mov	r0, r7
   1c76e:	f00f f881 	bl	2b874 <settings_name_next>
	if (!next) {
   1c772:	9801      	ldr	r0, [sp, #4]
   1c774:	b370      	cbz	r0, 1c7d4 <sc_set+0x84>
		unsigned long next_id = strtoul(next, NULL, 10);
   1c776:	220a      	movs	r2, #10
   1c778:	2100      	movs	r1, #0
   1c77a:	f00d fffb 	bl	2a774 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   1c77e:	bb08      	cbnz	r0, 1c7c4 <sc_set+0x74>
		id = (uint8_t)next_id;
   1c780:	b2c7      	uxtb	r7, r0
	cfg = find_sc_cfg(id, &addr);
   1c782:	a902      	add	r1, sp, #8
   1c784:	4638      	mov	r0, r7
   1c786:	f7ff fbb1 	bl	1beec <find_sc_cfg>
	if (!cfg && len_rd) {
   1c78a:	4601      	mov	r1, r0
   1c78c:	b320      	cbz	r0, 1c7d8 <sc_set+0x88>
	if (len_rd) {
   1c78e:	2c00      	cmp	r4, #0
   1c790:	d047      	beq.n	1c822 <sc_set+0xd2>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
   1c792:	2204      	movs	r2, #4
   1c794:	3108      	adds	r1, #8
   1c796:	4630      	mov	r0, r6
   1c798:	47a8      	blx	r5
		if (len < 0) {
   1c79a:	1e04      	subs	r4, r0, #0
   1c79c:	db3a      	blt.n	1c814 <sc_set+0xc4>
}
   1c79e:	4640      	mov	r0, r8
   1c7a0:	b006      	add	sp, #24
   1c7a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		BT_ERR("Insufficient number of arguments");
   1c7a6:	2145      	movs	r1, #69	; 0x45
   1c7a8:	4821      	ldr	r0, [pc, #132]	; (1c830 <sc_set+0xe0>)
   1c7aa:	f00e fc7f 	bl	2b0ac <z_log_minimal_printk>
		return -EINVAL;
   1c7ae:	f06f 0815 	mvn.w	r8, #21
   1c7b2:	e7f4      	b.n	1c79e <sc_set+0x4e>
		BT_ERR("Unable to decode address %s", name);
   1c7b4:	463a      	mov	r2, r7
   1c7b6:	2145      	movs	r1, #69	; 0x45
   1c7b8:	481e      	ldr	r0, [pc, #120]	; (1c834 <sc_set+0xe4>)
   1c7ba:	f00e fc77 	bl	2b0ac <z_log_minimal_printk>
		return -EINVAL;
   1c7be:	f06f 0815 	mvn.w	r8, #21
   1c7c2:	e7ec      	b.n	1c79e <sc_set+0x4e>
			BT_ERR("Invalid local identity %lu", next_id);
   1c7c4:	4602      	mov	r2, r0
   1c7c6:	2145      	movs	r1, #69	; 0x45
   1c7c8:	481b      	ldr	r0, [pc, #108]	; (1c838 <sc_set+0xe8>)
   1c7ca:	f00e fc6f 	bl	2b0ac <z_log_minimal_printk>
			return -EINVAL;
   1c7ce:	f06f 0815 	mvn.w	r8, #21
   1c7d2:	e7e4      	b.n	1c79e <sc_set+0x4e>
		id = BT_ID_DEFAULT;
   1c7d4:	2700      	movs	r7, #0
   1c7d6:	e7d4      	b.n	1c782 <sc_set+0x32>
	if (!cfg && len_rd) {
   1c7d8:	2c00      	cmp	r4, #0
   1c7da:	d0d8      	beq.n	1c78e <sc_set+0x3e>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1c7dc:	9004      	str	r0, [sp, #16]
   1c7de:	f8cd 0013 	str.w	r0, [sp, #19]
   1c7e2:	a904      	add	r1, sp, #16
   1c7e4:	f7ff fb82 	bl	1beec <find_sc_cfg>
		if (!cfg) {
   1c7e8:	4601      	mov	r1, r0
   1c7ea:	b160      	cbz	r0, 1c806 <sc_set+0xb6>
		cfg->id = id;
   1c7ec:	4603      	mov	r3, r0
   1c7ee:	f803 7b01 	strb.w	r7, [r3], #1
   1c7f2:	9802      	ldr	r0, [sp, #8]
   1c7f4:	f8c1 0001 	str.w	r0, [r1, #1]
   1c7f8:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   1c7fc:	f89d 200e 	ldrb.w	r2, [sp, #14]
   1c800:	8098      	strh	r0, [r3, #4]
   1c802:	719a      	strb	r2, [r3, #6]
   1c804:	e7c3      	b.n	1c78e <sc_set+0x3e>
			BT_ERR("Unable to restore SC: no cfg left");
   1c806:	2145      	movs	r1, #69	; 0x45
   1c808:	480c      	ldr	r0, [pc, #48]	; (1c83c <sc_set+0xec>)
   1c80a:	f00e fc4f 	bl	2b0ac <z_log_minimal_printk>
			return -ENOMEM;
   1c80e:	f06f 080b 	mvn.w	r8, #11
   1c812:	e7c4      	b.n	1c79e <sc_set+0x4e>
			BT_ERR("Failed to decode value (err %zd)", len);
   1c814:	4622      	mov	r2, r4
   1c816:	2145      	movs	r1, #69	; 0x45
   1c818:	4809      	ldr	r0, [pc, #36]	; (1c840 <sc_set+0xf0>)
   1c81a:	f00e fc47 	bl	2b0ac <z_log_minimal_printk>
			return len;
   1c81e:	46a0      	mov	r8, r4
   1c820:	e7bd      	b.n	1c79e <sc_set+0x4e>
	} else if (cfg) {
   1c822:	2900      	cmp	r1, #0
   1c824:	d0bb      	beq.n	1c79e <sc_set+0x4e>
__ssp_bos_icheck3(memset, void *, int)
   1c826:	2300      	movs	r3, #0
   1c828:	600b      	str	r3, [r1, #0]
   1c82a:	604b      	str	r3, [r1, #4]
   1c82c:	608b      	str	r3, [r1, #8]
   1c82e:	e7b6      	b.n	1c79e <sc_set+0x4e>
   1c830:	0003241c 	.word	0x0003241c
   1c834:	00033a14 	.word	0x00033a14
   1c838:	00033a38 	.word	0x00033a38
   1c83c:	00033aa0 	.word	0x00033aa0
   1c840:	00033858 	.word	0x00033858

0001c844 <disconnected_cb>:
{
   1c844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c848:	b083      	sub	sp, #12
   1c84a:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1c84c:	6882      	ldr	r2, [r0, #8]
   1c84e:	4b30      	ldr	r3, [pc, #192]	; (1c910 <disconnected_cb+0xcc>)
   1c850:	429a      	cmp	r2, r3
   1c852:	d003      	beq.n	1c85c <disconnected_cb+0x18>
}
   1c854:	2001      	movs	r0, #1
   1c856:	b003      	add	sp, #12
   1c858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c85c:	4604      	mov	r4, r0
	ccc = attr->user_data;
   1c85e:	68c7      	ldr	r7, [r0, #12]
	if (!ccc->value) {
   1c860:	897b      	ldrh	r3, [r7, #10]
   1c862:	2b00      	cmp	r3, #0
   1c864:	d0f6      	beq.n	1c854 <disconnected_cb+0x10>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1c866:	2600      	movs	r6, #0
	value_used = false;
   1c868:	46b1      	mov	r9, r6
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1c86a:	b15e      	cbz	r6, 1c884 <disconnected_cb+0x40>
	if (!value_used) {
   1c86c:	f1b9 0f00 	cmp.w	r9, #0
   1c870:	d1f0      	bne.n	1c854 <disconnected_cb+0x10>
		ccc->value = 0U;
   1c872:	2300      	movs	r3, #0
   1c874:	817b      	strh	r3, [r7, #10]
		if (ccc->cfg_changed) {
   1c876:	68fb      	ldr	r3, [r7, #12]
   1c878:	2b00      	cmp	r3, #0
   1c87a:	d0eb      	beq.n	1c854 <disconnected_cb+0x10>
			ccc->cfg_changed(attr, ccc->value);
   1c87c:	2100      	movs	r1, #0
   1c87e:	4620      	mov	r0, r4
   1c880:	4798      	blx	r3
   1c882:	e7e7      	b.n	1c854 <disconnected_cb+0x10>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   1c884:	eb06 0886 	add.w	r8, r6, r6, lsl #2
   1c888:	eb07 0848 	add.w	r8, r7, r8, lsl #1
		if (!cfg->value) {
   1c88c:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   1c890:	b1cb      	cbz	r3, 1c8c6 <disconnected_cb+0x82>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1c892:	eb06 0386 	add.w	r3, r6, r6, lsl #2
   1c896:	f108 0a01 	add.w	sl, r8, #1
   1c89a:	4652      	mov	r2, sl
   1c89c:	f817 1013 	ldrb.w	r1, [r7, r3, lsl #1]
   1c8a0:	4628      	mov	r0, r5
   1c8a2:	f010 f93f 	bl	2cb24 <bt_conn_is_peer_addr_le>
   1c8a6:	b998      	cbnz	r0, 1c8d0 <disconnected_cb+0x8c>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1c8a8:	eb06 0386 	add.w	r3, r6, r6, lsl #2
   1c8ac:	4651      	mov	r1, sl
   1c8ae:	f817 0013 	ldrb.w	r0, [r7, r3, lsl #1]
   1c8b2:	f7fd fc23 	bl	1a0fc <bt_conn_lookup_addr_le>
			if (tmp) {
   1c8b6:	4603      	mov	r3, r0
   1c8b8:	b128      	cbz	r0, 1c8c6 <disconnected_cb+0x82>
				if (tmp->state == BT_CONN_CONNECTED) {
   1c8ba:	7b42      	ldrb	r2, [r0, #13]
   1c8bc:	2a07      	cmp	r2, #7
   1c8be:	d004      	beq.n	1c8ca <disconnected_cb+0x86>
				bt_conn_unref(tmp);
   1c8c0:	4618      	mov	r0, r3
   1c8c2:	f7fd f977 	bl	19bb4 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1c8c6:	3601      	adds	r6, #1
   1c8c8:	e7cf      	b.n	1c86a <disconnected_cb+0x26>
					value_used = true;
   1c8ca:	f04f 0901 	mov.w	r9, #1
   1c8ce:	e7f7      	b.n	1c8c0 <disconnected_cb+0x7c>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1c8d0:	f105 0390 	add.w	r3, r5, #144	; 0x90
   1c8d4:	9301      	str	r3, [sp, #4]
   1c8d6:	4619      	mov	r1, r3
   1c8d8:	7a28      	ldrb	r0, [r5, #8]
   1c8da:	f00f fcaf 	bl	2c23c <bt_addr_le_is_bonded>
   1c8de:	b950      	cbnz	r0, 1c8f6 <disconnected_cb+0xb2>
				if (ccc == &sc_ccc) {
   1c8e0:	4b0c      	ldr	r3, [pc, #48]	; (1c914 <disconnected_cb+0xd0>)
   1c8e2:	429f      	cmp	r7, r3
   1c8e4:	d003      	beq.n	1c8ee <disconnected_cb+0xaa>
				clear_ccc_cfg(cfg);
   1c8e6:	4640      	mov	r0, r8
   1c8e8:	f011 fa86 	bl	2ddf8 <clear_ccc_cfg>
   1c8ec:	e7eb      	b.n	1c8c6 <disconnected_cb+0x82>
					sc_clear(conn);
   1c8ee:	4628      	mov	r0, r5
   1c8f0:	f7ff fbfc 	bl	1c0ec <sc_clear>
   1c8f4:	e7f7      	b.n	1c8e6 <disconnected_cb+0xa2>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1c8f6:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   1c8fa:	f8c8 3001 	str.w	r3, [r8, #1]
   1c8fe:	9b01      	ldr	r3, [sp, #4]
   1c900:	889a      	ldrh	r2, [r3, #4]
   1c902:	799b      	ldrb	r3, [r3, #6]
   1c904:	f8aa 2004 	strh.w	r2, [sl, #4]
   1c908:	f88a 3006 	strb.w	r3, [sl, #6]
   1c90c:	e7db      	b.n	1c8c6 <disconnected_cb+0x82>
   1c90e:	bf00      	nop
   1c910:	0001c675 	.word	0x0001c675
   1c914:	20000790 	.word	0x20000790

0001c918 <bt_gatt_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1c918:	4b1c      	ldr	r3, [pc, #112]	; (1c98c <bt_gatt_init+0x74>)
   1c91a:	2201      	movs	r2, #1
   1c91c:	f3bf 8f5b 	dmb	ish
   1c920:	e853 1f00 	ldrex	r1, [r3]
   1c924:	2900      	cmp	r1, #0
   1c926:	d103      	bne.n	1c930 <bt_gatt_init+0x18>
   1c928:	e843 2000 	strex	r0, r2, [r3]
   1c92c:	2800      	cmp	r0, #0
   1c92e:	d1f7      	bne.n	1c920 <bt_gatt_init+0x8>
   1c930:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   1c934:	d129      	bne.n	1c98a <bt_gatt_init+0x72>
{
   1c936:	b510      	push	{r4, lr}
	bt_gatt_service_init();
   1c938:	f7ff fc0e 	bl	1c158 <bt_gatt_service_init>
	list->head = NULL;
   1c93c:	4b14      	ldr	r3, [pc, #80]	; (1c990 <bt_gatt_init+0x78>)
   1c93e:	2200      	movs	r2, #0
   1c940:	601a      	str	r2, [r3, #0]
	list->tail = NULL;
   1c942:	605a      	str	r2, [r3, #4]
	k_work_init_delayable(&db_hash.work, db_hash_process);
   1c944:	4c13      	ldr	r4, [pc, #76]	; (1c994 <bt_gatt_init+0x7c>)
   1c946:	4914      	ldr	r1, [pc, #80]	; (1c998 <bt_gatt_init+0x80>)
   1c948:	4620      	mov	r0, r4
   1c94a:	f00a fb2b 	bl	26fa4 <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   1c94e:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1c952:	2300      	movs	r3, #0
   1c954:	4620      	mov	r0, r4
   1c956:	f7fa f87f 	bl	16a58 <bt_long_wq_schedule>
	k_work_init_delayable(&gatt_sc.work, sc_process);
   1c95a:	4c10      	ldr	r4, [pc, #64]	; (1c99c <bt_gatt_init+0x84>)
   1c95c:	4910      	ldr	r1, [pc, #64]	; (1c9a0 <bt_gatt_init+0x88>)
   1c95e:	f104 0020 	add.w	r0, r4, #32
   1c962:	f00a fb1f 	bl	26fa4 <k_work_init_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1c966:	3450      	adds	r4, #80	; 0x50
   1c968:	f3bf 8f5b 	dmb	ish
   1c96c:	e854 3f00 	ldrex	r3, [r4]
   1c970:	f043 0302 	orr.w	r3, r3, #2
   1c974:	e844 3200 	strex	r2, r3, [r4]
   1c978:	2a00      	cmp	r2, #0
   1c97a:	d1f7      	bne.n	1c96c <bt_gatt_init+0x54>
   1c97c:	f3bf 8f5b 	dmb	ish
	k_work_init_delayable(&gatt_ccc_store.work, ccc_delayed_store);
   1c980:	4908      	ldr	r1, [pc, #32]	; (1c9a4 <bt_gatt_init+0x8c>)
   1c982:	4809      	ldr	r0, [pc, #36]	; (1c9a8 <bt_gatt_init+0x90>)
   1c984:	f00a fb0e 	bl	26fa4 <k_work_init_delayable>
}
   1c988:	bd10      	pop	{r4, pc}
   1c98a:	4770      	bx	lr
   1c98c:	20002770 	.word	0x20002770
   1c990:	20002748 	.word	0x20002748
   1c994:	20001ad0 	.word	0x20001ad0
   1c998:	0001cc39 	.word	0x0001cc39
   1c99c:	20001b60 	.word	0x20001b60
   1c9a0:	0001d1f9 	.word	0x0001d1f9
   1c9a4:	0002e221 	.word	0x0002e221
   1c9a8:	20001b30 	.word	0x20001b30

0001c9ac <bt_gatt_attr_get_handle>:
{
   1c9ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   1c9b0:	b3a8      	cbz	r0, 1ca1e <bt_gatt_attr_get_handle+0x72>
   1c9b2:	4606      	mov	r6, r0
	if (attr->handle) {
   1c9b4:	8a07      	ldrh	r7, [r0, #16]
   1c9b6:	bbaf      	cbnz	r7, 1ca24 <bt_gatt_attr_get_handle+0x78>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1c9b8:	4d1c      	ldr	r5, [pc, #112]	; (1ca2c <bt_gatt_attr_get_handle+0x80>)
	uint16_t handle = 1;
   1c9ba:	2401      	movs	r4, #1
   1c9bc:	e003      	b.n	1c9c6 <bt_gatt_attr_get_handle+0x1a>
			handle += static_svc->attr_count;
   1c9be:	686b      	ldr	r3, [r5, #4]
   1c9c0:	441c      	add	r4, r3
   1c9c2:	b2a4      	uxth	r4, r4
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1c9c4:	3508      	adds	r5, #8
   1c9c6:	4b1a      	ldr	r3, [pc, #104]	; (1ca30 <bt_gatt_attr_get_handle+0x84>)
   1c9c8:	429d      	cmp	r5, r3
   1c9ca:	d81a      	bhi.n	1ca02 <bt_gatt_attr_get_handle+0x56>
   1c9cc:	4b18      	ldr	r3, [pc, #96]	; (1ca30 <bt_gatt_attr_get_handle+0x84>)
   1c9ce:	429d      	cmp	r5, r3
   1c9d0:	d228      	bcs.n	1ca24 <bt_gatt_attr_get_handle+0x78>
		if ((attr < &static_svc->attrs[0]) ||
   1c9d2:	6829      	ldr	r1, [r5, #0]
   1c9d4:	42b1      	cmp	r1, r6
   1c9d6:	d8f2      	bhi.n	1c9be <bt_gatt_attr_get_handle+0x12>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1c9d8:	6868      	ldr	r0, [r5, #4]
   1c9da:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   1c9de:	009b      	lsls	r3, r3, #2
   1c9e0:	3b14      	subs	r3, #20
   1c9e2:	440b      	add	r3, r1
		if ((attr < &static_svc->attrs[0]) ||
   1c9e4:	42b3      	cmp	r3, r6
   1c9e6:	d3ea      	bcc.n	1c9be <bt_gatt_attr_get_handle+0x12>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1c9e8:	2300      	movs	r3, #0
   1c9ea:	4298      	cmp	r0, r3
   1c9ec:	d9ea      	bls.n	1c9c4 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   1c9ee:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1c9f2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   1c9f6:	42b2      	cmp	r2, r6
   1c9f8:	d013      	beq.n	1ca22 <bt_gatt_attr_get_handle+0x76>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1c9fa:	3301      	adds	r3, #1
   1c9fc:	3401      	adds	r4, #1
   1c9fe:	b2a4      	uxth	r4, r4
   1ca00:	e7f3      	b.n	1c9ea <bt_gatt_attr_get_handle+0x3e>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1ca02:	f8df 8030 	ldr.w	r8, [pc, #48]	; 1ca34 <bt_gatt_attr_get_handle+0x88>
   1ca06:	f240 6265 	movw	r2, #1637	; 0x665
   1ca0a:	4641      	mov	r1, r8
   1ca0c:	480a      	ldr	r0, [pc, #40]	; (1ca38 <bt_gatt_attr_get_handle+0x8c>)
   1ca0e:	f00e fb3e 	bl	2b08e <assert_print>
   1ca12:	f240 6165 	movw	r1, #1637	; 0x665
   1ca16:	4640      	mov	r0, r8
   1ca18:	f00e fb32 	bl	2b080 <assert_post_action>
   1ca1c:	e7d6      	b.n	1c9cc <bt_gatt_attr_get_handle+0x20>
		return 0;
   1ca1e:	2700      	movs	r7, #0
   1ca20:	e000      	b.n	1ca24 <bt_gatt_attr_get_handle+0x78>
				return handle;
   1ca22:	4627      	mov	r7, r4
}
   1ca24:	4638      	mov	r0, r7
   1ca26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ca2a:	bf00      	nop
   1ca2c:	0003131c 	.word	0x0003131c
   1ca30:	00031334 	.word	0x00031334
   1ca34:	00033950 	.word	0x00033950
   1ca38:	000318f8 	.word	0x000318f8

0001ca3c <bt_gatt_foreach_attr_type>:
{
   1ca3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ca40:	b087      	sub	sp, #28
   1ca42:	4607      	mov	r7, r0
   1ca44:	468a      	mov	sl, r1
   1ca46:	4690      	mov	r8, r2
   1ca48:	4699      	mov	r9, r3
   1ca4a:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
	if (!num_matches) {
   1ca4e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   1ca52:	b91b      	cbnz	r3, 1ca5c <bt_gatt_foreach_attr_type+0x20>
		num_matches = UINT16_MAX;
   1ca54:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1ca58:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
	if (start_handle <= last_static_handle) {
   1ca5c:	4b20      	ldr	r3, [pc, #128]	; (1cae0 <bt_gatt_foreach_attr_type+0xa4>)
   1ca5e:	881b      	ldrh	r3, [r3, #0]
   1ca60:	42bb      	cmp	r3, r7
   1ca62:	d22d      	bcs.n	1cac0 <bt_gatt_foreach_attr_type+0x84>
}
   1ca64:	b007      	add	sp, #28
   1ca66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				handle += static_svc->attr_count;
   1ca6a:	b294      	uxth	r4, r2
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1ca6c:	3608      	adds	r6, #8
   1ca6e:	4b1d      	ldr	r3, [pc, #116]	; (1cae4 <bt_gatt_foreach_attr_type+0xa8>)
   1ca70:	429e      	cmp	r6, r3
   1ca72:	d828      	bhi.n	1cac6 <bt_gatt_foreach_attr_type+0x8a>
   1ca74:	4b1b      	ldr	r3, [pc, #108]	; (1cae4 <bt_gatt_foreach_attr_type+0xa8>)
   1ca76:	429e      	cmp	r6, r3
   1ca78:	d2f4      	bcs.n	1ca64 <bt_gatt_foreach_attr_type+0x28>
			if (handle + static_svc->attr_count < start_handle) {
   1ca7a:	6873      	ldr	r3, [r6, #4]
   1ca7c:	18e2      	adds	r2, r4, r3
   1ca7e:	42ba      	cmp	r2, r7
   1ca80:	d3f3      	bcc.n	1ca6a <bt_gatt_foreach_attr_type+0x2e>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1ca82:	2500      	movs	r5, #0
   1ca84:	6873      	ldr	r3, [r6, #4]
   1ca86:	42ab      	cmp	r3, r5
   1ca88:	d9f0      	bls.n	1ca6c <bt_gatt_foreach_attr_type+0x30>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1ca8a:	eb05 0085 	add.w	r0, r5, r5, lsl #2
   1ca8e:	f8cd b010 	str.w	fp, [sp, #16]
   1ca92:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1ca94:	9303      	str	r3, [sp, #12]
   1ca96:	ab10      	add	r3, sp, #64	; 0x40
   1ca98:	9302      	str	r3, [sp, #8]
   1ca9a:	f8cd 9004 	str.w	r9, [sp, #4]
   1ca9e:	f8cd 8000 	str.w	r8, [sp]
   1caa2:	4653      	mov	r3, sl
   1caa4:	463a      	mov	r2, r7
   1caa6:	4621      	mov	r1, r4
   1caa8:	f8d6 c000 	ldr.w	ip, [r6]
   1caac:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
   1cab0:	f011 f963 	bl	2dd7a <gatt_foreach_iter>
   1cab4:	2800      	cmp	r0, #0
   1cab6:	d0d5      	beq.n	1ca64 <bt_gatt_foreach_attr_type+0x28>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1cab8:	3501      	adds	r5, #1
   1caba:	3401      	adds	r4, #1
   1cabc:	b2a4      	uxth	r4, r4
   1cabe:	e7e1      	b.n	1ca84 <bt_gatt_foreach_attr_type+0x48>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1cac0:	4e09      	ldr	r6, [pc, #36]	; (1cae8 <bt_gatt_foreach_attr_type+0xac>)
		uint16_t handle = 1;
   1cac2:	2401      	movs	r4, #1
   1cac4:	e7d3      	b.n	1ca6e <bt_gatt_foreach_attr_type+0x32>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1cac6:	4d09      	ldr	r5, [pc, #36]	; (1caec <bt_gatt_foreach_attr_type+0xb0>)
   1cac8:	f240 7229 	movw	r2, #1833	; 0x729
   1cacc:	4629      	mov	r1, r5
   1cace:	4808      	ldr	r0, [pc, #32]	; (1caf0 <bt_gatt_foreach_attr_type+0xb4>)
   1cad0:	f00e fadd 	bl	2b08e <assert_print>
   1cad4:	f240 7129 	movw	r1, #1833	; 0x729
   1cad8:	4628      	mov	r0, r5
   1cada:	f00e fad1 	bl	2b080 <assert_post_action>
   1cade:	e7c9      	b.n	1ca74 <bt_gatt_foreach_attr_type+0x38>
   1cae0:	2000375c 	.word	0x2000375c
   1cae4:	00031334 	.word	0x00031334
   1cae8:	0003131c 	.word	0x0003131c
   1caec:	00033950 	.word	0x00033950
   1caf0:	000318f8 	.word	0x000318f8

0001caf4 <db_hash_gen>:
{
   1caf4:	b530      	push	{r4, r5, lr}
   1caf6:	b0cd      	sub	sp, #308	; 0x134
   1caf8:	4604      	mov	r4, r0
	uint8_t key[16] = {};
   1cafa:	2300      	movs	r3, #0
   1cafc:	9348      	str	r3, [sp, #288]	; 0x120
   1cafe:	9349      	str	r3, [sp, #292]	; 0x124
   1cb00:	934a      	str	r3, [sp, #296]	; 0x128
   1cb02:	934b      	str	r3, [sp, #300]	; 0x12c
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1cb04:	aa1c      	add	r2, sp, #112	; 0x70
   1cb06:	a948      	add	r1, sp, #288	; 0x120
   1cb08:	a804      	add	r0, sp, #16
   1cb0a:	f00e fffb 	bl	2bb04 <tc_cmac_setup>
   1cb0e:	b190      	cbz	r0, 1cb36 <db_hash_gen+0x42>
   1cb10:	ad04      	add	r5, sp, #16
   1cb12:	9502      	str	r5, [sp, #8]
   1cb14:	4b1d      	ldr	r3, [pc, #116]	; (1cb8c <db_hash_gen+0x98>)
   1cb16:	9301      	str	r3, [sp, #4]
   1cb18:	2200      	movs	r2, #0
   1cb1a:	9200      	str	r2, [sp, #0]
   1cb1c:	4613      	mov	r3, r2
   1cb1e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1cb22:	2001      	movs	r0, #1
   1cb24:	f7ff ff8a 	bl	1ca3c <bt_gatt_foreach_attr_type>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1cb28:	4629      	mov	r1, r5
   1cb2a:	4819      	ldr	r0, [pc, #100]	; (1cb90 <db_hash_gen+0x9c>)
   1cb2c:	f00f f887 	bl	2bc3e <tc_cmac_final>
   1cb30:	b130      	cbz	r0, 1cb40 <db_hash_gen+0x4c>
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
   1cb32:	2300      	movs	r3, #0
   1cb34:	e015      	b.n	1cb62 <db_hash_gen+0x6e>
		BT_ERR("Unable to setup AES CMAC");
   1cb36:	2145      	movs	r1, #69	; 0x45
   1cb38:	4816      	ldr	r0, [pc, #88]	; (1cb94 <db_hash_gen+0xa0>)
   1cb3a:	f00e fab7 	bl	2b0ac <z_log_minimal_printk>
		return;
   1cb3e:	e020      	b.n	1cb82 <db_hash_gen+0x8e>
		BT_ERR("Unable to calculate hash");
   1cb40:	2145      	movs	r1, #69	; 0x45
   1cb42:	4815      	ldr	r0, [pc, #84]	; (1cb98 <db_hash_gen+0xa4>)
   1cb44:	f00e fab2 	bl	2b0ac <z_log_minimal_printk>
		return;
   1cb48:	e01b      	b.n	1cb82 <db_hash_gen+0x8e>
		uint8_t tmp = ((uint8_t *)buf)[i];
   1cb4a:	4a11      	ldr	r2, [pc, #68]	; (1cb90 <db_hash_gen+0x9c>)
   1cb4c:	f812 c003 	ldrb.w	ip, [r2, r3]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1cb50:	f1c3 010f 	rsb	r1, r3, #15
   1cb54:	f812 e001 	ldrb.w	lr, [r2, r1]
   1cb58:	f802 e003 	strb.w	lr, [r2, r3]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1cb5c:	f802 c001 	strb.w	ip, [r2, r1]
	for (i = 0; i < (length/2); i++) {
   1cb60:	3301      	adds	r3, #1
   1cb62:	2b07      	cmp	r3, #7
   1cb64:	d9f1      	bls.n	1cb4a <db_hash_gen+0x56>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   1cb66:	b974      	cbnz	r4, 1cb86 <db_hash_gen+0x92>
   1cb68:	4b0c      	ldr	r3, [pc, #48]	; (1cb9c <db_hash_gen+0xa8>)
   1cb6a:	f3bf 8f5b 	dmb	ish
   1cb6e:	e853 2f00 	ldrex	r2, [r3]
   1cb72:	f042 0204 	orr.w	r2, r2, #4
   1cb76:	e843 2100 	strex	r1, r2, [r3]
   1cb7a:	2900      	cmp	r1, #0
   1cb7c:	d1f7      	bne.n	1cb6e <db_hash_gen+0x7a>
   1cb7e:	f3bf 8f5b 	dmb	ish
}
   1cb82:	b04d      	add	sp, #308	; 0x134
   1cb84:	bd30      	pop	{r4, r5, pc}
		db_hash_store();
   1cb86:	f7ff f973 	bl	1be70 <db_hash_store>
   1cb8a:	e7ed      	b.n	1cb68 <db_hash_gen+0x74>
   1cb8c:	0002db9b 	.word	0x0002db9b
   1cb90:	20001ab0 	.word	0x20001ab0
   1cb94:	00033ac8 	.word	0x00033ac8
   1cb98:	00033ae8 	.word	0x00033ae8
   1cb9c:	20001bb0 	.word	0x20001bb0

0001cba0 <db_hash_read>:
{
   1cba0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cba2:	b085      	sub	sp, #20
   1cba4:	4604      	mov	r4, r0
   1cba6:	460d      	mov	r5, r1
   1cba8:	4616      	mov	r6, r2
   1cbaa:	461f      	mov	r7, r3
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1cbac:	4820      	ldr	r0, [pc, #128]	; (1cc30 <db_hash_read+0x90>)
   1cbae:	f100 0150 	add.w	r1, r0, #80	; 0x50
   1cbb2:	3020      	adds	r0, #32
   1cbb4:	f00a fb7a 	bl	272ac <k_work_cancel_delayable_sync>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1cbb8:	f3bf 8f5b 	dmb	ish
   1cbbc:	4b1d      	ldr	r3, [pc, #116]	; (1cc34 <db_hash_read+0x94>)
   1cbbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   1cbc0:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   1cbc4:	f013 0f04 	tst.w	r3, #4
   1cbc8:	d016      	beq.n	1cbf8 <db_hash_read+0x58>
	cfg = find_cf_cfg(conn);
   1cbca:	4620      	mov	r0, r4
   1cbcc:	f7ff f964 	bl	1be98 <find_cf_cfg>
	if (cfg &&
   1cbd0:	b118      	cbz	r0, 1cbda <db_hash_read+0x3a>
	    CF_ROBUST_CACHING(cfg) &&
   1cbd2:	7a02      	ldrb	r2, [r0, #8]
	if (cfg &&
   1cbd4:	f012 0f01 	tst.w	r2, #1
   1cbd8:	d112      	bne.n	1cc00 <db_hash_read+0x60>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   1cbda:	2310      	movs	r3, #16
   1cbdc:	9302      	str	r3, [sp, #8]
   1cbde:	4b14      	ldr	r3, [pc, #80]	; (1cc30 <db_hash_read+0x90>)
   1cbe0:	9301      	str	r3, [sp, #4]
   1cbe2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1cbe6:	9300      	str	r3, [sp, #0]
   1cbe8:	463b      	mov	r3, r7
   1cbea:	4632      	mov	r2, r6
   1cbec:	4629      	mov	r1, r5
   1cbee:	4620      	mov	r0, r4
   1cbf0:	f011 f955 	bl	2de9e <bt_gatt_attr_read>
}
   1cbf4:	b005      	add	sp, #20
   1cbf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		db_hash_gen(true);
   1cbf8:	2001      	movs	r0, #1
   1cbfa:	f7ff ff7b 	bl	1caf4 <db_hash_gen>
   1cbfe:	e7e4      	b.n	1cbca <db_hash_read+0x2a>
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1cc00:	f100 020c 	add.w	r2, r0, #12
   1cc04:	f3bf 8f5b 	dmb	ish
   1cc08:	68c3      	ldr	r3, [r0, #12]
   1cc0a:	f3bf 8f5b 	dmb	ish
	    CF_ROBUST_CACHING(cfg) &&
   1cc0e:	f013 0f01 	tst.w	r3, #1
   1cc12:	d1e2      	bne.n	1cbda <db_hash_read+0x3a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1cc14:	f3bf 8f5b 	dmb	ish
   1cc18:	e852 3f00 	ldrex	r3, [r2]
   1cc1c:	f043 0302 	orr.w	r3, r3, #2
   1cc20:	e842 3100 	strex	r1, r3, [r2]
   1cc24:	2900      	cmp	r1, #0
   1cc26:	d1f7      	bne.n	1cc18 <db_hash_read+0x78>
   1cc28:	f3bf 8f5b 	dmb	ish
}
   1cc2c:	e7d5      	b.n	1cbda <db_hash_read+0x3a>
   1cc2e:	bf00      	nop
   1cc30:	20001ab0 	.word	0x20001ab0
   1cc34:	20001b60 	.word	0x20001b60

0001cc38 <db_hash_process>:
{
   1cc38:	b510      	push	{r4, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1cc3a:	4b21      	ldr	r3, [pc, #132]	; (1ccc0 <db_hash_process+0x88>)
   1cc3c:	f3bf 8f5b 	dmb	ish
   1cc40:	e853 2f00 	ldrex	r2, [r3]
   1cc44:	f022 0108 	bic.w	r1, r2, #8
   1cc48:	e843 1000 	strex	r0, r1, [r3]
   1cc4c:	2800      	cmp	r0, #0
   1cc4e:	d1f7      	bne.n	1cc40 <db_hash_process+0x8>
   1cc50:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(gatt_sc.flags, DB_HASH_LOAD)) {
   1cc54:	f012 0f08 	tst.w	r2, #8
   1cc58:	d02d      	beq.n	1ccb6 <db_hash_process+0x7e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1cc5a:	f3bf 8f5b 	dmb	ish
   1cc5e:	3b50      	subs	r3, #80	; 0x50
   1cc60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   1cc62:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   1cc66:	f013 0f04 	tst.w	r3, #4
   1cc6a:	d018      	beq.n	1cc9e <db_hash_process+0x66>
		if (!memcmp(db_hash.stored_hash, db_hash.hash,
   1cc6c:	4915      	ldr	r1, [pc, #84]	; (1ccc4 <db_hash_process+0x8c>)
   1cc6e:	2210      	movs	r2, #16
   1cc70:	1888      	adds	r0, r1, r2
   1cc72:	f014 f841 	bl	30cf8 <memcmp>
   1cc76:	b9b0      	cbnz	r0, 1cca6 <db_hash_process+0x6e>
			k_work_cancel_delayable(&gatt_sc.work);
   1cc78:	4c13      	ldr	r4, [pc, #76]	; (1ccc8 <db_hash_process+0x90>)
   1cc7a:	f104 0020 	add.w	r0, r4, #32
   1cc7e:	f00a fac9 	bl	27214 <k_work_cancel_delayable>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1cc82:	3450      	adds	r4, #80	; 0x50
   1cc84:	f3bf 8f5b 	dmb	ish
   1cc88:	e854 3f00 	ldrex	r3, [r4]
   1cc8c:	f023 0301 	bic.w	r3, r3, #1
   1cc90:	e844 3200 	strex	r2, r3, [r4]
   1cc94:	2a00      	cmp	r2, #0
   1cc96:	d1f7      	bne.n	1cc88 <db_hash_process+0x50>
   1cc98:	f3bf 8f5b 	dmb	ish
}
   1cc9c:	bd10      	pop	{r4, pc}
			db_hash_gen(false);
   1cc9e:	2000      	movs	r0, #0
   1cca0:	f7ff ff28 	bl	1caf4 <db_hash_gen>
   1cca4:	e7e2      	b.n	1cc6c <db_hash_process+0x34>
		sc_indicate(0x0001, 0xffff);
   1cca6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1ccaa:	2001      	movs	r0, #1
   1ccac:	f7ff fa8c 	bl	1c1c8 <sc_indicate>
		db_hash_store();
   1ccb0:	f7ff f8de 	bl	1be70 <db_hash_store>
		return;
   1ccb4:	e7f2      	b.n	1cc9c <db_hash_process+0x64>
	db_hash_gen(true);
   1ccb6:	2001      	movs	r0, #1
   1ccb8:	f7ff ff1c 	bl	1caf4 <db_hash_gen>
   1ccbc:	e7ee      	b.n	1cc9c <db_hash_process+0x64>
   1ccbe:	bf00      	nop
   1ccc0:	20001bb0 	.word	0x20001bb0
   1ccc4:	20001ab0 	.word	0x20001ab0
   1ccc8:	20001b60 	.word	0x20001b60

0001cccc <ccc_set>:
{
   1cccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ccd0:	b0bc      	sub	sp, #240	; 0xf0
   1ccd2:	4604      	mov	r4, r0
   1ccd4:	460d      	mov	r5, r1
   1ccd6:	4690      	mov	r8, r2
   1ccd8:	461f      	mov	r7, r3
		settings_name_next(name, &next);
   1ccda:	a905      	add	r1, sp, #20
   1ccdc:	f00e fdca 	bl	2b874 <settings_name_next>
		if (!name) {
   1cce0:	b154      	cbz	r4, 1ccf8 <ccc_set+0x2c>
		} else if (!next) {
   1cce2:	9805      	ldr	r0, [sp, #20]
   1cce4:	b178      	cbz	r0, 1cd06 <ccc_set+0x3a>
			unsigned long next_id = strtoul(next, NULL, 10);
   1cce6:	220a      	movs	r2, #10
   1cce8:	2100      	movs	r1, #0
   1ccea:	f00d fd43 	bl	2a774 <strtoul>
			if (next_id >= CONFIG_BT_ID_MAX) {
   1ccee:	4602      	mov	r2, r0
   1ccf0:	bb08      	cbnz	r0, 1cd36 <ccc_set+0x6a>
			load.addr_with_id.id = (uint8_t)next_id;
   1ccf2:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
   1ccf6:	e009      	b.n	1cd0c <ccc_set+0x40>
			BT_ERR("Insufficient number of arguments");
   1ccf8:	2145      	movs	r1, #69	; 0x45
   1ccfa:	4825      	ldr	r0, [pc, #148]	; (1cd90 <ccc_set+0xc4>)
   1ccfc:	f00e f9d6 	bl	2b0ac <z_log_minimal_printk>
			return -EINVAL;
   1cd00:	f06f 0615 	mvn.w	r6, #21
   1cd04:	e040      	b.n	1cd88 <ccc_set+0xbc>
			load.addr_with_id.id = BT_ID_DEFAULT;
   1cd06:	2300      	movs	r3, #0
   1cd08:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		err = bt_settings_decode_key(name, &addr);
   1cd0c:	a906      	add	r1, sp, #24
   1cd0e:	4620      	mov	r0, r4
   1cd10:	f00f f894 	bl	2be3c <bt_settings_decode_key>
		if (err) {
   1cd14:	4606      	mov	r6, r0
   1cd16:	b9a8      	cbnz	r0, 1cd44 <ccc_set+0x78>
		load.addr_with_id.addr = &addr;
   1cd18:	ab06      	add	r3, sp, #24
   1cd1a:	9308      	str	r3, [sp, #32]
		if (len_rd) {
   1cd1c:	b32d      	cbz	r5, 1cd6a <ccc_set+0x9e>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
   1cd1e:	22c0      	movs	r2, #192	; 0xc0
   1cd20:	a90c      	add	r1, sp, #48	; 0x30
   1cd22:	4638      	mov	r0, r7
   1cd24:	47c0      	blx	r8
			if (len < 0) {
   1cd26:	1e04      	subs	r4, r0, #0
   1cd28:	db14      	blt.n	1cd54 <ccc_set+0x88>
			load.entry = ccc_store;
   1cd2a:	ab0c      	add	r3, sp, #48	; 0x30
   1cd2c:	930a      	str	r3, [sp, #40]	; 0x28
			load.count = len / sizeof(*ccc_store);
   1cd2e:	08a4      	lsrs	r4, r4, #2
   1cd30:	940b      	str	r4, [sp, #44]	; 0x2c
			for (size_t i = 0; i < load.count; i++) {
   1cd32:	2300      	movs	r3, #0
   1cd34:	e016      	b.n	1cd64 <ccc_set+0x98>
				BT_ERR("Invalid local identity %lu", next_id);
   1cd36:	2145      	movs	r1, #69	; 0x45
   1cd38:	4816      	ldr	r0, [pc, #88]	; (1cd94 <ccc_set+0xc8>)
   1cd3a:	f00e f9b7 	bl	2b0ac <z_log_minimal_printk>
				return -EINVAL;
   1cd3e:	f06f 0615 	mvn.w	r6, #21
   1cd42:	e021      	b.n	1cd88 <ccc_set+0xbc>
			BT_ERR("Unable to decode address %s", name);
   1cd44:	4622      	mov	r2, r4
   1cd46:	2145      	movs	r1, #69	; 0x45
   1cd48:	4813      	ldr	r0, [pc, #76]	; (1cd98 <ccc_set+0xcc>)
   1cd4a:	f00e f9af 	bl	2b0ac <z_log_minimal_printk>
			return -EINVAL;
   1cd4e:	f06f 0615 	mvn.w	r6, #21
   1cd52:	e019      	b.n	1cd88 <ccc_set+0xbc>
				BT_ERR("Failed to decode value (err %zd)", len);
   1cd54:	4622      	mov	r2, r4
   1cd56:	2145      	movs	r1, #69	; 0x45
   1cd58:	4810      	ldr	r0, [pc, #64]	; (1cd9c <ccc_set+0xd0>)
   1cd5a:	f00e f9a7 	bl	2b0ac <z_log_minimal_printk>
				return len;
   1cd5e:	4626      	mov	r6, r4
   1cd60:	e012      	b.n	1cd88 <ccc_set+0xbc>
			for (size_t i = 0; i < load.count; i++) {
   1cd62:	3301      	adds	r3, #1
   1cd64:	429c      	cmp	r4, r3
   1cd66:	d8fc      	bhi.n	1cd62 <ccc_set+0x96>
   1cd68:	e002      	b.n	1cd70 <ccc_set+0xa4>
			load.entry = NULL;
   1cd6a:	2300      	movs	r3, #0
   1cd6c:	930a      	str	r3, [sp, #40]	; 0x28
			load.count = 0;
   1cd6e:	930b      	str	r3, [sp, #44]	; 0x2c
   1cd70:	ab08      	add	r3, sp, #32
   1cd72:	9302      	str	r3, [sp, #8]
   1cd74:	4b0a      	ldr	r3, [pc, #40]	; (1cda0 <ccc_set+0xd4>)
   1cd76:	9301      	str	r3, [sp, #4]
   1cd78:	2200      	movs	r2, #0
   1cd7a:	9200      	str	r2, [sp, #0]
   1cd7c:	4613      	mov	r3, r2
   1cd7e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1cd82:	2001      	movs	r0, #1
   1cd84:	f7ff fe5a 	bl	1ca3c <bt_gatt_foreach_attr_type>
}
   1cd88:	4630      	mov	r0, r6
   1cd8a:	b03c      	add	sp, #240	; 0xf0
   1cd8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1cd90:	0003241c 	.word	0x0003241c
   1cd94:	00033a38 	.word	0x00033a38
   1cd98:	00033a14 	.word	0x00033a14
   1cd9c:	00033858 	.word	0x00033858
   1cda0:	0001c3d5 	.word	0x0001c3d5

0001cda4 <ccc_set_direct>:
{
   1cda4:	b570      	push	{r4, r5, r6, lr}
   1cda6:	b082      	sub	sp, #8
   1cda8:	460c      	mov	r4, r1
   1cdaa:	4615      	mov	r5, r2
   1cdac:	461e      	mov	r6, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   1cdae:	aa01      	add	r2, sp, #4
   1cdb0:	4909      	ldr	r1, [pc, #36]	; (1cdd8 <ccc_set_direct+0x34>)
   1cdb2:	9806      	ldr	r0, [sp, #24]
   1cdb4:	f00e fd34 	bl	2b820 <settings_name_steq>
   1cdb8:	b138      	cbz	r0, 1cdca <ccc_set_direct+0x26>
		return ccc_set(name, len, read_cb, cb_arg);
   1cdba:	4633      	mov	r3, r6
   1cdbc:	462a      	mov	r2, r5
   1cdbe:	4621      	mov	r1, r4
   1cdc0:	9801      	ldr	r0, [sp, #4]
   1cdc2:	f7ff ff83 	bl	1cccc <ccc_set>
}
   1cdc6:	b002      	add	sp, #8
   1cdc8:	bd70      	pop	{r4, r5, r6, pc}
			BT_ERR("Invalid key");
   1cdca:	2145      	movs	r1, #69	; 0x45
   1cdcc:	4803      	ldr	r0, [pc, #12]	; (1cddc <ccc_set_direct+0x38>)
   1cdce:	f00e f96d 	bl	2b0ac <z_log_minimal_printk>
			return -EINVAL;
   1cdd2:	f06f 0015 	mvn.w	r0, #21
   1cdd6:	e7f6      	b.n	1cdc6 <ccc_set_direct+0x22>
   1cdd8:	00033b08 	.word	0x00033b08
   1cddc:	00033b10 	.word	0x00033b10

0001cde0 <gatt_find_by_uuid>:
{
   1cde0:	b510      	push	{r4, lr}
   1cde2:	b084      	sub	sp, #16
   1cde4:	4604      	mov	r4, r0
   1cde6:	460a      	mov	r2, r1
	found->attr = NULL;
   1cde8:	2300      	movs	r3, #0
   1cdea:	6003      	str	r3, [r0, #0]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1cdec:	9002      	str	r0, [sp, #8]
   1cdee:	4907      	ldr	r1, [pc, #28]	; (1ce0c <gatt_find_by_uuid+0x2c>)
   1cdf0:	9101      	str	r1, [sp, #4]
   1cdf2:	2101      	movs	r1, #1
   1cdf4:	9100      	str	r1, [sp, #0]
   1cdf6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1cdfa:	8880      	ldrh	r0, [r0, #4]
   1cdfc:	f7ff fe1e 	bl	1ca3c <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   1ce00:	6820      	ldr	r0, [r4, #0]
}
   1ce02:	3800      	subs	r0, #0
   1ce04:	bf18      	it	ne
   1ce06:	2001      	movne	r0, #1
   1ce08:	b004      	add	sp, #16
   1ce0a:	bd10      	pop	{r4, pc}
   1ce0c:	0002db8f 	.word	0x0002db8f

0001ce10 <bt_gatt_attr_next>:
{
   1ce10:	b510      	push	{r4, lr}
   1ce12:	b086      	sub	sp, #24
	struct bt_gatt_attr *next = NULL;
   1ce14:	2400      	movs	r4, #0
   1ce16:	9405      	str	r4, [sp, #20]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   1ce18:	f7ff fdc8 	bl	1c9ac <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   1ce1c:	3001      	adds	r0, #1
   1ce1e:	b280      	uxth	r0, r0
   1ce20:	ab05      	add	r3, sp, #20
   1ce22:	9302      	str	r3, [sp, #8]
   1ce24:	4b05      	ldr	r3, [pc, #20]	; (1ce3c <bt_gatt_attr_next+0x2c>)
   1ce26:	9301      	str	r3, [sp, #4]
   1ce28:	9400      	str	r4, [sp, #0]
   1ce2a:	4623      	mov	r3, r4
   1ce2c:	4622      	mov	r2, r4
   1ce2e:	4601      	mov	r1, r0
   1ce30:	f7ff fe04 	bl	1ca3c <bt_gatt_foreach_attr_type>
}
   1ce34:	9805      	ldr	r0, [sp, #20]
   1ce36:	b006      	add	sp, #24
   1ce38:	bd10      	pop	{r4, pc}
   1ce3a:	bf00      	nop
   1ce3c:	0002db37 	.word	0x0002db37

0001ce40 <bt_gatt_is_subscribed>:
{
   1ce40:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ce42:	b089      	sub	sp, #36	; 0x24
   1ce44:	460c      	mov	r4, r1
   1ce46:	4615      	mov	r5, r2
	__ASSERT(conn, "invalid parameter\n");
   1ce48:	4606      	mov	r6, r0
   1ce4a:	b130      	cbz	r0, 1ce5a <bt_gatt_is_subscribed+0x1a>
	__ASSERT(attr, "invalid parameter\n");
   1ce4c:	b194      	cbz	r4, 1ce74 <bt_gatt_is_subscribed+0x34>
	if (conn->state != BT_CONN_CONNECTED) {
   1ce4e:	7b73      	ldrb	r3, [r6, #13]
   1ce50:	2b07      	cmp	r3, #7
   1ce52:	d01c      	beq.n	1ce8e <bt_gatt_is_subscribed+0x4e>
		return false;
   1ce54:	2000      	movs	r0, #0
}
   1ce56:	b009      	add	sp, #36	; 0x24
   1ce58:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__ASSERT(conn, "invalid parameter\n");
   1ce5a:	4f5f      	ldr	r7, [pc, #380]	; (1cfd8 <bt_gatt_is_subscribed+0x198>)
   1ce5c:	f640 424b 	movw	r2, #3147	; 0xc4b
   1ce60:	4639      	mov	r1, r7
   1ce62:	485e      	ldr	r0, [pc, #376]	; (1cfdc <bt_gatt_is_subscribed+0x19c>)
   1ce64:	f00e f913 	bl	2b08e <assert_print>
   1ce68:	f640 414b 	movw	r1, #3147	; 0xc4b
   1ce6c:	4638      	mov	r0, r7
   1ce6e:	f00e f907 	bl	2b080 <assert_post_action>
   1ce72:	e7eb      	b.n	1ce4c <bt_gatt_is_subscribed+0xc>
	__ASSERT(attr, "invalid parameter\n");
   1ce74:	4f58      	ldr	r7, [pc, #352]	; (1cfd8 <bt_gatt_is_subscribed+0x198>)
   1ce76:	f640 424c 	movw	r2, #3148	; 0xc4c
   1ce7a:	4639      	mov	r1, r7
   1ce7c:	4857      	ldr	r0, [pc, #348]	; (1cfdc <bt_gatt_is_subscribed+0x19c>)
   1ce7e:	f00e f906 	bl	2b08e <assert_print>
   1ce82:	f640 414c 	movw	r1, #3148	; 0xc4c
   1ce86:	4638      	mov	r0, r7
   1ce88:	f00e f8fa 	bl	2b080 <assert_post_action>
   1ce8c:	e7df      	b.n	1ce4e <bt_gatt_is_subscribed+0xe>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   1ce8e:	6820      	ldr	r0, [r4, #0]
   1ce90:	2300      	movs	r3, #0
   1ce92:	f88d 3004 	strb.w	r3, [sp, #4]
   1ce96:	f642 0303 	movw	r3, #10243	; 0x2803
   1ce9a:	f8ad 3006 	strh.w	r3, [sp, #6]
   1ce9e:	a901      	add	r1, sp, #4
   1cea0:	f00f f809 	bl	2beb6 <bt_uuid_cmp>
   1cea4:	b950      	cbnz	r0, 1cebc <bt_gatt_is_subscribed+0x7c>
		struct bt_gatt_chrc *chrc = attr->user_data;
   1cea6:	68e3      	ldr	r3, [r4, #12]
		if (!(chrc->properties &
   1cea8:	799b      	ldrb	r3, [r3, #6]
   1ceaa:	f013 0f30 	tst.w	r3, #48	; 0x30
   1ceae:	d0d2      	beq.n	1ce56 <bt_gatt_is_subscribed+0x16>
		attr = bt_gatt_attr_next(attr);
   1ceb0:	4620      	mov	r0, r4
   1ceb2:	f7ff ffad 	bl	1ce10 <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   1ceb6:	4604      	mov	r4, r0
   1ceb8:	2800      	cmp	r0, #0
   1ceba:	d045      	beq.n	1cf48 <bt_gatt_is_subscribed+0x108>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   1cebc:	6820      	ldr	r0, [r4, #0]
   1cebe:	2300      	movs	r3, #0
   1cec0:	f88d 3008 	strb.w	r3, [sp, #8]
   1cec4:	f642 1302 	movw	r3, #10498	; 0x2902
   1cec8:	f8ad 300a 	strh.w	r3, [sp, #10]
   1cecc:	a902      	add	r1, sp, #8
   1cece:	f00e fff2 	bl	2beb6 <bt_uuid_cmp>
   1ced2:	2800      	cmp	r0, #0
   1ced4:	d145      	bne.n	1cf62 <bt_gatt_is_subscribed+0x122>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   1ced6:	6820      	ldr	r0, [r4, #0]
   1ced8:	2300      	movs	r3, #0
   1ceda:	f88d 300c 	strb.w	r3, [sp, #12]
   1cede:	f642 1302 	movw	r3, #10498	; 0x2902
   1cee2:	f8ad 300e 	strh.w	r3, [sp, #14]
   1cee6:	a903      	add	r1, sp, #12
   1cee8:	f00e ffe5 	bl	2beb6 <bt_uuid_cmp>
   1ceec:	2800      	cmp	r0, #0
   1ceee:	d04b      	beq.n	1cf88 <bt_gatt_is_subscribed+0x148>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   1cef0:	6820      	ldr	r0, [r4, #0]
   1cef2:	2300      	movs	r3, #0
   1cef4:	f88d 3010 	strb.w	r3, [sp, #16]
   1cef8:	f642 0303 	movw	r3, #10243	; 0x2803
   1cefc:	f8ad 3012 	strh.w	r3, [sp, #18]
   1cf00:	a904      	add	r1, sp, #16
   1cf02:	f00e ffd8 	bl	2beb6 <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   1cf06:	2800      	cmp	r0, #0
   1cf08:	d03e      	beq.n	1cf88 <bt_gatt_is_subscribed+0x148>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1cf0a:	6820      	ldr	r0, [r4, #0]
   1cf0c:	2300      	movs	r3, #0
   1cf0e:	f88d 3014 	strb.w	r3, [sp, #20]
   1cf12:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1cf16:	f8ad 3016 	strh.w	r3, [sp, #22]
   1cf1a:	a905      	add	r1, sp, #20
   1cf1c:	f00e ffcb 	bl	2beb6 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   1cf20:	b390      	cbz	r0, 1cf88 <bt_gatt_is_subscribed+0x148>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1cf22:	6820      	ldr	r0, [r4, #0]
   1cf24:	2300      	movs	r3, #0
   1cf26:	f88d 3018 	strb.w	r3, [sp, #24]
   1cf2a:	f642 0301 	movw	r3, #10241	; 0x2801
   1cf2e:	f8ad 301a 	strh.w	r3, [sp, #26]
   1cf32:	a906      	add	r1, sp, #24
   1cf34:	f00e ffbf 	bl	2beb6 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1cf38:	b330      	cbz	r0, 1cf88 <bt_gatt_is_subscribed+0x148>
		attr = bt_gatt_attr_next(attr);
   1cf3a:	4620      	mov	r0, r4
   1cf3c:	f7ff ff68 	bl	1ce10 <bt_gatt_attr_next>
		if (!attr) {
   1cf40:	4604      	mov	r4, r0
   1cf42:	2800      	cmp	r0, #0
   1cf44:	d1c7      	bne.n	1ced6 <bt_gatt_is_subscribed+0x96>
   1cf46:	e786      	b.n	1ce56 <bt_gatt_is_subscribed+0x16>
		__ASSERT(attr, "No more attributes\n");
   1cf48:	4f23      	ldr	r7, [pc, #140]	; (1cfd8 <bt_gatt_is_subscribed+0x198>)
   1cf4a:	f640 425d 	movw	r2, #3165	; 0xc5d
   1cf4e:	4639      	mov	r1, r7
   1cf50:	4822      	ldr	r0, [pc, #136]	; (1cfdc <bt_gatt_is_subscribed+0x19c>)
   1cf52:	f00e f89c 	bl	2b08e <assert_print>
   1cf56:	f640 415d 	movw	r1, #3165	; 0xc5d
   1cf5a:	4638      	mov	r0, r7
   1cf5c:	f00e f890 	bl	2b080 <assert_post_action>
   1cf60:	e7ac      	b.n	1cebc <bt_gatt_is_subscribed+0x7c>
		attr = bt_gatt_attr_next(attr);
   1cf62:	4620      	mov	r0, r4
   1cf64:	f7ff ff54 	bl	1ce10 <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   1cf68:	4604      	mov	r4, r0
   1cf6a:	2800      	cmp	r0, #0
   1cf6c:	d1b3      	bne.n	1ced6 <bt_gatt_is_subscribed+0x96>
   1cf6e:	4f1a      	ldr	r7, [pc, #104]	; (1cfd8 <bt_gatt_is_subscribed+0x198>)
   1cf70:	f640 4263 	movw	r2, #3171	; 0xc63
   1cf74:	4639      	mov	r1, r7
   1cf76:	4819      	ldr	r0, [pc, #100]	; (1cfdc <bt_gatt_is_subscribed+0x19c>)
   1cf78:	f00e f889 	bl	2b08e <assert_print>
   1cf7c:	f640 4163 	movw	r1, #3171	; 0xc63
   1cf80:	4638      	mov	r0, r7
   1cf82:	f00e f87d 	bl	2b080 <assert_post_action>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   1cf86:	e7a6      	b.n	1ced6 <bt_gatt_is_subscribed+0x96>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   1cf88:	6820      	ldr	r0, [r4, #0]
   1cf8a:	2300      	movs	r3, #0
   1cf8c:	f88d 301c 	strb.w	r3, [sp, #28]
   1cf90:	f642 1302 	movw	r3, #10498	; 0x2902
   1cf94:	f8ad 301e 	strh.w	r3, [sp, #30]
   1cf98:	a907      	add	r1, sp, #28
   1cf9a:	f00e ff8c 	bl	2beb6 <bt_uuid_cmp>
   1cf9e:	b920      	cbnz	r0, 1cfaa <bt_gatt_is_subscribed+0x16a>
	ccc = attr->user_data;
   1cfa0:	68e7      	ldr	r7, [r4, #12]
	for (size_t i = 0; i < BT_GATT_CCC_MAX; i++) {
   1cfa2:	2400      	movs	r4, #0
   1cfa4:	b11c      	cbz	r4, 1cfae <bt_gatt_is_subscribed+0x16e>
	return false;
   1cfa6:	2000      	movs	r0, #0
   1cfa8:	e755      	b.n	1ce56 <bt_gatt_is_subscribed+0x16>
		return false;
   1cfaa:	2000      	movs	r0, #0
   1cfac:	e753      	b.n	1ce56 <bt_gatt_is_subscribed+0x16>
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   1cfae:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1cfb2:	eb07 0243 	add.w	r2, r7, r3, lsl #1
   1cfb6:	3201      	adds	r2, #1
   1cfb8:	f817 1013 	ldrb.w	r1, [r7, r3, lsl #1]
   1cfbc:	4630      	mov	r0, r6
   1cfbe:	f00f fdb1 	bl	2cb24 <bt_conn_is_peer_addr_le>
   1cfc2:	b138      	cbz	r0, 1cfd4 <bt_gatt_is_subscribed+0x194>
		    (ccc_type & ccc->cfg[i].value)) {
   1cfc4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1cfc8:	eb07 0343 	add.w	r3, r7, r3, lsl #1
   1cfcc:	891b      	ldrh	r3, [r3, #8]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   1cfce:	422b      	tst	r3, r5
   1cfd0:	f47f af41 	bne.w	1ce56 <bt_gatt_is_subscribed+0x16>
	for (size_t i = 0; i < BT_GATT_CCC_MAX; i++) {
   1cfd4:	3401      	adds	r4, #1
   1cfd6:	e7e5      	b.n	1cfa4 <bt_gatt_is_subscribed+0x164>
   1cfd8:	00033950 	.word	0x00033950
   1cfdc:	000318f8 	.word	0x000318f8

0001cfe0 <gatt_indicate>:
{
   1cfe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1cfe4:	b082      	sub	sp, #8
   1cfe6:	4605      	mov	r5, r0
   1cfe8:	460f      	mov	r7, r1
   1cfea:	4614      	mov	r4, r2
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1cfec:	2294      	movs	r2, #148	; 0x94
   1cfee:	6861      	ldr	r1, [r4, #4]
   1cff0:	f011 f86f 	bl	2e0d2 <bt_gatt_check_perm>
   1cff4:	2800      	cmp	r0, #0
   1cff6:	d13c      	bne.n	1d072 <gatt_indicate+0x92>
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
   1cff8:	2202      	movs	r2, #2
   1cffa:	6861      	ldr	r1, [r4, #4]
   1cffc:	4628      	mov	r0, r5
   1cffe:	f7ff ff1f 	bl	1ce40 <bt_gatt_is_subscribed>
   1d002:	2800      	cmp	r0, #0
   1d004:	d03c      	beq.n	1d080 <gatt_indicate+0xa0>
	len = sizeof(*ind) + params->len;
   1d006:	8aa6      	ldrh	r6, [r4, #20]
   1d008:	3602      	adds	r6, #2
	req = gatt_req_alloc(gatt_indicate_rsp, params, NULL,
   1d00a:	9600      	str	r6, [sp, #0]
   1d00c:	231d      	movs	r3, #29
   1d00e:	2200      	movs	r2, #0
   1d010:	4621      	mov	r1, r4
   1d012:	4827      	ldr	r0, [pc, #156]	; (1d0b0 <gatt_indicate+0xd0>)
   1d014:	f010 fedc 	bl	2ddd0 <gatt_req_alloc>
	if (!req) {
   1d018:	4681      	mov	r9, r0
   1d01a:	2800      	cmp	r0, #0
   1d01c:	d045      	beq.n	1d0aa <gatt_indicate+0xca>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   1d01e:	4632      	mov	r2, r6
   1d020:	211d      	movs	r1, #29
   1d022:	4628      	mov	r0, r5
   1d024:	f7fe f9e4 	bl	1b3f0 <bt_att_create_pdu>
	if (!buf) {
   1d028:	4680      	mov	r8, r0
   1d02a:	b380      	cbz	r0, 1d08e <gatt_indicate+0xae>
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
   1d02c:	2301      	movs	r3, #1
   1d02e:	2200      	movs	r2, #0
   1d030:	4611      	mov	r1, r2
   1d032:	f010 fd1f 	bl	2da74 <bt_att_set_tx_meta_data>
   1d036:	f108 0a08 	add.w	sl, r8, #8
   1d03a:	2102      	movs	r1, #2
   1d03c:	4650      	mov	r0, sl
   1d03e:	f003 fab9 	bl	205b4 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   1d042:	4606      	mov	r6, r0
   1d044:	f826 7b02 	strh.w	r7, [r6], #2
   1d048:	8aa1      	ldrh	r1, [r4, #20]
   1d04a:	4650      	mov	r0, sl
   1d04c:	f003 fab2 	bl	205b4 <net_buf_simple_add>
   1d050:	8aa2      	ldrh	r2, [r4, #20]
   1d052:	6921      	ldr	r1, [r4, #16]
   1d054:	4630      	mov	r0, r6
   1d056:	f013 fe5f 	bl	30d18 <memcpy>
	req->buf = buf;
   1d05a:	f8c9 8008 	str.w	r8, [r9, #8]
	err = bt_att_req_send(conn, req);
   1d05e:	4649      	mov	r1, r9
   1d060:	4628      	mov	r0, r5
   1d062:	f7fe fea7 	bl	1bdb4 <bt_att_req_send>
	if (err) {
   1d066:	4604      	mov	r4, r0
   1d068:	b9d8      	cbnz	r0, 1d0a2 <gatt_indicate+0xc2>
}
   1d06a:	4620      	mov	r0, r4
   1d06c:	b002      	add	sp, #8
   1d06e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		BT_WARN("Link is not encrypted");
   1d072:	2157      	movs	r1, #87	; 0x57
   1d074:	480f      	ldr	r0, [pc, #60]	; (1d0b4 <gatt_indicate+0xd4>)
   1d076:	f00e f819 	bl	2b0ac <z_log_minimal_printk>
		return -EPERM;
   1d07a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1d07e:	e7f4      	b.n	1d06a <gatt_indicate+0x8a>
			BT_WARN("Device is not subscribed to characteristic");
   1d080:	2157      	movs	r1, #87	; 0x57
   1d082:	480d      	ldr	r0, [pc, #52]	; (1d0b8 <gatt_indicate+0xd8>)
   1d084:	f00e f812 	bl	2b0ac <z_log_minimal_printk>
			return -EINVAL;
   1d088:	f06f 0415 	mvn.w	r4, #21
   1d08c:	e7ed      	b.n	1d06a <gatt_indicate+0x8a>
		BT_WARN("No buffer available to send indication");
   1d08e:	2157      	movs	r1, #87	; 0x57
   1d090:	480a      	ldr	r0, [pc, #40]	; (1d0bc <gatt_indicate+0xdc>)
   1d092:	f00e f80b 	bl	2b0ac <z_log_minimal_printk>
		bt_att_req_free(req);
   1d096:	4648      	mov	r0, r9
   1d098:	f7fe fd18 	bl	1bacc <bt_att_req_free>
		return -ENOMEM;
   1d09c:	f06f 040b 	mvn.w	r4, #11
   1d0a0:	e7e3      	b.n	1d06a <gatt_indicate+0x8a>
		bt_att_req_free(req);
   1d0a2:	4648      	mov	r0, r9
   1d0a4:	f7fe fd12 	bl	1bacc <bt_att_req_free>
   1d0a8:	e7df      	b.n	1d06a <gatt_indicate+0x8a>
		return -ENOMEM;
   1d0aa:	f06f 040b 	mvn.w	r4, #11
   1d0ae:	e7dc      	b.n	1d06a <gatt_indicate+0x8a>
   1d0b0:	0002db6d 	.word	0x0002db6d
   1d0b4:	00033b28 	.word	0x00033b28
   1d0b8:	00033b44 	.word	0x00033b44
   1d0bc:	00033b74 	.word	0x00033b74

0001d0c0 <bt_gatt_indicate>:
{
   1d0c0:	b570      	push	{r4, r5, r6, lr}
   1d0c2:	b08c      	sub	sp, #48	; 0x30
   1d0c4:	4605      	mov	r5, r0
	__ASSERT(params, "invalid parameters\n");
   1d0c6:	460c      	mov	r4, r1
   1d0c8:	2900      	cmp	r1, #0
   1d0ca:	d041      	beq.n	1d150 <bt_gatt_indicate+0x90>
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   1d0cc:	6863      	ldr	r3, [r4, #4]
   1d0ce:	2b00      	cmp	r3, #0
   1d0d0:	d04b      	beq.n	1d16a <bt_gatt_indicate+0xaa>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1d0d2:	f3bf 8f5b 	dmb	ish
   1d0d6:	4b44      	ldr	r3, [pc, #272]	; (1d1e8 <bt_gatt_indicate+0x128>)
   1d0d8:	681b      	ldr	r3, [r3, #0]
   1d0da:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1d0de:	f013 0f04 	tst.w	r3, #4
   1d0e2:	d078      	beq.n	1d1d6 <bt_gatt_indicate+0x116>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1d0e4:	b115      	cbz	r5, 1d0ec <bt_gatt_indicate+0x2c>
   1d0e6:	7b6b      	ldrb	r3, [r5, #13]
   1d0e8:	2b07      	cmp	r3, #7
   1d0ea:	d177      	bne.n	1d1dc <bt_gatt_indicate+0x11c>
	data.attr = params->attr;
   1d0ec:	6860      	ldr	r0, [r4, #4]
   1d0ee:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1d0f0:	f7ff fc5c 	bl	1c9ac <bt_gatt_attr_get_handle>
   1d0f4:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   1d0f8:	6821      	ldr	r1, [r4, #0]
   1d0fa:	2900      	cmp	r1, #0
   1d0fc:	d045      	beq.n	1d18a <bt_gatt_indicate+0xca>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1d0fe:	a805      	add	r0, sp, #20
   1d100:	f7ff fe6e 	bl	1cde0 <gatt_find_by_uuid>
   1d104:	2800      	cmp	r0, #0
   1d106:	d06c      	beq.n	1d1e2 <bt_gatt_indicate+0x122>
		params->attr = data.attr;
   1d108:	9b05      	ldr	r3, [sp, #20]
   1d10a:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1d10c:	9b05      	ldr	r3, [sp, #20]
   1d10e:	6818      	ldr	r0, [r3, #0]
   1d110:	2300      	movs	r3, #0
   1d112:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   1d116:	f642 0303 	movw	r3, #10243	; 0x2803
   1d11a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1d11e:	a90b      	add	r1, sp, #44	; 0x2c
   1d120:	f00e fec9 	bl	2beb6 <bt_uuid_cmp>
   1d124:	b948      	cbnz	r0, 1d13a <bt_gatt_indicate+0x7a>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1d126:	9805      	ldr	r0, [sp, #20]
   1d128:	68c3      	ldr	r3, [r0, #12]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   1d12a:	799b      	ldrb	r3, [r3, #6]
   1d12c:	f013 0f20 	tst.w	r3, #32
   1d130:	d030      	beq.n	1d194 <bt_gatt_indicate+0xd4>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1d132:	f010 ff75 	bl	2e020 <bt_gatt_attr_value_handle>
   1d136:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (conn) {
   1d13a:	b375      	cbz	r5, 1d19a <bt_gatt_indicate+0xda>
		params->_ref = 1;
   1d13c:	2301      	movs	r3, #1
   1d13e:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   1d140:	4622      	mov	r2, r4
   1d142:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   1d146:	4628      	mov	r0, r5
   1d148:	f7ff ff4a 	bl	1cfe0 <gatt_indicate>
}
   1d14c:	b00c      	add	sp, #48	; 0x30
   1d14e:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(params, "invalid parameters\n");
   1d150:	4e26      	ldr	r6, [pc, #152]	; (1d1ec <bt_gatt_indicate+0x12c>)
   1d152:	f640 320b 	movw	r2, #2827	; 0xb0b
   1d156:	4631      	mov	r1, r6
   1d158:	4825      	ldr	r0, [pc, #148]	; (1d1f0 <bt_gatt_indicate+0x130>)
   1d15a:	f00d ff98 	bl	2b08e <assert_print>
   1d15e:	f640 310b 	movw	r1, #2827	; 0xb0b
   1d162:	4630      	mov	r0, r6
   1d164:	f00d ff8c 	bl	2b080 <assert_post_action>
   1d168:	e7b0      	b.n	1d0cc <bt_gatt_indicate+0xc>
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   1d16a:	6823      	ldr	r3, [r4, #0]
   1d16c:	2b00      	cmp	r3, #0
   1d16e:	d1b0      	bne.n	1d0d2 <bt_gatt_indicate+0x12>
   1d170:	4e1e      	ldr	r6, [pc, #120]	; (1d1ec <bt_gatt_indicate+0x12c>)
   1d172:	f640 320c 	movw	r2, #2828	; 0xb0c
   1d176:	4631      	mov	r1, r6
   1d178:	481d      	ldr	r0, [pc, #116]	; (1d1f0 <bt_gatt_indicate+0x130>)
   1d17a:	f00d ff88 	bl	2b08e <assert_print>
   1d17e:	f640 310c 	movw	r1, #2828	; 0xb0c
   1d182:	4630      	mov	r0, r6
   1d184:	f00d ff7c 	bl	2b080 <assert_post_action>
   1d188:	e7a3      	b.n	1d0d2 <bt_gatt_indicate+0x12>
		if (!data.handle) {
   1d18a:	2800      	cmp	r0, #0
   1d18c:	d1be      	bne.n	1d10c <bt_gatt_indicate+0x4c>
			return -ENOENT;
   1d18e:	f06f 0001 	mvn.w	r0, #1
   1d192:	e7db      	b.n	1d14c <bt_gatt_indicate+0x8c>
			return -EINVAL;
   1d194:	f06f 0015 	mvn.w	r0, #21
   1d198:	e7d8      	b.n	1d14c <bt_gatt_indicate+0x8c>
	data.err = -ENOTCONN;
   1d19a:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1d19e:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   1d1a0:	2302      	movs	r3, #2
   1d1a2:	f8ad 3020 	strh.w	r3, [sp, #32]
	data.ind_params = params;
   1d1a6:	9409      	str	r4, [sp, #36]	; 0x24
	params->_ref = 0;
   1d1a8:	2300      	movs	r3, #0
   1d1aa:	75a3      	strb	r3, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1d1ac:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   1d1b0:	f642 1202 	movw	r2, #10498	; 0x2902
   1d1b4:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
   1d1b8:	aa05      	add	r2, sp, #20
   1d1ba:	9202      	str	r2, [sp, #8]
   1d1bc:	4a0d      	ldr	r2, [pc, #52]	; (1d1f4 <bt_gatt_indicate+0x134>)
   1d1be:	9201      	str	r2, [sp, #4]
   1d1c0:	2201      	movs	r2, #1
   1d1c2:	9200      	str	r2, [sp, #0]
   1d1c4:	aa0a      	add	r2, sp, #40	; 0x28
   1d1c6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1d1ca:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   1d1ce:	f7ff fc35 	bl	1ca3c <bt_gatt_foreach_attr_type>
	return data.err;
   1d1d2:	9807      	ldr	r0, [sp, #28]
   1d1d4:	e7ba      	b.n	1d14c <bt_gatt_indicate+0x8c>
		return -EAGAIN;
   1d1d6:	f06f 000a 	mvn.w	r0, #10
   1d1da:	e7b7      	b.n	1d14c <bt_gatt_indicate+0x8c>
		return -ENOTCONN;
   1d1dc:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1d1e0:	e7b4      	b.n	1d14c <bt_gatt_indicate+0x8c>
			return -ENOENT;
   1d1e2:	f06f 0001 	mvn.w	r0, #1
   1d1e6:	e7b1      	b.n	1d14c <bt_gatt_indicate+0x8c>
   1d1e8:	2000041c 	.word	0x2000041c
   1d1ec:	00033950 	.word	0x00033950
   1d1f0:	000318f8 	.word	0x000318f8
   1d1f4:	0001d5a1 	.word	0x0001d5a1

0001d1f8 <sc_process>:
{
   1d1f8:	b570      	push	{r4, r5, r6, lr}
   1d1fa:	b082      	sub	sp, #8
   1d1fc:	4604      	mov	r4, r0
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   1d1fe:	f100 0530 	add.w	r5, r0, #48	; 0x30
   1d202:	f3bf 8f5b 	dmb	ish
   1d206:	6b03      	ldr	r3, [r0, #48]	; 0x30
   1d208:	f3bf 8f5b 	dmb	ish
   1d20c:	f013 0f02 	tst.w	r3, #2
   1d210:	d12b      	bne.n	1d26a <sc_process+0x72>
	sc_range[0] = sys_cpu_to_le16(sc->start);
   1d212:	f834 3c08 	ldrh.w	r3, [r4, #-8]
   1d216:	f8ad 3004 	strh.w	r3, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
   1d21a:	f834 3c06 	ldrh.w	r3, [r4, #-6]
   1d21e:	f8ad 3006 	strh.w	r3, [sp, #6]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1d222:	f3bf 8f5b 	dmb	ish
   1d226:	e855 3f00 	ldrex	r3, [r5]
   1d22a:	f023 0301 	bic.w	r3, r3, #1
   1d22e:	e845 3200 	strex	r2, r3, [r5]
   1d232:	2a00      	cmp	r2, #0
   1d234:	d1f7      	bne.n	1d226 <sc_process+0x2e>
   1d236:	f3bf 8f5b 	dmb	ish
	sc->start = 0U;
   1d23a:	2000      	movs	r0, #0
   1d23c:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->end = 0U;
   1d240:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.attr = &_1_gatt_svc.attrs[2];
   1d244:	4b16      	ldr	r3, [pc, #88]	; (1d2a0 <sc_process+0xa8>)
   1d246:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   1d24a:	4b16      	ldr	r3, [pc, #88]	; (1d2a4 <sc_process+0xac>)
   1d24c:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   1d250:	ab01      	add	r3, sp, #4
   1d252:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   1d256:	2304      	movs	r3, #4
   1d258:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   1d25c:	f1a4 0120 	sub.w	r1, r4, #32
   1d260:	f7ff ff2e 	bl	1d0c0 <bt_gatt_indicate>
   1d264:	b170      	cbz	r0, 1d284 <sc_process+0x8c>
}
   1d266:	b002      	add	sp, #8
   1d268:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   1d26a:	4e0f      	ldr	r6, [pc, #60]	; (1d2a8 <sc_process+0xb0>)
   1d26c:	f44f 6294 	mov.w	r2, #1184	; 0x4a0
   1d270:	4631      	mov	r1, r6
   1d272:	480e      	ldr	r0, [pc, #56]	; (1d2ac <sc_process+0xb4>)
   1d274:	f00d ff0b 	bl	2b08e <assert_print>
   1d278:	f44f 6194 	mov.w	r1, #1184	; 0x4a0
   1d27c:	4630      	mov	r0, r6
   1d27e:	f00d feff 	bl	2b080 <assert_post_action>
   1d282:	e7c6      	b.n	1d212 <sc_process+0x1a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d284:	f3bf 8f5b 	dmb	ish
   1d288:	e855 3f00 	ldrex	r3, [r5]
   1d28c:	f043 0302 	orr.w	r3, r3, #2
   1d290:	e845 3200 	strex	r2, r3, [r5]
   1d294:	2a00      	cmp	r2, #0
   1d296:	d1f7      	bne.n	1d288 <sc_process+0x90>
   1d298:	f3bf 8f5b 	dmb	ish
   1d29c:	e7e3      	b.n	1d266 <sc_process+0x6e>
   1d29e:	bf00      	nop
   1d2a0:	00033ca8 	.word	0x00033ca8
   1d2a4:	0001c239 	.word	0x0001c239
   1d2a8:	00033950 	.word	0x00033950
   1d2ac:	000318f8 	.word	0x000318f8

0001d2b0 <sc_restore>:
{
   1d2b0:	b510      	push	{r4, lr}
   1d2b2:	b082      	sub	sp, #8
   1d2b4:	4604      	mov	r4, r0
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1d2b6:	f100 0190 	add.w	r1, r0, #144	; 0x90
   1d2ba:	7a00      	ldrb	r0, [r0, #8]
   1d2bc:	f7fe fe16 	bl	1beec <find_sc_cfg>
	if (!cfg) {
   1d2c0:	b1f0      	cbz	r0, 1d300 <sc_restore+0x50>
   1d2c2:	4603      	mov	r3, r0
	if (!(cfg->data.start || cfg->data.end)) {
   1d2c4:	8902      	ldrh	r2, [r0, #8]
   1d2c6:	b90a      	cbnz	r2, 1d2cc <sc_restore+0x1c>
   1d2c8:	8941      	ldrh	r1, [r0, #10]
   1d2ca:	b1c9      	cbz	r1, 1d300 <sc_restore+0x50>
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   1d2cc:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   1d2d0:	895b      	ldrh	r3, [r3, #10]
   1d2d2:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   1d2d6:	4620      	mov	r0, r4
   1d2d8:	f7fc fd82 	bl	19de0 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1d2dc:	490c      	ldr	r1, [pc, #48]	; (1d310 <sc_restore+0x60>)
   1d2de:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   1d2e2:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   1d2e6:	4a0b      	ldr	r2, [pc, #44]	; (1d314 <sc_restore+0x64>)
   1d2e8:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   1d2ea:	4a0b      	ldr	r2, [pc, #44]	; (1d318 <sc_restore+0x68>)
   1d2ec:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   1d2ee:	aa01      	add	r2, sp, #4
   1d2f0:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   1d2f2:	2204      	movs	r2, #4
   1d2f4:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1d2f6:	4619      	mov	r1, r3
   1d2f8:	4620      	mov	r0, r4
   1d2fa:	f7ff fee1 	bl	1d0c0 <bt_gatt_indicate>
   1d2fe:	b908      	cbnz	r0, 1d304 <sc_restore+0x54>
}
   1d300:	b002      	add	sp, #8
   1d302:	bd10      	pop	{r4, pc}
		BT_ERR("SC restore indication failed");
   1d304:	2145      	movs	r1, #69	; 0x45
   1d306:	4805      	ldr	r0, [pc, #20]	; (1d31c <sc_restore+0x6c>)
   1d308:	f00d fed0 	bl	2b0ac <z_log_minimal_printk>
   1d30c:	e7f8      	b.n	1d300 <sc_restore+0x50>
   1d30e:	bf00      	nop
   1d310:	2000278c 	.word	0x2000278c
   1d314:	00033ca8 	.word	0x00033ca8
   1d318:	0002dd27 	.word	0x0002dd27
   1d31c:	00033ba0 	.word	0x00033ba0

0001d320 <update_ccc>:
{
   1d320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d324:	4615      	mov	r5, r2
	struct bt_conn *conn = data->conn;
   1d326:	6817      	ldr	r7, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   1d328:	6882      	ldr	r2, [r0, #8]
   1d32a:	4b25      	ldr	r3, [pc, #148]	; (1d3c0 <update_ccc+0xa0>)
   1d32c:	429a      	cmp	r2, r3
   1d32e:	d002      	beq.n	1d336 <update_ccc+0x16>
}
   1d330:	2001      	movs	r0, #1
   1d332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1d336:	4604      	mov	r4, r0
	ccc = attr->user_data;
   1d338:	f8d0 800c 	ldr.w	r8, [r0, #12]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1d33c:	2600      	movs	r6, #0
   1d33e:	2e00      	cmp	r6, #0
   1d340:	d1f6      	bne.n	1d330 <update_ccc+0x10>
		if (!cfg->value ||
   1d342:	eb06 0386 	add.w	r3, r6, r6, lsl #2
   1d346:	eb08 0343 	add.w	r3, r8, r3, lsl #1
   1d34a:	891b      	ldrh	r3, [r3, #8]
   1d34c:	b3ab      	cbz	r3, 1d3ba <update_ccc+0x9a>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1d34e:	eb06 0386 	add.w	r3, r6, r6, lsl #2
   1d352:	eb08 0243 	add.w	r2, r8, r3, lsl #1
   1d356:	3201      	adds	r2, #1
   1d358:	f818 1013 	ldrb.w	r1, [r8, r3, lsl #1]
   1d35c:	4638      	mov	r0, r7
   1d35e:	f00f fbe1 	bl	2cb24 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   1d362:	b350      	cbz	r0, 1d3ba <update_ccc+0x9a>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   1d364:	f44f 7295 	mov.w	r2, #298	; 0x12a
   1d368:	4621      	mov	r1, r4
   1d36a:	4638      	mov	r0, r7
   1d36c:	f010 feb1 	bl	2e0d2 <bt_gatt_check_perm>
		if (err) {
   1d370:	b150      	cbz	r0, 1d388 <update_ccc+0x68>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   1d372:	2803      	cmp	r0, #3
   1d374:	d013      	beq.n	1d39e <update_ccc+0x7e>
			if (err == BT_ATT_ERR_AUTHENTICATION) {
   1d376:	2805      	cmp	r0, #5
   1d378:	d017      	beq.n	1d3aa <update_ccc+0x8a>
			sec = BT_SECURITY_L2;
   1d37a:	f04f 0902 	mov.w	r9, #2
			    bt_conn_get_security(conn) < sec) {
   1d37e:	4638      	mov	r0, r7
   1d380:	f00f fbb1 	bl	2cae6 <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   1d384:	4581      	cmp	r9, r0
   1d386:	d813      	bhi.n	1d3b0 <update_ccc+0x90>
		gatt_ccc_changed(attr, ccc);
   1d388:	4641      	mov	r1, r8
   1d38a:	4620      	mov	r0, r4
   1d38c:	f010 fbd6 	bl	2db3c <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   1d390:	4b0c      	ldr	r3, [pc, #48]	; (1d3c4 <update_ccc+0xa4>)
   1d392:	4598      	cmp	r8, r3
   1d394:	d1cc      	bne.n	1d330 <update_ccc+0x10>
			sc_restore(conn);
   1d396:	4638      	mov	r0, r7
   1d398:	f7ff ff8a 	bl	1d2b0 <sc_restore>
   1d39c:	e7c8      	b.n	1d330 <update_ccc+0x10>
				BT_WARN("CCC %p not writable", attr);
   1d39e:	4622      	mov	r2, r4
   1d3a0:	2157      	movs	r1, #87	; 0x57
   1d3a2:	4809      	ldr	r0, [pc, #36]	; (1d3c8 <update_ccc+0xa8>)
   1d3a4:	f00d fe82 	bl	2b0ac <z_log_minimal_printk>
				continue;
   1d3a8:	e007      	b.n	1d3ba <update_ccc+0x9a>
				sec = BT_SECURITY_L3;
   1d3aa:	f04f 0903 	mov.w	r9, #3
   1d3ae:	e7e6      	b.n	1d37e <update_ccc+0x5e>
				if (data->sec < sec) {
   1d3b0:	792b      	ldrb	r3, [r5, #4]
   1d3b2:	4599      	cmp	r9, r3
   1d3b4:	d901      	bls.n	1d3ba <update_ccc+0x9a>
					data->sec = sec;
   1d3b6:	f885 9004 	strb.w	r9, [r5, #4]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1d3ba:	3601      	adds	r6, #1
   1d3bc:	e7bf      	b.n	1d33e <update_ccc+0x1e>
   1d3be:	bf00      	nop
   1d3c0:	0001c675 	.word	0x0001c675
   1d3c4:	20000790 	.word	0x20000790
   1d3c8:	00033bc4 	.word	0x00033bc4

0001d3cc <gatt_notify>:
{
   1d3cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d3d0:	4605      	mov	r5, r0
   1d3d2:	460f      	mov	r7, r1
   1d3d4:	4614      	mov	r4, r2
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1d3d6:	2294      	movs	r2, #148	; 0x94
   1d3d8:	6861      	ldr	r1, [r4, #4]
   1d3da:	f010 fe7a 	bl	2e0d2 <bt_gatt_check_perm>
   1d3de:	bb58      	cbnz	r0, 1d438 <gatt_notify+0x6c>
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   1d3e0:	2201      	movs	r2, #1
   1d3e2:	6861      	ldr	r1, [r4, #4]
   1d3e4:	4628      	mov	r0, r5
   1d3e6:	f7ff fd2b 	bl	1ce40 <bt_gatt_is_subscribed>
   1d3ea:	b360      	cbz	r0, 1d446 <gatt_notify+0x7a>
				sizeof(*nfy) + params->len);
   1d3ec:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1d3ee:	3202      	adds	r2, #2
   1d3f0:	211b      	movs	r1, #27
   1d3f2:	4628      	mov	r0, r5
   1d3f4:	f7fd fffc 	bl	1b3f0 <bt_att_create_pdu>
	if (!buf) {
   1d3f8:	4680      	mov	r8, r0
   1d3fa:	b358      	cbz	r0, 1d454 <gatt_notify+0x88>
   1d3fc:	f100 0908 	add.w	r9, r0, #8
   1d400:	2102      	movs	r1, #2
   1d402:	4648      	mov	r0, r9
   1d404:	f003 f8d6 	bl	205b4 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   1d408:	4606      	mov	r6, r0
   1d40a:	f826 7b02 	strh.w	r7, [r6], #2
   1d40e:	89a1      	ldrh	r1, [r4, #12]
   1d410:	4648      	mov	r0, r9
   1d412:	f003 f8cf 	bl	205b4 <net_buf_simple_add>
   1d416:	89a2      	ldrh	r2, [r4, #12]
   1d418:	68a1      	ldr	r1, [r4, #8]
   1d41a:	4630      	mov	r0, r6
   1d41c:	f013 fc7c 	bl	30d18 <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   1d420:	2301      	movs	r3, #1
   1d422:	6962      	ldr	r2, [r4, #20]
   1d424:	6921      	ldr	r1, [r4, #16]
   1d426:	4640      	mov	r0, r8
   1d428:	f010 fb24 	bl	2da74 <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   1d42c:	4641      	mov	r1, r8
   1d42e:	4628      	mov	r0, r5
   1d430:	f7fe fc70 	bl	1bd14 <bt_att_send>
}
   1d434:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		BT_WARN("Link is not encrypted");
   1d438:	2157      	movs	r1, #87	; 0x57
   1d43a:	480a      	ldr	r0, [pc, #40]	; (1d464 <gatt_notify+0x98>)
   1d43c:	f00d fe36 	bl	2b0ac <z_log_minimal_printk>
		return -EPERM;
   1d440:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d444:	e7f6      	b.n	1d434 <gatt_notify+0x68>
			BT_WARN("Device is not subscribed to characteristic");
   1d446:	2157      	movs	r1, #87	; 0x57
   1d448:	4807      	ldr	r0, [pc, #28]	; (1d468 <gatt_notify+0x9c>)
   1d44a:	f00d fe2f 	bl	2b0ac <z_log_minimal_printk>
			return -EINVAL;
   1d44e:	f06f 0015 	mvn.w	r0, #21
   1d452:	e7ef      	b.n	1d434 <gatt_notify+0x68>
		BT_WARN("No buffer available to send notification");
   1d454:	2157      	movs	r1, #87	; 0x57
   1d456:	4805      	ldr	r0, [pc, #20]	; (1d46c <gatt_notify+0xa0>)
   1d458:	f00d fe28 	bl	2b0ac <z_log_minimal_printk>
		return -ENOMEM;
   1d45c:	f06f 000b 	mvn.w	r0, #11
   1d460:	e7e8      	b.n	1d434 <gatt_notify+0x68>
   1d462:	bf00      	nop
   1d464:	00033b28 	.word	0x00033b28
   1d468:	00033b44 	.word	0x00033b44
   1d46c:	00033be0 	.word	0x00033be0

0001d470 <bt_gatt_notify_cb>:
{
   1d470:	b570      	push	{r4, r5, r6, lr}
   1d472:	b08c      	sub	sp, #48	; 0x30
   1d474:	4604      	mov	r4, r0
	__ASSERT(params, "invalid parameters\n");
   1d476:	460d      	mov	r5, r1
   1d478:	2900      	cmp	r1, #0
   1d47a:	d03f      	beq.n	1d4fc <bt_gatt_notify_cb+0x8c>
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   1d47c:	686b      	ldr	r3, [r5, #4]
   1d47e:	2b00      	cmp	r3, #0
   1d480:	d049      	beq.n	1d516 <bt_gatt_notify_cb+0xa6>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1d482:	f3bf 8f5b 	dmb	ish
   1d486:	4b42      	ldr	r3, [pc, #264]	; (1d590 <bt_gatt_notify_cb+0x120>)
   1d488:	681b      	ldr	r3, [r3, #0]
   1d48a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1d48e:	f013 0f04 	tst.w	r3, #4
   1d492:	d074      	beq.n	1d57e <bt_gatt_notify_cb+0x10e>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1d494:	b114      	cbz	r4, 1d49c <bt_gatt_notify_cb+0x2c>
   1d496:	7b63      	ldrb	r3, [r4, #13]
   1d498:	2b07      	cmp	r3, #7
   1d49a:	d173      	bne.n	1d584 <bt_gatt_notify_cb+0x114>
	data.attr = params->attr;
   1d49c:	6868      	ldr	r0, [r5, #4]
   1d49e:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1d4a0:	f7ff fa84 	bl	1c9ac <bt_gatt_attr_get_handle>
   1d4a4:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   1d4a8:	6829      	ldr	r1, [r5, #0]
   1d4aa:	2900      	cmp	r1, #0
   1d4ac:	d043      	beq.n	1d536 <bt_gatt_notify_cb+0xc6>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1d4ae:	a805      	add	r0, sp, #20
   1d4b0:	f7ff fc96 	bl	1cde0 <gatt_find_by_uuid>
   1d4b4:	2800      	cmp	r0, #0
   1d4b6:	d068      	beq.n	1d58a <bt_gatt_notify_cb+0x11a>
		params->attr = data.attr;
   1d4b8:	9b05      	ldr	r3, [sp, #20]
   1d4ba:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1d4bc:	9b05      	ldr	r3, [sp, #20]
   1d4be:	6818      	ldr	r0, [r3, #0]
   1d4c0:	2300      	movs	r3, #0
   1d4c2:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   1d4c6:	f642 0303 	movw	r3, #10243	; 0x2803
   1d4ca:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1d4ce:	a90b      	add	r1, sp, #44	; 0x2c
   1d4d0:	f00e fcf1 	bl	2beb6 <bt_uuid_cmp>
   1d4d4:	b948      	cbnz	r0, 1d4ea <bt_gatt_notify_cb+0x7a>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1d4d6:	9805      	ldr	r0, [sp, #20]
   1d4d8:	68c3      	ldr	r3, [r0, #12]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   1d4da:	799b      	ldrb	r3, [r3, #6]
   1d4dc:	f013 0f10 	tst.w	r3, #16
   1d4e0:	d02e      	beq.n	1d540 <bt_gatt_notify_cb+0xd0>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1d4e2:	f010 fd9d 	bl	2e020 <bt_gatt_attr_value_handle>
   1d4e6:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (conn) {
   1d4ea:	b364      	cbz	r4, 1d546 <bt_gatt_notify_cb+0xd6>
		return gatt_notify(conn, data.handle, params);
   1d4ec:	462a      	mov	r2, r5
   1d4ee:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   1d4f2:	4620      	mov	r0, r4
   1d4f4:	f7ff ff6a 	bl	1d3cc <gatt_notify>
}
   1d4f8:	b00c      	add	sp, #48	; 0x30
   1d4fa:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(params, "invalid parameters\n");
   1d4fc:	4e25      	ldr	r6, [pc, #148]	; (1d594 <bt_gatt_notify_cb+0x124>)
   1d4fe:	f640 222b 	movw	r2, #2603	; 0xa2b
   1d502:	4631      	mov	r1, r6
   1d504:	4824      	ldr	r0, [pc, #144]	; (1d598 <bt_gatt_notify_cb+0x128>)
   1d506:	f00d fdc2 	bl	2b08e <assert_print>
   1d50a:	f640 212b 	movw	r1, #2603	; 0xa2b
   1d50e:	4630      	mov	r0, r6
   1d510:	f00d fdb6 	bl	2b080 <assert_post_action>
   1d514:	e7b2      	b.n	1d47c <bt_gatt_notify_cb+0xc>
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   1d516:	682b      	ldr	r3, [r5, #0]
   1d518:	2b00      	cmp	r3, #0
   1d51a:	d1b2      	bne.n	1d482 <bt_gatt_notify_cb+0x12>
   1d51c:	4e1d      	ldr	r6, [pc, #116]	; (1d594 <bt_gatt_notify_cb+0x124>)
   1d51e:	f640 222c 	movw	r2, #2604	; 0xa2c
   1d522:	4631      	mov	r1, r6
   1d524:	481c      	ldr	r0, [pc, #112]	; (1d598 <bt_gatt_notify_cb+0x128>)
   1d526:	f00d fdb2 	bl	2b08e <assert_print>
   1d52a:	f640 212c 	movw	r1, #2604	; 0xa2c
   1d52e:	4630      	mov	r0, r6
   1d530:	f00d fda6 	bl	2b080 <assert_post_action>
   1d534:	e7a5      	b.n	1d482 <bt_gatt_notify_cb+0x12>
		if (!data.handle) {
   1d536:	2800      	cmp	r0, #0
   1d538:	d1c0      	bne.n	1d4bc <bt_gatt_notify_cb+0x4c>
			return -ENOENT;
   1d53a:	f06f 0001 	mvn.w	r0, #1
   1d53e:	e7db      	b.n	1d4f8 <bt_gatt_notify_cb+0x88>
			return -EINVAL;
   1d540:	f06f 0015 	mvn.w	r0, #21
   1d544:	e7d8      	b.n	1d4f8 <bt_gatt_notify_cb+0x88>
	data.err = -ENOTCONN;
   1d546:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1d54a:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   1d54c:	2201      	movs	r2, #1
   1d54e:	f8ad 2020 	strh.w	r2, [sp, #32]
	data.nfy_params = params;
   1d552:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1d554:	2300      	movs	r3, #0
   1d556:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   1d55a:	f642 1102 	movw	r1, #10498	; 0x2902
   1d55e:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
   1d562:	a905      	add	r1, sp, #20
   1d564:	9102      	str	r1, [sp, #8]
   1d566:	490d      	ldr	r1, [pc, #52]	; (1d59c <bt_gatt_notify_cb+0x12c>)
   1d568:	9101      	str	r1, [sp, #4]
   1d56a:	9200      	str	r2, [sp, #0]
   1d56c:	aa0a      	add	r2, sp, #40	; 0x28
   1d56e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1d572:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   1d576:	f7ff fa61 	bl	1ca3c <bt_gatt_foreach_attr_type>
	return data.err;
   1d57a:	9807      	ldr	r0, [sp, #28]
   1d57c:	e7bc      	b.n	1d4f8 <bt_gatt_notify_cb+0x88>
		return -EAGAIN;
   1d57e:	f06f 000a 	mvn.w	r0, #10
   1d582:	e7b9      	b.n	1d4f8 <bt_gatt_notify_cb+0x88>
		return -ENOTCONN;
   1d584:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1d588:	e7b6      	b.n	1d4f8 <bt_gatt_notify_cb+0x88>
			return -ENOENT;
   1d58a:	f06f 0001 	mvn.w	r0, #1
   1d58e:	e7b3      	b.n	1d4f8 <bt_gatt_notify_cb+0x88>
   1d590:	2000041c 	.word	0x2000041c
   1d594:	00033950 	.word	0x00033950
   1d598:	000318f8 	.word	0x000318f8
   1d59c:	0001d5a1 	.word	0x0001d5a1

0001d5a0 <notify_cb>:
{
   1d5a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d5a4:	b082      	sub	sp, #8
   1d5a6:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1d5a8:	6882      	ldr	r2, [r0, #8]
   1d5aa:	4b59      	ldr	r3, [pc, #356]	; (1d710 <notify_cb+0x170>)
   1d5ac:	429a      	cmp	r2, r3
   1d5ae:	d005      	beq.n	1d5bc <notify_cb+0x1c>
		return BT_GATT_ITER_CONTINUE;
   1d5b0:	f04f 0901 	mov.w	r9, #1
}
   1d5b4:	4648      	mov	r0, r9
   1d5b6:	b002      	add	sp, #8
   1d5b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1d5bc:	4607      	mov	r7, r0
	ccc = attr->user_data;
   1d5be:	68c5      	ldr	r5, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   1d5c0:	4b54      	ldr	r3, [pc, #336]	; (1d714 <notify_cb+0x174>)
   1d5c2:	429d      	cmp	r5, r3
   1d5c4:	d031      	beq.n	1d62a <notify_cb+0x8a>
			err = 0;
   1d5c6:	2400      	movs	r4, #0
   1d5c8:	e067      	b.n	1d69a <notify_cb+0xfa>
				sc = (struct sc_data *)data->ind_params->data;
   1d5ca:	6933      	ldr	r3, [r6, #16]
   1d5cc:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   1d5ce:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   1d5d2:	8853      	ldrh	r3, [r2, #2]
   1d5d4:	8812      	ldrh	r2, [r2, #0]
   1d5d6:	4641      	mov	r1, r8
   1d5d8:	f8df c13c 	ldr.w	ip, [pc, #316]	; 1d718 <notify_cb+0x178>
   1d5dc:	f81c 0020 	ldrb.w	r0, [ip, r0, lsl #2]
   1d5e0:	f7fe ff90 	bl	1c504 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1d5e4:	3401      	adds	r4, #1
   1d5e6:	2c01      	cmp	r4, #1
   1d5e8:	d8ed      	bhi.n	1d5c6 <notify_cb+0x26>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1d5ea:	eb04 0844 	add.w	r8, r4, r4, lsl #1
   1d5ee:	4b4a      	ldr	r3, [pc, #296]	; (1d718 <notify_cb+0x178>)
   1d5f0:	eb03 0888 	add.w	r8, r3, r8, lsl #2
   1d5f4:	f108 0801 	add.w	r8, r8, #1
   1d5f8:	2300      	movs	r3, #0
   1d5fa:	9300      	str	r3, [sp, #0]
   1d5fc:	f8cd 3003 	str.w	r3, [sp, #3]
	return memcmp(a, b, sizeof(*a));
   1d600:	2207      	movs	r2, #7
   1d602:	4669      	mov	r1, sp
   1d604:	4640      	mov	r0, r8
   1d606:	f013 fb77 	bl	30cf8 <memcmp>
   1d60a:	2800      	cmp	r0, #0
   1d60c:	d0ea      	beq.n	1d5e4 <notify_cb+0x44>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   1d60e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1d612:	2207      	movs	r2, #7
   1d614:	4641      	mov	r1, r8
   1d616:	4840      	ldr	r0, [pc, #256]	; (1d718 <notify_cb+0x178>)
   1d618:	f810 0023 	ldrb.w	r0, [r0, r3, lsl #2]
   1d61c:	f7fc fdd6 	bl	1a1cc <bt_conn_lookup_state_le>
			if (!conn) {
   1d620:	2800      	cmp	r0, #0
   1d622:	d0d2      	beq.n	1d5ca <notify_cb+0x2a>
			bt_conn_unref(conn);
   1d624:	f7fc fac6 	bl	19bb4 <bt_conn_unref>
   1d628:	e7dc      	b.n	1d5e4 <notify_cb+0x44>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1d62a:	2400      	movs	r4, #0
   1d62c:	e7db      	b.n	1d5e6 <notify_cb+0x46>
			bt_conn_unref(conn);
   1d62e:	f7fc fac1 	bl	19bb4 <bt_conn_unref>
			continue;
   1d632:	e031      	b.n	1d698 <notify_cb+0xf8>
			bt_conn_unref(conn);
   1d634:	4640      	mov	r0, r8
   1d636:	f7fc fabd 	bl	19bb4 <bt_conn_unref>
			continue;
   1d63a:	e02d      	b.n	1d698 <notify_cb+0xf8>
			BT_WARN("Link is not encrypted");
   1d63c:	2157      	movs	r1, #87	; 0x57
   1d63e:	4837      	ldr	r0, [pc, #220]	; (1d71c <notify_cb+0x17c>)
   1d640:	f00d fd34 	bl	2b0ac <z_log_minimal_printk>
			bt_conn_unref(conn);
   1d644:	4640      	mov	r0, r8
   1d646:	f7fc fab5 	bl	19bb4 <bt_conn_unref>
			continue;
   1d64a:	e025      	b.n	1d698 <notify_cb+0xf8>
		    (cfg->value & BT_GATT_CCC_INDICATE)) {
   1d64c:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1d650:	eb05 0242 	add.w	r2, r5, r2, lsl #1
   1d654:	8912      	ldrh	r2, [r2, #8]
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   1d656:	f012 0f02 	tst.w	r2, #2
   1d65a:	d049      	beq.n	1d6f0 <notify_cb+0x150>
			err = gatt_indicate(conn, data->handle, data->ind_params);
   1d65c:	6932      	ldr	r2, [r6, #16]
   1d65e:	88b1      	ldrh	r1, [r6, #4]
   1d660:	4640      	mov	r0, r8
   1d662:	f7ff fcbd 	bl	1cfe0 <gatt_indicate>
			if (err == 0) {
   1d666:	4682      	mov	sl, r0
   1d668:	b970      	cbnz	r0, 1d688 <notify_cb+0xe8>
				data->ind_params->_ref++;
   1d66a:	6932      	ldr	r2, [r6, #16]
   1d66c:	7d93      	ldrb	r3, [r2, #22]
   1d66e:	3301      	adds	r3, #1
   1d670:	7593      	strb	r3, [r2, #22]
   1d672:	e009      	b.n	1d688 <notify_cb+0xe8>
			   (cfg->value & BT_GATT_CCC_NOTIFY)) {
   1d674:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1d678:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   1d67c:	891b      	ldrh	r3, [r3, #8]
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   1d67e:	f013 0f01 	tst.w	r3, #1
   1d682:	d13a      	bne.n	1d6fa <notify_cb+0x15a>
			err = 0;
   1d684:	f04f 0a00 	mov.w	sl, #0
		bt_conn_unref(conn);
   1d688:	4640      	mov	r0, r8
   1d68a:	f7fc fa93 	bl	19bb4 <bt_conn_unref>
		if (err < 0) {
   1d68e:	f1ba 0f00 	cmp.w	sl, #0
   1d692:	db8f      	blt.n	1d5b4 <notify_cb+0x14>
		data->err = 0;
   1d694:	2300      	movs	r3, #0
   1d696:	60b3      	str	r3, [r6, #8]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1d698:	3401      	adds	r4, #1
   1d69a:	2c00      	cmp	r4, #0
   1d69c:	d134      	bne.n	1d708 <notify_cb+0x168>
		if (cfg->value != data->type) {
   1d69e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1d6a2:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   1d6a6:	f8b3 c008 	ldrh.w	ip, [r3, #8]
   1d6aa:	89b3      	ldrh	r3, [r6, #12]
   1d6ac:	459c      	cmp	ip, r3
   1d6ae:	d1f3      	bne.n	1d698 <notify_cb+0xf8>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1d6b0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1d6b4:	eb05 0143 	add.w	r1, r5, r3, lsl #1
   1d6b8:	3101      	adds	r1, #1
   1d6ba:	f815 0013 	ldrb.w	r0, [r5, r3, lsl #1]
   1d6be:	f7fc fd1d 	bl	1a0fc <bt_conn_lookup_addr_le>
		if (!conn) {
   1d6c2:	4680      	mov	r8, r0
   1d6c4:	2800      	cmp	r0, #0
   1d6c6:	d0e7      	beq.n	1d698 <notify_cb+0xf8>
		if (conn->state != BT_CONN_CONNECTED) {
   1d6c8:	7b43      	ldrb	r3, [r0, #13]
   1d6ca:	2b07      	cmp	r3, #7
   1d6cc:	d1af      	bne.n	1d62e <notify_cb+0x8e>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   1d6ce:	696b      	ldr	r3, [r5, #20]
   1d6d0:	b11b      	cbz	r3, 1d6da <notify_cb+0x13a>
   1d6d2:	4639      	mov	r1, r7
   1d6d4:	4798      	blx	r3
   1d6d6:	2800      	cmp	r0, #0
   1d6d8:	d0ac      	beq.n	1d634 <notify_cb+0x94>
		if (bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1d6da:	2294      	movs	r2, #148	; 0x94
   1d6dc:	4639      	mov	r1, r7
   1d6de:	4640      	mov	r0, r8
   1d6e0:	f010 fcf7 	bl	2e0d2 <bt_gatt_check_perm>
   1d6e4:	4681      	mov	r9, r0
   1d6e6:	2800      	cmp	r0, #0
   1d6e8:	d1a8      	bne.n	1d63c <notify_cb+0x9c>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   1d6ea:	89b3      	ldrh	r3, [r6, #12]
   1d6ec:	2b02      	cmp	r3, #2
   1d6ee:	d0ad      	beq.n	1d64c <notify_cb+0xac>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   1d6f0:	2b01      	cmp	r3, #1
   1d6f2:	d0bf      	beq.n	1d674 <notify_cb+0xd4>
			err = 0;
   1d6f4:	f04f 0a00 	mov.w	sl, #0
   1d6f8:	e7c6      	b.n	1d688 <notify_cb+0xe8>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   1d6fa:	6932      	ldr	r2, [r6, #16]
   1d6fc:	88b1      	ldrh	r1, [r6, #4]
   1d6fe:	4640      	mov	r0, r8
   1d700:	f7ff fe64 	bl	1d3cc <gatt_notify>
   1d704:	4682      	mov	sl, r0
   1d706:	e7bf      	b.n	1d688 <notify_cb+0xe8>
	return BT_GATT_ITER_CONTINUE;
   1d708:	f04f 0901 	mov.w	r9, #1
   1d70c:	e752      	b.n	1d5b4 <notify_cb+0x14>
   1d70e:	bf00      	nop
   1d710:	0001c675 	.word	0x0001c675
   1d714:	20000790 	.word	0x20000790
   1d718:	20002774 	.word	0x20002774
   1d71c:	00033b28 	.word	0x00033b28

0001d720 <bt_gatt_connected>:
{
   1d720:	b570      	push	{r4, r5, r6, lr}
   1d722:	b090      	sub	sp, #64	; 0x40
   1d724:	4604      	mov	r4, r0
	data.conn = conn;
   1d726:	900e      	str	r0, [sp, #56]	; 0x38
	data.sec = BT_SECURITY_L1;
   1d728:	2301      	movs	r3, #1
   1d72a:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1d72e:	f100 0590 	add.w	r5, r0, #144	; 0x90
   1d732:	4629      	mov	r1, r5
   1d734:	7a00      	ldrb	r0, [r0, #8]
   1d736:	f00e fd81 	bl	2c23c <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   1d73a:	b190      	cbz	r0, 1d762 <bt_gatt_connected+0x42>
		if (conn->id) {
   1d73c:	7a22      	ldrb	r2, [r4, #8]
   1d73e:	b32a      	cbz	r2, 1d78c <bt_gatt_connected+0x6c>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   1d740:	ae04      	add	r6, sp, #16
   1d742:	2104      	movs	r1, #4
   1d744:	4630      	mov	r0, r6
   1d746:	f7f5 fb75 	bl	12e34 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1d74a:	9600      	str	r6, [sp, #0]
   1d74c:	462b      	mov	r3, r5
   1d74e:	4a19      	ldr	r2, [pc, #100]	; (1d7b4 <bt_gatt_connected+0x94>)
   1d750:	2124      	movs	r1, #36	; 0x24
   1d752:	a805      	add	r0, sp, #20
   1d754:	f7f9 f8c2 	bl	168dc <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
   1d758:	aa05      	add	r2, sp, #20
   1d75a:	4917      	ldr	r1, [pc, #92]	; (1d7b8 <bt_gatt_connected+0x98>)
   1d75c:	4610      	mov	r0, r2
   1d75e:	f7f7 f921 	bl	149a4 <settings_load_subtree_direct>
   1d762:	ab0e      	add	r3, sp, #56	; 0x38
   1d764:	9302      	str	r3, [sp, #8]
   1d766:	4b15      	ldr	r3, [pc, #84]	; (1d7bc <bt_gatt_connected+0x9c>)
   1d768:	9301      	str	r3, [sp, #4]
   1d76a:	2200      	movs	r2, #0
   1d76c:	9200      	str	r2, [sp, #0]
   1d76e:	4613      	mov	r3, r2
   1d770:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1d774:	2001      	movs	r0, #1
   1d776:	f7ff f961 	bl	1ca3c <bt_gatt_foreach_attr_type>
	    bt_conn_get_security(conn) < data.sec) {
   1d77a:	4620      	mov	r0, r4
   1d77c:	f00f f9b3 	bl	2cae6 <bt_conn_get_security>
   1d780:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   1d784:	4288      	cmp	r0, r1
   1d786:	d30a      	bcc.n	1d79e <bt_gatt_connected+0x7e>
}
   1d788:	b010      	add	sp, #64	; 0x40
   1d78a:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1d78c:	2300      	movs	r3, #0
   1d78e:	9300      	str	r3, [sp, #0]
   1d790:	462b      	mov	r3, r5
   1d792:	4a08      	ldr	r2, [pc, #32]	; (1d7b4 <bt_gatt_connected+0x94>)
   1d794:	2124      	movs	r1, #36	; 0x24
   1d796:	a805      	add	r0, sp, #20
   1d798:	f7f9 f8a0 	bl	168dc <bt_settings_encode_key>
   1d79c:	e7dc      	b.n	1d758 <bt_gatt_connected+0x38>
		int err = bt_conn_set_security(conn, data.sec);
   1d79e:	4620      	mov	r0, r4
   1d7a0:	f00f f969 	bl	2ca76 <bt_conn_set_security>
		if (err) {
   1d7a4:	4602      	mov	r2, r0
   1d7a6:	2800      	cmp	r0, #0
   1d7a8:	d0ee      	beq.n	1d788 <bt_gatt_connected+0x68>
			BT_WARN("Failed to set security for bonded peer (%d)",
   1d7aa:	2157      	movs	r1, #87	; 0x57
   1d7ac:	4804      	ldr	r0, [pc, #16]	; (1d7c0 <bt_gatt_connected+0xa0>)
   1d7ae:	f00d fc7d 	bl	2b0ac <z_log_minimal_printk>
}
   1d7b2:	e7e9      	b.n	1d788 <bt_gatt_connected+0x68>
   1d7b4:	00033b24 	.word	0x00033b24
   1d7b8:	0001cda5 	.word	0x0001cda5
   1d7bc:	0001d321 	.word	0x0001d321
   1d7c0:	00033c10 	.word	0x00033c10

0001d7c4 <bt_gatt_att_max_mtu_changed>:
{
   1d7c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d7c6:	4605      	mov	r5, r0
   1d7c8:	460e      	mov	r6, r1
   1d7ca:	4617      	mov	r7, r2
	return list->head;
   1d7cc:	4b0a      	ldr	r3, [pc, #40]	; (1d7f8 <bt_gatt_att_max_mtu_changed+0x34>)
   1d7ce:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1d7d0:	b134      	cbz	r4, 1d7e0 <bt_gatt_att_max_mtu_changed+0x1c>
   1d7d2:	3c04      	subs	r4, #4
   1d7d4:	e004      	b.n	1d7e0 <bt_gatt_att_max_mtu_changed+0x1c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1d7d6:	1d23      	adds	r3, r4, #4
   1d7d8:	d00b      	beq.n	1d7f2 <bt_gatt_att_max_mtu_changed+0x2e>
	return node->next;
   1d7da:	6864      	ldr	r4, [r4, #4]
   1d7dc:	b15c      	cbz	r4, 1d7f6 <bt_gatt_att_max_mtu_changed+0x32>
   1d7de:	3c04      	subs	r4, #4
   1d7e0:	b14c      	cbz	r4, 1d7f6 <bt_gatt_att_max_mtu_changed+0x32>
		if (cb->att_mtu_updated) {
   1d7e2:	6823      	ldr	r3, [r4, #0]
   1d7e4:	2b00      	cmp	r3, #0
   1d7e6:	d0f6      	beq.n	1d7d6 <bt_gatt_att_max_mtu_changed+0x12>
			cb->att_mtu_updated(conn, tx, rx);
   1d7e8:	463a      	mov	r2, r7
   1d7ea:	4631      	mov	r1, r6
   1d7ec:	4628      	mov	r0, r5
   1d7ee:	4798      	blx	r3
   1d7f0:	e7f1      	b.n	1d7d6 <bt_gatt_att_max_mtu_changed+0x12>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1d7f2:	461c      	mov	r4, r3
   1d7f4:	e7f4      	b.n	1d7e0 <bt_gatt_att_max_mtu_changed+0x1c>
}
   1d7f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d7f8:	20002748 	.word	0x20002748

0001d7fc <bt_gatt_encrypt_change>:
{
   1d7fc:	b500      	push	{lr}
   1d7fe:	b087      	sub	sp, #28
	data.conn = conn;
   1d800:	9004      	str	r0, [sp, #16]
	data.sec = BT_SECURITY_L1;
   1d802:	2001      	movs	r0, #1
   1d804:	f88d 0014 	strb.w	r0, [sp, #20]
   1d808:	ab04      	add	r3, sp, #16
   1d80a:	9302      	str	r3, [sp, #8]
   1d80c:	4b05      	ldr	r3, [pc, #20]	; (1d824 <bt_gatt_encrypt_change+0x28>)
   1d80e:	9301      	str	r3, [sp, #4]
   1d810:	2200      	movs	r2, #0
   1d812:	9200      	str	r2, [sp, #0]
   1d814:	4613      	mov	r3, r2
   1d816:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1d81a:	f7ff f90f 	bl	1ca3c <bt_gatt_foreach_attr_type>
}
   1d81e:	b007      	add	sp, #28
   1d820:	f85d fb04 	ldr.w	pc, [sp], #4
   1d824:	0001d321 	.word	0x0001d321

0001d828 <bt_gatt_store_ccc>:
{
   1d828:	b570      	push	{r4, r5, r6, lr}
   1d82a:	b0c2      	sub	sp, #264	; 0x108
   1d82c:	4604      	mov	r4, r0
   1d82e:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
   1d830:	910f      	str	r1, [sp, #60]	; 0x3c
	save.addr_with_id.id = id;
   1d832:	f88d 0040 	strb.w	r0, [sp, #64]	; 0x40
	save.count = 0;
   1d836:	2200      	movs	r2, #0
   1d838:	9241      	str	r2, [sp, #260]	; 0x104
   1d83a:	ab0f      	add	r3, sp, #60	; 0x3c
   1d83c:	9302      	str	r3, [sp, #8]
   1d83e:	4b1e      	ldr	r3, [pc, #120]	; (1d8b8 <bt_gatt_store_ccc+0x90>)
   1d840:	9301      	str	r3, [sp, #4]
   1d842:	9200      	str	r2, [sp, #0]
   1d844:	4613      	mov	r3, r2
   1d846:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1d84a:	2001      	movs	r0, #1
   1d84c:	f7ff f8f6 	bl	1ca3c <bt_gatt_foreach_attr_type>
	if (id) {
   1d850:	b1d4      	cbz	r4, 1d888 <bt_gatt_store_ccc+0x60>
		u8_to_dec(id_str, sizeof(id_str), id);
   1d852:	ae05      	add	r6, sp, #20
   1d854:	4622      	mov	r2, r4
   1d856:	2104      	movs	r1, #4
   1d858:	4630      	mov	r0, r6
   1d85a:	f7f5 faeb 	bl	12e34 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
   1d85e:	9600      	str	r6, [sp, #0]
   1d860:	462b      	mov	r3, r5
   1d862:	4a16      	ldr	r2, [pc, #88]	; (1d8bc <bt_gatt_store_ccc+0x94>)
   1d864:	2124      	movs	r1, #36	; 0x24
   1d866:	a806      	add	r0, sp, #24
   1d868:	f7f9 f838 	bl	168dc <bt_settings_encode_key>
	if (save.count) {
   1d86c:	9c41      	ldr	r4, [sp, #260]	; 0x104
   1d86e:	b1a4      	cbz	r4, 1d89a <bt_gatt_store_ccc+0x72>
		len = save.count * sizeof(*save.store);
   1d870:	00a4      	lsls	r4, r4, #2
		str = (char *)save.store;
   1d872:	a911      	add	r1, sp, #68	; 0x44
	err = settings_save_one(key, str, len);
   1d874:	4622      	mov	r2, r4
   1d876:	a806      	add	r0, sp, #24
   1d878:	f7f7 f82e 	bl	148d8 <settings_save_one>
	if (err) {
   1d87c:	4605      	mov	r5, r0
   1d87e:	b970      	cbnz	r0, 1d89e <bt_gatt_store_ccc+0x76>
	if (len) {
   1d880:	b9c4      	cbnz	r4, 1d8b4 <bt_gatt_store_ccc+0x8c>
}
   1d882:	4628      	mov	r0, r5
   1d884:	b042      	add	sp, #264	; 0x108
   1d886:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   1d888:	2300      	movs	r3, #0
   1d88a:	9300      	str	r3, [sp, #0]
   1d88c:	462b      	mov	r3, r5
   1d88e:	4a0b      	ldr	r2, [pc, #44]	; (1d8bc <bt_gatt_store_ccc+0x94>)
   1d890:	2124      	movs	r1, #36	; 0x24
   1d892:	a806      	add	r0, sp, #24
   1d894:	f7f9 f822 	bl	168dc <bt_settings_encode_key>
   1d898:	e7e8      	b.n	1d86c <bt_gatt_store_ccc+0x44>
		str = NULL;
   1d89a:	2100      	movs	r1, #0
   1d89c:	e7ea      	b.n	1d874 <bt_gatt_store_ccc+0x4c>
		BT_ERR("Failed to store CCCs (err %d)", err);
   1d89e:	4602      	mov	r2, r0
   1d8a0:	2145      	movs	r1, #69	; 0x45
   1d8a2:	4807      	ldr	r0, [pc, #28]	; (1d8c0 <bt_gatt_store_ccc+0x98>)
   1d8a4:	f00d fc02 	bl	2b0ac <z_log_minimal_printk>
		return err;
   1d8a8:	e7eb      	b.n	1d882 <bt_gatt_store_ccc+0x5a>
		for (size_t i = 0; i < save.count; i++) {
   1d8aa:	3301      	adds	r3, #1
   1d8ac:	9a41      	ldr	r2, [sp, #260]	; 0x104
   1d8ae:	429a      	cmp	r2, r3
   1d8b0:	d8fb      	bhi.n	1d8aa <bt_gatt_store_ccc+0x82>
   1d8b2:	e7e6      	b.n	1d882 <bt_gatt_store_ccc+0x5a>
   1d8b4:	2300      	movs	r3, #0
   1d8b6:	e7f9      	b.n	1d8ac <bt_gatt_store_ccc+0x84>
   1d8b8:	0001bf35 	.word	0x0001bf35
   1d8bc:	00033b24 	.word	0x00033b24
   1d8c0:	00033c44 	.word	0x00033c44

0001d8c4 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   1d8c4:	b530      	push	{r4, r5, lr}
   1d8c6:	b087      	sub	sp, #28
   1d8c8:	4604      	mov	r4, r0
   1d8ca:	9002      	str	r0, [sp, #8]
   1d8cc:	4b1e      	ldr	r3, [pc, #120]	; (1d948 <bt_gatt_disconnected+0x84>)
   1d8ce:	9301      	str	r3, [sp, #4]
   1d8d0:	2200      	movs	r2, #0
   1d8d2:	9200      	str	r2, [sp, #0]
   1d8d4:	4613      	mov	r3, r2
   1d8d6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1d8da:	2001      	movs	r0, #1
   1d8dc:	f7ff f8ae 	bl	1ca3c <bt_gatt_foreach_attr_type>
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);

#if defined(CONFIG_BT_SETTINGS_CCC_STORE_ON_WRITE)
	gatt_ccc_conn_unqueue(conn);
   1d8e0:	4620      	mov	r0, r4
   1d8e2:	f7fe fd1d 	bl	1c320 <gatt_ccc_conn_unqueue>

	if (gatt_ccc_conn_queue_is_empty()) {
   1d8e6:	f7fe fa9f 	bl	1be28 <gatt_ccc_conn_queue_is_empty>
   1d8ea:	b980      	cbnz	r0, 1d90e <bt_gatt_disconnected+0x4a>
		k_work_cancel_delayable(&gatt_ccc_store.work);
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1d8ec:	f104 0590 	add.w	r5, r4, #144	; 0x90
   1d8f0:	4629      	mov	r1, r5
   1d8f2:	7a20      	ldrb	r0, [r4, #8]
   1d8f4:	f00e fca2 	bl	2c23c <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   1d8f8:	b968      	cbnz	r0, 1d916 <bt_gatt_disconnected+0x52>
		bt_gatt_store_cf(conn);
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1d8fa:	4629      	mov	r1, r5
   1d8fc:	7a20      	ldrb	r0, [r4, #8]
   1d8fe:	f00e fc9d 	bl	2c23c <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   1d902:	b980      	cbnz	r0, 1d926 <bt_gatt_disconnected+0x62>
#if defined(CONFIG_BT_GATT_CLIENT)
	remove_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
   1d904:	4620      	mov	r0, r4
   1d906:	f010 faa0 	bl	2de4a <remove_cf_cfg>
#endif
}
   1d90a:	b007      	add	sp, #28
   1d90c:	bd30      	pop	{r4, r5, pc}
		k_work_cancel_delayable(&gatt_ccc_store.work);
   1d90e:	480f      	ldr	r0, [pc, #60]	; (1d94c <bt_gatt_disconnected+0x88>)
   1d910:	f009 fc80 	bl	27214 <k_work_cancel_delayable>
   1d914:	e7ea      	b.n	1d8ec <bt_gatt_disconnected+0x28>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
   1d916:	4629      	mov	r1, r5
   1d918:	7a20      	ldrb	r0, [r4, #8]
   1d91a:	f7ff ff85 	bl	1d828 <bt_gatt_store_ccc>
		bt_gatt_store_cf(conn);
   1d91e:	4620      	mov	r0, r4
   1d920:	f7fe fb74 	bl	1c00c <bt_gatt_store_cf>
   1d924:	e7e9      	b.n	1d8fa <bt_gatt_disconnected+0x36>
		struct addr_with_id addr_with_id = {
   1d926:	9504      	str	r5, [sp, #16]
			.id = conn->id,
   1d928:	7a23      	ldrb	r3, [r4, #8]
		struct addr_with_id addr_with_id = {
   1d92a:	f88d 3014 	strb.w	r3, [sp, #20]
   1d92e:	ab04      	add	r3, sp, #16
   1d930:	9302      	str	r3, [sp, #8]
   1d932:	4b07      	ldr	r3, [pc, #28]	; (1d950 <bt_gatt_disconnected+0x8c>)
   1d934:	9301      	str	r3, [sp, #4]
   1d936:	2200      	movs	r2, #0
   1d938:	9200      	str	r2, [sp, #0]
   1d93a:	4613      	mov	r3, r2
   1d93c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1d940:	2001      	movs	r0, #1
   1d942:	f7ff f87b 	bl	1ca3c <bt_gatt_foreach_attr_type>
   1d946:	e7dd      	b.n	1d904 <bt_gatt_disconnected+0x40>
   1d948:	0001c845 	.word	0x0001c845
   1d94c:	20001b30 	.word	0x20001b30
   1d950:	0001c12d 	.word	0x0001c12d

0001d954 <le_sc_supported>:
	 */
	if (IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		return false;
	}

	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1d954:	4b04      	ldr	r3, [pc, #16]	; (1d968 <le_sc_supported+0x14>)
   1d956:	f893 009a 	ldrb.w	r0, [r3, #154]	; 0x9a
   1d95a:	f000 0006 	and.w	r0, r0, #6
	       BT_CMD_TEST(bt_dev.supported_commands, 34, 2);
}
   1d95e:	2806      	cmp	r0, #6
   1d960:	bf14      	ite	ne
   1d962:	2000      	movne	r0, #0
   1d964:	2001      	moveq	r0, #1
   1d966:	4770      	bx	lr
   1d968:	20000350 	.word	0x20000350

0001d96c <smp_chan_get>:
		return false;
	}
}

static struct bt_smp *smp_chan_get(struct bt_conn *conn)
{
   1d96c:	b510      	push	{r4, lr}
	struct bt_l2cap_chan *chan;

	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   1d96e:	2106      	movs	r1, #6
   1d970:	f00f f9f3 	bl	2cd5a <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1d974:	4604      	mov	r4, r0
   1d976:	b118      	cbz	r0, 1d980 <smp_chan_get+0x14>
		BT_ERR("Unable to find SMP channel");
		return NULL;
	}

	return CONTAINER_OF(chan, struct bt_smp, chan);
   1d978:	f1a0 04ec 	sub.w	r4, r0, #236	; 0xec
}
   1d97c:	4620      	mov	r0, r4
   1d97e:	bd10      	pop	{r4, pc}
		BT_ERR("Unable to find SMP channel");
   1d980:	2145      	movs	r1, #69	; 0x45
   1d982:	4802      	ldr	r0, [pc, #8]	; (1d98c <smp_chan_get+0x20>)
   1d984:	f00d fb92 	bl	2b0ac <z_log_minimal_printk>
		return NULL;
   1d988:	e7f8      	b.n	1d97c <smp_chan_get+0x10>
   1d98a:	bf00      	nop
   1d98c:	00033dac 	.word	0x00033dac

0001d990 <bt_smp_accept>:
		conn->le.keys->flags &= ~BT_KEYS_SC;
	}
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   1d990:	b510      	push	{r4, lr}
   1d992:	4602      	mov	r2, r0
		.recv = bt_smp_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1d994:	2000      	movs	r0, #0
   1d996:	b130      	cbz	r0, 1d9a6 <bt_smp_accept+0x16>
		*chan = &smp->chan.chan;

		return 0;
	}

	BT_ERR("No available SMP context for conn %p", conn);
   1d998:	2145      	movs	r1, #69	; 0x45
   1d99a:	480f      	ldr	r0, [pc, #60]	; (1d9d8 <bt_smp_accept+0x48>)
   1d99c:	f00d fb86 	bl	2b0ac <z_log_minimal_printk>

	return -ENOMEM;
   1d9a0:	f06f 000b 	mvn.w	r0, #11
}
   1d9a4:	bd10      	pop	{r4, pc}
		if (smp->chan.chan.conn) {
   1d9a6:	4b0d      	ldr	r3, [pc, #52]	; (1d9dc <bt_smp_accept+0x4c>)
   1d9a8:	f44f 7cdc 	mov.w	ip, #440	; 0x1b8
   1d9ac:	fb0c 3300 	mla	r3, ip, r0, r3
   1d9b0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   1d9b4:	b10b      	cbz	r3, 1d9ba <bt_smp_accept+0x2a>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1d9b6:	3001      	adds	r0, #1
   1d9b8:	e7ed      	b.n	1d996 <bt_smp_accept+0x6>
		smp->chan.chan.ops = &ops;
   1d9ba:	4b08      	ldr	r3, [pc, #32]	; (1d9dc <bt_smp_accept+0x4c>)
   1d9bc:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
   1d9c0:	fb00 f202 	mul.w	r2, r0, r2
   1d9c4:	eb03 0c02 	add.w	ip, r3, r2
   1d9c8:	4c05      	ldr	r4, [pc, #20]	; (1d9e0 <bt_smp_accept+0x50>)
   1d9ca:	f8cc 40f0 	str.w	r4, [ip, #240]	; 0xf0
		*chan = &smp->chan.chan;
   1d9ce:	32e8      	adds	r2, #232	; 0xe8
   1d9d0:	4413      	add	r3, r2
   1d9d2:	3304      	adds	r3, #4
   1d9d4:	600b      	str	r3, [r1, #0]
		return 0;
   1d9d6:	e7e5      	b.n	1d9a4 <bt_smp_accept+0x14>
   1d9d8:	00033dcc 	.word	0x00033dcc
   1d9dc:	20001bb8 	.word	0x20001bb8
   1d9e0:	0003426c 	.word	0x0003426c

0001d9e4 <latch_auth_cb>:
{
   1d9e4:	b500      	push	{lr}
	atomic_ptr_cas(&smp->auth_cb, BT_SMP_AUTH_CB_UNINITIALIZED, (atomic_ptr_val_t)bt_auth);
   1d9e6:	f500 73d8 	add.w	r3, r0, #432	; 0x1b0
   1d9ea:	4a0c      	ldr	r2, [pc, #48]	; (1da1c <latch_auth_cb+0x38>)
   1d9ec:	6811      	ldr	r1, [r2, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1d9ee:	4a0c      	ldr	r2, [pc, #48]	; (1da20 <latch_auth_cb+0x3c>)
   1d9f0:	f3bf 8f5b 	dmb	ish
   1d9f4:	e853 cf00 	ldrex	ip, [r3]
   1d9f8:	4594      	cmp	ip, r2
   1d9fa:	d104      	bne.n	1da06 <latch_auth_cb+0x22>
   1d9fc:	e843 1e00 	strex	lr, r1, [r3]
   1da00:	f1be 0f00 	cmp.w	lr, #0
   1da04:	d1f6      	bne.n	1d9f4 <latch_auth_cb+0x10>
   1da06:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1da0a:	f3bf 8f5b 	dmb	ish
   1da0e:	f8d0 01b0 	ldr.w	r0, [r0, #432]	; 0x1b0
   1da12:	f3bf 8f5b 	dmb	ish
}
   1da16:	f85d fb04 	ldr.w	pc, [sp], #4
   1da1a:	bf00      	nop
   1da1c:	20002618 	.word	0x20002618
   1da20:	20001bb8 	.word	0x20001bb8

0001da24 <get_io_capa>:
{
   1da24:	b508      	push	{r3, lr}
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1da26:	f7ff ffdd 	bl	1d9e4 <latch_auth_cb>
	if (!smp_auth_cb) {
   1da2a:	b1c0      	cbz	r0, 1da5e <get_io_capa+0x3a>
   1da2c:	4603      	mov	r3, r0
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   1da2e:	6802      	ldr	r2, [r0, #0]
   1da30:	b132      	cbz	r2, 1da40 <get_io_capa+0x1c>
   1da32:	6841      	ldr	r1, [r0, #4]
   1da34:	b121      	cbz	r1, 1da40 <get_io_capa+0x1c>
	    (smp_auth_cb->passkey_confirm || !sc_supported)) {
   1da36:	6881      	ldr	r1, [r0, #8]
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   1da38:	b999      	cbnz	r1, 1da62 <get_io_capa+0x3e>
	    (smp_auth_cb->passkey_confirm || !sc_supported)) {
   1da3a:	490d      	ldr	r1, [pc, #52]	; (1da70 <get_io_capa+0x4c>)
   1da3c:	7809      	ldrb	r1, [r1, #0]
   1da3e:	b191      	cbz	r1, 1da66 <get_io_capa+0x42>
	if (sc_supported && smp_auth_cb->passkey_display &&
   1da40:	490b      	ldr	r1, [pc, #44]	; (1da70 <get_io_capa+0x4c>)
   1da42:	7809      	ldrb	r1, [r1, #0]
   1da44:	b121      	cbz	r1, 1da50 <get_io_capa+0x2c>
   1da46:	b11a      	cbz	r2, 1da50 <get_io_capa+0x2c>
	    smp_auth_cb->passkey_confirm) {
   1da48:	6899      	ldr	r1, [r3, #8]
	if (sc_supported && smp_auth_cb->passkey_display &&
   1da4a:	b109      	cbz	r1, 1da50 <get_io_capa+0x2c>
		return BT_SMP_IO_DISPLAY_YESNO;
   1da4c:	2001      	movs	r0, #1
   1da4e:	e003      	b.n	1da58 <get_io_capa+0x34>
	if (smp_auth_cb->passkey_entry) {
   1da50:	685b      	ldr	r3, [r3, #4]
   1da52:	b953      	cbnz	r3, 1da6a <get_io_capa+0x46>
	if (smp_auth_cb->passkey_display) {
   1da54:	b10a      	cbz	r2, 1da5a <get_io_capa+0x36>
		return BT_SMP_IO_DISPLAY_ONLY;
   1da56:	2000      	movs	r0, #0
}
   1da58:	bd08      	pop	{r3, pc}
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   1da5a:	2003      	movs	r0, #3
   1da5c:	e7fc      	b.n	1da58 <get_io_capa+0x34>
   1da5e:	2003      	movs	r0, #3
   1da60:	e7fa      	b.n	1da58 <get_io_capa+0x34>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   1da62:	2004      	movs	r0, #4
   1da64:	e7f8      	b.n	1da58 <get_io_capa+0x34>
   1da66:	2004      	movs	r0, #4
   1da68:	e7f6      	b.n	1da58 <get_io_capa+0x34>
			return BT_SMP_IO_KEYBOARD_ONLY;
   1da6a:	2002      	movs	r0, #2
   1da6c:	e7f4      	b.n	1da58 <get_io_capa+0x34>
   1da6e:	bf00      	nop
   1da70:	2000376c 	.word	0x2000376c

0001da74 <get_auth>:
{
   1da74:	b510      	push	{r4, lr}
	if (sc_supported) {
   1da76:	4b0d      	ldr	r3, [pc, #52]	; (1daac <get_auth+0x38>)
   1da78:	781b      	ldrb	r3, [r3, #0]
   1da7a:	b16b      	cbz	r3, 1da98 <get_auth+0x24>
		auth &= BT_SMP_AUTH_MASK_SC;
   1da7c:	f001 040f 	and.w	r4, r1, #15
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   1da80:	f7ff ffd0 	bl	1da24 <get_io_capa>
   1da84:	2803      	cmp	r0, #3
   1da86:	d00a      	beq.n	1da9e <get_auth+0x2a>
		auth |= BT_SMP_AUTH_MITM;
   1da88:	f044 0004 	orr.w	r0, r4, #4
	if (bondable) {
   1da8c:	4b08      	ldr	r3, [pc, #32]	; (1dab0 <get_auth+0x3c>)
   1da8e:	781b      	ldrb	r3, [r3, #0]
   1da90:	b143      	cbz	r3, 1daa4 <get_auth+0x30>
		auth |= BT_SMP_AUTH_BONDING;
   1da92:	f040 0001 	orr.w	r0, r0, #1
}
   1da96:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
   1da98:	f001 0407 	and.w	r4, r1, #7
   1da9c:	e7f0      	b.n	1da80 <get_auth+0xc>
		auth &= ~(BT_SMP_AUTH_MITM);
   1da9e:	f004 000b 	and.w	r0, r4, #11
   1daa2:	e7f3      	b.n	1da8c <get_auth+0x18>
		auth &= ~BT_SMP_AUTH_BONDING;
   1daa4:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
   1daa8:	e7f5      	b.n	1da96 <get_auth+0x22>
   1daaa:	bf00      	nop
   1daac:	2000376c 	.word	0x2000376c
   1dab0:	20000915 	.word	0x20000915

0001dab4 <legacy_get_pair_method>:
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1dab4:	2904      	cmp	r1, #4
   1dab6:	d821      	bhi.n	1dafc <legacy_get_pair_method+0x48>
{
   1dab8:	b538      	push	{r3, r4, r5, lr}
   1daba:	4604      	mov	r4, r0
   1dabc:	460d      	mov	r5, r1
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1dabe:	7ac3      	ldrb	r3, [r0, #11]
   1dac0:	7c82      	ldrb	r2, [r0, #18]
   1dac2:	4013      	ands	r3, r2
   1dac4:	f013 0f01 	tst.w	r3, #1
   1dac8:	d11a      	bne.n	1db00 <legacy_get_pair_method+0x4c>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1daca:	7b00      	ldrb	r0, [r0, #12]
   1dacc:	7ce3      	ldrb	r3, [r4, #19]
   1dace:	4318      	orrs	r0, r3
   1dad0:	f010 0004 	ands.w	r0, r0, #4
   1dad4:	d100      	bne.n	1dad8 <legacy_get_pair_method+0x24>
}
   1dad6:	bd38      	pop	{r3, r4, r5, pc}
	method = gen_method_legacy[remote_io][get_io_capa(smp)];
   1dad8:	4620      	mov	r0, r4
   1dada:	f7ff ffa3 	bl	1da24 <get_io_capa>
   1dade:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   1dae2:	4b08      	ldr	r3, [pc, #32]	; (1db04 <legacy_get_pair_method+0x50>)
   1dae4:	441d      	add	r5, r3
   1dae6:	5c28      	ldrb	r0, [r5, r0]
	if (method == PASSKEY_ROLE) {
   1dae8:	2804      	cmp	r0, #4
   1daea:	d1f4      	bne.n	1dad6 <legacy_get_pair_method+0x22>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   1daec:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1daf0:	78db      	ldrb	r3, [r3, #3]
   1daf2:	b10b      	cbz	r3, 1daf8 <legacy_get_pair_method+0x44>
			method = PASSKEY_INPUT;
   1daf4:	2001      	movs	r0, #1
   1daf6:	e7ee      	b.n	1dad6 <legacy_get_pair_method+0x22>
			method = PASSKEY_DISPLAY;
   1daf8:	2002      	movs	r0, #2
   1dafa:	e7ec      	b.n	1dad6 <legacy_get_pair_method+0x22>
		return JUST_WORKS;
   1dafc:	2000      	movs	r0, #0
}
   1dafe:	4770      	bx	lr
		return LEGACY_OOB;
   1db00:	2006      	movs	r0, #6
   1db02:	e7e8      	b.n	1dad6 <legacy_get_pair_method+0x22>
   1db04:	000341bc 	.word	0x000341bc

0001db08 <sec_level_reachable>:
{
   1db08:	b538      	push	{r3, r4, r5, lr}
   1db0a:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1db0c:	f7ff ff6a 	bl	1d9e4 <latch_auth_cb>
   1db10:	4605      	mov	r5, r0
	switch (smp->chan.chan.conn->required_sec_level) {
   1db12:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1db16:	7a9b      	ldrb	r3, [r3, #10]
   1db18:	2b03      	cmp	r3, #3
   1db1a:	d016      	beq.n	1db4a <sec_level_reachable+0x42>
   1db1c:	d807      	bhi.n	1db2e <sec_level_reachable+0x26>
   1db1e:	3b01      	subs	r3, #1
   1db20:	b2db      	uxtb	r3, r3
   1db22:	2b01      	cmp	r3, #1
   1db24:	d801      	bhi.n	1db2a <sec_level_reachable+0x22>
   1db26:	2001      	movs	r0, #1
}
   1db28:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   1db2a:	2000      	movs	r0, #0
   1db2c:	e7fc      	b.n	1db28 <sec_level_reachable+0x20>
	switch (smp->chan.chan.conn->required_sec_level) {
   1db2e:	2b04      	cmp	r3, #4
   1db30:	d109      	bne.n	1db46 <sec_level_reachable+0x3e>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1db32:	4620      	mov	r0, r4
   1db34:	f7ff ff76 	bl	1da24 <get_io_capa>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1db38:	2803      	cmp	r0, #3
   1db3a:	d016      	beq.n	1db6a <sec_level_reachable+0x62>
   1db3c:	4b10      	ldr	r3, [pc, #64]	; (1db80 <sec_level_reachable+0x78>)
   1db3e:	781b      	ldrb	r3, [r3, #0]
   1db40:	b9db      	cbnz	r3, 1db7a <sec_level_reachable+0x72>
   1db42:	2000      	movs	r0, #0
   1db44:	e7f0      	b.n	1db28 <sec_level_reachable+0x20>
		return false;
   1db46:	2000      	movs	r0, #0
   1db48:	e7ee      	b.n	1db28 <sec_level_reachable+0x20>
		return get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1db4a:	4620      	mov	r0, r4
   1db4c:	f7ff ff6a 	bl	1da24 <get_io_capa>
   1db50:	2803      	cmp	r0, #3
   1db52:	d001      	beq.n	1db58 <sec_level_reachable+0x50>
   1db54:	2001      	movs	r0, #1
   1db56:	e7e7      	b.n	1db28 <sec_level_reachable+0x20>
   1db58:	b12d      	cbz	r5, 1db66 <sec_level_reachable+0x5e>
		       (smp_auth_cb && smp_auth_cb->oob_data_request);
   1db5a:	68eb      	ldr	r3, [r5, #12]
   1db5c:	b10b      	cbz	r3, 1db62 <sec_level_reachable+0x5a>
		return get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1db5e:	2001      	movs	r0, #1
   1db60:	e7e2      	b.n	1db28 <sec_level_reachable+0x20>
   1db62:	2000      	movs	r0, #0
   1db64:	e7e0      	b.n	1db28 <sec_level_reachable+0x20>
   1db66:	2000      	movs	r0, #0
   1db68:	e7de      	b.n	1db28 <sec_level_reachable+0x20>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1db6a:	b125      	cbz	r5, 1db76 <sec_level_reachable+0x6e>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1db6c:	68eb      	ldr	r3, [r5, #12]
   1db6e:	2b00      	cmp	r3, #0
   1db70:	d1e4      	bne.n	1db3c <sec_level_reachable+0x34>
   1db72:	2000      	movs	r0, #0
   1db74:	e7d8      	b.n	1db28 <sec_level_reachable+0x20>
   1db76:	2000      	movs	r0, #0
   1db78:	e7d6      	b.n	1db28 <sec_level_reachable+0x20>
   1db7a:	2001      	movs	r0, #1
   1db7c:	e7d4      	b.n	1db28 <sec_level_reachable+0x20>
   1db7e:	bf00      	nop
   1db80:	2000376c 	.word	0x2000376c

0001db84 <display_passkey>:
{
   1db84:	b570      	push	{r4, r5, r6, lr}
   1db86:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1db88:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1db8c:	f7ff ff2a 	bl	1d9e4 <latch_auth_cb>
   1db90:	4605      	mov	r5, r0
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   1db92:	2104      	movs	r1, #4
   1db94:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   1db98:	f005 fa12 	bl	22fc0 <bt_rand>
   1db9c:	bb20      	cbnz	r0, 1dbe8 <display_passkey+0x64>
		smp->passkey %= 1000000;
   1db9e:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
   1dba2:	4b12      	ldr	r3, [pc, #72]	; (1dbec <display_passkey+0x68>)
   1dba4:	fba3 1302 	umull	r1, r3, r3, r2
   1dba8:	0c9b      	lsrs	r3, r3, #18
   1dbaa:	4911      	ldr	r1, [pc, #68]	; (1dbf0 <display_passkey+0x6c>)
   1dbac:	fb01 2313 	mls	r3, r1, r3, r2
   1dbb0:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	smp->passkey_round = 0U;
   1dbb4:	2300      	movs	r3, #0
   1dbb6:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
	if (smp_auth_cb && smp_auth_cb->passkey_display) {
   1dbba:	b19d      	cbz	r5, 1dbe4 <display_passkey+0x60>
   1dbbc:	682b      	ldr	r3, [r5, #0]
   1dbbe:	b18b      	cbz	r3, 1dbe4 <display_passkey+0x60>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1dbc0:	1d23      	adds	r3, r4, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1dbc2:	f3bf 8f5b 	dmb	ish
   1dbc6:	e853 2f00 	ldrex	r2, [r3]
   1dbca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   1dbce:	e843 2100 	strex	r1, r2, [r3]
   1dbd2:	2900      	cmp	r1, #0
   1dbd4:	d1f7      	bne.n	1dbc6 <display_passkey+0x42>
   1dbd6:	f3bf 8f5b 	dmb	ish
		smp_auth_cb->passkey_display(conn, smp->passkey);
   1dbda:	682b      	ldr	r3, [r5, #0]
   1dbdc:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   1dbe0:	4630      	mov	r0, r6
   1dbe2:	4798      	blx	r3
	return 0;
   1dbe4:	2000      	movs	r0, #0
}
   1dbe6:	bd70      	pop	{r4, r5, r6, pc}
			return BT_SMP_ERR_UNSPECIFIED;
   1dbe8:	2008      	movs	r0, #8
   1dbea:	e7fc      	b.n	1dbe6 <display_passkey+0x62>
   1dbec:	431bde83 	.word	0x431bde83
   1dbf0:	000f4240 	.word	0x000f4240

0001dbf4 <smp_init>:
{
   1dbf4:	b538      	push	{r3, r4, r5, lr}
   1dbf6:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
   1dbf8:	22ec      	movs	r2, #236	; 0xec
   1dbfa:	2100      	movs	r1, #0
   1dbfc:	f013 f8ad 	bl	30d5a <memset>
	if (bt_rand(smp->prnd, 16)) {
   1dc00:	2110      	movs	r1, #16
   1dc02:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1dc06:	f005 f9db 	bl	22fc0 <bt_rand>
   1dc0a:	b990      	cbnz	r0, 1dc32 <smp_init+0x3e>
   1dc0c:	4605      	mov	r5, r0
   1dc0e:	f3bf 8f5b 	dmb	ish
   1dc12:	e854 3f00 	ldrex	r3, [r4]
   1dc16:	f043 0320 	orr.w	r3, r3, #32
   1dc1a:	e844 3200 	strex	r2, r3, [r4]
   1dc1e:	2a00      	cmp	r2, #0
   1dc20:	d1f7      	bne.n	1dc12 <smp_init+0x1e>
   1dc22:	f3bf 8f5b 	dmb	ish
	sc_public_key = bt_pub_key_get();
   1dc26:	f7fb fc75 	bl	19514 <bt_pub_key_get>
   1dc2a:	4b03      	ldr	r3, [pc, #12]	; (1dc38 <smp_init+0x44>)
   1dc2c:	6018      	str	r0, [r3, #0]
}
   1dc2e:	4628      	mov	r0, r5
   1dc30:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   1dc32:	2508      	movs	r5, #8
   1dc34:	e7fb      	b.n	1dc2e <smp_init+0x3a>
   1dc36:	bf00      	nop
   1dc38:	200027a8 	.word	0x200027a8

0001dc3c <smp_dhkey_generate>:
{
   1dc3c:	b510      	push	{r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1dc3e:	1d04      	adds	r4, r0, #4
   1dc40:	f3bf 8f5b 	dmb	ish
   1dc44:	e854 3f00 	ldrex	r3, [r4]
   1dc48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1dc4c:	e844 3200 	strex	r2, r3, [r4]
   1dc50:	2a00      	cmp	r2, #0
   1dc52:	d1f7      	bne.n	1dc44 <smp_dhkey_generate+0x8>
   1dc54:	f3bf 8f5b 	dmb	ish
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
   1dc58:	490c      	ldr	r1, [pc, #48]	; (1dc8c <smp_dhkey_generate+0x50>)
   1dc5a:	3057      	adds	r0, #87	; 0x57
   1dc5c:	f7fb fc6c 	bl	19538 <bt_dh_key_gen>
	if (err) {
   1dc60:	b908      	cbnz	r0, 1dc66 <smp_dhkey_generate+0x2a>
	return 0;
   1dc62:	2000      	movs	r0, #0
}
   1dc64:	bd10      	pop	{r4, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1dc66:	f3bf 8f5b 	dmb	ish
   1dc6a:	e854 3f00 	ldrex	r3, [r4]
   1dc6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   1dc72:	e844 3200 	strex	r2, r3, [r4]
   1dc76:	2a00      	cmp	r2, #0
   1dc78:	d1f7      	bne.n	1dc6a <smp_dhkey_generate+0x2e>
   1dc7a:	f3bf 8f5b 	dmb	ish
		BT_ERR("Failed to generate DHKey");
   1dc7e:	2145      	movs	r1, #69	; 0x45
   1dc80:	4803      	ldr	r0, [pc, #12]	; (1dc90 <smp_dhkey_generate+0x54>)
   1dc82:	f00d fa13 	bl	2b0ac <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1dc86:	2008      	movs	r0, #8
   1dc88:	e7ec      	b.n	1dc64 <smp_dhkey_generate+0x28>
   1dc8a:	bf00      	nop
   1dc8c:	0002ee05 	.word	0x0002ee05
   1dc90:	00033df8 	.word	0x00033df8

0001dc94 <legacy_request_tk>:
{
   1dc94:	b570      	push	{r4, r5, r6, lr}
   1dc96:	b082      	sub	sp, #8
   1dc98:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1dc9a:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1dc9e:	f7ff fea1 	bl	1d9e4 <latch_auth_cb>
   1dca2:	4606      	mov	r6, r0
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   1dca4:	f105 0190 	add.w	r1, r5, #144	; 0x90
   1dca8:	7a28      	ldrb	r0, [r5, #8]
   1dcaa:	f001 ffcb 	bl	1fc44 <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
   1dcae:	b128      	cbz	r0, 1dcbc <legacy_request_tk+0x28>
   1dcb0:	7b43      	ldrb	r3, [r0, #13]
   1dcb2:	f013 0f01 	tst.w	r3, #1
   1dcb6:	d001      	beq.n	1dcbc <legacy_request_tk+0x28>
	    smp->method == JUST_WORKS) {
   1dcb8:	7a23      	ldrb	r3, [r4, #8]
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
   1dcba:	b143      	cbz	r3, 1dcce <legacy_request_tk+0x3a>
	switch (smp->method) {
   1dcbc:	7a20      	ldrb	r0, [r4, #8]
   1dcbe:	2806      	cmp	r0, #6
   1dcc0:	d86d      	bhi.n	1dd9e <legacy_request_tk+0x10a>
   1dcc2:	e8df f000 	tbb	[pc, r0]
   1dcc6:	596a      	.short	0x596a
   1dcc8:	6c6c6c26 	.word	0x6c6c6c26
   1dccc:	0a          	.byte	0x0a
   1dccd:	00          	.byte	0x00
		BT_ERR("JustWorks failed, authenticated keys present");
   1dcce:	2145      	movs	r1, #69	; 0x45
   1dcd0:	4839      	ldr	r0, [pc, #228]	; (1ddb8 <legacy_request_tk+0x124>)
   1dcd2:	f00d f9eb 	bl	2b0ac <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1dcd6:	2008      	movs	r0, #8
   1dcd8:	e05f      	b.n	1dd9a <legacy_request_tk+0x106>
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   1dcda:	2e00      	cmp	r6, #0
   1dcdc:	d066      	beq.n	1ddac <legacy_request_tk+0x118>
   1dcde:	68f3      	ldr	r3, [r6, #12]
   1dce0:	2b00      	cmp	r3, #0
   1dce2:	d065      	beq.n	1ddb0 <legacy_request_tk+0x11c>
			struct bt_conn_oob_info info = {
   1dce4:	2500      	movs	r5, #0
   1dce6:	f8ad 5000 	strh.w	r5, [sp]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1dcea:	1d23      	adds	r3, r4, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1dcec:	f3bf 8f5b 	dmb	ish
   1dcf0:	e853 2f00 	ldrex	r2, [r3]
   1dcf4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   1dcf8:	e843 2100 	strex	r1, r2, [r3]
   1dcfc:	2900      	cmp	r1, #0
   1dcfe:	d1f7      	bne.n	1dcf0 <legacy_request_tk+0x5c>
   1dd00:	f3bf 8f5b 	dmb	ish
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   1dd04:	68f3      	ldr	r3, [r6, #12]
   1dd06:	4669      	mov	r1, sp
   1dd08:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1dd0c:	4798      	blx	r3
	return 0;
   1dd0e:	4628      	mov	r0, r5
		break;
   1dd10:	e043      	b.n	1dd9a <legacy_request_tk+0x106>
			if (bt_rand(&passkey, sizeof(passkey))) {
   1dd12:	2104      	movs	r1, #4
   1dd14:	eb0d 0001 	add.w	r0, sp, r1
   1dd18:	f005 f952 	bl	22fc0 <bt_rand>
   1dd1c:	2800      	cmp	r0, #0
   1dd1e:	d149      	bne.n	1ddb4 <legacy_request_tk+0x120>
			passkey %= 1000000;
   1dd20:	9a01      	ldr	r2, [sp, #4]
   1dd22:	4b26      	ldr	r3, [pc, #152]	; (1ddbc <legacy_request_tk+0x128>)
   1dd24:	fba3 1302 	umull	r1, r3, r3, r2
   1dd28:	0c9b      	lsrs	r3, r3, #18
   1dd2a:	4925      	ldr	r1, [pc, #148]	; (1ddc0 <legacy_request_tk+0x12c>)
   1dd2c:	fb01 2313 	mls	r3, r1, r3, r2
   1dd30:	9301      	str	r3, [sp, #4]
		if (smp_auth_cb && smp_auth_cb->passkey_display) {
   1dd32:	b196      	cbz	r6, 1dd5a <legacy_request_tk+0xc6>
   1dd34:	6833      	ldr	r3, [r6, #0]
   1dd36:	b183      	cbz	r3, 1dd5a <legacy_request_tk+0xc6>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1dd38:	1d23      	adds	r3, r4, #4
   1dd3a:	f3bf 8f5b 	dmb	ish
   1dd3e:	e853 2f00 	ldrex	r2, [r3]
   1dd42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   1dd46:	e843 2100 	strex	r1, r2, [r3]
   1dd4a:	2900      	cmp	r1, #0
   1dd4c:	d1f7      	bne.n	1dd3e <legacy_request_tk+0xaa>
   1dd4e:	f3bf 8f5b 	dmb	ish
			smp_auth_cb->passkey_display(conn, passkey);
   1dd52:	6833      	ldr	r3, [r6, #0]
   1dd54:	9901      	ldr	r1, [sp, #4]
   1dd56:	4628      	mov	r0, r5
   1dd58:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
   1dd5a:	9b01      	ldr	r3, [sp, #4]
	dst[0] = val;
   1dd5c:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	dst[1] = val >> 8;
   1dd60:	f3c3 2207 	ubfx	r2, r3, #8, #8
   1dd64:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
	sys_put_le16(val >> 16, &dst[2]);
   1dd68:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   1dd6a:	f884 2049 	strb.w	r2, [r4, #73]	; 0x49
	dst[1] = val >> 8;
   1dd6e:	0e1b      	lsrs	r3, r3, #24
   1dd70:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	return 0;
   1dd74:	2000      	movs	r0, #0
}
   1dd76:	e010      	b.n	1dd9a <legacy_request_tk+0x106>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1dd78:	3404      	adds	r4, #4
   1dd7a:	f3bf 8f5b 	dmb	ish
   1dd7e:	e854 3f00 	ldrex	r3, [r4]
   1dd82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1dd86:	e844 3200 	strex	r2, r3, [r4]
   1dd8a:	2a00      	cmp	r2, #0
   1dd8c:	d1f7      	bne.n	1dd7e <legacy_request_tk+0xea>
   1dd8e:	f3bf 8f5b 	dmb	ish
		smp_auth_cb->passkey_entry(conn);
   1dd92:	6873      	ldr	r3, [r6, #4]
   1dd94:	4628      	mov	r0, r5
   1dd96:	4798      	blx	r3
	return 0;
   1dd98:	2000      	movs	r0, #0
}
   1dd9a:	b002      	add	sp, #8
   1dd9c:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1dd9e:	4602      	mov	r2, r0
   1dda0:	2145      	movs	r1, #69	; 0x45
   1dda2:	4808      	ldr	r0, [pc, #32]	; (1ddc4 <legacy_request_tk+0x130>)
   1dda4:	f00d f982 	bl	2b0ac <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1dda8:	2008      	movs	r0, #8
   1ddaa:	e7f6      	b.n	1dd9a <legacy_request_tk+0x106>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   1ddac:	2002      	movs	r0, #2
   1ddae:	e7f4      	b.n	1dd9a <legacy_request_tk+0x106>
   1ddb0:	2002      	movs	r0, #2
   1ddb2:	e7f2      	b.n	1dd9a <legacy_request_tk+0x106>
				return BT_SMP_ERR_UNSPECIFIED;
   1ddb4:	2008      	movs	r0, #8
   1ddb6:	e7f0      	b.n	1dd9a <legacy_request_tk+0x106>
   1ddb8:	00033e18 	.word	0x00033e18
   1ddbc:	431bde83 	.word	0x431bde83
   1ddc0:	000f4240 	.word	0x000f4240
   1ddc4:	00033e4c 	.word	0x00033e4c

0001ddc8 <bt_smp_connected>:
{
   1ddc8:	b538      	push	{r3, r4, r5, lr}
   1ddca:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   1ddcc:	f1a0 05ec 	sub.w	r5, r0, #236	; 0xec
	k_work_init_delayable(&smp->work, smp_timeout);
   1ddd0:	4909      	ldr	r1, [pc, #36]	; (1ddf8 <bt_smp_connected+0x30>)
   1ddd2:	3094      	adds	r0, #148	; 0x94
   1ddd4:	f009 f8e6 	bl	26fa4 <k_work_init_delayable>
	smp_reset(smp);
   1ddd8:	4628      	mov	r0, r5
   1ddda:	f010 fad2 	bl	2e382 <smp_reset>
	atomic_ptr_set(&smp->auth_cb, BT_SMP_AUTH_CB_UNINITIALIZED);
   1ddde:	34c4      	adds	r4, #196	; 0xc4
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1dde0:	4b06      	ldr	r3, [pc, #24]	; (1ddfc <bt_smp_connected+0x34>)
   1dde2:	f3bf 8f5b 	dmb	ish
   1dde6:	e854 2f00 	ldrex	r2, [r4]
   1ddea:	e844 3100 	strex	r1, r3, [r4]
   1ddee:	2900      	cmp	r1, #0
   1ddf0:	d1f9      	bne.n	1dde6 <bt_smp_connected+0x1e>
   1ddf2:	f3bf 8f5b 	dmb	ish
}
   1ddf6:	bd38      	pop	{r3, r4, r5, pc}
   1ddf8:	0001f8cd 	.word	0x0001f8cd
   1ddfc:	20001bb8 	.word	0x20001bb8

0001de00 <legacy_pairing_random>:
{
   1de00:	b570      	push	{r4, r5, r6, lr}
   1de02:	b088      	sub	sp, #32
   1de04:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1de06:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1de0a:	f100 0547 	add.w	r5, r0, #71	; 0x47
   1de0e:	f100 0637 	add.w	r6, r0, #55	; 0x37
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   1de12:	f103 0297 	add.w	r2, r3, #151	; 0x97
   1de16:	339e      	adds	r3, #158	; 0x9e
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1de18:	a904      	add	r1, sp, #16
   1de1a:	9102      	str	r1, [sp, #8]
   1de1c:	9301      	str	r3, [sp, #4]
   1de1e:	9200      	str	r2, [sp, #0]
   1de20:	f100 0310 	add.w	r3, r0, #16
   1de24:	f100 0209 	add.w	r2, r0, #9
   1de28:	4631      	mov	r1, r6
   1de2a:	4628      	mov	r0, r5
   1de2c:	f010 fb23 	bl	2e476 <smp_c1>
	if (err) {
   1de30:	bb70      	cbnz	r0, 1de90 <legacy_pairing_random+0x90>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
   1de32:	2210      	movs	r2, #16
   1de34:	eb0d 0102 	add.w	r1, sp, r2
   1de38:	f104 0017 	add.w	r0, r4, #23
   1de3c:	f012 ff5c 	bl	30cf8 <memcmp>
   1de40:	bb40      	cbnz	r0, 1de94 <legacy_pairing_random+0x94>
		err = smp_s1(smp->tk, smp->prnd, smp->rrnd, tmp);
   1de42:	ab04      	add	r3, sp, #16
   1de44:	4632      	mov	r2, r6
   1de46:	f104 0127 	add.w	r1, r4, #39	; 0x27
   1de4a:	4628      	mov	r0, r5
   1de4c:	f010 fac3 	bl	2e3d6 <smp_s1>
		if (err) {
   1de50:	b9c0      	cbnz	r0, 1de84 <legacy_pairing_random+0x84>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1de52:	ae04      	add	r6, sp, #16
   1de54:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1de56:	f8c4 0047 	str.w	r0, [r4, #71]	; 0x47
   1de5a:	6069      	str	r1, [r5, #4]
   1de5c:	60aa      	str	r2, [r5, #8]
   1de5e:	60eb      	str	r3, [r5, #12]
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1de60:	1d23      	adds	r3, r4, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1de62:	f3bf 8f5b 	dmb	ish
   1de66:	e853 2f00 	ldrex	r2, [r3]
   1de6a:	f042 0202 	orr.w	r2, r2, #2
   1de6e:	e843 2100 	strex	r1, r2, [r3]
   1de72:	2900      	cmp	r1, #0
   1de74:	d1f7      	bne.n	1de66 <legacy_pairing_random+0x66>
   1de76:	f3bf 8f5b 	dmb	ish
		return smp_send_pairing_random(smp);
   1de7a:	4620      	mov	r0, r4
   1de7c:	f010 fc13 	bl	2e6a6 <smp_send_pairing_random>
}
   1de80:	b008      	add	sp, #32
   1de82:	bd70      	pop	{r4, r5, r6, pc}
			BT_ERR("Calculate STK failed");
   1de84:	2145      	movs	r1, #69	; 0x45
   1de86:	4804      	ldr	r0, [pc, #16]	; (1de98 <legacy_pairing_random+0x98>)
   1de88:	f00d f910 	bl	2b0ac <z_log_minimal_printk>
			return BT_SMP_ERR_UNSPECIFIED;
   1de8c:	2008      	movs	r0, #8
   1de8e:	e7f7      	b.n	1de80 <legacy_pairing_random+0x80>
		return BT_SMP_ERR_UNSPECIFIED;
   1de90:	2008      	movs	r0, #8
   1de92:	e7f5      	b.n	1de80 <legacy_pairing_random+0x80>
		return BT_SMP_ERR_CONFIRM_FAILED;
   1de94:	2004      	movs	r0, #4
   1de96:	e7f3      	b.n	1de80 <legacy_pairing_random+0x80>
   1de98:	00033e70 	.word	0x00033e70

0001de9c <sc_send_public_key>:
{
   1de9c:	b538      	push	{r3, r4, r5, lr}
   1de9e:	4604      	mov	r4, r0
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   1dea0:	2240      	movs	r2, #64	; 0x40
   1dea2:	210c      	movs	r1, #12
   1dea4:	f010 fb4f 	bl	2e546 <smp_create_pdu>
	if (!req_buf) {
   1dea8:	2800      	cmp	r0, #0
   1deaa:	d03e      	beq.n	1df2a <sc_send_public_key+0x8e>
   1deac:	4605      	mov	r5, r0
   1deae:	2140      	movs	r1, #64	; 0x40
   1deb0:	3008      	adds	r0, #8
   1deb2:	f002 fb7f 	bl	205b4 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
   1deb6:	4b1e      	ldr	r3, [pc, #120]	; (1df30 <sc_send_public_key+0x94>)
   1deb8:	681b      	ldr	r3, [r3, #0]
   1deba:	f8d3 e000 	ldr.w	lr, [r3]
   1debe:	f8d3 c004 	ldr.w	ip, [r3, #4]
   1dec2:	6899      	ldr	r1, [r3, #8]
   1dec4:	68da      	ldr	r2, [r3, #12]
   1dec6:	f8c0 e000 	str.w	lr, [r0]
   1deca:	f8c0 c004 	str.w	ip, [r0, #4]
   1dece:	6081      	str	r1, [r0, #8]
   1ded0:	60c2      	str	r2, [r0, #12]
   1ded2:	f8d3 e010 	ldr.w	lr, [r3, #16]
   1ded6:	f8d3 c014 	ldr.w	ip, [r3, #20]
   1deda:	6999      	ldr	r1, [r3, #24]
   1dedc:	69da      	ldr	r2, [r3, #28]
   1dede:	f8c0 e010 	str.w	lr, [r0, #16]
   1dee2:	f8c0 c014 	str.w	ip, [r0, #20]
   1dee6:	6181      	str	r1, [r0, #24]
   1dee8:	61c2      	str	r2, [r0, #28]
   1deea:	f8d3 e020 	ldr.w	lr, [r3, #32]
   1deee:	f8d3 c024 	ldr.w	ip, [r3, #36]	; 0x24
   1def2:	6a99      	ldr	r1, [r3, #40]	; 0x28
   1def4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1def6:	f8c0 e020 	str.w	lr, [r0, #32]
   1defa:	f8c0 c024 	str.w	ip, [r0, #36]	; 0x24
   1defe:	6281      	str	r1, [r0, #40]	; 0x28
   1df00:	62c2      	str	r2, [r0, #44]	; 0x2c
   1df02:	f8d3 e030 	ldr.w	lr, [r3, #48]	; 0x30
   1df06:	f8d3 c034 	ldr.w	ip, [r3, #52]	; 0x34
   1df0a:	6b99      	ldr	r1, [r3, #56]	; 0x38
   1df0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   1df0e:	f8c0 e030 	str.w	lr, [r0, #48]	; 0x30
   1df12:	f8c0 c034 	str.w	ip, [r0, #52]	; 0x34
   1df16:	6381      	str	r1, [r0, #56]	; 0x38
   1df18:	63c2      	str	r2, [r0, #60]	; 0x3c
	smp_send(smp, req_buf, NULL, NULL);
   1df1a:	2300      	movs	r3, #0
   1df1c:	461a      	mov	r2, r3
   1df1e:	4629      	mov	r1, r5
   1df20:	4620      	mov	r0, r4
   1df22:	f010 fa6b 	bl	2e3fc <smp_send>
	return 0;
   1df26:	2000      	movs	r0, #0
}
   1df28:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   1df2a:	2008      	movs	r0, #8
   1df2c:	e7fc      	b.n	1df28 <sc_send_public_key+0x8c>
   1df2e:	bf00      	nop
   1df30:	200027a8 	.word	0x200027a8

0001df34 <get_pair_method>:
{
   1df34:	b510      	push	{r4, lr}
   1df36:	4603      	mov	r3, r0
   1df38:	460c      	mov	r4, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1df3a:	f3bf 8f5b 	dmb	ish
   1df3e:	6842      	ldr	r2, [r0, #4]
   1df40:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1df44:	f012 0f20 	tst.w	r2, #32
   1df48:	d01d      	beq.n	1df86 <get_pair_method+0x52>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   1df4a:	7b00      	ldrb	r0, [r0, #12]
   1df4c:	7cda      	ldrb	r2, [r3, #19]
   1df4e:	ea00 0102 	and.w	r1, r0, r2
   1df52:	f011 0f08 	tst.w	r1, #8
   1df56:	d007      	beq.n	1df68 <get_pair_method+0x34>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1df58:	7ad9      	ldrb	r1, [r3, #11]
   1df5a:	f893 c012 	ldrb.w	ip, [r3, #18]
   1df5e:	ea41 010c 	orr.w	r1, r1, ip
   1df62:	f011 0f01 	tst.w	r1, #1
   1df66:	d111      	bne.n	1df8c <get_pair_method+0x58>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1df68:	2c04      	cmp	r4, #4
   1df6a:	d811      	bhi.n	1df90 <get_pair_method+0x5c>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1df6c:	4310      	orrs	r0, r2
   1df6e:	f010 0004 	ands.w	r0, r0, #4
   1df72:	d00e      	beq.n	1df92 <get_pair_method+0x5e>
	return gen_method_sc[remote_io][get_io_capa(smp)];
   1df74:	4618      	mov	r0, r3
   1df76:	f7ff fd55 	bl	1da24 <get_io_capa>
   1df7a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   1df7e:	4b05      	ldr	r3, [pc, #20]	; (1df94 <get_pair_method+0x60>)
   1df80:	441c      	add	r4, r3
   1df82:	5c20      	ldrb	r0, [r4, r0]
   1df84:	e005      	b.n	1df92 <get_pair_method+0x5e>
		return legacy_get_pair_method(smp, remote_io);
   1df86:	f7ff fd95 	bl	1dab4 <legacy_get_pair_method>
   1df8a:	e002      	b.n	1df92 <get_pair_method+0x5e>
			return LE_SC_OOB;
   1df8c:	2005      	movs	r0, #5
   1df8e:	e000      	b.n	1df92 <get_pair_method+0x5e>
		return JUST_WORKS;
   1df90:	2000      	movs	r0, #0
}
   1df92:	bd10      	pop	{r4, pc}
   1df94:	000341d8 	.word	0x000341d8

0001df98 <smp_find>:
	for (int i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1df98:	2200      	movs	r2, #0
   1df9a:	b10a      	cbz	r2, 1dfa0 <smp_find+0x8>
	return NULL;
   1df9c:	2000      	movs	r0, #0
}
   1df9e:	4770      	bx	lr
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   1dfa0:	4b0d      	ldr	r3, [pc, #52]	; (1dfd8 <smp_find+0x40>)
   1dfa2:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   1dfa6:	fb01 3302 	mla	r3, r1, r2, r3
   1dfaa:	3304      	adds	r3, #4
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1dfac:	0941      	lsrs	r1, r0, #5
   1dfae:	f3bf 8f5b 	dmb	ish
   1dfb2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   1dfb6:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1dfba:	f000 011f 	and.w	r1, r0, #31
   1dfbe:	410b      	asrs	r3, r1
   1dfc0:	f013 0f01 	tst.w	r3, #1
   1dfc4:	d101      	bne.n	1dfca <smp_find+0x32>
	for (int i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1dfc6:	3201      	adds	r2, #1
   1dfc8:	e7e7      	b.n	1df9a <smp_find+0x2>
			return &bt_smp_pool[i];
   1dfca:	4803      	ldr	r0, [pc, #12]	; (1dfd8 <smp_find+0x40>)
   1dfcc:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
   1dfd0:	fb03 0002 	mla	r0, r3, r2, r0
   1dfd4:	4770      	bx	lr
   1dfd6:	bf00      	nop
   1dfd8:	20001bb8 	.word	0x20001bb8

0001dfdc <smp_encrypt_info>:
{
   1dfdc:	b570      	push	{r4, r5, r6, lr}
   1dfde:	4604      	mov	r4, r0
   1dfe0:	f3bf 8f5b 	dmb	ish
   1dfe4:	6843      	ldr	r3, [r0, #4]
   1dfe6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1dfea:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   1dfee:	d017      	beq.n	1e020 <smp_encrypt_info+0x44>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
   1dff0:	688d      	ldr	r5, [r1, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   1dff2:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1dff6:	f103 0690 	add.w	r6, r3, #144	; 0x90
   1dffa:	4632      	mov	r2, r6
   1dffc:	7a19      	ldrb	r1, [r3, #8]
   1dffe:	2004      	movs	r0, #4
   1e000:	f011 f842 	bl	2f088 <bt_keys_get_type>
		if (!keys) {
   1e004:	4603      	mov	r3, r0
   1e006:	b1c8      	cbz	r0, 1e03c <smp_encrypt_info+0x60>
   1e008:	682e      	ldr	r6, [r5, #0]
   1e00a:	6868      	ldr	r0, [r5, #4]
   1e00c:	68a9      	ldr	r1, [r5, #8]
   1e00e:	68ea      	ldr	r2, [r5, #12]
   1e010:	f8c3 601a 	str.w	r6, [r3, #26]
   1e014:	f8c3 001e 	str.w	r0, [r3, #30]
   1e018:	f8c3 1022 	str.w	r1, [r3, #34]	; 0x22
   1e01c:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e020:	f3bf 8f5b 	dmb	ish
   1e024:	e854 3f00 	ldrex	r3, [r4]
   1e028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1e02c:	e844 3200 	strex	r2, r3, [r4]
   1e030:	2a00      	cmp	r2, #0
   1e032:	d1f7      	bne.n	1e024 <smp_encrypt_info+0x48>
   1e034:	f3bf 8f5b 	dmb	ish
	return 0;
   1e038:	2000      	movs	r0, #0
}
   1e03a:	bd70      	pop	{r4, r5, r6, pc}
			BT_ERR("Unable to get keys for %s",
   1e03c:	4630      	mov	r0, r6
   1e03e:	f7f8 fb6d 	bl	1671c <bt_addr_le_str_real>
   1e042:	4602      	mov	r2, r0
   1e044:	2145      	movs	r1, #69	; 0x45
   1e046:	4802      	ldr	r0, [pc, #8]	; (1e050 <smp_encrypt_info+0x74>)
   1e048:	f00d f830 	bl	2b0ac <z_log_minimal_printk>
			return BT_SMP_ERR_UNSPECIFIED;
   1e04c:	2008      	movs	r0, #8
   1e04e:	e7f4      	b.n	1e03a <smp_encrypt_info+0x5e>
   1e050:	00033e8c 	.word	0x00033e8c

0001e054 <smp_ident_info>:
{
   1e054:	b570      	push	{r4, r5, r6, lr}
   1e056:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e058:	f3bf 8f5b 	dmb	ish
   1e05c:	6843      	ldr	r3, [r0, #4]
   1e05e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1e062:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   1e066:	d017      	beq.n	1e098 <smp_ident_info+0x44>
		struct bt_smp_ident_info *req = (void *)buf->data;
   1e068:	688d      	ldr	r5, [r1, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   1e06a:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1e06e:	f103 0690 	add.w	r6, r3, #144	; 0x90
   1e072:	4632      	mov	r2, r6
   1e074:	7a19      	ldrb	r1, [r3, #8]
   1e076:	2002      	movs	r0, #2
   1e078:	f011 f806 	bl	2f088 <bt_keys_get_type>
		if (!keys) {
   1e07c:	4603      	mov	r3, r0
   1e07e:	b1c8      	cbz	r0, 1e0b4 <smp_ident_info+0x60>
   1e080:	682e      	ldr	r6, [r5, #0]
   1e082:	6868      	ldr	r0, [r5, #4]
   1e084:	68a9      	ldr	r1, [r5, #8]
   1e086:	68ea      	ldr	r2, [r5, #12]
   1e088:	f8c3 602a 	str.w	r6, [r3, #42]	; 0x2a
   1e08c:	f8c3 002e 	str.w	r0, [r3, #46]	; 0x2e
   1e090:	f8c3 1032 	str.w	r1, [r3, #50]	; 0x32
   1e094:	f8c3 2036 	str.w	r2, [r3, #54]	; 0x36
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e098:	f3bf 8f5b 	dmb	ish
   1e09c:	e854 3f00 	ldrex	r3, [r4]
   1e0a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1e0a4:	e844 3200 	strex	r2, r3, [r4]
   1e0a8:	2a00      	cmp	r2, #0
   1e0aa:	d1f7      	bne.n	1e09c <smp_ident_info+0x48>
   1e0ac:	f3bf 8f5b 	dmb	ish
	return 0;
   1e0b0:	2000      	movs	r0, #0
}
   1e0b2:	bd70      	pop	{r4, r5, r6, pc}
			BT_ERR("Unable to get keys for %s",
   1e0b4:	4630      	mov	r0, r6
   1e0b6:	f7f8 fb31 	bl	1671c <bt_addr_le_str_real>
   1e0ba:	4602      	mov	r2, r0
   1e0bc:	2145      	movs	r1, #69	; 0x45
   1e0be:	4802      	ldr	r0, [pc, #8]	; (1e0c8 <smp_ident_info+0x74>)
   1e0c0:	f00c fff4 	bl	2b0ac <z_log_minimal_printk>
			return BT_SMP_ERR_UNSPECIFIED;
   1e0c4:	2008      	movs	r0, #8
   1e0c6:	e7f4      	b.n	1e0b2 <smp_ident_info+0x5e>
   1e0c8:	00033e8c 	.word	0x00033e8c

0001e0cc <smp_f4>:
{
   1e0cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e0d0:	b097      	sub	sp, #92	; 0x5c
   1e0d2:	4680      	mov	r8, r0
   1e0d4:	460d      	mov	r5, r1
   1e0d6:	4614      	mov	r4, r2
   1e0d8:	461f      	mov	r7, r3
   1e0da:	9e1e      	ldr	r6, [sp, #120]	; 0x78
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1e0dc:	ab01      	add	r3, sp, #4
   1e0de:	4298      	cmp	r0, r3
   1e0e0:	d204      	bcs.n	1e0ec <smp_f4+0x20>
   1e0e2:	f100 0320 	add.w	r3, r0, #32
   1e0e6:	aa01      	add	r2, sp, #4
   1e0e8:	4293      	cmp	r3, r2
   1e0ea:	d912      	bls.n	1e112 <smp_f4+0x46>
   1e0ec:	ab01      	add	r3, sp, #4
   1e0ee:	4598      	cmp	r8, r3
   1e0f0:	d902      	bls.n	1e0f8 <smp_f4+0x2c>
   1e0f2:	ab09      	add	r3, sp, #36	; 0x24
   1e0f4:	4598      	cmp	r8, r3
   1e0f6:	d20c      	bcs.n	1e112 <smp_f4+0x46>
   1e0f8:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 1e1f0 <smp_f4+0x124>
   1e0fc:	f240 2217 	movw	r2, #535	; 0x217
   1e100:	4649      	mov	r1, r9
   1e102:	483c      	ldr	r0, [pc, #240]	; (1e1f4 <smp_f4+0x128>)
   1e104:	f00c ffc3 	bl	2b08e <assert_print>
   1e108:	f240 2117 	movw	r1, #535	; 0x217
   1e10c:	4648      	mov	r0, r9
   1e10e:	f00c ffb7 	bl	2b080 <assert_post_action>
	psrc += length - 1;
   1e112:	f108 001f 	add.w	r0, r8, #31
	uint8_t *pdst = (uint8_t *)dst;
   1e116:	ab01      	add	r3, sp, #4
	for (; length > 0; length--) {
   1e118:	2220      	movs	r2, #32
   1e11a:	e004      	b.n	1e126 <smp_f4+0x5a>
		*pdst++ = *psrc--;
   1e11c:	f810 1901 	ldrb.w	r1, [r0], #-1
   1e120:	f803 1b01 	strb.w	r1, [r3], #1
	for (; length > 0; length--) {
   1e124:	3a01      	subs	r2, #1
   1e126:	2a00      	cmp	r2, #0
   1e128:	d1f8      	bne.n	1e11c <smp_f4+0x50>
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1e12a:	ab09      	add	r3, sp, #36	; 0x24
   1e12c:	429d      	cmp	r5, r3
   1e12e:	d204      	bcs.n	1e13a <smp_f4+0x6e>
   1e130:	f105 0320 	add.w	r3, r5, #32
   1e134:	aa09      	add	r2, sp, #36	; 0x24
   1e136:	4293      	cmp	r3, r2
   1e138:	d912      	bls.n	1e160 <smp_f4+0x94>
   1e13a:	ab09      	add	r3, sp, #36	; 0x24
   1e13c:	429d      	cmp	r5, r3
   1e13e:	d902      	bls.n	1e146 <smp_f4+0x7a>
   1e140:	ab11      	add	r3, sp, #68	; 0x44
   1e142:	429d      	cmp	r5, r3
   1e144:	d20c      	bcs.n	1e160 <smp_f4+0x94>
   1e146:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 1e1f0 <smp_f4+0x124>
   1e14a:	f240 2217 	movw	r2, #535	; 0x217
   1e14e:	4641      	mov	r1, r8
   1e150:	4828      	ldr	r0, [pc, #160]	; (1e1f4 <smp_f4+0x128>)
   1e152:	f00c ff9c 	bl	2b08e <assert_print>
   1e156:	f240 2117 	movw	r1, #535	; 0x217
   1e15a:	4640      	mov	r0, r8
   1e15c:	f00c ff90 	bl	2b080 <assert_post_action>
	psrc += length - 1;
   1e160:	f105 011f 	add.w	r1, r5, #31
	uint8_t *pdst = (uint8_t *)dst;
   1e164:	ab09      	add	r3, sp, #36	; 0x24
	for (; length > 0; length--) {
   1e166:	2220      	movs	r2, #32
   1e168:	e004      	b.n	1e174 <smp_f4+0xa8>
		*pdst++ = *psrc--;
   1e16a:	f811 0901 	ldrb.w	r0, [r1], #-1
   1e16e:	f803 0b01 	strb.w	r0, [r3], #1
	for (; length > 0; length--) {
   1e172:	3a01      	subs	r2, #1
   1e174:	2a00      	cmp	r2, #0
   1e176:	d1f8      	bne.n	1e16a <smp_f4+0x9e>
	m[64] = z;
   1e178:	f88d 7044 	strb.w	r7, [sp, #68]	; 0x44
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1e17c:	ab12      	add	r3, sp, #72	; 0x48
   1e17e:	429c      	cmp	r4, r3
   1e180:	d204      	bcs.n	1e18c <smp_f4+0xc0>
   1e182:	f104 0310 	add.w	r3, r4, #16
   1e186:	aa12      	add	r2, sp, #72	; 0x48
   1e188:	4293      	cmp	r3, r2
   1e18a:	d911      	bls.n	1e1b0 <smp_f4+0xe4>
   1e18c:	ab12      	add	r3, sp, #72	; 0x48
   1e18e:	429c      	cmp	r4, r3
   1e190:	d902      	bls.n	1e198 <smp_f4+0xcc>
   1e192:	ab16      	add	r3, sp, #88	; 0x58
   1e194:	429c      	cmp	r4, r3
   1e196:	d20b      	bcs.n	1e1b0 <smp_f4+0xe4>
   1e198:	4d15      	ldr	r5, [pc, #84]	; (1e1f0 <smp_f4+0x124>)
   1e19a:	f240 2217 	movw	r2, #535	; 0x217
   1e19e:	4629      	mov	r1, r5
   1e1a0:	4814      	ldr	r0, [pc, #80]	; (1e1f4 <smp_f4+0x128>)
   1e1a2:	f00c ff74 	bl	2b08e <assert_print>
   1e1a6:	f240 2117 	movw	r1, #535	; 0x217
   1e1aa:	4628      	mov	r0, r5
   1e1ac:	f00c ff68 	bl	2b080 <assert_post_action>
	psrc += length - 1;
   1e1b0:	f104 020f 	add.w	r2, r4, #15
	uint8_t *pdst = (uint8_t *)dst;
   1e1b4:	ab12      	add	r3, sp, #72	; 0x48
	for (; length > 0; length--) {
   1e1b6:	2410      	movs	r4, #16
   1e1b8:	e004      	b.n	1e1c4 <smp_f4+0xf8>
		*pdst++ = *psrc--;
   1e1ba:	f812 1901 	ldrb.w	r1, [r2], #-1
   1e1be:	f803 1b01 	strb.w	r1, [r3], #1
	for (; length > 0; length--) {
   1e1c2:	3c01      	subs	r4, #1
   1e1c4:	2c00      	cmp	r4, #0
   1e1c6:	d1f8      	bne.n	1e1ba <smp_f4+0xee>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   1e1c8:	4633      	mov	r3, r6
   1e1ca:	2241      	movs	r2, #65	; 0x41
   1e1cc:	a901      	add	r1, sp, #4
   1e1ce:	a812      	add	r0, sp, #72	; 0x48
   1e1d0:	f010 f92f 	bl	2e432 <bt_smp_aes_cmac>
	if (err) {
   1e1d4:	b148      	cbz	r0, 1e1ea <smp_f4+0x11e>
}
   1e1d6:	b017      	add	sp, #92	; 0x5c
   1e1d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		uint8_t tmp = ((uint8_t *)buf)[i];
   1e1dc:	5d32      	ldrb	r2, [r6, r4]
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1e1de:	f1c4 030f 	rsb	r3, r4, #15
   1e1e2:	5cf1      	ldrb	r1, [r6, r3]
   1e1e4:	5531      	strb	r1, [r6, r4]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1e1e6:	54f2      	strb	r2, [r6, r3]
	for (i = 0; i < (length/2); i++) {
   1e1e8:	3401      	adds	r4, #1
   1e1ea:	2c07      	cmp	r4, #7
   1e1ec:	d9f6      	bls.n	1e1dc <smp_f4+0x110>
   1e1ee:	e7f2      	b.n	1e1d6 <smp_f4+0x10a>
   1e1f0:	00033eac 	.word	0x00033eac
   1e1f4:	000318f8 	.word	0x000318f8

0001e1f8 <smp_send_pairing_confirm>:
{
   1e1f8:	b570      	push	{r4, r5, r6, lr}
   1e1fa:	b082      	sub	sp, #8
   1e1fc:	4605      	mov	r5, r0
	switch (smp->method) {
   1e1fe:	7a04      	ldrb	r4, [r0, #8]
   1e200:	4622      	mov	r2, r4
   1e202:	2c02      	cmp	r4, #2
   1e204:	d808      	bhi.n	1e218 <smp_send_pairing_confirm+0x20>
   1e206:	b263      	sxtb	r3, r4
   1e208:	bbab      	cbnz	r3, 1e276 <smp_send_pairing_confirm+0x7e>
   1e20a:	b144      	cbz	r4, 1e21e <smp_send_pairing_confirm+0x26>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1e20c:	2145      	movs	r1, #69	; 0x45
   1e20e:	4822      	ldr	r0, [pc, #136]	; (1e298 <smp_send_pairing_confirm+0xa0>)
   1e210:	f00c ff4c 	bl	2b0ac <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1e214:	2008      	movs	r0, #8
   1e216:	e02c      	b.n	1e272 <smp_send_pairing_confirm+0x7a>
	switch (smp->method) {
   1e218:	2c03      	cmp	r4, #3
   1e21a:	d1f7      	bne.n	1e20c <smp_send_pairing_confirm+0x14>
   1e21c:	2400      	movs	r4, #0
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   1e21e:	2210      	movs	r2, #16
   1e220:	2103      	movs	r1, #3
   1e222:	4628      	mov	r0, r5
   1e224:	f010 f98f 	bl	2e546 <smp_create_pdu>
	if (!buf) {
   1e228:	4606      	mov	r6, r0
   1e22a:	b398      	cbz	r0, 1e294 <smp_send_pairing_confirm+0x9c>
   1e22c:	2110      	movs	r1, #16
   1e22e:	3008      	adds	r0, #8
   1e230:	f002 f9c0 	bl	205b4 <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   1e234:	9000      	str	r0, [sp, #0]
   1e236:	4623      	mov	r3, r4
   1e238:	f105 0227 	add.w	r2, r5, #39	; 0x27
   1e23c:	f105 0157 	add.w	r1, r5, #87	; 0x57
   1e240:	4816      	ldr	r0, [pc, #88]	; (1e29c <smp_send_pairing_confirm+0xa4>)
   1e242:	6800      	ldr	r0, [r0, #0]
   1e244:	f7ff ff42 	bl	1e0cc <smp_f4>
   1e248:	b9f8      	cbnz	r0, 1e28a <smp_send_pairing_confirm+0x92>
	smp_send(smp, buf, NULL, NULL);
   1e24a:	2300      	movs	r3, #0
   1e24c:	461a      	mov	r2, r3
   1e24e:	4631      	mov	r1, r6
   1e250:	4628      	mov	r0, r5
   1e252:	f010 f8d3 	bl	2e3fc <smp_send>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1e256:	3504      	adds	r5, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1e258:	f3bf 8f5b 	dmb	ish
   1e25c:	e855 3f00 	ldrex	r3, [r5]
   1e260:	f023 0301 	bic.w	r3, r3, #1
   1e264:	e845 3200 	strex	r2, r3, [r5]
   1e268:	2a00      	cmp	r2, #0
   1e26a:	d1f7      	bne.n	1e25c <smp_send_pairing_confirm+0x64>
   1e26c:	f3bf 8f5b 	dmb	ish
	return 0;
   1e270:	2000      	movs	r0, #0
}
   1e272:	b002      	add	sp, #8
   1e274:	bd70      	pop	{r4, r5, r6, pc}
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1e276:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
   1e27a:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
   1e27e:	40dc      	lsrs	r4, r3
   1e280:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   1e284:	f044 0480 	orr.w	r4, r4, #128	; 0x80
		break;
   1e288:	e7c9      	b.n	1e21e <smp_send_pairing_confirm+0x26>
		net_buf_unref(buf);
   1e28a:	4630      	mov	r0, r6
   1e28c:	f002 f87a 	bl	20384 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   1e290:	2008      	movs	r0, #8
   1e292:	e7ee      	b.n	1e272 <smp_send_pairing_confirm+0x7a>
		return BT_SMP_ERR_UNSPECIFIED;
   1e294:	2008      	movs	r0, #8
   1e296:	e7ec      	b.n	1e272 <smp_send_pairing_confirm+0x7a>
   1e298:	00033e4c 	.word	0x00033e4c
   1e29c:	200027a8 	.word	0x200027a8

0001e2a0 <smp_public_key_periph>:
{
   1e2a0:	b570      	push	{r4, r5, r6, lr}
   1e2a2:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1e2a4:	f7ff fb9e 	bl	1d9e4 <latch_auth_cb>
   1e2a8:	4605      	mov	r5, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1e2aa:	1d26      	adds	r6, r4, #4
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e2ac:	f3bf 8f5b 	dmb	ish
   1e2b0:	6863      	ldr	r3, [r4, #4]
   1e2b2:	f3bf 8f5b 	dmb	ish
   1e2b6:	f413 4f80 	tst.w	r3, #16384	; 0x4000
   1e2ba:	d107      	bne.n	1e2cc <smp_public_key_periph+0x2c>
	    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
   1e2bc:	2220      	movs	r2, #32
   1e2be:	4b47      	ldr	r3, [pc, #284]	; (1e3dc <smp_public_key_periph+0x13c>)
   1e2c0:	6819      	ldr	r1, [r3, #0]
   1e2c2:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1e2c6:	f012 fd17 	bl	30cf8 <memcmp>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1e2ca:	b168      	cbz	r0, 1e2e8 <smp_public_key_periph+0x48>
	err = sc_send_public_key(smp);
   1e2cc:	4620      	mov	r0, r4
   1e2ce:	f7ff fde5 	bl	1de9c <sc_send_public_key>
	if (err) {
   1e2d2:	4603      	mov	r3, r0
   1e2d4:	2800      	cmp	r0, #0
   1e2d6:	d16b      	bne.n	1e3b0 <smp_public_key_periph+0x110>
	switch (smp->method) {
   1e2d8:	7a22      	ldrb	r2, [r4, #8]
   1e2da:	2a05      	cmp	r2, #5
   1e2dc:	d877      	bhi.n	1e3ce <smp_public_key_periph+0x12e>
   1e2de:	e8df f002 	tbb	[pc, r2]
   1e2e2:	3b09      	.short	0x3b09
   1e2e4:	6976091c 	.word	0x6976091c
		BT_WARN("Remote public key rejected");
   1e2e8:	2157      	movs	r1, #87	; 0x57
   1e2ea:	483d      	ldr	r0, [pc, #244]	; (1e3e0 <smp_public_key_periph+0x140>)
   1e2ec:	f00c fede 	bl	2b0ac <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1e2f0:	2308      	movs	r3, #8
   1e2f2:	e05d      	b.n	1e3b0 <smp_public_key_periph+0x110>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e2f4:	f3bf 8f5b 	dmb	ish
   1e2f8:	e854 3f00 	ldrex	r3, [r4]
   1e2fc:	f043 0310 	orr.w	r3, r3, #16
   1e300:	e844 3200 	strex	r2, r3, [r4]
   1e304:	2a00      	cmp	r2, #0
   1e306:	d1f7      	bne.n	1e2f8 <smp_public_key_periph+0x58>
   1e308:	f3bf 8f5b 	dmb	ish
		err = smp_send_pairing_confirm(smp);
   1e30c:	4620      	mov	r0, r4
   1e30e:	f7ff ff73 	bl	1e1f8 <smp_send_pairing_confirm>
		if (err) {
   1e312:	4603      	mov	r3, r0
   1e314:	2800      	cmp	r0, #0
   1e316:	d047      	beq.n	1e3a8 <smp_public_key_periph+0x108>
   1e318:	e04a      	b.n	1e3b0 <smp_public_key_periph+0x110>
		err = display_passkey(smp);
   1e31a:	4620      	mov	r0, r4
   1e31c:	f7ff fc32 	bl	1db84 <display_passkey>
		if (err) {
   1e320:	4603      	mov	r3, r0
   1e322:	2800      	cmp	r0, #0
   1e324:	d144      	bne.n	1e3b0 <smp_public_key_periph+0x110>
   1e326:	f3bf 8f5b 	dmb	ish
   1e32a:	e854 3f00 	ldrex	r3, [r4]
   1e32e:	f043 0308 	orr.w	r3, r3, #8
   1e332:	e844 3200 	strex	r2, r3, [r4]
   1e336:	2a00      	cmp	r2, #0
   1e338:	d1f7      	bne.n	1e32a <smp_public_key_periph+0x8a>
   1e33a:	f3bf 8f5b 	dmb	ish
   1e33e:	f3bf 8f5b 	dmb	ish
   1e342:	e854 3f00 	ldrex	r3, [r4]
   1e346:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   1e34a:	e844 3200 	strex	r2, r3, [r4]
   1e34e:	2a00      	cmp	r2, #0
   1e350:	d1f7      	bne.n	1e342 <smp_public_key_periph+0xa2>
   1e352:	f3bf 8f5b 	dmb	ish
}
   1e356:	e027      	b.n	1e3a8 <smp_public_key_periph+0x108>
   1e358:	f3bf 8f5b 	dmb	ish
   1e35c:	e854 3f00 	ldrex	r3, [r4]
   1e360:	f043 0308 	orr.w	r3, r3, #8
   1e364:	e844 3200 	strex	r2, r3, [r4]
   1e368:	2a00      	cmp	r2, #0
   1e36a:	d1f7      	bne.n	1e35c <smp_public_key_periph+0xbc>
   1e36c:	f3bf 8f5b 	dmb	ish
   1e370:	f3bf 8f5b 	dmb	ish
   1e374:	e854 3f00 	ldrex	r3, [r4]
   1e378:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   1e37c:	e844 3200 	strex	r2, r3, [r4]
   1e380:	2a00      	cmp	r2, #0
   1e382:	d1f7      	bne.n	1e374 <smp_public_key_periph+0xd4>
   1e384:	f3bf 8f5b 	dmb	ish
   1e388:	f3bf 8f5b 	dmb	ish
   1e38c:	e856 3f00 	ldrex	r3, [r6]
   1e390:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1e394:	e846 3200 	strex	r2, r3, [r6]
   1e398:	2a00      	cmp	r2, #0
   1e39a:	d1f7      	bne.n	1e38c <smp_public_key_periph+0xec>
   1e39c:	f3bf 8f5b 	dmb	ish
		smp_auth_cb->passkey_entry(smp->chan.chan.conn);
   1e3a0:	686b      	ldr	r3, [r5, #4]
   1e3a2:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1e3a6:	4798      	blx	r3
	return generate_dhkey(smp);
   1e3a8:	4620      	mov	r0, r4
   1e3aa:	f010 f9bb 	bl	2e724 <generate_dhkey>
   1e3ae:	4603      	mov	r3, r0
}
   1e3b0:	4618      	mov	r0, r3
   1e3b2:	bd70      	pop	{r4, r5, r6, pc}
   1e3b4:	f3bf 8f5b 	dmb	ish
   1e3b8:	e854 3f00 	ldrex	r3, [r4]
   1e3bc:	f043 0310 	orr.w	r3, r3, #16
   1e3c0:	e844 3200 	strex	r2, r3, [r4]
   1e3c4:	2a00      	cmp	r2, #0
   1e3c6:	d1f7      	bne.n	1e3b8 <smp_public_key_periph+0x118>
   1e3c8:	f3bf 8f5b 	dmb	ish
   1e3cc:	e7ec      	b.n	1e3a8 <smp_public_key_periph+0x108>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1e3ce:	2145      	movs	r1, #69	; 0x45
   1e3d0:	4804      	ldr	r0, [pc, #16]	; (1e3e4 <smp_public_key_periph+0x144>)
   1e3d2:	f00c fe6b 	bl	2b0ac <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1e3d6:	2308      	movs	r3, #8
   1e3d8:	e7ea      	b.n	1e3b0 <smp_public_key_periph+0x110>
   1e3da:	bf00      	nop
   1e3dc:	200027a8 	.word	0x200027a8
   1e3e0:	00033ee0 	.word	0x00033ee0
   1e3e4:	00033e4c 	.word	0x00033e4c

0001e3e8 <smp_public_key>:
{
   1e3e8:	b538      	push	{r3, r4, r5, lr}
   1e3ea:	4604      	mov	r4, r0
   1e3ec:	460d      	mov	r5, r1
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1e3ee:	f7ff faf9 	bl	1d9e4 <latch_auth_cb>
	struct bt_smp_public_key *req = (void *)buf->data;
   1e3f2:	68ab      	ldr	r3, [r5, #8]
   1e3f4:	f8d3 c000 	ldr.w	ip, [r3]
   1e3f8:	6858      	ldr	r0, [r3, #4]
   1e3fa:	6899      	ldr	r1, [r3, #8]
   1e3fc:	68da      	ldr	r2, [r3, #12]
   1e3fe:	f8c4 c057 	str.w	ip, [r4, #87]	; 0x57
   1e402:	f8c4 005b 	str.w	r0, [r4, #91]	; 0x5b
   1e406:	f8c4 105f 	str.w	r1, [r4, #95]	; 0x5f
   1e40a:	f8c4 2063 	str.w	r2, [r4, #99]	; 0x63
   1e40e:	f8d3 c010 	ldr.w	ip, [r3, #16]
   1e412:	6958      	ldr	r0, [r3, #20]
   1e414:	6999      	ldr	r1, [r3, #24]
   1e416:	69da      	ldr	r2, [r3, #28]
   1e418:	f8c4 c067 	str.w	ip, [r4, #103]	; 0x67
   1e41c:	f8c4 006b 	str.w	r0, [r4, #107]	; 0x6b
   1e420:	f8c4 106f 	str.w	r1, [r4, #111]	; 0x6f
   1e424:	f8c4 2073 	str.w	r2, [r4, #115]	; 0x73
   1e428:	f8d3 c020 	ldr.w	ip, [r3, #32]
   1e42c:	6a58      	ldr	r0, [r3, #36]	; 0x24
   1e42e:	6a99      	ldr	r1, [r3, #40]	; 0x28
   1e430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1e432:	f8c4 c077 	str.w	ip, [r4, #119]	; 0x77
   1e436:	f8c4 007b 	str.w	r0, [r4, #123]	; 0x7b
   1e43a:	f8c4 107f 	str.w	r1, [r4, #127]	; 0x7f
   1e43e:	f8c4 2083 	str.w	r2, [r4, #131]	; 0x83
   1e442:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
   1e446:	6b58      	ldr	r0, [r3, #52]	; 0x34
   1e448:	6b99      	ldr	r1, [r3, #56]	; 0x38
   1e44a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   1e44c:	f8c4 c087 	str.w	ip, [r4, #135]	; 0x87
   1e450:	f8c4 008b 	str.w	r0, [r4, #139]	; 0x8b
   1e454:	f8c4 108f 	str.w	r1, [r4, #143]	; 0x8f
   1e458:	f8c4 2093 	str.w	r2, [r4, #147]	; 0x93
	if (bt_pub_key_is_debug(smp->pkey)) {
   1e45c:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1e460:	f7fa ffba 	bl	193d8 <bt_pub_key_is_debug>
   1e464:	b1a0      	cbz	r0, 1e490 <smp_public_key+0xa8>
		BT_INFO("Remote is using Debug Public key");
   1e466:	2149      	movs	r1, #73	; 0x49
   1e468:	4815      	ldr	r0, [pc, #84]	; (1e4c0 <smp_public_key+0xd8>)
   1e46a:	f00c fe1f 	bl	2b0ac <z_log_minimal_printk>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   1e46e:	1d23      	adds	r3, r4, #4
   1e470:	f3bf 8f5b 	dmb	ish
   1e474:	e853 2f00 	ldrex	r2, [r3]
   1e478:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   1e47c:	e843 2100 	strex	r1, r2, [r3]
   1e480:	2900      	cmp	r1, #0
   1e482:	d1f7      	bne.n	1e474 <smp_public_key+0x8c>
   1e484:	f3bf 8f5b 	dmb	ish
		if (!update_debug_keys_check(smp)) {
   1e488:	4620      	mov	r0, r4
   1e48a:	f010 f83b 	bl	2e504 <update_debug_keys_check>
   1e48e:	b1a8      	cbz	r0, 1e4bc <smp_public_key+0xd4>
	if (!sc_public_key) {
   1e490:	4b0c      	ldr	r3, [pc, #48]	; (1e4c4 <smp_public_key+0xdc>)
   1e492:	681b      	ldr	r3, [r3, #0]
   1e494:	b11b      	cbz	r3, 1e49e <smp_public_key+0xb6>
	err = smp_public_key_periph(smp);
   1e496:	4620      	mov	r0, r4
   1e498:	f7ff ff02 	bl	1e2a0 <smp_public_key_periph>
}
   1e49c:	bd38      	pop	{r3, r4, r5, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   1e49e:	3404      	adds	r4, #4
   1e4a0:	f3bf 8f5b 	dmb	ish
   1e4a4:	e854 3f00 	ldrex	r3, [r4]
   1e4a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1e4ac:	e844 3200 	strex	r2, r3, [r4]
   1e4b0:	2a00      	cmp	r2, #0
   1e4b2:	d1f7      	bne.n	1e4a4 <smp_public_key+0xbc>
   1e4b4:	f3bf 8f5b 	dmb	ish
		return 0;
   1e4b8:	2000      	movs	r0, #0
   1e4ba:	e7ef      	b.n	1e49c <smp_public_key+0xb4>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1e4bc:	2003      	movs	r0, #3
   1e4be:	e7ed      	b.n	1e49c <smp_public_key+0xb4>
   1e4c0:	00033f00 	.word	0x00033f00
   1e4c4:	200027a8 	.word	0x200027a8

0001e4c8 <sc_smp_check_confirm>:
{
   1e4c8:	b510      	push	{r4, lr}
   1e4ca:	b086      	sub	sp, #24
   1e4cc:	4604      	mov	r4, r0
	switch (smp->method) {
   1e4ce:	7a02      	ldrb	r2, [r0, #8]
   1e4d0:	2a05      	cmp	r2, #5
   1e4d2:	d80e      	bhi.n	1e4f2 <sc_smp_check_confirm+0x2a>
   1e4d4:	e8df f002 	tbb	[pc, r2]
   1e4d8:	13030313 	.word	0x13030313
   1e4dc:	2e0d      	.short	0x2e0d
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1e4de:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
   1e4e2:	f890 20dc 	ldrb.w	r2, [r0, #220]	; 0xdc
   1e4e6:	40d3      	lsrs	r3, r2
   1e4e8:	f003 0301 	and.w	r3, r3, #1
		r |= 0x80;
   1e4ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
		break;
   1e4f0:	e006      	b.n	1e500 <sc_smp_check_confirm+0x38>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1e4f2:	2145      	movs	r1, #69	; 0x45
   1e4f4:	4811      	ldr	r0, [pc, #68]	; (1e53c <sc_smp_check_confirm+0x74>)
   1e4f6:	f00c fdd9 	bl	2b0ac <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1e4fa:	2008      	movs	r0, #8
   1e4fc:	e012      	b.n	1e524 <sc_smp_check_confirm+0x5c>
	switch (smp->method) {
   1e4fe:	2300      	movs	r3, #0
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1e500:	aa02      	add	r2, sp, #8
   1e502:	9200      	str	r2, [sp, #0]
   1e504:	f104 0237 	add.w	r2, r4, #55	; 0x37
   1e508:	490d      	ldr	r1, [pc, #52]	; (1e540 <sc_smp_check_confirm+0x78>)
   1e50a:	6809      	ldr	r1, [r1, #0]
   1e50c:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1e510:	f7ff fddc 	bl	1e0cc <smp_f4>
   1e514:	b940      	cbnz	r0, 1e528 <sc_smp_check_confirm+0x60>
	if (memcmp(smp->pcnf, cfm, 16)) {
   1e516:	2210      	movs	r2, #16
   1e518:	a902      	add	r1, sp, #8
   1e51a:	f104 0017 	add.w	r0, r4, #23
   1e51e:	f012 fbeb 	bl	30cf8 <memcmp>
   1e522:	b948      	cbnz	r0, 1e538 <sc_smp_check_confirm+0x70>
}
   1e524:	b006      	add	sp, #24
   1e526:	bd10      	pop	{r4, pc}
		BT_ERR("Calculate confirm failed");
   1e528:	2145      	movs	r1, #69	; 0x45
   1e52a:	4806      	ldr	r0, [pc, #24]	; (1e544 <sc_smp_check_confirm+0x7c>)
   1e52c:	f00c fdbe 	bl	2b0ac <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1e530:	2008      	movs	r0, #8
   1e532:	e7f7      	b.n	1e524 <sc_smp_check_confirm+0x5c>
	switch (smp->method) {
   1e534:	2000      	movs	r0, #0
   1e536:	e7f5      	b.n	1e524 <sc_smp_check_confirm+0x5c>
		return BT_SMP_ERR_CONFIRM_FAILED;
   1e538:	2004      	movs	r0, #4
   1e53a:	e7f3      	b.n	1e524 <sc_smp_check_confirm+0x5c>
   1e53c:	00033e4c 	.word	0x00033e4c
   1e540:	200027a8 	.word	0x200027a8
   1e544:	00033f28 	.word	0x00033f28

0001e548 <smp_g2>:
{
   1e548:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e54c:	b099      	sub	sp, #100	; 0x64
   1e54e:	4680      	mov	r8, r0
   1e550:	460f      	mov	r7, r1
   1e552:	4614      	mov	r4, r2
   1e554:	461d      	mov	r5, r3
   1e556:	9e20      	ldr	r6, [sp, #128]	; 0x80
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1e558:	ab04      	add	r3, sp, #16
   1e55a:	4298      	cmp	r0, r3
   1e55c:	d204      	bcs.n	1e568 <smp_g2+0x20>
   1e55e:	f100 0320 	add.w	r3, r0, #32
   1e562:	aa04      	add	r2, sp, #16
   1e564:	4293      	cmp	r3, r2
   1e566:	d912      	bls.n	1e58e <smp_g2+0x46>
   1e568:	ab04      	add	r3, sp, #16
   1e56a:	4598      	cmp	r8, r3
   1e56c:	d902      	bls.n	1e574 <smp_g2+0x2c>
   1e56e:	ab0c      	add	r3, sp, #48	; 0x30
   1e570:	4598      	cmp	r8, r3
   1e572:	d20c      	bcs.n	1e58e <smp_g2+0x46>
   1e574:	f8df 9154 	ldr.w	r9, [pc, #340]	; 1e6cc <smp_g2+0x184>
   1e578:	f240 2217 	movw	r2, #535	; 0x217
   1e57c:	4649      	mov	r1, r9
   1e57e:	4854      	ldr	r0, [pc, #336]	; (1e6d0 <smp_g2+0x188>)
   1e580:	f00c fd85 	bl	2b08e <assert_print>
   1e584:	f240 2117 	movw	r1, #535	; 0x217
   1e588:	4648      	mov	r0, r9
   1e58a:	f00c fd79 	bl	2b080 <assert_post_action>
	psrc += length - 1;
   1e58e:	f108 001f 	add.w	r0, r8, #31
	uint8_t *pdst = (uint8_t *)dst;
   1e592:	ab04      	add	r3, sp, #16
	for (; length > 0; length--) {
   1e594:	2220      	movs	r2, #32
   1e596:	e004      	b.n	1e5a2 <smp_g2+0x5a>
		*pdst++ = *psrc--;
   1e598:	f810 1901 	ldrb.w	r1, [r0], #-1
   1e59c:	f803 1b01 	strb.w	r1, [r3], #1
	for (; length > 0; length--) {
   1e5a0:	3a01      	subs	r2, #1
   1e5a2:	2a00      	cmp	r2, #0
   1e5a4:	d1f8      	bne.n	1e598 <smp_g2+0x50>
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1e5a6:	ab0c      	add	r3, sp, #48	; 0x30
   1e5a8:	429f      	cmp	r7, r3
   1e5aa:	d204      	bcs.n	1e5b6 <smp_g2+0x6e>
   1e5ac:	f107 0320 	add.w	r3, r7, #32
   1e5b0:	aa0c      	add	r2, sp, #48	; 0x30
   1e5b2:	4293      	cmp	r3, r2
   1e5b4:	d912      	bls.n	1e5dc <smp_g2+0x94>
   1e5b6:	ab0c      	add	r3, sp, #48	; 0x30
   1e5b8:	429f      	cmp	r7, r3
   1e5ba:	d902      	bls.n	1e5c2 <smp_g2+0x7a>
   1e5bc:	ab14      	add	r3, sp, #80	; 0x50
   1e5be:	429f      	cmp	r7, r3
   1e5c0:	d20c      	bcs.n	1e5dc <smp_g2+0x94>
   1e5c2:	f8df 8108 	ldr.w	r8, [pc, #264]	; 1e6cc <smp_g2+0x184>
   1e5c6:	f240 2217 	movw	r2, #535	; 0x217
   1e5ca:	4641      	mov	r1, r8
   1e5cc:	4840      	ldr	r0, [pc, #256]	; (1e6d0 <smp_g2+0x188>)
   1e5ce:	f00c fd5e 	bl	2b08e <assert_print>
   1e5d2:	f240 2117 	movw	r1, #535	; 0x217
   1e5d6:	4640      	mov	r0, r8
   1e5d8:	f00c fd52 	bl	2b080 <assert_post_action>
	psrc += length - 1;
   1e5dc:	f107 011f 	add.w	r1, r7, #31
	uint8_t *pdst = (uint8_t *)dst;
   1e5e0:	ab0c      	add	r3, sp, #48	; 0x30
	for (; length > 0; length--) {
   1e5e2:	2220      	movs	r2, #32
   1e5e4:	e004      	b.n	1e5f0 <smp_g2+0xa8>
		*pdst++ = *psrc--;
   1e5e6:	f811 0901 	ldrb.w	r0, [r1], #-1
   1e5ea:	f803 0b01 	strb.w	r0, [r3], #1
	for (; length > 0; length--) {
   1e5ee:	3a01      	subs	r2, #1
   1e5f0:	2a00      	cmp	r2, #0
   1e5f2:	d1f8      	bne.n	1e5e6 <smp_g2+0x9e>
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1e5f4:	ab14      	add	r3, sp, #80	; 0x50
   1e5f6:	429d      	cmp	r5, r3
   1e5f8:	d204      	bcs.n	1e604 <smp_g2+0xbc>
   1e5fa:	f105 0310 	add.w	r3, r5, #16
   1e5fe:	aa14      	add	r2, sp, #80	; 0x50
   1e600:	4293      	cmp	r3, r2
   1e602:	d911      	bls.n	1e628 <smp_g2+0xe0>
   1e604:	ab14      	add	r3, sp, #80	; 0x50
   1e606:	429d      	cmp	r5, r3
   1e608:	d902      	bls.n	1e610 <smp_g2+0xc8>
   1e60a:	ab18      	add	r3, sp, #96	; 0x60
   1e60c:	429d      	cmp	r5, r3
   1e60e:	d20b      	bcs.n	1e628 <smp_g2+0xe0>
   1e610:	4f2e      	ldr	r7, [pc, #184]	; (1e6cc <smp_g2+0x184>)
   1e612:	f240 2217 	movw	r2, #535	; 0x217
   1e616:	4639      	mov	r1, r7
   1e618:	482d      	ldr	r0, [pc, #180]	; (1e6d0 <smp_g2+0x188>)
   1e61a:	f00c fd38 	bl	2b08e <assert_print>
   1e61e:	f240 2117 	movw	r1, #535	; 0x217
   1e622:	4638      	mov	r0, r7
   1e624:	f00c fd2c 	bl	2b080 <assert_post_action>
	psrc += length - 1;
   1e628:	f105 030f 	add.w	r3, r5, #15
	uint8_t *pdst = (uint8_t *)dst;
   1e62c:	aa14      	add	r2, sp, #80	; 0x50
	for (; length > 0; length--) {
   1e62e:	2110      	movs	r1, #16
   1e630:	e004      	b.n	1e63c <smp_g2+0xf4>
		*pdst++ = *psrc--;
   1e632:	f813 0901 	ldrb.w	r0, [r3], #-1
   1e636:	f802 0b01 	strb.w	r0, [r2], #1
	for (; length > 0; length--) {
   1e63a:	3901      	subs	r1, #1
   1e63c:	2900      	cmp	r1, #0
   1e63e:	d1f8      	bne.n	1e632 <smp_g2+0xea>
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1e640:	466b      	mov	r3, sp
   1e642:	429c      	cmp	r4, r3
   1e644:	d204      	bcs.n	1e650 <smp_g2+0x108>
   1e646:	f104 0310 	add.w	r3, r4, #16
   1e64a:	466a      	mov	r2, sp
   1e64c:	4293      	cmp	r3, r2
   1e64e:	d911      	bls.n	1e674 <smp_g2+0x12c>
   1e650:	466b      	mov	r3, sp
   1e652:	429c      	cmp	r4, r3
   1e654:	d902      	bls.n	1e65c <smp_g2+0x114>
   1e656:	ab04      	add	r3, sp, #16
   1e658:	429c      	cmp	r4, r3
   1e65a:	d20b      	bcs.n	1e674 <smp_g2+0x12c>
   1e65c:	4d1b      	ldr	r5, [pc, #108]	; (1e6cc <smp_g2+0x184>)
   1e65e:	f240 2217 	movw	r2, #535	; 0x217
   1e662:	4629      	mov	r1, r5
   1e664:	481a      	ldr	r0, [pc, #104]	; (1e6d0 <smp_g2+0x188>)
   1e666:	f00c fd12 	bl	2b08e <assert_print>
   1e66a:	f240 2117 	movw	r1, #535	; 0x217
   1e66e:	4628      	mov	r0, r5
   1e670:	f00c fd06 	bl	2b080 <assert_post_action>
	psrc += length - 1;
   1e674:	f104 020f 	add.w	r2, r4, #15
	uint8_t *pdst = (uint8_t *)dst;
   1e678:	466b      	mov	r3, sp
	for (; length > 0; length--) {
   1e67a:	2110      	movs	r1, #16
   1e67c:	e004      	b.n	1e688 <smp_g2+0x140>
		*pdst++ = *psrc--;
   1e67e:	f812 0901 	ldrb.w	r0, [r2], #-1
   1e682:	f803 0b01 	strb.w	r0, [r3], #1
	for (; length > 0; length--) {
   1e686:	3901      	subs	r1, #1
   1e688:	2900      	cmp	r1, #0
   1e68a:	d1f8      	bne.n	1e67e <smp_g2+0x136>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
   1e68c:	466b      	mov	r3, sp
   1e68e:	2250      	movs	r2, #80	; 0x50
   1e690:	a904      	add	r1, sp, #16
   1e692:	4668      	mov	r0, sp
   1e694:	f00f fecd 	bl	2e432 <bt_smp_aes_cmac>
	if (err) {
   1e698:	b9a8      	cbnz	r0, 1e6c6 <smp_g2+0x17e>
   1e69a:	9b03      	ldr	r3, [sp, #12]
   1e69c:	6033      	str	r3, [r6, #0]
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   1e69e:	6832      	ldr	r2, [r6, #0]
   1e6a0:	0a13      	lsrs	r3, r2, #8
   1e6a2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   1e6a6:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1e6aa:	0211      	lsls	r1, r2, #8
   1e6ac:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   1e6b0:	430b      	orrs	r3, r1
   1e6b2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   1e6b6:	4a07      	ldr	r2, [pc, #28]	; (1e6d4 <smp_g2+0x18c>)
   1e6b8:	fba2 1203 	umull	r1, r2, r2, r3
   1e6bc:	0c92      	lsrs	r2, r2, #18
   1e6be:	4906      	ldr	r1, [pc, #24]	; (1e6d8 <smp_g2+0x190>)
   1e6c0:	fb01 3212 	mls	r2, r1, r2, r3
   1e6c4:	6032      	str	r2, [r6, #0]
}
   1e6c6:	b019      	add	sp, #100	; 0x64
   1e6c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1e6cc:	00033eac 	.word	0x00033eac
   1e6d0:	000318f8 	.word	0x000318f8
   1e6d4:	431bde83 	.word	0x431bde83
   1e6d8:	000f4240 	.word	0x000f4240

0001e6dc <smp_pairing_random>:
{
   1e6dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e6de:	b085      	sub	sp, #20
   1e6e0:	4604      	mov	r4, r0
   1e6e2:	460d      	mov	r5, r1
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1e6e4:	f7ff f97e 	bl	1d9e4 <latch_auth_cb>
   1e6e8:	4606      	mov	r6, r0
	struct bt_smp_pairing_random *req = (void *)buf->data;
   1e6ea:	68ab      	ldr	r3, [r5, #8]
   1e6ec:	681d      	ldr	r5, [r3, #0]
   1e6ee:	6858      	ldr	r0, [r3, #4]
   1e6f0:	6899      	ldr	r1, [r3, #8]
   1e6f2:	68db      	ldr	r3, [r3, #12]
   1e6f4:	f8c4 5037 	str.w	r5, [r4, #55]	; 0x37
   1e6f8:	f8c4 003b 	str.w	r0, [r4, #59]	; 0x3b
   1e6fc:	f8c4 103f 	str.w	r1, [r4, #63]	; 0x3f
   1e700:	f8c4 3043 	str.w	r3, [r4, #67]	; 0x43
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e704:	f3bf 8f5b 	dmb	ish
   1e708:	6863      	ldr	r3, [r4, #4]
   1e70a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1e70e:	f013 0f20 	tst.w	r3, #32
   1e712:	d00b      	beq.n	1e72c <smp_pairing_random+0x50>
   1e714:	f104 0237 	add.w	r2, r4, #55	; 0x37
   1e718:	1d27      	adds	r7, r4, #4
	switch (smp->method) {
   1e71a:	7a23      	ldrb	r3, [r4, #8]
   1e71c:	2b05      	cmp	r3, #5
   1e71e:	f200 80b2 	bhi.w	1e886 <smp_pairing_random+0x1aa>
   1e722:	e8df f003 	tbb	[pc, r3]
   1e726:	4526      	.short	0x4526
   1e728:	88b00845 	.word	0x88b00845
		return legacy_pairing_random(smp);
   1e72c:	4620      	mov	r0, r4
   1e72e:	f7ff fb67 	bl	1de00 <legacy_pairing_random>
   1e732:	4605      	mov	r5, r0
   1e734:	e039      	b.n	1e7aa <smp_pairing_random+0xce>
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
   1e736:	ab03      	add	r3, sp, #12
   1e738:	9300      	str	r3, [sp, #0]
   1e73a:	f104 0327 	add.w	r3, r4, #39	; 0x27
   1e73e:	4959      	ldr	r1, [pc, #356]	; (1e8a4 <smp_pairing_random+0x1c8>)
   1e740:	6809      	ldr	r1, [r1, #0]
   1e742:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1e746:	f7ff feff 	bl	1e548 <smp_g2>
   1e74a:	2800      	cmp	r0, #0
   1e74c:	f040 80a2 	bne.w	1e894 <smp_pairing_random+0x1b8>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e750:	f3bf 8f5b 	dmb	ish
   1e754:	e857 3f00 	ldrex	r3, [r7]
   1e758:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1e75c:	e847 3200 	strex	r2, r3, [r7]
   1e760:	2a00      	cmp	r2, #0
   1e762:	d1f7      	bne.n	1e754 <smp_pairing_random+0x78>
   1e764:	f3bf 8f5b 	dmb	ish
		smp_auth_cb->passkey_confirm(smp->chan.chan.conn, passkey);
   1e768:	68b3      	ldr	r3, [r6, #8]
   1e76a:	9903      	ldr	r1, [sp, #12]
   1e76c:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1e770:	4798      	blx	r3
   1e772:	f3bf 8f5b 	dmb	ish
   1e776:	e854 3f00 	ldrex	r3, [r4]
   1e77a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   1e77e:	e844 3200 	strex	r2, r3, [r4]
   1e782:	2a00      	cmp	r2, #0
   1e784:	d1f7      	bne.n	1e776 <smp_pairing_random+0x9a>
   1e786:	f3bf 8f5b 	dmb	ish
   1e78a:	f3bf 8f5b 	dmb	ish
   1e78e:	e857 3f00 	ldrex	r3, [r7]
   1e792:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1e796:	e847 3200 	strex	r2, r3, [r7]
   1e79a:	2a00      	cmp	r2, #0
   1e79c:	d1f7      	bne.n	1e78e <smp_pairing_random+0xb2>
   1e79e:	f3bf 8f5b 	dmb	ish
	return smp_send_pairing_random(smp);
   1e7a2:	4620      	mov	r0, r4
   1e7a4:	f00f ff7f 	bl	2e6a6 <smp_send_pairing_random>
   1e7a8:	4605      	mov	r5, r0
}
   1e7aa:	4628      	mov	r0, r5
   1e7ac:	b005      	add	sp, #20
   1e7ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		err = sc_smp_check_confirm(smp);
   1e7b0:	4620      	mov	r0, r4
   1e7b2:	f7ff fe89 	bl	1e4c8 <sc_smp_check_confirm>
		if (err) {
   1e7b6:	4605      	mov	r5, r0
   1e7b8:	2800      	cmp	r0, #0
   1e7ba:	d1f6      	bne.n	1e7aa <smp_pairing_random+0xce>
		atomic_set_bit(smp->allowed_cmds,
   1e7bc:	4626      	mov	r6, r4
   1e7be:	f3bf 8f5b 	dmb	ish
   1e7c2:	e854 3f00 	ldrex	r3, [r4]
   1e7c6:	f043 0308 	orr.w	r3, r3, #8
   1e7ca:	e844 3200 	strex	r2, r3, [r4]
   1e7ce:	2a00      	cmp	r2, #0
   1e7d0:	d1f7      	bne.n	1e7c2 <smp_pairing_random+0xe6>
   1e7d2:	f3bf 8f5b 	dmb	ish
		err = smp_send_pairing_random(smp);
   1e7d6:	4620      	mov	r0, r4
   1e7d8:	f00f ff65 	bl	2e6a6 <smp_send_pairing_random>
		if (err) {
   1e7dc:	4605      	mov	r5, r0
   1e7de:	2800      	cmp	r0, #0
   1e7e0:	d1e3      	bne.n	1e7aa <smp_pairing_random+0xce>
		smp->passkey_round++;
   1e7e2:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   1e7e6:	3301      	adds	r3, #1
   1e7e8:	b2db      	uxtb	r3, r3
   1e7ea:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
		if (smp->passkey_round == 20U) {
   1e7ee:	2b14      	cmp	r3, #20
   1e7f0:	d008      	beq.n	1e804 <smp_pairing_random+0x128>
		if (bt_rand(smp->prnd, 16)) {
   1e7f2:	2110      	movs	r1, #16
   1e7f4:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1e7f8:	f004 fbe2 	bl	22fc0 <bt_rand>
   1e7fc:	2800      	cmp	r0, #0
   1e7fe:	d0d4      	beq.n	1e7aa <smp_pairing_random+0xce>
			return BT_SMP_ERR_UNSPECIFIED;
   1e800:	2508      	movs	r5, #8
   1e802:	e7d2      	b.n	1e7aa <smp_pairing_random+0xce>
   1e804:	f3bf 8f5b 	dmb	ish
   1e808:	e856 3f00 	ldrex	r3, [r6]
   1e80c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   1e810:	e846 3200 	strex	r2, r3, [r6]
   1e814:	2a00      	cmp	r2, #0
   1e816:	d1f7      	bne.n	1e808 <smp_pairing_random+0x12c>
   1e818:	f3bf 8f5b 	dmb	ish
   1e81c:	f3bf 8f5b 	dmb	ish
   1e820:	e857 3f00 	ldrex	r3, [r7]
   1e824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1e828:	e847 3200 	strex	r2, r3, [r7]
   1e82c:	2a00      	cmp	r2, #0
   1e82e:	d1f7      	bne.n	1e820 <smp_pairing_random+0x144>
   1e830:	f3bf 8f5b 	dmb	ish
			return 0;
   1e834:	e7b9      	b.n	1e7aa <smp_pairing_random+0xce>
		if (bt_rand(smp->prnd, 16)) {
   1e836:	2110      	movs	r1, #16
   1e838:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1e83c:	f004 fbc0 	bl	22fc0 <bt_rand>
   1e840:	bb50      	cbnz	r0, 1e898 <smp_pairing_random+0x1bc>
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   1e842:	b35e      	cbz	r6, 1e89c <smp_pairing_random+0x1c0>
   1e844:	68f3      	ldr	r3, [r6, #12]
   1e846:	b35b      	cbz	r3, 1e8a0 <smp_pairing_random+0x1c4>
			struct bt_conn_oob_info info = {
   1e848:	4b17      	ldr	r3, [pc, #92]	; (1e8a8 <smp_pairing_random+0x1cc>)
   1e84a:	881b      	ldrh	r3, [r3, #0]
   1e84c:	f8ad 3008 	strh.w	r3, [sp, #8]
			le_sc_oob_config_set(smp, &info);
   1e850:	a902      	add	r1, sp, #8
   1e852:	4620      	mov	r0, r4
   1e854:	f00f fd6f 	bl	2e336 <le_sc_oob_config_set>
			smp->oobd_local = NULL;
   1e858:	2500      	movs	r5, #0
   1e85a:	f8c4 50e0 	str.w	r5, [r4, #224]	; 0xe0
			smp->oobd_remote = NULL;
   1e85e:	f8c4 50e4 	str.w	r5, [r4, #228]	; 0xe4
   1e862:	f3bf 8f5b 	dmb	ish
   1e866:	e857 3f00 	ldrex	r3, [r7]
   1e86a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   1e86e:	e847 3200 	strex	r2, r3, [r7]
   1e872:	2a00      	cmp	r2, #0
   1e874:	d1f7      	bne.n	1e866 <smp_pairing_random+0x18a>
   1e876:	f3bf 8f5b 	dmb	ish
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   1e87a:	68f3      	ldr	r3, [r6, #12]
   1e87c:	a902      	add	r1, sp, #8
   1e87e:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1e882:	4798      	blx	r3
			return 0;
   1e884:	e791      	b.n	1e7aa <smp_pairing_random+0xce>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1e886:	461a      	mov	r2, r3
   1e888:	2145      	movs	r1, #69	; 0x45
   1e88a:	4808      	ldr	r0, [pc, #32]	; (1e8ac <smp_pairing_random+0x1d0>)
   1e88c:	f00c fc0e 	bl	2b0ac <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1e890:	2508      	movs	r5, #8
   1e892:	e78a      	b.n	1e7aa <smp_pairing_random+0xce>
			return BT_SMP_ERR_UNSPECIFIED;
   1e894:	2508      	movs	r5, #8
   1e896:	e788      	b.n	1e7aa <smp_pairing_random+0xce>
			return BT_SMP_ERR_UNSPECIFIED;
   1e898:	2508      	movs	r5, #8
   1e89a:	e786      	b.n	1e7aa <smp_pairing_random+0xce>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   1e89c:	2502      	movs	r5, #2
   1e89e:	e784      	b.n	1e7aa <smp_pairing_random+0xce>
   1e8a0:	2502      	movs	r5, #2
   1e8a2:	e782      	b.n	1e7aa <smp_pairing_random+0xce>
   1e8a4:	200027a8 	.word	0x200027a8
   1e8a8:	00031534 	.word	0x00031534
   1e8ac:	00033e4c 	.word	0x00033e4c

0001e8b0 <smp_pairing_confirm>:
{
   1e8b0:	b508      	push	{r3, lr}
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   1e8b2:	688b      	ldr	r3, [r1, #8]
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   1e8b4:	1d01      	adds	r1, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1e8b6:	f3bf 8f5b 	dmb	ish
   1e8ba:	e851 2f00 	ldrex	r2, [r1]
   1e8be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   1e8c2:	e841 2c00 	strex	ip, r2, [r1]
   1e8c6:	f1bc 0f00 	cmp.w	ip, #0
   1e8ca:	d1f6      	bne.n	1e8ba <smp_pairing_confirm+0xa>
   1e8cc:	f3bf 8f5b 	dmb	ish
   1e8d0:	f8d3 e000 	ldr.w	lr, [r3]
   1e8d4:	f8d3 c004 	ldr.w	ip, [r3, #4]
   1e8d8:	689a      	ldr	r2, [r3, #8]
   1e8da:	68db      	ldr	r3, [r3, #12]
   1e8dc:	f8c0 e017 	str.w	lr, [r0, #23]
   1e8e0:	f8c0 c01b 	str.w	ip, [r0, #27]
   1e8e4:	f8c0 201f 	str.w	r2, [r0, #31]
   1e8e8:	f8c0 3023 	str.w	r3, [r0, #35]	; 0x23
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e8ec:	f3bf 8f5b 	dmb	ish
   1e8f0:	6843      	ldr	r3, [r0, #4]
   1e8f2:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1e8f6:	f013 0f20 	tst.w	r3, #32
   1e8fa:	d013      	beq.n	1e924 <smp_pairing_confirm+0x74>
	switch (smp->method) {
   1e8fc:	7a02      	ldrb	r2, [r0, #8]
   1e8fe:	2a01      	cmp	r2, #1
   1e900:	d013      	beq.n	1e92a <smp_pairing_confirm+0x7a>
   1e902:	2a02      	cmp	r2, #2
   1e904:	d136      	bne.n	1e974 <smp_pairing_confirm+0xc4>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e906:	f3bf 8f5b 	dmb	ish
   1e90a:	e850 3f00 	ldrex	r3, [r0]
   1e90e:	f043 0310 	orr.w	r3, r3, #16
   1e912:	e840 3200 	strex	r2, r3, [r0]
   1e916:	2a00      	cmp	r2, #0
   1e918:	d1f7      	bne.n	1e90a <smp_pairing_confirm+0x5a>
   1e91a:	f3bf 8f5b 	dmb	ish
		return smp_send_pairing_confirm(smp);
   1e91e:	f7ff fc6b 	bl	1e1f8 <smp_send_pairing_confirm>
}
   1e922:	bd08      	pop	{r3, pc}
		return legacy_pairing_confirm(smp);
   1e924:	f00f fe77 	bl	2e616 <legacy_pairing_confirm>
   1e928:	e7fb      	b.n	1e922 <smp_pairing_confirm+0x72>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e92a:	f3bf 8f5b 	dmb	ish
   1e92e:	6843      	ldr	r3, [r0, #4]
   1e930:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1e934:	f413 6f80 	tst.w	r3, #1024	; 0x400
   1e938:	d10e      	bne.n	1e958 <smp_pairing_confirm+0xa8>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e93a:	f3bf 8f5b 	dmb	ish
   1e93e:	e850 3f00 	ldrex	r3, [r0]
   1e942:	f043 0310 	orr.w	r3, r3, #16
   1e946:	e840 3200 	strex	r2, r3, [r0]
   1e94a:	2a00      	cmp	r2, #0
   1e94c:	d1f7      	bne.n	1e93e <smp_pairing_confirm+0x8e>
   1e94e:	f3bf 8f5b 	dmb	ish
		return smp_send_pairing_confirm(smp);
   1e952:	f7ff fc51 	bl	1e1f8 <smp_send_pairing_confirm>
   1e956:	e7e4      	b.n	1e922 <smp_pairing_confirm+0x72>
   1e958:	f3bf 8f5b 	dmb	ish
   1e95c:	e851 3f00 	ldrex	r3, [r1]
   1e960:	f043 0301 	orr.w	r3, r3, #1
   1e964:	e841 3200 	strex	r2, r3, [r1]
   1e968:	2a00      	cmp	r2, #0
   1e96a:	d1f7      	bne.n	1e95c <smp_pairing_confirm+0xac>
   1e96c:	f3bf 8f5b 	dmb	ish
			return 0;
   1e970:	2000      	movs	r0, #0
   1e972:	e7d6      	b.n	1e922 <smp_pairing_confirm+0x72>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1e974:	2145      	movs	r1, #69	; 0x45
   1e976:	4802      	ldr	r0, [pc, #8]	; (1e980 <smp_pairing_confirm+0xd0>)
   1e978:	f00c fb98 	bl	2b0ac <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1e97c:	2008      	movs	r0, #8
   1e97e:	e7d0      	b.n	1e922 <smp_pairing_confirm+0x72>
   1e980:	00033e4c 	.word	0x00033e4c

0001e984 <smp_f6>:
{
   1e984:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
   1e988:	b096      	sub	sp, #88	; 0x58
   1e98a:	4604      	mov	r4, r0
   1e98c:	4688      	mov	r8, r1
   1e98e:	4616      	mov	r6, r2
   1e990:	461d      	mov	r5, r3
   1e992:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
   1e996:	9f21      	ldr	r7, [sp, #132]	; 0x84
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1e998:	ab01      	add	r3, sp, #4
   1e99a:	4299      	cmp	r1, r3
   1e99c:	d204      	bcs.n	1e9a8 <smp_f6+0x24>
   1e99e:	f101 0310 	add.w	r3, r1, #16
   1e9a2:	aa01      	add	r2, sp, #4
   1e9a4:	4293      	cmp	r3, r2
   1e9a6:	d912      	bls.n	1e9ce <smp_f6+0x4a>
   1e9a8:	ab01      	add	r3, sp, #4
   1e9aa:	4598      	cmp	r8, r3
   1e9ac:	d902      	bls.n	1e9b4 <smp_f6+0x30>
   1e9ae:	ab05      	add	r3, sp, #20
   1e9b0:	4598      	cmp	r8, r3
   1e9b2:	d20c      	bcs.n	1e9ce <smp_f6+0x4a>
   1e9b4:	f8df b250 	ldr.w	fp, [pc, #592]	; 1ec08 <smp_f6+0x284>
   1e9b8:	f240 2217 	movw	r2, #535	; 0x217
   1e9bc:	4659      	mov	r1, fp
   1e9be:	4893      	ldr	r0, [pc, #588]	; (1ec0c <smp_f6+0x288>)
   1e9c0:	f00c fb65 	bl	2b08e <assert_print>
   1e9c4:	f240 2117 	movw	r1, #535	; 0x217
   1e9c8:	4658      	mov	r0, fp
   1e9ca:	f00c fb59 	bl	2b080 <assert_post_action>
	psrc += length - 1;
   1e9ce:	f108 080f 	add.w	r8, r8, #15
	uint8_t *pdst = (uint8_t *)dst;
   1e9d2:	ab01      	add	r3, sp, #4
	for (; length > 0; length--) {
   1e9d4:	2210      	movs	r2, #16
   1e9d6:	e004      	b.n	1e9e2 <smp_f6+0x5e>
		*pdst++ = *psrc--;
   1e9d8:	f818 1901 	ldrb.w	r1, [r8], #-1
   1e9dc:	f803 1b01 	strb.w	r1, [r3], #1
	for (; length > 0; length--) {
   1e9e0:	3a01      	subs	r2, #1
   1e9e2:	2a00      	cmp	r2, #0
   1e9e4:	d1f8      	bne.n	1e9d8 <smp_f6+0x54>
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1e9e6:	ab05      	add	r3, sp, #20
   1e9e8:	429e      	cmp	r6, r3
   1e9ea:	d204      	bcs.n	1e9f6 <smp_f6+0x72>
   1e9ec:	f106 0310 	add.w	r3, r6, #16
   1e9f0:	aa05      	add	r2, sp, #20
   1e9f2:	4293      	cmp	r3, r2
   1e9f4:	d912      	bls.n	1ea1c <smp_f6+0x98>
   1e9f6:	ab05      	add	r3, sp, #20
   1e9f8:	429e      	cmp	r6, r3
   1e9fa:	d902      	bls.n	1ea02 <smp_f6+0x7e>
   1e9fc:	ab09      	add	r3, sp, #36	; 0x24
   1e9fe:	429e      	cmp	r6, r3
   1ea00:	d20c      	bcs.n	1ea1c <smp_f6+0x98>
   1ea02:	f8df 8204 	ldr.w	r8, [pc, #516]	; 1ec08 <smp_f6+0x284>
   1ea06:	f240 2217 	movw	r2, #535	; 0x217
   1ea0a:	4641      	mov	r1, r8
   1ea0c:	487f      	ldr	r0, [pc, #508]	; (1ec0c <smp_f6+0x288>)
   1ea0e:	f00c fb3e 	bl	2b08e <assert_print>
   1ea12:	f240 2117 	movw	r1, #535	; 0x217
   1ea16:	4640      	mov	r0, r8
   1ea18:	f00c fb32 	bl	2b080 <assert_post_action>
	psrc += length - 1;
   1ea1c:	360f      	adds	r6, #15
	uint8_t *pdst = (uint8_t *)dst;
   1ea1e:	ab05      	add	r3, sp, #20
	for (; length > 0; length--) {
   1ea20:	2210      	movs	r2, #16
   1ea22:	e004      	b.n	1ea2e <smp_f6+0xaa>
		*pdst++ = *psrc--;
   1ea24:	f816 1901 	ldrb.w	r1, [r6], #-1
   1ea28:	f803 1b01 	strb.w	r1, [r3], #1
	for (; length > 0; length--) {
   1ea2c:	3a01      	subs	r2, #1
   1ea2e:	2a00      	cmp	r2, #0
   1ea30:	d1f8      	bne.n	1ea24 <smp_f6+0xa0>
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1ea32:	ab09      	add	r3, sp, #36	; 0x24
   1ea34:	429d      	cmp	r5, r3
   1ea36:	d204      	bcs.n	1ea42 <smp_f6+0xbe>
   1ea38:	f105 0310 	add.w	r3, r5, #16
   1ea3c:	aa09      	add	r2, sp, #36	; 0x24
   1ea3e:	4293      	cmp	r3, r2
   1ea40:	d911      	bls.n	1ea66 <smp_f6+0xe2>
   1ea42:	ab09      	add	r3, sp, #36	; 0x24
   1ea44:	429d      	cmp	r5, r3
   1ea46:	d902      	bls.n	1ea4e <smp_f6+0xca>
   1ea48:	ab0d      	add	r3, sp, #52	; 0x34
   1ea4a:	429d      	cmp	r5, r3
   1ea4c:	d20b      	bcs.n	1ea66 <smp_f6+0xe2>
   1ea4e:	4e6e      	ldr	r6, [pc, #440]	; (1ec08 <smp_f6+0x284>)
   1ea50:	f240 2217 	movw	r2, #535	; 0x217
   1ea54:	4631      	mov	r1, r6
   1ea56:	486d      	ldr	r0, [pc, #436]	; (1ec0c <smp_f6+0x288>)
   1ea58:	f00c fb19 	bl	2b08e <assert_print>
   1ea5c:	f240 2117 	movw	r1, #535	; 0x217
   1ea60:	4630      	mov	r0, r6
   1ea62:	f00c fb0d 	bl	2b080 <assert_post_action>
	psrc += length - 1;
   1ea66:	350f      	adds	r5, #15
	uint8_t *pdst = (uint8_t *)dst;
   1ea68:	ab09      	add	r3, sp, #36	; 0x24
	for (; length > 0; length--) {
   1ea6a:	2210      	movs	r2, #16
   1ea6c:	e004      	b.n	1ea78 <smp_f6+0xf4>
		*pdst++ = *psrc--;
   1ea6e:	f815 1901 	ldrb.w	r1, [r5], #-1
   1ea72:	f803 1b01 	strb.w	r1, [r3], #1
	for (; length > 0; length--) {
   1ea76:	3a01      	subs	r2, #1
   1ea78:	2a00      	cmp	r2, #0
   1ea7a:	d1f8      	bne.n	1ea6e <smp_f6+0xea>
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1ea7c:	ab0d      	add	r3, sp, #52	; 0x34
   1ea7e:	4599      	cmp	r9, r3
   1ea80:	d203      	bcs.n	1ea8a <smp_f6+0x106>
   1ea82:	f109 0203 	add.w	r2, r9, #3
   1ea86:	429a      	cmp	r2, r3
   1ea88:	d912      	bls.n	1eab0 <smp_f6+0x12c>
   1ea8a:	ab0d      	add	r3, sp, #52	; 0x34
   1ea8c:	4599      	cmp	r9, r3
   1ea8e:	d903      	bls.n	1ea98 <smp_f6+0x114>
   1ea90:	f10d 0337 	add.w	r3, sp, #55	; 0x37
   1ea94:	4599      	cmp	r9, r3
   1ea96:	d20b      	bcs.n	1eab0 <smp_f6+0x12c>
   1ea98:	4d5b      	ldr	r5, [pc, #364]	; (1ec08 <smp_f6+0x284>)
   1ea9a:	f240 2217 	movw	r2, #535	; 0x217
   1ea9e:	4629      	mov	r1, r5
   1eaa0:	485a      	ldr	r0, [pc, #360]	; (1ec0c <smp_f6+0x288>)
   1eaa2:	f00c faf4 	bl	2b08e <assert_print>
   1eaa6:	f240 2117 	movw	r1, #535	; 0x217
   1eaaa:	4628      	mov	r0, r5
   1eaac:	f00c fae8 	bl	2b080 <assert_post_action>
	psrc += length - 1;
   1eab0:	f109 0902 	add.w	r9, r9, #2
	uint8_t *pdst = (uint8_t *)dst;
   1eab4:	ab0d      	add	r3, sp, #52	; 0x34
	for (; length > 0; length--) {
   1eab6:	2203      	movs	r2, #3
   1eab8:	e004      	b.n	1eac4 <smp_f6+0x140>
		*pdst++ = *psrc--;
   1eaba:	f819 1901 	ldrb.w	r1, [r9], #-1
   1eabe:	f803 1b01 	strb.w	r1, [r3], #1
	for (; length > 0; length--) {
   1eac2:	3a01      	subs	r2, #1
   1eac4:	2a00      	cmp	r2, #0
   1eac6:	d1f8      	bne.n	1eaba <smp_f6+0x136>
	m[51] = a1->type;
   1eac8:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   1eaca:	f815 3b01 	ldrb.w	r3, [r5], #1
   1eace:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
	memcpy(m + 52, a1->a.val, 6);
   1ead2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1ead4:	f8d3 0001 	ldr.w	r0, [r3, #1]
   1ead8:	900e      	str	r0, [sp, #56]	; 0x38
   1eada:	88ab      	ldrh	r3, [r5, #4]
   1eadc:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1eae0:	ab0e      	add	r3, sp, #56	; 0x38
   1eae2:	429d      	cmp	r5, r3
   1eae4:	d203      	bcs.n	1eaee <smp_f6+0x16a>
   1eae6:	1dab      	adds	r3, r5, #6
   1eae8:	aa0e      	add	r2, sp, #56	; 0x38
   1eaea:	4293      	cmp	r3, r2
   1eaec:	d912      	bls.n	1eb14 <smp_f6+0x190>
   1eaee:	ab0e      	add	r3, sp, #56	; 0x38
   1eaf0:	429d      	cmp	r5, r3
   1eaf2:	d903      	bls.n	1eafc <smp_f6+0x178>
   1eaf4:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   1eaf8:	429d      	cmp	r5, r3
   1eafa:	d20b      	bcs.n	1eb14 <smp_f6+0x190>
   1eafc:	4e42      	ldr	r6, [pc, #264]	; (1ec08 <smp_f6+0x284>)
   1eafe:	f240 2217 	movw	r2, #535	; 0x217
   1eb02:	4631      	mov	r1, r6
   1eb04:	4841      	ldr	r0, [pc, #260]	; (1ec0c <smp_f6+0x288>)
   1eb06:	f00c fac2 	bl	2b08e <assert_print>
   1eb0a:	f240 2117 	movw	r1, #535	; 0x217
   1eb0e:	4630      	mov	r0, r6
   1eb10:	f00c fab6 	bl	2b080 <assert_post_action>
	psrc += length - 1;
   1eb14:	1d6b      	adds	r3, r5, #5
	uint8_t *pdst = (uint8_t *)dst;
   1eb16:	aa0e      	add	r2, sp, #56	; 0x38
	for (; length > 0; length--) {
   1eb18:	2106      	movs	r1, #6
   1eb1a:	e004      	b.n	1eb26 <smp_f6+0x1a2>
		*pdst++ = *psrc--;
   1eb1c:	f813 0901 	ldrb.w	r0, [r3], #-1
   1eb20:	f802 0b01 	strb.w	r0, [r2], #1
	for (; length > 0; length--) {
   1eb24:	3901      	subs	r1, #1
   1eb26:	2900      	cmp	r1, #0
   1eb28:	d1f8      	bne.n	1eb1c <smp_f6+0x198>
	m[58] = a2->type;
   1eb2a:	9d20      	ldr	r5, [sp, #128]	; 0x80
   1eb2c:	f815 3b01 	ldrb.w	r3, [r5], #1
   1eb30:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
	memcpy(m + 59, a2->a.val, 6);
   1eb34:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1eb36:	f8d3 3001 	ldr.w	r3, [r3, #1]
   1eb3a:	f8cd 303f 	str.w	r3, [sp, #63]	; 0x3f
   1eb3e:	88ab      	ldrh	r3, [r5, #4]
   1eb40:	f8ad 3043 	strh.w	r3, [sp, #67]	; 0x43
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1eb44:	f10d 033f 	add.w	r3, sp, #63	; 0x3f
   1eb48:	429d      	cmp	r5, r3
   1eb4a:	d204      	bcs.n	1eb56 <smp_f6+0x1d2>
   1eb4c:	1dab      	adds	r3, r5, #6
   1eb4e:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
   1eb52:	4293      	cmp	r3, r2
   1eb54:	d913      	bls.n	1eb7e <smp_f6+0x1fa>
   1eb56:	f10d 033f 	add.w	r3, sp, #63	; 0x3f
   1eb5a:	429d      	cmp	r5, r3
   1eb5c:	d903      	bls.n	1eb66 <smp_f6+0x1e2>
   1eb5e:	f10d 0345 	add.w	r3, sp, #69	; 0x45
   1eb62:	429d      	cmp	r5, r3
   1eb64:	d20b      	bcs.n	1eb7e <smp_f6+0x1fa>
   1eb66:	4e28      	ldr	r6, [pc, #160]	; (1ec08 <smp_f6+0x284>)
   1eb68:	f240 2217 	movw	r2, #535	; 0x217
   1eb6c:	4631      	mov	r1, r6
   1eb6e:	4827      	ldr	r0, [pc, #156]	; (1ec0c <smp_f6+0x288>)
   1eb70:	f00c fa8d 	bl	2b08e <assert_print>
   1eb74:	f240 2117 	movw	r1, #535	; 0x217
   1eb78:	4630      	mov	r0, r6
   1eb7a:	f00c fa81 	bl	2b080 <assert_post_action>
	psrc += length - 1;
   1eb7e:	1d6b      	adds	r3, r5, #5
	uint8_t *pdst = (uint8_t *)dst;
   1eb80:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
	for (; length > 0; length--) {
   1eb84:	2106      	movs	r1, #6
   1eb86:	e004      	b.n	1eb92 <smp_f6+0x20e>
		*pdst++ = *psrc--;
   1eb88:	f813 0901 	ldrb.w	r0, [r3], #-1
   1eb8c:	f802 0b01 	strb.w	r0, [r2], #1
	for (; length > 0; length--) {
   1eb90:	3901      	subs	r1, #1
   1eb92:	2900      	cmp	r1, #0
   1eb94:	d1f8      	bne.n	1eb88 <smp_f6+0x204>
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1eb96:	ab12      	add	r3, sp, #72	; 0x48
   1eb98:	429c      	cmp	r4, r3
   1eb9a:	d204      	bcs.n	1eba6 <smp_f6+0x222>
   1eb9c:	f104 0310 	add.w	r3, r4, #16
   1eba0:	aa12      	add	r2, sp, #72	; 0x48
   1eba2:	4293      	cmp	r3, r2
   1eba4:	d911      	bls.n	1ebca <smp_f6+0x246>
   1eba6:	ab12      	add	r3, sp, #72	; 0x48
   1eba8:	429c      	cmp	r4, r3
   1ebaa:	d902      	bls.n	1ebb2 <smp_f6+0x22e>
   1ebac:	ab16      	add	r3, sp, #88	; 0x58
   1ebae:	429c      	cmp	r4, r3
   1ebb0:	d20b      	bcs.n	1ebca <smp_f6+0x246>
   1ebb2:	4d15      	ldr	r5, [pc, #84]	; (1ec08 <smp_f6+0x284>)
   1ebb4:	f240 2217 	movw	r2, #535	; 0x217
   1ebb8:	4629      	mov	r1, r5
   1ebba:	4814      	ldr	r0, [pc, #80]	; (1ec0c <smp_f6+0x288>)
   1ebbc:	f00c fa67 	bl	2b08e <assert_print>
   1ebc0:	f240 2117 	movw	r1, #535	; 0x217
   1ebc4:	4628      	mov	r0, r5
   1ebc6:	f00c fa5b 	bl	2b080 <assert_post_action>
	psrc += length - 1;
   1ebca:	340f      	adds	r4, #15
	uint8_t *pdst = (uint8_t *)dst;
   1ebcc:	ab12      	add	r3, sp, #72	; 0x48
	for (; length > 0; length--) {
   1ebce:	2510      	movs	r5, #16
   1ebd0:	e004      	b.n	1ebdc <smp_f6+0x258>
		*pdst++ = *psrc--;
   1ebd2:	f814 2901 	ldrb.w	r2, [r4], #-1
   1ebd6:	f803 2b01 	strb.w	r2, [r3], #1
	for (; length > 0; length--) {
   1ebda:	3d01      	subs	r5, #1
   1ebdc:	2d00      	cmp	r5, #0
   1ebde:	d1f8      	bne.n	1ebd2 <smp_f6+0x24e>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   1ebe0:	463b      	mov	r3, r7
   1ebe2:	2241      	movs	r2, #65	; 0x41
   1ebe4:	a901      	add	r1, sp, #4
   1ebe6:	a812      	add	r0, sp, #72	; 0x48
   1ebe8:	f00f fc23 	bl	2e432 <bt_smp_aes_cmac>
	if (err) {
   1ebec:	b148      	cbz	r0, 1ec02 <smp_f6+0x27e>
}
   1ebee:	b016      	add	sp, #88	; 0x58
   1ebf0:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		uint8_t tmp = ((uint8_t *)buf)[i];
   1ebf4:	5d7a      	ldrb	r2, [r7, r5]
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1ebf6:	f1c5 030f 	rsb	r3, r5, #15
   1ebfa:	5cf9      	ldrb	r1, [r7, r3]
   1ebfc:	5579      	strb	r1, [r7, r5]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1ebfe:	54fa      	strb	r2, [r7, r3]
	for (i = 0; i < (length/2); i++) {
   1ec00:	3501      	adds	r5, #1
   1ec02:	2d07      	cmp	r5, #7
   1ec04:	d9f6      	bls.n	1ebf4 <smp_f6+0x270>
   1ec06:	e7f2      	b.n	1ebee <smp_f6+0x26a>
   1ec08:	00033eac 	.word	0x00033eac
   1ec0c:	000318f8 	.word	0x000318f8

0001ec10 <smp_f5>:
{
   1ec10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ec14:	b09a      	sub	sp, #104	; 0x68
   1ec16:	4604      	mov	r4, r0
   1ec18:	460f      	mov	r7, r1
   1ec1a:	4616      	mov	r6, r2
   1ec1c:	461d      	mov	r5, r3
   1ec1e:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
   1ec22:	f8dd 9090 	ldr.w	r9, [sp, #144]	; 0x90
	uint8_t m[53] = { 0x00, /* counter */
   1ec26:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
   1ec2a:	f8df e248 	ldr.w	lr, [pc, #584]	; 1ee74 <smp_f5+0x264>
   1ec2e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   1ec32:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1ec36:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   1ec3a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1ec3e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   1ec42:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1ec46:	e89e 0003 	ldmia.w	lr, {r0, r1}
   1ec4a:	f84c 0b04 	str.w	r0, [ip], #4
   1ec4e:	f88c 1000 	strb.w	r1, [ip]
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1ec52:	466b      	mov	r3, sp
   1ec54:	429c      	cmp	r4, r3
   1ec56:	d204      	bcs.n	1ec62 <smp_f5+0x52>
   1ec58:	f104 0320 	add.w	r3, r4, #32
   1ec5c:	466a      	mov	r2, sp
   1ec5e:	4293      	cmp	r3, r2
   1ec60:	d912      	bls.n	1ec88 <smp_f5+0x78>
   1ec62:	466b      	mov	r3, sp
   1ec64:	429c      	cmp	r4, r3
   1ec66:	d902      	bls.n	1ec6e <smp_f5+0x5e>
   1ec68:	ab08      	add	r3, sp, #32
   1ec6a:	429c      	cmp	r4, r3
   1ec6c:	d20c      	bcs.n	1ec88 <smp_f5+0x78>
   1ec6e:	f8df a208 	ldr.w	sl, [pc, #520]	; 1ee78 <smp_f5+0x268>
   1ec72:	f240 2217 	movw	r2, #535	; 0x217
   1ec76:	4651      	mov	r1, sl
   1ec78:	4880      	ldr	r0, [pc, #512]	; (1ee7c <smp_f5+0x26c>)
   1ec7a:	f00c fa08 	bl	2b08e <assert_print>
   1ec7e:	f240 2117 	movw	r1, #535	; 0x217
   1ec82:	4650      	mov	r0, sl
   1ec84:	f00c f9fc 	bl	2b080 <assert_post_action>
	psrc += length - 1;
   1ec88:	f104 001f 	add.w	r0, r4, #31
	uint8_t *pdst = (uint8_t *)dst;
   1ec8c:	466b      	mov	r3, sp
	for (; length > 0; length--) {
   1ec8e:	2220      	movs	r2, #32
   1ec90:	e004      	b.n	1ec9c <smp_f5+0x8c>
		*pdst++ = *psrc--;
   1ec92:	f810 1901 	ldrb.w	r1, [r0], #-1
   1ec96:	f803 1b01 	strb.w	r1, [r3], #1
	for (; length > 0; length--) {
   1ec9a:	3a01      	subs	r2, #1
   1ec9c:	2a00      	cmp	r2, #0
   1ec9e:	d1f8      	bne.n	1ec92 <smp_f5+0x82>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
   1eca0:	ab08      	add	r3, sp, #32
   1eca2:	2220      	movs	r2, #32
   1eca4:	4669      	mov	r1, sp
   1eca6:	4876      	ldr	r0, [pc, #472]	; (1ee80 <smp_f5+0x270>)
   1eca8:	f00f fbc3 	bl	2e432 <bt_smp_aes_cmac>
	if (err) {
   1ecac:	b110      	cbz	r0, 1ecb4 <smp_f5+0xa4>
}
   1ecae:	b01a      	add	sp, #104	; 0x68
   1ecb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1ecb4:	f10d 0335 	add.w	r3, sp, #53	; 0x35
   1ecb8:	429f      	cmp	r7, r3
   1ecba:	d205      	bcs.n	1ecc8 <smp_f5+0xb8>
   1ecbc:	f107 0310 	add.w	r3, r7, #16
   1ecc0:	f10d 0235 	add.w	r2, sp, #53	; 0x35
   1ecc4:	4293      	cmp	r3, r2
   1ecc6:	d913      	bls.n	1ecf0 <smp_f5+0xe0>
   1ecc8:	f10d 0335 	add.w	r3, sp, #53	; 0x35
   1eccc:	429f      	cmp	r7, r3
   1ecce:	d903      	bls.n	1ecd8 <smp_f5+0xc8>
   1ecd0:	f10d 0345 	add.w	r3, sp, #69	; 0x45
   1ecd4:	429f      	cmp	r7, r3
   1ecd6:	d20b      	bcs.n	1ecf0 <smp_f5+0xe0>
   1ecd8:	4c67      	ldr	r4, [pc, #412]	; (1ee78 <smp_f5+0x268>)
   1ecda:	f240 2217 	movw	r2, #535	; 0x217
   1ecde:	4621      	mov	r1, r4
   1ece0:	4866      	ldr	r0, [pc, #408]	; (1ee7c <smp_f5+0x26c>)
   1ece2:	f00c f9d4 	bl	2b08e <assert_print>
   1ece6:	f240 2117 	movw	r1, #535	; 0x217
   1ecea:	4620      	mov	r0, r4
   1ecec:	f00c f9c8 	bl	2b080 <assert_post_action>
	psrc += length - 1;
   1ecf0:	370f      	adds	r7, #15
	uint8_t *pdst = (uint8_t *)dst;
   1ecf2:	f10d 0335 	add.w	r3, sp, #53	; 0x35
	for (; length > 0; length--) {
   1ecf6:	2210      	movs	r2, #16
   1ecf8:	b12a      	cbz	r2, 1ed06 <smp_f5+0xf6>
		*pdst++ = *psrc--;
   1ecfa:	f817 1901 	ldrb.w	r1, [r7], #-1
   1ecfe:	f803 1b01 	strb.w	r1, [r3], #1
	for (; length > 0; length--) {
   1ed02:	3a01      	subs	r2, #1
   1ed04:	e7f8      	b.n	1ecf8 <smp_f5+0xe8>
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1ed06:	f10d 0345 	add.w	r3, sp, #69	; 0x45
   1ed0a:	429e      	cmp	r6, r3
   1ed0c:	d205      	bcs.n	1ed1a <smp_f5+0x10a>
   1ed0e:	f106 0310 	add.w	r3, r6, #16
   1ed12:	f10d 0245 	add.w	r2, sp, #69	; 0x45
   1ed16:	4293      	cmp	r3, r2
   1ed18:	d913      	bls.n	1ed42 <smp_f5+0x132>
   1ed1a:	f10d 0345 	add.w	r3, sp, #69	; 0x45
   1ed1e:	429e      	cmp	r6, r3
   1ed20:	d903      	bls.n	1ed2a <smp_f5+0x11a>
   1ed22:	f10d 0355 	add.w	r3, sp, #85	; 0x55
   1ed26:	429e      	cmp	r6, r3
   1ed28:	d20b      	bcs.n	1ed42 <smp_f5+0x132>
   1ed2a:	4c53      	ldr	r4, [pc, #332]	; (1ee78 <smp_f5+0x268>)
   1ed2c:	f240 2217 	movw	r2, #535	; 0x217
   1ed30:	4621      	mov	r1, r4
   1ed32:	4852      	ldr	r0, [pc, #328]	; (1ee7c <smp_f5+0x26c>)
   1ed34:	f00c f9ab 	bl	2b08e <assert_print>
   1ed38:	f240 2117 	movw	r1, #535	; 0x217
   1ed3c:	4620      	mov	r0, r4
   1ed3e:	f00c f99f 	bl	2b080 <assert_post_action>
	psrc += length - 1;
   1ed42:	360f      	adds	r6, #15
	uint8_t *pdst = (uint8_t *)dst;
   1ed44:	f10d 0345 	add.w	r3, sp, #69	; 0x45
	for (; length > 0; length--) {
   1ed48:	2210      	movs	r2, #16
   1ed4a:	b12a      	cbz	r2, 1ed58 <smp_f5+0x148>
		*pdst++ = *psrc--;
   1ed4c:	f816 1901 	ldrb.w	r1, [r6], #-1
   1ed50:	f803 1b01 	strb.w	r1, [r3], #1
	for (; length > 0; length--) {
   1ed54:	3a01      	subs	r2, #1
   1ed56:	e7f8      	b.n	1ed4a <smp_f5+0x13a>
	m[37] = a1->type;
   1ed58:	f815 3b01 	ldrb.w	r3, [r5], #1
   1ed5c:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1ed60:	f10d 0356 	add.w	r3, sp, #86	; 0x56
   1ed64:	429d      	cmp	r5, r3
   1ed66:	d204      	bcs.n	1ed72 <smp_f5+0x162>
   1ed68:	1dab      	adds	r3, r5, #6
   1ed6a:	f10d 0256 	add.w	r2, sp, #86	; 0x56
   1ed6e:	4293      	cmp	r3, r2
   1ed70:	d912      	bls.n	1ed98 <smp_f5+0x188>
   1ed72:	f10d 0356 	add.w	r3, sp, #86	; 0x56
   1ed76:	429d      	cmp	r5, r3
   1ed78:	d902      	bls.n	1ed80 <smp_f5+0x170>
   1ed7a:	ab17      	add	r3, sp, #92	; 0x5c
   1ed7c:	429d      	cmp	r5, r3
   1ed7e:	d20b      	bcs.n	1ed98 <smp_f5+0x188>
   1ed80:	4c3d      	ldr	r4, [pc, #244]	; (1ee78 <smp_f5+0x268>)
   1ed82:	f240 2217 	movw	r2, #535	; 0x217
   1ed86:	4621      	mov	r1, r4
   1ed88:	483c      	ldr	r0, [pc, #240]	; (1ee7c <smp_f5+0x26c>)
   1ed8a:	f00c f980 	bl	2b08e <assert_print>
   1ed8e:	f240 2117 	movw	r1, #535	; 0x217
   1ed92:	4620      	mov	r0, r4
   1ed94:	f00c f974 	bl	2b080 <assert_post_action>
	psrc += length - 1;
   1ed98:	3505      	adds	r5, #5
	uint8_t *pdst = (uint8_t *)dst;
   1ed9a:	f10d 0356 	add.w	r3, sp, #86	; 0x56
	for (; length > 0; length--) {
   1ed9e:	2206      	movs	r2, #6
   1eda0:	e004      	b.n	1edac <smp_f5+0x19c>
		*pdst++ = *psrc--;
   1eda2:	f815 1901 	ldrb.w	r1, [r5], #-1
   1eda6:	f803 1b01 	strb.w	r1, [r3], #1
	for (; length > 0; length--) {
   1edaa:	3a01      	subs	r2, #1
   1edac:	2a00      	cmp	r2, #0
   1edae:	d1f8      	bne.n	1eda2 <smp_f5+0x192>
	m[44] = a2->type;
   1edb0:	9c22      	ldr	r4, [sp, #136]	; 0x88
   1edb2:	f814 3b01 	ldrb.w	r3, [r4], #1
   1edb6:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1edba:	f10d 035d 	add.w	r3, sp, #93	; 0x5d
   1edbe:	429c      	cmp	r4, r3
   1edc0:	d204      	bcs.n	1edcc <smp_f5+0x1bc>
   1edc2:	1da3      	adds	r3, r4, #6
   1edc4:	f10d 025d 	add.w	r2, sp, #93	; 0x5d
   1edc8:	4293      	cmp	r3, r2
   1edca:	d913      	bls.n	1edf4 <smp_f5+0x1e4>
   1edcc:	f10d 035d 	add.w	r3, sp, #93	; 0x5d
   1edd0:	429c      	cmp	r4, r3
   1edd2:	d903      	bls.n	1eddc <smp_f5+0x1cc>
   1edd4:	f10d 0363 	add.w	r3, sp, #99	; 0x63
   1edd8:	429c      	cmp	r4, r3
   1edda:	d20b      	bcs.n	1edf4 <smp_f5+0x1e4>
   1eddc:	4d26      	ldr	r5, [pc, #152]	; (1ee78 <smp_f5+0x268>)
   1edde:	f240 2217 	movw	r2, #535	; 0x217
   1ede2:	4629      	mov	r1, r5
   1ede4:	4825      	ldr	r0, [pc, #148]	; (1ee7c <smp_f5+0x26c>)
   1ede6:	f00c f952 	bl	2b08e <assert_print>
   1edea:	f240 2117 	movw	r1, #535	; 0x217
   1edee:	4628      	mov	r0, r5
   1edf0:	f00c f946 	bl	2b080 <assert_post_action>
	psrc += length - 1;
   1edf4:	1d63      	adds	r3, r4, #5
	uint8_t *pdst = (uint8_t *)dst;
   1edf6:	f10d 025d 	add.w	r2, sp, #93	; 0x5d
	for (; length > 0; length--) {
   1edfa:	2406      	movs	r4, #6
   1edfc:	e004      	b.n	1ee08 <smp_f5+0x1f8>
		*pdst++ = *psrc--;
   1edfe:	f813 1901 	ldrb.w	r1, [r3], #-1
   1ee02:	f802 1b01 	strb.w	r1, [r2], #1
	for (; length > 0; length--) {
   1ee06:	3c01      	subs	r4, #1
   1ee08:	2c00      	cmp	r4, #0
   1ee0a:	d1f8      	bne.n	1edfe <smp_f5+0x1ee>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
   1ee0c:	4643      	mov	r3, r8
   1ee0e:	2235      	movs	r2, #53	; 0x35
   1ee10:	a90c      	add	r1, sp, #48	; 0x30
   1ee12:	a808      	add	r0, sp, #32
   1ee14:	f00f fb0d 	bl	2e432 <bt_smp_aes_cmac>
	if (err) {
   1ee18:	2800      	cmp	r0, #0
   1ee1a:	f47f af48 	bne.w	1ecae <smp_f5+0x9e>
	for (i = 0; i < (length/2); i++) {
   1ee1e:	4623      	mov	r3, r4
   1ee20:	2b07      	cmp	r3, #7
   1ee22:	d80b      	bhi.n	1ee3c <smp_f5+0x22c>
		uint8_t tmp = ((uint8_t *)buf)[i];
   1ee24:	f818 1003 	ldrb.w	r1, [r8, r3]
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1ee28:	f1c3 020f 	rsb	r2, r3, #15
   1ee2c:	f818 0002 	ldrb.w	r0, [r8, r2]
   1ee30:	f808 0003 	strb.w	r0, [r8, r3]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1ee34:	f808 1002 	strb.w	r1, [r8, r2]
	for (i = 0; i < (length/2); i++) {
   1ee38:	3301      	adds	r3, #1
   1ee3a:	e7f1      	b.n	1ee20 <smp_f5+0x210>
	m[0] = 0x01;
   1ee3c:	2301      	movs	r3, #1
   1ee3e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
   1ee42:	464b      	mov	r3, r9
   1ee44:	2235      	movs	r2, #53	; 0x35
   1ee46:	a90c      	add	r1, sp, #48	; 0x30
   1ee48:	a808      	add	r0, sp, #32
   1ee4a:	f00f faf2 	bl	2e432 <bt_smp_aes_cmac>
	if (err) {
   1ee4e:	2800      	cmp	r0, #0
   1ee50:	f47f af2d 	bne.w	1ecae <smp_f5+0x9e>
   1ee54:	2c07      	cmp	r4, #7
   1ee56:	f63f af2a 	bhi.w	1ecae <smp_f5+0x9e>
		uint8_t tmp = ((uint8_t *)buf)[i];
   1ee5a:	f819 2004 	ldrb.w	r2, [r9, r4]
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1ee5e:	f1c4 030f 	rsb	r3, r4, #15
   1ee62:	f819 1003 	ldrb.w	r1, [r9, r3]
   1ee66:	f809 1004 	strb.w	r1, [r9, r4]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1ee6a:	f809 2003 	strb.w	r2, [r9, r3]
	for (i = 0; i < (length/2); i++) {
   1ee6e:	3401      	adds	r4, #1
   1ee70:	e7f0      	b.n	1ee54 <smp_f5+0x244>
   1ee72:	bf00      	nop
   1ee74:	00031538 	.word	0x00031538
   1ee78:	00033eac 	.word	0x00033eac
   1ee7c:	000318f8 	.word	0x000318f8
   1ee80:	00034290 	.word	0x00034290

0001ee84 <compute_and_check_and_send_periph_dhcheck>:
{
   1ee84:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ee86:	b091      	sub	sp, #68	; 0x44
   1ee88:	4604      	mov	r4, r0
	(void)memset(r, 0, sizeof(r));
   1ee8a:	2300      	movs	r3, #0
   1ee8c:	9304      	str	r3, [sp, #16]
   1ee8e:	9305      	str	r3, [sp, #20]
   1ee90:	9306      	str	r3, [sp, #24]
   1ee92:	9307      	str	r3, [sp, #28]
	switch (smp->method) {
   1ee94:	7a02      	ldrb	r2, [r0, #8]
   1ee96:	2a05      	cmp	r2, #5
   1ee98:	d871      	bhi.n	1ef7e <compute_and_check_and_send_periph_dhcheck+0xfa>
   1ee9a:	e8df f002 	tbb	[pc, r2]
   1ee9e:	0306      	.short	0x0306
   1eea0:	65700603 	.word	0x65700603
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   1eea4:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
   1eea8:	9304      	str	r3, [sp, #16]
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   1eeaa:	f104 0637 	add.w	r6, r4, #55	; 0x37
   1eeae:	f104 0727 	add.w	r7, r4, #39	; 0x27
		   &smp->chan.chan.conn->le.init_addr,
   1eeb2:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   1eeb6:	f103 029e 	add.w	r2, r3, #158	; 0x9e
   1eeba:	f104 05c7 	add.w	r5, r4, #199	; 0xc7
		   smp->tk)) {
   1eebe:	f104 0147 	add.w	r1, r4, #71	; 0x47
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   1eec2:	9102      	str	r1, [sp, #8]
   1eec4:	9501      	str	r5, [sp, #4]
   1eec6:	9200      	str	r2, [sp, #0]
   1eec8:	3397      	adds	r3, #151	; 0x97
   1eeca:	463a      	mov	r2, r7
   1eecc:	4631      	mov	r1, r6
   1eece:	f104 0097 	add.w	r0, r4, #151	; 0x97
   1eed2:	f7ff fe9d 	bl	1ec10 <smp_f5>
   1eed6:	2800      	cmp	r0, #0
   1eed8:	d157      	bne.n	1ef8a <compute_and_check_and_send_periph_dhcheck+0x106>
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   1eeda:	f104 0211 	add.w	r2, r4, #17
		   &smp->chan.chan.conn->le.resp_addr,
   1eede:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1eee2:	f103 019e 	add.w	r1, r3, #158	; 0x9e
		   &smp->chan.chan.conn->le.init_addr, e)) {
   1eee6:	3397      	adds	r3, #151	; 0x97
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   1eee8:	a808      	add	r0, sp, #32
   1eeea:	9003      	str	r0, [sp, #12]
   1eeec:	9302      	str	r3, [sp, #8]
   1eeee:	9101      	str	r1, [sp, #4]
   1eef0:	9200      	str	r2, [sp, #0]
   1eef2:	ab04      	add	r3, sp, #16
   1eef4:	4632      	mov	r2, r6
   1eef6:	4639      	mov	r1, r7
   1eef8:	4628      	mov	r0, r5
   1eefa:	f7ff fd43 	bl	1e984 <smp_f6>
   1eefe:	2800      	cmp	r0, #0
   1ef00:	d149      	bne.n	1ef96 <compute_and_check_and_send_periph_dhcheck+0x112>
	if (smp->method == LE_SC_OOB) {
   1ef02:	7a23      	ldrb	r3, [r4, #8]
   1ef04:	2b05      	cmp	r3, #5
   1ef06:	d04c      	beq.n	1efa2 <compute_and_check_and_send_periph_dhcheck+0x11e>
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   1ef08:	f104 020a 	add.w	r2, r4, #10
		   &smp->chan.chan.conn->le.init_addr,
   1ef0c:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1ef10:	f103 0197 	add.w	r1, r3, #151	; 0x97
		   &smp->chan.chan.conn->le.resp_addr, re)) {
   1ef14:	339e      	adds	r3, #158	; 0x9e
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   1ef16:	a80c      	add	r0, sp, #48	; 0x30
   1ef18:	9003      	str	r0, [sp, #12]
   1ef1a:	9302      	str	r3, [sp, #8]
   1ef1c:	9101      	str	r1, [sp, #4]
   1ef1e:	9200      	str	r2, [sp, #0]
   1ef20:	ab04      	add	r3, sp, #16
   1ef22:	463a      	mov	r2, r7
   1ef24:	4631      	mov	r1, r6
   1ef26:	4628      	mov	r0, r5
   1ef28:	f7ff fd2c 	bl	1e984 <smp_f6>
   1ef2c:	2800      	cmp	r0, #0
   1ef2e:	d14a      	bne.n	1efc6 <compute_and_check_and_send_periph_dhcheck+0x142>
	if (memcmp(smp->e, re, 16)) {
   1ef30:	2210      	movs	r2, #16
   1ef32:	a90c      	add	r1, sp, #48	; 0x30
   1ef34:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   1ef38:	f011 fede 	bl	30cf8 <memcmp>
   1ef3c:	2800      	cmp	r0, #0
   1ef3e:	d148      	bne.n	1efd2 <compute_and_check_and_send_periph_dhcheck+0x14e>
	err = sc_smp_send_dhkey_check(smp, e);
   1ef40:	a908      	add	r1, sp, #32
   1ef42:	4620      	mov	r0, r4
   1ef44:	f00f fb8e 	bl	2e664 <sc_smp_send_dhkey_check>
	if (err) {
   1ef48:	b960      	cbnz	r0, 1ef64 <compute_and_check_and_send_periph_dhcheck+0xe0>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1ef4a:	3404      	adds	r4, #4
   1ef4c:	f3bf 8f5b 	dmb	ish
   1ef50:	e854 3f00 	ldrex	r3, [r4]
   1ef54:	f043 0302 	orr.w	r3, r3, #2
   1ef58:	e844 3200 	strex	r2, r3, [r4]
   1ef5c:	2a00      	cmp	r2, #0
   1ef5e:	d1f7      	bne.n	1ef50 <compute_and_check_and_send_periph_dhcheck+0xcc>
   1ef60:	f3bf 8f5b 	dmb	ish
}
   1ef64:	b011      	add	sp, #68	; 0x44
   1ef66:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (smp->oobd_remote) {
   1ef68:	f8d0 30e4 	ldr.w	r3, [r0, #228]	; 0xe4
   1ef6c:	2b00      	cmp	r3, #0
   1ef6e:	d09c      	beq.n	1eeaa <compute_and_check_and_send_periph_dhcheck+0x26>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   1ef70:	ad04      	add	r5, sp, #16
   1ef72:	6818      	ldr	r0, [r3, #0]
   1ef74:	6859      	ldr	r1, [r3, #4]
   1ef76:	689a      	ldr	r2, [r3, #8]
   1ef78:	68db      	ldr	r3, [r3, #12]
   1ef7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1ef7c:	e795      	b.n	1eeaa <compute_and_check_and_send_periph_dhcheck+0x26>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1ef7e:	2145      	movs	r1, #69	; 0x45
   1ef80:	4815      	ldr	r0, [pc, #84]	; (1efd8 <compute_and_check_and_send_periph_dhcheck+0x154>)
   1ef82:	f00c f893 	bl	2b0ac <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1ef86:	2008      	movs	r0, #8
   1ef88:	e7ec      	b.n	1ef64 <compute_and_check_and_send_periph_dhcheck+0xe0>
		BT_ERR("Calculate LTK failed");
   1ef8a:	2145      	movs	r1, #69	; 0x45
   1ef8c:	4813      	ldr	r0, [pc, #76]	; (1efdc <compute_and_check_and_send_periph_dhcheck+0x158>)
   1ef8e:	f00c f88d 	bl	2b0ac <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1ef92:	2008      	movs	r0, #8
   1ef94:	e7e6      	b.n	1ef64 <compute_and_check_and_send_periph_dhcheck+0xe0>
		BT_ERR("Calculate local DHKey check failed");
   1ef96:	2145      	movs	r1, #69	; 0x45
   1ef98:	4811      	ldr	r0, [pc, #68]	; (1efe0 <compute_and_check_and_send_periph_dhcheck+0x15c>)
   1ef9a:	f00c f887 	bl	2b0ac <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1ef9e:	2008      	movs	r0, #8
   1efa0:	e7e0      	b.n	1ef64 <compute_and_check_and_send_periph_dhcheck+0xe0>
		if (smp->oobd_local) {
   1efa2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
   1efa6:	b143      	cbz	r3, 1efba <compute_and_check_and_send_periph_dhcheck+0x136>
			memcpy(r, smp->oobd_local->r, sizeof(r));
   1efa8:	f10d 0c10 	add.w	ip, sp, #16
   1efac:	6818      	ldr	r0, [r3, #0]
   1efae:	6859      	ldr	r1, [r3, #4]
   1efb0:	689a      	ldr	r2, [r3, #8]
   1efb2:	68db      	ldr	r3, [r3, #12]
   1efb4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1efb8:	e7a6      	b.n	1ef08 <compute_and_check_and_send_periph_dhcheck+0x84>
			memset(r, 0, sizeof(r));
   1efba:	2300      	movs	r3, #0
   1efbc:	9304      	str	r3, [sp, #16]
   1efbe:	9305      	str	r3, [sp, #20]
   1efc0:	9306      	str	r3, [sp, #24]
   1efc2:	9307      	str	r3, [sp, #28]
   1efc4:	e7a0      	b.n	1ef08 <compute_and_check_and_send_periph_dhcheck+0x84>
		BT_ERR("Calculate remote DHKey check failed");
   1efc6:	2145      	movs	r1, #69	; 0x45
   1efc8:	4806      	ldr	r0, [pc, #24]	; (1efe4 <compute_and_check_and_send_periph_dhcheck+0x160>)
   1efca:	f00c f86f 	bl	2b0ac <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1efce:	2008      	movs	r0, #8
   1efd0:	e7c8      	b.n	1ef64 <compute_and_check_and_send_periph_dhcheck+0xe0>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   1efd2:	200b      	movs	r0, #11
   1efd4:	e7c6      	b.n	1ef64 <compute_and_check_and_send_periph_dhcheck+0xe0>
   1efd6:	bf00      	nop
   1efd8:	00033e4c 	.word	0x00033e4c
   1efdc:	00033f48 	.word	0x00033f48
   1efe0:	00033f64 	.word	0x00033f64
   1efe4:	00033f8c 	.word	0x00033f8c

0001efe8 <legacy_distribute_keys>:
{
   1efe8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1efea:	b089      	sub	sp, #36	; 0x24
	struct bt_conn *conn = smp->chan.chan.conn;
   1efec:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
	struct bt_keys *keys = conn->le.keys;
   1eff0:	f8d3 50bc 	ldr.w	r5, [r3, #188]	; 0xbc
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
   1eff4:	f890 30e8 	ldrb.w	r3, [r0, #232]	; 0xe8
   1eff8:	f013 0f01 	tst.w	r3, #1
   1effc:	d101      	bne.n	1f002 <legacy_distribute_keys+0x1a>
}
   1effe:	b009      	add	sp, #36	; 0x24
   1f000:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f002:	4604      	mov	r4, r0
		if (bt_rand((void *)&rand, sizeof(rand))) {
   1f004:	211a      	movs	r1, #26
   1f006:	a801      	add	r0, sp, #4
   1f008:	f003 ffda 	bl	22fc0 <bt_rand>
   1f00c:	2800      	cmp	r0, #0
   1f00e:	d15a      	bne.n	1f0c6 <legacy_distribute_keys+0xde>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
   1f010:	2210      	movs	r2, #16
   1f012:	2106      	movs	r1, #6
   1f014:	4620      	mov	r0, r4
   1f016:	f00f fa96 	bl	2e546 <smp_create_pdu>
		if (!buf) {
   1f01a:	4607      	mov	r7, r0
   1f01c:	2800      	cmp	r0, #0
   1f01e:	d057      	beq.n	1f0d0 <legacy_distribute_keys+0xe8>
   1f020:	2110      	movs	r1, #16
   1f022:	3008      	adds	r0, #8
   1f024:	f001 fac6 	bl	205b4 <net_buf_simple_add>
   1f028:	4606      	mov	r6, r0
   1f02a:	7b2a      	ldrb	r2, [r5, #12]
   1f02c:	a901      	add	r1, sp, #4
   1f02e:	f011 fe73 	bl	30d18 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
   1f032:	7b28      	ldrb	r0, [r5, #12]
   1f034:	280f      	cmp	r0, #15
   1f036:	d805      	bhi.n	1f044 <legacy_distribute_keys+0x5c>
__ssp_bos_icheck3(memset, void *, int)
   1f038:	f1c0 0210 	rsb	r2, r0, #16
   1f03c:	2100      	movs	r1, #0
   1f03e:	4430      	add	r0, r6
   1f040:	f011 fe8b 	bl	30d5a <memset>
		smp_send(smp, buf, NULL, NULL);
   1f044:	2300      	movs	r3, #0
   1f046:	461a      	mov	r2, r3
   1f048:	4639      	mov	r1, r7
   1f04a:	4620      	mov	r0, r4
   1f04c:	f00f f9d6 	bl	2e3fc <smp_send>
		buf = smp_create_pdu(smp, BT_SMP_CMD_CENTRAL_IDENT,
   1f050:	220a      	movs	r2, #10
   1f052:	2107      	movs	r1, #7
   1f054:	4620      	mov	r0, r4
   1f056:	f00f fa76 	bl	2e546 <smp_create_pdu>
		if (!buf) {
   1f05a:	4606      	mov	r6, r0
   1f05c:	2800      	cmp	r0, #0
   1f05e:	d03c      	beq.n	1f0da <legacy_distribute_keys+0xf2>
   1f060:	210a      	movs	r1, #10
   1f062:	3008      	adds	r0, #8
   1f064:	f001 faa6 	bl	205b4 <net_buf_simple_add>
   1f068:	4603      	mov	r3, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1f06a:	aa05      	add	r2, sp, #20
   1f06c:	ca03      	ldmia	r2!, {r0, r1}
   1f06e:	f8c3 0002 	str.w	r0, [r3, #2]
   1f072:	f8c3 1006 	str.w	r1, [r3, #6]
   1f076:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   1f07a:	801a      	strh	r2, [r3, #0]
		smp_send(smp, buf, smp_ident_sent, NULL);
   1f07c:	2300      	movs	r3, #0
   1f07e:	4a19      	ldr	r2, [pc, #100]	; (1f0e4 <legacy_distribute_keys+0xfc>)
   1f080:	4631      	mov	r1, r6
   1f082:	4620      	mov	r0, r4
   1f084:	f00f f9ba 	bl	2e3fc <smp_send>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1f088:	f3bf 8f5b 	dmb	ish
   1f08c:	6863      	ldr	r3, [r4, #4]
   1f08e:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1f092:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   1f096:	d0b2      	beq.n	1effe <legacy_distribute_keys+0x16>
			bt_keys_add_type(keys, BT_KEYS_PERIPH_LTK);
   1f098:	2101      	movs	r1, #1
   1f09a:	4628      	mov	r0, r5
   1f09c:	f00f fff0 	bl	2f080 <bt_keys_add_type>
   1f0a0:	ac01      	add	r4, sp, #4
   1f0a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1f0a4:	f8c5 004a 	str.w	r0, [r5, #74]	; 0x4a
   1f0a8:	f8c5 104e 	str.w	r1, [r5, #78]	; 0x4e
   1f0ac:	f8c5 2052 	str.w	r2, [r5, #82]	; 0x52
   1f0b0:	f8c5 3056 	str.w	r3, [r5, #86]	; 0x56
   1f0b4:	4623      	mov	r3, r4
   1f0b6:	cb03      	ldmia	r3!, {r0, r1}
   1f0b8:	6428      	str	r0, [r5, #64]	; 0x40
   1f0ba:	6469      	str	r1, [r5, #68]	; 0x44
   1f0bc:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   1f0c0:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
   1f0c4:	e79b      	b.n	1effe <legacy_distribute_keys+0x16>
			BT_ERR("Unable to get random bytes");
   1f0c6:	2145      	movs	r1, #69	; 0x45
   1f0c8:	4807      	ldr	r0, [pc, #28]	; (1f0e8 <legacy_distribute_keys+0x100>)
   1f0ca:	f00b ffef 	bl	2b0ac <z_log_minimal_printk>
			return;
   1f0ce:	e796      	b.n	1effe <legacy_distribute_keys+0x16>
			BT_ERR("Unable to allocate Encrypt Info buffer");
   1f0d0:	2145      	movs	r1, #69	; 0x45
   1f0d2:	4806      	ldr	r0, [pc, #24]	; (1f0ec <legacy_distribute_keys+0x104>)
   1f0d4:	f00b ffea 	bl	2b0ac <z_log_minimal_printk>
			return;
   1f0d8:	e791      	b.n	1effe <legacy_distribute_keys+0x16>
			BT_ERR("Unable to allocate Central Ident buffer");
   1f0da:	2145      	movs	r1, #69	; 0x45
   1f0dc:	4804      	ldr	r0, [pc, #16]	; (1f0f0 <legacy_distribute_keys+0x108>)
   1f0de:	f00b ffe5 	bl	2b0ac <z_log_minimal_printk>
			return;
   1f0e2:	e78c      	b.n	1effe <legacy_distribute_keys+0x16>
   1f0e4:	0002eff5 	.word	0x0002eff5
   1f0e8:	00033fb8 	.word	0x00033fb8
   1f0ec:	00033fd8 	.word	0x00033fd8
   1f0f0:	00034004 	.word	0x00034004

0001f0f4 <bt_smp_distribute_keys>:
{
   1f0f4:	b508      	push	{r3, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   1f0f6:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
	struct bt_keys *keys = conn->le.keys;
   1f0fa:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
	if (!keys) {
   1f0fe:	b14a      	cbz	r2, 1f114 <bt_smp_distribute_keys+0x20>
   1f100:	f3bf 8f5b 	dmb	ish
   1f104:	6843      	ldr	r3, [r0, #4]
   1f106:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1f10a:	f013 0f20 	tst.w	r3, #32
   1f10e:	d00c      	beq.n	1f12a <bt_smp_distribute_keys+0x36>
	return 0;
   1f110:	2000      	movs	r0, #0
}
   1f112:	bd08      	pop	{r3, pc}
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
   1f114:	f103 0090 	add.w	r0, r3, #144	; 0x90
   1f118:	f7f7 fb00 	bl	1671c <bt_addr_le_str_real>
   1f11c:	4602      	mov	r2, r0
   1f11e:	2145      	movs	r1, #69	; 0x45
   1f120:	4804      	ldr	r0, [pc, #16]	; (1f134 <bt_smp_distribute_keys+0x40>)
   1f122:	f00b ffc3 	bl	2b0ac <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1f126:	2008      	movs	r0, #8
   1f128:	e7f3      	b.n	1f112 <bt_smp_distribute_keys+0x1e>
		legacy_distribute_keys(smp);
   1f12a:	f7ff ff5d 	bl	1efe8 <legacy_distribute_keys>
	return 0;
   1f12e:	2000      	movs	r0, #0
   1f130:	e7ef      	b.n	1f112 <bt_smp_distribute_keys+0x1e>
   1f132:	bf00      	nop
   1f134:	00034034 	.word	0x00034034

0001f138 <smp_pairing_req>:
{
   1f138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f13c:	4604      	mov	r4, r0
   1f13e:	460d      	mov	r5, r1
	struct bt_conn *conn = smp->chan.chan.conn;
   1f140:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1f144:	f7fe fc4e 	bl	1d9e4 <latch_auth_cb>
	struct bt_smp_pairing *req = (void *)buf->data;
   1f148:	68ad      	ldr	r5, [r5, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   1f14a:	78eb      	ldrb	r3, [r5, #3]
   1f14c:	3b07      	subs	r3, #7
   1f14e:	b2db      	uxtb	r3, r3
   1f150:	2b09      	cmp	r3, #9
   1f152:	f200 80e6 	bhi.w	1f322 <smp_pairing_req+0x1ea>
   1f156:	4607      	mov	r7, r0
	if (!conn->le.keys) {
   1f158:	f8d6 30bc 	ldr.w	r3, [r6, #188]	; 0xbc
   1f15c:	2b00      	cmp	r3, #0
   1f15e:	f000 80b7 	beq.w	1f2d0 <smp_pairing_req+0x198>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   1f162:	f104 0804 	add.w	r8, r4, #4
   1f166:	f3bf 8f5b 	dmb	ish
   1f16a:	6863      	ldr	r3, [r4, #4]
   1f16c:	f3bf 8f5b 	dmb	ish
   1f170:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   1f174:	f000 80b8 	beq.w	1f2e8 <smp_pairing_req+0x1b0>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   1f178:	2301      	movs	r3, #1
   1f17a:	7263      	strb	r3, [r4, #9]
   1f17c:	682b      	ldr	r3, [r5, #0]
   1f17e:	f8c4 300a 	str.w	r3, [r4, #10]
   1f182:	88ab      	ldrh	r3, [r5, #4]
   1f184:	81e3      	strh	r3, [r4, #14]
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   1f186:	2302      	movs	r3, #2
   1f188:	7423      	strb	r3, [r4, #16]
	rsp->auth_req = get_auth(smp, req->auth_req);
   1f18a:	78a9      	ldrb	r1, [r5, #2]
   1f18c:	4620      	mov	r0, r4
   1f18e:	f7fe fc71 	bl	1da74 <get_auth>
   1f192:	74e0      	strb	r0, [r4, #19]
	rsp->io_capability = get_io_capa(smp);
   1f194:	4620      	mov	r0, r4
   1f196:	f7fe fc45 	bl	1da24 <get_io_capa>
   1f19a:	7460      	strb	r0, [r4, #17]
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   1f19c:	4b63      	ldr	r3, [pc, #396]	; (1f32c <smp_pairing_req+0x1f4>)
   1f19e:	781b      	ldrb	r3, [r3, #0]
   1f1a0:	74a3      	strb	r3, [r4, #18]
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   1f1a2:	2310      	movs	r3, #16
   1f1a4:	7523      	strb	r3, [r4, #20]
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
   1f1a6:	792b      	ldrb	r3, [r5, #4]
   1f1a8:	f003 0303 	and.w	r3, r3, #3
   1f1ac:	7563      	strb	r3, [r4, #21]
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   1f1ae:	796b      	ldrb	r3, [r5, #5]
   1f1b0:	f003 0301 	and.w	r3, r3, #1
   1f1b4:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   1f1b6:	7ce3      	ldrb	r3, [r4, #19]
   1f1b8:	f013 0f08 	tst.w	r3, #8
   1f1bc:	d015      	beq.n	1f1ea <smp_pairing_req+0xb2>
	    (req->auth_req & BT_SMP_AUTH_SC)) {
   1f1be:	78ab      	ldrb	r3, [r5, #2]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   1f1c0:	f013 0f08 	tst.w	r3, #8
   1f1c4:	d011      	beq.n	1f1ea <smp_pairing_req+0xb2>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1f1c6:	f3bf 8f5b 	dmb	ish
   1f1ca:	e858 3f00 	ldrex	r3, [r8]
   1f1ce:	f043 0320 	orr.w	r3, r3, #32
   1f1d2:	e848 3200 	strex	r2, r3, [r8]
   1f1d6:	2a00      	cmp	r2, #0
   1f1d8:	d1f7      	bne.n	1f1ca <smp_pairing_req+0x92>
   1f1da:	f3bf 8f5b 	dmb	ish
		rsp->init_key_dist &= RECV_KEYS_SC;
   1f1de:	7d63      	ldrb	r3, [r4, #21]
   1f1e0:	f003 0302 	and.w	r3, r3, #2
   1f1e4:	7563      	strb	r3, [r4, #21]
		rsp->resp_key_dist &= SEND_KEYS_SC;
   1f1e6:	2300      	movs	r3, #0
   1f1e8:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   1f1ea:	7ce3      	ldrb	r3, [r4, #19]
   1f1ec:	f013 0f20 	tst.w	r3, #32
   1f1f0:	d00f      	beq.n	1f212 <smp_pairing_req+0xda>
	    (req->auth_req & BT_SMP_AUTH_CT2)) {
   1f1f2:	78ab      	ldrb	r3, [r5, #2]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   1f1f4:	f013 0f20 	tst.w	r3, #32
   1f1f8:	d00b      	beq.n	1f212 <smp_pairing_req+0xda>
   1f1fa:	f3bf 8f5b 	dmb	ish
   1f1fe:	e858 3f00 	ldrex	r3, [r8]
   1f202:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1f206:	e848 3200 	strex	r2, r3, [r8]
   1f20a:	2a00      	cmp	r2, #0
   1f20c:	d1f7      	bne.n	1f1fe <smp_pairing_req+0xc6>
   1f20e:	f3bf 8f5b 	dmb	ish
	smp->local_dist = rsp->resp_key_dist;
   1f212:	7da3      	ldrb	r3, [r4, #22]
   1f214:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist = rsp->init_key_dist;
   1f218:	7d63      	ldrb	r3, [r4, #21]
   1f21a:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   1f21e:	7ce3      	ldrb	r3, [r4, #19]
   1f220:	f013 0f01 	tst.w	r3, #1
   1f224:	d00f      	beq.n	1f246 <smp_pairing_req+0x10e>
	    (req->auth_req & BT_SMP_AUTH_BONDING)) {
   1f226:	78ab      	ldrb	r3, [r5, #2]
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   1f228:	f013 0f01 	tst.w	r3, #1
   1f22c:	d00b      	beq.n	1f246 <smp_pairing_req+0x10e>
   1f22e:	f3bf 8f5b 	dmb	ish
   1f232:	e858 3f00 	ldrex	r3, [r8]
   1f236:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   1f23a:	e848 3200 	strex	r2, r3, [r8]
   1f23e:	2a00      	cmp	r2, #0
   1f240:	d1f7      	bne.n	1f232 <smp_pairing_req+0xfa>
   1f242:	f3bf 8f5b 	dmb	ish
   1f246:	f3bf 8f5b 	dmb	ish
   1f24a:	e858 3f00 	ldrex	r3, [r8]
   1f24e:	f043 0308 	orr.w	r3, r3, #8
   1f252:	e848 3200 	strex	r2, r3, [r8]
   1f256:	2a00      	cmp	r2, #0
   1f258:	d1f7      	bne.n	1f24a <smp_pairing_req+0x112>
   1f25a:	f3bf 8f5b 	dmb	ish
	smp->method = get_pair_method(smp, req->io_capability);
   1f25e:	7829      	ldrb	r1, [r5, #0]
   1f260:	4620      	mov	r0, r4
   1f262:	f7fe fe67 	bl	1df34 <get_pair_method>
   1f266:	7220      	strb	r0, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   1f268:	f8d6 10bc 	ldr.w	r1, [r6, #188]	; 0xbc
   1f26c:	4620      	mov	r0, r4
   1f26e:	f00f fbb7 	bl	2e9e0 <update_keys_check>
   1f272:	2800      	cmp	r0, #0
   1f274:	d057      	beq.n	1f326 <smp_pairing_req+0x1ee>
	err = remote_sec_level_reachable(smp);
   1f276:	4620      	mov	r0, r4
   1f278:	f00f fb88 	bl	2e98c <remote_sec_level_reachable>
	if (err) {
   1f27c:	4605      	mov	r5, r0
   1f27e:	bb20      	cbnz	r0, 1f2ca <smp_pairing_req+0x192>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1f280:	f3bf 8f5b 	dmb	ish
   1f284:	6863      	ldr	r3, [r4, #4]
   1f286:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1f28a:	f013 0f20 	tst.w	r3, #32
   1f28e:	d033      	beq.n	1f2f8 <smp_pairing_req+0x1c0>
	    (DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1f290:	7a25      	ldrb	r5, [r4, #8]
	if (!IS_ENABLED(CONFIG_BT_SMP_SC_PAIR_ONLY) &&
   1f292:	b955      	cbnz	r5, 1f2aa <smp_pairing_req+0x172>
   1f294:	f3bf 8f5b 	dmb	ish
   1f298:	6863      	ldr	r3, [r4, #4]
   1f29a:	f3bf 8f5b 	dmb	ish
	    (DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1f29e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   1f2a2:	d102      	bne.n	1f2aa <smp_pairing_req+0x172>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1f2a4:	b10f      	cbz	r7, 1f2aa <smp_pairing_req+0x172>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   1f2a6:	697b      	ldr	r3, [r7, #20]
   1f2a8:	bb5b      	cbnz	r3, 1f302 <smp_pairing_req+0x1ca>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1f2aa:	f3bf 8f5b 	dmb	ish
   1f2ae:	e854 3f00 	ldrex	r3, [r4]
   1f2b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   1f2b6:	e844 3200 	strex	r2, r3, [r4]
   1f2ba:	2a00      	cmp	r2, #0
   1f2bc:	d1f7      	bne.n	1f2ae <smp_pairing_req+0x176>
   1f2be:	f3bf 8f5b 	dmb	ish
	return send_pairing_rsp(smp);
   1f2c2:	4620      	mov	r0, r4
   1f2c4:	f00f fa12 	bl	2e6ec <send_pairing_rsp>
   1f2c8:	4605      	mov	r5, r0
}
   1f2ca:	4628      	mov	r0, r5
   1f2cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1f2d0:	f106 0190 	add.w	r1, r6, #144	; 0x90
   1f2d4:	7a30      	ldrb	r0, [r6, #8]
   1f2d6:	f000 fbb9 	bl	1fa4c <bt_keys_get_addr>
   1f2da:	f8c6 00bc 	str.w	r0, [r6, #188]	; 0xbc
		if (!conn->le.keys) {
   1f2de:	2800      	cmp	r0, #0
   1f2e0:	f47f af3f 	bne.w	1f162 <smp_pairing_req+0x2a>
			return BT_SMP_ERR_UNSPECIFIED;
   1f2e4:	2508      	movs	r5, #8
   1f2e6:	e7f0      	b.n	1f2ca <smp_pairing_req+0x192>
		int ret = smp_init(smp);
   1f2e8:	4620      	mov	r0, r4
   1f2ea:	f7fe fc83 	bl	1dbf4 <smp_init>
		if (ret) {
   1f2ee:	2800      	cmp	r0, #0
   1f2f0:	f43f af42 	beq.w	1f178 <smp_pairing_req+0x40>
			return ret;
   1f2f4:	b2c5      	uxtb	r5, r0
   1f2f6:	e7e8      	b.n	1f2ca <smp_pairing_req+0x192>
		return legacy_pairing_req(smp);
   1f2f8:	4620      	mov	r0, r4
   1f2fa:	f00f fb00 	bl	2e8fe <legacy_pairing_req>
   1f2fe:	4605      	mov	r5, r0
   1f300:	e7e3      	b.n	1f2ca <smp_pairing_req+0x192>
   1f302:	f3bf 8f5b 	dmb	ish
   1f306:	e858 3f00 	ldrex	r3, [r8]
   1f30a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1f30e:	e848 3200 	strex	r2, r3, [r8]
   1f312:	2a00      	cmp	r2, #0
   1f314:	d1f7      	bne.n	1f306 <smp_pairing_req+0x1ce>
   1f316:	f3bf 8f5b 	dmb	ish
		smp_auth_cb->pairing_confirm(conn);
   1f31a:	697b      	ldr	r3, [r7, #20]
   1f31c:	4630      	mov	r0, r6
   1f31e:	4798      	blx	r3
		return 0;
   1f320:	e7d3      	b.n	1f2ca <smp_pairing_req+0x192>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   1f322:	2506      	movs	r5, #6
   1f324:	e7d1      	b.n	1f2ca <smp_pairing_req+0x192>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1f326:	2503      	movs	r5, #3
   1f328:	e7cf      	b.n	1f2ca <smp_pairing_req+0x192>
   1f32a:	bf00      	nop
   1f32c:	2000376b 	.word	0x2000376b

0001f330 <smp_pairing_complete>:
{
   1f330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f332:	4606      	mov	r6, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1f334:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
	if (!status) {
   1f338:	2900      	cmp	r1, #0
   1f33a:	d035      	beq.n	1f3a8 <smp_pairing_complete+0x78>
   1f33c:	4608      	mov	r0, r1
		enum bt_security_err security_err = security_err_get(status);
   1f33e:	f00e ff8f 	bl	2e260 <security_err_get>
   1f342:	4607      	mov	r7, r0
		if (conn->le.keys &&
   1f344:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   1f348:	b183      	cbz	r3, 1f36c <smp_pairing_complete+0x3c>
		    (!conn->le.keys->enc_size ||
   1f34a:	7b1b      	ldrb	r3, [r3, #12]
		if (conn->le.keys &&
   1f34c:	b13b      	cbz	r3, 1f35e <smp_pairing_complete+0x2e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1f34e:	f3bf 8f5b 	dmb	ish
   1f352:	6873      	ldr	r3, [r6, #4]
   1f354:	f3bf 8f5b 	dmb	ish
		    (!conn->le.keys->enc_size ||
   1f358:	f013 0f04 	tst.w	r3, #4
   1f35c:	d006      	beq.n	1f36c <smp_pairing_complete+0x3c>
			bt_keys_clear(conn->le.keys);
   1f35e:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
   1f362:	f000 fc91 	bl	1fc88 <bt_keys_clear>
			conn->le.keys = NULL;
   1f366:	2300      	movs	r3, #0
   1f368:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
   1f36c:	f3bf 8f5b 	dmb	ish
   1f370:	6873      	ldr	r3, [r6, #4]
   1f372:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1f376:	f013 0f04 	tst.w	r3, #4
   1f37a:	d047      	beq.n	1f40c <smp_pairing_complete+0xdc>
   1f37c:	f3bf 8f5b 	dmb	ish
   1f380:	6873      	ldr	r3, [r6, #4]
   1f382:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1f386:	f013 0f08 	tst.w	r3, #8
   1f38a:	d05f      	beq.n	1f44c <smp_pairing_complete+0x11c>
	return list->head;
   1f38c:	4b35      	ldr	r3, [pc, #212]	; (1f464 <smp_pairing_complete+0x134>)
   1f38e:	681a      	ldr	r2, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   1f390:	2a00      	cmp	r2, #0
   1f392:	d044      	beq.n	1f41e <smp_pairing_complete+0xee>
   1f394:	3a0c      	subs	r2, #12
   1f396:	d044      	beq.n	1f422 <smp_pairing_complete+0xf2>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1f398:	f112 040c 	adds.w	r4, r2, #12
   1f39c:	d046      	beq.n	1f42c <smp_pairing_complete+0xfc>
	return node->next;
   1f39e:	68d4      	ldr	r4, [r2, #12]
   1f3a0:	2c00      	cmp	r4, #0
   1f3a2:	d043      	beq.n	1f42c <smp_pairing_complete+0xfc>
   1f3a4:	3c0c      	subs	r4, #12
   1f3a6:	e041      	b.n	1f42c <smp_pairing_complete+0xfc>
   1f3a8:	f3bf 8f5b 	dmb	ish
   1f3ac:	6843      	ldr	r3, [r0, #4]
   1f3ae:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1f3b2:	f3c3 3740 	ubfx	r7, r3, #13, #1
		if (bond_flag) {
   1f3b6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   1f3ba:	d10b      	bne.n	1f3d4 <smp_pairing_complete+0xa4>
	return list->head;
   1f3bc:	4b29      	ldr	r3, [pc, #164]	; (1f464 <smp_pairing_complete+0x134>)
   1f3be:	681a      	ldr	r2, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   1f3c0:	b16a      	cbz	r2, 1f3de <smp_pairing_complete+0xae>
   1f3c2:	3a0c      	subs	r2, #12
   1f3c4:	d00d      	beq.n	1f3e2 <smp_pairing_complete+0xb2>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1f3c6:	f112 040c 	adds.w	r4, r2, #12
   1f3ca:	d00f      	beq.n	1f3ec <smp_pairing_complete+0xbc>
	return node->next;
   1f3cc:	68d4      	ldr	r4, [r2, #12]
   1f3ce:	b16c      	cbz	r4, 1f3ec <smp_pairing_complete+0xbc>
   1f3d0:	3c0c      	subs	r4, #12
   1f3d2:	e00b      	b.n	1f3ec <smp_pairing_complete+0xbc>
			bt_keys_store(conn->le.keys);
   1f3d4:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
   1f3d8:	f000 fd0e 	bl	1fdf8 <bt_keys_store>
   1f3dc:	e7ee      	b.n	1f3bc <smp_pairing_complete+0x8c>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   1f3de:	4614      	mov	r4, r2
   1f3e0:	e004      	b.n	1f3ec <smp_pairing_complete+0xbc>
   1f3e2:	4614      	mov	r4, r2
   1f3e4:	e002      	b.n	1f3ec <smp_pairing_complete+0xbc>
   1f3e6:	4623      	mov	r3, r4
   1f3e8:	4622      	mov	r2, r4
   1f3ea:	461c      	mov	r4, r3
   1f3ec:	b372      	cbz	r2, 1f44c <smp_pairing_complete+0x11c>
			if (listener->pairing_complete) {
   1f3ee:	6813      	ldr	r3, [r2, #0]
   1f3f0:	b113      	cbz	r3, 1f3f8 <smp_pairing_complete+0xc8>
				listener->pairing_complete(conn, bond_flag);
   1f3f2:	4639      	mov	r1, r7
   1f3f4:	4628      	mov	r0, r5
   1f3f6:	4798      	blx	r3
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   1f3f8:	2c00      	cmp	r4, #0
   1f3fa:	d0f4      	beq.n	1f3e6 <smp_pairing_complete+0xb6>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1f3fc:	f114 030c 	adds.w	r3, r4, #12
   1f400:	d0f2      	beq.n	1f3e8 <smp_pairing_complete+0xb8>
	return node->next;
   1f402:	68e3      	ldr	r3, [r4, #12]
   1f404:	2b00      	cmp	r3, #0
   1f406:	d0ef      	beq.n	1f3e8 <smp_pairing_complete+0xb8>
   1f408:	3b0c      	subs	r3, #12
   1f40a:	e7ed      	b.n	1f3e8 <smp_pairing_complete+0xb8>
			bt_conn_security_changed(conn,
   1f40c:	4638      	mov	r0, r7
   1f40e:	f00e ff5f 	bl	2e2d0 <hci_err_get>
   1f412:	4601      	mov	r1, r0
   1f414:	463a      	mov	r2, r7
   1f416:	4628      	mov	r0, r5
   1f418:	f7fa fe30 	bl	1a07c <bt_conn_security_changed>
   1f41c:	e7ae      	b.n	1f37c <smp_pairing_complete+0x4c>
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   1f41e:	4614      	mov	r4, r2
   1f420:	e004      	b.n	1f42c <smp_pairing_complete+0xfc>
   1f422:	4614      	mov	r4, r2
   1f424:	e002      	b.n	1f42c <smp_pairing_complete+0xfc>
   1f426:	4623      	mov	r3, r4
   1f428:	4622      	mov	r2, r4
   1f42a:	461c      	mov	r4, r3
   1f42c:	b172      	cbz	r2, 1f44c <smp_pairing_complete+0x11c>
				if (listener->pairing_failed) {
   1f42e:	6853      	ldr	r3, [r2, #4]
   1f430:	b113      	cbz	r3, 1f438 <smp_pairing_complete+0x108>
					listener->pairing_failed(conn, security_err);
   1f432:	4639      	mov	r1, r7
   1f434:	4628      	mov	r0, r5
   1f436:	4798      	blx	r3
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   1f438:	2c00      	cmp	r4, #0
   1f43a:	d0f4      	beq.n	1f426 <smp_pairing_complete+0xf6>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1f43c:	f114 030c 	adds.w	r3, r4, #12
   1f440:	d0f2      	beq.n	1f428 <smp_pairing_complete+0xf8>
	return node->next;
   1f442:	68e3      	ldr	r3, [r4, #12]
   1f444:	2b00      	cmp	r3, #0
   1f446:	d0ef      	beq.n	1f428 <smp_pairing_complete+0xf8>
   1f448:	3b0c      	subs	r3, #12
   1f44a:	e7ed      	b.n	1f428 <smp_pairing_complete+0xf8>
	smp_reset(smp);
   1f44c:	4630      	mov	r0, r6
   1f44e:	f00e ff98 	bl	2e382 <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
   1f452:	7a6a      	ldrb	r2, [r5, #9]
   1f454:	7aab      	ldrb	r3, [r5, #10]
   1f456:	429a      	cmp	r2, r3
   1f458:	d100      	bne.n	1f45c <smp_pairing_complete+0x12c>
}
   1f45a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		bt_smp_start_security(conn);
   1f45c:	4628      	mov	r0, r5
   1f45e:	f00f fc87 	bl	2ed70 <bt_smp_start_security>
}
   1f462:	e7fa      	b.n	1f45a <smp_pairing_complete+0x12a>
   1f464:	2000261c 	.word	0x2000261c

0001f468 <bt_smp_recv>:
{
   1f468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   1f46a:	898b      	ldrh	r3, [r1, #12]
   1f46c:	2b00      	cmp	r3, #0
   1f46e:	d046      	beq.n	1f4fe <bt_smp_recv+0x96>
   1f470:	4604      	mov	r4, r0
   1f472:	460d      	mov	r5, r1
   1f474:	f1a0 06ec 	sub.w	r6, r0, #236	; 0xec
	return net_buf_simple_pull_mem(&buf->b, len);
   1f478:	2101      	movs	r1, #1
   1f47a:	f105 0008 	add.w	r0, r5, #8
   1f47e:	f001 f859 	bl	20534 <net_buf_simple_pull_mem>
   1f482:	4607      	mov	r7, r0
   1f484:	f3bf 8f5b 	dmb	ish
   1f488:	f854 3ce8 	ldr.w	r3, [r4, #-232]
   1f48c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1f490:	f013 0f10 	tst.w	r3, #16
   1f494:	d139      	bne.n	1f50a <bt_smp_recv+0xa2>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   1f496:	7802      	ldrb	r2, [r0, #0]
   1f498:	2a0e      	cmp	r2, #14
   1f49a:	d83c      	bhi.n	1f516 <bt_smp_recv+0xae>
	if (!handlers[hdr->code].func) {
   1f49c:	4b30      	ldr	r3, [pc, #192]	; (1f560 <bt_smp_recv+0xf8>)
   1f49e:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
   1f4a2:	2b00      	cmp	r3, #0
   1f4a4:	d03c      	beq.n	1f520 <bt_smp_recv+0xb8>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
   1f4a6:	3cec      	subs	r4, #236	; 0xec
	atomic_val_t mask = ATOMIC_MASK(bit);
   1f4a8:	f002 011f 	and.w	r1, r2, #31
   1f4ac:	2301      	movs	r3, #1
   1f4ae:	408b      	lsls	r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1f4b0:	0952      	lsrs	r2, r2, #5
   1f4b2:	eb04 0482 	add.w	r4, r4, r2, lsl #2
   1f4b6:	43d9      	mvns	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1f4b8:	f3bf 8f5b 	dmb	ish
   1f4bc:	e854 2f00 	ldrex	r2, [r4]
   1f4c0:	ea02 0001 	and.w	r0, r2, r1
   1f4c4:	e844 0c00 	strex	ip, r0, [r4]
   1f4c8:	f1bc 0f00 	cmp.w	ip, #0
   1f4cc:	d1f6      	bne.n	1f4bc <bt_smp_recv+0x54>
   1f4ce:	f3bf 8f5b 	dmb	ish
   1f4d2:	4213      	tst	r3, r2
   1f4d4:	d02d      	beq.n	1f532 <bt_smp_recv+0xca>
	if (buf->len != handlers[hdr->code].expect_len) {
   1f4d6:	89aa      	ldrh	r2, [r5, #12]
   1f4d8:	783b      	ldrb	r3, [r7, #0]
   1f4da:	4921      	ldr	r1, [pc, #132]	; (1f560 <bt_smp_recv+0xf8>)
   1f4dc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1f4e0:	7909      	ldrb	r1, [r1, #4]
   1f4e2:	428a      	cmp	r2, r1
   1f4e4:	d132      	bne.n	1f54c <bt_smp_recv+0xe4>
	err = handlers[hdr->code].func(smp, buf);
   1f4e6:	4a1e      	ldr	r2, [pc, #120]	; (1f560 <bt_smp_recv+0xf8>)
   1f4e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
   1f4ec:	4629      	mov	r1, r5
   1f4ee:	4630      	mov	r0, r6
   1f4f0:	4798      	blx	r3
	if (err) {
   1f4f2:	4601      	mov	r1, r0
   1f4f4:	b138      	cbz	r0, 1f506 <bt_smp_recv+0x9e>
		smp_error(smp, err);
   1f4f6:	4630      	mov	r0, r6
   1f4f8:	f00f fc44 	bl	2ed84 <smp_error>
   1f4fc:	e003      	b.n	1f506 <bt_smp_recv+0x9e>
		BT_ERR("Too small SMP PDU received");
   1f4fe:	2145      	movs	r1, #69	; 0x45
   1f500:	4818      	ldr	r0, [pc, #96]	; (1f564 <bt_smp_recv+0xfc>)
   1f502:	f00b fdd3 	bl	2b0ac <z_log_minimal_printk>
}
   1f506:	2000      	movs	r0, #0
   1f508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		BT_WARN("SMP command (code 0x%02x) received after timeout",
   1f50a:	7802      	ldrb	r2, [r0, #0]
   1f50c:	2157      	movs	r1, #87	; 0x57
   1f50e:	4816      	ldr	r0, [pc, #88]	; (1f568 <bt_smp_recv+0x100>)
   1f510:	f00b fdcc 	bl	2b0ac <z_log_minimal_printk>
		return 0;
   1f514:	e7f7      	b.n	1f506 <bt_smp_recv+0x9e>
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
   1f516:	2157      	movs	r1, #87	; 0x57
   1f518:	4814      	ldr	r0, [pc, #80]	; (1f56c <bt_smp_recv+0x104>)
   1f51a:	f00b fdc7 	bl	2b0ac <z_log_minimal_printk>
		return 0;
   1f51e:	e7f2      	b.n	1f506 <bt_smp_recv+0x9e>
		BT_WARN("Unhandled SMP code 0x%02x", hdr->code);
   1f520:	2157      	movs	r1, #87	; 0x57
   1f522:	4813      	ldr	r0, [pc, #76]	; (1f570 <bt_smp_recv+0x108>)
   1f524:	f00b fdc2 	bl	2b0ac <z_log_minimal_printk>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   1f528:	2107      	movs	r1, #7
   1f52a:	4630      	mov	r0, r6
   1f52c:	f00f fc2a 	bl	2ed84 <smp_error>
		return 0;
   1f530:	e7e9      	b.n	1f506 <bt_smp_recv+0x9e>
		BT_WARN("Unexpected SMP code 0x%02x", hdr->code);
   1f532:	783a      	ldrb	r2, [r7, #0]
   1f534:	2157      	movs	r1, #87	; 0x57
   1f536:	480f      	ldr	r0, [pc, #60]	; (1f574 <bt_smp_recv+0x10c>)
   1f538:	f00b fdb8 	bl	2b0ac <z_log_minimal_printk>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
   1f53c:	783b      	ldrb	r3, [r7, #0]
   1f53e:	2b05      	cmp	r3, #5
   1f540:	d0e1      	beq.n	1f506 <bt_smp_recv+0x9e>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1f542:	2108      	movs	r1, #8
   1f544:	4630      	mov	r0, r6
   1f546:	f00f fc1d 	bl	2ed84 <smp_error>
		return 0;
   1f54a:	e7dc      	b.n	1f506 <bt_smp_recv+0x9e>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1f54c:	2145      	movs	r1, #69	; 0x45
   1f54e:	480a      	ldr	r0, [pc, #40]	; (1f578 <bt_smp_recv+0x110>)
   1f550:	f00b fdac 	bl	2b0ac <z_log_minimal_printk>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   1f554:	210a      	movs	r1, #10
   1f556:	4630      	mov	r0, r6
   1f558:	f00f fc14 	bl	2ed84 <smp_error>
		return 0;
   1f55c:	e7d3      	b.n	1f506 <bt_smp_recv+0x9e>
   1f55e:	bf00      	nop
   1f560:	000341f4 	.word	0x000341f4
   1f564:	00034050 	.word	0x00034050
   1f568:	00034070 	.word	0x00034070
   1f56c:	000340a8 	.word	0x000340a8
   1f570:	000340d0 	.word	0x000340d0
   1f574:	000340f0 	.word	0x000340f0
   1f578:	0003376c 	.word	0x0003376c

0001f57c <bt_smp_pkey_ready>:
{
   1f57c:	b538      	push	{r3, r4, r5, lr}
	sc_public_key = pkey;
   1f57e:	4b13      	ldr	r3, [pc, #76]	; (1f5cc <bt_smp_pkey_ready+0x50>)
   1f580:	6018      	str	r0, [r3, #0]
	if (!pkey) {
   1f582:	b120      	cbz	r0, 1f58e <bt_smp_pkey_ready+0x12>
	z_impl_k_sem_give(sem);
   1f584:	4812      	ldr	r0, [pc, #72]	; (1f5d0 <bt_smp_pkey_ready+0x54>)
   1f586:	f007 f8d1 	bl	2672c <z_impl_k_sem_give>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1f58a:	2400      	movs	r4, #0
   1f58c:	e017      	b.n	1f5be <bt_smp_pkey_ready+0x42>
		BT_WARN("Public key not available");
   1f58e:	2157      	movs	r1, #87	; 0x57
   1f590:	4810      	ldr	r0, [pc, #64]	; (1f5d4 <bt_smp_pkey_ready+0x58>)
   1f592:	f00b fd8b 	bl	2b0ac <z_log_minimal_printk>
		return;
   1f596:	e014      	b.n	1f5c2 <bt_smp_pkey_ready+0x46>
		struct bt_smp *smp = &bt_smp_pool[i];
   1f598:	4d0f      	ldr	r5, [pc, #60]	; (1f5d8 <bt_smp_pkey_ready+0x5c>)
   1f59a:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
   1f59e:	fb03 5504 	mla	r5, r3, r4, r5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1f5a2:	f3bf 8f5b 	dmb	ish
   1f5a6:	686b      	ldr	r3, [r5, #4]
   1f5a8:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   1f5ac:	f013 0f40 	tst.w	r3, #64	; 0x40
   1f5b0:	d004      	beq.n	1f5bc <bt_smp_pkey_ready+0x40>
		err = smp_public_key_periph(smp);
   1f5b2:	4628      	mov	r0, r5
   1f5b4:	f7fe fe74 	bl	1e2a0 <smp_public_key_periph>
		if (err) {
   1f5b8:	4601      	mov	r1, r0
   1f5ba:	b918      	cbnz	r0, 1f5c4 <bt_smp_pkey_ready+0x48>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1f5bc:	3401      	adds	r4, #1
   1f5be:	2c00      	cmp	r4, #0
   1f5c0:	d0ea      	beq.n	1f598 <bt_smp_pkey_ready+0x1c>
}
   1f5c2:	bd38      	pop	{r3, r4, r5, pc}
			smp_error(smp, err);
   1f5c4:	4628      	mov	r0, r5
   1f5c6:	f00f fbdd 	bl	2ed84 <smp_error>
   1f5ca:	e7f7      	b.n	1f5bc <bt_smp_pkey_ready+0x40>
   1f5cc:	200027a8 	.word	0x200027a8
   1f5d0:	200009d8 	.word	0x200009d8
   1f5d4:	00034110 	.word	0x00034110
   1f5d8:	20001bb8 	.word	0x20001bb8

0001f5dc <smp_ident_addr_info>:
{
   1f5dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f5e0:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1f5e2:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   1f5e6:	688d      	ldr	r5, [r1, #8]
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1f5e8:	782b      	ldrb	r3, [r5, #0]
   1f5ea:	b123      	cbz	r3, 1f5f6 <smp_ident_addr_info+0x1a>
	return BT_ADDR_IS_STATIC(&addr->a);
   1f5ec:	79ab      	ldrb	r3, [r5, #6]
   1f5ee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	if (!bt_addr_le_is_identity(&req->addr)) {
   1f5f2:	2bc0      	cmp	r3, #192	; 0xc0
   1f5f4:	d13b      	bne.n	1f66e <smp_ident_addr_info+0x92>
	if (bt_addr_le_cmp(&conn->le.dst, &req->addr) != 0) {
   1f5f6:	f106 0790 	add.w	r7, r6, #144	; 0x90
	return memcmp(a, b, sizeof(*a));
   1f5fa:	2207      	movs	r2, #7
   1f5fc:	4629      	mov	r1, r5
   1f5fe:	4638      	mov	r0, r7
   1f600:	f011 fb7a 	bl	30cf8 <memcmp>
   1f604:	b178      	cbz	r0, 1f626 <smp_ident_addr_info+0x4a>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   1f606:	4629      	mov	r1, r5
   1f608:	7a30      	ldrb	r0, [r6, #8]
   1f60a:	f000 fb1b 	bl	1fc44 <bt_keys_find_addr>
		if (keys) {
   1f60e:	4680      	mov	r8, r0
   1f610:	b148      	cbz	r0, 1f626 <smp_ident_addr_info+0x4a>
			if (!update_keys_check(smp, keys)) {
   1f612:	4601      	mov	r1, r0
   1f614:	4620      	mov	r0, r4
   1f616:	f00f f9e3 	bl	2e9e0 <update_keys_check>
   1f61a:	2800      	cmp	r0, #0
   1f61c:	f000 808a 	beq.w	1f734 <smp_ident_addr_info+0x158>
			bt_keys_clear(keys);
   1f620:	4640      	mov	r0, r8
   1f622:	f000 fb31 	bl	1fc88 <bt_keys_clear>
   1f626:	f3bf 8f5b 	dmb	ish
   1f62a:	6863      	ldr	r3, [r4, #4]
   1f62c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1f630:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   1f634:	d12e      	bne.n	1f694 <smp_ident_addr_info+0xb8>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1f636:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1f63a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   1f63e:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1f642:	f013 0f04 	tst.w	r3, #4
   1f646:	d00b      	beq.n	1f660 <smp_ident_addr_info+0x84>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1f648:	f3bf 8f5b 	dmb	ish
   1f64c:	e854 3f00 	ldrex	r3, [r4]
   1f650:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1f654:	e844 3200 	strex	r2, r3, [r4]
   1f658:	2a00      	cmp	r2, #0
   1f65a:	d1f7      	bne.n	1f64c <smp_ident_addr_info+0x70>
   1f65c:	f3bf 8f5b 	dmb	ish
	if (!smp->local_dist && !smp->remote_dist) {
   1f660:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
   1f664:	2b00      	cmp	r3, #0
   1f666:	d05f      	beq.n	1f728 <smp_ident_addr_info+0x14c>
	return 0;
   1f668:	2000      	movs	r0, #0
}
   1f66a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		BT_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
   1f66e:	4628      	mov	r0, r5
   1f670:	f7f7 f854 	bl	1671c <bt_addr_le_str_real>
   1f674:	4602      	mov	r2, r0
   1f676:	2145      	movs	r1, #69	; 0x45
   1f678:	482f      	ldr	r0, [pc, #188]	; (1f738 <smp_ident_addr_info+0x15c>)
   1f67a:	f00b fd17 	bl	2b0ac <z_log_minimal_printk>
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   1f67e:	f106 0090 	add.w	r0, r6, #144	; 0x90
   1f682:	f7f7 f84b 	bl	1671c <bt_addr_le_str_real>
   1f686:	4602      	mov	r2, r0
   1f688:	2145      	movs	r1, #69	; 0x45
   1f68a:	482c      	ldr	r0, [pc, #176]	; (1f73c <smp_ident_addr_info+0x160>)
   1f68c:	f00b fd0e 	bl	2b0ac <z_log_minimal_printk>
		return BT_SMP_ERR_INVALID_PARAMS;
   1f690:	200a      	movs	r0, #10
   1f692:	e7ea      	b.n	1f66a <smp_ident_addr_info+0x8e>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1f694:	463a      	mov	r2, r7
   1f696:	7a31      	ldrb	r1, [r6, #8]
   1f698:	2002      	movs	r0, #2
   1f69a:	f00f fcf5 	bl	2f088 <bt_keys_get_type>
		if (!keys) {
   1f69e:	4680      	mov	r8, r0
   1f6a0:	b178      	cbz	r0, 1f6c2 <smp_ident_addr_info+0xe6>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1f6a2:	78f3      	ldrb	r3, [r6, #3]
   1f6a4:	b9bb      	cbnz	r3, 1f6d6 <smp_ident_addr_info+0xfa>
			dst = &conn->le.resp_addr;
   1f6a6:	f106 039e 	add.w	r3, r6, #158	; 0x9e
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1f6aa:	781a      	ldrb	r2, [r3, #0]
   1f6ac:	2a01      	cmp	r2, #1
   1f6ae:	d104      	bne.n	1f6ba <smp_ident_addr_info+0xde>
	return BT_ADDR_IS_RPA(&addr->a);
   1f6b0:	799a      	ldrb	r2, [r3, #6]
   1f6b2:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
		if (bt_addr_le_is_rpa(dst)) {
   1f6b6:	2a40      	cmp	r2, #64	; 0x40
   1f6b8:	d010      	beq.n	1f6dc <smp_ident_addr_info+0x100>
		bt_id_add(keys);
   1f6ba:	4640      	mov	r0, r8
   1f6bc:	f7f9 f870 	bl	187a0 <bt_id_add>
   1f6c0:	e7b9      	b.n	1f636 <smp_ident_addr_info+0x5a>
			BT_ERR("Unable to get keys for %s",
   1f6c2:	4638      	mov	r0, r7
   1f6c4:	f7f7 f82a 	bl	1671c <bt_addr_le_str_real>
   1f6c8:	4602      	mov	r2, r0
   1f6ca:	2145      	movs	r1, #69	; 0x45
   1f6cc:	481c      	ldr	r0, [pc, #112]	; (1f740 <smp_ident_addr_info+0x164>)
   1f6ce:	f00b fced 	bl	2b0ac <z_log_minimal_printk>
			return BT_SMP_ERR_UNSPECIFIED;
   1f6d2:	2008      	movs	r0, #8
   1f6d4:	e7c9      	b.n	1f66a <smp_ident_addr_info+0x8e>
			dst = &conn->le.init_addr;
   1f6d6:	f106 0397 	add.w	r3, r6, #151	; 0x97
   1f6da:	e7e6      	b.n	1f6aa <smp_ident_addr_info+0xce>
   1f6dc:	f8d3 2001 	ldr.w	r2, [r3, #1]
   1f6e0:	f8c8 203a 	str.w	r2, [r8, #58]	; 0x3a
   1f6e4:	f8b3 3005 	ldrh.w	r3, [r3, #5]
   1f6e8:	f8a8 303e 	strh.w	r3, [r8, #62]	; 0x3e
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1f6ec:	f896 3090 	ldrb.w	r3, [r6, #144]	; 0x90
   1f6f0:	2b00      	cmp	r3, #0
   1f6f2:	d0e2      	beq.n	1f6ba <smp_ident_addr_info+0xde>
	return BT_ADDR_IS_STATIC(&addr->a);
   1f6f4:	f896 3096 	ldrb.w	r3, [r6, #150]	; 0x96
   1f6f8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   1f6fc:	2bc0      	cmp	r3, #192	; 0xc0
   1f6fe:	d0dc      	beq.n	1f6ba <smp_ident_addr_info+0xde>
   1f700:	682b      	ldr	r3, [r5, #0]
   1f702:	f8c8 3001 	str.w	r3, [r8, #1]
   1f706:	88aa      	ldrh	r2, [r5, #4]
   1f708:	79ab      	ldrb	r3, [r5, #6]
   1f70a:	f8a8 2005 	strh.w	r2, [r8, #5]
   1f70e:	f888 3007 	strb.w	r3, [r8, #7]
   1f712:	682b      	ldr	r3, [r5, #0]
   1f714:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
   1f718:	88aa      	ldrh	r2, [r5, #4]
   1f71a:	79ab      	ldrb	r3, [r5, #6]
   1f71c:	80ba      	strh	r2, [r7, #4]
   1f71e:	71bb      	strb	r3, [r7, #6]
				bt_conn_identity_resolved(conn);
   1f720:	4630      	mov	r0, r6
   1f722:	f7fa fc69 	bl	19ff8 <bt_conn_identity_resolved>
   1f726:	e7c8      	b.n	1f6ba <smp_ident_addr_info+0xde>
		smp_pairing_complete(smp, 0);
   1f728:	2100      	movs	r1, #0
   1f72a:	4620      	mov	r0, r4
   1f72c:	f7ff fe00 	bl	1f330 <smp_pairing_complete>
	return 0;
   1f730:	2000      	movs	r0, #0
   1f732:	e79a      	b.n	1f66a <smp_ident_addr_info+0x8e>
				return BT_SMP_ERR_UNSPECIFIED;
   1f734:	2008      	movs	r0, #8
   1f736:	e798      	b.n	1f66a <smp_ident_addr_info+0x8e>
   1f738:	00034130 	.word	0x00034130
   1f73c:	0003414c 	.word	0x0003414c
   1f740:	00033e8c 	.word	0x00033e8c

0001f744 <smp_central_ident>:
{
   1f744:	b570      	push	{r4, r5, r6, lr}
   1f746:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1f748:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1f74c:	f3bf 8f5b 	dmb	ish
   1f750:	6863      	ldr	r3, [r4, #4]
   1f752:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1f756:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   1f75a:	d118      	bne.n	1f78e <smp_central_ident+0x4a>
	smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
   1f75c:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1f760:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
   1f764:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1f768:	f013 0f02 	tst.w	r3, #2
   1f76c:	d12c      	bne.n	1f7c8 <smp_central_ident+0x84>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1f76e:	f013 0f04 	tst.w	r3, #4
   1f772:	d035      	beq.n	1f7e0 <smp_central_ident+0x9c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1f774:	f3bf 8f5b 	dmb	ish
   1f778:	e854 3f00 	ldrex	r3, [r4]
   1f77c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1f780:	e844 3200 	strex	r2, r3, [r4]
   1f784:	2a00      	cmp	r2, #0
   1f786:	d1f7      	bne.n	1f778 <smp_central_ident+0x34>
   1f788:	f3bf 8f5b 	dmb	ish
}
   1f78c:	e028      	b.n	1f7e0 <smp_central_ident+0x9c>
		struct bt_smp_central_ident *req = (void *)buf->data;
   1f78e:	688d      	ldr	r5, [r1, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1f790:	f100 0690 	add.w	r6, r0, #144	; 0x90
   1f794:	4632      	mov	r2, r6
   1f796:	7a01      	ldrb	r1, [r0, #8]
   1f798:	2004      	movs	r0, #4
   1f79a:	f00f fc75 	bl	2f088 <bt_keys_get_type>
		if (!keys) {
   1f79e:	b148      	cbz	r0, 1f7b4 <smp_central_ident+0x70>
   1f7a0:	462a      	mov	r2, r5
   1f7a2:	f832 1b02 	ldrh.w	r1, [r2], #2
   1f7a6:	8301      	strh	r1, [r0, #24]
   1f7a8:	f8d5 1002 	ldr.w	r1, [r5, #2]
   1f7ac:	6852      	ldr	r2, [r2, #4]
   1f7ae:	6101      	str	r1, [r0, #16]
   1f7b0:	6142      	str	r2, [r0, #20]
   1f7b2:	e7d3      	b.n	1f75c <smp_central_ident+0x18>
			BT_ERR("Unable to get keys for %s",
   1f7b4:	4630      	mov	r0, r6
   1f7b6:	f7f6 ffb1 	bl	1671c <bt_addr_le_str_real>
   1f7ba:	4602      	mov	r2, r0
   1f7bc:	2145      	movs	r1, #69	; 0x45
   1f7be:	480e      	ldr	r0, [pc, #56]	; (1f7f8 <smp_central_ident+0xb4>)
   1f7c0:	f00b fc74 	bl	2b0ac <z_log_minimal_printk>
			return BT_SMP_ERR_UNSPECIFIED;
   1f7c4:	2008      	movs	r0, #8
   1f7c6:	e00f      	b.n	1f7e8 <smp_central_ident+0xa4>
   1f7c8:	f3bf 8f5b 	dmb	ish
   1f7cc:	e854 3f00 	ldrex	r3, [r4]
   1f7d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1f7d4:	e844 3200 	strex	r2, r3, [r4]
   1f7d8:	2a00      	cmp	r2, #0
   1f7da:	d1f7      	bne.n	1f7cc <smp_central_ident+0x88>
   1f7dc:	f3bf 8f5b 	dmb	ish
	if (!smp->local_dist && !smp->remote_dist) {
   1f7e0:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
   1f7e4:	b10b      	cbz	r3, 1f7ea <smp_central_ident+0xa6>
	return 0;
   1f7e6:	2000      	movs	r0, #0
}
   1f7e8:	bd70      	pop	{r4, r5, r6, pc}
		smp_pairing_complete(smp, 0);
   1f7ea:	2100      	movs	r1, #0
   1f7ec:	4620      	mov	r0, r4
   1f7ee:	f7ff fd9f 	bl	1f330 <smp_pairing_complete>
	return 0;
   1f7f2:	2000      	movs	r0, #0
   1f7f4:	e7f8      	b.n	1f7e8 <smp_central_ident+0xa4>
   1f7f6:	bf00      	nop
   1f7f8:	00033e8c 	.word	0x00033e8c

0001f7fc <smp_pairing_failed>:
{
   1f7fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f7fe:	4604      	mov	r4, r0
   1f800:	460e      	mov	r6, r1
	struct bt_conn *conn = smp->chan.chan.conn;
   1f802:	f8d0 70ec 	ldr.w	r7, [r0, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1f806:	f7fe f8ed 	bl	1d9e4 <latch_auth_cb>
   1f80a:	4605      	mov	r5, r0
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   1f80c:	68b6      	ldr	r6, [r6, #8]
	BT_ERR("reason 0x%x", req->reason);
   1f80e:	7832      	ldrb	r2, [r6, #0]
   1f810:	2145      	movs	r1, #69	; 0x45
   1f812:	4817      	ldr	r0, [pc, #92]	; (1f870 <smp_pairing_failed+0x74>)
   1f814:	f00b fc4a 	bl	2b0ac <z_log_minimal_printk>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1f818:	1d23      	adds	r3, r4, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1f81a:	f3bf 8f5b 	dmb	ish
   1f81e:	e853 2f00 	ldrex	r2, [r3]
   1f822:	f422 6180 	bic.w	r1, r2, #1024	; 0x400
   1f826:	e843 1000 	strex	r0, r1, [r3]
   1f82a:	2800      	cmp	r0, #0
   1f82c:	d1f7      	bne.n	1f81e <smp_pairing_failed+0x22>
   1f82e:	f3bf 8f5b 	dmb	ish
   1f832:	f412 6f80 	tst.w	r2, #1024	; 0x400
   1f836:	d005      	beq.n	1f844 <smp_pairing_failed+0x48>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   1f838:	b19d      	cbz	r5, 1f862 <smp_pairing_failed+0x66>
   1f83a:	692b      	ldr	r3, [r5, #16]
   1f83c:	b18b      	cbz	r3, 1f862 <smp_pairing_failed+0x66>
			smp_auth_cb->cancel(conn);
   1f83e:	4638      	mov	r0, r7
   1f840:	4798      	blx	r3
   1f842:	e00e      	b.n	1f862 <smp_pairing_failed+0x66>
   1f844:	f3bf 8f5b 	dmb	ish
   1f848:	e853 2f00 	ldrex	r2, [r3]
   1f84c:	f422 6100 	bic.w	r1, r2, #2048	; 0x800
   1f850:	e843 1000 	strex	r0, r1, [r3]
   1f854:	2800      	cmp	r0, #0
   1f856:	d1f7      	bne.n	1f848 <smp_pairing_failed+0x4c>
   1f858:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1f85c:	f412 6f00 	tst.w	r2, #2048	; 0x800
   1f860:	d1ea      	bne.n	1f838 <smp_pairing_failed+0x3c>
	smp_pairing_complete(smp, req->reason);
   1f862:	7831      	ldrb	r1, [r6, #0]
   1f864:	4620      	mov	r0, r4
   1f866:	f7ff fd63 	bl	1f330 <smp_pairing_complete>
}
   1f86a:	2000      	movs	r0, #0
   1f86c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f86e:	bf00      	nop
   1f870:	0003415c 	.word	0x0003415c

0001f874 <smp_check_complete>:
	if (conn->type == BT_CONN_TYPE_LE) {
   1f874:	7883      	ldrb	r3, [r0, #2]
   1f876:	2b01      	cmp	r3, #1
   1f878:	d000      	beq.n	1f87c <smp_check_complete+0x8>
   1f87a:	4770      	bx	lr
{
   1f87c:	b570      	push	{r4, r5, r6, lr}
   1f87e:	460c      	mov	r4, r1
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   1f880:	2106      	movs	r1, #6
   1f882:	f00d fa59 	bl	2cd38 <bt_l2cap_le_lookup_tx_cid>
		__ASSERT(chan, "No SMP channel found");
   1f886:	4605      	mov	r5, r0
   1f888:	b158      	cbz	r0, 1f8a2 <smp_check_complete+0x2e>
		smp = CONTAINER_OF(chan, struct bt_smp, chan);
   1f88a:	f1a5 00ec 	sub.w	r0, r5, #236	; 0xec
		smp->local_dist &= ~dist_complete;
   1f88e:	f815 1c04 	ldrb.w	r1, [r5, #-4]
   1f892:	ea21 0104 	bic.w	r1, r1, r4
   1f896:	f805 1c04 	strb.w	r1, [r5, #-4]
		if (!smp->local_dist && !smp->remote_dist) {
   1f89a:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   1f89e:	b16b      	cbz	r3, 1f8bc <smp_check_complete+0x48>
}
   1f8a0:	bd70      	pop	{r4, r5, r6, pc}
		__ASSERT(chan, "No SMP channel found");
   1f8a2:	4e08      	ldr	r6, [pc, #32]	; (1f8c4 <smp_check_complete+0x50>)
   1f8a4:	f44f 7250 	mov.w	r2, #832	; 0x340
   1f8a8:	4631      	mov	r1, r6
   1f8aa:	4807      	ldr	r0, [pc, #28]	; (1f8c8 <smp_check_complete+0x54>)
   1f8ac:	f00b fbef 	bl	2b08e <assert_print>
   1f8b0:	f44f 7150 	mov.w	r1, #832	; 0x340
   1f8b4:	4630      	mov	r0, r6
   1f8b6:	f00b fbe3 	bl	2b080 <assert_post_action>
   1f8ba:	e7e6      	b.n	1f88a <smp_check_complete+0x16>
			smp_pairing_complete(smp, 0);
   1f8bc:	2100      	movs	r1, #0
   1f8be:	f7ff fd37 	bl	1f330 <smp_pairing_complete>
		return;
   1f8c2:	e7ed      	b.n	1f8a0 <smp_check_complete+0x2c>
   1f8c4:	00034170 	.word	0x00034170
   1f8c8:	000318f8 	.word	0x000318f8

0001f8cc <smp_timeout>:
{
   1f8cc:	b538      	push	{r3, r4, r5, lr}
   1f8ce:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(work, struct bt_smp, work);
   1f8d0:	f5a0 75c0 	sub.w	r5, r0, #384	; 0x180
	BT_ERR("SMP Timeout");
   1f8d4:	2145      	movs	r1, #69	; 0x45
   1f8d6:	480b      	ldr	r0, [pc, #44]	; (1f904 <smp_timeout+0x38>)
   1f8d8:	f00b fbe8 	bl	2b0ac <z_log_minimal_printk>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   1f8dc:	2108      	movs	r1, #8
   1f8de:	4628      	mov	r0, r5
   1f8e0:	f7ff fd26 	bl	1f330 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1f8e4:	f5a4 74be 	sub.w	r4, r4, #380	; 0x17c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1f8e8:	f3bf 8f5b 	dmb	ish
   1f8ec:	e854 3f00 	ldrex	r3, [r4]
   1f8f0:	f043 0310 	orr.w	r3, r3, #16
   1f8f4:	e844 3200 	strex	r2, r3, [r4]
   1f8f8:	2a00      	cmp	r2, #0
   1f8fa:	d1f7      	bne.n	1f8ec <smp_timeout+0x20>
   1f8fc:	f3bf 8f5b 	dmb	ish
}
   1f900:	bd38      	pop	{r3, r4, r5, pc}
   1f902:	bf00      	nop
   1f904:	000341a0 	.word	0x000341a0

0001f908 <bt_smp_update_keys>:
{
   1f908:	b570      	push	{r4, r5, r6, lr}
   1f90a:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   1f90c:	f7fe f82e 	bl	1d96c <smp_chan_get>
	if (!smp) {
   1f910:	2800      	cmp	r0, #0
   1f912:	d05b      	beq.n	1f9cc <bt_smp_update_keys+0xc4>
   1f914:	4605      	mov	r5, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1f916:	f3bf 8f5b 	dmb	ish
   1f91a:	6843      	ldr	r3, [r0, #4]
   1f91c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1f920:	f013 0f08 	tst.w	r3, #8
   1f924:	d052      	beq.n	1f9cc <bt_smp_update_keys+0xc4>
	if (conn->le.keys) {
   1f926:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1f92a:	b108      	cbz	r0, 1f930 <bt_smp_update_keys+0x28>
		bt_keys_clear(conn->le.keys);
   1f92c:	f000 f9ac 	bl	1fc88 <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1f930:	f104 0690 	add.w	r6, r4, #144	; 0x90
   1f934:	4631      	mov	r1, r6
   1f936:	7a20      	ldrb	r0, [r4, #8]
   1f938:	f000 f888 	bl	1fa4c <bt_keys_get_addr>
   1f93c:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	if (!conn->le.keys) {
   1f940:	b1c8      	cbz	r0, 1f976 <bt_smp_update_keys+0x6e>
   1f942:	f3bf 8f5b 	dmb	ish
   1f946:	686b      	ldr	r3, [r5, #4]
   1f948:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   1f94c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
   1f950:	d005      	beq.n	1f95e <bt_smp_update_keys+0x56>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   1f952:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
   1f956:	7b53      	ldrb	r3, [r2, #13]
   1f958:	f043 0302 	orr.w	r3, r3, #2
   1f95c:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   1f95e:	7a2b      	ldrb	r3, [r5, #8]
   1f960:	2b03      	cmp	r3, #3
   1f962:	d815      	bhi.n	1f990 <bt_smp_update_keys+0x88>
   1f964:	b25b      	sxtb	r3, r3
   1f966:	b9bb      	cbnz	r3, 1f998 <bt_smp_update_keys+0x90>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1f968:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
   1f96c:	7b53      	ldrb	r3, [r2, #13]
   1f96e:	f023 0301 	bic.w	r3, r3, #1
   1f972:	7353      	strb	r3, [r2, #13]
		break;
   1f974:	e016      	b.n	1f9a4 <bt_smp_update_keys+0x9c>
		BT_ERR("Unable to get keys for %s",
   1f976:	4630      	mov	r0, r6
   1f978:	f7f6 fed0 	bl	1671c <bt_addr_le_str_real>
   1f97c:	4602      	mov	r2, r0
   1f97e:	2145      	movs	r1, #69	; 0x45
   1f980:	482a      	ldr	r0, [pc, #168]	; (1fa2c <bt_smp_update_keys+0x124>)
   1f982:	f00b fb93 	bl	2b0ac <z_log_minimal_printk>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1f986:	2108      	movs	r1, #8
   1f988:	4628      	mov	r0, r5
   1f98a:	f00f f9fb 	bl	2ed84 <smp_error>
		return;
   1f98e:	e01d      	b.n	1f9cc <bt_smp_update_keys+0xc4>
	switch (smp->method) {
   1f990:	3b05      	subs	r3, #5
   1f992:	b2db      	uxtb	r3, r3
   1f994:	2b01      	cmp	r3, #1
   1f996:	d8e7      	bhi.n	1f968 <bt_smp_update_keys+0x60>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   1f998:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
   1f99c:	7b53      	ldrb	r3, [r2, #13]
   1f99e:	f043 0301 	orr.w	r3, r3, #1
   1f9a2:	7353      	strb	r3, [r2, #13]
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   1f9a4:	f8d4 60bc 	ldr.w	r6, [r4, #188]	; 0xbc
   1f9a8:	4628      	mov	r0, r5
   1f9aa:	f00e fc8a 	bl	2e2c2 <get_encryption_key_size>
   1f9ae:	7330      	strb	r0, [r6, #12]
   1f9b0:	f3bf 8f5b 	dmb	ish
   1f9b4:	686b      	ldr	r3, [r5, #4]
   1f9b6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1f9ba:	f013 0f20 	tst.w	r3, #32
   1f9be:	d106      	bne.n	1f9ce <bt_smp_update_keys+0xc6>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   1f9c0:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
   1f9c4:	7b53      	ldrb	r3, [r2, #13]
   1f9c6:	f023 0310 	bic.w	r3, r3, #16
   1f9ca:	7353      	strb	r3, [r2, #13]
}
   1f9cc:	bd70      	pop	{r4, r5, r6, pc}
		conn->le.keys->flags |= BT_KEYS_SC;
   1f9ce:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
   1f9d2:	7b53      	ldrb	r3, [r2, #13]
   1f9d4:	f043 0310 	orr.w	r3, r3, #16
   1f9d8:	7353      	strb	r3, [r2, #13]
   1f9da:	f3bf 8f5b 	dmb	ish
   1f9de:	686b      	ldr	r3, [r5, #4]
   1f9e0:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1f9e4:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   1f9e8:	d0f0      	beq.n	1f9cc <bt_smp_update_keys+0xc4>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   1f9ea:	2120      	movs	r1, #32
   1f9ec:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1f9f0:	f00f fb46 	bl	2f080 <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
   1f9f4:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   1f9f8:	f8d5 6047 	ldr.w	r6, [r5, #71]	; 0x47
   1f9fc:	f8d5 004b 	ldr.w	r0, [r5, #75]	; 0x4b
   1fa00:	f8d5 104f 	ldr.w	r1, [r5, #79]	; 0x4f
   1fa04:	f8d5 2053 	ldr.w	r2, [r5, #83]	; 0x53
   1fa08:	f8c3 601a 	str.w	r6, [r3, #26]
   1fa0c:	f8c3 001e 	str.w	r0, [r3, #30]
   1fa10:	f8c3 1022 	str.w	r1, [r3, #34]	; 0x22
   1fa14:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26
			(void)memset(conn->le.keys->ltk.rand, 0,
   1fa18:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
__ssp_bos_icheck3(memset, void *, int)
   1fa1c:	2300      	movs	r3, #0
   1fa1e:	6113      	str	r3, [r2, #16]
   1fa20:	6153      	str	r3, [r2, #20]
			(void)memset(conn->le.keys->ltk.ediv, 0,
   1fa22:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
   1fa26:	8313      	strh	r3, [r2, #24]
   1fa28:	e7d0      	b.n	1f9cc <bt_smp_update_keys+0xc4>
   1fa2a:	bf00      	nop
   1fa2c:	00033e8c 	.word	0x00033e8c

0001fa30 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   1fa30:	b508      	push	{r3, lr}
	static struct bt_pub_key_cb pub_key_cb = {
		.func           = bt_smp_pkey_ready,
	};

	sc_supported = le_sc_supported();
   1fa32:	f7fd ff8f 	bl	1d954 <le_sc_supported>
   1fa36:	4b03      	ldr	r3, [pc, #12]	; (1fa44 <bt_smp_init+0x14>)
   1fa38:	7018      	strb	r0, [r3, #0]
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   1fa3a:	4803      	ldr	r0, [pc, #12]	; (1fa48 <bt_smp_init+0x18>)
   1fa3c:	f7f9 fcd8 	bl	193f0 <bt_pub_key_gen>
	}

	return smp_self_test();
}
   1fa40:	2000      	movs	r0, #0
   1fa42:	bd08      	pop	{r3, pc}
   1fa44:	2000376c 	.word	0x2000376c
   1fa48:	200007a8 	.word	0x200007a8

0001fa4c <bt_keys_get_addr>:
	return kdata.in_use;
}
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
   1fa4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fa50:	b082      	sub	sp, #8
   1fa52:	4606      	mov	r6, r0
   1fa54:	460f      	mov	r7, r1
	struct bt_keys *keys;
	int i;
	size_t first_free_slot = ARRAY_SIZE(key_pool);
   1fa56:	2501      	movs	r5, #1

	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1fa58:	2400      	movs	r4, #0
   1fa5a:	b134      	cbz	r4, 1fa6a <bt_keys_get_addr+0x1e>
			first_free_slot = oldest - &key_pool[0];
		}
	}

#endif  /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */
	if (first_free_slot < ARRAY_SIZE(key_pool)) {
   1fa5c:	b365      	cbz	r5, 1fab8 <bt_keys_get_addr+0x6c>
		return keys;
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
   1fa5e:	f04f 0800 	mov.w	r8, #0
}
   1fa62:	4640      	mov	r0, r8
   1fa64:	b002      	add	sp, #8
   1fa66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		keys = &key_pool[i];
   1fa6a:	4a1c      	ldr	r2, [pc, #112]	; (1fadc <bt_keys_get_addr+0x90>)
   1fa6c:	235c      	movs	r3, #92	; 0x5c
   1fa6e:	fb04 f303 	mul.w	r3, r4, r3
   1fa72:	eb02 0803 	add.w	r8, r2, r3
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   1fa76:	5cd3      	ldrb	r3, [r2, r3]
   1fa78:	42b3      	cmp	r3, r6
   1fa7a:	d003      	beq.n	1fa84 <bt_keys_get_addr+0x38>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
   1fa7c:	2d01      	cmp	r5, #1
   1fa7e:	d00a      	beq.n	1fa96 <bt_keys_get_addr+0x4a>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1fa80:	3401      	adds	r4, #1
   1fa82:	e7ea      	b.n	1fa5a <bt_keys_get_addr+0xe>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   1fa84:	4640      	mov	r0, r8
	return memcmp(a, b, sizeof(*a));
   1fa86:	2207      	movs	r2, #7
   1fa88:	4639      	mov	r1, r7
   1fa8a:	3001      	adds	r0, #1
   1fa8c:	f011 f934 	bl	30cf8 <memcmp>
   1fa90:	2800      	cmp	r0, #0
   1fa92:	d1f3      	bne.n	1fa7c <bt_keys_get_addr+0x30>
   1fa94:	e7e5      	b.n	1fa62 <bt_keys_get_addr+0x16>
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
   1fa96:	4811      	ldr	r0, [pc, #68]	; (1fadc <bt_keys_get_addr+0x90>)
   1fa98:	235c      	movs	r3, #92	; 0x5c
   1fa9a:	fb03 0004 	mla	r0, r3, r4, r0
   1fa9e:	2300      	movs	r3, #0
   1faa0:	9300      	str	r3, [sp, #0]
   1faa2:	f8cd 3003 	str.w	r3, [sp, #3]
   1faa6:	2207      	movs	r2, #7
   1faa8:	4669      	mov	r1, sp
   1faaa:	3001      	adds	r0, #1
   1faac:	f011 f924 	bl	30cf8 <memcmp>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
   1fab0:	2800      	cmp	r0, #0
   1fab2:	d1e5      	bne.n	1fa80 <bt_keys_get_addr+0x34>
			first_free_slot = i;
   1fab4:	4625      	mov	r5, r4
   1fab6:	e7e3      	b.n	1fa80 <bt_keys_get_addr+0x34>
		keys = &key_pool[first_free_slot];
   1fab8:	4b08      	ldr	r3, [pc, #32]	; (1fadc <bt_keys_get_addr+0x90>)
   1faba:	225c      	movs	r2, #92	; 0x5c
   1fabc:	fb02 f505 	mul.w	r5, r2, r5
   1fac0:	eb03 0805 	add.w	r8, r3, r5
		keys->id = id;
   1fac4:	555e      	strb	r6, [r3, r5]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1fac6:	683b      	ldr	r3, [r7, #0]
   1fac8:	f8c8 3001 	str.w	r3, [r8, #1]
   1facc:	88ba      	ldrh	r2, [r7, #4]
   1face:	79bb      	ldrb	r3, [r7, #6]
   1fad0:	f8a8 2005 	strh.w	r2, [r8, #5]
   1fad4:	f888 3007 	strb.w	r3, [r8, #7]
}
   1fad8:	e7c3      	b.n	1fa62 <bt_keys_get_addr+0x16>
   1fada:	bf00      	nop
   1fadc:	200027ac 	.word	0x200027ac

0001fae0 <bt_keys_foreach>:
	}
}

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
   1fae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fae2:	4605      	mov	r5, r0
   1fae4:	460f      	mov	r7, r1
   1fae6:	4616      	mov	r6, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1fae8:	2400      	movs	r4, #0
   1faea:	b104      	cbz	r4, 1faee <bt_keys_foreach+0xe>
		if ((key_pool[i].keys & type)) {
			func(&key_pool[i], data);
		}
	}
}
   1faec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((key_pool[i].keys & type)) {
   1faee:	4b07      	ldr	r3, [pc, #28]	; (1fb0c <bt_keys_foreach+0x2c>)
   1faf0:	225c      	movs	r2, #92	; 0x5c
   1faf2:	fb02 3304 	mla	r3, r2, r4, r3
   1faf6:	89db      	ldrh	r3, [r3, #14]
   1faf8:	422b      	tst	r3, r5
   1fafa:	d004      	beq.n	1fb06 <bt_keys_foreach+0x26>
			func(&key_pool[i], data);
   1fafc:	4631      	mov	r1, r6
   1fafe:	4b03      	ldr	r3, [pc, #12]	; (1fb0c <bt_keys_foreach+0x2c>)
   1fb00:	fb02 3004 	mla	r0, r2, r4, r3
   1fb04:	47b8      	blx	r7
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1fb06:	3401      	adds	r4, #1
   1fb08:	e7ef      	b.n	1faea <bt_keys_foreach+0xa>
   1fb0a:	bf00      	nop
   1fb0c:	200027ac 	.word	0x200027ac

0001fb10 <keys_commit>:
{
	bt_id_add(keys);
}

static int keys_commit(void)
{
   1fb10:	b508      	push	{r3, lr}
	 * the keys were already removed.
	 */
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && IS_ENABLED(CONFIG_BT_PRIVACY)) {
		bt_keys_foreach(BT_KEYS_ALL, id_add, NULL);
	} else {
		bt_keys_foreach(BT_KEYS_IRK, id_add, NULL);
   1fb12:	2200      	movs	r2, #0
   1fb14:	4902      	ldr	r1, [pc, #8]	; (1fb20 <keys_commit+0x10>)
   1fb16:	2002      	movs	r0, #2
   1fb18:	f7ff ffe2 	bl	1fae0 <bt_keys_foreach>
	}

	return 0;
}
   1fb1c:	2000      	movs	r0, #0
   1fb1e:	bd08      	pop	{r3, pc}
   1fb20:	0002f079 	.word	0x0002f079

0001fb24 <bt_keys_find>:
{
   1fb24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fb26:	4607      	mov	r7, r0
   1fb28:	460e      	mov	r6, r1
   1fb2a:	4615      	mov	r5, r2
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1fb2c:	2400      	movs	r4, #0
   1fb2e:	b10c      	cbz	r4, 1fb34 <bt_keys_find+0x10>
	return NULL;
   1fb30:	2000      	movs	r0, #0
}
   1fb32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1fb34:	4b0f      	ldr	r3, [pc, #60]	; (1fb74 <bt_keys_find+0x50>)
   1fb36:	225c      	movs	r2, #92	; 0x5c
   1fb38:	fb02 3304 	mla	r3, r2, r4, r3
   1fb3c:	89db      	ldrh	r3, [r3, #14]
   1fb3e:	421f      	tst	r7, r3
   1fb40:	d006      	beq.n	1fb50 <bt_keys_find+0x2c>
   1fb42:	4613      	mov	r3, r2
   1fb44:	fb04 f303 	mul.w	r3, r4, r3
   1fb48:	4a0a      	ldr	r2, [pc, #40]	; (1fb74 <bt_keys_find+0x50>)
   1fb4a:	5cd3      	ldrb	r3, [r2, r3]
   1fb4c:	429e      	cmp	r6, r3
   1fb4e:	d001      	beq.n	1fb54 <bt_keys_find+0x30>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1fb50:	3401      	adds	r4, #1
   1fb52:	e7ec      	b.n	1fb2e <bt_keys_find+0xa>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
   1fb54:	235c      	movs	r3, #92	; 0x5c
   1fb56:	fb03 2004 	mla	r0, r3, r4, r2
	return memcmp(a, b, sizeof(*a));
   1fb5a:	2207      	movs	r2, #7
   1fb5c:	4629      	mov	r1, r5
   1fb5e:	3001      	adds	r0, #1
   1fb60:	f011 f8ca 	bl	30cf8 <memcmp>
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1fb64:	2800      	cmp	r0, #0
   1fb66:	d1f3      	bne.n	1fb50 <bt_keys_find+0x2c>
			return &key_pool[i];
   1fb68:	4802      	ldr	r0, [pc, #8]	; (1fb74 <bt_keys_find+0x50>)
   1fb6a:	235c      	movs	r3, #92	; 0x5c
   1fb6c:	fb03 0004 	mla	r0, r3, r4, r0
   1fb70:	e7df      	b.n	1fb32 <bt_keys_find+0xe>
   1fb72:	bf00      	nop
   1fb74:	200027ac 	.word	0x200027ac

0001fb78 <bt_keys_find_irk>:
{
   1fb78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1fb7a:	780b      	ldrb	r3, [r1, #0]
   1fb7c:	2b01      	cmp	r3, #1
   1fb7e:	d15d      	bne.n	1fc3c <bt_keys_find_irk+0xc4>
   1fb80:	4606      	mov	r6, r0
   1fb82:	460c      	mov	r4, r1
	return BT_ADDR_IS_RPA(&addr->a);
   1fb84:	798b      	ldrb	r3, [r1, #6]
   1fb86:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	if (!bt_addr_le_is_rpa(addr)) {
   1fb8a:	2b40      	cmp	r3, #64	; 0x40
   1fb8c:	d105      	bne.n	1fb9a <bt_keys_find_irk+0x22>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1fb8e:	2500      	movs	r5, #0
   1fb90:	b12d      	cbz	r5, 1fb9e <bt_keys_find_irk+0x26>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1fb92:	2500      	movs	r5, #0
   1fb94:	b32d      	cbz	r5, 1fbe2 <bt_keys_find_irk+0x6a>
	return NULL;
   1fb96:	2000      	movs	r0, #0
   1fb98:	e051      	b.n	1fc3e <bt_keys_find_irk+0xc6>
		return NULL;
   1fb9a:	2000      	movs	r0, #0
   1fb9c:	e04f      	b.n	1fc3e <bt_keys_find_irk+0xc6>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1fb9e:	4b28      	ldr	r3, [pc, #160]	; (1fc40 <bt_keys_find_irk+0xc8>)
   1fba0:	225c      	movs	r2, #92	; 0x5c
   1fba2:	fb02 3305 	mla	r3, r2, r5, r3
   1fba6:	89db      	ldrh	r3, [r3, #14]
   1fba8:	f013 0f02 	tst.w	r3, #2
   1fbac:	d006      	beq.n	1fbbc <bt_keys_find_irk+0x44>
		if (key_pool[i].id == id &&
   1fbae:	4613      	mov	r3, r2
   1fbb0:	fb05 f303 	mul.w	r3, r5, r3
   1fbb4:	4a22      	ldr	r2, [pc, #136]	; (1fc40 <bt_keys_find_irk+0xc8>)
   1fbb6:	5cd3      	ldrb	r3, [r2, r3]
   1fbb8:	42b3      	cmp	r3, r6
   1fbba:	d001      	beq.n	1fbc0 <bt_keys_find_irk+0x48>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1fbbc:	3501      	adds	r5, #1
   1fbbe:	e7e7      	b.n	1fb90 <bt_keys_find_irk+0x18>
		    !bt_addr_cmp(&addr->a, &key_pool[i].irk.rpa)) {
   1fbc0:	215c      	movs	r1, #92	; 0x5c
   1fbc2:	fb05 f101 	mul.w	r1, r5, r1
   1fbc6:	3138      	adds	r1, #56	; 0x38
   1fbc8:	4411      	add	r1, r2
	return memcmp(a, b, sizeof(*a));
   1fbca:	2206      	movs	r2, #6
   1fbcc:	3102      	adds	r1, #2
   1fbce:	1c60      	adds	r0, r4, #1
   1fbd0:	f011 f892 	bl	30cf8 <memcmp>
		if (key_pool[i].id == id &&
   1fbd4:	2800      	cmp	r0, #0
   1fbd6:	d1f1      	bne.n	1fbbc <bt_keys_find_irk+0x44>
			return &key_pool[i];
   1fbd8:	4819      	ldr	r0, [pc, #100]	; (1fc40 <bt_keys_find_irk+0xc8>)
   1fbda:	235c      	movs	r3, #92	; 0x5c
   1fbdc:	fb03 0005 	mla	r0, r3, r5, r0
   1fbe0:	e02d      	b.n	1fc3e <bt_keys_find_irk+0xc6>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1fbe2:	4b17      	ldr	r3, [pc, #92]	; (1fc40 <bt_keys_find_irk+0xc8>)
   1fbe4:	225c      	movs	r2, #92	; 0x5c
   1fbe6:	fb02 3305 	mla	r3, r2, r5, r3
   1fbea:	89db      	ldrh	r3, [r3, #14]
   1fbec:	f013 0f02 	tst.w	r3, #2
   1fbf0:	d006      	beq.n	1fc00 <bt_keys_find_irk+0x88>
		if (key_pool[i].id != id) {
   1fbf2:	4613      	mov	r3, r2
   1fbf4:	fb05 f303 	mul.w	r3, r5, r3
   1fbf8:	4a11      	ldr	r2, [pc, #68]	; (1fc40 <bt_keys_find_irk+0xc8>)
   1fbfa:	5cd3      	ldrb	r3, [r2, r3]
   1fbfc:	42b3      	cmp	r3, r6
   1fbfe:	d001      	beq.n	1fc04 <bt_keys_find_irk+0x8c>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1fc00:	3501      	adds	r5, #1
   1fc02:	e7c7      	b.n	1fb94 <bt_keys_find_irk+0x1c>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   1fc04:	205c      	movs	r0, #92	; 0x5c
   1fc06:	fb05 f000 	mul.w	r0, r5, r0
   1fc0a:	3028      	adds	r0, #40	; 0x28
   1fc0c:	4410      	add	r0, r2
   1fc0e:	1c67      	adds	r7, r4, #1
   1fc10:	4639      	mov	r1, r7
   1fc12:	3002      	adds	r0, #2
   1fc14:	f00c f8fe 	bl	2be14 <bt_rpa_irk_matches>
   1fc18:	2800      	cmp	r0, #0
   1fc1a:	d0f1      	beq.n	1fc00 <bt_keys_find_irk+0x88>
			bt_addr_copy(&key_pool[i].irk.rpa, &addr->a);
   1fc1c:	4808      	ldr	r0, [pc, #32]	; (1fc40 <bt_keys_find_irk+0xc8>)
   1fc1e:	235c      	movs	r3, #92	; 0x5c
   1fc20:	fb03 f505 	mul.w	r5, r3, r5
   1fc24:	f105 0338 	add.w	r3, r5, #56	; 0x38
   1fc28:	4403      	add	r3, r0
   1fc2a:	f8d4 2001 	ldr.w	r2, [r4, #1]
   1fc2e:	f8c3 2002 	str.w	r2, [r3, #2]
   1fc32:	f8b4 2005 	ldrh.w	r2, [r4, #5]
   1fc36:	80da      	strh	r2, [r3, #6]
			return &key_pool[i];
   1fc38:	4428      	add	r0, r5
   1fc3a:	e000      	b.n	1fc3e <bt_keys_find_irk+0xc6>
		return NULL;
   1fc3c:	2000      	movs	r0, #0
}
   1fc3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1fc40:	200027ac 	.word	0x200027ac

0001fc44 <bt_keys_find_addr>:
{
   1fc44:	b570      	push	{r4, r5, r6, lr}
   1fc46:	4606      	mov	r6, r0
   1fc48:	460d      	mov	r5, r1
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1fc4a:	2400      	movs	r4, #0
   1fc4c:	b10c      	cbz	r4, 1fc52 <bt_keys_find_addr+0xe>
	return NULL;
   1fc4e:	2000      	movs	r0, #0
}
   1fc50:	bd70      	pop	{r4, r5, r6, pc}
		if (key_pool[i].id == id &&
   1fc52:	235c      	movs	r3, #92	; 0x5c
   1fc54:	fb04 f303 	mul.w	r3, r4, r3
   1fc58:	4a0a      	ldr	r2, [pc, #40]	; (1fc84 <bt_keys_find_addr+0x40>)
   1fc5a:	5cd3      	ldrb	r3, [r2, r3]
   1fc5c:	429e      	cmp	r6, r3
   1fc5e:	d001      	beq.n	1fc64 <bt_keys_find_addr+0x20>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1fc60:	3401      	adds	r4, #1
   1fc62:	e7f3      	b.n	1fc4c <bt_keys_find_addr+0x8>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
   1fc64:	235c      	movs	r3, #92	; 0x5c
   1fc66:	fb03 2004 	mla	r0, r3, r4, r2
	return memcmp(a, b, sizeof(*a));
   1fc6a:	2207      	movs	r2, #7
   1fc6c:	4629      	mov	r1, r5
   1fc6e:	3001      	adds	r0, #1
   1fc70:	f011 f842 	bl	30cf8 <memcmp>
		if (key_pool[i].id == id &&
   1fc74:	2800      	cmp	r0, #0
   1fc76:	d1f3      	bne.n	1fc60 <bt_keys_find_addr+0x1c>
			return &key_pool[i];
   1fc78:	4802      	ldr	r0, [pc, #8]	; (1fc84 <bt_keys_find_addr+0x40>)
   1fc7a:	235c      	movs	r3, #92	; 0x5c
   1fc7c:	fb03 0004 	mla	r0, r3, r4, r0
   1fc80:	e7e6      	b.n	1fc50 <bt_keys_find_addr+0xc>
   1fc82:	bf00      	nop
   1fc84:	200027ac 	.word	0x200027ac

0001fc88 <bt_keys_clear>:
{
   1fc88:	b530      	push	{r4, r5, lr}
   1fc8a:	b08d      	sub	sp, #52	; 0x34
   1fc8c:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   1fc8e:	7a03      	ldrb	r3, [r0, #8]
   1fc90:	f013 0f04 	tst.w	r3, #4
   1fc94:	d117      	bne.n	1fcc6 <bt_keys_clear+0x3e>
		if (keys->id) {
   1fc96:	7822      	ldrb	r2, [r4, #0]
   1fc98:	b1c2      	cbz	r2, 1fccc <bt_keys_clear+0x44>
			u8_to_dec(id, sizeof(id), keys->id);
   1fc9a:	ad02      	add	r5, sp, #8
   1fc9c:	2104      	movs	r1, #4
   1fc9e:	4628      	mov	r0, r5
   1fca0:	f7f3 f8c8 	bl	12e34 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "keys",
   1fca4:	9500      	str	r5, [sp, #0]
   1fca6:	1c63      	adds	r3, r4, #1
   1fca8:	4a0d      	ldr	r2, [pc, #52]	; (1fce0 <bt_keys_clear+0x58>)
   1fcaa:	2124      	movs	r1, #36	; 0x24
   1fcac:	a803      	add	r0, sp, #12
   1fcae:	f7f6 fe15 	bl	168dc <bt_settings_encode_key>
		settings_delete(key);
   1fcb2:	a803      	add	r0, sp, #12
   1fcb4:	f00b fdae 	bl	2b814 <settings_delete>
__ssp_bos_icheck3(memset, void *, int)
   1fcb8:	225c      	movs	r2, #92	; 0x5c
   1fcba:	2100      	movs	r1, #0
   1fcbc:	4620      	mov	r0, r4
   1fcbe:	f011 f84c 	bl	30d5a <memset>
}
   1fcc2:	b00d      	add	sp, #52	; 0x34
   1fcc4:	bd30      	pop	{r4, r5, pc}
		bt_id_del(keys);
   1fcc6:	f7f8 fdff 	bl	188c8 <bt_id_del>
   1fcca:	e7e4      	b.n	1fc96 <bt_keys_clear+0xe>
			bt_settings_encode_key(key, sizeof(key), "keys",
   1fccc:	2300      	movs	r3, #0
   1fcce:	9300      	str	r3, [sp, #0]
   1fcd0:	1c63      	adds	r3, r4, #1
   1fcd2:	4a03      	ldr	r2, [pc, #12]	; (1fce0 <bt_keys_clear+0x58>)
   1fcd4:	2124      	movs	r1, #36	; 0x24
   1fcd6:	a803      	add	r0, sp, #12
   1fcd8:	f7f6 fe00 	bl	168dc <bt_settings_encode_key>
   1fcdc:	e7e9      	b.n	1fcb2 <bt_keys_clear+0x2a>
   1fcde:	bf00      	nop
   1fce0:	000342a0 	.word	0x000342a0

0001fce4 <keys_set>:
{
   1fce4:	b570      	push	{r4, r5, r6, lr}
   1fce6:	b098      	sub	sp, #96	; 0x60
	if (!name) {
   1fce8:	b358      	cbz	r0, 1fd42 <keys_set+0x5e>
   1fcea:	4614      	mov	r4, r2
   1fcec:	4605      	mov	r5, r0
	len = read_cb(cb_arg, val, sizeof(val));
   1fcee:	2250      	movs	r2, #80	; 0x50
   1fcf0:	a902      	add	r1, sp, #8
   1fcf2:	4618      	mov	r0, r3
   1fcf4:	47a0      	blx	r4
	if (len < 0) {
   1fcf6:	1e04      	subs	r4, r0, #0
   1fcf8:	db2a      	blt.n	1fd50 <keys_set+0x6c>
	err = bt_settings_decode_key(name, &addr);
   1fcfa:	a916      	add	r1, sp, #88	; 0x58
   1fcfc:	4628      	mov	r0, r5
   1fcfe:	f00c f89d 	bl	2be3c <bt_settings_decode_key>
	if (err) {
   1fd02:	4606      	mov	r6, r0
   1fd04:	bb60      	cbnz	r0, 1fd60 <keys_set+0x7c>
	settings_name_next(name, &next);
   1fd06:	a901      	add	r1, sp, #4
   1fd08:	4628      	mov	r0, r5
   1fd0a:	f00b fdb3 	bl	2b874 <settings_name_next>
	if (!next) {
   1fd0e:	9801      	ldr	r0, [sp, #4]
   1fd10:	b3a8      	cbz	r0, 1fd7e <keys_set+0x9a>
		unsigned long next_id = strtoul(next, NULL, 10);
   1fd12:	220a      	movs	r2, #10
   1fd14:	2100      	movs	r1, #0
   1fd16:	f00a fd2d 	bl	2a774 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   1fd1a:	4602      	mov	r2, r0
   1fd1c:	bb40      	cbnz	r0, 1fd70 <keys_set+0x8c>
		id = (uint8_t)next_id;
   1fd1e:	b2c0      	uxtb	r0, r0
	if (!len) {
   1fd20:	b37c      	cbz	r4, 1fd82 <keys_set+0x9e>
	keys = bt_keys_get_addr(id, &addr);
   1fd22:	a916      	add	r1, sp, #88	; 0x58
   1fd24:	f7ff fe92 	bl	1fa4c <bt_keys_get_addr>
	if (!keys) {
   1fd28:	4605      	mov	r5, r0
   1fd2a:	2800      	cmp	r0, #0
   1fd2c:	d03e      	beq.n	1fdac <keys_set+0xc8>
	if (len != BT_KEYS_STORAGE_LEN) {
   1fd2e:	2c50      	cmp	r4, #80	; 0x50
   1fd30:	d147      	bne.n	1fdc2 <keys_set+0xde>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1fd32:	4622      	mov	r2, r4
   1fd34:	a902      	add	r1, sp, #8
   1fd36:	300c      	adds	r0, #12
   1fd38:	f010 ffee 	bl	30d18 <memcpy>
}
   1fd3c:	4630      	mov	r0, r6
   1fd3e:	b018      	add	sp, #96	; 0x60
   1fd40:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Insufficient number of arguments");
   1fd42:	2145      	movs	r1, #69	; 0x45
   1fd44:	4825      	ldr	r0, [pc, #148]	; (1fddc <keys_set+0xf8>)
   1fd46:	f00b f9b1 	bl	2b0ac <z_log_minimal_printk>
		return -EINVAL;
   1fd4a:	f06f 0615 	mvn.w	r6, #21
   1fd4e:	e7f5      	b.n	1fd3c <keys_set+0x58>
		BT_ERR("Failed to read value (err %zd)", len);
   1fd50:	4622      	mov	r2, r4
   1fd52:	2145      	movs	r1, #69	; 0x45
   1fd54:	4822      	ldr	r0, [pc, #136]	; (1fde0 <keys_set+0xfc>)
   1fd56:	f00b f9a9 	bl	2b0ac <z_log_minimal_printk>
		return -EINVAL;
   1fd5a:	f06f 0615 	mvn.w	r6, #21
   1fd5e:	e7ed      	b.n	1fd3c <keys_set+0x58>
		BT_ERR("Unable to decode address %s", name);
   1fd60:	462a      	mov	r2, r5
   1fd62:	2145      	movs	r1, #69	; 0x45
   1fd64:	481f      	ldr	r0, [pc, #124]	; (1fde4 <keys_set+0x100>)
   1fd66:	f00b f9a1 	bl	2b0ac <z_log_minimal_printk>
		return -EINVAL;
   1fd6a:	f06f 0615 	mvn.w	r6, #21
   1fd6e:	e7e5      	b.n	1fd3c <keys_set+0x58>
			BT_ERR("Invalid local identity %lu", next_id);
   1fd70:	2145      	movs	r1, #69	; 0x45
   1fd72:	481d      	ldr	r0, [pc, #116]	; (1fde8 <keys_set+0x104>)
   1fd74:	f00b f99a 	bl	2b0ac <z_log_minimal_printk>
			return -EINVAL;
   1fd78:	f06f 0615 	mvn.w	r6, #21
   1fd7c:	e7de      	b.n	1fd3c <keys_set+0x58>
		id = BT_ID_DEFAULT;
   1fd7e:	2000      	movs	r0, #0
   1fd80:	e7ce      	b.n	1fd20 <keys_set+0x3c>
		keys = bt_keys_find(BT_KEYS_ALL, id, &addr);
   1fd82:	aa16      	add	r2, sp, #88	; 0x58
   1fd84:	4601      	mov	r1, r0
   1fd86:	203f      	movs	r0, #63	; 0x3f
   1fd88:	f7ff fecc 	bl	1fb24 <bt_keys_find>
		if (keys) {
   1fd8c:	b128      	cbz	r0, 1fd9a <keys_set+0xb6>
__ssp_bos_icheck3(memset, void *, int)
   1fd8e:	225c      	movs	r2, #92	; 0x5c
   1fd90:	2100      	movs	r1, #0
   1fd92:	f010 ffe2 	bl	30d5a <memset>
		return 0;
   1fd96:	4626      	mov	r6, r4
   1fd98:	e7d0      	b.n	1fd3c <keys_set+0x58>
			BT_WARN("Unable to find deleted keys for %s",
   1fd9a:	a816      	add	r0, sp, #88	; 0x58
   1fd9c:	f7f6 fcbe 	bl	1671c <bt_addr_le_str_real>
   1fda0:	4602      	mov	r2, r0
   1fda2:	2157      	movs	r1, #87	; 0x57
   1fda4:	4811      	ldr	r0, [pc, #68]	; (1fdec <keys_set+0x108>)
   1fda6:	f00b f981 	bl	2b0ac <z_log_minimal_printk>
   1fdaa:	e7f4      	b.n	1fd96 <keys_set+0xb2>
		BT_ERR("Failed to allocate keys for %s", bt_addr_le_str(&addr));
   1fdac:	a816      	add	r0, sp, #88	; 0x58
   1fdae:	f7f6 fcb5 	bl	1671c <bt_addr_le_str_real>
   1fdb2:	4602      	mov	r2, r0
   1fdb4:	2145      	movs	r1, #69	; 0x45
   1fdb6:	480e      	ldr	r0, [pc, #56]	; (1fdf0 <keys_set+0x10c>)
   1fdb8:	f00b f978 	bl	2b0ac <z_log_minimal_printk>
		return -ENOMEM;
   1fdbc:	f06f 060b 	mvn.w	r6, #11
   1fdc0:	e7bc      	b.n	1fd3c <keys_set+0x58>
			BT_ERR("Invalid key length %zd != %zu", len,
   1fdc2:	2350      	movs	r3, #80	; 0x50
   1fdc4:	4622      	mov	r2, r4
   1fdc6:	2145      	movs	r1, #69	; 0x45
   1fdc8:	480a      	ldr	r0, [pc, #40]	; (1fdf4 <keys_set+0x110>)
   1fdca:	f00b f96f 	bl	2b0ac <z_log_minimal_printk>
			bt_keys_clear(keys);
   1fdce:	4628      	mov	r0, r5
   1fdd0:	f7ff ff5a 	bl	1fc88 <bt_keys_clear>
			return -EINVAL;
   1fdd4:	f06f 0615 	mvn.w	r6, #21
   1fdd8:	e7b0      	b.n	1fd3c <keys_set+0x58>
   1fdda:	bf00      	nop
   1fddc:	0003241c 	.word	0x0003241c
   1fde0:	000342a8 	.word	0x000342a8
   1fde4:	00033a14 	.word	0x00033a14
   1fde8:	00033a38 	.word	0x00033a38
   1fdec:	000342cc 	.word	0x000342cc
   1fdf0:	000342f4 	.word	0x000342f4
   1fdf4:	00034318 	.word	0x00034318

0001fdf8 <bt_keys_store>:
{
   1fdf8:	b530      	push	{r4, r5, lr}
   1fdfa:	b08d      	sub	sp, #52	; 0x34
   1fdfc:	4604      	mov	r4, r0
	if (keys->id) {
   1fdfe:	7802      	ldrb	r2, [r0, #0]
   1fe00:	b1b2      	cbz	r2, 1fe30 <bt_keys_store+0x38>
		u8_to_dec(id, sizeof(id), keys->id);
   1fe02:	ad02      	add	r5, sp, #8
   1fe04:	2104      	movs	r1, #4
   1fe06:	4628      	mov	r0, r5
   1fe08:	f7f3 f814 	bl	12e34 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1fe0c:	9500      	str	r5, [sp, #0]
   1fe0e:	1c63      	adds	r3, r4, #1
   1fe10:	4a0f      	ldr	r2, [pc, #60]	; (1fe50 <bt_keys_store+0x58>)
   1fe12:	2124      	movs	r1, #36	; 0x24
   1fe14:	a803      	add	r0, sp, #12
   1fe16:	f7f6 fd61 	bl	168dc <bt_settings_encode_key>
	err = settings_save_one(key, keys->storage_start, BT_KEYS_STORAGE_LEN);
   1fe1a:	2250      	movs	r2, #80	; 0x50
   1fe1c:	f104 010c 	add.w	r1, r4, #12
   1fe20:	a803      	add	r0, sp, #12
   1fe22:	f7f4 fd59 	bl	148d8 <settings_save_one>
	if (err) {
   1fe26:	4604      	mov	r4, r0
   1fe28:	b958      	cbnz	r0, 1fe42 <bt_keys_store+0x4a>
}
   1fe2a:	4620      	mov	r0, r4
   1fe2c:	b00d      	add	sp, #52	; 0x34
   1fe2e:	bd30      	pop	{r4, r5, pc}
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1fe30:	2300      	movs	r3, #0
   1fe32:	9300      	str	r3, [sp, #0]
   1fe34:	1c43      	adds	r3, r0, #1
   1fe36:	4a06      	ldr	r2, [pc, #24]	; (1fe50 <bt_keys_store+0x58>)
   1fe38:	2124      	movs	r1, #36	; 0x24
   1fe3a:	a803      	add	r0, sp, #12
   1fe3c:	f7f6 fd4e 	bl	168dc <bt_settings_encode_key>
   1fe40:	e7eb      	b.n	1fe1a <bt_keys_store+0x22>
		BT_ERR("Failed to save keys (err %d)", err);
   1fe42:	4602      	mov	r2, r0
   1fe44:	2145      	movs	r1, #69	; 0x45
   1fe46:	4803      	ldr	r0, [pc, #12]	; (1fe54 <bt_keys_store+0x5c>)
   1fe48:	f00b f930 	bl	2b0ac <z_log_minimal_printk>
		return err;
   1fe4c:	e7ed      	b.n	1fe2a <bt_keys_store+0x32>
   1fe4e:	bf00      	nop
   1fe50:	000342a0 	.word	0x000342a0
   1fe54:	0003433c 	.word	0x0003433c

0001fe58 <pool_id>:
	return &_net_buf_pool_list[id];
}

static int pool_id(struct net_buf_pool *pool)
{
	return pool - _net_buf_pool_list;
   1fe58:	4b03      	ldr	r3, [pc, #12]	; (1fe68 <pool_id+0x10>)
   1fe5a:	1ac0      	subs	r0, r0, r3
   1fe5c:	1080      	asrs	r0, r0, #2
}
   1fe5e:	4b03      	ldr	r3, [pc, #12]	; (1fe6c <pool_id+0x14>)
   1fe60:	fb03 f000 	mul.w	r0, r3, r0
   1fe64:	4770      	bx	lr
   1fe66:	bf00      	nop
   1fe68:	20000a28 	.word	0x20000a28
   1fe6c:	c4ec4ec5 	.word	0xc4ec4ec5

0001fe70 <net_buf_pool_get>:
}
   1fe70:	2234      	movs	r2, #52	; 0x34
   1fe72:	4b02      	ldr	r3, [pc, #8]	; (1fe7c <net_buf_pool_get+0xc>)
   1fe74:	fb02 3000 	mla	r0, r2, r0, r3
   1fe78:	4770      	bx	lr
   1fe7a:	bf00      	nop
   1fe7c:	20000a28 	.word	0x20000a28

0001fe80 <net_buf_reset>:

	return buf;
}

void net_buf_reset(struct net_buf *buf)
{
   1fe80:	b538      	push	{r3, r4, r5, lr}
   1fe82:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf->flags == 0U);
   1fe84:	7943      	ldrb	r3, [r0, #5]
   1fe86:	b983      	cbnz	r3, 1feaa <net_buf_reset+0x2a>
	__ASSERT_NO_MSG(buf->frags == NULL);
   1fe88:	6823      	ldr	r3, [r4, #0]
   1fe8a:	b14b      	cbz	r3, 1fea0 <net_buf_reset+0x20>
   1fe8c:	4d0c      	ldr	r5, [pc, #48]	; (1fec0 <net_buf_reset+0x40>)
   1fe8e:	2257      	movs	r2, #87	; 0x57
   1fe90:	4629      	mov	r1, r5
   1fe92:	480c      	ldr	r0, [pc, #48]	; (1fec4 <net_buf_reset+0x44>)
   1fe94:	f00b f8fb 	bl	2b08e <assert_print>
   1fe98:	2157      	movs	r1, #87	; 0x57
   1fe9a:	4628      	mov	r0, r5
   1fe9c:	f00b f8f0 	bl	2b080 <assert_post_action>
	buf->len  = 0U;
   1fea0:	2300      	movs	r3, #0
   1fea2:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
   1fea4:	6923      	ldr	r3, [r4, #16]
   1fea6:	60a3      	str	r3, [r4, #8]

	net_buf_simple_reset(&buf->b);
}
   1fea8:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(buf->flags == 0U);
   1feaa:	4d05      	ldr	r5, [pc, #20]	; (1fec0 <net_buf_reset+0x40>)
   1feac:	2256      	movs	r2, #86	; 0x56
   1feae:	4629      	mov	r1, r5
   1feb0:	4804      	ldr	r0, [pc, #16]	; (1fec4 <net_buf_reset+0x44>)
   1feb2:	f00b f8ec 	bl	2b08e <assert_print>
   1feb6:	2156      	movs	r1, #86	; 0x56
   1feb8:	4628      	mov	r0, r5
   1feba:	f00b f8e1 	bl	2b080 <assert_post_action>
   1febe:	e7e3      	b.n	1fe88 <net_buf_reset+0x8>
   1fec0:	00034370 	.word	0x00034370
   1fec4:	000318f8 	.word	0x000318f8

0001fec8 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1fec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fecc:	b083      	sub	sp, #12
   1fece:	4604      	mov	r4, r0
   1fed0:	9101      	str	r1, [sp, #4]
   1fed2:	4616      	mov	r6, r2
   1fed4:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1fed6:	4610      	mov	r0, r2
   1fed8:	4619      	mov	r1, r3
   1feda:	f010 fe69 	bl	30bb0 <sys_clock_timeout_end_calc>
   1fede:	4681      	mov	r9, r0
   1fee0:	468a      	mov	sl, r1
	struct net_buf *buf;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(pool);
   1fee2:	b33c      	cbz	r4, 1ff34 <net_buf_alloc_len+0x6c>
	NET_BUF_DBG("%s():%d: pool %p size %zu", func, line, pool, size);

	/* We need to prevent race conditions
	 * when accessing pool->uninit_count.
	 */
	key = k_spin_lock(&pool->lock);
   1fee4:	f104 081c 	add.w	r8, r4, #28
	__asm__ volatile(
   1fee8:	f04f 0340 	mov.w	r3, #64	; 0x40
   1feec:	f3ef 8b11 	mrs	fp, BASEPRI
   1fef0:	f383 8812 	msr	BASEPRI_MAX, r3
   1fef4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1fef8:	4640      	mov	r0, r8
   1fefa:	f006 f8dd 	bl	260b8 <z_spin_lock_valid>
   1fefe:	b320      	cbz	r0, 1ff4a <net_buf_alloc_len+0x82>
	z_spin_lock_set_owner(l);
   1ff00:	4640      	mov	r0, r8
   1ff02:	f006 f8f9 	bl	260f8 <z_spin_lock_set_owner>

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1ff06:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   1ff08:	2b00      	cmp	r3, #0
   1ff0a:	f000 8085 	beq.w	20018 <net_buf_alloc_len+0x150>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1ff0e:	8c22      	ldrh	r2, [r4, #32]
   1ff10:	4293      	cmp	r3, r2
   1ff12:	d230      	bcs.n	1ff76 <net_buf_alloc_len+0xae>
	return z_impl_k_queue_get(queue, timeout);
   1ff14:	2200      	movs	r2, #0
   1ff16:	2300      	movs	r3, #0
   1ff18:	4620      	mov	r0, r4
   1ff1a:	f006 fb8f 	bl	2663c <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1ff1e:	4605      	mov	r5, r0
   1ff20:	b348      	cbz	r0, 1ff76 <net_buf_alloc_len+0xae>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ff22:	4640      	mov	r0, r8
   1ff24:	f006 f8d8 	bl	260d8 <z_spin_unlock_valid>
   1ff28:	b1d0      	cbz	r0, 1ff60 <net_buf_alloc_len+0x98>
	__asm__ volatile(
   1ff2a:	f38b 8811 	msr	BASEPRI, fp
   1ff2e:	f3bf 8f6f 	isb	sy
				k_spin_unlock(&pool->lock, key);
				goto success;
   1ff32:	e03d      	b.n	1ffb0 <net_buf_alloc_len+0xe8>
	__ASSERT_NO_MSG(pool);
   1ff34:	4d59      	ldr	r5, [pc, #356]	; (2009c <net_buf_alloc_len+0x1d4>)
   1ff36:	22f4      	movs	r2, #244	; 0xf4
   1ff38:	4629      	mov	r1, r5
   1ff3a:	4859      	ldr	r0, [pc, #356]	; (200a0 <net_buf_alloc_len+0x1d8>)
   1ff3c:	f00b f8a7 	bl	2b08e <assert_print>
   1ff40:	21f4      	movs	r1, #244	; 0xf4
   1ff42:	4628      	mov	r0, r5
   1ff44:	f00b f89c 	bl	2b080 <assert_post_action>
   1ff48:	e7cc      	b.n	1fee4 <net_buf_alloc_len+0x1c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ff4a:	4d56      	ldr	r5, [pc, #344]	; (200a4 <net_buf_alloc_len+0x1dc>)
   1ff4c:	228e      	movs	r2, #142	; 0x8e
   1ff4e:	4629      	mov	r1, r5
   1ff50:	4853      	ldr	r0, [pc, #332]	; (200a0 <net_buf_alloc_len+0x1d8>)
   1ff52:	f00b f89c 	bl	2b08e <assert_print>
   1ff56:	218e      	movs	r1, #142	; 0x8e
   1ff58:	4628      	mov	r0, r5
   1ff5a:	f00b f891 	bl	2b080 <assert_post_action>
   1ff5e:	e7cf      	b.n	1ff00 <net_buf_alloc_len+0x38>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ff60:	4c50      	ldr	r4, [pc, #320]	; (200a4 <net_buf_alloc_len+0x1dc>)
   1ff62:	22b9      	movs	r2, #185	; 0xb9
   1ff64:	4621      	mov	r1, r4
   1ff66:	484e      	ldr	r0, [pc, #312]	; (200a0 <net_buf_alloc_len+0x1d8>)
   1ff68:	f00b f891 	bl	2b08e <assert_print>
   1ff6c:	21b9      	movs	r1, #185	; 0xb9
   1ff6e:	4620      	mov	r0, r4
   1ff70:	f00b f886 	bl	2b080 <assert_post_action>
   1ff74:	e7d9      	b.n	1ff2a <net_buf_alloc_len+0x62>
			}
		}

		uninit_count = pool->uninit_count--;
   1ff76:	8c65      	ldrh	r5, [r4, #34]	; 0x22
   1ff78:	1e6b      	subs	r3, r5, #1
   1ff7a:	8463      	strh	r3, [r4, #34]	; 0x22
   1ff7c:	4640      	mov	r0, r8
   1ff7e:	f006 f8ab 	bl	260d8 <z_spin_unlock_valid>
   1ff82:	2800      	cmp	r0, #0
   1ff84:	d03c      	beq.n	20000 <net_buf_alloc_len+0x138>
   1ff86:	f38b 8811 	msr	BASEPRI, fp
   1ff8a:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1ff8e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   1ff92:	3317      	adds	r3, #23
   1ff94:	f023 0303 	bic.w	r3, r3, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1ff98:	8c22      	ldrh	r2, [r4, #32]
   1ff9a:	1b55      	subs	r5, r2, r5
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1ff9c:	6b22      	ldr	r2, [r4, #48]	; 0x30
   1ff9e:	fb05 2503 	mla	r5, r5, r3, r2
	buf->pool_id = pool_id(pool);
   1ffa2:	4620      	mov	r0, r4
   1ffa4:	f7ff ff58 	bl	1fe58 <pool_id>
   1ffa8:	71a8      	strb	r0, [r5, #6]
	buf->user_data_size = pool->user_data_size;
   1ffaa:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   1ffae:	71eb      	strb	r3, [r5, #7]
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1ffb0:	f8dd 8004 	ldr.w	r8, [sp, #4]
   1ffb4:	f1b8 0f00 	cmp.w	r8, #0
   1ffb8:	d05f      	beq.n	2007a <net_buf_alloc_len+0x1b2>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1ffba:	ea56 0307 	orrs.w	r3, r6, r7
   1ffbe:	d005      	beq.n	1ffcc <net_buf_alloc_len+0x104>
   1ffc0:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   1ffc4:	bf08      	it	eq
   1ffc6:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   1ffca:	d141      	bne.n	20050 <net_buf_alloc_len+0x188>
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1ffcc:	4632      	mov	r2, r6
   1ffce:	463b      	mov	r3, r7
   1ffd0:	a901      	add	r1, sp, #4
   1ffd2:	4628      	mov	r0, r5
   1ffd4:	f00f f86e 	bl	2f0b4 <data_alloc>
   1ffd8:	4604      	mov	r4, r0
   1ffda:	6128      	str	r0, [r5, #16]
		if (!buf->__buf) {
   1ffdc:	2800      	cmp	r0, #0
   1ffde:	d044      	beq.n	2006a <net_buf_alloc_len+0x1a2>
			net_buf_destroy(buf);
			return NULL;
		}

#if __ASSERT_ON
		NET_BUF_ASSERT(req_size <= size);
   1ffe0:	9b01      	ldr	r3, [sp, #4]
   1ffe2:	4598      	cmp	r8, r3
   1ffe4:	d94b      	bls.n	2007e <net_buf_alloc_len+0x1b6>
   1ffe6:	4c2d      	ldr	r4, [pc, #180]	; (2009c <net_buf_alloc_len+0x1d4>)
   1ffe8:	f240 1255 	movw	r2, #341	; 0x155
   1ffec:	4621      	mov	r1, r4
   1ffee:	482c      	ldr	r0, [pc, #176]	; (200a0 <net_buf_alloc_len+0x1d8>)
   1fff0:	f00b f84d 	bl	2b08e <assert_print>
   1fff4:	f240 1155 	movw	r1, #341	; 0x155
   1fff8:	4620      	mov	r0, r4
   1fffa:	f00b f841 	bl	2b080 <assert_post_action>
   1fffe:	e03e      	b.n	2007e <net_buf_alloc_len+0x1b6>
   20000:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 200a4 <net_buf_alloc_len+0x1dc>
   20004:	22b9      	movs	r2, #185	; 0xb9
   20006:	4641      	mov	r1, r8
   20008:	4825      	ldr	r0, [pc, #148]	; (200a0 <net_buf_alloc_len+0x1d8>)
   2000a:	f00b f840 	bl	2b08e <assert_print>
   2000e:	21b9      	movs	r1, #185	; 0xb9
   20010:	4640      	mov	r0, r8
   20012:	f00b f835 	bl	2b080 <assert_post_action>
   20016:	e7b6      	b.n	1ff86 <net_buf_alloc_len+0xbe>
   20018:	4640      	mov	r0, r8
   2001a:	f006 f85d 	bl	260d8 <z_spin_unlock_valid>
   2001e:	b160      	cbz	r0, 2003a <net_buf_alloc_len+0x172>
   20020:	f38b 8811 	msr	BASEPRI, fp
   20024:	f3bf 8f6f 	isb	sy
   20028:	4632      	mov	r2, r6
   2002a:	463b      	mov	r3, r7
   2002c:	4620      	mov	r0, r4
   2002e:	f006 fb05 	bl	2663c <z_impl_k_queue_get>
	if (!buf) {
   20032:	4605      	mov	r5, r0
   20034:	2800      	cmp	r0, #0
   20036:	d1bb      	bne.n	1ffb0 <net_buf_alloc_len+0xe8>
   20038:	e02b      	b.n	20092 <net_buf_alloc_len+0x1ca>
   2003a:	4d1a      	ldr	r5, [pc, #104]	; (200a4 <net_buf_alloc_len+0x1dc>)
   2003c:	22b9      	movs	r2, #185	; 0xb9
   2003e:	4629      	mov	r1, r5
   20040:	4817      	ldr	r0, [pc, #92]	; (200a0 <net_buf_alloc_len+0x1d8>)
   20042:	f00b f824 	bl	2b08e <assert_print>
   20046:	21b9      	movs	r1, #185	; 0xb9
   20048:	4628      	mov	r0, r5
   2004a:	f00b f819 	bl	2b080 <assert_post_action>
   2004e:	e7e7      	b.n	20020 <net_buf_alloc_len+0x158>
			int64_t remaining = end - sys_clock_tick_get();
   20050:	f008 fea2 	bl	28d98 <sys_clock_tick_get>
   20054:	ebb9 0600 	subs.w	r6, r9, r0
   20058:	eb6a 0701 	sbc.w	r7, sl, r1
			if (remaining <= 0) {
   2005c:	2e01      	cmp	r6, #1
   2005e:	f177 0300 	sbcs.w	r3, r7, #0
   20062:	dab3      	bge.n	1ffcc <net_buf_alloc_len+0x104>
				timeout = K_NO_WAIT;
   20064:	2600      	movs	r6, #0
   20066:	4637      	mov	r7, r6
   20068:	e7b0      	b.n	1ffcc <net_buf_alloc_len+0x104>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   2006a:	79a8      	ldrb	r0, [r5, #6]
   2006c:	f7ff ff00 	bl	1fe70 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   20070:	4629      	mov	r1, r5
   20072:	f010 fcc2 	bl	309fa <k_queue_prepend>
			return NULL;
   20076:	4625      	mov	r5, r4
}
   20078:	e00b      	b.n	20092 <net_buf_alloc_len+0x1ca>
#endif
	} else {
		buf->__buf = NULL;
   2007a:	2300      	movs	r3, #0
   2007c:	612b      	str	r3, [r5, #16]
	}

	buf->ref   = 1U;
   2007e:	2301      	movs	r3, #1
   20080:	712b      	strb	r3, [r5, #4]
	buf->flags = 0U;
   20082:	2300      	movs	r3, #0
   20084:	716b      	strb	r3, [r5, #5]
	buf->frags = NULL;
   20086:	602b      	str	r3, [r5, #0]
	buf->size  = size;
   20088:	9b01      	ldr	r3, [sp, #4]
   2008a:	81eb      	strh	r3, [r5, #14]
	net_buf_reset(buf);
   2008c:	4628      	mov	r0, r5
   2008e:	f7ff fef7 	bl	1fe80 <net_buf_reset>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   20092:	4628      	mov	r0, r5
   20094:	b003      	add	sp, #12
   20096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2009a:	bf00      	nop
   2009c:	00034370 	.word	0x00034370
   200a0:	000318f8 	.word	0x000318f8
   200a4:	000319f0 	.word	0x000319f0

000200a8 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   200a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   200aa:	4605      	mov	r5, r0
   200ac:	f006 fac6 	bl	2663c <z_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p", func, line, fifo);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   200b0:	4606      	mov	r6, r0
   200b2:	b308      	cbz	r0, 200f8 <net_buf_get+0x50>
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   200b4:	4604      	mov	r4, r0
   200b6:	e004      	b.n	200c2 <net_buf_get+0x1a>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
		__ASSERT_NO_MSG(frag->frags);

		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
   200b8:	7963      	ldrb	r3, [r4, #5]
   200ba:	f023 0301 	bic.w	r3, r3, #1
   200be:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   200c0:	6824      	ldr	r4, [r4, #0]
   200c2:	7963      	ldrb	r3, [r4, #5]
   200c4:	f013 0f01 	tst.w	r3, #1
   200c8:	d014      	beq.n	200f4 <net_buf_get+0x4c>
   200ca:	2200      	movs	r2, #0
   200cc:	2300      	movs	r3, #0
   200ce:	4628      	mov	r0, r5
   200d0:	f006 fab4 	bl	2663c <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   200d4:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);
   200d6:	2800      	cmp	r0, #0
   200d8:	d1ee      	bne.n	200b8 <net_buf_get+0x10>
   200da:	4f08      	ldr	r7, [pc, #32]	; (200fc <net_buf_get+0x54>)
   200dc:	f240 12ad 	movw	r2, #429	; 0x1ad
   200e0:	4639      	mov	r1, r7
   200e2:	4807      	ldr	r0, [pc, #28]	; (20100 <net_buf_get+0x58>)
   200e4:	f00a ffd3 	bl	2b08e <assert_print>
   200e8:	f240 11ad 	movw	r1, #429	; 0x1ad
   200ec:	4638      	mov	r0, r7
   200ee:	f00a ffc7 	bl	2b080 <assert_post_action>
   200f2:	e7e1      	b.n	200b8 <net_buf_get+0x10>
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   200f4:	2300      	movs	r3, #0
   200f6:	6023      	str	r3, [r4, #0]

	return buf;
}
   200f8:	4630      	mov	r0, r6
   200fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   200fc:	00034370 	.word	0x00034370
   20100:	000318f8 	.word	0x000318f8

00020104 <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   20104:	b570      	push	{r4, r5, r6, lr}
   20106:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf);
   20108:	4604      	mov	r4, r0
   2010a:	b128      	cbz	r0, 20118 <net_buf_simple_reserve+0x14>
	__ASSERT_NO_MSG(buf->len == 0U);
   2010c:	88a3      	ldrh	r3, [r4, #4]
   2010e:	b983      	cbnz	r3, 20132 <net_buf_simple_reserve+0x2e>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   20110:	68a3      	ldr	r3, [r4, #8]
   20112:	442b      	add	r3, r5
   20114:	6023      	str	r3, [r4, #0]
}
   20116:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(buf);
   20118:	4e0c      	ldr	r6, [pc, #48]	; (2014c <net_buf_simple_reserve+0x48>)
   2011a:	f44f 72e2 	mov.w	r2, #452	; 0x1c4
   2011e:	4631      	mov	r1, r6
   20120:	480b      	ldr	r0, [pc, #44]	; (20150 <net_buf_simple_reserve+0x4c>)
   20122:	f00a ffb4 	bl	2b08e <assert_print>
   20126:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
   2012a:	4630      	mov	r0, r6
   2012c:	f00a ffa8 	bl	2b080 <assert_post_action>
   20130:	e7ec      	b.n	2010c <net_buf_simple_reserve+0x8>
	__ASSERT_NO_MSG(buf->len == 0U);
   20132:	4e06      	ldr	r6, [pc, #24]	; (2014c <net_buf_simple_reserve+0x48>)
   20134:	f240 12c5 	movw	r2, #453	; 0x1c5
   20138:	4631      	mov	r1, r6
   2013a:	4805      	ldr	r0, [pc, #20]	; (20150 <net_buf_simple_reserve+0x4c>)
   2013c:	f00a ffa7 	bl	2b08e <assert_print>
   20140:	f240 11c5 	movw	r1, #453	; 0x1c5
   20144:	4630      	mov	r0, r6
   20146:	f00a ff9b 	bl	2b080 <assert_post_action>
   2014a:	e7e1      	b.n	20110 <net_buf_simple_reserve+0xc>
   2014c:	00034370 	.word	0x00034370
   20150:	000318f8 	.word	0x000318f8

00020154 <net_buf_slist_put>:

static struct k_spinlock net_buf_slist_lock;

void net_buf_slist_put(sys_slist_t *list, struct net_buf *buf)
{
   20154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20158:	460d      	mov	r5, r1
	struct net_buf *tail;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   2015a:	4606      	mov	r6, r0
   2015c:	b110      	cbz	r0, 20164 <net_buf_slist_put+0x10>
	__ASSERT_NO_MSG(buf);
   2015e:	b175      	cbz	r5, 2017e <net_buf_slist_put+0x2a>
{
   20160:	462c      	mov	r4, r5
   20162:	e01e      	b.n	201a2 <net_buf_slist_put+0x4e>
	__ASSERT_NO_MSG(list);
   20164:	4c2d      	ldr	r4, [pc, #180]	; (2021c <net_buf_slist_put+0xc8>)
   20166:	f44f 72e9 	mov.w	r2, #466	; 0x1d2
   2016a:	4621      	mov	r1, r4
   2016c:	482c      	ldr	r0, [pc, #176]	; (20220 <net_buf_slist_put+0xcc>)
   2016e:	f00a ff8e 	bl	2b08e <assert_print>
   20172:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
   20176:	4620      	mov	r0, r4
   20178:	f00a ff82 	bl	2b080 <assert_post_action>
   2017c:	e7ef      	b.n	2015e <net_buf_slist_put+0xa>
	__ASSERT_NO_MSG(buf);
   2017e:	4c27      	ldr	r4, [pc, #156]	; (2021c <net_buf_slist_put+0xc8>)
   20180:	f240 12d3 	movw	r2, #467	; 0x1d3
   20184:	4621      	mov	r1, r4
   20186:	4826      	ldr	r0, [pc, #152]	; (20220 <net_buf_slist_put+0xcc>)
   20188:	f00a ff81 	bl	2b08e <assert_print>
   2018c:	f240 11d3 	movw	r1, #467	; 0x1d3
   20190:	4620      	mov	r0, r4
   20192:	f00a ff75 	bl	2b080 <assert_post_action>
   20196:	e7e3      	b.n	20160 <net_buf_slist_put+0xc>

	for (tail = buf; tail->frags; tail = tail->frags) {
		tail->flags |= NET_BUF_FRAGS;
   20198:	7963      	ldrb	r3, [r4, #5]
   2019a:	f043 0301 	orr.w	r3, r3, #1
   2019e:	7163      	strb	r3, [r4, #5]
	for (tail = buf; tail->frags; tail = tail->frags) {
   201a0:	4614      	mov	r4, r2
   201a2:	6822      	ldr	r2, [r4, #0]
   201a4:	2a00      	cmp	r2, #0
   201a6:	d1f7      	bne.n	20198 <net_buf_slist_put+0x44>
	__asm__ volatile(
   201a8:	f04f 0340 	mov.w	r3, #64	; 0x40
   201ac:	f3ef 8711 	mrs	r7, BASEPRI
   201b0:	f383 8812 	msr	BASEPRI_MAX, r3
   201b4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   201b8:	481a      	ldr	r0, [pc, #104]	; (20224 <net_buf_slist_put+0xd0>)
   201ba:	f005 ff7d 	bl	260b8 <z_spin_lock_valid>
   201be:	b198      	cbz	r0, 201e8 <net_buf_slist_put+0x94>
	z_spin_lock_set_owner(l);
   201c0:	4818      	ldr	r0, [pc, #96]	; (20224 <net_buf_slist_put+0xd0>)
   201c2:	f005 ff99 	bl	260f8 <z_spin_lock_set_owner>
	}

	key = k_spin_lock(&net_buf_slist_lock);
	sys_slist_append_list(list, &buf->node, &tail->node);
   201c6:	4623      	mov	r3, r4
Z_GENLIST_APPEND_LIST(slist, snode)
   201c8:	b125      	cbz	r5, 201d4 <net_buf_slist_put+0x80>
   201ca:	b11c      	cbz	r4, 201d4 <net_buf_slist_put+0x80>
	return list->tail;
   201cc:	6872      	ldr	r2, [r6, #4]
Z_GENLIST_APPEND_LIST(slist, snode)
   201ce:	b1ba      	cbz	r2, 20200 <net_buf_slist_put+0xac>
	parent->next = child;
   201d0:	6015      	str	r5, [r2, #0]
	list->tail = node;
   201d2:	6073      	str	r3, [r6, #4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   201d4:	4813      	ldr	r0, [pc, #76]	; (20224 <net_buf_slist_put+0xd0>)
   201d6:	f005 ff7f 	bl	260d8 <z_spin_unlock_valid>
   201da:	b198      	cbz	r0, 20204 <net_buf_slist_put+0xb0>
	__asm__ volatile(
   201dc:	f387 8811 	msr	BASEPRI, r7
   201e0:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&net_buf_slist_lock, key);
}
   201e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   201e8:	f8df 803c 	ldr.w	r8, [pc, #60]	; 20228 <net_buf_slist_put+0xd4>
   201ec:	228e      	movs	r2, #142	; 0x8e
   201ee:	4641      	mov	r1, r8
   201f0:	480b      	ldr	r0, [pc, #44]	; (20220 <net_buf_slist_put+0xcc>)
   201f2:	f00a ff4c 	bl	2b08e <assert_print>
   201f6:	218e      	movs	r1, #142	; 0x8e
   201f8:	4640      	mov	r0, r8
   201fa:	f00a ff41 	bl	2b080 <assert_post_action>
   201fe:	e7df      	b.n	201c0 <net_buf_slist_put+0x6c>
	list->head = node;
   20200:	6035      	str	r5, [r6, #0]
}
   20202:	e7e6      	b.n	201d2 <net_buf_slist_put+0x7e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20204:	4c08      	ldr	r4, [pc, #32]	; (20228 <net_buf_slist_put+0xd4>)
   20206:	22b9      	movs	r2, #185	; 0xb9
   20208:	4621      	mov	r1, r4
   2020a:	4805      	ldr	r0, [pc, #20]	; (20220 <net_buf_slist_put+0xcc>)
   2020c:	f00a ff3f 	bl	2b08e <assert_print>
   20210:	21b9      	movs	r1, #185	; 0xb9
   20212:	4620      	mov	r0, r4
   20214:	f00a ff34 	bl	2b080 <assert_post_action>
   20218:	e7e0      	b.n	201dc <net_buf_slist_put+0x88>
   2021a:	bf00      	nop
   2021c:	00034370 	.word	0x00034370
   20220:	000318f8 	.word	0x000318f8
   20224:	20002808 	.word	0x20002808
   20228:	000319f0 	.word	0x000319f0

0002022c <net_buf_slist_get>:

struct net_buf *net_buf_slist_get(sys_slist_t *list)
{
   2022c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct net_buf *buf, *frag;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   20230:	4605      	mov	r5, r0
   20232:	b1c0      	cbz	r0, 20266 <net_buf_slist_get+0x3a>
	__asm__ volatile(
   20234:	f04f 0340 	mov.w	r3, #64	; 0x40
   20238:	f3ef 8711 	mrs	r7, BASEPRI
   2023c:	f383 8812 	msr	BASEPRI_MAX, r3
   20240:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20244:	4832      	ldr	r0, [pc, #200]	; (20310 <net_buf_slist_get+0xe4>)
   20246:	f005 ff37 	bl	260b8 <z_spin_lock_valid>
   2024a:	b1c8      	cbz	r0, 20280 <net_buf_slist_get+0x54>
	z_spin_lock_set_owner(l);
   2024c:	4830      	ldr	r0, [pc, #192]	; (20310 <net_buf_slist_get+0xe4>)
   2024e:	f005 ff53 	bl	260f8 <z_spin_lock_set_owner>
	return list->head;
   20252:	682e      	ldr	r6, [r5, #0]
Z_GENLIST_GET(slist, snode)
   20254:	2e00      	cmp	r6, #0
   20256:	d045      	beq.n	202e4 <net_buf_slist_get+0xb8>
	return node->next;
   20258:	6833      	ldr	r3, [r6, #0]
	list->head = node;
   2025a:	602b      	str	r3, [r5, #0]
	return list->tail;
   2025c:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2025e:	4296      	cmp	r6, r2
   20260:	d019      	beq.n	20296 <net_buf_slist_get+0x6a>
{
   20262:	4634      	mov	r4, r6
   20264:	e020      	b.n	202a8 <net_buf_slist_get+0x7c>
	__ASSERT_NO_MSG(list);
   20266:	4c2b      	ldr	r4, [pc, #172]	; (20314 <net_buf_slist_get+0xe8>)
   20268:	f240 12e3 	movw	r2, #483	; 0x1e3
   2026c:	4621      	mov	r1, r4
   2026e:	482a      	ldr	r0, [pc, #168]	; (20318 <net_buf_slist_get+0xec>)
   20270:	f00a ff0d 	bl	2b08e <assert_print>
   20274:	f240 11e3 	movw	r1, #483	; 0x1e3
   20278:	4620      	mov	r0, r4
   2027a:	f00a ff01 	bl	2b080 <assert_post_action>
   2027e:	e7d9      	b.n	20234 <net_buf_slist_get+0x8>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20280:	4c26      	ldr	r4, [pc, #152]	; (2031c <net_buf_slist_get+0xf0>)
   20282:	228e      	movs	r2, #142	; 0x8e
   20284:	4621      	mov	r1, r4
   20286:	4824      	ldr	r0, [pc, #144]	; (20318 <net_buf_slist_get+0xec>)
   20288:	f00a ff01 	bl	2b08e <assert_print>
   2028c:	218e      	movs	r1, #142	; 0x8e
   2028e:	4620      	mov	r0, r4
   20290:	f00a fef6 	bl	2b080 <assert_post_action>
   20294:	e7da      	b.n	2024c <net_buf_slist_get+0x20>
	list->tail = node;
   20296:	606b      	str	r3, [r5, #4]
}
   20298:	e7e3      	b.n	20262 <net_buf_slist_get+0x36>
	buf = (void *)sys_slist_get(list);

	if (buf) {
		/* Get any fragments belonging to this buffer */
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
			frag->frags = (void *)sys_slist_get(list);
   2029a:	6023      	str	r3, [r4, #0]
			__ASSERT_NO_MSG(frag->frags);
   2029c:	b193      	cbz	r3, 202c4 <net_buf_slist_get+0x98>

			/* The fragments flag is only for list-internal usage */
			frag->flags &= ~NET_BUF_FRAGS;
   2029e:	7963      	ldrb	r3, [r4, #5]
   202a0:	f023 0301 	bic.w	r3, r3, #1
   202a4:	7163      	strb	r3, [r4, #5]
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   202a6:	6824      	ldr	r4, [r4, #0]
   202a8:	7963      	ldrb	r3, [r4, #5]
   202aa:	f013 0f01 	tst.w	r3, #1
   202ae:	d017      	beq.n	202e0 <net_buf_slist_get+0xb4>
	return list->head;
   202b0:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET(slist, snode)
   202b2:	2b00      	cmp	r3, #0
   202b4:	d0f1      	beq.n	2029a <net_buf_slist_get+0x6e>
	return node->next;
   202b6:	681a      	ldr	r2, [r3, #0]
	list->head = node;
   202b8:	602a      	str	r2, [r5, #0]
	return list->tail;
   202ba:	6869      	ldr	r1, [r5, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   202bc:	428b      	cmp	r3, r1
   202be:	d1ec      	bne.n	2029a <net_buf_slist_get+0x6e>
	list->tail = node;
   202c0:	606a      	str	r2, [r5, #4]
}
   202c2:	e7ea      	b.n	2029a <net_buf_slist_get+0x6e>
			__ASSERT_NO_MSG(frag->frags);
   202c4:	f8df 804c 	ldr.w	r8, [pc, #76]	; 20314 <net_buf_slist_get+0xe8>
   202c8:	f240 12ed 	movw	r2, #493	; 0x1ed
   202cc:	4641      	mov	r1, r8
   202ce:	4812      	ldr	r0, [pc, #72]	; (20318 <net_buf_slist_get+0xec>)
   202d0:	f00a fedd 	bl	2b08e <assert_print>
   202d4:	f240 11ed 	movw	r1, #493	; 0x1ed
   202d8:	4640      	mov	r0, r8
   202da:	f00a fed1 	bl	2b080 <assert_post_action>
   202de:	e7de      	b.n	2029e <net_buf_slist_get+0x72>
		}

		/* Mark the end of the fragment list */
		frag->frags = NULL;
   202e0:	2300      	movs	r3, #0
   202e2:	6023      	str	r3, [r4, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   202e4:	480a      	ldr	r0, [pc, #40]	; (20310 <net_buf_slist_get+0xe4>)
   202e6:	f005 fef7 	bl	260d8 <z_spin_unlock_valid>
   202ea:	b130      	cbz	r0, 202fa <net_buf_slist_get+0xce>
	__asm__ volatile(
   202ec:	f387 8811 	msr	BASEPRI, r7
   202f0:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&net_buf_slist_lock, key);

	return buf;
}
   202f4:	4630      	mov	r0, r6
   202f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   202fa:	4c08      	ldr	r4, [pc, #32]	; (2031c <net_buf_slist_get+0xf0>)
   202fc:	22b9      	movs	r2, #185	; 0xb9
   202fe:	4621      	mov	r1, r4
   20300:	4805      	ldr	r0, [pc, #20]	; (20318 <net_buf_slist_get+0xec>)
   20302:	f00a fec4 	bl	2b08e <assert_print>
   20306:	21b9      	movs	r1, #185	; 0xb9
   20308:	4620      	mov	r0, r4
   2030a:	f00a feb9 	bl	2b080 <assert_post_action>
   2030e:	e7ed      	b.n	202ec <net_buf_slist_get+0xc0>
   20310:	20002808 	.word	0x20002808
   20314:	00034370 	.word	0x00034370
   20318:	000318f8 	.word	0x000318f8
   2031c:	000319f0 	.word	0x000319f0

00020320 <net_buf_put>:

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   20320:	b570      	push	{r4, r5, r6, lr}
   20322:	460c      	mov	r4, r1
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
   20324:	4605      	mov	r5, r0
   20326:	b110      	cbz	r0, 2032e <net_buf_put+0xe>
	__ASSERT_NO_MSG(buf);
   20328:	b174      	cbz	r4, 20348 <net_buf_put+0x28>
{
   2032a:	4622      	mov	r2, r4
   2032c:	e01e      	b.n	2036c <net_buf_put+0x4c>
	__ASSERT_NO_MSG(fifo);
   2032e:	4e13      	ldr	r6, [pc, #76]	; (2037c <net_buf_put+0x5c>)
   20330:	f44f 7200 	mov.w	r2, #512	; 0x200
   20334:	4631      	mov	r1, r6
   20336:	4812      	ldr	r0, [pc, #72]	; (20380 <net_buf_put+0x60>)
   20338:	f00a fea9 	bl	2b08e <assert_print>
   2033c:	f44f 7100 	mov.w	r1, #512	; 0x200
   20340:	4630      	mov	r0, r6
   20342:	f00a fe9d 	bl	2b080 <assert_post_action>
   20346:	e7ef      	b.n	20328 <net_buf_put+0x8>
	__ASSERT_NO_MSG(buf);
   20348:	4e0c      	ldr	r6, [pc, #48]	; (2037c <net_buf_put+0x5c>)
   2034a:	f240 2201 	movw	r2, #513	; 0x201
   2034e:	4631      	mov	r1, r6
   20350:	480b      	ldr	r0, [pc, #44]	; (20380 <net_buf_put+0x60>)
   20352:	f00a fe9c 	bl	2b08e <assert_print>
   20356:	f240 2101 	movw	r1, #513	; 0x201
   2035a:	4630      	mov	r0, r6
   2035c:	f00a fe90 	bl	2b080 <assert_post_action>
   20360:	e7e3      	b.n	2032a <net_buf_put+0xa>

	for (tail = buf; tail->frags; tail = tail->frags) {
		tail->flags |= NET_BUF_FRAGS;
   20362:	7953      	ldrb	r3, [r2, #5]
   20364:	f043 0301 	orr.w	r3, r3, #1
   20368:	7153      	strb	r3, [r2, #5]
	for (tail = buf; tail->frags; tail = tail->frags) {
   2036a:	4602      	mov	r2, r0
   2036c:	6810      	ldr	r0, [r2, #0]
   2036e:	2800      	cmp	r0, #0
   20370:	d1f7      	bne.n	20362 <net_buf_put+0x42>
	}

	k_fifo_put_list(fifo, buf, tail);
   20372:	4621      	mov	r1, r4
   20374:	4628      	mov	r0, r5
   20376:	f006 f909 	bl	2658c <k_queue_append_list>
}
   2037a:	bd70      	pop	{r4, r5, r6, pc}
   2037c:	00034370 	.word	0x00034370
   20380:	000318f8 	.word	0x000318f8

00020384 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   20384:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(buf);
   20386:	4604      	mov	r4, r0
   20388:	b9b8      	cbnz	r0, 203ba <net_buf_unref+0x36>
   2038a:	4d18      	ldr	r5, [pc, #96]	; (203ec <net_buf_unref+0x68>)
   2038c:	f44f 7204 	mov.w	r2, #528	; 0x210
   20390:	4629      	mov	r1, r5
   20392:	4817      	ldr	r0, [pc, #92]	; (203f0 <net_buf_unref+0x6c>)
   20394:	f00a fe7b 	bl	2b08e <assert_print>
   20398:	f44f 7104 	mov.w	r1, #528	; 0x210
   2039c:	4628      	mov	r0, r5
   2039e:	f00a fe6f 	bl	2b080 <assert_post_action>
   203a2:	e00a      	b.n	203ba <net_buf_unref+0x36>
		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
		}

		buf->data = NULL;
   203a4:	2300      	movs	r3, #0
   203a6:	60a3      	str	r3, [r4, #8]
		buf->frags = NULL;
   203a8:	6023      	str	r3, [r4, #0]

		pool = net_buf_pool_get(buf->pool_id);
   203aa:	79a0      	ldrb	r0, [r4, #6]
   203ac:	f7ff fd60 	bl	1fe70 <net_buf_pool_get>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   203b0:	6a83      	ldr	r3, [r0, #40]	; 0x28
   203b2:	b193      	cbz	r3, 203da <net_buf_unref+0x56>
			pool->destroy(buf);
   203b4:	4620      	mov	r0, r4
   203b6:	4798      	blx	r3
{
   203b8:	462c      	mov	r4, r5
	while (buf) {
   203ba:	b1ac      	cbz	r4, 203e8 <net_buf_unref+0x64>
		struct net_buf *frags = buf->frags;
   203bc:	6825      	ldr	r5, [r4, #0]
		if (--buf->ref > 0) {
   203be:	7923      	ldrb	r3, [r4, #4]
   203c0:	3b01      	subs	r3, #1
   203c2:	b2db      	uxtb	r3, r3
   203c4:	7123      	strb	r3, [r4, #4]
   203c6:	b97b      	cbnz	r3, 203e8 <net_buf_unref+0x64>
		if (buf->__buf) {
   203c8:	6921      	ldr	r1, [r4, #16]
   203ca:	2900      	cmp	r1, #0
   203cc:	d0ea      	beq.n	203a4 <net_buf_unref+0x20>
			data_unref(buf, buf->__buf);
   203ce:	4620      	mov	r0, r4
   203d0:	f00e fe84 	bl	2f0dc <data_unref>
			buf->__buf = NULL;
   203d4:	2300      	movs	r3, #0
   203d6:	6123      	str	r3, [r4, #16]
   203d8:	e7e4      	b.n	203a4 <net_buf_unref+0x20>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   203da:	79a0      	ldrb	r0, [r4, #6]
   203dc:	f7ff fd48 	bl	1fe70 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   203e0:	4621      	mov	r1, r4
   203e2:	f010 fb0a 	bl	309fa <k_queue_prepend>
}
   203e6:	e7e7      	b.n	203b8 <net_buf_unref+0x34>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   203e8:	bd38      	pop	{r3, r4, r5, pc}
   203ea:	bf00      	nop
   203ec:	00034370 	.word	0x00034370
   203f0:	000318f8 	.word	0x000318f8

000203f4 <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   203f4:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(buf);
   203f6:	4604      	mov	r4, r0
   203f8:	b120      	cbz	r0, 20404 <net_buf_ref+0x10>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   203fa:	7923      	ldrb	r3, [r4, #4]
   203fc:	3301      	adds	r3, #1
   203fe:	7123      	strb	r3, [r4, #4]
	return buf;
}
   20400:	4620      	mov	r0, r4
   20402:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(buf);
   20404:	4d06      	ldr	r5, [pc, #24]	; (20420 <net_buf_ref+0x2c>)
   20406:	f240 223f 	movw	r2, #575	; 0x23f
   2040a:	4629      	mov	r1, r5
   2040c:	4805      	ldr	r0, [pc, #20]	; (20424 <net_buf_ref+0x30>)
   2040e:	f00a fe3e 	bl	2b08e <assert_print>
   20412:	f240 213f 	movw	r1, #575	; 0x23f
   20416:	4628      	mov	r0, r5
   20418:	f00a fe32 	bl	2b080 <assert_post_action>
   2041c:	e7ed      	b.n	203fa <net_buf_ref+0x6>
   2041e:	bf00      	nop
   20420:	00034370 	.word	0x00034370
   20424:	000318f8 	.word	0x000318f8

00020428 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   20428:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(buf);
   2042a:	4604      	mov	r4, r0
   2042c:	b120      	cbz	r0, 20438 <net_buf_frag_last+0x10>

	while (buf->frags) {
   2042e:	4620      	mov	r0, r4
   20430:	6824      	ldr	r4, [r4, #0]
   20432:	2c00      	cmp	r4, #0
   20434:	d1fb      	bne.n	2042e <net_buf_frag_last+0x6>
		buf = buf->frags;
	}

	return buf;
}
   20436:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(buf);
   20438:	4d06      	ldr	r5, [pc, #24]	; (20454 <net_buf_frag_last+0x2c>)
   2043a:	f44f 721f 	mov.w	r2, #636	; 0x27c
   2043e:	4629      	mov	r1, r5
   20440:	4805      	ldr	r0, [pc, #20]	; (20458 <net_buf_frag_last+0x30>)
   20442:	f00a fe24 	bl	2b08e <assert_print>
   20446:	f44f 711f 	mov.w	r1, #636	; 0x27c
   2044a:	4628      	mov	r0, r5
   2044c:	f00a fe18 	bl	2b080 <assert_post_action>
   20450:	e7ed      	b.n	2042e <net_buf_frag_last+0x6>
   20452:	bf00      	nop
   20454:	00034370 	.word	0x00034370
   20458:	000318f8 	.word	0x000318f8

0002045c <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   2045c:	b570      	push	{r4, r5, r6, lr}
   2045e:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(parent);
   20460:	4605      	mov	r5, r0
   20462:	b148      	cbz	r0, 20478 <net_buf_frag_insert+0x1c>
	__ASSERT_NO_MSG(frag);
   20464:	b1ac      	cbz	r4, 20492 <net_buf_frag_insert+0x36>

	if (parent->frags) {
   20466:	682b      	ldr	r3, [r5, #0]
   20468:	b123      	cbz	r3, 20474 <net_buf_frag_insert+0x18>
		net_buf_frag_last(frag)->frags = parent->frags;
   2046a:	4620      	mov	r0, r4
   2046c:	f7ff ffdc 	bl	20428 <net_buf_frag_last>
   20470:	682b      	ldr	r3, [r5, #0]
   20472:	6003      	str	r3, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   20474:	602c      	str	r4, [r5, #0]
}
   20476:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(parent);
   20478:	4e0c      	ldr	r6, [pc, #48]	; (204ac <net_buf_frag_insert+0x50>)
   2047a:	f240 2287 	movw	r2, #647	; 0x287
   2047e:	4631      	mov	r1, r6
   20480:	480b      	ldr	r0, [pc, #44]	; (204b0 <net_buf_frag_insert+0x54>)
   20482:	f00a fe04 	bl	2b08e <assert_print>
   20486:	f240 2187 	movw	r1, #647	; 0x287
   2048a:	4630      	mov	r0, r6
   2048c:	f00a fdf8 	bl	2b080 <assert_post_action>
   20490:	e7e8      	b.n	20464 <net_buf_frag_insert+0x8>
	__ASSERT_NO_MSG(frag);
   20492:	4e06      	ldr	r6, [pc, #24]	; (204ac <net_buf_frag_insert+0x50>)
   20494:	f44f 7222 	mov.w	r2, #648	; 0x288
   20498:	4631      	mov	r1, r6
   2049a:	4805      	ldr	r0, [pc, #20]	; (204b0 <net_buf_frag_insert+0x54>)
   2049c:	f00a fdf7 	bl	2b08e <assert_print>
   204a0:	f44f 7122 	mov.w	r1, #648	; 0x288
   204a4:	4630      	mov	r0, r6
   204a6:	f00a fdeb 	bl	2b080 <assert_post_action>
   204aa:	e7dc      	b.n	20466 <net_buf_frag_insert+0xa>
   204ac:	00034370 	.word	0x00034370
   204b0:	000318f8 	.word	0x000318f8

000204b4 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   204b4:	b570      	push	{r4, r5, r6, lr}
   204b6:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(frag);
   204b8:	460d      	mov	r5, r1
   204ba:	b141      	cbz	r1, 204ce <net_buf_frag_add+0x1a>

	if (!head) {
   204bc:	b1a4      	cbz	r4, 204e8 <net_buf_frag_add+0x34>
		return net_buf_ref(frag);
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);
   204be:	4620      	mov	r0, r4
   204c0:	f7ff ffb2 	bl	20428 <net_buf_frag_last>
   204c4:	4629      	mov	r1, r5
   204c6:	f7ff ffc9 	bl	2045c <net_buf_frag_insert>

	return head;
   204ca:	4620      	mov	r0, r4
}
   204cc:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(frag);
   204ce:	4e08      	ldr	r6, [pc, #32]	; (204f0 <net_buf_frag_add+0x3c>)
   204d0:	f240 2293 	movw	r2, #659	; 0x293
   204d4:	4631      	mov	r1, r6
   204d6:	4807      	ldr	r0, [pc, #28]	; (204f4 <net_buf_frag_add+0x40>)
   204d8:	f00a fdd9 	bl	2b08e <assert_print>
   204dc:	f240 2193 	movw	r1, #659	; 0x293
   204e0:	4630      	mov	r0, r6
   204e2:	f00a fdcd 	bl	2b080 <assert_post_action>
   204e6:	e7e9      	b.n	204bc <net_buf_frag_add+0x8>
		return net_buf_ref(frag);
   204e8:	4628      	mov	r0, r5
   204ea:	f7ff ff83 	bl	203f4 <net_buf_ref>
   204ee:	e7ed      	b.n	204cc <net_buf_frag_add+0x18>
   204f0:	00034370 	.word	0x00034370
   204f4:	000318f8 	.word	0x000318f8

000204f8 <net_buf_simple_pull>:

	sys_put_be64(val, net_buf_simple_push(buf, sizeof(val)));
}

void *net_buf_simple_pull(struct net_buf_simple *buf, size_t len)
{
   204f8:	b570      	push	{r4, r5, r6, lr}
   204fa:	4604      	mov	r4, r0
   204fc:	460d      	mov	r5, r1
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);
   204fe:	8883      	ldrh	r3, [r0, #4]
   20500:	428b      	cmp	r3, r1
   20502:	d306      	bcc.n	20512 <net_buf_simple_pull+0x1a>

	buf->len -= len;
   20504:	88a3      	ldrh	r3, [r4, #4]
   20506:	1b5b      	subs	r3, r3, r5
   20508:	80a3      	strh	r3, [r4, #4]
	return buf->data += len;
   2050a:	6820      	ldr	r0, [r4, #0]
   2050c:	4428      	add	r0, r5
   2050e:	6020      	str	r0, [r4, #0]
}
   20510:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(buf->len >= len);
   20512:	4e06      	ldr	r6, [pc, #24]	; (2052c <net_buf_simple_pull+0x34>)
   20514:	f240 4277 	movw	r2, #1143	; 0x477
   20518:	4631      	mov	r1, r6
   2051a:	4805      	ldr	r0, [pc, #20]	; (20530 <net_buf_simple_pull+0x38>)
   2051c:	f00a fdb7 	bl	2b08e <assert_print>
   20520:	f240 4177 	movw	r1, #1143	; 0x477
   20524:	4630      	mov	r0, r6
   20526:	f00a fdab 	bl	2b080 <assert_post_action>
   2052a:	e7eb      	b.n	20504 <net_buf_simple_pull+0xc>
   2052c:	00034370 	.word	0x00034370
   20530:	000318f8 	.word	0x000318f8

00020534 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   20534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20536:	4604      	mov	r4, r0
   20538:	460d      	mov	r5, r1
	void *data = buf->data;
   2053a:	6806      	ldr	r6, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);
   2053c:	8883      	ldrh	r3, [r0, #4]
   2053e:	428b      	cmp	r3, r1
   20540:	d307      	bcc.n	20552 <net_buf_simple_pull_mem+0x1e>

	buf->len -= len;
   20542:	88a3      	ldrh	r3, [r4, #4]
   20544:	1b5b      	subs	r3, r3, r5
   20546:	80a3      	strh	r3, [r4, #4]
	buf->data += len;
   20548:	6821      	ldr	r1, [r4, #0]
   2054a:	4429      	add	r1, r5
   2054c:	6021      	str	r1, [r4, #0]

	return data;
}
   2054e:	4630      	mov	r0, r6
   20550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT_NO_MSG(buf->len >= len);
   20552:	4f06      	ldr	r7, [pc, #24]	; (2056c <net_buf_simple_pull_mem+0x38>)
   20554:	f240 4283 	movw	r2, #1155	; 0x483
   20558:	4639      	mov	r1, r7
   2055a:	4805      	ldr	r0, [pc, #20]	; (20570 <net_buf_simple_pull_mem+0x3c>)
   2055c:	f00a fd97 	bl	2b08e <assert_print>
   20560:	f240 4183 	movw	r1, #1155	; 0x483
   20564:	4638      	mov	r0, r7
   20566:	f00a fd8b 	bl	2b080 <assert_post_action>
   2056a:	e7ea      	b.n	20542 <net_buf_simple_pull_mem+0xe>
   2056c:	00034370 	.word	0x00034370
   20570:	000318f8 	.word	0x000318f8

00020574 <net_buf_simple_push>:
{
   20574:	b570      	push	{r4, r5, r6, lr}
   20576:	4605      	mov	r5, r0
   20578:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   2057a:	f00e fdf4 	bl	2f166 <net_buf_simple_headroom>
   2057e:	42a0      	cmp	r0, r4
   20580:	d306      	bcc.n	20590 <net_buf_simple_push+0x1c>
	buf->data -= len;
   20582:	6828      	ldr	r0, [r5, #0]
   20584:	1b00      	subs	r0, r0, r4
   20586:	6028      	str	r0, [r5, #0]
	buf->len += len;
   20588:	88a9      	ldrh	r1, [r5, #4]
   2058a:	440c      	add	r4, r1
   2058c:	80ac      	strh	r4, [r5, #4]
}
   2058e:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   20590:	4e06      	ldr	r6, [pc, #24]	; (205ac <net_buf_simple_push+0x38>)
   20592:	f240 4217 	movw	r2, #1047	; 0x417
   20596:	4631      	mov	r1, r6
   20598:	4805      	ldr	r0, [pc, #20]	; (205b0 <net_buf_simple_push+0x3c>)
   2059a:	f00a fd78 	bl	2b08e <assert_print>
   2059e:	f240 4117 	movw	r1, #1047	; 0x417
   205a2:	4630      	mov	r0, r6
   205a4:	f00a fd6c 	bl	2b080 <assert_post_action>
   205a8:	e7eb      	b.n	20582 <net_buf_simple_push+0xe>
   205aa:	bf00      	nop
   205ac:	00034370 	.word	0x00034370
   205b0:	000318f8 	.word	0x000318f8

000205b4 <net_buf_simple_add>:
{
   205b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   205b6:	4604      	mov	r4, r0
   205b8:	460d      	mov	r5, r1
	return buf->data + buf->len;
   205ba:	6803      	ldr	r3, [r0, #0]
   205bc:	8886      	ldrh	r6, [r0, #4]
   205be:	441e      	add	r6, r3
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   205c0:	f00e fdd5 	bl	2f16e <net_buf_simple_tailroom>
   205c4:	42a8      	cmp	r0, r5
   205c6:	d304      	bcc.n	205d2 <net_buf_simple_add+0x1e>
	buf->len += len;
   205c8:	88a1      	ldrh	r1, [r4, #4]
   205ca:	440d      	add	r5, r1
   205cc:	80a5      	strh	r5, [r4, #4]
}
   205ce:	4630      	mov	r0, r6
   205d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   205d2:	4f06      	ldr	r7, [pc, #24]	; (205ec <net_buf_simple_add+0x38>)
   205d4:	f44f 724a 	mov.w	r2, #808	; 0x328
   205d8:	4639      	mov	r1, r7
   205da:	4805      	ldr	r0, [pc, #20]	; (205f0 <net_buf_simple_add+0x3c>)
   205dc:	f00a fd57 	bl	2b08e <assert_print>
   205e0:	f44f 714a 	mov.w	r1, #808	; 0x328
   205e4:	4638      	mov	r0, r7
   205e6:	f00a fd4b 	bl	2b080 <assert_post_action>
   205ea:	e7ed      	b.n	205c8 <net_buf_simple_add+0x14>
   205ec:	00034370 	.word	0x00034370
   205f0:	000318f8 	.word	0x000318f8

000205f4 <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(const struct device *dev)
{
   205f4:	b508      	push	{r3, lr}
	entropy_driver = DEVICE_DT_GET(DT_CHOSEN(zephyr_entropy));
   205f6:	4805      	ldr	r0, [pc, #20]	; (2060c <xoshiro128_initialize+0x18>)
   205f8:	4b05      	ldr	r3, [pc, #20]	; (20610 <xoshiro128_initialize+0x1c>)
   205fa:	6018      	str	r0, [r3, #0]
   205fc:	f010 f94e 	bl	3089c <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
   20600:	b108      	cbz	r0, 20606 <xoshiro128_initialize+0x12>
		return -ENODEV;
	}
	return 0;
   20602:	2000      	movs	r0, #0
}
   20604:	bd08      	pop	{r3, pc}
		return -ENODEV;
   20606:	f06f 0012 	mvn.w	r0, #18
   2060a:	e7fb      	b.n	20604 <xoshiro128_initialize+0x10>
   2060c:	000310c4 	.word	0x000310c4
   20610:	2000280c 	.word	0x2000280c

00020614 <adc_context_start_sampling>:
    return (p_reg->STATUS == (SAADC_STATUS_STATUS_Busy << SAADC_STATUS_STATUS_Pos));
}

NRF_STATIC_INLINE void nrf_saadc_enable(NRF_SAADC_Type * p_reg)
{
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
   20614:	4b07      	ldr	r3, [pc, #28]	; (20634 <adc_context_start_sampling+0x20>)
   20616:	2201      	movs	r2, #1
   20618:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
   2061c:	f890 308e 	ldrb.w	r3, [r0, #142]	; 0x8e
   20620:	b113      	cbz	r3, 20628 <adc_context_start_sampling+0x14>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20622:	4b04      	ldr	r3, [pc, #16]	; (20634 <adc_context_start_sampling+0x20>)
   20624:	60da      	str	r2, [r3, #12]
}
   20626:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20628:	4b02      	ldr	r3, [pc, #8]	; (20634 <adc_context_start_sampling+0x20>)
   2062a:	2201      	movs	r2, #1
   2062c:	601a      	str	r2, [r3, #0]
   2062e:	605a      	str	r2, [r3, #4]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
   20630:	4770      	bx	lr
   20632:	bf00      	nop
   20634:	40007000 	.word	0x40007000

00020638 <adc_context_update_buffer_pointer>:
static void adc_context_update_buffer_pointer(struct adc_context *ctx,
					      bool repeat)
{
	ARG_UNUSED(ctx);

	if (!repeat) {
   20638:	b949      	cbnz	r1, 2064e <adc_context_update_buffer_pointer+0x16>
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
}

NRF_STATIC_INLINE nrf_saadc_value_t * nrf_saadc_buffer_pointer_get(NRF_SAADC_Type const * p_reg)
{
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
   2063a:	4b05      	ldr	r3, [pc, #20]	; (20650 <adc_context_update_buffer_pointer+0x18>)
   2063c:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
}

NRF_STATIC_INLINE uint16_t nrf_saadc_amount_get(NRF_SAADC_Type const * p_reg)
{
    return p_reg->RESULT.AMOUNT;
   20640:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
		nrf_saadc_buffer_pointer_set(
			NRF_SAADC,
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
   20644:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
   20646:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   2064a:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			nrf_saadc_amount_get(NRF_SAADC));
	}
}
   2064e:	4770      	bx	lr
   20650:	40007000 	.word	0x40007000

00020654 <set_resolution>:

static int set_resolution(const struct adc_sequence *sequence)
{
   20654:	b508      	push	{r3, lr}
	nrf_saadc_resolution_t nrf_resolution;

	switch (sequence->resolution) {
   20656:	7c02      	ldrb	r2, [r0, #16]
   20658:	f1a2 0308 	sub.w	r3, r2, #8
   2065c:	2b06      	cmp	r3, #6
   2065e:	d80d      	bhi.n	2067c <set_resolution+0x28>
   20660:	e8df f003 	tbb	[pc, r3]
   20664:	0c150c13 	.word	0x0c150c13
   20668:	0c04      	.short	0x0c04
   2066a:	0a          	.byte	0x0a
   2066b:	00          	.byte	0x00
		break;
	case 10:
		nrf_resolution = NRF_SAADC_RESOLUTION_10BIT;
		break;
	case 12:
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
   2066c:	2202      	movs	r2, #2
}

NRF_STATIC_INLINE void nrf_saadc_resolution_set(NRF_SAADC_Type *       p_reg,
                                                nrf_saadc_resolution_t resolution)
{
    p_reg->RESOLUTION = resolution;
   2066e:	4b09      	ldr	r3, [pc, #36]	; (20694 <set_resolution+0x40>)
   20670:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
			    sequence->resolution);
		return -EINVAL;
	}

	nrf_saadc_resolution_set(NRF_SAADC, nrf_resolution);
	return 0;
   20674:	2000      	movs	r0, #0
}
   20676:	bd08      	pop	{r3, pc}
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
   20678:	2203      	movs	r2, #3
		break;
   2067a:	e7f8      	b.n	2066e <set_resolution+0x1a>
		LOG_ERR("ADC resolution value %d is not valid",
   2067c:	2145      	movs	r1, #69	; 0x45
   2067e:	4806      	ldr	r0, [pc, #24]	; (20698 <set_resolution+0x44>)
   20680:	f00a fd14 	bl	2b0ac <z_log_minimal_printk>
		return -EINVAL;
   20684:	f06f 0015 	mvn.w	r0, #21
   20688:	e7f5      	b.n	20676 <set_resolution+0x22>
	switch (sequence->resolution) {
   2068a:	2200      	movs	r2, #0
   2068c:	e7ef      	b.n	2066e <set_resolution+0x1a>
		nrf_resolution = NRF_SAADC_RESOLUTION_10BIT;
   2068e:	2201      	movs	r2, #1
   20690:	e7ed      	b.n	2066e <set_resolution+0x1a>
   20692:	bf00      	nop
   20694:	40007000 	.word	0x40007000
   20698:	000343a8 	.word	0x000343a8

0002069c <set_oversampling>:

static int set_oversampling(const struct adc_sequence *sequence,
			    uint8_t active_channels)
{
   2069c:	b508      	push	{r3, lr}
	nrf_saadc_oversample_t nrf_oversampling;

	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   2069e:	2901      	cmp	r1, #1
   206a0:	d901      	bls.n	206a6 <set_oversampling+0xa>
   206a2:	7c43      	ldrb	r3, [r0, #17]
   206a4:	b94b      	cbnz	r3, 206ba <set_oversampling+0x1e>
		LOG_ERR(
			"Oversampling is supported for single channel only");
		return -EINVAL;
	}

	switch (sequence->oversampling) {
   206a6:	7c42      	ldrb	r2, [r0, #17]
   206a8:	2a08      	cmp	r2, #8
   206aa:	d80d      	bhi.n	206c8 <set_oversampling+0x2c>
   206ac:	e8df f002 	tbb	[pc, r2]
   206b0:	13131313 	.word	0x13131313
   206b4:	13131313 	.word	0x13131313
   206b8:	13          	.byte	0x13
   206b9:	00          	.byte	0x00
		LOG_ERR(
   206ba:	2145      	movs	r1, #69	; 0x45
   206bc:	4808      	ldr	r0, [pc, #32]	; (206e0 <set_oversampling+0x44>)
   206be:	f00a fcf5 	bl	2b0ac <z_log_minimal_printk>
		return -EINVAL;
   206c2:	f06f 0015 	mvn.w	r0, #21
   206c6:	e00a      	b.n	206de <set_oversampling+0x42>
		break;
	case 8:
		nrf_oversampling = NRF_SAADC_OVERSAMPLE_256X;
		break;
	default:
		LOG_ERR("Oversampling value %d is not valid",
   206c8:	2145      	movs	r1, #69	; 0x45
   206ca:	4806      	ldr	r0, [pc, #24]	; (206e4 <set_oversampling+0x48>)
   206cc:	f00a fcee 	bl	2b0ac <z_log_minimal_printk>
			    sequence->oversampling);
		return -EINVAL;
   206d0:	f06f 0015 	mvn.w	r0, #21
   206d4:	e003      	b.n	206de <set_oversampling+0x42>
}

NRF_STATIC_INLINE void nrf_saadc_oversample_set(NRF_SAADC_Type *       p_reg,
                                                nrf_saadc_oversample_t oversample)
{
    p_reg->OVERSAMPLE = oversample;
   206d6:	4b04      	ldr	r3, [pc, #16]	; (206e8 <set_oversampling+0x4c>)
   206d8:	f8c3 25f4 	str.w	r2, [r3, #1524]	; 0x5f4
	}

	nrf_saadc_oversample_set(NRF_SAADC, nrf_oversampling);
	return 0;
   206dc:	2000      	movs	r0, #0
}
   206de:	bd08      	pop	{r3, pc}
   206e0:	000343d4 	.word	0x000343d4
   206e4:	0003440c 	.word	0x0003440c
   206e8:	40007000 	.word	0x40007000

000206ec <check_buffer_size>:

static int check_buffer_size(const struct adc_sequence *sequence,
			     uint8_t active_channels)
{
   206ec:	b508      	push	{r3, lr}
	size_t needed_buffer_size;

	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
   206ee:	0049      	lsls	r1, r1, #1
	if (sequence->options) {
   206f0:	6803      	ldr	r3, [r0, #0]
   206f2:	b113      	cbz	r3, 206fa <check_buffer_size+0xe>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
   206f4:	899b      	ldrh	r3, [r3, #12]
   206f6:	fb03 1101 	mla	r1, r3, r1, r1
	}

	if (sequence->buffer_size < needed_buffer_size) {
   206fa:	68c2      	ldr	r2, [r0, #12]
   206fc:	428a      	cmp	r2, r1
   206fe:	d301      	bcc.n	20704 <check_buffer_size+0x18>
		LOG_ERR("Provided buffer is too small (%u/%u)",
			    sequence->buffer_size, needed_buffer_size);
		return -ENOMEM;
	}

	return 0;
   20700:	2000      	movs	r0, #0
}
   20702:	bd08      	pop	{r3, pc}
		LOG_ERR("Provided buffer is too small (%u/%u)",
   20704:	460b      	mov	r3, r1
   20706:	2145      	movs	r1, #69	; 0x45
   20708:	4802      	ldr	r0, [pc, #8]	; (20714 <check_buffer_size+0x28>)
   2070a:	f00a fccf 	bl	2b0ac <z_log_minimal_printk>
		return -ENOMEM;
   2070e:	f06f 000b 	mvn.w	r0, #11
   20712:	e7f6      	b.n	20702 <check_buffer_size+0x16>
   20714:	00034434 	.word	0x00034434

00020718 <adc_nrfx_channel_setup>:
{
   20718:	b510      	push	{r4, lr}
   2071a:	b082      	sub	sp, #8
	nrf_saadc_channel_config_t config = {
   2071c:	2300      	movs	r3, #0
   2071e:	9300      	str	r3, [sp, #0]
   20720:	f8cd 3003 	str.w	r3, [sp, #3]
	uint8_t channel_id = channel_cfg->channel_id;
   20724:	790a      	ldrb	r2, [r1, #4]
   20726:	f002 021f 	and.w	r2, r2, #31
	if (channel_id >= SAADC_CH_NUM) {
   2072a:	2a07      	cmp	r2, #7
   2072c:	f200 80bf 	bhi.w	208ae <adc_nrfx_channel_setup+0x196>
	switch (channel_cfg->gain) {
   20730:	780b      	ldrb	r3, [r1, #0]
   20732:	2b0b      	cmp	r3, #11
   20734:	d82e      	bhi.n	20794 <adc_nrfx_channel_setup+0x7c>
   20736:	e8df f003 	tbb	[pc, r3]
   2073a:	0609      	.short	0x0609
   2073c:	1d2d1915 	.word	0x1d2d1915
   20740:	25212d2d 	.word	0x25212d2d
   20744:	292d      	.short	0x292d
		config.gain = NRF_SAADC_GAIN1_5;
   20746:	2301      	movs	r3, #1
   20748:	f88d 3002 	strb.w	r3, [sp, #2]
	switch (channel_cfg->reference) {
   2074c:	784b      	ldrb	r3, [r1, #1]
   2074e:	2b03      	cmp	r3, #3
   20750:	d027      	beq.n	207a2 <adc_nrfx_channel_setup+0x8a>
   20752:	2b04      	cmp	r3, #4
   20754:	d028      	beq.n	207a8 <adc_nrfx_channel_setup+0x90>
		LOG_ERR("Selected ADC reference is not valid");
   20756:	2145      	movs	r1, #69	; 0x45
   20758:	4856      	ldr	r0, [pc, #344]	; (208b4 <adc_nrfx_channel_setup+0x19c>)
   2075a:	f00a fca7 	bl	2b0ac <z_log_minimal_printk>
		return -EINVAL;
   2075e:	f06f 0015 	mvn.w	r0, #21
   20762:	e08b      	b.n	2087c <adc_nrfx_channel_setup+0x164>
		config.gain = NRF_SAADC_GAIN1_4;
   20764:	2302      	movs	r3, #2
   20766:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
   2076a:	e7ef      	b.n	2074c <adc_nrfx_channel_setup+0x34>
		config.gain = NRF_SAADC_GAIN1_3;
   2076c:	2303      	movs	r3, #3
   2076e:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
   20772:	e7eb      	b.n	2074c <adc_nrfx_channel_setup+0x34>
		config.gain = NRF_SAADC_GAIN1_2;
   20774:	2304      	movs	r3, #4
   20776:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
   2077a:	e7e7      	b.n	2074c <adc_nrfx_channel_setup+0x34>
		config.gain = NRF_SAADC_GAIN1;
   2077c:	2305      	movs	r3, #5
   2077e:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
   20782:	e7e3      	b.n	2074c <adc_nrfx_channel_setup+0x34>
		config.gain = NRF_SAADC_GAIN2;
   20784:	2306      	movs	r3, #6
   20786:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
   2078a:	e7df      	b.n	2074c <adc_nrfx_channel_setup+0x34>
		config.gain = NRF_SAADC_GAIN4;
   2078c:	2307      	movs	r3, #7
   2078e:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
   20792:	e7db      	b.n	2074c <adc_nrfx_channel_setup+0x34>
		LOG_ERR("Selected ADC gain is not valid");
   20794:	2145      	movs	r1, #69	; 0x45
   20796:	4848      	ldr	r0, [pc, #288]	; (208b8 <adc_nrfx_channel_setup+0x1a0>)
   20798:	f00a fc88 	bl	2b0ac <z_log_minimal_printk>
		return -EINVAL;
   2079c:	f06f 0015 	mvn.w	r0, #21
   207a0:	e06c      	b.n	2087c <adc_nrfx_channel_setup+0x164>
		config.reference = NRF_SAADC_REFERENCE_VDD4;
   207a2:	2301      	movs	r3, #1
   207a4:	f88d 3003 	strb.w	r3, [sp, #3]
	switch (channel_cfg->acquisition_time) {
   207a8:	884b      	ldrh	r3, [r1, #2]
   207aa:	2b00      	cmp	r3, #0
   207ac:	d068      	beq.n	20880 <adc_nrfx_channel_setup+0x168>
   207ae:	f244 0028 	movw	r0, #16424	; 0x4028
   207b2:	4283      	cmp	r3, r0
   207b4:	d874      	bhi.n	208a0 <adc_nrfx_channel_setup+0x188>
   207b6:	f244 0003 	movw	r0, #16387	; 0x4003
   207ba:	4283      	cmp	r3, r0
   207bc:	d370      	bcc.n	208a0 <adc_nrfx_channel_setup+0x188>
   207be:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
   207c2:	3b03      	subs	r3, #3
   207c4:	2b25      	cmp	r3, #37	; 0x25
   207c6:	d86b      	bhi.n	208a0 <adc_nrfx_channel_setup+0x188>
   207c8:	e8df f003 	tbb	[pc, r3]
   207cc:	6a136a16 	.word	0x6a136a16
   207d0:	5a6a6a6a 	.word	0x5a6a6a6a
   207d4:	6a6a6a6a 	.word	0x6a6a6a6a
   207d8:	6a6a6a5e 	.word	0x6a6a6a5e
   207dc:	6a6a626a 	.word	0x6a6a626a
   207e0:	6a6a6a6a 	.word	0x6a6a6a6a
   207e4:	6a6a6a6a 	.word	0x6a6a6a6a
   207e8:	6a6a6a6a 	.word	0x6a6a6a6a
   207ec:	6a6a6a6a 	.word	0x6a6a6a6a
   207f0:	666a      	.short	0x666a
		config.acq_time = NRF_SAADC_ACQTIME_5US;
   207f2:	2301      	movs	r3, #1
   207f4:	f88d 3004 	strb.w	r3, [sp, #4]
	config.mode = (channel_cfg->differential ?
   207f8:	790b      	ldrb	r3, [r1, #4]
		NRF_SAADC_MODE_DIFFERENTIAL : NRF_SAADC_MODE_SINGLE_ENDED);
   207fa:	f3c3 1340 	ubfx	r3, r3, #5, #1
	config.mode = (channel_cfg->differential ?
   207fe:	f88d 3005 	strb.w	r3, [sp, #5]
NRF_STATIC_INLINE void nrf_saadc_channel_init(NRF_SAADC_Type *                   p_reg,
                                              uint8_t                            channel,
                                              nrf_saadc_channel_config_t const * config)
{
    p_reg->CH[channel].CONFIG =
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
   20802:	f89d 3000 	ldrb.w	r3, [sp]
   20806:	f003 0303 	and.w	r3, r3, #3
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
   2080a:	f89d 0001 	ldrb.w	r0, [sp, #1]
   2080e:	0100      	lsls	r0, r0, #4
   20810:	f000 0030 	and.w	r0, r0, #48	; 0x30
   20814:	4303      	orrs	r3, r0
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
   20816:	f89d 0002 	ldrb.w	r0, [sp, #2]
   2081a:	0200      	lsls	r0, r0, #8
   2081c:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
   20820:	4303      	orrs	r3, r0
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
   20822:	f89d 0003 	ldrb.w	r0, [sp, #3]
   20826:	0300      	lsls	r0, r0, #12
   20828:	f400 5080 	and.w	r0, r0, #4096	; 0x1000
   2082c:	4303      	orrs	r3, r0
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
   2082e:	f89d 0004 	ldrb.w	r0, [sp, #4]
   20832:	0400      	lsls	r0, r0, #16
   20834:	f400 20e0 	and.w	r0, r0, #458752	; 0x70000
   20838:	4303      	orrs	r3, r0
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   2083a:	f89d 0005 	ldrb.w	r0, [sp, #5]
   2083e:	0500      	lsls	r0, r0, #20
   20840:	f400 1080 	and.w	r0, r0, #1048576	; 0x100000
   20844:	4303      	orrs	r3, r0
            | ((config->burst      << SAADC_CH_CONFIG_BURST_Pos)  & SAADC_CH_CONFIG_BURST_Msk);
   20846:	f89d 0006 	ldrb.w	r0, [sp, #6]
   2084a:	0600      	lsls	r0, r0, #24
   2084c:	f000 7080 	and.w	r0, r0, #16777216	; 0x1000000
   20850:	4303      	orrs	r3, r0
    p_reg->CH[channel].CONFIG =
   20852:	4c1a      	ldr	r4, [pc, #104]	; (208bc <adc_nrfx_channel_setup+0x1a4>)
   20854:	eb04 1002 	add.w	r0, r4, r2, lsl #4
   20858:	f8c0 3518 	str.w	r3, [r0, #1304]	; 0x518
				    channel_cfg->input_negative);
   2085c:	7988      	ldrb	r0, [r1, #6]
    p_reg->CH[channel].PSELN = pseln;
   2085e:	f102 0351 	add.w	r3, r2, #81	; 0x51
   20862:	ea4f 1c03 	mov.w	ip, r3, lsl #4
   20866:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   2086a:	6058      	str	r0, [r3, #4]
    p_reg->CH[channel].PSELP = pselp;
   2086c:	2000      	movs	r0, #0
   2086e:	f844 000c 	str.w	r0, [r4, ip]
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
   20872:	7949      	ldrb	r1, [r1, #5]
   20874:	4b12      	ldr	r3, [pc, #72]	; (208c0 <adc_nrfx_channel_setup+0x1a8>)
   20876:	441a      	add	r2, r3
   20878:	f882 10a8 	strb.w	r1, [r2, #168]	; 0xa8
}
   2087c:	b002      	add	sp, #8
   2087e:	bd10      	pop	{r4, pc}
		config.acq_time = NRF_SAADC_ACQTIME_10US;
   20880:	2302      	movs	r3, #2
   20882:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
   20886:	e7b7      	b.n	207f8 <adc_nrfx_channel_setup+0xe0>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
   20888:	2303      	movs	r3, #3
   2088a:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
   2088e:	e7b3      	b.n	207f8 <adc_nrfx_channel_setup+0xe0>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
   20890:	2304      	movs	r3, #4
   20892:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
   20896:	e7af      	b.n	207f8 <adc_nrfx_channel_setup+0xe0>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
   20898:	2305      	movs	r3, #5
   2089a:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
   2089e:	e7ab      	b.n	207f8 <adc_nrfx_channel_setup+0xe0>
		LOG_ERR("Selected ADC acquisition time is not valid");
   208a0:	2145      	movs	r1, #69	; 0x45
   208a2:	4808      	ldr	r0, [pc, #32]	; (208c4 <adc_nrfx_channel_setup+0x1ac>)
   208a4:	f00a fc02 	bl	2b0ac <z_log_minimal_printk>
		return -EINVAL;
   208a8:	f06f 0015 	mvn.w	r0, #21
   208ac:	e7e6      	b.n	2087c <adc_nrfx_channel_setup+0x164>
		return -EINVAL;
   208ae:	f06f 0015 	mvn.w	r0, #21
   208b2:	e7e3      	b.n	2087c <adc_nrfx_channel_setup+0x164>
   208b4:	00034484 	.word	0x00034484
   208b8:	00034460 	.word	0x00034460
   208bc:	40007000 	.word	0x40007000
   208c0:	200004b8 	.word	0x200004b8
   208c4:	000344b0 	.word	0x000344b0

000208c8 <start_read>:

static int start_read(const struct device *dev,
		      const struct adc_sequence *sequence)
{
   208c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   208ca:	b083      	sub	sp, #12
	int error;
	uint32_t selected_channels = sequence->channels;
   208cc:	684e      	ldr	r6, [r1, #4]
	uint8_t channel_id;

	/* Signal an error if channel selection is invalid (no channels or
	 * a non-existing one is selected).
	 */
	if (!selected_channels ||
   208ce:	b136      	cbz	r6, 208de <start_read+0x16>
   208d0:	460d      	mov	r5, r1
   208d2:	f036 03ff 	bics.w	r3, r6, #255	; 0xff
   208d6:	d102      	bne.n	208de <start_read+0x16>
	active_channels = 0U;

	/* Enable only the channels selected for the pointed sequence.
	 * Disable all the rest.
	 */
	channel_id = 0U;
   208d8:	2300      	movs	r3, #0
	active_channels = 0U;
   208da:	461c      	mov	r4, r3
   208dc:	e017      	b.n	2090e <start_read+0x46>
		LOG_ERR("Invalid selection of channels");
   208de:	2145      	movs	r1, #69	; 0x45
   208e0:	4851      	ldr	r0, [pc, #324]	; (20a28 <start_read+0x160>)
   208e2:	f00a fbe3 	bl	2b0ac <z_log_minimal_printk>
		return -EINVAL;
   208e6:	f06f 0615 	mvn.w	r6, #21
   208ea:	e038      	b.n	2095e <start_read+0x96>
		if (selected_channels & BIT(channel_id)) {
			/* Signal an error if a selected channel has not been
			 * configured yet.
			 */
			if (m_data.positive_inputs[channel_id] == 0U) {
				LOG_ERR("Channel %u not configured",
   208ec:	2145      	movs	r1, #69	; 0x45
   208ee:	484f      	ldr	r0, [pc, #316]	; (20a2c <start_read+0x164>)
   208f0:	f00a fbdc 	bl	2b0ac <z_log_minimal_printk>
					    channel_id);
				return -EINVAL;
   208f4:	f06f 0615 	mvn.w	r6, #21
   208f8:	e031      	b.n	2095e <start_read+0x96>
    p_reg->CH[channel].PSELP = pselp;
   208fa:	f103 0251 	add.w	r2, r3, #81	; 0x51
   208fe:	0112      	lsls	r2, r2, #4
   20900:	494b      	ldr	r1, [pc, #300]	; (20a30 <start_read+0x168>)
   20902:	2000      	movs	r0, #0
   20904:	5088      	str	r0, [r1, r2]
			nrf_saadc_channel_pos_input_set(
				NRF_SAADC,
				channel_id,
				NRF_SAADC_INPUT_DISABLED);
		}
	} while (++channel_id < SAADC_CH_NUM);
   20906:	3301      	adds	r3, #1
   20908:	b2db      	uxtb	r3, r3
   2090a:	2b07      	cmp	r3, #7
   2090c:	d822      	bhi.n	20954 <start_read+0x8c>
		if (selected_channels & BIT(channel_id)) {
   2090e:	461a      	mov	r2, r3
   20910:	fa26 f103 	lsr.w	r1, r6, r3
   20914:	f011 0f01 	tst.w	r1, #1
   20918:	d0ef      	beq.n	208fa <start_read+0x32>
			if (m_data.positive_inputs[channel_id] == 0U) {
   2091a:	4946      	ldr	r1, [pc, #280]	; (20a34 <start_read+0x16c>)
   2091c:	4419      	add	r1, r3
   2091e:	f891 70a8 	ldrb.w	r7, [r1, #168]	; 0xa8
   20922:	2f00      	cmp	r7, #0
   20924:	d0e2      	beq.n	208ec <start_read+0x24>
				(sequence->oversampling != 0U ?
   20926:	7c68      	ldrb	r0, [r5, #17]
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
   20928:	1e01      	subs	r1, r0, #0
   2092a:	bf18      	it	ne
   2092c:	2101      	movne	r1, #1

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
   2092e:	f8df c100 	ldr.w	ip, [pc, #256]	; 20a30 <start_read+0x168>
   20932:	eb0c 1e03 	add.w	lr, ip, r3, lsl #4
   20936:	f8de 0518 	ldr.w	r0, [lr, #1304]	; 0x518
   2093a:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
   2093e:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
   20942:	f8ce 0518 	str.w	r0, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
   20946:	3251      	adds	r2, #81	; 0x51
   20948:	0112      	lsls	r2, r2, #4
   2094a:	f84c 7002 	str.w	r7, [ip, r2]
			++active_channels;
   2094e:	3401      	adds	r4, #1
   20950:	b2e4      	uxtb	r4, r4
   20952:	e7d8      	b.n	20906 <start_read+0x3e>

	error = set_resolution(sequence);
   20954:	4628      	mov	r0, r5
   20956:	f7ff fe7d 	bl	20654 <set_resolution>
	if (error) {
   2095a:	4606      	mov	r6, r0
   2095c:	b110      	cbz	r0, 20964 <start_read+0x9c>

	adc_context_start_read(&m_data.ctx, sequence);

	error = adc_context_wait_for_completion(&m_data.ctx);
	return error;
}
   2095e:	4630      	mov	r0, r6
   20960:	b003      	add	sp, #12
   20962:	bdf0      	pop	{r4, r5, r6, r7, pc}
	error = set_oversampling(sequence, active_channels);
   20964:	4621      	mov	r1, r4
   20966:	4628      	mov	r0, r5
   20968:	f7ff fe98 	bl	2069c <set_oversampling>
	if (error) {
   2096c:	4606      	mov	r6, r0
   2096e:	2800      	cmp	r0, #0
   20970:	d1f5      	bne.n	2095e <start_read+0x96>
	error = check_buffer_size(sequence, active_channels);
   20972:	4621      	mov	r1, r4
   20974:	4628      	mov	r0, r5
   20976:	f7ff feb9 	bl	206ec <check_buffer_size>
	if (error) {
   2097a:	4606      	mov	r6, r0
   2097c:	2800      	cmp	r0, #0
   2097e:	d1ee      	bne.n	2095e <start_read+0x96>
			      (nrf_saadc_value_t *)sequence->buffer,
   20980:	68aa      	ldr	r2, [r5, #8]
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   20982:	4b2b      	ldr	r3, [pc, #172]	; (20a30 <start_read+0x168>)
   20984:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
    p_reg->RESULT.MAXCNT = size;
   20988:	f8c3 4630 	str.w	r4, [r3, #1584]	; 0x630
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
   2098c:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 20a34 <start_read+0x16c>
   20990:	f10c 047c 	add.w	r4, ip, #124	; 0x7c
   20994:	462f      	mov	r7, r5
   20996:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   20998:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   2099a:	683b      	ldr	r3, [r7, #0]
   2099c:	6023      	str	r3, [r4, #0]
	ctx->status = 0;
   2099e:	2300      	movs	r3, #0
   209a0:	f8cc 3070 	str.w	r3, [ip, #112]	; 0x70

	if (sequence->options) {
   209a4:	682b      	ldr	r3, [r5, #0]
   209a6:	b153      	cbz	r3, 209be <start_read+0xf6>
		ctx->options = *sequence->options;
   209a8:	f10c 0490 	add.w	r4, ip, #144	; 0x90
   209ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   209ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
   209b2:	f8cc 407c 	str.w	r4, [ip, #124]	; 0x7c
		ctx->sampling_index = 0U;
   209b6:	2300      	movs	r3, #0
   209b8:	f8ac 30a0 	strh.w	r3, [ip, #160]	; 0xa0

		if (ctx->options.interval_us != 0U) {
   209bc:	b990      	cbnz	r0, 209e4 <start_read+0x11c>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
   209be:	481d      	ldr	r0, [pc, #116]	; (20a34 <start_read+0x16c>)
   209c0:	f7ff fe28 	bl	20614 <adc_context_start_sampling>
	if (ctx->asynchronous) {
   209c4:	4b1b      	ldr	r3, [pc, #108]	; (20a34 <start_read+0x16c>)
   209c6:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   209ca:	2b00      	cmp	r3, #0
   209cc:	d1c7      	bne.n	2095e <start_read+0x96>
	return z_impl_k_sem_take(sem, timeout);
   209ce:	4c19      	ldr	r4, [pc, #100]	; (20a34 <start_read+0x16c>)
   209d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   209d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   209d8:	f104 0058 	add.w	r0, r4, #88	; 0x58
   209dc:	f005 fee4 	bl	267a8 <z_impl_k_sem_take>
	return ctx->status;
   209e0:	6f26      	ldr	r6, [r4, #112]	; 0x70
	return error;
   209e2:	e7bc      	b.n	2095e <start_read+0x96>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   209e4:	4664      	mov	r4, ip
   209e6:	2300      	movs	r3, #0
   209e8:	f3bf 8f5b 	dmb	ish
   209ec:	e854 2f00 	ldrex	r2, [r4]
   209f0:	e844 3100 	strex	r1, r3, [r4]
   209f4:	2900      	cmp	r1, #0
   209f6:	d1f9      	bne.n	209ec <start_read+0x124>
   209f8:	f3bf 8f5b 	dmb	ish
	k_timer_start(&ctx->timer, K_NO_WAIT, K_USEC(ctx->options.interval_us));
   209fc:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
			return ((t * to_hz + off) / from_hz);
   20a00:	0c59      	lsrs	r1, r3, #17
   20a02:	03db      	lsls	r3, r3, #15
   20a04:	480c      	ldr	r0, [pc, #48]	; (20a38 <start_read+0x170>)
   20a06:	1818      	adds	r0, r3, r0
   20a08:	4a0c      	ldr	r2, [pc, #48]	; (20a3c <start_read+0x174>)
   20a0a:	f04f 0300 	mov.w	r3, #0
   20a0e:	f141 0100 	adc.w	r1, r1, #0
   20a12:	f7e0 faed 	bl	ff0 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
   20a16:	9000      	str	r0, [sp, #0]
   20a18:	9101      	str	r1, [sp, #4]
   20a1a:	2200      	movs	r2, #0
   20a1c:	2300      	movs	r3, #0
   20a1e:	f104 0008 	add.w	r0, r4, #8
   20a22:	f008 facb 	bl	28fbc <z_impl_k_timer_start>
}
   20a26:	e7cd      	b.n	209c4 <start_read+0xfc>
   20a28:	000344e0 	.word	0x000344e0
   20a2c:	00034504 	.word	0x00034504
   20a30:	40007000 	.word	0x40007000
   20a34:	200004b8 	.word	0x200004b8
   20a38:	000f423f 	.word	0x000f423f
   20a3c:	000f4240 	.word	0x000f4240

00020a40 <init_saadc>:
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
   20a40:	b510      	push	{r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20a42:	4b0f      	ldr	r3, [pc, #60]	; (20a80 <init_saadc+0x40>)
   20a44:	2400      	movs	r4, #0
   20a46:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   20a4a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   20a4e:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
   20a52:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    p_reg->INTENSET = mask;
   20a56:	2212      	movs	r2, #18
   20a58:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
   20a5c:	2007      	movs	r0, #7
   20a5e:	f7f4 ff9b 	bl	15998 <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   20a62:	4622      	mov	r2, r4
   20a64:	2101      	movs	r1, #1
   20a66:	2007      	movs	r0, #7
   20a68:	f7f4 ffc6 	bl	159f8 <z_arm_irq_priority_set>
/**
 * @internal
 */
static inline unsigned int z_impl_k_sem_count_get(struct k_sem *sem)
{
	return sem->count;
   20a6c:	4b05      	ldr	r3, [pc, #20]	; (20a84 <init_saadc+0x44>)
   20a6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	if (!k_sem_count_get(&ctx->lock)) {
   20a70:	b10b      	cbz	r3, 20a76 <init_saadc+0x36>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
   20a72:	2000      	movs	r0, #0
   20a74:	bd10      	pop	{r4, pc}
	z_impl_k_sem_give(sem);
   20a76:	4804      	ldr	r0, [pc, #16]	; (20a88 <init_saadc+0x48>)
   20a78:	f005 fe58 	bl	2672c <z_impl_k_sem_give>
}
   20a7c:	e7f9      	b.n	20a72 <init_saadc+0x32>
   20a7e:	bf00      	nop
   20a80:	40007000 	.word	0x40007000
   20a84:	200004b8 	.word	0x200004b8
   20a88:	200004f8 	.word	0x200004f8

00020a8c <saadc_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20a8c:	4b3e      	ldr	r3, [pc, #248]	; (20b88 <saadc_irq_handler+0xfc>)
   20a8e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
   20a92:	b97b      	cbnz	r3, 20ab4 <saadc_irq_handler+0x28>
   20a94:	4b3c      	ldr	r3, [pc, #240]	; (20b88 <saadc_irq_handler+0xfc>)
   20a96:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	} else if (nrf_saadc_event_check(NRF_SAADC,
   20a9a:	2b00      	cmp	r3, #0
   20a9c:	d073      	beq.n	20b86 <saadc_irq_handler+0xfa>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20a9e:	4b3a      	ldr	r3, [pc, #232]	; (20b88 <saadc_irq_handler+0xfc>)
   20aa0:	2200      	movs	r2, #0
   20aa2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   20aa6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20aaa:	2201      	movs	r2, #1
   20aac:	609a      	str	r2, [r3, #8]
   20aae:	601a      	str	r2, [r3, #0]
   20ab0:	605a      	str	r2, [r3, #4]
}
   20ab2:	4770      	bx	lr
{
   20ab4:	b510      	push	{r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20ab6:	4b34      	ldr	r3, [pc, #208]	; (20b88 <saadc_irq_handler+0xfc>)
   20ab8:	2200      	movs	r2, #0
   20aba:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   20abe:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20ac2:	2101      	movs	r1, #1
   20ac4:	6099      	str	r1, [r3, #8]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
   20ac6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
   20aca:	4b30      	ldr	r3, [pc, #192]	; (20b8c <saadc_irq_handler+0x100>)
   20acc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   20ace:	b323      	cbz	r3, 20b1a <saadc_irq_handler+0x8e>
		adc_sequence_callback callback = ctx->options.callback;
   20ad0:	4b2e      	ldr	r3, [pc, #184]	; (20b8c <saadc_irq_handler+0x100>)
   20ad2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
   20ad6:	b143      	cbz	r3, 20aea <saadc_irq_handler+0x5e>
			action = callback(dev,
   20ad8:	492c      	ldr	r1, [pc, #176]	; (20b8c <saadc_irq_handler+0x100>)
   20ada:	f8b1 20a0 	ldrh.w	r2, [r1, #160]	; 0xa0
   20ade:	317c      	adds	r1, #124	; 0x7c
   20ae0:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
   20ae2:	2801      	cmp	r0, #1
   20ae4:	d00f      	beq.n	20b06 <saadc_irq_handler+0x7a>
   20ae6:	2802      	cmp	r0, #2
   20ae8:	d010      	beq.n	20b0c <saadc_irq_handler+0x80>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
   20aea:	4a28      	ldr	r2, [pc, #160]	; (20b8c <saadc_irq_handler+0x100>)
   20aec:	f8b2 30a0 	ldrh.w	r3, [r2, #160]	; 0xa0
			    ctx->options.extra_samplings) {
   20af0:	f8b2 209c 	ldrh.w	r2, [r2, #156]	; 0x9c
			if (ctx->sampling_index <
   20af4:	4293      	cmp	r3, r2
   20af6:	d218      	bcs.n	20b2a <saadc_irq_handler+0x9e>
				++ctx->sampling_index;
   20af8:	3301      	adds	r3, #1
   20afa:	4a24      	ldr	r2, [pc, #144]	; (20b8c <saadc_irq_handler+0x100>)
   20afc:	f8a2 30a0 	strh.w	r3, [r2, #160]	; 0xa0
		bool repeat = false;
   20b00:	2100      	movs	r1, #0
		bool finish = false;
   20b02:	460b      	mov	r3, r1
   20b04:	e004      	b.n	20b10 <saadc_irq_handler+0x84>
		switch (action) {
   20b06:	2101      	movs	r1, #1
   20b08:	2300      	movs	r3, #0
   20b0a:	e001      	b.n	20b10 <saadc_irq_handler+0x84>
		bool repeat = false;
   20b0c:	2100      	movs	r1, #0
			finish = true;
   20b0e:	2301      	movs	r3, #1
			} else {
				finish = true;
			}
		}

		if (!finish) {
   20b10:	b173      	cbz	r3, 20b30 <saadc_irq_handler+0xa4>
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
   20b12:	4b1e      	ldr	r3, [pc, #120]	; (20b8c <saadc_irq_handler+0x100>)
   20b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   20b18:	bb3b      	cbnz	r3, 20b6a <saadc_irq_handler+0xde>
	if (ctx->asynchronous) {
   20b1a:	4b1c      	ldr	r3, [pc, #112]	; (20b8c <saadc_irq_handler+0x100>)
   20b1c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   20b20:	bb3b      	cbnz	r3, 20b72 <saadc_irq_handler+0xe6>
	z_impl_k_sem_give(sem);
   20b22:	481b      	ldr	r0, [pc, #108]	; (20b90 <saadc_irq_handler+0x104>)
   20b24:	f005 fe02 	bl	2672c <z_impl_k_sem_give>
}
   20b28:	bd10      	pop	{r4, pc}
		bool repeat = false;
   20b2a:	2100      	movs	r1, #0
				finish = true;
   20b2c:	2301      	movs	r3, #1
   20b2e:	e7ef      	b.n	20b10 <saadc_irq_handler+0x84>
			adc_context_update_buffer_pointer(ctx, repeat);
   20b30:	4c16      	ldr	r4, [pc, #88]	; (20b8c <saadc_irq_handler+0x100>)
   20b32:	4620      	mov	r0, r4
   20b34:	f7ff fd80 	bl	20638 <adc_context_update_buffer_pointer>
			if (ctx->options.interval_us == 0U) {
   20b38:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   20b3c:	b91b      	cbnz	r3, 20b46 <saadc_irq_handler+0xba>
				adc_context_start_sampling(ctx);
   20b3e:	4620      	mov	r0, r4
   20b40:	f7ff fd68 	bl	20614 <adc_context_start_sampling>
   20b44:	e7f0      	b.n	20b28 <saadc_irq_handler+0x9c>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   20b46:	4b11      	ldr	r3, [pc, #68]	; (20b8c <saadc_irq_handler+0x100>)
   20b48:	f3bf 8f5b 	dmb	ish
   20b4c:	e853 2f00 	ldrex	r2, [r3]
   20b50:	1e51      	subs	r1, r2, #1
   20b52:	e843 1000 	strex	r0, r1, [r3]
   20b56:	2800      	cmp	r0, #0
   20b58:	d1f8      	bne.n	20b4c <saadc_irq_handler+0xc0>
   20b5a:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
   20b5e:	2a01      	cmp	r2, #1
   20b60:	dde2      	ble.n	20b28 <saadc_irq_handler+0x9c>
				adc_context_start_sampling(ctx);
   20b62:	4618      	mov	r0, r3
   20b64:	f7ff fd56 	bl	20614 <adc_context_start_sampling>
			return;
   20b68:	e7de      	b.n	20b28 <saadc_irq_handler+0x9c>
	z_impl_k_timer_stop(timer);
   20b6a:	480a      	ldr	r0, [pc, #40]	; (20b94 <saadc_irq_handler+0x108>)
   20b6c:	f010 f84c 	bl	30c08 <z_impl_k_timer_stop>
}
   20b70:	e7d3      	b.n	20b1a <saadc_irq_handler+0x8e>
		if (ctx->signal) {
   20b72:	4b06      	ldr	r3, [pc, #24]	; (20b8c <saadc_irq_handler+0x100>)
   20b74:	6f58      	ldr	r0, [r3, #116]	; 0x74
   20b76:	b110      	cbz	r0, 20b7e <saadc_irq_handler+0xf2>
	return z_impl_k_poll_signal_raise(sig, result);
   20b78:	2100      	movs	r1, #0
   20b7a:	f008 feaf 	bl	298dc <z_impl_k_poll_signal_raise>
	z_impl_k_sem_give(sem);
   20b7e:	4806      	ldr	r0, [pc, #24]	; (20b98 <saadc_irq_handler+0x10c>)
   20b80:	f005 fdd4 	bl	2672c <z_impl_k_sem_give>
		return;
   20b84:	e7d0      	b.n	20b28 <saadc_irq_handler+0x9c>
   20b86:	4770      	bx	lr
   20b88:	40007000 	.word	0x40007000
   20b8c:	200004b8 	.word	0x200004b8
   20b90:	20000510 	.word	0x20000510
   20b94:	200004c0 	.word	0x200004c0
   20b98:	200004f8 	.word	0x200004f8

00020b9c <adc_nrfx_read_async>:
{
   20b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20b9e:	4605      	mov	r5, r0
   20ba0:	460e      	mov	r6, r1
   20ba2:	4617      	mov	r7, r2
	return z_impl_k_sem_take(sem, timeout);
   20ba4:	4c0d      	ldr	r4, [pc, #52]	; (20bdc <adc_nrfx_read_async+0x40>)
   20ba6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   20baa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20bae:	f104 0040 	add.w	r0, r4, #64	; 0x40
   20bb2:	f005 fdf9 	bl	267a8 <z_impl_k_sem_take>
	ctx->asynchronous = asynchronous;
   20bb6:	2301      	movs	r3, #1
   20bb8:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
	ctx->signal = signal;
   20bbc:	6767      	str	r7, [r4, #116]	; 0x74
	error = start_read(dev, sequence);
   20bbe:	4631      	mov	r1, r6
   20bc0:	4628      	mov	r0, r5
   20bc2:	f7ff fe81 	bl	208c8 <start_read>
   20bc6:	4605      	mov	r5, r0
	if (ctx->asynchronous && (status == 0)) {
   20bc8:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   20bcc:	b103      	cbz	r3, 20bd0 <adc_nrfx_read_async+0x34>
   20bce:	b110      	cbz	r0, 20bd6 <adc_nrfx_read_async+0x3a>
	z_impl_k_sem_give(sem);
   20bd0:	4803      	ldr	r0, [pc, #12]	; (20be0 <adc_nrfx_read_async+0x44>)
   20bd2:	f005 fdab 	bl	2672c <z_impl_k_sem_give>
}
   20bd6:	4628      	mov	r0, r5
   20bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20bda:	bf00      	nop
   20bdc:	200004b8 	.word	0x200004b8
   20be0:	200004f8 	.word	0x200004f8

00020be4 <adc_nrfx_read>:
{
   20be4:	b570      	push	{r4, r5, r6, lr}
   20be6:	4605      	mov	r5, r0
   20be8:	460e      	mov	r6, r1
	return z_impl_k_sem_take(sem, timeout);
   20bea:	4c0d      	ldr	r4, [pc, #52]	; (20c20 <adc_nrfx_read+0x3c>)
   20bec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   20bf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20bf4:	f104 0040 	add.w	r0, r4, #64	; 0x40
   20bf8:	f005 fdd6 	bl	267a8 <z_impl_k_sem_take>
	ctx->asynchronous = asynchronous;
   20bfc:	2300      	movs	r3, #0
   20bfe:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
	ctx->signal = signal;
   20c02:	6763      	str	r3, [r4, #116]	; 0x74
	error = start_read(dev, sequence);
   20c04:	4631      	mov	r1, r6
   20c06:	4628      	mov	r0, r5
   20c08:	f7ff fe5e 	bl	208c8 <start_read>
   20c0c:	4605      	mov	r5, r0
	if (ctx->asynchronous && (status == 0)) {
   20c0e:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   20c12:	b103      	cbz	r3, 20c16 <adc_nrfx_read+0x32>
   20c14:	b110      	cbz	r0, 20c1c <adc_nrfx_read+0x38>
	z_impl_k_sem_give(sem);
   20c16:	4803      	ldr	r0, [pc, #12]	; (20c24 <adc_nrfx_read+0x40>)
   20c18:	f005 fd88 	bl	2672c <z_impl_k_sem_give>
}
   20c1c:	4628      	mov	r0, r5
   20c1e:	bd70      	pop	{r4, r5, r6, pc}
   20c20:	200004b8 	.word	0x200004b8
   20c24:	200004f8 	.word	0x200004f8

00020c28 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
   20c28:	4800      	ldr	r0, [pc, #0]	; (20c2c <get_hf_flags+0x4>)
   20c2a:	4770      	bx	lr
   20c2c:	20002868 	.word	0x20002868

00020c30 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   20c30:	4b01      	ldr	r3, [pc, #4]	; (20c38 <get_subsys+0x8>)
   20c32:	1ac0      	subs	r0, r0, r3

	return (clock_control_subsys_t)offset;
}
   20c34:	1140      	asrs	r0, r0, #5
   20c36:	4770      	bx	lr
   20c38:	20002820 	.word	0x20002820

00020c3c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   20c3c:	b530      	push	{r4, r5, lr}
   20c3e:	b083      	sub	sp, #12
   20c40:	4605      	mov	r5, r0
   20c42:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   20c44:	f7ff fff4 	bl	20c30 <get_subsys>
   20c48:	4601      	mov	r1, r0
   20c4a:	2340      	movs	r3, #64	; 0x40
   20c4c:	9300      	str	r3, [sp, #0]
   20c4e:	4623      	mov	r3, r4
   20c50:	4a05      	ldr	r2, [pc, #20]	; (20c68 <onoff_start+0x2c>)
   20c52:	4806      	ldr	r0, [pc, #24]	; (20c6c <onoff_start+0x30>)
   20c54:	f00e fb28 	bl	2f2a8 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   20c58:	1e01      	subs	r1, r0, #0
   20c5a:	db01      	blt.n	20c60 <onoff_start+0x24>
		notify(mgr, err);
	}
}
   20c5c:	b003      	add	sp, #12
   20c5e:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
   20c60:	4628      	mov	r0, r5
   20c62:	47a0      	blx	r4
}
   20c64:	e7fa      	b.n	20c5c <onoff_start+0x20>
   20c66:	bf00      	nop
   20c68:	0002f2f1 	.word	0x0002f2f1
   20c6c:	00031094 	.word	0x00031094

00020c70 <generic_hfclk_stop>:
{
   20c70:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   20c72:	4b0a      	ldr	r3, [pc, #40]	; (20c9c <generic_hfclk_stop+0x2c>)
   20c74:	f3bf 8f5b 	dmb	ish
   20c78:	e853 2f00 	ldrex	r2, [r3]
   20c7c:	f022 0102 	bic.w	r1, r2, #2
   20c80:	e843 1000 	strex	r0, r1, [r3]
   20c84:	2800      	cmp	r0, #0
   20c86:	d1f7      	bne.n	20c78 <generic_hfclk_stop+0x8>
   20c88:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   20c8c:	f012 0f01 	tst.w	r2, #1
   20c90:	d000      	beq.n	20c94 <generic_hfclk_stop+0x24>
}
   20c92:	bd08      	pop	{r3, pc}
	hfclk_stop();
   20c94:	f00e fb39 	bl	2f30a <hfclk_stop>
   20c98:	e7fb      	b.n	20c92 <generic_hfclk_stop+0x22>
   20c9a:	bf00      	nop
   20c9c:	20002878 	.word	0x20002878

00020ca0 <get_status>:
{
   20ca0:	b570      	push	{r4, r5, r6, lr}
   20ca2:	4605      	mov	r5, r0
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   20ca4:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   20ca6:	2c01      	cmp	r4, #1
   20ca8:	d807      	bhi.n	20cba <get_status+0x1a>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   20caa:	4621      	mov	r1, r4
   20cac:	4628      	mov	r0, r5
   20cae:	f00e fa8e 	bl	2f1ce <get_sub_data>
   20cb2:	6880      	ldr	r0, [r0, #8]
}
   20cb4:	f000 0007 	and.w	r0, r0, #7
   20cb8:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   20cba:	4e05      	ldr	r6, [pc, #20]	; (20cd0 <get_status+0x30>)
   20cbc:	2279      	movs	r2, #121	; 0x79
   20cbe:	4631      	mov	r1, r6
   20cc0:	4804      	ldr	r0, [pc, #16]	; (20cd4 <get_status+0x34>)
   20cc2:	f00a f9e4 	bl	2b08e <assert_print>
   20cc6:	2179      	movs	r1, #121	; 0x79
   20cc8:	4630      	mov	r0, r6
   20cca:	f00a f9d9 	bl	2b080 <assert_post_action>
   20cce:	e7ec      	b.n	20caa <get_status+0xa>
   20cd0:	00034554 	.word	0x00034554
   20cd4:	000318f8 	.word	0x000318f8

00020cd8 <stop>:
{
   20cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20cdc:	4607      	mov	r7, r0
   20cde:	4616      	mov	r6, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   20ce0:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   20ce2:	4621      	mov	r1, r4
   20ce4:	f00e fa73 	bl	2f1ce <get_sub_data>
   20ce8:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   20cea:	2c01      	cmp	r4, #1
   20cec:	d80f      	bhi.n	20d0e <stop+0x36>
	err = set_off_state(&subdata->flags, ctx);
   20cee:	4631      	mov	r1, r6
   20cf0:	f105 0008 	add.w	r0, r5, #8
   20cf4:	f00e fa7c 	bl	2f1f0 <set_off_state>
	if (err < 0) {
   20cf8:	2800      	cmp	r0, #0
   20cfa:	db06      	blt.n	20d0a <stop+0x32>
	get_sub_config(dev, type)->stop();
   20cfc:	4621      	mov	r1, r4
   20cfe:	4638      	mov	r0, r7
   20d00:	f00e fa6c 	bl	2f1dc <get_sub_config>
   20d04:	6843      	ldr	r3, [r0, #4]
   20d06:	4798      	blx	r3
	return 0;
   20d08:	2000      	movs	r0, #0
}
   20d0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   20d0e:	f8df 801c 	ldr.w	r8, [pc, #28]	; 20d2c <stop+0x54>
   20d12:	f240 124d 	movw	r2, #333	; 0x14d
   20d16:	4641      	mov	r1, r8
   20d18:	4805      	ldr	r0, [pc, #20]	; (20d30 <stop+0x58>)
   20d1a:	f00a f9b8 	bl	2b08e <assert_print>
   20d1e:	f240 114d 	movw	r1, #333	; 0x14d
   20d22:	4640      	mov	r0, r8
   20d24:	f00a f9ac 	bl	2b080 <assert_post_action>
   20d28:	e7e1      	b.n	20cee <stop+0x16>
   20d2a:	bf00      	nop
   20d2c:	00034554 	.word	0x00034554
   20d30:	000318f8 	.word	0x000318f8

00020d34 <onoff_stop>:
{
   20d34:	b538      	push	{r3, r4, r5, lr}
   20d36:	4605      	mov	r5, r0
   20d38:	460c      	mov	r4, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   20d3a:	f7ff ff79 	bl	20c30 <get_subsys>
   20d3e:	4601      	mov	r1, r0
   20d40:	2240      	movs	r2, #64	; 0x40
   20d42:	4803      	ldr	r0, [pc, #12]	; (20d50 <onoff_stop+0x1c>)
   20d44:	f7ff ffc8 	bl	20cd8 <stop>
   20d48:	4601      	mov	r1, r0
	notify(mgr, res);
   20d4a:	4628      	mov	r0, r5
   20d4c:	47a0      	blx	r4
}
   20d4e:	bd38      	pop	{r3, r4, r5, pc}
   20d50:	00031094 	.word	0x00031094

00020d54 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
   20d54:	b510      	push	{r4, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
   20d56:	2801      	cmp	r0, #1
   20d58:	d01c      	beq.n	20d94 <clock_event_handler+0x40>
   20d5a:	2803      	cmp	r0, #3
   20d5c:	d01f      	beq.n	20d9e <clock_event_handler+0x4a>
   20d5e:	b160      	cbz	r0, 20d7a <clock_event_handler+0x26>
			/* Should not happen when calibration is disabled. */
			__ASSERT_NO_MSG(false);
		}
		break;
	default:
		__ASSERT_NO_MSG(0);
   20d60:	4c15      	ldr	r4, [pc, #84]	; (20db8 <clock_event_handler+0x64>)
   20d62:	f240 2262 	movw	r2, #610	; 0x262
   20d66:	4621      	mov	r1, r4
   20d68:	4814      	ldr	r0, [pc, #80]	; (20dbc <clock_event_handler+0x68>)
   20d6a:	f00a f990 	bl	2b08e <assert_print>
   20d6e:	f240 2162 	movw	r1, #610	; 0x262
   20d72:	4620      	mov	r0, r4
   20d74:	f00a f984 	bl	2b080 <assert_post_action>
		break;
	}
}
   20d78:	e010      	b.n	20d9c <clock_event_handler+0x48>
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   20d7a:	2100      	movs	r1, #0
   20d7c:	4810      	ldr	r0, [pc, #64]	; (20dc0 <clock_event_handler+0x6c>)
   20d7e:	f00e fa26 	bl	2f1ce <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   20d82:	6883      	ldr	r3, [r0, #8]
   20d84:	f013 0f07 	tst.w	r3, #7
   20d88:	d108      	bne.n	20d9c <clock_event_handler+0x48>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   20d8a:	2100      	movs	r1, #0
   20d8c:	480c      	ldr	r0, [pc, #48]	; (20dc0 <clock_event_handler+0x6c>)
   20d8e:	f00e fa79 	bl	2f284 <clkstarted_handle>
   20d92:	e003      	b.n	20d9c <clock_event_handler+0x48>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   20d94:	2101      	movs	r1, #1
   20d96:	480a      	ldr	r0, [pc, #40]	; (20dc0 <clock_event_handler+0x6c>)
   20d98:	f00e fa74 	bl	2f284 <clkstarted_handle>
}
   20d9c:	bd10      	pop	{r4, pc}
			__ASSERT_NO_MSG(false);
   20d9e:	4c06      	ldr	r4, [pc, #24]	; (20db8 <clock_event_handler+0x64>)
   20da0:	f240 225e 	movw	r2, #606	; 0x25e
   20da4:	4621      	mov	r1, r4
   20da6:	4805      	ldr	r0, [pc, #20]	; (20dbc <clock_event_handler+0x68>)
   20da8:	f00a f971 	bl	2b08e <assert_print>
   20dac:	f240 215e 	movw	r1, #606	; 0x25e
   20db0:	4620      	mov	r0, r4
   20db2:	f00a f965 	bl	2b080 <assert_post_action>
		break;
   20db6:	e7f1      	b.n	20d9c <clock_event_handler+0x48>
   20db8:	00034554 	.word	0x00034554
   20dbc:	000318f8 	.word	0x000318f8
   20dc0:	00031094 	.word	0x00031094

00020dc4 <api_blocking_start>:
{
   20dc4:	b500      	push	{lr}
   20dc6:	b087      	sub	sp, #28
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   20dc8:	f8cd d000 	str.w	sp, [sp]
   20dcc:	f8cd d004 	str.w	sp, [sp, #4]
   20dd0:	2300      	movs	r3, #0
   20dd2:	9302      	str	r3, [sp, #8]
   20dd4:	2301      	movs	r3, #1
   20dd6:	9303      	str	r3, [sp, #12]
   20dd8:	ab04      	add	r3, sp, #16
   20dda:	9304      	str	r3, [sp, #16]
   20ddc:	9305      	str	r3, [sp, #20]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   20dde:	466b      	mov	r3, sp
   20de0:	4a06      	ldr	r2, [pc, #24]	; (20dfc <api_blocking_start+0x38>)
   20de2:	f00e fa7d 	bl	2f2e0 <api_start>
	if (err < 0) {
   20de6:	2800      	cmp	r0, #0
   20de8:	db05      	blt.n	20df6 <api_blocking_start+0x32>
	return z_impl_k_sem_take(sem, timeout);
   20dea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   20dee:	2300      	movs	r3, #0
   20df0:	4668      	mov	r0, sp
   20df2:	f005 fcd9 	bl	267a8 <z_impl_k_sem_take>
}
   20df6:	b007      	add	sp, #28
   20df8:	f85d fb04 	ldr.w	pc, [sp], #4
   20dfc:	0002f329 	.word	0x0002f329

00020e00 <lfclk_start>:
{
   20e00:	b508      	push	{r3, lr}
	if (!once) {
   20e02:	4b07      	ldr	r3, [pc, #28]	; (20e20 <lfclk_start+0x20>)
   20e04:	781b      	ldrb	r3, [r3, #0]
   20e06:	b11b      	cbz	r3, 20e10 <lfclk_start+0x10>
}
#endif // defined(CLOCK_FEATURE_HFCLK_DIVIDE_PRESENT) || NRF_CLOCK_HAS_HFCLK_192M

NRFX_STATIC_INLINE void nrfx_clock_lfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   20e08:	2000      	movs	r0, #0
   20e0a:	f002 fc59 	bl	236c0 <nrfx_clock_start>
}
   20e0e:	bd08      	pop	{r3, pc}
	z_impl_k_busy_wait(usec_to_wait);
   20e10:	f44f 70a5 	mov.w	r0, #330	; 0x14a
   20e14:	f00f fec6 	bl	30ba4 <z_impl_k_busy_wait>
		once = true;
   20e18:	4b01      	ldr	r3, [pc, #4]	; (20e20 <lfclk_start+0x20>)
   20e1a:	2201      	movs	r2, #1
   20e1c:	701a      	strb	r2, [r3, #0]
   20e1e:	e7f3      	b.n	20e08 <lfclk_start+0x8>
   20e20:	2000376d 	.word	0x2000376d

00020e24 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   20e24:	b570      	push	{r4, r5, r6, lr}
   20e26:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   20e28:	2200      	movs	r2, #0
   20e2a:	2101      	movs	r1, #1
   20e2c:	4610      	mov	r0, r2
   20e2e:	f7f4 fde3 	bl	159f8 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   20e32:	4811      	ldr	r0, [pc, #68]	; (20e78 <clk_init+0x54>)
   20e34:	f002 fc7c 	bl	23730 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   20e38:	4b10      	ldr	r3, [pc, #64]	; (20e7c <clk_init+0x58>)
   20e3a:	4298      	cmp	r0, r3
   20e3c:	d119      	bne.n	20e72 <clk_init+0x4e>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   20e3e:	f00f fadf 	bl	30400 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
   20e42:	2400      	movs	r4, #0
   20e44:	2c01      	cmp	r4, #1
   20e46:	d812      	bhi.n	20e6e <clk_init+0x4a>
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   20e48:	4621      	mov	r1, r4
   20e4a:	4630      	mov	r0, r6
   20e4c:	f00e f9bf 	bl	2f1ce <get_sub_data>
   20e50:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
   20e52:	4621      	mov	r1, r4
   20e54:	4630      	mov	r0, r6
   20e56:	f00e f9c7 	bl	2f1e8 <get_onoff_manager>
   20e5a:	4909      	ldr	r1, [pc, #36]	; (20e80 <clk_init+0x5c>)
   20e5c:	f009 ff93 	bl	2ad86 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   20e60:	2800      	cmp	r0, #0
   20e62:	db05      	blt.n	20e70 <clk_init+0x4c>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   20e64:	2301      	movs	r3, #1
   20e66:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   20e68:	441c      	add	r4, r3
   20e6a:	b2e4      	uxtb	r4, r4
   20e6c:	e7ea      	b.n	20e44 <clk_init+0x20>
	}

	return 0;
   20e6e:	2000      	movs	r0, #0
}
   20e70:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   20e72:	f06f 0004 	mvn.w	r0, #4
   20e76:	e7fb      	b.n	20e70 <clk_init+0x4c>
   20e78:	00020d55 	.word	0x00020d55
   20e7c:	0bad0000 	.word	0x0bad0000
   20e80:	000345f8 	.word	0x000345f8

00020e84 <lfclk_spinwait>:
{
   20e84:	b570      	push	{r4, r5, r6, lr}
   20e86:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   20e88:	2801      	cmp	r0, #1
   20e8a:	d107      	bne.n	20e9c <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   20e8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   20e90:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   20e94:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   20e98:	2b01      	cmp	r3, #1
   20e9a:	d05a      	beq.n	20f52 <lfclk_spinwait+0xce>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   20e9c:	f00f fd41 	bl	30922 <k_is_in_isr>
   20ea0:	b928      	cbnz	r0, 20eae <lfclk_spinwait+0x2a>
	return !z_sys_post_kernel;
   20ea2:	4b2f      	ldr	r3, [pc, #188]	; (20f60 <lfclk_spinwait+0xdc>)
   20ea4:	781b      	ldrb	r3, [r3, #0]
   20ea6:	2b00      	cmp	r3, #0
   20ea8:	d043      	beq.n	20f32 <lfclk_spinwait+0xae>
   20eaa:	2300      	movs	r3, #0
   20eac:	e000      	b.n	20eb0 <lfclk_spinwait+0x2c>
   20eae:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
   20eb0:	461c      	mov	r4, r3
   20eb2:	2b00      	cmp	r3, #0
   20eb4:	d03f      	beq.n	20f36 <lfclk_spinwait+0xb2>
	__asm__ volatile(
   20eb6:	f04f 0340 	mov.w	r3, #64	; 0x40
   20eba:	f3ef 8611 	mrs	r6, BASEPRI
   20ebe:	f383 8812 	msr	BASEPRI_MAX, r3
   20ec2:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
   20ec6:	b924      	cbnz	r4, 20ed2 <lfclk_spinwait+0x4e>
    p_reg->INTENCLR = mask;
   20ec8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   20ecc:	2202      	movs	r2, #2
   20ece:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   20ed2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   20ed6:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   20eda:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   20ede:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
   20ee2:	f412 3f80 	tst.w	r2, #65536	; 0x10000
   20ee6:	d12d      	bne.n	20f44 <lfclk_spinwait+0xc0>
    return false;
   20ee8:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
   20eea:	b11a      	cbz	r2, 20ef4 <lfclk_spinwait+0x70>
   20eec:	2b01      	cmp	r3, #1
   20eee:	d02b      	beq.n	20f48 <lfclk_spinwait+0xc4>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   20ef0:	2d01      	cmp	r5, #1
   20ef2:	d029      	beq.n	20f48 <lfclk_spinwait+0xc4>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   20ef4:	b30c      	cbz	r4, 20f3a <lfclk_spinwait+0xb6>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   20ef6:	4630      	mov	r0, r6
   20ef8:	f7f4 fd1c 	bl	15934 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   20efc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   20f00:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   20f04:	2b00      	cmp	r3, #0
   20f06:	d1e4      	bne.n	20ed2 <lfclk_spinwait+0x4e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   20f08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   20f0c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   20f10:	2b00      	cmp	r3, #0
   20f12:	d0de      	beq.n	20ed2 <lfclk_spinwait+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20f14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   20f18:	2200      	movs	r2, #0
   20f1a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   20f1e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   20f22:	2201      	movs	r2, #1
   20f24:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   20f28:	490e      	ldr	r1, [pc, #56]	; (20f64 <lfclk_spinwait+0xe0>)
   20f2a:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20f2e:	609a      	str	r2, [r3, #8]
}
   20f30:	e7cf      	b.n	20ed2 <lfclk_spinwait+0x4e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   20f32:	2301      	movs	r3, #1
   20f34:	e7bc      	b.n	20eb0 <lfclk_spinwait+0x2c>
	int key = isr_mode ? irq_lock() : 0;
   20f36:	2600      	movs	r6, #0
   20f38:	e7c5      	b.n	20ec6 <lfclk_spinwait+0x42>
	return z_impl_k_sleep(timeout);
   20f3a:	2021      	movs	r0, #33	; 0x21
   20f3c:	2100      	movs	r1, #0
   20f3e:	f007 fb0f 	bl	28560 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   20f42:	e7db      	b.n	20efc <lfclk_spinwait+0x78>
                return true;
   20f44:	2201      	movs	r2, #1
   20f46:	e7d0      	b.n	20eea <lfclk_spinwait+0x66>
	if (isr_mode) {
   20f48:	b124      	cbz	r4, 20f54 <lfclk_spinwait+0xd0>
	__asm__ volatile(
   20f4a:	f386 8811 	msr	BASEPRI, r6
   20f4e:	f3bf 8f6f 	isb	sy
}
   20f52:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
   20f54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   20f58:	2202      	movs	r2, #2
   20f5a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   20f5e:	e7f8      	b.n	20f52 <lfclk_spinwait+0xce>
   20f60:	20003770 	.word	0x20003770
   20f64:	e000e100 	.word	0xe000e100

00020f68 <generic_hfclk_start>:
{
   20f68:	b510      	push	{r4, lr}
	__asm__ volatile(
   20f6a:	f04f 0340 	mov.w	r3, #64	; 0x40
   20f6e:	f3ef 8411 	mrs	r4, BASEPRI
   20f72:	f383 8812 	msr	BASEPRI_MAX, r3
   20f76:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   20f7a:	4a13      	ldr	r2, [pc, #76]	; (20fc8 <generic_hfclk_start+0x60>)
   20f7c:	6813      	ldr	r3, [r2, #0]
   20f7e:	f043 0302 	orr.w	r3, r3, #2
   20f82:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   20f84:	f013 0f01 	tst.w	r3, #1
   20f88:	d108      	bne.n	20f9c <generic_hfclk_start+0x34>
	bool already_started = false;
   20f8a:	2300      	movs	r3, #0
	__asm__ volatile(
   20f8c:	f384 8811 	msr	BASEPRI, r4
   20f90:	f3bf 8f6f 	isb	sy
	if (already_started) {
   20f94:	b99b      	cbnz	r3, 20fbe <generic_hfclk_start+0x56>
	hfclk_start();
   20f96:	f00e f9b3 	bl	2f300 <hfclk_start>
}
   20f9a:	bd10      	pop	{r4, pc}
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   20f9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   20fa0:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   20fa4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   20fa8:	f012 0f01 	tst.w	r2, #1
   20fac:	d101      	bne.n	20fb2 <generic_hfclk_start+0x4a>
	bool already_started = false;
   20fae:	2300      	movs	r3, #0
   20fb0:	e7ec      	b.n	20f8c <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
   20fb2:	f7ff fe39 	bl	20c28 <get_hf_flags>
   20fb6:	f00e f952 	bl	2f25e <set_on_state>
			already_started = true;
   20fba:	2301      	movs	r3, #1
   20fbc:	e7e6      	b.n	20f8c <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
   20fbe:	2100      	movs	r1, #0
   20fc0:	4802      	ldr	r0, [pc, #8]	; (20fcc <generic_hfclk_start+0x64>)
   20fc2:	f00e f95f 	bl	2f284 <clkstarted_handle>
		return;
   20fc6:	e7e8      	b.n	20f9a <generic_hfclk_start+0x32>
   20fc8:	20002878 	.word	0x20002878
   20fcc:	00031094 	.word	0x00031094

00020fd0 <z_nrf_clock_control_lf_on>:
{
   20fd0:	b538      	push	{r3, r4, r5, lr}
   20fd2:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   20fd4:	4b1e      	ldr	r3, [pc, #120]	; (21050 <z_nrf_clock_control_lf_on+0x80>)
   20fd6:	2101      	movs	r1, #1
   20fd8:	f3bf 8f5b 	dmb	ish
   20fdc:	e853 2f00 	ldrex	r2, [r3]
   20fe0:	e843 1000 	strex	r0, r1, [r3]
   20fe4:	2800      	cmp	r0, #0
   20fe6:	d1f9      	bne.n	20fdc <z_nrf_clock_control_lf_on+0xc>
   20fe8:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   20fec:	b142      	cbz	r2, 21000 <z_nrf_clock_control_lf_on+0x30>
	switch (start_mode) {
   20fee:	b134      	cbz	r4, 20ffe <z_nrf_clock_control_lf_on+0x2e>
   20ff0:	1e63      	subs	r3, r4, #1
   20ff2:	b2db      	uxtb	r3, r3
   20ff4:	2b01      	cmp	r3, #1
   20ff6:	d81e      	bhi.n	21036 <z_nrf_clock_control_lf_on+0x66>
		lfclk_spinwait(start_mode);
   20ff8:	4620      	mov	r0, r4
   20ffa:	f7ff ff43 	bl	20e84 <lfclk_spinwait>
}
   20ffe:	bd38      	pop	{r3, r4, r5, pc}
				get_onoff_manager(CLOCK_DEVICE,
   21000:	4814      	ldr	r0, [pc, #80]	; (21054 <z_nrf_clock_control_lf_on+0x84>)
   21002:	f00e f8f1 	bl	2f1e8 <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   21006:	4914      	ldr	r1, [pc, #80]	; (21058 <z_nrf_clock_control_lf_on+0x88>)
   21008:	2300      	movs	r3, #0
   2100a:	604b      	str	r3, [r1, #4]
   2100c:	608b      	str	r3, [r1, #8]
   2100e:	60cb      	str	r3, [r1, #12]
   21010:	2301      	movs	r3, #1
   21012:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
   21014:	f7f2 f9e8 	bl	133e8 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   21018:	2800      	cmp	r0, #0
   2101a:	dae8      	bge.n	20fee <z_nrf_clock_control_lf_on+0x1e>
   2101c:	4d0f      	ldr	r5, [pc, #60]	; (2105c <z_nrf_clock_control_lf_on+0x8c>)
   2101e:	f44f 7208 	mov.w	r2, #544	; 0x220
   21022:	4629      	mov	r1, r5
   21024:	480e      	ldr	r0, [pc, #56]	; (21060 <z_nrf_clock_control_lf_on+0x90>)
   21026:	f00a f832 	bl	2b08e <assert_print>
   2102a:	f44f 7108 	mov.w	r1, #544	; 0x220
   2102e:	4628      	mov	r0, r5
   21030:	f00a f826 	bl	2b080 <assert_post_action>
   21034:	e7db      	b.n	20fee <z_nrf_clock_control_lf_on+0x1e>
		__ASSERT_NO_MSG(false);
   21036:	4c09      	ldr	r4, [pc, #36]	; (2105c <z_nrf_clock_control_lf_on+0x8c>)
   21038:	f240 2232 	movw	r2, #562	; 0x232
   2103c:	4621      	mov	r1, r4
   2103e:	4808      	ldr	r0, [pc, #32]	; (21060 <z_nrf_clock_control_lf_on+0x90>)
   21040:	f00a f825 	bl	2b08e <assert_print>
   21044:	f240 2132 	movw	r1, #562	; 0x232
   21048:	4620      	mov	r0, r4
   2104a:	f00a f819 	bl	2b080 <assert_post_action>
   2104e:	e7d6      	b.n	20ffe <z_nrf_clock_control_lf_on+0x2e>
   21050:	2000287c 	.word	0x2000287c
   21054:	00031094 	.word	0x00031094
   21058:	20002810 	.word	0x20002810
   2105c:	00034554 	.word	0x00034554
   21060:	000318f8 	.word	0x000318f8

00021064 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
   21064:	b510      	push	{r4, lr}
   21066:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
   21068:	280a      	cmp	r0, #10
   2106a:	d007      	beq.n	2107c <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
   2106c:	4b07      	ldr	r3, [pc, #28]	; (2108c <console_out+0x28>)
   2106e:	6818      	ldr	r0, [r3, #0]
   21070:	b2e1      	uxtb	r1, r4
			     unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
					unsigned char out_char)
{
	const struct uart_driver_api *api =
   21072:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   21074:	685b      	ldr	r3, [r3, #4]
   21076:	4798      	blx	r3

	return c;
}
   21078:	4620      	mov	r0, r4
   2107a:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
   2107c:	4b03      	ldr	r3, [pc, #12]	; (2108c <console_out+0x28>)
   2107e:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
   21080:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
   21082:	685b      	ldr	r3, [r3, #4]
   21084:	210d      	movs	r1, #13
   21086:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
   21088:	e7f0      	b.n	2106c <console_out+0x8>
   2108a:	bf00      	nop
   2108c:	20002880 	.word	0x20002880

00021090 <uart_console_hook_install>:
/**
 * @brief Install printk/stdout hook for UART console output
 */

static void uart_console_hook_install(void)
{
   21090:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
   21092:	4c04      	ldr	r4, [pc, #16]	; (210a4 <uart_console_hook_install+0x14>)
   21094:	4620      	mov	r0, r4
   21096:	f7f5 fa63 	bl	16560 <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
   2109a:	4620      	mov	r0, r4
   2109c:	f7f1 ff28 	bl	12ef0 <__printk_hook_install>
#endif
}
   210a0:	bd10      	pop	{r4, pc}
   210a2:	bf00      	nop
   210a4:	00021065 	.word	0x00021065

000210a8 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   210a8:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
   210aa:	4806      	ldr	r0, [pc, #24]	; (210c4 <uart_console_init+0x1c>)
   210ac:	4b06      	ldr	r3, [pc, #24]	; (210c8 <uart_console_init+0x20>)
   210ae:	6018      	str	r0, [r3, #0]
   210b0:	f00f fbf4 	bl	3089c <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
   210b4:	b118      	cbz	r0, 210be <uart_console_init+0x16>
		return -ENODEV;
	}

	uart_console_hook_install();
   210b6:	f7ff ffeb 	bl	21090 <uart_console_hook_install>

	return 0;
   210ba:	2000      	movs	r0, #0
}
   210bc:	bd08      	pop	{r3, pc}
		return -ENODEV;
   210be:	f06f 0012 	mvn.w	r0, #18
   210c2:	e7fb      	b.n	210bc <uart_console_init+0x14>
   210c4:	000310f4 	.word	0x000310f4
   210c8:	20002880 	.word	0x20002880

000210cc <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   210cc:	b908      	cbnz	r0, 210d2 <get_dev+0x6>
   210ce:	4802      	ldr	r0, [pc, #8]	; (210d8 <get_dev+0xc>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
   210d0:	4770      	bx	lr
	const struct device *dev = NULL;
   210d2:	2000      	movs	r0, #0
   210d4:	4770      	bx	lr
   210d6:	bf00      	nop
   210d8:	000310ac 	.word	0x000310ac

000210dc <gpio_nrfx_manage_callback>:
{
   210dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   210e0:	4616      	mov	r6, r2
	return port->data;
   210e2:	6905      	ldr	r5, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   210e4:	1d2f      	adds	r7, r5, #4
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   210e6:	460c      	mov	r4, r1
   210e8:	b131      	cbz	r1, 210f8 <gpio_nrfx_manage_callback+0x1c>
	__ASSERT(callback->handler, "No callback handler!");
   210ea:	6863      	ldr	r3, [r4, #4]
   210ec:	b183      	cbz	r3, 21110 <gpio_nrfx_manage_callback+0x34>
	return list->head;
   210ee:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
   210f0:	2b00      	cmp	r3, #0
   210f2:	d033      	beq.n	2115c <gpio_nrfx_manage_callback+0x80>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   210f4:	2100      	movs	r1, #0
   210f6:	e022      	b.n	2113e <gpio_nrfx_manage_callback+0x62>
	__ASSERT(callback, "No callback!");
   210f8:	f8df 8084 	ldr.w	r8, [pc, #132]	; 21180 <gpio_nrfx_manage_callback+0xa4>
   210fc:	2224      	movs	r2, #36	; 0x24
   210fe:	4641      	mov	r1, r8
   21100:	4820      	ldr	r0, [pc, #128]	; (21184 <gpio_nrfx_manage_callback+0xa8>)
   21102:	f009 ffc4 	bl	2b08e <assert_print>
   21106:	2124      	movs	r1, #36	; 0x24
   21108:	4640      	mov	r0, r8
   2110a:	f009 ffb9 	bl	2b080 <assert_post_action>
   2110e:	e7ec      	b.n	210ea <gpio_nrfx_manage_callback+0xe>
	__ASSERT(callback->handler, "No callback handler!");
   21110:	f8df 806c 	ldr.w	r8, [pc, #108]	; 21180 <gpio_nrfx_manage_callback+0xa4>
   21114:	2225      	movs	r2, #37	; 0x25
   21116:	4641      	mov	r1, r8
   21118:	481a      	ldr	r0, [pc, #104]	; (21184 <gpio_nrfx_manage_callback+0xa8>)
   2111a:	f009 ffb8 	bl	2b08e <assert_print>
   2111e:	2125      	movs	r1, #37	; 0x25
   21120:	4640      	mov	r0, r8
   21122:	f009 ffad 	bl	2b080 <assert_post_action>
   21126:	e7e2      	b.n	210ee <gpio_nrfx_manage_callback+0x12>
	return node->next;
   21128:	6823      	ldr	r3, [r4, #0]
	list->head = node;
   2112a:	606b      	str	r3, [r5, #4]
	return list->tail;
   2112c:	687a      	ldr	r2, [r7, #4]
Z_GENLIST_REMOVE(slist, snode)
   2112e:	4294      	cmp	r4, r2
   21130:	d10f      	bne.n	21152 <gpio_nrfx_manage_callback+0x76>
	list->tail = node;
   21132:	607b      	str	r3, [r7, #4]
}
   21134:	e00d      	b.n	21152 <gpio_nrfx_manage_callback+0x76>
	list->tail = node;
   21136:	6079      	str	r1, [r7, #4]
}
   21138:	e00b      	b.n	21152 <gpio_nrfx_manage_callback+0x76>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2113a:	4619      	mov	r1, r3
   2113c:	681b      	ldr	r3, [r3, #0]
   2113e:	b15b      	cbz	r3, 21158 <gpio_nrfx_manage_callback+0x7c>
   21140:	429c      	cmp	r4, r3
   21142:	d1fa      	bne.n	2113a <gpio_nrfx_manage_callback+0x5e>
Z_GENLIST_REMOVE(slist, snode)
   21144:	2900      	cmp	r1, #0
   21146:	d0ef      	beq.n	21128 <gpio_nrfx_manage_callback+0x4c>
	return node->next;
   21148:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
   2114a:	600b      	str	r3, [r1, #0]
	return list->tail;
   2114c:	687b      	ldr	r3, [r7, #4]
Z_GENLIST_REMOVE(slist, snode)
   2114e:	429c      	cmp	r4, r3
   21150:	d0f1      	beq.n	21136 <gpio_nrfx_manage_callback+0x5a>
	parent->next = child;
   21152:	2300      	movs	r3, #0
   21154:	6023      	str	r3, [r4, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   21156:	2301      	movs	r3, #1
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
   21158:	b903      	cbnz	r3, 2115c <gpio_nrfx_manage_callback+0x80>
			if (!set) {
   2115a:	b156      	cbz	r6, 21172 <gpio_nrfx_manage_callback+0x96>
				return -EINVAL;
			}
		}
	}

	if (set) {
   2115c:	b166      	cbz	r6, 21178 <gpio_nrfx_manage_callback+0x9c>
	return list->head;
   2115e:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   21160:	6023      	str	r3, [r4, #0]
	list->head = node;
   21162:	606c      	str	r4, [r5, #4]
	return list->tail;
   21164:	687b      	ldr	r3, [r7, #4]
Z_GENLIST_PREPEND(slist, snode)
   21166:	b10b      	cbz	r3, 2116c <gpio_nrfx_manage_callback+0x90>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   21168:	2000      	movs	r0, #0
   2116a:	e006      	b.n	2117a <gpio_nrfx_manage_callback+0x9e>
	list->tail = node;
   2116c:	607c      	str	r4, [r7, #4]
   2116e:	2000      	movs	r0, #0
}
   21170:	e003      	b.n	2117a <gpio_nrfx_manage_callback+0x9e>
				return -EINVAL;
   21172:	f06f 0015 	mvn.w	r0, #21
   21176:	e000      	b.n	2117a <gpio_nrfx_manage_callback+0x9e>
	return 0;
   21178:	2000      	movs	r0, #0
}
   2117a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2117e:	bf00      	nop
   21180:	00034604 	.word	0x00034604
   21184:	000318f8 	.word	0x000318f8

00021188 <nrfx_gpio_handler>:

static void nrfx_gpio_handler(nrfx_gpiote_pin_t abs_pin,
			      nrfx_gpiote_trigger_t trigger,
			      void *context)
{
   21188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   2118c:	f000 041f 	and.w	r4, r0, #31
	uint32_t pin = abs_pin;
	uint32_t port_id = nrf_gpio_pin_port_number_extract(&pin);
	const struct device *port = get_dev(port_id);
   21190:	0940      	lsrs	r0, r0, #5
   21192:	f7ff ff9b 	bl	210cc <get_dev>

	/* If given port is handled directly by nrfx driver it might not be enabled in DT. */
	if (port == NULL) {
   21196:	b360      	cbz	r0, 211f2 <nrfx_gpio_handler+0x6a>
   21198:	4607      	mov	r7, r0
	return port->data;
   2119a:	6903      	ldr	r3, [r0, #16]
	}

	struct gpio_nrfx_data *data = get_port_data(port);
	sys_slist_t *list = &data->callbacks;

	gpio_fire_callbacks(list, port, BIT(pin));
   2119c:	2601      	movs	r6, #1
   2119e:	40a6      	lsls	r6, r4
	return list->head;
   211a0:	685c      	ldr	r4, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   211a2:	b11c      	cbz	r4, 211ac <nrfx_gpio_handler+0x24>
   211a4:	4625      	mov	r5, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   211a6:	b17c      	cbz	r4, 211c8 <nrfx_gpio_handler+0x40>
	return node->next;
   211a8:	6825      	ldr	r5, [r4, #0]
   211aa:	e00d      	b.n	211c8 <nrfx_gpio_handler+0x40>
   211ac:	4625      	mov	r5, r4
   211ae:	e00b      	b.n	211c8 <nrfx_gpio_handler+0x40>
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   211b0:	6863      	ldr	r3, [r4, #4]
   211b2:	68a2      	ldr	r2, [r4, #8]
   211b4:	4032      	ands	r2, r6
   211b6:	4621      	mov	r1, r4
   211b8:	4638      	mov	r0, r7
   211ba:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   211bc:	b1bd      	cbz	r5, 211ee <nrfx_gpio_handler+0x66>
   211be:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
   211c0:	b105      	cbz	r5, 211c4 <nrfx_gpio_handler+0x3c>
	return node->next;
   211c2:	682b      	ldr	r3, [r5, #0]
   211c4:	462c      	mov	r4, r5
   211c6:	461d      	mov	r5, r3
   211c8:	b19c      	cbz	r4, 211f2 <nrfx_gpio_handler+0x6a>
		if (cb->pin_mask & pins) {
   211ca:	68a3      	ldr	r3, [r4, #8]
   211cc:	421e      	tst	r6, r3
   211ce:	d0f5      	beq.n	211bc <nrfx_gpio_handler+0x34>
			__ASSERT(cb->handler, "No callback handler!");
   211d0:	6863      	ldr	r3, [r4, #4]
   211d2:	2b00      	cmp	r3, #0
   211d4:	d1ec      	bne.n	211b0 <nrfx_gpio_handler+0x28>
   211d6:	f8df 8020 	ldr.w	r8, [pc, #32]	; 211f8 <nrfx_gpio_handler+0x70>
   211da:	2245      	movs	r2, #69	; 0x45
   211dc:	4641      	mov	r1, r8
   211de:	4807      	ldr	r0, [pc, #28]	; (211fc <nrfx_gpio_handler+0x74>)
   211e0:	f009 ff55 	bl	2b08e <assert_print>
   211e4:	2145      	movs	r1, #69	; 0x45
   211e6:	4640      	mov	r0, r8
   211e8:	f009 ff4a 	bl	2b080 <assert_post_action>
   211ec:	e7e0      	b.n	211b0 <nrfx_gpio_handler+0x28>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   211ee:	462b      	mov	r3, r5
   211f0:	e7e8      	b.n	211c4 <nrfx_gpio_handler+0x3c>
}
   211f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   211f6:	bf00      	nop
   211f8:	00034604 	.word	0x00034604
   211fc:	000318f8 	.word	0x000318f8

00021200 <gpio_nrfx_pin_interrupt_configure>:
{
   21200:	b5f0      	push	{r4, r5, r6, r7, lr}
   21202:	b085      	sub	sp, #20
   21204:	460e      	mov	r6, r1
   21206:	4619      	mov	r1, r3
	return port->config;
   21208:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   2120a:	7b1b      	ldrb	r3, [r3, #12]
   2120c:	f006 051f 	and.w	r5, r6, #31
   21210:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   21214:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
   21218:	d022      	beq.n	21260 <gpio_nrfx_pin_interrupt_configure+0x60>
   2121a:	4607      	mov	r7, r0
   2121c:	4614      	mov	r4, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
   2121e:	2300      	movs	r3, #0
   21220:	9301      	str	r3, [sp, #4]
   21222:	9302      	str	r3, [sp, #8]
		.trigger = get_trigger(mode, trig),
   21224:	4610      	mov	r0, r2
   21226:	f00e f8ff 	bl	2f428 <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
   2122a:	f88d 0004 	strb.w	r0, [sp, #4]
	return port->config;
   2122e:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   21230:	6899      	ldr	r1, [r3, #8]
   21232:	40f1      	lsrs	r1, r6
   21234:	f011 0101 	ands.w	r1, r1, #1
   21238:	d102      	bne.n	21240 <gpio_nrfx_pin_interrupt_configure+0x40>
   2123a:	f1b4 7fa0 	cmp.w	r4, #20971520	; 0x1400000
   2123e:	d014      	beq.n	2126a <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   21240:	2300      	movs	r3, #0
   21242:	aa01      	add	r2, sp, #4
   21244:	4619      	mov	r1, r3
   21246:	4628      	mov	r0, r5
   21248:	f003 f84a 	bl	242e0 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   2124c:	4b2c      	ldr	r3, [pc, #176]	; (21300 <gpio_nrfx_pin_interrupt_configure+0x100>)
   2124e:	4298      	cmp	r0, r3
   21250:	d152      	bne.n	212f8 <gpio_nrfx_pin_interrupt_configure+0xf8>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   21252:	2101      	movs	r1, #1
   21254:	4628      	mov	r0, r5
   21256:	f003 fa85 	bl	24764 <nrfx_gpiote_trigger_enable>
	return 0;
   2125a:	2000      	movs	r0, #0
}
   2125c:	b005      	add	sp, #20
   2125e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
   21260:	4628      	mov	r0, r5
   21262:	f003 fb61 	bl	24928 <nrfx_gpiote_trigger_disable>
		return 0;
   21266:	2000      	movs	r0, #0
   21268:	e7f8      	b.n	2125c <gpio_nrfx_pin_interrupt_configure+0x5c>
    switch (port)
   2126a:	096b      	lsrs	r3, r5, #5
   2126c:	d101      	bne.n	21272 <gpio_nrfx_pin_interrupt_configure+0x72>
            mask = P0_FEATURE_PINS_PRESENT;
   2126e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    pin_number &= 0x1F;
   21272:	f005 031f 	and.w	r3, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
   21276:	40d9      	lsrs	r1, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   21278:	f011 0f01 	tst.w	r1, #1
   2127c:	d018      	beq.n	212b0 <gpio_nrfx_pin_interrupt_configure+0xb0>
    *p_pin = pin_number & 0x1F;
   2127e:	f005 041f 	and.w	r4, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   21282:	096b      	lsrs	r3, r5, #5
   21284:	d121      	bne.n	212ca <gpio_nrfx_pin_interrupt_configure+0xca>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   21286:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
   2128a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   2128e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   21292:	f013 0f01 	tst.w	r3, #1
   21296:	d1d3      	bne.n	21240 <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   21298:	f10d 010f 	add.w	r1, sp, #15
   2129c:	4628      	mov	r0, r5
   2129e:	f003 f9f3 	bl	24688 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   212a2:	4b18      	ldr	r3, [pc, #96]	; (21304 <gpio_nrfx_pin_interrupt_configure+0x104>)
   212a4:	4298      	cmp	r0, r3
   212a6:	d01d      	beq.n	212e4 <gpio_nrfx_pin_interrupt_configure+0xe4>
		trigger_config.p_in_channel = &ch;
   212a8:	f10d 030f 	add.w	r3, sp, #15
   212ac:	9302      	str	r3, [sp, #8]
   212ae:	e7c7      	b.n	21240 <gpio_nrfx_pin_interrupt_configure+0x40>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   212b0:	4c15      	ldr	r4, [pc, #84]	; (21308 <gpio_nrfx_pin_interrupt_configure+0x108>)
   212b2:	f240 2247 	movw	r2, #583	; 0x247
   212b6:	4621      	mov	r1, r4
   212b8:	4814      	ldr	r0, [pc, #80]	; (2130c <gpio_nrfx_pin_interrupt_configure+0x10c>)
   212ba:	f009 fee8 	bl	2b08e <assert_print>
   212be:	f240 2147 	movw	r1, #583	; 0x247
   212c2:	4620      	mov	r0, r4
   212c4:	f009 fedc 	bl	2b080 <assert_post_action>
   212c8:	e7d9      	b.n	2127e <gpio_nrfx_pin_interrupt_configure+0x7e>
            NRFX_ASSERT(0);
   212ca:	4e0f      	ldr	r6, [pc, #60]	; (21308 <gpio_nrfx_pin_interrupt_configure+0x108>)
   212cc:	f44f 7213 	mov.w	r2, #588	; 0x24c
   212d0:	4631      	mov	r1, r6
   212d2:	480e      	ldr	r0, [pc, #56]	; (2130c <gpio_nrfx_pin_interrupt_configure+0x10c>)
   212d4:	f009 fedb 	bl	2b08e <assert_print>
   212d8:	f44f 7113 	mov.w	r1, #588	; 0x24c
   212dc:	4630      	mov	r0, r6
   212de:	f009 fecf 	bl	2b080 <assert_post_action>
   212e2:	e7d0      	b.n	21286 <gpio_nrfx_pin_interrupt_configure+0x86>
			err = nrfx_gpiote_channel_alloc(&ch);
   212e4:	f10d 000f 	add.w	r0, sp, #15
   212e8:	f003 fa34 	bl	24754 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   212ec:	4b04      	ldr	r3, [pc, #16]	; (21300 <gpio_nrfx_pin_interrupt_configure+0x100>)
   212ee:	4298      	cmp	r0, r3
   212f0:	d0da      	beq.n	212a8 <gpio_nrfx_pin_interrupt_configure+0xa8>
				return -ENOMEM;
   212f2:	f06f 000b 	mvn.w	r0, #11
   212f6:	e7b1      	b.n	2125c <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EINVAL;
   212f8:	f06f 0015 	mvn.w	r0, #21
   212fc:	e7ae      	b.n	2125c <gpio_nrfx_pin_interrupt_configure+0x5c>
   212fe:	bf00      	nop
   21300:	0bad0000 	.word	0x0bad0000
   21304:	0bad0004 	.word	0x0bad0004
   21308:	00034634 	.word	0x00034634
   2130c:	000318f8 	.word	0x000318f8

00021310 <gpio_nrfx_pin_configure>:
{
   21310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21314:	b086      	sub	sp, #24
   21316:	460e      	mov	r6, r1
   21318:	4614      	mov	r4, r2
	return port->config;
   2131a:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   2131e:	f898 300c 	ldrb.w	r3, [r8, #12]
   21322:	f001 051f 	and.w	r5, r1, #31
   21326:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   2132a:	f10d 0117 	add.w	r1, sp, #23
   2132e:	4628      	mov	r0, r5
   21330:	f003 f9aa 	bl	24688 <nrfx_gpiote_channel_get>
   21334:	4607      	mov	r7, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   21336:	f414 3f40 	tst.w	r4, #196608	; 0x30000
   2133a:	d03b      	beq.n	213b4 <gpio_nrfx_pin_configure+0xa4>
	nrfx_gpiote_trigger_config_t trigger_config = {
   2133c:	2100      	movs	r1, #0
   2133e:	9103      	str	r1, [sp, #12]
   21340:	9104      	str	r1, [sp, #16]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   21342:	460b      	mov	r3, r1
   21344:	aa03      	add	r2, sp, #12
   21346:	4628      	mov	r0, r5
   21348:	f002 ffca 	bl	242e0 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   2134c:	4b41      	ldr	r3, [pc, #260]	; (21454 <gpio_nrfx_pin_configure+0x144>)
   2134e:	4298      	cmp	r0, r3
   21350:	d17d      	bne.n	2144e <gpio_nrfx_pin_configure+0x13e>
	if (free_ch) {
   21352:	429f      	cmp	r7, r3
   21354:	d04b      	beq.n	213ee <gpio_nrfx_pin_configure+0xde>
	if (flags & GPIO_OUTPUT) {
   21356:	f414 3f00 	tst.w	r4, #131072	; 0x20000
   2135a:	d065      	beq.n	21428 <gpio_nrfx_pin_configure+0x118>
		int rv = get_drive(flags, &drive);
   2135c:	f10d 0103 	add.w	r1, sp, #3
   21360:	4620      	mov	r0, r4
   21362:	f00d ffe6 	bl	2f332 <get_drive>
		if (rv != 0) {
   21366:	4607      	mov	r7, r0
   21368:	bb58      	cbnz	r0, 213c2 <gpio_nrfx_pin_configure+0xb2>
		nrfx_gpiote_output_config_t output_config = {
   2136a:	f89d 3003 	ldrb.w	r3, [sp, #3]
   2136e:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   21372:	f414 3f80 	tst.w	r4, #65536	; 0x10000
   21376:	bf0c      	ite	eq
   21378:	2301      	moveq	r3, #1
   2137a:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
   2137c:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
   21380:	4620      	mov	r0, r4
   21382:	f00e f819 	bl	2f3b8 <get_pull>
		nrfx_gpiote_output_config_t output_config = {
   21386:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   2138a:	f414 2f00 	tst.w	r4, #524288	; 0x80000
   2138e:	d040      	beq.n	21412 <gpio_nrfx_pin_configure+0x102>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   21390:	f8d8 3004 	ldr.w	r3, [r8, #4]
   21394:	2101      	movs	r1, #1
   21396:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
   2139a:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   2139e:	2200      	movs	r2, #0
   213a0:	a901      	add	r1, sp, #4
   213a2:	4628      	mov	r0, r5
   213a4:	f003 f882 	bl	244ac <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   213a8:	4b2a      	ldr	r3, [pc, #168]	; (21454 <gpio_nrfx_pin_configure+0x144>)
   213aa:	4298      	cmp	r0, r3
   213ac:	d009      	beq.n	213c2 <gpio_nrfx_pin_configure+0xb2>
   213ae:	f06f 0715 	mvn.w	r7, #21
   213b2:	e006      	b.n	213c2 <gpio_nrfx_pin_configure+0xb2>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   213b4:	4628      	mov	r0, r5
   213b6:	f003 fb0d 	bl	249d4 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   213ba:	4b26      	ldr	r3, [pc, #152]	; (21454 <gpio_nrfx_pin_configure+0x144>)
   213bc:	429f      	cmp	r7, r3
   213be:	d004      	beq.n	213ca <gpio_nrfx_pin_configure+0xba>
		return 0;
   213c0:	2700      	movs	r7, #0
}
   213c2:	4638      	mov	r0, r7
   213c4:	b006      	add	sp, #24
   213c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			err = nrfx_gpiote_channel_free(ch);
   213ca:	f89d 0017 	ldrb.w	r0, [sp, #23]
   213ce:	f003 f9b9 	bl	24744 <nrfx_gpiote_channel_free>
			__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   213d2:	4b20      	ldr	r3, [pc, #128]	; (21454 <gpio_nrfx_pin_configure+0x144>)
   213d4:	4298      	cmp	r0, r3
   213d6:	d0f3      	beq.n	213c0 <gpio_nrfx_pin_configure+0xb0>
   213d8:	4c1f      	ldr	r4, [pc, #124]	; (21458 <gpio_nrfx_pin_configure+0x148>)
   213da:	2268      	movs	r2, #104	; 0x68
   213dc:	4621      	mov	r1, r4
   213de:	481f      	ldr	r0, [pc, #124]	; (2145c <gpio_nrfx_pin_configure+0x14c>)
   213e0:	f009 fe55 	bl	2b08e <assert_print>
   213e4:	2168      	movs	r1, #104	; 0x68
   213e6:	4620      	mov	r0, r4
   213e8:	f009 fe4a 	bl	2b080 <assert_post_action>
   213ec:	e7e8      	b.n	213c0 <gpio_nrfx_pin_configure+0xb0>
		err = nrfx_gpiote_channel_free(ch);
   213ee:	f89d 0017 	ldrb.w	r0, [sp, #23]
   213f2:	f003 f9a7 	bl	24744 <nrfx_gpiote_channel_free>
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   213f6:	4b17      	ldr	r3, [pc, #92]	; (21454 <gpio_nrfx_pin_configure+0x144>)
   213f8:	4298      	cmp	r0, r3
   213fa:	d0ac      	beq.n	21356 <gpio_nrfx_pin_configure+0x46>
   213fc:	4f16      	ldr	r7, [pc, #88]	; (21458 <gpio_nrfx_pin_configure+0x148>)
   213fe:	227a      	movs	r2, #122	; 0x7a
   21400:	4639      	mov	r1, r7
   21402:	4816      	ldr	r0, [pc, #88]	; (2145c <gpio_nrfx_pin_configure+0x14c>)
   21404:	f009 fe43 	bl	2b08e <assert_print>
   21408:	217a      	movs	r1, #122	; 0x7a
   2140a:	4638      	mov	r0, r7
   2140c:	f009 fe38 	bl	2b080 <assert_post_action>
   21410:	e7a1      	b.n	21356 <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   21412:	f414 2f80 	tst.w	r4, #262144	; 0x40000
   21416:	d0c2      	beq.n	2139e <gpio_nrfx_pin_configure+0x8e>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   21418:	f8d8 2004 	ldr.w	r2, [r8, #4]
   2141c:	2301      	movs	r3, #1
   2141e:	fa03 f606 	lsl.w	r6, r3, r6
    p_reg->OUTCLR = clr_mask;
   21422:	f8c2 650c 	str.w	r6, [r2, #1292]	; 0x50c
}
   21426:	e7ba      	b.n	2139e <gpio_nrfx_pin_configure+0x8e>
		.pull = get_pull(flags)
   21428:	4620      	mov	r0, r4
   2142a:	f00d ffc5 	bl	2f3b8 <get_pull>
	nrfx_gpiote_input_config_t input_config = {
   2142e:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   21432:	2300      	movs	r3, #0
   21434:	461a      	mov	r2, r3
   21436:	a902      	add	r1, sp, #8
   21438:	4628      	mov	r0, r5
   2143a:	f002 ff51 	bl	242e0 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   2143e:	4b05      	ldr	r3, [pc, #20]	; (21454 <gpio_nrfx_pin_configure+0x144>)
   21440:	4298      	cmp	r0, r3
   21442:	d101      	bne.n	21448 <gpio_nrfx_pin_configure+0x138>
   21444:	2700      	movs	r7, #0
   21446:	e7bc      	b.n	213c2 <gpio_nrfx_pin_configure+0xb2>
   21448:	f06f 0715 	mvn.w	r7, #21
   2144c:	e7b9      	b.n	213c2 <gpio_nrfx_pin_configure+0xb2>
		return -EINVAL;
   2144e:	f06f 0715 	mvn.w	r7, #21
   21452:	e7b6      	b.n	213c2 <gpio_nrfx_pin_configure+0xb2>
   21454:	0bad0000 	.word	0x0bad0000
   21458:	00034668 	.word	0x00034668
   2145c:	000318f8 	.word	0x000318f8

00021460 <gpio_nrfx_init>:

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   21460:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   21462:	f003 f965 	bl	24730 <nrfx_gpiote_is_init>
   21466:	b108      	cbz	r0, 2146c <gpio_nrfx_init+0xc>
		return 0;
   21468:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   2146a:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
   2146c:	f003 f936 	bl	246dc <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   21470:	4b08      	ldr	r3, [pc, #32]	; (21494 <gpio_nrfx_init+0x34>)
   21472:	4298      	cmp	r0, r3
   21474:	d10a      	bne.n	2148c <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   21476:	2100      	movs	r1, #0
   21478:	4807      	ldr	r0, [pc, #28]	; (21498 <gpio_nrfx_init+0x38>)
   2147a:	f003 f8ff 	bl	2467c <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   2147e:	2200      	movs	r2, #0
   21480:	2105      	movs	r1, #5
   21482:	2006      	movs	r0, #6
   21484:	f7f4 fab8 	bl	159f8 <z_arm_irq_priority_set>
	return 0;
   21488:	2000      	movs	r0, #0
   2148a:	e7ee      	b.n	2146a <gpio_nrfx_init+0xa>
		return -EIO;
   2148c:	f06f 0004 	mvn.w	r0, #4
   21490:	e7eb      	b.n	2146a <gpio_nrfx_init+0xa>
   21492:	bf00      	nop
   21494:	0bad0000 	.word	0x0bad0000
   21498:	00021189 	.word	0x00021189

0002149c <i2c_nrfx_twi_recover_bus>:

	return 0;
}

static int i2c_nrfx_twi_recover_bus(const struct device *dev)
{
   2149c:	b508      	push	{r3, lr}
	const struct i2c_nrfx_twi_config *config = dev->config;
   2149e:	6843      	ldr	r3, [r0, #4]
	uint32_t scl_pin;
	uint32_t sda_pin;
	nrfx_err_t err;

#ifdef CONFIG_PINCTRL
	scl_pin = nrf_twi_scl_pin_get(config->twi.p_twi);
   214a0:	681b      	ldr	r3, [r3, #0]
NRF_STATIC_INLINE uint32_t nrf_twi_scl_pin_get(NRF_TWI_Type const * p_reg)
{
#if defined(TWI_PSEL_SCL_CONNECT_Pos)
    return p_reg->PSEL.SCL;
#else
    return p_reg->PSELSCL;
   214a2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
NRF_STATIC_INLINE uint32_t nrf_twi_sda_pin_get(NRF_TWI_Type const * p_reg)
{
#if defined(TWI_PSEL_SDA_CONNECT_Pos)
    return p_reg->PSEL.SDA;
#else
    return p_reg->PSELSDA;
   214a6:	f8d3 150c 	ldr.w	r1, [r3, #1292]	; 0x50c
NRFX_STATIC_INLINE nrfx_err_t nrfx_twi_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twi_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
   214aa:	f003 fee7 	bl	2527c <nrfx_twi_twim_bus_recover>
	scl_pin = config->config.scl;
	sda_pin = config->config.sda;
#endif

	err = nrfx_twi_bus_recover(scl_pin, sda_pin);
	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
   214ae:	4b04      	ldr	r3, [pc, #16]	; (214c0 <i2c_nrfx_twi_recover_bus+0x24>)
   214b0:	4298      	cmp	r0, r3
   214b2:	d101      	bne.n	214b8 <i2c_nrfx_twi_recover_bus+0x1c>
   214b4:	2000      	movs	r0, #0
}
   214b6:	bd08      	pop	{r3, pc}
	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
   214b8:	f06f 000f 	mvn.w	r0, #15
   214bc:	e7fb      	b.n	214b6 <i2c_nrfx_twi_recover_bus+0x1a>
   214be:	bf00      	nop
   214c0:	0bad0000 	.word	0x0bad0000

000214c4 <i2c_nrfx_twi_configure>:
{
   214c4:	b510      	push	{r4, lr}
	const struct i2c_nrfx_twi_config *config = dev->config;
   214c6:	6844      	ldr	r4, [r0, #4]
	struct i2c_nrfx_twi_data *data = dev->data;
   214c8:	6902      	ldr	r2, [r0, #16]
	if (I2C_ADDR_10_BITS & dev_config) {
   214ca:	f011 0f01 	tst.w	r1, #1
   214ce:	d11a      	bne.n	21506 <i2c_nrfx_twi_configure+0x42>
	switch (I2C_SPEED_GET(dev_config)) {
   214d0:	f3c1 0342 	ubfx	r3, r1, #1, #3
   214d4:	2b01      	cmp	r3, #1
   214d6:	d008      	beq.n	214ea <i2c_nrfx_twi_configure+0x26>
   214d8:	2b02      	cmp	r3, #2
   214da:	d00e      	beq.n	214fa <i2c_nrfx_twi_configure+0x36>
		LOG_ERR("unsupported speed");
   214dc:	2145      	movs	r1, #69	; 0x45
   214de:	480b      	ldr	r0, [pc, #44]	; (2150c <i2c_nrfx_twi_configure+0x48>)
   214e0:	f009 fde4 	bl	2b0ac <z_log_minimal_printk>
		return -EINVAL;
   214e4:	f06f 0015 	mvn.w	r0, #21
   214e8:	e006      	b.n	214f8 <i2c_nrfx_twi_configure+0x34>
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_100K);
   214ea:	6823      	ldr	r3, [r4, #0]
}

NRF_STATIC_INLINE void nrf_twi_frequency_set(NRF_TWI_Type *      p_reg,
                                             nrf_twi_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
   214ec:	f04f 70cc 	mov.w	r0, #26738688	; 0x1980000
   214f0:	f8c3 0524 	str.w	r0, [r3, #1316]	; 0x524
	data->dev_config = dev_config;
   214f4:	6351      	str	r1, [r2, #52]	; 0x34
	return 0;
   214f6:	2000      	movs	r0, #0
}
   214f8:	bd10      	pop	{r4, pc}
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_400K);
   214fa:	6823      	ldr	r3, [r4, #0]
   214fc:	f04f 60cd 	mov.w	r0, #107479040	; 0x6680000
   21500:	f8c3 0524 	str.w	r0, [r3, #1316]	; 0x524
}
   21504:	e7f6      	b.n	214f4 <i2c_nrfx_twi_configure+0x30>
		return -EINVAL;
   21506:	f06f 0015 	mvn.w	r0, #21
   2150a:	e7f5      	b.n	214f8 <i2c_nrfx_twi_configure+0x34>
   2150c:	000346dc 	.word	0x000346dc

00021510 <i2c_nrfx_twi_transfer>:
{
   21510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21514:	b089      	sub	sp, #36	; 0x24
   21516:	4682      	mov	sl, r0
   21518:	460d      	mov	r5, r1
   2151a:	4616      	mov	r6, r2
   2151c:	4699      	mov	r9, r3
	const struct i2c_nrfx_twi_config *config = dev->config;
   2151e:	f8d0 8004 	ldr.w	r8, [r0, #4]
	struct i2c_nrfx_twi_data *data = dev->data;
   21522:	6907      	ldr	r7, [r0, #16]
	return z_impl_k_sem_take(sem, timeout);
   21524:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   21528:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2152c:	4638      	mov	r0, r7
   2152e:	f005 f93b 	bl	267a8 <z_impl_k_sem_take>
	k_sem_take(&data->completion_sync, K_NO_WAIT);
   21532:	f107 0b18 	add.w	fp, r7, #24
   21536:	2200      	movs	r2, #0
   21538:	2300      	movs	r3, #0
   2153a:	4658      	mov	r0, fp
   2153c:	f005 f934 	bl	267a8 <z_impl_k_sem_take>
	nrfx_twi_enable(&config->twi);
   21540:	4640      	mov	r0, r8
   21542:	f003 fddf 	bl	25104 <nrfx_twi_enable>
	for (size_t i = 0; i < num_msgs; i++) {
   21546:	2400      	movs	r4, #0
	int ret = 0;
   21548:	9401      	str	r4, [sp, #4]
	for (size_t i = 0; i < num_msgs; i++) {
   2154a:	e018      	b.n	2157e <i2c_nrfx_twi_transfer+0x6e>
			} else if (msgs[i].flags & I2C_MSG_READ) {
   2154c:	f012 0f01 	tst.w	r2, #1
   21550:	d174      	bne.n	2163c <i2c_nrfx_twi_transfer+0x12c>
				xfer_flags |= NRFX_TWI_FLAG_TX_NO_STOP;
   21552:	2220      	movs	r2, #32
		res = nrfx_twi_xfer(&config->twi, &cur_xfer, xfer_flags);
   21554:	a903      	add	r1, sp, #12
   21556:	4640      	mov	r0, r8
   21558:	f003 fe38 	bl	251cc <nrfx_twi_xfer>
		if (res != NRFX_SUCCESS) {
   2155c:	4b39      	ldr	r3, [pc, #228]	; (21644 <i2c_nrfx_twi_transfer+0x134>)
   2155e:	4298      	cmp	r0, r3
   21560:	d13c      	bne.n	215dc <i2c_nrfx_twi_transfer+0xcc>
   21562:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   21566:	2300      	movs	r3, #0
   21568:	4658      	mov	r0, fp
   2156a:	f005 f91d 	bl	267a8 <z_impl_k_sem_take>
		if (ret != 0) {
   2156e:	9001      	str	r0, [sp, #4]
   21570:	2800      	cmp	r0, #0
   21572:	d13e      	bne.n	215f2 <i2c_nrfx_twi_transfer+0xe2>
		res = data->res;
   21574:	6b3a      	ldr	r2, [r7, #48]	; 0x30
		if (res != NRFX_SUCCESS) {
   21576:	4b33      	ldr	r3, [pc, #204]	; (21644 <i2c_nrfx_twi_transfer+0x134>)
   21578:	429a      	cmp	r2, r3
   2157a:	d149      	bne.n	21610 <i2c_nrfx_twi_transfer+0x100>
	for (size_t i = 0; i < num_msgs; i++) {
   2157c:	3401      	adds	r4, #1
   2157e:	42b4      	cmp	r4, r6
   21580:	d252      	bcs.n	21628 <i2c_nrfx_twi_transfer+0x118>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
   21582:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   21586:	0099      	lsls	r1, r3, #2
   21588:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   2158c:	7a1a      	ldrb	r2, [r3, #8]
   2158e:	f012 0f08 	tst.w	r2, #8
   21592:	d146      	bne.n	21622 <i2c_nrfx_twi_transfer+0x112>
		nrfx_twi_xfer_desc_t cur_xfer = {
   21594:	2200      	movs	r2, #0
   21596:	9203      	str	r2, [sp, #12]
   21598:	9204      	str	r2, [sp, #16]
   2159a:	9205      	str	r2, [sp, #20]
   2159c:	9206      	str	r2, [sp, #24]
   2159e:	9207      	str	r2, [sp, #28]
			.type		= (msgs[i].flags & I2C_MSG_READ) ?
   215a0:	7a1a      	ldrb	r2, [r3, #8]
					  NRFX_TWI_XFER_RX : NRFX_TWI_XFER_TX
   215a2:	f002 0001 	and.w	r0, r2, #1
		nrfx_twi_xfer_desc_t cur_xfer = {
   215a6:	f88d 000c 	strb.w	r0, [sp, #12]
   215aa:	f88d 900d 	strb.w	r9, [sp, #13]
			.primary_length = msgs[i].len,
   215ae:	685b      	ldr	r3, [r3, #4]
		nrfx_twi_xfer_desc_t cur_xfer = {
   215b0:	9304      	str	r3, [sp, #16]
			.p_primary_buf  = msgs[i].buf,
   215b2:	586b      	ldr	r3, [r5, r1]
		nrfx_twi_xfer_desc_t cur_xfer = {
   215b4:	9306      	str	r3, [sp, #24]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
   215b6:	f012 0f02 	tst.w	r2, #2
   215ba:	d10d      	bne.n	215d8 <i2c_nrfx_twi_transfer+0xc8>
			if ((i < (num_msgs - 1)) &&
   215bc:	1e73      	subs	r3, r6, #1
   215be:	42a3      	cmp	r3, r4
   215c0:	d9c4      	bls.n	2154c <i2c_nrfx_twi_transfer+0x3c>
			    !(msgs[i + 1].flags & I2C_MSG_RESTART)) {
   215c2:	1c63      	adds	r3, r4, #1
   215c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   215c8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   215cc:	7a1b      	ldrb	r3, [r3, #8]
			if ((i < (num_msgs - 1)) &&
   215ce:	f013 0f04 	tst.w	r3, #4
   215d2:	d1bb      	bne.n	2154c <i2c_nrfx_twi_transfer+0x3c>
				xfer_flags |= NRFX_TWI_FLAG_SUSPEND;
   215d4:	2240      	movs	r2, #64	; 0x40
   215d6:	e7bd      	b.n	21554 <i2c_nrfx_twi_transfer+0x44>
		uint32_t xfer_flags = 0;
   215d8:	2200      	movs	r2, #0
   215da:	e7bb      	b.n	21554 <i2c_nrfx_twi_transfer+0x44>
			if (res == NRFX_ERROR_BUSY) {
   215dc:	330b      	adds	r3, #11
   215de:	4298      	cmp	r0, r3
   215e0:	d003      	beq.n	215ea <i2c_nrfx_twi_transfer+0xda>
				ret = -EIO;
   215e2:	f06f 0304 	mvn.w	r3, #4
   215e6:	9301      	str	r3, [sp, #4]
   215e8:	e01e      	b.n	21628 <i2c_nrfx_twi_transfer+0x118>
				ret = -EBUSY;
   215ea:	f06f 030f 	mvn.w	r3, #15
   215ee:	9301      	str	r3, [sp, #4]
   215f0:	e01a      	b.n	21628 <i2c_nrfx_twi_transfer+0x118>
			LOG_ERR("Error on I2C line occurred for message %d", i);
   215f2:	4622      	mov	r2, r4
   215f4:	2145      	movs	r1, #69	; 0x45
   215f6:	4814      	ldr	r0, [pc, #80]	; (21648 <i2c_nrfx_twi_transfer+0x138>)
   215f8:	f009 fd58 	bl	2b0ac <z_log_minimal_printk>
			nrfx_twi_disable(&config->twi);
   215fc:	4640      	mov	r0, r8
   215fe:	f003 fdad 	bl	2515c <nrfx_twi_disable>
			(void)i2c_nrfx_twi_recover_bus(dev);
   21602:	4650      	mov	r0, sl
   21604:	f7ff ff4a 	bl	2149c <i2c_nrfx_twi_recover_bus>
			ret = -EIO;
   21608:	f06f 0304 	mvn.w	r3, #4
   2160c:	9301      	str	r3, [sp, #4]
			break;
   2160e:	e00b      	b.n	21628 <i2c_nrfx_twi_transfer+0x118>
			LOG_ERR("Error 0x%08X occurred for message %d", res, i);
   21610:	4623      	mov	r3, r4
   21612:	2145      	movs	r1, #69	; 0x45
   21614:	480d      	ldr	r0, [pc, #52]	; (2164c <i2c_nrfx_twi_transfer+0x13c>)
   21616:	f009 fd49 	bl	2b0ac <z_log_minimal_printk>
			ret = -EIO;
   2161a:	f06f 0304 	mvn.w	r3, #4
   2161e:	9301      	str	r3, [sp, #4]
			break;
   21620:	e002      	b.n	21628 <i2c_nrfx_twi_transfer+0x118>
			ret = -ENOTSUP;
   21622:	f06f 0385 	mvn.w	r3, #133	; 0x85
   21626:	9301      	str	r3, [sp, #4]
	nrfx_twi_disable(&config->twi);
   21628:	4640      	mov	r0, r8
   2162a:	f003 fd97 	bl	2515c <nrfx_twi_disable>
	z_impl_k_sem_give(sem);
   2162e:	4638      	mov	r0, r7
   21630:	f005 f87c 	bl	2672c <z_impl_k_sem_give>
}
   21634:	9801      	ldr	r0, [sp, #4]
   21636:	b009      	add	sp, #36	; 0x24
   21638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				ret = -ENOTSUP;
   2163c:	f06f 0385 	mvn.w	r3, #133	; 0x85
   21640:	9301      	str	r3, [sp, #4]
   21642:	e7f1      	b.n	21628 <i2c_nrfx_twi_transfer+0x118>
   21644:	0bad0000 	.word	0x0bad0000
   21648:	000346f4 	.word	0x000346f4
   2164c:	00034724 	.word	0x00034724

00021650 <event_handler>:
{
   21650:	b508      	push	{r3, lr}
	switch (p_event->type) {
   21652:	7803      	ldrb	r3, [r0, #0]
   21654:	2b01      	cmp	r3, #1
   21656:	d00c      	beq.n	21672 <event_handler+0x22>
   21658:	2b02      	cmp	r3, #2
   2165a:	d00d      	beq.n	21678 <event_handler+0x28>
   2165c:	b113      	cbz	r3, 21664 <event_handler+0x14>
		dev_data->res = NRFX_ERROR_INTERNAL;
   2165e:	4b08      	ldr	r3, [pc, #32]	; (21680 <event_handler+0x30>)
   21660:	630b      	str	r3, [r1, #48]	; 0x30
		break;
   21662:	e001      	b.n	21668 <event_handler+0x18>
		dev_data->res = NRFX_SUCCESS;
   21664:	4b07      	ldr	r3, [pc, #28]	; (21684 <event_handler+0x34>)
   21666:	630b      	str	r3, [r1, #48]	; 0x30
	k_sem_give(&dev_data->completion_sync);
   21668:	f101 0018 	add.w	r0, r1, #24
   2166c:	f005 f85e 	bl	2672c <z_impl_k_sem_give>
}
   21670:	bd08      	pop	{r3, pc}
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   21672:	4b05      	ldr	r3, [pc, #20]	; (21688 <event_handler+0x38>)
   21674:	630b      	str	r3, [r1, #48]	; 0x30
		break;
   21676:	e7f7      	b.n	21668 <event_handler+0x18>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   21678:	4b04      	ldr	r3, [pc, #16]	; (2168c <event_handler+0x3c>)
   2167a:	630b      	str	r3, [r1, #48]	; 0x30
		break;
   2167c:	e7f4      	b.n	21668 <event_handler+0x18>
   2167e:	bf00      	nop
   21680:	0bad0001 	.word	0x0bad0001
   21684:	0bad0000 	.word	0x0bad0000
   21688:	0bae0001 	.word	0x0bae0001
   2168c:	0bae0002 	.word	0x0bae0002

00021690 <init_twi>:
	.transfer    = i2c_nrfx_twi_transfer,
	.recover_bus = i2c_nrfx_twi_recover_bus,
};

static int init_twi(const struct device *dev)
{
   21690:	b510      	push	{r4, lr}
   21692:	4604      	mov	r4, r0
	const struct i2c_nrfx_twi_config *config = dev->config;
   21694:	6840      	ldr	r0, [r0, #4]
	struct i2c_nrfx_twi_data *dev_data = dev->data;
	nrfx_err_t result = nrfx_twi_init(&config->twi, &config->config,
   21696:	6923      	ldr	r3, [r4, #16]
   21698:	4a08      	ldr	r2, [pc, #32]	; (216bc <init_twi+0x2c>)
   2169a:	f100 0108 	add.w	r1, r0, #8
   2169e:	f003 fc63 	bl	24f68 <nrfx_twi_init>
					  event_handler, dev_data);
	if (result != NRFX_SUCCESS) {
   216a2:	4b07      	ldr	r3, [pc, #28]	; (216c0 <init_twi+0x30>)
   216a4:	4298      	cmp	r0, r3
   216a6:	d101      	bne.n	216ac <init_twi+0x1c>
		LOG_ERR("Failed to initialize device: %s",
			    dev->name);
		return -EBUSY;
	}

	return 0;
   216a8:	2000      	movs	r0, #0
}
   216aa:	bd10      	pop	{r4, pc}
		LOG_ERR("Failed to initialize device: %s",
   216ac:	6822      	ldr	r2, [r4, #0]
   216ae:	2145      	movs	r1, #69	; 0x45
   216b0:	4804      	ldr	r0, [pc, #16]	; (216c4 <init_twi+0x34>)
   216b2:	f009 fcfb 	bl	2b0ac <z_log_minimal_printk>
		return -EBUSY;
   216b6:	f06f 000f 	mvn.w	r0, #15
   216ba:	e7f6      	b.n	216aa <init_twi+0x1a>
   216bc:	00021651 	.word	0x00021651
   216c0:	0bad0000 	.word	0x0bad0000
   216c4:	00034750 	.word	0x00034750

000216c8 <nvmc_wait_ready>:

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   216c8:	4b03      	ldr	r3, [pc, #12]	; (216d8 <nvmc_wait_ready+0x10>)
   216ca:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
#endif /* CONFIG_SOC_FLASH_NRF_UICR */
}

static void nvmc_wait_ready(void)
{
	while (!nrfx_nvmc_write_done_check()) {
   216ce:	f013 0f01 	tst.w	r3, #1
   216d2:	d0f9      	beq.n	216c8 <nvmc_wait_ready>
	}
}
   216d4:	4770      	bx	lr
   216d6:	bf00      	nop
   216d8:	4001e000 	.word	0x4001e000

000216dc <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   216dc:	4b02      	ldr	r3, [pc, #8]	; (216e8 <flash_nrf_pages_layout+0xc>)
   216de:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   216e0:	2301      	movs	r3, #1
   216e2:	6013      	str	r3, [r2, #0]
}
   216e4:	4770      	bx	lr
   216e6:	bf00      	nop
   216e8:	20002890 	.word	0x20002890

000216ec <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   216ec:	4800      	ldr	r0, [pc, #0]	; (216f0 <flash_nrf_get_parameters+0x4>)
   216ee:	4770      	bx	lr
   216f0:	000348d8 	.word	0x000348d8

000216f4 <erase_synchronously>:
		 &flash_nrf_api);

#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE

static int erase_synchronously(uint32_t addr, uint32_t size)
{
   216f4:	b500      	push	{lr}
   216f6:	b087      	sub	sp, #28
	struct flash_context context = {
   216f8:	ab02      	add	r3, sp, #8
   216fa:	2200      	movs	r2, #0
   216fc:	9202      	str	r2, [sp, #8]
   216fe:	9203      	str	r2, [sp, #12]
   21700:	9204      	str	r2, [sp, #16]
   21702:	9205      	str	r2, [sp, #20]
   21704:	9003      	str	r0, [sp, #12]
   21706:	9104      	str	r1, [sp, #16]
   21708:	2201      	movs	r2, #1
   2170a:	f88d 2014 	strb.w	r2, [sp, #20]
#if defined(CONFIG_SOC_FLASH_NRF_PARTIAL_ERASE)
		.flash_addr_next = addr
#endif
	};

	struct flash_op_desc flash_op_desc = {
   2170e:	4a06      	ldr	r2, [pc, #24]	; (21728 <erase_synchronously+0x34>)
   21710:	9200      	str	r2, [sp, #0]
   21712:	9301      	str	r3, [sp, #4]
		.handler = erase_op,
		.context = &context
	};

	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   21714:	4805      	ldr	r0, [pc, #20]	; (2172c <erase_synchronously+0x38>)
   21716:	f002 f8a5 	bl	23864 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   2171a:	4668      	mov	r0, sp
   2171c:	f002 f8a8 	bl	23870 <nrf_flash_sync_exe>
}
   21720:	b007      	add	sp, #28
   21722:	f85d fb04 	ldr.w	pc, [sp], #4
   21726:	bf00      	nop
   21728:	0002f4e1 	.word	0x0002f4e1
   2172c:	00015e64 	.word	0x00015e64

00021730 <write_synchronously>:

static int write_synchronously(off_t addr, const void *data, size_t len)
{
   21730:	b500      	push	{lr}
   21732:	b087      	sub	sp, #28
	struct flash_context context = {
   21734:	9102      	str	r1, [sp, #8]
   21736:	9003      	str	r0, [sp, #12]
   21738:	9204      	str	r2, [sp, #16]
   2173a:	2301      	movs	r3, #1
   2173c:	f88d 3014 	strb.w	r3, [sp, #20]
		.flash_addr = addr,
		.len = len,
		.enable_time_limit = 1 /* enable time limit */
	};

	struct flash_op_desc flash_op_desc = {
   21740:	4b06      	ldr	r3, [pc, #24]	; (2175c <write_synchronously+0x2c>)
   21742:	9300      	str	r3, [sp, #0]
   21744:	ab02      	add	r3, sp, #8
   21746:	9301      	str	r3, [sp, #4]
		.handler = write_op,
		.context = &context
	};

	nrf_flash_sync_set_context(FLASH_SLOT_WRITE);
   21748:	f641 504c 	movw	r0, #7500	; 0x1d4c
   2174c:	f002 f88a 	bl	23864 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   21750:	4668      	mov	r0, sp
   21752:	f002 f88d 	bl	23870 <nrf_flash_sync_exe>
}
   21756:	b007      	add	sp, #28
   21758:	f85d fb04 	ldr.w	pc, [sp], #4
   2175c:	0002f549 	.word	0x0002f549

00021760 <flash_nrf_erase>:
{
   21760:	b570      	push	{r4, r5, r6, lr}
   21762:	460d      	mov	r5, r1
   21764:	4616      	mov	r6, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   21766:	f00e ffaf 	bl	306c8 <nrfx_nvmc_flash_page_size_get>
   2176a:	4604      	mov	r4, r0
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
   2176c:	f00e ffa8 	bl	306c0 <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
   21770:	2d00      	cmp	r5, #0
   21772:	db06      	blt.n	21782 <flash_nrf_erase+0x22>
	return (addr >= boundary_start &&
   21774:	42a8      	cmp	r0, r5
   21776:	d915      	bls.n	217a4 <flash_nrf_erase+0x44>
			(len <= (boundary_start + boundary_size - addr)));
   21778:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
   2177a:	4286      	cmp	r6, r0
   2177c:	d914      	bls.n	217a8 <flash_nrf_erase+0x48>
   2177e:	2300      	movs	r3, #0
   21780:	e000      	b.n	21784 <flash_nrf_erase+0x24>
   21782:	2300      	movs	r3, #0
	if (is_regular_addr_valid(addr, size)) {
   21784:	b35b      	cbz	r3, 217de <flash_nrf_erase+0x7e>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   21786:	fbb5 f3f4 	udiv	r3, r5, r4
   2178a:	fb04 5313 	mls	r3, r4, r3, r5
   2178e:	b96b      	cbnz	r3, 217ac <flash_nrf_erase+0x4c>
   21790:	fbb6 f3f4 	udiv	r3, r6, r4
   21794:	fb04 6313 	mls	r3, r4, r3, r6
   21798:	b943      	cbnz	r3, 217ac <flash_nrf_erase+0x4c>
		if (!n_pages) {
   2179a:	42a6      	cmp	r6, r4
   2179c:	d20f      	bcs.n	217be <flash_nrf_erase+0x5e>
			return 0;
   2179e:	2400      	movs	r4, #0
}
   217a0:	4620      	mov	r0, r4
   217a2:	bd70      	pop	{r4, r5, r6, pc}
			(addr < (boundary_start + boundary_size)) &&
   217a4:	2300      	movs	r3, #0
   217a6:	e7ed      	b.n	21784 <flash_nrf_erase+0x24>
   217a8:	2301      	movs	r3, #1
   217aa:	e7eb      	b.n	21784 <flash_nrf_erase+0x24>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   217ac:	4633      	mov	r3, r6
   217ae:	462a      	mov	r2, r5
   217b0:	2145      	movs	r1, #69	; 0x45
   217b2:	4814      	ldr	r0, [pc, #80]	; (21804 <flash_nrf_erase+0xa4>)
   217b4:	f009 fc7a 	bl	2b0ac <z_log_minimal_printk>
			return -EINVAL;
   217b8:	f06f 0415 	mvn.w	r4, #21
   217bc:	e7f0      	b.n	217a0 <flash_nrf_erase+0x40>
	return z_impl_k_sem_take(sem, timeout);
   217be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   217c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   217c6:	4810      	ldr	r0, [pc, #64]	; (21808 <flash_nrf_erase+0xa8>)
   217c8:	f004 ffee 	bl	267a8 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   217cc:	f00e fe1d 	bl	3040a <nrf_flash_sync_is_required>
   217d0:	b970      	cbnz	r0, 217f0 <flash_nrf_erase+0x90>
		ret = erase(addr, size);
   217d2:	4631      	mov	r1, r6
   217d4:	4628      	mov	r0, r5
   217d6:	f00d fea8 	bl	2f52a <erase>
   217da:	4604      	mov	r4, r0
   217dc:	e00d      	b.n	217fa <flash_nrf_erase+0x9a>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   217de:	4633      	mov	r3, r6
   217e0:	462a      	mov	r2, r5
   217e2:	2145      	movs	r1, #69	; 0x45
   217e4:	4809      	ldr	r0, [pc, #36]	; (2180c <flash_nrf_erase+0xac>)
   217e6:	f009 fc61 	bl	2b0ac <z_log_minimal_printk>
		return -EINVAL;
   217ea:	f06f 0415 	mvn.w	r4, #21
   217ee:	e7d7      	b.n	217a0 <flash_nrf_erase+0x40>
		ret = erase_synchronously(addr, size);
   217f0:	4631      	mov	r1, r6
   217f2:	4628      	mov	r0, r5
   217f4:	f7ff ff7e 	bl	216f4 <erase_synchronously>
   217f8:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   217fa:	4803      	ldr	r0, [pc, #12]	; (21808 <flash_nrf_erase+0xa8>)
   217fc:	f004 ff96 	bl	2672c <z_impl_k_sem_give>
	return ret;
   21800:	e7ce      	b.n	217a0 <flash_nrf_erase+0x40>
   21802:	bf00      	nop
   21804:	00034830 	.word	0x00034830
   21808:	20002898 	.word	0x20002898
   2180c:	00034854 	.word	0x00034854

00021810 <nrf_flash_init>:
{
   21810:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   21812:	2201      	movs	r2, #1
   21814:	4611      	mov	r1, r2
   21816:	4807      	ldr	r0, [pc, #28]	; (21834 <nrf_flash_init+0x24>)
   21818:	f00f f8fa 	bl	30a10 <z_impl_k_sem_init>
	nrf_flash_sync_init();
   2181c:	f002 f818 	bl	23850 <nrf_flash_sync_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   21820:	f00e ff56 	bl	306d0 <nrfx_nvmc_flash_page_count_get>
   21824:	4c04      	ldr	r4, [pc, #16]	; (21838 <nrf_flash_init+0x28>)
   21826:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   21828:	f00e ff4e 	bl	306c8 <nrfx_nvmc_flash_page_size_get>
   2182c:	6060      	str	r0, [r4, #4]
}
   2182e:	2000      	movs	r0, #0
   21830:	bd10      	pop	{r4, pc}
   21832:	bf00      	nop
   21834:	20002898 	.word	0x20002898
   21838:	20002890 	.word	0x20002890

0002183c <flash_nrf_read>:
{
   2183c:	b570      	push	{r4, r5, r6, lr}
   2183e:	460c      	mov	r4, r1
   21840:	4616      	mov	r6, r2
   21842:	461d      	mov	r5, r3
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
   21844:	f00e ff3c 	bl	306c0 <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
   21848:	2c00      	cmp	r4, #0
   2184a:	db06      	blt.n	2185a <flash_nrf_read+0x1e>
	return (addr >= boundary_start &&
   2184c:	42a0      	cmp	r0, r4
   2184e:	d90e      	bls.n	2186e <flash_nrf_read+0x32>
			(len <= (boundary_start + boundary_size - addr)));
   21850:	1b00      	subs	r0, r0, r4
			(addr < (boundary_start + boundary_size)) &&
   21852:	4285      	cmp	r5, r0
   21854:	d90d      	bls.n	21872 <flash_nrf_read+0x36>
   21856:	2300      	movs	r3, #0
   21858:	e000      	b.n	2185c <flash_nrf_read+0x20>
   2185a:	2300      	movs	r3, #0
	if (is_regular_addr_valid(addr, len)) {
   2185c:	b15b      	cbz	r3, 21876 <flash_nrf_read+0x3a>
	if (!len) {
   2185e:	b19d      	cbz	r5, 21888 <flash_nrf_read+0x4c>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   21860:	462a      	mov	r2, r5
   21862:	4621      	mov	r1, r4
   21864:	4630      	mov	r0, r6
   21866:	f00f fa57 	bl	30d18 <memcpy>
	return 0;
   2186a:	2000      	movs	r0, #0
}
   2186c:	bd70      	pop	{r4, r5, r6, pc}
			(addr < (boundary_start + boundary_size)) &&
   2186e:	2300      	movs	r3, #0
   21870:	e7f4      	b.n	2185c <flash_nrf_read+0x20>
   21872:	2301      	movs	r3, #1
   21874:	e7f2      	b.n	2185c <flash_nrf_read+0x20>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   21876:	462b      	mov	r3, r5
   21878:	4622      	mov	r2, r4
   2187a:	2145      	movs	r1, #69	; 0x45
   2187c:	4803      	ldr	r0, [pc, #12]	; (2188c <flash_nrf_read+0x50>)
   2187e:	f009 fc15 	bl	2b0ac <z_log_minimal_printk>
		return -EINVAL;
   21882:	f06f 0015 	mvn.w	r0, #21
   21886:	e7f1      	b.n	2186c <flash_nrf_read+0x30>
		return 0;
   21888:	2000      	movs	r0, #0
   2188a:	e7ef      	b.n	2186c <flash_nrf_read+0x30>
   2188c:	00034854 	.word	0x00034854

00021890 <flash_nrf_write>:
{
   21890:	b570      	push	{r4, r5, r6, lr}
   21892:	460c      	mov	r4, r1
   21894:	4616      	mov	r6, r2
   21896:	461d      	mov	r5, r3
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
   21898:	f00e ff12 	bl	306c0 <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
   2189c:	2c00      	cmp	r4, #0
   2189e:	db06      	blt.n	218ae <flash_nrf_write+0x1e>
	return (addr >= boundary_start &&
   218a0:	42a0      	cmp	r0, r4
   218a2:	d910      	bls.n	218c6 <flash_nrf_write+0x36>
			(len <= (boundary_start + boundary_size - addr)));
   218a4:	1b00      	subs	r0, r0, r4
			(addr < (boundary_start + boundary_size)) &&
   218a6:	4285      	cmp	r5, r0
   218a8:	d90f      	bls.n	218ca <flash_nrf_write+0x3a>
   218aa:	2300      	movs	r3, #0
   218ac:	e000      	b.n	218b0 <flash_nrf_write+0x20>
   218ae:	2300      	movs	r3, #0
	if (is_regular_addr_valid(addr, len)) {
   218b0:	b16b      	cbz	r3, 218ce <flash_nrf_write+0x3e>
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   218b2:	f014 0f03 	tst.w	r4, #3
   218b6:	d113      	bne.n	218e0 <flash_nrf_write+0x50>
   218b8:	f015 0f03 	tst.w	r5, #3
   218bc:	d110      	bne.n	218e0 <flash_nrf_write+0x50>
	if (!len) {
   218be:	b9c5      	cbnz	r5, 218f2 <flash_nrf_write+0x62>
		return 0;
   218c0:	2400      	movs	r4, #0
}
   218c2:	4620      	mov	r0, r4
   218c4:	bd70      	pop	{r4, r5, r6, pc}
			(addr < (boundary_start + boundary_size)) &&
   218c6:	2300      	movs	r3, #0
   218c8:	e7f2      	b.n	218b0 <flash_nrf_write+0x20>
   218ca:	2301      	movs	r3, #1
   218cc:	e7f0      	b.n	218b0 <flash_nrf_write+0x20>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   218ce:	462b      	mov	r3, r5
   218d0:	4622      	mov	r2, r4
   218d2:	2145      	movs	r1, #69	; 0x45
   218d4:	4814      	ldr	r0, [pc, #80]	; (21928 <flash_nrf_write+0x98>)
   218d6:	f009 fbe9 	bl	2b0ac <z_log_minimal_printk>
		return -EINVAL;
   218da:	f06f 0415 	mvn.w	r4, #21
   218de:	e7f0      	b.n	218c2 <flash_nrf_write+0x32>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   218e0:	462b      	mov	r3, r5
   218e2:	4622      	mov	r2, r4
   218e4:	2145      	movs	r1, #69	; 0x45
   218e6:	4811      	ldr	r0, [pc, #68]	; (2192c <flash_nrf_write+0x9c>)
   218e8:	f009 fbe0 	bl	2b0ac <z_log_minimal_printk>
		return -EINVAL;
   218ec:	f06f 0415 	mvn.w	r4, #21
   218f0:	e7e7      	b.n	218c2 <flash_nrf_write+0x32>
	return z_impl_k_sem_take(sem, timeout);
   218f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   218f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   218fa:	480d      	ldr	r0, [pc, #52]	; (21930 <flash_nrf_write+0xa0>)
   218fc:	f004 ff54 	bl	267a8 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   21900:	f00e fd83 	bl	3040a <nrf_flash_sync_is_required>
   21904:	b148      	cbz	r0, 2191a <flash_nrf_write+0x8a>
		ret = write_synchronously(addr, data, len);
   21906:	462a      	mov	r2, r5
   21908:	4631      	mov	r1, r6
   2190a:	4620      	mov	r0, r4
   2190c:	f7ff ff10 	bl	21730 <write_synchronously>
   21910:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   21912:	4807      	ldr	r0, [pc, #28]	; (21930 <flash_nrf_write+0xa0>)
   21914:	f004 ff0a 	bl	2672c <z_impl_k_sem_give>
	return ret;
   21918:	e7d3      	b.n	218c2 <flash_nrf_write+0x32>
		ret = write(addr, data, len);
   2191a:	462a      	mov	r2, r5
   2191c:	4631      	mov	r1, r6
   2191e:	4620      	mov	r0, r4
   21920:	f00d fe37 	bl	2f592 <write>
   21924:	4604      	mov	r4, r0
   21926:	e7f4      	b.n	21912 <flash_nrf_write+0x82>
   21928:	00034854 	.word	0x00034854
   2192c:	00034878 	.word	0x00034878
   21930:	20002898 	.word	0x20002898

00021934 <baudrate_set>:
#endif
};

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = dev->config;
   21934:	6843      	ldr	r3, [r0, #4]

	return config->uarte_regs;
   21936:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
   21938:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
   2193c:	d06f      	beq.n	21a1e <baudrate_set+0xea>
   2193e:	d83a      	bhi.n	219b6 <baudrate_set+0x82>
   21940:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
   21944:	d06e      	beq.n	21a24 <baudrate_set+0xf0>
   21946:	d90a      	bls.n	2195e <baudrate_set+0x2a>
   21948:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
   2194c:	d075      	beq.n	21a3a <baudrate_set+0x106>
   2194e:	d924      	bls.n	2199a <baudrate_set+0x66>
   21950:	f647 2312 	movw	r3, #31250	; 0x7a12
   21954:	4299      	cmp	r1, r3
   21956:	d12b      	bne.n	219b0 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   21958:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   2195c:	e013      	b.n	21986 <baudrate_set+0x52>
	switch (baudrate) {
   2195e:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
   21962:	d061      	beq.n	21a28 <baudrate_set+0xf4>
   21964:	d907      	bls.n	21976 <baudrate_set+0x42>
   21966:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
   2196a:	d063      	beq.n	21a34 <baudrate_set+0x100>
   2196c:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
   21970:	d110      	bne.n	21994 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   21972:	4b3c      	ldr	r3, [pc, #240]	; (21a64 <baudrate_set+0x130>)
   21974:	e007      	b.n	21986 <baudrate_set+0x52>
	switch (baudrate) {
   21976:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
   2197a:	d058      	beq.n	21a2e <baudrate_set+0xfa>
   2197c:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
   21980:	d105      	bne.n	2198e <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
   21982:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   21986:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
   2198a:	2000      	movs	r0, #0
   2198c:	4770      	bx	lr
	switch (baudrate) {
   2198e:	f06f 0015 	mvn.w	r0, #21
   21992:	4770      	bx	lr
   21994:	f06f 0015 	mvn.w	r0, #21
   21998:	4770      	bx	lr
   2199a:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
   2199e:	d04e      	beq.n	21a3e <baudrate_set+0x10a>
   219a0:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
   219a4:	d101      	bne.n	219aa <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   219a6:	4b30      	ldr	r3, [pc, #192]	; (21a68 <baudrate_set+0x134>)
   219a8:	e7ed      	b.n	21986 <baudrate_set+0x52>
	switch (baudrate) {
   219aa:	f06f 0015 	mvn.w	r0, #21
   219ae:	4770      	bx	lr
   219b0:	f06f 0015 	mvn.w	r0, #21
   219b4:	4770      	bx	lr
   219b6:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
   219ba:	d042      	beq.n	21a42 <baudrate_set+0x10e>
   219bc:	d909      	bls.n	219d2 <baudrate_set+0x9e>
   219be:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
   219c2:	d046      	beq.n	21a52 <baudrate_set+0x11e>
   219c4:	d91f      	bls.n	21a06 <baudrate_set+0xd2>
   219c6:	4b29      	ldr	r3, [pc, #164]	; (21a6c <baudrate_set+0x138>)
   219c8:	4299      	cmp	r1, r3
   219ca:	d148      	bne.n	21a5e <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   219cc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   219d0:	e7d9      	b.n	21986 <baudrate_set+0x52>
	switch (baudrate) {
   219d2:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
   219d6:	d037      	beq.n	21a48 <baudrate_set+0x114>
   219d8:	d905      	bls.n	219e6 <baudrate_set+0xb2>
   219da:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
   219de:	d10f      	bne.n	21a00 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   219e0:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   219e4:	e7cf      	b.n	21986 <baudrate_set+0x52>
	switch (baudrate) {
   219e6:	f64d 23c0 	movw	r3, #56000	; 0xdac0
   219ea:	4299      	cmp	r1, r3
   219ec:	d02e      	beq.n	21a4c <baudrate_set+0x118>
   219ee:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
   219f2:	d102      	bne.n	219fa <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   219f4:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   219f8:	e7c5      	b.n	21986 <baudrate_set+0x52>
	switch (baudrate) {
   219fa:	f06f 0015 	mvn.w	r0, #21
   219fe:	4770      	bx	lr
   21a00:	f06f 0015 	mvn.w	r0, #21
   21a04:	4770      	bx	lr
   21a06:	4b1a      	ldr	r3, [pc, #104]	; (21a70 <baudrate_set+0x13c>)
   21a08:	4299      	cmp	r1, r3
   21a0a:	d025      	beq.n	21a58 <baudrate_set+0x124>
   21a0c:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
   21a10:	d102      	bne.n	21a18 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   21a12:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   21a16:	e7b6      	b.n	21986 <baudrate_set+0x52>
	switch (baudrate) {
   21a18:	f06f 0015 	mvn.w	r0, #21
   21a1c:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   21a1e:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   21a22:	e7b0      	b.n	21986 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   21a24:	4b13      	ldr	r3, [pc, #76]	; (21a74 <baudrate_set+0x140>)
   21a26:	e7ae      	b.n	21986 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   21a28:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   21a2c:	e7ab      	b.n	21986 <baudrate_set+0x52>
	switch (baudrate) {
   21a2e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   21a32:	e7a8      	b.n	21986 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   21a34:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   21a38:	e7a5      	b.n	21986 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   21a3a:	4b0f      	ldr	r3, [pc, #60]	; (21a78 <baudrate_set+0x144>)
   21a3c:	e7a3      	b.n	21986 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   21a3e:	4b0f      	ldr	r3, [pc, #60]	; (21a7c <baudrate_set+0x148>)
   21a40:	e7a1      	b.n	21986 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   21a42:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   21a46:	e79e      	b.n	21986 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   21a48:	4b0d      	ldr	r3, [pc, #52]	; (21a80 <baudrate_set+0x14c>)
   21a4a:	e79c      	b.n	21986 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   21a4c:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   21a50:	e799      	b.n	21986 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   21a52:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   21a56:	e796      	b.n	21986 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   21a58:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   21a5c:	e793      	b.n	21986 <baudrate_set+0x52>
	switch (baudrate) {
   21a5e:	f06f 0015 	mvn.w	r0, #21
}
   21a62:	4770      	bx	lr
   21a64:	0013b000 	.word	0x0013b000
   21a68:	004ea000 	.word	0x004ea000
   21a6c:	000f4240 	.word	0x000f4240
   21a70:	0003d090 	.word	0x0003d090
   21a74:	00275000 	.word	0x00275000
   21a78:	0075c000 	.word	0x0075c000
   21a7c:	003af000 	.word	0x003af000
   21a80:	013a9000 	.word	0x013a9000

00021a84 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   21a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21a88:	4605      	mov	r5, r0
   21a8a:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = dev->data;
   21a8c:	f8d0 8010 	ldr.w	r8, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   21a90:	f00e ff47 	bl	30922 <k_is_in_isr>
   21a94:	b920      	cbnz	r0, 21aa0 <uarte_nrfx_poll_out+0x1c>
	return !z_sys_post_kernel;
   21a96:	4b17      	ldr	r3, [pc, #92]	; (21af4 <uarte_nrfx_poll_out+0x70>)
   21a98:	781b      	ldrb	r3, [r3, #0]
   21a9a:	b143      	cbz	r3, 21aae <uarte_nrfx_poll_out+0x2a>
   21a9c:	2300      	movs	r3, #0
   21a9e:	e000      	b.n	21aa2 <uarte_nrfx_poll_out+0x1e>
   21aa0:	2301      	movs	r3, #1

		t = now;
	}
#endif

	if (isr_mode) {
   21aa2:	b953      	cbnz	r3, 21aba <uarte_nrfx_poll_out+0x36>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
   21aa4:	4628      	mov	r0, r5
   21aa6:	f00d fed0 	bl	2f84a <wait_tx_ready>
   21aaa:	4606      	mov	r6, r0
   21aac:	e013      	b.n	21ad6 <uarte_nrfx_poll_out+0x52>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   21aae:	2301      	movs	r3, #1
   21ab0:	e7f7      	b.n	21aa2 <uarte_nrfx_poll_out+0x1e>
   21ab2:	f384 8811 	msr	BASEPRI, r4
   21ab6:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   21aba:	f04f 0340 	mov.w	r3, #64	; 0x40
   21abe:	f3ef 8411 	mrs	r4, BASEPRI
   21ac2:	f383 8812 	msr	BASEPRI_MAX, r3
   21ac6:	f3bf 8f6f 	isb	sy
   21aca:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
   21acc:	4628      	mov	r0, r5
   21ace:	f00d fe6d 	bl	2f7ac <is_tx_ready>
   21ad2:	2800      	cmp	r0, #0
   21ad4:	d0ed      	beq.n	21ab2 <uarte_nrfx_poll_out+0x2e>
	}

	*data->char_out = c;
   21ad6:	f8d8 3010 	ldr.w	r3, [r8, #16]
   21ada:	701f      	strb	r7, [r3, #0]
	tx_start(dev, data->char_out, 1);
   21adc:	2201      	movs	r2, #1
   21ade:	f8d8 1010 	ldr.w	r1, [r8, #16]
   21ae2:	4628      	mov	r0, r5
   21ae4:	f00d fe7c 	bl	2f7e0 <tx_start>
	__asm__ volatile(
   21ae8:	f386 8811 	msr	BASEPRI, r6
   21aec:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   21af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21af4:	20003770 	.word	0x20003770

00021af8 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
   21af8:	b538      	push	{r3, r4, r5, lr}
   21afa:	4604      	mov	r4, r0
   21afc:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   21afe:	f101 0018 	add.w	r0, r1, #24
   21b02:	f003 f86b 	bl	24bdc <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   21b06:	4b0e      	ldr	r3, [pc, #56]	; (21b40 <endtx_stoptx_ppi_init+0x48>)
   21b08:	4298      	cmp	r0, r3
   21b0a:	d111      	bne.n	21b30 <endtx_stoptx_ppi_init+0x38>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   21b0c:	7e2b      	ldrb	r3, [r5, #24]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   21b0e:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
   21b12:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   21b14:	4a0b      	ldr	r2, [pc, #44]	; (21b44 <endtx_stoptx_ppi_init+0x4c>)
   21b16:	33a2      	adds	r3, #162	; 0xa2
   21b18:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
   21b1c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   21b20:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   21b22:	7e29      	ldrb	r1, [r5, #24]
   21b24:	2301      	movs	r3, #1
   21b26:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
   21b28:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
   21b2c:	2000      	movs	r0, #0
}
   21b2e:	bd38      	pop	{r3, r4, r5, pc}
		LOG_ERR("Failed to allocate PPI Channel");
   21b30:	2145      	movs	r1, #69	; 0x45
   21b32:	4805      	ldr	r0, [pc, #20]	; (21b48 <endtx_stoptx_ppi_init+0x50>)
   21b34:	f009 faba 	bl	2b0ac <z_log_minimal_printk>
		return -EIO;
   21b38:	f06f 0004 	mvn.w	r0, #4
   21b3c:	e7f7      	b.n	21b2e <endtx_stoptx_ppi_init+0x36>
   21b3e:	bf00      	nop
   21b40:	0bad0000 	.word	0x0bad0000
   21b44:	4001f000 	.word	0x4001f000
   21b48:	000348e0 	.word	0x000348e0

00021b4c <random_byte_get>:
	__asm__ volatile(
   21b4c:	f04f 0340 	mov.w	r3, #64	; 0x40
   21b50:	f3ef 8211 	mrs	r2, BASEPRI
   21b54:	f383 8812 	msr	BASEPRI_MAX, r3
   21b58:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   21b5c:	4b0a      	ldr	r3, [pc, #40]	; (21b88 <random_byte_get+0x3c>)
   21b5e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   21b62:	b16b      	cbz	r3, 21b80 <random_byte_get+0x34>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   21b64:	4b08      	ldr	r3, [pc, #32]	; (21b88 <random_byte_get+0x3c>)
   21b66:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
		retval = nrf_rng_random_value_get(NRF_RNG);
   21b6a:	b2c0      	uxtb	r0, r0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   21b6c:	2100      	movs	r1, #0
   21b6e:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   21b72:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
	__asm__ volatile(
   21b76:	f382 8811 	msr	BASEPRI, r2
   21b7a:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   21b7e:	4770      	bx	lr
	int retval = -EAGAIN;
   21b80:	f06f 000a 	mvn.w	r0, #10
   21b84:	e7f7      	b.n	21b76 <random_byte_get+0x2a>
   21b86:	bf00      	nop
   21b88:	4000d000 	.word	0x4000d000

00021b8c <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   21b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   21b8e:	4686      	mov	lr, r0
	uint32_t last  = rngp->last;
   21b90:	7885      	ldrb	r5, [r0, #2]
	uint32_t mask  = rngp->mask;
   21b92:	78c4      	ldrb	r4, [r0, #3]
	__asm__ volatile(
   21b94:	f04f 0340 	mov.w	r3, #64	; 0x40
   21b98:	f3ef 8c11 	mrs	ip, BASEPRI
   21b9c:	f383 8812 	msr	BASEPRI_MAX, r3
   21ba0:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   21ba4:	7806      	ldrb	r6, [r0, #0]
   21ba6:	4633      	mov	r3, r6
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   21ba8:	7847      	ldrb	r7, [r0, #1]

	available = (last - first) & mask;
   21baa:	1bad      	subs	r5, r5, r6
   21bac:	4025      	ands	r5, r4
	if (available < len) {
   21bae:	42aa      	cmp	r2, r5
   21bb0:	d900      	bls.n	21bb4 <rng_pool_get+0x28>
		len = available;
   21bb2:	b2aa      	uxth	r2, r5

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   21bb4:	18b0      	adds	r0, r6, r2
   21bb6:	4020      	ands	r0, r4
   21bb8:	f88e 0000 	strb.w	r0, [lr]
	__asm__ volatile(
   21bbc:	f38c 8811 	msr	BASEPRI, ip
   21bc0:	f3bf 8f6f 	isb	sy
	uint8_t *dst   = buf;
   21bc4:	4608      	mov	r0, r1
}
   21bc6:	e007      	b.n	21bd8 <rng_pool_get+0x4c>
	irq_unlock(key);

	while (likely(len--)) {
		*dst++ = rngp->buffer[first];
   21bc8:	eb0e 0203 	add.w	r2, lr, r3
   21bcc:	7952      	ldrb	r2, [r2, #5]
   21bce:	f800 2b01 	strb.w	r2, [r0], #1
		first = (first + 1) & mask;
   21bd2:	3301      	adds	r3, #1
   21bd4:	4023      	ands	r3, r4
	while (likely(len--)) {
   21bd6:	4662      	mov	r2, ip
   21bd8:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
   21bdc:	fa1f fc8c 	uxth.w	ip, ip
   21be0:	2a00      	cmp	r2, #0
   21be2:	d1f1      	bne.n	21bc8 <rng_pool_get+0x3c>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   21be4:	42be      	cmp	r6, r7
   21be6:	d10f      	bne.n	21c08 <rng_pool_get+0x7c>
	__asm__ volatile(
   21be8:	f04f 0240 	mov.w	r2, #64	; 0x40
   21bec:	f3ef 8311 	mrs	r3, BASEPRI
   21bf0:	f382 8812 	msr	BASEPRI_MAX, r2
   21bf4:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   21bf8:	f89e 2000 	ldrb.w	r2, [lr]
   21bfc:	f88e 2001 	strb.w	r2, [lr, #1]
	__asm__ volatile(
   21c00:	f383 8811 	msr	BASEPRI, r3
   21c04:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   21c08:	1a40      	subs	r0, r0, r1
   21c0a:	b280      	uxth	r0, r0
	available = available - len;
   21c0c:	1a2d      	subs	r5, r5, r0
	if (available <= rngp->threshold) {
   21c0e:	f89e 3004 	ldrb.w	r3, [lr, #4]
   21c12:	42ab      	cmp	r3, r5
   21c14:	d302      	bcc.n	21c1c <rng_pool_get+0x90>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   21c16:	4b02      	ldr	r3, [pc, #8]	; (21c20 <rng_pool_get+0x94>)
   21c18:	2201      	movs	r2, #1
   21c1a:	601a      	str	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   21c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21c1e:	bf00      	nop
   21c20:	4000d000 	.word	0x4000d000

00021c24 <entropy_nrf5_get_entropy_isr>:
}

static int entropy_nrf5_get_entropy_isr(const struct device *dev,
					uint8_t *buf, uint16_t len,
					uint32_t flags)
{
   21c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21c26:	460e      	mov	r6, r1
   21c28:	4614      	mov	r4, r2
   21c2a:	461d      	mov	r5, r3
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   21c2c:	6902      	ldr	r2, [r0, #16]
   21c2e:	4b2d      	ldr	r3, [pc, #180]	; (21ce4 <entropy_nrf5_get_entropy_isr+0xc0>)
   21c30:	429a      	cmp	r2, r3
   21c32:	d00b      	beq.n	21c4c <entropy_nrf5_get_entropy_isr+0x28>
   21c34:	4f2c      	ldr	r7, [pc, #176]	; (21ce8 <entropy_nrf5_get_entropy_isr+0xc4>)
   21c36:	f240 1205 	movw	r2, #261	; 0x105
   21c3a:	4639      	mov	r1, r7
   21c3c:	482b      	ldr	r0, [pc, #172]	; (21cec <entropy_nrf5_get_entropy_isr+0xc8>)
   21c3e:	f009 fa26 	bl	2b08e <assert_print>
   21c42:	f240 1105 	movw	r1, #261	; 0x105
   21c46:	4638      	mov	r0, r7
   21c48:	f009 fa1a 	bl	2b080 <assert_post_action>

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   21c4c:	f015 0f01 	tst.w	r5, #1
   21c50:	d105      	bne.n	21c5e <entropy_nrf5_get_entropy_isr+0x3a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   21c52:	4622      	mov	r2, r4
   21c54:	4631      	mov	r1, r6
   21c56:	4826      	ldr	r0, [pc, #152]	; (21cf0 <entropy_nrf5_get_entropy_isr+0xcc>)
   21c58:	f7ff ff98 	bl	21b8c <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   21c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len) {
   21c5e:	b90c      	cbnz	r4, 21c64 <entropy_nrf5_get_entropy_isr+0x40>
	return cnt;
   21c60:	4620      	mov	r0, r4
   21c62:	e7fb      	b.n	21c5c <entropy_nrf5_get_entropy_isr+0x38>
	__asm__ volatile(
   21c64:	f04f 0340 	mov.w	r3, #64	; 0x40
   21c68:	f3ef 8511 	mrs	r5, BASEPRI
   21c6c:	f383 8812 	msr	BASEPRI_MAX, r3
   21c70:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   21c74:	200d      	movs	r0, #13
   21c76:	f7f3 feb1 	bl	159dc <arch_irq_is_enabled>
   21c7a:	4607      	mov	r7, r0
		irq_disable(IRQN);
   21c7c:	200d      	movs	r0, #13
   21c7e:	f7f3 fe99 	bl	159b4 <arch_irq_disable>
	__asm__ volatile(
   21c82:	f385 8811 	msr	BASEPRI, r5
   21c86:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   21c8a:	4b1a      	ldr	r3, [pc, #104]	; (21cf4 <entropy_nrf5_get_entropy_isr+0xd0>)
   21c8c:	2200      	movs	r2, #0
   21c8e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   21c92:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   21c96:	2201      	movs	r2, #1
   21c98:	601a      	str	r2, [r3, #0]
   21c9a:	4b17      	ldr	r3, [pc, #92]	; (21cf8 <entropy_nrf5_get_entropy_isr+0xd4>)
   21c9c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   21ca0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   21ca4:	4625      	mov	r5, r4
   21ca6:	e004      	b.n	21cb2 <entropy_nrf5_get_entropy_isr+0x8e>
   21ca8:	f3bf 8f4f 	dsb	sy
				__WFE();
   21cac:	bf20      	wfe
				__SEV();
   21cae:	bf40      	sev
				__WFE();
   21cb0:	bf20      	wfe
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   21cb2:	4b10      	ldr	r3, [pc, #64]	; (21cf4 <entropy_nrf5_get_entropy_isr+0xd0>)
   21cb4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   21cb8:	2b00      	cmp	r3, #0
   21cba:	d0f5      	beq.n	21ca8 <entropy_nrf5_get_entropy_isr+0x84>
			byte = random_byte_get();
   21cbc:	f7ff ff46 	bl	21b4c <random_byte_get>
   21cc0:	4b0d      	ldr	r3, [pc, #52]	; (21cf8 <entropy_nrf5_get_entropy_isr+0xd4>)
   21cc2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   21cc6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
			if (byte < 0) {
   21cca:	2800      	cmp	r0, #0
   21ccc:	db02      	blt.n	21cd4 <entropy_nrf5_get_entropy_isr+0xb0>
			buf[--len] = byte;
   21cce:	3d01      	subs	r5, #1
   21cd0:	b2ad      	uxth	r5, r5
   21cd2:	5570      	strb	r0, [r6, r5]
		} while (len);
   21cd4:	2d00      	cmp	r5, #0
   21cd6:	d1ec      	bne.n	21cb2 <entropy_nrf5_get_entropy_isr+0x8e>
		if (irq_enabled) {
   21cd8:	2f00      	cmp	r7, #0
   21cda:	d0c1      	beq.n	21c60 <entropy_nrf5_get_entropy_isr+0x3c>
			irq_enable(IRQN);
   21cdc:	200d      	movs	r0, #13
   21cde:	f7f3 fe5b 	bl	15998 <arch_irq_enable>
   21ce2:	e7bd      	b.n	21c60 <entropy_nrf5_get_entropy_isr+0x3c>
   21ce4:	200028b0 	.word	0x200028b0
   21ce8:	0003496c 	.word	0x0003496c
   21cec:	000318f8 	.word	0x000318f8
   21cf0:	200028e0 	.word	0x200028e0
   21cf4:	4000d000 	.word	0x4000d000
   21cf8:	e000e100 	.word	0xe000e100

00021cfc <isr>:
{
   21cfc:	b510      	push	{r4, lr}
	byte = random_byte_get();
   21cfe:	f7ff ff25 	bl	21b4c <random_byte_get>
	if (byte < 0) {
   21d02:	2800      	cmp	r0, #0
   21d04:	db06      	blt.n	21d14 <isr+0x18>
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   21d06:	b2c4      	uxtb	r4, r0
   21d08:	4621      	mov	r1, r4
   21d0a:	480a      	ldr	r0, [pc, #40]	; (21d34 <isr+0x38>)
   21d0c:	f00d fe34 	bl	2f978 <rng_pool_put>
	if (ret < 0) {
   21d10:	2800      	cmp	r0, #0
   21d12:	db00      	blt.n	21d16 <isr+0x1a>
}
   21d14:	bd10      	pop	{r4, pc}
		ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.thr),
   21d16:	4621      	mov	r1, r4
   21d18:	4807      	ldr	r0, [pc, #28]	; (21d38 <isr+0x3c>)
   21d1a:	f00d fe2d 	bl	2f978 <rng_pool_put>
		if (ret < 0) {
   21d1e:	2800      	cmp	r0, #0
   21d20:	db03      	blt.n	21d2a <isr+0x2e>
   21d22:	4806      	ldr	r0, [pc, #24]	; (21d3c <isr+0x40>)
   21d24:	f004 fd02 	bl	2672c <z_impl_k_sem_give>
}
   21d28:	e7f4      	b.n	21d14 <isr+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   21d2a:	4b05      	ldr	r3, [pc, #20]	; (21d40 <isr+0x44>)
   21d2c:	2201      	movs	r2, #1
   21d2e:	605a      	str	r2, [r3, #4]
}
   21d30:	e7f7      	b.n	21d22 <isr+0x26>
   21d32:	bf00      	nop
   21d34:	200028e0 	.word	0x200028e0
   21d38:	200028f5 	.word	0x200028f5
   21d3c:	200028c8 	.word	0x200028c8
   21d40:	4000d000 	.word	0x4000d000

00021d44 <entropy_nrf5_get_entropy>:
{
   21d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21d46:	460f      	mov	r7, r1
   21d48:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   21d4a:	6902      	ldr	r2, [r0, #16]
   21d4c:	4b18      	ldr	r3, [pc, #96]	; (21db0 <entropy_nrf5_get_entropy+0x6c>)
   21d4e:	429a      	cmp	r2, r3
   21d50:	d012      	beq.n	21d78 <entropy_nrf5_get_entropy+0x34>
   21d52:	4d18      	ldr	r5, [pc, #96]	; (21db4 <entropy_nrf5_get_entropy+0x70>)
   21d54:	22e7      	movs	r2, #231	; 0xe7
   21d56:	4629      	mov	r1, r5
   21d58:	4817      	ldr	r0, [pc, #92]	; (21db8 <entropy_nrf5_get_entropy+0x74>)
   21d5a:	f009 f998 	bl	2b08e <assert_print>
   21d5e:	21e7      	movs	r1, #231	; 0xe7
   21d60:	4628      	mov	r0, r5
   21d62:	f009 f98d 	bl	2b080 <assert_post_action>
   21d66:	e007      	b.n	21d78 <entropy_nrf5_get_entropy+0x34>
	return z_impl_k_sem_take(sem, timeout);
   21d68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   21d6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21d70:	f106 0018 	add.w	r0, r6, #24
   21d74:	f004 fd18 	bl	267a8 <z_impl_k_sem_take>
	while (len) {
   21d78:	b1bc      	cbz	r4, 21daa <entropy_nrf5_get_entropy+0x66>
   21d7a:	4e0d      	ldr	r6, [pc, #52]	; (21db0 <entropy_nrf5_get_entropy+0x6c>)
   21d7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   21d80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21d84:	4630      	mov	r0, r6
   21d86:	f004 fd0f 	bl	267a8 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   21d8a:	4622      	mov	r2, r4
   21d8c:	4639      	mov	r1, r7
   21d8e:	f106 0045 	add.w	r0, r6, #69	; 0x45
   21d92:	f7ff fefb 	bl	21b8c <rng_pool_get>
   21d96:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   21d98:	4630      	mov	r0, r6
   21d9a:	f004 fcc7 	bl	2672c <z_impl_k_sem_give>
		if (bytes == 0U) {
   21d9e:	2d00      	cmp	r5, #0
   21da0:	d0e2      	beq.n	21d68 <entropy_nrf5_get_entropy+0x24>
		len -= bytes;
   21da2:	1b64      	subs	r4, r4, r5
   21da4:	b2a4      	uxth	r4, r4
		buf += bytes;
   21da6:	442f      	add	r7, r5
   21da8:	e7e6      	b.n	21d78 <entropy_nrf5_get_entropy+0x34>
}
   21daa:	2000      	movs	r0, #0
   21dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21dae:	bf00      	nop
   21db0:	200028b0 	.word	0x200028b0
   21db4:	0003496c 	.word	0x0003496c
   21db8:	000318f8 	.word	0x000318f8

00021dbc <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   21dbc:	b510      	push	{r4, lr}
	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   21dbe:	6902      	ldr	r2, [r0, #16]
   21dc0:	4b1f      	ldr	r3, [pc, #124]	; (21e40 <entropy_nrf5_init+0x84>)
   21dc2:	429a      	cmp	r2, r3
   21dc4:	d00b      	beq.n	21dde <entropy_nrf5_init+0x22>
   21dc6:	4c1f      	ldr	r4, [pc, #124]	; (21e44 <entropy_nrf5_init+0x88>)
   21dc8:	f44f 72aa 	mov.w	r2, #340	; 0x154
   21dcc:	4621      	mov	r1, r4
   21dce:	481e      	ldr	r0, [pc, #120]	; (21e48 <entropy_nrf5_init+0x8c>)
   21dd0:	f009 f95d 	bl	2b08e <assert_print>
   21dd4:	f44f 71aa 	mov.w	r1, #340	; 0x154
   21dd8:	4620      	mov	r0, r4
   21dda:	f009 f951 	bl	2b080 <assert_post_action>
	return z_impl_k_sem_init(sem, initial_count, limit);
   21dde:	4c18      	ldr	r4, [pc, #96]	; (21e40 <entropy_nrf5_init+0x84>)
   21de0:	2201      	movs	r2, #1
   21de2:	4611      	mov	r1, r2
   21de4:	4620      	mov	r0, r4
   21de6:	f00e fe13 	bl	30a10 <z_impl_k_sem_init>
   21dea:	2201      	movs	r2, #1
   21dec:	2100      	movs	r1, #0
   21dee:	f104 0018 	add.w	r0, r4, #24
   21df2:	f00e fe0d 	bl	30a10 <z_impl_k_sem_init>
	k_sem_init(&entropy_nrf5_data.sem_lock, 1, 1);

	/* Synching semaphore */
	k_sem_init(&entropy_nrf5_data.sem_sync, 0, 1);

	rng_pool_init((struct rng_pool *)(entropy_nrf5_data.thr),
   21df6:	2204      	movs	r2, #4
   21df8:	2108      	movs	r1, #8
   21dfa:	f104 0045 	add.w	r0, r4, #69	; 0x45
   21dfe:	f00d fdcf 	bl	2f9a0 <rng_pool_init>
		      CONFIG_ENTROPY_NRF5_THR_POOL_SIZE,
		      CONFIG_ENTROPY_NRF5_THR_THRESHOLD);
	rng_pool_init((struct rng_pool *)(entropy_nrf5_data.isr),
   21e02:	220c      	movs	r2, #12
   21e04:	2110      	movs	r1, #16
   21e06:	f104 0030 	add.w	r0, r4, #48	; 0x30
   21e0a:	f00d fdc9 	bl	2f9a0 <rng_pool_init>
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   21e0e:	4b0f      	ldr	r3, [pc, #60]	; (21e4c <entropy_nrf5_init+0x90>)
   21e10:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   21e14:	f022 0201 	bic.w	r2, r2, #1
   21e18:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   21e1c:	2400      	movs	r4, #0
   21e1e:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
   21e22:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   21e26:	2101      	movs	r1, #1
   21e28:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   21e2c:	6019      	str	r1, [r3, #0]

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   21e2e:	4622      	mov	r2, r4
   21e30:	200d      	movs	r0, #13
   21e32:	f7f3 fde1 	bl	159f8 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   21e36:	200d      	movs	r0, #13
   21e38:	f7f3 fdae 	bl	15998 <arch_irq_enable>

	return 0;
}
   21e3c:	4620      	mov	r0, r4
   21e3e:	bd10      	pop	{r4, pc}
   21e40:	200028b0 	.word	0x200028b0
   21e44:	0003496c 	.word	0x0003496c
   21e48:	000318f8 	.word	0x000318f8
   21e4c:	4000d000 	.word	0x4000d000

00021e50 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   21e50:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
   21e54:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   21e58:	4b01      	ldr	r3, [pc, #4]	; (21e60 <set_comparator+0x10>)
   21e5a:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
   21e5e:	4770      	bx	lr
   21e60:	40011000 	.word	0x40011000

00021e64 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
   21e64:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   21e68:	4b01      	ldr	r3, [pc, #4]	; (21e70 <get_comparator+0xc>)
   21e6a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
   21e6e:	4770      	bx	lr
   21e70:	40011000 	.word	0x40011000

00021e74 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   21e74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   21e78:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   21e7a:	4a02      	ldr	r2, [pc, #8]	; (21e84 <event_enable+0x10>)
   21e7c:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
   21e80:	4770      	bx	lr
   21e82:	bf00      	nop
   21e84:	40011000 	.word	0x40011000

00021e88 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   21e88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   21e8c:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   21e8e:	4a02      	ldr	r2, [pc, #8]	; (21e98 <event_disable+0x10>)
   21e90:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
   21e94:	4770      	bx	lr
   21e96:	bf00      	nop
   21e98:	40011000 	.word	0x40011000

00021e9c <counter>:
     return p_reg->COUNTER;
   21e9c:	4b01      	ldr	r3, [pc, #4]	; (21ea4 <counter+0x8>)
   21e9e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
   21ea2:	4770      	bx	lr
   21ea4:	40011000 	.word	0x40011000

00021ea8 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
   21ea8:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   21eaa:	2301      	movs	r3, #1
   21eac:	4083      	lsls	r3, r0
   21eae:	ea6f 0c03 	mvn.w	ip, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   21eb2:	4a10      	ldr	r2, [pc, #64]	; (21ef4 <compare_int_lock+0x4c>)
   21eb4:	f3bf 8f5b 	dmb	ish
   21eb8:	e852 1f00 	ldrex	r1, [r2]
   21ebc:	ea01 0e0c 	and.w	lr, r1, ip
   21ec0:	e842 e400 	strex	r4, lr, [r2]
   21ec4:	2c00      	cmp	r4, #0
   21ec6:	d1f7      	bne.n	21eb8 <compare_int_lock+0x10>
   21ec8:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   21ecc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   21ed0:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
   21ed4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   21ed8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   21edc:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   21ee0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   21ee4:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   21ee8:	420b      	tst	r3, r1
}
   21eea:	bf14      	ite	ne
   21eec:	2001      	movne	r0, #1
   21eee:	2000      	moveq	r0, #0
   21ef0:	bd10      	pop	{r4, pc}
   21ef2:	bf00      	nop
   21ef4:	20002908 	.word	0x20002908

00021ef8 <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
   21ef8:	b570      	push	{r4, r5, r6, lr}
   21efa:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
   21efc:	f00d fd7c 	bl	2f9f8 <full_int_lock>
   21f00:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   21f02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   21f06:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
   21f08:	4a17      	ldr	r2, [pc, #92]	; (21f68 <channel_processing_check_and_clear+0x70>)
   21f0a:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   21f0e:	4213      	tst	r3, r2
   21f10:	d105      	bne.n	21f1e <channel_processing_check_and_clear+0x26>
	bool result = false;
   21f12:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
   21f14:	4628      	mov	r0, r5
   21f16:	f00d fd73 	bl	2fa00 <full_int_unlock>

	return result;
}
   21f1a:	4630      	mov	r0, r6
   21f1c:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   21f1e:	2301      	movs	r3, #1
   21f20:	40a3      	lsls	r3, r4
   21f22:	43db      	mvns	r3, r3
   21f24:	4a11      	ldr	r2, [pc, #68]	; (21f6c <channel_processing_check_and_clear+0x74>)
   21f26:	f3bf 8f5b 	dmb	ish
   21f2a:	e852 1f00 	ldrex	r1, [r2]
   21f2e:	ea01 0003 	and.w	r0, r1, r3
   21f32:	e842 0600 	strex	r6, r0, [r2]
   21f36:	2e00      	cmp	r6, #0
   21f38:	d1f7      	bne.n	21f2a <channel_processing_check_and_clear+0x32>
   21f3a:	f3bf 8f5b 	dmb	ish
   21f3e:	b959      	cbnz	r1, 21f58 <channel_processing_check_and_clear+0x60>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   21f40:	f104 0350 	add.w	r3, r4, #80	; 0x50
   21f44:	009b      	lsls	r3, r3, #2
   21f46:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   21f48:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   21f4c:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   21f50:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   21f52:	b113      	cbz	r3, 21f5a <channel_processing_check_and_clear+0x62>
   21f54:	2301      	movs	r3, #1
   21f56:	e000      	b.n	21f5a <channel_processing_check_and_clear+0x62>
   21f58:	2301      	movs	r3, #1
		if (result) {
   21f5a:	461e      	mov	r6, r3
   21f5c:	2b00      	cmp	r3, #0
   21f5e:	d0d9      	beq.n	21f14 <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
   21f60:	4620      	mov	r0, r4
   21f62:	f00d fd3a 	bl	2f9da <event_clear>
   21f66:	e7d5      	b.n	21f14 <channel_processing_check_and_clear+0x1c>
   21f68:	40011000 	.word	0x40011000
   21f6c:	20002904 	.word	0x20002904

00021f70 <compare_int_unlock>:
	if (key) {
   21f70:	b901      	cbnz	r1, 21f74 <compare_int_unlock+0x4>
}
   21f72:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
   21f74:	2301      	movs	r3, #1
   21f76:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   21f78:	4a11      	ldr	r2, [pc, #68]	; (21fc0 <compare_int_unlock+0x50>)
   21f7a:	f3bf 8f5b 	dmb	ish
   21f7e:	e852 1f00 	ldrex	r1, [r2]
   21f82:	4319      	orrs	r1, r3
   21f84:	e842 1c00 	strex	ip, r1, [r2]
   21f88:	f1bc 0f00 	cmp.w	ip, #0
   21f8c:	d1f7      	bne.n	21f7e <compare_int_unlock+0xe>
   21f8e:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   21f92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   21f96:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
   21f98:	4a0a      	ldr	r2, [pc, #40]	; (21fc4 <compare_int_unlock+0x54>)
   21f9a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   21f9e:	f3bf 8f5b 	dmb	ish
   21fa2:	4b09      	ldr	r3, [pc, #36]	; (21fc8 <compare_int_unlock+0x58>)
   21fa4:	681b      	ldr	r3, [r3, #0]
   21fa6:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   21faa:	fa23 f000 	lsr.w	r0, r3, r0
   21fae:	f010 0f01 	tst.w	r0, #1
   21fb2:	d0de      	beq.n	21f72 <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   21fb4:	4b05      	ldr	r3, [pc, #20]	; (21fcc <compare_int_unlock+0x5c>)
   21fb6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   21fba:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   21fbe:	e7d8      	b.n	21f72 <compare_int_unlock+0x2>
   21fc0:	20002908 	.word	0x20002908
   21fc4:	40011000 	.word	0x40011000
   21fc8:	20002904 	.word	0x20002904
   21fcc:	e000e100 	.word	0xe000e100

00021fd0 <sys_clock_timeout_handler>:
{
   21fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21fd4:	4607      	mov	r7, r0
   21fd6:	4614      	mov	r4, r2
   21fd8:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
   21fda:	4610      	mov	r0, r2
   21fdc:	4619      	mov	r1, r3
   21fde:	f00d fd08 	bl	2f9f2 <absolute_time_to_cc>
   21fe2:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   21fe4:	4b15      	ldr	r3, [pc, #84]	; (2203c <sys_clock_timeout_handler+0x6c>)
   21fe6:	681a      	ldr	r2, [r3, #0]
   21fe8:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
   21fea:	601c      	str	r4, [r3, #0]
   21fec:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   21fee:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   21ff2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   21ff6:	d309      	bcc.n	2200c <sys_clock_timeout_handler+0x3c>
	return false;
   21ff8:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   21ffa:	f006 fe1f 	bl	28c3c <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
   21ffe:	4638      	mov	r0, r7
   22000:	f7ff ff30 	bl	21e64 <get_comparator>
   22004:	42a8      	cmp	r0, r5
   22006:	d00e      	beq.n	22026 <sys_clock_timeout_handler+0x56>
}
   22008:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   2200c:	4b0c      	ldr	r3, [pc, #48]	; (22040 <sys_clock_timeout_handler+0x70>)
   2200e:	681b      	ldr	r3, [r3, #0]
   22010:	0a1a      	lsrs	r2, r3, #8
   22012:	061b      	lsls	r3, r3, #24
   22014:	eb15 0803 	adds.w	r8, r5, r3
   22018:	f142 0900 	adc.w	r9, r2, #0
   2201c:	4b09      	ldr	r3, [pc, #36]	; (22044 <sys_clock_timeout_handler+0x74>)
   2201e:	e9c3 8900 	strd	r8, r9, [r3]
		return true;
   22022:	2401      	movs	r4, #1
   22024:	e7e9      	b.n	21ffa <sys_clock_timeout_handler+0x2a>
		if (!anchor_updated) {
   22026:	b11c      	cbz	r4, 22030 <sys_clock_timeout_handler+0x60>
		event_enable(chan);
   22028:	4638      	mov	r0, r7
   2202a:	f7ff ff23 	bl	21e74 <event_enable>
}
   2202e:	e7eb      	b.n	22008 <sys_clock_timeout_handler+0x38>
			set_comparator(chan, COUNTER_HALF_SPAN);
   22030:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   22034:	4638      	mov	r0, r7
   22036:	f7ff ff0b 	bl	21e50 <set_comparator>
   2203a:	e7f5      	b.n	22028 <sys_clock_timeout_handler+0x58>
   2203c:	20001d88 	.word	0x20001d88
   22040:	2000290c 	.word	0x2000290c
   22044:	20001d70 	.word	0x20001d70

00022048 <z_nrf_rtc_timer_read>:
{
   22048:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   2204a:	4b0d      	ldr	r3, [pc, #52]	; (22080 <z_nrf_rtc_timer_read+0x38>)
   2204c:	681c      	ldr	r4, [r3, #0]
   2204e:	0a25      	lsrs	r5, r4, #8
   22050:	0624      	lsls	r4, r4, #24
  __ASM volatile ("dmb 0xF":::"memory");
   22052:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
   22056:	f7ff ff21 	bl	21e9c <counter>
   2205a:	4603      	mov	r3, r0
	val += cntr;
   2205c:	1900      	adds	r0, r0, r4
   2205e:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   22062:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   22066:	d20a      	bcs.n	2207e <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
   22068:	4b06      	ldr	r3, [pc, #24]	; (22084 <z_nrf_rtc_timer_read+0x3c>)
   2206a:	e9d3 2300 	ldrd	r2, r3, [r3]
   2206e:	4290      	cmp	r0, r2
   22070:	eb71 0303 	sbcs.w	r3, r1, r3
   22074:	d203      	bcs.n	2207e <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
   22076:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   2207a:	f141 0100 	adc.w	r1, r1, #0
}
   2207e:	bd38      	pop	{r3, r4, r5, pc}
   22080:	2000290c 	.word	0x2000290c
   22084:	20001d70 	.word	0x20001d70

00022088 <compare_set_nolocks>:
{
   22088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2208a:	4606      	mov	r6, r0
   2208c:	4614      	mov	r4, r2
   2208e:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
   22090:	4610      	mov	r0, r2
   22092:	4619      	mov	r1, r3
   22094:	f00d fcad 	bl	2f9f2 <absolute_time_to_cc>
   22098:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
   2209a:	f7ff ffd5 	bl	22048 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   2209e:	42a0      	cmp	r0, r4
   220a0:	eb71 0305 	sbcs.w	r3, r1, r5
   220a4:	d21d      	bcs.n	220e2 <compare_set_nolocks+0x5a>
		if (target_time - curr_time > COUNTER_SPAN) {
   220a6:	1a23      	subs	r3, r4, r0
   220a8:	eb65 0101 	sbc.w	r1, r5, r1
   220ac:	4a1b      	ldr	r2, [pc, #108]	; (2211c <compare_set_nolocks+0x94>)
   220ae:	4293      	cmp	r3, r2
   220b0:	f171 0300 	sbcs.w	r3, r1, #0
   220b4:	d22f      	bcs.n	22116 <compare_set_nolocks+0x8e>
		if (target_time != cc_data[chan].target_time) {
   220b6:	4b1a      	ldr	r3, [pc, #104]	; (22120 <compare_set_nolocks+0x98>)
   220b8:	eb03 1306 	add.w	r3, r3, r6, lsl #4
   220bc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   220c0:	42ab      	cmp	r3, r5
   220c2:	bf08      	it	eq
   220c4:	42a2      	cmpeq	r2, r4
   220c6:	d01a      	beq.n	220fe <compare_set_nolocks+0x76>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
   220c8:	4639      	mov	r1, r7
   220ca:	4630      	mov	r0, r6
   220cc:	f00d fc9b 	bl	2fa06 <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
   220d0:	4639      	mov	r1, r7
   220d2:	f00d fc7e 	bl	2f9d2 <counter_sub>
   220d6:	1900      	adds	r0, r0, r4
   220d8:	f145 0300 	adc.w	r3, r5, #0
   220dc:	4604      	mov	r4, r0
   220de:	461d      	mov	r5, r3
   220e0:	e00d      	b.n	220fe <compare_set_nolocks+0x76>
		atomic_or(&force_isr_mask, BIT(chan));
   220e2:	2301      	movs	r3, #1
   220e4:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   220e6:	4a0f      	ldr	r2, [pc, #60]	; (22124 <compare_set_nolocks+0x9c>)
   220e8:	f3bf 8f5b 	dmb	ish
   220ec:	e852 1f00 	ldrex	r1, [r2]
   220f0:	4319      	orrs	r1, r3
   220f2:	e842 1000 	strex	r0, r1, [r2]
   220f6:	2800      	cmp	r0, #0
   220f8:	d1f8      	bne.n	220ec <compare_set_nolocks+0x64>
   220fa:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
   220fe:	4b08      	ldr	r3, [pc, #32]	; (22120 <compare_set_nolocks+0x98>)
   22100:	0132      	lsls	r2, r6, #4
   22102:	eb03 1606 	add.w	r6, r3, r6, lsl #4
   22106:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
   2210a:	9906      	ldr	r1, [sp, #24]
   2210c:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
   2210e:	9b07      	ldr	r3, [sp, #28]
   22110:	6073      	str	r3, [r6, #4]
	return ret;
   22112:	2000      	movs	r0, #0
}
   22114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -EINVAL;
   22116:	f06f 0015 	mvn.w	r0, #21
   2211a:	e7fb      	b.n	22114 <compare_set_nolocks+0x8c>
   2211c:	01000001 	.word	0x01000001
   22120:	20001d78 	.word	0x20001d78
   22124:	20002904 	.word	0x20002904

00022128 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   22128:	b530      	push	{r4, r5, lr}
   2212a:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
   2212c:	2300      	movs	r3, #0
   2212e:	4a1d      	ldr	r2, [pc, #116]	; (221a4 <sys_clock_driver_init+0x7c>)
   22130:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   22134:	2b00      	cmp	r3, #0
   22136:	dd24      	ble.n	22182 <sys_clock_driver_init+0x5a>
    p_reg->INTENSET = mask;
   22138:	4c1a      	ldr	r4, [pc, #104]	; (221a4 <sys_clock_driver_init+0x7c>)
   2213a:	2502      	movs	r5, #2
   2213c:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   22140:	4b19      	ldr	r3, [pc, #100]	; (221a8 <sys_clock_driver_init+0x80>)
   22142:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   22146:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   2214a:	2200      	movs	r2, #0
   2214c:	2101      	movs	r1, #1
   2214e:	2011      	movs	r0, #17
   22150:	f7f3 fc52 	bl	159f8 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   22154:	2011      	movs	r0, #17
   22156:	f7f3 fc1f 	bl	15998 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   2215a:	2301      	movs	r3, #1
   2215c:	60a3      	str	r3, [r4, #8]
   2215e:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   22160:	4a12      	ldr	r2, [pc, #72]	; (221ac <sys_clock_driver_init+0x84>)
   22162:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   22164:	2400      	movs	r4, #0
   22166:	9401      	str	r4, [sp, #4]
   22168:	4b11      	ldr	r3, [pc, #68]	; (221b0 <sys_clock_driver_init+0x88>)
   2216a:	9300      	str	r3, [sp, #0]
   2216c:	4a11      	ldr	r2, [pc, #68]	; (221b4 <sys_clock_driver_init+0x8c>)
   2216e:	2300      	movs	r3, #0
   22170:	4620      	mov	r0, r4
   22172:	f00d fc83 	bl	2fa7c <compare_set>

	z_nrf_clock_control_lf_on(mode);
   22176:	4628      	mov	r0, r5
   22178:	f7fe ff2a 	bl	20fd0 <z_nrf_clock_control_lf_on>

	return 0;
}
   2217c:	4620      	mov	r0, r4
   2217e:	b003      	add	sp, #12
   22180:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   22182:	4a0d      	ldr	r2, [pc, #52]	; (221b8 <sys_clock_driver_init+0x90>)
   22184:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   22188:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2218c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   22190:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   22194:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   22198:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
   2219a:	4902      	ldr	r1, [pc, #8]	; (221a4 <sys_clock_driver_init+0x7c>)
   2219c:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   221a0:	3301      	adds	r3, #1
   221a2:	e7c7      	b.n	22134 <sys_clock_driver_init+0xc>
   221a4:	40011000 	.word	0x40011000
   221a8:	e000e100 	.word	0xe000e100
   221ac:	20002908 	.word	0x20002908
   221b0:	00021fd1 	.word	0x00021fd1
   221b4:	007fffff 	.word	0x007fffff
   221b8:	20001d78 	.word	0x20001d78

000221bc <process_channel>:
{
   221bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   221c0:	b082      	sub	sp, #8
   221c2:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
   221c4:	f7ff fe98 	bl	21ef8 <channel_processing_check_and_clear>
   221c8:	b910      	cbnz	r0, 221d0 <process_channel+0x14>
}
   221ca:	b002      	add	sp, #8
   221cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
   221d0:	f7ff ff3a 	bl	22048 <z_nrf_rtc_timer_read>
   221d4:	4682      	mov	sl, r0
   221d6:	460e      	mov	r6, r1
		mcu_critical_state = full_int_lock();
   221d8:	f00d fc0e 	bl	2f9f8 <full_int_lock>
   221dc:	4605      	mov	r5, r0
		expire_time = cc_data[chan].target_time;
   221de:	4b13      	ldr	r3, [pc, #76]	; (2222c <process_channel+0x70>)
   221e0:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   221e4:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
   221e8:	45c2      	cmp	sl, r8
   221ea:	eb76 0309 	sbcs.w	r3, r6, r9
   221ee:	d20b      	bcs.n	22208 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   221f0:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
   221f2:	4628      	mov	r0, r5
   221f4:	f00d fc04 	bl	2fa00 <full_int_unlock>
		if (handler) {
   221f8:	2e00      	cmp	r6, #0
   221fa:	d0e6      	beq.n	221ca <process_channel+0xe>
			handler(chan, expire_time, user_context);
   221fc:	9700      	str	r7, [sp, #0]
   221fe:	4642      	mov	r2, r8
   22200:	464b      	mov	r3, r9
   22202:	4620      	mov	r0, r4
   22204:	47b0      	blx	r6
}
   22206:	e7e0      	b.n	221ca <process_channel+0xe>
			handler = cc_data[chan].callback;
   22208:	4a08      	ldr	r2, [pc, #32]	; (2222c <process_channel+0x70>)
   2220a:	0123      	lsls	r3, r4, #4
   2220c:	eb02 1104 	add.w	r1, r2, r4, lsl #4
   22210:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
   22212:	684f      	ldr	r7, [r1, #4]
			cc_data[chan].callback = NULL;
   22214:	2000      	movs	r0, #0
   22216:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   22218:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2221c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   22220:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
   22224:	4620      	mov	r0, r4
   22226:	f7ff fe2f 	bl	21e88 <event_disable>
   2222a:	e7e2      	b.n	221f2 <process_channel+0x36>
   2222c:	20001d78 	.word	0x20001d78

00022230 <rtc_nrf_isr>:
{
   22230:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
   22232:	4b0e      	ldr	r3, [pc, #56]	; (2226c <rtc_nrf_isr+0x3c>)
   22234:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   22238:	f013 0f02 	tst.w	r3, #2
   2223c:	d00d      	beq.n	2225a <rtc_nrf_isr+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2223e:	4b0b      	ldr	r3, [pc, #44]	; (2226c <rtc_nrf_isr+0x3c>)
   22240:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   22244:	b14b      	cbz	r3, 2225a <rtc_nrf_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   22246:	4b09      	ldr	r3, [pc, #36]	; (2226c <rtc_nrf_isr+0x3c>)
   22248:	2200      	movs	r2, #0
   2224a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   2224e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		overflow_cnt++;
   22252:	4a07      	ldr	r2, [pc, #28]	; (22270 <rtc_nrf_isr+0x40>)
   22254:	6813      	ldr	r3, [r2, #0]
   22256:	3301      	adds	r3, #1
   22258:	6013      	str	r3, [r2, #0]
{
   2225a:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   2225c:	2c00      	cmp	r4, #0
   2225e:	dd00      	ble.n	22262 <rtc_nrf_isr+0x32>
}
   22260:	bd10      	pop	{r4, pc}
		process_channel(chan);
   22262:	4620      	mov	r0, r4
   22264:	f7ff ffaa 	bl	221bc <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   22268:	3401      	adds	r4, #1
   2226a:	e7f7      	b.n	2225c <rtc_nrf_isr+0x2c>
   2226c:	40011000 	.word	0x40011000
   22270:	2000290c 	.word	0x2000290c

00022274 <sys_clock_set_timeout>:
{
   22274:	b510      	push	{r4, lr}
   22276:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   22278:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2227c:	d006      	beq.n	2228c <sys_clock_set_timeout+0x18>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   2227e:	2801      	cmp	r0, #1
   22280:	dd06      	ble.n	22290 <sys_clock_set_timeout+0x1c>
   22282:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   22286:	da05      	bge.n	22294 <sys_clock_set_timeout+0x20>
   22288:	1e44      	subs	r4, r0, #1
   2228a:	e004      	b.n	22296 <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   2228c:	480f      	ldr	r0, [pc, #60]	; (222cc <sys_clock_set_timeout+0x58>)
   2228e:	e7f8      	b.n	22282 <sys_clock_set_timeout+0xe>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   22290:	2400      	movs	r4, #0
   22292:	e000      	b.n	22296 <sys_clock_set_timeout+0x22>
   22294:	4c0d      	ldr	r4, [pc, #52]	; (222cc <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   22296:	f7ff fed7 	bl	22048 <z_nrf_rtc_timer_read>
   2229a:	4b0d      	ldr	r3, [pc, #52]	; (222d0 <sys_clock_set_timeout+0x5c>)
   2229c:	6819      	ldr	r1, [r3, #0]
   2229e:	685b      	ldr	r3, [r3, #4]
   222a0:	1a40      	subs	r0, r0, r1
	if (unannounced >= COUNTER_HALF_SPAN) {
   222a2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   222a6:	d300      	bcc.n	222aa <sys_clock_set_timeout+0x36>
		ticks = 0;
   222a8:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   222aa:	4420      	add	r0, r4
   222ac:	1c42      	adds	r2, r0, #1
	if (cyc > MAX_CYCLES) {
   222ae:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
   222b2:	d300      	bcc.n	222b6 <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
   222b4:	4a05      	ldr	r2, [pc, #20]	; (222cc <sys_clock_set_timeout+0x58>)
	uint64_t target_time = cyc + last_count;
   222b6:	2000      	movs	r0, #0
   222b8:	188a      	adds	r2, r1, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   222ba:	9001      	str	r0, [sp, #4]
   222bc:	4905      	ldr	r1, [pc, #20]	; (222d4 <sys_clock_set_timeout+0x60>)
   222be:	9100      	str	r1, [sp, #0]
   222c0:	f143 0300 	adc.w	r3, r3, #0
   222c4:	f00d fbda 	bl	2fa7c <compare_set>
}
   222c8:	b002      	add	sp, #8
   222ca:	bd10      	pop	{r4, pc}
   222cc:	007fffff 	.word	0x007fffff
   222d0:	20001d88 	.word	0x20001d88
   222d4:	00021fd1 	.word	0x00021fd1

000222d8 <sys_clock_elapsed>:
{
   222d8:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   222da:	f7ff feb5 	bl	22048 <z_nrf_rtc_timer_read>
   222de:	4b02      	ldr	r3, [pc, #8]	; (222e8 <sys_clock_elapsed+0x10>)
   222e0:	681b      	ldr	r3, [r3, #0]
}
   222e2:	1ac0      	subs	r0, r0, r3
   222e4:	bd08      	pop	{r3, pc}
   222e6:	bf00      	nop
   222e8:	20001d88 	.word	0x20001d88

000222ec <nrf_pin_configure>:
 */
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input,
				       nrf_gpio_pin_drive_t drive)
{
   222ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   222f0:	460c      	mov	r4, r1
   222f2:	4615      	mov	r5, r2
   222f4:	461f      	mov	r7, r3
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
   222f6:	f410 5f80 	tst.w	r0, #4096	; 0x1000
   222fa:	d001      	beq.n	22300 <nrf_pin_configure+0x14>
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   222fc:	2501      	movs	r5, #1
		dir = NRF_GPIO_PIN_DIR_INPUT;
   222fe:	2400      	movs	r4, #0
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin), drive,
   22300:	f000 083f 	and.w	r8, r0, #63	; 0x3f
   22304:	f3c0 1981 	ubfx	r9, r0, #6, #2
    switch (port)
   22308:	f010 0f20 	tst.w	r0, #32
   2230c:	d019      	beq.n	22342 <nrf_pin_configure+0x56>
    uint32_t mask = 0;
   2230e:	2300      	movs	r3, #0
    pin_number &= 0x1F;
   22310:	f008 021f 	and.w	r2, r8, #31
    return (mask & (1UL << pin_number)) ? true : false;
   22314:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   22316:	f013 0f01 	tst.w	r3, #1
   2231a:	d015      	beq.n	22348 <nrf_pin_configure+0x5c>
    *p_pin = pin_number & 0x1F;
   2231c:	f008 061f 	and.w	r6, r8, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   22320:	ea5f 1358 	movs.w	r3, r8, lsr #5
   22324:	d11d      	bne.n	22362 <nrf_pin_configure+0x76>
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   22326:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
   2232a:	ea44 0489 	orr.w	r4, r4, r9, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2232e:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
   22332:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
   22336:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   2233a:	f842 4026 	str.w	r4, [r2, r6, lsl #2]
		     NRF_GPIO_PIN_NOSENSE);
}
   2233e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            mask = P0_FEATURE_PINS_PRESENT;
   22342:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   22346:	e7e3      	b.n	22310 <nrf_pin_configure+0x24>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   22348:	4e0d      	ldr	r6, [pc, #52]	; (22380 <nrf_pin_configure+0x94>)
   2234a:	f240 2247 	movw	r2, #583	; 0x247
   2234e:	4631      	mov	r1, r6
   22350:	480c      	ldr	r0, [pc, #48]	; (22384 <nrf_pin_configure+0x98>)
   22352:	f008 fe9c 	bl	2b08e <assert_print>
   22356:	f240 2147 	movw	r1, #583	; 0x247
   2235a:	4630      	mov	r0, r6
   2235c:	f008 fe90 	bl	2b080 <assert_post_action>
   22360:	e7dc      	b.n	2231c <nrf_pin_configure+0x30>
            NRFX_ASSERT(0);
   22362:	f8df 801c 	ldr.w	r8, [pc, #28]	; 22380 <nrf_pin_configure+0x94>
   22366:	f44f 7213 	mov.w	r2, #588	; 0x24c
   2236a:	4641      	mov	r1, r8
   2236c:	4805      	ldr	r0, [pc, #20]	; (22384 <nrf_pin_configure+0x98>)
   2236e:	f008 fe8e 	bl	2b08e <assert_print>
   22372:	f44f 7113 	mov.w	r1, #588	; 0x24c
   22376:	4640      	mov	r0, r8
   22378:	f008 fe82 	bl	2b080 <assert_post_action>
   2237c:	e7d3      	b.n	22326 <nrf_pin_configure+0x3a>
   2237e:	bf00      	nop
   22380:	00034634 	.word	0x00034634
   22384:	000318f8 	.word	0x000318f8

00022388 <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   22388:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2238c:	4605      	mov	r5, r0
   2238e:	4688      	mov	r8, r1
   22390:	4691      	mov	r9, r2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   22392:	2400      	movs	r4, #0
   22394:	e025      	b.n	223e2 <pinctrl_configure_pins+0x5a>
		__unused nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);

		switch (NRF_GET_FUN(pins[i])) {
#if defined(NRF_PSEL_UART)
		case NRF_FUN_UART_TX:
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
   22396:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2239a:	f8c9 350c 	str.w	r3, [r9, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
   2239e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   223a2:	f003 0a3f 	and.w	sl, r3, #63	; 0x3f
    switch (port)
   223a6:	f013 0f20 	tst.w	r3, #32
   223aa:	d101      	bne.n	223b0 <pinctrl_configure_pins+0x28>
            mask = P0_FEATURE_PINS_PRESENT;
   223ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    pin_number &= 0x1F;
   223b0:	f00a 031f 	and.w	r3, sl, #31
    return (mask & (1UL << pin_number)) ? true : false;
   223b4:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   223b6:	f012 0f01 	tst.w	r2, #1
   223ba:	d055      	beq.n	22468 <pinctrl_configure_pins+0xe0>
    *p_pin = pin_number & 0x1F;
   223bc:	f00a 0b1f 	and.w	fp, sl, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   223c0:	ea5f 135a 	movs.w	r3, sl, lsr #5
   223c4:	d15e      	bne.n	22484 <pinctrl_configure_pins+0xfc>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   223c6:	2101      	movs	r1, #1
   223c8:	fa01 f30b 	lsl.w	r3, r1, fp
    p_reg->OUTSET = set_mask;
   223cc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   223d0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   223d4:	4633      	mov	r3, r6
   223d6:	460a      	mov	r2, r1
   223d8:	59e8      	ldr	r0, [r5, r7]
   223da:	f7ff ff87 	bl	222ec <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   223de:	3401      	adds	r4, #1
   223e0:	b2e4      	uxtb	r4, r4
   223e2:	4544      	cmp	r4, r8
   223e4:	f080 835b 	bcs.w	22a9e <pinctrl_configure_pins+0x716>
		__unused nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   223e8:	00a7      	lsls	r7, r4, #2
   223ea:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   223ee:	f3c3 2603 	ubfx	r6, r3, #8, #4
		switch (NRF_GET_FUN(pins[i])) {
   223f2:	0c1a      	lsrs	r2, r3, #16
   223f4:	2a19      	cmp	r2, #25
   223f6:	f200 8354 	bhi.w	22aa2 <pinctrl_configure_pins+0x71a>
   223fa:	a101      	add	r1, pc, #4	; (adr r1, 22400 <pinctrl_configure_pins+0x78>)
   223fc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   22400:	00022397 	.word	0x00022397
   22404:	000224a1 	.word	0x000224a1
   22408:	000224b9 	.word	0x000224b9
   2240c:	0002253f 	.word	0x0002253f
   22410:	00022557 	.word	0x00022557
   22414:	000225dd 	.word	0x000225dd
   22418:	00022663 	.word	0x00022663
   2241c:	00022aa3 	.word	0x00022aa3
   22420:	00022aa3 	.word	0x00022aa3
   22424:	00022aa3 	.word	0x00022aa3
   22428:	00022aa3 	.word	0x00022aa3
   2242c:	0002267b 	.word	0x0002267b
   22430:	00022695 	.word	0x00022695
   22434:	00022aa3 	.word	0x00022aa3
   22438:	00022aa3 	.word	0x00022aa3
   2243c:	00022aa3 	.word	0x00022aa3
   22440:	00022aa3 	.word	0x00022aa3
   22444:	00022aa3 	.word	0x00022aa3
   22448:	00022aa3 	.word	0x00022aa3
   2244c:	00022aa3 	.word	0x00022aa3
   22450:	00022aa3 	.word	0x00022aa3
   22454:	00022aa3 	.word	0x00022aa3
   22458:	000226af 	.word	0x000226af
   2245c:	000227b1 	.word	0x000227b1
   22460:	000228ab 	.word	0x000228ab
   22464:	000229a5 	.word	0x000229a5
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   22468:	f8df b33c 	ldr.w	fp, [pc, #828]	; 227a8 <pinctrl_configure_pins+0x420>
   2246c:	f240 2247 	movw	r2, #583	; 0x247
   22470:	4659      	mov	r1, fp
   22472:	48ce      	ldr	r0, [pc, #824]	; (227ac <pinctrl_configure_pins+0x424>)
   22474:	f008 fe0b 	bl	2b08e <assert_print>
   22478:	f240 2147 	movw	r1, #583	; 0x247
   2247c:	4658      	mov	r0, fp
   2247e:	f008 fdff 	bl	2b080 <assert_post_action>
   22482:	e79b      	b.n	223bc <pinctrl_configure_pins+0x34>
            NRFX_ASSERT(0);
   22484:	f8df a320 	ldr.w	sl, [pc, #800]	; 227a8 <pinctrl_configure_pins+0x420>
   22488:	f44f 7213 	mov.w	r2, #588	; 0x24c
   2248c:	4651      	mov	r1, sl
   2248e:	48c7      	ldr	r0, [pc, #796]	; (227ac <pinctrl_configure_pins+0x424>)
   22490:	f008 fdfd 	bl	2b08e <assert_print>
   22494:	f44f 7113 	mov.w	r1, #588	; 0x24c
   22498:	4650      	mov	r0, sl
   2249a:	f008 fdf1 	bl	2b080 <assert_post_action>
   2249e:	e792      	b.n	223c6 <pinctrl_configure_pins+0x3e>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
		case NRF_FUN_UART_RX:
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
   224a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   224a4:	f8c9 3514 	str.w	r3, [r9, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   224a8:	4633      	mov	r3, r6
   224aa:	2200      	movs	r2, #0
   224ac:	4611      	mov	r1, r2
   224ae:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   224b2:	f7ff ff1b 	bl	222ec <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
   224b6:	e792      	b.n	223de <pinctrl_configure_pins+0x56>
		case NRF_FUN_UART_RTS:
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
   224b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   224bc:	f8c9 3508 	str.w	r3, [r9, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
   224c0:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   224c4:	f003 0b3f 	and.w	fp, r3, #63	; 0x3f
    switch (port)
   224c8:	f013 0f20 	tst.w	r3, #32
   224cc:	d018      	beq.n	22500 <pinctrl_configure_pins+0x178>
    uint32_t mask = 0;
   224ce:	2300      	movs	r3, #0
    pin_number &= 0x1F;
   224d0:	f00b 021f 	and.w	r2, fp, #31
    return (mask & (1UL << pin_number)) ? true : false;
   224d4:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   224d6:	f013 0f01 	tst.w	r3, #1
   224da:	d014      	beq.n	22506 <pinctrl_configure_pins+0x17e>
    *p_pin = pin_number & 0x1F;
   224dc:	f00b 0a1f 	and.w	sl, fp, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   224e0:	ea5f 135b 	movs.w	r3, fp, lsr #5
   224e4:	d11d      	bne.n	22522 <pinctrl_configure_pins+0x19a>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   224e6:	2101      	movs	r1, #1
   224e8:	fa01 f30a 	lsl.w	r3, r1, sl
    p_reg->OUTSET = set_mask;
   224ec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   224f0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   224f4:	4633      	mov	r3, r6
   224f6:	460a      	mov	r2, r1
   224f8:	59e8      	ldr	r0, [r5, r7]
   224fa:	f7ff fef7 	bl	222ec <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
   224fe:	e76e      	b.n	223de <pinctrl_configure_pins+0x56>
            mask = P0_FEATURE_PINS_PRESENT;
   22500:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   22504:	e7e4      	b.n	224d0 <pinctrl_configure_pins+0x148>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   22506:	f8df a2a0 	ldr.w	sl, [pc, #672]	; 227a8 <pinctrl_configure_pins+0x420>
   2250a:	f240 2247 	movw	r2, #583	; 0x247
   2250e:	4651      	mov	r1, sl
   22510:	48a6      	ldr	r0, [pc, #664]	; (227ac <pinctrl_configure_pins+0x424>)
   22512:	f008 fdbc 	bl	2b08e <assert_print>
   22516:	f240 2147 	movw	r1, #583	; 0x247
   2251a:	4650      	mov	r0, sl
   2251c:	f008 fdb0 	bl	2b080 <assert_post_action>
   22520:	e7dc      	b.n	224dc <pinctrl_configure_pins+0x154>
            NRFX_ASSERT(0);
   22522:	f8df b284 	ldr.w	fp, [pc, #644]	; 227a8 <pinctrl_configure_pins+0x420>
   22526:	f44f 7213 	mov.w	r2, #588	; 0x24c
   2252a:	4659      	mov	r1, fp
   2252c:	489f      	ldr	r0, [pc, #636]	; (227ac <pinctrl_configure_pins+0x424>)
   2252e:	f008 fdae 	bl	2b08e <assert_print>
   22532:	f44f 7113 	mov.w	r1, #588	; 0x24c
   22536:	4658      	mov	r0, fp
   22538:	f008 fda2 	bl	2b080 <assert_post_action>
   2253c:	e7d3      	b.n	224e6 <pinctrl_configure_pins+0x15e>
		case NRF_FUN_UART_CTS:
			NRF_PSEL_UART(reg, CTS) = NRF_GET_PIN(pins[i]);
   2253e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   22542:	f8c9 3510 	str.w	r3, [r9, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   22546:	4633      	mov	r3, r6
   22548:	2200      	movs	r2, #0
   2254a:	4611      	mov	r1, r2
   2254c:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   22550:	f7ff fecc 	bl	222ec <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
   22554:	e743      	b.n	223de <pinctrl_configure_pins+0x56>
#endif /* defined(NRF_PSEL_UART) */
#if defined(NRF_PSEL_SPIM)
		case NRF_FUN_SPIM_SCK:
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
   22556:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2255a:	f8c9 3508 	str.w	r3, [r9, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
   2255e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   22562:	f003 0b3f 	and.w	fp, r3, #63	; 0x3f
    switch (port)
   22566:	f013 0f20 	tst.w	r3, #32
   2256a:	d018      	beq.n	2259e <pinctrl_configure_pins+0x216>
    uint32_t mask = 0;
   2256c:	2300      	movs	r3, #0
    pin_number &= 0x1F;
   2256e:	f00b 021f 	and.w	r2, fp, #31
    return (mask & (1UL << pin_number)) ? true : false;
   22572:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   22574:	f013 0f01 	tst.w	r3, #1
   22578:	d014      	beq.n	225a4 <pinctrl_configure_pins+0x21c>
    *p_pin = pin_number & 0x1F;
   2257a:	f00b 0a1f 	and.w	sl, fp, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2257e:	ea5f 135b 	movs.w	r3, fp, lsr #5
   22582:	d11d      	bne.n	225c0 <pinctrl_configure_pins+0x238>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   22584:	2101      	movs	r1, #1
   22586:	fa01 f30a 	lsl.w	r3, r1, sl
    p_reg->OUTCLR = clr_mask;
   2258a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   2258e:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   22592:	4633      	mov	r3, r6
   22594:	2200      	movs	r2, #0
   22596:	59e8      	ldr	r0, [r5, r7]
   22598:	f7ff fea8 	bl	222ec <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
   2259c:	e71f      	b.n	223de <pinctrl_configure_pins+0x56>
            mask = P0_FEATURE_PINS_PRESENT;
   2259e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   225a2:	e7e4      	b.n	2256e <pinctrl_configure_pins+0x1e6>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   225a4:	f8df a200 	ldr.w	sl, [pc, #512]	; 227a8 <pinctrl_configure_pins+0x420>
   225a8:	f240 2247 	movw	r2, #583	; 0x247
   225ac:	4651      	mov	r1, sl
   225ae:	487f      	ldr	r0, [pc, #508]	; (227ac <pinctrl_configure_pins+0x424>)
   225b0:	f008 fd6d 	bl	2b08e <assert_print>
   225b4:	f240 2147 	movw	r1, #583	; 0x247
   225b8:	4650      	mov	r0, sl
   225ba:	f008 fd61 	bl	2b080 <assert_post_action>
   225be:	e7dc      	b.n	2257a <pinctrl_configure_pins+0x1f2>
            NRFX_ASSERT(0);
   225c0:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 227a8 <pinctrl_configure_pins+0x420>
   225c4:	f44f 7213 	mov.w	r2, #588	; 0x24c
   225c8:	4659      	mov	r1, fp
   225ca:	4878      	ldr	r0, [pc, #480]	; (227ac <pinctrl_configure_pins+0x424>)
   225cc:	f008 fd5f 	bl	2b08e <assert_print>
   225d0:	f44f 7113 	mov.w	r1, #588	; 0x24c
   225d4:	4658      	mov	r0, fp
   225d6:	f008 fd53 	bl	2b080 <assert_post_action>
   225da:	e7d3      	b.n	22584 <pinctrl_configure_pins+0x1fc>
		case NRF_FUN_SPIM_MOSI:
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
   225dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   225e0:	f8c9 350c 	str.w	r3, [r9, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
   225e4:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   225e8:	f003 0b3f 	and.w	fp, r3, #63	; 0x3f
    switch (port)
   225ec:	f013 0f20 	tst.w	r3, #32
   225f0:	d018      	beq.n	22624 <pinctrl_configure_pins+0x29c>
    uint32_t mask = 0;
   225f2:	2300      	movs	r3, #0
    pin_number &= 0x1F;
   225f4:	f00b 021f 	and.w	r2, fp, #31
    return (mask & (1UL << pin_number)) ? true : false;
   225f8:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   225fa:	f013 0f01 	tst.w	r3, #1
   225fe:	d014      	beq.n	2262a <pinctrl_configure_pins+0x2a2>
    *p_pin = pin_number & 0x1F;
   22600:	f00b 0a1f 	and.w	sl, fp, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   22604:	ea5f 135b 	movs.w	r3, fp, lsr #5
   22608:	d11d      	bne.n	22646 <pinctrl_configure_pins+0x2be>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   2260a:	2101      	movs	r1, #1
   2260c:	fa01 f30a 	lsl.w	r3, r1, sl
    p_reg->OUTCLR = clr_mask;
   22610:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   22614:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   22618:	4633      	mov	r3, r6
   2261a:	460a      	mov	r2, r1
   2261c:	59e8      	ldr	r0, [r5, r7]
   2261e:	f7ff fe65 	bl	222ec <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
   22622:	e6dc      	b.n	223de <pinctrl_configure_pins+0x56>
            mask = P0_FEATURE_PINS_PRESENT;
   22624:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   22628:	e7e4      	b.n	225f4 <pinctrl_configure_pins+0x26c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2262a:	f8df a17c 	ldr.w	sl, [pc, #380]	; 227a8 <pinctrl_configure_pins+0x420>
   2262e:	f240 2247 	movw	r2, #583	; 0x247
   22632:	4651      	mov	r1, sl
   22634:	485d      	ldr	r0, [pc, #372]	; (227ac <pinctrl_configure_pins+0x424>)
   22636:	f008 fd2a 	bl	2b08e <assert_print>
   2263a:	f240 2147 	movw	r1, #583	; 0x247
   2263e:	4650      	mov	r0, sl
   22640:	f008 fd1e 	bl	2b080 <assert_post_action>
   22644:	e7dc      	b.n	22600 <pinctrl_configure_pins+0x278>
            NRFX_ASSERT(0);
   22646:	f8df b160 	ldr.w	fp, [pc, #352]	; 227a8 <pinctrl_configure_pins+0x420>
   2264a:	f44f 7213 	mov.w	r2, #588	; 0x24c
   2264e:	4659      	mov	r1, fp
   22650:	4856      	ldr	r0, [pc, #344]	; (227ac <pinctrl_configure_pins+0x424>)
   22652:	f008 fd1c 	bl	2b08e <assert_print>
   22656:	f44f 7113 	mov.w	r1, #588	; 0x24c
   2265a:	4658      	mov	r0, fp
   2265c:	f008 fd10 	bl	2b080 <assert_post_action>
   22660:	e7d3      	b.n	2260a <pinctrl_configure_pins+0x282>
		case NRF_FUN_SPIM_MISO:
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
   22662:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   22666:	f8c9 3510 	str.w	r3, [r9, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   2266a:	4633      	mov	r3, r6
   2266c:	2200      	movs	r2, #0
   2266e:	4611      	mov	r1, r2
   22670:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   22674:	f7ff fe3a 	bl	222ec <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
   22678:	e6b1      	b.n	223de <pinctrl_configure_pins+0x56>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
#endif /* defined(NRF_PSEL_SPIS) */
#if defined(NRF_PSEL_TWIM)
		case NRF_FUN_TWIM_SCL:
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
   2267a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2267e:	f8c9 3508 	str.w	r3, [r9, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   22682:	b906      	cbnz	r6, 22686 <pinctrl_configure_pins+0x2fe>
				 * suitable for TWI/TWIM peripherals (S0D1).
				 * This drive cannot be used always so that
				 * users are able to select e.g. H0D1 or E0E1
				 * in devicetree.
				 */
				drive = NRF_DRIVE_S0D1;
   22684:	2606      	movs	r6, #6
			}
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   22686:	4633      	mov	r3, r6
   22688:	2200      	movs	r2, #0
   2268a:	4611      	mov	r1, r2
   2268c:	59e8      	ldr	r0, [r5, r7]
   2268e:	f7ff fe2d 	bl	222ec <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
   22692:	e6a4      	b.n	223de <pinctrl_configure_pins+0x56>
		case NRF_FUN_TWIM_SDA:
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
   22694:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   22698:	f8c9 350c 	str.w	r3, [r9, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   2269c:	b906      	cbnz	r6, 226a0 <pinctrl_configure_pins+0x318>
				drive = NRF_DRIVE_S0D1;
   2269e:	2606      	movs	r6, #6
			}
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   226a0:	4633      	mov	r3, r6
   226a2:	2200      	movs	r2, #0
   226a4:	4611      	mov	r1, r2
   226a6:	59e8      	ldr	r0, [r5, r7]
   226a8:	f7ff fe20 	bl	222ec <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
   226ac:	e697      	b.n	223de <pinctrl_configure_pins+0x56>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
#endif /* defined(NRF_PSEL_PDM) */
#if defined(NRF_PSEL_PWM)
		case NRF_FUN_PWM_OUT0:
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
   226ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   226b2:	f8c9 3560 	str.w	r3, [r9, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   226b6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   226ba:	f003 0a3f 	and.w	sl, r3, #63	; 0x3f
   226be:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
   226c2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   226c6:	d139      	bne.n	2273c <pinctrl_configure_pins+0x3b4>
    switch (port)
   226c8:	ea5f 135a 	movs.w	r3, sl, lsr #5
   226cc:	d101      	bne.n	226d2 <pinctrl_configure_pins+0x34a>
            mask = P0_FEATURE_PINS_PRESENT;
   226ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    pin_number &= 0x1F;
   226d2:	f00a 031f 	and.w	r3, sl, #31
    return (mask & (1UL << pin_number)) ? true : false;
   226d6:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   226d8:	f012 0f01 	tst.w	r2, #1
   226dc:	d012      	beq.n	22704 <pinctrl_configure_pins+0x37c>
    *p_pin = pin_number & 0x1F;
   226de:	f00a 0b1f 	and.w	fp, sl, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   226e2:	ea5f 135a 	movs.w	r3, sl, lsr #5
   226e6:	d11b      	bne.n	22720 <pinctrl_configure_pins+0x398>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   226e8:	2301      	movs	r3, #1
   226ea:	fa03 f30b 	lsl.w	r3, r3, fp
    p_reg->OUTCLR = clr_mask;
   226ee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   226f2:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   226f6:	4633      	mov	r3, r6
   226f8:	2201      	movs	r2, #1
   226fa:	4611      	mov	r1, r2
   226fc:	59e8      	ldr	r0, [r5, r7]
   226fe:	f7ff fdf5 	bl	222ec <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
   22702:	e66c      	b.n	223de <pinctrl_configure_pins+0x56>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   22704:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 227a8 <pinctrl_configure_pins+0x420>
   22708:	f240 2247 	movw	r2, #583	; 0x247
   2270c:	4659      	mov	r1, fp
   2270e:	4827      	ldr	r0, [pc, #156]	; (227ac <pinctrl_configure_pins+0x424>)
   22710:	f008 fcbd 	bl	2b08e <assert_print>
   22714:	f240 2147 	movw	r1, #583	; 0x247
   22718:	4658      	mov	r0, fp
   2271a:	f008 fcb1 	bl	2b080 <assert_post_action>
   2271e:	e7de      	b.n	226de <pinctrl_configure_pins+0x356>
            NRFX_ASSERT(0);
   22720:	f8df a084 	ldr.w	sl, [pc, #132]	; 227a8 <pinctrl_configure_pins+0x420>
   22724:	f44f 7213 	mov.w	r2, #588	; 0x24c
   22728:	4651      	mov	r1, sl
   2272a:	4820      	ldr	r0, [pc, #128]	; (227ac <pinctrl_configure_pins+0x424>)
   2272c:	f008 fcaf 	bl	2b08e <assert_print>
   22730:	f44f 7113 	mov.w	r1, #588	; 0x24c
   22734:	4650      	mov	r0, sl
   22736:	f008 fca3 	bl	2b080 <assert_post_action>
   2273a:	e7d5      	b.n	226e8 <pinctrl_configure_pins+0x360>
    switch (port)
   2273c:	ea5f 135a 	movs.w	r3, sl, lsr #5
   22740:	d013      	beq.n	2276a <pinctrl_configure_pins+0x3e2>
    uint32_t mask = 0;
   22742:	2300      	movs	r3, #0
    pin_number &= 0x1F;
   22744:	f00a 021f 	and.w	r2, sl, #31
    return (mask & (1UL << pin_number)) ? true : false;
   22748:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2274a:	f013 0f01 	tst.w	r3, #1
   2274e:	d00f      	beq.n	22770 <pinctrl_configure_pins+0x3e8>
    *p_pin = pin_number & 0x1F;
   22750:	f00a 0b1f 	and.w	fp, sl, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   22754:	ea5f 135a 	movs.w	r3, sl, lsr #5
   22758:	d118      	bne.n	2278c <pinctrl_configure_pins+0x404>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2275a:	2301      	movs	r3, #1
   2275c:	fa03 f30b 	lsl.w	r3, r3, fp
    p_reg->OUTSET = set_mask;
   22760:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   22764:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   22768:	e7c5      	b.n	226f6 <pinctrl_configure_pins+0x36e>
            mask = P0_FEATURE_PINS_PRESENT;
   2276a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2276e:	e7e9      	b.n	22744 <pinctrl_configure_pins+0x3bc>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   22770:	f8df b034 	ldr.w	fp, [pc, #52]	; 227a8 <pinctrl_configure_pins+0x420>
   22774:	f240 2247 	movw	r2, #583	; 0x247
   22778:	4659      	mov	r1, fp
   2277a:	480c      	ldr	r0, [pc, #48]	; (227ac <pinctrl_configure_pins+0x424>)
   2277c:	f008 fc87 	bl	2b08e <assert_print>
   22780:	f240 2147 	movw	r1, #583	; 0x247
   22784:	4658      	mov	r0, fp
   22786:	f008 fc7b 	bl	2b080 <assert_post_action>
   2278a:	e7e1      	b.n	22750 <pinctrl_configure_pins+0x3c8>
            NRFX_ASSERT(0);
   2278c:	f8df a018 	ldr.w	sl, [pc, #24]	; 227a8 <pinctrl_configure_pins+0x420>
   22790:	f44f 7213 	mov.w	r2, #588	; 0x24c
   22794:	4651      	mov	r1, sl
   22796:	4805      	ldr	r0, [pc, #20]	; (227ac <pinctrl_configure_pins+0x424>)
   22798:	f008 fc79 	bl	2b08e <assert_print>
   2279c:	f44f 7113 	mov.w	r1, #588	; 0x24c
   227a0:	4650      	mov	r0, sl
   227a2:	f008 fc6d 	bl	2b080 <assert_post_action>
   227a6:	e7d8      	b.n	2275a <pinctrl_configure_pins+0x3d2>
   227a8:	00034634 	.word	0x00034634
   227ac:	000318f8 	.word	0x000318f8
		case NRF_FUN_PWM_OUT1:
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
   227b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   227b4:	f8c9 3564 	str.w	r3, [r9, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   227b8:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   227bc:	f003 0a3f 	and.w	sl, r3, #63	; 0x3f
   227c0:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
   227c4:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   227c8:	d139      	bne.n	2283e <pinctrl_configure_pins+0x4b6>
    switch (port)
   227ca:	ea5f 135a 	movs.w	r3, sl, lsr #5
   227ce:	d101      	bne.n	227d4 <pinctrl_configure_pins+0x44c>
            mask = P0_FEATURE_PINS_PRESENT;
   227d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    pin_number &= 0x1F;
   227d4:	f00a 031f 	and.w	r3, sl, #31
    return (mask & (1UL << pin_number)) ? true : false;
   227d8:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   227da:	f012 0f01 	tst.w	r2, #1
   227de:	d012      	beq.n	22806 <pinctrl_configure_pins+0x47e>
    *p_pin = pin_number & 0x1F;
   227e0:	f00a 0b1f 	and.w	fp, sl, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   227e4:	ea5f 135a 	movs.w	r3, sl, lsr #5
   227e8:	d11b      	bne.n	22822 <pinctrl_configure_pins+0x49a>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   227ea:	2301      	movs	r3, #1
   227ec:	fa03 f30b 	lsl.w	r3, r3, fp
    p_reg->OUTCLR = clr_mask;
   227f0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   227f4:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   227f8:	4633      	mov	r3, r6
   227fa:	2201      	movs	r2, #1
   227fc:	4611      	mov	r1, r2
   227fe:	59e8      	ldr	r0, [r5, r7]
   22800:	f7ff fd74 	bl	222ec <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
   22804:	e5eb      	b.n	223de <pinctrl_configure_pins+0x56>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   22806:	f8df b2a4 	ldr.w	fp, [pc, #676]	; 22aac <pinctrl_configure_pins+0x724>
   2280a:	f240 2247 	movw	r2, #583	; 0x247
   2280e:	4659      	mov	r1, fp
   22810:	48a7      	ldr	r0, [pc, #668]	; (22ab0 <pinctrl_configure_pins+0x728>)
   22812:	f008 fc3c 	bl	2b08e <assert_print>
   22816:	f240 2147 	movw	r1, #583	; 0x247
   2281a:	4658      	mov	r0, fp
   2281c:	f008 fc30 	bl	2b080 <assert_post_action>
   22820:	e7de      	b.n	227e0 <pinctrl_configure_pins+0x458>
            NRFX_ASSERT(0);
   22822:	f8df a288 	ldr.w	sl, [pc, #648]	; 22aac <pinctrl_configure_pins+0x724>
   22826:	f44f 7213 	mov.w	r2, #588	; 0x24c
   2282a:	4651      	mov	r1, sl
   2282c:	48a0      	ldr	r0, [pc, #640]	; (22ab0 <pinctrl_configure_pins+0x728>)
   2282e:	f008 fc2e 	bl	2b08e <assert_print>
   22832:	f44f 7113 	mov.w	r1, #588	; 0x24c
   22836:	4650      	mov	r0, sl
   22838:	f008 fc22 	bl	2b080 <assert_post_action>
   2283c:	e7d5      	b.n	227ea <pinctrl_configure_pins+0x462>
    switch (port)
   2283e:	ea5f 135a 	movs.w	r3, sl, lsr #5
   22842:	d013      	beq.n	2286c <pinctrl_configure_pins+0x4e4>
    uint32_t mask = 0;
   22844:	2300      	movs	r3, #0
    pin_number &= 0x1F;
   22846:	f00a 021f 	and.w	r2, sl, #31
    return (mask & (1UL << pin_number)) ? true : false;
   2284a:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2284c:	f013 0f01 	tst.w	r3, #1
   22850:	d00f      	beq.n	22872 <pinctrl_configure_pins+0x4ea>
    *p_pin = pin_number & 0x1F;
   22852:	f00a 0b1f 	and.w	fp, sl, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   22856:	ea5f 135a 	movs.w	r3, sl, lsr #5
   2285a:	d118      	bne.n	2288e <pinctrl_configure_pins+0x506>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2285c:	2301      	movs	r3, #1
   2285e:	fa03 f30b 	lsl.w	r3, r3, fp
    p_reg->OUTSET = set_mask;
   22862:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   22866:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   2286a:	e7c5      	b.n	227f8 <pinctrl_configure_pins+0x470>
            mask = P0_FEATURE_PINS_PRESENT;
   2286c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   22870:	e7e9      	b.n	22846 <pinctrl_configure_pins+0x4be>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   22872:	f8df b238 	ldr.w	fp, [pc, #568]	; 22aac <pinctrl_configure_pins+0x724>
   22876:	f240 2247 	movw	r2, #583	; 0x247
   2287a:	4659      	mov	r1, fp
   2287c:	488c      	ldr	r0, [pc, #560]	; (22ab0 <pinctrl_configure_pins+0x728>)
   2287e:	f008 fc06 	bl	2b08e <assert_print>
   22882:	f240 2147 	movw	r1, #583	; 0x247
   22886:	4658      	mov	r0, fp
   22888:	f008 fbfa 	bl	2b080 <assert_post_action>
   2288c:	e7e1      	b.n	22852 <pinctrl_configure_pins+0x4ca>
            NRFX_ASSERT(0);
   2288e:	f8df a21c 	ldr.w	sl, [pc, #540]	; 22aac <pinctrl_configure_pins+0x724>
   22892:	f44f 7213 	mov.w	r2, #588	; 0x24c
   22896:	4651      	mov	r1, sl
   22898:	4885      	ldr	r0, [pc, #532]	; (22ab0 <pinctrl_configure_pins+0x728>)
   2289a:	f008 fbf8 	bl	2b08e <assert_print>
   2289e:	f44f 7113 	mov.w	r1, #588	; 0x24c
   228a2:	4650      	mov	r0, sl
   228a4:	f008 fbec 	bl	2b080 <assert_post_action>
   228a8:	e7d8      	b.n	2285c <pinctrl_configure_pins+0x4d4>
		case NRF_FUN_PWM_OUT2:
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
   228aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   228ae:	f8c9 3568 	str.w	r3, [r9, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   228b2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   228b6:	f003 0a3f 	and.w	sl, r3, #63	; 0x3f
   228ba:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
   228be:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   228c2:	d139      	bne.n	22938 <pinctrl_configure_pins+0x5b0>
    switch (port)
   228c4:	ea5f 135a 	movs.w	r3, sl, lsr #5
   228c8:	d101      	bne.n	228ce <pinctrl_configure_pins+0x546>
            mask = P0_FEATURE_PINS_PRESENT;
   228ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    pin_number &= 0x1F;
   228ce:	f00a 031f 	and.w	r3, sl, #31
    return (mask & (1UL << pin_number)) ? true : false;
   228d2:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   228d4:	f012 0f01 	tst.w	r2, #1
   228d8:	d012      	beq.n	22900 <pinctrl_configure_pins+0x578>
    *p_pin = pin_number & 0x1F;
   228da:	f00a 0b1f 	and.w	fp, sl, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   228de:	ea5f 135a 	movs.w	r3, sl, lsr #5
   228e2:	d11b      	bne.n	2291c <pinctrl_configure_pins+0x594>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   228e4:	2301      	movs	r3, #1
   228e6:	fa03 f30b 	lsl.w	r3, r3, fp
    p_reg->OUTCLR = clr_mask;
   228ea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   228ee:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   228f2:	4633      	mov	r3, r6
   228f4:	2201      	movs	r2, #1
   228f6:	4611      	mov	r1, r2
   228f8:	59e8      	ldr	r0, [r5, r7]
   228fa:	f7ff fcf7 	bl	222ec <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
   228fe:	e56e      	b.n	223de <pinctrl_configure_pins+0x56>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   22900:	f8df b1a8 	ldr.w	fp, [pc, #424]	; 22aac <pinctrl_configure_pins+0x724>
   22904:	f240 2247 	movw	r2, #583	; 0x247
   22908:	4659      	mov	r1, fp
   2290a:	4869      	ldr	r0, [pc, #420]	; (22ab0 <pinctrl_configure_pins+0x728>)
   2290c:	f008 fbbf 	bl	2b08e <assert_print>
   22910:	f240 2147 	movw	r1, #583	; 0x247
   22914:	4658      	mov	r0, fp
   22916:	f008 fbb3 	bl	2b080 <assert_post_action>
   2291a:	e7de      	b.n	228da <pinctrl_configure_pins+0x552>
            NRFX_ASSERT(0);
   2291c:	f8df a18c 	ldr.w	sl, [pc, #396]	; 22aac <pinctrl_configure_pins+0x724>
   22920:	f44f 7213 	mov.w	r2, #588	; 0x24c
   22924:	4651      	mov	r1, sl
   22926:	4862      	ldr	r0, [pc, #392]	; (22ab0 <pinctrl_configure_pins+0x728>)
   22928:	f008 fbb1 	bl	2b08e <assert_print>
   2292c:	f44f 7113 	mov.w	r1, #588	; 0x24c
   22930:	4650      	mov	r0, sl
   22932:	f008 fba5 	bl	2b080 <assert_post_action>
   22936:	e7d5      	b.n	228e4 <pinctrl_configure_pins+0x55c>
    switch (port)
   22938:	ea5f 135a 	movs.w	r3, sl, lsr #5
   2293c:	d013      	beq.n	22966 <pinctrl_configure_pins+0x5de>
    uint32_t mask = 0;
   2293e:	2300      	movs	r3, #0
    pin_number &= 0x1F;
   22940:	f00a 021f 	and.w	r2, sl, #31
    return (mask & (1UL << pin_number)) ? true : false;
   22944:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   22946:	f013 0f01 	tst.w	r3, #1
   2294a:	d00f      	beq.n	2296c <pinctrl_configure_pins+0x5e4>
    *p_pin = pin_number & 0x1F;
   2294c:	f00a 0b1f 	and.w	fp, sl, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   22950:	ea5f 135a 	movs.w	r3, sl, lsr #5
   22954:	d118      	bne.n	22988 <pinctrl_configure_pins+0x600>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   22956:	2301      	movs	r3, #1
   22958:	fa03 f30b 	lsl.w	r3, r3, fp
    p_reg->OUTSET = set_mask;
   2295c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   22960:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   22964:	e7c5      	b.n	228f2 <pinctrl_configure_pins+0x56a>
            mask = P0_FEATURE_PINS_PRESENT;
   22966:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2296a:	e7e9      	b.n	22940 <pinctrl_configure_pins+0x5b8>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2296c:	f8df b13c 	ldr.w	fp, [pc, #316]	; 22aac <pinctrl_configure_pins+0x724>
   22970:	f240 2247 	movw	r2, #583	; 0x247
   22974:	4659      	mov	r1, fp
   22976:	484e      	ldr	r0, [pc, #312]	; (22ab0 <pinctrl_configure_pins+0x728>)
   22978:	f008 fb89 	bl	2b08e <assert_print>
   2297c:	f240 2147 	movw	r1, #583	; 0x247
   22980:	4658      	mov	r0, fp
   22982:	f008 fb7d 	bl	2b080 <assert_post_action>
   22986:	e7e1      	b.n	2294c <pinctrl_configure_pins+0x5c4>
            NRFX_ASSERT(0);
   22988:	f8df a120 	ldr.w	sl, [pc, #288]	; 22aac <pinctrl_configure_pins+0x724>
   2298c:	f44f 7213 	mov.w	r2, #588	; 0x24c
   22990:	4651      	mov	r1, sl
   22992:	4847      	ldr	r0, [pc, #284]	; (22ab0 <pinctrl_configure_pins+0x728>)
   22994:	f008 fb7b 	bl	2b08e <assert_print>
   22998:	f44f 7113 	mov.w	r1, #588	; 0x24c
   2299c:	4650      	mov	r0, sl
   2299e:	f008 fb6f 	bl	2b080 <assert_post_action>
   229a2:	e7d8      	b.n	22956 <pinctrl_configure_pins+0x5ce>
		case NRF_FUN_PWM_OUT3:
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
   229a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   229a8:	f8c9 356c 	str.w	r3, [r9, #1388]	; 0x56c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   229ac:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   229b0:	f003 0a3f 	and.w	sl, r3, #63	; 0x3f
   229b4:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
   229b8:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   229bc:	d139      	bne.n	22a32 <pinctrl_configure_pins+0x6aa>
    switch (port)
   229be:	ea5f 135a 	movs.w	r3, sl, lsr #5
   229c2:	d101      	bne.n	229c8 <pinctrl_configure_pins+0x640>
            mask = P0_FEATURE_PINS_PRESENT;
   229c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    pin_number &= 0x1F;
   229c8:	f00a 031f 	and.w	r3, sl, #31
    return (mask & (1UL << pin_number)) ? true : false;
   229cc:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   229ce:	f012 0f01 	tst.w	r2, #1
   229d2:	d012      	beq.n	229fa <pinctrl_configure_pins+0x672>
    *p_pin = pin_number & 0x1F;
   229d4:	f00a 0b1f 	and.w	fp, sl, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   229d8:	ea5f 135a 	movs.w	r3, sl, lsr #5
   229dc:	d11b      	bne.n	22a16 <pinctrl_configure_pins+0x68e>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   229de:	2301      	movs	r3, #1
   229e0:	fa03 f30b 	lsl.w	r3, r3, fp
    p_reg->OUTCLR = clr_mask;
   229e4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   229e8:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   229ec:	4633      	mov	r3, r6
   229ee:	2201      	movs	r2, #1
   229f0:	4611      	mov	r1, r2
   229f2:	59e8      	ldr	r0, [r5, r7]
   229f4:	f7ff fc7a 	bl	222ec <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
   229f8:	e4f1      	b.n	223de <pinctrl_configure_pins+0x56>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   229fa:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 22aac <pinctrl_configure_pins+0x724>
   229fe:	f240 2247 	movw	r2, #583	; 0x247
   22a02:	4659      	mov	r1, fp
   22a04:	482a      	ldr	r0, [pc, #168]	; (22ab0 <pinctrl_configure_pins+0x728>)
   22a06:	f008 fb42 	bl	2b08e <assert_print>
   22a0a:	f240 2147 	movw	r1, #583	; 0x247
   22a0e:	4658      	mov	r0, fp
   22a10:	f008 fb36 	bl	2b080 <assert_post_action>
   22a14:	e7de      	b.n	229d4 <pinctrl_configure_pins+0x64c>
            NRFX_ASSERT(0);
   22a16:	f8df a094 	ldr.w	sl, [pc, #148]	; 22aac <pinctrl_configure_pins+0x724>
   22a1a:	f44f 7213 	mov.w	r2, #588	; 0x24c
   22a1e:	4651      	mov	r1, sl
   22a20:	4823      	ldr	r0, [pc, #140]	; (22ab0 <pinctrl_configure_pins+0x728>)
   22a22:	f008 fb34 	bl	2b08e <assert_print>
   22a26:	f44f 7113 	mov.w	r1, #588	; 0x24c
   22a2a:	4650      	mov	r0, sl
   22a2c:	f008 fb28 	bl	2b080 <assert_post_action>
   22a30:	e7d5      	b.n	229de <pinctrl_configure_pins+0x656>
    switch (port)
   22a32:	ea5f 135a 	movs.w	r3, sl, lsr #5
   22a36:	d013      	beq.n	22a60 <pinctrl_configure_pins+0x6d8>
    uint32_t mask = 0;
   22a38:	2300      	movs	r3, #0
    pin_number &= 0x1F;
   22a3a:	f00a 021f 	and.w	r2, sl, #31
    return (mask & (1UL << pin_number)) ? true : false;
   22a3e:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   22a40:	f013 0f01 	tst.w	r3, #1
   22a44:	d00f      	beq.n	22a66 <pinctrl_configure_pins+0x6de>
    *p_pin = pin_number & 0x1F;
   22a46:	f00a 0b1f 	and.w	fp, sl, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   22a4a:	ea5f 135a 	movs.w	r3, sl, lsr #5
   22a4e:	d118      	bne.n	22a82 <pinctrl_configure_pins+0x6fa>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   22a50:	2301      	movs	r3, #1
   22a52:	fa03 f30b 	lsl.w	r3, r3, fp
    p_reg->OUTSET = set_mask;
   22a56:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   22a5a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   22a5e:	e7c5      	b.n	229ec <pinctrl_configure_pins+0x664>
            mask = P0_FEATURE_PINS_PRESENT;
   22a60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   22a64:	e7e9      	b.n	22a3a <pinctrl_configure_pins+0x6b2>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   22a66:	f8df b044 	ldr.w	fp, [pc, #68]	; 22aac <pinctrl_configure_pins+0x724>
   22a6a:	f240 2247 	movw	r2, #583	; 0x247
   22a6e:	4659      	mov	r1, fp
   22a70:	480f      	ldr	r0, [pc, #60]	; (22ab0 <pinctrl_configure_pins+0x728>)
   22a72:	f008 fb0c 	bl	2b08e <assert_print>
   22a76:	f240 2147 	movw	r1, #583	; 0x247
   22a7a:	4658      	mov	r0, fp
   22a7c:	f008 fb00 	bl	2b080 <assert_post_action>
   22a80:	e7e1      	b.n	22a46 <pinctrl_configure_pins+0x6be>
            NRFX_ASSERT(0);
   22a82:	f8df a028 	ldr.w	sl, [pc, #40]	; 22aac <pinctrl_configure_pins+0x724>
   22a86:	f44f 7213 	mov.w	r2, #588	; 0x24c
   22a8a:	4651      	mov	r1, sl
   22a8c:	4808      	ldr	r0, [pc, #32]	; (22ab0 <pinctrl_configure_pins+0x728>)
   22a8e:	f008 fafe 	bl	2b08e <assert_print>
   22a92:	f44f 7113 	mov.w	r1, #588	; 0x24c
   22a96:	4650      	mov	r0, sl
   22a98:	f008 faf2 	bl	2b080 <assert_post_action>
   22a9c:	e7d8      	b.n	22a50 <pinctrl_configure_pins+0x6c8>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
   22a9e:	2000      	movs	r0, #0
   22aa0:	e001      	b.n	22aa6 <pinctrl_configure_pins+0x71e>
		switch (NRF_GET_FUN(pins[i])) {
   22aa2:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   22aa6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22aaa:	bf00      	nop
   22aac:	00034634 	.word	0x00034634
   22ab0:	000318f8 	.word	0x000318f8

00022ab4 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   22ab4:	b508      	push	{r3, lr}
   22ab6:	4602      	mov	r2, r0
   22ab8:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   22aba:	4802      	ldr	r0, [pc, #8]	; (22ac4 <multithreading_lock_acquire+0x10>)
   22abc:	f003 fb56 	bl	2616c <z_impl_k_mutex_lock>
	return k_mutex_lock(&mpsl_lock, timeout);
}
   22ac0:	bd08      	pop	{r3, pc}
   22ac2:	bf00      	nop
   22ac4:	200009b0 	.word	0x200009b0

00022ac8 <multithreading_lock_release>:

void multithreading_lock_release(void)
{
   22ac8:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
   22aca:	4802      	ldr	r0, [pc, #8]	; (22ad4 <multithreading_lock_release+0xc>)
   22acc:	f003 fc44 	bl	26358 <z_impl_k_mutex_unlock>
	k_mutex_unlock(&mpsl_lock);
}
   22ad0:	bd08      	pop	{r3, pc}
   22ad2:	bf00      	nop
   22ad4:	200009b0 	.word	0x200009b0

00022ad8 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   22ad8:	b508      	push	{r3, lr}
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   22ada:	2145      	movs	r1, #69	; 0x45
   22adc:	4802      	ldr	r0, [pc, #8]	; (22ae8 <k_sys_fatal_error_handler+0x10>)
   22ade:	f008 fae5 	bl	2b0ac <z_log_minimal_printk>
		sys_arch_reboot(0);
   22ae2:	2000      	movs	r0, #0
   22ae4:	f7f3 fdcc 	bl	16680 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   22ae8:	000349e4 	.word	0x000349e4

00022aec <sdc_assertion_handler>:
	bt_ctlr_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_BT_CTLR_ASSERT_HANDLER) */
void sdc_assertion_handler(const char *const file, const uint32_t line)
{
   22aec:	b508      	push	{r3, lr}
   22aee:	4602      	mov	r2, r0
   22af0:	460b      	mov	r3, r1
	BT_ERR("SoftDevice Controller ASSERT: %s, %d", file, line);
   22af2:	2145      	movs	r1, #69	; 0x45
   22af4:	4804      	ldr	r0, [pc, #16]	; (22b08 <sdc_assertion_handler+0x1c>)
   22af6:	f008 fad9 	bl	2b0ac <z_log_minimal_printk>
	k_oops();
   22afa:	4040      	eors	r0, r0
   22afc:	f380 8811 	msr	BASEPRI, r0
   22b00:	f04f 0003 	mov.w	r0, #3
   22b04:	df02      	svc	2
}
   22b06:	bd08      	pop	{r3, pc}
   22b08:	00034a08 	.word	0x00034a08

00022b0c <event_packet_process>:
		return false;
	}
}

static void event_packet_process(uint8_t *hci_buf)
{
   22b0c:	b570      	push	{r4, r5, r6, lr}
   22b0e:	4604      	mov	r4, r0
	bool discardable = event_packet_is_discardable(hci_buf);
   22b10:	f00c ffeb 	bl	2faea <event_packet_is_discardable>
   22b14:	4603      	mov	r3, r0
	struct bt_hci_evt_hdr *hdr = (void *)hci_buf;
	struct net_buf *evt_buf;

	if (hdr->evt == BT_HCI_EVT_LE_META_EVENT) {
   22b16:	7820      	ldrb	r0, [r4, #0]
		       opcode, cs->status);
	} else {
		BT_DBG("Event (0x%02x) len %u", hdr->evt, hdr->len);
	}

	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   22b18:	461d      	mov	r5, r3
   22b1a:	b183      	cbz	r3, 22b3e <event_packet_process+0x32>
   22b1c:	2200      	movs	r2, #0
   22b1e:	2300      	movs	r3, #0
   22b20:	4629      	mov	r1, r5
   22b22:	f7f4 f83f 	bl	16ba4 <bt_buf_get_evt>
				 discardable ? K_NO_WAIT : K_FOREVER);

	if (!evt_buf) {
   22b26:	4606      	mov	r6, r0
   22b28:	b170      	cbz	r0, 22b48 <event_packet_process+0x3c>

		BT_ERR("No event buffer available");
		return;
	}

	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   22b2a:	7862      	ldrb	r2, [r4, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   22b2c:	3202      	adds	r2, #2
   22b2e:	4621      	mov	r1, r4
   22b30:	3008      	adds	r0, #8
   22b32:	f00c fb25 	bl	2f180 <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   22b36:	4630      	mov	r0, r6
   22b38:	f7f5 fbf8 	bl	1832c <bt_recv>
}
   22b3c:	bd70      	pop	{r4, r5, r6, pc}
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   22b3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   22b42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   22b46:	e7eb      	b.n	22b20 <event_packet_process+0x14>
		if (discardable) {
   22b48:	2d00      	cmp	r5, #0
   22b4a:	d1f7      	bne.n	22b3c <event_packet_process+0x30>
		BT_ERR("No event buffer available");
   22b4c:	2145      	movs	r1, #69	; 0x45
   22b4e:	4802      	ldr	r0, [pc, #8]	; (22b58 <event_packet_process+0x4c>)
   22b50:	f008 faac 	bl	2b0ac <z_log_minimal_printk>
		return;
   22b54:	e7f2      	b.n	22b3c <event_packet_process+0x30>
   22b56:	bf00      	nop
   22b58:	00034a34 	.word	0x00034a34

00022b5c <data_packet_process>:
{
   22b5c:	b538      	push	{r3, r4, r5, lr}
   22b5e:	4604      	mov	r4, r0
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   22b60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   22b64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   22b68:	2003      	movs	r0, #3
   22b6a:	f7f3 ffd7 	bl	16b1c <bt_buf_get_rx>
	if (!data_buf) {
   22b6e:	b150      	cbz	r0, 22b86 <data_packet_process+0x2a>
   22b70:	4605      	mov	r5, r0
	len = sys_le16_to_cpu(hdr->len);
   22b72:	8862      	ldrh	r2, [r4, #2]
   22b74:	3204      	adds	r2, #4
   22b76:	4621      	mov	r1, r4
   22b78:	3008      	adds	r0, #8
   22b7a:	f00c fb01 	bl	2f180 <net_buf_simple_add_mem>
	bt_recv(data_buf);
   22b7e:	4628      	mov	r0, r5
   22b80:	f7f5 fbd4 	bl	1832c <bt_recv>
}
   22b84:	bd38      	pop	{r3, r4, r5, pc}
		BT_ERR("No data buffer available");
   22b86:	2145      	movs	r1, #69	; 0x45
   22b88:	4801      	ldr	r0, [pc, #4]	; (22b90 <data_packet_process+0x34>)
   22b8a:	f008 fa8f 	bl	2b0ac <z_log_minimal_printk>
		return;
   22b8e:	e7f9      	b.n	22b84 <data_packet_process+0x28>
   22b90:	00034a54 	.word	0x00034a54

00022b94 <fetch_and_process_hci_msg>:
	return true;
}


static bool fetch_and_process_hci_msg(uint8_t *p_hci_buffer)
{
   22b94:	b530      	push	{r4, r5, lr}
   22b96:	b083      	sub	sp, #12
   22b98:	4604      	mov	r4, r0
	int errcode;
	sdc_hci_msg_type_t msg_type;

	errcode = MULTITHREADING_LOCK_ACQUIRE();
   22b9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22b9e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   22ba2:	f7ff ff87 	bl	22ab4 <multithreading_lock_acquire>
	if (!errcode) {
   22ba6:	4605      	mov	r5, r0
   22ba8:	b158      	cbz	r0, 22bc2 <fetch_and_process_hci_msg+0x2e>
		errcode = hci_internal_msg_get(p_hci_buffer, &msg_type);
		MULTITHREADING_LOCK_RELEASE();
	}

	if (errcode) {
   22baa:	bb35      	cbnz	r5, 22bfa <fetch_and_process_hci_msg+0x66>
		return false;
	}

	if (msg_type == SDC_HCI_MSG_TYPE_EVT) {
   22bac:	f89d 3007 	ldrb.w	r3, [sp, #7]
   22bb0:	2b04      	cmp	r3, #4
   22bb2:	d00f      	beq.n	22bd4 <fetch_and_process_hci_msg+0x40>
		event_packet_process(p_hci_buffer);
	} else if (msg_type == SDC_HCI_MSG_TYPE_DATA) {
   22bb4:	2b02      	cmp	r3, #2
   22bb6:	d112      	bne.n	22bde <fetch_and_process_hci_msg+0x4a>
		data_packet_process(p_hci_buffer);
   22bb8:	4620      	mov	r0, r4
   22bba:	f7ff ffcf 	bl	22b5c <data_packet_process>
	} else {
		__ASSERT(false, "sdc_hci_msg_type_t has changed. This if-else needs a new branch");
		return false;
	}

	return true;
   22bbe:	2001      	movs	r0, #1
   22bc0:	e01c      	b.n	22bfc <fetch_and_process_hci_msg+0x68>
		errcode = hci_internal_msg_get(p_hci_buffer, &msg_type);
   22bc2:	f10d 0107 	add.w	r1, sp, #7
   22bc6:	4620      	mov	r0, r4
   22bc8:	f000 f9e4 	bl	22f94 <hci_internal_msg_get>
   22bcc:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   22bce:	f7ff ff7b 	bl	22ac8 <multithreading_lock_release>
   22bd2:	e7ea      	b.n	22baa <fetch_and_process_hci_msg+0x16>
		event_packet_process(p_hci_buffer);
   22bd4:	4620      	mov	r0, r4
   22bd6:	f7ff ff99 	bl	22b0c <event_packet_process>
	return true;
   22bda:	2001      	movs	r0, #1
   22bdc:	e00e      	b.n	22bfc <fetch_and_process_hci_msg+0x68>
		__ASSERT(false, "sdc_hci_msg_type_t has changed. This if-else needs a new branch");
   22bde:	4c08      	ldr	r4, [pc, #32]	; (22c00 <fetch_and_process_hci_msg+0x6c>)
   22be0:	f240 128f 	movw	r2, #399	; 0x18f
   22be4:	4621      	mov	r1, r4
   22be6:	4807      	ldr	r0, [pc, #28]	; (22c04 <fetch_and_process_hci_msg+0x70>)
   22be8:	f008 fa51 	bl	2b08e <assert_print>
   22bec:	f240 118f 	movw	r1, #399	; 0x18f
   22bf0:	4620      	mov	r0, r4
   22bf2:	f008 fa45 	bl	2b080 <assert_post_action>
		return false;
   22bf6:	2000      	movs	r0, #0
   22bf8:	e000      	b.n	22bfc <fetch_and_process_hci_msg+0x68>
		return false;
   22bfa:	2000      	movs	r0, #0
}
   22bfc:	b003      	add	sp, #12
   22bfe:	bd30      	pop	{r4, r5, pc}
   22c00:	00034a74 	.word	0x00034a74
   22c04:	000318f8 	.word	0x000318f8

00022c08 <rand_prio_low_vector_get_blocking>:
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
	return ret >= 0 ? ret : 0;
}

static void rand_prio_low_vector_get_blocking(uint8_t *p_buff, uint8_t length)
{
   22c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22c0a:	4604      	mov	r4, r0
	int err = entropy_get_entropy(entropy_source, p_buff, length);
   22c0c:	460d      	mov	r5, r1

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
	const struct entropy_driver_api *api =
   22c0e:	4b11      	ldr	r3, [pc, #68]	; (22c54 <rand_prio_low_vector_get_blocking+0x4c>)
   22c10:	689e      	ldr	r6, [r3, #8]
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
   22c12:	6833      	ldr	r3, [r6, #0]
   22c14:	b133      	cbz	r3, 22c24 <rand_prio_low_vector_get_blocking+0x1c>
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   22c16:	6833      	ldr	r3, [r6, #0]
   22c18:	462a      	mov	r2, r5
   22c1a:	4621      	mov	r1, r4
   22c1c:	480d      	ldr	r0, [pc, #52]	; (22c54 <rand_prio_low_vector_get_blocking+0x4c>)
   22c1e:	4798      	blx	r3

	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
   22c20:	b958      	cbnz	r0, 22c3a <rand_prio_low_vector_get_blocking+0x32>
	(void) err;
}
   22c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT(api->get_entropy != NULL,
   22c24:	4f0c      	ldr	r7, [pc, #48]	; (22c58 <rand_prio_low_vector_get_blocking+0x50>)
   22c26:	224b      	movs	r2, #75	; 0x4b
   22c28:	4639      	mov	r1, r7
   22c2a:	480c      	ldr	r0, [pc, #48]	; (22c5c <rand_prio_low_vector_get_blocking+0x54>)
   22c2c:	f008 fa2f 	bl	2b08e <assert_print>
   22c30:	214b      	movs	r1, #75	; 0x4b
   22c32:	4638      	mov	r0, r7
   22c34:	f008 fa24 	bl	2b080 <assert_post_action>
   22c38:	e7ed      	b.n	22c16 <rand_prio_low_vector_get_blocking+0xe>
	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
   22c3a:	4c09      	ldr	r4, [pc, #36]	; (22c60 <rand_prio_low_vector_get_blocking+0x58>)
   22c3c:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
   22c40:	4621      	mov	r1, r4
   22c42:	4806      	ldr	r0, [pc, #24]	; (22c5c <rand_prio_low_vector_get_blocking+0x54>)
   22c44:	f008 fa23 	bl	2b08e <assert_print>
   22c48:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
   22c4c:	4620      	mov	r0, r4
   22c4e:	f008 fa17 	bl	2b080 <assert_post_action>
}
   22c52:	e7e6      	b.n	22c22 <rand_prio_low_vector_get_blocking+0x1a>
   22c54:	000310c4 	.word	0x000310c4
   22c58:	00034ab0 	.word	0x00034ab0
   22c5c:	000318f8 	.word	0x000318f8
   22c60:	00034a74 	.word	0x00034a74

00022c64 <hci_driver_receive_process>:
{
   22c64:	b570      	push	{r4, r5, r6, lr}
	received_evt = fetch_and_process_hci_evt(&hci_buf[0]);
   22c66:	4d0a      	ldr	r5, [pc, #40]	; (22c90 <hci_driver_receive_process+0x2c>)
   22c68:	4628      	mov	r0, r5
   22c6a:	f00c ff53 	bl	2fb14 <fetch_and_process_hci_evt>
   22c6e:	4604      	mov	r4, r0
		received_data = fetch_and_process_acl_data(&hci_buf[0]);
   22c70:	4628      	mov	r0, r5
   22c72:	f00c ff68 	bl	2fb46 <fetch_and_process_acl_data>
   22c76:	4606      	mov	r6, r0
	received_msg = fetch_and_process_hci_msg(&hci_buf[0]);
   22c78:	4628      	mov	r0, r5
   22c7a:	f7ff ff8b 	bl	22b94 <fetch_and_process_hci_msg>
	if (received_evt || received_data || received_msg) {
   22c7e:	b90c      	cbnz	r4, 22c84 <hci_driver_receive_process+0x20>
   22c80:	b906      	cbnz	r6, 22c84 <hci_driver_receive_process+0x20>
   22c82:	b118      	cbz	r0, 22c8c <hci_driver_receive_process+0x28>
 *
 * @return N/A
 */
static inline int mpsl_work_submit(struct k_work *work)
{
	return k_work_submit_to_queue(&mpsl_work_q, work);
   22c84:	4903      	ldr	r1, [pc, #12]	; (22c94 <hci_driver_receive_process+0x30>)
   22c86:	4804      	ldr	r0, [pc, #16]	; (22c98 <hci_driver_receive_process+0x34>)
   22c88:	f00d ff1f 	bl	30aca <k_work_submit_to_queue>
}
   22c8c:	bd70      	pop	{r4, r5, r6, pc}
   22c8e:	bf00      	nop
   22c90:	20002910 	.word	0x20002910
   22c94:	2000295c 	.word	0x2000295c
   22c98:	20001e10 	.word	0x20001e10

00022c9c <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   22c9c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   22c9e:	4803      	ldr	r0, [pc, #12]	; (22cac <hci_driver_init+0x10>)
   22ca0:	f7f5 fb82 	bl	183a8 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
   22ca4:	4802      	ldr	r0, [pc, #8]	; (22cb0 <hci_driver_init+0x14>)
   22ca6:	f7e2 fc11 	bl	54cc <sdc_init>
	return err;
}
   22caa:	bd08      	pop	{r3, pc}
   22cac:	00034bb8 	.word	0x00034bb8
   22cb0:	00022aed 	.word	0x00022aed

00022cb4 <acl_handle>:
{
   22cb4:	b538      	push	{r3, r4, r5, lr}
   22cb6:	4604      	mov	r4, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   22cb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22cbc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   22cc0:	f7ff fef8 	bl	22ab4 <multithreading_lock_acquire>
	if (!errcode) {
   22cc4:	4605      	mov	r5, r0
   22cc6:	b108      	cbz	r0, 22ccc <acl_handle+0x18>
}
   22cc8:	4628      	mov	r0, r5
   22cca:	bd38      	pop	{r3, r4, r5, pc}
		errcode = sdc_hci_data_put(acl->data);
   22ccc:	68a0      	ldr	r0, [r4, #8]
   22cce:	f7eb f9bb 	bl	e048 <sdc_hci_data_put>
   22cd2:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   22cd4:	f7ff fef8 	bl	22ac8 <multithreading_lock_release>
		if (errcode) {
   22cd8:	2d00      	cmp	r5, #0
   22cda:	d0f5      	beq.n	22cc8 <acl_handle+0x14>
   22cdc:	4902      	ldr	r1, [pc, #8]	; (22ce8 <acl_handle+0x34>)
   22cde:	4803      	ldr	r0, [pc, #12]	; (22cec <acl_handle+0x38>)
   22ce0:	f00d fef3 	bl	30aca <k_work_submit_to_queue>
}
   22ce4:	e7f0      	b.n	22cc8 <acl_handle+0x14>
   22ce6:	bf00      	nop
   22ce8:	2000295c 	.word	0x2000295c
   22cec:	20001e10 	.word	0x20001e10

00022cf0 <cmd_handle>:
{
   22cf0:	b538      	push	{r3, r4, r5, lr}
   22cf2:	4605      	mov	r5, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   22cf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22cf8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   22cfc:	f7ff feda 	bl	22ab4 <multithreading_lock_acquire>
	if (!errcode) {
   22d00:	4604      	mov	r4, r0
   22d02:	b110      	cbz	r0, 22d0a <cmd_handle+0x1a>
	if (errcode) {
   22d04:	b144      	cbz	r4, 22d18 <cmd_handle+0x28>
}
   22d06:	4620      	mov	r0, r4
   22d08:	bd38      	pop	{r3, r4, r5, pc}
		errcode = hci_internal_cmd_put(cmd->data);
   22d0a:	68a8      	ldr	r0, [r5, #8]
   22d0c:	f000 f91e 	bl	22f4c <hci_internal_cmd_put>
   22d10:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   22d12:	f7ff fed9 	bl	22ac8 <multithreading_lock_release>
   22d16:	e7f5      	b.n	22d04 <cmd_handle+0x14>
   22d18:	4902      	ldr	r1, [pc, #8]	; (22d24 <cmd_handle+0x34>)
   22d1a:	4803      	ldr	r0, [pc, #12]	; (22d28 <cmd_handle+0x38>)
   22d1c:	f00d fed5 	bl	30aca <k_work_submit_to_queue>
	return 0;
   22d20:	e7f1      	b.n	22d06 <cmd_handle+0x16>
   22d22:	bf00      	nop
   22d24:	2000295c 	.word	0x2000295c
   22d28:	20001e10 	.word	0x20001e10

00022d2c <rand_prio_high_vector_get>:
{
   22d2c:	b538      	push	{r3, r4, r5, lr}
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
   22d2e:	4b0f      	ldr	r3, [pc, #60]	; (22d6c <rand_prio_high_vector_get+0x40>)
   22d30:	689b      	ldr	r3, [r3, #8]
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   22d32:	685c      	ldr	r4, [r3, #4]
   22d34:	b154      	cbz	r4, 22d4c <rand_prio_high_vector_get+0x20>
   22d36:	460a      	mov	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   22d38:	2300      	movs	r3, #0
   22d3a:	4601      	mov	r1, r0
   22d3c:	480b      	ldr	r0, [pc, #44]	; (22d6c <rand_prio_high_vector_get+0x40>)
   22d3e:	47a0      	blx	r4
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
   22d40:	1e04      	subs	r4, r0, #0
   22d42:	db05      	blt.n	22d50 <rand_prio_high_vector_get+0x24>
	return ret >= 0 ? ret : 0;
   22d44:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
}
   22d48:	b2c0      	uxtb	r0, r0
   22d4a:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   22d4c:	f06f 0485 	mvn.w	r4, #133	; 0x85
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
   22d50:	4d07      	ldr	r5, [pc, #28]	; (22d70 <rand_prio_high_vector_get+0x44>)
   22d52:	f44f 72e3 	mov.w	r2, #454	; 0x1c6
   22d56:	4629      	mov	r1, r5
   22d58:	4806      	ldr	r0, [pc, #24]	; (22d74 <rand_prio_high_vector_get+0x48>)
   22d5a:	f008 f998 	bl	2b08e <assert_print>
   22d5e:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
   22d62:	4628      	mov	r0, r5
   22d64:	f008 f98c 	bl	2b080 <assert_post_action>
   22d68:	e7ec      	b.n	22d44 <rand_prio_high_vector_get+0x18>
   22d6a:	bf00      	nop
   22d6c:	000310c4 	.word	0x000310c4
   22d70:	00034a74 	.word	0x00034a74
   22d74:	000318f8 	.word	0x000318f8

00022d78 <rand_prio_low_vector_get>:
{
   22d78:	b538      	push	{r3, r4, r5, lr}
	const struct entropy_driver_api *api =
   22d7a:	4b0f      	ldr	r3, [pc, #60]	; (22db8 <rand_prio_low_vector_get+0x40>)
   22d7c:	689b      	ldr	r3, [r3, #8]
	if (unlikely(!api->get_entropy_isr)) {
   22d7e:	685c      	ldr	r4, [r3, #4]
   22d80:	b154      	cbz	r4, 22d98 <rand_prio_low_vector_get+0x20>
   22d82:	460a      	mov	r2, r1
	return api->get_entropy_isr(dev, buffer, length, flags);
   22d84:	2300      	movs	r3, #0
   22d86:	4601      	mov	r1, r0
   22d88:	480b      	ldr	r0, [pc, #44]	; (22db8 <rand_prio_low_vector_get+0x40>)
   22d8a:	47a0      	blx	r4
	__ASSERT(ret >= 0, "The entropy source returned an error in the low priority context");
   22d8c:	1e04      	subs	r4, r0, #0
   22d8e:	db05      	blt.n	22d9c <rand_prio_low_vector_get+0x24>
	return ret >= 0 ? ret : 0;
   22d90:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
}
   22d94:	b2c0      	uxtb	r0, r0
   22d96:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   22d98:	f06f 0485 	mvn.w	r4, #133	; 0x85
	__ASSERT(ret >= 0, "The entropy source returned an error in the low priority context");
   22d9c:	4d07      	ldr	r5, [pc, #28]	; (22dbc <rand_prio_low_vector_get+0x44>)
   22d9e:	f44f 72df 	mov.w	r2, #446	; 0x1be
   22da2:	4629      	mov	r1, r5
   22da4:	4806      	ldr	r0, [pc, #24]	; (22dc0 <rand_prio_low_vector_get+0x48>)
   22da6:	f008 f972 	bl	2b08e <assert_print>
   22daa:	f44f 71df 	mov.w	r1, #446	; 0x1be
   22dae:	4628      	mov	r0, r5
   22db0:	f008 f966 	bl	2b080 <assert_post_action>
   22db4:	e7ec      	b.n	22d90 <rand_prio_low_vector_get+0x18>
   22db6:	bf00      	nop
   22db8:	000310c4 	.word	0x000310c4
   22dbc:	00034a74 	.word	0x00034a74
   22dc0:	000318f8 	.word	0x000318f8

00022dc4 <configure_memory_usage>:
{
   22dc4:	b500      	push	{lr}
   22dc6:	b083      	sub	sp, #12
	cfg.central_count.count = SDC_CENTRAL_COUNT;
   22dc8:	2000      	movs	r0, #0
   22dca:	f88d 0004 	strb.w	r0, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   22dce:	aa01      	add	r2, sp, #4
   22dd0:	2101      	movs	r1, #1
   22dd2:	f7e2 faed 	bl	53b0 <sdc_cfg_set>
	if (required_memory < 0) {
   22dd6:	2800      	cmp	r0, #0
   22dd8:	db3d      	blt.n	22e56 <configure_memory_usage+0x92>
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   22dda:	2301      	movs	r3, #1
   22ddc:	f88d 3004 	strb.w	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   22de0:	aa01      	add	r2, sp, #4
   22de2:	2102      	movs	r1, #2
   22de4:	2000      	movs	r0, #0
   22de6:	f7e2 fae3 	bl	53b0 <sdc_cfg_set>
	if (required_memory < 0) {
   22dea:	2800      	cmp	r0, #0
   22dec:	db33      	blt.n	22e56 <configure_memory_usage+0x92>
	cfg.buffer_cfg.rx_packet_size = MAX_RX_PACKET_SIZE;
   22dee:	231b      	movs	r3, #27
   22df0:	f88d 3005 	strb.w	r3, [sp, #5]
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   22df4:	f88d 3004 	strb.w	r3, [sp, #4]
	cfg.buffer_cfg.rx_packet_count = CONFIG_BT_CTLR_SDC_RX_PACKET_COUNT;
   22df8:	2302      	movs	r3, #2
   22dfa:	f88d 3007 	strb.w	r3, [sp, #7]
	cfg.buffer_cfg.tx_packet_count = CONFIG_BT_CTLR_SDC_TX_PACKET_COUNT;
   22dfe:	2103      	movs	r1, #3
   22e00:	f88d 1006 	strb.w	r1, [sp, #6]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   22e04:	aa01      	add	r2, sp, #4
   22e06:	2000      	movs	r0, #0
   22e08:	f7e2 fad2 	bl	53b0 <sdc_cfg_set>
	if (required_memory < 0) {
   22e0c:	2800      	cmp	r0, #0
   22e0e:	db22      	blt.n	22e56 <configure_memory_usage+0x92>
	cfg.event_length.event_length_us =
   22e10:	f641 534c 	movw	r3, #7500	; 0x1d4c
   22e14:	9301      	str	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   22e16:	aa01      	add	r2, sp, #4
   22e18:	2104      	movs	r1, #4
   22e1a:	2000      	movs	r0, #0
   22e1c:	f7e2 fac8 	bl	53b0 <sdc_cfg_set>
	if (required_memory < 0) {
   22e20:	2800      	cmp	r0, #0
   22e22:	db18      	blt.n	22e56 <configure_memory_usage+0x92>
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   22e24:	2301      	movs	r3, #1
   22e26:	f88d 3004 	strb.w	r3, [sp, #4]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   22e2a:	aa01      	add	r2, sp, #4
   22e2c:	2105      	movs	r1, #5
   22e2e:	2000      	movs	r0, #0
   22e30:	f7e2 fabe 	bl	53b0 <sdc_cfg_set>
	if (required_memory < 0) {
   22e34:	2800      	cmp	r0, #0
   22e36:	db0e      	blt.n	22e56 <configure_memory_usage+0x92>
		cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   22e38:	231f      	movs	r3, #31
   22e3a:	f8ad 3004 	strh.w	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   22e3e:	aa01      	add	r2, sp, #4
   22e40:	2107      	movs	r1, #7
   22e42:	2000      	movs	r0, #0
   22e44:	f7e2 fab4 	bl	53b0 <sdc_cfg_set>
		if (required_memory < 0) {
   22e48:	2800      	cmp	r0, #0
   22e4a:	db04      	blt.n	22e56 <configure_memory_usage+0x92>
	if (required_memory > sizeof(sdc_mempool)) {
   22e4c:	f240 7314 	movw	r3, #1812	; 0x714
   22e50:	4298      	cmp	r0, r3
   22e52:	d803      	bhi.n	22e5c <configure_memory_usage+0x98>
	return 0;
   22e54:	2000      	movs	r0, #0
}
   22e56:	b003      	add	sp, #12
   22e58:	f85d fb04 	ldr.w	pc, [sp], #4
		BT_ERR("Allocated memory too low: %u < %u",
   22e5c:	4603      	mov	r3, r0
   22e5e:	f240 7214 	movw	r2, #1812	; 0x714
   22e62:	2145      	movs	r1, #69	; 0x45
   22e64:	4805      	ldr	r0, [pc, #20]	; (22e7c <configure_memory_usage+0xb8>)
   22e66:	f008 f921 	bl	2b0ac <z_log_minimal_printk>
		k_panic();
   22e6a:	4040      	eors	r0, r0
   22e6c:	f380 8811 	msr	BASEPRI, r0
   22e70:	f04f 0004 	mov.w	r0, #4
   22e74:	df02      	svc	2
		return -ENOMEM;
   22e76:	f06f 000b 	mvn.w	r0, #11
   22e7a:	e7ec      	b.n	22e56 <configure_memory_usage+0x92>
   22e7c:	00034ae4 	.word	0x00034ae4

00022e80 <hci_driver_open>:
{
   22e80:	b530      	push	{r4, r5, lr}
   22e82:	b089      	sub	sp, #36	; 0x24
		hci_ecdh_init();
   22e84:	f000 face 	bl	23424 <hci_ecdh_init>
	sdc_build_revision_get(build_revision);
   22e88:	a803      	add	r0, sp, #12
   22e8a:	f7e2 fa83 	bl	5394 <sdc_build_revision_get>
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   22e8e:	4a25      	ldr	r2, [pc, #148]	; (22f24 <hci_driver_open+0xa4>)
   22e90:	2149      	movs	r1, #73	; 0x49
   22e92:	4825      	ldr	r0, [pc, #148]	; (22f28 <hci_driver_open+0xa8>)
   22e94:	f008 f90a 	bl	2b0ac <z_log_minimal_printk>
   22e98:	2214      	movs	r2, #20
   22e9a:	a903      	add	r1, sp, #12
   22e9c:	2003      	movs	r0, #3
   22e9e:	f7f1 f9d7 	bl	14250 <z_log_minimal_hexdump_print>
	err = configure_supported_features();
   22ea2:	f00c fe88 	bl	2fbb6 <configure_supported_features>
	if (err) {
   22ea6:	4604      	mov	r4, r0
   22ea8:	b110      	cbz	r0, 22eb0 <hci_driver_open+0x30>
}
   22eaa:	4620      	mov	r0, r4
   22eac:	b009      	add	sp, #36	; 0x24
   22eae:	bd30      	pop	{r4, r5, pc}
	err = configure_memory_usage();
   22eb0:	f7ff ff88 	bl	22dc4 <configure_memory_usage>
	if (err) {
   22eb4:	4604      	mov	r4, r0
   22eb6:	2800      	cmp	r0, #0
   22eb8:	d1f7      	bne.n	22eaa <hci_driver_open+0x2a>
   22eba:	481c      	ldr	r0, [pc, #112]	; (22f2c <hci_driver_open+0xac>)
   22ebc:	f00d fcee 	bl	3089c <z_device_is_ready>
	if (!device_is_ready(entropy_source)) {
   22ec0:	b1c8      	cbz	r0, 22ef6 <hci_driver_open+0x76>
	sdc_rand_source_t rand_functions = {
   22ec2:	4a1b      	ldr	r2, [pc, #108]	; (22f30 <hci_driver_open+0xb0>)
   22ec4:	466b      	mov	r3, sp
   22ec6:	ca07      	ldmia	r2, {r0, r1, r2}
   22ec8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   22ecc:	4618      	mov	r0, r3
   22ece:	f7e2 fc0f 	bl	56f0 <sdc_rand_source_register>
	if (err) {
   22ed2:	4604      	mov	r4, r0
   22ed4:	b9b0      	cbnz	r0, 22f04 <hci_driver_open+0x84>
	k_work_init(&receive_work, receive_work_handler);
   22ed6:	4917      	ldr	r1, [pc, #92]	; (22f34 <hci_driver_open+0xb4>)
   22ed8:	4817      	ldr	r0, [pc, #92]	; (22f38 <hci_driver_open+0xb8>)
   22eda:	f003 ff4d 	bl	26d78 <k_work_init>
	err = MULTITHREADING_LOCK_ACQUIRE();
   22ede:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22ee2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   22ee6:	f7ff fde5 	bl	22ab4 <multithreading_lock_acquire>
	if (!err) {
   22eea:	4605      	mov	r5, r0
   22eec:	b190      	cbz	r0, 22f14 <hci_driver_open+0x94>
	if (err < 0) {
   22eee:	2d00      	cmp	r5, #0
   22ef0:	dadb      	bge.n	22eaa <hci_driver_open+0x2a>
		return err;
   22ef2:	462c      	mov	r4, r5
   22ef4:	e7d9      	b.n	22eaa <hci_driver_open+0x2a>
		BT_ERR("Entropy source device not ready");
   22ef6:	2145      	movs	r1, #69	; 0x45
   22ef8:	4810      	ldr	r0, [pc, #64]	; (22f3c <hci_driver_open+0xbc>)
   22efa:	f008 f8d7 	bl	2b0ac <z_log_minimal_printk>
		return -ENODEV;
   22efe:	f06f 0412 	mvn.w	r4, #18
   22f02:	e7d2      	b.n	22eaa <hci_driver_open+0x2a>
		BT_ERR("Failed to register rand source (%d)", err);
   22f04:	4602      	mov	r2, r0
   22f06:	2145      	movs	r1, #69	; 0x45
   22f08:	480d      	ldr	r0, [pc, #52]	; (22f40 <hci_driver_open+0xc0>)
   22f0a:	f008 f8cf 	bl	2b0ac <z_log_minimal_printk>
		return -EINVAL;
   22f0e:	f06f 0415 	mvn.w	r4, #21
   22f12:	e7ca      	b.n	22eaa <hci_driver_open+0x2a>
		err = sdc_enable(hci_driver_receive_process, sdc_mempool);
   22f14:	490b      	ldr	r1, [pc, #44]	; (22f44 <hci_driver_open+0xc4>)
   22f16:	480c      	ldr	r0, [pc, #48]	; (22f48 <hci_driver_open+0xc8>)
   22f18:	f7e2 fab0 	bl	547c <sdc_enable>
   22f1c:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   22f1e:	f7ff fdd3 	bl	22ac8 <multithreading_lock_release>
   22f22:	e7e4      	b.n	22eee <hci_driver_open+0x6e>
   22f24:	00034b0c 	.word	0x00034b0c
   22f28:	00034b34 	.word	0x00034b34
   22f2c:	000310c4 	.word	0x000310c4
   22f30:	00031570 	.word	0x00031570
   22f34:	0002fb79 	.word	0x0002fb79
   22f38:	2000295c 	.word	0x2000295c
   22f3c:	00034b3c 	.word	0x00034b3c
   22f40:	00034b64 	.word	0x00034b64
   22f44:	2000296c 	.word	0x2000296c
   22f48:	00022c65 	.word	0x00022c65

00022f4c <hci_internal_cmd_put>:

int hci_internal_cmd_put(uint8_t *cmd_in)
{
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   22f4c:	4b07      	ldr	r3, [pc, #28]	; (22f6c <hci_internal_cmd_put+0x20>)
   22f4e:	781b      	ldrb	r3, [r3, #0]
   22f50:	b943      	cbnz	r3, 22f64 <hci_internal_cmd_put+0x18>
{
   22f52:	b510      	push	{r4, lr}
		> HCI_CMD_PACKET_MAX_SIZE) {
		return -EINVAL;
	}

	if (!IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT)) {
		cmd_put(cmd_in, &cmd_complete_or_status.raw_event[0]);
   22f54:	4c05      	ldr	r4, [pc, #20]	; (22f6c <hci_internal_cmd_put+0x20>)
   22f56:	1c61      	adds	r1, r4, #1
   22f58:	f00d f9bf 	bl	302da <cmd_put>
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   22f5c:	2301      	movs	r3, #1
   22f5e:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   22f60:	2000      	movs	r0, #0
}
   22f62:	bd10      	pop	{r4, pc}
		return -NRF_EPERM;
   22f64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   22f68:	4770      	bx	lr
   22f6a:	bf00      	nop
   22f6c:	20003080 	.word	0x20003080

00022f70 <hci_internal_evt_get>:

int hci_internal_evt_get(uint8_t *evt_out)
{
   22f70:	b510      	push	{r4, lr}
	if (cmd_complete_or_status.occurred) {
   22f72:	4b07      	ldr	r3, [pc, #28]	; (22f90 <hci_internal_evt_get+0x20>)
   22f74:	781b      	ldrb	r3, [r3, #0]
   22f76:	b143      	cbz	r3, 22f8a <hci_internal_evt_get+0x1a>
		struct bt_hci_evt_hdr *evt_hdr = (void *)&cmd_complete_or_status.raw_event[0];

		memcpy(evt_out,
   22f78:	4c05      	ldr	r4, [pc, #20]	; (22f90 <hci_internal_evt_get+0x20>)
   22f7a:	78a2      	ldrb	r2, [r4, #2]
   22f7c:	3202      	adds	r2, #2
   22f7e:	1c61      	adds	r1, r4, #1
   22f80:	f00d feca 	bl	30d18 <memcpy>
		       &cmd_complete_or_status.raw_event[0],
		       evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
		cmd_complete_or_status.occurred = false;
   22f84:	2000      	movs	r0, #0
   22f86:	7020      	strb	r0, [r4, #0]

		return 0;
	}

	return sdc_hci_evt_get(evt_out);
}
   22f88:	bd10      	pop	{r4, pc}
	return sdc_hci_evt_get(evt_out);
   22f8a:	f7eb f868 	bl	e05e <sdc_hci_evt_get>
   22f8e:	e7fb      	b.n	22f88 <hci_internal_evt_get+0x18>
   22f90:	20003080 	.word	0x20003080

00022f94 <hci_internal_msg_get>:

int hci_internal_msg_get(uint8_t *msg_out, sdc_hci_msg_type_t *msg_type_out)
{
   22f94:	b538      	push	{r3, r4, r5, lr}
   22f96:	460c      	mov	r4, r1
	if (cmd_complete_or_status.occurred) {
   22f98:	4b08      	ldr	r3, [pc, #32]	; (22fbc <hci_internal_msg_get+0x28>)
   22f9a:	781b      	ldrb	r3, [r3, #0]
   22f9c:	b153      	cbz	r3, 22fb4 <hci_internal_msg_get+0x20>
		struct bt_hci_evt_hdr *evt_hdr = (void *)&cmd_complete_or_status.raw_event[0];

		memcpy(msg_out,
   22f9e:	4d07      	ldr	r5, [pc, #28]	; (22fbc <hci_internal_msg_get+0x28>)
   22fa0:	78aa      	ldrb	r2, [r5, #2]
   22fa2:	3202      	adds	r2, #2
   22fa4:	1c69      	adds	r1, r5, #1
   22fa6:	f00d feb7 	bl	30d18 <memcpy>
					 &cmd_complete_or_status.raw_event[0],
					 evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
		cmd_complete_or_status.occurred = false;
   22faa:	2000      	movs	r0, #0
   22fac:	7028      	strb	r0, [r5, #0]

		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   22fae:	2304      	movs	r3, #4
   22fb0:	7023      	strb	r3, [r4, #0]

		return 0;
	}

	return sdc_hci_get(msg_out, msg_type_out);
}
   22fb2:	bd38      	pop	{r3, r4, r5, pc}
	return sdc_hci_get(msg_out, msg_type_out);
   22fb4:	f7eb f860 	bl	e078 <sdc_hci_get>
   22fb8:	e7fb      	b.n	22fb2 <hci_internal_msg_get+0x1e>
   22fba:	bf00      	nop
   22fbc:	20003080 	.word	0x20003080

00022fc0 <bt_rand>:
#define BT_ECB_BLOCK_SIZE 16

static const struct device *dev = DEVICE_DT_GET(DT_NODELABEL(rng));

int bt_rand(void *buf, size_t len)
{
   22fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22fc2:	4606      	mov	r6, r0
   22fc4:	460c      	mov	r4, r1
   22fc6:	4810      	ldr	r0, [pc, #64]	; (23008 <bt_rand+0x48>)
   22fc8:	f00d fc68 	bl	3089c <z_device_is_ready>
	if (unlikely(!device_is_ready(dev))) {
   22fcc:	f080 0301 	eor.w	r3, r0, #1
   22fd0:	f013 0fff 	tst.w	r3, #255	; 0xff
   22fd4:	d115      	bne.n	23002 <bt_rand+0x42>
		return -ENODEV;
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   22fd6:	b2a4      	uxth	r4, r4
	const struct entropy_driver_api *api =
   22fd8:	4b0b      	ldr	r3, [pc, #44]	; (23008 <bt_rand+0x48>)
   22fda:	689d      	ldr	r5, [r3, #8]
	__ASSERT(api->get_entropy != NULL,
   22fdc:	682b      	ldr	r3, [r5, #0]
   22fde:	b12b      	cbz	r3, 22fec <bt_rand+0x2c>
	return api->get_entropy(dev, buffer, length);
   22fe0:	682b      	ldr	r3, [r5, #0]
   22fe2:	4622      	mov	r2, r4
   22fe4:	4631      	mov	r1, r6
   22fe6:	4808      	ldr	r0, [pc, #32]	; (23008 <bt_rand+0x48>)
   22fe8:	4798      	blx	r3
}
   22fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT(api->get_entropy != NULL,
   22fec:	4f07      	ldr	r7, [pc, #28]	; (2300c <bt_rand+0x4c>)
   22fee:	224b      	movs	r2, #75	; 0x4b
   22ff0:	4639      	mov	r1, r7
   22ff2:	4807      	ldr	r0, [pc, #28]	; (23010 <bt_rand+0x50>)
   22ff4:	f008 f84b 	bl	2b08e <assert_print>
   22ff8:	214b      	movs	r1, #75	; 0x4b
   22ffa:	4638      	mov	r0, r7
   22ffc:	f008 f840 	bl	2b080 <assert_post_action>
   23000:	e7ee      	b.n	22fe0 <bt_rand+0x20>
		return -ENODEV;
   23002:	f06f 0012 	mvn.w	r0, #18
   23006:	e7f0      	b.n	22fea <bt_rand+0x2a>
   23008:	000310c4 	.word	0x000310c4
   2300c:	00034ab0 	.word	0x00034ab0
   23010:	000318f8 	.word	0x000318f8

00023014 <bt_encrypt_le>:

int bt_encrypt_le(const uint8_t key[BT_ECB_BLOCK_SIZE],
		  const uint8_t plaintext[BT_ECB_BLOCK_SIZE],
		  uint8_t enc_data[BT_ECB_BLOCK_SIZE])
{
   23014:	b5f0      	push	{r4, r5, r6, r7, lr}
   23016:	b08d      	sub	sp, #52	; 0x34
   23018:	4605      	mov	r5, r0
   2301a:	460c      	mov	r4, r1
   2301c:	4616      	mov	r6, r2
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   2301e:	ab08      	add	r3, sp, #32
   23020:	4298      	cmp	r0, r3
   23022:	d204      	bcs.n	2302e <bt_encrypt_le+0x1a>
   23024:	f100 0310 	add.w	r3, r0, #16
   23028:	aa08      	add	r2, sp, #32
   2302a:	4293      	cmp	r3, r2
   2302c:	d911      	bls.n	23052 <bt_encrypt_le+0x3e>
   2302e:	ab08      	add	r3, sp, #32
   23030:	429d      	cmp	r5, r3
   23032:	d902      	bls.n	2303a <bt_encrypt_le+0x26>
   23034:	ab0c      	add	r3, sp, #48	; 0x30
   23036:	429d      	cmp	r5, r3
   23038:	d20b      	bcs.n	23052 <bt_encrypt_le+0x3e>
   2303a:	4f3c      	ldr	r7, [pc, #240]	; (2312c <bt_encrypt_le+0x118>)
   2303c:	f240 2217 	movw	r2, #535	; 0x217
   23040:	4639      	mov	r1, r7
   23042:	483b      	ldr	r0, [pc, #236]	; (23130 <bt_encrypt_le+0x11c>)
   23044:	f008 f823 	bl	2b08e <assert_print>
   23048:	f240 2117 	movw	r1, #535	; 0x217
   2304c:	4638      	mov	r0, r7
   2304e:	f008 f817 	bl	2b080 <assert_post_action>
	psrc += length - 1;
   23052:	f105 000f 	add.w	r0, r5, #15
	uint8_t *pdst = (uint8_t *)dst;
   23056:	ab08      	add	r3, sp, #32
	for (; length > 0; length--) {
   23058:	2210      	movs	r2, #16
   2305a:	e004      	b.n	23066 <bt_encrypt_le+0x52>
		*pdst++ = *psrc--;
   2305c:	f810 1901 	ldrb.w	r1, [r0], #-1
   23060:	f803 1b01 	strb.w	r1, [r3], #1
	for (; length > 0; length--) {
   23064:	3a01      	subs	r2, #1
   23066:	2a00      	cmp	r2, #0
   23068:	d1f8      	bne.n	2305c <bt_encrypt_le+0x48>
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   2306a:	ab04      	add	r3, sp, #16
   2306c:	429c      	cmp	r4, r3
   2306e:	d204      	bcs.n	2307a <bt_encrypt_le+0x66>
   23070:	f104 0310 	add.w	r3, r4, #16
   23074:	aa04      	add	r2, sp, #16
   23076:	4293      	cmp	r3, r2
   23078:	d911      	bls.n	2309e <bt_encrypt_le+0x8a>
   2307a:	ab04      	add	r3, sp, #16
   2307c:	429c      	cmp	r4, r3
   2307e:	d902      	bls.n	23086 <bt_encrypt_le+0x72>
   23080:	ab08      	add	r3, sp, #32
   23082:	429c      	cmp	r4, r3
   23084:	d20b      	bcs.n	2309e <bt_encrypt_le+0x8a>
   23086:	4d29      	ldr	r5, [pc, #164]	; (2312c <bt_encrypt_le+0x118>)
   23088:	f240 2217 	movw	r2, #535	; 0x217
   2308c:	4629      	mov	r1, r5
   2308e:	4828      	ldr	r0, [pc, #160]	; (23130 <bt_encrypt_le+0x11c>)
   23090:	f007 fffd 	bl	2b08e <assert_print>
   23094:	f240 2117 	movw	r1, #535	; 0x217
   23098:	4628      	mov	r0, r5
   2309a:	f007 fff1 	bl	2b080 <assert_post_action>
	psrc += length - 1;
   2309e:	f104 010f 	add.w	r1, r4, #15
	uint8_t *pdst = (uint8_t *)dst;
   230a2:	ab04      	add	r3, sp, #16
	for (; length > 0; length--) {
   230a4:	2210      	movs	r2, #16
   230a6:	e004      	b.n	230b2 <bt_encrypt_le+0x9e>
		*pdst++ = *psrc--;
   230a8:	f811 0901 	ldrb.w	r0, [r1], #-1
   230ac:	f803 0b01 	strb.w	r0, [r3], #1
	for (; length > 0; length--) {
   230b0:	3a01      	subs	r2, #1
   230b2:	2a00      	cmp	r2, #0
   230b4:	d1f8      	bne.n	230a8 <bt_encrypt_le+0x94>
	BT_HEXDUMP_DBG(plaintext, BT_ECB_BLOCK_SIZE, "plaintext");

	sys_memcpy_swap(key_le, key, BT_ECB_BLOCK_SIZE);
	sys_memcpy_swap(plaintext_le, plaintext, BT_ECB_BLOCK_SIZE);

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   230b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   230ba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   230be:	f7ff fcf9 	bl	22ab4 <multithreading_lock_acquire>

	if (!errcode) {
   230c2:	4604      	mov	r4, r0
   230c4:	b118      	cbz	r0, 230ce <bt_encrypt_le+0xba>
		errcode = sdc_soc_ecb_block_encrypt(key_le, plaintext_le, enc_data_le);
		MULTITHREADING_LOCK_RELEASE();
	}

	if (!errcode) {
   230c6:	b15c      	cbz	r4, 230e0 <bt_encrypt_le+0xcc>

		BT_HEXDUMP_DBG(enc_data, BT_ECB_BLOCK_SIZE, "enc_data");
	}

	return errcode;
}
   230c8:	4620      	mov	r0, r4
   230ca:	b00d      	add	sp, #52	; 0x34
   230cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		errcode = sdc_soc_ecb_block_encrypt(key_le, plaintext_le, enc_data_le);
   230ce:	466a      	mov	r2, sp
   230d0:	a904      	add	r1, sp, #16
   230d2:	a808      	add	r0, sp, #32
   230d4:	f7ea fd2c 	bl	db30 <sdc_soc_ecb_block_encrypt>
   230d8:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   230da:	f7ff fcf5 	bl	22ac8 <multithreading_lock_release>
   230de:	e7f2      	b.n	230c6 <bt_encrypt_le+0xb2>
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   230e0:	466b      	mov	r3, sp
   230e2:	429e      	cmp	r6, r3
   230e4:	d902      	bls.n	230ec <bt_encrypt_le+0xd8>
   230e6:	ab04      	add	r3, sp, #16
   230e8:	429e      	cmp	r6, r3
   230ea:	d213      	bcs.n	23114 <bt_encrypt_le+0x100>
   230ec:	466b      	mov	r3, sp
   230ee:	429e      	cmp	r6, r3
   230f0:	d204      	bcs.n	230fc <bt_encrypt_le+0xe8>
   230f2:	f106 0310 	add.w	r3, r6, #16
   230f6:	466a      	mov	r2, sp
   230f8:	4293      	cmp	r3, r2
   230fa:	d90b      	bls.n	23114 <bt_encrypt_le+0x100>
   230fc:	4d0b      	ldr	r5, [pc, #44]	; (2312c <bt_encrypt_le+0x118>)
   230fe:	f240 2217 	movw	r2, #535	; 0x217
   23102:	4629      	mov	r1, r5
   23104:	480a      	ldr	r0, [pc, #40]	; (23130 <bt_encrypt_le+0x11c>)
   23106:	f007 ffc2 	bl	2b08e <assert_print>
   2310a:	f240 2117 	movw	r1, #535	; 0x217
   2310e:	4628      	mov	r0, r5
   23110:	f007 ffb6 	bl	2b080 <assert_post_action>
	psrc += length - 1;
   23114:	f10d 030f 	add.w	r3, sp, #15
	for (; length > 0; length--) {
   23118:	2210      	movs	r2, #16
   2311a:	2a00      	cmp	r2, #0
   2311c:	d0d4      	beq.n	230c8 <bt_encrypt_le+0xb4>
		*pdst++ = *psrc--;
   2311e:	f813 1901 	ldrb.w	r1, [r3], #-1
   23122:	f806 1b01 	strb.w	r1, [r6], #1
	for (; length > 0; length--) {
   23126:	3a01      	subs	r2, #1
   23128:	e7f7      	b.n	2311a <bt_encrypt_le+0x106>
   2312a:	bf00      	nop
   2312c:	00033eac 	.word	0x00033eac
   23130:	000318f8 	.word	0x000318f8

00023134 <public_key>:

#if defined(CONFIG_BT_CTLR_ECDH_LIB_OBERON)
#include <ocrypto_ecdh_p256.h>

static uint8_t public_key(void)
{
   23134:	b508      	push	{r3, lr}
	int err;

	do {
		err = bt_rand(ecdh.private_key_be, 32);
   23136:	2120      	movs	r1, #32
   23138:	480a      	ldr	r0, [pc, #40]	; (23164 <public_key+0x30>)
   2313a:	f7ff ff41 	bl	22fc0 <bt_rand>
		if (err) {
   2313e:	b970      	cbnz	r0, 2315e <public_key+0x2a>
			return BT_HCI_ERR_UNSPECIFIED;
		}

		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   23140:	2220      	movs	r2, #32
   23142:	4909      	ldr	r1, [pc, #36]	; (23168 <public_key+0x34>)
   23144:	4807      	ldr	r0, [pc, #28]	; (23164 <public_key+0x30>)
   23146:	f00d fdd7 	bl	30cf8 <memcmp>
   2314a:	2800      	cmp	r0, #0
   2314c:	d0f3      	beq.n	23136 <public_key+0x2>
			err = -1;
			continue;
		}

		err = ocrypto_ecdh_p256_public_key(ecdh.public_key_be,
   2314e:	4905      	ldr	r1, [pc, #20]	; (23164 <public_key+0x30>)
   23150:	f101 0020 	add.w	r0, r1, #32
   23154:	f006 fc62 	bl	29a1c <ocrypto_ecdh_p256_public_key>
						   ecdh.private_key_be);
	} while (err);
   23158:	2800      	cmp	r0, #0
   2315a:	d1ec      	bne.n	23136 <public_key+0x2>
   2315c:	e000      	b.n	23160 <public_key+0x2c>
			return BT_HCI_ERR_UNSPECIFIED;
   2315e:	201f      	movs	r0, #31

	return 0;
}
   23160:	bd08      	pop	{r3, pc}
   23162:	bf00      	nop
   23164:	200030cc 	.word	0x200030cc
   23168:	00034c48 	.word	0x00034c48

0002316c <common_secret>:

static uint8_t common_secret(bool use_debug)
{
   2316c:	b508      	push	{r3, lr}
	int err;

	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   2316e:	b140      	cbz	r0, 23182 <common_secret+0x16>
   23170:	4908      	ldr	r1, [pc, #32]	; (23194 <common_secret+0x28>)
   23172:	4809      	ldr	r0, [pc, #36]	; (23198 <common_secret+0x2c>)
   23174:	4602      	mov	r2, r0
   23176:	f006 fc65 	bl	29a44 <ocrypto_ecdh_p256_common_secret>
					      use_debug ? debug_private_key_be :
							  ecdh.private_key_be,
					      ecdh.public_key_be);
	/* -1: public or private key was not a valid key */
	if (err) {
   2317a:	4602      	mov	r2, r0
   2317c:	b918      	cbnz	r0, 23186 <common_secret+0x1a>
		 */
		BT_ERR("public key is not valid (err %d)", err);
		return BT_HCI_ERR_INVALID_PARAM;
	}

	return 0;
   2317e:	2000      	movs	r0, #0
}
   23180:	bd08      	pop	{r3, pc}
	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   23182:	4906      	ldr	r1, [pc, #24]	; (2319c <common_secret+0x30>)
   23184:	e7f5      	b.n	23172 <common_secret+0x6>
		BT_ERR("public key is not valid (err %d)", err);
   23186:	2145      	movs	r1, #69	; 0x45
   23188:	4805      	ldr	r0, [pc, #20]	; (231a0 <common_secret+0x34>)
   2318a:	f007 ff8f 	bl	2b0ac <z_log_minimal_printk>
		return BT_HCI_ERR_INVALID_PARAM;
   2318e:	2012      	movs	r0, #18
   23190:	e7f6      	b.n	23180 <common_secret+0x14>
   23192:	bf00      	nop
   23194:	00034c48 	.word	0x00034c48
   23198:	200030ec 	.word	0x200030ec
   2319c:	200030cc 	.word	0x200030cc
   231a0:	00034bf0 	.word	0x00034bf0

000231a4 <work_submit>:

static struct k_thread ecdh_thread_data;
static K_KERNEL_STACK_DEFINE(ecdh_thread_stack, CONFIG_BT_CTLR_ECDH_STACK_SIZE);

static void work_submit(void)
{
   231a4:	b508      	push	{r3, lr}
	return z_impl_k_poll_signal_raise(sig, result);
   231a6:	2100      	movs	r1, #0
   231a8:	4801      	ldr	r0, [pc, #4]	; (231b0 <work_submit+0xc>)
   231aa:	f006 fb97 	bl	298dc <z_impl_k_poll_signal_raise>
	k_poll_signal_raise(&ecdh_signal, 0);
}
   231ae:	bd08      	pop	{r3, pc}
   231b0:	2000312c 	.word	0x2000312c

000231b4 <ecdh_p256_common_secret>:
{
   231b4:	b570      	push	{r4, r5, r6, lr}
	status = common_secret(use_debug);
   231b6:	f7ff ffd9 	bl	2316c <common_secret>
   231ba:	4604      	mov	r4, r0
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   231bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   231c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   231c4:	2001      	movs	r0, #1
   231c6:	f7f3 fca9 	bl	16b1c <bt_buf_get_rx>
   231ca:	4605      	mov	r5, r0
	return net_buf_simple_add(&buf->b, len);
   231cc:	f100 0608 	add.w	r6, r0, #8
   231d0:	2102      	movs	r1, #2
   231d2:	4630      	mov	r0, r6
   231d4:	f7fd f9ee 	bl	205b4 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   231d8:	233e      	movs	r3, #62	; 0x3e
   231da:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   231dc:	2322      	movs	r3, #34	; 0x22
   231de:	7043      	strb	r3, [r0, #1]
   231e0:	2101      	movs	r1, #1
   231e2:	4630      	mov	r0, r6
   231e4:	f7fd f9e6 	bl	205b4 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   231e8:	2309      	movs	r3, #9
   231ea:	7003      	strb	r3, [r0, #0]
   231ec:	2121      	movs	r1, #33	; 0x21
   231ee:	4630      	mov	r0, r6
   231f0:	f7fd f9e0 	bl	205b4 <net_buf_simple_add>
	evt->status = status;
   231f4:	7004      	strb	r4, [r0, #0]
	if (status) {
   231f6:	b134      	cbz	r4, 23206 <ecdh_p256_common_secret+0x52>
__ssp_bos_icheck3(memset, void *, int)
   231f8:	2220      	movs	r2, #32
   231fa:	21ff      	movs	r1, #255	; 0xff
   231fc:	3001      	adds	r0, #1
   231fe:	f00d fdac 	bl	30d5a <memset>
}
   23202:	4628      	mov	r0, r5
   23204:	bd70      	pop	{r4, r5, r6, pc}
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
   23206:	1c44      	adds	r4, r0, #1
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   23208:	4b13      	ldr	r3, [pc, #76]	; (23258 <ecdh_p256_common_secret+0xa4>)
   2320a:	429c      	cmp	r4, r3
   2320c:	d902      	bls.n	23214 <ecdh_p256_common_secret+0x60>
   2320e:	3320      	adds	r3, #32
   23210:	429c      	cmp	r4, r3
   23212:	d213      	bcs.n	2323c <ecdh_p256_common_secret+0x88>
   23214:	4b10      	ldr	r3, [pc, #64]	; (23258 <ecdh_p256_common_secret+0xa4>)
   23216:	429c      	cmp	r4, r3
   23218:	d204      	bcs.n	23224 <ecdh_p256_common_secret+0x70>
   2321a:	f104 0320 	add.w	r3, r4, #32
   2321e:	4a0e      	ldr	r2, [pc, #56]	; (23258 <ecdh_p256_common_secret+0xa4>)
   23220:	4293      	cmp	r3, r2
   23222:	d90b      	bls.n	2323c <ecdh_p256_common_secret+0x88>
   23224:	4e0d      	ldr	r6, [pc, #52]	; (2325c <ecdh_p256_common_secret+0xa8>)
   23226:	f240 2217 	movw	r2, #535	; 0x217
   2322a:	4631      	mov	r1, r6
   2322c:	480c      	ldr	r0, [pc, #48]	; (23260 <ecdh_p256_common_secret+0xac>)
   2322e:	f007 ff2e 	bl	2b08e <assert_print>
   23232:	f240 2117 	movw	r1, #535	; 0x217
   23236:	4630      	mov	r0, r6
   23238:	f007 ff22 	bl	2b080 <assert_post_action>
	psrc += length - 1;
   2323c:	4b09      	ldr	r3, [pc, #36]	; (23264 <ecdh_p256_common_secret+0xb0>)
	for (; length > 0; length--) {
   2323e:	2220      	movs	r2, #32
   23240:	e006      	b.n	23250 <ecdh_p256_common_secret+0x9c>
		*pdst++ = *psrc--;
   23242:	4620      	mov	r0, r4
   23244:	f813 1901 	ldrb.w	r1, [r3], #-1
   23248:	f800 1b01 	strb.w	r1, [r0], #1
	for (; length > 0; length--) {
   2324c:	3a01      	subs	r2, #1
		*pdst++ = *psrc--;
   2324e:	4604      	mov	r4, r0
	for (; length > 0; length--) {
   23250:	2a00      	cmp	r2, #0
   23252:	d1f6      	bne.n	23242 <ecdh_p256_common_secret+0x8e>
   23254:	e7d5      	b.n	23202 <ecdh_p256_common_secret+0x4e>
   23256:	bf00      	nop
   23258:	200030ec 	.word	0x200030ec
   2325c:	00033eac 	.word	0x00033eac
   23260:	000318f8 	.word	0x000318f8
   23264:	2000310b 	.word	0x2000310b

00023268 <ecdh_p256_public_key>:
{
   23268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	status = public_key();
   2326a:	f7ff ff63 	bl	23134 <public_key>
   2326e:	4606      	mov	r6, r0
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   23270:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   23274:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   23278:	2001      	movs	r0, #1
   2327a:	f7f3 fc4f 	bl	16b1c <bt_buf_get_rx>
   2327e:	4605      	mov	r5, r0
   23280:	f100 0408 	add.w	r4, r0, #8
   23284:	2102      	movs	r1, #2
   23286:	4620      	mov	r0, r4
   23288:	f7fd f994 	bl	205b4 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   2328c:	233e      	movs	r3, #62	; 0x3e
   2328e:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   23290:	2342      	movs	r3, #66	; 0x42
   23292:	7043      	strb	r3, [r0, #1]
   23294:	2101      	movs	r1, #1
   23296:	4620      	mov	r0, r4
   23298:	f7fd f98c 	bl	205b4 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   2329c:	2308      	movs	r3, #8
   2329e:	7003      	strb	r3, [r0, #0]
   232a0:	2141      	movs	r1, #65	; 0x41
   232a2:	4620      	mov	r0, r4
   232a4:	f7fd f986 	bl	205b4 <net_buf_simple_add>
   232a8:	4604      	mov	r4, r0
	evt->status = status;
   232aa:	7006      	strb	r6, [r0, #0]
	if (status) {
   232ac:	b136      	cbz	r6, 232bc <ecdh_p256_public_key+0x54>
   232ae:	2240      	movs	r2, #64	; 0x40
   232b0:	2100      	movs	r1, #0
   232b2:	3001      	adds	r0, #1
   232b4:	f00d fd51 	bl	30d5a <memset>
}
   232b8:	4628      	mov	r0, r5
   232ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sys_memcpy_swap(&evt->key[0], &ecdh.public_key_be[0], 32);
   232bc:	1c46      	adds	r6, r0, #1
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   232be:	4b27      	ldr	r3, [pc, #156]	; (2335c <ecdh_p256_public_key+0xf4>)
   232c0:	429e      	cmp	r6, r3
   232c2:	d902      	bls.n	232ca <ecdh_p256_public_key+0x62>
   232c4:	3320      	adds	r3, #32
   232c6:	429e      	cmp	r6, r3
   232c8:	d213      	bcs.n	232f2 <ecdh_p256_public_key+0x8a>
   232ca:	4b24      	ldr	r3, [pc, #144]	; (2335c <ecdh_p256_public_key+0xf4>)
   232cc:	429e      	cmp	r6, r3
   232ce:	d204      	bcs.n	232da <ecdh_p256_public_key+0x72>
   232d0:	f106 0320 	add.w	r3, r6, #32
   232d4:	4a21      	ldr	r2, [pc, #132]	; (2335c <ecdh_p256_public_key+0xf4>)
   232d6:	4293      	cmp	r3, r2
   232d8:	d90b      	bls.n	232f2 <ecdh_p256_public_key+0x8a>
   232da:	4f21      	ldr	r7, [pc, #132]	; (23360 <ecdh_p256_public_key+0xf8>)
   232dc:	f240 2217 	movw	r2, #535	; 0x217
   232e0:	4639      	mov	r1, r7
   232e2:	4820      	ldr	r0, [pc, #128]	; (23364 <ecdh_p256_public_key+0xfc>)
   232e4:	f007 fed3 	bl	2b08e <assert_print>
   232e8:	f240 2117 	movw	r1, #535	; 0x217
   232ec:	4638      	mov	r0, r7
   232ee:	f007 fec7 	bl	2b080 <assert_post_action>
	psrc += length - 1;
   232f2:	4b1d      	ldr	r3, [pc, #116]	; (23368 <ecdh_p256_public_key+0x100>)
	for (; length > 0; length--) {
   232f4:	2120      	movs	r1, #32
   232f6:	e006      	b.n	23306 <ecdh_p256_public_key+0x9e>
		*pdst++ = *psrc--;
   232f8:	4632      	mov	r2, r6
   232fa:	f813 0901 	ldrb.w	r0, [r3], #-1
   232fe:	f802 0b01 	strb.w	r0, [r2], #1
	for (; length > 0; length--) {
   23302:	3901      	subs	r1, #1
		*pdst++ = *psrc--;
   23304:	4616      	mov	r6, r2
	for (; length > 0; length--) {
   23306:	2900      	cmp	r1, #0
   23308:	d1f6      	bne.n	232f8 <ecdh_p256_public_key+0x90>
		sys_memcpy_swap(&evt->key[32], &ecdh.public_key_be[32], 32);
   2330a:	3421      	adds	r4, #33	; 0x21
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   2330c:	4b17      	ldr	r3, [pc, #92]	; (2336c <ecdh_p256_public_key+0x104>)
   2330e:	429c      	cmp	r4, r3
   23310:	d902      	bls.n	23318 <ecdh_p256_public_key+0xb0>
   23312:	3320      	adds	r3, #32
   23314:	429c      	cmp	r4, r3
   23316:	d213      	bcs.n	23340 <ecdh_p256_public_key+0xd8>
   23318:	4b14      	ldr	r3, [pc, #80]	; (2336c <ecdh_p256_public_key+0x104>)
   2331a:	429c      	cmp	r4, r3
   2331c:	d204      	bcs.n	23328 <ecdh_p256_public_key+0xc0>
   2331e:	f104 0320 	add.w	r3, r4, #32
   23322:	4a12      	ldr	r2, [pc, #72]	; (2336c <ecdh_p256_public_key+0x104>)
   23324:	4293      	cmp	r3, r2
   23326:	d90b      	bls.n	23340 <ecdh_p256_public_key+0xd8>
   23328:	4e0d      	ldr	r6, [pc, #52]	; (23360 <ecdh_p256_public_key+0xf8>)
   2332a:	f240 2217 	movw	r2, #535	; 0x217
   2332e:	4631      	mov	r1, r6
   23330:	480c      	ldr	r0, [pc, #48]	; (23364 <ecdh_p256_public_key+0xfc>)
   23332:	f007 feac 	bl	2b08e <assert_print>
   23336:	f240 2117 	movw	r1, #535	; 0x217
   2333a:	4630      	mov	r0, r6
   2333c:	f007 fea0 	bl	2b080 <assert_post_action>
	psrc += length - 1;
   23340:	4b0b      	ldr	r3, [pc, #44]	; (23370 <ecdh_p256_public_key+0x108>)
	for (; length > 0; length--) {
   23342:	2120      	movs	r1, #32
   23344:	e006      	b.n	23354 <ecdh_p256_public_key+0xec>
		*pdst++ = *psrc--;
   23346:	4622      	mov	r2, r4
   23348:	f813 0901 	ldrb.w	r0, [r3], #-1
   2334c:	f802 0b01 	strb.w	r0, [r2], #1
	for (; length > 0; length--) {
   23350:	3901      	subs	r1, #1
		*pdst++ = *psrc--;
   23352:	4614      	mov	r4, r2
	for (; length > 0; length--) {
   23354:	2900      	cmp	r1, #0
   23356:	d1f6      	bne.n	23346 <ecdh_p256_public_key+0xde>
   23358:	e7ae      	b.n	232b8 <ecdh_p256_public_key+0x50>
   2335a:	bf00      	nop
   2335c:	200030ec 	.word	0x200030ec
   23360:	00033eac 	.word	0x00033eac
   23364:	000318f8 	.word	0x000318f8
   23368:	2000310b 	.word	0x2000310b
   2336c:	2000310c 	.word	0x2000310c
   23370:	2000312b 	.word	0x2000312b

00023374 <ecdh_cmd_process>:
{
   23374:	b508      	push	{r3, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   23376:	f3bf 8f5b 	dmb	ish
   2337a:	4b15      	ldr	r3, [pc, #84]	; (233d0 <ecdh_cmd_process+0x5c>)
   2337c:	681b      	ldr	r3, [r3, #0]
   2337e:	f3bf 8f5b 	dmb	ish
	switch (atomic_get(&cmd)) {
   23382:	2b02      	cmp	r3, #2
   23384:	d01c      	beq.n	233c0 <ecdh_cmd_process+0x4c>
   23386:	2b04      	cmp	r3, #4
   23388:	d01e      	beq.n	233c8 <ecdh_cmd_process+0x54>
   2338a:	2b01      	cmp	r3, #1
   2338c:	d005      	beq.n	2339a <ecdh_cmd_process+0x26>
		BT_WARN("Unknown command");
   2338e:	2157      	movs	r1, #87	; 0x57
   23390:	4810      	ldr	r0, [pc, #64]	; (233d4 <ecdh_cmd_process+0x60>)
   23392:	f007 fe8b 	bl	2b0ac <z_log_minimal_printk>
		buf = NULL;
   23396:	2000      	movs	r0, #0
		break;
   23398:	e001      	b.n	2339e <ecdh_cmd_process+0x2a>
		buf = ecdh_p256_public_key();
   2339a:	f7ff ff65 	bl	23268 <ecdh_p256_public_key>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2339e:	4b0c      	ldr	r3, [pc, #48]	; (233d0 <ecdh_cmd_process+0x5c>)
   233a0:	2200      	movs	r2, #0
   233a2:	f3bf 8f5b 	dmb	ish
   233a6:	e853 1f00 	ldrex	r1, [r3]
   233aa:	e843 2c00 	strex	ip, r2, [r3]
   233ae:	f1bc 0f00 	cmp.w	ip, #0
   233b2:	d1f8      	bne.n	233a6 <ecdh_cmd_process+0x32>
   233b4:	f3bf 8f5b 	dmb	ish
	if (buf) {
   233b8:	b108      	cbz	r0, 233be <ecdh_cmd_process+0x4a>
		bt_recv(buf);
   233ba:	f7f4 ffb7 	bl	1832c <bt_recv>
}
   233be:	bd08      	pop	{r3, pc}
		buf = ecdh_p256_common_secret(false);
   233c0:	2000      	movs	r0, #0
   233c2:	f7ff fef7 	bl	231b4 <ecdh_p256_common_secret>
		break;
   233c6:	e7ea      	b.n	2339e <ecdh_cmd_process+0x2a>
		buf = ecdh_p256_common_secret(true);
   233c8:	2001      	movs	r0, #1
   233ca:	f7ff fef3 	bl	231b4 <ecdh_p256_common_secret>
		break;
   233ce:	e7e6      	b.n	2339e <ecdh_cmd_process+0x2a>
   233d0:	200030c8 	.word	0x200030c8
   233d4:	00034c18 	.word	0x00034c18

000233d8 <ecdh_thread>:

static void ecdh_thread(void *p1, void *p2, void *p3)
{
   233d8:	b500      	push	{lr}
   233da:	b087      	sub	sp, #28
	struct k_poll_event events[1] = {
   233dc:	2300      	movs	r3, #0
   233de:	9301      	str	r3, [sp, #4]
   233e0:	9302      	str	r3, [sp, #8]
   233e2:	9303      	str	r3, [sp, #12]
   233e4:	9304      	str	r3, [sp, #16]
   233e6:	9305      	str	r3, [sp, #20]
   233e8:	f89d 3011 	ldrb.w	r3, [sp, #17]
   233ec:	2201      	movs	r2, #1
   233ee:	f362 0304 	bfi	r3, r2, #0, #5
   233f2:	f88d 3011 	strb.w	r3, [sp, #17]
   233f6:	4b0a      	ldr	r3, [pc, #40]	; (23420 <ecdh_thread+0x48>)
   233f8:	9305      	str	r3, [sp, #20]
	return z_impl_k_poll(events, num_events, timeout);
   233fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   233fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   23402:	2101      	movs	r1, #1
   23404:	a801      	add	r0, sp, #4
   23406:	f006 f975 	bl	296f4 <z_impl_k_poll>
	z_impl_k_poll_signal_reset(sig);
   2340a:	4805      	ldr	r0, [pc, #20]	; (23420 <ecdh_thread+0x48>)
   2340c:	f00d fc67 	bl	30cde <z_impl_k_poll_signal_reset>

	while (true) {
		k_poll(events, 1, K_FOREVER);

		k_poll_signal_reset(&ecdh_signal);
		events[0].state = K_POLL_STATE_NOT_READY;
   23410:	9b04      	ldr	r3, [sp, #16]
   23412:	f36f 3352 	bfc	r3, #13, #6
   23416:	9304      	str	r3, [sp, #16]

		ecdh_cmd_process();
   23418:	f7ff ffac 	bl	23374 <ecdh_cmd_process>
	while (true) {
   2341c:	e7ed      	b.n	233fa <ecdh_thread+0x22>
   2341e:	bf00      	nop
   23420:	2000312c 	.word	0x2000312c

00023424 <hci_ecdh_init>:
	}
}
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */

void hci_ecdh_init(void)
{
   23424:	b510      	push	{r4, lr}
   23426:	b088      	sub	sp, #32
	z_impl_k_poll_signal_init(sig);
   23428:	480d      	ldr	r0, [pc, #52]	; (23460 <hci_ecdh_init+0x3c>)
   2342a:	f00d fc53 	bl	30cd4 <z_impl_k_poll_signal_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2342e:	4c0d      	ldr	r4, [pc, #52]	; (23464 <hci_ecdh_init+0x40>)
   23430:	2200      	movs	r2, #0
   23432:	2300      	movs	r3, #0
   23434:	e9cd 2306 	strd	r2, r3, [sp, #24]
   23438:	2300      	movs	r3, #0
   2343a:	9304      	str	r3, [sp, #16]
   2343c:	220a      	movs	r2, #10
   2343e:	9203      	str	r2, [sp, #12]
   23440:	9302      	str	r3, [sp, #8]
   23442:	9301      	str	r3, [sp, #4]
   23444:	9300      	str	r3, [sp, #0]
   23446:	4b08      	ldr	r3, [pc, #32]	; (23468 <hci_ecdh_init+0x44>)
   23448:	f44f 7262 	mov.w	r2, #904	; 0x388
   2344c:	4907      	ldr	r1, [pc, #28]	; (2346c <hci_ecdh_init+0x48>)
   2344e:	4620      	mov	r0, r4
   23450:	f002 fd82 	bl	25f58 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   23454:	4906      	ldr	r1, [pc, #24]	; (23470 <hci_ecdh_init+0x4c>)
   23456:	4620      	mov	r0, r4
   23458:	f00d fa69 	bl	3092e <z_impl_k_thread_name_set>
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecdh_thread_data, "BT CTLR ECDH");
#else
	k_work_init(&ecdh_work, ecdh_work_handler);
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}
   2345c:	b008      	add	sp, #32
   2345e:	bd10      	pop	{r4, pc}
   23460:	2000312c 	.word	0x2000312c
   23464:	20001d90 	.word	0x20001d90
   23468:	000233d9 	.word	0x000233d9
   2346c:	20004c40 	.word	0x20004c40
   23470:	00034c30 	.word	0x00034c30

00023474 <hci_cmd_le_read_local_p256_public_key>:

uint8_t hci_cmd_le_read_local_p256_public_key(void)
{
   23474:	b508      	push	{r3, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   23476:	4b0a      	ldr	r3, [pc, #40]	; (234a0 <hci_cmd_le_read_local_p256_public_key+0x2c>)
   23478:	2201      	movs	r2, #1
   2347a:	f3bf 8f5b 	dmb	ish
   2347e:	e853 1f00 	ldrex	r1, [r3]
   23482:	2900      	cmp	r1, #0
   23484:	d103      	bne.n	2348e <hci_cmd_le_read_local_p256_public_key+0x1a>
   23486:	e843 2000 	strex	r0, r2, [r3]
   2348a:	2800      	cmp	r0, #0
   2348c:	d1f7      	bne.n	2347e <hci_cmd_le_read_local_p256_public_key+0xa>
   2348e:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&cmd, 0, GEN_PUBLIC_KEY)) {
   23492:	d103      	bne.n	2349c <hci_cmd_le_read_local_p256_public_key+0x28>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	work_submit();
   23494:	f7ff fe86 	bl	231a4 <work_submit>

	return 0;
   23498:	2000      	movs	r0, #0
}
   2349a:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   2349c:	200c      	movs	r0, #12
   2349e:	e7fc      	b.n	2349a <hci_cmd_le_read_local_p256_public_key+0x26>
   234a0:	200030c8 	.word	0x200030c8

000234a4 <cmd_le_generate_dhkey>:

uint8_t cmd_le_generate_dhkey(uint8_t *key, uint8_t key_type)
{
   234a4:	b538      	push	{r3, r4, r5, lr}
   234a6:	4604      	mov	r4, r0
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   234a8:	b369      	cbz	r1, 23506 <cmd_le_generate_dhkey+0x62>
   234aa:	2204      	movs	r2, #4
   234ac:	4b31      	ldr	r3, [pc, #196]	; (23574 <cmd_le_generate_dhkey+0xd0>)
   234ae:	f3bf 8f5b 	dmb	ish
   234b2:	e853 1f00 	ldrex	r1, [r3]
   234b6:	2900      	cmp	r1, #0
   234b8:	d103      	bne.n	234c2 <cmd_le_generate_dhkey+0x1e>
   234ba:	e843 2000 	strex	r0, r2, [r3]
   234be:	2800      	cmp	r0, #0
   234c0:	d1f7      	bne.n	234b2 <cmd_le_generate_dhkey+0xe>
   234c2:	f3bf 8f5b 	dmb	ish
   234c6:	d152      	bne.n	2356e <cmd_le_generate_dhkey+0xca>
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   234c8:	4b2b      	ldr	r3, [pc, #172]	; (23578 <cmd_le_generate_dhkey+0xd4>)
   234ca:	429c      	cmp	r4, r3
   234cc:	d204      	bcs.n	234d8 <cmd_le_generate_dhkey+0x34>
   234ce:	f104 0320 	add.w	r3, r4, #32
   234d2:	4a29      	ldr	r2, [pc, #164]	; (23578 <cmd_le_generate_dhkey+0xd4>)
   234d4:	4293      	cmp	r3, r2
   234d6:	d911      	bls.n	234fc <cmd_le_generate_dhkey+0x58>
   234d8:	4b27      	ldr	r3, [pc, #156]	; (23578 <cmd_le_generate_dhkey+0xd4>)
   234da:	429c      	cmp	r4, r3
   234dc:	d902      	bls.n	234e4 <cmd_le_generate_dhkey+0x40>
   234de:	3320      	adds	r3, #32
   234e0:	429c      	cmp	r4, r3
   234e2:	d20b      	bcs.n	234fc <cmd_le_generate_dhkey+0x58>
   234e4:	4d25      	ldr	r5, [pc, #148]	; (2357c <cmd_le_generate_dhkey+0xd8>)
   234e6:	f240 2217 	movw	r2, #535	; 0x217
   234ea:	4629      	mov	r1, r5
   234ec:	4824      	ldr	r0, [pc, #144]	; (23580 <cmd_le_generate_dhkey+0xdc>)
   234ee:	f007 fdce 	bl	2b08e <assert_print>
   234f2:	f240 2117 	movw	r1, #535	; 0x217
   234f6:	4628      	mov	r0, r5
   234f8:	f007 fdc2 	bl	2b080 <assert_post_action>
	psrc += length - 1;
   234fc:	f104 021f 	add.w	r2, r4, #31
	uint8_t *pdst = (uint8_t *)dst;
   23500:	4b1d      	ldr	r3, [pc, #116]	; (23578 <cmd_le_generate_dhkey+0xd4>)
	for (; length > 0; length--) {
   23502:	2120      	movs	r1, #32
   23504:	e006      	b.n	23514 <cmd_le_generate_dhkey+0x70>
   23506:	2202      	movs	r2, #2
   23508:	e7d0      	b.n	234ac <cmd_le_generate_dhkey+0x8>
		*pdst++ = *psrc--;
   2350a:	f812 0901 	ldrb.w	r0, [r2], #-1
   2350e:	f803 0b01 	strb.w	r0, [r3], #1
	for (; length > 0; length--) {
   23512:	3901      	subs	r1, #1
   23514:	2900      	cmp	r1, #0
   23516:	d1f8      	bne.n	2350a <cmd_le_generate_dhkey+0x66>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	sys_memcpy_swap(&ecdh.public_key_be[0], &key[0], 32);
	sys_memcpy_swap(&ecdh.public_key_be[32], &key[32], 32);
   23518:	3420      	adds	r4, #32
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   2351a:	4b1a      	ldr	r3, [pc, #104]	; (23584 <cmd_le_generate_dhkey+0xe0>)
   2351c:	429c      	cmp	r4, r3
   2351e:	d204      	bcs.n	2352a <cmd_le_generate_dhkey+0x86>
   23520:	f104 0320 	add.w	r3, r4, #32
   23524:	4a17      	ldr	r2, [pc, #92]	; (23584 <cmd_le_generate_dhkey+0xe0>)
   23526:	4293      	cmp	r3, r2
   23528:	d911      	bls.n	2354e <cmd_le_generate_dhkey+0xaa>
   2352a:	4b16      	ldr	r3, [pc, #88]	; (23584 <cmd_le_generate_dhkey+0xe0>)
   2352c:	429c      	cmp	r4, r3
   2352e:	d902      	bls.n	23536 <cmd_le_generate_dhkey+0x92>
   23530:	3320      	adds	r3, #32
   23532:	429c      	cmp	r4, r3
   23534:	d20b      	bcs.n	2354e <cmd_le_generate_dhkey+0xaa>
   23536:	4d11      	ldr	r5, [pc, #68]	; (2357c <cmd_le_generate_dhkey+0xd8>)
   23538:	f240 2217 	movw	r2, #535	; 0x217
   2353c:	4629      	mov	r1, r5
   2353e:	4810      	ldr	r0, [pc, #64]	; (23580 <cmd_le_generate_dhkey+0xdc>)
   23540:	f007 fda5 	bl	2b08e <assert_print>
   23544:	f240 2117 	movw	r1, #535	; 0x217
   23548:	4628      	mov	r0, r5
   2354a:	f007 fd99 	bl	2b080 <assert_post_action>
	psrc += length - 1;
   2354e:	f104 031f 	add.w	r3, r4, #31
	uint8_t *pdst = (uint8_t *)dst;
   23552:	4a0c      	ldr	r2, [pc, #48]	; (23584 <cmd_le_generate_dhkey+0xe0>)
	for (; length > 0; length--) {
   23554:	2120      	movs	r1, #32
   23556:	e004      	b.n	23562 <cmd_le_generate_dhkey+0xbe>
		*pdst++ = *psrc--;
   23558:	f813 0901 	ldrb.w	r0, [r3], #-1
   2355c:	f802 0b01 	strb.w	r0, [r2], #1
	for (; length > 0; length--) {
   23560:	3901      	subs	r1, #1
   23562:	2900      	cmp	r1, #0
   23564:	d1f8      	bne.n	23558 <cmd_le_generate_dhkey+0xb4>

	work_submit();
   23566:	f7ff fe1d 	bl	231a4 <work_submit>

	return 0;
   2356a:	2000      	movs	r0, #0
}
   2356c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   2356e:	200c      	movs	r0, #12
   23570:	e7fc      	b.n	2356c <cmd_le_generate_dhkey+0xc8>
   23572:	bf00      	nop
   23574:	200030c8 	.word	0x200030c8
   23578:	200030ec 	.word	0x200030ec
   2357c:	00033eac 	.word	0x00033eac
   23580:	000318f8 	.word	0x000318f8
   23584:	2000310c 	.word	0x2000310c

00023588 <mpsl_lib_init>:
	return 0;
#endif
}

static int mpsl_lib_init(const struct device *dev)
{
   23588:	b510      	push	{r4, lr}
   2358a:	b082      	sub	sp, #8
	ARG_UNUSED(dev);
	int err = 0;
	mpsl_clock_lfclk_cfg_t clock_cfg;

	clock_cfg.source = m_config_clock_source_get();
   2358c:	f00c ff0b 	bl	303a6 <m_config_clock_source_get>
   23590:	f88d 0000 	strb.w	r0, [sp]
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   23594:	2332      	movs	r3, #50	; 0x32
   23596:	f8ad 3004 	strh.w	r3, [sp, #4]
	clock_cfg.skip_wait_lfclk_started =
   2359a:	2300      	movs	r3, #0
   2359c:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.rc_ctiv = (CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD * 4 / 1000);
	clock_cfg.rc_temp_ctiv = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP + 1;
	BUILD_ASSERT(CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_TEMP_DIFF == 2,
		     "MPSL always uses a temperature diff threshold of 0.5 degrees");
#else
	clock_cfg.rc_ctiv = 0;
   235a0:	f88d 3001 	strb.w	r3, [sp, #1]
	clock_cfg.rc_temp_ctiv = 0;
   235a4:	f88d 3002 	strb.w	r3, [sp, #2]
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   235a8:	4a10      	ldr	r2, [pc, #64]	; (235ec <mpsl_lib_init+0x64>)
   235aa:	2119      	movs	r1, #25
   235ac:	4668      	mov	r0, sp
   235ae:	f7e1 fd2b 	bl	5008 <mpsl_init>
	if (err) {
   235b2:	4604      	mov	r4, r0
   235b4:	b110      	cbz	r0, 235bc <mpsl_lib_init+0x34>
			   mpsl_rtc0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
			   mpsl_radio_isr_wrapper, IRQ_CONNECT_FLAGS);

	return 0;
}
   235b6:	4620      	mov	r0, r4
   235b8:	b002      	add	sp, #8
   235ba:	bd10      	pop	{r4, pc}
	err = mpsl_timeslot_session_count_set((void *) timeslot_context,
   235bc:	2101      	movs	r1, #1
   235be:	480c      	ldr	r0, [pc, #48]	; (235f0 <mpsl_lib_init+0x68>)
   235c0:	f7e9 ffbe 	bl	d540 <mpsl_timeslot_session_count_set>
	if (err) {
   235c4:	4604      	mov	r4, r0
   235c6:	2800      	cmp	r0, #0
   235c8:	d1f5      	bne.n	235b6 <mpsl_lib_init+0x2e>
	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   235ca:	2201      	movs	r2, #1
   235cc:	2100      	movs	r1, #0
   235ce:	2008      	movs	r0, #8
   235d0:	f7f2 fa12 	bl	159f8 <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   235d4:	2201      	movs	r2, #1
   235d6:	2100      	movs	r1, #0
   235d8:	200b      	movs	r0, #11
   235da:	f7f2 fa0d 	bl	159f8 <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   235de:	2201      	movs	r2, #1
   235e0:	2100      	movs	r1, #0
   235e2:	4610      	mov	r0, r2
   235e4:	f7f2 fa08 	bl	159f8 <z_arm_irq_priority_set>
	return 0;
   235e8:	e7e5      	b.n	235b6 <mpsl_lib_init+0x2e>
   235ea:	bf00      	nop
   235ec:	000235f5 	.word	0x000235f5
   235f0:	2000314c 	.word	0x2000314c

000235f4 <m_assert_handler>:
{
   235f4:	b508      	push	{r3, lr}
   235f6:	4602      	mov	r2, r0
   235f8:	460b      	mov	r3, r1
	LOG_ERR("MPSL ASSERT: %s, %d", file, line);
   235fa:	2145      	movs	r1, #69	; 0x45
   235fc:	4804      	ldr	r0, [pc, #16]	; (23610 <m_assert_handler+0x1c>)
   235fe:	f007 fd55 	bl	2b0ac <z_log_minimal_printk>
	k_oops();
   23602:	4040      	eors	r0, r0
   23604:	f380 8811 	msr	BASEPRI, r0
   23608:	f04f 0003 	mov.w	r0, #3
   2360c:	df02      	svc	2
}
   2360e:	bd08      	pop	{r3, pc}
   23610:	00034c68 	.word	0x00034c68

00023614 <mpsl_low_prio_work_handler>:
{
   23614:	b510      	push	{r4, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   23616:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2361a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2361e:	f7ff fa49 	bl	22ab4 <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
   23622:	b920      	cbnz	r0, 2362e <mpsl_low_prio_work_handler+0x1a>
	mpsl_low_priority_process();
   23624:	f7ea f8a9 	bl	d77a <mpsl_low_priority_process>
	MULTITHREADING_LOCK_RELEASE();
   23628:	f7ff fa4e 	bl	22ac8 <multithreading_lock_release>
}
   2362c:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(errcode == 0);
   2362e:	4c05      	ldr	r4, [pc, #20]	; (23644 <mpsl_low_prio_work_handler+0x30>)
   23630:	2247      	movs	r2, #71	; 0x47
   23632:	4621      	mov	r1, r4
   23634:	4804      	ldr	r0, [pc, #16]	; (23648 <mpsl_low_prio_work_handler+0x34>)
   23636:	f007 fd2a 	bl	2b08e <assert_print>
   2363a:	2147      	movs	r1, #71	; 0x47
   2363c:	4620      	mov	r0, r4
   2363e:	f007 fd1f 	bl	2b080 <assert_post_action>
   23642:	e7ef      	b.n	23624 <mpsl_low_prio_work_handler+0x10>
   23644:	00034c84 	.word	0x00034c84
   23648:	000318f8 	.word	0x000318f8

0002364c <mpsl_low_prio_init>:

static int mpsl_low_prio_init(const struct device *dev)
{
   2364c:	b530      	push	{r4, r5, lr}
   2364e:	b083      	sub	sp, #12
	ARG_UNUSED(dev);

	k_work_queue_start(&mpsl_work_q, mpsl_work_stack,
   23650:	4d0d      	ldr	r5, [pc, #52]	; (23688 <mpsl_low_prio_init+0x3c>)
   23652:	2400      	movs	r4, #0
   23654:	9400      	str	r4, [sp, #0]
   23656:	f06f 0309 	mvn.w	r3, #9
   2365a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   2365e:	490b      	ldr	r1, [pc, #44]	; (2368c <mpsl_low_prio_init+0x40>)
   23660:	4628      	mov	r0, r5
   23662:	f003 fc21 	bl	26ea8 <k_work_queue_start>
   23666:	490a      	ldr	r1, [pc, #40]	; (23690 <mpsl_low_prio_init+0x44>)
   23668:	4628      	mov	r0, r5
   2366a:	f00d f960 	bl	3092e <z_impl_k_thread_name_set>
			   K_THREAD_STACK_SIZEOF(mpsl_work_stack),
			   K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO), NULL);
	k_thread_name_set(&mpsl_work_q.thread, "MPSL Work");
	k_work_init(&mpsl_low_prio_work, mpsl_low_prio_work_handler);
   2366e:	4909      	ldr	r1, [pc, #36]	; (23694 <mpsl_low_prio_init+0x48>)
   23670:	4809      	ldr	r0, [pc, #36]	; (23698 <mpsl_low_prio_init+0x4c>)
   23672:	f003 fb81 	bl	26d78 <k_work_init>

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   23676:	4622      	mov	r2, r4
   23678:	2104      	movs	r1, #4
   2367a:	2019      	movs	r0, #25
   2367c:	f7f2 f9bc 	bl	159f8 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   23680:	4620      	mov	r0, r4
   23682:	b003      	add	sp, #12
   23684:	bd30      	pop	{r4, r5, pc}
   23686:	bf00      	nop
   23688:	20001e10 	.word	0x20001e10
   2368c:	20005040 	.word	0x20005040
   23690:	00034cb4 	.word	0x00034cb4
   23694:	00023615 	.word	0x00023615
   23698:	2000313c 	.word	0x2000313c

0002369c <mpsl_low_prio_irq_handler>:
{
   2369c:	b508      	push	{r3, lr}
	k_work_submit_to_queue(&mpsl_work_q, &mpsl_low_prio_work);
   2369e:	4902      	ldr	r1, [pc, #8]	; (236a8 <mpsl_low_prio_irq_handler+0xc>)
   236a0:	4802      	ldr	r0, [pc, #8]	; (236ac <mpsl_low_prio_irq_handler+0x10>)
   236a2:	f00d fa12 	bl	30aca <k_work_submit_to_queue>
}
   236a6:	bd08      	pop	{r3, pc}
   236a8:	2000313c 	.word	0x2000313c
   236ac:	20001e10 	.word	0x20001e10

000236b0 <mpsl_hfclk_callback>:
#include <mpsl_clock.h>

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
   236b0:	b508      	push	{r3, lr}
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   236b2:	4b02      	ldr	r3, [pc, #8]	; (236bc <mpsl_hfclk_callback+0xc>)
   236b4:	681b      	ldr	r3, [r3, #0]
   236b6:	2000      	movs	r0, #0
   236b8:	4798      	blx	r3
}
   236ba:	bd08      	pop	{r3, pc}
   236bc:	2000317c 	.word	0x2000317c

000236c0 <nrfx_clock_start>:

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   236c0:	b510      	push	{r4, lr}
	switch (domain) {
   236c2:	b128      	cbz	r0, 236d0 <nrfx_clock_start+0x10>
   236c4:	2801      	cmp	r0, #1
   236c6:	d108      	bne.n	236da <nrfx_clock_start+0x1a>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   236c8:	4809      	ldr	r0, [pc, #36]	; (236f0 <nrfx_clock_start+0x30>)
   236ca:	f7e1 fb13 	bl	4cf4 <mpsl_clock_hfclk_request>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   236ce:	bd10      	pop	{r4, pc}
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   236d0:	4b08      	ldr	r3, [pc, #32]	; (236f4 <nrfx_clock_start+0x34>)
   236d2:	681b      	ldr	r3, [r3, #0]
   236d4:	2001      	movs	r0, #1
   236d6:	4798      	blx	r3
		break;
   236d8:	e7f9      	b.n	236ce <nrfx_clock_start+0xe>
		__ASSERT(0, "Not supported");
   236da:	4c07      	ldr	r4, [pc, #28]	; (236f8 <nrfx_clock_start+0x38>)
   236dc:	221c      	movs	r2, #28
   236de:	4621      	mov	r1, r4
   236e0:	4806      	ldr	r0, [pc, #24]	; (236fc <nrfx_clock_start+0x3c>)
   236e2:	f007 fcd4 	bl	2b08e <assert_print>
   236e6:	211c      	movs	r1, #28
   236e8:	4620      	mov	r0, r4
   236ea:	f007 fcc9 	bl	2b080 <assert_post_action>
}
   236ee:	e7ee      	b.n	236ce <nrfx_clock_start+0xe>
   236f0:	000236b1 	.word	0x000236b1
   236f4:	2000317c 	.word	0x2000317c
   236f8:	00034ccc 	.word	0x00034ccc
   236fc:	000318f8 	.word	0x000318f8

00023700 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
	switch (domain) {
   23700:	b180      	cbz	r0, 23724 <nrfx_clock_stop+0x24>
{
   23702:	b510      	push	{r4, lr}
	switch (domain) {
   23704:	2801      	cmp	r0, #1
   23706:	d102      	bne.n	2370e <nrfx_clock_stop+0xe>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_release();
   23708:	f7e1 fae6 	bl	4cd8 <mpsl_clock_hfclk_release>
		/* empty */
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   2370c:	bd10      	pop	{r4, pc}
		__ASSERT(0, "Not supported");
   2370e:	4c06      	ldr	r4, [pc, #24]	; (23728 <nrfx_clock_stop+0x28>)
   23710:	222a      	movs	r2, #42	; 0x2a
   23712:	4621      	mov	r1, r4
   23714:	4805      	ldr	r0, [pc, #20]	; (2372c <nrfx_clock_stop+0x2c>)
   23716:	f007 fcba 	bl	2b08e <assert_print>
   2371a:	212a      	movs	r1, #42	; 0x2a
   2371c:	4620      	mov	r0, r4
   2371e:	f007 fcaf 	bl	2b080 <assert_post_action>
}
   23722:	e7f3      	b.n	2370c <nrfx_clock_stop+0xc>
   23724:	4770      	bx	lr
   23726:	bf00      	nop
   23728:	00034ccc 	.word	0x00034ccc
   2372c:	000318f8 	.word	0x000318f8

00023730 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   23730:	4b01      	ldr	r3, [pc, #4]	; (23738 <nrfx_clock_init+0x8>)
   23732:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   23734:	4801      	ldr	r0, [pc, #4]	; (2373c <nrfx_clock_init+0xc>)
   23736:	4770      	bx	lr
   23738:	2000317c 	.word	0x2000317c
   2373c:	0bad0000 	.word	0x0bad0000

00023740 <get_timeslot_time_us>:
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_timer_task_trigger(NRF_TIMER_Type * p_reg,
                                              nrf_timer_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23740:	4b02      	ldr	r3, [pc, #8]	; (2374c <get_timeslot_time_us+0xc>)
   23742:	2201      	movs	r2, #1
   23744:	641a      	str	r2, [r3, #64]	; 0x40
}

NRF_STATIC_INLINE uint32_t nrf_timer_cc_get(NRF_TIMER_Type const * p_reg,
                                            nrf_timer_cc_channel_t cc_channel)
{
    return (uint32_t)p_reg->CC[cc_channel];
   23746:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
 */
static uint32_t get_timeslot_time_us(void)
{
	nrf_timer_task_trigger(NRF_TIMER0, NRF_TIMER_TASK_CAPTURE0);
	return nrf_timer_cc_get(NRF_TIMER0, NRF_TIMER_CC_CHANNEL0);
}
   2374a:	4770      	bx	lr
   2374c:	40008000 	.word	0x40008000

00023750 <reschedule_next_timeslot>:

static void reschedule_next_timeslot(void)
{
   23750:	b510      	push	{r4, lr}
	_context.timeslot_request.params.earliest.priority =
   23752:	4b0c      	ldr	r3, [pc, #48]	; (23784 <reschedule_next_timeslot+0x34>)
   23754:	2200      	movs	r2, #0
   23756:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		MPSL_TIMESLOT_PRIORITY_HIGH;
	_context.timeslot_request.params.earliest.timeout_us =
   2375a:	4a0b      	ldr	r2, [pc, #44]	; (23788 <reschedule_next_timeslot+0x38>)
   2375c:	631a      	str	r2, [r3, #48]	; 0x30
		MPSL_TIMESLOT_EARLIEST_TIMEOUT_MAX_US;
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   2375e:	f103 0124 	add.w	r1, r3, #36	; 0x24
   23762:	7e18      	ldrb	r0, [r3, #24]
   23764:	f7e9 fe90 	bl	d488 <mpsl_timeslot_request>
					    &_context.timeslot_request);

	__ASSERT_EVAL((void)ret, (void)ret, ret == 0,
   23768:	b900      	cbnz	r0, 2376c <reschedule_next_timeslot+0x1c>
		      "mpsl_timeslot_request failed: %d", ret);
}
   2376a:	bd10      	pop	{r4, pc}
	__ASSERT_EVAL((void)ret, (void)ret, ret == 0,
   2376c:	4c07      	ldr	r4, [pc, #28]	; (2378c <reschedule_next_timeslot+0x3c>)
   2376e:	2248      	movs	r2, #72	; 0x48
   23770:	4621      	mov	r1, r4
   23772:	4807      	ldr	r0, [pc, #28]	; (23790 <reschedule_next_timeslot+0x40>)
   23774:	f007 fc8b 	bl	2b08e <assert_print>
   23778:	2148      	movs	r1, #72	; 0x48
   2377a:	4620      	mov	r0, r4
   2377c:	f007 fc80 	bl	2b080 <assert_post_action>
}
   23780:	e7f3      	b.n	2376a <reschedule_next_timeslot+0x1a>
   23782:	bf00      	nop
   23784:	20003180 	.word	0x20003180
   23788:	0f423fff 	.word	0x0f423fff
   2378c:	00034d0c 	.word	0x00034d0c
   23790:	000318f8 	.word	0x000318f8

00023794 <timeslot_callback>:

static mpsl_timeslot_signal_return_param_t *
timeslot_callback(mpsl_timeslot_session_id_t session_id, uint32_t signal)
{
   23794:	b538      	push	{r3, r4, r5, lr}
   23796:	460c      	mov	r4, r1
	int rc;
	__ASSERT_NO_MSG(session_id == _context.session_id);
   23798:	4b2a      	ldr	r3, [pc, #168]	; (23844 <timeslot_callback+0xb0>)
   2379a:	7e1b      	ldrb	r3, [r3, #24]
   2379c:	4283      	cmp	r3, r0
   2379e:	d110      	bne.n	237c2 <timeslot_callback+0x2e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   237a0:	f3bf 8f5b 	dmb	ish
   237a4:	4b27      	ldr	r3, [pc, #156]	; (23844 <timeslot_callback+0xb0>)
   237a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   237a8:	f3bf 8f5b 	dmb	ish

	if (atomic_get(&_context.timeout_occured)) {
   237ac:	2b00      	cmp	r3, #0
   237ae:	d145      	bne.n	2383c <timeslot_callback+0xa8>
		return NULL;
	}

	switch (signal) {
   237b0:	2c09      	cmp	r4, #9
   237b2:	d837      	bhi.n	23824 <timeslot_callback+0x90>
   237b4:	e8df f004 	tbb	[pc, r4]
   237b8:	36363610 	.word	0x36363610
   237bc:	2d323236 	.word	0x2d323236
   237c0:	4436      	.short	0x4436
	__ASSERT_NO_MSG(session_id == _context.session_id);
   237c2:	4d21      	ldr	r5, [pc, #132]	; (23848 <timeslot_callback+0xb4>)
   237c4:	2250      	movs	r2, #80	; 0x50
   237c6:	4629      	mov	r1, r5
   237c8:	4820      	ldr	r0, [pc, #128]	; (2384c <timeslot_callback+0xb8>)
   237ca:	f007 fc60 	bl	2b08e <assert_print>
   237ce:	2150      	movs	r1, #80	; 0x50
   237d0:	4628      	mov	r0, r5
   237d2:	f007 fc55 	bl	2b080 <assert_post_action>
   237d6:	e7e3      	b.n	237a0 <timeslot_callback+0xc>
	case MPSL_TIMESLOT_SIGNAL_START:
		rc = _context.op_desc->handler(_context.op_desc->context);
   237d8:	4b1a      	ldr	r3, [pc, #104]	; (23844 <timeslot_callback+0xb0>)
   237da:	6a1b      	ldr	r3, [r3, #32]
   237dc:	681a      	ldr	r2, [r3, #0]
   237de:	6858      	ldr	r0, [r3, #4]
   237e0:	4790      	blx	r2
   237e2:	4603      	mov	r3, r0
		if (rc != FLASH_OP_ONGOING) {
   237e4:	2801      	cmp	r0, #1
   237e6:	d005      	beq.n	237f4 <timeslot_callback+0x60>
			_context.status = (rc == FLASH_OP_DONE) ? 0 : rc;
   237e8:	4816      	ldr	r0, [pc, #88]	; (23844 <timeslot_callback+0xb0>)
   237ea:	63c3      	str	r3, [r0, #60]	; 0x3c
			_context.return_param.callback_action =
   237ec:	2302      	movs	r3, #2
   237ee:	f800 3f34 	strb.w	r3, [r0, #52]!
   237f2:	e024      	b.n	2383e <timeslot_callback+0xaa>
				MPSL_TIMESLOT_SIGNAL_ACTION_END;
		} else {
			/* Reset the priority back to normal after a successful
			 * timeslot. */
			_context.timeslot_request.params.earliest.priority =
   237f4:	4813      	ldr	r0, [pc, #76]	; (23844 <timeslot_callback+0xb0>)
   237f6:	2301      	movs	r3, #1
   237f8:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
				MPSL_TIMESLOT_PRIORITY_NORMAL;
			_context.timeslot_request.params.earliest.timeout_us =
   237fc:	f247 5330 	movw	r3, #30000	; 0x7530
   23800:	6303      	str	r3, [r0, #48]	; 0x30
				TIMESLOT_TIMEOUT_PRIORITY_NORMAL_US;

			_context.return_param.callback_action =
   23802:	2303      	movs	r3, #3
   23804:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
				MPSL_TIMESLOT_SIGNAL_ACTION_REQUEST;
			_context.return_param.params.request.p_next =
   23808:	f100 0324 	add.w	r3, r0, #36	; 0x24
   2380c:	6383      	str	r3, [r0, #56]	; 0x38
	default:
		__ASSERT(false, "unexpected signal: %u", signal);
		return NULL;
	}

	return &_context.return_param;
   2380e:	3034      	adds	r0, #52	; 0x34
   23810:	e015      	b.n	2383e <timeslot_callback+0xaa>
	z_impl_k_sem_give(sem);
   23812:	480c      	ldr	r0, [pc, #48]	; (23844 <timeslot_callback+0xb0>)
   23814:	f002 ff8a 	bl	2672c <z_impl_k_sem_give>
		return NULL;
   23818:	2000      	movs	r0, #0
   2381a:	e010      	b.n	2383e <timeslot_callback+0xaa>
		reschedule_next_timeslot();
   2381c:	f7ff ff98 	bl	23750 <reschedule_next_timeslot>
		return NULL;
   23820:	2000      	movs	r0, #0
   23822:	e00c      	b.n	2383e <timeslot_callback+0xaa>
		__ASSERT(false, "unexpected signal: %u", signal);
   23824:	4c08      	ldr	r4, [pc, #32]	; (23848 <timeslot_callback+0xb4>)
   23826:	227c      	movs	r2, #124	; 0x7c
   23828:	4621      	mov	r1, r4
   2382a:	4808      	ldr	r0, [pc, #32]	; (2384c <timeslot_callback+0xb8>)
   2382c:	f007 fc2f 	bl	2b08e <assert_print>
   23830:	217c      	movs	r1, #124	; 0x7c
   23832:	4620      	mov	r0, r4
   23834:	f007 fc24 	bl	2b080 <assert_post_action>
		return NULL;
   23838:	2000      	movs	r0, #0
   2383a:	e000      	b.n	2383e <timeslot_callback+0xaa>
		return NULL;
   2383c:	2000      	movs	r0, #0
}
   2383e:	bd38      	pop	{r3, r4, r5, pc}
	switch (signal) {
   23840:	2000      	movs	r0, #0
   23842:	e7fc      	b.n	2383e <timeslot_callback+0xaa>
   23844:	20003180 	.word	0x20003180
   23848:	00034d0c 	.word	0x00034d0c
   2384c:	000318f8 	.word	0x000318f8

00023850 <nrf_flash_sync_init>:

int nrf_flash_sync_init(void)
{
   23850:	b508      	push	{r3, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   23852:	2201      	movs	r2, #1
   23854:	2100      	movs	r1, #0
   23856:	4802      	ldr	r0, [pc, #8]	; (23860 <nrf_flash_sync_init+0x10>)
   23858:	f00d f8da 	bl	30a10 <z_impl_k_sem_init>
	LOG_DBG("");
	return k_sem_init(&_context.timeout_sem, 0, 1);
}
   2385c:	bd08      	pop	{r3, pc}
   2385e:	bf00      	nop
   23860:	20003180 	.word	0x20003180

00023864 <nrf_flash_sync_set_context>:

void nrf_flash_sync_set_context(uint32_t duration)
{
	LOG_DBG("duration: %u", duration);
	_context.request_length_us = duration;
   23864:	4b01      	ldr	r3, [pc, #4]	; (2386c <nrf_flash_sync_set_context+0x8>)
   23866:	61d8      	str	r0, [r3, #28]
}
   23868:	4770      	bx	lr
   2386a:	bf00      	nop
   2386c:	20003180 	.word	0x20003180

00023870 <nrf_flash_sync_exe>:
{
	return mpsl_is_initialized();
}

int nrf_flash_sync_exe(struct flash_op_desc *op_desc)
{
   23870:	b538      	push	{r3, r4, r5, lr}
   23872:	4605      	mov	r5, r0
	LOG_DBG("");

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   23874:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23878:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2387c:	f7ff f91a 	bl	22ab4 <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
   23880:	2800      	cmp	r0, #0
   23882:	d16b      	bne.n	2395c <nrf_flash_sync_exe+0xec>
	int32_t ret = mpsl_timeslot_session_open(timeslot_callback,
   23884:	4957      	ldr	r1, [pc, #348]	; (239e4 <nrf_flash_sync_exe+0x174>)
   23886:	4858      	ldr	r0, [pc, #352]	; (239e8 <nrf_flash_sync_exe+0x178>)
   23888:	f7de f84e 	bl	1928 <mpsl_timeslot_session_open>
   2388c:	4604      	mov	r4, r0
						 &_context.session_id);
	MULTITHREADING_LOCK_RELEASE();
   2388e:	f7ff f91b 	bl	22ac8 <multithreading_lock_release>

	if (ret < 0) {
   23892:	2c00      	cmp	r4, #0
   23894:	db6d      	blt.n	23972 <nrf_flash_sync_exe+0x102>
		LOG_ERR("mpsl_timeslot_session_open failed: %d", ret);
		return -ENOMEM;
	}

	mpsl_timeslot_request_t *req = &_context.timeslot_request;
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
   23896:	4b55      	ldr	r3, [pc, #340]	; (239ec <nrf_flash_sync_exe+0x17c>)
   23898:	2100      	movs	r1, #0
   2389a:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
	req->params.earliest.hfclk = MPSL_TIMESLOT_HFCLK_CFG_NO_GUARANTEE;
   2389e:	2201      	movs	r2, #1
   238a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	req->params.earliest.priority = MPSL_TIMESLOT_PRIORITY_NORMAL;
   238a4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	req->params.earliest.length_us =
		_context.request_length_us + TIMESLOT_LENGTH_SLACK_US;
   238a8:	69da      	ldr	r2, [r3, #28]
   238aa:	3264      	adds	r2, #100	; 0x64
	req->params.earliest.length_us =
   238ac:	62da      	str	r2, [r3, #44]	; 0x2c
	req->params.earliest.timeout_us = TIMESLOT_TIMEOUT_PRIORITY_NORMAL_US;
   238ae:	f247 5230 	movw	r2, #30000	; 0x7530
   238b2:	631a      	str	r2, [r3, #48]	; 0x30

	_context.op_desc = op_desc;
   238b4:	621d      	str	r5, [r3, #32]
	_context.status = -ETIMEDOUT;
   238b6:	f06f 0273 	mvn.w	r2, #115	; 0x73
   238ba:	63da      	str	r2, [r3, #60]	; 0x3c
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   238bc:	f103 0240 	add.w	r2, r3, #64	; 0x40
   238c0:	f3bf 8f5b 	dmb	ish
   238c4:	e852 0f00 	ldrex	r0, [r2]
   238c8:	e842 1400 	strex	r4, r1, [r2]
   238cc:	2c00      	cmp	r4, #0
   238ce:	d1f9      	bne.n	238c4 <nrf_flash_sync_exe+0x54>
   238d0:	f3bf 8f5b 	dmb	ish
	return sem->count;
   238d4:	689b      	ldr	r3, [r3, #8]
	atomic_clear(&_context.timeout_occured);

	__ASSERT_NO_MSG(k_sem_count_get(&_context.timeout_sem) == 0);
   238d6:	2b00      	cmp	r3, #0
   238d8:	d153      	bne.n	23982 <nrf_flash_sync_exe+0x112>

	errcode = MULTITHREADING_LOCK_ACQUIRE();
   238da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   238de:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   238e2:	f7ff f8e7 	bl	22ab4 <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
   238e6:	2800      	cmp	r0, #0
   238e8:	d156      	bne.n	23998 <nrf_flash_sync_exe+0x128>
	ret = mpsl_timeslot_request(_context.session_id, req);
   238ea:	4b40      	ldr	r3, [pc, #256]	; (239ec <nrf_flash_sync_exe+0x17c>)
   238ec:	f103 0124 	add.w	r1, r3, #36	; 0x24
   238f0:	7e18      	ldrb	r0, [r3, #24]
   238f2:	f7e9 fdc9 	bl	d488 <mpsl_timeslot_request>
	__ASSERT_EVAL((void)ret, (void)ret, ret == 0,
   238f6:	2800      	cmp	r0, #0
   238f8:	d159      	bne.n	239ae <nrf_flash_sync_exe+0x13e>
		      "mpsl_timeslot_request failed: %d", ret);
	MULTITHREADING_LOCK_RELEASE();
   238fa:	f7ff f8e5 	bl	22ac8 <multithreading_lock_release>
	return z_impl_k_sem_take(sem, timeout);
   238fe:	4a3c      	ldr	r2, [pc, #240]	; (239f0 <nrf_flash_sync_exe+0x180>)
   23900:	2300      	movs	r3, #0
   23902:	483a      	ldr	r0, [pc, #232]	; (239ec <nrf_flash_sync_exe+0x17c>)
   23904:	f002 ff50 	bl	267a8 <z_impl_k_sem_take>

	if (k_sem_take(&_context.timeout_sem, K_MSEC(FLASH_TIMEOUT_MS)) < 0) {
   23908:	2800      	cmp	r0, #0
   2390a:	da0f      	bge.n	2392c <nrf_flash_sync_exe+0xbc>
		LOG_ERR("timeout");
   2390c:	2145      	movs	r1, #69	; 0x45
   2390e:	4839      	ldr	r0, [pc, #228]	; (239f4 <nrf_flash_sync_exe+0x184>)
   23910:	f007 fbcc 	bl	2b0ac <z_log_minimal_printk>
   23914:	4b38      	ldr	r3, [pc, #224]	; (239f8 <nrf_flash_sync_exe+0x188>)
   23916:	2201      	movs	r2, #1
   23918:	f3bf 8f5b 	dmb	ish
   2391c:	e853 1f00 	ldrex	r1, [r3]
   23920:	e843 2000 	strex	r0, r2, [r3]
   23924:	2800      	cmp	r0, #0
   23926:	d1f9      	bne.n	2391c <nrf_flash_sync_exe+0xac>
   23928:	f3bf 8f5b 	dmb	ish
		atomic_set(&_context.timeout_occured, 1);
	}

	/* This will cancel the timeslot if it is still in progress. */
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   2392c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23930:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   23934:	f7ff f8be 	bl	22ab4 <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
   23938:	2800      	cmp	r0, #0
   2393a:	d143      	bne.n	239c4 <nrf_flash_sync_exe+0x154>
	mpsl_timeslot_session_close(_context.session_id);
   2393c:	4c2b      	ldr	r4, [pc, #172]	; (239ec <nrf_flash_sync_exe+0x17c>)
   2393e:	7e20      	ldrb	r0, [r4, #24]
   23940:	f7e9 fddd 	bl	d4fe <mpsl_timeslot_session_close>
	MULTITHREADING_LOCK_RELEASE();
   23944:	f7ff f8c0 	bl	22ac8 <multithreading_lock_release>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   23948:	f3bf 8f5b 	dmb	ish
   2394c:	6c23      	ldr	r3, [r4, #64]	; 0x40
   2394e:	f3bf 8f5b 	dmb	ish

	/* Reset the semaphore after timeout, in case if the operation _did_
	 * complete before closing the session. */
	if (atomic_get(&_context.timeout_occured)) {
   23952:	2b00      	cmp	r3, #0
   23954:	d141      	bne.n	239da <nrf_flash_sync_exe+0x16a>
		k_sem_reset(&_context.timeout_sem);
	}

	return _context.status;
   23956:	4b25      	ldr	r3, [pc, #148]	; (239ec <nrf_flash_sync_exe+0x17c>)
   23958:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
}
   2395a:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(errcode == 0);
   2395c:	4c27      	ldr	r4, [pc, #156]	; (239fc <nrf_flash_sync_exe+0x18c>)
   2395e:	2299      	movs	r2, #153	; 0x99
   23960:	4621      	mov	r1, r4
   23962:	4827      	ldr	r0, [pc, #156]	; (23a00 <nrf_flash_sync_exe+0x190>)
   23964:	f007 fb93 	bl	2b08e <assert_print>
   23968:	2199      	movs	r1, #153	; 0x99
   2396a:	4620      	mov	r0, r4
   2396c:	f007 fb88 	bl	2b080 <assert_post_action>
   23970:	e788      	b.n	23884 <nrf_flash_sync_exe+0x14>
		LOG_ERR("mpsl_timeslot_session_open failed: %d", ret);
   23972:	4622      	mov	r2, r4
   23974:	2145      	movs	r1, #69	; 0x45
   23976:	4823      	ldr	r0, [pc, #140]	; (23a04 <nrf_flash_sync_exe+0x194>)
   23978:	f007 fb98 	bl	2b0ac <z_log_minimal_printk>
		return -ENOMEM;
   2397c:	f06f 000b 	mvn.w	r0, #11
   23980:	e7eb      	b.n	2395a <nrf_flash_sync_exe+0xea>
	__ASSERT_NO_MSG(k_sem_count_get(&_context.timeout_sem) == 0);
   23982:	4c1e      	ldr	r4, [pc, #120]	; (239fc <nrf_flash_sync_exe+0x18c>)
   23984:	22af      	movs	r2, #175	; 0xaf
   23986:	4621      	mov	r1, r4
   23988:	481d      	ldr	r0, [pc, #116]	; (23a00 <nrf_flash_sync_exe+0x190>)
   2398a:	f007 fb80 	bl	2b08e <assert_print>
   2398e:	21af      	movs	r1, #175	; 0xaf
   23990:	4620      	mov	r0, r4
   23992:	f007 fb75 	bl	2b080 <assert_post_action>
   23996:	e7a0      	b.n	238da <nrf_flash_sync_exe+0x6a>
	__ASSERT_NO_MSG(errcode == 0);
   23998:	4c18      	ldr	r4, [pc, #96]	; (239fc <nrf_flash_sync_exe+0x18c>)
   2399a:	22b2      	movs	r2, #178	; 0xb2
   2399c:	4621      	mov	r1, r4
   2399e:	4818      	ldr	r0, [pc, #96]	; (23a00 <nrf_flash_sync_exe+0x190>)
   239a0:	f007 fb75 	bl	2b08e <assert_print>
   239a4:	21b2      	movs	r1, #178	; 0xb2
   239a6:	4620      	mov	r0, r4
   239a8:	f007 fb6a 	bl	2b080 <assert_post_action>
   239ac:	e79d      	b.n	238ea <nrf_flash_sync_exe+0x7a>
	__ASSERT_EVAL((void)ret, (void)ret, ret == 0,
   239ae:	4c13      	ldr	r4, [pc, #76]	; (239fc <nrf_flash_sync_exe+0x18c>)
   239b0:	22b4      	movs	r2, #180	; 0xb4
   239b2:	4621      	mov	r1, r4
   239b4:	4812      	ldr	r0, [pc, #72]	; (23a00 <nrf_flash_sync_exe+0x190>)
   239b6:	f007 fb6a 	bl	2b08e <assert_print>
   239ba:	21b4      	movs	r1, #180	; 0xb4
   239bc:	4620      	mov	r0, r4
   239be:	f007 fb5f 	bl	2b080 <assert_post_action>
   239c2:	e79a      	b.n	238fa <nrf_flash_sync_exe+0x8a>
	__ASSERT_NO_MSG(errcode == 0);
   239c4:	4c0d      	ldr	r4, [pc, #52]	; (239fc <nrf_flash_sync_exe+0x18c>)
   239c6:	22bf      	movs	r2, #191	; 0xbf
   239c8:	4621      	mov	r1, r4
   239ca:	480d      	ldr	r0, [pc, #52]	; (23a00 <nrf_flash_sync_exe+0x190>)
   239cc:	f007 fb5f 	bl	2b08e <assert_print>
   239d0:	21bf      	movs	r1, #191	; 0xbf
   239d2:	4620      	mov	r0, r4
   239d4:	f007 fb54 	bl	2b080 <assert_post_action>
   239d8:	e7b0      	b.n	2393c <nrf_flash_sync_exe+0xcc>
	z_impl_k_sem_reset(sem);
   239da:	4620      	mov	r0, r4
   239dc:	f002 ff5a 	bl	26894 <z_impl_k_sem_reset>
}
   239e0:	e7b9      	b.n	23956 <nrf_flash_sync_exe+0xe6>
   239e2:	bf00      	nop
   239e4:	20003198 	.word	0x20003198
   239e8:	00023795 	.word	0x00023795
   239ec:	20003180 	.word	0x20003180
   239f0:	000b7b44 	.word	0x000b7b44
   239f4:	00034d74 	.word	0x00034d74
   239f8:	200031c0 	.word	0x200031c0
   239fc:	00034d0c 	.word	0x00034d0c
   23a00:	000318f8 	.word	0x000318f8
   23a04:	00034d48 	.word	0x00034d48

00023a08 <nrf_flash_sync_check_time_limit>:
{
	/* Not needed for this driver. */
}

bool nrf_flash_sync_check_time_limit(uint32_t iteration)
{
   23a08:	b510      	push	{r4, lr}
   23a0a:	4604      	mov	r4, r0
	uint32_t now_us = get_timeslot_time_us();
   23a0c:	f7ff fe98 	bl	23740 <get_timeslot_time_us>
	uint32_t time_per_iteration_us = now_us / iteration;
   23a10:	fbb0 f4f4 	udiv	r4, r0, r4
	return now_us + time_per_iteration_us >= _context.request_length_us;
   23a14:	4420      	add	r0, r4
   23a16:	4b03      	ldr	r3, [pc, #12]	; (23a24 <nrf_flash_sync_check_time_limit+0x1c>)
   23a18:	69db      	ldr	r3, [r3, #28]
}
   23a1a:	4298      	cmp	r0, r3
   23a1c:	bf34      	ite	cc
   23a1e:	2000      	movcc	r0, #0
   23a20:	2001      	movcs	r0, #1
   23a22:	bd10      	pop	{r4, pc}
   23a24:	20003180 	.word	0x20003180

00023a28 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   23a28:	4b02      	ldr	r3, [pc, #8]	; (23a34 <nvmc_wait+0xc>)
   23a2a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   23a2e:	2b00      	cmp	r3, #0
   23a30:	d0fa      	beq.n	23a28 <nvmc_wait>
}
   23a32:	4770      	bx	lr
   23a34:	4001e000 	.word	0x4001e000

00023a38 <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
   23a38:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   23a3a:	4b03      	ldr	r3, [pc, #12]	; (23a48 <nvmc_config+0x10>)
   23a3c:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
   23a40:	f7ff fff2 	bl	23a28 <nvmc_wait>
}
   23a44:	bd08      	pop	{r3, pc}
   23a46:	bf00      	nop
   23a48:	4001e000 	.word	0x4001e000

00023a4c <SystemCoreClockUpdate>:

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   23a4c:	4b01      	ldr	r3, [pc, #4]	; (23a54 <SystemCoreClockUpdate+0x8>)
   23a4e:	4a02      	ldr	r2, [pc, #8]	; (23a58 <SystemCoreClockUpdate+0xc>)
   23a50:	601a      	str	r2, [r3, #0]
}
   23a52:	4770      	bx	lr
   23a54:	2000083c 	.word	0x2000083c
   23a58:	03d09000 	.word	0x03d09000

00023a5c <SystemInit>:

void SystemInit(void)
{
   23a5c:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
   23a5e:	f00c fcd9 	bl	30414 <nrf52_errata_12>
   23a62:	b140      	cbz	r0, 23a76 <SystemInit+0x1a>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
   23a64:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   23a68:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
   23a6c:	f3c3 2304 	ubfx	r3, r3, #8, #5
   23a70:	4a76      	ldr	r2, [pc, #472]	; (23c4c <SystemInit+0x1f0>)
   23a72:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
   23a76:	f00c fcdf 	bl	30438 <nrf52_errata_16>
   23a7a:	b110      	cbz	r0, 23a82 <SystemInit+0x26>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
   23a7c:	4b74      	ldr	r3, [pc, #464]	; (23c50 <SystemInit+0x1f4>)
   23a7e:	4a75      	ldr	r2, [pc, #468]	; (23c54 <SystemInit+0x1f8>)
   23a80:	675a      	str	r2, [r3, #116]	; 0x74
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
   23a82:	f00c fcef 	bl	30464 <nrf52_errata_31>
   23a86:	b148      	cbz	r0, 23a9c <SystemInit+0x40>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
   23a88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   23a8c:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
   23a90:	f3c3 3342 	ubfx	r3, r3, #13, #3
   23a94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   23a98:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
   23a9c:	f00c fcf4 	bl	30488 <nrf52_errata_32>
   23aa0:	b130      	cbz	r0, 23ab0 <SystemInit+0x54>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
   23aa2:	4a6d      	ldr	r2, [pc, #436]	; (23c58 <SystemInit+0x1fc>)
   23aa4:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
   23aa8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   23aac:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   23ab0:	f00c fd00 	bl	304b4 <nrf52_errata_36>
   23ab4:	b140      	cbz	r0, 23ac8 <SystemInit+0x6c>
            NRF_CLOCK->EVENTS_DONE = 0;
   23ab6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   23aba:	2200      	movs	r2, #0
   23abc:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   23ac0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   23ac4:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
   23ac8:	f00c fd06 	bl	304d8 <nrf52_errata_37>
   23acc:	b120      	cbz	r0, 23ad8 <SystemInit+0x7c>
            *(volatile uint32_t *)0x400005A0 = 0x3;
   23ace:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   23ad2:	2203      	movs	r2, #3
   23ad4:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
   23ad8:	f00c fd14 	bl	30504 <nrf52_errata_57>
   23adc:	b160      	cbz	r0, 23af8 <SystemInit+0x9c>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
   23ade:	4b5f      	ldr	r3, [pc, #380]	; (23c5c <SystemInit+0x200>)
   23ae0:	2205      	movs	r2, #5
   23ae2:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
            *(volatile uint32_t *)0x40005688 = 0x00000001;
   23ae6:	2201      	movs	r2, #1
   23ae8:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688
            *(volatile uint32_t *)0x40005618 = 0x00000000;
   23aec:	2200      	movs	r2, #0
   23aee:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
   23af2:	223f      	movs	r2, #63	; 0x3f
   23af4:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   23af8:	f00c fd1a 	bl	30530 <nrf52_errata_66>
   23afc:	2800      	cmp	r0, #0
   23afe:	d046      	beq.n	23b8e <SystemInit+0x132>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   23b00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   23b04:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   23b08:	4b55      	ldr	r3, [pc, #340]	; (23c60 <SystemInit+0x204>)
   23b0a:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   23b0e:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   23b12:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   23b16:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   23b1a:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   23b1e:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   23b22:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   23b26:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   23b2a:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   23b2e:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   23b32:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   23b36:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   23b3a:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   23b3e:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   23b42:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   23b46:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   23b4a:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   23b4e:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   23b52:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   23b56:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   23b5a:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   23b5e:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   23b62:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   23b66:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   23b6a:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   23b6e:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   23b72:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   23b76:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   23b7a:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   23b7e:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   23b82:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   23b86:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   23b8a:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
   23b8e:	f00c fcf1 	bl	30574 <nrf52_errata_108>
   23b92:	b148      	cbz	r0, 23ba8 <SystemInit+0x14c>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
   23b94:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   23b98:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   23b9c:	f003 034f 	and.w	r3, r3, #79	; 0x4f
   23ba0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   23ba4:	f8c2 3ee4 	str.w	r3, [r2, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   23ba8:	f00c fcf6 	bl	30598 <nrf52_errata_136>
   23bac:	b160      	cbz	r0, 23bc8 <SystemInit+0x16c>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   23bae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   23bb2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   23bb6:	f013 0f01 	tst.w	r3, #1
   23bba:	d005      	beq.n	23bc8 <SystemInit+0x16c>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   23bbc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   23bc0:	f06f 0201 	mvn.w	r2, #1
   23bc4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
   23bc8:	f00c fcf8 	bl	305bc <nrf52_errata_182>
   23bcc:	b130      	cbz	r0, 23bdc <SystemInit+0x180>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
   23bce:	4a25      	ldr	r2, [pc, #148]	; (23c64 <SystemInit+0x208>)
   23bd0:	f8d2 373c 	ldr.w	r3, [r2, #1852]	; 0x73c
   23bd4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   23bd8:	f8c2 373c 	str.w	r3, [r2, #1852]	; 0x73c
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   23bdc:	f00c fd02 	bl	305e4 <nrf52_configuration_249>
   23be0:	b138      	cbz	r0, 23bf2 <SystemInit+0x196>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   23be2:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   23be6:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   23bea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   23bee:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   23bf2:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   23bf6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   23bfa:	2b00      	cmp	r3, #0
   23bfc:	db08      	blt.n	23c10 <SystemInit+0x1b4>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   23bfe:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   23c02:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   23c06:	2b00      	cmp	r3, #0
   23c08:	db02      	blt.n	23c10 <SystemInit+0x1b4>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
   23c0a:	f7ff ff1f 	bl	23a4c <SystemCoreClockUpdate>
}
   23c0e:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
   23c10:	2001      	movs	r0, #1
   23c12:	f7ff ff11 	bl	23a38 <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   23c16:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
   23c1a:	2515      	movs	r5, #21
   23c1c:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
   23c20:	f7ff ff02 	bl	23a28 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   23c24:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
   23c28:	f7ff fefe 	bl	23a28 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
   23c2c:	2000      	movs	r0, #0
   23c2e:	f7ff ff03 	bl	23a38 <nvmc_config>
  __ASM volatile ("dsb 0xF":::"memory");
   23c32:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   23c36:	4908      	ldr	r1, [pc, #32]	; (23c58 <SystemInit+0x1fc>)
   23c38:	68ca      	ldr	r2, [r1, #12]
   23c3a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   23c3e:	4b0a      	ldr	r3, [pc, #40]	; (23c68 <SystemInit+0x20c>)
   23c40:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   23c42:	60cb      	str	r3, [r1, #12]
   23c44:	f3bf 8f4f 	dsb	sy
    __NOP();
   23c48:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   23c4a:	e7fd      	b.n	23c48 <SystemInit+0x1ec>
   23c4c:	40013000 	.word	0x40013000
   23c50:	4007c000 	.word	0x4007c000
   23c54:	baadf00d 	.word	0xbaadf00d
   23c58:	e000ed00 	.word	0xe000ed00
   23c5c:	40005000 	.word	0x40005000
   23c60:	4000c000 	.word	0x4000c000
   23c64:	40001000 	.word	0x40001000
   23c68:	05fa0004 	.word	0x05fa0004

00023c6c <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   23c6c:	b510      	push	{r4, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
   23c6e:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   23c70:	fab4 f384 	clz	r3, r4
   23c74:	f1c3 031f 	rsb	r3, r3, #31
   23c78:	fa5f fc83 	uxtb.w	ip, r3
        if (idx < 0) {
   23c7c:	2b00      	cmp	r3, #0
   23c7e:	db16      	blt.n	23cae <nrfx_flag32_alloc+0x42>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   23c80:	2201      	movs	r2, #1
   23c82:	fa02 f303 	lsl.w	r3, r2, r3
   23c86:	ea24 0303 	bic.w	r3, r4, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   23c8a:	f3bf 8f5b 	dmb	ish
   23c8e:	e850 2f00 	ldrex	r2, [r0]
   23c92:	42a2      	cmp	r2, r4
   23c94:	d104      	bne.n	23ca0 <nrfx_flag32_alloc+0x34>
   23c96:	e840 3e00 	strex	lr, r3, [r0]
   23c9a:	f1be 0f00 	cmp.w	lr, #0
   23c9e:	d1f6      	bne.n	23c8e <nrfx_flag32_alloc+0x22>
   23ca0:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   23ca4:	d1e3      	bne.n	23c6e <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
   23ca6:	f881 c000 	strb.w	ip, [r1]

    return NRFX_SUCCESS;
   23caa:	4802      	ldr	r0, [pc, #8]	; (23cb4 <nrfx_flag32_alloc+0x48>)
}
   23cac:	bd10      	pop	{r4, pc}
            return NRFX_ERROR_NO_MEM;
   23cae:	4802      	ldr	r0, [pc, #8]	; (23cb8 <nrfx_flag32_alloc+0x4c>)
   23cb0:	e7fc      	b.n	23cac <nrfx_flag32_alloc+0x40>
   23cb2:	bf00      	nop
   23cb4:	0bad0000 	.word	0x0bad0000
   23cb8:	0bad0002 	.word	0x0bad0002

00023cbc <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   23cbc:	6803      	ldr	r3, [r0, #0]
   23cbe:	40cb      	lsrs	r3, r1
   23cc0:	f013 0f01 	tst.w	r3, #1
   23cc4:	d115      	bne.n	23cf2 <nrfx_flag32_free+0x36>
{
   23cc6:	b500      	push	{lr}
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
   23cc8:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   23cca:	2301      	movs	r3, #1
   23ccc:	408b      	lsls	r3, r1
   23cce:	4313      	orrs	r3, r2
   23cd0:	f3bf 8f5b 	dmb	ish
   23cd4:	e850 cf00 	ldrex	ip, [r0]
   23cd8:	4594      	cmp	ip, r2
   23cda:	d104      	bne.n	23ce6 <nrfx_flag32_free+0x2a>
   23cdc:	e840 3e00 	strex	lr, r3, [r0]
   23ce0:	f1be 0f00 	cmp.w	lr, #0
   23ce4:	d1f6      	bne.n	23cd4 <nrfx_flag32_free+0x18>
   23ce6:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   23cea:	d1ed      	bne.n	23cc8 <nrfx_flag32_free+0xc>

    return NRFX_SUCCESS;
   23cec:	4802      	ldr	r0, [pc, #8]	; (23cf8 <nrfx_flag32_free+0x3c>)
}
   23cee:	f85d fb04 	ldr.w	pc, [sp], #4
        return NRFX_ERROR_INVALID_PARAM;
   23cf2:	4802      	ldr	r0, [pc, #8]	; (23cfc <nrfx_flag32_free+0x40>)
}
   23cf4:	4770      	bx	lr
   23cf6:	bf00      	nop
   23cf8:	0bad0000 	.word	0x0bad0000
   23cfc:	0bad0004 	.word	0x0bad0004

00023d00 <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   23d00:	3008      	adds	r0, #8
   23d02:	4b03      	ldr	r3, [pc, #12]	; (23d10 <pin_in_use+0x10>)
   23d04:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   23d08:	f000 0001 	and.w	r0, r0, #1
   23d0c:	4770      	bx	lr
   23d0e:	bf00      	nop
   23d10:	20000840 	.word	0x20000840

00023d14 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   23d14:	3008      	adds	r0, #8
   23d16:	4b03      	ldr	r3, [pc, #12]	; (23d24 <pin_in_use_by_te+0x10>)
   23d18:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   23d1c:	f3c0 1040 	ubfx	r0, r0, #5, #1
   23d20:	4770      	bx	lr
   23d22:	bf00      	nop
   23d24:	20000840 	.word	0x20000840

00023d28 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   23d28:	3008      	adds	r0, #8
   23d2a:	4b04      	ldr	r3, [pc, #16]	; (23d3c <pin_has_trigger+0x14>)
   23d2c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   23d30:	f010 001c 	ands.w	r0, r0, #28
   23d34:	bf18      	it	ne
   23d36:	2001      	movne	r0, #1
   23d38:	4770      	bx	lr
   23d3a:	bf00      	nop
   23d3c:	20000840 	.word	0x20000840

00023d40 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   23d40:	3008      	adds	r0, #8
   23d42:	4b03      	ldr	r3, [pc, #12]	; (23d50 <pin_is_output+0x10>)
   23d44:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   23d48:	f3c0 0040 	ubfx	r0, r0, #1, #1
   23d4c:	4770      	bx	lr
   23d4e:	bf00      	nop
   23d50:	20000840 	.word	0x20000840

00023d54 <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   23d54:	3008      	adds	r0, #8
   23d56:	4b02      	ldr	r3, [pc, #8]	; (23d60 <pin_te_get+0xc>)
   23d58:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   23d5c:	0b40      	lsrs	r0, r0, #13
   23d5e:	4770      	bx	lr
   23d60:	20000840 	.word	0x20000840

00023d64 <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   23d64:	2200      	movs	r2, #0
   23d66:	e004      	b.n	23d72 <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   23d68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   23d6c:	4283      	cmp	r3, r0
   23d6e:	d00f      	beq.n	23d90 <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   23d70:	3201      	adds	r2, #1
   23d72:	2a1f      	cmp	r2, #31
   23d74:	d80a      	bhi.n	23d8c <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   23d76:	f102 0308 	add.w	r3, r2, #8
   23d7a:	4906      	ldr	r1, [pc, #24]	; (23d94 <handler_in_use+0x30>)
   23d7c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   23d80:	f413 7f80 	tst.w	r3, #256	; 0x100
   23d84:	d0f0      	beq.n	23d68 <handler_in_use+0x4>
   23d86:	f3c3 2343 	ubfx	r3, r3, #9, #4
   23d8a:	e7ef      	b.n	23d6c <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
   23d8c:	2000      	movs	r0, #0
   23d8e:	4770      	bx	lr
            return true;
   23d90:	2001      	movs	r0, #1
}
   23d92:	4770      	bx	lr
   23d94:	20000840 	.word	0x20000840

00023d98 <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   23d98:	2300      	movs	r3, #0
   23d9a:	b113      	cbz	r3, 23da2 <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
   23d9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   23da0:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   23da2:	4a07      	ldr	r2, [pc, #28]	; (23dc0 <find_handler+0x28>)
   23da4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   23da8:	4282      	cmp	r2, r0
   23daa:	d001      	beq.n	23db0 <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   23dac:	3301      	adds	r3, #1
   23dae:	e7f4      	b.n	23d9a <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   23db0:	4a03      	ldr	r2, [pc, #12]	; (23dc0 <find_handler+0x28>)
   23db2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   23db6:	6852      	ldr	r2, [r2, #4]
   23db8:	428a      	cmp	r2, r1
   23dba:	d1f7      	bne.n	23dac <find_handler+0x14>
            return i;
   23dbc:	4618      	mov	r0, r3
   23dbe:	4770      	bx	lr
   23dc0:	20000840 	.word	0x20000840

00023dc4 <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   23dc4:	3008      	adds	r0, #8
   23dc6:	4b06      	ldr	r3, [pc, #24]	; (23de0 <channel_handler_get+0x1c>)
   23dc8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   23dcc:	f410 7f80 	tst.w	r0, #256	; 0x100
   23dd0:	d004      	beq.n	23ddc <channel_handler_get+0x18>
   23dd2:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
   23dd6:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   23dda:	4770      	bx	lr
        return NULL;
   23ddc:	2000      	movs	r0, #0
}
   23dde:	4770      	bx	lr
   23de0:	20000840 	.word	0x20000840

00023de4 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   23de4:	b570      	push	{r4, r5, r6, lr}
   23de6:	4604      	mov	r4, r0
   23de8:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
   23dea:	f7ff ffeb 	bl	23dc4 <channel_handler_get>

    if (handler)
   23dee:	b120      	cbz	r0, 23dfa <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
   23df0:	6806      	ldr	r6, [r0, #0]
   23df2:	6842      	ldr	r2, [r0, #4]
   23df4:	4629      	mov	r1, r5
   23df6:	4620      	mov	r0, r4
   23df8:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
   23dfa:	4b04      	ldr	r3, [pc, #16]	; (23e0c <call_handler+0x28>)
   23dfc:	689b      	ldr	r3, [r3, #8]
   23dfe:	b123      	cbz	r3, 23e0a <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   23e00:	4a02      	ldr	r2, [pc, #8]	; (23e0c <call_handler+0x28>)
   23e02:	68d2      	ldr	r2, [r2, #12]
   23e04:	4629      	mov	r1, r5
   23e06:	4620      	mov	r0, r4
   23e08:	4798      	blx	r3
    }
}
   23e0a:	bd70      	pop	{r4, r5, r6, pc}
   23e0c:	20000840 	.word	0x20000840

00023e10 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   23e10:	f100 0208 	add.w	r2, r0, #8
   23e14:	4b16      	ldr	r3, [pc, #88]	; (23e70 <release_handler+0x60>)
   23e16:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   23e1a:	f413 7f80 	tst.w	r3, #256	; 0x100
   23e1e:	d025      	beq.n	23e6c <release_handler+0x5c>
{
   23e20:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   23e22:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   23e26:	4610      	mov	r0, r2
   23e28:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   23e2c:	4a10      	ldr	r2, [pc, #64]	; (23e70 <release_handler+0x60>)
   23e2e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
   23e32:	4620      	mov	r0, r4
   23e34:	f7ff ff96 	bl	23d64 <handler_in_use>
   23e38:	b100      	cbz	r0, 23e3c <release_handler+0x2c>
}
   23e3a:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
   23e3c:	480c      	ldr	r0, [pc, #48]	; (23e70 <release_handler+0x60>)
   23e3e:	2300      	movs	r3, #0
   23e40:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   23e44:	4621      	mov	r1, r4
   23e46:	3054      	adds	r0, #84	; 0x54
   23e48:	f7ff ff38 	bl	23cbc <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   23e4c:	4b09      	ldr	r3, [pc, #36]	; (23e74 <release_handler+0x64>)
   23e4e:	4298      	cmp	r0, r3
   23e50:	d0f3      	beq.n	23e3a <release_handler+0x2a>
   23e52:	4c09      	ldr	r4, [pc, #36]	; (23e78 <release_handler+0x68>)
   23e54:	f44f 7299 	mov.w	r2, #306	; 0x132
   23e58:	4621      	mov	r1, r4
   23e5a:	4808      	ldr	r0, [pc, #32]	; (23e7c <release_handler+0x6c>)
   23e5c:	f007 f917 	bl	2b08e <assert_print>
   23e60:	f44f 7199 	mov.w	r1, #306	; 0x132
   23e64:	4620      	mov	r0, r4
   23e66:	f007 f90b 	bl	2b080 <assert_post_action>
   23e6a:	e7e6      	b.n	23e3a <release_handler+0x2a>
   23e6c:	4770      	bx	lr
   23e6e:	bf00      	nop
   23e70:	20000840 	.word	0x20000840
   23e74:	0bad0000 	.word	0x0bad0000
   23e78:	00034d94 	.word	0x00034d94
   23e7c:	000318f8 	.word	0x000318f8

00023e80 <pin_handler_trigger_uninit>:
{
   23e80:	b510      	push	{r4, lr}
   23e82:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
   23e84:	f7ff ff46 	bl	23d14 <pin_in_use_by_te>
   23e88:	b140      	cbz	r0, 23e9c <pin_handler_trigger_uninit+0x1c>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   23e8a:	4620      	mov	r0, r4
   23e8c:	f7ff ff62 	bl	23d54 <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   23e90:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   23e94:	4b06      	ldr	r3, [pc, #24]	; (23eb0 <pin_handler_trigger_uninit+0x30>)
   23e96:	2200      	movs	r2, #0
   23e98:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
   23e9c:	4620      	mov	r0, r4
   23e9e:	f7ff ffb7 	bl	23e10 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   23ea2:	3408      	adds	r4, #8
   23ea4:	4b03      	ldr	r3, [pc, #12]	; (23eb4 <pin_handler_trigger_uninit+0x34>)
   23ea6:	2200      	movs	r2, #0
   23ea8:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
   23eac:	bd10      	pop	{r4, pc}
   23eae:	bf00      	nop
   23eb0:	40006000 	.word	0x40006000
   23eb4:	20000840 	.word	0x20000840

00023eb8 <pin_handler_set>:
{
   23eb8:	b570      	push	{r4, r5, r6, lr}
   23eba:	b082      	sub	sp, #8
   23ebc:	4606      	mov	r6, r0
   23ebe:	460c      	mov	r4, r1
   23ec0:	4615      	mov	r5, r2
    release_handler(pin);
   23ec2:	f7ff ffa5 	bl	23e10 <release_handler>
    if (!handler)
   23ec6:	b324      	cbz	r4, 23f12 <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
   23ec8:	4629      	mov	r1, r5
   23eca:	4620      	mov	r0, r4
   23ecc:	f7ff ff64 	bl	23d98 <find_handler>
    if (handler_id < 0)
   23ed0:	1e03      	subs	r3, r0, #0
   23ed2:	db13      	blt.n	23efc <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
   23ed4:	4a10      	ldr	r2, [pc, #64]	; (23f18 <pin_handler_set+0x60>)
   23ed6:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   23eda:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
   23ede:	604d      	str	r5, [r1, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   23ee0:	025b      	lsls	r3, r3, #9
   23ee2:	b29b      	uxth	r3, r3
   23ee4:	f106 0008 	add.w	r0, r6, #8
   23ee8:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
   23eec:	430b      	orrs	r3, r1
   23eee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   23ef2:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    return NRFX_SUCCESS;
   23ef6:	4809      	ldr	r0, [pc, #36]	; (23f1c <pin_handler_set+0x64>)
}
   23ef8:	b002      	add	sp, #8
   23efa:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   23efc:	f10d 0107 	add.w	r1, sp, #7
   23f00:	4807      	ldr	r0, [pc, #28]	; (23f20 <pin_handler_set+0x68>)
   23f02:	f7ff feb3 	bl	23c6c <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   23f06:	4b05      	ldr	r3, [pc, #20]	; (23f1c <pin_handler_set+0x64>)
   23f08:	4298      	cmp	r0, r3
   23f0a:	d1f5      	bne.n	23ef8 <pin_handler_set+0x40>
        handler_id = (int32_t)id;
   23f0c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   23f10:	e7e0      	b.n	23ed4 <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
   23f12:	4802      	ldr	r0, [pc, #8]	; (23f1c <pin_handler_set+0x64>)
   23f14:	e7f0      	b.n	23ef8 <pin_handler_set+0x40>
   23f16:	bf00      	nop
   23f18:	20000840 	.word	0x20000840
   23f1c:	0bad0000 	.word	0x0bad0000
   23f20:	20000894 	.word	0x20000894

00023f24 <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
   23f24:	b538      	push	{r3, r4, r5, lr}
   23f26:	4604      	mov	r4, r0
    while (mask)
   23f28:	e018      	b.n	23f5c <gpiote_evt_handle+0x38>
    {
        uint32_t ch = NRF_CTZ(mask);
   23f2a:	fa94 f3a4 	rbit	r3, r4
   23f2e:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   23f32:	2201      	movs	r2, #1
   23f34:	409a      	lsls	r2, r3
   23f36:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   23f3a:	4a0a      	ldr	r2, [pc, #40]	; (23f64 <gpiote_evt_handle+0x40>)
   23f3c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   23f40:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   23f44:	f3c5 2504 	ubfx	r5, r5, #8, #5
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   23f48:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   23f4c:	f3c0 4001 	ubfx	r0, r0, #16, #2
   23f50:	f00c fb79 	bl	30646 <gpiote_polarity_to_trigger>
   23f54:	4601      	mov	r1, r0
   23f56:	4628      	mov	r0, r5
   23f58:	f7ff ff44 	bl	23de4 <call_handler>
    while (mask)
   23f5c:	2c00      	cmp	r4, #0
   23f5e:	d1e4      	bne.n	23f2a <gpiote_evt_handle+0x6>
    }
}
   23f60:	bd38      	pop	{r3, r4, r5, pc}
   23f62:	bf00      	nop
   23f64:	40006000 	.word	0x40006000

00023f68 <next_sense_cond_call_handler>:
{
   23f68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23f6c:	4604      	mov	r4, r0
   23f6e:	460d      	mov	r5, r1
   23f70:	4616      	mov	r6, r2
    if (is_level(trigger))
   23f72:	4608      	mov	r0, r1
   23f74:	f00c fb69 	bl	3064a <is_level>
   23f78:	bb58      	cbnz	r0, 23fd2 <next_sense_cond_call_handler+0x6a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   23f7a:	2e02      	cmp	r6, #2
   23f7c:	f000 80cc 	beq.w	24118 <next_sense_cond_call_handler+0x1b0>
   23f80:	f04f 0802 	mov.w	r8, #2
    switch (port)
   23f84:	0963      	lsrs	r3, r4, #5
   23f86:	f000 80ca 	beq.w	2411e <next_sense_cond_call_handler+0x1b6>
    uint32_t mask = 0;
   23f8a:	2300      	movs	r3, #0
    pin_number &= 0x1F;
   23f8c:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
   23f90:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   23f92:	f013 0f01 	tst.w	r3, #1
   23f96:	f000 80c5 	beq.w	24124 <next_sense_cond_call_handler+0x1bc>
    *p_pin = pin_number & 0x1F;
   23f9a:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   23f9e:	0963      	lsrs	r3, r4, #5
   23fa0:	f040 80cd 	bne.w	2413e <next_sense_cond_call_handler+0x1d6>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   23fa4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   23fa8:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
   23fac:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
   23fb0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   23fb4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   23fb8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   23fbc:	2d03      	cmp	r5, #3
   23fbe:	f000 80cf 	beq.w	24160 <next_sense_cond_call_handler+0x1f8>
   23fc2:	2e02      	cmp	r6, #2
   23fc4:	f000 80c9 	beq.w	2415a <next_sense_cond_call_handler+0x1f2>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   23fc8:	2e03      	cmp	r6, #3
   23fca:	f000 80ce 	beq.w	2416a <next_sense_cond_call_handler+0x202>
}
   23fce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        call_handler(pin, trigger);
   23fd2:	4629      	mov	r1, r5
   23fd4:	4620      	mov	r0, r4
   23fd6:	f7ff ff05 	bl	23de4 <call_handler>
    switch (port)
   23fda:	0963      	lsrs	r3, r4, #5
   23fdc:	d045      	beq.n	2406a <next_sense_cond_call_handler+0x102>
    uint32_t mask = 0;
   23fde:	2300      	movs	r3, #0
    pin_number &= 0x1F;
   23fe0:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
   23fe4:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   23fe6:	f013 0f01 	tst.w	r3, #1
   23fea:	d041      	beq.n	24070 <next_sense_cond_call_handler+0x108>
    *p_pin = pin_number & 0x1F;
   23fec:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   23ff0:	0963      	lsrs	r3, r4, #5
   23ff2:	d14a      	bne.n	2408a <next_sense_cond_call_handler+0x122>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   23ff4:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
   23ff8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   23ffc:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   24000:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
   24004:	429e      	cmp	r6, r3
   24006:	d1e2      	bne.n	23fce <next_sense_cond_call_handler+0x66>
    switch (port)
   24008:	0963      	lsrs	r3, r4, #5
   2400a:	d04b      	beq.n	240a4 <next_sense_cond_call_handler+0x13c>
    uint32_t mask = 0;
   2400c:	2300      	movs	r3, #0
    pin_number &= 0x1F;
   2400e:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
   24012:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   24014:	f013 0f01 	tst.w	r3, #1
   24018:	d047      	beq.n	240aa <next_sense_cond_call_handler+0x142>
    *p_pin = pin_number & 0x1F;
   2401a:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2401e:	0963      	lsrs	r3, r4, #5
   24020:	d150      	bne.n	240c4 <next_sense_cond_call_handler+0x15c>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   24022:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   24026:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
   2402a:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
   2402e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
   24032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    switch (port)
   24036:	0963      	lsrs	r3, r4, #5
   24038:	d051      	beq.n	240de <next_sense_cond_call_handler+0x176>
    uint32_t mask = 0;
   2403a:	2300      	movs	r3, #0
    pin_number &= 0x1F;
   2403c:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
   24040:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   24042:	f013 0f01 	tst.w	r3, #1
   24046:	d04d      	beq.n	240e4 <next_sense_cond_call_handler+0x17c>
    *p_pin = pin_number & 0x1F;
   24048:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2404c:	0963      	lsrs	r3, r4, #5
   2404e:	d156      	bne.n	240fe <next_sense_cond_call_handler+0x196>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   24050:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   24054:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
   24058:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
   2405c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   24060:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   24064:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
   24068:	e7b1      	b.n	23fce <next_sense_cond_call_handler+0x66>
            mask = P0_FEATURE_PINS_PRESENT;
   2406a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2406e:	e7b7      	b.n	23fe0 <next_sense_cond_call_handler+0x78>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   24070:	4d40      	ldr	r5, [pc, #256]	; (24174 <next_sense_cond_call_handler+0x20c>)
   24072:	f240 2247 	movw	r2, #583	; 0x247
   24076:	4629      	mov	r1, r5
   24078:	483f      	ldr	r0, [pc, #252]	; (24178 <next_sense_cond_call_handler+0x210>)
   2407a:	f007 f808 	bl	2b08e <assert_print>
   2407e:	f240 2147 	movw	r1, #583	; 0x247
   24082:	4628      	mov	r0, r5
   24084:	f006 fffc 	bl	2b080 <assert_post_action>
   24088:	e7b0      	b.n	23fec <next_sense_cond_call_handler+0x84>
            NRFX_ASSERT(0);
   2408a:	4f3a      	ldr	r7, [pc, #232]	; (24174 <next_sense_cond_call_handler+0x20c>)
   2408c:	f44f 7213 	mov.w	r2, #588	; 0x24c
   24090:	4639      	mov	r1, r7
   24092:	4839      	ldr	r0, [pc, #228]	; (24178 <next_sense_cond_call_handler+0x210>)
   24094:	f006 fffb 	bl	2b08e <assert_print>
   24098:	f44f 7113 	mov.w	r1, #588	; 0x24c
   2409c:	4638      	mov	r0, r7
   2409e:	f006 ffef 	bl	2b080 <assert_post_action>
   240a2:	e7a7      	b.n	23ff4 <next_sense_cond_call_handler+0x8c>
            mask = P0_FEATURE_PINS_PRESENT;
   240a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   240a8:	e7b1      	b.n	2400e <next_sense_cond_call_handler+0xa6>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   240aa:	4d32      	ldr	r5, [pc, #200]	; (24174 <next_sense_cond_call_handler+0x20c>)
   240ac:	f240 2247 	movw	r2, #583	; 0x247
   240b0:	4629      	mov	r1, r5
   240b2:	4831      	ldr	r0, [pc, #196]	; (24178 <next_sense_cond_call_handler+0x210>)
   240b4:	f006 ffeb 	bl	2b08e <assert_print>
   240b8:	f240 2147 	movw	r1, #583	; 0x247
   240bc:	4628      	mov	r0, r5
   240be:	f006 ffdf 	bl	2b080 <assert_post_action>
   240c2:	e7aa      	b.n	2401a <next_sense_cond_call_handler+0xb2>
            NRFX_ASSERT(0);
   240c4:	4f2b      	ldr	r7, [pc, #172]	; (24174 <next_sense_cond_call_handler+0x20c>)
   240c6:	f44f 7213 	mov.w	r2, #588	; 0x24c
   240ca:	4639      	mov	r1, r7
   240cc:	482a      	ldr	r0, [pc, #168]	; (24178 <next_sense_cond_call_handler+0x210>)
   240ce:	f006 ffde 	bl	2b08e <assert_print>
   240d2:	f44f 7113 	mov.w	r1, #588	; 0x24c
   240d6:	4638      	mov	r0, r7
   240d8:	f006 ffd2 	bl	2b080 <assert_post_action>
   240dc:	e7a1      	b.n	24022 <next_sense_cond_call_handler+0xba>
            mask = P0_FEATURE_PINS_PRESENT;
   240de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   240e2:	e7ab      	b.n	2403c <next_sense_cond_call_handler+0xd4>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   240e4:	4d23      	ldr	r5, [pc, #140]	; (24174 <next_sense_cond_call_handler+0x20c>)
   240e6:	f240 2247 	movw	r2, #583	; 0x247
   240ea:	4629      	mov	r1, r5
   240ec:	4822      	ldr	r0, [pc, #136]	; (24178 <next_sense_cond_call_handler+0x210>)
   240ee:	f006 ffce 	bl	2b08e <assert_print>
   240f2:	f240 2147 	movw	r1, #583	; 0x247
   240f6:	4628      	mov	r0, r5
   240f8:	f006 ffc2 	bl	2b080 <assert_post_action>
   240fc:	e7a4      	b.n	24048 <next_sense_cond_call_handler+0xe0>
            NRFX_ASSERT(0);
   240fe:	4c1d      	ldr	r4, [pc, #116]	; (24174 <next_sense_cond_call_handler+0x20c>)
   24100:	f44f 7213 	mov.w	r2, #588	; 0x24c
   24104:	4621      	mov	r1, r4
   24106:	481c      	ldr	r0, [pc, #112]	; (24178 <next_sense_cond_call_handler+0x210>)
   24108:	f006 ffc1 	bl	2b08e <assert_print>
   2410c:	f44f 7113 	mov.w	r1, #588	; 0x24c
   24110:	4620      	mov	r0, r4
   24112:	f006 ffb5 	bl	2b080 <assert_post_action>
   24116:	e79b      	b.n	24050 <next_sense_cond_call_handler+0xe8>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   24118:	f04f 0803 	mov.w	r8, #3
   2411c:	e732      	b.n	23f84 <next_sense_cond_call_handler+0x1c>
            mask = P0_FEATURE_PINS_PRESENT;
   2411e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   24122:	e733      	b.n	23f8c <next_sense_cond_call_handler+0x24>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   24124:	4f13      	ldr	r7, [pc, #76]	; (24174 <next_sense_cond_call_handler+0x20c>)
   24126:	f240 2247 	movw	r2, #583	; 0x247
   2412a:	4639      	mov	r1, r7
   2412c:	4812      	ldr	r0, [pc, #72]	; (24178 <next_sense_cond_call_handler+0x210>)
   2412e:	f006 ffae 	bl	2b08e <assert_print>
   24132:	f240 2147 	movw	r1, #583	; 0x247
   24136:	4638      	mov	r0, r7
   24138:	f006 ffa2 	bl	2b080 <assert_post_action>
   2413c:	e72d      	b.n	23f9a <next_sense_cond_call_handler+0x32>
            NRFX_ASSERT(0);
   2413e:	f8df 9034 	ldr.w	r9, [pc, #52]	; 24174 <next_sense_cond_call_handler+0x20c>
   24142:	f44f 7213 	mov.w	r2, #588	; 0x24c
   24146:	4649      	mov	r1, r9
   24148:	480b      	ldr	r0, [pc, #44]	; (24178 <next_sense_cond_call_handler+0x210>)
   2414a:	f006 ffa0 	bl	2b08e <assert_print>
   2414e:	f44f 7113 	mov.w	r1, #588	; 0x24c
   24152:	4648      	mov	r0, r9
   24154:	f006 ff94 	bl	2b080 <assert_post_action>
   24158:	e724      	b.n	23fa4 <next_sense_cond_call_handler+0x3c>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   2415a:	2d01      	cmp	r5, #1
   2415c:	f47f af34 	bne.w	23fc8 <next_sense_cond_call_handler+0x60>
            call_handler(pin, trigger);
   24160:	4629      	mov	r1, r5
   24162:	4620      	mov	r0, r4
   24164:	f7ff fe3e 	bl	23de4 <call_handler>
}
   24168:	e731      	b.n	23fce <next_sense_cond_call_handler+0x66>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   2416a:	2d02      	cmp	r5, #2
   2416c:	f47f af2f 	bne.w	23fce <next_sense_cond_call_handler+0x66>
   24170:	e7f6      	b.n	24160 <next_sense_cond_call_handler+0x1f8>
   24172:	bf00      	nop
   24174:	00034634 	.word	0x00034634
   24178:	000318f8 	.word	0x000318f8

0002417c <port_event_handle>:
{
   2417c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24180:	b082      	sub	sp, #8
    for (i = start_port; i < (start_port + length); i++)
   24182:	2300      	movs	r3, #0
   24184:	a801      	add	r0, sp, #4
   24186:	e008      	b.n	2419a <port_event_handle+0x1e>
        *p_masks = gpio_regs[i]->LATCH;
   24188:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   2418c:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
   24190:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
   24194:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
   24198:	3301      	adds	r3, #1
   2419a:	2b00      	cmp	r3, #0
   2419c:	d0f4      	beq.n	24188 <port_event_handle+0xc>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   2419e:	2500      	movs	r5, #0
   241a0:	2d00      	cmp	r5, #0
   241a2:	d03d      	beq.n	24220 <port_event_handle+0xa4>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   241a4:	4b4a      	ldr	r3, [pc, #296]	; (242d0 <port_event_handle+0x154>)
   241a6:	2200      	movs	r2, #0
   241a8:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
   241ac:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    } while (latch_pending_read_and_check(latch));
   241b0:	a801      	add	r0, sp, #4
   241b2:	f00c fa4f 	bl	30654 <latch_pending_read_and_check>
   241b6:	2800      	cmp	r0, #0
   241b8:	d1f1      	bne.n	2419e <port_event_handle+0x22>
}
   241ba:	b002      	add	sp, #8
   241bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            mask = P0_FEATURE_PINS_PRESENT;
   241c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   241c4:	e04e      	b.n	24264 <port_event_handle+0xe8>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   241c6:	4f43      	ldr	r7, [pc, #268]	; (242d4 <port_event_handle+0x158>)
   241c8:	f240 2247 	movw	r2, #583	; 0x247
   241cc:	4639      	mov	r1, r7
   241ce:	4842      	ldr	r0, [pc, #264]	; (242d8 <port_event_handle+0x15c>)
   241d0:	f006 ff5d 	bl	2b08e <assert_print>
   241d4:	f240 2147 	movw	r1, #583	; 0x247
   241d8:	4638      	mov	r0, r7
   241da:	f006 ff51 	bl	2b080 <assert_post_action>
   241de:	e047      	b.n	24270 <port_event_handle+0xf4>
            NRFX_ASSERT(0);
   241e0:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 242d4 <port_event_handle+0x158>
   241e4:	f44f 7213 	mov.w	r2, #588	; 0x24c
   241e8:	4641      	mov	r1, r8
   241ea:	483b      	ldr	r0, [pc, #236]	; (242d8 <port_event_handle+0x15c>)
   241ec:	f006 ff4f 	bl	2b08e <assert_print>
   241f0:	f44f 7113 	mov.w	r1, #588	; 0x24c
   241f4:	4640      	mov	r0, r8
   241f6:	f006 ff43 	bl	2b080 <assert_post_action>
   241fa:	e03d      	b.n	24278 <port_event_handle+0xfc>
            mask = P0_FEATURE_PINS_PRESENT;
   241fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    pin_number &= 0x1F;
   24200:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
   24204:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   24206:	f013 0f01 	tst.w	r3, #1
   2420a:	d045      	beq.n	24298 <port_event_handle+0x11c>
    *p_pin = pin_number & 0x1F;
   2420c:	f004 061f 	and.w	r6, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   24210:	0963      	lsrs	r3, r4, #5
   24212:	d14e      	bne.n	242b2 <port_event_handle+0x136>
    reg->LATCH = (1 << pin_number);
   24214:	2301      	movs	r3, #1
   24216:	40b3      	lsls	r3, r6
   24218:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   2421c:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
            while (latch[i])
   24220:	ab02      	add	r3, sp, #8
   24222:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   24226:	f853 4c04 	ldr.w	r4, [r3, #-4]
   2422a:	2c00      	cmp	r4, #0
   2422c:	d04e      	beq.n	242cc <port_event_handle+0x150>
                uint32_t pin = NRF_CTZ(latch[i]);
   2422e:	fa94 f4a4 	rbit	r4, r4
   24232:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   24236:	eb04 1445 	add.w	r4, r4, r5, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   2423a:	f104 0208 	add.w	r2, r4, #8
   2423e:	4b27      	ldr	r3, [pc, #156]	; (242dc <port_event_handle+0x160>)
   24240:	f833 6012 	ldrh.w	r6, [r3, r2, lsl #1]
   24244:	f3c6 0682 	ubfx	r6, r6, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   24248:	08e1      	lsrs	r1, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
   2424a:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   2424e:	a801      	add	r0, sp, #4
   24250:	2301      	movs	r3, #1
   24252:	fa03 f202 	lsl.w	r2, r3, r2
   24256:	5c43      	ldrb	r3, [r0, r1]
   24258:	ea23 0302 	bic.w	r3, r3, r2
   2425c:	5443      	strb	r3, [r0, r1]
    switch (port)
   2425e:	0963      	lsrs	r3, r4, #5
   24260:	d0ae      	beq.n	241c0 <port_event_handle+0x44>
    uint32_t mask = 0;
   24262:	462b      	mov	r3, r5
    pin_number &= 0x1F;
   24264:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
   24268:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2426a:	f013 0f01 	tst.w	r3, #1
   2426e:	d0aa      	beq.n	241c6 <port_event_handle+0x4a>
    *p_pin = pin_number & 0x1F;
   24270:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   24274:	0963      	lsrs	r3, r4, #5
   24276:	d1b3      	bne.n	241e0 <port_event_handle+0x64>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   24278:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
   2427c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   24280:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
                next_sense_cond_call_handler(pin, trigger, sense);
   24284:	f3c2 4201 	ubfx	r2, r2, #16, #2
   24288:	4631      	mov	r1, r6
   2428a:	4620      	mov	r0, r4
   2428c:	f7ff fe6c 	bl	23f68 <next_sense_cond_call_handler>
    switch (port)
   24290:	0963      	lsrs	r3, r4, #5
   24292:	d0b3      	beq.n	241fc <port_event_handle+0x80>
    uint32_t mask = 0;
   24294:	462b      	mov	r3, r5
   24296:	e7b3      	b.n	24200 <port_event_handle+0x84>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   24298:	4e0e      	ldr	r6, [pc, #56]	; (242d4 <port_event_handle+0x158>)
   2429a:	f240 2247 	movw	r2, #583	; 0x247
   2429e:	4631      	mov	r1, r6
   242a0:	480d      	ldr	r0, [pc, #52]	; (242d8 <port_event_handle+0x15c>)
   242a2:	f006 fef4 	bl	2b08e <assert_print>
   242a6:	f240 2147 	movw	r1, #583	; 0x247
   242aa:	4630      	mov	r0, r6
   242ac:	f006 fee8 	bl	2b080 <assert_post_action>
   242b0:	e7ac      	b.n	2420c <port_event_handle+0x90>
            NRFX_ASSERT(0);
   242b2:	4c08      	ldr	r4, [pc, #32]	; (242d4 <port_event_handle+0x158>)
   242b4:	f44f 7213 	mov.w	r2, #588	; 0x24c
   242b8:	4621      	mov	r1, r4
   242ba:	4807      	ldr	r0, [pc, #28]	; (242d8 <port_event_handle+0x15c>)
   242bc:	f006 fee7 	bl	2b08e <assert_print>
   242c0:	f44f 7113 	mov.w	r1, #588	; 0x24c
   242c4:	4620      	mov	r0, r4
   242c6:	f006 fedb 	bl	2b080 <assert_post_action>
   242ca:	e7a3      	b.n	24214 <port_event_handle+0x98>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   242cc:	3501      	adds	r5, #1
   242ce:	e767      	b.n	241a0 <port_event_handle+0x24>
   242d0:	40006000 	.word	0x40006000
   242d4:	00034634 	.word	0x00034634
   242d8:	000318f8 	.word	0x000318f8
   242dc:	20000840 	.word	0x20000840

000242e0 <nrfx_gpiote_input_configure>:
{
   242e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   242e4:	4604      	mov	r4, r0
   242e6:	4615      	mov	r5, r2
   242e8:	461e      	mov	r6, r3
    if (p_input_config)
   242ea:	2900      	cmp	r1, #0
   242ec:	d03b      	beq.n	24366 <nrfx_gpiote_input_configure+0x86>
   242ee:	4688      	mov	r8, r1
        if (pin_is_task_output(pin))
   242f0:	f00c f993 	bl	3061a <pin_is_task_output>
   242f4:	2800      	cmp	r0, #0
   242f6:	f040 80c4 	bne.w	24482 <nrfx_gpiote_input_configure+0x1a2>
    switch (port)
   242fa:	0963      	lsrs	r3, r4, #5
   242fc:	d057      	beq.n	243ae <nrfx_gpiote_input_configure+0xce>
    uint32_t mask = 0;
   242fe:	2300      	movs	r3, #0
    pin_number &= 0x1F;
   24300:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
   24304:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   24306:	f013 0f01 	tst.w	r3, #1
   2430a:	d053      	beq.n	243b4 <nrfx_gpiote_input_configure+0xd4>
    *p_pin = pin_number & 0x1F;
   2430c:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   24310:	0963      	lsrs	r3, r4, #5
   24312:	d15c      	bne.n	243ce <nrfx_gpiote_input_configure+0xee>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   24314:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
   24318:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   2431c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   24320:	f1b8 0f00 	cmp.w	r8, #0
   24324:	d061      	beq.n	243ea <nrfx_gpiote_input_configure+0x10a>
   24326:	220c      	movs	r2, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   24328:	f042 0203 	orr.w	r2, r2, #3
    cnf &= ~to_update;
   2432c:	ea23 0302 	bic.w	r3, r3, r2
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   24330:	f1b8 0f00 	cmp.w	r8, #0
   24334:	d05b      	beq.n	243ee <nrfx_gpiote_input_configure+0x10e>
   24336:	f898 2000 	ldrb.w	r2, [r8]
   2433a:	0092      	lsls	r2, r2, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2433c:	4313      	orrs	r3, r2
    reg->PIN_CNF[pin_number] = cnf;
   2433e:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
   24342:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   24346:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   2434a:	4a52      	ldr	r2, [pc, #328]	; (24494 <nrfx_gpiote_input_configure+0x1b4>)
   2434c:	f104 0108 	add.w	r1, r4, #8
   24350:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   24354:	f023 0302 	bic.w	r3, r3, #2
   24358:	b29b      	uxth	r3, r3
   2435a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   2435e:	f043 0301 	orr.w	r3, r3, #1
   24362:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   24366:	b1cd      	cbz	r5, 2439c <nrfx_gpiote_input_configure+0xbc>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   24368:	782f      	ldrb	r7, [r5, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   2436a:	f8d5 8004 	ldr.w	r8, [r5, #4]
        if (pin_is_output(pin))
   2436e:	4620      	mov	r0, r4
   24370:	f7ff fce6 	bl	23d40 <pin_is_output>
   24374:	2800      	cmp	r0, #0
   24376:	d03c      	beq.n	243f2 <nrfx_gpiote_input_configure+0x112>
            if (use_evt)
   24378:	f1b8 0f00 	cmp.w	r8, #0
   2437c:	f040 8083 	bne.w	24486 <nrfx_gpiote_input_configure+0x1a6>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   24380:	4a44      	ldr	r2, [pc, #272]	; (24494 <nrfx_gpiote_input_configure+0x1b4>)
   24382:	f104 0108 	add.w	r1, r4, #8
   24386:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   2438a:	f023 031c 	bic.w	r3, r3, #28
   2438e:	b29b      	uxth	r3, r3
   24390:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   24394:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
   24398:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
   2439c:	2e00      	cmp	r6, #0
   2439e:	d076      	beq.n	2448e <nrfx_gpiote_input_configure+0x1ae>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   243a0:	6872      	ldr	r2, [r6, #4]
   243a2:	6831      	ldr	r1, [r6, #0]
   243a4:	4620      	mov	r0, r4
   243a6:	f7ff fd87 	bl	23eb8 <pin_handler_set>
}
   243aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            mask = P0_FEATURE_PINS_PRESENT;
   243ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   243b2:	e7a5      	b.n	24300 <nrfx_gpiote_input_configure+0x20>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   243b4:	4f38      	ldr	r7, [pc, #224]	; (24498 <nrfx_gpiote_input_configure+0x1b8>)
   243b6:	f240 2247 	movw	r2, #583	; 0x247
   243ba:	4639      	mov	r1, r7
   243bc:	4837      	ldr	r0, [pc, #220]	; (2449c <nrfx_gpiote_input_configure+0x1bc>)
   243be:	f006 fe66 	bl	2b08e <assert_print>
   243c2:	f240 2147 	movw	r1, #583	; 0x247
   243c6:	4638      	mov	r0, r7
   243c8:	f006 fe5a 	bl	2b080 <assert_post_action>
   243cc:	e79e      	b.n	2430c <nrfx_gpiote_input_configure+0x2c>
            NRFX_ASSERT(0);
   243ce:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 24498 <nrfx_gpiote_input_configure+0x1b8>
   243d2:	f44f 7213 	mov.w	r2, #588	; 0x24c
   243d6:	4649      	mov	r1, r9
   243d8:	4830      	ldr	r0, [pc, #192]	; (2449c <nrfx_gpiote_input_configure+0x1bc>)
   243da:	f006 fe58 	bl	2b08e <assert_print>
   243de:	f44f 7113 	mov.w	r1, #588	; 0x24c
   243e2:	4648      	mov	r0, r9
   243e4:	f006 fe4c 	bl	2b080 <assert_post_action>
   243e8:	e794      	b.n	24314 <nrfx_gpiote_input_configure+0x34>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   243ea:	2200      	movs	r2, #0
   243ec:	e79c      	b.n	24328 <nrfx_gpiote_input_configure+0x48>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   243ee:	2200      	movs	r2, #0
   243f0:	e7a4      	b.n	2433c <nrfx_gpiote_input_configure+0x5c>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   243f2:	4a28      	ldr	r2, [pc, #160]	; (24494 <nrfx_gpiote_input_configure+0x1b4>)
   243f4:	f104 0108 	add.w	r1, r4, #8
   243f8:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   243fc:	f023 0320 	bic.w	r3, r3, #32
   24400:	04db      	lsls	r3, r3, #19
   24402:	0cdb      	lsrs	r3, r3, #19
   24404:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            if (use_evt)
   24408:	f1b8 0f00 	cmp.w	r8, #0
   2440c:	d0b8      	beq.n	24380 <nrfx_gpiote_input_configure+0xa0>
                if (!edge)
   2440e:	2f03      	cmp	r7, #3
   24410:	d83b      	bhi.n	2448a <nrfx_gpiote_input_configure+0x1aa>
                uint8_t ch = *p_trigger_config->p_in_channel;
   24412:	686b      	ldr	r3, [r5, #4]
   24414:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   24416:	b937      	cbnz	r7, 24426 <nrfx_gpiote_input_configure+0x146>
    p_reg->CONFIG[idx] = 0;
   24418:	f505 75a2 	add.w	r5, r5, #324	; 0x144
   2441c:	4b20      	ldr	r3, [pc, #128]	; (244a0 <nrfx_gpiote_input_configure+0x1c0>)
   2441e:	2200      	movs	r2, #0
   24420:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
   24424:	e7ac      	b.n	24380 <nrfx_gpiote_input_configure+0xa0>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
   24426:	4638      	mov	r0, r7
   24428:	f00c f90e 	bl	30648 <gpiote_trigger_to_polarity>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   2442c:	4b1c      	ldr	r3, [pc, #112]	; (244a0 <nrfx_gpiote_input_configure+0x1c0>)
   2442e:	f505 72a2 	add.w	r2, r5, #324	; 0x144
   24432:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   24436:	f021 0103 	bic.w	r1, r1, #3
   2443a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   2443e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   24442:	f421 3147 	bic.w	r1, r1, #203776	; 0x31c00
   24446:	f421 7140 	bic.w	r1, r1, #768	; 0x300
   2444a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2444e:	f853 c022 	ldr.w	ip, [r3, r2, lsl #2]
   24452:	0221      	lsls	r1, r4, #8
   24454:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
   24458:	0400      	lsls	r0, r0, #16
   2445a:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2445e:	4301      	orrs	r1, r0
   24460:	ea4c 0101 	orr.w	r1, ip, r1
   24464:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   24468:	036b      	lsls	r3, r5, #13
   2446a:	b29b      	uxth	r3, r3
   2446c:	4a09      	ldr	r2, [pc, #36]	; (24494 <nrfx_gpiote_input_configure+0x1b4>)
   2446e:	f104 0108 	add.w	r1, r4, #8
   24472:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
   24476:	4303      	orrs	r3, r0
   24478:	f043 0320 	orr.w	r3, r3, #32
   2447c:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
   24480:	e77e      	b.n	24380 <nrfx_gpiote_input_configure+0xa0>
            return NRFX_ERROR_INVALID_PARAM;
   24482:	4808      	ldr	r0, [pc, #32]	; (244a4 <nrfx_gpiote_input_configure+0x1c4>)
   24484:	e791      	b.n	243aa <nrfx_gpiote_input_configure+0xca>
                return NRFX_ERROR_INVALID_PARAM;
   24486:	4807      	ldr	r0, [pc, #28]	; (244a4 <nrfx_gpiote_input_configure+0x1c4>)
   24488:	e78f      	b.n	243aa <nrfx_gpiote_input_configure+0xca>
                    return NRFX_ERROR_INVALID_PARAM;
   2448a:	4806      	ldr	r0, [pc, #24]	; (244a4 <nrfx_gpiote_input_configure+0x1c4>)
   2448c:	e78d      	b.n	243aa <nrfx_gpiote_input_configure+0xca>
        err = NRFX_SUCCESS;
   2448e:	4806      	ldr	r0, [pc, #24]	; (244a8 <nrfx_gpiote_input_configure+0x1c8>)
   24490:	e78b      	b.n	243aa <nrfx_gpiote_input_configure+0xca>
   24492:	bf00      	nop
   24494:	20000840 	.word	0x20000840
   24498:	00034634 	.word	0x00034634
   2449c:	000318f8 	.word	0x000318f8
   244a0:	40006000 	.word	0x40006000
   244a4:	0bad0004 	.word	0x0bad0004
   244a8:	0bad0000 	.word	0x0bad0000

000244ac <nrfx_gpiote_output_configure>:
{
   244ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   244b0:	4604      	mov	r4, r0
   244b2:	4615      	mov	r5, r2
    if (p_config)
   244b4:	2900      	cmp	r1, #0
   244b6:	d05c      	beq.n	24572 <nrfx_gpiote_output_configure+0xc6>
   244b8:	460f      	mov	r7, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   244ba:	f00c f8bd 	bl	30638 <pin_is_input>
   244be:	b128      	cbz	r0, 244cc <nrfx_gpiote_output_configure+0x20>
   244c0:	4620      	mov	r0, r4
   244c2:	f7ff fc27 	bl	23d14 <pin_in_use_by_te>
   244c6:	2800      	cmp	r0, #0
   244c8:	f040 80c3 	bne.w	24652 <nrfx_gpiote_output_configure+0x1a6>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   244cc:	4620      	mov	r0, r4
   244ce:	f7ff fc2b 	bl	23d28 <pin_has_trigger>
   244d2:	b118      	cbz	r0, 244dc <nrfx_gpiote_output_configure+0x30>
   244d4:	787b      	ldrb	r3, [r7, #1]
   244d6:	2b01      	cmp	r3, #1
   244d8:	f000 80bd 	beq.w	24656 <nrfx_gpiote_output_configure+0x1aa>
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   244dc:	f107 0901 	add.w	r9, r7, #1
   244e0:	f107 0802 	add.w	r8, r7, #2
    switch (port)
   244e4:	0963      	lsrs	r3, r4, #5
   244e6:	d061      	beq.n	245ac <nrfx_gpiote_output_configure+0x100>
    uint32_t mask = 0;
   244e8:	2300      	movs	r3, #0
    pin_number &= 0x1F;
   244ea:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
   244ee:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   244f0:	f013 0f01 	tst.w	r3, #1
   244f4:	d05d      	beq.n	245b2 <nrfx_gpiote_output_configure+0x106>
    *p_pin = pin_number & 0x1F;
   244f6:	f004 061f 	and.w	r6, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   244fa:	0963      	lsrs	r3, r4, #5
   244fc:	d166      	bne.n	245cc <nrfx_gpiote_output_configure+0x120>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   244fe:	f506 73e0 	add.w	r3, r6, #448	; 0x1c0
   24502:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   24506:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2450a:	f1b9 0f00 	cmp.w	r9, #0
   2450e:	d06b      	beq.n	245e8 <nrfx_gpiote_output_configure+0x13c>
   24510:	2302      	movs	r3, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   24512:	f043 0301 	orr.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   24516:	f1b8 0f00 	cmp.w	r8, #0
   2451a:	d067      	beq.n	245ec <nrfx_gpiote_output_configure+0x140>
   2451c:	210c      	movs	r1, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2451e:	430b      	orrs	r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   24520:	2f00      	cmp	r7, #0
   24522:	d065      	beq.n	245f0 <nrfx_gpiote_output_configure+0x144>
   24524:	f44f 61e0 	mov.w	r1, #1792	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   24528:	430b      	orrs	r3, r1
    cnf &= ~to_update;
   2452a:	ea22 0203 	bic.w	r2, r2, r3
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   2452e:	f1b9 0f00 	cmp.w	r9, #0
   24532:	d05f      	beq.n	245f4 <nrfx_gpiote_output_configure+0x148>
   24534:	787b      	ldrb	r3, [r7, #1]
   24536:	005b      	lsls	r3, r3, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   24538:	f043 0301 	orr.w	r3, r3, #1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   2453c:	f1b8 0f00 	cmp.w	r8, #0
   24540:	d05a      	beq.n	245f8 <nrfx_gpiote_output_configure+0x14c>
   24542:	78b9      	ldrb	r1, [r7, #2]
   24544:	0089      	lsls	r1, r1, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   24546:	430b      	orrs	r3, r1
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   24548:	2f00      	cmp	r7, #0
   2454a:	d057      	beq.n	245fc <nrfx_gpiote_output_configure+0x150>
   2454c:	7839      	ldrb	r1, [r7, #0]
   2454e:	0209      	lsls	r1, r1, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   24550:	430b      	orrs	r3, r1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   24552:	4313      	orrs	r3, r2
    reg->PIN_CNF[pin_number] = cnf;
   24554:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
   24558:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   2455c:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   24560:	4a40      	ldr	r2, [pc, #256]	; (24664 <nrfx_gpiote_output_configure+0x1b8>)
   24562:	f104 0108 	add.w	r1, r4, #8
   24566:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   2456a:	f043 0303 	orr.w	r3, r3, #3
   2456e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   24572:	2d00      	cmp	r5, #0
   24574:	d071      	beq.n	2465a <nrfx_gpiote_output_configure+0x1ae>
        if (pin_is_input(pin))
   24576:	4620      	mov	r0, r4
   24578:	f00c f85e 	bl	30638 <pin_is_input>
   2457c:	2800      	cmp	r0, #0
   2457e:	d16e      	bne.n	2465e <nrfx_gpiote_output_configure+0x1b2>
        uint32_t ch = p_task_config->task_ch;
   24580:	782b      	ldrb	r3, [r5, #0]
    p_reg->CONFIG[idx] = 0;
   24582:	f503 71a2 	add.w	r1, r3, #324	; 0x144
   24586:	4a38      	ldr	r2, [pc, #224]	; (24668 <nrfx_gpiote_output_configure+0x1bc>)
   24588:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   2458c:	4935      	ldr	r1, [pc, #212]	; (24664 <nrfx_gpiote_output_configure+0x1b8>)
   2458e:	f104 0008 	add.w	r0, r4, #8
   24592:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
   24596:	f022 0220 	bic.w	r2, r2, #32
   2459a:	04d2      	lsls	r2, r2, #19
   2459c:	0cd2      	lsrs	r2, r2, #19
   2459e:	f821 2010 	strh.w	r2, [r1, r0, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   245a2:	786a      	ldrb	r2, [r5, #1]
   245a4:	bb62      	cbnz	r2, 24600 <nrfx_gpiote_output_configure+0x154>
    return NRFX_SUCCESS;
   245a6:	4831      	ldr	r0, [pc, #196]	; (2466c <nrfx_gpiote_output_configure+0x1c0>)
}
   245a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            mask = P0_FEATURE_PINS_PRESENT;
   245ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   245b0:	e79b      	b.n	244ea <nrfx_gpiote_output_configure+0x3e>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   245b2:	4e2f      	ldr	r6, [pc, #188]	; (24670 <nrfx_gpiote_output_configure+0x1c4>)
   245b4:	f240 2247 	movw	r2, #583	; 0x247
   245b8:	4631      	mov	r1, r6
   245ba:	482e      	ldr	r0, [pc, #184]	; (24674 <nrfx_gpiote_output_configure+0x1c8>)
   245bc:	f006 fd67 	bl	2b08e <assert_print>
   245c0:	f240 2147 	movw	r1, #583	; 0x247
   245c4:	4630      	mov	r0, r6
   245c6:	f006 fd5b 	bl	2b080 <assert_post_action>
   245ca:	e794      	b.n	244f6 <nrfx_gpiote_output_configure+0x4a>
            NRFX_ASSERT(0);
   245cc:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 24670 <nrfx_gpiote_output_configure+0x1c4>
   245d0:	f44f 7213 	mov.w	r2, #588	; 0x24c
   245d4:	4651      	mov	r1, sl
   245d6:	4827      	ldr	r0, [pc, #156]	; (24674 <nrfx_gpiote_output_configure+0x1c8>)
   245d8:	f006 fd59 	bl	2b08e <assert_print>
   245dc:	f44f 7113 	mov.w	r1, #588	; 0x24c
   245e0:	4650      	mov	r0, sl
   245e2:	f006 fd4d 	bl	2b080 <assert_post_action>
   245e6:	e78a      	b.n	244fe <nrfx_gpiote_output_configure+0x52>
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   245e8:	2300      	movs	r3, #0
   245ea:	e792      	b.n	24512 <nrfx_gpiote_output_configure+0x66>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   245ec:	2100      	movs	r1, #0
   245ee:	e796      	b.n	2451e <nrfx_gpiote_output_configure+0x72>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   245f0:	2100      	movs	r1, #0
   245f2:	e799      	b.n	24528 <nrfx_gpiote_output_configure+0x7c>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   245f4:	2300      	movs	r3, #0
   245f6:	e79f      	b.n	24538 <nrfx_gpiote_output_configure+0x8c>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   245f8:	2100      	movs	r1, #0
   245fa:	e7a4      	b.n	24546 <nrfx_gpiote_output_configure+0x9a>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   245fc:	2100      	movs	r1, #0
   245fe:	e7a7      	b.n	24550 <nrfx_gpiote_output_configure+0xa4>
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   24600:	78af      	ldrb	r7, [r5, #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   24602:	4819      	ldr	r0, [pc, #100]	; (24668 <nrfx_gpiote_output_configure+0x1bc>)
   24604:	f503 75a2 	add.w	r5, r3, #324	; 0x144
   24608:	f850 1025 	ldr.w	r1, [r0, r5, lsl #2]
   2460c:	f421 1198 	bic.w	r1, r1, #1245184	; 0x130000
   24610:	f421 51f8 	bic.w	r1, r1, #7936	; 0x1f00
   24614:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   24618:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
   2461c:	0221      	lsls	r1, r4, #8
   2461e:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   24622:	0412      	lsls	r2, r2, #16
   24624:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   24628:	430a      	orrs	r2, r1
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   2462a:	0539      	lsls	r1, r7, #20
   2462c:	f401 1180 	and.w	r1, r1, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   24630:	430a      	orrs	r2, r1
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   24632:	4332      	orrs	r2, r6
   24634:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   24638:	035b      	lsls	r3, r3, #13
   2463a:	b29b      	uxth	r3, r3
   2463c:	4a09      	ldr	r2, [pc, #36]	; (24664 <nrfx_gpiote_output_configure+0x1b8>)
   2463e:	3408      	adds	r4, #8
   24640:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
   24644:	430b      	orrs	r3, r1
   24646:	f043 0320 	orr.w	r3, r3, #32
   2464a:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    return NRFX_SUCCESS;
   2464e:	4807      	ldr	r0, [pc, #28]	; (2466c <nrfx_gpiote_output_configure+0x1c0>)
   24650:	e7aa      	b.n	245a8 <nrfx_gpiote_output_configure+0xfc>
   24652:	4809      	ldr	r0, [pc, #36]	; (24678 <nrfx_gpiote_output_configure+0x1cc>)
   24654:	e7a8      	b.n	245a8 <nrfx_gpiote_output_configure+0xfc>
   24656:	4808      	ldr	r0, [pc, #32]	; (24678 <nrfx_gpiote_output_configure+0x1cc>)
   24658:	e7a6      	b.n	245a8 <nrfx_gpiote_output_configure+0xfc>
   2465a:	4804      	ldr	r0, [pc, #16]	; (2466c <nrfx_gpiote_output_configure+0x1c0>)
   2465c:	e7a4      	b.n	245a8 <nrfx_gpiote_output_configure+0xfc>
            return NRFX_ERROR_INVALID_PARAM;
   2465e:	4806      	ldr	r0, [pc, #24]	; (24678 <nrfx_gpiote_output_configure+0x1cc>)
   24660:	e7a2      	b.n	245a8 <nrfx_gpiote_output_configure+0xfc>
   24662:	bf00      	nop
   24664:	20000840 	.word	0x20000840
   24668:	40006000 	.word	0x40006000
   2466c:	0bad0000 	.word	0x0bad0000
   24670:	00034634 	.word	0x00034634
   24674:	000318f8 	.word	0x000318f8
   24678:	0bad0004 	.word	0x0bad0004

0002467c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   2467c:	4b01      	ldr	r3, [pc, #4]	; (24684 <nrfx_gpiote_global_callback_set+0x8>)
   2467e:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
   24680:	60d9      	str	r1, [r3, #12]
}
   24682:	4770      	bx	lr
   24684:	20000840 	.word	0x20000840

00024688 <nrfx_gpiote_channel_get>:
{
   24688:	b570      	push	{r4, r5, r6, lr}
   2468a:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
   2468c:	460d      	mov	r5, r1
   2468e:	b159      	cbz	r1, 246a8 <nrfx_gpiote_channel_get+0x20>
    if (pin_in_use_by_te(pin))
   24690:	4620      	mov	r0, r4
   24692:	f7ff fb3f 	bl	23d14 <pin_in_use_by_te>
   24696:	b1a0      	cbz	r0, 246c2 <nrfx_gpiote_channel_get+0x3a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   24698:	3408      	adds	r4, #8
   2469a:	4b0b      	ldr	r3, [pc, #44]	; (246c8 <nrfx_gpiote_channel_get+0x40>)
   2469c:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
   246a0:	0b5b      	lsrs	r3, r3, #13
   246a2:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
   246a4:	4809      	ldr	r0, [pc, #36]	; (246cc <nrfx_gpiote_channel_get+0x44>)
}
   246a6:	bd70      	pop	{r4, r5, r6, pc}
    NRFX_ASSERT(p_channel);
   246a8:	4e09      	ldr	r6, [pc, #36]	; (246d0 <nrfx_gpiote_channel_get+0x48>)
   246aa:	f240 2235 	movw	r2, #565	; 0x235
   246ae:	4631      	mov	r1, r6
   246b0:	4808      	ldr	r0, [pc, #32]	; (246d4 <nrfx_gpiote_channel_get+0x4c>)
   246b2:	f006 fcec 	bl	2b08e <assert_print>
   246b6:	f240 2135 	movw	r1, #565	; 0x235
   246ba:	4630      	mov	r0, r6
   246bc:	f006 fce0 	bl	2b080 <assert_post_action>
   246c0:	e7e6      	b.n	24690 <nrfx_gpiote_channel_get+0x8>
        return NRFX_ERROR_INVALID_PARAM;
   246c2:	4805      	ldr	r0, [pc, #20]	; (246d8 <nrfx_gpiote_channel_get+0x50>)
   246c4:	e7ef      	b.n	246a6 <nrfx_gpiote_channel_get+0x1e>
   246c6:	bf00      	nop
   246c8:	20000840 	.word	0x20000840
   246cc:	0bad0000 	.word	0x0bad0000
   246d0:	00034d94 	.word	0x00034d94
   246d4:	000318f8 	.word	0x000318f8
   246d8:	0bad0004 	.word	0x0bad0004

000246dc <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   246dc:	4b10      	ldr	r3, [pc, #64]	; (24720 <nrfx_gpiote_init+0x44>)
   246de:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
   246e2:	b10b      	cbz	r3, 246e8 <nrfx_gpiote_init+0xc>
        return err_code;
   246e4:	480f      	ldr	r0, [pc, #60]	; (24724 <nrfx_gpiote_init+0x48>)
}
   246e6:	4770      	bx	lr
{
   246e8:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   246ea:	4c0d      	ldr	r4, [pc, #52]	; (24720 <nrfx_gpiote_init+0x44>)
   246ec:	2240      	movs	r2, #64	; 0x40
   246ee:	2100      	movs	r1, #0
   246f0:	f104 0010 	add.w	r0, r4, #16
   246f4:	f00c fb31 	bl	30d5a <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   246f8:	2006      	movs	r0, #6
   246fa:	f7f1 f94d 	bl	15998 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   246fe:	4b0a      	ldr	r3, [pc, #40]	; (24728 <nrfx_gpiote_init+0x4c>)
   24700:	2200      	movs	r2, #0
   24702:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
   24706:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   2470a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   2470e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   24712:	2301      	movs	r3, #1
   24714:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   24718:	6563      	str	r3, [r4, #84]	; 0x54
    return err_code;
   2471a:	4804      	ldr	r0, [pc, #16]	; (2472c <nrfx_gpiote_init+0x50>)
}
   2471c:	bd10      	pop	{r4, pc}
   2471e:	bf00      	nop
   24720:	20000840 	.word	0x20000840
   24724:	0bad0005 	.word	0x0bad0005
   24728:	40006000 	.word	0x40006000
   2472c:	0bad0000 	.word	0x0bad0000

00024730 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   24730:	4b03      	ldr	r3, [pc, #12]	; (24740 <nrfx_gpiote_is_init+0x10>)
   24732:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
   24736:	3800      	subs	r0, #0
   24738:	bf18      	it	ne
   2473a:	2001      	movne	r0, #1
   2473c:	4770      	bx	lr
   2473e:	bf00      	nop
   24740:	20000840 	.word	0x20000840

00024744 <nrfx_gpiote_channel_free>:
{
   24744:	b508      	push	{r3, lr}
   24746:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   24748:	4801      	ldr	r0, [pc, #4]	; (24750 <nrfx_gpiote_channel_free+0xc>)
   2474a:	f7ff fab7 	bl	23cbc <nrfx_flag32_free>
}
   2474e:	bd08      	pop	{r3, pc}
   24750:	20000890 	.word	0x20000890

00024754 <nrfx_gpiote_channel_alloc>:
{
   24754:	b508      	push	{r3, lr}
   24756:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   24758:	4801      	ldr	r0, [pc, #4]	; (24760 <nrfx_gpiote_channel_alloc+0xc>)
   2475a:	f7ff fa87 	bl	23c6c <nrfx_flag32_alloc>
}
   2475e:	bd08      	pop	{r3, pc}
   24760:	20000890 	.word	0x20000890

00024764 <nrfx_gpiote_trigger_enable>:
{
   24764:	b570      	push	{r4, r5, r6, lr}
   24766:	4604      	mov	r4, r0
   24768:	460d      	mov	r5, r1
    NRFX_ASSERT(pin_has_trigger(pin));
   2476a:	f7ff fadd 	bl	23d28 <pin_has_trigger>
   2476e:	b1b8      	cbz	r0, 247a0 <nrfx_gpiote_trigger_enable+0x3c>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   24770:	4620      	mov	r0, r4
   24772:	f7ff facf 	bl	23d14 <pin_in_use_by_te>
   24776:	b118      	cbz	r0, 24780 <nrfx_gpiote_trigger_enable+0x1c>
   24778:	4620      	mov	r0, r4
   2477a:	f00b ff5d 	bl	30638 <pin_is_input>
   2477e:	b9e0      	cbnz	r0, 247ba <nrfx_gpiote_trigger_enable+0x56>
        NRFX_ASSERT(int_enable);
   24780:	2d00      	cmp	r5, #0
   24782:	d049      	beq.n	24818 <nrfx_gpiote_trigger_enable+0xb4>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   24784:	f104 0308 	add.w	r3, r4, #8
   24788:	4a61      	ldr	r2, [pc, #388]	; (24910 <nrfx_gpiote_trigger_enable+0x1ac>)
   2478a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   2478e:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   24792:	2b04      	cmp	r3, #4
   24794:	f000 8081 	beq.w	2489a <nrfx_gpiote_trigger_enable+0x136>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   24798:	2b05      	cmp	r3, #5
   2479a:	d14a      	bne.n	24832 <nrfx_gpiote_trigger_enable+0xce>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   2479c:	2602      	movs	r6, #2
   2479e:	e07d      	b.n	2489c <nrfx_gpiote_trigger_enable+0x138>
    NRFX_ASSERT(pin_has_trigger(pin));
   247a0:	4e5c      	ldr	r6, [pc, #368]	; (24914 <nrfx_gpiote_trigger_enable+0x1b0>)
   247a2:	f240 32df 	movw	r2, #991	; 0x3df
   247a6:	4631      	mov	r1, r6
   247a8:	485b      	ldr	r0, [pc, #364]	; (24918 <nrfx_gpiote_trigger_enable+0x1b4>)
   247aa:	f006 fc70 	bl	2b08e <assert_print>
   247ae:	f240 31df 	movw	r1, #991	; 0x3df
   247b2:	4630      	mov	r0, r6
   247b4:	f006 fc64 	bl	2b080 <assert_post_action>
   247b8:	e7da      	b.n	24770 <nrfx_gpiote_trigger_enable+0xc>
        uint8_t ch = pin_te_get(pin);
   247ba:	4620      	mov	r0, r4
   247bc:	f7ff faca 	bl	23d54 <pin_te_get>
   247c0:	4604      	mov	r4, r0
}
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
   247c2:	2807      	cmp	r0, #7
   247c4:	d81b      	bhi.n	247fe <nrfx_gpiote_trigger_enable+0x9a>
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   247c6:	00a3      	lsls	r3, r4, #2
   247c8:	f503 7380 	add.w	r3, r3, #256	; 0x100
   247cc:	b29b      	uxth	r3, r3
    return ((uint32_t)p_reg + event);
   247ce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   247d2:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   247d6:	2200      	movs	r2, #0
   247d8:	601a      	str	r2, [r3, #0]
   247da:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   247dc:	4a4f      	ldr	r2, [pc, #316]	; (2491c <nrfx_gpiote_trigger_enable+0x1b8>)
   247de:	f504 71a2 	add.w	r1, r4, #324	; 0x144
   247e2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   247e6:	f043 0301 	orr.w	r3, r3, #1
   247ea:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
   247ee:	2d00      	cmp	r5, #0
   247f0:	d06d      	beq.n	248ce <nrfx_gpiote_trigger_enable+0x16a>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   247f2:	2001      	movs	r0, #1
   247f4:	fa00 f404 	lsl.w	r4, r0, r4
    p_reg->INTENSET = mask;
   247f8:	f8c2 4304 	str.w	r4, [r2, #772]	; 0x304
}
   247fc:	e067      	b.n	248ce <nrfx_gpiote_trigger_enable+0x16a>
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
   247fe:	4e48      	ldr	r6, [pc, #288]	; (24920 <nrfx_gpiote_trigger_enable+0x1bc>)
   24800:	f44f 7223 	mov.w	r2, #652	; 0x28c
   24804:	4631      	mov	r1, r6
   24806:	4844      	ldr	r0, [pc, #272]	; (24918 <nrfx_gpiote_trigger_enable+0x1b4>)
   24808:	f006 fc41 	bl	2b08e <assert_print>
   2480c:	f44f 7123 	mov.w	r1, #652	; 0x28c
   24810:	4630      	mov	r0, r6
   24812:	f006 fc35 	bl	2b080 <assert_post_action>
   24816:	e7d6      	b.n	247c6 <nrfx_gpiote_trigger_enable+0x62>
        NRFX_ASSERT(int_enable);
   24818:	4d3e      	ldr	r5, [pc, #248]	; (24914 <nrfx_gpiote_trigger_enable+0x1b0>)
   2481a:	f240 32ee 	movw	r2, #1006	; 0x3ee
   2481e:	4629      	mov	r1, r5
   24820:	483d      	ldr	r0, [pc, #244]	; (24918 <nrfx_gpiote_trigger_enable+0x1b4>)
   24822:	f006 fc34 	bl	2b08e <assert_print>
   24826:	f240 31ee 	movw	r1, #1006	; 0x3ee
   2482a:	4628      	mov	r0, r5
   2482c:	f006 fc28 	bl	2b080 <assert_post_action>
   24830:	e7a8      	b.n	24784 <nrfx_gpiote_trigger_enable+0x20>
    switch (port)
   24832:	0963      	lsrs	r3, r4, #5
   24834:	d014      	beq.n	24860 <nrfx_gpiote_trigger_enable+0xfc>
    uint32_t mask = 0;
   24836:	2300      	movs	r3, #0
    pin_number &= 0x1F;
   24838:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
   2483c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2483e:	f013 0f01 	tst.w	r3, #1
   24842:	d010      	beq.n	24866 <nrfx_gpiote_trigger_enable+0x102>
    *p_pin = pin_number & 0x1F;
   24844:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   24848:	0963      	lsrs	r3, r4, #5
   2484a:	d119      	bne.n	24880 <nrfx_gpiote_trigger_enable+0x11c>
    return p_reg->IN;
   2484c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   24850:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   24854:	40eb      	lsrs	r3, r5
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   24856:	f013 0f01 	tst.w	r3, #1
   2485a:	d039      	beq.n	248d0 <nrfx_gpiote_trigger_enable+0x16c>
   2485c:	2603      	movs	r6, #3
   2485e:	e01d      	b.n	2489c <nrfx_gpiote_trigger_enable+0x138>
            mask = P0_FEATURE_PINS_PRESENT;
   24860:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   24864:	e7e8      	b.n	24838 <nrfx_gpiote_trigger_enable+0xd4>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   24866:	4d2f      	ldr	r5, [pc, #188]	; (24924 <nrfx_gpiote_trigger_enable+0x1c0>)
   24868:	f240 2247 	movw	r2, #583	; 0x247
   2486c:	4629      	mov	r1, r5
   2486e:	482a      	ldr	r0, [pc, #168]	; (24918 <nrfx_gpiote_trigger_enable+0x1b4>)
   24870:	f006 fc0d 	bl	2b08e <assert_print>
   24874:	f240 2147 	movw	r1, #583	; 0x247
   24878:	4628      	mov	r0, r5
   2487a:	f006 fc01 	bl	2b080 <assert_post_action>
   2487e:	e7e1      	b.n	24844 <nrfx_gpiote_trigger_enable+0xe0>
            NRFX_ASSERT(0);
   24880:	4e28      	ldr	r6, [pc, #160]	; (24924 <nrfx_gpiote_trigger_enable+0x1c0>)
   24882:	f44f 7213 	mov.w	r2, #588	; 0x24c
   24886:	4631      	mov	r1, r6
   24888:	4823      	ldr	r0, [pc, #140]	; (24918 <nrfx_gpiote_trigger_enable+0x1b4>)
   2488a:	f006 fc00 	bl	2b08e <assert_print>
   2488e:	f44f 7113 	mov.w	r1, #588	; 0x24c
   24892:	4630      	mov	r0, r6
   24894:	f006 fbf4 	bl	2b080 <assert_post_action>
   24898:	e7d8      	b.n	2484c <nrfx_gpiote_trigger_enable+0xe8>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   2489a:	2603      	movs	r6, #3
    switch (port)
   2489c:	0963      	lsrs	r3, r4, #5
   2489e:	d019      	beq.n	248d4 <nrfx_gpiote_trigger_enable+0x170>
    uint32_t mask = 0;
   248a0:	2300      	movs	r3, #0
    pin_number &= 0x1F;
   248a2:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
   248a6:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   248a8:	f013 0f01 	tst.w	r3, #1
   248ac:	d015      	beq.n	248da <nrfx_gpiote_trigger_enable+0x176>
    *p_pin = pin_number & 0x1F;
   248ae:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   248b2:	0963      	lsrs	r3, r4, #5
   248b4:	d11e      	bne.n	248f4 <nrfx_gpiote_trigger_enable+0x190>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   248b6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   248ba:	f505 72e0 	add.w	r2, r5, #448	; 0x1c0
   248be:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
   248c2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   248c6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   248ca:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
   248ce:	bd70      	pop	{r4, r5, r6, pc}
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   248d0:	2602      	movs	r6, #2
   248d2:	e7e3      	b.n	2489c <nrfx_gpiote_trigger_enable+0x138>
            mask = P0_FEATURE_PINS_PRESENT;
   248d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   248d8:	e7e3      	b.n	248a2 <nrfx_gpiote_trigger_enable+0x13e>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   248da:	4d12      	ldr	r5, [pc, #72]	; (24924 <nrfx_gpiote_trigger_enable+0x1c0>)
   248dc:	f240 2247 	movw	r2, #583	; 0x247
   248e0:	4629      	mov	r1, r5
   248e2:	480d      	ldr	r0, [pc, #52]	; (24918 <nrfx_gpiote_trigger_enable+0x1b4>)
   248e4:	f006 fbd3 	bl	2b08e <assert_print>
   248e8:	f240 2147 	movw	r1, #583	; 0x247
   248ec:	4628      	mov	r0, r5
   248ee:	f006 fbc7 	bl	2b080 <assert_post_action>
   248f2:	e7dc      	b.n	248ae <nrfx_gpiote_trigger_enable+0x14a>
            NRFX_ASSERT(0);
   248f4:	4c0b      	ldr	r4, [pc, #44]	; (24924 <nrfx_gpiote_trigger_enable+0x1c0>)
   248f6:	f44f 7213 	mov.w	r2, #588	; 0x24c
   248fa:	4621      	mov	r1, r4
   248fc:	4806      	ldr	r0, [pc, #24]	; (24918 <nrfx_gpiote_trigger_enable+0x1b4>)
   248fe:	f006 fbc6 	bl	2b08e <assert_print>
   24902:	f44f 7113 	mov.w	r1, #588	; 0x24c
   24906:	4620      	mov	r0, r4
   24908:	f006 fbba 	bl	2b080 <assert_post_action>
   2490c:	e7d3      	b.n	248b6 <nrfx_gpiote_trigger_enable+0x152>
   2490e:	bf00      	nop
   24910:	20000840 	.word	0x20000840
   24914:	00034d94 	.word	0x00034d94
   24918:	000318f8 	.word	0x000318f8
   2491c:	40006000 	.word	0x40006000
   24920:	00034dd4 	.word	0x00034dd4
   24924:	00034634 	.word	0x00034634

00024928 <nrfx_gpiote_trigger_disable>:
{
   24928:	b538      	push	{r3, r4, r5, lr}
   2492a:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   2492c:	f7ff f9f2 	bl	23d14 <pin_in_use_by_te>
   24930:	b1a0      	cbz	r0, 2495c <nrfx_gpiote_trigger_disable+0x34>
   24932:	4620      	mov	r0, r4
   24934:	f00b fe80 	bl	30638 <pin_is_input>
   24938:	b180      	cbz	r0, 2495c <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
   2493a:	4620      	mov	r0, r4
   2493c:	f7ff fa0a 	bl	23d54 <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   24940:	2201      	movs	r2, #1
   24942:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
   24944:	4b20      	ldr	r3, [pc, #128]	; (249c8 <nrfx_gpiote_trigger_disable+0xa0>)
   24946:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   2494a:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   2494e:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
   24952:	f022 0203 	bic.w	r2, r2, #3
   24956:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
   2495a:	e016      	b.n	2498a <nrfx_gpiote_trigger_disable+0x62>
    switch (port)
   2495c:	0963      	lsrs	r3, r4, #5
   2495e:	d015      	beq.n	2498c <nrfx_gpiote_trigger_disable+0x64>
    uint32_t mask = 0;
   24960:	2300      	movs	r3, #0
    pin_number &= 0x1F;
   24962:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
   24966:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   24968:	f013 0f01 	tst.w	r3, #1
   2496c:	d011      	beq.n	24992 <nrfx_gpiote_trigger_disable+0x6a>
    *p_pin = pin_number & 0x1F;
   2496e:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   24972:	0963      	lsrs	r3, r4, #5
   24974:	d11a      	bne.n	249ac <nrfx_gpiote_trigger_disable+0x84>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   24976:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   2497a:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
   2497e:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
   24982:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
   24986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   2498a:	bd38      	pop	{r3, r4, r5, pc}
            mask = P0_FEATURE_PINS_PRESENT;
   2498c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   24990:	e7e7      	b.n	24962 <nrfx_gpiote_trigger_disable+0x3a>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   24992:	4d0e      	ldr	r5, [pc, #56]	; (249cc <nrfx_gpiote_trigger_disable+0xa4>)
   24994:	f240 2247 	movw	r2, #583	; 0x247
   24998:	4629      	mov	r1, r5
   2499a:	480d      	ldr	r0, [pc, #52]	; (249d0 <nrfx_gpiote_trigger_disable+0xa8>)
   2499c:	f006 fb77 	bl	2b08e <assert_print>
   249a0:	f240 2147 	movw	r1, #583	; 0x247
   249a4:	4628      	mov	r0, r5
   249a6:	f006 fb6b 	bl	2b080 <assert_post_action>
   249aa:	e7e0      	b.n	2496e <nrfx_gpiote_trigger_disable+0x46>
            NRFX_ASSERT(0);
   249ac:	4c07      	ldr	r4, [pc, #28]	; (249cc <nrfx_gpiote_trigger_disable+0xa4>)
   249ae:	f44f 7213 	mov.w	r2, #588	; 0x24c
   249b2:	4621      	mov	r1, r4
   249b4:	4806      	ldr	r0, [pc, #24]	; (249d0 <nrfx_gpiote_trigger_disable+0xa8>)
   249b6:	f006 fb6a 	bl	2b08e <assert_print>
   249ba:	f44f 7113 	mov.w	r1, #588	; 0x24c
   249be:	4620      	mov	r0, r4
   249c0:	f006 fb5e 	bl	2b080 <assert_post_action>
   249c4:	e7d7      	b.n	24976 <nrfx_gpiote_trigger_disable+0x4e>
   249c6:	bf00      	nop
   249c8:	40006000 	.word	0x40006000
   249cc:	00034634 	.word	0x00034634
   249d0:	000318f8 	.word	0x000318f8

000249d4 <nrfx_gpiote_pin_uninit>:
{
   249d4:	b538      	push	{r3, r4, r5, lr}
   249d6:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   249d8:	f7ff f992 	bl	23d00 <pin_in_use>
   249dc:	b908      	cbnz	r0, 249e2 <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
   249de:	481d      	ldr	r0, [pc, #116]	; (24a54 <nrfx_gpiote_pin_uninit+0x80>)
}
   249e0:	bd38      	pop	{r3, r4, r5, pc}
    nrfx_gpiote_trigger_disable(pin);
   249e2:	4620      	mov	r0, r4
   249e4:	f7ff ffa0 	bl	24928 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   249e8:	4620      	mov	r0, r4
   249ea:	f7ff fa49 	bl	23e80 <pin_handler_trigger_uninit>
    switch (port)
   249ee:	0963      	lsrs	r3, r4, #5
   249f0:	d013      	beq.n	24a1a <nrfx_gpiote_pin_uninit+0x46>
    uint32_t mask = 0;
   249f2:	2300      	movs	r3, #0
    pin_number &= 0x1F;
   249f4:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
   249f8:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   249fa:	f013 0f01 	tst.w	r3, #1
   249fe:	d00f      	beq.n	24a20 <nrfx_gpiote_pin_uninit+0x4c>
    *p_pin = pin_number & 0x1F;
   24a00:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   24a04:	0963      	lsrs	r3, r4, #5
   24a06:	d118      	bne.n	24a3a <nrfx_gpiote_pin_uninit+0x66>
    reg->PIN_CNF[pin_number] = cnf;
   24a08:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
   24a0c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   24a10:	2202      	movs	r2, #2
   24a12:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    return NRFX_SUCCESS;
   24a16:	4810      	ldr	r0, [pc, #64]	; (24a58 <nrfx_gpiote_pin_uninit+0x84>)
}
   24a18:	e7e2      	b.n	249e0 <nrfx_gpiote_pin_uninit+0xc>
            mask = P0_FEATURE_PINS_PRESENT;
   24a1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   24a1e:	e7e9      	b.n	249f4 <nrfx_gpiote_pin_uninit+0x20>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   24a20:	4d0e      	ldr	r5, [pc, #56]	; (24a5c <nrfx_gpiote_pin_uninit+0x88>)
   24a22:	f240 2247 	movw	r2, #583	; 0x247
   24a26:	4629      	mov	r1, r5
   24a28:	480d      	ldr	r0, [pc, #52]	; (24a60 <nrfx_gpiote_pin_uninit+0x8c>)
   24a2a:	f006 fb30 	bl	2b08e <assert_print>
   24a2e:	f240 2147 	movw	r1, #583	; 0x247
   24a32:	4628      	mov	r0, r5
   24a34:	f006 fb24 	bl	2b080 <assert_post_action>
   24a38:	e7e2      	b.n	24a00 <nrfx_gpiote_pin_uninit+0x2c>
            NRFX_ASSERT(0);
   24a3a:	4c08      	ldr	r4, [pc, #32]	; (24a5c <nrfx_gpiote_pin_uninit+0x88>)
   24a3c:	f44f 7213 	mov.w	r2, #588	; 0x24c
   24a40:	4621      	mov	r1, r4
   24a42:	4807      	ldr	r0, [pc, #28]	; (24a60 <nrfx_gpiote_pin_uninit+0x8c>)
   24a44:	f006 fb23 	bl	2b08e <assert_print>
   24a48:	f44f 7113 	mov.w	r1, #588	; 0x24c
   24a4c:	4620      	mov	r0, r4
   24a4e:	f006 fb17 	bl	2b080 <assert_post_action>
   24a52:	e7d9      	b.n	24a08 <nrfx_gpiote_pin_uninit+0x34>
   24a54:	0bad0004 	.word	0x0bad0004
   24a58:	0bad0000 	.word	0x0bad0000
   24a5c:	00034634 	.word	0x00034634
   24a60:	000318f8 	.word	0x000318f8

00024a64 <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
   24a64:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   24a66:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
   24a68:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   24a6c:	2100      	movs	r1, #0
    uint32_t status = 0;
   24a6e:	460c      	mov	r4, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   24a70:	e003      	b.n	24a7a <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
   24a72:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
   24a74:	3304      	adds	r3, #4
   24a76:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   24a78:	3101      	adds	r1, #1
   24a7a:	2907      	cmp	r1, #7
   24a7c:	d814      	bhi.n	24aa8 <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   24a7e:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   24a82:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
   24a86:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   24a88:	2a00      	cmp	r2, #0
   24a8a:	d0f2      	beq.n	24a72 <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
   24a8c:	4a0c      	ldr	r2, [pc, #48]	; (24ac0 <nrfx_gpiote_irq_handler+0x5c>)
   24a8e:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   24a92:	4210      	tst	r0, r2
   24a94:	d0ed      	beq.n	24a72 <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
   24a96:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   24a9a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   24a9e:	2500      	movs	r5, #0
   24aa0:	6015      	str	r5, [r2, #0]
   24aa2:	6812      	ldr	r2, [r2, #0]
            status |= mask;
   24aa4:	4304      	orrs	r4, r0
   24aa6:	e7e4      	b.n	24a72 <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   24aa8:	4b05      	ldr	r3, [pc, #20]	; (24ac0 <nrfx_gpiote_irq_handler+0x5c>)
   24aaa:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   24aae:	b91b      	cbnz	r3, 24ab8 <nrfx_gpiote_irq_handler+0x54>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
   24ab0:	4620      	mov	r0, r4
   24ab2:	f7ff fa37 	bl	23f24 <gpiote_evt_handle>
}
   24ab6:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
   24ab8:	f7ff fb60 	bl	2417c <port_event_handle>
   24abc:	e7f8      	b.n	24ab0 <nrfx_gpiote_irq_handler+0x4c>
   24abe:	bf00      	nop
   24ac0:	40006000 	.word	0x40006000

00024ac4 <nvmc_readonly_mode_set>:
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
   24ac4:	4b02      	ldr	r3, [pc, #8]	; (24ad0 <nvmc_readonly_mode_set+0xc>)
   24ac6:	2200      	movs	r2, #0
   24ac8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_READONLY);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_READONLY);
#endif
}
   24acc:	4770      	bx	lr
   24ace:	bf00      	nop
   24ad0:	4001e000 	.word	0x4001e000

00024ad4 <nvmc_write_mode_set>:
   24ad4:	4b02      	ldr	r3, [pc, #8]	; (24ae0 <nvmc_write_mode_set+0xc>)
   24ad6:	2201      	movs	r2, #1
   24ad8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_WRITE);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_WRITE);
#endif
}
   24adc:	4770      	bx	lr
   24ade:	bf00      	nop
   24ae0:	4001e000 	.word	0x4001e000

00024ae4 <nvmc_erase_mode_set>:
   24ae4:	4b02      	ldr	r3, [pc, #8]	; (24af0 <nvmc_erase_mode_set+0xc>)
   24ae6:	2202      	movs	r2, #2
   24ae8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_ERASE);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_ERASE);
#endif
}
   24aec:	4770      	bx	lr
   24aee:	bf00      	nop
   24af0:	4001e000 	.word	0x4001e000

00024af4 <nvmc_word_write>:
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   24af4:	4b04      	ldr	r3, [pc, #16]	; (24b08 <nvmc_word_write+0x14>)
   24af6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   24afa:	f013 0f01 	tst.w	r3, #1
   24afe:	d0f9      	beq.n	24af4 <nvmc_word_write>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   24b00:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   24b02:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   24b06:	4770      	bx	lr
   24b08:	4001e000 	.word	0x4001e000

00024b0c <nrfx_nvmc_page_erase>:
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
   24b0c:	b538      	push	{r3, r4, r5, lr}
   24b0e:	4604      	mov	r4, r0
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   24b10:	f00b fdc1 	bl	30696 <flash_total_size_get>
   24b14:	4284      	cmp	r4, r0
   24b16:	d30b      	bcc.n	24b30 <nrfx_nvmc_page_erase+0x24>
    NRFX_ASSERT(is_valid_address(addr, false));
   24b18:	4d10      	ldr	r5, [pc, #64]	; (24b5c <nrfx_nvmc_page_erase+0x50>)
   24b1a:	f44f 7283 	mov.w	r2, #262	; 0x106
   24b1e:	4629      	mov	r1, r5
   24b20:	480f      	ldr	r0, [pc, #60]	; (24b60 <nrfx_nvmc_page_erase+0x54>)
   24b22:	f006 fab4 	bl	2b08e <assert_print>
   24b26:	f44f 7183 	mov.w	r1, #262	; 0x106
   24b2a:	4628      	mov	r0, r5
   24b2c:	f006 faa8 	bl	2b080 <assert_post_action>

    if (!is_page_aligned_check(addr))
   24b30:	4620      	mov	r0, r4
   24b32:	f00b fdb9 	bl	306a8 <is_page_aligned_check>
   24b36:	b908      	cbnz	r0, 24b3c <nrfx_nvmc_page_erase+0x30>
    {
        return NRFX_ERROR_INVALID_ADDR;
   24b38:	480a      	ldr	r0, [pc, #40]	; (24b64 <nrfx_nvmc_page_erase+0x58>)
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
}
   24b3a:	bd38      	pop	{r3, r4, r5, pc}
    nvmc_erase_mode_set();
   24b3c:	f7ff ffd2 	bl	24ae4 <nvmc_erase_mode_set>
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
   24b40:	4b09      	ldr	r3, [pc, #36]	; (24b68 <nrfx_nvmc_page_erase+0x5c>)
   24b42:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   24b46:	4b08      	ldr	r3, [pc, #32]	; (24b68 <nrfx_nvmc_page_erase+0x5c>)
   24b48:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   24b4c:	f013 0f01 	tst.w	r3, #1
   24b50:	d0f9      	beq.n	24b46 <nrfx_nvmc_page_erase+0x3a>
    nvmc_readonly_mode_set();
   24b52:	f7ff ffb7 	bl	24ac4 <nvmc_readonly_mode_set>
    return NRFX_SUCCESS;
   24b56:	4805      	ldr	r0, [pc, #20]	; (24b6c <nrfx_nvmc_page_erase+0x60>)
   24b58:	e7ef      	b.n	24b3a <nrfx_nvmc_page_erase+0x2e>
   24b5a:	bf00      	nop
   24b5c:	00034e0c 	.word	0x00034e0c
   24b60:	000318f8 	.word	0x000318f8
   24b64:	0bad000a 	.word	0x0bad000a
   24b68:	4001e000 	.word	0x4001e000
   24b6c:	0bad0000 	.word	0x0bad0000

00024b70 <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   24b70:	b570      	push	{r4, r5, r6, lr}
   24b72:	4604      	mov	r4, r0
   24b74:	460d      	mov	r5, r1
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   24b76:	f00b fd8e 	bl	30696 <flash_total_size_get>
   24b7a:	4284      	cmp	r4, r0
   24b7c:	d310      	bcc.n	24ba0 <nrfx_nvmc_word_write+0x30>
        (addr - (uint32_t)NRF_UICR) < sizeof(NRF_UICR_Type))
   24b7e:	f1a4 2310 	sub.w	r3, r4, #268439552	; 0x10001000
    if (uicr_allowed &&
   24b82:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
   24b86:	d30b      	bcc.n	24ba0 <nrfx_nvmc_word_write+0x30>
    NRFX_ASSERT(is_valid_address(addr, true));
   24b88:	4e12      	ldr	r6, [pc, #72]	; (24bd4 <nrfx_nvmc_word_write+0x64>)
   24b8a:	f44f 72ca 	mov.w	r2, #404	; 0x194
   24b8e:	4631      	mov	r1, r6
   24b90:	4811      	ldr	r0, [pc, #68]	; (24bd8 <nrfx_nvmc_word_write+0x68>)
   24b92:	f006 fa7c 	bl	2b08e <assert_print>
   24b96:	f44f 71ca 	mov.w	r1, #404	; 0x194
   24b9a:	4630      	mov	r0, r6
   24b9c:	f006 fa70 	bl	2b080 <assert_post_action>
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
   24ba0:	f014 0f03 	tst.w	r4, #3
   24ba4:	d108      	bne.n	24bb8 <nrfx_nvmc_word_write+0x48>

    nvmc_write_mode_set();
   24ba6:	f7ff ff95 	bl	24ad4 <nvmc_write_mode_set>

    nvmc_word_write(addr, value);
   24baa:	4629      	mov	r1, r5
   24bac:	4620      	mov	r0, r4
   24bae:	f7ff ffa1 	bl	24af4 <nvmc_word_write>

    nvmc_readonly_mode_set();
   24bb2:	f7ff ff87 	bl	24ac4 <nvmc_readonly_mode_set>
}
   24bb6:	bd70      	pop	{r4, r5, r6, pc}
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
   24bb8:	4e06      	ldr	r6, [pc, #24]	; (24bd4 <nrfx_nvmc_word_write+0x64>)
   24bba:	f240 1295 	movw	r2, #405	; 0x195
   24bbe:	4631      	mov	r1, r6
   24bc0:	4805      	ldr	r0, [pc, #20]	; (24bd8 <nrfx_nvmc_word_write+0x68>)
   24bc2:	f006 fa64 	bl	2b08e <assert_print>
   24bc6:	f240 1195 	movw	r1, #405	; 0x195
   24bca:	4630      	mov	r0, r6
   24bcc:	f006 fa58 	bl	2b080 <assert_post_action>
   24bd0:	e7e9      	b.n	24ba6 <nrfx_nvmc_word_write+0x36>
   24bd2:	bf00      	nop
   24bd4:	00034e0c 	.word	0x00034e0c
   24bd8:	000318f8 	.word	0x000318f8

00024bdc <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   24bdc:	b508      	push	{r3, lr}
   24bde:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   24be0:	4801      	ldr	r0, [pc, #4]	; (24be8 <nrfx_ppi_channel_alloc+0xc>)
   24be2:	f7ff f843 	bl	23c6c <nrfx_flag32_alloc>
}
   24be6:	bd08      	pop	{r3, pc}
   24be8:	2000089c 	.word	0x2000089c

00024bec <twi_process_error>:
} twi_control_block_t;

static twi_control_block_t m_cb[NRFX_TWI_ENABLED_COUNT];

static nrfx_err_t twi_process_error(uint32_t errorsrc)
{
   24bec:	4603      	mov	r3, r0
    nrfx_err_t ret = NRFX_ERROR_INTERNAL;

    if (errorsrc & NRF_TWI_ERROR_OVERRUN)
   24bee:	f010 0f01 	tst.w	r0, #1
   24bf2:	d108      	bne.n	24c06 <twi_process_error+0x1a>
    nrfx_err_t ret = NRFX_ERROR_INTERNAL;
   24bf4:	4806      	ldr	r0, [pc, #24]	; (24c10 <twi_process_error+0x24>)
    {
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    }

    if (errorsrc & NRF_TWI_ERROR_ADDRESS_NACK)
   24bf6:	f013 0f02 	tst.w	r3, #2
   24bfa:	d000      	beq.n	24bfe <twi_process_error+0x12>
    {
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   24bfc:	4805      	ldr	r0, [pc, #20]	; (24c14 <twi_process_error+0x28>)
    }

    if (errorsrc & NRF_TWI_ERROR_DATA_NACK)
   24bfe:	f013 0f04 	tst.w	r3, #4
   24c02:	d102      	bne.n	24c0a <twi_process_error+0x1e>
    {
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    }

    return ret;
}
   24c04:	4770      	bx	lr
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   24c06:	4804      	ldr	r0, [pc, #16]	; (24c18 <twi_process_error+0x2c>)
   24c08:	e7f5      	b.n	24bf6 <twi_process_error+0xa>
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   24c0a:	4804      	ldr	r0, [pc, #16]	; (24c1c <twi_process_error+0x30>)
    return ret;
   24c0c:	e7fa      	b.n	24c04 <twi_process_error+0x18>
   24c0e:	bf00      	nop
   24c10:	0bad0001 	.word	0x0bad0001
   24c14:	0bae0001 	.word	0x0bae0001
   24c18:	0bae0000 	.word	0x0bae0000
   24c1c:	0bae0002 	.word	0x0bae0002

00024c20 <twi_tx_start_transfer>:
    return true;
}

static nrfx_err_t twi_tx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
   24c20:	b530      	push	{r4, r5, lr}
   24c22:	b083      	sub	sp, #12
   24c24:	4604      	mov	r4, r0
   24c26:	460d      	mov	r5, r1
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
   24c28:	4b29      	ldr	r3, [pc, #164]	; (24cd0 <twi_tx_start_transfer+0xb0>)
   24c2a:	9301      	str	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24c2c:	2300      	movs	r3, #0
   24c2e:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   24c32:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
   24c36:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
   24c3a:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
   24c3e:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
   24c42:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
   24c46:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   24c4a:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
}

NRF_STATIC_INLINE void nrf_twi_shorts_set(NRF_TWI_Type * p_reg,
                                          uint32_t       mask)
{
    p_reg->SHORTS = mask;
   24c4e:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);
    nrf_twi_shorts_set(p_twi, 0);

    p_cb->bytes_transferred = 0;
   24c52:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
   24c54:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24c58:	2301      	movs	r3, #1
   24c5a:	6203      	str	r3, [r0, #32]

    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
   24c5c:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
   24c60:	2b01      	cmp	r3, #1
   24c62:	d001      	beq.n	24c68 <twi_tx_start_transfer+0x48>
   24c64:	2301      	movs	r3, #1
   24c66:	6083      	str	r3, [r0, #8]
    {
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTTX);
    }

    (void)twi_send_byte(p_twi, p_cb);
   24c68:	4629      	mov	r1, r5
   24c6a:	4620      	mov	r0, r4
   24c6c:	f00b fd42 	bl	306f4 <twi_send_byte>

    if (p_cb->handler)
   24c70:	682b      	ldr	r3, [r5, #0]
   24c72:	b15b      	cbz	r3, 24c8c <twi_tx_start_transfer+0x6c>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
   24c74:	f240 2386 	movw	r3, #646	; 0x286
   24c78:	60ab      	str	r3, [r5, #8]
                         NRF_TWI_INT_ERROR_MASK     |
                         NRF_TWI_INT_TXDSENT_MASK   |
                         NRF_TWI_INT_RXDREADY_MASK;

        nrf_twi_int_enable(p_twi, p_cb->int_mask);
   24c7a:	68ab      	ldr	r3, [r5, #8]
    p_reg->INTENSET = mask;
   24c7c:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    nrfx_err_t ret_code = NRFX_SUCCESS;
   24c80:	4814      	ldr	r0, [pc, #80]	; (24cd4 <twi_tx_start_transfer+0xb4>)
            ret_code = NRFX_ERROR_INTERNAL;
        }

    }
    return ret_code;
}
   24c82:	b003      	add	sp, #12
   24c84:	bd30      	pop	{r4, r5, pc}
            hw_timeout--;
   24c86:	9b01      	ldr	r3, [sp, #4]
   24c88:	3b01      	subs	r3, #1
   24c8a:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
   24c8c:	9b01      	ldr	r3, [sp, #4]
   24c8e:	2b00      	cmp	r3, #0
   24c90:	dd05      	ble.n	24c9e <twi_tx_start_transfer+0x7e>
               twi_transfer(p_twi, p_cb))
   24c92:	4629      	mov	r1, r5
   24c94:	4620      	mov	r0, r4
   24c96:	f00b fd7c 	bl	30792 <twi_transfer>
        while ((hw_timeout > 0) &&
   24c9a:	2800      	cmp	r0, #0
   24c9c:	d1f3      	bne.n	24c86 <twi_tx_start_transfer+0x66>
        if (p_cb->error)
   24c9e:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   24ca2:	b13b      	cbz	r3, 24cb4 <twi_tx_start_transfer+0x94>
    uint32_t error_source = p_reg->ERRORSRC;
   24ca4:	f8d4 04c4 	ldr.w	r0, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   24ca8:	f8c4 04c4 	str.w	r0, [r4, #1220]	; 0x4c4
            if (errorsrc)
   24cac:	b170      	cbz	r0, 24ccc <twi_tx_start_transfer+0xac>
                ret_code = twi_process_error(errorsrc);
   24cae:	f7ff ff9d 	bl	24bec <twi_process_error>
   24cb2:	e000      	b.n	24cb6 <twi_tx_start_transfer+0x96>
    nrfx_err_t ret_code = NRFX_SUCCESS;
   24cb4:	4807      	ldr	r0, [pc, #28]	; (24cd4 <twi_tx_start_transfer+0xb4>)
        if (hw_timeout <= 0)
   24cb6:	9b01      	ldr	r3, [sp, #4]
   24cb8:	2b00      	cmp	r3, #0
   24cba:	dce2      	bgt.n	24c82 <twi_tx_start_transfer+0x62>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   24cbc:	2300      	movs	r3, #0
   24cbe:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   24cc2:	2305      	movs	r3, #5
   24cc4:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
            ret_code = NRFX_ERROR_INTERNAL;
   24cc8:	4803      	ldr	r0, [pc, #12]	; (24cd8 <twi_tx_start_transfer+0xb8>)
    return ret_code;
   24cca:	e7da      	b.n	24c82 <twi_tx_start_transfer+0x62>
                ret_code = NRFX_ERROR_INTERNAL;
   24ccc:	4802      	ldr	r0, [pc, #8]	; (24cd8 <twi_tx_start_transfer+0xb8>)
   24cce:	e7f2      	b.n	24cb6 <twi_tx_start_transfer+0x96>
   24cd0:	000186a0 	.word	0x000186a0
   24cd4:	0bad0000 	.word	0x0bad0000
   24cd8:	0bad0001 	.word	0x0bad0001

00024cdc <twi_rx_start_transfer>:

static nrfx_err_t twi_rx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
   24cdc:	b530      	push	{r4, r5, lr}
   24cde:	b083      	sub	sp, #12
   24ce0:	4604      	mov	r4, r0
   24ce2:	460d      	mov	r5, r1
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
   24ce4:	4b2d      	ldr	r3, [pc, #180]	; (24d9c <twi_rx_start_transfer+0xc0>)
   24ce6:	9301      	str	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24ce8:	2300      	movs	r3, #0
   24cea:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   24cee:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
   24cf2:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
   24cf6:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
   24cfa:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
   24cfe:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
   24d02:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   24d06:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);

    p_cb->bytes_transferred = 0;
   24d0a:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
   24d0c:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f

    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   24d10:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   24d12:	2b01      	cmp	r3, #1
   24d14:	d015      	beq.n	24d42 <twi_rx_start_transfer+0x66>
    p_reg->SHORTS = mask;
   24d16:	2301      	movs	r3, #1
   24d18:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24d1c:	2301      	movs	r3, #1
   24d1e:	6223      	str	r3, [r4, #32]
        nrf_twi_shorts_set(p_twi, NRF_TWI_SHORT_BB_SUSPEND_MASK);
    }
    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_RX)
   24d20:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
   24d24:	2b02      	cmp	r3, #2
   24d26:	d001      	beq.n	24d2c <twi_rx_start_transfer+0x50>
   24d28:	2301      	movs	r3, #1
   24d2a:	6023      	str	r3, [r4, #0]
    {
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTRX);
    }

    if (p_cb->handler)
   24d2c:	682b      	ldr	r3, [r5, #0]
   24d2e:	b19b      	cbz	r3, 24d58 <twi_rx_start_transfer+0x7c>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
   24d30:	f240 2386 	movw	r3, #646	; 0x286
   24d34:	60ab      	str	r3, [r5, #8]
                        NRF_TWI_INT_ERROR_MASK     |
                        NRF_TWI_INT_TXDSENT_MASK   |
                        NRF_TWI_INT_RXDREADY_MASK;
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
   24d36:	68ab      	ldr	r3, [r5, #8]
    p_reg->INTENSET = mask;
   24d38:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    nrfx_err_t ret_code = NRFX_SUCCESS;
   24d3c:	4818      	ldr	r0, [pc, #96]	; (24da0 <twi_rx_start_transfer+0xc4>)
            nrf_twi_enable(p_twi);
            ret_code = NRFX_ERROR_INTERNAL;
        }
    }
    return ret_code;
}
   24d3e:	b003      	add	sp, #12
   24d40:	bd30      	pop	{r4, r5, pc}
    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   24d42:	6a0b      	ldr	r3, [r1, #32]
   24d44:	f013 0f40 	tst.w	r3, #64	; 0x40
   24d48:	d1e5      	bne.n	24d16 <twi_rx_start_transfer+0x3a>
    p_reg->SHORTS = mask;
   24d4a:	2302      	movs	r3, #2
   24d4c:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
   24d50:	e7e4      	b.n	24d1c <twi_rx_start_transfer+0x40>
               hw_timeout--;
   24d52:	9b01      	ldr	r3, [sp, #4]
   24d54:	3b01      	subs	r3, #1
   24d56:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
   24d58:	9b01      	ldr	r3, [sp, #4]
   24d5a:	2b00      	cmp	r3, #0
   24d5c:	dd05      	ble.n	24d6a <twi_rx_start_transfer+0x8e>
               twi_transfer(p_twi, p_cb))
   24d5e:	4629      	mov	r1, r5
   24d60:	4620      	mov	r0, r4
   24d62:	f00b fd16 	bl	30792 <twi_transfer>
        while ((hw_timeout > 0) &&
   24d66:	2800      	cmp	r0, #0
   24d68:	d1f3      	bne.n	24d52 <twi_rx_start_transfer+0x76>
        if (p_cb->error)
   24d6a:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   24d6e:	b13b      	cbz	r3, 24d80 <twi_rx_start_transfer+0xa4>
    uint32_t error_source = p_reg->ERRORSRC;
   24d70:	f8d4 04c4 	ldr.w	r0, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   24d74:	f8c4 04c4 	str.w	r0, [r4, #1220]	; 0x4c4
            if (errorsrc)
   24d78:	b170      	cbz	r0, 24d98 <twi_rx_start_transfer+0xbc>
                ret_code = twi_process_error(errorsrc);
   24d7a:	f7ff ff37 	bl	24bec <twi_process_error>
   24d7e:	e000      	b.n	24d82 <twi_rx_start_transfer+0xa6>
    nrfx_err_t ret_code = NRFX_SUCCESS;
   24d80:	4807      	ldr	r0, [pc, #28]	; (24da0 <twi_rx_start_transfer+0xc4>)
        if (hw_timeout <= 0)
   24d82:	9b01      	ldr	r3, [sp, #4]
   24d84:	2b00      	cmp	r3, #0
   24d86:	dcda      	bgt.n	24d3e <twi_rx_start_transfer+0x62>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   24d88:	2300      	movs	r3, #0
   24d8a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   24d8e:	2305      	movs	r3, #5
   24d90:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
            ret_code = NRFX_ERROR_INTERNAL;
   24d94:	4803      	ldr	r0, [pc, #12]	; (24da4 <twi_rx_start_transfer+0xc8>)
    return ret_code;
   24d96:	e7d2      	b.n	24d3e <twi_rx_start_transfer+0x62>
                ret_code = NRFX_ERROR_INTERNAL;
   24d98:	4802      	ldr	r0, [pc, #8]	; (24da4 <twi_rx_start_transfer+0xc8>)
   24d9a:	e7f2      	b.n	24d82 <twi_rx_start_transfer+0xa6>
   24d9c:	000186a0 	.word	0x000186a0
   24da0:	0bad0000 	.word	0x0bad0000
   24da4:	0bad0001 	.word	0x0bad0001

00024da8 <twi_xfer>:

static nrfx_err_t twi_xfer(NRF_TWI_Type               * p_twi,
                           twi_control_block_t        * p_cb,
                           nrfx_twi_xfer_desc_t const * p_xfer_desc,
                           uint32_t                     flags)
{
   24da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24daa:	4607      	mov	r7, r0
   24dac:	460c      	mov	r4, r1
   24dae:	4694      	mov	ip, r2
   24db0:	461e      	mov	r6, r3

    nrfx_err_t err_code = NRFX_SUCCESS;

    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   24db2:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
   24db6:	2b01      	cmp	r3, #1
   24db8:	d02c      	beq.n	24e14 <twi_xfer+0x6c>
    {
        /* RX is invalid after TX suspend */
        return NRFX_ERROR_INVALID_STATE;
    }
    else if ((p_cb->prev_suspend == TWI_SUSPEND_RX) && (p_xfer_desc->type != NRFX_TWI_XFER_RX))
   24dba:	2b02      	cmp	r3, #2
   24dbc:	d02f      	beq.n	24e1e <twi_xfer+0x76>
    p_reg->INTENCLR = mask;
   24dbe:	4b27      	ldr	r3, [pc, #156]	; (24e5c <twi_xfer+0xb4>)
   24dc0:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
    }

    /* Block TWI interrupts to ensure that function is not interrupted by TWI interrupt. */
    nrf_twi_int_disable(p_twi, NRF_TWI_ALL_INTS_MASK);

    if (p_cb->busy)
   24dc4:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   24dc8:	bb7b      	cbnz	r3, 24e2a <twi_xfer+0x82>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        p_cb->busy = (TWI_FLAG_NO_HANDLER_IN_USE(flags)) ? false : true;
   24dca:	f016 0f04 	tst.w	r6, #4
   24dce:	bf0c      	ite	eq
   24dd0:	2301      	moveq	r3, #1
   24dd2:	2300      	movne	r3, #0
   24dd4:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    }

    p_cb->flags       = flags;
   24dd8:	6226      	str	r6, [r4, #32]
    p_cb->xfer_desc   = *p_xfer_desc;
   24dda:	f104 0e0c 	add.w	lr, r4, #12
   24dde:	4665      	mov	r5, ip
   24de0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   24de2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   24de6:	682b      	ldr	r3, [r5, #0]
   24de8:	f8ce 3000 	str.w	r3, [lr]
    p_cb->curr_length = p_xfer_desc->primary_length;
   24dec:	f8dc 3004 	ldr.w	r3, [ip, #4]
   24df0:	62a3      	str	r3, [r4, #40]	; 0x28
    p_cb->p_curr_buf  = p_xfer_desc->p_primary_buf;
   24df2:	f8dc 300c 	ldr.w	r3, [ip, #12]
   24df6:	6263      	str	r3, [r4, #36]	; 0x24
    nrf_twi_address_set(p_twi, p_xfer_desc->address);
   24df8:	f89c 3001 	ldrb.w	r3, [ip, #1]
    p_reg->ADDRESS = address;
   24dfc:	f8c7 3588 	str.w	r3, [r7, #1416]	; 0x588

    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
   24e00:	f89c 3000 	ldrb.w	r3, [ip]
   24e04:	2b01      	cmp	r3, #1
   24e06:	d021      	beq.n	24e4c <twi_xfer+0xa4>
    {
        p_cb->curr_tx_no_stop = ((p_xfer_desc->type == NRFX_TWI_XFER_TX) &&
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
   24e08:	b9a3      	cbnz	r3, 24e34 <twi_xfer+0x8c>
   24e0a:	f016 0f20 	tst.w	r6, #32
   24e0e:	d01b      	beq.n	24e48 <twi_xfer+0xa0>
   24e10:	2301      	movs	r3, #1
   24e12:	e010      	b.n	24e36 <twi_xfer+0x8e>
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   24e14:	7812      	ldrb	r2, [r2, #0]
   24e16:	2a01      	cmp	r2, #1
   24e18:	d1cf      	bne.n	24dba <twi_xfer+0x12>
        return NRFX_ERROR_INVALID_STATE;
   24e1a:	4811      	ldr	r0, [pc, #68]	; (24e60 <twi_xfer+0xb8>)
   24e1c:	e013      	b.n	24e46 <twi_xfer+0x9e>
    else if ((p_cb->prev_suspend == TWI_SUSPEND_RX) && (p_xfer_desc->type != NRFX_TWI_XFER_RX))
   24e1e:	f89c 3000 	ldrb.w	r3, [ip]
   24e22:	2b01      	cmp	r3, #1
   24e24:	d0cb      	beq.n	24dbe <twi_xfer+0x16>
        return NRFX_ERROR_INVALID_STATE;
   24e26:	480e      	ldr	r0, [pc, #56]	; (24e60 <twi_xfer+0xb8>)
   24e28:	e00d      	b.n	24e46 <twi_xfer+0x9e>
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
   24e2a:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
   24e2c:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
        return err_code;
   24e30:	480c      	ldr	r0, [pc, #48]	; (24e64 <twi_xfer+0xbc>)
   24e32:	e008      	b.n	24e46 <twi_xfer+0x9e>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
   24e34:	2301      	movs	r3, #1
        p_cb->curr_tx_no_stop = ((p_xfer_desc->type == NRFX_TWI_XFER_TX) &&
   24e36:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

        err_code = twi_tx_start_transfer(p_twi, p_cb);
   24e3a:	4621      	mov	r1, r4
   24e3c:	4638      	mov	r0, r7
   24e3e:	f7ff feef 	bl	24c20 <twi_tx_start_transfer>
    }
    else
    {
        err_code = twi_rx_start_transfer(p_twi, p_cb);
    }
    if (p_cb->handler == NULL)
   24e42:	6823      	ldr	r3, [r4, #0]
   24e44:	b13b      	cbz	r3, 24e56 <twi_xfer+0xae>
    {
        p_cb->busy = false;
    }
    return err_code;
}
   24e46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
   24e48:	2300      	movs	r3, #0
   24e4a:	e7f4      	b.n	24e36 <twi_xfer+0x8e>
        err_code = twi_rx_start_transfer(p_twi, p_cb);
   24e4c:	4621      	mov	r1, r4
   24e4e:	4638      	mov	r0, r7
   24e50:	f7ff ff44 	bl	24cdc <twi_rx_start_transfer>
   24e54:	e7f5      	b.n	24e42 <twi_xfer+0x9a>
        p_cb->busy = false;
   24e56:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
   24e5a:	e7f4      	b.n	24e46 <twi_xfer+0x9e>
   24e5c:	00044286 	.word	0x00044286
   24e60:	0bad0005 	.word	0x0bad0005
   24e64:	0bad000b 	.word	0x0bad000b

00024e68 <twi_irq_handler>:
{
    return nrf_twi_event_address_get(p_instance->p_twi, NRF_TWI_EVENT_STOPPED);
}

static void twi_irq_handler(NRF_TWI_Type * p_twi, twi_control_block_t * p_cb)
{
   24e68:	b570      	push	{r4, r5, r6, lr}
   24e6a:	b086      	sub	sp, #24
   24e6c:	4605      	mov	r5, r0
   24e6e:	460c      	mov	r4, r1
    NRFX_ASSERT(p_cb->handler);
   24e70:	680b      	ldr	r3, [r1, #0]
   24e72:	b333      	cbz	r3, 24ec2 <twi_irq_handler+0x5a>

    if (twi_transfer(p_twi, p_cb))
   24e74:	4621      	mov	r1, r4
   24e76:	4628      	mov	r0, r5
   24e78:	f00b fc8b 	bl	30792 <twi_transfer>
   24e7c:	2800      	cmp	r0, #0
   24e7e:	d16c      	bne.n	24f5a <twi_irq_handler+0xf2>
    {
        return;
    }

    if (!p_cb->error &&
   24e80:	f894 602f 	ldrb.w	r6, [r4, #47]	; 0x2f
   24e84:	b926      	cbnz	r6, 24e90 <twi_irq_handler+0x28>
        ((p_cb->xfer_desc.type == NRFX_TWI_XFER_TXRX) ||
   24e86:	7b22      	ldrb	r2, [r4, #12]
   24e88:	1e93      	subs	r3, r2, #2
   24e8a:	b2db      	uxtb	r3, r3
    if (!p_cb->error &&
   24e8c:	2b01      	cmp	r3, #1
   24e8e:	d925      	bls.n	24edc <twi_irq_handler+0x74>
        }
    }
    else
    {
        nrfx_twi_evt_t event;
        event.xfer_desc = p_cb->xfer_desc;
   24e90:	f10d 0c04 	add.w	ip, sp, #4
   24e94:	f104 0e0c 	add.w	lr, r4, #12
   24e98:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   24e9c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   24ea0:	f8de 3000 	ldr.w	r3, [lr]
   24ea4:	f8cc 3000 	str.w	r3, [ip]

        if (p_cb->error)
   24ea8:	2e00      	cmp	r6, #0
   24eaa:	d045      	beq.n	24f38 <twi_irq_handler+0xd0>
    uint32_t error_source = p_reg->ERRORSRC;
   24eac:	f8d5 34c4 	ldr.w	r3, [r5, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   24eb0:	f8c5 34c4 	str.w	r3, [r5, #1220]	; 0x4c4
        {
            uint32_t errorsrc = nrf_twi_errorsrc_get_and_clear(p_twi);
            if (errorsrc & NRF_TWI_ERROR_ADDRESS_NACK)
   24eb4:	f013 0f02 	tst.w	r3, #2
   24eb8:	d02c      	beq.n	24f14 <twi_irq_handler+0xac>
            {
                event.type = NRFX_TWI_EVT_ADDRESS_NACK;
   24eba:	2301      	movs	r3, #1
   24ebc:	f88d 3000 	strb.w	r3, [sp]
                NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWI_EVT_ADDRESS_NACK));
   24ec0:	e03d      	b.n	24f3e <twi_irq_handler+0xd6>
    NRFX_ASSERT(p_cb->handler);
   24ec2:	4e27      	ldr	r6, [pc, #156]	; (24f60 <twi_irq_handler+0xf8>)
   24ec4:	f240 22a9 	movw	r2, #681	; 0x2a9
   24ec8:	4631      	mov	r1, r6
   24eca:	4826      	ldr	r0, [pc, #152]	; (24f64 <twi_irq_handler+0xfc>)
   24ecc:	f006 f8df 	bl	2b08e <assert_print>
   24ed0:	f240 21a9 	movw	r1, #681	; 0x2a9
   24ed4:	4630      	mov	r0, r6
   24ed6:	f006 f8d3 	bl	2b080 <assert_post_action>
   24eda:	e7cb      	b.n	24e74 <twi_irq_handler+0xc>
        p_cb->p_curr_buf == p_cb->xfer_desc.p_primary_buf)
   24edc:	6a61      	ldr	r1, [r4, #36]	; 0x24
   24ede:	69a3      	ldr	r3, [r4, #24]
         (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)) &&
   24ee0:	4299      	cmp	r1, r3
   24ee2:	d1d5      	bne.n	24e90 <twi_irq_handler+0x28>
        p_cb->p_curr_buf      = p_cb->xfer_desc.p_secondary_buf;
   24ee4:	69e3      	ldr	r3, [r4, #28]
   24ee6:	6263      	str	r3, [r4, #36]	; 0x24
        p_cb->curr_length     = p_cb->xfer_desc.secondary_length;
   24ee8:	6963      	ldr	r3, [r4, #20]
   24eea:	62a3      	str	r3, [r4, #40]	; 0x28
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
   24eec:	6a23      	ldr	r3, [r4, #32]
   24eee:	f3c3 1340 	ubfx	r3, r3, #5, #1
   24ef2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        p_cb->prev_suspend    = TWI_NO_SUSPEND;
   24ef6:	2300      	movs	r3, #0
   24ef8:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
   24efc:	2a03      	cmp	r2, #3
   24efe:	d004      	beq.n	24f0a <twi_irq_handler+0xa2>
            (void)twi_rx_start_transfer(p_twi, p_cb);
   24f00:	4621      	mov	r1, r4
   24f02:	4628      	mov	r0, r5
   24f04:	f7ff feea 	bl	24cdc <twi_rx_start_transfer>
   24f08:	e027      	b.n	24f5a <twi_irq_handler+0xf2>
            (void)twi_tx_start_transfer(p_twi, p_cb);
   24f0a:	4621      	mov	r1, r4
   24f0c:	4628      	mov	r0, r5
   24f0e:	f7ff fe87 	bl	24c20 <twi_tx_start_transfer>
   24f12:	e022      	b.n	24f5a <twi_irq_handler+0xf2>
            }
            else if (errorsrc & NRF_TWI_ERROR_DATA_NACK)
   24f14:	f013 0f04 	tst.w	r3, #4
   24f18:	d003      	beq.n	24f22 <twi_irq_handler+0xba>
            {
                event.type = NRFX_TWI_EVT_DATA_NACK;
   24f1a:	2302      	movs	r3, #2
   24f1c:	f88d 3000 	strb.w	r3, [sp]
                NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWI_EVT_DATA_NACK));
   24f20:	e00d      	b.n	24f3e <twi_irq_handler+0xd6>
            }
            else if (errorsrc & NRF_TWI_ERROR_OVERRUN)
   24f22:	f013 0f01 	tst.w	r3, #1
   24f26:	d003      	beq.n	24f30 <twi_irq_handler+0xc8>
            {
                event.type = NRFX_TWI_EVT_OVERRUN;
   24f28:	2303      	movs	r3, #3
   24f2a:	f88d 3000 	strb.w	r3, [sp]
                NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWI_EVT_OVERRUN));
   24f2e:	e006      	b.n	24f3e <twi_irq_handler+0xd6>
            }
            else
            {
                event.type = NRFX_TWI_EVT_BUS_ERROR;
   24f30:	2304      	movs	r3, #4
   24f32:	f88d 3000 	strb.w	r3, [sp]
                NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWI_EVT_BUS_ERROR));
   24f36:	e002      	b.n	24f3e <twi_irq_handler+0xd6>
            }
        }
        else
        {
            event.type = NRFX_TWI_EVT_DONE;
   24f38:	2300      	movs	r3, #0
   24f3a:	f88d 3000 	strb.w	r3, [sp]
            NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWI_EVT_DONE));
        }

        p_cb->busy = false;
   24f3e:	2300      	movs	r3, #0
   24f40:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30

        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
   24f44:	6a23      	ldr	r3, [r4, #32]
   24f46:	f013 0f04 	tst.w	r3, #4
   24f4a:	d002      	beq.n	24f52 <twi_irq_handler+0xea>
   24f4c:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   24f50:	b11b      	cbz	r3, 24f5a <twi_irq_handler+0xf2>
        {
            p_cb->handler(&event, p_cb->p_context);
   24f52:	6823      	ldr	r3, [r4, #0]
   24f54:	6861      	ldr	r1, [r4, #4]
   24f56:	4668      	mov	r0, sp
   24f58:	4798      	blx	r3
        }
    }

}
   24f5a:	b006      	add	sp, #24
   24f5c:	bd70      	pop	{r4, r5, r6, pc}
   24f5e:	bf00      	nop
   24f60:	00034e48 	.word	0x00034e48
   24f64:	000318f8 	.word	0x000318f8

00024f68 <nrfx_twi_init>:
{
   24f68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24f6c:	4605      	mov	r5, r0
   24f6e:	4690      	mov	r8, r2
   24f70:	461f      	mov	r7, r3
    NRFX_ASSERT(p_config);
   24f72:	460e      	mov	r6, r1
   24f74:	2900      	cmp	r1, #0
   24f76:	d042      	beq.n	24ffe <nrfx_twi_init+0x96>
    twi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   24f78:	792c      	ldrb	r4, [r5, #4]
    NRF_TWI_Type * p_twi = p_instance->p_twi;
   24f7a:	f8d5 9000 	ldr.w	r9, [r5]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   24f7e:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   24f82:	495a      	ldr	r1, [pc, #360]	; (250ec <nrfx_twi_init+0x184>)
   24f84:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   24f88:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
   24f8c:	2b00      	cmp	r3, #0
   24f8e:	f040 80aa 	bne.w	250e6 <nrfx_twi_init+0x17e>
    p_cb->handler         = event_handler;
   24f92:	4b56      	ldr	r3, [pc, #344]	; (250ec <nrfx_twi_init+0x184>)
   24f94:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   24f98:	f843 8022 	str.w	r8, [r3, r2, lsl #2]
    p_cb->p_context       = p_context;
   24f9c:	604f      	str	r7, [r1, #4]
    p_cb->int_mask        = 0;
   24f9e:	2300      	movs	r3, #0
   24fa0:	608b      	str	r3, [r1, #8]
    p_cb->prev_suspend    = TWI_NO_SUSPEND;
   24fa2:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    p_cb->repeated        = false;
   24fa6:	f881 3031 	strb.w	r3, [r1, #49]	; 0x31
    p_cb->busy            = false;
   24faa:	f881 3030 	strb.w	r3, [r1, #48]	; 0x30
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   24fae:	7b73      	ldrb	r3, [r6, #13]
   24fb0:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
   24fb4:	7bb3      	ldrb	r3, [r6, #14]
   24fb6:	f881 3039 	strb.w	r3, [r1, #57]	; 0x39
    if (!p_config->skip_gpio_cfg)
   24fba:	b35b      	cbz	r3, 25014 <nrfx_twi_init+0xac>
    if (!p_config->skip_psel_cfg)
   24fbc:	7bf3      	ldrb	r3, [r6, #15]
   24fbe:	b92b      	cbnz	r3, 24fcc <nrfx_twi_init+0x64>
        nrf_twi_pins_set(p_twi, p_config->scl, p_config->sda);
   24fc0:	6832      	ldr	r2, [r6, #0]
   24fc2:	6873      	ldr	r3, [r6, #4]
    p_reg->PSELSCL = scl_pin;
   24fc4:	f8c9 2508 	str.w	r2, [r9, #1288]	; 0x508
    p_reg->PSELSDA = sda_pin;
   24fc8:	f8c9 350c 	str.w	r3, [r9, #1292]	; 0x50c
        (nrf_twi_frequency_t)p_config->frequency);
   24fcc:	68b3      	ldr	r3, [r6, #8]
    p_reg->FREQUENCY = frequency;
   24fce:	f8c9 3524 	str.w	r3, [r9, #1316]	; 0x524
    if (p_cb->handler)
   24fd2:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   24fd6:	4a45      	ldr	r2, [pc, #276]	; (250ec <nrfx_twi_init+0x184>)
   24fd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   24fdc:	b123      	cbz	r3, 24fe8 <nrfx_twi_init+0x80>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twi));
   24fde:	6828      	ldr	r0, [r5, #0]
   24fe0:	f340 3007 	sbfx	r0, r0, #12, #8
   24fe4:	f7f0 fcd8 	bl	15998 <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   24fe8:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
   24fec:	4b3f      	ldr	r3, [pc, #252]	; (250ec <nrfx_twi_init+0x184>)
   24fee:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   24ff2:	2301      	movs	r3, #1
   24ff4:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    return err_code;
   24ff8:	483d      	ldr	r0, [pc, #244]	; (250f0 <nrfx_twi_init+0x188>)
}
   24ffa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    NRFX_ASSERT(p_config);
   24ffe:	4c3d      	ldr	r4, [pc, #244]	; (250f4 <nrfx_twi_init+0x18c>)
   25000:	22a4      	movs	r2, #164	; 0xa4
   25002:	4621      	mov	r1, r4
   25004:	483c      	ldr	r0, [pc, #240]	; (250f8 <nrfx_twi_init+0x190>)
   25006:	f006 f842 	bl	2b08e <assert_print>
   2500a:	21a4      	movs	r1, #164	; 0xa4
   2500c:	4620      	mov	r0, r4
   2500e:	f006 f837 	bl	2b080 <assert_post_action>
   25012:	e7b1      	b.n	24f78 <nrfx_twi_init+0x10>
        TWI_PIN_INIT(p_config->scl);
   25014:	6837      	ldr	r7, [r6, #0]
    switch (port)
   25016:	097b      	lsrs	r3, r7, #5
   25018:	d029      	beq.n	2506e <nrfx_twi_init+0x106>
    uint32_t mask = 0;
   2501a:	2300      	movs	r3, #0
    pin_number &= 0x1F;
   2501c:	f007 021f 	and.w	r2, r7, #31
    return (mask & (1UL << pin_number)) ? true : false;
   25020:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   25022:	f013 0f01 	tst.w	r3, #1
   25026:	d025      	beq.n	25074 <nrfx_twi_init+0x10c>
    *p_pin = pin_number & 0x1F;
   25028:	f007 081f 	and.w	r8, r7, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2502c:	097b      	lsrs	r3, r7, #5
   2502e:	d12f      	bne.n	25090 <nrfx_twi_init+0x128>
    reg->PIN_CNF[pin_number] = cnf;
   25030:	f508 78e0 	add.w	r8, r8, #448	; 0x1c0
   25034:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   25038:	f240 620c 	movw	r2, #1548	; 0x60c
   2503c:	f843 2028 	str.w	r2, [r3, r8, lsl #2]
        TWI_PIN_INIT(p_config->sda);
   25040:	6877      	ldr	r7, [r6, #4]
    switch (port)
   25042:	097b      	lsrs	r3, r7, #5
   25044:	d031      	beq.n	250aa <nrfx_twi_init+0x142>
    uint32_t mask = 0;
   25046:	2300      	movs	r3, #0
    pin_number &= 0x1F;
   25048:	f007 021f 	and.w	r2, r7, #31
    return (mask & (1UL << pin_number)) ? true : false;
   2504c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2504e:	f013 0f01 	tst.w	r3, #1
   25052:	d02d      	beq.n	250b0 <nrfx_twi_init+0x148>
    *p_pin = pin_number & 0x1F;
   25054:	f007 081f 	and.w	r8, r7, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   25058:	097b      	lsrs	r3, r7, #5
   2505a:	d137      	bne.n	250cc <nrfx_twi_init+0x164>
    reg->PIN_CNF[pin_number] = cnf;
   2505c:	f508 78e0 	add.w	r8, r8, #448	; 0x1c0
   25060:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   25064:	f240 620c 	movw	r2, #1548	; 0x60c
   25068:	f843 2028 	str.w	r2, [r3, r8, lsl #2]
   2506c:	e7a6      	b.n	24fbc <nrfx_twi_init+0x54>
            mask = P0_FEATURE_PINS_PRESENT;
   2506e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   25072:	e7d3      	b.n	2501c <nrfx_twi_init+0xb4>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   25074:	f8df 8084 	ldr.w	r8, [pc, #132]	; 250fc <nrfx_twi_init+0x194>
   25078:	f240 2247 	movw	r2, #583	; 0x247
   2507c:	4641      	mov	r1, r8
   2507e:	481e      	ldr	r0, [pc, #120]	; (250f8 <nrfx_twi_init+0x190>)
   25080:	f006 f805 	bl	2b08e <assert_print>
   25084:	f240 2147 	movw	r1, #583	; 0x247
   25088:	4640      	mov	r0, r8
   2508a:	f005 fff9 	bl	2b080 <assert_post_action>
   2508e:	e7cb      	b.n	25028 <nrfx_twi_init+0xc0>
            NRFX_ASSERT(0);
   25090:	4f1a      	ldr	r7, [pc, #104]	; (250fc <nrfx_twi_init+0x194>)
   25092:	f44f 7213 	mov.w	r2, #588	; 0x24c
   25096:	4639      	mov	r1, r7
   25098:	4817      	ldr	r0, [pc, #92]	; (250f8 <nrfx_twi_init+0x190>)
   2509a:	f005 fff8 	bl	2b08e <assert_print>
   2509e:	f44f 7113 	mov.w	r1, #588	; 0x24c
   250a2:	4638      	mov	r0, r7
   250a4:	f005 ffec 	bl	2b080 <assert_post_action>
   250a8:	e7c2      	b.n	25030 <nrfx_twi_init+0xc8>
            mask = P0_FEATURE_PINS_PRESENT;
   250aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   250ae:	e7cb      	b.n	25048 <nrfx_twi_init+0xe0>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   250b0:	f8df 8048 	ldr.w	r8, [pc, #72]	; 250fc <nrfx_twi_init+0x194>
   250b4:	f240 2247 	movw	r2, #583	; 0x247
   250b8:	4641      	mov	r1, r8
   250ba:	480f      	ldr	r0, [pc, #60]	; (250f8 <nrfx_twi_init+0x190>)
   250bc:	f005 ffe7 	bl	2b08e <assert_print>
   250c0:	f240 2147 	movw	r1, #583	; 0x247
   250c4:	4640      	mov	r0, r8
   250c6:	f005 ffdb 	bl	2b080 <assert_post_action>
   250ca:	e7c3      	b.n	25054 <nrfx_twi_init+0xec>
            NRFX_ASSERT(0);
   250cc:	4f0b      	ldr	r7, [pc, #44]	; (250fc <nrfx_twi_init+0x194>)
   250ce:	f44f 7213 	mov.w	r2, #588	; 0x24c
   250d2:	4639      	mov	r1, r7
   250d4:	4808      	ldr	r0, [pc, #32]	; (250f8 <nrfx_twi_init+0x190>)
   250d6:	f005 ffda 	bl	2b08e <assert_print>
   250da:	f44f 7113 	mov.w	r1, #588	; 0x24c
   250de:	4638      	mov	r0, r7
   250e0:	f005 ffce 	bl	2b080 <assert_post_action>
   250e4:	e7ba      	b.n	2505c <nrfx_twi_init+0xf4>
        return err_code;
   250e6:	4806      	ldr	r0, [pc, #24]	; (25100 <nrfx_twi_init+0x198>)
   250e8:	e787      	b.n	24ffa <nrfx_twi_init+0x92>
   250ea:	bf00      	nop
   250ec:	200031c4 	.word	0x200031c4
   250f0:	0bad0000 	.word	0x0bad0000
   250f4:	00034e48 	.word	0x00034e48
   250f8:	000318f8 	.word	0x000318f8
   250fc:	00034634 	.word	0x00034634
   25100:	0bad0005 	.word	0x0bad0005

00025104 <nrfx_twi_enable>:
{
   25104:	b570      	push	{r4, r5, r6, lr}
   25106:	4605      	mov	r5, r0
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   25108:	7904      	ldrb	r4, [r0, #4]
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   2510a:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   2510e:	4b10      	ldr	r3, [pc, #64]	; (25150 <nrfx_twi_enable+0x4c>)
   25110:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   25114:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
   25118:	2b01      	cmp	r3, #1
   2511a:	d10c      	bne.n	25136 <nrfx_twi_enable+0x32>
    NRF_TWI_Type * p_twi = p_instance->p_twi;
   2511c:	682b      	ldr	r3, [r5, #0]
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   2511e:	2205      	movs	r2, #5
   25120:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   25124:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
   25128:	4b09      	ldr	r3, [pc, #36]	; (25150 <nrfx_twi_enable+0x4c>)
   2512a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   2512e:	2302      	movs	r3, #2
   25130:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
}
   25134:	bd70      	pop	{r4, r5, r6, pc}
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   25136:	4e07      	ldr	r6, [pc, #28]	; (25154 <nrfx_twi_enable+0x50>)
   25138:	f240 120b 	movw	r2, #267	; 0x10b
   2513c:	4631      	mov	r1, r6
   2513e:	4806      	ldr	r0, [pc, #24]	; (25158 <nrfx_twi_enable+0x54>)
   25140:	f005 ffa5 	bl	2b08e <assert_print>
   25144:	f240 110b 	movw	r1, #267	; 0x10b
   25148:	4630      	mov	r0, r6
   2514a:	f005 ff99 	bl	2b080 <assert_post_action>
   2514e:	e7e5      	b.n	2511c <nrfx_twi_enable+0x18>
   25150:	200031c4 	.word	0x200031c4
   25154:	00034e48 	.word	0x00034e48
   25158:	000318f8 	.word	0x000318f8

0002515c <nrfx_twi_disable>:
{
   2515c:	b570      	push	{r4, r5, r6, lr}
   2515e:	4605      	mov	r5, r0
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   25160:	7904      	ldrb	r4, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   25162:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   25166:	4b15      	ldr	r3, [pc, #84]	; (251bc <nrfx_twi_disable+0x60>)
   25168:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   2516c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
   25170:	b1bb      	cbz	r3, 251a2 <nrfx_twi_disable+0x46>
    NRF_TWI_Type * p_twi = p_instance->p_twi;
   25172:	682b      	ldr	r3, [r5, #0]
    p_reg->INTENCLR = mask;
   25174:	4a12      	ldr	r2, [pc, #72]	; (251c0 <nrfx_twi_disable+0x64>)
   25176:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
   2517a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   2517e:	f022 0203 	bic.w	r2, r2, #3
   25182:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   25186:	2100      	movs	r1, #0
   25188:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   2518c:	4b0b      	ldr	r3, [pc, #44]	; (251bc <nrfx_twi_disable+0x60>)
   2518e:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   25192:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   25196:	2001      	movs	r0, #1
   25198:	f882 002e 	strb.w	r0, [r2, #46]	; 0x2e
    p_cb->busy = false;
   2519c:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
}
   251a0:	bd70      	pop	{r4, r5, r6, pc}
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   251a2:	4e08      	ldr	r6, [pc, #32]	; (251c4 <nrfx_twi_disable+0x68>)
   251a4:	f240 1217 	movw	r2, #279	; 0x117
   251a8:	4631      	mov	r1, r6
   251aa:	4807      	ldr	r0, [pc, #28]	; (251c8 <nrfx_twi_disable+0x6c>)
   251ac:	f005 ff6f 	bl	2b08e <assert_print>
   251b0:	f240 1117 	movw	r1, #279	; 0x117
   251b4:	4630      	mov	r0, r6
   251b6:	f005 ff63 	bl	2b080 <assert_post_action>
   251ba:	e7da      	b.n	25172 <nrfx_twi_disable+0x16>
   251bc:	200031c4 	.word	0x200031c4
   251c0:	00044286 	.word	0x00044286
   251c4:	00034e48 	.word	0x00034e48
   251c8:	000318f8 	.word	0x000318f8

000251cc <nrfx_twi_xfer>:
{
   251cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   251d0:	4605      	mov	r5, r0
   251d2:	460e      	mov	r6, r1
   251d4:	4617      	mov	r7, r2
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   251d6:	7904      	ldrb	r4, [r0, #4]
   251d8:	4b1b      	ldr	r3, [pc, #108]	; (25248 <nrfx_twi_xfer+0x7c>)
   251da:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   251de:	eb03 0882 	add.w	r8, r3, r2, lsl #2
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWI_XFER_TXRX)));
   251e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   251e6:	b16b      	cbz	r3, 25204 <nrfx_twi_xfer+0x38>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWI_XFER_TXTX)));
   251e8:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
   251ec:	4b16      	ldr	r3, [pc, #88]	; (25248 <nrfx_twi_xfer+0x7c>)
   251ee:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   251f2:	b1c3      	cbz	r3, 25226 <nrfx_twi_xfer+0x5a>
    err_code = twi_xfer((NRF_TWI_Type  *)p_instance->p_twi, p_cb, p_xfer_desc, flags);
   251f4:	463b      	mov	r3, r7
   251f6:	4632      	mov	r2, r6
   251f8:	4641      	mov	r1, r8
   251fa:	6828      	ldr	r0, [r5, #0]
   251fc:	f7ff fdd4 	bl	24da8 <twi_xfer>
}
   25200:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWI_XFER_TXRX)));
   25204:	780b      	ldrb	r3, [r1, #0]
   25206:	2b02      	cmp	r3, #2
   25208:	d1ee      	bne.n	251e8 <nrfx_twi_xfer+0x1c>
   2520a:	f8df 9040 	ldr.w	r9, [pc, #64]	; 2524c <nrfx_twi_xfer+0x80>
   2520e:	f44f 7222 	mov.w	r2, #648	; 0x288
   25212:	4649      	mov	r1, r9
   25214:	480e      	ldr	r0, [pc, #56]	; (25250 <nrfx_twi_xfer+0x84>)
   25216:	f005 ff3a 	bl	2b08e <assert_print>
   2521a:	f44f 7122 	mov.w	r1, #648	; 0x288
   2521e:	4648      	mov	r0, r9
   25220:	f005 ff2e 	bl	2b080 <assert_post_action>
   25224:	e7e0      	b.n	251e8 <nrfx_twi_xfer+0x1c>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWI_XFER_TXTX)));
   25226:	7833      	ldrb	r3, [r6, #0]
   25228:	2b03      	cmp	r3, #3
   2522a:	d1e3      	bne.n	251f4 <nrfx_twi_xfer+0x28>
   2522c:	4c07      	ldr	r4, [pc, #28]	; (2524c <nrfx_twi_xfer+0x80>)
   2522e:	f240 2289 	movw	r2, #649	; 0x289
   25232:	4621      	mov	r1, r4
   25234:	4806      	ldr	r0, [pc, #24]	; (25250 <nrfx_twi_xfer+0x84>)
   25236:	f005 ff2a 	bl	2b08e <assert_print>
   2523a:	f240 2189 	movw	r1, #649	; 0x289
   2523e:	4620      	mov	r0, r4
   25240:	f005 ff1e 	bl	2b080 <assert_post_action>
   25244:	e7d6      	b.n	251f4 <nrfx_twi_xfer+0x28>
   25246:	bf00      	nop
   25248:	200031c4 	.word	0x200031c4
   2524c:	00034e48 	.word	0x00034e48
   25250:	000318f8 	.word	0x000318f8

00025254 <nrfx_twi_0_irq_handler>:

#if NRFX_CHECK(NRFX_TWI0_ENABLED)
void nrfx_twi_0_irq_handler(void)
{
   25254:	b508      	push	{r3, lr}
    twi_irq_handler(NRF_TWI0, &m_cb[NRFX_TWI0_INST_IDX]);
   25256:	4902      	ldr	r1, [pc, #8]	; (25260 <nrfx_twi_0_irq_handler+0xc>)
   25258:	4802      	ldr	r0, [pc, #8]	; (25264 <nrfx_twi_0_irq_handler+0x10>)
   2525a:	f7ff fe05 	bl	24e68 <twi_irq_handler>
}
   2525e:	bd08      	pop	{r3, pc}
   25260:	200031c4 	.word	0x200031c4
   25264:	40003000 	.word	0x40003000

00025268 <nrfx_twi_1_irq_handler>:
#endif

#if NRFX_CHECK(NRFX_TWI1_ENABLED)
void nrfx_twi_1_irq_handler(void)
{
   25268:	b508      	push	{r3, lr}
    twi_irq_handler(NRF_TWI1, &m_cb[NRFX_TWI1_INST_IDX]);
   2526a:	4903      	ldr	r1, [pc, #12]	; (25278 <nrfx_twi_1_irq_handler+0x10>)
   2526c:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
   25270:	f7ff fdfa 	bl	24e68 <twi_irq_handler>
}
   25274:	bd08      	pop	{r3, pc}
   25276:	bf00      	nop
   25278:	20003200 	.word	0x20003200

0002527c <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
   2527c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25280:	4605      	mov	r5, r0
   25282:	460e      	mov	r6, r1
    switch (port)
   25284:	0943      	lsrs	r3, r0, #5
   25286:	d052      	beq.n	2532e <nrfx_twi_twim_bus_recover+0xb2>
    uint32_t mask = 0;
   25288:	2300      	movs	r3, #0
    pin_number &= 0x1F;
   2528a:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
   2528e:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   25290:	f013 0f01 	tst.w	r3, #1
   25294:	d04e      	beq.n	25334 <nrfx_twi_twim_bus_recover+0xb8>
    *p_pin = pin_number & 0x1F;
   25296:	f005 041f 	and.w	r4, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2529a:	096b      	lsrs	r3, r5, #5
   2529c:	d157      	bne.n	2534e <nrfx_twi_twim_bus_recover+0xd2>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2529e:	2301      	movs	r3, #1
   252a0:	40a3      	lsls	r3, r4
    p_reg->OUTSET = set_mask;
   252a2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   252a6:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    switch (port)
   252aa:	0973      	lsrs	r3, r6, #5
   252ac:	d05c      	beq.n	25368 <nrfx_twi_twim_bus_recover+0xec>
    uint32_t mask = 0;
   252ae:	2300      	movs	r3, #0
    pin_number &= 0x1F;
   252b0:	f006 021f 	and.w	r2, r6, #31
    return (mask & (1UL << pin_number)) ? true : false;
   252b4:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   252b6:	f013 0f01 	tst.w	r3, #1
   252ba:	d058      	beq.n	2536e <nrfx_twi_twim_bus_recover+0xf2>
    *p_pin = pin_number & 0x1F;
   252bc:	f006 041f 	and.w	r4, r6, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   252c0:	0973      	lsrs	r3, r6, #5
   252c2:	d161      	bne.n	25388 <nrfx_twi_twim_bus_recover+0x10c>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   252c4:	2301      	movs	r3, #1
   252c6:	40a3      	lsls	r3, r4
    p_reg->OUTSET = set_mask;
   252c8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   252cc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    switch (port)
   252d0:	096b      	lsrs	r3, r5, #5
   252d2:	d066      	beq.n	253a2 <nrfx_twi_twim_bus_recover+0x126>
    uint32_t mask = 0;
   252d4:	2300      	movs	r3, #0
    pin_number &= 0x1F;
   252d6:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
   252da:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   252dc:	f013 0f01 	tst.w	r3, #1
   252e0:	d062      	beq.n	253a8 <nrfx_twi_twim_bus_recover+0x12c>
    *p_pin = pin_number & 0x1F;
   252e2:	f005 041f 	and.w	r4, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   252e6:	096b      	lsrs	r3, r5, #5
   252e8:	d16b      	bne.n	253c2 <nrfx_twi_twim_bus_recover+0x146>
    reg->PIN_CNF[pin_number] = cnf;
   252ea:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
   252ee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   252f2:	f240 620d 	movw	r2, #1549	; 0x60d
   252f6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    switch (port)
   252fa:	0973      	lsrs	r3, r6, #5
   252fc:	d06e      	beq.n	253dc <nrfx_twi_twim_bus_recover+0x160>
    uint32_t mask = 0;
   252fe:	2300      	movs	r3, #0
    pin_number &= 0x1F;
   25300:	f006 021f 	and.w	r2, r6, #31
    return (mask & (1UL << pin_number)) ? true : false;
   25304:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   25306:	f013 0f01 	tst.w	r3, #1
   2530a:	d06a      	beq.n	253e2 <nrfx_twi_twim_bus_recover+0x166>
    *p_pin = pin_number & 0x1F;
   2530c:	f006 041f 	and.w	r4, r6, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   25310:	0973      	lsrs	r3, r6, #5
   25312:	d173      	bne.n	253fc <nrfx_twi_twim_bus_recover+0x180>
    reg->PIN_CNF[pin_number] = cnf;
   25314:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
   25318:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   2531c:	f240 620d 	movw	r2, #1549	; 0x60d
   25320:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    nrf_gpio_pin_set(scl_pin);
    nrf_gpio_pin_set(sda_pin);

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
   25324:	2004      	movs	r0, #4
   25326:	f00b f974 	bl	30612 <nrfx_busy_wait>

    for (uint8_t i = 0; i < 9; i++)
   2532a:	2700      	movs	r7, #0
   2532c:	e0c6      	b.n	254bc <nrfx_twi_twim_bus_recover+0x240>
            mask = P0_FEATURE_PINS_PRESENT;
   2532e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   25332:	e7aa      	b.n	2528a <nrfx_twi_twim_bus_recover+0xe>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   25334:	4cc1      	ldr	r4, [pc, #772]	; (2563c <nrfx_twi_twim_bus_recover+0x3c0>)
   25336:	f240 2247 	movw	r2, #583	; 0x247
   2533a:	4621      	mov	r1, r4
   2533c:	48c0      	ldr	r0, [pc, #768]	; (25640 <nrfx_twi_twim_bus_recover+0x3c4>)
   2533e:	f005 fea6 	bl	2b08e <assert_print>
   25342:	f240 2147 	movw	r1, #583	; 0x247
   25346:	4620      	mov	r0, r4
   25348:	f005 fe9a 	bl	2b080 <assert_post_action>
   2534c:	e7a3      	b.n	25296 <nrfx_twi_twim_bus_recover+0x1a>
            NRFX_ASSERT(0);
   2534e:	4fbb      	ldr	r7, [pc, #748]	; (2563c <nrfx_twi_twim_bus_recover+0x3c0>)
   25350:	f44f 7213 	mov.w	r2, #588	; 0x24c
   25354:	4639      	mov	r1, r7
   25356:	48ba      	ldr	r0, [pc, #744]	; (25640 <nrfx_twi_twim_bus_recover+0x3c4>)
   25358:	f005 fe99 	bl	2b08e <assert_print>
   2535c:	f44f 7113 	mov.w	r1, #588	; 0x24c
   25360:	4638      	mov	r0, r7
   25362:	f005 fe8d 	bl	2b080 <assert_post_action>
   25366:	e79a      	b.n	2529e <nrfx_twi_twim_bus_recover+0x22>
            mask = P0_FEATURE_PINS_PRESENT;
   25368:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2536c:	e7a0      	b.n	252b0 <nrfx_twi_twim_bus_recover+0x34>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2536e:	4cb3      	ldr	r4, [pc, #716]	; (2563c <nrfx_twi_twim_bus_recover+0x3c0>)
   25370:	f240 2247 	movw	r2, #583	; 0x247
   25374:	4621      	mov	r1, r4
   25376:	48b2      	ldr	r0, [pc, #712]	; (25640 <nrfx_twi_twim_bus_recover+0x3c4>)
   25378:	f005 fe89 	bl	2b08e <assert_print>
   2537c:	f240 2147 	movw	r1, #583	; 0x247
   25380:	4620      	mov	r0, r4
   25382:	f005 fe7d 	bl	2b080 <assert_post_action>
   25386:	e799      	b.n	252bc <nrfx_twi_twim_bus_recover+0x40>
            NRFX_ASSERT(0);
   25388:	4fac      	ldr	r7, [pc, #688]	; (2563c <nrfx_twi_twim_bus_recover+0x3c0>)
   2538a:	f44f 7213 	mov.w	r2, #588	; 0x24c
   2538e:	4639      	mov	r1, r7
   25390:	48ab      	ldr	r0, [pc, #684]	; (25640 <nrfx_twi_twim_bus_recover+0x3c4>)
   25392:	f005 fe7c 	bl	2b08e <assert_print>
   25396:	f44f 7113 	mov.w	r1, #588	; 0x24c
   2539a:	4638      	mov	r0, r7
   2539c:	f005 fe70 	bl	2b080 <assert_post_action>
   253a0:	e790      	b.n	252c4 <nrfx_twi_twim_bus_recover+0x48>
            mask = P0_FEATURE_PINS_PRESENT;
   253a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   253a6:	e796      	b.n	252d6 <nrfx_twi_twim_bus_recover+0x5a>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   253a8:	4ca4      	ldr	r4, [pc, #656]	; (2563c <nrfx_twi_twim_bus_recover+0x3c0>)
   253aa:	f240 2247 	movw	r2, #583	; 0x247
   253ae:	4621      	mov	r1, r4
   253b0:	48a3      	ldr	r0, [pc, #652]	; (25640 <nrfx_twi_twim_bus_recover+0x3c4>)
   253b2:	f005 fe6c 	bl	2b08e <assert_print>
   253b6:	f240 2147 	movw	r1, #583	; 0x247
   253ba:	4620      	mov	r0, r4
   253bc:	f005 fe60 	bl	2b080 <assert_post_action>
   253c0:	e78f      	b.n	252e2 <nrfx_twi_twim_bus_recover+0x66>
            NRFX_ASSERT(0);
   253c2:	4f9e      	ldr	r7, [pc, #632]	; (2563c <nrfx_twi_twim_bus_recover+0x3c0>)
   253c4:	f44f 7213 	mov.w	r2, #588	; 0x24c
   253c8:	4639      	mov	r1, r7
   253ca:	489d      	ldr	r0, [pc, #628]	; (25640 <nrfx_twi_twim_bus_recover+0x3c4>)
   253cc:	f005 fe5f 	bl	2b08e <assert_print>
   253d0:	f44f 7113 	mov.w	r1, #588	; 0x24c
   253d4:	4638      	mov	r0, r7
   253d6:	f005 fe53 	bl	2b080 <assert_post_action>
   253da:	e786      	b.n	252ea <nrfx_twi_twim_bus_recover+0x6e>
            mask = P0_FEATURE_PINS_PRESENT;
   253dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   253e0:	e78e      	b.n	25300 <nrfx_twi_twim_bus_recover+0x84>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   253e2:	4c96      	ldr	r4, [pc, #600]	; (2563c <nrfx_twi_twim_bus_recover+0x3c0>)
   253e4:	f240 2247 	movw	r2, #583	; 0x247
   253e8:	4621      	mov	r1, r4
   253ea:	4895      	ldr	r0, [pc, #596]	; (25640 <nrfx_twi_twim_bus_recover+0x3c4>)
   253ec:	f005 fe4f 	bl	2b08e <assert_print>
   253f0:	f240 2147 	movw	r1, #583	; 0x247
   253f4:	4620      	mov	r0, r4
   253f6:	f005 fe43 	bl	2b080 <assert_post_action>
   253fa:	e787      	b.n	2530c <nrfx_twi_twim_bus_recover+0x90>
            NRFX_ASSERT(0);
   253fc:	4f8f      	ldr	r7, [pc, #572]	; (2563c <nrfx_twi_twim_bus_recover+0x3c0>)
   253fe:	f44f 7213 	mov.w	r2, #588	; 0x24c
   25402:	4639      	mov	r1, r7
   25404:	488e      	ldr	r0, [pc, #568]	; (25640 <nrfx_twi_twim_bus_recover+0x3c4>)
   25406:	f005 fe42 	bl	2b08e <assert_print>
   2540a:	f44f 7113 	mov.w	r1, #588	; 0x24c
   2540e:	4638      	mov	r0, r7
   25410:	f005 fe36 	bl	2b080 <assert_post_action>
   25414:	e77e      	b.n	25314 <nrfx_twi_twim_bus_recover+0x98>
            mask = P0_FEATURE_PINS_PRESENT;
   25416:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2541a:	e054      	b.n	254c6 <nrfx_twi_twim_bus_recover+0x24a>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2541c:	4c87      	ldr	r4, [pc, #540]	; (2563c <nrfx_twi_twim_bus_recover+0x3c0>)
   2541e:	f240 2247 	movw	r2, #583	; 0x247
   25422:	4621      	mov	r1, r4
   25424:	4886      	ldr	r0, [pc, #536]	; (25640 <nrfx_twi_twim_bus_recover+0x3c4>)
   25426:	f005 fe32 	bl	2b08e <assert_print>
   2542a:	f240 2147 	movw	r1, #583	; 0x247
   2542e:	4620      	mov	r0, r4
   25430:	f005 fe26 	bl	2b080 <assert_post_action>
   25434:	e04d      	b.n	254d2 <nrfx_twi_twim_bus_recover+0x256>
            NRFX_ASSERT(0);
   25436:	f8df 8204 	ldr.w	r8, [pc, #516]	; 2563c <nrfx_twi_twim_bus_recover+0x3c0>
   2543a:	f44f 7213 	mov.w	r2, #588	; 0x24c
   2543e:	4641      	mov	r1, r8
   25440:	487f      	ldr	r0, [pc, #508]	; (25640 <nrfx_twi_twim_bus_recover+0x3c4>)
   25442:	f005 fe24 	bl	2b08e <assert_print>
   25446:	f44f 7113 	mov.w	r1, #588	; 0x24c
   2544a:	4640      	mov	r0, r8
   2544c:	f005 fe18 	bl	2b080 <assert_post_action>
   25450:	e043      	b.n	254da <nrfx_twi_twim_bus_recover+0x25e>
            mask = P0_FEATURE_PINS_PRESENT;
   25452:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   25456:	e04b      	b.n	254f0 <nrfx_twi_twim_bus_recover+0x274>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   25458:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 2563c <nrfx_twi_twim_bus_recover+0x3c0>
   2545c:	f240 2247 	movw	r2, #583	; 0x247
   25460:	4641      	mov	r1, r8
   25462:	4877      	ldr	r0, [pc, #476]	; (25640 <nrfx_twi_twim_bus_recover+0x3c4>)
   25464:	f005 fe13 	bl	2b08e <assert_print>
   25468:	f240 2147 	movw	r1, #583	; 0x247
   2546c:	4640      	mov	r0, r8
   2546e:	f005 fe07 	bl	2b080 <assert_post_action>
   25472:	e043      	b.n	254fc <nrfx_twi_twim_bus_recover+0x280>
            NRFX_ASSERT(0);
   25474:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 2563c <nrfx_twi_twim_bus_recover+0x3c0>
   25478:	f44f 7213 	mov.w	r2, #588	; 0x24c
   2547c:	4649      	mov	r1, r9
   2547e:	4870      	ldr	r0, [pc, #448]	; (25640 <nrfx_twi_twim_bus_recover+0x3c4>)
   25480:	f005 fe05 	bl	2b08e <assert_print>
   25484:	f44f 7113 	mov.w	r1, #588	; 0x24c
   25488:	4648      	mov	r0, r9
   2548a:	f005 fdf9 	bl	2b080 <assert_post_action>
   2548e:	e039      	b.n	25504 <nrfx_twi_twim_bus_recover+0x288>
    pin_number &= 0x1F;
   25490:	f005 031f 	and.w	r3, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
   25494:	fa24 f303 	lsr.w	r3, r4, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   25498:	f013 0f01 	tst.w	r3, #1
   2549c:	d041      	beq.n	25522 <nrfx_twi_twim_bus_recover+0x2a6>
    *p_pin = pin_number & 0x1F;
   2549e:	f005 041f 	and.w	r4, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   254a2:	096b      	lsrs	r3, r5, #5
   254a4:	d14a      	bne.n	2553c <nrfx_twi_twim_bus_recover+0x2c0>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   254a6:	2301      	movs	r3, #1
   254a8:	40a3      	lsls	r3, r4
    p_reg->OUTSET = set_mask;
   254aa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   254ae:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
            nrf_gpio_pin_set(scl_pin);
            NRFX_DELAY_US(4);
   254b2:	2004      	movs	r0, #4
   254b4:	f00b f8ad 	bl	30612 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
   254b8:	3701      	adds	r7, #1
   254ba:	b2ff      	uxtb	r7, r7
   254bc:	2f08      	cmp	r7, #8
   254be:	d84b      	bhi.n	25558 <nrfx_twi_twim_bus_recover+0x2dc>
    switch (port)
   254c0:	0973      	lsrs	r3, r6, #5
   254c2:	d0a8      	beq.n	25416 <nrfx_twi_twim_bus_recover+0x19a>
    uint32_t mask = 0;
   254c4:	2300      	movs	r3, #0
    pin_number &= 0x1F;
   254c6:	f006 021f 	and.w	r2, r6, #31
    return (mask & (1UL << pin_number)) ? true : false;
   254ca:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   254cc:	f013 0f01 	tst.w	r3, #1
   254d0:	d0a4      	beq.n	2541c <nrfx_twi_twim_bus_recover+0x1a0>
    *p_pin = pin_number & 0x1F;
   254d2:	f006 041f 	and.w	r4, r6, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   254d6:	0973      	lsrs	r3, r6, #5
   254d8:	d1ad      	bne.n	25436 <nrfx_twi_twim_bus_recover+0x1ba>
    return p_reg->IN;
   254da:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   254de:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   254e2:	40e3      	lsrs	r3, r4
        if (nrf_gpio_pin_read(sda_pin))
   254e4:	f013 0401 	ands.w	r4, r3, #1
   254e8:	d136      	bne.n	25558 <nrfx_twi_twim_bus_recover+0x2dc>
    switch (port)
   254ea:	096b      	lsrs	r3, r5, #5
   254ec:	d0b1      	beq.n	25452 <nrfx_twi_twim_bus_recover+0x1d6>
    uint32_t mask = 0;
   254ee:	4623      	mov	r3, r4
    pin_number &= 0x1F;
   254f0:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
   254f4:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   254f6:	f013 0f01 	tst.w	r3, #1
   254fa:	d0ad      	beq.n	25458 <nrfx_twi_twim_bus_recover+0x1dc>
    *p_pin = pin_number & 0x1F;
   254fc:	f005 081f 	and.w	r8, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   25500:	096b      	lsrs	r3, r5, #5
   25502:	d1b7      	bne.n	25474 <nrfx_twi_twim_bus_recover+0x1f8>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   25504:	2301      	movs	r3, #1
   25506:	fa03 f308 	lsl.w	r3, r3, r8
    p_reg->OUTCLR = clr_mask;
   2550a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   2550e:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
            NRFX_DELAY_US(4);
   25512:	2004      	movs	r0, #4
   25514:	f00b f87d 	bl	30612 <nrfx_busy_wait>
    switch (port)
   25518:	096b      	lsrs	r3, r5, #5
   2551a:	d1b9      	bne.n	25490 <nrfx_twi_twim_bus_recover+0x214>
            mask = P0_FEATURE_PINS_PRESENT;
   2551c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   25520:	e7b6      	b.n	25490 <nrfx_twi_twim_bus_recover+0x214>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   25522:	4c46      	ldr	r4, [pc, #280]	; (2563c <nrfx_twi_twim_bus_recover+0x3c0>)
   25524:	f240 2247 	movw	r2, #583	; 0x247
   25528:	4621      	mov	r1, r4
   2552a:	4845      	ldr	r0, [pc, #276]	; (25640 <nrfx_twi_twim_bus_recover+0x3c4>)
   2552c:	f005 fdaf 	bl	2b08e <assert_print>
   25530:	f240 2147 	movw	r1, #583	; 0x247
   25534:	4620      	mov	r0, r4
   25536:	f005 fda3 	bl	2b080 <assert_post_action>
   2553a:	e7b0      	b.n	2549e <nrfx_twi_twim_bus_recover+0x222>
            NRFX_ASSERT(0);
   2553c:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 2563c <nrfx_twi_twim_bus_recover+0x3c0>
   25540:	f44f 7213 	mov.w	r2, #588	; 0x24c
   25544:	4641      	mov	r1, r8
   25546:	483e      	ldr	r0, [pc, #248]	; (25640 <nrfx_twi_twim_bus_recover+0x3c4>)
   25548:	f005 fda1 	bl	2b08e <assert_print>
   2554c:	f44f 7113 	mov.w	r1, #588	; 0x24c
   25550:	4640      	mov	r0, r8
   25552:	f005 fd95 	bl	2b080 <assert_post_action>
   25556:	e7a6      	b.n	254a6 <nrfx_twi_twim_bus_recover+0x22a>
    switch (port)
   25558:	0973      	lsrs	r3, r6, #5
   2555a:	d041      	beq.n	255e0 <nrfx_twi_twim_bus_recover+0x364>
    uint32_t mask = 0;
   2555c:	2300      	movs	r3, #0
    pin_number &= 0x1F;
   2555e:	f006 021f 	and.w	r2, r6, #31
    return (mask & (1UL << pin_number)) ? true : false;
   25562:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   25564:	f013 0f01 	tst.w	r3, #1
   25568:	d03d      	beq.n	255e6 <nrfx_twi_twim_bus_recover+0x36a>
    *p_pin = pin_number & 0x1F;
   2556a:	f006 041f 	and.w	r4, r6, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2556e:	0973      	lsrs	r3, r6, #5
   25570:	d146      	bne.n	25600 <nrfx_twi_twim_bus_recover+0x384>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   25572:	2301      	movs	r3, #1
   25574:	40a3      	lsls	r3, r4
    p_reg->OUTCLR = clr_mask;
   25576:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   2557a:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
   2557e:	2004      	movs	r0, #4
   25580:	f00b f847 	bl	30612 <nrfx_busy_wait>
    switch (port)
   25584:	0973      	lsrs	r3, r6, #5
   25586:	d048      	beq.n	2561a <nrfx_twi_twim_bus_recover+0x39e>
    uint32_t mask = 0;
   25588:	2300      	movs	r3, #0
    pin_number &= 0x1F;
   2558a:	f006 021f 	and.w	r2, r6, #31
    return (mask & (1UL << pin_number)) ? true : false;
   2558e:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   25590:	f013 0f01 	tst.w	r3, #1
   25594:	d044      	beq.n	25620 <nrfx_twi_twim_bus_recover+0x3a4>
    *p_pin = pin_number & 0x1F;
   25596:	f006 041f 	and.w	r4, r6, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2559a:	0973      	lsrs	r3, r6, #5
   2559c:	d154      	bne.n	25648 <nrfx_twi_twim_bus_recover+0x3cc>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2559e:	2301      	movs	r3, #1
   255a0:	40a3      	lsls	r3, r4
    p_reg->OUTSET = set_mask;
   255a2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   255a6:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    nrf_gpio_pin_set(sda_pin);
    NRFX_DELAY_US(4);
   255aa:	2004      	movs	r0, #4
   255ac:	f00b f831 	bl	30612 <nrfx_busy_wait>
    switch (port)
   255b0:	0973      	lsrs	r3, r6, #5
   255b2:	d056      	beq.n	25662 <nrfx_twi_twim_bus_recover+0x3e6>
    uint32_t mask = 0;
   255b4:	2300      	movs	r3, #0
    pin_number &= 0x1F;
   255b6:	f006 021f 	and.w	r2, r6, #31
    return (mask & (1UL << pin_number)) ? true : false;
   255ba:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   255bc:	f013 0f01 	tst.w	r3, #1
   255c0:	d052      	beq.n	25668 <nrfx_twi_twim_bus_recover+0x3ec>
    *p_pin = pin_number & 0x1F;
   255c2:	f006 041f 	and.w	r4, r6, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   255c6:	0973      	lsrs	r3, r6, #5
   255c8:	d15b      	bne.n	25682 <nrfx_twi_twim_bus_recover+0x406>
    return p_reg->IN;
   255ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   255ce:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   255d2:	40e3      	lsrs	r3, r4

    if (nrf_gpio_pin_read(sda_pin))
   255d4:	f013 0f01 	tst.w	r3, #1
   255d8:	d060      	beq.n	2569c <nrfx_twi_twim_bus_recover+0x420>
    {
        return NRFX_SUCCESS;
   255da:	481a      	ldr	r0, [pc, #104]	; (25644 <nrfx_twi_twim_bus_recover+0x3c8>)
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
   255dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            mask = P0_FEATURE_PINS_PRESENT;
   255e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   255e4:	e7bb      	b.n	2555e <nrfx_twi_twim_bus_recover+0x2e2>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   255e6:	4c15      	ldr	r4, [pc, #84]	; (2563c <nrfx_twi_twim_bus_recover+0x3c0>)
   255e8:	f240 2247 	movw	r2, #583	; 0x247
   255ec:	4621      	mov	r1, r4
   255ee:	4814      	ldr	r0, [pc, #80]	; (25640 <nrfx_twi_twim_bus_recover+0x3c4>)
   255f0:	f005 fd4d 	bl	2b08e <assert_print>
   255f4:	f240 2147 	movw	r1, #583	; 0x247
   255f8:	4620      	mov	r0, r4
   255fa:	f005 fd41 	bl	2b080 <assert_post_action>
   255fe:	e7b4      	b.n	2556a <nrfx_twi_twim_bus_recover+0x2ee>
            NRFX_ASSERT(0);
   25600:	4d0e      	ldr	r5, [pc, #56]	; (2563c <nrfx_twi_twim_bus_recover+0x3c0>)
   25602:	f44f 7213 	mov.w	r2, #588	; 0x24c
   25606:	4629      	mov	r1, r5
   25608:	480d      	ldr	r0, [pc, #52]	; (25640 <nrfx_twi_twim_bus_recover+0x3c4>)
   2560a:	f005 fd40 	bl	2b08e <assert_print>
   2560e:	f44f 7113 	mov.w	r1, #588	; 0x24c
   25612:	4628      	mov	r0, r5
   25614:	f005 fd34 	bl	2b080 <assert_post_action>
   25618:	e7ab      	b.n	25572 <nrfx_twi_twim_bus_recover+0x2f6>
            mask = P0_FEATURE_PINS_PRESENT;
   2561a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2561e:	e7b4      	b.n	2558a <nrfx_twi_twim_bus_recover+0x30e>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   25620:	4c06      	ldr	r4, [pc, #24]	; (2563c <nrfx_twi_twim_bus_recover+0x3c0>)
   25622:	f240 2247 	movw	r2, #583	; 0x247
   25626:	4621      	mov	r1, r4
   25628:	4805      	ldr	r0, [pc, #20]	; (25640 <nrfx_twi_twim_bus_recover+0x3c4>)
   2562a:	f005 fd30 	bl	2b08e <assert_print>
   2562e:	f240 2147 	movw	r1, #583	; 0x247
   25632:	4620      	mov	r0, r4
   25634:	f005 fd24 	bl	2b080 <assert_post_action>
   25638:	e7ad      	b.n	25596 <nrfx_twi_twim_bus_recover+0x31a>
   2563a:	bf00      	nop
   2563c:	00034634 	.word	0x00034634
   25640:	000318f8 	.word	0x000318f8
   25644:	0bad0000 	.word	0x0bad0000
            NRFX_ASSERT(0);
   25648:	4d15      	ldr	r5, [pc, #84]	; (256a0 <nrfx_twi_twim_bus_recover+0x424>)
   2564a:	f44f 7213 	mov.w	r2, #588	; 0x24c
   2564e:	4629      	mov	r1, r5
   25650:	4814      	ldr	r0, [pc, #80]	; (256a4 <nrfx_twi_twim_bus_recover+0x428>)
   25652:	f005 fd1c 	bl	2b08e <assert_print>
   25656:	f44f 7113 	mov.w	r1, #588	; 0x24c
   2565a:	4628      	mov	r0, r5
   2565c:	f005 fd10 	bl	2b080 <assert_post_action>
   25660:	e79d      	b.n	2559e <nrfx_twi_twim_bus_recover+0x322>
            mask = P0_FEATURE_PINS_PRESENT;
   25662:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   25666:	e7a6      	b.n	255b6 <nrfx_twi_twim_bus_recover+0x33a>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   25668:	4c0d      	ldr	r4, [pc, #52]	; (256a0 <nrfx_twi_twim_bus_recover+0x424>)
   2566a:	f240 2247 	movw	r2, #583	; 0x247
   2566e:	4621      	mov	r1, r4
   25670:	480c      	ldr	r0, [pc, #48]	; (256a4 <nrfx_twi_twim_bus_recover+0x428>)
   25672:	f005 fd0c 	bl	2b08e <assert_print>
   25676:	f240 2147 	movw	r1, #583	; 0x247
   2567a:	4620      	mov	r0, r4
   2567c:	f005 fd00 	bl	2b080 <assert_post_action>
   25680:	e79f      	b.n	255c2 <nrfx_twi_twim_bus_recover+0x346>
            NRFX_ASSERT(0);
   25682:	4d07      	ldr	r5, [pc, #28]	; (256a0 <nrfx_twi_twim_bus_recover+0x424>)
   25684:	f44f 7213 	mov.w	r2, #588	; 0x24c
   25688:	4629      	mov	r1, r5
   2568a:	4806      	ldr	r0, [pc, #24]	; (256a4 <nrfx_twi_twim_bus_recover+0x428>)
   2568c:	f005 fcff 	bl	2b08e <assert_print>
   25690:	f44f 7113 	mov.w	r1, #588	; 0x24c
   25694:	4628      	mov	r0, r5
   25696:	f005 fcf3 	bl	2b080 <assert_post_action>
   2569a:	e796      	b.n	255ca <nrfx_twi_twim_bus_recover+0x34e>
        return NRFX_ERROR_INTERNAL;
   2569c:	4802      	ldr	r0, [pc, #8]	; (256a8 <nrfx_twi_twim_bus_recover+0x42c>)
   2569e:	e79d      	b.n	255dc <nrfx_twi_twim_bus_recover+0x360>
   256a0:	00034634 	.word	0x00034634
   256a4:	000318f8 	.word	0x000318f8
   256a8:	0bad0001 	.word	0x0bad0001

000256ac <_DoInit>:
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   256ac:	4b15      	ldr	r3, [pc, #84]	; (25704 <_DoInit+0x58>)
   256ae:	2203      	movs	r2, #3
   256b0:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   256b2:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   256b4:	4914      	ldr	r1, [pc, #80]	; (25708 <_DoInit+0x5c>)
   256b6:	6199      	str	r1, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   256b8:	4a14      	ldr	r2, [pc, #80]	; (2570c <_DoInit+0x60>)
   256ba:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   256bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
   256c0:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
   256c2:	2200      	movs	r2, #0
   256c4:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   256c6:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   256c8:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
   256ca:	6619      	str	r1, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   256cc:	4910      	ldr	r1, [pc, #64]	; (25710 <_DoInit+0x64>)
   256ce:	6659      	str	r1, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   256d0:	2110      	movs	r1, #16
   256d2:	6699      	str	r1, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   256d4:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   256d6:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   256d8:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   256da:	4a0e      	ldr	r2, [pc, #56]	; (25714 <_DoInit+0x68>)
   256dc:	6810      	ldr	r0, [r2, #0]
   256de:	f8c3 0007 	str.w	r0, [r3, #7]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   256e2:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
   256e6:	4a0c      	ldr	r2, [pc, #48]	; (25718 <_DoInit+0x6c>)
   256e8:	e892 0003 	ldmia.w	r2, {r0, r1}
   256ec:	6018      	str	r0, [r3, #0]
   256ee:	8099      	strh	r1, [r3, #4]
   256f0:	0c09      	lsrs	r1, r1, #16
   256f2:	7199      	strb	r1, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   256f4:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
   256f8:	2220      	movs	r2, #32
   256fa:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   256fc:	f3bf 8f5f 	dmb	sy
}
   25700:	4770      	bx	lr
   25702:	bf00      	nop
   25704:	2000323c 	.word	0x2000323c
   25708:	00034e84 	.word	0x00034e84
   2570c:	200032f4 	.word	0x200032f4
   25710:	200032e4 	.word	0x200032e4
   25714:	00034e90 	.word	0x00034e90
   25718:	00034e94 	.word	0x00034e94

0002571c <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
   2571c:	4b03      	ldr	r3, [pc, #12]	; (2572c <z_device_state_init+0x10>)

	while (dev < __device_end) {
   2571e:	e000      	b.n	25722 <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
   25720:	3318      	adds	r3, #24
	while (dev < __device_end) {
   25722:	4a03      	ldr	r2, [pc, #12]	; (25730 <z_device_state_init+0x14>)
   25724:	4293      	cmp	r3, r2
   25726:	d3fb      	bcc.n	25720 <z_device_state_init+0x4>
	}
}
   25728:	4770      	bx	lr
   2572a:	bf00      	nop
   2572c:	00031094 	.word	0x00031094
   25730:	0003116c 	.word	0x0003116c

00025734 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   25734:	b570      	push	{r4, r5, r6, lr}
   25736:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   25738:	4b11      	ldr	r3, [pc, #68]	; (25780 <z_sys_init_run_level+0x4c>)
   2573a:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   2573e:	e009      	b.n	25754 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
   25740:	4240      	negs	r0, r0
   25742:	e017      	b.n	25774 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
   25744:	68eb      	ldr	r3, [r5, #12]
   25746:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
   25748:	68ea      	ldr	r2, [r5, #12]
   2574a:	7853      	ldrb	r3, [r2, #1]
   2574c:	f043 0301 	orr.w	r3, r3, #1
   25750:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   25752:	3408      	adds	r4, #8
   25754:	1c73      	adds	r3, r6, #1
   25756:	4a0a      	ldr	r2, [pc, #40]	; (25780 <z_sys_init_run_level+0x4c>)
   25758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   2575c:	42a3      	cmp	r3, r4
   2575e:	d90d      	bls.n	2577c <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
   25760:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
   25762:	6823      	ldr	r3, [r4, #0]
   25764:	4628      	mov	r0, r5
   25766:	4798      	blx	r3
		if (dev != NULL) {
   25768:	2d00      	cmp	r5, #0
   2576a:	d0f2      	beq.n	25752 <z_sys_init_run_level+0x1e>
			if (rc != 0) {
   2576c:	2800      	cmp	r0, #0
   2576e:	d0eb      	beq.n	25748 <z_sys_init_run_level+0x14>
				if (rc < 0) {
   25770:	2800      	cmp	r0, #0
   25772:	dbe5      	blt.n	25740 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
   25774:	28ff      	cmp	r0, #255	; 0xff
   25776:	dde5      	ble.n	25744 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
   25778:	20ff      	movs	r0, #255	; 0xff
   2577a:	e7e3      	b.n	25744 <z_sys_init_run_level+0x10>
		}
	}
}
   2577c:	bd70      	pop	{r4, r5, r6, pc}
   2577e:	bf00      	nop
   25780:	00034e9c 	.word	0x00034e9c

00025784 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   25784:	b538      	push	{r3, r4, r5, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   25786:	4605      	mov	r5, r0
   25788:	b328      	cbz	r0, 257d6 <z_impl_device_get_binding+0x52>
   2578a:	7803      	ldrb	r3, [r0, #0]
   2578c:	b32b      	cbz	r3, 257da <z_impl_device_get_binding+0x56>
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
   2578e:	4c14      	ldr	r4, [pc, #80]	; (257e0 <z_impl_device_get_binding+0x5c>)
   25790:	e000      	b.n	25794 <z_impl_device_get_binding+0x10>
   25792:	3418      	adds	r4, #24
   25794:	4b13      	ldr	r3, [pc, #76]	; (257e4 <z_impl_device_get_binding+0x60>)
   25796:	429c      	cmp	r4, r3
   25798:	d008      	beq.n	257ac <z_impl_device_get_binding+0x28>
		if (z_device_is_ready(dev) && (dev->name == name)) {
   2579a:	4620      	mov	r0, r4
   2579c:	f00b f87e 	bl	3089c <z_device_is_ready>
   257a0:	2800      	cmp	r0, #0
   257a2:	d0f6      	beq.n	25792 <z_impl_device_get_binding+0xe>
   257a4:	6823      	ldr	r3, [r4, #0]
   257a6:	42ab      	cmp	r3, r5
   257a8:	d1f3      	bne.n	25792 <z_impl_device_get_binding+0xe>
   257aa:	e012      	b.n	257d2 <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
   257ac:	4c0c      	ldr	r4, [pc, #48]	; (257e0 <z_impl_device_get_binding+0x5c>)
   257ae:	e000      	b.n	257b2 <z_impl_device_get_binding+0x2e>
   257b0:	3418      	adds	r4, #24
   257b2:	4b0c      	ldr	r3, [pc, #48]	; (257e4 <z_impl_device_get_binding+0x60>)
   257b4:	429c      	cmp	r4, r3
   257b6:	d00b      	beq.n	257d0 <z_impl_device_get_binding+0x4c>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   257b8:	4620      	mov	r0, r4
   257ba:	f00b f86f 	bl	3089c <z_device_is_ready>
   257be:	2800      	cmp	r0, #0
   257c0:	d0f6      	beq.n	257b0 <z_impl_device_get_binding+0x2c>
   257c2:	6821      	ldr	r1, [r4, #0]
   257c4:	4628      	mov	r0, r5
   257c6:	f7e7 fc6a 	bl	d09e <strcmp>
   257ca:	2800      	cmp	r0, #0
   257cc:	d1f0      	bne.n	257b0 <z_impl_device_get_binding+0x2c>
   257ce:	e000      	b.n	257d2 <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	return NULL;
   257d0:	2400      	movs	r4, #0
}
   257d2:	4620      	mov	r0, r4
   257d4:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   257d6:	4604      	mov	r4, r0
   257d8:	e7fb      	b.n	257d2 <z_impl_device_get_binding+0x4e>
   257da:	2400      	movs	r4, #0
   257dc:	e7f9      	b.n	257d2 <z_impl_device_get_binding+0x4e>
   257de:	bf00      	nop
   257e0:	00031094 	.word	0x00031094
   257e4:	0003116c 	.word	0x0003116c

000257e8 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   257e8:	4b01      	ldr	r3, [pc, #4]	; (257f0 <z_impl_z_errno+0x8>)
   257ea:	6898      	ldr	r0, [r3, #8]
}
   257ec:	3064      	adds	r0, #100	; 0x64
   257ee:	4770      	bx	lr
   257f0:	200036f4 	.word	0x200036f4

000257f4 <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
   257f4:	2804      	cmp	r0, #4
   257f6:	d80c      	bhi.n	25812 <reason_to_str+0x1e>
   257f8:	e8df f000 	tbb	[pc, r0]
   257fc:	07050d03 	.word	0x07050d03
   25800:	09          	.byte	0x09
   25801:	00          	.byte	0x00
   25802:	4806      	ldr	r0, [pc, #24]	; (2581c <reason_to_str+0x28>)
   25804:	4770      	bx	lr
	case K_ERR_CPU_EXCEPTION:
		return "CPU exception";
	case K_ERR_SPURIOUS_IRQ:
		return "Unhandled interrupt";
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
   25806:	4806      	ldr	r0, [pc, #24]	; (25820 <reason_to_str+0x2c>)
   25808:	4770      	bx	lr
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
   2580a:	4806      	ldr	r0, [pc, #24]	; (25824 <reason_to_str+0x30>)
   2580c:	4770      	bx	lr
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
   2580e:	4806      	ldr	r0, [pc, #24]	; (25828 <reason_to_str+0x34>)
   25810:	4770      	bx	lr
	default:
		return "Unknown error";
   25812:	4806      	ldr	r0, [pc, #24]	; (2582c <reason_to_str+0x38>)
   25814:	4770      	bx	lr
		return "Unhandled interrupt";
   25816:	4806      	ldr	r0, [pc, #24]	; (25830 <reason_to_str+0x3c>)
	}
}
   25818:	4770      	bx	lr
   2581a:	bf00      	nop
   2581c:	00034f04 	.word	0x00034f04
   25820:	00034ed8 	.word	0x00034ed8
   25824:	00034ee8 	.word	0x00034ee8
   25828:	00034ef4 	.word	0x00034ef4
   2582c:	00034eb4 	.word	0x00034eb4
   25830:	00034ec4 	.word	0x00034ec4

00025834 <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   25834:	b130      	cbz	r0, 25844 <thread_name_get+0x10>
{
   25836:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   25838:	f00b f87c 	bl	30934 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   2583c:	b120      	cbz	r0, 25848 <thread_name_get+0x14>
   2583e:	7803      	ldrb	r3, [r0, #0]
   25840:	b123      	cbz	r3, 2584c <thread_name_get+0x18>
}
   25842:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
   25844:	4802      	ldr	r0, [pc, #8]	; (25850 <thread_name_get+0x1c>)
}
   25846:	4770      	bx	lr
		thread_name = "unknown";
   25848:	4801      	ldr	r0, [pc, #4]	; (25850 <thread_name_get+0x1c>)
   2584a:	e7fa      	b.n	25842 <thread_name_get+0xe>
   2584c:	4800      	ldr	r0, [pc, #0]	; (25850 <thread_name_get+0x1c>)
	return thread_name;
   2584e:	e7f8      	b.n	25842 <thread_name_get+0xe>
   25850:	00034f14 	.word	0x00034f14

00025854 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   25854:	b5f0      	push	{r4, r5, r6, r7, lr}
   25856:	b083      	sub	sp, #12
   25858:	4604      	mov	r4, r0
   2585a:	460e      	mov	r6, r1
	__asm__ volatile(
   2585c:	f04f 0340 	mov.w	r3, #64	; 0x40
   25860:	f3ef 8711 	mrs	r7, BASEPRI
   25864:	f383 8812 	msr	BASEPRI_MAX, r3
   25868:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   2586c:	f002 febc 	bl	285e8 <z_impl_z_current_get>
   25870:	4605      	mov	r5, r0
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   25872:	4620      	mov	r0, r4
   25874:	f7ff ffbe 	bl	257f4 <reason_to_str>
   25878:	4603      	mov	r3, r0
   2587a:	2200      	movs	r2, #0
   2587c:	9200      	str	r2, [sp, #0]
   2587e:	4622      	mov	r2, r4
   25880:	2145      	movs	r1, #69	; 0x45
   25882:	4818      	ldr	r0, [pc, #96]	; (258e4 <z_fatal_error+0x90>)
   25884:	f005 fc12 	bl	2b0ac <z_log_minimal_printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   25888:	b11e      	cbz	r6, 25892 <z_fatal_error+0x3e>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   2588a:	69f3      	ldr	r3, [r6, #28]
   2588c:	f3c3 0308 	ubfx	r3, r3, #0, #9
   25890:	b9bb      	cbnz	r3, 258c2 <z_fatal_error+0x6e>
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   25892:	4628      	mov	r0, r5
   25894:	f7ff ffce 	bl	25834 <thread_name_get>
   25898:	4603      	mov	r3, r0
   2589a:	462a      	mov	r2, r5
   2589c:	2145      	movs	r1, #69	; 0x45
   2589e:	4812      	ldr	r0, [pc, #72]	; (258e8 <z_fatal_error+0x94>)
   258a0:	f005 fc04 	bl	2b0ac <z_log_minimal_printk>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   258a4:	4631      	mov	r1, r6
   258a6:	4620      	mov	r0, r4
   258a8:	f7fd f916 	bl	22ad8 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   258ac:	2c04      	cmp	r4, #4
   258ae:	d00d      	beq.n	258cc <z_fatal_error+0x78>
	__asm__ volatile(
   258b0:	f387 8811 	msr	BASEPRI, r7
   258b4:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   258b8:	4628      	mov	r0, r5
   258ba:	f7f0 fcef 	bl	1629c <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   258be:	b003      	add	sp, #12
   258c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Fault during interrupt handling\n");
   258c2:	2145      	movs	r1, #69	; 0x45
   258c4:	4809      	ldr	r0, [pc, #36]	; (258ec <z_fatal_error+0x98>)
   258c6:	f005 fbf1 	bl	2b0ac <z_log_minimal_printk>
   258ca:	e7e2      	b.n	25892 <z_fatal_error+0x3e>
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   258cc:	4c08      	ldr	r4, [pc, #32]	; (258f0 <z_fatal_error+0x9c>)
   258ce:	2293      	movs	r2, #147	; 0x93
   258d0:	4621      	mov	r1, r4
   258d2:	4808      	ldr	r0, [pc, #32]	; (258f4 <z_fatal_error+0xa0>)
   258d4:	f005 fbdb 	bl	2b08e <assert_print>
   258d8:	2193      	movs	r1, #147	; 0x93
   258da:	4620      	mov	r0, r4
   258dc:	f005 fbd0 	bl	2b080 <assert_post_action>
   258e0:	e7e6      	b.n	258b0 <z_fatal_error+0x5c>
   258e2:	bf00      	nop
   258e4:	00034f1c 	.word	0x00034f1c
   258e8:	00034f74 	.word	0x00034f74
   258ec:	00034f4c 	.word	0x00034f4c
   258f0:	00034f94 	.word	0x00034f94
   258f4:	000318f8 	.word	0x000318f8

000258f8 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   258f8:	b510      	push	{r4, lr}
   258fa:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
   258fc:	4c0f      	ldr	r4, [pc, #60]	; (2593c <init_idle_thread+0x44>)
   258fe:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
	k_thread_stack_t *stack = z_idle_stacks[i];
   25902:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   25906:	4b0e      	ldr	r3, [pc, #56]	; (25940 <init_idle_thread+0x48>)
   25908:	eb03 00cc 	add.w	r0, r3, ip, lsl #3
	z_setup_new_thread(thread, stack,
   2590c:	2300      	movs	r3, #0
   2590e:	9305      	str	r3, [sp, #20]
   25910:	2201      	movs	r2, #1
   25912:	9204      	str	r2, [sp, #16]
   25914:	220f      	movs	r2, #15
   25916:	9203      	str	r2, [sp, #12]
   25918:	9302      	str	r3, [sp, #8]
   2591a:	9301      	str	r3, [sp, #4]
   2591c:	9000      	str	r0, [sp, #0]
   2591e:	4b09      	ldr	r3, [pc, #36]	; (25944 <init_idle_thread+0x4c>)
   25920:	f44f 72a0 	mov.w	r2, #320	; 0x140
   25924:	4908      	ldr	r1, [pc, #32]	; (25948 <init_idle_thread+0x50>)
   25926:	eb01 11cc 	add.w	r1, r1, ip, lsl #7
   2592a:	4620      	mov	r0, r4
   2592c:	f000 fac0 	bl	25eb0 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   25930:	7b63      	ldrb	r3, [r4, #13]
   25932:	f023 0304 	bic.w	r3, r3, #4
   25936:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   25938:	b006      	add	sp, #24
   2593a:	bd10      	pop	{r4, pc}
   2593c:	20001eb0 	.word	0x20001eb0
   25940:	200036f4 	.word	0x200036f4
   25944:	00026109 	.word	0x00026109
   25948:	200058c0 	.word	0x200058c0

0002594c <bg_thread_main>:
{
   2594c:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   2594e:	4b0a      	ldr	r3, [pc, #40]	; (25978 <bg_thread_main+0x2c>)
   25950:	2201      	movs	r2, #1
   25952:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   25954:	2002      	movs	r0, #2
   25956:	f7ff feed 	bl	25734 <z_sys_init_run_level>
	boot_banner();
   2595a:	f004 f851 	bl	29a00 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   2595e:	2003      	movs	r0, #3
   25960:	f7ff fee8 	bl	25734 <z_sys_init_run_level>
	z_init_static_threads();
   25964:	f000 fb3a 	bl	25fdc <z_init_static_threads>
	main();
   25968:	f7ec f938 	bl	11bdc <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   2596c:	4a03      	ldr	r2, [pc, #12]	; (2597c <bg_thread_main+0x30>)
   2596e:	7b13      	ldrb	r3, [r2, #12]
   25970:	f023 0301 	bic.w	r3, r3, #1
   25974:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   25976:	bd08      	pop	{r3, pc}
   25978:	20003770 	.word	0x20003770
   2597c:	20001f30 	.word	0x20001f30

00025980 <switch_to_main_thread>:
	return stack_ptr;
}

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
   25980:	b508      	push	{r3, lr}
   25982:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   25984:	4a01      	ldr	r2, [pc, #4]	; (2598c <switch_to_main_thread+0xc>)
   25986:	4802      	ldr	r0, [pc, #8]	; (25990 <switch_to_main_thread+0x10>)
   25988:	f7f0 f92e 	bl	15be8 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   2598c:	0002594d 	.word	0x0002594d
   25990:	20001f30 	.word	0x20001f30

00025994 <z_bss_zero>:
{
   25994:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   25996:	4803      	ldr	r0, [pc, #12]	; (259a4 <z_bss_zero+0x10>)
   25998:	4a03      	ldr	r2, [pc, #12]	; (259a8 <z_bss_zero+0x14>)
   2599a:	1a12      	subs	r2, r2, r0
   2599c:	2100      	movs	r1, #0
   2599e:	f00a ff8a 	bl	308b6 <z_early_memset>
}
   259a2:	bd08      	pop	{r3, pc}
   259a4:	20000b60 	.word	0x20000b60
   259a8:	20003774 	.word	0x20003774

000259ac <z_init_cpu>:
{
   259ac:	b510      	push	{r4, lr}
   259ae:	4604      	mov	r4, r0
	init_idle_thread(id);
   259b0:	f7ff ffa2 	bl	258f8 <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   259b4:	490b      	ldr	r1, [pc, #44]	; (259e4 <z_init_cpu+0x38>)
   259b6:	eb01 11c4 	add.w	r1, r1, r4, lsl #7
   259ba:	4a0b      	ldr	r2, [pc, #44]	; (259e8 <z_init_cpu+0x3c>)
   259bc:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   259c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   259c4:	60d9      	str	r1, [r3, #12]
	_kernel.cpus[id].id = id;
   259c6:	751c      	strb	r4, [r3, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   259c8:	eb04 1144 	add.w	r1, r4, r4, lsl #5
   259cc:	4b07      	ldr	r3, [pc, #28]	; (259ec <z_init_cpu+0x40>)
   259ce:	eb03 1381 	add.w	r3, r3, r1, lsl #6
   259d2:	f503 6304 	add.w	r3, r3, #2112	; 0x840
	_kernel.cpus[id].irq_stack =
   259d6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   259da:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
   259de:	6063      	str	r3, [r4, #4]
}
   259e0:	bd10      	pop	{r4, pc}
   259e2:	bf00      	nop
   259e4:	20001eb0 	.word	0x20001eb0
   259e8:	200036f4 	.word	0x200036f4
   259ec:	20005a40 	.word	0x20005a40

000259f0 <prepare_multithreading>:
{
   259f0:	b570      	push	{r4, r5, r6, lr}
   259f2:	b086      	sub	sp, #24
	z_sched_init();
   259f4:	f002 fc7c 	bl	282f0 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
   259f8:	4d10      	ldr	r5, [pc, #64]	; (25a3c <prepare_multithreading+0x4c>)
   259fa:	4b11      	ldr	r3, [pc, #68]	; (25a40 <prepare_multithreading+0x50>)
   259fc:	61dd      	str	r5, [r3, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   259fe:	4b11      	ldr	r3, [pc, #68]	; (25a44 <prepare_multithreading+0x54>)
   25a00:	9305      	str	r3, [sp, #20]
   25a02:	2301      	movs	r3, #1
   25a04:	9304      	str	r3, [sp, #16]
   25a06:	2400      	movs	r4, #0
   25a08:	9403      	str	r4, [sp, #12]
   25a0a:	9402      	str	r4, [sp, #8]
   25a0c:	9401      	str	r4, [sp, #4]
   25a0e:	9400      	str	r4, [sp, #0]
   25a10:	4b0d      	ldr	r3, [pc, #52]	; (25a48 <prepare_multithreading+0x58>)
   25a12:	f44f 6280 	mov.w	r2, #1024	; 0x400
   25a16:	490d      	ldr	r1, [pc, #52]	; (25a4c <prepare_multithreading+0x5c>)
   25a18:	4628      	mov	r0, r5
   25a1a:	f000 fa49 	bl	25eb0 <z_setup_new_thread>
   25a1e:	4606      	mov	r6, r0
   25a20:	7b6b      	ldrb	r3, [r5, #13]
   25a22:	f023 0304 	bic.w	r3, r3, #4
   25a26:	736b      	strb	r3, [r5, #13]
	z_ready_thread(&z_main_thread);
   25a28:	4628      	mov	r0, r5
   25a2a:	f002 f847 	bl	27abc <z_ready_thread>
	z_init_cpu(0);
   25a2e:	4620      	mov	r0, r4
   25a30:	f7ff ffbc 	bl	259ac <z_init_cpu>
}
   25a34:	4630      	mov	r0, r6
   25a36:	b006      	add	sp, #24
   25a38:	bd70      	pop	{r4, r5, r6, pc}
   25a3a:	bf00      	nop
   25a3c:	20001f30 	.word	0x20001f30
   25a40:	200036f4 	.word	0x200036f4
   25a44:	00034fb8 	.word	0x00034fb8
   25a48:	0002594d 	.word	0x0002594d
   25a4c:	20005480 	.word	0x20005480

00025a50 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   25a50:	b500      	push	{lr}
   25a52:	b0a1      	sub	sp, #132	; 0x84
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   25a54:	4b1d      	ldr	r3, [pc, #116]	; (25acc <z_cstart+0x7c>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   25a56:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   25a5a:	4c1d      	ldr	r4, [pc, #116]	; (25ad0 <z_cstart+0x80>)
   25a5c:	6963      	ldr	r3, [r4, #20]
   25a5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   25a62:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   25a64:	23e0      	movs	r3, #224	; 0xe0
   25a66:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   25a6a:	2320      	movs	r3, #32
   25a6c:	77e3      	strb	r3, [r4, #31]
   25a6e:	2500      	movs	r5, #0
   25a70:	7625      	strb	r5, [r4, #24]
   25a72:	7665      	strb	r5, [r4, #25]
   25a74:	76a5      	strb	r5, [r4, #26]
   25a76:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   25a7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   25a7c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   25a80:	6263      	str	r3, [r4, #36]	; 0x24
   25a82:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   25a86:	f7f0 fb75 	bl	16174 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   25a8a:	f7ef ff3f 	bl	1590c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   25a8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   25a92:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   25a94:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   25a96:	f7f0 fcfb 	bl	16490 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   25a9a:	f7f0 fc19 	bl	162d0 <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
   25a9e:	2401      	movs	r4, #1
   25aa0:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   25aa4:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
   25aa8:	951a      	str	r5, [sp, #104]	; 0x68
	dummy_thread->stack_info.size = 0U;
   25aaa:	951b      	str	r5, [sp, #108]	; 0x6c
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
   25aac:	951d      	str	r5, [sp, #116]	; 0x74
#endif

	_current_cpu->current = dummy_thread;
   25aae:	4b09      	ldr	r3, [pc, #36]	; (25ad4 <z_cstart+0x84>)
   25ab0:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   25ab4:	f7ff fe32 	bl	2571c <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   25ab8:	4628      	mov	r0, r5
   25aba:	f7ff fe3b 	bl	25734 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   25abe:	4620      	mov	r0, r4
   25ac0:	f7ff fe38 	bl	25734 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
   25ac4:	f7ff ff94 	bl	259f0 <prepare_multithreading>
   25ac8:	f7ff ff5a 	bl	25980 <switch_to_main_thread>
   25acc:	20006280 	.word	0x20006280
   25ad0:	e000ed00 	.word	0xe000ed00
   25ad4:	200036f4 	.word	0x200036f4

00025ad8 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   25ad8:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   25ada:	4c0d      	ldr	r4, [pc, #52]	; (25b10 <statics_init+0x38>)
   25adc:	e008      	b.n	25af0 <statics_init+0x18>
   25ade:	4b0d      	ldr	r3, [pc, #52]	; (25b14 <statics_init+0x3c>)
   25ae0:	429c      	cmp	r4, r3
   25ae2:	d213      	bcs.n	25b0c <statics_init+0x34>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   25ae4:	68a2      	ldr	r2, [r4, #8]
   25ae6:	6861      	ldr	r1, [r4, #4]
   25ae8:	4620      	mov	r0, r4
   25aea:	f00a feec 	bl	308c6 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   25aee:	3418      	adds	r4, #24
   25af0:	4b08      	ldr	r3, [pc, #32]	; (25b14 <statics_init+0x3c>)
   25af2:	429c      	cmp	r4, r3
   25af4:	d9f3      	bls.n	25ade <statics_init+0x6>
   25af6:	4d08      	ldr	r5, [pc, #32]	; (25b18 <statics_init+0x40>)
   25af8:	2218      	movs	r2, #24
   25afa:	4629      	mov	r1, r5
   25afc:	4807      	ldr	r0, [pc, #28]	; (25b1c <statics_init+0x44>)
   25afe:	f005 fac6 	bl	2b08e <assert_print>
   25b02:	2118      	movs	r1, #24
   25b04:	4628      	mov	r0, r5
   25b06:	f005 fabb 	bl	2b080 <assert_post_action>
   25b0a:	e7e8      	b.n	25ade <statics_init+0x6>
		}
	}
	return 0;
}
   25b0c:	2000      	movs	r0, #0
   25b0e:	bd38      	pop	{r3, r4, r5, pc}
   25b10:	2000099c 	.word	0x2000099c
   25b14:	2000099c 	.word	0x2000099c
   25b18:	00034fc4 	.word	0x00034fc4
   25b1c:	000318f8 	.word	0x000318f8

00025b20 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   25b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25b24:	b085      	sub	sp, #20
   25b26:	4680      	mov	r8, r0
   25b28:	468b      	mov	fp, r1
   25b2a:	9203      	str	r2, [sp, #12]
   25b2c:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
   25b30:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   25b32:	4648      	mov	r0, r9
   25b34:	4621      	mov	r1, r4
   25b36:	f00b f83b 	bl	30bb0 <sys_clock_timeout_end_calc>
   25b3a:	4607      	mov	r7, r0
   25b3c:	468a      	mov	sl, r1
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   25b3e:	f108 0614 	add.w	r6, r8, #20
	__asm__ volatile(
   25b42:	f04f 0340 	mov.w	r3, #64	; 0x40
   25b46:	f3ef 8511 	mrs	r5, BASEPRI
   25b4a:	f383 8812 	msr	BASEPRI_MAX, r3
   25b4e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25b52:	4630      	mov	r0, r6
   25b54:	f000 fab0 	bl	260b8 <z_spin_lock_valid>
   25b58:	b160      	cbz	r0, 25b74 <k_heap_aligned_alloc+0x54>
	z_spin_lock_set_owner(l);
   25b5a:	4630      	mov	r0, r6
   25b5c:	f000 facc 	bl	260f8 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   25b60:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   25b64:	b113      	cbz	r3, 25b6c <k_heap_aligned_alloc+0x4c>
   25b66:	ea54 0309 	orrs.w	r3, r4, r9
   25b6a:	d10d      	bne.n	25b88 <k_heap_aligned_alloc+0x68>

	bool blocked_alloc = false;
   25b6c:	f04f 0900 	mov.w	r9, #0
	void *ret = NULL;
   25b70:	464c      	mov	r4, r9

	while (ret == NULL) {
   25b72:	e02b      	b.n	25bcc <k_heap_aligned_alloc+0xac>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25b74:	228e      	movs	r2, #142	; 0x8e
   25b76:	4931      	ldr	r1, [pc, #196]	; (25c3c <k_heap_aligned_alloc+0x11c>)
   25b78:	4831      	ldr	r0, [pc, #196]	; (25c40 <k_heap_aligned_alloc+0x120>)
   25b7a:	f005 fa88 	bl	2b08e <assert_print>
   25b7e:	218e      	movs	r1, #142	; 0x8e
   25b80:	482e      	ldr	r0, [pc, #184]	; (25c3c <k_heap_aligned_alloc+0x11c>)
   25b82:	f005 fa7d 	bl	2b080 <assert_post_action>
   25b86:	e7e8      	b.n	25b5a <k_heap_aligned_alloc+0x3a>
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   25b88:	4c2e      	ldr	r4, [pc, #184]	; (25c44 <k_heap_aligned_alloc+0x124>)
   25b8a:	2249      	movs	r2, #73	; 0x49
   25b8c:	4621      	mov	r1, r4
   25b8e:	482c      	ldr	r0, [pc, #176]	; (25c40 <k_heap_aligned_alloc+0x120>)
   25b90:	f005 fa7d 	bl	2b08e <assert_print>
   25b94:	2149      	movs	r1, #73	; 0x49
   25b96:	4620      	mov	r0, r4
   25b98:	f005 fa72 	bl	2b080 <assert_post_action>
   25b9c:	e7e6      	b.n	25b6c <k_heap_aligned_alloc+0x4c>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   25b9e:	9000      	str	r0, [sp, #0]
   25ba0:	9101      	str	r1, [sp, #4]
   25ba2:	f108 020c 	add.w	r2, r8, #12
   25ba6:	4629      	mov	r1, r5
   25ba8:	4630      	mov	r0, r6
   25baa:	f002 f917 	bl	27ddc <z_pend_curr>
   25bae:	f04f 0340 	mov.w	r3, #64	; 0x40
   25bb2:	f3ef 8511 	mrs	r5, BASEPRI
   25bb6:	f383 8812 	msr	BASEPRI_MAX, r3
   25bba:	f3bf 8f6f 	isb	sy
   25bbe:	4630      	mov	r0, r6
   25bc0:	f000 fa7a 	bl	260b8 <z_spin_lock_valid>
   25bc4:	b1c8      	cbz	r0, 25bfa <k_heap_aligned_alloc+0xda>
	z_spin_lock_set_owner(l);
   25bc6:	4630      	mov	r0, r6
   25bc8:	f000 fa96 	bl	260f8 <z_spin_lock_set_owner>
	while (ret == NULL) {
   25bcc:	b9fc      	cbnz	r4, 25c0e <k_heap_aligned_alloc+0xee>
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   25bce:	9a03      	ldr	r2, [sp, #12]
   25bd0:	4659      	mov	r1, fp
   25bd2:	4640      	mov	r0, r8
   25bd4:	f7ed fcee 	bl	135b4 <sys_heap_aligned_alloc>
   25bd8:	4604      	mov	r4, r0
		now = sys_clock_tick_get();
   25bda:	f003 f8dd 	bl	28d98 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   25bde:	b9b4      	cbnz	r4, 25c0e <k_heap_aligned_alloc+0xee>
		    (ret != NULL) || ((end - now) <= 0)) {
   25be0:	1a38      	subs	r0, r7, r0
   25be2:	eb6a 0101 	sbc.w	r1, sl, r1
   25be6:	2801      	cmp	r0, #1
   25be8:	f171 0300 	sbcs.w	r3, r1, #0
   25bec:	db0f      	blt.n	25c0e <k_heap_aligned_alloc+0xee>
		if (!blocked_alloc) {
   25bee:	f1b9 0f00 	cmp.w	r9, #0
   25bf2:	d1d4      	bne.n	25b9e <k_heap_aligned_alloc+0x7e>
			blocked_alloc = true;
   25bf4:	f04f 0901 	mov.w	r9, #1
   25bf8:	e7d1      	b.n	25b9e <k_heap_aligned_alloc+0x7e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25bfa:	228e      	movs	r2, #142	; 0x8e
   25bfc:	490f      	ldr	r1, [pc, #60]	; (25c3c <k_heap_aligned_alloc+0x11c>)
   25bfe:	4810      	ldr	r0, [pc, #64]	; (25c40 <k_heap_aligned_alloc+0x120>)
   25c00:	f005 fa45 	bl	2b08e <assert_print>
   25c04:	218e      	movs	r1, #142	; 0x8e
   25c06:	480d      	ldr	r0, [pc, #52]	; (25c3c <k_heap_aligned_alloc+0x11c>)
   25c08:	f005 fa3a 	bl	2b080 <assert_post_action>
   25c0c:	e7db      	b.n	25bc6 <k_heap_aligned_alloc+0xa6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25c0e:	4630      	mov	r0, r6
   25c10:	f000 fa62 	bl	260d8 <z_spin_unlock_valid>
   25c14:	b138      	cbz	r0, 25c26 <k_heap_aligned_alloc+0x106>
	__asm__ volatile(
   25c16:	f385 8811 	msr	BASEPRI, r5
   25c1a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   25c1e:	4620      	mov	r0, r4
   25c20:	b005      	add	sp, #20
   25c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25c26:	4e05      	ldr	r6, [pc, #20]	; (25c3c <k_heap_aligned_alloc+0x11c>)
   25c28:	22b9      	movs	r2, #185	; 0xb9
   25c2a:	4631      	mov	r1, r6
   25c2c:	4804      	ldr	r0, [pc, #16]	; (25c40 <k_heap_aligned_alloc+0x120>)
   25c2e:	f005 fa2e 	bl	2b08e <assert_print>
   25c32:	21b9      	movs	r1, #185	; 0xb9
   25c34:	4630      	mov	r0, r6
   25c36:	f005 fa23 	bl	2b080 <assert_post_action>
   25c3a:	e7ec      	b.n	25c16 <k_heap_aligned_alloc+0xf6>
   25c3c:	000319f0 	.word	0x000319f0
   25c40:	000318f8 	.word	0x000318f8
   25c44:	00034fc4 	.word	0x00034fc4

00025c48 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   25c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25c4c:	4604      	mov	r4, r0
   25c4e:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   25c50:	f100 0514 	add.w	r5, r0, #20
	__asm__ volatile(
   25c54:	f04f 0340 	mov.w	r3, #64	; 0x40
   25c58:	f3ef 8711 	mrs	r7, BASEPRI
   25c5c:	f383 8812 	msr	BASEPRI_MAX, r3
   25c60:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25c64:	4628      	mov	r0, r5
   25c66:	f000 fa27 	bl	260b8 <z_spin_lock_valid>
   25c6a:	b188      	cbz	r0, 25c90 <k_heap_free+0x48>
	z_spin_lock_set_owner(l);
   25c6c:	4628      	mov	r0, r5
   25c6e:	f000 fa43 	bl	260f8 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   25c72:	4631      	mov	r1, r6
   25c74:	4620      	mov	r0, r4
   25c76:	f7ed fc5f 	bl	13538 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   25c7a:	f104 000c 	add.w	r0, r4, #12
   25c7e:	f00a ff5e 	bl	30b3e <z_unpend_all>
   25c82:	b188      	cbz	r0, 25ca8 <k_heap_free+0x60>
		z_reschedule(&h->lock, key);
   25c84:	4639      	mov	r1, r7
   25c86:	4628      	mov	r0, r5
   25c88:	f001 fc84 	bl	27594 <z_reschedule>
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   25c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25c90:	f8df 803c 	ldr.w	r8, [pc, #60]	; 25cd0 <k_heap_free+0x88>
   25c94:	228e      	movs	r2, #142	; 0x8e
   25c96:	4641      	mov	r1, r8
   25c98:	480e      	ldr	r0, [pc, #56]	; (25cd4 <k_heap_free+0x8c>)
   25c9a:	f005 f9f8 	bl	2b08e <assert_print>
   25c9e:	218e      	movs	r1, #142	; 0x8e
   25ca0:	4640      	mov	r0, r8
   25ca2:	f005 f9ed 	bl	2b080 <assert_post_action>
   25ca6:	e7e1      	b.n	25c6c <k_heap_free+0x24>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25ca8:	4628      	mov	r0, r5
   25caa:	f000 fa15 	bl	260d8 <z_spin_unlock_valid>
   25cae:	b120      	cbz	r0, 25cba <k_heap_free+0x72>
	__asm__ volatile(
   25cb0:	f387 8811 	msr	BASEPRI, r7
   25cb4:	f3bf 8f6f 	isb	sy
   25cb8:	e7e8      	b.n	25c8c <k_heap_free+0x44>
   25cba:	4c05      	ldr	r4, [pc, #20]	; (25cd0 <k_heap_free+0x88>)
   25cbc:	22b9      	movs	r2, #185	; 0xb9
   25cbe:	4621      	mov	r1, r4
   25cc0:	4804      	ldr	r0, [pc, #16]	; (25cd4 <k_heap_free+0x8c>)
   25cc2:	f005 f9e4 	bl	2b08e <assert_print>
   25cc6:	21b9      	movs	r1, #185	; 0xb9
   25cc8:	4620      	mov	r0, r4
   25cca:	f005 f9d9 	bl	2b080 <assert_post_action>
   25cce:	e7ef      	b.n	25cb0 <k_heap_free+0x68>
   25cd0:	000319f0 	.word	0x000319f0
   25cd4:	000318f8 	.word	0x000318f8

00025cd8 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   25cd8:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   25cda:	4c0e      	ldr	r4, [pc, #56]	; (25d14 <init_mem_slab_module+0x3c>)
	int rc = 0;
   25cdc:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   25cde:	e008      	b.n	25cf2 <init_mem_slab_module+0x1a>
   25ce0:	4b0d      	ldr	r3, [pc, #52]	; (25d18 <init_mem_slab_module+0x40>)
   25ce2:	429c      	cmp	r4, r3
   25ce4:	d213      	bcs.n	25d0e <init_mem_slab_module+0x36>
		rc = create_free_list(slab);
   25ce6:	4620      	mov	r0, r4
   25ce8:	f00a fdf5 	bl	308d6 <create_free_list>
		if (rc < 0) {
   25cec:	1e05      	subs	r5, r0, #0
   25cee:	db0e      	blt.n	25d0e <init_mem_slab_module+0x36>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   25cf0:	3420      	adds	r4, #32
   25cf2:	4b09      	ldr	r3, [pc, #36]	; (25d18 <init_mem_slab_module+0x40>)
   25cf4:	429c      	cmp	r4, r3
   25cf6:	d9f3      	bls.n	25ce0 <init_mem_slab_module+0x8>
   25cf8:	4e08      	ldr	r6, [pc, #32]	; (25d1c <init_mem_slab_module+0x44>)
   25cfa:	223d      	movs	r2, #61	; 0x3d
   25cfc:	4631      	mov	r1, r6
   25cfe:	4808      	ldr	r0, [pc, #32]	; (25d20 <init_mem_slab_module+0x48>)
   25d00:	f005 f9c5 	bl	2b08e <assert_print>
   25d04:	213d      	movs	r1, #61	; 0x3d
   25d06:	4630      	mov	r0, r6
   25d08:	f005 f9ba 	bl	2b080 <assert_post_action>
   25d0c:	e7e8      	b.n	25ce0 <init_mem_slab_module+0x8>
		z_object_init(slab);
	}

out:
	return rc;
}
   25d0e:	4628      	mov	r0, r5
   25d10:	bd70      	pop	{r4, r5, r6, pc}
   25d12:	bf00      	nop
   25d14:	2000093c 	.word	0x2000093c
   25d18:	2000099c 	.word	0x2000099c
   25d1c:	00034fe8 	.word	0x00034fe8
   25d20:	000318f8 	.word	0x000318f8

00025d24 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   25d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25d28:	b082      	sub	sp, #8
   25d2a:	4604      	mov	r4, r0
   25d2c:	460e      	mov	r6, r1
   25d2e:	4690      	mov	r8, r2
   25d30:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   25d32:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   25d36:	f04f 0340 	mov.w	r3, #64	; 0x40
   25d3a:	f3ef 8711 	mrs	r7, BASEPRI
   25d3e:	f383 8812 	msr	BASEPRI_MAX, r3
   25d42:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25d46:	4628      	mov	r0, r5
   25d48:	f000 f9b6 	bl	260b8 <z_spin_lock_valid>
   25d4c:	b1c0      	cbz	r0, 25d80 <k_mem_slab_alloc+0x5c>
	z_spin_lock_set_owner(l);
   25d4e:	4628      	mov	r0, r5
   25d50:	f000 f9d2 	bl	260f8 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   25d54:	69a1      	ldr	r1, [r4, #24]
   25d56:	b1f9      	cbz	r1, 25d98 <k_mem_slab_alloc+0x74>
		/* take a free block */
		*mem = slab->free_list;
   25d58:	6031      	str	r1, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
   25d5a:	69a3      	ldr	r3, [r4, #24]
   25d5c:	681b      	ldr	r3, [r3, #0]
   25d5e:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
   25d60:	69e3      	ldr	r3, [r4, #28]
   25d62:	3301      	adds	r3, #1
   25d64:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   25d66:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25d68:	4628      	mov	r0, r5
   25d6a:	f000 f9b5 	bl	260d8 <z_spin_unlock_valid>
   25d6e:	b360      	cbz	r0, 25dca <k_mem_slab_alloc+0xa6>
	__asm__ volatile(
   25d70:	f387 8811 	msr	BASEPRI, r7
   25d74:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
   25d78:	4620      	mov	r0, r4
   25d7a:	b002      	add	sp, #8
   25d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25d80:	f8df a05c 	ldr.w	sl, [pc, #92]	; 25de0 <k_mem_slab_alloc+0xbc>
   25d84:	228e      	movs	r2, #142	; 0x8e
   25d86:	4651      	mov	r1, sl
   25d88:	4816      	ldr	r0, [pc, #88]	; (25de4 <k_mem_slab_alloc+0xc0>)
   25d8a:	f005 f980 	bl	2b08e <assert_print>
   25d8e:	218e      	movs	r1, #142	; 0x8e
   25d90:	4650      	mov	r0, sl
   25d92:	f005 f975 	bl	2b080 <assert_post_action>
   25d96:	e7da      	b.n	25d4e <k_mem_slab_alloc+0x2a>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   25d98:	ea59 0308 	orrs.w	r3, r9, r8
   25d9c:	d104      	bne.n	25da8 <k_mem_slab_alloc+0x84>
		*mem = NULL;
   25d9e:	2300      	movs	r3, #0
   25da0:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
   25da2:	f06f 040b 	mvn.w	r4, #11
   25da6:	e7df      	b.n	25d68 <k_mem_slab_alloc+0x44>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   25da8:	f8cd 8000 	str.w	r8, [sp]
   25dac:	f8cd 9004 	str.w	r9, [sp, #4]
   25db0:	4622      	mov	r2, r4
   25db2:	4639      	mov	r1, r7
   25db4:	4628      	mov	r0, r5
   25db6:	f002 f811 	bl	27ddc <z_pend_curr>
		if (result == 0) {
   25dba:	4604      	mov	r4, r0
   25dbc:	2800      	cmp	r0, #0
   25dbe:	d1db      	bne.n	25d78 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   25dc0:	4b09      	ldr	r3, [pc, #36]	; (25de8 <k_mem_slab_alloc+0xc4>)
   25dc2:	689b      	ldr	r3, [r3, #8]
   25dc4:	695b      	ldr	r3, [r3, #20]
   25dc6:	6033      	str	r3, [r6, #0]
		return result;
   25dc8:	e7d6      	b.n	25d78 <k_mem_slab_alloc+0x54>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25dca:	4d05      	ldr	r5, [pc, #20]	; (25de0 <k_mem_slab_alloc+0xbc>)
   25dcc:	22b9      	movs	r2, #185	; 0xb9
   25dce:	4629      	mov	r1, r5
   25dd0:	4804      	ldr	r0, [pc, #16]	; (25de4 <k_mem_slab_alloc+0xc0>)
   25dd2:	f005 f95c 	bl	2b08e <assert_print>
   25dd6:	21b9      	movs	r1, #185	; 0xb9
   25dd8:	4628      	mov	r0, r5
   25dda:	f005 f951 	bl	2b080 <assert_post_action>
   25dde:	e7c7      	b.n	25d70 <k_mem_slab_alloc+0x4c>
   25de0:	000319f0 	.word	0x000319f0
   25de4:	000318f8 	.word	0x000318f8
   25de8:	200036f4 	.word	0x200036f4

00025dec <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   25dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25df0:	4604      	mov	r4, r0
   25df2:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   25df4:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   25df8:	f04f 0340 	mov.w	r3, #64	; 0x40
   25dfc:	f3ef 8711 	mrs	r7, BASEPRI
   25e00:	f383 8812 	msr	BASEPRI_MAX, r3
   25e04:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25e08:	4630      	mov	r0, r6
   25e0a:	f000 f955 	bl	260b8 <z_spin_lock_valid>
   25e0e:	b1b0      	cbz	r0, 25e3e <k_mem_slab_free+0x52>
	z_spin_lock_set_owner(l);
   25e10:	4630      	mov	r0, r6
   25e12:	f000 f971 	bl	260f8 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   25e16:	69a3      	ldr	r3, [r4, #24]
   25e18:	b1eb      	cbz	r3, 25e56 <k_mem_slab_free+0x6a>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
   25e1a:	682b      	ldr	r3, [r5, #0]
   25e1c:	69a2      	ldr	r2, [r4, #24]
   25e1e:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   25e20:	682b      	ldr	r3, [r5, #0]
   25e22:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   25e24:	69e3      	ldr	r3, [r4, #28]
   25e26:	3b01      	subs	r3, #1
   25e28:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25e2a:	4630      	mov	r0, r6
   25e2c:	f000 f954 	bl	260d8 <z_spin_unlock_valid>
   25e30:	b308      	cbz	r0, 25e76 <k_mem_slab_free+0x8a>
	__asm__ volatile(
   25e32:	f387 8811 	msr	BASEPRI, r7
   25e36:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   25e3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25e3e:	f8df 804c 	ldr.w	r8, [pc, #76]	; 25e8c <k_mem_slab_free+0xa0>
   25e42:	228e      	movs	r2, #142	; 0x8e
   25e44:	4641      	mov	r1, r8
   25e46:	4812      	ldr	r0, [pc, #72]	; (25e90 <k_mem_slab_free+0xa4>)
   25e48:	f005 f921 	bl	2b08e <assert_print>
   25e4c:	218e      	movs	r1, #142	; 0x8e
   25e4e:	4640      	mov	r0, r8
   25e50:	f005 f916 	bl	2b080 <assert_post_action>
   25e54:	e7dc      	b.n	25e10 <k_mem_slab_free+0x24>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   25e56:	4620      	mov	r0, r4
   25e58:	f002 f9f8 	bl	2824c <z_unpend_first_thread>
		if (pending_thread != NULL) {
   25e5c:	2800      	cmp	r0, #0
   25e5e:	d0dc      	beq.n	25e1a <k_mem_slab_free+0x2e>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   25e60:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   25e62:	2100      	movs	r1, #0
   25e64:	67c1      	str	r1, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   25e66:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   25e68:	f001 fe28 	bl	27abc <z_ready_thread>
			z_reschedule(&slab->lock, key);
   25e6c:	4639      	mov	r1, r7
   25e6e:	4630      	mov	r0, r6
   25e70:	f001 fb90 	bl	27594 <z_reschedule>
			return;
   25e74:	e7e1      	b.n	25e3a <k_mem_slab_free+0x4e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25e76:	4c05      	ldr	r4, [pc, #20]	; (25e8c <k_mem_slab_free+0xa0>)
   25e78:	22b9      	movs	r2, #185	; 0xb9
   25e7a:	4621      	mov	r1, r4
   25e7c:	4804      	ldr	r0, [pc, #16]	; (25e90 <k_mem_slab_free+0xa4>)
   25e7e:	f005 f906 	bl	2b08e <assert_print>
   25e82:	21b9      	movs	r1, #185	; 0xb9
   25e84:	4620      	mov	r0, r4
   25e86:	f005 f8fb 	bl	2b080 <assert_post_action>
   25e8a:	e7d2      	b.n	25e32 <k_mem_slab_free+0x46>
   25e8c:	000319f0 	.word	0x000319f0
   25e90:	000318f8 	.word	0x000318f8

00025e94 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
   25e94:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   25e96:	ea53 0102 	orrs.w	r1, r3, r2
   25e9a:	d102      	bne.n	25ea2 <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
   25e9c:	f00a fd4c 	bl	30938 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
   25ea0:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   25ea2:	4902      	ldr	r1, [pc, #8]	; (25eac <schedule_new_thread+0x18>)
   25ea4:	3018      	adds	r0, #24
   25ea6:	f002 fd23 	bl	288f0 <z_add_timeout>
   25eaa:	e7f9      	b.n	25ea0 <schedule_new_thread+0xc>
   25eac:	00027bd1 	.word	0x00027bd1

00025eb0 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   25eb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   25eb4:	b085      	sub	sp, #20
   25eb6:	4604      	mov	r4, r0
   25eb8:	460e      	mov	r6, r1
   25eba:	4615      	mov	r5, r2
   25ebc:	461f      	mov	r7, r3
   25ebe:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   25ec2:	f1b8 0f0f 	cmp.w	r8, #15
   25ec6:	d02a      	beq.n	25f1e <z_setup_new_thread+0x6e>
   25ec8:	f108 0310 	add.w	r3, r8, #16
   25ecc:	2b1e      	cmp	r3, #30
   25ece:	d82a      	bhi.n	25f26 <z_setup_new_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   25ed0:	f104 0358 	add.w	r3, r4, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   25ed4:	65a3      	str	r3, [r4, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
   25ed6:	65e3      	str	r3, [r4, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
   25ed8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   25eda:	2204      	movs	r2, #4
   25edc:	4641      	mov	r1, r8
   25ede:	4620      	mov	r0, r4
   25ee0:	f00a fd2e 	bl	30940 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
   25ee4:	462a      	mov	r2, r5
   25ee6:	4631      	mov	r1, r6
   25ee8:	4620      	mov	r0, r4
   25eea:	f00a fd0b 	bl	30904 <setup_thread_stack>
   25eee:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   25ef0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   25ef2:	9302      	str	r3, [sp, #8]
   25ef4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   25ef6:	9301      	str	r3, [sp, #4]
   25ef8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   25efa:	9300      	str	r3, [sp, #0]
   25efc:	463b      	mov	r3, r7
   25efe:	4602      	mov	r2, r0
   25f00:	4631      	mov	r1, r6
   25f02:	4620      	mov	r0, r4
   25f04:	f7ef fe2a 	bl	15b5c <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
   25f08:	2300      	movs	r3, #0
   25f0a:	6563      	str	r3, [r4, #84]	; 0x54
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   25f0c:	4b0e      	ldr	r3, [pc, #56]	; (25f48 <z_setup_new_thread+0x98>)
   25f0e:	689b      	ldr	r3, [r3, #8]
   25f10:	b1bb      	cbz	r3, 25f42 <z_setup_new_thread+0x92>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   25f12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   25f14:	6763      	str	r3, [r4, #116]	; 0x74
#endif

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
   25f16:	4628      	mov	r0, r5
   25f18:	b005      	add	sp, #20
   25f1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   25f1e:	4b0b      	ldr	r3, [pc, #44]	; (25f4c <z_setup_new_thread+0x9c>)
   25f20:	429f      	cmp	r7, r3
   25f22:	d1d1      	bne.n	25ec8 <z_setup_new_thread+0x18>
   25f24:	e7d4      	b.n	25ed0 <z_setup_new_thread+0x20>
   25f26:	f8df 9028 	ldr.w	r9, [pc, #40]	; 25f50 <z_setup_new_thread+0xa0>
   25f2a:	f44f 7206 	mov.w	r2, #536	; 0x218
   25f2e:	4649      	mov	r1, r9
   25f30:	4808      	ldr	r0, [pc, #32]	; (25f54 <z_setup_new_thread+0xa4>)
   25f32:	f005 f8ac 	bl	2b08e <assert_print>
   25f36:	f44f 7106 	mov.w	r1, #536	; 0x218
   25f3a:	4648      	mov	r0, r9
   25f3c:	f005 f8a0 	bl	2b080 <assert_post_action>
   25f40:	e7c6      	b.n	25ed0 <z_setup_new_thread+0x20>
		new_thread->resource_pool = NULL;
   25f42:	6763      	str	r3, [r4, #116]	; 0x74
		return stack_ptr;
   25f44:	e7e7      	b.n	25f16 <z_setup_new_thread+0x66>
   25f46:	bf00      	nop
   25f48:	200036f4 	.word	0x200036f4
   25f4c:	00026109 	.word	0x00026109
   25f50:	00035010 	.word	0x00035010
   25f54:	000318f8 	.word	0x000318f8

00025f58 <z_impl_k_thread_create>:
k_tid_t z_impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, uint32_t options, k_timeout_t delay)
{
   25f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25f5c:	b086      	sub	sp, #24
   25f5e:	4604      	mov	r4, r0
   25f60:	460d      	mov	r5, r1
   25f62:	4616      	mov	r6, r2
   25f64:	461f      	mov	r7, r3
   25f66:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
   25f6a:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
   25f6e:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   25f72:	b9db      	cbnz	r3, 25fac <z_impl_k_thread_create+0x54>

	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   25f74:	2300      	movs	r3, #0
   25f76:	9305      	str	r3, [sp, #20]
   25f78:	9b12      	ldr	r3, [sp, #72]	; 0x48
   25f7a:	9304      	str	r3, [sp, #16]
   25f7c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   25f7e:	9303      	str	r3, [sp, #12]
   25f80:	9b10      	ldr	r3, [sp, #64]	; 0x40
   25f82:	9302      	str	r3, [sp, #8]
   25f84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   25f86:	9301      	str	r3, [sp, #4]
   25f88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   25f8a:	9300      	str	r3, [sp, #0]
   25f8c:	463b      	mov	r3, r7
   25f8e:	4632      	mov	r2, r6
   25f90:	4629      	mov	r1, r5
   25f92:	4620      	mov	r0, r4
   25f94:	f7ff ff8c 	bl	25eb0 <z_setup_new_thread>
			  prio, options, NULL);

	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   25f98:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   25f9c:	bf08      	it	eq
   25f9e:	f1b9 3fff 	cmpeq.w	r9, #4294967295	; 0xffffffff
   25fa2:	d111      	bne.n	25fc8 <z_impl_k_thread_create+0x70>
		schedule_new_thread(new_thread, delay);
	}

	return new_thread;
}
   25fa4:	4620      	mov	r0, r4
   25fa6:	b006      	add	sp, #24
   25fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   25fac:	f8df a024 	ldr.w	sl, [pc, #36]	; 25fd4 <z_impl_k_thread_create+0x7c>
   25fb0:	f240 2287 	movw	r2, #647	; 0x287
   25fb4:	4651      	mov	r1, sl
   25fb6:	4808      	ldr	r0, [pc, #32]	; (25fd8 <z_impl_k_thread_create+0x80>)
   25fb8:	f005 f869 	bl	2b08e <assert_print>
   25fbc:	f240 2187 	movw	r1, #647	; 0x287
   25fc0:	4650      	mov	r0, sl
   25fc2:	f005 f85d 	bl	2b080 <assert_post_action>
   25fc6:	e7d5      	b.n	25f74 <z_impl_k_thread_create+0x1c>
		schedule_new_thread(new_thread, delay);
   25fc8:	464a      	mov	r2, r9
   25fca:	4643      	mov	r3, r8
   25fcc:	4620      	mov	r0, r4
   25fce:	f7ff ff61 	bl	25e94 <schedule_new_thread>
   25fd2:	e7e7      	b.n	25fa4 <z_impl_k_thread_create+0x4c>
   25fd4:	00035010 	.word	0x00035010
   25fd8:	000318f8 	.word	0x000318f8

00025fdc <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
   25fdc:	b530      	push	{r4, r5, lr}
   25fde:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   25fe0:	4c31      	ldr	r4, [pc, #196]	; (260a8 <z_init_static_threads+0xcc>)
   25fe2:	e017      	b.n	26014 <z_init_static_threads+0x38>
   25fe4:	4b31      	ldr	r3, [pc, #196]	; (260ac <z_init_static_threads+0xd0>)
   25fe6:	429c      	cmp	r4, r3
   25fe8:	d224      	bcs.n	26034 <z_init_static_threads+0x58>
		z_setup_new_thread(
   25fea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   25fec:	9305      	str	r3, [sp, #20]
   25fee:	6a23      	ldr	r3, [r4, #32]
   25ff0:	9304      	str	r3, [sp, #16]
   25ff2:	69e3      	ldr	r3, [r4, #28]
   25ff4:	9303      	str	r3, [sp, #12]
   25ff6:	69a3      	ldr	r3, [r4, #24]
   25ff8:	9302      	str	r3, [sp, #8]
   25ffa:	6963      	ldr	r3, [r4, #20]
   25ffc:	9301      	str	r3, [sp, #4]
   25ffe:	6923      	ldr	r3, [r4, #16]
   26000:	9300      	str	r3, [sp, #0]
   26002:	68e3      	ldr	r3, [r4, #12]
   26004:	68a2      	ldr	r2, [r4, #8]
   26006:	6861      	ldr	r1, [r4, #4]
   26008:	6820      	ldr	r0, [r4, #0]
   2600a:	f7ff ff51 	bl	25eb0 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
   2600e:	6823      	ldr	r3, [r4, #0]
   26010:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   26012:	3430      	adds	r4, #48	; 0x30
   26014:	4b25      	ldr	r3, [pc, #148]	; (260ac <z_init_static_threads+0xd0>)
   26016:	429c      	cmp	r4, r3
   26018:	d9e4      	bls.n	25fe4 <z_init_static_threads+0x8>
   2601a:	4d25      	ldr	r5, [pc, #148]	; (260b0 <z_init_static_threads+0xd4>)
   2601c:	f240 22ee 	movw	r2, #750	; 0x2ee
   26020:	4629      	mov	r1, r5
   26022:	4824      	ldr	r0, [pc, #144]	; (260b4 <z_init_static_threads+0xd8>)
   26024:	f005 f833 	bl	2b08e <assert_print>
   26028:	f240 21ee 	movw	r1, #750	; 0x2ee
   2602c:	4628      	mov	r0, r5
   2602e:	f005 f827 	bl	2b080 <assert_post_action>
   26032:	e7d7      	b.n	25fe4 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
   26034:	f001 faea 	bl	2760c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   26038:	4c1b      	ldr	r4, [pc, #108]	; (260a8 <z_init_static_threads+0xcc>)
   2603a:	e000      	b.n	2603e <z_init_static_threads+0x62>
   2603c:	3430      	adds	r4, #48	; 0x30
   2603e:	4b1b      	ldr	r3, [pc, #108]	; (260ac <z_init_static_threads+0xd0>)
   26040:	429c      	cmp	r4, r3
   26042:	d81f      	bhi.n	26084 <z_init_static_threads+0xa8>
   26044:	4b19      	ldr	r3, [pc, #100]	; (260ac <z_init_static_threads+0xd0>)
   26046:	429c      	cmp	r4, r3
   26048:	d229      	bcs.n	2609e <z_init_static_threads+0xc2>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   2604a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   2604c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   26050:	d0f4      	beq.n	2603c <z_init_static_threads+0x60>
			schedule_new_thread(thread_data->init_thread,
   26052:	6825      	ldr	r5, [r4, #0]
					    K_MSEC(thread_data->init_delay));
   26054:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   26058:	17c1      	asrs	r1, r0, #31
   2605a:	03c9      	lsls	r1, r1, #15
   2605c:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   26060:	03c0      	lsls	r0, r0, #15
   26062:	f240 33e7 	movw	r3, #999	; 0x3e7
   26066:	18c0      	adds	r0, r0, r3
   26068:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2606c:	f04f 0300 	mov.w	r3, #0
   26070:	f141 0100 	adc.w	r1, r1, #0
   26074:	f7da ffbc 	bl	ff0 <__aeabi_uldivmod>
   26078:	4602      	mov	r2, r0
   2607a:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
   2607c:	4628      	mov	r0, r5
   2607e:	f7ff ff09 	bl	25e94 <schedule_new_thread>
   26082:	e7db      	b.n	2603c <z_init_static_threads+0x60>
	_FOREACH_STATIC_THREAD(thread_data) {
   26084:	4d0a      	ldr	r5, [pc, #40]	; (260b0 <z_init_static_threads+0xd4>)
   26086:	f240 320d 	movw	r2, #781	; 0x30d
   2608a:	4629      	mov	r1, r5
   2608c:	4809      	ldr	r0, [pc, #36]	; (260b4 <z_init_static_threads+0xd8>)
   2608e:	f004 fffe 	bl	2b08e <assert_print>
   26092:	f240 310d 	movw	r1, #781	; 0x30d
   26096:	4628      	mov	r0, r5
   26098:	f004 fff2 	bl	2b080 <assert_post_action>
   2609c:	e7d2      	b.n	26044 <z_init_static_threads+0x68>
		}
	}
	k_sched_unlock();
   2609e:	f001 ffc9 	bl	28034 <k_sched_unlock>
}
   260a2:	b007      	add	sp, #28
   260a4:	bd30      	pop	{r4, r5, pc}
   260a6:	bf00      	nop
   260a8:	2000093c 	.word	0x2000093c
   260ac:	2000093c 	.word	0x2000093c
   260b0:	00035010 	.word	0x00035010
   260b4:	000318f8 	.word	0x000318f8

000260b8 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   260b8:	6803      	ldr	r3, [r0, #0]

	if (thread_cpu != 0U) {
   260ba:	b13b      	cbz	r3, 260cc <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   260bc:	f003 0303 	and.w	r3, r3, #3
   260c0:	4a04      	ldr	r2, [pc, #16]	; (260d4 <z_spin_lock_valid+0x1c>)
   260c2:	7d12      	ldrb	r2, [r2, #20]
   260c4:	4293      	cmp	r3, r2
   260c6:	d003      	beq.n	260d0 <z_spin_lock_valid+0x18>
			return false;
		}
	}
	return true;
   260c8:	2001      	movs	r0, #1
   260ca:	4770      	bx	lr
   260cc:	2001      	movs	r0, #1
   260ce:	4770      	bx	lr
			return false;
   260d0:	2000      	movs	r0, #0
}
   260d2:	4770      	bx	lr
   260d4:	200036f4 	.word	0x200036f4

000260d8 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   260d8:	6801      	ldr	r1, [r0, #0]
   260da:	4a06      	ldr	r2, [pc, #24]	; (260f4 <z_spin_unlock_valid+0x1c>)
   260dc:	7d13      	ldrb	r3, [r2, #20]
   260de:	6892      	ldr	r2, [r2, #8]
   260e0:	4313      	orrs	r3, r2
   260e2:	4299      	cmp	r1, r3
   260e4:	d103      	bne.n	260ee <z_spin_unlock_valid+0x16>
		return false;
	}
	l->thread_cpu = 0;
   260e6:	2300      	movs	r3, #0
   260e8:	6003      	str	r3, [r0, #0]
	return true;
   260ea:	2001      	movs	r0, #1
   260ec:	4770      	bx	lr
		return false;
   260ee:	2000      	movs	r0, #0
}
   260f0:	4770      	bx	lr
   260f2:	bf00      	nop
   260f4:	200036f4 	.word	0x200036f4

000260f8 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   260f8:	4a02      	ldr	r2, [pc, #8]	; (26104 <z_spin_lock_set_owner+0xc>)
   260fa:	7d13      	ldrb	r3, [r2, #20]
   260fc:	6892      	ldr	r2, [r2, #8]
   260fe:	4313      	orrs	r3, r2
   26100:	6003      	str	r3, [r0, #0]
}
   26102:	4770      	bx	lr
   26104:	200036f4 	.word	0x200036f4

00026108 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   26108:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
   2610a:	4b14      	ldr	r3, [pc, #80]	; (2615c <idle+0x54>)
   2610c:	689b      	ldr	r3, [r3, #8]
   2610e:	f993 300e 	ldrsb.w	r3, [r3, #14]
   26112:	2b00      	cmp	r3, #0
   26114:	da0c      	bge.n	26130 <idle+0x28>
   26116:	4c12      	ldr	r4, [pc, #72]	; (26160 <idle+0x58>)
   26118:	2227      	movs	r2, #39	; 0x27
   2611a:	4621      	mov	r1, r4
   2611c:	4811      	ldr	r0, [pc, #68]	; (26164 <idle+0x5c>)
   2611e:	f004 ffb6 	bl	2b08e <assert_print>
   26122:	2127      	movs	r1, #39	; 0x27
   26124:	4620      	mov	r0, r4
   26126:	f004 ffab 	bl	2b080 <assert_post_action>
   2612a:	e001      	b.n	26130 <idle+0x28>
	arch_cpu_idle();
   2612c:	f7ef fbf4 	bl	15918 <arch_cpu_idle>
	__asm__ volatile(
   26130:	f04f 0240 	mov.w	r2, #64	; 0x40
   26134:	f3ef 8311 	mrs	r3, BASEPRI
   26138:	f382 8812 	msr	BASEPRI_MAX, r2
   2613c:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   26140:	f002 fce8 	bl	28b14 <z_get_next_timeout_expiry>
   26144:	4b05      	ldr	r3, [pc, #20]	; (2615c <idle+0x54>)
   26146:	6198      	str	r0, [r3, #24]
	return !z_sys_post_kernel;
   26148:	4b07      	ldr	r3, [pc, #28]	; (26168 <idle+0x60>)
   2614a:	781b      	ldrb	r3, [r3, #0]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   2614c:	2b00      	cmp	r3, #0
   2614e:	d0ed      	beq.n	2612c <idle+0x24>
   26150:	f7ee feb4 	bl	14ebc <pm_system_suspend>
   26154:	2800      	cmp	r0, #0
   26156:	d1eb      	bne.n	26130 <idle+0x28>
   26158:	e7e8      	b.n	2612c <idle+0x24>
   2615a:	bf00      	nop
   2615c:	200036f4 	.word	0x200036f4
   26160:	00035034 	.word	0x00035034
   26164:	000318f8 	.word	0x000318f8
   26168:	20003770 	.word	0x20003770

0002616c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   2616c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   26170:	b083      	sub	sp, #12
   26172:	4604      	mov	r4, r0
   26174:	4616      	mov	r6, r2
   26176:	461d      	mov	r5, r3
   26178:	f3ef 8105 	mrs	r1, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   2617c:	2900      	cmp	r1, #0
   2617e:	d12a      	bne.n	261d6 <z_impl_k_mutex_lock+0x6a>
   26180:	f04f 0340 	mov.w	r3, #64	; 0x40
   26184:	f3ef 8711 	mrs	r7, BASEPRI
   26188:	f383 8812 	msr	BASEPRI_MAX, r3
   2618c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26190:	486c      	ldr	r0, [pc, #432]	; (26344 <z_impl_k_mutex_lock+0x1d8>)
   26192:	f7ff ff91 	bl	260b8 <z_spin_lock_valid>
   26196:	b348      	cbz	r0, 261ec <z_impl_k_mutex_lock+0x80>
	z_spin_lock_set_owner(l);
   26198:	486a      	ldr	r0, [pc, #424]	; (26344 <z_impl_k_mutex_lock+0x1d8>)
   2619a:	f7ff ffad 	bl	260f8 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   2619e:	68e1      	ldr	r1, [r4, #12]
   261a0:	2900      	cmp	r1, #0
   261a2:	d12f      	bne.n	26204 <z_impl_k_mutex_lock+0x98>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
   261a4:	2900      	cmp	r1, #0
   261a6:	d174      	bne.n	26292 <z_impl_k_mutex_lock+0x126>
   261a8:	4b67      	ldr	r3, [pc, #412]	; (26348 <z_impl_k_mutex_lock+0x1dc>)
   261aa:	689b      	ldr	r3, [r3, #8]
   261ac:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   261b0:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
   261b2:	3101      	adds	r1, #1
   261b4:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
   261b6:	4b64      	ldr	r3, [pc, #400]	; (26348 <z_impl_k_mutex_lock+0x1dc>)
   261b8:	689b      	ldr	r3, [r3, #8]
   261ba:	60a3      	str	r3, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   261bc:	4861      	ldr	r0, [pc, #388]	; (26344 <z_impl_k_mutex_lock+0x1d8>)
   261be:	f7ff ff8b 	bl	260d8 <z_spin_unlock_valid>
   261c2:	2800      	cmp	r0, #0
   261c4:	d067      	beq.n	26296 <z_impl_k_mutex_lock+0x12a>
	__asm__ volatile(
   261c6:	f387 8811 	msr	BASEPRI, r7
   261ca:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
   261ce:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   261d0:	b003      	add	sp, #12
   261d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   261d6:	4f5d      	ldr	r7, [pc, #372]	; (2634c <z_impl_k_mutex_lock+0x1e0>)
   261d8:	2265      	movs	r2, #101	; 0x65
   261da:	4639      	mov	r1, r7
   261dc:	485c      	ldr	r0, [pc, #368]	; (26350 <z_impl_k_mutex_lock+0x1e4>)
   261de:	f004 ff56 	bl	2b08e <assert_print>
   261e2:	2165      	movs	r1, #101	; 0x65
   261e4:	4638      	mov	r0, r7
   261e6:	f004 ff4b 	bl	2b080 <assert_post_action>
   261ea:	e7c9      	b.n	26180 <z_impl_k_mutex_lock+0x14>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   261ec:	f8df 8164 	ldr.w	r8, [pc, #356]	; 26354 <z_impl_k_mutex_lock+0x1e8>
   261f0:	228e      	movs	r2, #142	; 0x8e
   261f2:	4641      	mov	r1, r8
   261f4:	4856      	ldr	r0, [pc, #344]	; (26350 <z_impl_k_mutex_lock+0x1e4>)
   261f6:	f004 ff4a 	bl	2b08e <assert_print>
   261fa:	218e      	movs	r1, #142	; 0x8e
   261fc:	4640      	mov	r0, r8
   261fe:	f004 ff3f 	bl	2b080 <assert_post_action>
   26202:	e7c9      	b.n	26198 <z_impl_k_mutex_lock+0x2c>
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   26204:	68a2      	ldr	r2, [r4, #8]
   26206:	4b50      	ldr	r3, [pc, #320]	; (26348 <z_impl_k_mutex_lock+0x1dc>)
   26208:	689b      	ldr	r3, [r3, #8]
   2620a:	429a      	cmp	r2, r3
   2620c:	d0ca      	beq.n	261a4 <z_impl_k_mutex_lock+0x38>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   2620e:	ea55 0106 	orrs.w	r1, r5, r6
   26212:	bf0c      	ite	eq
   26214:	f04f 0801 	moveq.w	r8, #1
   26218:	f04f 0800 	movne.w	r8, #0
   2621c:	d046      	beq.n	262ac <z_impl_k_mutex_lock+0x140>
					    mutex->owner->base.prio);
   2621e:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
   26222:	4649      	mov	r1, r9
   26224:	f993 000e 	ldrsb.w	r0, [r3, #14]
   26228:	f00a fb9b 	bl	30962 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   2622c:	4581      	cmp	r9, r0
   2622e:	dc53      	bgt.n	262d8 <z_impl_k_mutex_lock+0x16c>
	bool resched = false;
   26230:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   26234:	9600      	str	r6, [sp, #0]
   26236:	9501      	str	r5, [sp, #4]
   26238:	4622      	mov	r2, r4
   2623a:	4639      	mov	r1, r7
   2623c:	4841      	ldr	r0, [pc, #260]	; (26344 <z_impl_k_mutex_lock+0x1d8>)
   2623e:	f001 fdcd 	bl	27ddc <z_pend_curr>
	if (got_mutex == 0) {
   26242:	2800      	cmp	r0, #0
   26244:	d0c4      	beq.n	261d0 <z_impl_k_mutex_lock+0x64>
	__asm__ volatile(
   26246:	f04f 0340 	mov.w	r3, #64	; 0x40
   2624a:	f3ef 8511 	mrs	r5, BASEPRI
   2624e:	f383 8812 	msr	BASEPRI_MAX, r3
   26252:	f3bf 8f6f 	isb	sy
   26256:	483b      	ldr	r0, [pc, #236]	; (26344 <z_impl_k_mutex_lock+0x1d8>)
   26258:	f7ff ff2e 	bl	260b8 <z_spin_lock_valid>
   2625c:	2800      	cmp	r0, #0
   2625e:	d041      	beq.n	262e4 <z_impl_k_mutex_lock+0x178>
	z_spin_lock_set_owner(l);
   26260:	4838      	ldr	r0, [pc, #224]	; (26344 <z_impl_k_mutex_lock+0x1d8>)
   26262:	f7ff ff49 	bl	260f8 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   26266:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26268:	429c      	cmp	r4, r3
   2626a:	d046      	beq.n	262fa <z_impl_k_mutex_lock+0x18e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   2626c:	2b00      	cmp	r3, #0
   2626e:	d044      	beq.n	262fa <z_impl_k_mutex_lock+0x18e>
   26270:	6921      	ldr	r1, [r4, #16]
   26272:	f993 000e 	ldrsb.w	r0, [r3, #14]
   26276:	f00a fb74 	bl	30962 <new_prio_for_inheritance>
   2627a:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   2627c:	4620      	mov	r0, r4
   2627e:	f00a fb7b 	bl	30978 <adjust_owner_prio>
   26282:	2800      	cmp	r0, #0
   26284:	d13b      	bne.n	262fe <z_impl_k_mutex_lock+0x192>
   26286:	f1b9 0f00 	cmp.w	r9, #0
   2628a:	d03a      	beq.n	26302 <z_impl_k_mutex_lock+0x196>
   2628c:	f04f 0801 	mov.w	r8, #1
   26290:	e037      	b.n	26302 <z_impl_k_mutex_lock+0x196>
					_current->base.prio :
   26292:	6923      	ldr	r3, [r4, #16]
   26294:	e78c      	b.n	261b0 <z_impl_k_mutex_lock+0x44>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26296:	4c2f      	ldr	r4, [pc, #188]	; (26354 <z_impl_k_mutex_lock+0x1e8>)
   26298:	22b9      	movs	r2, #185	; 0xb9
   2629a:	4621      	mov	r1, r4
   2629c:	482c      	ldr	r0, [pc, #176]	; (26350 <z_impl_k_mutex_lock+0x1e4>)
   2629e:	f004 fef6 	bl	2b08e <assert_print>
   262a2:	21b9      	movs	r1, #185	; 0xb9
   262a4:	4620      	mov	r0, r4
   262a6:	f004 feeb 	bl	2b080 <assert_post_action>
   262aa:	e78c      	b.n	261c6 <z_impl_k_mutex_lock+0x5a>
   262ac:	4825      	ldr	r0, [pc, #148]	; (26344 <z_impl_k_mutex_lock+0x1d8>)
   262ae:	f7ff ff13 	bl	260d8 <z_spin_unlock_valid>
   262b2:	b130      	cbz	r0, 262c2 <z_impl_k_mutex_lock+0x156>
	__asm__ volatile(
   262b4:	f387 8811 	msr	BASEPRI, r7
   262b8:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   262bc:	f06f 000f 	mvn.w	r0, #15
   262c0:	e786      	b.n	261d0 <z_impl_k_mutex_lock+0x64>
   262c2:	4c24      	ldr	r4, [pc, #144]	; (26354 <z_impl_k_mutex_lock+0x1e8>)
   262c4:	22b9      	movs	r2, #185	; 0xb9
   262c6:	4621      	mov	r1, r4
   262c8:	4821      	ldr	r0, [pc, #132]	; (26350 <z_impl_k_mutex_lock+0x1e4>)
   262ca:	f004 fee0 	bl	2b08e <assert_print>
   262ce:	21b9      	movs	r1, #185	; 0xb9
   262d0:	4620      	mov	r0, r4
   262d2:	f004 fed5 	bl	2b080 <assert_post_action>
   262d6:	e7ed      	b.n	262b4 <z_impl_k_mutex_lock+0x148>
		resched = adjust_owner_prio(mutex, new_prio);
   262d8:	4601      	mov	r1, r0
   262da:	4620      	mov	r0, r4
   262dc:	f00a fb4c 	bl	30978 <adjust_owner_prio>
   262e0:	4681      	mov	r9, r0
   262e2:	e7a7      	b.n	26234 <z_impl_k_mutex_lock+0xc8>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   262e4:	4e1b      	ldr	r6, [pc, #108]	; (26354 <z_impl_k_mutex_lock+0x1e8>)
   262e6:	228e      	movs	r2, #142	; 0x8e
   262e8:	4631      	mov	r1, r6
   262ea:	4819      	ldr	r0, [pc, #100]	; (26350 <z_impl_k_mutex_lock+0x1e4>)
   262ec:	f004 fecf 	bl	2b08e <assert_print>
   262f0:	218e      	movs	r1, #142	; 0x8e
   262f2:	4630      	mov	r0, r6
   262f4:	f004 fec4 	bl	2b080 <assert_post_action>
   262f8:	e7b2      	b.n	26260 <z_impl_k_mutex_lock+0xf4>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   262fa:	6921      	ldr	r1, [r4, #16]
   262fc:	e7be      	b.n	2627c <z_impl_k_mutex_lock+0x110>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   262fe:	f04f 0801 	mov.w	r8, #1
	if (resched) {
   26302:	f1b8 0f00 	cmp.w	r8, #0
   26306:	d006      	beq.n	26316 <z_impl_k_mutex_lock+0x1aa>
		z_reschedule(&lock, key);
   26308:	4629      	mov	r1, r5
   2630a:	480e      	ldr	r0, [pc, #56]	; (26344 <z_impl_k_mutex_lock+0x1d8>)
   2630c:	f001 f942 	bl	27594 <z_reschedule>
	return -EAGAIN;
   26310:	f06f 000a 	mvn.w	r0, #10
   26314:	e75c      	b.n	261d0 <z_impl_k_mutex_lock+0x64>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26316:	480b      	ldr	r0, [pc, #44]	; (26344 <z_impl_k_mutex_lock+0x1d8>)
   26318:	f7ff fede 	bl	260d8 <z_spin_unlock_valid>
   2631c:	b130      	cbz	r0, 2632c <z_impl_k_mutex_lock+0x1c0>
   2631e:	f385 8811 	msr	BASEPRI, r5
   26322:	f3bf 8f6f 	isb	sy
   26326:	f06f 000a 	mvn.w	r0, #10
   2632a:	e751      	b.n	261d0 <z_impl_k_mutex_lock+0x64>
   2632c:	4c09      	ldr	r4, [pc, #36]	; (26354 <z_impl_k_mutex_lock+0x1e8>)
   2632e:	22b9      	movs	r2, #185	; 0xb9
   26330:	4621      	mov	r1, r4
   26332:	4807      	ldr	r0, [pc, #28]	; (26350 <z_impl_k_mutex_lock+0x1e4>)
   26334:	f004 feab 	bl	2b08e <assert_print>
   26338:	21b9      	movs	r1, #185	; 0xb9
   2633a:	4620      	mov	r0, r4
   2633c:	f004 fea0 	bl	2b080 <assert_post_action>
   26340:	e7ed      	b.n	2631e <z_impl_k_mutex_lock+0x1b2>
   26342:	bf00      	nop
   26344:	2000371c 	.word	0x2000371c
   26348:	200036f4 	.word	0x200036f4
   2634c:	00035058 	.word	0x00035058
   26350:	000318f8 	.word	0x000318f8
   26354:	000319f0 	.word	0x000319f0

00026358 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   26358:	b570      	push	{r4, r5, r6, lr}
   2635a:	4604      	mov	r4, r0
   2635c:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   26360:	b97b      	cbnz	r3, 26382 <z_impl_k_mutex_unlock+0x2a>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   26362:	68a3      	ldr	r3, [r4, #8]
   26364:	2b00      	cmp	r3, #0
   26366:	d069      	beq.n	2643c <z_impl_k_mutex_unlock+0xe4>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   26368:	4a37      	ldr	r2, [pc, #220]	; (26448 <z_impl_k_mutex_unlock+0xf0>)
   2636a:	6892      	ldr	r2, [r2, #8]
   2636c:	4293      	cmp	r3, r2
   2636e:	d168      	bne.n	26442 <z_impl_k_mutex_unlock+0xea>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   26370:	68e3      	ldr	r3, [r4, #12]
   26372:	b18b      	cbz	r3, 26398 <z_impl_k_mutex_unlock+0x40>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   26374:	68e3      	ldr	r3, [r4, #12]
   26376:	2b01      	cmp	r3, #1
   26378:	d919      	bls.n	263ae <z_impl_k_mutex_unlock+0x56>
		mutex->lock_count--;
   2637a:	3b01      	subs	r3, #1
   2637c:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   2637e:	2000      	movs	r0, #0
}
   26380:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   26382:	4d32      	ldr	r5, [pc, #200]	; (2644c <z_impl_k_mutex_unlock+0xf4>)
   26384:	22c7      	movs	r2, #199	; 0xc7
   26386:	4629      	mov	r1, r5
   26388:	4831      	ldr	r0, [pc, #196]	; (26450 <z_impl_k_mutex_unlock+0xf8>)
   2638a:	f004 fe80 	bl	2b08e <assert_print>
   2638e:	21c7      	movs	r1, #199	; 0xc7
   26390:	4628      	mov	r0, r5
   26392:	f004 fe75 	bl	2b080 <assert_post_action>
   26396:	e7e4      	b.n	26362 <z_impl_k_mutex_unlock+0xa>
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   26398:	4d2c      	ldr	r5, [pc, #176]	; (2644c <z_impl_k_mutex_unlock+0xf4>)
   2639a:	22df      	movs	r2, #223	; 0xdf
   2639c:	4629      	mov	r1, r5
   2639e:	482c      	ldr	r0, [pc, #176]	; (26450 <z_impl_k_mutex_unlock+0xf8>)
   263a0:	f004 fe75 	bl	2b08e <assert_print>
   263a4:	21df      	movs	r1, #223	; 0xdf
   263a6:	4628      	mov	r0, r5
   263a8:	f004 fe6a 	bl	2b080 <assert_post_action>
   263ac:	e7e2      	b.n	26374 <z_impl_k_mutex_unlock+0x1c>
	__asm__ volatile(
   263ae:	f04f 0340 	mov.w	r3, #64	; 0x40
   263b2:	f3ef 8511 	mrs	r5, BASEPRI
   263b6:	f383 8812 	msr	BASEPRI_MAX, r3
   263ba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   263be:	4825      	ldr	r0, [pc, #148]	; (26454 <z_impl_k_mutex_unlock+0xfc>)
   263c0:	f7ff fe7a 	bl	260b8 <z_spin_lock_valid>
   263c4:	b1c0      	cbz	r0, 263f8 <z_impl_k_mutex_unlock+0xa0>
	z_spin_lock_set_owner(l);
   263c6:	4823      	ldr	r0, [pc, #140]	; (26454 <z_impl_k_mutex_unlock+0xfc>)
   263c8:	f7ff fe96 	bl	260f8 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   263cc:	6921      	ldr	r1, [r4, #16]
   263ce:	4620      	mov	r0, r4
   263d0:	f00a fad2 	bl	30978 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   263d4:	4620      	mov	r0, r4
   263d6:	f001 ff39 	bl	2824c <z_unpend_first_thread>
	mutex->owner = new_owner;
   263da:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   263dc:	b1b8      	cbz	r0, 2640e <z_impl_k_mutex_unlock+0xb6>
		mutex->owner_orig_prio = new_owner->base.prio;
   263de:	f990 300e 	ldrsb.w	r3, [r0, #14]
   263e2:	6123      	str	r3, [r4, #16]
   263e4:	2400      	movs	r4, #0
   263e6:	67c4      	str	r4, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   263e8:	f001 fb68 	bl	27abc <z_ready_thread>
		z_reschedule(&lock, key);
   263ec:	4629      	mov	r1, r5
   263ee:	4819      	ldr	r0, [pc, #100]	; (26454 <z_impl_k_mutex_unlock+0xfc>)
   263f0:	f001 f8d0 	bl	27594 <z_reschedule>
	return 0;
   263f4:	4620      	mov	r0, r4
   263f6:	e7c3      	b.n	26380 <z_impl_k_mutex_unlock+0x28>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   263f8:	4e17      	ldr	r6, [pc, #92]	; (26458 <z_impl_k_mutex_unlock+0x100>)
   263fa:	228e      	movs	r2, #142	; 0x8e
   263fc:	4631      	mov	r1, r6
   263fe:	4814      	ldr	r0, [pc, #80]	; (26450 <z_impl_k_mutex_unlock+0xf8>)
   26400:	f004 fe45 	bl	2b08e <assert_print>
   26404:	218e      	movs	r1, #142	; 0x8e
   26406:	4630      	mov	r0, r6
   26408:	f004 fe3a 	bl	2b080 <assert_post_action>
   2640c:	e7db      	b.n	263c6 <z_impl_k_mutex_unlock+0x6e>
		mutex->lock_count = 0U;
   2640e:	2300      	movs	r3, #0
   26410:	60e3      	str	r3, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26412:	4810      	ldr	r0, [pc, #64]	; (26454 <z_impl_k_mutex_unlock+0xfc>)
   26414:	f7ff fe60 	bl	260d8 <z_spin_unlock_valid>
   26418:	b128      	cbz	r0, 26426 <z_impl_k_mutex_unlock+0xce>
	__asm__ volatile(
   2641a:	f385 8811 	msr	BASEPRI, r5
   2641e:	f3bf 8f6f 	isb	sy
	return 0;
   26422:	2000      	movs	r0, #0
   26424:	e7ac      	b.n	26380 <z_impl_k_mutex_unlock+0x28>
   26426:	4c0c      	ldr	r4, [pc, #48]	; (26458 <z_impl_k_mutex_unlock+0x100>)
   26428:	22b9      	movs	r2, #185	; 0xb9
   2642a:	4621      	mov	r1, r4
   2642c:	4808      	ldr	r0, [pc, #32]	; (26450 <z_impl_k_mutex_unlock+0xf8>)
   2642e:	f004 fe2e 	bl	2b08e <assert_print>
   26432:	21b9      	movs	r1, #185	; 0xb9
   26434:	4620      	mov	r0, r4
   26436:	f004 fe23 	bl	2b080 <assert_post_action>
   2643a:	e7ee      	b.n	2641a <z_impl_k_mutex_unlock+0xc2>
		return -EINVAL;
   2643c:	f06f 0015 	mvn.w	r0, #21
   26440:	e79e      	b.n	26380 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   26442:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26446:	e79b      	b.n	26380 <z_impl_k_mutex_unlock+0x28>
   26448:	200036f4 	.word	0x200036f4
   2644c:	00035058 	.word	0x00035058
   26450:	000318f8 	.word	0x000318f8
   26454:	2000371c 	.word	0x2000371c
   26458:	000319f0 	.word	0x000319f0

0002645c <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   2645c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26460:	4604      	mov	r4, r0
   26462:	460e      	mov	r6, r1
   26464:	4615      	mov	r5, r2
   26466:	4698      	mov	r8, r3
   26468:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2646c:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   26470:	f04f 0340 	mov.w	r3, #64	; 0x40
   26474:	f3ef 8911 	mrs	r9, BASEPRI
   26478:	f383 8812 	msr	BASEPRI_MAX, r3
   2647c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26480:	4638      	mov	r0, r7
   26482:	f7ff fe19 	bl	260b8 <z_spin_lock_valid>
   26486:	b360      	cbz	r0, 264e2 <queue_insert+0x86>
	z_spin_lock_set_owner(l);
   26488:	4638      	mov	r0, r7
   2648a:	f7ff fe35 	bl	260f8 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, queue_insert, queue, alloc);

	if (is_append) {
   2648e:	f1ba 0f00 	cmp.w	sl, #0
   26492:	d000      	beq.n	26496 <queue_insert+0x3a>
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   26494:	6866      	ldr	r6, [r4, #4]
		prev = sys_sflist_peek_tail(&queue->data_q);
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   26496:	f104 000c 	add.w	r0, r4, #12
   2649a:	f001 fed7 	bl	2824c <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   2649e:	bb60      	cbnz	r0, 264fa <queue_insert+0x9e>

		return 0;
	}

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
   264a0:	f1b8 0f00 	cmp.w	r8, #0
   264a4:	d132      	bne.n	2650c <queue_insert+0xb0>
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   264a6:	2300      	movs	r3, #0
   264a8:	602b      	str	r3, [r5, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   264aa:	2e00      	cmp	r6, #0
   264ac:	d04e      	beq.n	2654c <queue_insert+0xf0>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   264ae:	6833      	ldr	r3, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   264b0:	f033 0303 	bics.w	r3, r3, #3
   264b4:	d056      	beq.n	26564 <queue_insert+0x108>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   264b6:	682a      	ldr	r2, [r5, #0]
   264b8:	f002 0203 	and.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   264bc:	4313      	orrs	r3, r2
   264be:	602b      	str	r3, [r5, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   264c0:	6833      	ldr	r3, [r6, #0]
   264c2:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   264c6:	431d      	orrs	r5, r3
   264c8:	6035      	str	r5, [r6, #0]
	z_handle_obj_poll_events(&queue->poll_events, state);
   264ca:	2104      	movs	r1, #4
   264cc:	f104 0014 	add.w	r0, r4, #20
   264d0:	f00a fbf0 	bl	30cb4 <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, queue_insert, queue, alloc, K_FOREVER);

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   264d4:	4649      	mov	r1, r9
   264d6:	4638      	mov	r0, r7
   264d8:	f001 f85c 	bl	27594 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc, 0);

	return 0;
   264dc:	2000      	movs	r0, #0
}
   264de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   264e2:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 26584 <queue_insert+0x128>
   264e6:	228e      	movs	r2, #142	; 0x8e
   264e8:	4659      	mov	r1, fp
   264ea:	4827      	ldr	r0, [pc, #156]	; (26588 <queue_insert+0x12c>)
   264ec:	f004 fdcf 	bl	2b08e <assert_print>
   264f0:	218e      	movs	r1, #142	; 0x8e
   264f2:	4658      	mov	r0, fp
   264f4:	f004 fdc4 	bl	2b080 <assert_post_action>
   264f8:	e7c6      	b.n	26488 <queue_insert+0x2c>
		prepare_thread_to_run(first_pending_thread, data);
   264fa:	4629      	mov	r1, r5
   264fc:	f00a fa4e 	bl	3099c <prepare_thread_to_run>
		z_reschedule(&queue->lock, key);
   26500:	4649      	mov	r1, r9
   26502:	4638      	mov	r0, r7
   26504:	f001 f846 	bl	27594 <z_reschedule>
		return 0;
   26508:	2000      	movs	r0, #0
   2650a:	e7e8      	b.n	264de <queue_insert+0x82>
	return z_thread_aligned_alloc(0, size);
   2650c:	2108      	movs	r1, #8
   2650e:	2000      	movs	r0, #0
   26510:	f003 fa62 	bl	299d8 <z_thread_aligned_alloc>
		if (anode == NULL) {
   26514:	b120      	cbz	r0, 26520 <queue_insert+0xc4>
		anode->data = data;
   26516:	6045      	str	r5, [r0, #4]
	node->next_and_flags = flags;
   26518:	2201      	movs	r2, #1
   2651a:	6002      	str	r2, [r0, #0]
		data = anode;
   2651c:	4605      	mov	r5, r0
   2651e:	e7c4      	b.n	264aa <queue_insert+0x4e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26520:	4638      	mov	r0, r7
   26522:	f7ff fdd9 	bl	260d8 <z_spin_unlock_valid>
   26526:	b130      	cbz	r0, 26536 <queue_insert+0xda>
	__asm__ volatile(
   26528:	f389 8811 	msr	BASEPRI, r9
   2652c:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   26530:	f06f 000b 	mvn.w	r0, #11
   26534:	e7d3      	b.n	264de <queue_insert+0x82>
   26536:	4c13      	ldr	r4, [pc, #76]	; (26584 <queue_insert+0x128>)
   26538:	22b9      	movs	r2, #185	; 0xb9
   2653a:	4621      	mov	r1, r4
   2653c:	4812      	ldr	r0, [pc, #72]	; (26588 <queue_insert+0x12c>)
   2653e:	f004 fda6 	bl	2b08e <assert_print>
   26542:	21b9      	movs	r1, #185	; 0xb9
   26544:	4620      	mov	r0, r4
   26546:	f004 fd9b 	bl	2b080 <assert_post_action>
   2654a:	e7ed      	b.n	26528 <queue_insert+0xcc>
	return list->head;
   2654c:	6822      	ldr	r2, [r4, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2654e:	682b      	ldr	r3, [r5, #0]
   26550:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   26554:	4313      	orrs	r3, r2
   26556:	602b      	str	r3, [r5, #0]
	list->head = node;
   26558:	6025      	str	r5, [r4, #0]
	return list->tail;
   2655a:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_PREPEND(sflist, sfnode)
   2655c:	2b00      	cmp	r3, #0
   2655e:	d1b4      	bne.n	264ca <queue_insert+0x6e>
	list->tail = node;
   26560:	6065      	str	r5, [r4, #4]
}
   26562:	e7b2      	b.n	264ca <queue_insert+0x6e>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   26564:	682b      	ldr	r3, [r5, #0]
   26566:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   2656a:	602b      	str	r3, [r5, #0]
	return list->tail;
   2656c:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   2656e:	b132      	cbz	r2, 2657e <queue_insert+0x122>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   26570:	6813      	ldr	r3, [r2, #0]
   26572:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   26576:	432b      	orrs	r3, r5
   26578:	6013      	str	r3, [r2, #0]
	list->tail = node;
   2657a:	6065      	str	r5, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   2657c:	e7a5      	b.n	264ca <queue_insert+0x6e>
	list->tail = node;
   2657e:	6065      	str	r5, [r4, #4]
	list->head = node;
   26580:	6025      	str	r5, [r4, #0]
}
   26582:	e7a2      	b.n	264ca <queue_insert+0x6e>
   26584:	000319f0 	.word	0x000319f0
   26588:	000318f8 	.word	0x000318f8

0002658c <k_queue_append_list>:
int k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, append_list, queue);

	/* invalid head or tail of list */
	CHECKIF(head == NULL || tail == NULL) {
   2658c:	2900      	cmp	r1, #0
   2658e:	d04b      	beq.n	26628 <k_queue_append_list+0x9c>
{
   26590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26594:	4606      	mov	r6, r0
   26596:	4617      	mov	r7, r2
   26598:	460c      	mov	r4, r1
	CHECKIF(head == NULL || tail == NULL) {
   2659a:	2a00      	cmp	r2, #0
   2659c:	d047      	beq.n	2662e <k_queue_append_list+0xa2>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, append_list, queue, -EINVAL);

		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2659e:	f100 0808 	add.w	r8, r0, #8
	__asm__ volatile(
   265a2:	f04f 0340 	mov.w	r3, #64	; 0x40
   265a6:	f3ef 8911 	mrs	r9, BASEPRI
   265aa:	f383 8812 	msr	BASEPRI_MAX, r3
   265ae:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   265b2:	4640      	mov	r0, r8
   265b4:	f7ff fd80 	bl	260b8 <z_spin_lock_valid>
   265b8:	b140      	cbz	r0, 265cc <k_queue_append_list+0x40>
	z_spin_lock_set_owner(l);
   265ba:	4640      	mov	r0, r8
   265bc:	f7ff fd9c 	bl	260f8 <z_spin_lock_set_owner>
	struct k_thread *thread = NULL;

	if (head != NULL) {
		thread = z_unpend_first_thread(&queue->wait_q);
   265c0:	f106 050c 	add.w	r5, r6, #12
   265c4:	4628      	mov	r0, r5
   265c6:	f001 fe41 	bl	2824c <z_unpend_first_thread>
   265ca:	e011      	b.n	265f0 <k_queue_append_list+0x64>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   265cc:	4d19      	ldr	r5, [pc, #100]	; (26634 <k_queue_append_list+0xa8>)
   265ce:	228e      	movs	r2, #142	; 0x8e
   265d0:	4629      	mov	r1, r5
   265d2:	4819      	ldr	r0, [pc, #100]	; (26638 <k_queue_append_list+0xac>)
   265d4:	f004 fd5b 	bl	2b08e <assert_print>
   265d8:	218e      	movs	r1, #142	; 0x8e
   265da:	4628      	mov	r0, r5
   265dc:	f004 fd50 	bl	2b080 <assert_post_action>
   265e0:	e7eb      	b.n	265ba <k_queue_append_list+0x2e>
	}

	while ((head != NULL) && (thread != NULL)) {
		prepare_thread_to_run(thread, head);
   265e2:	4621      	mov	r1, r4
   265e4:	f00a f9da 	bl	3099c <prepare_thread_to_run>
		head = *(void **)head;
   265e8:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   265ea:	4628      	mov	r0, r5
   265ec:	f001 fe2e 	bl	2824c <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   265f0:	b10c      	cbz	r4, 265f6 <k_queue_append_list+0x6a>
   265f2:	2800      	cmp	r0, #0
   265f4:	d1f5      	bne.n	265e2 <k_queue_append_list+0x56>
	}

	if (head != NULL) {
   265f6:	b14c      	cbz	r4, 2660c <k_queue_append_list+0x80>
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   265f8:	b144      	cbz	r4, 2660c <k_queue_append_list+0x80>
   265fa:	b13f      	cbz	r7, 2660c <k_queue_append_list+0x80>
	return list->tail;
   265fc:	6872      	ldr	r2, [r6, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   265fe:	b18a      	cbz	r2, 26624 <k_queue_append_list+0x98>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   26600:	6813      	ldr	r3, [r2, #0]
   26602:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   26606:	431c      	orrs	r4, r3
   26608:	6014      	str	r4, [r2, #0]
	list->tail = node;
   2660a:	6077      	str	r7, [r6, #4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   2660c:	2104      	movs	r1, #4
   2660e:	f106 0014 	add.w	r0, r6, #20
   26612:	f00a fb4f 	bl	30cb4 <z_handle_obj_poll_events>
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, append_list, queue, 0);

	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   26616:	4649      	mov	r1, r9
   26618:	4640      	mov	r0, r8
   2661a:	f000 ffbb 	bl	27594 <z_reschedule>
	return 0;
   2661e:	2000      	movs	r0, #0
}
   26620:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	list->head = node;
   26624:	6034      	str	r4, [r6, #0]
}
   26626:	e7f0      	b.n	2660a <k_queue_append_list+0x7e>
		return -EINVAL;
   26628:	f06f 0015 	mvn.w	r0, #21
}
   2662c:	4770      	bx	lr
		return -EINVAL;
   2662e:	f06f 0015 	mvn.w	r0, #21
   26632:	e7f5      	b.n	26620 <k_queue_append_list+0x94>
   26634:	000319f0 	.word	0x000319f0
   26638:	000318f8 	.word	0x000318f8

0002663c <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   2663c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   26640:	b083      	sub	sp, #12
   26642:	4604      	mov	r4, r0
   26644:	4690      	mov	r8, r2
   26646:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   26648:	f100 0508 	add.w	r5, r0, #8
   2664c:	f04f 0340 	mov.w	r3, #64	; 0x40
   26650:	f3ef 8611 	mrs	r6, BASEPRI
   26654:	f383 8812 	msr	BASEPRI_MAX, r3
   26658:	f3bf 8f6f 	isb	sy
   2665c:	4628      	mov	r0, r5
   2665e:	f7ff fd2b 	bl	260b8 <z_spin_lock_valid>
   26662:	b1d8      	cbz	r0, 2669c <z_impl_k_queue_get+0x60>
	z_spin_lock_set_owner(l);
   26664:	4628      	mov	r0, r5
   26666:	f7ff fd47 	bl	260f8 <z_spin_lock_set_owner>
	return list->head;
   2666a:	6820      	ldr	r0, [r4, #0]
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   2666c:	b378      	cbz	r0, 266ce <z_impl_k_queue_get+0x92>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2666e:	6803      	ldr	r3, [r0, #0]
   26670:	f023 0303 	bic.w	r3, r3, #3
	list->head = node;
   26674:	6023      	str	r3, [r4, #0]
	return list->tail;
   26676:	6862      	ldr	r2, [r4, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   26678:	4290      	cmp	r0, r2
   2667a:	d01b      	beq.n	266b4 <z_impl_k_queue_get+0x78>
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   2667c:	2101      	movs	r1, #1
   2667e:	f00a f994 	bl	309aa <z_queue_node_peek>
   26682:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26684:	4628      	mov	r0, r5
   26686:	f7ff fd27 	bl	260d8 <z_spin_unlock_valid>
   2668a:	b1a8      	cbz	r0, 266b8 <z_impl_k_queue_get+0x7c>
	__asm__ volatile(
   2668c:	f386 8811 	msr	BASEPRI, r6
   26690:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   26694:	4620      	mov	r0, r4
   26696:	b003      	add	sp, #12
   26698:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2669c:	f8df 9080 	ldr.w	r9, [pc, #128]	; 26720 <z_impl_k_queue_get+0xe4>
   266a0:	228e      	movs	r2, #142	; 0x8e
   266a2:	4649      	mov	r1, r9
   266a4:	481f      	ldr	r0, [pc, #124]	; (26724 <z_impl_k_queue_get+0xe8>)
   266a6:	f004 fcf2 	bl	2b08e <assert_print>
   266aa:	218e      	movs	r1, #142	; 0x8e
   266ac:	4648      	mov	r0, r9
   266ae:	f004 fce7 	bl	2b080 <assert_post_action>
   266b2:	e7d7      	b.n	26664 <z_impl_k_queue_get+0x28>
	list->tail = node;
   266b4:	6063      	str	r3, [r4, #4]
}
   266b6:	e7e1      	b.n	2667c <z_impl_k_queue_get+0x40>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   266b8:	4d19      	ldr	r5, [pc, #100]	; (26720 <z_impl_k_queue_get+0xe4>)
   266ba:	22b9      	movs	r2, #185	; 0xb9
   266bc:	4629      	mov	r1, r5
   266be:	4819      	ldr	r0, [pc, #100]	; (26724 <z_impl_k_queue_get+0xe8>)
   266c0:	f004 fce5 	bl	2b08e <assert_print>
   266c4:	21b9      	movs	r1, #185	; 0xb9
   266c6:	4628      	mov	r0, r5
   266c8:	f004 fcda 	bl	2b080 <assert_post_action>
   266cc:	e7de      	b.n	2668c <z_impl_k_queue_get+0x50>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   266ce:	ea57 0308 	orrs.w	r3, r7, r8
   266d2:	d00d      	beq.n	266f0 <z_impl_k_queue_get+0xb4>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   266d4:	f8cd 8000 	str.w	r8, [sp]
   266d8:	9701      	str	r7, [sp, #4]
   266da:	f104 020c 	add.w	r2, r4, #12
   266de:	4631      	mov	r1, r6
   266e0:	4628      	mov	r0, r5
   266e2:	f001 fb7b 	bl	27ddc <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   266e6:	b9c0      	cbnz	r0, 2671a <z_impl_k_queue_get+0xde>
   266e8:	4b0f      	ldr	r3, [pc, #60]	; (26728 <z_impl_k_queue_get+0xec>)
   266ea:	689b      	ldr	r3, [r3, #8]
   266ec:	695c      	ldr	r4, [r3, #20]
   266ee:	e7d1      	b.n	26694 <z_impl_k_queue_get+0x58>
   266f0:	4628      	mov	r0, r5
   266f2:	f7ff fcf1 	bl	260d8 <z_spin_unlock_valid>
   266f6:	b128      	cbz	r0, 26704 <z_impl_k_queue_get+0xc8>
   266f8:	f386 8811 	msr	BASEPRI, r6
   266fc:	f3bf 8f6f 	isb	sy
		return NULL;
   26700:	2400      	movs	r4, #0
   26702:	e7c7      	b.n	26694 <z_impl_k_queue_get+0x58>
   26704:	4c06      	ldr	r4, [pc, #24]	; (26720 <z_impl_k_queue_get+0xe4>)
   26706:	22b9      	movs	r2, #185	; 0xb9
   26708:	4621      	mov	r1, r4
   2670a:	4806      	ldr	r0, [pc, #24]	; (26724 <z_impl_k_queue_get+0xe8>)
   2670c:	f004 fcbf 	bl	2b08e <assert_print>
   26710:	21b9      	movs	r1, #185	; 0xb9
   26712:	4620      	mov	r0, r4
   26714:	f004 fcb4 	bl	2b080 <assert_post_action>
   26718:	e7ee      	b.n	266f8 <z_impl_k_queue_get+0xbc>
	return (ret != 0) ? NULL : _current->base.swap_data;
   2671a:	2400      	movs	r4, #0
   2671c:	e7ba      	b.n	26694 <z_impl_k_queue_get+0x58>
   2671e:	bf00      	nop
   26720:	000319f0 	.word	0x000319f0
   26724:	000318f8 	.word	0x000318f8
   26728:	200036f4 	.word	0x200036f4

0002672c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   2672c:	b570      	push	{r4, r5, r6, lr}
   2672e:	4604      	mov	r4, r0
	__asm__ volatile(
   26730:	f04f 0340 	mov.w	r3, #64	; 0x40
   26734:	f3ef 8511 	mrs	r5, BASEPRI
   26738:	f383 8812 	msr	BASEPRI_MAX, r3
   2673c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26740:	4816      	ldr	r0, [pc, #88]	; (2679c <z_impl_k_sem_give+0x70>)
   26742:	f7ff fcb9 	bl	260b8 <z_spin_lock_valid>
   26746:	b178      	cbz	r0, 26768 <z_impl_k_sem_give+0x3c>
	z_spin_lock_set_owner(l);
   26748:	4814      	ldr	r0, [pc, #80]	; (2679c <z_impl_k_sem_give+0x70>)
   2674a:	f7ff fcd5 	bl	260f8 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   2674e:	4620      	mov	r0, r4
   26750:	f001 fd7c 	bl	2824c <z_unpend_first_thread>

	if (thread != NULL) {
   26754:	b198      	cbz	r0, 2677e <z_impl_k_sem_give+0x52>
   26756:	2200      	movs	r2, #0
   26758:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   2675a:	f001 f9af 	bl	27abc <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   2675e:	4629      	mov	r1, r5
   26760:	480e      	ldr	r0, [pc, #56]	; (2679c <z_impl_k_sem_give+0x70>)
   26762:	f000 ff17 	bl	27594 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   26766:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26768:	4e0d      	ldr	r6, [pc, #52]	; (267a0 <z_impl_k_sem_give+0x74>)
   2676a:	228e      	movs	r2, #142	; 0x8e
   2676c:	4631      	mov	r1, r6
   2676e:	480d      	ldr	r0, [pc, #52]	; (267a4 <z_impl_k_sem_give+0x78>)
   26770:	f004 fc8d 	bl	2b08e <assert_print>
   26774:	218e      	movs	r1, #142	; 0x8e
   26776:	4630      	mov	r0, r6
   26778:	f004 fc82 	bl	2b080 <assert_post_action>
   2677c:	e7e4      	b.n	26748 <z_impl_k_sem_give+0x1c>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   2677e:	68a3      	ldr	r3, [r4, #8]
   26780:	68e2      	ldr	r2, [r4, #12]
   26782:	4293      	cmp	r3, r2
   26784:	d008      	beq.n	26798 <z_impl_k_sem_give+0x6c>
   26786:	2201      	movs	r2, #1
   26788:	4413      	add	r3, r2
   2678a:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   2678c:	2102      	movs	r1, #2
   2678e:	f104 0010 	add.w	r0, r4, #16
   26792:	f00a fa8f 	bl	30cb4 <z_handle_obj_poll_events>
}
   26796:	e7e2      	b.n	2675e <z_impl_k_sem_give+0x32>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   26798:	2200      	movs	r2, #0
   2679a:	e7f5      	b.n	26788 <z_impl_k_sem_give+0x5c>
   2679c:	20003720 	.word	0x20003720
   267a0:	000319f0 	.word	0x000319f0
   267a4:	000318f8 	.word	0x000318f8

000267a8 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   267a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   267ac:	b082      	sub	sp, #8
   267ae:	4604      	mov	r4, r0
   267b0:	4617      	mov	r7, r2
   267b2:	461d      	mov	r5, r3
   267b4:	f3ef 8105 	mrs	r1, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   267b8:	b111      	cbz	r1, 267c0 <z_impl_k_sem_take+0x18>
   267ba:	ea55 0302 	orrs.w	r3, r5, r2
   267be:	d11e      	bne.n	267fe <z_impl_k_sem_take+0x56>
   267c0:	f04f 0340 	mov.w	r3, #64	; 0x40
   267c4:	f3ef 8611 	mrs	r6, BASEPRI
   267c8:	f383 8812 	msr	BASEPRI_MAX, r3
   267cc:	f3bf 8f6f 	isb	sy
   267d0:	482c      	ldr	r0, [pc, #176]	; (26884 <z_impl_k_sem_take+0xdc>)
   267d2:	f7ff fc71 	bl	260b8 <z_spin_lock_valid>
   267d6:	b1e8      	cbz	r0, 26814 <z_impl_k_sem_take+0x6c>
	z_spin_lock_set_owner(l);
   267d8:	482a      	ldr	r0, [pc, #168]	; (26884 <z_impl_k_sem_take+0xdc>)
   267da:	f7ff fc8d 	bl	260f8 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   267de:	68a1      	ldr	r1, [r4, #8]
   267e0:	b379      	cbz	r1, 26842 <z_impl_k_sem_take+0x9a>
		sem->count--;
   267e2:	3901      	subs	r1, #1
   267e4:	60a1      	str	r1, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   267e6:	4827      	ldr	r0, [pc, #156]	; (26884 <z_impl_k_sem_take+0xdc>)
   267e8:	f7ff fc76 	bl	260d8 <z_spin_unlock_valid>
   267ec:	b1f0      	cbz	r0, 2682c <z_impl_k_sem_take+0x84>
	__asm__ volatile(
   267ee:	f386 8811 	msr	BASEPRI, r6
   267f2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   267f6:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   267f8:	b002      	add	sp, #8
   267fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(((arch_is_in_isr() == false) ||
   267fe:	4e22      	ldr	r6, [pc, #136]	; (26888 <z_impl_k_sem_take+0xe0>)
   26800:	2279      	movs	r2, #121	; 0x79
   26802:	4631      	mov	r1, r6
   26804:	4821      	ldr	r0, [pc, #132]	; (2688c <z_impl_k_sem_take+0xe4>)
   26806:	f004 fc42 	bl	2b08e <assert_print>
   2680a:	2179      	movs	r1, #121	; 0x79
   2680c:	4630      	mov	r0, r6
   2680e:	f004 fc37 	bl	2b080 <assert_post_action>
   26812:	e7d5      	b.n	267c0 <z_impl_k_sem_take+0x18>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26814:	f8df 8078 	ldr.w	r8, [pc, #120]	; 26890 <z_impl_k_sem_take+0xe8>
   26818:	228e      	movs	r2, #142	; 0x8e
   2681a:	4641      	mov	r1, r8
   2681c:	481b      	ldr	r0, [pc, #108]	; (2688c <z_impl_k_sem_take+0xe4>)
   2681e:	f004 fc36 	bl	2b08e <assert_print>
   26822:	218e      	movs	r1, #142	; 0x8e
   26824:	4640      	mov	r0, r8
   26826:	f004 fc2b 	bl	2b080 <assert_post_action>
   2682a:	e7d5      	b.n	267d8 <z_impl_k_sem_take+0x30>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2682c:	4c18      	ldr	r4, [pc, #96]	; (26890 <z_impl_k_sem_take+0xe8>)
   2682e:	22b9      	movs	r2, #185	; 0xb9
   26830:	4621      	mov	r1, r4
   26832:	4816      	ldr	r0, [pc, #88]	; (2688c <z_impl_k_sem_take+0xe4>)
   26834:	f004 fc2b 	bl	2b08e <assert_print>
   26838:	21b9      	movs	r1, #185	; 0xb9
   2683a:	4620      	mov	r0, r4
   2683c:	f004 fc20 	bl	2b080 <assert_post_action>
   26840:	e7d5      	b.n	267ee <z_impl_k_sem_take+0x46>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   26842:	ea55 0307 	orrs.w	r3, r5, r7
   26846:	d007      	beq.n	26858 <z_impl_k_sem_take+0xb0>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   26848:	9700      	str	r7, [sp, #0]
   2684a:	9501      	str	r5, [sp, #4]
   2684c:	4622      	mov	r2, r4
   2684e:	4631      	mov	r1, r6
   26850:	480c      	ldr	r0, [pc, #48]	; (26884 <z_impl_k_sem_take+0xdc>)
   26852:	f001 fac3 	bl	27ddc <z_pend_curr>
	return ret;
   26856:	e7cf      	b.n	267f8 <z_impl_k_sem_take+0x50>
   26858:	480a      	ldr	r0, [pc, #40]	; (26884 <z_impl_k_sem_take+0xdc>)
   2685a:	f7ff fc3d 	bl	260d8 <z_spin_unlock_valid>
   2685e:	b130      	cbz	r0, 2686e <z_impl_k_sem_take+0xc6>
   26860:	f386 8811 	msr	BASEPRI, r6
   26864:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   26868:	f06f 000f 	mvn.w	r0, #15
   2686c:	e7c4      	b.n	267f8 <z_impl_k_sem_take+0x50>
   2686e:	4c08      	ldr	r4, [pc, #32]	; (26890 <z_impl_k_sem_take+0xe8>)
   26870:	22b9      	movs	r2, #185	; 0xb9
   26872:	4621      	mov	r1, r4
   26874:	4805      	ldr	r0, [pc, #20]	; (2688c <z_impl_k_sem_take+0xe4>)
   26876:	f004 fc0a 	bl	2b08e <assert_print>
   2687a:	21b9      	movs	r1, #185	; 0xb9
   2687c:	4620      	mov	r0, r4
   2687e:	f004 fbff 	bl	2b080 <assert_post_action>
   26882:	e7ed      	b.n	26860 <z_impl_k_sem_take+0xb8>
   26884:	20003720 	.word	0x20003720
   26888:	0003507c 	.word	0x0003507c
   2688c:	000318f8 	.word	0x000318f8
   26890:	000319f0 	.word	0x000319f0

00026894 <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
   26894:	b570      	push	{r4, r5, r6, lr}
   26896:	4604      	mov	r4, r0
	__asm__ volatile(
   26898:	f04f 0340 	mov.w	r3, #64	; 0x40
   2689c:	f3ef 8511 	mrs	r5, BASEPRI
   268a0:	f383 8812 	msr	BASEPRI_MAX, r3
   268a4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   268a8:	4814      	ldr	r0, [pc, #80]	; (268fc <z_impl_k_sem_reset+0x68>)
   268aa:	f7ff fc05 	bl	260b8 <z_spin_lock_valid>
   268ae:	b118      	cbz	r0, 268b8 <z_impl_k_sem_reset+0x24>
	z_spin_lock_set_owner(l);
   268b0:	4812      	ldr	r0, [pc, #72]	; (268fc <z_impl_k_sem_reset+0x68>)
   268b2:	f7ff fc21 	bl	260f8 <z_spin_lock_set_owner>
	return k;
   268b6:	e00f      	b.n	268d8 <z_impl_k_sem_reset+0x44>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   268b8:	4e11      	ldr	r6, [pc, #68]	; (26900 <z_impl_k_sem_reset+0x6c>)
   268ba:	228e      	movs	r2, #142	; 0x8e
   268bc:	4631      	mov	r1, r6
   268be:	4811      	ldr	r0, [pc, #68]	; (26904 <z_impl_k_sem_reset+0x70>)
   268c0:	f004 fbe5 	bl	2b08e <assert_print>
   268c4:	218e      	movs	r1, #142	; 0x8e
   268c6:	4630      	mov	r0, r6
   268c8:	f004 fbda 	bl	2b080 <assert_post_action>
   268cc:	e7f0      	b.n	268b0 <z_impl_k_sem_reset+0x1c>
   268ce:	f06f 020a 	mvn.w	r2, #10
   268d2:	67c2      	str	r2, [r0, #124]	; 0x7c
		thread = z_unpend_first_thread(&sem->wait_q);
		if (thread == NULL) {
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
   268d4:	f001 f8f2 	bl	27abc <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
   268d8:	4620      	mov	r0, r4
   268da:	f001 fcb7 	bl	2824c <z_unpend_first_thread>
		if (thread == NULL) {
   268de:	2800      	cmp	r0, #0
   268e0:	d1f5      	bne.n	268ce <z_impl_k_sem_reset+0x3a>
	}
	sem->count = 0;
   268e2:	2300      	movs	r3, #0
   268e4:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   268e6:	2102      	movs	r1, #2
   268e8:	f104 0010 	add.w	r0, r4, #16
   268ec:	f00a f9e2 	bl	30cb4 <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
   268f0:	4629      	mov	r1, r5
   268f2:	4802      	ldr	r0, [pc, #8]	; (268fc <z_impl_k_sem_reset+0x68>)
   268f4:	f000 fe4e 	bl	27594 <z_reschedule>
}
   268f8:	bd70      	pop	{r4, r5, r6, pc}
   268fa:	bf00      	nop
   268fc:	20003720 	.word	0x20003720
   26900:	000319f0 	.word	0x000319f0
   26904:	000318f8 	.word	0x000318f8

00026908 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   26908:	b510      	push	{r4, lr}
   2690a:	b084      	sub	sp, #16
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   2690c:	4b08      	ldr	r3, [pc, #32]	; (26930 <k_sys_work_q_init+0x28>)
   2690e:	9302      	str	r3, [sp, #8]
   26910:	2400      	movs	r4, #0
   26912:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   26916:	ab02      	add	r3, sp, #8
   26918:	9300      	str	r3, [sp, #0]
   2691a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2691e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   26922:	4904      	ldr	r1, [pc, #16]	; (26934 <k_sys_work_q_init+0x2c>)
   26924:	4804      	ldr	r0, [pc, #16]	; (26938 <k_sys_work_q_init+0x30>)
   26926:	f000 fabf 	bl	26ea8 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   2692a:	4620      	mov	r0, r4
   2692c:	b004      	add	sp, #16
   2692e:	bd10      	pop	{r4, pc}
   26930:	0003509c 	.word	0x0003509c
   26934:	20006280 	.word	0x20006280
   26938:	20001fb0 	.word	0x20001fb0

0002693c <submit_to_queue_locked>:
 * @retval -EINVAL if no queue is provided
 * @retval -ENODEV if the queue is not started
 */
static int submit_to_queue_locked(struct k_work *work,
				  struct k_work_q **queuep)
{
   2693c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2693e:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
   26940:	68c3      	ldr	r3, [r0, #12]
	int ret = 0;

	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   26942:	f013 0f02 	tst.w	r3, #2
   26946:	d16e      	bne.n	26a26 <submit_to_queue_locked+0xea>
   26948:	4604      	mov	r4, r0
		/* Disallowed */
		ret = -EBUSY;
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   2694a:	f013 0f04 	tst.w	r3, #4
   2694e:	d16f      	bne.n	26a30 <submit_to_queue_locked+0xf4>
		/* Not currently queued */
		ret = 1;

		/* If no queue specified resubmit to last queue.
		 */
		if (*queuep == NULL) {
   26950:	680b      	ldr	r3, [r1, #0]
   26952:	2b00      	cmp	r3, #0
   26954:	d03d      	beq.n	269d2 <submit_to_queue_locked+0x96>
	return (*flagp & BIT(bit)) != 0U;
   26956:	68e3      	ldr	r3, [r4, #12]

		/* If the work is currently running we have to use the
		 * queue it's running on to prevent handler
		 * re-entrancy.
		 */
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   26958:	f013 0f01 	tst.w	r3, #1
   2695c:	d049      	beq.n	269f2 <submit_to_queue_locked+0xb6>
			__ASSERT_NO_MSG(work->queue != NULL);
   2695e:	68a3      	ldr	r3, [r4, #8]
   26960:	2b00      	cmp	r3, #0
   26962:	d039      	beq.n	269d8 <submit_to_queue_locked+0x9c>
			*queuep = work->queue;
   26964:	68a3      	ldr	r3, [r4, #8]
   26966:	602b      	str	r3, [r5, #0]
			ret = 2;
   26968:	2702      	movs	r7, #2
		}

		int rc = queue_submit_locked(*queuep, work);
   2696a:	682e      	ldr	r6, [r5, #0]
	if (queue == NULL) {
   2696c:	2e00      	cmp	r6, #0
   2696e:	d04e      	beq.n	26a0e <submit_to_queue_locked+0xd2>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   26970:	4b30      	ldr	r3, [pc, #192]	; (26a34 <submit_to_queue_locked+0xf8>)
   26972:	689b      	ldr	r3, [r3, #8]
   26974:	42b3      	cmp	r3, r6
   26976:	d03e      	beq.n	269f6 <submit_to_queue_locked+0xba>
   26978:	2300      	movs	r3, #0
   2697a:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
   2697c:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
   26980:	f3c3 0180 	ubfx	r1, r3, #2, #1
   26984:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   26988:	f013 0f01 	tst.w	r3, #1
   2698c:	d042      	beq.n	26a14 <submit_to_queue_locked+0xd8>
	} else if (draining && !chained) {
   2698e:	b109      	cbz	r1, 26994 <submit_to_queue_locked+0x58>
   26990:	2a00      	cmp	r2, #0
   26992:	d042      	beq.n	26a1a <submit_to_queue_locked+0xde>
	} else if (plugged && !draining) {
   26994:	b108      	cbz	r0, 2699a <submit_to_queue_locked+0x5e>
   26996:	2900      	cmp	r1, #0
   26998:	d042      	beq.n	26a20 <submit_to_queue_locked+0xe4>
	parent->next = child;
   2699a:	2300      	movs	r3, #0
   2699c:	6023      	str	r3, [r4, #0]
	return list->tail;
   2699e:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   269a2:	b37b      	cbz	r3, 26a04 <submit_to_queue_locked+0xc8>
	parent->next = child;
   269a4:	601c      	str	r4, [r3, #0]
	list->tail = node;
   269a6:	f8c6 4084 	str.w	r4, [r6, #132]	; 0x84
	if (queue != NULL) {
   269aa:	b12e      	cbz	r6, 269b8 <submit_to_queue_locked+0x7c>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   269ac:	2200      	movs	r2, #0
   269ae:	4611      	mov	r1, r2
   269b0:	f106 0088 	add.w	r0, r6, #136	; 0x88
   269b4:	f001 fec6 	bl	28744 <z_sched_wake>
		ret = 1;
   269b8:	2001      	movs	r0, #1

		if (rc < 0) {
   269ba:	2800      	cmp	r0, #0
   269bc:	db06      	blt.n	269cc <submit_to_queue_locked+0x90>
	*flagp |= BIT(bit);
   269be:	68e3      	ldr	r3, [r4, #12]
   269c0:	f043 0304 	orr.w	r3, r3, #4
   269c4:	60e3      	str	r3, [r4, #12]
			ret = rc;
		} else {
			flag_set(&work->flags, K_WORK_QUEUED_BIT);
			work->queue = *queuep;
   269c6:	682b      	ldr	r3, [r5, #0]
   269c8:	60a3      	str	r3, [r4, #8]
   269ca:	4638      	mov	r0, r7
		}
	} else {
		/* Already queued, do nothing. */
	}

	if (ret <= 0) {
   269cc:	2800      	cmp	r0, #0
   269ce:	dc2e      	bgt.n	26a2e <submit_to_queue_locked+0xf2>
   269d0:	e02b      	b.n	26a2a <submit_to_queue_locked+0xee>
			*queuep = work->queue;
   269d2:	6883      	ldr	r3, [r0, #8]
   269d4:	600b      	str	r3, [r1, #0]
   269d6:	e7be      	b.n	26956 <submit_to_queue_locked+0x1a>
			__ASSERT_NO_MSG(work->queue != NULL);
   269d8:	4e17      	ldr	r6, [pc, #92]	; (26a38 <submit_to_queue_locked+0xfc>)
   269da:	f44f 72a7 	mov.w	r2, #334	; 0x14e
   269de:	4631      	mov	r1, r6
   269e0:	4816      	ldr	r0, [pc, #88]	; (26a3c <submit_to_queue_locked+0x100>)
   269e2:	f004 fb54 	bl	2b08e <assert_print>
   269e6:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   269ea:	4630      	mov	r0, r6
   269ec:	f004 fb48 	bl	2b080 <assert_post_action>
   269f0:	e7b8      	b.n	26964 <submit_to_queue_locked+0x28>
		ret = 1;
   269f2:	2701      	movs	r7, #1
   269f4:	e7b9      	b.n	2696a <submit_to_queue_locked+0x2e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   269f6:	f009 ff94 	bl	30922 <k_is_in_isr>
   269fa:	b908      	cbnz	r0, 26a00 <submit_to_queue_locked+0xc4>
   269fc:	2301      	movs	r3, #1
   269fe:	e7bc      	b.n	2697a <submit_to_queue_locked+0x3e>
   26a00:	2300      	movs	r3, #0
   26a02:	e7ba      	b.n	2697a <submit_to_queue_locked+0x3e>
   26a04:	f8c6 4084 	str.w	r4, [r6, #132]	; 0x84
	list->head = node;
   26a08:	f8c6 4080 	str.w	r4, [r6, #128]	; 0x80
}
   26a0c:	e7cd      	b.n	269aa <submit_to_queue_locked+0x6e>
		return -EINVAL;
   26a0e:	f06f 0015 	mvn.w	r0, #21
   26a12:	e7d2      	b.n	269ba <submit_to_queue_locked+0x7e>
		ret = -ENODEV;
   26a14:	f06f 0012 	mvn.w	r0, #18
   26a18:	e7cf      	b.n	269ba <submit_to_queue_locked+0x7e>
		ret = -EBUSY;
   26a1a:	f06f 000f 	mvn.w	r0, #15
   26a1e:	e7cc      	b.n	269ba <submit_to_queue_locked+0x7e>
		ret = -EBUSY;
   26a20:	f06f 000f 	mvn.w	r0, #15
   26a24:	e7c9      	b.n	269ba <submit_to_queue_locked+0x7e>
		ret = -EBUSY;
   26a26:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
   26a2a:	2300      	movs	r3, #0
   26a2c:	602b      	str	r3, [r5, #0]
	}

	return ret;
}
   26a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int ret = 0;
   26a30:	2000      	movs	r0, #0
   26a32:	e7fa      	b.n	26a2a <submit_to_queue_locked+0xee>
   26a34:	200036f4 	.word	0x200036f4
   26a38:	000350a8 	.word	0x000350a8
   26a3c:	000318f8 	.word	0x000318f8

00026a40 <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
   26a40:	b5f0      	push	{r4, r5, r6, r7, lr}
   26a42:	b083      	sub	sp, #12
   26a44:	4604      	mov	r4, r0
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
   26a46:	f1a0 0610 	sub.w	r6, r0, #16
   26a4a:	f04f 0340 	mov.w	r3, #64	; 0x40
   26a4e:	f3ef 8511 	mrs	r5, BASEPRI
   26a52:	f383 8812 	msr	BASEPRI_MAX, r3
   26a56:	f3bf 8f6f 	isb	sy
   26a5a:	481c      	ldr	r0, [pc, #112]	; (26acc <work_timeout+0x8c>)
   26a5c:	f7ff fb2c 	bl	260b8 <z_spin_lock_valid>
   26a60:	b1b8      	cbz	r0, 26a92 <work_timeout+0x52>
	z_spin_lock_set_owner(l);
   26a62:	481a      	ldr	r0, [pc, #104]	; (26acc <work_timeout+0x8c>)
   26a64:	f7ff fb48 	bl	260f8 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
   26a68:	2300      	movs	r3, #0
   26a6a:	9301      	str	r3, [sp, #4]
	return (*flagp & BIT(bit)) != 0U;
   26a6c:	f854 3c04 	ldr.w	r3, [r4, #-4]
	*flagp &= ~BIT(bit);
   26a70:	f023 0208 	bic.w	r2, r3, #8
   26a74:	f844 2c04 	str.w	r2, [r4, #-4]
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   26a78:	f013 0f08 	tst.w	r3, #8
   26a7c:	d114      	bne.n	26aa8 <work_timeout+0x68>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26a7e:	4813      	ldr	r0, [pc, #76]	; (26acc <work_timeout+0x8c>)
   26a80:	f7ff fb2a 	bl	260d8 <z_spin_unlock_valid>
   26a84:	b1b8      	cbz	r0, 26ab6 <work_timeout+0x76>
	__asm__ volatile(
   26a86:	f385 8811 	msr	BASEPRI, r5
   26a8a:	f3bf 8f6f 	isb	sy
		queue = dw->queue;
		(void)submit_to_queue_locked(wp, &queue);
	}

	k_spin_unlock(&lock, key);
}
   26a8e:	b003      	add	sp, #12
   26a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26a92:	4f0f      	ldr	r7, [pc, #60]	; (26ad0 <work_timeout+0x90>)
   26a94:	228e      	movs	r2, #142	; 0x8e
   26a96:	4639      	mov	r1, r7
   26a98:	480e      	ldr	r0, [pc, #56]	; (26ad4 <work_timeout+0x94>)
   26a9a:	f004 faf8 	bl	2b08e <assert_print>
   26a9e:	218e      	movs	r1, #142	; 0x8e
   26aa0:	4638      	mov	r0, r7
   26aa2:	f004 faed 	bl	2b080 <assert_post_action>
   26aa6:	e7dc      	b.n	26a62 <work_timeout+0x22>
		queue = dw->queue;
   26aa8:	69a3      	ldr	r3, [r4, #24]
   26aaa:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   26aac:	a901      	add	r1, sp, #4
   26aae:	4630      	mov	r0, r6
   26ab0:	f7ff ff44 	bl	2693c <submit_to_queue_locked>
   26ab4:	e7e3      	b.n	26a7e <work_timeout+0x3e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26ab6:	4c06      	ldr	r4, [pc, #24]	; (26ad0 <work_timeout+0x90>)
   26ab8:	22b9      	movs	r2, #185	; 0xb9
   26aba:	4621      	mov	r1, r4
   26abc:	4805      	ldr	r0, [pc, #20]	; (26ad4 <work_timeout+0x94>)
   26abe:	f004 fae6 	bl	2b08e <assert_print>
   26ac2:	21b9      	movs	r1, #185	; 0xb9
   26ac4:	4620      	mov	r0, r4
   26ac6:	f004 fadb 	bl	2b080 <assert_post_action>
   26aca:	e7dc      	b.n	26a86 <work_timeout+0x46>
   26acc:	20003724 	.word	0x20003724
   26ad0:	000319f0 	.word	0x000319f0
   26ad4:	000318f8 	.word	0x000318f8

00026ad8 <cancel_sync_locked>:
{
   26ad8:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   26ada:	68c5      	ldr	r5, [r0, #12]
   26adc:	f015 0f02 	tst.w	r5, #2
   26ae0:	f3c5 0540 	ubfx	r5, r5, #1, #1
	if (ret) {
   26ae4:	d101      	bne.n	26aea <cancel_sync_locked+0x12>
}
   26ae6:	4628      	mov	r0, r5
   26ae8:	bd70      	pop	{r4, r5, r6, pc}
   26aea:	4604      	mov	r4, r0
   26aec:	460e      	mov	r6, r1
	k_sem_init(&canceler->sem, 0, 1);
   26aee:	f101 0008 	add.w	r0, r1, #8
	return z_impl_k_sem_init(sem, initial_count, limit);
   26af2:	2201      	movs	r2, #1
   26af4:	2100      	movs	r1, #0
   26af6:	f009 ff8b 	bl	30a10 <z_impl_k_sem_init>
	canceler->work = work;
   26afa:	6074      	str	r4, [r6, #4]
	parent->next = child;
   26afc:	2300      	movs	r3, #0
   26afe:	6033      	str	r3, [r6, #0]
	return list->tail;
   26b00:	4b05      	ldr	r3, [pc, #20]	; (26b18 <cancel_sync_locked+0x40>)
   26b02:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   26b04:	b11b      	cbz	r3, 26b0e <cancel_sync_locked+0x36>
	parent->next = child;
   26b06:	601e      	str	r6, [r3, #0]
	list->tail = node;
   26b08:	4b03      	ldr	r3, [pc, #12]	; (26b18 <cancel_sync_locked+0x40>)
   26b0a:	605e      	str	r6, [r3, #4]
}
   26b0c:	e7eb      	b.n	26ae6 <cancel_sync_locked+0xe>
   26b0e:	4b02      	ldr	r3, [pc, #8]	; (26b18 <cancel_sync_locked+0x40>)
   26b10:	605e      	str	r6, [r3, #4]
	list->head = node;
   26b12:	601e      	str	r6, [r3, #0]
}
   26b14:	e7e7      	b.n	26ae6 <cancel_sync_locked+0xe>
   26b16:	bf00      	nop
   26b18:	20003728 	.word	0x20003728

00026b1c <schedule_for_queue_locked>:
 * @retval 1 to indicate successfully scheduled.
 */
static int schedule_for_queue_locked(struct k_work_q **queuep,
				     struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   26b1c:	b508      	push	{r3, lr}
   26b1e:	4684      	mov	ip, r0
   26b20:	4608      	mov	r0, r1
	int ret = 1;
	struct k_work *work = &dwork->work;

	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   26b22:	ea53 0102 	orrs.w	r1, r3, r2
   26b26:	d00c      	beq.n	26b42 <schedule_for_queue_locked+0x26>
	*flagp |= BIT(bit);
   26b28:	68c1      	ldr	r1, [r0, #12]
   26b2a:	f041 0108 	orr.w	r1, r1, #8
   26b2e:	60c1      	str	r1, [r0, #12]
		return submit_to_queue_locked(work, queuep);
	}

	flag_set(&work->flags, K_WORK_DELAYED_BIT);
	dwork->queue = *queuep;
   26b30:	f8dc 1000 	ldr.w	r1, [ip]
   26b34:	6281      	str	r1, [r0, #40]	; 0x28

	/* Add timeout */
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   26b36:	4905      	ldr	r1, [pc, #20]	; (26b4c <schedule_for_queue_locked+0x30>)
   26b38:	3010      	adds	r0, #16
   26b3a:	f001 fed9 	bl	288f0 <z_add_timeout>

	return ret;
   26b3e:	2001      	movs	r0, #1
}
   26b40:	bd08      	pop	{r3, pc}
		return submit_to_queue_locked(work, queuep);
   26b42:	4661      	mov	r1, ip
   26b44:	f7ff fefa 	bl	2693c <submit_to_queue_locked>
   26b48:	e7fa      	b.n	26b40 <schedule_for_queue_locked+0x24>
   26b4a:	bf00      	nop
   26b4c:	00026a41 	.word	0x00026a41

00026b50 <finalize_cancel_locked>:
{
   26b50:	b570      	push	{r4, r5, r6, lr}
   26b52:	4605      	mov	r5, r0
	*flagp &= ~BIT(bit);
   26b54:	68c3      	ldr	r3, [r0, #12]
   26b56:	f023 0302 	bic.w	r3, r3, #2
   26b5a:	60c3      	str	r3, [r0, #12]
	return list->head;
   26b5c:	4b1a      	ldr	r3, [pc, #104]	; (26bc8 <finalize_cancel_locked+0x78>)
   26b5e:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   26b60:	b1fb      	cbz	r3, 26ba2 <finalize_cancel_locked+0x52>
   26b62:	461c      	mov	r4, r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   26b64:	b103      	cbz	r3, 26b68 <finalize_cancel_locked+0x18>
	return node->next;
   26b66:	681c      	ldr	r4, [r3, #0]
   26b68:	2600      	movs	r6, #0
   26b6a:	e01f      	b.n	26bac <finalize_cancel_locked+0x5c>
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   26b6c:	461a      	mov	r2, r3
Z_GENLIST_REMOVE(slist, snode)
   26b6e:	b166      	cbz	r6, 26b8a <finalize_cancel_locked+0x3a>
	return node->next;
   26b70:	6819      	ldr	r1, [r3, #0]
	parent->next = child;
   26b72:	6031      	str	r1, [r6, #0]
	return list->tail;
   26b74:	4914      	ldr	r1, [pc, #80]	; (26bc8 <finalize_cancel_locked+0x78>)
   26b76:	6849      	ldr	r1, [r1, #4]
Z_GENLIST_REMOVE(slist, snode)
   26b78:	428b      	cmp	r3, r1
   26b7a:	d00f      	beq.n	26b9c <finalize_cancel_locked+0x4c>
	parent->next = child;
   26b7c:	2100      	movs	r1, #0
   26b7e:	6011      	str	r1, [r2, #0]
			k_sem_give(&wc->sem);
   26b80:	f103 0008 	add.w	r0, r3, #8
	z_impl_k_sem_give(sem);
   26b84:	f7ff fdd2 	bl	2672c <z_impl_k_sem_give>
}
   26b88:	e015      	b.n	26bb6 <finalize_cancel_locked+0x66>
	return node->next;
   26b8a:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   26b8c:	490e      	ldr	r1, [pc, #56]	; (26bc8 <finalize_cancel_locked+0x78>)
   26b8e:	6008      	str	r0, [r1, #0]
	return list->tail;
   26b90:	6849      	ldr	r1, [r1, #4]
Z_GENLIST_REMOVE(slist, snode)
   26b92:	428b      	cmp	r3, r1
   26b94:	d1f2      	bne.n	26b7c <finalize_cancel_locked+0x2c>
	list->tail = node;
   26b96:	490c      	ldr	r1, [pc, #48]	; (26bc8 <finalize_cancel_locked+0x78>)
   26b98:	6048      	str	r0, [r1, #4]
}
   26b9a:	e7ef      	b.n	26b7c <finalize_cancel_locked+0x2c>
	list->tail = node;
   26b9c:	490a      	ldr	r1, [pc, #40]	; (26bc8 <finalize_cancel_locked+0x78>)
   26b9e:	604e      	str	r6, [r1, #4]
}
   26ba0:	e7ec      	b.n	26b7c <finalize_cancel_locked+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   26ba2:	461c      	mov	r4, r3
   26ba4:	e7e0      	b.n	26b68 <finalize_cancel_locked+0x18>
   26ba6:	4622      	mov	r2, r4
   26ba8:	4623      	mov	r3, r4
   26baa:	4614      	mov	r4, r2
   26bac:	b153      	cbz	r3, 26bc4 <finalize_cancel_locked+0x74>
		if (wc->work == work) {
   26bae:	685a      	ldr	r2, [r3, #4]
   26bb0:	42aa      	cmp	r2, r5
   26bb2:	d0db      	beq.n	26b6c <finalize_cancel_locked+0x1c>
			prev = &wc->node;
   26bb4:	461e      	mov	r6, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   26bb6:	2c00      	cmp	r4, #0
   26bb8:	d0f5      	beq.n	26ba6 <finalize_cancel_locked+0x56>
   26bba:	4622      	mov	r2, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   26bbc:	2c00      	cmp	r4, #0
   26bbe:	d0f3      	beq.n	26ba8 <finalize_cancel_locked+0x58>
	return node->next;
   26bc0:	6822      	ldr	r2, [r4, #0]
   26bc2:	e7f1      	b.n	26ba8 <finalize_cancel_locked+0x58>
}
   26bc4:	bd70      	pop	{r4, r5, r6, pc}
   26bc6:	bf00      	nop
   26bc8:	20003728 	.word	0x20003728

00026bcc <work_queue_main>:
{
   26bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26bd0:	b084      	sub	sp, #16
   26bd2:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
   26bd4:	e021      	b.n	26c1a <work_queue_main+0x4e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26bd6:	4c64      	ldr	r4, [pc, #400]	; (26d68 <work_queue_main+0x19c>)
   26bd8:	228e      	movs	r2, #142	; 0x8e
   26bda:	4621      	mov	r1, r4
   26bdc:	4863      	ldr	r0, [pc, #396]	; (26d6c <work_queue_main+0x1a0>)
   26bde:	f004 fa56 	bl	2b08e <assert_print>
   26be2:	218e      	movs	r1, #142	; 0x8e
   26be4:	4620      	mov	r0, r4
   26be6:	f004 fa4b 	bl	2b080 <assert_post_action>
   26bea:	e023      	b.n	26c34 <work_queue_main+0x68>
	return (*flagp & BIT(bit)) != 0U;
   26bec:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	*flagp &= ~BIT(bit);
   26bf0:	f023 0204 	bic.w	r2, r3, #4
   26bf4:	f8c5 2098 	str.w	r2, [r5, #152]	; 0x98
		} else if (flag_test_and_clear(&queue->flags,
   26bf8:	f013 0f04 	tst.w	r3, #4
   26bfc:	d175      	bne.n	26cea <work_queue_main+0x11e>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   26bfe:	2300      	movs	r3, #0
   26c00:	9302      	str	r3, [sp, #8]
   26c02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   26c06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   26c0a:	e9cd 2300 	strd	r2, r3, [sp]
   26c0e:	f105 0288 	add.w	r2, r5, #136	; 0x88
   26c12:	4631      	mov	r1, r6
   26c14:	4856      	ldr	r0, [pc, #344]	; (26d70 <work_queue_main+0x1a4>)
   26c16:	f001 fdf5 	bl	28804 <z_sched_wait>
	__asm__ volatile(
   26c1a:	f04f 0340 	mov.w	r3, #64	; 0x40
   26c1e:	f3ef 8611 	mrs	r6, BASEPRI
   26c22:	f383 8812 	msr	BASEPRI_MAX, r3
   26c26:	f3bf 8f6f 	isb	sy
   26c2a:	4851      	ldr	r0, [pc, #324]	; (26d70 <work_queue_main+0x1a4>)
   26c2c:	f7ff fa44 	bl	260b8 <z_spin_lock_valid>
   26c30:	2800      	cmp	r0, #0
   26c32:	d0d0      	beq.n	26bd6 <work_queue_main+0xa>
	z_spin_lock_set_owner(l);
   26c34:	484e      	ldr	r0, [pc, #312]	; (26d70 <work_queue_main+0x1a4>)
   26c36:	f7ff fa5f 	bl	260f8 <z_spin_lock_set_owner>
	return list->head;
   26c3a:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
   26c3e:	2c00      	cmp	r4, #0
   26c40:	d0d4      	beq.n	26bec <work_queue_main+0x20>
	return node->next;
   26c42:	6823      	ldr	r3, [r4, #0]
	list->head = node;
   26c44:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
	return list->tail;
   26c48:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   26c4c:	4294      	cmp	r4, r2
   26c4e:	d049      	beq.n	26ce4 <work_queue_main+0x118>
	*flagp |= BIT(bit);
   26c50:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   26c54:	f043 0302 	orr.w	r3, r3, #2
   26c58:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
   26c5c:	68e3      	ldr	r3, [r4, #12]
   26c5e:	f043 0301 	orr.w	r3, r3, #1
   26c62:	60e3      	str	r3, [r4, #12]
	*flagp &= ~BIT(bit);
   26c64:	f023 0304 	bic.w	r3, r3, #4
   26c68:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
   26c6a:	6867      	ldr	r7, [r4, #4]
		if (work == NULL) {
   26c6c:	2c00      	cmp	r4, #0
   26c6e:	d0c6      	beq.n	26bfe <work_queue_main+0x32>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26c70:	483f      	ldr	r0, [pc, #252]	; (26d70 <work_queue_main+0x1a4>)
   26c72:	f7ff fa31 	bl	260d8 <z_spin_unlock_valid>
   26c76:	2800      	cmp	r0, #0
   26c78:	d042      	beq.n	26d00 <work_queue_main+0x134>
	__asm__ volatile(
   26c7a:	f386 8811 	msr	BASEPRI, r6
   26c7e:	f3bf 8f6f 	isb	sy
		__ASSERT_NO_MSG(handler != NULL);
   26c82:	2f00      	cmp	r7, #0
   26c84:	d048      	beq.n	26d18 <work_queue_main+0x14c>
		handler(work);
   26c86:	4620      	mov	r0, r4
   26c88:	47b8      	blx	r7
	__asm__ volatile(
   26c8a:	f04f 0340 	mov.w	r3, #64	; 0x40
   26c8e:	f3ef 8611 	mrs	r6, BASEPRI
   26c92:	f383 8812 	msr	BASEPRI_MAX, r3
   26c96:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26c9a:	4835      	ldr	r0, [pc, #212]	; (26d70 <work_queue_main+0x1a4>)
   26c9c:	f7ff fa0c 	bl	260b8 <z_spin_lock_valid>
   26ca0:	2800      	cmp	r0, #0
   26ca2:	d046      	beq.n	26d32 <work_queue_main+0x166>
	z_spin_lock_set_owner(l);
   26ca4:	4832      	ldr	r0, [pc, #200]	; (26d70 <work_queue_main+0x1a4>)
   26ca6:	f7ff fa27 	bl	260f8 <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
   26caa:	68e3      	ldr	r3, [r4, #12]
   26cac:	f023 0301 	bic.w	r3, r3, #1
   26cb0:	60e3      	str	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   26cb2:	f013 0f02 	tst.w	r3, #2
   26cb6:	d147      	bne.n	26d48 <work_queue_main+0x17c>
	*flagp &= ~BIT(bit);
   26cb8:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   26cbc:	f023 0302 	bic.w	r3, r3, #2
   26cc0:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
	return (*flagp & BIT(bit)) != 0U;
   26cc4:	f3c3 2400 	ubfx	r4, r3, #8, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26cc8:	4829      	ldr	r0, [pc, #164]	; (26d70 <work_queue_main+0x1a4>)
   26cca:	f7ff fa05 	bl	260d8 <z_spin_unlock_valid>
   26cce:	2800      	cmp	r0, #0
   26cd0:	d03e      	beq.n	26d50 <work_queue_main+0x184>
	__asm__ volatile(
   26cd2:	f386 8811 	msr	BASEPRI, r6
   26cd6:	f3bf 8f6f 	isb	sy
		if (yield) {
   26cda:	2c00      	cmp	r4, #0
   26cdc:	d19d      	bne.n	26c1a <work_queue_main+0x4e>
	z_impl_k_yield();
   26cde:	f001 fb13 	bl	28308 <z_impl_k_yield>
}
   26ce2:	e79a      	b.n	26c1a <work_queue_main+0x4e>
	list->tail = node;
   26ce4:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
}
   26ce8:	e7b2      	b.n	26c50 <work_queue_main+0x84>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   26cea:	f105 0790 	add.w	r7, r5, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   26cee:	2200      	movs	r2, #0
   26cf0:	2101      	movs	r1, #1
   26cf2:	4638      	mov	r0, r7
   26cf4:	f001 fd26 	bl	28744 <z_sched_wake>
   26cf8:	2800      	cmp	r0, #0
   26cfa:	d1f8      	bne.n	26cee <work_queue_main+0x122>
		k_work_handler_t handler = NULL;
   26cfc:	2700      	movs	r7, #0
   26cfe:	e7b5      	b.n	26c6c <work_queue_main+0xa0>
   26d00:	f8df 8064 	ldr.w	r8, [pc, #100]	; 26d68 <work_queue_main+0x19c>
   26d04:	22b9      	movs	r2, #185	; 0xb9
   26d06:	4641      	mov	r1, r8
   26d08:	4818      	ldr	r0, [pc, #96]	; (26d6c <work_queue_main+0x1a0>)
   26d0a:	f004 f9c0 	bl	2b08e <assert_print>
   26d0e:	21b9      	movs	r1, #185	; 0xb9
   26d10:	4640      	mov	r0, r8
   26d12:	f004 f9b5 	bl	2b080 <assert_post_action>
   26d16:	e7b0      	b.n	26c7a <work_queue_main+0xae>
		__ASSERT_NO_MSG(handler != NULL);
   26d18:	4e16      	ldr	r6, [pc, #88]	; (26d74 <work_queue_main+0x1a8>)
   26d1a:	f240 229b 	movw	r2, #667	; 0x29b
   26d1e:	4631      	mov	r1, r6
   26d20:	4812      	ldr	r0, [pc, #72]	; (26d6c <work_queue_main+0x1a0>)
   26d22:	f004 f9b4 	bl	2b08e <assert_print>
   26d26:	f240 219b 	movw	r1, #667	; 0x29b
   26d2a:	4630      	mov	r0, r6
   26d2c:	f004 f9a8 	bl	2b080 <assert_post_action>
   26d30:	e7a9      	b.n	26c86 <work_queue_main+0xba>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26d32:	4f0d      	ldr	r7, [pc, #52]	; (26d68 <work_queue_main+0x19c>)
   26d34:	228e      	movs	r2, #142	; 0x8e
   26d36:	4639      	mov	r1, r7
   26d38:	480c      	ldr	r0, [pc, #48]	; (26d6c <work_queue_main+0x1a0>)
   26d3a:	f004 f9a8 	bl	2b08e <assert_print>
   26d3e:	218e      	movs	r1, #142	; 0x8e
   26d40:	4638      	mov	r0, r7
   26d42:	f004 f99d 	bl	2b080 <assert_post_action>
   26d46:	e7ad      	b.n	26ca4 <work_queue_main+0xd8>
			finalize_cancel_locked(work);
   26d48:	4620      	mov	r0, r4
   26d4a:	f7ff ff01 	bl	26b50 <finalize_cancel_locked>
   26d4e:	e7b3      	b.n	26cb8 <work_queue_main+0xec>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26d50:	4f05      	ldr	r7, [pc, #20]	; (26d68 <work_queue_main+0x19c>)
   26d52:	22b9      	movs	r2, #185	; 0xb9
   26d54:	4639      	mov	r1, r7
   26d56:	4805      	ldr	r0, [pc, #20]	; (26d6c <work_queue_main+0x1a0>)
   26d58:	f004 f999 	bl	2b08e <assert_print>
   26d5c:	21b9      	movs	r1, #185	; 0xb9
   26d5e:	4638      	mov	r0, r7
   26d60:	f004 f98e 	bl	2b080 <assert_post_action>
   26d64:	e7b5      	b.n	26cd2 <work_queue_main+0x106>
   26d66:	bf00      	nop
   26d68:	000319f0 	.word	0x000319f0
   26d6c:	000318f8 	.word	0x000318f8
   26d70:	20003724 	.word	0x20003724
   26d74:	000350a8 	.word	0x000350a8

00026d78 <k_work_init>:
{
   26d78:	b570      	push	{r4, r5, r6, lr}
   26d7a:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(work != NULL);
   26d7c:	4604      	mov	r4, r0
   26d7e:	b138      	cbz	r0, 26d90 <k_work_init+0x18>
	__ASSERT_NO_MSG(handler != NULL);
   26d80:	b18d      	cbz	r5, 26da6 <k_work_init+0x2e>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   26d82:	2300      	movs	r3, #0
   26d84:	6023      	str	r3, [r4, #0]
   26d86:	6063      	str	r3, [r4, #4]
   26d88:	60a3      	str	r3, [r4, #8]
   26d8a:	60e3      	str	r3, [r4, #12]
   26d8c:	6065      	str	r5, [r4, #4]
}
   26d8e:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(work != NULL);
   26d90:	4e0a      	ldr	r6, [pc, #40]	; (26dbc <k_work_init+0x44>)
   26d92:	2289      	movs	r2, #137	; 0x89
   26d94:	4631      	mov	r1, r6
   26d96:	480a      	ldr	r0, [pc, #40]	; (26dc0 <k_work_init+0x48>)
   26d98:	f004 f979 	bl	2b08e <assert_print>
   26d9c:	2189      	movs	r1, #137	; 0x89
   26d9e:	4630      	mov	r0, r6
   26da0:	f004 f96e 	bl	2b080 <assert_post_action>
   26da4:	e7ec      	b.n	26d80 <k_work_init+0x8>
	__ASSERT_NO_MSG(handler != NULL);
   26da6:	4e05      	ldr	r6, [pc, #20]	; (26dbc <k_work_init+0x44>)
   26da8:	228a      	movs	r2, #138	; 0x8a
   26daa:	4631      	mov	r1, r6
   26dac:	4804      	ldr	r0, [pc, #16]	; (26dc0 <k_work_init+0x48>)
   26dae:	f004 f96e 	bl	2b08e <assert_print>
   26db2:	218a      	movs	r1, #138	; 0x8a
   26db4:	4630      	mov	r0, r6
   26db6:	f004 f963 	bl	2b080 <assert_post_action>
   26dba:	e7e2      	b.n	26d82 <k_work_init+0xa>
   26dbc:	000350a8 	.word	0x000350a8
   26dc0:	000318f8 	.word	0x000318f8

00026dc4 <z_work_submit_to_queue>:
{
   26dc4:	b570      	push	{r4, r5, r6, lr}
   26dc6:	b082      	sub	sp, #8
   26dc8:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
   26dca:	460c      	mov	r4, r1
   26dcc:	b1f9      	cbz	r1, 26e0e <z_work_submit_to_queue+0x4a>
	__asm__ volatile(
   26dce:	f04f 0340 	mov.w	r3, #64	; 0x40
   26dd2:	f3ef 8611 	mrs	r6, BASEPRI
   26dd6:	f383 8812 	msr	BASEPRI_MAX, r3
   26dda:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26dde:	481d      	ldr	r0, [pc, #116]	; (26e54 <z_work_submit_to_queue+0x90>)
   26de0:	f7ff f96a 	bl	260b8 <z_spin_lock_valid>
   26de4:	b300      	cbz	r0, 26e28 <z_work_submit_to_queue+0x64>
	z_spin_lock_set_owner(l);
   26de6:	4d1b      	ldr	r5, [pc, #108]	; (26e54 <z_work_submit_to_queue+0x90>)
   26de8:	4628      	mov	r0, r5
   26dea:	f7ff f985 	bl	260f8 <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
   26dee:	a901      	add	r1, sp, #4
   26df0:	4620      	mov	r0, r4
   26df2:	f7ff fda3 	bl	2693c <submit_to_queue_locked>
   26df6:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26df8:	4628      	mov	r0, r5
   26dfa:	f7ff f96d 	bl	260d8 <z_spin_unlock_valid>
   26dfe:	b1f0      	cbz	r0, 26e3e <z_work_submit_to_queue+0x7a>
	__asm__ volatile(
   26e00:	f386 8811 	msr	BASEPRI, r6
   26e04:	f3bf 8f6f 	isb	sy
}
   26e08:	4620      	mov	r0, r4
   26e0a:	b002      	add	sp, #8
   26e0c:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(work != NULL);
   26e0e:	4d12      	ldr	r5, [pc, #72]	; (26e58 <z_work_submit_to_queue+0x94>)
   26e10:	f44f 72ba 	mov.w	r2, #372	; 0x174
   26e14:	4629      	mov	r1, r5
   26e16:	4811      	ldr	r0, [pc, #68]	; (26e5c <z_work_submit_to_queue+0x98>)
   26e18:	f004 f939 	bl	2b08e <assert_print>
   26e1c:	f44f 71ba 	mov.w	r1, #372	; 0x174
   26e20:	4628      	mov	r0, r5
   26e22:	f004 f92d 	bl	2b080 <assert_post_action>
   26e26:	e7d2      	b.n	26dce <z_work_submit_to_queue+0xa>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26e28:	4d0d      	ldr	r5, [pc, #52]	; (26e60 <z_work_submit_to_queue+0x9c>)
   26e2a:	228e      	movs	r2, #142	; 0x8e
   26e2c:	4629      	mov	r1, r5
   26e2e:	480b      	ldr	r0, [pc, #44]	; (26e5c <z_work_submit_to_queue+0x98>)
   26e30:	f004 f92d 	bl	2b08e <assert_print>
   26e34:	218e      	movs	r1, #142	; 0x8e
   26e36:	4628      	mov	r0, r5
   26e38:	f004 f922 	bl	2b080 <assert_post_action>
   26e3c:	e7d3      	b.n	26de6 <z_work_submit_to_queue+0x22>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26e3e:	4d08      	ldr	r5, [pc, #32]	; (26e60 <z_work_submit_to_queue+0x9c>)
   26e40:	22b9      	movs	r2, #185	; 0xb9
   26e42:	4629      	mov	r1, r5
   26e44:	4805      	ldr	r0, [pc, #20]	; (26e5c <z_work_submit_to_queue+0x98>)
   26e46:	f004 f922 	bl	2b08e <assert_print>
   26e4a:	21b9      	movs	r1, #185	; 0xb9
   26e4c:	4628      	mov	r0, r5
   26e4e:	f004 f917 	bl	2b080 <assert_post_action>
   26e52:	e7d5      	b.n	26e00 <z_work_submit_to_queue+0x3c>
   26e54:	20003724 	.word	0x20003724
   26e58:	000350a8 	.word	0x000350a8
   26e5c:	000318f8 	.word	0x000318f8
   26e60:	000319f0 	.word	0x000319f0

00026e64 <k_work_submit>:
{
   26e64:	b508      	push	{r3, lr}
   26e66:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   26e68:	4801      	ldr	r0, [pc, #4]	; (26e70 <k_work_submit+0xc>)
   26e6a:	f009 fe2e 	bl	30aca <k_work_submit_to_queue>
}
   26e6e:	bd08      	pop	{r3, pc}
   26e70:	20001fb0 	.word	0x20001fb0

00026e74 <k_work_queue_init>:
{
   26e74:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(queue != NULL);
   26e76:	4604      	mov	r4, r0
   26e78:	b128      	cbz	r0, 26e86 <k_work_queue_init+0x12>
	*queue = (struct k_work_q) {
   26e7a:	22a0      	movs	r2, #160	; 0xa0
   26e7c:	2100      	movs	r1, #0
   26e7e:	4620      	mov	r0, r4
   26e80:	f009 ff6b 	bl	30d5a <memset>
}
   26e84:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(queue != NULL);
   26e86:	4d06      	ldr	r5, [pc, #24]	; (26ea0 <k_work_queue_init+0x2c>)
   26e88:	f240 22b9 	movw	r2, #697	; 0x2b9
   26e8c:	4629      	mov	r1, r5
   26e8e:	4805      	ldr	r0, [pc, #20]	; (26ea4 <k_work_queue_init+0x30>)
   26e90:	f004 f8fd 	bl	2b08e <assert_print>
   26e94:	f240 21b9 	movw	r1, #697	; 0x2b9
   26e98:	4628      	mov	r0, r5
   26e9a:	f004 f8f1 	bl	2b080 <assert_post_action>
   26e9e:	e7ec      	b.n	26e7a <k_work_queue_init+0x6>
   26ea0:	000350a8 	.word	0x000350a8
   26ea4:	000318f8 	.word	0x000318f8

00026ea8 <k_work_queue_start>:
{
   26ea8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   26eac:	b089      	sub	sp, #36	; 0x24
   26eae:	460d      	mov	r5, r1
   26eb0:	4617      	mov	r7, r2
   26eb2:	4698      	mov	r8, r3
   26eb4:	9e10      	ldr	r6, [sp, #64]	; 0x40
	__ASSERT_NO_MSG(queue);
   26eb6:	4604      	mov	r4, r0
   26eb8:	2800      	cmp	r0, #0
   26eba:	d03e      	beq.n	26f3a <k_work_queue_start+0x92>
	__ASSERT_NO_MSG(stack);
   26ebc:	2d00      	cmp	r5, #0
   26ebe:	d04a      	beq.n	26f56 <k_work_queue_start+0xae>
	return (*flagp & BIT(bit)) != 0U;
   26ec0:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   26ec4:	f013 0f01 	tst.w	r3, #1
   26ec8:	d153      	bne.n	26f72 <k_work_queue_start+0xca>
	list->head = NULL;
   26eca:	2300      	movs	r3, #0
   26ecc:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	list->tail = NULL;
   26ed0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
   26ed4:	f104 0388 	add.w	r3, r4, #136	; 0x88
	list->head = (sys_dnode_t *)list;
   26ed8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	list->tail = (sys_dnode_t *)list;
   26edc:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
   26ee0:	f104 0390 	add.w	r3, r4, #144	; 0x90
	list->head = (sys_dnode_t *)list;
   26ee4:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
	list->tail = (sys_dnode_t *)list;
   26ee8:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
	if ((cfg != NULL) && cfg->no_yield) {
   26eec:	2e00      	cmp	r6, #0
   26eee:	d04e      	beq.n	26f8e <k_work_queue_start+0xe6>
   26ef0:	7933      	ldrb	r3, [r6, #4]
   26ef2:	2b00      	cmp	r3, #0
   26ef4:	d14d      	bne.n	26f92 <k_work_queue_start+0xea>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   26ef6:	2301      	movs	r3, #1
	*flagp = flags;
   26ef8:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   26efc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   26f00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   26f04:	e9cd 2306 	strd	r2, r3, [sp, #24]
   26f08:	2200      	movs	r2, #0
   26f0a:	9204      	str	r2, [sp, #16]
   26f0c:	f8cd 800c 	str.w	r8, [sp, #12]
   26f10:	9202      	str	r2, [sp, #8]
   26f12:	9201      	str	r2, [sp, #4]
   26f14:	9400      	str	r4, [sp, #0]
   26f16:	4b20      	ldr	r3, [pc, #128]	; (26f98 <k_work_queue_start+0xf0>)
   26f18:	463a      	mov	r2, r7
   26f1a:	4629      	mov	r1, r5
   26f1c:	4620      	mov	r0, r4
   26f1e:	f7ff f81b 	bl	25f58 <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   26f22:	b126      	cbz	r6, 26f2e <k_work_queue_start+0x86>
   26f24:	6831      	ldr	r1, [r6, #0]
   26f26:	b111      	cbz	r1, 26f2e <k_work_queue_start+0x86>
	return z_impl_k_thread_name_set(thread, str);
   26f28:	4620      	mov	r0, r4
   26f2a:	f009 fd00 	bl	3092e <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   26f2e:	4620      	mov	r0, r4
   26f30:	f009 fd02 	bl	30938 <z_impl_k_thread_start>
}
   26f34:	b009      	add	sp, #36	; 0x24
   26f36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__ASSERT_NO_MSG(queue);
   26f3a:	f8df 9060 	ldr.w	r9, [pc, #96]	; 26f9c <k_work_queue_start+0xf4>
   26f3e:	f44f 7232 	mov.w	r2, #712	; 0x2c8
   26f42:	4649      	mov	r1, r9
   26f44:	4816      	ldr	r0, [pc, #88]	; (26fa0 <k_work_queue_start+0xf8>)
   26f46:	f004 f8a2 	bl	2b08e <assert_print>
   26f4a:	f44f 7132 	mov.w	r1, #712	; 0x2c8
   26f4e:	4648      	mov	r0, r9
   26f50:	f004 f896 	bl	2b080 <assert_post_action>
   26f54:	e7b2      	b.n	26ebc <k_work_queue_start+0x14>
	__ASSERT_NO_MSG(stack);
   26f56:	f8df 9044 	ldr.w	r9, [pc, #68]	; 26f9c <k_work_queue_start+0xf4>
   26f5a:	f240 22c9 	movw	r2, #713	; 0x2c9
   26f5e:	4649      	mov	r1, r9
   26f60:	480f      	ldr	r0, [pc, #60]	; (26fa0 <k_work_queue_start+0xf8>)
   26f62:	f004 f894 	bl	2b08e <assert_print>
   26f66:	f240 21c9 	movw	r1, #713	; 0x2c9
   26f6a:	4648      	mov	r0, r9
   26f6c:	f004 f888 	bl	2b080 <assert_post_action>
   26f70:	e7a6      	b.n	26ec0 <k_work_queue_start+0x18>
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   26f72:	f8df 9028 	ldr.w	r9, [pc, #40]	; 26f9c <k_work_queue_start+0xf4>
   26f76:	f240 22ca 	movw	r2, #714	; 0x2ca
   26f7a:	4649      	mov	r1, r9
   26f7c:	4808      	ldr	r0, [pc, #32]	; (26fa0 <k_work_queue_start+0xf8>)
   26f7e:	f004 f886 	bl	2b08e <assert_print>
   26f82:	f240 21ca 	movw	r1, #714	; 0x2ca
   26f86:	4648      	mov	r0, r9
   26f88:	f004 f87a 	bl	2b080 <assert_post_action>
   26f8c:	e79d      	b.n	26eca <k_work_queue_start+0x22>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   26f8e:	2301      	movs	r3, #1
   26f90:	e7b2      	b.n	26ef8 <k_work_queue_start+0x50>
		flags |= K_WORK_QUEUE_NO_YIELD;
   26f92:	f240 1301 	movw	r3, #257	; 0x101
   26f96:	e7af      	b.n	26ef8 <k_work_queue_start+0x50>
   26f98:	00026bcd 	.word	0x00026bcd
   26f9c:	000350a8 	.word	0x000350a8
   26fa0:	000318f8 	.word	0x000318f8

00026fa4 <k_work_init_delayable>:
{
   26fa4:	b570      	push	{r4, r5, r6, lr}
   26fa6:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(dwork != NULL);
   26fa8:	4605      	mov	r5, r0
   26faa:	b150      	cbz	r0, 26fc2 <k_work_init_delayable+0x1e>
	__ASSERT_NO_MSG(handler != NULL);
   26fac:	b1b4      	cbz	r4, 26fdc <k_work_init_delayable+0x38>
	*dwork = (struct k_work_delayable){
   26fae:	2230      	movs	r2, #48	; 0x30
   26fb0:	2100      	movs	r1, #0
   26fb2:	4628      	mov	r0, r5
   26fb4:	f009 fed1 	bl	30d5a <memset>
   26fb8:	606c      	str	r4, [r5, #4]
   26fba:	f44f 7380 	mov.w	r3, #256	; 0x100
   26fbe:	60eb      	str	r3, [r5, #12]
}
   26fc0:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(dwork != NULL);
   26fc2:	4e0d      	ldr	r6, [pc, #52]	; (26ff8 <k_work_init_delayable+0x54>)
   26fc4:	f44f 7250 	mov.w	r2, #832	; 0x340
   26fc8:	4631      	mov	r1, r6
   26fca:	480c      	ldr	r0, [pc, #48]	; (26ffc <k_work_init_delayable+0x58>)
   26fcc:	f004 f85f 	bl	2b08e <assert_print>
   26fd0:	f44f 7150 	mov.w	r1, #832	; 0x340
   26fd4:	4630      	mov	r0, r6
   26fd6:	f004 f853 	bl	2b080 <assert_post_action>
   26fda:	e7e7      	b.n	26fac <k_work_init_delayable+0x8>
	__ASSERT_NO_MSG(handler != NULL);
   26fdc:	4e06      	ldr	r6, [pc, #24]	; (26ff8 <k_work_init_delayable+0x54>)
   26fde:	f240 3241 	movw	r2, #833	; 0x341
   26fe2:	4631      	mov	r1, r6
   26fe4:	4805      	ldr	r0, [pc, #20]	; (26ffc <k_work_init_delayable+0x58>)
   26fe6:	f004 f852 	bl	2b08e <assert_print>
   26fea:	f240 3141 	movw	r1, #833	; 0x341
   26fee:	4630      	mov	r0, r6
   26ff0:	f004 f846 	bl	2b080 <assert_post_action>
   26ff4:	e7db      	b.n	26fae <k_work_init_delayable+0xa>
   26ff6:	bf00      	nop
   26ff8:	000350a8 	.word	0x000350a8
   26ffc:	000318f8 	.word	0x000318f8

00027000 <k_work_delayable_busy_get>:
{
   27000:	b570      	push	{r4, r5, r6, lr}
   27002:	4604      	mov	r4, r0
	__asm__ volatile(
   27004:	f04f 0340 	mov.w	r3, #64	; 0x40
   27008:	f3ef 8611 	mrs	r6, BASEPRI
   2700c:	f383 8812 	msr	BASEPRI_MAX, r3
   27010:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27014:	4815      	ldr	r0, [pc, #84]	; (2706c <k_work_delayable_busy_get+0x6c>)
   27016:	f7ff f84f 	bl	260b8 <z_spin_lock_valid>
   2701a:	b180      	cbz	r0, 2703e <k_work_delayable_busy_get+0x3e>
	z_spin_lock_set_owner(l);
   2701c:	4d13      	ldr	r5, [pc, #76]	; (2706c <k_work_delayable_busy_get+0x6c>)
   2701e:	4628      	mov	r0, r5
   27020:	f7ff f86a 	bl	260f8 <z_spin_lock_set_owner>
	return *flagp;
   27024:	68e4      	ldr	r4, [r4, #12]
	return flags_get(&dwork->work.flags) & K_WORK_MASK;
   27026:	f004 040f 	and.w	r4, r4, #15
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2702a:	4628      	mov	r0, r5
   2702c:	f7ff f854 	bl	260d8 <z_spin_unlock_valid>
   27030:	b180      	cbz	r0, 27054 <k_work_delayable_busy_get+0x54>
	__asm__ volatile(
   27032:	f386 8811 	msr	BASEPRI, r6
   27036:	f3bf 8f6f 	isb	sy
}
   2703a:	4620      	mov	r0, r4
   2703c:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2703e:	4d0c      	ldr	r5, [pc, #48]	; (27070 <k_work_delayable_busy_get+0x70>)
   27040:	228e      	movs	r2, #142	; 0x8e
   27042:	4629      	mov	r1, r5
   27044:	480b      	ldr	r0, [pc, #44]	; (27074 <k_work_delayable_busy_get+0x74>)
   27046:	f004 f822 	bl	2b08e <assert_print>
   2704a:	218e      	movs	r1, #142	; 0x8e
   2704c:	4628      	mov	r0, r5
   2704e:	f004 f817 	bl	2b080 <assert_post_action>
   27052:	e7e3      	b.n	2701c <k_work_delayable_busy_get+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27054:	4d06      	ldr	r5, [pc, #24]	; (27070 <k_work_delayable_busy_get+0x70>)
   27056:	22b9      	movs	r2, #185	; 0xb9
   27058:	4629      	mov	r1, r5
   2705a:	4806      	ldr	r0, [pc, #24]	; (27074 <k_work_delayable_busy_get+0x74>)
   2705c:	f004 f817 	bl	2b08e <assert_print>
   27060:	21b9      	movs	r1, #185	; 0xb9
   27062:	4628      	mov	r0, r5
   27064:	f004 f80c 	bl	2b080 <assert_post_action>
   27068:	e7e3      	b.n	27032 <k_work_delayable_busy_get+0x32>
   2706a:	bf00      	nop
   2706c:	20003724 	.word	0x20003724
   27070:	000319f0 	.word	0x000319f0
   27074:	000318f8 	.word	0x000318f8

00027078 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   27078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2707c:	b082      	sub	sp, #8
   2707e:	9001      	str	r0, [sp, #4]
   27080:	4617      	mov	r7, r2
   27082:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   27084:	460c      	mov	r4, r1
   27086:	b1f9      	cbz	r1, 270c8 <k_work_schedule_for_queue+0x50>
	__asm__ volatile(
   27088:	f04f 0340 	mov.w	r3, #64	; 0x40
   2708c:	f3ef 8611 	mrs	r6, BASEPRI
   27090:	f383 8812 	msr	BASEPRI_MAX, r3
   27094:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27098:	4821      	ldr	r0, [pc, #132]	; (27120 <k_work_schedule_for_queue+0xa8>)
   2709a:	f7ff f80d 	bl	260b8 <z_spin_lock_valid>
   2709e:	b300      	cbz	r0, 270e2 <k_work_schedule_for_queue+0x6a>
	z_spin_lock_set_owner(l);
   270a0:	481f      	ldr	r0, [pc, #124]	; (27120 <k_work_schedule_for_queue+0xa8>)
   270a2:	f7ff f829 	bl	260f8 <z_spin_lock_set_owner>
	return *flagp;
   270a6:	68e1      	ldr	r1, [r4, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   270a8:	f011 0f0e 	tst.w	r1, #14
   270ac:	d025      	beq.n	270fa <k_work_schedule_for_queue+0x82>
	int ret = 0;
   270ae:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   270b0:	481b      	ldr	r0, [pc, #108]	; (27120 <k_work_schedule_for_queue+0xa8>)
   270b2:	f7ff f811 	bl	260d8 <z_spin_unlock_valid>
   270b6:	b340      	cbz	r0, 2710a <k_work_schedule_for_queue+0x92>
	__asm__ volatile(
   270b8:	f386 8811 	msr	BASEPRI, r6
   270bc:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   270c0:	4620      	mov	r0, r4
   270c2:	b002      	add	sp, #8
   270c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(dwork != NULL);
   270c8:	4e16      	ldr	r6, [pc, #88]	; (27124 <k_work_schedule_for_queue+0xac>)
   270ca:	f240 32b7 	movw	r2, #951	; 0x3b7
   270ce:	4631      	mov	r1, r6
   270d0:	4815      	ldr	r0, [pc, #84]	; (27128 <k_work_schedule_for_queue+0xb0>)
   270d2:	f003 ffdc 	bl	2b08e <assert_print>
   270d6:	f240 31b7 	movw	r1, #951	; 0x3b7
   270da:	4630      	mov	r0, r6
   270dc:	f003 ffd0 	bl	2b080 <assert_post_action>
   270e0:	e7d2      	b.n	27088 <k_work_schedule_for_queue+0x10>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   270e2:	f8df 8048 	ldr.w	r8, [pc, #72]	; 2712c <k_work_schedule_for_queue+0xb4>
   270e6:	228e      	movs	r2, #142	; 0x8e
   270e8:	4641      	mov	r1, r8
   270ea:	480f      	ldr	r0, [pc, #60]	; (27128 <k_work_schedule_for_queue+0xb0>)
   270ec:	f003 ffcf 	bl	2b08e <assert_print>
   270f0:	218e      	movs	r1, #142	; 0x8e
   270f2:	4640      	mov	r0, r8
   270f4:	f003 ffc4 	bl	2b080 <assert_post_action>
   270f8:	e7d2      	b.n	270a0 <k_work_schedule_for_queue+0x28>
		ret = schedule_for_queue_locked(&queue, dwork, delay);
   270fa:	463a      	mov	r2, r7
   270fc:	462b      	mov	r3, r5
   270fe:	4621      	mov	r1, r4
   27100:	a801      	add	r0, sp, #4
   27102:	f7ff fd0b 	bl	26b1c <schedule_for_queue_locked>
   27106:	4604      	mov	r4, r0
   27108:	e7d2      	b.n	270b0 <k_work_schedule_for_queue+0x38>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2710a:	4d08      	ldr	r5, [pc, #32]	; (2712c <k_work_schedule_for_queue+0xb4>)
   2710c:	22b9      	movs	r2, #185	; 0xb9
   2710e:	4629      	mov	r1, r5
   27110:	4805      	ldr	r0, [pc, #20]	; (27128 <k_work_schedule_for_queue+0xb0>)
   27112:	f003 ffbc 	bl	2b08e <assert_print>
   27116:	21b9      	movs	r1, #185	; 0xb9
   27118:	4628      	mov	r0, r5
   2711a:	f003 ffb1 	bl	2b080 <assert_post_action>
   2711e:	e7cb      	b.n	270b8 <k_work_schedule_for_queue+0x40>
   27120:	20003724 	.word	0x20003724
   27124:	000350a8 	.word	0x000350a8
   27128:	000318f8 	.word	0x000318f8
   2712c:	000319f0 	.word	0x000319f0

00027130 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   27130:	b508      	push	{r3, lr}
   27132:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   27134:	4801      	ldr	r0, [pc, #4]	; (2713c <k_work_schedule+0xc>)
   27136:	f7ff ff9f 	bl	27078 <k_work_schedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule, dwork, delay, ret);

	return ret;
}
   2713a:	bd08      	pop	{r3, pc}
   2713c:	20001fb0 	.word	0x20001fb0

00027140 <k_work_reschedule_for_queue>:

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   27140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27144:	b082      	sub	sp, #8
   27146:	9001      	str	r0, [sp, #4]
   27148:	4616      	mov	r6, r2
   2714a:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   2714c:	460c      	mov	r4, r1
   2714e:	b341      	cbz	r1, 271a2 <k_work_reschedule_for_queue+0x62>
	__asm__ volatile(
   27150:	f04f 0340 	mov.w	r3, #64	; 0x40
   27154:	f3ef 8711 	mrs	r7, BASEPRI
   27158:	f383 8812 	msr	BASEPRI_MAX, r3
   2715c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27160:	4824      	ldr	r0, [pc, #144]	; (271f4 <k_work_reschedule_for_queue+0xb4>)
   27162:	f7fe ffa9 	bl	260b8 <z_spin_lock_valid>
   27166:	b348      	cbz	r0, 271bc <k_work_reschedule_for_queue+0x7c>
	z_spin_lock_set_owner(l);
   27168:	4822      	ldr	r0, [pc, #136]	; (271f4 <k_work_reschedule_for_queue+0xb4>)
   2716a:	f7fe ffc5 	bl	260f8 <z_spin_lock_set_owner>
	return (*flagp & BIT(bit)) != 0U;
   2716e:	68e3      	ldr	r3, [r4, #12]
	*flagp &= ~BIT(bit);
   27170:	f023 0208 	bic.w	r2, r3, #8
   27174:	60e2      	str	r2, [r4, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   27176:	f013 0f08 	tst.w	r3, #8
   2717a:	d12b      	bne.n	271d4 <k_work_reschedule_for_queue+0x94>

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);

	/* Schedule the work item with the new parameters. */
	ret = schedule_for_queue_locked(&queue, dwork, delay);
   2717c:	4632      	mov	r2, r6
   2717e:	462b      	mov	r3, r5
   27180:	4621      	mov	r1, r4
   27182:	a801      	add	r0, sp, #4
   27184:	f7ff fcca 	bl	26b1c <schedule_for_queue_locked>
   27188:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2718a:	481a      	ldr	r0, [pc, #104]	; (271f4 <k_work_reschedule_for_queue+0xb4>)
   2718c:	f7fe ffa4 	bl	260d8 <z_spin_unlock_valid>
   27190:	b328      	cbz	r0, 271de <k_work_reschedule_for_queue+0x9e>
	__asm__ volatile(
   27192:	f387 8811 	msr	BASEPRI, r7
   27196:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   2719a:	4620      	mov	r0, r4
   2719c:	b002      	add	sp, #8
   2719e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(dwork != NULL);
   271a2:	4f15      	ldr	r7, [pc, #84]	; (271f8 <k_work_reschedule_for_queue+0xb8>)
   271a4:	f240 32db 	movw	r2, #987	; 0x3db
   271a8:	4639      	mov	r1, r7
   271aa:	4814      	ldr	r0, [pc, #80]	; (271fc <k_work_reschedule_for_queue+0xbc>)
   271ac:	f003 ff6f 	bl	2b08e <assert_print>
   271b0:	f240 31db 	movw	r1, #987	; 0x3db
   271b4:	4638      	mov	r0, r7
   271b6:	f003 ff63 	bl	2b080 <assert_post_action>
   271ba:	e7c9      	b.n	27150 <k_work_reschedule_for_queue+0x10>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   271bc:	f8df 8040 	ldr.w	r8, [pc, #64]	; 27200 <k_work_reschedule_for_queue+0xc0>
   271c0:	228e      	movs	r2, #142	; 0x8e
   271c2:	4641      	mov	r1, r8
   271c4:	480d      	ldr	r0, [pc, #52]	; (271fc <k_work_reschedule_for_queue+0xbc>)
   271c6:	f003 ff62 	bl	2b08e <assert_print>
   271ca:	218e      	movs	r1, #142	; 0x8e
   271cc:	4640      	mov	r0, r8
   271ce:	f003 ff57 	bl	2b080 <assert_post_action>
   271d2:	e7c9      	b.n	27168 <k_work_reschedule_for_queue+0x28>
		z_abort_timeout(&dwork->timeout);
   271d4:	f104 0010 	add.w	r0, r4, #16
   271d8:	f001 fc54 	bl	28a84 <z_abort_timeout>
		ret = true;
   271dc:	e7ce      	b.n	2717c <k_work_reschedule_for_queue+0x3c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   271de:	4d08      	ldr	r5, [pc, #32]	; (27200 <k_work_reschedule_for_queue+0xc0>)
   271e0:	22b9      	movs	r2, #185	; 0xb9
   271e2:	4629      	mov	r1, r5
   271e4:	4805      	ldr	r0, [pc, #20]	; (271fc <k_work_reschedule_for_queue+0xbc>)
   271e6:	f003 ff52 	bl	2b08e <assert_print>
   271ea:	21b9      	movs	r1, #185	; 0xb9
   271ec:	4628      	mov	r0, r5
   271ee:	f003 ff47 	bl	2b080 <assert_post_action>
   271f2:	e7ce      	b.n	27192 <k_work_reschedule_for_queue+0x52>
   271f4:	20003724 	.word	0x20003724
   271f8:	000350a8 	.word	0x000350a8
   271fc:	000318f8 	.word	0x000318f8
   27200:	000319f0 	.word	0x000319f0

00027204 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   27204:	b508      	push	{r3, lr}
   27206:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   27208:	4801      	ldr	r0, [pc, #4]	; (27210 <k_work_reschedule+0xc>)
   2720a:	f7ff ff99 	bl	27140 <k_work_reschedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule, dwork, delay, ret);

	return ret;
}
   2720e:	bd08      	pop	{r3, pc}
   27210:	20001fb0 	.word	0x20001fb0

00027214 <k_work_cancel_delayable>:

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   27214:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(dwork != NULL);
   27216:	4604      	mov	r4, r0
   27218:	b1e8      	cbz	r0, 27256 <k_work_cancel_delayable+0x42>
	__asm__ volatile(
   2721a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2721e:	f3ef 8611 	mrs	r6, BASEPRI
   27222:	f383 8812 	msr	BASEPRI_MAX, r3
   27226:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2722a:	481c      	ldr	r0, [pc, #112]	; (2729c <k_work_cancel_delayable+0x88>)
   2722c:	f7fe ff44 	bl	260b8 <z_spin_lock_valid>
   27230:	b1f0      	cbz	r0, 27270 <k_work_cancel_delayable+0x5c>
	z_spin_lock_set_owner(l);
   27232:	4d1a      	ldr	r5, [pc, #104]	; (2729c <k_work_cancel_delayable+0x88>)
   27234:	4628      	mov	r0, r5
   27236:	f7fe ff5f 	bl	260f8 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable, dwork);

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = cancel_delayable_async_locked(dwork);
   2723a:	4620      	mov	r0, r4
   2723c:	f009 fc34 	bl	30aa8 <cancel_delayable_async_locked>
   27240:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27242:	4628      	mov	r0, r5
   27244:	f7fe ff48 	bl	260d8 <z_spin_unlock_valid>
   27248:	b1e8      	cbz	r0, 27286 <k_work_cancel_delayable+0x72>
	__asm__ volatile(
   2724a:	f386 8811 	msr	BASEPRI, r6
   2724e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   27252:	4620      	mov	r0, r4
   27254:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(dwork != NULL);
   27256:	4d12      	ldr	r5, [pc, #72]	; (272a0 <k_work_cancel_delayable+0x8c>)
   27258:	f240 32fd 	movw	r2, #1021	; 0x3fd
   2725c:	4629      	mov	r1, r5
   2725e:	4811      	ldr	r0, [pc, #68]	; (272a4 <k_work_cancel_delayable+0x90>)
   27260:	f003 ff15 	bl	2b08e <assert_print>
   27264:	f240 31fd 	movw	r1, #1021	; 0x3fd
   27268:	4628      	mov	r0, r5
   2726a:	f003 ff09 	bl	2b080 <assert_post_action>
   2726e:	e7d4      	b.n	2721a <k_work_cancel_delayable+0x6>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27270:	4d0d      	ldr	r5, [pc, #52]	; (272a8 <k_work_cancel_delayable+0x94>)
   27272:	228e      	movs	r2, #142	; 0x8e
   27274:	4629      	mov	r1, r5
   27276:	480b      	ldr	r0, [pc, #44]	; (272a4 <k_work_cancel_delayable+0x90>)
   27278:	f003 ff09 	bl	2b08e <assert_print>
   2727c:	218e      	movs	r1, #142	; 0x8e
   2727e:	4628      	mov	r0, r5
   27280:	f003 fefe 	bl	2b080 <assert_post_action>
   27284:	e7d5      	b.n	27232 <k_work_cancel_delayable+0x1e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27286:	4d08      	ldr	r5, [pc, #32]	; (272a8 <k_work_cancel_delayable+0x94>)
   27288:	22b9      	movs	r2, #185	; 0xb9
   2728a:	4629      	mov	r1, r5
   2728c:	4805      	ldr	r0, [pc, #20]	; (272a4 <k_work_cancel_delayable+0x90>)
   2728e:	f003 fefe 	bl	2b08e <assert_print>
   27292:	21b9      	movs	r1, #185	; 0xb9
   27294:	4628      	mov	r0, r5
   27296:	f003 fef3 	bl	2b080 <assert_post_action>
   2729a:	e7d6      	b.n	2724a <k_work_cancel_delayable+0x36>
   2729c:	20003724 	.word	0x20003724
   272a0:	000350a8 	.word	0x000350a8
   272a4:	000318f8 	.word	0x000318f8
   272a8:	000319f0 	.word	0x000319f0

000272ac <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   272ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   272b0:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(dwork != NULL);
   272b2:	4605      	mov	r5, r0
   272b4:	2800      	cmp	r0, #0
   272b6:	d02c      	beq.n	27312 <k_work_cancel_delayable_sync+0x66>
	__ASSERT_NO_MSG(sync != NULL);
   272b8:	2c00      	cmp	r4, #0
   272ba:	d037      	beq.n	2732c <k_work_cancel_delayable_sync+0x80>
	__ASSERT_NO_MSG(!k_is_in_isr());
   272bc:	f009 fb31 	bl	30922 <k_is_in_isr>
   272c0:	2800      	cmp	r0, #0
   272c2:	d140      	bne.n	27346 <k_work_cancel_delayable_sync+0x9a>
	__asm__ volatile(
   272c4:	f04f 0340 	mov.w	r3, #64	; 0x40
   272c8:	f3ef 8711 	mrs	r7, BASEPRI
   272cc:	f383 8812 	msr	BASEPRI_MAX, r3
   272d0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   272d4:	4837      	ldr	r0, [pc, #220]	; (273b4 <k_work_cancel_delayable_sync+0x108>)
   272d6:	f7fe feef 	bl	260b8 <z_spin_lock_valid>
   272da:	2800      	cmp	r0, #0
   272dc:	d040      	beq.n	27360 <k_work_cancel_delayable_sync+0xb4>
	z_spin_lock_set_owner(l);
   272de:	4835      	ldr	r0, [pc, #212]	; (273b4 <k_work_cancel_delayable_sync+0x108>)
   272e0:	f7fe ff0a 	bl	260f8 <z_spin_lock_set_owner>
	return *flagp;
   272e4:	68eb      	ldr	r3, [r5, #12]
	return flags_get(&dwork->work.flags) & K_WORK_MASK;
   272e6:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   272ea:	2b00      	cmp	r3, #0
   272ec:	bf14      	ite	ne
   272ee:	2601      	movne	r6, #1
   272f0:	2600      	moveq	r6, #0
	bool need_wait = false;

	if (pending) {
   272f2:	d140      	bne.n	27376 <k_work_cancel_delayable_sync+0xca>
	bool need_wait = false;
   272f4:	2500      	movs	r5, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   272f6:	482f      	ldr	r0, [pc, #188]	; (273b4 <k_work_cancel_delayable_sync+0x108>)
   272f8:	f7fe feee 	bl	260d8 <z_spin_unlock_valid>
   272fc:	2800      	cmp	r0, #0
   272fe:	d043      	beq.n	27388 <k_work_cancel_delayable_sync+0xdc>
	__asm__ volatile(
   27300:	f387 8811 	msr	BASEPRI, r7
   27304:	f3bf 8f6f 	isb	sy
		need_wait = cancel_sync_locked(&dwork->work, canceller);
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   27308:	2d00      	cmp	r5, #0
   2730a:	d149      	bne.n	273a0 <k_work_cancel_delayable_sync+0xf4>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   2730c:	4630      	mov	r0, r6
   2730e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(dwork != NULL);
   27312:	4e29      	ldr	r6, [pc, #164]	; (273b8 <k_work_cancel_delayable_sync+0x10c>)
   27314:	f240 420e 	movw	r2, #1038	; 0x40e
   27318:	4631      	mov	r1, r6
   2731a:	4828      	ldr	r0, [pc, #160]	; (273bc <k_work_cancel_delayable_sync+0x110>)
   2731c:	f003 feb7 	bl	2b08e <assert_print>
   27320:	f240 410e 	movw	r1, #1038	; 0x40e
   27324:	4630      	mov	r0, r6
   27326:	f003 feab 	bl	2b080 <assert_post_action>
   2732a:	e7c5      	b.n	272b8 <k_work_cancel_delayable_sync+0xc>
	__ASSERT_NO_MSG(sync != NULL);
   2732c:	4e22      	ldr	r6, [pc, #136]	; (273b8 <k_work_cancel_delayable_sync+0x10c>)
   2732e:	f240 420f 	movw	r2, #1039	; 0x40f
   27332:	4631      	mov	r1, r6
   27334:	4821      	ldr	r0, [pc, #132]	; (273bc <k_work_cancel_delayable_sync+0x110>)
   27336:	f003 feaa 	bl	2b08e <assert_print>
   2733a:	f240 410f 	movw	r1, #1039	; 0x40f
   2733e:	4630      	mov	r0, r6
   27340:	f003 fe9e 	bl	2b080 <assert_post_action>
   27344:	e7ba      	b.n	272bc <k_work_cancel_delayable_sync+0x10>
	__ASSERT_NO_MSG(!k_is_in_isr());
   27346:	4e1c      	ldr	r6, [pc, #112]	; (273b8 <k_work_cancel_delayable_sync+0x10c>)
   27348:	f44f 6282 	mov.w	r2, #1040	; 0x410
   2734c:	4631      	mov	r1, r6
   2734e:	481b      	ldr	r0, [pc, #108]	; (273bc <k_work_cancel_delayable_sync+0x110>)
   27350:	f003 fe9d 	bl	2b08e <assert_print>
   27354:	f44f 6182 	mov.w	r1, #1040	; 0x410
   27358:	4630      	mov	r0, r6
   2735a:	f003 fe91 	bl	2b080 <assert_post_action>
   2735e:	e7b1      	b.n	272c4 <k_work_cancel_delayable_sync+0x18>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27360:	4e17      	ldr	r6, [pc, #92]	; (273c0 <k_work_cancel_delayable_sync+0x114>)
   27362:	228e      	movs	r2, #142	; 0x8e
   27364:	4631      	mov	r1, r6
   27366:	4815      	ldr	r0, [pc, #84]	; (273bc <k_work_cancel_delayable_sync+0x110>)
   27368:	f003 fe91 	bl	2b08e <assert_print>
   2736c:	218e      	movs	r1, #142	; 0x8e
   2736e:	4630      	mov	r0, r6
   27370:	f003 fe86 	bl	2b080 <assert_post_action>
   27374:	e7b3      	b.n	272de <k_work_cancel_delayable_sync+0x32>
		(void)cancel_delayable_async_locked(dwork);
   27376:	4628      	mov	r0, r5
   27378:	f009 fb96 	bl	30aa8 <cancel_delayable_async_locked>
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   2737c:	4621      	mov	r1, r4
   2737e:	4628      	mov	r0, r5
   27380:	f7ff fbaa 	bl	26ad8 <cancel_sync_locked>
   27384:	4605      	mov	r5, r0
   27386:	e7b6      	b.n	272f6 <k_work_cancel_delayable_sync+0x4a>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27388:	f8df 8034 	ldr.w	r8, [pc, #52]	; 273c0 <k_work_cancel_delayable_sync+0x114>
   2738c:	22b9      	movs	r2, #185	; 0xb9
   2738e:	4641      	mov	r1, r8
   27390:	480a      	ldr	r0, [pc, #40]	; (273bc <k_work_cancel_delayable_sync+0x110>)
   27392:	f003 fe7c 	bl	2b08e <assert_print>
   27396:	21b9      	movs	r1, #185	; 0xb9
   27398:	4640      	mov	r0, r8
   2739a:	f003 fe71 	bl	2b080 <assert_post_action>
   2739e:	e7af      	b.n	27300 <k_work_cancel_delayable_sync+0x54>
		k_sem_take(&canceller->sem, K_FOREVER);
   273a0:	f104 0008 	add.w	r0, r4, #8
	return z_impl_k_sem_take(sem, timeout);
   273a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   273a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   273ac:	f7ff f9fc 	bl	267a8 <z_impl_k_sem_take>
   273b0:	e7ac      	b.n	2730c <k_work_cancel_delayable_sync+0x60>
   273b2:	bf00      	nop
   273b4:	20003724 	.word	0x20003724
   273b8:	000350a8 	.word	0x000350a8
   273bc:	000318f8 	.word	0x000318f8
   273c0:	000319f0 	.word	0x000319f0

000273c4 <pended_on_thread>:
}
#include <syscalls/k_thread_resume_mrsh.c>
#endif

static _wait_q_t *pended_on_thread(struct k_thread *thread)
{
   273c4:	b538      	push	{r3, r4, r5, lr}
   273c6:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   273c8:	6883      	ldr	r3, [r0, #8]
   273ca:	b10b      	cbz	r3, 273d0 <pended_on_thread+0xc>

	return thread->base.pended_on;
}
   273cc:	68a0      	ldr	r0, [r4, #8]
   273ce:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(thread->base.pended_on);
   273d0:	4d06      	ldr	r5, [pc, #24]	; (273ec <pended_on_thread+0x28>)
   273d2:	f44f 7235 	mov.w	r2, #724	; 0x2d4
   273d6:	4629      	mov	r1, r5
   273d8:	4805      	ldr	r0, [pc, #20]	; (273f0 <pended_on_thread+0x2c>)
   273da:	f003 fe58 	bl	2b08e <assert_print>
   273de:	f44f 7135 	mov.w	r1, #724	; 0x2d4
   273e2:	4628      	mov	r0, r5
   273e4:	f003 fe4c 	bl	2b080 <assert_post_action>
   273e8:	e7f0      	b.n	273cc <pended_on_thread+0x8>
   273ea:	bf00      	nop
   273ec:	000350cc 	.word	0x000350cc
   273f0:	000318f8 	.word	0x000318f8

000273f4 <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   273f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   273f8:	bf08      	it	eq
   273fa:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   273fe:	d100      	bne.n	27402 <add_thread_timeout+0xe>
   27400:	4770      	bx	lr
{
   27402:	b508      	push	{r3, lr}
   27404:	4902      	ldr	r1, [pc, #8]	; (27410 <add_thread_timeout+0x1c>)
   27406:	3018      	adds	r0, #24
   27408:	f001 fa72 	bl	288f0 <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
   2740c:	bd08      	pop	{r3, pc}
   2740e:	bf00      	nop
   27410:	00027bd1 	.word	0x00027bd1

00027414 <z_reset_time_slice>:
{
   27414:	b510      	push	{r4, lr}
	int ret = slice_ticks;
   27416:	4b07      	ldr	r3, [pc, #28]	; (27434 <z_reset_time_slice+0x20>)
   27418:	681c      	ldr	r4, [r3, #0]
	if (slice_time(curr) != 0) {
   2741a:	b904      	cbnz	r4, 2741e <z_reset_time_slice+0xa>
}
   2741c:	bd10      	pop	{r4, pc}
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   2741e:	f7fa ff5b 	bl	222d8 <sys_clock_elapsed>
   27422:	4404      	add	r4, r0
   27424:	4b04      	ldr	r3, [pc, #16]	; (27438 <z_reset_time_slice+0x24>)
   27426:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   27428:	2100      	movs	r1, #0
   2742a:	4b02      	ldr	r3, [pc, #8]	; (27434 <z_reset_time_slice+0x20>)
   2742c:	6818      	ldr	r0, [r3, #0]
   2742e:	f001 fbb1 	bl	28b94 <z_set_timeout_expiry>
}
   27432:	e7f3      	b.n	2741c <z_reset_time_slice+0x8>
   27434:	2000373c 	.word	0x2000373c
   27438:	200036f4 	.word	0x200036f4

0002743c <k_sched_time_slice_set>:
{
   2743c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27440:	4604      	mov	r4, r0
   27442:	460d      	mov	r5, r1
	LOCKED(&sched_spinlock) {
   27444:	2700      	movs	r7, #0
	__asm__ volatile(
   27446:	f04f 0340 	mov.w	r3, #64	; 0x40
   2744a:	f3ef 8611 	mrs	r6, BASEPRI
   2744e:	f383 8812 	msr	BASEPRI_MAX, r3
   27452:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27456:	4825      	ldr	r0, [pc, #148]	; (274ec <k_sched_time_slice_set+0xb0>)
   27458:	f7fe fe2e 	bl	260b8 <z_spin_lock_valid>
   2745c:	b118      	cbz	r0, 27466 <k_sched_time_slice_set+0x2a>
	z_spin_lock_set_owner(l);
   2745e:	4823      	ldr	r0, [pc, #140]	; (274ec <k_sched_time_slice_set+0xb0>)
   27460:	f7fe fe4a 	bl	260f8 <z_spin_lock_set_owner>
	return k;
   27464:	e01e      	b.n	274a4 <k_sched_time_slice_set+0x68>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27466:	f8df 8088 	ldr.w	r8, [pc, #136]	; 274f0 <k_sched_time_slice_set+0xb4>
   2746a:	228e      	movs	r2, #142	; 0x8e
   2746c:	4641      	mov	r1, r8
   2746e:	4821      	ldr	r0, [pc, #132]	; (274f4 <k_sched_time_slice_set+0xb8>)
   27470:	f003 fe0d 	bl	2b08e <assert_print>
   27474:	218e      	movs	r1, #142	; 0x8e
   27476:	4640      	mov	r0, r8
   27478:	f003 fe02 	bl	2b080 <assert_post_action>
   2747c:	e7ef      	b.n	2745e <k_sched_time_slice_set+0x22>
			slice_ticks = MAX(2, slice_ticks);
   2747e:	2802      	cmp	r0, #2
   27480:	bfb8      	it	lt
   27482:	2002      	movlt	r0, #2
   27484:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   27486:	4b1c      	ldr	r3, [pc, #112]	; (274f8 <k_sched_time_slice_set+0xbc>)
   27488:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
   2748a:	4b1c      	ldr	r3, [pc, #112]	; (274fc <k_sched_time_slice_set+0xc0>)
   2748c:	6898      	ldr	r0, [r3, #8]
   2748e:	f7ff ffc1 	bl	27414 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27492:	4816      	ldr	r0, [pc, #88]	; (274ec <k_sched_time_slice_set+0xb0>)
   27494:	f7fe fe20 	bl	260d8 <z_spin_unlock_valid>
   27498:	b1d0      	cbz	r0, 274d0 <k_sched_time_slice_set+0x94>
	__asm__ volatile(
   2749a:	f386 8811 	msr	BASEPRI, r6
   2749e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   274a2:	2701      	movs	r7, #1
   274a4:	b9ff      	cbnz	r7, 274e6 <k_sched_time_slice_set+0xaa>
		_current_cpu->slice_ticks = 0;
   274a6:	4b15      	ldr	r3, [pc, #84]	; (274fc <k_sched_time_slice_set+0xc0>)
   274a8:	2200      	movs	r2, #0
   274aa:	611a      	str	r2, [r3, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
   274ac:	0c61      	lsrs	r1, r4, #17
   274ae:	03e3      	lsls	r3, r4, #15
   274b0:	f240 30e7 	movw	r0, #999	; 0x3e7
   274b4:	1818      	adds	r0, r3, r0
   274b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   274ba:	f04f 0300 	mov.w	r3, #0
   274be:	f141 0100 	adc.w	r1, r1, #0
   274c2:	f7d9 fd95 	bl	ff0 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   274c6:	4b0e      	ldr	r3, [pc, #56]	; (27500 <k_sched_time_slice_set+0xc4>)
   274c8:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   274ca:	2c00      	cmp	r4, #0
   274cc:	dcd7      	bgt.n	2747e <k_sched_time_slice_set+0x42>
   274ce:	e7da      	b.n	27486 <k_sched_time_slice_set+0x4a>
   274d0:	4f07      	ldr	r7, [pc, #28]	; (274f0 <k_sched_time_slice_set+0xb4>)
   274d2:	22b9      	movs	r2, #185	; 0xb9
   274d4:	4639      	mov	r1, r7
   274d6:	4807      	ldr	r0, [pc, #28]	; (274f4 <k_sched_time_slice_set+0xb8>)
   274d8:	f003 fdd9 	bl	2b08e <assert_print>
   274dc:	21b9      	movs	r1, #185	; 0xb9
   274de:	4638      	mov	r0, r7
   274e0:	f003 fdce 	bl	2b080 <assert_post_action>
   274e4:	e7d9      	b.n	2749a <k_sched_time_slice_set+0x5e>
}
   274e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   274ea:	bf00      	nop
   274ec:	20003734 	.word	0x20003734
   274f0:	000319f0 	.word	0x000319f0
   274f4:	000318f8 	.word	0x000318f8
   274f8:	20003738 	.word	0x20003738
   274fc:	200036f4 	.word	0x200036f4
   27500:	2000373c 	.word	0x2000373c

00027504 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
   27504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27506:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   27508:	2500      	movs	r5, #0
	__asm__ volatile(
   2750a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2750e:	f3ef 8611 	mrs	r6, BASEPRI
   27512:	f383 8812 	msr	BASEPRI_MAX, r3
   27516:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2751a:	481b      	ldr	r0, [pc, #108]	; (27588 <z_unpend_thread_no_timeout+0x84>)
   2751c:	f7fe fdcc 	bl	260b8 <z_spin_lock_valid>
   27520:	b118      	cbz	r0, 2752a <z_unpend_thread_no_timeout+0x26>
	z_spin_lock_set_owner(l);
   27522:	4819      	ldr	r0, [pc, #100]	; (27588 <z_unpend_thread_no_timeout+0x84>)
   27524:	f7fe fde8 	bl	260f8 <z_spin_lock_set_owner>
	return k;
   27528:	e00f      	b.n	2754a <z_unpend_thread_no_timeout+0x46>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2752a:	4f18      	ldr	r7, [pc, #96]	; (2758c <z_unpend_thread_no_timeout+0x88>)
   2752c:	228e      	movs	r2, #142	; 0x8e
   2752e:	4639      	mov	r1, r7
   27530:	4817      	ldr	r0, [pc, #92]	; (27590 <z_unpend_thread_no_timeout+0x8c>)
   27532:	f003 fdac 	bl	2b08e <assert_print>
   27536:	218e      	movs	r1, #142	; 0x8e
   27538:	4638      	mov	r0, r7
   2753a:	f003 fda1 	bl	2b080 <assert_post_action>
   2753e:	e7f0      	b.n	27522 <z_unpend_thread_no_timeout+0x1e>
	__asm__ volatile(
   27540:	f386 8811 	msr	BASEPRI, r6
   27544:	f3bf 8f6f 	isb	sy
   27548:	2501      	movs	r5, #1
   2754a:	b9dd      	cbnz	r5, 27584 <z_unpend_thread_no_timeout+0x80>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   2754c:	4620      	mov	r0, r4
   2754e:	f7ff ff39 	bl	273c4 <pended_on_thread>
   27552:	4621      	mov	r1, r4
   27554:	f000 f8bc 	bl	276d0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   27558:	7b63      	ldrb	r3, [r4, #13]
   2755a:	f023 0302 	bic.w	r3, r3, #2
   2755e:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   27560:	2300      	movs	r3, #0
   27562:	60a3      	str	r3, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27564:	4808      	ldr	r0, [pc, #32]	; (27588 <z_unpend_thread_no_timeout+0x84>)
   27566:	f7fe fdb7 	bl	260d8 <z_spin_unlock_valid>
   2756a:	2800      	cmp	r0, #0
   2756c:	d1e8      	bne.n	27540 <z_unpend_thread_no_timeout+0x3c>
   2756e:	4d07      	ldr	r5, [pc, #28]	; (2758c <z_unpend_thread_no_timeout+0x88>)
   27570:	22b9      	movs	r2, #185	; 0xb9
   27572:	4629      	mov	r1, r5
   27574:	4806      	ldr	r0, [pc, #24]	; (27590 <z_unpend_thread_no_timeout+0x8c>)
   27576:	f003 fd8a 	bl	2b08e <assert_print>
   2757a:	21b9      	movs	r1, #185	; 0xb9
   2757c:	4628      	mov	r0, r5
   2757e:	f003 fd7f 	bl	2b080 <assert_post_action>
   27582:	e7dd      	b.n	27540 <z_unpend_thread_no_timeout+0x3c>
		unpend_thread_no_timeout(thread);
	}
}
   27584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   27586:	bf00      	nop
   27588:	20003734 	.word	0x20003734
   2758c:	000319f0 	.word	0x000319f0
   27590:	000318f8 	.word	0x000318f8

00027594 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   27594:	b538      	push	{r3, r4, r5, lr}
	if (resched(key.key) && need_swap()) {
   27596:	460c      	mov	r4, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   27598:	b921      	cbnz	r1, 275a4 <z_reschedule+0x10>
   2759a:	f3ef 8305 	mrs	r3, IPSR
   2759e:	b913      	cbnz	r3, 275a6 <z_reschedule+0x12>
   275a0:	2101      	movs	r1, #1
   275a2:	e000      	b.n	275a6 <z_reschedule+0x12>
   275a4:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
   275a6:	f011 0f01 	tst.w	r1, #1
   275aa:	d016      	beq.n	275da <z_reschedule+0x46>
	new_thread = _kernel.ready_q.cache;
   275ac:	4b14      	ldr	r3, [pc, #80]	; (27600 <z_reschedule+0x6c>)
   275ae:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
   275b0:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
   275b2:	429a      	cmp	r2, r3
   275b4:	d011      	beq.n	275da <z_reschedule+0x46>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   275b6:	f7fe fd8f 	bl	260d8 <z_spin_unlock_valid>
   275ba:	b118      	cbz	r0, 275c4 <z_reschedule+0x30>
	ret = arch_swap(key);
   275bc:	4620      	mov	r0, r4
   275be:	f7ee fa79 	bl	15ab4 <arch_swap>
		z_swap(lock, key);
   275c2:	e011      	b.n	275e8 <z_reschedule+0x54>
   275c4:	4d0f      	ldr	r5, [pc, #60]	; (27604 <z_reschedule+0x70>)
   275c6:	22d0      	movs	r2, #208	; 0xd0
   275c8:	4629      	mov	r1, r5
   275ca:	480f      	ldr	r0, [pc, #60]	; (27608 <z_reschedule+0x74>)
   275cc:	f003 fd5f 	bl	2b08e <assert_print>
   275d0:	21d0      	movs	r1, #208	; 0xd0
   275d2:	4628      	mov	r0, r5
   275d4:	f003 fd54 	bl	2b080 <assert_post_action>
   275d8:	e7f0      	b.n	275bc <z_reschedule+0x28>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   275da:	f7fe fd7d 	bl	260d8 <z_spin_unlock_valid>
   275de:	b120      	cbz	r0, 275ea <z_reschedule+0x56>
   275e0:	f384 8811 	msr	BASEPRI, r4
   275e4:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
   275e8:	bd38      	pop	{r3, r4, r5, pc}
   275ea:	4d06      	ldr	r5, [pc, #24]	; (27604 <z_reschedule+0x70>)
   275ec:	22b9      	movs	r2, #185	; 0xb9
   275ee:	4629      	mov	r1, r5
   275f0:	4805      	ldr	r0, [pc, #20]	; (27608 <z_reschedule+0x74>)
   275f2:	f003 fd4c 	bl	2b08e <assert_print>
   275f6:	21b9      	movs	r1, #185	; 0xb9
   275f8:	4628      	mov	r0, r5
   275fa:	f003 fd41 	bl	2b080 <assert_post_action>
   275fe:	e7ef      	b.n	275e0 <z_reschedule+0x4c>
   27600:	200036f4 	.word	0x200036f4
   27604:	000319f0 	.word	0x000319f0
   27608:	000318f8 	.word	0x000318f8

0002760c <k_sched_lock>:
		signal_pending_ipi();
	}
}

void k_sched_lock(void)
{
   2760c:	b570      	push	{r4, r5, r6, lr}
	LOCKED(&sched_spinlock) {
   2760e:	2400      	movs	r4, #0
	__asm__ volatile(
   27610:	f04f 0340 	mov.w	r3, #64	; 0x40
   27614:	f3ef 8511 	mrs	r5, BASEPRI
   27618:	f383 8812 	msr	BASEPRI_MAX, r3
   2761c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27620:	4826      	ldr	r0, [pc, #152]	; (276bc <k_sched_lock+0xb0>)
   27622:	f7fe fd49 	bl	260b8 <z_spin_lock_valid>
   27626:	b118      	cbz	r0, 27630 <k_sched_lock+0x24>
	z_spin_lock_set_owner(l);
   27628:	4824      	ldr	r0, [pc, #144]	; (276bc <k_sched_lock+0xb0>)
   2762a:	f7fe fd65 	bl	260f8 <z_spin_lock_set_owner>
	return k;
   2762e:	e01d      	b.n	2766c <k_sched_lock+0x60>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27630:	4e23      	ldr	r6, [pc, #140]	; (276c0 <k_sched_lock+0xb4>)
   27632:	228e      	movs	r2, #142	; 0x8e
   27634:	4631      	mov	r1, r6
   27636:	4823      	ldr	r0, [pc, #140]	; (276c4 <k_sched_lock+0xb8>)
   27638:	f003 fd29 	bl	2b08e <assert_print>
   2763c:	218e      	movs	r1, #142	; 0x8e
   2763e:	4630      	mov	r0, r6
   27640:	f003 fd1e 	bl	2b080 <assert_post_action>
   27644:	e7f0      	b.n	27628 <k_sched_lock+0x1c>
	__ASSERT(_current->base.sched_locked != 1U, "");
   27646:	4b20      	ldr	r3, [pc, #128]	; (276c8 <k_sched_lock+0xbc>)
   27648:	689b      	ldr	r3, [r3, #8]
   2764a:	7bdb      	ldrb	r3, [r3, #15]
   2764c:	2b01      	cmp	r3, #1
   2764e:	d01d      	beq.n	2768c <k_sched_lock+0x80>
	--_current->base.sched_locked;
   27650:	4b1d      	ldr	r3, [pc, #116]	; (276c8 <k_sched_lock+0xbc>)
   27652:	689a      	ldr	r2, [r3, #8]
   27654:	7bd3      	ldrb	r3, [r2, #15]
   27656:	3b01      	subs	r3, #1
   27658:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2765a:	4818      	ldr	r0, [pc, #96]	; (276bc <k_sched_lock+0xb0>)
   2765c:	f7fe fd3c 	bl	260d8 <z_spin_unlock_valid>
   27660:	b1f8      	cbz	r0, 276a2 <k_sched_lock+0x96>
	__asm__ volatile(
   27662:	f385 8811 	msr	BASEPRI, r5
   27666:	f3bf 8f6f 	isb	sy
   2766a:	2401      	movs	r4, #1
   2766c:	bb24      	cbnz	r4, 276b8 <k_sched_lock+0xac>
   2766e:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   27672:	2b00      	cmp	r3, #0
   27674:	d0e7      	beq.n	27646 <k_sched_lock+0x3a>
   27676:	4c15      	ldr	r4, [pc, #84]	; (276cc <k_sched_lock+0xc0>)
   27678:	22fd      	movs	r2, #253	; 0xfd
   2767a:	4621      	mov	r1, r4
   2767c:	4811      	ldr	r0, [pc, #68]	; (276c4 <k_sched_lock+0xb8>)
   2767e:	f003 fd06 	bl	2b08e <assert_print>
   27682:	21fd      	movs	r1, #253	; 0xfd
   27684:	4620      	mov	r0, r4
   27686:	f003 fcfb 	bl	2b080 <assert_post_action>
   2768a:	e7dc      	b.n	27646 <k_sched_lock+0x3a>
	__ASSERT(_current->base.sched_locked != 1U, "");
   2768c:	4c0f      	ldr	r4, [pc, #60]	; (276cc <k_sched_lock+0xc0>)
   2768e:	22fe      	movs	r2, #254	; 0xfe
   27690:	4621      	mov	r1, r4
   27692:	480c      	ldr	r0, [pc, #48]	; (276c4 <k_sched_lock+0xb8>)
   27694:	f003 fcfb 	bl	2b08e <assert_print>
   27698:	21fe      	movs	r1, #254	; 0xfe
   2769a:	4620      	mov	r0, r4
   2769c:	f003 fcf0 	bl	2b080 <assert_post_action>
   276a0:	e7d6      	b.n	27650 <k_sched_lock+0x44>
   276a2:	4c07      	ldr	r4, [pc, #28]	; (276c0 <k_sched_lock+0xb4>)
   276a4:	22b9      	movs	r2, #185	; 0xb9
   276a6:	4621      	mov	r1, r4
   276a8:	4806      	ldr	r0, [pc, #24]	; (276c4 <k_sched_lock+0xb8>)
   276aa:	f003 fcf0 	bl	2b08e <assert_print>
   276ae:	21b9      	movs	r1, #185	; 0xb9
   276b0:	4620      	mov	r0, r4
   276b2:	f003 fce5 	bl	2b080 <assert_post_action>
   276b6:	e7d4      	b.n	27662 <k_sched_lock+0x56>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   276b8:	bd70      	pop	{r4, r5, r6, pc}
   276ba:	bf00      	nop
   276bc:	20003734 	.word	0x20003734
   276c0:	000319f0 	.word	0x000319f0
   276c4:	000318f8 	.word	0x000318f8
   276c8:	200036f4 	.word	0x200036f4
   276cc:	000350f0 	.word	0x000350f0

000276d0 <z_priq_dumb_remove>:
#endif
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
   276d0:	b538      	push	{r3, r4, r5, lr}
   276d2:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   276d4:	4b0b      	ldr	r3, [pc, #44]	; (27704 <z_priq_dumb_remove+0x34>)
   276d6:	4299      	cmp	r1, r3
   276d8:	d007      	beq.n	276ea <z_priq_dumb_remove+0x1a>
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   276da:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
   276dc:	6823      	ldr	r3, [r4, #0]

	prev->next = next;
   276de:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   276e0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   276e2:	2300      	movs	r3, #0
   276e4:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
   276e6:	6063      	str	r3, [r4, #4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   276e8:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   276ea:	4d07      	ldr	r5, [pc, #28]	; (27708 <z_priq_dumb_remove+0x38>)
   276ec:	f240 4262 	movw	r2, #1122	; 0x462
   276f0:	4629      	mov	r1, r5
   276f2:	4806      	ldr	r0, [pc, #24]	; (2770c <z_priq_dumb_remove+0x3c>)
   276f4:	f003 fccb 	bl	2b08e <assert_print>
   276f8:	f240 4162 	movw	r1, #1122	; 0x462
   276fc:	4628      	mov	r0, r5
   276fe:	f003 fcbf 	bl	2b080 <assert_post_action>
   27702:	e7ea      	b.n	276da <z_priq_dumb_remove+0xa>
   27704:	20001eb0 	.word	0x20001eb0
   27708:	000350cc 	.word	0x000350cc
   2770c:	000318f8 	.word	0x000318f8

00027710 <z_unpend_thread>:
{
   27710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27712:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   27714:	2500      	movs	r5, #0
	__asm__ volatile(
   27716:	f04f 0340 	mov.w	r3, #64	; 0x40
   2771a:	f3ef 8611 	mrs	r6, BASEPRI
   2771e:	f383 8812 	msr	BASEPRI_MAX, r3
   27722:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27726:	481d      	ldr	r0, [pc, #116]	; (2779c <z_unpend_thread+0x8c>)
   27728:	f7fe fcc6 	bl	260b8 <z_spin_lock_valid>
   2772c:	b118      	cbz	r0, 27736 <z_unpend_thread+0x26>
	z_spin_lock_set_owner(l);
   2772e:	481b      	ldr	r0, [pc, #108]	; (2779c <z_unpend_thread+0x8c>)
   27730:	f7fe fce2 	bl	260f8 <z_spin_lock_set_owner>
	return k;
   27734:	e00f      	b.n	27756 <z_unpend_thread+0x46>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27736:	4f1a      	ldr	r7, [pc, #104]	; (277a0 <z_unpend_thread+0x90>)
   27738:	228e      	movs	r2, #142	; 0x8e
   2773a:	4639      	mov	r1, r7
   2773c:	4819      	ldr	r0, [pc, #100]	; (277a4 <z_unpend_thread+0x94>)
   2773e:	f003 fca6 	bl	2b08e <assert_print>
   27742:	218e      	movs	r1, #142	; 0x8e
   27744:	4638      	mov	r0, r7
   27746:	f003 fc9b 	bl	2b080 <assert_post_action>
   2774a:	e7f0      	b.n	2772e <z_unpend_thread+0x1e>
	__asm__ volatile(
   2774c:	f386 8811 	msr	BASEPRI, r6
   27750:	f3bf 8f6f 	isb	sy
   27754:	2501      	movs	r5, #1
   27756:	b9dd      	cbnz	r5, 27790 <z_unpend_thread+0x80>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   27758:	4620      	mov	r0, r4
   2775a:	f7ff fe33 	bl	273c4 <pended_on_thread>
   2775e:	4621      	mov	r1, r4
   27760:	f7ff ffb6 	bl	276d0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   27764:	7b63      	ldrb	r3, [r4, #13]
   27766:	f023 0302 	bic.w	r3, r3, #2
   2776a:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   2776c:	2300      	movs	r3, #0
   2776e:	60a3      	str	r3, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27770:	480a      	ldr	r0, [pc, #40]	; (2779c <z_unpend_thread+0x8c>)
   27772:	f7fe fcb1 	bl	260d8 <z_spin_unlock_valid>
   27776:	2800      	cmp	r0, #0
   27778:	d1e8      	bne.n	2774c <z_unpend_thread+0x3c>
   2777a:	4d09      	ldr	r5, [pc, #36]	; (277a0 <z_unpend_thread+0x90>)
   2777c:	22b9      	movs	r2, #185	; 0xb9
   2777e:	4629      	mov	r1, r5
   27780:	4808      	ldr	r0, [pc, #32]	; (277a4 <z_unpend_thread+0x94>)
   27782:	f003 fc84 	bl	2b08e <assert_print>
   27786:	21b9      	movs	r1, #185	; 0xb9
   27788:	4628      	mov	r0, r5
   2778a:	f003 fc79 	bl	2b080 <assert_post_action>
   2778e:	e7dd      	b.n	2774c <z_unpend_thread+0x3c>
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   27790:	f104 0018 	add.w	r0, r4, #24
   27794:	f001 f976 	bl	28a84 <z_abort_timeout>
}
   27798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2779a:	bf00      	nop
   2779c:	20003734 	.word	0x20003734
   277a0:	000319f0 	.word	0x000319f0
   277a4:	000318f8 	.word	0x000318f8

000277a8 <update_cache>:
{
   277a8:	b538      	push	{r3, r4, r5, lr}
   277aa:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
   277ac:	4817      	ldr	r0, [pc, #92]	; (2780c <update_cache+0x64>)
   277ae:	f009 f9bf 	bl	30b30 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   277b2:	4605      	mov	r5, r0
   277b4:	b188      	cbz	r0, 277da <update_cache+0x32>
	if (preempt_ok != 0) {
   277b6:	b9f4      	cbnz	r4, 277f6 <update_cache+0x4e>
	__ASSERT(_current != NULL, "");
   277b8:	4b15      	ldr	r3, [pc, #84]	; (27810 <update_cache+0x68>)
   277ba:	689b      	ldr	r3, [r3, #8]
   277bc:	b183      	cbz	r3, 277e0 <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
   277be:	4b14      	ldr	r3, [pc, #80]	; (27810 <update_cache+0x68>)
   277c0:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
   277c2:	7b5a      	ldrb	r2, [r3, #13]
   277c4:	f012 0f1f 	tst.w	r2, #31
   277c8:	d115      	bne.n	277f6 <update_cache+0x4e>
	return node->next != NULL;
   277ca:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   277cc:	b99a      	cbnz	r2, 277f6 <update_cache+0x4e>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   277ce:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
   277d0:	2a7f      	cmp	r2, #127	; 0x7f
   277d2:	d910      	bls.n	277f6 <update_cache+0x4e>
		_kernel.ready_q.cache = _current;
   277d4:	4a0e      	ldr	r2, [pc, #56]	; (27810 <update_cache+0x68>)
   277d6:	61d3      	str	r3, [r2, #28]
   277d8:	e016      	b.n	27808 <update_cache+0x60>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   277da:	4b0d      	ldr	r3, [pc, #52]	; (27810 <update_cache+0x68>)
   277dc:	68dd      	ldr	r5, [r3, #12]
   277de:	e7ea      	b.n	277b6 <update_cache+0xe>
	__ASSERT(_current != NULL, "");
   277e0:	4c0c      	ldr	r4, [pc, #48]	; (27814 <update_cache+0x6c>)
   277e2:	2289      	movs	r2, #137	; 0x89
   277e4:	4621      	mov	r1, r4
   277e6:	480c      	ldr	r0, [pc, #48]	; (27818 <update_cache+0x70>)
   277e8:	f003 fc51 	bl	2b08e <assert_print>
   277ec:	2189      	movs	r1, #137	; 0x89
   277ee:	4620      	mov	r0, r4
   277f0:	f003 fc46 	bl	2b080 <assert_post_action>
   277f4:	e7e3      	b.n	277be <update_cache+0x16>
		if (thread != _current) {
   277f6:	4b06      	ldr	r3, [pc, #24]	; (27810 <update_cache+0x68>)
   277f8:	689b      	ldr	r3, [r3, #8]
   277fa:	42ab      	cmp	r3, r5
   277fc:	d002      	beq.n	27804 <update_cache+0x5c>
			z_reset_time_slice(thread);
   277fe:	4628      	mov	r0, r5
   27800:	f7ff fe08 	bl	27414 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   27804:	4b02      	ldr	r3, [pc, #8]	; (27810 <update_cache+0x68>)
   27806:	61dd      	str	r5, [r3, #28]
}
   27808:	bd38      	pop	{r3, r4, r5, pc}
   2780a:	bf00      	nop
   2780c:	20003714 	.word	0x20003714
   27810:	200036f4 	.word	0x200036f4
   27814:	000350cc 	.word	0x000350cc
   27818:	000318f8 	.word	0x000318f8

0002781c <move_thread_to_end_of_prio_q>:
{
   2781c:	b538      	push	{r3, r4, r5, lr}
   2781e:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
   27820:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   27822:	f990 300d 	ldrsb.w	r3, [r0, #13]
   27826:	2b00      	cmp	r3, #0
   27828:	db2b      	blt.n	27882 <move_thread_to_end_of_prio_q+0x66>
	thread->base.thread_state |= _THREAD_QUEUED;
   2782a:	7b6b      	ldrb	r3, [r5, #13]
   2782c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   27830:	736b      	strb	r3, [r5, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   27832:	4b21      	ldr	r3, [pc, #132]	; (278b8 <move_thread_to_end_of_prio_q+0x9c>)
   27834:	429d      	cmp	r5, r3
   27836:	d02c      	beq.n	27892 <move_thread_to_end_of_prio_q+0x76>
	return list->head == list;
   27838:	4b20      	ldr	r3, [pc, #128]	; (278bc <move_thread_to_end_of_prio_q+0xa0>)
   2783a:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2783e:	429c      	cmp	r4, r3
   27840:	d038      	beq.n	278b4 <move_thread_to_end_of_prio_q+0x98>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   27842:	b16c      	cbz	r4, 27860 <move_thread_to_end_of_prio_q+0x44>
		if (z_sched_prio_cmp(thread, t) > 0) {
   27844:	4621      	mov	r1, r4
   27846:	4628      	mov	r0, r5
   27848:	f009 f953 	bl	30af2 <z_sched_prio_cmp>
   2784c:	2800      	cmp	r0, #0
   2784e:	dc2b      	bgt.n	278a8 <move_thread_to_end_of_prio_q+0x8c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   27850:	b134      	cbz	r4, 27860 <move_thread_to_end_of_prio_q+0x44>
	return (node == list->tail) ? NULL : node->next;
   27852:	4b1a      	ldr	r3, [pc, #104]	; (278bc <move_thread_to_end_of_prio_q+0xa0>)
   27854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   27856:	429c      	cmp	r4, r3
   27858:	d002      	beq.n	27860 <move_thread_to_end_of_prio_q+0x44>
   2785a:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2785c:	2c00      	cmp	r4, #0
   2785e:	d1f0      	bne.n	27842 <move_thread_to_end_of_prio_q+0x26>
	sys_dnode_t *const tail = list->tail;
   27860:	4b16      	ldr	r3, [pc, #88]	; (278bc <move_thread_to_end_of_prio_q+0xa0>)
   27862:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   27864:	f103 0120 	add.w	r1, r3, #32
   27868:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   2786a:	606a      	str	r2, [r5, #4]
	tail->next = node;
   2786c:	6015      	str	r5, [r2, #0]
	list->tail = node;
   2786e:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
   27870:	4b12      	ldr	r3, [pc, #72]	; (278bc <move_thread_to_end_of_prio_q+0xa0>)
   27872:	6898      	ldr	r0, [r3, #8]
   27874:	42a8      	cmp	r0, r5
   27876:	bf14      	ite	ne
   27878:	2000      	movne	r0, #0
   2787a:	2001      	moveq	r0, #1
   2787c:	f7ff ff94 	bl	277a8 <update_cache>
}
   27880:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   27882:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   27886:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   27888:	4601      	mov	r1, r0
   2788a:	480d      	ldr	r0, [pc, #52]	; (278c0 <move_thread_to_end_of_prio_q+0xa4>)
   2788c:	f7ff ff20 	bl	276d0 <z_priq_dumb_remove>
}
   27890:	e7cb      	b.n	2782a <move_thread_to_end_of_prio_q+0xe>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   27892:	4c0c      	ldr	r4, [pc, #48]	; (278c4 <move_thread_to_end_of_prio_q+0xa8>)
   27894:	22ba      	movs	r2, #186	; 0xba
   27896:	4621      	mov	r1, r4
   27898:	480b      	ldr	r0, [pc, #44]	; (278c8 <move_thread_to_end_of_prio_q+0xac>)
   2789a:	f003 fbf8 	bl	2b08e <assert_print>
   2789e:	21ba      	movs	r1, #186	; 0xba
   278a0:	4620      	mov	r0, r4
   278a2:	f003 fbed 	bl	2b080 <assert_post_action>
   278a6:	e7c7      	b.n	27838 <move_thread_to_end_of_prio_q+0x1c>
	sys_dnode_t *const prev = successor->prev;
   278a8:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   278aa:	606b      	str	r3, [r5, #4]
	node->next = successor;
   278ac:	602c      	str	r4, [r5, #0]
	prev->next = node;
   278ae:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   278b0:	6065      	str	r5, [r4, #4]
}
   278b2:	e7dd      	b.n	27870 <move_thread_to_end_of_prio_q+0x54>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   278b4:	2400      	movs	r4, #0
   278b6:	e7c4      	b.n	27842 <move_thread_to_end_of_prio_q+0x26>
   278b8:	20001eb0 	.word	0x20001eb0
   278bc:	200036f4 	.word	0x200036f4
   278c0:	20003714 	.word	0x20003714
   278c4:	000350cc 	.word	0x000350cc
   278c8:	000318f8 	.word	0x000318f8

000278cc <slice_expired_locked>:
{
   278cc:	b538      	push	{r3, r4, r5, lr}
   278ce:	4604      	mov	r4, r0
	struct k_thread *curr = _current;
   278d0:	4b07      	ldr	r3, [pc, #28]	; (278f0 <slice_expired_locked+0x24>)
   278d2:	689d      	ldr	r5, [r3, #8]
	uint8_t state = thread->base.thread_state;
   278d4:	7b6b      	ldrb	r3, [r5, #13]
	if (!z_is_thread_prevented_from_running(curr)) {
   278d6:	f013 0f1f 	tst.w	r3, #31
   278da:	d004      	beq.n	278e6 <slice_expired_locked+0x1a>
	z_reset_time_slice(curr);
   278dc:	4628      	mov	r0, r5
   278de:	f7ff fd99 	bl	27414 <z_reset_time_slice>
}
   278e2:	4620      	mov	r0, r4
   278e4:	bd38      	pop	{r3, r4, r5, pc}
		move_thread_to_end_of_prio_q(curr);
   278e6:	4628      	mov	r0, r5
   278e8:	f7ff ff98 	bl	2781c <move_thread_to_end_of_prio_q>
   278ec:	e7f6      	b.n	278dc <slice_expired_locked+0x10>
   278ee:	bf00      	nop
   278f0:	200036f4 	.word	0x200036f4

000278f4 <z_time_slice>:
{
   278f4:	b570      	push	{r4, r5, r6, lr}
   278f6:	4604      	mov	r4, r0
	__asm__ volatile(
   278f8:	f04f 0340 	mov.w	r3, #64	; 0x40
   278fc:	f3ef 8511 	mrs	r5, BASEPRI
   27900:	f383 8812 	msr	BASEPRI_MAX, r3
   27904:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27908:	483a      	ldr	r0, [pc, #232]	; (279f4 <z_time_slice+0x100>)
   2790a:	f7fe fbd5 	bl	260b8 <z_spin_lock_valid>
   2790e:	b310      	cbz	r0, 27956 <z_time_slice+0x62>
	z_spin_lock_set_owner(l);
   27910:	4838      	ldr	r0, [pc, #224]	; (279f4 <z_time_slice+0x100>)
   27912:	f7fe fbf1 	bl	260f8 <z_spin_lock_set_owner>
	return k;
   27916:	462b      	mov	r3, r5
	if (pending_current == _current) {
   27918:	4a37      	ldr	r2, [pc, #220]	; (279f8 <z_time_slice+0x104>)
   2791a:	6892      	ldr	r2, [r2, #8]
   2791c:	4937      	ldr	r1, [pc, #220]	; (279fc <z_time_slice+0x108>)
   2791e:	6809      	ldr	r1, [r1, #0]
   27920:	428a      	cmp	r2, r1
   27922:	d023      	beq.n	2796c <z_time_slice+0x78>
	pending_current = NULL;
   27924:	4935      	ldr	r1, [pc, #212]	; (279fc <z_time_slice+0x108>)
   27926:	2000      	movs	r0, #0
   27928:	6008      	str	r0, [r1, #0]
	int ret = slice_ticks;
   2792a:	4935      	ldr	r1, [pc, #212]	; (27a00 <z_time_slice+0x10c>)
   2792c:	6809      	ldr	r1, [r1, #0]
	if (slice_time(_current) && sliceable(_current)) {
   2792e:	2900      	cmp	r1, #0
   27930:	d048      	beq.n	279c4 <z_time_slice+0xd0>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   27932:	89d1      	ldrh	r1, [r2, #14]
		&& !z_is_idle_thread_object(thread);
   27934:	297f      	cmp	r1, #127	; 0x7f
   27936:	d830      	bhi.n	2799a <z_time_slice+0xa6>
   27938:	7b51      	ldrb	r1, [r2, #13]
		&& !z_is_thread_prevented_from_running(thread)
   2793a:	f011 0f1f 	tst.w	r1, #31
   2793e:	d136      	bne.n	279ae <z_time_slice+0xba>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   27940:	f992 000e 	ldrsb.w	r0, [r2, #14]
   27944:	492f      	ldr	r1, [pc, #188]	; (27a04 <z_time_slice+0x110>)
   27946:	6809      	ldr	r1, [r1, #0]
   27948:	4288      	cmp	r0, r1
   2794a:	db32      	blt.n	279b2 <z_time_slice+0xbe>
		&& !z_is_idle_thread_object(thread);
   2794c:	492e      	ldr	r1, [pc, #184]	; (27a08 <z_time_slice+0x114>)
   2794e:	428a      	cmp	r2, r1
   27950:	d031      	beq.n	279b6 <z_time_slice+0xc2>
   27952:	2201      	movs	r2, #1
   27954:	e022      	b.n	2799c <z_time_slice+0xa8>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27956:	4e2d      	ldr	r6, [pc, #180]	; (27a0c <z_time_slice+0x118>)
   27958:	228e      	movs	r2, #142	; 0x8e
   2795a:	4631      	mov	r1, r6
   2795c:	482c      	ldr	r0, [pc, #176]	; (27a10 <z_time_slice+0x11c>)
   2795e:	f003 fb96 	bl	2b08e <assert_print>
   27962:	218e      	movs	r1, #142	; 0x8e
   27964:	4630      	mov	r0, r6
   27966:	f003 fb8b 	bl	2b080 <assert_post_action>
   2796a:	e7d1      	b.n	27910 <z_time_slice+0x1c>
		z_reset_time_slice(_current);
   2796c:	4610      	mov	r0, r2
   2796e:	f7ff fd51 	bl	27414 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27972:	4820      	ldr	r0, [pc, #128]	; (279f4 <z_time_slice+0x100>)
   27974:	f7fe fbb0 	bl	260d8 <z_spin_unlock_valid>
   27978:	b120      	cbz	r0, 27984 <z_time_slice+0x90>
	__asm__ volatile(
   2797a:	f385 8811 	msr	BASEPRI, r5
   2797e:	f3bf 8f6f 	isb	sy
		return;
   27982:	e02b      	b.n	279dc <z_time_slice+0xe8>
   27984:	4c21      	ldr	r4, [pc, #132]	; (27a0c <z_time_slice+0x118>)
   27986:	22b9      	movs	r2, #185	; 0xb9
   27988:	4621      	mov	r1, r4
   2798a:	4821      	ldr	r0, [pc, #132]	; (27a10 <z_time_slice+0x11c>)
   2798c:	f003 fb7f 	bl	2b08e <assert_print>
   27990:	21b9      	movs	r1, #185	; 0xb9
   27992:	4620      	mov	r0, r4
   27994:	f003 fb74 	bl	2b080 <assert_post_action>
   27998:	e7ef      	b.n	2797a <z_time_slice+0x86>
		&& !z_is_idle_thread_object(thread);
   2799a:	2200      	movs	r2, #0
	if (slice_time(_current) && sliceable(_current)) {
   2799c:	b192      	cbz	r2, 279c4 <z_time_slice+0xd0>
		if (ticks >= _current_cpu->slice_ticks) {
   2799e:	4a16      	ldr	r2, [pc, #88]	; (279f8 <z_time_slice+0x104>)
   279a0:	6910      	ldr	r0, [r2, #16]
   279a2:	42a0      	cmp	r0, r4
   279a4:	dd09      	ble.n	279ba <z_time_slice+0xc6>
			_current_cpu->slice_ticks -= ticks;
   279a6:	1b00      	subs	r0, r0, r4
   279a8:	4a13      	ldr	r2, [pc, #76]	; (279f8 <z_time_slice+0x104>)
   279aa:	6110      	str	r0, [r2, #16]
   279ac:	e00d      	b.n	279ca <z_time_slice+0xd6>
		&& !z_is_idle_thread_object(thread);
   279ae:	2200      	movs	r2, #0
   279b0:	e7f4      	b.n	2799c <z_time_slice+0xa8>
   279b2:	2200      	movs	r2, #0
   279b4:	e7f2      	b.n	2799c <z_time_slice+0xa8>
   279b6:	2200      	movs	r2, #0
   279b8:	e7f0      	b.n	2799c <z_time_slice+0xa8>
			key = slice_expired_locked(key);
   279ba:	4628      	mov	r0, r5
   279bc:	f7ff ff86 	bl	278cc <slice_expired_locked>
   279c0:	4603      	mov	r3, r0
   279c2:	e002      	b.n	279ca <z_time_slice+0xd6>
		_current_cpu->slice_ticks = 0;
   279c4:	4a0c      	ldr	r2, [pc, #48]	; (279f8 <z_time_slice+0x104>)
   279c6:	2100      	movs	r1, #0
   279c8:	6111      	str	r1, [r2, #16]
	k_spin_unlock(&sched_spinlock, key);
   279ca:	461c      	mov	r4, r3
   279cc:	4809      	ldr	r0, [pc, #36]	; (279f4 <z_time_slice+0x100>)
   279ce:	f7fe fb83 	bl	260d8 <z_spin_unlock_valid>
   279d2:	b120      	cbz	r0, 279de <z_time_slice+0xea>
   279d4:	f384 8811 	msr	BASEPRI, r4
   279d8:	f3bf 8f6f 	isb	sy
}
   279dc:	bd70      	pop	{r4, r5, r6, pc}
   279de:	4d0b      	ldr	r5, [pc, #44]	; (27a0c <z_time_slice+0x118>)
   279e0:	22b9      	movs	r2, #185	; 0xb9
   279e2:	4629      	mov	r1, r5
   279e4:	480a      	ldr	r0, [pc, #40]	; (27a10 <z_time_slice+0x11c>)
   279e6:	f003 fb52 	bl	2b08e <assert_print>
   279ea:	21b9      	movs	r1, #185	; 0xb9
   279ec:	4628      	mov	r0, r5
   279ee:	f003 fb47 	bl	2b080 <assert_post_action>
   279f2:	e7ef      	b.n	279d4 <z_time_slice+0xe0>
   279f4:	20003734 	.word	0x20003734
   279f8:	200036f4 	.word	0x200036f4
   279fc:	20003730 	.word	0x20003730
   27a00:	2000373c 	.word	0x2000373c
   27a04:	20003738 	.word	0x20003738
   27a08:	20001eb0 	.word	0x20001eb0
   27a0c:	000319f0 	.word	0x000319f0
   27a10:	000318f8 	.word	0x000318f8

00027a14 <ready_thread>:
{
   27a14:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
   27a16:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   27a18:	f990 200d 	ldrsb.w	r2, [r0, #13]
   27a1c:	2a00      	cmp	r2, #0
   27a1e:	db30      	blt.n	27a82 <ready_thread+0x6e>
   27a20:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   27a22:	f013 0f1f 	tst.w	r3, #31
   27a26:	d105      	bne.n	27a34 <ready_thread+0x20>
	return node->next != NULL;
   27a28:	6982      	ldr	r2, [r0, #24]
   27a2a:	b10a      	cbz	r2, 27a30 <ready_thread+0x1c>
   27a2c:	2200      	movs	r2, #0
   27a2e:	e002      	b.n	27a36 <ready_thread+0x22>
   27a30:	2201      	movs	r2, #1
   27a32:	e000      	b.n	27a36 <ready_thread+0x22>
   27a34:	2200      	movs	r2, #0
   27a36:	b322      	cbz	r2, 27a82 <ready_thread+0x6e>
	thread->base.thread_state |= _THREAD_QUEUED;
   27a38:	f063 037f 	orn	r3, r3, #127	; 0x7f
   27a3c:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   27a3e:	4b1b      	ldr	r3, [pc, #108]	; (27aac <ready_thread+0x98>)
   27a40:	429c      	cmp	r4, r3
   27a42:	d01f      	beq.n	27a84 <ready_thread+0x70>
	return list->head == list;
   27a44:	4b1a      	ldr	r3, [pc, #104]	; (27ab0 <ready_thread+0x9c>)
   27a46:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27a4a:	429d      	cmp	r5, r3
   27a4c:	d02b      	beq.n	27aa6 <ready_thread+0x92>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   27a4e:	b16d      	cbz	r5, 27a6c <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
   27a50:	4629      	mov	r1, r5
   27a52:	4620      	mov	r0, r4
   27a54:	f009 f84d 	bl	30af2 <z_sched_prio_cmp>
   27a58:	2800      	cmp	r0, #0
   27a5a:	dc1e      	bgt.n	27a9a <ready_thread+0x86>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   27a5c:	b135      	cbz	r5, 27a6c <ready_thread+0x58>
	return (node == list->tail) ? NULL : node->next;
   27a5e:	4b14      	ldr	r3, [pc, #80]	; (27ab0 <ready_thread+0x9c>)
   27a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   27a62:	429d      	cmp	r5, r3
   27a64:	d002      	beq.n	27a6c <ready_thread+0x58>
   27a66:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   27a68:	2d00      	cmp	r5, #0
   27a6a:	d1f0      	bne.n	27a4e <ready_thread+0x3a>
	sys_dnode_t *const tail = list->tail;
   27a6c:	4b10      	ldr	r3, [pc, #64]	; (27ab0 <ready_thread+0x9c>)
   27a6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   27a70:	f103 0120 	add.w	r1, r3, #32
   27a74:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   27a76:	6062      	str	r2, [r4, #4]
	tail->next = node;
   27a78:	6014      	str	r4, [r2, #0]
	list->tail = node;
   27a7a:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
   27a7c:	2000      	movs	r0, #0
   27a7e:	f7ff fe93 	bl	277a8 <update_cache>
}
   27a82:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   27a84:	4d0b      	ldr	r5, [pc, #44]	; (27ab4 <ready_thread+0xa0>)
   27a86:	22ba      	movs	r2, #186	; 0xba
   27a88:	4629      	mov	r1, r5
   27a8a:	480b      	ldr	r0, [pc, #44]	; (27ab8 <ready_thread+0xa4>)
   27a8c:	f003 faff 	bl	2b08e <assert_print>
   27a90:	21ba      	movs	r1, #186	; 0xba
   27a92:	4628      	mov	r0, r5
   27a94:	f003 faf4 	bl	2b080 <assert_post_action>
   27a98:	e7d4      	b.n	27a44 <ready_thread+0x30>
	sys_dnode_t *const prev = successor->prev;
   27a9a:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   27a9c:	6063      	str	r3, [r4, #4]
	node->next = successor;
   27a9e:	6025      	str	r5, [r4, #0]
	prev->next = node;
   27aa0:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   27aa2:	606c      	str	r4, [r5, #4]
}
   27aa4:	e7ea      	b.n	27a7c <ready_thread+0x68>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   27aa6:	2500      	movs	r5, #0
   27aa8:	e7d1      	b.n	27a4e <ready_thread+0x3a>
   27aaa:	bf00      	nop
   27aac:	20001eb0 	.word	0x20001eb0
   27ab0:	200036f4 	.word	0x200036f4
   27ab4:	000350cc 	.word	0x000350cc
   27ab8:	000318f8 	.word	0x000318f8

00027abc <z_ready_thread>:
{
   27abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27abe:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
   27ac0:	2400      	movs	r4, #0
	__asm__ volatile(
   27ac2:	f04f 0340 	mov.w	r3, #64	; 0x40
   27ac6:	f3ef 8611 	mrs	r6, BASEPRI
   27aca:	f383 8812 	msr	BASEPRI_MAX, r3
   27ace:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27ad2:	4819      	ldr	r0, [pc, #100]	; (27b38 <z_ready_thread+0x7c>)
   27ad4:	f7fe faf0 	bl	260b8 <z_spin_lock_valid>
   27ad8:	b118      	cbz	r0, 27ae2 <z_ready_thread+0x26>
	z_spin_lock_set_owner(l);
   27ada:	4817      	ldr	r0, [pc, #92]	; (27b38 <z_ready_thread+0x7c>)
   27adc:	f7fe fb0c 	bl	260f8 <z_spin_lock_set_owner>
	return k;
   27ae0:	e013      	b.n	27b0a <z_ready_thread+0x4e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27ae2:	4f16      	ldr	r7, [pc, #88]	; (27b3c <z_ready_thread+0x80>)
   27ae4:	228e      	movs	r2, #142	; 0x8e
   27ae6:	4639      	mov	r1, r7
   27ae8:	4815      	ldr	r0, [pc, #84]	; (27b40 <z_ready_thread+0x84>)
   27aea:	f003 fad0 	bl	2b08e <assert_print>
   27aee:	218e      	movs	r1, #142	; 0x8e
   27af0:	4638      	mov	r0, r7
   27af2:	f003 fac5 	bl	2b080 <assert_post_action>
   27af6:	e7f0      	b.n	27ada <z_ready_thread+0x1e>
			ready_thread(thread);
   27af8:	4628      	mov	r0, r5
   27afa:	f7ff ff8b 	bl	27a14 <ready_thread>
   27afe:	e00a      	b.n	27b16 <z_ready_thread+0x5a>
	__asm__ volatile(
   27b00:	f386 8811 	msr	BASEPRI, r6
   27b04:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   27b08:	2401      	movs	r4, #1
   27b0a:	b9a4      	cbnz	r4, 27b36 <z_ready_thread+0x7a>
		if (!thread_active_elsewhere(thread)) {
   27b0c:	4628      	mov	r0, r5
   27b0e:	f008 ffee 	bl	30aee <thread_active_elsewhere>
   27b12:	2800      	cmp	r0, #0
   27b14:	d0f0      	beq.n	27af8 <z_ready_thread+0x3c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27b16:	4808      	ldr	r0, [pc, #32]	; (27b38 <z_ready_thread+0x7c>)
   27b18:	f7fe fade 	bl	260d8 <z_spin_unlock_valid>
   27b1c:	2800      	cmp	r0, #0
   27b1e:	d1ef      	bne.n	27b00 <z_ready_thread+0x44>
   27b20:	4c06      	ldr	r4, [pc, #24]	; (27b3c <z_ready_thread+0x80>)
   27b22:	22b9      	movs	r2, #185	; 0xb9
   27b24:	4621      	mov	r1, r4
   27b26:	4806      	ldr	r0, [pc, #24]	; (27b40 <z_ready_thread+0x84>)
   27b28:	f003 fab1 	bl	2b08e <assert_print>
   27b2c:	21b9      	movs	r1, #185	; 0xb9
   27b2e:	4620      	mov	r0, r4
   27b30:	f003 faa6 	bl	2b080 <assert_post_action>
   27b34:	e7e4      	b.n	27b00 <z_ready_thread+0x44>
}
   27b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   27b38:	20003734 	.word	0x20003734
   27b3c:	000319f0 	.word	0x000319f0
   27b40:	000318f8 	.word	0x000318f8

00027b44 <z_sched_start>:
{
   27b44:	b570      	push	{r4, r5, r6, lr}
   27b46:	4604      	mov	r4, r0
	__asm__ volatile(
   27b48:	f04f 0340 	mov.w	r3, #64	; 0x40
   27b4c:	f3ef 8511 	mrs	r5, BASEPRI
   27b50:	f383 8812 	msr	BASEPRI_MAX, r3
   27b54:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27b58:	481a      	ldr	r0, [pc, #104]	; (27bc4 <z_sched_start+0x80>)
   27b5a:	f7fe faad 	bl	260b8 <z_spin_lock_valid>
   27b5e:	b188      	cbz	r0, 27b84 <z_sched_start+0x40>
	z_spin_lock_set_owner(l);
   27b60:	4818      	ldr	r0, [pc, #96]	; (27bc4 <z_sched_start+0x80>)
   27b62:	f7fe fac9 	bl	260f8 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   27b66:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
   27b68:	f013 0f04 	tst.w	r3, #4
   27b6c:	d015      	beq.n	27b9a <z_sched_start+0x56>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   27b6e:	f023 0304 	bic.w	r3, r3, #4
   27b72:	7363      	strb	r3, [r4, #13]
	ready_thread(thread);
   27b74:	4620      	mov	r0, r4
   27b76:	f7ff ff4d 	bl	27a14 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   27b7a:	4629      	mov	r1, r5
   27b7c:	4811      	ldr	r0, [pc, #68]	; (27bc4 <z_sched_start+0x80>)
   27b7e:	f7ff fd09 	bl	27594 <z_reschedule>
}
   27b82:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27b84:	4e10      	ldr	r6, [pc, #64]	; (27bc8 <z_sched_start+0x84>)
   27b86:	228e      	movs	r2, #142	; 0x8e
   27b88:	4631      	mov	r1, r6
   27b8a:	4810      	ldr	r0, [pc, #64]	; (27bcc <z_sched_start+0x88>)
   27b8c:	f003 fa7f 	bl	2b08e <assert_print>
   27b90:	218e      	movs	r1, #142	; 0x8e
   27b92:	4630      	mov	r0, r6
   27b94:	f003 fa74 	bl	2b080 <assert_post_action>
   27b98:	e7e2      	b.n	27b60 <z_sched_start+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27b9a:	480a      	ldr	r0, [pc, #40]	; (27bc4 <z_sched_start+0x80>)
   27b9c:	f7fe fa9c 	bl	260d8 <z_spin_unlock_valid>
   27ba0:	b120      	cbz	r0, 27bac <z_sched_start+0x68>
	__asm__ volatile(
   27ba2:	f385 8811 	msr	BASEPRI, r5
   27ba6:	f3bf 8f6f 	isb	sy
		return;
   27baa:	e7ea      	b.n	27b82 <z_sched_start+0x3e>
   27bac:	4c06      	ldr	r4, [pc, #24]	; (27bc8 <z_sched_start+0x84>)
   27bae:	22b9      	movs	r2, #185	; 0xb9
   27bb0:	4621      	mov	r1, r4
   27bb2:	4806      	ldr	r0, [pc, #24]	; (27bcc <z_sched_start+0x88>)
   27bb4:	f003 fa6b 	bl	2b08e <assert_print>
   27bb8:	21b9      	movs	r1, #185	; 0xb9
   27bba:	4620      	mov	r0, r4
   27bbc:	f003 fa60 	bl	2b080 <assert_post_action>
   27bc0:	e7ef      	b.n	27ba2 <z_sched_start+0x5e>
   27bc2:	bf00      	nop
   27bc4:	20003734 	.word	0x20003734
   27bc8:	000319f0 	.word	0x000319f0
   27bcc:	000318f8 	.word	0x000318f8

00027bd0 <z_thread_timeout>:
{
   27bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27bd4:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   27bd6:	f1a0 0618 	sub.w	r6, r0, #24
	LOCKED(&sched_spinlock) {
   27bda:	2500      	movs	r5, #0
	__asm__ volatile(
   27bdc:	f04f 0340 	mov.w	r3, #64	; 0x40
   27be0:	f3ef 8711 	mrs	r7, BASEPRI
   27be4:	f383 8812 	msr	BASEPRI_MAX, r3
   27be8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27bec:	4826      	ldr	r0, [pc, #152]	; (27c88 <z_thread_timeout+0xb8>)
   27bee:	f7fe fa63 	bl	260b8 <z_spin_lock_valid>
   27bf2:	b118      	cbz	r0, 27bfc <z_thread_timeout+0x2c>
	z_spin_lock_set_owner(l);
   27bf4:	4824      	ldr	r0, [pc, #144]	; (27c88 <z_thread_timeout+0xb8>)
   27bf6:	f7fe fa7f 	bl	260f8 <z_spin_lock_set_owner>
	return k;
   27bfa:	e021      	b.n	27c40 <z_thread_timeout+0x70>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27bfc:	f8df 808c 	ldr.w	r8, [pc, #140]	; 27c8c <z_thread_timeout+0xbc>
   27c00:	228e      	movs	r2, #142	; 0x8e
   27c02:	4641      	mov	r1, r8
   27c04:	4822      	ldr	r0, [pc, #136]	; (27c90 <z_thread_timeout+0xc0>)
   27c06:	f003 fa42 	bl	2b08e <assert_print>
   27c0a:	218e      	movs	r1, #142	; 0x8e
   27c0c:	4640      	mov	r0, r8
   27c0e:	f003 fa37 	bl	2b080 <assert_post_action>
   27c12:	e7ef      	b.n	27bf4 <z_thread_timeout+0x24>
   27c14:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   27c18:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   27c1c:	f804 3c0b 	strb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   27c20:	f023 0310 	bic.w	r3, r3, #16
   27c24:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   27c28:	4630      	mov	r0, r6
   27c2a:	f7ff fef3 	bl	27a14 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27c2e:	4816      	ldr	r0, [pc, #88]	; (27c88 <z_thread_timeout+0xb8>)
   27c30:	f7fe fa52 	bl	260d8 <z_spin_unlock_valid>
   27c34:	b1d8      	cbz	r0, 27c6e <z_thread_timeout+0x9e>
	__asm__ volatile(
   27c36:	f387 8811 	msr	BASEPRI, r7
   27c3a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   27c3e:	2501      	movs	r5, #1
   27c40:	bb05      	cbnz	r5, 27c84 <z_thread_timeout+0xb4>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
   27c42:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
   27c46:	f013 0f28 	tst.w	r3, #40	; 0x28
   27c4a:	d1f0      	bne.n	27c2e <z_thread_timeout+0x5e>
			if (thread->base.pended_on != NULL) {
   27c4c:	f854 3c10 	ldr.w	r3, [r4, #-16]
   27c50:	2b00      	cmp	r3, #0
   27c52:	d0df      	beq.n	27c14 <z_thread_timeout+0x44>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   27c54:	4630      	mov	r0, r6
   27c56:	f7ff fbb5 	bl	273c4 <pended_on_thread>
   27c5a:	4631      	mov	r1, r6
   27c5c:	f7ff fd38 	bl	276d0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   27c60:	7b73      	ldrb	r3, [r6, #13]
   27c62:	f023 0302 	bic.w	r3, r3, #2
   27c66:	7373      	strb	r3, [r6, #13]
	thread->base.pended_on = NULL;
   27c68:	2300      	movs	r3, #0
   27c6a:	60b3      	str	r3, [r6, #8]
}
   27c6c:	e7d2      	b.n	27c14 <z_thread_timeout+0x44>
   27c6e:	4d07      	ldr	r5, [pc, #28]	; (27c8c <z_thread_timeout+0xbc>)
   27c70:	22b9      	movs	r2, #185	; 0xb9
   27c72:	4629      	mov	r1, r5
   27c74:	4806      	ldr	r0, [pc, #24]	; (27c90 <z_thread_timeout+0xc0>)
   27c76:	f003 fa0a 	bl	2b08e <assert_print>
   27c7a:	21b9      	movs	r1, #185	; 0xb9
   27c7c:	4628      	mov	r0, r5
   27c7e:	f003 f9ff 	bl	2b080 <assert_post_action>
   27c82:	e7d8      	b.n	27c36 <z_thread_timeout+0x66>
}
   27c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   27c88:	20003734 	.word	0x20003734
   27c8c:	000319f0 	.word	0x000319f0
   27c90:	000318f8 	.word	0x000318f8

00027c94 <unready_thread>:
{
   27c94:	b510      	push	{r4, lr}
   27c96:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
   27c98:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   27c9a:	f990 300d 	ldrsb.w	r3, [r0, #13]
   27c9e:	2b00      	cmp	r3, #0
   27ca0:	db08      	blt.n	27cb4 <unready_thread+0x20>
	update_cache(thread == _current);
   27ca2:	4b08      	ldr	r3, [pc, #32]	; (27cc4 <unready_thread+0x30>)
   27ca4:	6898      	ldr	r0, [r3, #8]
   27ca6:	42a0      	cmp	r0, r4
   27ca8:	bf14      	ite	ne
   27caa:	2000      	movne	r0, #0
   27cac:	2001      	moveq	r0, #1
   27cae:	f7ff fd7b 	bl	277a8 <update_cache>
}
   27cb2:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   27cb4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   27cb8:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   27cba:	4601      	mov	r1, r0
   27cbc:	4802      	ldr	r0, [pc, #8]	; (27cc8 <unready_thread+0x34>)
   27cbe:	f7ff fd07 	bl	276d0 <z_priq_dumb_remove>
}
   27cc2:	e7ee      	b.n	27ca2 <unready_thread+0xe>
   27cc4:	200036f4 	.word	0x200036f4
   27cc8:	20003714 	.word	0x20003714

00027ccc <add_to_waitq_locked>:
{
   27ccc:	b570      	push	{r4, r5, r6, lr}
   27cce:	4605      	mov	r5, r0
   27cd0:	460e      	mov	r6, r1
	unready_thread(thread);
   27cd2:	f7ff ffdf 	bl	27c94 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   27cd6:	7b6b      	ldrb	r3, [r5, #13]
   27cd8:	f043 0302 	orr.w	r3, r3, #2
   27cdc:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
   27cde:	b1ce      	cbz	r6, 27d14 <add_to_waitq_locked+0x48>
		thread->base.pended_on = wait_q;
   27ce0:	60ae      	str	r6, [r5, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   27ce2:	4b16      	ldr	r3, [pc, #88]	; (27d3c <add_to_waitq_locked+0x70>)
   27ce4:	429d      	cmp	r5, r3
   27ce6:	d016      	beq.n	27d16 <add_to_waitq_locked+0x4a>
	return list->head == list;
   27ce8:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27cea:	42a6      	cmp	r6, r4
   27cec:	d024      	beq.n	27d38 <add_to_waitq_locked+0x6c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   27cee:	b164      	cbz	r4, 27d0a <add_to_waitq_locked+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   27cf0:	4621      	mov	r1, r4
   27cf2:	4628      	mov	r0, r5
   27cf4:	f008 fefd 	bl	30af2 <z_sched_prio_cmp>
   27cf8:	2800      	cmp	r0, #0
   27cfa:	dc17      	bgt.n	27d2c <add_to_waitq_locked+0x60>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   27cfc:	b12c      	cbz	r4, 27d0a <add_to_waitq_locked+0x3e>
	return (node == list->tail) ? NULL : node->next;
   27cfe:	6873      	ldr	r3, [r6, #4]
   27d00:	429c      	cmp	r4, r3
   27d02:	d002      	beq.n	27d0a <add_to_waitq_locked+0x3e>
   27d04:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   27d06:	2c00      	cmp	r4, #0
   27d08:	d1f1      	bne.n	27cee <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
   27d0a:	6873      	ldr	r3, [r6, #4]
	node->next = list;
   27d0c:	602e      	str	r6, [r5, #0]
	node->prev = tail;
   27d0e:	606b      	str	r3, [r5, #4]
	tail->next = node;
   27d10:	601d      	str	r5, [r3, #0]
	list->tail = node;
   27d12:	6075      	str	r5, [r6, #4]
}
   27d14:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   27d16:	4c0a      	ldr	r4, [pc, #40]	; (27d40 <add_to_waitq_locked+0x74>)
   27d18:	22ba      	movs	r2, #186	; 0xba
   27d1a:	4621      	mov	r1, r4
   27d1c:	4809      	ldr	r0, [pc, #36]	; (27d44 <add_to_waitq_locked+0x78>)
   27d1e:	f003 f9b6 	bl	2b08e <assert_print>
   27d22:	21ba      	movs	r1, #186	; 0xba
   27d24:	4620      	mov	r0, r4
   27d26:	f003 f9ab 	bl	2b080 <assert_post_action>
   27d2a:	e7dd      	b.n	27ce8 <add_to_waitq_locked+0x1c>
	sys_dnode_t *const prev = successor->prev;
   27d2c:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   27d2e:	606b      	str	r3, [r5, #4]
	node->next = successor;
   27d30:	602c      	str	r4, [r5, #0]
	prev->next = node;
   27d32:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   27d34:	6065      	str	r5, [r4, #4]
}
   27d36:	e7ed      	b.n	27d14 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   27d38:	2400      	movs	r4, #0
   27d3a:	e7d8      	b.n	27cee <add_to_waitq_locked+0x22>
   27d3c:	20001eb0 	.word	0x20001eb0
   27d40:	000350cc 	.word	0x000350cc
   27d44:	000318f8 	.word	0x000318f8

00027d48 <pend>:
{
   27d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   27d4c:	4605      	mov	r5, r0
   27d4e:	460e      	mov	r6, r1
   27d50:	4691      	mov	r9, r2
   27d52:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
   27d54:	2400      	movs	r4, #0
	__asm__ volatile(
   27d56:	f04f 0340 	mov.w	r3, #64	; 0x40
   27d5a:	f3ef 8711 	mrs	r7, BASEPRI
   27d5e:	f383 8812 	msr	BASEPRI_MAX, r3
   27d62:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27d66:	481a      	ldr	r0, [pc, #104]	; (27dd0 <pend+0x88>)
   27d68:	f7fe f9a6 	bl	260b8 <z_spin_lock_valid>
   27d6c:	b118      	cbz	r0, 27d76 <pend+0x2e>
	z_spin_lock_set_owner(l);
   27d6e:	4818      	ldr	r0, [pc, #96]	; (27dd0 <pend+0x88>)
   27d70:	f7fe f9c2 	bl	260f8 <z_spin_lock_set_owner>
	return k;
   27d74:	e010      	b.n	27d98 <pend+0x50>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27d76:	f8df a05c 	ldr.w	sl, [pc, #92]	; 27dd4 <pend+0x8c>
   27d7a:	228e      	movs	r2, #142	; 0x8e
   27d7c:	4651      	mov	r1, sl
   27d7e:	4816      	ldr	r0, [pc, #88]	; (27dd8 <pend+0x90>)
   27d80:	f003 f985 	bl	2b08e <assert_print>
   27d84:	218e      	movs	r1, #142	; 0x8e
   27d86:	4650      	mov	r0, sl
   27d88:	f003 f97a 	bl	2b080 <assert_post_action>
   27d8c:	e7ef      	b.n	27d6e <pend+0x26>
	__asm__ volatile(
   27d8e:	f387 8811 	msr	BASEPRI, r7
   27d92:	f3bf 8f6f 	isb	sy
   27d96:	2401      	movs	r4, #1
   27d98:	b99c      	cbnz	r4, 27dc2 <pend+0x7a>
		add_to_waitq_locked(thread, wait_q);
   27d9a:	4631      	mov	r1, r6
   27d9c:	4628      	mov	r0, r5
   27d9e:	f7ff ff95 	bl	27ccc <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27da2:	480b      	ldr	r0, [pc, #44]	; (27dd0 <pend+0x88>)
   27da4:	f7fe f998 	bl	260d8 <z_spin_unlock_valid>
   27da8:	2800      	cmp	r0, #0
   27daa:	d1f0      	bne.n	27d8e <pend+0x46>
   27dac:	4c09      	ldr	r4, [pc, #36]	; (27dd4 <pend+0x8c>)
   27dae:	22b9      	movs	r2, #185	; 0xb9
   27db0:	4621      	mov	r1, r4
   27db2:	4809      	ldr	r0, [pc, #36]	; (27dd8 <pend+0x90>)
   27db4:	f003 f96b 	bl	2b08e <assert_print>
   27db8:	21b9      	movs	r1, #185	; 0xb9
   27dba:	4620      	mov	r0, r4
   27dbc:	f003 f960 	bl	2b080 <assert_post_action>
   27dc0:	e7e5      	b.n	27d8e <pend+0x46>
	add_thread_timeout(thread, timeout);
   27dc2:	464a      	mov	r2, r9
   27dc4:	4643      	mov	r3, r8
   27dc6:	4628      	mov	r0, r5
   27dc8:	f7ff fb14 	bl	273f4 <add_thread_timeout>
}
   27dcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   27dd0:	20003734 	.word	0x20003734
   27dd4:	000319f0 	.word	0x000319f0
   27dd8:	000318f8 	.word	0x000318f8

00027ddc <z_pend_curr>:
{
   27ddc:	b538      	push	{r3, r4, r5, lr}
   27dde:	4605      	mov	r5, r0
   27de0:	460c      	mov	r4, r1
   27de2:	4611      	mov	r1, r2
	pending_current = _current;
   27de4:	4b0d      	ldr	r3, [pc, #52]	; (27e1c <z_pend_curr+0x40>)
   27de6:	6898      	ldr	r0, [r3, #8]
   27de8:	4b0d      	ldr	r3, [pc, #52]	; (27e20 <z_pend_curr+0x44>)
   27dea:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   27dec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   27df0:	f7ff ffaa 	bl	27d48 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27df4:	4628      	mov	r0, r5
   27df6:	f7fe f96f 	bl	260d8 <z_spin_unlock_valid>
   27dfa:	b118      	cbz	r0, 27e04 <z_pend_curr+0x28>
   27dfc:	4620      	mov	r0, r4
   27dfe:	f7ed fe59 	bl	15ab4 <arch_swap>
}
   27e02:	bd38      	pop	{r3, r4, r5, pc}
   27e04:	4d07      	ldr	r5, [pc, #28]	; (27e24 <z_pend_curr+0x48>)
   27e06:	22d0      	movs	r2, #208	; 0xd0
   27e08:	4629      	mov	r1, r5
   27e0a:	4807      	ldr	r0, [pc, #28]	; (27e28 <z_pend_curr+0x4c>)
   27e0c:	f003 f93f 	bl	2b08e <assert_print>
   27e10:	21d0      	movs	r1, #208	; 0xd0
   27e12:	4628      	mov	r0, r5
   27e14:	f003 f934 	bl	2b080 <assert_post_action>
   27e18:	e7f0      	b.n	27dfc <z_pend_curr+0x20>
   27e1a:	bf00      	nop
   27e1c:	200036f4 	.word	0x200036f4
   27e20:	20003730 	.word	0x20003730
   27e24:	000319f0 	.word	0x000319f0
   27e28:	000318f8 	.word	0x000318f8

00027e2c <z_set_prio>:
{
   27e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27e30:	4604      	mov	r4, r0
   27e32:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
   27e34:	2500      	movs	r5, #0
	__asm__ volatile(
   27e36:	f04f 0340 	mov.w	r3, #64	; 0x40
   27e3a:	f3ef 8811 	mrs	r8, BASEPRI
   27e3e:	f383 8812 	msr	BASEPRI_MAX, r3
   27e42:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27e46:	483f      	ldr	r0, [pc, #252]	; (27f44 <z_set_prio+0x118>)
   27e48:	f7fe f936 	bl	260b8 <z_spin_lock_valid>
   27e4c:	b120      	cbz	r0, 27e58 <z_set_prio+0x2c>
	z_spin_lock_set_owner(l);
   27e4e:	483d      	ldr	r0, [pc, #244]	; (27f44 <z_set_prio+0x118>)
   27e50:	f7fe f952 	bl	260f8 <z_spin_lock_set_owner>
	bool need_sched = 0;
   27e54:	2700      	movs	r7, #0
	return k;
   27e56:	e018      	b.n	27e8a <z_set_prio+0x5e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27e58:	4f3b      	ldr	r7, [pc, #236]	; (27f48 <z_set_prio+0x11c>)
   27e5a:	228e      	movs	r2, #142	; 0x8e
   27e5c:	4639      	mov	r1, r7
   27e5e:	483b      	ldr	r0, [pc, #236]	; (27f4c <z_set_prio+0x120>)
   27e60:	f003 f915 	bl	2b08e <assert_print>
   27e64:	218e      	movs	r1, #142	; 0x8e
   27e66:	4638      	mov	r0, r7
   27e68:	f003 f90a 	bl	2b080 <assert_post_action>
   27e6c:	e7ef      	b.n	27e4e <z_set_prio+0x22>
		if (need_sched) {
   27e6e:	f013 0701 	ands.w	r7, r3, #1
   27e72:	d116      	bne.n	27ea2 <z_set_prio+0x76>
			thread->base.prio = prio;
   27e74:	73a6      	strb	r6, [r4, #14]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27e76:	4833      	ldr	r0, [pc, #204]	; (27f44 <z_set_prio+0x118>)
   27e78:	f7fe f92e 	bl	260d8 <z_spin_unlock_valid>
   27e7c:	2800      	cmp	r0, #0
   27e7e:	d052      	beq.n	27f26 <z_set_prio+0xfa>
	__asm__ volatile(
   27e80:	f388 8811 	msr	BASEPRI, r8
   27e84:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   27e88:	2501      	movs	r5, #1
   27e8a:	462b      	mov	r3, r5
   27e8c:	2d00      	cmp	r5, #0
   27e8e:	d155      	bne.n	27f3c <z_set_prio+0x110>
	uint8_t state = thread->base.thread_state;
   27e90:	7b62      	ldrb	r2, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   27e92:	f012 0f1f 	tst.w	r2, #31
   27e96:	d1ea      	bne.n	27e6e <z_set_prio+0x42>
	return node->next != NULL;
   27e98:	69a1      	ldr	r1, [r4, #24]
   27e9a:	2900      	cmp	r1, #0
   27e9c:	d1e7      	bne.n	27e6e <z_set_prio+0x42>
   27e9e:	2301      	movs	r3, #1
   27ea0:	e7e5      	b.n	27e6e <z_set_prio+0x42>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   27ea2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   27ea6:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   27ea8:	4621      	mov	r1, r4
   27eaa:	4829      	ldr	r0, [pc, #164]	; (27f50 <z_set_prio+0x124>)
   27eac:	f7ff fc10 	bl	276d0 <z_priq_dumb_remove>
				thread->base.prio = prio;
   27eb0:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   27eb2:	7b63      	ldrb	r3, [r4, #13]
   27eb4:	f063 037f 	orn	r3, r3, #127	; 0x7f
   27eb8:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   27eba:	4b26      	ldr	r3, [pc, #152]	; (27f54 <z_set_prio+0x128>)
   27ebc:	429c      	cmp	r4, r3
   27ebe:	d01f      	beq.n	27f00 <z_set_prio+0xd4>
	return list->head == list;
   27ec0:	4b25      	ldr	r3, [pc, #148]	; (27f58 <z_set_prio+0x12c>)
   27ec2:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27ec6:	429d      	cmp	r5, r3
   27ec8:	d02b      	beq.n	27f22 <z_set_prio+0xf6>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   27eca:	b16d      	cbz	r5, 27ee8 <z_set_prio+0xbc>
		if (z_sched_prio_cmp(thread, t) > 0) {
   27ecc:	4629      	mov	r1, r5
   27ece:	4620      	mov	r0, r4
   27ed0:	f008 fe0f 	bl	30af2 <z_sched_prio_cmp>
   27ed4:	2800      	cmp	r0, #0
   27ed6:	dc1e      	bgt.n	27f16 <z_set_prio+0xea>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   27ed8:	b135      	cbz	r5, 27ee8 <z_set_prio+0xbc>
	return (node == list->tail) ? NULL : node->next;
   27eda:	4b1f      	ldr	r3, [pc, #124]	; (27f58 <z_set_prio+0x12c>)
   27edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   27ede:	429d      	cmp	r5, r3
   27ee0:	d002      	beq.n	27ee8 <z_set_prio+0xbc>
   27ee2:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   27ee4:	2d00      	cmp	r5, #0
   27ee6:	d1f0      	bne.n	27eca <z_set_prio+0x9e>
	sys_dnode_t *const tail = list->tail;
   27ee8:	4b1b      	ldr	r3, [pc, #108]	; (27f58 <z_set_prio+0x12c>)
   27eea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   27eec:	f103 0120 	add.w	r1, r3, #32
   27ef0:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   27ef2:	6062      	str	r2, [r4, #4]
	tail->next = node;
   27ef4:	6014      	str	r4, [r2, #0]
	list->tail = node;
   27ef6:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
   27ef8:	2001      	movs	r0, #1
   27efa:	f7ff fc55 	bl	277a8 <update_cache>
   27efe:	e7ba      	b.n	27e76 <z_set_prio+0x4a>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   27f00:	4d16      	ldr	r5, [pc, #88]	; (27f5c <z_set_prio+0x130>)
   27f02:	22ba      	movs	r2, #186	; 0xba
   27f04:	4629      	mov	r1, r5
   27f06:	4811      	ldr	r0, [pc, #68]	; (27f4c <z_set_prio+0x120>)
   27f08:	f003 f8c1 	bl	2b08e <assert_print>
   27f0c:	21ba      	movs	r1, #186	; 0xba
   27f0e:	4628      	mov	r0, r5
   27f10:	f003 f8b6 	bl	2b080 <assert_post_action>
   27f14:	e7d4      	b.n	27ec0 <z_set_prio+0x94>
	sys_dnode_t *const prev = successor->prev;
   27f16:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   27f18:	6063      	str	r3, [r4, #4]
	node->next = successor;
   27f1a:	6025      	str	r5, [r4, #0]
	prev->next = node;
   27f1c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   27f1e:	606c      	str	r4, [r5, #4]
}
   27f20:	e7ea      	b.n	27ef8 <z_set_prio+0xcc>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   27f22:	2500      	movs	r5, #0
   27f24:	e7d1      	b.n	27eca <z_set_prio+0x9e>
   27f26:	4d08      	ldr	r5, [pc, #32]	; (27f48 <z_set_prio+0x11c>)
   27f28:	22b9      	movs	r2, #185	; 0xb9
   27f2a:	4629      	mov	r1, r5
   27f2c:	4807      	ldr	r0, [pc, #28]	; (27f4c <z_set_prio+0x120>)
   27f2e:	f003 f8ae 	bl	2b08e <assert_print>
   27f32:	21b9      	movs	r1, #185	; 0xb9
   27f34:	4628      	mov	r0, r5
   27f36:	f003 f8a3 	bl	2b080 <assert_post_action>
   27f3a:	e7a1      	b.n	27e80 <z_set_prio+0x54>
}
   27f3c:	4638      	mov	r0, r7
   27f3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   27f42:	bf00      	nop
   27f44:	20003734 	.word	0x20003734
   27f48:	000319f0 	.word	0x000319f0
   27f4c:	000318f8 	.word	0x000318f8
   27f50:	20003714 	.word	0x20003714
   27f54:	20001eb0 	.word	0x20001eb0
   27f58:	200036f4 	.word	0x200036f4
   27f5c:	000350cc 	.word	0x000350cc

00027f60 <z_impl_k_thread_suspend>:
{
   27f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27f62:	4604      	mov	r4, r0
   27f64:	3018      	adds	r0, #24
   27f66:	f000 fd8d 	bl	28a84 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
   27f6a:	2500      	movs	r5, #0
	__asm__ volatile(
   27f6c:	f04f 0340 	mov.w	r3, #64	; 0x40
   27f70:	f3ef 8611 	mrs	r6, BASEPRI
   27f74:	f383 8812 	msr	BASEPRI_MAX, r3
   27f78:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27f7c:	4828      	ldr	r0, [pc, #160]	; (28020 <z_impl_k_thread_suspend+0xc0>)
   27f7e:	f7fe f89b 	bl	260b8 <z_spin_lock_valid>
   27f82:	b118      	cbz	r0, 27f8c <z_impl_k_thread_suspend+0x2c>
	z_spin_lock_set_owner(l);
   27f84:	4826      	ldr	r0, [pc, #152]	; (28020 <z_impl_k_thread_suspend+0xc0>)
   27f86:	f7fe f8b7 	bl	260f8 <z_spin_lock_set_owner>
	return k;
   27f8a:	e017      	b.n	27fbc <z_impl_k_thread_suspend+0x5c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27f8c:	4f25      	ldr	r7, [pc, #148]	; (28024 <z_impl_k_thread_suspend+0xc4>)
   27f8e:	228e      	movs	r2, #142	; 0x8e
   27f90:	4639      	mov	r1, r7
   27f92:	4825      	ldr	r0, [pc, #148]	; (28028 <z_impl_k_thread_suspend+0xc8>)
   27f94:	f003 f87b 	bl	2b08e <assert_print>
   27f98:	218e      	movs	r1, #142	; 0x8e
   27f9a:	4638      	mov	r0, r7
   27f9c:	f003 f870 	bl	2b080 <assert_post_action>
   27fa0:	e7f0      	b.n	27f84 <z_impl_k_thread_suspend+0x24>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   27fa2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   27fa6:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   27fa8:	4621      	mov	r1, r4
   27faa:	4820      	ldr	r0, [pc, #128]	; (2802c <z_impl_k_thread_suspend+0xcc>)
   27fac:	f7ff fb90 	bl	276d0 <z_priq_dumb_remove>
}
   27fb0:	e00a      	b.n	27fc8 <z_impl_k_thread_suspend+0x68>
	__asm__ volatile(
   27fb2:	f386 8811 	msr	BASEPRI, r6
   27fb6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   27fba:	2501      	movs	r5, #1
   27fbc:	bb05      	cbnz	r5, 28000 <z_impl_k_thread_suspend+0xa0>
	return (thread->base.thread_state & state) != 0U;
   27fbe:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
   27fc0:	f994 300d 	ldrsb.w	r3, [r4, #13]
   27fc4:	2b00      	cmp	r3, #0
   27fc6:	dbec      	blt.n	27fa2 <z_impl_k_thread_suspend+0x42>
	thread->base.thread_state |= _THREAD_SUSPENDED;
   27fc8:	7b63      	ldrb	r3, [r4, #13]
   27fca:	f043 0310 	orr.w	r3, r3, #16
   27fce:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   27fd0:	4b17      	ldr	r3, [pc, #92]	; (28030 <z_impl_k_thread_suspend+0xd0>)
   27fd2:	6898      	ldr	r0, [r3, #8]
   27fd4:	42a0      	cmp	r0, r4
   27fd6:	bf14      	ite	ne
   27fd8:	2000      	movne	r0, #0
   27fda:	2001      	moveq	r0, #1
   27fdc:	f7ff fbe4 	bl	277a8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27fe0:	480f      	ldr	r0, [pc, #60]	; (28020 <z_impl_k_thread_suspend+0xc0>)
   27fe2:	f7fe f879 	bl	260d8 <z_spin_unlock_valid>
   27fe6:	2800      	cmp	r0, #0
   27fe8:	d1e3      	bne.n	27fb2 <z_impl_k_thread_suspend+0x52>
   27fea:	4d0e      	ldr	r5, [pc, #56]	; (28024 <z_impl_k_thread_suspend+0xc4>)
   27fec:	22b9      	movs	r2, #185	; 0xb9
   27fee:	4629      	mov	r1, r5
   27ff0:	480d      	ldr	r0, [pc, #52]	; (28028 <z_impl_k_thread_suspend+0xc8>)
   27ff2:	f003 f84c 	bl	2b08e <assert_print>
   27ff6:	21b9      	movs	r1, #185	; 0xb9
   27ff8:	4628      	mov	r0, r5
   27ffa:	f003 f841 	bl	2b080 <assert_post_action>
   27ffe:	e7d8      	b.n	27fb2 <z_impl_k_thread_suspend+0x52>
	if (thread == _current) {
   28000:	4b0b      	ldr	r3, [pc, #44]	; (28030 <z_impl_k_thread_suspend+0xd0>)
   28002:	689b      	ldr	r3, [r3, #8]
   28004:	42a3      	cmp	r3, r4
   28006:	d000      	beq.n	2800a <z_impl_k_thread_suspend+0xaa>
}
   28008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__asm__ volatile(
   2800a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2800e:	f3ef 8011 	mrs	r0, BASEPRI
   28012:	f383 8812 	msr	BASEPRI_MAX, r3
   28016:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2801a:	f008 fd74 	bl	30b06 <z_reschedule_irqlock>
   2801e:	e7f3      	b.n	28008 <z_impl_k_thread_suspend+0xa8>
   28020:	20003734 	.word	0x20003734
   28024:	000319f0 	.word	0x000319f0
   28028:	000318f8 	.word	0x000318f8
   2802c:	20003714 	.word	0x20003714
   28030:	200036f4 	.word	0x200036f4

00028034 <k_sched_unlock>:
{
   28034:	b570      	push	{r4, r5, r6, lr}
	LOCKED(&sched_spinlock) {
   28036:	2400      	movs	r4, #0
   28038:	f04f 0340 	mov.w	r3, #64	; 0x40
   2803c:	f3ef 8511 	mrs	r5, BASEPRI
   28040:	f383 8812 	msr	BASEPRI_MAX, r3
   28044:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28048:	482f      	ldr	r0, [pc, #188]	; (28108 <k_sched_unlock+0xd4>)
   2804a:	f7fe f835 	bl	260b8 <z_spin_lock_valid>
   2804e:	b118      	cbz	r0, 28058 <k_sched_unlock+0x24>
	z_spin_lock_set_owner(l);
   28050:	482d      	ldr	r0, [pc, #180]	; (28108 <k_sched_unlock+0xd4>)
   28052:	f7fe f851 	bl	260f8 <z_spin_lock_set_owner>
	return k;
   28056:	e029      	b.n	280ac <k_sched_unlock+0x78>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28058:	4e2c      	ldr	r6, [pc, #176]	; (2810c <k_sched_unlock+0xd8>)
   2805a:	228e      	movs	r2, #142	; 0x8e
   2805c:	4631      	mov	r1, r6
   2805e:	482c      	ldr	r0, [pc, #176]	; (28110 <k_sched_unlock+0xdc>)
   28060:	f003 f815 	bl	2b08e <assert_print>
   28064:	218e      	movs	r1, #142	; 0x8e
   28066:	4630      	mov	r0, r6
   28068:	f003 f80a 	bl	2b080 <assert_post_action>
   2806c:	e7f0      	b.n	28050 <k_sched_unlock+0x1c>
		__ASSERT(_current->base.sched_locked != 0U, "");
   2806e:	4c29      	ldr	r4, [pc, #164]	; (28114 <k_sched_unlock+0xe0>)
   28070:	f240 32d6 	movw	r2, #982	; 0x3d6
   28074:	4621      	mov	r1, r4
   28076:	4826      	ldr	r0, [pc, #152]	; (28110 <k_sched_unlock+0xdc>)
   28078:	f003 f809 	bl	2b08e <assert_print>
   2807c:	f240 31d6 	movw	r1, #982	; 0x3d6
   28080:	4620      	mov	r0, r4
   28082:	f002 fffd 	bl	2b080 <assert_post_action>
   28086:	e017      	b.n	280b8 <k_sched_unlock+0x84>
		__ASSERT(!arch_is_in_isr(), "");
   28088:	4c22      	ldr	r4, [pc, #136]	; (28114 <k_sched_unlock+0xe0>)
   2808a:	f240 32d7 	movw	r2, #983	; 0x3d7
   2808e:	4621      	mov	r1, r4
   28090:	481f      	ldr	r0, [pc, #124]	; (28110 <k_sched_unlock+0xdc>)
   28092:	f002 fffc 	bl	2b08e <assert_print>
   28096:	f240 31d7 	movw	r1, #983	; 0x3d7
   2809a:	4620      	mov	r0, r4
   2809c:	f002 fff0 	bl	2b080 <assert_post_action>
   280a0:	e00e      	b.n	280c0 <k_sched_unlock+0x8c>
	__asm__ volatile(
   280a2:	f385 8811 	msr	BASEPRI, r5
   280a6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   280aa:	2401      	movs	r4, #1
   280ac:	bb04      	cbnz	r4, 280f0 <k_sched_unlock+0xbc>
		__ASSERT(_current->base.sched_locked != 0U, "");
   280ae:	4b1a      	ldr	r3, [pc, #104]	; (28118 <k_sched_unlock+0xe4>)
   280b0:	689b      	ldr	r3, [r3, #8]
   280b2:	7bdb      	ldrb	r3, [r3, #15]
   280b4:	2b00      	cmp	r3, #0
   280b6:	d0da      	beq.n	2806e <k_sched_unlock+0x3a>
   280b8:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   280bc:	2b00      	cmp	r3, #0
   280be:	d1e3      	bne.n	28088 <k_sched_unlock+0x54>
		++_current->base.sched_locked;
   280c0:	4b15      	ldr	r3, [pc, #84]	; (28118 <k_sched_unlock+0xe4>)
   280c2:	689a      	ldr	r2, [r3, #8]
   280c4:	7bd3      	ldrb	r3, [r2, #15]
   280c6:	3301      	adds	r3, #1
   280c8:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   280ca:	2000      	movs	r0, #0
   280cc:	f7ff fb6c 	bl	277a8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   280d0:	480d      	ldr	r0, [pc, #52]	; (28108 <k_sched_unlock+0xd4>)
   280d2:	f7fe f801 	bl	260d8 <z_spin_unlock_valid>
   280d6:	2800      	cmp	r0, #0
   280d8:	d1e3      	bne.n	280a2 <k_sched_unlock+0x6e>
   280da:	4c0c      	ldr	r4, [pc, #48]	; (2810c <k_sched_unlock+0xd8>)
   280dc:	22b9      	movs	r2, #185	; 0xb9
   280de:	4621      	mov	r1, r4
   280e0:	480b      	ldr	r0, [pc, #44]	; (28110 <k_sched_unlock+0xdc>)
   280e2:	f002 ffd4 	bl	2b08e <assert_print>
   280e6:	21b9      	movs	r1, #185	; 0xb9
   280e8:	4620      	mov	r0, r4
   280ea:	f002 ffc9 	bl	2b080 <assert_post_action>
   280ee:	e7d8      	b.n	280a2 <k_sched_unlock+0x6e>
	__asm__ volatile(
   280f0:	f04f 0340 	mov.w	r3, #64	; 0x40
   280f4:	f3ef 8011 	mrs	r0, BASEPRI
   280f8:	f383 8812 	msr	BASEPRI_MAX, r3
   280fc:	f3bf 8f6f 	isb	sy
   28100:	f008 fd01 	bl	30b06 <z_reschedule_irqlock>
}
   28104:	bd70      	pop	{r4, r5, r6, pc}
   28106:	bf00      	nop
   28108:	20003734 	.word	0x20003734
   2810c:	000319f0 	.word	0x000319f0
   28110:	000318f8 	.word	0x000318f8
   28114:	000350cc 	.word	0x000350cc
   28118:	200036f4 	.word	0x200036f4

0002811c <end_thread>:
static void end_thread(struct k_thread *thread)
{
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
   2811c:	7b43      	ldrb	r3, [r0, #13]
   2811e:	f013 0f08 	tst.w	r3, #8
   28122:	d142      	bne.n	281aa <end_thread+0x8e>
{
   28124:	b570      	push	{r4, r5, r6, lr}
   28126:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
   28128:	f043 0308 	orr.w	r3, r3, #8
   2812c:	7343      	strb	r3, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
   2812e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   28132:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
   28134:	f013 0f80 	tst.w	r3, #128	; 0x80
   28138:	d12b      	bne.n	28192 <end_thread+0x76>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
   2813a:	68ab      	ldr	r3, [r5, #8]
   2813c:	b15b      	cbz	r3, 28156 <end_thread+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   2813e:	4628      	mov	r0, r5
   28140:	f7ff f940 	bl	273c4 <pended_on_thread>
   28144:	4629      	mov	r1, r5
   28146:	f7ff fac3 	bl	276d0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2814a:	7b6b      	ldrb	r3, [r5, #13]
   2814c:	f023 0302 	bic.w	r3, r3, #2
   28150:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
   28152:	2300      	movs	r3, #0
   28154:	60ab      	str	r3, [r5, #8]
   28156:	f105 0018 	add.w	r0, r5, #24
   2815a:	f000 fc93 	bl	28a84 <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
   2815e:	3558      	adds	r5, #88	; 0x58
	return list->head == list;
   28160:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28162:	42ac      	cmp	r4, r5
   28164:	d01d      	beq.n	281a2 <end_thread+0x86>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   28166:	b1e4      	cbz	r4, 281a2 <end_thread+0x86>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   28168:	4620      	mov	r0, r4
   2816a:	f7ff f92b 	bl	273c4 <pended_on_thread>
   2816e:	4621      	mov	r1, r4
   28170:	f7ff faae 	bl	276d0 <z_priq_dumb_remove>
   28174:	7b63      	ldrb	r3, [r4, #13]
   28176:	f023 0302 	bic.w	r3, r3, #2
   2817a:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   2817c:	2600      	movs	r6, #0
   2817e:	60a6      	str	r6, [r4, #8]
   28180:	f104 0018 	add.w	r0, r4, #24
   28184:	f000 fc7e 	bl	28a84 <z_abort_timeout>
   28188:	67e6      	str	r6, [r4, #124]	; 0x7c
		ready_thread(thread);
   2818a:	4620      	mov	r0, r4
   2818c:	f7ff fc42 	bl	27a14 <ready_thread>
   28190:	e7e6      	b.n	28160 <end_thread+0x44>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   28192:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   28196:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   28198:	4601      	mov	r1, r0
   2819a:	4804      	ldr	r0, [pc, #16]	; (281ac <end_thread+0x90>)
   2819c:	f7ff fa98 	bl	276d0 <z_priq_dumb_remove>
}
   281a0:	e7cb      	b.n	2813a <end_thread+0x1e>
		update_cache(1);
   281a2:	2001      	movs	r0, #1
   281a4:	f7ff fb00 	bl	277a8 <update_cache>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
   281a8:	bd70      	pop	{r4, r5, r6, pc}
   281aa:	4770      	bx	lr
   281ac:	20003714 	.word	0x20003714

000281b0 <z_unpend1_no_timeout>:
{
   281b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   281b2:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   281b4:	2500      	movs	r5, #0
   281b6:	f04f 0340 	mov.w	r3, #64	; 0x40
   281ba:	f3ef 8711 	mrs	r7, BASEPRI
   281be:	f383 8812 	msr	BASEPRI_MAX, r3
   281c2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   281c6:	481e      	ldr	r0, [pc, #120]	; (28240 <z_unpend1_no_timeout+0x90>)
   281c8:	f7fd ff76 	bl	260b8 <z_spin_lock_valid>
   281cc:	b120      	cbz	r0, 281d8 <z_unpend1_no_timeout+0x28>
	z_spin_lock_set_owner(l);
   281ce:	481c      	ldr	r0, [pc, #112]	; (28240 <z_unpend1_no_timeout+0x90>)
   281d0:	f7fd ff92 	bl	260f8 <z_spin_lock_set_owner>
	struct k_thread *thread = NULL;
   281d4:	2400      	movs	r4, #0
	return k;
   281d6:	e013      	b.n	28200 <z_unpend1_no_timeout+0x50>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   281d8:	4c1a      	ldr	r4, [pc, #104]	; (28244 <z_unpend1_no_timeout+0x94>)
   281da:	228e      	movs	r2, #142	; 0x8e
   281dc:	4621      	mov	r1, r4
   281de:	481a      	ldr	r0, [pc, #104]	; (28248 <z_unpend1_no_timeout+0x98>)
   281e0:	f002 ff55 	bl	2b08e <assert_print>
   281e4:	218e      	movs	r1, #142	; 0x8e
   281e6:	4620      	mov	r0, r4
   281e8:	f002 ff4a 	bl	2b080 <assert_post_action>
   281ec:	e7ef      	b.n	281ce <z_unpend1_no_timeout+0x1e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   281ee:	4814      	ldr	r0, [pc, #80]	; (28240 <z_unpend1_no_timeout+0x90>)
   281f0:	f7fd ff72 	bl	260d8 <z_spin_unlock_valid>
   281f4:	b1b8      	cbz	r0, 28226 <z_unpend1_no_timeout+0x76>
	__asm__ volatile(
   281f6:	f387 8811 	msr	BASEPRI, r7
   281fa:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   281fe:	2501      	movs	r5, #1
   28200:	b9e5      	cbnz	r5, 2823c <z_unpend1_no_timeout+0x8c>
		thread = _priq_wait_best(&wait_q->waitq);
   28202:	4630      	mov	r0, r6
   28204:	f008 fc94 	bl	30b30 <z_priq_dumb_best>
		if (thread != NULL) {
   28208:	4604      	mov	r4, r0
   2820a:	2800      	cmp	r0, #0
   2820c:	d0ef      	beq.n	281ee <z_unpend1_no_timeout+0x3e>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   2820e:	f7ff f8d9 	bl	273c4 <pended_on_thread>
   28212:	4621      	mov	r1, r4
   28214:	f7ff fa5c 	bl	276d0 <z_priq_dumb_remove>
   28218:	7b63      	ldrb	r3, [r4, #13]
   2821a:	f023 0302 	bic.w	r3, r3, #2
   2821e:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   28220:	2300      	movs	r3, #0
   28222:	60a3      	str	r3, [r4, #8]
}
   28224:	e7e3      	b.n	281ee <z_unpend1_no_timeout+0x3e>
   28226:	4d07      	ldr	r5, [pc, #28]	; (28244 <z_unpend1_no_timeout+0x94>)
   28228:	22b9      	movs	r2, #185	; 0xb9
   2822a:	4629      	mov	r1, r5
   2822c:	4806      	ldr	r0, [pc, #24]	; (28248 <z_unpend1_no_timeout+0x98>)
   2822e:	f002 ff2e 	bl	2b08e <assert_print>
   28232:	21b9      	movs	r1, #185	; 0xb9
   28234:	4628      	mov	r0, r5
   28236:	f002 ff23 	bl	2b080 <assert_post_action>
   2823a:	e7dc      	b.n	281f6 <z_unpend1_no_timeout+0x46>
}
   2823c:	4620      	mov	r0, r4
   2823e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   28240:	20003734 	.word	0x20003734
   28244:	000319f0 	.word	0x000319f0
   28248:	000318f8 	.word	0x000318f8

0002824c <z_unpend_first_thread>:
{
   2824c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2824e:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   28250:	2500      	movs	r5, #0
	__asm__ volatile(
   28252:	f04f 0340 	mov.w	r3, #64	; 0x40
   28256:	f3ef 8711 	mrs	r7, BASEPRI
   2825a:	f383 8812 	msr	BASEPRI_MAX, r3
   2825e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28262:	4820      	ldr	r0, [pc, #128]	; (282e4 <z_unpend_first_thread+0x98>)
   28264:	f7fd ff28 	bl	260b8 <z_spin_lock_valid>
   28268:	b120      	cbz	r0, 28274 <z_unpend_first_thread+0x28>
	z_spin_lock_set_owner(l);
   2826a:	481e      	ldr	r0, [pc, #120]	; (282e4 <z_unpend_first_thread+0x98>)
   2826c:	f7fd ff44 	bl	260f8 <z_spin_lock_set_owner>
	struct k_thread *thread = NULL;
   28270:	2400      	movs	r4, #0
	return k;
   28272:	e013      	b.n	2829c <z_unpend_first_thread+0x50>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28274:	4c1c      	ldr	r4, [pc, #112]	; (282e8 <z_unpend_first_thread+0x9c>)
   28276:	228e      	movs	r2, #142	; 0x8e
   28278:	4621      	mov	r1, r4
   2827a:	481c      	ldr	r0, [pc, #112]	; (282ec <z_unpend_first_thread+0xa0>)
   2827c:	f002 ff07 	bl	2b08e <assert_print>
   28280:	218e      	movs	r1, #142	; 0x8e
   28282:	4620      	mov	r0, r4
   28284:	f002 fefc 	bl	2b080 <assert_post_action>
   28288:	e7ef      	b.n	2826a <z_unpend_first_thread+0x1e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2828a:	4816      	ldr	r0, [pc, #88]	; (282e4 <z_unpend_first_thread+0x98>)
   2828c:	f7fd ff24 	bl	260d8 <z_spin_unlock_valid>
   28290:	b1d8      	cbz	r0, 282ca <z_unpend_first_thread+0x7e>
	__asm__ volatile(
   28292:	f387 8811 	msr	BASEPRI, r7
   28296:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   2829a:	2501      	movs	r5, #1
   2829c:	bb05      	cbnz	r5, 282e0 <z_unpend_first_thread+0x94>
		thread = _priq_wait_best(&wait_q->waitq);
   2829e:	4630      	mov	r0, r6
   282a0:	f008 fc46 	bl	30b30 <z_priq_dumb_best>
		if (thread != NULL) {
   282a4:	4604      	mov	r4, r0
   282a6:	2800      	cmp	r0, #0
   282a8:	d0ef      	beq.n	2828a <z_unpend_first_thread+0x3e>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   282aa:	f7ff f88b 	bl	273c4 <pended_on_thread>
   282ae:	4621      	mov	r1, r4
   282b0:	f7ff fa0e 	bl	276d0 <z_priq_dumb_remove>
   282b4:	7b63      	ldrb	r3, [r4, #13]
   282b6:	f023 0302 	bic.w	r3, r3, #2
   282ba:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   282bc:	2300      	movs	r3, #0
   282be:	60a3      	str	r3, [r4, #8]
   282c0:	f104 0018 	add.w	r0, r4, #24
   282c4:	f000 fbde 	bl	28a84 <z_abort_timeout>
   282c8:	e7df      	b.n	2828a <z_unpend_first_thread+0x3e>
   282ca:	4d07      	ldr	r5, [pc, #28]	; (282e8 <z_unpend_first_thread+0x9c>)
   282cc:	22b9      	movs	r2, #185	; 0xb9
   282ce:	4629      	mov	r1, r5
   282d0:	4806      	ldr	r0, [pc, #24]	; (282ec <z_unpend_first_thread+0xa0>)
   282d2:	f002 fedc 	bl	2b08e <assert_print>
   282d6:	21b9      	movs	r1, #185	; 0xb9
   282d8:	4628      	mov	r0, r5
   282da:	f002 fed1 	bl	2b080 <assert_post_action>
   282de:	e7d8      	b.n	28292 <z_unpend_first_thread+0x46>
}
   282e0:	4620      	mov	r0, r4
   282e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   282e4:	20003734 	.word	0x20003734
   282e8:	000319f0 	.word	0x000319f0
   282ec:	000318f8 	.word	0x000318f8

000282f0 <z_sched_init>:
{
   282f0:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
   282f2:	4804      	ldr	r0, [pc, #16]	; (28304 <z_sched_init+0x14>)
   282f4:	f008 fc33 	bl	30b5e <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   282f8:	2100      	movs	r1, #0
   282fa:	4608      	mov	r0, r1
   282fc:	f7ff f89e 	bl	2743c <k_sched_time_slice_set>
}
   28300:	bd08      	pop	{r3, pc}
   28302:	bf00      	nop
   28304:	20003710 	.word	0x20003710

00028308 <z_impl_k_yield>:
{
   28308:	b570      	push	{r4, r5, r6, lr}
   2830a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   2830e:	2b00      	cmp	r3, #0
   28310:	d148      	bne.n	283a4 <z_impl_k_yield+0x9c>
	__asm__ volatile(
   28312:	f04f 0340 	mov.w	r3, #64	; 0x40
   28316:	f3ef 8611 	mrs	r6, BASEPRI
   2831a:	f383 8812 	msr	BASEPRI_MAX, r3
   2831e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28322:	483b      	ldr	r0, [pc, #236]	; (28410 <z_impl_k_yield+0x108>)
   28324:	f7fd fec8 	bl	260b8 <z_spin_lock_valid>
   28328:	2800      	cmp	r0, #0
   2832a:	d048      	beq.n	283be <z_impl_k_yield+0xb6>
	z_spin_lock_set_owner(l);
   2832c:	4838      	ldr	r0, [pc, #224]	; (28410 <z_impl_k_yield+0x108>)
   2832e:	f7fd fee3 	bl	260f8 <z_spin_lock_set_owner>
		dequeue_thread(_current);
   28332:	4c38      	ldr	r4, [pc, #224]	; (28414 <z_impl_k_yield+0x10c>)
   28334:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   28336:	7b4b      	ldrb	r3, [r1, #13]
   28338:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2833c:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   2833e:	f104 0020 	add.w	r0, r4, #32
   28342:	f7ff f9c5 	bl	276d0 <z_priq_dumb_remove>
	queue_thread(_current);
   28346:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   28348:	7b6b      	ldrb	r3, [r5, #13]
   2834a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   2834e:	736b      	strb	r3, [r5, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   28350:	4b31      	ldr	r3, [pc, #196]	; (28418 <z_impl_k_yield+0x110>)
   28352:	429d      	cmp	r5, r3
   28354:	d03e      	beq.n	283d4 <z_impl_k_yield+0xcc>
	return list->head == list;
   28356:	4b2f      	ldr	r3, [pc, #188]	; (28414 <z_impl_k_yield+0x10c>)
   28358:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2835c:	429c      	cmp	r4, r3
   2835e:	d04a      	beq.n	283f6 <z_impl_k_yield+0xee>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   28360:	b16c      	cbz	r4, 2837e <z_impl_k_yield+0x76>
		if (z_sched_prio_cmp(thread, t) > 0) {
   28362:	4621      	mov	r1, r4
   28364:	4628      	mov	r0, r5
   28366:	f008 fbc4 	bl	30af2 <z_sched_prio_cmp>
   2836a:	2800      	cmp	r0, #0
   2836c:	dc3d      	bgt.n	283ea <z_impl_k_yield+0xe2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2836e:	b134      	cbz	r4, 2837e <z_impl_k_yield+0x76>
	return (node == list->tail) ? NULL : node->next;
   28370:	4b28      	ldr	r3, [pc, #160]	; (28414 <z_impl_k_yield+0x10c>)
   28372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   28374:	429c      	cmp	r4, r3
   28376:	d002      	beq.n	2837e <z_impl_k_yield+0x76>
   28378:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2837a:	2c00      	cmp	r4, #0
   2837c:	d1f0      	bne.n	28360 <z_impl_k_yield+0x58>
	sys_dnode_t *const tail = list->tail;
   2837e:	4b25      	ldr	r3, [pc, #148]	; (28414 <z_impl_k_yield+0x10c>)
   28380:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   28382:	f103 0120 	add.w	r1, r3, #32
   28386:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   28388:	606a      	str	r2, [r5, #4]
	tail->next = node;
   2838a:	6015      	str	r5, [r2, #0]
	list->tail = node;
   2838c:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
   2838e:	2001      	movs	r0, #1
   28390:	f7ff fa0a 	bl	277a8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28394:	481e      	ldr	r0, [pc, #120]	; (28410 <z_impl_k_yield+0x108>)
   28396:	f7fd fe9f 	bl	260d8 <z_spin_unlock_valid>
   2839a:	b370      	cbz	r0, 283fa <z_impl_k_yield+0xf2>
   2839c:	4630      	mov	r0, r6
   2839e:	f7ed fb89 	bl	15ab4 <arch_swap>
}
   283a2:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "");
   283a4:	4c1d      	ldr	r4, [pc, #116]	; (2841c <z_impl_k_yield+0x114>)
   283a6:	f240 525d 	movw	r2, #1373	; 0x55d
   283aa:	4621      	mov	r1, r4
   283ac:	481c      	ldr	r0, [pc, #112]	; (28420 <z_impl_k_yield+0x118>)
   283ae:	f002 fe6e 	bl	2b08e <assert_print>
   283b2:	f240 515d 	movw	r1, #1373	; 0x55d
   283b6:	4620      	mov	r0, r4
   283b8:	f002 fe62 	bl	2b080 <assert_post_action>
   283bc:	e7a9      	b.n	28312 <z_impl_k_yield+0xa>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   283be:	4c19      	ldr	r4, [pc, #100]	; (28424 <z_impl_k_yield+0x11c>)
   283c0:	228e      	movs	r2, #142	; 0x8e
   283c2:	4621      	mov	r1, r4
   283c4:	4816      	ldr	r0, [pc, #88]	; (28420 <z_impl_k_yield+0x118>)
   283c6:	f002 fe62 	bl	2b08e <assert_print>
   283ca:	218e      	movs	r1, #142	; 0x8e
   283cc:	4620      	mov	r0, r4
   283ce:	f002 fe57 	bl	2b080 <assert_post_action>
   283d2:	e7ab      	b.n	2832c <z_impl_k_yield+0x24>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   283d4:	4c11      	ldr	r4, [pc, #68]	; (2841c <z_impl_k_yield+0x114>)
   283d6:	22ba      	movs	r2, #186	; 0xba
   283d8:	4621      	mov	r1, r4
   283da:	4811      	ldr	r0, [pc, #68]	; (28420 <z_impl_k_yield+0x118>)
   283dc:	f002 fe57 	bl	2b08e <assert_print>
   283e0:	21ba      	movs	r1, #186	; 0xba
   283e2:	4620      	mov	r0, r4
   283e4:	f002 fe4c 	bl	2b080 <assert_post_action>
   283e8:	e7b5      	b.n	28356 <z_impl_k_yield+0x4e>
	sys_dnode_t *const prev = successor->prev;
   283ea:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   283ec:	606b      	str	r3, [r5, #4]
	node->next = successor;
   283ee:	602c      	str	r4, [r5, #0]
	prev->next = node;
   283f0:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   283f2:	6065      	str	r5, [r4, #4]
}
   283f4:	e7cb      	b.n	2838e <z_impl_k_yield+0x86>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   283f6:	2400      	movs	r4, #0
   283f8:	e7b2      	b.n	28360 <z_impl_k_yield+0x58>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   283fa:	4c0a      	ldr	r4, [pc, #40]	; (28424 <z_impl_k_yield+0x11c>)
   283fc:	22d0      	movs	r2, #208	; 0xd0
   283fe:	4621      	mov	r1, r4
   28400:	4807      	ldr	r0, [pc, #28]	; (28420 <z_impl_k_yield+0x118>)
   28402:	f002 fe44 	bl	2b08e <assert_print>
   28406:	21d0      	movs	r1, #208	; 0xd0
   28408:	4620      	mov	r0, r4
   2840a:	f002 fe39 	bl	2b080 <assert_post_action>
   2840e:	e7c5      	b.n	2839c <z_impl_k_yield+0x94>
   28410:	20003734 	.word	0x20003734
   28414:	200036f4 	.word	0x200036f4
   28418:	20001eb0 	.word	0x20001eb0
   2841c:	000350cc 	.word	0x000350cc
   28420:	000318f8 	.word	0x000318f8
   28424:	000319f0 	.word	0x000319f0

00028428 <z_tick_sleep>:
{
   28428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2842c:	4604      	mov	r4, r0
   2842e:	460e      	mov	r6, r1
   28430:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   28434:	2b00      	cmp	r3, #0
   28436:	d14d      	bne.n	284d4 <z_tick_sleep+0xac>
	if (ticks == 0) {
   28438:	ea54 0306 	orrs.w	r3, r4, r6
   2843c:	d057      	beq.n	284ee <z_tick_sleep+0xc6>
	if (Z_TICK_ABS(ticks) <= 0) {
   2843e:	f06f 0301 	mvn.w	r3, #1
   28442:	1b1b      	subs	r3, r3, r4
   28444:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   28448:	eb62 0206 	sbc.w	r2, r2, r6
   2844c:	2b01      	cmp	r3, #1
   2844e:	f172 0300 	sbcs.w	r3, r2, #0
   28452:	db50      	blt.n	284f6 <z_tick_sleep+0xce>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   28454:	f06f 0501 	mvn.w	r5, #1
   28458:	1b2d      	subs	r5, r5, r4
   2845a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2845e:	f3ef 8911 	mrs	r9, BASEPRI
   28462:	f383 8812 	msr	BASEPRI_MAX, r3
   28466:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2846a:	4836      	ldr	r0, [pc, #216]	; (28544 <z_tick_sleep+0x11c>)
   2846c:	f7fd fe24 	bl	260b8 <z_spin_lock_valid>
   28470:	2800      	cmp	r0, #0
   28472:	d044      	beq.n	284fe <z_tick_sleep+0xd6>
	z_spin_lock_set_owner(l);
   28474:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 28544 <z_tick_sleep+0x11c>
   28478:	4640      	mov	r0, r8
   2847a:	f7fd fe3d 	bl	260f8 <z_spin_lock_set_owner>
	pending_current = _current;
   2847e:	4f32      	ldr	r7, [pc, #200]	; (28548 <z_tick_sleep+0x120>)
   28480:	68b8      	ldr	r0, [r7, #8]
   28482:	4b32      	ldr	r3, [pc, #200]	; (2854c <z_tick_sleep+0x124>)
   28484:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   28486:	f7ff fc05 	bl	27c94 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   2848a:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   2848c:	4622      	mov	r2, r4
   2848e:	4633      	mov	r3, r6
   28490:	492f      	ldr	r1, [pc, #188]	; (28550 <z_tick_sleep+0x128>)
   28492:	3018      	adds	r0, #24
   28494:	f000 fa2c 	bl	288f0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   28498:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   2849a:	7b53      	ldrb	r3, [r2, #13]
   2849c:	f043 0310 	orr.w	r3, r3, #16
   284a0:	7353      	strb	r3, [r2, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   284a2:	4640      	mov	r0, r8
   284a4:	f7fd fe18 	bl	260d8 <z_spin_unlock_valid>
   284a8:	b3a0      	cbz	r0, 28514 <z_tick_sleep+0xec>
   284aa:	4648      	mov	r0, r9
   284ac:	f7ed fb02 	bl	15ab4 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   284b0:	4b25      	ldr	r3, [pc, #148]	; (28548 <z_tick_sleep+0x120>)
   284b2:	689b      	ldr	r3, [r3, #8]
	return (thread->base.thread_state & state) != 0U;
   284b4:	7b5b      	ldrb	r3, [r3, #13]
   284b6:	f013 0f10 	tst.w	r3, #16
   284ba:	d136      	bne.n	2852a <z_tick_sleep+0x102>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   284bc:	f008 fb6a 	bl	30b94 <sys_clock_tick_get_32>
   284c0:	1a28      	subs	r0, r5, r0
   284c2:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   284c6:	2801      	cmp	r0, #1
   284c8:	f173 0300 	sbcs.w	r3, r3, #0
   284cc:	da00      	bge.n	284d0 <z_tick_sleep+0xa8>
	return 0;
   284ce:	2000      	movs	r0, #0
}
   284d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(!arch_is_in_isr(), "");
   284d4:	4d1f      	ldr	r5, [pc, #124]	; (28554 <z_tick_sleep+0x12c>)
   284d6:	f240 5279 	movw	r2, #1401	; 0x579
   284da:	4629      	mov	r1, r5
   284dc:	481e      	ldr	r0, [pc, #120]	; (28558 <z_tick_sleep+0x130>)
   284de:	f002 fdd6 	bl	2b08e <assert_print>
   284e2:	f240 5179 	movw	r1, #1401	; 0x579
   284e6:	4628      	mov	r0, r5
   284e8:	f002 fdca 	bl	2b080 <assert_post_action>
   284ec:	e7a4      	b.n	28438 <z_tick_sleep+0x10>
	z_impl_k_yield();
   284ee:	f7ff ff0b 	bl	28308 <z_impl_k_yield>
		return 0;
   284f2:	2000      	movs	r0, #0
   284f4:	e7ec      	b.n	284d0 <z_tick_sleep+0xa8>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   284f6:	f008 fb4d 	bl	30b94 <sys_clock_tick_get_32>
   284fa:	1905      	adds	r5, r0, r4
   284fc:	e7ad      	b.n	2845a <z_tick_sleep+0x32>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   284fe:	4f17      	ldr	r7, [pc, #92]	; (2855c <z_tick_sleep+0x134>)
   28500:	228e      	movs	r2, #142	; 0x8e
   28502:	4639      	mov	r1, r7
   28504:	4814      	ldr	r0, [pc, #80]	; (28558 <z_tick_sleep+0x130>)
   28506:	f002 fdc2 	bl	2b08e <assert_print>
   2850a:	218e      	movs	r1, #142	; 0x8e
   2850c:	4638      	mov	r0, r7
   2850e:	f002 fdb7 	bl	2b080 <assert_post_action>
   28512:	e7af      	b.n	28474 <z_tick_sleep+0x4c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28514:	4c11      	ldr	r4, [pc, #68]	; (2855c <z_tick_sleep+0x134>)
   28516:	22d0      	movs	r2, #208	; 0xd0
   28518:	4621      	mov	r1, r4
   2851a:	480f      	ldr	r0, [pc, #60]	; (28558 <z_tick_sleep+0x130>)
   2851c:	f002 fdb7 	bl	2b08e <assert_print>
   28520:	21d0      	movs	r1, #208	; 0xd0
   28522:	4620      	mov	r0, r4
   28524:	f002 fdac 	bl	2b080 <assert_post_action>
   28528:	e7bf      	b.n	284aa <z_tick_sleep+0x82>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   2852a:	4c0a      	ldr	r4, [pc, #40]	; (28554 <z_tick_sleep+0x12c>)
   2852c:	f240 529a 	movw	r2, #1434	; 0x59a
   28530:	4621      	mov	r1, r4
   28532:	4809      	ldr	r0, [pc, #36]	; (28558 <z_tick_sleep+0x130>)
   28534:	f002 fdab 	bl	2b08e <assert_print>
   28538:	f240 519a 	movw	r1, #1434	; 0x59a
   2853c:	4620      	mov	r0, r4
   2853e:	f002 fd9f 	bl	2b080 <assert_post_action>
   28542:	e7bb      	b.n	284bc <z_tick_sleep+0x94>
   28544:	20003734 	.word	0x20003734
   28548:	200036f4 	.word	0x200036f4
   2854c:	20003730 	.word	0x20003730
   28550:	00027bd1 	.word	0x00027bd1
   28554:	000350cc 	.word	0x000350cc
   28558:	000318f8 	.word	0x000318f8
   2855c:	000319f0 	.word	0x000319f0

00028560 <z_impl_k_sleep>:
{
   28560:	b570      	push	{r4, r5, r6, lr}
   28562:	4605      	mov	r5, r0
   28564:	460c      	mov	r4, r1
   28566:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   2856a:	bb13      	cbnz	r3, 285b2 <z_impl_k_sleep+0x52>
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2856c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   28570:	bf08      	it	eq
   28572:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
   28576:	d029      	beq.n	285cc <z_impl_k_sleep+0x6c>
	ticks = z_tick_sleep(ticks);
   28578:	4628      	mov	r0, r5
   2857a:	4621      	mov	r1, r4
   2857c:	f7ff ff54 	bl	28428 <z_tick_sleep>
   28580:	4684      	mov	ip, r0
	int32_t ret = k_ticks_to_ms_floor64(ticks);
   28582:	17c2      	asrs	r2, r0, #31
			return ((t * to_hz + off) / from_hz);
   28584:	0151      	lsls	r1, r2, #5
   28586:	ea41 61d0 	orr.w	r1, r1, r0, lsr #27
   2858a:	0143      	lsls	r3, r0, #5
   2858c:	1a1b      	subs	r3, r3, r0
   2858e:	eb61 0102 	sbc.w	r1, r1, r2
   28592:	0088      	lsls	r0, r1, #2
   28594:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
   28598:	009b      	lsls	r3, r3, #2
   2859a:	eb13 030c 	adds.w	r3, r3, ip
   2859e:	eb42 0000 	adc.w	r0, r2, r0
   285a2:	00c0      	lsls	r0, r0, #3
   285a4:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
   285a8:	f3c3 3310 	ubfx	r3, r3, #12, #17
   285ac:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
}
   285b0:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "");
   285b2:	4e0a      	ldr	r6, [pc, #40]	; (285dc <z_impl_k_sleep+0x7c>)
   285b4:	f240 52a9 	movw	r2, #1449	; 0x5a9
   285b8:	4631      	mov	r1, r6
   285ba:	4809      	ldr	r0, [pc, #36]	; (285e0 <z_impl_k_sleep+0x80>)
   285bc:	f002 fd67 	bl	2b08e <assert_print>
   285c0:	f240 51a9 	movw	r1, #1449	; 0x5a9
   285c4:	4630      	mov	r0, r6
   285c6:	f002 fd5b 	bl	2b080 <assert_post_action>
   285ca:	e7cf      	b.n	2856c <z_impl_k_sleep+0xc>
		k_thread_suspend(_current);
   285cc:	4b05      	ldr	r3, [pc, #20]	; (285e4 <z_impl_k_sleep+0x84>)
   285ce:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   285d0:	f7ff fcc6 	bl	27f60 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   285d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   285d8:	e7ea      	b.n	285b0 <z_impl_k_sleep+0x50>
   285da:	bf00      	nop
   285dc:	000350cc 	.word	0x000350cc
   285e0:	000318f8 	.word	0x000318f8
   285e4:	200036f4 	.word	0x200036f4

000285e8 <z_impl_z_current_get>:
}
   285e8:	4b01      	ldr	r3, [pc, #4]	; (285f0 <z_impl_z_current_get+0x8>)
   285ea:	6898      	ldr	r0, [r3, #8]
   285ec:	4770      	bx	lr
   285ee:	bf00      	nop
   285f0:	200036f4 	.word	0x200036f4

000285f4 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
   285f4:	b570      	push	{r4, r5, r6, lr}
   285f6:	4604      	mov	r4, r0
   285f8:	f04f 0340 	mov.w	r3, #64	; 0x40
   285fc:	f3ef 8511 	mrs	r5, BASEPRI
   28600:	f383 8812 	msr	BASEPRI_MAX, r3
   28604:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28608:	4849      	ldr	r0, [pc, #292]	; (28730 <z_thread_abort+0x13c>)
   2860a:	f7fd fd55 	bl	260b8 <z_spin_lock_valid>
   2860e:	b1d8      	cbz	r0, 28648 <z_thread_abort+0x54>
	z_spin_lock_set_owner(l);
   28610:	4847      	ldr	r0, [pc, #284]	; (28730 <z_thread_abort+0x13c>)
   28612:	f7fd fd71 	bl	260f8 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   28616:	7b23      	ldrb	r3, [r4, #12]
   28618:	f013 0f01 	tst.w	r3, #1
   2861c:	d11f      	bne.n	2865e <z_thread_abort+0x6a>
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
		return;
	}

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   2861e:	7b63      	ldrb	r3, [r4, #13]
   28620:	f013 0f08 	tst.w	r3, #8
   28624:	d141      	bne.n	286aa <z_thread_abort+0xb6>
			z_swap(&sched_spinlock, key);
		}
		return; /* lock has been released */
	}
#endif
	end_thread(thread);
   28626:	4620      	mov	r0, r4
   28628:	f7ff fd78 	bl	2811c <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
   2862c:	4b41      	ldr	r3, [pc, #260]	; (28734 <z_thread_abort+0x140>)
   2862e:	689b      	ldr	r3, [r3, #8]
   28630:	42a3      	cmp	r3, r4
   28632:	d04e      	beq.n	286d2 <z_thread_abort+0xde>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28634:	483e      	ldr	r0, [pc, #248]	; (28730 <z_thread_abort+0x13c>)
   28636:	f7fd fd4f 	bl	260d8 <z_spin_unlock_valid>
   2863a:	2800      	cmp	r0, #0
   2863c:	d06c      	beq.n	28718 <z_thread_abort+0x124>
	__asm__ volatile(
   2863e:	f385 8811 	msr	BASEPRI, r5
   28642:	f3bf 8f6f 	isb	sy
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   28646:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28648:	4e3b      	ldr	r6, [pc, #236]	; (28738 <z_thread_abort+0x144>)
   2864a:	228e      	movs	r2, #142	; 0x8e
   2864c:	4631      	mov	r1, r6
   2864e:	483b      	ldr	r0, [pc, #236]	; (2873c <z_thread_abort+0x148>)
   28650:	f002 fd1d 	bl	2b08e <assert_print>
   28654:	218e      	movs	r1, #142	; 0x8e
   28656:	4630      	mov	r0, r6
   28658:	f002 fd12 	bl	2b080 <assert_post_action>
   2865c:	e7d8      	b.n	28610 <z_thread_abort+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2865e:	4834      	ldr	r0, [pc, #208]	; (28730 <z_thread_abort+0x13c>)
   28660:	f7fd fd3a 	bl	260d8 <z_spin_unlock_valid>
   28664:	b1b0      	cbz	r0, 28694 <z_thread_abort+0xa0>
   28666:	f385 8811 	msr	BASEPRI, r5
   2866a:	f3bf 8f6f 	isb	sy
		__ASSERT(false, "aborting essential thread %p", thread);
   2866e:	4c34      	ldr	r4, [pc, #208]	; (28740 <z_thread_abort+0x14c>)
   28670:	f240 62b5 	movw	r2, #1717	; 0x6b5
   28674:	4621      	mov	r1, r4
   28676:	4831      	ldr	r0, [pc, #196]	; (2873c <z_thread_abort+0x148>)
   28678:	f002 fd09 	bl	2b08e <assert_print>
   2867c:	f240 61b5 	movw	r1, #1717	; 0x6b5
   28680:	4620      	mov	r0, r4
   28682:	f002 fcfd 	bl	2b080 <assert_post_action>
		k_panic();
   28686:	4040      	eors	r0, r0
   28688:	f380 8811 	msr	BASEPRI, r0
   2868c:	f04f 0004 	mov.w	r0, #4
   28690:	df02      	svc	2
		return;
   28692:	e7d8      	b.n	28646 <z_thread_abort+0x52>
   28694:	4c28      	ldr	r4, [pc, #160]	; (28738 <z_thread_abort+0x144>)
   28696:	22b9      	movs	r2, #185	; 0xb9
   28698:	4621      	mov	r1, r4
   2869a:	4828      	ldr	r0, [pc, #160]	; (2873c <z_thread_abort+0x148>)
   2869c:	f002 fcf7 	bl	2b08e <assert_print>
   286a0:	21b9      	movs	r1, #185	; 0xb9
   286a2:	4620      	mov	r0, r4
   286a4:	f002 fcec 	bl	2b080 <assert_post_action>
   286a8:	e7dd      	b.n	28666 <z_thread_abort+0x72>
   286aa:	4821      	ldr	r0, [pc, #132]	; (28730 <z_thread_abort+0x13c>)
   286ac:	f7fd fd14 	bl	260d8 <z_spin_unlock_valid>
   286b0:	b120      	cbz	r0, 286bc <z_thread_abort+0xc8>
   286b2:	f385 8811 	msr	BASEPRI, r5
   286b6:	f3bf 8f6f 	isb	sy
		return;
   286ba:	e7c4      	b.n	28646 <z_thread_abort+0x52>
   286bc:	4c1e      	ldr	r4, [pc, #120]	; (28738 <z_thread_abort+0x144>)
   286be:	22b9      	movs	r2, #185	; 0xb9
   286c0:	4621      	mov	r1, r4
   286c2:	481e      	ldr	r0, [pc, #120]	; (2873c <z_thread_abort+0x148>)
   286c4:	f002 fce3 	bl	2b08e <assert_print>
   286c8:	21b9      	movs	r1, #185	; 0xb9
   286ca:	4620      	mov	r0, r4
   286cc:	f002 fcd8 	bl	2b080 <assert_post_action>
   286d0:	e7ef      	b.n	286b2 <z_thread_abort+0xbe>
   286d2:	f3ef 8305 	mrs	r3, IPSR
	if (thread == _current && !arch_is_in_isr()) {
   286d6:	2b00      	cmp	r3, #0
   286d8:	d1ac      	bne.n	28634 <z_thread_abort+0x40>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   286da:	4815      	ldr	r0, [pc, #84]	; (28730 <z_thread_abort+0x13c>)
   286dc:	f7fd fcfc 	bl	260d8 <z_spin_unlock_valid>
   286e0:	b178      	cbz	r0, 28702 <z_thread_abort+0x10e>
   286e2:	4628      	mov	r0, r5
   286e4:	f7ed f9e6 	bl	15ab4 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   286e8:	4c15      	ldr	r4, [pc, #84]	; (28740 <z_thread_abort+0x14c>)
   286ea:	f240 62e4 	movw	r2, #1764	; 0x6e4
   286ee:	4621      	mov	r1, r4
   286f0:	4812      	ldr	r0, [pc, #72]	; (2873c <z_thread_abort+0x148>)
   286f2:	f002 fccc 	bl	2b08e <assert_print>
   286f6:	f240 61e4 	movw	r1, #1764	; 0x6e4
   286fa:	4620      	mov	r0, r4
   286fc:	f002 fcc0 	bl	2b080 <assert_post_action>
   28700:	e798      	b.n	28634 <z_thread_abort+0x40>
   28702:	4c0d      	ldr	r4, [pc, #52]	; (28738 <z_thread_abort+0x144>)
   28704:	22d0      	movs	r2, #208	; 0xd0
   28706:	4621      	mov	r1, r4
   28708:	480c      	ldr	r0, [pc, #48]	; (2873c <z_thread_abort+0x148>)
   2870a:	f002 fcc0 	bl	2b08e <assert_print>
   2870e:	21d0      	movs	r1, #208	; 0xd0
   28710:	4620      	mov	r0, r4
   28712:	f002 fcb5 	bl	2b080 <assert_post_action>
   28716:	e7e4      	b.n	286e2 <z_thread_abort+0xee>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28718:	4c07      	ldr	r4, [pc, #28]	; (28738 <z_thread_abort+0x144>)
   2871a:	22b9      	movs	r2, #185	; 0xb9
   2871c:	4621      	mov	r1, r4
   2871e:	4807      	ldr	r0, [pc, #28]	; (2873c <z_thread_abort+0x148>)
   28720:	f002 fcb5 	bl	2b08e <assert_print>
   28724:	21b9      	movs	r1, #185	; 0xb9
   28726:	4620      	mov	r0, r4
   28728:	f002 fcaa 	bl	2b080 <assert_post_action>
   2872c:	e787      	b.n	2863e <z_thread_abort+0x4a>
   2872e:	bf00      	nop
   28730:	20003734 	.word	0x20003734
   28734:	200036f4 	.word	0x200036f4
   28738:	000319f0 	.word	0x000319f0
   2873c:	000318f8 	.word	0x000318f8
   28740:	000350cc 	.word	0x000350cc

00028744 <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
   28744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   28748:	4605      	mov	r5, r0
   2874a:	460f      	mov	r7, r1
   2874c:	4690      	mov	r8, r2
	struct k_thread *thread;
	bool ret = false;

	LOCKED(&sched_spinlock) {
   2874e:	2400      	movs	r4, #0
	__asm__ volatile(
   28750:	f04f 0340 	mov.w	r3, #64	; 0x40
   28754:	f3ef 8611 	mrs	r6, BASEPRI
   28758:	f383 8812 	msr	BASEPRI_MAX, r3
   2875c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28760:	4825      	ldr	r0, [pc, #148]	; (287f8 <z_sched_wake+0xb4>)
   28762:	f7fd fca9 	bl	260b8 <z_spin_lock_valid>
   28766:	b128      	cbz	r0, 28774 <z_sched_wake+0x30>
	z_spin_lock_set_owner(l);
   28768:	4823      	ldr	r0, [pc, #140]	; (287f8 <z_sched_wake+0xb4>)
   2876a:	f7fd fcc5 	bl	260f8 <z_spin_lock_set_owner>
	bool ret = false;
   2876e:	f04f 0900 	mov.w	r9, #0
	return k;
   28772:	e014      	b.n	2879e <z_sched_wake+0x5a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28774:	f8df 9084 	ldr.w	r9, [pc, #132]	; 287fc <z_sched_wake+0xb8>
   28778:	228e      	movs	r2, #142	; 0x8e
   2877a:	4649      	mov	r1, r9
   2877c:	4820      	ldr	r0, [pc, #128]	; (28800 <z_sched_wake+0xbc>)
   2877e:	f002 fc86 	bl	2b08e <assert_print>
   28782:	218e      	movs	r1, #142	; 0x8e
   28784:	4648      	mov	r0, r9
   28786:	f002 fc7b 	bl	2b080 <assert_post_action>
   2878a:	e7ed      	b.n	28768 <z_sched_wake+0x24>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2878c:	481a      	ldr	r0, [pc, #104]	; (287f8 <z_sched_wake+0xb4>)
   2878e:	f7fd fca3 	bl	260d8 <z_spin_unlock_valid>
   28792:	b318      	cbz	r0, 287dc <z_sched_wake+0x98>
	__asm__ volatile(
   28794:	f386 8811 	msr	BASEPRI, r6
   28798:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   2879c:	2401      	movs	r4, #1
   2879e:	bb44      	cbnz	r4, 287f2 <z_sched_wake+0xae>
		thread = _priq_wait_best(&wait_q->waitq);
   287a0:	4628      	mov	r0, r5
   287a2:	f008 f9c5 	bl	30b30 <z_priq_dumb_best>

		if (thread != NULL) {
   287a6:	4604      	mov	r4, r0
   287a8:	2800      	cmp	r0, #0
   287aa:	d0ef      	beq.n	2878c <z_sched_wake+0x48>
   287ac:	67c7      	str	r7, [r0, #124]	; 0x7c
	thread->base.swap_data = data;
   287ae:	f8c0 8014 	str.w	r8, [r0, #20]
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   287b2:	f7fe fe07 	bl	273c4 <pended_on_thread>
   287b6:	4621      	mov	r1, r4
   287b8:	f7fe ff8a 	bl	276d0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   287bc:	7b63      	ldrb	r3, [r4, #13]
   287be:	f023 0302 	bic.w	r3, r3, #2
   287c2:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   287c4:	2300      	movs	r3, #0
   287c6:	60a3      	str	r3, [r4, #8]
	return z_abort_timeout(&thread->base.timeout);
   287c8:	f104 0018 	add.w	r0, r4, #24
   287cc:	f000 f95a 	bl	28a84 <z_abort_timeout>
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
   287d0:	4620      	mov	r0, r4
   287d2:	f7ff f91f 	bl	27a14 <ready_thread>
			ret = true;
   287d6:	f04f 0901 	mov.w	r9, #1
   287da:	e7d7      	b.n	2878c <z_sched_wake+0x48>
   287dc:	4c07      	ldr	r4, [pc, #28]	; (287fc <z_sched_wake+0xb8>)
   287de:	22b9      	movs	r2, #185	; 0xb9
   287e0:	4621      	mov	r1, r4
   287e2:	4807      	ldr	r0, [pc, #28]	; (28800 <z_sched_wake+0xbc>)
   287e4:	f002 fc53 	bl	2b08e <assert_print>
   287e8:	21b9      	movs	r1, #185	; 0xb9
   287ea:	4620      	mov	r0, r4
   287ec:	f002 fc48 	bl	2b080 <assert_post_action>
   287f0:	e7d0      	b.n	28794 <z_sched_wake+0x50>
		}
	}

	return ret;
}
   287f2:	4648      	mov	r0, r9
   287f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   287f8:	20003734 	.word	0x20003734
   287fc:	000319f0 	.word	0x000319f0
   28800:	000318f8 	.word	0x000318f8

00028804 <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   28804:	e92d 4810 	stmdb	sp!, {r4, fp, lr}
   28808:	b083      	sub	sp, #12
   2880a:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   2880c:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
   28810:	e9cd bc00 	strd	fp, ip, [sp]
   28814:	f7ff fae2 	bl	27ddc <z_pend_curr>

	if (data != NULL) {
   28818:	b11c      	cbz	r4, 28822 <z_sched_wait+0x1e>
		*data = _current->base.swap_data;
   2881a:	4b03      	ldr	r3, [pc, #12]	; (28828 <z_sched_wait+0x24>)
   2881c:	689b      	ldr	r3, [r3, #8]
   2881e:	695b      	ldr	r3, [r3, #20]
   28820:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   28822:	b003      	add	sp, #12
   28824:	e8bd 8810 	ldmia.w	sp!, {r4, fp, pc}
   28828:	200036f4 	.word	0x200036f4

0002882c <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   2882c:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   2882e:	4806      	ldr	r0, [pc, #24]	; (28848 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   28830:	4a06      	ldr	r2, [pc, #24]	; (2884c <z_data_copy+0x20>)
   28832:	1a12      	subs	r2, r2, r0
   28834:	4906      	ldr	r1, [pc, #24]	; (28850 <z_data_copy+0x24>)
   28836:	f008 f842 	bl	308be <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   2883a:	4a06      	ldr	r2, [pc, #24]	; (28854 <z_data_copy+0x28>)
   2883c:	4906      	ldr	r1, [pc, #24]	; (28858 <z_data_copy+0x2c>)
   2883e:	4807      	ldr	r0, [pc, #28]	; (2885c <z_data_copy+0x30>)
   28840:	f008 f83d 	bl	308be <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   28844:	bd08      	pop	{r3, pc}
   28846:	bf00      	nop
   28848:	20000000 	.word	0x20000000
   2884c:	20000b60 	.word	0x20000b60
   28850:	00035454 	.word	0x00035454
   28854:	00000000 	.word	0x00000000
   28858:	00035454 	.word	0x00035454
   2885c:	20000000 	.word	0x20000000

00028860 <first>:
	return list->head == list;
   28860:	4b03      	ldr	r3, [pc, #12]	; (28870 <first+0x10>)
   28862:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28864:	4298      	cmp	r0, r3
   28866:	d000      	beq.n	2886a <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
   28868:	4770      	bx	lr
   2886a:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
   2886c:	e7fc      	b.n	28868 <first+0x8>
   2886e:	bf00      	nop
   28870:	200008a0 	.word	0x200008a0

00028874 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28874:	b130      	cbz	r0, 28884 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
   28876:	4a04      	ldr	r2, [pc, #16]	; (28888 <next+0x14>)
   28878:	6852      	ldr	r2, [r2, #4]
   2887a:	4290      	cmp	r0, r2
   2887c:	d001      	beq.n	28882 <next+0xe>
   2887e:	6800      	ldr	r0, [r0, #0]
   28880:	4770      	bx	lr
   28882:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
   28884:	4770      	bx	lr
   28886:	bf00      	nop
   28888:	200008a0 	.word	0x200008a0

0002888c <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
   2888c:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   2888e:	4b04      	ldr	r3, [pc, #16]	; (288a0 <elapsed+0x14>)
   28890:	681b      	ldr	r3, [r3, #0]
   28892:	b10b      	cbz	r3, 28898 <elapsed+0xc>
   28894:	2000      	movs	r0, #0
}
   28896:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   28898:	f7f9 fd1e 	bl	222d8 <sys_clock_elapsed>
   2889c:	e7fb      	b.n	28896 <elapsed+0xa>
   2889e:	bf00      	nop
   288a0:	20003740 	.word	0x20003740

000288a4 <next_timeout>:

static int32_t next_timeout(void)
{
   288a4:	b510      	push	{r4, lr}
	struct _timeout *to = first();
   288a6:	f7ff ffdb 	bl	28860 <first>
   288aa:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
   288ac:	f7ff ffee 	bl	2888c <elapsed>
	int32_t ret;

	if ((to == NULL) ||
   288b0:	b17c      	cbz	r4, 288d2 <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   288b2:	6923      	ldr	r3, [r4, #16]
   288b4:	6962      	ldr	r2, [r4, #20]
   288b6:	1a1b      	subs	r3, r3, r0
   288b8:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
   288bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   288c0:	f170 0200 	sbcs.w	r2, r0, #0
   288c4:	da08      	bge.n	288d8 <next_timeout+0x34>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
   288c6:	2800      	cmp	r0, #0
   288c8:	db01      	blt.n	288ce <next_timeout+0x2a>
   288ca:	4618      	mov	r0, r3
   288cc:	e006      	b.n	288dc <next_timeout+0x38>
   288ce:	2300      	movs	r3, #0
   288d0:	e7fb      	b.n	288ca <next_timeout+0x26>
		ret = MAX_WAIT;
   288d2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   288d6:	e001      	b.n	288dc <next_timeout+0x38>
   288d8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   288dc:	4b03      	ldr	r3, [pc, #12]	; (288ec <next_timeout+0x48>)
   288de:	691b      	ldr	r3, [r3, #16]
   288e0:	b113      	cbz	r3, 288e8 <next_timeout+0x44>
   288e2:	4283      	cmp	r3, r0
   288e4:	da00      	bge.n	288e8 <next_timeout+0x44>
		ret = _current_cpu->slice_ticks;
   288e6:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
   288e8:	bd10      	pop	{r4, pc}
   288ea:	bf00      	nop
   288ec:	200036f4 	.word	0x200036f4

000288f0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   288f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   288f4:	bf08      	it	eq
   288f6:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   288fa:	f000 80b3 	beq.w	28a64 <z_add_timeout+0x174>
{
   288fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   28902:	4604      	mov	r4, r0
   28904:	460f      	mov	r7, r1
   28906:	4692      	mov	sl, r2
   28908:	461d      	mov	r5, r3
	return node->next != NULL;
   2890a:	6803      	ldr	r3, [r0, #0]

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   2890c:	b153      	cbz	r3, 28924 <z_add_timeout+0x34>
   2890e:	f8df 8158 	ldr.w	r8, [pc, #344]	; 28a68 <z_add_timeout+0x178>
   28912:	2263      	movs	r2, #99	; 0x63
   28914:	4641      	mov	r1, r8
   28916:	4855      	ldr	r0, [pc, #340]	; (28a6c <z_add_timeout+0x17c>)
   28918:	f002 fbb9 	bl	2b08e <assert_print>
   2891c:	2163      	movs	r1, #99	; 0x63
   2891e:	4640      	mov	r0, r8
   28920:	f002 fbae 	bl	2b080 <assert_post_action>
	to->fn = fn;
   28924:	60a7      	str	r7, [r4, #8]

	LOCKED(&timeout_lock) {
   28926:	f04f 0800 	mov.w	r8, #0
	__asm__ volatile(
   2892a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2892e:	f3ef 8711 	mrs	r7, BASEPRI
   28932:	f383 8812 	msr	BASEPRI_MAX, r3
   28936:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2893a:	484d      	ldr	r0, [pc, #308]	; (28a70 <z_add_timeout+0x180>)
   2893c:	f7fd fbbc 	bl	260b8 <z_spin_lock_valid>
   28940:	b118      	cbz	r0, 2894a <z_add_timeout+0x5a>
	z_spin_lock_set_owner(l);
   28942:	484b      	ldr	r0, [pc, #300]	; (28a70 <z_add_timeout+0x180>)
   28944:	f7fd fbd8 	bl	260f8 <z_spin_lock_set_owner>
	return k;
   28948:	e033      	b.n	289b2 <z_add_timeout+0xc2>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2894a:	f8df 9128 	ldr.w	r9, [pc, #296]	; 28a74 <z_add_timeout+0x184>
   2894e:	228e      	movs	r2, #142	; 0x8e
   28950:	4649      	mov	r1, r9
   28952:	4846      	ldr	r0, [pc, #280]	; (28a6c <z_add_timeout+0x17c>)
   28954:	f002 fb9b 	bl	2b08e <assert_print>
   28958:	218e      	movs	r1, #142	; 0x8e
   2895a:	4648      	mov	r0, r9
   2895c:	f002 fb90 	bl	2b080 <assert_post_action>
   28960:	e7ef      	b.n	28942 <z_add_timeout+0x52>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   28962:	f11a 0801 	adds.w	r8, sl, #1
   28966:	f145 0900 	adc.w	r9, r5, #0
   2896a:	f7ff ff8f 	bl	2888c <elapsed>
   2896e:	eb18 0300 	adds.w	r3, r8, r0
   28972:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
   28976:	6123      	str	r3, [r4, #16]
   28978:	6160      	str	r0, [r4, #20]
   2897a:	e03d      	b.n	289f8 <z_add_timeout+0x108>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
   2897c:	1a51      	subs	r1, r2, r1
   2897e:	eb66 0303 	sbc.w	r3, r6, r3
   28982:	6101      	str	r1, [r0, #16]
   28984:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
   28986:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
   28988:	6063      	str	r3, [r4, #4]
	node->next = successor;
   2898a:	6020      	str	r0, [r4, #0]
	prev->next = node;
   2898c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   2898e:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
   28990:	2800      	cmp	r0, #0
   28992:	d045      	beq.n	28a20 <z_add_timeout+0x130>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   28994:	f7ff ff64 	bl	28860 <first>
   28998:	4284      	cmp	r4, r0
   2899a:	d048      	beq.n	28a2e <z_add_timeout+0x13e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2899c:	4834      	ldr	r0, [pc, #208]	; (28a70 <z_add_timeout+0x180>)
   2899e:	f7fd fb9b 	bl	260d8 <z_spin_unlock_valid>
   289a2:	2800      	cmp	r0, #0
   289a4:	d050      	beq.n	28a48 <z_add_timeout+0x158>
	__asm__ volatile(
   289a6:	f387 8811 	msr	BASEPRI, r7
   289aa:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   289ae:	f04f 0801 	mov.w	r8, #1
   289b2:	f1b8 0f00 	cmp.w	r8, #0
   289b6:	d153      	bne.n	28a60 <z_add_timeout+0x170>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   289b8:	4653      	mov	r3, sl
   289ba:	f06f 0101 	mvn.w	r1, #1
   289be:	ebb1 010a 	subs.w	r1, r1, sl
   289c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   289c6:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   289ca:	2a00      	cmp	r2, #0
   289cc:	dbc9      	blt.n	28962 <z_add_timeout+0x72>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   289ce:	4a2a      	ldr	r2, [pc, #168]	; (28a78 <z_add_timeout+0x188>)
   289d0:	6811      	ldr	r1, [r2, #0]
   289d2:	6852      	ldr	r2, [r2, #4]
   289d4:	185b      	adds	r3, r3, r1
   289d6:	eb42 0205 	adc.w	r2, r2, r5
   289da:	f06f 0101 	mvn.w	r1, #1
   289de:	1acb      	subs	r3, r1, r3
   289e0:	eb60 0202 	sbc.w	r2, r0, r2
			to->dticks = MAX(1, ticks);
   289e4:	4618      	mov	r0, r3
   289e6:	4611      	mov	r1, r2
   289e8:	2b01      	cmp	r3, #1
   289ea:	f172 0300 	sbcs.w	r3, r2, #0
   289ee:	da01      	bge.n	289f4 <z_add_timeout+0x104>
   289f0:	2001      	movs	r0, #1
   289f2:	2100      	movs	r1, #0
   289f4:	6120      	str	r0, [r4, #16]
   289f6:	6161      	str	r1, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
   289f8:	f7ff ff32 	bl	28860 <first>
   289fc:	2800      	cmp	r0, #0
   289fe:	d0c7      	beq.n	28990 <z_add_timeout+0xa0>
			if (t->dticks > to->dticks) {
   28a00:	6902      	ldr	r2, [r0, #16]
   28a02:	6946      	ldr	r6, [r0, #20]
   28a04:	6921      	ldr	r1, [r4, #16]
   28a06:	6963      	ldr	r3, [r4, #20]
   28a08:	4291      	cmp	r1, r2
   28a0a:	eb73 0c06 	sbcs.w	ip, r3, r6
   28a0e:	dbb5      	blt.n	2897c <z_add_timeout+0x8c>
			to->dticks -= t->dticks;
   28a10:	1a89      	subs	r1, r1, r2
   28a12:	eb63 0306 	sbc.w	r3, r3, r6
   28a16:	6121      	str	r1, [r4, #16]
   28a18:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
   28a1a:	f7ff ff2b 	bl	28874 <next>
   28a1e:	e7ed      	b.n	289fc <z_add_timeout+0x10c>
	sys_dnode_t *const tail = list->tail;
   28a20:	4b16      	ldr	r3, [pc, #88]	; (28a7c <z_add_timeout+0x18c>)
   28a22:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   28a24:	6023      	str	r3, [r4, #0]
	node->prev = tail;
   28a26:	6062      	str	r2, [r4, #4]
	tail->next = node;
   28a28:	6014      	str	r4, [r2, #0]
	list->tail = node;
   28a2a:	605c      	str	r4, [r3, #4]
}
   28a2c:	e7b2      	b.n	28994 <z_add_timeout+0xa4>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   28a2e:	f7ff ff39 	bl	288a4 <next_timeout>

			if (next_time == 0 ||
   28a32:	4603      	mov	r3, r0
   28a34:	b118      	cbz	r0, 28a3e <z_add_timeout+0x14e>
			    _current_cpu->slice_ticks != next_time) {
   28a36:	4a12      	ldr	r2, [pc, #72]	; (28a80 <z_add_timeout+0x190>)
   28a38:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
   28a3a:	4282      	cmp	r2, r0
   28a3c:	d0ae      	beq.n	2899c <z_add_timeout+0xac>
				sys_clock_set_timeout(next_time, false);
   28a3e:	2100      	movs	r1, #0
   28a40:	4618      	mov	r0, r3
   28a42:	f7f9 fc17 	bl	22274 <sys_clock_set_timeout>
   28a46:	e7a9      	b.n	2899c <z_add_timeout+0xac>
   28a48:	f8df 8028 	ldr.w	r8, [pc, #40]	; 28a74 <z_add_timeout+0x184>
   28a4c:	22b9      	movs	r2, #185	; 0xb9
   28a4e:	4641      	mov	r1, r8
   28a50:	4806      	ldr	r0, [pc, #24]	; (28a6c <z_add_timeout+0x17c>)
   28a52:	f002 fb1c 	bl	2b08e <assert_print>
   28a56:	21b9      	movs	r1, #185	; 0xb9
   28a58:	4640      	mov	r0, r8
   28a5a:	f002 fb11 	bl	2b080 <assert_post_action>
   28a5e:	e7a2      	b.n	289a6 <z_add_timeout+0xb6>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   28a60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   28a64:	4770      	bx	lr
   28a66:	bf00      	nop
   28a68:	0003511c 	.word	0x0003511c
   28a6c:	000318f8 	.word	0x000318f8
   28a70:	20003744 	.word	0x20003744
   28a74:	000319f0 	.word	0x000319f0
   28a78:	20002050 	.word	0x20002050
   28a7c:	200008a0 	.word	0x200008a0
   28a80:	200036f4 	.word	0x200036f4

00028a84 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   28a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28a88:	4605      	mov	r5, r0
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
   28a8a:	2400      	movs	r4, #0
	__asm__ volatile(
   28a8c:	f04f 0340 	mov.w	r3, #64	; 0x40
   28a90:	f3ef 8711 	mrs	r7, BASEPRI
   28a94:	f383 8812 	msr	BASEPRI_MAX, r3
   28a98:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28a9c:	481a      	ldr	r0, [pc, #104]	; (28b08 <z_abort_timeout+0x84>)
   28a9e:	f7fd fb0b 	bl	260b8 <z_spin_lock_valid>
   28aa2:	b128      	cbz	r0, 28ab0 <z_abort_timeout+0x2c>
	z_spin_lock_set_owner(l);
   28aa4:	4818      	ldr	r0, [pc, #96]	; (28b08 <z_abort_timeout+0x84>)
   28aa6:	f7fd fb27 	bl	260f8 <z_spin_lock_set_owner>
	int ret = -EINVAL;
   28aaa:	f06f 0815 	mvn.w	r8, #21
	return k;
   28aae:	e013      	b.n	28ad8 <z_abort_timeout+0x54>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28ab0:	4e16      	ldr	r6, [pc, #88]	; (28b0c <z_abort_timeout+0x88>)
   28ab2:	228e      	movs	r2, #142	; 0x8e
   28ab4:	4631      	mov	r1, r6
   28ab6:	4816      	ldr	r0, [pc, #88]	; (28b10 <z_abort_timeout+0x8c>)
   28ab8:	f002 fae9 	bl	2b08e <assert_print>
   28abc:	218e      	movs	r1, #142	; 0x8e
   28abe:	4630      	mov	r0, r6
   28ac0:	f002 fade 	bl	2b080 <assert_post_action>
   28ac4:	e7ee      	b.n	28aa4 <z_abort_timeout+0x20>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28ac6:	4810      	ldr	r0, [pc, #64]	; (28b08 <z_abort_timeout+0x84>)
   28ac8:	f7fd fb06 	bl	260d8 <z_spin_unlock_valid>
   28acc:	b170      	cbz	r0, 28aec <z_abort_timeout+0x68>
	__asm__ volatile(
   28ace:	f387 8811 	msr	BASEPRI, r7
   28ad2:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   28ad6:	2401      	movs	r4, #1
   28ad8:	4626      	mov	r6, r4
   28ada:	b994      	cbnz	r4, 28b02 <z_abort_timeout+0x7e>
	return node->next != NULL;
   28adc:	682b      	ldr	r3, [r5, #0]
		if (sys_dnode_is_linked(&to->node)) {
   28ade:	2b00      	cmp	r3, #0
   28ae0:	d0f1      	beq.n	28ac6 <z_abort_timeout+0x42>
			remove_timeout(to);
   28ae2:	4628      	mov	r0, r5
   28ae4:	f008 f83f 	bl	30b66 <remove_timeout>
			ret = 0;
   28ae8:	46b0      	mov	r8, r6
   28aea:	e7ec      	b.n	28ac6 <z_abort_timeout+0x42>
   28aec:	4c07      	ldr	r4, [pc, #28]	; (28b0c <z_abort_timeout+0x88>)
   28aee:	22b9      	movs	r2, #185	; 0xb9
   28af0:	4621      	mov	r1, r4
   28af2:	4807      	ldr	r0, [pc, #28]	; (28b10 <z_abort_timeout+0x8c>)
   28af4:	f002 facb 	bl	2b08e <assert_print>
   28af8:	21b9      	movs	r1, #185	; 0xb9
   28afa:	4620      	mov	r0, r4
   28afc:	f002 fac0 	bl	2b080 <assert_post_action>
   28b00:	e7e5      	b.n	28ace <z_abort_timeout+0x4a>
		}
	}

	return ret;
}
   28b02:	4640      	mov	r0, r8
   28b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   28b08:	20003744 	.word	0x20003744
   28b0c:	000319f0 	.word	0x000319f0
   28b10:	000318f8 	.word	0x000318f8

00028b14 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   28b14:	b570      	push	{r4, r5, r6, lr}
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
   28b16:	2500      	movs	r5, #0
	__asm__ volatile(
   28b18:	f04f 0340 	mov.w	r3, #64	; 0x40
   28b1c:	f3ef 8611 	mrs	r6, BASEPRI
   28b20:	f383 8812 	msr	BASEPRI_MAX, r3
   28b24:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28b28:	4817      	ldr	r0, [pc, #92]	; (28b88 <z_get_next_timeout_expiry+0x74>)
   28b2a:	f7fd fac5 	bl	260b8 <z_spin_lock_valid>
   28b2e:	b128      	cbz	r0, 28b3c <z_get_next_timeout_expiry+0x28>
	z_spin_lock_set_owner(l);
   28b30:	4815      	ldr	r0, [pc, #84]	; (28b88 <z_get_next_timeout_expiry+0x74>)
   28b32:	f7fd fae1 	bl	260f8 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;
   28b36:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	return k;
   28b3a:	e00f      	b.n	28b5c <z_get_next_timeout_expiry+0x48>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28b3c:	4c13      	ldr	r4, [pc, #76]	; (28b8c <z_get_next_timeout_expiry+0x78>)
   28b3e:	228e      	movs	r2, #142	; 0x8e
   28b40:	4621      	mov	r1, r4
   28b42:	4813      	ldr	r0, [pc, #76]	; (28b90 <z_get_next_timeout_expiry+0x7c>)
   28b44:	f002 faa3 	bl	2b08e <assert_print>
   28b48:	218e      	movs	r1, #142	; 0x8e
   28b4a:	4620      	mov	r0, r4
   28b4c:	f002 fa98 	bl	2b080 <assert_post_action>
   28b50:	e7ee      	b.n	28b30 <z_get_next_timeout_expiry+0x1c>
	__asm__ volatile(
   28b52:	f386 8811 	msr	BASEPRI, r6
   28b56:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   28b5a:	2501      	movs	r5, #1
   28b5c:	b995      	cbnz	r5, 28b84 <z_get_next_timeout_expiry+0x70>
		ret = next_timeout();
   28b5e:	f7ff fea1 	bl	288a4 <next_timeout>
   28b62:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28b64:	4808      	ldr	r0, [pc, #32]	; (28b88 <z_get_next_timeout_expiry+0x74>)
   28b66:	f7fd fab7 	bl	260d8 <z_spin_unlock_valid>
   28b6a:	2800      	cmp	r0, #0
   28b6c:	d1f1      	bne.n	28b52 <z_get_next_timeout_expiry+0x3e>
   28b6e:	4d07      	ldr	r5, [pc, #28]	; (28b8c <z_get_next_timeout_expiry+0x78>)
   28b70:	22b9      	movs	r2, #185	; 0xb9
   28b72:	4629      	mov	r1, r5
   28b74:	4806      	ldr	r0, [pc, #24]	; (28b90 <z_get_next_timeout_expiry+0x7c>)
   28b76:	f002 fa8a 	bl	2b08e <assert_print>
   28b7a:	21b9      	movs	r1, #185	; 0xb9
   28b7c:	4628      	mov	r0, r5
   28b7e:	f002 fa7f 	bl	2b080 <assert_post_action>
   28b82:	e7e6      	b.n	28b52 <z_get_next_timeout_expiry+0x3e>
	}
	return ret;
}
   28b84:	4620      	mov	r0, r4
   28b86:	bd70      	pop	{r4, r5, r6, pc}
   28b88:	20003744 	.word	0x20003744
   28b8c:	000319f0 	.word	0x000319f0
   28b90:	000318f8 	.word	0x000318f8

00028b94 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   28b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28b98:	4606      	mov	r6, r0
   28b9a:	4688      	mov	r8, r1
	LOCKED(&timeout_lock) {
   28b9c:	2500      	movs	r5, #0
	__asm__ volatile(
   28b9e:	f04f 0340 	mov.w	r3, #64	; 0x40
   28ba2:	f3ef 8711 	mrs	r7, BASEPRI
   28ba6:	f383 8812 	msr	BASEPRI_MAX, r3
   28baa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28bae:	4820      	ldr	r0, [pc, #128]	; (28c30 <z_set_timeout_expiry+0x9c>)
   28bb0:	f7fd fa82 	bl	260b8 <z_spin_lock_valid>
   28bb4:	b118      	cbz	r0, 28bbe <z_set_timeout_expiry+0x2a>
	z_spin_lock_set_owner(l);
   28bb6:	481e      	ldr	r0, [pc, #120]	; (28c30 <z_set_timeout_expiry+0x9c>)
   28bb8:	f7fd fa9e 	bl	260f8 <z_spin_lock_set_owner>
	return k;
   28bbc:	e019      	b.n	28bf2 <z_set_timeout_expiry+0x5e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28bbe:	4c1d      	ldr	r4, [pc, #116]	; (28c34 <z_set_timeout_expiry+0xa0>)
   28bc0:	228e      	movs	r2, #142	; 0x8e
   28bc2:	4621      	mov	r1, r4
   28bc4:	481c      	ldr	r0, [pc, #112]	; (28c38 <z_set_timeout_expiry+0xa4>)
   28bc6:	f002 fa62 	bl	2b08e <assert_print>
   28bca:	218e      	movs	r1, #142	; 0x8e
   28bcc:	4620      	mov	r0, r4
   28bce:	f002 fa57 	bl	2b080 <assert_post_action>
   28bd2:	e7f0      	b.n	28bb6 <z_set_timeout_expiry+0x22>
		int next_to = next_timeout();
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
   28bd4:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
   28bd6:	f004 0401 	and.w	r4, r4, #1
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   28bda:	2801      	cmp	r0, #1
   28bdc:	dd00      	ble.n	28be0 <z_set_timeout_expiry+0x4c>
   28bde:	b99c      	cbnz	r4, 28c08 <z_set_timeout_expiry+0x74>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28be0:	4813      	ldr	r0, [pc, #76]	; (28c30 <z_set_timeout_expiry+0x9c>)
   28be2:	f7fd fa79 	bl	260d8 <z_spin_unlock_valid>
   28be6:	b1b0      	cbz	r0, 28c16 <z_set_timeout_expiry+0x82>
	__asm__ volatile(
   28be8:	f387 8811 	msr	BASEPRI, r7
   28bec:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   28bf0:	2501      	movs	r5, #1
   28bf2:	462c      	mov	r4, r5
   28bf4:	b9d5      	cbnz	r5, 28c2c <z_set_timeout_expiry+0x98>
		int next_to = next_timeout();
   28bf6:	f7ff fe55 	bl	288a4 <next_timeout>
			      || (ticks <= next_to);
   28bfa:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   28bfe:	d0e9      	beq.n	28bd4 <z_set_timeout_expiry+0x40>
   28c00:	42b0      	cmp	r0, r6
   28c02:	dbe8      	blt.n	28bd6 <z_set_timeout_expiry+0x42>
   28c04:	2401      	movs	r4, #1
   28c06:	e7e6      	b.n	28bd6 <z_set_timeout_expiry+0x42>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   28c08:	4641      	mov	r1, r8
   28c0a:	42b0      	cmp	r0, r6
   28c0c:	bfa8      	it	ge
   28c0e:	4630      	movge	r0, r6
   28c10:	f7f9 fb30 	bl	22274 <sys_clock_set_timeout>
   28c14:	e7e4      	b.n	28be0 <z_set_timeout_expiry+0x4c>
   28c16:	4c07      	ldr	r4, [pc, #28]	; (28c34 <z_set_timeout_expiry+0xa0>)
   28c18:	22b9      	movs	r2, #185	; 0xb9
   28c1a:	4621      	mov	r1, r4
   28c1c:	4806      	ldr	r0, [pc, #24]	; (28c38 <z_set_timeout_expiry+0xa4>)
   28c1e:	f002 fa36 	bl	2b08e <assert_print>
   28c22:	21b9      	movs	r1, #185	; 0xb9
   28c24:	4620      	mov	r0, r4
   28c26:	f002 fa2b 	bl	2b080 <assert_post_action>
   28c2a:	e7dd      	b.n	28be8 <z_set_timeout_expiry+0x54>
		}
	}
}
   28c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   28c30:	20003744 	.word	0x20003744
   28c34:	000319f0 	.word	0x000319f0
   28c38:	000318f8 	.word	0x000318f8

00028c3c <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   28c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28c3e:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   28c40:	f7fe fe58 	bl	278f4 <z_time_slice>
	__asm__ volatile(
   28c44:	f04f 0340 	mov.w	r3, #64	; 0x40
   28c48:	f3ef 8511 	mrs	r5, BASEPRI
   28c4c:	f383 8812 	msr	BASEPRI_MAX, r3
   28c50:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28c54:	484b      	ldr	r0, [pc, #300]	; (28d84 <sys_clock_announce+0x148>)
   28c56:	f7fd fa2f 	bl	260b8 <z_spin_lock_valid>
   28c5a:	b128      	cbz	r0, 28c68 <sys_clock_announce+0x2c>
	z_spin_lock_set_owner(l);
   28c5c:	4849      	ldr	r0, [pc, #292]	; (28d84 <sys_clock_announce+0x148>)
   28c5e:	f7fd fa4b 	bl	260f8 <z_spin_lock_set_owner>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   28c62:	4b49      	ldr	r3, [pc, #292]	; (28d88 <sys_clock_announce+0x14c>)
   28c64:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   28c66:	e01c      	b.n	28ca2 <sys_clock_announce+0x66>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28c68:	4e48      	ldr	r6, [pc, #288]	; (28d8c <sys_clock_announce+0x150>)
   28c6a:	228e      	movs	r2, #142	; 0x8e
   28c6c:	4631      	mov	r1, r6
   28c6e:	4848      	ldr	r0, [pc, #288]	; (28d90 <sys_clock_announce+0x154>)
   28c70:	f002 fa0d 	bl	2b08e <assert_print>
   28c74:	218e      	movs	r1, #142	; 0x8e
   28c76:	4630      	mov	r0, r6
   28c78:	f002 fa02 	bl	2b080 <assert_post_action>
   28c7c:	e7ee      	b.n	28c5c <sys_clock_announce+0x20>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28c7e:	4f43      	ldr	r7, [pc, #268]	; (28d8c <sys_clock_announce+0x150>)
   28c80:	22b9      	movs	r2, #185	; 0xb9
   28c82:	4639      	mov	r1, r7
   28c84:	4842      	ldr	r0, [pc, #264]	; (28d90 <sys_clock_announce+0x154>)
   28c86:	f002 fa02 	bl	2b08e <assert_print>
   28c8a:	21b9      	movs	r1, #185	; 0xb9
   28c8c:	4638      	mov	r0, r7
   28c8e:	f002 f9f7 	bl	2b080 <assert_post_action>
   28c92:	e028      	b.n	28ce6 <sys_clock_announce+0xaa>
	z_spin_lock_set_owner(l);
   28c94:	483b      	ldr	r0, [pc, #236]	; (28d84 <sys_clock_announce+0x148>)
   28c96:	f7fd fa2f 	bl	260f8 <z_spin_lock_set_owner>
		remove_timeout(t);

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
   28c9a:	4a3b      	ldr	r2, [pc, #236]	; (28d88 <sys_clock_announce+0x14c>)
   28c9c:	6813      	ldr	r3, [r2, #0]
   28c9e:	1b9b      	subs	r3, r3, r6
   28ca0:	6013      	str	r3, [r2, #0]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   28ca2:	f7ff fddd 	bl	28860 <first>
   28ca6:	4604      	mov	r4, r0
   28ca8:	2800      	cmp	r0, #0
   28caa:	d03b      	beq.n	28d24 <sys_clock_announce+0xe8>
   28cac:	6906      	ldr	r6, [r0, #16]
   28cae:	6942      	ldr	r2, [r0, #20]
   28cb0:	4b35      	ldr	r3, [pc, #212]	; (28d88 <sys_clock_announce+0x14c>)
   28cb2:	681b      	ldr	r3, [r3, #0]
   28cb4:	17d9      	asrs	r1, r3, #31
   28cb6:	42b3      	cmp	r3, r6
   28cb8:	eb71 0302 	sbcs.w	r3, r1, r2
   28cbc:	db32      	blt.n	28d24 <sys_clock_announce+0xe8>
		curr_tick += dt;
   28cbe:	4a35      	ldr	r2, [pc, #212]	; (28d94 <sys_clock_announce+0x158>)
   28cc0:	6813      	ldr	r3, [r2, #0]
   28cc2:	6851      	ldr	r1, [r2, #4]
   28cc4:	199b      	adds	r3, r3, r6
   28cc6:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
   28cca:	6013      	str	r3, [r2, #0]
   28ccc:	6051      	str	r1, [r2, #4]
		t->dticks = 0;
   28cce:	2200      	movs	r2, #0
   28cd0:	2300      	movs	r3, #0
   28cd2:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   28cd6:	4620      	mov	r0, r4
   28cd8:	f007 ff45 	bl	30b66 <remove_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28cdc:	4829      	ldr	r0, [pc, #164]	; (28d84 <sys_clock_announce+0x148>)
   28cde:	f7fd f9fb 	bl	260d8 <z_spin_unlock_valid>
   28ce2:	2800      	cmp	r0, #0
   28ce4:	d0cb      	beq.n	28c7e <sys_clock_announce+0x42>
	__asm__ volatile(
   28ce6:	f385 8811 	msr	BASEPRI, r5
   28cea:	f3bf 8f6f 	isb	sy
		t->fn(t);
   28cee:	68a3      	ldr	r3, [r4, #8]
   28cf0:	4620      	mov	r0, r4
   28cf2:	4798      	blx	r3
	__asm__ volatile(
   28cf4:	f04f 0340 	mov.w	r3, #64	; 0x40
   28cf8:	f3ef 8511 	mrs	r5, BASEPRI
   28cfc:	f383 8812 	msr	BASEPRI_MAX, r3
   28d00:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28d04:	481f      	ldr	r0, [pc, #124]	; (28d84 <sys_clock_announce+0x148>)
   28d06:	f7fd f9d7 	bl	260b8 <z_spin_lock_valid>
   28d0a:	2800      	cmp	r0, #0
   28d0c:	d1c2      	bne.n	28c94 <sys_clock_announce+0x58>
   28d0e:	4c1f      	ldr	r4, [pc, #124]	; (28d8c <sys_clock_announce+0x150>)
   28d10:	228e      	movs	r2, #142	; 0x8e
   28d12:	4621      	mov	r1, r4
   28d14:	481e      	ldr	r0, [pc, #120]	; (28d90 <sys_clock_announce+0x154>)
   28d16:	f002 f9ba 	bl	2b08e <assert_print>
   28d1a:	218e      	movs	r1, #142	; 0x8e
   28d1c:	4620      	mov	r0, r4
   28d1e:	f002 f9af 	bl	2b080 <assert_post_action>
   28d22:	e7b7      	b.n	28c94 <sys_clock_announce+0x58>
	}

	if (first() != NULL) {
   28d24:	b144      	cbz	r4, 28d38 <sys_clock_announce+0xfc>
		first()->dticks -= announce_remaining;
   28d26:	4b18      	ldr	r3, [pc, #96]	; (28d88 <sys_clock_announce+0x14c>)
   28d28:	6819      	ldr	r1, [r3, #0]
   28d2a:	6923      	ldr	r3, [r4, #16]
   28d2c:	6962      	ldr	r2, [r4, #20]
   28d2e:	1a5b      	subs	r3, r3, r1
   28d30:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
   28d34:	6123      	str	r3, [r4, #16]
   28d36:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
   28d38:	4a16      	ldr	r2, [pc, #88]	; (28d94 <sys_clock_announce+0x158>)
   28d3a:	4e13      	ldr	r6, [pc, #76]	; (28d88 <sys_clock_announce+0x14c>)
   28d3c:	6830      	ldr	r0, [r6, #0]
   28d3e:	6813      	ldr	r3, [r2, #0]
   28d40:	6851      	ldr	r1, [r2, #4]
   28d42:	181b      	adds	r3, r3, r0
   28d44:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
   28d48:	6013      	str	r3, [r2, #0]
   28d4a:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
   28d4c:	2400      	movs	r4, #0
   28d4e:	6034      	str	r4, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
   28d50:	f7ff fda8 	bl	288a4 <next_timeout>
   28d54:	4621      	mov	r1, r4
   28d56:	f7f9 fa8d 	bl	22274 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28d5a:	480a      	ldr	r0, [pc, #40]	; (28d84 <sys_clock_announce+0x148>)
   28d5c:	f7fd f9bc 	bl	260d8 <z_spin_unlock_valid>
   28d60:	b120      	cbz	r0, 28d6c <sys_clock_announce+0x130>
	__asm__ volatile(
   28d62:	f385 8811 	msr	BASEPRI, r5
   28d66:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   28d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   28d6c:	4c07      	ldr	r4, [pc, #28]	; (28d8c <sys_clock_announce+0x150>)
   28d6e:	22b9      	movs	r2, #185	; 0xb9
   28d70:	4621      	mov	r1, r4
   28d72:	4807      	ldr	r0, [pc, #28]	; (28d90 <sys_clock_announce+0x154>)
   28d74:	f002 f98b 	bl	2b08e <assert_print>
   28d78:	21b9      	movs	r1, #185	; 0xb9
   28d7a:	4620      	mov	r0, r4
   28d7c:	f002 f980 	bl	2b080 <assert_post_action>
   28d80:	e7ef      	b.n	28d62 <sys_clock_announce+0x126>
   28d82:	bf00      	nop
   28d84:	20003744 	.word	0x20003744
   28d88:	20003740 	.word	0x20003740
   28d8c:	000319f0 	.word	0x000319f0
   28d90:	000318f8 	.word	0x000318f8
   28d94:	20002050 	.word	0x20002050

00028d98 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   28d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
   28d9a:	2700      	movs	r7, #0
	__asm__ volatile(
   28d9c:	f04f 0340 	mov.w	r3, #64	; 0x40
   28da0:	f3ef 8611 	mrs	r6, BASEPRI
   28da4:	f383 8812 	msr	BASEPRI_MAX, r3
   28da8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28dac:	481a      	ldr	r0, [pc, #104]	; (28e18 <sys_clock_tick_get+0x80>)
   28dae:	f7fd f983 	bl	260b8 <z_spin_lock_valid>
   28db2:	b128      	cbz	r0, 28dc0 <sys_clock_tick_get+0x28>
	z_spin_lock_set_owner(l);
   28db4:	4818      	ldr	r0, [pc, #96]	; (28e18 <sys_clock_tick_get+0x80>)
   28db6:	f7fd f99f 	bl	260f8 <z_spin_lock_set_owner>
	uint64_t t = 0U;
   28dba:	2400      	movs	r4, #0
   28dbc:	4625      	mov	r5, r4
	return k;
   28dbe:	e00f      	b.n	28de0 <sys_clock_tick_get+0x48>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28dc0:	4c16      	ldr	r4, [pc, #88]	; (28e1c <sys_clock_tick_get+0x84>)
   28dc2:	228e      	movs	r2, #142	; 0x8e
   28dc4:	4621      	mov	r1, r4
   28dc6:	4816      	ldr	r0, [pc, #88]	; (28e20 <sys_clock_tick_get+0x88>)
   28dc8:	f002 f961 	bl	2b08e <assert_print>
   28dcc:	218e      	movs	r1, #142	; 0x8e
   28dce:	4620      	mov	r0, r4
   28dd0:	f002 f956 	bl	2b080 <assert_post_action>
   28dd4:	e7ee      	b.n	28db4 <sys_clock_tick_get+0x1c>
	__asm__ volatile(
   28dd6:	f386 8811 	msr	BASEPRI, r6
   28dda:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   28dde:	2701      	movs	r7, #1
   28de0:	b9bf      	cbnz	r7, 28e12 <sys_clock_tick_get+0x7a>
		t = curr_tick + elapsed();
   28de2:	f7ff fd53 	bl	2888c <elapsed>
   28de6:	4a0f      	ldr	r2, [pc, #60]	; (28e24 <sys_clock_tick_get+0x8c>)
   28de8:	6814      	ldr	r4, [r2, #0]
   28dea:	6855      	ldr	r5, [r2, #4]
   28dec:	1904      	adds	r4, r0, r4
   28dee:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28df2:	4809      	ldr	r0, [pc, #36]	; (28e18 <sys_clock_tick_get+0x80>)
   28df4:	f7fd f970 	bl	260d8 <z_spin_unlock_valid>
   28df8:	2800      	cmp	r0, #0
   28dfa:	d1ec      	bne.n	28dd6 <sys_clock_tick_get+0x3e>
   28dfc:	4f07      	ldr	r7, [pc, #28]	; (28e1c <sys_clock_tick_get+0x84>)
   28dfe:	22b9      	movs	r2, #185	; 0xb9
   28e00:	4639      	mov	r1, r7
   28e02:	4807      	ldr	r0, [pc, #28]	; (28e20 <sys_clock_tick_get+0x88>)
   28e04:	f002 f943 	bl	2b08e <assert_print>
   28e08:	21b9      	movs	r1, #185	; 0xb9
   28e0a:	4638      	mov	r0, r7
   28e0c:	f002 f938 	bl	2b080 <assert_post_action>
   28e10:	e7e1      	b.n	28dd6 <sys_clock_tick_get+0x3e>
	}
	return t;
}
   28e12:	4620      	mov	r0, r4
   28e14:	4629      	mov	r1, r5
   28e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   28e18:	20003744 	.word	0x20003744
   28e1c:	000319f0 	.word	0x000319f0
   28e20:	000318f8 	.word	0x000318f8
   28e24:	20002050 	.word	0x20002050

00028e28 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   28e28:	b570      	push	{r4, r5, r6, lr}
   28e2a:	4604      	mov	r4, r0
	__asm__ volatile(
   28e2c:	f04f 0340 	mov.w	r3, #64	; 0x40
   28e30:	f3ef 8611 	mrs	r6, BASEPRI
   28e34:	f383 8812 	msr	BASEPRI_MAX, r3
   28e38:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28e3c:	485b      	ldr	r0, [pc, #364]	; (28fac <z_timer_expiration_handler+0x184>)
   28e3e:	f7fd f93b 	bl	260b8 <z_spin_lock_valid>
   28e42:	2800      	cmp	r0, #0
   28e44:	d048      	beq.n	28ed8 <z_timer_expiration_handler+0xb0>
	z_spin_lock_set_owner(l);
   28e46:	4859      	ldr	r0, [pc, #356]	; (28fac <z_timer_expiration_handler+0x184>)
   28e48:	f7fd f956 	bl	260f8 <z_spin_lock_set_owner>
	return k;
   28e4c:	4635      	mov	r5, r6

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   28e4e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   28e50:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   28e52:	ea52 0103 	orrs.w	r1, r2, r3
   28e56:	d005      	beq.n	28e64 <z_timer_expiration_handler+0x3c>
   28e58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   28e5c:	bf08      	it	eq
   28e5e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   28e62:	d144      	bne.n	28eee <z_timer_expiration_handler+0xc6>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
   28e64:	6b23      	ldr	r3, [r4, #48]	; 0x30
   28e66:	3301      	adds	r3, #1
   28e68:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   28e6a:	6a23      	ldr	r3, [r4, #32]
   28e6c:	b1db      	cbz	r3, 28ea6 <z_timer_expiration_handler+0x7e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28e6e:	484f      	ldr	r0, [pc, #316]	; (28fac <z_timer_expiration_handler+0x184>)
   28e70:	f7fd f932 	bl	260d8 <z_spin_unlock_valid>
   28e74:	2800      	cmp	r0, #0
   28e76:	d063      	beq.n	28f40 <z_timer_expiration_handler+0x118>
	__asm__ volatile(
   28e78:	f386 8811 	msr	BASEPRI, r6
   28e7c:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   28e80:	6a23      	ldr	r3, [r4, #32]
   28e82:	4620      	mov	r0, r4
   28e84:	4798      	blx	r3
	__asm__ volatile(
   28e86:	f04f 0340 	mov.w	r3, #64	; 0x40
   28e8a:	f3ef 8511 	mrs	r5, BASEPRI
   28e8e:	f383 8812 	msr	BASEPRI_MAX, r3
   28e92:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28e96:	4845      	ldr	r0, [pc, #276]	; (28fac <z_timer_expiration_handler+0x184>)
   28e98:	f7fd f90e 	bl	260b8 <z_spin_lock_valid>
   28e9c:	2800      	cmp	r0, #0
   28e9e:	d05a      	beq.n	28f56 <z_timer_expiration_handler+0x12e>
	z_spin_lock_set_owner(l);
   28ea0:	4842      	ldr	r0, [pc, #264]	; (28fac <z_timer_expiration_handler+0x184>)
   28ea2:	f7fd f929 	bl	260f8 <z_spin_lock_set_owner>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   28ea6:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
   28eaa:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28eac:	42a3      	cmp	r3, r4
   28eae:	d05d      	beq.n	28f6c <z_timer_expiration_handler+0x144>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   28eb0:	2c00      	cmp	r4, #0
   28eb2:	d05b      	beq.n	28f6c <z_timer_expiration_handler+0x144>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
   28eb4:	4620      	mov	r0, r4
   28eb6:	f7fe fb25 	bl	27504 <z_unpend_thread_no_timeout>
   28eba:	2300      	movs	r3, #0
   28ebc:	67e3      	str	r3, [r4, #124]	; 0x7c
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28ebe:	483b      	ldr	r0, [pc, #236]	; (28fac <z_timer_expiration_handler+0x184>)
   28ec0:	f7fd f90a 	bl	260d8 <z_spin_unlock_valid>
   28ec4:	2800      	cmp	r0, #0
   28ec6:	d065      	beq.n	28f94 <z_timer_expiration_handler+0x16c>
	__asm__ volatile(
   28ec8:	f385 8811 	msr	BASEPRI, r5
   28ecc:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
   28ed0:	4620      	mov	r0, r4
   28ed2:	f7fe fdf3 	bl	27abc <z_ready_thread>
}
   28ed6:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28ed8:	4d35      	ldr	r5, [pc, #212]	; (28fb0 <z_timer_expiration_handler+0x188>)
   28eda:	228e      	movs	r2, #142	; 0x8e
   28edc:	4629      	mov	r1, r5
   28ede:	4835      	ldr	r0, [pc, #212]	; (28fb4 <z_timer_expiration_handler+0x18c>)
   28ee0:	f002 f8d5 	bl	2b08e <assert_print>
   28ee4:	218e      	movs	r1, #142	; 0x8e
   28ee6:	4628      	mov	r0, r5
   28ee8:	f002 f8ca 	bl	2b080 <assert_post_action>
   28eec:	e7ab      	b.n	28e46 <z_timer_expiration_handler+0x1e>
	return z_impl_k_uptime_ticks();
   28eee:	f007 fe55 	bl	30b9c <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   28ef2:	3001      	adds	r0, #1
   28ef4:	f141 0100 	adc.w	r1, r1, #0
   28ef8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   28efa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   28efc:	18c0      	adds	r0, r0, r3
   28efe:	eb41 0102 	adc.w	r1, r1, r2
   28f02:	2801      	cmp	r0, #1
   28f04:	f171 0300 	sbcs.w	r3, r1, #0
   28f08:	da08      	bge.n	28f1c <z_timer_expiration_handler+0xf4>
   28f0a:	f06f 0201 	mvn.w	r2, #1
   28f0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   28f12:	4929      	ldr	r1, [pc, #164]	; (28fb8 <z_timer_expiration_handler+0x190>)
   28f14:	4620      	mov	r0, r4
   28f16:	f7ff fceb 	bl	288f0 <z_add_timeout>
   28f1a:	e7a3      	b.n	28e64 <z_timer_expiration_handler+0x3c>
   28f1c:	f007 fe3e 	bl	30b9c <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   28f20:	3001      	adds	r0, #1
   28f22:	f141 0300 	adc.w	r3, r1, #0
   28f26:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   28f28:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   28f2a:	1880      	adds	r0, r0, r2
   28f2c:	eb43 0301 	adc.w	r3, r3, r1
   28f30:	f06f 0201 	mvn.w	r2, #1
   28f34:	1a12      	subs	r2, r2, r0
   28f36:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   28f3a:	eb61 0303 	sbc.w	r3, r1, r3
   28f3e:	e7e8      	b.n	28f12 <z_timer_expiration_handler+0xea>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28f40:	4d1b      	ldr	r5, [pc, #108]	; (28fb0 <z_timer_expiration_handler+0x188>)
   28f42:	22b9      	movs	r2, #185	; 0xb9
   28f44:	4629      	mov	r1, r5
   28f46:	481b      	ldr	r0, [pc, #108]	; (28fb4 <z_timer_expiration_handler+0x18c>)
   28f48:	f002 f8a1 	bl	2b08e <assert_print>
   28f4c:	21b9      	movs	r1, #185	; 0xb9
   28f4e:	4628      	mov	r0, r5
   28f50:	f002 f896 	bl	2b080 <assert_post_action>
   28f54:	e790      	b.n	28e78 <z_timer_expiration_handler+0x50>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28f56:	4e16      	ldr	r6, [pc, #88]	; (28fb0 <z_timer_expiration_handler+0x188>)
   28f58:	228e      	movs	r2, #142	; 0x8e
   28f5a:	4631      	mov	r1, r6
   28f5c:	4815      	ldr	r0, [pc, #84]	; (28fb4 <z_timer_expiration_handler+0x18c>)
   28f5e:	f002 f896 	bl	2b08e <assert_print>
   28f62:	218e      	movs	r1, #142	; 0x8e
   28f64:	4630      	mov	r0, r6
   28f66:	f002 f88b 	bl	2b080 <assert_post_action>
   28f6a:	e799      	b.n	28ea0 <z_timer_expiration_handler+0x78>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28f6c:	480f      	ldr	r0, [pc, #60]	; (28fac <z_timer_expiration_handler+0x184>)
   28f6e:	f7fd f8b3 	bl	260d8 <z_spin_unlock_valid>
   28f72:	b120      	cbz	r0, 28f7e <z_timer_expiration_handler+0x156>
   28f74:	f385 8811 	msr	BASEPRI, r5
   28f78:	f3bf 8f6f 	isb	sy
		return;
   28f7c:	e7ab      	b.n	28ed6 <z_timer_expiration_handler+0xae>
   28f7e:	4c0c      	ldr	r4, [pc, #48]	; (28fb0 <z_timer_expiration_handler+0x188>)
   28f80:	22b9      	movs	r2, #185	; 0xb9
   28f82:	4621      	mov	r1, r4
   28f84:	480b      	ldr	r0, [pc, #44]	; (28fb4 <z_timer_expiration_handler+0x18c>)
   28f86:	f002 f882 	bl	2b08e <assert_print>
   28f8a:	21b9      	movs	r1, #185	; 0xb9
   28f8c:	4620      	mov	r0, r4
   28f8e:	f002 f877 	bl	2b080 <assert_post_action>
   28f92:	e7ef      	b.n	28f74 <z_timer_expiration_handler+0x14c>
   28f94:	4e06      	ldr	r6, [pc, #24]	; (28fb0 <z_timer_expiration_handler+0x188>)
   28f96:	22b9      	movs	r2, #185	; 0xb9
   28f98:	4631      	mov	r1, r6
   28f9a:	4806      	ldr	r0, [pc, #24]	; (28fb4 <z_timer_expiration_handler+0x18c>)
   28f9c:	f002 f877 	bl	2b08e <assert_print>
   28fa0:	21b9      	movs	r1, #185	; 0xb9
   28fa2:	4630      	mov	r0, r6
   28fa4:	f002 f86c 	bl	2b080 <assert_post_action>
   28fa8:	e78e      	b.n	28ec8 <z_timer_expiration_handler+0xa0>
   28faa:	bf00      	nop
   28fac:	20003748 	.word	0x20003748
   28fb0:	000319f0 	.word	0x000319f0
   28fb4:	000318f8 	.word	0x000318f8
   28fb8:	00028e29 	.word	0x00028e29

00028fbc <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   28fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28fc0:	9f06      	ldr	r7, [sp, #24]
   28fc2:	f8dd 801c 	ldr.w	r8, [sp, #28]
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   28fc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   28fca:	bf08      	it	eq
   28fcc:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   28fd0:	d02f      	beq.n	29032 <z_impl_k_timer_start+0x76>
   28fd2:	4605      	mov	r5, r0
   28fd4:	4614      	mov	r4, r2
   28fd6:	461e      	mov	r6, r3
   28fd8:	4611      	mov	r1, r2
   28fda:	4618      	mov	r0, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   28fdc:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   28fe0:	bf08      	it	eq
   28fe2:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
   28fe6:	d00d      	beq.n	29004 <z_impl_k_timer_start+0x48>
   28fe8:	ea57 0c08 	orrs.w	ip, r7, r8
   28fec:	d00a      	beq.n	29004 <z_impl_k_timer_start+0x48>
	    Z_TICK_ABS(period.ticks) < 0) {
   28fee:	f06f 0c01 	mvn.w	ip, #1
   28ff2:	ebbc 0c07 	subs.w	ip, ip, r7
   28ff6:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   28ffa:	eb6c 0c08 	sbc.w	ip, ip, r8
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   28ffe:	f1bc 0f00 	cmp.w	ip, #0
   29002:	db18      	blt.n	29036 <z_impl_k_timer_start+0x7a>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   29004:	f06f 0301 	mvn.w	r3, #1
   29008:	1a5b      	subs	r3, r3, r1
   2900a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2900e:	eb63 0300 	sbc.w	r3, r3, r0
   29012:	2b00      	cmp	r3, #0
   29014:	db1a      	blt.n	2904c <z_impl_k_timer_start+0x90>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
   29016:	4628      	mov	r0, r5
   29018:	f7ff fd34 	bl	28a84 <z_abort_timeout>
	timer->period = period;
   2901c:	62af      	str	r7, [r5, #40]	; 0x28
   2901e:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
	timer->status = 0U;
   29022:	2300      	movs	r3, #0
   29024:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   29026:	4622      	mov	r2, r4
   29028:	4633      	mov	r3, r6
   2902a:	490e      	ldr	r1, [pc, #56]	; (29064 <z_impl_k_timer_start+0xa8>)
   2902c:	4628      	mov	r0, r5
   2902e:	f7ff fc5f 	bl	288f0 <z_add_timeout>
		     duration);
}
   29032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		period.ticks = MAX(period.ticks - 1, 1);
   29036:	2f02      	cmp	r7, #2
   29038:	f178 0300 	sbcs.w	r3, r8, #0
   2903c:	da02      	bge.n	29044 <z_impl_k_timer_start+0x88>
   2903e:	2702      	movs	r7, #2
   29040:	f04f 0800 	mov.w	r8, #0
   29044:	3f01      	subs	r7, #1
   29046:	f148 38ff 	adc.w	r8, r8, #4294967295	; 0xffffffff
   2904a:	e7db      	b.n	29004 <z_impl_k_timer_start+0x48>
		duration.ticks = MAX(duration.ticks - 1, 0);
   2904c:	460c      	mov	r4, r1
   2904e:	4606      	mov	r6, r0
   29050:	2901      	cmp	r1, #1
   29052:	f170 0300 	sbcs.w	r3, r0, #0
   29056:	da01      	bge.n	2905c <z_impl_k_timer_start+0xa0>
   29058:	2401      	movs	r4, #1
   2905a:	2600      	movs	r6, #0
   2905c:	3c01      	subs	r4, #1
   2905e:	f146 36ff 	adc.w	r6, r6, #4294967295	; 0xffffffff
   29062:	e7d8      	b.n	29016 <z_impl_k_timer_start+0x5a>
   29064:	00028e29 	.word	0x00028e29

00029068 <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int num_events,
					      k_spinlock_key_t key)
{
   29068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2906c:	4606      	mov	r6, r0
   2906e:	4615      	mov	r5, r2
	while (num_events--) {
   29070:	e026      	b.n	290c0 <clear_event_registrations+0x58>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   29072:	6923      	ldr	r3, [r4, #16]
   29074:	2b00      	cmp	r3, #0
   29076:	d049      	beq.n	2910c <clear_event_registrations+0xa4>
	return node->next != NULL;
   29078:	f856 3008 	ldr.w	r3, [r6, r8]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   2907c:	b133      	cbz	r3, 2908c <clear_event_registrations+0x24>
	sys_dnode_t *const prev = node->prev;
   2907e:	6862      	ldr	r2, [r4, #4]
	prev->next = next;
   29080:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   29082:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   29084:	2300      	movs	r3, #0
   29086:	f846 3008 	str.w	r3, [r6, r8]
	node->prev = NULL;
   2908a:	6063      	str	r3, [r4, #4]
   2908c:	484d      	ldr	r0, [pc, #308]	; (291c4 <clear_event_registrations+0x15c>)
   2908e:	f7fd f823 	bl	260d8 <z_spin_unlock_valid>
   29092:	2800      	cmp	r0, #0
   29094:	d07e      	beq.n	29194 <clear_event_registrations+0x12c>
   29096:	f385 8811 	msr	BASEPRI, r5
   2909a:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   2909e:	f04f 0340 	mov.w	r3, #64	; 0x40
   290a2:	f3ef 8511 	mrs	r5, BASEPRI
   290a6:	f383 8812 	msr	BASEPRI_MAX, r3
   290aa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   290ae:	4845      	ldr	r0, [pc, #276]	; (291c4 <clear_event_registrations+0x15c>)
   290b0:	f7fd f802 	bl	260b8 <z_spin_lock_valid>
   290b4:	2800      	cmp	r0, #0
   290b6:	d078      	beq.n	291aa <clear_event_registrations+0x142>
	z_spin_lock_set_owner(l);
   290b8:	4842      	ldr	r0, [pc, #264]	; (291c4 <clear_event_registrations+0x15c>)
   290ba:	f7fd f81d 	bl	260f8 <z_spin_lock_set_owner>
	while (num_events--) {
   290be:	4639      	mov	r1, r7
   290c0:	1e4f      	subs	r7, r1, #1
   290c2:	2900      	cmp	r1, #0
   290c4:	d07c      	beq.n	291c0 <clear_event_registrations+0x158>
		clear_event_registration(&events[num_events]);
   290c6:	eb07 0487 	add.w	r4, r7, r7, lsl #2
   290ca:	ea4f 0884 	mov.w	r8, r4, lsl #2
   290ce:	eb06 0484 	add.w	r4, r6, r4, lsl #2
	event->poller = NULL;
   290d2:	2300      	movs	r3, #0
   290d4:	60a3      	str	r3, [r4, #8]
	switch (event->type) {
   290d6:	7b63      	ldrb	r3, [r4, #13]
   290d8:	f003 031f 	and.w	r3, r3, #31
   290dc:	2b08      	cmp	r3, #8
   290de:	d84e      	bhi.n	2917e <clear_event_registrations+0x116>
   290e0:	a201      	add	r2, pc, #4	; (adr r2, 290e8 <clear_event_registrations+0x80>)
   290e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   290e6:	bf00      	nop
   290e8:	0002908d 	.word	0x0002908d
   290ec:	00029143 	.word	0x00029143
   290f0:	00029073 	.word	0x00029073
   290f4:	0002917f 	.word	0x0002917f
   290f8:	00029125 	.word	0x00029125
   290fc:	0002917f 	.word	0x0002917f
   29100:	0002917f 	.word	0x0002917f
   29104:	0002917f 	.word	0x0002917f
   29108:	00029161 	.word	0x00029161
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   2910c:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 291c8 <clear_event_registrations+0x160>
   29110:	22a9      	movs	r2, #169	; 0xa9
   29112:	4649      	mov	r1, r9
   29114:	482d      	ldr	r0, [pc, #180]	; (291cc <clear_event_registrations+0x164>)
   29116:	f001 ffba 	bl	2b08e <assert_print>
   2911a:	21a9      	movs	r1, #169	; 0xa9
   2911c:	4648      	mov	r0, r9
   2911e:	f001 ffaf 	bl	2b080 <assert_post_action>
   29122:	e7a9      	b.n	29078 <clear_event_registrations+0x10>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   29124:	6923      	ldr	r3, [r4, #16]
   29126:	2b00      	cmp	r3, #0
   29128:	d1a6      	bne.n	29078 <clear_event_registrations+0x10>
   2912a:	f8df 909c 	ldr.w	r9, [pc, #156]	; 291c8 <clear_event_registrations+0x160>
   2912e:	22ad      	movs	r2, #173	; 0xad
   29130:	4649      	mov	r1, r9
   29132:	4826      	ldr	r0, [pc, #152]	; (291cc <clear_event_registrations+0x164>)
   29134:	f001 ffab 	bl	2b08e <assert_print>
   29138:	21ad      	movs	r1, #173	; 0xad
   2913a:	4648      	mov	r0, r9
   2913c:	f001 ffa0 	bl	2b080 <assert_post_action>
   29140:	e79a      	b.n	29078 <clear_event_registrations+0x10>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   29142:	6923      	ldr	r3, [r4, #16]
   29144:	2b00      	cmp	r3, #0
   29146:	d197      	bne.n	29078 <clear_event_registrations+0x10>
   29148:	f8df 907c 	ldr.w	r9, [pc, #124]	; 291c8 <clear_event_registrations+0x160>
   2914c:	22b1      	movs	r2, #177	; 0xb1
   2914e:	4649      	mov	r1, r9
   29150:	481e      	ldr	r0, [pc, #120]	; (291cc <clear_event_registrations+0x164>)
   29152:	f001 ff9c 	bl	2b08e <assert_print>
   29156:	21b1      	movs	r1, #177	; 0xb1
   29158:	4648      	mov	r0, r9
   2915a:	f001 ff91 	bl	2b080 <assert_post_action>
   2915e:	e78b      	b.n	29078 <clear_event_registrations+0x10>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   29160:	6923      	ldr	r3, [r4, #16]
   29162:	2b00      	cmp	r3, #0
   29164:	d188      	bne.n	29078 <clear_event_registrations+0x10>
   29166:	f8df 9060 	ldr.w	r9, [pc, #96]	; 291c8 <clear_event_registrations+0x160>
   2916a:	22b5      	movs	r2, #181	; 0xb5
   2916c:	4649      	mov	r1, r9
   2916e:	4817      	ldr	r0, [pc, #92]	; (291cc <clear_event_registrations+0x164>)
   29170:	f001 ff8d 	bl	2b08e <assert_print>
   29174:	21b5      	movs	r1, #181	; 0xb5
   29176:	4648      	mov	r0, r9
   29178:	f001 ff82 	bl	2b080 <assert_post_action>
   2917c:	e77c      	b.n	29078 <clear_event_registrations+0x10>
		__ASSERT(false, "invalid event type\n");
   2917e:	4c12      	ldr	r4, [pc, #72]	; (291c8 <clear_event_registrations+0x160>)
   29180:	22bc      	movs	r2, #188	; 0xbc
   29182:	4621      	mov	r1, r4
   29184:	4811      	ldr	r0, [pc, #68]	; (291cc <clear_event_registrations+0x164>)
   29186:	f001 ff82 	bl	2b08e <assert_print>
   2918a:	21bc      	movs	r1, #188	; 0xbc
   2918c:	4620      	mov	r0, r4
   2918e:	f001 ff77 	bl	2b080 <assert_post_action>
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   29192:	e77b      	b.n	2908c <clear_event_registrations+0x24>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   29194:	4c0e      	ldr	r4, [pc, #56]	; (291d0 <clear_event_registrations+0x168>)
   29196:	22b9      	movs	r2, #185	; 0xb9
   29198:	4621      	mov	r1, r4
   2919a:	480c      	ldr	r0, [pc, #48]	; (291cc <clear_event_registrations+0x164>)
   2919c:	f001 ff77 	bl	2b08e <assert_print>
   291a0:	21b9      	movs	r1, #185	; 0xb9
   291a2:	4620      	mov	r0, r4
   291a4:	f001 ff6c 	bl	2b080 <assert_post_action>
   291a8:	e775      	b.n	29096 <clear_event_registrations+0x2e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   291aa:	4c09      	ldr	r4, [pc, #36]	; (291d0 <clear_event_registrations+0x168>)
   291ac:	228e      	movs	r2, #142	; 0x8e
   291ae:	4621      	mov	r1, r4
   291b0:	4806      	ldr	r0, [pc, #24]	; (291cc <clear_event_registrations+0x164>)
   291b2:	f001 ff6c 	bl	2b08e <assert_print>
   291b6:	218e      	movs	r1, #142	; 0x8e
   291b8:	4620      	mov	r0, r4
   291ba:	f001 ff61 	bl	2b080 <assert_post_action>
   291be:	e77b      	b.n	290b8 <clear_event_registrations+0x50>
		k_spin_unlock(&lock, key);
		key = k_spin_lock(&lock);
	}
}
   291c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   291c4:	2000374c 	.word	0x2000374c
   291c8:	00035140 	.word	0x00035140
   291cc:	000318f8 	.word	0x000318f8
   291d0:	000319f0 	.word	0x000319f0

000291d4 <signal_poller>:

	return events_registered;
}

static int signal_poller(struct k_poll_event *event, uint32_t state)
{
   291d4:	b570      	push	{r4, r5, r6, lr}
   291d6:	460d      	mov	r5, r1
	struct k_thread *thread = poller_thread(event->poller);
   291d8:	6880      	ldr	r0, [r0, #8]
   291da:	f007 fd30 	bl	30c3e <poller_thread>

	__ASSERT(thread != NULL, "poller should have a thread\n");
   291de:	4604      	mov	r4, r0
   291e0:	b1d0      	cbz	r0, 29218 <signal_poller+0x44>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
   291e2:	7b63      	ldrb	r3, [r4, #13]

	if (!z_is_thread_pending(thread)) {
   291e4:	f013 0f02 	tst.w	r3, #2
   291e8:	d02f      	beq.n	2924a <signal_poller+0x76>
	return thread->base.timeout.dticks == _EXPIRED;
   291ea:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   291ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		return 0;
	}

	if (z_is_thread_timeout_expired(thread)) {
   291ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   291f2:	bf08      	it	eq
   291f4:	f112 0f02 	cmneq.w	r2, #2
   291f8:	d029      	beq.n	2924e <signal_poller+0x7a>
		return -EAGAIN;
	}

	z_unpend_thread(thread);
   291fa:	4620      	mov	r0, r4
   291fc:	f7fe fa88 	bl	27710 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   29200:	2d08      	cmp	r5, #8
   29202:	d014      	beq.n	2922e <signal_poller+0x5a>
   29204:	2300      	movs	r3, #0
   29206:	67e3      	str	r3, [r4, #124]	; 0x7c
	uint8_t state = thread->base.thread_state;
   29208:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2920a:	f013 0f1f 	tst.w	r3, #31
   2920e:	d113      	bne.n	29238 <signal_poller+0x64>
	return node->next != NULL;
   29210:	69a3      	ldr	r3, [r4, #24]
   29212:	b17b      	cbz	r3, 29234 <signal_poller+0x60>
   29214:	2300      	movs	r3, #0
   29216:	e010      	b.n	2923a <signal_poller+0x66>
	__ASSERT(thread != NULL, "poller should have a thread\n");
   29218:	4e0e      	ldr	r6, [pc, #56]	; (29254 <signal_poller+0x80>)
   2921a:	22f9      	movs	r2, #249	; 0xf9
   2921c:	4631      	mov	r1, r6
   2921e:	480e      	ldr	r0, [pc, #56]	; (29258 <signal_poller+0x84>)
   29220:	f001 ff35 	bl	2b08e <assert_print>
   29224:	21f9      	movs	r1, #249	; 0xf9
   29226:	4630      	mov	r0, r6
   29228:	f001 ff2a 	bl	2b080 <assert_post_action>
   2922c:	e7d9      	b.n	291e2 <signal_poller+0xe>
	arch_thread_return_value_set(thread,
   2922e:	f06f 0303 	mvn.w	r3, #3
   29232:	e7e8      	b.n	29206 <signal_poller+0x32>
   29234:	2301      	movs	r3, #1
   29236:	e000      	b.n	2923a <signal_poller+0x66>
   29238:	2300      	movs	r3, #0
		state == K_POLL_STATE_CANCELLED ? -EINTR : 0);

	if (!z_is_thread_ready(thread)) {
   2923a:	b90b      	cbnz	r3, 29240 <signal_poller+0x6c>
		return 0;
   2923c:	2000      	movs	r0, #0
   2923e:	e005      	b.n	2924c <signal_poller+0x78>
	}

	z_ready_thread(thread);
   29240:	4620      	mov	r0, r4
   29242:	f7fe fc3b 	bl	27abc <z_ready_thread>

	return 0;
   29246:	2000      	movs	r0, #0
   29248:	e000      	b.n	2924c <signal_poller+0x78>
		return 0;
   2924a:	2000      	movs	r0, #0
}
   2924c:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   2924e:	f06f 000a 	mvn.w	r0, #10
   29252:	e7fb      	b.n	2924c <signal_poller+0x78>
   29254:	00035140 	.word	0x00035140
   29258:	000318f8 	.word	0x000318f8

0002925c <register_event>:
{
   2925c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   29260:	4604      	mov	r4, r0
   29262:	460d      	mov	r5, r1
	switch (event->type) {
   29264:	7b43      	ldrb	r3, [r0, #13]
   29266:	f003 031f 	and.w	r3, r3, #31
   2926a:	2b08      	cmp	r3, #8
   2926c:	f200 813c 	bhi.w	294e8 <register_event+0x28c>
   29270:	e8df f013 	tbh	[pc, r3, lsl #1]
   29274:	00a30144 	.word	0x00a30144
   29278:	013a0009 	.word	0x013a0009
   2927c:	013a0056 	.word	0x013a0056
   29280:	013a013a 	.word	0x013a013a
   29284:	00ed      	.short	0x00ed
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   29286:	6903      	ldr	r3, [r0, #16]
   29288:	2b00      	cmp	r3, #0
   2928a:	d030      	beq.n	292ee <register_event+0x92>
		add_event(&event->sem->poll_events, event, poller);
   2928c:	6927      	ldr	r7, [r4, #16]
   2928e:	f107 0610 	add.w	r6, r7, #16
	return list->head == list;
   29292:	693b      	ldr	r3, [r7, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   29294:	429e      	cmp	r6, r3
   29296:	d035      	beq.n	29304 <register_event+0xa8>
   29298:	6873      	ldr	r3, [r6, #4]
	if ((pending == NULL) ||
   2929a:	2b00      	cmp	r3, #0
   2929c:	d032      	beq.n	29304 <register_event+0xa8>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2929e:	6898      	ldr	r0, [r3, #8]
   292a0:	f007 fccd 	bl	30c3e <poller_thread>
   292a4:	4681      	mov	r9, r0
   292a6:	4628      	mov	r0, r5
   292a8:	f007 fcc9 	bl	30c3e <poller_thread>
   292ac:	4680      	mov	r8, r0
   292ae:	4601      	mov	r1, r0
   292b0:	4648      	mov	r0, r9
   292b2:	f007 fc1e 	bl	30af2 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   292b6:	2800      	cmp	r0, #0
   292b8:	dc24      	bgt.n	29304 <register_event+0xa8>
	return list->head == list;
   292ba:	693f      	ldr	r7, [r7, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   292bc:	42be      	cmp	r6, r7
   292be:	d02d      	beq.n	2931c <register_event+0xc0>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   292c0:	b17f      	cbz	r7, 292e2 <register_event+0x86>
		if (z_sched_prio_cmp(poller_thread(poller),
   292c2:	68b8      	ldr	r0, [r7, #8]
   292c4:	f007 fcbb 	bl	30c3e <poller_thread>
   292c8:	4601      	mov	r1, r0
   292ca:	4640      	mov	r0, r8
   292cc:	f007 fc11 	bl	30af2 <z_sched_prio_cmp>
   292d0:	2800      	cmp	r0, #0
   292d2:	dc1d      	bgt.n	29310 <register_event+0xb4>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   292d4:	b12f      	cbz	r7, 292e2 <register_event+0x86>
	return (node == list->tail) ? NULL : node->next;
   292d6:	6873      	ldr	r3, [r6, #4]
   292d8:	429f      	cmp	r7, r3
   292da:	d002      	beq.n	292e2 <register_event+0x86>
   292dc:	683f      	ldr	r7, [r7, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   292de:	2f00      	cmp	r7, #0
   292e0:	d1ee      	bne.n	292c0 <register_event+0x64>
	sys_dnode_t *const tail = list->tail;
   292e2:	6873      	ldr	r3, [r6, #4]
	node->next = list;
   292e4:	6026      	str	r6, [r4, #0]
	node->prev = tail;
   292e6:	6063      	str	r3, [r4, #4]
	tail->next = node;
   292e8:	601c      	str	r4, [r3, #0]
	list->tail = node;
   292ea:	6074      	str	r4, [r6, #4]
}
   292ec:	e106      	b.n	294fc <register_event+0x2a0>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   292ee:	4e85      	ldr	r6, [pc, #532]	; (29504 <register_event+0x2a8>)
   292f0:	2286      	movs	r2, #134	; 0x86
   292f2:	4631      	mov	r1, r6
   292f4:	4884      	ldr	r0, [pc, #528]	; (29508 <register_event+0x2ac>)
   292f6:	f001 feca 	bl	2b08e <assert_print>
   292fa:	2186      	movs	r1, #134	; 0x86
   292fc:	4630      	mov	r0, r6
   292fe:	f001 febf 	bl	2b080 <assert_post_action>
   29302:	e7c3      	b.n	2928c <register_event+0x30>
	sys_dnode_t *const tail = list->tail;
   29304:	6873      	ldr	r3, [r6, #4]
	node->next = list;
   29306:	6026      	str	r6, [r4, #0]
	node->prev = tail;
   29308:	6063      	str	r3, [r4, #4]
	tail->next = node;
   2930a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2930c:	6074      	str	r4, [r6, #4]
		return;
   2930e:	e0f5      	b.n	294fc <register_event+0x2a0>
	sys_dnode_t *const prev = successor->prev;
   29310:	687b      	ldr	r3, [r7, #4]
	node->prev = prev;
   29312:	6063      	str	r3, [r4, #4]
	node->next = successor;
   29314:	6027      	str	r7, [r4, #0]
	prev->next = node;
   29316:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   29318:	607c      	str	r4, [r7, #4]
			return;
   2931a:	e0ef      	b.n	294fc <register_event+0x2a0>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2931c:	2700      	movs	r7, #0
   2931e:	e7cf      	b.n	292c0 <register_event+0x64>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   29320:	6903      	ldr	r3, [r0, #16]
   29322:	2b00      	cmp	r3, #0
   29324:	d030      	beq.n	29388 <register_event+0x12c>
		add_event(&event->queue->poll_events, event, poller);
   29326:	6927      	ldr	r7, [r4, #16]
   29328:	f107 0614 	add.w	r6, r7, #20
	return list->head == list;
   2932c:	697b      	ldr	r3, [r7, #20]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2932e:	429e      	cmp	r6, r3
   29330:	d035      	beq.n	2939e <register_event+0x142>
   29332:	6873      	ldr	r3, [r6, #4]
	if ((pending == NULL) ||
   29334:	2b00      	cmp	r3, #0
   29336:	d032      	beq.n	2939e <register_event+0x142>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   29338:	6898      	ldr	r0, [r3, #8]
   2933a:	f007 fc80 	bl	30c3e <poller_thread>
   2933e:	4681      	mov	r9, r0
   29340:	4628      	mov	r0, r5
   29342:	f007 fc7c 	bl	30c3e <poller_thread>
   29346:	4680      	mov	r8, r0
   29348:	4601      	mov	r1, r0
   2934a:	4648      	mov	r0, r9
   2934c:	f007 fbd1 	bl	30af2 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   29350:	2800      	cmp	r0, #0
   29352:	dc24      	bgt.n	2939e <register_event+0x142>
	return list->head == list;
   29354:	697f      	ldr	r7, [r7, #20]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29356:	42be      	cmp	r6, r7
   29358:	d02d      	beq.n	293b6 <register_event+0x15a>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2935a:	b17f      	cbz	r7, 2937c <register_event+0x120>
		if (z_sched_prio_cmp(poller_thread(poller),
   2935c:	68b8      	ldr	r0, [r7, #8]
   2935e:	f007 fc6e 	bl	30c3e <poller_thread>
   29362:	4601      	mov	r1, r0
   29364:	4640      	mov	r0, r8
   29366:	f007 fbc4 	bl	30af2 <z_sched_prio_cmp>
   2936a:	2800      	cmp	r0, #0
   2936c:	dc1d      	bgt.n	293aa <register_event+0x14e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2936e:	b12f      	cbz	r7, 2937c <register_event+0x120>
	return (node == list->tail) ? NULL : node->next;
   29370:	6873      	ldr	r3, [r6, #4]
   29372:	429f      	cmp	r7, r3
   29374:	d002      	beq.n	2937c <register_event+0x120>
   29376:	683f      	ldr	r7, [r7, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   29378:	2f00      	cmp	r7, #0
   2937a:	d1ee      	bne.n	2935a <register_event+0xfe>
	sys_dnode_t *const tail = list->tail;
   2937c:	6873      	ldr	r3, [r6, #4]
	node->next = list;
   2937e:	6026      	str	r6, [r4, #0]
	node->prev = tail;
   29380:	6063      	str	r3, [r4, #4]
	tail->next = node;
   29382:	601c      	str	r4, [r3, #0]
	list->tail = node;
   29384:	6074      	str	r4, [r6, #4]
}
   29386:	e0b9      	b.n	294fc <register_event+0x2a0>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   29388:	4e5e      	ldr	r6, [pc, #376]	; (29504 <register_event+0x2a8>)
   2938a:	228a      	movs	r2, #138	; 0x8a
   2938c:	4631      	mov	r1, r6
   2938e:	485e      	ldr	r0, [pc, #376]	; (29508 <register_event+0x2ac>)
   29390:	f001 fe7d 	bl	2b08e <assert_print>
   29394:	218a      	movs	r1, #138	; 0x8a
   29396:	4630      	mov	r0, r6
   29398:	f001 fe72 	bl	2b080 <assert_post_action>
   2939c:	e7c3      	b.n	29326 <register_event+0xca>
	sys_dnode_t *const tail = list->tail;
   2939e:	6873      	ldr	r3, [r6, #4]
	node->next = list;
   293a0:	6026      	str	r6, [r4, #0]
	node->prev = tail;
   293a2:	6063      	str	r3, [r4, #4]
	tail->next = node;
   293a4:	601c      	str	r4, [r3, #0]
	list->tail = node;
   293a6:	6074      	str	r4, [r6, #4]
		return;
   293a8:	e0a8      	b.n	294fc <register_event+0x2a0>
	sys_dnode_t *const prev = successor->prev;
   293aa:	687b      	ldr	r3, [r7, #4]
	node->prev = prev;
   293ac:	6063      	str	r3, [r4, #4]
	node->next = successor;
   293ae:	6027      	str	r7, [r4, #0]
	prev->next = node;
   293b0:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   293b2:	607c      	str	r4, [r7, #4]
			return;
   293b4:	e0a2      	b.n	294fc <register_event+0x2a0>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   293b6:	2700      	movs	r7, #0
   293b8:	e7cf      	b.n	2935a <register_event+0xfe>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   293ba:	6903      	ldr	r3, [r0, #16]
   293bc:	b373      	cbz	r3, 2941c <register_event+0x1c0>
		add_event(&event->signal->poll_events, event, poller);
   293be:	6926      	ldr	r6, [r4, #16]
	return list->head == list;
   293c0:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   293c2:	429e      	cmp	r6, r3
   293c4:	d035      	beq.n	29432 <register_event+0x1d6>
   293c6:	6873      	ldr	r3, [r6, #4]
	if ((pending == NULL) ||
   293c8:	2b00      	cmp	r3, #0
   293ca:	d032      	beq.n	29432 <register_event+0x1d6>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   293cc:	6898      	ldr	r0, [r3, #8]
   293ce:	f007 fc36 	bl	30c3e <poller_thread>
   293d2:	4607      	mov	r7, r0
   293d4:	4628      	mov	r0, r5
   293d6:	f007 fc32 	bl	30c3e <poller_thread>
   293da:	4680      	mov	r8, r0
   293dc:	4601      	mov	r1, r0
   293de:	4638      	mov	r0, r7
   293e0:	f007 fb87 	bl	30af2 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   293e4:	2800      	cmp	r0, #0
   293e6:	dc24      	bgt.n	29432 <register_event+0x1d6>
	return list->head == list;
   293e8:	6837      	ldr	r7, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   293ea:	42be      	cmp	r6, r7
   293ec:	d02d      	beq.n	2944a <register_event+0x1ee>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   293ee:	b17f      	cbz	r7, 29410 <register_event+0x1b4>
		if (z_sched_prio_cmp(poller_thread(poller),
   293f0:	68b8      	ldr	r0, [r7, #8]
   293f2:	f007 fc24 	bl	30c3e <poller_thread>
   293f6:	4601      	mov	r1, r0
   293f8:	4640      	mov	r0, r8
   293fa:	f007 fb7a 	bl	30af2 <z_sched_prio_cmp>
   293fe:	2800      	cmp	r0, #0
   29400:	dc1d      	bgt.n	2943e <register_event+0x1e2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29402:	b12f      	cbz	r7, 29410 <register_event+0x1b4>
	return (node == list->tail) ? NULL : node->next;
   29404:	6873      	ldr	r3, [r6, #4]
   29406:	429f      	cmp	r7, r3
   29408:	d002      	beq.n	29410 <register_event+0x1b4>
   2940a:	683f      	ldr	r7, [r7, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2940c:	2f00      	cmp	r7, #0
   2940e:	d1ee      	bne.n	293ee <register_event+0x192>
	sys_dnode_t *const tail = list->tail;
   29410:	6873      	ldr	r3, [r6, #4]
	node->next = list;
   29412:	6026      	str	r6, [r4, #0]
	node->prev = tail;
   29414:	6063      	str	r3, [r4, #4]
	tail->next = node;
   29416:	601c      	str	r4, [r3, #0]
	list->tail = node;
   29418:	6074      	str	r4, [r6, #4]
}
   2941a:	e06f      	b.n	294fc <register_event+0x2a0>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   2941c:	4e39      	ldr	r6, [pc, #228]	; (29504 <register_event+0x2a8>)
   2941e:	228e      	movs	r2, #142	; 0x8e
   29420:	4631      	mov	r1, r6
   29422:	4839      	ldr	r0, [pc, #228]	; (29508 <register_event+0x2ac>)
   29424:	f001 fe33 	bl	2b08e <assert_print>
   29428:	218e      	movs	r1, #142	; 0x8e
   2942a:	4630      	mov	r0, r6
   2942c:	f001 fe28 	bl	2b080 <assert_post_action>
   29430:	e7c5      	b.n	293be <register_event+0x162>
	sys_dnode_t *const tail = list->tail;
   29432:	6873      	ldr	r3, [r6, #4]
	node->next = list;
   29434:	6026      	str	r6, [r4, #0]
	node->prev = tail;
   29436:	6063      	str	r3, [r4, #4]
	tail->next = node;
   29438:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2943a:	6074      	str	r4, [r6, #4]
		return;
   2943c:	e05e      	b.n	294fc <register_event+0x2a0>
	sys_dnode_t *const prev = successor->prev;
   2943e:	687b      	ldr	r3, [r7, #4]
	node->prev = prev;
   29440:	6063      	str	r3, [r4, #4]
	node->next = successor;
   29442:	6027      	str	r7, [r4, #0]
	prev->next = node;
   29444:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   29446:	607c      	str	r4, [r7, #4]
			return;
   29448:	e058      	b.n	294fc <register_event+0x2a0>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2944a:	2700      	movs	r7, #0
   2944c:	e7cf      	b.n	293ee <register_event+0x192>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   2944e:	6903      	ldr	r3, [r0, #16]
   29450:	2b00      	cmp	r3, #0
   29452:	d030      	beq.n	294b6 <register_event+0x25a>
		add_event(&event->msgq->poll_events, event, poller);
   29454:	6927      	ldr	r7, [r4, #16]
   29456:	f107 0628 	add.w	r6, r7, #40	; 0x28
	return list->head == list;
   2945a:	6abb      	ldr	r3, [r7, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2945c:	429e      	cmp	r6, r3
   2945e:	d035      	beq.n	294cc <register_event+0x270>
   29460:	6873      	ldr	r3, [r6, #4]
	if ((pending == NULL) ||
   29462:	2b00      	cmp	r3, #0
   29464:	d032      	beq.n	294cc <register_event+0x270>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   29466:	6898      	ldr	r0, [r3, #8]
   29468:	f007 fbe9 	bl	30c3e <poller_thread>
   2946c:	4681      	mov	r9, r0
   2946e:	4628      	mov	r0, r5
   29470:	f007 fbe5 	bl	30c3e <poller_thread>
   29474:	4680      	mov	r8, r0
   29476:	4601      	mov	r1, r0
   29478:	4648      	mov	r0, r9
   2947a:	f007 fb3a 	bl	30af2 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   2947e:	2800      	cmp	r0, #0
   29480:	dc24      	bgt.n	294cc <register_event+0x270>
	return list->head == list;
   29482:	6abf      	ldr	r7, [r7, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29484:	42be      	cmp	r6, r7
   29486:	d02d      	beq.n	294e4 <register_event+0x288>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   29488:	b17f      	cbz	r7, 294aa <register_event+0x24e>
		if (z_sched_prio_cmp(poller_thread(poller),
   2948a:	68b8      	ldr	r0, [r7, #8]
   2948c:	f007 fbd7 	bl	30c3e <poller_thread>
   29490:	4601      	mov	r1, r0
   29492:	4640      	mov	r0, r8
   29494:	f007 fb2d 	bl	30af2 <z_sched_prio_cmp>
   29498:	2800      	cmp	r0, #0
   2949a:	dc1d      	bgt.n	294d8 <register_event+0x27c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2949c:	b12f      	cbz	r7, 294aa <register_event+0x24e>
	return (node == list->tail) ? NULL : node->next;
   2949e:	6873      	ldr	r3, [r6, #4]
   294a0:	429f      	cmp	r7, r3
   294a2:	d002      	beq.n	294aa <register_event+0x24e>
   294a4:	683f      	ldr	r7, [r7, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   294a6:	2f00      	cmp	r7, #0
   294a8:	d1ee      	bne.n	29488 <register_event+0x22c>
	sys_dnode_t *const tail = list->tail;
   294aa:	6873      	ldr	r3, [r6, #4]
	node->next = list;
   294ac:	6026      	str	r6, [r4, #0]
	node->prev = tail;
   294ae:	6063      	str	r3, [r4, #4]
	tail->next = node;
   294b0:	601c      	str	r4, [r3, #0]
	list->tail = node;
   294b2:	6074      	str	r4, [r6, #4]
}
   294b4:	e022      	b.n	294fc <register_event+0x2a0>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   294b6:	4e13      	ldr	r6, [pc, #76]	; (29504 <register_event+0x2a8>)
   294b8:	2292      	movs	r2, #146	; 0x92
   294ba:	4631      	mov	r1, r6
   294bc:	4812      	ldr	r0, [pc, #72]	; (29508 <register_event+0x2ac>)
   294be:	f001 fde6 	bl	2b08e <assert_print>
   294c2:	2192      	movs	r1, #146	; 0x92
   294c4:	4630      	mov	r0, r6
   294c6:	f001 fddb 	bl	2b080 <assert_post_action>
   294ca:	e7c3      	b.n	29454 <register_event+0x1f8>
	sys_dnode_t *const tail = list->tail;
   294cc:	6873      	ldr	r3, [r6, #4]
	node->next = list;
   294ce:	6026      	str	r6, [r4, #0]
	node->prev = tail;
   294d0:	6063      	str	r3, [r4, #4]
	tail->next = node;
   294d2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   294d4:	6074      	str	r4, [r6, #4]
		return;
   294d6:	e011      	b.n	294fc <register_event+0x2a0>
	sys_dnode_t *const prev = successor->prev;
   294d8:	687b      	ldr	r3, [r7, #4]
	node->prev = prev;
   294da:	6063      	str	r3, [r4, #4]
	node->next = successor;
   294dc:	6027      	str	r7, [r4, #0]
	prev->next = node;
   294de:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   294e0:	607c      	str	r4, [r7, #4]
			return;
   294e2:	e00b      	b.n	294fc <register_event+0x2a0>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   294e4:	2700      	movs	r7, #0
   294e6:	e7cf      	b.n	29488 <register_event+0x22c>
		__ASSERT(false, "invalid event type\n");
   294e8:	4e06      	ldr	r6, [pc, #24]	; (29504 <register_event+0x2a8>)
   294ea:	2299      	movs	r2, #153	; 0x99
   294ec:	4631      	mov	r1, r6
   294ee:	4806      	ldr	r0, [pc, #24]	; (29508 <register_event+0x2ac>)
   294f0:	f001 fdcd 	bl	2b08e <assert_print>
   294f4:	2199      	movs	r1, #153	; 0x99
   294f6:	4630      	mov	r0, r6
   294f8:	f001 fdc2 	bl	2b080 <assert_post_action>
	event->poller = poller;
   294fc:	60a5      	str	r5, [r4, #8]
}
   294fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   29502:	bf00      	nop
   29504:	00035140 	.word	0x00035140
   29508:	000318f8 	.word	0x000318f8

0002950c <register_events>:
{
   2950c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29510:	b083      	sub	sp, #12
   29512:	4680      	mov	r8, r0
   29514:	460f      	mov	r7, r1
   29516:	4691      	mov	r9, r2
   29518:	469b      	mov	fp, r3
	for (int ii = 0; ii < num_events; ii++) {
   2951a:	2500      	movs	r5, #0
	int events_registered = 0;
   2951c:	9501      	str	r5, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   2951e:	e048      	b.n	295b2 <register_events+0xa6>
   29520:	4c4c      	ldr	r4, [pc, #304]	; (29654 <register_events+0x148>)
   29522:	228e      	movs	r2, #142	; 0x8e
   29524:	4621      	mov	r1, r4
   29526:	484c      	ldr	r0, [pc, #304]	; (29658 <register_events+0x14c>)
   29528:	f001 fdb1 	bl	2b08e <assert_print>
   2952c:	218e      	movs	r1, #142	; 0x8e
   2952e:	4620      	mov	r0, r4
   29530:	f001 fda6 	bl	2b080 <assert_post_action>
   29534:	e04c      	b.n	295d0 <register_events+0xc4>
		if (k_sem_count_get(event->sem) > 0U) {
   29536:	6923      	ldr	r3, [r4, #16]
	return sem->count;
   29538:	689b      	ldr	r3, [r3, #8]
   2953a:	b313      	cbz	r3, 29582 <register_events+0x76>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   2953c:	f04f 0a02 	mov.w	sl, #2
			return true;
   29540:	2301      	movs	r3, #1
   29542:	e01e      	b.n	29582 <register_events+0x76>
		if (!k_queue_is_empty(event->queue)) {
   29544:	6923      	ldr	r3, [r4, #16]
	return list->head;
   29546:	681b      	ldr	r3, [r3, #0]
   29548:	b1db      	cbz	r3, 29582 <register_events+0x76>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   2954a:	f04f 0a04 	mov.w	sl, #4
			return true;
   2954e:	2301      	movs	r3, #1
   29550:	e017      	b.n	29582 <register_events+0x76>
		if (event->signal->signaled != 0U) {
   29552:	6923      	ldr	r3, [r4, #16]
   29554:	689b      	ldr	r3, [r3, #8]
   29556:	b1a3      	cbz	r3, 29582 <register_events+0x76>
			*state = K_POLL_STATE_SIGNALED;
   29558:	f04f 0a01 	mov.w	sl, #1
			return true;
   2955c:	4653      	mov	r3, sl
   2955e:	e010      	b.n	29582 <register_events+0x76>
		if (event->msgq->used_msgs > 0) {
   29560:	6923      	ldr	r3, [r4, #16]
   29562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   29564:	b16b      	cbz	r3, 29582 <register_events+0x76>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   29566:	f04f 0a10 	mov.w	sl, #16
			return true;
   2956a:	2301      	movs	r3, #1
   2956c:	e009      	b.n	29582 <register_events+0x76>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   2956e:	225c      	movs	r2, #92	; 0x5c
   29570:	493a      	ldr	r1, [pc, #232]	; (2965c <register_events+0x150>)
   29572:	4839      	ldr	r0, [pc, #228]	; (29658 <register_events+0x14c>)
   29574:	f001 fd8b 	bl	2b08e <assert_print>
   29578:	215c      	movs	r1, #92	; 0x5c
   2957a:	4838      	ldr	r0, [pc, #224]	; (2965c <register_events+0x150>)
   2957c:	f001 fd80 	bl	2b080 <assert_post_action>
	return false;
   29580:	2300      	movs	r3, #0
		if (is_condition_met(&events[ii], &state)) {
   29582:	2b00      	cmp	r3, #0
   29584:	d048      	beq.n	29618 <register_events+0x10c>
	event->poller = NULL;
   29586:	2100      	movs	r1, #0
   29588:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   2958a:	68e3      	ldr	r3, [r4, #12]
   2958c:	f3c3 3245 	ubfx	r2, r3, #13, #6
   29590:	ea4a 0202 	orr.w	r2, sl, r2
   29594:	f362 3352 	bfi	r3, r2, #13, #6
   29598:	60e3      	str	r3, [r4, #12]
			poller->is_polling = false;
   2959a:	f889 1000 	strb.w	r1, [r9]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2959e:	4830      	ldr	r0, [pc, #192]	; (29660 <register_events+0x154>)
   295a0:	f7fc fd9a 	bl	260d8 <z_spin_unlock_valid>
   295a4:	2800      	cmp	r0, #0
   295a6:	d046      	beq.n	29636 <register_events+0x12a>
	__asm__ volatile(
   295a8:	f386 8811 	msr	BASEPRI, r6
   295ac:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   295b0:	3501      	adds	r5, #1
   295b2:	42bd      	cmp	r5, r7
   295b4:	da4a      	bge.n	2964c <register_events+0x140>
	__asm__ volatile(
   295b6:	f04f 0340 	mov.w	r3, #64	; 0x40
   295ba:	f3ef 8611 	mrs	r6, BASEPRI
   295be:	f383 8812 	msr	BASEPRI_MAX, r3
   295c2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   295c6:	4826      	ldr	r0, [pc, #152]	; (29660 <register_events+0x154>)
   295c8:	f7fc fd76 	bl	260b8 <z_spin_lock_valid>
   295cc:	2800      	cmp	r0, #0
   295ce:	d0a7      	beq.n	29520 <register_events+0x14>
	z_spin_lock_set_owner(l);
   295d0:	4823      	ldr	r0, [pc, #140]	; (29660 <register_events+0x154>)
   295d2:	f7fc fd91 	bl	260f8 <z_spin_lock_set_owner>
		if (is_condition_met(&events[ii], &state)) {
   295d6:	eb05 0485 	add.w	r4, r5, r5, lsl #2
   295da:	eb08 0484 	add.w	r4, r8, r4, lsl #2
	switch (event->type) {
   295de:	7b63      	ldrb	r3, [r4, #13]
   295e0:	f003 031f 	and.w	r3, r3, #31
   295e4:	2b08      	cmp	r3, #8
   295e6:	d8c2      	bhi.n	2956e <register_events+0x62>
   295e8:	a201      	add	r2, pc, #4	; (adr r2, 295f0 <register_events+0xe4>)
   295ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   295ee:	bf00      	nop
   295f0:	00029615 	.word	0x00029615
   295f4:	00029553 	.word	0x00029553
   295f8:	00029537 	.word	0x00029537
   295fc:	0002956f 	.word	0x0002956f
   29600:	00029545 	.word	0x00029545
   29604:	0002956f 	.word	0x0002956f
   29608:	0002956f 	.word	0x0002956f
   2960c:	0002956f 	.word	0x0002956f
   29610:	00029561 	.word	0x00029561
   29614:	2300      	movs	r3, #0
   29616:	e7b4      	b.n	29582 <register_events+0x76>
		} else if (!just_check && poller->is_polling) {
   29618:	f1bb 0f00 	cmp.w	fp, #0
   2961c:	d1bf      	bne.n	2959e <register_events+0x92>
   2961e:	f899 3000 	ldrb.w	r3, [r9]
   29622:	2b00      	cmp	r3, #0
   29624:	d0bb      	beq.n	2959e <register_events+0x92>
			register_event(&events[ii], poller);
   29626:	4649      	mov	r1, r9
   29628:	4620      	mov	r0, r4
   2962a:	f7ff fe17 	bl	2925c <register_event>
			events_registered += 1;
   2962e:	9b01      	ldr	r3, [sp, #4]
   29630:	3301      	adds	r3, #1
   29632:	9301      	str	r3, [sp, #4]
   29634:	e7b3      	b.n	2959e <register_events+0x92>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   29636:	4c07      	ldr	r4, [pc, #28]	; (29654 <register_events+0x148>)
   29638:	22b9      	movs	r2, #185	; 0xb9
   2963a:	4621      	mov	r1, r4
   2963c:	4806      	ldr	r0, [pc, #24]	; (29658 <register_events+0x14c>)
   2963e:	f001 fd26 	bl	2b08e <assert_print>
   29642:	21b9      	movs	r1, #185	; 0xb9
   29644:	4620      	mov	r0, r4
   29646:	f001 fd1b 	bl	2b080 <assert_post_action>
   2964a:	e7ad      	b.n	295a8 <register_events+0x9c>
}
   2964c:	9801      	ldr	r0, [sp, #4]
   2964e:	b003      	add	sp, #12
   29650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29654:	000319f0 	.word	0x000319f0
   29658:	000318f8 	.word	0x000318f8
   2965c:	00035140 	.word	0x00035140
   29660:	2000374c 	.word	0x2000374c

00029664 <k_poll_event_init>:
{
   29664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29668:	4604      	mov	r4, r0
   2966a:	460e      	mov	r6, r1
   2966c:	461d      	mov	r5, r3
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   2966e:	4617      	mov	r7, r2
   29670:	b9ba      	cbnz	r2, 296a2 <k_poll_event_init+0x3e>
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   29672:	2e1f      	cmp	r6, #31
   29674:	d821      	bhi.n	296ba <k_poll_event_init+0x56>
	__ASSERT(obj != NULL, "must provide an object\n");
   29676:	b365      	cbz	r5, 296d2 <k_poll_event_init+0x6e>
	event->poller = NULL;
   29678:	2300      	movs	r3, #0
   2967a:	60a3      	str	r3, [r4, #8]
	event->type = type;
   2967c:	7b62      	ldrb	r2, [r4, #13]
   2967e:	f366 0204 	bfi	r2, r6, #0, #5
   29682:	7362      	strb	r2, [r4, #13]
	event->state = K_POLL_STATE_NOT_READY;
   29684:	68e2      	ldr	r2, [r4, #12]
   29686:	f363 3252 	bfi	r2, r3, #13, #6
   2968a:	60e2      	str	r2, [r4, #12]
	event->mode = mode;
   2968c:	7ba2      	ldrb	r2, [r4, #14]
   2968e:	f367 02c3 	bfi	r2, r7, #3, #1
   29692:	73a2      	strb	r2, [r4, #14]
	event->unused = 0U;
   29694:	89e2      	ldrh	r2, [r4, #14]
   29696:	f363 120f 	bfi	r2, r3, #4, #12
   2969a:	81e2      	strh	r2, [r4, #14]
	event->obj = obj;
   2969c:	6125      	str	r5, [r4, #16]
}
   2969e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   296a2:	f8df 8048 	ldr.w	r8, [pc, #72]	; 296ec <k_poll_event_init+0x88>
   296a6:	222d      	movs	r2, #45	; 0x2d
   296a8:	4641      	mov	r1, r8
   296aa:	4811      	ldr	r0, [pc, #68]	; (296f0 <k_poll_event_init+0x8c>)
   296ac:	f001 fcef 	bl	2b08e <assert_print>
   296b0:	212d      	movs	r1, #45	; 0x2d
   296b2:	4640      	mov	r0, r8
   296b4:	f001 fce4 	bl	2b080 <assert_post_action>
   296b8:	e7db      	b.n	29672 <k_poll_event_init+0xe>
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   296ba:	f8df 8030 	ldr.w	r8, [pc, #48]	; 296ec <k_poll_event_init+0x88>
   296be:	222f      	movs	r2, #47	; 0x2f
   296c0:	4641      	mov	r1, r8
   296c2:	480b      	ldr	r0, [pc, #44]	; (296f0 <k_poll_event_init+0x8c>)
   296c4:	f001 fce3 	bl	2b08e <assert_print>
   296c8:	212f      	movs	r1, #47	; 0x2f
   296ca:	4640      	mov	r0, r8
   296cc:	f001 fcd8 	bl	2b080 <assert_post_action>
   296d0:	e7d1      	b.n	29676 <k_poll_event_init+0x12>
	__ASSERT(obj != NULL, "must provide an object\n");
   296d2:	f8df 8018 	ldr.w	r8, [pc, #24]	; 296ec <k_poll_event_init+0x88>
   296d6:	2230      	movs	r2, #48	; 0x30
   296d8:	4641      	mov	r1, r8
   296da:	4805      	ldr	r0, [pc, #20]	; (296f0 <k_poll_event_init+0x8c>)
   296dc:	f001 fcd7 	bl	2b08e <assert_print>
   296e0:	2130      	movs	r1, #48	; 0x30
   296e2:	4640      	mov	r0, r8
   296e4:	f001 fccc 	bl	2b080 <assert_post_action>
   296e8:	e7c6      	b.n	29678 <k_poll_event_init+0x14>
   296ea:	bf00      	nop
   296ec:	00035140 	.word	0x00035140
   296f0:	000318f8 	.word	0x000318f8

000296f4 <z_impl_k_poll>:

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   296f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   296f8:	b082      	sub	sp, #8
   296fa:	4604      	mov	r4, r0
   296fc:	4688      	mov	r8, r1
   296fe:	4617      	mov	r7, r2
   29700:	461e      	mov	r6, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   29702:	4b70      	ldr	r3, [pc, #448]	; (298c4 <z_impl_k_poll+0x1d0>)
   29704:	689d      	ldr	r5, [r3, #8]
   29706:	f105 0960 	add.w	r9, r5, #96	; 0x60

	poller->is_polling = true;
   2970a:	2301      	movs	r3, #1
   2970c:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	poller->mode = MODE_POLL;
   29710:	f885 3061 	strb.w	r3, [r5, #97]	; 0x61
   29714:	f3ef 8305 	mrs	r3, IPSR

	__ASSERT(!arch_is_in_isr(), "");
   29718:	2b00      	cmp	r3, #0
   2971a:	d156      	bne.n	297ca <z_impl_k_poll+0xd6>
	__ASSERT(events != NULL, "NULL events\n");
   2971c:	2c00      	cmp	r4, #0
   2971e:	d062      	beq.n	297e6 <z_impl_k_poll+0xf2>
	__ASSERT(num_events >= 0, "<0 events\n");
   29720:	f1b8 0f00 	cmp.w	r8, #0
   29724:	db6d      	blt.n	29802 <z_impl_k_poll+0x10e>

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   29726:	ea56 0307 	orrs.w	r3, r6, r7
   2972a:	bf0c      	ite	eq
   2972c:	2301      	moveq	r3, #1
   2972e:	2300      	movne	r3, #0
   29730:	464a      	mov	r2, r9
   29732:	4641      	mov	r1, r8
   29734:	4620      	mov	r0, r4
   29736:	f7ff fee9 	bl	2950c <register_events>
   2973a:	4680      	mov	r8, r0
   2973c:	f04f 0340 	mov.w	r3, #64	; 0x40
   29740:	f3ef 8a11 	mrs	sl, BASEPRI
   29744:	f383 8812 	msr	BASEPRI_MAX, r3
   29748:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2974c:	485e      	ldr	r0, [pc, #376]	; (298c8 <z_impl_k_poll+0x1d4>)
   2974e:	f7fc fcb3 	bl	260b8 <z_spin_lock_valid>
   29752:	2800      	cmp	r0, #0
   29754:	d063      	beq.n	2981e <z_impl_k_poll+0x12a>
	z_spin_lock_set_owner(l);
   29756:	485c      	ldr	r0, [pc, #368]	; (298c8 <z_impl_k_poll+0x1d4>)
   29758:	f7fc fcce 	bl	260f8 <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   2975c:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
   29760:	2b00      	cmp	r3, #0
   29762:	d068      	beq.n	29836 <z_impl_k_poll+0x142>
		SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, 0);

		return 0;
	}

	poller->is_polling = false;
   29764:	2300      	movs	r3, #0
   29766:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2976a:	ea56 0307 	orrs.w	r3, r6, r7
   2976e:	d07c      	beq.n	2986a <z_impl_k_poll+0x176>
		return -EAGAIN;
	}

	static _wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);

	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   29770:	f8df 9154 	ldr.w	r9, [pc, #340]	; 298c8 <z_impl_k_poll+0x1d4>
   29774:	9700      	str	r7, [sp, #0]
   29776:	9601      	str	r6, [sp, #4]
   29778:	4a54      	ldr	r2, [pc, #336]	; (298cc <z_impl_k_poll+0x1d8>)
   2977a:	4651      	mov	r1, sl
   2977c:	4648      	mov	r0, r9
   2977e:	f7fe fb2d 	bl	27ddc <z_pend_curr>
   29782:	4605      	mov	r5, r0
   29784:	f04f 0340 	mov.w	r3, #64	; 0x40
   29788:	f3ef 8611 	mrs	r6, BASEPRI
   2978c:	f383 8812 	msr	BASEPRI_MAX, r3
   29790:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   29794:	4648      	mov	r0, r9
   29796:	f7fc fc8f 	bl	260b8 <z_spin_lock_valid>
   2979a:	2800      	cmp	r0, #0
   2979c:	d07b      	beq.n	29896 <z_impl_k_poll+0x1a2>
	z_spin_lock_set_owner(l);
   2979e:	4f4a      	ldr	r7, [pc, #296]	; (298c8 <z_impl_k_poll+0x1d4>)
   297a0:	4638      	mov	r0, r7
   297a2:	f7fc fca9 	bl	260f8 <z_spin_lock_set_owner>
	 * we've already know the return code (-EAGAIN), and even if they are
	 * added to the list of events that occurred, the user has to check the
	 * return code first, which invalidates the whole list of event states.
	 */
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
   297a6:	4632      	mov	r2, r6
   297a8:	4641      	mov	r1, r8
   297aa:	4620      	mov	r0, r4
   297ac:	f7ff fc5c 	bl	29068 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   297b0:	4638      	mov	r0, r7
   297b2:	f7fc fc91 	bl	260d8 <z_spin_unlock_valid>
   297b6:	2800      	cmp	r0, #0
   297b8:	d078      	beq.n	298ac <z_impl_k_poll+0x1b8>
	__asm__ volatile(
   297ba:	f386 8811 	msr	BASEPRI, r6
   297be:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   297c2:	4628      	mov	r0, r5
   297c4:	b002      	add	sp, #8
   297c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	__ASSERT(!arch_is_in_isr(), "");
   297ca:	f8df a104 	ldr.w	sl, [pc, #260]	; 298d0 <z_impl_k_poll+0x1dc>
   297ce:	f44f 728d 	mov.w	r2, #282	; 0x11a
   297d2:	4651      	mov	r1, sl
   297d4:	483f      	ldr	r0, [pc, #252]	; (298d4 <z_impl_k_poll+0x1e0>)
   297d6:	f001 fc5a 	bl	2b08e <assert_print>
   297da:	f44f 718d 	mov.w	r1, #282	; 0x11a
   297de:	4650      	mov	r0, sl
   297e0:	f001 fc4e 	bl	2b080 <assert_post_action>
   297e4:	e79a      	b.n	2971c <z_impl_k_poll+0x28>
	__ASSERT(events != NULL, "NULL events\n");
   297e6:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 298d0 <z_impl_k_poll+0x1dc>
   297ea:	f240 121b 	movw	r2, #283	; 0x11b
   297ee:	4651      	mov	r1, sl
   297f0:	4838      	ldr	r0, [pc, #224]	; (298d4 <z_impl_k_poll+0x1e0>)
   297f2:	f001 fc4c 	bl	2b08e <assert_print>
   297f6:	f240 111b 	movw	r1, #283	; 0x11b
   297fa:	4650      	mov	r0, sl
   297fc:	f001 fc40 	bl	2b080 <assert_post_action>
   29800:	e78e      	b.n	29720 <z_impl_k_poll+0x2c>
	__ASSERT(num_events >= 0, "<0 events\n");
   29802:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 298d0 <z_impl_k_poll+0x1dc>
   29806:	f44f 728e 	mov.w	r2, #284	; 0x11c
   2980a:	4651      	mov	r1, sl
   2980c:	4831      	ldr	r0, [pc, #196]	; (298d4 <z_impl_k_poll+0x1e0>)
   2980e:	f001 fc3e 	bl	2b08e <assert_print>
   29812:	f44f 718e 	mov.w	r1, #284	; 0x11c
   29816:	4650      	mov	r0, sl
   29818:	f001 fc32 	bl	2b080 <assert_post_action>
   2981c:	e783      	b.n	29726 <z_impl_k_poll+0x32>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2981e:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 298d8 <z_impl_k_poll+0x1e4>
   29822:	228e      	movs	r2, #142	; 0x8e
   29824:	4649      	mov	r1, r9
   29826:	482b      	ldr	r0, [pc, #172]	; (298d4 <z_impl_k_poll+0x1e0>)
   29828:	f001 fc31 	bl	2b08e <assert_print>
   2982c:	218e      	movs	r1, #142	; 0x8e
   2982e:	4648      	mov	r0, r9
   29830:	f001 fc26 	bl	2b080 <assert_post_action>
   29834:	e78f      	b.n	29756 <z_impl_k_poll+0x62>
		clear_event_registrations(events, events_registered, key);
   29836:	4652      	mov	r2, sl
   29838:	4641      	mov	r1, r8
   2983a:	4620      	mov	r0, r4
   2983c:	f7ff fc14 	bl	29068 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   29840:	4821      	ldr	r0, [pc, #132]	; (298c8 <z_impl_k_poll+0x1d4>)
   29842:	f7fc fc49 	bl	260d8 <z_spin_unlock_valid>
   29846:	b128      	cbz	r0, 29854 <z_impl_k_poll+0x160>
   29848:	f38a 8811 	msr	BASEPRI, sl
   2984c:	f3bf 8f6f 	isb	sy
		return 0;
   29850:	2500      	movs	r5, #0
   29852:	e7b6      	b.n	297c2 <z_impl_k_poll+0xce>
   29854:	4c20      	ldr	r4, [pc, #128]	; (298d8 <z_impl_k_poll+0x1e4>)
   29856:	22b9      	movs	r2, #185	; 0xb9
   29858:	4621      	mov	r1, r4
   2985a:	481e      	ldr	r0, [pc, #120]	; (298d4 <z_impl_k_poll+0x1e0>)
   2985c:	f001 fc17 	bl	2b08e <assert_print>
   29860:	21b9      	movs	r1, #185	; 0xb9
   29862:	4620      	mov	r0, r4
   29864:	f001 fc0c 	bl	2b080 <assert_post_action>
   29868:	e7ee      	b.n	29848 <z_impl_k_poll+0x154>
   2986a:	4817      	ldr	r0, [pc, #92]	; (298c8 <z_impl_k_poll+0x1d4>)
   2986c:	f7fc fc34 	bl	260d8 <z_spin_unlock_valid>
   29870:	b130      	cbz	r0, 29880 <z_impl_k_poll+0x18c>
   29872:	f38a 8811 	msr	BASEPRI, sl
   29876:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   2987a:	f06f 050a 	mvn.w	r5, #10
   2987e:	e7a0      	b.n	297c2 <z_impl_k_poll+0xce>
   29880:	4c15      	ldr	r4, [pc, #84]	; (298d8 <z_impl_k_poll+0x1e4>)
   29882:	22b9      	movs	r2, #185	; 0xb9
   29884:	4621      	mov	r1, r4
   29886:	4813      	ldr	r0, [pc, #76]	; (298d4 <z_impl_k_poll+0x1e0>)
   29888:	f001 fc01 	bl	2b08e <assert_print>
   2988c:	21b9      	movs	r1, #185	; 0xb9
   2988e:	4620      	mov	r0, r4
   29890:	f001 fbf6 	bl	2b080 <assert_post_action>
   29894:	e7ed      	b.n	29872 <z_impl_k_poll+0x17e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   29896:	4f10      	ldr	r7, [pc, #64]	; (298d8 <z_impl_k_poll+0x1e4>)
   29898:	228e      	movs	r2, #142	; 0x8e
   2989a:	4639      	mov	r1, r7
   2989c:	480d      	ldr	r0, [pc, #52]	; (298d4 <z_impl_k_poll+0x1e0>)
   2989e:	f001 fbf6 	bl	2b08e <assert_print>
   298a2:	218e      	movs	r1, #142	; 0x8e
   298a4:	4638      	mov	r0, r7
   298a6:	f001 fbeb 	bl	2b080 <assert_post_action>
   298aa:	e778      	b.n	2979e <z_impl_k_poll+0xaa>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   298ac:	4c0a      	ldr	r4, [pc, #40]	; (298d8 <z_impl_k_poll+0x1e4>)
   298ae:	22b9      	movs	r2, #185	; 0xb9
   298b0:	4621      	mov	r1, r4
   298b2:	4808      	ldr	r0, [pc, #32]	; (298d4 <z_impl_k_poll+0x1e0>)
   298b4:	f001 fbeb 	bl	2b08e <assert_print>
   298b8:	21b9      	movs	r1, #185	; 0xb9
   298ba:	4620      	mov	r0, r4
   298bc:	f001 fbe0 	bl	2b080 <assert_post_action>
   298c0:	e77b      	b.n	297ba <z_impl_k_poll+0xc6>
   298c2:	bf00      	nop
   298c4:	200036f4 	.word	0x200036f4
   298c8:	2000374c 	.word	0x2000374c
   298cc:	200008a8 	.word	0x200008a8
   298d0:	00035140 	.word	0x00035140
   298d4:	000318f8 	.word	0x000318f8
   298d8:	000319f0 	.word	0x000319f0

000298dc <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   298dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   298de:	4604      	mov	r4, r0
   298e0:	460d      	mov	r5, r1
	__asm__ volatile(
   298e2:	f04f 0340 	mov.w	r3, #64	; 0x40
   298e6:	f3ef 8611 	mrs	r6, BASEPRI
   298ea:	f383 8812 	msr	BASEPRI_MAX, r3
   298ee:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   298f2:	481f      	ldr	r0, [pc, #124]	; (29970 <z_impl_k_poll_signal_raise+0x94>)
   298f4:	f7fc fbe0 	bl	260b8 <z_spin_lock_valid>
   298f8:	b1d0      	cbz	r0, 29930 <z_impl_k_poll_signal_raise+0x54>
	z_spin_lock_set_owner(l);
   298fa:	481d      	ldr	r0, [pc, #116]	; (29970 <z_impl_k_poll_signal_raise+0x94>)
   298fc:	f7fc fbfc 	bl	260f8 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   29900:	60e5      	str	r5, [r4, #12]
	sig->signaled = 1U;
   29902:	2301      	movs	r3, #1
   29904:	60a3      	str	r3, [r4, #8]
	return list->head == list;
   29906:	6820      	ldr	r0, [r4, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   29908:	4284      	cmp	r4, r0
   2990a:	d01c      	beq.n	29946 <z_impl_k_poll_signal_raise+0x6a>
	sys_dnode_t *const prev = node->prev;
   2990c:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   2990e:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   29910:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   29912:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   29914:	2300      	movs	r3, #0
   29916:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   29918:	6043      	str	r3, [r0, #4]

	poll_event = (struct k_poll_event *)sys_dlist_get(&sig->poll_events);
	if (poll_event == NULL) {
   2991a:	b1a0      	cbz	r0, 29946 <z_impl_k_poll_signal_raise+0x6a>
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   2991c:	2101      	movs	r1, #1
   2991e:	f007 f9a7 	bl	30c70 <signal_poll_event>
   29922:	4604      	mov	r4, r0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   29924:	4631      	mov	r1, r6
   29926:	4812      	ldr	r0, [pc, #72]	; (29970 <z_impl_k_poll_signal_raise+0x94>)
   29928:	f7fd fe34 	bl	27594 <z_reschedule>
	return rc;
}
   2992c:	4620      	mov	r0, r4
   2992e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   29930:	4f10      	ldr	r7, [pc, #64]	; (29974 <z_impl_k_poll_signal_raise+0x98>)
   29932:	228e      	movs	r2, #142	; 0x8e
   29934:	4639      	mov	r1, r7
   29936:	4810      	ldr	r0, [pc, #64]	; (29978 <z_impl_k_poll_signal_raise+0x9c>)
   29938:	f001 fba9 	bl	2b08e <assert_print>
   2993c:	218e      	movs	r1, #142	; 0x8e
   2993e:	4638      	mov	r0, r7
   29940:	f001 fb9e 	bl	2b080 <assert_post_action>
   29944:	e7d9      	b.n	298fa <z_impl_k_poll_signal_raise+0x1e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   29946:	480a      	ldr	r0, [pc, #40]	; (29970 <z_impl_k_poll_signal_raise+0x94>)
   29948:	f7fc fbc6 	bl	260d8 <z_spin_unlock_valid>
   2994c:	b128      	cbz	r0, 2995a <z_impl_k_poll_signal_raise+0x7e>
	__asm__ volatile(
   2994e:	f386 8811 	msr	BASEPRI, r6
   29952:	f3bf 8f6f 	isb	sy
		return 0;
   29956:	2400      	movs	r4, #0
   29958:	e7e8      	b.n	2992c <z_impl_k_poll_signal_raise+0x50>
   2995a:	4c06      	ldr	r4, [pc, #24]	; (29974 <z_impl_k_poll_signal_raise+0x98>)
   2995c:	22b9      	movs	r2, #185	; 0xb9
   2995e:	4621      	mov	r1, r4
   29960:	4805      	ldr	r0, [pc, #20]	; (29978 <z_impl_k_poll_signal_raise+0x9c>)
   29962:	f001 fb94 	bl	2b08e <assert_print>
   29966:	21b9      	movs	r1, #185	; 0xb9
   29968:	4620      	mov	r0, r4
   2996a:	f001 fb89 	bl	2b080 <assert_post_action>
   2996e:	e7ee      	b.n	2994e <z_impl_k_poll_signal_raise+0x72>
   29970:	2000374c 	.word	0x2000374c
   29974:	000319f0 	.word	0x000319f0
   29978:	000318f8 	.word	0x000318f8

0002997c <z_heap_aligned_alloc>:
#include <string.h>
#include <zephyr/sys/math_extras.h>
#include <zephyr/sys/util.h>

static void *z_heap_aligned_alloc(struct k_heap *heap, size_t align, size_t size)
{
   2997c:	b570      	push	{r4, r5, r6, lr}
   2997e:	b082      	sub	sp, #8
   29980:	4606      	mov	r6, r0
   29982:	460c      	mov	r4, r1
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   29984:	2300      	movs	r3, #0
   29986:	3204      	adds	r2, #4
   29988:	d21c      	bcs.n	299c4 <z_heap_aligned_alloc+0x48>
	 * Adjust the size to make room for our heap reference.
	 * Merge a rewind bit with align value (see sys_heap_aligned_alloc()).
	 * This allows for storing the heap pointer right below the aligned
	 * boundary without wasting any memory.
	 */
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
   2998a:	b9eb      	cbnz	r3, 299c8 <z_heap_aligned_alloc+0x4c>
		return NULL;
	}
	__align = align | sizeof(heap_ref);

	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   2998c:	2000      	movs	r0, #0
   2998e:	2100      	movs	r1, #0
   29990:	e9cd 0100 	strd	r0, r1, [sp]
   29994:	f044 0104 	orr.w	r1, r4, #4
   29998:	4630      	mov	r0, r6
   2999a:	f7fc f8c1 	bl	25b20 <k_heap_aligned_alloc>
	if (mem == NULL) {
   2999e:	4605      	mov	r5, r0
   299a0:	b198      	cbz	r0, 299ca <z_heap_aligned_alloc+0x4e>
		return NULL;
	}

	heap_ref = mem;
	*heap_ref = heap;
   299a2:	f845 6b04 	str.w	r6, [r5], #4
	mem = ++heap_ref;
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
   299a6:	b184      	cbz	r4, 299ca <z_heap_aligned_alloc+0x4e>
   299a8:	3c01      	subs	r4, #1
   299aa:	4225      	tst	r5, r4
   299ac:	d00d      	beq.n	299ca <z_heap_aligned_alloc+0x4e>
   299ae:	4c08      	ldr	r4, [pc, #32]	; (299d0 <z_heap_aligned_alloc+0x54>)
   299b0:	2225      	movs	r2, #37	; 0x25
   299b2:	4621      	mov	r1, r4
   299b4:	4807      	ldr	r0, [pc, #28]	; (299d4 <z_heap_aligned_alloc+0x58>)
   299b6:	f001 fb6a 	bl	2b08e <assert_print>
   299ba:	2125      	movs	r1, #37	; 0x25
   299bc:	4620      	mov	r0, r4
   299be:	f001 fb5f 	bl	2b080 <assert_post_action>
   299c2:	e002      	b.n	299ca <z_heap_aligned_alloc+0x4e>
   299c4:	2301      	movs	r3, #1
   299c6:	e7e0      	b.n	2998a <z_heap_aligned_alloc+0xe>
		return NULL;
   299c8:	2500      	movs	r5, #0
		 "misaligned memory at %p (align = %zu)", mem, align);

	return mem;
}
   299ca:	4628      	mov	r0, r5
   299cc:	b002      	add	sp, #8
   299ce:	bd70      	pop	{r4, r5, r6, pc}
   299d0:	00035164 	.word	0x00035164
   299d4:	000318f8 	.word	0x000318f8

000299d8 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   299d8:	b538      	push	{r3, r4, r5, lr}
   299da:	4604      	mov	r4, r0
   299dc:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   299de:	f006 ffa0 	bl	30922 <k_is_in_isr>
   299e2:	b940      	cbnz	r0, 299f6 <z_thread_aligned_alloc+0x1e>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   299e4:	4b05      	ldr	r3, [pc, #20]	; (299fc <z_thread_aligned_alloc+0x24>)
   299e6:	689b      	ldr	r3, [r3, #8]
   299e8:	6f58      	ldr	r0, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   299ea:	b118      	cbz	r0, 299f4 <z_thread_aligned_alloc+0x1c>
		ret = z_heap_aligned_alloc(heap, align, size);
   299ec:	462a      	mov	r2, r5
   299ee:	4621      	mov	r1, r4
   299f0:	f7ff ffc4 	bl	2997c <z_heap_aligned_alloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   299f4:	bd38      	pop	{r3, r4, r5, pc}
		ret = NULL;
   299f6:	2000      	movs	r0, #0
	return ret;
   299f8:	e7fc      	b.n	299f4 <z_thread_aligned_alloc+0x1c>
   299fa:	bf00      	nop
   299fc:	200036f4 	.word	0x200036f4

00029a00 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
   29a00:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   29a02:	4a03      	ldr	r2, [pc, #12]	; (29a10 <boot_banner+0x10>)
   29a04:	4903      	ldr	r1, [pc, #12]	; (29a14 <boot_banner+0x14>)
   29a06:	4804      	ldr	r0, [pc, #16]	; (29a18 <boot_banner+0x18>)
   29a08:	f001 f921 	bl	2ac4e <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
   29a0c:	bd08      	pop	{r3, pc}
   29a0e:	bf00      	nop
   29a10:	00032274 	.word	0x00032274
   29a14:	00035188 	.word	0x00035188
   29a18:	00035198 	.word	0x00035198

00029a1c <ocrypto_ecdh_p256_public_key>:
   29a1c:	b530      	push	{r4, r5, lr}
   29a1e:	b099      	sub	sp, #100	; 0x64
   29a20:	4605      	mov	r5, r0
   29a22:	4668      	mov	r0, sp
   29a24:	f000 f828 	bl	29a78 <ocrypto_sc_p256_from32bytes>
   29a28:	4669      	mov	r1, sp
   29a2a:	4604      	mov	r4, r0
   29a2c:	a808      	add	r0, sp, #32
   29a2e:	f000 fa53 	bl	29ed8 <ocrypto_curve_p256_scalarmult_base>
   29a32:	a908      	add	r1, sp, #32
   29a34:	4304      	orrs	r4, r0
   29a36:	4628      	mov	r0, r5
   29a38:	f000 f98a 	bl	29d50 <ocrypto_curve_p256_to64bytes>
   29a3c:	4620      	mov	r0, r4
   29a3e:	b019      	add	sp, #100	; 0x64
   29a40:	bd30      	pop	{r4, r5, pc}
   29a42:	bf00      	nop

00029a44 <ocrypto_ecdh_p256_common_secret>:
   29a44:	b570      	push	{r4, r5, r6, lr}
   29a46:	b098      	sub	sp, #96	; 0x60
   29a48:	4605      	mov	r5, r0
   29a4a:	4668      	mov	r0, sp
   29a4c:	4616      	mov	r6, r2
   29a4e:	f000 f813 	bl	29a78 <ocrypto_sc_p256_from32bytes>
   29a52:	4631      	mov	r1, r6
   29a54:	4604      	mov	r4, r0
   29a56:	a808      	add	r0, sp, #32
   29a58:	f000 f946 	bl	29ce8 <ocrypto_curve_p256_from64bytes>
   29a5c:	a908      	add	r1, sp, #32
   29a5e:	466a      	mov	r2, sp
   29a60:	4304      	orrs	r4, r0
   29a62:	4608      	mov	r0, r1
   29a64:	f000 f982 	bl	29d6c <ocrypto_curve_p256_scalarmult>
   29a68:	a908      	add	r1, sp, #32
   29a6a:	4304      	orrs	r4, r0
   29a6c:	4628      	mov	r0, r5
   29a6e:	f000 f96d 	bl	29d4c <ocrypto_curve_p256_to32bytes>
   29a72:	4620      	mov	r0, r4
   29a74:	b018      	add	sp, #96	; 0x60
   29a76:	bd70      	pop	{r4, r5, r6, pc}

00029a78 <ocrypto_sc_p256_from32bytes>:
   29a78:	b570      	push	{r4, r5, r6, lr}
   29a7a:	680b      	ldr	r3, [r1, #0]
   29a7c:	4e12      	ldr	r6, [pc, #72]	; (29ac8 <ocrypto_sc_p256_from32bytes+0x50>)
   29a7e:	ba1b      	rev	r3, r3
   29a80:	61c3      	str	r3, [r0, #28]
   29a82:	684b      	ldr	r3, [r1, #4]
   29a84:	ba1b      	rev	r3, r3
   29a86:	6183      	str	r3, [r0, #24]
   29a88:	688b      	ldr	r3, [r1, #8]
   29a8a:	ba1b      	rev	r3, r3
   29a8c:	6143      	str	r3, [r0, #20]
   29a8e:	68cb      	ldr	r3, [r1, #12]
   29a90:	ba1b      	rev	r3, r3
   29a92:	6103      	str	r3, [r0, #16]
   29a94:	690b      	ldr	r3, [r1, #16]
   29a96:	ba1b      	rev	r3, r3
   29a98:	60c3      	str	r3, [r0, #12]
   29a9a:	694b      	ldr	r3, [r1, #20]
   29a9c:	ba1b      	rev	r3, r3
   29a9e:	6083      	str	r3, [r0, #8]
   29aa0:	698b      	ldr	r3, [r1, #24]
   29aa2:	ba1b      	rev	r3, r3
   29aa4:	6043      	str	r3, [r0, #4]
   29aa6:	69cb      	ldr	r3, [r1, #28]
   29aa8:	ba1b      	rev	r3, r3
   29aaa:	4632      	mov	r2, r6
   29aac:	6003      	str	r3, [r0, #0]
   29aae:	4601      	mov	r1, r0
   29ab0:	4604      	mov	r4, r0
   29ab2:	f7d7 fb5f 	bl	1174 <ocrypto_bigint_sub256>
   29ab6:	4631      	mov	r1, r6
   29ab8:	4605      	mov	r5, r0
   29aba:	4602      	mov	r2, r0
   29abc:	4620      	mov	r0, r4
   29abe:	f7d7 fb79 	bl	11b4 <ocrypto_bigint_cadd256>
   29ac2:	1e68      	subs	r0, r5, #1
   29ac4:	bd70      	pop	{r4, r5, r6, pc}
   29ac6:	bf00      	nop
   29ac8:	000351c0 	.word	0x000351c0

00029acc <p256_zdblu>:
   29acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29ad0:	b088      	sub	sp, #32
   29ad2:	460c      	mov	r4, r1
   29ad4:	4606      	mov	r6, r0
   29ad6:	f102 0120 	add.w	r1, r2, #32
   29ada:	4668      	mov	r0, sp
   29adc:	f106 0720 	add.w	r7, r6, #32
   29ae0:	4690      	mov	r8, r2
   29ae2:	f7d7 fe51 	bl	1788 <ocrypto_mod_p256_sqr>
   29ae6:	466a      	mov	r2, sp
   29ae8:	4669      	mov	r1, sp
   29aea:	4668      	mov	r0, sp
   29aec:	f7d7 fd5e 	bl	15ac <ocrypto_mod_p256_add>
   29af0:	4669      	mov	r1, sp
   29af2:	4638      	mov	r0, r7
   29af4:	f7d7 fe48 	bl	1788 <ocrypto_mod_p256_sqr>
   29af8:	463a      	mov	r2, r7
   29afa:	4639      	mov	r1, r7
   29afc:	4638      	mov	r0, r7
   29afe:	f104 0520 	add.w	r5, r4, #32
   29b02:	f7d7 fd53 	bl	15ac <ocrypto_mod_p256_add>
   29b06:	466a      	mov	r2, sp
   29b08:	4669      	mov	r1, sp
   29b0a:	4668      	mov	r0, sp
   29b0c:	f7d7 fd4e 	bl	15ac <ocrypto_mod_p256_add>
   29b10:	4641      	mov	r1, r8
   29b12:	4628      	mov	r0, r5
   29b14:	f7d7 fe38 	bl	1788 <ocrypto_mod_p256_sqr>
   29b18:	466a      	mov	r2, sp
   29b1a:	4641      	mov	r1, r8
   29b1c:	4630      	mov	r0, r6
   29b1e:	f7d7 fe1b 	bl	1758 <ocrypto_mod_p256_mul>
   29b22:	462a      	mov	r2, r5
   29b24:	4629      	mov	r1, r5
   29b26:	4668      	mov	r0, sp
   29b28:	f7d7 fd40 	bl	15ac <ocrypto_mod_p256_add>
   29b2c:	462a      	mov	r2, r5
   29b2e:	4669      	mov	r1, sp
   29b30:	4668      	mov	r0, sp
   29b32:	f7d7 fd3b 	bl	15ac <ocrypto_mod_p256_add>
   29b36:	4a12      	ldr	r2, [pc, #72]	; (29b80 <p256_zdblu+0xb4>)
   29b38:	4669      	mov	r1, sp
   29b3a:	4668      	mov	r0, sp
   29b3c:	f7d7 fd36 	bl	15ac <ocrypto_mod_p256_add>
   29b40:	4669      	mov	r1, sp
   29b42:	4620      	mov	r0, r4
   29b44:	f7d7 fe20 	bl	1788 <ocrypto_mod_p256_sqr>
   29b48:	4632      	mov	r2, r6
   29b4a:	4621      	mov	r1, r4
   29b4c:	4620      	mov	r0, r4
   29b4e:	f7d7 fd6b 	bl	1628 <ocrypto_mod_p256_sub>
   29b52:	4632      	mov	r2, r6
   29b54:	4621      	mov	r1, r4
   29b56:	4620      	mov	r0, r4
   29b58:	f7d7 fd66 	bl	1628 <ocrypto_mod_p256_sub>
   29b5c:	4622      	mov	r2, r4
   29b5e:	4631      	mov	r1, r6
   29b60:	4628      	mov	r0, r5
   29b62:	f7d7 fd61 	bl	1628 <ocrypto_mod_p256_sub>
   29b66:	466a      	mov	r2, sp
   29b68:	4629      	mov	r1, r5
   29b6a:	4628      	mov	r0, r5
   29b6c:	f7d7 fdf4 	bl	1758 <ocrypto_mod_p256_mul>
   29b70:	463a      	mov	r2, r7
   29b72:	4629      	mov	r1, r5
   29b74:	4628      	mov	r0, r5
   29b76:	f7d7 fd57 	bl	1628 <ocrypto_mod_p256_sub>
   29b7a:	b008      	add	sp, #32
   29b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   29b80:	00035260 	.word	0x00035260

00029b84 <p256_zaddc>:
   29b84:	b5f0      	push	{r4, r5, r6, r7, lr}
   29b86:	b099      	sub	sp, #100	; 0x64
   29b88:	4604      	mov	r4, r0
   29b8a:	460d      	mov	r5, r1
   29b8c:	460a      	mov	r2, r1
   29b8e:	4601      	mov	r1, r0
   29b90:	4668      	mov	r0, sp
   29b92:	f7d7 fd49 	bl	1628 <ocrypto_mod_p256_sub>
   29b96:	4669      	mov	r1, sp
   29b98:	4668      	mov	r0, sp
   29b9a:	f7d7 fdf5 	bl	1788 <ocrypto_mod_p256_sqr>
   29b9e:	466a      	mov	r2, sp
   29ba0:	4621      	mov	r1, r4
   29ba2:	a808      	add	r0, sp, #32
   29ba4:	f105 0620 	add.w	r6, r5, #32
   29ba8:	f104 0720 	add.w	r7, r4, #32
   29bac:	f7d7 fdd4 	bl	1758 <ocrypto_mod_p256_mul>
   29bb0:	466a      	mov	r2, sp
   29bb2:	4629      	mov	r1, r5
   29bb4:	4668      	mov	r0, sp
   29bb6:	f7d7 fdcf 	bl	1758 <ocrypto_mod_p256_mul>
   29bba:	4632      	mov	r2, r6
   29bbc:	4639      	mov	r1, r7
   29bbe:	a810      	add	r0, sp, #64	; 0x40
   29bc0:	f7d7 fcf4 	bl	15ac <ocrypto_mod_p256_add>
   29bc4:	4632      	mov	r2, r6
   29bc6:	4639      	mov	r1, r7
   29bc8:	4630      	mov	r0, r6
   29bca:	f7d7 fd2d 	bl	1628 <ocrypto_mod_p256_sub>
   29bce:	4631      	mov	r1, r6
   29bd0:	4628      	mov	r0, r5
   29bd2:	f7d7 fdd9 	bl	1788 <ocrypto_mod_p256_sqr>
   29bd6:	466a      	mov	r2, sp
   29bd8:	a908      	add	r1, sp, #32
   29bda:	4620      	mov	r0, r4
   29bdc:	f7d7 fce6 	bl	15ac <ocrypto_mod_p256_add>
   29be0:	4622      	mov	r2, r4
   29be2:	4629      	mov	r1, r5
   29be4:	4628      	mov	r0, r5
   29be6:	f7d7 fd1f 	bl	1628 <ocrypto_mod_p256_sub>
   29bea:	466a      	mov	r2, sp
   29bec:	a908      	add	r1, sp, #32
   29bee:	4668      	mov	r0, sp
   29bf0:	f7d7 fd1a 	bl	1628 <ocrypto_mod_p256_sub>
   29bf4:	466a      	mov	r2, sp
   29bf6:	4639      	mov	r1, r7
   29bf8:	4638      	mov	r0, r7
   29bfa:	f7d7 fdad 	bl	1758 <ocrypto_mod_p256_mul>
   29bfe:	462a      	mov	r2, r5
   29c00:	a908      	add	r1, sp, #32
   29c02:	4668      	mov	r0, sp
   29c04:	f7d7 fd10 	bl	1628 <ocrypto_mod_p256_sub>
   29c08:	466a      	mov	r2, sp
   29c0a:	4631      	mov	r1, r6
   29c0c:	4630      	mov	r0, r6
   29c0e:	f7d7 fda3 	bl	1758 <ocrypto_mod_p256_mul>
   29c12:	463a      	mov	r2, r7
   29c14:	4631      	mov	r1, r6
   29c16:	4630      	mov	r0, r6
   29c18:	f7d7 fd06 	bl	1628 <ocrypto_mod_p256_sub>
   29c1c:	a910      	add	r1, sp, #64	; 0x40
   29c1e:	4668      	mov	r0, sp
   29c20:	f7d7 fdb2 	bl	1788 <ocrypto_mod_p256_sqr>
   29c24:	4622      	mov	r2, r4
   29c26:	4669      	mov	r1, sp
   29c28:	4620      	mov	r0, r4
   29c2a:	f7d7 fcfd 	bl	1628 <ocrypto_mod_p256_sub>
   29c2e:	a908      	add	r1, sp, #32
   29c30:	4622      	mov	r2, r4
   29c32:	4608      	mov	r0, r1
   29c34:	f7d7 fcf8 	bl	1628 <ocrypto_mod_p256_sub>
   29c38:	a910      	add	r1, sp, #64	; 0x40
   29c3a:	aa08      	add	r2, sp, #32
   29c3c:	4608      	mov	r0, r1
   29c3e:	f7d7 fd8b 	bl	1758 <ocrypto_mod_p256_mul>
   29c42:	463a      	mov	r2, r7
   29c44:	a910      	add	r1, sp, #64	; 0x40
   29c46:	4638      	mov	r0, r7
   29c48:	f7d7 fcee 	bl	1628 <ocrypto_mod_p256_sub>
   29c4c:	b019      	add	sp, #100	; 0x64
   29c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00029c50 <p256_zaddu>:
   29c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29c54:	b088      	sub	sp, #32
   29c56:	460c      	mov	r4, r1
   29c58:	4605      	mov	r5, r0
   29c5a:	4690      	mov	r8, r2
   29c5c:	460a      	mov	r2, r1
   29c5e:	4601      	mov	r1, r0
   29c60:	4668      	mov	r0, sp
   29c62:	f7d7 fce1 	bl	1628 <ocrypto_mod_p256_sub>
   29c66:	4669      	mov	r1, sp
   29c68:	4668      	mov	r0, sp
   29c6a:	f7d7 fd8d 	bl	1788 <ocrypto_mod_p256_sqr>
   29c6e:	466a      	mov	r2, sp
   29c70:	4629      	mov	r1, r5
   29c72:	4628      	mov	r0, r5
   29c74:	f104 0620 	add.w	r6, r4, #32
   29c78:	f7d7 fd6e 	bl	1758 <ocrypto_mod_p256_mul>
   29c7c:	f105 0720 	add.w	r7, r5, #32
   29c80:	466a      	mov	r2, sp
   29c82:	4621      	mov	r1, r4
   29c84:	4668      	mov	r0, sp
   29c86:	f7d7 fd67 	bl	1758 <ocrypto_mod_p256_mul>
   29c8a:	4632      	mov	r2, r6
   29c8c:	4639      	mov	r1, r7
   29c8e:	4630      	mov	r0, r6
   29c90:	f7d7 fcca 	bl	1628 <ocrypto_mod_p256_sub>
   29c94:	4631      	mov	r1, r6
   29c96:	4620      	mov	r0, r4
   29c98:	f7d7 fd76 	bl	1788 <ocrypto_mod_p256_sqr>
   29c9c:	462a      	mov	r2, r5
   29c9e:	4621      	mov	r1, r4
   29ca0:	4620      	mov	r0, r4
   29ca2:	f7d7 fcc1 	bl	1628 <ocrypto_mod_p256_sub>
   29ca6:	466a      	mov	r2, sp
   29ca8:	4621      	mov	r1, r4
   29caa:	4620      	mov	r0, r4
   29cac:	f7d7 fcbc 	bl	1628 <ocrypto_mod_p256_sub>
   29cb0:	466a      	mov	r2, sp
   29cb2:	4629      	mov	r1, r5
   29cb4:	4640      	mov	r0, r8
   29cb6:	f7d7 fcb7 	bl	1628 <ocrypto_mod_p256_sub>
   29cba:	4642      	mov	r2, r8
   29cbc:	4639      	mov	r1, r7
   29cbe:	4638      	mov	r0, r7
   29cc0:	f7d7 fd4a 	bl	1758 <ocrypto_mod_p256_mul>
   29cc4:	4622      	mov	r2, r4
   29cc6:	4629      	mov	r1, r5
   29cc8:	4668      	mov	r0, sp
   29cca:	f7d7 fcad 	bl	1628 <ocrypto_mod_p256_sub>
   29cce:	466a      	mov	r2, sp
   29cd0:	4631      	mov	r1, r6
   29cd2:	4630      	mov	r0, r6
   29cd4:	f7d7 fd40 	bl	1758 <ocrypto_mod_p256_mul>
   29cd8:	463a      	mov	r2, r7
   29cda:	4631      	mov	r1, r6
   29cdc:	4630      	mov	r0, r6
   29cde:	f7d7 fca3 	bl	1628 <ocrypto_mod_p256_sub>
   29ce2:	b008      	add	sp, #32
   29ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00029ce8 <ocrypto_curve_p256_from64bytes>:
   29ce8:	b570      	push	{r4, r5, r6, lr}
   29cea:	f100 0620 	add.w	r6, r0, #32
   29cee:	b090      	sub	sp, #64	; 0x40
   29cf0:	460d      	mov	r5, r1
   29cf2:	4604      	mov	r4, r0
   29cf4:	f000 f914 	bl	29f20 <ocrypto_mod_p256_from_bytes>
   29cf8:	f105 0120 	add.w	r1, r5, #32
   29cfc:	4630      	mov	r0, r6
   29cfe:	f000 f90f 	bl	29f20 <ocrypto_mod_p256_from_bytes>
   29d02:	4621      	mov	r1, r4
   29d04:	a808      	add	r0, sp, #32
   29d06:	f7d7 fd3f 	bl	1788 <ocrypto_mod_p256_sqr>
   29d0a:	a908      	add	r1, sp, #32
   29d0c:	4608      	mov	r0, r1
   29d0e:	4a0d      	ldr	r2, [pc, #52]	; (29d44 <ocrypto_curve_p256_from64bytes+0x5c>)
   29d10:	f7d7 fc4c 	bl	15ac <ocrypto_mod_p256_add>
   29d14:	a908      	add	r1, sp, #32
   29d16:	4622      	mov	r2, r4
   29d18:	4608      	mov	r0, r1
   29d1a:	f7d7 fd1d 	bl	1758 <ocrypto_mod_p256_mul>
   29d1e:	a908      	add	r1, sp, #32
   29d20:	4a09      	ldr	r2, [pc, #36]	; (29d48 <ocrypto_curve_p256_from64bytes+0x60>)
   29d22:	4608      	mov	r0, r1
   29d24:	f7d7 fc42 	bl	15ac <ocrypto_mod_p256_add>
   29d28:	4631      	mov	r1, r6
   29d2a:	4668      	mov	r0, sp
   29d2c:	f7d7 fd2c 	bl	1788 <ocrypto_mod_p256_sqr>
   29d30:	2220      	movs	r2, #32
   29d32:	4669      	mov	r1, sp
   29d34:	eb0d 0002 	add.w	r0, sp, r2
   29d38:	f7d7 fc0a 	bl	1550 <ocrypto_constant_time_equal>
   29d3c:	3801      	subs	r0, #1
   29d3e:	b010      	add	sp, #64	; 0x40
   29d40:	bd70      	pop	{r4, r5, r6, pc}
   29d42:	bf00      	nop
   29d44:	00035260 	.word	0x00035260
   29d48:	00035280 	.word	0x00035280

00029d4c <ocrypto_curve_p256_to32bytes>:
   29d4c:	f000 b902 	b.w	29f54 <ocrypto_mod_p256_to_bytes>

00029d50 <ocrypto_curve_p256_to64bytes>:
   29d50:	b538      	push	{r3, r4, r5, lr}
   29d52:	4604      	mov	r4, r0
   29d54:	460d      	mov	r5, r1
   29d56:	f000 f8fd 	bl	29f54 <ocrypto_mod_p256_to_bytes>
   29d5a:	f105 0120 	add.w	r1, r5, #32
   29d5e:	f104 0020 	add.w	r0, r4, #32
   29d62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   29d66:	f000 b8f5 	b.w	29f54 <ocrypto_mod_p256_to_bytes>
   29d6a:	bf00      	nop

00029d6c <ocrypto_curve_p256_scalarmult>:
   29d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   29d70:	4613      	mov	r3, r2
   29d72:	b0b8      	sub	sp, #224	; 0xe0
   29d74:	4a54      	ldr	r2, [pc, #336]	; (29ec8 <ocrypto_curve_p256_scalarmult+0x15c>)
   29d76:	4689      	mov	r9, r1
   29d78:	4680      	mov	r8, r0
   29d7a:	4619      	mov	r1, r3
   29d7c:	a810      	add	r0, sp, #64	; 0x40
   29d7e:	f7d7 f9f9 	bl	1174 <ocrypto_bigint_sub256>
   29d82:	4952      	ldr	r1, [pc, #328]	; (29ecc <ocrypto_curve_p256_scalarmult+0x160>)
   29d84:	4602      	mov	r2, r0
   29d86:	a810      	add	r0, sp, #64	; 0x40
   29d88:	f7d7 fa14 	bl	11b4 <ocrypto_bigint_cadd256>
   29d8c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   29d8e:	494e      	ldr	r1, [pc, #312]	; (29ec8 <ocrypto_curve_p256_scalarmult+0x15c>)
   29d90:	ea00 76d6 	and.w	r6, r0, r6, lsr #31
   29d94:	4607      	mov	r7, r0
   29d96:	f1c6 0201 	rsb	r2, r6, #1
   29d9a:	a810      	add	r0, sp, #64	; 0x40
   29d9c:	f7d7 fa0a 	bl	11b4 <ocrypto_bigint_cadd256>
   29da0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   29da2:	464a      	mov	r2, r9
   29da4:	ea6f 0a03 	mvn.w	sl, r3
   29da8:	a928      	add	r1, sp, #160	; 0xa0
   29daa:	a818      	add	r0, sp, #96	; 0x60
   29dac:	f7ff fe8e 	bl	29acc <p256_zdblu>
   29db0:	ea4f 7ada 	mov.w	sl, sl, lsr #31
   29db4:	a920      	add	r1, sp, #128	; 0x80
   29db6:	f1ca 0201 	rsb	r2, sl, #1
   29dba:	4608      	mov	r0, r1
   29dbc:	f000 f892 	bl	29ee4 <ocrypto_mod_p256_cneg>
   29dc0:	f1c7 0701 	rsb	r7, r7, #1
   29dc4:	24fe      	movs	r4, #254	; 0xfe
   29dc6:	466a      	mov	r2, sp
   29dc8:	a918      	add	r1, sp, #96	; 0x60
   29dca:	a828      	add	r0, sp, #160	; 0xa0
   29dcc:	f7ff ff40 	bl	29c50 <p256_zaddu>
   29dd0:	1162      	asrs	r2, r4, #5
   29dd2:	ab38      	add	r3, sp, #224	; 0xe0
   29dd4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   29dd8:	f004 011f 	and.w	r1, r4, #31
   29ddc:	f852 3ca0 	ldr.w	r3, [r2, #-160]
   29de0:	40cb      	lsrs	r3, r1
   29de2:	4655      	mov	r5, sl
   29de4:	f003 0a01 	and.w	sl, r3, #1
   29de8:	ea8a 0505 	eor.w	r5, sl, r5
   29dec:	462a      	mov	r2, r5
   29dee:	a928      	add	r1, sp, #160	; 0xa0
   29df0:	a818      	add	r0, sp, #96	; 0x60
   29df2:	f7d7 fa3b 	bl	126c <ocrypto_bigint_cswap256>
   29df6:	462a      	mov	r2, r5
   29df8:	a930      	add	r1, sp, #192	; 0xc0
   29dfa:	a820      	add	r0, sp, #128	; 0x80
   29dfc:	f7d7 fa36 	bl	126c <ocrypto_bigint_cswap256>
   29e00:	3c01      	subs	r4, #1
   29e02:	a928      	add	r1, sp, #160	; 0xa0
   29e04:	a818      	add	r0, sp, #96	; 0x60
   29e06:	f7ff febd 	bl	29b84 <p256_zaddc>
   29e0a:	1c63      	adds	r3, r4, #1
   29e0c:	d1db      	bne.n	29dc6 <ocrypto_curve_p256_scalarmult+0x5a>
   29e0e:	f1ca 0201 	rsb	r2, sl, #1
   29e12:	a920      	add	r1, sp, #128	; 0x80
   29e14:	a808      	add	r0, sp, #32
   29e16:	f000 f865 	bl	29ee4 <ocrypto_mod_p256_cneg>
   29e1a:	ea86 060a 	eor.w	r6, r6, sl
   29e1e:	466a      	mov	r2, sp
   29e20:	a918      	add	r1, sp, #96	; 0x60
   29e22:	a828      	add	r0, sp, #160	; 0xa0
   29e24:	f7ff ff14 	bl	29c50 <p256_zaddu>
   29e28:	a928      	add	r1, sp, #160	; 0xa0
   29e2a:	4632      	mov	r2, r6
   29e2c:	a818      	add	r0, sp, #96	; 0x60
   29e2e:	f7d7 fa1d 	bl	126c <ocrypto_bigint_cswap256>
   29e32:	4632      	mov	r2, r6
   29e34:	a930      	add	r1, sp, #192	; 0xc0
   29e36:	a820      	add	r0, sp, #128	; 0x80
   29e38:	f7d7 fa18 	bl	126c <ocrypto_bigint_cswap256>
   29e3c:	a908      	add	r1, sp, #32
   29e3e:	466a      	mov	r2, sp
   29e40:	4608      	mov	r0, r1
   29e42:	f7d7 fc89 	bl	1758 <ocrypto_mod_p256_mul>
   29e46:	a908      	add	r1, sp, #32
   29e48:	4608      	mov	r0, r1
   29e4a:	f000 f89d 	bl	29f88 <ocrypto_mod_p256_inv>
   29e4e:	a908      	add	r1, sp, #32
   29e50:	f108 0420 	add.w	r4, r8, #32
   29e54:	f109 0220 	add.w	r2, r9, #32
   29e58:	4608      	mov	r0, r1
   29e5a:	f7d7 fc7d 	bl	1758 <ocrypto_mod_p256_mul>
   29e5e:	a920      	add	r1, sp, #128	; 0x80
   29e60:	aa08      	add	r2, sp, #32
   29e62:	4620      	mov	r0, r4
   29e64:	f7d7 fc78 	bl	1758 <ocrypto_mod_p256_mul>
   29e68:	aa08      	add	r2, sp, #32
   29e6a:	a918      	add	r1, sp, #96	; 0x60
   29e6c:	4668      	mov	r0, sp
   29e6e:	f7d7 fc73 	bl	1758 <ocrypto_mod_p256_mul>
   29e72:	4669      	mov	r1, sp
   29e74:	4668      	mov	r0, sp
   29e76:	f7d7 fc87 	bl	1788 <ocrypto_mod_p256_sqr>
   29e7a:	aa18      	add	r2, sp, #96	; 0x60
   29e7c:	4669      	mov	r1, sp
   29e7e:	a808      	add	r0, sp, #32
   29e80:	f7d7 fc6a 	bl	1758 <ocrypto_mod_p256_mul>
   29e84:	4621      	mov	r1, r4
   29e86:	4668      	mov	r0, sp
   29e88:	f7d7 fc7e 	bl	1788 <ocrypto_mod_p256_sqr>
   29e8c:	aa08      	add	r2, sp, #32
   29e8e:	4669      	mov	r1, sp
   29e90:	4610      	mov	r0, r2
   29e92:	f7d7 fbc9 	bl	1628 <ocrypto_mod_p256_sub>
   29e96:	4a0e      	ldr	r2, [pc, #56]	; (29ed0 <ocrypto_curve_p256_scalarmult+0x164>)
   29e98:	a908      	add	r1, sp, #32
   29e9a:	4668      	mov	r0, sp
   29e9c:	f7d7 fbc4 	bl	1628 <ocrypto_mod_p256_sub>
   29ea0:	4620      	mov	r0, r4
   29ea2:	2120      	movs	r1, #32
   29ea4:	f7d7 fb68 	bl	1578 <ocrypto_constant_time_is_zero>
   29ea8:	a908      	add	r1, sp, #32
   29eaa:	4243      	negs	r3, r0
   29eac:	4602      	mov	r2, r0
   29eae:	4668      	mov	r0, sp
   29eb0:	431f      	orrs	r7, r3
   29eb2:	f7d7 f9db 	bl	126c <ocrypto_bigint_cswap256>
   29eb6:	4640      	mov	r0, r8
   29eb8:	4a06      	ldr	r2, [pc, #24]	; (29ed4 <ocrypto_curve_p256_scalarmult+0x168>)
   29eba:	4669      	mov	r1, sp
   29ebc:	f7d7 fc4c 	bl	1758 <ocrypto_mod_p256_mul>
   29ec0:	4638      	mov	r0, r7
   29ec2:	b038      	add	sp, #224	; 0xe0
   29ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   29ec8:	000352a0 	.word	0x000352a0
   29ecc:	00035220 	.word	0x00035220
   29ed0:	00035280 	.word	0x00035280
   29ed4:	00035240 	.word	0x00035240

00029ed8 <ocrypto_curve_p256_scalarmult_base>:
   29ed8:	460a      	mov	r2, r1
   29eda:	4901      	ldr	r1, [pc, #4]	; (29ee0 <ocrypto_curve_p256_scalarmult_base+0x8>)
   29edc:	f7ff bf46 	b.w	29d6c <ocrypto_curve_p256_scalarmult>
   29ee0:	000351e0 	.word	0x000351e0

00029ee4 <ocrypto_mod_p256_cneg>:
   29ee4:	b570      	push	{r4, r5, r6, lr}
   29ee6:	b088      	sub	sp, #32
   29ee8:	4604      	mov	r4, r0
   29eea:	460d      	mov	r5, r1
   29eec:	4616      	mov	r6, r2
   29eee:	2100      	movs	r1, #0
   29ef0:	2220      	movs	r2, #32
   29ef2:	4668      	mov	r0, sp
   29ef4:	f006 ff31 	bl	30d5a <memset>
   29ef8:	2300      	movs	r3, #0
   29efa:	4629      	mov	r1, r5
   29efc:	2220      	movs	r2, #32
   29efe:	4620      	mov	r0, r4
   29f00:	9300      	str	r3, [sp, #0]
   29f02:	f006 ff09 	bl	30d18 <memcpy>
   29f06:	462a      	mov	r2, r5
   29f08:	4669      	mov	r1, sp
   29f0a:	4668      	mov	r0, sp
   29f0c:	f7d7 fb8c 	bl	1628 <ocrypto_mod_p256_sub>
   29f10:	4632      	mov	r2, r6
   29f12:	4669      	mov	r1, sp
   29f14:	4620      	mov	r0, r4
   29f16:	f7d7 f9a9 	bl	126c <ocrypto_bigint_cswap256>
   29f1a:	b008      	add	sp, #32
   29f1c:	bd70      	pop	{r4, r5, r6, pc}
   29f1e:	bf00      	nop

00029f20 <ocrypto_mod_p256_from_bytes>:
   29f20:	680b      	ldr	r3, [r1, #0]
   29f22:	ba1b      	rev	r3, r3
   29f24:	61c3      	str	r3, [r0, #28]
   29f26:	684b      	ldr	r3, [r1, #4]
   29f28:	ba1b      	rev	r3, r3
   29f2a:	6183      	str	r3, [r0, #24]
   29f2c:	688b      	ldr	r3, [r1, #8]
   29f2e:	ba1b      	rev	r3, r3
   29f30:	6143      	str	r3, [r0, #20]
   29f32:	68cb      	ldr	r3, [r1, #12]
   29f34:	ba1b      	rev	r3, r3
   29f36:	6103      	str	r3, [r0, #16]
   29f38:	690b      	ldr	r3, [r1, #16]
   29f3a:	ba1b      	rev	r3, r3
   29f3c:	60c3      	str	r3, [r0, #12]
   29f3e:	694b      	ldr	r3, [r1, #20]
   29f40:	ba1b      	rev	r3, r3
   29f42:	6083      	str	r3, [r0, #8]
   29f44:	698b      	ldr	r3, [r1, #24]
   29f46:	ba1b      	rev	r3, r3
   29f48:	6043      	str	r3, [r0, #4]
   29f4a:	69cb      	ldr	r3, [r1, #28]
   29f4c:	ba1b      	rev	r3, r3
   29f4e:	6003      	str	r3, [r0, #0]
   29f50:	4770      	bx	lr
   29f52:	bf00      	nop

00029f54 <ocrypto_mod_p256_to_bytes>:
   29f54:	69cb      	ldr	r3, [r1, #28]
   29f56:	ba1b      	rev	r3, r3
   29f58:	6003      	str	r3, [r0, #0]
   29f5a:	698b      	ldr	r3, [r1, #24]
   29f5c:	ba1b      	rev	r3, r3
   29f5e:	6043      	str	r3, [r0, #4]
   29f60:	694b      	ldr	r3, [r1, #20]
   29f62:	ba1b      	rev	r3, r3
   29f64:	6083      	str	r3, [r0, #8]
   29f66:	690b      	ldr	r3, [r1, #16]
   29f68:	ba1b      	rev	r3, r3
   29f6a:	60c3      	str	r3, [r0, #12]
   29f6c:	68cb      	ldr	r3, [r1, #12]
   29f6e:	ba1b      	rev	r3, r3
   29f70:	6103      	str	r3, [r0, #16]
   29f72:	688b      	ldr	r3, [r1, #8]
   29f74:	ba1b      	rev	r3, r3
   29f76:	6143      	str	r3, [r0, #20]
   29f78:	684b      	ldr	r3, [r1, #4]
   29f7a:	ba1b      	rev	r3, r3
   29f7c:	6183      	str	r3, [r0, #24]
   29f7e:	680b      	ldr	r3, [r1, #0]
   29f80:	ba1b      	rev	r3, r3
   29f82:	61c3      	str	r3, [r0, #28]
   29f84:	4770      	bx	lr
   29f86:	bf00      	nop

00029f88 <ocrypto_mod_p256_inv>:
   29f88:	b570      	push	{r4, r5, r6, lr}
   29f8a:	b098      	sub	sp, #96	; 0x60
   29f8c:	460d      	mov	r5, r1
   29f8e:	4606      	mov	r6, r0
   29f90:	a810      	add	r0, sp, #64	; 0x40
   29f92:	f7d7 fbf9 	bl	1788 <ocrypto_mod_p256_sqr>
   29f96:	462a      	mov	r2, r5
   29f98:	a910      	add	r1, sp, #64	; 0x40
   29f9a:	4668      	mov	r0, sp
   29f9c:	f7d7 fbdc 	bl	1758 <ocrypto_mod_p256_mul>
   29fa0:	4669      	mov	r1, sp
   29fa2:	a810      	add	r0, sp, #64	; 0x40
   29fa4:	f7d7 fbf0 	bl	1788 <ocrypto_mod_p256_sqr>
   29fa8:	a910      	add	r1, sp, #64	; 0x40
   29faa:	4608      	mov	r0, r1
   29fac:	f7d7 fbec 	bl	1788 <ocrypto_mod_p256_sqr>
   29fb0:	466a      	mov	r2, sp
   29fb2:	a910      	add	r1, sp, #64	; 0x40
   29fb4:	a808      	add	r0, sp, #32
   29fb6:	f7d7 fbcf 	bl	1758 <ocrypto_mod_p256_mul>
   29fba:	a908      	add	r1, sp, #32
   29fbc:	a810      	add	r0, sp, #64	; 0x40
   29fbe:	f7d7 fbe3 	bl	1788 <ocrypto_mod_p256_sqr>
   29fc2:	a910      	add	r1, sp, #64	; 0x40
   29fc4:	4608      	mov	r0, r1
   29fc6:	f7d7 fbdf 	bl	1788 <ocrypto_mod_p256_sqr>
   29fca:	a910      	add	r1, sp, #64	; 0x40
   29fcc:	4608      	mov	r0, r1
   29fce:	f7d7 fbdb 	bl	1788 <ocrypto_mod_p256_sqr>
   29fd2:	a910      	add	r1, sp, #64	; 0x40
   29fd4:	4608      	mov	r0, r1
   29fd6:	f7d7 fbd7 	bl	1788 <ocrypto_mod_p256_sqr>
   29fda:	a910      	add	r1, sp, #64	; 0x40
   29fdc:	aa08      	add	r2, sp, #32
   29fde:	4608      	mov	r0, r1
   29fe0:	f7d7 fbba 	bl	1758 <ocrypto_mod_p256_mul>
   29fe4:	a910      	add	r1, sp, #64	; 0x40
   29fe6:	4608      	mov	r0, r1
   29fe8:	f7d7 fbce 	bl	1788 <ocrypto_mod_p256_sqr>
   29fec:	a910      	add	r1, sp, #64	; 0x40
   29fee:	4608      	mov	r0, r1
   29ff0:	f7d7 fbca 	bl	1788 <ocrypto_mod_p256_sqr>
   29ff4:	a910      	add	r1, sp, #64	; 0x40
   29ff6:	466a      	mov	r2, sp
   29ff8:	a808      	add	r0, sp, #32
   29ffa:	f7d7 fbad 	bl	1758 <ocrypto_mod_p256_mul>
   29ffe:	2405      	movs	r4, #5
   2a000:	a908      	add	r1, sp, #32
   2a002:	a810      	add	r0, sp, #64	; 0x40
   2a004:	f7d7 fbc0 	bl	1788 <ocrypto_mod_p256_sqr>
   2a008:	a910      	add	r1, sp, #64	; 0x40
   2a00a:	4608      	mov	r0, r1
   2a00c:	f7d7 fbbc 	bl	1788 <ocrypto_mod_p256_sqr>
   2a010:	3c01      	subs	r4, #1
   2a012:	a910      	add	r1, sp, #64	; 0x40
   2a014:	d1f5      	bne.n	2a002 <ocrypto_mod_p256_inv+0x7a>
   2a016:	aa08      	add	r2, sp, #32
   2a018:	4608      	mov	r0, r1
   2a01a:	f7d7 fb9d 	bl	1758 <ocrypto_mod_p256_mul>
   2a01e:	2405      	movs	r4, #5
   2a020:	a910      	add	r1, sp, #64	; 0x40
   2a022:	4608      	mov	r0, r1
   2a024:	f7d7 fbb0 	bl	1788 <ocrypto_mod_p256_sqr>
   2a028:	a910      	add	r1, sp, #64	; 0x40
   2a02a:	4608      	mov	r0, r1
   2a02c:	f7d7 fbac 	bl	1788 <ocrypto_mod_p256_sqr>
   2a030:	3c01      	subs	r4, #1
   2a032:	d1f5      	bne.n	2a020 <ocrypto_mod_p256_inv+0x98>
   2a034:	a910      	add	r1, sp, #64	; 0x40
   2a036:	aa08      	add	r2, sp, #32
   2a038:	4608      	mov	r0, r1
   2a03a:	f7d7 fb8d 	bl	1758 <ocrypto_mod_p256_mul>
   2a03e:	a910      	add	r1, sp, #64	; 0x40
   2a040:	a808      	add	r0, sp, #32
   2a042:	f7d7 fba1 	bl	1788 <ocrypto_mod_p256_sqr>
   2a046:	a908      	add	r1, sp, #32
   2a048:	4608      	mov	r0, r1
   2a04a:	f7d7 fb9d 	bl	1788 <ocrypto_mod_p256_sqr>
   2a04e:	a908      	add	r1, sp, #32
   2a050:	466a      	mov	r2, sp
   2a052:	4668      	mov	r0, sp
   2a054:	f7d7 fb80 	bl	1758 <ocrypto_mod_p256_mul>
   2a058:	2410      	movs	r4, #16
   2a05a:	4669      	mov	r1, sp
   2a05c:	a810      	add	r0, sp, #64	; 0x40
   2a05e:	f7d7 fb93 	bl	1788 <ocrypto_mod_p256_sqr>
   2a062:	a910      	add	r1, sp, #64	; 0x40
   2a064:	4608      	mov	r0, r1
   2a066:	f7d7 fb8f 	bl	1788 <ocrypto_mod_p256_sqr>
   2a06a:	3c01      	subs	r4, #1
   2a06c:	a910      	add	r1, sp, #64	; 0x40
   2a06e:	d1f5      	bne.n	2a05c <ocrypto_mod_p256_inv+0xd4>
   2a070:	462a      	mov	r2, r5
   2a072:	4608      	mov	r0, r1
   2a074:	f7d7 fb70 	bl	1758 <ocrypto_mod_p256_mul>
   2a078:	2440      	movs	r4, #64	; 0x40
   2a07a:	a910      	add	r1, sp, #64	; 0x40
   2a07c:	4608      	mov	r0, r1
   2a07e:	f7d7 fb83 	bl	1788 <ocrypto_mod_p256_sqr>
   2a082:	a910      	add	r1, sp, #64	; 0x40
   2a084:	4608      	mov	r0, r1
   2a086:	f7d7 fb7f 	bl	1788 <ocrypto_mod_p256_sqr>
   2a08a:	3c01      	subs	r4, #1
   2a08c:	d1f5      	bne.n	2a07a <ocrypto_mod_p256_inv+0xf2>
   2a08e:	a910      	add	r1, sp, #64	; 0x40
   2a090:	466a      	mov	r2, sp
   2a092:	4608      	mov	r0, r1
   2a094:	f7d7 fb60 	bl	1758 <ocrypto_mod_p256_mul>
   2a098:	2410      	movs	r4, #16
   2a09a:	a910      	add	r1, sp, #64	; 0x40
   2a09c:	4608      	mov	r0, r1
   2a09e:	f7d7 fb73 	bl	1788 <ocrypto_mod_p256_sqr>
   2a0a2:	a910      	add	r1, sp, #64	; 0x40
   2a0a4:	4608      	mov	r0, r1
   2a0a6:	f7d7 fb6f 	bl	1788 <ocrypto_mod_p256_sqr>
   2a0aa:	3c01      	subs	r4, #1
   2a0ac:	d1f5      	bne.n	2a09a <ocrypto_mod_p256_inv+0x112>
   2a0ae:	a910      	add	r1, sp, #64	; 0x40
   2a0b0:	466a      	mov	r2, sp
   2a0b2:	4608      	mov	r0, r1
   2a0b4:	f7d7 fb50 	bl	1758 <ocrypto_mod_p256_mul>
   2a0b8:	2410      	movs	r4, #16
   2a0ba:	a910      	add	r1, sp, #64	; 0x40
   2a0bc:	4608      	mov	r0, r1
   2a0be:	f7d7 fb63 	bl	1788 <ocrypto_mod_p256_sqr>
   2a0c2:	a910      	add	r1, sp, #64	; 0x40
   2a0c4:	4608      	mov	r0, r1
   2a0c6:	f7d7 fb5f 	bl	1788 <ocrypto_mod_p256_sqr>
   2a0ca:	3c01      	subs	r4, #1
   2a0cc:	d1f5      	bne.n	2a0ba <ocrypto_mod_p256_inv+0x132>
   2a0ce:	a910      	add	r1, sp, #64	; 0x40
   2a0d0:	aa08      	add	r2, sp, #32
   2a0d2:	4608      	mov	r0, r1
   2a0d4:	f7d7 fb40 	bl	1758 <ocrypto_mod_p256_mul>
   2a0d8:	462a      	mov	r2, r5
   2a0da:	a910      	add	r1, sp, #64	; 0x40
   2a0dc:	4630      	mov	r0, r6
   2a0de:	f7d7 fb3b 	bl	1758 <ocrypto_mod_p256_mul>
   2a0e2:	b018      	add	sp, #96	; 0x60
   2a0e4:	bd70      	pop	{r4, r5, r6, pc}
   2a0e6:	bf00      	nop

0002a0e8 <sqrt>:
   2a0e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a0ea:	4606      	mov	r6, r0
   2a0ec:	460f      	mov	r7, r1
   2a0ee:	f000 f827 	bl	2a140 <__ieee754_sqrt>
   2a0f2:	4b12      	ldr	r3, [pc, #72]	; (2a13c <sqrt+0x54>)
   2a0f4:	f993 3000 	ldrsb.w	r3, [r3]
   2a0f8:	3301      	adds	r3, #1
   2a0fa:	4604      	mov	r4, r0
   2a0fc:	460d      	mov	r5, r1
   2a0fe:	d019      	beq.n	2a134 <sqrt+0x4c>
   2a100:	4632      	mov	r2, r6
   2a102:	463b      	mov	r3, r7
   2a104:	4630      	mov	r0, r6
   2a106:	4639      	mov	r1, r7
   2a108:	f7d7 fb56 	bl	17b8 <__aeabi_dcmpun>
   2a10c:	b990      	cbnz	r0, 2a134 <sqrt+0x4c>
   2a10e:	2200      	movs	r2, #0
   2a110:	2300      	movs	r3, #0
   2a112:	4630      	mov	r0, r6
   2a114:	4639      	mov	r1, r7
   2a116:	f7d6 ffe5 	bl	10e4 <__aeabi_dcmplt>
   2a11a:	b158      	cbz	r0, 2a134 <sqrt+0x4c>
   2a11c:	f001 fe41 	bl	2bda2 <__errno>
   2a120:	2321      	movs	r3, #33	; 0x21
   2a122:	6003      	str	r3, [r0, #0]
   2a124:	2200      	movs	r2, #0
   2a126:	2300      	movs	r3, #0
   2a128:	4610      	mov	r0, r2
   2a12a:	4619      	mov	r1, r3
   2a12c:	f7d6 fb0e 	bl	74c <__aeabi_ddiv>
   2a130:	4604      	mov	r4, r0
   2a132:	460d      	mov	r5, r1
   2a134:	4620      	mov	r0, r4
   2a136:	4629      	mov	r1, r5
   2a138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2a13a:	bf00      	nop
   2a13c:	20000916 	.word	0x20000916

0002a140 <__ieee754_sqrt>:
   2a140:	f8df c154 	ldr.w	ip, [pc, #340]	; 2a298 <__ieee754_sqrt+0x158>
   2a144:	ea3c 0c01 	bics.w	ip, ip, r1
   2a148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a14c:	460a      	mov	r2, r1
   2a14e:	4606      	mov	r6, r0
   2a150:	460d      	mov	r5, r1
   2a152:	460c      	mov	r4, r1
   2a154:	4607      	mov	r7, r0
   2a156:	4603      	mov	r3, r0
   2a158:	d10f      	bne.n	2a17a <__ieee754_sqrt+0x3a>
   2a15a:	4602      	mov	r2, r0
   2a15c:	460b      	mov	r3, r1
   2a15e:	f7d6 f9cb 	bl	4f8 <__aeabi_dmul>
   2a162:	4602      	mov	r2, r0
   2a164:	460b      	mov	r3, r1
   2a166:	4630      	mov	r0, r6
   2a168:	4629      	mov	r1, r5
   2a16a:	f7d6 f80f 	bl	18c <__adddf3>
   2a16e:	4606      	mov	r6, r0
   2a170:	460d      	mov	r5, r1
   2a172:	4630      	mov	r0, r6
   2a174:	4629      	mov	r1, r5
   2a176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2a17a:	2900      	cmp	r1, #0
   2a17c:	dc0e      	bgt.n	2a19c <__ieee754_sqrt+0x5c>
   2a17e:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
   2a182:	ea5c 0707 	orrs.w	r7, ip, r7
   2a186:	d0f4      	beq.n	2a172 <__ieee754_sqrt+0x32>
   2a188:	b141      	cbz	r1, 2a19c <__ieee754_sqrt+0x5c>
   2a18a:	4602      	mov	r2, r0
   2a18c:	460b      	mov	r3, r1
   2a18e:	f7d5 fffb 	bl	188 <__aeabi_dsub>
   2a192:	4602      	mov	r2, r0
   2a194:	460b      	mov	r3, r1
   2a196:	f7d6 fad9 	bl	74c <__aeabi_ddiv>
   2a19a:	e7e8      	b.n	2a16e <__ieee754_sqrt+0x2e>
   2a19c:	1521      	asrs	r1, r4, #20
   2a19e:	d074      	beq.n	2a28a <__ieee754_sqrt+0x14a>
   2a1a0:	07cc      	lsls	r4, r1, #31
   2a1a2:	f3c2 0213 	ubfx	r2, r2, #0, #20
   2a1a6:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   2a1aa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   2a1ae:	bf5e      	ittt	pl
   2a1b0:	0fd9      	lsrpl	r1, r3, #31
   2a1b2:	005b      	lslpl	r3, r3, #1
   2a1b4:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
   2a1b8:	2400      	movs	r4, #0
   2a1ba:	0fd9      	lsrs	r1, r3, #31
   2a1bc:	eb01 0242 	add.w	r2, r1, r2, lsl #1
   2a1c0:	107f      	asrs	r7, r7, #1
   2a1c2:	005b      	lsls	r3, r3, #1
   2a1c4:	2516      	movs	r5, #22
   2a1c6:	4620      	mov	r0, r4
   2a1c8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   2a1cc:	1846      	adds	r6, r0, r1
   2a1ce:	4296      	cmp	r6, r2
   2a1d0:	bfde      	ittt	le
   2a1d2:	1b92      	suble	r2, r2, r6
   2a1d4:	1870      	addle	r0, r6, r1
   2a1d6:	1864      	addle	r4, r4, r1
   2a1d8:	0052      	lsls	r2, r2, #1
   2a1da:	3d01      	subs	r5, #1
   2a1dc:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
   2a1e0:	ea4f 0151 	mov.w	r1, r1, lsr #1
   2a1e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
   2a1e8:	d1f0      	bne.n	2a1cc <__ieee754_sqrt+0x8c>
   2a1ea:	4629      	mov	r1, r5
   2a1ec:	f04f 0e20 	mov.w	lr, #32
   2a1f0:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
   2a1f4:	4282      	cmp	r2, r0
   2a1f6:	eb06 0c05 	add.w	ip, r6, r5
   2a1fa:	dc02      	bgt.n	2a202 <__ieee754_sqrt+0xc2>
   2a1fc:	d113      	bne.n	2a226 <__ieee754_sqrt+0xe6>
   2a1fe:	459c      	cmp	ip, r3
   2a200:	d811      	bhi.n	2a226 <__ieee754_sqrt+0xe6>
   2a202:	f1bc 0f00 	cmp.w	ip, #0
   2a206:	eb0c 0506 	add.w	r5, ip, r6
   2a20a:	da43      	bge.n	2a294 <__ieee754_sqrt+0x154>
   2a20c:	2d00      	cmp	r5, #0
   2a20e:	db41      	blt.n	2a294 <__ieee754_sqrt+0x154>
   2a210:	f100 0801 	add.w	r8, r0, #1
   2a214:	1a12      	subs	r2, r2, r0
   2a216:	459c      	cmp	ip, r3
   2a218:	bf88      	it	hi
   2a21a:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
   2a21e:	eba3 030c 	sub.w	r3, r3, ip
   2a222:	4431      	add	r1, r6
   2a224:	4640      	mov	r0, r8
   2a226:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
   2a22a:	f1be 0e01 	subs.w	lr, lr, #1
   2a22e:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
   2a232:	ea4f 0343 	mov.w	r3, r3, lsl #1
   2a236:	ea4f 0656 	mov.w	r6, r6, lsr #1
   2a23a:	d1db      	bne.n	2a1f4 <__ieee754_sqrt+0xb4>
   2a23c:	4313      	orrs	r3, r2
   2a23e:	d006      	beq.n	2a24e <__ieee754_sqrt+0x10e>
   2a240:	1c48      	adds	r0, r1, #1
   2a242:	bf13      	iteet	ne
   2a244:	3101      	addne	r1, #1
   2a246:	3401      	addeq	r4, #1
   2a248:	4671      	moveq	r1, lr
   2a24a:	f021 0101 	bicne.w	r1, r1, #1
   2a24e:	1063      	asrs	r3, r4, #1
   2a250:	0849      	lsrs	r1, r1, #1
   2a252:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
   2a256:	07e2      	lsls	r2, r4, #31
   2a258:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   2a25c:	bf48      	it	mi
   2a25e:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
   2a262:	eb03 5507 	add.w	r5, r3, r7, lsl #20
   2a266:	460e      	mov	r6, r1
   2a268:	e783      	b.n	2a172 <__ieee754_sqrt+0x32>
   2a26a:	0ada      	lsrs	r2, r3, #11
   2a26c:	3815      	subs	r0, #21
   2a26e:	055b      	lsls	r3, r3, #21
   2a270:	2a00      	cmp	r2, #0
   2a272:	d0fa      	beq.n	2a26a <__ieee754_sqrt+0x12a>
   2a274:	02d5      	lsls	r5, r2, #11
   2a276:	d50a      	bpl.n	2a28e <__ieee754_sqrt+0x14e>
   2a278:	f1c1 0420 	rsb	r4, r1, #32
   2a27c:	fa23 f404 	lsr.w	r4, r3, r4
   2a280:	1e4d      	subs	r5, r1, #1
   2a282:	408b      	lsls	r3, r1
   2a284:	4322      	orrs	r2, r4
   2a286:	1b41      	subs	r1, r0, r5
   2a288:	e78a      	b.n	2a1a0 <__ieee754_sqrt+0x60>
   2a28a:	4608      	mov	r0, r1
   2a28c:	e7f0      	b.n	2a270 <__ieee754_sqrt+0x130>
   2a28e:	0052      	lsls	r2, r2, #1
   2a290:	3101      	adds	r1, #1
   2a292:	e7ef      	b.n	2a274 <__ieee754_sqrt+0x134>
   2a294:	4680      	mov	r8, r0
   2a296:	e7bd      	b.n	2a214 <__ieee754_sqrt+0xd4>
   2a298:	7ff00000 	.word	0x7ff00000

0002a29c <_free_r>:
   2a29c:	b538      	push	{r3, r4, r5, lr}
   2a29e:	4605      	mov	r5, r0
   2a2a0:	2900      	cmp	r1, #0
   2a2a2:	d041      	beq.n	2a328 <_free_r+0x8c>
   2a2a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
   2a2a8:	1f0c      	subs	r4, r1, #4
   2a2aa:	2b00      	cmp	r3, #0
   2a2ac:	bfb8      	it	lt
   2a2ae:	18e4      	addlt	r4, r4, r3
   2a2b0:	f000 fa6a 	bl	2a788 <__malloc_lock>
   2a2b4:	4a1d      	ldr	r2, [pc, #116]	; (2a32c <_free_r+0x90>)
   2a2b6:	6813      	ldr	r3, [r2, #0]
   2a2b8:	b933      	cbnz	r3, 2a2c8 <_free_r+0x2c>
   2a2ba:	6063      	str	r3, [r4, #4]
   2a2bc:	6014      	str	r4, [r2, #0]
   2a2be:	4628      	mov	r0, r5
   2a2c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2a2c4:	f000 ba66 	b.w	2a794 <__malloc_unlock>
   2a2c8:	42a3      	cmp	r3, r4
   2a2ca:	d908      	bls.n	2a2de <_free_r+0x42>
   2a2cc:	6820      	ldr	r0, [r4, #0]
   2a2ce:	1821      	adds	r1, r4, r0
   2a2d0:	428b      	cmp	r3, r1
   2a2d2:	bf01      	itttt	eq
   2a2d4:	6819      	ldreq	r1, [r3, #0]
   2a2d6:	685b      	ldreq	r3, [r3, #4]
   2a2d8:	1809      	addeq	r1, r1, r0
   2a2da:	6021      	streq	r1, [r4, #0]
   2a2dc:	e7ed      	b.n	2a2ba <_free_r+0x1e>
   2a2de:	461a      	mov	r2, r3
   2a2e0:	685b      	ldr	r3, [r3, #4]
   2a2e2:	b10b      	cbz	r3, 2a2e8 <_free_r+0x4c>
   2a2e4:	42a3      	cmp	r3, r4
   2a2e6:	d9fa      	bls.n	2a2de <_free_r+0x42>
   2a2e8:	6811      	ldr	r1, [r2, #0]
   2a2ea:	1850      	adds	r0, r2, r1
   2a2ec:	42a0      	cmp	r0, r4
   2a2ee:	d10b      	bne.n	2a308 <_free_r+0x6c>
   2a2f0:	6820      	ldr	r0, [r4, #0]
   2a2f2:	4401      	add	r1, r0
   2a2f4:	1850      	adds	r0, r2, r1
   2a2f6:	4283      	cmp	r3, r0
   2a2f8:	6011      	str	r1, [r2, #0]
   2a2fa:	d1e0      	bne.n	2a2be <_free_r+0x22>
   2a2fc:	6818      	ldr	r0, [r3, #0]
   2a2fe:	685b      	ldr	r3, [r3, #4]
   2a300:	6053      	str	r3, [r2, #4]
   2a302:	4401      	add	r1, r0
   2a304:	6011      	str	r1, [r2, #0]
   2a306:	e7da      	b.n	2a2be <_free_r+0x22>
   2a308:	d902      	bls.n	2a310 <_free_r+0x74>
   2a30a:	230c      	movs	r3, #12
   2a30c:	602b      	str	r3, [r5, #0]
   2a30e:	e7d6      	b.n	2a2be <_free_r+0x22>
   2a310:	6820      	ldr	r0, [r4, #0]
   2a312:	1821      	adds	r1, r4, r0
   2a314:	428b      	cmp	r3, r1
   2a316:	bf04      	itt	eq
   2a318:	6819      	ldreq	r1, [r3, #0]
   2a31a:	685b      	ldreq	r3, [r3, #4]
   2a31c:	6063      	str	r3, [r4, #4]
   2a31e:	bf04      	itt	eq
   2a320:	1809      	addeq	r1, r1, r0
   2a322:	6021      	streq	r1, [r4, #0]
   2a324:	6054      	str	r4, [r2, #4]
   2a326:	e7ca      	b.n	2a2be <_free_r+0x22>
   2a328:	bd38      	pop	{r3, r4, r5, pc}
   2a32a:	bf00      	nop
   2a32c:	20003750 	.word	0x20003750

0002a330 <_malloc_r>:
   2a330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a332:	1ccd      	adds	r5, r1, #3
   2a334:	f025 0503 	bic.w	r5, r5, #3
   2a338:	3508      	adds	r5, #8
   2a33a:	2d0c      	cmp	r5, #12
   2a33c:	bf38      	it	cc
   2a33e:	250c      	movcc	r5, #12
   2a340:	2d00      	cmp	r5, #0
   2a342:	4606      	mov	r6, r0
   2a344:	db01      	blt.n	2a34a <_malloc_r+0x1a>
   2a346:	42a9      	cmp	r1, r5
   2a348:	d903      	bls.n	2a352 <_malloc_r+0x22>
   2a34a:	230c      	movs	r3, #12
   2a34c:	6033      	str	r3, [r6, #0]
   2a34e:	2000      	movs	r0, #0
   2a350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2a352:	f000 fa19 	bl	2a788 <__malloc_lock>
   2a356:	4921      	ldr	r1, [pc, #132]	; (2a3dc <_malloc_r+0xac>)
   2a358:	680a      	ldr	r2, [r1, #0]
   2a35a:	4614      	mov	r4, r2
   2a35c:	b99c      	cbnz	r4, 2a386 <_malloc_r+0x56>
   2a35e:	4f20      	ldr	r7, [pc, #128]	; (2a3e0 <_malloc_r+0xb0>)
   2a360:	683b      	ldr	r3, [r7, #0]
   2a362:	b923      	cbnz	r3, 2a36e <_malloc_r+0x3e>
   2a364:	4621      	mov	r1, r4
   2a366:	4630      	mov	r0, r6
   2a368:	f000 f962 	bl	2a630 <_sbrk_r>
   2a36c:	6038      	str	r0, [r7, #0]
   2a36e:	4629      	mov	r1, r5
   2a370:	4630      	mov	r0, r6
   2a372:	f000 f95d 	bl	2a630 <_sbrk_r>
   2a376:	1c43      	adds	r3, r0, #1
   2a378:	d123      	bne.n	2a3c2 <_malloc_r+0x92>
   2a37a:	230c      	movs	r3, #12
   2a37c:	6033      	str	r3, [r6, #0]
   2a37e:	4630      	mov	r0, r6
   2a380:	f000 fa08 	bl	2a794 <__malloc_unlock>
   2a384:	e7e3      	b.n	2a34e <_malloc_r+0x1e>
   2a386:	6823      	ldr	r3, [r4, #0]
   2a388:	1b5b      	subs	r3, r3, r5
   2a38a:	d417      	bmi.n	2a3bc <_malloc_r+0x8c>
   2a38c:	2b0b      	cmp	r3, #11
   2a38e:	d903      	bls.n	2a398 <_malloc_r+0x68>
   2a390:	6023      	str	r3, [r4, #0]
   2a392:	441c      	add	r4, r3
   2a394:	6025      	str	r5, [r4, #0]
   2a396:	e004      	b.n	2a3a2 <_malloc_r+0x72>
   2a398:	6863      	ldr	r3, [r4, #4]
   2a39a:	42a2      	cmp	r2, r4
   2a39c:	bf0c      	ite	eq
   2a39e:	600b      	streq	r3, [r1, #0]
   2a3a0:	6053      	strne	r3, [r2, #4]
   2a3a2:	4630      	mov	r0, r6
   2a3a4:	f000 f9f6 	bl	2a794 <__malloc_unlock>
   2a3a8:	f104 000b 	add.w	r0, r4, #11
   2a3ac:	1d23      	adds	r3, r4, #4
   2a3ae:	f020 0007 	bic.w	r0, r0, #7
   2a3b2:	1ac2      	subs	r2, r0, r3
   2a3b4:	d0cc      	beq.n	2a350 <_malloc_r+0x20>
   2a3b6:	1a1b      	subs	r3, r3, r0
   2a3b8:	50a3      	str	r3, [r4, r2]
   2a3ba:	e7c9      	b.n	2a350 <_malloc_r+0x20>
   2a3bc:	4622      	mov	r2, r4
   2a3be:	6864      	ldr	r4, [r4, #4]
   2a3c0:	e7cc      	b.n	2a35c <_malloc_r+0x2c>
   2a3c2:	1cc4      	adds	r4, r0, #3
   2a3c4:	f024 0403 	bic.w	r4, r4, #3
   2a3c8:	42a0      	cmp	r0, r4
   2a3ca:	d0e3      	beq.n	2a394 <_malloc_r+0x64>
   2a3cc:	1a21      	subs	r1, r4, r0
   2a3ce:	4630      	mov	r0, r6
   2a3d0:	f000 f92e 	bl	2a630 <_sbrk_r>
   2a3d4:	3001      	adds	r0, #1
   2a3d6:	d1dd      	bne.n	2a394 <_malloc_r+0x64>
   2a3d8:	e7cf      	b.n	2a37a <_malloc_r+0x4a>
   2a3da:	bf00      	nop
   2a3dc:	20003750 	.word	0x20003750
   2a3e0:	20003754 	.word	0x20003754

0002a3e4 <_printf_i>:
   2a3e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   2a3e8:	7e0f      	ldrb	r7, [r1, #24]
   2a3ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   2a3ec:	2f78      	cmp	r7, #120	; 0x78
   2a3ee:	4691      	mov	r9, r2
   2a3f0:	4680      	mov	r8, r0
   2a3f2:	460c      	mov	r4, r1
   2a3f4:	469a      	mov	sl, r3
   2a3f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
   2a3fa:	d807      	bhi.n	2a40c <_printf_i+0x28>
   2a3fc:	2f62      	cmp	r7, #98	; 0x62
   2a3fe:	d80a      	bhi.n	2a416 <_printf_i+0x32>
   2a400:	2f00      	cmp	r7, #0
   2a402:	f000 80d8 	beq.w	2a5b6 <_printf_i+0x1d2>
   2a406:	2f58      	cmp	r7, #88	; 0x58
   2a408:	f000 80a3 	beq.w	2a552 <_printf_i+0x16e>
   2a40c:	f104 0542 	add.w	r5, r4, #66	; 0x42
   2a410:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   2a414:	e03a      	b.n	2a48c <_printf_i+0xa8>
   2a416:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   2a41a:	2b15      	cmp	r3, #21
   2a41c:	d8f6      	bhi.n	2a40c <_printf_i+0x28>
   2a41e:	a101      	add	r1, pc, #4	; (adr r1, 2a424 <_printf_i+0x40>)
   2a420:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   2a424:	0002a47d 	.word	0x0002a47d
   2a428:	0002a491 	.word	0x0002a491
   2a42c:	0002a40d 	.word	0x0002a40d
   2a430:	0002a40d 	.word	0x0002a40d
   2a434:	0002a40d 	.word	0x0002a40d
   2a438:	0002a40d 	.word	0x0002a40d
   2a43c:	0002a491 	.word	0x0002a491
   2a440:	0002a40d 	.word	0x0002a40d
   2a444:	0002a40d 	.word	0x0002a40d
   2a448:	0002a40d 	.word	0x0002a40d
   2a44c:	0002a40d 	.word	0x0002a40d
   2a450:	0002a59d 	.word	0x0002a59d
   2a454:	0002a4c1 	.word	0x0002a4c1
   2a458:	0002a57f 	.word	0x0002a57f
   2a45c:	0002a40d 	.word	0x0002a40d
   2a460:	0002a40d 	.word	0x0002a40d
   2a464:	0002a5bf 	.word	0x0002a5bf
   2a468:	0002a40d 	.word	0x0002a40d
   2a46c:	0002a4c1 	.word	0x0002a4c1
   2a470:	0002a40d 	.word	0x0002a40d
   2a474:	0002a40d 	.word	0x0002a40d
   2a478:	0002a587 	.word	0x0002a587
   2a47c:	682b      	ldr	r3, [r5, #0]
   2a47e:	1d1a      	adds	r2, r3, #4
   2a480:	681b      	ldr	r3, [r3, #0]
   2a482:	602a      	str	r2, [r5, #0]
   2a484:	f104 0542 	add.w	r5, r4, #66	; 0x42
   2a488:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   2a48c:	2301      	movs	r3, #1
   2a48e:	e0a3      	b.n	2a5d8 <_printf_i+0x1f4>
   2a490:	6820      	ldr	r0, [r4, #0]
   2a492:	6829      	ldr	r1, [r5, #0]
   2a494:	0606      	lsls	r6, r0, #24
   2a496:	f101 0304 	add.w	r3, r1, #4
   2a49a:	d50a      	bpl.n	2a4b2 <_printf_i+0xce>
   2a49c:	680e      	ldr	r6, [r1, #0]
   2a49e:	602b      	str	r3, [r5, #0]
   2a4a0:	2e00      	cmp	r6, #0
   2a4a2:	da03      	bge.n	2a4ac <_printf_i+0xc8>
   2a4a4:	232d      	movs	r3, #45	; 0x2d
   2a4a6:	4276      	negs	r6, r6
   2a4a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   2a4ac:	485e      	ldr	r0, [pc, #376]	; (2a628 <_printf_i+0x244>)
   2a4ae:	230a      	movs	r3, #10
   2a4b0:	e019      	b.n	2a4e6 <_printf_i+0x102>
   2a4b2:	680e      	ldr	r6, [r1, #0]
   2a4b4:	602b      	str	r3, [r5, #0]
   2a4b6:	f010 0f40 	tst.w	r0, #64	; 0x40
   2a4ba:	bf18      	it	ne
   2a4bc:	b236      	sxthne	r6, r6
   2a4be:	e7ef      	b.n	2a4a0 <_printf_i+0xbc>
   2a4c0:	682b      	ldr	r3, [r5, #0]
   2a4c2:	6820      	ldr	r0, [r4, #0]
   2a4c4:	1d19      	adds	r1, r3, #4
   2a4c6:	6029      	str	r1, [r5, #0]
   2a4c8:	0601      	lsls	r1, r0, #24
   2a4ca:	d501      	bpl.n	2a4d0 <_printf_i+0xec>
   2a4cc:	681e      	ldr	r6, [r3, #0]
   2a4ce:	e002      	b.n	2a4d6 <_printf_i+0xf2>
   2a4d0:	0646      	lsls	r6, r0, #25
   2a4d2:	d5fb      	bpl.n	2a4cc <_printf_i+0xe8>
   2a4d4:	881e      	ldrh	r6, [r3, #0]
   2a4d6:	4854      	ldr	r0, [pc, #336]	; (2a628 <_printf_i+0x244>)
   2a4d8:	2f6f      	cmp	r7, #111	; 0x6f
   2a4da:	bf0c      	ite	eq
   2a4dc:	2308      	moveq	r3, #8
   2a4de:	230a      	movne	r3, #10
   2a4e0:	2100      	movs	r1, #0
   2a4e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   2a4e6:	6865      	ldr	r5, [r4, #4]
   2a4e8:	60a5      	str	r5, [r4, #8]
   2a4ea:	2d00      	cmp	r5, #0
   2a4ec:	bfa2      	ittt	ge
   2a4ee:	6821      	ldrge	r1, [r4, #0]
   2a4f0:	f021 0104 	bicge.w	r1, r1, #4
   2a4f4:	6021      	strge	r1, [r4, #0]
   2a4f6:	b90e      	cbnz	r6, 2a4fc <_printf_i+0x118>
   2a4f8:	2d00      	cmp	r5, #0
   2a4fa:	d04d      	beq.n	2a598 <_printf_i+0x1b4>
   2a4fc:	4615      	mov	r5, r2
   2a4fe:	fbb6 f1f3 	udiv	r1, r6, r3
   2a502:	fb03 6711 	mls	r7, r3, r1, r6
   2a506:	5dc7      	ldrb	r7, [r0, r7]
   2a508:	f805 7d01 	strb.w	r7, [r5, #-1]!
   2a50c:	4637      	mov	r7, r6
   2a50e:	42bb      	cmp	r3, r7
   2a510:	460e      	mov	r6, r1
   2a512:	d9f4      	bls.n	2a4fe <_printf_i+0x11a>
   2a514:	2b08      	cmp	r3, #8
   2a516:	d10b      	bne.n	2a530 <_printf_i+0x14c>
   2a518:	6823      	ldr	r3, [r4, #0]
   2a51a:	07de      	lsls	r6, r3, #31
   2a51c:	d508      	bpl.n	2a530 <_printf_i+0x14c>
   2a51e:	6923      	ldr	r3, [r4, #16]
   2a520:	6861      	ldr	r1, [r4, #4]
   2a522:	4299      	cmp	r1, r3
   2a524:	bfde      	ittt	le
   2a526:	2330      	movle	r3, #48	; 0x30
   2a528:	f805 3c01 	strble.w	r3, [r5, #-1]
   2a52c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
   2a530:	1b52      	subs	r2, r2, r5
   2a532:	6122      	str	r2, [r4, #16]
   2a534:	f8cd a000 	str.w	sl, [sp]
   2a538:	464b      	mov	r3, r9
   2a53a:	aa03      	add	r2, sp, #12
   2a53c:	4621      	mov	r1, r4
   2a53e:	4640      	mov	r0, r8
   2a540:	f006 fc1c 	bl	30d7c <_printf_common>
   2a544:	3001      	adds	r0, #1
   2a546:	d14c      	bne.n	2a5e2 <_printf_i+0x1fe>
   2a548:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a54c:	b004      	add	sp, #16
   2a54e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2a552:	4835      	ldr	r0, [pc, #212]	; (2a628 <_printf_i+0x244>)
   2a554:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
   2a558:	6829      	ldr	r1, [r5, #0]
   2a55a:	6823      	ldr	r3, [r4, #0]
   2a55c:	f851 6b04 	ldr.w	r6, [r1], #4
   2a560:	6029      	str	r1, [r5, #0]
   2a562:	061d      	lsls	r5, r3, #24
   2a564:	d514      	bpl.n	2a590 <_printf_i+0x1ac>
   2a566:	07df      	lsls	r7, r3, #31
   2a568:	bf44      	itt	mi
   2a56a:	f043 0320 	orrmi.w	r3, r3, #32
   2a56e:	6023      	strmi	r3, [r4, #0]
   2a570:	b91e      	cbnz	r6, 2a57a <_printf_i+0x196>
   2a572:	6823      	ldr	r3, [r4, #0]
   2a574:	f023 0320 	bic.w	r3, r3, #32
   2a578:	6023      	str	r3, [r4, #0]
   2a57a:	2310      	movs	r3, #16
   2a57c:	e7b0      	b.n	2a4e0 <_printf_i+0xfc>
   2a57e:	6823      	ldr	r3, [r4, #0]
   2a580:	f043 0320 	orr.w	r3, r3, #32
   2a584:	6023      	str	r3, [r4, #0]
   2a586:	2378      	movs	r3, #120	; 0x78
   2a588:	4828      	ldr	r0, [pc, #160]	; (2a62c <_printf_i+0x248>)
   2a58a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   2a58e:	e7e3      	b.n	2a558 <_printf_i+0x174>
   2a590:	0659      	lsls	r1, r3, #25
   2a592:	bf48      	it	mi
   2a594:	b2b6      	uxthmi	r6, r6
   2a596:	e7e6      	b.n	2a566 <_printf_i+0x182>
   2a598:	4615      	mov	r5, r2
   2a59a:	e7bb      	b.n	2a514 <_printf_i+0x130>
   2a59c:	682b      	ldr	r3, [r5, #0]
   2a59e:	6826      	ldr	r6, [r4, #0]
   2a5a0:	6961      	ldr	r1, [r4, #20]
   2a5a2:	1d18      	adds	r0, r3, #4
   2a5a4:	6028      	str	r0, [r5, #0]
   2a5a6:	0635      	lsls	r5, r6, #24
   2a5a8:	681b      	ldr	r3, [r3, #0]
   2a5aa:	d501      	bpl.n	2a5b0 <_printf_i+0x1cc>
   2a5ac:	6019      	str	r1, [r3, #0]
   2a5ae:	e002      	b.n	2a5b6 <_printf_i+0x1d2>
   2a5b0:	0670      	lsls	r0, r6, #25
   2a5b2:	d5fb      	bpl.n	2a5ac <_printf_i+0x1c8>
   2a5b4:	8019      	strh	r1, [r3, #0]
   2a5b6:	2300      	movs	r3, #0
   2a5b8:	6123      	str	r3, [r4, #16]
   2a5ba:	4615      	mov	r5, r2
   2a5bc:	e7ba      	b.n	2a534 <_printf_i+0x150>
   2a5be:	682b      	ldr	r3, [r5, #0]
   2a5c0:	1d1a      	adds	r2, r3, #4
   2a5c2:	602a      	str	r2, [r5, #0]
   2a5c4:	681d      	ldr	r5, [r3, #0]
   2a5c6:	6862      	ldr	r2, [r4, #4]
   2a5c8:	2100      	movs	r1, #0
   2a5ca:	4628      	mov	r0, r5
   2a5cc:	f7d5 fd88 	bl	e0 <memchr>
   2a5d0:	b108      	cbz	r0, 2a5d6 <_printf_i+0x1f2>
   2a5d2:	1b40      	subs	r0, r0, r5
   2a5d4:	6060      	str	r0, [r4, #4]
   2a5d6:	6863      	ldr	r3, [r4, #4]
   2a5d8:	6123      	str	r3, [r4, #16]
   2a5da:	2300      	movs	r3, #0
   2a5dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   2a5e0:	e7a8      	b.n	2a534 <_printf_i+0x150>
   2a5e2:	6923      	ldr	r3, [r4, #16]
   2a5e4:	462a      	mov	r2, r5
   2a5e6:	4649      	mov	r1, r9
   2a5e8:	4640      	mov	r0, r8
   2a5ea:	47d0      	blx	sl
   2a5ec:	3001      	adds	r0, #1
   2a5ee:	d0ab      	beq.n	2a548 <_printf_i+0x164>
   2a5f0:	6823      	ldr	r3, [r4, #0]
   2a5f2:	079b      	lsls	r3, r3, #30
   2a5f4:	d413      	bmi.n	2a61e <_printf_i+0x23a>
   2a5f6:	68e0      	ldr	r0, [r4, #12]
   2a5f8:	9b03      	ldr	r3, [sp, #12]
   2a5fa:	4298      	cmp	r0, r3
   2a5fc:	bfb8      	it	lt
   2a5fe:	4618      	movlt	r0, r3
   2a600:	e7a4      	b.n	2a54c <_printf_i+0x168>
   2a602:	2301      	movs	r3, #1
   2a604:	4632      	mov	r2, r6
   2a606:	4649      	mov	r1, r9
   2a608:	4640      	mov	r0, r8
   2a60a:	47d0      	blx	sl
   2a60c:	3001      	adds	r0, #1
   2a60e:	d09b      	beq.n	2a548 <_printf_i+0x164>
   2a610:	3501      	adds	r5, #1
   2a612:	68e3      	ldr	r3, [r4, #12]
   2a614:	9903      	ldr	r1, [sp, #12]
   2a616:	1a5b      	subs	r3, r3, r1
   2a618:	42ab      	cmp	r3, r5
   2a61a:	dcf2      	bgt.n	2a602 <_printf_i+0x21e>
   2a61c:	e7eb      	b.n	2a5f6 <_printf_i+0x212>
   2a61e:	2500      	movs	r5, #0
   2a620:	f104 0619 	add.w	r6, r4, #25
   2a624:	e7f5      	b.n	2a612 <_printf_i+0x22e>
   2a626:	bf00      	nop
   2a628:	00035421 	.word	0x00035421
   2a62c:	00035432 	.word	0x00035432

0002a630 <_sbrk_r>:
   2a630:	b538      	push	{r3, r4, r5, lr}
   2a632:	4d06      	ldr	r5, [pc, #24]	; (2a64c <_sbrk_r+0x1c>)
   2a634:	2300      	movs	r3, #0
   2a636:	4604      	mov	r4, r0
   2a638:	4608      	mov	r0, r1
   2a63a:	602b      	str	r3, [r5, #0]
   2a63c:	f7eb ffb0 	bl	165a0 <_sbrk>
   2a640:	1c43      	adds	r3, r0, #1
   2a642:	d102      	bne.n	2a64a <_sbrk_r+0x1a>
   2a644:	682b      	ldr	r3, [r5, #0]
   2a646:	b103      	cbz	r3, 2a64a <_sbrk_r+0x1a>
   2a648:	6023      	str	r3, [r4, #0]
   2a64a:	bd38      	pop	{r3, r4, r5, pc}
   2a64c:	20003758 	.word	0x20003758

0002a650 <siprintf>:
   2a650:	b40e      	push	{r1, r2, r3}
   2a652:	b500      	push	{lr}
   2a654:	b09c      	sub	sp, #112	; 0x70
   2a656:	ab1d      	add	r3, sp, #116	; 0x74
   2a658:	9002      	str	r0, [sp, #8]
   2a65a:	9006      	str	r0, [sp, #24]
   2a65c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   2a660:	4809      	ldr	r0, [pc, #36]	; (2a688 <siprintf+0x38>)
   2a662:	9107      	str	r1, [sp, #28]
   2a664:	9104      	str	r1, [sp, #16]
   2a666:	4909      	ldr	r1, [pc, #36]	; (2a68c <siprintf+0x3c>)
   2a668:	f853 2b04 	ldr.w	r2, [r3], #4
   2a66c:	9105      	str	r1, [sp, #20]
   2a66e:	6800      	ldr	r0, [r0, #0]
   2a670:	9301      	str	r3, [sp, #4]
   2a672:	a902      	add	r1, sp, #8
   2a674:	f000 f894 	bl	2a7a0 <_svfiprintf_r>
   2a678:	9b02      	ldr	r3, [sp, #8]
   2a67a:	2200      	movs	r2, #0
   2a67c:	701a      	strb	r2, [r3, #0]
   2a67e:	b01c      	add	sp, #112	; 0x70
   2a680:	f85d eb04 	ldr.w	lr, [sp], #4
   2a684:	b003      	add	sp, #12
   2a686:	4770      	bx	lr
   2a688:	200008b0 	.word	0x200008b0
   2a68c:	ffff0208 	.word	0xffff0208

0002a690 <_strtoul_l.constprop.0>:
   2a690:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2a694:	4f36      	ldr	r7, [pc, #216]	; (2a770 <_strtoul_l.constprop.0+0xe0>)
   2a696:	4686      	mov	lr, r0
   2a698:	460d      	mov	r5, r1
   2a69a:	4628      	mov	r0, r5
   2a69c:	f815 4b01 	ldrb.w	r4, [r5], #1
   2a6a0:	5de6      	ldrb	r6, [r4, r7]
   2a6a2:	f016 0608 	ands.w	r6, r6, #8
   2a6a6:	d1f8      	bne.n	2a69a <_strtoul_l.constprop.0+0xa>
   2a6a8:	2c2d      	cmp	r4, #45	; 0x2d
   2a6aa:	d12f      	bne.n	2a70c <_strtoul_l.constprop.0+0x7c>
   2a6ac:	782c      	ldrb	r4, [r5, #0]
   2a6ae:	2601      	movs	r6, #1
   2a6b0:	1c85      	adds	r5, r0, #2
   2a6b2:	2b00      	cmp	r3, #0
   2a6b4:	d057      	beq.n	2a766 <_strtoul_l.constprop.0+0xd6>
   2a6b6:	2b10      	cmp	r3, #16
   2a6b8:	d109      	bne.n	2a6ce <_strtoul_l.constprop.0+0x3e>
   2a6ba:	2c30      	cmp	r4, #48	; 0x30
   2a6bc:	d107      	bne.n	2a6ce <_strtoul_l.constprop.0+0x3e>
   2a6be:	7828      	ldrb	r0, [r5, #0]
   2a6c0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   2a6c4:	2858      	cmp	r0, #88	; 0x58
   2a6c6:	d149      	bne.n	2a75c <_strtoul_l.constprop.0+0xcc>
   2a6c8:	786c      	ldrb	r4, [r5, #1]
   2a6ca:	2310      	movs	r3, #16
   2a6cc:	3502      	adds	r5, #2
   2a6ce:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   2a6d2:	2700      	movs	r7, #0
   2a6d4:	fbb8 f8f3 	udiv	r8, r8, r3
   2a6d8:	fb03 f908 	mul.w	r9, r3, r8
   2a6dc:	ea6f 0909 	mvn.w	r9, r9
   2a6e0:	4638      	mov	r0, r7
   2a6e2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
   2a6e6:	f1bc 0f09 	cmp.w	ip, #9
   2a6ea:	d814      	bhi.n	2a716 <_strtoul_l.constprop.0+0x86>
   2a6ec:	4664      	mov	r4, ip
   2a6ee:	42a3      	cmp	r3, r4
   2a6f0:	dd22      	ble.n	2a738 <_strtoul_l.constprop.0+0xa8>
   2a6f2:	2f00      	cmp	r7, #0
   2a6f4:	db1d      	blt.n	2a732 <_strtoul_l.constprop.0+0xa2>
   2a6f6:	4580      	cmp	r8, r0
   2a6f8:	d31b      	bcc.n	2a732 <_strtoul_l.constprop.0+0xa2>
   2a6fa:	d101      	bne.n	2a700 <_strtoul_l.constprop.0+0x70>
   2a6fc:	45a1      	cmp	r9, r4
   2a6fe:	db18      	blt.n	2a732 <_strtoul_l.constprop.0+0xa2>
   2a700:	fb00 4003 	mla	r0, r0, r3, r4
   2a704:	2701      	movs	r7, #1
   2a706:	f815 4b01 	ldrb.w	r4, [r5], #1
   2a70a:	e7ea      	b.n	2a6e2 <_strtoul_l.constprop.0+0x52>
   2a70c:	2c2b      	cmp	r4, #43	; 0x2b
   2a70e:	bf04      	itt	eq
   2a710:	782c      	ldrbeq	r4, [r5, #0]
   2a712:	1c85      	addeq	r5, r0, #2
   2a714:	e7cd      	b.n	2a6b2 <_strtoul_l.constprop.0+0x22>
   2a716:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
   2a71a:	f1bc 0f19 	cmp.w	ip, #25
   2a71e:	d801      	bhi.n	2a724 <_strtoul_l.constprop.0+0x94>
   2a720:	3c37      	subs	r4, #55	; 0x37
   2a722:	e7e4      	b.n	2a6ee <_strtoul_l.constprop.0+0x5e>
   2a724:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
   2a728:	f1bc 0f19 	cmp.w	ip, #25
   2a72c:	d804      	bhi.n	2a738 <_strtoul_l.constprop.0+0xa8>
   2a72e:	3c57      	subs	r4, #87	; 0x57
   2a730:	e7dd      	b.n	2a6ee <_strtoul_l.constprop.0+0x5e>
   2a732:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   2a736:	e7e6      	b.n	2a706 <_strtoul_l.constprop.0+0x76>
   2a738:	2f00      	cmp	r7, #0
   2a73a:	da07      	bge.n	2a74c <_strtoul_l.constprop.0+0xbc>
   2a73c:	2322      	movs	r3, #34	; 0x22
   2a73e:	f8ce 3000 	str.w	r3, [lr]
   2a742:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a746:	b932      	cbnz	r2, 2a756 <_strtoul_l.constprop.0+0xc6>
   2a748:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2a74c:	b106      	cbz	r6, 2a750 <_strtoul_l.constprop.0+0xc0>
   2a74e:	4240      	negs	r0, r0
   2a750:	2a00      	cmp	r2, #0
   2a752:	d0f9      	beq.n	2a748 <_strtoul_l.constprop.0+0xb8>
   2a754:	b107      	cbz	r7, 2a758 <_strtoul_l.constprop.0+0xc8>
   2a756:	1e69      	subs	r1, r5, #1
   2a758:	6011      	str	r1, [r2, #0]
   2a75a:	e7f5      	b.n	2a748 <_strtoul_l.constprop.0+0xb8>
   2a75c:	2430      	movs	r4, #48	; 0x30
   2a75e:	2b00      	cmp	r3, #0
   2a760:	d1b5      	bne.n	2a6ce <_strtoul_l.constprop.0+0x3e>
   2a762:	2308      	movs	r3, #8
   2a764:	e7b3      	b.n	2a6ce <_strtoul_l.constprop.0+0x3e>
   2a766:	2c30      	cmp	r4, #48	; 0x30
   2a768:	d0a9      	beq.n	2a6be <_strtoul_l.constprop.0+0x2e>
   2a76a:	230a      	movs	r3, #10
   2a76c:	e7af      	b.n	2a6ce <_strtoul_l.constprop.0+0x3e>
   2a76e:	bf00      	nop
   2a770:	00035321 	.word	0x00035321

0002a774 <strtoul>:
   2a774:	4613      	mov	r3, r2
   2a776:	460a      	mov	r2, r1
   2a778:	4601      	mov	r1, r0
   2a77a:	4802      	ldr	r0, [pc, #8]	; (2a784 <strtoul+0x10>)
   2a77c:	6800      	ldr	r0, [r0, #0]
   2a77e:	f7ff bf87 	b.w	2a690 <_strtoul_l.constprop.0>
   2a782:	bf00      	nop
   2a784:	200008b0 	.word	0x200008b0

0002a788 <__malloc_lock>:
   2a788:	4801      	ldr	r0, [pc, #4]	; (2a790 <__malloc_lock+0x8>)
   2a78a:	f7eb bf1f 	b.w	165cc <__retarget_lock_acquire_recursive>
   2a78e:	bf00      	nop
   2a790:	2000099c 	.word	0x2000099c

0002a794 <__malloc_unlock>:
   2a794:	4801      	ldr	r0, [pc, #4]	; (2a79c <__malloc_unlock+0x8>)
   2a796:	f7eb bf35 	b.w	16604 <__retarget_lock_release_recursive>
   2a79a:	bf00      	nop
   2a79c:	2000099c 	.word	0x2000099c

0002a7a0 <_svfiprintf_r>:
   2a7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a7a4:	4698      	mov	r8, r3
   2a7a6:	898b      	ldrh	r3, [r1, #12]
   2a7a8:	061b      	lsls	r3, r3, #24
   2a7aa:	b09d      	sub	sp, #116	; 0x74
   2a7ac:	4607      	mov	r7, r0
   2a7ae:	460d      	mov	r5, r1
   2a7b0:	4614      	mov	r4, r2
   2a7b2:	d50e      	bpl.n	2a7d2 <_svfiprintf_r+0x32>
   2a7b4:	690b      	ldr	r3, [r1, #16]
   2a7b6:	b963      	cbnz	r3, 2a7d2 <_svfiprintf_r+0x32>
   2a7b8:	2140      	movs	r1, #64	; 0x40
   2a7ba:	f7ff fdb9 	bl	2a330 <_malloc_r>
   2a7be:	6028      	str	r0, [r5, #0]
   2a7c0:	6128      	str	r0, [r5, #16]
   2a7c2:	b920      	cbnz	r0, 2a7ce <_svfiprintf_r+0x2e>
   2a7c4:	230c      	movs	r3, #12
   2a7c6:	603b      	str	r3, [r7, #0]
   2a7c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a7cc:	e0d1      	b.n	2a972 <_svfiprintf_r+0x1d2>
   2a7ce:	2340      	movs	r3, #64	; 0x40
   2a7d0:	616b      	str	r3, [r5, #20]
   2a7d2:	2300      	movs	r3, #0
   2a7d4:	9309      	str	r3, [sp, #36]	; 0x24
   2a7d6:	2320      	movs	r3, #32
   2a7d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   2a7dc:	f8cd 800c 	str.w	r8, [sp, #12]
   2a7e0:	2330      	movs	r3, #48	; 0x30
   2a7e2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 2a98c <_svfiprintf_r+0x1ec>
   2a7e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   2a7ea:	f04f 0901 	mov.w	r9, #1
   2a7ee:	4623      	mov	r3, r4
   2a7f0:	469a      	mov	sl, r3
   2a7f2:	f813 2b01 	ldrb.w	r2, [r3], #1
   2a7f6:	b10a      	cbz	r2, 2a7fc <_svfiprintf_r+0x5c>
   2a7f8:	2a25      	cmp	r2, #37	; 0x25
   2a7fa:	d1f9      	bne.n	2a7f0 <_svfiprintf_r+0x50>
   2a7fc:	ebba 0b04 	subs.w	fp, sl, r4
   2a800:	d00b      	beq.n	2a81a <_svfiprintf_r+0x7a>
   2a802:	465b      	mov	r3, fp
   2a804:	4622      	mov	r2, r4
   2a806:	4629      	mov	r1, r5
   2a808:	4638      	mov	r0, r7
   2a80a:	f006 fb84 	bl	30f16 <__ssputs_r>
   2a80e:	3001      	adds	r0, #1
   2a810:	f000 80aa 	beq.w	2a968 <_svfiprintf_r+0x1c8>
   2a814:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2a816:	445a      	add	r2, fp
   2a818:	9209      	str	r2, [sp, #36]	; 0x24
   2a81a:	f89a 3000 	ldrb.w	r3, [sl]
   2a81e:	2b00      	cmp	r3, #0
   2a820:	f000 80a2 	beq.w	2a968 <_svfiprintf_r+0x1c8>
   2a824:	2300      	movs	r3, #0
   2a826:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2a82a:	e9cd 2305 	strd	r2, r3, [sp, #20]
   2a82e:	f10a 0a01 	add.w	sl, sl, #1
   2a832:	9304      	str	r3, [sp, #16]
   2a834:	9307      	str	r3, [sp, #28]
   2a836:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   2a83a:	931a      	str	r3, [sp, #104]	; 0x68
   2a83c:	4654      	mov	r4, sl
   2a83e:	2205      	movs	r2, #5
   2a840:	f814 1b01 	ldrb.w	r1, [r4], #1
   2a844:	4851      	ldr	r0, [pc, #324]	; (2a98c <_svfiprintf_r+0x1ec>)
   2a846:	f7d5 fc4b 	bl	e0 <memchr>
   2a84a:	9a04      	ldr	r2, [sp, #16]
   2a84c:	b9d8      	cbnz	r0, 2a886 <_svfiprintf_r+0xe6>
   2a84e:	06d0      	lsls	r0, r2, #27
   2a850:	bf44      	itt	mi
   2a852:	2320      	movmi	r3, #32
   2a854:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   2a858:	0711      	lsls	r1, r2, #28
   2a85a:	bf44      	itt	mi
   2a85c:	232b      	movmi	r3, #43	; 0x2b
   2a85e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   2a862:	f89a 3000 	ldrb.w	r3, [sl]
   2a866:	2b2a      	cmp	r3, #42	; 0x2a
   2a868:	d015      	beq.n	2a896 <_svfiprintf_r+0xf6>
   2a86a:	9a07      	ldr	r2, [sp, #28]
   2a86c:	4654      	mov	r4, sl
   2a86e:	2000      	movs	r0, #0
   2a870:	f04f 0c0a 	mov.w	ip, #10
   2a874:	4621      	mov	r1, r4
   2a876:	f811 3b01 	ldrb.w	r3, [r1], #1
   2a87a:	3b30      	subs	r3, #48	; 0x30
   2a87c:	2b09      	cmp	r3, #9
   2a87e:	d94e      	bls.n	2a91e <_svfiprintf_r+0x17e>
   2a880:	b1b0      	cbz	r0, 2a8b0 <_svfiprintf_r+0x110>
   2a882:	9207      	str	r2, [sp, #28]
   2a884:	e014      	b.n	2a8b0 <_svfiprintf_r+0x110>
   2a886:	eba0 0308 	sub.w	r3, r0, r8
   2a88a:	fa09 f303 	lsl.w	r3, r9, r3
   2a88e:	4313      	orrs	r3, r2
   2a890:	9304      	str	r3, [sp, #16]
   2a892:	46a2      	mov	sl, r4
   2a894:	e7d2      	b.n	2a83c <_svfiprintf_r+0x9c>
   2a896:	9b03      	ldr	r3, [sp, #12]
   2a898:	1d19      	adds	r1, r3, #4
   2a89a:	681b      	ldr	r3, [r3, #0]
   2a89c:	9103      	str	r1, [sp, #12]
   2a89e:	2b00      	cmp	r3, #0
   2a8a0:	bfbb      	ittet	lt
   2a8a2:	425b      	neglt	r3, r3
   2a8a4:	f042 0202 	orrlt.w	r2, r2, #2
   2a8a8:	9307      	strge	r3, [sp, #28]
   2a8aa:	9307      	strlt	r3, [sp, #28]
   2a8ac:	bfb8      	it	lt
   2a8ae:	9204      	strlt	r2, [sp, #16]
   2a8b0:	7823      	ldrb	r3, [r4, #0]
   2a8b2:	2b2e      	cmp	r3, #46	; 0x2e
   2a8b4:	d10c      	bne.n	2a8d0 <_svfiprintf_r+0x130>
   2a8b6:	7863      	ldrb	r3, [r4, #1]
   2a8b8:	2b2a      	cmp	r3, #42	; 0x2a
   2a8ba:	d135      	bne.n	2a928 <_svfiprintf_r+0x188>
   2a8bc:	9b03      	ldr	r3, [sp, #12]
   2a8be:	1d1a      	adds	r2, r3, #4
   2a8c0:	681b      	ldr	r3, [r3, #0]
   2a8c2:	9203      	str	r2, [sp, #12]
   2a8c4:	2b00      	cmp	r3, #0
   2a8c6:	bfb8      	it	lt
   2a8c8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   2a8cc:	3402      	adds	r4, #2
   2a8ce:	9305      	str	r3, [sp, #20]
   2a8d0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 2a990 <_svfiprintf_r+0x1f0>
   2a8d4:	7821      	ldrb	r1, [r4, #0]
   2a8d6:	2203      	movs	r2, #3
   2a8d8:	4650      	mov	r0, sl
   2a8da:	f7d5 fc01 	bl	e0 <memchr>
   2a8de:	b140      	cbz	r0, 2a8f2 <_svfiprintf_r+0x152>
   2a8e0:	2340      	movs	r3, #64	; 0x40
   2a8e2:	eba0 000a 	sub.w	r0, r0, sl
   2a8e6:	fa03 f000 	lsl.w	r0, r3, r0
   2a8ea:	9b04      	ldr	r3, [sp, #16]
   2a8ec:	4303      	orrs	r3, r0
   2a8ee:	3401      	adds	r4, #1
   2a8f0:	9304      	str	r3, [sp, #16]
   2a8f2:	f814 1b01 	ldrb.w	r1, [r4], #1
   2a8f6:	4827      	ldr	r0, [pc, #156]	; (2a994 <_svfiprintf_r+0x1f4>)
   2a8f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   2a8fc:	2206      	movs	r2, #6
   2a8fe:	f7d5 fbef 	bl	e0 <memchr>
   2a902:	2800      	cmp	r0, #0
   2a904:	d038      	beq.n	2a978 <_svfiprintf_r+0x1d8>
   2a906:	4b24      	ldr	r3, [pc, #144]	; (2a998 <_svfiprintf_r+0x1f8>)
   2a908:	bb1b      	cbnz	r3, 2a952 <_svfiprintf_r+0x1b2>
   2a90a:	9b03      	ldr	r3, [sp, #12]
   2a90c:	3307      	adds	r3, #7
   2a90e:	f023 0307 	bic.w	r3, r3, #7
   2a912:	3308      	adds	r3, #8
   2a914:	9303      	str	r3, [sp, #12]
   2a916:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2a918:	4433      	add	r3, r6
   2a91a:	9309      	str	r3, [sp, #36]	; 0x24
   2a91c:	e767      	b.n	2a7ee <_svfiprintf_r+0x4e>
   2a91e:	fb0c 3202 	mla	r2, ip, r2, r3
   2a922:	460c      	mov	r4, r1
   2a924:	2001      	movs	r0, #1
   2a926:	e7a5      	b.n	2a874 <_svfiprintf_r+0xd4>
   2a928:	2300      	movs	r3, #0
   2a92a:	3401      	adds	r4, #1
   2a92c:	9305      	str	r3, [sp, #20]
   2a92e:	4619      	mov	r1, r3
   2a930:	f04f 0c0a 	mov.w	ip, #10
   2a934:	4620      	mov	r0, r4
   2a936:	f810 2b01 	ldrb.w	r2, [r0], #1
   2a93a:	3a30      	subs	r2, #48	; 0x30
   2a93c:	2a09      	cmp	r2, #9
   2a93e:	d903      	bls.n	2a948 <_svfiprintf_r+0x1a8>
   2a940:	2b00      	cmp	r3, #0
   2a942:	d0c5      	beq.n	2a8d0 <_svfiprintf_r+0x130>
   2a944:	9105      	str	r1, [sp, #20]
   2a946:	e7c3      	b.n	2a8d0 <_svfiprintf_r+0x130>
   2a948:	fb0c 2101 	mla	r1, ip, r1, r2
   2a94c:	4604      	mov	r4, r0
   2a94e:	2301      	movs	r3, #1
   2a950:	e7f0      	b.n	2a934 <_svfiprintf_r+0x194>
   2a952:	ab03      	add	r3, sp, #12
   2a954:	9300      	str	r3, [sp, #0]
   2a956:	462a      	mov	r2, r5
   2a958:	4b10      	ldr	r3, [pc, #64]	; (2a99c <_svfiprintf_r+0x1fc>)
   2a95a:	a904      	add	r1, sp, #16
   2a95c:	4638      	mov	r0, r7
   2a95e:	f3af 8000 	nop.w
   2a962:	1c42      	adds	r2, r0, #1
   2a964:	4606      	mov	r6, r0
   2a966:	d1d6      	bne.n	2a916 <_svfiprintf_r+0x176>
   2a968:	89ab      	ldrh	r3, [r5, #12]
   2a96a:	065b      	lsls	r3, r3, #25
   2a96c:	f53f af2c 	bmi.w	2a7c8 <_svfiprintf_r+0x28>
   2a970:	9809      	ldr	r0, [sp, #36]	; 0x24
   2a972:	b01d      	add	sp, #116	; 0x74
   2a974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a978:	ab03      	add	r3, sp, #12
   2a97a:	9300      	str	r3, [sp, #0]
   2a97c:	462a      	mov	r2, r5
   2a97e:	4b07      	ldr	r3, [pc, #28]	; (2a99c <_svfiprintf_r+0x1fc>)
   2a980:	a904      	add	r1, sp, #16
   2a982:	4638      	mov	r0, r7
   2a984:	f7ff fd2e 	bl	2a3e4 <_printf_i>
   2a988:	e7eb      	b.n	2a962 <_svfiprintf_r+0x1c2>
   2a98a:	bf00      	nop
   2a98c:	00035443 	.word	0x00035443
   2a990:	00035449 	.word	0x00035449
   2a994:	0003544d 	.word	0x0003544d
   2a998:	00000000 	.word	0x00000000
   2a99c:	00030f17 	.word	0x00030f17

0002a9a0 <bt_melty_init>:
}
   2a9a0:	2000      	movs	r0, #0
   2a9a2:	4770      	bx	lr

0002a9a4 <adc_multi_sample>:
float adc_multi_sample(int samples, int adc_channel) {
   2a9a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a9a6:	4606      	mov	r6, r0
   2a9a8:	460f      	mov	r7, r1
    for (int loop = 0; loop < samples; loop ++) {
   2a9aa:	2500      	movs	r5, #0
	float multi_sample = 0;
   2a9ac:	2400      	movs	r4, #0
    for (int loop = 0; loop < samples; loop ++) {
   2a9ae:	e008      	b.n	2a9c2 <adc_multi_sample+0x1e>
		multi_sample += AnalogRead(adc_channel);
   2a9b0:	4638      	mov	r0, r7
   2a9b2:	f7e6 fea5 	bl	11700 <AnalogRead>
   2a9b6:	4601      	mov	r1, r0
   2a9b8:	4620      	mov	r0, r4
   2a9ba:	f7d6 f805 	bl	9c8 <__addsf3>
   2a9be:	4604      	mov	r4, r0
    for (int loop = 0; loop < samples; loop ++) {
   2a9c0:	3501      	adds	r5, #1
   2a9c2:	42b5      	cmp	r5, r6
   2a9c4:	dbf4      	blt.n	2a9b0 <adc_multi_sample+0xc>
    return multi_sample / samples;
   2a9c6:	4630      	mov	r0, r6
   2a9c8:	f7d6 f8b2 	bl	b30 <__aeabi_i2f>
   2a9cc:	4601      	mov	r1, r0
   2a9ce:	4620      	mov	r0, r4
   2a9d0:	f7d6 f9b6 	bl	d40 <__aeabi_fdiv>
}
   2a9d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002a9d6 <platform_delay>:
{
   2a9d6:	b508      	push	{r3, lr}
   2a9d8:	0c41      	lsrs	r1, r0, #17
   2a9da:	03c0      	lsls	r0, r0, #15
   2a9dc:	f240 33e7 	movw	r3, #999	; 0x3e7
   2a9e0:	18c0      	adds	r0, r0, r3
   2a9e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2a9e6:	f04f 0300 	mov.w	r3, #0
   2a9ea:	f141 0100 	adc.w	r1, r1, #0
   2a9ee:	f7d6 faff 	bl	ff0 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   2a9f2:	f7fd fdb5 	bl	28560 <z_impl_k_sleep>
}
   2a9f6:	bd08      	pop	{r3, pc}

0002a9f8 <lis331dlh_read_reg>:
{
   2a9f8:	b510      	push	{r4, lr}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
   2a9fa:	6844      	ldr	r4, [r0, #4]
   2a9fc:	68c0      	ldr	r0, [r0, #12]
   2a9fe:	47a0      	blx	r4
}
   2aa00:	bd10      	pop	{r4, pc}

0002aa02 <lis331dlh_write_reg>:
{
   2aa02:	b510      	push	{r4, lr}
  ret = ctx->write_reg(ctx->handle, reg, data, len);
   2aa04:	6804      	ldr	r4, [r0, #0]
   2aa06:	68c0      	ldr	r0, [r0, #12]
   2aa08:	47a0      	blx	r4
}
   2aa0a:	bd10      	pop	{r4, pc}

0002aa0c <lis331dlh_data_rate_set>:
  * @param  val         change the values of dr in reg CTRL_REG1
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis331dlh_data_rate_set(stmdev_ctx_t *ctx, lis331dlh_dr_t val)
{
   2aa0c:	b530      	push	{r4, r5, lr}
   2aa0e:	b083      	sub	sp, #12
   2aa10:	4605      	mov	r5, r0
   2aa12:	460c      	mov	r4, r1
  lis331dlh_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lis331dlh_read_reg(ctx, LIS331DLH_CTRL_REG1,
   2aa14:	2301      	movs	r3, #1
   2aa16:	aa01      	add	r2, sp, #4
   2aa18:	2120      	movs	r1, #32
   2aa1a:	f7ff ffed 	bl	2a9f8 <lis331dlh_read_reg>
                           (uint8_t *)&ctrl_reg1, 1);

  if (ret == 0)
   2aa1e:	b108      	cbz	r0, 2aa24 <lis331dlh_data_rate_set+0x18>
    ret = lis331dlh_write_reg(ctx, LIS331DLH_CTRL_REG1,
                              (uint8_t *)&ctrl_reg1, 1);
  }

  return ret;
}
   2aa20:	b003      	add	sp, #12
   2aa22:	bd30      	pop	{r4, r5, pc}
    ctrl_reg1.pm = (uint8_t)val & 0x07U;
   2aa24:	f89d 3004 	ldrb.w	r3, [sp, #4]
   2aa28:	f364 1347 	bfi	r3, r4, #5, #3
   2aa2c:	f88d 3004 	strb.w	r3, [sp, #4]
    ctrl_reg1.dr = ((uint8_t)val & 0x30U) >> 4;
   2aa30:	f3c4 1101 	ubfx	r1, r4, #4, #2
   2aa34:	b2db      	uxtb	r3, r3
   2aa36:	f361 03c4 	bfi	r3, r1, #3, #2
   2aa3a:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis331dlh_write_reg(ctx, LIS331DLH_CTRL_REG1,
   2aa3e:	2301      	movs	r3, #1
   2aa40:	aa01      	add	r2, sp, #4
   2aa42:	2120      	movs	r1, #32
   2aa44:	4628      	mov	r0, r5
   2aa46:	f7ff ffdc 	bl	2aa02 <lis331dlh_write_reg>
  return ret;
   2aa4a:	e7e9      	b.n	2aa20 <lis331dlh_data_rate_set+0x14>

0002aa4c <lis331dlh_full_scale_set>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis331dlh_full_scale_set(stmdev_ctx_t *ctx,
                                 lis331dlh_fs_t val)
{
   2aa4c:	b530      	push	{r4, r5, lr}
   2aa4e:	b083      	sub	sp, #12
   2aa50:	4604      	mov	r4, r0
   2aa52:	460d      	mov	r5, r1
  lis331dlh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis331dlh_read_reg(ctx, LIS331DLH_CTRL_REG4,
   2aa54:	2301      	movs	r3, #1
   2aa56:	aa01      	add	r2, sp, #4
   2aa58:	2123      	movs	r1, #35	; 0x23
   2aa5a:	f7ff ffcd 	bl	2a9f8 <lis331dlh_read_reg>
                           (uint8_t *)&ctrl_reg4, 1);

  if (ret == 0)
   2aa5e:	b108      	cbz	r0, 2aa64 <lis331dlh_full_scale_set+0x18>
    ret = lis331dlh_write_reg(ctx, LIS331DLH_CTRL_REG4,
                              (uint8_t *)&ctrl_reg4, 1);
  }

  return ret;
}
   2aa60:	b003      	add	sp, #12
   2aa62:	bd30      	pop	{r4, r5, pc}
    ctrl_reg4.fs = (uint8_t)val;
   2aa64:	f89d 3004 	ldrb.w	r3, [sp, #4]
   2aa68:	f365 1305 	bfi	r3, r5, #4, #2
   2aa6c:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis331dlh_write_reg(ctx, LIS331DLH_CTRL_REG4,
   2aa70:	2301      	movs	r3, #1
   2aa72:	aa01      	add	r2, sp, #4
   2aa74:	2123      	movs	r1, #35	; 0x23
   2aa76:	4620      	mov	r0, r4
   2aa78:	f7ff ffc3 	bl	2aa02 <lis331dlh_write_reg>
  return ret;
   2aa7c:	e7f0      	b.n	2aa60 <lis331dlh_full_scale_set+0x14>

0002aa7e <lis331dlh_block_data_update_set>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis331dlh_block_data_update_set(stmdev_ctx_t *ctx,
                                        uint8_t val)
{
   2aa7e:	b530      	push	{r4, r5, lr}
   2aa80:	b083      	sub	sp, #12
   2aa82:	4604      	mov	r4, r0
   2aa84:	460d      	mov	r5, r1
  lis331dlh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis331dlh_read_reg(ctx, LIS331DLH_CTRL_REG4,
   2aa86:	2301      	movs	r3, #1
   2aa88:	aa01      	add	r2, sp, #4
   2aa8a:	2123      	movs	r1, #35	; 0x23
   2aa8c:	f7ff ffb4 	bl	2a9f8 <lis331dlh_read_reg>
                           (uint8_t *)&ctrl_reg4, 1);

  if (ret == 0)
   2aa90:	b108      	cbz	r0, 2aa96 <lis331dlh_block_data_update_set+0x18>
    ret = lis331dlh_write_reg(ctx, LIS331DLH_CTRL_REG4,
                              (uint8_t *)&ctrl_reg4, 1);
  }

  return ret;
}
   2aa92:	b003      	add	sp, #12
   2aa94:	bd30      	pop	{r4, r5, pc}
    ctrl_reg4.bdu = val;
   2aa96:	f89d 3004 	ldrb.w	r3, [sp, #4]
   2aa9a:	f365 13c7 	bfi	r3, r5, #7, #1
   2aa9e:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis331dlh_write_reg(ctx, LIS331DLH_CTRL_REG4,
   2aaa2:	2301      	movs	r3, #1
   2aaa4:	aa01      	add	r2, sp, #4
   2aaa6:	2123      	movs	r1, #35	; 0x23
   2aaa8:	4620      	mov	r0, r4
   2aaaa:	f7ff ffaa 	bl	2aa02 <lis331dlh_write_reg>
  return ret;
   2aaae:	e7f0      	b.n	2aa92 <lis331dlh_block_data_update_set+0x14>

0002aab0 <lis331dlh_status_reg_get>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis331dlh_status_reg_get(stmdev_ctx_t *ctx,
                                 lis331dlh_status_reg_t *val)
{
   2aab0:	b508      	push	{r3, lr}
   2aab2:	460a      	mov	r2, r1
  int32_t ret;

  ret = lis331dlh_read_reg(ctx, LIS331DLH_STATUS_REG, (uint8_t *) val, 1);
   2aab4:	2301      	movs	r3, #1
   2aab6:	2127      	movs	r1, #39	; 0x27
   2aab8:	f7ff ff9e 	bl	2a9f8 <lis331dlh_read_reg>

  return ret;
}
   2aabc:	bd08      	pop	{r3, pc}

0002aabe <lis331dlh_acceleration_raw_get>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis331dlh_acceleration_raw_get(stmdev_ctx_t *ctx,
                                       int16_t *val)
{
   2aabe:	b510      	push	{r4, lr}
   2aac0:	b082      	sub	sp, #8
   2aac2:	460c      	mov	r4, r1
  uint8_t buff[6];
  int32_t ret;

  ret = lis331dlh_read_reg(ctx, LIS331DLH_OUT_X_L, buff, 6);
   2aac4:	2306      	movs	r3, #6
   2aac6:	466a      	mov	r2, sp
   2aac8:	2128      	movs	r1, #40	; 0x28
   2aaca:	f7ff ff95 	bl	2a9f8 <lis331dlh_read_reg>
  val[0] = (int16_t)buff[1];
   2aace:	f89d 2001 	ldrb.w	r2, [sp, #1]
   2aad2:	8022      	strh	r2, [r4, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
   2aad4:	f89d 3000 	ldrb.w	r3, [sp]
   2aad8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   2aadc:	8023      	strh	r3, [r4, #0]
  val[1] = (int16_t)buff[3];
   2aade:	f89d 2003 	ldrb.w	r2, [sp, #3]
   2aae2:	8062      	strh	r2, [r4, #2]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
   2aae4:	f89d 3002 	ldrb.w	r3, [sp, #2]
   2aae8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   2aaec:	8063      	strh	r3, [r4, #2]
  val[2] = (int16_t)buff[5];
   2aaee:	f89d 2005 	ldrb.w	r2, [sp, #5]
   2aaf2:	80a2      	strh	r2, [r4, #4]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
   2aaf4:	f89d 3004 	ldrb.w	r3, [sp, #4]
   2aaf8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   2aafc:	80a3      	strh	r3, [r4, #4]

  return ret;
}
   2aafe:	b002      	add	sp, #8
   2ab00:	bd10      	pop	{r4, pc}

0002ab02 <lis331dlh_device_id_get>:
  * @param  buff        buffer that stores data read
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis331dlh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
   2ab02:	b508      	push	{r3, lr}
   2ab04:	460a      	mov	r2, r1
  int32_t ret;

  ret = lis331dlh_read_reg(ctx, LIS331DLH_WHO_AM_I, buff, 1);
   2ab06:	2301      	movs	r3, #1
   2ab08:	210f      	movs	r1, #15
   2ab0a:	f7ff ff75 	bl	2a9f8 <lis331dlh_read_reg>

  return ret;
}
   2ab0e:	bd08      	pop	{r3, pc}

0002ab10 <char2hex>:
#include <errno.h>
#include <zephyr/sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   2ab10:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   2ab14:	b2db      	uxtb	r3, r3
   2ab16:	2b09      	cmp	r3, #9
   2ab18:	d802      	bhi.n	2ab20 <char2hex+0x10>
		*x = c - '0';
   2ab1a:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   2ab1c:	2000      	movs	r0, #0
   2ab1e:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   2ab20:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   2ab24:	b2db      	uxtb	r3, r3
   2ab26:	2b05      	cmp	r3, #5
   2ab28:	d803      	bhi.n	2ab32 <char2hex+0x22>
		*x = c - 'a' + 10;
   2ab2a:	3857      	subs	r0, #87	; 0x57
   2ab2c:	7008      	strb	r0, [r1, #0]
	return 0;
   2ab2e:	2000      	movs	r0, #0
   2ab30:	4770      	bx	lr
	} else if (c >= 'A' && c <= 'F') {
   2ab32:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   2ab36:	b2db      	uxtb	r3, r3
   2ab38:	2b05      	cmp	r3, #5
   2ab3a:	d803      	bhi.n	2ab44 <char2hex+0x34>
		*x = c - 'A' + 10;
   2ab3c:	3837      	subs	r0, #55	; 0x37
   2ab3e:	7008      	strb	r0, [r1, #0]
	return 0;
   2ab40:	2000      	movs	r0, #0
   2ab42:	4770      	bx	lr
		return -EINVAL;
   2ab44:	f06f 0015 	mvn.w	r0, #21
}
   2ab48:	4770      	bx	lr

0002ab4a <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   2ab4a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2ab4e:	b083      	sub	sp, #12
   2ab50:	4616      	mov	r6, r2
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   2ab52:	f001 0201 	and.w	r2, r1, #1
   2ab56:	eb02 0851 	add.w	r8, r2, r1, lsr #1
   2ab5a:	4598      	cmp	r8, r3
   2ab5c:	d82f      	bhi.n	2abbe <hex2bin+0x74>
   2ab5e:	4607      	mov	r7, r0
   2ab60:	ea4f 0951 	mov.w	r9, r1, lsr #1
		return 0;
	}

	/* if hexlen is uneven, insert leading zero nibble */
	if (hexlen % 2) {
   2ab64:	b9f2      	cbnz	r2, 2aba4 <hex2bin+0x5a>
		hex++;
		buf++;
	}

	/* regular hex conversion */
	for (size_t i = 0; i < hexlen / 2; i++) {
   2ab66:	2400      	movs	r4, #0
   2ab68:	45a1      	cmp	r9, r4
   2ab6a:	d92a      	bls.n	2abc2 <hex2bin+0x78>
		if (char2hex(hex[2 * i], &dec) < 0) {
   2ab6c:	0065      	lsls	r5, r4, #1
   2ab6e:	f10d 0107 	add.w	r1, sp, #7
   2ab72:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
   2ab76:	f7ff ffcb 	bl	2ab10 <char2hex>
   2ab7a:	2800      	cmp	r0, #0
   2ab7c:	db28      	blt.n	2abd0 <hex2bin+0x86>
			return 0;
		}
		buf[i] = dec << 4;
   2ab7e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2ab82:	011b      	lsls	r3, r3, #4
   2ab84:	5533      	strb	r3, [r6, r4]

		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   2ab86:	3501      	adds	r5, #1
   2ab88:	f10d 0107 	add.w	r1, sp, #7
   2ab8c:	5d78      	ldrb	r0, [r7, r5]
   2ab8e:	f7ff ffbf 	bl	2ab10 <char2hex>
   2ab92:	2800      	cmp	r0, #0
   2ab94:	db1f      	blt.n	2abd6 <hex2bin+0x8c>
			return 0;
		}
		buf[i] += dec;
   2ab96:	5d33      	ldrb	r3, [r6, r4]
   2ab98:	f89d 2007 	ldrb.w	r2, [sp, #7]
   2ab9c:	4413      	add	r3, r2
   2ab9e:	5533      	strb	r3, [r6, r4]
	for (size_t i = 0; i < hexlen / 2; i++) {
   2aba0:	3401      	adds	r4, #1
   2aba2:	e7e1      	b.n	2ab68 <hex2bin+0x1e>
		if (char2hex(hex[0], &dec) < 0) {
   2aba4:	f10d 0107 	add.w	r1, sp, #7
   2aba8:	7800      	ldrb	r0, [r0, #0]
   2abaa:	f7ff ffb1 	bl	2ab10 <char2hex>
   2abae:	2800      	cmp	r0, #0
   2abb0:	db0b      	blt.n	2abca <hex2bin+0x80>
		buf[0] = dec;
   2abb2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2abb6:	f806 3b01 	strb.w	r3, [r6], #1
		hex++;
   2abba:	3701      	adds	r7, #1
		buf++;
   2abbc:	e7d3      	b.n	2ab66 <hex2bin+0x1c>
		return 0;
   2abbe:	f04f 0800 	mov.w	r8, #0
	}

	return hexlen / 2 + hexlen % 2;
}
   2abc2:	4640      	mov	r0, r8
   2abc4:	b003      	add	sp, #12
   2abc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			return 0;
   2abca:	f04f 0800 	mov.w	r8, #0
   2abce:	e7f8      	b.n	2abc2 <hex2bin+0x78>
			return 0;
   2abd0:	f04f 0800 	mov.w	r8, #0
   2abd4:	e7f5      	b.n	2abc2 <hex2bin+0x78>
			return 0;
   2abd6:	f04f 0800 	mov.w	r8, #0
   2abda:	e7f2      	b.n	2abc2 <hex2bin+0x78>

0002abdc <sys_notify_validate>:
	if (notify == NULL) {
   2abdc:	4602      	mov	r2, r0
   2abde:	b1b0      	cbz	r0, 2ac0e <sys_notify_validate+0x32>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   2abe0:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   2abe2:	f003 0303 	and.w	r3, r3, #3
	switch (sys_notify_get_method(notify)) {
   2abe6:	2b02      	cmp	r3, #2
   2abe8:	d00b      	beq.n	2ac02 <sys_notify_validate+0x26>
   2abea:	2b03      	cmp	r3, #3
   2abec:	d004      	beq.n	2abf8 <sys_notify_validate+0x1c>
   2abee:	2b01      	cmp	r3, #1
   2abf0:	d004      	beq.n	2abfc <sys_notify_validate+0x20>
   2abf2:	f06f 0015 	mvn.w	r0, #21
   2abf6:	4770      	bx	lr
		if (notify->method.callback == NULL) {
   2abf8:	6803      	ldr	r3, [r0, #0]
   2abfa:	b15b      	cbz	r3, 2ac14 <sys_notify_validate+0x38>
		notify->result = 0;
   2abfc:	2000      	movs	r0, #0
   2abfe:	6090      	str	r0, [r2, #8]
   2ac00:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   2ac02:	6803      	ldr	r3, [r0, #0]
   2ac04:	2b00      	cmp	r3, #0
   2ac06:	d1f9      	bne.n	2abfc <sys_notify_validate+0x20>
			rv = -EINVAL;
   2ac08:	f06f 0015 	mvn.w	r0, #21
}
   2ac0c:	4770      	bx	lr
		return -EINVAL;
   2ac0e:	f06f 0015 	mvn.w	r0, #21
   2ac12:	4770      	bx	lr
			rv = -EINVAL;
   2ac14:	f06f 0015 	mvn.w	r0, #21
   2ac18:	4770      	bx	lr

0002ac1a <arch_printk_char_out>:
}
   2ac1a:	2000      	movs	r0, #0
   2ac1c:	4770      	bx	lr

0002ac1e <str_out>:
{
   2ac1e:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   2ac20:	680c      	ldr	r4, [r1, #0]
   2ac22:	b154      	cbz	r4, 2ac3a <str_out+0x1c>
   2ac24:	688a      	ldr	r2, [r1, #8]
   2ac26:	684b      	ldr	r3, [r1, #4]
   2ac28:	429a      	cmp	r2, r3
   2ac2a:	da06      	bge.n	2ac3a <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
   2ac2c:	3b01      	subs	r3, #1
   2ac2e:	429a      	cmp	r2, r3
   2ac30:	d008      	beq.n	2ac44 <str_out+0x26>
		ctx->str[ctx->count++] = c;
   2ac32:	1c53      	adds	r3, r2, #1
   2ac34:	608b      	str	r3, [r1, #8]
   2ac36:	54a0      	strb	r0, [r4, r2]
   2ac38:	e002      	b.n	2ac40 <str_out+0x22>
		ctx->count++;
   2ac3a:	688b      	ldr	r3, [r1, #8]
   2ac3c:	3301      	adds	r3, #1
   2ac3e:	608b      	str	r3, [r1, #8]
}
   2ac40:	bc10      	pop	{r4}
   2ac42:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
   2ac44:	1c53      	adds	r3, r2, #1
   2ac46:	608b      	str	r3, [r1, #8]
   2ac48:	2300      	movs	r3, #0
   2ac4a:	54a3      	strb	r3, [r4, r2]
   2ac4c:	e7f8      	b.n	2ac40 <str_out+0x22>

0002ac4e <printk>:
{
   2ac4e:	b40f      	push	{r0, r1, r2, r3}
   2ac50:	b500      	push	{lr}
   2ac52:	b083      	sub	sp, #12
   2ac54:	a904      	add	r1, sp, #16
   2ac56:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   2ac5a:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   2ac5c:	f7e8 f94e 	bl	12efc <vprintk>
}
   2ac60:	b003      	add	sp, #12
   2ac62:	f85d eb04 	ldr.w	lr, [sp], #4
   2ac66:	b004      	add	sp, #16
   2ac68:	4770      	bx	lr

0002ac6a <snprintk>:
{
   2ac6a:	b40c      	push	{r2, r3}
   2ac6c:	b500      	push	{lr}
   2ac6e:	b083      	sub	sp, #12
   2ac70:	ab04      	add	r3, sp, #16
   2ac72:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   2ac76:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   2ac78:	f7e8 f94e 	bl	12f18 <vsnprintk>
}
   2ac7c:	b003      	add	sp, #12
   2ac7e:	f85d eb04 	ldr.w	lr, [sp], #4
   2ac82:	b002      	add	sp, #8
   2ac84:	4770      	bx	lr

0002ac86 <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
   2ac86:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2ac8a:	8b81      	ldrh	r1, [r0, #28]
   2ac8c:	f021 0107 	bic.w	r1, r1, #7
   2ac90:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   2ac92:	8381      	strh	r1, [r0, #28]
}
   2ac94:	4770      	bx	lr

0002ac96 <notify_monitors>:
{
   2ac96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ac9a:	4606      	mov	r6, r0
   2ac9c:	460f      	mov	r7, r1
   2ac9e:	4690      	mov	r8, r2
	return list->head;
   2aca0:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   2aca2:	b119      	cbz	r1, 2acac <notify_monitors+0x16>
   2aca4:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
   2aca6:	b131      	cbz	r1, 2acb6 <notify_monitors+0x20>
	return node->next;
   2aca8:	680c      	ldr	r4, [r1, #0]
   2acaa:	e004      	b.n	2acb6 <notify_monitors+0x20>
   2acac:	460c      	mov	r4, r1
   2acae:	e002      	b.n	2acb6 <notify_monitors+0x20>
   2acb0:	4623      	mov	r3, r4
   2acb2:	4621      	mov	r1, r4
   2acb4:	461c      	mov	r4, r3
   2acb6:	b159      	cbz	r1, 2acd0 <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
   2acb8:	684d      	ldr	r5, [r1, #4]
   2acba:	4643      	mov	r3, r8
   2acbc:	463a      	mov	r2, r7
   2acbe:	4630      	mov	r0, r6
   2acc0:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   2acc2:	2c00      	cmp	r4, #0
   2acc4:	d0f4      	beq.n	2acb0 <notify_monitors+0x1a>
   2acc6:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   2acc8:	2c00      	cmp	r4, #0
   2acca:	d0f2      	beq.n	2acb2 <notify_monitors+0x1c>
	return node->next;
   2accc:	6823      	ldr	r3, [r4, #0]
   2acce:	e7f0      	b.n	2acb2 <notify_monitors+0x1c>
}
   2acd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002acd4 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2acd4:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   2acd6:	f013 0307 	ands.w	r3, r3, #7
   2acda:	d103      	bne.n	2ace4 <process_recheck+0x10>
	return list->head;
   2acdc:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
   2acde:	b10a      	cbz	r2, 2ace4 <process_recheck+0x10>
		evt = EVT_START;
   2ace0:	2003      	movs	r0, #3
   2ace2:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   2ace4:	2b02      	cmp	r3, #2
   2ace6:	d003      	beq.n	2acf0 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
   2ace8:	2b01      	cmp	r3, #1
   2acea:	d006      	beq.n	2acfa <process_recheck+0x26>
	int evt = EVT_NOP;
   2acec:	2000      	movs	r0, #0
   2acee:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
   2acf0:	8bc2      	ldrh	r2, [r0, #30]
   2acf2:	2a00      	cmp	r2, #0
   2acf4:	d1f8      	bne.n	2ace8 <process_recheck+0x14>
		evt = EVT_STOP;
   2acf6:	2004      	movs	r0, #4
   2acf8:	4770      	bx	lr
   2acfa:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
   2acfc:	b10b      	cbz	r3, 2ad02 <process_recheck+0x2e>
		evt = EVT_RESET;
   2acfe:	2005      	movs	r0, #5
}
   2ad00:	4770      	bx	lr
	int evt = EVT_NOP;
   2ad02:	2000      	movs	r0, #0
   2ad04:	4770      	bx	lr

0002ad06 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
   2ad06:	b158      	cbz	r0, 2ad20 <validate_args+0x1a>
{
   2ad08:	b510      	push	{r4, lr}
   2ad0a:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   2ad0c:	b159      	cbz	r1, 2ad26 <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
   2ad0e:	1d08      	adds	r0, r1, #4
   2ad10:	f7ff ff64 	bl	2abdc <sys_notify_validate>
	if ((rv == 0)
   2ad14:	b918      	cbnz	r0, 2ad1e <validate_args+0x18>
	    && ((cli->notify.flags
   2ad16:	68a3      	ldr	r3, [r4, #8]
   2ad18:	f033 0303 	bics.w	r3, r3, #3
   2ad1c:	d106      	bne.n	2ad2c <validate_args+0x26>
}
   2ad1e:	bd10      	pop	{r4, pc}
		return -EINVAL;
   2ad20:	f06f 0015 	mvn.w	r0, #21
}
   2ad24:	4770      	bx	lr
		return -EINVAL;
   2ad26:	f06f 0015 	mvn.w	r0, #21
   2ad2a:	e7f8      	b.n	2ad1e <validate_args+0x18>
		rv = -EINVAL;
   2ad2c:	f06f 0015 	mvn.w	r0, #21
   2ad30:	e7f5      	b.n	2ad1e <validate_args+0x18>

0002ad32 <notify_one>:
{
   2ad32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ad36:	4607      	mov	r7, r0
   2ad38:	460c      	mov	r4, r1
   2ad3a:	4616      	mov	r6, r2
   2ad3c:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2ad3e:	4619      	mov	r1, r3
   2ad40:	1d20      	adds	r0, r4, #4
   2ad42:	f7e8 f89f 	bl	12e84 <sys_notify_finalize>
	if (cb) {
   2ad46:	b128      	cbz	r0, 2ad54 <notify_one+0x22>
   2ad48:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
   2ad4a:	462b      	mov	r3, r5
   2ad4c:	4632      	mov	r2, r6
   2ad4e:	4621      	mov	r1, r4
   2ad50:	4638      	mov	r0, r7
   2ad52:	47c0      	blx	r8
}
   2ad54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002ad58 <notify_all>:
{
   2ad58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ad5c:	4680      	mov	r8, r0
   2ad5e:	460c      	mov	r4, r1
   2ad60:	4617      	mov	r7, r2
   2ad62:	461e      	mov	r6, r3
	while (!sys_slist_is_empty(list)) {
   2ad64:	e004      	b.n	2ad70 <notify_all+0x18>
		notify_one(mgr, cli, state, res);
   2ad66:	4633      	mov	r3, r6
   2ad68:	463a      	mov	r2, r7
   2ad6a:	4640      	mov	r0, r8
   2ad6c:	f7ff ffe1 	bl	2ad32 <notify_one>
   2ad70:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
   2ad72:	b131      	cbz	r1, 2ad82 <notify_all+0x2a>
	return node->next;
   2ad74:	680d      	ldr	r5, [r1, #0]
	list->head = node;
   2ad76:	6025      	str	r5, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2ad78:	6863      	ldr	r3, [r4, #4]
   2ad7a:	428b      	cmp	r3, r1
   2ad7c:	d1f3      	bne.n	2ad66 <notify_all+0xe>
	list->tail = node;
   2ad7e:	6065      	str	r5, [r4, #4]
}
   2ad80:	e7f1      	b.n	2ad66 <notify_all+0xe>
}
   2ad82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002ad86 <onoff_manager_init>:
	if ((mgr == NULL)
   2ad86:	b170      	cbz	r0, 2ada6 <onoff_manager_init+0x20>
{
   2ad88:	b538      	push	{r3, r4, r5, lr}
   2ad8a:	460c      	mov	r4, r1
   2ad8c:	4605      	mov	r5, r0
	    || (transitions == NULL)
   2ad8e:	b169      	cbz	r1, 2adac <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
   2ad90:	680b      	ldr	r3, [r1, #0]
   2ad92:	b173      	cbz	r3, 2adb2 <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
   2ad94:	684b      	ldr	r3, [r1, #4]
   2ad96:	b17b      	cbz	r3, 2adb8 <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   2ad98:	2220      	movs	r2, #32
   2ad9a:	2100      	movs	r1, #0
   2ad9c:	f005 ffdd 	bl	30d5a <memset>
   2ada0:	612c      	str	r4, [r5, #16]
	return 0;
   2ada2:	2000      	movs	r0, #0
}
   2ada4:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   2ada6:	f06f 0015 	mvn.w	r0, #21
}
   2adaa:	4770      	bx	lr
		return -EINVAL;
   2adac:	f06f 0015 	mvn.w	r0, #21
   2adb0:	e7f8      	b.n	2ada4 <onoff_manager_init+0x1e>
   2adb2:	f06f 0015 	mvn.w	r0, #21
   2adb6:	e7f5      	b.n	2ada4 <onoff_manager_init+0x1e>
   2adb8:	f06f 0015 	mvn.w	r0, #21
   2adbc:	e7f2      	b.n	2ada4 <onoff_manager_init+0x1e>

0002adbe <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   2adbe:	b508      	push	{r3, lr}
   2adc0:	4604      	mov	r4, r0
   2adc2:	4608      	mov	r0, r1
   2adc4:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   2adc6:	461a      	mov	r2, r3
   2adc8:	47a0      	blx	r4
	return z_impl_z_current_get();
   2adca:	f7fd fc0d 	bl	285e8 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   2adce:	f7eb fa65 	bl	1629c <z_impl_k_thread_abort>

0002add2 <chunk_mem>:
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   2add2:	00c9      	lsls	r1, r1, #3
   2add4:	3104      	adds	r1, #4
}
   2add6:	4408      	add	r0, r1
   2add8:	4770      	bx	lr

0002adda <free_list_remove_bidx>:
	void *cmem = &buf[c];
   2adda:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
		return ((uint16_t *)cmem)[f];
   2adde:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   2ade2:	88db      	ldrh	r3, [r3, #6]
	if (next_free_chunk(h, c) == c) {
   2ade4:	4299      	cmp	r1, r3
   2ade6:	d00c      	beq.n	2ae02 <free_list_remove_bidx+0x28>
   2ade8:	4484      	add	ip, r0
   2adea:	f8bc 1004 	ldrh.w	r1, [ip, #4]
		b->next = second;
   2adee:	3204      	adds	r2, #4
   2adf0:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	void *cmem = &buf[c];
   2adf4:	00ca      	lsls	r2, r1, #3
		((uint16_t *)cmem)[f] = val;
   2adf6:	3206      	adds	r2, #6
   2adf8:	5283      	strh	r3, [r0, r2]
	void *cmem = &buf[c];
   2adfa:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
   2adfc:	3304      	adds	r3, #4
   2adfe:	52c1      	strh	r1, [r0, r3]
}
   2ae00:	4770      	bx	lr
		h->avail_buckets &= ~BIT(bidx);
   2ae02:	2301      	movs	r3, #1
   2ae04:	fa03 f102 	lsl.w	r1, r3, r2
   2ae08:	68c3      	ldr	r3, [r0, #12]
   2ae0a:	ea23 0301 	bic.w	r3, r3, r1
   2ae0e:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   2ae10:	3204      	adds	r2, #4
   2ae12:	2300      	movs	r3, #0
   2ae14:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
   2ae18:	4770      	bx	lr

0002ae1a <free_list_add_bidx>:
{
   2ae1a:	b510      	push	{r4, lr}
	if (b->next == 0U) {
   2ae1c:	1d13      	adds	r3, r2, #4
   2ae1e:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   2ae22:	b97c      	cbnz	r4, 2ae44 <free_list_add_bidx+0x2a>
		h->avail_buckets |= BIT(bidx);
   2ae24:	2301      	movs	r3, #1
   2ae26:	fa03 f402 	lsl.w	r4, r3, r2
   2ae2a:	68c3      	ldr	r3, [r0, #12]
   2ae2c:	4323      	orrs	r3, r4
   2ae2e:	60c3      	str	r3, [r0, #12]
		b->next = c;
   2ae30:	3204      	adds	r2, #4
   2ae32:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
   2ae36:	00cb      	lsls	r3, r1, #3
		((uint16_t *)cmem)[f] = val;
   2ae38:	1d1a      	adds	r2, r3, #4
   2ae3a:	b289      	uxth	r1, r1
   2ae3c:	5281      	strh	r1, [r0, r2]
   2ae3e:	3306      	adds	r3, #6
   2ae40:	52c1      	strh	r1, [r0, r3]
}
   2ae42:	bd10      	pop	{r4, pc}
	void *cmem = &buf[c];
   2ae44:	00e2      	lsls	r2, r4, #3
		return ((uint16_t *)cmem)[f];
   2ae46:	3204      	adds	r2, #4
   2ae48:	5a83      	ldrh	r3, [r0, r2]
	void *cmem = &buf[c];
   2ae4a:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
		((uint16_t *)cmem)[f] = val;
   2ae4e:	f10c 0e04 	add.w	lr, ip, #4
   2ae52:	f820 300e 	strh.w	r3, [r0, lr]
   2ae56:	f10c 0c06 	add.w	ip, ip, #6
   2ae5a:	f820 400c 	strh.w	r4, [r0, ip]
	void *cmem = &buf[c];
   2ae5e:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
   2ae60:	3306      	adds	r3, #6
   2ae62:	b289      	uxth	r1, r1
   2ae64:	52c1      	strh	r1, [r0, r3]
   2ae66:	5281      	strh	r1, [r0, r2]
   2ae68:	e7eb      	b.n	2ae42 <free_list_add_bidx+0x28>

0002ae6a <split_chunks>:
{
   2ae6a:	b500      	push	{lr}
	void *cmem = &buf[c];
   2ae6c:	00cb      	lsls	r3, r1, #3
		return ((uint16_t *)cmem)[f];
   2ae6e:	3302      	adds	r3, #2
   2ae70:	f830 e003 	ldrh.w	lr, [r0, r3]
	chunksz_t lsz = rc - lc;
   2ae74:	eba2 0c01 	sub.w	ip, r2, r1
	chunksz_t rsz = sz0 - lsz;
   2ae78:	1a89      	subs	r1, r1, r2
   2ae7a:	eb01 015e 	add.w	r1, r1, lr, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2ae7e:	ea4f 0e4c 	mov.w	lr, ip, lsl #1
		((uint16_t *)cmem)[f] = val;
   2ae82:	f820 e003 	strh.w	lr, [r0, r3]
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2ae86:	ea4f 0e41 	mov.w	lr, r1, lsl #1
	void *cmem = &buf[c];
   2ae8a:	00d3      	lsls	r3, r2, #3
		((uint16_t *)cmem)[f] = val;
   2ae8c:	3302      	adds	r3, #2
   2ae8e:	f820 e003 	strh.w	lr, [r0, r3]
   2ae92:	f820 c032 	strh.w	ip, [r0, r2, lsl #3]
		return ((uint16_t *)cmem)[f];
   2ae96:	5ac3      	ldrh	r3, [r0, r3]
	return c + chunk_size(h, c);
   2ae98:	eb02 0253 	add.w	r2, r2, r3, lsr #1
		((uint16_t *)cmem)[f] = val;
   2ae9c:	f820 1032 	strh.w	r1, [r0, r2, lsl #3]
}
   2aea0:	f85d fb04 	ldr.w	pc, [sp], #4

0002aea4 <merge_chunks>:
{
   2aea4:	b500      	push	{lr}
	void *cmem = &buf[c];
   2aea6:	00c9      	lsls	r1, r1, #3
		return ((uint16_t *)cmem)[f];
   2aea8:	3102      	adds	r1, #2
   2aeaa:	f830 e001 	ldrh.w	lr, [r0, r1]
	void *cmem = &buf[c];
   2aeae:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
		return ((uint16_t *)cmem)[f];
   2aeb2:	f10c 0c02 	add.w	ip, ip, #2
   2aeb6:	f830 300c 	ldrh.w	r3, [r0, ip]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   2aeba:	085b      	lsrs	r3, r3, #1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   2aebc:	eb03 035e 	add.w	r3, r3, lr, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2aec0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
		((uint16_t *)cmem)[f] = val;
   2aec4:	f820 e001 	strh.w	lr, [r0, r1]
		return ((uint16_t *)cmem)[f];
   2aec8:	f830 100c 	ldrh.w	r1, [r0, ip]
	return c + chunk_size(h, c);
   2aecc:	eb02 0251 	add.w	r2, r2, r1, lsr #1
		((uint16_t *)cmem)[f] = val;
   2aed0:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]
}
   2aed4:	f85d fb04 	ldr.w	pc, [sp], #4

0002aed8 <mem_to_chunkid>:
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2aed8:	3904      	subs	r1, #4
   2aeda:	1a08      	subs	r0, r1, r0
}
   2aedc:	08c0      	lsrs	r0, r0, #3
   2aede:	4770      	bx	lr

0002aee0 <free_list_remove>:
{
   2aee0:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
   2aee2:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   2aee6:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   2aee8:	0852      	lsrs	r2, r2, #1
	return 31 - __builtin_clz(usable_sz);
   2aeea:	fab2 f282 	clz	r2, r2
		free_list_remove_bidx(h, c, bidx);
   2aeee:	f1c2 021f 	rsb	r2, r2, #31
   2aef2:	f7ff ff72 	bl	2adda <free_list_remove_bidx>
}
   2aef6:	bd08      	pop	{r3, pc}

0002aef8 <free_list_add>:
{
   2aef8:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
   2aefa:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   2aefe:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   2af00:	0852      	lsrs	r2, r2, #1
	return 31 - __builtin_clz(usable_sz);
   2af02:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
   2af06:	f1c2 021f 	rsb	r2, r2, #31
   2af0a:	f7ff ff86 	bl	2ae1a <free_list_add_bidx>
}
   2af0e:	bd08      	pop	{r3, pc}

0002af10 <free_chunk>:
{
   2af10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2af12:	4604      	mov	r4, r0
   2af14:	460d      	mov	r5, r1
	void *cmem = &buf[c];
   2af16:	00ce      	lsls	r6, r1, #3
		return ((uint16_t *)cmem)[f];
   2af18:	1cb7      	adds	r7, r6, #2
   2af1a:	5bc1      	ldrh	r1, [r0, r7]
	return c + chunk_size(h, c);
   2af1c:	eb05 0151 	add.w	r1, r5, r1, lsr #1
		return ((uint16_t *)cmem)[f];
   2af20:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   2af24:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   2af26:	f013 0f01 	tst.w	r3, #1
   2af2a:	d00c      	beq.n	2af46 <free_chunk+0x36>
   2af2c:	5ba1      	ldrh	r1, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   2af2e:	1a69      	subs	r1, r5, r1
		return ((uint16_t *)cmem)[f];
   2af30:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
   2af34:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   2af36:	f013 0f01 	tst.w	r3, #1
   2af3a:	d00e      	beq.n	2af5a <free_chunk+0x4a>
	free_list_add(h, c);
   2af3c:	4629      	mov	r1, r5
   2af3e:	4620      	mov	r0, r4
   2af40:	f7ff ffda 	bl	2aef8 <free_list_add>
}
   2af44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		free_list_remove(h, right_chunk(h, c));
   2af46:	f7ff ffcb 	bl	2aee0 <free_list_remove>
   2af4a:	5be2      	ldrh	r2, [r4, r7]
		merge_chunks(h, c, right_chunk(h, c));
   2af4c:	eb05 0252 	add.w	r2, r5, r2, lsr #1
   2af50:	4629      	mov	r1, r5
   2af52:	4620      	mov	r0, r4
   2af54:	f7ff ffa6 	bl	2aea4 <merge_chunks>
   2af58:	e7e8      	b.n	2af2c <free_chunk+0x1c>
		free_list_remove(h, left_chunk(h, c));
   2af5a:	4620      	mov	r0, r4
   2af5c:	f7ff ffc0 	bl	2aee0 <free_list_remove>
   2af60:	5ba1      	ldrh	r1, [r4, r6]
		merge_chunks(h, left_chunk(h, c), c);
   2af62:	462a      	mov	r2, r5
   2af64:	1a69      	subs	r1, r5, r1
   2af66:	4620      	mov	r0, r4
   2af68:	f7ff ff9c 	bl	2aea4 <merge_chunks>
   2af6c:	5ba3      	ldrh	r3, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   2af6e:	1aed      	subs	r5, r5, r3
   2af70:	e7e4      	b.n	2af3c <free_chunk+0x2c>

0002af72 <alloc_chunk>:
{
   2af72:	b570      	push	{r4, r5, r6, lr}
	return 31 - __builtin_clz(usable_sz);
   2af74:	fab1 f381 	clz	r3, r1
	if (b->next) {
   2af78:	f1c3 0423 	rsb	r4, r3, #35	; 0x23
   2af7c:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
   2af80:	b1cd      	cbz	r5, 2afb6 <alloc_chunk+0x44>
   2af82:	f1c3 021f 	rsb	r2, r3, #31
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
   2af86:	f04f 0e03 	mov.w	lr, #3
			chunkid_t c = b->next;
   2af8a:	1d14      	adds	r4, r2, #4
   2af8c:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
	void *cmem = &buf[c];
   2af90:	ea4f 0cc4 	mov.w	ip, r4, lsl #3
		return ((uint16_t *)cmem)[f];
   2af94:	eb00 06c4 	add.w	r6, r0, r4, lsl #3
   2af98:	8876      	ldrh	r6, [r6, #2]
			if (chunk_size(h, c) >= sz) {
   2af9a:	ebb1 0f56 	cmp.w	r1, r6, lsr #1
   2af9e:	d914      	bls.n	2afca <alloc_chunk+0x58>
   2afa0:	4484      	add	ip, r0
   2afa2:	f8bc 4006 	ldrh.w	r4, [ip, #6]
			b->next = next_free_chunk(h, c);
   2afa6:	1d16      	adds	r6, r2, #4
   2afa8:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
		} while (--i && b->next != first);
   2afac:	f1be 0e01 	subs.w	lr, lr, #1
   2afb0:	d001      	beq.n	2afb6 <alloc_chunk+0x44>
   2afb2:	42a5      	cmp	r5, r4
   2afb4:	d1e9      	bne.n	2af8a <alloc_chunk+0x18>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   2afb6:	68c4      	ldr	r4, [r0, #12]
   2afb8:	f1c3 0220 	rsb	r2, r3, #32
   2afbc:	2301      	movs	r3, #1
   2afbe:	4093      	lsls	r3, r2
   2afc0:	425b      	negs	r3, r3
	if (bmask != 0U) {
   2afc2:	401c      	ands	r4, r3
   2afc4:	d105      	bne.n	2afd2 <alloc_chunk+0x60>
}
   2afc6:	4620      	mov	r0, r4
   2afc8:	bd70      	pop	{r4, r5, r6, pc}
				free_list_remove_bidx(h, c, bi);
   2afca:	4621      	mov	r1, r4
   2afcc:	f7ff ff05 	bl	2adda <free_list_remove_bidx>
				return c;
   2afd0:	e7f9      	b.n	2afc6 <alloc_chunk+0x54>
		int minbucket = __builtin_ctz(bmask);
   2afd2:	fa94 f2a4 	rbit	r2, r4
   2afd6:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   2afda:	1d13      	adds	r3, r2, #4
   2afdc:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   2afe0:	4621      	mov	r1, r4
   2afe2:	f7ff fefa 	bl	2adda <free_list_remove_bidx>
		return c;
   2afe6:	e7ee      	b.n	2afc6 <alloc_chunk+0x54>

0002afe8 <sys_heap_alloc>:
{
   2afe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct z_heap *h = heap->heap;
   2afea:	6805      	ldr	r5, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   2afec:	b341      	cbz	r1, 2b040 <sys_heap_alloc+0x58>
   2afee:	460b      	mov	r3, r1
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   2aff0:	68aa      	ldr	r2, [r5, #8]
   2aff2:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
   2aff6:	d925      	bls.n	2b044 <sys_heap_alloc+0x5c>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2aff8:	330b      	adds	r3, #11
   2affa:	08dc      	lsrs	r4, r3, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   2affc:	4621      	mov	r1, r4
   2affe:	4628      	mov	r0, r5
   2b000:	f7ff ffb7 	bl	2af72 <alloc_chunk>
	if (c == 0U) {
   2b004:	4607      	mov	r7, r0
   2b006:	b1f8      	cbz	r0, 2b048 <sys_heap_alloc+0x60>
	void *cmem = &buf[c];
   2b008:	00c6      	lsls	r6, r0, #3
		return ((uint16_t *)cmem)[f];
   2b00a:	eb05 03c0 	add.w	r3, r5, r0, lsl #3
   2b00e:	885b      	ldrh	r3, [r3, #2]
	if (chunk_size(h, c) > chunk_sz) {
   2b010:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
   2b014:	d309      	bcc.n	2b02a <sys_heap_alloc+0x42>
	void *cmem = &buf[c];
   2b016:	19ab      	adds	r3, r5, r6
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2b018:	885a      	ldrh	r2, [r3, #2]
   2b01a:	f042 0201 	orr.w	r2, r2, #1
   2b01e:	805a      	strh	r2, [r3, #2]
	mem = chunk_mem(h, c);
   2b020:	4639      	mov	r1, r7
   2b022:	4628      	mov	r0, r5
   2b024:	f7ff fed5 	bl	2add2 <chunk_mem>
}
   2b028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		split_chunks(h, c, c + chunk_sz);
   2b02a:	4404      	add	r4, r0
   2b02c:	4622      	mov	r2, r4
   2b02e:	4601      	mov	r1, r0
   2b030:	4628      	mov	r0, r5
   2b032:	f7ff ff1a 	bl	2ae6a <split_chunks>
		free_list_add(h, c + chunk_sz);
   2b036:	4621      	mov	r1, r4
   2b038:	4628      	mov	r0, r5
   2b03a:	f7ff ff5d 	bl	2aef8 <free_list_add>
   2b03e:	e7ea      	b.n	2b016 <sys_heap_alloc+0x2e>
		return NULL;
   2b040:	2000      	movs	r0, #0
   2b042:	e7f1      	b.n	2b028 <sys_heap_alloc+0x40>
   2b044:	2000      	movs	r0, #0
   2b046:	e7ef      	b.n	2b028 <sys_heap_alloc+0x40>
		return NULL;
   2b048:	2000      	movs	r0, #0
   2b04a:	e7ed      	b.n	2b028 <sys_heap_alloc+0x40>

0002b04c <outs>:
{
   2b04c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b050:	4607      	mov	r7, r0
   2b052:	460e      	mov	r6, r1
   2b054:	4614      	mov	r4, r2
   2b056:	4698      	mov	r8, r3
	size_t count = 0;
   2b058:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   2b05a:	e006      	b.n	2b06a <outs+0x1e>
		int rc = out((int)*sp++, ctx);
   2b05c:	4631      	mov	r1, r6
   2b05e:	f814 0b01 	ldrb.w	r0, [r4], #1
   2b062:	47b8      	blx	r7
		if (rc < 0) {
   2b064:	2800      	cmp	r0, #0
   2b066:	db09      	blt.n	2b07c <outs+0x30>
		++count;
   2b068:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   2b06a:	4544      	cmp	r4, r8
   2b06c:	d3f6      	bcc.n	2b05c <outs+0x10>
   2b06e:	f1b8 0f00 	cmp.w	r8, #0
   2b072:	d102      	bne.n	2b07a <outs+0x2e>
   2b074:	7823      	ldrb	r3, [r4, #0]
   2b076:	2b00      	cmp	r3, #0
   2b078:	d1f0      	bne.n	2b05c <outs+0x10>
	return (int)count;
   2b07a:	4628      	mov	r0, r5
}
   2b07c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002b080 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   2b080:	4040      	eors	r0, r0
   2b082:	f380 8811 	msr	BASEPRI, r0
   2b086:	f04f 0004 	mov.w	r0, #4
   2b08a:	df02      	svc	2
}
   2b08c:	4770      	bx	lr

0002b08e <assert_print>:

void assert_print(const char *fmt, ...)
{
   2b08e:	b40f      	push	{r0, r1, r2, r3}
   2b090:	b500      	push	{lr}
   2b092:	b083      	sub	sp, #12
   2b094:	a904      	add	r1, sp, #16
   2b096:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   2b09a:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   2b09c:	f7e7 ff2e 	bl	12efc <vprintk>

	va_end(ap);
}
   2b0a0:	b003      	add	sp, #12
   2b0a2:	f85d eb04 	ldr.w	lr, [sp], #4
   2b0a6:	b004      	add	sp, #16
   2b0a8:	4770      	bx	lr

0002b0aa <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_LBS_SECURITY_ENABLED, 1);

GEN_ABS_SYM_END
   2b0aa:	4770      	bx	lr

0002b0ac <z_log_minimal_printk>:
{
   2b0ac:	b40f      	push	{r0, r1, r2, r3}
   2b0ae:	b500      	push	{lr}
   2b0b0:	b083      	sub	sp, #12
   2b0b2:	a904      	add	r1, sp, #16
   2b0b4:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   2b0b8:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   2b0ba:	f7e7 ff1f 	bl	12efc <vprintk>
}
   2b0be:	b003      	add	sp, #12
   2b0c0:	f85d eb04 	ldr.w	lr, [sp], #4
   2b0c4:	b004      	add	sp, #16
   2b0c6:	4770      	bx	lr

0002b0c8 <nvs_flash_rd>:
{
   2b0c8:	b510      	push	{r4, lr}
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2b0ca:	f8b0 c00c 	ldrh.w	ip, [r0, #12]
   2b0ce:	0c0c      	lsrs	r4, r1, #16
   2b0d0:	f8d0 e000 	ldr.w	lr, [r0]
   2b0d4:	fb04 ec0c 	mla	ip, r4, ip, lr
	offset += addr & ADDR_OFFS_MASK;
   2b0d8:	fa1c f181 	uxtah	r1, ip, r1
	rc = flash_read(fs->flash_device, offset, data, len);
   2b0dc:	6a80      	ldr	r0, [r0, #40]	; 0x28
	const struct flash_driver_api *api =
   2b0de:	6884      	ldr	r4, [r0, #8]
	return api->read(dev, offset, data, len);
   2b0e0:	6824      	ldr	r4, [r4, #0]
   2b0e2:	47a0      	blx	r4
}
   2b0e4:	bd10      	pop	{r4, pc}

0002b0e6 <nvs_flash_ate_rd>:
{
   2b0e6:	b508      	push	{r3, lr}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2b0e8:	2308      	movs	r3, #8
   2b0ea:	f7ff ffed 	bl	2b0c8 <nvs_flash_rd>
}
   2b0ee:	bd08      	pop	{r3, pc}

0002b0f0 <nvs_ate_cmp_const>:
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   2b0f0:	2300      	movs	r3, #0
   2b0f2:	2b07      	cmp	r3, #7
   2b0f4:	d804      	bhi.n	2b100 <nvs_ate_cmp_const+0x10>
		if (data8[i] != value) {
   2b0f6:	5cc2      	ldrb	r2, [r0, r3]
   2b0f8:	428a      	cmp	r2, r1
   2b0fa:	d103      	bne.n	2b104 <nvs_ate_cmp_const+0x14>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   2b0fc:	3301      	adds	r3, #1
   2b0fe:	e7f8      	b.n	2b0f2 <nvs_ate_cmp_const+0x2>
	return 0;
   2b100:	2000      	movs	r0, #0
   2b102:	4770      	bx	lr
			return 1;
   2b104:	2001      	movs	r0, #1
}
   2b106:	4770      	bx	lr

0002b108 <nvs_sector_advance>:
	*addr += (1 << ADDR_SECT_SHIFT);
   2b108:	680b      	ldr	r3, [r1, #0]
   2b10a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   2b10e:	600b      	str	r3, [r1, #0]
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   2b110:	89c2      	ldrh	r2, [r0, #14]
   2b112:	ebb2 4f13 	cmp.w	r2, r3, lsr #16
   2b116:	d000      	beq.n	2b11a <nvs_sector_advance+0x12>
}
   2b118:	4770      	bx	lr
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   2b11a:	eba3 4302 	sub.w	r3, r3, r2, lsl #16
   2b11e:	600b      	str	r3, [r1, #0]
}
   2b120:	e7fa      	b.n	2b118 <nvs_sector_advance+0x10>

0002b122 <nvs_flash_block_cmp>:
{
   2b122:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2b126:	b089      	sub	sp, #36	; 0x24
   2b128:	4681      	mov	r9, r0
   2b12a:	460e      	mov	r6, r1
   2b12c:	4617      	mov	r7, r2
   2b12e:	461d      	mov	r5, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2b130:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2b132:	681b      	ldr	r3, [r3, #0]
   2b134:	f1c3 0800 	rsb	r8, r3, #0
	block_size =
   2b138:	f008 0820 	and.w	r8, r8, #32
	while (len) {
   2b13c:	e002      	b.n	2b144 <nvs_flash_block_cmp+0x22>
		len -= bytes_to_cmp;
   2b13e:	1b2d      	subs	r5, r5, r4
		addr += bytes_to_cmp;
   2b140:	4426      	add	r6, r4
		data8 += bytes_to_cmp;
   2b142:	4427      	add	r7, r4
	while (len) {
   2b144:	b1a5      	cbz	r5, 2b170 <nvs_flash_block_cmp+0x4e>
		bytes_to_cmp = MIN(block_size, len);
   2b146:	462c      	mov	r4, r5
   2b148:	4545      	cmp	r5, r8
   2b14a:	bf28      	it	cs
   2b14c:	4644      	movcs	r4, r8
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   2b14e:	4623      	mov	r3, r4
   2b150:	466a      	mov	r2, sp
   2b152:	4631      	mov	r1, r6
   2b154:	4648      	mov	r0, r9
   2b156:	f7ff ffb7 	bl	2b0c8 <nvs_flash_rd>
		if (rc) {
   2b15a:	4603      	mov	r3, r0
   2b15c:	b948      	cbnz	r0, 2b172 <nvs_flash_block_cmp+0x50>
		rc = memcmp(data8, buf, bytes_to_cmp);
   2b15e:	4622      	mov	r2, r4
   2b160:	4669      	mov	r1, sp
   2b162:	4638      	mov	r0, r7
   2b164:	f005 fdc8 	bl	30cf8 <memcmp>
		if (rc) {
   2b168:	2800      	cmp	r0, #0
   2b16a:	d0e8      	beq.n	2b13e <nvs_flash_block_cmp+0x1c>
			return 1;
   2b16c:	2301      	movs	r3, #1
   2b16e:	e000      	b.n	2b172 <nvs_flash_block_cmp+0x50>
	return 0;
   2b170:	2300      	movs	r3, #0
}
   2b172:	4618      	mov	r0, r3
   2b174:	b009      	add	sp, #36	; 0x24
   2b176:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0002b17a <nvs_flash_cmp_const>:
{
   2b17a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b17e:	b088      	sub	sp, #32
   2b180:	4680      	mov	r8, r0
   2b182:	460e      	mov	r6, r1
   2b184:	4611      	mov	r1, r2
   2b186:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2b188:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2b18a:	681f      	ldr	r7, [r3, #0]
   2b18c:	427f      	negs	r7, r7
	block_size =
   2b18e:	f007 0720 	and.w	r7, r7, #32
	(void)memset(cmp, value, block_size);
   2b192:	2320      	movs	r3, #32
   2b194:	463a      	mov	r2, r7
   2b196:	4668      	mov	r0, sp
   2b198:	f005 fde7 	bl	30d6a <__memset_chk>
   2b19c:	e001      	b.n	2b1a2 <nvs_flash_cmp_const+0x28>
		len -= bytes_to_cmp;
   2b19e:	1b64      	subs	r4, r4, r5
		addr += bytes_to_cmp;
   2b1a0:	442e      	add	r6, r5
	while (len) {
   2b1a2:	b16c      	cbz	r4, 2b1c0 <nvs_flash_cmp_const+0x46>
		bytes_to_cmp = MIN(block_size, len);
   2b1a4:	4625      	mov	r5, r4
   2b1a6:	42bc      	cmp	r4, r7
   2b1a8:	bf28      	it	cs
   2b1aa:	463d      	movcs	r5, r7
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   2b1ac:	462b      	mov	r3, r5
   2b1ae:	466a      	mov	r2, sp
   2b1b0:	4631      	mov	r1, r6
   2b1b2:	4640      	mov	r0, r8
   2b1b4:	f7ff ffb5 	bl	2b122 <nvs_flash_block_cmp>
		if (rc) {
   2b1b8:	4603      	mov	r3, r0
   2b1ba:	2800      	cmp	r0, #0
   2b1bc:	d0ef      	beq.n	2b19e <nvs_flash_cmp_const+0x24>
   2b1be:	e000      	b.n	2b1c2 <nvs_flash_cmp_const+0x48>
	return 0;
   2b1c0:	2300      	movs	r3, #0
}
   2b1c2:	4618      	mov	r0, r3
   2b1c4:	b008      	add	sp, #32
   2b1c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002b1ca <nvs_flash_erase_sector>:
{
   2b1ca:	b570      	push	{r4, r5, r6, lr}
   2b1cc:	4604      	mov	r4, r0
	addr &= ADDR_SECT_MASK;
   2b1ce:	0c0d      	lsrs	r5, r1, #16
	offset = fs->offset;
   2b1d0:	6803      	ldr	r3, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2b1d2:	8982      	ldrh	r2, [r0, #12]
   2b1d4:	0c09      	lsrs	r1, r1, #16
   2b1d6:	fb01 3102 	mla	r1, r1, r2, r3
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   2b1da:	6a80      	ldr	r0, [r0, #40]	; 0x28
	const struct flash_driver_api *api =
   2b1dc:	6883      	ldr	r3, [r0, #8]
	rc = api->erase(dev, offset, size);
   2b1de:	689b      	ldr	r3, [r3, #8]
   2b1e0:	4798      	blx	r3
	if (rc) {
   2b1e2:	4606      	mov	r6, r0
   2b1e4:	b108      	cbz	r0, 2b1ea <nvs_flash_erase_sector+0x20>
}
   2b1e6:	4630      	mov	r0, r6
   2b1e8:	bd70      	pop	{r4, r5, r6, pc}
   2b1ea:	042d      	lsls	r5, r5, #16
	if (nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   2b1ec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   2b1ee:	89a3      	ldrh	r3, [r4, #12]
   2b1f0:	7912      	ldrb	r2, [r2, #4]
   2b1f2:	4629      	mov	r1, r5
   2b1f4:	4620      	mov	r0, r4
   2b1f6:	f7ff ffc0 	bl	2b17a <nvs_flash_cmp_const>
   2b1fa:	2800      	cmp	r0, #0
   2b1fc:	d0f3      	beq.n	2b1e6 <nvs_flash_erase_sector+0x1c>
		rc = -ENXIO;
   2b1fe:	f06f 0605 	mvn.w	r6, #5
   2b202:	e7f0      	b.n	2b1e6 <nvs_flash_erase_sector+0x1c>

0002b204 <nvs_ate_crc8_check>:
{
   2b204:	b510      	push	{r4, lr}
   2b206:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2b208:	2207      	movs	r2, #7
   2b20a:	4601      	mov	r1, r0
   2b20c:	20ff      	movs	r0, #255	; 0xff
   2b20e:	f7e7 fdf3 	bl	12df8 <crc8_ccitt>
	if (crc8 == entry->crc8) {
   2b212:	79e3      	ldrb	r3, [r4, #7]
   2b214:	4283      	cmp	r3, r0
   2b216:	d001      	beq.n	2b21c <nvs_ate_crc8_check+0x18>
	return 1;
   2b218:	2001      	movs	r0, #1
}
   2b21a:	bd10      	pop	{r4, pc}
		return 0;
   2b21c:	2000      	movs	r0, #0
   2b21e:	e7fc      	b.n	2b21a <nvs_ate_crc8_check+0x16>

0002b220 <nvs_ate_valid>:
{
   2b220:	b570      	push	{r4, r5, r6, lr}
   2b222:	4604      	mov	r4, r0
   2b224:	460d      	mov	r5, r1
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   2b226:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2b228:	681b      	ldr	r3, [r3, #0]
   2b22a:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
   2b22c:	2a01      	cmp	r2, #1
   2b22e:	d90d      	bls.n	2b24c <nvs_ate_valid+0x2c>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   2b230:	1dd6      	adds	r6, r2, #7
   2b232:	4253      	negs	r3, r2
   2b234:	401e      	ands	r6, r3
	if ((nvs_ate_crc8_check(entry)) ||
   2b236:	4628      	mov	r0, r5
   2b238:	f7ff ffe4 	bl	2b204 <nvs_ate_crc8_check>
   2b23c:	b940      	cbnz	r0, 2b250 <nvs_ate_valid+0x30>
	    (entry->offset >= (fs->sector_size - ate_size))) {
   2b23e:	886a      	ldrh	r2, [r5, #2]
   2b240:	89a3      	ldrh	r3, [r4, #12]
   2b242:	1b9b      	subs	r3, r3, r6
	if ((nvs_ate_crc8_check(entry)) ||
   2b244:	429a      	cmp	r2, r3
   2b246:	d205      	bcs.n	2b254 <nvs_ate_valid+0x34>
	return 1;
   2b248:	2001      	movs	r0, #1
}
   2b24a:	bd70      	pop	{r4, r5, r6, pc}
		return len;
   2b24c:	2608      	movs	r6, #8
   2b24e:	e7f2      	b.n	2b236 <nvs_ate_valid+0x16>
		return 0;
   2b250:	2000      	movs	r0, #0
   2b252:	e7fa      	b.n	2b24a <nvs_ate_valid+0x2a>
   2b254:	2000      	movs	r0, #0
   2b256:	e7f8      	b.n	2b24a <nvs_ate_valid+0x2a>

0002b258 <nvs_recover_last_ate>:
{
   2b258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b25c:	b082      	sub	sp, #8
   2b25e:	4606      	mov	r6, r0
   2b260:	4688      	mov	r8, r1
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   2b262:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2b264:	681f      	ldr	r7, [r3, #0]
   2b266:	b2fb      	uxtb	r3, r7
	if (write_block_size <= 1U) {
   2b268:	2b01      	cmp	r3, #1
   2b26a:	d90b      	bls.n	2b284 <nvs_recover_last_ate+0x2c>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   2b26c:	461f      	mov	r7, r3
   2b26e:	3307      	adds	r3, #7
   2b270:	427f      	negs	r7, r7
   2b272:	401f      	ands	r7, r3
	*addr -= ate_size;
   2b274:	f8d8 4000 	ldr.w	r4, [r8]
   2b278:	1be4      	subs	r4, r4, r7
   2b27a:	f8c8 4000 	str.w	r4, [r8]
	data_end_addr = *addr & ADDR_SECT_MASK;
   2b27e:	0c25      	lsrs	r5, r4, #16
   2b280:	042d      	lsls	r5, r5, #16
	while (ate_end_addr > data_end_addr) {
   2b282:	e002      	b.n	2b28a <nvs_recover_last_ate+0x32>
		return len;
   2b284:	2708      	movs	r7, #8
   2b286:	e7f5      	b.n	2b274 <nvs_recover_last_ate+0x1c>
		ate_end_addr -= ate_size;
   2b288:	1be4      	subs	r4, r4, r7
	while (ate_end_addr > data_end_addr) {
   2b28a:	42ac      	cmp	r4, r5
   2b28c:	d917      	bls.n	2b2be <nvs_recover_last_ate+0x66>
		rc = nvs_flash_ate_rd(fs, ate_end_addr, &end_ate);
   2b28e:	466a      	mov	r2, sp
   2b290:	4621      	mov	r1, r4
   2b292:	4630      	mov	r0, r6
   2b294:	f7ff ff27 	bl	2b0e6 <nvs_flash_ate_rd>
		if (rc) {
   2b298:	4603      	mov	r3, r0
   2b29a:	b988      	cbnz	r0, 2b2c0 <nvs_recover_last_ate+0x68>
		if (nvs_ate_valid(fs, &end_ate)) {
   2b29c:	4669      	mov	r1, sp
   2b29e:	4630      	mov	r0, r6
   2b2a0:	f7ff ffbe 	bl	2b220 <nvs_ate_valid>
   2b2a4:	2800      	cmp	r0, #0
   2b2a6:	d0ef      	beq.n	2b288 <nvs_recover_last_ate+0x30>
			data_end_addr &= ADDR_SECT_MASK;
   2b2a8:	0c2d      	lsrs	r5, r5, #16
   2b2aa:	042d      	lsls	r5, r5, #16
			data_end_addr += end_ate.offset + end_ate.len;
   2b2ac:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   2b2b0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   2b2b4:	4413      	add	r3, r2
   2b2b6:	441d      	add	r5, r3
			*addr = ate_end_addr;
   2b2b8:	f8c8 4000 	str.w	r4, [r8]
   2b2bc:	e7e4      	b.n	2b288 <nvs_recover_last_ate+0x30>
	return 0;
   2b2be:	2300      	movs	r3, #0
}
   2b2c0:	4618      	mov	r0, r3
   2b2c2:	b002      	add	sp, #8
   2b2c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002b2c8 <nvs_close_ate_valid>:
{
   2b2c8:	b538      	push	{r3, r4, r5, lr}
   2b2ca:	4605      	mov	r5, r0
   2b2cc:	460c      	mov	r4, r1
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
   2b2ce:	f7ff ffa7 	bl	2b220 <nvs_ate_valid>
   2b2d2:	b1e0      	cbz	r0, 2b30e <nvs_close_ate_valid+0x46>
   2b2d4:	88a3      	ldrh	r3, [r4, #4]
   2b2d6:	b9cb      	cbnz	r3, 2b30c <nvs_close_ate_valid+0x44>
	    (entry->id != 0xFFFF)) {
   2b2d8:	8822      	ldrh	r2, [r4, #0]
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
   2b2da:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2b2de:	429a      	cmp	r2, r3
   2b2e0:	d116      	bne.n	2b310 <nvs_close_ate_valid+0x48>
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   2b2e2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   2b2e4:	681b      	ldr	r3, [r3, #0]
   2b2e6:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
   2b2e8:	2a01      	cmp	r2, #1
   2b2ea:	d90d      	bls.n	2b308 <nvs_close_ate_valid+0x40>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   2b2ec:	4613      	mov	r3, r2
   2b2ee:	3207      	adds	r2, #7
   2b2f0:	425b      	negs	r3, r3
   2b2f2:	401a      	ands	r2, r3
	if ((fs->sector_size - entry->offset) % ate_size) {
   2b2f4:	89ab      	ldrh	r3, [r5, #12]
   2b2f6:	8861      	ldrh	r1, [r4, #2]
   2b2f8:	1a5b      	subs	r3, r3, r1
   2b2fa:	fbb3 f1f2 	udiv	r1, r3, r2
   2b2fe:	fb02 3311 	mls	r3, r2, r1, r3
   2b302:	b93b      	cbnz	r3, 2b314 <nvs_close_ate_valid+0x4c>
	return 1;
   2b304:	2001      	movs	r0, #1
   2b306:	e002      	b.n	2b30e <nvs_close_ate_valid+0x46>
		return len;
   2b308:	2208      	movs	r2, #8
   2b30a:	e7f3      	b.n	2b2f4 <nvs_close_ate_valid+0x2c>
		return 0;
   2b30c:	2000      	movs	r0, #0
}
   2b30e:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   2b310:	2000      	movs	r0, #0
   2b312:	e7fc      	b.n	2b30e <nvs_close_ate_valid+0x46>
		return 0;
   2b314:	2000      	movs	r0, #0
   2b316:	e7fa      	b.n	2b30e <nvs_close_ate_valid+0x46>

0002b318 <nvs_prev_ate>:
{
   2b318:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b31a:	b083      	sub	sp, #12
   2b31c:	4604      	mov	r4, r0
   2b31e:	460d      	mov	r5, r1
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   2b320:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2b322:	681b      	ldr	r3, [r3, #0]
   2b324:	b2d9      	uxtb	r1, r3
	if (write_block_size <= 1U) {
   2b326:	2901      	cmp	r1, #1
   2b328:	d92a      	bls.n	2b380 <nvs_prev_ate+0x68>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   2b32a:	1dce      	adds	r6, r1, #7
   2b32c:	424b      	negs	r3, r1
   2b32e:	401e      	ands	r6, r3
	rc = nvs_flash_ate_rd(fs, *addr, ate);
   2b330:	6829      	ldr	r1, [r5, #0]
   2b332:	4620      	mov	r0, r4
   2b334:	f7ff fed7 	bl	2b0e6 <nvs_flash_ate_rd>
	if (rc) {
   2b338:	4607      	mov	r7, r0
   2b33a:	b9f0      	cbnz	r0, 2b37a <nvs_prev_ate+0x62>
	*addr += ate_size;
   2b33c:	682a      	ldr	r2, [r5, #0]
   2b33e:	4432      	add	r2, r6
   2b340:	602a      	str	r2, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   2b342:	b291      	uxth	r1, r2
   2b344:	89a3      	ldrh	r3, [r4, #12]
   2b346:	1b9b      	subs	r3, r3, r6
   2b348:	4299      	cmp	r1, r3
   2b34a:	d116      	bne.n	2b37a <nvs_prev_ate+0x62>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   2b34c:	0c13      	lsrs	r3, r2, #16
   2b34e:	d119      	bne.n	2b384 <nvs_prev_ate+0x6c>
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   2b350:	89e3      	ldrh	r3, [r4, #14]
   2b352:	3b01      	subs	r3, #1
   2b354:	eb02 4203 	add.w	r2, r2, r3, lsl #16
   2b358:	602a      	str	r2, [r5, #0]
	rc = nvs_flash_ate_rd(fs, *addr, &close_ate);
   2b35a:	466a      	mov	r2, sp
   2b35c:	6829      	ldr	r1, [r5, #0]
   2b35e:	4620      	mov	r0, r4
   2b360:	f7ff fec1 	bl	2b0e6 <nvs_flash_ate_rd>
	if (rc) {
   2b364:	4607      	mov	r7, r0
   2b366:	b940      	cbnz	r0, 2b37a <nvs_prev_ate+0x62>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   2b368:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2b36a:	7919      	ldrb	r1, [r3, #4]
   2b36c:	4668      	mov	r0, sp
   2b36e:	f7ff febf 	bl	2b0f0 <nvs_ate_cmp_const>
	if (!rc) {
   2b372:	b958      	cbnz	r0, 2b38c <nvs_prev_ate+0x74>
		*addr = fs->ate_wra;
   2b374:	6862      	ldr	r2, [r4, #4]
   2b376:	602a      	str	r2, [r5, #0]
		return 0;
   2b378:	4607      	mov	r7, r0
}
   2b37a:	4638      	mov	r0, r7
   2b37c:	b003      	add	sp, #12
   2b37e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return len;
   2b380:	2608      	movs	r6, #8
   2b382:	e7d5      	b.n	2b330 <nvs_prev_ate+0x18>
		*addr -= (1 << ADDR_SECT_SHIFT);
   2b384:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   2b388:	602a      	str	r2, [r5, #0]
   2b38a:	e7e6      	b.n	2b35a <nvs_prev_ate+0x42>
	if (nvs_close_ate_valid(fs, &close_ate)) {
   2b38c:	4669      	mov	r1, sp
   2b38e:	4620      	mov	r0, r4
   2b390:	f7ff ff9a 	bl	2b2c8 <nvs_close_ate_valid>
   2b394:	b138      	cbz	r0, 2b3a6 <nvs_prev_ate+0x8e>
		(*addr) &= ADDR_SECT_MASK;
   2b396:	886b      	ldrh	r3, [r5, #2]
   2b398:	041b      	lsls	r3, r3, #16
   2b39a:	602b      	str	r3, [r5, #0]
		(*addr) += close_ate.offset;
   2b39c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   2b3a0:	4413      	add	r3, r2
   2b3a2:	602b      	str	r3, [r5, #0]
		return 0;
   2b3a4:	e7e9      	b.n	2b37a <nvs_prev_ate+0x62>
	return nvs_recover_last_ate(fs, addr);
   2b3a6:	4629      	mov	r1, r5
   2b3a8:	4620      	mov	r0, r4
   2b3aa:	f7ff ff55 	bl	2b258 <nvs_recover_last_ate>
   2b3ae:	4607      	mov	r7, r0
   2b3b0:	e7e3      	b.n	2b37a <nvs_prev_ate+0x62>

0002b3b2 <nvs_ate_crc8_update>:
{
   2b3b2:	b510      	push	{r4, lr}
   2b3b4:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2b3b6:	2207      	movs	r2, #7
   2b3b8:	4601      	mov	r1, r0
   2b3ba:	20ff      	movs	r0, #255	; 0xff
   2b3bc:	f7e7 fd1c 	bl	12df8 <crc8_ccitt>
	entry->crc8 = crc8;
   2b3c0:	71e0      	strb	r0, [r4, #7]
}
   2b3c2:	bd10      	pop	{r4, pc}

0002b3c4 <nvs_flash_al_wrt>:
	if (!len) {
   2b3c4:	2b00      	cmp	r3, #0
   2b3c6:	d041      	beq.n	2b44c <nvs_flash_al_wrt+0x88>
{
   2b3c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2b3cc:	b089      	sub	sp, #36	; 0x24
   2b3ce:	4605      	mov	r5, r0
   2b3d0:	4617      	mov	r7, r2
   2b3d2:	4698      	mov	r8, r3
	offset = fs->offset;
   2b3d4:	6804      	ldr	r4, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2b3d6:	8983      	ldrh	r3, [r0, #12]
   2b3d8:	0c0a      	lsrs	r2, r1, #16
   2b3da:	fb02 4403 	mla	r4, r2, r3, r4
	offset += addr & ADDR_OFFS_MASK;
   2b3de:	fa14 f481 	uxtah	r4, r4, r1
   2b3e2:	46a1      	mov	r9, r4
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   2b3e4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2b3e6:	681b      	ldr	r3, [r3, #0]
   2b3e8:	425b      	negs	r3, r3
	if (blen > 0) {
   2b3ea:	ea13 0608 	ands.w	r6, r3, r8
   2b3ee:	d00e      	beq.n	2b40e <nvs_flash_al_wrt+0x4a>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   2b3f0:	6a80      	ldr	r0, [r0, #40]	; 0x28
	const struct flash_driver_api *api =
   2b3f2:	6883      	ldr	r3, [r0, #8]
	rc = api->write(dev, offset, data, len);
   2b3f4:	f8d3 9004 	ldr.w	r9, [r3, #4]
   2b3f8:	4633      	mov	r3, r6
   2b3fa:	463a      	mov	r2, r7
   2b3fc:	4621      	mov	r1, r4
   2b3fe:	47c8      	blx	r9
		if (rc) {
   2b400:	b948      	cbnz	r0, 2b416 <nvs_flash_al_wrt+0x52>
		len -= blen;
   2b402:	eba8 0806 	sub.w	r8, r8, r6
		offset += blen;
   2b406:	eb04 0906 	add.w	r9, r4, r6
		data8 += blen;
   2b40a:	4437      	add	r7, r6
   2b40c:	e000      	b.n	2b410 <nvs_flash_al_wrt+0x4c>
	int rc = 0;
   2b40e:	2000      	movs	r0, #0
	if (len) {
   2b410:	f1b8 0f00 	cmp.w	r8, #0
   2b414:	d102      	bne.n	2b41c <nvs_flash_al_wrt+0x58>
}
   2b416:	b009      	add	sp, #36	; 0x24
   2b418:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		memcpy(buf, data8, len);
   2b41c:	2320      	movs	r3, #32
   2b41e:	4642      	mov	r2, r8
   2b420:	4639      	mov	r1, r7
   2b422:	4668      	mov	r0, sp
   2b424:	f005 fc86 	bl	30d34 <__memcpy_chk>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   2b428:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   2b42a:	681a      	ldr	r2, [r3, #0]
   2b42c:	eba2 0208 	sub.w	r2, r2, r8
   2b430:	7919      	ldrb	r1, [r3, #4]
   2b432:	eb0d 0008 	add.w	r0, sp, r8
   2b436:	f005 fc90 	bl	30d5a <memset>
		rc = flash_write(fs->flash_device, offset, buf,
   2b43a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
				 fs->flash_parameters->write_block_size);
   2b43c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
		rc = flash_write(fs->flash_device, offset, buf,
   2b43e:	681b      	ldr	r3, [r3, #0]
	const struct flash_driver_api *api =
   2b440:	6882      	ldr	r2, [r0, #8]
	rc = api->write(dev, offset, data, len);
   2b442:	6854      	ldr	r4, [r2, #4]
   2b444:	466a      	mov	r2, sp
   2b446:	4649      	mov	r1, r9
   2b448:	47a0      	blx	r4
	return rc;
   2b44a:	e7e4      	b.n	2b416 <nvs_flash_al_wrt+0x52>
		return 0;
   2b44c:	2000      	movs	r0, #0
}
   2b44e:	4770      	bx	lr

0002b450 <nvs_flash_data_wrt>:
{
   2b450:	b538      	push	{r3, r4, r5, lr}
   2b452:	4605      	mov	r5, r0
   2b454:	4614      	mov	r4, r2
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   2b456:	4613      	mov	r3, r2
   2b458:	460a      	mov	r2, r1
   2b45a:	6881      	ldr	r1, [r0, #8]
   2b45c:	f7ff ffb2 	bl	2b3c4 <nvs_flash_al_wrt>
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   2b460:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   2b462:	681b      	ldr	r3, [r3, #0]
   2b464:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
   2b466:	2a01      	cmp	r2, #1
   2b468:	d903      	bls.n	2b472 <nvs_flash_data_wrt+0x22>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   2b46a:	4414      	add	r4, r2
   2b46c:	3c01      	subs	r4, #1
   2b46e:	4253      	negs	r3, r2
   2b470:	401c      	ands	r4, r3
	fs->data_wra += nvs_al_size(fs, len);
   2b472:	68aa      	ldr	r2, [r5, #8]
   2b474:	4422      	add	r2, r4
   2b476:	60aa      	str	r2, [r5, #8]
}
   2b478:	bd38      	pop	{r3, r4, r5, pc}

0002b47a <nvs_flash_block_move>:
{
   2b47a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b47e:	b088      	sub	sp, #32
   2b480:	4607      	mov	r7, r0
   2b482:	460e      	mov	r6, r1
   2b484:	4615      	mov	r5, r2
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2b486:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2b488:	681b      	ldr	r3, [r3, #0]
   2b48a:	f1c3 0800 	rsb	r8, r3, #0
	block_size =
   2b48e:	f008 0820 	and.w	r8, r8, #32
	while (len) {
   2b492:	e001      	b.n	2b498 <nvs_flash_block_move+0x1e>
		len -= bytes_to_copy;
   2b494:	1b2d      	subs	r5, r5, r4
		addr += bytes_to_copy;
   2b496:	4426      	add	r6, r4
	while (len) {
   2b498:	b1a5      	cbz	r5, 2b4c4 <nvs_flash_block_move+0x4a>
		bytes_to_copy = MIN(block_size, len);
   2b49a:	462c      	mov	r4, r5
   2b49c:	4545      	cmp	r5, r8
   2b49e:	bf28      	it	cs
   2b4a0:	4644      	movcs	r4, r8
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
   2b4a2:	4623      	mov	r3, r4
   2b4a4:	466a      	mov	r2, sp
   2b4a6:	4631      	mov	r1, r6
   2b4a8:	4638      	mov	r0, r7
   2b4aa:	f7ff fe0d 	bl	2b0c8 <nvs_flash_rd>
		if (rc) {
   2b4ae:	4603      	mov	r3, r0
   2b4b0:	b948      	cbnz	r0, 2b4c6 <nvs_flash_block_move+0x4c>
		rc = nvs_flash_data_wrt(fs, buf, bytes_to_copy);
   2b4b2:	4622      	mov	r2, r4
   2b4b4:	4669      	mov	r1, sp
   2b4b6:	4638      	mov	r0, r7
   2b4b8:	f7ff ffca 	bl	2b450 <nvs_flash_data_wrt>
		if (rc) {
   2b4bc:	4603      	mov	r3, r0
   2b4be:	2800      	cmp	r0, #0
   2b4c0:	d0e8      	beq.n	2b494 <nvs_flash_block_move+0x1a>
   2b4c2:	e000      	b.n	2b4c6 <nvs_flash_block_move+0x4c>
	return 0;
   2b4c4:	2300      	movs	r3, #0
}
   2b4c6:	4618      	mov	r0, r3
   2b4c8:	b008      	add	sp, #32
   2b4ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002b4ce <nvs_flash_ate_wrt>:
{
   2b4ce:	b510      	push	{r4, lr}
   2b4d0:	4604      	mov	r4, r0
   2b4d2:	460a      	mov	r2, r1
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   2b4d4:	2308      	movs	r3, #8
   2b4d6:	6841      	ldr	r1, [r0, #4]
   2b4d8:	f7ff ff74 	bl	2b3c4 <nvs_flash_al_wrt>
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   2b4dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2b4de:	681b      	ldr	r3, [r3, #0]
   2b4e0:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
   2b4e2:	2a01      	cmp	r2, #1
   2b4e4:	d907      	bls.n	2b4f6 <nvs_flash_ate_wrt+0x28>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   2b4e6:	4613      	mov	r3, r2
   2b4e8:	3207      	adds	r2, #7
   2b4ea:	425b      	negs	r3, r3
   2b4ec:	4013      	ands	r3, r2
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   2b4ee:	6862      	ldr	r2, [r4, #4]
   2b4f0:	1ad2      	subs	r2, r2, r3
   2b4f2:	6062      	str	r2, [r4, #4]
}
   2b4f4:	bd10      	pop	{r4, pc}
		return len;
   2b4f6:	2308      	movs	r3, #8
   2b4f8:	e7f9      	b.n	2b4ee <nvs_flash_ate_wrt+0x20>

0002b4fa <nvs_add_gc_done_ate>:
{
   2b4fa:	b510      	push	{r4, lr}
   2b4fc:	b082      	sub	sp, #8
   2b4fe:	4604      	mov	r4, r0
	gc_done_ate.id = 0xffff;
   2b500:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2b504:	f8ad 3000 	strh.w	r3, [sp]
	gc_done_ate.len = 0U;
   2b508:	2300      	movs	r3, #0
   2b50a:	f8ad 3004 	strh.w	r3, [sp, #4]
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   2b50e:	8903      	ldrh	r3, [r0, #8]
   2b510:	f8ad 3002 	strh.w	r3, [sp, #2]
	nvs_ate_crc8_update(&gc_done_ate);
   2b514:	4668      	mov	r0, sp
   2b516:	f7ff ff4c 	bl	2b3b2 <nvs_ate_crc8_update>
	return nvs_flash_ate_wrt(fs, &gc_done_ate);
   2b51a:	4669      	mov	r1, sp
   2b51c:	4620      	mov	r0, r4
   2b51e:	f7ff ffd6 	bl	2b4ce <nvs_flash_ate_wrt>
}
   2b522:	b002      	add	sp, #8
   2b524:	bd10      	pop	{r4, pc}

0002b526 <nvs_gc>:
{
   2b526:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b52a:	b08a      	sub	sp, #40	; 0x28
   2b52c:	4604      	mov	r4, r0
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   2b52e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2b530:	681e      	ldr	r6, [r3, #0]
   2b532:	b2f3      	uxtb	r3, r6
	if (write_block_size <= 1U) {
   2b534:	2b01      	cmp	r3, #1
   2b536:	d92e      	bls.n	2b596 <nvs_gc+0x70>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   2b538:	461e      	mov	r6, r3
   2b53a:	3307      	adds	r3, #7
   2b53c:	4276      	negs	r6, r6
   2b53e:	401e      	ands	r6, r3
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   2b540:	88e3      	ldrh	r3, [r4, #6]
   2b542:	041b      	lsls	r3, r3, #16
   2b544:	9303      	str	r3, [sp, #12]
	nvs_sector_advance(fs, &sec_addr);
   2b546:	a903      	add	r1, sp, #12
   2b548:	4620      	mov	r0, r4
   2b54a:	f7ff fddd 	bl	2b108 <nvs_sector_advance>
	gc_addr = sec_addr + fs->sector_size - ate_size;
   2b54e:	89a1      	ldrh	r1, [r4, #12]
   2b550:	9b03      	ldr	r3, [sp, #12]
   2b552:	4419      	add	r1, r3
   2b554:	1b89      	subs	r1, r1, r6
   2b556:	9102      	str	r1, [sp, #8]
	rc = nvs_flash_ate_rd(fs, gc_addr, &close_ate);
   2b558:	aa08      	add	r2, sp, #32
   2b55a:	4620      	mov	r0, r4
   2b55c:	f7ff fdc3 	bl	2b0e6 <nvs_flash_ate_rd>
	if (rc < 0) {
   2b560:	1e03      	subs	r3, r0, #0
   2b562:	db14      	blt.n	2b58e <nvs_gc+0x68>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   2b564:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2b566:	7919      	ldrb	r1, [r3, #4]
   2b568:	a808      	add	r0, sp, #32
   2b56a:	f7ff fdc1 	bl	2b0f0 <nvs_ate_cmp_const>
	if (!rc) {
   2b56e:	b9a0      	cbnz	r0, 2b59a <nvs_gc+0x74>
	if (fs->ate_wra >= (fs->data_wra + ate_size)) {
   2b570:	6863      	ldr	r3, [r4, #4]
   2b572:	68a2      	ldr	r2, [r4, #8]
   2b574:	4416      	add	r6, r2
   2b576:	42b3      	cmp	r3, r6
   2b578:	d304      	bcc.n	2b584 <nvs_gc+0x5e>
		rc = nvs_add_gc_done_ate(fs);
   2b57a:	4620      	mov	r0, r4
   2b57c:	f7ff ffbd 	bl	2b4fa <nvs_add_gc_done_ate>
		if (rc) {
   2b580:	4603      	mov	r3, r0
   2b582:	b920      	cbnz	r0, 2b58e <nvs_gc+0x68>
	rc = nvs_flash_erase_sector(fs, sec_addr);
   2b584:	9903      	ldr	r1, [sp, #12]
   2b586:	4620      	mov	r0, r4
   2b588:	f7ff fe1f 	bl	2b1ca <nvs_flash_erase_sector>
   2b58c:	4603      	mov	r3, r0
}
   2b58e:	4618      	mov	r0, r3
   2b590:	b00a      	add	sp, #40	; 0x28
   2b592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return len;
   2b596:	2608      	movs	r6, #8
   2b598:	e7d2      	b.n	2b540 <nvs_gc+0x1a>
	stop_addr = gc_addr - ate_size;
   2b59a:	9b02      	ldr	r3, [sp, #8]
   2b59c:	eba3 0806 	sub.w	r8, r3, r6
	if (nvs_close_ate_valid(fs, &close_ate)) {
   2b5a0:	a908      	add	r1, sp, #32
   2b5a2:	4620      	mov	r0, r4
   2b5a4:	f7ff fe90 	bl	2b2c8 <nvs_close_ate_valid>
   2b5a8:	b140      	cbz	r0, 2b5bc <nvs_gc+0x96>
		gc_addr &= ADDR_SECT_MASK;
   2b5aa:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   2b5ae:	041b      	lsls	r3, r3, #16
   2b5b0:	9302      	str	r3, [sp, #8]
		gc_addr += close_ate.offset;
   2b5b2:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
   2b5b6:	4413      	add	r3, r2
   2b5b8:	9302      	str	r3, [sp, #8]
   2b5ba:	e023      	b.n	2b604 <nvs_gc+0xde>
		rc = nvs_recover_last_ate(fs, &gc_addr);
   2b5bc:	a902      	add	r1, sp, #8
   2b5be:	4620      	mov	r0, r4
   2b5c0:	f7ff fe4a 	bl	2b258 <nvs_recover_last_ate>
		if (rc) {
   2b5c4:	4603      	mov	r3, r0
   2b5c6:	b1e8      	cbz	r0, 2b604 <nvs_gc+0xde>
   2b5c8:	e7e1      	b.n	2b58e <nvs_gc+0x68>
		} while (wlk_addr != fs->ate_wra);
   2b5ca:	6862      	ldr	r2, [r4, #4]
   2b5cc:	9b01      	ldr	r3, [sp, #4]
   2b5ce:	429a      	cmp	r2, r3
   2b5d0:	d014      	beq.n	2b5fc <nvs_gc+0xd6>
			wlk_prev_addr = wlk_addr;
   2b5d2:	9d01      	ldr	r5, [sp, #4]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   2b5d4:	aa04      	add	r2, sp, #16
   2b5d6:	a901      	add	r1, sp, #4
   2b5d8:	4620      	mov	r0, r4
   2b5da:	f7ff fe9d 	bl	2b318 <nvs_prev_ate>
			if (rc) {
   2b5de:	4603      	mov	r3, r0
   2b5e0:	2800      	cmp	r0, #0
   2b5e2:	d1d4      	bne.n	2b58e <nvs_gc+0x68>
			if ((wlk_ate.id == gc_ate.id) &&
   2b5e4:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   2b5e8:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   2b5ec:	429a      	cmp	r2, r3
   2b5ee:	d1ec      	bne.n	2b5ca <nvs_gc+0xa4>
			    (nvs_ate_valid(fs, &wlk_ate))) {
   2b5f0:	a904      	add	r1, sp, #16
   2b5f2:	4620      	mov	r0, r4
   2b5f4:	f7ff fe14 	bl	2b220 <nvs_ate_valid>
			if ((wlk_ate.id == gc_ate.id) &&
   2b5f8:	2800      	cmp	r0, #0
   2b5fa:	d0e6      	beq.n	2b5ca <nvs_gc+0xa4>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
   2b5fc:	42bd      	cmp	r5, r7
   2b5fe:	d013      	beq.n	2b628 <nvs_gc+0x102>
	} while (gc_prev_addr != stop_addr);
   2b600:	4547      	cmp	r7, r8
   2b602:	d0b5      	beq.n	2b570 <nvs_gc+0x4a>
		gc_prev_addr = gc_addr;
   2b604:	9f02      	ldr	r7, [sp, #8]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   2b606:	aa06      	add	r2, sp, #24
   2b608:	a902      	add	r1, sp, #8
   2b60a:	4620      	mov	r0, r4
   2b60c:	f7ff fe84 	bl	2b318 <nvs_prev_ate>
		if (rc) {
   2b610:	4603      	mov	r3, r0
   2b612:	2800      	cmp	r0, #0
   2b614:	d1bb      	bne.n	2b58e <nvs_gc+0x68>
		if (!nvs_ate_valid(fs, &gc_ate)) {
   2b616:	a906      	add	r1, sp, #24
   2b618:	4620      	mov	r0, r4
   2b61a:	f7ff fe01 	bl	2b220 <nvs_ate_valid>
   2b61e:	2800      	cmp	r0, #0
   2b620:	d0ee      	beq.n	2b600 <nvs_gc+0xda>
		wlk_addr = fs->ate_wra;
   2b622:	6863      	ldr	r3, [r4, #4]
   2b624:	9301      	str	r3, [sp, #4]
   2b626:	e7d4      	b.n	2b5d2 <nvs_gc+0xac>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
   2b628:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   2b62c:	2b00      	cmp	r3, #0
   2b62e:	d0e7      	beq.n	2b600 <nvs_gc+0xda>
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
   2b630:	0c3b      	lsrs	r3, r7, #16
   2b632:	041b      	lsls	r3, r3, #16
			data_addr += gc_ate.offset;
   2b634:	f8bd 501a 	ldrh.w	r5, [sp, #26]
   2b638:	441d      	add	r5, r3
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   2b63a:	8923      	ldrh	r3, [r4, #8]
   2b63c:	f8ad 301a 	strh.w	r3, [sp, #26]
			nvs_ate_crc8_update(&gc_ate);
   2b640:	a806      	add	r0, sp, #24
   2b642:	f7ff feb6 	bl	2b3b2 <nvs_ate_crc8_update>
			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
   2b646:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   2b64a:	4629      	mov	r1, r5
   2b64c:	4620      	mov	r0, r4
   2b64e:	f7ff ff14 	bl	2b47a <nvs_flash_block_move>
			if (rc) {
   2b652:	4603      	mov	r3, r0
   2b654:	2800      	cmp	r0, #0
   2b656:	d19a      	bne.n	2b58e <nvs_gc+0x68>
			rc = nvs_flash_ate_wrt(fs, &gc_ate);
   2b658:	a906      	add	r1, sp, #24
   2b65a:	4620      	mov	r0, r4
   2b65c:	f7ff ff37 	bl	2b4ce <nvs_flash_ate_wrt>
			if (rc) {
   2b660:	4603      	mov	r3, r0
   2b662:	2800      	cmp	r0, #0
   2b664:	d0cc      	beq.n	2b600 <nvs_gc+0xda>
   2b666:	e792      	b.n	2b58e <nvs_gc+0x68>

0002b668 <nvs_flash_wrt_entry>:
{
   2b668:	b570      	push	{r4, r5, r6, lr}
   2b66a:	b082      	sub	sp, #8
   2b66c:	4604      	mov	r4, r0
   2b66e:	4616      	mov	r6, r2
   2b670:	461d      	mov	r5, r3
	entry.id = id;
   2b672:	f8ad 1000 	strh.w	r1, [sp]
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   2b676:	8903      	ldrh	r3, [r0, #8]
   2b678:	f8ad 3002 	strh.w	r3, [sp, #2]
	entry.len = (uint16_t)len;
   2b67c:	f8ad 5004 	strh.w	r5, [sp, #4]
	entry.part = 0xff;
   2b680:	23ff      	movs	r3, #255	; 0xff
   2b682:	f88d 3006 	strb.w	r3, [sp, #6]
	nvs_ate_crc8_update(&entry);
   2b686:	4668      	mov	r0, sp
   2b688:	f7ff fe93 	bl	2b3b2 <nvs_ate_crc8_update>
	rc = nvs_flash_data_wrt(fs, data, len);
   2b68c:	462a      	mov	r2, r5
   2b68e:	4631      	mov	r1, r6
   2b690:	4620      	mov	r0, r4
   2b692:	f7ff fedd 	bl	2b450 <nvs_flash_data_wrt>
	if (rc) {
   2b696:	b108      	cbz	r0, 2b69c <nvs_flash_wrt_entry+0x34>
}
   2b698:	b002      	add	sp, #8
   2b69a:	bd70      	pop	{r4, r5, r6, pc}
	rc = nvs_flash_ate_wrt(fs, &entry);
   2b69c:	4669      	mov	r1, sp
   2b69e:	4620      	mov	r0, r4
   2b6a0:	f7ff ff15 	bl	2b4ce <nvs_flash_ate_wrt>
	if (rc) {
   2b6a4:	e7f8      	b.n	2b698 <nvs_flash_wrt_entry+0x30>

0002b6a6 <nvs_sector_close>:
{
   2b6a6:	b530      	push	{r4, r5, lr}
   2b6a8:	b083      	sub	sp, #12
   2b6aa:	4604      	mov	r4, r0
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   2b6ac:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2b6ae:	681b      	ldr	r3, [r3, #0]
   2b6b0:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
   2b6b2:	2a01      	cmp	r2, #1
   2b6b4:	d926      	bls.n	2b704 <nvs_sector_close+0x5e>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   2b6b6:	4613      	mov	r3, r2
   2b6b8:	3207      	adds	r2, #7
   2b6ba:	425b      	negs	r3, r3
   2b6bc:	401a      	ands	r2, r3
	close_ate.id = 0xFFFF;
   2b6be:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2b6c2:	f8ad 3000 	strh.w	r3, [sp]
	close_ate.len = 0U;
   2b6c6:	2500      	movs	r5, #0
   2b6c8:	f8ad 5004 	strh.w	r5, [sp, #4]
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
   2b6cc:	6863      	ldr	r3, [r4, #4]
   2b6ce:	1899      	adds	r1, r3, r2
   2b6d0:	f8ad 1002 	strh.w	r1, [sp, #2]
	fs->ate_wra &= ADDR_SECT_MASK;
   2b6d4:	0c1b      	lsrs	r3, r3, #16
   2b6d6:	041b      	lsls	r3, r3, #16
   2b6d8:	6063      	str	r3, [r4, #4]
	fs->ate_wra += (fs->sector_size - ate_size);
   2b6da:	89a1      	ldrh	r1, [r4, #12]
   2b6dc:	1a8a      	subs	r2, r1, r2
   2b6de:	4413      	add	r3, r2
   2b6e0:	6063      	str	r3, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
   2b6e2:	4668      	mov	r0, sp
   2b6e4:	f7ff fe65 	bl	2b3b2 <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
   2b6e8:	4669      	mov	r1, sp
   2b6ea:	4620      	mov	r0, r4
   2b6ec:	f7ff feef 	bl	2b4ce <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
   2b6f0:	1d21      	adds	r1, r4, #4
   2b6f2:	4620      	mov	r0, r4
   2b6f4:	f7ff fd08 	bl	2b108 <nvs_sector_advance>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   2b6f8:	88e3      	ldrh	r3, [r4, #6]
   2b6fa:	041b      	lsls	r3, r3, #16
   2b6fc:	60a3      	str	r3, [r4, #8]
}
   2b6fe:	4628      	mov	r0, r5
   2b700:	b003      	add	sp, #12
   2b702:	bd30      	pop	{r4, r5, pc}
		return len;
   2b704:	2208      	movs	r2, #8
   2b706:	e7da      	b.n	2b6be <nvs_sector_close+0x18>

0002b708 <nvs_delete>:
{
   2b708:	b508      	push	{r3, lr}
	return nvs_write(fs, id, NULL, 0);
   2b70a:	2300      	movs	r3, #0
   2b70c:	461a      	mov	r2, r3
   2b70e:	f7e8 ff83 	bl	14618 <nvs_write>
}
   2b712:	bd08      	pop	{r3, pc}

0002b714 <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   2b714:	b510      	push	{r4, lr}
   2b716:	b082      	sub	sp, #8
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   2b718:	2400      	movs	r4, #0
   2b71a:	9400      	str	r4, [sp, #0]
   2b71c:	f7e9 f834 	bl	14788 <nvs_read_hist>
	return rc;
}
   2b720:	b002      	add	sp, #8
   2b722:	bd10      	pop	{r4, pc}

0002b724 <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
   2b724:	4770      	bx	lr

0002b726 <should_bail>:
	if (info->start_offset < data->area_off) {
   2b726:	6800      	ldr	r0, [r0, #0]
   2b728:	684b      	ldr	r3, [r1, #4]
   2b72a:	4298      	cmp	r0, r3
   2b72c:	d30a      	bcc.n	2b744 <should_bail+0x1e>
	} else if (info->start_offset >= data->area_off + data->area_len) {
   2b72e:	f8d1 c008 	ldr.w	ip, [r1, #8]
   2b732:	4463      	add	r3, ip
   2b734:	4298      	cmp	r0, r3
   2b736:	d208      	bcs.n	2b74a <should_bail+0x24>
	} else if (data->ret_idx >= data->ret_len) {
   2b738:	6908      	ldr	r0, [r1, #16]
   2b73a:	694b      	ldr	r3, [r1, #20]
   2b73c:	4298      	cmp	r0, r3
   2b73e:	d208      	bcs.n	2b752 <should_bail+0x2c>
	return false;
   2b740:	2000      	movs	r0, #0
}
   2b742:	4770      	bx	lr
		*bail_value = true;
   2b744:	2001      	movs	r0, #1
   2b746:	7010      	strb	r0, [r2, #0]
		return true;
   2b748:	4770      	bx	lr
		*bail_value = false;
   2b74a:	2300      	movs	r3, #0
   2b74c:	7013      	strb	r3, [r2, #0]
		return true;
   2b74e:	2001      	movs	r0, #1
   2b750:	4770      	bx	lr
		data->status = -ENOMEM;
   2b752:	f06f 030b 	mvn.w	r3, #11
   2b756:	618b      	str	r3, [r1, #24]
		*bail_value = false;
   2b758:	2300      	movs	r3, #0
   2b75a:	7013      	strb	r3, [r2, #0]
		return true;
   2b75c:	2001      	movs	r0, #1
   2b75e:	4770      	bx	lr

0002b760 <get_sectors_cb>:
{
   2b760:	b570      	push	{r4, r5, r6, lr}
   2b762:	b082      	sub	sp, #8
   2b764:	4605      	mov	r5, r0
   2b766:	460c      	mov	r4, r1
	struct flash_sector *ret = data->ret;
   2b768:	68ce      	ldr	r6, [r1, #12]
	if (should_bail(info, data, &bail)) {
   2b76a:	f10d 0207 	add.w	r2, sp, #7
   2b76e:	f7ff ffda 	bl	2b726 <should_bail>
   2b772:	b980      	cbnz	r0, 2b796 <get_sectors_cb+0x36>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   2b774:	682b      	ldr	r3, [r5, #0]
   2b776:	6861      	ldr	r1, [r4, #4]
   2b778:	6922      	ldr	r2, [r4, #16]
   2b77a:	1a5b      	subs	r3, r3, r1
   2b77c:	f846 3032 	str.w	r3, [r6, r2, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   2b780:	6923      	ldr	r3, [r4, #16]
   2b782:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
   2b786:	686b      	ldr	r3, [r5, #4]
   2b788:	6073      	str	r3, [r6, #4]
	data->ret_idx++;
   2b78a:	6923      	ldr	r3, [r4, #16]
   2b78c:	3301      	adds	r3, #1
   2b78e:	6123      	str	r3, [r4, #16]
	return true;
   2b790:	2001      	movs	r0, #1
}
   2b792:	b002      	add	sp, #8
   2b794:	bd70      	pop	{r4, r5, r6, pc}
		return bail;
   2b796:	f89d 0007 	ldrb.w	r0, [sp, #7]
   2b79a:	e7fa      	b.n	2b792 <get_sectors_cb+0x32>

0002b79c <flash_area_layout>:
{
   2b79c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b7a0:	b082      	sub	sp, #8
   2b7a2:	4605      	mov	r5, r0
   2b7a4:	460e      	mov	r6, r1
   2b7a6:	4690      	mov	r8, r2
   2b7a8:	461f      	mov	r7, r3
   2b7aa:	9c08      	ldr	r4, [sp, #32]
	int rc = flash_area_open(idx, &fa);
   2b7ac:	a901      	add	r1, sp, #4
   2b7ae:	b2c0      	uxtb	r0, r0
   2b7b0:	f7e9 f85a 	bl	14868 <flash_area_open>
	if (rc < 0 || fa == NULL) {
   2b7b4:	2800      	cmp	r0, #0
   2b7b6:	db1f      	blt.n	2b7f8 <flash_area_layout+0x5c>
   2b7b8:	9b01      	ldr	r3, [sp, #4]
   2b7ba:	b303      	cbz	r3, 2b7fe <flash_area_layout+0x62>
	cb_data->area_idx = idx;
   2b7bc:	6025      	str	r5, [r4, #0]
	cb_data->area_off = fa->fa_off;
   2b7be:	9801      	ldr	r0, [sp, #4]
   2b7c0:	6843      	ldr	r3, [r0, #4]
   2b7c2:	6063      	str	r3, [r4, #4]
	cb_data->area_len = fa->fa_size;
   2b7c4:	6883      	ldr	r3, [r0, #8]
   2b7c6:	60a3      	str	r3, [r4, #8]
	cb_data->ret = ret;
   2b7c8:	f8c4 800c 	str.w	r8, [r4, #12]
	cb_data->ret_idx = 0U;
   2b7cc:	2200      	movs	r2, #0
   2b7ce:	6122      	str	r2, [r4, #16]
	cb_data->ret_len = *cnt;
   2b7d0:	6833      	ldr	r3, [r6, #0]
   2b7d2:	6163      	str	r3, [r4, #20]
	cb_data->status = 0;
   2b7d4:	61a2      	str	r2, [r4, #24]
	flash_dev = fa->fa_dev;
   2b7d6:	68c5      	ldr	r5, [r0, #12]
	flash_area_close(fa);
   2b7d8:	f7ff ffa4 	bl	2b724 <flash_area_close>
	if (flash_dev == NULL) {
   2b7dc:	b195      	cbz	r5, 2b804 <flash_area_layout+0x68>
	flash_page_foreach(flash_dev, cb, cb_data);
   2b7de:	4622      	mov	r2, r4
   2b7e0:	4639      	mov	r1, r7
   2b7e2:	4628      	mov	r0, r5
   2b7e4:	f003 ff1e 	bl	2f624 <flash_page_foreach>
	if (cb_data->status == 0) {
   2b7e8:	69a3      	ldr	r3, [r4, #24]
   2b7ea:	b90b      	cbnz	r3, 2b7f0 <flash_area_layout+0x54>
		*cnt = cb_data->ret_idx;
   2b7ec:	6923      	ldr	r3, [r4, #16]
   2b7ee:	6033      	str	r3, [r6, #0]
	return cb_data->status;
   2b7f0:	69a0      	ldr	r0, [r4, #24]
}
   2b7f2:	b002      	add	sp, #8
   2b7f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EINVAL;
   2b7f8:	f06f 0015 	mvn.w	r0, #21
   2b7fc:	e7f9      	b.n	2b7f2 <flash_area_layout+0x56>
   2b7fe:	f06f 0015 	mvn.w	r0, #21
   2b802:	e7f6      	b.n	2b7f2 <flash_area_layout+0x56>
		return -ENODEV;
   2b804:	f06f 0012 	mvn.w	r0, #18
   2b808:	e7f3      	b.n	2b7f2 <flash_area_layout+0x56>

0002b80a <settings_load>:
{
   2b80a:	b508      	push	{r3, lr}
	return settings_load_subtree(NULL);
   2b80c:	2000      	movs	r0, #0
   2b80e:	f7e9 f89f 	bl	14950 <settings_load_subtree>
}
   2b812:	bd08      	pop	{r3, pc}

0002b814 <settings_delete>:
{
   2b814:	b508      	push	{r3, lr}
	return settings_save_one(name, NULL, 0);
   2b816:	2200      	movs	r2, #0
   2b818:	4611      	mov	r1, r2
   2b81a:	f7e9 f85d 	bl	148d8 <settings_save_one>
}
   2b81e:	bd08      	pop	{r3, pc}

0002b820 <settings_name_steq>:
{
   2b820:	b410      	push	{r4}
	if (next) {
   2b822:	4614      	mov	r4, r2
   2b824:	b10a      	cbz	r2, 2b82a <settings_name_steq+0xa>
		*next = NULL;
   2b826:	2300      	movs	r3, #0
   2b828:	6013      	str	r3, [r2, #0]
	if ((!name) || (!key)) {
   2b82a:	b1d0      	cbz	r0, 2b862 <settings_name_steq+0x42>
   2b82c:	b919      	cbnz	r1, 2b836 <settings_name_steq+0x16>
		return 0;
   2b82e:	2000      	movs	r0, #0
   2b830:	e01a      	b.n	2b868 <settings_name_steq+0x48>
		key++;
   2b832:	3101      	adds	r1, #1
		name++;
   2b834:	3001      	adds	r0, #1
	while ((*key != '\0') && (*key == *name) &&
   2b836:	780a      	ldrb	r2, [r1, #0]
   2b838:	b12a      	cbz	r2, 2b846 <settings_name_steq+0x26>
   2b83a:	7803      	ldrb	r3, [r0, #0]
   2b83c:	429a      	cmp	r2, r3
   2b83e:	d102      	bne.n	2b846 <settings_name_steq+0x26>
   2b840:	b10b      	cbz	r3, 2b846 <settings_name_steq+0x26>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   2b842:	2b3d      	cmp	r3, #61	; 0x3d
   2b844:	d1f5      	bne.n	2b832 <settings_name_steq+0x12>
	if (*key != '\0') {
   2b846:	b972      	cbnz	r2, 2b866 <settings_name_steq+0x46>
	if (*name == SETTINGS_NAME_SEPARATOR) {
   2b848:	7803      	ldrb	r3, [r0, #0]
   2b84a:	2b2f      	cmp	r3, #47	; 0x2f
   2b84c:	d004      	beq.n	2b858 <settings_name_steq+0x38>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   2b84e:	2b3d      	cmp	r3, #61	; 0x3d
   2b850:	d00c      	beq.n	2b86c <settings_name_steq+0x4c>
   2b852:	b16b      	cbz	r3, 2b870 <settings_name_steq+0x50>
	return 0;
   2b854:	2000      	movs	r0, #0
   2b856:	e007      	b.n	2b868 <settings_name_steq+0x48>
		if (next) {
   2b858:	b10c      	cbz	r4, 2b85e <settings_name_steq+0x3e>
			*next = name + 1;
   2b85a:	3001      	adds	r0, #1
   2b85c:	6020      	str	r0, [r4, #0]
		return 1;
   2b85e:	2001      	movs	r0, #1
   2b860:	e002      	b.n	2b868 <settings_name_steq+0x48>
		return 0;
   2b862:	2000      	movs	r0, #0
   2b864:	e000      	b.n	2b868 <settings_name_steq+0x48>
		return 0;
   2b866:	2000      	movs	r0, #0
}
   2b868:	bc10      	pop	{r4}
   2b86a:	4770      	bx	lr
		return 1;
   2b86c:	2001      	movs	r0, #1
   2b86e:	e7fb      	b.n	2b868 <settings_name_steq+0x48>
   2b870:	2001      	movs	r0, #1
   2b872:	e7f9      	b.n	2b868 <settings_name_steq+0x48>

0002b874 <settings_name_next>:
{
   2b874:	b410      	push	{r4}
   2b876:	4602      	mov	r2, r0
	if (next) {
   2b878:	460c      	mov	r4, r1
   2b87a:	b109      	cbz	r1, 2b880 <settings_name_next+0xc>
		*next = NULL;
   2b87c:	2300      	movs	r3, #0
   2b87e:	600b      	str	r3, [r1, #0]
	if (!name) {
   2b880:	b192      	cbz	r2, 2b8a8 <settings_name_next+0x34>
	int rc = 0;
   2b882:	2000      	movs	r0, #0
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   2b884:	7813      	ldrb	r3, [r2, #0]
   2b886:	b133      	cbz	r3, 2b896 <settings_name_next+0x22>
   2b888:	2b3d      	cmp	r3, #61	; 0x3d
   2b88a:	d004      	beq.n	2b896 <settings_name_next+0x22>
   2b88c:	2b2f      	cmp	r3, #47	; 0x2f
   2b88e:	d002      	beq.n	2b896 <settings_name_next+0x22>
		rc++;
   2b890:	3001      	adds	r0, #1
		name++;
   2b892:	3201      	adds	r2, #1
   2b894:	e7f6      	b.n	2b884 <settings_name_next+0x10>
	if (*name == SETTINGS_NAME_SEPARATOR) {
   2b896:	2b2f      	cmp	r3, #47	; 0x2f
   2b898:	d001      	beq.n	2b89e <settings_name_next+0x2a>
}
   2b89a:	bc10      	pop	{r4}
   2b89c:	4770      	bx	lr
		if (next) {
   2b89e:	2c00      	cmp	r4, #0
   2b8a0:	d0fb      	beq.n	2b89a <settings_name_next+0x26>
			*next = name + 1;
   2b8a2:	3201      	adds	r2, #1
   2b8a4:	6022      	str	r2, [r4, #0]
		return rc;
   2b8a6:	e7f8      	b.n	2b89a <settings_name_next+0x26>
		return 0;
   2b8a8:	2000      	movs	r0, #0
   2b8aa:	e7f6      	b.n	2b89a <settings_name_next+0x26>

0002b8ac <settings_nvs_storage_get>:
static void *settings_nvs_storage_get(struct settings_store *cs)
{
	struct settings_nvs *cf = (struct settings_nvs *)cs;

	return &cf->cf_nvs;
}
   2b8ac:	3008      	adds	r0, #8
   2b8ae:	4770      	bx	lr

0002b8b0 <settings_nvs_read_fn>:
{
   2b8b0:	b510      	push	{r4, lr}
   2b8b2:	4614      	mov	r4, r2
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   2b8b4:	4613      	mov	r3, r2
   2b8b6:	460a      	mov	r2, r1
   2b8b8:	8881      	ldrh	r1, [r0, #4]
   2b8ba:	6800      	ldr	r0, [r0, #0]
   2b8bc:	f7ff ff2a 	bl	2b714 <nvs_read>
   2b8c0:	4603      	mov	r3, r0
	if (rc > (ssize_t)len) {
   2b8c2:	4620      	mov	r0, r4
   2b8c4:	429c      	cmp	r4, r3
   2b8c6:	db00      	blt.n	2b8ca <settings_nvs_read_fn+0x1a>
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   2b8c8:	4618      	mov	r0, r3
}
   2b8ca:	bd10      	pop	{r4, pc}

0002b8cc <settings_nvs_save>:
{
   2b8cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b8d0:	b097      	sub	sp, #92	; 0x5c
   2b8d2:	9300      	str	r3, [sp, #0]
	if (!name) {
   2b8d4:	2900      	cmp	r1, #0
   2b8d6:	f000 808d 	beq.w	2b9f4 <settings_nvs_save+0x128>
   2b8da:	4606      	mov	r6, r0
   2b8dc:	4692      	mov	sl, r2
   2b8de:	468b      	mov	fp, r1
	delete = ((value == NULL) || (val_len == 0));
   2b8e0:	b132      	cbz	r2, 2b8f0 <settings_nvs_save+0x24>
   2b8e2:	b93b      	cbnz	r3, 2b8f4 <settings_nvs_save+0x28>
   2b8e4:	2701      	movs	r7, #1
	name_id = cf->last_name_id + 1;
   2b8e6:	8f35      	ldrh	r5, [r6, #56]	; 0x38
   2b8e8:	3501      	adds	r5, #1
   2b8ea:	b2ad      	uxth	r5, r5
	write_name_id = cf->last_name_id + 1;
   2b8ec:	9501      	str	r5, [sp, #4]
   2b8ee:	e007      	b.n	2b900 <settings_nvs_save+0x34>
	delete = ((value == NULL) || (val_len == 0));
   2b8f0:	2701      	movs	r7, #1
   2b8f2:	e7f8      	b.n	2b8e6 <settings_nvs_save+0x1a>
   2b8f4:	2700      	movs	r7, #0
   2b8f6:	e7f6      	b.n	2b8e6 <settings_nvs_save+0x1a>
			if (rc == -ENOENT) {
   2b8f8:	f110 0f02 	cmn.w	r0, #2
   2b8fc:	d03d      	beq.n	2b97a <settings_nvs_save+0xae>
	delete = ((value == NULL) || (val_len == 0));
   2b8fe:	4625      	mov	r5, r4
		name_id--;
   2b900:	1e6c      	subs	r4, r5, #1
   2b902:	b2a4      	uxth	r4, r4
		if (name_id == NVS_NAMECNT_ID) {
   2b904:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   2b908:	d059      	beq.n	2b9be <settings_nvs_save+0xf2>
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   2b90a:	f106 0908 	add.w	r9, r6, #8
   2b90e:	234a      	movs	r3, #74	; 0x4a
   2b910:	aa03      	add	r2, sp, #12
   2b912:	4621      	mov	r1, r4
   2b914:	4648      	mov	r0, r9
   2b916:	f7ff fefd 	bl	2b714 <nvs_read>
		if (rc < 0) {
   2b91a:	2800      	cmp	r0, #0
   2b91c:	dbec      	blt.n	2b8f8 <settings_nvs_save+0x2c>
		rdname[rc] = '\0';
   2b91e:	ab16      	add	r3, sp, #88	; 0x58
   2b920:	4418      	add	r0, r3
   2b922:	2300      	movs	r3, #0
   2b924:	f800 3c4c 	strb.w	r3, [r0, #-76]
		if (strcmp(name, rdname)) {
   2b928:	a903      	add	r1, sp, #12
   2b92a:	4658      	mov	r0, fp
   2b92c:	f7e1 fbb7 	bl	d09e <strcmp>
   2b930:	4680      	mov	r8, r0
   2b932:	2800      	cmp	r0, #0
   2b934:	d1e3      	bne.n	2b8fe <settings_nvs_save+0x32>
		if ((delete) && (name_id == cf->last_name_id)) {
   2b936:	b117      	cbz	r7, 2b93e <settings_nvs_save+0x72>
   2b938:	8f33      	ldrh	r3, [r6, #56]	; 0x38
   2b93a:	42a3      	cmp	r3, r4
   2b93c:	d01f      	beq.n	2b97e <settings_nvs_save+0xb2>
		if (delete) {
   2b93e:	bb67      	cbnz	r7, 2b99a <settings_nvs_save+0xce>
		write_name = false;
   2b940:	463d      	mov	r5, r7
	if (delete) {
   2b942:	2f00      	cmp	r7, #0
   2b944:	d159      	bne.n	2b9fa <settings_nvs_save+0x12e>
	if (write_name_id == NVS_NAMECNT_ID + NVS_NAME_ID_OFFSET) {
   2b946:	f5b4 4f40 	cmp.w	r4, #49152	; 0xc000
   2b94a:	d05c      	beq.n	2ba06 <settings_nvs_save+0x13a>
	rc = nvs_write(&cf->cf_nvs, write_name_id + NVS_NAME_ID_OFFSET,
   2b94c:	f106 0708 	add.w	r7, r6, #8
   2b950:	f504 4180 	add.w	r1, r4, #16384	; 0x4000
   2b954:	9b00      	ldr	r3, [sp, #0]
   2b956:	4652      	mov	r2, sl
   2b958:	b289      	uxth	r1, r1
   2b95a:	4638      	mov	r0, r7
   2b95c:	f7e8 fe5c 	bl	14618 <nvs_write>
	if (rc < 0) {
   2b960:	f1b0 0800 	subs.w	r8, r0, #0
   2b964:	db4b      	blt.n	2b9fe <settings_nvs_save+0x132>
	if (write_name) {
   2b966:	bb6d      	cbnz	r5, 2b9c4 <settings_nvs_save+0xf8>
	if (write_name_id > cf->last_name_id) {
   2b968:	8f33      	ldrh	r3, [r6, #56]	; 0x38
   2b96a:	42a3      	cmp	r3, r4
   2b96c:	d337      	bcc.n	2b9de <settings_nvs_save+0x112>
	if (rc < 0) {
   2b96e:	f1b8 0f00 	cmp.w	r8, #0
   2b972:	db44      	blt.n	2b9fe <settings_nvs_save+0x132>
	return 0;
   2b974:	f04f 0800 	mov.w	r8, #0
   2b978:	e041      	b.n	2b9fe <settings_nvs_save+0x132>
				write_name_id = name_id;
   2b97a:	9401      	str	r4, [sp, #4]
			continue;
   2b97c:	e7bf      	b.n	2b8fe <settings_nvs_save+0x32>
			cf->last_name_id--;
   2b97e:	3b01      	subs	r3, #1
   2b980:	4632      	mov	r2, r6
   2b982:	f822 3f38 	strh.w	r3, [r2, #56]!
			rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   2b986:	2302      	movs	r3, #2
   2b988:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   2b98c:	4648      	mov	r0, r9
   2b98e:	f7e8 fe43 	bl	14618 <nvs_write>
			if (rc < 0) {
   2b992:	2800      	cmp	r0, #0
   2b994:	dad3      	bge.n	2b93e <settings_nvs_save+0x72>
				return rc;
   2b996:	4680      	mov	r8, r0
   2b998:	e031      	b.n	2b9fe <settings_nvs_save+0x132>
			rc = nvs_delete(&cf->cf_nvs, name_id);
   2b99a:	4621      	mov	r1, r4
   2b99c:	4648      	mov	r0, r9
   2b99e:	f7ff feb3 	bl	2b708 <nvs_delete>
			if (rc >= 0) {
   2b9a2:	2800      	cmp	r0, #0
   2b9a4:	da03      	bge.n	2b9ae <settings_nvs_save+0xe2>
			if (rc < 0) {
   2b9a6:	2800      	cmp	r0, #0
   2b9a8:	da29      	bge.n	2b9fe <settings_nvs_save+0x132>
				return rc;
   2b9aa:	4680      	mov	r8, r0
   2b9ac:	e027      	b.n	2b9fe <settings_nvs_save+0x132>
				rc = nvs_delete(&cf->cf_nvs, name_id +
   2b9ae:	f505 517f 	add.w	r1, r5, #16320	; 0x3fc0
   2b9b2:	313f      	adds	r1, #63	; 0x3f
   2b9b4:	b289      	uxth	r1, r1
   2b9b6:	4648      	mov	r0, r9
   2b9b8:	f7ff fea6 	bl	2b708 <nvs_delete>
   2b9bc:	e7f3      	b.n	2b9a6 <settings_nvs_save+0xda>
   2b9be:	9c01      	ldr	r4, [sp, #4]
	write_name = true;
   2b9c0:	2501      	movs	r5, #1
   2b9c2:	e7be      	b.n	2b942 <settings_nvs_save+0x76>
		rc = nvs_write(&cf->cf_nvs, write_name_id, name, strlen(name));
   2b9c4:	4658      	mov	r0, fp
   2b9c6:	f7e1 fb74 	bl	d0b2 <strlen>
   2b9ca:	4603      	mov	r3, r0
   2b9cc:	465a      	mov	r2, fp
   2b9ce:	4621      	mov	r1, r4
   2b9d0:	4638      	mov	r0, r7
   2b9d2:	f7e8 fe21 	bl	14618 <nvs_write>
		if (rc < 0) {
   2b9d6:	f1b0 0800 	subs.w	r8, r0, #0
   2b9da:	dac5      	bge.n	2b968 <settings_nvs_save+0x9c>
   2b9dc:	e00f      	b.n	2b9fe <settings_nvs_save+0x132>
		cf->last_name_id = write_name_id;
   2b9de:	4632      	mov	r2, r6
   2b9e0:	f822 4f38 	strh.w	r4, [r2, #56]!
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   2b9e4:	2302      	movs	r3, #2
   2b9e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   2b9ea:	4638      	mov	r0, r7
   2b9ec:	f7e8 fe14 	bl	14618 <nvs_write>
   2b9f0:	4680      	mov	r8, r0
   2b9f2:	e7bc      	b.n	2b96e <settings_nvs_save+0xa2>
		return -EINVAL;
   2b9f4:	f06f 0815 	mvn.w	r8, #21
   2b9f8:	e001      	b.n	2b9fe <settings_nvs_save+0x132>
		return 0;
   2b9fa:	f04f 0800 	mov.w	r8, #0
}
   2b9fe:	4640      	mov	r0, r8
   2ba00:	b017      	add	sp, #92	; 0x5c
   2ba02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOMEM;
   2ba06:	f06f 080b 	mvn.w	r8, #11
   2ba0a:	e7f8      	b.n	2b9fe <settings_nvs_save+0x132>

0002ba0c <settings_nvs_backend_init>:
{
   2ba0c:	b570      	push	{r4, r5, r6, lr}
   2ba0e:	b082      	sub	sp, #8
	cf->cf_nvs.flash_device = cf->flash_dev;
   2ba10:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   2ba12:	6303      	str	r3, [r0, #48]	; 0x30
	if (cf->cf_nvs.flash_device == NULL) {
   2ba14:	b1e3      	cbz	r3, 2ba50 <settings_nvs_backend_init+0x44>
   2ba16:	4604      	mov	r4, r0
	rc = nvs_mount(&cf->cf_nvs);
   2ba18:	f100 0508 	add.w	r5, r0, #8
   2ba1c:	4628      	mov	r0, r5
   2ba1e:	f7e8 fd83 	bl	14528 <nvs_mount>
	if (rc) {
   2ba22:	4606      	mov	r6, r0
   2ba24:	b110      	cbz	r0, 2ba2c <settings_nvs_backend_init+0x20>
}
   2ba26:	4630      	mov	r0, r6
   2ba28:	b002      	add	sp, #8
   2ba2a:	bd70      	pop	{r4, r5, r6, pc}
	rc = nvs_read(&cf->cf_nvs, NVS_NAMECNT_ID, &last_name_id,
   2ba2c:	2302      	movs	r3, #2
   2ba2e:	f10d 0206 	add.w	r2, sp, #6
   2ba32:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   2ba36:	4628      	mov	r0, r5
   2ba38:	f7ff fe6c 	bl	2b714 <nvs_read>
	if (rc < 0) {
   2ba3c:	2800      	cmp	r0, #0
   2ba3e:	db03      	blt.n	2ba48 <settings_nvs_backend_init+0x3c>
		cf->last_name_id = last_name_id;
   2ba40:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   2ba44:	8723      	strh	r3, [r4, #56]	; 0x38
   2ba46:	e7ee      	b.n	2ba26 <settings_nvs_backend_init+0x1a>
		cf->last_name_id = NVS_NAMECNT_ID;
   2ba48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   2ba4c:	8723      	strh	r3, [r4, #56]	; 0x38
   2ba4e:	e7ea      	b.n	2ba26 <settings_nvs_backend_init+0x1a>
		return -ENODEV;
   2ba50:	f06f 0612 	mvn.w	r6, #18
   2ba54:	e7e7      	b.n	2ba26 <settings_nvs_backend_init+0x1a>

0002ba56 <pm_policy_state_lock_is_active>:
			return (atomic_get(&substate_lock_t[i].lock) != 0);
		}
	}

	return false;
}
   2ba56:	2000      	movs	r0, #0
   2ba58:	4770      	bx	lr

0002ba5a <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
   2ba5a:	428b      	cmp	r3, r1
   2ba5c:	d808      	bhi.n	2ba70 <_copy+0x16>
{
   2ba5e:	b510      	push	{r4, lr}
   2ba60:	4694      	mov	ip, r2
   2ba62:	461c      	mov	r4, r3
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2ba64:	461a      	mov	r2, r3
   2ba66:	4661      	mov	r1, ip
   2ba68:	f005 f956 	bl	30d18 <memcpy>
		(void)memcpy(to, from, from_len);
		return from_len;
   2ba6c:	4620      	mov	r0, r4
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   2ba6e:	bd10      	pop	{r4, pc}
		return TC_CRYPTO_FAIL;
   2ba70:	2000      	movs	r0, #0
}
   2ba72:	4770      	bx	lr

0002ba74 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
   2ba74:	b508      	push	{r3, lr}
__ssp_bos_icheck3(memset, void *, int)
   2ba76:	f005 f970 	bl	30d5a <memset>
	(void)memset(to, val, len);
}
   2ba7a:	bd08      	pop	{r3, pc}

0002ba7c <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   2ba7c:	09c3      	lsrs	r3, r0, #7
   2ba7e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   2ba82:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   2ba86:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   2ba8a:	b2c0      	uxtb	r0, r0
   2ba8c:	4770      	bx	lr

0002ba8e <gf_double>:
 */
void gf_double(uint8_t *out, uint8_t *in)
{

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);
   2ba8e:	460b      	mov	r3, r1

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2ba90:	f913 2b0f 	ldrsb.w	r2, [r3], #15
   2ba94:	2a00      	cmp	r2, #0
   2ba96:	db04      	blt.n	2baa2 <gf_double+0x14>
   2ba98:	f04f 0c00 	mov.w	ip, #0

	out += (TC_AES_BLOCK_SIZE - 1);
   2ba9c:	f100 020f 	add.w	r2, r0, #15
   2baa0:	e006      	b.n	2bab0 <gf_double+0x22>
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2baa2:	f04f 0c87 	mov.w	ip, #135	; 0x87
   2baa6:	e7f9      	b.n	2ba9c <gf_double+0xe>
	for (;;) {
		*out-- = (*x << 1) ^ carry;
		if (x == in) {
			break;
		}
		carry = *x-- >> 7;
   2baa8:	f813 0901 	ldrb.w	r0, [r3], #-1
   2baac:	ea4f 1cd0 	mov.w	ip, r0, lsr #7
		*out-- = (*x << 1) ^ carry;
   2bab0:	7818      	ldrb	r0, [r3, #0]
   2bab2:	ea8c 0040 	eor.w	r0, ip, r0, lsl #1
   2bab6:	f802 0901 	strb.w	r0, [r2], #-1
		if (x == in) {
   2baba:	428b      	cmp	r3, r1
   2babc:	d1f4      	bne.n	2baa8 <gf_double+0x1a>
	}
}
   2babe:	4770      	bx	lr

0002bac0 <tc_cmac_erase>:
	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
	if (s == (TCCmacState_t) 0) {
   2bac0:	b130      	cbz	r0, 2bad0 <tc_cmac_erase+0x10>
{
   2bac2:	b508      	push	{r3, lr}
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   2bac4:	2258      	movs	r2, #88	; 0x58
   2bac6:	2100      	movs	r1, #0
   2bac8:	f7ff ffd4 	bl	2ba74 <_set>

	return TC_CRYPTO_SUCCESS;
   2bacc:	2001      	movs	r0, #1
}
   2bace:	bd08      	pop	{r3, pc}
		return TC_CRYPTO_FAIL;
   2bad0:	2000      	movs	r0, #0
}
   2bad2:	4770      	bx	lr

0002bad4 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2bad4:	b1a0      	cbz	r0, 2bb00 <tc_cmac_init+0x2c>
{
   2bad6:	b510      	push	{r4, lr}
   2bad8:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2bada:	2210      	movs	r2, #16
   2badc:	2100      	movs	r1, #0
   2bade:	f7ff ffc9 	bl	2ba74 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   2bae2:	2210      	movs	r2, #16
   2bae4:	2100      	movs	r1, #0
   2bae6:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2baea:	f7ff ffc3 	bl	2ba74 <_set>
	s->leftover_offset = 0;
   2baee:	2300      	movs	r3, #0
   2baf0:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   2baf2:	2200      	movs	r2, #0
   2baf4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2baf8:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
   2bafc:	2001      	movs	r0, #1
}
   2bafe:	bd10      	pop	{r4, pc}
		return TC_CRYPTO_FAIL;
   2bb00:	2000      	movs	r0, #0
}
   2bb02:	4770      	bx	lr

0002bb04 <tc_cmac_setup>:
	if (s == (TCCmacState_t) 0 ||
   2bb04:	b338      	cbz	r0, 2bb56 <tc_cmac_setup+0x52>
{
   2bb06:	b570      	push	{r4, r5, r6, lr}
   2bb08:	460d      	mov	r5, r1
   2bb0a:	4616      	mov	r6, r2
   2bb0c:	4604      	mov	r4, r0
	if (s == (TCCmacState_t) 0 ||
   2bb0e:	b321      	cbz	r1, 2bb5a <tc_cmac_setup+0x56>
	_set(s, 0, sizeof(*s));
   2bb10:	2258      	movs	r2, #88	; 0x58
   2bb12:	2100      	movs	r1, #0
   2bb14:	f7ff ffae 	bl	2ba74 <_set>
	s->sched = sched;
   2bb18:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   2bb1a:	4629      	mov	r1, r5
   2bb1c:	4630      	mov	r0, r6
   2bb1e:	f7e9 fb21 	bl	15164 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2bb22:	2210      	movs	r2, #16
   2bb24:	2100      	movs	r1, #0
   2bb26:	4620      	mov	r0, r4
   2bb28:	f7ff ffa4 	bl	2ba74 <_set>
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   2bb2c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2bb2e:	4621      	mov	r1, r4
   2bb30:	4620      	mov	r0, r4
   2bb32:	f7e9 fb79 	bl	15228 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   2bb36:	f104 0510 	add.w	r5, r4, #16
   2bb3a:	4621      	mov	r1, r4
   2bb3c:	4628      	mov	r0, r5
   2bb3e:	f7ff ffa6 	bl	2ba8e <gf_double>
	gf_double (s->K2, s->K1);
   2bb42:	4629      	mov	r1, r5
   2bb44:	f104 0020 	add.w	r0, r4, #32
   2bb48:	f7ff ffa1 	bl	2ba8e <gf_double>
	tc_cmac_init(s);
   2bb4c:	4620      	mov	r0, r4
   2bb4e:	f7ff ffc1 	bl	2bad4 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   2bb52:	2001      	movs	r0, #1
}
   2bb54:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2bb56:	2000      	movs	r0, #0
}
   2bb58:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   2bb5a:	2000      	movs	r0, #0
   2bb5c:	e7fa      	b.n	2bb54 <tc_cmac_setup+0x50>

0002bb5e <tc_cmac_update>:
int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2bb5e:	2800      	cmp	r0, #0
   2bb60:	d064      	beq.n	2bc2c <tc_cmac_update+0xce>
{
   2bb62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2bb66:	460d      	mov	r5, r1
   2bb68:	4616      	mov	r6, r2
   2bb6a:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   2bb6c:	2a00      	cmp	r2, #0
   2bb6e:	d05f      	beq.n	2bc30 <tc_cmac_update+0xd2>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   2bb70:	2900      	cmp	r1, #0
   2bb72:	d060      	beq.n	2bc36 <tc_cmac_update+0xd8>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   2bb74:	6d03      	ldr	r3, [r0, #80]	; 0x50
   2bb76:	6d42      	ldr	r2, [r0, #84]	; 0x54
   2bb78:	ea53 0102 	orrs.w	r1, r3, r2
   2bb7c:	d05d      	beq.n	2bc3a <tc_cmac_update+0xdc>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   2bb7e:	3b01      	subs	r3, #1
   2bb80:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
   2bb84:	6503      	str	r3, [r0, #80]	; 0x50
   2bb86:	6542      	str	r2, [r0, #84]	; 0x54

	if (s->leftover_offset > 0) {
   2bb88:	6c47      	ldr	r7, [r0, #68]	; 0x44
   2bb8a:	2f00      	cmp	r7, #0
   2bb8c:	d03d      	beq.n	2bc0a <tc_cmac_update+0xac>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   2bb8e:	f1c7 0810 	rsb	r8, r7, #16

		if (data_length < remaining_space) {
   2bb92:	4546      	cmp	r6, r8
   2bb94:	d30d      	bcc.n	2bbb2 <tc_cmac_update+0x54>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
			s->leftover_offset += data_length;
			return TC_CRYPTO_SUCCESS;
		}
		/* leftover block is now full; encrypt it first */
		_copy(&s->leftover[s->leftover_offset],
   2bb96:	f107 0030 	add.w	r0, r7, #48	; 0x30
   2bb9a:	4643      	mov	r3, r8
   2bb9c:	462a      	mov	r2, r5
   2bb9e:	4641      	mov	r1, r8
   2bba0:	4420      	add	r0, r4
   2bba2:	f7ff ff5a 	bl	2ba5a <_copy>
		      remaining_space,
		      data,
		      remaining_space);
		data_length -= remaining_space;
   2bba6:	3f10      	subs	r7, #16
   2bba8:	443e      	add	r6, r7
		data += remaining_space;
   2bbaa:	4445      	add	r5, r8
		s->leftover_offset = 0;
   2bbac:	2300      	movs	r3, #0
   2bbae:	6463      	str	r3, [r4, #68]	; 0x44

		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2bbb0:	e013      	b.n	2bbda <tc_cmac_update+0x7c>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2bbb2:	f107 0030 	add.w	r0, r7, #48	; 0x30
   2bbb6:	4633      	mov	r3, r6
   2bbb8:	462a      	mov	r2, r5
   2bbba:	4631      	mov	r1, r6
   2bbbc:	4420      	add	r0, r4
   2bbbe:	f7ff ff4c 	bl	2ba5a <_copy>
			s->leftover_offset += data_length;
   2bbc2:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2bbc4:	4433      	add	r3, r6
   2bbc6:	6463      	str	r3, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   2bbc8:	2001      	movs	r0, #1
   2bbca:	e032      	b.n	2bc32 <tc_cmac_update+0xd4>
			s->iv[i] ^= s->leftover[i];
   2bbcc:	18e2      	adds	r2, r4, r3
   2bbce:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   2bbd2:	5ce1      	ldrb	r1, [r4, r3]
   2bbd4:	404a      	eors	r2, r1
   2bbd6:	54e2      	strb	r2, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2bbd8:	3301      	adds	r3, #1
   2bbda:	2b0f      	cmp	r3, #15
   2bbdc:	d9f6      	bls.n	2bbcc <tc_cmac_update+0x6e>
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2bbde:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2bbe0:	4621      	mov	r1, r4
   2bbe2:	4620      	mov	r0, r4
   2bbe4:	f7e9 fb20 	bl	15228 <tc_aes_encrypt>
   2bbe8:	e00f      	b.n	2bc0a <tc_cmac_update+0xac>
	}

	/* CBC encrypt each (except the last) of the data blocks */
	while (data_length > TC_AES_BLOCK_SIZE) {
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
			s->iv[i] ^= data[i];
   2bbea:	5ce8      	ldrb	r0, [r5, r3]
   2bbec:	f814 c003 	ldrb.w	ip, [r4, r3]
   2bbf0:	ea80 000c 	eor.w	r0, r0, ip
   2bbf4:	54e0      	strb	r0, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2bbf6:	3301      	adds	r3, #1
   2bbf8:	2b0f      	cmp	r3, #15
   2bbfa:	d9f6      	bls.n	2bbea <tc_cmac_update+0x8c>
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2bbfc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2bbfe:	4621      	mov	r1, r4
   2bc00:	4620      	mov	r0, r4
   2bc02:	f7e9 fb11 	bl	15228 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   2bc06:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   2bc08:	3e10      	subs	r6, #16
	while (data_length > TC_AES_BLOCK_SIZE) {
   2bc0a:	2e10      	cmp	r6, #16
   2bc0c:	d901      	bls.n	2bc12 <tc_cmac_update+0xb4>
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2bc0e:	2300      	movs	r3, #0
   2bc10:	e7f2      	b.n	2bbf8 <tc_cmac_update+0x9a>
	}

	if (data_length > 0) {
   2bc12:	b90e      	cbnz	r6, 2bc18 <tc_cmac_update+0xba>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   2bc14:	2001      	movs	r0, #1
   2bc16:	e00c      	b.n	2bc32 <tc_cmac_update+0xd4>
		_copy(s->leftover, data_length, data, data_length);
   2bc18:	4633      	mov	r3, r6
   2bc1a:	462a      	mov	r2, r5
   2bc1c:	4631      	mov	r1, r6
   2bc1e:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2bc22:	f7ff ff1a 	bl	2ba5a <_copy>
		s->leftover_offset = data_length;
   2bc26:	6466      	str	r6, [r4, #68]	; 0x44
	return TC_CRYPTO_SUCCESS;
   2bc28:	2001      	movs	r0, #1
   2bc2a:	e002      	b.n	2bc32 <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
   2bc2c:	2000      	movs	r0, #0
}
   2bc2e:	4770      	bx	lr
		return  TC_CRYPTO_SUCCESS;
   2bc30:	2001      	movs	r0, #1
}
   2bc32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_CRYPTO_FAIL;
   2bc36:	2000      	movs	r0, #0
   2bc38:	e7fb      	b.n	2bc32 <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
   2bc3a:	2000      	movs	r0, #0
   2bc3c:	e7f9      	b.n	2bc32 <tc_cmac_update+0xd4>

0002bc3e <tc_cmac_final>:
{
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   2bc3e:	b370      	cbz	r0, 2bc9e <tc_cmac_final+0x60>
{
   2bc40:	b538      	push	{r3, r4, r5, lr}
   2bc42:	460c      	mov	r4, r1
   2bc44:	4605      	mov	r5, r0
	if (tag == (uint8_t *) 0 ||
   2bc46:	b361      	cbz	r1, 2bca2 <tc_cmac_final+0x64>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   2bc48:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   2bc4a:	2a10      	cmp	r2, #16
   2bc4c:	d102      	bne.n	2bc54 <tc_cmac_final+0x16>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   2bc4e:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2bc50:	2300      	movs	r3, #0
   2bc52:	e018      	b.n	2bc86 <tc_cmac_final+0x48>
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   2bc54:	f102 0030 	add.w	r0, r2, #48	; 0x30
   2bc58:	f1c2 0210 	rsb	r2, r2, #16
   2bc5c:	2100      	movs	r1, #0
   2bc5e:	4420      	add	r0, r4
   2bc60:	f7ff ff08 	bl	2ba74 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   2bc64:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2bc66:	4423      	add	r3, r4
   2bc68:	2280      	movs	r2, #128	; 0x80
   2bc6a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   2bc6e:	f104 0120 	add.w	r1, r4, #32
   2bc72:	e7ed      	b.n	2bc50 <tc_cmac_final+0x12>
		s->iv[i] ^= s->leftover[i] ^ k[i];
   2bc74:	18e2      	adds	r2, r4, r3
   2bc76:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   2bc7a:	5cc8      	ldrb	r0, [r1, r3]
   2bc7c:	4050      	eors	r0, r2
   2bc7e:	5ce2      	ldrb	r2, [r4, r3]
   2bc80:	4042      	eors	r2, r0
   2bc82:	54e2      	strb	r2, [r4, r3]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2bc84:	3301      	adds	r3, #1
   2bc86:	2b0f      	cmp	r3, #15
   2bc88:	d9f4      	bls.n	2bc74 <tc_cmac_final+0x36>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   2bc8a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2bc8c:	4621      	mov	r1, r4
   2bc8e:	4628      	mov	r0, r5
   2bc90:	f7e9 faca 	bl	15228 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   2bc94:	4620      	mov	r0, r4
   2bc96:	f7ff ff13 	bl	2bac0 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   2bc9a:	2001      	movs	r0, #1
}
   2bc9c:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   2bc9e:	2000      	movs	r0, #0
}
   2bca0:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   2bca2:	2000      	movs	r0, #0
   2bca4:	e7fa      	b.n	2bc9c <tc_cmac_final+0x5e>

0002bca6 <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   2bca6:	b538      	push	{r3, r4, r5, lr}
   2bca8:	4604      	mov	r4, r0

	if (esf != NULL) {
   2bcaa:	460d      	mov	r5, r1
   2bcac:	b111      	cbz	r1, 2bcb4 <z_arm_fatal_error+0xe>
		esf_dump(esf);
   2bcae:	4608      	mov	r0, r1
   2bcb0:	f7e9 fe4a 	bl	15948 <esf_dump>
	}
	z_fatal_error(reason, esf);
   2bcb4:	4629      	mov	r1, r5
   2bcb6:	4620      	mov	r0, r4
   2bcb8:	f7f9 fdcc 	bl	25854 <z_fatal_error>
}
   2bcbc:	bd38      	pop	{r3, r4, r5, pc}

0002bcbe <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   2bcbe:	b508      	push	{r3, lr}
   2bcc0:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   2bcc2:	6800      	ldr	r0, [r0, #0]
   2bcc4:	f7ff ffef 	bl	2bca6 <z_arm_fatal_error>
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
   2bcc8:	bd08      	pop	{r3, pc}

0002bcca <z_irq_spurious>:
{
   2bcca:	b508      	push	{r3, lr}
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   2bccc:	2100      	movs	r1, #0
   2bcce:	2001      	movs	r0, #1
   2bcd0:	f7ff ffe9 	bl	2bca6 <z_arm_fatal_error>
}
   2bcd4:	bd08      	pop	{r3, pc}

0002bcd6 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   2bcd6:	b508      	push	{r3, lr}
	handler();
   2bcd8:	f7e9 fecc 	bl	15a74 <z_SysNmiOnReset>
	z_arm_int_exit();
   2bcdc:	f7e9 ffba 	bl	15c54 <z_arm_exc_exit>
}
   2bce0:	bd08      	pop	{r3, pc}

0002bce2 <memory_fault_recoverable>:
}
   2bce2:	2000      	movs	r0, #0
   2bce4:	4770      	bx	lr

0002bce6 <fault_handle>:
{
   2bce6:	b508      	push	{r3, lr}
	*recoverable = false;
   2bce8:	2300      	movs	r3, #0
   2bcea:	7013      	strb	r3, [r2, #0]
	switch (fault) {
   2bcec:	1ecb      	subs	r3, r1, #3
   2bcee:	2b09      	cmp	r3, #9
   2bcf0:	d81a      	bhi.n	2bd28 <fault_handle+0x42>
   2bcf2:	e8df f003 	tbb	[pc, r3]
   2bcf6:	0905      	.short	0x0905
   2bcf8:	1919110d 	.word	0x1919110d
   2bcfc:	14191919 	.word	0x14191919
		reason = hard_fault(esf, recoverable);
   2bd00:	4611      	mov	r1, r2
   2bd02:	f7ea f949 	bl	15f98 <hard_fault>
}
   2bd06:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   2bd08:	2100      	movs	r1, #0
   2bd0a:	f7ea f89d 	bl	15e48 <mem_manage_fault>
		break;
   2bd0e:	e7fa      	b.n	2bd06 <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
   2bd10:	2100      	movs	r1, #0
   2bd12:	f7e9 ffad 	bl	15c70 <bus_fault>
		break;
   2bd16:	e7f6      	b.n	2bd06 <fault_handle+0x20>
		reason = usage_fault(esf);
   2bd18:	f7ea f81e 	bl	15d58 <usage_fault>
		break;
   2bd1c:	e7f3      	b.n	2bd06 <fault_handle+0x20>
		debug_monitor(esf, recoverable);
   2bd1e:	4611      	mov	r1, r2
   2bd20:	f7ea f874 	bl	15e0c <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   2bd24:	2000      	movs	r0, #0
		break;
   2bd26:	e7ee      	b.n	2bd06 <fault_handle+0x20>
		reserved_exception(esf, fault);
   2bd28:	f7ea f87a 	bl	15e20 <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   2bd2c:	2000      	movs	r0, #0
	return reason;
   2bd2e:	e7ea      	b.n	2bd06 <fault_handle+0x20>

0002bd30 <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
   2bd30:	6843      	ldr	r3, [r0, #4]
   2bd32:	1e5a      	subs	r2, r3, #1
		&&
   2bd34:	4213      	tst	r3, r2
   2bd36:	d106      	bne.n	2bd46 <mpu_partition_is_valid+0x16>
		&&
   2bd38:	2b1f      	cmp	r3, #31
   2bd3a:	d906      	bls.n	2bd4a <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
   2bd3c:	6803      	ldr	r3, [r0, #0]
		&&
   2bd3e:	421a      	tst	r2, r3
   2bd40:	d005      	beq.n	2bd4e <mpu_partition_is_valid+0x1e>
   2bd42:	2000      	movs	r0, #0
   2bd44:	4770      	bx	lr
   2bd46:	2000      	movs	r0, #0
   2bd48:	4770      	bx	lr
   2bd4a:	2000      	movs	r0, #0
   2bd4c:	4770      	bx	lr
   2bd4e:	2001      	movs	r0, #1
}
   2bd50:	4770      	bx	lr

0002bd52 <mpu_configure_region>:
{
   2bd52:	b500      	push	{lr}
   2bd54:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   2bd56:	680b      	ldr	r3, [r1, #0]
   2bd58:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   2bd5a:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   2bd5c:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
   2bd5e:	2b20      	cmp	r3, #32
   2bd60:	d912      	bls.n	2bd88 <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
   2bd62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   2bd66:	d811      	bhi.n	2bd8c <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   2bd68:	3b01      	subs	r3, #1
   2bd6a:	fab3 f383 	clz	r3, r3
   2bd6e:	f1c3 031f 	rsb	r3, r3, #31
   2bd72:	005b      	lsls	r3, r3, #1
   2bd74:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   2bd78:	4313      	orrs	r3, r2
   2bd7a:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
   2bd7c:	a901      	add	r1, sp, #4
   2bd7e:	f7ea fadb 	bl	16338 <region_allocate_and_init>
}
   2bd82:	b005      	add	sp, #20
   2bd84:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
   2bd88:	2308      	movs	r3, #8
   2bd8a:	e7f5      	b.n	2bd78 <mpu_configure_region+0x26>
		return REGION_4G;
   2bd8c:	233e      	movs	r3, #62	; 0x3e
   2bd8e:	e7f3      	b.n	2bd78 <mpu_configure_region+0x26>

0002bd90 <_stdout_hook_default>:
}
   2bd90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2bd94:	4770      	bx	lr

0002bd96 <_write>:
{
   2bd96:	b508      	push	{r3, lr}
   2bd98:	4608      	mov	r0, r1
   2bd9a:	4611      	mov	r1, r2
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
   2bd9c:	f7ea fbe6 	bl	1656c <z_impl_zephyr_write_stdout>
}
   2bda0:	bd08      	pop	{r3, pc}

0002bda2 <__errno>:
{
   2bda2:	b508      	push	{r3, lr}
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   2bda4:	f7f9 fd20 	bl	257e8 <z_impl_z_errno>
}
   2bda8:	bd08      	pop	{r3, pc}

0002bdaa <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   2bdaa:	2806      	cmp	r0, #6
   2bdac:	d000      	beq.n	2bdb0 <pm_state_set+0x6>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   2bdae:	4770      	bx	lr
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   2bdb0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2bdb4:	2201      	movs	r2, #1
   2bdb6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   2bdba:	f3bf 8f4f 	dsb	sy
        __WFE();
   2bdbe:	bf20      	wfe
    while (true)
   2bdc0:	e7fd      	b.n	2bdbe <pm_state_set+0x14>

0002bdc2 <pm_state_exit_post_ops>:
   2bdc2:	2300      	movs	r3, #0
   2bdc4:	f383 8811 	msr	BASEPRI, r3
   2bdc8:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   2bdcc:	4770      	bx	lr

0002bdce <internal_encrypt_le>:
}
#endif /* defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY) */

static int internal_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
			       uint8_t enc_data[16])
{
   2bdce:	b508      	push	{r3, lr}
#if defined(CONFIG_BT_CTLR) && defined(CONFIG_BT_HOST_CRYPTO) && \
    defined(CONFIG_BT_CTLR_LE_ENC)
	ecb_encrypt(key, plaintext, enc_data, NULL);
	return 0;
#else
	return bt_encrypt_le(key, plaintext, enc_data);
   2bdd0:	f7f7 f920 	bl	23014 <bt_encrypt_le>
#endif
}
   2bdd4:	bd08      	pop	{r3, pc}

0002bdd6 <ah>:

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   2bdd6:	b510      	push	{r4, lr}
   2bdd8:	b084      	sub	sp, #16
   2bdda:	4614      	mov	r4, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   2bddc:	880a      	ldrh	r2, [r1, #0]
   2bdde:	788b      	ldrb	r3, [r1, #2]
   2bde0:	f8ad 2000 	strh.w	r2, [sp]
   2bde4:	f88d 3002 	strb.w	r3, [sp, #2]
	(void)memset(res + 3, 0, 13);
   2bde8:	2300      	movs	r3, #0
   2bdea:	f8cd 3003 	str.w	r3, [sp, #3]
   2bdee:	f8cd 3007 	str.w	r3, [sp, #7]
   2bdf2:	f8cd 300b 	str.w	r3, [sp, #11]
   2bdf6:	f88d 300f 	strb.w	r3, [sp, #15]

	err = internal_encrypt_le(irk, res, res);
   2bdfa:	466a      	mov	r2, sp
   2bdfc:	4669      	mov	r1, sp
   2bdfe:	f7ff ffe6 	bl	2bdce <internal_encrypt_le>
	if (err) {
   2be02:	b928      	cbnz	r0, 2be10 <ah+0x3a>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2be04:	f8bd 2000 	ldrh.w	r2, [sp]
   2be08:	f89d 3002 	ldrb.w	r3, [sp, #2]
   2be0c:	8022      	strh	r2, [r4, #0]
   2be0e:	70a3      	strb	r3, [r4, #2]
	 * result of ah.
	 */
	memcpy(out, res, 3);

	return 0;
}
   2be10:	b004      	add	sp, #16
   2be12:	bd10      	pop	{r4, pc}

0002be14 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   2be14:	b510      	push	{r4, lr}
   2be16:	b082      	sub	sp, #8
   2be18:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   2be1a:	aa01      	add	r2, sp, #4
   2be1c:	3103      	adds	r1, #3
   2be1e:	f7ff ffda 	bl	2bdd6 <ah>
	if (err) {
   2be22:	b110      	cbz	r0, 2be2a <bt_rpa_irk_matches+0x16>
		return false;
   2be24:	2000      	movs	r0, #0
	}

	return !memcmp(addr->val, hash, 3);
}
   2be26:	b002      	add	sp, #8
   2be28:	bd10      	pop	{r4, pc}
	return !memcmp(addr->val, hash, 3);
   2be2a:	2203      	movs	r2, #3
   2be2c:	a901      	add	r1, sp, #4
   2be2e:	4620      	mov	r0, r4
   2be30:	f004 ff62 	bl	30cf8 <memcmp>
   2be34:	fab0 f080 	clz	r0, r0
   2be38:	0940      	lsrs	r0, r0, #5
   2be3a:	e7f4      	b.n	2be26 <bt_rpa_irk_matches+0x12>

0002be3c <bt_settings_decode_key>:
{
   2be3c:	b570      	push	{r4, r5, r6, lr}
   2be3e:	4605      	mov	r5, r0
   2be40:	460e      	mov	r6, r1
	if (settings_name_next(key, NULL) != 13) {
   2be42:	2100      	movs	r1, #0
   2be44:	f7ff fd16 	bl	2b874 <settings_name_next>
   2be48:	280d      	cmp	r0, #13
   2be4a:	d11b      	bne.n	2be84 <bt_settings_decode_key+0x48>
	if (key[12] == '0') {
   2be4c:	7b2b      	ldrb	r3, [r5, #12]
   2be4e:	2b30      	cmp	r3, #48	; 0x30
   2be50:	d005      	beq.n	2be5e <bt_settings_decode_key+0x22>
	} else if (key[12] == '1') {
   2be52:	2b31      	cmp	r3, #49	; 0x31
   2be54:	d119      	bne.n	2be8a <bt_settings_decode_key+0x4e>
		addr->type = BT_ADDR_LE_RANDOM;
   2be56:	2301      	movs	r3, #1
   2be58:	7033      	strb	r3, [r6, #0]
{
   2be5a:	2400      	movs	r4, #0
   2be5c:	e00e      	b.n	2be7c <bt_settings_decode_key+0x40>
		addr->type = BT_ADDR_LE_PUBLIC;
   2be5e:	2300      	movs	r3, #0
   2be60:	7033      	strb	r3, [r6, #0]
   2be62:	e7fa      	b.n	2be5a <bt_settings_decode_key+0x1e>
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   2be64:	f1c4 0205 	rsb	r2, r4, #5
   2be68:	4432      	add	r2, r6
   2be6a:	2301      	movs	r3, #1
   2be6c:	441a      	add	r2, r3
   2be6e:	2102      	movs	r1, #2
   2be70:	eb05 0044 	add.w	r0, r5, r4, lsl #1
   2be74:	f7fe fe69 	bl	2ab4a <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   2be78:	3401      	adds	r4, #1
   2be7a:	b2e4      	uxtb	r4, r4
   2be7c:	2c05      	cmp	r4, #5
   2be7e:	d9f1      	bls.n	2be64 <bt_settings_decode_key+0x28>
	return 0;
   2be80:	2000      	movs	r0, #0
}
   2be82:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2be84:	f06f 0015 	mvn.w	r0, #21
   2be88:	e7fb      	b.n	2be82 <bt_settings_decode_key+0x46>
		return -EINVAL;
   2be8a:	f06f 0015 	mvn.w	r0, #21
   2be8e:	e7f8      	b.n	2be82 <bt_settings_decode_key+0x46>

0002be90 <uuid128_cmp>:

static int uuid128_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   2be90:	b510      	push	{r4, lr}
   2be92:	b08a      	sub	sp, #40	; 0x28
   2be94:	460c      	mov	r4, r1
	struct bt_uuid_128 uuid1, uuid2;

	uuid_to_uuid128(u1, &uuid1);
   2be96:	a905      	add	r1, sp, #20
   2be98:	f7ea fdee 	bl	16a78 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   2be9c:	4669      	mov	r1, sp
   2be9e:	4620      	mov	r0, r4
   2bea0:	f7ea fdea 	bl	16a78 <uuid_to_uuid128>

	return memcmp(uuid1.val, uuid2.val, 16);
   2bea4:	2210      	movs	r2, #16
   2bea6:	f10d 0101 	add.w	r1, sp, #1
   2beaa:	f10d 0015 	add.w	r0, sp, #21
   2beae:	f004 ff23 	bl	30cf8 <memcmp>
}
   2beb2:	b00a      	add	sp, #40	; 0x28
   2beb4:	bd10      	pop	{r4, pc}

0002beb6 <bt_uuid_cmp>:

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   2beb6:	b508      	push	{r3, lr}
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   2beb8:	7803      	ldrb	r3, [r0, #0]
   2beba:	780a      	ldrb	r2, [r1, #0]
   2bebc:	4293      	cmp	r3, r2
   2bebe:	d107      	bne.n	2bed0 <bt_uuid_cmp+0x1a>
		return uuid128_cmp(u1, u2);
	}

	switch (u1->type) {
   2bec0:	2b01      	cmp	r3, #1
   2bec2:	d00c      	beq.n	2bede <bt_uuid_cmp+0x28>
   2bec4:	2b02      	cmp	r3, #2
   2bec6:	d00e      	beq.n	2bee6 <bt_uuid_cmp+0x30>
   2bec8:	b12b      	cbz	r3, 2bed6 <bt_uuid_cmp+0x20>
   2beca:	f06f 0015 	mvn.w	r0, #21
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   2bece:	bd08      	pop	{r3, pc}
		return uuid128_cmp(u1, u2);
   2bed0:	f7ff ffde 	bl	2be90 <uuid128_cmp>
   2bed4:	e7fb      	b.n	2bece <bt_uuid_cmp+0x18>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   2bed6:	8840      	ldrh	r0, [r0, #2]
   2bed8:	884b      	ldrh	r3, [r1, #2]
   2beda:	1ac0      	subs	r0, r0, r3
   2bedc:	e7f7      	b.n	2bece <bt_uuid_cmp+0x18>
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   2bede:	6840      	ldr	r0, [r0, #4]
   2bee0:	684b      	ldr	r3, [r1, #4]
   2bee2:	1ac0      	subs	r0, r0, r3
   2bee4:	e7f3      	b.n	2bece <bt_uuid_cmp+0x18>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2bee6:	2210      	movs	r2, #16
   2bee8:	3101      	adds	r1, #1
   2beea:	3001      	adds	r0, #1
   2beec:	f004 ff04 	bl	30cf8 <memcmp>
   2bef0:	e7ed      	b.n	2bece <bt_uuid_cmp+0x18>

0002bef2 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
   2bef2:	b500      	push	{lr}
   2bef4:	4603      	mov	r3, r0
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   2bef6:	2a04      	cmp	r2, #4
   2bef8:	d00f      	beq.n	2bf1a <bt_uuid_create+0x28>
   2befa:	2a10      	cmp	r2, #16
   2befc:	d01d      	beq.n	2bf3a <bt_uuid_create+0x48>
   2befe:	2a02      	cmp	r2, #2
   2bf00:	d002      	beq.n	2bf08 <bt_uuid_create+0x16>
   2bf02:	2000      	movs	r0, #0
		break;
	default:
		return false;
	}
	return true;
}
   2bf04:	f85d fb04 	ldr.w	pc, [sp], #4
		uuid->type = BT_UUID_TYPE_16;
   2bf08:	2200      	movs	r2, #0
   2bf0a:	7002      	strb	r2, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   2bf0c:	7848      	ldrb	r0, [r1, #1]
   2bf0e:	780a      	ldrb	r2, [r1, #0]
   2bf10:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   2bf14:	805a      	strh	r2, [r3, #2]
	return true;
   2bf16:	2001      	movs	r0, #1
		break;
   2bf18:	e7f4      	b.n	2bf04 <bt_uuid_create+0x12>
		uuid->type = BT_UUID_TYPE_32;
   2bf1a:	2001      	movs	r0, #1
   2bf1c:	7018      	strb	r0, [r3, #0]
   2bf1e:	f891 c003 	ldrb.w	ip, [r1, #3]
   2bf22:	788a      	ldrb	r2, [r1, #2]
   2bf24:	ea42 2c0c 	orr.w	ip, r2, ip, lsl #8
   2bf28:	f891 e001 	ldrb.w	lr, [r1, #1]
   2bf2c:	780a      	ldrb	r2, [r1, #0]
   2bf2e:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   2bf32:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   2bf36:	605a      	str	r2, [r3, #4]
		break;
   2bf38:	e7e4      	b.n	2bf04 <bt_uuid_create+0x12>
		uuid->type = BT_UUID_TYPE_128;
   2bf3a:	4602      	mov	r2, r0
   2bf3c:	2002      	movs	r0, #2
   2bf3e:	f802 0b01 	strb.w	r0, [r2], #1
   2bf42:	f8d1 e000 	ldr.w	lr, [r1]
   2bf46:	f8d1 c004 	ldr.w	ip, [r1, #4]
   2bf4a:	6888      	ldr	r0, [r1, #8]
   2bf4c:	68c9      	ldr	r1, [r1, #12]
   2bf4e:	f8c3 e001 	str.w	lr, [r3, #1]
   2bf52:	f8c2 c004 	str.w	ip, [r2, #4]
   2bf56:	6090      	str	r0, [r2, #8]
   2bf58:	60d1      	str	r1, [r2, #12]
	return true;
   2bf5a:	2001      	movs	r0, #1
   2bf5c:	e7d2      	b.n	2bf04 <bt_uuid_create+0x12>

0002bf5e <bt_addr_le_create_static>:

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   2bf5e:	b510      	push	{r4, lr}
   2bf60:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   2bf62:	2301      	movs	r3, #1
   2bf64:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   2bf68:	2106      	movs	r1, #6
   2bf6a:	f7f7 f829 	bl	22fc0 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   2bf6e:	b918      	cbnz	r0, 2bf78 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   2bf70:	79a3      	ldrb	r3, [r4, #6]
   2bf72:	f063 033f 	orn	r3, r3, #63	; 0x3f
   2bf76:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   2bf78:	bd10      	pop	{r4, pc}

0002bf7a <skip_auto_phy_update_on_conn_establishment>:
}
   2bf7a:	2000      	movs	r0, #0
   2bf7c:	4770      	bx	lr

0002bf7e <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   2bf7e:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   2bf82:	b17b      	cbz	r3, 2bfa4 <update_sec_level+0x26>
   2bf84:	7b5a      	ldrb	r2, [r3, #13]
   2bf86:	f012 0f01 	tst.w	r2, #1
   2bf8a:	d00b      	beq.n	2bfa4 <update_sec_level+0x26>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   2bf8c:	f012 0f10 	tst.w	r2, #16
   2bf90:	d002      	beq.n	2bf98 <update_sec_level+0x1a>
		    conn->le.keys->enc_size == BT_SMP_MAX_ENC_KEY_SIZE) {
   2bf92:	7b1b      	ldrb	r3, [r3, #12]
		if (conn->le.keys->flags & BT_KEYS_SC &&
   2bf94:	2b10      	cmp	r3, #16
   2bf96:	d002      	beq.n	2bf9e <update_sec_level+0x20>
			conn->sec_level = BT_SECURITY_L3;
   2bf98:	2303      	movs	r3, #3
   2bf9a:	7243      	strb	r3, [r0, #9]
   2bf9c:	e004      	b.n	2bfa8 <update_sec_level+0x2a>
			conn->sec_level = BT_SECURITY_L4;
   2bf9e:	2304      	movs	r3, #4
   2bfa0:	7243      	strb	r3, [r0, #9]
   2bfa2:	e001      	b.n	2bfa8 <update_sec_level+0x2a>
		conn->sec_level = BT_SECURITY_L2;
   2bfa4:	2302      	movs	r3, #2
   2bfa6:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   2bfa8:	7a82      	ldrb	r2, [r0, #10]
   2bfaa:	7a40      	ldrb	r0, [r0, #9]
}
   2bfac:	4282      	cmp	r2, r0
   2bfae:	bf8c      	ite	hi
   2bfb0:	2000      	movhi	r0, #0
   2bfb2:	2001      	movls	r0, #1
   2bfb4:	4770      	bx	lr

0002bfb6 <hci_vendor_event>:
}
   2bfb6:	4770      	bx	lr

0002bfb8 <hci_disconn_complete_prio>:
{
   2bfb8:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   2bfba:	6883      	ldr	r3, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   2bfbc:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	if (evt->status) {
   2bfc0:	781b      	ldrb	r3, [r3, #0]
   2bfc2:	b103      	cbz	r3, 2bfc6 <hci_disconn_complete_prio+0xe>
}
   2bfc4:	bd38      	pop	{r3, r4, r5, pc}
	conn = bt_conn_lookup_handle(handle);
   2bfc6:	4620      	mov	r0, r4
   2bfc8:	f7ed fe26 	bl	19c18 <bt_conn_lookup_handle>
	if (!conn) {
   2bfcc:	4605      	mov	r5, r0
   2bfce:	b130      	cbz	r0, 2bfde <hci_disconn_complete_prio+0x26>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   2bfd0:	2101      	movs	r1, #1
   2bfd2:	f7ed fe2b 	bl	19c2c <bt_conn_set_state>
	bt_conn_unref(conn);
   2bfd6:	4628      	mov	r0, r5
   2bfd8:	f7ed fdec 	bl	19bb4 <bt_conn_unref>
   2bfdc:	e7f2      	b.n	2bfc4 <hci_disconn_complete_prio+0xc>
		conn_handle_disconnected(handle);
   2bfde:	4620      	mov	r0, r4
   2bfe0:	f7ea fe12 	bl	16c08 <conn_handle_disconnected>
		return;
   2bfe4:	e7ee      	b.n	2bfc4 <hci_disconn_complete_prio+0xc>

0002bfe6 <hci_le_read_remote_features>:
{
   2bfe6:	b538      	push	{r3, r4, r5, lr}
   2bfe8:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   2bfea:	2102      	movs	r1, #2
   2bfec:	f242 0016 	movw	r0, #8214	; 0x2016
   2bff0:	f7eb fa98 	bl	17524 <bt_hci_cmd_create>
	if (!buf) {
   2bff4:	b168      	cbz	r0, 2c012 <hci_le_read_remote_features+0x2c>
   2bff6:	4605      	mov	r5, r0
   2bff8:	2102      	movs	r1, #2
   2bffa:	3008      	adds	r0, #8
   2bffc:	f7f4 fada 	bl	205b4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2c000:	8823      	ldrh	r3, [r4, #0]
   2c002:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   2c004:	2200      	movs	r2, #0
   2c006:	4629      	mov	r1, r5
   2c008:	f242 0016 	movw	r0, #8214	; 0x2016
   2c00c:	f7eb fad8 	bl	175c0 <bt_hci_cmd_send_sync>
}
   2c010:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   2c012:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2c016:	e7fb      	b.n	2c010 <hci_le_read_remote_features+0x2a>

0002c018 <bt_hci_disconnect>:
{
   2c018:	b570      	push	{r4, r5, r6, lr}
   2c01a:	4605      	mov	r5, r0
   2c01c:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   2c01e:	2103      	movs	r1, #3
   2c020:	f240 4006 	movw	r0, #1030	; 0x406
   2c024:	f7eb fa7e 	bl	17524 <bt_hci_cmd_create>
	if (!buf) {
   2c028:	b168      	cbz	r0, 2c046 <bt_hci_disconnect+0x2e>
   2c02a:	4606      	mov	r6, r0
   2c02c:	2103      	movs	r1, #3
   2c02e:	3008      	adds	r0, #8
   2c030:	f7f4 fac0 	bl	205b4 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   2c034:	8005      	strh	r5, [r0, #0]
	disconn->reason = reason;
   2c036:	7084      	strb	r4, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   2c038:	2200      	movs	r2, #0
   2c03a:	4631      	mov	r1, r6
   2c03c:	f240 4006 	movw	r0, #1030	; 0x406
   2c040:	f7eb fabe 	bl	175c0 <bt_hci_cmd_send_sync>
}
   2c044:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   2c046:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2c04a:	e7fb      	b.n	2c044 <bt_hci_disconnect+0x2c>

0002c04c <bt_le_set_data_len>:
{
   2c04c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c04e:	4606      	mov	r6, r0
   2c050:	460f      	mov	r7, r1
   2c052:	4614      	mov	r4, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   2c054:	2106      	movs	r1, #6
   2c056:	f242 0022 	movw	r0, #8226	; 0x2022
   2c05a:	f7eb fa63 	bl	17524 <bt_hci_cmd_create>
	if (!buf) {
   2c05e:	b178      	cbz	r0, 2c080 <bt_le_set_data_len+0x34>
   2c060:	4605      	mov	r5, r0
   2c062:	2106      	movs	r1, #6
   2c064:	3008      	adds	r0, #8
   2c066:	f7f4 faa5 	bl	205b4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2c06a:	8833      	ldrh	r3, [r6, #0]
   2c06c:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   2c06e:	8047      	strh	r7, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   2c070:	8084      	strh	r4, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   2c072:	2200      	movs	r2, #0
   2c074:	4629      	mov	r1, r5
   2c076:	f242 0022 	movw	r0, #8226	; 0x2022
   2c07a:	f7eb faa1 	bl	175c0 <bt_hci_cmd_send_sync>
}
   2c07e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   2c080:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2c084:	e7fb      	b.n	2c07e <bt_le_set_data_len+0x32>

0002c086 <bt_le_set_phy>:
{
   2c086:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c08a:	4607      	mov	r7, r0
   2c08c:	460e      	mov	r6, r1
   2c08e:	4615      	mov	r5, r2
   2c090:	461c      	mov	r4, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   2c092:	2107      	movs	r1, #7
   2c094:	f242 0032 	movw	r0, #8242	; 0x2032
   2c098:	f7eb fa44 	bl	17524 <bt_hci_cmd_create>
	if (!buf) {
   2c09c:	b1a8      	cbz	r0, 2c0ca <bt_le_set_phy+0x44>
   2c09e:	4680      	mov	r8, r0
   2c0a0:	2107      	movs	r1, #7
   2c0a2:	3008      	adds	r0, #8
   2c0a4:	f7f4 fa86 	bl	205b4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2c0a8:	883b      	ldrh	r3, [r7, #0]
   2c0aa:	8003      	strh	r3, [r0, #0]
	cp->all_phys = all_phys;
   2c0ac:	7086      	strb	r6, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   2c0ae:	70c5      	strb	r5, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   2c0b0:	7104      	strb	r4, [r0, #4]
	cp->phy_opts = phy_opts;
   2c0b2:	f89d 3018 	ldrb.w	r3, [sp, #24]
   2c0b6:	f8a0 3005 	strh.w	r3, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   2c0ba:	2200      	movs	r2, #0
   2c0bc:	4641      	mov	r1, r8
   2c0be:	f242 0032 	movw	r0, #8242	; 0x2032
   2c0c2:	f7eb fa7d 	bl	175c0 <bt_hci_cmd_send_sync>
}
   2c0c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOBUFS;
   2c0ca:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2c0ce:	e7fa      	b.n	2c0c6 <bt_le_set_phy+0x40>

0002c0d0 <enh_conn_complete>:
{
   2c0d0:	b508      	push	{r3, lr}
	bt_hci_le_enh_conn_complete(evt);
   2c0d2:	f7eb fdb7 	bl	17c44 <bt_hci_le_enh_conn_complete>
}
   2c0d6:	bd08      	pop	{r3, pc}

0002c0d8 <le_enh_conn_complete>:
{
   2c0d8:	b508      	push	{r3, lr}
	enh_conn_complete((void *)buf->data);
   2c0da:	6880      	ldr	r0, [r0, #8]
   2c0dc:	f7ff fff8 	bl	2c0d0 <enh_conn_complete>
}
   2c0e0:	bd08      	pop	{r3, pc}

0002c0e2 <le_legacy_conn_complete>:
{
   2c0e2:	b500      	push	{lr}
   2c0e4:	b08d      	sub	sp, #52	; 0x34
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   2c0e6:	6883      	ldr	r3, [r0, #8]
	enh.status         = evt->status;
   2c0e8:	781a      	ldrb	r2, [r3, #0]
   2c0ea:	f88d 2000 	strb.w	r2, [sp]
	enh.handle         = evt->handle;
   2c0ee:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   2c0f2:	f8ad 2001 	strh.w	r2, [sp, #1]
	enh.role           = evt->role;
   2c0f6:	78da      	ldrb	r2, [r3, #3]
   2c0f8:	f88d 2003 	strb.w	r2, [sp, #3]
	enh.interval       = evt->interval;
   2c0fc:	f8b3 200b 	ldrh.w	r2, [r3, #11]
   2c100:	f8ad 2017 	strh.w	r2, [sp, #23]
	enh.latency        = evt->latency;
   2c104:	f8b3 200d 	ldrh.w	r2, [r3, #13]
   2c108:	f8ad 2019 	strh.w	r2, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
   2c10c:	f8b3 200f 	ldrh.w	r2, [r3, #15]
   2c110:	f8ad 201b 	strh.w	r2, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
   2c114:	7c5a      	ldrb	r2, [r3, #17]
   2c116:	f88d 201d 	strb.w	r2, [sp, #29]
	memcpy(dst, src, sizeof(*dst));
   2c11a:	6858      	ldr	r0, [r3, #4]
   2c11c:	9001      	str	r0, [sp, #4]
   2c11e:	891a      	ldrh	r2, [r3, #8]
   2c120:	7a9b      	ldrb	r3, [r3, #10]
   2c122:	f8ad 2008 	strh.w	r2, [sp, #8]
   2c126:	f88d 300a 	strb.w	r3, [sp, #10]
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   2c12a:	2300      	movs	r3, #0
   2c12c:	930a      	str	r3, [sp, #40]	; 0x28
   2c12e:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
	memcpy(dst, src, sizeof(*dst));
   2c132:	f8cd 300b 	str.w	r3, [sp, #11]
   2c136:	f8ad 300f 	strh.w	r3, [sp, #15]
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   2c13a:	9308      	str	r3, [sp, #32]
   2c13c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
   2c140:	f8cd 3011 	str.w	r3, [sp, #17]
   2c144:	f8ad 3015 	strh.w	r3, [sp, #21]
	enh_conn_complete(&enh);
   2c148:	4668      	mov	r0, sp
   2c14a:	f7ff ffc1 	bl	2c0d0 <enh_conn_complete>
}
   2c14e:	b00d      	add	sp, #52	; 0x34
   2c150:	f85d fb04 	ldr.w	pc, [sp], #4

0002c154 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   2c154:	8802      	ldrh	r2, [r0, #0]
   2c156:	8843      	ldrh	r3, [r0, #2]
   2c158:	429a      	cmp	r2, r3
   2c15a:	d817      	bhi.n	2c18c <bt_le_conn_params_valid+0x38>
   2c15c:	2a05      	cmp	r2, #5
   2c15e:	d917      	bls.n	2c190 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   2c160:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   2c164:	d816      	bhi.n	2c194 <bt_le_conn_params_valid+0x40>
	if (param->latency > 499) {
   2c166:	8881      	ldrh	r1, [r0, #4]
   2c168:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
   2c16c:	d214      	bcs.n	2c198 <bt_le_conn_params_valid+0x44>
	if (param->timeout < 10 || param->timeout > 3200 ||
   2c16e:	88c0      	ldrh	r0, [r0, #6]
   2c170:	f1a0 020a 	sub.w	r2, r0, #10
   2c174:	b292      	uxth	r2, r2
   2c176:	f640 4c76 	movw	ip, #3190	; 0xc76
   2c17a:	4562      	cmp	r2, ip
   2c17c:	d80e      	bhi.n	2c19c <bt_le_conn_params_valid+0x48>
	     ((1U + param->latency) * param->interval_max))) {
   2c17e:	fb01 3303 	mla	r3, r1, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   2c182:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   2c186:	d20b      	bcs.n	2c1a0 <bt_le_conn_params_valid+0x4c>
	return true;
   2c188:	2001      	movs	r0, #1
   2c18a:	4770      	bx	lr
		return false;
   2c18c:	2000      	movs	r0, #0
   2c18e:	4770      	bx	lr
   2c190:	2000      	movs	r0, #0
   2c192:	4770      	bx	lr
   2c194:	2000      	movs	r0, #0
   2c196:	4770      	bx	lr
		return false;
   2c198:	2000      	movs	r0, #0
   2c19a:	4770      	bx	lr
		return false;
   2c19c:	2000      	movs	r0, #0
   2c19e:	4770      	bx	lr
   2c1a0:	2000      	movs	r0, #0
}
   2c1a2:	4770      	bx	lr

0002c1a4 <bt_security_err_get>:
	switch (hci_err) {
   2c1a4:	2829      	cmp	r0, #41	; 0x29
   2c1a6:	d81e      	bhi.n	2c1e6 <bt_security_err_get+0x42>
   2c1a8:	e8df f000 	tbb	[pc, r0]
   2c1ac:	1d1d1d20 	.word	0x1d1d1d20
   2c1b0:	1d151f1d 	.word	0x1d151f1d
   2c1b4:	1d1d1d1d 	.word	0x1d1d1d1d
   2c1b8:	1d1d1d1d 	.word	0x1d1d1d1d
   2c1bc:	1d1b1d1d 	.word	0x1d1b1d1d
   2c1c0:	1d1d1d1d 	.word	0x1d1d1d1d
   2c1c4:	1d1d1d19 	.word	0x1d1d1d19
   2c1c8:	1d1d1d1d 	.word	0x1d1d1d1d
   2c1cc:	1d1d1d1d 	.word	0x1d1d1d1d
   2c1d0:	1d1d1d1d 	.word	0x1d1d1d1d
   2c1d4:	171d      	.short	0x171d
		return BT_SECURITY_ERR_PIN_OR_KEY_MISSING;
   2c1d6:	2002      	movs	r0, #2
   2c1d8:	4770      	bx	lr
		return BT_SECURITY_ERR_PAIR_NOT_SUPPORTED;
   2c1da:	2005      	movs	r0, #5
   2c1dc:	4770      	bx	lr
		return BT_SECURITY_ERR_PAIR_NOT_ALLOWED;
   2c1de:	2006      	movs	r0, #6
   2c1e0:	4770      	bx	lr
		return BT_SECURITY_ERR_INVALID_PARAM;
   2c1e2:	2007      	movs	r0, #7
   2c1e4:	4770      	bx	lr
		return BT_SECURITY_ERR_UNSPECIFIED;
   2c1e6:	2009      	movs	r0, #9
   2c1e8:	4770      	bx	lr
		return BT_SECURITY_ERR_AUTH_FAIL;
   2c1ea:	2001      	movs	r0, #1
}
   2c1ec:	4770      	bx	lr

0002c1ee <le_conn_param_req_reply>:
{
   2c1ee:	b570      	push	{r4, r5, r6, lr}
   2c1f0:	4605      	mov	r5, r0
   2c1f2:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   2c1f4:	210e      	movs	r1, #14
   2c1f6:	f242 0020 	movw	r0, #8224	; 0x2020
   2c1fa:	f7eb f993 	bl	17524 <bt_hci_cmd_create>
	if (!buf) {
   2c1fe:	b1c0      	cbz	r0, 2c232 <le_conn_param_req_reply+0x44>
   2c200:	4606      	mov	r6, r0
   2c202:	210e      	movs	r1, #14
   2c204:	3008      	adds	r0, #8
   2c206:	f7f4 f9d5 	bl	205b4 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   2c20a:	2300      	movs	r3, #0
   2c20c:	6003      	str	r3, [r0, #0]
   2c20e:	6043      	str	r3, [r0, #4]
   2c210:	6083      	str	r3, [r0, #8]
   2c212:	8183      	strh	r3, [r0, #12]
	cp->handle = sys_cpu_to_le16(handle);
   2c214:	8005      	strh	r5, [r0, #0]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   2c216:	8823      	ldrh	r3, [r4, #0]
   2c218:	8043      	strh	r3, [r0, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   2c21a:	8863      	ldrh	r3, [r4, #2]
   2c21c:	8083      	strh	r3, [r0, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   2c21e:	88a3      	ldrh	r3, [r4, #4]
   2c220:	80c3      	strh	r3, [r0, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   2c222:	88e3      	ldrh	r3, [r4, #6]
   2c224:	8103      	strh	r3, [r0, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   2c226:	4631      	mov	r1, r6
   2c228:	f242 0020 	movw	r0, #8224	; 0x2020
   2c22c:	f7eb fe7e 	bl	17f2c <bt_hci_cmd_send>
}
   2c230:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   2c232:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2c236:	e7fb      	b.n	2c230 <le_conn_param_req_reply+0x42>

0002c238 <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   2c238:	2000      	movs	r0, #0
   2c23a:	4770      	bx	lr

0002c23c <bt_addr_le_is_bonded>:
	return 0;
}
#endif

bool bt_addr_le_is_bonded(uint8_t id, const bt_addr_le_t *addr)
{
   2c23c:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_BT_SMP)) {
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   2c23e:	f7f3 fd01 	bl	1fc44 <bt_keys_find_addr>

		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
   2c242:	b118      	cbz	r0, 2c24c <bt_addr_le_is_bonded+0x10>
   2c244:	89c3      	ldrh	r3, [r0, #14]
   2c246:	b91b      	cbnz	r3, 2c250 <bt_addr_le_is_bonded+0x14>
   2c248:	2000      	movs	r0, #0
	} else {
		return false;
	}
}
   2c24a:	bd08      	pop	{r3, pc}
		return keys && keys->keys;
   2c24c:	2000      	movs	r0, #0
   2c24e:	e7fc      	b.n	2c24a <bt_addr_le_is_bonded+0xe>
   2c250:	2001      	movs	r0, #1
   2c252:	e7fa      	b.n	2c24a <bt_addr_le_is_bonded+0xe>

0002c254 <adv_unpause_enabled>:
{
   2c254:	b508      	push	{r3, lr}
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   2c256:	f100 0310 	add.w	r3, r0, #16
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2c25a:	f3bf 8f5b 	dmb	ish
   2c25e:	e853 2f00 	ldrex	r2, [r3]
   2c262:	f422 4180 	bic.w	r1, r2, #16384	; 0x4000
   2c266:	e843 1c00 	strex	ip, r1, [r3]
   2c26a:	f1bc 0f00 	cmp.w	ip, #0
   2c26e:	d1f6      	bne.n	2c25e <adv_unpause_enabled+0xa>
   2c270:	f3bf 8f5b 	dmb	ish
   2c274:	f412 4f80 	tst.w	r2, #16384	; 0x4000
   2c278:	d100      	bne.n	2c27c <adv_unpause_enabled+0x28>
}
   2c27a:	bd08      	pop	{r3, pc}
		bt_le_adv_set_enable(adv, true);
   2c27c:	2101      	movs	r1, #1
   2c27e:	f000 fa15 	bl	2c6ac <bt_le_adv_set_enable>
}
   2c282:	e7fa      	b.n	2c27a <adv_unpause_enabled+0x26>

0002c284 <addr_res_enable>:
{
   2c284:	b538      	push	{r3, r4, r5, lr}
   2c286:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   2c288:	2101      	movs	r1, #1
   2c28a:	f242 002d 	movw	r0, #8237	; 0x202d
   2c28e:	f7eb f949 	bl	17524 <bt_hci_cmd_create>
	if (!buf) {
   2c292:	b158      	cbz	r0, 2c2ac <addr_res_enable+0x28>
   2c294:	4605      	mov	r5, r0
	return net_buf_simple_add_u8(&buf->b, val);
   2c296:	4621      	mov	r1, r4
   2c298:	3008      	adds	r0, #8
   2c29a:	f002 ff7c 	bl	2f196 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   2c29e:	2200      	movs	r2, #0
   2c2a0:	4629      	mov	r1, r5
   2c2a2:	f242 002d 	movw	r0, #8237	; 0x202d
   2c2a6:	f7eb f98b 	bl	175c0 <bt_hci_cmd_send_sync>
}
   2c2aa:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   2c2ac:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2c2b0:	e7fb      	b.n	2c2aa <addr_res_enable+0x26>

0002c2b2 <adv_pause_enabled>:
{
   2c2b2:	b508      	push	{r3, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2c2b4:	f3bf 8f5b 	dmb	ish
   2c2b8:	6903      	ldr	r3, [r0, #16]
   2c2ba:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   2c2be:	f013 0f40 	tst.w	r3, #64	; 0x40
   2c2c2:	d010      	beq.n	2c2e6 <adv_pause_enabled+0x34>
   2c2c4:	f100 0210 	add.w	r2, r0, #16
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2c2c8:	f3bf 8f5b 	dmb	ish
   2c2cc:	e852 3f00 	ldrex	r3, [r2]
   2c2d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   2c2d4:	e842 3100 	strex	r1, r3, [r2]
   2c2d8:	2900      	cmp	r1, #0
   2c2da:	d1f7      	bne.n	2c2cc <adv_pause_enabled+0x1a>
   2c2dc:	f3bf 8f5b 	dmb	ish
		bt_le_adv_set_enable(adv, false);
   2c2e0:	2100      	movs	r1, #0
   2c2e2:	f000 f9e3 	bl	2c6ac <bt_le_adv_set_enable>
}
   2c2e6:	bd08      	pop	{r3, pc}

0002c2e8 <hci_id_del>:
{
   2c2e8:	b538      	push	{r3, r4, r5, lr}
   2c2ea:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
   2c2ec:	2107      	movs	r1, #7
   2c2ee:	f242 0028 	movw	r0, #8232	; 0x2028
   2c2f2:	f7eb f917 	bl	17524 <bt_hci_cmd_create>
	if (!buf) {
   2c2f6:	b188      	cbz	r0, 2c31c <hci_id_del+0x34>
   2c2f8:	4605      	mov	r5, r0
	return net_buf_simple_add(&buf->b, len);
   2c2fa:	2107      	movs	r1, #7
   2c2fc:	3008      	adds	r0, #8
   2c2fe:	f7f4 f959 	bl	205b4 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2c302:	6823      	ldr	r3, [r4, #0]
   2c304:	6003      	str	r3, [r0, #0]
   2c306:	88a2      	ldrh	r2, [r4, #4]
   2c308:	79a3      	ldrb	r3, [r4, #6]
   2c30a:	8082      	strh	r2, [r0, #4]
   2c30c:	7183      	strb	r3, [r0, #6]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
   2c30e:	2200      	movs	r2, #0
   2c310:	4629      	mov	r1, r5
   2c312:	f242 0028 	movw	r0, #8232	; 0x2028
   2c316:	f7eb f953 	bl	175c0 <bt_hci_cmd_send_sync>
}
   2c31a:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   2c31c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2c320:	e7fb      	b.n	2c31a <hci_id_del+0x32>

0002c322 <hci_id_add>:
	if (id >= CONFIG_BT_ID_MAX) {
   2c322:	bb70      	cbnz	r0, 2c382 <hci_id_add+0x60>
{
   2c324:	b570      	push	{r4, r5, r6, lr}
   2c326:	460d      	mov	r5, r1
   2c328:	4614      	mov	r4, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   2c32a:	2127      	movs	r1, #39	; 0x27
   2c32c:	f242 0027 	movw	r0, #8231	; 0x2027
   2c330:	f7eb f8f8 	bl	17524 <bt_hci_cmd_create>
	if (!buf) {
   2c334:	4606      	mov	r6, r0
   2c336:	b338      	cbz	r0, 2c388 <hci_id_add+0x66>
   2c338:	2127      	movs	r1, #39	; 0x27
   2c33a:	3008      	adds	r0, #8
   2c33c:	f7f4 f93a 	bl	205b4 <net_buf_simple_add>
   2c340:	682b      	ldr	r3, [r5, #0]
   2c342:	6003      	str	r3, [r0, #0]
   2c344:	88aa      	ldrh	r2, [r5, #4]
   2c346:	79ab      	ldrb	r3, [r5, #6]
   2c348:	8082      	strh	r2, [r0, #4]
   2c34a:	7183      	strb	r3, [r0, #6]
   2c34c:	6825      	ldr	r5, [r4, #0]
   2c34e:	6861      	ldr	r1, [r4, #4]
   2c350:	68a2      	ldr	r2, [r4, #8]
   2c352:	68e3      	ldr	r3, [r4, #12]
   2c354:	f8c0 5007 	str.w	r5, [r0, #7]
   2c358:	f8c0 100b 	str.w	r1, [r0, #11]
   2c35c:	f8c0 200f 	str.w	r2, [r0, #15]
   2c360:	f8c0 3013 	str.w	r3, [r0, #19]
__ssp_bos_icheck3(memset, void *, int)
   2c364:	2200      	movs	r2, #0
   2c366:	f8c0 2017 	str.w	r2, [r0, #23]
   2c36a:	f8c0 201b 	str.w	r2, [r0, #27]
   2c36e:	f8c0 201f 	str.w	r2, [r0, #31]
   2c372:	f8c0 2023 	str.w	r2, [r0, #35]	; 0x23
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   2c376:	4631      	mov	r1, r6
   2c378:	f242 0027 	movw	r0, #8231	; 0x2027
   2c37c:	f7eb f920 	bl	175c0 <bt_hci_cmd_send_sync>
}
   2c380:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2c382:	f06f 0015 	mvn.w	r0, #21
}
   2c386:	4770      	bx	lr
		return -ENOBUFS;
   2c388:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2c38c:	e7f8      	b.n	2c380 <hci_id_add+0x5e>

0002c38e <keys_add_id>:
{
   2c38e:	b508      	push	{r3, lr}
	if (keys->state & BT_KEYS_ID_ADDED) {
   2c390:	7a03      	ldrb	r3, [r0, #8]
   2c392:	f013 0f04 	tst.w	r3, #4
   2c396:	d100      	bne.n	2c39a <keys_add_id+0xc>
}
   2c398:	bd08      	pop	{r3, pc}
   2c39a:	4601      	mov	r1, r0
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   2c39c:	4602      	mov	r2, r0
   2c39e:	f812 0b2a 	ldrb.w	r0, [r2], #42
   2c3a2:	3101      	adds	r1, #1
   2c3a4:	f7ff ffbd 	bl	2c322 <hci_id_add>
}
   2c3a8:	e7f6      	b.n	2c398 <keys_add_id+0xa>

0002c3aa <bt_lookup_id_addr>:
{
   2c3aa:	b510      	push	{r4, lr}
   2c3ac:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
   2c3ae:	f7f3 fbe3 	bl	1fb78 <bt_keys_find_irk>
		if (keys) {
   2c3b2:	b108      	cbz	r0, 2c3b8 <bt_lookup_id_addr+0xe>
			return &keys->addr;
   2c3b4:	3001      	adds	r0, #1
}
   2c3b6:	bd10      	pop	{r4, pc}
	return addr;
   2c3b8:	4620      	mov	r0, r4
   2c3ba:	e7fc      	b.n	2c3b6 <bt_lookup_id_addr+0xc>

0002c3bc <bt_id_set_adv_random_addr>:
{
   2c3bc:	b508      	push	{r3, lr}
		return set_random_address(addr);
   2c3be:	4608      	mov	r0, r1
   2c3c0:	f7ec f922 	bl	18608 <set_random_address>
}
   2c3c4:	bd08      	pop	{r3, pc}

0002c3c6 <bt_id_set_adv_private_addr>:
{
   2c3c6:	b510      	push	{r4, lr}
   2c3c8:	b082      	sub	sp, #8
   2c3ca:	4604      	mov	r4, r0
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   2c3cc:	2106      	movs	r1, #6
   2c3ce:	4668      	mov	r0, sp
   2c3d0:	f7f6 fdf6 	bl	22fc0 <bt_rand>
	if (err) {
   2c3d4:	b108      	cbz	r0, 2c3da <bt_id_set_adv_private_addr+0x14>
}
   2c3d6:	b002      	add	sp, #8
   2c3d8:	bd10      	pop	{r4, pc}
	BT_ADDR_SET_NRPA(&nrpa);
   2c3da:	f89d 3005 	ldrb.w	r3, [sp, #5]
   2c3de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2c3e2:	f88d 3005 	strb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   2c3e6:	4669      	mov	r1, sp
   2c3e8:	4620      	mov	r0, r4
   2c3ea:	f7ff ffe7 	bl	2c3bc <bt_id_set_adv_random_addr>
	if (err) {
   2c3ee:	e7f2      	b.n	2c3d6 <bt_id_set_adv_private_addr+0x10>

0002c3f0 <bt_id_adv_random_addr_check>:
}
   2c3f0:	2001      	movs	r0, #1
   2c3f2:	4770      	bx	lr

0002c3f4 <pending_id_update>:
{
   2c3f4:	b508      	push	{r3, lr}
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   2c3f6:	7a03      	ldrb	r3, [r0, #8]
   2c3f8:	f013 0f01 	tst.w	r3, #1
   2c3fc:	d103      	bne.n	2c406 <pending_id_update+0x12>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   2c3fe:	f013 0f02 	tst.w	r3, #2
   2c402:	d106      	bne.n	2c412 <pending_id_update+0x1e>
}
   2c404:	bd08      	pop	{r3, pc}
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   2c406:	f023 0301 	bic.w	r3, r3, #1
   2c40a:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   2c40c:	f7ec f9c8 	bl	187a0 <bt_id_add>
		return;
   2c410:	e7f8      	b.n	2c404 <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   2c412:	f023 0302 	bic.w	r3, r3, #2
   2c416:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   2c418:	f7ec fa56 	bl	188c8 <bt_id_del>
		return;
   2c41c:	e7f2      	b.n	2c404 <pending_id_update+0x10>

0002c41e <bt_id_init>:
#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
}
   2c41e:	2000      	movs	r0, #0
   2c420:	4770      	bx	lr

0002c422 <ad_is_limited>:
	for (i = 0; i < ad_len; i++) {
   2c422:	2300      	movs	r3, #0
   2c424:	428b      	cmp	r3, r1
   2c426:	d219      	bcs.n	2c45c <ad_is_limited+0x3a>
{
   2c428:	b500      	push	{lr}
   2c42a:	e002      	b.n	2c432 <ad_is_limited+0x10>
	for (i = 0; i < ad_len; i++) {
   2c42c:	3301      	adds	r3, #1
   2c42e:	428b      	cmp	r3, r1
   2c430:	d211      	bcs.n	2c456 <ad_is_limited+0x34>
		if (ad[i].type == BT_DATA_FLAGS &&
   2c432:	eb00 0ec3 	add.w	lr, r0, r3, lsl #3
   2c436:	f830 c033 	ldrh.w	ip, [r0, r3, lsl #3]
   2c43a:	f240 1201 	movw	r2, #257	; 0x101
   2c43e:	4594      	cmp	ip, r2
   2c440:	d1f4      	bne.n	2c42c <ad_is_limited+0xa>
		    ad[i].data != NULL) {
   2c442:	f8de 2004 	ldr.w	r2, [lr, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   2c446:	2a00      	cmp	r2, #0
   2c448:	d0f0      	beq.n	2c42c <ad_is_limited+0xa>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   2c44a:	7812      	ldrb	r2, [r2, #0]
   2c44c:	f012 0f01 	tst.w	r2, #1
   2c450:	d0ec      	beq.n	2c42c <ad_is_limited+0xa>
				return true;
   2c452:	2001      	movs	r0, #1
   2c454:	e000      	b.n	2c458 <ad_is_limited+0x36>
	return false;
   2c456:	2000      	movs	r0, #0
}
   2c458:	f85d fb04 	ldr.w	pc, [sp], #4
	return false;
   2c45c:	2000      	movs	r0, #0
}
   2c45e:	4770      	bx	lr

0002c460 <get_filter_policy>:
}
   2c460:	2000      	movs	r0, #0
   2c462:	4770      	bx	lr

0002c464 <get_adv_channel_map>:
{
   2c464:	4603      	mov	r3, r0
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_37) {
   2c466:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   2c46a:	d10b      	bne.n	2c484 <get_adv_channel_map+0x20>
	uint8_t channel_map = 0x07;
   2c46c:	2007      	movs	r0, #7
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   2c46e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   2c472:	d001      	beq.n	2c478 <get_adv_channel_map+0x14>
		channel_map &= ~0x02;
   2c474:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   2c478:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   2c47c:	d001      	beq.n	2c482 <get_adv_channel_map+0x1e>
		channel_map &= ~0x04;
   2c47e:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
}
   2c482:	4770      	bx	lr
		channel_map &= ~0x01;
   2c484:	2006      	movs	r0, #6
   2c486:	e7f2      	b.n	2c46e <get_adv_channel_map+0xa>

0002c488 <hci_set_ad>:
{
   2c488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c48c:	b082      	sub	sp, #8
   2c48e:	4607      	mov	r7, r0
   2c490:	460d      	mov	r5, r1
   2c492:	4616      	mov	r6, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   2c494:	2120      	movs	r1, #32
   2c496:	f7eb f845 	bl	17524 <bt_hci_cmd_create>
	if (!buf) {
   2c49a:	b300      	cbz	r0, 2c4de <hci_set_ad+0x56>
   2c49c:	4680      	mov	r8, r0
   2c49e:	2120      	movs	r1, #32
   2c4a0:	3008      	adds	r0, #8
   2c4a2:	f7f4 f887 	bl	205b4 <net_buf_simple_add>
   2c4a6:	4604      	mov	r4, r0
   2c4a8:	2220      	movs	r2, #32
   2c4aa:	2100      	movs	r1, #0
   2c4ac:	f004 fc55 	bl	30d5a <memset>
	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   2c4b0:	9400      	str	r4, [sp, #0]
   2c4b2:	4633      	mov	r3, r6
   2c4b4:	462a      	mov	r2, r5
   2c4b6:	211f      	movs	r1, #31
   2c4b8:	1c60      	adds	r0, r4, #1
   2c4ba:	f7ec fc11 	bl	18ce0 <set_data_add_complete>
	if (err) {
   2c4be:	4604      	mov	r4, r0
   2c4c0:	b948      	cbnz	r0, 2c4d6 <hci_set_ad+0x4e>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   2c4c2:	2200      	movs	r2, #0
   2c4c4:	4641      	mov	r1, r8
   2c4c6:	4638      	mov	r0, r7
   2c4c8:	f7eb f87a 	bl	175c0 <bt_hci_cmd_send_sync>
   2c4cc:	4604      	mov	r4, r0
}
   2c4ce:	4620      	mov	r0, r4
   2c4d0:	b002      	add	sp, #8
   2c4d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   2c4d6:	4640      	mov	r0, r8
   2c4d8:	f7f3 ff54 	bl	20384 <net_buf_unref>
		return err;
   2c4dc:	e7f7      	b.n	2c4ce <hci_set_ad+0x46>
		return -ENOBUFS;
   2c4de:	f06f 0468 	mvn.w	r4, #104	; 0x68
   2c4e2:	e7f4      	b.n	2c4ce <hci_set_ad+0x46>

0002c4e4 <set_ad>:
{
   2c4e4:	b508      	push	{r3, lr}
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   2c4e6:	f242 0008 	movw	r0, #8200	; 0x2008
   2c4ea:	f7ff ffcd 	bl	2c488 <hci_set_ad>
}
   2c4ee:	bd08      	pop	{r3, pc}

0002c4f0 <set_sd>:
{
   2c4f0:	b508      	push	{r3, lr}
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   2c4f2:	f242 0009 	movw	r0, #8201	; 0x2009
   2c4f6:	f7ff ffc7 	bl	2c488 <hci_set_ad>
}
   2c4fa:	bd08      	pop	{r3, pc}

0002c4fc <le_adv_update>:
{
   2c4fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c500:	b089      	sub	sp, #36	; 0x24
   2c502:	4604      	mov	r4, r0
   2c504:	460e      	mov	r6, r1
   2c506:	4617      	mov	r7, r2
   2c508:	461d      	mov	r5, r3
   2c50a:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
   2c50e:	f89d b04c 	ldrb.w	fp, [sp, #76]	; 0x4c
   2c512:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   2c516:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
	struct bt_ad d[2] = {};
   2c51a:	2300      	movs	r3, #0
   2c51c:	9304      	str	r3, [sp, #16]
   2c51e:	9305      	str	r3, [sp, #20]
   2c520:	9306      	str	r3, [sp, #24]
   2c522:	9307      	str	r3, [sp, #28]
	if (name_type != ADV_NAME_TYPE_NONE) {
   2c524:	f1b9 0f00 	cmp.w	r9, #0
   2c528:	d133      	bne.n	2c592 <le_adv_update+0x96>
	if (!(ext_adv && scannable)) {
   2c52a:	f1bb 0f00 	cmp.w	fp, #0
   2c52e:	d002      	beq.n	2c536 <le_adv_update+0x3a>
   2c530:	f1ba 0f00 	cmp.w	sl, #0
   2c534:	d10b      	bne.n	2c54e <le_adv_update+0x52>
		d[0].data = ad;
   2c536:	9604      	str	r6, [sp, #16]
		d[0].len = ad_len;
   2c538:	9705      	str	r7, [sp, #20]
		if (name_type == ADV_NAME_TYPE_AD) {
   2c53a:	f1b9 0f01 	cmp.w	r9, #1
   2c53e:	d056      	beq.n	2c5ee <le_adv_update+0xf2>
		d_len = 1;
   2c540:	2201      	movs	r2, #1
		err = set_ad(adv, d, d_len);
   2c542:	a904      	add	r1, sp, #16
   2c544:	4620      	mov	r0, r4
   2c546:	f7ff ffcd 	bl	2c4e4 <set_ad>
		if (err) {
   2c54a:	4603      	mov	r3, r0
   2c54c:	b9e8      	cbnz	r0, 2c58a <le_adv_update+0x8e>
	if (scannable) {
   2c54e:	f1ba 0f00 	cmp.w	sl, #0
   2c552:	d00c      	beq.n	2c56e <le_adv_update+0x72>
		d[0].data = sd;
   2c554:	9504      	str	r5, [sp, #16]
		d[0].len = sd_len;
   2c556:	f8cd 8014 	str.w	r8, [sp, #20]
		if (name_type == ADV_NAME_TYPE_SD) {
   2c55a:	f1b9 0f02 	cmp.w	r9, #2
   2c55e:	d04c      	beq.n	2c5fa <le_adv_update+0xfe>
		d_len = 1;
   2c560:	2201      	movs	r2, #1
		err = set_sd(adv, d, d_len);
   2c562:	a904      	add	r1, sp, #16
   2c564:	4620      	mov	r0, r4
   2c566:	f7ff ffc3 	bl	2c4f0 <set_sd>
		if (err) {
   2c56a:	4603      	mov	r3, r0
   2c56c:	b968      	cbnz	r0, 2c58a <le_adv_update+0x8e>
	atomic_set_bit(adv->flags, BT_ADV_DATA_SET);
   2c56e:	3410      	adds	r4, #16
   2c570:	f3bf 8f5b 	dmb	ish
   2c574:	e854 3f00 	ldrex	r3, [r4]
   2c578:	f043 0304 	orr.w	r3, r3, #4
   2c57c:	e844 3200 	strex	r2, r3, [r4]
   2c580:	2a00      	cmp	r2, #0
   2c582:	d1f7      	bne.n	2c574 <le_adv_update+0x78>
   2c584:	f3bf 8f5b 	dmb	ish
	return 0;
   2c588:	2300      	movs	r3, #0
}
   2c58a:	4618      	mov	r0, r3
   2c58c:	b009      	add	sp, #36	; 0x24
   2c58e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const char *name = bt_get_name();
   2c592:	f7ec f805 	bl	185a0 <bt_get_name>
   2c596:	9001      	str	r0, [sp, #4]
		if ((ad && ad_has_name(ad, ad_len)) ||
   2c598:	b166      	cbz	r6, 2c5b4 <le_adv_update+0xb8>
	for (i = 0; i < ad_len; i++) {
   2c59a:	2200      	movs	r2, #0
   2c59c:	4297      	cmp	r7, r2
   2c59e:	d907      	bls.n	2c5b0 <le_adv_update+0xb4>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   2c5a0:	f816 3032 	ldrb.w	r3, [r6, r2, lsl #3]
   2c5a4:	3b08      	subs	r3, #8
   2c5a6:	b2db      	uxtb	r3, r3
   2c5a8:	2b01      	cmp	r3, #1
   2c5aa:	d90f      	bls.n	2c5cc <le_adv_update+0xd0>
	for (i = 0; i < ad_len; i++) {
   2c5ac:	3201      	adds	r2, #1
   2c5ae:	e7f5      	b.n	2c59c <le_adv_update+0xa0>
	return false;
   2c5b0:	2300      	movs	r3, #0
		if ((ad && ad_has_name(ad, ad_len)) ||
   2c5b2:	bb43      	cbnz	r3, 2c606 <le_adv_update+0x10a>
   2c5b4:	b175      	cbz	r5, 2c5d4 <le_adv_update+0xd8>
	for (i = 0; i < ad_len; i++) {
   2c5b6:	2200      	movs	r2, #0
   2c5b8:	4590      	cmp	r8, r2
   2c5ba:	d909      	bls.n	2c5d0 <le_adv_update+0xd4>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   2c5bc:	f815 3032 	ldrb.w	r3, [r5, r2, lsl #3]
   2c5c0:	3b08      	subs	r3, #8
   2c5c2:	b2db      	uxtb	r3, r3
   2c5c4:	2b01      	cmp	r3, #1
   2c5c6:	d910      	bls.n	2c5ea <le_adv_update+0xee>
	for (i = 0; i < ad_len; i++) {
   2c5c8:	3201      	adds	r2, #1
   2c5ca:	e7f5      	b.n	2c5b8 <le_adv_update+0xbc>
			return true;
   2c5cc:	2301      	movs	r3, #1
   2c5ce:	e7f0      	b.n	2c5b2 <le_adv_update+0xb6>
	return false;
   2c5d0:	2300      	movs	r3, #0
		    (sd && ad_has_name(sd, sd_len))) {
   2c5d2:	b9db      	cbnz	r3, 2c60c <le_adv_update+0x110>
		data = (struct bt_data)BT_DATA(
   2c5d4:	9801      	ldr	r0, [sp, #4]
   2c5d6:	f7e0 fd6c 	bl	d0b2 <strlen>
   2c5da:	2309      	movs	r3, #9
   2c5dc:	f88d 3008 	strb.w	r3, [sp, #8]
   2c5e0:	f88d 0009 	strb.w	r0, [sp, #9]
   2c5e4:	9b01      	ldr	r3, [sp, #4]
   2c5e6:	9303      	str	r3, [sp, #12]
   2c5e8:	e79f      	b.n	2c52a <le_adv_update+0x2e>
			return true;
   2c5ea:	2301      	movs	r3, #1
   2c5ec:	e7f1      	b.n	2c5d2 <le_adv_update+0xd6>
			d[1].data = &data;
   2c5ee:	ab02      	add	r3, sp, #8
   2c5f0:	9306      	str	r3, [sp, #24]
			d[1].len = 1;
   2c5f2:	2301      	movs	r3, #1
   2c5f4:	9307      	str	r3, [sp, #28]
			d_len = 2;
   2c5f6:	2202      	movs	r2, #2
   2c5f8:	e7a3      	b.n	2c542 <le_adv_update+0x46>
			d[1].data = &data;
   2c5fa:	ab02      	add	r3, sp, #8
   2c5fc:	9306      	str	r3, [sp, #24]
			d[1].len = 1;
   2c5fe:	2301      	movs	r3, #1
   2c600:	9307      	str	r3, [sp, #28]
			d_len = 2;
   2c602:	2202      	movs	r2, #2
   2c604:	e7ad      	b.n	2c562 <le_adv_update+0x66>
			return -EINVAL;
   2c606:	f06f 0315 	mvn.w	r3, #21
   2c60a:	e7be      	b.n	2c58a <le_adv_update+0x8e>
   2c60c:	f06f 0315 	mvn.w	r3, #21
   2c610:	e7bb      	b.n	2c58a <le_adv_update+0x8e>

0002c612 <valid_adv_param>:
{
   2c612:	b508      	push	{r3, lr}
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   2c614:	6843      	ldr	r3, [r0, #4]
   2c616:	f413 6f80 	tst.w	r3, #1024	; 0x400
   2c61a:	d107      	bne.n	2c62c <valid_adv_param+0x1a>
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   2c61c:	6902      	ldr	r2, [r0, #16]
   2c61e:	b112      	cbz	r2, 2c626 <valid_adv_param+0x14>
   2c620:	f013 0f01 	tst.w	r3, #1
   2c624:	d004      	beq.n	2c630 <valid_adv_param+0x1e>
	return valid_adv_ext_param(param);
   2c626:	f7ec fbaf 	bl	18d88 <valid_adv_ext_param>
}
   2c62a:	bd08      	pop	{r3, pc}
		return false;
   2c62c:	2000      	movs	r0, #0
   2c62e:	e7fc      	b.n	2c62a <valid_adv_param+0x18>
		return false;
   2c630:	2000      	movs	r0, #0
   2c632:	e7fa      	b.n	2c62a <valid_adv_param+0x18>

0002c634 <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   2c634:	6843      	ldr	r3, [r0, #4]
   2c636:	f013 0f08 	tst.w	r3, #8
   2c63a:	d00b      	beq.n	2c654 <get_adv_name_type_param+0x20>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   2c63c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   2c640:	d10a      	bne.n	2c658 <get_adv_name_type_param+0x24>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   2c642:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
   2c646:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   2c64a:	d001      	beq.n	2c650 <get_adv_name_type_param+0x1c>
		return ADV_NAME_TYPE_SD;
   2c64c:	2002      	movs	r0, #2
}
   2c64e:	4770      	bx	lr
			return ADV_NAME_TYPE_AD;
   2c650:	2001      	movs	r0, #1
   2c652:	4770      	bx	lr
	return ADV_NAME_TYPE_NONE;
   2c654:	2000      	movs	r0, #0
   2c656:	4770      	bx	lr
			return ADV_NAME_TYPE_AD;
   2c658:	2001      	movs	r0, #1
   2c65a:	4770      	bx	lr

0002c65c <bt_le_adv_set_enable_legacy>:
{
   2c65c:	b570      	push	{r4, r5, r6, lr}
   2c65e:	b086      	sub	sp, #24
   2c660:	4605      	mov	r5, r0
   2c662:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   2c664:	2101      	movs	r1, #1
   2c666:	f242 000a 	movw	r0, #8202	; 0x200a
   2c66a:	f7ea ff5b 	bl	17524 <bt_hci_cmd_create>
	if (!buf) {
   2c66e:	b1d0      	cbz	r0, 2c6a6 <bt_le_adv_set_enable_legacy+0x4a>
   2c670:	4606      	mov	r6, r0
	if (enable) {
   2c672:	b19c      	cbz	r4, 2c69c <bt_le_adv_set_enable_legacy+0x40>
	return net_buf_simple_add_u8(&buf->b, val);
   2c674:	2101      	movs	r1, #1
   2c676:	3008      	adds	r0, #8
   2c678:	f002 fd8d 	bl	2f196 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   2c67c:	9400      	str	r4, [sp, #0]
   2c67e:	2306      	movs	r3, #6
   2c680:	f105 0210 	add.w	r2, r5, #16
   2c684:	a903      	add	r1, sp, #12
   2c686:	4630      	mov	r0, r6
   2c688:	f7ea ff3a 	bl	17500 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   2c68c:	2200      	movs	r2, #0
   2c68e:	4631      	mov	r1, r6
   2c690:	f242 000a 	movw	r0, #8202	; 0x200a
   2c694:	f7ea ff94 	bl	175c0 <bt_hci_cmd_send_sync>
}
   2c698:	b006      	add	sp, #24
   2c69a:	bd70      	pop	{r4, r5, r6, pc}
   2c69c:	2100      	movs	r1, #0
   2c69e:	3008      	adds	r0, #8
   2c6a0:	f002 fd79 	bl	2f196 <net_buf_simple_add_u8>
   2c6a4:	e7ea      	b.n	2c67c <bt_le_adv_set_enable_legacy+0x20>
		return -ENOBUFS;
   2c6a6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2c6aa:	e7f5      	b.n	2c698 <bt_le_adv_set_enable_legacy+0x3c>

0002c6ac <bt_le_adv_set_enable>:
{
   2c6ac:	b508      	push	{r3, lr}
	return bt_le_adv_set_enable_legacy(adv, enable);
   2c6ae:	f7ff ffd5 	bl	2c65c <bt_le_adv_set_enable_legacy>
}
   2c6b2:	bd08      	pop	{r3, pc}

0002c6b4 <bt_le_lim_adv_cancel_timeout>:
{
   2c6b4:	b508      	push	{r3, lr}
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   2c6b6:	3018      	adds	r0, #24
   2c6b8:	f7fa fdac 	bl	27214 <k_work_cancel_delayable>
}
   2c6bc:	bd08      	pop	{r3, pc}

0002c6be <bt_le_adv_resume>:
{
   2c6be:	b570      	push	{r4, r5, r6, lr}
   2c6c0:	b082      	sub	sp, #8
	struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   2c6c2:	f7ec fc35 	bl	18f30 <bt_le_adv_lookup_legacy>
	if (!adv) {
   2c6c6:	b150      	cbz	r0, 2c6de <bt_le_adv_resume+0x20>
   2c6c8:	4604      	mov	r4, r0
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   2c6ca:	f100 0510 	add.w	r5, r0, #16
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2c6ce:	f3bf 8f5b 	dmb	ish
   2c6d2:	6903      	ldr	r3, [r0, #16]
   2c6d4:	f3bf 8f5b 	dmb	ish
   2c6d8:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   2c6dc:	d101      	bne.n	2c6e2 <bt_le_adv_resume+0x24>
}
   2c6de:	b002      	add	sp, #8
   2c6e0:	bd70      	pop	{r4, r5, r6, pc}
   2c6e2:	f3bf 8f5b 	dmb	ish
   2c6e6:	6903      	ldr	r3, [r0, #16]
   2c6e8:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2c6ec:	f3c3 1680 	ubfx	r6, r3, #6, #1
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   2c6f0:	f013 0f40 	tst.w	r3, #64	; 0x40
   2c6f4:	d1f3      	bne.n	2c6de <bt_le_adv_resume+0x20>
   2c6f6:	f3bf 8f5b 	dmb	ish
   2c6fa:	6903      	ldr	r3, [r0, #16]
   2c6fc:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   2c700:	f413 7f00 	tst.w	r3, #512	; 0x200
   2c704:	d0eb      	beq.n	2c6de <bt_le_adv_resume+0x20>
	err = le_adv_start_add_conn(adv, &conn);
   2c706:	a901      	add	r1, sp, #4
   2c708:	f7ec fb8c 	bl	18e24 <le_adv_start_add_conn>
	if (err) {
   2c70c:	2800      	cmp	r0, #0
   2c70e:	d1e6      	bne.n	2c6de <bt_le_adv_resume+0x20>
	err = bt_le_adv_set_enable(adv, true);
   2c710:	2101      	movs	r1, #1
   2c712:	4620      	mov	r0, r4
   2c714:	f7ff ffca 	bl	2c6ac <bt_le_adv_set_enable>
	if (err) {
   2c718:	b188      	cbz	r0, 2c73e <bt_le_adv_resume+0x80>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2c71a:	2100      	movs	r1, #0
   2c71c:	9801      	ldr	r0, [sp, #4]
   2c71e:	f7ed fa85 	bl	19c2c <bt_conn_set_state>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2c722:	f3bf 8f5b 	dmb	ish
   2c726:	e855 6f00 	ldrex	r6, [r5]
   2c72a:	f426 5300 	bic.w	r3, r6, #8192	; 0x2000
   2c72e:	e845 3200 	strex	r2, r3, [r5]
   2c732:	2a00      	cmp	r2, #0
   2c734:	d1f7      	bne.n	2c726 <bt_le_adv_resume+0x68>
   2c736:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   2c73a:	f3c6 3640 	ubfx	r6, r6, #13, #1
	bt_conn_unref(conn);
   2c73e:	9801      	ldr	r0, [sp, #4]
   2c740:	f7ed fa38 	bl	19bb4 <bt_conn_unref>
	if (persist_paused) {
   2c744:	2e00      	cmp	r6, #0
   2c746:	d0ca      	beq.n	2c6de <bt_le_adv_resume+0x20>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2c748:	f3bf 8f5b 	dmb	ish
   2c74c:	e855 3f00 	ldrex	r3, [r5]
   2c750:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   2c754:	e845 3200 	strex	r2, r3, [r5]
   2c758:	2a00      	cmp	r2, #0
   2c75a:	d1f7      	bne.n	2c74c <bt_le_adv_resume+0x8e>
   2c75c:	f3bf 8f5b 	dmb	ish
}
   2c760:	e7bd      	b.n	2c6de <bt_le_adv_resume+0x20>

0002c762 <hci_generate_dhkey_v1>:
{
   2c762:	b538      	push	{r3, r4, r5, lr}
   2c764:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   2c766:	2140      	movs	r1, #64	; 0x40
   2c768:	f242 0026 	movw	r0, #8230	; 0x2026
   2c76c:	f7ea feda 	bl	17524 <bt_hci_cmd_create>
	if (!buf) {
   2c770:	b1e8      	cbz	r0, 2c7ae <hci_generate_dhkey_v1+0x4c>
   2c772:	4605      	mov	r5, r0
	return net_buf_simple_add(&buf->b, len);
   2c774:	2140      	movs	r1, #64	; 0x40
   2c776:	3008      	adds	r0, #8
   2c778:	f7f3 ff1c 	bl	205b4 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2c77c:	4623      	mov	r3, r4
   2c77e:	3440      	adds	r4, #64	; 0x40
   2c780:	f8d3 e000 	ldr.w	lr, [r3]
   2c784:	f8d3 c004 	ldr.w	ip, [r3, #4]
   2c788:	6899      	ldr	r1, [r3, #8]
   2c78a:	68da      	ldr	r2, [r3, #12]
   2c78c:	f8c0 e000 	str.w	lr, [r0]
   2c790:	f8c0 c004 	str.w	ip, [r0, #4]
   2c794:	6081      	str	r1, [r0, #8]
   2c796:	60c2      	str	r2, [r0, #12]
   2c798:	3310      	adds	r3, #16
   2c79a:	3010      	adds	r0, #16
   2c79c:	42a3      	cmp	r3, r4
   2c79e:	d1ef      	bne.n	2c780 <hci_generate_dhkey_v1+0x1e>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   2c7a0:	2200      	movs	r2, #0
   2c7a2:	4629      	mov	r1, r5
   2c7a4:	f242 0026 	movw	r0, #8230	; 0x2026
   2c7a8:	f7ea ff0a 	bl	175c0 <bt_hci_cmd_send_sync>
}
   2c7ac:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   2c7ae:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2c7b2:	e7fb      	b.n	2c7ac <hci_generate_dhkey_v1+0x4a>

0002c7b4 <reset_pairing>:
	conn->required_sec_level = conn->sec_level;
   2c7b4:	7a43      	ldrb	r3, [r0, #9]
   2c7b6:	7283      	strb	r3, [r0, #10]
}
   2c7b8:	4770      	bx	lr

0002c7ba <tx_notify>:
{
   2c7ba:	b570      	push	{r4, r5, r6, lr}
   2c7bc:	4604      	mov	r4, r0
	BT_DBG("conn %p", conn);
   2c7be:	e00c      	b.n	2c7da <tx_notify+0x20>
   2c7c0:	f383 8811 	msr	BASEPRI, r3
   2c7c4:	f3bf 8f6f 	isb	sy
		if (!tx) {
   2c7c8:	b1c8      	cbz	r0, 2c7fe <tx_notify+0x44>
		cb = tx->cb;
   2c7ca:	6845      	ldr	r5, [r0, #4]
		user_data = tx->user_data;
   2c7cc:	6886      	ldr	r6, [r0, #8]
		tx_free(tx);
   2c7ce:	f7ec ff4d 	bl	1966c <tx_free>
		cb(conn, user_data, 0);
   2c7d2:	2200      	movs	r2, #0
   2c7d4:	4631      	mov	r1, r6
   2c7d6:	4620      	mov	r0, r4
   2c7d8:	47a8      	blx	r5
	__asm__ volatile(
   2c7da:	f04f 0240 	mov.w	r2, #64	; 0x40
   2c7de:	f3ef 8311 	mrs	r3, BASEPRI
   2c7e2:	f382 8812 	msr	BASEPRI_MAX, r2
   2c7e6:	f3bf 8f6f 	isb	sy
	return list->head;
   2c7ea:	6a20      	ldr	r0, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
   2c7ec:	2800      	cmp	r0, #0
   2c7ee:	d0e7      	beq.n	2c7c0 <tx_notify+0x6>
	return node->next;
   2c7f0:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   2c7f2:	6222      	str	r2, [r4, #32]
	return list->tail;
   2c7f4:	6a61      	ldr	r1, [r4, #36]	; 0x24
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2c7f6:	4281      	cmp	r1, r0
   2c7f8:	d1e2      	bne.n	2c7c0 <tx_notify+0x6>
	list->tail = node;
   2c7fa:	6262      	str	r2, [r4, #36]	; 0x24
}
   2c7fc:	e7e0      	b.n	2c7c0 <tx_notify+0x6>
}
   2c7fe:	bd70      	pop	{r4, r5, r6, pc}

0002c800 <tx_complete_work>:
{
   2c800:	b508      	push	{r3, lr}
	tx_notify(conn);
   2c802:	3828      	subs	r0, #40	; 0x28
   2c804:	f7ff ffd9 	bl	2c7ba <tx_notify>
}
   2c808:	bd08      	pop	{r3, pc}

0002c80a <send_acl>:
{
   2c80a:	b570      	push	{r4, r5, r6, lr}
   2c80c:	4605      	mov	r5, r0
   2c80e:	460c      	mov	r4, r1
	switch (flags) {
   2c810:	2a03      	cmp	r2, #3
   2c812:	d819      	bhi.n	2c848 <send_acl+0x3e>
   2c814:	e8df f002 	tbb	[pc, r2]
   2c818:	16021602 	.word	0x16021602
   2c81c:	2600      	movs	r6, #0
	return net_buf_simple_push(&buf->b, len);
   2c81e:	2104      	movs	r1, #4
   2c820:	f104 0008 	add.w	r0, r4, #8
   2c824:	f7f3 fea6 	bl	20574 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   2c828:	f9b5 3000 	ldrsh.w	r3, [r5]
   2c82c:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
   2c830:	8003      	strh	r3, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2c832:	89a3      	ldrh	r3, [r4, #12]
   2c834:	3b04      	subs	r3, #4
   2c836:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   2c838:	2302      	movs	r3, #2
   2c83a:	7523      	strb	r3, [r4, #20]
	return bt_send(buf);
   2c83c:	4620      	mov	r0, r4
   2c83e:	f7eb fb6b 	bl	17f18 <bt_send>
}
   2c842:	bd70      	pop	{r4, r5, r6, pc}
		flags = BT_ACL_CONT;
   2c844:	2601      	movs	r6, #1
   2c846:	e7ea      	b.n	2c81e <send_acl+0x14>
	switch (flags) {
   2c848:	f06f 0015 	mvn.w	r0, #21
   2c84c:	e7f9      	b.n	2c842 <send_acl+0x38>

0002c84e <start_security>:
{
   2c84e:	b508      	push	{r3, lr}
		return bt_smp_start_security(conn);
   2c850:	f002 fa8e 	bl	2ed70 <bt_smp_start_security>
}
   2c854:	bd08      	pop	{r3, pc}

0002c856 <process_unack_tx>:
{
   2c856:	b510      	push	{r4, lr}
   2c858:	4604      	mov	r4, r0
   2c85a:	e028      	b.n	2c8ae <process_unack_tx+0x58>
			conn->pending_no_cb--;
   2c85c:	3b01      	subs	r3, #1
   2c85e:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   2c860:	f382 8811 	msr	BASEPRI, r2
   2c864:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   2c868:	4620      	mov	r0, r4
   2c86a:	f7ec ffad 	bl	197c8 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   2c86e:	f7f9 ff5d 	bl	2672c <z_impl_k_sem_give>
			continue;
   2c872:	e01c      	b.n	2c8ae <process_unack_tx+0x58>
   2c874:	f382 8811 	msr	BASEPRI, r2
   2c878:	f3bf 8f6f 	isb	sy
		if (!node) {
   2c87c:	b361      	cbz	r1, 2c8d8 <process_unack_tx+0x82>
	__asm__ volatile(
   2c87e:	f04f 0240 	mov.w	r2, #64	; 0x40
   2c882:	f3ef 8311 	mrs	r3, BASEPRI
   2c886:	f382 8812 	msr	BASEPRI_MAX, r2
   2c88a:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   2c88e:	68ca      	ldr	r2, [r1, #12]
   2c890:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   2c892:	2200      	movs	r2, #0
   2c894:	60ca      	str	r2, [r1, #12]
	__asm__ volatile(
   2c896:	f383 8811 	msr	BASEPRI, r3
   2c89a:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
   2c89e:	4620      	mov	r0, r4
   2c8a0:	f7ec ff26 	bl	196f0 <conn_tx_destroy>
		k_sem_give(bt_conn_get_pkts(conn));
   2c8a4:	4620      	mov	r0, r4
   2c8a6:	f7ec ff8f 	bl	197c8 <bt_conn_get_pkts>
   2c8aa:	f7f9 ff3f 	bl	2672c <z_impl_k_sem_give>
	__asm__ volatile(
   2c8ae:	f04f 0340 	mov.w	r3, #64	; 0x40
   2c8b2:	f3ef 8211 	mrs	r2, BASEPRI
   2c8b6:	f383 8812 	msr	BASEPRI_MAX, r3
   2c8ba:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   2c8be:	69e3      	ldr	r3, [r4, #28]
   2c8c0:	2b00      	cmp	r3, #0
   2c8c2:	d1cb      	bne.n	2c85c <process_unack_tx+0x6>
	return list->head;
   2c8c4:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
   2c8c6:	2900      	cmp	r1, #0
   2c8c8:	d0d4      	beq.n	2c874 <process_unack_tx+0x1e>
	return node->next;
   2c8ca:	680b      	ldr	r3, [r1, #0]
	list->head = node;
   2c8cc:	6163      	str	r3, [r4, #20]
	return list->tail;
   2c8ce:	69a0      	ldr	r0, [r4, #24]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2c8d0:	4281      	cmp	r1, r0
   2c8d2:	d1cf      	bne.n	2c874 <process_unack_tx+0x1e>
	list->tail = node;
   2c8d4:	61a3      	str	r3, [r4, #24]
}
   2c8d6:	e7cd      	b.n	2c874 <process_unack_tx+0x1e>
}
   2c8d8:	bd10      	pop	{r4, pc}

0002c8da <bt_conn_reset_rx_state>:
{
   2c8da:	b510      	push	{r4, lr}
   2c8dc:	4604      	mov	r4, r0
	if (!conn->rx) {
   2c8de:	6900      	ldr	r0, [r0, #16]
   2c8e0:	b118      	cbz	r0, 2c8ea <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   2c8e2:	f7f3 fd4f 	bl	20384 <net_buf_unref>
	conn->rx = NULL;
   2c8e6:	2300      	movs	r3, #0
   2c8e8:	6123      	str	r3, [r4, #16]
}
   2c8ea:	bd10      	pop	{r4, pc}

0002c8ec <conn_prepare_events>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2c8ec:	f3bf 8f5b 	dmb	ish
   2c8f0:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   2c8f4:	f3bf 8f5b 	dmb	ish
	if (!atomic_get(&conn->ref)) {
   2c8f8:	b33b      	cbz	r3, 2c94a <conn_prepare_events+0x5e>
{
   2c8fa:	b510      	push	{r4, lr}
   2c8fc:	460c      	mov	r4, r1
	if (conn->state == BT_CONN_DISCONNECTED &&
   2c8fe:	7b43      	ldrb	r3, [r0, #13]
   2c900:	b983      	cbnz	r3, 2c924 <conn_prepare_events+0x38>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
   2c902:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2c904:	f3bf 8f5b 	dmb	ish
   2c908:	e853 2f00 	ldrex	r2, [r3]
   2c90c:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   2c910:	e843 1c00 	strex	ip, r1, [r3]
   2c914:	f1bc 0f00 	cmp.w	ip, #0
   2c918:	d1f6      	bne.n	2c908 <conn_prepare_events+0x1c>
   2c91a:	f3bf 8f5b 	dmb	ish
	if (conn->state == BT_CONN_DISCONNECTED &&
   2c91e:	f012 0f40 	tst.w	r2, #64	; 0x40
   2c922:	d10d      	bne.n	2c940 <conn_prepare_events+0x54>
	if (conn->state != BT_CONN_CONNECTED) {
   2c924:	7b43      	ldrb	r3, [r0, #13]
   2c926:	2b07      	cmp	r3, #7
   2c928:	d112      	bne.n	2c950 <conn_prepare_events+0x64>
	k_poll_event_init(&events[0],
   2c92a:	f100 0338 	add.w	r3, r0, #56	; 0x38
   2c92e:	2200      	movs	r2, #0
   2c930:	2104      	movs	r1, #4
   2c932:	4620      	mov	r0, r4
   2c934:	f7fc fe96 	bl	29664 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   2c938:	2301      	movs	r3, #1
   2c93a:	7323      	strb	r3, [r4, #12]
	return 0;
   2c93c:	2000      	movs	r0, #0
}
   2c93e:	bd10      	pop	{r4, pc}
		conn_cleanup(conn);
   2c940:	f7ed f892 	bl	19a68 <conn_cleanup>
		return -ENOTCONN;
   2c944:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2c948:	e7f9      	b.n	2c93e <conn_prepare_events+0x52>
		return -ENOTCONN;
   2c94a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   2c94e:	4770      	bx	lr
		return -ENOTCONN;
   2c950:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2c954:	e7f3      	b.n	2c93e <conn_prepare_events+0x52>

0002c956 <bt_conn_recv>:
{
   2c956:	b570      	push	{r4, r5, r6, lr}
   2c958:	4604      	mov	r4, r0
   2c95a:	460d      	mov	r5, r1
   2c95c:	4616      	mov	r6, r2
	tx_notify(conn);
   2c95e:	f7ff ff2c 	bl	2c7ba <tx_notify>
		bt_acl_recv(conn, buf, flags);
   2c962:	4632      	mov	r2, r6
   2c964:	4629      	mov	r1, r5
   2c966:	4620      	mov	r0, r4
   2c968:	f7ed f80a 	bl	19980 <bt_acl_recv>
}
   2c96c:	bd70      	pop	{r4, r5, r6, pc}

0002c96e <bt_conn_ref>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2c96e:	f3bf 8f5b 	dmb	ish
   2c972:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   2c976:	f3bf 8f5b 	dmb	ish
		if (!old) {
   2c97a:	b1eb      	cbz	r3, 2c9b8 <bt_conn_ref+0x4a>
{
   2c97c:	b500      	push	{lr}
   2c97e:	e006      	b.n	2c98e <bt_conn_ref+0x20>
   2c980:	f3bf 8f5b 	dmb	ish
   2c984:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   2c988:	f3bf 8f5b 	dmb	ish
		if (!old) {
   2c98c:	b193      	cbz	r3, 2c9b4 <bt_conn_ref+0x46>
   2c98e:	f100 02c0 	add.w	r2, r0, #192	; 0xc0
	} while (!atomic_cas(&conn->ref, old, old + 1));
   2c992:	1c59      	adds	r1, r3, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2c994:	f3bf 8f5b 	dmb	ish
   2c998:	e852 cf00 	ldrex	ip, [r2]
   2c99c:	459c      	cmp	ip, r3
   2c99e:	d104      	bne.n	2c9aa <bt_conn_ref+0x3c>
   2c9a0:	e842 1e00 	strex	lr, r1, [r2]
   2c9a4:	f1be 0f00 	cmp.w	lr, #0
   2c9a8:	d1f6      	bne.n	2c998 <bt_conn_ref+0x2a>
   2c9aa:	f3bf 8f5b 	dmb	ish
   2c9ae:	d1e7      	bne.n	2c980 <bt_conn_ref+0x12>
}
   2c9b0:	f85d fb04 	ldr.w	pc, [sp], #4
			return NULL;
   2c9b4:	2000      	movs	r0, #0
   2c9b6:	e7fb      	b.n	2c9b0 <bt_conn_ref+0x42>
   2c9b8:	2000      	movs	r0, #0
}
   2c9ba:	4770      	bx	lr

0002c9bc <conn_lookup_handle>:
{
   2c9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c9be:	4606      	mov	r6, r0
   2c9c0:	460d      	mov	r5, r1
   2c9c2:	4617      	mov	r7, r2
	for (i = 0; i < size; i++) {
   2c9c4:	2400      	movs	r4, #0
   2c9c6:	e003      	b.n	2c9d0 <conn_lookup_handle+0x14>
			bt_conn_unref(conn);
   2c9c8:	4660      	mov	r0, ip
   2c9ca:	f7ed f8f3 	bl	19bb4 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   2c9ce:	3401      	adds	r4, #1
   2c9d0:	42ac      	cmp	r4, r5
   2c9d2:	d21b      	bcs.n	2ca0c <conn_lookup_handle+0x50>
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2c9d4:	20c8      	movs	r0, #200	; 0xc8
   2c9d6:	fb00 6004 	mla	r0, r0, r4, r6
   2c9da:	f7ff ffc8 	bl	2c96e <bt_conn_ref>
		if (!conn) {
   2c9de:	4684      	mov	ip, r0
   2c9e0:	2800      	cmp	r0, #0
   2c9e2:	d0f4      	beq.n	2c9ce <conn_lookup_handle+0x12>
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   2c9e4:	7b43      	ldrb	r3, [r0, #13]
   2c9e6:	2b01      	cmp	r3, #1
   2c9e8:	d006      	beq.n	2c9f8 <conn_lookup_handle+0x3c>
   2c9ea:	b25a      	sxtb	r2, r3
   2c9ec:	2a00      	cmp	r2, #0
   2c9ee:	d0eb      	beq.n	2c9c8 <conn_lookup_handle+0xc>
   2c9f0:	3b07      	subs	r3, #7
   2c9f2:	b2db      	uxtb	r3, r3
   2c9f4:	2b01      	cmp	r3, #1
   2c9f6:	d8e7      	bhi.n	2c9c8 <conn_lookup_handle+0xc>
		if (conn->handle != handle) {
   2c9f8:	f8bc 3000 	ldrh.w	r3, [ip]
   2c9fc:	42bb      	cmp	r3, r7
   2c9fe:	d101      	bne.n	2ca04 <conn_lookup_handle+0x48>
}
   2ca00:	4660      	mov	r0, ip
   2ca02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			bt_conn_unref(conn);
   2ca04:	4660      	mov	r0, ip
   2ca06:	f7ed f8d5 	bl	19bb4 <bt_conn_unref>
			continue;
   2ca0a:	e7e0      	b.n	2c9ce <conn_lookup_handle+0x12>
	return NULL;
   2ca0c:	f04f 0c00 	mov.w	ip, #0
   2ca10:	e7f6      	b.n	2ca00 <conn_lookup_handle+0x44>

0002ca12 <conn_disconnect>:
{
   2ca12:	b538      	push	{r3, r4, r5, lr}
   2ca14:	4604      	mov	r4, r0
	err = bt_hci_disconnect(conn->handle, reason);
   2ca16:	8800      	ldrh	r0, [r0, #0]
   2ca18:	f7ff fafe 	bl	2c018 <bt_hci_disconnect>
	if (err) {
   2ca1c:	4605      	mov	r5, r0
   2ca1e:	b910      	cbnz	r0, 2ca26 <conn_disconnect+0x14>
	if (conn->state == BT_CONN_CONNECTED) {
   2ca20:	7b63      	ldrb	r3, [r4, #13]
   2ca22:	2b07      	cmp	r3, #7
   2ca24:	d001      	beq.n	2ca2a <conn_disconnect+0x18>
}
   2ca26:	4628      	mov	r0, r5
   2ca28:	bd38      	pop	{r3, r4, r5, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   2ca2a:	2108      	movs	r1, #8
   2ca2c:	4620      	mov	r0, r4
   2ca2e:	f7ed f8fd 	bl	19c2c <bt_conn_set_state>
   2ca32:	e7f8      	b.n	2ca26 <conn_disconnect+0x14>

0002ca34 <bt_conn_connected>:
{
   2ca34:	b510      	push	{r4, lr}
   2ca36:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   2ca38:	f7ed fdfc 	bl	1a634 <bt_l2cap_connected>
	notify_connected(conn);
   2ca3c:	4620      	mov	r0, r4
   2ca3e:	f7ec fe75 	bl	1972c <notify_connected>
}
   2ca42:	bd10      	pop	{r4, pc}

0002ca44 <bt_conn_disconnect>:
{
   2ca44:	b508      	push	{r3, lr}
	switch (conn->state) {
   2ca46:	7b43      	ldrb	r3, [r0, #13]
   2ca48:	3b02      	subs	r3, #2
   2ca4a:	2b06      	cmp	r3, #6
   2ca4c:	d810      	bhi.n	2ca70 <bt_conn_disconnect+0x2c>
   2ca4e:	e8df f003 	tbb	[pc, r3]
   2ca52:	0f06      	.short	0x0f06
   2ca54:	0c040f0f 	.word	0x0c040f0f
   2ca58:	04          	.byte	0x04
   2ca59:	00          	.byte	0x00
   2ca5a:	2000      	movs	r0, #0
}
   2ca5c:	bd08      	pop	{r3, pc}
		conn->err = reason;
   2ca5e:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2ca60:	2100      	movs	r1, #0
   2ca62:	f7ed f8e3 	bl	19c2c <bt_conn_set_state>
		return 0;
   2ca66:	2000      	movs	r0, #0
   2ca68:	e7f8      	b.n	2ca5c <bt_conn_disconnect+0x18>
		return conn_disconnect(conn, reason);
   2ca6a:	f7ff ffd2 	bl	2ca12 <conn_disconnect>
   2ca6e:	e7f5      	b.n	2ca5c <bt_conn_disconnect+0x18>
		return -ENOTCONN;
   2ca70:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2ca74:	e7f2      	b.n	2ca5c <bt_conn_disconnect+0x18>

0002ca76 <bt_conn_set_security>:
	if (conn->state != BT_CONN_CONNECTED) {
   2ca76:	7b43      	ldrb	r3, [r0, #13]
   2ca78:	2b07      	cmp	r3, #7
   2ca7a:	d12f      	bne.n	2cadc <bt_conn_set_security+0x66>
{
   2ca7c:	b510      	push	{r4, lr}
   2ca7e:	4604      	mov	r4, r0
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   2ca80:	7a43      	ldrb	r3, [r0, #9]
   2ca82:	428b      	cmp	r3, r1
   2ca84:	d22d      	bcs.n	2cae2 <bt_conn_set_security+0x6c>
   2ca86:	7a83      	ldrb	r3, [r0, #10]
   2ca88:	428b      	cmp	r3, r1
   2ca8a:	d301      	bcc.n	2ca90 <bt_conn_set_security+0x1a>
		return 0;
   2ca8c:	2000      	movs	r0, #0
   2ca8e:	e029      	b.n	2cae4 <bt_conn_set_security+0x6e>
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   2ca90:	1d03      	adds	r3, r0, #4
	if (val) {
   2ca92:	09ca      	lsrs	r2, r1, #7
   2ca94:	d015      	beq.n	2cac2 <bt_conn_set_security+0x4c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2ca96:	f3bf 8f5b 	dmb	ish
   2ca9a:	e853 2f00 	ldrex	r2, [r3]
   2ca9e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   2caa2:	e843 2000 	strex	r0, r2, [r3]
   2caa6:	2800      	cmp	r0, #0
   2caa8:	d1f7      	bne.n	2ca9a <bt_conn_set_security+0x24>
   2caaa:	f3bf 8f5b 	dmb	ish
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   2caae:	f001 017f 	and.w	r1, r1, #127	; 0x7f
   2cab2:	72a1      	strb	r1, [r4, #10]
	err = start_security(conn);
   2cab4:	4620      	mov	r0, r4
   2cab6:	f7ff feca 	bl	2c84e <start_security>
	if (err) {
   2caba:	b198      	cbz	r0, 2cae4 <bt_conn_set_security+0x6e>
		conn->required_sec_level = conn->sec_level;
   2cabc:	7a63      	ldrb	r3, [r4, #9]
   2cabe:	72a3      	strb	r3, [r4, #10]
   2cac0:	e010      	b.n	2cae4 <bt_conn_set_security+0x6e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2cac2:	f3bf 8f5b 	dmb	ish
   2cac6:	e853 2f00 	ldrex	r2, [r3]
   2caca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
   2cace:	e843 2000 	strex	r0, r2, [r3]
   2cad2:	2800      	cmp	r0, #0
   2cad4:	d1f7      	bne.n	2cac6 <bt_conn_set_security+0x50>
   2cad6:	f3bf 8f5b 	dmb	ish
   2cada:	e7e8      	b.n	2caae <bt_conn_set_security+0x38>
		return -ENOTCONN;
   2cadc:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   2cae0:	4770      	bx	lr
		return 0;
   2cae2:	2000      	movs	r0, #0
}
   2cae4:	bd10      	pop	{r4, pc}

0002cae6 <bt_conn_get_security>:
}
   2cae6:	7a40      	ldrb	r0, [r0, #9]
   2cae8:	4770      	bx	lr

0002caea <bt_conn_add_le>:
{
   2caea:	b538      	push	{r3, r4, r5, lr}
   2caec:	4605      	mov	r5, r0
   2caee:	460c      	mov	r4, r1
	struct bt_conn *conn = acl_conn_new();
   2caf0:	f7ec ff3e 	bl	19970 <acl_conn_new>
	if (!conn) {
   2caf4:	4603      	mov	r3, r0
   2caf6:	b198      	cbz	r0, 2cb20 <bt_conn_add_le+0x36>
	conn->id = id;
   2caf8:	7205      	strb	r5, [r0, #8]
   2cafa:	6822      	ldr	r2, [r4, #0]
   2cafc:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
   2cb00:	88a1      	ldrh	r1, [r4, #4]
   2cb02:	79a2      	ldrb	r2, [r4, #6]
   2cb04:	f8a0 1094 	strh.w	r1, [r0, #148]	; 0x94
   2cb08:	f880 2096 	strb.w	r2, [r0, #150]	; 0x96
	conn->sec_level = BT_SECURITY_L1;
   2cb0c:	2201      	movs	r2, #1
   2cb0e:	7242      	strb	r2, [r0, #9]
	conn->required_sec_level = BT_SECURITY_L1;
   2cb10:	7282      	strb	r2, [r0, #10]
	conn->type = BT_CONN_TYPE_LE;
   2cb12:	7082      	strb	r2, [r0, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   2cb14:	2218      	movs	r2, #24
   2cb16:	f8a0 20a8 	strh.w	r2, [r0, #168]	; 0xa8
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
   2cb1a:	2228      	movs	r2, #40	; 0x28
   2cb1c:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
}
   2cb20:	4618      	mov	r0, r3
   2cb22:	bd38      	pop	{r3, r4, r5, pc}

0002cb24 <bt_conn_is_peer_addr_le>:
{
   2cb24:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   2cb26:	7a03      	ldrb	r3, [r0, #8]
   2cb28:	428b      	cmp	r3, r1
   2cb2a:	d001      	beq.n	2cb30 <bt_conn_is_peer_addr_le+0xc>
		return false;
   2cb2c:	2000      	movs	r0, #0
}
   2cb2e:	bd38      	pop	{r3, r4, r5, pc}
   2cb30:	4604      	mov	r4, r0
   2cb32:	4615      	mov	r5, r2
	return memcmp(a, b, sizeof(*a));
   2cb34:	2207      	movs	r2, #7
   2cb36:	f100 0190 	add.w	r1, r0, #144	; 0x90
   2cb3a:	4628      	mov	r0, r5
   2cb3c:	f004 f8dc 	bl	30cf8 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   2cb40:	b1a8      	cbz	r0, 2cb6e <bt_conn_is_peer_addr_le+0x4a>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   2cb42:	78e3      	ldrb	r3, [r4, #3]
   2cb44:	b14b      	cbz	r3, 2cb5a <bt_conn_is_peer_addr_le+0x36>
   2cb46:	2207      	movs	r2, #7
   2cb48:	f104 0197 	add.w	r1, r4, #151	; 0x97
   2cb4c:	4628      	mov	r0, r5
   2cb4e:	f004 f8d3 	bl	30cf8 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   2cb52:	fab0 f080 	clz	r0, r0
   2cb56:	0940      	lsrs	r0, r0, #5
   2cb58:	e7e9      	b.n	2cb2e <bt_conn_is_peer_addr_le+0xa>
   2cb5a:	2207      	movs	r2, #7
   2cb5c:	f104 019e 	add.w	r1, r4, #158	; 0x9e
   2cb60:	4628      	mov	r0, r5
   2cb62:	f004 f8c9 	bl	30cf8 <memcmp>
		return bt_addr_le_cmp(peer, &conn->le.resp_addr) == 0;
   2cb66:	fab0 f080 	clz	r0, r0
   2cb6a:	0940      	lsrs	r0, r0, #5
   2cb6c:	e7df      	b.n	2cb2e <bt_conn_is_peer_addr_le+0xa>
		return true;
   2cb6e:	2001      	movs	r0, #1
   2cb70:	e7dd      	b.n	2cb2e <bt_conn_is_peer_addr_le+0xa>

0002cb72 <bt_conn_get_dst>:
}
   2cb72:	3090      	adds	r0, #144	; 0x90
   2cb74:	4770      	bx	lr

0002cb76 <bt_conn_le_conn_update>:
{
   2cb76:	b570      	push	{r4, r5, r6, lr}
   2cb78:	4605      	mov	r5, r0
   2cb7a:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   2cb7c:	210e      	movs	r1, #14
   2cb7e:	f242 0013 	movw	r0, #8211	; 0x2013
   2cb82:	f7ea fccf 	bl	17524 <bt_hci_cmd_create>
	if (!buf) {
   2cb86:	b1c8      	cbz	r0, 2cbbc <bt_conn_le_conn_update+0x46>
   2cb88:	4606      	mov	r6, r0
	return net_buf_simple_add(&buf->b, len);
   2cb8a:	210e      	movs	r1, #14
   2cb8c:	3008      	adds	r0, #8
   2cb8e:	f7f3 fd11 	bl	205b4 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   2cb92:	2200      	movs	r2, #0
   2cb94:	6002      	str	r2, [r0, #0]
   2cb96:	6042      	str	r2, [r0, #4]
   2cb98:	6082      	str	r2, [r0, #8]
   2cb9a:	8182      	strh	r2, [r0, #12]
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   2cb9c:	882b      	ldrh	r3, [r5, #0]
   2cb9e:	8003      	strh	r3, [r0, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   2cba0:	8823      	ldrh	r3, [r4, #0]
   2cba2:	8043      	strh	r3, [r0, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   2cba4:	8863      	ldrh	r3, [r4, #2]
   2cba6:	8083      	strh	r3, [r0, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   2cba8:	88a3      	ldrh	r3, [r4, #4]
   2cbaa:	80c3      	strh	r3, [r0, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   2cbac:	88e3      	ldrh	r3, [r4, #6]
   2cbae:	8103      	strh	r3, [r0, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2cbb0:	4631      	mov	r1, r6
   2cbb2:	f242 0013 	movw	r0, #8211	; 0x2013
   2cbb6:	f7ea fd03 	bl	175c0 <bt_hci_cmd_send_sync>
}
   2cbba:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   2cbbc:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2cbc0:	e7fb      	b.n	2cbba <bt_conn_le_conn_update+0x44>

0002cbc2 <l2cap_connected>:
}
   2cbc2:	4770      	bx	lr

0002cbc4 <l2cap_disconnected>:
}
   2cbc4:	4770      	bx	lr

0002cbc6 <l2cap_chan_recv>:
{
   2cbc6:	b510      	push	{r4, lr}
   2cbc8:	460c      	mov	r4, r1
	chan->ops->recv(chan, buf);
   2cbca:	6843      	ldr	r3, [r0, #4]
   2cbcc:	691b      	ldr	r3, [r3, #16]
   2cbce:	4798      	blx	r3
	net_buf_unref(buf);
   2cbd0:	4620      	mov	r0, r4
   2cbd2:	f7f3 fbd7 	bl	20384 <net_buf_unref>
}
   2cbd6:	bd10      	pop	{r4, pc}

0002cbd8 <bt_l2cap_chan_del>:
{
   2cbd8:	b538      	push	{r3, r4, r5, lr}
   2cbda:	4604      	mov	r4, r0
	const struct bt_l2cap_chan_ops *ops = chan->ops;
   2cbdc:	6845      	ldr	r5, [r0, #4]
	if (!chan->conn) {
   2cbde:	6803      	ldr	r3, [r0, #0]
   2cbe0:	b123      	cbz	r3, 2cbec <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   2cbe2:	686b      	ldr	r3, [r5, #4]
   2cbe4:	b103      	cbz	r3, 2cbe8 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   2cbe6:	4798      	blx	r3
	chan->conn = NULL;
   2cbe8:	2300      	movs	r3, #0
   2cbea:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   2cbec:	68e3      	ldr	r3, [r4, #12]
   2cbee:	b10b      	cbz	r3, 2cbf4 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   2cbf0:	4620      	mov	r0, r4
   2cbf2:	4798      	blx	r3
	if (ops->released) {
   2cbf4:	69eb      	ldr	r3, [r5, #28]
   2cbf6:	b10b      	cbz	r3, 2cbfc <bt_l2cap_chan_del+0x24>
		ops->released(chan);
   2cbf8:	4620      	mov	r0, r4
   2cbfa:	4798      	blx	r3
}
   2cbfc:	bd38      	pop	{r3, r4, r5, pc}

0002cbfe <bt_l2cap_chan_add>:
{
   2cbfe:	b410      	push	{r4}
	sys_slist_append(&conn->channels, &chan->node);
   2cc00:	f101 0308 	add.w	r3, r1, #8
	parent->next = child;
   2cc04:	2400      	movs	r4, #0
   2cc06:	608c      	str	r4, [r1, #8]
	return list->tail;
   2cc08:	6d84      	ldr	r4, [r0, #88]	; 0x58
Z_GENLIST_APPEND(slist, snode)
   2cc0a:	b12c      	cbz	r4, 2cc18 <bt_l2cap_chan_add+0x1a>
	parent->next = child;
   2cc0c:	6023      	str	r3, [r4, #0]
	list->tail = node;
   2cc0e:	6583      	str	r3, [r0, #88]	; 0x58
	chan->conn = conn;
   2cc10:	6008      	str	r0, [r1, #0]
	chan->destroy = destroy;
   2cc12:	60ca      	str	r2, [r1, #12]
}
   2cc14:	bc10      	pop	{r4}
   2cc16:	4770      	bx	lr
   2cc18:	6583      	str	r3, [r0, #88]	; 0x58
	list->head = node;
   2cc1a:	6543      	str	r3, [r0, #84]	; 0x54
}
   2cc1c:	e7f8      	b.n	2cc10 <bt_l2cap_chan_add+0x12>

0002cc1e <bt_l2cap_disconnected>:
{
   2cc1e:	b510      	push	{r4, lr}
	return list->head;
   2cc20:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2cc22:	b140      	cbz	r0, 2cc36 <bt_l2cap_disconnected+0x18>
   2cc24:	3808      	subs	r0, #8
   2cc26:	d008      	beq.n	2cc3a <bt_l2cap_disconnected+0x1c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2cc28:	f110 0408 	adds.w	r4, r0, #8
   2cc2c:	d00a      	beq.n	2cc44 <bt_l2cap_disconnected+0x26>
	return node->next;
   2cc2e:	6884      	ldr	r4, [r0, #8]
   2cc30:	b144      	cbz	r4, 2cc44 <bt_l2cap_disconnected+0x26>
   2cc32:	3c08      	subs	r4, #8
   2cc34:	e006      	b.n	2cc44 <bt_l2cap_disconnected+0x26>
   2cc36:	4604      	mov	r4, r0
   2cc38:	e004      	b.n	2cc44 <bt_l2cap_disconnected+0x26>
   2cc3a:	4604      	mov	r4, r0
   2cc3c:	e002      	b.n	2cc44 <bt_l2cap_disconnected+0x26>
   2cc3e:	4623      	mov	r3, r4
   2cc40:	4620      	mov	r0, r4
   2cc42:	461c      	mov	r4, r3
   2cc44:	b158      	cbz	r0, 2cc5e <bt_l2cap_disconnected+0x40>
		bt_l2cap_chan_del(chan);
   2cc46:	f7ff ffc7 	bl	2cbd8 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2cc4a:	2c00      	cmp	r4, #0
   2cc4c:	d0f7      	beq.n	2cc3e <bt_l2cap_disconnected+0x20>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2cc4e:	f114 0308 	adds.w	r3, r4, #8
   2cc52:	d0f5      	beq.n	2cc40 <bt_l2cap_disconnected+0x22>
	return node->next;
   2cc54:	68a3      	ldr	r3, [r4, #8]
   2cc56:	2b00      	cmp	r3, #0
   2cc58:	d0f2      	beq.n	2cc40 <bt_l2cap_disconnected+0x22>
   2cc5a:	3b08      	subs	r3, #8
   2cc5c:	e7f0      	b.n	2cc40 <bt_l2cap_disconnected+0x22>
}
   2cc5e:	bd10      	pop	{r4, pc}

0002cc60 <bt_l2cap_security_changed>:
{
   2cc60:	b538      	push	{r3, r4, r5, lr}
   2cc62:	460d      	mov	r5, r1
	return list->head;
   2cc64:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2cc66:	b140      	cbz	r0, 2cc7a <bt_l2cap_security_changed+0x1a>
   2cc68:	3808      	subs	r0, #8
   2cc6a:	d008      	beq.n	2cc7e <bt_l2cap_security_changed+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2cc6c:	f110 0408 	adds.w	r4, r0, #8
   2cc70:	d00a      	beq.n	2cc88 <bt_l2cap_security_changed+0x28>
	return node->next;
   2cc72:	6884      	ldr	r4, [r0, #8]
   2cc74:	b144      	cbz	r4, 2cc88 <bt_l2cap_security_changed+0x28>
   2cc76:	3c08      	subs	r4, #8
   2cc78:	e006      	b.n	2cc88 <bt_l2cap_security_changed+0x28>
   2cc7a:	4604      	mov	r4, r0
   2cc7c:	e004      	b.n	2cc88 <bt_l2cap_security_changed+0x28>
   2cc7e:	4604      	mov	r4, r0
   2cc80:	e002      	b.n	2cc88 <bt_l2cap_security_changed+0x28>
   2cc82:	4623      	mov	r3, r4
   2cc84:	4620      	mov	r0, r4
   2cc86:	461c      	mov	r4, r3
   2cc88:	b170      	cbz	r0, 2cca8 <bt_l2cap_security_changed+0x48>
		if (chan->ops->encrypt_change) {
   2cc8a:	6843      	ldr	r3, [r0, #4]
   2cc8c:	689b      	ldr	r3, [r3, #8]
   2cc8e:	b10b      	cbz	r3, 2cc94 <bt_l2cap_security_changed+0x34>
			chan->ops->encrypt_change(chan, hci_status);
   2cc90:	4629      	mov	r1, r5
   2cc92:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2cc94:	2c00      	cmp	r4, #0
   2cc96:	d0f4      	beq.n	2cc82 <bt_l2cap_security_changed+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2cc98:	f114 0308 	adds.w	r3, r4, #8
   2cc9c:	d0f2      	beq.n	2cc84 <bt_l2cap_security_changed+0x24>
	return node->next;
   2cc9e:	68a3      	ldr	r3, [r4, #8]
   2cca0:	2b00      	cmp	r3, #0
   2cca2:	d0ef      	beq.n	2cc84 <bt_l2cap_security_changed+0x24>
   2cca4:	3b08      	subs	r3, #8
   2cca6:	e7ed      	b.n	2cc84 <bt_l2cap_security_changed+0x24>
}
   2cca8:	bd38      	pop	{r3, r4, r5, pc}

0002ccaa <bt_l2cap_create_pdu_timeout>:
{
   2ccaa:	b508      	push	{r3, lr}
	return bt_conn_create_pdu_timeout(pool,
   2ccac:	3104      	adds	r1, #4
   2ccae:	f7ed f8b7 	bl	19e20 <bt_conn_create_pdu_timeout>
}
   2ccb2:	bd08      	pop	{r3, pc}

0002ccb4 <bt_l2cap_send_cb>:
{
   2ccb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ccb6:	4605      	mov	r5, r0
   2ccb8:	460f      	mov	r7, r1
   2ccba:	4614      	mov	r4, r2
   2ccbc:	461e      	mov	r6, r3
	return net_buf_simple_push(&buf->b, len);
   2ccbe:	2104      	movs	r1, #4
   2ccc0:	f102 0008 	add.w	r0, r2, #8
   2ccc4:	f7f3 fc56 	bl	20574 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2ccc8:	89a3      	ldrh	r3, [r4, #12]
   2ccca:	3b04      	subs	r3, #4
   2cccc:	8003      	strh	r3, [r0, #0]
	hdr->cid = sys_cpu_to_le16(cid);
   2ccce:	8047      	strh	r7, [r0, #2]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2ccd0:	9b06      	ldr	r3, [sp, #24]
   2ccd2:	4632      	mov	r2, r6
   2ccd4:	4621      	mov	r1, r4
   2ccd6:	4628      	mov	r0, r5
   2ccd8:	f7ec ff08 	bl	19aec <bt_conn_send_cb>
}
   2ccdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002ccde <l2cap_send_reject>:
{
   2ccde:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2cce2:	b083      	sub	sp, #12
   2cce4:	4605      	mov	r5, r0
   2cce6:	4690      	mov	r8, r2
   2cce8:	461c      	mov	r4, r3
   2ccea:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   2ccee:	1cbb      	adds	r3, r7, #2
   2ccf0:	460a      	mov	r2, r1
   2ccf2:	2101      	movs	r1, #1
   2ccf4:	2000      	movs	r0, #0
   2ccf6:	f7ed fceb 	bl	1a6d0 <l2cap_create_le_sig_pdu>
	if (!buf) {
   2ccfa:	b1b0      	cbz	r0, 2cd2a <l2cap_send_reject+0x4c>
   2ccfc:	4606      	mov	r6, r0
	return net_buf_simple_add(&buf->b, len);
   2ccfe:	f100 0908 	add.w	r9, r0, #8
   2cd02:	2102      	movs	r1, #2
   2cd04:	4648      	mov	r0, r9
   2cd06:	f7f3 fc55 	bl	205b4 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   2cd0a:	f8a0 8000 	strh.w	r8, [r0]
	if (data) {
   2cd0e:	b124      	cbz	r4, 2cd1a <l2cap_send_reject+0x3c>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2cd10:	463a      	mov	r2, r7
   2cd12:	4621      	mov	r1, r4
   2cd14:	4648      	mov	r0, r9
   2cd16:	f002 fa33 	bl	2f180 <net_buf_simple_add_mem>
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   2cd1a:	2300      	movs	r3, #0
   2cd1c:	9300      	str	r3, [sp, #0]
   2cd1e:	4632      	mov	r2, r6
   2cd20:	2105      	movs	r1, #5
   2cd22:	4628      	mov	r0, r5
   2cd24:	f7ff ffc6 	bl	2ccb4 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   2cd28:	b910      	cbnz	r0, 2cd30 <l2cap_send_reject+0x52>
}
   2cd2a:	b003      	add	sp, #12
   2cd2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		net_buf_unref(buf);
   2cd30:	4630      	mov	r0, r6
   2cd32:	f7f3 fb27 	bl	20384 <net_buf_unref>
}
   2cd36:	e7f8      	b.n	2cd2a <l2cap_send_reject+0x4c>

0002cd38 <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   2cd38:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2cd3a:	b110      	cbz	r0, 2cd42 <bt_l2cap_le_lookup_tx_cid+0xa>
   2cd3c:	3808      	subs	r0, #8
   2cd3e:	e000      	b.n	2cd42 <bt_l2cap_le_lookup_tx_cid+0xa>
   2cd40:	4618      	mov	r0, r3
   2cd42:	b148      	cbz	r0, 2cd58 <bt_l2cap_le_lookup_tx_cid+0x20>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   2cd44:	8c83      	ldrh	r3, [r0, #36]	; 0x24
   2cd46:	428b      	cmp	r3, r1
   2cd48:	d006      	beq.n	2cd58 <bt_l2cap_le_lookup_tx_cid+0x20>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2cd4a:	f110 0308 	adds.w	r3, r0, #8
   2cd4e:	d0f7      	beq.n	2cd40 <bt_l2cap_le_lookup_tx_cid+0x8>
	return node->next;
   2cd50:	6880      	ldr	r0, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2cd52:	b108      	cbz	r0, 2cd58 <bt_l2cap_le_lookup_tx_cid+0x20>
   2cd54:	3808      	subs	r0, #8
   2cd56:	e7f4      	b.n	2cd42 <bt_l2cap_le_lookup_tx_cid+0xa>
}
   2cd58:	4770      	bx	lr

0002cd5a <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   2cd5a:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2cd5c:	b110      	cbz	r0, 2cd64 <bt_l2cap_le_lookup_rx_cid+0xa>
   2cd5e:	3808      	subs	r0, #8
   2cd60:	e000      	b.n	2cd64 <bt_l2cap_le_lookup_rx_cid+0xa>
   2cd62:	4618      	mov	r0, r3
   2cd64:	b148      	cbz	r0, 2cd7a <bt_l2cap_le_lookup_rx_cid+0x20>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2cd66:	8a83      	ldrh	r3, [r0, #20]
   2cd68:	428b      	cmp	r3, r1
   2cd6a:	d006      	beq.n	2cd7a <bt_l2cap_le_lookup_rx_cid+0x20>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2cd6c:	f110 0308 	adds.w	r3, r0, #8
   2cd70:	d0f7      	beq.n	2cd62 <bt_l2cap_le_lookup_rx_cid+0x8>
	return node->next;
   2cd72:	6880      	ldr	r0, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2cd74:	b108      	cbz	r0, 2cd7a <bt_l2cap_le_lookup_rx_cid+0x20>
   2cd76:	3808      	subs	r0, #8
   2cd78:	e7f4      	b.n	2cd64 <bt_l2cap_le_lookup_rx_cid+0xa>
}
   2cd7a:	4770      	bx	lr

0002cd7c <bt_l2cap_update_conn_param>:
{
   2cd7c:	b570      	push	{r4, r5, r6, lr}
   2cd7e:	b082      	sub	sp, #8
   2cd80:	4605      	mov	r5, r0
   2cd82:	460c      	mov	r4, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   2cd84:	f7ed fbfc 	bl	1a580 <get_ident>
   2cd88:	4602      	mov	r2, r0
   2cd8a:	2308      	movs	r3, #8
   2cd8c:	2112      	movs	r1, #18
   2cd8e:	2000      	movs	r0, #0
   2cd90:	f7ed fc9e 	bl	1a6d0 <l2cap_create_le_sig_pdu>
	if (!buf) {
   2cd94:	b1e0      	cbz	r0, 2cdd0 <bt_l2cap_update_conn_param+0x54>
   2cd96:	4606      	mov	r6, r0
	return net_buf_simple_add(&buf->b, len);
   2cd98:	2108      	movs	r1, #8
   2cd9a:	4408      	add	r0, r1
   2cd9c:	f7f3 fc0a 	bl	205b4 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   2cda0:	8823      	ldrh	r3, [r4, #0]
   2cda2:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   2cda4:	8863      	ldrh	r3, [r4, #2]
   2cda6:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   2cda8:	88a3      	ldrh	r3, [r4, #4]
   2cdaa:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   2cdac:	88e3      	ldrh	r3, [r4, #6]
   2cdae:	80c3      	strh	r3, [r0, #6]
   2cdb0:	2300      	movs	r3, #0
   2cdb2:	9300      	str	r3, [sp, #0]
   2cdb4:	4632      	mov	r2, r6
   2cdb6:	2105      	movs	r1, #5
   2cdb8:	4628      	mov	r0, r5
   2cdba:	f7ff ff7b 	bl	2ccb4 <bt_l2cap_send_cb>
	if (err) {
   2cdbe:	4604      	mov	r4, r0
   2cdc0:	b910      	cbnz	r0, 2cdc8 <bt_l2cap_update_conn_param+0x4c>
}
   2cdc2:	4620      	mov	r0, r4
   2cdc4:	b002      	add	sp, #8
   2cdc6:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
   2cdc8:	4630      	mov	r0, r6
   2cdca:	f7f3 fadb 	bl	20384 <net_buf_unref>
		return err;
   2cdce:	e7f8      	b.n	2cdc2 <bt_l2cap_update_conn_param+0x46>
		return -ENOMEM;
   2cdd0:	f06f 040b 	mvn.w	r4, #11
   2cdd4:	e7f5      	b.n	2cdc2 <bt_l2cap_update_conn_param+0x46>

0002cdd6 <bt_l2cap_init>:
#if defined(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL)
	for (size_t i = 0; i < ARRAY_SIZE(l2cap_tx_meta_data); i++) {
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   2cdd6:	4770      	bx	lr

0002cdd8 <get_first_req_matching_chan>:
{
   2cdd8:	4603      	mov	r3, r0
	return list->head;
   2cdda:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   2cddc:	b120      	cbz	r0, 2cde8 <get_first_req_matching_chan+0x10>
	return node->next;
   2cdde:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   2cde0:	601a      	str	r2, [r3, #0]
	return list->tail;
   2cde2:	6859      	ldr	r1, [r3, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2cde4:	4288      	cmp	r0, r1
   2cde6:	d000      	beq.n	2cdea <get_first_req_matching_chan+0x12>
}
   2cde8:	4770      	bx	lr
	list->tail = node;
   2cdea:	605a      	str	r2, [r3, #4]
		return ATT_REQ(node);
   2cdec:	e7fc      	b.n	2cde8 <get_first_req_matching_chan+0x10>

0002cdee <range_is_valid>:
	if (!start || !end) {
   2cdee:	b120      	cbz	r0, 2cdfa <range_is_valid+0xc>
   2cdf0:	b119      	cbz	r1, 2cdfa <range_is_valid+0xc>
	if (start > end) {
   2cdf2:	4288      	cmp	r0, r1
   2cdf4:	d806      	bhi.n	2ce04 <range_is_valid+0x16>
	return true;
   2cdf6:	2001      	movs	r0, #1
}
   2cdf8:	4770      	bx	lr
		if (err) {
   2cdfa:	b10a      	cbz	r2, 2ce00 <range_is_valid+0x12>
			*err = 0U;
   2cdfc:	2300      	movs	r3, #0
   2cdfe:	8013      	strh	r3, [r2, #0]
		return false;
   2ce00:	2000      	movs	r0, #0
   2ce02:	4770      	bx	lr
		if (err) {
   2ce04:	b102      	cbz	r2, 2ce08 <range_is_valid+0x1a>
			*err = start;
   2ce06:	8010      	strh	r0, [r2, #0]
		return false;
   2ce08:	2000      	movs	r0, #0
   2ce0a:	4770      	bx	lr

0002ce0c <err_to_att>:
	if (err < 0 && err >= -0xff) {
   2ce0c:	f110 0fff 	cmn.w	r0, #255	; 0xff
   2ce10:	d201      	bcs.n	2ce16 <err_to_att+0xa>
	return BT_ATT_ERR_UNLIKELY;
   2ce12:	200e      	movs	r0, #14
}
   2ce14:	4770      	bx	lr
		return -err;
   2ce16:	4240      	negs	r0, r0
   2ce18:	b2c0      	uxtb	r0, r0
   2ce1a:	4770      	bx	lr

0002ce1c <attr_read_type_cb>:
{
   2ce1c:	b410      	push	{r4}
	if (!data->rsp->len) {
   2ce1e:	68d4      	ldr	r4, [r2, #12]
   2ce20:	7823      	ldrb	r3, [r4, #0]
   2ce22:	b923      	cbnz	r3, 2ce2e <attr_read_type_cb+0x12>
		data->rsp->len = read + sizeof(*data->item);
   2ce24:	3102      	adds	r1, #2
   2ce26:	7021      	strb	r1, [r4, #0]
	return true;
   2ce28:	2001      	movs	r0, #1
}
   2ce2a:	bc10      	pop	{r4}
   2ce2c:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   2ce2e:	3102      	adds	r1, #2
   2ce30:	428b      	cmp	r3, r1
   2ce32:	d005      	beq.n	2ce40 <attr_read_type_cb+0x24>
		frag->len -= sizeof(*data->item);
   2ce34:	8983      	ldrh	r3, [r0, #12]
   2ce36:	3b02      	subs	r3, #2
   2ce38:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   2ce3a:	2000      	movs	r0, #0
   2ce3c:	6110      	str	r0, [r2, #16]
		return false;
   2ce3e:	e7f4      	b.n	2ce2a <attr_read_type_cb+0xe>
	return true;
   2ce40:	2001      	movs	r0, #1
   2ce42:	e7f2      	b.n	2ce2a <attr_read_type_cb+0xe>

0002ce44 <attr_read_group_cb>:
	if (!data->rsp->len) {
   2ce44:	68d0      	ldr	r0, [r2, #12]
   2ce46:	7803      	ldrb	r3, [r0, #0]
   2ce48:	b91b      	cbnz	r3, 2ce52 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   2ce4a:	3104      	adds	r1, #4
   2ce4c:	7001      	strb	r1, [r0, #0]
	return true;
   2ce4e:	2001      	movs	r0, #1
   2ce50:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   2ce52:	3104      	adds	r1, #4
   2ce54:	428b      	cmp	r3, r1
   2ce56:	d006      	beq.n	2ce66 <attr_read_group_cb+0x22>
		data->buf->len -= sizeof(*data->group);
   2ce58:	6891      	ldr	r1, [r2, #8]
   2ce5a:	898b      	ldrh	r3, [r1, #12]
   2ce5c:	3b04      	subs	r3, #4
   2ce5e:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   2ce60:	2000      	movs	r0, #0
   2ce62:	6110      	str	r0, [r2, #16]
		return false;
   2ce64:	4770      	bx	lr
	return true;
   2ce66:	2001      	movs	r0, #1
}
   2ce68:	4770      	bx	lr

0002ce6a <att_prepare_write_req>:
}
   2ce6a:	2006      	movs	r0, #6
   2ce6c:	4770      	bx	lr

0002ce6e <att_exec_write_req>:
}
   2ce6e:	2006      	movs	r0, #6
   2ce70:	4770      	bx	lr

0002ce72 <att_op_get_type>:
	switch (op) {
   2ce72:	1e43      	subs	r3, r0, #1
   2ce74:	2bd1      	cmp	r3, #209	; 0xd1
   2ce76:	d874      	bhi.n	2cf62 <att_op_get_type+0xf0>
   2ce78:	e8df f003 	tbb	[pc, r3]
   2ce7c:	696d696d 	.word	0x696d696d
   2ce80:	696d696d 	.word	0x696d696d
   2ce84:	696d696d 	.word	0x696d696d
   2ce88:	696d696d 	.word	0x696d696d
   2ce8c:	736d696d 	.word	0x736d696d
   2ce90:	696d6973 	.word	0x696d6973
   2ce94:	736f736d 	.word	0x736f736d
   2ce98:	69737871 	.word	0x69737871
   2ce9c:	736f736d 	.word	0x736f736d
   2cea0:	73737373 	.word	0x73737373
   2cea4:	73737373 	.word	0x73737373
   2cea8:	73737373 	.word	0x73737373
   2ceac:	73737373 	.word	0x73737373
   2ceb0:	73737373 	.word	0x73737373
   2ceb4:	73737373 	.word	0x73737373
   2ceb8:	73737373 	.word	0x73737373
   2cebc:	73737373 	.word	0x73737373
   2cec0:	73737373 	.word	0x73737373
   2cec4:	73737373 	.word	0x73737373
   2cec8:	73737373 	.word	0x73737373
   2cecc:	73736b73 	.word	0x73736b73
   2ced0:	73737373 	.word	0x73737373
   2ced4:	73737373 	.word	0x73737373
   2ced8:	73737373 	.word	0x73737373
   2cedc:	73737373 	.word	0x73737373
   2cee0:	73737373 	.word	0x73737373
   2cee4:	73737373 	.word	0x73737373
   2cee8:	73737373 	.word	0x73737373
   2ceec:	73737373 	.word	0x73737373
   2cef0:	73737373 	.word	0x73737373
   2cef4:	73737373 	.word	0x73737373
   2cef8:	73737373 	.word	0x73737373
   2cefc:	73737373 	.word	0x73737373
   2cf00:	73737373 	.word	0x73737373
   2cf04:	73737373 	.word	0x73737373
   2cf08:	73737373 	.word	0x73737373
   2cf0c:	73737373 	.word	0x73737373
   2cf10:	73737373 	.word	0x73737373
   2cf14:	73737373 	.word	0x73737373
   2cf18:	73737373 	.word	0x73737373
   2cf1c:	73737373 	.word	0x73737373
   2cf20:	73737373 	.word	0x73737373
   2cf24:	73737373 	.word	0x73737373
   2cf28:	73737373 	.word	0x73737373
   2cf2c:	73737373 	.word	0x73737373
   2cf30:	73737373 	.word	0x73737373
   2cf34:	73737373 	.word	0x73737373
   2cf38:	73737373 	.word	0x73737373
   2cf3c:	73737373 	.word	0x73737373
   2cf40:	73737373 	.word	0x73737373
   2cf44:	73737373 	.word	0x73737373
   2cf48:	73737373 	.word	0x73737373
   2cf4c:	6b73      	.short	0x6b73
   2cf4e:	2001      	movs	r0, #1
   2cf50:	4770      	bx	lr
		return ATT_COMMAND;
   2cf52:	2000      	movs	r0, #0
   2cf54:	4770      	bx	lr
		return ATT_RESPONSE;
   2cf56:	2002      	movs	r0, #2
   2cf58:	4770      	bx	lr
		return ATT_NOTIFICATION;
   2cf5a:	2003      	movs	r0, #3
   2cf5c:	4770      	bx	lr
		return ATT_INDICATION;
   2cf5e:	2005      	movs	r0, #5
   2cf60:	4770      	bx	lr
	if (op & ATT_CMD_MASK) {
   2cf62:	f010 0f40 	tst.w	r0, #64	; 0x40
   2cf66:	d103      	bne.n	2cf70 <att_op_get_type+0xfe>
	return ATT_UNKNOWN;
   2cf68:	2006      	movs	r0, #6
   2cf6a:	4770      	bx	lr
		return ATT_CONFIRMATION;
   2cf6c:	2004      	movs	r0, #4
   2cf6e:	4770      	bx	lr
		return ATT_COMMAND;
   2cf70:	2000      	movs	r0, #0
}
   2cf72:	4770      	bx	lr

0002cf74 <att_chan_attach>:
{
   2cf74:	b538      	push	{r3, r4, r5, lr}
   2cf76:	4604      	mov	r4, r0
   2cf78:	460d      	mov	r5, r1
	return list->head;
   2cf7a:	6a83      	ldr	r3, [r0, #40]	; 0x28
	if (sys_slist_is_empty(&att->chans)) {
   2cf7c:	b143      	cbz	r3, 2cf90 <att_chan_attach+0x1c>
	sys_slist_prepend(&att->chans, &chan->node);
   2cf7e:	f105 03f0 	add.w	r3, r5, #240	; 0xf0
   2cf82:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	parent->next = child;
   2cf84:	f8c5 20f0 	str.w	r2, [r5, #240]	; 0xf0
	list->head = node;
   2cf88:	62a3      	str	r3, [r4, #40]	; 0x28
	return list->tail;
   2cf8a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
Z_GENLIST_PREPEND(slist, snode)
   2cf8c:	b122      	cbz	r2, 2cf98 <att_chan_attach+0x24>
}
   2cf8e:	bd38      	pop	{r3, r4, r5, pc}
		k_fifo_init(&att->tx_queue);
   2cf90:	300c      	adds	r0, #12
	z_impl_k_queue_init(queue);
   2cf92:	f003 fd19 	bl	309c8 <z_impl_k_queue_init>
}
   2cf96:	e7f2      	b.n	2cf7e <att_chan_attach+0xa>
	list->tail = node;
   2cf98:	62e3      	str	r3, [r4, #44]	; 0x2c
}
   2cf9a:	e7f8      	b.n	2cf8e <att_chan_attach+0x1a>

0002cf9c <get_first_buf_matching_chan>:
{
   2cf9c:	b508      	push	{r3, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   2cf9e:	2200      	movs	r2, #0
   2cfa0:	2300      	movs	r3, #0
   2cfa2:	f7f3 f881 	bl	200a8 <net_buf_get>
}
   2cfa6:	bd08      	pop	{r3, pc}

0002cfa8 <write_cb>:
{
   2cfa8:	b5f0      	push	{r4, r5, r6, r7, lr}
   2cfaa:	b083      	sub	sp, #12
   2cfac:	4606      	mov	r6, r0
   2cfae:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   2cfb0:	f44f 7295 	mov.w	r2, #298	; 0x12a
   2cfb4:	4601      	mov	r1, r0
   2cfb6:	6820      	ldr	r0, [r4, #0]
   2cfb8:	f001 f88b 	bl	2e0d2 <bt_gatt_check_perm>
   2cfbc:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   2cfbe:	bb08      	cbnz	r0, 2d004 <write_cb+0x5c>
   2cfc0:	4605      	mov	r5, r0
	if (!data->req) {
   2cfc2:	7a23      	ldrb	r3, [r4, #8]
   2cfc4:	b11b      	cbz	r3, 2cfce <write_cb+0x26>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   2cfc6:	2b18      	cmp	r3, #24
   2cfc8:	d016      	beq.n	2cff8 <write_cb+0x50>
	uint8_t flags = 0U;
   2cfca:	4603      	mov	r3, r0
   2cfcc:	e000      	b.n	2cfd0 <write_cb+0x28>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   2cfce:	2302      	movs	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   2cfd0:	68b7      	ldr	r7, [r6, #8]
   2cfd2:	9301      	str	r3, [sp, #4]
   2cfd4:	8a63      	ldrh	r3, [r4, #18]
   2cfd6:	9300      	str	r3, [sp, #0]
   2cfd8:	8a23      	ldrh	r3, [r4, #16]
   2cfda:	68e2      	ldr	r2, [r4, #12]
   2cfdc:	4631      	mov	r1, r6
   2cfde:	6820      	ldr	r0, [r4, #0]
   2cfe0:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   2cfe2:	2800      	cmp	r0, #0
   2cfe4:	db02      	blt.n	2cfec <write_cb+0x44>
   2cfe6:	8a23      	ldrh	r3, [r4, #16]
   2cfe8:	4298      	cmp	r0, r3
   2cfea:	d007      	beq.n	2cffc <write_cb+0x54>
		data->err = err_to_att(write);
   2cfec:	f7ff ff0e 	bl	2ce0c <err_to_att>
   2cff0:	7520      	strb	r0, [r4, #20]
}
   2cff2:	4628      	mov	r0, r5
   2cff4:	b003      	add	sp, #12
   2cff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		flags |= BT_GATT_WRITE_FLAG_EXECUTE;
   2cff8:	2304      	movs	r3, #4
   2cffa:	e7e9      	b.n	2cfd0 <write_cb+0x28>
	data->err = 0U;
   2cffc:	2300      	movs	r3, #0
   2cffe:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   2d000:	2501      	movs	r5, #1
   2d002:	e7f6      	b.n	2cff2 <write_cb+0x4a>
		return BT_GATT_ITER_STOP;
   2d004:	2500      	movs	r5, #0
   2d006:	e7f4      	b.n	2cff2 <write_cb+0x4a>

0002d008 <att_chan_read>:
{
   2d008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d00c:	b085      	sub	sp, #20
   2d00e:	4680      	mov	r8, r0
   2d010:	4689      	mov	r9, r1
   2d012:	9202      	str	r2, [sp, #8]
   2d014:	461d      	mov	r5, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   2d016:	6843      	ldr	r3, [r0, #4]
   2d018:	9303      	str	r3, [sp, #12]
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2d01a:	8d40      	ldrh	r0, [r0, #42]	; 0x2a
	while (buf) {
   2d01c:	4613      	mov	r3, r2
	size_t bytes = 0;
   2d01e:	2200      	movs	r2, #0
	while (buf) {
   2d020:	e002      	b.n	2d028 <att_chan_read+0x20>
		bytes += buf->len;
   2d022:	8999      	ldrh	r1, [r3, #12]
   2d024:	440a      	add	r2, r1
		buf = buf->frags;
   2d026:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   2d028:	2b00      	cmp	r3, #0
   2d02a:	d1fa      	bne.n	2d022 <att_chan_read+0x1a>
   2d02c:	4290      	cmp	r0, r2
   2d02e:	d804      	bhi.n	2d03a <att_chan_read+0x32>
		return 0;
   2d030:	2400      	movs	r4, #0
}
   2d032:	4620      	mov	r0, r4
   2d034:	b005      	add	sp, #20
   2d036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(buf);
   2d03a:	9802      	ldr	r0, [sp, #8]
   2d03c:	f7f3 f9f4 	bl	20428 <net_buf_frag_last>
   2d040:	4607      	mov	r7, r0
	size_t len, total = 0;
   2d042:	f04f 0a00 	mov.w	sl, #0
   2d046:	e082      	b.n	2d14e <att_chan_read+0x146>
		bytes += buf->len;
   2d048:	8999      	ldrh	r1, [r3, #12]
   2d04a:	440a      	add	r2, r1
		buf = buf->frags;
   2d04c:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   2d04e:	2b00      	cmp	r3, #0
   2d050:	d1fa      	bne.n	2d048 <att_chan_read+0x40>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2d052:	1aa4      	subs	r4, r4, r2
	return net_buf_simple_tailroom(&buf->b);
   2d054:	f107 0608 	add.w	r6, r7, #8
   2d058:	4630      	mov	r0, r6
   2d05a:	f002 f888 	bl	2f16e <net_buf_simple_tailroom>
   2d05e:	4284      	cmp	r4, r0
   2d060:	d326      	bcc.n	2d0b0 <att_chan_read+0xa8>
   2d062:	4630      	mov	r0, r6
   2d064:	f002 f883 	bl	2f16e <net_buf_simple_tailroom>
   2d068:	4606      	mov	r6, r0
		if (!len) {
   2d06a:	b36e      	cbz	r6, 2d0c8 <att_chan_read+0xc0>
		read = attr->read(conn, attr, frag->data + frag->len, len,
   2d06c:	f8d9 4004 	ldr.w	r4, [r9, #4]
   2d070:	68b9      	ldr	r1, [r7, #8]
   2d072:	89ba      	ldrh	r2, [r7, #12]
   2d074:	9500      	str	r5, [sp, #0]
   2d076:	b2b3      	uxth	r3, r6
   2d078:	440a      	add	r2, r1
   2d07a:	4649      	mov	r1, r9
   2d07c:	9803      	ldr	r0, [sp, #12]
   2d07e:	47a0      	blx	r4
		if (read < 0) {
   2d080:	1e04      	subs	r4, r0, #0
   2d082:	db55      	blt.n	2d130 <att_chan_read+0x128>
		if (cb && !cb(frag, read, user_data)) {
   2d084:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2d086:	b12b      	cbz	r3, 2d094 <att_chan_read+0x8c>
   2d088:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2d08a:	4621      	mov	r1, r4
   2d08c:	4638      	mov	r0, r7
   2d08e:	4798      	blx	r3
   2d090:	2800      	cmp	r0, #0
   2d092:	d061      	beq.n	2d158 <att_chan_read+0x150>
		net_buf_add(frag, read);
   2d094:	46a3      	mov	fp, r4
	return net_buf_simple_add(&buf->b, len);
   2d096:	4621      	mov	r1, r4
   2d098:	f107 0008 	add.w	r0, r7, #8
   2d09c:	f7f3 fa8a 	bl	205b4 <net_buf_simple_add>
		total += read;
   2d0a0:	44a2      	add	sl, r4
		offset += read;
   2d0a2:	4425      	add	r5, r4
   2d0a4:	b2ad      	uxth	r5, r5
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2d0a6:	f8b8 002a 	ldrh.w	r0, [r8, #42]	; 0x2a
   2d0aa:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   2d0ac:	2200      	movs	r2, #0
   2d0ae:	e048      	b.n	2d142 <att_chan_read+0x13a>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2d0b0:	f8b8 602a 	ldrh.w	r6, [r8, #42]	; 0x2a
	while (buf) {
   2d0b4:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   2d0b6:	2200      	movs	r2, #0
	while (buf) {
   2d0b8:	e002      	b.n	2d0c0 <att_chan_read+0xb8>
		bytes += buf->len;
   2d0ba:	8999      	ldrh	r1, [r3, #12]
   2d0bc:	440a      	add	r2, r1
		buf = buf->frags;
   2d0be:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   2d0c0:	2b00      	cmp	r3, #0
   2d0c2:	d1fa      	bne.n	2d0ba <att_chan_read+0xb2>
   2d0c4:	1ab6      	subs	r6, r6, r2
   2d0c6:	e7d0      	b.n	2d06a <att_chan_read+0x62>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   2d0c8:	9b02      	ldr	r3, [sp, #8]
   2d0ca:	7998      	ldrb	r0, [r3, #6]
   2d0cc:	f7f2 fed0 	bl	1fe70 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   2d0d0:	2200      	movs	r2, #0
   2d0d2:	2300      	movs	r3, #0
   2d0d4:	f002 f838 	bl	2f148 <net_buf_alloc_fixed>
			if (!frag) {
   2d0d8:	4607      	mov	r7, r0
   2d0da:	b150      	cbz	r0, 2d0f2 <att_chan_read+0xea>
			net_buf_frag_add(buf, frag);
   2d0dc:	4601      	mov	r1, r0
   2d0de:	f8dd b008 	ldr.w	fp, [sp, #8]
   2d0e2:	4658      	mov	r0, fp
   2d0e4:	f7f3 f9e6 	bl	204b4 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2d0e8:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	size_t bytes = 0;
   2d0ec:	4632      	mov	r2, r6
	while (buf) {
   2d0ee:	465b      	mov	r3, fp
   2d0f0:	e004      	b.n	2d0fc <att_chan_read+0xf4>
				return total;
   2d0f2:	4654      	mov	r4, sl
   2d0f4:	e79d      	b.n	2d032 <att_chan_read+0x2a>
		bytes += buf->len;
   2d0f6:	8999      	ldrh	r1, [r3, #12]
   2d0f8:	440a      	add	r2, r1
		buf = buf->frags;
   2d0fa:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   2d0fc:	2b00      	cmp	r3, #0
   2d0fe:	d1fa      	bne.n	2d0f6 <att_chan_read+0xee>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2d100:	1aa4      	subs	r4, r4, r2
	return net_buf_simple_tailroom(&buf->b);
   2d102:	f107 0b08 	add.w	fp, r7, #8
   2d106:	4658      	mov	r0, fp
   2d108:	f002 f831 	bl	2f16e <net_buf_simple_tailroom>
   2d10c:	4284      	cmp	r4, r0
   2d10e:	d304      	bcc.n	2d11a <att_chan_read+0x112>
   2d110:	4658      	mov	r0, fp
   2d112:	f002 f82c 	bl	2f16e <net_buf_simple_tailroom>
   2d116:	4606      	mov	r6, r0
   2d118:	e7a8      	b.n	2d06c <att_chan_read+0x64>
   2d11a:	f8b8 102a 	ldrh.w	r1, [r8, #42]	; 0x2a
	while (buf) {
   2d11e:	9b02      	ldr	r3, [sp, #8]
   2d120:	e002      	b.n	2d128 <att_chan_read+0x120>
		bytes += buf->len;
   2d122:	899a      	ldrh	r2, [r3, #12]
   2d124:	4416      	add	r6, r2
		buf = buf->frags;
   2d126:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   2d128:	2b00      	cmp	r3, #0
   2d12a:	d1fa      	bne.n	2d122 <att_chan_read+0x11a>
   2d12c:	1b8e      	subs	r6, r1, r6
   2d12e:	e79d      	b.n	2d06c <att_chan_read+0x64>
			if (total) {
   2d130:	f1ba 0f00 	cmp.w	sl, #0
   2d134:	f43f af7d 	beq.w	2d032 <att_chan_read+0x2a>
				return total;
   2d138:	4654      	mov	r4, sl
   2d13a:	e77a      	b.n	2d032 <att_chan_read+0x2a>
		bytes += buf->len;
   2d13c:	8999      	ldrh	r1, [r3, #12]
   2d13e:	440a      	add	r2, r1
		buf = buf->frags;
   2d140:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   2d142:	2b00      	cmp	r3, #0
   2d144:	d1fa      	bne.n	2d13c <att_chan_read+0x134>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2d146:	4290      	cmp	r0, r2
   2d148:	d906      	bls.n	2d158 <att_chan_read+0x150>
   2d14a:	45b3      	cmp	fp, r6
   2d14c:	d104      	bne.n	2d158 <att_chan_read+0x150>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2d14e:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   2d152:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   2d154:	2200      	movs	r2, #0
	while (buf) {
   2d156:	e77a      	b.n	2d04e <att_chan_read+0x46>
	return total;
   2d158:	4654      	mov	r4, sl
   2d15a:	e76a      	b.n	2d032 <att_chan_read+0x2a>

0002d15c <read_vl_cb>:
{
   2d15c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d160:	b082      	sub	sp, #8
   2d162:	4606      	mov	r6, r0
   2d164:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   2d166:	6817      	ldr	r7, [r2, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   2d168:	6878      	ldr	r0, [r7, #4]
	data->err = 0x00;
   2d16a:	2300      	movs	r3, #0
   2d16c:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2d16e:	2295      	movs	r2, #149	; 0x95
   2d170:	4631      	mov	r1, r6
   2d172:	f000 ffae 	bl	2e0d2 <bt_gatt_check_perm>
   2d176:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   2d178:	b9f0      	cbnz	r0, 2d1b8 <read_vl_cb+0x5c>
   2d17a:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   2d17c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   2d17e:	68a0      	ldr	r0, [r4, #8]
   2d180:	8982      	ldrh	r2, [r0, #12]
   2d182:	1a9b      	subs	r3, r3, r2
   2d184:	2b01      	cmp	r3, #1
   2d186:	dd18      	ble.n	2d1ba <read_vl_cb+0x5e>
	return net_buf_simple_add(&buf->b, len);
   2d188:	2102      	movs	r1, #2
   2d18a:	3008      	adds	r0, #8
   2d18c:	f7f3 fa12 	bl	205b4 <net_buf_simple_add>
   2d190:	4680      	mov	r8, r0
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   2d192:	2300      	movs	r3, #0
   2d194:	9301      	str	r3, [sp, #4]
   2d196:	9300      	str	r3, [sp, #0]
   2d198:	88a3      	ldrh	r3, [r4, #4]
   2d19a:	68a2      	ldr	r2, [r4, #8]
   2d19c:	4631      	mov	r1, r6
   2d19e:	4638      	mov	r0, r7
   2d1a0:	f7ff ff32 	bl	2d008 <att_chan_read>
	if (read < 0) {
   2d1a4:	2800      	cmp	r0, #0
   2d1a6:	db03      	blt.n	2d1b0 <read_vl_cb+0x54>
	rsp->len = read;
   2d1a8:	f8a8 0000 	strh.w	r0, [r8]
	return BT_GATT_ITER_CONTINUE;
   2d1ac:	2501      	movs	r5, #1
   2d1ae:	e004      	b.n	2d1ba <read_vl_cb+0x5e>
		data->err = err_to_att(read);
   2d1b0:	f7ff fe2c 	bl	2ce0c <err_to_att>
   2d1b4:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   2d1b6:	e000      	b.n	2d1ba <read_vl_cb+0x5e>
		return BT_GATT_ITER_STOP;
   2d1b8:	2500      	movs	r5, #0
}
   2d1ba:	4628      	mov	r0, r5
   2d1bc:	b002      	add	sp, #8
   2d1be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002d1c2 <read_cb>:
{
   2d1c2:	b5f0      	push	{r4, r5, r6, r7, lr}
   2d1c4:	b083      	sub	sp, #12
   2d1c6:	4606      	mov	r6, r0
   2d1c8:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   2d1ca:	6817      	ldr	r7, [r2, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   2d1cc:	6878      	ldr	r0, [r7, #4]
	data->err = 0x00;
   2d1ce:	2300      	movs	r3, #0
   2d1d0:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2d1d2:	2295      	movs	r2, #149	; 0x95
   2d1d4:	4631      	mov	r1, r6
   2d1d6:	f000 ff7c 	bl	2e0d2 <bt_gatt_check_perm>
   2d1da:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   2d1dc:	b118      	cbz	r0, 2d1e6 <read_cb+0x24>
		return BT_GATT_ITER_STOP;
   2d1de:	2500      	movs	r5, #0
}
   2d1e0:	4628      	mov	r0, r5
   2d1e2:	b003      	add	sp, #12
   2d1e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2d1e6:	4605      	mov	r5, r0
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   2d1e8:	2300      	movs	r3, #0
   2d1ea:	9301      	str	r3, [sp, #4]
   2d1ec:	9300      	str	r3, [sp, #0]
   2d1ee:	88a3      	ldrh	r3, [r4, #4]
   2d1f0:	68a2      	ldr	r2, [r4, #8]
   2d1f2:	4631      	mov	r1, r6
   2d1f4:	4638      	mov	r0, r7
   2d1f6:	f7ff ff07 	bl	2d008 <att_chan_read>
	if (ret < 0) {
   2d1fa:	2800      	cmp	r0, #0
   2d1fc:	db01      	blt.n	2d202 <read_cb+0x40>
	return BT_GATT_ITER_CONTINUE;
   2d1fe:	2501      	movs	r5, #1
   2d200:	e7ee      	b.n	2d1e0 <read_cb+0x1e>
		data->err = err_to_att(ret);
   2d202:	f7ff fe03 	bl	2ce0c <err_to_att>
   2d206:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   2d208:	e7ea      	b.n	2d1e0 <read_cb+0x1e>

0002d20a <find_info_cb>:
{
   2d20a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2d20e:	4606      	mov	r6, r0
   2d210:	460f      	mov	r7, r1
   2d212:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   2d214:	f8d2 8000 	ldr.w	r8, [r2]
	if (!data->rsp) {
   2d218:	6893      	ldr	r3, [r2, #8]
   2d21a:	b14b      	cbz	r3, 2d230 <find_info_cb+0x26>
	switch (data->rsp->format) {
   2d21c:	68a3      	ldr	r3, [r4, #8]
   2d21e:	781d      	ldrb	r5, [r3, #0]
   2d220:	2d01      	cmp	r5, #1
   2d222:	d013      	beq.n	2d24c <find_info_cb+0x42>
   2d224:	2d02      	cmp	r5, #2
   2d226:	d02d      	beq.n	2d284 <find_info_cb+0x7a>
   2d228:	2500      	movs	r5, #0
}
   2d22a:	4628      	mov	r0, r5
   2d22c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   2d230:	6850      	ldr	r0, [r2, #4]
   2d232:	2101      	movs	r1, #1
   2d234:	3008      	adds	r0, #8
   2d236:	f7f3 f9bd 	bl	205b4 <net_buf_simple_add>
   2d23a:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   2d23c:	6833      	ldr	r3, [r6, #0]
   2d23e:	781b      	ldrb	r3, [r3, #0]
   2d240:	b913      	cbnz	r3, 2d248 <find_info_cb+0x3e>
   2d242:	2301      	movs	r3, #1
   2d244:	7003      	strb	r3, [r0, #0]
   2d246:	e7e9      	b.n	2d21c <find_info_cb+0x12>
   2d248:	2302      	movs	r3, #2
   2d24a:	e7fb      	b.n	2d244 <find_info_cb+0x3a>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   2d24c:	6833      	ldr	r3, [r6, #0]
   2d24e:	f893 9000 	ldrb.w	r9, [r3]
   2d252:	f1b9 0f00 	cmp.w	r9, #0
   2d256:	d001      	beq.n	2d25c <find_info_cb+0x52>
			return BT_GATT_ITER_STOP;
   2d258:	2500      	movs	r5, #0
   2d25a:	e7e6      	b.n	2d22a <find_info_cb+0x20>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   2d25c:	6860      	ldr	r0, [r4, #4]
   2d25e:	2104      	movs	r1, #4
   2d260:	3008      	adds	r0, #8
   2d262:	f7f3 f9a7 	bl	205b4 <net_buf_simple_add>
   2d266:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   2d268:	8007      	strh	r7, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   2d26a:	6832      	ldr	r2, [r6, #0]
   2d26c:	68e3      	ldr	r3, [r4, #12]
   2d26e:	8852      	ldrh	r2, [r2, #2]
   2d270:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   2d272:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   2d276:	6862      	ldr	r2, [r4, #4]
   2d278:	8992      	ldrh	r2, [r2, #12]
   2d27a:	1a9b      	subs	r3, r3, r2
   2d27c:	2b04      	cmp	r3, #4
   2d27e:	d8d4      	bhi.n	2d22a <find_info_cb+0x20>
	return BT_GATT_ITER_STOP;
   2d280:	464d      	mov	r5, r9
   2d282:	e7d2      	b.n	2d22a <find_info_cb+0x20>
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   2d284:	6833      	ldr	r3, [r6, #0]
   2d286:	781b      	ldrb	r3, [r3, #0]
   2d288:	2b02      	cmp	r3, #2
   2d28a:	d001      	beq.n	2d290 <find_info_cb+0x86>
			return BT_GATT_ITER_STOP;
   2d28c:	2500      	movs	r5, #0
   2d28e:	e7cc      	b.n	2d22a <find_info_cb+0x20>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   2d290:	6860      	ldr	r0, [r4, #4]
   2d292:	2112      	movs	r1, #18
   2d294:	3008      	adds	r0, #8
   2d296:	f7f3 f98d 	bl	205b4 <net_buf_simple_add>
   2d29a:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   2d29c:	8007      	strh	r7, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   2d29e:	68e3      	ldr	r3, [r4, #12]
   2d2a0:	6832      	ldr	r2, [r6, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2d2a2:	f8d2 5001 	ldr.w	r5, [r2, #1]
   2d2a6:	f8d2 0005 	ldr.w	r0, [r2, #5]
   2d2aa:	f8d2 1009 	ldr.w	r1, [r2, #9]
   2d2ae:	f8d2 200d 	ldr.w	r2, [r2, #13]
   2d2b2:	f8c3 5002 	str.w	r5, [r3, #2]
   2d2b6:	f8c3 0006 	str.w	r0, [r3, #6]
   2d2ba:	f8c3 100a 	str.w	r1, [r3, #10]
   2d2be:	f8c3 200e 	str.w	r2, [r3, #14]
		if (chan->chan.tx.mtu - data->buf->len >
   2d2c2:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   2d2c6:	6862      	ldr	r2, [r4, #4]
   2d2c8:	8992      	ldrh	r2, [r2, #12]
   2d2ca:	1a9b      	subs	r3, r3, r2
   2d2cc:	2b12      	cmp	r3, #18
   2d2ce:	d801      	bhi.n	2d2d4 <find_info_cb+0xca>
	return BT_GATT_ITER_STOP;
   2d2d0:	2500      	movs	r5, #0
   2d2d2:	e7aa      	b.n	2d22a <find_info_cb+0x20>
			return BT_GATT_ITER_CONTINUE;
   2d2d4:	2501      	movs	r5, #1
   2d2d6:	e7a8      	b.n	2d22a <find_info_cb+0x20>

0002d2d8 <att_chan_mtu_updated>:
{
   2d2d8:	b570      	push	{r4, r5, r6, lr}
	struct bt_att *att = updated_chan->att;
   2d2da:	6806      	ldr	r6, [r0, #0]
	return list->head;
   2d2dc:	6ab4      	ldr	r4, [r6, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2d2de:	b14c      	cbz	r4, 2d2f4 <att_chan_mtu_updated+0x1c>
   2d2e0:	3cf0      	subs	r4, #240	; 0xf0
   2d2e2:	d00b      	beq.n	2d2fc <att_chan_mtu_updated+0x24>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2d2e4:	f114 03f0 	adds.w	r3, r4, #240	; 0xf0
   2d2e8:	d005      	beq.n	2d2f6 <att_chan_mtu_updated+0x1e>
	return node->next;
   2d2ea:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   2d2ee:	b113      	cbz	r3, 2d2f6 <att_chan_mtu_updated+0x1e>
   2d2f0:	3bf0      	subs	r3, #240	; 0xf0
   2d2f2:	e000      	b.n	2d2f6 <att_chan_mtu_updated+0x1e>
   2d2f4:	4623      	mov	r3, r4
   2d2f6:	2200      	movs	r2, #0
   2d2f8:	4611      	mov	r1, r2
   2d2fa:	e004      	b.n	2d306 <att_chan_mtu_updated+0x2e>
   2d2fc:	4623      	mov	r3, r4
   2d2fe:	e7fa      	b.n	2d2f6 <att_chan_mtu_updated+0x1e>
   2d300:	461d      	mov	r5, r3
   2d302:	461c      	mov	r4, r3
   2d304:	462b      	mov	r3, r5
   2d306:	b1a4      	cbz	r4, 2d332 <att_chan_mtu_updated+0x5a>
		if (chan == updated_chan) {
   2d308:	4284      	cmp	r4, r0
   2d30a:	d007      	beq.n	2d31c <att_chan_mtu_updated+0x44>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   2d30c:	8d65      	ldrh	r5, [r4, #42]	; 0x2a
   2d30e:	42a9      	cmp	r1, r5
   2d310:	bf38      	it	cc
   2d312:	4629      	movcc	r1, r5
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   2d314:	8b64      	ldrh	r4, [r4, #26]
   2d316:	42a2      	cmp	r2, r4
   2d318:	bf38      	it	cc
   2d31a:	4622      	movcc	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2d31c:	2b00      	cmp	r3, #0
   2d31e:	d0ef      	beq.n	2d300 <att_chan_mtu_updated+0x28>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2d320:	f113 05f0 	adds.w	r5, r3, #240	; 0xf0
   2d324:	d0ed      	beq.n	2d302 <att_chan_mtu_updated+0x2a>
	return node->next;
   2d326:	f8d3 50f0 	ldr.w	r5, [r3, #240]	; 0xf0
   2d32a:	2d00      	cmp	r5, #0
   2d32c:	d0e9      	beq.n	2d302 <att_chan_mtu_updated+0x2a>
   2d32e:	3df0      	subs	r5, #240	; 0xf0
   2d330:	e7e7      	b.n	2d302 <att_chan_mtu_updated+0x2a>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   2d332:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   2d334:	428b      	cmp	r3, r1
   2d336:	d802      	bhi.n	2d33e <att_chan_mtu_updated+0x66>
	    (updated_chan->chan.rx.mtu > max_rx)) {
   2d338:	8b44      	ldrh	r4, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   2d33a:	4294      	cmp	r4, r2
   2d33c:	d909      	bls.n	2d352 <att_chan_mtu_updated+0x7a>
		max_rx = MAX(max_rx, updated_chan->chan.rx.mtu);
   2d33e:	8b40      	ldrh	r0, [r0, #26]
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   2d340:	4282      	cmp	r2, r0
   2d342:	bf38      	it	cc
   2d344:	4602      	movcc	r2, r0
   2d346:	4299      	cmp	r1, r3
   2d348:	bf38      	it	cc
   2d34a:	4619      	movcc	r1, r3
   2d34c:	6830      	ldr	r0, [r6, #0]
   2d34e:	f7f0 fa39 	bl	1d7c4 <bt_gatt_att_max_mtu_changed>
}
   2d352:	bd70      	pop	{r4, r5, r6, pc}

0002d354 <bt_att_chan_send>:
{
   2d354:	b508      	push	{r3, lr}
	return chan_send(chan, buf);
   2d356:	f7ed fdc5 	bl	1aee4 <chan_send>
}
   2d35a:	bd08      	pop	{r3, pc}

0002d35c <chan_req_send>:
{
   2d35c:	b570      	push	{r4, r5, r6, lr}
   2d35e:	4605      	mov	r5, r0
   2d360:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2d362:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   2d364:	68a3      	ldr	r3, [r4, #8]
	size_t bytes = 0;
   2d366:	2200      	movs	r2, #0
	while (buf) {
   2d368:	e003      	b.n	2d372 <chan_req_send+0x16>
		bytes += buf->len;
   2d36a:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
   2d36e:	4462      	add	r2, ip
		buf = buf->frags;
   2d370:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   2d372:	2b00      	cmp	r3, #0
   2d374:	d1f9      	bne.n	2d36a <chan_req_send+0xe>
   2d376:	4291      	cmp	r1, r2
   2d378:	d30d      	bcc.n	2d396 <chan_req_send+0x3a>
	chan->req = req;
   2d37a:	f8c5 409c 	str.w	r4, [r5, #156]	; 0x9c
	buf = req->buf;
   2d37e:	68a6      	ldr	r6, [r4, #8]
	req->buf = NULL;
   2d380:	60a3      	str	r3, [r4, #8]
	err = bt_att_chan_send(chan, buf);
   2d382:	4631      	mov	r1, r6
   2d384:	4628      	mov	r0, r5
   2d386:	f7ff ffe5 	bl	2d354 <bt_att_chan_send>
	if (err) {
   2d38a:	b118      	cbz	r0, 2d394 <chan_req_send+0x38>
		req->buf = buf;
   2d38c:	60a6      	str	r6, [r4, #8]
		chan->req = NULL;
   2d38e:	2300      	movs	r3, #0
   2d390:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
}
   2d394:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   2d396:	f06f 0079 	mvn.w	r0, #121	; 0x79
   2d39a:	e7fb      	b.n	2d394 <chan_req_send+0x38>

0002d39c <bt_att_status>:
{
   2d39c:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2d39e:	f3bf 8f5b 	dmb	ish
   2d3a2:	680b      	ldr	r3, [r1, #0]
   2d3a4:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   2d3a8:	f013 0f01 	tst.w	r3, #1
   2d3ac:	d007      	beq.n	2d3be <bt_att_status+0x22>
   2d3ae:	4604      	mov	r4, r0
   2d3b0:	3804      	subs	r0, #4
	if (!chan->att) {
   2d3b2:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2d3b6:	b113      	cbz	r3, 2d3be <bt_att_status+0x22>
	if (chan->req) {
   2d3b8:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   2d3bc:	b102      	cbz	r2, 2d3c0 <bt_att_status+0x24>
}
   2d3be:	bd38      	pop	{r3, r4, r5, pc}
	return list->head;
   2d3c0:	685d      	ldr	r5, [r3, #4]
Z_GENLIST_GET(slist, snode)
   2d3c2:	2d00      	cmp	r5, #0
   2d3c4:	d0fb      	beq.n	2d3be <bt_att_status+0x22>
	return node->next;
   2d3c6:	682a      	ldr	r2, [r5, #0]
	list->head = node;
   2d3c8:	605a      	str	r2, [r3, #4]
	return list->tail;
   2d3ca:	6899      	ldr	r1, [r3, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2d3cc:	428d      	cmp	r5, r1
   2d3ce:	d00e      	beq.n	2d3ee <bt_att_status+0x52>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2d3d0:	4629      	mov	r1, r5
   2d3d2:	f7ed fdef 	bl	1afb4 <bt_att_chan_req_send>
   2d3d6:	2800      	cmp	r0, #0
   2d3d8:	daf1      	bge.n	2d3be <bt_att_status+0x22>
	sys_slist_prepend(&chan->att->reqs, node);
   2d3da:	f854 3c04 	ldr.w	r3, [r4, #-4]
	return list->head;
   2d3de:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   2d3e0:	602a      	str	r2, [r5, #0]
	list->head = node;
   2d3e2:	605d      	str	r5, [r3, #4]
	return list->tail;
   2d3e4:	689a      	ldr	r2, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
   2d3e6:	2a00      	cmp	r2, #0
   2d3e8:	d1e9      	bne.n	2d3be <bt_att_status+0x22>
	list->tail = node;
   2d3ea:	609d      	str	r5, [r3, #8]
}
   2d3ec:	e7e7      	b.n	2d3be <bt_att_status+0x22>
	list->tail = node;
   2d3ee:	609a      	str	r2, [r3, #8]
}
   2d3f0:	e7ee      	b.n	2d3d0 <bt_att_status+0x34>

0002d3f2 <att_req_send_process>:
{
   2d3f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d3f4:	4607      	mov	r7, r0
	return list->head;
   2d3f6:	6a85      	ldr	r5, [r0, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2d3f8:	b14d      	cbz	r5, 2d40e <att_req_send_process+0x1c>
   2d3fa:	3df0      	subs	r5, #240	; 0xf0
   2d3fc:	d00b      	beq.n	2d416 <att_req_send_process+0x24>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2d3fe:	f115 04f0 	adds.w	r4, r5, #240	; 0xf0
   2d402:	d005      	beq.n	2d410 <att_req_send_process+0x1e>
	return node->next;
   2d404:	f8d5 40f0 	ldr.w	r4, [r5, #240]	; 0xf0
   2d408:	b114      	cbz	r4, 2d410 <att_req_send_process+0x1e>
   2d40a:	3cf0      	subs	r4, #240	; 0xf0
   2d40c:	e000      	b.n	2d410 <att_req_send_process+0x1e>
   2d40e:	462c      	mov	r4, r5
   2d410:	2200      	movs	r2, #0
   2d412:	4616      	mov	r6, r2
   2d414:	e032      	b.n	2d47c <att_req_send_process+0x8a>
   2d416:	462c      	mov	r4, r5
   2d418:	e7fa      	b.n	2d410 <att_req_send_process+0x1e>
		if (!req && prev &&
   2d41a:	b196      	cbz	r6, 2d442 <att_req_send_process+0x50>
		req = get_first_req_matching_chan(&att->reqs, chan);
   2d41c:	4629      	mov	r1, r5
   2d41e:	1d38      	adds	r0, r7, #4
   2d420:	f7ff fcda 	bl	2cdd8 <get_first_req_matching_chan>
		if (!req) {
   2d424:	4606      	mov	r6, r0
   2d426:	b320      	cbz	r0, 2d472 <att_req_send_process+0x80>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   2d428:	4601      	mov	r1, r0
   2d42a:	4628      	mov	r0, r5
   2d42c:	f7ed fdc2 	bl	1afb4 <bt_att_chan_req_send>
   2d430:	2800      	cmp	r0, #0
   2d432:	da33      	bge.n	2d49c <att_req_send_process+0xaa>
	return list->head;
   2d434:	687b      	ldr	r3, [r7, #4]
	parent->next = child;
   2d436:	6033      	str	r3, [r6, #0]
	list->head = node;
   2d438:	607e      	str	r6, [r7, #4]
	return list->tail;
   2d43a:	68bb      	ldr	r3, [r7, #8]
Z_GENLIST_PREPEND(slist, snode)
   2d43c:	b1b3      	cbz	r3, 2d46c <att_req_send_process+0x7a>
		prev = chan;
   2d43e:	462a      	mov	r2, r5
   2d440:	e021      	b.n	2d486 <att_req_send_process+0x94>
		if (!req && prev &&
   2d442:	2a00      	cmp	r2, #0
   2d444:	d0ea      	beq.n	2d41c <att_req_send_process+0x2a>
   2d446:	f3bf 8f5b 	dmb	ish
   2d44a:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   2d44e:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2d452:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   2d456:	f3bf 8f5b 	dmb	ish
   2d45a:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
   2d45e:	f3bf 8f5b 	dmb	ish
   2d462:	f3c1 01c0 	ubfx	r1, r1, #3, #1
   2d466:	4299      	cmp	r1, r3
   2d468:	d1d8      	bne.n	2d41c <att_req_send_process+0x2a>
   2d46a:	e00c      	b.n	2d486 <att_req_send_process+0x94>
	list->tail = node;
   2d46c:	60be      	str	r6, [r7, #8]
		prev = chan;
   2d46e:	462a      	mov	r2, r5
}
   2d470:	e009      	b.n	2d486 <att_req_send_process+0x94>
   2d472:	462a      	mov	r2, r5
   2d474:	e007      	b.n	2d486 <att_req_send_process+0x94>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2d476:	4623      	mov	r3, r4
   2d478:	4625      	mov	r5, r4
   2d47a:	461c      	mov	r4, r3
   2d47c:	b175      	cbz	r5, 2d49c <att_req_send_process+0xaa>
		if (chan->req) {
   2d47e:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
   2d482:	2b00      	cmp	r3, #0
   2d484:	d0c9      	beq.n	2d41a <att_req_send_process+0x28>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2d486:	2c00      	cmp	r4, #0
   2d488:	d0f5      	beq.n	2d476 <att_req_send_process+0x84>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2d48a:	f114 03f0 	adds.w	r3, r4, #240	; 0xf0
   2d48e:	d0f3      	beq.n	2d478 <att_req_send_process+0x86>
	return node->next;
   2d490:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   2d494:	2b00      	cmp	r3, #0
   2d496:	d0ef      	beq.n	2d478 <att_req_send_process+0x86>
   2d498:	3bf0      	subs	r3, #240	; 0xf0
   2d49a:	e7ed      	b.n	2d478 <att_req_send_process+0x86>
}
   2d49c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002d49e <process_queue>:
{
   2d49e:	b570      	push	{r4, r5, r6, lr}
   2d4a0:	4604      	mov	r4, r0
   2d4a2:	460d      	mov	r5, r1
	buf = get_first_buf_matching_chan(queue, chan);
   2d4a4:	4601      	mov	r1, r0
   2d4a6:	4628      	mov	r0, r5
   2d4a8:	f7ff fd78 	bl	2cf9c <get_first_buf_matching_chan>
	if (buf) {
   2d4ac:	b168      	cbz	r0, 2d4ca <process_queue+0x2c>
   2d4ae:	4606      	mov	r6, r0
		err = bt_att_chan_send(chan, buf);
   2d4b0:	4601      	mov	r1, r0
   2d4b2:	4620      	mov	r0, r4
   2d4b4:	f7ff ff4e 	bl	2d354 <bt_att_chan_send>
		if (err) {
   2d4b8:	4604      	mov	r4, r0
   2d4ba:	b908      	cbnz	r0, 2d4c0 <process_queue+0x22>
}
   2d4bc:	4620      	mov	r0, r4
   2d4be:	bd70      	pop	{r4, r5, r6, pc}
			k_queue_prepend(&queue->_queue, buf);
   2d4c0:	4631      	mov	r1, r6
   2d4c2:	4628      	mov	r0, r5
   2d4c4:	f003 fa99 	bl	309fa <k_queue_prepend>
			return err;
   2d4c8:	e7f8      	b.n	2d4bc <process_queue+0x1e>
	return -ENOENT;
   2d4ca:	f06f 0401 	mvn.w	r4, #1
   2d4ce:	e7f5      	b.n	2d4bc <process_queue+0x1e>

0002d4d0 <bt_att_sent>:
{
   2d4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d4d2:	4604      	mov	r4, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   2d4d4:	1f06      	subs	r6, r0, #4
	struct bt_att *att = chan->att;
   2d4d6:	f850 5c04 	ldr.w	r5, [r0, #-4]
	atomic_clear_bit(chan->flags, ATT_PENDING_SENT);
   2d4da:	f100 0394 	add.w	r3, r0, #148	; 0x94
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2d4de:	f3bf 8f5b 	dmb	ish
   2d4e2:	e853 2f00 	ldrex	r2, [r3]
   2d4e6:	f022 0210 	bic.w	r2, r2, #16
   2d4ea:	e843 2100 	strex	r1, r2, [r3]
   2d4ee:	2900      	cmp	r1, #0
   2d4f0:	d1f7      	bne.n	2d4e2 <bt_att_sent+0x12>
   2d4f2:	f3bf 8f5b 	dmb	ish
	if (!att) {
   2d4f6:	b145      	cbz	r5, 2d50a <bt_att_sent+0x3a>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   2d4f8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   2d4fc:	b133      	cbz	r3, 2d50c <bt_att_sent+0x3c>
	err = process_queue(chan, &chan->tx_queue);
   2d4fe:	f104 019c 	add.w	r1, r4, #156	; 0x9c
   2d502:	4630      	mov	r0, r6
   2d504:	f7ff ffcb 	bl	2d49e <process_queue>
	if (!err) {
   2d508:	b9c0      	cbnz	r0, 2d53c <bt_att_sent+0x6c>
}
   2d50a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return list->head;
   2d50c:	686f      	ldr	r7, [r5, #4]
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   2d50e:	2f00      	cmp	r7, #0
   2d510:	d0f5      	beq.n	2d4fe <bt_att_sent+0x2e>
	return node->next;
   2d512:	683b      	ldr	r3, [r7, #0]
	list->head = node;
   2d514:	606b      	str	r3, [r5, #4]
	return list->tail;
   2d516:	68aa      	ldr	r2, [r5, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2d518:	42ba      	cmp	r2, r7
   2d51a:	d00d      	beq.n	2d538 <bt_att_sent+0x68>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2d51c:	4639      	mov	r1, r7
   2d51e:	4630      	mov	r0, r6
   2d520:	f7ff ff1c 	bl	2d35c <chan_req_send>
   2d524:	2800      	cmp	r0, #0
   2d526:	daf0      	bge.n	2d50a <bt_att_sent+0x3a>
	return list->head;
   2d528:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   2d52a:	603b      	str	r3, [r7, #0]
	list->head = node;
   2d52c:	606f      	str	r7, [r5, #4]
	return list->tail;
   2d52e:	68ab      	ldr	r3, [r5, #8]
Z_GENLIST_PREPEND(slist, snode)
   2d530:	2b00      	cmp	r3, #0
   2d532:	d1e4      	bne.n	2d4fe <bt_att_sent+0x2e>
	list->tail = node;
   2d534:	60af      	str	r7, [r5, #8]
}
   2d536:	e7e2      	b.n	2d4fe <bt_att_sent+0x2e>
	list->tail = node;
   2d538:	60ab      	str	r3, [r5, #8]
}
   2d53a:	e7ef      	b.n	2d51c <bt_att_sent+0x4c>
	(void)process_queue(chan, &att->tx_queue);
   2d53c:	f105 010c 	add.w	r1, r5, #12
   2d540:	4630      	mov	r0, r6
   2d542:	f7ff ffac 	bl	2d49e <process_queue>
   2d546:	e7e0      	b.n	2d50a <bt_att_sent+0x3a>

0002d548 <att_send_process>:
{
   2d548:	b570      	push	{r4, r5, r6, lr}
   2d54a:	4606      	mov	r6, r0
	return list->head;
   2d54c:	6a85      	ldr	r5, [r0, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2d54e:	b14d      	cbz	r5, 2d564 <att_send_process+0x1c>
   2d550:	3df0      	subs	r5, #240	; 0xf0
   2d552:	d00b      	beq.n	2d56c <att_send_process+0x24>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2d554:	f115 04f0 	adds.w	r4, r5, #240	; 0xf0
   2d558:	d005      	beq.n	2d566 <att_send_process+0x1e>
	return node->next;
   2d55a:	f8d5 40f0 	ldr.w	r4, [r5, #240]	; 0xf0
   2d55e:	b114      	cbz	r4, 2d566 <att_send_process+0x1e>
   2d560:	3cf0      	subs	r4, #240	; 0xf0
   2d562:	e000      	b.n	2d566 <att_send_process+0x1e>
   2d564:	462c      	mov	r4, r5
   2d566:	2200      	movs	r2, #0
   2d568:	4611      	mov	r1, r2
   2d56a:	e013      	b.n	2d594 <att_send_process+0x4c>
   2d56c:	462c      	mov	r4, r5
   2d56e:	e7fa      	b.n	2d566 <att_send_process+0x1e>
		err = process_queue(chan, &att->tx_queue);
   2d570:	f106 010c 	add.w	r1, r6, #12
   2d574:	4628      	mov	r0, r5
   2d576:	f7ff ff92 	bl	2d49e <process_queue>
		if (!err) {
   2d57a:	4602      	mov	r2, r0
   2d57c:	b330      	cbz	r0, 2d5cc <att_send_process+0x84>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2d57e:	b31c      	cbz	r4, 2d5c8 <att_send_process+0x80>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2d580:	f114 03f0 	adds.w	r3, r4, #240	; 0xf0
   2d584:	d003      	beq.n	2d58e <att_send_process+0x46>
	return node->next;
   2d586:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   2d58a:	b103      	cbz	r3, 2d58e <att_send_process+0x46>
   2d58c:	3bf0      	subs	r3, #240	; 0xf0
   2d58e:	4629      	mov	r1, r5
   2d590:	4625      	mov	r5, r4
   2d592:	461c      	mov	r4, r3
   2d594:	b1d5      	cbz	r5, 2d5cc <att_send_process+0x84>
		if (err == -ENOENT && prev &&
   2d596:	f112 0f02 	cmn.w	r2, #2
   2d59a:	d1e9      	bne.n	2d570 <att_send_process+0x28>
   2d59c:	2900      	cmp	r1, #0
   2d59e:	d0e7      	beq.n	2d570 <att_send_process+0x28>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2d5a0:	f3bf 8f5b 	dmb	ish
   2d5a4:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   2d5a8:	f3bf 8f5b 	dmb	ish
   2d5ac:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   2d5b0:	f3bf 8f5b 	dmb	ish
   2d5b4:	f8d1 0098 	ldr.w	r0, [r1, #152]	; 0x98
   2d5b8:	f3bf 8f5b 	dmb	ish
   2d5bc:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   2d5c0:	4298      	cmp	r0, r3
   2d5c2:	d1d5      	bne.n	2d570 <att_send_process+0x28>
   2d5c4:	460d      	mov	r5, r1
   2d5c6:	e7da      	b.n	2d57e <att_send_process+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2d5c8:	4623      	mov	r3, r4
   2d5ca:	e7e0      	b.n	2d58e <att_send_process+0x46>
}
   2d5cc:	bd70      	pop	{r4, r5, r6, pc}

0002d5ce <bt_att_chan_send_rsp>:
{
   2d5ce:	b538      	push	{r3, r4, r5, lr}
   2d5d0:	4604      	mov	r4, r0
   2d5d2:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   2d5d4:	f7ed fc86 	bl	1aee4 <chan_send>
	if (err) {
   2d5d8:	b900      	cbnz	r0, 2d5dc <bt_att_chan_send_rsp+0xe>
}
   2d5da:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_put(&chan->tx_queue, buf);
   2d5dc:	4629      	mov	r1, r5
   2d5de:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   2d5e2:	f7f2 fe9d 	bl	20320 <net_buf_put>
}
   2d5e6:	e7f8      	b.n	2d5da <bt_att_chan_send_rsp+0xc>

0002d5e8 <att_sent>:
{
   2d5e8:	b508      	push	{r3, lr}
	struct bt_att_chan *att_chan = data->att_chan;
   2d5ea:	680b      	ldr	r3, [r1, #0]
	struct bt_l2cap_chan *chan = &att_chan->chan.chan;
   2d5ec:	1d18      	adds	r0, r3, #4
	if (chan->ops->sent) {
   2d5ee:	689b      	ldr	r3, [r3, #8]
   2d5f0:	695b      	ldr	r3, [r3, #20]
   2d5f2:	b103      	cbz	r3, 2d5f6 <att_sent+0xe>
		chan->ops->sent(chan);
   2d5f4:	4798      	blx	r3
}
   2d5f6:	bd08      	pop	{r3, pc}

0002d5f8 <att_unknown>:
{
   2d5f8:	b570      	push	{r4, r5, r6, lr}
   2d5fa:	4604      	mov	r4, r0
   2d5fc:	460d      	mov	r5, r1
	if (!err) {
   2d5fe:	4616      	mov	r6, r2
   2d600:	b12a      	cbz	r2, 2d60e <att_unknown+0x16>
	chan_unknown(conn, user_data, err);
   2d602:	4632      	mov	r2, r6
   2d604:	4629      	mov	r1, r5
   2d606:	4620      	mov	r0, r4
   2d608:	f7ed fb90 	bl	1ad2c <chan_unknown>
}
   2d60c:	bd70      	pop	{r4, r5, r6, pc}
		att_sent(conn, user_data);
   2d60e:	f7ff ffeb 	bl	2d5e8 <att_sent>
   2d612:	e7f6      	b.n	2d602 <att_unknown+0xa>

0002d614 <att_tx_complete>:
{
   2d614:	b570      	push	{r4, r5, r6, lr}
   2d616:	4604      	mov	r4, r0
   2d618:	460d      	mov	r5, r1
	if (!err) {
   2d61a:	4616      	mov	r6, r2
   2d61c:	b12a      	cbz	r2, 2d62a <att_tx_complete+0x16>
	chan_tx_complete(conn, user_data, err);
   2d61e:	4632      	mov	r2, r6
   2d620:	4629      	mov	r1, r5
   2d622:	4620      	mov	r0, r4
   2d624:	f7ed fc28 	bl	1ae78 <chan_tx_complete>
}
   2d628:	bd70      	pop	{r4, r5, r6, pc}
		att_sent(conn, user_data);
   2d62a:	f7ff ffdd 	bl	2d5e8 <att_sent>
   2d62e:	e7f6      	b.n	2d61e <att_tx_complete+0xa>

0002d630 <att_req_sent>:
{
   2d630:	b570      	push	{r4, r5, r6, lr}
   2d632:	4604      	mov	r4, r0
   2d634:	460d      	mov	r5, r1
	if (!err) {
   2d636:	4616      	mov	r6, r2
   2d638:	b12a      	cbz	r2, 2d646 <att_req_sent+0x16>
	chan_req_sent(conn, user_data, err);
   2d63a:	4632      	mov	r2, r6
   2d63c:	4629      	mov	r1, r5
   2d63e:	4620      	mov	r0, r4
   2d640:	f7ed fbf0 	bl	1ae24 <chan_req_sent>
}
   2d644:	bd70      	pop	{r4, r5, r6, pc}
		att_sent(conn, user_data);
   2d646:	f7ff ffcf 	bl	2d5e8 <att_sent>
   2d64a:	e7f6      	b.n	2d63a <att_req_sent+0xa>

0002d64c <att_cfm_sent>:
{
   2d64c:	b570      	push	{r4, r5, r6, lr}
   2d64e:	4604      	mov	r4, r0
   2d650:	460d      	mov	r5, r1
	if (!err) {
   2d652:	4616      	mov	r6, r2
   2d654:	b12a      	cbz	r2, 2d662 <att_cfm_sent+0x16>
	chan_cfm_sent(conn, user_data, err);
   2d656:	4632      	mov	r2, r6
   2d658:	4629      	mov	r1, r5
   2d65a:	4620      	mov	r0, r4
   2d65c:	f7ed fb86 	bl	1ad6c <chan_cfm_sent>
}
   2d660:	bd70      	pop	{r4, r5, r6, pc}
		att_sent(conn, user_data);
   2d662:	f7ff ffc1 	bl	2d5e8 <att_sent>
   2d666:	e7f6      	b.n	2d656 <att_cfm_sent+0xa>

0002d668 <att_rsp_sent>:
{
   2d668:	b570      	push	{r4, r5, r6, lr}
   2d66a:	4604      	mov	r4, r0
   2d66c:	460d      	mov	r5, r1
	if (!err) {
   2d66e:	4616      	mov	r6, r2
   2d670:	b12a      	cbz	r2, 2d67e <att_rsp_sent+0x16>
	chan_rsp_sent(conn, user_data, err);
   2d672:	4632      	mov	r2, r6
   2d674:	4629      	mov	r1, r5
   2d676:	4620      	mov	r0, r4
   2d678:	f7ed fba6 	bl	1adc8 <chan_rsp_sent>
}
   2d67c:	bd70      	pop	{r4, r5, r6, pc}
		att_sent(conn, user_data);
   2d67e:	f7ff ffb3 	bl	2d5e8 <att_sent>
   2d682:	e7f6      	b.n	2d672 <att_rsp_sent+0xa>

0002d684 <send_err_rsp>:
	if (!req) {
   2d684:	b901      	cbnz	r1, 2d688 <send_err_rsp+0x4>
   2d686:	4770      	bx	lr
{
   2d688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d68c:	4606      	mov	r6, r0
   2d68e:	4615      	mov	r5, r2
   2d690:	461c      	mov	r4, r3
   2d692:	460f      	mov	r7, r1
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   2d694:	2204      	movs	r2, #4
   2d696:	2101      	movs	r1, #1
   2d698:	f7ed fcd2 	bl	1b040 <bt_att_chan_create_pdu>
	if (!buf) {
   2d69c:	4680      	mov	r8, r0
   2d69e:	b158      	cbz	r0, 2d6b8 <send_err_rsp+0x34>
	return net_buf_simple_add(&buf->b, len);
   2d6a0:	2104      	movs	r1, #4
   2d6a2:	3008      	adds	r0, #8
   2d6a4:	f7f2 ff86 	bl	205b4 <net_buf_simple_add>
	rsp->request = req;
   2d6a8:	7007      	strb	r7, [r0, #0]
	rsp->handle = sys_cpu_to_le16(handle);
   2d6aa:	f8a0 5001 	strh.w	r5, [r0, #1]
	rsp->error = err;
   2d6ae:	70c4      	strb	r4, [r0, #3]
	bt_att_chan_send_rsp(chan, buf);
   2d6b0:	4641      	mov	r1, r8
   2d6b2:	4630      	mov	r0, r6
   2d6b4:	f7ff ff8b 	bl	2d5ce <bt_att_chan_send_rsp>
}
   2d6b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002d6bc <att_write_cmd>:
{
   2d6bc:	b530      	push	{r4, r5, lr}
   2d6be:	b085      	sub	sp, #20
   2d6c0:	4605      	mov	r5, r0
   2d6c2:	460c      	mov	r4, r1
	return net_buf_simple_pull_le16(&buf->b);
   2d6c4:	f101 0008 	add.w	r0, r1, #8
   2d6c8:	f001 fd45 	bl	2f156 <net_buf_simple_pull_le16>
   2d6cc:	4603      	mov	r3, r0
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   2d6ce:	68a2      	ldr	r2, [r4, #8]
   2d6d0:	89a1      	ldrh	r1, [r4, #12]
   2d6d2:	9102      	str	r1, [sp, #8]
   2d6d4:	9201      	str	r2, [sp, #4]
   2d6d6:	2100      	movs	r1, #0
   2d6d8:	9100      	str	r1, [sp, #0]
   2d6da:	460a      	mov	r2, r1
   2d6dc:	4628      	mov	r0, r5
   2d6de:	f7ed fd95 	bl	1b20c <att_write_rsp>
}
   2d6e2:	b005      	add	sp, #20
   2d6e4:	bd30      	pop	{r4, r5, pc}

0002d6e6 <att_write_req>:
{
   2d6e6:	b530      	push	{r4, r5, lr}
   2d6e8:	b085      	sub	sp, #20
   2d6ea:	4605      	mov	r5, r0
   2d6ec:	460c      	mov	r4, r1
   2d6ee:	f101 0008 	add.w	r0, r1, #8
   2d6f2:	f001 fd30 	bl	2f156 <net_buf_simple_pull_le16>
   2d6f6:	4603      	mov	r3, r0
			     handle, 0, buf->data, buf->len);
   2d6f8:	68a2      	ldr	r2, [r4, #8]
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   2d6fa:	89a1      	ldrh	r1, [r4, #12]
   2d6fc:	9102      	str	r1, [sp, #8]
   2d6fe:	9201      	str	r2, [sp, #4]
   2d700:	2200      	movs	r2, #0
   2d702:	9200      	str	r2, [sp, #0]
   2d704:	2213      	movs	r2, #19
   2d706:	2112      	movs	r1, #18
   2d708:	4628      	mov	r0, r5
   2d70a:	f7ed fd7f 	bl	1b20c <att_write_rsp>
}
   2d70e:	b005      	add	sp, #20
   2d710:	bd30      	pop	{r4, r5, pc}

0002d712 <att_read_group_req>:
{
   2d712:	b5f0      	push	{r4, r5, r6, r7, lr}
   2d714:	b089      	sub	sp, #36	; 0x24
   2d716:	4605      	mov	r5, r0
   2d718:	4608      	mov	r0, r1
	uint8_t uuid_len = buf->len - sizeof(*req);
   2d71a:	7b0c      	ldrb	r4, [r1, #12]
   2d71c:	3c04      	subs	r4, #4
   2d71e:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   2d720:	2c02      	cmp	r4, #2
   2d722:	d001      	beq.n	2d728 <att_read_group_req+0x16>
   2d724:	2c10      	cmp	r4, #16
   2d726:	d142      	bne.n	2d7ae <att_read_group_req+0x9c>
	return net_buf_simple_pull_mem(&buf->b, len);
   2d728:	2104      	movs	r1, #4
   2d72a:	3008      	adds	r0, #8
   2d72c:	f7f2 ff02 	bl	20534 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   2d730:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   2d732:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   2d734:	4622      	mov	r2, r4
   2d736:	1d01      	adds	r1, r0, #4
   2d738:	a801      	add	r0, sp, #4
   2d73a:	f7fe fbda 	bl	2bef2 <bt_uuid_create>
   2d73e:	b3c8      	cbz	r0, 2d7b4 <att_read_group_req+0xa2>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   2d740:	f10d 0216 	add.w	r2, sp, #22
   2d744:	4639      	mov	r1, r7
   2d746:	4630      	mov	r0, r6
   2d748:	f7ff fb51 	bl	2cdee <range_is_valid>
   2d74c:	b1f0      	cbz	r0, 2d78c <att_read_group_req+0x7a>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   2d74e:	2300      	movs	r3, #0
   2d750:	f88d 3018 	strb.w	r3, [sp, #24]
   2d754:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   2d758:	f8ad 301a 	strh.w	r3, [sp, #26]
   2d75c:	a906      	add	r1, sp, #24
   2d75e:	a801      	add	r0, sp, #4
   2d760:	f7fe fba9 	bl	2beb6 <bt_uuid_cmp>
   2d764:	b158      	cbz	r0, 2d77e <att_read_group_req+0x6c>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   2d766:	2300      	movs	r3, #0
   2d768:	f88d 301c 	strb.w	r3, [sp, #28]
   2d76c:	f642 0301 	movw	r3, #10241	; 0x2801
   2d770:	f8ad 301e 	strh.w	r3, [sp, #30]
   2d774:	a907      	add	r1, sp, #28
   2d776:	a801      	add	r0, sp, #4
   2d778:	f7fe fb9d 	bl	2beb6 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   2d77c:	b978      	cbnz	r0, 2d79e <att_read_group_req+0x8c>
	return att_read_group_rsp(chan, &u.uuid, start_handle, end_handle);
   2d77e:	463b      	mov	r3, r7
   2d780:	4632      	mov	r2, r6
   2d782:	a901      	add	r1, sp, #4
   2d784:	4628      	mov	r0, r5
   2d786:	f7ed fe6d 	bl	1b464 <att_read_group_rsp>
   2d78a:	e011      	b.n	2d7b0 <att_read_group_req+0x9e>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, err_handle,
   2d78c:	2301      	movs	r3, #1
   2d78e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   2d792:	2110      	movs	r1, #16
   2d794:	4628      	mov	r0, r5
   2d796:	f7ff ff75 	bl	2d684 <send_err_rsp>
		return 0;
   2d79a:	2000      	movs	r0, #0
   2d79c:	e008      	b.n	2d7b0 <att_read_group_req+0x9e>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, start_handle,
   2d79e:	2310      	movs	r3, #16
   2d7a0:	4632      	mov	r2, r6
   2d7a2:	4619      	mov	r1, r3
   2d7a4:	4628      	mov	r0, r5
   2d7a6:	f7ff ff6d 	bl	2d684 <send_err_rsp>
		return 0;
   2d7aa:	2000      	movs	r0, #0
   2d7ac:	e000      	b.n	2d7b0 <att_read_group_req+0x9e>
		return BT_ATT_ERR_INVALID_PDU;
   2d7ae:	2004      	movs	r0, #4
}
   2d7b0:	b009      	add	sp, #36	; 0x24
   2d7b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_UNLIKELY;
   2d7b4:	200e      	movs	r0, #14
   2d7b6:	e7fb      	b.n	2d7b0 <att_read_group_req+0x9e>

0002d7b8 <att_read_blob_req>:
{
   2d7b8:	b500      	push	{lr}
   2d7ba:	b083      	sub	sp, #12
	req = (void *)buf->data;
   2d7bc:	688a      	ldr	r2, [r1, #8]
	handle = sys_le16_to_cpu(req->handle);
   2d7be:	8813      	ldrh	r3, [r2, #0]
	offset = sys_le16_to_cpu(req->offset);
   2d7c0:	8852      	ldrh	r2, [r2, #2]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   2d7c2:	9200      	str	r2, [sp, #0]
   2d7c4:	220d      	movs	r2, #13
   2d7c6:	210c      	movs	r1, #12
   2d7c8:	f7ed ffa4 	bl	1b714 <att_read_rsp>
}
   2d7cc:	b003      	add	sp, #12
   2d7ce:	f85d fb04 	ldr.w	pc, [sp], #4

0002d7d2 <att_read_req>:
{
   2d7d2:	b500      	push	{lr}
   2d7d4:	b083      	sub	sp, #12
	req = (void *)buf->data;
   2d7d6:	688b      	ldr	r3, [r1, #8]
	handle = sys_le16_to_cpu(req->handle);
   2d7d8:	881b      	ldrh	r3, [r3, #0]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   2d7da:	2200      	movs	r2, #0
   2d7dc:	9200      	str	r2, [sp, #0]
   2d7de:	220b      	movs	r2, #11
   2d7e0:	210a      	movs	r1, #10
   2d7e2:	f7ed ff97 	bl	1b714 <att_read_rsp>
}
   2d7e6:	b003      	add	sp, #12
   2d7e8:	f85d fb04 	ldr.w	pc, [sp], #4

0002d7ec <att_read_type_req>:
{
   2d7ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   2d7ee:	b087      	sub	sp, #28
   2d7f0:	4605      	mov	r5, r0
   2d7f2:	4608      	mov	r0, r1
	uint8_t uuid_len = buf->len - sizeof(*req);
   2d7f4:	7b0c      	ldrb	r4, [r1, #12]
   2d7f6:	3c04      	subs	r4, #4
   2d7f8:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   2d7fa:	2c02      	cmp	r4, #2
   2d7fc:	d001      	beq.n	2d802 <att_read_type_req+0x16>
   2d7fe:	2c10      	cmp	r4, #16
   2d800:	d123      	bne.n	2d84a <att_read_type_req+0x5e>
   2d802:	2104      	movs	r1, #4
   2d804:	3008      	adds	r0, #8
   2d806:	f7f2 fe95 	bl	20534 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   2d80a:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   2d80c:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   2d80e:	4622      	mov	r2, r4
   2d810:	1d01      	adds	r1, r0, #4
   2d812:	a801      	add	r0, sp, #4
   2d814:	f7fe fb6d 	bl	2bef2 <bt_uuid_create>
   2d818:	b1c8      	cbz	r0, 2d84e <att_read_type_req+0x62>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   2d81a:	f10d 0216 	add.w	r2, sp, #22
   2d81e:	4639      	mov	r1, r7
   2d820:	4630      	mov	r0, r6
   2d822:	f7ff fae4 	bl	2cdee <range_is_valid>
   2d826:	b138      	cbz	r0, 2d838 <att_read_type_req+0x4c>
	return att_read_type_rsp(chan, &u.uuid, start_handle, end_handle);
   2d828:	463b      	mov	r3, r7
   2d82a:	4632      	mov	r2, r6
   2d82c:	a901      	add	r1, sp, #4
   2d82e:	4628      	mov	r0, r5
   2d830:	f7ed fff4 	bl	1b81c <att_read_type_rsp>
}
   2d834:	b007      	add	sp, #28
   2d836:	bdf0      	pop	{r4, r5, r6, r7, pc}
		send_err_rsp(chan, BT_ATT_OP_READ_TYPE_REQ, err_handle,
   2d838:	2301      	movs	r3, #1
   2d83a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   2d83e:	2108      	movs	r1, #8
   2d840:	4628      	mov	r0, r5
   2d842:	f7ff ff1f 	bl	2d684 <send_err_rsp>
		return 0;
   2d846:	2000      	movs	r0, #0
   2d848:	e7f4      	b.n	2d834 <att_read_type_req+0x48>
		return BT_ATT_ERR_INVALID_PDU;
   2d84a:	2004      	movs	r0, #4
   2d84c:	e7f2      	b.n	2d834 <att_read_type_req+0x48>
		return BT_ATT_ERR_UNLIKELY;
   2d84e:	200e      	movs	r0, #14
   2d850:	e7f0      	b.n	2d834 <att_read_type_req+0x48>

0002d852 <att_find_type_req>:
{
   2d852:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2d856:	b087      	sub	sp, #28
   2d858:	4607      	mov	r7, r0
   2d85a:	460c      	mov	r4, r1
   2d85c:	2106      	movs	r1, #6
   2d85e:	f104 0008 	add.w	r0, r4, #8
   2d862:	f7f2 fe67 	bl	20534 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   2d866:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   2d868:	8846      	ldrh	r6, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   2d86a:	f8b0 8004 	ldrh.w	r8, [r0, #4]
	value = buf->data;
   2d86e:	f8d4 9008 	ldr.w	r9, [r4, #8]
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   2d872:	f10d 020e 	add.w	r2, sp, #14
   2d876:	4631      	mov	r1, r6
   2d878:	4628      	mov	r0, r5
   2d87a:	f7ff fab8 	bl	2cdee <range_is_valid>
   2d87e:	b1d0      	cbz	r0, 2d8b6 <att_find_type_req+0x64>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   2d880:	2300      	movs	r3, #0
   2d882:	f88d 3010 	strb.w	r3, [sp, #16]
   2d886:	f8ad 8012 	strh.w	r8, [sp, #18]
   2d88a:	f88d 3014 	strb.w	r3, [sp, #20]
   2d88e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   2d892:	f8ad 3016 	strh.w	r3, [sp, #22]
   2d896:	a905      	add	r1, sp, #20
   2d898:	a804      	add	r0, sp, #16
   2d89a:	f7fe fb0c 	bl	2beb6 <bt_uuid_cmp>
   2d89e:	b998      	cbnz	r0, 2d8c8 <att_find_type_req+0x76>
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   2d8a0:	7b23      	ldrb	r3, [r4, #12]
   2d8a2:	9300      	str	r3, [sp, #0]
   2d8a4:	464b      	mov	r3, r9
   2d8a6:	4632      	mov	r2, r6
   2d8a8:	4629      	mov	r1, r5
   2d8aa:	4638      	mov	r0, r7
   2d8ac:	f7ee f81c 	bl	1b8e8 <att_find_type_rsp>
}
   2d8b0:	b007      	add	sp, #28
   2d8b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, err_handle,
   2d8b6:	2301      	movs	r3, #1
   2d8b8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   2d8bc:	2106      	movs	r1, #6
   2d8be:	4638      	mov	r0, r7
   2d8c0:	f7ff fee0 	bl	2d684 <send_err_rsp>
		return 0;
   2d8c4:	2000      	movs	r0, #0
   2d8c6:	e7f3      	b.n	2d8b0 <att_find_type_req+0x5e>
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
   2d8c8:	230a      	movs	r3, #10
   2d8ca:	462a      	mov	r2, r5
   2d8cc:	2106      	movs	r1, #6
   2d8ce:	4638      	mov	r0, r7
   2d8d0:	f7ff fed8 	bl	2d684 <send_err_rsp>
		return 0;
   2d8d4:	2000      	movs	r0, #0
   2d8d6:	e7eb      	b.n	2d8b0 <att_find_type_req+0x5e>

0002d8d8 <att_find_info_req>:
{
   2d8d8:	b570      	push	{r4, r5, r6, lr}
   2d8da:	b082      	sub	sp, #8
   2d8dc:	4604      	mov	r4, r0
	req = (void *)buf->data;
   2d8de:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   2d8e0:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   2d8e2:	885e      	ldrh	r6, [r3, #2]
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   2d8e4:	f10d 0206 	add.w	r2, sp, #6
   2d8e8:	4631      	mov	r1, r6
   2d8ea:	4628      	mov	r0, r5
   2d8ec:	f7ff fa7f 	bl	2cdee <range_is_valid>
   2d8f0:	b130      	cbz	r0, 2d900 <att_find_info_req+0x28>
	return att_find_info_rsp(chan, start_handle, end_handle);
   2d8f2:	4632      	mov	r2, r6
   2d8f4:	4629      	mov	r1, r5
   2d8f6:	4620      	mov	r0, r4
   2d8f8:	f7ee f856 	bl	1b9a8 <att_find_info_rsp>
}
   2d8fc:	b002      	add	sp, #8
   2d8fe:	bd70      	pop	{r4, r5, r6, pc}
		send_err_rsp(chan, BT_ATT_OP_FIND_INFO_REQ, err_handle,
   2d900:	2301      	movs	r3, #1
   2d902:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   2d906:	2104      	movs	r1, #4
   2d908:	4620      	mov	r0, r4
   2d90a:	f7ff febb 	bl	2d684 <send_err_rsp>
		return 0;
   2d90e:	2000      	movs	r0, #0
   2d910:	e7f4      	b.n	2d8fc <att_find_info_req+0x24>

0002d912 <att_mtu_req>:
{
   2d912:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d914:	4604      	mov	r4, r0
	struct bt_conn *conn = chan->att->conn;
   2d916:	6803      	ldr	r3, [r0, #0]
   2d918:	6818      	ldr	r0, [r3, #0]
   2d91a:	f3bf 8f5b 	dmb	ish
   2d91e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   2d922:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   2d926:	f013 0f08 	tst.w	r3, #8
   2d92a:	d11f      	bne.n	2d96c <att_mtu_req+0x5a>
	req = (void *)buf->data;
   2d92c:	688b      	ldr	r3, [r1, #8]
	mtu_client = sys_le16_to_cpu(req->mtu);
   2d92e:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   2d930:	2e16      	cmp	r6, #22
   2d932:	d91d      	bls.n	2d970 <att_mtu_req+0x5e>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   2d934:	2202      	movs	r2, #2
   2d936:	2103      	movs	r1, #3
   2d938:	f7ed fd5a 	bl	1b3f0 <bt_att_create_pdu>
	if (!pdu) {
   2d93c:	4607      	mov	r7, r0
   2d93e:	b1c8      	cbz	r0, 2d974 <att_mtu_req+0x62>
	return net_buf_simple_add(&buf->b, len);
   2d940:	2102      	movs	r1, #2
   2d942:	3008      	adds	r0, #8
   2d944:	f7f2 fe36 	bl	205b4 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   2d948:	2500      	movs	r5, #0
   2d94a:	2341      	movs	r3, #65	; 0x41
   2d94c:	7003      	strb	r3, [r0, #0]
   2d94e:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   2d950:	4639      	mov	r1, r7
   2d952:	4620      	mov	r0, r4
   2d954:	f7ff fe3b 	bl	2d5ce <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   2d958:	2e41      	cmp	r6, #65	; 0x41
   2d95a:	bf28      	it	cs
   2d95c:	2641      	movcs	r6, #65	; 0x41
   2d95e:	8366      	strh	r6, [r4, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   2d960:	8566      	strh	r6, [r4, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   2d962:	4620      	mov	r0, r4
   2d964:	f7ff fcb8 	bl	2d2d8 <att_chan_mtu_updated>
	return 0;
   2d968:	4628      	mov	r0, r5
}
   2d96a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   2d96c:	2006      	movs	r0, #6
   2d96e:	e7fc      	b.n	2d96a <att_mtu_req+0x58>
		return BT_ATT_ERR_INVALID_PDU;
   2d970:	2004      	movs	r0, #4
   2d972:	e7fa      	b.n	2d96a <att_mtu_req+0x58>
		return BT_ATT_ERR_UNLIKELY;
   2d974:	200e      	movs	r0, #14
   2d976:	e7f8      	b.n	2d96a <att_mtu_req+0x58>

0002d978 <att_confirm>:
{
   2d978:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   2d97a:	2300      	movs	r3, #0
   2d97c:	898a      	ldrh	r2, [r1, #12]
   2d97e:	6889      	ldr	r1, [r1, #8]
   2d980:	f7ee f8d4 	bl	1bb2c <att_handle_rsp>
}
   2d984:	bd08      	pop	{r3, pc}

0002d986 <bt_att_encrypt_change>:
{
   2d986:	b570      	push	{r4, r5, r6, lr}
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   2d988:	4605      	mov	r5, r0
	struct bt_conn *conn = le_chan->chan.conn;
   2d98a:	f855 6904 	ldr.w	r6, [r5], #-4
	if (!att_chan->att) {
   2d98e:	f850 3c04 	ldr.w	r3, [r0, #-4]
   2d992:	b143      	cbz	r3, 2d9a6 <bt_att_encrypt_change+0x20>
   2d994:	4604      	mov	r4, r0
	if (hci_status) {
   2d996:	b171      	cbz	r1, 2d9b6 <bt_att_encrypt_change+0x30>
		if (att_chan->req && att_chan->req->retrying) {
   2d998:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
   2d99c:	b11b      	cbz	r3, 2d9a6 <bt_att_encrypt_change+0x20>
   2d99e:	7c1b      	ldrb	r3, [r3, #16]
   2d9a0:	f013 0f01 	tst.w	r3, #1
   2d9a4:	d100      	bne.n	2d9a8 <bt_att_encrypt_change+0x22>
}
   2d9a6:	bd70      	pop	{r4, r5, r6, pc}
			att_handle_rsp(att_chan, NULL, 0,
   2d9a8:	2305      	movs	r3, #5
   2d9aa:	2200      	movs	r2, #0
   2d9ac:	4611      	mov	r1, r2
   2d9ae:	4628      	mov	r0, r5
   2d9b0:	f7ee f8bc 	bl	1bb2c <att_handle_rsp>
		return;
   2d9b4:	e7f7      	b.n	2d9a6 <bt_att_encrypt_change+0x20>
	bt_gatt_encrypt_change(conn);
   2d9b6:	4630      	mov	r0, r6
   2d9b8:	f7ef ff20 	bl	1d7fc <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   2d9bc:	7a73      	ldrb	r3, [r6, #9]
   2d9be:	2b01      	cmp	r3, #1
   2d9c0:	d0f1      	beq.n	2d9a6 <bt_att_encrypt_change+0x20>
	if (!(att_chan->req && att_chan->req->retrying)) {
   2d9c2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   2d9c6:	2b00      	cmp	r3, #0
   2d9c8:	d0ed      	beq.n	2d9a6 <bt_att_encrypt_change+0x20>
   2d9ca:	7c1b      	ldrb	r3, [r3, #16]
   2d9cc:	f013 0f01 	tst.w	r3, #1
   2d9d0:	d0e9      	beq.n	2d9a6 <bt_att_encrypt_change+0x20>
	err = att_req_retry(att_chan);
   2d9d2:	4628      	mov	r0, r5
   2d9d4:	f7ed fcb0 	bl	1b338 <att_req_retry>
	if (err) {
   2d9d8:	4603      	mov	r3, r0
   2d9da:	2800      	cmp	r0, #0
   2d9dc:	d0e3      	beq.n	2d9a6 <bt_att_encrypt_change+0x20>
		att_handle_rsp(att_chan, NULL, 0, err);
   2d9de:	2200      	movs	r2, #0
   2d9e0:	4611      	mov	r1, r2
   2d9e2:	4628      	mov	r0, r5
   2d9e4:	f7ee f8a2 	bl	1bb2c <att_handle_rsp>
   2d9e8:	e7dd      	b.n	2d9a6 <bt_att_encrypt_change+0x20>

0002d9ea <bt_att_disconnected>:
{
   2d9ea:	b538      	push	{r3, r4, r5, lr}
   2d9ec:	4604      	mov	r4, r0
	struct bt_att *att = att_chan->att;
   2d9ee:	f850 5c04 	ldr.w	r5, [r0, #-4]
	if (!att_chan->att) {
   2d9f2:	b125      	cbz	r5, 2d9fe <bt_att_disconnected+0x14>
   2d9f4:	3804      	subs	r0, #4
	att_chan_detach(att_chan);
   2d9f6:	f7ee f8d5 	bl	1bba4 <att_chan_detach>
	return list->head;
   2d9fa:	6aab      	ldr	r3, [r5, #40]	; 0x28
	if (!sys_slist_is_empty(&att->chans)) {
   2d9fc:	b103      	cbz	r3, 2da00 <bt_att_disconnected+0x16>
}
   2d9fe:	bd38      	pop	{r3, r4, r5, pc}
	att_reset(att);
   2da00:	4628      	mov	r0, r5
   2da02:	f7ee f929 	bl	1bc58 <att_reset>
	bt_gatt_disconnected(le_chan->chan.conn);
   2da06:	6820      	ldr	r0, [r4, #0]
   2da08:	f7ef ff5c 	bl	1d8c4 <bt_gatt_disconnected>
   2da0c:	e7f7      	b.n	2d9fe <bt_att_disconnected+0x14>

0002da0e <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   2da0e:	2001      	movs	r0, #1
   2da10:	4770      	bx	lr

0002da12 <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   2da12:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
   2da14:	f7ed f954 	bl	1acc0 <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   2da18:	b1d8      	cbz	r0, 2da52 <bt_att_clear_out_of_sync_sent+0x40>
   2da1a:	6a83      	ldr	r3, [r0, #40]	; 0x28
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   2da1c:	b113      	cbz	r3, 2da24 <bt_att_clear_out_of_sync_sent+0x12>
   2da1e:	3bf0      	subs	r3, #240	; 0xf0
   2da20:	e000      	b.n	2da24 <bt_att_clear_out_of_sync_sent+0x12>
   2da22:	4613      	mov	r3, r2
   2da24:	b1ab      	cbz	r3, 2da52 <bt_att_clear_out_of_sync_sent+0x40>
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
   2da26:	f103 0298 	add.w	r2, r3, #152	; 0x98
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2da2a:	f3bf 8f5b 	dmb	ish
   2da2e:	e852 1f00 	ldrex	r1, [r2]
   2da32:	f021 0120 	bic.w	r1, r1, #32
   2da36:	e842 1000 	strex	r0, r1, [r2]
   2da3a:	2800      	cmp	r0, #0
   2da3c:	d1f7      	bne.n	2da2e <bt_att_clear_out_of_sync_sent+0x1c>
   2da3e:	f3bf 8f5b 	dmb	ish
Z_GENLIST_PEEK_NEXT(slist, snode)
   2da42:	f113 02f0 	adds.w	r2, r3, #240	; 0xf0
   2da46:	d0ec      	beq.n	2da22 <bt_att_clear_out_of_sync_sent+0x10>
	return node->next;
   2da48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   2da4c:	b10b      	cbz	r3, 2da52 <bt_att_clear_out_of_sync_sent+0x40>
   2da4e:	3bf0      	subs	r3, #240	; 0xf0
   2da50:	e7e8      	b.n	2da24 <bt_att_clear_out_of_sync_sent+0x12>
	}
}
   2da52:	bd08      	pop	{r3, pc}

0002da54 <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   2da54:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   2da56:	2104      	movs	r1, #4
   2da58:	f7ff f97f 	bl	2cd5a <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   2da5c:	b140      	cbz	r0, 2da70 <bt_att_out_of_sync_sent_on_fixed+0x1c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2da5e:	f3bf 8f5b 	dmb	ish
   2da62:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
   2da66:	f3bf 8f5b 	dmb	ish
   2da6a:	f3c0 1040 	ubfx	r0, r0, #5, #1
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
}
   2da6e:	bd08      	pop	{r3, pc}
		return false;
   2da70:	2000      	movs	r0, #0
   2da72:	e7fc      	b.n	2da6e <bt_att_out_of_sync_sent_on_fixed+0x1a>

0002da74 <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   2da74:	6940      	ldr	r0, [r0, #20]

	data->func = func;
   2da76:	6081      	str	r1, [r0, #8]
	data->user_data = user_data;
   2da78:	60c2      	str	r2, [r0, #12]
	data->attr_count = 1;
   2da7a:	2201      	movs	r2, #1
   2da7c:	8082      	strh	r2, [r0, #4]
	data->chan_opt = chan_opt;
   2da7e:	7403      	strb	r3, [r0, #16]
}
   2da80:	4770      	bx	lr

0002da82 <update_range>:
	if (new_start >= *start && new_end <= *end) {
   2da82:	f8b0 c000 	ldrh.w	ip, [r0]
   2da86:	4562      	cmp	r2, ip
   2da88:	d312      	bcc.n	2dab0 <update_range+0x2e>
{
   2da8a:	b500      	push	{lr}
	if (new_start >= *start && new_end <= *end) {
   2da8c:	f8b1 e000 	ldrh.w	lr, [r1]
   2da90:	4573      	cmp	r3, lr
   2da92:	d908      	bls.n	2daa6 <update_range+0x24>
	if (*start > new_start) {
   2da94:	4562      	cmp	r2, ip
   2da96:	d200      	bcs.n	2da9a <update_range+0x18>
		*start = new_start;
   2da98:	8002      	strh	r2, [r0, #0]
	if (*end < new_end) {
   2da9a:	880a      	ldrh	r2, [r1, #0]
   2da9c:	4293      	cmp	r3, r2
   2da9e:	d904      	bls.n	2daaa <update_range+0x28>
		*end = new_end;
   2daa0:	800b      	strh	r3, [r1, #0]
	return true;
   2daa2:	2001      	movs	r0, #1
   2daa4:	e002      	b.n	2daac <update_range+0x2a>
		return false;
   2daa6:	2000      	movs	r0, #0
   2daa8:	e000      	b.n	2daac <update_range+0x2a>
	return true;
   2daaa:	2001      	movs	r0, #1
}
   2daac:	f85d fb04 	ldr.w	pc, [sp], #4
	if (*start > new_start) {
   2dab0:	4562      	cmp	r2, ip
   2dab2:	d200      	bcs.n	2dab6 <update_range+0x34>
		*start = new_start;
   2dab4:	8002      	strh	r2, [r0, #0]
	if (*end < new_end) {
   2dab6:	880a      	ldrh	r2, [r1, #0]
   2dab8:	4293      	cmp	r3, r2
   2daba:	d902      	bls.n	2dac2 <update_range+0x40>
		*end = new_end;
   2dabc:	800b      	strh	r3, [r1, #0]
	return true;
   2dabe:	2001      	movs	r0, #1
   2dac0:	4770      	bx	lr
   2dac2:	2001      	movs	r0, #1
}
   2dac4:	4770      	bx	lr

0002dac6 <cf_set_value>:
{
   2dac6:	b510      	push	{r4, lr}
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   2dac8:	2300      	movs	r3, #0
   2daca:	e001      	b.n	2dad0 <cf_set_value+0xa>
   2dacc:	3301      	adds	r3, #1
   2dace:	b29b      	uxth	r3, r3
   2dad0:	2b02      	cmp	r3, #2
   2dad2:	d819      	bhi.n	2db08 <cf_set_value+0x42>
   2dad4:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
   2dad8:	ebb2 0fd3 	cmp.w	r2, r3, lsr #3
   2dadc:	d912      	bls.n	2db04 <cf_set_value+0x3e>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   2dade:	eb00 040c 	add.w	r4, r0, ip
   2dae2:	7a24      	ldrb	r4, [r4, #8]
   2dae4:	f003 0e07 	and.w	lr, r3, #7
   2dae8:	fa24 f40e 	lsr.w	r4, r4, lr
   2daec:	f014 0f01 	tst.w	r4, #1
   2daf0:	d0ec      	beq.n	2dacc <cf_set_value+0x6>
		    !(value[i / 8] & BIT(i % 8))) {
   2daf2:	f811 400c 	ldrb.w	r4, [r1, ip]
   2daf6:	fa24 fe0e 	lsr.w	lr, r4, lr
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   2dafa:	f01e 0f01 	tst.w	lr, #1
   2dafe:	d1e5      	bne.n	2dacc <cf_set_value+0x6>
			return false;
   2db00:	2000      	movs	r0, #0
   2db02:	e017      	b.n	2db34 <cf_set_value+0x6e>
   2db04:	2300      	movs	r3, #0
   2db06:	e000      	b.n	2db0a <cf_set_value+0x44>
   2db08:	2300      	movs	r3, #0
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   2db0a:	4293      	cmp	r3, r2
   2db0c:	d211      	bcs.n	2db32 <cf_set_value+0x6c>
   2db0e:	b973      	cbnz	r3, 2db2e <cf_set_value+0x68>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   2db10:	f811 c003 	ldrb.w	ip, [r1, r3]
   2db14:	f00c 0c07 	and.w	ip, ip, #7
   2db18:	eb00 0e03 	add.w	lr, r0, r3
   2db1c:	f89e 4008 	ldrb.w	r4, [lr, #8]
   2db20:	ea4c 0c04 	orr.w	ip, ip, r4
   2db24:	f88e c008 	strb.w	ip, [lr, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   2db28:	3301      	adds	r3, #1
   2db2a:	b29b      	uxth	r3, r3
   2db2c:	e7ed      	b.n	2db0a <cf_set_value+0x44>
	return true;
   2db2e:	2001      	movs	r0, #1
   2db30:	e000      	b.n	2db34 <cf_set_value+0x6e>
   2db32:	2001      	movs	r0, #1
}
   2db34:	bd10      	pop	{r4, pc}

0002db36 <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   2db36:	6010      	str	r0, [r2, #0]
}
   2db38:	2000      	movs	r0, #0
   2db3a:	4770      	bx	lr

0002db3c <gatt_ccc_changed>:
{
   2db3c:	b508      	push	{r3, lr}
   2db3e:	460a      	mov	r2, r1
	uint16_t value = 0x0000;
   2db40:	2100      	movs	r1, #0
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   2db42:	460b      	mov	r3, r1
   2db44:	b13b      	cbz	r3, 2db56 <gatt_ccc_changed+0x1a>
	if (value != ccc->value) {
   2db46:	8953      	ldrh	r3, [r2, #10]
   2db48:	4299      	cmp	r1, r3
   2db4a:	d003      	beq.n	2db54 <gatt_ccc_changed+0x18>
		ccc->value = value;
   2db4c:	8151      	strh	r1, [r2, #10]
		if (ccc->cfg_changed) {
   2db4e:	68d3      	ldr	r3, [r2, #12]
   2db50:	b103      	cbz	r3, 2db54 <gatt_ccc_changed+0x18>
			ccc->cfg_changed(attr, value);
   2db52:	4798      	blx	r3
}
   2db54:	bd08      	pop	{r3, pc}
		if (ccc->cfg[i].value > value) {
   2db56:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   2db5a:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
   2db5e:	f8bc c008 	ldrh.w	ip, [ip, #8]
   2db62:	458c      	cmp	ip, r1
   2db64:	d900      	bls.n	2db68 <gatt_ccc_changed+0x2c>
			value = ccc->cfg[i].value;
   2db66:	4661      	mov	r1, ip
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   2db68:	3301      	adds	r3, #1
   2db6a:	e7eb      	b.n	2db44 <gatt_ccc_changed+0x8>

0002db6c <gatt_indicate_rsp>:
{
   2db6c:	b510      	push	{r4, lr}
   2db6e:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   2db70:	68a3      	ldr	r3, [r4, #8]
   2db72:	b113      	cbz	r3, 2db7a <gatt_indicate_rsp+0xe>
   2db74:	460a      	mov	r2, r1
		params->func(conn, params, err);
   2db76:	4621      	mov	r1, r4
   2db78:	4798      	blx	r3
	params->_ref--;
   2db7a:	7da3      	ldrb	r3, [r4, #22]
   2db7c:	3b01      	subs	r3, #1
   2db7e:	b2db      	uxtb	r3, r3
   2db80:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2db82:	68e2      	ldr	r2, [r4, #12]
   2db84:	b112      	cbz	r2, 2db8c <gatt_indicate_rsp+0x20>
   2db86:	b90b      	cbnz	r3, 2db8c <gatt_indicate_rsp+0x20>
		params->destroy(params);
   2db88:	4620      	mov	r0, r4
   2db8a:	4790      	blx	r2
}
   2db8c:	bd10      	pop	{r4, pc}

0002db8e <match_uuid>:
	data->attr = attr;
   2db8e:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   2db90:	8091      	strh	r1, [r2, #4]
}
   2db92:	2000      	movs	r0, #0
   2db94:	4770      	bx	lr

0002db96 <ccc_set_cb>:
}
   2db96:	2000      	movs	r0, #0
   2db98:	4770      	bx	lr

0002db9a <gen_hash_m>:
{
   2db9a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2db9c:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2db9e:	6806      	ldr	r6, [r0, #0]
   2dba0:	7835      	ldrb	r5, [r6, #0]
   2dba2:	2d00      	cmp	r5, #0
   2dba4:	d160      	bne.n	2dc68 <gen_hash_m+0xce>
   2dba6:	4607      	mov	r7, r0
   2dba8:	4614      	mov	r4, r2
	switch (u16->val) {
   2dbaa:	8873      	ldrh	r3, [r6, #2]
   2dbac:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   2dbb0:	d019      	beq.n	2dbe6 <gen_hash_m+0x4c>
   2dbb2:	d913      	bls.n	2dbdc <gen_hash_m+0x42>
   2dbb4:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   2dbb8:	33ff      	adds	r3, #255	; 0xff
   2dbba:	b29b      	uxth	r3, r3
   2dbbc:	2b04      	cmp	r3, #4
   2dbbe:	d859      	bhi.n	2dc74 <gen_hash_m+0xda>
		value = sys_cpu_to_le16(handle);
   2dbc0:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2dbc4:	2202      	movs	r2, #2
   2dbc6:	f10d 010a 	add.w	r1, sp, #10
   2dbca:	4620      	mov	r0, r4
   2dbcc:	f7fd ffc7 	bl	2bb5e <tc_cmac_update>
   2dbd0:	2800      	cmp	r0, #0
   2dbd2:	d139      	bne.n	2dc48 <gen_hash_m+0xae>
			state->err = -EINVAL;
   2dbd4:	f06f 0315 	mvn.w	r3, #21
   2dbd8:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2dbda:	e046      	b.n	2dc6a <gen_hash_m+0xd0>
	switch (u16->val) {
   2dbdc:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   2dbe0:	b29b      	uxth	r3, r3
   2dbe2:	2b03      	cmp	r3, #3
   2dbe4:	d844      	bhi.n	2dc70 <gen_hash_m+0xd6>
		value = sys_cpu_to_le16(handle);
   2dbe6:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2dbea:	2202      	movs	r2, #2
   2dbec:	f10d 010a 	add.w	r1, sp, #10
   2dbf0:	4620      	mov	r0, r4
   2dbf2:	f7fd ffb4 	bl	2bb5e <tc_cmac_update>
   2dbf6:	b918      	cbnz	r0, 2dc00 <gen_hash_m+0x66>
			state->err = -EINVAL;
   2dbf8:	f06f 0315 	mvn.w	r3, #21
   2dbfc:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2dbfe:	e034      	b.n	2dc6a <gen_hash_m+0xd0>
		value = sys_cpu_to_le16(u16->val);
   2dc00:	8873      	ldrh	r3, [r6, #2]
   2dc02:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2dc06:	2202      	movs	r2, #2
   2dc08:	f10d 010a 	add.w	r1, sp, #10
   2dc0c:	4620      	mov	r0, r4
   2dc0e:	f7fd ffa6 	bl	2bb5e <tc_cmac_update>
   2dc12:	b178      	cbz	r0, 2dc34 <gen_hash_m+0x9a>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   2dc14:	687e      	ldr	r6, [r7, #4]
   2dc16:	2000      	movs	r0, #0
   2dc18:	9000      	str	r0, [sp, #0]
   2dc1a:	2313      	movs	r3, #19
   2dc1c:	aa03      	add	r2, sp, #12
   2dc1e:	4639      	mov	r1, r7
   2dc20:	47b0      	blx	r6
		if (len < 0) {
   2dc22:	1e02      	subs	r2, r0, #0
   2dc24:	db0a      	blt.n	2dc3c <gen_hash_m+0xa2>
		if (tc_cmac_update(&state->state, data, len) ==
   2dc26:	a903      	add	r1, sp, #12
   2dc28:	4620      	mov	r0, r4
   2dc2a:	f7fd ff98 	bl	2bb5e <tc_cmac_update>
   2dc2e:	b138      	cbz	r0, 2dc40 <gen_hash_m+0xa6>
	return BT_GATT_ITER_CONTINUE;
   2dc30:	2501      	movs	r5, #1
   2dc32:	e01a      	b.n	2dc6a <gen_hash_m+0xd0>
			state->err = -EINVAL;
   2dc34:	f06f 0315 	mvn.w	r3, #21
   2dc38:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2dc3a:	e016      	b.n	2dc6a <gen_hash_m+0xd0>
			state->err = len;
   2dc3c:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2dc3e:	e014      	b.n	2dc6a <gen_hash_m+0xd0>
			state->err = -EINVAL;
   2dc40:	f06f 0315 	mvn.w	r3, #21
   2dc44:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2dc46:	e010      	b.n	2dc6a <gen_hash_m+0xd0>
		value = sys_cpu_to_le16(u16->val);
   2dc48:	8873      	ldrh	r3, [r6, #2]
   2dc4a:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2dc4e:	2202      	movs	r2, #2
   2dc50:	f10d 010a 	add.w	r1, sp, #10
   2dc54:	4620      	mov	r0, r4
   2dc56:	f7fd ff82 	bl	2bb5e <tc_cmac_update>
   2dc5a:	b108      	cbz	r0, 2dc60 <gen_hash_m+0xc6>
	return BT_GATT_ITER_CONTINUE;
   2dc5c:	2501      	movs	r5, #1
   2dc5e:	e004      	b.n	2dc6a <gen_hash_m+0xd0>
			state->err = -EINVAL;
   2dc60:	f06f 0315 	mvn.w	r3, #21
   2dc64:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2dc66:	e000      	b.n	2dc6a <gen_hash_m+0xd0>
		return BT_GATT_ITER_CONTINUE;
   2dc68:	2501      	movs	r5, #1
}
   2dc6a:	4628      	mov	r0, r5
   2dc6c:	b009      	add	sp, #36	; 0x24
   2dc6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   2dc70:	2501      	movs	r5, #1
   2dc72:	e7fa      	b.n	2dc6a <gen_hash_m+0xd0>
   2dc74:	2501      	movs	r5, #1
   2dc76:	e7f8      	b.n	2dc6a <gen_hash_m+0xd0>

0002dc78 <find_ccc_cfg>:
{
   2dc78:	b5f0      	push	{r4, r5, r6, r7, lr}
   2dc7a:	b083      	sub	sp, #12
   2dc7c:	4607      	mov	r7, r0
   2dc7e:	460d      	mov	r5, r1
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   2dc80:	2400      	movs	r4, #0
   2dc82:	b11c      	cbz	r4, 2dc8c <find_ccc_cfg+0x14>
	return NULL;
   2dc84:	2600      	movs	r6, #0
}
   2dc86:	4630      	mov	r0, r6
   2dc88:	b003      	add	sp, #12
   2dc8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   2dc8c:	eb04 0684 	add.w	r6, r4, r4, lsl #2
   2dc90:	eb05 0646 	add.w	r6, r5, r6, lsl #1
		if (conn) {
   2dc94:	b167      	cbz	r7, 2dcb0 <find_ccc_cfg+0x38>
						    &cfg->peer)) {
   2dc96:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   2dc9a:	4632      	mov	r2, r6
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   2dc9c:	3201      	adds	r2, #1
   2dc9e:	f815 1013 	ldrb.w	r1, [r5, r3, lsl #1]
   2dca2:	4638      	mov	r0, r7
   2dca4:	f7fe ff3e 	bl	2cb24 <bt_conn_is_peer_addr_le>
   2dca8:	2800      	cmp	r0, #0
   2dcaa:	d1ec      	bne.n	2dc86 <find_ccc_cfg+0xe>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   2dcac:	3401      	adds	r4, #1
   2dcae:	e7e8      	b.n	2dc82 <find_ccc_cfg+0xa>
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   2dcb0:	eb04 0084 	add.w	r0, r4, r4, lsl #2
   2dcb4:	eb05 0040 	add.w	r0, r5, r0, lsl #1
   2dcb8:	2300      	movs	r3, #0
   2dcba:	9300      	str	r3, [sp, #0]
   2dcbc:	f8cd 3003 	str.w	r3, [sp, #3]
   2dcc0:	2207      	movs	r2, #7
   2dcc2:	4669      	mov	r1, sp
   2dcc4:	3001      	adds	r0, #1
   2dcc6:	f003 f817 	bl	30cf8 <memcmp>
   2dcca:	2800      	cmp	r0, #0
   2dccc:	d1ee      	bne.n	2dcac <find_ccc_cfg+0x34>
   2dcce:	e7da      	b.n	2dc86 <find_ccc_cfg+0xe>

0002dcd0 <ccc_find_cfg>:
{
   2dcd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2dcd2:	4605      	mov	r5, r0
   2dcd4:	460f      	mov	r7, r1
   2dcd6:	4616      	mov	r6, r2
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   2dcd8:	2400      	movs	r4, #0
   2dcda:	b10c      	cbz	r4, 2dce0 <ccc_find_cfg+0x10>
	return NULL;
   2dcdc:	2000      	movs	r0, #0
}
   2dcde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (id == ccc->cfg[i].id &&
   2dce0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   2dce4:	f815 3013 	ldrb.w	r3, [r5, r3, lsl #1]
   2dce8:	42b3      	cmp	r3, r6
   2dcea:	d001      	beq.n	2dcf0 <ccc_find_cfg+0x20>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   2dcec:	3401      	adds	r4, #1
   2dcee:	e7f4      	b.n	2dcda <ccc_find_cfg+0xa>
		    !bt_addr_le_cmp(&ccc->cfg[i].peer, addr)) {
   2dcf0:	eb04 0084 	add.w	r0, r4, r4, lsl #2
   2dcf4:	eb05 0040 	add.w	r0, r5, r0, lsl #1
   2dcf8:	2207      	movs	r2, #7
   2dcfa:	4639      	mov	r1, r7
   2dcfc:	3001      	adds	r0, #1
   2dcfe:	f002 fffb 	bl	30cf8 <memcmp>
		if (id == ccc->cfg[i].id &&
   2dd02:	2800      	cmp	r0, #0
   2dd04:	d1f2      	bne.n	2dcec <ccc_find_cfg+0x1c>
			return &ccc->cfg[i];
   2dd06:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   2dd0a:	eb05 0044 	add.w	r0, r5, r4, lsl #1
   2dd0e:	e7e6      	b.n	2dcde <ccc_find_cfg+0xe>

0002dd10 <clear_sc_cfg>:
__ssp_bos_icheck3(memset, void *, int)
   2dd10:	2300      	movs	r3, #0
   2dd12:	6003      	str	r3, [r0, #0]
   2dd14:	6043      	str	r3, [r0, #4]
   2dd16:	6083      	str	r3, [r0, #8]
}
   2dd18:	4770      	bx	lr

0002dd1a <sc_reset>:
{
   2dd1a:	b508      	push	{r3, lr}
   2dd1c:	2300      	movs	r3, #0
   2dd1e:	6083      	str	r3, [r0, #8]
		sc_store(cfg);
   2dd20:	f7ee f946 	bl	1bfb0 <sc_store>
}
   2dd24:	bd08      	pop	{r3, pc}

0002dd26 <sc_restore_rsp>:
{
   2dd26:	b538      	push	{r3, r4, r5, lr}
   2dd28:	4605      	mov	r5, r0
   2dd2a:	4614      	mov	r4, r2
	if (bt_att_fixed_chan_only(conn)) {
   2dd2c:	f7ff fe6f 	bl	2da0e <bt_att_fixed_chan_only>
   2dd30:	b908      	cbnz	r0, 2dd36 <sc_restore_rsp+0x10>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   2dd32:	b1c4      	cbz	r4, 2dd66 <sc_restore_rsp+0x40>
}
   2dd34:	bd38      	pop	{r3, r4, r5, pc}
		cfg = find_cf_cfg(conn);
   2dd36:	4628      	mov	r0, r5
   2dd38:	f7ee f8ae 	bl	1be98 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   2dd3c:	4603      	mov	r3, r0
   2dd3e:	2800      	cmp	r0, #0
   2dd40:	d0f7      	beq.n	2dd32 <sc_restore_rsp+0xc>
   2dd42:	7a02      	ldrb	r2, [r0, #8]
   2dd44:	f012 0f01 	tst.w	r2, #1
   2dd48:	d0f3      	beq.n	2dd32 <sc_restore_rsp+0xc>
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   2dd4a:	330c      	adds	r3, #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2dd4c:	f3bf 8f5b 	dmb	ish
   2dd50:	e853 2f00 	ldrex	r2, [r3]
   2dd54:	f042 0201 	orr.w	r2, r2, #1
   2dd58:	e843 2100 	strex	r1, r2, [r3]
   2dd5c:	2900      	cmp	r1, #0
   2dd5e:	d1f7      	bne.n	2dd50 <sc_restore_rsp+0x2a>
   2dd60:	f3bf 8f5b 	dmb	ish
			BT_DBG("%s change-aware", bt_addr_le_str(&cfg->peer));
   2dd64:	e7e5      	b.n	2dd32 <sc_restore_rsp+0xc>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   2dd66:	f105 0190 	add.w	r1, r5, #144	; 0x90
   2dd6a:	7a28      	ldrb	r0, [r5, #8]
   2dd6c:	f7ee f8be 	bl	1beec <find_sc_cfg>
		if (sc_cfg) {
   2dd70:	2800      	cmp	r0, #0
   2dd72:	d0df      	beq.n	2dd34 <sc_restore_rsp+0xe>
			sc_reset(sc_cfg);
   2dd74:	f7ff ffd1 	bl	2dd1a <sc_reset>
}
   2dd78:	e7dc      	b.n	2dd34 <sc_restore_rsp+0xe>

0002dd7a <gatt_foreach_iter>:
	if (handle > end_handle) {
   2dd7a:	4299      	cmp	r1, r3
   2dd7c:	d822      	bhi.n	2ddc4 <gatt_foreach_iter+0x4a>
{
   2dd7e:	b538      	push	{r3, r4, r5, lr}
   2dd80:	4605      	mov	r5, r0
   2dd82:	460c      	mov	r4, r1
	if (handle < start_handle) {
   2dd84:	4291      	cmp	r1, r2
   2dd86:	d31f      	bcc.n	2ddc8 <gatt_foreach_iter+0x4e>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   2dd88:	9b04      	ldr	r3, [sp, #16]
   2dd8a:	b123      	cbz	r3, 2dd96 <gatt_foreach_iter+0x1c>
   2dd8c:	6801      	ldr	r1, [r0, #0]
   2dd8e:	4618      	mov	r0, r3
   2dd90:	f7fe f891 	bl	2beb6 <bt_uuid_cmp>
   2dd94:	b9d0      	cbnz	r0, 2ddcc <gatt_foreach_iter+0x52>
	if (attr_data && attr_data != attr->user_data) {
   2dd96:	9b05      	ldr	r3, [sp, #20]
   2dd98:	b12b      	cbz	r3, 2dda6 <gatt_foreach_iter+0x2c>
   2dd9a:	68eb      	ldr	r3, [r5, #12]
   2dd9c:	9a05      	ldr	r2, [sp, #20]
   2dd9e:	4293      	cmp	r3, r2
   2dda0:	d001      	beq.n	2dda6 <gatt_foreach_iter+0x2c>
		return BT_GATT_ITER_CONTINUE;
   2dda2:	2001      	movs	r0, #1
   2dda4:	e011      	b.n	2ddca <gatt_foreach_iter+0x50>
	*num_matches -= 1;
   2dda6:	9b06      	ldr	r3, [sp, #24]
   2dda8:	881b      	ldrh	r3, [r3, #0]
   2ddaa:	3b01      	subs	r3, #1
   2ddac:	9a06      	ldr	r2, [sp, #24]
   2ddae:	8013      	strh	r3, [r2, #0]
	result = func(attr, handle, user_data);
   2ddb0:	9a08      	ldr	r2, [sp, #32]
   2ddb2:	4621      	mov	r1, r4
   2ddb4:	4628      	mov	r0, r5
   2ddb6:	9b07      	ldr	r3, [sp, #28]
   2ddb8:	4798      	blx	r3
	if (!*num_matches) {
   2ddba:	9b06      	ldr	r3, [sp, #24]
   2ddbc:	881b      	ldrh	r3, [r3, #0]
   2ddbe:	b923      	cbnz	r3, 2ddca <gatt_foreach_iter+0x50>
		return BT_GATT_ITER_STOP;
   2ddc0:	2000      	movs	r0, #0
   2ddc2:	e002      	b.n	2ddca <gatt_foreach_iter+0x50>
		return BT_GATT_ITER_STOP;
   2ddc4:	2000      	movs	r0, #0
}
   2ddc6:	4770      	bx	lr
		return BT_GATT_ITER_CONTINUE;
   2ddc8:	2001      	movs	r0, #1
}
   2ddca:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ITER_CONTINUE;
   2ddcc:	2001      	movs	r0, #1
   2ddce:	e7fc      	b.n	2ddca <gatt_foreach_iter+0x50>

0002ddd0 <gatt_req_alloc>:
{
   2ddd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ddd2:	4606      	mov	r6, r0
   2ddd4:	460f      	mov	r7, r1
   2ddd6:	4614      	mov	r4, r2
   2ddd8:	461d      	mov	r5, r3
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   2ddda:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   2ddde:	2100      	movs	r1, #0
   2dde0:	f7ed fe4c 	bl	1ba7c <bt_att_req_alloc>
	if (!req) {
   2dde4:	4684      	mov	ip, r0
   2dde6:	b128      	cbz	r0, 2ddf4 <gatt_req_alloc+0x24>
	req->att_op = op;
   2dde8:	7445      	strb	r5, [r0, #17]
	req->len = len;
   2ddea:	9b06      	ldr	r3, [sp, #24]
   2ddec:	6143      	str	r3, [r0, #20]
	req->encode = encode;
   2ddee:	60c4      	str	r4, [r0, #12]
	req->func = func;
   2ddf0:	6046      	str	r6, [r0, #4]
	req->user_data = params;
   2ddf2:	6187      	str	r7, [r0, #24]
}
   2ddf4:	4660      	mov	r0, ip
   2ddf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002ddf8 <clear_ccc_cfg>:
{
   2ddf8:	b082      	sub	sp, #8
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   2ddfa:	2300      	movs	r3, #0
   2ddfc:	9300      	str	r3, [sp, #0]
   2ddfe:	f8cd 3003 	str.w	r3, [sp, #3]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2de02:	f8c0 3001 	str.w	r3, [r0, #1]
   2de06:	6043      	str	r3, [r0, #4]
	cfg->id = 0U;
   2de08:	7003      	strb	r3, [r0, #0]
	cfg->value = 0U;
   2de0a:	8103      	strh	r3, [r0, #8]
}
   2de0c:	b002      	add	sp, #8
   2de0e:	4770      	bx	lr

0002de10 <ccc_clear>:
{
   2de10:	b508      	push	{r3, lr}
	cfg = ccc_find_cfg(ccc, addr, id);
   2de12:	f7ff ff5d 	bl	2dcd0 <ccc_find_cfg>
	if (!cfg) {
   2de16:	b108      	cbz	r0, 2de1c <ccc_clear+0xc>
	clear_ccc_cfg(cfg);
   2de18:	f7ff ffee 	bl	2ddf8 <clear_ccc_cfg>
}
   2de1c:	bd08      	pop	{r3, pc}

0002de1e <clear_cf_cfg>:
{
   2de1e:	b082      	sub	sp, #8
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   2de20:	2300      	movs	r3, #0
   2de22:	9300      	str	r3, [sp, #0]
   2de24:	f8cd 3003 	str.w	r3, [sp, #3]
   2de28:	f8c0 3001 	str.w	r3, [r0, #1]
   2de2c:	6043      	str	r3, [r0, #4]
__ssp_bos_icheck3(memset, void *, int)
   2de2e:	7203      	strb	r3, [r0, #8]
	atomic_set(cfg->flags, 0);
   2de30:	300c      	adds	r0, #12
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2de32:	f3bf 8f5b 	dmb	ish
   2de36:	e850 2f00 	ldrex	r2, [r0]
   2de3a:	e840 3100 	strex	r1, r3, [r0]
   2de3e:	2900      	cmp	r1, #0
   2de40:	d1f9      	bne.n	2de36 <clear_cf_cfg+0x18>
   2de42:	f3bf 8f5b 	dmb	ish
}
   2de46:	b002      	add	sp, #8
   2de48:	4770      	bx	lr

0002de4a <remove_cf_cfg>:
{
   2de4a:	b570      	push	{r4, r5, r6, lr}
   2de4c:	4604      	mov	r4, r0
	cfg = find_cf_cfg(conn);
   2de4e:	f7ee f823 	bl	1be98 <find_cf_cfg>
	if (!cfg) {
   2de52:	b150      	cbz	r0, 2de6a <remove_cf_cfg+0x20>
   2de54:	4605      	mov	r5, r0
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2de56:	f104 0690 	add.w	r6, r4, #144	; 0x90
   2de5a:	4631      	mov	r1, r6
   2de5c:	7a20      	ldrb	r0, [r4, #8]
   2de5e:	f7fe f9ed 	bl	2c23c <bt_addr_le_is_bonded>
   2de62:	b918      	cbnz	r0, 2de6c <remove_cf_cfg+0x22>
		clear_cf_cfg(cfg);
   2de64:	4628      	mov	r0, r5
   2de66:	f7ff ffda 	bl	2de1e <clear_cf_cfg>
}
   2de6a:	bd70      	pop	{r4, r5, r6, pc}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2de6c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   2de70:	f8c5 3001 	str.w	r3, [r5, #1]
   2de74:	88b2      	ldrh	r2, [r6, #4]
   2de76:	79b3      	ldrb	r3, [r6, #6]
   2de78:	f8a5 2005 	strh.w	r2, [r5, #5]
   2de7c:	71eb      	strb	r3, [r5, #7]
}
   2de7e:	e7f4      	b.n	2de6a <remove_cf_cfg+0x20>

0002de80 <sc_ccc_cfg_write>:
{
   2de80:	b508      	push	{r3, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   2de82:	2a02      	cmp	r2, #2
   2de84:	d003      	beq.n	2de8e <sc_ccc_cfg_write+0xe>
		sc_clear(conn);
   2de86:	f7ee f931 	bl	1c0ec <sc_clear>
}
   2de8a:	2002      	movs	r0, #2
   2de8c:	bd08      	pop	{r3, pc}
		sc_save(conn->id, &conn->le.dst, 0, 0);
   2de8e:	2300      	movs	r3, #0
   2de90:	461a      	mov	r2, r3
   2de92:	f100 0190 	add.w	r1, r0, #144	; 0x90
   2de96:	7a00      	ldrb	r0, [r0, #8]
   2de98:	f7ee fb34 	bl	1c504 <sc_save>
   2de9c:	e7f5      	b.n	2de8a <sc_ccc_cfg_write+0xa>

0002de9e <bt_gatt_attr_read>:
{
   2de9e:	b510      	push	{r4, lr}
   2dea0:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   2dea4:	f8bd 4010 	ldrh.w	r4, [sp, #16]
	if (offset > value_len) {
   2dea8:	428c      	cmp	r4, r1
   2deaa:	d30c      	bcc.n	2dec6 <bt_gatt_attr_read+0x28>
   2deac:	4610      	mov	r0, r2
	len = MIN(buf_len, value_len - offset);
   2deae:	1a64      	subs	r4, r4, r1
   2deb0:	42a3      	cmp	r3, r4
   2deb2:	bfa8      	it	ge
   2deb4:	4623      	movge	r3, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   2deb6:	b29c      	uxth	r4, r3
   2deb8:	4622      	mov	r2, r4
   2deba:	9b03      	ldr	r3, [sp, #12]
   2debc:	4419      	add	r1, r3
   2debe:	f002 ff2b 	bl	30d18 <memcpy>
	return len;
   2dec2:	4620      	mov	r0, r4
}
   2dec4:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2dec6:	f06f 0006 	mvn.w	r0, #6
   2deca:	e7fb      	b.n	2dec4 <bt_gatt_attr_read+0x26>

0002decc <read_ppcp>:
{
   2decc:	b510      	push	{r4, lr}
   2dece:	b086      	sub	sp, #24
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   2ded0:	2418      	movs	r4, #24
   2ded2:	f8ad 4010 	strh.w	r4, [sp, #16]
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
   2ded6:	2428      	movs	r4, #40	; 0x28
   2ded8:	f8ad 4012 	strh.w	r4, [sp, #18]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   2dedc:	2400      	movs	r4, #0
   2dede:	f8ad 4014 	strh.w	r4, [sp, #20]
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   2dee2:	242a      	movs	r4, #42	; 0x2a
   2dee4:	f8ad 4016 	strh.w	r4, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   2dee8:	2408      	movs	r4, #8
   2deea:	9402      	str	r4, [sp, #8]
   2deec:	ac04      	add	r4, sp, #16
   2deee:	9401      	str	r4, [sp, #4]
   2def0:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   2def4:	9400      	str	r4, [sp, #0]
   2def6:	f7ff ffd2 	bl	2de9e <bt_gatt_attr_read>
}
   2defa:	b006      	add	sp, #24
   2defc:	bd10      	pop	{r4, pc}

0002defe <read_appearance>:
{
   2defe:	b5f0      	push	{r4, r5, r6, r7, lr}
   2df00:	b087      	sub	sp, #28
   2df02:	4604      	mov	r4, r0
   2df04:	460d      	mov	r5, r1
   2df06:	4616      	mov	r6, r2
   2df08:	461f      	mov	r7, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   2df0a:	f7fe f995 	bl	2c238 <bt_get_appearance>
   2df0e:	f8ad 0016 	strh.w	r0, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   2df12:	2302      	movs	r3, #2
   2df14:	9302      	str	r3, [sp, #8]
   2df16:	f10d 0316 	add.w	r3, sp, #22
   2df1a:	9301      	str	r3, [sp, #4]
   2df1c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   2df20:	9300      	str	r3, [sp, #0]
   2df22:	463b      	mov	r3, r7
   2df24:	4632      	mov	r2, r6
   2df26:	4629      	mov	r1, r5
   2df28:	4620      	mov	r0, r4
   2df2a:	f7ff ffb8 	bl	2de9e <bt_gatt_attr_read>
}
   2df2e:	b007      	add	sp, #28
   2df30:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002df32 <read_name>:
{
   2df32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2df36:	b084      	sub	sp, #16
   2df38:	4604      	mov	r4, r0
   2df3a:	460d      	mov	r5, r1
   2df3c:	4616      	mov	r6, r2
   2df3e:	461f      	mov	r7, r3
	const char *name = bt_get_name();
   2df40:	f7ea fb2e 	bl	185a0 <bt_get_name>
   2df44:	4680      	mov	r8, r0
				 strlen(name));
   2df46:	f7df f8b4 	bl	d0b2 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   2df4a:	b280      	uxth	r0, r0
   2df4c:	9002      	str	r0, [sp, #8]
   2df4e:	f8cd 8004 	str.w	r8, [sp, #4]
   2df52:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   2df56:	9300      	str	r3, [sp, #0]
   2df58:	463b      	mov	r3, r7
   2df5a:	4632      	mov	r2, r6
   2df5c:	4629      	mov	r1, r5
   2df5e:	4620      	mov	r0, r4
   2df60:	f7ff ff9d 	bl	2de9e <bt_gatt_attr_read>
}
   2df64:	b004      	add	sp, #16
   2df66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002df6a <cf_read>:
{
   2df6a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2df6c:	b087      	sub	sp, #28
   2df6e:	4604      	mov	r4, r0
   2df70:	460d      	mov	r5, r1
   2df72:	4616      	mov	r6, r2
   2df74:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   2df76:	2300      	movs	r3, #0
   2df78:	f88d 3014 	strb.w	r3, [sp, #20]
	cfg = find_cf_cfg(conn);
   2df7c:	f7ed ff8c 	bl	1be98 <find_cf_cfg>
	if (cfg) {
   2df80:	b110      	cbz	r0, 2df88 <cf_read+0x1e>
		memcpy(data, cfg->data, sizeof(data));
   2df82:	7a03      	ldrb	r3, [r0, #8]
   2df84:	f88d 3014 	strb.w	r3, [sp, #20]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   2df88:	2301      	movs	r3, #1
   2df8a:	9302      	str	r3, [sp, #8]
   2df8c:	ab05      	add	r3, sp, #20
   2df8e:	9301      	str	r3, [sp, #4]
   2df90:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   2df94:	9300      	str	r3, [sp, #0]
   2df96:	463b      	mov	r3, r7
   2df98:	4632      	mov	r2, r6
   2df9a:	4629      	mov	r1, r5
   2df9c:	4620      	mov	r0, r4
   2df9e:	f7ff ff7e 	bl	2de9e <bt_gatt_attr_read>
}
   2dfa2:	b007      	add	sp, #28
   2dfa4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002dfa6 <bt_gatt_attr_read_service>:
{
   2dfa6:	b570      	push	{r4, r5, r6, lr}
   2dfa8:	b086      	sub	sp, #24
   2dfaa:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
	struct bt_uuid *uuid = attr->user_data;
   2dfae:	68cc      	ldr	r4, [r1, #12]
	if (uuid->type == BT_UUID_TYPE_16) {
   2dfb0:	7826      	ldrb	r6, [r4, #0]
   2dfb2:	b146      	cbz	r6, 2dfc6 <bt_gatt_attr_read_service+0x20>
				 BT_UUID_128(uuid)->val, 16);
   2dfb4:	3401      	adds	r4, #1
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2dfb6:	2610      	movs	r6, #16
   2dfb8:	9602      	str	r6, [sp, #8]
   2dfba:	9401      	str	r4, [sp, #4]
   2dfbc:	9500      	str	r5, [sp, #0]
   2dfbe:	f7ff ff6e 	bl	2de9e <bt_gatt_attr_read>
}
   2dfc2:	b006      	add	sp, #24
   2dfc4:	bd70      	pop	{r4, r5, r6, pc}
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   2dfc6:	8864      	ldrh	r4, [r4, #2]
   2dfc8:	f8ad 4016 	strh.w	r4, [sp, #22]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2dfcc:	2402      	movs	r4, #2
   2dfce:	9402      	str	r4, [sp, #8]
   2dfd0:	f10d 0416 	add.w	r4, sp, #22
   2dfd4:	9401      	str	r4, [sp, #4]
   2dfd6:	9500      	str	r5, [sp, #0]
   2dfd8:	f7ff ff61 	bl	2de9e <bt_gatt_attr_read>
   2dfdc:	e7f1      	b.n	2dfc2 <bt_gatt_attr_read_service+0x1c>

0002dfde <bt_gatt_attr_read_ccc>:
{
   2dfde:	b5f0      	push	{r4, r5, r6, r7, lr}
   2dfe0:	b087      	sub	sp, #28
   2dfe2:	4605      	mov	r5, r0
   2dfe4:	460c      	mov	r4, r1
   2dfe6:	4616      	mov	r6, r2
   2dfe8:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   2dfea:	68c9      	ldr	r1, [r1, #12]
   2dfec:	f7ff fe44 	bl	2dc78 <find_ccc_cfg>
	if (cfg) {
   2dff0:	b190      	cbz	r0, 2e018 <bt_gatt_attr_read_ccc+0x3a>
		value = sys_cpu_to_le16(cfg->value);
   2dff2:	8903      	ldrh	r3, [r0, #8]
   2dff4:	f8ad 3016 	strh.w	r3, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   2dff8:	2302      	movs	r3, #2
   2dffa:	9302      	str	r3, [sp, #8]
   2dffc:	f10d 0316 	add.w	r3, sp, #22
   2e000:	9301      	str	r3, [sp, #4]
   2e002:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   2e006:	9300      	str	r3, [sp, #0]
   2e008:	463b      	mov	r3, r7
   2e00a:	4632      	mov	r2, r6
   2e00c:	4621      	mov	r1, r4
   2e00e:	4628      	mov	r0, r5
   2e010:	f7ff ff45 	bl	2de9e <bt_gatt_attr_read>
}
   2e014:	b007      	add	sp, #28
   2e016:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = 0x0000;
   2e018:	2300      	movs	r3, #0
   2e01a:	f8ad 3016 	strh.w	r3, [sp, #22]
   2e01e:	e7eb      	b.n	2dff8 <bt_gatt_attr_read_ccc+0x1a>

0002e020 <bt_gatt_attr_value_handle>:
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2e020:	b1b8      	cbz	r0, 2e052 <bt_gatt_attr_value_handle+0x32>
{
   2e022:	b510      	push	{r4, lr}
   2e024:	b082      	sub	sp, #8
   2e026:	4604      	mov	r4, r0
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2e028:	2300      	movs	r3, #0
   2e02a:	f88d 3004 	strb.w	r3, [sp, #4]
   2e02e:	f642 0303 	movw	r3, #10243	; 0x2803
   2e032:	f8ad 3006 	strh.w	r3, [sp, #6]
   2e036:	a901      	add	r1, sp, #4
   2e038:	6800      	ldr	r0, [r0, #0]
   2e03a:	f7fd ff3c 	bl	2beb6 <bt_uuid_cmp>
   2e03e:	b950      	cbnz	r0, 2e056 <bt_gatt_attr_value_handle+0x36>
		struct bt_gatt_chrc *chrc = attr->user_data;
   2e040:	68e3      	ldr	r3, [r4, #12]
		handle = chrc->value_handle;
   2e042:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   2e044:	b940      	cbnz	r0, 2e058 <bt_gatt_attr_value_handle+0x38>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   2e046:	4620      	mov	r0, r4
   2e048:	f7ee fcb0 	bl	1c9ac <bt_gatt_attr_get_handle>
   2e04c:	3001      	adds	r0, #1
   2e04e:	b280      	uxth	r0, r0
   2e050:	e002      	b.n	2e058 <bt_gatt_attr_value_handle+0x38>
	uint16_t handle = 0;
   2e052:	2000      	movs	r0, #0
}
   2e054:	4770      	bx	lr
	uint16_t handle = 0;
   2e056:	2000      	movs	r0, #0
}
   2e058:	b002      	add	sp, #8
   2e05a:	bd10      	pop	{r4, pc}

0002e05c <bt_gatt_attr_read_chrc>:
{
   2e05c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e060:	b08a      	sub	sp, #40	; 0x28
   2e062:	4605      	mov	r5, r0
   2e064:	460c      	mov	r4, r1
   2e066:	4616      	mov	r6, r2
   2e068:	461f      	mov	r7, r3
	struct bt_gatt_chrc *chrc = attr->user_data;
   2e06a:	f8d1 800c 	ldr.w	r8, [r1, #12]
	pdu.properties = chrc->properties;
   2e06e:	f898 3006 	ldrb.w	r3, [r8, #6]
   2e072:	f88d 3014 	strb.w	r3, [sp, #20]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2e076:	4608      	mov	r0, r1
   2e078:	f7ff ffd2 	bl	2e020 <bt_gatt_attr_value_handle>
   2e07c:	f8ad 0015 	strh.w	r0, [sp, #21]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   2e080:	f8d8 1000 	ldr.w	r1, [r8]
   2e084:	780b      	ldrb	r3, [r1, #0]
   2e086:	b993      	cbnz	r3, 2e0ae <bt_gatt_attr_read_chrc+0x52>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   2e088:	884b      	ldrh	r3, [r1, #2]
   2e08a:	f8ad 3017 	strh.w	r3, [sp, #23]
		value_len += 2U;
   2e08e:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   2e090:	9302      	str	r3, [sp, #8]
   2e092:	ab05      	add	r3, sp, #20
   2e094:	9301      	str	r3, [sp, #4]
   2e096:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   2e09a:	9300      	str	r3, [sp, #0]
   2e09c:	463b      	mov	r3, r7
   2e09e:	4632      	mov	r2, r6
   2e0a0:	4621      	mov	r1, r4
   2e0a2:	4628      	mov	r0, r5
   2e0a4:	f7ff fefb 	bl	2de9e <bt_gatt_attr_read>
}
   2e0a8:	b00a      	add	sp, #40	; 0x28
   2e0aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   2e0ae:	f8d1 c001 	ldr.w	ip, [r1, #1]
   2e0b2:	f8d1 0005 	ldr.w	r0, [r1, #5]
   2e0b6:	f8d1 2009 	ldr.w	r2, [r1, #9]
   2e0ba:	f8d1 300d 	ldr.w	r3, [r1, #13]
   2e0be:	f8cd c017 	str.w	ip, [sp, #23]
   2e0c2:	f8cd 001b 	str.w	r0, [sp, #27]
   2e0c6:	f8cd 201f 	str.w	r2, [sp, #31]
   2e0ca:	f8cd 3023 	str.w	r3, [sp, #35]	; 0x23
		value_len += 16U;
   2e0ce:	2313      	movs	r3, #19
   2e0d0:	e7de      	b.n	2e090 <bt_gatt_attr_read_chrc+0x34>

0002e0d2 <bt_gatt_check_perm>:
{
   2e0d2:	b538      	push	{r3, r4, r5, lr}
   2e0d4:	4605      	mov	r5, r0
	if ((mask & BT_GATT_PERM_READ) &&
   2e0d6:	f012 0f01 	tst.w	r2, #1
   2e0da:	d005      	beq.n	2e0e8 <bt_gatt_check_perm+0x16>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2e0dc:	8a4b      	ldrh	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   2e0de:	f013 0f95 	tst.w	r3, #149	; 0x95
   2e0e2:	d027      	beq.n	2e134 <bt_gatt_check_perm+0x62>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2e0e4:	684b      	ldr	r3, [r1, #4]
   2e0e6:	b33b      	cbz	r3, 2e138 <bt_gatt_check_perm+0x66>
	if ((mask & BT_GATT_PERM_WRITE) &&
   2e0e8:	f012 0f02 	tst.w	r2, #2
   2e0ec:	d005      	beq.n	2e0fa <bt_gatt_check_perm+0x28>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   2e0ee:	8a4b      	ldrh	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_WRITE) &&
   2e0f0:	f413 7f95 	tst.w	r3, #298	; 0x12a
   2e0f4:	d022      	beq.n	2e13c <bt_gatt_check_perm+0x6a>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   2e0f6:	688b      	ldr	r3, [r1, #8]
   2e0f8:	b313      	cbz	r3, 2e140 <bt_gatt_check_perm+0x6e>
	mask &= attr->perm;
   2e0fa:	8a4c      	ldrh	r4, [r1, #18]
   2e0fc:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_LESC_MASK) {
   2e0fe:	f414 7fc0 	tst.w	r4, #384	; 0x180
   2e102:	d006      	beq.n	2e112 <bt_gatt_check_perm+0x40>
		if (!IS_ENABLED(CONFIG_BT_SMP) || !conn->le.keys ||
   2e104:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   2e108:	b1e3      	cbz	r3, 2e144 <bt_gatt_check_perm+0x72>
		    (conn->le.keys->flags & BT_KEYS_SC) == 0) {
   2e10a:	7b5b      	ldrb	r3, [r3, #13]
		if (!IS_ENABLED(CONFIG_BT_SMP) || !conn->le.keys ||
   2e10c:	f013 0f10 	tst.w	r3, #16
   2e110:	d01a      	beq.n	2e148 <bt_gatt_check_perm+0x76>
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   2e112:	f014 0f30 	tst.w	r4, #48	; 0x30
   2e116:	d106      	bne.n	2e126 <bt_gatt_check_perm+0x54>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   2e118:	f014 0f0c 	tst.w	r4, #12
   2e11c:	d016      	beq.n	2e14c <bt_gatt_check_perm+0x7a>
		if (!conn->encrypt) {
   2e11e:	7aeb      	ldrb	r3, [r5, #11]
   2e120:	b1b3      	cbz	r3, 2e150 <bt_gatt_check_perm+0x7e>
	return 0;
   2e122:	2000      	movs	r0, #0
   2e124:	e013      	b.n	2e14e <bt_gatt_check_perm+0x7c>
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   2e126:	4628      	mov	r0, r5
   2e128:	f7fe fcdd 	bl	2cae6 <bt_conn_get_security>
   2e12c:	2802      	cmp	r0, #2
   2e12e:	d8f3      	bhi.n	2e118 <bt_gatt_check_perm+0x46>
			return BT_ATT_ERR_AUTHENTICATION;
   2e130:	2005      	movs	r0, #5
   2e132:	e00c      	b.n	2e14e <bt_gatt_check_perm+0x7c>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   2e134:	2002      	movs	r0, #2
   2e136:	e00a      	b.n	2e14e <bt_gatt_check_perm+0x7c>
   2e138:	2002      	movs	r0, #2
   2e13a:	e008      	b.n	2e14e <bt_gatt_check_perm+0x7c>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   2e13c:	2003      	movs	r0, #3
   2e13e:	e006      	b.n	2e14e <bt_gatt_check_perm+0x7c>
   2e140:	2003      	movs	r0, #3
   2e142:	e004      	b.n	2e14e <bt_gatt_check_perm+0x7c>
			return BT_ATT_ERR_AUTHENTICATION;
   2e144:	2005      	movs	r0, #5
   2e146:	e002      	b.n	2e14e <bt_gatt_check_perm+0x7c>
   2e148:	2005      	movs	r0, #5
   2e14a:	e000      	b.n	2e14e <bt_gatt_check_perm+0x7c>
	return 0;
   2e14c:	2000      	movs	r0, #0
}
   2e14e:	bd38      	pop	{r3, r4, r5, pc}
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   2e150:	200f      	movs	r0, #15
   2e152:	e7fc      	b.n	2e14e <bt_gatt_check_perm+0x7c>

0002e154 <bt_gatt_change_aware>:
{
   2e154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e156:	4606      	mov	r6, r0
   2e158:	460d      	mov	r5, r1
	cfg = find_cf_cfg(conn);
   2e15a:	f7ed fe9d 	bl	1be98 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2e15e:	2800      	cmp	r0, #0
   2e160:	d05c      	beq.n	2e21c <bt_gatt_change_aware+0xc8>
   2e162:	7a02      	ldrb	r2, [r0, #8]
   2e164:	f012 0f01 	tst.w	r2, #1
   2e168:	d102      	bne.n	2e170 <bt_gatt_change_aware+0x1c>
		return true;
   2e16a:	2401      	movs	r4, #1
}
   2e16c:	4620      	mov	r0, r4
   2e16e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   2e170:	f100 070c 	add.w	r7, r0, #12
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2e174:	f3bf 8f5b 	dmb	ish
   2e178:	68c4      	ldr	r4, [r0, #12]
   2e17a:	f3bf 8f5b 	dmb	ish
   2e17e:	f014 0401 	ands.w	r4, r4, #1
   2e182:	d1f3      	bne.n	2e16c <bt_gatt_change_aware+0x18>
	if (!req) {
   2e184:	b90d      	cbnz	r5, 2e18a <bt_gatt_change_aware+0x36>
		return false;
   2e186:	462c      	mov	r4, r5
   2e188:	e7f0      	b.n	2e16c <bt_gatt_change_aware+0x18>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2e18a:	f3bf 8f5b 	dmb	ish
   2e18e:	e857 3f00 	ldrex	r3, [r7]
   2e192:	f023 0202 	bic.w	r2, r3, #2
   2e196:	e847 2100 	strex	r1, r2, [r7]
   2e19a:	2900      	cmp	r1, #0
   2e19c:	d1f7      	bne.n	2e18e <bt_gatt_change_aware+0x3a>
   2e19e:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   2e1a2:	f3c3 0440 	ubfx	r4, r3, #1, #1
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   2e1a6:	f013 0f02 	tst.w	r3, #2
   2e1aa:	d127      	bne.n	2e1fc <bt_gatt_change_aware+0xa8>
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   2e1ac:	4630      	mov	r0, r6
   2e1ae:	f7ff fc2e 	bl	2da0e <bt_att_fixed_chan_only>
   2e1b2:	4604      	mov	r4, r0
   2e1b4:	2800      	cmp	r0, #0
   2e1b6:	d0d9      	beq.n	2e16c <bt_gatt_change_aware+0x18>
   2e1b8:	4630      	mov	r0, r6
   2e1ba:	f7ff fc4b 	bl	2da54 <bt_att_out_of_sync_sent_on_fixed>
   2e1be:	4604      	mov	r4, r0
   2e1c0:	2800      	cmp	r0, #0
   2e1c2:	d0d3      	beq.n	2e16c <bt_gatt_change_aware+0x18>
   2e1c4:	f3bf 8f5b 	dmb	ish
   2e1c8:	e857 3f00 	ldrex	r3, [r7]
   2e1cc:	f023 0302 	bic.w	r3, r3, #2
   2e1d0:	e847 3200 	strex	r2, r3, [r7]
   2e1d4:	2a00      	cmp	r2, #0
   2e1d6:	d1f7      	bne.n	2e1c8 <bt_gatt_change_aware+0x74>
   2e1d8:	f3bf 8f5b 	dmb	ish
		bt_att_clear_out_of_sync_sent(conn);
   2e1dc:	4630      	mov	r0, r6
   2e1de:	f7ff fc18 	bl	2da12 <bt_att_clear_out_of_sync_sent>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2e1e2:	f3bf 8f5b 	dmb	ish
   2e1e6:	e857 3f00 	ldrex	r3, [r7]
   2e1ea:	f043 0301 	orr.w	r3, r3, #1
   2e1ee:	e847 3200 	strex	r2, r3, [r7]
   2e1f2:	2a00      	cmp	r2, #0
   2e1f4:	d1f7      	bne.n	2e1e6 <bt_gatt_change_aware+0x92>
   2e1f6:	f3bf 8f5b 	dmb	ish
		return true;
   2e1fa:	e7b7      	b.n	2e16c <bt_gatt_change_aware+0x18>
		bt_att_clear_out_of_sync_sent(conn);
   2e1fc:	4630      	mov	r0, r6
   2e1fe:	f7ff fc08 	bl	2da12 <bt_att_clear_out_of_sync_sent>
   2e202:	f3bf 8f5b 	dmb	ish
   2e206:	e857 3f00 	ldrex	r3, [r7]
   2e20a:	f043 0301 	orr.w	r3, r3, #1
   2e20e:	e847 3200 	strex	r2, r3, [r7]
   2e212:	2a00      	cmp	r2, #0
   2e214:	d1f7      	bne.n	2e206 <bt_gatt_change_aware+0xb2>
   2e216:	f3bf 8f5b 	dmb	ish
		return true;
   2e21a:	e7a7      	b.n	2e16c <bt_gatt_change_aware+0x18>
		return true;
   2e21c:	2401      	movs	r4, #1
   2e21e:	e7a5      	b.n	2e16c <bt_gatt_change_aware+0x18>

0002e220 <ccc_delayed_store>:
{
   2e220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e222:	4605      	mov	r5, r0
	for (size_t i = 0; i < CONFIG_BT_MAX_CONN; i++) {
   2e224:	2400      	movs	r4, #0
   2e226:	b104      	cbz	r4, 2e22a <ccc_delayed_store+0xa>
}
   2e228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		struct bt_conn *conn = ccc_store->conn_list[i];
   2e22a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   2e22e:	f853 6c08 	ldr.w	r6, [r3, #-8]
		if (!conn) {
   2e232:	b136      	cbz	r6, 2e242 <ccc_delayed_store+0x22>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2e234:	f106 0790 	add.w	r7, r6, #144	; 0x90
   2e238:	4639      	mov	r1, r7
   2e23a:	7a30      	ldrb	r0, [r6, #8]
   2e23c:	f7fd fffe 	bl	2c23c <bt_addr_le_is_bonded>
   2e240:	b908      	cbnz	r0, 2e246 <ccc_delayed_store+0x26>
	for (size_t i = 0; i < CONFIG_BT_MAX_CONN; i++) {
   2e242:	3401      	adds	r4, #1
   2e244:	e7ef      	b.n	2e226 <ccc_delayed_store+0x6>
			ccc_store->conn_list[i] = NULL;
   2e246:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   2e24a:	2200      	movs	r2, #0
   2e24c:	f843 2c08 	str.w	r2, [r3, #-8]
			bt_gatt_store_ccc(conn->id, &conn->le.dst);
   2e250:	4639      	mov	r1, r7
   2e252:	7a30      	ldrb	r0, [r6, #8]
   2e254:	f7ef fae8 	bl	1d828 <bt_gatt_store_ccc>
			bt_conn_unref(conn);
   2e258:	4630      	mov	r0, r6
   2e25a:	f7eb fcab 	bl	19bb4 <bt_conn_unref>
   2e25e:	e7f0      	b.n	2e242 <ccc_delayed_store+0x22>

0002e260 <security_err_get>:
	switch (smp_err) {
   2e260:	3801      	subs	r0, #1
   2e262:	280e      	cmp	r0, #14
   2e264:	d815      	bhi.n	2e292 <security_err_get+0x32>
   2e266:	e8df f000 	tbb	[pc, r0]
   2e26a:	1608      	.short	0x1608
   2e26c:	0a0c080a 	.word	0x0a0c080a
   2e270:	100e140c 	.word	0x100e140c
   2e274:	0e0e0808 	.word	0x0e0e0808
   2e278:	12          	.byte	0x12
   2e279:	00          	.byte	0x00
   2e27a:	2001      	movs	r0, #1
   2e27c:	4770      	bx	lr
		return BT_SECURITY_ERR_AUTH_REQUIREMENT;
   2e27e:	2004      	movs	r0, #4
   2e280:	4770      	bx	lr
		return BT_SECURITY_ERR_PAIR_NOT_SUPPORTED;
   2e282:	2005      	movs	r0, #5
   2e284:	4770      	bx	lr
		return BT_SECURITY_ERR_PAIR_NOT_ALLOWED;
   2e286:	2006      	movs	r0, #6
   2e288:	4770      	bx	lr
		return BT_SECURITY_ERR_INVALID_PARAM;
   2e28a:	2007      	movs	r0, #7
   2e28c:	4770      	bx	lr
		return BT_SECURITY_ERR_KEY_REJECTED;
   2e28e:	2008      	movs	r0, #8
   2e290:	4770      	bx	lr
		return BT_SECURITY_ERR_UNSPECIFIED;
   2e292:	2009      	movs	r0, #9
   2e294:	4770      	bx	lr
		return BT_SECURITY_ERR_OOB_NOT_AVAILABLE;
   2e296:	2003      	movs	r0, #3
}
   2e298:	4770      	bx	lr

0002e29a <smp_err_get>:
	switch (auth_err) {
   2e29a:	1e43      	subs	r3, r0, #1
   2e29c:	2b08      	cmp	r3, #8
   2e29e:	d80c      	bhi.n	2e2ba <smp_err_get+0x20>
   2e2a0:	e8df f003 	tbb	[pc, r3]
   2e2a4:	0d05090d 	.word	0x0d05090d
   2e2a8:	0b07090e 	.word	0x0b07090e
   2e2ac:	09          	.byte	0x09
   2e2ad:	00          	.byte	0x00
   2e2ae:	2002      	movs	r0, #2
   2e2b0:	4770      	bx	lr
		return BT_SMP_ERR_INVALID_PARAMS;
   2e2b2:	200a      	movs	r0, #10
   2e2b4:	4770      	bx	lr
		return BT_SMP_ERR_UNSPECIFIED;
   2e2b6:	2008      	movs	r0, #8
   2e2b8:	4770      	bx	lr
		return 0;
   2e2ba:	2000      	movs	r0, #0
   2e2bc:	4770      	bx	lr
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   2e2be:	2003      	movs	r0, #3
}
   2e2c0:	4770      	bx	lr

0002e2c2 <get_encryption_key_size>:
{
   2e2c2:	4603      	mov	r3, r0
	return MIN(req->max_key_size, rsp->max_key_size);
   2e2c4:	7d00      	ldrb	r0, [r0, #20]
   2e2c6:	7b5b      	ldrb	r3, [r3, #13]
}
   2e2c8:	4298      	cmp	r0, r3
   2e2ca:	bf28      	it	cs
   2e2cc:	4618      	movcs	r0, r3
   2e2ce:	4770      	bx	lr

0002e2d0 <hci_err_get>:
	switch (err) {
   2e2d0:	2807      	cmp	r0, #7
   2e2d2:	d80d      	bhi.n	2e2f0 <hci_err_get+0x20>
   2e2d4:	e8df f000 	tbb	[pc, r0]
   2e2d8:	0c040e0f 	.word	0x0c040e0f
   2e2dc:	0a08060c 	.word	0x0a08060c
		return BT_HCI_ERR_PIN_OR_KEY_MISSING;
   2e2e0:	2006      	movs	r0, #6
   2e2e2:	4770      	bx	lr
		return BT_HCI_ERR_PAIRING_NOT_SUPPORTED;
   2e2e4:	2029      	movs	r0, #41	; 0x29
   2e2e6:	4770      	bx	lr
		return BT_HCI_ERR_PAIRING_NOT_ALLOWED;
   2e2e8:	2018      	movs	r0, #24
   2e2ea:	4770      	bx	lr
		return BT_HCI_ERR_INVALID_PARAM;
   2e2ec:	2012      	movs	r0, #18
   2e2ee:	4770      	bx	lr
		return BT_HCI_ERR_UNSPECIFIED;
   2e2f0:	201f      	movs	r0, #31
   2e2f2:	4770      	bx	lr
		return BT_HCI_ERR_AUTH_FAIL;
   2e2f4:	2005      	movs	r0, #5
}
   2e2f6:	4770      	bx	lr

0002e2f8 <xor_128>:
	size_t len = 16;
   2e2f8:	2310      	movs	r3, #16
	while (len--) {
   2e2fa:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
   2e2fe:	b17b      	cbz	r3, 2e320 <xor_128+0x28>
{
   2e300:	b500      	push	{lr}
		*r++ = *p++ ^ *q++;
   2e302:	f810 3b01 	ldrb.w	r3, [r0], #1
   2e306:	f811 eb01 	ldrb.w	lr, [r1], #1
   2e30a:	ea83 030e 	eor.w	r3, r3, lr
   2e30e:	f802 3b01 	strb.w	r3, [r2], #1
	while (len--) {
   2e312:	4663      	mov	r3, ip
   2e314:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   2e318:	2b00      	cmp	r3, #0
   2e31a:	d1f2      	bne.n	2e302 <xor_128+0xa>
}
   2e31c:	f85d fb04 	ldr.w	pc, [sp], #4
   2e320:	4770      	bx	lr

0002e322 <smp_pairing_rsp>:
}
   2e322:	2007      	movs	r0, #7
   2e324:	4770      	bx	lr

0002e326 <le_sc_oob_data_req_check>:
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   2e326:	7ac0      	ldrb	r0, [r0, #11]
}
   2e328:	f000 0001 	and.w	r0, r0, #1
   2e32c:	4770      	bx	lr

0002e32e <le_sc_oob_data_rsp_check>:
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   2e32e:	7c80      	ldrb	r0, [r0, #18]
}
   2e330:	f000 0001 	and.w	r0, r0, #1
   2e334:	4770      	bx	lr

0002e336 <le_sc_oob_config_set>:
{
   2e336:	b570      	push	{r4, r5, r6, lr}
   2e338:	4606      	mov	r6, r0
   2e33a:	460c      	mov	r4, r1
	bool req_oob_present = le_sc_oob_data_req_check(smp);
   2e33c:	f7ff fff3 	bl	2e326 <le_sc_oob_data_req_check>
   2e340:	4605      	mov	r5, r0
	bool rsp_oob_present = le_sc_oob_data_rsp_check(smp);
   2e342:	4630      	mov	r0, r6
   2e344:	f7ff fff3 	bl	2e32e <le_sc_oob_data_rsp_check>
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   2e348:	b12d      	cbz	r5, 2e356 <le_sc_oob_config_set+0x20>
   2e34a:	2300      	movs	r3, #0
		if (rsp_oob_present) {
   2e34c:	b108      	cbz	r0, 2e352 <le_sc_oob_config_set+0x1c>
				     BT_CONN_OOB_BOTH_PEERS :
   2e34e:	b923      	cbnz	r3, 2e35a <le_sc_oob_config_set+0x24>
   2e350:	2302      	movs	r3, #2
	info->lesc.oob_config = oob_config;
   2e352:	7063      	strb	r3, [r4, #1]
}
   2e354:	bd70      	pop	{r4, r5, r6, pc}
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   2e356:	2303      	movs	r3, #3
   2e358:	e7f8      	b.n	2e34c <le_sc_oob_config_set+0x16>
				     BT_CONN_OOB_BOTH_PEERS :
   2e35a:	2301      	movs	r3, #1
   2e35c:	e7f9      	b.n	2e352 <le_sc_oob_config_set+0x1c>

0002e35e <smp_signing_info>:
}
   2e35e:	2007      	movs	r0, #7
   2e360:	4770      	bx	lr

0002e362 <smp_security_request>:
}
   2e362:	2007      	movs	r0, #7
   2e364:	4770      	bx	lr

0002e366 <smp_keypress_notif>:
   2e366:	f3bf 8f5b 	dmb	ish
   2e36a:	e850 3f00 	ldrex	r3, [r0]
   2e36e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   2e372:	e840 3200 	strex	r2, r3, [r0]
   2e376:	2a00      	cmp	r2, #0
   2e378:	d1f7      	bne.n	2e36a <smp_keypress_notif+0x4>
   2e37a:	f3bf 8f5b 	dmb	ish
}
   2e37e:	2000      	movs	r0, #0
   2e380:	4770      	bx	lr

0002e382 <smp_reset>:
{
   2e382:	b538      	push	{r3, r4, r5, lr}
   2e384:	4604      	mov	r4, r0
	atomic_set(smp->flags, 0);
   2e386:	1d03      	adds	r3, r0, #4
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2e388:	2500      	movs	r5, #0
   2e38a:	f3bf 8f5b 	dmb	ish
   2e38e:	e853 2f00 	ldrex	r2, [r3]
   2e392:	e843 5100 	strex	r1, r5, [r3]
   2e396:	2900      	cmp	r1, #0
   2e398:	d1f9      	bne.n	2e38e <smp_reset+0xc>
   2e39a:	f3bf 8f5b 	dmb	ish
	(void)k_work_cancel_delayable(&smp->work);
   2e39e:	f504 70c0 	add.w	r0, r4, #384	; 0x180
   2e3a2:	f7f8 ff37 	bl	27214 <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
   2e3a6:	7225      	strb	r5, [r4, #8]
   2e3a8:	f3bf 8f5b 	dmb	ish
   2e3ac:	e854 3f00 	ldrex	r3, [r4]
   2e3b0:	e844 5200 	strex	r2, r5, [r4]
   2e3b4:	2a00      	cmp	r2, #0
   2e3b6:	d1f9      	bne.n	2e3ac <smp_reset+0x2a>
   2e3b8:	f3bf 8f5b 	dmb	ish
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2e3bc:	f3bf 8f5b 	dmb	ish
   2e3c0:	e854 3f00 	ldrex	r3, [r4]
   2e3c4:	f043 0302 	orr.w	r3, r3, #2
   2e3c8:	e844 3200 	strex	r2, r3, [r4]
   2e3cc:	2a00      	cmp	r2, #0
   2e3ce:	d1f7      	bne.n	2e3c0 <smp_reset+0x3e>
   2e3d0:	f3bf 8f5b 	dmb	ish
}
   2e3d4:	bd38      	pop	{r3, r4, r5, pc}

0002e3d6 <smp_s1>:
{
   2e3d6:	b508      	push	{r3, lr}
   2e3d8:	468c      	mov	ip, r1
   2e3da:	4619      	mov	r1, r3
   2e3dc:	f8d2 e000 	ldr.w	lr, [r2]
   2e3e0:	6853      	ldr	r3, [r2, #4]
   2e3e2:	f8c1 e000 	str.w	lr, [r1]
   2e3e6:	604b      	str	r3, [r1, #4]
   2e3e8:	f8dc 2000 	ldr.w	r2, [ip]
   2e3ec:	f8dc 3004 	ldr.w	r3, [ip, #4]
   2e3f0:	608a      	str	r2, [r1, #8]
   2e3f2:	60cb      	str	r3, [r1, #12]
	return bt_encrypt_le(k, out, out);
   2e3f4:	460a      	mov	r2, r1
   2e3f6:	f7f4 fe0d 	bl	23014 <bt_encrypt_le>
}
   2e3fa:	bd08      	pop	{r3, pc}

0002e3fc <smp_send>:
{
   2e3fc:	b530      	push	{r4, r5, lr}
   2e3fe:	b083      	sub	sp, #12
   2e400:	4604      	mov	r4, r0
   2e402:	460d      	mov	r5, r1
   2e404:	4613      	mov	r3, r2
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   2e406:	2200      	movs	r2, #0
   2e408:	9200      	str	r2, [sp, #0]
   2e40a:	460a      	mov	r2, r1
   2e40c:	2106      	movs	r1, #6
   2e40e:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   2e412:	f7fe fc4f 	bl	2ccb4 <bt_l2cap_send_cb>
   2e416:	b940      	cbnz	r0, 2e42a <smp_send+0x2e>
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   2e418:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2e41c:	2300      	movs	r3, #0
   2e41e:	f504 70c0 	add.w	r0, r4, #384	; 0x180
   2e422:	f7f8 feef 	bl	27204 <k_work_reschedule>
}
   2e426:	b003      	add	sp, #12
   2e428:	bd30      	pop	{r4, r5, pc}
		net_buf_unref(buf);
   2e42a:	4628      	mov	r0, r5
   2e42c:	f7f1 ffaa 	bl	20384 <net_buf_unref>
		return;
   2e430:	e7f9      	b.n	2e426 <smp_send+0x2a>

0002e432 <bt_smp_aes_cmac>:
{
   2e432:	b570      	push	{r4, r5, r6, lr}
   2e434:	b0c2      	sub	sp, #264	; 0x108
   2e436:	460c      	mov	r4, r1
   2e438:	4615      	mov	r5, r2
   2e43a:	461e      	mov	r6, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   2e43c:	aa16      	add	r2, sp, #88	; 0x58
   2e43e:	4601      	mov	r1, r0
   2e440:	4668      	mov	r0, sp
   2e442:	f7fd fb5f 	bl	2bb04 <tc_cmac_setup>
   2e446:	b168      	cbz	r0, 2e464 <bt_smp_aes_cmac+0x32>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   2e448:	462a      	mov	r2, r5
   2e44a:	4621      	mov	r1, r4
   2e44c:	4668      	mov	r0, sp
   2e44e:	f7fd fb86 	bl	2bb5e <tc_cmac_update>
   2e452:	b150      	cbz	r0, 2e46a <bt_smp_aes_cmac+0x38>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   2e454:	4669      	mov	r1, sp
   2e456:	4630      	mov	r0, r6
   2e458:	f7fd fbf1 	bl	2bc3e <tc_cmac_final>
   2e45c:	b140      	cbz	r0, 2e470 <bt_smp_aes_cmac+0x3e>
	return 0;
   2e45e:	2000      	movs	r0, #0
}
   2e460:	b042      	add	sp, #264	; 0x108
   2e462:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   2e464:	f06f 0004 	mvn.w	r0, #4
   2e468:	e7fa      	b.n	2e460 <bt_smp_aes_cmac+0x2e>
		return -EIO;
   2e46a:	f06f 0004 	mvn.w	r0, #4
   2e46e:	e7f7      	b.n	2e460 <bt_smp_aes_cmac+0x2e>
		return -EIO;
   2e470:	f06f 0004 	mvn.w	r0, #4
   2e474:	e7f4      	b.n	2e460 <bt_smp_aes_cmac+0x2e>

0002e476 <smp_c1>:
{
   2e476:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e478:	b089      	sub	sp, #36	; 0x24
   2e47a:	4605      	mov	r5, r0
   2e47c:	4608      	mov	r0, r1
   2e47e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   2e480:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   2e482:	9c10      	ldr	r4, [sp, #64]	; 0x40
	p1[0] = ia->type;
   2e484:	7831      	ldrb	r1, [r6, #0]
   2e486:	f88d 1010 	strb.w	r1, [sp, #16]
	p1[1] = ra->type;
   2e48a:	7839      	ldrb	r1, [r7, #0]
   2e48c:	f88d 1011 	strb.w	r1, [sp, #17]
	memcpy(p1 + 2, preq, 7);
   2e490:	6811      	ldr	r1, [r2, #0]
   2e492:	f8cd 1012 	str.w	r1, [sp, #18]
   2e496:	8891      	ldrh	r1, [r2, #4]
   2e498:	7992      	ldrb	r2, [r2, #6]
   2e49a:	f8ad 1016 	strh.w	r1, [sp, #22]
   2e49e:	f88d 2018 	strb.w	r2, [sp, #24]
	memcpy(p1 + 9, pres, 7);
   2e4a2:	681a      	ldr	r2, [r3, #0]
   2e4a4:	f8cd 2019 	str.w	r2, [sp, #25]
   2e4a8:	889a      	ldrh	r2, [r3, #4]
   2e4aa:	799b      	ldrb	r3, [r3, #6]
   2e4ac:	f8ad 201d 	strh.w	r2, [sp, #29]
   2e4b0:	f88d 301f 	strb.w	r3, [sp, #31]
	xor_128(r, p1, enc_data);
   2e4b4:	4622      	mov	r2, r4
   2e4b6:	a904      	add	r1, sp, #16
   2e4b8:	f7ff ff1e 	bl	2e2f8 <xor_128>
	err = bt_encrypt_le(k, enc_data, enc_data);
   2e4bc:	4622      	mov	r2, r4
   2e4be:	4621      	mov	r1, r4
   2e4c0:	4628      	mov	r0, r5
   2e4c2:	f7f4 fda7 	bl	23014 <bt_encrypt_le>
	if (err) {
   2e4c6:	b108      	cbz	r0, 2e4cc <smp_c1+0x56>
}
   2e4c8:	b009      	add	sp, #36	; 0x24
   2e4ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memcpy(p2, ra->a.val, 6);
   2e4cc:	f8d7 0001 	ldr.w	r0, [r7, #1]
   2e4d0:	9000      	str	r0, [sp, #0]
   2e4d2:	f8b7 3005 	ldrh.w	r3, [r7, #5]
   2e4d6:	f8ad 3004 	strh.w	r3, [sp, #4]
	memcpy(p2 + 6, ia->a.val, 6);
   2e4da:	f8d6 3001 	ldr.w	r3, [r6, #1]
   2e4de:	f8cd 3006 	str.w	r3, [sp, #6]
   2e4e2:	f8b6 3005 	ldrh.w	r3, [r6, #5]
   2e4e6:	f8ad 300a 	strh.w	r3, [sp, #10]
	(void)memset(p2 + 12, 0, 4);
   2e4ea:	2300      	movs	r3, #0
   2e4ec:	9303      	str	r3, [sp, #12]
	xor_128(enc_data, p2, enc_data);
   2e4ee:	4622      	mov	r2, r4
   2e4f0:	4669      	mov	r1, sp
   2e4f2:	4620      	mov	r0, r4
   2e4f4:	f7ff ff00 	bl	2e2f8 <xor_128>
	return bt_encrypt_le(k, enc_data, enc_data);
   2e4f8:	4622      	mov	r2, r4
   2e4fa:	4621      	mov	r1, r4
   2e4fc:	4628      	mov	r0, r5
   2e4fe:	f7f4 fd89 	bl	23014 <bt_encrypt_le>
   2e502:	e7e1      	b.n	2e4c8 <smp_c1+0x52>

0002e504 <update_debug_keys_check>:
{
   2e504:	b510      	push	{r4, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   2e506:	f8d0 40ec 	ldr.w	r4, [r0, #236]	; 0xec
	if (!conn->le.keys) {
   2e50a:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   2e50e:	b163      	cbz	r3, 2e52a <update_debug_keys_check+0x26>
	if (!conn->le.keys ||
   2e510:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   2e514:	b18b      	cbz	r3, 2e53a <update_debug_keys_check+0x36>
	    !(conn->le.keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   2e516:	89da      	ldrh	r2, [r3, #14]
	if (!conn->le.keys ||
   2e518:	f012 0f24 	tst.w	r2, #36	; 0x24
   2e51c:	d00f      	beq.n	2e53e <update_debug_keys_check+0x3a>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   2e51e:	7b5b      	ldrb	r3, [r3, #13]
   2e520:	f013 0f02 	tst.w	r3, #2
   2e524:	d10d      	bne.n	2e542 <update_debug_keys_check+0x3e>
	return false;
   2e526:	2000      	movs	r0, #0
}
   2e528:	bd10      	pop	{r4, pc}
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   2e52a:	f104 0190 	add.w	r1, r4, #144	; 0x90
   2e52e:	7a20      	ldrb	r0, [r4, #8]
   2e530:	f7f1 fa8c 	bl	1fa4c <bt_keys_get_addr>
   2e534:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
   2e538:	e7ea      	b.n	2e510 <update_debug_keys_check+0xc>
		return true;
   2e53a:	2001      	movs	r0, #1
   2e53c:	e7f4      	b.n	2e528 <update_debug_keys_check+0x24>
   2e53e:	2001      	movs	r0, #1
   2e540:	e7f2      	b.n	2e528 <update_debug_keys_check+0x24>
		return true;
   2e542:	2001      	movs	r0, #1
   2e544:	e7f0      	b.n	2e528 <update_debug_keys_check+0x24>

0002e546 <smp_create_pdu>:
{
   2e546:	b570      	push	{r4, r5, r6, lr}
   2e548:	460d      	mov	r5, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2e54a:	1d06      	adds	r6, r0, #4
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2e54c:	f3bf 8f5b 	dmb	ish
   2e550:	6843      	ldr	r3, [r0, #4]
   2e552:	f3bf 8f5b 	dmb	ish
   2e556:	f013 0f10 	tst.w	r3, #16
   2e55a:	d00e      	beq.n	2e57a <smp_create_pdu+0x34>
		timeout = K_NO_WAIT;
   2e55c:	2200      	movs	r2, #0
   2e55e:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   2e560:	2100      	movs	r1, #0
   2e562:	4608      	mov	r0, r1
   2e564:	f7fe fba1 	bl	2ccaa <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   2e568:	4604      	mov	r4, r0
   2e56a:	b150      	cbz	r0, 2e582 <smp_create_pdu+0x3c>
   2e56c:	2101      	movs	r1, #1
   2e56e:	3008      	adds	r0, #8
   2e570:	f7f2 f820 	bl	205b4 <net_buf_simple_add>
	hdr->code = op;
   2e574:	7005      	strb	r5, [r0, #0]
}
   2e576:	4620      	mov	r0, r4
   2e578:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   2e57a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2e57e:	2300      	movs	r3, #0
   2e580:	e7ee      	b.n	2e560 <smp_create_pdu+0x1a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2e582:	f3bf 8f5b 	dmb	ish
   2e586:	e856 3f00 	ldrex	r3, [r6]
   2e58a:	f043 0310 	orr.w	r3, r3, #16
   2e58e:	e846 3200 	strex	r2, r3, [r6]
   2e592:	2a00      	cmp	r2, #0
   2e594:	d1f7      	bne.n	2e586 <smp_create_pdu+0x40>
   2e596:	f3bf 8f5b 	dmb	ish
		return NULL;
   2e59a:	e7ec      	b.n	2e576 <smp_create_pdu+0x30>

0002e59c <legacy_send_pairing_confirm>:
{
   2e59c:	b570      	push	{r4, r5, r6, lr}
   2e59e:	b084      	sub	sp, #16
   2e5a0:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   2e5a2:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   2e5a6:	2210      	movs	r2, #16
   2e5a8:	2103      	movs	r1, #3
   2e5aa:	f7ff ffcc 	bl	2e546 <smp_create_pdu>
	if (!buf) {
   2e5ae:	b380      	cbz	r0, 2e612 <legacy_send_pairing_confirm+0x76>
   2e5b0:	4606      	mov	r6, r0
   2e5b2:	2110      	movs	r1, #16
   2e5b4:	3008      	adds	r0, #8
   2e5b6:	f7f1 fffd 	bl	205b4 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   2e5ba:	f105 0397 	add.w	r3, r5, #151	; 0x97
   2e5be:	359e      	adds	r5, #158	; 0x9e
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   2e5c0:	9002      	str	r0, [sp, #8]
   2e5c2:	9501      	str	r5, [sp, #4]
   2e5c4:	9300      	str	r3, [sp, #0]
   2e5c6:	f104 0310 	add.w	r3, r4, #16
   2e5ca:	f104 0209 	add.w	r2, r4, #9
   2e5ce:	f104 0127 	add.w	r1, r4, #39	; 0x27
   2e5d2:	f104 0047 	add.w	r0, r4, #71	; 0x47
   2e5d6:	f7ff ff4e 	bl	2e476 <smp_c1>
   2e5da:	b9a8      	cbnz	r0, 2e608 <legacy_send_pairing_confirm+0x6c>
	smp_send(smp, buf, NULL, NULL);
   2e5dc:	2300      	movs	r3, #0
   2e5de:	461a      	mov	r2, r3
   2e5e0:	4631      	mov	r1, r6
   2e5e2:	4620      	mov	r0, r4
   2e5e4:	f7ff ff0a 	bl	2e3fc <smp_send>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   2e5e8:	3404      	adds	r4, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2e5ea:	f3bf 8f5b 	dmb	ish
   2e5ee:	e854 3f00 	ldrex	r3, [r4]
   2e5f2:	f023 0301 	bic.w	r3, r3, #1
   2e5f6:	e844 3200 	strex	r2, r3, [r4]
   2e5fa:	2a00      	cmp	r2, #0
   2e5fc:	d1f7      	bne.n	2e5ee <legacy_send_pairing_confirm+0x52>
   2e5fe:	f3bf 8f5b 	dmb	ish
	return 0;
   2e602:	2000      	movs	r0, #0
}
   2e604:	b004      	add	sp, #16
   2e606:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
   2e608:	4630      	mov	r0, r6
   2e60a:	f7f1 febb 	bl	20384 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   2e60e:	2008      	movs	r0, #8
   2e610:	e7f8      	b.n	2e604 <legacy_send_pairing_confirm+0x68>
		return BT_SMP_ERR_UNSPECIFIED;
   2e612:	2008      	movs	r0, #8
   2e614:	e7f6      	b.n	2e604 <legacy_send_pairing_confirm+0x68>

0002e616 <legacy_pairing_confirm>:
{
   2e616:	b508      	push	{r3, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2e618:	f3bf 8f5b 	dmb	ish
   2e61c:	6842      	ldr	r2, [r0, #4]
   2e61e:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2e622:	f412 6f80 	tst.w	r2, #1024	; 0x400
   2e626:	d00e      	beq.n	2e646 <legacy_pairing_confirm+0x30>
   2e628:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2e62a:	f3bf 8f5b 	dmb	ish
   2e62e:	e853 2f00 	ldrex	r2, [r3]
   2e632:	f042 0201 	orr.w	r2, r2, #1
   2e636:	e843 2100 	strex	r1, r2, [r3]
   2e63a:	2900      	cmp	r1, #0
   2e63c:	d1f7      	bne.n	2e62e <legacy_pairing_confirm+0x18>
   2e63e:	f3bf 8f5b 	dmb	ish
	return 0;
   2e642:	2000      	movs	r0, #0
}
   2e644:	bd08      	pop	{r3, pc}
   2e646:	f3bf 8f5b 	dmb	ish
   2e64a:	e850 3f00 	ldrex	r3, [r0]
   2e64e:	f043 0310 	orr.w	r3, r3, #16
   2e652:	e840 3200 	strex	r2, r3, [r0]
   2e656:	2a00      	cmp	r2, #0
   2e658:	d1f7      	bne.n	2e64a <legacy_pairing_confirm+0x34>
   2e65a:	f3bf 8f5b 	dmb	ish
			return legacy_send_pairing_confirm(smp);
   2e65e:	f7ff ff9d 	bl	2e59c <legacy_send_pairing_confirm>
   2e662:	e7ef      	b.n	2e644 <legacy_pairing_confirm+0x2e>

0002e664 <sc_smp_send_dhkey_check>:
{
   2e664:	b570      	push	{r4, r5, r6, lr}
   2e666:	4606      	mov	r6, r0
   2e668:	460c      	mov	r4, r1
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   2e66a:	2210      	movs	r2, #16
   2e66c:	210d      	movs	r1, #13
   2e66e:	f7ff ff6a 	bl	2e546 <smp_create_pdu>
	if (!buf) {
   2e672:	b1b0      	cbz	r0, 2e6a2 <sc_smp_send_dhkey_check+0x3e>
   2e674:	4605      	mov	r5, r0
   2e676:	2110      	movs	r1, #16
   2e678:	3008      	adds	r0, #8
   2e67a:	f7f1 ff9b 	bl	205b4 <net_buf_simple_add>
   2e67e:	f8d4 c000 	ldr.w	ip, [r4]
   2e682:	6861      	ldr	r1, [r4, #4]
   2e684:	68a2      	ldr	r2, [r4, #8]
   2e686:	68e3      	ldr	r3, [r4, #12]
   2e688:	f8c0 c000 	str.w	ip, [r0]
   2e68c:	6041      	str	r1, [r0, #4]
   2e68e:	6082      	str	r2, [r0, #8]
   2e690:	60c3      	str	r3, [r0, #12]
	smp_send(smp, buf, NULL, NULL);
   2e692:	2300      	movs	r3, #0
   2e694:	461a      	mov	r2, r3
   2e696:	4629      	mov	r1, r5
   2e698:	4630      	mov	r0, r6
   2e69a:	f7ff feaf 	bl	2e3fc <smp_send>
	return 0;
   2e69e:	2000      	movs	r0, #0
}
   2e6a0:	bd70      	pop	{r4, r5, r6, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2e6a2:	2008      	movs	r0, #8
   2e6a4:	e7fc      	b.n	2e6a0 <sc_smp_send_dhkey_check+0x3c>

0002e6a6 <smp_send_pairing_random>:
{
   2e6a6:	b538      	push	{r3, r4, r5, lr}
   2e6a8:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   2e6aa:	2210      	movs	r2, #16
   2e6ac:	2104      	movs	r1, #4
   2e6ae:	f7ff ff4a 	bl	2e546 <smp_create_pdu>
	if (!rsp_buf) {
   2e6b2:	b1c8      	cbz	r0, 2e6e8 <smp_send_pairing_random+0x42>
   2e6b4:	4605      	mov	r5, r0
   2e6b6:	2110      	movs	r1, #16
   2e6b8:	3008      	adds	r0, #8
   2e6ba:	f7f1 ff7b 	bl	205b4 <net_buf_simple_add>
   2e6be:	f8d4 c027 	ldr.w	ip, [r4, #39]	; 0x27
   2e6c2:	f8d4 102b 	ldr.w	r1, [r4, #43]	; 0x2b
   2e6c6:	f8d4 202f 	ldr.w	r2, [r4, #47]	; 0x2f
   2e6ca:	f8d4 3033 	ldr.w	r3, [r4, #51]	; 0x33
   2e6ce:	f8c0 c000 	str.w	ip, [r0]
   2e6d2:	6041      	str	r1, [r0, #4]
   2e6d4:	6082      	str	r2, [r0, #8]
   2e6d6:	60c3      	str	r3, [r0, #12]
	smp_send(smp, rsp_buf, NULL, NULL);
   2e6d8:	2300      	movs	r3, #0
   2e6da:	461a      	mov	r2, r3
   2e6dc:	4629      	mov	r1, r5
   2e6de:	4620      	mov	r0, r4
   2e6e0:	f7ff fe8c 	bl	2e3fc <smp_send>
	return 0;
   2e6e4:	2000      	movs	r0, #0
}
   2e6e6:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2e6e8:	2008      	movs	r0, #8
   2e6ea:	e7fc      	b.n	2e6e6 <smp_send_pairing_random+0x40>

0002e6ec <send_pairing_rsp>:
{
   2e6ec:	b538      	push	{r3, r4, r5, lr}
   2e6ee:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   2e6f0:	2206      	movs	r2, #6
   2e6f2:	2102      	movs	r1, #2
   2e6f4:	f7ff ff27 	bl	2e546 <smp_create_pdu>
	if (!rsp_buf) {
   2e6f8:	b190      	cbz	r0, 2e720 <send_pairing_rsp+0x34>
   2e6fa:	4605      	mov	r5, r0
   2e6fc:	2106      	movs	r1, #6
   2e6fe:	3008      	adds	r0, #8
   2e700:	f7f1 ff58 	bl	205b4 <net_buf_simple_add>
   2e704:	f8d4 3011 	ldr.w	r3, [r4, #17]
   2e708:	6003      	str	r3, [r0, #0]
   2e70a:	f8b4 3015 	ldrh.w	r3, [r4, #21]
   2e70e:	8083      	strh	r3, [r0, #4]
	smp_send(smp, rsp_buf, NULL, NULL);
   2e710:	2300      	movs	r3, #0
   2e712:	461a      	mov	r2, r3
   2e714:	4629      	mov	r1, r5
   2e716:	4620      	mov	r0, r4
   2e718:	f7ff fe70 	bl	2e3fc <smp_send>
	return 0;
   2e71c:	2000      	movs	r0, #0
}
   2e71e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2e720:	2008      	movs	r0, #8
   2e722:	e7fc      	b.n	2e71e <send_pairing_rsp+0x32>

0002e724 <generate_dhkey>:
{
   2e724:	b510      	push	{r4, lr}
   2e726:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   2e728:	1d03      	adds	r3, r0, #4
   2e72a:	f3bf 8f5b 	dmb	ish
   2e72e:	e853 2f00 	ldrex	r2, [r3]
   2e732:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   2e736:	e843 2100 	strex	r1, r2, [r3]
   2e73a:	2900      	cmp	r1, #0
   2e73c:	d1f7      	bne.n	2e72e <generate_dhkey+0xa>
   2e73e:	f3bf 8f5b 	dmb	ish
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   2e742:	2008      	movs	r0, #8
   2e744:	f7ef fc28 	bl	1df98 <smp_find>
   2e748:	b108      	cbz	r0, 2e74e <generate_dhkey+0x2a>
	return 0;
   2e74a:	2000      	movs	r0, #0
}
   2e74c:	bd10      	pop	{r4, pc}
		return smp_dhkey_generate(smp);
   2e74e:	4620      	mov	r0, r4
   2e750:	f7ef fa74 	bl	1dc3c <smp_dhkey_generate>
   2e754:	e7fa      	b.n	2e74c <generate_dhkey+0x28>

0002e756 <smp_keys_check>:
{
   2e756:	b570      	push	{r4, r5, r6, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2e758:	f3bf 8f5b 	dmb	ish
   2e75c:	6843      	ldr	r3, [r0, #4]
   2e75e:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2e762:	f3c3 2580 	ubfx	r5, r3, #10, #1
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   2e766:	f413 6f80 	tst.w	r3, #1024	; 0x400
   2e76a:	d132      	bne.n	2e7d2 <smp_keys_check+0x7c>
   2e76c:	4604      	mov	r4, r0
	if (!conn->le.keys) {
   2e76e:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   2e772:	b1db      	cbz	r3, 2e7ac <smp_keys_check+0x56>
	if (!conn->le.keys ||
   2e774:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   2e778:	b363      	cbz	r3, 2e7d4 <smp_keys_check+0x7e>
	    !(conn->le.keys->keys & (BT_KEYS_LTK | BT_KEYS_LTK_P256))) {
   2e77a:	89da      	ldrh	r2, [r3, #14]
	if (!conn->le.keys ||
   2e77c:	f012 0f24 	tst.w	r2, #36	; 0x24
   2e780:	d028      	beq.n	2e7d4 <smp_keys_check+0x7e>
	if (conn->required_sec_level >= BT_SECURITY_L3 &&
   2e782:	7aa1      	ldrb	r1, [r4, #10]
   2e784:	2902      	cmp	r1, #2
   2e786:	d903      	bls.n	2e790 <smp_keys_check+0x3a>
	    !(conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   2e788:	7b58      	ldrb	r0, [r3, #13]
	if (conn->required_sec_level >= BT_SECURITY_L3 &&
   2e78a:	f010 0f01 	tst.w	r0, #1
   2e78e:	d021      	beq.n	2e7d4 <smp_keys_check+0x7e>
	if (conn->required_sec_level >= BT_SECURITY_L4 &&
   2e790:	2903      	cmp	r1, #3
   2e792:	d921      	bls.n	2e7d8 <smp_keys_check+0x82>
	    !((conn->le.keys->flags & BT_KEYS_AUTHENTICATED) &&
   2e794:	7b59      	ldrb	r1, [r3, #13]
	if (conn->required_sec_level >= BT_SECURITY_L4 &&
   2e796:	f011 0f01 	tst.w	r1, #1
   2e79a:	d01b      	beq.n	2e7d4 <smp_keys_check+0x7e>
	    !((conn->le.keys->flags & BT_KEYS_AUTHENTICATED) &&
   2e79c:	f012 0f20 	tst.w	r2, #32
   2e7a0:	d018      	beq.n	2e7d4 <smp_keys_check+0x7e>
	      (conn->le.keys->enc_size == BT_SMP_MAX_ENC_KEY_SIZE))) {
   2e7a2:	7b1b      	ldrb	r3, [r3, #12]
	    !((conn->le.keys->flags & BT_KEYS_AUTHENTICATED) &&
   2e7a4:	2b10      	cmp	r3, #16
   2e7a6:	d115      	bne.n	2e7d4 <smp_keys_check+0x7e>
	return true;
   2e7a8:	2501      	movs	r5, #1
   2e7aa:	e013      	b.n	2e7d4 <smp_keys_check+0x7e>
						     conn->id, &conn->le.dst);
   2e7ac:	f100 0690 	add.w	r6, r0, #144	; 0x90
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   2e7b0:	4632      	mov	r2, r6
   2e7b2:	7a01      	ldrb	r1, [r0, #8]
   2e7b4:	2020      	movs	r0, #32
   2e7b6:	f7f1 f9b5 	bl	1fb24 <bt_keys_find>
   2e7ba:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
		if (!conn->le.keys) {
   2e7be:	2800      	cmp	r0, #0
   2e7c0:	d1d8      	bne.n	2e774 <smp_keys_check+0x1e>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   2e7c2:	4632      	mov	r2, r6
   2e7c4:	7a21      	ldrb	r1, [r4, #8]
   2e7c6:	2004      	movs	r0, #4
   2e7c8:	f7f1 f9ac 	bl	1fb24 <bt_keys_find>
   2e7cc:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
   2e7d0:	e7d0      	b.n	2e774 <smp_keys_check+0x1e>
		return false;
   2e7d2:	2500      	movs	r5, #0
}
   2e7d4:	4628      	mov	r0, r5
   2e7d6:	bd70      	pop	{r4, r5, r6, pc}
	return true;
   2e7d8:	2501      	movs	r5, #1
   2e7da:	e7fb      	b.n	2e7d4 <smp_keys_check+0x7e>

0002e7dc <smp_send_security_req>:
{
   2e7dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e7e0:	b082      	sub	sp, #8
   2e7e2:	4605      	mov	r5, r0
	smp = smp_chan_get(conn);
   2e7e4:	f7ef f8c2 	bl	1d96c <smp_chan_get>
	if (!smp) {
   2e7e8:	2800      	cmp	r0, #0
   2e7ea:	d076      	beq.n	2e8da <smp_send_security_req+0xfe>
   2e7ec:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2e7ee:	f100 0804 	add.w	r8, r0, #4
   2e7f2:	f3bf 8f5b 	dmb	ish
   2e7f6:	6843      	ldr	r3, [r0, #4]
   2e7f8:	f3bf 8f5b 	dmb	ish
   2e7fc:	f013 0f10 	tst.w	r3, #16
   2e800:	d16e      	bne.n	2e8e0 <smp_send_security_req+0x104>
   2e802:	f3bf 8f5b 	dmb	ish
   2e806:	6843      	ldr	r3, [r0, #4]
   2e808:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   2e80c:	f013 0f08 	tst.w	r3, #8
   2e810:	d169      	bne.n	2e8e6 <smp_send_security_req+0x10a>
   2e812:	f3bf 8f5b 	dmb	ish
   2e816:	6843      	ldr	r3, [r0, #4]
   2e818:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   2e81c:	f013 0f02 	tst.w	r3, #2
   2e820:	d164      	bne.n	2e8ec <smp_send_security_req+0x110>
	if (!(sec_level_reachable(smp) || smp_keys_check(conn))) {
   2e822:	f7ef f971 	bl	1db08 <sec_level_reachable>
   2e826:	2800      	cmp	r0, #0
   2e828:	d03f      	beq.n	2e8aa <smp_send_security_req+0xce>
	if (!conn->le.keys) {
   2e82a:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   2e82e:	2b00      	cmp	r3, #0
   2e830:	d043      	beq.n	2e8ba <smp_send_security_req+0xde>
	if (smp_init(smp) != 0) {
   2e832:	4620      	mov	r0, r4
   2e834:	f7ef f9de 	bl	1dbf4 <smp_init>
   2e838:	2800      	cmp	r0, #0
   2e83a:	d15a      	bne.n	2e8f2 <smp_send_security_req+0x116>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
   2e83c:	2201      	movs	r2, #1
   2e83e:	210b      	movs	r1, #11
   2e840:	4620      	mov	r0, r4
   2e842:	f7ff fe80 	bl	2e546 <smp_create_pdu>
	if (!req_buf) {
   2e846:	4607      	mov	r7, r0
   2e848:	2800      	cmp	r0, #0
   2e84a:	d055      	beq.n	2e8f8 <smp_send_security_req+0x11c>
   2e84c:	2101      	movs	r1, #1
   2e84e:	3008      	adds	r0, #8
   2e850:	f7f1 feb0 	bl	205b4 <net_buf_simple_add>
   2e854:	4606      	mov	r6, r0
	req->auth_req = get_auth(smp, BT_SMP_AUTH_DEFAULT);
   2e856:	2109      	movs	r1, #9
   2e858:	4620      	mov	r0, r4
   2e85a:	f7ef f90b 	bl	1da74 <get_auth>
   2e85e:	7030      	strb	r0, [r6, #0]
   2e860:	2300      	movs	r3, #0
   2e862:	9300      	str	r3, [sp, #0]
   2e864:	463a      	mov	r2, r7
   2e866:	2106      	movs	r1, #6
   2e868:	4628      	mov	r0, r5
   2e86a:	f7fe fa23 	bl	2ccb4 <bt_l2cap_send_cb>
	if (err) {
   2e86e:	4605      	mov	r5, r0
   2e870:	bb78      	cbnz	r0, 2e8d2 <smp_send_security_req+0xf6>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2e872:	f3bf 8f5b 	dmb	ish
   2e876:	e858 3f00 	ldrex	r3, [r8]
   2e87a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   2e87e:	e848 3200 	strex	r2, r3, [r8]
   2e882:	2a00      	cmp	r2, #0
   2e884:	d1f7      	bne.n	2e876 <smp_send_security_req+0x9a>
   2e886:	f3bf 8f5b 	dmb	ish
   2e88a:	f3bf 8f5b 	dmb	ish
   2e88e:	e854 3f00 	ldrex	r3, [r4]
   2e892:	f043 0302 	orr.w	r3, r3, #2
   2e896:	e844 3200 	strex	r2, r3, [r4]
   2e89a:	2a00      	cmp	r2, #0
   2e89c:	d1f7      	bne.n	2e88e <smp_send_security_req+0xb2>
   2e89e:	f3bf 8f5b 	dmb	ish
}
   2e8a2:	4628      	mov	r0, r5
   2e8a4:	b002      	add	sp, #8
   2e8a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!(sec_level_reachable(smp) || smp_keys_check(conn))) {
   2e8aa:	4628      	mov	r0, r5
   2e8ac:	f7ff ff53 	bl	2e756 <smp_keys_check>
   2e8b0:	2800      	cmp	r0, #0
   2e8b2:	d1ba      	bne.n	2e82a <smp_send_security_req+0x4e>
		return -EINVAL;
   2e8b4:	f06f 0515 	mvn.w	r5, #21
   2e8b8:	e7f3      	b.n	2e8a2 <smp_send_security_req+0xc6>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   2e8ba:	f105 0190 	add.w	r1, r5, #144	; 0x90
   2e8be:	7a28      	ldrb	r0, [r5, #8]
   2e8c0:	f7f1 f8c4 	bl	1fa4c <bt_keys_get_addr>
   2e8c4:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
		if (!conn->le.keys) {
   2e8c8:	2800      	cmp	r0, #0
   2e8ca:	d1b2      	bne.n	2e832 <smp_send_security_req+0x56>
			return -ENOMEM;
   2e8cc:	f06f 050b 	mvn.w	r5, #11
   2e8d0:	e7e7      	b.n	2e8a2 <smp_send_security_req+0xc6>
		net_buf_unref(req_buf);
   2e8d2:	4638      	mov	r0, r7
   2e8d4:	f7f1 fd56 	bl	20384 <net_buf_unref>
		return err;
   2e8d8:	e7e3      	b.n	2e8a2 <smp_send_security_req+0xc6>
		return -ENOTCONN;
   2e8da:	f06f 057f 	mvn.w	r5, #127	; 0x7f
   2e8de:	e7e0      	b.n	2e8a2 <smp_send_security_req+0xc6>
		return -EIO;
   2e8e0:	f06f 0504 	mvn.w	r5, #4
   2e8e4:	e7dd      	b.n	2e8a2 <smp_send_security_req+0xc6>
		return -EBUSY;
   2e8e6:	f06f 050f 	mvn.w	r5, #15
   2e8ea:	e7da      	b.n	2e8a2 <smp_send_security_req+0xc6>
		return -EBUSY;
   2e8ec:	f06f 050f 	mvn.w	r5, #15
   2e8f0:	e7d7      	b.n	2e8a2 <smp_send_security_req+0xc6>
		return -ENOBUFS;
   2e8f2:	f06f 0568 	mvn.w	r5, #104	; 0x68
   2e8f6:	e7d4      	b.n	2e8a2 <smp_send_security_req+0xc6>
		return -ENOBUFS;
   2e8f8:	f06f 0568 	mvn.w	r5, #104	; 0x68
   2e8fc:	e7d1      	b.n	2e8a2 <smp_send_security_req+0xc6>

0002e8fe <legacy_pairing_req>:
{
   2e8fe:	b570      	push	{r4, r5, r6, lr}
   2e900:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   2e902:	f7ef f86f 	bl	1d9e4 <latch_auth_cb>
   2e906:	4606      	mov	r6, r0
	ret = legacy_request_tk(smp);
   2e908:	4620      	mov	r0, r4
   2e90a:	f7ef f9c3 	bl	1dc94 <legacy_request_tk>
	if (ret) {
   2e90e:	4605      	mov	r5, r0
   2e910:	bb48      	cbnz	r0, 2e966 <legacy_pairing_req+0x68>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   2e912:	7a25      	ldrb	r5, [r4, #8]
   2e914:	b95d      	cbnz	r5, 2e92e <legacy_pairing_req+0x30>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   2e916:	1d22      	adds	r2, r4, #4
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2e918:	f3bf 8f5b 	dmb	ish
   2e91c:	6863      	ldr	r3, [r4, #4]
   2e91e:	f3bf 8f5b 	dmb	ish
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   2e922:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   2e926:	d102      	bne.n	2e92e <legacy_pairing_req+0x30>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   2e928:	b10e      	cbz	r6, 2e92e <legacy_pairing_req+0x30>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   2e92a:	6973      	ldr	r3, [r6, #20]
   2e92c:	b9eb      	cbnz	r3, 2e96a <legacy_pairing_req+0x6c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2e92e:	f3bf 8f5b 	dmb	ish
   2e932:	e854 3f00 	ldrex	r3, [r4]
   2e936:	f043 0308 	orr.w	r3, r3, #8
   2e93a:	e844 3200 	strex	r2, r3, [r4]
   2e93e:	2a00      	cmp	r2, #0
   2e940:	d1f7      	bne.n	2e932 <legacy_pairing_req+0x34>
   2e942:	f3bf 8f5b 	dmb	ish
   2e946:	f3bf 8f5b 	dmb	ish
   2e94a:	e854 3f00 	ldrex	r3, [r4]
   2e94e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   2e952:	e844 3200 	strex	r2, r3, [r4]
   2e956:	2a00      	cmp	r2, #0
   2e958:	d1f7      	bne.n	2e94a <legacy_pairing_req+0x4c>
   2e95a:	f3bf 8f5b 	dmb	ish
	return send_pairing_rsp(smp);
   2e95e:	4620      	mov	r0, r4
   2e960:	f7ff fec4 	bl	2e6ec <send_pairing_rsp>
   2e964:	4605      	mov	r5, r0
}
   2e966:	4628      	mov	r0, r5
   2e968:	bd70      	pop	{r4, r5, r6, pc}
   2e96a:	f3bf 8f5b 	dmb	ish
   2e96e:	e852 3f00 	ldrex	r3, [r2]
   2e972:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   2e976:	e842 3100 	strex	r1, r3, [r2]
   2e97a:	2900      	cmp	r1, #0
   2e97c:	d1f7      	bne.n	2e96e <legacy_pairing_req+0x70>
   2e97e:	f3bf 8f5b 	dmb	ish
		smp_auth_cb->pairing_confirm(smp->chan.chan.conn);
   2e982:	6973      	ldr	r3, [r6, #20]
   2e984:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   2e988:	4798      	blx	r3
		return 0;
   2e98a:	e7ec      	b.n	2e966 <legacy_pairing_req+0x68>

0002e98c <remote_sec_level_reachable>:
{
   2e98c:	b510      	push	{r4, lr}
   2e98e:	4604      	mov	r4, r0
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   2e990:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
   2e994:	7a9b      	ldrb	r3, [r3, #10]
	switch (sec) {
   2e996:	2b03      	cmp	r3, #3
   2e998:	d018      	beq.n	2e9cc <remote_sec_level_reachable+0x40>
   2e99a:	d807      	bhi.n	2e9ac <remote_sec_level_reachable+0x20>
   2e99c:	3b01      	subs	r3, #1
   2e99e:	b2db      	uxtb	r3, r3
   2e9a0:	2b01      	cmp	r3, #1
   2e9a2:	d801      	bhi.n	2e9a8 <remote_sec_level_reachable+0x1c>
   2e9a4:	2000      	movs	r0, #0
}
   2e9a6:	bd10      	pop	{r4, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2e9a8:	2008      	movs	r0, #8
   2e9aa:	e7fc      	b.n	2e9a6 <remote_sec_level_reachable+0x1a>
	switch (sec) {
   2e9ac:	2b04      	cmp	r3, #4
   2e9ae:	d111      	bne.n	2e9d4 <remote_sec_level_reachable+0x48>
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   2e9b0:	f7ff fc87 	bl	2e2c2 <get_encryption_key_size>
   2e9b4:	2810      	cmp	r0, #16
   2e9b6:	d001      	beq.n	2e9bc <remote_sec_level_reachable+0x30>
			return BT_SMP_ERR_ENC_KEY_SIZE;
   2e9b8:	2006      	movs	r0, #6
   2e9ba:	e7f4      	b.n	2e9a6 <remote_sec_level_reachable+0x1a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2e9bc:	f3bf 8f5b 	dmb	ish
   2e9c0:	6863      	ldr	r3, [r4, #4]
   2e9c2:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   2e9c6:	f013 0f20 	tst.w	r3, #32
   2e9ca:	d005      	beq.n	2e9d8 <remote_sec_level_reachable+0x4c>
		if (smp->method == JUST_WORKS) {
   2e9cc:	7a23      	ldrb	r3, [r4, #8]
   2e9ce:	b12b      	cbz	r3, 2e9dc <remote_sec_level_reachable+0x50>
		return 0;
   2e9d0:	2000      	movs	r0, #0
   2e9d2:	e7e8      	b.n	2e9a6 <remote_sec_level_reachable+0x1a>
		return BT_SMP_ERR_UNSPECIFIED;
   2e9d4:	2008      	movs	r0, #8
   2e9d6:	e7e6      	b.n	2e9a6 <remote_sec_level_reachable+0x1a>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   2e9d8:	2003      	movs	r0, #3
   2e9da:	e7e4      	b.n	2e9a6 <remote_sec_level_reachable+0x1a>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   2e9dc:	2003      	movs	r0, #3
   2e9de:	e7e2      	b.n	2e9a6 <remote_sec_level_reachable+0x1a>

0002e9e0 <update_keys_check>:
	if (!keys ||
   2e9e0:	b321      	cbz	r1, 2ea2c <update_keys_check+0x4c>
{
   2e9e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e9e4:	4605      	mov	r5, r0
   2e9e6:	460c      	mov	r4, r1
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   2e9e8:	89ce      	ldrh	r6, [r1, #14]
	if (!keys ||
   2e9ea:	f016 0f24 	tst.w	r6, #36	; 0x24
   2e9ee:	d01f      	beq.n	2ea30 <update_keys_check+0x50>
	if (keys->enc_size > get_encryption_key_size(smp)) {
   2e9f0:	7b0f      	ldrb	r7, [r1, #12]
   2e9f2:	f7ff fc66 	bl	2e2c2 <get_encryption_key_size>
   2e9f6:	4287      	cmp	r7, r0
   2e9f8:	d81c      	bhi.n	2ea34 <update_keys_check+0x54>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   2e9fa:	f016 0f20 	tst.w	r6, #32
   2e9fe:	d10a      	bne.n	2ea16 <update_keys_check+0x36>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   2ea00:	7b63      	ldrb	r3, [r4, #13]
   2ea02:	f013 0301 	ands.w	r3, r3, #1
   2ea06:	d001      	beq.n	2ea0c <update_keys_check+0x2c>
	     smp->method == JUST_WORKS) {
   2ea08:	7a2a      	ldrb	r2, [r5, #8]
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   2ea0a:	b1aa      	cbz	r2, 2ea38 <update_keys_check+0x58>
	if (!IS_ENABLED(CONFIG_BT_SMP_ALLOW_UNAUTH_OVERWRITE) &&
   2ea0c:	b9b3      	cbnz	r3, 2ea3c <update_keys_check+0x5c>
	     && smp->method == JUST_WORKS)) {
   2ea0e:	7a2b      	ldrb	r3, [r5, #8]
	if (!IS_ENABLED(CONFIG_BT_SMP_ALLOW_UNAUTH_OVERWRITE) &&
   2ea10:	b1b3      	cbz	r3, 2ea40 <update_keys_check+0x60>
	return true;
   2ea12:	2001      	movs	r0, #1
   2ea14:	e00d      	b.n	2ea32 <update_keys_check+0x52>
   2ea16:	f3bf 8f5b 	dmb	ish
   2ea1a:	686b      	ldr	r3, [r5, #4]
   2ea1c:	f3bf 8f5b 	dmb	ish
   2ea20:	f3c3 1040 	ubfx	r0, r3, #5, #1
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   2ea24:	f013 0f20 	tst.w	r3, #32
   2ea28:	d1ea      	bne.n	2ea00 <update_keys_check+0x20>
   2ea2a:	e002      	b.n	2ea32 <update_keys_check+0x52>
		return true;
   2ea2c:	2001      	movs	r0, #1
}
   2ea2e:	4770      	bx	lr
		return true;
   2ea30:	2001      	movs	r0, #1
}
   2ea32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return false;
   2ea34:	2000      	movs	r0, #0
   2ea36:	e7fc      	b.n	2ea32 <update_keys_check+0x52>
		return false;
   2ea38:	2000      	movs	r0, #0
   2ea3a:	e7fa      	b.n	2ea32 <update_keys_check+0x52>
	return true;
   2ea3c:	2001      	movs	r0, #1
   2ea3e:	e7f8      	b.n	2ea32 <update_keys_check+0x52>
		return false;
   2ea40:	2000      	movs	r0, #0
   2ea42:	e7f6      	b.n	2ea32 <update_keys_check+0x52>

0002ea44 <smp_dhkey_check>:
{
   2ea44:	b508      	push	{r3, lr}
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   2ea46:	688a      	ldr	r2, [r1, #8]
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   2ea48:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
   2ea4c:	78db      	ldrb	r3, [r3, #3]
   2ea4e:	2b01      	cmp	r3, #1
   2ea50:	d001      	beq.n	2ea56 <smp_dhkey_check+0x12>
	return 0;
   2ea52:	2000      	movs	r0, #0
}
   2ea54:	bd08      	pop	{r3, pc}
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   2ea56:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2ea58:	f3bf 8f5b 	dmb	ish
   2ea5c:	e853 1f00 	ldrex	r1, [r3]
   2ea60:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
   2ea64:	e843 1c00 	strex	ip, r1, [r3]
   2ea68:	f1bc 0f00 	cmp.w	ip, #0
   2ea6c:	d1f6      	bne.n	2ea5c <smp_dhkey_check+0x18>
   2ea6e:	f3bf 8f5b 	dmb	ish
   2ea72:	f8d2 e000 	ldr.w	lr, [r2]
   2ea76:	f8d2 c004 	ldr.w	ip, [r2, #4]
   2ea7a:	6891      	ldr	r1, [r2, #8]
   2ea7c:	68d2      	ldr	r2, [r2, #12]
   2ea7e:	f8c0 e0b7 	str.w	lr, [r0, #183]	; 0xb7
   2ea82:	f8c0 c0bb 	str.w	ip, [r0, #187]	; 0xbb
   2ea86:	f8c0 10bf 	str.w	r1, [r0, #191]	; 0xbf
   2ea8a:	f8c0 20c3 	str.w	r2, [r0, #195]	; 0xc3
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2ea8e:	f3bf 8f5b 	dmb	ish
   2ea92:	6842      	ldr	r2, [r0, #4]
   2ea94:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   2ea98:	f012 0f80 	tst.w	r2, #128	; 0x80
   2ea9c:	d115      	bne.n	2eaca <smp_dhkey_check+0x86>
   2ea9e:	f3bf 8f5b 	dmb	ish
   2eaa2:	6842      	ldr	r2, [r0, #4]
   2eaa4:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2eaa8:	f412 6f80 	tst.w	r2, #1024	; 0x400
   2eaac:	d01b      	beq.n	2eae6 <smp_dhkey_check+0xa2>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2eaae:	f3bf 8f5b 	dmb	ish
   2eab2:	e853 2f00 	ldrex	r2, [r3]
   2eab6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   2eaba:	e843 2100 	strex	r1, r2, [r3]
   2eabe:	2900      	cmp	r1, #0
   2eac0:	d1f7      	bne.n	2eab2 <smp_dhkey_check+0x6e>
   2eac2:	f3bf 8f5b 	dmb	ish
			return 0;
   2eac6:	2000      	movs	r0, #0
   2eac8:	e7c4      	b.n	2ea54 <smp_dhkey_check+0x10>
   2eaca:	f3bf 8f5b 	dmb	ish
   2eace:	e853 2f00 	ldrex	r2, [r3]
   2ead2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   2ead6:	e843 2100 	strex	r1, r2, [r3]
   2eada:	2900      	cmp	r1, #0
   2eadc:	d1f7      	bne.n	2eace <smp_dhkey_check+0x8a>
   2eade:	f3bf 8f5b 	dmb	ish
			return 0;
   2eae2:	2000      	movs	r0, #0
   2eae4:	e7b6      	b.n	2ea54 <smp_dhkey_check+0x10>
		return compute_and_check_and_send_periph_dhcheck(smp);
   2eae6:	f7f0 f9cd 	bl	1ee84 <compute_and_check_and_send_periph_dhcheck>
   2eaea:	e7b3      	b.n	2ea54 <smp_dhkey_check+0x10>

0002eaec <smp_dhkey_ready>:
	if (!dhkey) {
   2eaec:	2900      	cmp	r1, #0
   2eaee:	d063      	beq.n	2ebb8 <smp_dhkey_ready+0xcc>
{
   2eaf0:	b510      	push	{r4, lr}
   2eaf2:	460b      	mov	r3, r1
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   2eaf4:	1d02      	adds	r2, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2eaf6:	f3bf 8f5b 	dmb	ish
   2eafa:	e852 1f00 	ldrex	r1, [r2]
   2eafe:	f021 0180 	bic.w	r1, r1, #128	; 0x80
   2eb02:	e842 1400 	strex	r4, r1, [r2]
   2eb06:	2c00      	cmp	r4, #0
   2eb08:	d1f7      	bne.n	2eafa <smp_dhkey_ready+0xe>
   2eb0a:	f3bf 8f5b 	dmb	ish
   2eb0e:	681c      	ldr	r4, [r3, #0]
   2eb10:	f8d3 e004 	ldr.w	lr, [r3, #4]
   2eb14:	f8d3 c008 	ldr.w	ip, [r3, #8]
   2eb18:	68d9      	ldr	r1, [r3, #12]
   2eb1a:	f8c0 4097 	str.w	r4, [r0, #151]	; 0x97
   2eb1e:	f8c0 e09b 	str.w	lr, [r0, #155]	; 0x9b
   2eb22:	f8c0 c09f 	str.w	ip, [r0, #159]	; 0x9f
   2eb26:	f8c0 10a3 	str.w	r1, [r0, #163]	; 0xa3
   2eb2a:	691c      	ldr	r4, [r3, #16]
   2eb2c:	f8d3 e014 	ldr.w	lr, [r3, #20]
   2eb30:	f8d3 c018 	ldr.w	ip, [r3, #24]
   2eb34:	69d9      	ldr	r1, [r3, #28]
   2eb36:	f8c0 40a7 	str.w	r4, [r0, #167]	; 0xa7
   2eb3a:	f8c0 e0ab 	str.w	lr, [r0, #171]	; 0xab
   2eb3e:	f8c0 c0af 	str.w	ip, [r0, #175]	; 0xaf
   2eb42:	f8c0 10b3 	str.w	r1, [r0, #179]	; 0xb3
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2eb46:	f3bf 8f5b 	dmb	ish
   2eb4a:	6843      	ldr	r3, [r0, #4]
   2eb4c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2eb50:	f413 6f80 	tst.w	r3, #1024	; 0x400
   2eb54:	d111      	bne.n	2eb7a <smp_dhkey_ready+0x8e>
   2eb56:	f3bf 8f5b 	dmb	ish
   2eb5a:	6843      	ldr	r3, [r0, #4]
   2eb5c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   2eb60:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   2eb64:	d117      	bne.n	2eb96 <smp_dhkey_ready+0xaa>
   2eb66:	f3bf 8f5b 	dmb	ish
   2eb6a:	6843      	ldr	r3, [r0, #4]
   2eb6c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   2eb70:	f413 7f00 	tst.w	r3, #512	; 0x200
   2eb74:	d11d      	bne.n	2ebb2 <smp_dhkey_ready+0xc6>
	return 0;
   2eb76:	2000      	movs	r0, #0
   2eb78:	e00c      	b.n	2eb94 <smp_dhkey_ready+0xa8>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2eb7a:	f3bf 8f5b 	dmb	ish
   2eb7e:	e852 3f00 	ldrex	r3, [r2]
   2eb82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   2eb86:	e842 3100 	strex	r1, r3, [r2]
   2eb8a:	2900      	cmp	r1, #0
   2eb8c:	d1f7      	bne.n	2eb7e <smp_dhkey_ready+0x92>
   2eb8e:	f3bf 8f5b 	dmb	ish
		return 0;
   2eb92:	2000      	movs	r0, #0
}
   2eb94:	bd10      	pop	{r4, pc}
   2eb96:	f3bf 8f5b 	dmb	ish
   2eb9a:	e852 3f00 	ldrex	r3, [r2]
   2eb9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   2eba2:	e842 3100 	strex	r1, r3, [r2]
   2eba6:	2900      	cmp	r1, #0
   2eba8:	d1f7      	bne.n	2eb9a <smp_dhkey_ready+0xae>
   2ebaa:	f3bf 8f5b 	dmb	ish
		return 0;
   2ebae:	2000      	movs	r0, #0
   2ebb0:	e7f0      	b.n	2eb94 <smp_dhkey_ready+0xa8>
		return  compute_and_check_and_send_periph_dhcheck(smp);
   2ebb2:	f7f0 f967 	bl	1ee84 <compute_and_check_and_send_periph_dhcheck>
   2ebb6:	e7ed      	b.n	2eb94 <smp_dhkey_ready+0xa8>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   2ebb8:	200b      	movs	r0, #11
}
   2ebba:	4770      	bx	lr

0002ebbc <bt_smp_request_ltk>:
{
   2ebbc:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ebbe:	b083      	sub	sp, #12
   2ebc0:	4604      	mov	r4, r0
   2ebc2:	e9cd 2300 	strd	r2, r3, [sp]
	smp = smp_chan_get(conn);
   2ebc6:	f7ee fed1 	bl	1d96c <smp_chan_get>
	if (!smp) {
   2ebca:	2800      	cmp	r0, #0
   2ebcc:	f000 80cb 	beq.w	2ed66 <bt_smp_request_ltk+0x1aa>
   2ebd0:	4605      	mov	r5, r0
	if (ediv == 0U && rand == 0U &&
   2ebd2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   2ebd6:	b91b      	cbnz	r3, 2ebe0 <bt_smp_request_ltk+0x24>
   2ebd8:	9a00      	ldr	r2, [sp, #0]
   2ebda:	9b01      	ldr	r3, [sp, #4]
   2ebdc:	4313      	orrs	r3, r2
   2ebde:	d028      	beq.n	2ec32 <bt_smp_request_ltk+0x76>
	if (!conn->le.keys) {
   2ebe0:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   2ebe4:	2b00      	cmp	r3, #0
   2ebe6:	d056      	beq.n	2ec96 <bt_smp_request_ltk+0xda>
	if (ediv == 0U && rand == 0U &&
   2ebe8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   2ebec:	b953      	cbnz	r3, 2ec04 <bt_smp_request_ltk+0x48>
   2ebee:	9a00      	ldr	r2, [sp, #0]
   2ebf0:	9b01      	ldr	r3, [sp, #4]
   2ebf2:	4313      	orrs	r3, r2
   2ebf4:	d106      	bne.n	2ec04 <bt_smp_request_ltk+0x48>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   2ebf6:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
	if (ediv == 0U && rand == 0U &&
   2ebfa:	b119      	cbz	r1, 2ec04 <bt_smp_request_ltk+0x48>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   2ebfc:	89cb      	ldrh	r3, [r1, #14]
   2ebfe:	f013 0f20 	tst.w	r3, #32
   2ec02:	d15b      	bne.n	2ecbc <bt_smp_request_ltk+0x100>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   2ec04:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   2ec08:	b118      	cbz	r0, 2ec12 <bt_smp_request_ltk+0x56>
   2ec0a:	89c3      	ldrh	r3, [r0, #14]
   2ec0c:	f013 0f01 	tst.w	r3, #1
   2ec10:	d172      	bne.n	2ecf8 <bt_smp_request_ltk+0x13c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2ec12:	f3bf 8f5b 	dmb	ish
   2ec16:	686b      	ldr	r3, [r5, #4]
   2ec18:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2ec1c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   2ec20:	f040 809b 	bne.w	2ed5a <bt_smp_request_ltk+0x19e>
	smp_reset(smp);
   2ec24:	4628      	mov	r0, r5
   2ec26:	f7ff fbac 	bl	2e382 <smp_reset>
	return false;
   2ec2a:	2600      	movs	r6, #0
}
   2ec2c:	4630      	mov	r0, r6
   2ec2e:	b003      	add	sp, #12
   2ec30:	bdf0      	pop	{r4, r5, r6, r7, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2ec32:	1d07      	adds	r7, r0, #4
   2ec34:	f3bf 8f5b 	dmb	ish
   2ec38:	6843      	ldr	r3, [r0, #4]
   2ec3a:	f3bf 8f5b 	dmb	ish
	if (ediv == 0U && rand == 0U &&
   2ec3e:	f013 0f08 	tst.w	r3, #8
   2ec42:	d0cd      	beq.n	2ebe0 <bt_smp_request_ltk+0x24>
   2ec44:	f3bf 8f5b 	dmb	ish
   2ec48:	6843      	ldr	r3, [r0, #4]
   2ec4a:	f3bf 8f5b 	dmb	ish
   2ec4e:	f3c3 0640 	ubfx	r6, r3, #1, #1
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2ec52:	f013 0f02 	tst.w	r3, #2
   2ec56:	d0c3      	beq.n	2ebe0 <bt_smp_request_ltk+0x24>
		enc_size = get_encryption_key_size(smp);
   2ec58:	f7ff fb33 	bl	2e2c2 <get_encryption_key_size>
   2ec5c:	4604      	mov	r4, r0
   2ec5e:	4602      	mov	r2, r0
   2ec60:	f105 0147 	add.w	r1, r5, #71	; 0x47
   2ec64:	9809      	ldr	r0, [sp, #36]	; 0x24
   2ec66:	f002 f857 	bl	30d18 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   2ec6a:	2c0f      	cmp	r4, #15
   2ec6c:	d806      	bhi.n	2ec7c <bt_smp_request_ltk+0xc0>
__ssp_bos_icheck3(memset, void *, int)
   2ec6e:	f1c4 0210 	rsb	r2, r4, #16
   2ec72:	2100      	movs	r1, #0
   2ec74:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2ec76:	1918      	adds	r0, r3, r4
   2ec78:	f002 f86f 	bl	30d5a <memset>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2ec7c:	f3bf 8f5b 	dmb	ish
   2ec80:	e857 3f00 	ldrex	r3, [r7]
   2ec84:	f043 0302 	orr.w	r3, r3, #2
   2ec88:	e847 3200 	strex	r2, r3, [r7]
   2ec8c:	2a00      	cmp	r2, #0
   2ec8e:	d1f7      	bne.n	2ec80 <bt_smp_request_ltk+0xc4>
   2ec90:	f3bf 8f5b 	dmb	ish
		return true;
   2ec94:	e7ca      	b.n	2ec2c <bt_smp_request_ltk+0x70>
					     &conn->le.dst);
   2ec96:	f104 0690 	add.w	r6, r4, #144	; 0x90
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   2ec9a:	4632      	mov	r2, r6
   2ec9c:	7a21      	ldrb	r1, [r4, #8]
   2ec9e:	2020      	movs	r0, #32
   2eca0:	f7f0 ff40 	bl	1fb24 <bt_keys_find>
   2eca4:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
		if (!conn->le.keys) {
   2eca8:	2800      	cmp	r0, #0
   2ecaa:	d19d      	bne.n	2ebe8 <bt_smp_request_ltk+0x2c>
			conn->le.keys = bt_keys_find(BT_KEYS_PERIPH_LTK,
   2ecac:	4632      	mov	r2, r6
   2ecae:	7a21      	ldrb	r1, [r4, #8]
   2ecb0:	2001      	movs	r0, #1
   2ecb2:	f7f0 ff37 	bl	1fb24 <bt_keys_find>
   2ecb6:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
   2ecba:	e795      	b.n	2ebe8 <bt_smp_request_ltk+0x2c>
		enc_size = conn->le.keys->enc_size;
   2ecbc:	7b0c      	ldrb	r4, [r1, #12]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2ecbe:	4622      	mov	r2, r4
   2ecc0:	311a      	adds	r1, #26
   2ecc2:	9809      	ldr	r0, [sp, #36]	; 0x24
   2ecc4:	f002 f828 	bl	30d18 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   2ecc8:	2c0f      	cmp	r4, #15
   2ecca:	d806      	bhi.n	2ecda <bt_smp_request_ltk+0x11e>
__ssp_bos_icheck3(memset, void *, int)
   2eccc:	f1c4 0210 	rsb	r2, r4, #16
   2ecd0:	2100      	movs	r1, #0
   2ecd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2ecd4:	1918      	adds	r0, r3, r4
   2ecd6:	f002 f840 	bl	30d5a <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   2ecda:	3504      	adds	r5, #4
   2ecdc:	f3bf 8f5b 	dmb	ish
   2ece0:	e855 3f00 	ldrex	r3, [r5]
   2ece4:	f043 0302 	orr.w	r3, r3, #2
   2ece8:	e845 3200 	strex	r2, r3, [r5]
   2ecec:	2a00      	cmp	r2, #0
   2ecee:	d1f7      	bne.n	2ece0 <bt_smp_request_ltk+0x124>
   2ecf0:	f3bf 8f5b 	dmb	ish
		return true;
   2ecf4:	2601      	movs	r6, #1
   2ecf6:	e799      	b.n	2ec2c <bt_smp_request_ltk+0x70>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   2ecf8:	2208      	movs	r2, #8
   2ecfa:	4669      	mov	r1, sp
   2ecfc:	3040      	adds	r0, #64	; 0x40
   2ecfe:	f001 fffb 	bl	30cf8 <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   2ed02:	2800      	cmp	r0, #0
   2ed04:	d185      	bne.n	2ec12 <bt_smp_request_ltk+0x56>
	    !memcmp(conn->le.keys->periph_ltk.ediv, &ediv, 2)) {
   2ed06:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   2ed0a:	2202      	movs	r2, #2
   2ed0c:	a908      	add	r1, sp, #32
   2ed0e:	3048      	adds	r0, #72	; 0x48
   2ed10:	f001 fff2 	bl	30cf8 <memcmp>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   2ed14:	2800      	cmp	r0, #0
   2ed16:	f47f af7c 	bne.w	2ec12 <bt_smp_request_ltk+0x56>
		enc_size = conn->le.keys->enc_size;
   2ed1a:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
   2ed1e:	7b0c      	ldrb	r4, [r1, #12]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2ed20:	4622      	mov	r2, r4
   2ed22:	314a      	adds	r1, #74	; 0x4a
   2ed24:	9809      	ldr	r0, [sp, #36]	; 0x24
   2ed26:	f001 fff7 	bl	30d18 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   2ed2a:	2c0f      	cmp	r4, #15
   2ed2c:	d806      	bhi.n	2ed3c <bt_smp_request_ltk+0x180>
__ssp_bos_icheck3(memset, void *, int)
   2ed2e:	f1c4 0210 	rsb	r2, r4, #16
   2ed32:	2100      	movs	r1, #0
   2ed34:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2ed36:	1918      	adds	r0, r3, r4
   2ed38:	f002 f80f 	bl	30d5a <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   2ed3c:	3504      	adds	r5, #4
   2ed3e:	f3bf 8f5b 	dmb	ish
   2ed42:	e855 3f00 	ldrex	r3, [r5]
   2ed46:	f043 0302 	orr.w	r3, r3, #2
   2ed4a:	e845 3200 	strex	r2, r3, [r5]
   2ed4e:	2a00      	cmp	r2, #0
   2ed50:	d1f7      	bne.n	2ed42 <bt_smp_request_ltk+0x186>
   2ed52:	f3bf 8f5b 	dmb	ish
		return true;
   2ed56:	2601      	movs	r6, #1
   2ed58:	e768      	b.n	2ec2c <bt_smp_request_ltk+0x70>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   2ed5a:	2202      	movs	r2, #2
   2ed5c:	2106      	movs	r1, #6
   2ed5e:	4620      	mov	r0, r4
   2ed60:	f7eb f98c 	bl	1a07c <bt_conn_security_changed>
   2ed64:	e75e      	b.n	2ec24 <bt_smp_request_ltk+0x68>
		return false;
   2ed66:	2600      	movs	r6, #0
   2ed68:	e760      	b.n	2ec2c <bt_smp_request_ltk+0x70>

0002ed6a <bt_smp_sign>:
}
   2ed6a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2ed6e:	4770      	bx	lr

0002ed70 <bt_smp_start_security>:
{
   2ed70:	b508      	push	{r3, lr}
	switch (conn->role) {
   2ed72:	78c3      	ldrb	r3, [r0, #3]
   2ed74:	2b01      	cmp	r3, #1
   2ed76:	d102      	bne.n	2ed7e <bt_smp_start_security+0xe>
		return smp_send_security_req(conn);
   2ed78:	f7ff fd30 	bl	2e7dc <smp_send_security_req>
}
   2ed7c:	bd08      	pop	{r3, pc}
		return -EINVAL;
   2ed7e:	f06f 0015 	mvn.w	r0, #21
   2ed82:	e7fb      	b.n	2ed7c <bt_smp_start_security+0xc>

0002ed84 <smp_error>:
{
   2ed84:	b570      	push	{r4, r5, r6, lr}
   2ed86:	b082      	sub	sp, #8
   2ed88:	4604      	mov	r4, r0
   2ed8a:	460d      	mov	r5, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2ed8c:	f3bf 8f5b 	dmb	ish
   2ed90:	6843      	ldr	r3, [r0, #4]
   2ed92:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2ed96:	f013 0f08 	tst.w	r3, #8
   2ed9a:	d107      	bne.n	2edac <smp_error+0x28>
   2ed9c:	f3bf 8f5b 	dmb	ish
   2eda0:	6843      	ldr	r3, [r0, #4]
   2eda2:	f3bf 8f5b 	dmb	ish
   2eda6:	f013 0f02 	tst.w	r3, #2
   2edaa:	d01a      	beq.n	2ede2 <smp_error+0x5e>
		smp_pairing_complete(smp, reason);
   2edac:	4629      	mov	r1, r5
   2edae:	4620      	mov	r0, r4
   2edb0:	f7f0 fabe 	bl	1f330 <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   2edb4:	2201      	movs	r2, #1
   2edb6:	2105      	movs	r1, #5
   2edb8:	4620      	mov	r0, r4
   2edba:	f7ff fbc4 	bl	2e546 <smp_create_pdu>
	if (!buf) {
   2edbe:	4606      	mov	r6, r0
   2edc0:	b1e8      	cbz	r0, 2edfe <smp_error+0x7a>
   2edc2:	2101      	movs	r1, #1
   2edc4:	3008      	adds	r0, #8
   2edc6:	f7f1 fbf5 	bl	205b4 <net_buf_simple_add>
	rsp->reason = reason;
   2edca:	7005      	strb	r5, [r0, #0]
   2edcc:	2300      	movs	r3, #0
   2edce:	9300      	str	r3, [sp, #0]
   2edd0:	4632      	mov	r2, r6
   2edd2:	2106      	movs	r1, #6
   2edd4:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   2edd8:	f7fd ff6c 	bl	2ccb4 <bt_l2cap_send_cb>
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
   2eddc:	b950      	cbnz	r0, 2edf4 <smp_error+0x70>
}
   2edde:	b002      	add	sp, #8
   2ede0:	bd70      	pop	{r4, r5, r6, pc}
   2ede2:	f3bf 8f5b 	dmb	ish
   2ede6:	6843      	ldr	r3, [r0, #4]
   2ede8:	f3bf 8f5b 	dmb	ish
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2edec:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   2edf0:	d0e0      	beq.n	2edb4 <smp_error+0x30>
   2edf2:	e7db      	b.n	2edac <smp_error+0x28>
		net_buf_unref(buf);
   2edf4:	4630      	mov	r0, r6
   2edf6:	f7f1 fac5 	bl	20384 <net_buf_unref>
	return 0;
   2edfa:	2000      	movs	r0, #0
   2edfc:	e7ef      	b.n	2edde <smp_error+0x5a>
		return -ENOBUFS;
   2edfe:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2ee02:	e7ec      	b.n	2edde <smp_error+0x5a>

0002ee04 <bt_smp_dhkey_ready>:
{
   2ee04:	b538      	push	{r3, r4, r5, lr}
   2ee06:	4604      	mov	r4, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   2ee08:	2008      	movs	r0, #8
   2ee0a:	f7ef f8c5 	bl	1df98 <smp_find>
	if (smp) {
   2ee0e:	b198      	cbz	r0, 2ee38 <bt_smp_dhkey_ready+0x34>
   2ee10:	4605      	mov	r5, r0
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   2ee12:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2ee14:	f3bf 8f5b 	dmb	ish
   2ee18:	e853 2f00 	ldrex	r2, [r3]
   2ee1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   2ee20:	e843 2100 	strex	r1, r2, [r3]
   2ee24:	2900      	cmp	r1, #0
   2ee26:	d1f7      	bne.n	2ee18 <bt_smp_dhkey_ready+0x14>
   2ee28:	f3bf 8f5b 	dmb	ish
		err = smp_dhkey_ready(smp, dhkey);
   2ee2c:	4621      	mov	r1, r4
   2ee2e:	4628      	mov	r0, r5
   2ee30:	f7ff fe5c 	bl	2eaec <smp_dhkey_ready>
		if (err) {
   2ee34:	4601      	mov	r1, r0
   2ee36:	b908      	cbnz	r0, 2ee3c <bt_smp_dhkey_ready+0x38>
{
   2ee38:	2500      	movs	r5, #0
   2ee3a:	e005      	b.n	2ee48 <bt_smp_dhkey_ready+0x44>
			smp_error(smp, err);
   2ee3c:	4628      	mov	r0, r5
   2ee3e:	f7ff ffa1 	bl	2ed84 <smp_error>
   2ee42:	e7f9      	b.n	2ee38 <bt_smp_dhkey_ready+0x34>
	} while (smp && err);
   2ee44:	b184      	cbz	r4, 2ee68 <bt_smp_dhkey_ready+0x64>
   2ee46:	b17d      	cbz	r5, 2ee68 <bt_smp_dhkey_ready+0x64>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   2ee48:	2007      	movs	r0, #7
   2ee4a:	f7ef f8a5 	bl	1df98 <smp_find>
		if (smp) {
   2ee4e:	4604      	mov	r4, r0
   2ee50:	2800      	cmp	r0, #0
   2ee52:	d0f7      	beq.n	2ee44 <bt_smp_dhkey_ready+0x40>
			err = smp_dhkey_generate(smp);
   2ee54:	f7ee fef2 	bl	1dc3c <smp_dhkey_generate>
   2ee58:	4605      	mov	r5, r0
			if (err) {
   2ee5a:	2800      	cmp	r0, #0
   2ee5c:	d0f2      	beq.n	2ee44 <bt_smp_dhkey_ready+0x40>
				smp_error(smp, err);
   2ee5e:	4601      	mov	r1, r0
   2ee60:	4620      	mov	r0, r4
   2ee62:	f7ff ff8f 	bl	2ed84 <smp_error>
   2ee66:	e7ed      	b.n	2ee44 <bt_smp_dhkey_ready+0x40>
}
   2ee68:	bd38      	pop	{r3, r4, r5, pc}

0002ee6a <bt_smp_encrypt_change>:
{
   2ee6a:	b570      	push	{r4, r5, r6, lr}
   2ee6c:	4605      	mov	r5, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   2ee6e:	f1a0 06ec 	sub.w	r6, r0, #236	; 0xec
	struct bt_conn *conn = chan->conn;
   2ee72:	4604      	mov	r4, r0
   2ee74:	f854 29e8 	ldr.w	r2, [r4], #-232
   2ee78:	f3bf 8f5b 	dmb	ish
   2ee7c:	e854 3f00 	ldrex	r3, [r4]
   2ee80:	f023 0002 	bic.w	r0, r3, #2
   2ee84:	e844 0c00 	strex	ip, r0, [r4]
   2ee88:	f1bc 0f00 	cmp.w	ip, #0
   2ee8c:	d1f6      	bne.n	2ee7c <bt_smp_encrypt_change+0x12>
   2ee8e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   2ee92:	f013 0f02 	tst.w	r3, #2
   2ee96:	d002      	beq.n	2ee9e <bt_smp_encrypt_change+0x34>
	if (hci_status) {
   2ee98:	b911      	cbnz	r1, 2eea0 <bt_smp_encrypt_change+0x36>
	if (!conn->encrypt) {
   2ee9a:	7ad3      	ldrb	r3, [r2, #11]
   2ee9c:	b9fb      	cbnz	r3, 2eede <bt_smp_encrypt_change+0x74>
}
   2ee9e:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2eea0:	f3bf 8f5b 	dmb	ish
   2eea4:	f855 3ce8 	ldr.w	r3, [r5, #-232]
   2eea8:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   2eeac:	f013 0f08 	tst.w	r3, #8
   2eeb0:	d0f5      	beq.n	2ee9e <bt_smp_encrypt_change+0x34>
			uint8_t smp_err = smp_err_get(
   2eeb2:	4608      	mov	r0, r1
   2eeb4:	f7fd f976 	bl	2c1a4 <bt_security_err_get>
   2eeb8:	f7ff f9ef 	bl	2e29a <smp_err_get>
   2eebc:	4601      	mov	r1, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2eebe:	f3bf 8f5b 	dmb	ish
   2eec2:	e854 3f00 	ldrex	r3, [r4]
   2eec6:	f043 0304 	orr.w	r3, r3, #4
   2eeca:	e844 3200 	strex	r2, r3, [r4]
   2eece:	2a00      	cmp	r2, #0
   2eed0:	d1f7      	bne.n	2eec2 <bt_smp_encrypt_change+0x58>
   2eed2:	f3bf 8f5b 	dmb	ish
			smp_pairing_complete(smp, smp_err);
   2eed6:	4630      	mov	r0, r6
   2eed8:	f7f0 fa2a 	bl	1f330 <smp_pairing_complete>
		return;
   2eedc:	e7df      	b.n	2ee9e <bt_smp_encrypt_change+0x34>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2eede:	f3bf 8f5b 	dmb	ish
   2eee2:	f855 3ce8 	ldr.w	r3, [r5, #-232]
   2eee6:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   2eeea:	f013 0f08 	tst.w	r3, #8
   2eeee:	d044      	beq.n	2ef7a <bt_smp_encrypt_change+0x110>
   2eef0:	f3bf 8f5b 	dmb	ish
   2eef4:	f855 3ce8 	ldr.w	r3, [r5, #-232]
   2eef8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   2eefc:	f013 0f20 	tst.w	r3, #32
   2ef00:	d021      	beq.n	2ef46 <bt_smp_encrypt_change+0xdc>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   2ef02:	f815 3c04 	ldrb.w	r3, [r5, #-4]
   2ef06:	f013 0f08 	tst.w	r3, #8
   2ef0a:	d010      	beq.n	2ef2e <bt_smp_encrypt_change+0xc4>
		    (smp->remote_dist & BT_SMP_DIST_LINK_KEY)) {
   2ef0c:	f815 3c03 	ldrb.w	r3, [r5, #-3]
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   2ef10:	f013 0f08 	tst.w	r3, #8
   2ef14:	d00b      	beq.n	2ef2e <bt_smp_encrypt_change+0xc4>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2ef16:	f3bf 8f5b 	dmb	ish
   2ef1a:	e854 3f00 	ldrex	r3, [r4]
   2ef1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2ef22:	e844 3200 	strex	r2, r3, [r4]
   2ef26:	2a00      	cmp	r2, #0
   2ef28:	d1f7      	bne.n	2ef1a <bt_smp_encrypt_change+0xb0>
   2ef2a:	f3bf 8f5b 	dmb	ish
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   2ef2e:	f815 3c04 	ldrb.w	r3, [r5, #-4]
   2ef32:	f023 0308 	bic.w	r3, r3, #8
   2ef36:	f805 3c04 	strb.w	r3, [r5, #-4]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
   2ef3a:	f815 3c03 	ldrb.w	r3, [r5, #-3]
   2ef3e:	f023 0308 	bic.w	r3, r3, #8
   2ef42:	f805 3c03 	strb.w	r3, [r5, #-3]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   2ef46:	f815 3c03 	ldrb.w	r3, [r5, #-3]
   2ef4a:	f013 0f01 	tst.w	r3, #1
   2ef4e:	d118      	bne.n	2ef82 <bt_smp_encrypt_change+0x118>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   2ef50:	f013 0f02 	tst.w	r3, #2
   2ef54:	d13f      	bne.n	2efd6 <bt_smp_encrypt_change+0x16c>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   2ef56:	f013 0f04 	tst.w	r3, #4
   2ef5a:	d020      	beq.n	2ef9e <bt_smp_encrypt_change+0x134>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   2ef5c:	f1a5 03ec 	sub.w	r3, r5, #236	; 0xec
   2ef60:	f3bf 8f5b 	dmb	ish
   2ef64:	e853 2f00 	ldrex	r2, [r3]
   2ef68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   2ef6c:	e843 2100 	strex	r1, r2, [r3]
   2ef70:	2900      	cmp	r1, #0
   2ef72:	d1f7      	bne.n	2ef64 <bt_smp_encrypt_change+0xfa>
   2ef74:	f3bf 8f5b 	dmb	ish
}
   2ef78:	e011      	b.n	2ef9e <bt_smp_encrypt_change+0x134>
		smp_reset(smp);
   2ef7a:	4630      	mov	r0, r6
   2ef7c:	f7ff fa01 	bl	2e382 <smp_reset>
		return;
   2ef80:	e78d      	b.n	2ee9e <bt_smp_encrypt_change+0x34>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   2ef82:	f1a5 03ec 	sub.w	r3, r5, #236	; 0xec
   2ef86:	f3bf 8f5b 	dmb	ish
   2ef8a:	e853 2f00 	ldrex	r2, [r3]
   2ef8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   2ef92:	e843 2100 	strex	r1, r2, [r3]
   2ef96:	2900      	cmp	r1, #0
   2ef98:	d1f7      	bne.n	2ef8a <bt_smp_encrypt_change+0x120>
   2ef9a:	f3bf 8f5b 	dmb	ish
   2ef9e:	f3bf 8f5b 	dmb	ish
   2efa2:	e854 3f00 	ldrex	r3, [r4]
   2efa6:	f043 0304 	orr.w	r3, r3, #4
   2efaa:	e844 3200 	strex	r2, r3, [r4]
   2efae:	2a00      	cmp	r2, #0
   2efb0:	d1f7      	bne.n	2efa2 <bt_smp_encrypt_change+0x138>
   2efb2:	f3bf 8f5b 	dmb	ish
	if (bt_smp_distribute_keys(smp)) {
   2efb6:	4630      	mov	r0, r6
   2efb8:	f7f0 f89c 	bl	1f0f4 <bt_smp_distribute_keys>
   2efbc:	2800      	cmp	r0, #0
   2efbe:	f47f af6e 	bne.w	2ee9e <bt_smp_encrypt_change+0x34>
	if (!smp->local_dist && !smp->remote_dist) {
   2efc2:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   2efc6:	2b00      	cmp	r3, #0
   2efc8:	f47f af69 	bne.w	2ee9e <bt_smp_encrypt_change+0x34>
		smp_pairing_complete(smp, 0);
   2efcc:	2100      	movs	r1, #0
   2efce:	4630      	mov	r0, r6
   2efd0:	f7f0 f9ae 	bl	1f330 <smp_pairing_complete>
   2efd4:	e763      	b.n	2ee9e <bt_smp_encrypt_change+0x34>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   2efd6:	f1a5 03ec 	sub.w	r3, r5, #236	; 0xec
   2efda:	f3bf 8f5b 	dmb	ish
   2efde:	e853 2f00 	ldrex	r2, [r3]
   2efe2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   2efe6:	e843 2100 	strex	r1, r2, [r3]
   2efea:	2900      	cmp	r1, #0
   2efec:	d1f7      	bne.n	2efde <bt_smp_encrypt_change+0x174>
   2efee:	f3bf 8f5b 	dmb	ish
   2eff2:	e7d4      	b.n	2ef9e <bt_smp_encrypt_change+0x134>

0002eff4 <smp_ident_sent>:
	if (!err) {
   2eff4:	b102      	cbz	r2, 2eff8 <smp_ident_sent+0x4>
   2eff6:	4770      	bx	lr
{
   2eff8:	b508      	push	{r3, lr}
		smp_check_complete(conn, BT_SMP_DIST_ENC_KEY);
   2effa:	2101      	movs	r1, #1
   2effc:	f7f0 fc3a 	bl	1f874 <smp_check_complete>
}
   2f000:	bd08      	pop	{r3, pc}

0002f002 <bt_smp_disconnected>:
{
   2f002:	b570      	push	{r4, r5, r6, lr}
   2f004:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   2f006:	f1a0 06ec 	sub.w	r6, r0, #236	; 0xec
	struct bt_keys *keys = chan->conn->le.keys;
   2f00a:	f850 3b94 	ldr.w	r3, [r0], #148
   2f00e:	f8d3 50bc 	ldr.w	r5, [r3, #188]	; 0xbc
	(void)k_work_cancel_delayable(&smp->work);
   2f012:	f7f8 f8ff 	bl	27214 <k_work_cancel_delayable>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2f016:	f3bf 8f5b 	dmb	ish
   2f01a:	f854 3ce8 	ldr.w	r3, [r4, #-232]
   2f01e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2f022:	f013 0f08 	tst.w	r3, #8
   2f026:	d108      	bne.n	2f03a <bt_smp_disconnected+0x38>
   2f028:	f3bf 8f5b 	dmb	ish
   2f02c:	f854 3ce8 	ldr.w	r3, [r4, #-232]
   2f030:	f3bf 8f5b 	dmb	ish
   2f034:	f013 0f02 	tst.w	r3, #2
   2f038:	d014      	beq.n	2f064 <bt_smp_disconnected+0x62>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   2f03a:	2108      	movs	r1, #8
   2f03c:	4630      	mov	r0, r6
   2f03e:	f7f0 f977 	bl	1f330 <smp_pairing_complete>
	if (keys) {
   2f042:	b145      	cbz	r5, 2f056 <bt_smp_disconnected+0x54>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   2f044:	89eb      	ldrh	r3, [r5, #14]
   2f046:	b11b      	cbz	r3, 2f050 <bt_smp_disconnected+0x4e>
		    (keys->flags & BT_KEYS_DEBUG))) {
   2f048:	7b6b      	ldrb	r3, [r5, #13]
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   2f04a:	f013 0f02 	tst.w	r3, #2
   2f04e:	d002      	beq.n	2f056 <bt_smp_disconnected+0x54>
			bt_keys_clear(keys);
   2f050:	4628      	mov	r0, r5
   2f052:	f7f0 fe19 	bl	1fc88 <bt_keys_clear>
   2f056:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
   2f05a:	2100      	movs	r1, #0
   2f05c:	4630      	mov	r0, r6
   2f05e:	f001 fe7c 	bl	30d5a <memset>
}
   2f062:	bd70      	pop	{r4, r5, r6, pc}
   2f064:	f3bf 8f5b 	dmb	ish
   2f068:	f854 3ce8 	ldr.w	r3, [r4, #-232]
   2f06c:	f3bf 8f5b 	dmb	ish
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2f070:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   2f074:	d0e5      	beq.n	2f042 <bt_smp_disconnected+0x40>
   2f076:	e7e0      	b.n	2f03a <bt_smp_disconnected+0x38>

0002f078 <id_add>:
{
   2f078:	b508      	push	{r3, lr}
	bt_id_add(keys);
   2f07a:	f7e9 fb91 	bl	187a0 <bt_id_add>
}
   2f07e:	bd08      	pop	{r3, pc}

0002f080 <bt_keys_add_type>:
	keys->keys |= type;
   2f080:	89c3      	ldrh	r3, [r0, #14]
   2f082:	4319      	orrs	r1, r3
   2f084:	81c1      	strh	r1, [r0, #14]
}
   2f086:	4770      	bx	lr

0002f088 <bt_keys_get_type>:
{
   2f088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2f08a:	4606      	mov	r6, r0
   2f08c:	460c      	mov	r4, r1
   2f08e:	4615      	mov	r5, r2
	keys = bt_keys_find(type, id, addr);
   2f090:	f7f0 fd48 	bl	1fb24 <bt_keys_find>
	if (keys) {
   2f094:	4607      	mov	r7, r0
   2f096:	b108      	cbz	r0, 2f09c <bt_keys_get_type+0x14>
}
   2f098:	4638      	mov	r0, r7
   2f09a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	keys = bt_keys_get_addr(id, addr);
   2f09c:	4629      	mov	r1, r5
   2f09e:	4620      	mov	r0, r4
   2f0a0:	f7f0 fcd4 	bl	1fa4c <bt_keys_get_addr>
	if (!keys) {
   2f0a4:	4607      	mov	r7, r0
   2f0a6:	2800      	cmp	r0, #0
   2f0a8:	d0f6      	beq.n	2f098 <bt_keys_get_type+0x10>
	bt_keys_add_type(keys, type);
   2f0aa:	4631      	mov	r1, r6
   2f0ac:	f7ff ffe8 	bl	2f080 <bt_keys_add_type>
	return keys;
   2f0b0:	e7f2      	b.n	2f098 <bt_keys_get_type+0x10>

0002f0b2 <fixed_data_unref>:
}
   2f0b2:	4770      	bx	lr

0002f0b4 <data_alloc>:
{
   2f0b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2f0b8:	4604      	mov	r4, r0
   2f0ba:	460d      	mov	r5, r1
   2f0bc:	4617      	mov	r7, r2
   2f0be:	461e      	mov	r6, r3
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   2f0c0:	7980      	ldrb	r0, [r0, #6]
   2f0c2:	f7f0 fed5 	bl	1fe70 <net_buf_pool_get>
	return pool->alloc->cb->alloc(buf, size, timeout);
   2f0c6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2f0c8:	681b      	ldr	r3, [r3, #0]
   2f0ca:	f8d3 8000 	ldr.w	r8, [r3]
   2f0ce:	463a      	mov	r2, r7
   2f0d0:	4633      	mov	r3, r6
   2f0d2:	4629      	mov	r1, r5
   2f0d4:	4620      	mov	r0, r4
   2f0d6:	47c0      	blx	r8
}
   2f0d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002f0dc <data_unref>:
{
   2f0dc:	b538      	push	{r3, r4, r5, lr}
   2f0de:	4604      	mov	r4, r0
   2f0e0:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   2f0e2:	7980      	ldrb	r0, [r0, #6]
   2f0e4:	f7f0 fec4 	bl	1fe70 <net_buf_pool_get>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   2f0e8:	7963      	ldrb	r3, [r4, #5]
   2f0ea:	f013 0f02 	tst.w	r3, #2
   2f0ee:	d105      	bne.n	2f0fc <data_unref+0x20>
	pool->alloc->cb->unref(buf, data);
   2f0f0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2f0f2:	681b      	ldr	r3, [r3, #0]
   2f0f4:	689b      	ldr	r3, [r3, #8]
   2f0f6:	4629      	mov	r1, r5
   2f0f8:	4620      	mov	r0, r4
   2f0fa:	4798      	blx	r3
}
   2f0fc:	bd38      	pop	{r3, r4, r5, pc}

0002f0fe <net_buf_id>:
{
   2f0fe:	b510      	push	{r4, lr}
   2f100:	4604      	mov	r4, r0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   2f102:	7980      	ldrb	r0, [r0, #6]
   2f104:	f7f0 feb4 	bl	1fe70 <net_buf_pool_get>
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   2f108:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   2f10c:	3317      	adds	r3, #23
   2f10e:	f023 0303 	bic.w	r3, r3, #3
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   2f112:	6b00      	ldr	r0, [r0, #48]	; 0x30
   2f114:	1a20      	subs	r0, r4, r0
}
   2f116:	fbb0 f0f3 	udiv	r0, r0, r3
   2f11a:	bd10      	pop	{r4, pc}

0002f11c <fixed_data_alloc>:
{
   2f11c:	b570      	push	{r4, r5, r6, lr}
   2f11e:	4604      	mov	r4, r0
   2f120:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   2f122:	7980      	ldrb	r0, [r0, #6]
   2f124:	f7f0 fea4 	bl	1fe70 <net_buf_pool_get>
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2f128:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2f12a:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   2f12c:	682a      	ldr	r2, [r5, #0]
   2f12e:	6819      	ldr	r1, [r3, #0]
   2f130:	428a      	cmp	r2, r1
   2f132:	bf28      	it	cs
   2f134:	460a      	movcs	r2, r1
   2f136:	602a      	str	r2, [r5, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   2f138:	685d      	ldr	r5, [r3, #4]
   2f13a:	681e      	ldr	r6, [r3, #0]
   2f13c:	4620      	mov	r0, r4
   2f13e:	f7ff ffde 	bl	2f0fe <net_buf_id>
}
   2f142:	fb00 5006 	mla	r0, r0, r6, r5
   2f146:	bd70      	pop	{r4, r5, r6, pc}

0002f148 <net_buf_alloc_fixed>:
{
   2f148:	b508      	push	{r3, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2f14a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   2f14c:	6849      	ldr	r1, [r1, #4]
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   2f14e:	6809      	ldr	r1, [r1, #0]
   2f150:	f7f0 feba 	bl	1fec8 <net_buf_alloc_len>
}
   2f154:	bd08      	pop	{r3, pc}

0002f156 <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   2f156:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   2f158:	6803      	ldr	r3, [r0, #0]
   2f15a:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2f15c:	2102      	movs	r1, #2
   2f15e:	f7f1 f9cb 	bl	204f8 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   2f162:	4620      	mov	r0, r4
   2f164:	bd10      	pop	{r4, pc}

0002f166 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   2f166:	6802      	ldr	r2, [r0, #0]
   2f168:	6880      	ldr	r0, [r0, #8]
}
   2f16a:	1a10      	subs	r0, r2, r0
   2f16c:	4770      	bx	lr

0002f16e <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
   2f16e:	b538      	push	{r3, r4, r5, lr}
   2f170:	4604      	mov	r4, r0
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2f172:	88c5      	ldrh	r5, [r0, #6]
   2f174:	f7ff fff7 	bl	2f166 <net_buf_simple_headroom>
   2f178:	1a2d      	subs	r5, r5, r0
   2f17a:	88a0      	ldrh	r0, [r4, #4]
}
   2f17c:	1a28      	subs	r0, r5, r0
   2f17e:	bd38      	pop	{r3, r4, r5, pc}

0002f180 <net_buf_simple_add_mem>:
{
   2f180:	b538      	push	{r3, r4, r5, lr}
   2f182:	460d      	mov	r5, r1
   2f184:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2f186:	4611      	mov	r1, r2
   2f188:	f7f1 fa14 	bl	205b4 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2f18c:	4622      	mov	r2, r4
   2f18e:	4629      	mov	r1, r5
   2f190:	f001 fdc2 	bl	30d18 <memcpy>
}
   2f194:	bd38      	pop	{r3, r4, r5, pc}

0002f196 <net_buf_simple_add_u8>:
{
   2f196:	b510      	push	{r4, lr}
   2f198:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
   2f19a:	2101      	movs	r1, #1
   2f19c:	f7f1 fa0a 	bl	205b4 <net_buf_simple_add>
	*u8 = val;
   2f1a0:	7004      	strb	r4, [r0, #0]
}
   2f1a2:	bd10      	pop	{r4, pc}

0002f1a4 <adc_context_on_timer_expired>:
{
   2f1a4:	b508      	push	{r3, lr}
	struct adc_context *ctx =
   2f1a6:	3808      	subs	r0, #8
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   2f1a8:	f3bf 8f5b 	dmb	ish
   2f1ac:	e850 3f00 	ldrex	r3, [r0]
   2f1b0:	1c5a      	adds	r2, r3, #1
   2f1b2:	e840 2100 	strex	r1, r2, [r0]
   2f1b6:	2900      	cmp	r1, #0
   2f1b8:	d1f8      	bne.n	2f1ac <adc_context_on_timer_expired+0x8>
   2f1ba:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
   2f1be:	b11b      	cbz	r3, 2f1c8 <adc_context_on_timer_expired+0x24>
		ctx->status = -EBUSY;
   2f1c0:	f06f 030f 	mvn.w	r3, #15
   2f1c4:	6703      	str	r3, [r0, #112]	; 0x70
}
   2f1c6:	bd08      	pop	{r3, pc}
		adc_context_start_sampling(ctx);
   2f1c8:	f7f1 fa24 	bl	20614 <adc_context_start_sampling>
   2f1cc:	e7fb      	b.n	2f1c6 <adc_context_on_timer_expired+0x22>

0002f1ce <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
   2f1ce:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   2f1d0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   2f1d4:	0089      	lsls	r1, r1, #2
   2f1d6:	3140      	adds	r1, #64	; 0x40
}
   2f1d8:	4408      	add	r0, r1
   2f1da:	4770      	bx	lr

0002f1dc <get_sub_config>:
	const struct nrf_clock_control_config *config =
   2f1dc:	6840      	ldr	r0, [r0, #4]
	return &config->subsys[type];
   2f1de:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
   2f1e2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   2f1e6:	4770      	bx	lr

0002f1e8 <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
   2f1e8:	6900      	ldr	r0, [r0, #16]
}
   2f1ea:	eb00 1041 	add.w	r0, r0, r1, lsl #5
   2f1ee:	4770      	bx	lr

0002f1f0 <set_off_state>:
   2f1f0:	f04f 0340 	mov.w	r3, #64	; 0x40
   2f1f4:	f3ef 8211 	mrs	r2, BASEPRI
   2f1f8:	f383 8812 	msr	BASEPRI_MAX, r3
   2f1fc:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2f200:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   2f202:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   2f206:	d001      	beq.n	2f20c <set_off_state+0x1c>
   2f208:	428b      	cmp	r3, r1
   2f20a:	d107      	bne.n	2f21c <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   2f20c:	2301      	movs	r3, #1
   2f20e:	6003      	str	r3, [r0, #0]
	int err = 0;
   2f210:	2000      	movs	r0, #0
	__asm__ volatile(
   2f212:	f382 8811 	msr	BASEPRI, r2
   2f216:	f3bf 8f6f 	isb	sy
}
   2f21a:	4770      	bx	lr
		err = -EPERM;
   2f21c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2f220:	e7f7      	b.n	2f212 <set_off_state+0x22>

0002f222 <set_starting_state>:
	__asm__ volatile(
   2f222:	f04f 0340 	mov.w	r3, #64	; 0x40
   2f226:	f3ef 8211 	mrs	r2, BASEPRI
   2f22a:	f383 8812 	msr	BASEPRI_MAX, r3
   2f22e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2f232:	6803      	ldr	r3, [r0, #0]
   2f234:	f003 0cc0 	and.w	ip, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   2f238:	f003 0307 	and.w	r3, r3, #7
   2f23c:	2b01      	cmp	r3, #1
   2f23e:	d008      	beq.n	2f252 <set_starting_state+0x30>
	} else if (current_ctx != ctx) {
   2f240:	458c      	cmp	ip, r1
   2f242:	d009      	beq.n	2f258 <set_starting_state+0x36>
		err = -EPERM;
   2f244:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	__asm__ volatile(
   2f248:	f382 8811 	msr	BASEPRI, r2
   2f24c:	f3bf 8f6f 	isb	sy
}
   2f250:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   2f252:	6001      	str	r1, [r0, #0]
	int err = 0;
   2f254:	2000      	movs	r0, #0
   2f256:	e7f7      	b.n	2f248 <set_starting_state+0x26>
		err = -EALREADY;
   2f258:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2f25c:	e7f4      	b.n	2f248 <set_starting_state+0x26>

0002f25e <set_on_state>:
	__asm__ volatile(
   2f25e:	f04f 0340 	mov.w	r3, #64	; 0x40
   2f262:	f3ef 8211 	mrs	r2, BASEPRI
   2f266:	f383 8812 	msr	BASEPRI_MAX, r3
   2f26a:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   2f26e:	6803      	ldr	r3, [r0, #0]
   2f270:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2f274:	f043 0302 	orr.w	r3, r3, #2
   2f278:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   2f27a:	f382 8811 	msr	BASEPRI, r2
   2f27e:	f3bf 8f6f 	isb	sy
}
   2f282:	4770      	bx	lr

0002f284 <clkstarted_handle>:
{
   2f284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2f286:	4606      	mov	r6, r0
   2f288:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   2f28a:	f7ff ffa0 	bl	2f1ce <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
   2f28e:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
   2f290:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
   2f292:	2300      	movs	r3, #0
   2f294:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
   2f298:	f7ff ffe1 	bl	2f25e <set_on_state>
	if (callback) {
   2f29c:	b11d      	cbz	r5, 2f2a6 <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
   2f29e:	463a      	mov	r2, r7
   2f2a0:	4621      	mov	r1, r4
   2f2a2:	4630      	mov	r0, r6
   2f2a4:	47a8      	blx	r5
}
   2f2a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002f2a8 <async_start>:
{
   2f2a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2f2ac:	4606      	mov	r6, r0
   2f2ae:	4690      	mov	r8, r2
   2f2b0:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   2f2b2:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   2f2b4:	4629      	mov	r1, r5
   2f2b6:	f7ff ff8a 	bl	2f1ce <get_sub_data>
   2f2ba:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
   2f2bc:	9906      	ldr	r1, [sp, #24]
   2f2be:	3008      	adds	r0, #8
   2f2c0:	f7ff ffaf 	bl	2f222 <set_starting_state>
	if (err < 0) {
   2f2c4:	2800      	cmp	r0, #0
   2f2c6:	db09      	blt.n	2f2dc <async_start+0x34>
	subdata->cb = cb;
   2f2c8:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
   2f2cc:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
   2f2ce:	4629      	mov	r1, r5
   2f2d0:	4630      	mov	r0, r6
   2f2d2:	f7ff ff83 	bl	2f1dc <get_sub_config>
   2f2d6:	6803      	ldr	r3, [r0, #0]
   2f2d8:	4798      	blx	r3
	return 0;
   2f2da:	2000      	movs	r0, #0
}
   2f2dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002f2e0 <api_start>:
{
   2f2e0:	b510      	push	{r4, lr}
   2f2e2:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
   2f2e4:	2480      	movs	r4, #128	; 0x80
   2f2e6:	9400      	str	r4, [sp, #0]
   2f2e8:	f7ff ffde 	bl	2f2a8 <async_start>
}
   2f2ec:	b002      	add	sp, #8
   2f2ee:	bd10      	pop	{r4, pc}

0002f2f0 <onoff_started_callback>:
{
   2f2f0:	b510      	push	{r4, lr}
   2f2f2:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
   2f2f4:	b2c9      	uxtb	r1, r1
   2f2f6:	f7ff ff77 	bl	2f1e8 <get_onoff_manager>
	notify(mgr, 0);
   2f2fa:	2100      	movs	r1, #0
   2f2fc:	47a0      	blx	r4
}
   2f2fe:	bd10      	pop	{r4, pc}

0002f300 <hfclk_start>:
{
   2f300:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   2f302:	2001      	movs	r0, #1
   2f304:	f7f4 f9dc 	bl	236c0 <nrfx_clock_start>
}
   2f308:	bd08      	pop	{r3, pc}

0002f30a <hfclk_stop>:
{
   2f30a:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   2f30c:	2001      	movs	r0, #1
   2f30e:	f7f4 f9f7 	bl	23700 <nrfx_clock_stop>
}
   2f312:	bd08      	pop	{r3, pc}

0002f314 <lfclk_stop>:
{
   2f314:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   2f316:	2000      	movs	r0, #0
   2f318:	f7f4 f9f2 	bl	23700 <nrfx_clock_stop>
}
   2f31c:	bd08      	pop	{r3, pc}

0002f31e <api_stop>:
{
   2f31e:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
   2f320:	2280      	movs	r2, #128	; 0x80
   2f322:	f7f1 fcd9 	bl	20cd8 <stop>
}
   2f326:	bd08      	pop	{r3, pc}

0002f328 <blocking_start_callback>:
{
   2f328:	b508      	push	{r3, lr}
   2f32a:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   2f32c:	f7f7 f9fe 	bl	2672c <z_impl_k_sem_give>
}
   2f330:	bd08      	pop	{r3, pc}

0002f332 <get_drive>:
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   2f332:	f020 00f9 	bic.w	r0, r0, #249	; 0xf9
   2f336:	0580      	lsls	r0, r0, #22
   2f338:	0d80      	lsrs	r0, r0, #22
   2f33a:	f5b0 7f83 	cmp.w	r0, #262	; 0x106
   2f33e:	d033      	beq.n	2f3a8 <get_drive+0x76>
   2f340:	d816      	bhi.n	2f370 <get_drive+0x3e>
   2f342:	2806      	cmp	r0, #6
   2f344:	d02c      	beq.n	2f3a0 <get_drive+0x6e>
   2f346:	d906      	bls.n	2f356 <get_drive+0x24>
   2f348:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   2f34c:	d10d      	bne.n	2f36a <get_drive+0x38>
		*drive = NRF_GPIO_PIN_H0S1;
   2f34e:	2301      	movs	r3, #1
   2f350:	700b      	strb	r3, [r1, #0]
	return 0;
   2f352:	2000      	movs	r0, #0
		break;
   2f354:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   2f356:	b300      	cbz	r0, 2f39a <get_drive+0x68>
   2f358:	2802      	cmp	r0, #2
   2f35a:	d103      	bne.n	2f364 <get_drive+0x32>
		*drive = NRF_GPIO_PIN_D0S1;
   2f35c:	2304      	movs	r3, #4
   2f35e:	700b      	strb	r3, [r1, #0]
	return 0;
   2f360:	2000      	movs	r0, #0
		break;
   2f362:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   2f364:	f06f 0015 	mvn.w	r0, #21
   2f368:	4770      	bx	lr
   2f36a:	f06f 0015 	mvn.w	r0, #21
   2f36e:	4770      	bx	lr
   2f370:	f240 2302 	movw	r3, #514	; 0x202
   2f374:	4298      	cmp	r0, r3
   2f376:	d01b      	beq.n	2f3b0 <get_drive+0x7e>
   2f378:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
   2f37c:	d103      	bne.n	2f386 <get_drive+0x54>
		*drive = NRF_GPIO_PIN_H0H1;
   2f37e:	2303      	movs	r3, #3
   2f380:	700b      	strb	r3, [r1, #0]
	return 0;
   2f382:	2000      	movs	r0, #0
		break;
   2f384:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   2f386:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   2f38a:	d103      	bne.n	2f394 <get_drive+0x62>
		*drive = NRF_GPIO_PIN_S0H1;
   2f38c:	2302      	movs	r3, #2
   2f38e:	700b      	strb	r3, [r1, #0]
	return 0;
   2f390:	2000      	movs	r0, #0
		break;
   2f392:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   2f394:	f06f 0015 	mvn.w	r0, #21
   2f398:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
   2f39a:	2000      	movs	r0, #0
   2f39c:	7008      	strb	r0, [r1, #0]
		break;
   2f39e:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
   2f3a0:	2306      	movs	r3, #6
   2f3a2:	700b      	strb	r3, [r1, #0]
	return 0;
   2f3a4:	2000      	movs	r0, #0
		break;
   2f3a6:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
   2f3a8:	2307      	movs	r3, #7
   2f3aa:	700b      	strb	r3, [r1, #0]
	return 0;
   2f3ac:	2000      	movs	r0, #0
		break;
   2f3ae:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_D0H1;
   2f3b0:	2305      	movs	r3, #5
   2f3b2:	700b      	strb	r3, [r1, #0]
	return 0;
   2f3b4:	2000      	movs	r0, #0
}
   2f3b6:	4770      	bx	lr

0002f3b8 <get_pull>:
	if (flags & GPIO_PULL_UP) {
   2f3b8:	f010 0f10 	tst.w	r0, #16
   2f3bc:	d104      	bne.n	2f3c8 <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
   2f3be:	f010 0f20 	tst.w	r0, #32
   2f3c2:	d103      	bne.n	2f3cc <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
   2f3c4:	2000      	movs	r0, #0
   2f3c6:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
   2f3c8:	2003      	movs	r0, #3
   2f3ca:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
   2f3cc:	2001      	movs	r0, #1
}
   2f3ce:	4770      	bx	lr

0002f3d0 <gpio_nrfx_port_get_raw>:
	return port->config;
   2f3d0:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2f3d2:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   2f3d4:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   2f3d8:	600b      	str	r3, [r1, #0]
}
   2f3da:	2000      	movs	r0, #0
   2f3dc:	4770      	bx	lr

0002f3de <gpio_nrfx_port_set_masked_raw>:
	return port->config;
   2f3de:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2f3e0:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   2f3e2:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   2f3e6:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   2f3ea:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   2f3ee:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   2f3f2:	2000      	movs	r0, #0
   2f3f4:	4770      	bx	lr

0002f3f6 <gpio_nrfx_port_set_bits_raw>:
	return port->config;
   2f3f6:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2f3f8:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   2f3fa:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
   2f3fe:	2000      	movs	r0, #0
   2f400:	4770      	bx	lr

0002f402 <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
   2f402:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2f404:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   2f406:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   2f40a:	2000      	movs	r0, #0
   2f40c:	4770      	bx	lr

0002f40e <gpio_nrfx_port_toggle_bits>:
	return port->config;
   2f40e:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2f410:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   2f412:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
   2f416:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   2f41a:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   2f41c:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   2f420:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   2f424:	2000      	movs	r0, #0
   2f426:	4770      	bx	lr

0002f428 <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
   2f428:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
   2f42c:	d007      	beq.n	2f43e <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   2f42e:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
   2f432:	d00d      	beq.n	2f450 <get_trigger+0x28>
   2f434:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
   2f438:	d008      	beq.n	2f44c <get_trigger+0x24>
   2f43a:	2001      	movs	r0, #1
}
   2f43c:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   2f43e:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
   2f442:	d001      	beq.n	2f448 <get_trigger+0x20>
   2f444:	2005      	movs	r0, #5
   2f446:	4770      	bx	lr
   2f448:	2004      	movs	r0, #4
   2f44a:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   2f44c:	2002      	movs	r0, #2
   2f44e:	4770      	bx	lr
   2f450:	2003      	movs	r0, #3
   2f452:	4770      	bx	lr

0002f454 <twi_0_init>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twi_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWI
I2C_NRFX_TWI_DEVICE(0);
   2f454:	b530      	push	{r4, r5, lr}
   2f456:	b083      	sub	sp, #12
   2f458:	4604      	mov	r4, r0
   2f45a:	2200      	movs	r2, #0
   2f45c:	2101      	movs	r1, #1
   2f45e:	2003      	movs	r0, #3
   2f460:	f7e6 faca 	bl	159f8 <z_arm_irq_priority_set>
   2f464:	6863      	ldr	r3, [r4, #4]
   2f466:	699d      	ldr	r5, [r3, #24]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   2f468:	aa01      	add	r2, sp, #4
   2f46a:	2100      	movs	r1, #0
   2f46c:	4628      	mov	r0, r5
   2f46e:	f000 fb22 	bl	2fab6 <pinctrl_lookup_state>
	if (ret < 0) {
   2f472:	2800      	cmp	r0, #0
   2f474:	db05      	blt.n	2f482 <twi_0_init+0x2e>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   2f476:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   2f478:	682a      	ldr	r2, [r5, #0]
   2f47a:	7919      	ldrb	r1, [r3, #4]
   2f47c:	6818      	ldr	r0, [r3, #0]
   2f47e:	f7f2 ff83 	bl	22388 <pinctrl_configure_pins>
   2f482:	2800      	cmp	r0, #0
   2f484:	db02      	blt.n	2f48c <twi_0_init+0x38>
   2f486:	4620      	mov	r0, r4
   2f488:	f7f2 f902 	bl	21690 <init_twi>
   2f48c:	b003      	add	sp, #12
   2f48e:	bd30      	pop	{r4, r5, pc}

0002f490 <twi_1_init>:
#endif

#ifdef CONFIG_I2C_1_NRF_TWI
I2C_NRFX_TWI_DEVICE(1);
   2f490:	b530      	push	{r4, r5, lr}
   2f492:	b083      	sub	sp, #12
   2f494:	4604      	mov	r4, r0
   2f496:	2200      	movs	r2, #0
   2f498:	2101      	movs	r1, #1
   2f49a:	2004      	movs	r0, #4
   2f49c:	f7e6 faac 	bl	159f8 <z_arm_irq_priority_set>
   2f4a0:	6863      	ldr	r3, [r4, #4]
   2f4a2:	699d      	ldr	r5, [r3, #24]
	ret = pinctrl_lookup_state(config, id, &state);
   2f4a4:	aa01      	add	r2, sp, #4
   2f4a6:	2100      	movs	r1, #0
   2f4a8:	4628      	mov	r0, r5
   2f4aa:	f000 fb04 	bl	2fab6 <pinctrl_lookup_state>
	if (ret < 0) {
   2f4ae:	2800      	cmp	r0, #0
   2f4b0:	db05      	blt.n	2f4be <twi_1_init+0x2e>
	return pinctrl_apply_state_direct(config, state);
   2f4b2:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   2f4b4:	682a      	ldr	r2, [r5, #0]
   2f4b6:	7919      	ldrb	r1, [r3, #4]
   2f4b8:	6818      	ldr	r0, [r3, #0]
   2f4ba:	f7f2 ff65 	bl	22388 <pinctrl_configure_pins>
   2f4be:	2800      	cmp	r0, #0
   2f4c0:	db02      	blt.n	2f4c8 <twi_1_init+0x38>
   2f4c2:	4620      	mov	r0, r4
   2f4c4:	f7f2 f8e4 	bl	21690 <init_twi>
   2f4c8:	b003      	add	sp, #12
   2f4ca:	bd30      	pop	{r4, r5, pc}

0002f4cc <shift_write_context>:
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
}

static void shift_write_context(uint32_t shift, struct flash_context *w_ctx)
{
	w_ctx->flash_addr += shift;
   2f4cc:	684b      	ldr	r3, [r1, #4]
   2f4ce:	4403      	add	r3, r0
   2f4d0:	604b      	str	r3, [r1, #4]
	w_ctx->data_addr += shift;
   2f4d2:	680b      	ldr	r3, [r1, #0]
   2f4d4:	4403      	add	r3, r0
   2f4d6:	600b      	str	r3, [r1, #0]
	w_ctx->len -= shift;
   2f4d8:	688b      	ldr	r3, [r1, #8]
   2f4da:	1a18      	subs	r0, r3, r0
   2f4dc:	6088      	str	r0, [r1, #8]
}
   2f4de:	4770      	bx	lr

0002f4e0 <erase_op>:
{
   2f4e0:	b570      	push	{r4, r5, r6, lr}
   2f4e2:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   2f4e4:	f001 f8f0 	bl	306c8 <nrfx_nvmc_flash_page_size_get>
   2f4e8:	4606      	mov	r6, r0
	if (e_ctx->enable_time_limit) {
   2f4ea:	7b23      	ldrb	r3, [r4, #12]
   2f4ec:	b90b      	cbnz	r3, 2f4f2 <erase_op+0x12>
{
   2f4ee:	2500      	movs	r5, #0
   2f4f0:	e004      	b.n	2f4fc <erase_op+0x1c>
		nrf_flash_sync_get_timestamp_begin();
   2f4f2:	f000 ff8e 	bl	30412 <nrf_flash_sync_get_timestamp_begin>
   2f4f6:	e7fa      	b.n	2f4ee <erase_op+0xe>
	} while (e_ctx->len > 0);
   2f4f8:	68a3      	ldr	r3, [r4, #8]
   2f4fa:	b18b      	cbz	r3, 2f520 <erase_op+0x40>
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   2f4fc:	6860      	ldr	r0, [r4, #4]
   2f4fe:	f7f5 fb05 	bl	24b0c <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
   2f502:	68a3      	ldr	r3, [r4, #8]
   2f504:	1b9b      	subs	r3, r3, r6
   2f506:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
   2f508:	6863      	ldr	r3, [r4, #4]
   2f50a:	4433      	add	r3, r6
   2f50c:	6063      	str	r3, [r4, #4]
		i++;
   2f50e:	3501      	adds	r5, #1
		if (e_ctx->enable_time_limit) {
   2f510:	7b23      	ldrb	r3, [r4, #12]
   2f512:	2b00      	cmp	r3, #0
   2f514:	d0f0      	beq.n	2f4f8 <erase_op+0x18>
			if (nrf_flash_sync_check_time_limit(i)) {
   2f516:	4628      	mov	r0, r5
   2f518:	f7f4 fa76 	bl	23a08 <nrf_flash_sync_check_time_limit>
   2f51c:	2800      	cmp	r0, #0
   2f51e:	d0eb      	beq.n	2f4f8 <erase_op+0x18>
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
   2f520:	68a0      	ldr	r0, [r4, #8]
}
   2f522:	3800      	subs	r0, #0
   2f524:	bf18      	it	ne
   2f526:	2001      	movne	r0, #1
   2f528:	bd70      	pop	{r4, r5, r6, pc}

0002f52a <erase>:

	return FLASH_OP_DONE;
}

static int erase(uint32_t addr, uint32_t size)
{
   2f52a:	b500      	push	{lr}
   2f52c:	b085      	sub	sp, #20
	struct flash_context context = {
   2f52e:	2300      	movs	r3, #0
   2f530:	9300      	str	r3, [sp, #0]
   2f532:	9301      	str	r3, [sp, #4]
   2f534:	9302      	str	r3, [sp, #8]
   2f536:	9303      	str	r3, [sp, #12]
   2f538:	9001      	str	r0, [sp, #4]
   2f53a:	9102      	str	r1, [sp, #8]
#if defined(CONFIG_SOC_FLASH_NRF_PARTIAL_ERASE)
		.flash_addr_next = addr
#endif
	};

	return	erase_op(&context);
   2f53c:	4668      	mov	r0, sp
   2f53e:	f7ff ffcf 	bl	2f4e0 <erase_op>
}
   2f542:	b005      	add	sp, #20
   2f544:	f85d fb04 	ldr.w	pc, [sp], #4

0002f548 <write_op>:
{
   2f548:	b538      	push	{r3, r4, r5, lr}
   2f54a:	4604      	mov	r4, r0
	if (w_ctx->enable_time_limit) {
   2f54c:	7b03      	ldrb	r3, [r0, #12]
   2f54e:	b9cb      	cbnz	r3, 2f584 <write_op+0x3c>
{
   2f550:	2501      	movs	r5, #1
	while (w_ctx->len >= sizeof(uint32_t)) {
   2f552:	68a3      	ldr	r3, [r4, #8]
   2f554:	2b03      	cmp	r3, #3
   2f556:	d918      	bls.n	2f58a <write_op+0x42>
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   2f558:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   2f55a:	6819      	ldr	r1, [r3, #0]
   2f55c:	6860      	ldr	r0, [r4, #4]
   2f55e:	f7f5 fb07 	bl	24b70 <nrfx_nvmc_word_write>
		shift_write_context(sizeof(uint32_t), w_ctx);
   2f562:	4621      	mov	r1, r4
   2f564:	2004      	movs	r0, #4
   2f566:	f7ff ffb1 	bl	2f4cc <shift_write_context>
		i++;
   2f56a:	3501      	adds	r5, #1
		if (w_ctx->enable_time_limit) {
   2f56c:	7b23      	ldrb	r3, [r4, #12]
   2f56e:	2b00      	cmp	r3, #0
   2f570:	d0ef      	beq.n	2f552 <write_op+0xa>
			if (nrf_flash_sync_check_time_limit(i)) {
   2f572:	4628      	mov	r0, r5
   2f574:	f7f4 fa48 	bl	23a08 <nrf_flash_sync_check_time_limit>
   2f578:	2800      	cmp	r0, #0
   2f57a:	d0ea      	beq.n	2f552 <write_op+0xa>
				nvmc_wait_ready();
   2f57c:	f7f2 f8a4 	bl	216c8 <nvmc_wait_ready>
				return FLASH_OP_ONGOING;
   2f580:	2001      	movs	r0, #1
   2f582:	e005      	b.n	2f590 <write_op+0x48>
		nrf_flash_sync_get_timestamp_begin();
   2f584:	f000 ff45 	bl	30412 <nrf_flash_sync_get_timestamp_begin>
   2f588:	e7e2      	b.n	2f550 <write_op+0x8>
	nvmc_wait_ready();
   2f58a:	f7f2 f89d 	bl	216c8 <nvmc_wait_ready>
	return FLASH_OP_DONE;
   2f58e:	2000      	movs	r0, #0
}
   2f590:	bd38      	pop	{r3, r4, r5, pc}

0002f592 <write>:

static int write(off_t addr, const void *data, size_t len)
{
   2f592:	b500      	push	{lr}
   2f594:	b085      	sub	sp, #20
	struct flash_context context = {
   2f596:	9100      	str	r1, [sp, #0]
   2f598:	9001      	str	r0, [sp, #4]
   2f59a:	9202      	str	r2, [sp, #8]
   2f59c:	2300      	movs	r3, #0
   2f59e:	f88d 300c 	strb.w	r3, [sp, #12]
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
		.enable_time_limit = 0 /* disable time limit */
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	};

	return write_op(&context);
   2f5a2:	4668      	mov	r0, sp
   2f5a4:	f7ff ffd0 	bl	2f548 <write_op>
}
   2f5a8:	b005      	add	sp, #20
   2f5aa:	f85d fb04 	ldr.w	pc, [sp], #4

0002f5ae <flash_get_page_info>:

#include <zephyr/drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
   2f5ae:	b570      	push	{r4, r5, r6, lr}
   2f5b0:	b082      	sub	sp, #8
   2f5b2:	460d      	mov	r5, r1
   2f5b4:	4616      	mov	r6, r2
   2f5b6:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
   2f5b8:	6882      	ldr	r2, [r0, #8]
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
   2f5ba:	2300      	movs	r3, #0
   2f5bc:	6023      	str	r3, [r4, #0]
	info->index = 0U;
   2f5be:	60a3      	str	r3, [r4, #8]

	api->page_layout(dev, &layout, &layout_size);
   2f5c0:	6913      	ldr	r3, [r2, #16]
   2f5c2:	466a      	mov	r2, sp
   2f5c4:	a901      	add	r1, sp, #4
   2f5c6:	4798      	blx	r3

	while (layout_size--) {
   2f5c8:	e014      	b.n	2f5f4 <flash_get_page_info+0x46>
		info->size = layout->pages_size;
		if (offs == 0) {
			index_jmp = index - info->index;
		} else {
			index_jmp = (offs - info->start_offset) / info->size;
   2f5ca:	6823      	ldr	r3, [r4, #0]
   2f5cc:	1aeb      	subs	r3, r5, r3
   2f5ce:	fbb3 f0f1 	udiv	r0, r3, r1
		}

		index_jmp = MIN(index_jmp, layout->pages_count);
   2f5d2:	6813      	ldr	r3, [r2, #0]
   2f5d4:	4283      	cmp	r3, r0
   2f5d6:	bf28      	it	cs
   2f5d8:	4603      	movcs	r3, r0
		info->start_offset += (index_jmp * info->size);
   2f5da:	6822      	ldr	r2, [r4, #0]
   2f5dc:	fb03 2201 	mla	r2, r3, r1, r2
   2f5e0:	6022      	str	r2, [r4, #0]
		info->index += index_jmp;
   2f5e2:	68a2      	ldr	r2, [r4, #8]
   2f5e4:	441a      	add	r2, r3
   2f5e6:	60a2      	str	r2, [r4, #8]
		if (index_jmp < layout->pages_count) {
   2f5e8:	9a01      	ldr	r2, [sp, #4]
   2f5ea:	6811      	ldr	r1, [r2, #0]
   2f5ec:	4299      	cmp	r1, r3
   2f5ee:	d811      	bhi.n	2f614 <flash_get_page_info+0x66>
			return 0;
		}

		layout++;
   2f5f0:	3208      	adds	r2, #8
   2f5f2:	9201      	str	r2, [sp, #4]
	while (layout_size--) {
   2f5f4:	9b00      	ldr	r3, [sp, #0]
   2f5f6:	1e5a      	subs	r2, r3, #1
   2f5f8:	9200      	str	r2, [sp, #0]
   2f5fa:	b13b      	cbz	r3, 2f60c <flash_get_page_info+0x5e>
		info->size = layout->pages_size;
   2f5fc:	9a01      	ldr	r2, [sp, #4]
   2f5fe:	6851      	ldr	r1, [r2, #4]
   2f600:	6061      	str	r1, [r4, #4]
		if (offs == 0) {
   2f602:	2d00      	cmp	r5, #0
   2f604:	d1e1      	bne.n	2f5ca <flash_get_page_info+0x1c>
			index_jmp = index - info->index;
   2f606:	68a3      	ldr	r3, [r4, #8]
   2f608:	1af0      	subs	r0, r6, r3
   2f60a:	e7e2      	b.n	2f5d2 <flash_get_page_info+0x24>
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
   2f60c:	f06f 0015 	mvn.w	r0, #21
}
   2f610:	b002      	add	sp, #8
   2f612:	bd70      	pop	{r4, r5, r6, pc}
			return 0;
   2f614:	2000      	movs	r0, #0
   2f616:	e7fb      	b.n	2f610 <flash_get_page_info+0x62>

0002f618 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   2f618:	b508      	push	{r3, lr}
   2f61a:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
   2f61c:	2200      	movs	r2, #0
   2f61e:	f7ff ffc6 	bl	2f5ae <flash_get_page_info>
}
   2f622:	bd08      	pop	{r3, pc}

0002f624 <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   2f624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2f628:	b086      	sub	sp, #24
   2f62a:	4689      	mov	r9, r1
   2f62c:	4690      	mov	r8, r2
	const struct flash_driver_api *api = dev->api;
   2f62e:	6883      	ldr	r3, [r0, #8]
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
   2f630:	691b      	ldr	r3, [r3, #16]
   2f632:	aa01      	add	r2, sp, #4
   2f634:	a905      	add	r1, sp, #20
   2f636:	4798      	blx	r3
	off_t off = 0;
   2f638:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
   2f63a:	4626      	mov	r6, r4

	for (block = 0; block < num_blocks; block++) {
   2f63c:	46a2      	mov	sl, r4
   2f63e:	9b01      	ldr	r3, [sp, #4]
   2f640:	4553      	cmp	r3, sl
   2f642:	d914      	bls.n	2f66e <flash_page_foreach+0x4a>
		const struct flash_pages_layout *l = &layout[block];
   2f644:	9f05      	ldr	r7, [sp, #20]
   2f646:	eb07 07ca 	add.w	r7, r7, sl, lsl #3
		page_info.size = l->pages_size;
   2f64a:	687b      	ldr	r3, [r7, #4]
   2f64c:	9303      	str	r3, [sp, #12]

		for (i = 0; i < l->pages_count; i++) {
   2f64e:	2500      	movs	r5, #0
   2f650:	e003      	b.n	2f65a <flash_page_foreach+0x36>

			if (!cb(&page_info, data)) {
				return;
			}

			off += page_info.size;
   2f652:	9b03      	ldr	r3, [sp, #12]
   2f654:	441c      	add	r4, r3
			page++;
   2f656:	3601      	adds	r6, #1
		for (i = 0; i < l->pages_count; i++) {
   2f658:	3501      	adds	r5, #1
   2f65a:	683b      	ldr	r3, [r7, #0]
   2f65c:	42ab      	cmp	r3, r5
   2f65e:	d909      	bls.n	2f674 <flash_page_foreach+0x50>
			page_info.start_offset = off;
   2f660:	9402      	str	r4, [sp, #8]
			page_info.index = page;
   2f662:	9604      	str	r6, [sp, #16]
			if (!cb(&page_info, data)) {
   2f664:	4641      	mov	r1, r8
   2f666:	a802      	add	r0, sp, #8
   2f668:	47c8      	blx	r9
   2f66a:	2800      	cmp	r0, #0
   2f66c:	d1f1      	bne.n	2f652 <flash_page_foreach+0x2e>
		}
	}
}
   2f66e:	b006      	add	sp, #24
   2f670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (block = 0; block < num_blocks; block++) {
   2f674:	f10a 0a01 	add.w	sl, sl, #1
   2f678:	e7e1      	b.n	2f63e <flash_page_foreach+0x1a>

0002f67a <endtx_isr>:
	const struct uarte_nrfx_config *config = dev->config;
   2f67a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2f67c:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   2f67e:	f04f 0140 	mov.w	r1, #64	; 0x40
   2f682:	f3ef 8211 	mrs	r2, BASEPRI
   2f686:	f381 8812 	msr	BASEPRI_MAX, r1
   2f68a:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2f68e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   2f692:	b131      	cbz	r1, 2f6a2 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2f694:	2100      	movs	r1, #0
   2f696:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   2f69a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2f69e:	2101      	movs	r1, #1
   2f6a0:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   2f6a2:	f382 8811 	msr	BASEPRI, r2
   2f6a6:	f3bf 8f6f 	isb	sy
}
   2f6aa:	4770      	bx	lr

0002f6ac <uarte_nrfx_isr_int>:
{
   2f6ac:	b538      	push	{r3, r4, r5, lr}
	const struct uarte_nrfx_config *config = dev->config;
   2f6ae:	6845      	ldr	r5, [r0, #4]
	return config->uarte_regs;
   2f6b0:	682c      	ldr	r4, [r5, #0]
    return p_reg->INTENSET & mask;
   2f6b2:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   2f6b6:	f413 7f80 	tst.w	r3, #256	; 0x100
   2f6ba:	d002      	beq.n	2f6c2 <uarte_nrfx_isr_int+0x16>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2f6bc:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   2f6c0:	b9d3      	cbnz	r3, 2f6f8 <uarte_nrfx_isr_int+0x4c>
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2f6c2:	686b      	ldr	r3, [r5, #4]
   2f6c4:	f013 0f10 	tst.w	r3, #16
   2f6c8:	d015      	beq.n	2f6f6 <uarte_nrfx_isr_int+0x4a>
	__asm__ volatile(
   2f6ca:	f04f 0240 	mov.w	r2, #64	; 0x40
   2f6ce:	f3ef 8311 	mrs	r3, BASEPRI
   2f6d2:	f382 8812 	msr	BASEPRI_MAX, r2
   2f6d6:	f3bf 8f6f 	isb	sy
   2f6da:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   2f6de:	b112      	cbz	r2, 2f6e6 <uarte_nrfx_isr_int+0x3a>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   2f6e0:	2200      	movs	r2, #0
   2f6e2:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   2f6e6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   2f6ea:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
	__asm__ volatile(
   2f6ee:	f383 8811 	msr	BASEPRI, r3
   2f6f2:	f3bf 8f6f 	isb	sy
}
   2f6f6:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
   2f6f8:	f7ff ffbf 	bl	2f67a <endtx_isr>
   2f6fc:	e7e1      	b.n	2f6c2 <uarte_nrfx_isr_int+0x16>

0002f6fe <uarte_nrfx_configure>:
{
   2f6fe:	b570      	push	{r4, r5, r6, lr}
   2f700:	b082      	sub	sp, #8
	struct uarte_nrfx_data *data = dev->data;
   2f702:	6905      	ldr	r5, [r0, #16]
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
   2f704:	794b      	ldrb	r3, [r1, #5]
   2f706:	2b01      	cmp	r3, #1
   2f708:	d137      	bne.n	2f77a <uarte_nrfx_configure+0x7c>
   2f70a:	4606      	mov	r6, r0
   2f70c:	460c      	mov	r4, r1
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   2f70e:	798b      	ldrb	r3, [r1, #6]
   2f710:	2b03      	cmp	r3, #3
   2f712:	d135      	bne.n	2f780 <uarte_nrfx_configure+0x82>
	switch (cfg->flow_ctrl) {
   2f714:	79cb      	ldrb	r3, [r1, #7]
   2f716:	b133      	cbz	r3, 2f726 <uarte_nrfx_configure+0x28>
   2f718:	2b01      	cmp	r3, #1
   2f71a:	d00e      	beq.n	2f73a <uarte_nrfx_configure+0x3c>
   2f71c:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
   2f720:	4618      	mov	r0, r3
   2f722:	b002      	add	sp, #8
   2f724:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
   2f726:	2300      	movs	r3, #0
   2f728:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
   2f72c:	7923      	ldrb	r3, [r4, #4]
   2f72e:	b143      	cbz	r3, 2f742 <uarte_nrfx_configure+0x44>
   2f730:	2b02      	cmp	r3, #2
   2f732:	d01e      	beq.n	2f772 <uarte_nrfx_configure+0x74>
   2f734:	f06f 0385 	mvn.w	r3, #133	; 0x85
   2f738:	e7f2      	b.n	2f720 <uarte_nrfx_configure+0x22>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
   2f73a:	2301      	movs	r3, #1
   2f73c:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
   2f740:	e7f4      	b.n	2f72c <uarte_nrfx_configure+0x2e>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
   2f742:	2300      	movs	r3, #0
   2f744:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   2f748:	6821      	ldr	r1, [r4, #0]
   2f74a:	4630      	mov	r0, r6
   2f74c:	f7f2 f8f2 	bl	21934 <baudrate_set>
   2f750:	4603      	mov	r3, r0
   2f752:	b9c0      	cbnz	r0, 2f786 <uarte_nrfx_configure+0x88>
	const struct uarte_nrfx_config *config = dev->config;
   2f754:	6872      	ldr	r2, [r6, #4]
	return config->uarte_regs;
   2f756:	6811      	ldr	r1, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   2f758:	f89d 2005 	ldrb.w	r2, [sp, #5]
                    | (uint32_t)p_cfg->hwfc;
   2f75c:	f89d 0004 	ldrb.w	r0, [sp, #4]
   2f760:	4302      	orrs	r2, r0
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   2f762:	f8c1 256c 	str.w	r2, [r1, #1388]	; 0x56c
	data->uart_config = *cfg;
   2f766:	3504      	adds	r5, #4
   2f768:	e894 0003 	ldmia.w	r4, {r0, r1}
   2f76c:	e885 0003 	stmia.w	r5, {r0, r1}
	return 0;
   2f770:	e7d6      	b.n	2f720 <uarte_nrfx_configure+0x22>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   2f772:	230e      	movs	r3, #14
   2f774:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
   2f778:	e7e6      	b.n	2f748 <uarte_nrfx_configure+0x4a>
		return -ENOTSUP;
   2f77a:	f06f 0385 	mvn.w	r3, #133	; 0x85
   2f77e:	e7cf      	b.n	2f720 <uarte_nrfx_configure+0x22>
		return -ENOTSUP;
   2f780:	f06f 0385 	mvn.w	r3, #133	; 0x85
   2f784:	e7cc      	b.n	2f720 <uarte_nrfx_configure+0x22>
		return -ENOTSUP;
   2f786:	f06f 0385 	mvn.w	r3, #133	; 0x85
   2f78a:	e7c9      	b.n	2f720 <uarte_nrfx_configure+0x22>

0002f78c <uarte_nrfx_config_get>:
{
   2f78c:	460a      	mov	r2, r1
	struct uarte_nrfx_data *data = dev->data;
   2f78e:	6903      	ldr	r3, [r0, #16]
	*cfg = data->uart_config;
   2f790:	3304      	adds	r3, #4
   2f792:	e893 0003 	ldmia.w	r3, {r0, r1}
   2f796:	e882 0003 	stmia.w	r2, {r0, r1}
}
   2f79a:	2000      	movs	r0, #0
   2f79c:	4770      	bx	lr

0002f79e <uarte_nrfx_err_check>:
	const struct uarte_nrfx_config *config = dev->config;
   2f79e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2f7a0:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   2f7a2:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   2f7a6:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   2f7aa:	4770      	bx	lr

0002f7ac <is_tx_ready>:
	const struct uarte_nrfx_config *config = dev->config;
   2f7ac:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2f7ae:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   2f7b0:	685b      	ldr	r3, [r3, #4]
   2f7b2:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2f7b6:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2f7ba:	b929      	cbnz	r1, 2f7c8 <is_tx_ready+0x1c>
   2f7bc:	b933      	cbnz	r3, 2f7cc <is_tx_ready+0x20>
   2f7be:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
   2f7c2:	b92b      	cbnz	r3, 2f7d0 <is_tx_ready+0x24>
   2f7c4:	2000      	movs	r0, #0
   2f7c6:	4770      	bx	lr
   2f7c8:	2001      	movs	r0, #1
   2f7ca:	4770      	bx	lr
   2f7cc:	2000      	movs	r0, #0
   2f7ce:	4770      	bx	lr
   2f7d0:	2001      	movs	r0, #1
}
   2f7d2:	4770      	bx	lr

0002f7d4 <uarte_enable>:
	const struct uarte_nrfx_config *config = dev->config;
   2f7d4:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2f7d6:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   2f7d8:	2208      	movs	r2, #8
   2f7da:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   2f7de:	4770      	bx	lr

0002f7e0 <tx_start>:
{
   2f7e0:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
   2f7e2:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2f7e4:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2f7e6:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2f7ea:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2f7ee:	2200      	movs	r2, #0
   2f7f0:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
   2f7f4:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
   2f7f8:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
   2f7fc:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2f800:	685b      	ldr	r3, [r3, #4]
   2f802:	f013 0f10 	tst.w	r3, #16
   2f806:	d102      	bne.n	2f80e <tx_start+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2f808:	2301      	movs	r3, #1
   2f80a:	60a3      	str	r3, [r4, #8]
}
   2f80c:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
   2f80e:	2101      	movs	r1, #1
   2f810:	f7ff ffe0 	bl	2f7d4 <uarte_enable>
    p_reg->INTENSET = mask;
   2f814:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   2f818:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   2f81c:	e7f4      	b.n	2f808 <tx_start+0x28>

0002f81e <uarte_nrfx_poll_in>:
{
   2f81e:	b410      	push	{r4}
	const struct uarte_nrfx_data *data = dev->data;
   2f820:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
   2f822:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2f824:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2f826:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2f82a:	b15a      	cbz	r2, 2f844 <uarte_nrfx_poll_in+0x26>
	*c = *data->rx_data;
   2f82c:	6962      	ldr	r2, [r4, #20]
   2f82e:	7812      	ldrb	r2, [r2, #0]
   2f830:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2f832:	2000      	movs	r0, #0
   2f834:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   2f838:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2f83c:	2201      	movs	r2, #1
   2f83e:	601a      	str	r2, [r3, #0]
}
   2f840:	bc10      	pop	{r4}
   2f842:	4770      	bx	lr
		return -1;
   2f844:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2f848:	e7fa      	b.n	2f840 <uarte_nrfx_poll_in+0x22>

0002f84a <wait_tx_ready>:
{
   2f84a:	b570      	push	{r4, r5, r6, lr}
   2f84c:	4606      	mov	r6, r0
   2f84e:	e014      	b.n	2f87a <wait_tx_ready+0x30>
		if (res) {
   2f850:	b17d      	cbz	r5, 2f872 <wait_tx_ready+0x28>
	__asm__ volatile(
   2f852:	f04f 0340 	mov.w	r3, #64	; 0x40
   2f856:	f3ef 8411 	mrs	r4, BASEPRI
   2f85a:	f383 8812 	msr	BASEPRI_MAX, r3
   2f85e:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   2f862:	4630      	mov	r0, r6
   2f864:	f7ff ffa2 	bl	2f7ac <is_tx_ready>
   2f868:	b9a0      	cbnz	r0, 2f894 <wait_tx_ready+0x4a>
	__asm__ volatile(
   2f86a:	f384 8811 	msr	BASEPRI, r4
   2f86e:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
   2f872:	2021      	movs	r0, #33	; 0x21
   2f874:	2100      	movs	r1, #0
   2f876:	f7f8 fe73 	bl	28560 <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   2f87a:	2464      	movs	r4, #100	; 0x64
   2f87c:	4630      	mov	r0, r6
   2f87e:	f7ff ff95 	bl	2f7ac <is_tx_ready>
   2f882:	4605      	mov	r5, r0
   2f884:	2800      	cmp	r0, #0
   2f886:	d1e3      	bne.n	2f850 <wait_tx_ready+0x6>
   2f888:	2001      	movs	r0, #1
   2f88a:	f000 fec2 	bl	30612 <nrfx_busy_wait>
   2f88e:	3c01      	subs	r4, #1
   2f890:	d1f4      	bne.n	2f87c <wait_tx_ready+0x32>
   2f892:	e7dd      	b.n	2f850 <wait_tx_ready+0x6>
}
   2f894:	4620      	mov	r0, r4
   2f896:	bd70      	pop	{r4, r5, r6, pc}

0002f898 <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
   2f898:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2f89c:	b083      	sub	sp, #12
   2f89e:	4605      	mov	r5, r0
	const struct uarte_nrfx_config *config = dev->config;
   2f8a0:	6847      	ldr	r7, [r0, #4]
	return config->uarte_regs;
   2f8a2:	683e      	ldr	r6, [r7, #0]
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
   2f8a4:	f8d0 8010 	ldr.w	r8, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   2f8a8:	2100      	movs	r1, #0
   2f8aa:	f8c6 1500 	str.w	r1, [r6, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
   2f8ae:	f8c8 0000 	str.w	r0, [r8]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   2f8b2:	f8d7 900c 	ldr.w	r9, [r7, #12]
	ret = pinctrl_lookup_state(config, id, &state);
   2f8b6:	aa01      	add	r2, sp, #4
   2f8b8:	4648      	mov	r0, r9
   2f8ba:	f000 f8fc 	bl	2fab6 <pinctrl_lookup_state>
	if (ret < 0) {
   2f8be:	1e04      	subs	r4, r0, #0
   2f8c0:	db07      	blt.n	2f8d2 <uarte_instance_init+0x3a>
	return pinctrl_apply_state_direct(config, state);
   2f8c2:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   2f8c4:	f8d9 2000 	ldr.w	r2, [r9]
   2f8c8:	7919      	ldrb	r1, [r3, #4]
   2f8ca:	6818      	ldr	r0, [r3, #0]
   2f8cc:	f7f2 fd5c 	bl	22388 <pinctrl_configure_pins>
   2f8d0:	4604      	mov	r4, r0
	if (err < 0) {
   2f8d2:	2c00      	cmp	r4, #0
   2f8d4:	db35      	blt.n	2f942 <uarte_instance_init+0xaa>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
   2f8d6:	f108 0104 	add.w	r1, r8, #4
   2f8da:	4628      	mov	r0, r5
   2f8dc:	f7ff ff0f 	bl	2f6fe <uarte_nrfx_configure>
	if (err) {
   2f8e0:	4604      	mov	r4, r0
   2f8e2:	bb70      	cbnz	r0, 2f942 <uarte_instance_init+0xaa>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   2f8e4:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   2f8e6:	f013 0f02 	tst.w	r3, #2
   2f8ea:	d12e      	bne.n	2f94a <uarte_instance_init+0xb2>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   2f8ec:	2308      	movs	r3, #8
   2f8ee:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
   2f8f2:	7a3b      	ldrb	r3, [r7, #8]
   2f8f4:	b95b      	cbnz	r3, 2f90e <uarte_instance_init+0x76>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2f8f6:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
   2f8fa:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, data->rx_data, 1);
   2f8fe:	f8d8 3014 	ldr.w	r3, [r8, #20]

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2f902:	f8c6 3534 	str.w	r3, [r6, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   2f906:	2301      	movs	r3, #1
   2f908:	f8c6 3538 	str.w	r3, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2f90c:	6033      	str	r3, [r6, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   2f90e:	687b      	ldr	r3, [r7, #4]
   2f910:	f013 0f02 	tst.w	r3, #2
   2f914:	d103      	bne.n	2f91e <uarte_instance_init+0x86>
    p_reg->INTENSET = mask;
   2f916:	f44f 7380 	mov.w	r3, #256	; 0x100
   2f91a:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2f91e:	687b      	ldr	r3, [r7, #4]
   2f920:	f013 0f10 	tst.w	r3, #16
   2f924:	d003      	beq.n	2f92e <uarte_instance_init+0x96>
   2f926:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   2f92a:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, data->char_out, 0);
   2f92e:	f8d8 3010 	ldr.w	r3, [r8, #16]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2f932:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2f936:	2300      	movs	r3, #0
   2f938:	f8c6 3548 	str.w	r3, [r6, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2f93c:	2301      	movs	r3, #1
   2f93e:	60b3      	str	r3, [r6, #8]
   2f940:	60f3      	str	r3, [r6, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   2f942:	4620      	mov	r0, r4
   2f944:	b003      	add	sp, #12
   2f946:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
   2f94a:	4641      	mov	r1, r8
   2f94c:	4630      	mov	r0, r6
   2f94e:	f7f2 f8d3 	bl	21af8 <endtx_stoptx_ppi_init>
		if (err < 0) {
   2f952:	2800      	cmp	r0, #0
   2f954:	daca      	bge.n	2f8ec <uarte_instance_init+0x54>
			return err;
   2f956:	4604      	mov	r4, r0
   2f958:	e7f3      	b.n	2f942 <uarte_instance_init+0xaa>

0002f95a <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   2f95a:	b510      	push	{r4, lr}
   2f95c:	4604      	mov	r4, r0
   2f95e:	2200      	movs	r2, #0
   2f960:	2101      	movs	r1, #1
   2f962:	2002      	movs	r0, #2
   2f964:	f7e6 f848 	bl	159f8 <z_arm_irq_priority_set>
   2f968:	2002      	movs	r0, #2
   2f96a:	f7e6 f815 	bl	15998 <arch_irq_enable>
   2f96e:	2100      	movs	r1, #0
   2f970:	4620      	mov	r0, r4
   2f972:	f7ff ff91 	bl	2f898 <uarte_instance_init>
   2f976:	bd10      	pop	{r4, pc}

0002f978 <rng_pool_put>:
	uint8_t first = rngp->first_read;
   2f978:	7842      	ldrb	r2, [r0, #1]
	uint8_t last  = rngp->last;
   2f97a:	7883      	ldrb	r3, [r0, #2]
	uint8_t mask  = rngp->mask;
   2f97c:	f890 c003 	ldrb.w	ip, [r0, #3]
	if (((last - first) & mask) == mask) {
   2f980:	1a9a      	subs	r2, r3, r2
   2f982:	ea3c 0202 	bics.w	r2, ip, r2
   2f986:	d008      	beq.n	2f99a <rng_pool_put+0x22>
	rngp->buffer[last] = byte;
   2f988:	18c2      	adds	r2, r0, r3
   2f98a:	7151      	strb	r1, [r2, #5]
	rngp->last = (last + 1) & mask;
   2f98c:	3301      	adds	r3, #1
   2f98e:	b25b      	sxtb	r3, r3
   2f990:	ea03 030c 	and.w	r3, r3, ip
   2f994:	7083      	strb	r3, [r0, #2]
	return 0;
   2f996:	2000      	movs	r0, #0
   2f998:	4770      	bx	lr
		return -ENOBUFS;
   2f99a:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   2f99e:	4770      	bx	lr

0002f9a0 <rng_pool_init>:
	rngp->first_alloc = 0U;
   2f9a0:	2300      	movs	r3, #0
   2f9a2:	7003      	strb	r3, [r0, #0]
	rngp->first_read  = 0U;
   2f9a4:	7043      	strb	r3, [r0, #1]
	rngp->last	  = 0U;
   2f9a6:	7083      	strb	r3, [r0, #2]
	rngp->mask	  = size - 1;
   2f9a8:	3901      	subs	r1, #1
   2f9aa:	70c1      	strb	r1, [r0, #3]
	rngp->threshold	  = threshold;
   2f9ac:	7102      	strb	r2, [r0, #4]
}
   2f9ae:	4770      	bx	lr

0002f9b0 <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   2f9b0:	2000      	movs	r0, #0
   2f9b2:	4770      	bx	lr

0002f9b4 <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   2f9b4:	b538      	push	{r3, r4, r5, lr}
   2f9b6:	460c      	mov	r4, r1
   2f9b8:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   2f9ba:	f7e8 fde5 	bl	18588 <bt_is_ready>
   2f9be:	b120      	cbz	r0, 2f9ca <entropy_bt_get_entropy+0x16>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   2f9c0:	4629      	mov	r1, r5
   2f9c2:	4620      	mov	r0, r4
   2f9c4:	f7e8 f8aa 	bl	17b1c <bt_hci_le_rand>
}
   2f9c8:	bd38      	pop	{r3, r4, r5, pc}
		return -EAGAIN;
   2f9ca:	f06f 000a 	mvn.w	r0, #10
   2f9ce:	e7fb      	b.n	2f9c8 <entropy_bt_get_entropy+0x14>

0002f9d0 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   2f9d0:	4770      	bx	lr

0002f9d2 <counter_sub>:
	return (a - b) & COUNTER_MAX;
   2f9d2:	1a40      	subs	r0, r0, r1
}
   2f9d4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   2f9d8:	4770      	bx	lr

0002f9da <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   2f9da:	f100 0350 	add.w	r3, r0, #80	; 0x50
   2f9de:	009b      	lsls	r3, r3, #2
   2f9e0:	b29b      	uxth	r3, r3
   2f9e2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2f9e6:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   2f9ea:	2200      	movs	r2, #0
   2f9ec:	601a      	str	r2, [r3, #0]
   2f9ee:	681b      	ldr	r3, [r3, #0]
}
   2f9f0:	4770      	bx	lr

0002f9f2 <absolute_time_to_cc>:
}
   2f9f2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   2f9f6:	4770      	bx	lr

0002f9f8 <full_int_lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   2f9f8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   2f9fc:	b672      	cpsid	i
}
   2f9fe:	4770      	bx	lr

0002fa00 <full_int_unlock>:
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   2fa00:	f380 8810 	msr	PRIMASK, r0
}
   2fa04:	4770      	bx	lr

0002fa06 <set_absolute_alarm>:
{
   2fa06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2fa08:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
   2fa0a:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
   2fa0e:	f7f2 fa29 	bl	21e64 <get_comparator>
   2fa12:	4607      	mov	r7, r0
   2fa14:	e019      	b.n	2fa4a <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
   2fa16:	2013      	movs	r0, #19
   2fa18:	f001 f8c4 	bl	30ba4 <z_impl_k_busy_wait>
}
   2fa1c:	e022      	b.n	2fa64 <set_absolute_alarm+0x5e>
		event_clear(chan);
   2fa1e:	4630      	mov	r0, r6
   2fa20:	f7ff ffdb 	bl	2f9da <event_clear>
		event_enable(chan);
   2fa24:	4630      	mov	r0, r6
   2fa26:	f7f2 fa25 	bl	21e74 <event_enable>
		set_comparator(chan, cc_val);
   2fa2a:	4629      	mov	r1, r5
   2fa2c:	4630      	mov	r0, r6
   2fa2e:	f7f2 fa0f 	bl	21e50 <set_comparator>
		now2 = counter();
   2fa32:	f7f2 fa33 	bl	21e9c <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   2fa36:	4284      	cmp	r4, r0
   2fa38:	d01e      	beq.n	2fa78 <set_absolute_alarm+0x72>
   2fa3a:	1c81      	adds	r1, r0, #2
   2fa3c:	4628      	mov	r0, r5
   2fa3e:	f7ff ffc8 	bl	2f9d2 <counter_sub>
	} while ((now2 != now) &&
   2fa42:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   2fa46:	d917      	bls.n	2fa78 <set_absolute_alarm+0x72>
		prev_cc = cc_val;
   2fa48:	462f      	mov	r7, r5
		now = counter();
   2fa4a:	f7f2 fa27 	bl	21e9c <counter>
   2fa4e:	4604      	mov	r4, r0
		set_comparator(chan, now);
   2fa50:	4601      	mov	r1, r0
   2fa52:	4630      	mov	r0, r6
   2fa54:	f7f2 f9fc 	bl	21e50 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
   2fa58:	4621      	mov	r1, r4
   2fa5a:	4638      	mov	r0, r7
   2fa5c:	f7ff ffb9 	bl	2f9d2 <counter_sub>
   2fa60:	2801      	cmp	r0, #1
   2fa62:	d0d8      	beq.n	2fa16 <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   2fa64:	1ca7      	adds	r7, r4, #2
   2fa66:	4639      	mov	r1, r7
   2fa68:	4628      	mov	r0, r5
   2fa6a:	f7ff ffb2 	bl	2f9d2 <counter_sub>
   2fa6e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   2fa72:	d9d4      	bls.n	2fa1e <set_absolute_alarm+0x18>
			cc_val = now + 2;
   2fa74:	463d      	mov	r5, r7
   2fa76:	e7d2      	b.n	2fa1e <set_absolute_alarm+0x18>
}
   2fa78:	4628      	mov	r0, r5
   2fa7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002fa7c <compare_set>:
{
   2fa7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2fa7e:	b083      	sub	sp, #12
   2fa80:	4604      	mov	r4, r0
   2fa82:	4617      	mov	r7, r2
   2fa84:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
   2fa86:	f7f2 fa0f 	bl	21ea8 <compare_int_lock>
   2fa8a:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
   2fa8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2fa8e:	9301      	str	r3, [sp, #4]
   2fa90:	9b08      	ldr	r3, [sp, #32]
   2fa92:	9300      	str	r3, [sp, #0]
   2fa94:	463a      	mov	r2, r7
   2fa96:	462b      	mov	r3, r5
   2fa98:	4620      	mov	r0, r4
   2fa9a:	f7f2 faf5 	bl	22088 <compare_set_nolocks>
   2fa9e:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
   2faa0:	4631      	mov	r1, r6
   2faa2:	4620      	mov	r0, r4
   2faa4:	f7f2 fa64 	bl	21f70 <compare_int_unlock>
}
   2faa8:	4628      	mov	r0, r5
   2faaa:	b003      	add	sp, #12
   2faac:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002faae <sys_clock_cycle_get_32>:
{
   2faae:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   2fab0:	f7f2 faca 	bl	22048 <z_nrf_rtc_timer_read>
}
   2fab4:	bd08      	pop	{r3, pc}

0002fab6 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   2fab6:	b410      	push	{r4}
	*state = &config->states[0];
   2fab8:	6843      	ldr	r3, [r0, #4]
   2faba:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   2fabc:	e001      	b.n	2fac2 <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
   2fabe:	3408      	adds	r4, #8
   2fac0:	6014      	str	r4, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   2fac2:	6814      	ldr	r4, [r2, #0]
   2fac4:	7a03      	ldrb	r3, [r0, #8]
   2fac6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   2faca:	3b01      	subs	r3, #1
   2facc:	f8d0 c004 	ldr.w	ip, [r0, #4]
   2fad0:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   2fad4:	429c      	cmp	r4, r3
   2fad6:	d804      	bhi.n	2fae2 <pinctrl_lookup_state+0x2c>
		if (id == (*state)->id) {
   2fad8:	7963      	ldrb	r3, [r4, #5]
   2fada:	428b      	cmp	r3, r1
   2fadc:	d1ef      	bne.n	2fabe <pinctrl_lookup_state+0x8>
			return 0;
   2fade:	2000      	movs	r0, #0
   2fae0:	e001      	b.n	2fae6 <pinctrl_lookup_state+0x30>
	}

	return -ENOENT;
   2fae2:	f06f 0001 	mvn.w	r0, #1
}
   2fae6:	bc10      	pop	{r4}
   2fae8:	4770      	bx	lr

0002faea <event_packet_is_discardable>:
	switch (hdr->evt) {
   2faea:	7803      	ldrb	r3, [r0, #0]
   2faec:	2b3e      	cmp	r3, #62	; 0x3e
   2faee:	d003      	beq.n	2faf8 <event_packet_is_discardable+0xe>
   2faf0:	2bff      	cmp	r3, #255	; 0xff
   2faf2:	d008      	beq.n	2fb06 <event_packet_is_discardable+0x1c>
   2faf4:	2000      	movs	r0, #0
   2faf6:	4770      	bx	lr
		switch (me->subevent) {
   2faf8:	7883      	ldrb	r3, [r0, #2]
   2fafa:	2b02      	cmp	r3, #2
   2fafc:	d001      	beq.n	2fb02 <event_packet_is_discardable+0x18>
			return false;
   2fafe:	2000      	movs	r0, #0
   2fb00:	4770      	bx	lr
			return true;
   2fb02:	2001      	movs	r0, #1
   2fb04:	4770      	bx	lr
		uint8_t subevent = hci_buf[2];
   2fb06:	7883      	ldrb	r3, [r0, #2]
		switch (subevent) {
   2fb08:	2b80      	cmp	r3, #128	; 0x80
   2fb0a:	d001      	beq.n	2fb10 <event_packet_is_discardable+0x26>
			return false;
   2fb0c:	2000      	movs	r0, #0
}
   2fb0e:	4770      	bx	lr
			return true;
   2fb10:	2001      	movs	r0, #1
   2fb12:	4770      	bx	lr

0002fb14 <fetch_and_process_hci_evt>:
{
   2fb14:	b538      	push	{r3, r4, r5, lr}
   2fb16:	4604      	mov	r4, r0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   2fb18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2fb1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2fb20:	f7f2 ffc8 	bl	22ab4 <multithreading_lock_acquire>
	if (!errcode) {
   2fb24:	4605      	mov	r5, r0
   2fb26:	b110      	cbz	r0, 2fb2e <fetch_and_process_hci_evt+0x1a>
	if (errcode) {
   2fb28:	b145      	cbz	r5, 2fb3c <fetch_and_process_hci_evt+0x28>
		return false;
   2fb2a:	2000      	movs	r0, #0
}
   2fb2c:	bd38      	pop	{r3, r4, r5, pc}
		errcode = hci_internal_evt_get(p_hci_buffer);
   2fb2e:	4620      	mov	r0, r4
   2fb30:	f7f3 fa1e 	bl	22f70 <hci_internal_evt_get>
   2fb34:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   2fb36:	f7f2 ffc7 	bl	22ac8 <multithreading_lock_release>
   2fb3a:	e7f5      	b.n	2fb28 <fetch_and_process_hci_evt+0x14>
	event_packet_process(p_hci_buffer);
   2fb3c:	4620      	mov	r0, r4
   2fb3e:	f7f2 ffe5 	bl	22b0c <event_packet_process>
	return true;
   2fb42:	2001      	movs	r0, #1
   2fb44:	e7f2      	b.n	2fb2c <fetch_and_process_hci_evt+0x18>

0002fb46 <fetch_and_process_acl_data>:
{
   2fb46:	b538      	push	{r3, r4, r5, lr}
   2fb48:	4604      	mov	r4, r0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   2fb4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2fb4e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2fb52:	f7f2 ffaf 	bl	22ab4 <multithreading_lock_acquire>
	if (!errcode) {
   2fb56:	4605      	mov	r5, r0
   2fb58:	b110      	cbz	r0, 2fb60 <fetch_and_process_acl_data+0x1a>
	if (errcode) {
   2fb5a:	b145      	cbz	r5, 2fb6e <fetch_and_process_acl_data+0x28>
		return false;
   2fb5c:	2000      	movs	r0, #0
}
   2fb5e:	bd38      	pop	{r3, r4, r5, pc}
		errcode = sdc_hci_data_get(p_hci_buffer);
   2fb60:	4620      	mov	r0, r4
   2fb62:	f7de fa64 	bl	e02e <sdc_hci_data_get>
   2fb66:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   2fb68:	f7f2 ffae 	bl	22ac8 <multithreading_lock_release>
   2fb6c:	e7f5      	b.n	2fb5a <fetch_and_process_acl_data+0x14>
	data_packet_process(p_hci_buffer);
   2fb6e:	4620      	mov	r0, r4
   2fb70:	f7f2 fff4 	bl	22b5c <data_packet_process>
	return true;
   2fb74:	2001      	movs	r0, #1
   2fb76:	e7f2      	b.n	2fb5e <fetch_and_process_acl_data+0x18>

0002fb78 <receive_work_handler>:
{
   2fb78:	b508      	push	{r3, lr}
	hci_driver_receive_process();
   2fb7a:	f7f3 f873 	bl	22c64 <hci_driver_receive_process>
}
   2fb7e:	bd08      	pop	{r3, pc}

0002fb80 <hci_driver_send>:
{
   2fb80:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   2fb82:	8983      	ldrh	r3, [r0, #12]
   2fb84:	b183      	cbz	r3, 2fba8 <hci_driver_send+0x28>
   2fb86:	4604      	mov	r4, r0
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   2fb88:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   2fb8a:	b14b      	cbz	r3, 2fba0 <hci_driver_send+0x20>
   2fb8c:	2b02      	cmp	r3, #2
   2fb8e:	d10e      	bne.n	2fbae <hci_driver_send+0x2e>
		err = acl_handle(buf);
   2fb90:	f7f3 f890 	bl	22cb4 <acl_handle>
   2fb94:	4605      	mov	r5, r0
	if (!err) {
   2fb96:	b965      	cbnz	r5, 2fbb2 <hci_driver_send+0x32>
		net_buf_unref(buf);
   2fb98:	4620      	mov	r0, r4
   2fb9a:	f7f0 fbf3 	bl	20384 <net_buf_unref>
   2fb9e:	e008      	b.n	2fbb2 <hci_driver_send+0x32>
		err = cmd_handle(buf);
   2fba0:	f7f3 f8a6 	bl	22cf0 <cmd_handle>
   2fba4:	4605      	mov	r5, r0
		break;
   2fba6:	e7f6      	b.n	2fb96 <hci_driver_send+0x16>
		return -EINVAL;
   2fba8:	f06f 0515 	mvn.w	r5, #21
   2fbac:	e001      	b.n	2fbb2 <hci_driver_send+0x32>
	switch (type) {
   2fbae:	f06f 0515 	mvn.w	r5, #21
}
   2fbb2:	4628      	mov	r0, r5
   2fbb4:	bd38      	pop	{r3, r4, r5, pc}

0002fbb6 <configure_supported_features>:
{
   2fbb6:	b508      	push	{r3, lr}
			err = sdc_support_adv();
   2fbb8:	f7d5 fd06 	bl	55c8 <sdc_support_adv>
			if (err) {
   2fbbc:	b960      	cbnz	r0, 2fbd8 <configure_supported_features+0x22>
		err = sdc_support_peripheral();
   2fbbe:	f7d5 fd35 	bl	562c <sdc_support_peripheral>
		if (err) {
   2fbc2:	b960      	cbnz	r0, 2fbde <configure_supported_features+0x28>
			err = sdc_support_dle_peripheral();
   2fbc4:	f7d5 fd10 	bl	55e8 <sdc_support_dle_peripheral>
			if (err) {
   2fbc8:	b960      	cbnz	r0, 2fbe4 <configure_supported_features+0x2e>
		err = sdc_support_le_2m_phy();
   2fbca:	f7d5 fd1d 	bl	5608 <sdc_support_le_2m_phy>
		if (err) {
   2fbce:	b960      	cbnz	r0, 2fbea <configure_supported_features+0x34>
			err = sdc_support_phy_update_peripheral();
   2fbd0:	f7d5 fd3c 	bl	564c <sdc_support_phy_update_peripheral>
			if (err) {
   2fbd4:	b960      	cbnz	r0, 2fbf0 <configure_supported_features+0x3a>
}
   2fbd6:	bd08      	pop	{r3, pc}
				return -ENOTSUP;
   2fbd8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2fbdc:	e7fb      	b.n	2fbd6 <configure_supported_features+0x20>
			return -ENOTSUP;
   2fbde:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2fbe2:	e7f8      	b.n	2fbd6 <configure_supported_features+0x20>
				return -ENOTSUP;
   2fbe4:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2fbe8:	e7f5      	b.n	2fbd6 <configure_supported_features+0x20>
			return -ENOTSUP;
   2fbea:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2fbee:	e7f2      	b.n	2fbd6 <configure_supported_features+0x20>
				return -ENOTSUP;
   2fbf0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2fbf4:	e7ef      	b.n	2fbd6 <configure_supported_features+0x20>

0002fbf6 <command_generates_command_complete_event>:
	switch (hci_opcode) {
   2fbf6:	f242 0344 	movw	r3, #8260	; 0x2044
   2fbfa:	4298      	cmp	r0, r3
   2fbfc:	d834      	bhi.n	2fc68 <command_generates_command_complete_event+0x72>
   2fbfe:	f242 030d 	movw	r3, #8205	; 0x200d
   2fc02:	4298      	cmp	r0, r3
   2fc04:	d322      	bcc.n	2fc4c <command_generates_command_complete_event+0x56>
   2fc06:	f5a0 5000 	sub.w	r0, r0, #8192	; 0x2000
   2fc0a:	380d      	subs	r0, #13
   2fc0c:	2837      	cmp	r0, #55	; 0x37
   2fc0e:	d82f      	bhi.n	2fc70 <command_generates_command_complete_event+0x7a>
   2fc10:	e8df f000 	tbb	[pc, r0]
   2fc14:	2e2e2e28 	.word	0x2e2e2e28
   2fc18:	2e282e2e 	.word	0x2e282e2e
   2fc1c:	2e2e282e 	.word	0x2e2e282e
   2fc20:	2e2e2e28 	.word	0x2e2e2e28
   2fc24:	2e2e2e2e 	.word	0x2e2e2e2e
   2fc28:	2e2e2e2e 	.word	0x2e2e2e2e
   2fc2c:	2e2e2828 	.word	0x2e2e2828
   2fc30:	2e2e2e2e 	.word	0x2e2e2e2e
   2fc34:	2e2e2e2e 	.word	0x2e2e2e2e
   2fc38:	2e2e282e 	.word	0x2e2e282e
   2fc3c:	2e2e2e2e 	.word	0x2e2e2e2e
   2fc40:	2e2e2e2e 	.word	0x2e2e2e2e
   2fc44:	2e2e2e2e 	.word	0x2e2e2e2e
   2fc48:	28282e2e 	.word	0x28282e2e
   2fc4c:	f240 4306 	movw	r3, #1030	; 0x406
   2fc50:	4298      	cmp	r0, r3
   2fc52:	d00b      	beq.n	2fc6c <command_generates_command_complete_event+0x76>
   2fc54:	f240 431d 	movw	r3, #1053	; 0x41d
   2fc58:	4298      	cmp	r0, r3
   2fc5a:	d001      	beq.n	2fc60 <command_generates_command_complete_event+0x6a>
		return true;
   2fc5c:	2001      	movs	r0, #1
   2fc5e:	4770      	bx	lr
	switch (hci_opcode) {
   2fc60:	2000      	movs	r0, #0
   2fc62:	4770      	bx	lr
   2fc64:	2000      	movs	r0, #0
   2fc66:	4770      	bx	lr
		return true;
   2fc68:	2001      	movs	r0, #1
   2fc6a:	4770      	bx	lr
	switch (hci_opcode) {
   2fc6c:	2000      	movs	r0, #0
   2fc6e:	4770      	bx	lr
		return true;
   2fc70:	2001      	movs	r0, #1
}
   2fc72:	4770      	bx	lr

0002fc74 <encode_command_status>:
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   2fc74:	230f      	movs	r3, #15
   2fc76:	7003      	strb	r3, [r0, #0]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   2fc78:	2304      	movs	r3, #4
   2fc7a:	7043      	strb	r3, [r0, #1]
	evt_data->status = status_code;
   2fc7c:	7082      	strb	r2, [r0, #2]
	evt_data->ncmd = 1;
   2fc7e:	2301      	movs	r3, #1
   2fc80:	70c3      	strb	r3, [r0, #3]
	evt_data->opcode = hci_opcode;
   2fc82:	8081      	strh	r1, [r0, #4]
}
   2fc84:	4770      	bx	lr

0002fc86 <encode_command_complete_header>:
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   2fc86:	f04f 0c0e 	mov.w	ip, #14
   2fc8a:	f880 c000 	strb.w	ip, [r0]
	evt_hdr->len = param_length;
   2fc8e:	7042      	strb	r2, [r0, #1]
	evt_data->ncmd = 1;
   2fc90:	2201      	movs	r2, #1
   2fc92:	7082      	strb	r2, [r0, #2]
	evt_data->opcode = hci_opcode;
   2fc94:	f8a0 1003 	strh.w	r1, [r0, #3]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   2fc98:	7143      	strb	r3, [r0, #5]
}
   2fc9a:	4770      	bx	lr

0002fc9c <le_read_supported_states>:
	*buf = states1;
   2fc9c:	238f      	movs	r3, #143	; 0x8f
   2fc9e:	7003      	strb	r3, [r0, #0]
	*(buf + 4) = states2;
   2fca0:	23c0      	movs	r3, #192	; 0xc0
   2fca2:	7103      	strb	r3, [r0, #4]
}
   2fca4:	4770      	bx	lr

0002fca6 <status_param_cmd_put>:
}
   2fca6:	2001      	movs	r0, #1
   2fca8:	4770      	bx	lr

0002fcaa <link_control_cmd_put>:
{
   2fcaa:	b508      	push	{r3, lr}
	return ((uint16_t)src[1] << 8) | src[0];
   2fcac:	7842      	ldrb	r2, [r0, #1]
   2fcae:	f810 3b03 	ldrb.w	r3, [r0], #3
   2fcb2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2fcb6:	b21b      	sxth	r3, r3
	switch (opcode)	{
   2fcb8:	f240 4206 	movw	r2, #1030	; 0x406
   2fcbc:	4293      	cmp	r3, r2
   2fcbe:	d005      	beq.n	2fccc <link_control_cmd_put+0x22>
   2fcc0:	f240 421d 	movw	r2, #1053	; 0x41d
   2fcc4:	4293      	cmp	r3, r2
   2fcc6:	d004      	beq.n	2fcd2 <link_control_cmd_put+0x28>
   2fcc8:	2001      	movs	r0, #1
}
   2fcca:	bd08      	pop	{r3, pc}
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   2fccc:	f7de fae0 	bl	e290 <sdc_hci_cmd_lc_disconnect>
   2fcd0:	e7fb      	b.n	2fcca <link_control_cmd_put+0x20>
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   2fcd2:	f7de fadf 	bl	e294 <sdc_hci_cmd_lc_read_remote_version_information>
   2fcd6:	e7f8      	b.n	2fcca <link_control_cmd_put+0x20>

0002fcd8 <controller_and_baseband_cmd_put>:
{
   2fcd8:	b508      	push	{r3, lr}
   2fcda:	4684      	mov	ip, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   2fcdc:	3003      	adds	r0, #3
   2fcde:	f89c e001 	ldrb.w	lr, [ip, #1]
   2fce2:	f89c 3000 	ldrb.w	r3, [ip]
   2fce6:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
   2fcea:	b21b      	sxth	r3, r3
	switch (opcode)	{
   2fcec:	f640 4c63 	movw	ip, #3171	; 0xc63
   2fcf0:	4563      	cmp	r3, ip
   2fcf2:	d02c      	beq.n	2fd4e <controller_and_baseband_cmd_put+0x76>
   2fcf4:	f101 0106 	add.w	r1, r1, #6
   2fcf8:	dc16      	bgt.n	2fd28 <controller_and_baseband_cmd_put+0x50>
   2fcfa:	f640 4c03 	movw	ip, #3075	; 0xc03
   2fcfe:	4563      	cmp	r3, ip
   2fd00:	d022      	beq.n	2fd48 <controller_and_baseband_cmd_put+0x70>
   2fd02:	f640 4c2d 	movw	ip, #3117	; 0xc2d
   2fd06:	4563      	cmp	r3, ip
   2fd08:	d105      	bne.n	2fd16 <controller_and_baseband_cmd_put+0x3e>
		*param_length_out += sizeof(sdc_hci_cmd_cb_read_transmit_power_level_return_t);
   2fd0a:	7813      	ldrb	r3, [r2, #0]
   2fd0c:	3303      	adds	r3, #3
   2fd0e:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   2fd10:	f7de f9bc 	bl	e08c <sdc_hci_cmd_cb_read_transmit_power_level>
   2fd14:	e007      	b.n	2fd26 <controller_and_baseband_cmd_put+0x4e>
	switch (opcode)	{
   2fd16:	f640 4201 	movw	r2, #3073	; 0xc01
   2fd1a:	4293      	cmp	r3, r2
   2fd1c:	d102      	bne.n	2fd24 <controller_and_baseband_cmd_put+0x4c>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   2fd1e:	f7de f9b7 	bl	e090 <sdc_hci_cmd_cb_set_event_mask>
   2fd22:	e000      	b.n	2fd26 <controller_and_baseband_cmd_put+0x4e>
	switch (opcode)	{
   2fd24:	2001      	movs	r0, #1
}
   2fd26:	bd08      	pop	{r3, pc}
	switch (opcode)	{
   2fd28:	f640 4c7b 	movw	ip, #3195	; 0xc7b
   2fd2c:	4563      	cmp	r3, ip
   2fd2e:	d011      	beq.n	2fd54 <controller_and_baseband_cmd_put+0x7c>
   2fd30:	f640 4c7c 	movw	ip, #3196	; 0xc7c
   2fd34:	4563      	cmp	r3, ip
   2fd36:	d105      	bne.n	2fd44 <controller_and_baseband_cmd_put+0x6c>
		*param_length_out +=
   2fd38:	7813      	ldrb	r3, [r2, #0]
   2fd3a:	3302      	adds	r3, #2
   2fd3c:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   2fd3e:	f7de f9b1 	bl	e0a4 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
   2fd42:	e7f0      	b.n	2fd26 <controller_and_baseband_cmd_put+0x4e>
	switch (opcode)	{
   2fd44:	2001      	movs	r0, #1
   2fd46:	e7ee      	b.n	2fd26 <controller_and_baseband_cmd_put+0x4e>
		return sdc_hci_cmd_cb_reset();
   2fd48:	f7d5 fdc0 	bl	58cc <sdc_hci_cmd_cb_reset>
   2fd4c:	e7eb      	b.n	2fd26 <controller_and_baseband_cmd_put+0x4e>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   2fd4e:	f7de f9a4 	bl	e09a <sdc_hci_cmd_cb_set_event_mask_page_2>
   2fd52:	e7e8      	b.n	2fd26 <controller_and_baseband_cmd_put+0x4e>
		*param_length_out +=
   2fd54:	7813      	ldrb	r3, [r2, #0]
   2fd56:	3304      	adds	r3, #4
   2fd58:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   2fd5a:	f7de f995 	bl	e088 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
   2fd5e:	e7e2      	b.n	2fd26 <controller_and_baseband_cmd_put+0x4e>

0002fd60 <supported_commands>:
{
   2fd60:	b510      	push	{r4, lr}
   2fd62:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
   2fd64:	222f      	movs	r2, #47	; 0x2f
   2fd66:	2100      	movs	r1, #0
   2fd68:	f000 fff7 	bl	30d5a <memset>
	cmds->hci_disconnect = 1;
   2fd6c:	7823      	ldrb	r3, [r4, #0]
   2fd6e:	f043 0320 	orr.w	r3, r3, #32
   2fd72:	7023      	strb	r3, [r4, #0]
	cmds->hci_read_remote_version_information = 1;
   2fd74:	78a3      	ldrb	r3, [r4, #2]
   2fd76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2fd7a:	70a3      	strb	r3, [r4, #2]
	cmds->hci_set_event_mask = 1;
   2fd7c:	7963      	ldrb	r3, [r4, #5]
   2fd7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2fd82:	7163      	strb	r3, [r4, #5]
	cmds->hci_reset = 1;
   2fd84:	b2db      	uxtb	r3, r3
   2fd86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2fd8a:	7163      	strb	r3, [r4, #5]
	cmds->hci_read_transmit_power_level = 1;
   2fd8c:	7aa3      	ldrb	r3, [r4, #10]
   2fd8e:	f043 0304 	orr.w	r3, r3, #4
   2fd92:	72a3      	strb	r3, [r4, #10]
	cmds->hci_read_local_version_information = 1;
   2fd94:	7ba3      	ldrb	r3, [r4, #14]
   2fd96:	f043 0308 	orr.w	r3, r3, #8
   2fd9a:	73a3      	strb	r3, [r4, #14]
	cmds->hci_read_local_supported_features = 1;
   2fd9c:	b2db      	uxtb	r3, r3
   2fd9e:	f043 0320 	orr.w	r3, r3, #32
   2fda2:	73a3      	strb	r3, [r4, #14]
	cmds->hci_read_bd_addr = 1;
   2fda4:	7be3      	ldrb	r3, [r4, #15]
   2fda6:	f043 0302 	orr.w	r3, r3, #2
   2fdaa:	73e3      	strb	r3, [r4, #15]
	cmds->hci_set_event_mask_page_2 = 1;
   2fdac:	7da3      	ldrb	r3, [r4, #22]
   2fdae:	f043 0304 	orr.w	r3, r3, #4
   2fdb2:	75a3      	strb	r3, [r4, #22]
	cmds->hci_le_set_event_mask = 1;
   2fdb4:	7e63      	ldrb	r3, [r4, #25]
   2fdb6:	f043 0301 	orr.w	r3, r3, #1
   2fdba:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_read_buffer_size_v1 = 1;
   2fdbc:	b2db      	uxtb	r3, r3
   2fdbe:	f043 0302 	orr.w	r3, r3, #2
   2fdc2:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_read_local_supported_features = 1;
   2fdc4:	b2db      	uxtb	r3, r3
   2fdc6:	f043 0304 	orr.w	r3, r3, #4
   2fdca:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_set_random_address = 1;
   2fdcc:	b2db      	uxtb	r3, r3
   2fdce:	f043 0310 	orr.w	r3, r3, #16
   2fdd2:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_set_advertising_parameters = 1;
   2fdd4:	b2db      	uxtb	r3, r3
   2fdd6:	f043 0320 	orr.w	r3, r3, #32
   2fdda:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_read_advertising_physical_channel_tx_power = 1;
   2fddc:	b2db      	uxtb	r3, r3
   2fdde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2fde2:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_set_advertising_data = 1;
   2fde4:	b2db      	uxtb	r3, r3
   2fde6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2fdea:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_set_scan_response_data = 1;
   2fdec:	7ea3      	ldrb	r3, [r4, #26]
   2fdee:	f043 0301 	orr.w	r3, r3, #1
   2fdf2:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_set_advertising_enable = 1;
   2fdf4:	b2db      	uxtb	r3, r3
   2fdf6:	f043 0302 	orr.w	r3, r3, #2
   2fdfa:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_read_filter_accept_list_size = 1;
   2fdfc:	b2db      	uxtb	r3, r3
   2fdfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2fe02:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_clear_filter_accept_list = 1;
   2fe04:	b2db      	uxtb	r3, r3
   2fe06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2fe0a:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_add_device_to_filter_accept_list = 1;
   2fe0c:	7ee3      	ldrb	r3, [r4, #27]
   2fe0e:	f043 0301 	orr.w	r3, r3, #1
   2fe12:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_remove_device_from_filter_accept_list = 1;
   2fe14:	b2db      	uxtb	r3, r3
   2fe16:	f043 0302 	orr.w	r3, r3, #2
   2fe1a:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_read_channel_map = 1;
   2fe1c:	b2db      	uxtb	r3, r3
   2fe1e:	f043 0310 	orr.w	r3, r3, #16
   2fe22:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_read_remote_features = 1;
   2fe24:	b2db      	uxtb	r3, r3
   2fe26:	f043 0320 	orr.w	r3, r3, #32
   2fe2a:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_encrypt = 1;
   2fe2c:	b2db      	uxtb	r3, r3
   2fe2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2fe32:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_rand = 1;
   2fe34:	b2db      	uxtb	r3, r3
   2fe36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2fe3a:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_long_term_key_request_reply = 1;
   2fe3c:	7f23      	ldrb	r3, [r4, #28]
   2fe3e:	f043 0302 	orr.w	r3, r3, #2
   2fe42:	7723      	strb	r3, [r4, #28]
	cmds->hci_le_long_term_key_request_negative_reply = 1;
   2fe44:	b2db      	uxtb	r3, r3
   2fe46:	f043 0304 	orr.w	r3, r3, #4
   2fe4a:	7723      	strb	r3, [r4, #28]
	cmds->hci_le_read_supported_states = 1;
   2fe4c:	b2db      	uxtb	r3, r3
   2fe4e:	f043 0308 	orr.w	r3, r3, #8
   2fe52:	7723      	strb	r3, [r4, #28]
	cmds->hci_le_receiver_test_v1 = 1;
   2fe54:	b2db      	uxtb	r3, r3
   2fe56:	f043 0310 	orr.w	r3, r3, #16
   2fe5a:	7723      	strb	r3, [r4, #28]
	cmds->hci_le_transmitter_test_v1 = 1;
   2fe5c:	b2db      	uxtb	r3, r3
   2fe5e:	f043 0320 	orr.w	r3, r3, #32
   2fe62:	7723      	strb	r3, [r4, #28]
	cmds->hci_le_test_end = 1;
   2fe64:	b2db      	uxtb	r3, r3
   2fe66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2fe6a:	7723      	strb	r3, [r4, #28]
	cmds->hci_read_authenticated_payload_timeout = 1;
   2fe6c:	f894 3020 	ldrb.w	r3, [r4, #32]
   2fe70:	f043 0310 	orr.w	r3, r3, #16
   2fe74:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_write_authenticated_payload_timeout = 1;
   2fe78:	b2db      	uxtb	r3, r3
   2fe7a:	f043 0320 	orr.w	r3, r3, #32
   2fe7e:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_data_length = 1;
   2fe82:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   2fe86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2fe8a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_read_suggested_default_data_length = 1;
   2fe8e:	b2db      	uxtb	r3, r3
   2fe90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2fe94:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_write_suggested_default_data_length = 1;
   2fe98:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   2fe9c:	f043 0301 	orr.w	r3, r3, #1
   2fea0:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_read_maximum_data_length = 1;
   2fea4:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   2fea8:	f043 0308 	orr.w	r3, r3, #8
   2feac:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_read_phy = 1;
   2feb0:	b2db      	uxtb	r3, r3
   2feb2:	f043 0310 	orr.w	r3, r3, #16
   2feb6:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_set_default_phy = 1;
   2feba:	b2db      	uxtb	r3, r3
   2febc:	f043 0320 	orr.w	r3, r3, #32
   2fec0:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_set_phy = 1;
   2fec4:	b2db      	uxtb	r3, r3
   2fec6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2feca:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_receiver_test_v2 = 1;
   2fece:	b2db      	uxtb	r3, r3
   2fed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2fed4:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_transmitter_test_v2 = 1;
   2fed8:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   2fedc:	f043 0301 	orr.w	r3, r3, #1
   2fee0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	cmds->hci_le_read_transmit_power = 1;
   2fee4:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   2fee8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2feec:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	cmds->hci_le_read_local_p256_public_key = 1;
   2fef0:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   2fef4:	f043 0302 	orr.w	r3, r3, #2
   2fef8:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_generate_dhkey_v1 = 1;
   2fefc:	b2db      	uxtb	r3, r3
   2fefe:	f043 0304 	orr.w	r3, r3, #4
   2ff02:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_generate_dhkey_v2 = 1;
   2ff06:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   2ff0a:	f043 0304 	orr.w	r3, r3, #4
   2ff0e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
}
   2ff12:	bd10      	pop	{r4, pc}

0002ff14 <supported_features>:
   2ff14:	2300      	movs	r3, #0
   2ff16:	6003      	str	r3, [r0, #0]
   2ff18:	6043      	str	r3, [r0, #4]
	features->bdedr_not_supported = 1;
   2ff1a:	7903      	ldrb	r3, [r0, #4]
   2ff1c:	f043 0320 	orr.w	r3, r3, #32
   2ff20:	7103      	strb	r3, [r0, #4]
	features->le_supported = 1;
   2ff22:	b2db      	uxtb	r3, r3
   2ff24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2ff28:	7103      	strb	r3, [r0, #4]
}
   2ff2a:	4770      	bx	lr

0002ff2c <info_param_cmd_put>:
{
   2ff2c:	b508      	push	{r3, lr}
   2ff2e:	4684      	mov	ip, r0
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   2ff30:	1d88      	adds	r0, r1, #6
   2ff32:	f89c e001 	ldrb.w	lr, [ip, #1]
   2ff36:	f89c 3000 	ldrb.w	r3, [ip]
   2ff3a:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
   2ff3e:	b21b      	sxth	r3, r3
	switch (opcode)	{
   2ff40:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   2ff44:	3b01      	subs	r3, #1
   2ff46:	2b08      	cmp	r3, #8
   2ff48:	d820      	bhi.n	2ff8c <info_param_cmd_put+0x60>
   2ff4a:	e8df f003 	tbb	[pc, r3]
   2ff4e:	0b05      	.short	0x0b05
   2ff50:	1f1f1f12 	.word	0x1f1f1f12
   2ff54:	1f1f      	.short	0x1f1f
   2ff56:	19          	.byte	0x19
   2ff57:	00          	.byte	0x00
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   2ff58:	7813      	ldrb	r3, [r2, #0]
   2ff5a:	3308      	adds	r3, #8
   2ff5c:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   2ff5e:	f7de f95a 	bl	e216 <sdc_hci_cmd_ip_read_local_version_information>
   2ff62:	e014      	b.n	2ff8e <info_param_cmd_put+0x62>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   2ff64:	7813      	ldrb	r3, [r2, #0]
   2ff66:	3340      	adds	r3, #64	; 0x40
   2ff68:	7013      	strb	r3, [r2, #0]
		supported_commands((void *)event_out_params);
   2ff6a:	f7ff fef9 	bl	2fd60 <supported_commands>
		return 0;
   2ff6e:	2000      	movs	r0, #0
   2ff70:	e00d      	b.n	2ff8e <info_param_cmd_put+0x62>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   2ff72:	7813      	ldrb	r3, [r2, #0]
   2ff74:	3308      	adds	r3, #8
   2ff76:	7013      	strb	r3, [r2, #0]
		supported_features((void *)event_out_params);
   2ff78:	f7ff ffcc 	bl	2ff14 <supported_features>
		return 0;
   2ff7c:	2000      	movs	r0, #0
   2ff7e:	e006      	b.n	2ff8e <info_param_cmd_put+0x62>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   2ff80:	7813      	ldrb	r3, [r2, #0]
   2ff82:	3306      	adds	r3, #6
   2ff84:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   2ff86:	f7de f944 	bl	e212 <sdc_hci_cmd_ip_read_bd_addr>
   2ff8a:	e000      	b.n	2ff8e <info_param_cmd_put+0x62>
	switch (opcode)	{
   2ff8c:	2001      	movs	r0, #1
}
   2ff8e:	bd08      	pop	{r3, pc}

0002ff90 <le_supported_features>:
   2ff90:	2300      	movs	r3, #0
   2ff92:	6003      	str	r3, [r0, #0]
   2ff94:	7103      	strb	r3, [r0, #4]
	features->le_encryption = 1;
   2ff96:	7803      	ldrb	r3, [r0, #0]
   2ff98:	f043 0301 	orr.w	r3, r3, #1
   2ff9c:	7003      	strb	r3, [r0, #0]
	features->extended_reject_indication = 1;
   2ff9e:	b2db      	uxtb	r3, r3
   2ffa0:	f043 0304 	orr.w	r3, r3, #4
   2ffa4:	7003      	strb	r3, [r0, #0]
	features->slave_initiated_features_exchange = 1;
   2ffa6:	b2db      	uxtb	r3, r3
   2ffa8:	f043 0308 	orr.w	r3, r3, #8
   2ffac:	7003      	strb	r3, [r0, #0]
	features->le_ping = 1;
   2ffae:	b2db      	uxtb	r3, r3
   2ffb0:	f043 0310 	orr.w	r3, r3, #16
   2ffb4:	7003      	strb	r3, [r0, #0]
	features->le_data_packet_length_extension = 1;
   2ffb6:	b2db      	uxtb	r3, r3
   2ffb8:	f043 0320 	orr.w	r3, r3, #32
   2ffbc:	7003      	strb	r3, [r0, #0]
	features->le_2m_phy = 1;
   2ffbe:	7843      	ldrb	r3, [r0, #1]
   2ffc0:	f043 0301 	orr.w	r3, r3, #1
   2ffc4:	7043      	strb	r3, [r0, #1]
	features->channel_selection_algorithm_2 = 1;
   2ffc6:	b2db      	uxtb	r3, r3
   2ffc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2ffcc:	7043      	strb	r3, [r0, #1]
}
   2ffce:	4770      	bx	lr

0002ffd0 <vs_zephyr_supported_commands>:
   2ffd0:	2300      	movs	r3, #0
   2ffd2:	8003      	strh	r3, [r0, #0]
	cmds->read_version_info = 1;
   2ffd4:	7803      	ldrb	r3, [r0, #0]
   2ffd6:	f043 0301 	orr.w	r3, r3, #1
   2ffda:	7003      	strb	r3, [r0, #0]
	cmds->read_supported_commands = 1;
   2ffdc:	b2db      	uxtb	r3, r3
   2ffde:	f043 0302 	orr.w	r3, r3, #2
   2ffe2:	7003      	strb	r3, [r0, #0]
	cmds->write_bd_addr = 1;
   2ffe4:	b2db      	uxtb	r3, r3
   2ffe6:	f043 0320 	orr.w	r3, r3, #32
   2ffea:	7003      	strb	r3, [r0, #0]
	cmds->read_static_addresses = 1;
   2ffec:	7843      	ldrb	r3, [r0, #1]
   2ffee:	f043 0301 	orr.w	r3, r3, #1
   2fff2:	7043      	strb	r3, [r0, #1]
	cmds->read_key_hierarchy_roots = 1;
   2fff4:	b2db      	uxtb	r3, r3
   2fff6:	f043 0302 	orr.w	r3, r3, #2
   2fffa:	7043      	strb	r3, [r0, #1]
	cmds->read_chip_temperature = 1;
   2fffc:	b2db      	uxtb	r3, r3
   2fffe:	f043 0304 	orr.w	r3, r3, #4
   30002:	7043      	strb	r3, [r0, #1]
}
   30004:	4770      	bx	lr

00030006 <vs_supported_commands>:
   30006:	2300      	movs	r3, #0
   30008:	8003      	strh	r3, [r0, #0]
	cmds->read_supported_vs_commands = 1;
   3000a:	7803      	ldrb	r3, [r0, #0]
   3000c:	f043 0301 	orr.w	r3, r3, #1
   30010:	7003      	strb	r3, [r0, #0]
	cmds->llpm_mode_set = 1;
   30012:	b2db      	uxtb	r3, r3
   30014:	f043 0302 	orr.w	r3, r3, #2
   30018:	7003      	strb	r3, [r0, #0]
	cmds->conn_update = 1;
   3001a:	b2db      	uxtb	r3, r3
   3001c:	f043 0304 	orr.w	r3, r3, #4
   30020:	7003      	strb	r3, [r0, #0]
	cmds->conn_event_extend = 1;
   30022:	b2db      	uxtb	r3, r3
   30024:	f043 0308 	orr.w	r3, r3, #8
   30028:	7003      	strb	r3, [r0, #0]
	cmds->qos_conn_event_report_enable = 1;
   3002a:	b2db      	uxtb	r3, r3
   3002c:	f043 0310 	orr.w	r3, r3, #16
   30030:	7003      	strb	r3, [r0, #0]
	cmds->event_length_set = 1;
   30032:	b2db      	uxtb	r3, r3
   30034:	f043 0320 	orr.w	r3, r3, #32
   30038:	7003      	strb	r3, [r0, #0]
}
   3003a:	4770      	bx	lr

0003003c <le_controller_cmd_put>:
{
   3003c:	b508      	push	{r3, lr}
   3003e:	4684      	mov	ip, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   30040:	3003      	adds	r0, #3
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   30042:	3106      	adds	r1, #6
   30044:	f89c e001 	ldrb.w	lr, [ip, #1]
   30048:	f89c 3000 	ldrb.w	r3, [ip]
   3004c:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
   30050:	b21b      	sxth	r3, r3
	switch (opcode)	{
   30052:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
   30056:	3b01      	subs	r3, #1
   30058:	2b5d      	cmp	r3, #93	; 0x5d
   3005a:	f200 80c6 	bhi.w	301ea <le_controller_cmd_put+0x1ae>
   3005e:	e8df f003 	tbb	[pc, r3]
   30062:	322f      	.short	0x322f
   30064:	4441c439 	.word	0x4441c439
   30068:	54514e47 	.word	0x54514e47
   3006c:	c4c4c4c4 	.word	0xc4c4c4c4
   30070:	64615e57 	.word	0x64615e57
   30074:	6d67c4c4 	.word	0x6d67c4c4
   30078:	7dc47670 	.word	0x7dc47670
   3007c:	c4c48983 	.word	0xc4c48983
   30080:	91c4c4c4 	.word	0x91c4c4c4
   30084:	a4a19e97 	.word	0xa4a19e97
   30088:	c4c4c4c4 	.word	0xc4c4c4c4
   3008c:	c4c4c4c4 	.word	0xc4c4c4c4
   30090:	bab7b1aa 	.word	0xbab7b1aa
   30094:	c4c4c4c4 	.word	0xc4c4c4c4
   30098:	c4c4c4c4 	.word	0xc4c4c4c4
   3009c:	c4c4c4c4 	.word	0xc4c4c4c4
   300a0:	c4c4c4c4 	.word	0xc4c4c4c4
   300a4:	c4c4c4c4 	.word	0xc4c4c4c4
   300a8:	c4c4c4c4 	.word	0xc4c4c4c4
   300ac:	c4c4c4bd 	.word	0xc4c4c4bd
   300b0:	c4c4c4c4 	.word	0xc4c4c4c4
   300b4:	c4c4c4c4 	.word	0xc4c4c4c4
   300b8:	c4c4c4c4 	.word	0xc4c4c4c4
   300bc:	a7c4c4c4 	.word	0xa7c4c4c4
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   300c0:	f7de f8d9 	bl	e276 <sdc_hci_cmd_le_set_event_mask>
   300c4:	e092      	b.n	301ec <le_controller_cmd_put+0x1b0>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   300c6:	7813      	ldrb	r3, [r2, #0]
   300c8:	3303      	adds	r3, #3
   300ca:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   300cc:	4608      	mov	r0, r1
   300ce:	f7de f8b6 	bl	e23e <sdc_hci_cmd_le_read_buffer_size>
   300d2:	e08b      	b.n	301ec <le_controller_cmd_put+0x1b0>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   300d4:	7813      	ldrb	r3, [r2, #0]
   300d6:	3308      	adds	r3, #8
   300d8:	7013      	strb	r3, [r2, #0]
		le_supported_features((void *)event_out_params);
   300da:	4608      	mov	r0, r1
   300dc:	f7ff ff58 	bl	2ff90 <le_supported_features>
		return 0;
   300e0:	2000      	movs	r0, #0
   300e2:	e083      	b.n	301ec <le_controller_cmd_put+0x1b0>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   300e4:	f7de f8ce 	bl	e284 <sdc_hci_cmd_le_set_random_address>
   300e8:	e080      	b.n	301ec <le_controller_cmd_put+0x1b0>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
   300ea:	f7de f8be 	bl	e26a <sdc_hci_cmd_le_set_adv_params>
   300ee:	e07d      	b.n	301ec <le_controller_cmd_put+0x1b0>
		*param_length_out +=
   300f0:	7813      	ldrb	r3, [r2, #0]
   300f2:	3301      	adds	r3, #1
   300f4:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   300f6:	4608      	mov	r0, r1
   300f8:	f7de f89f 	bl	e23a <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
   300fc:	e076      	b.n	301ec <le_controller_cmd_put+0x1b0>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
   300fe:	f7de f8b0 	bl	e262 <sdc_hci_cmd_le_set_adv_data>
   30102:	e073      	b.n	301ec <le_controller_cmd_put+0x1b0>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
   30104:	f7de f8c0 	bl	e288 <sdc_hci_cmd_le_set_scan_response_data>
   30108:	e070      	b.n	301ec <le_controller_cmd_put+0x1b0>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
   3010a:	f7de f8ac 	bl	e266 <sdc_hci_cmd_le_set_adv_enable>
   3010e:	e06d      	b.n	301ec <le_controller_cmd_put+0x1b0>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
   30110:	7813      	ldrb	r3, [r2, #0]
   30112:	3301      	adds	r3, #1
   30114:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   30116:	4608      	mov	r0, r1
   30118:	f7de f895 	bl	e246 <sdc_hci_cmd_le_read_filter_accept_list_size>
   3011c:	e066      	b.n	301ec <le_controller_cmd_put+0x1b0>
		return sdc_hci_cmd_le_clear_filter_accept_list();
   3011e:	f7de f87e 	bl	e21e <sdc_hci_cmd_le_clear_filter_accept_list>
   30122:	e063      	b.n	301ec <le_controller_cmd_put+0x1b0>
		return sdc_hci_cmd_le_add_device_to_filter_accept_list((void *)cmd_params);
   30124:	f7de f879 	bl	e21a <sdc_hci_cmd_le_add_device_to_filter_accept_list>
   30128:	e060      	b.n	301ec <le_controller_cmd_put+0x1b0>
		return sdc_hci_cmd_le_remove_device_from_filter_accept_list((void *)cmd_params);
   3012a:	f7de f898 	bl	e25e <sdc_hci_cmd_le_remove_device_from_filter_accept_list>
   3012e:	e05d      	b.n	301ec <le_controller_cmd_put+0x1b0>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   30130:	7813      	ldrb	r3, [r2, #0]
   30132:	3307      	adds	r3, #7
   30134:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   30136:	f7de f884 	bl	e242 <sdc_hci_cmd_le_read_channel_map>
   3013a:	e057      	b.n	301ec <le_controller_cmd_put+0x1b0>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   3013c:	f7de f889 	bl	e252 <sdc_hci_cmd_le_read_remote_features>
   30140:	e054      	b.n	301ec <le_controller_cmd_put+0x1b0>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   30142:	7813      	ldrb	r3, [r2, #0]
   30144:	3310      	adds	r3, #16
   30146:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   30148:	f7de f86b 	bl	e222 <sdc_hci_cmd_le_encrypt>
   3014c:	e04e      	b.n	301ec <le_controller_cmd_put+0x1b0>
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   3014e:	7813      	ldrb	r3, [r2, #0]
   30150:	3308      	adds	r3, #8
   30152:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   30154:	4608      	mov	r0, r1
   30156:	f7de f86e 	bl	e236 <sdc_hci_cmd_le_rand>
   3015a:	e047      	b.n	301ec <le_controller_cmd_put+0x1b0>
		*param_length_out += sizeof(sdc_hci_cmd_le_long_term_key_request_reply_return_t);
   3015c:	7813      	ldrb	r3, [r2, #0]
   3015e:	3302      	adds	r3, #2
   30160:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   30162:	f7de f864 	bl	e22e <sdc_hci_cmd_le_long_term_key_request_reply>
   30166:	e041      	b.n	301ec <le_controller_cmd_put+0x1b0>
		*param_length_out +=
   30168:	7813      	ldrb	r3, [r2, #0]
   3016a:	3302      	adds	r3, #2
   3016c:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   3016e:	f7de f85a 	bl	e226 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
   30172:	e03b      	b.n	301ec <le_controller_cmd_put+0x1b0>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   30174:	7813      	ldrb	r3, [r2, #0]
   30176:	3308      	adds	r3, #8
   30178:	7013      	strb	r3, [r2, #0]
		le_read_supported_states((void *)event_out_params);
   3017a:	4608      	mov	r0, r1
   3017c:	f7ff fd8e 	bl	2fc9c <le_read_supported_states>
		return 0;
   30180:	2000      	movs	r0, #0
   30182:	e033      	b.n	301ec <le_controller_cmd_put+0x1b0>
		*param_length_out += sizeof(sdc_hci_cmd_le_set_data_length_return_t);
   30184:	7813      	ldrb	r3, [r2, #0]
   30186:	3302      	adds	r3, #2
   30188:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   3018a:	f7de f870 	bl	e26e <sdc_hci_cmd_le_set_data_length>
   3018e:	e02d      	b.n	301ec <le_controller_cmd_put+0x1b0>
		*param_length_out +=
   30190:	7813      	ldrb	r3, [r2, #0]
   30192:	3304      	adds	r3, #4
   30194:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   30196:	4608      	mov	r0, r1
   30198:	f7de f85d 	bl	e256 <sdc_hci_cmd_le_read_suggested_default_data_length>
   3019c:	e026      	b.n	301ec <le_controller_cmd_put+0x1b0>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   3019e:	f7de f875 	bl	e28c <sdc_hci_cmd_le_write_suggested_default_data_length>
   301a2:	e023      	b.n	301ec <le_controller_cmd_put+0x1b0>
		return hci_cmd_le_read_local_p256_public_key();
   301a4:	f7f3 f966 	bl	23474 <hci_cmd_le_read_local_p256_public_key>
   301a8:	e020      	b.n	301ec <le_controller_cmd_put+0x1b0>
		return hci_cmd_le_generate_dhkey((void *)cmd_params);
   301aa:	f000 f8ed 	bl	30388 <hci_cmd_le_generate_dhkey>
   301ae:	e01d      	b.n	301ec <le_controller_cmd_put+0x1b0>
		return hci_cmd_le_generate_dhkey_v2((void *)cmd_params);
   301b0:	f000 f8ef 	bl	30392 <hci_cmd_le_generate_dhkey_v2>
   301b4:	e01a      	b.n	301ec <le_controller_cmd_put+0x1b0>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   301b6:	7813      	ldrb	r3, [r2, #0]
   301b8:	3308      	adds	r3, #8
   301ba:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   301bc:	4608      	mov	r0, r1
   301be:	f7de f844 	bl	e24a <sdc_hci_cmd_le_read_max_data_length>
   301c2:	e013      	b.n	301ec <le_controller_cmd_put+0x1b0>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   301c4:	7813      	ldrb	r3, [r2, #0]
   301c6:	3304      	adds	r3, #4
   301c8:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   301ca:	f7de f840 	bl	e24e <sdc_hci_cmd_le_read_phy>
   301ce:	e00d      	b.n	301ec <le_controller_cmd_put+0x1b0>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   301d0:	f7de f84f 	bl	e272 <sdc_hci_cmd_le_set_default_phy>
   301d4:	e00a      	b.n	301ec <le_controller_cmd_put+0x1b0>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   301d6:	f7de f853 	bl	e280 <sdc_hci_cmd_le_set_phy>
   301da:	e007      	b.n	301ec <le_controller_cmd_put+0x1b0>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   301dc:	7813      	ldrb	r3, [r2, #0]
   301de:	3302      	adds	r3, #2
   301e0:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   301e2:	4608      	mov	r0, r1
   301e4:	f7de f839 	bl	e25a <sdc_hci_cmd_le_read_transmit_power>
   301e8:	e000      	b.n	301ec <le_controller_cmd_put+0x1b0>
	switch (opcode)	{
   301ea:	2001      	movs	r0, #1
}
   301ec:	bd08      	pop	{r3, pc}

000301ee <vs_cmd_put>:
{
   301ee:	b508      	push	{r3, lr}
   301f0:	4684      	mov	ip, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   301f2:	3003      	adds	r0, #3
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   301f4:	3106      	adds	r1, #6
   301f6:	f89c e001 	ldrb.w	lr, [ip, #1]
   301fa:	f89c 3000 	ldrb.w	r3, [ip]
   301fe:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
	switch (opcode)	{
   30202:	f64f 4c0a 	movw	ip, #64522	; 0xfc0a
   30206:	4563      	cmp	r3, ip
   30208:	d911      	bls.n	3022e <vs_cmd_put+0x40>
   3020a:	f64f 5c09 	movw	ip, #64777	; 0xfd09
   3020e:	4563      	cmp	r3, ip
   30210:	d861      	bhi.n	302d6 <vs_cmd_put+0xe8>
   30212:	f5b3 4f7d 	cmp.w	r3, #64768	; 0xfd00
   30216:	d31b      	bcc.n	30250 <vs_cmd_put+0x62>
   30218:	f5a3 437d 	sub.w	r3, r3, #64768	; 0xfd00
   3021c:	2b09      	cmp	r3, #9
   3021e:	d856      	bhi.n	302ce <vs_cmd_put+0xe0>
   30220:	e8df f003 	tbb	[pc, r3]
   30224:	4946433b 	.word	0x4946433b
   30228:	55554f4c 	.word	0x55554f4c
   3022c:	5255      	.short	0x5255
   3022e:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
   30232:	d801      	bhi.n	30238 <vs_cmd_put+0x4a>
   30234:	2001      	movs	r0, #1
}
   30236:	bd08      	pop	{r3, pc}
	switch (opcode)	{
   30238:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
   3023c:	3b01      	subs	r3, #1
   3023e:	2b09      	cmp	r3, #9
   30240:	d847      	bhi.n	302d2 <vs_cmd_put+0xe4>
   30242:	e8df f003 	tbb	[pc, r3]
   30246:	0e07      	.short	0x0e07
   30248:	27464646 	.word	0x27464646
   3024c:	20164646 	.word	0x20164646
   30250:	2001      	movs	r0, #1
   30252:	e7f0      	b.n	30236 <vs_cmd_put+0x48>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   30254:	7813      	ldrb	r3, [r2, #0]
   30256:	330c      	adds	r3, #12
   30258:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   3025a:	4608      	mov	r0, r1
   3025c:	f7d5 fb4a 	bl	58f4 <sdc_hci_cmd_vs_zephyr_read_version_info>
   30260:	e7e9      	b.n	30236 <vs_cmd_put+0x48>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   30262:	7813      	ldrb	r3, [r2, #0]
   30264:	3340      	adds	r3, #64	; 0x40
   30266:	7013      	strb	r3, [r2, #0]
		vs_zephyr_supported_commands((void *)event_out_params);
   30268:	4608      	mov	r0, r1
   3026a:	f7ff feb1 	bl	2ffd0 <vs_zephyr_supported_commands>
		return 0;
   3026e:	2000      	movs	r0, #0
   30270:	e7e1      	b.n	30236 <vs_cmd_put+0x48>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_static_addresses_return_t);
   30272:	7813      	ldrb	r3, [r2, #0]
   30274:	3301      	adds	r3, #1
   30276:	b2db      	uxtb	r3, r3
   30278:	7013      	strb	r3, [r2, #0]
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   3027a:	3316      	adds	r3, #22
   3027c:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   3027e:	4608      	mov	r0, r1
   30280:	f7dd ff76 	bl	e170 <sdc_hci_cmd_vs_zephyr_read_static_addresses>
   30284:	e7d7      	b.n	30236 <vs_cmd_put+0x48>
		*param_length_out +=
   30286:	7813      	ldrb	r3, [r2, #0]
   30288:	3320      	adds	r3, #32
   3028a:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   3028c:	4608      	mov	r0, r1
   3028e:	f7dd ff22 	bl	e0d6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
   30292:	e7d0      	b.n	30236 <vs_cmd_put+0x48>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   30294:	f7dd ffbb 	bl	e20e <sdc_hci_cmd_vs_zephyr_write_bd_addr>
   30298:	e7cd      	b.n	30236 <vs_cmd_put+0x48>
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   3029a:	7813      	ldrb	r3, [r2, #0]
   3029c:	3340      	adds	r3, #64	; 0x40
   3029e:	7013      	strb	r3, [r2, #0]
		vs_supported_commands((void *)event_out_params);
   302a0:	4608      	mov	r0, r1
   302a2:	f7ff feb0 	bl	30006 <vs_supported_commands>
		return 0;
   302a6:	2000      	movs	r0, #0
   302a8:	e7c5      	b.n	30236 <vs_cmd_put+0x48>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   302aa:	f7dd ff09 	bl	e0c0 <sdc_hci_cmd_vs_llpm_mode_set>
   302ae:	e7c2      	b.n	30236 <vs_cmd_put+0x48>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   302b0:	f7dd ff02 	bl	e0b8 <sdc_hci_cmd_vs_conn_update>
   302b4:	e7bf      	b.n	30236 <vs_cmd_put+0x48>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   302b6:	f7dd fef7 	bl	e0a8 <sdc_hci_cmd_vs_conn_event_extend>
   302ba:	e7bc      	b.n	30236 <vs_cmd_put+0x48>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   302bc:	f7dd ff06 	bl	e0cc <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   302c0:	e7b9      	b.n	30236 <vs_cmd_put+0x48>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   302c2:	f7dd fefb 	bl	e0bc <sdc_hci_cmd_vs_event_length_set>
   302c6:	e7b6      	b.n	30236 <vs_cmd_put+0x48>
		return sdc_hci_cmd_vs_peripheral_latency_mode_set((void *)cmd_params);
   302c8:	f7dd fefc 	bl	e0c4 <sdc_hci_cmd_vs_peripheral_latency_mode_set>
   302cc:	e7b3      	b.n	30236 <vs_cmd_put+0x48>
	switch (opcode)	{
   302ce:	2001      	movs	r0, #1
   302d0:	e7b1      	b.n	30236 <vs_cmd_put+0x48>
   302d2:	2001      	movs	r0, #1
   302d4:	e7af      	b.n	30236 <vs_cmd_put+0x48>
   302d6:	2001      	movs	r0, #1
   302d8:	e7ad      	b.n	30236 <vs_cmd_put+0x48>

000302da <cmd_put>:
{
   302da:	b570      	push	{r4, r5, r6, lr}
   302dc:	b082      	sub	sp, #8
   302de:	460e      	mov	r6, r1
   302e0:	7842      	ldrb	r2, [r0, #1]
   302e2:	7805      	ldrb	r5, [r0, #0]
   302e4:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   302e8:	2304      	movs	r3, #4
   302ea:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (BT_OGF(opcode)) {
   302ee:	0893      	lsrs	r3, r2, #2
   302f0:	2a23      	cmp	r2, #35	; 0x23
   302f2:	d80b      	bhi.n	3030c <cmd_put+0x32>
   302f4:	b21a      	sxth	r2, r3
   302f6:	2a00      	cmp	r2, #0
   302f8:	d03a      	beq.n	30370 <cmd_put+0x96>
   302fa:	3b01      	subs	r3, #1
   302fc:	2b07      	cmp	r3, #7
   302fe:	d839      	bhi.n	30374 <cmd_put+0x9a>
   30300:	e8df f003 	tbb	[pc, r3]
   30304:	241e381a 	.word	0x241e381a
   30308:	3038382a 	.word	0x3038382a
   3030c:	2b3f      	cmp	r3, #63	; 0x3f
   3030e:	d105      	bne.n	3031c <cmd_put+0x42>
		status = vs_cmd_put(cmd_in,
   30310:	f10d 0207 	add.w	r2, sp, #7
   30314:	f7ff ff6b 	bl	301ee <vs_cmd_put>
   30318:	4604      	mov	r4, r0
		break;
   3031a:	e000      	b.n	3031e <cmd_put+0x44>
	switch (BT_OGF(opcode)) {
   3031c:	2401      	movs	r4, #1
	if (!command_generates_command_complete_event(opcode) ||
   3031e:	4628      	mov	r0, r5
   30320:	f7ff fc69 	bl	2fbf6 <command_generates_command_complete_event>
   30324:	b108      	cbz	r0, 3032a <cmd_put+0x50>
   30326:	2c01      	cmp	r4, #1
   30328:	d126      	bne.n	30378 <cmd_put+0x9e>
		encode_command_status(raw_event_out, opcode, status);
   3032a:	4622      	mov	r2, r4
   3032c:	4629      	mov	r1, r5
   3032e:	4630      	mov	r0, r6
   30330:	f7ff fca0 	bl	2fc74 <encode_command_status>
}
   30334:	b002      	add	sp, #8
   30336:	bd70      	pop	{r4, r5, r6, pc}
		status = link_control_cmd_put(cmd_in);
   30338:	f7ff fcb7 	bl	2fcaa <link_control_cmd_put>
   3033c:	4604      	mov	r4, r0
		break;
   3033e:	e7ee      	b.n	3031e <cmd_put+0x44>
		status = controller_and_baseband_cmd_put(cmd_in,
   30340:	f10d 0207 	add.w	r2, sp, #7
   30344:	f7ff fcc8 	bl	2fcd8 <controller_and_baseband_cmd_put>
   30348:	4604      	mov	r4, r0
		break;
   3034a:	e7e8      	b.n	3031e <cmd_put+0x44>
		status = info_param_cmd_put(cmd_in,
   3034c:	f10d 0207 	add.w	r2, sp, #7
   30350:	f7ff fdec 	bl	2ff2c <info_param_cmd_put>
   30354:	4604      	mov	r4, r0
		break;
   30356:	e7e2      	b.n	3031e <cmd_put+0x44>
		status = status_param_cmd_put(cmd_in,
   30358:	f10d 0207 	add.w	r2, sp, #7
   3035c:	f7ff fca3 	bl	2fca6 <status_param_cmd_put>
   30360:	4604      	mov	r4, r0
		break;
   30362:	e7dc      	b.n	3031e <cmd_put+0x44>
		status = le_controller_cmd_put(cmd_in,
   30364:	f10d 0207 	add.w	r2, sp, #7
   30368:	f7ff fe68 	bl	3003c <le_controller_cmd_put>
   3036c:	4604      	mov	r4, r0
		break;
   3036e:	e7d6      	b.n	3031e <cmd_put+0x44>
	switch (BT_OGF(opcode)) {
   30370:	2401      	movs	r4, #1
   30372:	e7d4      	b.n	3031e <cmd_put+0x44>
   30374:	2401      	movs	r4, #1
   30376:	e7d2      	b.n	3031e <cmd_put+0x44>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   30378:	4623      	mov	r3, r4
   3037a:	f89d 2007 	ldrb.w	r2, [sp, #7]
   3037e:	4629      	mov	r1, r5
   30380:	4630      	mov	r0, r6
   30382:	f7ff fc80 	bl	2fc86 <encode_command_complete_header>
}
   30386:	e7d5      	b.n	30334 <cmd_put+0x5a>

00030388 <hci_cmd_le_generate_dhkey>:

uint8_t hci_cmd_le_generate_dhkey(struct bt_hci_cp_le_generate_dhkey *p_params)
{
   30388:	b508      	push	{r3, lr}
	return cmd_le_generate_dhkey(p_params->key,
   3038a:	2100      	movs	r1, #0
   3038c:	f7f3 f88a 	bl	234a4 <cmd_le_generate_dhkey>
				     BT_HCI_LE_KEY_TYPE_GENERATED);
}
   30390:	bd08      	pop	{r3, pc}

00030392 <hci_cmd_le_generate_dhkey_v2>:

uint8_t hci_cmd_le_generate_dhkey_v2(struct bt_hci_cp_le_generate_dhkey_v2 *p_params)
{
	if (p_params->key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
   30392:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
   30396:	2901      	cmp	r1, #1
   30398:	d803      	bhi.n	303a2 <hci_cmd_le_generate_dhkey_v2+0x10>
{
   3039a:	b508      	push	{r3, lr}
		return BT_HCI_ERR_INVALID_PARAM;
	}

	return cmd_le_generate_dhkey(p_params->key, p_params->key_type);
   3039c:	f7f3 f882 	bl	234a4 <cmd_le_generate_dhkey>
}
   303a0:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_INVALID_PARAM;
   303a2:	2012      	movs	r0, #18
}
   303a4:	4770      	bx	lr

000303a6 <m_config_clock_source_get>:
}
   303a6:	2001      	movs	r0, #1
   303a8:	4770      	bx	lr

000303aa <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   303aa:	4668      	mov	r0, sp
   303ac:	f020 0107 	bic.w	r1, r0, #7
   303b0:	468d      	mov	sp, r1
   303b2:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   303b4:	f7d3 fe34 	bl	4020 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   303b8:	f7e5 fb4c 	bl	15a54 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   303bc:	f7e5 fc4a 	bl	15c54 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   303c0:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   303c4:	4685      	mov	sp, r0
   303c6:	4770      	bx	lr

000303c8 <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   303c8:	4668      	mov	r0, sp
   303ca:	f020 0107 	bic.w	r1, r0, #7
   303ce:	468d      	mov	sp, r1
   303d0:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   303d2:	f7d3 fd9b 	bl	3f0c <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   303d6:	f7e5 fb3d 	bl	15a54 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   303da:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   303de:	4685      	mov	sp, r0
   303e0:	4770      	bx	lr

000303e2 <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   303e2:	4668      	mov	r0, sp
   303e4:	f020 0107 	bic.w	r1, r0, #7
   303e8:	468d      	mov	sp, r1
   303ea:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   303ec:	f7d1 fafe 	bl	19ec <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   303f0:	f7e5 fb30 	bl	15a54 <_arch_isr_direct_pm>
   303f4:	f7e5 fc2e 	bl	15c54 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   303f8:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   303fc:	4685      	mov	sp, r0
   303fe:	4770      	bx	lr

00030400 <nrfx_clock_enable>:
}
   30400:	4770      	bx	lr

00030402 <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
   30402:	b508      	push	{r3, lr}
	MPSL_IRQ_CLOCK_Handler();
   30404:	f7d4 fa7c 	bl	4900 <MPSL_IRQ_CLOCK_Handler>
}
   30408:	bd08      	pop	{r3, pc}

0003040a <nrf_flash_sync_is_required>:
{
   3040a:	b508      	push	{r3, lr}
	return mpsl_is_initialized();
   3040c:	f7d4 fe34 	bl	5078 <mpsl_is_initialized>
}
   30410:	bd08      	pop	{r3, pc}

00030412 <nrf_flash_sync_get_timestamp_begin>:
}
   30412:	4770      	bx	lr

00030414 <nrf52_errata_12>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   30414:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   30418:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   3041c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   30420:	d003      	beq.n	3042a <nrf52_errata_12+0x16>
                var2 = *(uint32_t *)0x10000134ul;
            }
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   30422:	2b06      	cmp	r3, #6
   30424:	d006      	beq.n	30434 <nrf52_errata_12+0x20>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   30426:	2000      	movs	r0, #0
   30428:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   3042a:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   3042e:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   30432:	e7f6      	b.n	30422 <nrf52_errata_12+0xe>
                        return true;
   30434:	2001      	movs	r0, #1
    #endif
}
   30436:	4770      	bx	lr

00030438 <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   30438:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   3043c:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   30440:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
   30444:	f3c3 1303 	ubfx	r3, r3, #4, #4
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   30448:	2a06      	cmp	r2, #6
   3044a:	d001      	beq.n	30450 <nrf52_errata_16+0x18>
                    default:
                        return false;
                }
            }
        #endif
        return false;
   3044c:	2000      	movs	r0, #0
   3044e:	4770      	bx	lr
                switch(var2)
   30450:	3b03      	subs	r3, #3
   30452:	2b00      	cmp	r3, #0
   30454:	d804      	bhi.n	30460 <nrf52_errata_16+0x28>
   30456:	e8df f003 	tbb	[pc, r3]
   3045a:	01          	.byte	0x01
   3045b:	00          	.byte	0x00
   3045c:	2001      	movs	r0, #1
   3045e:	4770      	bx	lr
                        return false;
   30460:	2000      	movs	r0, #0
    #endif
}
   30462:	4770      	bx	lr

00030464 <nrf52_errata_31>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   30464:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   30468:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   3046c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   30470:	d003      	beq.n	3047a <nrf52_errata_31+0x16>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   30472:	2b06      	cmp	r3, #6
   30474:	d006      	beq.n	30484 <nrf52_errata_31+0x20>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   30476:	2000      	movs	r0, #0
   30478:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   3047a:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   3047e:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   30482:	e7f6      	b.n	30472 <nrf52_errata_31+0xe>
                        return true;
   30484:	2001      	movs	r0, #1
    #endif
}
   30486:	4770      	bx	lr

00030488 <nrf52_errata_32>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   30488:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   3048c:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   30490:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
   30494:	f3c3 1303 	ubfx	r3, r3, #4, #4
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   30498:	2a06      	cmp	r2, #6
   3049a:	d001      	beq.n	304a0 <nrf52_errata_32+0x18>
                    default:
                        return false;
                }
            }
        #endif
        return false;
   3049c:	2000      	movs	r0, #0
   3049e:	4770      	bx	lr
                switch(var2)
   304a0:	3b03      	subs	r3, #3
   304a2:	2b00      	cmp	r3, #0
   304a4:	d804      	bhi.n	304b0 <nrf52_errata_32+0x28>
   304a6:	e8df f003 	tbb	[pc, r3]
   304aa:	01          	.byte	0x01
   304ab:	00          	.byte	0x00
   304ac:	2001      	movs	r0, #1
   304ae:	4770      	bx	lr
                        return false;
   304b0:	2000      	movs	r0, #0
    #endif
}
   304b2:	4770      	bx	lr

000304b4 <nrf52_errata_36>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   304b4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   304b8:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   304bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   304c0:	d003      	beq.n	304ca <nrf52_errata_36+0x16>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   304c2:	2b06      	cmp	r3, #6
   304c4:	d006      	beq.n	304d4 <nrf52_errata_36+0x20>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   304c6:	2000      	movs	r0, #0
   304c8:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   304ca:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   304ce:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   304d2:	e7f6      	b.n	304c2 <nrf52_errata_36+0xe>
                        return true;
   304d4:	2001      	movs	r0, #1
    #endif
}
   304d6:	4770      	bx	lr

000304d8 <nrf52_errata_37>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   304d8:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   304dc:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   304e0:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
   304e4:	f3c3 1303 	ubfx	r3, r3, #4, #4
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   304e8:	2a06      	cmp	r2, #6
   304ea:	d001      	beq.n	304f0 <nrf52_errata_37+0x18>
                    default:
                        return false;
                }
            }
        #endif
        return false;
   304ec:	2000      	movs	r0, #0
   304ee:	4770      	bx	lr
                switch(var2)
   304f0:	3b03      	subs	r3, #3
   304f2:	2b00      	cmp	r3, #0
   304f4:	d804      	bhi.n	30500 <nrf52_errata_37+0x28>
   304f6:	e8df f003 	tbb	[pc, r3]
   304fa:	01          	.byte	0x01
   304fb:	00          	.byte	0x00
   304fc:	2001      	movs	r0, #1
   304fe:	4770      	bx	lr
                        return false;
   30500:	2000      	movs	r0, #0
    #endif
}
   30502:	4770      	bx	lr

00030504 <nrf52_errata_57>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   30504:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   30508:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   3050c:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
   30510:	f3c3 1303 	ubfx	r3, r3, #4, #4
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   30514:	2a06      	cmp	r2, #6
   30516:	d001      	beq.n	3051c <nrf52_errata_57+0x18>
                    default:
                        return false;
                }
            }
        #endif
        return false;
   30518:	2000      	movs	r0, #0
   3051a:	4770      	bx	lr
                switch(var2)
   3051c:	3b03      	subs	r3, #3
   3051e:	2b00      	cmp	r3, #0
   30520:	d804      	bhi.n	3052c <nrf52_errata_57+0x28>
   30522:	e8df f003 	tbb	[pc, r3]
   30526:	01          	.byte	0x01
   30527:	00          	.byte	0x00
   30528:	2001      	movs	r0, #1
   3052a:	4770      	bx	lr
                        return false;
   3052c:	2000      	movs	r0, #0
    #endif
}
   3052e:	4770      	bx	lr

00030530 <nrf52_errata_66>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   30530:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   30534:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   30538:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   3053c:	d007      	beq.n	3054e <nrf52_errata_66+0x1e>
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
   3053e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   30542:	f8d2 2134 	ldr.w	r2, [r2, #308]	; 0x134
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   30546:	2b06      	cmp	r3, #6
   30548:	d00a      	beq.n	30560 <nrf52_errata_66+0x30>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   3054a:	2000      	movs	r0, #0
   3054c:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   3054e:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
   30552:	f892 3fe0 	ldrb.w	r3, [r2, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   30556:	f8d2 2fe8 	ldr.w	r2, [r2, #4072]	; 0xfe8
   3055a:	f3c2 1203 	ubfx	r2, r2, #4, #4
   3055e:	e7f2      	b.n	30546 <nrf52_errata_66+0x16>
                switch(var2)
   30560:	3a03      	subs	r2, #3
   30562:	2a01      	cmp	r2, #1
   30564:	d804      	bhi.n	30570 <nrf52_errata_66+0x40>
   30566:	e8df f002 	tbb	[pc, r2]
   3056a:	0101      	.short	0x0101
   3056c:	2000      	movs	r0, #0
   3056e:	4770      	bx	lr
                        return true;
   30570:	2001      	movs	r0, #1
    #endif
}
   30572:	4770      	bx	lr

00030574 <nrf52_errata_108>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   30574:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   30578:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   3057c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   30580:	d003      	beq.n	3058a <nrf52_errata_108+0x16>
                var2 = *(uint32_t *)0x10000134ul;
            }
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   30582:	2b06      	cmp	r3, #6
   30584:	d006      	beq.n	30594 <nrf52_errata_108+0x20>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   30586:	2000      	movs	r0, #0
   30588:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   3058a:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   3058e:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   30592:	e7f6      	b.n	30582 <nrf52_errata_108+0xe>
                        return true;
   30594:	2001      	movs	r0, #1
    #endif
}
   30596:	4770      	bx	lr

00030598 <nrf52_errata_136>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   30598:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   3059c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   305a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   305a4:	d003      	beq.n	305ae <nrf52_errata_136+0x16>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   305a6:	2b06      	cmp	r3, #6
   305a8:	d006      	beq.n	305b8 <nrf52_errata_136+0x20>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   305aa:	2000      	movs	r0, #0
   305ac:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   305ae:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   305b2:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   305b6:	e7f6      	b.n	305a6 <nrf52_errata_136+0xe>
                        return true;
   305b8:	2001      	movs	r0, #1
    #endif
}
   305ba:	4770      	bx	lr

000305bc <nrf52_errata_182>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   305bc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   305c0:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   305c4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   305c8:	2a06      	cmp	r2, #6
   305ca:	d001      	beq.n	305d0 <nrf52_errata_182+0x14>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   305cc:	2000      	movs	r0, #0
   305ce:	4770      	bx	lr
                switch(var2)
   305d0:	2b05      	cmp	r3, #5
   305d2:	d803      	bhi.n	305dc <nrf52_errata_182+0x20>
   305d4:	2b03      	cmp	r3, #3
   305d6:	d303      	bcc.n	305e0 <nrf52_errata_182+0x24>
   305d8:	2000      	movs	r0, #0
   305da:	4770      	bx	lr
                        return true;
   305dc:	2001      	movs	r0, #1
   305de:	4770      	bx	lr
                        return true;
   305e0:	2001      	movs	r0, #1
    #endif
}
   305e2:	4770      	bx	lr

000305e4 <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   305e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   305e8:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   305ec:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   305f0:	2a06      	cmp	r2, #6
   305f2:	d001      	beq.n	305f8 <nrf52_configuration_249+0x14>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   305f4:	2000      	movs	r0, #0
   305f6:	4770      	bx	lr
                switch(var2)
   305f8:	2b06      	cmp	r3, #6
   305fa:	d803      	bhi.n	30604 <nrf52_configuration_249+0x20>
   305fc:	2b03      	cmp	r3, #3
   305fe:	d303      	bcc.n	30608 <nrf52_configuration_249+0x24>
   30600:	2000      	movs	r0, #0
   30602:	4770      	bx	lr
                        return true;
   30604:	2001      	movs	r0, #1
   30606:	4770      	bx	lr
                        return true;
   30608:	2001      	movs	r0, #1
    #endif
}
   3060a:	4770      	bx	lr

0003060c <nrfx_isr>:
#include <nrfx.h>
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
   3060c:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
   3060e:	4780      	blx	r0
}
   30610:	bd08      	pop	{r3, pc}

00030612 <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
   30612:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
   30614:	f000 fac6 	bl	30ba4 <z_impl_k_busy_wait>
	if (IS_ENABLED(CONFIG_SYS_CLOCK_EXISTS)) {
		k_busy_wait(usec_to_wait);
	} else {
		nrfx_coredep_delay_us(usec_to_wait);
	}
}
   30618:	bd08      	pop	{r3, pc}

0003061a <pin_is_task_output>:
{
   3061a:	b510      	push	{r4, lr}
   3061c:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   3061e:	f7f3 fb8f 	bl	23d40 <pin_is_output>
   30622:	b128      	cbz	r0, 30630 <pin_is_task_output+0x16>
   30624:	4620      	mov	r0, r4
   30626:	f7f3 fb75 	bl	23d14 <pin_in_use_by_te>
   3062a:	b118      	cbz	r0, 30634 <pin_is_task_output+0x1a>
   3062c:	2001      	movs	r0, #1
   3062e:	e000      	b.n	30632 <pin_is_task_output+0x18>
   30630:	2000      	movs	r0, #0
}
   30632:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   30634:	2000      	movs	r0, #0
   30636:	e7fc      	b.n	30632 <pin_is_task_output+0x18>

00030638 <pin_is_input>:
{
   30638:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
   3063a:	f7f3 fb81 	bl	23d40 <pin_is_output>
   3063e:	f080 0001 	eor.w	r0, r0, #1
}
   30642:	b2c0      	uxtb	r0, r0
   30644:	bd08      	pop	{r3, pc}

00030646 <gpiote_polarity_to_trigger>:
}
   30646:	4770      	bx	lr

00030648 <gpiote_trigger_to_polarity>:
}
   30648:	4770      	bx	lr

0003064a <is_level>:
}
   3064a:	2803      	cmp	r0, #3
   3064c:	bf94      	ite	ls
   3064e:	2000      	movls	r0, #0
   30650:	2001      	movhi	r0, #1
   30652:	4770      	bx	lr

00030654 <latch_pending_read_and_check>:
    for (i = start_port; i < (start_port + length); i++)
   30654:	4684      	mov	ip, r0
   30656:	2300      	movs	r3, #0
   30658:	e008      	b.n	3066c <latch_pending_read_and_check+0x18>
        *p_masks = gpio_regs[i]->LATCH;
   3065a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   3065e:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
   30662:	f84c 1b04 	str.w	r1, [ip], #4
        gpio_regs[i]->LATCH = *p_masks;
   30666:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
   3066a:	3301      	adds	r3, #1
   3066c:	2b00      	cmp	r3, #0
   3066e:	d0f4      	beq.n	3065a <latch_pending_read_and_check+0x6>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   30670:	2300      	movs	r3, #0
   30672:	b10b      	cbz	r3, 30678 <latch_pending_read_and_check+0x24>
    return false;
   30674:	2000      	movs	r0, #0
   30676:	4770      	bx	lr
        if (latch[port_idx])
   30678:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
   3067c:	b90a      	cbnz	r2, 30682 <latch_pending_read_and_check+0x2e>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   3067e:	3301      	adds	r3, #1
   30680:	e7f7      	b.n	30672 <latch_pending_read_and_check+0x1e>
            return true;
   30682:	2001      	movs	r0, #1
}
   30684:	4770      	bx	lr

00030686 <flash_page_size_get>:
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
   30686:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   3068a:	6918      	ldr	r0, [r3, #16]
}
   3068c:	4770      	bx	lr

0003068e <flash_page_count_get>:
NRF_STATIC_INLINE uint32_t nrf_ficr_codesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODESIZE_CODESIZE_Msk)
    return p_reg->INFO.CODESIZE;
#else
    return p_reg->CODESIZE;
   3068e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   30692:	6958      	ldr	r0, [r3, #20]
}
   30694:	4770      	bx	lr

00030696 <flash_total_size_get>:
{
   30696:	b510      	push	{r4, lr}
    return flash_page_size_get() * flash_page_count_get();
   30698:	f7ff fff5 	bl	30686 <flash_page_size_get>
   3069c:	4604      	mov	r4, r0
   3069e:	f7ff fff6 	bl	3068e <flash_page_count_get>
}
   306a2:	fb04 f000 	mul.w	r0, r4, r0
   306a6:	bd10      	pop	{r4, pc}

000306a8 <is_page_aligned_check>:
{
   306a8:	b510      	push	{r4, lr}
   306aa:	4604      	mov	r4, r0
    return !(addr % flash_page_size_get());
   306ac:	f7ff ffeb 	bl	30686 <flash_page_size_get>
   306b0:	fbb4 f3f0 	udiv	r3, r4, r0
   306b4:	fb00 4013 	mls	r0, r0, r3, r4
}
   306b8:	fab0 f080 	clz	r0, r0
   306bc:	0940      	lsrs	r0, r0, #5
   306be:	bd10      	pop	{r4, pc}

000306c0 <nrfx_nvmc_flash_size_get>:
    return (nrfx_is_word_aligned((void const *)addr) ? (uint16_t)(val32)
                                                     : (uint16_t)(val32 >> 16));
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
   306c0:	b508      	push	{r3, lr}
    return flash_total_size_get();
   306c2:	f7ff ffe8 	bl	30696 <flash_total_size_get>
}
   306c6:	bd08      	pop	{r3, pc}

000306c8 <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
   306c8:	b508      	push	{r3, lr}
    return flash_page_size_get();
   306ca:	f7ff ffdc 	bl	30686 <flash_page_size_get>
}
   306ce:	bd08      	pop	{r3, pc}

000306d0 <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
   306d0:	b508      	push	{r3, lr}
    return flash_page_count_get();
   306d2:	f7ff ffdc 	bl	3068e <flash_page_count_get>
}
   306d6:	bd08      	pop	{r3, pc}

000306d8 <xfer_completeness_check>:
    if (p_cb->bytes_transferred != p_cb->curr_length)
   306d8:	6b4a      	ldr	r2, [r1, #52]	; 0x34
   306da:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   306dc:	429a      	cmp	r2, r3
   306de:	d007      	beq.n	306f0 <xfer_completeness_check+0x18>
   306e0:	2300      	movs	r3, #0
   306e2:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   306e6:	2205      	movs	r2, #5
   306e8:	f8c0 2500 	str.w	r2, [r0, #1280]	; 0x500
        return false;
   306ec:	4618      	mov	r0, r3
   306ee:	4770      	bx	lr
        return true;
   306f0:	2001      	movs	r0, #1
}
   306f2:	4770      	bx	lr

000306f4 <twi_send_byte>:
{
   306f4:	4603      	mov	r3, r0
    if (p_cb->bytes_transferred < p_cb->curr_length)
   306f6:	6b4a      	ldr	r2, [r1, #52]	; 0x34
   306f8:	6a88      	ldr	r0, [r1, #40]	; 0x28
   306fa:	4282      	cmp	r2, r0
   306fc:	d205      	bcs.n	3070a <twi_send_byte+0x16>
        nrf_twi_txd_set(p_twi, p_cb->p_curr_buf[p_cb->bytes_transferred]);
   306fe:	6a49      	ldr	r1, [r1, #36]	; 0x24
   30700:	5c8a      	ldrb	r2, [r1, r2]
    p_reg->TXD = data;
   30702:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    return true;
   30706:	2001      	movs	r0, #1
}
   30708:	4770      	bx	lr
        if (p_cb->curr_tx_no_stop)
   3070a:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
   3070e:	b930      	cbnz	r0, 3071e <twi_send_byte+0x2a>
        else if(TWI_FLAG_SUSPEND(p_cb->flags))
   30710:	6a0a      	ldr	r2, [r1, #32]
   30712:	f012 0f40 	tst.w	r2, #64	; 0x40
   30716:	d106      	bne.n	30726 <twi_send_byte+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   30718:	2001      	movs	r0, #1
   3071a:	6158      	str	r0, [r3, #20]
}
   3071c:	4770      	bx	lr
   3071e:	2201      	movs	r2, #1
   30720:	61da      	str	r2, [r3, #28]
            return false;
   30722:	2000      	movs	r0, #0
   30724:	4770      	bx	lr
   30726:	2201      	movs	r2, #1
   30728:	61da      	str	r2, [r3, #28]
            p_cb->prev_suspend = TWI_SUSPEND_TX;
   3072a:	f881 202d 	strb.w	r2, [r1, #45]	; 0x2d
            return false;
   3072e:	4770      	bx	lr

00030730 <twi_receive_byte>:
{
   30730:	4684      	mov	ip, r0
    if (p_cb->bytes_transferred < p_cb->curr_length)
   30732:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   30734:	6a8a      	ldr	r2, [r1, #40]	; 0x28
   30736:	4293      	cmp	r3, r2
   30738:	d229      	bcs.n	3078e <twi_receive_byte+0x5e>
        p_cb->p_curr_buf[p_cb->bytes_transferred] = nrf_twi_rxd_get(p_twi);
   3073a:	6a4a      	ldr	r2, [r1, #36]	; 0x24
    return (uint8_t)p_reg->RXD;
   3073c:	f8d0 0518 	ldr.w	r0, [r0, #1304]	; 0x518
   30740:	54d0      	strb	r0, [r2, r3]
        ++(p_cb->bytes_transferred);
   30742:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   30744:	3301      	adds	r3, #1
   30746:	634b      	str	r3, [r1, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   30748:	6a8a      	ldr	r2, [r1, #40]	; 0x28
   3074a:	1e50      	subs	r0, r2, #1
   3074c:	4283      	cmp	r3, r0
   3074e:	d007      	beq.n	30760 <twi_receive_byte+0x30>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   30750:	4293      	cmp	r3, r2
   30752:	d00d      	beq.n	30770 <twi_receive_byte+0x40>
        else if (p_cb->bytes_transferred == p_cb->curr_length && TWI_FLAG_SUSPEND(p_cb->flags))
   30754:	4293      	cmp	r3, r2
   30756:	d011      	beq.n	3077c <twi_receive_byte+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   30758:	2001      	movs	r0, #1
   3075a:	f8cc 0020 	str.w	r0, [ip, #32]
}
   3075e:	4770      	bx	lr
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   30760:	6a08      	ldr	r0, [r1, #32]
   30762:	f010 0f40 	tst.w	r0, #64	; 0x40
   30766:	d1f3      	bne.n	30750 <twi_receive_byte+0x20>
    p_reg->SHORTS = mask;
   30768:	2302      	movs	r3, #2
   3076a:	f8cc 3200 	str.w	r3, [ip, #512]	; 0x200
}
   3076e:	e7f3      	b.n	30758 <twi_receive_byte+0x28>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   30770:	6a08      	ldr	r0, [r1, #32]
   30772:	f010 0f40 	tst.w	r0, #64	; 0x40
   30776:	d1ed      	bne.n	30754 <twi_receive_byte+0x24>
            return true;
   30778:	2001      	movs	r0, #1
}
   3077a:	4770      	bx	lr
        else if (p_cb->bytes_transferred == p_cb->curr_length && TWI_FLAG_SUSPEND(p_cb->flags))
   3077c:	6a0b      	ldr	r3, [r1, #32]
   3077e:	f013 0f40 	tst.w	r3, #64	; 0x40
   30782:	d0e9      	beq.n	30758 <twi_receive_byte+0x28>
            p_cb->prev_suspend = TWI_SUSPEND_RX;
   30784:	2302      	movs	r3, #2
   30786:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
            return false;
   3078a:	2000      	movs	r0, #0
   3078c:	4770      	bx	lr
    return true;
   3078e:	2001      	movs	r0, #1
   30790:	4770      	bx	lr

00030792 <twi_transfer>:
{
   30792:	b570      	push	{r4, r5, r6, lr}
   30794:	4604      	mov	r4, r0
   30796:	460d      	mov	r5, r1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   30798:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_STOPPED))
   3079c:	b1cb      	cbz	r3, 307d2 <twi_transfer+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3079e:	2300      	movs	r3, #0
   307a0:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   307a4:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
        stopped = true;
   307a8:	2601      	movs	r6, #1
    if (p_cb->error)
   307aa:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   307ae:	b193      	cbz	r3, 307d6 <twi_transfer+0x44>
   307b0:	2300      	movs	r3, #0
   307b2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   307b6:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   307ba:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   307be:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
   307c2:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   307c6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    if (stopped)
   307ca:	2e00      	cmp	r6, #0
   307cc:	d14c      	bne.n	30868 <twi_transfer+0xd6>
    return true;
   307ce:	2001      	movs	r0, #1
}
   307d0:	bd70      	pop	{r4, r5, r6, pc}
    bool stopped = false;
   307d2:	2600      	movs	r6, #0
   307d4:	e7e9      	b.n	307aa <twi_transfer+0x18>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   307d6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   307da:	b14b      	cbz	r3, 307f0 <twi_transfer+0x5e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   307dc:	2300      	movs	r3, #0
   307de:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   307e2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   307e6:	2301      	movs	r3, #1
   307e8:	6163      	str	r3, [r4, #20]
        p_cb->error = true;
   307ea:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
   307ee:	e7ec      	b.n	307ca <twi_transfer+0x38>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   307f0:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
        if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_TXDSENT))
   307f4:	b1db      	cbz	r3, 3082e <twi_transfer+0x9c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   307f6:	2300      	movs	r3, #0
   307f8:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   307fc:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
            ++(p_cb->bytes_transferred);
   30800:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   30802:	3301      	adds	r3, #1
   30804:	636b      	str	r3, [r5, #52]	; 0x34
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   30806:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   3080a:	b14b      	cbz	r3, 30820 <twi_transfer+0x8e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3080c:	2300      	movs	r3, #0
   3080e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   30812:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   30816:	2301      	movs	r3, #1
   30818:	6163      	str	r3, [r4, #20]
                p_cb->error = true;
   3081a:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
   3081e:	e7d4      	b.n	307ca <twi_transfer+0x38>
                if (!twi_send_byte(p_twi, p_cb))
   30820:	4629      	mov	r1, r5
   30822:	4620      	mov	r0, r4
   30824:	f7ff ff66 	bl	306f4 <twi_send_byte>
   30828:	2800      	cmp	r0, #0
   3082a:	d1ce      	bne.n	307ca <twi_transfer+0x38>
   3082c:	e7d0      	b.n	307d0 <twi_transfer+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3082e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
        else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_RXDREADY))
   30832:	2b00      	cmp	r3, #0
   30834:	d0c9      	beq.n	307ca <twi_transfer+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   30836:	2300      	movs	r3, #0
   30838:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   3083c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   30840:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   30844:	b14b      	cbz	r3, 3085a <twi_transfer+0xc8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   30846:	2300      	movs	r3, #0
   30848:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   3084c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   30850:	2301      	movs	r3, #1
   30852:	6163      	str	r3, [r4, #20]
                p_cb->error = true;
   30854:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
   30858:	e7b7      	b.n	307ca <twi_transfer+0x38>
                if (!twi_receive_byte(p_twi, p_cb))
   3085a:	4629      	mov	r1, r5
   3085c:	4620      	mov	r0, r4
   3085e:	f7ff ff67 	bl	30730 <twi_receive_byte>
   30862:	2800      	cmp	r0, #0
   30864:	d1b1      	bne.n	307ca <twi_transfer+0x38>
   30866:	e7b3      	b.n	307d0 <twi_transfer+0x3e>
        p_cb->prev_suspend = TWI_NO_SUSPEND;
   30868:	2300      	movs	r3, #0
   3086a:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
        if (!p_cb->error)
   3086e:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   30872:	b10b      	cbz	r3, 30878 <twi_transfer+0xe6>
        return false;
   30874:	2000      	movs	r0, #0
   30876:	e7ab      	b.n	307d0 <twi_transfer+0x3e>
            p_cb->error = !xfer_completeness_check(p_twi, p_cb);
   30878:	4629      	mov	r1, r5
   3087a:	4620      	mov	r0, r4
   3087c:	f7ff ff2c 	bl	306d8 <xfer_completeness_check>
   30880:	f080 0001 	eor.w	r0, r0, #1
   30884:	f885 002f 	strb.w	r0, [r5, #47]	; 0x2f
   30888:	e7f4      	b.n	30874 <twi_transfer+0xe2>

0003088a <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
   3088a:	b508      	push	{r3, lr}
  _DoInit();
   3088c:	f7f4 ff0e 	bl	256ac <_DoInit>
}
   30890:	bd08      	pop	{r3, pc}

00030892 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   30892:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   30894:	f7ff fff9 	bl	3088a <SEGGER_RTT_Init>

	return 0;
}
   30898:	2000      	movs	r0, #0
   3089a:	bd08      	pop	{r3, pc}

0003089c <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   3089c:	b148      	cbz	r0, 308b2 <z_device_is_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   3089e:	68c3      	ldr	r3, [r0, #12]
   308a0:	8818      	ldrh	r0, [r3, #0]
   308a2:	f3c0 0008 	ubfx	r0, r0, #0, #9
   308a6:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   308aa:	bf14      	ite	ne
   308ac:	2000      	movne	r0, #0
   308ae:	2001      	moveq	r0, #1
   308b0:	4770      	bx	lr
		return false;
   308b2:	2000      	movs	r0, #0
}
   308b4:	4770      	bx	lr

000308b6 <z_early_memset>:
{
   308b6:	b508      	push	{r3, lr}
   308b8:	f000 fa4f 	bl	30d5a <memset>
}
   308bc:	bd08      	pop	{r3, pc}

000308be <z_early_memcpy>:
{
   308be:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   308c0:	f000 fa2a 	bl	30d18 <memcpy>
}
   308c4:	bd08      	pop	{r3, pc}

000308c6 <k_heap_init>:
{
   308c6:	b510      	push	{r4, lr}
	sys_dlist_init(&w->waitq);
   308c8:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
   308cc:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
   308ce:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
   308d0:	f7e2 fef6 	bl	136c0 <sys_heap_init>
}
   308d4:	bd10      	pop	{r4, pc}

000308d6 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   308d6:	6902      	ldr	r2, [r0, #16]
   308d8:	6943      	ldr	r3, [r0, #20]
   308da:	431a      	orrs	r2, r3
   308dc:	f012 0203 	ands.w	r2, r2, #3
   308e0:	d10d      	bne.n	308fe <create_free_list+0x28>
	slab->free_list = NULL;
   308e2:	2100      	movs	r1, #0
   308e4:	6181      	str	r1, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   308e6:	e005      	b.n	308f4 <create_free_list+0x1e>
		*(char **)p = slab->free_list;
   308e8:	6981      	ldr	r1, [r0, #24]
   308ea:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
   308ec:	6183      	str	r3, [r0, #24]
		p += slab->block_size;
   308ee:	6901      	ldr	r1, [r0, #16]
   308f0:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   308f2:	3201      	adds	r2, #1
   308f4:	68c1      	ldr	r1, [r0, #12]
   308f6:	4291      	cmp	r1, r2
   308f8:	d8f6      	bhi.n	308e8 <create_free_list+0x12>
	return 0;
   308fa:	2000      	movs	r0, #0
   308fc:	4770      	bx	lr
		return -EINVAL;
   308fe:	f06f 0015 	mvn.w	r0, #21
}
   30902:	4770      	bx	lr

00030904 <setup_thread_stack>:
{
   30904:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   30906:	3207      	adds	r2, #7
   30908:	f022 0207 	bic.w	r2, r2, #7
   3090c:	f102 0340 	add.w	r3, r2, #64	; 0x40

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   30910:	f101 0440 	add.w	r4, r1, #64	; 0x40
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
   30914:	6684      	str	r4, [r0, #104]	; 0x68
	new_thread->stack_info.size = stack_buf_size;
   30916:	66c2      	str	r2, [r0, #108]	; 0x6c
	new_thread->stack_info.delta = delta;
   30918:	2200      	movs	r2, #0
   3091a:	6702      	str	r2, [r0, #112]	; 0x70
}
   3091c:	18c8      	adds	r0, r1, r3
   3091e:	bc10      	pop	{r4}
   30920:	4770      	bx	lr

00030922 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   30922:	f3ef 8005 	mrs	r0, IPSR
}
   30926:	3800      	subs	r0, #0
   30928:	bf18      	it	ne
   3092a:	2001      	movne	r0, #1
   3092c:	4770      	bx	lr

0003092e <z_impl_k_thread_name_set>:
}
   3092e:	f06f 0057 	mvn.w	r0, #87	; 0x57
   30932:	4770      	bx	lr

00030934 <k_thread_name_get>:
}
   30934:	2000      	movs	r0, #0
   30936:	4770      	bx	lr

00030938 <z_impl_k_thread_start>:
{
   30938:	b508      	push	{r3, lr}
	z_sched_start(thread);
   3093a:	f7f7 f903 	bl	27b44 <z_sched_start>
}
   3093e:	bd08      	pop	{r3, pc}

00030940 <z_init_thread_base>:
{
   30940:	b410      	push	{r4}
	thread_base->pended_on = NULL;
   30942:	2400      	movs	r4, #0
   30944:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
   30946:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   30948:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
   3094a:	7381      	strb	r1, [r0, #14]
	thread_base->sched_locked = 0U;
   3094c:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
   3094e:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
   30950:	61c4      	str	r4, [r0, #28]
}
   30952:	bc10      	pop	{r4}
   30954:	4770      	bx	lr

00030956 <z_pm_save_idle_exit>:
{
   30956:	b508      	push	{r3, lr}
	pm_system_resume();
   30958:	f7e4 fa28 	bl	14dac <pm_system_resume>
	sys_clock_idle_exit();
   3095c:	f7ff f838 	bl	2f9d0 <sys_clock_idle_exit>
}
   30960:	bd08      	pop	{r3, pc}

00030962 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
   30962:	4288      	cmp	r0, r1
   30964:	da00      	bge.n	30968 <new_prio_for_inheritance+0x6>
   30966:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   30968:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
   3096c:	db01      	blt.n	30972 <new_prio_for_inheritance+0x10>
   3096e:	4608      	mov	r0, r1
   30970:	4770      	bx	lr
   30972:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
   30976:	4770      	bx	lr

00030978 <adjust_owner_prio>:
{
   30978:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
   3097a:	6880      	ldr	r0, [r0, #8]
   3097c:	f990 300e 	ldrsb.w	r3, [r0, #14]
   30980:	428b      	cmp	r3, r1
   30982:	d101      	bne.n	30988 <adjust_owner_prio+0x10>
	return false;
   30984:	2000      	movs	r0, #0
}
   30986:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
   30988:	f7f7 fa50 	bl	27e2c <z_set_prio>
   3098c:	e7fb      	b.n	30986 <adjust_owner_prio+0xe>

0003098e <z_impl_k_mutex_init>:
{
   3098e:	4603      	mov	r3, r0
	mutex->owner = NULL;
   30990:	2000      	movs	r0, #0
   30992:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
   30994:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
   30996:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   30998:	605b      	str	r3, [r3, #4]
}
   3099a:	4770      	bx	lr

0003099c <prepare_thread_to_run>:
{
   3099c:	b508      	push	{r3, lr}
   3099e:	2200      	movs	r2, #0
   309a0:	67c2      	str	r2, [r0, #124]	; 0x7c
   309a2:	6141      	str	r1, [r0, #20]
	z_ready_thread(thread);
   309a4:	f7f7 f88a 	bl	27abc <z_ready_thread>
}
   309a8:	bd08      	pop	{r3, pc}

000309aa <z_queue_node_peek>:
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   309aa:	b160      	cbz	r0, 309c6 <z_queue_node_peek+0x1c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   309ac:	6803      	ldr	r3, [r0, #0]
   309ae:	f013 0f03 	tst.w	r3, #3
   309b2:	d008      	beq.n	309c6 <z_queue_node_peek+0x1c>
{
   309b4:	b510      	push	{r4, lr}
		ret = anode->data;
   309b6:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   309b8:	b909      	cbnz	r1, 309be <z_queue_node_peek+0x14>
		ret = anode->data;
   309ba:	4620      	mov	r0, r4
}
   309bc:	bd10      	pop	{r4, pc}
			k_free(anode);
   309be:	f000 f991 	bl	30ce4 <k_free>
		ret = anode->data;
   309c2:	4620      	mov	r0, r4
   309c4:	e7fa      	b.n	309bc <z_queue_node_peek+0x12>
}
   309c6:	4770      	bx	lr

000309c8 <z_impl_k_queue_init>:
	list->head = NULL;
   309c8:	2300      	movs	r3, #0
   309ca:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
   309cc:	6043      	str	r3, [r0, #4]
	queue->lock = (struct k_spinlock) {};
   309ce:	6083      	str	r3, [r0, #8]
   309d0:	f100 030c 	add.w	r3, r0, #12
	list->head = (sys_dnode_t *)list;
   309d4:	60c3      	str	r3, [r0, #12]
	list->tail = (sys_dnode_t *)list;
   309d6:	6103      	str	r3, [r0, #16]
	sys_dlist_init(&queue->poll_events);
   309d8:	f100 0314 	add.w	r3, r0, #20
	list->head = (sys_dnode_t *)list;
   309dc:	6143      	str	r3, [r0, #20]
	list->tail = (sys_dnode_t *)list;
   309de:	6183      	str	r3, [r0, #24]
}
   309e0:	4770      	bx	lr

000309e2 <k_queue_append>:
{
   309e2:	b500      	push	{lr}
   309e4:	b083      	sub	sp, #12
   309e6:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   309e8:	2301      	movs	r3, #1
   309ea:	9300      	str	r3, [sp, #0]
   309ec:	2300      	movs	r3, #0
   309ee:	4619      	mov	r1, r3
   309f0:	f7f5 fd34 	bl	2645c <queue_insert>
}
   309f4:	b003      	add	sp, #12
   309f6:	f85d fb04 	ldr.w	pc, [sp], #4

000309fa <k_queue_prepend>:
{
   309fa:	b500      	push	{lr}
   309fc:	b083      	sub	sp, #12
   309fe:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   30a00:	2100      	movs	r1, #0
   30a02:	9100      	str	r1, [sp, #0]
   30a04:	460b      	mov	r3, r1
   30a06:	f7f5 fd29 	bl	2645c <queue_insert>
}
   30a0a:	b003      	add	sp, #12
   30a0c:	f85d fb04 	ldr.w	pc, [sp], #4

00030a10 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   30a10:	b15a      	cbz	r2, 30a2a <z_impl_k_sem_init+0x1a>
   30a12:	428a      	cmp	r2, r1
   30a14:	d30c      	bcc.n	30a30 <z_impl_k_sem_init+0x20>
	sem->count = initial_count;
   30a16:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   30a18:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   30a1a:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   30a1c:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->poll_events);
   30a1e:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   30a22:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   30a24:	6143      	str	r3, [r0, #20]
	return 0;
   30a26:	2000      	movs	r0, #0
   30a28:	4770      	bx	lr
		return -EINVAL;
   30a2a:	f06f 0015 	mvn.w	r0, #21
   30a2e:	4770      	bx	lr
   30a30:	f06f 0015 	mvn.w	r0, #21
}
   30a34:	4770      	bx	lr

00030a36 <cancel_async_locked>:
{
   30a36:	4603      	mov	r3, r0
	return (*flagp & BIT(bit)) != 0U;
   30a38:	68c2      	ldr	r2, [r0, #12]
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   30a3a:	f012 0f02 	tst.w	r2, #2
   30a3e:	d009      	beq.n	30a54 <cancel_async_locked+0x1e>
	return *flagp;
   30a40:	68da      	ldr	r2, [r3, #12]
	if (ret != 0) {
   30a42:	f012 000f 	ands.w	r0, r2, #15
   30a46:	d004      	beq.n	30a52 <cancel_async_locked+0x1c>
	*flagp |= BIT(bit);
   30a48:	f042 0202 	orr.w	r2, r2, #2
   30a4c:	60da      	str	r2, [r3, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   30a4e:	f002 000f 	and.w	r0, r2, #15
}
   30a52:	4770      	bx	lr
		queue_remove_locked(work->queue, work);
   30a54:	6880      	ldr	r0, [r0, #8]
	*flagp &= ~BIT(bit);
   30a56:	f022 0104 	bic.w	r1, r2, #4
   30a5a:	60d9      	str	r1, [r3, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   30a5c:	f012 0f04 	tst.w	r2, #4
   30a60:	d0ee      	beq.n	30a40 <cancel_async_locked+0xa>
		(void)sys_slist_find_and_remove(&queue->pending, &work->node);
   30a62:	f100 0c80 	add.w	ip, r0, #128	; 0x80
	return list->head;
   30a66:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   30a6a:	2100      	movs	r1, #0
   30a6c:	2a00      	cmp	r2, #0
   30a6e:	d0e7      	beq.n	30a40 <cancel_async_locked+0xa>
   30a70:	4293      	cmp	r3, r2
   30a72:	d002      	beq.n	30a7a <cancel_async_locked+0x44>
   30a74:	4611      	mov	r1, r2
   30a76:	6812      	ldr	r2, [r2, #0]
   30a78:	e7f8      	b.n	30a6c <cancel_async_locked+0x36>
Z_GENLIST_REMOVE(slist, snode)
   30a7a:	b141      	cbz	r1, 30a8e <cancel_async_locked+0x58>
	return node->next;
   30a7c:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
   30a7e:	600a      	str	r2, [r1, #0]
	return list->tail;
   30a80:	f8dc 2004 	ldr.w	r2, [ip, #4]
Z_GENLIST_REMOVE(slist, snode)
   30a84:	4293      	cmp	r3, r2
   30a86:	d00c      	beq.n	30aa2 <cancel_async_locked+0x6c>
	parent->next = child;
   30a88:	2200      	movs	r2, #0
   30a8a:	601a      	str	r2, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   30a8c:	e7d8      	b.n	30a40 <cancel_async_locked+0xa>
	return node->next;
   30a8e:	681a      	ldr	r2, [r3, #0]
	list->head = node;
   30a90:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
	return list->tail;
   30a94:	f8dc 1004 	ldr.w	r1, [ip, #4]
Z_GENLIST_REMOVE(slist, snode)
   30a98:	428b      	cmp	r3, r1
   30a9a:	d1f5      	bne.n	30a88 <cancel_async_locked+0x52>
	list->tail = node;
   30a9c:	f8cc 2004 	str.w	r2, [ip, #4]
}
   30aa0:	e7f2      	b.n	30a88 <cancel_async_locked+0x52>
	list->tail = node;
   30aa2:	f8cc 1004 	str.w	r1, [ip, #4]
}
   30aa6:	e7ef      	b.n	30a88 <cancel_async_locked+0x52>

00030aa8 <cancel_delayable_async_locked>:
{
   30aa8:	b510      	push	{r4, lr}
   30aaa:	4604      	mov	r4, r0
	return (*flagp & BIT(bit)) != 0U;
   30aac:	68c3      	ldr	r3, [r0, #12]
	*flagp &= ~BIT(bit);
   30aae:	f023 0208 	bic.w	r2, r3, #8
   30ab2:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   30ab4:	f013 0f08 	tst.w	r3, #8
   30ab8:	d103      	bne.n	30ac2 <cancel_delayable_async_locked+0x1a>
	return cancel_async_locked(&dwork->work);
   30aba:	4620      	mov	r0, r4
   30abc:	f7ff ffbb 	bl	30a36 <cancel_async_locked>
}
   30ac0:	bd10      	pop	{r4, pc}
		z_abort_timeout(&dwork->timeout);
   30ac2:	3010      	adds	r0, #16
   30ac4:	f7f7 ffde 	bl	28a84 <z_abort_timeout>
		ret = true;
   30ac8:	e7f7      	b.n	30aba <cancel_delayable_async_locked+0x12>

00030aca <k_work_submit_to_queue>:
{
   30aca:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   30acc:	f7f6 f97a 	bl	26dc4 <z_work_submit_to_queue>
	if (ret > 0) {
   30ad0:	1e04      	subs	r4, r0, #0
   30ad2:	dc01      	bgt.n	30ad8 <k_work_submit_to_queue+0xe>
}
   30ad4:	4620      	mov	r0, r4
   30ad6:	bd10      	pop	{r4, pc}
	__asm__ volatile(
   30ad8:	f04f 0340 	mov.w	r3, #64	; 0x40
   30adc:	f3ef 8011 	mrs	r0, BASEPRI
   30ae0:	f383 8812 	msr	BASEPRI_MAX, r3
   30ae4:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   30ae8:	f000 f80d 	bl	30b06 <z_reschedule_irqlock>
	return ret;
   30aec:	e7f2      	b.n	30ad4 <k_work_submit_to_queue+0xa>

00030aee <thread_active_elsewhere>:
}
   30aee:	2000      	movs	r0, #0
   30af0:	4770      	bx	lr

00030af2 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   30af2:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   30af6:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   30afa:	4283      	cmp	r3, r0
   30afc:	d001      	beq.n	30b02 <z_sched_prio_cmp+0x10>
		return b2 - b1;
   30afe:	1ac0      	subs	r0, r0, r3
   30b00:	4770      	bx	lr
	return 0;
   30b02:	2000      	movs	r0, #0
}
   30b04:	4770      	bx	lr

00030b06 <z_reschedule_irqlock>:
{
   30b06:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   30b08:	4603      	mov	r3, r0
   30b0a:	b920      	cbnz	r0, 30b16 <z_reschedule_irqlock+0x10>
   30b0c:	f3ef 8205 	mrs	r2, IPSR
   30b10:	b942      	cbnz	r2, 30b24 <z_reschedule_irqlock+0x1e>
   30b12:	2201      	movs	r2, #1
   30b14:	e000      	b.n	30b18 <z_reschedule_irqlock+0x12>
   30b16:	2200      	movs	r2, #0
	if (resched(key)) {
   30b18:	b932      	cbnz	r2, 30b28 <z_reschedule_irqlock+0x22>
	__asm__ volatile(
   30b1a:	f383 8811 	msr	BASEPRI, r3
   30b1e:	f3bf 8f6f 	isb	sy
}
   30b22:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   30b24:	2200      	movs	r2, #0
   30b26:	e7f7      	b.n	30b18 <z_reschedule_irqlock+0x12>
   30b28:	4618      	mov	r0, r3
   30b2a:	f7e4 ffc3 	bl	15ab4 <arch_swap>
	return ret;
   30b2e:	e7f8      	b.n	30b22 <z_reschedule_irqlock+0x1c>

00030b30 <z_priq_dumb_best>:
{
   30b30:	4603      	mov	r3, r0
	return list->head == list;
   30b32:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   30b34:	4283      	cmp	r3, r0
   30b36:	d000      	beq.n	30b3a <z_priq_dumb_best+0xa>
}
   30b38:	4770      	bx	lr
	struct k_thread *thread = NULL;
   30b3a:	2000      	movs	r0, #0
	return thread;
   30b3c:	e7fc      	b.n	30b38 <z_priq_dumb_best+0x8>

00030b3e <z_unpend_all>:
{
   30b3e:	b538      	push	{r3, r4, r5, lr}
   30b40:	4605      	mov	r5, r0
	int need_sched = 0;
   30b42:	2000      	movs	r0, #0
	return list->head == list;
   30b44:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   30b46:	42a5      	cmp	r5, r4
   30b48:	d008      	beq.n	30b5c <z_unpend_all+0x1e>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   30b4a:	b13c      	cbz	r4, 30b5c <z_unpend_all+0x1e>
		z_unpend_thread(thread);
   30b4c:	4620      	mov	r0, r4
   30b4e:	f7f6 fddf 	bl	27710 <z_unpend_thread>
		z_ready_thread(thread);
   30b52:	4620      	mov	r0, r4
   30b54:	f7f6 ffb2 	bl	27abc <z_ready_thread>
		need_sched = 1;
   30b58:	2001      	movs	r0, #1
   30b5a:	e7f3      	b.n	30b44 <z_unpend_all+0x6>
}
   30b5c:	bd38      	pop	{r3, r4, r5, pc}

00030b5e <init_ready_q>:
	sys_dlist_init(&rq->runq);
   30b5e:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
   30b60:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
   30b62:	6083      	str	r3, [r0, #8]
}
   30b64:	4770      	bx	lr

00030b66 <remove_timeout>:
{
   30b66:	b510      	push	{r4, lr}
   30b68:	4604      	mov	r4, r0
	if (next(t) != NULL) {
   30b6a:	f7f7 fe83 	bl	28874 <next>
   30b6e:	b148      	cbz	r0, 30b84 <remove_timeout+0x1e>
   30b70:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
   30b72:	6920      	ldr	r0, [r4, #16]
   30b74:	6961      	ldr	r1, [r4, #20]
   30b76:	6913      	ldr	r3, [r2, #16]
   30b78:	181b      	adds	r3, r3, r0
   30b7a:	6950      	ldr	r0, [r2, #20]
   30b7c:	eb41 0100 	adc.w	r1, r1, r0
   30b80:	6113      	str	r3, [r2, #16]
   30b82:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
   30b84:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
   30b86:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
   30b88:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   30b8a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   30b8c:	2300      	movs	r3, #0
   30b8e:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
   30b90:	6063      	str	r3, [r4, #4]
}
   30b92:	bd10      	pop	{r4, pc}

00030b94 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   30b94:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   30b96:	f7f8 f8ff 	bl	28d98 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   30b9a:	bd08      	pop	{r3, pc}

00030b9c <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
   30b9c:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
   30b9e:	f7f8 f8fb 	bl	28d98 <sys_clock_tick_get>
}
   30ba2:	bd08      	pop	{r3, pc}

00030ba4 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   30ba4:	b900      	cbnz	r0, 30ba8 <z_impl_k_busy_wait+0x4>
   30ba6:	4770      	bx	lr
{
   30ba8:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   30baa:	f7e5 fd7f 	bl	166ac <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   30bae:	bd08      	pop	{r3, pc}

00030bb0 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   30bb0:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   30bb4:	bf08      	it	eq
   30bb6:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
   30bba:	d021      	beq.n	30c00 <sys_clock_timeout_end_calc+0x50>
{
   30bbc:	b538      	push	{r3, r4, r5, lr}
   30bbe:	4605      	mov	r5, r0
   30bc0:	460c      	mov	r4, r1
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   30bc2:	ea51 0300 	orrs.w	r3, r1, r0
   30bc6:	d009      	beq.n	30bdc <sys_clock_timeout_end_calc+0x2c>
		return sys_clock_tick_get();
	} else {

		dt = timeout.ticks;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   30bc8:	f06f 0301 	mvn.w	r3, #1
   30bcc:	1a18      	subs	r0, r3, r0
   30bce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   30bd2:	eb63 0101 	sbc.w	r1, r3, r1
   30bd6:	2900      	cmp	r1, #0
   30bd8:	db03      	blt.n	30be2 <sys_clock_timeout_end_calc+0x32>
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   30bda:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get();
   30bdc:	f7f8 f8dc 	bl	28d98 <sys_clock_tick_get>
   30be0:	e7fb      	b.n	30bda <sys_clock_timeout_end_calc+0x2a>
		return sys_clock_tick_get() + MAX(1, dt);
   30be2:	f7f8 f8d9 	bl	28d98 <sys_clock_tick_get>
   30be6:	4603      	mov	r3, r0
   30be8:	4628      	mov	r0, r5
   30bea:	4622      	mov	r2, r4
   30bec:	2d01      	cmp	r5, #1
   30bee:	f174 0400 	sbcs.w	r4, r4, #0
   30bf2:	da01      	bge.n	30bf8 <sys_clock_timeout_end_calc+0x48>
   30bf4:	2001      	movs	r0, #1
   30bf6:	2200      	movs	r2, #0
   30bf8:	1818      	adds	r0, r3, r0
   30bfa:	eb41 0102 	adc.w	r1, r1, r2
   30bfe:	e7ec      	b.n	30bda <sys_clock_timeout_end_calc+0x2a>
		return UINT64_MAX;
   30c00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30c04:	4601      	mov	r1, r0
}
   30c06:	4770      	bx	lr

00030c08 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   30c08:	b510      	push	{r4, lr}
   30c0a:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   30c0c:	f7f7 ff3a 	bl	28a84 <z_abort_timeout>

	if (inactive) {
   30c10:	b9a0      	cbnz	r0, 30c3c <z_impl_k_timer_stop+0x34>
		return;
	}

	if (timer->stop_fn != NULL) {
   30c12:	6a63      	ldr	r3, [r4, #36]	; 0x24
   30c14:	b10b      	cbz	r3, 30c1a <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   30c16:	4620      	mov	r0, r4
   30c18:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   30c1a:	f104 0018 	add.w	r0, r4, #24
   30c1e:	f7f7 fac7 	bl	281b0 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   30c22:	b158      	cbz	r0, 30c3c <z_impl_k_timer_stop+0x34>
			z_ready_thread(pending_thread);
   30c24:	f7f6 ff4a 	bl	27abc <z_ready_thread>
	__asm__ volatile(
   30c28:	f04f 0340 	mov.w	r3, #64	; 0x40
   30c2c:	f3ef 8011 	mrs	r0, BASEPRI
   30c30:	f383 8812 	msr	BASEPRI_MAX, r3
   30c34:	f3bf 8f6f 	isb	sy
   30c38:	f7ff ff65 	bl	30b06 <z_reschedule_irqlock>
			z_reschedule_unlocked();
		}
	}
}
   30c3c:	bd10      	pop	{r4, pc}

00030c3e <poller_thread>:
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   30c3e:	b108      	cbz	r0, 30c44 <poller_thread+0x6>
   30c40:	3860      	subs	r0, #96	; 0x60
   30c42:	4770      	bx	lr
}
   30c44:	4770      	bx	lr

00030c46 <signal_triggered_work>:

extern int z_work_submit_to_queue(struct k_work_q *queue,
			 struct k_work *work);

static int signal_triggered_work(struct k_poll_event *event, uint32_t status)
{
   30c46:	b570      	push	{r4, r5, r6, lr}
	struct z_poller *poller = event->poller;
   30c48:	6884      	ldr	r4, [r0, #8]
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   30c4a:	7823      	ldrb	r3, [r4, #0]
   30c4c:	b173      	cbz	r3, 30c6c <signal_triggered_work+0x26>
   30c4e:	f854 5c04 	ldr.w	r5, [r4, #-4]
   30c52:	b15d      	cbz	r5, 30c6c <signal_triggered_work+0x26>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
   30c54:	f1a4 0614 	sub.w	r6, r4, #20
   30c58:	f104 0014 	add.w	r0, r4, #20
   30c5c:	f7f7 ff12 	bl	28a84 <z_abort_timeout>
		twork->poll_result = 0;
   30c60:	2300      	movs	r3, #0
   30c62:	62e3      	str	r3, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   30c64:	4631      	mov	r1, r6
   30c66:	4628      	mov	r0, r5
   30c68:	f7f6 f8ac 	bl	26dc4 <z_work_submit_to_queue>
	}

	return 0;
}
   30c6c:	2000      	movs	r0, #0
   30c6e:	bd70      	pop	{r4, r5, r6, pc}

00030c70 <signal_poll_event>:
{
   30c70:	b570      	push	{r4, r5, r6, lr}
   30c72:	4604      	mov	r4, r0
   30c74:	460d      	mov	r5, r1
	struct z_poller *poller = event->poller;
   30c76:	6886      	ldr	r6, [r0, #8]
	if (poller != NULL) {
   30c78:	b1d6      	cbz	r6, 30cb0 <signal_poll_event+0x40>
		if (poller->mode == MODE_POLL) {
   30c7a:	7873      	ldrb	r3, [r6, #1]
   30c7c:	2b01      	cmp	r3, #1
   30c7e:	d00d      	beq.n	30c9c <signal_poll_event+0x2c>
		} else if (poller->mode == MODE_TRIGGERED) {
   30c80:	2b02      	cmp	r3, #2
   30c82:	d012      	beq.n	30caa <signal_poll_event+0x3a>
		poller->is_polling = false;
   30c84:	2000      	movs	r0, #0
   30c86:	7030      	strb	r0, [r6, #0]
	event->poller = NULL;
   30c88:	2300      	movs	r3, #0
   30c8a:	60a3      	str	r3, [r4, #8]
	event->state |= state;
   30c8c:	68e3      	ldr	r3, [r4, #12]
   30c8e:	f3c3 3145 	ubfx	r1, r3, #13, #6
   30c92:	430d      	orrs	r5, r1
   30c94:	f365 3352 	bfi	r3, r5, #13, #6
   30c98:	60e3      	str	r3, [r4, #12]
}
   30c9a:	bd70      	pop	{r4, r5, r6, pc}
			retcode = signal_poller(event, state);
   30c9c:	f7f8 fa9a 	bl	291d4 <signal_poller>
		poller->is_polling = false;
   30ca0:	2300      	movs	r3, #0
   30ca2:	7033      	strb	r3, [r6, #0]
		if (retcode < 0) {
   30ca4:	4298      	cmp	r0, r3
   30ca6:	daef      	bge.n	30c88 <signal_poll_event+0x18>
   30ca8:	e7f7      	b.n	30c9a <signal_poll_event+0x2a>
			retcode = signal_triggered_work(event, state);
   30caa:	f7ff ffcc 	bl	30c46 <signal_triggered_work>
   30cae:	e7f7      	b.n	30ca0 <signal_poll_event+0x30>
	int retcode = 0;
   30cb0:	2000      	movs	r0, #0
   30cb2:	e7e9      	b.n	30c88 <signal_poll_event+0x18>

00030cb4 <z_handle_obj_poll_events>:
{
   30cb4:	b508      	push	{r3, lr}
   30cb6:	4603      	mov	r3, r0
	return list->head == list;
   30cb8:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   30cba:	4283      	cmp	r3, r0
   30cbc:	d009      	beq.n	30cd2 <z_handle_obj_poll_events+0x1e>
	sys_dnode_t *const prev = node->prev;
   30cbe:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   30cc0:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   30cc2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   30cc4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   30cc6:	2300      	movs	r3, #0
   30cc8:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   30cca:	6043      	str	r3, [r0, #4]
	if (poll_event != NULL) {
   30ccc:	b108      	cbz	r0, 30cd2 <z_handle_obj_poll_events+0x1e>
		(void) signal_poll_event(poll_event, state);
   30cce:	f7ff ffcf 	bl	30c70 <signal_poll_event>
}
   30cd2:	bd08      	pop	{r3, pc}

00030cd4 <z_impl_k_poll_signal_init>:
	list->head = (sys_dnode_t *)list;
   30cd4:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   30cd6:	6040      	str	r0, [r0, #4]
	sig->signaled = 0U;
   30cd8:	2300      	movs	r3, #0
   30cda:	6083      	str	r3, [r0, #8]
}
   30cdc:	4770      	bx	lr

00030cde <z_impl_k_poll_signal_reset>:
	sig->signaled = 0U;
   30cde:	2300      	movs	r3, #0
   30ce0:	6083      	str	r3, [r0, #8]
}
   30ce2:	4770      	bx	lr

00030ce4 <k_free>:
	if (ptr != NULL) {
   30ce4:	b130      	cbz	r0, 30cf4 <k_free+0x10>
{
   30ce6:	b508      	push	{r3, lr}
		k_heap_free(*heap_ref, ptr);
   30ce8:	1f01      	subs	r1, r0, #4
   30cea:	f850 0c04 	ldr.w	r0, [r0, #-4]
   30cee:	f7f4 ffab 	bl	25c48 <k_heap_free>
}
   30cf2:	bd08      	pop	{r3, pc}
   30cf4:	4770      	bx	lr

00030cf6 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   30cf6:	4770      	bx	lr

00030cf8 <memcmp>:
   30cf8:	b510      	push	{r4, lr}
   30cfa:	3901      	subs	r1, #1
   30cfc:	4402      	add	r2, r0
   30cfe:	4290      	cmp	r0, r2
   30d00:	d101      	bne.n	30d06 <memcmp+0xe>
   30d02:	2000      	movs	r0, #0
   30d04:	e005      	b.n	30d12 <memcmp+0x1a>
   30d06:	7803      	ldrb	r3, [r0, #0]
   30d08:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   30d0c:	42a3      	cmp	r3, r4
   30d0e:	d001      	beq.n	30d14 <memcmp+0x1c>
   30d10:	1b18      	subs	r0, r3, r4
   30d12:	bd10      	pop	{r4, pc}
   30d14:	3001      	adds	r0, #1
   30d16:	e7f2      	b.n	30cfe <memcmp+0x6>

00030d18 <memcpy>:
   30d18:	440a      	add	r2, r1
   30d1a:	4291      	cmp	r1, r2
   30d1c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   30d20:	d100      	bne.n	30d24 <memcpy+0xc>
   30d22:	4770      	bx	lr
   30d24:	b510      	push	{r4, lr}
   30d26:	f811 4b01 	ldrb.w	r4, [r1], #1
   30d2a:	f803 4f01 	strb.w	r4, [r3, #1]!
   30d2e:	4291      	cmp	r1, r2
   30d30:	d1f9      	bne.n	30d26 <memcpy+0xe>
   30d32:	bd10      	pop	{r4, pc}

00030d34 <__memcpy_chk>:
   30d34:	429a      	cmp	r2, r3
   30d36:	b508      	push	{r3, lr}
   30d38:	d901      	bls.n	30d3e <__memcpy_chk+0xa>
   30d3a:	f7e5 fc7b 	bl	16634 <__chk_fail>
   30d3e:	4281      	cmp	r1, r0
   30d40:	d804      	bhi.n	30d4c <__memcpy_chk+0x18>
   30d42:	188b      	adds	r3, r1, r2
   30d44:	4298      	cmp	r0, r3
   30d46:	d3f8      	bcc.n	30d3a <__memcpy_chk+0x6>
   30d48:	4281      	cmp	r1, r0
   30d4a:	d102      	bne.n	30d52 <__memcpy_chk+0x1e>
   30d4c:	1883      	adds	r3, r0, r2
   30d4e:	4299      	cmp	r1, r3
   30d50:	d3f3      	bcc.n	30d3a <__memcpy_chk+0x6>
   30d52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   30d56:	f7ff bfdf 	b.w	30d18 <memcpy>

00030d5a <memset>:
   30d5a:	4402      	add	r2, r0
   30d5c:	4603      	mov	r3, r0
   30d5e:	4293      	cmp	r3, r2
   30d60:	d100      	bne.n	30d64 <memset+0xa>
   30d62:	4770      	bx	lr
   30d64:	f803 1b01 	strb.w	r1, [r3], #1
   30d68:	e7f9      	b.n	30d5e <memset+0x4>

00030d6a <__memset_chk>:
   30d6a:	429a      	cmp	r2, r3
   30d6c:	b508      	push	{r3, lr}
   30d6e:	d901      	bls.n	30d74 <__memset_chk+0xa>
   30d70:	f7e5 fc60 	bl	16634 <__chk_fail>
   30d74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   30d78:	f7ff bfef 	b.w	30d5a <memset>

00030d7c <_printf_common>:
   30d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   30d80:	4616      	mov	r6, r2
   30d82:	4699      	mov	r9, r3
   30d84:	688a      	ldr	r2, [r1, #8]
   30d86:	690b      	ldr	r3, [r1, #16]
   30d88:	f8dd 8020 	ldr.w	r8, [sp, #32]
   30d8c:	4293      	cmp	r3, r2
   30d8e:	bfb8      	it	lt
   30d90:	4613      	movlt	r3, r2
   30d92:	6033      	str	r3, [r6, #0]
   30d94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   30d98:	4607      	mov	r7, r0
   30d9a:	460c      	mov	r4, r1
   30d9c:	b10a      	cbz	r2, 30da2 <_printf_common+0x26>
   30d9e:	3301      	adds	r3, #1
   30da0:	6033      	str	r3, [r6, #0]
   30da2:	6823      	ldr	r3, [r4, #0]
   30da4:	0699      	lsls	r1, r3, #26
   30da6:	bf42      	ittt	mi
   30da8:	6833      	ldrmi	r3, [r6, #0]
   30daa:	3302      	addmi	r3, #2
   30dac:	6033      	strmi	r3, [r6, #0]
   30dae:	6825      	ldr	r5, [r4, #0]
   30db0:	f015 0506 	ands.w	r5, r5, #6
   30db4:	d106      	bne.n	30dc4 <_printf_common+0x48>
   30db6:	f104 0a19 	add.w	sl, r4, #25
   30dba:	68e3      	ldr	r3, [r4, #12]
   30dbc:	6832      	ldr	r2, [r6, #0]
   30dbe:	1a9b      	subs	r3, r3, r2
   30dc0:	42ab      	cmp	r3, r5
   30dc2:	dc26      	bgt.n	30e12 <_printf_common+0x96>
   30dc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   30dc8:	1e13      	subs	r3, r2, #0
   30dca:	6822      	ldr	r2, [r4, #0]
   30dcc:	bf18      	it	ne
   30dce:	2301      	movne	r3, #1
   30dd0:	0692      	lsls	r2, r2, #26
   30dd2:	d42b      	bmi.n	30e2c <_printf_common+0xb0>
   30dd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
   30dd8:	4649      	mov	r1, r9
   30dda:	4638      	mov	r0, r7
   30ddc:	47c0      	blx	r8
   30dde:	3001      	adds	r0, #1
   30de0:	d01e      	beq.n	30e20 <_printf_common+0xa4>
   30de2:	6823      	ldr	r3, [r4, #0]
   30de4:	68e5      	ldr	r5, [r4, #12]
   30de6:	6832      	ldr	r2, [r6, #0]
   30de8:	f003 0306 	and.w	r3, r3, #6
   30dec:	2b04      	cmp	r3, #4
   30dee:	bf08      	it	eq
   30df0:	1aad      	subeq	r5, r5, r2
   30df2:	68a3      	ldr	r3, [r4, #8]
   30df4:	6922      	ldr	r2, [r4, #16]
   30df6:	bf0c      	ite	eq
   30df8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   30dfc:	2500      	movne	r5, #0
   30dfe:	4293      	cmp	r3, r2
   30e00:	bfc4      	itt	gt
   30e02:	1a9b      	subgt	r3, r3, r2
   30e04:	18ed      	addgt	r5, r5, r3
   30e06:	2600      	movs	r6, #0
   30e08:	341a      	adds	r4, #26
   30e0a:	42b5      	cmp	r5, r6
   30e0c:	d11a      	bne.n	30e44 <_printf_common+0xc8>
   30e0e:	2000      	movs	r0, #0
   30e10:	e008      	b.n	30e24 <_printf_common+0xa8>
   30e12:	2301      	movs	r3, #1
   30e14:	4652      	mov	r2, sl
   30e16:	4649      	mov	r1, r9
   30e18:	4638      	mov	r0, r7
   30e1a:	47c0      	blx	r8
   30e1c:	3001      	adds	r0, #1
   30e1e:	d103      	bne.n	30e28 <_printf_common+0xac>
   30e20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   30e28:	3501      	adds	r5, #1
   30e2a:	e7c6      	b.n	30dba <_printf_common+0x3e>
   30e2c:	18e1      	adds	r1, r4, r3
   30e2e:	1c5a      	adds	r2, r3, #1
   30e30:	2030      	movs	r0, #48	; 0x30
   30e32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   30e36:	4422      	add	r2, r4
   30e38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   30e3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   30e40:	3302      	adds	r3, #2
   30e42:	e7c7      	b.n	30dd4 <_printf_common+0x58>
   30e44:	2301      	movs	r3, #1
   30e46:	4622      	mov	r2, r4
   30e48:	4649      	mov	r1, r9
   30e4a:	4638      	mov	r0, r7
   30e4c:	47c0      	blx	r8
   30e4e:	3001      	adds	r0, #1
   30e50:	d0e6      	beq.n	30e20 <_printf_common+0xa4>
   30e52:	3601      	adds	r6, #1
   30e54:	e7d9      	b.n	30e0a <_printf_common+0x8e>

00030e56 <strncmp>:
   30e56:	b510      	push	{r4, lr}
   30e58:	4603      	mov	r3, r0
   30e5a:	b172      	cbz	r2, 30e7a <strncmp+0x24>
   30e5c:	3901      	subs	r1, #1
   30e5e:	1884      	adds	r4, r0, r2
   30e60:	f813 0b01 	ldrb.w	r0, [r3], #1
   30e64:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   30e68:	4290      	cmp	r0, r2
   30e6a:	d101      	bne.n	30e70 <strncmp+0x1a>
   30e6c:	42a3      	cmp	r3, r4
   30e6e:	d101      	bne.n	30e74 <strncmp+0x1e>
   30e70:	1a80      	subs	r0, r0, r2
   30e72:	bd10      	pop	{r4, pc}
   30e74:	2800      	cmp	r0, #0
   30e76:	d1f3      	bne.n	30e60 <strncmp+0xa>
   30e78:	e7fa      	b.n	30e70 <strncmp+0x1a>
   30e7a:	4610      	mov	r0, r2
   30e7c:	e7f9      	b.n	30e72 <strncmp+0x1c>

00030e7e <strnlen>:
   30e7e:	b510      	push	{r4, lr}
   30e80:	4602      	mov	r2, r0
   30e82:	4401      	add	r1, r0
   30e84:	428a      	cmp	r2, r1
   30e86:	4613      	mov	r3, r2
   30e88:	d003      	beq.n	30e92 <strnlen+0x14>
   30e8a:	781c      	ldrb	r4, [r3, #0]
   30e8c:	3201      	adds	r2, #1
   30e8e:	2c00      	cmp	r4, #0
   30e90:	d1f8      	bne.n	30e84 <strnlen+0x6>
   30e92:	1a18      	subs	r0, r3, r0
   30e94:	bd10      	pop	{r4, pc}

00030e96 <memmove>:
   30e96:	4288      	cmp	r0, r1
   30e98:	b510      	push	{r4, lr}
   30e9a:	eb01 0402 	add.w	r4, r1, r2
   30e9e:	d902      	bls.n	30ea6 <memmove+0x10>
   30ea0:	4284      	cmp	r4, r0
   30ea2:	4623      	mov	r3, r4
   30ea4:	d807      	bhi.n	30eb6 <memmove+0x20>
   30ea6:	1e43      	subs	r3, r0, #1
   30ea8:	42a1      	cmp	r1, r4
   30eaa:	d008      	beq.n	30ebe <memmove+0x28>
   30eac:	f811 2b01 	ldrb.w	r2, [r1], #1
   30eb0:	f803 2f01 	strb.w	r2, [r3, #1]!
   30eb4:	e7f8      	b.n	30ea8 <memmove+0x12>
   30eb6:	4402      	add	r2, r0
   30eb8:	4601      	mov	r1, r0
   30eba:	428a      	cmp	r2, r1
   30ebc:	d100      	bne.n	30ec0 <memmove+0x2a>
   30ebe:	bd10      	pop	{r4, pc}
   30ec0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   30ec4:	f802 4d01 	strb.w	r4, [r2, #-1]!
   30ec8:	e7f7      	b.n	30eba <memmove+0x24>

00030eca <_realloc_r>:
   30eca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   30ecc:	4607      	mov	r7, r0
   30ece:	4614      	mov	r4, r2
   30ed0:	460e      	mov	r6, r1
   30ed2:	b921      	cbnz	r1, 30ede <_realloc_r+0x14>
   30ed4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   30ed8:	4611      	mov	r1, r2
   30eda:	f7f9 ba29 	b.w	2a330 <_malloc_r>
   30ede:	b922      	cbnz	r2, 30eea <_realloc_r+0x20>
   30ee0:	f7f9 f9dc 	bl	2a29c <_free_r>
   30ee4:	4625      	mov	r5, r4
   30ee6:	4628      	mov	r0, r5
   30ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   30eea:	f000 f86f 	bl	30fcc <_malloc_usable_size_r>
   30eee:	42a0      	cmp	r0, r4
   30ef0:	d20f      	bcs.n	30f12 <_realloc_r+0x48>
   30ef2:	4621      	mov	r1, r4
   30ef4:	4638      	mov	r0, r7
   30ef6:	f7f9 fa1b 	bl	2a330 <_malloc_r>
   30efa:	4605      	mov	r5, r0
   30efc:	2800      	cmp	r0, #0
   30efe:	d0f2      	beq.n	30ee6 <_realloc_r+0x1c>
   30f00:	4631      	mov	r1, r6
   30f02:	4622      	mov	r2, r4
   30f04:	f7ff ff08 	bl	30d18 <memcpy>
   30f08:	4631      	mov	r1, r6
   30f0a:	4638      	mov	r0, r7
   30f0c:	f7f9 f9c6 	bl	2a29c <_free_r>
   30f10:	e7e9      	b.n	30ee6 <_realloc_r+0x1c>
   30f12:	4635      	mov	r5, r6
   30f14:	e7e7      	b.n	30ee6 <_realloc_r+0x1c>

00030f16 <__ssputs_r>:
   30f16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   30f1a:	688e      	ldr	r6, [r1, #8]
   30f1c:	429e      	cmp	r6, r3
   30f1e:	4682      	mov	sl, r0
   30f20:	460c      	mov	r4, r1
   30f22:	4690      	mov	r8, r2
   30f24:	461f      	mov	r7, r3
   30f26:	d838      	bhi.n	30f9a <__ssputs_r+0x84>
   30f28:	898a      	ldrh	r2, [r1, #12]
   30f2a:	f412 6f90 	tst.w	r2, #1152	; 0x480
   30f2e:	d032      	beq.n	30f96 <__ssputs_r+0x80>
   30f30:	6825      	ldr	r5, [r4, #0]
   30f32:	6909      	ldr	r1, [r1, #16]
   30f34:	eba5 0901 	sub.w	r9, r5, r1
   30f38:	6965      	ldr	r5, [r4, #20]
   30f3a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   30f3e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   30f42:	3301      	adds	r3, #1
   30f44:	444b      	add	r3, r9
   30f46:	106d      	asrs	r5, r5, #1
   30f48:	429d      	cmp	r5, r3
   30f4a:	bf38      	it	cc
   30f4c:	461d      	movcc	r5, r3
   30f4e:	0553      	lsls	r3, r2, #21
   30f50:	d531      	bpl.n	30fb6 <__ssputs_r+0xa0>
   30f52:	4629      	mov	r1, r5
   30f54:	f7f9 f9ec 	bl	2a330 <_malloc_r>
   30f58:	4606      	mov	r6, r0
   30f5a:	b950      	cbnz	r0, 30f72 <__ssputs_r+0x5c>
   30f5c:	230c      	movs	r3, #12
   30f5e:	f8ca 3000 	str.w	r3, [sl]
   30f62:	89a3      	ldrh	r3, [r4, #12]
   30f64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   30f68:	81a3      	strh	r3, [r4, #12]
   30f6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   30f72:	6921      	ldr	r1, [r4, #16]
   30f74:	464a      	mov	r2, r9
   30f76:	f7ff fecf 	bl	30d18 <memcpy>
   30f7a:	89a3      	ldrh	r3, [r4, #12]
   30f7c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   30f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   30f84:	81a3      	strh	r3, [r4, #12]
   30f86:	6126      	str	r6, [r4, #16]
   30f88:	6165      	str	r5, [r4, #20]
   30f8a:	444e      	add	r6, r9
   30f8c:	eba5 0509 	sub.w	r5, r5, r9
   30f90:	6026      	str	r6, [r4, #0]
   30f92:	60a5      	str	r5, [r4, #8]
   30f94:	463e      	mov	r6, r7
   30f96:	42be      	cmp	r6, r7
   30f98:	d900      	bls.n	30f9c <__ssputs_r+0x86>
   30f9a:	463e      	mov	r6, r7
   30f9c:	6820      	ldr	r0, [r4, #0]
   30f9e:	4632      	mov	r2, r6
   30fa0:	4641      	mov	r1, r8
   30fa2:	f7ff ff78 	bl	30e96 <memmove>
   30fa6:	68a3      	ldr	r3, [r4, #8]
   30fa8:	1b9b      	subs	r3, r3, r6
   30faa:	60a3      	str	r3, [r4, #8]
   30fac:	6823      	ldr	r3, [r4, #0]
   30fae:	4433      	add	r3, r6
   30fb0:	6023      	str	r3, [r4, #0]
   30fb2:	2000      	movs	r0, #0
   30fb4:	e7db      	b.n	30f6e <__ssputs_r+0x58>
   30fb6:	462a      	mov	r2, r5
   30fb8:	f7ff ff87 	bl	30eca <_realloc_r>
   30fbc:	4606      	mov	r6, r0
   30fbe:	2800      	cmp	r0, #0
   30fc0:	d1e1      	bne.n	30f86 <__ssputs_r+0x70>
   30fc2:	6921      	ldr	r1, [r4, #16]
   30fc4:	4650      	mov	r0, sl
   30fc6:	f7f9 f969 	bl	2a29c <_free_r>
   30fca:	e7c7      	b.n	30f5c <__ssputs_r+0x46>

00030fcc <_malloc_usable_size_r>:
   30fcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
   30fd0:	1f18      	subs	r0, r3, #4
   30fd2:	2b00      	cmp	r3, #0
   30fd4:	bfbc      	itt	lt
   30fd6:	580b      	ldrlt	r3, [r1, r0]
   30fd8:	18c0      	addlt	r0, r0, r3
   30fda:	4770      	bx	lr
